<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦的站点 – RabbitMQ</title><link>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/Message-Queue%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RabbitMQ/</link><description>Recent content in RabbitMQ on 断念梦的站点</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/Message-Queue%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RabbitMQ/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: go rabbitmq 库</title><link>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/Message-Queue%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RabbitMQ/go-rabbitmq-%E5%BA%93/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/Message-Queue%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RabbitMQ/go-rabbitmq-%E5%BA%93/</guid><description>
&lt;h1 id="heading">&lt;a class="td-heading-self-link" href="#heading" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;a href="http://www.topgoer.com/%25E6%2595%25B0%25E6%258D%25AE%25E5%25BA%2593%25E6%2593%258D%25E4%25BD%259C/go%25E6%2593%258D%25E4%25BD%259CRabbitMQ/Simple%25E6%25A8%25A1%25E5%25BC%258F.html">http://www.topgoer.com/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/go%E6%93%8D%E4%BD%9CRabbitMQ/Simple%E6%A8%A1%E5%BC%8F.html&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">RabbitMQ&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;log&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;github.com/streadway/amqp&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//连接信息amqp://kuteng:kuteng@127.0.0.1:5672/kuteng这个信息是固定不变的amqp://事固定参数后面两个是用户名密码ip地址端口号Virtual Host
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">MQURL&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;amqp://kuteng:kuteng@127.0.0.1:5672/kuteng&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//rabbitMQ结构体
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">RabbitMQ&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">conn&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">amqp&lt;/span>.&lt;span style="color:#a6e22e">Connection&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">channel&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">amqp&lt;/span>.&lt;span style="color:#a6e22e">Channel&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//队列名称
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">QueueName&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//交换机名称
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Exchange&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//bind Key 名称
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Key&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//连接信息
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Mqurl&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//创建结构体实例
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">NewRabbitMQ&lt;/span>(&lt;span style="color:#a6e22e">queueName&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">exchange&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">RabbitMQ&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">RabbitMQ&lt;/span>{&lt;span style="color:#a6e22e">QueueName&lt;/span>: &lt;span style="color:#a6e22e">queueName&lt;/span>, &lt;span style="color:#a6e22e">Exchange&lt;/span>: &lt;span style="color:#a6e22e">exchange&lt;/span>, &lt;span style="color:#a6e22e">Key&lt;/span>: &lt;span style="color:#a6e22e">key&lt;/span>, &lt;span style="color:#a6e22e">Mqurl&lt;/span>: &lt;span style="color:#a6e22e">MQURL&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//断开channel 和 connection
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">RabbitMQ&lt;/span>) &lt;span style="color:#a6e22e">Destory&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">channel&lt;/span>.&lt;span style="color:#a6e22e">Close&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">conn&lt;/span>.&lt;span style="color:#a6e22e">Close&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//错误处理函数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">RabbitMQ&lt;/span>) &lt;span style="color:#a6e22e">failOnErr&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>, &lt;span style="color:#a6e22e">message&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Fatalf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;%s:%s&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">message&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> panic(&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Sprintf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;%s:%s&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">message&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//创建简单模式下RabbitMQ实例
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">NewRabbitMQSimple&lt;/span>(&lt;span style="color:#a6e22e">queueName&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">RabbitMQ&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//创建RabbitMQ实例
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">rabbitmq&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">NewRabbitMQ&lt;/span>(&lt;span style="color:#a6e22e">queueName&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//获取connection
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">rabbitmq&lt;/span>.&lt;span style="color:#a6e22e">conn&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">amqp&lt;/span>.&lt;span style="color:#a6e22e">Dial&lt;/span>(&lt;span style="color:#a6e22e">rabbitmq&lt;/span>.&lt;span style="color:#a6e22e">Mqurl&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">rabbitmq&lt;/span>.&lt;span style="color:#a6e22e">failOnErr&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;failed to connect rabb&amp;#34;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;itmq!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//获取channel
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">rabbitmq&lt;/span>.&lt;span style="color:#a6e22e">channel&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">rabbitmq&lt;/span>.&lt;span style="color:#a6e22e">conn&lt;/span>.&lt;span style="color:#a6e22e">Channel&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">rabbitmq&lt;/span>.&lt;span style="color:#a6e22e">failOnErr&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;failed to open a channel&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">rabbitmq&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//直接模式队列生产
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">RabbitMQ&lt;/span>) &lt;span style="color:#a6e22e">PublishSimple&lt;/span>(&lt;span style="color:#a6e22e">message&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//1.申请队列，如果队列不存在会自动创建，存在则跳过创建
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">channel&lt;/span>.&lt;span style="color:#a6e22e">QueueDeclare&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">QueueName&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//是否持久化
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//是否自动删除
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//是否具有排他性
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//是否阻塞处理
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//额外的属性
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//调用channel 发送消息到队列中
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">channel&lt;/span>.&lt;span style="color:#a6e22e">Publish&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">Exchange&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">QueueName&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//如果为true，根据自身exchange类型和routekey规则无法找到符合条件的队列会把消息返还给发送者
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//如果为true，当exchange发送消息到队列后发现队列上没有消费者，则会把消息返还给发送者
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">amqp&lt;/span>.&lt;span style="color:#a6e22e">Publishing&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ContentType&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;text/plain&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Body&lt;/span>: []byte(&lt;span style="color:#a6e22e">message&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//simple 模式下消费者
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">RabbitMQ&lt;/span>) &lt;span style="color:#a6e22e">ConsumeSimple&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//1.申请队列，如果队列不存在会自动创建，存在则跳过创建
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">q&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">channel&lt;/span>.&lt;span style="color:#a6e22e">QueueDeclare&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">QueueName&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//是否持久化
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//是否自动删除
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//是否具有排他性
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//是否阻塞处理
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//额外的属性
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//接收消息
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">msgs&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">channel&lt;/span>.&lt;span style="color:#a6e22e">Consume&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">q&lt;/span>.&lt;span style="color:#a6e22e">Name&lt;/span>, &lt;span style="color:#75715e">// queue
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">//用来区分多个消费者
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>, &lt;span style="color:#75715e">// consumer
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">//是否自动应答
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>, &lt;span style="color:#75715e">// auto-ack
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">//是否独有
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>, &lt;span style="color:#75715e">// exclusive
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">//设置为true，表示 不能将同一个Conenction中生产者发送的消息传递给这个Connection中 的消费者
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>, &lt;span style="color:#75715e">// no-local
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">//列是否阻塞
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>, &lt;span style="color:#75715e">// no-wait
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#75715e">// args
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">forever&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make(&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//启用协程处理消息
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">d&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">msgs&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//消息逻辑处理，可以自行设计逻辑
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Received a message: %s&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">d&lt;/span>.&lt;span style="color:#a6e22e">Body&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34; [*] Waiting for messages. To exit press CTRL+C&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">forever&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: RabbitMQ</title><link>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/Message-Queue%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RabbitMQ/RabbitMQ/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/Message-Queue%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RabbitMQ/RabbitMQ/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>官方网址：&lt;a href="https://www.rabbitmq.com/">https://www.rabbitmq.com/&lt;/a>&lt;/li>
&lt;li>消息队列模拟器：&lt;a href="http://tryrabbitmq.com/">http://tryrabbitmq.com/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.yuque.com/noobwo/mq/hpiop0">https://www.yuque.com/noobwo/mq/hpiop0&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://m.6-km.com/next/quorum-queues.html">https://m.6-km.com/next/quorum-queues.html&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zhuanlan.zhihu.com/p/63700605">https://zhuanlan.zhihu.com/p/63700605&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Rabbit Message Queue(Rabbit 消息队列，简称：RabbitMQ)。是一个在 AMQP 基础上实现的，可复用的消息队列服务。&lt;/p>
&lt;p>Advanced Message Queuing Protocol(高级消息队列协议，简称 AMQP) ，是一个提供统消息服务的应用层(7 层)协议。其设计目标是对于消息的排序、路由（包括点对点和订阅-发布）、保持可靠性、保证安全性[1]。AMQP 规范了消息传递方和接收方的行为，以使消息在不同的提供商之间实现互操作性，就像 SMTP，HTTP，FTP 等协议可以创建交互系统一样。与先前的中间件标准（如 Java 消息服务）不同的是，JMS 在特定的 API 接口层面和实现行为上进行了统一，而高级消息队列协议则关注于各种消息如何以字节流的形式进行传递。因此，使用了符合协议实现的任意应用程序之间可以保持对消息的创建、传递。&lt;/p>
&lt;h2 id="工作机制概述">工作机制概述&lt;a class="td-heading-self-link" href="#%e5%b7%a5%e4%bd%9c%e6%9c%ba%e5%88%b6%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>在了解消息通讯之前首先要了解 3 个概念：生产者、消费者和代理。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/vi79ye/1616130695655-d434cc0d-b15a-48c2-9fad-7fa971d2ffa4.jpeg" alt="">&lt;/p>
&lt;p>Publisher(生产者)：消息的创建者，负责创建和推送数据到消息服务器；&lt;/p>
&lt;p>Consumer(消费者)：消息的接收方，用于处理数据和确认消息；&lt;/p>
&lt;p>Broker(代理)：就是 RabbitMQ 本身，用于扮演“快递”的角色，本身不生产消息，只是扮演“快递”的角色。&lt;/p>
&lt;p>消息发送原理&lt;/p>
&lt;p>首先你必须连接到 Rabbit 才能发布和消费消息，那怎么连接和发送消息的呢？&lt;/p>
&lt;p>你的应用程序和 Rabbit Server 之间会创建一个 TCP 连接，一旦 TCP 打开，并通过了认证，认证就是你试图连接 Rabbit 之前发送的 Rabbit 服务器连接信息和用户名和密码，有点像程序连接数据库，使用 Java 有两种连接认证的方式，后面代码会详细介绍，一旦认证通过你的应用程序和 Rabbit 就创建了一条 AMQP 信道（Channel）。&lt;/p>
&lt;p>信道是创建在“真实”TCP 上的虚拟连接，AMQP 命令都是通过信道发送出去的，每个信道都会有一个唯一的 ID，不论是发布消息，订阅队列或者介绍消息都是通过信道完成的。&lt;/p>
&lt;p>为什么不通过 TCP 直接发送命令？&lt;/p>
&lt;p>对于操作系统来说创建和销毁 TCP 会话是非常昂贵的开销，假设高峰期每秒有成千上万条连接，每个连接都要创建一条 TCP 会话，这就造成了 TCP 连接的巨大浪费，而且操作系统每秒能创建的 TCP 也是有限的，因此很快就会遇到系统瓶颈。&lt;/p>
&lt;p>如果我们每个请求都使用一条 TCP 连接，既满足了性能的需要，又能确保每个连接的私密性，这就是引入信道概念的原因。&lt;/p>
&lt;p>其实在生活中，这种模型用得非常多，就比如我们都会接触的网购快递，可以说是一个典型的消息队列的 case 了：&lt;/p>
&lt;p>商家不断的把商品扔给快递公司（注意不是直接将商品给买家），而快递公司则将商品根据地质分发对应的买家&lt;/p>
&lt;p>对上面这个过程进行拆解，可以映射扮演的角色&lt;/p>
&lt;ul>
&lt;li>商品：Message，传递的消息，由商家投递给快递公司时，需要进行打包（一般 Producer 生产消息也会将实体数据进行封装）&lt;/li>
&lt;li>商家：Produer 生产者&lt;/li>
&lt;li>快递公司： Queue，消息的载体&lt;/li>
&lt;li>买家：Consumer 消费者&lt;/li>
&lt;/ul>
&lt;p>那么快递公司时怎么知道要把商品给对应的买家呢？根据包裹上的地址+电话&lt;/p>
&lt;ul>
&lt;li>同样消息队列也需要一个映射规则，实现 Message 和 Consumer 之间的路由&lt;/li>
&lt;/ul>
&lt;h1 id="rabbitmq-基本概念">RabbitMQ 基本概念&lt;a class="td-heading-self-link" href="#rabbitmq-%e5%9f%ba%e6%9c%ac%e6%a6%82%e5%bf%b5" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;ol>
&lt;li>Exchange&lt;/li>
&lt;li>Queue&lt;/li>
&lt;li>Routing key # 一种规则，用于 Exchange 路由消息到匹配到规则的 Queue 上&lt;/li>
&lt;li>Binding # 交换器 与 队列(或另一个交换器) 的关联行为&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/vi79ye/1616130695576-789c9f61-914e-4f88-951c-b1a0915fdc4a.jpeg" alt="">&lt;/p>
&lt;h2 id="broker--指安装了-rabbitmq-的服务器">Broker # 指安装了 RabbitMQ 的服务器&lt;a class="td-heading-self-link" href="#broker--%e6%8c%87%e5%ae%89%e8%a3%85%e4%ba%86-rabbitmq-%e7%9a%84%e6%9c%8d%e5%8a%a1%e5%99%a8" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="virtual-host虚拟主机--类似-rabbitmq-虚拟化的感觉">Virtual Host(虚拟主机) # 类似 RabbitMQ 虚拟化的感觉&lt;a class="td-heading-self-link" href="#virtual-host%e8%99%9a%e6%8b%9f%e4%b8%bb%e6%9c%ba--%e7%b1%bb%e4%bc%bc-rabbitmq-%e8%99%9a%e6%8b%9f%e5%8c%96%e7%9a%84%e6%84%9f%e8%a7%89" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>每个 Rabbit 都能创建很多 vhost 我们称之为虚拟主机，每个虚拟主机其实都是 mini 版的 RabbitMQ，拥有自己的队列，交换器和绑定，拥有自己的权限机制。&lt;/p>
&lt;ol>
&lt;li>RabbitMQ 默认的 vhost 是 / 开箱即用；&lt;/li>
&lt;li>多个 vhost 是隔离的，多个 vhost 无法通讯，并且不用担心命名冲突（队列和交换器和绑定），实现了多层分离；&lt;/li>
&lt;li>创建用户的时候必须指定 vhost；&lt;/li>
&lt;/ol>
&lt;p>注意，从上层角度看，RabbitMQ 实现主要依靠 Exchange 与 Queue 来实现。&lt;/p>
&lt;h2 id="queue队列--用于存储消息">Queue(队列) # 用于存储消息&lt;a class="td-heading-self-link" href="#queue%e9%98%9f%e5%88%97--%e7%94%a8%e4%ba%8e%e5%ad%98%e5%82%a8%e6%b6%88%e6%81%af" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>官方文档：&lt;a href="https://www.rabbitmq.com/queues.html">https://www.rabbitmq.com/queues.html&lt;/a>&lt;/p>
&lt;h2 id="exchange交换器--用于接受分配消息">Exchange(交换器) # 用于接受、分配消息&lt;a class="td-heading-self-link" href="#exchange%e4%ba%a4%e6%8d%a2%e5%99%a8--%e7%94%a8%e4%ba%8e%e6%8e%a5%e5%8f%97%e5%88%86%e9%85%8d%e6%b6%88%e6%81%af" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>官方文档：未知&lt;/p>
&lt;p>客户端向 RebbitMQ 发送消息，并不会直接发送到 Queue 中，而是从 5674 端口到达 Exchange，然后根据路由规则，决定收到消息应该投递到哪个队列上，这些规则其中一部分称为 &lt;strong>Routing key(路由键)&lt;/strong>，另外一部分规则是根据 Exchange 的类型来决定。&lt;/p>
&lt;p>Queue 可以通过 Routing key 关联到 Exchange 上(也可以省略 Routing key 直接绑定)，这种关联行为称为 &lt;strong>Binding(绑定)&lt;/strong>。&lt;/p>
&lt;p>注意：&lt;/p>
&lt;ol>
&lt;li>绑定时所使用的 Routing key 可以使用通配符。&lt;/li>
&lt;li>为了与每个消息中的 Routing key 区分，我们一般称绑定时使用的 Routing key 为 &lt;strong>Binding key(绑定键)&lt;/strong>。&lt;/li>
&lt;/ol>
&lt;p>绑定完成后，当 Exchange 收到消息(&lt;strong>每个消息也可以指定 Routing key&lt;/strong>)后，凡是 Routing key 匹配 Binding key 条件的，则该消息会被发送到具有 Binding key 的队列中。如果匹配多分，则消息在 Exchange 中会复制多份。&lt;/p>
&lt;p>例如：现在发送一条消息，Routing key 为 test.1，两个队列绑定到交换器时，Binding key 分别为 &lt;em>.1 和 test.&lt;/em>，则该消息到达 Exchange 时，会复制为两份，分别发送到这两各队列中。&lt;/p>
&lt;p>&lt;strong>Exchange 的 4 种类型&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>direct # Routing key 与 Binding key 必须完全匹配，不接受通配符匹配。&lt;/li>
&lt;li>fanot # 不需要 routing key，收到消息后，自动将消息复制多份并发送给与自己绑定的队列上。&lt;/li>
&lt;li>headers&lt;/li>
&lt;li>topic # Routing key 与 Binding key 可以根据通配符匹配。匹配规则如下：
&lt;ol>
&lt;li>
&lt;ul>
&lt;li>匹配一个单词&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;h1 id="匹配-0-个或多个字符">匹配 0 个或多个字符&lt;a class="td-heading-self-link" href="#%e5%8c%b9%e9%85%8d-0-%e4%b8%aa%e6%88%96%e5%a4%9a%e4%b8%aa%e5%ad%97%e7%ac%a6" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;/li>
&lt;li>*，# 只能写在.号左右，且不能挨着字符&lt;/li>
&lt;li>单词和单词之间需要用.隔开。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>特殊的 Exchange
&lt;ol>
&lt;li>如果不手动绑定 Exchange 与 Queue，发送消息时不指定 Exchange，但是消息依然可以路由到队列中。&lt;/li>
&lt;li>这是因为每个 vhost 下都有一个 default Exchange。默认的 Exchange 不可以手动绑定，没有名字，不可以删除，direct 类型。每个 Queue 都会与当前 vhost 下的 默认 Exchange 隐式绑定在一起，且 Binding key 为 Queue 名称。&lt;/li>
&lt;li>消息中的 Routing key 必须指定为 Queue 名称，这时消息通过默认的 Exchange 被路由到对应的 Queue 上。这保证了消息准确投递。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h2 id="connection连接--应用程序与-rabbit-之间建立的连接程序代码中使用">Connection(连接) # 应用程序与 Rabbit 之间建立的连接，程序代码中使用&lt;a class="td-heading-self-link" href="#connection%e8%bf%9e%e6%8e%a5--%e5%ba%94%e7%94%a8%e7%a8%8b%e5%ba%8f%e4%b8%8e-rabbit-%e4%b9%8b%e9%97%b4%e5%bb%ba%e7%ab%8b%e7%9a%84%e8%bf%9e%e6%8e%a5%e7%a8%8b%e5%ba%8f%e4%bb%a3%e7%a0%81%e4%b8%ad%e4%bd%bf%e7%94%a8" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="channel信道--消息推送使用的通道">Channel(信道) # 消息推送使用的通道&lt;a class="td-heading-self-link" href="#channel%e4%bf%a1%e9%81%93--%e6%b6%88%e6%81%af%e6%8e%a8%e9%80%81%e4%bd%bf%e7%94%a8%e7%9a%84%e9%80%9a%e9%81%93" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h1 id="rabbitmq-配置">RabbitMQ 配置&lt;a class="td-heading-self-link" href="#rabbitmq-%e9%85%8d%e7%bd%ae" aria-label="Heading self-link">&lt;/a>&lt;/h1></description></item><item><title>Docs: RabbitMQ Operator</title><link>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/Message-Queue%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RabbitMQ/RabbitMQ-Operator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/Message-Queue%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RabbitMQ/RabbitMQ-Operator/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>官方文档,&lt;/li>
&lt;li>&lt;a href="https://www.rabbitmq.com/kubernetes/operator/operator-overview.html">https://www.rabbitmq.com/kubernetes/operator/operator-overview.html&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.rabbitmq.com/kubernetes/operator/using-operator.html#override">https://www.rabbitmq.com/kubernetes/operator/using-operator.html#override&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="通过-operator-部署一套生产可用的-rabbitmq-集群">通过 Operator 部署一套生产可用的 RabbitMQ 集群&lt;a class="td-heading-self-link" href="#%e9%80%9a%e8%bf%87-operator-%e9%83%a8%e7%bd%b2%e4%b8%80%e5%a5%97%e7%94%9f%e4%ba%a7%e5%8f%af%e7%94%a8%e7%9a%84-rabbitmq-%e9%9b%86%e7%be%a4" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h3 id="创建-namespace">创建 namespace&lt;a class="td-heading-self-link" href="#%e5%88%9b%e5%bb%ba-namespace" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;pre>&lt;code>kubectl create ns rabbitmq
&lt;/code>&lt;/pre>
&lt;h3 id="部署-operator">部署 operator&lt;a class="td-heading-self-link" href="#%e9%83%a8%e7%bd%b2-operator" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;pre>&lt;code>kubectl apply -f &amp;quot;https://github.com/rabbitmq/cluster-operator/releases/latest/download/cluster-operator.yml&amp;quot;
&lt;/code>&lt;/pre>
&lt;h3 id="创建-pv">创建 PV&lt;a class="td-heading-self-link" href="#%e5%88%9b%e5%bb%ba-pv" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;pre>&lt;code>cat &amp;gt; rabbitmq-pv.yaml &amp;lt;&amp;lt; EOF
apiVersion: v1
kind: PersistentVolume
metadata:
name: rabbitmq-node-1
spec:
accessModes:
- ReadWriteOnce
capacity:
storage: 10Gi
local:
path: /opt/rabbitmq
nodeAffinity:
required:
nodeSelectorTerms:
- matchExpressions:
- key: kubernetes.io/hostname
operator: In
values:
- node-1.tj-test
---
apiVersion: v1
kind: PersistentVolume
metadata:
name: rabbitmq-node-2
spec:
accessModes:
- ReadWriteOnce
capacity:
storage: 10Gi
local:
path: /opt/rabbitmq
nodeAffinity:
required:
nodeSelectorTerms:
- matchExpressions:
- key: kubernetes.io/hostname
operator: In
values:
- node-2.tj-test
---
apiVersion: v1
kind: PersistentVolume
metadata:
name: rabbitmq-node-3
spec:
accessModes:
- ReadWriteOnce
capacity:
storage: 10Gi
local:
path: /opt/rabbitmq
nodeAffinity:
required:
nodeSelectorTerms:
- matchExpressions:
- key: kubernetes.io/hostname
operator: In
values:
- node-3.tj-test
EOF
kubectl apply -f rabbitmq-pv.yaml
&lt;/code>&lt;/pre>
&lt;h3 id="部署-rabbitmq-集群">部署 RabbitMQ 集群&lt;a class="td-heading-self-link" href="#%e9%83%a8%e7%bd%b2-rabbitmq-%e9%9b%86%e7%be%a4" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>若使用默认 image ，则镜像中无 python 环境，也无 rabbitmqadmin 工具。&lt;/p>
&lt;pre>&lt;code>cat &amp;gt; rabbitmq.yaml &amp;lt;&amp;lt;EOF
apiVersion: rabbitmq.com/v1beta1
kind: RabbitmqCluster
metadata:
name: tj-test
namespace: rabbitmq
spec:
rabbitmq:
additionalPlugins:
- rabbitmq_delayed_message_exchange
image: registry.cn-zhangjiakou.aliyuncs.com/ehl_common/rabbitmq:3.8.3-xdelay
replicas: 3
service:
type: NodePort
override:
# clientService 再新版crd中变成了 service
clientService:
spec:
ports:
- name: http
protocol: TCP
nodePort: 45672
port: 15672
- name: amqp
protocol: TCP
nodePort: 35672
port: 5672
EOF
kubectl apply -f rabbitmq.yaml
&lt;/code>&lt;/pre>
&lt;h3 id="创建用户并配置权限">创建用户并配置权限&lt;a class="td-heading-self-link" href="#%e5%88%9b%e5%bb%ba%e7%94%a8%e6%88%b7%e5%b9%b6%e9%85%8d%e7%bd%ae%e6%9d%83%e9%99%90" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;pre>&lt;code>kubectl exec -it -n rabbitmq rabbitmq-tj-test-server-0 -- /bin/bash
rabbitmqctl add_user admin admin &amp;amp;&amp;amp; rabbitmqctl set_user_tags admin administrator &amp;amp;&amp;amp; rabbitmqctl add_vhost test &amp;amp;&amp;amp; rabbitmqctl set_permissions -p test admin '.*' '.*' '.*' &amp;amp;&amp;amp; rabbitmqctl set_permissions -p / admin '.*' '.*' '.*' &amp;amp;&amp;amp; exit
&lt;/code>&lt;/pre>
&lt;h3 id="测试是否可以创建队列">测试是否可以创建队列&lt;a class="td-heading-self-link" href="#%e6%b5%8b%e8%af%95%e6%98%af%e5%90%a6%e5%8f%af%e4%bb%a5%e5%88%9b%e5%bb%ba%e9%98%9f%e5%88%97" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;pre>&lt;code>rabbitmqadmin --vhost=test declare queue name=test-1 queue_type=quorum
&lt;/code>&lt;/pre></description></item><item><title>Docs: RabbitMQ 部署</title><link>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/Message-Queue%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RabbitMQ/RabbitMQ-%E9%83%A8%E7%BD%B2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/Message-Queue%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RabbitMQ/RabbitMQ-%E9%83%A8%E7%BD%B2/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.rabbitmq.com/download.html">官方文档，安装与配置&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="使用-docker-启动单节点-rabbitmq">使用 docker 启动单节点 RabbitMQ&lt;a class="td-heading-self-link" href="#%e4%bd%bf%e7%94%a8-docker-%e5%90%af%e5%8a%a8%e5%8d%95%e8%8a%82%e7%82%b9-rabbitmq" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker run -d --hostname my-rabbit --name rabbit &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>-p 15672:15672 -p 5672:5672 &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>rabbitmq:3-management
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="在-kubernetes-集群中使用-operator-部署-rabbitmq">在 kubernetes 集群中使用 Operator 部署 RabbitMQ&lt;a class="td-heading-self-link" href="#%e5%9c%a8-kubernetes-%e9%9b%86%e7%be%a4%e4%b8%ad%e4%bd%bf%e7%94%a8-operator-%e9%83%a8%e7%bd%b2-rabbitmq" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.rabbitmq.com/kubernetes/operator/operator-overview.html">官方文档，安装和配置-Kubernetes Operator&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://www.rabbitmq.com/kubernetes/operator/install-operator.html">安装&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.rabbitmq.com/kubernetes/operator/using-operator.html">通过 Operator 使用 RabbitMQ 集群&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>注意：RabbitMQ Operator 会为每一个被其创建的 &lt;code>rabbitmqclusters.rabbitmq.com&lt;/code> 资源的对象添加 &lt;code>finalizers&lt;/code> 字段，效果如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">rabbitmq.com/v1beta1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">RabbitmqCluster&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">finalizers&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">deletion.finalizers.rabbitmqclusters.rabbitmq.com&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>基于此，若删除 RabbitmqCluster 对象前删除了 RabbitMQ Operator，那么 RabbitmqCluster 将无法被删除，除非手动删除 &lt;code>finalizers&lt;/code> 字段。&lt;/p>
&lt;h3 id="部署-operator">部署 operator&lt;a class="td-heading-self-link" href="#%e9%83%a8%e7%bd%b2-operator" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>这里会自动创建 rabbitmq-system 名称空间&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl apply -f &lt;span style="color:#e6db74">&amp;#34;https://github.com/rabbitmq/cluster-operator/releases/latest/download/cluster-operator.yml&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="创建-pv">创建 pv&lt;a class="td-heading-self-link" href="#%e5%88%9b%e5%bb%ba-pv" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">cat &amp;gt; rabbitmq-pv.yaml &amp;lt;&amp;lt; EOF&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">PersistentVolume&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">rabbitmq-node-1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">accessModes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">ReadWriteOnce&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">capacity&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">storage&lt;/span>: &lt;span style="color:#ae81ff">10Gi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">local&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">path&lt;/span>: &lt;span style="color:#ae81ff">/opt/rabbitmq&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">nodeAffinity&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">required&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">nodeSelectorTerms&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">matchExpressions&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">key&lt;/span>: &lt;span style="color:#ae81ff">kubernetes.io/hostname&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">operator&lt;/span>: &lt;span style="color:#ae81ff">In&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">values&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">node-1.tj-test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">kubectl apply -f rabbitmq-pv.yaml&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="部署-rabbitmq">部署 rabbitmq&lt;a class="td-heading-self-link" href="#%e9%83%a8%e7%bd%b2-rabbitmq" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">cat &amp;gt; rabbitmq.yaml &amp;lt;&amp;lt; EOF&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">rabbitmq.com/v1beta1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">RabbitmqCluster&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">tj-test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">rabbitmq&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">kubectl apply -f rabbitmq.yaml&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="创建用户并配置权限">创建用户并配置权限&lt;a class="td-heading-self-link" href="#%e5%88%9b%e5%bb%ba%e7%94%a8%e6%88%b7%e5%b9%b6%e9%85%8d%e7%bd%ae%e6%9d%83%e9%99%90" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl exec -it -n rabbitmq rabbitmq-bj-cs-server-0 -- /bin/bash
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rabbitmqctl add_user admin admin &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> rabbitmqctl set_user_tags admin administrator &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> rabbitmqctl add_vhost test &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> rabbitmqctl set_permissions -p test admin &lt;span style="color:#e6db74">&amp;#39;.*&amp;#39;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;.*&amp;#39;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;.*&amp;#39;&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> exit
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="rabbitmq-部署后验证">RabbitMQ 部署后验证&lt;a class="td-heading-self-link" href="#rabbitmq-%e9%83%a8%e7%bd%b2%e5%90%8e%e9%aa%8c%e8%af%81" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>rabbitmqadmin declare vhost name&lt;span style="color:#f92672">=&lt;/span>test
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rabbitmqadmin declare queue name&lt;span style="color:#f92672">=&lt;/span>test queue_type&lt;span style="color:#f92672">=&lt;/span>quorum
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rabbitmqadmin publish routing_key&lt;span style="color:#f92672">=&lt;/span>test payload&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;hello world&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rabbitmqadmin get queue&lt;span style="color:#f92672">=&lt;/span>test
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rabbitmqadmin get queue&lt;span style="color:#f92672">=&lt;/span>test ackmode&lt;span style="color:#f92672">=&lt;/span>ack_requeue_false
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>rabbitmqadmin declare exchange name&lt;span style="color:#f92672">=&lt;/span>test.topic type&lt;span style="color:#f92672">=&lt;/span>topic
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rabbitmqadmin declare binding source&lt;span style="color:#f92672">=&lt;/span>test.topic destination&lt;span style="color:#f92672">=&lt;/span>test routing_key&lt;span style="color:#f92672">=&lt;/span>my.#
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rabbitmqadmin publish routing_key&lt;span style="color:#f92672">=&lt;/span>my.test exchange&lt;span style="color:#f92672">=&lt;/span>my.topic payload&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;hello world by my.test&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rabbitmqadmin publish routing_key&lt;span style="color:#f92672">=&lt;/span>my.test.test exchange&lt;span style="color:#f92672">=&lt;/span>my.topic payload&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;hello world by my.test.test&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rabbitmqadmin get queue&lt;span style="color:#f92672">=&lt;/span>test count&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="rabbitmq-监控部署">RabbitMQ 监控部署&lt;a class="td-heading-self-link" href="#rabbitmq-%e7%9b%91%e6%8e%a7%e9%83%a8%e7%bd%b2" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.rabbitmq.com/kubernetes/operator/operator-monitoring.html#prom-operator">官方文档，安装与配置-Kubernetes Operator-在 Kubernetes 上监控 RabbitMQ 集群-使用 Prometheus Operator 监控 RabbitMQ&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.rabbitmq.com/kubernetes/operator/operator-monitoring.html#grafana">官方文档，安装与配置-Kubernetes Operator-在 Kubernetes 上监控 RabbitMQ 集群-导入 Grafana 面板&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>为 prometheus-operator 赋予更多权限&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">export PrometheusOperatorSA=&amp;#34;bj-test-k8s-operator&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">cat &amp;gt; prometheus-cluster-role-and-binding.yaml &amp;lt;&amp;lt;EOF&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">rbac.authorization.k8s.io/v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">ClusterRole&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">prometheus&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">rules&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">apiGroups&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">resources&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">nodes&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">services&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">endpoints&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">pods&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">verbs&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;get&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;list&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;watch&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">apiGroups&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">resources&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">configmaps&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">verbs&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;get&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">nonResourceURLs&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;/metrics&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">verbs&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;get&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">rbac.authorization.k8s.io/v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">ClusterRoleBinding&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">prometheus&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">roleRef&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">apiGroup&lt;/span>: &lt;span style="color:#ae81ff">rbac.authorization.k8s.io&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">ClusterRole&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">prometheus&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">subjects&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">ServiceAccount&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">${PrometheusOperatorSA}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">monitoring&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>添加 rabbitmq 的监控配置&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">cat &amp;gt; rabbitmq-podmonitor.yaml &amp;lt;&amp;lt;EOF&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">monitoring.coreos.com/v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">PodMonitor&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">rabbitmq&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">monitoring&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">podMetricsEndpoints&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">interval&lt;/span>: &lt;span style="color:#ae81ff">15s&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">port&lt;/span>: &lt;span style="color:#ae81ff">prometheus&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">selector&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">matchLabels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app.kubernetes.io/component&lt;/span>: &lt;span style="color:#ae81ff">rabbitmq&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">namespaceSelector&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">any&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>导入 grafana 面板(面板 ID：10991)&lt;/p></description></item><item><title>Docs: RabbitMQ 集群</title><link>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/Message-Queue%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RabbitMQ/RabbitMQ-%E9%9B%86%E7%BE%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/Message-Queue%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RabbitMQ/RabbitMQ-%E9%9B%86%E7%BE%A4/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>官方文档：&lt;a href="https://www.rabbitmq.com/clustering.html">https://www.rabbitmq.com/clustering.html&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>RabbitMQ 这款消息队列中间件产品本身是基于 Erlang 语言编写，Erlang 语言天生具备分布式特性（通过同步 Erlang 集群各节点的 magic cookie 来实现）。&lt;/p>
&lt;p>因此，RabbitMQ 天然支持 Clustering。这使得 RabbitMQ 本身不需要像 ActiveMQ、Kafka 那样通过 ZooKeeper 分别来实现 HA 方案和保存集群的元数据。集群是保证可靠性的一种方式，同时可以通过水平扩展以达到增加消息吞吐量能力的目的。下面先来看下 RabbitMQ 集群的整体方案：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/iqase5/1616130673298-8615562e-d09c-44b6-be6d-1db0294d30e6.jpeg" alt="">&lt;/p>
&lt;p>上面图中采用三个节点组成了一个 RabbitMQ 的集群，Exchange A 的元数据信息在所有节点上是一致的，而 Queue 的完整数据则只会存在于它所创建的那个节点上。其他节点只知道这个 queue 的 metadata 信息和一个指向 queue 的 owner node 的指针。&lt;/p>
&lt;h2 id="rabbitmq-集群中各节点关系">RabbitMQ 集群中各节点关系&lt;a class="td-heading-self-link" href="#rabbitmq-%e9%9b%86%e7%be%a4%e4%b8%ad%e5%90%84%e8%8a%82%e7%82%b9%e5%85%b3%e7%b3%bb" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>RabbitMQ 集群各节点同步的数据&lt;/p>
&lt;p>RabbitMQ 集群的各节点会始终同步四种类型的内部元数据（类似索引）&lt;/p>
&lt;ol>
&lt;li>队列元数据：队列名称和它的属性&lt;/li>
&lt;li>交换器元数据：交换器名称、类型和属性&lt;/li>
&lt;li>绑定元数据：一张简单的表格展示了如何将消息路由到队列&lt;/li>
&lt;li>vhost 元数据：为 vhost 内的队列、交换器和绑定提供命名空间和安全属性&lt;/li>
&lt;/ol>
&lt;p>因此，当用户访问其中任何一个 RabbitMQ 节点时，通过 rabbitmqctl 查询到的 queue/user/exchange/vhost 等信息都是相同的。&lt;/p>
&lt;p>默认情况下，队列中的数据(消息) 是不在各节点互相同步的。如果想要各节点数据保持一致，查看 《RabbitMQ 基于集群的高可用性》章节&lt;/p>
&lt;p>Nodes Equal Peers(节点对等)&lt;/p>
&lt;p>在某些分布式系统中，节点是具有领导者和追随者概念的。对于 RabbitMQ，通常情况并不是这样的。RabbitMQ 集群中所有节点都是 equal peers(对等的)。&lt;/p>
&lt;p>RabbitMQ 集群发送/订阅消息的基本原理&lt;/p>
&lt;p>RabbitMQ 集群的工作原理图如下：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/iqase5/1616130673314-38d3cddf-87ca-4f97-88aa-523c76136332.jpeg" alt="">&lt;/p>
&lt;p>场景 1：客户端直接连接队列所在节点&lt;/p>
&lt;p>如果有一个生产者或者消费者通过 amqp-client 的客户端连接至节点 1 进行消息的发布或者订阅，那么此时的集群中的消息收发只与节点 1 相关，这个没有任何问题；如果客户端相连的是节点 2 或者节点 3（队列 1 数据不在该节点上），那么情况又会是怎么样呢？&lt;/p>
&lt;p>场景 2：客户端连接的是非队列数据所在节点&lt;/p>
&lt;p>如果消息生产者所连接的是节点 2 或者节点 3，此时队列 1 的完整数据不在该两个节点上，那么在发送消息过程中这两个节点主要起了一个路由转发作用，根据这两个节点上的元数据（也就是上文提到的：指向 queue 的 owner node 的指针）转发至节点 1 上，最终发送的消息还是会存储至节点 1 的队列 1 上。&lt;/p>
&lt;p>同样，如果消息消费者所连接的节点 2 或者节点 3，那这两个节点也会作为路由节点起到转发作用，将会从节点 1 的队列 1 中拉取消息进行消费。&lt;/p>
&lt;h1 id="rabbitmq-基于集群的高可用性">RabbitMQ 基于集群的高可用性&lt;a class="td-heading-self-link" href="#rabbitmq-%e5%9f%ba%e4%ba%8e%e9%9b%86%e7%be%a4%e7%9a%84%e9%ab%98%e5%8f%af%e7%94%a8%e6%80%a7" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>默认情况，RabbitMQ 集群模式下，队列的数据(也就是消息)只会留在该队列所在节点上，并不在所有节点互相同步数据。比如我在 node1 创建了 queue1，则 queue1 中的消息，则只存在于 node1 上，这是为了提高 RabbitMQ 的性能，可以将压力分担在集群中每个节点上。&lt;/p>
&lt;p>那么如果想要让集群中的节点复制队列中的数据，以实现高可用效果，RabbitMQ 提供了两种方式实现：&lt;/p>
&lt;ol>
&lt;li>Classic Mirrored Queues(传统镜像队列) # 不会随节点故障而转移&lt;/li>
&lt;li>Quorum Queues(仲裁队列) # 节点故障后，队列自动转移到其他节点&lt;/li>
&lt;/ol>
&lt;p>持久化：&lt;/p>
&lt;ol>
&lt;li>Durable # 节点故障后，队列处于 down 状态。即 开启持久化&lt;/li>
&lt;li>Transient # 节点故障后，队列自动消失。即 关闭持久化&lt;/li>
&lt;/ol>
&lt;p>Note：Quorum 类型队列的持久化必须开启。&lt;/p>
&lt;h2 id="classic-mirrored-queues--不会随节点故障而转移">Classic Mirrored Queues # 不会随节点故障而转移&lt;a class="td-heading-self-link" href="#classic-mirrored-queues--%e4%b8%8d%e4%bc%9a%e9%9a%8f%e8%8a%82%e7%82%b9%e6%95%85%e9%9a%9c%e8%80%8c%e8%bd%ac%e7%a7%bb" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>官方文档：&lt;a href="https://www.rabbitmq.com/ha.html">https://www.rabbitmq.com/ha.html&lt;/a>&lt;/p>
&lt;p>Quorum Queues(仲裁队列) 是另一种更现代的队列类型，通过复制提供高可用性，并关注数据安全。在很多情况下，仲裁队列是比传统镜像队列更好的选择&lt;/p>
&lt;h2 id="quorum-queues--节点故障后队列自动转移到其他节点该类型从-380-版本起可用">Quorum Queues # 节点故障后，队列自动转移到其他节点。(该类型从 3.8.0 版本起可用)&lt;a class="td-heading-self-link" href="#quorum-queues--%e8%8a%82%e7%82%b9%e6%95%85%e9%9a%9c%e5%90%8e%e9%98%9f%e5%88%97%e8%87%aa%e5%8a%a8%e8%bd%ac%e7%a7%bb%e5%88%b0%e5%85%b6%e4%bb%96%e8%8a%82%e7%82%b9%e8%af%a5%e7%b1%bb%e5%9e%8b%e4%bb%8e-380-%e7%89%88%e6%9c%ac%e8%b5%b7%e5%8f%af%e7%94%a8" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>官方文档：&lt;a href="https://www.rabbitmq.com/quorum-queues.html">https://www.rabbitmq.com/quorum-queues.html&lt;/a>&lt;/p>
&lt;p>仲裁队列是 RabbitMQ 实现高可用的队列类型，基于 RAFT 共识算法 ，从 RabbitMQ 3.8.0 版本开始作为默认推荐的高可用方法。&lt;/p>
&lt;p>Quorum 队列中的数据在个节点保持一致，当其中一个节点故障时，队列会自动转移到其他节点上。&lt;/p>
&lt;h2 id="classic-mirrored-与-quorum-的区别">Classic Mirrored 与 Quorum 的区别&lt;a class="td-heading-self-link" href="#classic-mirrored-%e4%b8%8e-quorum-%e7%9a%84%e5%8c%ba%e5%88%ab" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>永昌，在下列情况下，应使用仲裁队列&lt;/p>
&lt;ol>
&lt;li>数据可用性需求较高，比如销售系统中的新订单或选举系统中的投票，这些消息丢失会造成功能产生重大影响&lt;/li>
&lt;/ol>
&lt;p>通常，在下列情况下，不应使用仲裁队列&lt;/p>
&lt;ol>
&lt;li>数据可用性需求不高的场景。比如股票行情和即使通讯系统&lt;/li>
&lt;/ol></description></item><item><title>Docs: RabbitMQ 命令行工具</title><link>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/Message-Queue%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RabbitMQ/RabbitMQ-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/Message-Queue%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RabbitMQ/RabbitMQ-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>RabbitMQ 主要有四个命令行工具 Commend Line Tools，不同的命令行适用不用的场景&lt;/p>
&lt;ul>
&lt;li>rabbitmqctl：负责服务管理和进行操作&lt;/li>
&lt;li>rabbitmq-diagnostics：负责系统诊断和健康检查&lt;/li>
&lt;li>rabbitmq-plugins：负责插件管理&lt;/li>
&lt;li>rabbitmqadmin：用来操作 HTTP API&lt;/li>
&lt;/ul>
&lt;h1 id="rabbitmqctl-管理-rabbitmq-节点">rabbitmqctl 管理 RabbitMQ 节点&lt;a class="td-heading-self-link" href="#rabbitmqctl-%e7%ae%a1%e7%90%86-rabbitmq-%e8%8a%82%e7%82%b9" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>详见此处&lt;/p>
&lt;h1 id="rabbitmq-diagnostics-负责系统诊断和健康检查">rabbitmq-diagnostics 负责系统诊断和健康检查&lt;a class="td-heading-self-link" href="#rabbitmq-diagnostics-%e8%b4%9f%e8%b4%a3%e7%b3%bb%e7%bb%9f%e8%af%8a%e6%96%ad%e5%92%8c%e5%81%a5%e5%ba%b7%e6%a3%80%e6%9f%a5" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h1 id="rabbitmq-plugins-负责插件管理">rabbitmq-plugins 负责插件管理&lt;a class="td-heading-self-link" href="#rabbitmq-plugins-%e8%b4%9f%e8%b4%a3%e6%8f%92%e4%bb%b6%e7%ae%a1%e7%90%86" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>rabbitmq-plugins [&amp;ndash;node ] [&amp;ndash;timeout ] [&amp;ndash;longnames] [&amp;ndash;quiet] []&lt;/p>
&lt;p>Available commands:&lt;/p>
&lt;p>Help:&lt;/p>
&lt;p>autocomplete Provides command name autocomplete variants&lt;/p>
&lt;p>help Displays usage information for a command&lt;/p>
&lt;p>version Displays CLI tools version&lt;/p>
&lt;p>Monitoring, observability and health checks:&lt;/p>
&lt;p>directories Displays plugin directory and enabled plugin file paths&lt;/p>
&lt;p>is_enabled Health check that exits with a non-zero code if provided plugins are not enabled on target node&lt;/p>
&lt;p>Plugin Management:&lt;/p>
&lt;ol>
&lt;li>disable # 禁用一个或多个插件&lt;/li>
&lt;li>enable # 启用一个或多个插件&lt;/li>
&lt;li>list # 列出插件及其状态&lt;/li>
&lt;li>set # 启用一个或多个插件，并禁用其他的插件。&lt;/li>
&lt;/ol>
&lt;h1 id="rabbitmqadmin-用来操作-http-api">rabbitmqadmin 用来操作 HTTP API&lt;a class="td-heading-self-link" href="#rabbitmqadmin-%e7%94%a8%e6%9d%a5%e6%93%8d%e4%bd%9c-http-api" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>官方文档：&lt;a href="https://www.rabbitmq.com/management-cli.html">https://www.rabbitmq.com/management-cli.html&lt;/a>&lt;/p>
&lt;p>参考：&lt;a href="https://www.cnblogs.com/xishuai/p/rabbitmq-cli-rabbitmqadmin.html">https://www.cnblogs.com/xishuai/p/rabbitmq-cli-rabbitmqadmin.html&lt;/a>&lt;/p>
&lt;p>rabbitmqadmin 是一个 python 脚本。从 rabbitmq 的 http api 接口可以直接获取该脚本&lt;/p>
&lt;ol>
&lt;li>curl -L 172.38.40.212:45672/cli/rabbitmqadmin -o /usr/local/bin/rabbitmqadmin&lt;/li>
&lt;li>chmod 755 /usr/local/bin/rabbitmqadmin&lt;/li>
&lt;/ol>
&lt;p>生成命令行配置文件&lt;/p>
&lt;p>rabbitmqadmin 默认使用 ~/.rabbitmqadmin.conf 作为配置文件。配置文件用来指定 rabbitmqadmin 连接 rabbitmq http api 的信息，比如 ip、port、登录用户名和密码、所使用的 vhost 等等。注意：配置文件中的内容可以通过命令行参数代替。&lt;/p>
&lt;ol>
&lt;li>cat &amp;gt; /root/.rabbitmqadmin.conf &amp;laquo; EOF&lt;/li>
&lt;li>[default]&lt;/li>
&lt;li>hostname = 172.19.42.214&lt;/li>
&lt;li>port = 45672&lt;/li>
&lt;li>username = admin&lt;/li>
&lt;li>password = admin&lt;/li>
&lt;li>declare_vhost = /&lt;/li>
&lt;li>vhost = /&lt;/li>
&lt;li>EOF&lt;/li>
&lt;/ol>
&lt;p>生成命令补全&lt;/p>
&lt;ol>
&lt;li>echo &amp;ldquo;source &amp;lt;(rabbitmqadmin &amp;ndash;bash-completion)&amp;rdquo; &amp;raquo; /root/.bashrc&lt;/li>
&lt;/ol>
&lt;p>rabbitmqadmin [OPTIONS] COMMAND&lt;/p>
&lt;p>OPTIONS&lt;/p>
&lt;ol>
&lt;li>&amp;ndash;config=CONFIG, -c CONFIG # 指定 rabbitmqadmin 的配置文件，默认为: ~/.rabbitmqadmin.conf&lt;/li>
&lt;li>&amp;ndash;node=NODE, -N NODE # 指定配置文件中节点(即配置中间中 [] 内的值就是节点名) [default:&amp;lsquo;default&amp;rsquo; only if configuration file is specified]&lt;/li>
&lt;li>&amp;ndash;host=HOST, -H HOST # connect to host HOST [default: localhost]&lt;/li>
&lt;li>&amp;ndash;port=PORT, -P PORT # connect to port PORT [default: 15672]&lt;/li>
&lt;li>&amp;ndash;path-prefix=PATH_PREFIX # use specific URI path prefix for the RabbitMQ HTTP API. /api and operation path will be appended to it.(default: blank string) [default: ]&lt;/li>
&lt;li>&amp;ndash;vhost=VHOST, -V VHOST # 指定要连接的 VHost [default: all vhosts for list,&amp;rsquo;/&amp;rsquo; for declare]&lt;/li>
&lt;li>&amp;ndash;username=USERNAME, -u USERNAME # 指定连接时所使用的用户名，默认为 guest&lt;/li>
&lt;li>&amp;ndash;password=PASSWORD, -p PASSWORD # 指定连接时所使用的密码，默认为 guest&lt;/li>
&lt;li>&amp;ndash;base-uri=URI, -U URI # connect using a base HTTP API URI. /api and operation path will be appended to it. Path will be ignored.&amp;ndash;vhost has to be provided separately.&lt;/li>
&lt;li>&amp;ndash;quiet, -q # suppress status messages [default: True]&lt;/li>
&lt;li>&amp;ndash;ssl, -s # connect with ssl [default: False]&lt;/li>
&lt;li>&amp;ndash;ssl-key-file=SSL_KEY_FILE # PEM format key file for SSL&lt;/li>
&lt;li>&amp;ndash;ssl-cert-file=SSL_CERT_FILE # PEM format certificate file for SSL&lt;/li>
&lt;li>&amp;ndash;ssl-ca-cert-file=SSL_CA_CERT_FILE # PEM format CA certificate file for SSL&lt;/li>
&lt;li>&amp;ndash;ssl-disable-hostname-verification # Disables peer hostname verification&lt;/li>
&lt;li>&amp;ndash;ssl-insecure, -k # Disables all SSL validations like curl&amp;rsquo;s &amp;lsquo;-k&amp;rsquo; argument&lt;/li>
&lt;li>&amp;ndash;request-timeout=REQUEST_TIMEOUT, -t REQUEST_TIMEOUT # HTTP request timeout in seconds [default: 120]&lt;/li>
&lt;li>&amp;ndash;format=FORMAT, -f FORMAT # format for listing commands - one of [raw_json,pretty_json, tsv, long, table, kvp, bash] [default:table]&lt;/li>
&lt;li>&amp;ndash;sort=SORT, -S SORT # sort key for listing queries&lt;/li>
&lt;li>&amp;ndash;sort-reverse, -R # reverse the sort order&lt;/li>
&lt;li>&amp;ndash;depth=DEPTH, -d DEPTH # maximum depth to recurse for listing tables [default:1]&lt;/li>
&lt;li>&amp;ndash;bash-completion # Print bash completion script [default: False]&lt;/li>
&lt;li>&amp;ndash;version # Display version and exit&lt;/li>
&lt;/ol>
&lt;h2 id="显示信息-command">显示信息 COMMAND&lt;a class="td-heading-self-link" href="#%e6%98%be%e7%a4%ba%e4%bf%a1%e6%81%af-command" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>list connections [&amp;hellip;] # 显示连接信息&lt;/p>
&lt;p>list channels [&amp;hellip;]&lt;/p>
&lt;p>list consumers [&amp;hellip;]&lt;/p>
&lt;p>list exchanges [&amp;hellip;]&lt;/p>
&lt;p>list queues [&amp;hellip;]&lt;/p>
&lt;p>list bindings [&amp;hellip;]&lt;/p>
&lt;p>list users [&amp;hellip;] # 显示所有用户&lt;/p>
&lt;p>list vhosts [&amp;hellip;] # 显示所有 vhosts&lt;/p>
&lt;p>list permissions [&amp;hellip;]&lt;/p>
&lt;p>list nodes [&amp;hellip;] # 显示所有节点&lt;/p>
&lt;p>list parameters [&amp;hellip;]&lt;/p>
&lt;p>list policies [&amp;hellip;]&lt;/p>
&lt;p>list operator_policies [&amp;hellip;]&lt;/p>
&lt;p>list vhost_limits [&amp;hellip;]&lt;/p>
&lt;p>show overview [&amp;hellip;]&lt;/p>
&lt;h2 id="创建资源-command">创建资源 COMMAND&lt;a class="td-heading-self-link" href="#%e5%88%9b%e5%bb%ba%e8%b5%84%e6%ba%90-command" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="exchange-声明交换器">exchange 声明交换器&lt;a class="td-heading-self-link" href="#exchange-%e5%a3%b0%e6%98%8e%e4%ba%a4%e6%8d%a2%e5%99%a8" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>rabbitmqadmin declare exchange name=&amp;hellip; type=&amp;hellip; [auto_delete=&amp;hellip; durable=&amp;hellip; internal=&amp;hellip; arguments=&amp;hellip;]&lt;/p>
&lt;p>EXAMPLE&lt;/p>
&lt;ol>
&lt;li>rabbitmqadmin &amp;ndash;vhost=test declare exchange name=test.topic type=topic #&lt;/li>
&lt;/ol>
&lt;h3 id="queue-声明队列">queue 声明队列&lt;a class="td-heading-self-link" href="#queue-%e5%a3%b0%e6%98%8e%e9%98%9f%e5%88%97" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>rabbitmqadmin declare queue name=&amp;hellip; [auto_delete=&amp;hellip; durable=&amp;hellip; arguments=&amp;hellip; node=&amp;hellip; queue_type=&amp;hellip;]&lt;/p>
&lt;p>OPTIONS&lt;/p>
&lt;ol>
&lt;li>durable= # 该队列是否持久化。默认为 true&lt;/li>
&lt;li>queue_type= # 该队列类型。默认为 classic。TYPE 可用值为 classic、quorum&lt;/li>
&lt;li>Note：quorum 类型下，durable 只能为 true。&lt;/li>
&lt;/ol>
&lt;p>EXAMPLE&lt;/p>
&lt;ol>
&lt;li>rabbitmqadmin &amp;ndash;vhost=test declare queue name=test-1 queue_type=quorum #&lt;/li>
&lt;/ol>
&lt;h3 id="binding-绑定一个交换器和队列">binding 绑定一个交换器和队列&lt;a class="td-heading-self-link" href="#binding-%e7%bb%91%e5%ae%9a%e4%b8%80%e4%b8%aa%e4%ba%a4%e6%8d%a2%e5%99%a8%e5%92%8c%e9%98%9f%e5%88%97" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>rabbitmqadmin declare binding source=&amp;hellip; destination=&amp;hellip; [destination_type=&amp;hellip; routing_key=&amp;hellip; arguments=&amp;hellip;]&lt;/p>
&lt;p>OPTIONS&lt;/p>
&lt;p>EXAMPLE&lt;/p>
&lt;ol>
&lt;li>rabbitmqadmin &amp;ndash;vhost=test declare binding source=test.topic destination=test routing_key=my.# #&lt;/li>
&lt;/ol>
&lt;h3 id="vhost-声明虚拟主机">vhost 声明虚拟主机&lt;a class="td-heading-self-link" href="#vhost-%e5%a3%b0%e6%98%8e%e8%99%9a%e6%8b%9f%e4%b8%bb%e6%9c%ba" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>rabbitmqadmin declare vhost name=&amp;hellip; [tracing=&amp;hellip;]&lt;/p>
&lt;p>OPTIONS&lt;/p>
&lt;p>EXAMPLE&lt;/p>
&lt;ol>
&lt;li>rabbitmqadmin declare vhost name=test #&lt;/li>
&lt;/ol>
&lt;p>declare user name=&amp;hellip; password=&amp;hellip; OR password_hash=&amp;hellip; tags=&amp;hellip; [hashing_algorithm=&amp;hellip;]&lt;/p>
&lt;p>declare permission vhost=&amp;hellip; user=&amp;hellip; configure=&amp;hellip; write=&amp;hellip; read=&amp;hellip;&lt;/p>
&lt;p>declare parameter component=&amp;hellip; name=&amp;hellip; value=&amp;hellip;&lt;/p>
&lt;p>declare policy name=&amp;hellip; pattern=&amp;hellip; definition=&amp;hellip; [priority=&amp;hellip; apply-to=&amp;hellip;]&lt;/p>
&lt;p>declare operator_policy name=&amp;hellip; pattern=&amp;hellip; definition=&amp;hellip; [priority=&amp;hellip; apply-to=&amp;hellip;]&lt;/p>
&lt;p>declare vhost_limit vhost=&amp;hellip; name=&amp;hellip; value=&amp;hellip;&lt;/p>
&lt;h2 id="删除清理资源-command">删除、清理资源 COMMAND&lt;a class="td-heading-self-link" href="#%e5%88%a0%e9%99%a4%e6%b8%85%e7%90%86%e8%b5%84%e6%ba%90-command" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>delete exchange name=&amp;hellip;&lt;/p>
&lt;p>delete queue name=&amp;hellip;&lt;/p>
&lt;p>delete binding source=&amp;hellip; destination_type=&amp;hellip; destination=&amp;hellip; [properties_key=&amp;hellip;]&lt;/p>
&lt;p>delete vhost name=&amp;hellip;&lt;/p>
&lt;p>delete user name=&amp;hellip;&lt;/p>
&lt;p>delete permission vhost=&amp;hellip; user=&amp;hellip;&lt;/p>
&lt;p>delete parameter component=&amp;hellip; name=&amp;hellip;&lt;/p>
&lt;p>delete policy name=&amp;hellip;&lt;/p>
&lt;p>delete operator_policy name=&amp;hellip;&lt;/p>
&lt;p>delete vhost_limit vhost=&amp;hellip; name=&amp;hellip;&lt;/p>
&lt;p>close connection name=&amp;hellip;&lt;/p>
&lt;p>purge queue name=&amp;hellip;&lt;/p>
&lt;h2 id="broker-定义-command">Broker 定义 COMMAND&lt;a class="td-heading-self-link" href="#broker-%e5%ae%9a%e4%b9%89-command" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>export&lt;/p>
&lt;p>import&lt;/p>
&lt;h2 id="发布与消费消息-command">发布与消费消息 COMMAND&lt;a class="td-heading-self-link" href="#%e5%8f%91%e5%b8%83%e4%b8%8e%e6%b6%88%e8%b4%b9%e6%b6%88%e6%81%af-command" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="publish-发布消息">publish 发布消息&lt;a class="td-heading-self-link" href="#publish-%e5%8f%91%e5%b8%83%e6%b6%88%e6%81%af" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>rabbitmqadmin publish routing_key=&amp;hellip; [payload=&amp;hellip; properties=&amp;hellip; exchange=&amp;hellip; payload_encoding=&amp;hellip;]&lt;/p>
&lt;p>EXAMPLE&lt;/p>
&lt;ol>
&lt;li>rabbitmqadmin publish routing_key=test payload=&amp;ldquo;hello world&amp;rdquo; #&lt;/li>
&lt;li>rabbitmqadmin publish routing_key=my.test exchange=my.topic payload=&amp;ldquo;hello world by my.test&amp;rdquo; #&lt;/li>
&lt;li>rabbitmqadmin publish routing_key=my.test.test exchange=my.topic payload=&amp;ldquo;hello world by my.test.test&amp;rdquo; #&lt;/li>
&lt;/ol>
&lt;h3 id="get-消费消息">get 消费消息&lt;a class="td-heading-self-link" href="#get-%e6%b6%88%e8%b4%b9%e6%b6%88%e6%81%af" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>rabbitmqadmin get queue=&amp;hellip; [count=&amp;hellip; ackmode=&amp;hellip; payload_file=&amp;hellip; encoding=&amp;hellip;]&lt;/p>
&lt;p>OPTIONS&lt;/p>
&lt;ol>
&lt;li>count= # 指定要获取的最大消息数。默认为 1，即只获取队列中最先进入的消息。&lt;/li>
&lt;li>ackmode= # 指定是否从队列中删除消息。默认为 ack_requeue_true&lt;/li>
&lt;li>ack_requeue_true # 重新排队，不删除消息&lt;/li>
&lt;li>ack_requeue_fale # 删除消息&lt;/li>
&lt;/ol>
&lt;p>EXAMPLE&lt;/p>
&lt;ol>
&lt;li>rabbitmqadmin get queue=test # 获取 test 队列中的消息&lt;/li>
&lt;li>rabbitmqadmin get queue=test ackmode=ack_requeue_false # 获取 test 队列中的消息，并将获取到的消息删除&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>
&lt;p>If payload is not specified on publish, standard input is used&lt;/p>
&lt;/li>
&lt;li>
&lt;p>If payload_file is not specified on get, the payload will be shown on&lt;/p>
&lt;p>standard output along with the message metadata&lt;/p>
&lt;/li>
&lt;li>
&lt;p>If payload_file is specified on get, count must not be set&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: RabbitMQ 配置详解</title><link>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/Message-Queue%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RabbitMQ/RabbitMQ-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/Message-Queue%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RabbitMQ/RabbitMQ-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</guid><description/></item><item><title>Docs: RabbitMQ 性能与优化</title><link>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/Message-Queue%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RabbitMQ/RabbitMQ-%E6%80%A7%E8%83%BD%E4%B8%8E%E4%BC%98%E5%8C%96/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/Message-Queue%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RabbitMQ/RabbitMQ-%E6%80%A7%E8%83%BD%E4%B8%8E%E4%BC%98%E5%8C%96/</guid><description>
&lt;p>RabbitMQ性能评估，第2部分&lt;/p>
&lt;p>&lt;a href="https://www.rabbitmq.com/blog/2012/04/25/rabbitmq-performance-measurements-part-2/">https://www.rabbitmq.com/blog/2012/04/25/rabbitmq-performance-measurements-part-2/&lt;/a>&lt;/p></description></item><item><title>Docs: rabbitmqctl 命令行工具详解</title><link>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/Message-Queue%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RabbitMQ/rabbitmqctl-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/Message-Queue%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RabbitMQ/rabbitmqctl-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7%E8%AF%A6%E8%A7%A3/</guid><description>
&lt;h1 id="rabbitmqctl-管理-rabbitmq-节点的工具">rabbitmqctl 管理 RabbitMQ 节点的工具&lt;a class="td-heading-self-link" href="#rabbitmqctl-%e7%ae%a1%e7%90%86-rabbitmq-%e8%8a%82%e7%82%b9%e7%9a%84%e5%b7%a5%e5%85%b7" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>官方文档：&lt;a href="https://www.rabbitmq.com/rabbitmqctl.8.html">https://www.rabbitmq.com/rabbitmqctl.8.html&lt;/a>&lt;/p>
&lt;p>rabbitmqctl 是用于管理 RabbitMQ 服务器节点的命令行工具。它通过连接到专用 CLI 工具通信端口上的目标 RabbitMQ 节点并使用共享密钥（称为 cookie 文件）进行身份验证来执行所有操作。该命令主要的功能包括以下几点：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>停止节点运行&lt;/p>
&lt;/li>
&lt;li>
&lt;p>获取节点状态、有效配置、健康检查&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Virtual Hosts 管理&lt;/p>
&lt;/li>
&lt;li>
&lt;p>用户和权限管理&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Policy 管理&lt;/p>
&lt;/li>
&lt;li>
&lt;p>查看 queues、connections、channels、exchanges 和 consumers 列表信息&lt;/p>
&lt;/li>
&lt;li>
&lt;p>集群会员身份管理&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>rabbitmqctl [OPTIONS] COMMAND [COMMAND_OPTIONS]&lt;/strong>&lt;/p>
&lt;p>OPTIONS&lt;/p>
&lt;ol>
&lt;li>-q.&amp;ndash;quiet # 安静模式输出，输出的信息减少&lt;/li>
&lt;/ol>
&lt;p>COMMAND 包括如下几大类：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Nodes # 节点管理&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Cluster Managerment # 集群管理&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Replication&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Users Management # 用户管理&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Access Control # 访问控制&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Monitoring, observability and health checks&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Parameters&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Policies&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Virtual hosts&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Configuration and Environment&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Definitions&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Feature flags&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Operations&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Queues&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Deprecated&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>COMMAND_OPTIONS 中有几个通用的&lt;/p>
&lt;ol>
&lt;li>-p &lt;!-- raw HTML omitted --> # 用于当前适用的 COMMAND 所作用的 Virtual Host(虚拟主机)，VHost 为虚拟主机名称。默认为 / 这个 Virtual Host&lt;/li>
&lt;/ol>
&lt;h1 id="nodes-类子命令">Nodes 类子命令&lt;a class="td-heading-self-link" href="#nodes-%e7%b1%bb%e5%ad%90%e5%91%bd%e4%bb%a4" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>await_startup # Waits for the RabbitMQ application to start on the target node&lt;/p>
&lt;p>reset # Instructs a RabbitMQ node to leave the cluster and return to its virgin state&lt;/p>
&lt;p>rotate_logs # Instructs the RabbitMQ node to perform internal log rotation&lt;/p>
&lt;p>shutdown # Stops RabbitMQ and its runtime (Erlang VM). Monitors progress for local nodes. Does not require a PID file path.&lt;/p>
&lt;p>start_app # Starts the RabbitMQ application but leaves the runtime (Erlang VM) running&lt;/p>
&lt;p>stop # Stops RabbitMQ and its runtime (Erlang VM). Requires a local node pid file path to monitor progress.&lt;/p>
&lt;p>stop_app # Stops the RabbitMQ application, leaving the runtime (Erlang VM) running&lt;/p>
&lt;p>wait # Waits for RabbitMQ node startup by monitoring a local PID file. See also &amp;lsquo;rabbitmqctl await_online_nodes&amp;rsquo;&lt;/p>
&lt;h1 id="cluster-management-集群管理类子命令">Cluster Management 集群管理类子命令&lt;a class="td-heading-self-link" href="#cluster-management-%e9%9b%86%e7%be%a4%e7%ae%a1%e7%90%86%e7%b1%bb%e5%ad%90%e5%91%bd%e4%bb%a4" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>await_online_nodes Waits for nodes to join the cluster&lt;/p>
&lt;p>change_cluster_node_typeChanges the type of the cluster node&lt;/p>
&lt;h2 id="cluster_status--显示按节点类型分组的集群中的所有节点信息以及当前正在运行的节点">cluster_status # 显示按节点类型分组的集群中的所有节点信息，以及当前正在运行的节点&lt;a class="td-heading-self-link" href="#cluster_status--%e6%98%be%e7%a4%ba%e6%8c%89%e8%8a%82%e7%82%b9%e7%b1%bb%e5%9e%8b%e5%88%86%e7%bb%84%e7%9a%84%e9%9b%86%e7%be%a4%e4%b8%ad%e7%9a%84%e6%89%80%e6%9c%89%e8%8a%82%e7%82%b9%e4%bf%a1%e6%81%af%e4%bb%a5%e5%8f%8a%e5%bd%93%e5%89%8d%e6%ad%a3%e5%9c%a8%e8%bf%90%e8%a1%8c%e7%9a%84%e8%8a%82%e7%82%b9" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>force_boot Forces node to start even if it cannot contact or rejoin any of its previously known peers&lt;/p>
&lt;p>force_reset Forcefully returns a RabbitMQ node to its virgin state&lt;/p>
&lt;p>forget_cluster_node Removes a node from the cluster&lt;/p>
&lt;p>join_cluster Instructs the node to become a member of the cluster that the specified node is in&lt;/p>
&lt;p>rename_cluster_node Renames cluster nodes in the local database&lt;/p>
&lt;p>update_cluster_nodes Instructs a cluster member node to sync the list of known cluster members from&lt;/p>
&lt;h1 id="replication">Replication&lt;a class="td-heading-self-link" href="#replication" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h1 id="users-management-用户管理类子命令">Users Management 用户管理类子命令&lt;a class="td-heading-self-link" href="#users-management-%e7%94%a8%e6%88%b7%e7%ae%a1%e7%90%86%e7%b1%bb%e5%ad%90%e5%91%bd%e4%bb%a4" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="add_user--在内部数据库中创建一个新用户">add_user # 在内部数据库中创建一个新用户&lt;a class="td-heading-self-link" href="#add_user--%e5%9c%a8%e5%86%85%e9%83%a8%e6%95%b0%e6%8d%ae%e5%ba%93%e4%b8%ad%e5%88%9b%e5%bb%ba%e4%b8%80%e4%b8%aa%e6%96%b0%e7%94%a8%e6%88%b7" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>rabbitmqctl add_user &lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->&lt;/strong>&lt;/p>
&lt;p>EXAMPLE&lt;/p>
&lt;ol>
&lt;li>rabbitmqctl add_user admin admin # 添加一个名为 admin 的用户，并设置其密码为 admin&lt;/li>
&lt;/ol>
&lt;p>authenticate_user # Attempts to authenticate a user. Exits with a non-zero code if authentication fails.&lt;/p>
&lt;p>change_password # Changes the user password&lt;/p>
&lt;p>clear_password # Clears (resets) password and disables password login for a user&lt;/p>
&lt;p>delete_user # Removes a user from the internal database. Has no effect on users provided by external backends such as LDAP&lt;/p>
&lt;h2 id="list_users--列出所有用户和其标签">list_users # 列出所有用户和其标签&lt;a class="td-heading-self-link" href="#list_users--%e5%88%97%e5%87%ba%e6%89%80%e6%9c%89%e7%94%a8%e6%88%b7%e5%92%8c%e5%85%b6%e6%a0%87%e7%ad%be" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>该命令效果如下：共两列，第一列为用户名，第二列为标签&lt;/p>
&lt;pre>&lt;code>rabbitmq@hello-world-rabbitmq-server-0:/$ rabbitmqctl list_users
Listing users ...
user tags
8E3s22eVBbIy3EINPFo0f8hBQ0FClORp [administrator]
admin [administrator]
test [monitoring]
&lt;/code>&lt;/pre>
&lt;p>set_user_tags # 设置指定用户的标签&lt;/p>
&lt;p>&lt;strong>rabbitmqctl set_user_tags &lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->&lt;/strong>&lt;/p>
&lt;p>TAG 可以是任意值，但是有几个值在 rabbitmq 中具有特殊含义&lt;/p>
&lt;ol>
&lt;li>
&lt;p>administrator # 可登录管理控制台（启用 management plugin 的情况下），查看所有的信息，并且可以对用户、策略（policy）进行操作；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>monitoring # 可登录管理控制台（启用 management plugin 的情况下），同时可以查看 rabbitmq 节点的相关信息（进程数、内存使用情况，磁盘使用情况等）；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>policymaker # 可以登录管理控制台（启用 management plugin 的情况下），同时可以对策略（policy）进行操作；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>management # 仅可登录管理控制台（启用 management plugin 的情况下），无法看到节点信息，也无法对策略进行管理；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>其他任意值 # 无法登录管理控制台，通常就是普通的生产者和消费者，这种 TAG 仅仅作为标识符。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>EXAMPLE&lt;/p>
&lt;ol>
&lt;li>
&lt;p>rabbitmqctl set_user_tags admin administrator # 设置 admin 这个用户的标签为 administrator，让 admin 用户具有管理员权限。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>rabbitmqctl set_user_tags admin # 移除 admin 这个用户的所有标签&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h1 id="access-control-访问控制子命令">Access Control 访问控制子命令&lt;a class="td-heading-self-link" href="#access-control-%e8%ae%bf%e9%97%ae%e6%8e%a7%e5%88%b6%e5%ad%90%e5%91%bd%e4%bb%a4" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="clear_permissions--撤销指定用户关于-vhost-的权限">clear_permissions # 撤销指定用户关于 vhost 的权限&lt;a class="td-heading-self-link" href="#clear_permissions--%e6%92%a4%e9%94%80%e6%8c%87%e5%ae%9a%e7%94%a8%e6%88%b7%e5%85%b3%e4%ba%8e-vhost-%e7%9a%84%e6%9d%83%e9%99%90" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>rabbitmqctl clear_permissions [-p VHOST] UserNAME&lt;/strong>&lt;/p>
&lt;p>EXAMPLE&lt;/p>
&lt;ol>
&lt;li>rabbitmqctl clear_permissions -p test admin # 撤销 admin 用户关于 / 这个 vhost 的所有全新&lt;/li>
&lt;/ol>
&lt;p>clear_topic_permissions # Clears user topic permissions for a vhost or exchange&lt;/p>
&lt;p>list_permissions # Lists user permissions in a virtual host&lt;/p>
&lt;p>list_topic_permissions # Lists topic permissions in a virtual host&lt;/p>
&lt;p>list_user_permissions # Lists permissions of a user across all virtual hosts&lt;/p>
&lt;p>list_user_topic_permissions # Lists user topic permissions&lt;/p>
&lt;h2 id="list_vhosts--列出所有-virtual-hosts">list_vhosts # 列出所有 virtual hosts&lt;a class="td-heading-self-link" href="#list_vhosts--%e5%88%97%e5%87%ba%e6%89%80%e6%9c%89-virtual-hosts" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="set_permissions--设置指定用户关于-vhost-的权限">set_permissions # 设置指定用户关于 vhost 的权限&lt;a class="td-heading-self-link" href="#set_permissions--%e8%ae%be%e7%bd%ae%e6%8c%87%e5%ae%9a%e7%94%a8%e6%88%b7%e5%85%b3%e4%ba%8e-vhost-%e7%9a%84%e6%9d%83%e9%99%90" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>rabbitmqctl set_permissions [-p VHost] UserName CONF WRITE READ&lt;/strong>&lt;/p>
&lt;p>一个用户对于 vhost 来说，有 CONF(配置)、WRITE(写)、READ(读) 这三个权限。可以使用正则表达式。&lt;/p>
&lt;p>EXAMPLE&lt;/p>
&lt;ol>
&lt;li>rabbitmqctl set_permissions -p / admin &amp;lsquo;.&lt;em>&amp;rsquo; &amp;lsquo;.&lt;/em>&amp;rsquo; &amp;lsquo;.*&amp;rsquo; # 为 admin 用户授予关于 / 这个 vhost 下所有资源的所有权限。&lt;/li>
&lt;/ol>
&lt;p>set_topic_permissions # Sets user topic permissions for an exchange&lt;/p>
&lt;h1 id="monitoring-observability-and-health-checks-监控可观察性以及健康检查子命令">Monitoring, observability and health checks 监控，可观察性以及健康检查子命令&lt;a class="td-heading-self-link" href="#monitoring-observability-and-health-checks-%e7%9b%91%e6%8e%a7%e5%8f%af%e8%a7%82%e5%af%9f%e6%80%a7%e4%bb%a5%e5%8f%8a%e5%81%a5%e5%ba%b7%e6%a3%80%e6%9f%a5%e5%ad%90%e5%91%bd%e4%bb%a4" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>list_bindings # Lists all bindings on a vhost&lt;/p>
&lt;p>list_channels # Lists all channels in the node&lt;/p>
&lt;p>list_ciphers # Lists cipher suites supported by encoding commands&lt;/p>
&lt;p>list_connections # Lists AMQP 0.9.1 connections for the node&lt;/p>
&lt;p>list_consumers # Lists all consumers for a vhost&lt;/p>
&lt;h2 id="list_exchanges--列出交换器的详细信息">list_exchanges # 列出交换器的详细信息&lt;a class="td-heading-self-link" href="#list_exchanges--%e5%88%97%e5%87%ba%e4%ba%a4%e6%8d%a2%e5%99%a8%e7%9a%84%e8%af%a6%e7%bb%86%e4%bf%a1%e6%81%af" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>rabbitmqctl list_exchanges [-p VHost] [ExchangeInfoItem]&lt;/strong>&lt;/p>
&lt;p>ExchangeInfoItem # 该参数用于指示要在结果中包括交换器的哪些信息。多个信息使用逗号或空格分隔。默认显示 exchanges 的 name 与 type 信息。&lt;/p>
&lt;p>可用的信息有如下几个：&lt;/p>
&lt;ol>
&lt;li>name、type、durable、auto_delete、internal、arguments、policy&lt;/li>
&lt;/ol>
&lt;p>EXAMPLE&lt;/p>
&lt;p>list_hashes # Lists hash functions supported by encoding commands&lt;/p>
&lt;h2 id="list_queues--列出队列及其属性">list_queues # 列出队列及其属性&lt;a class="td-heading-self-link" href="#list_queues--%e5%88%97%e5%87%ba%e9%98%9f%e5%88%97%e5%8f%8a%e5%85%b6%e5%b1%9e%e6%80%a7" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>rabbitmqctl list_queues [-p VHost] [QueueInfoItem]&lt;/strong>&lt;/p>
&lt;p>QueueInfoItem 用于指示要在结果中包括哪些队列信息项。结果中的列顺序将与参数的顺序匹配。不使用该参数时，默认显示 name 与 message 信息。&lt;/p>
&lt;p>QueueInfoItem&lt;/p>
&lt;ol>
&lt;li>
&lt;p>name # 队列的名称&lt;/p>
&lt;/li>
&lt;li>
&lt;p>pid # 队列的 Erlang 进程标识符(其中包含队列在哪个节点)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>messages # 队列深度，即 ready 和 unacknowledged 两种状态的消息总和。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>EXAMPLE&lt;/p>
&lt;ol>
&lt;li>
&lt;p>rabbitmqctl list_queues # 列出 / vhost 下的队列名及其消息数量，效果如下&lt;/p>
&lt;p>rabbitmq@hello-world-rabbitmq-server-0:/$ rabbitmqctl list_queues
Timeout: 60.0 seconds &amp;hellip;
Listing queues for vhost / &amp;hellip;
name messages
test 2&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>list_unresponsive_queues # Tests queues to respond within timeout. Lists those which did not respond&lt;/p>
&lt;p>ping # Checks that the node OS process is up, registered with EPMD and CLI tools can authenticate with it&lt;/p>
&lt;p>report # Generate a server status report containing a concatenation of all server status information for support purposes&lt;/p>
&lt;p>schema_info # Lists schema database tables and their properties&lt;/p>
&lt;h2 id="status--显示节点的状态">status # 显示节点的状态&lt;a class="td-heading-self-link" href="#status--%e6%98%be%e7%a4%ba%e8%8a%82%e7%82%b9%e7%9a%84%e7%8a%b6%e6%80%81" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h1 id="runtime-parameters-and-policies-运行时参数和策略相关子命令">Runtime Parameters and Policies 运行时参数和策略相关子命令&lt;a class="td-heading-self-link" href="#runtime-parameters-and-policies-%e8%bf%90%e8%a1%8c%e6%97%b6%e5%8f%82%e6%95%b0%e5%92%8c%e7%ad%96%e7%95%a5%e7%9b%b8%e5%85%b3%e5%ad%90%e5%91%bd%e4%bb%a4" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>clear_global_parameter Clears a global runtime parameter&lt;/p>
&lt;p>clear_parameter Clears a runtime parameter.&lt;/p>
&lt;p>list_global_parameters Lists global runtime parameters&lt;/p>
&lt;p>list_parameters Lists runtime parameters for a virtual host&lt;/p>
&lt;p>set_global_parameter Sets a runtime parameter.&lt;/p>
&lt;p>set_parameter Sets a runtime parameter.&lt;/p>
&lt;p>clear_operator_policy Clears an operator policy&lt;/p>
&lt;p>clear_policy Clears (removes) a policy&lt;/p>
&lt;p>list_operator_policies Lists operator policy overrides for a virtual host&lt;/p>
&lt;p>list_policies Lists all policies in a virtual host&lt;/p>
&lt;p>set_operator_policy Sets an operator policy that overrides a subset of arguments in user policies&lt;/p>
&lt;p>set_policy Sets or updates a policy&lt;/p>
&lt;h1 id="virtual-hosts-虚拟主机相关子命令">Virtual hosts 虚拟主机相关子命令&lt;a class="td-heading-self-link" href="#virtual-hosts-%e8%99%9a%e6%8b%9f%e4%b8%bb%e6%9c%ba%e7%9b%b8%e5%85%b3%e5%ad%90%e5%91%bd%e4%bb%a4" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="add_vhost--创建一个-vhost">add_vhost # 创建一个 vhost&lt;a class="td-heading-self-link" href="#add_vhost--%e5%88%9b%e5%bb%ba%e4%b8%80%e4%b8%aa-vhost" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>rabbitmqctl add_vhost VHOST&lt;/strong>&lt;/p>
&lt;p>EXAMPLE&lt;/p>
&lt;ol>
&lt;li>rabbitmqctl add_vhost test # 创建一个名为 test 的 vhost&lt;/li>
&lt;/ol>
&lt;p>clear_vhost_limits # Clears virtual host limits&lt;/p>
&lt;h2 id="delete_vhost--删除一个-vhost">delete_vhost # 删除一个 vhost&lt;a class="td-heading-self-link" href="#delete_vhost--%e5%88%a0%e9%99%a4%e4%b8%80%e4%b8%aa-vhost" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;blockquote>
&lt;p>注意：删除 vhost 将删除其所有交换，队列，绑定，用户权限，参数和策略。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>rabbitmqctl delete_vhost VHOST&lt;/strong>&lt;/p>
&lt;p>EXAMPLE&lt;/p>
&lt;ol>
&lt;li>rabbitmqctl delete_vhost test # 删除一个名为 test 的 vhost&lt;/li>
&lt;/ol>
&lt;p>list_vhost_limits # Displays configured virtual host limits&lt;/p>
&lt;p>restart_vhost # Restarts a failed vhost data stores and queues&lt;/p>
&lt;p>set_vhost_limits # Sets virtual host limits&lt;/p>
&lt;p>trace_off #&lt;/p>
&lt;p>trace_on #&lt;/p>
&lt;p>Configuration and Environment&lt;/p>
&lt;p>Definitions&lt;/p>
&lt;p>Feature flags&lt;/p>
&lt;p>Operations&lt;/p>
&lt;h1 id="queues-operations-队列的相关操作子命令">Queues Operations 队列的相关操作子命令&lt;a class="td-heading-self-link" href="#queues-operations-%e9%98%9f%e5%88%97%e7%9a%84%e7%9b%b8%e5%85%b3%e6%93%8d%e4%bd%9c%e5%ad%90%e5%91%bd%e4%bb%a4" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="delete_queue--删除一个队列">delete_queue # 删除一个队列&lt;a class="td-heading-self-link" href="#delete_queue--%e5%88%a0%e9%99%a4%e4%b8%80%e4%b8%aa%e9%98%9f%e5%88%97" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>rabbitmqctl delete_queue QueueName [-p VHost] [OPTIONS]&lt;/strong>&lt;/p>
&lt;p>OPTIONS&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&amp;ndash;if-empty,-e # 如果队列为空，则删除。(没有准备好传递的消息)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&amp;ndash;if-unused,-u # 仅当队列没有消费者时才删除。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="purge_queue--清洗一个队列删除队列中所有的消息">purge_queue # 清洗一个队列(删除队列中所有的消息)&lt;a class="td-heading-self-link" href="#purge_queue--%e6%b8%85%e6%b4%97%e4%b8%80%e4%b8%aa%e9%98%9f%e5%88%97%e5%88%a0%e9%99%a4%e9%98%9f%e5%88%97%e4%b8%ad%e6%89%80%e6%9c%89%e7%9a%84%e6%b6%88%e6%81%af" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h1 id="deprecated">Deprecated&lt;a class="td-heading-self-link" href="#deprecated" aria-label="Heading self-link">&lt;/a>&lt;/h1></description></item><item><title>Docs: 问题实例</title><link>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/Message-Queue%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RabbitMQ/%E9%97%AE%E9%A2%98%E5%AE%9E%E4%BE%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/Message-Queue%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RabbitMQ/%E9%97%AE%E9%A2%98%E5%AE%9E%E4%BE%8B/</guid><description>
&lt;h1 id="heading">&lt;a class="td-heading-self-link" href="#heading" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="waiting-for-mnesia-tableshttpsgithubcomrabbitmqcluster-operatorissues480-报错">&lt;a href="https://github.com/rabbitmq/cluster-operator/issues/480">Waiting for Mnesia tables&lt;/a> 报错&lt;a class="td-heading-self-link" href="#waiting-for-mnesia-tableshttpsgithubcomrabbitmqcluster-operatorissues480-%e6%8a%a5%e9%94%99" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>另一个 issue：&lt;a href="https://github.com/bitnami/charts/issues/3783#">https://github.com/bitnami/charts/issues/3783#&lt;/a>，这是 bitnami 上的 rabbitmq helm 的报错 issue&lt;/p>
&lt;p>多个节点同时重启，出现该问题，该问题主要是因为各个节点之间无法有效得正常通信导致的&lt;/p></description></item></channel></rss>