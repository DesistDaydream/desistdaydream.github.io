<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>📐8.通用技术 on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/</link><description>Recent content in 📐8.通用技术 on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/index.xml" rel="self" type="application/rss+xml"/><item><title>Cache</title><link>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/Cache/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/Cache/</guid><description>概述 参考：
Wiki, Cache(computing) Cache(缓存) 在 Computer(计算机) 中，是指一种用于存储数据的软件或硬件，以便可以更快的满足未来对该数据的请求；存储在缓存中的数据可能是早期计算的结果或存储在其他地方的数据的副本。作为缓存的组件的最低要求就是速度够快，避免对存储原始数据的组件产生过大压力。
缓存是计算机系统中最基本的性能改进技术之一，一次又一次地用于让“常见的情况更快”1。硬件缓存背后的思想是利用指令和数据引用的 Locality(局部性原理)。通常有两种局部性: temporal locality(时间局部性) 和 spatial locality(空间局部性)。时间局部性是指，最近访问过的指令或数据项可能很快会再次访问。想想循环中的循环变量或指令，它们被多次反复访问。空间局部性是指，当程序访问内存地址 x 时，可能很快会访问邻近 x 的内存。想想遍历某种数组，访问一个接一个的元素。当然，这些性质取决于程序的特点，并不是绝对的定律，而更像是一种经验法则。2
硬件缓存，无论是指令、数据还是地址转换（如 TLB），都利用了局部性，在小而快的芯片内存储器中保存一份内存副本。处理器可以先检查缓存中是否存在就近的副本，而不是必须访问（缓慢的）内存来满足请求。如果存在，处理器就可以很快地访问它（例如在几个 CPU 时钟内），避免花很多时间来访问内存（好多纳秒）。2
你可能会疑惑：既然像 TLB 这样的缓存这么好，为什么不做更大的缓存，装下所有的数据？可惜的是，这里我们遇到了更基本的定律，就像物理定律那样。如果想要快速地缓存，它就必须小，因为光速和其他物理限制会起作用。大的缓存注定慢，因此无法实现目的。所以，我们只能用小而快的缓存。剩下的问题就是如何利用好缓存来提升性能。2
写入策略 https://en.wikipedia.org/wiki/Cache_(computing)#Writing_policies
由于缓存中的数据不能长久保持，所以要根据一定的策略将数据写入到后端存储，具体的写入行为，由 Writing policies(写入策略) 决定
Write-throught(直写) # 向缓存和后端存储同步写入 Write-back(回写) # 先写入缓存，直到某一条件触发后，再写入到后端存储。 问 Bing 回写是什么的回答：
感谢您提供更多的信息。我找到了一些关于计算机领域的回写（write back）的资料，希望对您有用。😊
回写（write back）是一种缓存（cache）的写入策略，它指的是在数据更新时只写入缓存，而不写入后端存储（如内存或硬盘）。只有当缓存中的数据被替换出去时，才会把修改过的数据写回后端存储。这样可以提高数据写入的速度，但也有可能造成数据不一致的问题。1 2
回写（write back）通常与写分配（write allocate）一起使用，这意味着当缓存未命中时，会先把数据从后端存储加载到缓存中，然后再更新缓存。这样可以减少对后端存储的访问次数，同时也为后续对同一位置的写入或读取提供便利。3
回写（write back）与另一种缓存写入策略透写（write through）相对，透写指的是在数据更新时同时写入缓存和后端存储，这样可以保持数据的一致性，但也会降低数据写入的速度。透写通常与无写分配（no write allocate）一起使用，这意味着当缓存未命中时，只更新后端存储，而不加载数据到缓存中。3 4
如果您想了解更多关于回写（write back）和透写（write through）的区别和优缺点，请参考以下链接：
1: 计算机的Cache和Memory访问时Write-back，Write-through及write allocate的区别 - 国静德远 - 博客园 2: cache 写回策略_写回cache_xingzhe22222的博客-CSDN博客 3: 透写和回写缓存（Write Through and Write Back in Cache） 4: Cache写机制：Write-through与Write-back - CSDN博客</description></item><item><title>Regular Expression(正则表达式)</title><link>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/Regular-Expression%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/Regular-Expression%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid><description>概述 参考：
Wiki, Regular Expression 正则表达式在线测试 https://r2coding.com/#/README?id=%e6%ad%a3%e5%88%99%e8%a1%a8%e8%be%be%e5%bc%8f GitHub 项目，PCRE2Project/pcre2 PCRE 官网 PCRE Man page GitHub 项目，google/re2 RE2 是一种快速、安全、线程友好的替代方案，可替代 PCRE、Perl 和 Python 中使用的回溯正则表达式引擎。它是一个 C++ 库 记于 2023 年 2 月10 日：有了 ChatGPT，这正则表达式。。。我想。。。应该再也不用背了。。。。
Regular Expression(正则表达式，简称 RegEX 或 RegEXP) 是用于定义 Search Pattern(搜索模式) 的一系列字符串。这种 Pattern(模式) 通常被字符串搜索算法用于 find(查找) 字符串、或 find and replace(查找并替换) 字符串、或者验证输入内容。RegEX 是一种在 Theoretical Computer Science(理论计算机科学) 和 Formal Language(形式语言) 理论中发展起来的技术。
还有一个学名 Perl Compatible Regular Expressions(Perl 兼容的正则表达式，简称 PCRE)，这用来表示 Perl 语言兼容的正则表达式。
用白话说，所谓的 正则表达式，就是用来通过一种称为 Pattern(模式) 的方式，筛选出长篇内容里的部分内容。其实就是一堆字符组合在一起形成一种行为，这个行为就是匹配字符行为。也可以勉强算编程语言的一种吧~
所以，这个世界在很多时候，把正则表达式这个概念，用 RegEX、RegEXP、Pattern 这几种单词表示。</description></item><item><title>Scheduling</title><link>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/Scheduling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/Scheduling/</guid><description>概述 参考：
Wiki, Scheduling(computing) 自己在科学笔记中对”生产与分配“的记录 在计算机中，Scheduling(调度) 是分配资源来执行任务的行为。资源可以是 CPU、网络、etc. ，任务可以是 线程、进程、数据流、etc. 。
[!Note] 调度是生产与分配中，分配的实践，是对控制理论的实践（一个完善的调度系统可以间接理解为一种要无限趋近于最优控制的系统）
但是由于现实的复杂性，通过纯粹的数学计算往往不能离最优控制还相去甚远。此时可以向系统中添加额外的组件（e.g. Cache、负载均衡、虚拟化、etc.）来改善资源的分配。
调度活动由一种称为 scheduler(调度器) 的机制执行。调度器通常被设计为使所有计算机资源保持忙碌状态（如在负载均衡中），允许多个用户有效共享系统资源。
调度是计算本身的基础，也是计算机系统执行模型的内在部分；调度的概念使得在单个 CPU 上实现计算机多任务称为可能。
[!Tip] 在英语体系里，有一个 Schedule 单词，翻译成中文有”时间表“的含义，作为一种 Time 管理工具。Schedule 与 Scheduling 虽然意思差距很大，但是其内涵异曲同工。
调度系统设计精要 参考：
调度系统设计精要</description></item><item><title>ServiceDiscovery</title><link>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/ServiceDiscovery/ServiceDiscovery/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/ServiceDiscovery/ServiceDiscovery/</guid><description>概述 参考：
Service Discovery(服务发现)
Nacos 参考：
官网 官方文档 部署文档 发现、配置和管理微服务
Consul 参考：
GitHub 项目，hashicorp/consul 注册
curl --location --request PUT &amp;#39;http://10.10.4.90:8500/v1/agent/service/register&amp;#39; \ --header &amp;#39;Content-Type: application/json&amp;#39; \ --data-raw &amp;#39;{ &amp;#34;id&amp;#34;: &amp;#34;10.10.11.16&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;node-exporter&amp;#34;, &amp;#34;address&amp;#34;: &amp;#34;10.10.11.16&amp;#34;, &amp;#34;port&amp;#34;: 9100, &amp;#34;tags&amp;#34;: [ &amp;#34;linux&amp;#34; ], &amp;#34;Meta&amp;#34;: { &amp;#34;custom_house_name&amp;#34;: &amp;#34;天津机房&amp;#34;, &amp;#34;business_type&amp;#34;: &amp;#34;迎检&amp;#34; } }&amp;#39; 利用服务的 Meta 在 Prometheus 进行 consul_sd 时添加 Lable</description></item><item><title>Time</title><link>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/Time/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/Time/</guid><description>概述 参考：
Wiki, ISO 8601 Wiki-cn，各地日期和时间表示法 https://baike.baidu.com/item/ISO%208601/3910715?fr=aladdin 中国计量科学研究院，SI 基本单位 1983 年，国际计量大会讨论决定，把 1 米的定义修改为光在 1/299792458 秒内走过的距离
1967 年，国际计量大会定义：1 秒是铯 133 原子基态的两个超精细能量间跃迁对应辐射的 9192631770 个周期的持续时间。
Timestamps 参考：
RFC 3339，Date and Time on the Internet: Timestamps Wiki, Timestamp Momentjs，时间格式 Timestamps(时间戳) 是识别特定事件发生时间的字符序列或编码信息，通常给出 date(日期) 和 time(时间)，有时精确到一秒的一小部分。然而，时间戳不必基于某种绝对的时间概念。它们可以具有任何纪元，可以相对于任何任意时间，例如系统的开机时间，或相对于过去的某个任意时间。
日期
日期格式为 YYYY-MM-DD，其中 YYYY 为年，MM 为月 (01–12)，DD 为月份日期 (01–31)。例如，2022 年 1 月 1 日显示为 2022-01-01。如果仅显示月和日，则格式为 MM-DD。例如，6 月 11 日显示为 06-11。
时间
时间格式为 HH:mm:ss，其中 HH 为小时 (00–24)，mm 为分钟 (00–60)，ss 为秒 (00–60)。如果仅显示小时和分钟，则格式为 hh:mm，例如 23:59。</description></item><item><title>UUID 与 ULID</title><link>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/UUID-%E4%B8%8E-ULID/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/UUID-%E4%B8%8E-ULID/</guid><description>概述 参考：
RFC 4122 RFC 9562 Wiki, UUID GitHub 项目，ulid/spec UUID universally unique identifier(通用唯一标识符，简称 UUID) 是一个128 位的 标签用于在计算机系统中的信息。还使用术语全局唯一标识符( GUID )，通常在 Microsoft 创建的软件中使用。
根据标准方法生成时，UUID 出于实用目的是唯一的。与大多数其他编号方案不同，它们的唯一性不依赖于中央注册机构或生成它们的各方之间的协调。虽然 UUID 被复制的概率不是零，但它足够接近零，可以忽略不计。
因此，任何人都可以创建一个 UUID 并使用它来识别某些东西，几乎可以肯定的是，该标识符不会与已经或将要创建的标识符重复以识别其他东西。因此，独立方标有 UUID 的信息稍后可以合并到单个数据库中或在同一频道上传输，重复的可能性可以忽略不计。
UUID 的采用很普遍，许多计算平台为生成它们和解析它们的文本表示提供支持。
ULID Universally Unique Lexicographically Sortable Identifier(通用唯一的字典可排序标识符，简称 ULID)</description></item></channel></rss>