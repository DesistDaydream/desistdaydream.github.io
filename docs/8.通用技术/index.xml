<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦的站点 – 📐8.通用技术</title><link>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/</link><description>Recent content in 📐8.通用技术 on 断念梦的站点</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Cache</title><link>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/Cache/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/Cache/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Cache_(computing)">WIki，Cache(computing)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Cache(缓存)&lt;/strong> 在 &lt;a href="https://desistdaydream.github.io/docs/0.%E8%AE%A1%E7%AE%97%E6%9C%BA/Computer.md">Computer&lt;/a>(计算机) 中，是指一种用于存储数据的软件或硬件，以便可以更快的满足未来对该数据的请求；存储在缓存中的数据可能是早期计算的结果或存储在其他地方的数据的副本。作为缓存的组件的最低要求就是速度够快，避免对存储原始数据的组件产生过大压力。&lt;/p>
&lt;p>缓存是计算机系统中最基本的性能改进技术之一，一次又一次地用于让“常见的情况更快”&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>。硬件缓存背后的思想是利用指令和数据引用的 &lt;strong>Locality(局部性原理)&lt;/strong>。通常有两种局部性: &lt;strong>temporal locality(时间局部性)&lt;/strong> 和 &lt;strong>spatial locality(空间局部性)&lt;/strong>。时间局部性是指，最近访问过的指令或数据项可能很快会再次访问。想想循环中的循环变量或指令，它们被多次反复访问。空间局部性是指，当程序访问内存地址 x 时，可能很快会访问邻近 x 的内存。想想遍历某种数组，访问一个接一个的元素。当然，这些性质取决于程序的特点，并不是绝对的定律，而更像是一种经验法则。&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>&lt;/p>
&lt;p>硬件缓存，无论是指令、数据还是地址转换（如 TLB），都利用了局部性，在小而快的芯片内存储器中保存一份内存副本。处理器可以先检查缓存中是否存在就近的副本，而不是必须访问（缓慢的）内存来满足请求。如果存在，处理器就可以很快地访问它（例如在几个 CPU 时钟内），避免花很多时间来访问内存（好多纳秒）。&lt;sup id="fnref1:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>&lt;/p>
&lt;p>你可能会疑惑：既然像 TLB 这样的缓存这么好，为什么不做更大的缓存，装下所有的数据？可惜的是，这里我们遇到了更基本的定律，就像物理定律那样。如果想要快速地缓存，它就必须小，因为光速和其他物理限制会起作用。大的缓存注定慢，因此无法实现目的。所以，我们只能用小而快的缓存。剩下的问题就是如何利用好缓存来提升性能。&lt;sup id="fnref2:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>&lt;/p>
&lt;h1 id="写入策略">写入策略&lt;a class="td-heading-self-link" href="#%e5%86%99%e5%85%a5%e7%ad%96%e7%95%a5" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Cache_(computing)#Writing_policies">https://en.wikipedia.org/wiki/Cache_(computing)#Writing_policies&lt;/a>&lt;/p>
&lt;p>由于缓存中的数据不能长久保持，所以要根据一定的策略将数据写入到后端存储，具体的写入行为，由 &lt;strong>Writing policies(写入策略)&lt;/strong> 决定&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Write-throught(直写)&lt;/strong> # 向缓存和后端存储同步写入&lt;/li>
&lt;li>&lt;strong>Write-back(回写)&lt;/strong> # 先写入缓存，直到某一条件触发后，再写入到后端存储。&lt;/li>
&lt;/ul>
&lt;p>问 Bing 回写是什么的回答：&lt;/p>
&lt;p>感谢您提供更多的信息。我找到了一些关于计算机领域的回写（write back）的资料，希望对您有用。😊&lt;/p>
&lt;p>回写（write back）是一种缓存（cache）的写入策略，它指的是在数据更新时只写入缓存，而不写入后端存储（如内存或硬盘）。只有当缓存中的数据被替换出去时，才会把修改过的数据写回后端存储。这样可以提高数据写入的速度，但也有可能造成数据不一致的问题。1 2&lt;/p>
&lt;p>回写（write back）通常与写分配（write allocate）一起使用，这意味着当缓存未命中时，会先把数据从后端存储加载到缓存中，然后再更新缓存。这样可以减少对后端存储的访问次数，同时也为后续对同一位置的写入或读取提供便利。3&lt;/p>
&lt;p>回写（write back）与另一种缓存写入策略透写（write through）相对，透写指的是在数据更新时同时写入缓存和后端存储，这样可以保持数据的一致性，但也会降低数据写入的速度。透写通常与无写分配（no write allocate）一起使用，这意味着当缓存未命中时，只更新后端存储，而不加载数据到缓存中。3 4&lt;/p>
&lt;p>如果您想了解更多关于回写（write back）和透写（write through）的区别和优缺点，请参考以下链接：&lt;/p>
&lt;p>1: &lt;a href="https://www.cnblogs.com/guojingdeyuan/p/7626983.html">计算机的Cache和Memory访问时Write-back，Write-through及write allocate的区别 - 国静德远 - 博客园&lt;/a>
2: &lt;a href="https://blog.csdn.net/xingzhe22222/article/details/81988101">cache 写回策略_写回cache_xingzhe22222的博客-CSDN博客&lt;/a>
3: &lt;a href="https://zhuanlan.zhihu.com/p/571429282">透写和回写缓存（Write Through and Write Back in Cache）&lt;/a>
4: &lt;a href="https://blog.csdn.net/zhangj95/article/details/81199272">Cache写机制：Write-through与Write-back - CSDN博客&lt;/a>&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>“Computer Architecture: A Quantitative Approach” John Hennessy and David Patterson - Morgan-Kaufmann, 2006&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>操作系统导论 - 19.2&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&amp;#160;&lt;a href="#fnref1:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&amp;#160;&lt;a href="#fnref2:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Docs: Job</title><link>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/Job/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/Job/</guid><description/></item><item><title>Docs: Regular Expression(正则表达式)</title><link>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/Regular-Expression%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/Regular-Expression%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Regular_expression">Wiki，Regular Expression&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://regex101.com/">正则表达式在线测试&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://r2coding.com/#/README?id=%e6%ad%a3%e5%88%99%e8%a1%a8%e8%be%be%e5%bc%8f">https://r2coding.com/#/README?id=%e6%ad%a3%e5%88%99%e8%a1%a8%e8%be%be%e5%bc%8f&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/PCRE2Project/pcre2">GitHub 项目，PCRE2Project/pcre2&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://www.pcre.org/">PCRE 官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.pcre.org/original/doc/html/pcrepattern.html">PCRE Man page&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://github.com/google/re2">GitHub 项目，google/re2&lt;/a>
&lt;ul>
&lt;li>RE2 是一种快速、安全、线程友好的替代方案，可替代 PCRE、Perl 和 Python 中使用的回溯正则表达式引擎。它是一个 C++ 库&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>记于 2023 年 2 月10 日：有了 ChatGPT，这正则表达式。。。我想。。。应该再也不用背了。。。。&lt;/strong>&lt;/p>
&lt;p>&lt;strong>Regular Expression(正则表达式，简称 RegEX 或 RegEXP)&lt;/strong> 是用于定义 Search Pattern(搜索模式) 的一系列字符串。这种 &lt;strong>Pattern(模式)&lt;/strong> 通常被字符串搜索算法用于 find(查找) 字符串、或 find and replace(查找并替换) 字符串、或者验证输入内容。RegEX 是一种在 Theoretical Computer Science(理论计算机科学) 和 Formal Language(形式语言) 理论中发展起来的技术。&lt;/p>
&lt;blockquote>
&lt;p>还有一个学名 &lt;strong>Perl Compatible Regular Expressions(Perl 兼容的正则表达式，简称 PCRE)&lt;/strong>，这用来表示 Perl 语言兼容的正则表达式。&lt;/p>
&lt;/blockquote>
&lt;p>用白话说，所谓的 正则表达式，就是用来通过一种称为 &lt;strong>Pattern(模式)&lt;/strong> 的方式，筛选出长篇内容里的部分内容。其实就是一堆字符组合在一起形成一种行为，这个行为就是匹配字符行为。也可以勉强算编程语言的一种吧~&lt;/p>
&lt;p>&lt;strong>所以，这个世界在很多时候，把正则表达式这个概念，用 RegEX、RegEXP、Pattern 这几种单词表示。&lt;/strong>&lt;/p>
&lt;p>RegEX 概念产生于 1950 年，美国数学家 斯蒂芬·科尔·克莱恩 正式定义了 &lt;strong>Regular Language(正则表达式语言)&lt;/strong>。这个概念在 Unix 文本处理工具中得到了普遍使用，自 20 世纪 80 年代 以来，存在着不同的正则表达式书写语法，一种是 POSIX 标准，另一种是 Perl 语法。&lt;/p>
&lt;p>正则表达式用于搜索引擎，字处理器和文本编辑器的搜索和替换对话框，sed 和 awk 等文本处理应用程序以及词法分析中。许多编程语言通过内置或库提供正则表达式功能。&lt;/p>
&lt;h1 id="正则表达式的符号参考">正则表达式的符号参考&lt;a class="td-heading-self-link" href="#%e6%ad%a3%e5%88%99%e8%a1%a8%e8%be%be%e5%bc%8f%e7%9a%84%e7%ac%a6%e5%8f%b7%e5%8f%82%e8%80%83" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>说明：&lt;/p>
&lt;ul>
&lt;li>&lt;code>...&lt;/code> 表示任意字符串，并不是正则字符的组成部分&lt;/li>
&lt;/ul>
&lt;h2 id="字符匹配">字符匹配&lt;a class="td-heading-self-link" href="#%e5%ad%97%e7%ac%a6%e5%8c%b9%e9%85%8d" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>字符&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>.&lt;/td>
&lt;td>匹配除换行符之外的任意单个字符(不包含空行)。等价于 [^\n\r]&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>\w&lt;/td>
&lt;td>匹配字母、数字、下划线。等价于 [A-Za-z0-9_]&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="次数匹配模式匹配该表达式前面的一个字符出现的次数">次数匹配模式：匹配该表达式前面的一个字符出现的次数&lt;a class="td-heading-self-link" href="#%e6%ac%a1%e6%95%b0%e5%8c%b9%e9%85%8d%e6%a8%a1%e5%bc%8f%e5%8c%b9%e9%85%8d%e8%af%a5%e8%a1%a8%e8%be%be%e5%bc%8f%e5%89%8d%e9%9d%a2%e7%9a%84%e4%b8%80%e4%b8%aa%e5%ad%97%e7%ac%a6%e5%87%ba%e7%8e%b0%e7%9a%84%e6%ac%a1%e6%95%b0" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>符号&lt;/th>
&lt;th>详解&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>*&lt;/td>
&lt;td>次数匹配，匹配 &lt;code>*&lt;/code> 前面的一个字符重复出现任意(包括 0 次,即不出现前一个字符)次数，例：x&lt;em>是无数个 x，1&lt;/em>是无数个 1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>.*&lt;/td>
&lt;td>重复任意一个字符，即任意多个字符&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>^.*&lt;/td>
&lt;td>以任意多个字符串开头，.*尽可能多，有多少算多少，贪婪性&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>?&lt;/td>
&lt;td>&lt;code>?&lt;/code> 前面字符出现 0 次或者 1 次的，即问一下这个字符有还是没有&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>+&lt;/td>
&lt;td>匹配 &lt;code>+&lt;/code> 前的字符至少一次&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>{m}&lt;/td>
&lt;td>匹配前一个字符 m 次，例：grep &amp;ldquo;s\{3\} /home 匹配 sss 的内容&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>{m,n}&lt;/td>
&lt;td>匹配最少 m 次，最多 n 次，注意：这几种类型的匹配如果不在 egrep 中搜索需要在{前加\&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>{m,}&lt;/td>
&lt;td>匹配最少 m 次&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>{0,n}&lt;/td>
&lt;td>匹配最多 n 次&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="非打印字符匹配">非打印字符匹配&lt;a class="td-heading-self-link" href="#%e9%9d%9e%e6%89%93%e5%8d%b0%e5%ad%97%e7%ac%a6%e5%8c%b9%e9%85%8d" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>符号&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>\cx&lt;/td>
&lt;td>匹配由 x 指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 &amp;lsquo;c&amp;rsquo; 字符。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>\f&lt;/td>
&lt;td>匹配一个换页符。等价于 \x0c 和 \cL。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>\n&lt;/td>
&lt;td>匹配一个换行符。等价于 \x0a 和 \cJ。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>\r&lt;/td>
&lt;td>匹配一个回车符。等价于 \x0d 和 \cM。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>\s&lt;/td>
&lt;td>匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。注意 Unicode 正则表达式会匹配全角空格符。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>\S&lt;/td>
&lt;td>匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>\t&lt;/td>
&lt;td>匹配一个制表符。等价于 \x09 和 \cI。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>\v&lt;/td>
&lt;td>匹配一个垂直制表符。等价于 \x0b 和 \cK。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="锚点匹配用于指定字符出现的位置">锚点匹配：用于指定字符出现的位置&lt;a class="td-heading-self-link" href="#%e9%94%9a%e7%82%b9%e5%8c%b9%e9%85%8d%e7%94%a8%e4%ba%8e%e6%8c%87%e5%ae%9a%e5%ad%97%e7%ac%a6%e5%87%ba%e7%8e%b0%e7%9a%84%e4%bd%8d%e7%bd%ae" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>符号&lt;/th>
&lt;th>详解&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>^&lt;/td>
&lt;td>指定行首，^WORD 搜索一行开头以 WORD 字符开头的行的内容&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>$&lt;/td>
&lt;td>指定行尾，word$搜索一行最后以 word 结尾的内容&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>^$&lt;/td>
&lt;td>表示空白行，不是空格（^li$显示只有 li 的行）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>\b&lt;/td>
&lt;td>匹配单词边界&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>\&amp;gt;&lt;/td>
&lt;td>指定词尾， “abc\&amp;gt;”表示所有包含以”abc”结尾的单词的行“&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>\&amp;lt;&lt;/td>
&lt;td>指定词首， “\&amp;lt;abc”表示所有包含以”abc”开头的单词的行“&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="括号表达式">括号表达式&lt;a class="td-heading-self-link" href="#%e6%8b%ac%e5%8f%b7%e8%a1%a8%e8%be%be%e5%bc%8f" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>符号&lt;/th>
&lt;th>详解&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>[abc][0-9][\.,/]&lt;/td>
&lt;td>匹配字符集合内的任意一个字符 a 或 b 或 c。[a-z]匹配所有小写字母，表示一个区间，[abc]找 a 或 b 或 c 可以写成[a-c]&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>[^abc]&lt;/td>
&lt;td>匹配不包含^后的任意字符 a 或 b 或 c，是对[abc]的取反，且与^含义不同&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>[\s\S]&lt;/td>
&lt;td>匹配所有。\s 匹配所有空白符。\S 匹配所有非空白符，包括换行&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>[[:space:]]&lt;/td>
&lt;td>匹配空白字符&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>[^[:space:]]&lt;/td>
&lt;td>匹配非空白字符&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="特殊符号">特殊符号&lt;a class="td-heading-self-link" href="#%e7%89%b9%e6%ae%8a%e7%ac%a6%e5%8f%b7" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>符号&lt;/th>
&lt;th>详解&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>\&lt;/td>
&lt;td>&lt;strong>escape character(转义字符)&lt;/strong>,让有特殊含义的字符脱掉马甲,不执行该特殊字符所代表的含义,如\.只表示小数点,不代表任意一个字符&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="元字符序列">元字符序列&lt;a class="td-heading-self-link" href="#%e5%85%83%e5%ad%97%e7%ac%a6%e5%ba%8f%e5%88%97" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>| 元字符 |&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>示例&lt;/th>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>/a&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>a or b, pick one!&lt;/td>
&lt;td>表示“或”，即匹配其中任何一个，”book&lt;/td>
&lt;td>desk”将匹配”book”或”desk”&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>()&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>小括号，可以将正则字符和元字符或表达式进行组合，”(book&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>减号，用于指明字符范围， “[a-c]”将匹配包含 a、b 和 c 中任意一个字符的字符串&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>(..(..)..)(..)..\#&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td># 为任意数字,该字符表示匹配前面的第#个小括号组中的内容。正则表达式中的小括号&amp;rdquo;()&amp;ldquo;是代表分组的意思。 如果再其后面出现\1 则是代表引用第一个小括号中匹配的内容。注意：\1 必须与小括号配合使用&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>\# 例子&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>(li)#\1 表示查找 li#li 这个内容&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>(li(chen))#\1\2 表示引用 lichen#lichenchen,注:括号顺序以左括号为准&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="子组结构">子组结构&lt;a class="td-heading-self-link" href="#%e5%ad%90%e7%bb%84%e7%bb%93%e6%9e%84" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>符号&lt;/th>
&lt;th>描述&lt;/th>
&lt;th>示例&lt;/th>
&lt;th>详解&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>(?!...)&lt;/code>&lt;/td>
&lt;td>正向否定零宽断言&lt;/td>
&lt;td>&lt;code>/foo(?!bar)/&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>foobar foobaz&lt;/code>&lt;/td>
&lt;td>子表达式不可在此后成功匹配的位置，不占用字符。&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>(?=)&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>表达式&lt;/strong>&lt;/th>
&lt;th>&lt;strong>描述&lt;/strong>&lt;/th>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>(?=)&lt;/td>
&lt;td>正向预查。比如 Code(?=Sheep)能匹配 CodeSheep 中的 Code，但不能匹配 CodePig 中的 Code。&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>(?!)&lt;/td>
&lt;td>正向否定预查。比如 Code(?!Sheep)不能匹配 CodeSheep 中的 Code，但能匹配 CodePig 中的 Code。&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>(?&amp;lt;=)&lt;/td>
&lt;td>反向预查。比如(?&amp;lt;=Code)Sheep 能匹配 CodeSheep 中的 Sheep，但不能匹配 ReadSheep 中的 Sheep。&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>(?&amp;lt;!)&lt;/td>
&lt;td>反向否定预查。比如(?&amp;lt;!Code)Sheep 不能匹配 CodeSheep 中的 Sheep，但能匹配 ReadSheep 中的 Sheep。&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>基本和扩展正则表达式具体区别见下图，扩展中的元字符如果用在基本正则表达式中，需要在每个元字符前面加转义符&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gpte3g/1616130197884-a0718c40-7e61-429d-9f4b-fe45a665d0d7.jpeg" alt="">&lt;/p>
&lt;h1 id="示例">示例&lt;a class="td-heading-self-link" href="#%e7%a4%ba%e4%be%8b" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>空行&lt;/p>
&lt;ul>
&lt;li>&lt;code>^(\s*)\n&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>行尾的空字符串&lt;/p>
&lt;ul>
&lt;li>&lt;code>\s+$&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>匹配所有 IPv4 地址&lt;/p>
&lt;ul>
&lt;li>&lt;code>(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>所有开头不是 &lt;code># HELP&lt;/code> 的行，以及行尾的换行符&lt;/p>
&lt;ul>
&lt;li>&lt;code>^(?!# HELP).*\n&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>从 hosts 文件中筛选出指定的域名&lt;/p>
&lt;ul>
&lt;li>去掉除所有 IP 地址
&lt;ul>
&lt;li>&lt;code>(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>方向匹配开头是 optical-admin 的所有行之后。即匹配开头不是 optical-admin 的行
&lt;ul>
&lt;li>&lt;code>^(?!optical-admin).*\n&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>匹配所有汉字或空白字符&lt;/p>
&lt;ul>
&lt;li>&lt;code>[\u4e00-\u9fa5 | \u00a0]&lt;/code>&lt;/li>
&lt;/ul>
&lt;h1 id="通配符">通配符&lt;a class="td-heading-self-link" href="#%e9%80%9a%e9%85%8d%e7%ac%a6" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>通配符&lt;/th>
&lt;th>含义&lt;/th>
&lt;th>实例&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>*&lt;/td>
&lt;td>匹配 0 或多个字符&lt;/td>
&lt;td>a*b a 与 b 之间可以有任意长度的任意字符, 也可以一个也没有, 如 aabcb, axyzb, a012b, ab。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>?&lt;/td>
&lt;td>匹配任意一个字符&lt;/td>
&lt;td>a?b a 与 b 之间必须也只能有一个字符, 可以是任意字符, 如 aab, abb, acb, a0b。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>[list]&lt;/td>
&lt;td>匹配 list 中的任意单一字符&lt;/td>
&lt;td>a[xyz]b a 与 b 之间必须也只能有一个字符, 但只能是 x 或 y 或 z, 如: axb, ayb, azb。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>[!list]或[^list]&lt;/td>
&lt;td>匹配 除 list 中的任意单一字符&lt;/td>
&lt;td>a[!0-9]b a 与 b 之间必须也只能有一个字符, 但不能是阿拉伯数字, 如 axb, aab, a-b。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>[c1-c2]&lt;/td>
&lt;td>匹配 c1-c2 中的任意单一字符 如：[0-9] [a-z]&lt;/td>
&lt;td>a[0-9]b 0 与 9 之间必须也只能有一个字符 如 a0b, a1b&amp;hellip; a9b。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>[!c1-c2]或[^c1-c2]&lt;/td>
&lt;td>匹配不在 c1-c2 的任意字符&lt;/td>
&lt;td>a[!0-9]b 如 acb adb&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>{string1,string2,&amp;hellip;}&lt;/td>
&lt;td>匹配 sring1 或 string2 (或更多)其一字符串&lt;/td>
&lt;td>a{abc,xyz,123}b 列出 aabcb,axyzb,a123b&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Docs: Scheduler</title><link>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/Scheduler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/Scheduler/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://draveness.me/system-design-scheduler/">调度系统设计精要&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>Docs: ServiceDiscovery</title><link>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/ServiceDiscovery/ServiceDiscovery/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/ServiceDiscovery/ServiceDiscovery/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Service Discovery(服务发现)&lt;/strong>&lt;/p>
&lt;h1 id="nacos">Nacos&lt;a class="td-heading-self-link" href="#nacos" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://nacos.io/zh-cn/index.html">官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://nacos.io/zh-cn/docs/what-is-nacos.html">官方文档&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/nacos-group/nacos-k8s">部署文档&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>发现、配置和管理微服务&lt;/p>
&lt;h1 id="consul">Consul&lt;a class="td-heading-self-link" href="#consul" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/hashicorp/consul">GitHub 项目，hashicorp/consul&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>注册&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl --location --request PUT &lt;span style="color:#4e9a06">&amp;#39;http://10.10.4.90:8500/v1/agent/service/register&amp;#39;&lt;/span> &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span>--header &lt;span style="color:#4e9a06">&amp;#39;Content-Type: application/json&amp;#39;&lt;/span> &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span>--data-raw &lt;span style="color:#4e9a06">&amp;#39;{
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> &amp;#34;id&amp;#34;: &amp;#34;10.10.11.16&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> &amp;#34;name&amp;#34;: &amp;#34;node-exporter&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> &amp;#34;address&amp;#34;: &amp;#34;10.10.11.16&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> &amp;#34;port&amp;#34;: 9100,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> &amp;#34;tags&amp;#34;: [
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> &amp;#34;linux&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> ],
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> &amp;#34;Meta&amp;#34;: {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> &amp;#34;custom_house_name&amp;#34;: &amp;#34;天津机房&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> &amp;#34;business_type&amp;#34;: &amp;#34;迎检&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>利用服务的 Meta 在 Prometheus 进行 consul_sd 时添加 Lable&lt;/p></description></item><item><title>Docs: Time</title><link>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/Time/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/Time/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/ISO_8601">Wiki，ISO 8601&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zh.wikipedia.org/zh-hans/%E5%90%84%E5%9C%B0%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4%E8%A1%A8%E7%A4%BA%E6%B3%95">Wiki-cn，各地日期和时间表示法&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://baike.baidu.com/item/ISO%208601/3910715?fr=aladdin">https://baike.baidu.com/item/ISO%208601/3910715?fr=aladdin&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.nim.ac.cn/520/node/4.html">中国计量科学研究院，SI 基本单位&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>1983 年，国际计量打会讨论决定，把 1 米的定义修改为光在 1/299792458 秒内走过的距离&lt;/p>
&lt;p>1967 年，国际计量大会定义：1 秒是铯 133 原子基态的两个超精细能量间跃迁对应辐射的 9192631770 个周期的持续时间。&lt;/p>
&lt;h1 id="timestamps">Timestamps&lt;a class="td-heading-self-link" href="#timestamps" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://tools.ietf.org/html/rfc3339">RFC 3339，Date and Time on the Internet: Timestamps&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Timestamp">Wiki，Timestamp&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Timestamps(时间戳)&lt;/strong> 是识别特定事件发生时间的字符序列或编码信息，通常给出 date(日期) 和 time(时间)，有时精确到一秒的一小部分。然而，时间戳不必基于某种绝对的时间概念。它们可以具有任何纪元，可以相对于任何任意时间，例如系统的开机时间，或相对于过去的某个任意时间。&lt;/p>
&lt;p>&lt;strong>日期&lt;/strong>&lt;/p>
&lt;p>日期格式为 YYYY-MM-DD，其中 YYYY 为年，MM 为月 (01–12)，DD 为月份日期 (01–31)。例如，2022 年 1 月 1 日显示为 2022-01-01。如果仅显示月和日，则格式为 MM-DD。例如，6 月 11 日显示为 06-11。&lt;/p>
&lt;p>&lt;strong>时间&lt;/strong>&lt;/p>
&lt;p>时间格式为 hh:mm:ss，其中 hh 为小时 (00–24)，mm 为分钟 (00–60)，ss 为秒 (00–60)。如果仅显示小时和分钟，则格式为 hh:mm，例如 23:59。&lt;/p>
&lt;p>&lt;strong>日期和时间的组合表示法&lt;/strong>&lt;/p>
&lt;p>合并表示时，要在时间前面加一大写字母 T，如要表示北京时间 2004 年 5 月 3 日下午 5 点 30 分 8 秒，可以写成 &lt;code>2004-05-03T17:30:08+08:00&lt;/code> 或 &lt;code>20040503T173008+08&lt;/code>。&lt;/p>
&lt;h1 id="unix-time">Unix time&lt;a class="td-heading-self-link" href="#unix-time" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Unix_time">Wiki，Unix_time&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.bejson.com/convert/unix/">时间戳在线转换&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Unix time&lt;/strong> 也叫做 &lt;strong>POSIX 时间&lt;/strong> 或 &lt;strong>Epoch Time(纪元时间)&lt;/strong>，是计算中广泛使用的日期和时间表示形式。它通过自 1970 年 1 月 1 日 Unix 纪元 00:00:00 UTC 以来经过的非闰秒数来测量时间。在现代计算中，值有时以更高的粒度存储，例如微秒或纳秒。&lt;/p>
&lt;p>&lt;a href="https://baike.baidu.com/item/unix">https://baike.baidu.com/item/unix&lt;/a> 时间戳&lt;/p>
&lt;p>&lt;a href="https://baike.baidu.com/item/2038">https://baike.baidu.com/item/2038&lt;/a> 年问题&lt;/p>
&lt;p>时间戳转换工具，可以在 Unix-time 与 Timestamps 之间相互转换。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/vym7ql/1616165162261-f89b406f-0967-44d2-b496-baa6ebe57434.png" alt="">&lt;/p></description></item><item><title>Docs: 编码与解码</title><link>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81/</guid><description/></item><item><title>Docs: CDN</title><link>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/CDN/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/CDN/</guid><description/></item><item><title>Docs: Message Queue(消息队列)</title><link>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/Message-Queue%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/Message-Queue%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</guid><description/></item><item><title>Docs: UUID 与 ULID</title><link>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/UUID-%E4%B8%8E-ULID/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/UUID-%E4%B8%8E-ULID/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Universally_unique_identifier">Wiki，UUID&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/ulid/spec">GitHub 项目，ulid/spec&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="uuid">UUID&lt;a class="td-heading-self-link" href="#uuid" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>universally unique identifier(通用唯一标识符，简称 UUID)&lt;/strong> 是一个&lt;a href="https://en.wikipedia.org/wiki/128-bit">128 位的&lt;/a> &lt;a href="https://en.wikipedia.org/wiki/Nominal_number">标签&lt;/a>用于在计算机系统中的信息。还使用术语&lt;strong>全局唯一标识符&lt;/strong>( &lt;strong>GUID&lt;/strong> )，通常在 &lt;a href="https://en.wikipedia.org/wiki/Microsoft">Microsoft&lt;/a> 创建的软件中使用。&lt;/p>
&lt;p>根据标准方法生成时，UUID 出于实用目的是唯一的。与大多数其他编号方案不同，它们的唯一性不依赖于中央注册机构或生成它们的各方之间的协调。虽然 UUID 被复制的&lt;a href="https://en.wikipedia.org/wiki/Probability">概率&lt;/a>不是零，但它足够接近零，可以忽略不计。&lt;/p>
&lt;p>因此，任何人都可以创建一个 UUID 并使用它来识别某些东西，几乎可以肯定的是，该标识符不会与已经或将要创建的标识符重复以识别其他东西。因此，独立方标有 UUID 的信息稍后可以合并到单个数据库中或在同一频道上传输，重复的可能性可以忽略不计。&lt;/p>
&lt;p>UUID 的采用很普遍，许多计算平台为生成它们和解析它们的文本表示提供支持。&lt;/p>
&lt;h2 id="ulid">ULID&lt;a class="td-heading-self-link" href="#ulid" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>Universally Unique Lexicographically Sortable Identifier(通用唯一的字典可排序标识符，简称 ULID)&lt;/strong>&lt;/p></description></item></channel></rss>