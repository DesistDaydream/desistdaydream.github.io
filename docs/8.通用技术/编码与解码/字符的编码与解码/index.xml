<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>字符的编码与解码 on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81/%E5%AD%97%E7%AC%A6%E7%9A%84%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81/</link><description>Recent content in 字符的编码与解码 on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81/%E5%AD%97%E7%AC%A6%E7%9A%84%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81/index.xml" rel="self" type="application/rss+xml"/><item><title>控制字符</title><link>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81/%E5%AD%97%E7%AC%A6%E7%9A%84%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81/%E6%8E%A7%E5%88%B6%E5%AD%97%E7%AC%A6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81/%E5%AD%97%E7%AC%A6%E7%9A%84%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81/%E6%8E%A7%E5%88%B6%E5%AD%97%E7%AC%A6/</guid><description>概述 参考：
Wiki, Control character 在计算机和电信领域，Control character(控制字符) 或 Non-printing character(非打印字符，简称 NPC) 是字符的编码（或称为 字符集）中非书面字符、符号的代码点。
这些控制字符包括：回车符（Carriage-Return）、换行符（Line-Feed）、退格符（Backspace）、逃离符（转义符 Escape-Character）、制表符（Tab）、响铃符（Bell）、等等。这些控制字符本身通常不会显示在终端屏幕上。键盘上的 ESC、Enter、Backspace、等等 按键在按下后，都会向终端发送对应的控制字符。
在 ASCII 表 中有 33 个控制字符，比如 0 - 32 号字符，都属于控制字符。在 ECMA-48 标准中又增加了 32 个
ACSII 中的 33 个控制字符通常称为 C0 控制字符。后来还添加了 ASCII 中的 128-159 作为控制字符，称为 C1 控制字符。</description></item><item><title>字符的编码与解码</title><link>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81/%E5%AD%97%E7%AC%A6%E7%9A%84%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81/%E5%AD%97%E7%AC%A6%E7%9A%84%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81/%E5%AD%97%E7%AC%A6%E7%9A%84%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81/%E5%AD%97%E7%AC%A6%E7%9A%84%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81/</guid><description>概述 参考：
Wiki, Character encoding 阮一峰博客 公众号 - k8s 技术圈，计算机字符编码的前世今生 B 站 - 幼麟实验室，Golang 合辑-P1 string(这个 P 讲的就是字符的编码与解码) 我们知道计算机只认识二进制数据，其他格式的数据都需要转换成二进制才能被计算机处理，也就是说我们在计算机上看到的文本、视频、可执行程序等格式的文件，最终都会转换成二进制数据交给计算机处理
计算机中最小的数据单位是 bit，也叫二进制位(简称：位)，每一个 bit 都有 0 和 1 两种状态，最早的计算机在设计时采用了 8 个 bit 作为一个 Byte(字节)，所以一个字节能表示的最大整数就是二进制的 11111111 等于十进制的 255，一共 256 个数字(即.0~255)，想要表示更大的整数就必须要用多个字节，例如两个字节可以表示最大的整数就是二进制的 1111111111111111，共 16 位，等于十进制的 65535。
更多的字节，就可以表示更大的数值范围，比如 32 位，最大可以表示为 4,294,967,295，我们平时说的 32 位电脑、64 位电脑，也是同一个意思，所以就说 32 位电脑，没法传输 4 G 以上的文件，就是因为其最大可以表示的数字就是 4,294,967,295，更大的文件，已经无法识别了。整数可以这么表示，那么字符怎么办呢？一堆二进制的 0 和 1，任何计算都无法算出字母 A 吧？~o(╯□╰)o
聪明的人类啊。。。如果无法通过计算得到，那么就中转一下，人为规定就好了~比如：
字符 十进制编号 二进制编号 A 65 0100 0001 B 66 &amp;hellip;&amp;hellip; a 97 &amp;hellip;&amp;hellip; 要存储字符时，就存储这个数值；要读取字符时，按照映射关系，找到这个字符；就像这样，收录许多字符，然后给它们一一编号，得到一个字符与编号的对照表，这就是 Character sets(字符集)，经过这么多年的发展，大家对这个术语有很多种叫法：Character encoding(字符编码)、Character map(字符映射)、Code page(代码页) 都可以表示同一个概念。</description></item><item><title>ASCII 表</title><link>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81/%E5%AD%97%E7%AC%A6%E7%9A%84%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81/ASCII-%E8%A1%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81/%E5%AD%97%E7%AC%A6%E7%9A%84%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81/ASCII-%E8%A1%A8/</guid><description>概述 参考：
Wiki, ASCII 原文链接：https://www.middlewareinventory.com/ascii-table/
Character Binary Value Decimal Value Octal Value Hex Value 符号 用途 二进制表示 十进制表示 八进制表示 十六进制表示 NUL null 0 0 0 0 SOH start of heading 1 1 1 1 STX start of text 10 2 2 2 ETX end of text 11 3 3 3 EOT end of transmission 100 4 4 4 ENQ enquiry 101 5 5 5 ACK acknowledge 110 6 6 6 BEL bell 111 7 7 7 BS backspace 1000 8 10 8 TAB horizontal tab 1001 9 11 9 LF line feed(换行) 1010 10 12 A VT vertical tab 1011 11 13 B FF form feed 1100 12 14 C CR carriage return(回车) 1101 13 15 D SO shift out 1110 14 16 E SI shift in 1111 15 17 F DLE data link escape 10000 16 20 10 DC1 device control 1 10001 17 21 11 DC2 device control 2 10010 18 22 12 DC3 device control 3 10011 19 23 13 DC4 device control 4 10100 20 24 14 NAK negative acknowledge 10101 21 25 15 SYN synchronous idle 10110 22 26 16 ETB end of trans.</description></item></channel></rss>