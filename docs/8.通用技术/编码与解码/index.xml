<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>编码与解码 on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81/</link><description>Recent content in 编码与解码 on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81/index.xml" rel="self" type="application/rss+xml"/><item><title>编码与解码</title><link>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81/%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81/%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81/</guid><description>概述 参考：
Wiki, Code 在通信和信息处理中，Code(代码) 是一种规则系统，用于将信息（e.g. 字母、单词、声音、图像、手势、etc.）以另一种形式展示（e.g. 数字、短码、加密、etc.），以便可以通过通信通道或存储在存储器中进行通信。
注意与 编程 中的 Code 概念区分。虽然编程中的 Code 也有类似将一种语言转成另一种语言的概念。但是与这里的 Code 概念并不完全一样。
Encoding(编码) 是信息从一种形式或格式,转换为另一种形式或格式的过程。而 Decoding(解码) 则是编码的逆过程。
首先需要明确一点，计算机的组件处理信息都是基于 二进制 来实现的，也就是说。都是 0 和 1 这种信息，不管电路的一开一关，灯的一亮一灭，都可以用 0 和 1 来表示。而计算机也是通过 0 和 1 来存储以及处理数据的。
但是计算机在使用的时候，我们看到并不是只有 0 和 1，我们打字也不是只输入 0 和 1，不但有文字，还有图片、视频、音频等等。这是为什么呢？
由于计算机只认识 0 和 1 这种二进制数据，其他格式的数据都需要转换成二进制才能被计算机处理，也就是说我们在计算机上看到的文本、视频、可执行程序等格式的文件，最终都会进行编码以转换成二进制数据交给计算机处理；而计算机处理完成后，会进行解码以将二进制数据转换为 文本、图片、视频 等格式，以便人类可以查看。这种来回转换的过程，就称为 Encoding(编码) 与 Decoding(解码)。
总的来说，通常编码与解码是相对人类来说，把人类当做主体，i.e. 人类是数据的发送者和接收者。此时，Encoding 是将来自发送者的信息转换为用于通信和存储的符号。Decoding 是将代码符号转换回接收者可以理解的形式。
而文字、图片、音/视频 等等数据，其编码方式又各不相同。
字符编码 # 用来对文字进行 编/解码 的过程 图形编码 # 对图片进行 编/解码 的过程 音频编码 # 对音频进行 编/解码 的过程 当然，随着时代的发展，Encoding(编码) 与 Decoding(解码) 也不仅仅代指上述三种类型，就如概述中的第一句话，任何格式的数据转换成另一种，都可以称之为编码！ 比如 Base64 编码，则是可以将二进制数据，转换为字符串数据，这种行为，也可以称之为编码。</description></item><item><title>视频的编码与解码</title><link>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81/%E8%A7%86%E9%A2%91%E7%9A%84%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81/%E8%A7%86%E9%A2%91%E7%9A%84%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81/</guid><description>概述 参考：
Wiki, Advanced Video Coding Wiki, High Efficiency Video Coding Wiki, AV1 视频编码其实就是 图像编码 与 音频编码 的结合体。
毕竟视频就是一幅幅图像叠加在一起而已，只不过在每时每刻又要附加上声音。
编码技术
AVC 也称 H.264、MPEG-4 part10 HEVC 也称 H.265、MPEG-H part 2 AV1 视频 编码 与 压缩 B 站，差评君-这么多视频编码，为什么不能统一成一种呢？
可能有小伙伴不太清楚编码器是干嘛的，差评君先花点时间给大家解释下： （ 很快的啊，不用担心内容劝退。。懂的小伙伴可以直接往下划 ）
我们平常在爱奇艺、 B 站看的视频，它们原本的体量十分巨大。
有多大呢，我们就拿 1080p 分辨率的视频举例吧，一秒钟视频流大概有 149 MB 那么大（ 1920 x 1080 x 8bit x 三个 RGB 通道 x 24 帧 / 8 ）。
相当于说我们的网速至少需要达到 149 MB/s，才能够保证看 1080p 视频不卡。
提醒一下，149 MB/s 约合 1194 Mbps，比千兆宽带（ 1000 Mbps ）还快一点。</description></item><item><title>Base64 编码</title><link>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81/Base64-%E7%BC%96%E7%A0%81/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81/Base64-%E7%BC%96%E7%A0%81/</guid><description>概述 参考：
Wiki, Base64 Base64 是一组 二进制 到 文本 的编码方案，它是基于 64 个可打印的字符来表示二进制的数据的一种方法。二进制的数据中的每一个位数的内容，都可以通过字符来表示。
对于所有二进制到文本编码方案而言，Base64 都被设计为在只能可靠地支持文本内容的通道上以二进制格式存储数据。Base64 在万维网上特别流行，它的用途包括将图像文件或其他二进制资产嵌入文本资产（例如HTML和CSS文件）中的功能。
Base64 还广泛用于发送电子邮件附件。这是必需的，因为 SMTP（原始格式）仅设计为传输 7 位 ASCII 字符。这种编码会产生 33–36％ 的开销（编码本身的开销为 33％；插入的换行符最多可导致 3％ 的开销）。</description></item><item><title>图像的编码与解码</title><link>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81/%E5%9B%BE%E5%83%8F%E7%9A%84%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81/%E5%9B%BE%E5%83%8F%E7%9A%84%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81/</guid><description>参考： Wiki-Pixel(像素) &amp;gt; Wiki-Image resolution(分辨率) &amp;gt; Wiki-Raster graphics(光栅图像)
图像的编码 和 字符的编码 其实本质上都是使用二进制来进行 编/解码。
图像 想要了解图像的编码/解码，首先要明确一下图片的组成
这个图，如果放到编辑器中，然后无限放大，会看到这种效果：
从这里可以看到，一张图片，其实就是很多很多的小方块组成的，每个小方块，都称之为 Pixel(像素)。
Piexl(像素) Picture Element(图像元素，简称 Pel)，也就是常常听说的 Piexl(像素)。在数字成像中，像素是光栅图像中最小的可寻址元素，或者是全点可寻址 显示设备中的最小可寻址元素；因此，它是屏幕上所显示图片的最小可控元素。
每个像素都是原始图像的样本；通常，更多的样本会提供对原件的更准确的表示。每个像素的强度是可变的。在彩色成像系统中，颜色通常由三个或四个分量强度来表示，例如红色，绿色和蓝色，或青色，品红色，黄色和黑色。
在一些语境中(如描述相机传感器)，_像素 指的是多组分表示的单个标量元素（称为_感光点_在相机传感器上下文中，虽然传感器个体_有时使用），[3]而在其它上下文中它可以指的是空间位置的一组分量强度。
一般情况下，电脑中的颜色都是使用三原色混合而成，比如：
可以看到，每个颜色都有一个数字表示，而 RGB 就是三原色，不用强度的三原色，就会组成不同强度的新颜色。
Image Resolution(图像分辨率) Image Resolution(图像分辨率) 指图像可以存在的细节，分辨率仅适用于 光栅图像。一般是指单位英寸中所包含的像素个数。 用白话说，分辨率就是判断一张图片清晰度的重要标志，而上文提到的 像素，就是分辨率的一部分。通常，分辨率可以通过如下几种方式来判断
像素数 空间分辨率 光谱分辨率 时间分辨率 辐射分辨率 大部分时候，其实主要就是以像素的数量来决定一张图像的分辨率，比如：
而 像素密度 与 像素总数，又是判断分辨率所具有像素数的两个重要指标
像素密度 # 单位长度内的像素数量除以单位长度，单位为 PPI（Pixels Per Inch）。像素密度越高，说明像素越密集，5PPI 表示每英寸有 5 个像素，500PPI 表示每英寸有 500 个像素，PPI 的数值高，图片和视频的清晰度就更高。 像素总数 # 图片、影像的单独一帧图所含像素的数量，单位为像素，计算方式为长边的像素个数乘以短边的像素个数。 宽度为 2048 像素，高度为 1536 像素的图像总计 2048×1536 = 3,145,728 像素或 3.</description></item><item><title>音频的编码与解码</title><link>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81/%E9%9F%B3%E9%A2%91%E7%9A%84%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81/%E9%9F%B3%E9%A2%91%E7%9A%84%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81/</guid><description>声音的本质就是波，波都是有频率的，频率就是指波在一秒钟震动的次数，单位是 Hz(赫兹)。
计算机除了记录声音的频率，还要记录在不同频率上，声音的幅度大小。
而想要出现声音，其实是离不开时间的，没有时间的流逝，也就不会产生声音
所以，计算机就需要对声音进行采样，记录每时每刻声音的频率和幅度，采样频率越高，声音也就越逼真
远程同话一般是每秒8000次的采样频率，而音乐CD则是每秒44100次的采样频率
每次采样，都会将频率和幅度，然后将其转换为字符，进而编码为二进制。</description></item></channel></rss>