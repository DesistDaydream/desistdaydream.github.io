<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦的站点 – Disk</title><link>https://desistdaydream.github.io/docs/0.%E8%AE%A1%E7%AE%97%E6%9C%BA/Disk/</link><description>Recent content in Disk on 断念梦的站点</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/0.%E8%AE%A1%E7%AE%97%E6%9C%BA/Disk/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Disk</title><link>https://desistdaydream.github.io/docs/0.%E8%AE%A1%E7%AE%97%E6%9C%BA/Disk/Disk/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/0.%E8%AE%A1%E7%AE%97%E6%9C%BA/Disk/Disk/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>对很多 PC 的使用者来说，UEFI 就像是一颗深水炸弹，表面风平浪静，暗地里却早已引发了巨大的震动。多亏了 Microsoft 的强横，预装 WIN8 的电脑指定需要 GPT 分区这一举措，让人们不禁发出感慨：哦天哪，我的电脑里还有这东西？一些好学的人对 GPT 进行了解以后，进一步发现了我们的幕后功臣：UEFI。本期文章我们就来说说，硬盘和硬盘分区这点事。&lt;/p>
&lt;p>简单地说，硬盘分区是就使用分区编辑器（partition editor）将一个硬盘上划分几个独立的逻辑部分，盘片一旦划分成数个分区，不同类的目录与文件可以存储进不同的分区。越多分区，也就有更多不同的地方，可以将文件的性质区分得更细，按照更为细分的性质，存储在不同的地方以管理文件；但太多分区就成了麻烦。&lt;/p>
&lt;p>硬盘分区就像给一间空荡的房子划分出卧室，厨房，客厅等相互隔离的空间一样。主要是为了方面用户的使用。另一方面，通过合理的硬盘分区，有效保护系统盘空间，确实能够提高系统运行速度，再者，硬盘分区也可以有效地对数据进行保护。你当然可以不分区，只不过，当你面对越来越多的子目录，或者是越来越慢的 Windows，不得不费功夫去管理你的文件，或者重装 Windows 的时候，恐怕会悔不当初。 “不要把所有的鸡蛋放在同一个篮子里”这句至理名言在经济学以外的其他领域也同样是句警世恒言。&lt;/p>
&lt;p>在讲解 MBR 之前，有必要讲讲机械硬盘的一些相关概念，毕竟 MBR 作为 20 世纪最棒的磁盘管理方式，与机械硬盘可是联系紧密的&lt;/p>
&lt;p>（这样可以更好地理解后面的内容）。&lt;/p>
&lt;h1 id="机械硬盘原理">机械硬盘原理&lt;a class="td-heading-self-link" href="#%e6%9c%ba%e6%a2%b0%e7%a1%ac%e7%9b%98%e5%8e%9f%e7%90%86" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>机械硬盘由坚硬金属材料制成的涂以磁性介质的盘片，盘片两面称为盘面或扇面，都可以记录信息，由磁头对盘面进行操作（如果你有坏的硬盘，可以动手拆开看。嗯？为什么用坏的？用好的可能费钱……）一般用磁头号区分。结构特性决定了机械硬盘如果受到剧烈冲击（摔在地上或是勤奋的你想拆开学习），磁头与盘面可能产生的哪怕是轻微撞击都有可能报废。&lt;/p>
&lt;p>继续讲原理：假设磁头不动，硬盘旋转，那么磁头就会在磁盘表面画出一个圆形轨迹并将之磁化，数据就保存在这些磁化区中，称之为磁道，将每个磁道分段，一个弧段就是一个扇区。一个硬盘可以包含多个扇面，扇面同轴重叠放置，每个盘面磁道数相同，具有相同周长的磁道所形成的圆柱称之为柱面，柱面数与磁道数相等。如下图&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/kwiih4/1623075065699-cc31c470-bed5-45ba-95b5-1c56eafbfb57.png" alt="image.png">&lt;/p>
&lt;p>了解了这些，我们就可以对最初的硬盘地址管理方式作一个原理层面的了解：&lt;/p>
&lt;p>最初的寻址方式称为 CHS，在 LBA（Logical Block Address）概念诞生之前，由他负责管理磁盘地址。所谓 CHS 即柱面（cylinder），磁头（header），扇区（sector），通过这三个变量描述磁盘地址，需要明白的是，这里表示的已不是物理地址而是逻辑地址了。这种方法也称作是 LARGE 寻址方式。该方法下：&lt;/p>
&lt;ul>
&lt;li>硬盘容量=磁头数 × 柱面数 × 扇区数 × 扇区大小（一般为 512byte）。&lt;/li>
&lt;/ul>
&lt;p>后来，人们通过为每个扇区分配逻辑地址，以扇区为单位进行寻址，也就有了 LBA 寻址方式。但是为了保持与 CHS 模式的兼容，通过逻辑变换算法，可以转换为磁头/柱面/扇区三种参数来表示，和 LARGE 寻址模式一样，这里的地址也是逻辑地址了。（固态硬盘的存储原理虽然与机械硬盘不同，采用的是 flash 存储，但仍然使用 LBA 进行管理，此处不再详述。）&lt;/p>
&lt;p>科普到这里，我们可以试图去理解 MBR 分区了。现在我们来看看 MBR 分区的技术原理。&lt;/p>
&lt;h1 id="mbr-原理">MBR 原理&lt;a class="td-heading-self-link" href="#mbr-%e5%8e%9f%e7%90%86" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>MBR：Master Boot Record，主分区引导记录。最早在 1983 年在 IBM PC DOS 2.0 中提出。前面说过，每个扇区/区块都被分配了一个逻辑块地址，即 LBA，而引导扇区则是每个分区的第一扇区，而主引导扇区则是整个硬盘的第一扇区（主分区的第一个扇区）。MBR 就保存在主引导扇区中。另外，这个扇区里还包含了硬盘分区表 DPT（Disk Partition Table），和结束标志字（Magic number）。扇区总计 512 字节，MBR 占 446 字节（0000H - 01BDH），DPT 占据 64 个字节（01BEH - 01FDH），最后的 magic number 占 2 字节（01FEH – 01FFH）。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/kwiih4/1623075104446-267bee24-522c-4faa-9103-51ff02b02d91.png" alt="image.png">&lt;/p>
&lt;p>现在，我们来看一个 MBR 记录的实例：&lt;/p>
&lt;p>&lt;strong>80 01 01 00, 0B FE BF FC, 3F 00 00 00, 7E 86 BB 00&lt;/strong>&lt;/p>
&lt;p>其中， “80”是一个分区的激活标志，表示系统可引导；“01 01 00”表示分区开始的磁头号为 01，开始的扇区号为 01，开始的柱面号为 00；“0B”表示该分区的系统类型是 FAT32，其他比较常用的有 04(FAT16)、07(NTFS)；“FE BF FC”表示分区结束的磁头号为 254，分区结束的扇区号为 63、分区结束的柱面号为 764；“3F 00 00 00”表示首扇区的相对扇区号为 63；“7E 86 BB 00”表示总扇区数为 12289622。&lt;/p>
&lt;p>可以看到，在只分配 64 字节给 DPT 的情况下，每个分区项分别占用 16 个字节，因此只能记录四个分区信息，尽管后来为了支持更多的分区，引入了扩展分区及逻辑分区的概念。但每个分区项仍然用 16 个字节存储。能表示的最大扇区数为 FF FF,FF FFH，因此可管理的最大空间=总扇区数*扇区大小（512byte），也就是 2TB（由于硬盘制造商采用 1:1000 进行单位换算，因此也有 2.2TB 一说，别怪他们，他们不是程序员）。超过 2TB 以后的空间，不能分配地址，自然也就无法管理了。&lt;/p>
&lt;p>MBR 的诸多缺点使其应用大大受限。硬盘技术日新月异，硬盘容量突飞猛进（希捷将于今年开卖 60TB 固态硬盘），多出来的硬盘空间总不能晾着吧，于是，在刚诞生的 UEFI 规范下一起研发了新技术&lt;/p>
&lt;h1 id="gpt-原理">GPT 原理&lt;a class="td-heading-self-link" href="#gpt-%e5%8e%9f%e7%90%86" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>GPT 分区：全称为 Globally Unique Identifier Partition Table，也叫做 GUID 分区表，它是 UEFI 规范的一部分。由于硬盘容量的急速增长，MBR 的 2.2T 容量难以满足要求，而 UEFI BIOS 的推广也为 GPT 的实现打下了坚实的技术基础，GPT 应运而生，&lt;/p>
&lt;p>我们来看看 GPT 的结构图：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/kwiih4/1623075115463-8dca0892-772a-42b0-a682-6ce0fc9efc22.png" alt="image.png">&lt;/p>
&lt;p>等等，MBR 是不是走错片场了？答案当然是没有。这里的 P 意为 protective，PMBR 存在的意义就是，当不支持 GPT 的分区工具试图对硬盘进行操作时（例如 MS-DOS 和 Linux 的 fdisk 程序），它可以根据这份 PMBR 以传统方式启动，过程和 MBR+BIOS 完全一致，极大地提高了兼容性。而支持 GPT 的系统在检测 PMBR 后会直接跳到 GPT 表头读取分区表。和 MBR 类似，分区表中存储了某个分区的起始和结束位置及其文件系统属性信息，而分区才是实际存在的物理磁盘的一部分。&lt;/p>
&lt;p>GPT HDR：GPT 表头，如下图，主要定义了分区表中项目数及每项大小，还包含硬盘的容量信息。在 64 位的 Windows Server 2003 的机器上，最多可以创建 128 个分区，即分区表中保留了 128 个项，其中每个都是 128 字节。（也是 EFI 标准中的最低要求：分区表最小要有 16,384 字节）分区表头还记录了这块硬盘的 GUID，分区表头位置（总是 LBA1）和大小，也包含了备份分区表头和分区表的位置和大小信息（LBA-1~LBA-34）。同时还储存着它本身和分区表的 CRC32 校验。固件、引导程序和操作系统在启动时可以根据这个校验值来判断分区表是否出错，如果出错，可以使用软件从硬盘最后的备份 GPT 中恢复整个分区表，如果备份 GPT 也校验错误，硬盘将不可使用。具体内容如下表：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/kwiih4/1623075153084-e4d0873a-dbcf-4878-a1b4-522235fe8f3b.png" alt="image.png">&lt;/p>
&lt;p>Partition Table：分区表，包含分区的类型 GUID（如：EFI 系统分区的 GUID 类型是{C12A7328-F81F-11D2-BA4B-00A0C93EC93B}），名称，起始终止位置，该分区的 GUID 以及分区属性。其内容如下：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/kwiih4/1623075157132-b6dd078b-59ca-429a-b6f2-a93d16d9b553.png" alt="image.png">&lt;/p>
&lt;p>Microsoft 对分区属性做了更详细的区分，目前有：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/kwiih4/1623075161478-4a21cc5d-b761-474a-a545-aff2fb7d0f22.png" alt="image.png">&lt;/p>
&lt;p>相较于 MBR，GPT 具有以下优点：&lt;/p>
&lt;ol>
&lt;li>得益于 LBA 提升至 64 位，以及分区表中每项 128 位设定，GPT 可管理的空间近乎无限大，假设一个扇区大小仍为 512 字节，可表示扇区数为，算下来，可管理的硬盘容量=18EB(1EB=1024PB=1,048,576TB)，2T 在它面前完全不在话下。按目前的硬盘技术来看，确实近乎无限，不过，以后的事谁知道呢。&lt;/li>
&lt;li>分区数量几乎没有限制，由于可在表头中设置分区数量的大小，如果愿意，设置个分区也可以（有人愿意管理这么多分区吗），不过，目前 windows 仅支持最大 128 个分区。&lt;/li>
&lt;li>自带保险，由于在磁盘的首尾部分各带一个 GPT 表头，任何一个受到破坏后都可以通过另一份恢复，极大地提高了磁盘的抗性（两个一起坏的请出门买彩票）。&lt;/li>
&lt;li>循环冗余检验值针对关键数据结构而计算，提高了数据崩溃的检测几率。&lt;/li>
&lt;li>尽管目前分区类型不超过百数（十数也没有吧。），GPT 仍提供了 16 字节的 GUID 来标识分区类型，使其更不容易产生冲突。&lt;/li>
&lt;li>每个分区都可以拥有一个特别的名字，最长 72 字节，足够写一首七律了。满足你的各种奇葩起名需求。&lt;/li>
&lt;/ol>
&lt;p>完美支持 UEFI，毕竟它就是 UEFI 规范的衍生品。在将来全行业 UEFI 的情境下，GPT 必将更快淘汰 MBR。&lt;/p>
&lt;h1 id="其他">其他&lt;a class="td-heading-self-link" href="#%e5%85%b6%e4%bb%96" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>接下来进入加料时间，更详细的讲述硬盘知识。&lt;/p>
&lt;p>前面说到过，磁化的弧段称作一个扇区，一个扇区大小 512B，但硬盘在进行文件操作时并非以扇区为单位，而是——簇，“簇”是系统进行分配的最小单位，一个簇可以包含多个扇区，假设目前一个簇包含 4 个扇区，簇大小为 2KB，一个文件大小恰为 2KB，则占用了簇的所有可用空间，即便你有一个 1B 大小的文件需要保存，那么你占用的空间也是一个簇，簇内其他空间不可读写。&lt;/p>
&lt;p>而对簇的大小进行管理的就是文件系统：&lt;/p>
&lt;p>FAT16/FAT32: 早期的 MS-DOS 和 WIN95 操作系统中最常见的硬盘分区格式。一个簇最小为 512 个字节，其大小可以成倍增长，最大为 32K，系统为每个簇分配唯一的索引号——一个 16 位二进制数来标识。因为 16 位二进制数最大为 65536，所以 FAT 分区所拥有的簇的数量不可能超过 65536 个。这正是 FAT 分区大小不能超过 2GB 的原因。FAT16 的继任者——FAT32 与其原理基本相同，相比前任优势仅在于分区可以大于 2GB，但不能存储大于 4GB 的单个文件，看看现在一部 BD 的电影都要 3,4 个 G，显然不能满足时代的需求，被淘汰的很快。&lt;/p>
&lt;p>更多 FAT 文件系统知识：FAT 文件系统与 UEFI - 知乎专栏&lt;/p>
&lt;p>NTFS 文件系统相比 FAT，最大优点在于支持文件加密，通过采用日志式文件系统，详细记录磁盘的所有读写操作，提高了数据和系统的安全性，另一点则是突破了 4GB 大小限制。也是目前机械硬盘上的分区主流。不过对于目前越来越亲民的的 flash 存储，过多的操作记录对存储介质造成了较大的负担，同样的存取操作，NTFS 下的读写次数就会比 FAT32 下来得多，造成了寿命较短的缺陷。因此针对移动存储设备和固态硬盘，推出了 exFAT 文件系统。&lt;/p>
&lt;p>exFAT：分区大小和单文件大小最大可达 16EB（16×1024×1024TB）；簇大小非 常灵活，最小 512B，最高达 32MB；采用了剩余空间分配表，空间利用率更高；同一目录下最大文件数可达 65536 个。其特性未必强于 NTFS，主要是针对 flash 存储设备进行了优化（SSD，U 盘），传统硬盘不能格式化为该格式。&lt;/p>
&lt;p>要是到现在你对扇区，簇，文件系统，分区几个名词有点混淆，不妨看看下图：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/kwiih4/1623075174204-ac88087e-ef89-4716-878b-7383f3a1db7f.png" alt="image.png">&lt;/p>
&lt;p>有人会问，图中的怎么突然出现了 4k 扇区，而且为什么下面又包含的是 8 个 512b 的扇区呢？边上的伪装是啥意思？恭喜你，你已经抓住了近年来的硬盘发展潮流。&lt;/p>
&lt;p>扇区的大小虽然约定俗成，但其实是可以更改的，开始于 2009 年晚期，硬盘制造商正在从传统的 512 字节扇区迁移到更大、更高效的 4096 字节扇区，国际硬盘设备与材料协会（International Disk Drive Equipment and&lt;/p>
&lt;p>Materials Association，IDEMA）将之称为高级格式化，也就是现在常说的“4K 扇区”。&lt;/p>
&lt;p>多年来，硬盘行业一直采用 512 字节扇区。然而，随着硬盘容量的不断增长，扇区大小日渐成为提高硬盘容量和纠错效率方面的制约。扇区分辨率（扇区大小和总存储大小的百分比）越来越低，尽管在管理小型离散数据时，分辨率越低越好。但现代的计算系统中多的是大型数据块，一般远比传统 512 字节扇区大小要大得多。另外，随着区域密度的增加，小型 512 字节扇区在硬盘表面上占用的空间也将越来越小。硬盘扇区中的数据占据的空间越小，错误纠正就会变得越困难，因为同样大小的介质缺陷对总体数据负载损害的百分比更高，所以就需要更大的纠错强度。现在，硬盘开始通过先进的区域密度来提高错误纠正的上限。因此，为了改善错误纠正和实现格式化效率，提高扇区大小是硬盘行业内的普遍诉求。&lt;/p>
&lt;p>不过，由于计算机系统的缓慢发展，多数仍将扇区假定为 512 字节，因此就产生了 4K 对齐问题。即使物理硬盘分区与计算机使用的逻辑分区对齐，保证硬盘读写效率。&lt;/p>
&lt;p>有 4k 对齐当然就有 4k 对不齐。这个锅，或许应该甩给操作系统。硬盘厂商为了保证与操作系统的兼容性，将新标准的&amp;quot;4K 扇区&amp;quot;的硬盘模拟成扇区为 512B 的硬盘，问题出现在此时：当在一些特殊情况下格式化的系统（比如用 ghost11.5 以下版本），会默认定义为 4096 字节大小为一个簇，这没毛病，但是，由于其引导区只占用了不多不少 63 个扇区，真正的文件系统在 63 号扇区之后，&lt;/p>
&lt;p>我们可以算出前 63 个扇区大小为：63*512B = 32256B。&lt;/p>
&lt;p>63 个扇区占用簇个数：32256B/4096B=7.875 簇。&lt;/p>
&lt;p>从第 64 个扇区开始，每个簇都会跨越两个物理单元，占据前一个单元的一小部分和后一个单元的一大部分，前面说过，系统文件操作以簇为单位，如果每个簇都要用到两个扇区，势必拖累读写速度。也就产生了“4k 对不齐”的概念，“4K 对齐”要做的事就是将硬盘的模拟扇区(512B)对齐到的 8 整数倍个“实际”4K 扇区，即 8*4096 = 32768B，使其正好跨过 63 扇区的特性，从第 64 个扇区对齐。&lt;/p>
&lt;p>其实不仅是操作系统，一些广泛使用的软件程序也可能引发 4k 对不齐现象。因此，对齐技术的存在确有其必要性。尽管 4k 必然取代 512b，但冰冻三尺非一日之寒，全行业仍需要一个时间来进行技术的全面推广。&lt;/p>
&lt;p>后记
一些经常被问到的关于 GPT 的问题：
1. Q：怎么知道我的硬盘是 MBR 的还是 GPT 的？
A： windows 自带个非常好用的工具-diskpart，简单几条命令即可，如图：&lt;/p>
&lt;p>2. Q：如何将 GPT 转换为 MBR？
A: 还是 diskpart,(警告：请先备份内容），通过 convert mbr 指令&lt;/p>
&lt;p>不过我还是建议你不要这样做，毕竟 MBR 是个被淘汰的技术。在转换之前要删除所有分区或者直接用 clean。如果不想丢失内容，推荐使用 AOMEI Partition Assistant Standard，它是个免费软件。非常好用。为谨慎起见还是建议提前备份内容。&lt;/p>
&lt;p>3.\ Q：GPT 真好，我想立刻使用，可是如何将 MBR 转换为 GPT？
A：这是个好主意，答案还是 Diskpart&lt;/p>
&lt;p>在转换之前要删除所有分区或者直接用 clean。如果不想丢失内容，我推荐使用 AOMEI Partition Assistant Standard，它是个免费软件。非常好用。为谨慎起见还是建议提前备份内容。&lt;/p></description></item><item><title>Docs: Raid</title><link>https://desistdaydream.github.io/docs/0.%E8%AE%A1%E7%AE%97%E6%9C%BA/Disk/Raid/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/0.%E8%AE%A1%E7%AE%97%E6%9C%BA/Disk/Raid/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/RAID">Wiki, Raid&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zh.wikipedia.org/wiki/RAID">Wiki 中文，Raid&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Erasure_code">Wiki, Erasure code&lt;/a>(纠删码)&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Parity_bit">Wiki, Parity bit&lt;/a>(奇偶校验)&lt;/li>
&lt;li>&lt;a href="https://support.huawei.com/enterprise/zh/doc/EDOC1000163568/26751928">https://support.huawei.com/enterprise/zh/doc/EDOC1000163568/26751928&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Redundant array of independent disks(独立磁盘冗余阵列，简称 RAID)&lt;/strong> 是一种存储虚拟化技术，可以将多个 &lt;a href="https://desistdaydream.github.io/docs/0.%E8%AE%A1%E7%AE%97%E6%9C%BA/Disk/Disk.md">Disk&lt;/a>(物理磁盘) 组合成一个或多个 Logical unit(逻辑单元) 以达到数据冗余、提高性能或两者兼得的目的。&lt;/p>
&lt;p>数据以多种方式之一分布在驱动器上，称为 RAID 级别，具体取决于所需的冗余和性能级别。不同的方案或数据分布布局由单词“RAID”命名，后跟一个数字，例如 RAID 0 或 RAID 1。每个方案或 RAID 级别在关键目标之间提供不同的平衡：可靠性、可用性、性能和容量。高于 RAID 0 的 RAID 级别可针对不可恢复的扇区读取错误以及整个物理驱动器的故障提供保护。&lt;/p>
&lt;p>Raid 5 等的奇偶校验机制，是纠删码的最佳实践&lt;/p>
&lt;h1 id="虚拟磁盘的读写策略">虚拟磁盘的读写策略&lt;a class="td-heading-self-link" href="#%e8%99%9a%e6%8b%9f%e7%a3%81%e7%9b%98%e7%9a%84%e8%af%bb%e5%86%99%e7%ad%96%e7%95%a5" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>在创建虚拟磁盘时，会需要对其数据读写策略进行定义，以规范后续虚拟磁盘运行过程中数据的读写方式。&lt;/p>
&lt;h2 id="数据读策略">数据读策略&lt;a class="td-heading-self-link" href="#%e6%95%b0%e6%8d%ae%e8%af%bb%e7%ad%96%e7%95%a5" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>在配置界面中一般体现为“Read Policy”。RAID 卡支持如下两种数据读策略：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Read-ahead(预读取)&lt;/strong> # 在配置界面中一般有“Always Read Ahead”、“Read Ahead”、“Ahead”等配置选项。使用此策略后，从虚拟磁盘中读取所需数据时，会把后续数据同时读出放在 &lt;a href="https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/Cache.md">Cache&lt;/a> 中，用户随后访问这些数据时可以直接在 Cache 中命中，将减少磁盘寻道操作，节省响应时间，提高了数据读取速度。要使用该策略，要求 RAID 控制卡支持数据掉电保护功能，但如果此时超级电容异常，可能导致数据丢失。&lt;/li>
&lt;li>&lt;strong>No-Read-Ahead(非预读取)&lt;/strong> # 使用此策略后，RAID 卡接收到数据读取命令时，才从虚拟磁盘读取数据，不会做预读取的操作。&lt;/li>
&lt;/ul>
&lt;h2 id="数据写策略">数据写策略&lt;a class="td-heading-self-link" href="#%e6%95%b0%e6%8d%ae%e5%86%99%e7%ad%96%e7%95%a5" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>在配置界面中一般体现为“Write Policy”。RAID 卡支持如下三种数据写策略：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Write Back(回写)&lt;/strong> # 在配置界面中一般体现为“Write Back”等字样。使用此策略后，需要向虚拟磁盘写数据时，会直接写入 Cache 中，当写入的数据积累到一定程度，RAID 卡才将数据刷新到虚拟磁盘，这样不但实现了批量写入，而且提升了数据写入的速度。当控制器 Cache 收到所有的传输数据后，将给主机返回数据传输完成信号。要使用该策略，要求 RAID 卡支持数据掉电保护功能，但如果此时超级电容异常，可能导致数据丢失。&lt;/li>
&lt;li>&lt;strong>Write Through(直写)&lt;/strong> # 在配置界面中一般有“Write Through”等选项。使用此策略后，RAID 卡向虚拟磁盘直接写入数据，不经过 Cache。当磁盘子系统接收到所有传输数据后，控制器将给主机返回数据传输完成信号。此种方式不要求 RAID 卡支持数据掉电保护功能，即使超级电容故障，也无影响。该写策略的缺点是写入速度较低。。&lt;/li>
&lt;li>与 BBU 相关的回写 # 在配置界面中一般有“Write Back with BBU”等选项。使用此策略后，当 RAID 卡 BBU 在位且状态正常时，RAID 卡到虚拟磁盘的写操作会经过 Cache 中转（即回写方式）；当 RAID 卡 BBU 不在位或 BBU 故障时，RAID 卡到虚拟磁盘的写操作会自动切换为不经过 Cache 的直接写入（即写通方式）。&lt;/li>
&lt;/ul>
&lt;h1 id="阵列卡">阵列卡&lt;a class="td-heading-self-link" href="#%e9%98%b5%e5%88%97%e5%8d%a1" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="jbod">JBOD&lt;a class="td-heading-self-link" href="#jbod" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Non-RAID_drive_architectures">Wiki, Non-RAID_drive_architectures&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Just a Bunch Of Disks(只是一堆磁盘，简称 JBOD)&lt;/strong> 是阵列卡可以提供的一种透传模式，让硬盘可以直接透过阵列卡对系统直接提供本身的存储能力。还可以将多个物理硬盘组成单个逻辑磁盘，但是&lt;strong>这并不是一种 RAID&lt;/strong>，也不提供数据冗余，仅仅是将这些硬盘从头到尾串联起来而已。&lt;/p>
&lt;p>JBOD 在很多厂家对外的口语描述中，称为&lt;strong>直通模式&lt;/strong>。意味着硬盘直通到系统，中间不做任何处理。&lt;/p>
&lt;h2 id="h3c-阵列配置">H3C 阵列配置&lt;a class="td-heading-self-link" href="#h3c-%e9%98%b5%e5%88%97%e9%85%8d%e7%bd%ae" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;a href="http://www.h3c.com/cn/d_202201/1526857_30005_0.htm#_Toc92721209">H460&amp;amp;P460&amp;amp;P2404&amp;amp;P4408 系列&lt;/a> 阵列卡&lt;/p></description></item><item><title>Docs: 关于外存你需要了解的</title><link>https://desistdaydream.github.io/docs/0.%E8%AE%A1%E7%AE%97%E6%9C%BA/Disk/%E5%85%B3%E4%BA%8E%E5%A4%96%E5%AD%98%E4%BD%A0%E9%9C%80%E8%A6%81%E4%BA%86%E8%A7%A3%E7%9A%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/0.%E8%AE%A1%E7%AE%97%E6%9C%BA/Disk/%E5%85%B3%E4%BA%8E%E5%A4%96%E5%AD%98%E4%BD%A0%E9%9C%80%E8%A6%81%E4%BA%86%E8%A7%A3%E7%9A%84/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>原文链接：&lt;a href="https://zhuanlan.zhihu.com/p/333965692">https://zhuanlan.zhihu.com/p/333965692&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Magnetic_storage">Wiki, Magnetic Storage(磁存储)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Optical_storage">Wiki, Optical Storage(光存储)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Magnetic_tape_data_storage">Wiki, Tape Storage(磁带存储)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>上一节对内存的物理特性进行了了解，这篇打算对上一篇提到的外存进一步讲解。
&lt;strong>外存全称为外部存储器&lt;/strong>，它指的是除计算机内存及 CPU 缓存以外的储存器。外存是相对内存来说的。计算机不能对外存进行直接寻址，简单的说，就是给外存一个物理地址的话它是处理不了的。&lt;strong>由于内存具有掉电后数据无法保存的特性，所以计算机通常需要配备外存来保持数据。&lt;/strong>
外部存储器按照存储介质种类可以划分为&lt;strong>光、磁性、半导体&lt;/strong>这三大类。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>光存储&lt;/strong>：比较常见的是 CD、DVD、蓝光。&lt;/li>
&lt;li>&lt;strong>磁性存储&lt;/strong>：比较常见的是磁带、软盘、硬盘。&lt;/li>
&lt;li>&lt;strong>半导体存储&lt;/strong>：这个类型的存储比较多，比如上一篇说的内存，闪存 SSD、各种 ROM 等。&lt;/li>
&lt;/ul>
&lt;p>下面对这三大类的外存分别都拿一个典型出来了解一下。&lt;/p>
&lt;h2 id="optical-storage光存储">Optical Storage(光存储)&lt;a class="td-heading-self-link" href="#optical-storage%e5%85%89%e5%ad%98%e5%82%a8" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/rcmzws/1625452479311-3b0d7cc2-2eed-4516-81dc-93e6f6933295.jpg" alt="">
蓝光，英文 &lt;strong>Blu-ray Disc&lt;/strong>，主要用于存储高清格式的音视频文件，其物理结构与 DVD 类似。为什么叫蓝光呢？因为用于&lt;strong>刻录、读取光盘的激光是蓝紫激光&lt;/strong>，一般的 DVD 使用的激光是红激光。蓝紫激光的波长比较短，刻录的孔径就更小，所以可以刻录在光盘上的信息就更多，通常能比普通 DVD 多存储 6 到 10 倍的信息。
目前来说，每个蓝光碟片所能存储的信息比较有限，根据了解大概能到 400GB 左右。虽然蓝光碟片能存储的信息较少，但是它能&lt;strong>保存很久，50 年往上走&lt;/strong>。不知道大家有没有了解过 GitHub 的北极代码库计划，GitHub 将优秀的代码库以二维码的形式存放到胶片中，并放到挪威的一个废弃煤矿冻土区深处进行存储。注意：它用的不是常见的磁盘，也不是用的 SSD，也不是用的蓝光 DVD，而是胶片！因为&lt;strong>胶片的寿命可以长达 1000 年&lt;/strong>，而我们常见的磁盘也不过几年寿命而已。&lt;/p>
&lt;h2 id="magnetic-storage磁存储">Magnetic Storage(磁存储)&lt;a class="td-heading-self-link" href="#magnetic-storage%e7%a3%81%e5%ad%98%e5%82%a8" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/rcmzws/1625452479450-98dd8455-c2a8-4490-b197-6040f5c1248e.jpeg" alt="">
磁盘这种类型是我们目前&lt;strong>最常见也用的最多的存储介质&lt;/strong>。磁盘顾名思义就是用磁性物质制作的坚硬旋转盘片，它的物理结构一般主要有&lt;strong>磁头、盘片、电动机及主控芯片&lt;/strong>等，&lt;strong>盘片是它的主要存储组件&lt;/strong>。盘片上覆盖着一层薄薄的磁性物质，所有数据都通过磁性物质进行存储。它的读写原理是：&lt;strong>写数据时，由磁头通过电磁流改变盘片上的磁性材料的极性，比如由正极变负极，或者由负极变正极，而正极对应的是数据 1，负极对应的是 0，所以一串 0 或 1 的数据就这样通过磁材料的极性间接表达了出来；而读数据时，磁头经过盘片上方时会被磁性材料的极性改变电气信号，通过极性影响了电的 1 或 0 表达，所以也间接的将存储在磁盘上的数据表达出来了。&lt;/strong>
磁盘的数据接口有如下几种：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>IDE&lt;/strong>：也叫 ATA，这种接口的速度不快，而且抗干扰性差，现在已逐渐淘汰。&lt;/li>
&lt;li>&lt;strong>SATA&lt;/strong>：串行的 ATA。这种接口抗干扰性强，速度较快，一般可以达到 300MB/s 以上。我们常用的台式机就是这种接口。&lt;/li>
&lt;li>&lt;strong>SCSI&lt;/strong>：小型机系统接口。一般用于个人工作站和服务器。&lt;/li>
&lt;li>&lt;strong>SAS&lt;/strong>：新一代的 SCSI 技术，可兼容 SATA，速度可达 12Gb/s。&lt;/li>
&lt;li>&lt;strong>FC&lt;/strong>：光纤通道接口，具有热插拔、速度快、价格高的特性，一般只用于高端服务器领域。&lt;/li>
&lt;/ul>
&lt;p>目前磁盘能存储的数据较多，而且&lt;strong>价格便宜&lt;/strong>，在外存存储介质里占了半壁江山。但是磁盘由于它的物理特性的原因&lt;strong>特别容易坏&lt;/strong>，一不小心摔它一下可能就会损坏里面的盘片或磁头，故障率特别高，而且即使不摔它，它的&lt;strong>寿命也不长&lt;/strong>，一般&lt;strong>三四年&lt;/strong>就需要换一批新磁盘。很多数据中心里面的存储服务器每隔三四年的时间就得更换一批新的磁盘，即使磁盘本身并没有什么坏道，这样看来其实磁盘也算是一种快消品。&lt;/p>
&lt;h2 id="ssd半导体存储">SSD（半导体存储）&lt;a class="td-heading-self-link" href="#ssd%e5%8d%8a%e5%af%bc%e4%bd%93%e5%ad%98%e5%82%a8" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/rcmzws/1625452479259-716e1a53-7f56-4e64-b509-942b5e28b21b.jpeg" alt="">
随着技术的发展，以前很贵的 SSD 也越来越被大众所消费的起。&lt;strong>SSD 全称为 Solid State Drive，译为固态硬盘&lt;/strong>。与磁盘不同的是，磁盘是用电动机驱动磁头来存取数据的，SSD 是用电来驱动半导体存取数据的，所以与磁盘相比，SSD 具有优秀的随机访问能力，而且两者的 IO 差距相当大，&lt;strong>可达 500 MB/s - 3000 MB/s&lt;/strong>，毕竟电比物理运动的磁头快多了。
SSD 的组成部件有&lt;strong>主控芯片、缓存芯片、闪存颗粒、PCB 板&lt;/strong>，主要的存储部件是闪存颗粒。闪存颗粒有如下几种：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>SLC：Single-Level Cell&lt;/strong>，单层单元。具有 100K 次擦写寿命。它只能表达 0/1 这两种数据。&lt;/li>
&lt;li>&lt;strong>MLC：Multi-Level Cell&lt;/strong>，多层单元，但是一般指的是两层单元。3000-10000 次擦写寿命。它能表达 00/01/10/11 四种数据。&lt;/li>
&lt;li>&lt;strong>TLC：Trinary-Level Cell&lt;/strong>，三层单元。500-1000 次擦写寿命。依次类推，它能表达 8 种数据。&lt;/li>
&lt;li>&lt;strong>QLC：Quad-Level Cell&lt;/strong>，四层单元。这个擦写寿命比较可怜。它能表达 16 种数据。&lt;/li>
&lt;/ul>
&lt;p>但是在读写速度方面：&lt;strong>SLC &amp;gt; MLC &amp;gt; TLC &amp;gt; QLC&lt;/strong>，价格也是： &lt;strong>SLC &amp;gt; MLC &amp;gt; TLC &amp;gt; QLC&lt;/strong>。
为什么会有寿命长短的区别呢？我从网上找来了一些资料：&lt;strong>闪存单元的每次擦写都会导致闪存单元里面的硅氧化物的损耗，一旦这个氧化物损耗完后这个闪存单元就会寿终正寝。单个闪存单元的层级越多加载到它上面的控制电压就需要更久，所以导致氧化物的损耗更大，寿命也就越短。&lt;/strong>
SSD 根据插头接口的不同也可以划分为：SATA SSD、mSATA SSD、M.2 SSD、PCIe SSD。速度一般是 SATA SSD &amp;lt; mSATA SSD &amp;lt; M.2 SSD &amp;lt; PCIe SSD。
关于磁盘和 SSD 还有很多特性没有讲，比如磁盘的寻道、SSD 的读写原理以及写放大等，这些会在接下来的&lt;strong>文件系统模块&lt;/strong>进行更加详细的介绍。&lt;/p>
&lt;h2 id="magnetic-tape-storage磁带存储">Magnetic Tape Storage(磁带存储)&lt;a class="td-heading-self-link" href="#magnetic-tape-storage%e7%a3%81%e5%b8%a6%e5%ad%98%e5%82%a8" aria-label="Heading self-link">&lt;/a>&lt;/h2></description></item></channel></rss>