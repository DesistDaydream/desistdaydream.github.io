<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Disk on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/0.%E8%AE%A1%E7%AE%97%E6%9C%BA/Disk/</link><description>Recent content in Disk on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/0.%E8%AE%A1%E7%AE%97%E6%9C%BA/Disk/index.xml" rel="self" type="application/rss+xml"/><item><title>Disk</title><link>https://desistdaydream.github.io/docs/0.%E8%AE%A1%E7%AE%97%E6%9C%BA/Disk/Disk/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/0.%E8%AE%A1%E7%AE%97%E6%9C%BA/Disk/Disk/</guid><description>概述 参考：
对很多 PC 的使用者来说，UEFI 就像是一颗深水炸弹，表面风平浪静，暗地里却早已引发了巨大的震动。多亏了 Microsoft 的强横，预装 WIN8 的电脑指定需要 GPT 分区这一举措，让人们不禁发出感慨：哦天哪，我的电脑里还有这东西？一些好学的人对 GPT 进行了解以后，进一步发现了我们的幕后功臣：UEFI。本期文章我们就来说说，硬盘和硬盘分区这点事。
简单地说，硬盘分区是就使用分区编辑器（partition editor）将一个硬盘上划分几个独立的逻辑部分，盘片一旦划分成数个分区，不同类的目录与文件可以存储进不同的分区。越多分区，也就有更多不同的地方，可以将文件的性质区分得更细，按照更为细分的性质，存储在不同的地方以管理文件；但太多分区就成了麻烦。
硬盘分区就像给一间空荡的房子划分出卧室，厨房，客厅等相互隔离的空间一样。主要是为了方面用户的使用。另一方面，通过合理的硬盘分区，有效保护系统盘空间，确实能够提高系统运行速度，再者，硬盘分区也可以有效地对数据进行保护。你当然可以不分区，只不过，当你面对越来越多的子目录，或者是越来越慢的 Windows，不得不费功夫去管理你的文件，或者重装 Windows 的时候，恐怕会悔不当初。 “不要把所有的鸡蛋放在同一个篮子里”这句至理名言在经济学以外的其他领域也同样是句警世恒言。
在讲解 MBR 之前，有必要讲讲机械硬盘的一些相关概念，毕竟 MBR 作为 20 世纪最棒的磁盘管理方式，与机械硬盘可是联系紧密的
（这样可以更好地理解后面的内容）。
机械硬盘原理 机械硬盘由坚硬金属材料制成的涂以磁性介质的盘片，盘片两面称为盘面或扇面，都可以记录信息，由磁头对盘面进行操作（如果你有坏的硬盘，可以动手拆开看。嗯？为什么用坏的？用好的可能费钱……）一般用磁头号区分。结构特性决定了机械硬盘如果受到剧烈冲击（摔在地上或是勤奋的你想拆开学习），磁头与盘面可能产生的哪怕是轻微撞击都有可能报废。
继续讲原理：假设磁头不动，硬盘旋转，那么磁头就会在磁盘表面画出一个圆形轨迹并将之磁化，数据就保存在这些磁化区中，称之为磁道，将每个磁道分段，一个弧段就是一个扇区。一个硬盘可以包含多个扇面，扇面同轴重叠放置，每个盘面磁道数相同，具有相同周长的磁道所形成的圆柱称之为柱面，柱面数与磁道数相等。如下图
了解了这些，我们就可以对最初的硬盘地址管理方式作一个原理层面的了解：
最初的寻址方式称为 CHS，在 LBA（Logical Block Address）概念诞生之前，由他负责管理磁盘地址。所谓 CHS 即柱面（cylinder），磁头（header），扇区（sector），通过这三个变量描述磁盘地址，需要明白的是，这里表示的已不是物理地址而是逻辑地址了。这种方法也称作是 LARGE 寻址方式。该方法下：
硬盘容量=磁头数 × 柱面数 × 扇区数 × 扇区大小（一般为 512byte）。 后来，人们通过为每个扇区分配逻辑地址，以扇区为单位进行寻址，也就有了 LBA 寻址方式。但是为了保持与 CHS 模式的兼容，通过逻辑变换算法，可以转换为磁头/柱面/扇区三种参数来表示，和 LARGE 寻址模式一样，这里的地址也是逻辑地址了。（固态硬盘的存储原理虽然与机械硬盘不同，采用的是 flash 存储，但仍然使用 LBA 进行管理，此处不再详述。）
科普到这里，我们可以试图去理解 MBR 分区了。现在我们来看看 MBR 分区的技术原理。
MBR 原理 MBR：Master Boot Record，主分区引导记录。最早在 1983 年在 IBM PC DOS 2.</description></item><item><title>Raid</title><link>https://desistdaydream.github.io/docs/0.%E8%AE%A1%E7%AE%97%E6%9C%BA/Disk/Raid/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/0.%E8%AE%A1%E7%AE%97%E6%9C%BA/Disk/Raid/</guid><description>概述 参考：
Wiki, Raid Wiki 中文，Raid Wiki, Erasure code(纠删码) Wiki, Parity bit(奇偶校验) https://support.huawei.com/enterprise/zh/doc/EDOC1000163568/26751928 Redundant array of independent disks(独立磁盘冗余阵列，简称 RAID) 是一种存储虚拟化技术，可以将多个 Disk(物理磁盘) 组合成一个或多个 Logical unit(逻辑单元) 以达到数据冗余、提高性能或两者兼得的目的。
数据以多种方式之一分布在驱动器上，称为 RAID 级别，具体取决于所需的冗余和性能级别。不同的方案或数据分布布局由单词“RAID”命名，后跟一个数字，例如 RAID 0 或 RAID 1。每个方案或 RAID 级别在关键目标之间提供不同的平衡：可靠性、可用性、性能和容量。高于 RAID 0 的 RAID 级别可针对不可恢复的扇区读取错误以及整个物理驱动器的故障提供保护。
Raid 5 等的奇偶校验机制，是纠删码的最佳实践
虚拟磁盘的读写策略 在创建虚拟磁盘时，会需要对其数据读写策略进行定义，以规范后续虚拟磁盘运行过程中数据的读写方式。
数据读策略 在配置界面中一般体现为“Read Policy”。RAID 卡支持如下两种数据读策略：
Read-ahead(预读取) # 在配置界面中一般有“Always Read Ahead”、“Read Ahead”、“Ahead”等配置选项。使用此策略后，从虚拟磁盘中读取所需数据时，会把后续数据同时读出放在 Cache 中，用户随后访问这些数据时可以直接在 Cache 中命中，将减少磁盘寻道操作，节省响应时间，提高了数据读取速度。要使用该策略，要求 RAID 控制卡支持数据掉电保护功能，但如果此时超级电容异常，可能导致数据丢失。 No-Read-Ahead(非预读取) # 使用此策略后，RAID 卡接收到数据读取命令时，才从虚拟磁盘读取数据，不会做预读取的操作。 数据写策略 在配置界面中一般体现为“Write Policy”。RAID 卡支持如下三种数据写策略：
Write Back(回写) # 在配置界面中一般体现为“Write Back”等字样。使用此策略后，需要向虚拟磁盘写数据时，会直接写入 Cache 中，当写入的数据积累到一定程度，RAID 卡才将数据刷新到虚拟磁盘，这样不但实现了批量写入，而且提升了数据写入的速度。当控制器 Cache 收到所有的传输数据后，将给主机返回数据传输完成信号。要使用该策略，要求 RAID 卡支持数据掉电保护功能，但如果此时超级电容异常，可能导致数据丢失。 Write Through(直写) # 在配置界面中一般有“Write Through”等选项。使用此策略后，RAID 卡向虚拟磁盘直接写入数据，不经过 Cache。当磁盘子系统接收到所有传输数据后，控制器将给主机返回数据传输完成信号。此种方式不要求 RAID 卡支持数据掉电保护功能，即使超级电容故障，也无影响。该写策略的缺点是写入速度较低。。 与 BBU 相关的回写 # 在配置界面中一般有“Write Back with BBU”等选项。使用此策略后，当 RAID 卡 BBU 在位且状态正常时，RAID 卡到虚拟磁盘的写操作会经过 Cache 中转（即回写方式）；当 RAID 卡 BBU 不在位或 BBU 故障时，RAID 卡到虚拟磁盘的写操作会自动切换为不经过 Cache 的直接写入（即写通方式）。 阵列卡 JBOD 参考：</description></item><item><title>关于外存你需要了解的</title><link>https://desistdaydream.github.io/docs/0.%E8%AE%A1%E7%AE%97%E6%9C%BA/Disk/%E5%85%B3%E4%BA%8E%E5%A4%96%E5%AD%98%E4%BD%A0%E9%9C%80%E8%A6%81%E4%BA%86%E8%A7%A3%E7%9A%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/0.%E8%AE%A1%E7%AE%97%E6%9C%BA/Disk/%E5%85%B3%E4%BA%8E%E5%A4%96%E5%AD%98%E4%BD%A0%E9%9C%80%E8%A6%81%E4%BA%86%E8%A7%A3%E7%9A%84/</guid><description>概述 原文链接：https://zhuanlan.zhihu.com/p/333965692
参考：
Wiki, Magnetic Storage(磁存储) Wiki, Optical Storage(光存储) Wiki, Tape Storage(磁带存储) 上一节对内存的物理特性进行了了解，这篇打算对上一篇提到的外存进一步讲解。 外存全称为外部存储器，它指的是除计算机内存及 CPU 缓存以外的储存器。外存是相对内存来说的。计算机不能对外存进行直接寻址，简单的说，就是给外存一个物理地址的话它是处理不了的。由于内存具有掉电后数据无法保存的特性，所以计算机通常需要配备外存来保持数据。 外部存储器按照存储介质种类可以划分为光、磁性、半导体这三大类。
光存储：比较常见的是 CD、DVD、蓝光。 磁性存储：比较常见的是磁带、软盘、硬盘。 半导体存储：这个类型的存储比较多，比如上一篇说的内存，闪存 SSD、各种 ROM 等。 下面对这三大类的外存分别都拿一个典型出来了解一下。
Optical Storage(光存储) 蓝光，英文 Blu-ray Disc，主要用于存储高清格式的音视频文件，其物理结构与 DVD 类似。为什么叫蓝光呢？因为用于刻录、读取光盘的激光是蓝紫激光，一般的 DVD 使用的激光是红激光。蓝紫激光的波长比较短，刻录的孔径就更小，所以可以刻录在光盘上的信息就更多，通常能比普通 DVD 多存储 6 到 10 倍的信息。 目前来说，每个蓝光碟片所能存储的信息比较有限，根据了解大概能到 400GB 左右。虽然蓝光碟片能存储的信息较少，但是它能保存很久，50 年往上走。不知道大家有没有了解过 GitHub 的北极代码库计划，GitHub 将优秀的代码库以二维码的形式存放到胶片中，并放到挪威的一个废弃煤矿冻土区深处进行存储。注意：它用的不是常见的磁盘，也不是用的 SSD，也不是用的蓝光 DVD，而是胶片！因为胶片的寿命可以长达 1000 年，而我们常见的磁盘也不过几年寿命而已。
Magnetic Storage(磁存储) 磁盘这种类型是我们目前最常见也用的最多的存储介质。磁盘顾名思义就是用磁性物质制作的坚硬旋转盘片，它的物理结构一般主要有磁头、盘片、电动机及主控芯片等，盘片是它的主要存储组件。盘片上覆盖着一层薄薄的磁性物质，所有数据都通过磁性物质进行存储。它的读写原理是：写数据时，由磁头通过电磁流改变盘片上的磁性材料的极性，比如由正极变负极，或者由负极变正极，而正极对应的是数据 1，负极对应的是 0，所以一串 0 或 1 的数据就这样通过磁材料的极性间接表达了出来；而读数据时，磁头经过盘片上方时会被磁性材料的极性改变电气信号，通过极性影响了电的 1 或 0 表达，所以也间接的将存储在磁盘上的数据表达出来了。 磁盘的数据接口有如下几种：
IDE：也叫 ATA，这种接口的速度不快，而且抗干扰性差，现在已逐渐淘汰。 SATA：串行的 ATA。这种接口抗干扰性强，速度较快，一般可以达到 300MB/s 以上。我们常用的台式机就是这种接口。 SCSI：小型机系统接口。一般用于个人工作站和服务器。 SAS：新一代的 SCSI 技术，可兼容 SATA，速度可达 12Gb/s。 FC：光纤通道接口，具有热插拔、速度快、价格高的特性，一般只用于高端服务器领域。 目前磁盘能存储的数据较多，而且价格便宜，在外存存储介质里占了半壁江山。但是磁盘由于它的物理特性的原因特别容易坏，一不小心摔它一下可能就会损坏里面的盘片或磁头，故障率特别高，而且即使不摔它，它的寿命也不长，一般三四年就需要换一批新磁盘。很多数据中心里面的存储服务器每隔三四年的时间就得更换一批新的磁盘，即使磁盘本身并没有什么坏道，这样看来其实磁盘也算是一种快消品。</description></item></channel></rss>