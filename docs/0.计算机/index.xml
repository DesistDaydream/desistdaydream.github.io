<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦的站点 – 💻0.计算机</title><link>https://desistdaydream.github.io/docs/0.%E8%AE%A1%E7%AE%97%E6%9C%BA/</link><description>Recent content in 💻0.计算机 on 断念梦的站点</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/0.%E8%AE%A1%E7%AE%97%E6%9C%BA/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Computer</title><link>https://desistdaydream.github.io/docs/0.%E8%AE%A1%E7%AE%97%E6%9C%BA/Computer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/0.%E8%AE%A1%E7%AE%97%E6%9C%BA/Computer/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Computer">Wiki，Computer&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>冯·诺依曼&lt;/p>
&lt;p>&lt;a href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/CPU/CPU.md">CPU&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Memory/Memory.md">Memory&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://desistdaydream.github.io/docs/0.%E8%AE%A1%E7%AE%97%E6%9C%BA/Disk/Disk.md">Disk&lt;/a>&lt;/p>
&lt;h1 id="计算机工作的原理">计算机工作的原理&lt;a class="td-heading-self-link" href="#%e8%ae%a1%e7%ae%97%e6%9c%ba%e5%b7%a5%e4%bd%9c%e7%9a%84%e5%8e%9f%e7%90%86" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/Yntk83Z5cuZ2OhfnZzvWUA">公众号-码农的荒岛求生，你管这破玩意叫 CPU ？&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.bilibili.com/video/BV12d4y1272j">B 站-幼麟实验室，迷你计算机(小白入门)：计算机工作的原理&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>每次回家开灯时你有没有想过，用你按的简单开关实际上能打造出复杂的 CPU 来，只不过需要的数量会比较多，也就&lt;strong>几十亿&lt;/strong>个吧。&lt;/p>
&lt;h1 id="伟大的发明-晶体管">伟大的发明-晶体管&lt;a class="td-heading-self-link" href="#%e4%bc%9f%e5%a4%a7%e7%9a%84%e5%8f%91%e6%98%8e-%e6%99%b6%e4%bd%93%e7%ae%a1" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>过去 200 年人类最重要的发明是什么？蒸汽机？电灯？火箭？这些可能都不是，最重要的也许是这个小东西：&lt;/p>
&lt;p>&lt;img src="https://mmbiz.qpic.cn/mmbiz_jpg/8g3rwJPmya2J1UjGyUZ2x0Yxh82cWJu3cXJpq4H8DRCBwzFmdKfLXeibXdEK5HbB7ukbqzLTZibQOcIBgqVZkxYA/640" alt="">&lt;/p>
&lt;p>这个小东西就叫&lt;strong>晶体管&lt;/strong>，你可能会问，晶体管有什么用呢？&lt;/p>
&lt;p>实际上晶体管的功能简单到不能再简单，给一端通上电，那么电流可以从另外两端通过，否则不能通过，其本质就是一个开关。&lt;/p>
&lt;p>就是这个小东西的发明让三个人获得了诺贝尔物理学奖，可见其举足轻重的地位。&lt;/p>
&lt;p>&lt;strong>无论程序员编写的程序多么复杂，软件承载的功能最终都是通过这个小东西简单的开闭完成的&lt;/strong>，除了神奇二字，我想不出其它词来。&lt;/p>
&lt;h2 id="andornot">AND、OR、NOT&lt;a class="td-heading-self-link" href="#andornot" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>现在有了晶体管，也就是开关，在此基础之上就可以搭积木了，你随手搭建出来这样三种组合：&lt;/p>
&lt;ul>
&lt;li>两个开关只有同时打开电流才会通过，灯才会亮&lt;/li>
&lt;li>两个开关中只要有一个打开电流就能通过，灯就会亮&lt;/li>
&lt;li>当开关关闭时电流通过灯会亮，打开开关灯反而电流不能通过灯会灭&lt;/li>
&lt;/ul>
&lt;p>天赋异禀的你搭建的上述组合分别就是：与门，AND Gate、或门，OR gate、非门，NOT gate，用符号表示就是这样：&lt;/p>
&lt;p>&lt;img src="https://mmbiz.qpic.cn/mmbiz_png/8g3rwJPmya2J1UjGyUZ2x0Yxh82cWJu3ZbdZfNMWa7OibAXw4a7J9XVTtOyPSVicdgI4icAK9GUzMa0eBIhkcxh0Q/640?wx_fmt=png#crop=0&amp;amp;crop=0&amp;amp;crop=1&amp;amp;crop=1&amp;amp;height=284&amp;amp;id=ln8oX&amp;amp;margin=%5Bobject%20Object%5D&amp;amp;originHeight=284&amp;amp;originWidth=1080&amp;amp;originalType=binary&amp;amp;ratio=1&amp;amp;rotation=0&amp;amp;showTitle=false&amp;amp;status=done&amp;amp;style=none&amp;amp;title=&amp;amp;width=1080" alt="">&lt;/p>
&lt;p>&lt;strong>道生一、一生二、二生三、三生万物&lt;/strong>&lt;/p>
&lt;p>最神奇的是，你随手搭建的三种电路竟然有一种很 amazing 的特性，那就是：任何一个逻辑函数最终都可以通过 AND、OR 以及 NOT 表达出来，这就是所谓的&lt;strong>逻辑完备性&lt;/strong>，就是这么神奇。&lt;/p>
&lt;p>也就是说**给定足够的 AND、OR 以及 NOT 门，就可以实现任何一个逻辑函数，除此之外我们不需要任何其它类型的逻辑门电路，**这时我们认为 AND、OR、NOT 门就是逻辑完备的。&lt;/p>
&lt;p>这一结论的得出吹响了计算机革命的号角，这个结论告诉我们计算机最终可以通过简单的 AND、OR、NOT 门构造出来，这些简单的逻辑门电路就好比基因。
&lt;img src="https://mmbiz.qpic.cn/mmbiz_png/8g3rwJPmya2J1UjGyUZ2x0Yxh82cWJu3efwiapNDVRibXjXaLvQ3lG7HkYreVhjiay72hsyAbpQaPEfpNAeDSdPmQ/640?wx_fmt=png#crop=0&amp;amp;crop=0&amp;amp;crop=1&amp;amp;crop=1&amp;amp;height=435&amp;amp;id=SHQ0p&amp;amp;margin=%5Bobject%20Object%5D&amp;amp;originHeight=748&amp;amp;originWidth=739&amp;amp;originalType=binary&amp;amp;ratio=1&amp;amp;rotation=0&amp;amp;showTitle=false&amp;amp;status=done&amp;amp;style=none&amp;amp;title=&amp;amp;width=430" alt="">
老子有云：&lt;strong>道生一、一生二、二生三、三生万物，实乃异曲同工之妙&lt;/strong>。&lt;/p>
&lt;p>虽然，我们可以用 AND、OR、NOT 来实现所有的逻辑运算，但我们真的需要把所有的逻辑运算都用 AND、OR、NOT 门实现出来吗？显然不是，而且这也不太可行。&lt;/p>
&lt;h2 id="逻辑门">逻辑门&lt;a class="td-heading-self-link" href="#%e9%80%bb%e8%be%91%e9%97%a8" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/computer/logic-gate-202304281056.png" alt="">&lt;/p>
&lt;h1 id="计算能力是怎么来的">计算能力是怎么来的&lt;a class="td-heading-self-link" href="#%e8%ae%a1%e7%ae%97%e8%83%bd%e5%8a%9b%e6%98%af%e6%80%8e%e4%b9%88%e6%9d%a5%e7%9a%84" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>现在能生成万物的基础元素与或非门出现了，接下来我们着手设计 CPU 最重要的能力：计算，以加法为例。&lt;/p>
&lt;p>由于 CPU 只认知 0 和 1，也就是二进制，那么二进制的加法有哪些组合呢：&lt;/p>
&lt;ul>
&lt;li>0 + 0，结果为 0，进位为 0&lt;/li>
&lt;li>0 + 1，结果为 1，进位为 0&lt;/li>
&lt;li>1 + 0，结果为 1，进位为 0&lt;/li>
&lt;li>1 + 1，结果为 0，进位为 1，二进制嘛！&lt;/li>
&lt;/ul>
&lt;p>注意进位一列，只有当两路输入的值都是 1 时，进位才是 1 ，看一下你设计的三种组合电路，这就是与门啊，有没有！&lt;/p>
&lt;p>再看下结果一列，当两路输入的值不同时结果为 1，输入结果相同时结果为 0，这就是异或啊，有没有！我们说过与或非门是逻辑完备可以生万物，异或逻辑当然不在话下，用一个与门和一个异或门就可以实现二进制加法：&lt;/p>
&lt;p>&lt;img src="https://mmbiz.qpic.cn/mmbiz_png/8g3rwJPmya2J1UjGyUZ2x0Yxh82cWJu3JxIJrOIlU0Vk38nwdcvogOutwQDWYPhNVRueicC5Men9natwfwxLkTQ/640?wx_fmt=png#crop=0&amp;amp;crop=0&amp;amp;crop=1&amp;amp;crop=1&amp;amp;height=677&amp;amp;id=qyvVK&amp;amp;margin=%5Bobject%20Object%5D&amp;amp;originHeight=677&amp;amp;originWidth=1080&amp;amp;originalType=binary&amp;amp;ratio=1&amp;amp;rotation=0&amp;amp;showTitle=false&amp;amp;status=done&amp;amp;style=none&amp;amp;title=&amp;amp;width=1080" alt="">&lt;/p>
&lt;p>上述电路就是一个简单的加法器，就问你神奇不神奇，加法可以用与或非门实现，其它的也一样能实现，逻辑完备嘛。&lt;/p>
&lt;p>除了加法，我们也可以根据需要将不同的算数运算设计出来，负责计算的电路有一个统称，这就是所谓的 arithmetic/logic unit，ALU，CPU 中专门负责运算的模块，本质上和上面的简单电路没什么区别，就是更加复杂而已。&lt;/p>
&lt;p>现在，通过与或非门的组合我们获得了计算能力，计算能力就是这么来的。&lt;/p>
&lt;p>但，只有计算能力是不够的，电路需要能&lt;strong>记得住&lt;/strong>信息。&lt;/p>
&lt;h1 id="神奇的记忆能力">神奇的记忆能力&lt;a class="td-heading-self-link" href="#%e7%a5%9e%e5%a5%87%e7%9a%84%e8%ae%b0%e5%bf%86%e8%83%bd%e5%8a%9b" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>到目前为止，你设计的组合电路比如加法器天生是没有办法存储信息的，它们只是简单的根据输入得出输出，但输入输出总的有个地方能够保存起来，这就是需要电路能保存信息。&lt;/p>
&lt;p>电路怎么能保存信息呢？你不知道该怎么设计，这个问题解决不了你寝食难安，吃饭时在思考、走路时在思考，蹲坑时在思考，直到有一天你在梦中遇一位英国物理学家，他给了你这样一个简单但极其神奇的电路：&lt;/p>
&lt;p>&lt;img src="https://mmbiz.qpic.cn/mmbiz_png/8g3rwJPmya2J1UjGyUZ2x0Yxh82cWJu3Ix9HYprZmoBm2XYlZcDvXLB0TEXXeS7Ct3Gv1NRgtwufMmpy1CqcjA/640?wx_fmt=png#crop=0&amp;amp;crop=0&amp;amp;crop=1&amp;amp;crop=1&amp;amp;height=701&amp;amp;id=tATWF&amp;amp;margin=%5Bobject%20Object%5D&amp;amp;originHeight=701&amp;amp;originWidth=1000&amp;amp;originalType=binary&amp;amp;ratio=1&amp;amp;rotation=0&amp;amp;showTitle=false&amp;amp;status=done&amp;amp;style=none&amp;amp;title=&amp;amp;width=1000" alt="">&lt;/p>
&lt;p>这是两个 NAND 门的组合，不要紧张，NAND 也是有你设计的与或非门组合而成的，所谓 NAND 门就是与非门，先与然后取非，比如给定输入 1 和 0，那么与运算后为 0，非运算后为 1，这就是与非门，这些不重要。&lt;/p>
&lt;p>比较独特的是该电路的组合方式，&lt;strong>一个 NAND 门的输出是两一个 NAND 门的输入&lt;/strong>，该电路的组合方式会自带一种很有趣的特性，&lt;strong>只要给 S 和 R 段输入 1，那么这个电路只会有两种状态&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>要么 a 端为 1，此时 B=0、A=1、b=0；&lt;/li>
&lt;li>要么 a 端为 0，此时 B=1、A=0、b=1;&lt;/li>
&lt;/ul>
&lt;p>不会再有其他可能了，&lt;strong>我们把 a 端的值作为电路的输出&lt;/strong>。&lt;/p>
&lt;p>此后，你把 S 端置为 0 的话 (R 保持为 1)，那么电路的输出也就是 a 端永远为 1，这时就可以说我们把 1 存到电路中了；而如果你把 R 段置为 0 的话 (S 保持为 1)，那么此时电路的输出也就是 a 端永远为 0，此时我们可以说把 0 存到电路中了。&lt;/p>
&lt;p>就问你神奇不神奇，&lt;strong>电路竟然具备存储信息的能力了&lt;/strong>。&lt;/p>
&lt;p>现在为保存信息你需要同时设置 S 端和 R 端，但你的输入是有一个 (存储一个 bit 位嘛)，为此你对电路进行了简单的改造：&lt;/p>
&lt;p>&lt;img src="https://mmbiz.qpic.cn/mmbiz_png/8g3rwJPmya2J1UjGyUZ2x0Yxh82cWJu3oAg248jVapQ9xO4Go54Bvxu4kVajVk0BIokDOIibya6sb0bY0OEF0lQ/640?wx_fmt=png#crop=0&amp;amp;crop=0&amp;amp;crop=1&amp;amp;crop=1&amp;amp;height=378&amp;amp;id=S5OL4&amp;amp;margin=%5Bobject%20Object%5D&amp;amp;originHeight=378&amp;amp;originWidth=1080&amp;amp;originalType=binary&amp;amp;ratio=1&amp;amp;rotation=0&amp;amp;showTitle=false&amp;amp;status=done&amp;amp;style=none&amp;amp;title=&amp;amp;width=1080" alt="">&lt;/p>
&lt;p>这样，当 D 为 0 时，整个电路保存的就是 0，否则就是 1。&lt;/p>
&lt;h1 id="寄存器与内存的诞生">寄存器与内存的诞生&lt;a class="td-heading-self-link" href="#%e5%af%84%e5%ad%98%e5%99%a8%e4%b8%8e%e5%86%85%e5%ad%98%e7%9a%84%e8%af%9e%e7%94%9f" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>现在你的电路能存储一个比特位了，想存储多个比特位还不简单，复制粘贴就可以了：&lt;/p>
&lt;p>&lt;img src="https://mmbiz.qpic.cn/mmbiz_png/8g3rwJPmya2J1UjGyUZ2x0Yxh82cWJu3p3UERMqaXH1Pu4hwnicb6HwQVlSRmkW64WqGF26wiaKHc1JCoTibecNGQ/640?wx_fmt=png#crop=0&amp;amp;crop=0&amp;amp;crop=1&amp;amp;crop=1&amp;amp;height=509&amp;amp;id=JwKnu&amp;amp;margin=%5Bobject%20Object%5D&amp;amp;originHeight=509&amp;amp;originWidth=1080&amp;amp;originalType=binary&amp;amp;ratio=1&amp;amp;rotation=0&amp;amp;showTitle=false&amp;amp;status=done&amp;amp;style=none&amp;amp;title=&amp;amp;width=1080" alt="">&lt;/p>
&lt;p>我们管这个组合电路就叫&lt;strong>寄存器&lt;/strong>，你没有看错，我们常说的寄存器就是这个东西。&lt;/p>
&lt;p>你不满足，还要继续搭建更加复杂的电路以存储更多信息，同时提供寻址功能，就这样&lt;strong>内存&lt;/strong>也诞生了。&lt;/p>
&lt;p>寄存器及内存都离不开上一节那个简单电路，只要通电，这个电路中就保存信息，但是断电后很显然保存的信息就丢掉了，&lt;strong>现在你应该明白为什么内存在断电后就不能保存数据了吧&lt;/strong>。&lt;/p>
&lt;h1 id="硬件还是软件">硬件还是软件？&lt;a class="td-heading-self-link" href="#%e7%a1%ac%e4%bb%b6%e8%bf%98%e6%98%af%e8%bd%af%e4%bb%b6" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>现在我们的电路可以计算数据、也可以存储信息，但现在还有一个问题，那就是尽管我们可以用 AND、OR、NOT 表达出所有的逻辑函数，但我们真的有必要把所有的逻辑运算都用与或非门实现出来吗？这显然是不现实的。&lt;/p>
&lt;p>这就好比厨师，你没有听说只专做一道菜的厨师然后酒店要把各个菜系厨师雇全才能做出一桌菜来吧！&lt;/p>
&lt;p>中国菜系博大精深，千差万别，但制作每道菜品的方式大同小异，其中包括刀工、颠勺技术等，这些是基本功，制作每道菜品都要经过这些步骤，变化的也无非就是食材、火候、调料等，这些放到菜谱中即可，这样给厨师一个菜谱他就能制作出任意的菜来，在这里厨师就好比硬件，菜谱就好比软件。&lt;/p>
&lt;p>&lt;img src="https://mmbiz.qpic.cn/mmbiz_jpg/8g3rwJPmya2J1UjGyUZ2x0Yxh82cWJu3jo7pp7gFSicg2HtaFOz4yrK7nq2YB5sW70aNw3B8lmprnSRlMibfMNqA/640?wx_fmt=jpeg#crop=0&amp;amp;crop=0&amp;amp;crop=1&amp;amp;crop=1&amp;amp;height=719&amp;amp;id=ny8Pi&amp;amp;margin=%5Bobject%20Object%5D&amp;amp;originHeight=719&amp;amp;originWidth=1080&amp;amp;originalType=binary&amp;amp;ratio=1&amp;amp;rotation=0&amp;amp;showTitle=false&amp;amp;status=done&amp;amp;style=none&amp;amp;title=&amp;amp;width=1080" alt="">&lt;/p>
&lt;p>同样的道理，&lt;strong>我们没有必要为所有的计算逻辑实现出对应的硬件&lt;/strong>，硬件只需要提供最基本的功能，最终所有的计算逻辑都通过这些最基本的功能用软件表达出来就好，这就是所谓的软件一词的来源，&lt;strong>硬件不可变，但软件可变&lt;/strong>，&lt;strong>不变的是硬件但提供不同的软件就能让硬件实现全新的功能&lt;/strong>，&lt;strong>无比天才的思想&lt;/strong>，人类真的是太聪明了。&lt;/p>
&lt;p>同样一台计算机硬件，安装上 word 你就能编辑文档，安装上微信你就能读到码农的荒岛求生公众号、安装上游戏你就能玩王者农药，硬件还是那套硬件，提供不同的软件就是实现不同的功能，&lt;strong>每次打开电脑使用各种 App 时没有在内心高呼一声牛逼你都对不起计算机这么伟大的发明创造&lt;/strong>，这就是为什么计算机被称为&lt;strong>通用&lt;/strong>计算设备的原因，这一思想是计算机科学祖师爷图灵提出的。&lt;/p>
&lt;p>&lt;img src="https://mmbiz.qpic.cn/mmbiz_png/8g3rwJPmya2J1UjGyUZ2x0Yxh82cWJu3Ky3ZJWe3H6oQS38iaVIgAB5dtCXlcuL4vR3ssQPmBqAtBVYJxNWFNPQ/640?wx_fmt=png#crop=0&amp;amp;crop=0&amp;amp;crop=1&amp;amp;crop=1&amp;amp;height=504&amp;amp;id=sdZvM&amp;amp;margin=%5Bobject%20Object%5D&amp;amp;originHeight=504&amp;amp;originWidth=1024&amp;amp;originalType=binary&amp;amp;ratio=1&amp;amp;rotation=0&amp;amp;showTitle=false&amp;amp;status=done&amp;amp;style=none&amp;amp;title=&amp;amp;width=1024" alt="">&lt;/p>
&lt;p>扯远了，接下来我们看下硬件是怎么提供所谓的基本功能的。&lt;/p>
&lt;h1 id="硬件的基本功">硬件的基本功&lt;a class="td-heading-self-link" href="#%e7%a1%ac%e4%bb%b6%e7%9a%84%e5%9f%ba%e6%9c%ac%e5%8a%9f" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>让我们来思考一个问题，CPU 怎么能知道自己要去对两个数进行加法计算，以及哪两个数进行加法计算呢？&lt;/p>
&lt;p>很显然，你得告诉 CPU，该怎么告诉呢？还记得上一节中给厨师的菜谱吗？没错，CPU 也需要一张菜谱告诉自己该接下来该干啥，在这里菜谱就是机器指令，指令通过我们上述实现的组合电路来执行。&lt;/p>
&lt;p>接下来我们面临另一个问题，那就是这样的指令应该会很多吧，废话，还是以加法指令为例，你可以让 CPU 计算 1+1，也可以计算 1+2 等等，实际上单单加法指令就可以有无数种组合，显然 CPU 不可能去实现所有的指令。&lt;/p>
&lt;p>实际上 CPU 只需要提供&lt;strong>加法操作&lt;/strong>，你提供&lt;strong>操作数&lt;/strong>就可以了，CPU 说：“我可以打人”，你告诉 CPU 该打谁、CPU 说：“我可以唱歌”，你告诉 CPU 唱什么，CPU 说我可以做饭，你告诉 CPU 该做什么饭，CPU 说：“我可以炒股”，你告诉 CPU 快滚一边去吧韭菜。&lt;/p>
&lt;p>因此我们可以看到 CPU 只提供&lt;strong>机制&lt;/strong>或者说功能 (打人、唱歌、炒菜，加法、减法、跳转)，我们提供&lt;strong>策略&lt;/strong>(打谁、歌名、菜名，操作数，跳转地址)。&lt;/p>
&lt;p>CPU 表达机制就通过指令集来实现的。&lt;/p>
&lt;h2 id="指令集">指令集&lt;a class="td-heading-self-link" href="#%e6%8c%87%e4%bb%a4%e9%9b%86" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>指令集告诉我们 CPU 可以执行什么指令，每种指令需要提供什么样的操作数。不同类型的 CPU 会有不同的指令集。&lt;/p>
&lt;p>指令集中的指令其实都非常简单，画风大体上是这样的：&lt;/p>
&lt;ul>
&lt;li>从内存中读一个数，地址是 abc&lt;/li>
&lt;li>对两个数加和&lt;/li>
&lt;li>检查一个数是不是大于 6&lt;/li>
&lt;li>把这数存储到内存，地址是 abc&lt;/li>
&lt;li>等等&lt;/li>
&lt;/ul>
&lt;p>看上去很像碎碎念有没有，这就是机器指令，我们用高级语言编写的程序，比如对一个数组进行排序，&lt;strong>最终都会等价转换为上面的碎碎念指令，然后 CPU 一条一条的去执行，很神奇有没有&lt;/strong>。&lt;/p>
&lt;p>接下来我们看一条可能的机器指令：&lt;/p>
&lt;p>&lt;img src="https://mmbiz.qpic.cn/mmbiz_png/8g3rwJPmya2J1UjGyUZ2x0Yxh82cWJu3ssjP2NAoNF1txpoYr8icPGz9M2Q3Pof0Wpq62rgNgMZ8lKYY21U6YlQ/640?wx_fmt=png#crop=0&amp;amp;crop=0&amp;amp;crop=1&amp;amp;crop=1&amp;amp;height=201&amp;amp;id=ZOwu9&amp;amp;margin=%5Bobject%20Object%5D&amp;amp;originHeight=201&amp;amp;originWidth=1080&amp;amp;originalType=binary&amp;amp;ratio=1&amp;amp;rotation=0&amp;amp;showTitle=false&amp;amp;status=done&amp;amp;style=none&amp;amp;title=&amp;amp;width=1080" alt="">&lt;/p>
&lt;p>这条指令占据 16 比特，其中前四个比特告诉 CPU 这是加法指令，这意味着该 CPU 的指令集中可以包含 2^4 也就是 16 个机器指令，这四个比特位告诉 CPU 该做什么，剩下的 bit 告诉 CPU 该怎么做，也就是把寄存器 R6 和寄存器 R2 中的值相加然后写到寄存器 R6 中。&lt;/p>
&lt;p>可以看到，机器指令是非常繁琐的，现代程序员都使用高级语言来编写程序，关于高级程序语言以及机器指令的话题请参见&lt;a href="http://mp.weixin.qq.com/s?__biz=MzU2NTYyOTQ4OQ==&amp;amp;mid=2247485439&amp;amp;idx=1&amp;amp;sn=5045e795fe3a881ec719ffd0ea41302a&amp;amp;chksm=fcb980a1cbce09b7cb79cac0964d082bda3f8b94701012ab5fbd911d630bd5fef6017feb6dd9&amp;amp;scene=21#wechat_redirect">《你管这破玩意叫编程语言？&lt;/a>》。&lt;/p>
&lt;h3 id="指挥家让我们演奏一曲">指挥家：让我们演奏一曲&lt;a class="td-heading-self-link" href="#%e6%8c%87%e6%8c%a5%e5%ae%b6%e8%ae%a9%e6%88%91%e4%bb%ac%e6%bc%94%e5%a5%8f%e4%b8%80%e6%9b%b2" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>现在我们的电路有了计算功能、存储功能，还可以通过指令告诉该电路执行什么操作，还有一个问题没有解决。&lt;/p>
&lt;p>我们的电路有很多部分，用来计算的、用来存储的，以最简单的加法为例，假设我们要计算 1+1，这两个数分别来自寄存器 R1 和 R2，要知道寄存器中可以保存任意值，&lt;strong>我们怎么能确保加法器开始工作时 R1 和 R2 中在这一时刻保存的都是 1 而不是其它数&lt;/strong>？&lt;/p>
&lt;p>即，我们靠什么来协调或者说靠什么来同步电路各个部分让它们协同工作呢？就像一场成功的交响乐演离不开指挥家一样，我们的计算组合电路也需要这样一个指挥家。&lt;/p>
&lt;p>负责指挥角色的就是时钟信号。&lt;/p>
&lt;p>时钟信号就像指挥家手里拿的指挥棒，&lt;strong>指挥棒挥动一下整个乐队会整齐划一的有个相应动作&lt;/strong>，同样的，时钟信号每一次电压改变，整个电路中的各个寄存器 (也就是整个电路的状态) 会更新一下，这样我们就能确保整个电路协同工作不会这里提到的问题。&lt;/p>
&lt;p>现在你应该知道 CPU 的主频是什么意思了吧，主频是说一秒钟指挥棒挥动了多少次，显然主频越高 CPU 在一秒内完成的操作也就越多。&lt;/p>
&lt;h2 id="大功告成">大功告成&lt;a class="td-heading-self-link" href="#%e5%a4%a7%e5%8a%9f%e5%91%8a%e6%88%90" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>现在我们有了可以完成各种计算的 ALU、可以存储信息的寄存器以及控制它们协同工作的时钟信号，这些统称 &lt;strong>Central Processing Unit&lt;/strong>，简称就是 &lt;strong>CPU&lt;/strong>。&lt;/p>
&lt;h1 id="总结">总结&lt;a class="td-heading-self-link" href="#%e6%80%bb%e7%bb%93" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>一个小小的开关竟然能构造出功能强大的 CPU ，这背后理论和制造工艺的突破是人类史上的里程碑时刻，说 CPU 是智慧的结晶简直再正确不过。&lt;/p>
&lt;p>本文从一枚开关开始讲解了 CPU 构造的基本原理，希望这篇对大家理解 CPU 有所帮助。&lt;/p>
&lt;h1 id="参考资料">参考资料&lt;a class="td-heading-self-link" href="#%e5%8f%82%e8%80%83%e8%b5%84%e6%96%99" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;ol>
&lt;li>&lt;a href="http://mp.weixin.qq.com/s?__biz=MzU2NTYyOTQ4OQ==&amp;amp;mid=2247483850&amp;amp;idx=1&amp;amp;sn=b90a78604fa174f0e7314227a3002bdc&amp;amp;chksm=fcb98694cbce0f82024467c835c6e3b4984773b1a2f6c1625d573066c36b14420d996819bed7&amp;amp;scene=21#wechat_redirect">&lt;strong>程序员应如何理解 CPU&lt;/strong>&lt;/a>&lt;a href="http://mp.weixin.qq.com/s?__biz=MzU2NTYyOTQ4OQ==&amp;amp;mid=2247483736&amp;amp;idx=1&amp;amp;sn=4da1eec64e42567a0fdf4ae6d4e9344e&amp;amp;chksm=fcb98606cbce0f10090d950ec468b0a1e28087cd158a850bc7dc4c262fd2612a319851987220&amp;amp;scene=21#wechat_redirect">&lt;strong>？&lt;/strong>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://mp.weixin.qq.com/s?__biz=MzU2NTYyOTQ4OQ==&amp;amp;mid=2247485379&amp;amp;idx=1&amp;amp;sn=77ccd2258f0280dfb536ad3d389cd43a&amp;amp;chksm=fcb9809dcbce098b6f89dc59e71cf7fb6af6e5152e40f2f84f7c33ba9ea62e5bc8390ffd0553&amp;amp;scene=21#wechat_redirect">&lt;strong>CPU 空闲时在干嘛？&lt;/strong>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://mp.weixin.qq.com/s?__biz=MzU2NTYyOTQ4OQ==&amp;amp;mid=2247484768&amp;amp;idx=1&amp;amp;sn=049db350af9e5eea5cf3523ceb83f447&amp;amp;chksm=fcb9823ecbce0b28ca28d021e68c78138cde4a1b86ea7209c0c667d3d544d223d8b2aecbccec&amp;amp;scene=21#wechat_redirect">&lt;strong>CPU 与进程、线程、操作系统&lt;/strong>&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>Docs: Motherboard</title><link>https://desistdaydream.github.io/docs/0.%E8%AE%A1%E7%AE%97%E6%9C%BA/Motherboard/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/0.%E8%AE%A1%E7%AE%97%E6%9C%BA/Motherboard/</guid><description/></item><item><title>Docs: CPU</title><link>https://desistdaydream.github.io/docs/0.%E8%AE%A1%E7%AE%97%E6%9C%BA/CPU/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/0.%E8%AE%A1%E7%AE%97%E6%9C%BA/CPU/</guid><description/></item><item><title>Docs: Memory</title><link>https://desistdaydream.github.io/docs/0.%E8%AE%A1%E7%AE%97%E6%9C%BA/Memory/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/0.%E8%AE%A1%E7%AE%97%E6%9C%BA/Memory/</guid><description/></item><item><title>Docs: Disk</title><link>https://desistdaydream.github.io/docs/0.%E8%AE%A1%E7%AE%97%E6%9C%BA/Disk/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/0.%E8%AE%A1%E7%AE%97%E6%9C%BA/Disk/</guid><description/></item><item><title>Docs: 扩展与外设</title><link>https://desistdaydream.github.io/docs/0.%E8%AE%A1%E7%AE%97%E6%9C%BA/%E6%89%A9%E5%B1%95%E4%B8%8E%E5%A4%96%E8%AE%BE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/0.%E8%AE%A1%E7%AE%97%E6%9C%BA/%E6%89%A9%E5%B1%95%E4%B8%8E%E5%A4%96%E8%AE%BE/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="sas-卡">SAS 卡&lt;a class="td-heading-self-link" href="#sas-%e5%8d%a1" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>SAS 的全称是 &lt;strong>串行附加SCSI&lt;/strong>（Serial Attached SCSI）。它是一种用于连接硬盘驱动器、光盘驱动器等设备的接口标准。SAS卡提供了高速、高性能、高可靠性和高灵活性的数据传输解决方案。&lt;/p></description></item><item><title>Docs: Computer Peripheral</title><link>https://desistdaydream.github.io/docs/0.%E8%AE%A1%E7%AE%97%E6%9C%BA/Computer-Peripheral/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/0.%E8%AE%A1%E7%AE%97%E6%9C%BA/Computer-Peripheral/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Peripheral">Wiki，Peripheral&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="鼠标">鼠标&lt;a class="td-heading-self-link" href="#%e9%bc%a0%e6%a0%87" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="罗技鼠标">罗技鼠标&lt;a class="td-heading-self-link" href="#%e7%bd%97%e6%8a%80%e9%bc%a0%e6%a0%87" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>在设备管理器中看到 Logitech Cordless Device 驱动异常，无法自动安装。现象为 Logitech 的 Unifying 设备（i.e. 无线接收器）无法被软件识别；但是鼠标还是可以用的。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://priesdelly.medium.com/logitech-cordless-device-fix-driver-not-installed-db328b6f6bb2">https://priesdelly.medium.com/logitech-cordless-device-fix-driver-not-installed-db328b6f6bb2&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://www.reddit.com/r/Windows10/comments/5s1m2w/comment/difegn3/?utm_source=share&amp;amp;utm_medium=web2x&amp;amp;context=3">https://www.reddit.com/r/Windows10/comments/5s1m2w/comment/difegn3/?utm_source=share&amp;amp;utm_medium=web2x&amp;amp;context=3&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>在 &lt;a href="https://support.logi.com/hc/en-us/articles/360025141274">https://support.logi.com/hc/en-us/articles/360025141274&lt;/a> 安装 SetPoint 即可让驱动正常。&lt;/li>
&lt;/ul>
&lt;h1 id="键盘">键盘&lt;a class="td-heading-self-link" href="#%e9%94%ae%e7%9b%98" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="樱桃键盘">樱桃键盘&lt;a class="td-heading-self-link" href="#%e6%a8%b1%e6%a1%83%e9%94%ae%e7%9b%98" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Cheey(樱桃) 键盘一按 F1 就是静音该如何解决？&lt;/p>
&lt;p>使用 &lt;code>Ctrl + Fn&lt;/code> 即可切换 F1 的作用，其他 F 功能键效果同理&lt;/p>
&lt;h1 id="攀升兄弟名龙堂宁美国度京天华盛这四个哪个的主机好一些自己不会组装懒得组装买个便宜的玩玩">攀升兄弟，名龙堂，宁美国度，京天华盛这四个哪个的主机好一些，自己不会组装，懒得组装，买个便宜的玩玩？&lt;a class="td-heading-self-link" href="#%e6%94%80%e5%8d%87%e5%85%84%e5%bc%9f%e5%90%8d%e9%be%99%e5%a0%82%e5%ae%81%e7%be%8e%e5%9b%bd%e5%ba%a6%e4%ba%ac%e5%a4%a9%e5%8d%8e%e7%9b%9b%e8%bf%99%e5%9b%9b%e4%b8%aa%e5%93%aa%e4%b8%aa%e7%9a%84%e4%b8%bb%e6%9c%ba%e5%a5%bd%e4%b8%80%e4%ba%9b%e8%87%aa%e5%b7%b1%e4%b8%8d%e4%bc%9a%e7%bb%84%e8%a3%85%e6%87%92%e5%be%97%e7%bb%84%e8%a3%85%e4%b9%b0%e4%b8%aa%e4%be%bf%e5%ae%9c%e7%9a%84%e7%8e%a9%e7%8e%a9" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>原文: &lt;a href="https://www.zhihu.com/question/435429789">https://www.zhihu.com/question/435429789&lt;/a>&lt;/p></description></item><item><title>Docs: Display device</title><link>https://desistdaydream.github.io/docs/0.%E8%AE%A1%E7%AE%97%E6%9C%BA/Display-device/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/0.%E8%AE%A1%E7%AE%97%E6%9C%BA/Display-device/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Display_device">Wiki，Display device&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;a href="https://www.zhihu.com/question/365405717">为什么部分人能接受厂商对ips屏幕漏光属正常现象不在昏暗环境和纯黑界面下不影响正常使用这一说法?&lt;/a>&lt;/p></description></item><item><title>Docs: Rack</title><link>https://desistdaydream.github.io/docs/0.%E8%AE%A1%E7%AE%97%E6%9C%BA/Rack/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/0.%E8%AE%A1%E7%AE%97%E6%9C%BA/Rack/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/19-inch_rack">https://en.wikipedia.org/wiki/19-inch_rack&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Rack_unit">https://en.wikipedia.org/wiki/Rack_unit&lt;/a> 机柜单元，所以 1U 就是 1 unit，指 1单元&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Rack(机柜)&lt;/strong>&lt;/p>
&lt;p>A full-height rack cabinet 全高机架柜&lt;/p></description></item><item><title>Docs: 计算机厂家信息</title><link>https://desistdaydream.github.io/docs/0.%E8%AE%A1%E7%AE%97%E6%9C%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8E%82%E5%AE%B6%E4%BF%A1%E6%81%AF/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/0.%E8%AE%A1%E7%AE%97%E6%9C%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8E%82%E5%AE%B6%E4%BF%A1%E6%81%AF/</guid><description>
&lt;h1 id="dell">Dell&lt;a class="td-heading-self-link" href="#dell" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>信息查询：https://www.dell.com/support/home/zh-cn&lt;/p>
&lt;p>报修热线：&lt;/p>
&lt;h1 id="华三">华三&lt;a class="td-heading-self-link" href="#%e5%8d%8e%e4%b8%89" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>信息查询：https://es.h3c.com/entitlement/&lt;/p>
&lt;p>报修热线：&lt;/p>
&lt;ul>
&lt;li>可以通过微信小程序建单&lt;/li>
&lt;/ul>
&lt;h1 id="浪潮">浪潮&lt;a class="td-heading-self-link" href="#%e6%b5%aa%e6%bd%ae" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>信息查询：https://www.inspur.com/eportal/ui?pageId=2317460&lt;/p>
&lt;p>报修热线：4008600011&lt;/p></description></item><item><title>Docs: 小型机器</title><link>https://desistdaydream.github.io/docs/0.%E8%AE%A1%E7%AE%97%E6%9C%BA/%E5%B0%8F%E5%9E%8B%E6%9C%BA%E5%99%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/0.%E8%AE%A1%E7%AE%97%E6%9C%BA/%E5%B0%8F%E5%9E%8B%E6%9C%BA%E5%99%A8/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.passmark.com/">PC 基准测试网站&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>小型机器常用来作为桌面终端、工控机、软路由、等等 使用。&lt;/p>
&lt;p>&lt;a href="https://www.cpubenchmark.net/">CPU 对比网站&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://post.smzdm.com/p/a5d3995l/">【零基础】软路由保姆级入门教程 一篇看懂软路由&lt;/a>&lt;/p>
&lt;p>下图截至 2021-09-22&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/computer/202309192049832.png" alt="image.png">&lt;/p></description></item></channel></rss>