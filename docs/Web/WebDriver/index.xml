<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>WebDriver on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/Web/WebDriver/</link><description>Recent content in WebDriver on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/Web/WebDriver/index.xml" rel="self" type="application/rss+xml"/><item><title>WebDriver</title><link>https://desistdaydream.github.io/docs/Web/WebDriver/WebDriver/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/Web/WebDriver/WebDriver/</guid><description>概述 参考：
MDN，WebDriver WebDriver 是远程控制接口，可以对 用户代理（i.e. Browser） 进行控制。它提供了一个平台和语言中立的协议，作为浏览器自身进程外的程序远程控制 web 浏览器行为的方法。
WebDriver 符合 W3C 标准。
https://www.w3.org/TR/webdriver1/ 2018 年标准 https://www.w3.org/TR/webdriver2/ 2023 年草案 ChromeDriver 参考：
官网 ChromeDriver 是一个开源项目，由 Chrome 开发团队开发和维护。它是 Chrome 浏览器的一个驱动程序，用于自动化控制和与 Google Chrome 浏览器进行交互。ChromeDriver 允许开发人员使用编程语言（如 Python、Java、C# 等）编写脚本，以控制 Chrome 浏览器的行为。
在 Windows 可以直接下载一个 chromedriver.exe 文件，即可与 Python 库对接，由 Python 控制浏览器。
如果想使用 浏览器自动化程序（e.g. Selenium） 来模拟用户在浏览器中的各种操作，包括但不限于点击、复制、填写等，那么 ChromeDriver 就是 Chrome 浏览器与 Selenium 进行通信的载体之一
Selenium 是一个用于 Web 应用程序测试的工具。它可以直接运行在浏览器中，模拟用户在浏览器中的各种操作，包括但不限于点击、复制、填写等。Selenium 支持市场上所有主流浏览器的自动化，包括 Chrome、Firefox、Safari 等]
Selenium 通过使用 WebDriver 支持市场上所有主流浏览器的自动化。WebDriver 是一个 API 和协议，它定义了一个语言中立的接口，用于控制 web 浏览器的行为。每个浏览器都有一个特定的 WebDriver 实现，称为驱动程序。驱动程序是负责委派给浏览器的组件，并处理与 Selenium 和浏览器之间的通信。这种分离是有意识地努力让浏览器供应商为其浏览器的实现负责的一部分。Selenium 在可能的情况下使用这些第三方驱动程序，但是在这些驱动程序不存在的情况下，它也提供了由项目自己维护的驱动程序。</description></item><item><title>Puppeteer</title><link>https://desistdaydream.github.io/docs/Web/WebDriver/Puppeteer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/Web/WebDriver/Puppeteer/</guid><description>概述 参考：
GitHub 项目，puppeteer/puppeteer 官网 中文文档？ 10分钟快速上手爬虫之Puppeteer Puppeteer 是一个 Node.js 库，它提供了一个高级 API 来通过 DevTools 协议控制 Chrome/Chromium。 Puppeteer 默认以无头模式运行，但可以配置为在完整（“有头”）Chrome/Chromium 中运行。
注意：Puppeteer 并不是一个 WebDriver 的实现。
Puppetter 安装 pnpm install puppetter
安装 Puppetter 时，会在 ${HOME}/.cache/puppeteer/ 目录下安装 Chrome 程序。
注意：若是 pnpm 安装，则需要删除原始的文件，只取消项目下的链接后执行 pnpm install puppetter 并不会在没有 Chrome 程序时执行下载逻辑。
用法 元素 https://www.cnblogs.com/totoro-cat/p/11310832.html
定位元素返回 ElementHandle 实例，然后使用 ElementHandle 下的方法处理元素</description></item><item><title>Selenium</title><link>https://desistdaydream.github.io/docs/Web/WebDriver/Selenium/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/Web/WebDriver/Selenium/</guid><description>概述 参考：
GitHub 项目，SeleniumHQ/selenium 官网 https://selenium-python.readthedocs.io/ 特定于 Python 的文档，官方文档很多示例都不全。 https://segmentfault.com/q/1010000043032537 这里表示文档不全 Selenium 使浏览器自动化，用于自动化 Web 应用程序。Selenium 通过 WebDriver 以控制浏览器。
Selenium 启动的浏览器参数
C:\Program Files\Google\Chrome\Application\chrome.exe&amp;#34; --allow-pre-commit-input --disable-background-networking --disable-backgrounding-occluded-windows --disable-client-side-phishing-detection --disable-default-apps --disable-hang-monitor --disable-popup-blocking --disable-prompt-on-repost --disable-sync --enable-automation --enable-logging --log-level=0 --no-first-run --no-service-autorun --password-store=basic --remote-debugging-port=0 --test-type=webdriver --use-mock-keychain --user-data-dir=&amp;#34;C:\Users\DESIST~1\AppData\Local\Temp\scoped_dir11888_46574381&amp;#34; --flag-switches-begin --flag-switches-end data: 正常启动浏览器的参数
&amp;#34;C:\Program Files\Google\Chrome\Application\chrome.exe&amp;#34; --flag-switches-begin --flag-switches-end --origin-trial-disabled-features=WebGPU selenium 依赖于 WebDriver，这里我们实例化了一个 Chrome 的 WebDriver。
然后使用 chromedriver.exe 启动浏览器。
Selenium 使用浏览器的方式 打开新的浏览器
使用当前运行的浏览器
通过 Chrome 的 debug 端口连接 使用指定的缓存
Selenium 关联文件与配置 ~/.</description></item></channel></rss>