<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦的站点 – WebDriver</title><link>https://desistdaydream.github.io/docs/Web/WebDriver/</link><description>Recent content in WebDriver on 断念梦的站点</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/Web/WebDriver/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: WebDriver</title><link>https://desistdaydream.github.io/docs/Web/WebDriver/WebDriver/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/Web/WebDriver/WebDriver/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://developer.mozilla.org/en-US/docs/Web/WebDriver">MDN，WebDriver&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>WebDriver 是远程控制接口，可以对用户代理进行控制。它提供了一个平台和语言中立的协议，作为浏览器自身进程外的程序远程控制 web 浏览器行为的方法。&lt;/p>
&lt;p>WebDriver 符合 &lt;a href="https://desistdaydream.github.io/docs/x_%E6%A0%87%E5%87%86%E5%8C%96/Internet/W3C.md">W3C&lt;/a> 标准。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.w3.org/TR/webdriver1/">https://www.w3.org/TR/webdriver1/&lt;/a> 2018 年标准&lt;/li>
&lt;li>&lt;a href="https://www.w3.org/TR/webdriver2/">https://www.w3.org/TR/webdriver2/&lt;/a> 2023 年草案&lt;/li>
&lt;/ul>
&lt;h1 id="chromedriver">ChromeDriver&lt;a class="td-heading-self-link" href="#chromedriver" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://chromedriver.chromium.org/">官网&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;code>ChromeDriver&lt;/code> 是一个开源项目，由 Chrome 开发团队开发和维护。它是 Chrome 浏览器的一个驱动程序，用于自动化控制和与 Google Chrome 浏览器进行交互。ChromeDriver 允许开发人员使用编程语言（如 Python、Java、C# 等）编写脚本，以控制 Chrome 浏览器的行为。&lt;/p>
&lt;p>在 Windows 可以直接下载一个 chromedriver.exe 文件，即可与 Python 库对接，由 Python 控制浏览器。&lt;/p>
&lt;p>如果想使用 &lt;a href="https://desistdaydream.github.io/docs/Web/%E6%B5%8F%E8%A7%88%E5%99%A8/WebDriver/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%87%AA%E5%8A%A8%E5%8C%96.md">浏览器自动化程序&lt;/a> 来模拟用户在浏览器中的各种操作，包括但不限于点击、复制、填写等，那么 ChromeDriver 就是 Chrome 浏览器与 Selenium 进行通信的载体之一&lt;/p>
&lt;p>&lt;code>Selenium&lt;/code> 是一个用于 Web 应用程序测试的工具。它可以直接运行在浏览器中，模拟用户在浏览器中的各种操作，包括但不限于点击、复制、填写等。Selenium 支持市场上所有主流浏览器的自动化，包括 Chrome、Firefox、Safari 等]&lt;/p>
&lt;p>Selenium 通过使用 &lt;code>WebDriver&lt;/code> 支持市场上所有主流浏览器的自动化。WebDriver 是一个 API 和协议，它定义了一个语言中立的接口，用于控制 web 浏览器的行为。每个浏览器都有一个特定的 WebDriver 实现，称为驱动程序。驱动程序是负责委派给浏览器的组件，并处理与 Selenium 和浏览器之间的通信。这种分离是有意识地努力让浏览器供应商为其浏览器的实现负责的一部分。Selenium 在可能的情况下使用这些第三方驱动程序，但是在这些驱动程序不存在的情况下，它也提供了由项目自己维护的驱动程序。&lt;/p>
&lt;p>Python 有个 selenium 库用于与 ChromeDriver 交互&lt;/p>
&lt;h1 id="实现-webdriver-的程序">实现 WebDriver 的程序&lt;a class="td-heading-self-link" href="#%e5%ae%9e%e7%8e%b0-webdriver-%e7%9a%84%e7%a8%8b%e5%ba%8f" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="drissionpage">DrissionPage&lt;a class="td-heading-self-link" href="#drissionpage" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://gitee.com/g1879/DrissionPage">Gitee 项目，g1879/DrissionPage&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://github.com/g1879/DrissionPage">GitHub 备份&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>用 requests 做数据采集面对要登录的网站时，要分析数据包、JS 源码，构造复杂的请求，往往还要应付验证码、JS 混淆、签名参数等反爬手段，门槛较高，开发效率不高。 使用浏览器，可以很大程度上绕过这些坑，但浏览器运行效率不高。&lt;/p>
&lt;p>因此，DrissionPage 设计初衷，是将它们合而为一，同时实现“写得快”和“跑得快”。能够在不同需要时切换相应模式，并提供一种人性化的使用方法，提高开发和运行效率。 除了合并两者，本库还以网页为单位封装了常用功能，提供非常简便的操作和语句，使用户可减少考虑细节，专注功能实现。 以简单的方式实现强大的功能，使代码更优雅。&lt;/p>
&lt;p>以前的版本是对 selenium 进行重新封装实现的。从 3.0 开始，作者另起炉灶，对底层进行了重新开发，摆脱对 selenium 的依赖，增强了功能，提升了运行效率。&lt;/p>
&lt;h2 id="selenium">Selenium&lt;a class="td-heading-self-link" href="#selenium" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://desistdaydream.github.io/docs/Web/WebDriver/Selenium.md">Selenium&lt;/a>&lt;/p>
&lt;h2 id="playwright">Playwright&lt;a class="td-heading-self-link" href="#playwright" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Playwright 是一个由 Microsoft 开发的用于浏览器测试和网页抓取的开源自动化库，于 2020 年 1 月 31 日推出&lt;/p>
&lt;h2 id="其他">其他&lt;a class="td-heading-self-link" href="#%e5%85%b6%e4%bb%96" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/cypress-io/cypress">Cypress&lt;/a> # 多用于测试场景。&lt;/p></description></item><item><title>Docs: Puppeteer</title><link>https://desistdaydream.github.io/docs/Web/WebDriver/Puppeteer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/Web/WebDriver/Puppeteer/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/puppeteer/puppeteer">GitHub 项目，puppeteer/puppeteer&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://pptr.dev/">官网&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://puppeteer.bootcss.com/">中文文档？&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://www.bilibili.com/video/BV13Z4y137Kt">10分钟快速上手爬虫之Puppeteer&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Puppeteer 是一个 Node.js 库，它提供了一个高级 API 来通过 DevTools 协议控制 Chrome/Chromium。 Puppeteer 默认以无头模式运行，但可以配置为在完整（“有头”）Chrome/Chromium 中运行。&lt;/p>
&lt;blockquote>
&lt;p>注意：Puppeteer 并不是一个 WebDriver 的实现。&lt;/p>
&lt;/blockquote>
&lt;h1 id="puppetter-安装">Puppetter 安装&lt;a class="td-heading-self-link" href="#puppetter-%e5%ae%89%e8%a3%85" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>pnpm install puppetter&lt;/p>
&lt;p>安装 Puppetter 时，会在 &lt;code>${HOME}/.cache/puppeteer/&lt;/code> 目录下安装 Chrome 程序。&lt;/p>
&lt;p>注意：若是 pnpm 安装，则需要删除原始的文件，只取消项目下的链接后执行 &lt;code>pnpm install puppetter&lt;/code> 并不会在没有 Chrome 程序时执行下载逻辑。&lt;/p>
&lt;h1 id="用法">用法&lt;a class="td-heading-self-link" href="#%e7%94%a8%e6%b3%95" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="元素">元素&lt;a class="td-heading-self-link" href="#%e5%85%83%e7%b4%a0" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://www.cnblogs.com/totoro-cat/p/11310832.html">https://www.cnblogs.com/totoro-cat/p/11310832.html&lt;/a>&lt;/p>
&lt;p>定位元素返回 ElementHandle 实例，然后使用 ElementHandle 下的方法处理元素&lt;/p></description></item><item><title>Docs: Selenium</title><link>https://desistdaydream.github.io/docs/Web/WebDriver/Selenium/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/Web/WebDriver/Selenium/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/SeleniumHQ/selenium">GitHub 项目，SeleniumHQ/selenium&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.selenium.dev/">官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://selenium-python.readthedocs.io/">https://selenium-python.readthedocs.io/&lt;/a> 特定于 Python 的文档，官方文档很多示例都不全。
&lt;ul>
&lt;li>&lt;a href="https://segmentfault.com/q/1010000043032537">https://segmentfault.com/q/1010000043032537&lt;/a> 这里表示文档不全&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Selenium 使浏览器自动化，用于自动化 Web 应用程序。Selenium 通过 &lt;a href="https://desistdaydream.github.io/docs/Web/WebDriver/WebDriver.md">WebDriver&lt;/a> 以控制浏览器。&lt;/p>
&lt;p>Selenium 启动的浏览器参数&lt;/p>
&lt;pre tabindex="0">&lt;code>C:\Program Files\Google\Chrome\Application\chrome.exe&amp;#34;
--allow-pre-commit-input
--disable-background-networking
--disable-backgrounding-occluded-windows
--disable-client-side-phishing-detection
--disable-default-apps
--disable-hang-monitor
--disable-popup-blocking
--disable-prompt-on-repost
--disable-sync
--enable-automation
--enable-logging
--log-level=0
--no-first-run
--no-service-autorun
--password-store=basic
--remote-debugging-port=0
--test-type=webdriver
--use-mock-keychain
--user-data-dir=&amp;#34;C:\Users\DESIST~1\AppData\Local\Temp\scoped_dir11888_46574381&amp;#34;
--flag-switches-begin
--flag-switches-end data:
&lt;/code>&lt;/pre>&lt;p>正常启动浏览器的参数&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;#34;C:\Program Files\Google\Chrome\Application\chrome.exe&amp;#34;
--flag-switches-begin
--flag-switches-end
--origin-trial-disabled-features=WebGPU
&lt;/code>&lt;/pre>&lt;p>selenium 依赖于 WebDriver，这里我们实例化了一个 Chrome 的 WebDriver。&lt;/p>
&lt;p>然后使用 chromedriver.exe 启动浏览器。&lt;/p>
&lt;h1 id="selenium-使用浏览器的方式">Selenium 使用浏览器的方式&lt;a class="td-heading-self-link" href="#selenium-%e4%bd%bf%e7%94%a8%e6%b5%8f%e8%a7%88%e5%99%a8%e7%9a%84%e6%96%b9%e5%bc%8f" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>打开新的浏览器&lt;/p>
&lt;p>使用当前运行的浏览器&lt;/p>
&lt;ul>
&lt;li>通过 Chrome 的 debug 端口连接&lt;/li>
&lt;/ul>
&lt;p>使用指定的缓存&lt;/p>
&lt;h1 id="selenium-关联文件与配置">Selenium 关联文件与配置&lt;a class="td-heading-self-link" href="#selenium-%e5%85%b3%e8%81%94%e6%96%87%e4%bb%b6%e4%b8%8e%e9%85%8d%e7%bd%ae" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;strong>~/.cache/selenium/chromedriver/win64/${VERSION}/&lt;/strong> # chromedriver.exe 文件的默认保存位置&lt;/p>
&lt;p>&lt;strong>${TEMP}/scoped_dirXXXXX/Default&lt;/strong> # Selenium 启动的浏览器的用户数据目录。浏览器会在 TMP 目录中创建用于保存用户数据的目录作为 Chrome 的个人资料路径。&lt;/p>
&lt;h1 id="webdriver">WebDriver&lt;a class="td-heading-self-link" href="#webdriver" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>Selenium WebDriver 是 &lt;a href="https://www.w3.org/TR/webdriver1/">W3C 推荐标准&lt;/a>&lt;/p>
&lt;ul>
&lt;li>WebDriver 被设计成一个简单和简洁的编程接口。&lt;/li>
&lt;li>WebDriver 是一个简洁的面向对象 API。&lt;/li>
&lt;li>它能有效地驱动浏览器。&lt;/li>
&lt;/ul>
&lt;h2 id="元素">元素&lt;a class="td-heading-self-link" href="#%e5%85%83%e7%b4%a0" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.selenium.dev/zh-cn/documentation/webdriver/elements/locators/">官方文档，WebDriver-元素-定位器&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>在 WebDriver 中有 8 种不同的内置元素定位策略：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>class 名称&lt;/strong> #&lt;/li>
&lt;li>&lt;strong>css 选择器&lt;/strong> #&lt;/li>
&lt;li>&lt;strong>ID&lt;/strong> #&lt;/li>
&lt;li>&lt;strong>name&lt;/strong> #&lt;/li>
&lt;li>&amp;hellip;&amp;hellip;略&lt;/li>
&lt;li>&lt;strong>tag 名称&lt;/strong> #&lt;/li>
&lt;li>&lt;strong>XPath&lt;/strong> # 通过 &lt;a href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80/XML.md">XML&lt;/a> 的 XPath 表达式定位元素
&lt;ul>
&lt;li>XPath 表达式可以在浏览器的 &lt;a href="https://desistdaydream.github.io/docs/Web/Browser/DevTools.md">DevTools&lt;/a> 中先使用 Ctrl+Shift+C 快捷键找到想要定位的元素，然后右键点击该元素，选择 &lt;code>复制 - 复制 XPath&lt;/code>。即可获得 XPath 表达式&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/selenium/202312031841908.png" alt="image.png">&lt;/p>
&lt;h2 id="交互">交互&lt;a class="td-heading-self-link" href="#%e4%ba%a4%e4%ba%92" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="窗口和标签页">窗口和标签页&lt;a class="td-heading-self-link" href="#%e7%aa%97%e5%8f%a3%e5%92%8c%e6%a0%87%e7%ad%be%e9%a1%b5" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.selenium.dev/zh-cn/documentation/webdriver/interactions/windows/">官方文档，WebDriver-交互-窗口&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://blog.51cto.com/u_15688254/5723115">51CTO，selenium工具UI自动化之浏览器的窗口切换（句柄切换）&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;em>WebDriver 不区分窗口和标签页&lt;/em>。如果打开了一个新标签页或窗口，Selenium 将使用 &lt;strong>Handle(句柄)&lt;/strong> 处理它，每个标签页和窗口的 Handle 是其唯一的标识符，该标识符在单个会话中保持持久性。&lt;/p>
&lt;p>可以使用以下方法获得当前窗口的窗口句柄:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">driver&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">current_window_handle&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>解释一下什么叫“不区分窗口和标签页”，窗口是指 ctrl + n 创建的浏览器窗口，标签页是指 ctrl + t 创建的浏览器标签页。&lt;code>driver.current_window_handle&lt;/code> 获取到的窗口 Handle 与窗口第一个标签页的 Handle 相同，若创建了第二个标签页，关闭了第一个标签页，则窗口的 Handle 与 第二个标签页的 Handle 相同。也就是说，窗口即是标签页。窗口就是打开的第一个标签页。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>driver.window_handles&lt;/code> 方法会获取所有窗口中所有标签页的句柄，返回一个 &lt;code>List[str]&lt;/code>，不管标签页在多少个窗口中，哪怕窗口属于其他账户，也会一并获取到。&lt;/p>
&lt;h1 id="案例">案例&lt;a class="td-heading-self-link" href="#%e6%a1%88%e4%be%8b" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;a href="https://github.com/onepureman/selenium_login_cracking">https://github.com/onepureman/selenium_login_cracking&lt;/a> 各种网站的滑动验证码使用selenium登陆破解，仅供交流学习，包括：京东，17173。。。&lt;/p>
&lt;p>&lt;a href="https://www.cnblogs.com/lihongtaoya/p/16793699.html">python+selenium+opencv验证滑块&lt;/a>&lt;/p>
&lt;ul>
&lt;li>参考了
&lt;ul>
&lt;li>&lt;a href="https://blog.csdn.net/m0_59874815/article/details/121195481">https://blog.csdn.net/m0_59874815/article/details/121195481&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gebiWangshushu/JDCaptchaCrack">https://github.com/gebiWangshushu/JDCaptchaCrack&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://www.cnblogs.com/wanghong1994/p/17786278.html">【 Python爬虫】京东滑块登录&lt;/a> 滑动太快了&lt;/p>
&lt;p>&lt;a href="http://testingpai.com/article/1689428003874#toc_h2_0">selenium 元素定位总结篇&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://blog.51cto.com/u_16099210/6987312">python获取html标签 python selenium获取html&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/647664858">selenium获取元素属性&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/638431974">https://zhuanlan.zhihu.com/p/638431974&lt;/a> # 软件测试/测试开发丨用户端web自动化测试学习笔记&lt;/p>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/94402506">https://zhuanlan.zhihu.com/p/94402506&lt;/a> python实现网站的自动登录（selenium实现，带验证码识别）&lt;/p>
&lt;p>&lt;a href="https://www.aneasystone.com/archives/2018/03/python-selenium-geetest-crack.html">https://www.aneasystone.com/archives/2018/03/python-selenium-geetest-crack.html&lt;/a> 使用 Python + Selenium 破解滑块验证码&lt;/p></description></item></channel></rss>