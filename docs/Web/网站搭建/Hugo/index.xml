<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hugo on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/Web/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/Hugo/</link><description>Recent content in Hugo on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/Web/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/Hugo/index.xml" rel="self" type="application/rss+xml"/><item><title>Hugo</title><link>https://desistdaydream.github.io/docs/Web/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/Hugo/Hugo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/Web/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/Hugo/Hugo/</guid><description>概述 参考：
GitHub 项目，gohugoio/hugo GitHub 项目，coderzh/gohugo.org（一个从19年停更的 Hugo 中文网） 官网 Wiki, Hugo(软件) Hugo 是用 Go 语言编写的静态站点生成器。Steve Francia 最初于 2013 年将 Hugo 创建为开源项目。
Hugo 创建站点时主要依赖两部分，Content(内容) 与 Layout(布局)
Content(内容) 表示数据。存在 content/ 目录下。 该目录下的每个文件都会抽象为一个 Page(页面)。其实我们在浏览到的页面就是 Hugo 中的 Page 的概念，而 content/ 目录就是存放这些 Page 的地方。内容的管理详见内容管理章节 Layout(布局) 表示页面。存在 layouts/ 目录下。 该目录下的每个文件都会抽象为一个 Template(模板) 通过多种渠道获取到数据(i.e. Content)后，需要在页面(i.e. Layout)中填充数据，这就是模板渲染的过程，渲染完成后，可供浏览的页面称之为 View(视图)。
Hugo 的这种渲染行为与 Go 的模板渲染机制一致，并提供了更丰富的功能。
Hugo 的基本使用 参考：
官方文档，入门-快速开始 这里的示例并没有安全按照官方文档走，而是在我学习之后改编的，官方文档的示例其实会让新手对于渲染逻辑和顺序产生迷惑。
hugo new site hello_world 命令将会创建一个包含以下元素的目录结构，这些目录的作用可以在下文找到：
hello_world/ ├── archetypes/ │ └── default.md ├── assets/ ├── content/ ├── data/ ├── layouts/ ├── public/ ├── static/ ├── themes/ └── config.</description></item><item><title>Hugo 配置</title><link>https://desistdaydream.github.io/docs/Web/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/Hugo/Hugo-%E9%85%8D%E7%BD%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/Web/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/Hugo/Hugo-%E9%85%8D%E7%BD%AE/</guid><description>概述 参考：
官方文档，入门 - 配置 Hugo 支持 TOML、YAML、JSON 格式的配置文件，默认配置文件名为 hugo.SUFFIX。所有的配置指令都可以写在 hugo.SUFFIX 文件中。
我们可以拆分配置文件，并将其保存在 ${ConfigDir} 目录下(默认为站点根目录下的 config/ 文件夹)。 ConfigDir 下的每个文件名代表配置中的根指令，比如：
hugo.toml 文件中有如下指令
[Params] foo = &amp;#39;bar&amp;#39; 那么拆分到 ConfigDir 目录时，则使用 params.toml 文件，内容为：
foo = &amp;#39;bar&amp;#39; 除了 Hugo 本身会用到配置文件，有些主题也会使用，并具有各自可以识别的配置指令。比如 Docsy 主题。
在官方文档，配置-所有配置设置我们可以找到 Hugo 的所有配置指令
config 目录结构 ├── config │ ├── _default │ │ ├── hugo.toml │ │ ├── languages.toml │ │ ├── menus.en.toml │ │ ├── menus.zh.toml │ │ └── params.toml │ ├── production │ │ ├── hugo.</description></item><item><title>命令行工具</title><link>https://desistdaydream.github.io/docs/Web/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/Hugo/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/Web/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/Hugo/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</guid><description>概述 参考：
官方文档，命令-hugo hugo 是 Hugo 的命令行工具。
在网站的根目录下使用 hugo 命令，可以为网站构建静态文件，并保存到 publish/ 目录中。
Sytnax(语法) hugo [COMMAND] [FLAGS]
FLAGS
-D, &amp;ndash;buildDrafts # 包含标记为 draft 的内容 hugo server Syntax(语法) hugo server [FLAGS]
FLAGS
&amp;ndash;bind STRING # 监听地址。默认值: 127.0.0.1 -p, &amp;ndash;port INT # 监听端口。默认值: 1313 -w, &amp;ndash;watch # 监听文件的改变，文件改变时重新应用，以便结果可以实时显示。默认值: true &amp;ndash;cacheDir STRING # filesystem path to cache directory。默认值: $TMPDIR/hugo_cache/</description></item></channel></rss>