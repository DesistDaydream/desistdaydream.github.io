<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦的站点 – Hugo</title><link>https://desistdaydream.github.io/docs/Web/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/Hugo/</link><description>Recent content in Hugo on 断念梦的站点</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/Web/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/Hugo/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Hugo</title><link>https://desistdaydream.github.io/docs/Web/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/Hugo/Hugo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/Web/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/Hugo/Hugo/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/gohugoio/hugo">GitHub 项目，gohugoio/hugo&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://github.com/coderzh/gohugo.org">GitHub 项目，coderzh/gohugo.org&lt;/a>（一个从19年停更的 Hugo 中文网）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://gohugo.io/">官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Hugo_(software)">Wiki，Hugo(软件)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Hugo 是用 Go 语言编写的静态站点生成器。Steve Francia 最初于 2013 年将 Hugo 创建为开源项目。&lt;/p>
&lt;p>Hugo 创建站点时主要依赖两部分，&lt;strong>Content(内容)&lt;/strong> 与 &lt;strong>Layout(布局)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Content(内容)&lt;/strong> 表示数据。存在 &lt;code>content/&lt;/code> 目录下。
&lt;ul>
&lt;li>该目录下的每个文件都会抽象为一个 &lt;strong>Page(页面)&lt;/strong>。其实我们在浏览到的页面就是 Hugo 中的 Page 的概念，而 &lt;code>content/&lt;/code> 目录就是存放这些 Page 的地方。内容的管理详见&lt;a href="https://desistdaydream.github.io/docs/Web/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/Hugo/%E5%86%85%E5%AE%B9%E7%AE%A1%E7%90%86/%E5%86%85%E5%AE%B9%E7%AE%A1%E7%90%86.md">内容管理&lt;/a>章节&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Layout(布局)&lt;/strong> 表示页面。存在 &lt;code>layouts/&lt;/code> 目录下。
&lt;ul>
&lt;li>该目录下的每个文件都会抽象为一个 &lt;strong>Template(模板)&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>通过多种渠道获取到数据(i.e. Content)后，需要在页面(i.e. Layout)中填充数据，这就是模板渲染的过程，渲染完成后，可供浏览的页面称之为 &lt;strong>View(视图)&lt;/strong>。&lt;/p>
&lt;p>Hugo 的这种渲染行为与 Go 的模板渲染机制一致，并提供了更丰富的功能。&lt;/p>
&lt;h1 id="hugo-的基本使用">Hugo 的基本使用&lt;a class="td-heading-self-link" href="#hugo-%e7%9a%84%e5%9f%ba%e6%9c%ac%e4%bd%bf%e7%94%a8" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://gohugo.io/getting-started/quick-start/">官方文档，入门-快速开始&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>这里的示例并没有安全按照官方文档走，而是在我学习之后改编的，官方文档的示例其实会让新手对于渲染逻辑和顺序产生迷惑。&lt;/p>
&lt;p>&lt;code>hugo new site hello_world&lt;/code> 命令将会创建一个包含以下元素的目录结构，这些目录的作用可以在&lt;a href="#%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84">下文&lt;/a>找到：&lt;/p>
&lt;pre tabindex="0">&lt;code>hello_world/
├── archetypes/
│ └── default.md
├── assets/
├── content/
├── data/
├── layouts/
├── public/
├── static/
├── themes/
└── config.toml
&lt;/code>&lt;/pre>&lt;p>进入到这个目录之后，执行 &lt;code>hugo server&lt;/code> 将会启动一个 HTTP 服务端&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># hugo server&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Start building sites …
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hugo v0.109.0-47b12b83e636224e5e601813ff3e6790c191e371+extended windows/amd64 &lt;span style="color:#000">BuildDate&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>2022-12-23T10:38:11Z &lt;span style="color:#000">VendorInfo&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>gohugoio
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>WARN 2023/01/22 16:15:45 found no layout file &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;HTML&amp;#34;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> kind &lt;span style="color:#4e9a06">&amp;#34;home&amp;#34;&lt;/span>: You should create a template file which matches Hugo Layouts Lookup Rules &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> this combination.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>WARN 2023/01/22 16:15:45 found no layout file &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;HTML&amp;#34;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> kind &lt;span style="color:#4e9a06">&amp;#34;taxonomy&amp;#34;&lt;/span>: You should create a template file which matches Hugo Layouts Lookup Rules &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> this combination.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>WARN 2023/01/22 16:15:45 found no layout file &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;HTML&amp;#34;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> kind &lt;span style="color:#4e9a06">&amp;#34;taxonomy&amp;#34;&lt;/span>: You should create a template file which matches Hugo Layouts Lookup Rules &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> this combination.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> EN
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-------------------+-----
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Pages &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Paginator pages &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Non-page files &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Static files &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Processed images &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Aliases &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Sitemaps &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Cleaned &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Built in &lt;span style="color:#0000cf;font-weight:bold">44&lt;/span> ms
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Watching &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> changes in D:&lt;span style="color:#4e9a06">\P&lt;/span>rojects&lt;span style="color:#4e9a06">\D&lt;/span>esistDaydream&lt;span style="color:#4e9a06">\h&lt;/span>ugo-learning&lt;span style="color:#4e9a06">\h&lt;/span>ello_world&lt;span style="color:#4e9a06">\{&lt;/span>archetypes,assets,content,data,layouts,static&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Watching &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> config changes in D:&lt;span style="color:#4e9a06">\P&lt;/span>rojects&lt;span style="color:#4e9a06">\D&lt;/span>esistDaydream&lt;span style="color:#4e9a06">\h&lt;/span>ugo-learning&lt;span style="color:#4e9a06">\h&lt;/span>ello_world&lt;span style="color:#4e9a06">\c&lt;/span>onfig.toml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Environment: &lt;span style="color:#4e9a06">&amp;#34;development&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Serving pages from memory
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Web Server is available at http://localhost:1313/ &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87">bind&lt;/span> address 127.0.0.1&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Press Ctrl+C to stop
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们可以通过浏览器，访问默认的 1313 端口浏览我们的网站，但是此时我们只能看到一个 Hugo 默认的 &lt;code>Page Not Found&lt;/code>，因为我们还没有为网站添加任何内容。&lt;/p>
&lt;p>Hugo 默认将 &lt;code>content/&lt;/code> 目录的文件作为内容数据渲染与布局结构一起渲染成页面，所以需要在 layouts/ 目录和 content/ 目录下创建文件。&lt;/p>
&lt;blockquote>
&lt;p>若只在 content/ 目录下创建文件，后台将会有警告提示：&lt;code>WARN 2023/05/25 14:45:44 found no layout file for &amp;quot;HTML&amp;quot; for kind &amp;quot;page&amp;quot;: You should create a template file which matches Hugo Layouts Lookup Rules for this combination.&lt;/code>。并且页面也没有任何东西，这是因为没有布局将这些内容渲染成页面展示出来。&lt;/p>
&lt;/blockquote>
&lt;p>首先在 &lt;code>layouts/&lt;/code> 目录下新建 &lt;code>index.html&lt;/code> 文件，并写入如下内容：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>Hello Hugo!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{{ .Content }}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>此时刷新页面，将会看到如下页面&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/hugo/20230529112224.png" alt="image.png">&lt;/p>
&lt;p>其中 &lt;code>{{ .Content }}&lt;/code> 这部分并没有被渲染内容是因为在 content/ 目录还是空的。&lt;/p>
&lt;p>我们可以使用命令 &lt;code>hugo new _index.md&lt;/code> 创建内容文件，也可以手动在 &lt;code>content/&lt;/code> 目录下创建 &lt;code>_index.md&lt;/code> 文件。推荐自己手动创建，&lt;/p>
&lt;blockquote>
&lt;p>使用命令创建的优势有一个前提，是前提是在 &lt;code>archetypes/&lt;/code> 目录下放一些原型，这并不属于基本使用的内容，以后再介绍；并且自动创建的文件带有 &lt;code>draft: true&lt;/code> 指令。Hugo 默认不会构建被标记为 &lt;a href="https://gohugo.io/getting-started/usage/#draft-future-and-expired-content">draft(草稿)、future(未来)、expired(过期)&lt;/a> 的内容，我们还要手动删掉，比较麻烦。&lt;/p>
&lt;/blockquote>
&lt;p>我们创建完文件后，写入如下内容：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-md" data-lang="md">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>title: &amp;#34;主页&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>date: 2023-05-29T11:14:20+08:00
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>这些字符是在 content/_index.md 文件中的。
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#800080;font-weight:bold">## 概述
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#800080;font-weight:bold">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>这是 &lt;span style="color:#000;font-weight:bold">**bold(粗体)**&lt;/span> 文本text, 这是 &lt;span style="color:#000;font-style:italic">*斜体*&lt;/span> 文本.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>访问 [&lt;span style="color:#204a87;font-weight:bold">Hugo&lt;/span>](&lt;span style="color:#c4a000">https://gohugo.io&lt;/span>) 网站!
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>刷新页面后，将会看到如下内容：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/hugo/20230529113139.png" alt="image.png">&lt;/p>
&lt;p>可以看到，在布局文件中的 &lt;code>{{ .Content }}&lt;/code> 部分被替换成内容了，这就是 Hugo 的模板渲染能力。&lt;/p>
&lt;h2 id="使用主题">使用主题&lt;a class="td-heading-self-link" href="#%e4%bd%bf%e7%94%a8%e4%b8%bb%e9%a2%98" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>我们自己编写 HTML 是非常复杂的，咱是要内容管理。。又不是写前端页面 o(╯□╰)o&lt;/p>
&lt;p>Hugo 贴心得提供了主题功能，可以让我们专注于内容的产出，说白了，就是不用再关心 &lt;code>layouts/&lt;/code> 目录，而是只在 &lt;code>content/&lt;/code> 目录下创建我们的内容就可以了。&lt;/p>
&lt;p>注意：由于前文我们创建了 &lt;code>layouts/index.html&lt;/code> 文件，这回覆盖主题的注意布局，所以需要删掉该文件，再进行后面的测试。&lt;/p>
&lt;p>在 Hugo 官方的主题页面中，我们可以挑选我们喜欢的主题并放在 &lt;code>themes/&lt;/code> 目录下，以便使用时供 Hugo 加载&lt;/p>
&lt;blockquote>
&lt;p>除了将主题放在 &lt;code>themes/&lt;/code> 目录下，还可以使用 Hugo 模块功能，将主题当做 Go 模块一样的东西，统一管理。这样在我们创建多个 Hugo 站点并使用同一个主题时，不用重复下载了。&lt;/p>
&lt;/blockquote>
&lt;p>我们使用官方示例中的基本主题。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke themes/ananke
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;theme = &amp;#39;ananke&amp;#39;&amp;#34;&lt;/span> &amp;gt;&amp;gt; hugo.toml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>主题将会被下载到 &lt;code>thems/&lt;/code> 目录中，并且我们在 hugo.toml 文件中指定要使用的主题名称。&lt;/p>
&lt;p>此时再打开 1313 端口，我们就可以看到我们的站点带上了样式&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/hugo/20230529113945.png" alt="image.png">&lt;/p>
&lt;h3 id="通过-hugo-模块使用主题">通过 Hugo 模块使用主题&lt;a class="td-heading-self-link" href="#%e9%80%9a%e8%bf%87-hugo-%e6%a8%a1%e5%9d%97%e4%bd%bf%e7%94%a8%e4%b8%bb%e9%a2%98" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>想要使用 Hugo 模块，我们需要 Go 环境&lt;/p>
&lt;p>执行如下命令&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>hugo mod init github.com/DesistDaydream/hugo-learning/hello_world
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hugo mod get github.com/theNewDynamic/gohugo-theme-ananke
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>此时主题将会被下载到 &lt;code>%TMP%/hugo_cache/modules/filecache/modules/pkg/mod/github.com&lt;/code> 目录下，然后我们可以删掉项目目录中 themes/ 目录下的主题文件了~o(∩_∩)o&lt;/p>
&lt;p>修改 config.toml 文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">theme&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;github.com/theNewDynamic/gohugo-theme-ananke&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用 Hugo 的模块时，也要像 Go 一样配置 Proxy，在 hugo.toml 文件中添加如下内容：：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">module&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">proxy&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;https://goproxy.cn,https://goproxy.io,direct&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="发布我们的网站">发布我们的网站&lt;a class="td-heading-self-link" href="#%e5%8f%91%e5%b8%83%e6%88%91%e4%bb%ac%e7%9a%84%e7%bd%91%e7%ab%99" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>在基本示例中，我们只是在本地调试，如果想要将网站运行在服务器上，那么肯定需要像前端代码一样，将这些文件打包才可以。&lt;/p>
&lt;p>Hugo 打包非常简单，执行 &lt;code>hugo&lt;/code> 命令即可在 &lt;code>public/&lt;/code> 目录中生成我们网站的静态页面，将这个目录下的所有文件，统统放到 Nginx 中响应页面的目录，就可以访问我们自己的网站了~&lt;/p>
&lt;h3 id="最佳实践">最佳实践&lt;a class="td-heading-self-link" href="#%e6%9c%80%e4%bd%b3%e5%ae%9e%e8%b7%b5" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>很多时候，我们通过工作流（GitHub Action 等）将 &lt;code>public/&lt;/code> 目录下的文件转存到新项目中，并不会将原始内容与打包好的前端代码放在一起。&lt;/p>
&lt;h2 id="目录结构">目录结构&lt;a class="td-heading-self-link" href="#%e7%9b%ae%e5%bd%95%e7%bb%93%e6%9e%84" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://gohugo.io/getting-started/directory-structure/">官方文档，入门-目录结构&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h3 id="archetypes">archetypes&lt;a class="td-heading-self-link" href="#archetypes" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>&lt;strong>archetypes&lt;/strong> 译为&lt;strong>原型&lt;/strong>，是创建新 Content 时使用的模板。我们在使用 &lt;code>hugo new&lt;/code> 命令创建新的 Content 时，会使用该目录下的 default.md 文件作为原型创建新的文件。&lt;/p>
&lt;p>比如快速开始中，我们创建了一个名为 my-first-post.md 的文件，其内容为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-md" data-lang="md">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>title: &amp;#34;My First Post&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>date: 2023-05-25T01:40:23+08:00
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>draft: true
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这是因为使用了 archetypes/default.md 文件作为原型：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-md" data-lang="md">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>title: &amp;#34;{{ replace .Name &amp;#34;-&amp;#34; &amp;#34; &amp;#34; | title }}&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>date: {{ .Date }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>draft: true
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://gohugo.io/content-management/archetypes/">官方文档，内容管理-原型&lt;/a>&lt;/p>
&lt;h3 id="assets">assets&lt;a class="td-heading-self-link" href="#assets" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>存放所有需要由 Hugo Pipes 处理的文件。&lt;/p>
&lt;h3 id="config">config&lt;a class="td-heading-self-link" href="#config" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>注意：config 目录并不会随着 &lt;code>hugo new site example&lt;/code> 命令自动创建出来。而是在我们需要将单一配置文件拆分时，手动创建并使用的。&lt;/p>
&lt;/blockquote>
&lt;p>Hugo 附带了大量的配置指令。config 目录是将这些指令存储为 JSON、YAML 或 TOML 文件的地方。每个根设置对象都可以作为自己的文件并按环境构建。设置最少且不需要环境的项目可以在其根目录下使用单个 config.toml 文件。&lt;/p>
&lt;p>许多站点可能几乎不需要配置，但 Hugo 附带了大量 &lt;a href="https://gohugo.io/getting-started/configuration/#all-configuration-settings">configuration directives(配置指令)&lt;/a>，用于更详细地指导我们希望 Hugo 如何构建网站。注意：默认情况下不创建 config 目录。&lt;/p>
&lt;h3 id="content">content/&lt;a class="td-heading-self-link" href="#content" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>我们使用 Hugo 创建的网站的所有内容通常都要放在 content/ 目录中。content/ 目录下的每个顶级文件夹称为 &lt;a href="https://gohugo.io/content-management/sections/">content section(内容部分)&lt;/a>。&lt;/p>
&lt;p>比如，如果我的网站有三大块，分别是 blog、articles、tuorials，那么我们需要创建如下的目录结构&lt;/p>
&lt;pre tabindex="0">&lt;code>example/
├── content/
│ ├── blog/
│ ├── articles/
│ └── tuorials/
&lt;/code>&lt;/pre>&lt;p>Hugo 使用 section 的名称作为默认的 &lt;a href="https://gohugo.io/content-management/types/">content types(内容类型)&lt;/a>。假如有这么一个文件 content/blog/my-first-event.md，则这篇文章的内容类型就是 blog 类型。&lt;/p>
&lt;p>通过这种对网站内容的分类方式，更利于搜索、整理等。&lt;/p>
&lt;h3 id="data">data/&lt;a class="td-heading-self-link" href="#data" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>该目录用于存放 Hugo 在生成我的网站时可以使用的配置文件。可以用 YAML、JSON 或 TOML 格式编写这些文件。除了添加到此文件夹的文件外，还可以创建从动态内容中提取的数据模板。&lt;/p>
&lt;h3 id="layouts">layouts/&lt;a class="td-heading-self-link" href="#layouts" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>以 &lt;code>.html&lt;/code> 文件的形式存储模板，这些文件指定如何将您的内容视图呈现到静态网站中。模板包括 &lt;a href="https://gohugo.io/templates/list/">list pages&lt;/a>, your &lt;a href="https://gohugo.io/templates/homepage/">homepage&lt;/a>, &lt;a href="https://gohugo.io/templates/taxonomy-templates/">taxonomy templates&lt;/a>, &lt;a href="https://gohugo.io/templates/partials/">partials&lt;/a>, &lt;a href="https://gohugo.io/templates/single-page-templates/">single page templates&lt;/a> 等等，不同名称的模板对应渲染不同的页面。可以在&lt;a href="https://gohugo.io/templates/lookup-order/#hugo-layouts-lookup-rules-with-theme">这里&lt;/a>找到 Hugo 在渲染不同页面时需要使用 layouts/ 目录下的哪些文件。&lt;/p>
&lt;p>如果我们不使用主题，我们则需要在 &lt;code>layouts/&lt;/code> 目录中自己编写 HTML 文件以供 Hugo 渲染前端页面。&lt;/p>
&lt;h3 id="public">public/&lt;a class="td-heading-self-link" href="#public" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>使用 &lt;code>hugo&lt;/code> 命令生成网站的静态文件后，将会保存到 public 目录。public 目录生成的静态文件，可以直接通过 web 服务访问到。&lt;/p>
&lt;h3 id="static">static/&lt;a class="td-heading-self-link" href="#static" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>存储所有静态内容：图像、CSS、JavaScript 等。当 Hugo 构建您的站点时，静态目录中的所有资产都会按原样复制。使用静态文件夹的一个很好的例子是在 Google Search Console 上验证网站所有权，您希望 Hugo 在不修改其内容的情况下复制完整的 HTML 文件。&lt;/p>
&lt;h3 id="themes">themes/&lt;a class="td-heading-self-link" href="#themes" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>更推荐的是使用 Hugo 模块使用主题，该目录不推荐使用。&lt;/p>
&lt;/blockquote>
&lt;p>Hugo 主题可以安装到该目录，使用 &lt;code>hugo server --themes&lt;/code> 指定使用的主题时，将会从该目录出寻找。&lt;/p>
&lt;h3 id="hugotoml">hugo.toml&lt;a class="td-heading-self-link" href="#hugotoml" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>Hugo 运行站点时所使用的配置文件。&lt;/p>
&lt;p>推荐使用 &lt;code>config/&lt;/code> 目录，以便拆分 hugo.toml 文件。可以将 hugo.tom 文件移动到在 &lt;code>config/_default/hugo.toml&lt;/code> 处作为默认配置。&lt;/p>
&lt;h1 id="hugo-modules">Hugo Modules&lt;a class="td-heading-self-link" href="#hugo-modules" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>Hugo Modules(模块) 是一个类似 Go 模块一样的存在。模块可以是我们的主项目或其他较小的模块，提供 Hugo 的 7 种组件类型中的一种或多种：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>static&lt;/strong>&lt;/li>
&lt;li>&lt;strong>content&lt;/strong>&lt;/li>
&lt;li>&lt;strong>layouts&lt;/strong>&lt;/li>
&lt;li>&lt;strong>data&lt;/strong>&lt;/li>
&lt;li>&lt;strong>assets&lt;/strong>&lt;/li>
&lt;li>&lt;strong>i18n&lt;/strong>&lt;/li>
&lt;li>&lt;strong>archetypes&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>在 hugo.toml 文件中的 module 字段添加配置，即可为站点设置引用的模块，我们可以将主题当做一个模块。&lt;/p>
&lt;p>&lt;strong>注意：Hugo 模块与 Go 模块一样，也需要一个代理服务器，我们只需要在 module 部分配置 proxy 指令，值与 go proxy 一样即可&lt;/strong>&lt;/p>
&lt;p>详见 &lt;a href="https://desistdaydream.github.io/docs/Web/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/Hugo/%E6%A8%A1%E5%9D%97/%E6%A8%A1%E5%9D%97.md">模块&lt;/a>&lt;/p>
&lt;h1 id="安装-hugo">安装 Hugo&lt;a class="td-heading-self-link" href="#%e5%ae%89%e8%a3%85-hugo" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>安装 &lt;code>hogo&lt;/code> 命令行工具，即可开始使用 Hugo。推荐下载扩展版 hugo，即名字带有 extended 的文件。&lt;/p>
&lt;p>从 &lt;a href="https://github.com/gohugoio/hugo/releases">release&lt;/a> 页面下载带 &lt;strong>extended&lt;/strong> 后缀的文件。&lt;/p>
&lt;h1 id="关联文件与配置">关联文件与配置&lt;a class="td-heading-self-link" href="#%e5%85%b3%e8%81%94%e6%96%87%e4%bb%b6%e4%b8%8e%e9%85%8d%e7%bd%ae" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;strong>hugo.toml | hugo.yaml | hugo.json&lt;/strong> # 站点的配置文件，通常在站点的根目录。在 0.110.0 版本之前，默认的文件名是 config.toml 之类的。&lt;/p>
&lt;p>&lt;strong>${Site_Root_dir}/config&lt;/strong> # 可以将站点根目录下的 config.toml | config.yaml | config.json 拆分后保存到该目录。&lt;/p>
&lt;p>Hugo 运行时所需的缓存目录。包括需要使用的模块等：&lt;/p>
&lt;ul>
&lt;li>Windows:
&lt;ul>
&lt;li>&lt;strong>%LocalAppData/hugo_cache/&lt;/strong>&lt;/li>
&lt;li>&lt;strong>%TMP%/hugo_cache/&lt;/strong> # 弃用&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Linux:
&lt;ul>
&lt;li>&lt;strong>${TMP}/hugo_cache/&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="hugo-与-obsidian">Hugo 与 Obsidian&lt;a class="td-heading-self-link" href="#hugo-%e4%b8%8e-obsidian" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="url-与-markdown-链接问题">URL 与 markdown 链接问题&lt;a class="td-heading-self-link" href="#url-%e4%b8%8e-markdown-%e9%93%be%e6%8e%a5%e9%97%ae%e9%a2%98" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://cloud.tencent.com/developer/article/1688894">https://cloud.tencent.com/developer/article/1688894&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Obsidian 内部链接是这种格式 &lt;code>[B cd](/A/b/B%20cd.md)&lt;/code>&lt;/p>
&lt;p>Hugo 生成的内容资源的 URL 是 &lt;a href="https://demo.org/a/b/b-cd">https://demo.org/a/b/b-cd&lt;/a>&lt;/p>
&lt;p>此时，如果我们从页面点击 B cd，将会跳转到 &lt;a href="https://demo.org/A/b/B-cd">https://demo.org/A/b/B-cd&lt;/a> 页面，此时将会看到 404。。。。&lt;/p>
&lt;p>解决方式：&lt;/p>
&lt;p>在 hugo.config 中添加 &lt;code>disablePathToLower = true&lt;/code> 配置，以关闭转换为小写的功能。&lt;/p>
&lt;p>在 layouts/404.html 中添加如下脚本：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">script&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">currenturl&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">location&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">href&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">replace&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">/%20/g&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;-&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">).&lt;/span>&lt;span style="color:#000">replace&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;.md&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">currenturl&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#000">location&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">href&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">location&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">href&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">currenturl&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#a40000">/script&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>此时跳转到 404 时，将会去掉 &lt;code>.md&lt;/code> 后缀，以及将所有的 &lt;code>%20&lt;/code> 替换成 &lt;code>-&lt;/code>&lt;/p></description></item><item><title>Docs: Hugo 配置</title><link>https://desistdaydream.github.io/docs/Web/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/Hugo/Hugo-%E9%85%8D%E7%BD%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/Web/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/Hugo/Hugo-%E9%85%8D%E7%BD%AE/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://gohugo.io/getting-started/configuration/">官方文档，入门-配置&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Hugo 支持 &lt;a href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E6%97%A0%E6%B3%95%E5%88%86%E7%B1%BB%E7%9A%84%E8%AF%AD%E8%A8%80/TOML.md">TOML&lt;/a>、&lt;a href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E6%97%A0%E6%B3%95%E5%88%86%E7%B1%BB%E7%9A%84%E8%AF%AD%E8%A8%80/YAML.md">YAML&lt;/a>、&lt;a href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E6%97%A0%E6%B3%95%E5%88%86%E7%B1%BB%E7%9A%84%E8%AF%AD%E8%A8%80/JSON.md">JSON&lt;/a> 格式的配置文件，默认配置文件名为 &lt;strong>hugo.SUFFIX&lt;/strong>。所有的配置指令都可以写在 hugo.SUFFIX 文件中。&lt;/p>
&lt;p>我们可以拆分配置文件，并将其保存在 &lt;code>${ConfigDir}&lt;/code> 目录下(默认为站点根目录下的 &lt;code>config/&lt;/code> 文件夹)。 ConfigDir 下的每个文件名代表配置中的根指令，比如：&lt;/p>
&lt;p>hugo.toml 文件中有如下指令&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">Params&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;bar&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>那么拆分到 ConfigDir 目录时，则使用 &lt;code>params.toml&lt;/code> 文件，内容为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;bar&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>除了 Hugo 本身会用到配置文件，有些主题也会使用，并具有各自可以识别的配置指令。比如 Docsy 主题。&lt;/p>
&lt;p>在&lt;a href="https://gohugo.io/getting-started/configuration/#all-configuration-settings">官方文档，配置-所有配置设置&lt;/a>我们可以找到 Hugo 的所有配置指令&lt;/p>
&lt;h2 id="config-目录结构">config 目录结构&lt;a class="td-heading-self-link" href="#config-%e7%9b%ae%e5%bd%95%e7%bb%93%e6%9e%84" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>├── config
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── _default
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   ├── hugo.toml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   ├── languages.toml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   ├── menus.en.toml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   ├── menus.zh.toml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   └── params.toml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── production
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   ├── hugo.toml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   └── params.toml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   └── staging
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│       ├── hugo.toml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│       └── params.toml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>_default/&lt;/code> 目录是站点的默认配置，可以直接保存单个 config 文件。&lt;/p>
&lt;p>production 与 staging 文件夹用来区分运行时配置，比如使用 &lt;code>hugo --environment staging&lt;/code> 命令时，Hugo 将会使用 &lt;code>config/_default/&lt;/code> 和 &lt;code>config/staging&lt;/code> 这两个下的所有文件，将所有文件合并后生成一个单独的临时 config 文件，作为站点运行时的配置文件。&lt;/p>
&lt;p>这种目录结构，可以帮助我们区分不同环境(比如开发环境、生产环境等)下运行网站所需要使用的配置。&lt;/p>
&lt;blockquote>
&lt;p>Hugo 有个默认值，执行 &lt;code>hugo server&lt;/code> 命令时，是在本地运行网站，所以默认为开发环境，使用 &lt;code>config/development/&lt;/code> 目录；而执行 &lt;code>hugo&lt;/code> 命令时，是要构建静态文件，所以默认为生产环境，使用 &lt;code>config/production&lt;/code> 目录。&lt;/p>
&lt;/blockquote>
&lt;h1 id="基础">基础&lt;a class="td-heading-self-link" href="#%e5%9f%ba%e7%a1%80" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;strong>baseURL&lt;/strong>(STRING) # 我们发布的网站的绝对 URL（协议，主机，路径和斜杠），比如 &lt;a href="https://www.example.org/docs/">https://www.example.org/docs/&lt;/a>&lt;/p>
&lt;p>&lt;strong>title&lt;/strong>(STRING) #&lt;/p>
&lt;p>&lt;strong>contentDir = &amp;ldquo;content/zh-cn&amp;rdquo;&lt;/strong> # &lt;strong>必须的&lt;/strong>。Hugo 从该配置指定的目录中读取内容文件。可以为各个语言单独配置。&lt;code>默认值：content&lt;/code>&lt;/p>
&lt;p>&lt;strong>defaultContentLanguage = &amp;ldquo;zh-cn&amp;rdquo;&lt;/strong>&lt;/p>
&lt;p>&lt;strong>defaultContentLanguageInSubdir = false&lt;/strong>&lt;/p>
&lt;p>&lt;strong>enableGitInfo&lt;/strong> # &lt;code>默认值：false&lt;/code>&lt;/p>
&lt;ul>
&lt;li>注意：&lt;a href="https://github.com/gohugoio/hugo/issues/3071">issue 3071&lt;/a>，如果文件名、目录名是中文的话，将会无法获取到 Git 信息。也就无法让文档下面显示最后编辑时间。需要修改 git 的配置 core.quotePath 的值为 false。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>markup&lt;/strong>(&lt;a href="#markup%20%E9%83%A8%E5%88%86">markup&lt;/a>)&lt;/p>
&lt;h2 id="url-生成逻辑控制">URL 生成逻辑控制&lt;a class="td-heading-self-link" href="#url-%e7%94%9f%e6%88%90%e9%80%bb%e8%be%91%e6%8e%a7%e5%88%b6" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>disablePathToLower&lt;/strong>(BOOLEAN) # 是否关闭 URL 转换为小写字母的逻辑&lt;/p>
&lt;p>&lt;strong>uglyURLs&lt;/strong>(BOOLEAN) # URL 路径中是否要带 .html 后缀&lt;/p>
&lt;h1 id="markup-部分">markup 部分&lt;a class="td-heading-self-link" href="#markup-%e9%83%a8%e5%88%86" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>markup 部分的配置用于处理 Markdown 和其他 Markup(标记) 相关配置。&lt;/p>
&lt;p>&lt;strong>[goldmark]&lt;/strong>&lt;/p>
&lt;p>Goldmark 部分用于配置适用于 Go 的 Markdown 解析库，Hugo 从 0.60 开始使用。它速度快，符合 CommonMark 标准，而且非常灵活。&lt;/p>
&lt;p>&lt;strong>[parser.attribute]&lt;/strong>&lt;/p>
&lt;p>&lt;strong>block&lt;/strong>(BOOLEAN) # 是否为 block 启用 &lt;a href="https://gohugo.io/content-management/markdown-attributes/">Markdown 属性&lt;/a>&lt;/p>
&lt;p>&lt;strong>[renderer]&lt;/strong>&lt;/p>
&lt;p>&lt;strong>unsafe&lt;/strong>(BOOLEAN) # 是否让 Goldmark 渲染器将在 Markdown 中渲染原始 HTML。开启后是不安全的。&lt;code>默认值: false&lt;/code>。&lt;/p>
&lt;p>&lt;strong>[tableOfContents]&lt;/strong>&lt;/p>
&lt;p>tableOfContents 部分配置目录相关指令。这些设定只适用于 Goldmark 渲染器。（这个目录是指文章的 &lt;em>大纲&lt;/em>，并不是文件系统中的目录）&lt;/p>
&lt;p>&lt;strong>startLevel&lt;/strong>(INT) # 目录中显示的标题级别。从该指令的级别开始显示&lt;/p>
&lt;p>&lt;strong>endLevel&lt;/strong>(INT) # 目录中显示的标题级别。到该指令的级别结束显示&lt;/p>
&lt;p>&lt;strong>ordered&lt;/strong>(BOOLEAN) # 是否生成有序列表而不是无序列表。&lt;/p>
&lt;p>&lt;strong>[highlight]&lt;/strong>&lt;/p>
&lt;p>highlight 部分配置高亮部分（通常都是代码块）&lt;/p>
&lt;p>&lt;strong>style&lt;/strong>(STRING) # 高亮部分的样式&lt;/p>
&lt;h1 id="module-部分">module 部分&lt;a class="td-heading-self-link" href="#module-%e9%83%a8%e5%88%86" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://gohugo.io/hugo-modules/configuration/">官方文档，模块-配置&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>module 部分的配置用于处理 Hugo 模块的运行逻辑。&lt;/p>
&lt;p>&lt;strong>proxy = &amp;lt;STRING&amp;gt;&lt;/strong> # 定义用于下载模块的代理服务器。与 go 模块的 proxy 原理一样。&lt;code>默认值：direct&lt;/code>&lt;/p>
&lt;p>&lt;strong>[[imports]]&lt;/strong>&lt;/p>
&lt;p>&lt;strong>path&lt;/strong>(STRING) # Hugo 指定 Hugo 要使用的的 &lt;a href="docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go%20%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/Go%20Module.md">Go Module&lt;/a>。值是标准的 Go 模块路径，可以是网络上的，也可以是本地的。&lt;/p>
&lt;h1 id="sitemap-部分">sitemap 部分&lt;a class="td-heading-self-link" href="#sitemap-%e9%83%a8%e5%88%86" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://gohugo.io/templates/sitemap-template/">官方文档，模板-站点地图模板&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>filename = &amp;lt;STRING&amp;gt;&lt;/strong> # 生成的 sitemap 文件的名称。&lt;code>默认值：sitemap.xml&lt;/code>&lt;/p>
&lt;h1 id="params-部分">params 部分&lt;a class="td-heading-self-link" href="#params-%e9%83%a8%e5%88%86" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>这部分的配置通常用来配置各种 Hugo 主题。这里面的指令通常会被主题读取并生成样式。&lt;/p></description></item><item><title>Docs: 命令行工具</title><link>https://desistdaydream.github.io/docs/Web/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/Hugo/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/Web/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/Hugo/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://gohugo.io/commands/hugo/">官方文档，命令-hugo&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;code>hugo&lt;/code> 是 Hugo 的命令行工具。&lt;/p>
&lt;p>在网站的根目录下使用 &lt;code>hugo&lt;/code> 命令，可以为网站构建静态文件，并保存到 &lt;code>publish/&lt;/code> 目录中。&lt;/p>
&lt;h2 id="sytnax语法">Sytnax(语法)&lt;a class="td-heading-self-link" href="#sytnax%e8%af%ad%e6%b3%95" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>hugo [COMMAND] [FLAGS]&lt;/strong>&lt;/p>
&lt;p>&lt;strong>FLAGS&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-D, &amp;ndash;buildDrafts&lt;/strong> # 包含标记为 draft 的内容&lt;/li>
&lt;/ul>
&lt;h1 id="hugo-server">hugo server&lt;a class="td-heading-self-link" href="#hugo-server" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="syntax语法">Syntax(语法)&lt;a class="td-heading-self-link" href="#syntax%e8%af%ad%e6%b3%95" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>hugo server [FLAGS]&lt;/strong>&lt;/p>
&lt;p>FLAGS&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&amp;ndash;bind STRING&lt;/strong> # 监听地址。&lt;code>默认值: 127.0.0.1&lt;/code>&lt;/li>
&lt;li>&lt;strong>-p, &amp;ndash;port INT&lt;/strong> # 监听端口。&lt;code>默认值: 1313&lt;/code>&lt;/li>
&lt;li>&lt;strong>-w, &amp;ndash;watch&lt;/strong> # 监听文件的改变，文件改变时重新应用，以便结果可以实时显示。&lt;code>默认值: true&lt;/code>&lt;/li>
&lt;li>&lt;strong>&amp;ndash;cacheDir STRING&lt;/strong> # filesystem path to cache directory。&lt;code>默认值: $TMPDIR/hugo_cache/&lt;/code>&lt;/li>
&lt;/ul></description></item><item><title>Docs: 模板</title><link>https://desistdaydream.github.io/docs/Web/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/Hugo/%E6%A8%A1%E6%9D%BF/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/Web/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/Hugo/%E6%A8%A1%E6%9D%BF/</guid><description/></item><item><title>Docs: 模块</title><link>https://desistdaydream.github.io/docs/Web/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/Hugo/%E6%A8%A1%E5%9D%97/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/Web/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/Hugo/%E6%A8%A1%E5%9D%97/</guid><description/></item><item><title>Docs: 内容管理</title><link>https://desistdaydream.github.io/docs/Web/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/Hugo/%E5%86%85%E5%AE%B9%E7%AE%A1%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/Web/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/Hugo/%E5%86%85%E5%AE%B9%E7%AE%A1%E7%90%86/</guid><description/></item><item><title>Docs: 主题</title><link>https://desistdaydream.github.io/docs/Web/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/Hugo/%E4%B8%BB%E9%A2%98/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/Web/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/Hugo/%E4%B8%BB%E9%A2%98/</guid><description/></item></channel></rss>