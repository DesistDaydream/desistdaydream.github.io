<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦的站点 – Nginx</title><link>https://desistdaydream.github.io/docs/Web/Nginx/</link><description>Recent content in Nginx on 断念梦的站点</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/Web/Nginx/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Nginx</title><link>https://desistdaydream.github.io/docs/Web/Nginx/Nginx/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/Web/Nginx/Nginx/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/nginx/nginx">GitHub 项目，nginx/nginx&lt;/a>
&lt;ul>
&lt;li>原始代码：&lt;a href="https://hg.nginx.org/nginx/">https://hg.nginx.org/nginx/&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="http://nginx.org/">org 官方网站&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.nginx.com/">官方网站&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.nginx.com/products/nginx/modules/">官方网站,动态模块列表&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Nginx 称为 Engine X，可以做为 &lt;a href="https://desistdaydream.github.io/docs/Web/Web.md">Web&lt;/a> 服务器、代理服务器、缓存服务器、负载均衡器 等来使用。&lt;/p>
&lt;p>传统上基于进程或线程模型架构的 web 服务通过每进程或每线程处理并发连接请求，这势必会在网络和 I/O 操作时产生阻塞，其另一个必然结果则是对内存或 CPU 的利用率低下。生成一个新的进程/线程需要事先备好其运行时环境，这包括为其分配堆内存和栈内存，以及为其创建新的执行上下文等。这些操作都需要占用 CPU，而且过多的进程/线程还会带来线程抖动或频繁的上下文切换，系统性能也会由此进一步下降。&lt;/p>
&lt;p>在设计的最初阶段，nginx 的主要着眼点就是其高性能以及对物理计算资源的高密度利用，因此其采用了不同的架构模型。受启发于多种操作系统设计中基于“事件”的高级处理机制，nginx 采用了模块化、事件驱动、异步、单线程及非阻塞的架构，并大量采用了多路复用及事件通知机制。在 nginx 中，连接请求由为数不多的几个仅包含一个线程的进程 worker 以高效的回环(run-loop)机制进行处理，而每个 worker 可以并行处理数千个的并发连接及请求。&lt;/p>
&lt;p>Nginx 会按需同时运行多个进程：一个主进程(master)和几个工作进程(worker)，配置了缓存时还会有缓存加载器进程(cache loader)和缓存管理器进程(cache manager)等。所有进程均是仅含有一个线程，并主要通过“共享内存”的机制实现进程间通信。主进程以 root 用户身份运行，而 worker、cache loader 和 cache manager 均应以非特权用户身份运行。&lt;/p>
&lt;p>Nginx 特性：&lt;/p>
&lt;ol>
&lt;li>模块化设计，较好的扩展性，所有配置均有指定的模块进行处理。&lt;/li>
&lt;li>高可靠 master &amp;ndash;&amp;gt; worker，主控进程不接收和响应用户请求，主控进程负责解析配置文件并生成多个工作进程，工作进程来响应用户请求
&lt;ol>
&lt;li>主控进程读取并验证配置，创建或绑定套接字，启动及终止和维护 worker 进程的个数，无须重启进程让新配置的配置文件进行加载，以及完成平滑版本升级等等&lt;/li>
&lt;li>工作进程，负责缓存加载的(反向代理时候用)，负责响应用户请求，cache manager 缓存管理&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>低内存消耗，10000 个 keep-alive 模式下的 connection，仅需 2.5MB 内存&lt;/li>
&lt;li>支持热部署，不停机而更新配置文件，日志文件滚动，升级程序版本&lt;/li>
&lt;li>支持事件驱动、AIO、mmap&lt;/li>
&lt;/ol>
&lt;p>基本功能：&lt;/p>
&lt;ul>
&lt;li>静态资源的 web 服务器，能缓存打开的文件描述符&lt;/li>
&lt;li>http、SMTP、pop3 协议的反向代理服务器&lt;/li>
&lt;li>缓存加速、负载均衡&lt;/li>
&lt;li>支持 FastCGI(fpm，LNMP)，uWSGI(Python)等&lt;/li>
&lt;li>模块化(非 DSO 机制)、过滤器 zip、SSI 及图像的大小调整&lt;/li>
&lt;li>支持 SSL(https)&lt;/li>
&lt;/ul>
&lt;p>扩展功能&lt;/p>
&lt;ul>
&lt;li>基于名称和 IP 的虚拟主机&lt;/li>
&lt;li>支持 keepalive&lt;/li>
&lt;li>支持平滑升级&lt;/li>
&lt;li>定制访问日志&lt;/li>
&lt;li>支持 url 重写&lt;/li>
&lt;li>支持路径别名&lt;/li>
&lt;li>支持基于 IP 及用户的访问控制&lt;/li>
&lt;li>支持速率限制，支持并发数限制&lt;/li>
&lt;/ul>
&lt;h2 id="nginx-架构">Nginx 架构&lt;a class="td-heading-self-link" href="#nginx-%e6%9e%b6%e6%9e%84" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>详见 &lt;a href="https://desistdaydream.github.io/docs/Web/Nginx/Nginx%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.md">Nginx 源码解析&lt;/a>&lt;/p>
&lt;h2 id="总结">总结&lt;a class="td-heading-self-link" href="#%e6%80%bb%e7%bb%93" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>看似很复杂，其实总结起来 Nginx 主要就是两个功能，这两个功能也是配置文件中的主要内容，各种指令都离不开这两方面。&lt;/p>
&lt;ol>
&lt;li>定义接收流量的人口(port 或者 域名等)&lt;/li>
&lt;li>定义处理流量的规则(转发或者丢弃等)&lt;/li>
&lt;/ol>
&lt;p>所以，&lt;strong>Nginx 的本质，就是流量处理&lt;/strong>&lt;/p>
&lt;h1 id="nginx-部署">Nginx 部署&lt;a class="td-heading-self-link" href="#nginx-%e9%83%a8%e7%bd%b2" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="docker-运行-nginx">docker 运行 Nginx&lt;a class="td-heading-self-link" href="#docker-%e8%bf%90%e8%a1%8c-nginx" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>(可选)需要在宿主机的 /etc/nginx 下准备 nginx 的配置文件。这些基本配置文件可以先启动一个 nginx 容器，将容器内的配置文件全部拷贝到宿主机上即可。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker run -d --name nginx --network host --restart&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>always &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> -v /etc/nginx:/etc/nginx:ro &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> nginx:stable-alpine
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>也可以使用自己的配置来运行 nginx&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>mkdir -p /opt/nginx/conf/stream.d
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 生成配置文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cat &amp;gt; /opt/nginx/conf/nginx.conf &lt;span style="color:#4e9a06">&amp;lt;&amp;lt;EOF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">user nginx;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">worker_processes auto;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">error_log /var/log/nginx/error.log warn;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">pid /var/run/nginx.pid;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">events {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> worker_connections 1024;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">}
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">stream {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> include /etc/nginx/stream.d/*.conf;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">}
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">http {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">}
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 运行&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker run -d --name nginx --network host --restart&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>always &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> -v /opt/nginx/conf/stream.d:/etc/nginx/stream.d:ro &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> -v /opt/nginx/conf/nginx.conf:/etc/nginx/nginx.conf:ro &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> nginx:stable-alpine
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>挂载一些静态文件到容器中以响应客户端的 web 请求&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">StaticFiles&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;/root/projects/DesistDaydream/javascript-learning/9_browser&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker run -d --name nginx --network host --restart&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>always &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> -v &lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">StaticFiles&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>:/usr/share/nginx/html:ro &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> nginx:stable-alpine
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="nginx-关联文件">Nginx 关联文件&lt;a class="td-heading-self-link" href="#nginx-%e5%85%b3%e8%81%94%e6%96%87%e4%bb%b6" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;strong>/etc/nginx/&lt;/strong> # nginx 运行所需配置所在目录&lt;/p>
&lt;ul>
&lt;li>&lt;strong>./nginx.conf&lt;/strong> # nginx 主程序运行所读取的默认配置文件。&lt;/li>
&lt;/ul>
&lt;p>配置文件官方介绍：&lt;a href="https://docs.nginx.com/nginx/admin-guide/basic-functionality/managing-configuration-files/">https://docs.nginx.com/nginx/admin-guide/basic-functionality/managing-configuration-files/&lt;/a>&lt;/p>
&lt;p>修改完配置后，可以使用 nginx -s reload 命令使之生效&lt;/p>
&lt;p>下面是 nginx 默认的基本配置示例，可以实现一个简单的 web 服务。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">user&lt;/span> &lt;span style="color:#4e9a06">nginx&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># 指定以nginx用户来运行nginx进程
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">worker_processes&lt;/span> &lt;span style="color:#4e9a06">auto&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">error_log&lt;/span> &lt;span style="color:#4e9a06">/var/log/nginx/error.log&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">pid&lt;/span> &lt;span style="color:#4e9a06">/run/nginx.pid&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">include&lt;/span> &lt;span style="color:#000">/usr/share/nginx/modules/*.conf&lt;/span>; &lt;span style="color:#8f5902;font-style:italic">#包含/usr/share/nginx/modules/目录下以.conf为结尾的所有文件，加载其中的配置
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">events&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">worker_connections&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1024&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">http&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">log_format&lt;/span> &lt;span style="color:#4e9a06">main&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;&lt;/span>&lt;span style="color:#000">$remote_addr&lt;/span> &lt;span style="color:#4e9a06">-&lt;/span> &lt;span style="color:#000">$remote_user&lt;/span> &lt;span style="color:#4e9a06">[&lt;/span>&lt;span style="color:#000">$time_local]&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000">$request&amp;#34;&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#39;&lt;/span>&lt;span style="color:#000">$status&lt;/span> &lt;span style="color:#000">$body_bytes_sent&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000">$http_referer&amp;#34;&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#39;&amp;#34;&lt;/span>&lt;span style="color:#000">$http_user_agent&amp;#34;&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000">$http_x_forwarded_for&amp;#34;&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">access_log&lt;/span> &lt;span style="color:#4e9a06">/var/log/nginx/access.log&lt;/span> &lt;span style="color:#4e9a06">main&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">sendfile&lt;/span> &lt;span style="color:#000">on&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">tcp_nopush&lt;/span> &lt;span style="color:#000">on&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">tcp_nodelay&lt;/span> &lt;span style="color:#000">on&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">keepalive_timeout&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">65&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">types_hash_max_size&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2048&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">include&lt;/span> &lt;span style="color:#4e9a06">/etc/nginx/mime.types&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">default_type&lt;/span> &lt;span style="color:#4e9a06">application/octet-stream&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">include&lt;/span> &lt;span style="color:#4e9a06">/etc/nginx/conf.d/*.conf&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">server&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">listen&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">80&lt;/span> &lt;span style="color:#4e9a06">default_server&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">listen&lt;/span> &lt;span style="color:#4e9a06">[::]:80&lt;/span> &lt;span style="color:#4e9a06">default_server&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">server_name&lt;/span> &lt;span style="color:#4e9a06">_&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">root&lt;/span> &lt;span style="color:#4e9a06">/usr/share/nginx/html&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># 指定nginx的工作的/目录。i.e.location中/目录的起始位置
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">include&lt;/span> &lt;span style="color:#4e9a06">/etc/nginx/default.d/*.conf&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">location&lt;/span> &lt;span style="color:#4e9a06">/&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">error_page&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">404&lt;/span> &lt;span style="color:#4e9a06">/404.html&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">location&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">/40x.html&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">error_page&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">500&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">502&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">503&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">504&lt;/span> &lt;span style="color:#4e9a06">/50x.html&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">location&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">/50x.html&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="命令行工具">命令行工具&lt;a class="td-heading-self-link" href="#%e5%91%bd%e4%bb%a4%e8%a1%8c%e5%b7%a5%e5%85%b7" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="应用示例">应用示例&lt;a class="td-heading-self-link" href="#%e5%ba%94%e7%94%a8%e7%a4%ba%e4%be%8b" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>让nginx在前台运行，常用于container中&lt;/p>
&lt;ul>
&lt;li>&lt;code>nginx -g 'daemon off;'&lt;/code>&lt;/li>
&lt;/ul></description></item><item><title>Docs: _index</title><link>https://desistdaydream.github.io/docs/Web/Nginx/Nginx-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/Web/Nginx/Nginx-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</guid><description/></item><item><title>Docs: Nginx 处理 HTTP 请求的流程</title><link>https://desistdaydream.github.io/docs/Web/Nginx/Nginx-%E5%A4%84%E7%90%86-HTTP-%E8%AF%B7%E6%B1%82%E7%9A%84%E6%B5%81%E7%A8%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/Web/Nginx/Nginx-%E5%A4%84%E7%90%86-HTTP-%E8%AF%B7%E6%B1%82%E7%9A%84%E6%B5%81%E7%A8%8B/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>原文：&lt;a href="https://iziyang.github.io/2020/04/12/5-nginx/">Nginx 处理 HTTP 请求的 11 个阶段&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://www.cnblogs.com/iziyang/p/12933565.html">博客园对该文章的排版更好&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>前面给大家讲了 &lt;a href="https://iziyang.github.io/2020/04/08/4-nginx/">Nginx 是如何处理 HTTP请求头部的&lt;/a>，接下来就到了真正处理 HTTP 请求的阶段了。先看下面这张图，这张图是 Nginx 处理 HTTP 请求的示意图，虽然简单，但是却很好的说明了整个过程。&lt;/p>
&lt;ol>
&lt;li>Read Request Headers：解析请求头。&lt;/li>
&lt;li>Identify Configuration Block：识别由哪一个 location 进行处理，匹配 URL。&lt;/li>
&lt;li>Apply Rate Limits：判断是否限速。例如可能这个请求并发的连接数太多超过了限制，或者 QPS 太高。&lt;/li>
&lt;li>Perform Authentication：连接控制，验证请求。例如可能根据 Referrer 头部做一些防盗链的设置，或者验证用户的权限。&lt;/li>
&lt;li>Generate Content：生成返回给用户的响应。为了生成这个响应，做反向代理的时候可能会和上游服务（Upstream Services）进行通信，然后这个过程中还可能会有些子请求或者重定向，那么还会走一下这个过程（Internal redirects and subrequests）。&lt;/li>
&lt;li>Response Filters：过滤返回给用户的响应。比如压缩响应，或者对图片进行处理。&lt;/li>
&lt;li>Log：记录日志。&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://img2020.cnblogs.com/other/1833725/202005/1833725-20200521210215201-1729774620.png" alt="">&lt;/p>
&lt;p>以上这七个步骤从整体上介绍了一下处理流程，下面还会再说一下实际的处理过程。&lt;/p>
&lt;h1 id="nginx-处理-http-请求的-11-个阶段">Nginx 处理 HTTP 请求的 11 个阶段&lt;a class="td-heading-self-link" href="#nginx-%e5%a4%84%e7%90%86-http-%e8%af%b7%e6%b1%82%e7%9a%84-11-%e4%b8%aa%e9%98%b6%e6%ae%b5" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>下面介绍一下详细的 11 个阶段，每个阶段都可能对应着一个甚至多个 HTTP 模块，通过这样一个模块对比，我们也能够很好的理解这些模块具体是怎么样发挥作用的。&lt;/p>
&lt;p>可以在 Nginx 源码 &lt;code>src/http/ngx_http_core_module.h&lt;/code> 找到这 11 个阶段的定义&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">typedef&lt;/span> &lt;span style="color:#204a87;font-weight:bold">enum&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">NGX_HTTP_POST_READ_PHASE&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">NGX_HTTP_SERVER_REWRITE_PHASE&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">NGX_HTTP_FIND_CONFIG_PHASE&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">NGX_HTTP_REWRITE_PHASE&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">NGX_HTTP_POST_REWRITE_PHASE&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">NGX_HTTP_PREACCESS_PHASE&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">NGX_HTTP_ACCESS_PHASE&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">NGX_HTTP_POST_ACCESS_PHASE&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">NGX_HTTP_PRECONTENT_PHASE&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">NGX_HTTP_CONTENT_PHASE&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">NGX_HTTP_LOG_PHASE&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#000">ngx_http_phases&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://img2020.cnblogs.com/other/1833725/202005/1833725-20200521210216056-1680220103.png" alt="500">&lt;/p>
&lt;ol>
&lt;li>POST_READ：在 read 完请求的头部之后，在没有对头部做任何处理之前，想要获取到一些原始的值，就应该在这个阶段进行处理。这里面会涉及到一个 realip 模块。&lt;/li>
&lt;li>SERVER_REWRITE：和下面的 REWRITE 阶段一样，都只有一个模块叫 rewrite 模块，一般没有第三方模块会处理这个阶段。&lt;/li>
&lt;li>FIND_CONFIG：做 location 的匹配，暂时没有模块会用到。&lt;/li>
&lt;li>REWRITE：对 URL 做一些处理。&lt;/li>
&lt;li>POST_WRITE：处于 REWRITE 之后，也是暂时没有模块会在这个阶段出现。&lt;/li>
&lt;/ol>
&lt;p>接下来是确认用户访问权限的三个模块：&lt;/p>
&lt;ol start="6">
&lt;li>PREACCESS：是在 ACCESS 之前要做一些工作，例如并发连接和 QPS 需要进行限制，涉及到两个模块：limt_conn 和 limit_req&lt;/li>
&lt;li>ACCESS：核心要解决的是用户能不能访问的问题，例如 auth_basic 是用户名和密码，access 是用户访问 IP，auth_request 根据第三方服务返回是否可以去访问。&lt;/li>
&lt;li>POST_ACCESS：是在 ACCESS 之后会做一些事情，同样暂时没有模块会用到。&lt;/li>
&lt;/ol>
&lt;p>最后的三个阶段处理响应和日志：&lt;/p>
&lt;ol start="9">
&lt;li>PRECONTENT：在处理 CONTENT 之前会做一些事情，例如会把子请求发送给第三方的服务去处理，try_files 模块也是在这个阶段中。&lt;/li>
&lt;li>CONTENT：这个阶段涉及到的模块就非常多了，例如 index, autoindex, concat 等都是在这个阶段生效的。&lt;/li>
&lt;li>LOG：记录日志 access_log 模块。&lt;/li>
&lt;/ol>
&lt;p>以上的这些阶段都是严格按照顺序进行处理的，当然，每个阶段中各个 HTTP 模块的处理顺序也很重要，如果某个模块不把请求向下传递，后面的模块是接收不到请求的。而且每个阶段中的模块也不一定所有都要执行一遍，下面就接着讲一下各个阶段模块之间的请求顺序。&lt;/p>
&lt;h1 id="11-个阶段的顺序处理">11 个阶段的顺序处理&lt;a class="td-heading-self-link" href="#11-%e4%b8%aa%e9%98%b6%e6%ae%b5%e7%9a%84%e9%a1%ba%e5%ba%8f%e5%a4%84%e7%90%86" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>如下图所示，每一个模块处理之间是有序的，那么这个顺序怎么才能得到呢？其实非常简单，在源码 ngx_module.c 中，有一个数组 &lt;code>ngx_module_name&lt;/code>，其中包含了在编译 Nginx 的时候的 with 指令所包含的所有模块，它们之间的顺序非常关键，在数组中顺序是相反的。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">char&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">ngx_module_names&lt;/span>&lt;span style="color:#000;font-weight:bold">[]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">…&lt;/span> &lt;span style="color:#a40000">…&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;ngx_http_static_module&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;ngx_http_autoindex_module&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;ngx_http_index_module&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;ngx_http_random_index_module&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;ngx_http_mirror_module&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;ngx_http_try_files_module&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;ngx_http_auth_request_module&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;ngx_http_auth_basic_module&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;ngx_http_access_module&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;ngx_http_limit_conn_module&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;ngx_http_limit_req_module&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;ngx_http_realip_module&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;ngx_http_referer_module&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;ngx_http_rewrite_module&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;ngx_http_concat_module&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">…&lt;/span> &lt;span style="color:#a40000">…&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>灰色部分的模块是 Nginx 的框架部分去执行处理的，第三方模块没有机会在这里得到处理。&lt;/p>
&lt;p>在依次向下执行的过程中，也可能不按照这样的顺序。例如，在 access 阶段中，有一个指令叫 satisfy，它可以指示当有一个满足的时候就直接跳到下一个阶段进行处理，例如当 access 满足了，就直接跳到 try_files 模块进行处理，而不会再执行 auth_basic、auth_request 模块。&lt;/p>
&lt;p>在 content 阶段中，当 index 模块执行了，就不会再执行 auto_index 模块，而是直接跳到 log 模块。&lt;/p>
&lt;p>整个 11 个阶段所涉及到的模块和先后顺序如下图所示：&lt;/p>
&lt;p>&lt;img src="https://img2020.cnblogs.com/other/1833725/202005/1833725-20200521210217666-1083846687.jpg" alt="">&lt;/p>
&lt;p>下面开始详细讲解一下各个阶段。先来看下第一个阶段 postread 阶段，顾名思义，postread 阶段是在正式处理请求之前起作用的。&lt;/p>
&lt;h1 id="postread-阶段">postread 阶段&lt;a class="td-heading-self-link" href="#postread-%e9%98%b6%e6%ae%b5" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>postread 阶段，是 11 个阶段的第 1 个阶段，这个阶段刚刚获取到了请求的头部，还没有进行任何处理，我们可以拿到一些原始的信息。例如，拿到用户的真实 IP 地址&lt;/p>
&lt;h2 id="问题如何拿到用户的真实-ip-地址">问题：如何拿到用户的真实 IP 地址？&lt;a class="td-heading-self-link" href="#%e9%97%ae%e9%a2%98%e5%a6%82%e4%bd%95%e6%8b%bf%e5%88%b0%e7%94%a8%e6%88%b7%e7%9a%84%e7%9c%9f%e5%ae%9e-ip-%e5%9c%b0%e5%9d%80" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;img src="https://img2020.cnblogs.com/other/1833725/202005/1833725-20200521210218190-1346456179.png" alt="">&lt;/p>
&lt;p>我们知道，TCP 连接是由一个四元组构成的，在四元组中，包含了源 IP 地址。而在真实的互联网中，存在非常多的正向代理和反向代理。例如最终的用户有自己的内网 IP 地址，运营商会分配一个公网 IP，然后访问某个网站的时候，这个网站可能使用了 CDN 加速一些静态文件或图片，如果 CDN 没有命中，那么就会回源，回源的时候可能还要经过一个反向代理，例如阿里云的 SLB，然后才会到达 Nginx。&lt;/p>
&lt;p>我们要拿到的地址应该是运营商给用户分配的公网 IP 地址 115.204.33.1，对这个 IP 来进行并发连接的控制或者限速，而 Nginx 拿到的却是 2.2.2.2，那么怎么才能拿到真实的用户 IP 呢？&lt;/p>
&lt;p>HTTP 协议中，有两个头部可以用来获取用户 IP：&lt;/p>
&lt;ul>
&lt;li>X-Forwardex-For 是用来传递 IP 的，这个头部会把经过的节点 IP 都记录下来&lt;/li>
&lt;li>X-Real-IP：可以记录用户真实的 IP 地址，只能有一个&lt;/li>
&lt;/ul>
&lt;h2 id="拿到真实用户-ip-后如何使用">拿到真实用户 IP 后如何使用？&lt;a class="td-heading-self-link" href="#%e6%8b%bf%e5%88%b0%e7%9c%9f%e5%ae%9e%e7%94%a8%e6%88%b7-ip-%e5%90%8e%e5%a6%82%e4%bd%95%e4%bd%bf%e7%94%a8" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>针对这个问题，Nginx 是基于变量来使用。&lt;/p>
&lt;p>例如 binary_remote_addr、remote_addr 这样的变量，其值就是真实的 IP，这样做连接限制也就是 limit_conn 模块才有意义，这也说明了，limit_conn 模块只能在 preaccess 阶段，而不能在 postread 阶段生效。&lt;/p>
&lt;h2 id="realip-模块">realip 模块&lt;a class="td-heading-self-link" href="#realip-%e6%a8%a1%e5%9d%97" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>默认不会编译进 Nginx&lt;/p>
&lt;ul>
&lt;li>需要通过 &lt;code>--with-http_realip_module&lt;/code> 启用功能&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>变量：如果还想要使用原来的 TCP 连接中的地址和端口，需要通过这两个变量保存&lt;/p>
&lt;ul>
&lt;li>&lt;code>realip_remote_addr&lt;/code>&lt;/li>
&lt;li>&lt;code>realip_remote_port&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>功能&lt;/p>
&lt;ul>
&lt;li>修改客户端地址&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>指令&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>set_real_ip_from&lt;/code>&lt;/p>
&lt;pre>&lt;code>指定可信的地址，只有从该地址建立的连接，获取的 realip 才是可信的
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>&lt;code>real_ip_header&lt;/code>&lt;/p>
&lt;pre>&lt;code>指定从哪个头部取真实的 IP 地址，默认从 `X-Real-IP` 中取，如果设置从 `X-Forwarded-For` 中取，会先从最后一个 IP 开始取
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>&lt;code>real_ip_recursive&lt;/code>&lt;/p>
&lt;pre>&lt;code>环回地址，默认关闭，打开的时候，如果 `X-Forwarded-For` 最后一个地址与客户端地址相同，会过滤掉该地址
&lt;/code>&lt;/pre>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-vbnet" data-lang="vbnet">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Syntax&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">set_real_ip_from&lt;/span> &lt;span style="color:#000">address&lt;/span> &lt;span style="color:#a40000">|&lt;/span> &lt;span style="color:#000">CIDR&lt;/span> &lt;span style="color:#a40000">|&lt;/span> &lt;span style="color:#000">unix&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#a40000">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Default&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#a40000">—&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Context&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">http&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">server&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">location&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Syntax&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">real_ip_header&lt;/span> &lt;span style="color:#000">field&lt;/span> &lt;span style="color:#a40000">|&lt;/span> &lt;span style="color:#000">X&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">Real&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">IP&lt;/span> &lt;span style="color:#a40000">|&lt;/span> &lt;span style="color:#000">X&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">Forwarded&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#204a87;font-weight:bold">For&lt;/span> &lt;span style="color:#a40000">|&lt;/span> &lt;span style="color:#000">proxy_protocol&lt;/span>&lt;span style="color:#a40000">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Default&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">real_ip_header&lt;/span> &lt;span style="color:#000">X&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">Real&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">IP&lt;/span>&lt;span style="color:#a40000">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Context&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">http&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">server&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">location&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Syntax&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">real_ip_recursive&lt;/span> &lt;span style="color:#204a87;font-weight:bold">on&lt;/span> &lt;span style="color:#a40000">|&lt;/span> &lt;span style="color:#000">off&lt;/span>&lt;span style="color:#a40000">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Default&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">real_ip_recursive&lt;/span> &lt;span style="color:#000">off&lt;/span>&lt;span style="color:#a40000">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Context&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">http&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">server&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">location&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="实战">实战&lt;a class="td-heading-self-link" href="#%e5%ae%9e%e6%88%98" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>上面关于 &lt;code>real_ip_recursive&lt;/code> 指令可能不太容易理解，我们来实战练习一下，先来看 &lt;code>real_ip_recursive&lt;/code> 默认关闭的情况：&lt;/p>
&lt;ul>
&lt;li>重新编译一个带有 realip 模块的 nginx&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>关于如何编译 Nginx，详见：&lt;a href="https://iziyang.github.io/2020/03/10/1-nginx/">https://iziyang.github.io/2020/03/10/1-nginx/&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 下载 nginx 源码，在源码目录下执行&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>./configure --prefix&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>自己指定的目录 --with-http_realip_module
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>make
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>make install
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>然后去上一步中自己指定的 Nginx 安装目录&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#屏蔽默认的 nginx.conf 文件的 server 块内容，并添加一行
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">include&lt;/span> &lt;span style="color:#000">/Users/mtdp/myproject/nginx/test_nginx/conf/example/*.conf&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 在 example 目录下建立 realip.conf，set_real_ip_from 可以设置为自己的本机 IP
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">server&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">listen&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">80&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">server_name&lt;/span> &lt;span style="color:#4e9a06">ziyang.realip.com&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">error_log&lt;/span> &lt;span style="color:#4e9a06">/Users/mtdp/myproject/nginx/nginx/logs/myerror.log&lt;/span> &lt;span style="color:#4e9a06">debug&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">set_real_ip_from&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">192&lt;/span>&lt;span style="color:#4e9a06">.168.0.108&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">#real_ip_header X-Real-IP;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">real_ip_recursive&lt;/span> &lt;span style="color:#000">off&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic"># real_ip_recursive on;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">real_ip_header&lt;/span> &lt;span style="color:#4e9a06">X-Forwarded-For&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">location&lt;/span> &lt;span style="color:#4e9a06">/&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">200&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Client&lt;/span> &lt;span style="color:#4e9a06">real&lt;/span> &lt;span style="color:#4e9a06">ip:&lt;/span> &lt;span style="color:#000">$remote_addr\n&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在上面的配置文件中，我设置了可信代理地址为本机地址，&lt;code>real_ip_recursive&lt;/code> 为默认的 off，&lt;code>real_ip_header&lt;/code> 设为从 &lt;code>X-Forwarded-For&lt;/code> 中取。&lt;/p>
&lt;ul>
&lt;li>重载配置文件&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>./sbin/nginx -s reload
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>测试响应结果&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>➜ test_nginx curl -H &lt;span style="color:#4e9a06">&amp;#39;X-Forwarded-For: 1.1.1.1,192.168.0.108&amp;#39;&lt;/span> ziyang.realip.com
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Client real ip: 192.168.0.108
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后再来测试 &lt;code>real_ip_recursive&lt;/code> 打开的情况：&lt;/p>
&lt;ul>
&lt;li>配置文件中打开 &lt;code>real_ip_recursive&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">server&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">listen&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">80&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">server_name&lt;/span> &lt;span style="color:#4e9a06">ziyang.realip.com&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">error_log&lt;/span> &lt;span style="color:#4e9a06">/Users/mtdp/myproject/nginx/nginx/logs/myerror.log&lt;/span> &lt;span style="color:#4e9a06">debug&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">set_real_ip_from&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">192&lt;/span>&lt;span style="color:#4e9a06">.168.0.108&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">#real_ip_header X-Real-IP;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">#real_ip_recursive off;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">real_ip_recursive&lt;/span> &lt;span style="color:#000">on&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">real_ip_header&lt;/span> &lt;span style="color:#4e9a06">X-Forwarded-For&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">location&lt;/span> &lt;span style="color:#4e9a06">/&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">200&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Client&lt;/span> &lt;span style="color:#4e9a06">real&lt;/span> &lt;span style="color:#4e9a06">ip:&lt;/span> &lt;span style="color:#000">$remote_addr\n&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>测试响应结果&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>➜ test_nginx curl -H &lt;span style="color:#4e9a06">&amp;#39;X-Forwarded-For: 1.1.1.1,2.2.2.2,192.168.0.108&amp;#39;&lt;/span> ziyang.realip.com
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Client real ip: 2.2.2.2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>所以这里面也可看出来，如果使用 &lt;code>X-Forwarded-For&lt;/code> 获取 realip 的话，需要打开 &lt;code>real_ip_recursive&lt;/code>，并且，realip 依赖于 &lt;code>set_real_ip_from&lt;/code> 设置的可信地址。&lt;/p>
&lt;p>那么有人可能就会问了，那直接用 &lt;code>X-Real-IP&lt;/code> 来选取真实的 IP 地址不就好了。这是可以的，但是 &lt;code>X-Real-IP&lt;/code> 是 Nginx 独有的，不是 RFC 规范，如果客户端与服务器之间还有其他非 Nginx 软件实现的代理，就会造成取不到 &lt;code>X-Real-IP&lt;/code> 头部，所以这个要根据实际情况来定。&lt;/p>
&lt;h1 id="rewrite-阶段">rewrite 阶段&lt;a class="td-heading-self-link" href="#rewrite-%e9%98%b6%e6%ae%b5" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>下面来看一下 rewrite 模块。&lt;/p>
&lt;p>首先 rewrite 阶段分为两个，一个是 server_rewrite 阶段，一个是 rewrite，这两个阶段都涉及到一个 rewrite 模块，而在 rewrite 模块中，有一个 return 指令，遇到该指令就不会再向下执行，直接返回响应。&lt;/p>
&lt;p>&lt;img src="https://img2020.cnblogs.com/other/1833725/202005/1833725-20200521210218403-2081889023.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://img2020.cnblogs.com/other/1833725/202005/1833725-20200521210218605-1924541596.png" alt="">&lt;/p>
&lt;h2 id="return-指令">return 指令&lt;a class="td-heading-self-link" href="#return-%e6%8c%87%e4%bb%a4" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>return 指令的语法如下：&lt;/p>
&lt;ul>
&lt;li>返回状态码，后面跟上 body&lt;/li>
&lt;li>返回状态码，后面跟上 URL&lt;/li>
&lt;li>直接返回 URL&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-vbnet" data-lang="vbnet">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Syntax&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">code&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&lt;span style="color:#000">text&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#a40000">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">code&lt;/span> &lt;span style="color:#000">URL&lt;/span>&lt;span style="color:#a40000">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">URL&lt;/span>&lt;span style="color:#a40000">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Default&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#a40000">—&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Context&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">server&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">location&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>返回状态码包括以下几种：&lt;/p>
&lt;ul>
&lt;li>Nginx 自定义
&lt;ul>
&lt;li>444：立刻关闭连接，用户收不到响应&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>HTTP 1.0 标准
&lt;ul>
&lt;li>301：永久重定向&lt;/li>
&lt;li>302：临时重定向，禁止被缓存&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>HTTP 1.1 标准
&lt;ul>
&lt;li>303：临时重定向，允许改变方法，禁止被缓存&lt;/li>
&lt;li>307：临时重定向，不允许改变方法，禁止被缓存&lt;/li>
&lt;li>308：永久重定向，不允许改变方法&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="return-指令与-error_page">return 指令与 error_page&lt;a class="td-heading-self-link" href="#return-%e6%8c%87%e4%bb%a4%e4%b8%8e-error_page" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>&lt;code>error_page&lt;/code> 的作用大家肯定经常见到。当访问一个网站出现 404 的时候，一般不会直接出现一个 404 NOT FOUND，而是会有一个比较友好的页面，这就是 &lt;code>error_page&lt;/code> 的功能。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-lua" data-lang="lua">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Syntax&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">error_page&lt;/span> &lt;span style="color:#000">code&lt;/span> &lt;span style="color:#000;font-weight:bold">...&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">response&lt;/span>&lt;span style="color:#000;font-weight:bold">]]&lt;/span> &lt;span style="color:#000">uri&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Default&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#a40000">—&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Context&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">http&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">server&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">location&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#204a87;font-weight:bold">in&lt;/span> &lt;span style="color:#000">location&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们来看几个例子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">1.&lt;/span> &lt;span style="color:#4e9a06">error_page&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">404&lt;/span> &lt;span style="color:#4e9a06">/404.html&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">2.&lt;/span> &lt;span style="color:#4e9a06">error_page&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">500&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">502&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">503&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">504&lt;/span> &lt;span style="color:#4e9a06">/50x.html&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">3.&lt;/span> &lt;span style="color:#4e9a06">error_page&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">404&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">200&lt;/span> &lt;span style="color:#4e9a06">/empty.gif&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">4.&lt;/span> &lt;span style="color:#4e9a06">error_page&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">404&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">/404.php&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">5.&lt;/span> &lt;span style="color:#4e9a06">location&lt;/span> &lt;span style="color:#4e9a06">/&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">error_page&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">404&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">@fallback&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">location&lt;/span> &lt;span style="color:#4e9a06">@fallback&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">proxy_pass&lt;/span> &lt;span style="color:#4e9a06">http://backend&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">6.&lt;/span> &lt;span style="color:#4e9a06">error_page&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">403&lt;/span> &lt;span style="color:#4e9a06">http://example.com/forbidden.html&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">7.&lt;/span> &lt;span style="color:#4e9a06">error_page&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">404&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">301&lt;/span> &lt;span style="color:#4e9a06">http://example.com/notfound.html&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>那么现在就会有两个问题，大家看下下面这个配置文件：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">server&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">server_name&lt;/span> &lt;span style="color:#4e9a06">ziyang.return.com&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">listen&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">80&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">root&lt;/span> &lt;span style="color:#4e9a06">html/&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">error_page&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">404&lt;/span> &lt;span style="color:#4e9a06">/403.html&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">#return 405;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">location&lt;/span> &lt;span style="color:#4e9a06">/&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">#return 404 &amp;#34;find nothing!&amp;#34;;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>当 server 下包含 error_page 且 location 下有 return 指令的时候，会执行哪一个呢？&lt;/li>
&lt;li>return 指令同时出现在 server 块下和同时出现在 location 块下，它们有合并关系吗？&lt;/li>
&lt;/ol>
&lt;p>这两个问题我们通过实战验证一下。&lt;/p>
&lt;h3 id="实战-1">实战&lt;a class="td-heading-self-link" href="#%e5%ae%9e%e6%88%98-1" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>将上面的配置添加到配置文件 return.conf&lt;/li>
&lt;li>在本机的 hosts 文件中绑定 ziyang.return.com 为本地的 IP 地址&lt;/li>
&lt;li>访问一个不存在的页面&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>➜ test_nginx curl ziyang.return.com/text
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;html&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;403 Forbidden&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;body&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;center&amp;gt;&amp;lt;h1&amp;gt;403 Forbidden&amp;lt;/h1&amp;gt;&amp;lt;/center&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;hr&amp;gt;&amp;lt;center&amp;gt;nginx/1.17.8&amp;lt;/center&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/body&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/html&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个时候可以看到，是 &lt;code>error_page&lt;/code> 生效了，返回的响应是 403。&lt;/p>
&lt;p>那么假如打开了 &lt;code>location&lt;/code> 下 &lt;code>return&lt;/code> 指令的注释呢？&lt;/p>
&lt;ul>
&lt;li>打开 &lt;code>return&lt;/code> 指令注释，reload 配置文件&lt;/li>
&lt;li>重新访问页面&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-vbnet" data-lang="vbnet">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">➜&lt;/span> &lt;span style="color:#000">test_nginx&lt;/span> &lt;span style="color:#000">curl&lt;/span> &lt;span style="color:#000">ziyang&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">return&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">com&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#000">text&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">find&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nothing&lt;/span>&lt;span style="color:#000;font-weight:bold">!&lt;/span>&lt;span style="color:#a40000">%&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这时候，&lt;code>return&lt;/code> 指令得到了执行。也就是第一个问题，当 &lt;code>server&lt;/code> 下包含 &lt;code>error_page&lt;/code> 且 &lt;code>location&lt;/code> 下有 &lt;code>return&lt;/code> 指令的时候，会执行 &lt;code>return&lt;/code> 指令。&lt;/p>
&lt;p>下面再看一下 &lt;code>server&lt;/code> 下的 &lt;code>return&lt;/code> 指令和 &lt;code>location&lt;/code> 下的 &lt;code>return&lt;/code> 指令会执行哪一个。&lt;/p>
&lt;ul>
&lt;li>打开 &lt;code>server&lt;/code> 下 &lt;code>return&lt;/code> 指令的注释，reload 配置文件&lt;/li>
&lt;li>重新访问页面&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>➜ test_nginx curl ziyang.return.com/text
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;html&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;405 Not Allowed&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;body&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;center&amp;gt;&amp;lt;h1&amp;gt;405 Not Allowed&amp;lt;/h1&amp;gt;&amp;lt;/center&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;hr&amp;gt;&amp;lt;center&amp;gt;nginx/1.17.8&amp;lt;/center&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/body&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/html&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>针对上面两个问题也就有了答案：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>当 &lt;code>server&lt;/code> 下包含 &lt;code>error_page&lt;/code> 且 &lt;code>location&lt;/code> 下有 &lt;code>return&lt;/code> 指令的时候，会执行哪一个呢？&lt;/p>
&lt;p>会执行 &lt;code>location&lt;/code> 下的 &lt;code>return&lt;/code> 指令。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>return&lt;/code> 指令同时出现在 &lt;code>server&lt;/code> 块下和同时出现在 &lt;code>location&lt;/code> 块下，它们有合并关系吗？&lt;/p>
&lt;p>没有合并关系，先遇到哪个 &lt;code>return&lt;/code> 指令就先执行哪一个。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="rewrite-指令">rewrite 指令&lt;a class="td-heading-self-link" href="#rewrite-%e6%8c%87%e4%bb%a4" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;code>rewrite&lt;/code> 指令用于修改用户传入 Nginx 的 URL。来看下 &lt;code>rewrite&lt;/code> 的指令规则：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Syntax&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">rewrite&lt;/span> &lt;span style="color:#000">regex&lt;/span> &lt;span style="color:#000">replacement&lt;/span> [&lt;span style="color:#000">flag&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Default&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> —
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Context&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">server&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">location&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">if&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>它的功能主要有下面几点：&lt;/p>
&lt;ul>
&lt;li>将 &lt;code>regex&lt;/code> 指定的 URL 替换成 &lt;code>replacement&lt;/code> 这个新的 URL
&lt;ul>
&lt;li>可以使用正则表达式及变量提取&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>当 &lt;code>replacement&lt;/code> 以 http:// 或者 https:// 或者 $schema 开头，则直接返回 302 重定向&lt;/li>
&lt;li>替换后的 URL 根据 flag 指定的方式进行处理
&lt;ul>
&lt;li>last：用 &lt;code>replacement&lt;/code> 这个 URL 进行新的 location 匹配&lt;/li>
&lt;li>break：break 指令停止当前脚本指令的执行，等价于独立的 break 指令&lt;/li>
&lt;li>redirect：返回 302 重定向&lt;/li>
&lt;li>permanent：返回 301 重定向&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="指令示例">指令示例&lt;a class="td-heading-self-link" href="#%e6%8c%87%e4%bb%a4%e7%a4%ba%e4%be%8b" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>现在我们有这样的一个目录结构：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>html/first/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── 1.txt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>html/second/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── 2.txt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>html/third/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── 3.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>配置文件如下所示：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">server&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">listen&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">80&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">server_name&lt;/span> &lt;span style="color:#4e9a06">rewrite.ziyang.com&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">rewrite_log&lt;/span> &lt;span style="color:#000">on&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">error_log&lt;/span> &lt;span style="color:#4e9a06">logs/rewrite_error.log&lt;/span> &lt;span style="color:#4e9a06">notice&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">root&lt;/span> &lt;span style="color:#4e9a06">html/&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">location&lt;/span> &lt;span style="color:#4e9a06">/first&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">rewrite&lt;/span> &lt;span style="color:#4e9a06">/first(.*)&lt;/span> &lt;span style="color:#4e9a06">/second&lt;/span>&lt;span style="color:#000">$1&lt;/span> &lt;span style="color:#4e9a06">last&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">200&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;first!\n&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">location&lt;/span> &lt;span style="color:#4e9a06">/second&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">rewrite&lt;/span> &lt;span style="color:#4e9a06">/second(.*)&lt;/span> &lt;span style="color:#4e9a06">/third&lt;/span>&lt;span style="color:#000">$1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">200&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;second!\n&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">location&lt;/span> &lt;span style="color:#4e9a06">/third&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">200&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;third!\n&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">location&lt;/span> &lt;span style="color:#4e9a06">/redirect1&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">rewrite&lt;/span> &lt;span style="color:#4e9a06">/redirect1(.*)&lt;/span> &lt;span style="color:#000">$1&lt;/span> &lt;span style="color:#4e9a06">permanent&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">location&lt;/span> &lt;span style="color:#4e9a06">/redirect2&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">rewrite&lt;/span> &lt;span style="color:#4e9a06">/redirect2(.*)&lt;/span> &lt;span style="color:#000">$1&lt;/span> &lt;span style="color:#4e9a06">redirect&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">location&lt;/span> &lt;span style="color:#4e9a06">/redirect3&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">rewrite&lt;/span> &lt;span style="color:#4e9a06">/redirect3(.*)&lt;/span> &lt;span style="color:#4e9a06">http://rewrite.ziyang.com&lt;/span>&lt;span style="color:#000">$1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">location&lt;/span> &lt;span style="color:#4e9a06">/redirect4&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">rewrite&lt;/span> &lt;span style="color:#4e9a06">/redirect4(.*)&lt;/span> &lt;span style="color:#4e9a06">http://rewrite.ziyang.com&lt;/span>&lt;span style="color:#000">$1&lt;/span> &lt;span style="color:#4e9a06">permanent&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>那么我们的问题是：&lt;/p>
&lt;ol>
&lt;li>return 指令 与 rewrite 指令的顺序关系？&lt;/li>
&lt;li>访问 /first/3.txt，/second/3.txt，/third/3.txt 分别返回的是什么？&lt;/li>
&lt;li>如果不携带 flag 会怎么样？&lt;/li>
&lt;/ol>
&lt;p>带着这三个问题，我们来实际演示一下。&lt;/p>
&lt;h3 id="实战-2">实战&lt;a class="td-heading-self-link" href="#%e5%ae%9e%e6%88%98-2" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>&lt;strong>准备工作&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>将上面的配置添加到配置文件 rewrite.conf&lt;/li>
&lt;li>在本机的 hosts 文件中绑定 rewrite.ziyang.com 为 127.0.0.1&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>last flag&lt;/strong>&lt;/p>
&lt;p>首先访问 rewrite.ziyang.com/first/3.txt，结果如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>➜ ~ curl rewrite.ziyang.com/first/3.txt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>second!
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>为什么结果是 second! 呢？应该是 third! 呀，可能有人会有这样的疑问。实际的匹配步骤如下：&lt;/p>
&lt;ul>
&lt;li>curl rewrite.ziyang.com/first/3.txt&lt;/li>
&lt;li>由于 &lt;code>rewrite /first(.*) /second$1 last;&lt;/code> 这条指令的存在，last 表示使用新的 URL 进行 location 匹配，因此接下来会去匹配 second/3.txt&lt;/li>
&lt;li>匹配到 /second 块之后，会依次执行指令，最后返回 200&lt;/li>
&lt;li>注意，location 块中虽然也改写了 URL，但是并不会去继续匹配，因为后面没有指定 flag。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>break flag&lt;/strong>&lt;/p>
&lt;p>下面将 &lt;code>rewrite /second(.*) /third$1;&lt;/code> 这条指令加上 break flag，&lt;code>rewrite /second(.*) /third$1 break;&lt;/code>&lt;/p>
&lt;p>继续访问 rewrite.ziyang.com/first/3.txt，结果如下：&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-curl" data-lang="curl">➜ ~ curl rewrite.ziyang.com/first/3.txt
test3%
&lt;/code>&lt;/pre>&lt;p>这时候返回的是 3.txt 文件的内容 test3。实际的匹配步骤如下：&lt;/p>
&lt;ul>
&lt;li>curl rewrite.ziyang.com/first/3.txt&lt;/li>
&lt;li>由于 &lt;code>rewrite /first(.*) /second$1 last;&lt;/code> 这条指令的存在，last 表示使用新的 URL 进行 location 匹配，因此接下来会去匹配 second/3.txt&lt;/li>
&lt;li>匹配到 /second 块之后，由于 break flag 的存在，会继续匹配 rewrite 过后的 URL&lt;/li>
&lt;li>匹配 /third location&lt;/li>
&lt;/ul>
&lt;p>因此，这个过程实际请求的 URL 是 rewrite.ziyang.com/third/3.txt，这样自然结果就是 test3 了。你还可以试试访问 rewrite.ziyang.com/third/2.txt 看看会返回什么。&lt;/p>
&lt;p>&lt;strong>redirect 和 permanent flag&lt;/strong>&lt;/p>
&lt;p>配置文件中还有 4 个 location，你可以分别试着访问一下，结果是这样的：&lt;/p>
&lt;ul>
&lt;li>redirect1：返回 301&lt;/li>
&lt;li>redirect2：返回 302&lt;/li>
&lt;li>redirect3：返回 302&lt;/li>
&lt;li>redirect4：返回 301&lt;/li>
&lt;/ul>
&lt;h2 id="rewrite行为记录日志">&lt;strong>rewrite&lt;/strong> 行为记录日志&lt;a class="td-heading-self-link" href="#rewrite%e8%a1%8c%e4%b8%ba%e8%ae%b0%e5%bd%95%e6%97%a5%e5%bf%97" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>主要是一个指令 &lt;code>rewrite_log&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Syntax:&lt;/span> &lt;span style="color:#4e9a06">rewrite_log&lt;/span> &lt;span style="color:#000">on&lt;/span> &lt;span style="color:#4e9a06">|&lt;/span> &lt;span style="color:#000">off&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Default:&lt;/span> &lt;span style="color:#4e9a06">rewrite_log&lt;/span> &lt;span style="color:#000">off&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Context:&lt;/span> &lt;span style="color:#4e9a06">http,&lt;/span> &lt;span style="color:#4e9a06">server,&lt;/span> &lt;span style="color:#4e9a06">location,&lt;/span> &lt;span style="color:#4e9a06">if&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个指令打开之后，会把 rewrite 的日志写入 logs/rewrite_error.log 日志文件中，这是请求 /first/3.txt 的日志记录：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-basic" data-lang="basic">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f57900">2020&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">05&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">06&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">06&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">24&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">05&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">notice&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">86959#&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">25&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;/first(.*)&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">matches&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;/first/3.txt&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#f57900">client:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">127.0.0.1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#f57900">server:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">rewrite&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ziyang&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">com&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#f57900">request:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;GET /first/3.txt HTTP/1.1&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#f57900">host:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;rewrite.ziyang.com&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f57900">2020&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">05&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">06&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">06&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">24&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">05&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">notice&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">86959#&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">25&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">rewritten&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#f57900">data:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;/second/3.txt&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#f57900">args:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#f57900">client:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">127.0.0.1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#f57900">server:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">rewrite&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ziyang&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">com&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#f57900">request:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;GET /first/3.txt HTTP/1.1&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#f57900">host:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;rewrite.ziyang.com&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f57900">2020&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">05&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">06&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">06&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">24&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">05&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">notice&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">86959#&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">25&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;/second(.*)&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">matches&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;/second/3.txt&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#f57900">client:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">127.0.0.1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#f57900">server:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">rewrite&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ziyang&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">com&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#f57900">request:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;GET /first/3.txt HTTP/1.1&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#f57900">host:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;rewrite.ziyang.com&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f57900">2020&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">05&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">06&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">06&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">24&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">05&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">notice&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">86959#&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">25&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">rewritten&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#f57900">data:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;/third/3.txt&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#f57900">args:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#f57900">client:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">127.0.0.1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#f57900">server:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">rewrite&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ziyang&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">com&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#f57900">request:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;GET /first/3.txt HTTP/1.1&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#f57900">host:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;rewrite.ziyang.com&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="if-指令">if 指令&lt;a class="td-heading-self-link" href="#if-%e6%8c%87%e4%bb%a4" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>if 指令也是在 rewrite 阶段生效的，它的语法如下所示：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Syntax:&lt;/span> &lt;span style="color:#4e9a06">if&lt;/span> &lt;span style="color:#4e9a06">(condition)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#204a87;font-weight:bold">...&lt;/span> &lt;span style="color:#a40000">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">Default:&lt;/span> &lt;span style="color:#4e9a06">—&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">Context:&lt;/span> &lt;span style="color:#4e9a06">server,&lt;/span> &lt;span style="color:#4e9a06">location&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>它的规则是：&lt;/p>
&lt;ul>
&lt;li>条件 condition 为真，则执行大括号内的指令；同时还遵循值指令的继承规则（详见我之前的文章 &lt;a href="https://iziyang.github.io/2020/04/06/3-nginx/">Nginx 的配置指令&lt;/a>）&lt;/li>
&lt;/ul>
&lt;p>那么 if 指令的条件表达式包含哪些内容呢？它的规则如下：&lt;/p>
&lt;ol>
&lt;li>检查变量为空或者值是否为 0&lt;/li>
&lt;li>将变量与字符串做匹配，使用 = 或 !=&lt;/li>
&lt;li>将变量与正则表达式做匹配
&lt;ul>
&lt;li>大小写敏感，~ 或者 !~&lt;/li>
&lt;li>大小写不敏感，~&lt;em>或者 !~&lt;/em>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>检查文件是否存在，使用 -f 或者 !-f&lt;/li>
&lt;li>检查目录是否存在，使用 -d 或者 !-d&lt;/li>
&lt;li>检查文件、目录、软链接是否存在，使用 -e 或者 !-e&lt;/li>
&lt;li>检查是否为可执行文件，使用 -x 或者 !-x&lt;/li>
&lt;/ol>
&lt;p>下面是一些例子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#4e9a06">(&lt;/span>&lt;span style="color:#000">$http_user_agent&lt;/span> &lt;span style="color:#000;font-weight:bold">~&lt;/span> &lt;span style="color:#4e9a06">MSIE)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># 与变量 http_user_agent 匹配
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">rewrite&lt;/span> &lt;span style="color:#4e9a06">^(.*)&lt;/span>$ &lt;span style="color:#4e9a06">/msie/&lt;/span>&lt;span style="color:#000">$1&lt;/span> &lt;span style="color:#4e9a06">break&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#4e9a06">(&lt;/span>&lt;span style="color:#000">$http_cookie&lt;/span> &lt;span style="color:#000;font-weight:bold">~&lt;/span>&lt;span style="color:#4e9a06">*&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;id=([^&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">]+)(?:&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">|$)&amp;#34;)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># 与变量 http_cookie 匹配
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">set&lt;/span> &lt;span style="color:#000">$id&lt;/span> &lt;span style="color:#000">$1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#4e9a06">(&lt;/span>&lt;span style="color:#000">$request_method&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">POST)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># 与变量 request_method 匹配，获取请求方法
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">405&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#4e9a06">(&lt;/span>&lt;span style="color:#000">$slow&lt;/span>&lt;span style="color:#4e9a06">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># slow 变量在 map 模块中自定义，也可以进行匹配
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">limit_rate&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10k&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#4e9a06">(&lt;/span>&lt;span style="color:#000">$invalid_referer&lt;/span>&lt;span style="color:#4e9a06">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">403&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="find_config-阶段">find_config 阶段&lt;a class="td-heading-self-link" href="#find_config-%e9%98%b6%e6%ae%b5" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>当经过 rewrite 模块，匹配到 URL 之后，就会进入 find_config 阶段，开始寻找 URL 对应的 &lt;a href="https://desistdaydream.github.io/docs/Web/Nginx/Nginx%20%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/http%20%E6%A8%A1%E5%9D%97%E6%8C%87%E4%BB%A4.md#location">location&lt;/a> 配置。&lt;/p>
&lt;h2 id="location-指令">location 指令&lt;a class="td-heading-self-link" href="#location-%e6%8c%87%e4%bb%a4" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="指令语法">指令语法&lt;a class="td-heading-self-link" href="#%e6%8c%87%e4%bb%a4%e8%af%ad%e6%b3%95" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>还是老规矩，咱们先来看一下 location 指令的语法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Syntax:&lt;/span> &lt;span style="color:#4e9a06">location&lt;/span> &lt;span style="color:#4e9a06">[&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">|&lt;/span> &lt;span style="color:#000;font-weight:bold">~&lt;/span> &lt;span style="color:#4e9a06">|&lt;/span> &lt;span style="color:#000;font-weight:bold">~&lt;/span>&lt;span style="color:#4e9a06">*&lt;/span> &lt;span style="color:#4e9a06">|&lt;/span> &lt;span style="color:#4e9a06">^~&lt;/span> &lt;span style="color:#4e9a06">]&lt;/span> &lt;span style="color:#4e9a06">uri&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#204a87;font-weight:bold">...&lt;/span> &lt;span style="color:#a40000">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">location&lt;/span> &lt;span style="color:#4e9a06">@name&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#204a87;font-weight:bold">...&lt;/span> &lt;span style="color:#a40000">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">Default:&lt;/span> &lt;span style="color:#4e9a06">—&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">Context:&lt;/span> &lt;span style="color:#4e9a06">server,&lt;/span> &lt;span style="color:#4e9a06">location&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">Syntax:&lt;/span> &lt;span style="color:#4e9a06">merge_slashes&lt;/span> &lt;span style="color:#000">on&lt;/span> &lt;span style="color:#4e9a06">|&lt;/span> &lt;span style="color:#000">off&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Default:&lt;/span> &lt;span style="color:#4e9a06">merge_slashes&lt;/span> &lt;span style="color:#000">on&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Context:&lt;/span> &lt;span style="color:#4e9a06">http,&lt;/span> &lt;span style="color:#4e9a06">server&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里面有一个 &lt;code>merge_slashes&lt;/code> 指令，这个指令的作用是，加入 URL 中有两个重复的 /，那么会合并为一个，这个指令默认是打开的，只有当对 URL 进行 base64 之类的编码时才需要关闭。&lt;/p>
&lt;h3 id="匹配规则">匹配规则&lt;a class="td-heading-self-link" href="#%e5%8c%b9%e9%85%8d%e8%a7%84%e5%88%99" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>location 的匹配规则是仅匹配 URI，忽略参数，有下面三种大的情况：&lt;/p>
&lt;ul>
&lt;li>前缀字符串
&lt;ul>
&lt;li>常规匹配&lt;/li>
&lt;li>=：精确匹配&lt;/li>
&lt;li>^~：匹配上后则不再进行正则表达式匹配&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>正则表达式
&lt;ul>
&lt;li>~：大小写敏感的正则匹配&lt;/li>
&lt;li>~*：大小写不敏感&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>用户内部跳转的命名 location
&lt;ul>
&lt;li>@&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>对于这些规则刚看上去肯定是很懵的，完全不知道在说什么，下面来实战看几个例子。&lt;/p>
&lt;h3 id="实战-3">实战&lt;a class="td-heading-self-link" href="#%e5%ae%9e%e6%88%98-3" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>先看一下 Nginx 的配置文件：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">server&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">listen&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">80&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">server_name&lt;/span> &lt;span style="color:#4e9a06">location.ziyang.com&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">error_log&lt;/span> &lt;span style="color:#4e9a06">logs/error.log&lt;/span> &lt;span style="color:#4e9a06">debug&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">#root html/;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">default_type&lt;/span> &lt;span style="color:#4e9a06">text/plain&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">merge_slashes&lt;/span> &lt;span style="color:#000">off&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">location&lt;/span> &lt;span style="color:#000;font-weight:bold">~&lt;/span> &lt;span style="color:#4e9a06">/Test1/$&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">200&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;first&lt;/span> &lt;span style="color:#4e9a06">regular&lt;/span> &lt;span style="color:#4e9a06">expressions&lt;/span> &lt;span style="color:#4e9a06">match!\n&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">location&lt;/span> &lt;span style="color:#000;font-weight:bold">~&lt;/span>&lt;span style="color:#4e9a06">*&lt;/span> &lt;span style="color:#4e9a06">/Test1/(\w+)&lt;/span>$ &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">200&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;longest&lt;/span> &lt;span style="color:#4e9a06">regular&lt;/span> &lt;span style="color:#4e9a06">expressions&lt;/span> &lt;span style="color:#4e9a06">match!\n&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">location&lt;/span> &lt;span style="color:#4e9a06">^~&lt;/span> &lt;span style="color:#4e9a06">/Test1/&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">200&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;stop&lt;/span> &lt;span style="color:#4e9a06">regular&lt;/span> &lt;span style="color:#4e9a06">expressions&lt;/span> &lt;span style="color:#4e9a06">match!\n&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">location&lt;/span> &lt;span style="color:#4e9a06">/Test1/Test2&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">200&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;longest&lt;/span> &lt;span style="color:#4e9a06">prefix&lt;/span> &lt;span style="color:#4e9a06">string&lt;/span> &lt;span style="color:#4e9a06">match!\n&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">location&lt;/span> &lt;span style="color:#4e9a06">/Test1&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">200&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;prefix&lt;/span> &lt;span style="color:#4e9a06">string&lt;/span> &lt;span style="color:#4e9a06">match!\n&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">location&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">/Test1&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">200&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;exact&lt;/span> &lt;span style="color:#4e9a06">match!\n&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>问题就来了，访问下面几个 URL 会分别返回什么内容呢？&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">/Test1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">/Test1/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">/Test1/Test2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">/Test1/Test2/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">/test1/Test2&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>例如访问 /Test1 时，会有几个部分都匹配上：&lt;/p>
&lt;ol>
&lt;li>常规前缀匹配：location /Test1&lt;/li>
&lt;li>精确匹配：location = /Test1&lt;/li>
&lt;/ol>
&lt;p>访问 /Test1/ 时，也会有几个部分匹配上：&lt;/p>
&lt;ol>
&lt;li>location ~ /Test1/$&lt;/li>
&lt;li>location ^~ /Test1/&lt;/li>
&lt;/ol>
&lt;p>那么究竟会匹配哪一个呢？Nginx 其实是遵循一套规则的，如下图所示：&lt;/p>
&lt;p>&lt;img src="https://img2020.cnblogs.com/other/1833725/202005/1833725-20200521210219311-1832008537.jpg" alt="">&lt;/p>
&lt;p>全部的前缀字符串是放置在一棵二叉树中的，Nginx 会分为两部分进行匹配：&lt;/p>
&lt;ol>
&lt;li>先遍历所有的前缀字符串，选取最长的一个前缀字符串，如果这个字符串是 = 的精确匹配或 ^~ 的前缀匹配，会直接使用&lt;/li>
&lt;li>如果第一步中没有匹配上 = 或 ^~，那么会先记住最长匹配的前缀字符串 location&lt;/li>
&lt;li>按照 nginx.conf 文件中的配置依次匹配正则表达式&lt;/li>
&lt;li>如果所有的正则表达式都没有匹配上，那么会使用最长匹配的前缀字符串&lt;/li>
&lt;/ol>
&lt;p>下面看下实际的响应是怎么样的：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-lua" data-lang="lua">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">➜&lt;/span> &lt;span style="color:#000">test_nginx&lt;/span> &lt;span style="color:#000">curl&lt;/span> &lt;span style="color:#000">location.ziyang&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">com&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#000">Test1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">exact&lt;/span> &lt;span style="color:#000">match&lt;/span>&lt;span style="color:#a40000">!&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">➜&lt;/span> &lt;span style="color:#000">test_nginx&lt;/span> &lt;span style="color:#000">curl&lt;/span> &lt;span style="color:#000">location.ziyang&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">com&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#000">Test1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">stop&lt;/span> &lt;span style="color:#000">regular&lt;/span> &lt;span style="color:#000">expressions&lt;/span> &lt;span style="color:#000">match&lt;/span>&lt;span style="color:#a40000">!&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">➜&lt;/span> &lt;span style="color:#000">test_nginx&lt;/span> &lt;span style="color:#000">curl&lt;/span> &lt;span style="color:#000">location.ziyang&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">com&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#000">Test1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#000">Test2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">longest&lt;/span> &lt;span style="color:#000">regular&lt;/span> &lt;span style="color:#000">expressions&lt;/span> &lt;span style="color:#000">match&lt;/span>&lt;span style="color:#a40000">!&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">➜&lt;/span> &lt;span style="color:#000">test_nginx&lt;/span> &lt;span style="color:#000">curl&lt;/span> &lt;span style="color:#000">location.ziyang&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">com&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#000">Test1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#000">Test2&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">longest&lt;/span> &lt;span style="color:#000">prefix&lt;/span> &lt;span style="color:#000">string&lt;/span> &lt;span style="color:#000">match&lt;/span>&lt;span style="color:#a40000">!&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">➜&lt;/span> &lt;span style="color:#000">test_nginx&lt;/span> &lt;span style="color:#000">curl&lt;/span> &lt;span style="color:#000">location.ziyang&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">com&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#000">Test1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#000">Test3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">stop&lt;/span> &lt;span style="color:#000">regular&lt;/span> &lt;span style="color:#000">expressions&lt;/span> &lt;span style="color:#000">match&lt;/span>&lt;span style="color:#a40000">!&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>/Test1 匹配 location = /Test1&lt;/li>
&lt;li>/Test1/ 匹配 location ^~ /Test1/&lt;/li>
&lt;li>/Test1/Test2 匹配 location ~* /Test1/(\w+)$&lt;/li>
&lt;li>/Test1/Test2/ 匹配 location /Test1/Test2&lt;/li>
&lt;li>/Test1/Test3 匹配 location ^~ /Test1/&lt;/li>
&lt;/ul>
&lt;p>这里面重点解释一下 /Test1/Test3 的匹配过程：&lt;/p>
&lt;ol>
&lt;li>遍历所有可以匹配上的前缀字符串，总共有两个
&lt;ul>
&lt;li>^~ /Test1/&lt;/li>
&lt;li>/Test1&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>选取最长的前缀字符串 /Test1/，由于前面有 ^~ 禁止正则表达式匹配，因此直接使用 location ^~ /Test1/ 的规则&lt;/li>
&lt;li>返回 &lt;code>stop regular expressions match!&lt;/code>&lt;/li>
&lt;/ol>
&lt;h1 id="preaccess-阶段">preaccess 阶段&lt;a class="td-heading-self-link" href="#preaccess-%e9%98%b6%e6%ae%b5" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>下面就来到了 preaccess 阶段。我们经常会遇到一个问题，就是如何限制每个客户端的并发连接数？如何限制访问频率？这些就是在 preaccess 阶段处理完成的，顾名思义，preaccess 就是在连接之前。先来看下 limit_conn 模块。&lt;/p>
&lt;p>&lt;img src="https://img2020.cnblogs.com/other/1833725/202005/1833725-20200521210219647-417258696.png" alt="">&lt;/p>
&lt;h2 id="limit_conn-模块">limit_conn 模块&lt;a class="td-heading-self-link" href="#limit_conn-%e6%a8%a1%e5%9d%97" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>这里面涉及到的模块是 &lt;code>ngx_http_limit_conn_module&lt;/code>，它的基本特性如下：&lt;/p>
&lt;ul>
&lt;li>生效阶段：&lt;code>NGX_HTTP_PREACCESS_PHASE&lt;/code> 阶段&lt;/li>
&lt;li>模块：&lt;code>http_limit_conn_module&lt;/code>&lt;/li>
&lt;li>默认编译进 Nginx，通过 &lt;code>--without-http_limit_conn_module&lt;/code> 禁用&lt;/li>
&lt;li>生效范围
&lt;ul>
&lt;li>全部 worker 进程（基于共享内存）&lt;/li>
&lt;li>进入 preaccess 阶段前不生效&lt;/li>
&lt;li>限制的有效性取决于 key 的设计：依赖 postread 阶段的 realip 模块取到真实 IP&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>这里面有一点需要注意，就是 limit_conn key 的设计，所谓的 key 指的就是对哪个变量进行限制，通常我们取的都是用户的真实 IP。&lt;/p>
&lt;p>说完了 limit_conn 的模块，再来说一下指令语法。&lt;/p>
&lt;h3 id="指令语法-1">指令语法&lt;a class="td-heading-self-link" href="#%e6%8c%87%e4%bb%a4%e8%af%ad%e6%b3%95-1" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>定义共享内存（包括大小），以及 key 关键字&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Syntax:&lt;/span> &lt;span style="color:#4e9a06">limit_conn_zone&lt;/span> &lt;span style="color:#4e9a06">key&lt;/span> &lt;span style="color:#4e9a06">zone=name:size&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Default:&lt;/span> &lt;span style="color:#4e9a06">—&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">Context:&lt;/span> &lt;span style="color:#4e9a06">http&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>限制并发连接数&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Syntax&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">limit_conn&lt;/span> &lt;span style="color:#000">zone&lt;/span> &lt;span style="color:#000">number&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Default&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> —
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Context&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">http&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">server&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">location&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>限制发生时的日志级别&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Syntax:&lt;/span> &lt;span style="color:#4e9a06">limit_conn_log_level&lt;/span> &lt;span style="color:#4e9a06">info&lt;/span> &lt;span style="color:#4e9a06">|&lt;/span> &lt;span style="color:#4e9a06">notice&lt;/span> &lt;span style="color:#4e9a06">|&lt;/span> &lt;span style="color:#4e9a06">warn&lt;/span> &lt;span style="color:#4e9a06">|&lt;/span> &lt;span style="color:#4e9a06">error&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Default:&lt;/span> &lt;span style="color:#4e9a06">limit_conn_log_level&lt;/span> &lt;span style="color:#4e9a06">error&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Context:&lt;/span> &lt;span style="color:#4e9a06">http,&lt;/span> &lt;span style="color:#4e9a06">server,&lt;/span> &lt;span style="color:#4e9a06">location&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>限制发生时向客户端返回的错误码&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Syntax:&lt;/span> &lt;span style="color:#4e9a06">limit_conn_status&lt;/span> &lt;span style="color:#4e9a06">code&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Default:&lt;/span> &lt;span style="color:#4e9a06">limit_conn_status&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">503&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Context:&lt;/span> &lt;span style="color:#4e9a06">http,&lt;/span> &lt;span style="color:#4e9a06">server,&lt;/span> &lt;span style="color:#4e9a06">location&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="实战-4">实战&lt;a class="td-heading-self-link" href="#%e5%ae%9e%e6%88%98-4" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>下面又到了实战的环节了，通过一个实际的例子来看一下以上的几个指令是怎么起作用的。&lt;/p>
&lt;p>老规矩，先上配置文件：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">limit_conn_zone&lt;/span> &lt;span style="color:#000">$binary_remote_addr&lt;/span> &lt;span style="color:#4e9a06">zone=addr:10m&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#limit_req_zone $binary_remote_addr zone=one:10m rate=2r/m;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">server&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">listen&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">80&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">server_name&lt;/span> &lt;span style="color:#4e9a06">limit.ziyang.com&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">root&lt;/span> &lt;span style="color:#4e9a06">html/&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">error_log&lt;/span> &lt;span style="color:#4e9a06">logs/myerror.log&lt;/span> &lt;span style="color:#4e9a06">info&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">location&lt;/span> &lt;span style="color:#4e9a06">/&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">limit_conn_status&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">500&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">limit_conn_log_level&lt;/span> &lt;span style="color:#4e9a06">warn&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">limit_rate&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">50&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">limit_conn&lt;/span> &lt;span style="color:#4e9a06">addr&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">#limit_req zone=one burst=3 nodelay;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">#limit_req zone=one;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>在本地的 hosts 文件中添加 limit.ziyang.com 为本机 IP&lt;/li>
&lt;/ul>
&lt;p>在这个配置文件中，做了两条限制，一个是 &lt;code>limit_rate&lt;/code> 限制为 50 个字节，并发连接数 &lt;code>limit_conn&lt;/code> 限制为 1。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>➜ test_nginx curl limit.ziyang.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这时候访问 limit.ziyang.com 这个站点，会发现速度非常慢，因为每秒钟只有 50 个字节。&lt;/p>
&lt;p>如果再同时访问这个站点的话，则会返回 500。&lt;/p>
&lt;p>我在另一个终端里面同时访问：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>➜ ~ curl limit.ziyang.com
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;html&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;500 Internal Server Error&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;body&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;center&amp;gt;&amp;lt;h1&amp;gt;500 Internal Server Error&amp;lt;/h1&amp;gt;&amp;lt;/center&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;hr&amp;gt;&amp;lt;center&amp;gt;nginx/1.17.8&amp;lt;/center&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/body&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/html&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到，Nginx 直接返回了 500。&lt;/p>
&lt;h2 id="limit_req-模块">limit_req 模块&lt;a class="td-heading-self-link" href="#limit_req-%e6%a8%a1%e5%9d%97" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>在本节开头我们就提出了两个问题：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>如何限制每个客户端的并发连接数？&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如何限制访问频率？&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>第一个问题限制并发连接数的问题已经解决了，下面来看第二个问题。&lt;/p>
&lt;p>这里面生效的模块是 &lt;code>ngx_http_limit_req_module&lt;/code>，它的基本特性如下：&lt;/p>
&lt;ul>
&lt;li>生效阶段：&lt;code>NGX_HTTP_PREACCESS_PHASE&lt;/code> 阶段&lt;/li>
&lt;li>模块：&lt;code>http_limit_req_module&lt;/code>&lt;/li>
&lt;li>默认编译进 Nginx，通过 &lt;code>--without-http_limit_req_module&lt;/code> 禁用&lt;/li>
&lt;li>生效算法：leaky bucket 算法&lt;/li>
&lt;li>生效范围
&lt;ul>
&lt;li>全部 worker 进程（基于共享内存）&lt;/li>
&lt;li>进入 preaccess 阶段前不生效&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="leaky-bucket-算法">leaky bucket 算法&lt;a class="td-heading-self-link" href="#leaky-bucket-%e7%ae%97%e6%b3%95" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>leaky bucket 叫漏桶算法，其他用来限制请求速率的还有令牌环算法等，这里面不展开讲。&lt;/p>
&lt;p>漏桶算法的原理是，先定义一个桶的大小，所有进入桶内的请求都会以恒定的速率被处理，如果请求太多超出了桶的容量，那么就会立刻返回错误。用一张图解释一下。&lt;/p>
&lt;p>&lt;img src="https://img2020.cnblogs.com/other/1833725/202005/1833725-20200521210219943-2053028943.png" alt="">&lt;/p>
&lt;p>这张图里面，水龙头在不停地滴水，就像用户发来的请求，所有的水滴都会以恒定的速率流出去，也就是被处理。漏桶算法对于突发流量有很好的限制作用，会将所有的请求平滑的处理掉。&lt;/p>
&lt;h3 id="指令语法-2">指令语法&lt;a class="td-heading-self-link" href="#%e6%8c%87%e4%bb%a4%e8%af%ad%e6%b3%95-2" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>定义共享内存（包括大小），以及 key 关键字和限制速率&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-vbnet" data-lang="vbnet">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Syntax&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">limit_req_zone&lt;/span> &lt;span style="color:#000">key&lt;/span> &lt;span style="color:#000">zone&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#000">size&lt;/span> &lt;span style="color:#000">rate&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">rate&lt;/span> &lt;span style="color:#a40000">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Default&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#a40000">—&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Context&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">http&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>rate 单位为 r/s 或者 r/m（每分钟或者每秒处理多少个请求）&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>限制并发连接数&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Syntax&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">limit_req&lt;/span> &lt;span style="color:#000">zone&lt;/span>=&lt;span style="color:#000">name&lt;/span> [&lt;span style="color:#000">burst&lt;/span>=&lt;span style="color:#000">number&lt;/span>] [&lt;span style="color:#000">nodelay&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Default&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> —
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Context&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">http&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">server&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">location&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;ul>
&lt;li>burst 默认为 0&lt;/li>
&lt;li>nodelay，如果设置了这个参数，那么对于漏桶中的请求也会立刻返回错误&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;ul>
&lt;li>限制发生时的日志级别&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Syntax:&lt;/span> &lt;span style="color:#4e9a06">limit_req_log_level&lt;/span> &lt;span style="color:#4e9a06">info&lt;/span> &lt;span style="color:#4e9a06">|&lt;/span> &lt;span style="color:#4e9a06">notice&lt;/span> &lt;span style="color:#4e9a06">|&lt;/span> &lt;span style="color:#4e9a06">warn&lt;/span> &lt;span style="color:#4e9a06">|&lt;/span> &lt;span style="color:#4e9a06">error&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Default:&lt;/span> &lt;span style="color:#4e9a06">limit_req_log_level&lt;/span> &lt;span style="color:#4e9a06">error&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Context:&lt;/span> &lt;span style="color:#4e9a06">http,&lt;/span> &lt;span style="color:#4e9a06">server,&lt;/span> &lt;span style="color:#4e9a06">location&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>限制发生时向客户端返回的错误码&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Syntax:&lt;/span> &lt;span style="color:#4e9a06">limit_req_status&lt;/span> &lt;span style="color:#4e9a06">code&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Default:&lt;/span> &lt;span style="color:#4e9a06">limit_req_status&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">503&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Context:&lt;/span> &lt;span style="color:#4e9a06">http,&lt;/span> &lt;span style="color:#4e9a06">server,&lt;/span> &lt;span style="color:#4e9a06">location&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="实战-5">实战&lt;a class="td-heading-self-link" href="#%e5%ae%9e%e6%88%98-5" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>在实际验证之前呢，需要注意两个问题：&lt;/p>
&lt;ul>
&lt;li>limit_req 与 limit_conn 配置同时生效时，哪个优先级高？&lt;/li>
&lt;li>nodelay 添加与否，有什么不同？&lt;/li>
&lt;/ul>
&lt;p>添加配置文件，这个配置文件与上一节的配置文件其实是相同的只不过需要注释一下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">limit_conn_zone&lt;/span> &lt;span style="color:#000">$binary_remote_addr&lt;/span> &lt;span style="color:#4e9a06">zone=addr:10m&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">limit_req_zone&lt;/span> &lt;span style="color:#000">$binary_remote_addr&lt;/span> &lt;span style="color:#4e9a06">zone=one:10m&lt;/span> &lt;span style="color:#4e9a06">rate=2r/m&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">server&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">listen&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">80&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">server_name&lt;/span> &lt;span style="color:#4e9a06">limit.ziyang.com&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">root&lt;/span> &lt;span style="color:#4e9a06">html/&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">error_log&lt;/span> &lt;span style="color:#4e9a06">logs/myerror.log&lt;/span> &lt;span style="color:#4e9a06">info&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">location&lt;/span> &lt;span style="color:#4e9a06">/&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">limit_conn_status&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">500&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">limit_conn_log_level&lt;/span> &lt;span style="color:#4e9a06">warn&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">#limit_rate 50;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">#limit_conn addr 1;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">#limit_req zone=one burst=3 nodelay;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">limit_req&lt;/span> &lt;span style="color:#4e9a06">zone=one&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>结论：在 &lt;code>limit_req zone=one&lt;/code> 指令下，超出每分钟处理的请求数后就会立刻返回 503。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>➜ test_nginx curl limit.ziyang.com
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;html&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;503 Service Temporarily Unavailable&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;body&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;center&amp;gt;&amp;lt;h1&amp;gt;503 Service Temporarily Unavailable&amp;lt;/h1&amp;gt;&amp;lt;/center&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;hr&amp;gt;&amp;lt;center&amp;gt;nginx/1.17.8&amp;lt;/center&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/body&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/html&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>改变一下注释的指令：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">limit_req&lt;/span> &lt;span style="color:#4e9a06">zone=one&lt;/span> &lt;span style="color:#4e9a06">burst=3&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#limit_req zone=one;
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在没有添加 burst 参数时，会立刻返回错误，而加上之后，不会返回错误，而是等待请求限制解除，直到可以处理请求时再返回。&lt;/p>
&lt;p>再来看一下 nodelay 参数：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">limit_req&lt;/span> &lt;span style="color:#4e9a06">zone=one&lt;/span> &lt;span style="color:#4e9a06">burst=3&lt;/span> &lt;span style="color:#4e9a06">nodelay&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>添加了 nodelay 之后，请求在没有达到 burst 限制之前都可以立刻被处理并返回，超出了 burst 限制之后，才会返回 503。&lt;/p>
&lt;p>现在可以回答一下刚开始提出的两个问题：&lt;/p>
&lt;ul>
&lt;li>limit_req 与 limit_conn 配置同时生效时，哪个优先级高？
&lt;ul>
&lt;li>limit_req 在 limit_conn 处理之前，因此是 limit_req 会生效&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>nodelay 添加与否，有什么不同？
&lt;ul>
&lt;li>不添加 nodelay，请求会等待，直到能够处理请求；添加 nodelay，在不超出 burst 的限制的情况下会立刻处理并返回，超出限制则会返回 503。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="access-阶段">access 阶段&lt;a class="td-heading-self-link" href="#access-%e9%98%b6%e6%ae%b5" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>经过 preaccess 阶段对用户的限流之后，就到了 access 阶段。&lt;/p>
&lt;h2 id="access-模块">access 模块&lt;a class="td-heading-self-link" href="#access-%e6%a8%a1%e5%9d%97" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>这里面涉及到的模块是 &lt;code>ngx_http_access_module&lt;/code>，它的基本特性如下：&lt;/p>
&lt;ul>
&lt;li>生效阶段：&lt;code>NGX_HTTP_ACCESS_PHASE&lt;/code> 阶段&lt;/li>
&lt;li>模块：&lt;code>http_access_module&lt;/code>&lt;/li>
&lt;li>默认编译进 Nginx，通过 &lt;code>--without-http_access_module&lt;/code> 禁用&lt;/li>
&lt;li>生效范围
&lt;ul>
&lt;li>进入 access 阶段前不生效&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="指令语法-3">指令语法&lt;a class="td-heading-self-link" href="#%e6%8c%87%e4%bb%a4%e8%af%ad%e6%b3%95-3" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Syntax:&lt;/span> &lt;span style="color:#4e9a06">allow&lt;/span> &lt;span style="color:#4e9a06">address&lt;/span> &lt;span style="color:#4e9a06">|&lt;/span> &lt;span style="color:#4e9a06">CIDR&lt;/span> &lt;span style="color:#4e9a06">|&lt;/span> &lt;span style="color:#4e9a06">unix:&lt;/span> &lt;span style="color:#4e9a06">|&lt;/span> &lt;span style="color:#4e9a06">all&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Default:&lt;/span> &lt;span style="color:#4e9a06">—&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">Context:&lt;/span> &lt;span style="color:#4e9a06">http,&lt;/span> &lt;span style="color:#4e9a06">server,&lt;/span> &lt;span style="color:#4e9a06">location,&lt;/span> &lt;span style="color:#4e9a06">limit_except&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">Syntax:&lt;/span> &lt;span style="color:#4e9a06">deny&lt;/span> &lt;span style="color:#4e9a06">address&lt;/span> &lt;span style="color:#4e9a06">|&lt;/span> &lt;span style="color:#4e9a06">CIDR&lt;/span> &lt;span style="color:#4e9a06">|&lt;/span> &lt;span style="color:#4e9a06">unix:&lt;/span> &lt;span style="color:#4e9a06">|&lt;/span> &lt;span style="color:#4e9a06">all&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Default:&lt;/span> &lt;span style="color:#4e9a06">—&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">Context:&lt;/span> &lt;span style="color:#4e9a06">http,&lt;/span> &lt;span style="color:#4e9a06">server,&lt;/span> &lt;span style="color:#4e9a06">location,&lt;/span> &lt;span style="color:#4e9a06">limit_except&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>access 模块提供了两条指令 &lt;code>allow&lt;/code> 和 &lt;code>deny&lt;/code>，来看几个例子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">location&lt;/span> &lt;span style="color:#4e9a06">/&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">deny&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">192&lt;/span>&lt;span style="color:#4e9a06">.168.1.1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">allow&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">192&lt;/span>&lt;span style="color:#4e9a06">.168.1.0/24&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">allow&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#4e9a06">.1.1.0/16&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">allow&lt;/span> &lt;span style="color:#000">2001&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#4e9a06">db8::/32&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">deny&lt;/span> &lt;span style="color:#4e9a06">all&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>对于用户访问来说，这些指令是顺序执行的，当满足了一条之后，就不会再向下执行。这个模块比较简单，我们这里不做实战演练了。&lt;/p>
&lt;h2 id="auth_basic-模块">auth_basic 模块&lt;a class="td-heading-self-link" href="#auth_basic-%e6%a8%a1%e5%9d%97" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>auth_basic 模块是用作用户认证的，当开启了这个模块之后，我们通过浏览器访问网站时，就会返回一个 401 Unauthorized，当然这个 401 用户不会看见，浏览器会弹出一个对话框要求输入用户名和密码。这个模块使用的是 RFC2617 中的定义。&lt;/p>
&lt;h3 id="指令语法-4">指令语法&lt;a class="td-heading-self-link" href="#%e6%8c%87%e4%bb%a4%e8%af%ad%e6%b3%95-4" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>基于 HTTP Basic Authutication 协议进行用户密码的认证&lt;/li>
&lt;li>默认编译进 Nginx
&lt;ul>
&lt;li>&amp;ndash;without-http_auth_basic_module&lt;/li>
&lt;li>disable ngx_http_auth_basic_module&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Syntax:&lt;/span> &lt;span style="color:#4e9a06">auth_basic&lt;/span> &lt;span style="color:#4e9a06">string&lt;/span> &lt;span style="color:#4e9a06">|&lt;/span> &lt;span style="color:#000">off&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Default:&lt;/span> &lt;span style="color:#4e9a06">auth_basic&lt;/span> &lt;span style="color:#000">off&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Context:&lt;/span> &lt;span style="color:#4e9a06">http,&lt;/span> &lt;span style="color:#4e9a06">server,&lt;/span> &lt;span style="color:#4e9a06">location,&lt;/span> &lt;span style="color:#4e9a06">limit_except&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">Syntax:&lt;/span> &lt;span style="color:#4e9a06">auth_basic_user_file&lt;/span> &lt;span style="color:#4e9a06">file&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Default:&lt;/span> &lt;span style="color:#4e9a06">—&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">Context:&lt;/span> &lt;span style="color:#4e9a06">http,&lt;/span> &lt;span style="color:#4e9a06">server,&lt;/span> &lt;span style="color:#4e9a06">location,&lt;/span> &lt;span style="color:#4e9a06">limit_except&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里面我们会用到一个工具叫 htpasswd，这个工具可以用来生成密码文件，而 &lt;code>auth_basic_user_file&lt;/code> 就依赖这个密码文件。&lt;/p>
&lt;blockquote>
&lt;p>htpasswd 依赖安装包 httpd-tools&lt;/p>
&lt;/blockquote>
&lt;p>生成密码的命令为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>htpasswd –c file –b user pass
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>生成的密码文件的格式为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># comment
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000">name1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#000">password&lt;/span>1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">name2&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#000">password&lt;/span>2:&lt;span style="color:#000">comment&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">name3&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#000">password&lt;/span>3
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="实战-6">实战&lt;a class="td-heading-self-link" href="#%e5%ae%9e%e6%88%98-6" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>在 example 目录下生成密码文件 auth.pass&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">htpasswd&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">bc&lt;/span> &lt;span style="color:#000">auth&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#204a87;font-weight:bold">pass&lt;/span> &lt;span style="color:#000">ziyang&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">123456&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>添加配置文件&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">server&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">server_name&lt;/span> &lt;span style="color:#4e9a06">access.ziyang.com&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">listen&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">80&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">error_log&lt;/span> &lt;span style="color:#4e9a06">logs/error.log&lt;/span> &lt;span style="color:#4e9a06">debug&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">default_type&lt;/span> &lt;span style="color:#4e9a06">text/plain&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">location&lt;/span> &lt;span style="color:#4e9a06">/auth_basic&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">satisfy&lt;/span> &lt;span style="color:#4e9a06">any&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">auth_basic&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;test&lt;/span> &lt;span style="color:#4e9a06">auth_basic&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">auth_basic_user_file&lt;/span> &lt;span style="color:#4e9a06">example/auth.pass&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">deny&lt;/span> &lt;span style="color:#4e9a06">all&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>重载 Nginx 配置文件&lt;/li>
&lt;li>在 /etc/hosts 文件中添加 access.ziyang.com&lt;/li>
&lt;/ul>
&lt;p>这时候访问 access.ziyang.com 就会弹出对话框，提示输入密码：&lt;/p>
&lt;p>&lt;img src="https://img2020.cnblogs.com/other/1833725/202005/1833725-20200521210220134-783796093.jpg" alt="">&lt;/p>
&lt;h2 id="auth_request-模块">auth_request 模块&lt;a class="td-heading-self-link" href="#auth_request-%e6%a8%a1%e5%9d%97" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>功能：向上游的服务转发请求，若上游服务返回的响应码是 2xx，则继续执行，若上游服务返回的响应码是 2xx，则继续执行，若上游服务返回的是 401 或者 403，则将响应返回给客户端&lt;/li>
&lt;li>原理：收到请求后，生成子请求，通过反向代理技术把请求传递给上游服务&lt;/li>
&lt;li>默认未编译进 Nginx，需要通过 &amp;ndash;with-http_auth_request_module 编译进去&lt;/li>
&lt;/ul>
&lt;h3 id="指令语法-5">指令语法&lt;a class="td-heading-self-link" href="#%e6%8c%87%e4%bb%a4%e8%af%ad%e6%b3%95-5" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Syntax:&lt;/span> &lt;span style="color:#4e9a06">auth_request&lt;/span> &lt;span style="color:#4e9a06">uri&lt;/span> &lt;span style="color:#4e9a06">|&lt;/span> &lt;span style="color:#000">off&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Default:&lt;/span> &lt;span style="color:#4e9a06">auth_request&lt;/span> &lt;span style="color:#000">off&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Context:&lt;/span> &lt;span style="color:#4e9a06">http,&lt;/span> &lt;span style="color:#4e9a06">server,&lt;/span> &lt;span style="color:#4e9a06">location&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">Syntax:&lt;/span> &lt;span style="color:#4e9a06">auth_request_set&lt;/span> &lt;span style="color:#000">$variable&lt;/span> &lt;span style="color:#4e9a06">value&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Default:&lt;/span> &lt;span style="color:#4e9a06">—&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">Context:&lt;/span> &lt;span style="color:#4e9a06">http,&lt;/span> &lt;span style="color:#4e9a06">server,&lt;/span> &lt;span style="color:#4e9a06">location&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="实战-7">实战&lt;a class="td-heading-self-link" href="#%e5%ae%9e%e6%88%98-7" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>在上一个配置文件中添加以下内容&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">server&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">server_name&lt;/span> &lt;span style="color:#4e9a06">access.ziyang.com&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">listen&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">80&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">error_log&lt;/span> &lt;span style="color:#4e9a06">logs/error.log&lt;/span> &lt;span style="color:#4e9a06">debug&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">#root html/;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">default_type&lt;/span> &lt;span style="color:#4e9a06">text/plain&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">location&lt;/span> &lt;span style="color:#4e9a06">/auth_basic&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">satisfy&lt;/span> &lt;span style="color:#4e9a06">any&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">auth_basic&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;test&lt;/span> &lt;span style="color:#4e9a06">auth_basic&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">auth_basic_user_file&lt;/span> &lt;span style="color:#4e9a06">example/auth.pass&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">deny&lt;/span> &lt;span style="color:#4e9a06">all&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">location&lt;/span> &lt;span style="color:#4e9a06">/&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">auth_request&lt;/span> &lt;span style="color:#4e9a06">/test_auth&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">location&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">/test_auth&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">proxy_pass&lt;/span> &lt;span style="color:#4e9a06">http://127.0.0.1:8090/auth_upstream&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">proxy_pass_request_body&lt;/span> &lt;span style="color:#000">off&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">proxy_set_header&lt;/span> &lt;span style="color:#4e9a06">Content-Length&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">proxy_set_header&lt;/span> &lt;span style="color:#4e9a06">X-Original-URI&lt;/span> &lt;span style="color:#000">$request_uri&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>这个配置文件中，/ 路径下会将请求转发到另外一个服务中去，可以用 nginx 再搭建一个服务&lt;/li>
&lt;li>如果这个服务返回 2xx，那么鉴权成功，如果返回 401 或 403 则鉴权失败&lt;/li>
&lt;/ul>
&lt;h2 id="限制所有-access-阶段模块的-satisfy-指令">限制所有 access 阶段模块的 satisfy 指令&lt;a class="td-heading-self-link" href="#%e9%99%90%e5%88%b6%e6%89%80%e6%9c%89-access-%e9%98%b6%e6%ae%b5%e6%a8%a1%e5%9d%97%e7%9a%84-satisfy-%e6%8c%87%e4%bb%a4" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="指令语法-6">指令语法&lt;a class="td-heading-self-link" href="#%e6%8c%87%e4%bb%a4%e8%af%ad%e6%b3%95-6" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Syntax:&lt;/span> &lt;span style="color:#4e9a06">satisfy&lt;/span> &lt;span style="color:#4e9a06">all&lt;/span> &lt;span style="color:#4e9a06">|&lt;/span> &lt;span style="color:#4e9a06">any&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Default:&lt;/span> &lt;span style="color:#4e9a06">satisfy&lt;/span> &lt;span style="color:#4e9a06">all&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Context:&lt;/span> &lt;span style="color:#4e9a06">http,&lt;/span> &lt;span style="color:#4e9a06">server,&lt;/span> &lt;span style="color:#4e9a06">location&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>satisfy&lt;/code> 指令有两个值一个是 all，一个是 any，这个模块对 acces 阶段的三个模块都生效：&lt;/p>
&lt;ul>
&lt;li>access 模块&lt;/li>
&lt;li>auth_basic 模块&lt;/li>
&lt;li>auth_request 模块&lt;/li>
&lt;li>其他模块&lt;/li>
&lt;/ul>
&lt;p>如果 &lt;code>satisfy&lt;/code> 指令的值是 all 的话，就表示必须所有 access 阶段的模块都要执行，都通过了才会放行；值是 any 的话，表示有任意一个模块得到执行即可。&lt;/p>
&lt;p>下面有几个问题可以加深一下理解：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>如果有 return 指令，access 阶段会生效吗？&lt;/p>
&lt;p>return 指令属于 rewrite 阶段，在 access 阶段之前，因此不会生效。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>多个 access 模块的顺序有影响吗？&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-undefined" data-lang="undefined">ngx_http_auth_request_module,
ngx_http_auth_basic_module,
ngx_http_access_module,
&lt;/code>&lt;/pre>&lt;p>有影响&lt;/p>
&lt;/li>
&lt;li>
&lt;p>输对密码，下面可以访问到文件吗？&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">location&lt;/span> &lt;span style="color:#4e9a06">/&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">satisfy&lt;/span> &lt;span style="color:#4e9a06">any&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">auth_basic&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;test&lt;/span> &lt;span style="color:#4e9a06">auth_basic&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">auth_basic_user_file&lt;/span> &lt;span style="color:#4e9a06">examples/auth.pass&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">deny&lt;/span> &lt;span style="color:#4e9a06">all&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以访问到，因为 &lt;code>satisfy&lt;/code> 的值是 any，因此只要有模块满足，即可放行。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果把 deny all 提到 auth_basic 之前呢？&lt;/p>
&lt;p>依然可以，因为各个模块执行顺序和指令的顺序无关。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果改为 allow all，有机会输入密码吗？&lt;/p>
&lt;p>没有机会，因为 allow all 是 access 模块，先于 auth_basic 模块执行。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h1 id="precontent-阶段">precontent 阶段&lt;a class="td-heading-self-link" href="#precontent-%e9%98%b6%e6%ae%b5" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>讲到了这里，我们再来回顾一下 Nginx 处理 HTTP 请求的 11 个阶段：&lt;/p>
&lt;p>&lt;img src="https://img2020.cnblogs.com/other/1833725/202005/1833725-20200521210216056-1680220103.png" alt="">&lt;/p>
&lt;p>现在我们已经来到了 precontent 阶段，这个阶段只有 try_files 这一个指令。&lt;/p>
&lt;h2 id="try_files-模块">try_files 模块&lt;a class="td-heading-self-link" href="#try_files-%e6%a8%a1%e5%9d%97" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="指令语法-7">指令语法&lt;a class="td-heading-self-link" href="#%e6%8c%87%e4%bb%a4%e8%af%ad%e6%b3%95-7" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Syntax:&lt;/span> &lt;span style="color:#4e9a06">try_files&lt;/span> &lt;span style="color:#4e9a06">file&lt;/span> &lt;span style="color:#4e9a06">...&lt;/span> &lt;span style="color:#4e9a06">uri&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">try_files&lt;/span> &lt;span style="color:#4e9a06">file&lt;/span> &lt;span style="color:#4e9a06">...&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">code&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Default:&lt;/span> &lt;span style="color:#4e9a06">—&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">Context:&lt;/span> &lt;span style="color:#4e9a06">server,&lt;/span> &lt;span style="color:#4e9a06">location&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>模块：&lt;code>ngx_http_try_files_module&lt;/code> 模块&lt;/li>
&lt;li>依次试图访问多个 URL 对应的文件（由 root 或者 alias 指令指定），当文件存在时，直接返回文件内容，如果所有文件都不存在，则按照最后一个 URL 结果或者 code 返回&lt;/li>
&lt;/ul>
&lt;h3 id="实战-8">实战&lt;a class="td-heading-self-link" href="#%e5%ae%9e%e6%88%98-8" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>下面我们实际看一个例子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">server&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">server_name&lt;/span> &lt;span style="color:#4e9a06">tryfiles.ziyang.com&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">listen&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">80&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">error_log&lt;/span> &lt;span style="color:#4e9a06">logs/myerror.log&lt;/span> &lt;span style="color:#4e9a06">info&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">root&lt;/span> &lt;span style="color:#4e9a06">html/&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">default_type&lt;/span> &lt;span style="color:#4e9a06">text/plain&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">location&lt;/span> &lt;span style="color:#4e9a06">/first&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">try_files&lt;/span> &lt;span style="color:#4e9a06">/system/maintenance.html&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">$uri&lt;/span> &lt;span style="color:#000">$uri/index.html&lt;/span> &lt;span style="color:#000">$uri.html&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">@lasturl&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">location&lt;/span> &lt;span style="color:#4e9a06">@lasturl&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">200&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;lasturl!\n&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">location&lt;/span> &lt;span style="color:#4e9a06">/second&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">try_files&lt;/span> &lt;span style="color:#000">$uri&lt;/span> &lt;span style="color:#000">$uri/index.html&lt;/span> &lt;span style="color:#000">$uri.html&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">404&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>结果如下：&lt;/p>
&lt;ul>
&lt;li>访问 /first 实际上到了 lasturl，然后返回 200&lt;/li>
&lt;li>访问 /second 则返回了 404&lt;/li>
&lt;/ul>
&lt;p>这两个结果都与配置文件是一致的。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>➜ test_nginx curl tryfiles.ziyang.com/second
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;html&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;404 Not Found&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;body&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;center&amp;gt;&amp;lt;h1&amp;gt;404 Not Found&amp;lt;/h1&amp;gt;&amp;lt;/center&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;hr&amp;gt;&amp;lt;center&amp;gt;nginx/1.17.8&amp;lt;/center&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/body&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/html&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>➜ test_nginx curl tryfiles.ziyang.com/first
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lasturl!
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="mirror-模块">mirror 模块&lt;a class="td-heading-self-link" href="#mirror-%e6%a8%a1%e5%9d%97" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>mirror 模块可以实时拷贝流量，这对于需要同时访问多个环境的请求是非常有用的。&lt;/p>
&lt;h3 id="指令语法-8">指令语法&lt;a class="td-heading-self-link" href="#%e6%8c%87%e4%bb%a4%e8%af%ad%e6%b3%95-8" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>模块：&lt;code>ngx_http_mirror_module&lt;/code> 模块，默认编译进 Nginx
&lt;ul>
&lt;li>通过 &amp;ndash;without-http_mirror_module 移除模块&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>功能：处理请求时，生成子请求访问其他服务，对子请求的返回值不做处理&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Syntax:&lt;/span> &lt;span style="color:#4e9a06">mirror&lt;/span> &lt;span style="color:#4e9a06">uri&lt;/span> &lt;span style="color:#4e9a06">|&lt;/span> &lt;span style="color:#000">off&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Default:&lt;/span> &lt;span style="color:#4e9a06">mirror&lt;/span> &lt;span style="color:#000">off&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Context:&lt;/span> &lt;span style="color:#4e9a06">http,&lt;/span> &lt;span style="color:#4e9a06">server,&lt;/span> &lt;span style="color:#4e9a06">location&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">Syntax:&lt;/span> &lt;span style="color:#4e9a06">mirror_request_body&lt;/span> &lt;span style="color:#000">on&lt;/span> &lt;span style="color:#4e9a06">|&lt;/span> &lt;span style="color:#000">off&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Default:&lt;/span> &lt;span style="color:#4e9a06">mirror_request_body&lt;/span> &lt;span style="color:#000">on&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Context:&lt;/span> &lt;span style="color:#4e9a06">http,&lt;/span> &lt;span style="color:#4e9a06">server,&lt;/span> &lt;span style="color:#4e9a06">location&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="实战-9">实战&lt;a class="td-heading-self-link" href="#%e5%ae%9e%e6%88%98-9" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>配置文件如下所示，需要再开启另外一个 Nginx 来接收请求&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">server&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">server_name&lt;/span> &lt;span style="color:#4e9a06">mirror.ziyang.com&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">listen&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">8001&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">error_log&lt;/span> &lt;span style="color:#4e9a06">logs/error_log&lt;/span> &lt;span style="color:#4e9a06">debug&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">location&lt;/span> &lt;span style="color:#4e9a06">/&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">mirror&lt;/span> &lt;span style="color:#4e9a06">/mirror&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">mirror_request_body&lt;/span> &lt;span style="color:#000">off&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">location&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">/mirror&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">internal&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">proxy_pass&lt;/span> &lt;span style="color:#4e9a06">http://127.0.0.1:10020&lt;/span>&lt;span style="color:#000">$request_uri&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">proxy_pass_request_body&lt;/span> &lt;span style="color:#000">off&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">proxy_set_header&lt;/span> &lt;span style="color:#4e9a06">Content-Length&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">proxy_set_header&lt;/span> &lt;span style="color:#4e9a06">X-Original-URI&lt;/span> &lt;span style="color:#000">$request_uri&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>在 access.log 文件中可以看到有请求记录日志&lt;/li>
&lt;/ul>
&lt;h1 id="content-阶段">content 阶段&lt;a class="td-heading-self-link" href="#content-%e9%98%b6%e6%ae%b5" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>下面开始就到了 content 阶段，先来看 content 阶段的 static 模块，虽然这是位于 content 阶段的最后一个处理模块，但是这里先来介绍它。&lt;/p>
&lt;p>&lt;img src="https://img2020.cnblogs.com/other/1833725/202005/1833725-20200521210220966-1780856001.png" alt="">&lt;/p>
&lt;h2 id="static-模块">static 模块&lt;a class="td-heading-self-link" href="#static-%e6%a8%a1%e5%9d%97" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="root-和-alias-指令">root 和 alias 指令&lt;a class="td-heading-self-link" href="#root-%e5%92%8c-alias-%e6%8c%87%e4%bb%a4" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>先来一下 root 和 alias 这两个指令，这两个指令都是用来映射文件路径的。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Syntax:&lt;/span> &lt;span style="color:#4e9a06">alias&lt;/span> &lt;span style="color:#4e9a06">path&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Default:&lt;/span> &lt;span style="color:#4e9a06">—&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">Context:&lt;/span> &lt;span style="color:#4e9a06">location&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Syntax:&lt;/span> &lt;span style="color:#4e9a06">root&lt;/span> &lt;span style="color:#4e9a06">path&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Default:&lt;/span> &lt;span style="color:#4e9a06">root&lt;/span> &lt;span style="color:#4e9a06">html&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Context:&lt;/span> &lt;span style="color:#4e9a06">http,&lt;/span> &lt;span style="color:#4e9a06">server,&lt;/span> &lt;span style="color:#4e9a06">location,&lt;/span> &lt;span style="color:#4e9a06">if&lt;/span> &lt;span style="color:#4e9a06">in&lt;/span> &lt;span style="color:#4e9a06">location&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>功能：将 URL 映射为文件路径，以返回静态文件内容&lt;/li>
&lt;li>差别：root 会将完整 URL 映射进文件路径中，alias 只会将 location 后的 URL 映射到文件路径&lt;/li>
&lt;/ul>
&lt;h3 id="实战-10">实战&lt;a class="td-heading-self-link" href="#%e5%ae%9e%e6%88%98-10" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>下面来看一个问题：&lt;/p>
&lt;p>现在有一个文件路径：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>html/first/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── 1.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>配置文件如下所示：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">server&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">server_name&lt;/span> &lt;span style="color:#4e9a06">static.ziyang.com&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">listen&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">80&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">error_log&lt;/span> &lt;span style="color:#4e9a06">logs/myerror.log&lt;/span> &lt;span style="color:#4e9a06">info&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">location&lt;/span> &lt;span style="color:#4e9a06">/root&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">root&lt;/span> &lt;span style="color:#4e9a06">html&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">location&lt;/span> &lt;span style="color:#4e9a06">/alias&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">alias&lt;/span> &lt;span style="color:#4e9a06">html&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">location&lt;/span> &lt;span style="color:#000;font-weight:bold">~&lt;/span> &lt;span style="color:#4e9a06">/root/(\w+\.txt)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">root&lt;/span> &lt;span style="color:#4e9a06">html/first/&lt;/span>&lt;span style="color:#000">$1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">location&lt;/span> &lt;span style="color:#000;font-weight:bold">~&lt;/span> &lt;span style="color:#4e9a06">/alias/(\w+\.txt)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">alias&lt;/span> &lt;span style="color:#4e9a06">html/first/&lt;/span>&lt;span style="color:#000">$1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">location&lt;/span> &lt;span style="color:#4e9a06">/RealPath/&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">alias&lt;/span> &lt;span style="color:#4e9a06">html/realpath/&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">200&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;&lt;/span>&lt;span style="color:#000">$request_filename:$document_root:$realpath_root\n&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>那么访问以下 URL 会得到什么响应呢？&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>/root
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/alias
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/root/1.txt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/alias/1.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>➜ test_nginx curl static.ziyang.com/alias/1.txt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>test1%
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>➜ test_nginx curl static.ziyang.com/alias/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;!DOCTYPE html&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;html&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;head&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;title&amp;gt;Welcome to nginx!&amp;lt;/title&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>➜ test_nginx curl static.ziyang.com/root/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;html&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;404 Not Found&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;body&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;center&amp;gt;&amp;lt;h1&amp;gt;404 Not Found&amp;lt;/h1&amp;gt;&amp;lt;/center&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;hr&amp;gt;&amp;lt;center&amp;gt;nginx/1.17.8&amp;lt;/center&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/body&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/html&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>➜ test_nginx curl static.ziyang.com/root/1.txt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;html&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;404 Not Found&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;body&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;center&amp;gt;&amp;lt;h1&amp;gt;404 Not Found&amp;lt;/h1&amp;gt;&amp;lt;/center&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;hr&amp;gt;&amp;lt;center&amp;gt;nginx/1.17.8&amp;lt;/center&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/body&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/html&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>访问这四个路径分别得到的结果是：&lt;/p>
&lt;ul>
&lt;li>/root：404&lt;/li>
&lt;li>/alias：200&lt;/li>
&lt;li>/root/1.txt：404&lt;/li>
&lt;li>/alias/1.txt：200&lt;/li>
&lt;/ul>
&lt;p>这是为什么呢？是因为，root 在映射 URL 时，会把 location 中的路径也加进去，也就是：&lt;/p>
&lt;ul>
&lt;li>&lt;code>static.ziyang.com/root/&lt;/code> 实际访问的是 &lt;code>html/root/&lt;/code>&lt;/li>
&lt;li>&lt;code>static.ziyang.com/root/1.txt&lt;/code> 实际是 &lt;code>html/first/1.txt/root/1.txt&lt;/code>&lt;/li>
&lt;li>&lt;code>static.ziyang.com/alias/&lt;/code> 实际上是正确访问到了 &lt;code>html&lt;/code> 文件夹，由于后面有 &lt;code>/&lt;/code> 的存在，因此实际访问的是 &lt;code>html/index.html&lt;/code>&lt;/li>
&lt;li>&lt;code>static.ziyang.com/alias/1.txt&lt;/code> 实际访问的是 &lt;code>html/first/1.txt&lt;/code>，文件存在&lt;/li>
&lt;/ul>
&lt;h3 id="三个相关变量">三个相关变量&lt;a class="td-heading-self-link" href="#%e4%b8%89%e4%b8%aa%e7%9b%b8%e5%85%b3%e5%8f%98%e9%87%8f" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>还是上面的配置文件：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">location&lt;/span> &lt;span style="color:#4e9a06">/RealPath/&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">alias&lt;/span> &lt;span style="color:#4e9a06">html/realpath/&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">200&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;&lt;/span>&lt;span style="color:#000">$request_filename:$document_root:$realpath_root\n&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里有一个问题，在访问 &lt;code>/RealPath/1.txt&lt;/code> 时，这三个变量的值各为多少？&lt;/p>
&lt;p>为了解答这个问题，我们先来解释三个变量：&lt;/p>
&lt;ul>
&lt;li>request_filename：待访问文件的完整路径&lt;/li>
&lt;li>document_root：由 URI 和 root/alias 指令生成的文件夹路径（可能包含软链接的路径）&lt;/li>
&lt;li>realpath_root：将 document_root 中的软链接替换成真实路径&lt;/li>
&lt;/ul>
&lt;p>为了验证这三个变量，在 html 目录下建立一个软链接指向 first 文件夹：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>ln -s first realpath
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">➜&lt;/span> &lt;span style="color:#000">html&lt;/span> &lt;span style="color:#000">curl&lt;/span> &lt;span style="color:#000">static&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ziyang&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">com&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#000">realpath&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">txt&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">/Users/m&lt;/span>&lt;span style="color:#000">tdp&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#000">myproject&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#000">nginx&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#000">test_nginx&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#000">html&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#000">realpath&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">txt&lt;/span>&lt;span style="color:#4e9a06">:/&lt;/span>&lt;span style="color:#000">Users&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#000">mtdp&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#000">myproject&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#000">nginx&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#000">test_nginx&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#000">html&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#000">realpath&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#4e9a06">:/&lt;/span>&lt;span style="color:#000">Users&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#000">mtdp&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#000">myproject&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#000">nginx&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#000">test_nginx&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#000">html&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#000">first&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看出来，三个路径分别是：&lt;/p>
&lt;ul>
&lt;li>/Users/mtdp/myproject/nginx/test_nginx/html/realpath/1.txt&lt;/li>
&lt;li>/Users/mtdp/myproject/nginx/test_nginx/html/realpath/&lt;/li>
&lt;li>/Users/mtdp/myproject/nginx/test_nginx/html/first&lt;/li>
&lt;/ul>
&lt;p>还有其他的一些配置指令，例如：&lt;/p>
&lt;p>&lt;strong>静态文件返回时的 Content-Type&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Syntax:&lt;/span> &lt;span style="color:#4e9a06">types&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#204a87;font-weight:bold">...&lt;/span> &lt;span style="color:#a40000">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">Default:&lt;/span> &lt;span style="color:#4e9a06">types&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#204a87;font-weight:bold">text/html&lt;/span> &lt;span style="color:#4e9a06">html&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">image/gif&lt;/span> &lt;span style="color:#4e9a06">gif&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">image/jpeg&lt;/span> &lt;span style="color:#4e9a06">jpg&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Context:&lt;/span> &lt;span style="color:#4e9a06">http,&lt;/span> &lt;span style="color:#4e9a06">server,&lt;/span> &lt;span style="color:#4e9a06">location&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">Syntax:&lt;/span> &lt;span style="color:#4e9a06">default_type&lt;/span> &lt;span style="color:#4e9a06">mime-type&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Default:&lt;/span> &lt;span style="color:#4e9a06">default_type&lt;/span> &lt;span style="color:#4e9a06">text/plain&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Context:&lt;/span> &lt;span style="color:#4e9a06">http,&lt;/span> &lt;span style="color:#4e9a06">server,&lt;/span> &lt;span style="color:#4e9a06">location&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">Syntax:&lt;/span> &lt;span style="color:#4e9a06">types_hash_bucket_size&lt;/span> &lt;span style="color:#4e9a06">size&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Default:&lt;/span> &lt;span style="color:#4e9a06">types_hash_bucket_size&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">64&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Context:&lt;/span> &lt;span style="color:#4e9a06">http,&lt;/span> &lt;span style="color:#4e9a06">server,&lt;/span> &lt;span style="color:#4e9a06">location&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">Syntax:&lt;/span> &lt;span style="color:#4e9a06">types_hash_max_size&lt;/span> &lt;span style="color:#4e9a06">size&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Default:&lt;/span> &lt;span style="color:#4e9a06">types_hash_max_size&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1024&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Context:&lt;/span> &lt;span style="color:#4e9a06">http,&lt;/span> &lt;span style="color:#4e9a06">server,&lt;/span> &lt;span style="color:#4e9a06">location&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>未找到文件时的错误日志&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Syntax:&lt;/span> &lt;span style="color:#4e9a06">log_not_found&lt;/span> &lt;span style="color:#000">on&lt;/span> &lt;span style="color:#4e9a06">|&lt;/span> &lt;span style="color:#000">off&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Default:&lt;/span> &lt;span style="color:#4e9a06">log_not_found&lt;/span> &lt;span style="color:#000">on&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Context:&lt;/span> &lt;span style="color:#4e9a06">http,&lt;/span> &lt;span style="color:#4e9a06">server,&lt;/span> &lt;span style="color:#4e9a06">location&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在生产环境中，经常可能会有找不到文件的情况，错误日志中就会打印出来：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-vhdl" data-lang="vhdl">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">error&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10156&lt;/span>&lt;span style="color:#a40000">#&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">10723&lt;/span> &lt;span style="color:#204a87;font-weight:bold">open&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;/html/first/2.txt/root/2.txt&amp;#34;&lt;/span> &lt;span style="color:#000">failed&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">No&lt;/span> &lt;span style="color:#000">such&lt;/span> &lt;span style="color:#204a87;font-weight:bold">file&lt;/span> &lt;span style="color:#204a87;font-weight:bold">or&lt;/span> &lt;span style="color:#000">directory&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果不想记录日志，可以关掉。&lt;/p>
&lt;h3 id="重定向跳转的域名">重定向跳转的域名&lt;a class="td-heading-self-link" href="#%e9%87%8d%e5%ae%9a%e5%90%91%e8%b7%b3%e8%bd%ac%e7%9a%84%e5%9f%9f%e5%90%8d" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>现在有另外一个问题，当我们访问目录时最后没有带 &lt;code>/&lt;/code>，static 模块会返回 301 重定向，那么这个规则是怎么定义的呢，看下面三个指令：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 该指令决定重定向时的域名，可以决定返回哪个域名
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">Syntax:&lt;/span> &lt;span style="color:#4e9a06">server_name_in_redirect&lt;/span> &lt;span style="color:#000">on&lt;/span> &lt;span style="color:#4e9a06">|&lt;/span> &lt;span style="color:#000">off&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Default:&lt;/span> &lt;span style="color:#4e9a06">server_name_in_redirect&lt;/span> &lt;span style="color:#000">off&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Context:&lt;/span> &lt;span style="color:#4e9a06">http,&lt;/span> &lt;span style="color:#4e9a06">server,&lt;/span> &lt;span style="color:#4e9a06">location&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 该指令决定重定向时的端口
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#4e9a06">Syntax:&lt;/span> &lt;span style="color:#4e9a06">port_in_redirect&lt;/span> &lt;span style="color:#000">on&lt;/span> &lt;span style="color:#4e9a06">|&lt;/span> &lt;span style="color:#000">off&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Default:&lt;/span> &lt;span style="color:#4e9a06">port_in_redirect&lt;/span> &lt;span style="color:#000">on&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Context:&lt;/span> &lt;span style="color:#4e9a06">http,&lt;/span> &lt;span style="color:#4e9a06">server,&lt;/span> &lt;span style="color:#4e9a06">location&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 该指令决定是否填域名，默认是打开的，也就是返回绝对路径
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#4e9a06">Syntax:&lt;/span> &lt;span style="color:#4e9a06">absolute_redirect&lt;/span> &lt;span style="color:#000">on&lt;/span> &lt;span style="color:#4e9a06">|&lt;/span> &lt;span style="color:#000">off&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Default:&lt;/span> &lt;span style="color:#4e9a06">absolute_redirect&lt;/span> &lt;span style="color:#000">on&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Context:&lt;/span> &lt;span style="color:#4e9a06">http,&lt;/span> &lt;span style="color:#4e9a06">server,&lt;/span> &lt;span style="color:#4e9a06">location&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这三个指令的实际用法来实战演示一下，先来看配置文件：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">server&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">server_name&lt;/span> &lt;span style="color:#4e9a06">return.ziyang.com&lt;/span> &lt;span style="color:#4e9a06">dir.ziyang.com&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">server_name_in_redirect&lt;/span> &lt;span style="color:#000">on&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">listen&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">8088&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">port_in_redirect&lt;/span> &lt;span style="color:#000">on&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">absolute_redirect&lt;/span> &lt;span style="color:#000">off&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">root&lt;/span> &lt;span style="color:#4e9a06">html/&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>absolute_redirect&lt;/code> 默认是打开的，我们把它关闭了，看下是怎么返回的：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">➜ test_nginx curl localhost:8088/first -I&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000">HTTP/1.1 301 Moved Permanently&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">Server&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">nginx/1.17.8&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">Date&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Tue, 12 May 2020 00:31:36 GMT&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">Content-Type&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">text/html&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">Content-Length&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">169&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">Connection&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">keep-alive&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">Location&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">/first/&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个时候看到返回的头部 &lt;code>Location&lt;/code> 中没有加上域名。&lt;/p>
&lt;p>下面再把 &lt;code>absolute_redirect&lt;/code> 打开（默认是打开的，因此注释掉就行了），看下返回什么：&lt;/p>
&lt;ul>
&lt;li>&lt;code>absolute_redirect on&lt;/code>&lt;/li>
&lt;li>&lt;code>server_name_in_redirect on&lt;/code>&lt;/li>
&lt;li>&lt;code>port_in_redirect on&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>➜ test_nginx curl localhost:8088/first -I
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>HTTP/1.1 &lt;span style="color:#0000cf;font-weight:bold">301&lt;/span> Moved Permanently
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Server: nginx/1.17.8
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Date: Tue, &lt;span style="color:#0000cf;font-weight:bold">12&lt;/span> May &lt;span style="color:#0000cf;font-weight:bold">2020&lt;/span> 00:35:49 GMT
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Content-Type: text/html
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Content-Length: &lt;span style="color:#0000cf;font-weight:bold">169&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Location: http://return.ziyang.com:8088/first/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Connection: keep-alive
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到，这时候就返回了域名，而且返回的是我们配置的主域名加端口号，这是因为，&lt;code>server_name_in_redirect&lt;/code> 和 &lt;code>port_in_redirect&lt;/code> 这两个指令打开了，如果关闭掉这两个指令，看下返回什么：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>absolute_redirect on&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>server_name_in_redirect off&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>port_in_redirect off&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>➜ test_nginx curl localhost:8088/first -I
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>HTTP/1.1 &lt;span style="color:#0000cf;font-weight:bold">301&lt;/span> Moved Permanently
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Server: nginx/1.17.8
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Date: Tue, &lt;span style="color:#0000cf;font-weight:bold">12&lt;/span> May &lt;span style="color:#0000cf;font-weight:bold">2020&lt;/span> 00:39:31 GMT
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Content-Type: text/html
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Content-Length: &lt;span style="color:#0000cf;font-weight:bold">169&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Location: http://localhost/first/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Connection: keep-alive
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这两个指令都设置为 &lt;code>off&lt;/code> 之后，会发现返回的不再是主域名加端口号，而是我们请求的域名和端口号，如果在请求头中加上 &lt;code>Host&lt;/code>，那么就会用 &lt;code>Host&lt;/code> 请求头中的域名。&lt;/p>
&lt;h2 id="index-模块">index 模块&lt;a class="td-heading-self-link" href="#index-%e6%a8%a1%e5%9d%97" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>模块：&lt;code>ngx_http_index_module&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>功能：指定 &lt;code>/&lt;/code> 结尾的目录访问时，返回 index 文件内容&lt;/p>
&lt;/li>
&lt;li>
&lt;p>语法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Syntax:&lt;/span> &lt;span style="color:#4e9a06">index&lt;/span> &lt;span style="color:#4e9a06">file&lt;/span> &lt;span style="color:#4e9a06">...&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Default:&lt;/span> &lt;span style="color:#4e9a06">index&lt;/span> &lt;span style="color:#4e9a06">index.html&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Context:&lt;/span> &lt;span style="color:#4e9a06">http,&lt;/span> &lt;span style="color:#4e9a06">server,&lt;/span> &lt;span style="color:#4e9a06">location&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>先于 autoindex 模块执行&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>这个模块，当我们访问以 &lt;code>/&lt;/code> 结尾的目录时，会去找 root 或 alias 指令的文件夹下的 index.html，如果有这个文件，就会把文件内容返回，也可以指定其他文件。&lt;/p>
&lt;h2 id="autoindex-模块">autoindex 模块&lt;a class="td-heading-self-link" href="#autoindex-%e6%a8%a1%e5%9d%97" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>模块：&lt;code>ngx_http_autoindex_module&lt;/code>，默认编译进 Nginx，使用 &lt;code>--without-http_autoindex_module&lt;/code> 取消&lt;/p>
&lt;/li>
&lt;li>
&lt;p>功能：当 URL 以 &lt;code>/&lt;/code> 结尾时，尝试以 html/xml/json/jsonp 等格式返回 root/alias 中指向目录的目录结构&lt;/p>
&lt;/li>
&lt;li>
&lt;p>语法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 开启或关闭
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">Syntax:&lt;/span> &lt;span style="color:#4e9a06">autoindex&lt;/span> &lt;span style="color:#000">on&lt;/span> &lt;span style="color:#4e9a06">|&lt;/span> &lt;span style="color:#000">off&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Default:&lt;/span> &lt;span style="color:#4e9a06">autoindex&lt;/span> &lt;span style="color:#000">off&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Context:&lt;/span> &lt;span style="color:#4e9a06">http,&lt;/span> &lt;span style="color:#4e9a06">server,&lt;/span> &lt;span style="color:#4e9a06">location&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 当以 HTML 格式输出时，控制是否转换为 KB/MB/GB
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#4e9a06">Syntax:&lt;/span> &lt;span style="color:#4e9a06">autoindex_exact_size&lt;/span> &lt;span style="color:#000">on&lt;/span> &lt;span style="color:#4e9a06">|&lt;/span> &lt;span style="color:#000">off&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Default:&lt;/span> &lt;span style="color:#4e9a06">autoindex_exact_size&lt;/span> &lt;span style="color:#000">on&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Context:&lt;/span> &lt;span style="color:#4e9a06">http,&lt;/span> &lt;span style="color:#4e9a06">server,&lt;/span> &lt;span style="color:#4e9a06">location&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 控制以哪种格式输出
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#4e9a06">Syntax:&lt;/span> &lt;span style="color:#4e9a06">autoindex_format&lt;/span> &lt;span style="color:#4e9a06">html&lt;/span> &lt;span style="color:#4e9a06">|&lt;/span> &lt;span style="color:#4e9a06">xml&lt;/span> &lt;span style="color:#4e9a06">|&lt;/span> &lt;span style="color:#4e9a06">json&lt;/span> &lt;span style="color:#4e9a06">|&lt;/span> &lt;span style="color:#4e9a06">jsonp&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Default:&lt;/span> &lt;span style="color:#4e9a06">autoindex_format&lt;/span> &lt;span style="color:#4e9a06">html&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Context:&lt;/span> &lt;span style="color:#4e9a06">http,&lt;/span> &lt;span style="color:#4e9a06">server,&lt;/span> &lt;span style="color:#4e9a06">location&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 控制是否以本地时间格式显示还是 UTC 格式
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#4e9a06">Syntax:&lt;/span> &lt;span style="color:#4e9a06">autoindex_localtime&lt;/span> &lt;span style="color:#000">on&lt;/span> &lt;span style="color:#4e9a06">|&lt;/span> &lt;span style="color:#000">off&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Default:&lt;/span> &lt;span style="color:#4e9a06">autoindex_localtime&lt;/span> &lt;span style="color:#000">off&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Context:&lt;/span> &lt;span style="color:#4e9a06">http,&lt;/span> &lt;span style="color:#4e9a06">server,&lt;/span> &lt;span style="color:#4e9a06">location&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="实战-11">实战&lt;a class="td-heading-self-link" href="#%e5%ae%9e%e6%88%98-11" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>配置文件如下：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">server&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">server_name&lt;/span> &lt;span style="color:#4e9a06">autoindex.ziyang.com&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">listen&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">8080&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">location&lt;/span> &lt;span style="color:#4e9a06">/&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">alias&lt;/span> &lt;span style="color:#4e9a06">html/&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">autoindex&lt;/span> &lt;span style="color:#000">on&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">#index b.html;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">autoindex_exact_size&lt;/span> &lt;span style="color:#000">on&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">autoindex_format&lt;/span> &lt;span style="color:#4e9a06">html&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">autoindex_localtime&lt;/span> &lt;span style="color:#000">on&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里我把 &lt;code>index b.html&lt;/code> 这条指令给注释掉了，而 index 模块是默认编译进 Nginx 的，且默认指令是 &lt;code>index index.html&lt;/code>，因此，会去找是否有 index.html 这个文件。&lt;/p>
&lt;ul>
&lt;li>打开浏览器，访问 autoindex.ziyang.com:8080，html 目录下默认是有 index.html 文件的，因此显示结果为：&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://img2020.cnblogs.com/other/1833725/202005/1833725-20200521210221493-1958960782.jpg" alt="">&lt;/p>
&lt;ul>
&lt;li>打开 &lt;code>index b.html&lt;/code> 指令注释。由于 html 文件夹下并不存在 b.html 这个文件，所以请求会走到 autoindex 模块，显示目录：&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://img2020.cnblogs.com/other/1833725/202005/1833725-20200521210221834-631689202.jpg" alt="">&lt;/p>
&lt;p>后面的文件大小显示格式就是由 &lt;code>autoindex_exact_size on;&lt;/code> 这条指令决定的。&lt;/p>
&lt;h2 id="concat模块">concat模块&lt;a class="td-heading-self-link" href="#concat%e6%a8%a1%e5%9d%97" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>下面介绍一个可以提升小文件性能的模块，这个模块是由阿里巴巴开发的，在淘宝网中有广泛应用。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>模块：ngx_http_concat_module&lt;/p>
&lt;/li>
&lt;li>
&lt;p>模块开发者：Tengine(&lt;a href="https://github.com/alibaba/nginx-http-concat">https://github.com/alibaba/nginx-http-concat&lt;/a>) &amp;ndash;add-module=../nginx-http-concat/&lt;/p>
&lt;/li>
&lt;li>
&lt;p>功能：合并多个小文件请求，可以明显提升 HTTP 请求的性能&lt;/p>
&lt;/li>
&lt;li>
&lt;p>指令：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#在 URI 后面加上 ??，通过 ”,“ 分割文件，如果还有参数，则在最后通过 ? 添加参数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">concat&lt;/span> &lt;span style="color:#000">on&lt;/span> &lt;span style="color:#4e9a06">|&lt;/span> &lt;span style="color:#000">off&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">default&lt;/span> &lt;span style="color:#4e9a06">concat&lt;/span> &lt;span style="color:#000">off&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">Context&lt;/span> &lt;span style="color:#4e9a06">http,&lt;/span> &lt;span style="color:#4e9a06">server,&lt;/span> &lt;span style="color:#4e9a06">location&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">concat_types&lt;/span> &lt;span style="color:#4e9a06">MIME&lt;/span> &lt;span style="color:#4e9a06">types&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">Default&lt;/span> &lt;span style="color:#4e9a06">concat_types:&lt;/span> &lt;span style="color:#4e9a06">text/css&lt;/span> &lt;span style="color:#4e9a06">application/x-javascript&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">Context&lt;/span> &lt;span style="color:#4e9a06">http,&lt;/span> &lt;span style="color:#4e9a06">server,&lt;/span> &lt;span style="color:#4e9a06">location&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">concat_unique&lt;/span> &lt;span style="color:#000">on&lt;/span> &lt;span style="color:#4e9a06">|&lt;/span> &lt;span style="color:#000">off&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">Default&lt;/span> &lt;span style="color:#4e9a06">concat_unique&lt;/span> &lt;span style="color:#000">on&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">Context&lt;/span> &lt;span style="color:#4e9a06">http,&lt;/span> &lt;span style="color:#4e9a06">server,&lt;/span> &lt;span style="color:#4e9a06">location&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">concat_max_files&lt;/span> &lt;span style="color:#4e9a06">numberp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">Default&lt;/span> &lt;span style="color:#4e9a06">concat_max_files&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">Context&lt;/span> &lt;span style="color:#4e9a06">http,&lt;/span> &lt;span style="color:#4e9a06">server,&lt;/span> &lt;span style="color:#4e9a06">location&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">concat_delimiter&lt;/span> &lt;span style="color:#4e9a06">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">Default&lt;/span> &lt;span style="color:#4e9a06">NONE&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">Context&lt;/span> &lt;span style="color:#4e9a06">http,&lt;/span> &lt;span style="color:#4e9a06">server,&lt;/span> &lt;span style="color:#4e9a06">locatione&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">concat_ignore_file_error&lt;/span> &lt;span style="color:#000">on&lt;/span> &lt;span style="color:#4e9a06">|&lt;/span> &lt;span style="color:#000">off&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">Default&lt;/span> &lt;span style="color:#000">off&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">Context&lt;/span> &lt;span style="color:#4e9a06">http,&lt;/span> &lt;span style="color:#4e9a06">server,&lt;/span> &lt;span style="color:#4e9a06">location&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;p>打开淘宝主页，会发现小文件都是通过这个模块来提高性能的：&lt;/p>
&lt;p>&lt;img src="https://img2020.cnblogs.com/other/1833725/202005/1833725-20200521210222499-928396668.jpg" alt="">&lt;/p>
&lt;p>这里就不做实战了，感兴趣的同学可以自己去编译一下这个模块，做一下实验，我把配置文件放在这里：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">server&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">server_name&lt;/span> &lt;span style="color:#4e9a06">concat.ziyang.com&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">error_log&lt;/span> &lt;span style="color:#4e9a06">logs/myerror.log&lt;/span> &lt;span style="color:#4e9a06">debug&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">concat&lt;/span> &lt;span style="color:#000">on&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">root&lt;/span> &lt;span style="color:#4e9a06">html&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">location&lt;/span> &lt;span style="color:#4e9a06">/concat&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">concat_max_files&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">20&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">concat_types&lt;/span> &lt;span style="color:#4e9a06">text/plain&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">concat_unique&lt;/span> &lt;span style="color:#000">on&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">concat_delimiter&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;:::&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">concat_ignore_file_error&lt;/span> &lt;span style="color:#000">on&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="log-阶段">log 阶段&lt;a class="td-heading-self-link" href="#log-%e9%98%b6%e6%ae%b5" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>下面终于来到了 11 个阶段的最后一个阶段，记录请求访问日志的 log 模块。&lt;/p>
&lt;ul>
&lt;li>功能：将 HTTP 请求相关信息记录到日志&lt;/li>
&lt;li>模块：&lt;code>ngx_http_log_module&lt;/code>，无法禁用&lt;/li>
&lt;/ul>
&lt;h2 id="access-日志格式">access 日志格式&lt;a class="td-heading-self-link" href="#access-%e6%97%a5%e5%bf%97%e6%a0%bc%e5%bc%8f" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Syntax:&lt;/span> &lt;span style="color:#4e9a06">log_format&lt;/span> &lt;span style="color:#4e9a06">name&lt;/span> &lt;span style="color:#4e9a06">[escape=default|json|none]&lt;/span> &lt;span style="color:#4e9a06">string&lt;/span> &lt;span style="color:#4e9a06">...&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Default:&lt;/span> &lt;span style="color:#4e9a06">log_format&lt;/span> &lt;span style="color:#4e9a06">combined&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;...&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Context:&lt;/span> &lt;span style="color:#4e9a06">http&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>默认的 combined 日志格式：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">log_format&lt;/span> &lt;span style="color:#4e9a06">combined&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;&lt;/span>&lt;span style="color:#000">$remote_addr&lt;/span> &lt;span style="color:#4e9a06">-&lt;/span> &lt;span style="color:#000">$remote_user&lt;/span> &lt;span style="color:#4e9a06">[&lt;/span>&lt;span style="color:#000">$time_local]&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&amp;#39;&amp;#34;&lt;/span>&lt;span style="color:#000">$request&amp;#34;&lt;/span> &lt;span style="color:#000">$status&lt;/span> &lt;span style="color:#000">$body_bytes_sent&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;&amp;#34;&lt;/span>&lt;span style="color:#000">$http_referer&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000">$http_user_agent&amp;#34;&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="配置日志文件路径">配置日志文件路径&lt;a class="td-heading-self-link" href="#%e9%85%8d%e7%bd%ae%e6%97%a5%e5%bf%97%e6%96%87%e4%bb%b6%e8%b7%af%e5%be%84" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Syntax:&lt;/span> &lt;span style="color:#4e9a06">access_log&lt;/span> &lt;span style="color:#4e9a06">path&lt;/span> &lt;span style="color:#4e9a06">[format&lt;/span> &lt;span style="color:#4e9a06">[buffer=size]&lt;/span> &lt;span style="color:#4e9a06">[gzip[=level]]&lt;/span> &lt;span style="color:#4e9a06">[flush=time]&lt;/span> &lt;span style="color:#4e9a06">[if=condition]]&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">access_log&lt;/span> &lt;span style="color:#000">off&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Default:&lt;/span> &lt;span style="color:#4e9a06">access_log&lt;/span> &lt;span style="color:#4e9a06">logs/access.log&lt;/span> &lt;span style="color:#4e9a06">combined&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Context:&lt;/span> &lt;span style="color:#4e9a06">http,&lt;/span> &lt;span style="color:#4e9a06">server,&lt;/span> &lt;span style="color:#4e9a06">location,&lt;/span> &lt;span style="color:#4e9a06">if&lt;/span> &lt;span style="color:#4e9a06">in&lt;/span> &lt;span style="color:#4e9a06">location,&lt;/span> &lt;span style="color:#4e9a06">limit_except&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>path 路径可以包含变量：不打开 cache 时每记录一条日志都需要打开、关闭日志文件&lt;/p>
&lt;/li>
&lt;li>
&lt;p>if 通过变量值控制请求日志是否记录&lt;/p>
&lt;/li>
&lt;li>
&lt;p>日志缓存&lt;/p>
&lt;ul>
&lt;li>
&lt;p>功能：批量将内存中的日志写入磁盘&lt;/p>
&lt;/li>
&lt;li>
&lt;p>写入磁盘的条件：&lt;/p>
&lt;pre>&lt;code>所有待写入磁盘的日志大小超出缓存大小；
达到 flush 指定的过期时间；
worker 进程执行 reopen 命令，或者正在关闭。
&lt;/code>&lt;/pre>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>日志压缩&lt;/p>
&lt;ul>
&lt;li>功能：批量压缩内存中的日志，再写入磁盘&lt;/li>
&lt;li>buffer 大小默认为 64KB&lt;/li>
&lt;li>压缩级别默认为 1（1最快压缩率最低，9最慢压缩率最高）&lt;/li>
&lt;li>打开日志压缩时，默认打开日志缓存功能&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="对日志文件名包含变量时的优化">对日志文件名包含变量时的优化&lt;a class="td-heading-self-link" href="#%e5%af%b9%e6%97%a5%e5%bf%97%e6%96%87%e4%bb%b6%e5%90%8d%e5%8c%85%e5%90%ab%e5%8f%98%e9%87%8f%e6%97%b6%e7%9a%84%e4%bc%98%e5%8c%96" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Syntax:&lt;/span> &lt;span style="color:#4e9a06">open_log_file_cache&lt;/span> &lt;span style="color:#4e9a06">max=N&lt;/span> &lt;span style="color:#4e9a06">[inactive=time]&lt;/span> &lt;span style="color:#4e9a06">[min_uses=N]&lt;/span> &lt;span style="color:#4e9a06">[valid=time]&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">open_log_file_cache&lt;/span> &lt;span style="color:#000">off&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Default:&lt;/span> &lt;span style="color:#4e9a06">open_log_file_cache&lt;/span> &lt;span style="color:#000">off&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">Context:&lt;/span> &lt;span style="color:#4e9a06">http,&lt;/span> &lt;span style="color:#4e9a06">server,&lt;/span> &lt;span style="color:#4e9a06">location&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>max：缓存内的最大文件句柄数，超出后用 LRU 算法淘汰&lt;/li>
&lt;li>inactive：文件访问完后在这段时间内不会被关闭。默认 10 秒&lt;/li>
&lt;li>min_uses：在 inactive 时间内使用次数超过 min_uses 才会继续存在内存中。默认 1&lt;/li>
&lt;li>valid：超出 valid 时间后，将对缓存的日志文件检查是否存在。默认 60 秒&lt;/li>
&lt;li>off：关闭缓存功能&lt;/li>
&lt;/ul>
&lt;p>日志模块没有实战。&lt;/p>
&lt;hr>
&lt;p>到了这里，我们已经将 Nginx 处理 HTTP 请求的 11 个阶段全部梳理了一遍，每个阶段基本都有对应的模块。相信对于这样一个全流程的解析，大家都能够看懂 Nginx 的配置了，在此之上，还能够按照需求灵活配置出自己想要的配置，这样就真正的掌握了 11 个阶段。&lt;/p>
&lt;p>最后，欢迎大家关注我的个人博客：&lt;a href="https://iziyang.github.io/">iziyang.github.io&lt;/a>&lt;/p></description></item><item><title>Docs: Nginx 衍生品</title><link>https://desistdaydream.github.io/docs/Web/Nginx/Nginx-%E8%A1%8D%E7%94%9F%E5%93%81/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/Web/Nginx/Nginx-%E8%A1%8D%E7%94%9F%E5%93%81/</guid><description/></item><item><title>Docs: Nginx 源码解析</title><link>https://desistdaydream.github.io/docs/Web/Nginx/Nginx-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/Web/Nginx/Nginx-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/nginx/nginx">GitHub 项目，nginx/nginx&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Nginx 的架构设计是高度模块化的，从 Nginx 的源码目录与 Nginx 模块化及其功能的划分是紧密结合的。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># tree -d&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── auto
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── conf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── contrib
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── docs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── misc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── src
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├── core
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├── event
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │   └── modules
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├── http
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │   ├── modules
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │   │   └── perl
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │   └── v2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├── mail
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├── misc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├── os
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │   ├── unix
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │   └── win32
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └── stream
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>每个模块必须要具备 &lt;code>ngx_module_t&lt;/code> 这个数据结构，比如 src/core/nginx.c 文件中，在 ngx_module_t 数据结构中，定义了 ngx_core_module 模块&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">ngx_module_t&lt;/span> &lt;span style="color:#000">ngx_core_module&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// 定义模块名称为 ngx_core_module
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">NGX_MODULE_V1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">ngx_core_module_ctx&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/* module context */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// ngx_core_commands 是该模块的指令，这里一般会定义一个数组，数组中每个元素就是一个指令
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">ngx_core_commands&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/* module directives */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// NGX_CORE_MODULE 是该模块的类型
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">NGX_CORE_MODULE&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/* module type */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">NULL&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/* init master */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">NULL&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/* init module */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">NULL&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/* init process */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">NULL&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/* init thread */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">NULL&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/* exit thread */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">NULL&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/* exit process */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">NULL&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/* exit master */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">NGX_MODULE_V1_PADDING&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>再看 src/http/ngx_http.c 文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">ngx_module_t&lt;/span> &lt;span style="color:#000">ngx_http_module&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">NGX_MODULE_V1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">ngx_http_module_ctx&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/* module context */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">ngx_http_commands&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/* module directives */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// ngx_http_module 模块属于 NGX_CORE_MODULE 类型
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">NGX_CORE_MODULE&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/* module type */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">NULL&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/* init master */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">NULL&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/* init module */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">NULL&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/* init process */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">NULL&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/* init thread */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">NULL&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/* exit thread */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">NULL&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/* exit process */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">NULL&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/* exit master */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">NGX_MODULE_V1_PADDING&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>http 模块属于 NGX_CORE_MODULE 类型如果看 src/stream/ngx_stream.c、src/event/ngx_event.src、src/mail/ngx_mail_module.c 这三个文件，里面都有类似的定义&lt;/p>
&lt;p>最后看 src/http/modules/ 目录，这里就是都有属于 NGX_HTTP_MODULE 模块的子模块。定义方式类似。&lt;/p>
&lt;h1 id="总结">总结&lt;a class="td-heading-self-link" href="#%e6%80%bb%e7%bb%93" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>所以，从代码结构可以看出来，Nginx 模块定义了如下几大类型，并且每一类模块包含不同的模块&lt;/p>
&lt;ul>
&lt;li>&lt;strong>NGX_CORE_MODULE&lt;/strong>&lt;/li>
&lt;li>&lt;strong>NGX_EVENT_MODULE&lt;/strong>&lt;/li>
&lt;li>&lt;strong>NGX_HTTP_MODULE&lt;/strong>&lt;/li>
&lt;li>&lt;strong>NGX_MAIL_MODULE&lt;/strong>&lt;/li>
&lt;li>&lt;strong>NGX_STREAM_MODULE&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>与此同时，每种类型的模块下，包含很多子模块，模块类型是抽象的概念，主要是为了帮助模块进行分类。而模块，则是真正处理任务的：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>NGX_CORE_MODULE&lt;/strong>
&lt;ul>
&lt;li>ngx_core_module # core 模块，这个比较特殊，core 模块类型下，其实就是包含了一个 core 模块。&lt;/li>
&lt;li>ngx_event_module # event 模块&lt;/li>
&lt;li>ngx_http_module # http 模块&lt;/li>
&lt;li>ngx_mail_module # mail 模块&lt;/li>
&lt;li>ngx_stream_module # stream 模块&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>NGX_EVENT_MODULE&lt;/strong>
&lt;ul>
&lt;li>ngx_event_core_module # event core 模块&lt;/li>
&lt;li>&amp;hellip;&amp;hellip; 太多了就不一一列举了，详见官网&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>NGX_HTTP_MODULE&lt;/strong>
&lt;ul>
&lt;li>ngx_http_core_module # http core 模块&lt;/li>
&lt;li>&amp;hellip;&amp;hellip; 太多了就不一一列举了，详见官网&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>NGX_MAIL_MODULE&lt;/strong>
&lt;ul>
&lt;li>ngx_mail_module # mail core 模块&lt;/li>
&lt;li>&amp;hellip;&amp;hellip; 太多了就不一一列举了，详见官网&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>NGX_STREAM_MODULE&lt;/strong>
&lt;ul>
&lt;li>ngx_stream_module # stream core 模块&lt;/li>
&lt;li>&amp;hellip;&amp;hellip; 太多了就不一一列举了，详见官网&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>从上面的分类也可以看出来，每个类型的模块都有一个被称为 core 的模块来实现这个类型的功能。这其实就可以组成一个树状的结构：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/eygybr/1619798135171-e81a3491-2566-4f50-ab0f-4b0868a5670e.png" alt="image.png">&lt;/p>
&lt;p>这个图不太好，有机会自己画一个。&lt;/p>
&lt;p>画成图就是这个样子的：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/eygybr/1619768579247-4047676f-2ece-4b9c-bed2-7d53d7f32ae4.png" alt="image.png">&lt;/p>
&lt;p>就像 &lt;a href="http://nginx.org/en/docs/">官方文档的模块参考&lt;/a> 页面一样，我们可以看到下面这样的命名规则 &lt;code>ngx_XXX_YYY_module&lt;/code>。其中 XXX 就是顶级模块名，YYY 就是属于 XXX 模块的次级模块名。效果如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 包含 core 和 event 模块&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Core functionality
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># http 模块&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ngx_http_core_module
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ngx_http_access_module
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ngx_http_addition_module
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>......
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># mail 模块&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ngx_mail_core_module
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ngx_mail_auth_http_module
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>......
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># stream 模块&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ngx_stream_core_module
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ngx_stream_access_module
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ngx_stream_geo_module
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>......
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Nginx 通过这种架构，将各个模块组织成一条链，当有请求到达时，请求依次经过这条链上的部分或者全部模块，进行处理。每个模块实现特定的功能。&lt;/p>
&lt;p>而这些模块的运行行为，就是通过配置文件中的 &lt;a href="https://desistdaydream.github.io/docs/Web/Nginx/Nginx%20%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/Nginx%20%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3.md">&lt;strong>Directive(指令)&lt;/strong>&lt;/a> 实现的。一般每个顶级模块都有一个同名的 顶级指令，比如 http 模块对应 http{} 顶级指令。&lt;/p>
&lt;p>Nginx 模块的架构，也使得 Nginx 实现了灵活得可扩展性。&lt;/p></description></item><item><title>Docs: Nginx 优化</title><link>https://desistdaydream.github.io/docs/Web/Nginx/Nginx-%E4%BC%98%E5%8C%96/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/Web/Nginx/Nginx-%E4%BC%98%E5%8C%96/</guid><description>
&lt;ol>
&lt;li>性能优化的相关配置
&lt;ol>
&lt;li>work_processes NUM; # 常用，指定 work 线程个数，通常应该少于 cpu 物理核心数，设为 auto 为自动判断&lt;/li>
&lt;li>work_cpu_affinity CpuMask; # 常用，设定 cpu 掩码，用于绑定给 nginx 专用的 cpu 数&lt;/li>
&lt;li>timer_resolution Num; # 计时器解析度，降低此值，可提高性能&lt;/li>
&lt;li>worker_priority NUM; # 设定优先级，即 worker 线程的 nice 值&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>事件相关配置
&lt;ol>
&lt;li>worker_connections NUM; # 常用，指定每个 worker 线程所能处理的最大并发连接数&lt;/li>
&lt;li>accept_mutex on|off; # 调度用户请求至 worker 线程时使用的负载均衡锁。on 是让多个 worker 轮流的，序列化地响应新请求&lt;/li>
&lt;li>lock_file /PATH/FILE; # 指定 accept_mutex 开启后用到的锁文件路径&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>用于调试、定位问题的配置
&lt;ol>
&lt;li>daemon on|off； # 是否以守护进程方式运行 nginx，调试时设置为 off&lt;/li>
&lt;li>master_process on|off； # 是否以 master/worker 模式来运行 ngins，调试时可以设置为 off&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h3 id="优化-nginx-数据包头缓存">优化 Nginx 数据包头缓存&lt;a class="td-heading-self-link" href="#%e4%bc%98%e5%8c%96-nginx-%e6%95%b0%e6%8d%ae%e5%8c%85%e5%a4%b4%e7%bc%93%e5%ad%98" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>1）优化前，使用脚本测试长头部请求是否能获得响应&lt;/p>
&lt;pre>&lt;code>[root@proxy ~]# cat lnmp_soft/buffer.sh
#!/bin/bash
URL=http://192.168.4.5/index.html?
for i in {1..5000}
do
URL=${URL}v$i=$i
done
curl $URL //经过5000次循环后，生成一个长的URL地址栏
[root@proxy ~]# ./buffer.sh
.. ..
&amp;lt;center&amp;gt;&amp;lt;h1&amp;gt;414 Request-URI Too Large&amp;lt;/h1&amp;gt;&amp;lt;/center&amp;gt; //提示头部信息过大
&lt;/code>&lt;/pre>
&lt;p>2）修改 Nginx 配置文件，增加数据包头部缓存大小&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># vim /usr/local/nginx/conf/nginx.conf
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">...&lt;/span> &lt;span style="color:#4e9a06">..&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">http&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">client_header_buffer_size&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1k&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">//&lt;/span> &lt;span style="color:#4e9a06">默认请求包头信息的缓存&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">large_client_header_buffers&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4k&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">//&lt;/span> &lt;span style="color:#4e9a06">大请求包头部信息的缓存个数与容量&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">..&lt;/span> &lt;span style="color:#4e9a06">..&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># /usr/local/nginx/sbin/nginx -s reload
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>3）优化后，使用脚本测试长头部请求是否能获得响应&lt;/p>
&lt;pre>&lt;code>1.[root@proxy ~]# cat buffer.sh
2.#!/bin/bash
3.URL=http://192.168.4.5/index.html?
4.for i in {1..5000}
5.do
6. URL=${URL}v$i=$i
7.done
8.curl $URL
9.[root@proxy ~]# ./buffer.sh
&lt;/code>&lt;/pre>
&lt;h3 id="浏览器本地缓存静态数据">浏览器本地缓存静态数据&lt;a class="td-heading-self-link" href="#%e6%b5%8f%e8%a7%88%e5%99%a8%e6%9c%ac%e5%9c%b0%e7%bc%93%e5%ad%98%e9%9d%99%e6%80%81%e6%95%b0%e6%8d%ae" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>1）使用 Firefox 浏览器查看缓存&lt;/p>
&lt;p>以 Firefox 浏览器为例，在 Firefox 地址栏内输入 about:cache 将显示 Firefox 浏览器的缓存信息，如图所示，点击 List Cache Entries 可以查看详细信息。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/bzuh2e/1621231619142-0d5c79d5-689e-48b4-9b82-2e6fd6450a02.webp" alt="">
2）清空 firefox 本地缓存数据，如图所示。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/bzuh2e/1621231619179-e56a8fb4-8a7c-4e06-afe1-6bb66fe30d1b.webp" alt="">&lt;/p>
&lt;p>3）改 Nginx 配置文件，定义对静态页面的缓存时间&lt;/p>
&lt;pre>&lt;code># vim /usr/local/nginx/conf/nginx.conf
server {
listen 80;
server_name localhost;
location / {
root html;
index index.html index.htm;
}
location ~* \.(jpg|jpeg|gif|png|css|js|ico|xml)$ {
expires 30d; //定义客户端缓存时间为30天
}
}
# cp /usr/share/backgrounds/day.jpg /usr/local/nginx/html
# /usr/local/nginx/sbin/nginx -s reload
#请先确保nginx是启动状态，否则运行该命令会报错,报错信息如下：16.#[error] open() &amp;quot;/usr/local/nginx/logs/nginx.pid&amp;quot; failed (2: No such file or directory)
&lt;/code>&lt;/pre>
&lt;p>4）优化后，使用 Firefox 浏览器访问图片，再次查看缓存信息&lt;/p>
&lt;pre>&lt;code># firefox http://192.168.4.5/day.jpg
&lt;/code>&lt;/pre>
&lt;p>在 firefox 地址栏内输入 about:cache，查看本地缓存数据，查看是否有图片以及过期时间是否正确。&lt;/p></description></item></channel></rss>