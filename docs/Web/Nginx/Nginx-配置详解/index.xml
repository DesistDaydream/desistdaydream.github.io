<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>_index on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/Web/Nginx/Nginx-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</link><description>Recent content in _index on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/Web/Nginx/Nginx-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/index.xml" rel="self" type="application/rss+xml"/><item><title>Nginx 配置详解</title><link>https://desistdaydream.github.io/docs/Web/Nginx/Nginx-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/Nginx-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/Web/Nginx/Nginx-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/Nginx-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</guid><description>概述 参考：
org 官方文档，初学者指南-配置文件结构 org 官方文档，全部指令列表 org 官方文档，全部变量列表 官方文档，管理指南-基础功能-创建 NGINX 配置文件 Nginx 由 Modules(模块) 组成， Modules 由配置文件中的 Directives(指令) 控制其运行行为。有的 Directives 可以控制多个模块，只不过在控制不同模块时，产生的效果也许会不尽相同。
Directives(指令) Directives(指令) 分为如下几种：
Simple Directives(简单指令) Block Directives(块指令) Conexts(配置环境 | 上下文) Simple Directives(简单指令) 由空格分割的 Name(指令名称) 和 Parameters(指令参数)，以 ; 符号结尾。
如果从 Nginx 的代码角度看，指令就相当于结构体中的属性，参数就是该属性的值。 Block Directives(块指令) 将多个相关的简单指令组合在一起的容器，并将它们用 {} 符号包围起来。
Top Level Directives(顶级指令) - 也称为 Contexts(配置环境 | 上下文) 将多个相关的 块指令 和 简单指令 组合在一起的指令，也是使用 {} 符号将这些指令包围起来。一共分为 4 类 Contexts：
events {} # 用于配置如何处理常规连接。 http {} # http 流量处理配置，通常用来配置 7 层代理。由 ngx_http_core_module 模块处理其中配置 mail {} # mail 流量处理配置。由 ngx_mail_core_module 模块处理其中配置 stream {} # TCP 和 UDP 流量处理配置，通常用来配置 4 层代理。由 ngx_stream_core_module 模块处理其中配置 main # 如果某些指令在上述 4 类 Contexts 之外，则称之为 main Context。可以说，events{}、http{}、mail{}、stream{} 四个 Contexts，都属于 main 上下文中的指令。说白了，main 上下文就是 Nginx 的配置文件~其实，main 就是指最顶层的 core 模块指令</description></item><item><title>core 模块指令</title><link>https://desistdaydream.github.io/docs/Web/Nginx/Nginx-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/core-%E6%A8%A1%E5%9D%97%E6%8C%87%E4%BB%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/Web/Nginx/Nginx-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/core-%E6%A8%A1%E5%9D%97%E6%8C%87%E4%BB%A4/</guid><description>概述 参考：
org 官方文档，核心功能 main 模块主要用来为 nginx 程序的运行方式进行定义，并不涉及流量处理相关工作。
指令详解 user USERNAME [GROUPNAME]; # 指定运行 work 线程的用户和组
pid /PATH/PidFile; # 指定 nginx 守护进程的 pid 文件
work_rlimit_nofile NUMBER; # 指定所有 work 线程加起来所能打开的最大文件句柄数</description></item><item><title>events 模块指令</title><link>https://desistdaydream.github.io/docs/Web/Nginx/Nginx-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/events-%E6%A8%A1%E5%9D%97%E6%8C%87%E4%BB%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/Web/Nginx/Nginx-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/events-%E6%A8%A1%E5%9D%97%E6%8C%87%E4%BB%A4/</guid><description>概述 指令详解 worker_connections NUMBER; # worker 进程最大并发连接数
默认值：worker_connections 512;</description></item><item><title>http 模块指令</title><link>https://desistdaydream.github.io/docs/Web/Nginx/Nginx-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/http-%E6%A8%A1%E5%9D%97%E6%8C%87%E4%BB%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/Web/Nginx/Nginx-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/http-%E6%A8%A1%E5%9D%97%E6%8C%87%E4%BB%A4/</guid><description>概述 参考：
org 官方文档，http core 模块 官方文档，管理指南-负载均衡-HTTP 负载均衡 http 模块及其子模块通过 http {} 配置环境中的指令控制行为
http{} 配置环境下的每个 server{} 指令块控制访问特定域名或者 ip 地址上对资源请求的处理。server{} 指令块中的一个或多个 location{} 指令块定义了根据 URL 来处理流量的规则
比如用户访问 map.baidu.com 和 baike.baidu.com。看上去是访问了两台服务器，但是实际上，这是经过作为代理设备的 ngxin 来进行选择后的虚拟服务器。一般情况下，baike.baidu.com 与 map.baidu.com 这俩域名所解析出来的 ip 应该是同一个公网 ip(比如 123.123.123.123)(baidu 有钱用很多公网 IP 除外)。所以可以想到，用户在浏览器输入任何一个域名，访问请求都会来到 123.123.123.123，然后根据请求报文中的 Request-URL 字段中的域名与 server_name 进行配对，用户输入的 URL 中域名与哪个 server_name 相同，则该请求就会通过这个 server 来进行处理，然后根据该 server 中 location 的关键字来决定把改请求转发给哪里。 对于 http{} 配置环境来说，server{}、server_name、location{}、proxy_pass 是实现 7 层代理的关键指令。server_name 指定接受流量的域名，location{} 匹配路径，然后通过 proxy_pass 将流量代理到指定的后端。
简单的 http{} 配置环境示例 http { access_log /dev/stdout main; upstream backend { # 后端配置 server backend1.</description></item><item><title>stream 模块指令</title><link>https://desistdaydream.github.io/docs/Web/Nginx/Nginx-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/stream-%E6%A8%A1%E5%9D%97%E6%8C%87%E4%BB%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/Web/Nginx/Nginx-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/stream-%E6%A8%A1%E5%9D%97%E6%8C%87%E4%BB%A4/</guid><description>概述 参考：
org 官方文档， stream core 模块 官方文档，管理指南-负载均衡-TCP 与 UDP 负载均衡 stream 模块及其子模块通过 stream {} 配置环境中的指令控制行为
简单的 stream{} 配置环境示例 stream { upstream stream_backend { least_conn; server backend1.example.com:12345 weight=5; server backend2.example.com:12345 max_fails=2 fail_timeout=30s; server backend3.example.com:12345 max_conns=3; } upstream dns_servers { least_conn; server 192.168.136.130:53; server 192.168.136.131:53; server 192.168.136.132:53; } server { listen 12345; proxy_pass stream_backend; proxy_timeout 3s; proxy_connect_timeout 1s; } server { listen 53 udp; proxy_pass dns_servers; } server { listen 12346; proxy_pass backend4.</description></item><item><title>其他属于 NGX_CORE_MODULE 类型的模块</title><link>https://desistdaydream.github.io/docs/Web/Nginx/Nginx-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/%E5%85%B6%E4%BB%96%E5%B1%9E%E4%BA%8E-NGX_CORE_MODULE-%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%A8%A1%E5%9D%97/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/Web/Nginx/Nginx-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/%E5%85%B6%E4%BB%96%E5%B1%9E%E4%BA%8E-NGX_CORE_MODULE-%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%A8%A1%E5%9D%97/</guid><description>NGX_CONF_MODULE inclue 语法：include /PATH/FILE http://nginx.org/en/docs/ngx_core_module.html#include
在该配置中包含一个网站-可用的配置文件，即把定义的文件内容引入到这里，(也可以写入多个 include，引入多个配置文件以便管理，包括但不限于 server 配置，还可以是 nginx 的配置文件，mail 的配置文件等)
作用范围：可以作用在任意 Contexts 中 该指令可以写在任意 块指令 中，只要被包含的文件格式，符合当前 块指令 应该包含的语法即可。</description></item><item><title>七层代理配置</title><link>https://desistdaydream.github.io/docs/Web/Nginx/Nginx-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/%E4%B8%83%E5%B1%82%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/Web/Nginx/Nginx-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/%E4%B8%83%E5%B1%82%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE/</guid><description>概述 参考：
公众号，Nginx 代理 WebSocket 方法 这个配置里的 172.19.42.217 是 kubernetes 集群的入口，一般在 80 和 443 上都起一个 ingress controler，这样，多种域名都代理到同一个 kubernetes 集群，然后由 ingress 再将流量进行路由分配。
user nginx; worker_processes 4; error_log /dev/stdout warn; pid /var/run/nginx.pid; events { worker_connections 102400; } http { default_type application/octet-stream; access_log /dev/stdout main; keepalive_timeout 120; log_format main &amp;#39;$remote_addr - $remote_user [$time_local] &amp;#34;$request&amp;#34; &amp;#39; &amp;#39;$status $body_bytes_sent &amp;#34;$http_referer&amp;#34; &amp;#39; &amp;#39;&amp;#34;$http_user_agent&amp;#34; &amp;#34;$http_x_forwarded_for&amp;#34;&amp;#39; &amp;#39;$upstream_addr &amp;#39; &amp;#39;ups_resp_time: $upstream_response_time &amp;#39; &amp;#39;request_time: $request_time&amp;#39;; sendfile on; server_names_hash_bucket_size 256; server { listen 80; server_name grafana.</description></item><item><title>四层代理配置</title><link>https://desistdaydream.github.io/docs/Web/Nginx/Nginx-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/%E5%9B%9B%E5%B1%82%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/Web/Nginx/Nginx-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/%E5%9B%9B%E5%B1%82%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE/</guid><description>概述 参考：
4 层代理配置 user nginx; worker_processes auto; error_log /var/log/nginx/error.log; pid /run/nginx.pid; include /usr/share/nginx/modules/*.conf; events { worker_connections 10240; } stream { include stream.d/*.conf; upstream grafana { server 172.38.40.216:30000; server 172.38.40.217:30000; } upstream prometheus { server 172.38.40.216:30001 weight=8 max_fails=2 fail_timeout=30s; server 172.38.40.217:30001 weight=8 max_fails=2 fail_timeout=30s; } server { listen 30000; proxy_pass grafana; proxy_connect_timeout 10s; } server { listen 30001; proxy_pass prometheus; proxy_connect_timeout 2s; } } http { }</description></item><item><title>Nginx 作为静态资源服务器配置示例</title><link>https://desistdaydream.github.io/docs/Web/Nginx/Nginx-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/Nginx-%E4%BD%9C%E4%B8%BA%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE%E7%A4%BA%E4%BE%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/Web/Nginx/Nginx-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/Nginx-%E4%BD%9C%E4%B8%BA%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE%E7%A4%BA%E4%BE%8B/</guid><description>Nginx 的 location 里面的 root、alias 的使用技巧与区别 知乎：https://zhuanlan.zhihu.com/p/379076598
location Nginx 里面的 location，可以针对一个特殊的 URI 路径进行单独的设置。
location / { root /tongfu.net/web/static; } 在 location 块里面可以单独设置映射目录、重写逻辑、默认文档等等。
location / { root /tongfu.net/web/download; index index.htm; } location ~ ^\/download\/.*\.(zip|rar|tgz|gz)$ { rewrite ^\/download\/(.*)$ /downloadValidation.php?$1; } root Nginx 里面的 root 参数用来指定映射根目录，末尾不加“/”。
主机默认目录 直接在 server 里面设置 root 就是设置主机的根目录。
server { root /tongfu.net/web/static; } 匹配 URI 目录 在 location 里面设置 root 就是设置匹配 URI 的根目录。
下面的例子里如果访问 http://localhost/icon/abc.png 网址，映射到的服务器路径是 /tongfu.net/web/icons**/icon/abc.png**。
location /icon/ { root /tongfu.</description></item></channel></rss>