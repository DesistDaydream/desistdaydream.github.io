<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – _index</title><link>https://desistdaydream.github.io/docs/Web/Nginx/Nginx-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</link><description>Recent content in _index on 断念梦</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/Web/Nginx/Nginx-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Nginx 配置详解</title><link>https://desistdaydream.github.io/docs/Web/Nginx/Nginx-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/Nginx-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/Web/Nginx/Nginx-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/Nginx-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://nginx.org/en/docs/beginners_guide.html#conf_structure">org 官方文档，初学者指南-配置文件结构&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://nginx.org/en/docs/dirindex.html">org 官方文档，全部指令列表&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://nginx.org/en/docs/varindex.html">org 官方文档，全部变量列表&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.nginx.com/nginx/admin-guide/basic-functionality/managing-configuration-files/#">官方文档，管理指南-基础功能-创建 NGINX 配置文件&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Nginx 由 &lt;strong>Modules(模块)&lt;/strong> 组成， Modules 由配置文件中的 &lt;strong>Directives(指令)&lt;/strong> 控制其运行行为。有的 Directives 可以控制多个模块，只不过在控制不同模块时，产生的效果也许会不尽相同。&lt;/p>
&lt;h2 id="directives指令">Directives(指令)&lt;/h2>
&lt;p>Directives(指令) 分为如下几种：&lt;/p>
&lt;ul>
&lt;li>Simple Directives(简单指令)&lt;/li>
&lt;li>Block Directives(块指令)&lt;/li>
&lt;li>Conexts(配置环境 | 上下文)&lt;/li>
&lt;/ul>
&lt;h3 id="simple-directives简单指令">Simple Directives(简单指令)&lt;/h3>
&lt;p>由空格分割的 &lt;strong>Name(指令名称)&lt;/strong> 和 &lt;strong>Parameters(指令参数)&lt;/strong>，以 &lt;code>;&lt;/code> 符号结尾。&lt;/p>
&lt;ul>
&lt;li>如果从 Nginx 的代码角度看，指令就相当于结构体中的属性，参数就是该属性的值。&lt;/li>
&lt;/ul>
&lt;h3 id="block-directives块指令">Block Directives(块指令)&lt;/h3>
&lt;p>将多个相关的简单指令组合在一起的容器，并将它们用 &lt;code>{}&lt;/code> 符号包围起来。&lt;/p>
&lt;h3 id="top-level-directives顶级指令---也称为-contexts配置环境--上下文">Top Level Directives(顶级指令) - 也称为 Contexts(配置环境 | 上下文)&lt;/h3>
&lt;p>将多个相关的 块指令 和 简单指令 组合在一起的指令，也是使用 &lt;code>{}&lt;/code> 符号将这些指令包围起来。一共分为 4 类 Contexts：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://desistdaydream.github.io/docs/Web/Nginx/Nginx%20%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/events%20%E6%A8%A1%E5%9D%97%E6%8C%87%E4%BB%A4.md">&lt;strong>events {}&lt;/strong>&lt;/a> # 用于配置如何处理常规连接。&lt;/li>
&lt;li>&lt;a href="https://desistdaydream.github.io/docs/Web/Nginx/Nginx%20%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/http%20%E6%A8%A1%E5%9D%97%E6%8C%87%E4%BB%A4.md">&lt;strong>http {}&lt;/strong>&lt;/a> # http 流量处理配置，通常用来配置 7 层代理。由 ngx_http_core_module 模块处理其中配置&lt;/li>
&lt;li>&lt;strong>mail {}&lt;/strong> # mail 流量处理配置。由 ngx_mail_core_module 模块处理其中配置&lt;/li>
&lt;li>&lt;a href="https://desistdaydream.github.io/docs/Web/Nginx/Nginx%20%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/stream%20%E6%A8%A1%E5%9D%97%E6%8C%87%E4%BB%A4.md">&lt;strong>stream {}&lt;/strong>&lt;/a> # TCP 和 UDP 流量处理配置，通常用来配置 4 层代理。由 ngx_stream_core_module 模块处理其中配置&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://desistdaydream.github.io/docs/Web/Nginx/Nginx%20%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/core%20%E6%A8%A1%E5%9D%97%E6%8C%87%E4%BB%A4.md">&lt;strong>main&lt;/strong>&lt;/a> # 如果某些指令在上述 4 类 Contexts 之外，则称之为 main Context。可以说，events{}、http{}、mail{}、stream{} 四个 Contexts，都属于 main 上下文中的指令。说白了，main 上下文就是 Nginx 的配置文件~其实，main 就是指最顶层的 core 模块指令&lt;/p>
&lt;p>每一个 Context 类型的指令都对应控制一个 NGX_CORE_MODULE 类型的模块&lt;/p>
&lt;ul>
&lt;li>main 指令 —&amp;gt; 控制 core 模块&lt;/li>
&lt;li>events {} 指令 —&amp;gt; 控制 events 模块&lt;/li>
&lt;li>http {} 指令 —&amp;gt; 控制 http 模块&lt;/li>
&lt;li>mail {} 指令 —&amp;gt; 控制 mail 模块&lt;/li>
&lt;li>stream {} 指令 —&amp;gt; 控制 stream 模块&lt;/li>
&lt;/ul>
&lt;p>所以，配置文件的格式实际上也是一个树状结构：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/tt8mpd/1619841196176-fa5e09e5-44b9-49e2-bdc3-bccc385d0218.png" alt="树形结构.png">&lt;/p>
&lt;p>最顶层的 main 指令，包含 简单指令 和 4 个 Contexts，每个 Context 又包含 简单指令/块指令。&lt;/p>
&lt;h2 id="inheritance继承">Inheritance(继承)&lt;/h2>
&lt;p>通常，子块指令 将会继承其 父块指令 中的指令设置。某些 简单指令 可以出现在多个 块指令 中，这种情况下，可以通过在 子块指令 中设置该 简单指令，以便覆盖其从 父块指令 中继承过来的设置。&lt;/p>
&lt;h2 id="variables变量">Variables(变量)&lt;/h2>
&lt;p>在 Nginx 的配置文件中，还可以设置并引用变量，通过 &lt;code>set&lt;/code> 指令，可以定义一个变量，并在其他指令中使用 &lt;code>$变量名&lt;/code> 引用变量。同样，也有环境变量的概念，Nginx 的很多模块在加载并时候后，会产生环境变量，也可以直接引用&lt;/p>
&lt;p>变量最常用的地方就是通过 &lt;code>log_format&lt;/code> 指令定义日志内容~~&lt;/p>
&lt;h2 id="基本配置示例">基本配置示例&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 在 4 种配置环境之外的指令属于 main 配置环境，一般用于配置 nginx 运行的基础信息
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">user&lt;/span> &lt;span style="color:#e6db74">nobody&lt;/span>; &lt;span style="color:#75715e"># 这是一个 main context 中的指令
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 事件配置环境。用于配置连接参数等信息
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">events&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 关于连接处理的配置
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># http 流量处理配置环境
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">http&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 影响所有 virtual servers 的 http 流量的配置
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">server&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">server_name&lt;/span> &lt;span style="color:#e6db74">localhost&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 配置处理 http 流量的 Virtual Server 1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">location&lt;/span> &lt;span style="color:#e6db74">/one&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 配置用于处理以&amp;#39;/one&amp;#39;开头的URI的流量
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">location&lt;/span> &lt;span style="color:#e6db74">/two&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 配置用于处理以&amp;#39;/two&amp;#39;开头的URI的流量
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">server&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 配置处理 http 流量的 Virtual Server 2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># mail 流量处理环境
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">mail&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">....&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># TCP 和 UDP 流量处理配置环境
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#e6db74">stream&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 影响所有 virtual servers 的 TCP/UDP 流量的配置
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">server&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">#配置处理 TCP 流量的 Virtual Server 1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note：&lt;/p>
&lt;ul>
&lt;li>通常 &lt;code>{}&lt;/code> 中的指令只对大括号内部内容生效；不在 &lt;code>{}&lt;/code> 中且在文件开头的，则对全局生效；配置指令要以分号结尾&lt;/li>
&lt;li>配置技巧：为了使配置更易于维护，还可以将大段的配置拆分为一组一组存储在 /etc/nginx/conf.d/ 目录下的文件，并在 nginx.conf 这个主配置文件中使用 &lt;code>include&lt;/code> 指令来引用这些文件。&lt;/li>
&lt;/ul>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>其实，Nginx 的配置本质就是对模块的配置，这些指令就是模块可以接收的形参；而指令的值就是代码中，应该给模块传递的实参。&lt;/p>
&lt;p>而 Nginx 配置文件的组织结构更像 INI 格式的配置文件，Nginx 的 顶级指令就是 Selections(部分) 的概念；简单指令就是 Key/Value Pairs(键/值对) 的概念；块指令其实就是一种嵌套形式的简单指令。&lt;/p>
&lt;h1 id="配置文件详解">配置文件详解&lt;/h1>
&lt;p>本质上，Nginx 的配置文件，就是由 &lt;strong>Directives(指令)&lt;/strong> 与 &lt;strong>Contexts(配置环境 | 上下文)&lt;/strong> 组成，而这些指令和配置环境，又是围绕 Virtual Servers 运转。&lt;/p>
&lt;h2 id="virtual-servers虚拟主机-抽象概念">Virtual Servers(虚拟主机) 抽象概念&lt;/h2>
&lt;p>&lt;strong>Virtual Servers(虚拟主机)&lt;/strong> 是 Nginx 的抽象概念，Virtual Servers 用来定义 &lt;strong>流量入口&lt;/strong>和 &lt;strong>流量处理&lt;/strong>。而这两块功能也是 Nginx 正常工作的最基本功能。&lt;/p>
&lt;h3 id="流量入口">流量入口&lt;/h3>
&lt;p>流量入口包括监听的地址、域名等。对于发送到 Nginx 的流量，根据流量中的内容，分配到不同的入口，进行后续流量处理。&lt;/p>
&lt;h3 id="流量处理">流量处理&lt;/h3>
&lt;p>流量处理包括将流量代理到何处、是否丢弃、连接超时时长等。&lt;/p>
&lt;h4 id="后端服务器">后端服务器&lt;/h4>
&lt;p>由于流量处理需要将流量代理到指定的服务器，所以还需要配置后端服务器来接收流量。&lt;/p>
&lt;h2 id="总结-1">总结&lt;/h2>
&lt;p>Virtual Server 的概念，通过 &lt;strong>&lt;code>server{}&lt;/code>&lt;/strong> 指令来实现。在每个流量处理的配置环境中，都应该包含一个或多个 server{} 指令。server{} 指令是 nginx 正常运行的基础配置。虚拟主机，顾名思义，对于用户来说，访问的就是一台一台服务器，但是对于 nginx 来说，是虚拟出来的。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>对于 http 流量(http 配置环境)&lt;/strong> # 每个 &lt;code>server{} 指令块&lt;/code> 控制访问特定域名或者 ip 地址上对资源请求的处理。server 指令块中的一个或多个 location 指令块定义了根据 URI 来处理流量的规则
&lt;ul>
&lt;li>比如用户访问 map.baidu.com 和 baike.baidu.com。看上去是访问了两台服务器，但是实际上，这是经过作为代理设备的 ngxin 来进行选择后的虚拟服务器。一般情况下，baike.baidu.com 与 map.baidu.com 这俩域名所解析出来的 ip 应该是同一个公网 ip(比如 123.123.123.123)(baidu 有钱用很多公网 IP 除外)。所以可以想到，用户在浏览器输入任何一个域名，访问请求都会来到 123.123.123.123，然后根据请求报文中的 Request-URL 字段中的域名与 server_name 进行配对，用户输入的 URL 中域名与哪个 server_name 相同，则该请求就会通过这个 server 来进行处理，然后根据该 server 中 location 的关键字来决定把改请求转发给哪里。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>mail 和 TCP/UDP 流量(mail 和 stream 配置环境)&lt;/strong> # 每个 &lt;code>server{} 指令块&lt;/code> 控制处理到达指定 TCP port 或 UNIX socket 的流量。
&lt;ul>
&lt;li>比如用户访问 30000 端口，则可以根据其中的规则，将 对 30000 端口发起的请求，代理到其他设备的某些端口上。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>其实说白了，每个 Virtual Server 都相当于一个独立运行的服务，用来处理客户端的请求。具体如何处理，则在每个 server{} 指令块中定义。可以这么说，Nginx 中所有指令，其实都是为 Virtual Servers 服务的。&lt;/p>
&lt;h1 id="指令详解">指令详解&lt;/h1>
&lt;h2 id="main-模块指令">main 模块指令&lt;/h2>
&lt;p>详见 &lt;a href="https://desistdaydream.github.io/docs/Web/Nginx/Nginx%20%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/core%20%E6%A8%A1%E5%9D%97%E6%8C%87%E4%BB%A4.md">core 模块指令&lt;/a>&lt;/p>
&lt;h2 id="events-模块指令">events 模块指令&lt;/h2>
&lt;p>详见 &lt;a href="https://desistdaydream.github.io/docs/Web/Nginx/Nginx%20%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/events%20%E6%A8%A1%E5%9D%97%E6%8C%87%E4%BB%A4.md">events 模块指令&lt;/a>&lt;/p>
&lt;h2 id="http-模块指令">http 模块指令&lt;/h2>
&lt;p>详见 &lt;a href="https://desistdaydream.github.io/docs/Web/Nginx/Nginx%20%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/http%20%E6%A8%A1%E5%9D%97%E6%8C%87%E4%BB%A4.md">http 模块指令&lt;/a>&lt;/p>
&lt;p>常用来配置七层代理、web 应用&lt;/p>
&lt;h2 id="mail-模块指令">mail 模块指令&lt;/h2>
&lt;h2 id="stream-模块指令">stream 模块指令&lt;/h2>
&lt;p>详见 &lt;a href="https://desistdaydream.github.io/docs/Web/Nginx/Nginx%20%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/stream%20%E6%A8%A1%E5%9D%97%E6%8C%87%E4%BB%A4.md">stream 模块指令&lt;/a>&lt;/p>
&lt;p>常用来配置四层代理&lt;/p></description></item><item><title>Docs: core 模块指令</title><link>https://desistdaydream.github.io/docs/Web/Nginx/Nginx-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/core-%E6%A8%A1%E5%9D%97%E6%8C%87%E4%BB%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/Web/Nginx/Nginx-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/core-%E6%A8%A1%E5%9D%97%E6%8C%87%E4%BB%A4/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://nginx.org/en/docs/ngx_core_module.html">org 官方文档,核心功能&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>main 模块主要用来为 nginx 程序的运行方式进行定义，并不涉及流量处理相关工作。&lt;/p>
&lt;h1 id="指令详解">指令详解&lt;/h1>
&lt;p>&lt;strong>user USERNAME [GROUPNAME];&lt;/strong> # 指定运行 work 线程的用户和组&lt;/p>
&lt;p>&lt;strong>pid /PATH/PidFile;&lt;/strong> # 指定 nginx 守护进程的 pid 文件&lt;/p>
&lt;p>&lt;strong>work_rlimit_nofile NUMBER;&lt;/strong> # 指定所有 work 线程加起来所能打开的最大文件句柄数&lt;/p></description></item><item><title>Docs: events 模块指令</title><link>https://desistdaydream.github.io/docs/Web/Nginx/Nginx-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/events-%E6%A8%A1%E5%9D%97%E6%8C%87%E4%BB%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/Web/Nginx/Nginx-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/events-%E6%A8%A1%E5%9D%97%E6%8C%87%E4%BB%A4/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;h1 id="指令详解">指令详解&lt;/h1>
&lt;p>&lt;a href="http://nginx.org/en/docs/ngx_core_module.html#worker_connections">&lt;strong>worker_connections NUMBER;&lt;/strong>&lt;/a> # worker 进程最大并发连接数&lt;/p>
&lt;ul>
&lt;li>默认值：&lt;code>worker_connections 512;&lt;/code>&lt;/li>
&lt;/ul></description></item><item><title>Docs: http 模块指令</title><link>https://desistdaydream.github.io/docs/Web/Nginx/Nginx-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/http-%E6%A8%A1%E5%9D%97%E6%8C%87%E4%BB%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/Web/Nginx/Nginx-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/http-%E6%A8%A1%E5%9D%97%E6%8C%87%E4%BB%A4/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://nginx.org/en/docs/http/ngx_http_core_module.html">org 官方文档,http core 模块&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.nginx.com/nginx/admin-guide/load-balancer/http-load-balancer/">官方文档,管理指南-负载均衡-HTTP 负载均衡&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>http 模块及其子模块通过 &lt;code>http {}&lt;/code> 配置环境中的指令控制行为&lt;/p>
&lt;p>&lt;code>http{}&lt;/code> 配置环境下的每个 &lt;code>server{}&lt;/code> 指令块控制访问特定域名或者 ip 地址上对资源请求的处理。&lt;code>server{}&lt;/code> 指令块中的一个或多个 &lt;code>location{}&lt;/code> 指令块定义了根据 URL 来处理流量的规则&lt;/p>
&lt;ul>
&lt;li>比如用户访问 map.baidu.com 和 baike.baidu.com。看上去是访问了两台服务器，但是实际上，这是经过作为代理设备的 ngxin 来进行选择后的虚拟服务器。一般情况下，baike.baidu.com 与 map.baidu.com 这俩域名所解析出来的 ip 应该是同一个公网 ip(比如 123.123.123.123)(baidu 有钱用很多公网 IP 除外)。所以可以想到，用户在浏览器输入任何一个域名，访问请求都会来到 123.123.123.123，然后根据请求报文中的 Request-URL 字段中的域名与 server_name 进行配对，用户输入的 URL 中域名与哪个 server_name 相同，则该请求就会通过这个 server 来进行处理，然后根据该 server 中 location 的关键字来决定把改请求转发给哪里。&lt;/li>
&lt;/ul>
&lt;p>对于 &lt;code>http{}&lt;/code> 配置环境来说，server{}、server_name、location{}、proxy_pass 是实现 7 层代理的关键指令。server_name 指定接受流量的域名，&lt;code>location{}&lt;/code> 匹配路径，然后通过 proxy_pass 将流量代理到指定的后端。&lt;/p>
&lt;h2 id="简单的-http-配置环境示例">简单的 http{} 配置环境示例&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">http&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">access_log&lt;/span> &lt;span style="color:#e6db74">/dev/stdout&lt;/span> &lt;span style="color:#e6db74">main&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">upstream&lt;/span> &lt;span style="color:#e6db74">backend&lt;/span> { &lt;span style="color:#75715e"># 后端配置
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">server&lt;/span> &lt;span style="color:#e6db74">backend1.example.com&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">server&lt;/span> &lt;span style="color:#e6db74">backend2.example.com&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">server&lt;/span> &lt;span style="color:#ae81ff">192&lt;/span>&lt;span style="color:#e6db74">.0.0.1&lt;/span> &lt;span style="color:#e6db74">backup&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">server&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">server_name&lt;/span> &lt;span style="color:#e6db74">localhost&lt;/span>; &lt;span style="color:#75715e"># 流量入口
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">location&lt;/span> &lt;span style="color:#e6db74">/&lt;/span> { &lt;span style="color:#75715e"># 流量处理
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">proxy_pass&lt;/span> &lt;span style="color:#e6db74">http://backend&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">include&lt;/span> &lt;span style="color:#e6db74">/etc/nginx/conf.d/*.conf&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="virtual-server-基本配置">Virtual Server 基本配置&lt;/h1>
&lt;h2 id="流量入口指令">流量入口指令&lt;/h2>
&lt;p>流量入口的指令通常都定义在 &lt;code>**server{} 块指令**&lt;/code> 中。&lt;/p>
&lt;h3 id="server">server&lt;/h3>
&lt;p>&lt;a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#server">https://nginx.org/en/docs/http/ngx_http_core_module.html#server&lt;/a>&lt;/p>
&lt;ul>
&lt;li>作用范围：http{}&lt;/li>
&lt;/ul>
&lt;p>server{} 指令块用来定义 Virtual Server&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">server&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">listen&lt;/span> &lt;span style="color:#e6db74">[::]:80&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">server_name&lt;/span> &lt;span style="color:#e6db74">&amp;#34;baike.baidu.com&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">location&lt;/span> &lt;span style="color:#e6db74">/&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">proxy_pass&lt;/span> &lt;span style="color:#e6db74">http://192.168.0.100:8080&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">server&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">.......&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>下面详解的各种 简单指令 或 块指令 一般情况，都将会定义在 &lt;code>server{}&lt;/code> 块指令中&lt;/p>
&lt;h3 id="listen">listen&lt;/h3>
&lt;p>&lt;a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#listen">https://nginx.org/en/docs/http/ngx_http_core_module.html#listen&lt;/a>&lt;/p>
&lt;ul>
&lt;li>语法：&lt;code>listen TARGET[PARAMETER]&lt;/code>&lt;/li>
&lt;li>默认值：&lt;code>listen *：80 | *：8000;&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>指定 Virtual Server 监听的端口，也可加上 IP:PORT&lt;/p>
&lt;ul>
&lt;li>&lt;strong>TARGET&lt;/strong> # 每个 Virtual Server 的 listen 指令都会让 Nginx 监听一个 TARGET。TARGET 可以有多种格式：
&lt;ul>
&lt;li>ADDRESS:[PORT] # 监听在指定的 IP 和端口上，ADDRESS 可以使用通配符。&lt;/li>
&lt;li>PORT # 省略地址，即监听在所有 IP 的指定端口上。&lt;/li>
&lt;li>UNIX:PATH # 监听在以 unix: 为前缀的 UNIX 套接字上。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>PARAMETER&lt;/strong> # 可以为指定的监听配置参数，多个参数以空格分割：
&lt;ul>
&lt;li>&lt;strong>default_server&lt;/strong> # 将该 Virtual Server 设为默认。若客户端的请求没有匹配到任何 Virtual Server，则该请求由默认 Virtual Server 处理。
&lt;ul>
&lt;li>注意：若没有任何 Virtual Server 配置了 listen 指令的 defautl_server 参数，那么当匹配不到 Virtual Server 时，默认的 Virtual Server 就是&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>ssl&lt;/strong> # 启动 SSL 模块，让此监听上接受的所有连接都应在 SSL 模式下工作&lt;/li>
&lt;li>&amp;hellip;&amp;hellip;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="server_name">server_name&lt;/h3>
&lt;p>&lt;a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#server_name">https://nginx.org/en/docs/http/ngx_http_core_module.html#server_name&lt;/a>&lt;/p>
&lt;ul>
&lt;li>语法：&lt;code>server_name NAME&lt;/code>&lt;/li>
&lt;li>默认值：&lt;code>server_name &amp;quot;&amp;quot;;&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>入口名称(也就是 Virtual Server 的名字)。用来匹配一个请求 Header 中的 Host 字段。&lt;/p>
&lt;p>STRING 可以是完整（精确）名称，通配符或正则表达式。通配符是一个字符串，在字符串的开始，结尾或同时包括和都包括星号（*）。星号匹配任何字符序列。 NGINX Plus 对正则表达式使用 Perl 语法;在其前面加上波浪号（〜）。&lt;/p>
&lt;p>server_name 指令是用来匹配用户在浏览器浏览网站时，输入的 域名 或者 IP:PORT 的。比如用户访问 &lt;code>www.baidu.com&lt;/code>，那么 &lt;code>server_name&lt;/code> 就可以设置为 &lt;code>*.baidu.com&lt;/code>&lt;/p>
&lt;p>如果有多个域名，则可以写多个 server_name 指令，也就是说所有来自这些域名的流量都会被统一处理。&lt;/p>
&lt;h2 id="流量处理指令">流量处理指令&lt;/h2>
&lt;p>流量处理的指令通常都在 &lt;code>location URI {}&lt;/code> 块指令内。&lt;/p>
&lt;h3 id="location">location&lt;/h3>
&lt;p>&lt;a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#location">http://nginx.org/en/docs/http/ngx_http_core_module.html#location&lt;/a>&lt;/p>
&lt;ul>
&lt;li>语法：&lt;code>location [=|~|~\*|^~] URI {}&lt;/code>&lt;/li>
&lt;li>作用范围：server{}, location{}&lt;/li>
&lt;/ul>
&lt;p>location 指令让 Nginx 在 &lt;a href="https://desistdaydream.github.io/docs/Web/Nginx/Nginx%20%E5%A4%84%E7%90%86%20HTTP%20%E8%AF%B7%E6%B1%82%E7%9A%84%E6%B5%81%E7%A8%8B.md#find_config%20%E9%98%B6%E6%AE%B5">find_config 阶段&lt;/a> 根据用户请求的 URI 进行匹配，匹配到时，此请求将被响应的 &lt;code>location{}&lt;/code> 块指令中的指令所处理。对于用户请求的匹配优先级：&lt;/p>
&lt;ul>
&lt;li>&lt;code>location =&lt;/code>：精准匹配&lt;/li>
&lt;li>&lt;code>location ^~&lt;/code>：带参前缀匹配&lt;/li>
&lt;li>&lt;code>location ~&lt;/code>：正则匹配（区分大小写）&lt;/li>
&lt;li>&lt;code>location ~*&lt;/code>：正则匹配（不区分大小写）&lt;/li>
&lt;li>&lt;code>location /XXX&lt;/code>：普通前缀匹配，优先级低于带参数前缀匹配&lt;/li>
&lt;li>&lt;code>location /&lt;/code>：任何没有匹配成功的，都会匹配这里处理&lt;/li>
&lt;/ul>
&lt;p>当接收到一个请求时，nginx会按照配置文件中server块的顺序逐个匹配 location 块：&lt;/p>
&lt;ul>
&lt;li>nginx 会将请求的 URI &lt;strong>根据优先级&lt;/strong>与每个 location 块中的匹配规则进行比较，找到第一个匹配的 location 块。&lt;/li>
&lt;li>如果找到匹配的 location 块，nginx 会按照该 location 块中的配置指令来处理请求，例如代理请求、返回静态文件等。&lt;/li>
&lt;li>如果没有找到匹配的location块，则会使用默认的配置（即 &lt;code>location /&lt;/code>）若没定义默认的配置，则返回404错误。&lt;/li>
&lt;/ul>
&lt;p>&lt;!-- raw HTML omitted -->注意&lt;!-- raw HTML omitted -->：若 location 块中存在 ngx_http_rewrite_moudle 模块中的 &lt;a href="#break">break&lt;/a> 指令（不管指令单独使用，还是作为 rewrite 的标志使用），那么当遇到 break 后，则不会再查找任何 location，而是继续执行当前 location 中的其他指令，并像客户端返回请求结果。具体事例详见 &lt;a href="https://desistdaydream.github.io/docs/Web/Nginx/Nginx%20%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/%E4%B8%83%E5%B1%82%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE.md#rewrite%20%E4%B8%8E%20break">七层代理配置中的 rewrite 与 break 配置&lt;/a>&lt;/p>
&lt;p>下面详解的各种 简单指令 或 块指令 一般情况，都将会定义在 &lt;code>location URL {}&lt;/code> 块指令中&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">location&lt;/span> &lt;span style="color:#e6db74">/&lt;/span> { &lt;span style="color:#75715e"># 用户请求 / 目录下的文件的时候如何处理
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">limit_except&lt;/span> &lt;span style="color:#e6db74">GET&lt;/span> &lt;span style="color:#e6db74">POST&lt;/span> &lt;span style="color:#e6db74">HEAD&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">deny&lt;/span> &lt;span style="color:#e6db74">all&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">if&lt;/span> &lt;span style="color:#e6db74">http_version&lt;/span> == &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#e6db74">.0&lt;/span> &lt;span style="color:#e6db74">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">return&lt;/span> &lt;span style="color:#e6db74">ngx.exec(&amp;#34;/hcs_proxy_10&amp;#34;,&lt;/span> &lt;span style="color:#e6db74">args)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">return&lt;/span> &lt;span style="color:#e6db74">ngx.exec(&amp;#34;/hcs_proxy_11&amp;#34;,&lt;/span> &lt;span style="color:#e6db74">args)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">location&lt;/span> ~ &lt;span style="color:#e6db74">\.php$&lt;/span> { &lt;span style="color:#75715e">#用户请求的是.php文件的时候是如何处理的
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">fastcgi_pass&lt;/span> 127.0.0.1:&lt;span style="color:#ae81ff">9000&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">.......&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="proxy_pass">proxy_pass&lt;/h3>
&lt;p>&lt;a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_pass">http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_pass&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/D3dri6v0Tk45TOWsDb0HqQ">公众号-YP小站，详解Nginx proxy_pass 使用&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;ul>
&lt;li>语法：&lt;code>proxy_pass URL;&lt;/code>&lt;/li>
&lt;li>默认值：&lt;code>无&lt;/code>&lt;/li>
&lt;li>作用范围：location{}&lt;/li>
&lt;/ul>
&lt;p>该指令是 &lt;a href="#ngx_http_proxy_module%20%E6%A8%A1%E5%9D%97%E6%8C%87%E4%BB%A4">ngx_http_proxy_module 模块&lt;/a>的核心指令，也是 http{}、stream{} 指令块中用来执行流量处理的指令。代替用户把对 location 定义的请求下的 URL 交给指定的 &lt;a href="https://desistdaydream.github.io/docs/Web/Nginx/Nginx%20%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/Nginx%20%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3.md#%E5%90%8E%E7%AB%AF%E6%9C%8D%E5%8A%A1%E5%99%A8">后端服务器&lt;/a> 来处理请求。该指令属于 ngx_http_proxy_modeule 模块&lt;/p>
&lt;p>URL 指定后端服务器的语法有如下几种(下面的 Protocol 通常都是 http 或 https)&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Protocol://ServerGroup/URI;&lt;/strong> # 将流量代理到 &lt;a href="https://desistdaydream.github.io/docs/Web/Nginx/Nginx%20%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/%E5%A4%9A%E7%94%A8%E9%80%94%E6%A8%A1%E5%9D%97%E7%9A%84%E6%8C%87%E4%BB%A4/upstream%20%E6%A8%A1%E5%9D%97%E6%8C%87%E4%BB%A4.md">一组服务器&lt;/a> 上。每个流量都会根据负载均衡的规则交给 upstream{} 指令块中定义的服务器。&lt;/li>
&lt;li>&lt;strong>Protocol://IP:PORT/URI;&lt;/strong> # 将流量代理到指定的服务器上。当只有一台可用的后端服务器时可以使用这种方式，这样就不用再使用 upstream 指令块定义了&lt;/li>
&lt;li>&lt;strong>Protocol:unix:/PATH/TO/FILE:/URI;&lt;/strong> # 将流量代理到本地的 UNIX-domain Socket 上。socket 的路径需要使用 &lt;code>:&lt;/code> 包裹起来。&lt;/li>
&lt;/ul>
&lt;p>proxy_pass 指令指定的 URL 有多种，不同场景有不同的工作方式。&lt;/p>
&lt;ul>
&lt;li>URL 中 &lt;strong>有/无 PATH 部分&lt;/strong>。
&lt;ul>
&lt;li>Notes: 根据 &lt;a href="https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/HTTP/URL%20%E4%B8%8E%20URI.md">URL 与 URI&lt;/a> 中 URL 的规范可知，就算只有一个 &lt;code>/&lt;/code> 也算有 PATH。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>还有一些&lt;strong>特殊场景&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h4 id="工作方式">工作方式&lt;/h4>
&lt;p>现假设客户端请求 URL 为：&lt;code>https://172.16.1.1/hello/world.html&lt;/code>&lt;/p>
&lt;p>&lt;strong>场景一、无 PATH 部分&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">location&lt;/span> &lt;span style="color:#e6db74">/hello/&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">proxy_pass&lt;/span> &lt;span style="color:#e6db74">http://127.0.0.1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>代理到 http://127.0.0.1/hello/world.html&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>场景二、有 PATH 部分&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">location&lt;/span> &lt;span style="color:#e6db74">/hello/&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">proxy_pass&lt;/span> &lt;span style="color:#e6db74">http://127.0.0.1/&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>代理到 http://127.0.0.1/world.html&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">location&lt;/span> &lt;span style="color:#e6db74">/hello/&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">proxy_pass&lt;/span> &lt;span style="color:#e6db74">http://127.0.0.1/test/&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>代理到 URL：http://127.0.0.1/test/world.html&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">location&lt;/span> &lt;span style="color:#e6db74">/hello/&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">proxy_pass&lt;/span> &lt;span style="color:#e6db74">http://127.0.0.1/test&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>代理到 URL：http://127.0.0.1/testworld.html&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>场景三、特殊情况，与 rewrite 指令一起使用&lt;/strong>&lt;/p>
&lt;p>在某些情况下，无法确定请求 URI 中要替换的部分，比如使用 rewrite 指令通过正则表达式匹配路径时，不应该在 proxy_pass 的 URL 中使用 PATH&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">location&lt;/span> &lt;span style="color:#e6db74">/name/&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">rewrite&lt;/span> &lt;span style="color:#e6db74">/name/([^/]+)&lt;/span> &lt;span style="color:#e6db74">/users?name=&lt;/span>$1 &lt;span style="color:#e6db74">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">proxy_pass&lt;/span> &lt;span style="color:#e6db74">http://127.0.0.1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在这种情况下，指令中指定的 PATH 将被忽略，完整更改的请求 PATH 将传递到服务器。&lt;/p>
&lt;p>&lt;strong>场景四、特殊情况，proxy_pass 的 URL 中有变量&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">location&lt;/span> &lt;span style="color:#e6db74">/name/&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">proxy_pass&lt;/span> &lt;span style="color:#e6db74">http://127.0.0.1&lt;/span>$request_uri;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在这种情况下，如果指令中指定了 PATH，它将按原样传递到服务器，替换原始请求 PATH。&lt;/p>
&lt;h4 id="注意">注意&lt;/h4>
&lt;ul>
&lt;li>在&lt;a href="#%E5%85%B6%E4%BB%96%E6%8C%87%E4%BB%A4">其他指令&lt;/a>中，以 &lt;code>proxy_&lt;/code> 开头的简单指令，都可以作为 &lt;code>proxy_pass&lt;/code> 指令的扩充，以定义更加丰富多样的流量处理功能。&lt;/li>
&lt;li>WebSocket 代理需要特殊配置。详见&lt;a href="https://nginx.org/en/docs/http/websocket.html">官方文档-websocket&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="特殊的流量处理">特殊的流量处理&lt;/h3>
&lt;p>&lt;strong>fastcgi_pass 127.0.0.1:9000;&lt;/strong> # 反向代理重定向该请求到 127.0.0.1:9000 上,Nginx 本身不支持 PHP 等语言，但是它可以通过 FastCGI 来将请求扔给某些语言或框架处理（例如 PHP、Python、Perl)
代理 fastcgi 协议的指令，当协议不是 http 协议的时候，则要使用 fastcgi 模块，注意与 proxy_pass 的区别。由于 nginx 本身并不支持动态内容的 php 等文件，需要由专门的服务器来提供，nginx 收到 .php 等请求的时候，则将该请求通过 fastcgi 协议，转发给后端能处理动态内容的服务器。比如可以在 location 中设定 .php 访问的条件，然后 {} 内中写明 fastcgi 所定义的服务器&lt;/p>
&lt;p>&lt;strong>fastcgi_index index.php;&lt;/strong> #&lt;/p>
&lt;p>&lt;strong>fastcgi_param SCRIPT_FILENAME /scripts$fastcgi_script_name;&lt;/strong> #&lt;/p>
&lt;p>&lt;strong>fastcgi_cache_path path PATH ARGS&amp;hellip;;&lt;/strong> #&lt;/p>
&lt;h1 id="其他指令">其他指令&lt;/h1>
&lt;p>这些指令一般都直接定义在顶层的 &lt;code>http{}&lt;/code> 配置环境中，与 &lt;code>server{}&lt;/code>、&lt;code>upstream{}&lt;/code> 等块指令平级。还有一些指令是可以适用于多个指令块中的。定义在顶层的 &lt;code>http{}&lt;/code> 配置环境中时，效果将会应用在每个 Virtual Server 中，同时也可以定义在单独的 指令块让，让指令作用于局部。&lt;/p>
&lt;p>指令使用时的不成文规范：&lt;/p>
&lt;ul>
&lt;li>通常来说，凡是作用范围包含 &lt;code>location {}&lt;/code> 块指令的 简单指令，都直接定义在 &lt;code>location{}&lt;/code> 块指令中。&lt;/li>
&lt;/ul>
&lt;h2 id="ngx_http_core_module-模块指令">ngx_http_core_module 模块指令&lt;/h2>
&lt;blockquote>
&lt;p>代码：&lt;a href="https://github.com/nginx/nginx/blob/master/src/http/ngx_http_core_module.c">https://github.com/nginx/nginx/blob/master/src/http/ngx_http_core_module.c&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h3 id="alias">alias&lt;/h3>
&lt;p>&lt;a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#alias">https://nginx.org/en/docs/http/ngx_http_core_module.html#alias&lt;/a>&lt;/p>
&lt;ul>
&lt;li>语法：&lt;code>alias PATH&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>用于 loation 上下文，定义 location 指令定义的路径的别名，注意与 root 指令的区别&lt;/p>
&lt;h3 id="client_body_in_file_only">client_body_in_file_only&lt;/h3>
&lt;p>&lt;a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#client_body_in_file_only">https://nginx.org/en/docs/http/ngx_http_core_module.html#client_body_in_file_only&lt;/a>&lt;/p>
&lt;ul>
&lt;li>语法：&lt;code>client_body_in_file_only on|clean|off&lt;/code>&lt;/li>
&lt;li>默认值：&lt;code>client_body_in_file_only off;&lt;/code>&lt;/li>
&lt;li>作用范围：http{}、server{}、location{}&lt;/li>
&lt;/ul>
&lt;p>确定 Nginx 是否应该将整个客户端请求正文保存到文件中。可以在调试期间或使用 &lt;code>$request_body_file&lt;/code> 变量或模块 ngx_http_perl_module 的$ r-&amp;gt; request_body_file 方法时使用此指令。&lt;/p>
&lt;p>设置为 on 时，请求处理后不会删除临时文件&lt;/p>
&lt;p>clean 值将导致请求处理后留下的临时文件被删除。&lt;/p>
&lt;h3 id="client_header_timeout">client_header_timeout&lt;/h3>
&lt;p>&lt;a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#client_header_timeout">https://nginx.org/en/docs/http/ngx_http_core_module.html#client_header_timeout&lt;/a>&lt;/p>
&lt;p>读取 http 请求报文首部的超时时长&lt;/p>
&lt;ul>
&lt;li>语法：&lt;code>client_header_timeout NUM&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="error_page-code--uri">error_page CODE &amp;hellip; URI&lt;/h3>
&lt;p>&lt;a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#error_page">https://nginx.org/en/docs/http/ngx_http_core_module.html#error_page&lt;/a>&lt;/p>
&lt;p>根据 http 响应状态码来指名特用的错误页面&lt;/p>
&lt;h3 id="ignore_invalid_headers">ignore_invalid_headers&lt;/h3>
&lt;p>&lt;a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#ignore_invalid_headers">https://nginx.org/en/docs/http/ngx_http_core_module.html#ignore_invalid_headers&lt;/a>&lt;/p>
&lt;p>是否忽略无效的请求头。&lt;/p>
&lt;ul>
&lt;li>语法：&lt;code>ignore_invalid_headers on|off&lt;/code>&lt;/li>
&lt;li>默认值：&lt;code>ignore_invalid_headers on;&lt;/code>&lt;/li>
&lt;li>作用范围：http{}、server{}&lt;/li>
&lt;/ul>
&lt;p>这里指的无效的请求头，主要是针对请求头的 key 来说，有效的请求头的 key 只能是由 英文字母、数字、连字符、下划线 这其中的 1 个或多个，而下划线的有效性，由 underscores_in_headers 指令控制。&lt;/p>
&lt;h3 id="keepalive_disable">keepalive_disable&lt;/h3>
&lt;p>&lt;a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#keepalive_disable">https://nginx.org/en/docs/http/ngx_http_core_module.html#keepalive_disable&lt;/a>&lt;/p>
&lt;p>为指定类型的 User Agent(说白了就是浏览器) 禁用长连接&lt;/p>
&lt;ul>
&lt;li>语法：&lt;code>keepalive_disable msie6|safari|none&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="keepalive_requests">keepalive_requests&lt;/h3>
&lt;p>&lt;a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#keepalive_requests">https://nginx.org/en/docs/http/ngx_http_core_module.html#keepalive_requests&lt;/a>&lt;/p>
&lt;p>在一个长连接上所能够允许的最大资源数&lt;/p>
&lt;ul>
&lt;li>语法：&lt;code>keepalive_requests NUMBER&lt;/code>&lt;/li>
&lt;li>默认值：&lt;code>keepalive_requests 1000;&lt;/code>&lt;/li>
&lt;li>作用范围：http{}、server{}、location{}&lt;/li>
&lt;/ul>
&lt;h3 id="keepalive_timeout">keepalive_timeout&lt;/h3>
&lt;p>&lt;a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#keepalive_timeout">https://nginx.org/en/docs/http/ngx_http_core_module.html#keepalive_timeout&lt;/a>&lt;/p>
&lt;p>设定长连接的超时时长为默认 75 秒&lt;/p>
&lt;ul>
&lt;li>语法：&lt;code>keepalive_timeout DURATION&lt;/code>&lt;/li>
&lt;li>默认值：&lt;code>keepalive_timeout 75s;&lt;/code>&lt;/li>
&lt;li>作用范围：http{}、server{}、location{}&lt;/li>
&lt;/ul>
&lt;h3 id="root">root&lt;/h3>
&lt;p>&lt;a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#root">https://nginx.org/en/docs/http/ngx_http_core_module.html#root&lt;/a>&lt;/p>
&lt;p>指明请求的 URL 所对应的资源所在文件系统上的起始路径。&lt;/p>
&lt;ul>
&lt;li>语法：&lt;code>root PATH&lt;/code>&lt;/li>
&lt;li>作用范围：http{}、server{}、location{}&lt;/li>
&lt;/ul>
&lt;p>把 root 配置指令写到 &lt;code>location / {} 指令块&lt;/code> 中，即表明当用户请求的是 / 下的资源时候，去 root 定义的本地的那个路径去找对应的资源。&lt;/p>
&lt;h3 id="sendfile">sendfile&lt;/h3>
&lt;p>&lt;a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#sendfile">https://nginx.org/en/docs/http/ngx_http_core_module.html#sendfile&lt;/a>&lt;/p>
&lt;p>开启或关闭 sendfile() 功能，即&lt;a href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.Kernel/6.Filesystem/%E9%9B%B6%E6%8B%B7%E8%B4%9D.md">零拷贝&lt;/a>功能。&lt;/p>
&lt;ul>
&lt;li>语法：&lt;code>sendfile on|off&lt;/code>&lt;/li>
&lt;li>默认值：&lt;code>sendfile off;&lt;/code>&lt;/li>
&lt;li>作用范围：http{}、server{}、location{}&lt;/li>
&lt;/ul>
&lt;p>在此配置中，使用 SF_NODISKIO 标志调用 sendfile()，这将导致它不会在磁盘 I / O 上阻塞，而是报告该数据不在内存中。然后，nginx 通过读取一个字节来启动异步数据加载。第一次读取时，FreeBSD 内核将文件的前 128K 字节加载到内存中，尽管接下来的读取只会加载 16K 块中的数据。可以使用 read_ahead 指令更改此设置。&lt;/p>
&lt;h3 id="server_names_hash_bucket_size">server_names_hash_bucket_size&lt;/h3>
&lt;p>&lt;a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#server_names_hash_bucket_size">http://nginx.org/en/docs/http/ngx_http_core_module.html#server_names_hash_bucket_size&lt;/a>&lt;/p>
&lt;p>设置 server_name 指定设定的服务器名称哈希表的桶容量。默认值取决于处理缓存线的大小。&lt;/p>
&lt;ul>
&lt;li>语法：&lt;code>server_names_hash_bucket_size SIZE&lt;/code>&lt;/li>
&lt;li>默认值：&lt;code>server_namers_hash_bucket_size 32|64|128;&lt;/code>&lt;/li>
&lt;li>作用范围：http{}&lt;/li>
&lt;/ul>
&lt;h3 id="tcp_nodelay">tcp_nodelay&lt;/h3>
&lt;p>&lt;a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#tcp_nodelay">http://nginx.org/en/docs/http/ngx_http_core_module.html#tcp_nodelay&lt;/a>&lt;/p>
&lt;p>是否开启长连接使用 tcp_nodelay 选项&lt;/p>
&lt;ul>
&lt;li>语法：&lt;code>tcp_nodelay on|off&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="underscores_in_headers">underscores_in_headers&lt;/h3>
&lt;p>&lt;a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#underscores_in_headers">http://nginx.org/en/docs/http/ngx_http_core_module.html#underscores_in_headers&lt;/a>&lt;/p>
&lt;p>是否允许请求头中的 key 带有下划线。&lt;/p>
&lt;ul>
&lt;li>语法：&lt;code>underscores_in_headers on|off&lt;/code>&lt;/li>
&lt;li>默认值：&lt;code>underscores_in_headers off;&lt;/code>&lt;/li>
&lt;li>作用范围：http{}、server{}&lt;/li>
&lt;/ul>
&lt;p>默认不允许，所有请求头中带有下划线的请求虽然可以被正常代理，但是其中带有下划线的请求头无法被传递到后端服务器。该指令受 ignore_invalid_headers(忽略无效请求头) 指令约束。若关闭 ignore_invalid_headers 指令，则 underscores_in_headers 指令不管如何配置都没有用。&lt;/p>
&lt;h2 id="ngx_http_log_module-模块指令">ngx_http_log_module 模块指令&lt;/h2>
&lt;blockquote>
&lt;p>代码：&lt;a href="https://github.com/nginx/nginx/blob/master/src/http/modules/ngx_http_log_module.c">https://github.com/nginx/nginx/blob/master/src/http/modules/ngx_http_log_module.c&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h3 id="access_log">access_log&lt;/h3>
&lt;p>&lt;a href="http://nginx.org/en/docs/http/ngx_http_log_module.html#access_log">http://nginx.org/en/docs/http/ngx_http_log_module.html#access_log&lt;/a>&lt;/p>
&lt;p>设置 access 日志的写入路径。&lt;/p>
&lt;ul>
&lt;li>语法：&lt;code>access_log PATH FORMAT [PARAMETER]&lt;/code>&lt;/li>
&lt;li>默认值：&lt;code>access_log logs/access.log combined;&lt;/code>&lt;/li>
&lt;li>作用范围：http{}、server{}、location{}&lt;/li>
&lt;/ul>
&lt;p>FORMAT 是 &lt;code>log_format&lt;/code> 指令定义的日志格式名称，若不指定则默认是名为 combined 的日志格式&lt;/p>
&lt;h3 id="log_format">log_format&lt;/h3>
&lt;p>&lt;a href="http://nginx.org/en/docs/http/ngx_http_log_module.html#log_format">http://nginx.org/en/docs/http/ngx_http_log_module.html#log_format&lt;/a>&lt;/p>
&lt;p>设定 Nginx 的日志格式。&lt;/p>
&lt;ul>
&lt;li>语法：&lt;code>log_format NAME [escape=default|json|none] STRING&lt;/code>&lt;/li>
&lt;li>默认值：&lt;code>log_format combined &amp;quot;...&amp;quot;;&lt;/code>&lt;/li>
&lt;li>作用范围：http{}&lt;/li>
&lt;/ul>
&lt;p>定义一个日志格式并将该格式命名为 NAME，格式名称可以在 access_log 等指令中直接引用。&lt;/p>
&lt;p>STRING 就是具体的日志格式，其中可以引用一些自带的变量，类似于编程语言中的 printf 关键字效果。具体可用变量详见官方指令详解。&lt;/p>
&lt;p>combined 是 Nginx 默认的日志格式名称，格式如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">log_format&lt;/span> &lt;span style="color:#e6db74">combined&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&lt;/span>$remote_addr &lt;span style="color:#e6db74">-&lt;/span> $remote_user &lt;span style="color:#e6db74">[&lt;/span>$time_local] &lt;span style="color:#e6db74">&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;&amp;#34;&lt;/span>$request&amp;#34; $status $body_bytes_sent &lt;span style="color:#e6db74">&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;&amp;#34;&lt;/span>$http_referer&amp;#34; &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$http_user_agent&amp;#34;&amp;#39;;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>更多日志格式设置方法，见 &lt;a href="https://desistdaydream.github.io/docs/Web/Nginx/Nginx%20%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/%E5%A4%9A%E7%94%A8%E9%80%94%E6%A8%A1%E5%9D%97%E7%9A%84%E6%8C%87%E4%BB%A4/log_format%20%E6%A8%A1%E5%9D%97%E6%8C%87%E4%BB%A4.md">log_format 模块指令&lt;/a>&lt;/p>
&lt;h2 id="ngx_http_proxy_module-模块指令">ngx_http_proxy_module 模块指令&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://nginx.org/en/docs/http/ngx_http_proxy_module.html">org 官方文档，http-ngx_http_proxy_module&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/nginx/nginx/blob/master/src/http/modules/ngx_http_proxy_module.c">GitHub 代码：nginx/nginx/src/http/modules/ngx_http_proxy_module.c&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h3 id="proxy_cache_path">proxy_cache_path&lt;/h3>
&lt;p>&lt;a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_cache_path">http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_cache_path&lt;/a>&lt;/p>
&lt;p>设定代理服务缓存路径和其它参数&lt;/p>
&lt;ul>
&lt;li>语法：&lt;code>proxy_cache_path PATH ARGS&lt;/code>&lt;/li>
&lt;li>作用范围：http{}&lt;/li>
&lt;/ul>
&lt;h3 id="proxy_http_version">proxy_http_version&lt;/h3>
&lt;p>&lt;a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_http_version">http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_http_version&lt;/a>&lt;/p>
&lt;p>设置用于代理的 HTTP 协议版本。&lt;/p>
&lt;ul>
&lt;li>语法：&lt;code>proxy_http_version VERSION&lt;/code>&lt;/li>
&lt;li>默认值：&lt;code>proxy_http_version 1.0;&lt;/code>&lt;/li>
&lt;li>作用范围：http{}、server{}、location{}&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>建议将 1.1 版与 Keepalive 连接和 NTLM 身份验证配合使用。&lt;/p>
&lt;/blockquote>
&lt;h3 id="proxy_intercept_errors">proxy_intercept_errors&lt;/h3>
&lt;p>&lt;a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_intercept_errors">http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_intercept_errors&lt;/a>&lt;/p>
&lt;p>确定是否应将代码大于或等于 300 的代理响应传递给客户端，还是应拦截并重定向到 nginx，以便使用 error_page 指令进行处理&lt;/p>
&lt;ul>
&lt;li>语法：&lt;code>proxy_intercept_errors on|off&lt;/code>&lt;/li>
&lt;li>作用范围：http{}、server{}、location{}&lt;/li>
&lt;/ul>
&lt;h3 id="proxy_redirect">proxy_redirect&lt;/h3>
&lt;p>&lt;a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_redirect">http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_redirect&lt;/a>&lt;/p>
&lt;p>修改被代理服务器的响应头中 Location 和 Refresh 字段的值。&lt;/p>
&lt;ul>
&lt;li>语法：&lt;code>proxy_redirect REDIRECT REPLACEMENT&lt;/code>&lt;/li>
&lt;li>默认值：&lt;code>proxy_redirect default;&lt;/code>&lt;/li>
&lt;li>作用范围：http{}、server{}、location{}&lt;/li>
&lt;/ul>
&lt;p>假如一个被代理的服务器响应头为 &lt;code>Location: http://localhost:8000/two/some/uri/&lt;/code>。那么如果配置了如下指令：&lt;code>proxy_redirect http://localhost:8000/two/ http://frontend/one/;&lt;/code> 之后。Nginx 响应给客户端的头变成了 &lt;code>Location: http://frontend/one/some/uri/&lt;/code>&lt;/p>
&lt;p>&lt;strong>EXAMPLE&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;code>proxy_redirect http:// https://;&lt;/code>
&lt;ul>
&lt;li>所有 3XX 跳转的 http 的请求都会被转为 https&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="proxy_set_header">proxy_set_header&lt;/h3>
&lt;p>&lt;a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_set_header">http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_set_header&lt;/a>&lt;/p>
&lt;p>用来重定义发往后端服务器的请求 Header 内容。这是&lt;strong>常用指令&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>语法：&lt;code>proxy_set_header FIELD VALUE&lt;/code>&lt;/li>
&lt;li>默认值：
&lt;ul>
&lt;li>&lt;code>proxy_set_header Host $proxy_host;&lt;/code>&lt;/li>
&lt;li>&lt;code>proxy_set_header Connection close;&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>作用范围：http{}、server{}、location{}&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>FIELD(字段)&lt;/strong> # 指定要重新定义的请求 Header 的字段
&lt;strong>VALUE(值)&lt;/strong> # Header 字段的值。可以是包含文本、变量（nginx 的内置变量）或者它们的组合。&lt;/p>
&lt;ul>
&lt;li>注意：
&lt;ul>
&lt;li>在 nginx 的配置文件中，如果当前模块中没有 proxy_set_header 的设置，则会从上级别继承配置。继承顺序为：http, server, location。&lt;/li>
&lt;li>由于 UPSTREAM 服务器收到的请求报文所含 IP 为代理服务器的 IP，那么就需要在代理服务器上配置该项，把用户 IP 暴露给 UPSTREAM 服务器&lt;/li>
&lt;li>该指令最常用在 &lt;code>location{}&lt;/code> 块指令中，以便为每个路径的 HTTP 请求，都设置各自的 请求头。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="proxy_ssl_certificate">proxy_ssl_certificate&lt;/h3>
&lt;p>&lt;a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_ssl_certificate">http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_ssl_certificate&lt;/a>&lt;/p>
&lt;p>指定 PEM 格式的证书文件，Ngxin 作为客户端向被代理的 HTTPS 服务器发起请求时，用来进行身份验证&lt;/p>
&lt;ul>
&lt;li>语法：&lt;code>proxy_ssl_certificate FILE&lt;/code>&lt;/li>
&lt;li>作用范围：http{}、server{}、location{}&lt;/li>
&lt;/ul>
&lt;h3 id="proxy_ssl_certificate_key">proxy_ssl_certificate_key&lt;/h3>
&lt;p>&lt;a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_ssl_certificate_key">http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_ssl_certificate_key&lt;/a>&lt;/p>
&lt;p>指定 PEM 格式的密钥，Ngxin 作为客户端向被代理的 HTTPS 服务器发起请求时，用来进行身份验证&lt;/p>
&lt;ul>
&lt;li>语法：&lt;code>proxy_ssl_certificate_key FILE&lt;/code>&lt;/li>
&lt;li>作用范围：http{}、server{}、location{}&lt;/li>
&lt;/ul>
&lt;h3 id="proxy_ssl_trusted_certificate">proxy_ssl_trusted_certificate&lt;/h3>
&lt;p>&lt;a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_ssl_trusted_certificate">http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_ssl_trusted_certificate&lt;/a>&lt;/p>
&lt;p>指定想要信任的 CA 证书文件，Ngxin 作为客户端向被代理的 HTTPS 服务器发起请求时，用来进行身份验证&lt;/p>
&lt;ul>
&lt;li>语法：&lt;code>proxy_ssl_trusted_certificate FILE&lt;/code>&lt;/li>
&lt;li>作用范围：http{}、server{}、location{}&lt;/li>
&lt;/ul>
&lt;h3 id="代理超时相关指令">代理超时相关指令&lt;/h3>
&lt;h4 id="proxy_connect_timeout">proxy_connect_timeout&lt;/h4>
&lt;p>&lt;a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_connect_timeout">http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_connect_timeout&lt;/a>&lt;/p>
&lt;p>与被代理服务器建立连接的超时时间。&lt;/p>
&lt;ul>
&lt;li>语法：&lt;code>proxy_connect_timeout DURATION&lt;/code>&lt;/li>
&lt;li>默认值：&lt;code>proxy_connect_timeout 60s;&lt;/code>&lt;/li>
&lt;li>作用范围：http{}、server{}、location{}&lt;/li>
&lt;/ul>
&lt;p>注意：这个超时时间通常不应该超过 75 秒&lt;/p>
&lt;h4 id="proxy_read_timeout">proxy_read_timeout&lt;/h4>
&lt;p>&lt;a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_read_timeout">http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_read_timeout&lt;/a>&lt;/p>
&lt;p>从被代理服务器读取响应的超时时间&lt;/p>
&lt;ul>
&lt;li>语法：&lt;code>proxy_read_timeout DURATION&lt;/code>&lt;/li>
&lt;li>默认值：&lt;code>proxy_read_timeout 60s;&lt;/code>&lt;/li>
&lt;li>作用范围：http{}、server{}、location{}&lt;/li>
&lt;/ul>
&lt;p>该超时时间仅在两个连续的&lt;strong>读取&lt;/strong>操作时间，而不是用于整个响应的传输。如果被代理服务器在这段时间内&lt;strong>未传输&lt;/strong>任何内容，则连接将关闭。&lt;/p>
&lt;p>所谓的两个连续读取操作，就是发送请求后，尝试读取响应的操作，其实就是读取 socket 中的数据。所以才被称为 等待被代理服务器响应的超时时间。&lt;/p>
&lt;p>当一个请求从 Client 发送到 Nginx 后，Nginx 再转发给被代理服务器，如果被代理服务器的响应时间超过了 proxy_read_timeout，则 Nginx 将会返回给 Client 一个 &lt;strong>504 状态码&lt;/strong>。&lt;/p>
&lt;h4 id="proxy_send_timeout">proxy_send_timeout&lt;/h4>
&lt;p>&lt;a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_send_timeout">http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_send_timeout&lt;/a>&lt;/p>
&lt;p>将请求发送到被代理服务器的超时时间。&lt;/p>
&lt;ul>
&lt;li>语法：&lt;code>proxy_send_timeout DURATION&lt;/code>&lt;/li>
&lt;li>默认值：&lt;code>proxy_send_timeout 60s;&lt;/code>&lt;/li>
&lt;li>作用范围：http{}、server{}、location{}&lt;/li>
&lt;/ul>
&lt;p>该超时时间仅在两个连续的&lt;strong>写入&lt;/strong>操作时间，而不是用于整个响应的传输。如果被代理服务器在这段时间内&lt;strong>未收到&lt;/strong>任何内容，则连接将关闭&lt;/p>
&lt;h2 id="ngx_http_rewrite_moudle-模块指令">ngx_http_rewrite_moudle 模块指令&lt;/h2>
&lt;blockquote>
&lt;p>代码：&lt;a href="https://github.com/nginx/nginx/blob/master/src/http/modules/ngx_http_rewrite_module.c">https://github.com/nginx/nginx/blob/master/src/http/modules/ngx_http_rewrite_module.c&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>ngx_http_rewrite_moudle 模块可以根据 &lt;a href="https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/Regular%20Expression(%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F).md">PCRE&lt;/a> 进行匹配和替换，实现 URL 重写、重定向等功能。还可以根据条件语句选择要执行的代理行为。&lt;/p>
&lt;h3 id="break">break&lt;/h3>
&lt;p>&lt;a href="https://nginx.org/en/docs/http/ngx_http_rewrite_module.html#break">https://nginx.org/en/docs/http/ngx_http_rewrite_module.html#break&lt;/a>&lt;/p>
&lt;ul>
&lt;li>语法：&lt;code>break&lt;/code>&lt;/li>
&lt;li>作用范围：server{}、location{}、if{}&lt;/li>
&lt;/ul>
&lt;p>使用了 break 指令后，将会停止处理 ngx_http_rewrite_module 指令的当前集合。常作为 rewrite 的选项使用，当一个 location 块中有多个 rewrite 规则时，可以在匹配到某个 rewrite 规则后，防止继续执行后续的 rewrite 规则，比如&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">server&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">listen&lt;/span> &lt;span style="color:#ae81ff">80&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">server_name&lt;/span> &lt;span style="color:#e6db74">example.com&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">location&lt;/span> &lt;span style="color:#e6db74">/&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">rewrite&lt;/span> &lt;span style="color:#e6db74">^/old-path/(.*)&lt;/span>$ &lt;span style="color:#e6db74">/new-path/&lt;/span>$1 &lt;span style="color:#e6db74">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">rewrite&lt;/span> &lt;span style="color:#e6db74">^/(.*)&lt;/span>$ &lt;span style="color:#e6db74">/legacy-path/&lt;/span>$1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在上述示例中，如果请求 URL 匹配到 &lt;code>/old-path/&lt;/code> 开头的路径，Nginx 会将其重写为 &lt;code>/new-path/&lt;/code> 开头的路径，并使用 &lt;code>break&lt;/code> 选项停止后续 &lt;code>rewrite&lt;/code> 规则的处理。这样，请求将不会再匹配第二个 &lt;code>rewrite&lt;/code> 规则，即不会再重写为 &lt;code>/legacy-path/&lt;/code> 开头的路径。&lt;/p>
&lt;p>需要注意的是，&lt;code>break&lt;/code> 选项只停止当前 &lt;code>rewrite&lt;/code> 规则的处理，并不会终止整个请求处理过程。请求仍然会继续执行后续的 Nginx 配置指令，如 &lt;code>location&lt;/code> 块中的其他指令。&lt;/p>
&lt;h3 id="if">if&lt;/h3>
&lt;p>&lt;a href="http://nginx.org/en/docs/http/ngx_http_rewrite_module.html#if">http://nginx.org/en/docs/http/ngx_http_rewrite_module.html#if&lt;/a>&lt;/p>
&lt;p>用于 server 和 location 上下文中，类似于 if..else..这种编程语言&lt;/p>
&lt;ul>
&lt;li>语法：&lt;code>if (Condition) {...}&lt;/code>&lt;/li>
&lt;li>作用范围：server{}、location{}&lt;/li>
&lt;/ul>
&lt;p>Condition 是具体的匹配条件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#e6db74">(&lt;/span>$remote_addr ~ &lt;span style="color:#e6db74">&amp;#34;^(12.34|56.78)&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;amp;&amp;amp;&lt;/span> $http_user_agent ~&lt;span style="color:#e6db74">*&lt;/span> &lt;span style="color:#e6db74">&amp;#34;spider&amp;#34;)&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">return&lt;/span> &lt;span style="color:#ae81ff">403&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="return">return&lt;/h3>
&lt;p>&lt;a href="http://nginx.org/en/docs/http/ngx_http_rewrite_module.html#return">http://nginx.org/en/docs/http/ngx_http_rewrite_module.html#return&lt;/a>&lt;/p>
&lt;p>停止处理，并讲指定的状态码返回给客户端。常与 listen 指令的 default_server 参数一起使用，并指定状态码非 200，当客户端访问的域名不存在时，通过默认的 Virtual Server 处理，返回非 200 的状态码。&lt;/p>
&lt;ul>
&lt;li>语法：&lt;code>return CODE [TEXT | URL]&lt;/code>&lt;/li>
&lt;li>作用范围：server{}、location{}、if{}&lt;/li>
&lt;/ul>
&lt;h3 id="rewrite">rewrite&lt;/h3>
&lt;p>&lt;a href="http://nginx.org/en/docs/http/ngx_http_rewrite_module.html#rewrite">http://nginx.org/en/docs/http/ngx_http_rewrite_module.html#rewrite&lt;/a>&lt;/p>
&lt;ul>
&lt;li>语法：&lt;code>rewrite RegEx Replacement [FLAG]&lt;/code>&lt;/li>
&lt;li>作用范围：server{}、location{}、if{}&lt;/li>
&lt;/ul>
&lt;p>rewrite 指令用于在 Nginx 的 &lt;a href="https://desistdaydream.github.io/docs/Web/Nginx/Nginx%20%E5%A4%84%E7%90%86%20HTTP%20%E8%AF%B7%E6%B1%82%E7%9A%84%E6%B5%81%E7%A8%8B.md#rewrite%20%E9%98%B6%E6%AE%B5">rewrite 阶段&lt;/a> 重写(i.e. 更改)客户端发起 HTTP 请求的 URL。根据 RegEx 的匹配规则，凡是匹配到的 URL 都改为 Replacement。&lt;strong>注意：rewrite 指令的执行优先级要高于 proxy_pass&lt;/strong>。&lt;/p>
&lt;p>假如指令为: &lt;code>rewrite ^/prom/(.*)$ /$1&lt;/code>，若请求是 http://localhost/prom/abc ，则 Nginx 会将该请求改为 http://localhost/abc 后进行后续处理。若不进行 3XX 重定向。那么客户端的 URL 不变，仅仅是 Nginx 内部执行逻辑时使用的 URL 改变了。&lt;/p>
&lt;blockquote>
&lt;p>在访问一个网页时，除非收到 3XX 重定向的响应，否则浏览器地址栏中的地址是不会改变的。比如 Nginx 中的 rewrite 功能，如果不使用 &lt;strong>redirect&lt;/strong> 或 &lt;strong>permanent&lt;/strong> 标志，那么所有的 URL 改变都是针对 Nginx 内部来说的。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>Flag&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>last&lt;/strong> # 此 rewrite 规则重写完成后，将会使用新的 URL 继续匹配 location。&lt;/li>
&lt;li>&lt;strong>break&lt;/strong> # 与 &lt;a href="#break">break&lt;/a> 指令效果一样。此 rewrite 规则重写完成后，不会匹配新的 location，继续执行后面的 break 所在 location 中的后续指令。&lt;/li>
&lt;li>&lt;strong>redirect&lt;/strong> # 以 302 响应码，返回新的 URL，即在 web 界面地址栏上显示的 URL 也变了，注意跟前面两个 Flag 的区别&lt;/li>
&lt;li>&lt;strong>permanent&lt;/strong> # 以 301 响应码，返回新的 URL&lt;/li>
&lt;li>tips: 在一般情况下，如果希望重写 URL 后继续根据新的 URL 匹配 location 块，可以使用 &lt;code>last&lt;/code> 标志；如果希望终止重写过程，直接使用重写后的 URL 处理请求，可以使用 &lt;code>break&lt;/code> 标志。&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://blog.csdn.net/weixin_41565755/article/details/120679379">rewrite 与 proxy_pass&lt;/a>&lt;/p>
&lt;p>rewrite 和 proxy_pass 都可以重写整个url，区别是：（1）rewrite 重写整个 url 后，重定向的请求由浏览器发送，不常用，一般适用于访问公网其他服务器，如用于解决跨域问题；proxy_pass 重写整个 url 后，由代理服务器发起重定向请求，浏览器是无感知的，以便于访问内网和隐藏调用链；（2）rewrite 常用于重写 path，此时使用 break 和 last 也可以隐藏重定向的调用链，使用 redirect 和 permanent 则会暴露调用链;&lt;/p>
&lt;p>注意：只要不是 redirect 和 permanent 这两种重定向，那么客户端在网页上看到的 URL 是不变的，比如有一个 rewrite 规则为:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">location&lt;/span> &lt;span style="color:#e6db74">/prom&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">rewrite&lt;/span> &lt;span style="color:#e6db74">^/prom/(.*)&lt;/span>$ &lt;span style="color:#e6db74">/&lt;/span>$1 &lt;span style="color:#e6db74">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">proxy_pass&lt;/span> &lt;span style="color:#e6db74">http://192.168.254.253:9090&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Chrome 请求 http://192.168.254.1/prom/graph ，那么 nginx 会在 rewrite 后，向 http://192.168.254.253:9090/graph 发起请求，但是 Chrome 地址栏行看到的依然是 http://192.168.254.1/prom/graph&lt;/p>
&lt;h2 id="其他模块指令">其他模块指令&lt;/h2>
&lt;h3 id="add_header">add_header&lt;/h3>
&lt;p>&lt;a href="http://nginx.org/en/docs/http/ngx_http_headers_module.html#add_header">http://nginx.org/en/docs/http/ngx_http_headers_module.html#add_header&lt;/a>&lt;/p>
&lt;p>重定义发往 client 的响应首部报文&lt;/p>
&lt;ul>
&lt;li>语法：add_header NAME VALUE [always]&lt;/li>
&lt;li>作用范围：http{}、server{}、location{}&lt;/li>
&lt;/ul>
&lt;h3 id="index">index&lt;/h3>
&lt;p>&lt;a href="http://nginx.org/en/docs/http/ngx_http_index_module.html#index">http://nginx.org/en/docs/http/ngx_http_index_module.html#index&lt;/a>&lt;/p>
&lt;p>设定默认主页面&lt;/p>
&lt;ul>
&lt;li>语法：index FILE&lt;/li>
&lt;/ul>
&lt;h3 id="stub_status">stub_status&lt;/h3>
&lt;p>&lt;a href="http://nginx.org/en/docs/http/ngx_http_stub_status_module.html#stub_status">http://nginx.org/en/docs/http/ngx_http_stub_status_module.html#stub_status&lt;/a>&lt;/p>
&lt;p>开启或关闭监控模块，仅能用于 location 上下文&lt;/p>
&lt;ul>
&lt;li>语法：stub_status on|off&lt;/li>
&lt;/ul>
&lt;h1 id="配置示例">配置示例&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">http&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">server&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">location&lt;/span> &lt;span style="color:#e6db74">/&lt;/span> { &lt;span style="color:#75715e"># 所有访问 / 的请求都执行下面的行为
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">proxy_pass&lt;/span> &lt;span style="color:#e6db74">http://192.168.254.254:10000&lt;/span>; &lt;span style="color:#75715e"># 代理到 http://192.168.254.254:10000
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">proxy_http_version&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#e6db74">.1&lt;/span>; &lt;span style="color:#75715e"># 代理所用的 http 版本设为 1.1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">proxy_set_header&lt;/span> &lt;span style="color:#e6db74">Host&lt;/span> $host;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">proxy_set_header&lt;/span> &lt;span style="color:#e6db74">X-Real_IP&lt;/span> $remote_addr;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">proxy_set_header&lt;/span> &lt;span style="color:#e6db74">X-Forwarded-For&lt;/span> $remote_addr:$remote_port;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">proxy_set_header&lt;/span> &lt;span style="color:#e6db74">Upgrade&lt;/span> $http_upgrade; &lt;span style="color:#75715e"># set_header表示将http协议头升级为websocket协议
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">proxy_set_header&lt;/span> &lt;span style="color:#e6db74">Connection&lt;/span> &lt;span style="color:#e6db74">upgrade&lt;/span>; &lt;span style="color:#75715e"># set_header表示将http协议头升级为websocket协议
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: stream 模块指令</title><link>https://desistdaydream.github.io/docs/Web/Nginx/Nginx-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/stream-%E6%A8%A1%E5%9D%97%E6%8C%87%E4%BB%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/Web/Nginx/Nginx-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/stream-%E6%A8%A1%E5%9D%97%E6%8C%87%E4%BB%A4/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://nginx.org/en/docs/stream/ngx_stream_core_module.html">org 官方文档,stream core 模块&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.nginx.com/nginx/admin-guide/load-balancer/tcp-udp-load-balancer/">官方文档,管理指南-负载均衡-TCP 与 UDP 负载均衡&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>stream 模块及其子模块通过 &lt;code>stream {}&lt;/code> 配置环境中的指令控制行为&lt;/p>
&lt;h2 id="简单的-stream-配置环境示例">简单的 stream{} 配置环境示例&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">stream&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">upstream&lt;/span> &lt;span style="color:#e6db74">stream_backend&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">least_conn&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">server&lt;/span> backend1.example.com:&lt;span style="color:#ae81ff">12345&lt;/span> &lt;span style="color:#e6db74">weight=5&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">server&lt;/span> backend2.example.com:&lt;span style="color:#ae81ff">12345&lt;/span> &lt;span style="color:#e6db74">max_fails=2&lt;/span> &lt;span style="color:#e6db74">fail_timeout=30s&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">server&lt;/span> backend3.example.com:&lt;span style="color:#ae81ff">12345&lt;/span> &lt;span style="color:#e6db74">max_conns=3&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">upstream&lt;/span> &lt;span style="color:#e6db74">dns_servers&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">least_conn&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">server&lt;/span> 192.168.136.130:&lt;span style="color:#ae81ff">53&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">server&lt;/span> 192.168.136.131:&lt;span style="color:#ae81ff">53&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">server&lt;/span> 192.168.136.132:&lt;span style="color:#ae81ff">53&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">server&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">listen&lt;/span> &lt;span style="color:#ae81ff">12345&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">proxy_pass&lt;/span> &lt;span style="color:#e6db74">stream_backend&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">proxy_timeout&lt;/span> &lt;span style="color:#e6db74">3s&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">proxy_connect_timeout&lt;/span> &lt;span style="color:#e6db74">1s&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">server&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">listen&lt;/span> &lt;span style="color:#ae81ff">53&lt;/span> &lt;span style="color:#e6db74">udp&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">proxy_pass&lt;/span> &lt;span style="color:#e6db74">dns_servers&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">server&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">listen&lt;/span> &lt;span style="color:#ae81ff">12346&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">proxy_pass&lt;/span> backend4.example.com:&lt;span style="color:#ae81ff">12346&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="virtual-server-基本配置">Virtual Server 基本配置&lt;/h1>
&lt;h2 id="流量入口指令">流量入口指令&lt;/h2>
&lt;p>注意：流量入口的指令通常都定义在 &lt;code>server{} 块指令&lt;/code> 中。&lt;/p>
&lt;h3 id="server">server&lt;/h3>
&lt;p>&lt;a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#server">http://nginx.org/en/docs/http/ngx_http_core_module.html#server&lt;/a>&lt;/p>
&lt;p>定义 Virtual Server&lt;/p>
&lt;ul>
&lt;li>语法：server {&amp;hellip;}&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">stream&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">server&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">listen&lt;/span> &lt;span style="color:#ae81ff">12345&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">server&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">listen&lt;/span> &lt;span style="color:#ae81ff">53&lt;/span> &lt;span style="color:#e6db74">udp&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="listen">listen&lt;/h3>
&lt;p>&lt;a href="http://nginx.org/en/docs/stream/ngx_stream_core_module.html#listen">http://nginx.org/en/docs/stream/ngx_stream_core_module.html#listen&lt;/a>&lt;/p>
&lt;ul>
&lt;li>语法：listen TARGET [PARAMETER]&lt;/li>
&lt;/ul>
&lt;p>指定 Virtual Server 监听的端口，也可加上 IP:PORT。每个 Virtual Server 的 listen 指令都会让 Nginx 监听一个 TARGET&lt;/p>
&lt;ul>
&lt;li>&lt;strong>TARGET&lt;/strong> 有多种格式
&lt;ul>
&lt;li>&lt;strong>ADDRESS:[PORT]&lt;/strong> # 监听在指定的 IP 和端口上，ADDRESS 可以使用通配符。&lt;/li>
&lt;li>&lt;strong>PORT&lt;/strong> # 省略地址，即监听在所有 IP 的指定端口上。&lt;/li>
&lt;li>&lt;strong>UNIX&lt;/strong> # 监听在以 unix: 为前缀的 UNIX 套接字上。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>PARAMETER&lt;/strong> 可以指定是 tcp 还是 udp 等等额外的信息。&lt;/li>
&lt;/ul>
&lt;h2 id="流量处理指令">流量处理指令&lt;/h2>
&lt;p>&lt;code>stream{}&lt;/code> 配置环境中的流量处理指令直接配置在 &lt;code>server{} 指令块&lt;/code>中即可。与 &lt;code>http{}&lt;/code> 配置环境不太一样，并没有 &lt;code>location{}&lt;/code> 块指令。&lt;/p>
&lt;h3 id="proxy_pass">proxy_pass&lt;/h3>
&lt;p>&lt;a href="http://nginx.org/en/docs/stream/ngx_stream_proxy_module.html#proxy_pass">http://nginx.org/en/docs/stream/ngx_stream_proxy_module.html#proxy_pass&lt;/a>&lt;/p>
&lt;ul>
&lt;li>语法：&lt;code>proxy_pass ADDRESS;&lt;/code>&lt;/li>
&lt;li>默认值：&lt;code>无&lt;/code>&lt;/li>
&lt;li>作用范围：server{}&lt;/li>
&lt;/ul>
&lt;p>将流量入口进来的流量代理到指定的 ADDRESS 上。该指令是 ngx_stream_proxy_module 模块的核心指令&lt;/p>
&lt;p>ADDRESS 有多种表示方法&lt;/p>
&lt;ul>
&lt;li>&lt;strong>ServerGroup&lt;/strong> # 将流量代理到 &lt;a href="https://desistdaydream.github.io/docs/Web/Nginx/Nginx%20%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/%E5%A4%9A%E7%94%A8%E9%80%94%E6%A8%A1%E5%9D%97%E7%9A%84%E6%8C%87%E4%BB%A4/upstream%20%E6%A8%A1%E5%9D%97%E6%8C%87%E4%BB%A4.md">一组服务器&lt;/a>上。每个流量都会根据负载均衡的规则交给 upstream{} 指令块中定义的服务器。
&lt;ul>
&lt;li>新版中，也可以省略 Protocol://，直接使用 ServerGroup 的名称即可。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>IP:PORT&lt;/strong> # 当只有一台可用的后端服务器时可以使用这种方式，这样就不用再使用 upstream 指令块定义了&lt;/li>
&lt;li>&lt;strong>unix:/PATH/TO/FILE;&lt;/strong> # 将流量代理到本地的 UNIX-domain Socket 上&lt;/li>
&lt;/ul>
&lt;p>在&lt;a href="#%E5%85%B6%E4%BB%96%E6%8C%87%E4%BB%A4">其他指令&lt;/a>中，以 &lt;code>proxy_&lt;/code> 开头的简单指令，都可以作为 &lt;code>proxy_pass&lt;/code> 指令的扩充，以定义更加丰富多样的流量处理功能。&lt;/p>
&lt;h1 id="其他指令">其他指令&lt;/h1>
&lt;p>这些指令一般都直接定义在顶层的 &lt;code>stream{}&lt;/code> 配置环境中，与 &lt;code>server{}&lt;/code>、&lt;code>upstream{}&lt;/code> 等块指令平级。还有一些指令是可以适用于多个指令块中的。定义在顶层的 &lt;code>stream{}&lt;/code> 配置环境中时，效果将会应用在每个 Virtual Server 中，同时也可以定义在单独的指令块中，让指令作用于局部。&lt;/p>
&lt;h2 id="ngx_stream_proxy_module-模块指令">ngx_stream_proxy_module 模块指令&lt;/h2>
&lt;blockquote>
&lt;p>代码：&lt;a href="https://github.com/nginx/nginx/blob/master/src/stream/ngx_stream_proxy_module.c">https://github.com/nginx/nginx/blob/master/src/stream/ngx_stream_proxy_module.c&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h3 id="超时相关指令">超时相关指令&lt;/h3>
&lt;h4 id="proxy_connect_timeout">proxy_connect_timeout&lt;/h4>
&lt;p>&lt;a href="http://nginx.org/en/docs/stream/ngx_stream_proxy_module.html#proxy_connect_timeout">http://nginx.org/en/docs/stream/ngx_stream_proxy_module.html#proxy_connect_timeout&lt;/a>&lt;/p>
&lt;p>与被代理服务器建立连接的超时时间&lt;/p>
&lt;ul>
&lt;li>语法：proxy_connect_timeout DURATION&lt;/li>
&lt;li>默认值：&lt;code>proxy_connect_timeout 60s;&lt;/code>&lt;/li>
&lt;li>作用范围：stream{}、server{}&lt;/li>
&lt;/ul>
&lt;h1 id="配置示例">配置示例&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">stream&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">upstream&lt;/span> &lt;span style="color:#e6db74">konggang_dashboard&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">server&lt;/span> 10.10.16.19:&lt;span style="color:#ae81ff">32000&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">server&lt;/span> 10.10.16.20:&lt;span style="color:#ae81ff">32000&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">server&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">listen&lt;/span> &lt;span style="color:#ae81ff">32000&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">proxy_pass&lt;/span> &lt;span style="color:#e6db74">konggang_dashboard&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">proxy_connect_timeout&lt;/span> &lt;span style="color:#e6db74">10s&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: 其他属于 NGX_CORE_MODULE 类型的模块</title><link>https://desistdaydream.github.io/docs/Web/Nginx/Nginx-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/%E5%85%B6%E4%BB%96%E5%B1%9E%E4%BA%8E-NGX_CORE_MODULE-%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%A8%A1%E5%9D%97/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/Web/Nginx/Nginx-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/%E5%85%B6%E4%BB%96%E5%B1%9E%E4%BA%8E-NGX_CORE_MODULE-%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%A8%A1%E5%9D%97/</guid><description>
&lt;h1 id="ngx_conf_module">NGX_CONF_MODULE&lt;/h1>
&lt;h2 id="inclue">inclue&lt;/h2>
&lt;ul>
&lt;li>语法：&lt;strong>include /PATH/FILE&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="http://nginx.org/en/docs/ngx_core_module.html#include">http://nginx.org/en/docs/ngx_core_module.html#include&lt;/a>&lt;/p>
&lt;p>在该配置中包含一个网站-可用的配置文件，即把定义的文件内容引入到这里，(也可以写入多个 include，引入多个配置文件以便管理，包括但不限于 server 配置，还可以是 nginx 的配置文件，mail 的配置文件等)&lt;/p>
&lt;ul>
&lt;li>作用范围：可以作用在任意 Contexts 中&lt;/li>
&lt;/ul>
&lt;p>该指令可以写在任意 块指令 中，只要被包含的文件格式，符合当前 块指令 应该包含的语法即可。&lt;/p></description></item><item><title>Docs: 七层代理配置</title><link>https://desistdaydream.github.io/docs/Web/Nginx/Nginx-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/%E4%B8%83%E5%B1%82%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/Web/Nginx/Nginx-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/%E4%B8%83%E5%B1%82%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/27IuQAe8UZGXIdNApE2Ljg">公众号，Nginx 代理 WebSocket 方法&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>这个配置里的 172.19.42.217 是 kubernetes 集群的入口，一般在 80 和 443 上都起一个 ingress controler，这样，多种域名都代理到同一个 kubernetes 集群，然后由 ingress 再将流量进行路由分配。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">user&lt;/span> &lt;span style="color:#e6db74">nginx&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">worker_processes&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">error_log&lt;/span> &lt;span style="color:#e6db74">/dev/stdout&lt;/span> &lt;span style="color:#e6db74">warn&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">pid&lt;/span> &lt;span style="color:#e6db74">/var/run/nginx.pid&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">events&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">worker_connections&lt;/span> &lt;span style="color:#ae81ff">102400&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">http&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">default_type&lt;/span> &lt;span style="color:#e6db74">application/octet-stream&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">access_log&lt;/span> &lt;span style="color:#e6db74">/dev/stdout&lt;/span> &lt;span style="color:#e6db74">main&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">keepalive_timeout&lt;/span> &lt;span style="color:#ae81ff">120&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">log_format&lt;/span> &lt;span style="color:#e6db74">main&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&lt;/span>$remote_addr &lt;span style="color:#e6db74">-&lt;/span> $remote_user &lt;span style="color:#e6db74">[&lt;/span>$time_local] &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$request&amp;#34; &lt;span style="color:#e6db74">&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;&lt;/span>$status $body_bytes_sent &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$http_referer&amp;#34; &lt;span style="color:#e6db74">&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;&amp;#34;&lt;/span>$http_user_agent&amp;#34; &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$http_x_forwarded_for&amp;#34;&amp;#39;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;&lt;/span>$upstream_addr &lt;span style="color:#e6db74">&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;ups_resp_time:&lt;/span> $upstream_response_time &lt;span style="color:#e6db74">&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;request_time:&lt;/span> $request_time&amp;#39;;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">sendfile&lt;/span> &lt;span style="color:#66d9ef">on&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">server_names_hash_bucket_size&lt;/span> &lt;span style="color:#ae81ff">256&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">server&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">listen&lt;/span> &lt;span style="color:#ae81ff">80&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">server_name&lt;/span> &lt;span style="color:#e6db74">grafana.desistdaydream.ltd&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">server_name&lt;/span> &lt;span style="color:#e6db74">prometheus.desistdaydream.ltd&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">server_name&lt;/span> &lt;span style="color:#e6db74">desistdaydream.ltd&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">server_name&lt;/span> &lt;span style="color:#e6db74">www.desistdaydream.ltd&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">client_body_in_file_only&lt;/span> &lt;span style="color:#e6db74">clean&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">client_body_buffer_size&lt;/span> &lt;span style="color:#e6db74">64K&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">client_max_body_size&lt;/span> &lt;span style="color:#e6db74">40M&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">sendfile&lt;/span> &lt;span style="color:#66d9ef">on&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">send_timeout&lt;/span> &lt;span style="color:#e6db74">300s&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">location&lt;/span> &lt;span style="color:#e6db74">/&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">proxy_pass&lt;/span> &lt;span style="color:#e6db74">http://172.19.42.217/&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">proxy_set_header&lt;/span> &lt;span style="color:#e6db74">X-Real-IP&lt;/span> $remote_addr;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">proxy_set_header&lt;/span> &lt;span style="color:#e6db74">Host&lt;/span> $host;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">proxy_set_header&lt;/span> &lt;span style="color:#e6db74">X-Forwarded-For&lt;/span> $proxy_add_x_forwarded_for;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">proxy_set_header&lt;/span> &lt;span style="color:#e6db74">X-Forwarded-Proto&lt;/span> $scheme;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">proxy_http_version&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#e6db74">.1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">proxy_set_header&lt;/span> &lt;span style="color:#e6db74">Upgrade&lt;/span> $http_upgrade;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">proxy_set_header&lt;/span> &lt;span style="color:#e6db74">Connection&lt;/span> &lt;span style="color:#e6db74">&amp;#34;upgrade&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">include&lt;/span> &lt;span style="color:#e6db74">/etc/nginx/mime.types&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">include&lt;/span> &lt;span style="color:#e6db74">/etc/nginx/conf.d/*.conf&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">include&lt;/span> &lt;span style="color:#e6db74">/etc/nginx/conf.d/protal/*.conf&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="rewrite-与-break">rewrite 与 break&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">server&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">listen&lt;/span> &lt;span style="color:#ae81ff">20443&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">location&lt;/span> &lt;span style="color:#e6db74">/&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">root&lt;/span> &lt;span style="color:#e6db74">/usr/share/nginx/html&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">index&lt;/span> &lt;span style="color:#e6db74">index.html&lt;/span> &lt;span style="color:#e6db74">index.htm&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">location&lt;/span> &lt;span style="color:#e6db74">/prom&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">proxy_pass&lt;/span> &lt;span style="color:#e6db74">http://192.168.254.253:9090&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">rewrite&lt;/span> &lt;span style="color:#e6db74">^/prom/(.*)&lt;/span>$ &lt;span style="color:#e6db74">/&lt;/span>$1 &lt;span style="color:#e6db74">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># if ($request_uri ~ ^/prom$) {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e"># return 302 /prom/graph;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e"># }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>当请求来到这个端口时，Nginx 会根据配置来处理这些请求。&lt;/p>
&lt;ul>
&lt;li>当你从客户端发起请求 &lt;code>http://192.168.254.253:20443/prom&lt;/code> 时：
&lt;ul>
&lt;li>请求会匹配到 &lt;code>location /prom&lt;/code>，因为请求的 URL 路径开始于 &lt;code>/prom&lt;/code>。&lt;/li>
&lt;li>&lt;code>proxy_pass http://192.168.254.253:9090;&lt;/code> 会将请求代理（转发）到内网地址 &lt;code>http://192.168.254.253:9090&lt;/code>。&lt;/li>
&lt;li>&lt;code>rewrite ^/prom/(.*)$ /$1 break;&lt;/code> 这行配置会重写 URL，将 &lt;code>/prom/&lt;/code> 之后的部分保留，前面的 &lt;code>/prom/&lt;/code> 替换为 &lt;code>/&lt;/code>。但因为请求的路径是 &lt;code>/prom&lt;/code> 并没有匹配到 &lt;code>/prom/&lt;/code> 之后的部分，所以重写规则不会应用。&lt;/li>
&lt;li>最终，请求会被代理到 &lt;code>http://192.168.254.253:9090/prom&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>当你从客户端发起请求 &lt;code>http://192.168.254.253:20443/prom/graph&lt;/code> 时：
&lt;ul>
&lt;li>请求同样会匹配到 &lt;code>location /prom&lt;/code>。&lt;/li>
&lt;li>&lt;code>proxy_pass http://192.168.254.253:9090;&lt;/code> 仍然会将请求代理到内网地址 &lt;code>http://192.168.254.253:9090&lt;/code>。&lt;/li>
&lt;li>对于 &lt;code>rewrite ^/prom/(.*)$ /$1 break;&lt;/code> 这行配置，此时它会匹配到 &lt;code>/prom/graph&lt;/code> 中的 &lt;code>/prom/graph&lt;/code> 部分，因此将其重写为 &lt;code>/graph&lt;/code>。&lt;/li>
&lt;li>最终，请求会被代理到 &lt;code>http://192.168.254.253:9090/graph&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="去掉-break-的后果">去掉 break 的后果&lt;/h2>
&lt;p>由于 break 的存在，当我们访问 /prom/graph 是可以正确打开页面的。&lt;/p>
&lt;p>但是如果去掉了 break，那么在 rewrite 后发现客户端实际请求的是 /graph，那么就需要匹配其他 location，由于无法匹配到任何 location，Nginx 会按照默认的处理方式来处理请求，即使用&lt;code>location /&lt;/code>块来处理。这个块将请求映射到 &lt;code>/usr/share/nginx/html/&lt;/code> 目录下的 &lt;code>graph&lt;/code> 文件。然而这个路径在默认的文件系统中并不存在，因此返回了404错误。&lt;/p>
&lt;blockquote>
&lt;p>Notes: 打开 nginx 的rewrite 日志，可以看到如下报错：&lt;code>2023/11/02 00:32:43 [error] 221#221: *1007 open() &amp;quot;/usr/share/nginx/html/graph&amp;quot; failed (2: No such file or directory), client: 192.168.254.254, server: , request: &amp;quot;GET /prom/graph HTTP/1.1&amp;quot;, host: &amp;quot;192.168.254.253:20443&amp;quot;&lt;/code>，这个日志也表明，/prom/graph 的请求被 nginx 当做 /graph 交给 &lt;code>location /&lt;/code> 处理了。&lt;/p>
&lt;p>另外，若删掉了 &lt;code>location /&lt;/code> 块，nginx 还有一个自己设定的默认块。。。。&lt;code>/&lt;/code> 的路径为 &lt;code>/etc/nginx/html/&lt;/code>。可以看到报错：&lt;code>2023/11/02 00:43:58 [error] 31#31: *1 open() &amp;quot;/etc/nginx/html/graph&amp;quot; failed (2: No such file or directory), client: 192.168.254.254, server: , request: &amp;quot;GET /prom/graph HTTP/1.1&amp;quot;, host: &amp;quot;192.168.254.253:20443&amp;quot; &lt;/code>&lt;/p>
&lt;/blockquote>
&lt;pre tabindex="0">&lt;code>
# 待整理配置示例
```nginx
server {
listen 80;
server_name grafana.desistdaydream.ltd;
server_name prometheus.desistdaydream.ltd;
server_name desistdaydream.ltd;
server_name www.desistdaydream.ltd;
client_body_in_file_only clean;
client_body_buffer_size 64K;
client_max_body_size 40M;
sendfile on;
send_timeout 300s;
location / {
proxy_pass http://172.19.42.217/;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header Host $host;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header X-Forwarded-Proto $scheme;
proxy_http_version 1.1;
proxy_set_header Upgrade $http_upgrade;
proxy_set_header Connection &amp;#34;upgrade&amp;#34;;
}
}
&lt;/code>&lt;/pre>&lt;h1 id="https">https&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">server&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">listen&lt;/span> &lt;span style="color:#ae81ff">80&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">listen&lt;/span> &lt;span style="color:#ae81ff">443&lt;/span> &lt;span style="color:#e6db74">ssl&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">server_name&lt;/span> &lt;span style="color:#e6db74">rancher.desistdaydream.ltd&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ssl&lt;/span> &lt;span style="color:#66d9ef">on&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># crt证书
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">ssl_certificate&lt;/span> &lt;span style="color:#e6db74">../keys/bj/rancher.desistdaydream.ltd.crt&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># key证书
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">ssl_certificate_key&lt;/span> &lt;span style="color:#e6db74">../keys/bj/rancher.desistdaydream.ltd.key&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">client_body_in_file_only&lt;/span> &lt;span style="color:#e6db74">clean&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">client_body_buffer_size&lt;/span> &lt;span style="color:#e6db74">64K&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">client_max_body_size&lt;/span> &lt;span style="color:#e6db74">40M&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">sendfile&lt;/span> &lt;span style="color:#66d9ef">on&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">send_timeout&lt;/span> &lt;span style="color:#e6db74">300s&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">location&lt;/span> &lt;span style="color:#e6db74">/&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">proxy_pass&lt;/span> &lt;span style="color:#e6db74">https://172.19.42.217:60443/&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">proxy_set_header&lt;/span> &lt;span style="color:#e6db74">X-Real-IP&lt;/span> $remote_addr;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">proxy_set_header&lt;/span> &lt;span style="color:#e6db74">Host&lt;/span> $host;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">proxy_set_header&lt;/span> &lt;span style="color:#e6db74">X-Forwarded-For&lt;/span> $proxy_add_x_forwarded_for;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">proxy_set_header&lt;/span> &lt;span style="color:#e6db74">X-Forwarded-Proto&lt;/span> $scheme;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">proxy_http_version&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#e6db74">.1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">proxy_set_header&lt;/span> &lt;span style="color:#e6db74">Upgrade&lt;/span> $http_upgrade;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">proxy_set_header&lt;/span> &lt;span style="color:#e6db74">Connection&lt;/span> &lt;span style="color:#e6db74">&amp;#34;upgrade&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: 四层代理配置</title><link>https://desistdaydream.github.io/docs/Web/Nginx/Nginx-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/%E5%9B%9B%E5%B1%82%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/Web/Nginx/Nginx-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/%E5%9B%9B%E5%B1%82%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="4-层代理配置">4 层代理配置&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">user&lt;/span> &lt;span style="color:#e6db74">nginx&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">worker_processes&lt;/span> &lt;span style="color:#e6db74">auto&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">error_log&lt;/span> &lt;span style="color:#e6db74">/var/log/nginx/error.log&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">pid&lt;/span> &lt;span style="color:#e6db74">/run/nginx.pid&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">include&lt;/span> /usr/share/nginx/modules/*.conf;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">events&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">worker_connections&lt;/span> &lt;span style="color:#ae81ff">10240&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">stream&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">include&lt;/span> &lt;span style="color:#e6db74">stream.d/*.conf&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">upstream&lt;/span> &lt;span style="color:#e6db74">grafana&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">server&lt;/span> 172.38.40.216:&lt;span style="color:#ae81ff">30000&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">server&lt;/span> 172.38.40.217:&lt;span style="color:#ae81ff">30000&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">upstream&lt;/span> &lt;span style="color:#e6db74">prometheus&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">server&lt;/span> 172.38.40.216:&lt;span style="color:#ae81ff">30001&lt;/span> &lt;span style="color:#e6db74">weight=8&lt;/span> &lt;span style="color:#e6db74">max_fails=2&lt;/span> &lt;span style="color:#e6db74">fail_timeout=30s&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">server&lt;/span> 172.38.40.217:&lt;span style="color:#ae81ff">30001&lt;/span> &lt;span style="color:#e6db74">weight=8&lt;/span> &lt;span style="color:#e6db74">max_fails=2&lt;/span> &lt;span style="color:#e6db74">fail_timeout=30s&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">server&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">listen&lt;/span> &lt;span style="color:#ae81ff">30000&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">proxy_pass&lt;/span> &lt;span style="color:#e6db74">grafana&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">proxy_connect_timeout&lt;/span> &lt;span style="color:#e6db74">10s&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">server&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">listen&lt;/span> &lt;span style="color:#ae81ff">30001&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">proxy_pass&lt;/span> &lt;span style="color:#e6db74">prometheus&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">proxy_connect_timeout&lt;/span> &lt;span style="color:#e6db74">2s&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">http&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Nginx 作为静态资源服务器配置示例</title><link>https://desistdaydream.github.io/docs/Web/Nginx/Nginx-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/Nginx-%E4%BD%9C%E4%B8%BA%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE%E7%A4%BA%E4%BE%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/Web/Nginx/Nginx-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/Nginx-%E4%BD%9C%E4%B8%BA%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE%E7%A4%BA%E4%BE%8B/</guid><description>
&lt;h1 id="nginx-的-location-里面的-rootalias-的使用技巧与区别">Nginx 的 location 里面的 root、alias 的使用技巧与区别&lt;/h1>
&lt;blockquote>
&lt;p>知乎：&lt;a href="https://zhuanlan.zhihu.com/p/379076598">https://zhuanlan.zhihu.com/p/379076598&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h2 id="location">location&lt;/h2>
&lt;p>Nginx 里面的 location，可以针对一个特殊的 URI 路径进行单独的设置。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">location&lt;/span> &lt;span style="color:#f92672">/&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">root&lt;/span> &lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">tongfu&lt;/span>.&lt;span style="color:#a6e22e">net&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">web&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#66d9ef">static&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 location 块里面可以单独设置映射目录、重写逻辑、默认文档等等。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">location&lt;/span> &lt;span style="color:#f92672">/&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">root&lt;/span> &lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">tongfu&lt;/span>.&lt;span style="color:#a6e22e">net&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">web&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">download&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">index&lt;/span> &lt;span style="color:#a6e22e">index&lt;/span>.&lt;span style="color:#a6e22e">htm&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">location&lt;/span> &lt;span style="color:#f92672">~&lt;/span> &lt;span style="color:#f92672">^&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">download&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>&lt;span style="color:#f92672">/&lt;/span>.&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>.(&lt;span style="color:#a6e22e">zip&lt;/span>&lt;span style="color:#f92672">|&lt;/span>&lt;span style="color:#a6e22e">rar&lt;/span>&lt;span style="color:#f92672">|&lt;/span>&lt;span style="color:#a6e22e">tgz&lt;/span>&lt;span style="color:#f92672">|&lt;/span>&lt;span style="color:#a6e22e">gz&lt;/span>)&lt;span style="color:#a6e22e">$&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">rewrite&lt;/span> &lt;span style="color:#f92672">^&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">download&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>&lt;span style="color:#f92672">/&lt;/span>(.&lt;span style="color:#f92672">*&lt;/span>)&lt;span style="color:#a6e22e">$&lt;/span> &lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">downloadValidation&lt;/span>.&lt;span style="color:#a6e22e">php&lt;/span>&lt;span style="color:#f92672">?&lt;/span>&lt;span style="color:#a6e22e">$1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="root">root&lt;/h2>
&lt;p>Nginx 里面的 root 参数用来指定映射根目录，末尾不加“/”。&lt;/p>
&lt;h3 id="主机默认目录">主机默认目录&lt;/h3>
&lt;p>直接在 server 里面设置 root 就是设置主机的根目录。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">server&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">root&lt;/span> &lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">tongfu&lt;/span>.&lt;span style="color:#a6e22e">net&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">web&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#66d9ef">static&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="匹配-uri-目录">匹配 URI 目录&lt;/h3>
&lt;p>在 location 里面设置 root 就是设置匹配 URI 的根目录。&lt;/p>
&lt;p>下面的例子里如果访问 &lt;a href="https://link.zhihu.com/?target=http%3A//localhost/icon/abc.png">http://localhost/icon/abc.png&lt;/a> 网址，映射到的服务器路径是 /tongfu.net/web/icons**/icon/abc.png**。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">location&lt;/span> &lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">icon&lt;/span>&lt;span style="color:#f92672">/&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">root&lt;/span> &lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">tongfu&lt;/span>.&lt;span style="color:#a6e22e">net&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">web&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">icons&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="alias">alias&lt;/h2>
&lt;p>Nginx 里面的 root 参数用来指定映射目录，末尾需要加“/”。&lt;/p>
&lt;p>下面的例子里如果访问 &lt;a href="https://link.zhihu.com/?target=http%3A//localhost/icon/abc.png">http://localhost/icon/abc.png&lt;/a> 网址，映射到的服务器路径是 /tongfu.net/web/icons/&lt;strong>abc.png&lt;/strong>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">location&lt;/span> &lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">icon&lt;/span>&lt;span style="color:#f92672">/&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">alias&lt;/span> &lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">tongfu&lt;/span>.&lt;span style="color:#a6e22e">net&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">web&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">icons&lt;/span>&lt;span style="color:#f92672">/&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="nginx-代理-vue-项目的单页应用刷新后-404-问题">Nginx 代理 Vue 项目的单页应用刷新后 404 问题&lt;/h1>
&lt;p>在 location 中添加 &lt;code>try_files $uri $uri/ /index.html;&lt;/code>&lt;/p></description></item><item><title>Docs: 多用途模块的指令</title><link>https://desistdaydream.github.io/docs/Web/Nginx/Nginx-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/%E5%A4%9A%E7%94%A8%E9%80%94%E6%A8%A1%E5%9D%97%E7%9A%84%E6%8C%87%E4%BB%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/Web/Nginx/Nginx-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/%E5%A4%9A%E7%94%A8%E9%80%94%E6%A8%A1%E5%9D%97%E7%9A%84%E6%8C%87%E4%BB%A4/</guid><description/></item></channel></rss>