<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦的站点 – Data Pipeline</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/DataPipeline/</link><description>Recent content in Data Pipeline on 断念梦的站点</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/DataPipeline/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Data Pipeline</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/DataPipeline/DataPipeline/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/DataPipeline/DataPipeline/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.mezmo.com/blog/what-is-an-observability-data-pipeline">https://www.mezmo.com/blog/what-is-an-observability-data-pipeline&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://vector.dev/docs/about/what-is-observability-pipelines/">https://vector.dev/docs/about/what-is-observability-pipelines/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.dqlabs.ai/blog/what-is-a-data-pipeline-types-architecture-components/">https://www.dqlabs.ai/blog/what-is-a-data-pipeline-types-architecture-components/&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Data Pipeline(数据管道)&lt;/strong> 是一个抽象概念，通过 Data Pipeline 对多个来源的可观测性数据进行 聚合、处理、并将其路由到各种目的地。这解决了多个问题，包括：&lt;/p>
&lt;ol>
&lt;li>需要将数据集中到一个位置。&lt;/li>
&lt;li>结构化和丰富数据的能力，以便更容易理解并从中获取价值。&lt;/li>
&lt;li>需要将数据发送到多个目的地或团队以实现多个用例。&lt;/li>
&lt;li>需要控制数据量并仅以正确的格式将正确的数据发送到正确的目的地。&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://datadog-docs.imgix.net/images/observability_pipelines/op_marketecture_08232024.82939fcff194b8a049c85df485665720.png?fit=max&amp;amp;auto=format&amp;amp;w=1862&amp;amp;h=894" alt="https://docs.datadoghq.com/observability_pipelines/">&lt;/p>
&lt;p>不管是 集成在程序内部的一段代码、在外部运行的采集程序，都可以看作是一种 DataPipeline。e.g. Loki 的 &lt;a href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Logs/Loki/Promtail/Promtail.md">Promtail&lt;/a>、Prometheus 的 &lt;a href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Instrumenting/Instrumenting.md">Instrumenting&lt;/a>、etc. 都属于一种 DataPipeline 的实现。&lt;/p>
&lt;p>&lt;font color="#ff0000">&lt;strong>用人话说：将数据从一个地方流到另一个地方的行为，就是 Pipeline 行为&lt;/strong>&lt;/font>。就像 Pipeline 名字一样，管道，只不过是用来承载数据的管道，可以让数据从管道的一段流向另一端。&lt;/p>
&lt;p>从逻辑上看，可观测数据从采集到入库的过程中，可以存在多级 DataPipeline，采集程序自身也可以当作 DataPipeline 的一部分；然后中间可以经过处理或路由，也可以不经过处理或路由；最后进入到数据库中。&lt;/p></description></item><item><title>Docs: Vector</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/DataPipeline/Vector/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/DataPipeline/Vector/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/vectordotdev/vector">GitHub 项目，vectordotdev/vector&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://vector.dev/">官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.cnblogs.com/ulricqin/p/17762086.html">https://www.cnblogs.com/ulricqin/p/17762086.html&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Vector 是一种高性能的用于可观测性的 &lt;a href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/DataPipeline/DataPipeline.md">DataPipeline&lt;/a>(数据管道)，让用户能够控制其可观测性数据。收集、转换 所有日志、指标和跟踪，并将其路由到任意 Vendor 以及明天可能需要的其他 Vendor。&lt;/p>
&lt;blockquote>
&lt;p>Notes: Vendor 指使用这些数据的地方，e.g. 数据库、Web 前端、etc. 这些地方都可以对外提供数据，所以称为 Vendor(供应商)，就像数据供应商似的。&lt;/p>
&lt;/blockquote>
&lt;p>Datadog 在 2021 年左右收购了 Vector。Vector 通常用作 ELK 生态中 logstash 的替代品。&lt;/p>
&lt;p>Vector 开箱即用，默认支持 &lt;a href="https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE/ClickHouse.md">ClickHouse&lt;/a>、etc.&lt;/p>
&lt;h1 id="vector-架构">Vector 架构&lt;a class="td-heading-self-link" href="#vector-%e6%9e%b6%e6%9e%84" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>Vector 可以部署为两个角色，既可以作为数据采集的 Agent，也可以作为数据聚合、路由的 Aggregator，架构示例如下：&lt;/p>
&lt;p>&lt;img src="https://download.flashcat.cloud/ulric/20230927153626.png" alt="https://www.cnblogs.com/ulricqin/p/17762086.html">&lt;/p>
&lt;h2 id="agent">Agent&lt;a class="td-heading-self-link" href="#agent" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="aggregator">Aggregator&lt;a class="td-heading-self-link" href="#aggregator" aria-label="Heading self-link">&lt;/a>&lt;/h2></description></item></channel></rss>