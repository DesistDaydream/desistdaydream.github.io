<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦的站点 – Vector</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/DataPipeline/Vector/</link><description>Recent content in Vector on 断念梦的站点</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/DataPipeline/Vector/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Vector</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/DataPipeline/Vector/Vector/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/DataPipeline/Vector/Vector/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/vectordotdev/vector">GitHub 项目，vectordotdev/vector&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://vector.dev/">官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.cnblogs.com/ulricqin/p/17762086.html">https://www.cnblogs.com/ulricqin/p/17762086.html&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Vector 是一种高性能的用于可观测性的 &lt;a href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/DataPipeline/DataPipeline.md">DataPipeline&lt;/a>(数据管道)，让用户能够控制其可观测性数据。收集、转换 所有日志、指标和跟踪，并将其路由到任意 Vendor 以及明天可能需要的其他 Vendor。&lt;/p>
&lt;blockquote>
&lt;p>Notes: Vendor 指使用这些数据的地方，e.g. 数据库、Web 前端、etc. 这些地方都可以对外提供数据，所以称为 Vendor(供应商)，就像数据供应商似的。&lt;/p>
&lt;/blockquote>
&lt;p>Datadog 在 2021 年左右收购了 Vector。Vector 通常用作 ELK 生态中 logstash 的替代品。&lt;/p>
&lt;p>Vector 开箱即用，默认支持 &lt;a href="https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE/ClickHouse/ClickHouse.md">ClickHouse&lt;/a>、etc.&lt;/p>
&lt;h1 id="vector-架构">Vector 架构&lt;a class="td-heading-self-link" href="#vector-%e6%9e%b6%e6%9e%84" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;img src="https://raw.githubusercontent.com/vectordotdev/vector/refs/heads/master/website/static/img/data-model-event.svg" alt="">&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Sources&lt;/strong> # 将可观测性数据源中的数据收集或接收到 Vector 中&lt;/li>
&lt;li>&lt;strong>Transforms&lt;/strong> # 在可观测性数据通过拓扑时操纵或更改该数据&lt;/li>
&lt;li>&lt;strong>Sinks&lt;/strong> # 将数据从 Vector 向前发送到外部服务或目的地&lt;/li>
&lt;/ul>
&lt;h1 id="部署角色">部署角色&lt;a class="td-heading-self-link" href="#%e9%83%a8%e7%bd%b2%e8%a7%92%e8%89%b2" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>Vector 可以部署为两个角色，既可以作为数据采集的 Agent，也可以作为数据聚合、路由的 Aggregator，架构示例如下：&lt;/p>
&lt;p>&lt;img src="https://vector.dev/img/deployment.png" alt="https://vector.dev/docs/setup/deployment/">&lt;/p>
&lt;h2 id="agent">Agent&lt;a class="td-heading-self-link" href="#agent" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="aggregator">Aggregator&lt;a class="td-heading-self-link" href="#aggregator" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h1 id="vector-部署">Vector 部署&lt;a class="td-heading-self-link" href="#vector-%e9%83%a8%e7%bd%b2" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://vector.dev/docs/setup/installation/">官方文档，Setup - 安装&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="包管理器">包管理器&lt;a class="td-heading-self-link" href="#%e5%8c%85%e7%ae%a1%e7%90%86%e5%99%a8" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="容器">容器&lt;a class="td-heading-self-link" href="#%e5%ae%b9%e5%99%a8" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="二进制文件">二进制文件&lt;a class="td-heading-self-link" href="#%e4%ba%8c%e8%bf%9b%e5%88%b6%e6%96%87%e4%bb%b6" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h1 id="vector-关联文件与配置">Vector 关联文件与配置&lt;a class="td-heading-self-link" href="#vector-%e5%85%b3%e8%81%94%e6%96%87%e4%bb%b6%e4%b8%8e%e9%85%8d%e7%bd%ae" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;strong>/var/lib/vector/&lt;/strong> # 持久保存 Vector 状态的目录。e.g. 磁盘缓冲、文件检查点、etc. 。可以通过配置文件的 .data_dir 字段指定。&lt;/p>
&lt;p>&lt;strong>/etc/vector/vector.yaml&lt;/strong> # 已经弃用的默认配置文件。由于 Vector 灵活的设计，可以加载多个配置文件，一般情况都是手动使用 &amp;ndash;config-dir 指定配置文件目录。这样更利于配置管理。&lt;/p>
&lt;h1 id="api">API&lt;a class="td-heading-self-link" href="#api" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://vector.dev/docs/reference/api/">官方文档，参考 - API&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Vector 提供 &lt;a href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/API/GraphQL.md">GraphQL&lt;/a> API&lt;/p></description></item><item><title>Docs: Vector Configuration</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/DataPipeline/Vector/Vector-Configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/DataPipeline/Vector/Vector-Configuration/</guid><description>
&lt;p>引言 官方文档的简单食用方式&lt;/p>
&lt;p>在每个 Source 的文档中，可以在 &lt;strong>Output Data&lt;/strong> 和 &lt;strong>Examples&lt;/strong> 两部分看到输出格式和输出内容。比如这种 Source 的日志都有什么元数据，输出格式是什么样的，etc. 。其中有些内嵌的隐藏字段以 &lt;code>_&lt;/code> 开头，可以这些输出的内容可以直接或利用&lt;a href="https://vector.dev/docs/reference/configuration/template-syntax/">模板&lt;/a>使用在 sinks 的定义中。&lt;/p>
&lt;p>用一个简单的 Linux 中的 &lt;a href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Logs/Journal.md">Journal&lt;/a> 日志采集输出到 &lt;a href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Logs/Loki/Loki.md">Loki&lt;/a> 的场景进行配置演示&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">sources&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">test_journald&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">journald&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">sinks&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">test_loki&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">loki&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">inputs&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">test_journald&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">endpoint&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;http://localhost:3100&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">encoding&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">codec&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">raw_message&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">labels&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">source_type&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;{{ source_type }}&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">host&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;{{ host }}&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">systemd_unit&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;{{ _SYSTEMD_UNIT }}&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个配置带有 &lt;code>{{ }}&lt;/code> 的是模板语法，&lt;code>_SYSTEMD_UNIT&lt;/code> 的值示例可以在 JournalD 文档的 &lt;a href="https://vector.dev/docs/reference/configuration/sources/journald/#examples">Examples&lt;/a> 看到；&lt;code>source_type&lt;/code> 和 &lt;code>host&lt;/code> 的值可以在文档的 &lt;a href="https://vector.dev/docs/reference/configuration/sources/journald/#output-data">Output Data&lt;/a> 看到&lt;/p>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://vector.dev/docs/reference/configuration/">官方文档，参考 - 配置&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Vector 配置文件支持 &lt;a href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E6%97%A0%E6%B3%95%E5%88%86%E7%B1%BB%E7%9A%84%E8%AF%AD%E8%A8%80/YAML.md">YAML&lt;/a>, &lt;a href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E6%97%A0%E6%B3%95%E5%88%86%E7%B1%BB%E7%9A%84%E8%AF%AD%E8%A8%80/TOML.md">TOML&lt;/a>, &lt;a href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E6%97%A0%E6%B3%95%E5%88%86%E7%B1%BB%E7%9A%84%E8%AF%AD%E8%A8%80/JSON.md">JSON&lt;/a> 三种格式。&lt;/p>
&lt;p>顶级字段&lt;/p>
&lt;ul>
&lt;li>全局字段 # 详见下文 &lt;a href="#%E5%85%A8%E5%B1%80%E5%AD%97%E6%AE%B5">全局字段&lt;/a>。这些字段并没有上级字段，直接定义在文件顶层。&lt;/li>
&lt;li>组件相关字段
&lt;ul>
&lt;li>&lt;strong>sources&lt;/strong>(map[SourceID]&lt;a href="#sources">source&lt;/a>) # 定义一个或多个 Source 组件&lt;/li>
&lt;li>&lt;strong>transforms&lt;/strong>(map[TransformID]&lt;a href="#transforms">transform&lt;/a>) # 定义一个或多个 Transforms 组件&lt;/li>
&lt;li>&lt;strong>sinks&lt;/strong>(map[SinkID]&lt;a href="#sinks">sink&lt;/a>) # 定义一个或多个 Sink 组件&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>[!Note]
SourceID, TransformID, SinkID 是自定义的字符串，用以表示定义的对应组件的唯一性，称为 &lt;strong>ComponentID(组件唯一标识)&lt;/strong>。在其地方引用已定义的组件时，也要使用 ComponentID&lt;/p>
&lt;p>由于 Vector 灵活的设计，组件字段可以分散在多个文件中，并且可重复（比如两个文件中都有 sources 字段），只要 ComponentID 不重复即可。&lt;/p>
&lt;/blockquote>
&lt;h1 id="全局字段">全局字段&lt;a class="td-heading-self-link" href="#%e5%85%a8%e5%b1%80%e5%ad%97%e6%ae%b5" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;strong>data_dir&lt;/strong>(STRING)&lt;/p>
&lt;p>&lt;strong>api&lt;/strong>(Object) # Vector 的 API 配置。开启后可以使用 &lt;code>vector top&lt;/code> 命令尝试简单的 API 交互以验证 API 情况&lt;/p>
&lt;ul>
&lt;li>&lt;strong>enable&lt;/strong>(BOOLEAN) # 是否开启 Vector API。&lt;code>默认值: false&lt;/code>&lt;/li>
&lt;li>&lt;strong>address&lt;/strong>(STRING) # API 监听地址。&lt;code>默认值: 127.0.0.1:8686&lt;/code>&lt;/li>
&lt;/ul>
&lt;h1 id="sources">sources&lt;a class="td-heading-self-link" href="#sources" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;a href="https://vector.dev/docs/reference/configuration/sources/">https://vector.dev/docs/reference/configuration/sources/&lt;/a>&lt;/p>
&lt;h1 id="transforms">transforms&lt;a class="td-heading-self-link" href="#transforms" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;a href="https://vector.dev/docs/reference/configuration/transforms/">https://vector.dev/docs/reference/configuration/transforms/&lt;/a>&lt;/p>
&lt;h1 id="sinks">sinks&lt;a class="td-heading-self-link" href="#sinks" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;a href="https://vector.dev/docs/reference/configuration/sinks/">https://vector.dev/docs/reference/configuration/sinks/&lt;/a>&lt;/p>
&lt;p>所有 Sinks 通常都要有一个 &lt;code>inputs([]STRING)&lt;/code> 字段，以声明要输出的数据是从哪来的。inputs 中的值可以是 SourceID 或 TransformID&lt;/p></description></item></channel></rss>