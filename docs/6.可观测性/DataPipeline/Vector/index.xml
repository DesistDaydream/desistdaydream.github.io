<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Vector on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/DataPipeline/Vector/</link><description>Recent content in Vector on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Tue, 13 May 2025 17:39:57 +0800</lastBuildDate><atom:link href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/DataPipeline/Vector/index.xml" rel="self" type="application/rss+xml"/><item><title>Vector</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/DataPipeline/Vector/Vector/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/DataPipeline/Vector/Vector/</guid><description>概述 参考：
GitHub 项目，vectordotdev/vector 官网 https://www.cnblogs.com/ulricqin/p/17762086.html Vector 是一种高性能的用于可观测性的 DataPipeline(数据管道)，让用户能够控制其可观测性数据。收集、转换 所有日志、指标和跟踪，并将其路由到任意 Vendor 以及明天可能需要的其他 Vendor。
Notes: Vendor 指使用这些数据的地方，e.g. 数据库、Web 前端、etc. 这些地方都可以对外提供数据，所以称为 Vendor(供应商)，就像数据供应商似的。
Datadog 在 2021 年左右收购了 Vector。Vector 通常用作 ELK 生态中 logstash 的替代品。
Vector 开箱即用，默认支持 ClickHouse、etc.
Vector 架构 Vector 将数据通道抽象为 3 部分组件：
Sources # 将可观测性数据源中的数据收集或接收到 Vector 中 Transforms # 在可观测性数据通过拓扑时操纵或更改该数据。（拓扑可以理解为一种网状结构，由处理数据的多个节点组成） Sinks # 将可观测性数据从 Vector 向前发送到外部服务或目的地 部署角色 Vector 可以部署为两个角色，既可以作为数据采集的 Agent，也可以作为数据聚合、路由的 Aggregator，架构示例如下：
Agent Aggregator Vector 部署 参考：
官方文档，Setup - 安装 包管理器 容器 二进制文件 Vector 关联文件与配置 /var/lib/vector/ # 持久保存 Vector 状态的目录。e.</description></item><item><title>Vector Configuration</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/DataPipeline/Vector/Vector-Configuration/</link><pubDate>Sun, 05 Jan 2025 15:55:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/DataPipeline/Vector/Vector-Configuration/</guid><description>引言 官方文档的简单食用方式
在每个 Source 的文档中，可以在 Output Data 和 Examples 两个章节看到输出格式和输出内容。比如这种 Source 的日志都有什么元数据，输出格式是什么样的，etc. 。其中有些内嵌的隐藏字段以 _ 开头，可以这些输出的内容可以直接或利用模板使用在 sinks 的定义中。
用一个简单的 Linux 中的 Journal 日志采集输出到 Loki 的场景进行配置演示
sources: test_journald: type: journald sinks: test_loki: type: loki inputs: - test_journald endpoint: &amp;#34;http://localhost:3100&amp;#34; encoding: codec: raw_message labels: source_type: &amp;#34;{{ source_type }}&amp;#34; host: &amp;#34;{{ host }}&amp;#34; systemd_unit: &amp;#34;{{ _SYSTEMD_UNIT }}&amp;#34; 这个配置带有 {{ }} 的是模板语法，_SYSTEMD_UNIT 的值示例可以在 JournalD 文档的 Examples 看到；source_type 和 host 的值可以在文档的 Output Data 看到
概述 参考：</description></item></channel></rss>