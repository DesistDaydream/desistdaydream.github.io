<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦的站点 – OpenTelemetry</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/OpenTelemetry/</link><description>Recent content in OpenTelemetry on 断念梦的站点</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 26 Sep 2023 08:34:00 +0000</lastBuildDate><atom:link href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/OpenTelemetry/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: OpenTelemetry</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/OpenTelemetry/OpenTelemetry/</link><pubDate>Tue, 26 Sep 2023 08:34:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/OpenTelemetry/OpenTelemetry/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/open-telemetry">GitHub 组织，OpenTelemetry&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://opentelemetry.io/">官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://opentelemetry.io/docs/">官方文档&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/bcziZg8RhCrMGYgFeN76cw">公众号-OpenTelemetry，OpenTelemetry 核心原理篇 ：怎么理解分布式链路追踪技术？&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/3dD0hIuqpXdepLVC6V7aoA">公众号-OpenTelemetry，在生产环境如何选择靠谱的 APM 系统&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>OpenTelemetry(开放式遥测技术，简称 OTel)&lt;/strong> 是一组 &lt;strong>API、SDK、工具、更是一种遥测标准&lt;/strong>，旨在创建和管理 &lt;strong>Telemetry Data(遥测数据)&lt;/strong>。通过 OpenTelemetry 标准创建的程序，可以采集 OpenTelemetry 标准的遥测数据，并发送到我们指定的后端中。OpenTelemetry 支持各种流行的开源后端项目，比如 Prometheus、Jaeger 等。&lt;/p>
&lt;p>遥测数据包括&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Logs(日志数据)&lt;/strong> # &lt;a href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Logs/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F.md">日志系统&lt;/a>&lt;/li>
&lt;li>&lt;strong>Metrics(指标数据)&lt;/strong> # &lt;a href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0.md">监控系统&lt;/a>&lt;/li>
&lt;li>&lt;strong>Traces(链路追踪数据)&lt;/strong> # &lt;a href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Traces/%E8%BF%BD%E8%B8%AA%E7%B3%BB%E7%BB%9F.md">追踪系统&lt;/a>&lt;/li>
&lt;li>&lt;strong>Baggage&lt;/strong> # TODO: 这是啥&lt;/li>
&lt;/ul>
&lt;p>注意：OpenTelemetry 不是像 Prometheus、Jaeger 那样的可观察性后端。相反，OpenTelemetry 支持将数据导出到各种开源和商业的后端产品中，它提供了一个可插拔的架构，因此可以轻松添加其他技术协议和格式。&lt;/p>
&lt;p>OTel 之于可观测性系统，类似 OCI 之于容器。但是能比 OCI 提供更多。&lt;/p>
&lt;h2 id="opentelemetry-组件">OpenTelemetry 组件&lt;a class="td-heading-self-link" href="#opentelemetry-%e7%bb%84%e4%bb%b6" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>目前，OpenTelemetry 由以下几个主要组件组成：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>规范&lt;/strong> # 与编程语言无关的规范，规定了遥测数据格式等&lt;/li>
&lt;li>&lt;strong>工具&lt;/strong> # 用于 采集/接收、转换、导出 遥测数据的工具。比如官方提供的 &lt;a href="docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/OpenTelemetry/Collector.md">OTel Collector&lt;/a>&lt;/li>
&lt;li>&lt;strong>SDK&lt;/strong> # 用于为各种编程语言提供编写符合 OpenTelemetry 规范的工具&lt;/li>
&lt;li>&lt;strong>自动 instrumentation 和 贡献包&lt;/strong> # TODO: 没搞懂这是什么？&lt;/li>
&lt;/ul>
&lt;h2 id="opentelemetry-历史">OpenTelemetry 历史&lt;a class="td-heading-self-link" href="#opentelemetry-%e5%8e%86%e5%8f%b2" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>OTel 于 2019 年 5 月，由 &lt;a href="https://opentracing.io/">OpenTracing&lt;/a> 与 OpenCensus 合并而成(&lt;a href="https://opensource.googleblog.com/2019/05/opentelemetry-merger-of-opencensus-and.html">Google Open Source&lt;/a>)，&lt;/p>
&lt;h1 id="opentelemetry-实现">OpenTelemetry 实现&lt;a class="td-heading-self-link" href="#opentelemetry-%e5%ae%9e%e7%8e%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;a href="https://github.com/grafana/agent">GitHub 项目，grafana/agent&lt;/a> #&lt;/p>
&lt;p>&lt;a href="https://github.com/flashcatcloud/categraf">GitHub 项目，flashcatcloud/categraf&lt;/a> # 通过配置文件，采集所有数据，然后 Push 给 Prom(Prom 需要使用 &lt;code>--web.enable-remote-write-receiver&lt;/code> 为自身开启远程写功能)，暂时没有等待 pull 的功能(截止 2022.6.1 v0.1.0 版本)&lt;/p>
&lt;p>&lt;a href="https://www.guance.com/">https://www.guance.com/&lt;/a> 观测云。。。。这个产品。。怎么说呢。。上来就让人各种注册才能体验的感觉很不好。。而且在云原生社区可观测性 SIG 群里，这家人的表达方式和处理事情的态度给人的感觉也不好~工作内部矛盾放在群里说。。还揭露个人隐私。。。。o(╯□╰)o&lt;/p>
&lt;p>&lt;a href="https://github.com/open-telemetry/opentelemetry-go-instrumentation">GitHub 项目，open-telemetry/opentelemetry-go-instrumentation&lt;/a> # 使用 Go 语言利用 eBPF 实现的 OpenTelemetry 自动 Instrumentation&lt;/p>
&lt;h2 id="grafana-agent">Grafana Agent&lt;a class="td-heading-self-link" href="#grafana-agent" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/grafana/agent">GitHub 项目，grafana/agent&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/agent/latest/">官方文档&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Grafana Agent 收集遥测数据并将其转发到 Grafana Stack、Grafana Cloud 或 Grafana Enterprise 的开源部署，然后可以在其中分析您的数据。您可以在 Kubernetes 和 Docker 上安装 Grafana Agent，或者作为 Linux、macOS 和 Windows 机器的系统进程。&lt;/p>
&lt;p>Grafana Agent 是开源的，其源代码可在 GitHub 上的&lt;a href="https://github.com/grafana/agent">https://github.com/grafana/agent&lt;/a>上获得。&lt;/p>
&lt;p>Grafana Agent 适用于希望收集和转发遥测数据以进行分析和待命警报的工程师、操作员或管理员。那些运行 Grafana Agent 的人必须安装和配置 Grafana Agent 才能正确收集遥测数据并监控正在运行的代理的健康状况。&lt;/p>
&lt;h1 id="最佳实践">最佳实践&lt;a class="td-heading-self-link" href="#%e6%9c%80%e4%bd%b3%e5%ae%9e%e8%b7%b5" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;a href="https://mp.weixin.qq.com/s/wiAT4GHaeitn2o6Byr_kGA">公众号-云原生小白，Opentelemetry 实践分享 - Golang篇&lt;/a>&lt;/p>
&lt;h1 id="opentelemetry-demo">OpenTelemetry Demo&lt;a class="td-heading-self-link" href="#opentelemetry-demo" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/open-telemetry/opentelemetry-demo">GitHub 项目，open-telemetry/opentelemetry-demo&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://opentelemetry.io/docs/demo/">官方文档，Demo&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://flashcat.cloud/blog/opentelemetry-demo-step-by-step/">https://flashcat.cloud/blog/opentelemetry-demo-step-by-step/&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>OpenTelemetry Demo&lt;/strong> 是一个由用不同编程语言编写的微服务组成的 Demo 系统，这些微服务通过 gRPC 和 HTTP 相互通信；以及一个使用 [Locust](https: locust.io/) 来伪造用户流量的负载生成器。&lt;/p>
&lt;pre class="mermaid">graph TD
subgraph Service Diagram
accountingservice(Accounting Service):::dotnet
adservice(Ad Service):::java
cache[(Cache&amp;lt;br/&amp;gt;&amp;amp;#40redis&amp;amp;#41)]
cartservice(Cart Service):::dotnet
checkoutservice(Checkout Service):::golang
currencyservice(Currency Service):::cpp
emailservice(Email Service):::ruby
frauddetectionservice(Fraud Detection Service):::kotlin
frontend(Frontend):::typescript
frontendproxy(Frontend Proxy &amp;lt;br/&amp;gt;&amp;amp;#40Envoy&amp;amp;#41):::cpp
imageprovider(Image Provider &amp;lt;br/&amp;gt;&amp;amp;#40nginx&amp;amp;#41):::cpp
loadgenerator([Load Generator]):::python
paymentservice(Payment Service):::javascript
productcatalogservice(Product Catalog Service):::golang
quoteservice(Quote Service):::php
recommendationservice(Recommendation Service):::python
shippingservice(Shipping Service):::rust
queue[(queue&amp;lt;br/&amp;gt;&amp;amp;#40Kafka&amp;amp;#41)]
Internet --&amp;gt;|HTTP| frontendproxy
frontendproxy --&amp;gt;|HTTP| frontend
loadgenerator --&amp;gt;|HTTP| frontendproxy
frontendproxy --&amp;gt;|HTTP| imageprovider
queue --&amp;gt;|TCP| accountingservice
queue --&amp;gt;|TCP| frauddetectionservice
frontend --&amp;gt;|gRPC| cartservice
frontend --&amp;gt;|gRPC| currencyservice
checkoutservice --&amp;gt;|gRPC| cartservice --&amp;gt; cache
checkoutservice --&amp;gt;|gRPC| productcatalogservice
checkoutservice --&amp;gt;|gRPC| currencyservice
checkoutservice --&amp;gt;|HTTP| emailservice
checkoutservice --&amp;gt;|gRPC| paymentservice
checkoutservice --&amp;gt;|gRPC| shippingservice
checkoutservice --&amp;gt;|TCP| queue
frontend --&amp;gt;|gRPC| adservice
frontend --&amp;gt;|gRPC| productcatalogservice
frontend ---&amp;gt;|gRPC| checkoutservice
frontend ----&amp;gt;|gRPC| recommendationservice --&amp;gt;|gRPC| productcatalogservice
shippingservice --&amp;gt;|HTTP| quoteservice
end
classDef dotnet fill:#178600,color:white;
classDef cpp fill:#f34b7d,color:white;
classDef erlang fill:#b83998,color:white;
classDef golang fill:#00add8,color:black;
classDef java fill:#b07219,color:white;
classDef javascript fill:#f1e05a,color:black;
classDef kotlin fill:#560ba1,color:white;
classDef php fill:#4f5d95,color:white;
classDef python fill:#3572A5,color:white;
classDef ruby fill:#701516,color:white;
classDef rust fill:#dea584,color:black;
classDef typescript fill:#e98516,color:black;&lt;/pre>
&lt;pre class="mermaid">graph TD
subgraph Service Legend
dotnetsvc(.NET):::dotnet
cppsvc(C&amp;#43;&amp;#43;):::cpp
erlangsvc(Erlang/Elixir):::erlang
golangsvc(Go):::golang
javasvc(Java):::java
javascriptsvc(JavaScript):::javascript
kotlinsvc(Kotlin):::kotlin
phpsvc(PHP):::php
pythonsvc(Python):::python
rubysvc(Ruby):::ruby
rustsvc(Rust):::rust
typescriptsvc(TypeScript):::typescript
end
classDef dotnet fill:#178600,color:white;
classDef cpp fill:#f34b7d,color:white;
classDef erlang fill:#b83998,color:white;
classDef golang fill:#00add8,color:black;
classDef java fill:#b07219,color:white;
classDef javascript fill:#f1e05a,color:black;
classDef kotlin fill:#560ba1,color:white;
classDef php fill:#4f5d95,color:white;
classDef python fill:#3572A5,color:white;
classDef ruby fill:#701516,color:white;
classDef rust fill:#dea584,color:black;
classDef typescript fill:#e98516,color:black;&lt;/pre>
&lt;p>Demo 中的 Collector 的配置在 &lt;a href="https://github.com/open-telemetry/opentelemetry-demo/blob/main/src/otelcollector/otelcol-config.yml">otelcol-config.yml&lt;/a> 这里找到&lt;/p>
&lt;pre class="mermaid">graph TB
subgraph tdf[Telemetry Data Flow]
subgraph subgraph_padding [ ]
style subgraph_padding fill:none,stroke:none;
%% padding to stop the titles clashing
subgraph od[OpenTelemetry Demo]
ms(Microservice)
end
ms -.-&amp;gt;|&amp;#34;OTLP&amp;lt;br/&amp;gt;gRPC&amp;#34;| oc-grpc
ms -.-&amp;gt;|&amp;#34;OTLP&amp;lt;br/&amp;gt;HTTP POST&amp;#34;| oc-http
subgraph oc[OTel Collector]
style oc fill:#97aef3,color:black;
oc-grpc[/&amp;#34;OTLP Receiver&amp;lt;br/&amp;gt;listening on&amp;lt;br/&amp;gt;grpc://localhost:4317&amp;#34;/]
oc-http[/&amp;#34;OTLP Receiver&amp;lt;br/&amp;gt;listening on &amp;lt;br/&amp;gt;localhost:4318&amp;lt;br/&amp;gt;&amp;#34;/]
oc-proc(Processors)
oc-prom[/&amp;#34;OTLP HTTP Exporter&amp;#34;/]
oc-otlp[/&amp;#34;OTLP Exporter&amp;#34;/]
oc-grpc --&amp;gt; oc-proc
oc-http --&amp;gt; oc-proc
oc-proc --&amp;gt; oc-prom
oc-proc --&amp;gt; oc-otlp
end
oc-prom --&amp;gt;|&amp;#34;localhost:9090/api/v1/otlp&amp;#34;| pr-sc
oc-otlp --&amp;gt;|gRPC| ja-col
subgraph pr[Prometheus]
style pr fill:#e75128,color:black;
pr-sc[/&amp;#34;Prometheus OTLP Write Receiver&amp;#34;/]
pr-tsdb[(Prometheus TSDB)]
pr-http[/&amp;#34;Prometheus HTTP&amp;lt;br/&amp;gt;listening on&amp;lt;br/&amp;gt;localhost:9090&amp;#34;/]
pr-sc --&amp;gt; pr-tsdb
pr-tsdb --&amp;gt; pr-http
end
pr-b{{&amp;#34;Browser&amp;lt;br/&amp;gt;Prometheus UI&amp;#34;}}
pr-http ----&amp;gt;|&amp;#34;localhost:9090/graph&amp;#34;| pr-b
subgraph ja[Jaeger]
style ja fill:#60d0e4,color:black;
ja-col[/&amp;#34;Jaeger Collector&amp;lt;br/&amp;gt;listening on&amp;lt;br/&amp;gt;grpc://jaeger:4317&amp;#34;/]
ja-db[(Jaeger DB)]
ja-http[/&amp;#34;Jaeger HTTP&amp;lt;br/&amp;gt;listening on&amp;lt;br/&amp;gt;localhost:16686&amp;#34;/]
ja-col --&amp;gt; ja-db
ja-db --&amp;gt; ja-http
end
subgraph gr[Grafana]
style gr fill:#f8b91e,color:black;
gr-srv[&amp;#34;Grafana Server&amp;#34;]
gr-http[/&amp;#34;Grafana HTTP&amp;lt;br/&amp;gt;listening on&amp;lt;br/&amp;gt;localhost:3000&amp;#34;/]
gr-srv --&amp;gt; gr-http
end
pr-http --&amp;gt; |&amp;#34;localhost:9090/api&amp;#34;| gr-srv
ja-http --&amp;gt; |&amp;#34;localhost:16686/api&amp;#34;| gr-srv
ja-b{{&amp;#34;Browser&amp;lt;br/&amp;gt;Jaeger UI&amp;#34;}}
ja-http ----&amp;gt;|&amp;#34;localhost:16686/search&amp;#34;| ja-b
gr-b{{&amp;#34;Browser&amp;lt;br/&amp;gt;Grafana UI&amp;#34;}}
gr-http --&amp;gt;|&amp;#34;localhost:3000/dashboard&amp;#34;| gr-b
end
end&lt;/pre>
&lt;p>Find the &lt;strong>Protocol Buffer Definitions&lt;/strong> in the &lt;code>/pb/&lt;/code> directory.&lt;/p></description></item><item><title>Docs: Collector</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/OpenTelemetry/Collector/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/OpenTelemetry/Collector/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>OpenTelemetry Collector 提供了一种与供应商无关的接收、处理和导出遥测数据的实现。它消除了运行、操作和维护多个代理/收集器的需要。这具有改进的可扩展性，并支持开源可观测性数据格式（例如 Jaeger、Prometheus、Fluent Bit 等）发送到一个或多个开源或商业后端。&lt;/p>
&lt;p>Collector 会根据配置定时采集数据或被动接收数据以缓存，然后可以主动推送或被动等待拉取。Prometheus 可以配置 static_configs 从 OTel Collector 抓取其缓存的最新数据。&lt;/p></description></item></channel></rss>