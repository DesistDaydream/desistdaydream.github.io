<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Collector on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/OpenTelemetry/Collector/</link><description>Recent content in Collector on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/OpenTelemetry/Collector/index.xml" rel="self" type="application/rss+xml"/><item><title>Collector</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/OpenTelemetry/Collector/Collector/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/OpenTelemetry/Collector/Collector/</guid><description>概述 参考：
GitHub 项目，open-telemetry/opentelemetry-collector 官方文档，Collector OpenTelemetry Collector 提供了一种与供应商无关的 receive(接收)、process(处理) 和 export(导出) 遥测数据的实现。它消除了运行、操作和维护多个代理/收集器的需要。这具有改进的可扩展性，并支持开源可观测性数据格式（例如 Jaeger、Prometheus、Fluent Bit、etc. ）发送到一个或多个开源或商业后端。
Collector 会根据配置定时采集数据或被动接收数据以缓存，然后可以主动推送或被动等待拉取。Prometheus 可以配置 static_configs 从 OTel Collector 抓取其缓存的最新数据。
[!Note] OpenTelemetry Collector 一共有两个项目
open-telemetry/opentelemetry-collector open-telemetry/opentelemetry-collector-contrib contrib 项目中包含了很多基于核心存储库 opentelemetry-collector 之上开发的一些具体实现。可以简单理解为：opentelemetry-collector 是核心、框架，opentelemetry-collector-contrib 是组件的具体实现。
e.g. 实现了 Receiver 组件功能的 filelogreceiver、etc. 代码都在 contrib 项目中，但是 Receivers 组件本身的代码则在 opentelemetry-collector 项目中。
架构 参考：
官方文档，Collector - 架构 OTel Collector 是一种 DataPipeline 的实现程序，通常分为如下几个 Pipeline component(管道组件)
Receivers(接收器) # Receivers 从一个或多个来源收集遥测数据。ta 们可以是基于 pull 或 push 的，并且可以支持一个或多个数据源。 Processors(处理器) # 处理 Receivers 收到的数据 Exporters(导出器) # Exproters 将数据发送到一个或多个后端或目的地。Exproters 可以是基于 pull 或 push 的，并且可以支持一个或多个数据源。 Extensions(扩展) # 可扩展 Collector 的功能以完成与处理遥测数据不直接相关的任务。e.</description></item><item><title>Configuration</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/OpenTelemetry/Collector/Configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/OpenTelemetry/Collector/Configuration/</guid><description>概述 参考：
官方文档，Collector - 配置 顶层字段
receivers(map[STRING]receivers) # 配置 Receivers 组件 processors(map[STRING]processors) # 配置 Processors 组件 exporters(map[STRING]exporters) # 配置 Exporters 组件 extensions(map[STRING]extensions) # 配置 扩展 connectors # TODO service(service) # 配置在处理各类可观测数据时，使用哪些扩展、使用哪些组件 在 otelcol/config.go 可以看到顶层字段的 struct
// Config defines the configuration for the various elements of collector or agent. type Config struct { // Receivers is a map of ComponentID to Receivers. Receivers map[component.ID]component.Config `mapstructure:&amp;#34;receivers&amp;#34;` // Exporters is a map of ComponentID to Exporters.</description></item><item><title>Component</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/OpenTelemetry/Collector/Component/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/OpenTelemetry/Collector/Component/</guid><description>概述 参考：
GitHub 项目，open-telemetry/opentelemetry-collector-contrib Receivers # https://github.com/open-telemetry/opentelemetry-collector/blob/main/receiver
Processors # https://github.com/open-telemetry/opentelemetry-collector/tree/main/processor
Exporters # https://github.com/open-telemetry/opentelemetry-collector/tree/main/exporter
Connector # https://github.com/open-telemetry/opentelemetry-collector/blob/main/connector
Extension # https://github.com/open-telemetry/opentelemetry-collector/blob/main/extension
Receiver Filelog https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/filelogreceiver
从文件读取日志</description></item></channel></rss>