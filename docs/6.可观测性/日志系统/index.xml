<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – 日志系统</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/</link><description>Recent content in 日志系统 on 断念梦</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: 日志系统</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Syslog">Wiki,Syslog&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://datatracker.ietf.org/doc/html/rfc5424">RFC 5424&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="背景">背景&lt;/h2>
&lt;p>在系统上，不管是系统本身还是外部程序，在开始、运行、结束的一整套过程中，都会产生信息，这些信息包括:何时、何地(来源 IP)、何人(什么程序)、发生了什么事情等。i.e.记录系统在什么时候由哪个程序做了什么样的行为时，发生了何种事件等等。而发生的事情又有等级的区别，哪些信息是危险的，哪些信息是标准可以不用关注的等。这些信息就统称为日志(Log)。随着时代发展，操作系统、程序、硬件设备等等都会产生日志，如此众多的日志需要一个标准来进行定义，这个日志标准就是 &lt;strong>Syslog Protocol&lt;/strong>，由 IETF 给定的 RFC 5424 规范来执行。而在 IT 行业，一般也把各个事务所生成的日志称为 syslog。&lt;/p>
&lt;h2 id="日志的生成">日志的生成&lt;/h2>
&lt;p>操作系统、进程和应用程序的编写者完全清楚他们将生成的事件。在某些情况下，生成消息用来说明状态。可以是一段时间一次，也可以由其他方式触发，例如在程序退出时。在其他情况下，消息是由遇到的条件产生的。在这些情况下，不管是状态消息或者包含一些类型的警告都可能被产生。操作系统、进程和应用程序的编写者可能会在详单中确定消息的数量。这些详单中通常包括发出消息的设备，同时包含消息的严重级别。这样，操作员可以有选择地筛选消息，可以更快的定位更加重要的和有处理时间限制的消息，同时可以将状态或消息信息放在文件中，将来阅读他们。其他显示和保存信息的方式也可以存在。&lt;/p>
&lt;p>必须在设备中配置一些规则，这些规则可以告诉设备显示还是转发事件消息。这些规则是十分灵活的。管理员可能希望所有的信息都保存在本地，同时所有高优先级的消息都会转发到另一台设备中。他们可能发现，将某些设备的信息发送到一些或所有用户的设备中，同时显示在系统控制台上是很合适的。然而，管理员决定将事件信息发送到 syslog 采集器中，在采集器中包含了组成设备的信息以及发送的严重级别，同时定义了远程接收器。例如，系统管理员可能想让所有由邮件设备发出的消息被转发到一个特定的事件信息采集器中。管理员还可以让所有内核生成的事件信息被发送到另一台 syslog 接收器中，同时，将内核产生的 critical 严重级别的消息发送到第三台设备中。同时，将显示在系统控制台中的信息 email 给部分用户，同时将他们保存在设备本地磁盘的文件中。反之，可以将本地进程产生的消息显示在控制台中，但不保存也不转发。所有事件的规则都在设备中生成。因为管理员知道 collector 会收集到哪种类型的事件，他们会在 syslog 服务器中配置相应的规则。&lt;/p>
&lt;p>消息的内容因创建者而异。建议将消息按照一定格式编写，这样人们就可以阅读他们。在消息中加入时间戳和发出消息的设备以及进程的标识符是一个很好的建议。但他们都不是必须的。&lt;/p>
&lt;p>假设任何进程和设备都有可能产生事件消息。可能包含没有任何本地存储空间的设备，例如打印机、路由器、集线器、交换机以及无盘工作站。在这种情况下，将事件消息传送到 collector 可能是必要的，以便操作者可以记录并希望看到它们。&lt;/p>
&lt;h2 id="日志的收集">日志的收集&lt;/h2>
&lt;p>日志收集起来，才能方便管理人员进行查看并进行故障排除。如此众多事物的日志如果想要统一管理，就需要一套程序来对所有事物的日志进行收集、处理、保存、过滤、分析等，可以实现该功能的程序有以下几个：&lt;/p>
&lt;ul>
&lt;li>sysLog 程序与 syslog 标准重名，是早期的 Linux 用于处理系统上所有事物日志的程序&lt;/li>
&lt;li>RsysLog 是 sysLog 的升级版&lt;/li>
&lt;li>ELK/EFK 是很重量级，功能很全的 3 款程序的统称
&lt;ul>
&lt;li>Eleasticsearch 是一个存储系统和搜索引擎&lt;/li>
&lt;li>logstash、Fluentd 日志收集&lt;/li>
&lt;li>kibana 日志的前端展示&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="日志的生成与收集的通用流程">日志的生成与收集的通用流程&lt;/h2>
&lt;p>当一个程序生成日志后，一般调用一个 output() 函数，把生成的日志输出到某处，e.g.文件、内存、STDOUT 等&lt;/p>
&lt;p>而日志采集程序一般会调用一个 input() 函数，来从某处获取日志，然后再调用 output() 函数来把日志转发或转存&lt;/p>
&lt;h1 id="the-syslog-protocol系统日志协议--即-syslog-规范">The Syslog Protocol(系统日志协议) # 即 syslog 规范&lt;/h1>
&lt;p>每个程序如果产生的日志格式都不一样，也不便于收集归档，更不便于分类查看，所以需要一个统的规范，这个规范包括可收集哪些程序的日志、日志的格式、级别的定义等&lt;/p>
&lt;h2 id="架构">架构&lt;/h2>
&lt;p>Syslog Protocol 采用分层架构设计，共分为 3 层&lt;/p>
&lt;ul>
&lt;li>&amp;ldquo;syslog content&amp;rdquo; syslog 内容层。is the management information contained in a syslog message.&lt;/li>
&lt;li>&amp;ldquo;syslog application&amp;quot;syslog 应用程序层。处理系统日志消息的生成、解释、路由、存储&lt;/li>
&lt;li>&amp;ldquo;syslog transport&amp;quot;syslog 传输层。将消息放到 puts messages on the wire and takes them off the wire.&lt;/li>
&lt;/ul>
&lt;p>每层架构中都会执行某些类型的功能&lt;/p>
&lt;ul>
&lt;li>originator：发起者。生成将要在消息中携带的 syslog 内容&lt;/li>
&lt;li>collector：采集器。收集 syslog 内容以供进一步分析&lt;/li>
&lt;li>relay：中继。转发消息，接收来自 originators 或其他 relaysd 的消息，并将其发送给 collectors 或其他 relays&lt;/li>
&lt;li>transport sender：传输发送器。将 syslog 消息传递给特定的传输协议&lt;/li>
&lt;li>transport receiver：传输接收器。从特定的传输协议获取 syslog 消息&lt;/li>
&lt;/ul>
&lt;h2 id="syslog-信息的构成格式">syslog 信息的构成格式&lt;/h2>
&lt;p>每个程序在编写的都时候都会定义日志格式，大部分都会遵循“syslog”标准。不同事物的日志格式不尽相同，详情请见相关事物的文档，不过一般情况下，日志内容都应该包含，时间，某物，在哪，做了什么。&lt;/p>
&lt;p>The Syslog Protocol 规定了每条 syslog 信息应该包含如下内容：&lt;/p>
&lt;p>HEADER Structured-Data [MSG] # 头部信息，结构化数据，消息主体&lt;/p>
&lt;ul>
&lt;li>HEADER=PRI VERSION TIMESTAMP HOSTNAME # 优先级、版本、时间出、主机名
&lt;ul>
&lt;li>PRI=Facility*8+Severity # Priority 优先级是一个值，计算方式通过两部分计算，“Facility 设施”与“Severity 严重性”。具体见本章下文具体描述&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Structured-Data= #&lt;/li>
&lt;/ul>
&lt;h3 id="facility设施">Facility(设施)&lt;/h3>
&lt;p>Facility 用来表示产生该信息的硬件设备、协议、系统软件、操作系统等可以产生日志消息的事物类别。由于世界上事物太多，所以最好以类别的方式来对各个事务进行分类，所以使用 &lt;strong>Facility(设施)&lt;/strong> 来描述。比如&lt;code>security/authorization&lt;/code>这个设施中就包含很多关于安全认证的应用程序产生的日志类别。&lt;/p>
&lt;p>每个 Facility 都对应一个值以便进行 PRI 的计算，以下是 RFC5424 中规定的几十类 Facility。其中括号中的数字表示 Facility 对应的 Numerical Code(数字码)。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>kernel messages(0)&lt;/strong> # 内核信息类&lt;/li>
&lt;li>&lt;strong>user-level messages(1)&lt;/strong> # 用户层信息类，比如用户使用 logger 命令来记录日志功能&lt;/li>
&lt;li>&lt;strong>mail system(2)&lt;/strong> # 邮件系统类型&lt;/li>
&lt;li>&lt;strong>system daemons(3)&lt;/strong> # 系统守护进程类，比如 systemd 管理的服务的信息。&lt;/li>
&lt;li>&lt;strong>security/authorization messages(4)&lt;/strong> # 安全与认证信息类，比如 login、ssh、su 等需要账号密码的。&lt;/li>
&lt;li>&lt;strong>messages generated internally by syslogd(5)&lt;/strong> # 由 syslog 相关协议产生的信息类，就是 rsyslog 程序本身的日志信息。&lt;/li>
&lt;li>&lt;strong>line printer subsystem(6)&lt;/strong> # 打印子系统类&lt;/li>
&lt;li>&lt;strong>network news subsystem(7)&lt;/strong> #&lt;/li>
&lt;li>&lt;strong>UUCP subsystem(8)&lt;/strong> #&lt;/li>
&lt;li>&lt;strong>clock daemon(9)&lt;/strong> #&lt;/li>
&lt;li>&lt;strong>security/authorization messages(10)&lt;/strong> #&lt;/li>
&lt;li>&lt;strong>FTP daemon(11)&lt;/strong> # FTP&lt;/li>
&lt;li>&lt;strong>NTP subsystem(12)&lt;/strong> # NTP 子系统&lt;/li>
&lt;li>&lt;strong>log audit(13)&lt;/strong> # 日志审计&lt;/li>
&lt;li>&lt;strong>log alert(14)&lt;/strong> # 日志报警&lt;/li>
&lt;li>&lt;strong>clock daemon(note 2)(15)&lt;/strong> #&lt;/li>
&lt;li>&lt;strong>local use 0~7 (local0~7)(16~23)&lt;/strong> # 留给用户自定义的类别，比如可以把某些程序归为 Local0~7 中的某一类，然后来收集该类的日志&lt;/li>
&lt;/ul>
&lt;h3 id="severity">Severity&lt;/h3>
&lt;p>Severity 用来表示该日志信息的严重程度，也叫日志的级别 Level。为了便于日志管理，需要对日志的内容进行划分，哪些信息是正常的，哪些信息是错误的，哪些信息是警告等等。一般情况分为以下几类，其中第一列数字表示对应的 Severity 的值，第二列为 Severity 的名称以及其所描述的严重程度的具体概念。以下严重程度由高到底进行排列，debug 属于特殊的 Severity&lt;/p>
&lt;ul>
&lt;li>0 Emergency: 系统不可用 system is unusable&lt;/li>
&lt;li>1 Alert: 必须立即采取行动 action must be taken immediately&lt;/li>
&lt;li>2 Critical: 临界状态 critical conditions&lt;/li>
&lt;li>3 Error: 错误状态 error conditions&lt;/li>
&lt;li>4 Warning: 警告状态 warning conditions&lt;/li>
&lt;li>5 Notice: 正常但是值得注意的状态 normal but significant condition&lt;/li>
&lt;li>6 Informational: 信息 informational messages&lt;/li>
&lt;li>7 Debug: debug 级别的信息 debug-level messages&lt;/li>
&lt;/ul>
&lt;h1 id="常见日志级别">常见日志级别&lt;/h1>
&lt;p>Emergency ( 紧急 ): 关于 SYN 攻击、Tear Drop 攻击及 Ping of Death 攻击的消息。
Alert ( 警示 ): 关于需要立即引起注意的情况 ( 例如防火墙攻击和许可密钥到期 ) 的消息。
Critical (关键 ): 关于可能影响设备功能的情况 [例如高可用性 (HA) 状态更改 ]的消息。
Error (错误): 关于可能影响设备功能的错误情况 (例如反病毒扫描失败或与 SSH 服务器通信失败) 的消息。
Warning( 警告 ):关于可能影响设备功能的情况(例如连接到电子邮件服务器失败或认证失败、超时和成功)的消息。
Notification (通知 ): 关于常规事件 ( 包括由 admin 发起的配置更改 ) 的消息。
Information ( 信息 ): 可提供关于系统操作一般信息的消息。
Debugging ( 调试 ): 可提供调试时所用详细信息的消息。&lt;/p></description></item><item><title>Docs: Rsyslog</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/Rsyslog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/Rsyslog/</guid><description/></item><item><title>Docs: LogRotate(日志轮替)</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/LogRotate%E6%97%A5%E5%BF%97%E8%BD%AE%E6%9B%BF/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/LogRotate%E6%97%A5%E5%BF%97%E8%BD%AE%E6%9B%BF/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/b_CWt_ycvnbQG9TXPqRoCQ">公众号-马哥 Linux 运维，[译] 理解 logrotate 实用工具&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>为了防止日志文件持续被写入文件导致过于庞大，那么就需要对日志进行拆分，每隔一段时间就把日志文件保存(打包压缩)起来，然后再创建一个新的空文件继续接收日志，来回循环该过程直到通过配置规定的保留日期，来清除存在过久的日志。通过这种方式来进行日志的归档，分类，清理。这就是 LogRotate 所做的事情。是否进行轮替会有一系列的配置，比如文件的大小达到 N 会轮替一次，每隔多少天轮替一次等等。&lt;/p>
&lt;p>logrotate 只是一个命令行工具，不以守护进程的方式运行在后台，默认情况下，logrotate 命令作为放在 /etc/cron.daily 中的 cron 任务，每天运行一次，该任务会根据设置的策略进行日志文件的检查，其中达到设置中满足轮替配置的日志文件将被轮替。&lt;/p>
&lt;h1 id="关联文件与配置">关联文件与配置&lt;/h1>
&lt;p>/etc/logrotate.conf # logrotate 基本配置文件
/etc/logrotate.d/* # 对基本文件的扩展，该目录下的文件的配置会被包含在基本配置文件中。该目录下一般是一个程序一个文件，每个程序都有自己的日志轮替配置。
/etc/cron.daily/logrotate # 该文件定义了 cron 定时任务执行日志轮替工作的时间
/var/lib/logrotate.status # logrotate 的执行历史&lt;/p>
&lt;h2 id="logrotateconf-配置文件详解">logrotate.conf 配置文件详解&lt;/h2>
&lt;ul>
&lt;li>/PATH/TO/FILES {&amp;hellip;} # 指定想要轮替的日志文件，可以通过＊通配指定多个文件名
&lt;ul>
&lt;li>&lt;strong>copytruncate&lt;/strong> # 把正在输出的日志拷(copy)一份出来，再清空(trucate)原来的日志。&lt;/li>
&lt;li>&lt;strong>compress&lt;/strong> # 压缩日志文件的所有非当前版本&lt;/li>
&lt;li>&lt;strong>dateext&lt;/strong> # 切换后的日志文件会附加上一个短横线和 YYYYMMDD 格式的日期,&lt;/li>
&lt;li>&lt;strong>daily&lt;/strong> # 日志文件将每天轮替一次。其它可用值为 monthly(每月)，weekly(每周)、yearly(每年)&lt;/li>
&lt;li>&lt;strong>delaycompress&lt;/strong> # 在轮替任务完成后，已轮替的归档将使用 gzip 进行压缩&lt;/li>
&lt;li>&lt;strong>errors &amp;lt;EMAIL&amp;gt;&lt;/strong> # 给指定邮箱发送错误通知&lt;/li>
&lt;li>&lt;strong>missingok&lt;/strong> # 如果日志文件丢失，不要显示错误&lt;/li>
&lt;li>&lt;strong>notifempty&lt;/strong> # 如果日志文件为空，则不轮换日志文件&lt;/li>
&lt;li>&lt;strong>olddir &amp;lt;DIR&amp;gt;&lt;/strong> # 指定日志文件的旧版本放在 “DIR”目录 中&lt;/li>
&lt;li>&lt;strong>postrotate 和 endscript&lt;/strong> # 在所有其它指令完成后，postrotate 和 endscript 里面指定的命令将被执行。在这种情况下，rsyslogd 进程将立即再次读取其配置并继续运行。&lt;/li>
&lt;li>&lt;strong>rotate N&lt;/strong> # 共存储 N 个轮替后日志。当产生第 N+1 个轮替后的日志，时间最久的日志将被删除&lt;/li>
&lt;li>&lt;strong>sharedscripts&lt;/strong> # 有多个日志需要轮替时，只执行一次脚本&lt;/li>
&lt;li>&lt;strong>size &amp;lt;LogSize&amp;gt;&lt;/strong> # 在日志文件大小大于 LogSize（例如 100K，4M）时进行轮替&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>配置样例&lt;/p>
&lt;pre>&lt;code>/var/log/nginx/*log {
daily
rotate 10
missingok
notifempty
compress
dateext
sharedscripts
postrotate
/bin/kill -USR1 $(cat /var/run/ngnix/nginx.pid 2&amp;gt;/dev/null) 2&amp;gt;/dev/null
endscript
}
&lt;/code>&lt;/pre>
&lt;p>Note：关于 postrotate
postrotate 后面跟随的是一个命令行，一般是用来重新生成日志文件或者冲定义应用所指向的文件描述符（fd：file description），拿 nginx 和 uwsgi 为例：&lt;/p>
&lt;p>完成日志切割后创建新的 nginx 日志文件，此时该文件的 fd 发生改变&lt;/p>
&lt;p>nginx 中日志输出对应的文件 fd 未同步更新，nginx 会向原 fd 对应的日志文件写数据&lt;/p>
&lt;p>“/bin/kill -USR1 cat /var/run/nginx.pid || true”，更新 nginx 默认日志文件的 fd 到新建的日志文件（该效果等同于 reload）。&lt;/p>
&lt;p>关于/bin/kill -HUP&lt;/p>
&lt;p>&amp;ldquo;/bin/kill -USR1 &lt;code>cat /var/run/nginx.pid&lt;/code> || true&amp;rdquo;&lt;/p>
&lt;p>看到这条命令很容易想到：&lt;/p>
&lt;p>/bin/kill -HUP &lt;code>cat /var/run/nginx.pid 2&amp;gt; /dev/null&lt;/code> 2&amp;gt; /dev/null || true&lt;/p>
&lt;p>这两条命令的大概含义是重载 nginx 服务，目的是重新生成 nginx 的日志文件。&lt;/p>
&lt;h1 id="命令行工具">命令行工具&lt;/h1>
&lt;p>logrotate [OPTIONS&amp;hellip;]&lt;/p>
&lt;p>OPTIONS&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-f&lt;/strong> # 告诉 logrotate 强制执行轮替，即使这不是必要的(i.e.测试轮替的配置文件是否可以正常运行)。 有时，在向 logrotate 配置文件添加新条目之后，或者如果已经手动删除旧的日志文件，这将是有用的，因为将创建新文件，并且日志记录将正常继续。&lt;/li>
&lt;/ul>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>logrotate -f /etc/logrotate.d/keepalived # 使用/etc/logrotate.d/keepalived 配置文件执行轮替&lt;/li>
&lt;/ul>
&lt;p>PS:&lt;/p>
&lt;ul>
&lt;li>遇到不能记录日志的情况：kill -USR1 pid 重发信号量&lt;/li>
&lt;/ul></description></item><item><title>Docs: Journal</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/Journal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/Journal/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://man7.org/linux/man-pages/man8/systemd-journald.service.8.html">Manual,systemd-journald.service(8)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>相关服务说明&lt;/p>
&lt;ul>
&lt;li>systemd-Journald.service # 日志功能通过该 Unit 来实现，是一个用于收集和存储日志数据的系统服务，是系统启动前要启动的第一个进程，Journald 会把所有收集到的信息保存在内存中。&lt;/li>
&lt;li>rsyslog.service # 另一种日志数据持久化，Journald 会把日志信息转发给 rsyslog.service 进行处理和保存，如果没有 Journald，rsyslog 也可以自动生成日志而不用从 journald 去获取&lt;/li>
&lt;li>logrotate # logrotate 会对日志文件进行轮替操作，i.e.把已经非常大的日志文件改名后，创建一个新的日志文件，新产生的日志会保存在新文件中，老文件保留一定时期后会自动清除&lt;/li>
&lt;/ul>
&lt;h1 id="journald-关联文件与配置">Journald 关联文件与配置&lt;/h1>
&lt;p>&lt;strong>/etc/systemd/journal.conf&lt;/strong>&lt;/p>
&lt;h2 id="日志存放路径">日志存放路径&lt;/h2>
&lt;p>&lt;strong>/run/log/journal/${MACHINE-ID}/*&lt;/strong>
&lt;strong>/var/log/journal/${MACHINE-ID}/*&lt;/strong>&lt;/p>
&lt;p>默认情况下，journald 的日志保存在 /run/log/journal 中，系统重启就会清除。通过新建 /var/log/journal 目录，日志会自动记录到这个目录中，并永久存储。&lt;/p>
&lt;p>路径中的 MACHINE-ID 的值，可以通过 &lt;code>cat /etc/machine-id&lt;/code> 命令获取&lt;/p>
&lt;pre>&lt;code>root@lichenhao:/var/log/journal# ls
c14766a3e9ae49a3872fb9b7e2583710
root@lichenhao:/var/log/journal# cat /etc/machine-id
c14766a3e9ae49a3872fb9b7e2583710
&lt;/code>&lt;/pre>
&lt;p>所有 journal 程序生成的日志，都会存在 MACHIN-ID 目录下&lt;/p>
&lt;pre>&lt;code>root@lichenhao:/var/log/journal/c14766a3e9ae49a3872fb9b7e2583710# ll -h
total 153M
drwxr-sr-x+ 2 root systemd-journal 4.0K Feb 21 23:15 ./
drwxr-sr-x+ 3 root systemd-journal 46 Dec 9 17:19 ../
-rw-r-----+ 1 root systemd-journal 40M Dec 28 16:23 'system@aa6b2b3f8f9d46fdb169f9d8aaab56c3-0000000000000001-0005b6048d0b7824.journal'
-rw-r-----+ 1 root systemd-journal 32M Jan 22 12:39 'system@aa6b2b3f8f9d46fdb169f9d8aaab56c3-00000000000080e9-0005b781fc8c48d9.journal'
-rw-r-----+ 1 root systemd-journal 32M Feb 21 23:10 'system@aa6b2b3f8f9d46fdb169f9d8aaab56c3-000000000000df93-0005b975c74c3caf.journal'
-rw-r-----+ 1 root systemd-journal 40M Mar 12 15:25 system.journal
-rw-r-----+ 1 root systemd-journal 8.0M Dec 28 16:23 'user-1000@571778ddc0db463990a85592631fa5e8-0000000000000496-0005b6049323448d.journal'
&lt;/code>&lt;/pre>
&lt;h1 id="journalctl-命令行工具">journalctl 命令行工具&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://man7.org/linux/man-pages/man1/journalctl.1.html">Manual(手册)，journalctl(1)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Systemd 统一管理所有 Unit 的启动日志。带来的好处就是，可以只用 journalctl 一个命令，查看所有日志（内核日志和应用日志）。日志的配置文件是/etc/systemd/journald.conf。journalctl 功能强大，用法非常多。&lt;/p>
&lt;h2 id="syntax语法">Syntax(语法)&lt;/h2>
&lt;p>&lt;strong>journalctl [OPTIONS] [MATCHES]&lt;/strong>&lt;/p>
&lt;h3 id="options">OPTIONS&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>&amp;ndash;disk-usage&lt;/strong> # 显示所有日志文件的磁盘使用情况，包括持久化和临时的日志。&lt;/li>
&lt;li>&lt;strong>-f, &amp;ndash;follow&lt;/strong> # 实时更新&lt;/li>
&lt;li>&lt;strong>&amp;ndash;file=FILE&lt;/strong> # 查看指定文件中的日志信息，FILE 可以使用&amp;quot;?&amp;ldquo;与&amp;rdquo;*&amp;ldquo;进行匹配。常用于查看从别的设备上拷贝过来的日志文件&lt;/li>
&lt;li>&lt;strong>-p UNM&lt;/strong> # 指定要显示的日志级别(NUM 为 0-7 级)&lt;/li>
&lt;li>&lt;strong>-u UNIT&lt;/strong> # 显示指定的 unit 的日志信息&lt;/li>
&lt;/ul>
&lt;p>格式选项&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&amp;ndash;no-pager&lt;/strong> # 在单一页面显示信息，不分页。默认情况下，若日志过长，需要使用 → 方向键翻页才能查看后面的日志内容。&lt;/li>
&lt;li>&lt;strong>-o, &amp;ndash;output=&amp;lt;STRING&amp;gt;&lt;/strong> # 指定输出格式。&lt;code>默认值：short&lt;/code>
&lt;ul>
&lt;li>可用的格式有：json、json-pretty、verbose、export、with-unit 等等&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>过滤选项&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&amp;ndash;output-fields=FIELD&lt;/strong> # 显示指定字段的日志，多个字段以 &lt;code>,&lt;/code> 分割。
&lt;ul>
&lt;li>字段筛选仅对 -o 选项指定的 verbose、export、json、json-pretty、json-sse、json-seq 这几个输出格式有效&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>-S, &amp;ndash;since TIME&lt;/strong> 与**-U, &amp;ndash;unitl TIME** # 设置输出日志信息的开始与结束时间&lt;/li>
&lt;/ul>
&lt;h2 id="example">EXAMPLE&lt;/h2>
&lt;ul>
&lt;li>查看指定用户的日志
&lt;ul>
&lt;li>sudo journalctl _UID=33 &amp;ndash;since today&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>查看指定进程的日志
&lt;ul>
&lt;li>sudo journalctl _PID=1&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>以 JSON 格式仅输出 MESSAGE 与 _CMDLINE 字段的消息
&lt;ul>
&lt;li>journalctl -u docker -ojson-pretty &amp;ndash;output-fields=MESSAGE,_CMDLINE&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>查看指定时间的日志
&lt;ul>
&lt;li>sudo journalctl &amp;ndash;since=&amp;ldquo;2012-10-30 18:17:16&amp;rdquo;&lt;/li>
&lt;li>sudo journalctl &amp;ndash;since &amp;ldquo;20 min ago&amp;rdquo;&lt;/li>
&lt;li>sudo journalctl &amp;ndash;since yesterday&lt;/li>
&lt;li>sudo journalctl &amp;ndash;since 09:00 &amp;ndash;until &amp;ldquo;1 hour ago&amp;rdquo;&lt;/li>
&lt;li>journalctl &amp;ndash;since &amp;ldquo;2018-11-13&amp;rdquo; &amp;ndash;until &amp;ldquo;2018-11-14 03:00&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="查看所有日志默认情况下-只保存本次启动的日志">查看所有日志（默认情况下 ，只保存本次启动的日志）&lt;/h1>
&lt;p>$ sudo journalctl&lt;/p>
&lt;h1 id="查看内核日志不显示应用日志">查看内核日志（不显示应用日志）&lt;/h1>
&lt;p>$ sudo journalctl -k&lt;/p>
&lt;h1 id="查看系统本次启动的日志">查看系统本次启动的日志&lt;/h1>
&lt;p>$ sudo journalctl -b&lt;/p>
&lt;p>$ sudo journalctl -b -0&lt;/p>
&lt;h1 id="查看上一次启动的日志需更改设置">查看上一次启动的日志（需更改设置）&lt;/h1>
&lt;p>$ sudo journalctl -b -1&lt;/p>
&lt;h1 id="显示尾部的最新-10-行日志">显示尾部的最新 10 行日志&lt;/h1>
&lt;p>$ sudo journalctl -n&lt;/p>
&lt;h1 id="显示尾部指定行数的日志">显示尾部指定行数的日志&lt;/h1>
&lt;p>$ sudo journalctl -n 20&lt;/p>
&lt;h1 id="查看指定服务的日志">查看指定服务的日志&lt;/h1>
&lt;p>$ sudo journalctl /usr/lib/systemd/systemd&lt;/p>
&lt;h1 id="查看某个路径的脚本的日志">查看某个路径的脚本的日志&lt;/h1>
&lt;p>$ sudo journalctl /usr/bin/bash&lt;/p>
&lt;h1 id="查看某个-unit-的日志">查看某个 Unit 的日志&lt;/h1>
&lt;p>$ sudo journalctl -u nginx.service&lt;/p>
&lt;p>$ sudo journalctl -u nginx.service &amp;ndash;since today&lt;/p>
&lt;h1 id="实时滚动显示某个-unit-的最新日志">实时滚动显示某个 Unit 的最新日志&lt;/h1>
&lt;p>$ sudo journalctl -u nginx.service -f&lt;/p>
&lt;h1 id="合并显示多个-unit-的日志">合并显示多个 Unit 的日志&lt;/h1>
&lt;p>$ journalctl -u nginx.service -u php-fpm.service &amp;ndash;since today&lt;/p>
&lt;h1 id="查看指定优先级及其以上级别的日志共有-8-级">查看指定优先级（及其以上级别）的日志，共有 8 级&lt;/h1>
&lt;h1 id="0-emerg">0: emerg&lt;/h1>
&lt;h1 id="1-alert">1: alert&lt;/h1>
&lt;h1 id="2-crit">2: crit&lt;/h1>
&lt;h1 id="3-err">3: err&lt;/h1>
&lt;h1 id="4-warning">4: warning&lt;/h1>
&lt;h1 id="5-notice">5: notice&lt;/h1>
&lt;h1 id="6-info">6: info&lt;/h1>
&lt;h1 id="7-debug">7: debug&lt;/h1>
&lt;p>$ sudo journalctl -p err -b&lt;/p>
&lt;h1 id="指定日志文件占据的最大空间">指定日志文件占据的最大空间&lt;/h1>
&lt;p>$ sudo journalctl &amp;ndash;vacuum-size=1G&lt;/p>
&lt;h1 id="指定日志文件保存多久">指定日志文件保存多久&lt;/h1>
&lt;p>$ sudo journalctl &amp;ndash;vacuum-time=1years&lt;/p></description></item><item><title>Docs: ELK _ EFK</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/ELK-_-EFK/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/ELK-_-EFK/</guid><description/></item><item><title>Docs: Loki</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/Loki/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/Loki/</guid><description/></item><item><title>Docs: Log Clients</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/Log-Clients/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/Log-Clients/</guid><description/></item></channel></rss>