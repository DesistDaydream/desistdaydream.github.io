<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – Loki 开发</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/Loki/Loki-%E5%BC%80%E5%8F%91/</link><description>Recent content in Loki 开发 on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/Loki/Loki-%E5%BC%80%E5%8F%91/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Loki 源码分析之日志写入</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/Loki/Loki-%E5%BC%80%E5%8F%91/Loki-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8B%E6%97%A5%E5%BF%97%E5%86%99%E5%85%A5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/Loki/Loki-%E5%BC%80%E5%8F%91/Loki-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8B%E6%97%A5%E5%BF%97%E5%86%99%E5%85%A5/</guid><description>
&lt;p>原文链接：&lt;a href="https://mp.weixin.qq.com/s/9BKZvNANqGJwziygytJ1ag">https://mp.weixin.qq.com/s/9BKZvNANqGJwziygytJ1ag&lt;/a>
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/izup6m/1623123660971-d433fab4-3976-4037-bfd7-8b7b352557c7.webp" alt="">前面我们介绍了 Loki 的一些基本使用配置，但是对 Loki 还是了解不够深入，官方文档写得较为凌乱，而且没有跟上新版本，为了能够对 Loki 有一个更深入的认识，做到有的放矢，这里面我们尝试对 Loki 的源码进行一些简单的分析，由于有很多模块和实现细节，这里我们主要是对核心功能进行分析，希望对大家有所帮助。本文首先对日志的写入过程进行简单分析。&lt;/p>
&lt;h2 id="distributor-push-api">Distributor Push API&lt;/h2>
&lt;p>Promtail 通过 Loki 的 Push API 接口推送日志数据，该接口在初始化 &lt;code>Distributor&lt;/code> 的时候进行初始化，在控制器基础上包装了两个中间件，其中的 &lt;code>HTTPAuthMiddleware&lt;/code> 就是获取租户 ID，如果开启了认证配置，则从 &lt;code>X-Scope-OrgID&lt;/code> 这个请求 Header 头里面获取，如果没有配置则用默认的 &lt;code>fake&lt;/code> 代替。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// pkg/loki/modules.go
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Loki&lt;/span>) &lt;span style="color:#a6e22e">initDistributor&lt;/span>() (&lt;span style="color:#a6e22e">services&lt;/span>.&lt;span style="color:#a6e22e">Service&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">......&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">cfg&lt;/span>.&lt;span style="color:#a6e22e">Target&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#a6e22e">All&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">logproto&lt;/span>.&lt;span style="color:#a6e22e">RegisterPusherServer&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Server&lt;/span>.&lt;span style="color:#a6e22e">GRPC&lt;/span>, &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">distributor&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">pushHandler&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">middleware&lt;/span>.&lt;span style="color:#a6e22e">Merge&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">serverutil&lt;/span>.&lt;span style="color:#a6e22e">RecoveryHTTPMiddleware&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">HTTPAuthMiddleware&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ).&lt;span style="color:#a6e22e">Wrap&lt;/span>(&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">HandlerFunc&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">distributor&lt;/span>.&lt;span style="color:#a6e22e">PushHandler&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Server&lt;/span>.&lt;span style="color:#a6e22e">HTTP&lt;/span>.&lt;span style="color:#a6e22e">Handle&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/api/prom/push&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">pushHandler&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Server&lt;/span>.&lt;span style="color:#a6e22e">HTTP&lt;/span>.&lt;span style="color:#a6e22e">Handle&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/loki/api/v1/push&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">pushHandler&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">distributor&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Push API 处理器实现如下所示，首先通过 &lt;code>ParseRequest&lt;/code> 函数将 Http 请求转换成 &lt;code>logproto.PushRequest&lt;/code>，然后直接调用 Distributor 下面的 &lt;code>Push&lt;/code> 函数来推送日志数据：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// pkg/distributor/http.go
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// PushHandler 从 HTTP body 中读取一个 snappy 压缩的 proto
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">d&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Distributor&lt;/span>) &lt;span style="color:#a6e22e">PushHandler&lt;/span>(&lt;span style="color:#a6e22e">w&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">ResponseWriter&lt;/span>, &lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Request&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">logger&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">util_log&lt;/span>.&lt;span style="color:#a6e22e">WithContext&lt;/span>(&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>(), &lt;span style="color:#a6e22e">util_log&lt;/span>.&lt;span style="color:#a6e22e">Logger&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">userID&lt;/span>, &lt;span style="color:#a6e22e">_&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">user&lt;/span>.&lt;span style="color:#a6e22e">ExtractOrgID&lt;/span>(&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">req&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">ParseRequest&lt;/span>(&lt;span style="color:#a6e22e">logger&lt;/span>, &lt;span style="color:#a6e22e">userID&lt;/span>, &lt;span style="color:#a6e22e">r&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">......&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">d&lt;/span>.&lt;span style="color:#a6e22e">Push&lt;/span>(&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>(), &lt;span style="color:#a6e22e">req&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">......&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">ParseRequest&lt;/span>(&lt;span style="color:#a6e22e">logger&lt;/span> &lt;span style="color:#a6e22e">gokit&lt;/span>.&lt;span style="color:#a6e22e">Logger&lt;/span>, &lt;span style="color:#a6e22e">userID&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Request&lt;/span>) (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">logproto&lt;/span>.&lt;span style="color:#a6e22e">PushRequest&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">body&lt;/span> &lt;span style="color:#a6e22e">lokiutil&lt;/span>.&lt;span style="color:#a6e22e">SizeReader&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">contentEncoding&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">Header&lt;/span>.&lt;span style="color:#a6e22e">Get&lt;/span>(&lt;span style="color:#a6e22e">contentEnc&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">switch&lt;/span> &lt;span style="color:#a6e22e">contentEncoding&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">body&lt;/span> = &lt;span style="color:#a6e22e">lokiutil&lt;/span>.&lt;span style="color:#a6e22e">NewSizeReader&lt;/span>(&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">Body&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#34;snappy&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">body&lt;/span> = &lt;span style="color:#a6e22e">lokiutil&lt;/span>.&lt;span style="color:#a6e22e">NewSizeReader&lt;/span>(&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">Body&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#34;gzip&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">gzipReader&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">gzip&lt;/span>.&lt;span style="color:#a6e22e">NewReader&lt;/span>(&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">Body&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">gzipReader&lt;/span>.&lt;span style="color:#a6e22e">Close&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">body&lt;/span> = &lt;span style="color:#a6e22e">lokiutil&lt;/span>.&lt;span style="color:#a6e22e">NewSizeReader&lt;/span>(&lt;span style="color:#a6e22e">gzipReader&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">default&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Content-Encoding %q not supported&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">contentEncoding&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">contentType&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">Header&lt;/span>.&lt;span style="color:#a6e22e">Get&lt;/span>(&lt;span style="color:#a6e22e">contentType&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">req&lt;/span> &lt;span style="color:#a6e22e">logproto&lt;/span>.&lt;span style="color:#a6e22e">PushRequest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">......&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">switch&lt;/span> &lt;span style="color:#a6e22e">contentType&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">applicationJSON&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">loghttp&lt;/span>.&lt;span style="color:#a6e22e">GetVersion&lt;/span>(&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">RequestURI&lt;/span>) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">loghttp&lt;/span>.&lt;span style="color:#a6e22e">VersionV1&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">unmarshal&lt;/span>.&lt;span style="color:#a6e22e">DecodePushRequest&lt;/span>(&lt;span style="color:#a6e22e">body&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">req&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">unmarshal_legacy&lt;/span>.&lt;span style="color:#a6e22e">DecodePushRequest&lt;/span>(&lt;span style="color:#a6e22e">body&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">req&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">default&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// When no content-type header is set or when it is set to
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// `application/x-protobuf`: expect snappy compression.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">util&lt;/span>.&lt;span style="color:#a6e22e">ParseProtoReader&lt;/span>(&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>(), &lt;span style="color:#a6e22e">body&lt;/span>, int(&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">ContentLength&lt;/span>), &lt;span style="color:#a6e22e">math&lt;/span>.&lt;span style="color:#a6e22e">MaxInt32&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">req&lt;/span>, &lt;span style="color:#a6e22e">util&lt;/span>.&lt;span style="color:#a6e22e">RawSnappy&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">req&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>首先我们先了解下 &lt;code>PushRequest&lt;/code> 的结构，&lt;code>PushRequest&lt;/code> 就是一个 Stream 集合：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// pkg/logproto/logproto.pb.go
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">PushRequest&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Streams&lt;/span> []&lt;span style="color:#a6e22e">Stream&lt;/span> &lt;span style="color:#e6db74">`protobuf:&amp;#34;bytes,1,rep,name=streams,proto3,customtype=Stream&amp;#34; json:&amp;#34;streams&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// pkg/logproto/types.go
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Stream 流包含一个唯一的标签集，作为一个字符串，然后还包含一组日志条目
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Stream&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Labels&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#e6db74">`protobuf:&amp;#34;bytes,1,opt,name=labels,proto3&amp;#34; json:&amp;#34;labels&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Entries&lt;/span> []&lt;span style="color:#a6e22e">Entry&lt;/span> &lt;span style="color:#e6db74">`protobuf:&amp;#34;bytes,2,rep,name=entries,proto3,customtype=EntryAdapter&amp;#34; json:&amp;#34;entries&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Entry 是一个带有时间戳的日志条目
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Entry&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Timestamp&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Time&lt;/span> &lt;span style="color:#e6db74">`protobuf:&amp;#34;bytes,1,opt,name=timestamp,proto3,stdtime&amp;#34; json:&amp;#34;ts&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Line&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#e6db74">`protobuf:&amp;#34;bytes,2,opt,name=line,proto3&amp;#34; json:&amp;#34;line&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/izup6m/1623123848108-3b163096-243e-4dfa-80d7-362897dd111e.webp" alt="image.gif">
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/izup6m/1623123863717-2efd2f66-d6aa-4101-b7f4-cae02a8d65cb.webp" alt="">
然后查看 Distributor 下的 Push 函数实现：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// pkg/distributor/distributor.go
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Push 日志流集合
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">d&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Distributor&lt;/span>) &lt;span style="color:#a6e22e">Push&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>, &lt;span style="color:#a6e22e">req&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">logproto&lt;/span>.&lt;span style="color:#a6e22e">PushRequest&lt;/span>) (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">logproto&lt;/span>.&lt;span style="color:#a6e22e">PushResponse&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 获取租户ID
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">userID&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">user&lt;/span>.&lt;span style="color:#a6e22e">ExtractOrgID&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">......&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 首先把请求平铺成一个样本的列表
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">streams&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make([]&lt;span style="color:#a6e22e">streamTracker&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, len(&lt;span style="color:#a6e22e">req&lt;/span>.&lt;span style="color:#a6e22e">Streams&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">keys&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make([]&lt;span style="color:#66d9ef">uint32&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, len(&lt;span style="color:#a6e22e">req&lt;/span>.&lt;span style="color:#a6e22e">Streams&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">validationErr&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">validatedSamplesSize&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">validatedSamplesCount&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">validationContext&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">d&lt;/span>.&lt;span style="color:#a6e22e">validator&lt;/span>.&lt;span style="color:#a6e22e">getValidationContextFor&lt;/span>(&lt;span style="color:#a6e22e">userID&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">stream&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">req&lt;/span>.&lt;span style="color:#a6e22e">Streams&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 解析日志流标签
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">stream&lt;/span>.&lt;span style="color:#a6e22e">Labels&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">d&lt;/span>.&lt;span style="color:#a6e22e">parseStreamLabels&lt;/span>(&lt;span style="color:#a6e22e">validationContext&lt;/span>, &lt;span style="color:#a6e22e">stream&lt;/span>.&lt;span style="color:#a6e22e">Labels&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">stream&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">......&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">entry&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">stream&lt;/span>.&lt;span style="color:#a6e22e">Entries&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 校验一个日志Entry实体
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">d&lt;/span>.&lt;span style="color:#a6e22e">validator&lt;/span>.&lt;span style="color:#a6e22e">ValidateEntry&lt;/span>(&lt;span style="color:#a6e22e">validationContext&lt;/span>, &lt;span style="color:#a6e22e">stream&lt;/span>.&lt;span style="color:#a6e22e">Labels&lt;/span>, &lt;span style="color:#a6e22e">entry&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">validationErr&lt;/span> = &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">stream&lt;/span>.&lt;span style="color:#a6e22e">Entries&lt;/span>[&lt;span style="color:#a6e22e">n&lt;/span>] = &lt;span style="color:#a6e22e">entry&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">n&lt;/span>&lt;span style="color:#f92672">++&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 校验成功的样本大小和个数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">validatedSamplesSize&lt;/span> &lt;span style="color:#f92672">+=&lt;/span> len(&lt;span style="color:#a6e22e">entry&lt;/span>.&lt;span style="color:#a6e22e">Line&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">validatedSamplesCount&lt;/span>&lt;span style="color:#f92672">++&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 去掉校验失败的实体
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">stream&lt;/span>.&lt;span style="color:#a6e22e">Entries&lt;/span> = &lt;span style="color:#a6e22e">stream&lt;/span>.&lt;span style="color:#a6e22e">Entries&lt;/span>[:&lt;span style="color:#a6e22e">n&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> len(&lt;span style="color:#a6e22e">stream&lt;/span>.&lt;span style="color:#a6e22e">Entries&lt;/span>) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 为当前日志流生成用于hash换的token值
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">keys&lt;/span> = append(&lt;span style="color:#a6e22e">keys&lt;/span>, &lt;span style="color:#a6e22e">util&lt;/span>.&lt;span style="color:#a6e22e">TokenFor&lt;/span>(&lt;span style="color:#a6e22e">userID&lt;/span>, &lt;span style="color:#a6e22e">stream&lt;/span>.&lt;span style="color:#a6e22e">Labels&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">streams&lt;/span> = append(&lt;span style="color:#a6e22e">streams&lt;/span>, &lt;span style="color:#a6e22e">streamTracker&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">stream&lt;/span>: &lt;span style="color:#a6e22e">stream&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> len(&lt;span style="color:#a6e22e">streams&lt;/span>) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">logproto&lt;/span>.&lt;span style="color:#a6e22e">PushResponse&lt;/span>{}, &lt;span style="color:#a6e22e">validationErr&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">now&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Now&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 每个租户有一个限速器，判断可以正常传输的日志大小是否应该被限制
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">d&lt;/span>.&lt;span style="color:#a6e22e">ingestionRateLimiter&lt;/span>.&lt;span style="color:#a6e22e">AllowN&lt;/span>(&lt;span style="color:#a6e22e">now&lt;/span>, &lt;span style="color:#a6e22e">userID&lt;/span>, &lt;span style="color:#a6e22e">validatedSamplesSize&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 返回429表明客户端被限速了
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">......&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">httpgrpc&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">StatusTooManyRequests&lt;/span>, &lt;span style="color:#a6e22e">validation&lt;/span>.&lt;span style="color:#a6e22e">RateLimitedErrorMsg&lt;/span>, int(&lt;span style="color:#a6e22e">d&lt;/span>.&lt;span style="color:#a6e22e">ingestionRateLimiter&lt;/span>.&lt;span style="color:#a6e22e">Limit&lt;/span>(&lt;span style="color:#a6e22e">now&lt;/span>, &lt;span style="color:#a6e22e">userID&lt;/span>)), &lt;span style="color:#a6e22e">validatedSamplesCount&lt;/span>, &lt;span style="color:#a6e22e">validatedSamplesSize&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">maxExpectedReplicationSet&lt;/span> = &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#75715e">// typical replication factor 3 plus one for inactive plus one for luck
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">descs&lt;/span> [&lt;span style="color:#a6e22e">maxExpectedReplicationSet&lt;/span>]&lt;span style="color:#a6e22e">ring&lt;/span>.&lt;span style="color:#a6e22e">InstanceDesc&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">samplesByIngester&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>][]&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">streamTracker&lt;/span>{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ingesterDescs&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#a6e22e">ring&lt;/span>.&lt;span style="color:#a6e22e">InstanceDesc&lt;/span>{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span>, &lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">keys&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ReplicationSet 描述了一个指定的键与哪些 Ingesters 进行对话，以及可以容忍多少个错误
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 根据 label hash 到 hash 环上获取对应的 ingester 节点，一个节点可能有多个对等的 ingester 副本来做 HA
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">replicationSet&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">d&lt;/span>.&lt;span style="color:#a6e22e">ingestersRing&lt;/span>.&lt;span style="color:#a6e22e">Get&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span>, &lt;span style="color:#a6e22e">ring&lt;/span>.&lt;span style="color:#a6e22e">Write&lt;/span>, &lt;span style="color:#a6e22e">descs&lt;/span>[:&lt;span style="color:#ae81ff">0&lt;/span>], &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">......&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 最小成功的实例树
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">streams&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>].&lt;span style="color:#a6e22e">minSuccess&lt;/span> = len(&lt;span style="color:#a6e22e">replicationSet&lt;/span>.&lt;span style="color:#a6e22e">Ingesters&lt;/span>) &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#a6e22e">replicationSet&lt;/span>.&lt;span style="color:#a6e22e">MaxErrors&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 可容忍的最大故障实例数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">streams&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>].&lt;span style="color:#a6e22e">maxFailures&lt;/span> = &lt;span style="color:#a6e22e">replicationSet&lt;/span>.&lt;span style="color:#a6e22e">MaxErrors&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 将 Stream 按对应的 ingester 进行分组
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">ingester&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">replicationSet&lt;/span>.&lt;span style="color:#a6e22e">Ingesters&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 配置每个 ingester 副本对应的日志流数据
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">samplesByIngester&lt;/span>[&lt;span style="color:#a6e22e">ingester&lt;/span>.&lt;span style="color:#a6e22e">Addr&lt;/span>] = append(&lt;span style="color:#a6e22e">samplesByIngester&lt;/span>[&lt;span style="color:#a6e22e">ingester&lt;/span>.&lt;span style="color:#a6e22e">Addr&lt;/span>], &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">streams&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ingesterDescs&lt;/span>[&lt;span style="color:#a6e22e">ingester&lt;/span>.&lt;span style="color:#a6e22e">Addr&lt;/span>] = &lt;span style="color:#a6e22e">ingester&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">tracker&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">pushTracker&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">done&lt;/span>: make(&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span>{}),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">err&lt;/span>: make(&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">tracker&lt;/span>.&lt;span style="color:#a6e22e">samplesPending&lt;/span>.&lt;span style="color:#a6e22e">Store&lt;/span>(int32(len(&lt;span style="color:#a6e22e">streams&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 循环Ingesters
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">ingester&lt;/span>, &lt;span style="color:#a6e22e">samples&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">samplesByIngester&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 让ingester并行处理通过hash环对应的日志流列表
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">ingester&lt;/span> &lt;span style="color:#a6e22e">ring&lt;/span>.&lt;span style="color:#a6e22e">InstanceDesc&lt;/span>, &lt;span style="color:#a6e22e">samples&lt;/span> []&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">streamTracker&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">......&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 将日志流样本数据下发给对应的 ingester 节点
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">d&lt;/span>.&lt;span style="color:#a6e22e">sendSamples&lt;/span>(&lt;span style="color:#a6e22e">localCtx&lt;/span>, &lt;span style="color:#a6e22e">ingester&lt;/span>, &lt;span style="color:#a6e22e">samples&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">tracker&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }(&lt;span style="color:#a6e22e">ingesterDescs&lt;/span>[&lt;span style="color:#a6e22e">ingester&lt;/span>], &lt;span style="color:#a6e22e">samples&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">......&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>Push&lt;/code> 函数的核心就是根据日志流的标签来计算一个 Token 值，根据这个 Token 值去哈希环上获取对应的处理日志的 Ingester 实例，然后并行通过 Ingester 处理日志流数据，通过 &lt;code>sendSamples&lt;/code> 函数为单个 ingester 去发送日志样本数据：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// pkg/distributor/distributor.go
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">d&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Distributor&lt;/span>) &lt;span style="color:#a6e22e">sendSamples&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>, &lt;span style="color:#a6e22e">ingester&lt;/span> &lt;span style="color:#a6e22e">ring&lt;/span>.&lt;span style="color:#a6e22e">InstanceDesc&lt;/span>, &lt;span style="color:#a6e22e">streamTrackers&lt;/span> []&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">streamTracker&lt;/span>, &lt;span style="color:#a6e22e">pushTracker&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">pushTracker&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">d&lt;/span>.&lt;span style="color:#a6e22e">sendSamplesErr&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">ingester&lt;/span>, &lt;span style="color:#a6e22e">streamTrackers&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">......&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">d&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Distributor&lt;/span>) &lt;span style="color:#a6e22e">sendSamplesErr&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>, &lt;span style="color:#a6e22e">ingester&lt;/span> &lt;span style="color:#a6e22e">ring&lt;/span>.&lt;span style="color:#a6e22e">InstanceDesc&lt;/span>, &lt;span style="color:#a6e22e">streams&lt;/span> []&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">streamTracker&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 根据 ingester 地址获取 client
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">d&lt;/span>.&lt;span style="color:#a6e22e">pool&lt;/span>.&lt;span style="color:#a6e22e">GetClientFor&lt;/span>(&lt;span style="color:#a6e22e">ingester&lt;/span>.&lt;span style="color:#a6e22e">Addr&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">......&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 重新构造 PushRequest
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">req&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">logproto&lt;/span>.&lt;span style="color:#a6e22e">PushRequest&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Streams&lt;/span>: make([]&lt;span style="color:#a6e22e">logproto&lt;/span>.&lt;span style="color:#a6e22e">Stream&lt;/span>, len(&lt;span style="color:#a6e22e">streams&lt;/span>)),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span>, &lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">streams&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">req&lt;/span>.&lt;span style="color:#a6e22e">Streams&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>] = &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">stream&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 通过 Ingester 客户端请求数据
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">c&lt;/span>.(&lt;span style="color:#a6e22e">logproto&lt;/span>.&lt;span style="color:#a6e22e">PusherClient&lt;/span>).&lt;span style="color:#a6e22e">Push&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">req&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">......&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="ingester-写入日志">Ingester 写入日志&lt;/h2>
&lt;p>Ingester 客户端中的 Push 函数实际上就是一个 gRPC 服务的客户端：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// pkg/ingester/ingester.go
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Push 实现 logproto.Pusher.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Ingester&lt;/span>) &lt;span style="color:#a6e22e">Push&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>, &lt;span style="color:#a6e22e">req&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">logproto&lt;/span>.&lt;span style="color:#a6e22e">PushRequest&lt;/span>) (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">logproto&lt;/span>.&lt;span style="color:#a6e22e">PushResponse&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 获取租户ID
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">instanceID&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">user&lt;/span>.&lt;span style="color:#a6e22e">ExtractOrgID&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">......&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 根据租户ID获取 instance 对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">instance&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span>.&lt;span style="color:#a6e22e">getOrCreateInstance&lt;/span>(&lt;span style="color:#a6e22e">instanceID&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 直接调用 instance 对象 Push 数据
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">instance&lt;/span>.&lt;span style="color:#a6e22e">Push&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">req&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">logproto&lt;/span>.&lt;span style="color:#a6e22e">PushResponse&lt;/span>{}, &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>instance 下的 Push 函数：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// pkg/ingester/instance.go
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">instance&lt;/span>) &lt;span style="color:#a6e22e">Push&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>, &lt;span style="color:#a6e22e">req&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">logproto&lt;/span>.&lt;span style="color:#a6e22e">PushRequest&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">record&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">recordPool&lt;/span>.&lt;span style="color:#a6e22e">GetRecord&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">record&lt;/span>.&lt;span style="color:#a6e22e">UserID&lt;/span> = &lt;span style="color:#a6e22e">i&lt;/span>.&lt;span style="color:#a6e22e">instanceID&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">recordPool&lt;/span>.&lt;span style="color:#a6e22e">PutRecord&lt;/span>(&lt;span style="color:#a6e22e">record&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">i&lt;/span>.&lt;span style="color:#a6e22e">streamsMtx&lt;/span>.&lt;span style="color:#a6e22e">Lock&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span>.&lt;span style="color:#a6e22e">streamsMtx&lt;/span>.&lt;span style="color:#a6e22e">Unlock&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">appendErr&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">req&lt;/span>.&lt;span style="color:#a6e22e">Streams&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 获取一个 stream 对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">stream&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span>.&lt;span style="color:#a6e22e">getOrCreateStream&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>, &lt;span style="color:#66d9ef">false&lt;/span>, &lt;span style="color:#a6e22e">record&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">appendErr&lt;/span> = &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 真正用于数据处理的是 stream 对象中的 Push 函数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">stream&lt;/span>.&lt;span style="color:#a6e22e">Push&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">Entries&lt;/span>, &lt;span style="color:#a6e22e">record&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">appendErr&lt;/span> = &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">......&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">appendErr&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">instance&lt;/span>) &lt;span style="color:#a6e22e">getOrCreateStream&lt;/span>(&lt;span style="color:#a6e22e">pushReqStream&lt;/span> &lt;span style="color:#a6e22e">logproto&lt;/span>.&lt;span style="color:#a6e22e">Stream&lt;/span>, &lt;span style="color:#a6e22e">lock&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>, &lt;span style="color:#a6e22e">record&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">WALRecord&lt;/span>) (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">stream&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">lock&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">i&lt;/span>.&lt;span style="color:#a6e22e">streamsMtx&lt;/span>.&lt;span style="color:#a6e22e">Lock&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span>.&lt;span style="color:#a6e22e">streamsMtx&lt;/span>.&lt;span style="color:#a6e22e">Unlock&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 如果 streams 中包含当前标签列表对应的 stream 对象，则直接返回
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">stream&lt;/span>, &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span>.&lt;span style="color:#a6e22e">streams&lt;/span>[&lt;span style="color:#a6e22e">pushReqStream&lt;/span>.&lt;span style="color:#a6e22e">Labels&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">ok&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">stream&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// record 只在重放 WAL 时为 nil
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 我们不希望在重放 WAL 后丢掉数据
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 为 instance 降低 stream 流限制
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">record&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 限流器判断
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// AssertMaxStreamsPerUser 确保与当前输入的流数量没有达到限制
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">i&lt;/span>.&lt;span style="color:#a6e22e">limiter&lt;/span>.&lt;span style="color:#a6e22e">AssertMaxStreamsPerUser&lt;/span>(&lt;span style="color:#a6e22e">i&lt;/span>.&lt;span style="color:#a6e22e">instanceID&lt;/span>, len(&lt;span style="color:#a6e22e">i&lt;/span>.&lt;span style="color:#a6e22e">streams&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">......&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 解析日志流标签集
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">labels&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">logql&lt;/span>.&lt;span style="color:#a6e22e">ParseLabels&lt;/span>(&lt;span style="color:#a6e22e">pushReqStream&lt;/span>.&lt;span style="color:#a6e22e">Labels&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">......&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 获取对应标签集的指纹
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">fp&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span>.&lt;span style="color:#a6e22e">getHashForLabels&lt;/span>(&lt;span style="color:#a6e22e">labels&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 重新实例化一个 stream 对象，这里还会维护日志流的倒排索引
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">sortedLabels&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span>.&lt;span style="color:#a6e22e">index&lt;/span>.&lt;span style="color:#a6e22e">Add&lt;/span>(&lt;span style="color:#a6e22e">client&lt;/span>.&lt;span style="color:#a6e22e">FromLabelsToLabelAdapters&lt;/span>(&lt;span style="color:#a6e22e">labels&lt;/span>), &lt;span style="color:#a6e22e">fp&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">stream&lt;/span> = &lt;span style="color:#a6e22e">newStream&lt;/span>(&lt;span style="color:#a6e22e">i&lt;/span>.&lt;span style="color:#a6e22e">cfg&lt;/span>, &lt;span style="color:#a6e22e">fp&lt;/span>, &lt;span style="color:#a6e22e">sortedLabels&lt;/span>, &lt;span style="color:#a6e22e">i&lt;/span>.&lt;span style="color:#a6e22e">metrics&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 将stream设置到streams中去
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span>.&lt;span style="color:#a6e22e">streams&lt;/span>[&lt;span style="color:#a6e22e">pushReqStream&lt;/span>.&lt;span style="color:#a6e22e">Labels&lt;/span>] = &lt;span style="color:#a6e22e">stream&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">i&lt;/span>.&lt;span style="color:#a6e22e">streamsByFP&lt;/span>[&lt;span style="color:#a6e22e">fp&lt;/span>] = &lt;span style="color:#a6e22e">stream&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 当重放 wal 的时候 record 是 nil (我们不希望在重放时重写 wal entries).
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">record&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">record&lt;/span>.&lt;span style="color:#a6e22e">Series&lt;/span> = append(&lt;span style="color:#a6e22e">record&lt;/span>.&lt;span style="color:#a6e22e">Series&lt;/span>, &lt;span style="color:#a6e22e">tsdb_record&lt;/span>.&lt;span style="color:#a6e22e">RefSeries&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Ref&lt;/span>: uint64(&lt;span style="color:#a6e22e">fp&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Labels&lt;/span>: &lt;span style="color:#a6e22e">sortedLabels&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 如果 record 为 nil，这就是一个 WAL 恢复
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span>.&lt;span style="color:#a6e22e">metrics&lt;/span>.&lt;span style="color:#a6e22e">recoveredStreamsTotal&lt;/span>.&lt;span style="color:#a6e22e">Inc&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">......&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">i&lt;/span>.&lt;span style="color:#a6e22e">addTailersToNewStream&lt;/span>(&lt;span style="color:#a6e22e">stream&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">stream&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个里面涉及到 WAL 这一块的设计，比较复杂，我们可以先看 stream 下面的 Push 函数实现，主要就是将收到的 &lt;code>[]Entry&lt;/code> 先 Append 到内存中的 Chunk 流([]chunkDesc) 中：&lt;/p>
&lt;pre>&lt;code>// pkg/ingester/stream.go
func (s *stream) Push(ctx context.Context, entries []logproto.Entry, record *WALRecord) (int, error) {
s.chunkMtx.Lock()
defer s.chunkMtx.Unlock()
var bytesAdded int
prevNumChunks := len(s.chunks)
var lastChunkTimestamp time.Time
// 如果之前的 chunks 列表为空，则创建一个新的 chunk
if prevNumChunks == 0 {
s.chunks = append(s.chunks, chunkDesc{
chunk: s.NewChunk(),
})
chunksCreatedTotal.Inc()
} else {
// 获取最新一个chunk的日志时间戳
_, lastChunkTimestamp = s.chunks[len(s.chunks)-1].chunk.Bounds()
}
var storedEntries []logproto.Entry
failedEntriesWithError := []entryWithError{}
for i := range entries {
// 如果这个日志条目与我们最后 append 的一行的时间戳和内容相匹配，则忽略它
if entries[i].Timestamp.Equal(s.lastLine.ts) &amp;amp;&amp;amp; entries[i].Line == s.lastLine.content {
continue
}
// 最新的一个 chunk
chunk := &amp;amp;s.chunks[len(s.chunks)-1]
// 如果当前chunk已经关闭 或者 已经达到设置的最大 Chunk 大小
if chunk.closed || !chunk.chunk.SpaceFor(&amp;amp;entries[i]) || s.cutChunkForSynchronization(entries[i].Timestamp, lastChunkTimestamp, chunk, s.cfg.SyncPeriod, s.cfg.SyncMinUtilization) {
// 如果 chunk 没有更多的空间，则调用 Close 来以确保 head block 中的数据都被切割和压缩。
err := chunk.chunk.Close()
......
chunk.closed = true
......
// Append 一个新的 Chunk
s.chunks = append(s.chunks, chunkDesc{
chunk: s.NewChunk(),
})
chunk = &amp;amp;s.chunks[len(s.chunks)-1]
lastChunkTimestamp = time.Time{}
}
// 往 chunk 里面 Append 日志数据
if err := chunk.chunk.Append(&amp;amp;entries[i]); err != nil {
failedEntriesWithError = append(failedEntriesWithError, entryWithError{&amp;amp;entries[i], err})
} else {
// 存储添加到 chunk 中的日志数据
storedEntries = append(storedEntries, entries[i])
// 配置最后日志行的数据
lastChunkTimestamp = entries[i].Timestamp
s.lastLine.ts = lastChunkTimestamp
s.lastLine.content = entries[i].Line
// 累计大小
bytesAdded += len(entries[i].Line)
}
chunk.lastUpdated = time.Now()
}
if len(storedEntries) != 0 {
// 当重放 wal 的时候 record 将为 nil（我们不希望在重放的时候重写wal日志条目）
if record != nil {
record.AddEntries(uint64(s.fp), storedEntries...)
}
// 后续是用与tail日志的处理
......
}
......
// 如果新增了chunks
if len(s.chunks) != prevNumChunks {
memoryChunks.Add(float64(len(s.chunks) - prevNumChunks))
}
return bytesAdded, nil
}
&lt;/code>&lt;/pre>
&lt;p>Chunk 其实就是多条日志构成的压缩包，将日志压成 Chunk 的可以直接存入对象存储， 一个 Chunk 到达指定大小之前会不断 Append 新的日志到里面，而在达到大小之后, Chunk 就会关闭等待持久化（强制持久化也会关闭 Chunk, 比如关闭 ingester 实例时就会关闭所有的 Chunk 并持久化）。Chunk 的大小控制很重要：&lt;/p>
&lt;ul>
&lt;li>假如 Chunk 容量过小: 首先是导致压缩效率不高，同时也会增加整体的 Chunk 数量, 导致倒排索引过大，最后, 对象存储的操作次数也会变多, 带来额外的性能开销&lt;/li>
&lt;li>假如 Chunk 过大: 一个 Chunk 的 open 时间会更长, 占用额外的内存空间, 同时, 也增加了丢数据的风险，Chunk 过大也会导致查询读放大&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/izup6m/1623123795284-4ec07b53-1b63-4c24-897e-d4f718a68e42.webp" alt="image.gif">
(图片来源: &lt;a href="https://aleiwu.com/post/grafana-loki/">https://aleiwu.com/post/grafana-loki/)&lt;/a>)
在将日志流追加到 Chunk 中过后，在 Ingester 初始化时会启动两个循环去处理 Chunk 数据，分别从 chunks 数据取出存入优先级队列，另外一个循环定期检查从内存中删除已经持久化过后的数据。
首先是 Ingester 中定义了一个 &lt;code>flushQueues&lt;/code> 属性，是一个优先级队列数组，该队列中存放的是 &lt;code>flushOp&lt;/code>：&lt;/p>
&lt;pre>&lt;code>// pkg/ingester/ingester.go
type Ingester struct {
services.Service
......
// 每个 flush 线程一个队列，指纹用来选择队列
flushQueues []*util.PriorityQueue // 优先级队列数组
flushQueuesDone sync.WaitGroup
......
}
// pkg/ingester/flush.go
// 优先级队列中存放的数据
type flushOp struct {
from model.Time
userID string
fp model.Fingerprint
immediate bool
}
&lt;/code>&lt;/pre>
&lt;p>在初始化 Ingester 的时候会根据传递的 &lt;code>ConcurrentFlushes&lt;/code> 参数来实例化 &lt;code>flushQueues&lt;/code> 的大小：&lt;/p>
&lt;pre>&lt;code>// pkg/ingester/ingester.go
func New(cfg Config, clientConfig client.Config, store ChunkStore, limits *validation.Overrides, configs *runtime.TenantConfigs, registerer prometheus.Registerer) (*Ingester, error) {
......
i := &amp;amp;Ingester{
......
flushQueues: make([]*util.PriorityQueue, cfg.ConcurrentFlushes),
......
}
......
i.Service = services.NewBasicService(i.starting, i.running, i.stopping)
return i, nil
}
&lt;/code>&lt;/pre>
&lt;p>然后通过 &lt;code>services.NewBasicService&lt;/code> 实例化 Service 的时候指定了服务的 Starting、Running、Stopping 3 个状态，在其中的 staring 状态函数中会启动协程去消费优先级队列中的数据&lt;/p>
&lt;pre>&lt;code>// pkg/ingester/ingester.go
func (i *Ingester) starting(ctx context.Context) error {
// todo，如果开启了 WAL 的处理
......
// 初始化 flushQueues
i.InitFlushQueues()
......
// 启动循环检查chunk数据
i.loopDone.Add(1)
go i.loop()
return nil
}
&lt;/code>&lt;/pre>
&lt;p>初始化 flushQueues 实现如下所示，其中 &lt;code>flushQueuesDone&lt;/code> 是一个 WaitGroup，根据配置的并发数量并发执行 &lt;code>flushLoop&lt;/code> 操作：&lt;/p>
&lt;pre>&lt;code>// pkg/ingester/flush.go
func (i *Ingester) InitFlushQueues() {
i.flushQueuesDone.Add(i.cfg.ConcurrentFlushes)
for j := 0; j &amp;lt; i.cfg.ConcurrentFlushes; j++ {
// 为每个协程构造一个优先级队列
i.flushQueues[j] = util.NewPriorityQueue(flushQueueLength)
go i.flushLoop(j)
}
}
&lt;/code>&lt;/pre>
&lt;p>每一个优先级队列循环消费数据：&lt;/p>
&lt;pre>&lt;code>// pkg/ingester/flush.go
func (i *Ingester) flushLoop(j int) {
......
for {
// 从队列中根据优先级取出数据
o := i.flushQueues[j].Dequeue()
if o == nil {
return
}
op := o.(*flushOp)
// 执行真正的刷新用户序列数据
err := i.flushUserSeries(op.userID, op.fp, op.immediate)
......
// 如果退出时刷新失败了，把失败的操作放回到队列中去。
if op.immediate &amp;amp;&amp;amp; err != nil {
op.from = op.from.Add(flushBackoff)
i.flushQueues[j].Enqueue(op)
}
}
}
&lt;/code>&lt;/pre>
&lt;p>刷新用户的序列操作，也就是要保存到存储中去：&lt;/p>
&lt;pre>&lt;code>// pkg/ingester/flush.go
// 根据用户ID刷新用户日志序列
func (i *Ingester) flushUserSeries(userID string, fp model.Fingerprint, immediate bool) error {
instance, ok := i.getInstanceByID(userID)
......
// 根据instance和fp指纹数据获取需要刷新的chunks
chunks, labels, chunkMtx := i.collectChunksToFlush(instance, fp, immediate)
......
// 执行真正的刷新 chunks 操作
err := i.flushChunks(ctx, fp, labels, chunks, chunkMtx)
......
}
// 收集需要刷新的 chunks
func (i *Ingester) collectChunksToFlush(instance *instance, fp model.Fingerprint, immediate bool) ([]*chunkDesc, labels.Labels, *sync.RWMutex) {
instance.streamsMtx.Lock()
// 根据指纹数据获取 stream
stream, ok := instance.streamsByFP[fp]
instance.streamsMtx.Unlock()
if !ok {
return nil, nil, nil
}
var result []*chunkDesc
stream.chunkMtx.Lock()
defer stream.chunkMtx.Unlock()
// 循环所有chunks
for j := range stream.chunks {
// 判断是否应该刷新当前chunk
shouldFlush, reason := i.shouldFlushChunk(&amp;amp;stream.chunks[j])
if immediate || shouldFlush {
// 确保不再对该块进行写操作（如果没有关闭，则设置为关闭状态）
if !stream.chunks[j].closed {
stream.chunks[j].closed = true
}
// 如果该 chunk 还没有被成功刷新，则刷新这个块
if stream.chunks[j].flushed.IsZero() {
result = append(result, &amp;amp;stream.chunks[j])
......
}
}
}
return result, stream.labels, &amp;amp;stream.chunkMtx
}
&lt;/code>&lt;/pre>
&lt;p>下面是判断一个具体的 chunk 是否应该被刷新的逻辑：&lt;/p>
&lt;pre>&lt;code>// pkg/ingester/flush.go
func (i *Ingester) shouldFlushChunk(chunk *chunkDesc) (bool, string) {
// chunk关闭了也应该刷新了
if chunk.closed {
if chunk.synced {
return true, flushReasonSynced
}
return true, flushReasonFull
}
// chunk最后更新的时间超过了配置的 chunk 空闲时间 MaxChunkIdle
if time.Since(chunk.lastUpdated) &amp;gt; i.cfg.MaxChunkIdle {
return true, flushReasonIdle
}
// chunk的边界时间操过了配置的 chunk 最大时间 MaxChunkAge
if from, to := chunk.chunk.Bounds(); to.Sub(from) &amp;gt; i.cfg.MaxChunkAge {
return true, flushReasonMaxAge
}
return false, &amp;quot;&amp;quot;
}
&lt;/code>&lt;/pre>
&lt;p>真正将 chunks 数据刷新保存到存储中是 &lt;code>flushChunks&lt;/code> 函数实现的：&lt;/p>
&lt;pre>&lt;code>// pkg/ingester/flush.go
func (i *Ingester) flushChunks(ctx context.Context, fp model.Fingerprint, labelPairs labels.Labels, cs []*chunkDesc, chunkMtx sync.Locker) error {
......
wireChunks := make([]chunk.Chunk, len(cs))
// 下面的匿名函数用于生成保存到存储中的chunk数据
err = func() error {
chunkMtx.Lock()
defer chunkMtx.Unlock()
for j, c := range cs {
if err := c.chunk.Close(); err != nil {
return err
}
firstTime, lastTime := loki_util.RoundToMilliseconds(c.chunk.Bounds())
ch := chunk.NewChunk(
userID, fp, metric,
chunkenc.NewFacade(c.chunk, i.cfg.BlockSize, i.cfg.TargetChunkSize),
firstTime,
lastTime,
)
chunkSize := c.chunk.BytesSize() + 4*1024 // size + 4kB should be enough room for cortex header
start := time.Now()
if err := ch.EncodeTo(bytes.NewBuffer(make([]byte, 0, chunkSize))); err != nil {
return err
}
wireChunks[j] = ch
}
return nil
}()
// 通过 store 接口保存 chunk 数据
if err := i.store.Put(ctx, wireChunks); err != nil {
return err
}
......
chunkMtx.Lock()
defer chunkMtx.Unlock()
for i, wc := range wireChunks {
// flush 成功，写入刷新时间
cs[i].flushed = time.Now()
// 下是一些监控数据更新
......
}
return nil
}
&lt;/code>&lt;/pre>
&lt;p>chunk 数据被写入到存储后，还有有一个协程会去定时清理本地的这些 chunk 数据，在上面的 Ingester 的 &lt;code>staring&lt;/code> 函数中最后有一个 &lt;code>go i.loop()&lt;/code>，在这个 &lt;code>loop()&lt;/code> 函数中会每隔 &lt;code>FlushCheckPeriod&lt;/code>（默认 30s，可以通过 &lt;code>--ingester.flush-check-period&lt;/code> 进行配置）时间就会去去调用 &lt;code>sweepUsers&lt;/code> 函数进行垃圾回收：&lt;/p>
&lt;pre>&lt;code>// pkg/ingester/ingester.go
func (i *Ingester) loop() {
defer i.loopDone.Done()
flushTicker := time.NewTicker(i.cfg.FlushCheckPeriod)
defer flushTicker.Stop()
for {
select {
case &amp;lt;-flushTicker.C:
i.sweepUsers(false, true)
case &amp;lt;-i.loopQuit:
return
}
}
}
&lt;/code>&lt;/pre>
&lt;p>&lt;code>sweepUsers&lt;/code> 函数用于执行将日志流数据加入到优先级队列中，并对没有序列的用户进行垃圾回收：&lt;/p>
&lt;pre>&lt;code>// pkg/ingester/flush.go
// sweepUsers 定期执行 flush 操作，并对没有序列的用户进行垃圾回收
func (i *Ingester) sweepUsers(immediate, mayRemoveStreams bool) {
instances := i.getInstances()
for _, instance := range instances {
i.sweepInstance(instance, immediate, mayRemoveStreams)
}
}
func (i *Ingester) sweepInstance(instance *instance, immediate, mayRemoveStreams bool) {
instance.streamsMtx.Lock()
defer instance.streamsMtx.Unlock()
for _, stream := range instance.streams {
i.sweepStream(instance, stream, immediate)
i.removeFlushedChunks(instance, stream, mayRemoveStreams)
}
}
// must hold streamsMtx
func (i *Ingester) sweepStream(instance *instance, stream *stream, immediate bool) {
stream.chunkMtx.RLock()
defer stream.chunkMtx.RUnlock()
if len(stream.chunks) == 0 {
return
}
// 最新的chunk
lastChunk := stream.chunks[len(stream.chunks)-1]
// 判断是否应该被flush
shouldFlush, _ := i.shouldFlushChunk(&amp;amp;lastChunk)
// 如果只有一个chunk并且不是强制持久化切最新的chunk还不应该被flush，则直接返回
if len(stream.chunks) == 1 &amp;amp;&amp;amp; !immediate &amp;amp;&amp;amp; !shouldFlush {
return
}
// 根据指纹获取用与处理的优先级队列索引
flushQueueIndex := int(uint64(stream.fp) % uint64(i.cfg.ConcurrentFlushes))
firstTime, _ := stream.chunks[0].chunk.Bounds()
// 加入到优先级队列中去
i.flushQueues[flushQueueIndex].Enqueue(&amp;amp;flushOp{
model.TimeFromUnixNano(firstTime.UnixNano()), instance.instanceID,
stream.fp, immediate,
})
}
// 移除已经flush过后的chunks数据
func (i *Ingester) removeFlushedChunks(instance *instance, stream *stream, mayRemoveStream bool) {
now := time.Now()
stream.chunkMtx.Lock()
defer stream.chunkMtx.Unlock()
prevNumChunks := len(stream.chunks)
var subtracted int
for len(stream.chunks) &amp;gt; 0 {
// 如果chunk还没有被刷新到存储 或者 chunk被刷新到存储到现在的时间还没操过 RetainPeriod（默认15分钟，可以通过--ingester.chunks-retain-period 进行配置）则忽略
if stream.chunks[0].flushed.IsZero() || now.Sub(stream.chunks[0].flushed) &amp;lt; i.cfg.RetainPeriod {
break
}
subtracted += stream.chunks[0].chunk.UncompressedSize()
// 删除引用，以便该块可以被垃圾回收起来
stream.chunks[0].chunk = nil
// 移除chunk
stream.chunks = stream.chunks[1:]
}
......
// 如果stream中的所有chunk都被清空了，则清空该 stream 的相关数据
if mayRemoveStream &amp;amp;&amp;amp; len(stream.chunks) == 0 {
delete(instance.streamsByFP, stream.fp)
delete(instance.streams, stream.labelsString)
instance.index.Delete(stream.labels, stream.fp)
......
}
}
&lt;/code>&lt;/pre>
&lt;p>关于存储或者查询等模块的实现在后文再继续探索，包括 WAL 的实现也较为复杂。&lt;/p></description></item></channel></rss>