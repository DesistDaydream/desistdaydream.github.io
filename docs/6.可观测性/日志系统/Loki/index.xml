<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – Loki</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/Loki/</link><description>Recent content in Loki on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/Loki/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Authentication(认证)</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/Loki/Authentication%E8%AE%A4%E8%AF%81/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/Loki/Authentication%E8%AE%A4%E8%AF%81/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/operations/authentication/">官方文档,运行方式-认证&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Loki 不附带任何包含的身份验证层。运营商应在您的服务之前运行身份验证反向代理，例如使用基本身份验证或 OAuth2 代理的 NGINX。
请注意，在多租户模式下使用 Loki 时，Loki 要求将 HTTP 标头 &lt;code>X-Scope-OrgID&lt;/code>设置为标识租户的字符串。填充此值的责任应由身份验证反向代理处理。阅读&lt;a href="https://grafana.com/docs/loki/latest/operations/multi-tenancy/">多租户&lt;/a>文档以了解更多信息。
有关身份验证 Promtail 的信息，请参阅文档以&lt;a href="https://grafana.com/docs/loki/latest/clients/promtail/configuration/">了解如何配置 Promtail&lt;/a>。&lt;/p></description></item><item><title>Docs: Grafana 面板示例</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/Loki/Grafana-%E9%9D%A2%E6%9D%BF%E7%A4%BA%E4%BE%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/Loki/Grafana-%E9%9D%A2%E6%9D%BF%E7%A4%BA%E4%BE%8B/</guid><description>
&lt;h1 id="heading">&lt;/h1>
&lt;p>&lt;a href="https://mp.weixin.qq.com/s/zcY_8c_7eVcRpKh9IHasLg">如何用 Loki 来绘制 Ingress Nginx 监控大屏&lt;/a>&lt;/p></description></item><item><title>Docs: LogQL</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/Loki/LogQL/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/Loki/LogQL/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/logql/">官方文档，LogQL&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/0dXT0fIreZk6_4ZL4S8lHg">公众号，Loki 查询语言 LogQL 使用&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Log Query Language(日志查询语言，简称 LogQL)&lt;/strong> 受 PromQL 启发，可以看作是分布式的 grep 命令，用来从汇总的日志源筛选日志。LogQL 通过 labels(标签) 和 operators(运算符) 进行过滤。&lt;/p>
&lt;p>&lt;strong>LogQL 查询有两种类型：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Log Queries(日志查询)&lt;/strong> # 根据查询语句返回日志条目，每行是一条日志。
&lt;ul>
&lt;li>基本的日志查询由两部分组成
&lt;ul>
&lt;li>log stream selector # 日志流选择器&lt;/li>
&lt;li>filter expression # 过滤表达式&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Metric Queries(指标查询)&lt;/strong> # 用于扩展日志查询并根据 Log Queries 中的日志计数计算值。通过这种查询语句，可以计算将日志数据量化成指标信息，并且，Promtail 可以通过这种查询语句将指标信息，填充到自己暴露的 Metrics 端点中。&lt;/li>
&lt;/ul>
&lt;p>注意：由于 Loki 的设计，所有 LogQL 查询都必须包含一个日志流选择器&lt;/p>
&lt;p>日志流选择器确定将搜索多少日志流（日志内容的唯一来源，例如文件）。然后，更细粒度的日志流选择器将搜索到的流的数量减少到可管理的数量。这意味着传递给日志流选择器的标签将影响查询执行的相对性能。然后使用过滤器表达式对来自匹配日志流的聚合日志进行分布式 grep。&lt;/p>
&lt;h1 id="log-queries日志查询">Log Queries(日志查询)&lt;/h1>
&lt;p>基本的日志查询由两部分组成：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Log Stream Selector(日志流选择器)&lt;/strong>#&lt;/li>
&lt;li>&lt;strong>Log Pipeline(日志管道)&lt;/strong>#&lt;/li>
&lt;/ul>
&lt;p>注意：由于 Loki 的设计原则，所有的 LogQL 查询必须包含 Log Stream Selector(日志流选择器)
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/xgx9x4/1621837564259-416660f0-81ef-4d14-9086-dbda268daf9f.png" alt="image.png">
&lt;strong>日志流选择器&lt;/strong>决定了有多少日志流将被搜索到，一个更细粒度的日志流选择器将搜索到流的数量减少到一个可管理的数量。所以传递给日志流选择器的标签将影响查询执行的性能。
而日志流选择器后面的&lt;strong>日志管道&lt;/strong>是可选的，日志管道是一组阶段表达式，它们被串联在一起应用于所过滤的日志流，每个表达式都可以过滤、解析和改变日志行内容以及各自的标签。
下面的例子显示了一个完整的日志查询的操作：&lt;/p>
&lt;pre>&lt;code>{container=&amp;quot;query-frontend&amp;quot;,namespace=&amp;quot;loki-dev&amp;quot;} |= &amp;quot;metrics.go&amp;quot; | logfmt | duration &amp;gt; 10s and throughput_mb &amp;lt; 500
&lt;/code>&lt;/pre>
&lt;p>该查询语句由以下几个部分组成：&lt;/p>
&lt;ul>
&lt;li>一个日志流选择器 &lt;code>{container=&amp;quot;query-frontend&amp;quot;,namespace=&amp;quot;loki-dev&amp;quot;}&lt;/code>，用于过滤 &lt;code>loki-dev&lt;/code> 命名空间下面的 &lt;code>query-frontend&lt;/code> 容器的日志&lt;/li>
&lt;li>然后后面跟着一个日志管道 &lt;code>|= &amp;quot;metrics.go&amp;quot; | logfmt | duration &amp;gt; 10s and throughput_mb &amp;lt; 500&lt;/code>，这管道表示将筛选出包含 &lt;code>metrics.go&lt;/code> 这个词的日志，然后解析每一行日志提取更多的表达并进行过滤&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>为了避免转义特色字符，你可以在引用字符串的时候使用单引号，而不是双引号，比如 &lt;code>\w+1&lt;/code> 与 &amp;ldquo;\w+&amp;rdquo; 是相同的。&lt;/p>
&lt;/blockquote>
&lt;h2 id="log-stream-selector日志流选择器">Log Stream Selector(日志流选择器)&lt;/h2>
&lt;p>Log Stream Selector 用于确定查询结果中应该包括哪些日志流。Log Stream Selector 由一个或多个 &lt;strong>Key/Value Paire(键/值对)&lt;/strong> 组成，其中每个键是一个日志标签，每个值是该标签的值。所谓的日志流就是一行一行的日志，组合在一起，形成的一种类似数据流的感觉，从上到下哗哗流水那种感觉~日志流说白了就是日志的集合。stream(流) 的概念如果在 Prometheus 中描述，那就是 series(序列) 的概念。&lt;/p>
&lt;p>Log Stream Selector 中的键值对应包装在一对花括号中，比如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#960050;background-color:#1e0010">job=&lt;/span>&lt;span style="color:#f92672">&amp;#34;kube-system/etcd&amp;#34;&lt;/span>,&lt;span style="color:#960050;background-color:#1e0010">container=&lt;/span>&lt;span style="color:#f92672">&amp;#34;etcd&amp;#34;&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在上面这个例子中，所有具有 job 标签，值为 kube-system/etcd 和 container 标签，值为 etcd 的日志流将被包含在查军结果中。&lt;/p>
&lt;p>这种语法与 Prometheus 标签选择器 的语法一样。参考 PromQL,prometheus 查询语言 文章中 即时向量 章节中的匹配说明&lt;/p>
&lt;p>上面 LogQL 的执行效果如下：
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/xgx9x4/1616129551117-ca616a54-c0f1-48e3-868b-9f43f2138f1a.jpeg" alt="">&lt;/p>
&lt;p>注意：如果想要获取所有日志，使用这种方式：&lt;/p>
&lt;pre>&lt;code>{job=~&amp;quot;..*&amp;quot;}
&lt;/code>&lt;/pre>
&lt;h2 id="log-pipeline日志管道">Log Pipeline(日志管道)&lt;/h2>
&lt;p>Log Pipeline(日志管道) 可以通过 &lt;code>|&lt;/code> 符号附加到 Log Stream Selector(日志流选择器) 语句后面，以便对日志流进一步处理和过滤。&lt;/p>
&lt;p>Log Pipeline 通常由一个或多个 &lt;strong>Expression(表达式)&lt;/strong> 组成，多个表达式以 &lt;code>|&lt;/code> 符号分割。这用法其实跟 Linux 中使用命令并通过管道传递结果给下一个命令的用法一模一样。&lt;/p>
&lt;p>可用的 Log Pipeline 有如下几种&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/logql/#line-filter-expression">&lt;strong>Line Filter Expression&lt;/strong>&lt;/a>&lt;strong>(行过滤表达式)&lt;/strong> # 最基本的过滤方式，通过关键字匹配每一行的日志内容&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/logql/#parser-expression">&lt;strong>Parser Expression&lt;/strong>&lt;/a>&lt;strong>(解析表达式)&lt;/strong># 以指定方式解析日志内容，并将解析结果提取为标签。&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/logql/#label-filter-expression">&lt;strong>Label Filter Expression&lt;/strong>&lt;/a>&lt;strong>(标签过滤表达式)&lt;/strong> #&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/logql/#line-format-expression">&lt;strong>Line Format Expression&lt;/strong>&lt;/a>&lt;strong>(行格式化表达式)&lt;/strong> #&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/logql/#labels-format-expression">&lt;strong>Labels Format Expression&lt;/strong>&lt;/a>&lt;strong>(标签格式化表达式)&lt;/strong> #&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/logql/#unwrapped-range-aggregations">&lt;strong>Unwrap Expression&lt;/strong>&lt;/a>#
&lt;ul>
&lt;li>这是一个特殊的表达式，只能在指标查询中使用。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>其中一些表达式可以改变日志内容和相应的标签，然后可用于进一步 过滤和处理表达式 或 指标查询。&lt;/p>
&lt;h3 id="line-filter-expression行过滤表达式">Line Filter Expression(行过滤表达式)&lt;/h3>
&lt;p>通过 日志流选择器 获取到想要的日志后，可以使用 Line Filter Expression(行过滤表达式) 对这些日志进行过滤。过滤表达式 可以只是文本或正则表达式，比如&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 过滤出日志内容中，包含 timeout 字符串的日志行。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>job&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;kube-system/etcd&amp;#34;&lt;/span>,container&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;etcd&amp;#34;&lt;/span>&lt;span style="color:#f92672">}&lt;/span> |&lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;timeout&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 匹配 {job=&amp;#34;nginx-promtail&amp;#34;} 日志流中所有日志行中，不包含 天津市 字符串的行&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>job&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;nginx-promtail&amp;#34;&lt;/span>&lt;span style="color:#f92672">}&lt;/span> !&lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;天津市&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意：过滤表达式不能单独使用，必须基于 日志流选择器 得出的结果，再进行过滤。示例 LogQL 执行效果如下
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/xgx9x4/1616129550979-719a6401-7dd8-4196-9f8a-78f7b14e80a8.jpeg" alt="">
在上面的示例中， |= 这个符号作为 filter operators(过滤运算符)，来定义过滤行为。可用的 filter operators 有以下几种：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>|=&lt;/strong> # 匹配包含指定字符串的日志行&lt;/li>
&lt;li>&lt;strong>!=&lt;/strong> # 匹配不包含指定字符串的日志行&lt;/li>
&lt;li>&lt;strong>|~&lt;/strong> # 匹配包含正则表达式的日志行&lt;/li>
&lt;li>&lt;strong>!~&lt;/strong># 匹配不包含正则表达式的日志行&lt;/li>
&lt;/ol>
&lt;h3 id="parser-expression解析表达式">Parser Expression(解析表达式)&lt;/h3>
&lt;p>Parser Expression 可以将日志内容解析，并提取标签。然后这些被提取出来的标签，可以使用 Label Filter Expression&lt;/p>
&lt;p>解析器表达式可以解析和提取日志内容中的标签，这些提取的标签可以用于标签过滤表达式进行过滤，或者用于指标聚合。
提取的标签键将由解析器进行自动格式化，以遵循 Prometheus 指标名称的约定（它们只能包含 ASCII 字母和数字，以及下划线和冒号，不能以数字开头）。
例如下面的日志经过管道 &lt;code>| json&lt;/code> 将产生以下 Map 数据：&lt;/p>
&lt;pre>&lt;code>{ &amp;quot;a.b&amp;quot;: { &amp;quot;c&amp;quot;: &amp;quot;d&amp;quot; }, &amp;quot;e&amp;quot;: &amp;quot;f&amp;quot; }
&lt;/code>&lt;/pre>
&lt;p>-&amp;gt;&lt;/p>
&lt;pre>&lt;code>{a_b_c=&amp;quot;d&amp;quot;, e=&amp;quot;f&amp;quot;}
&lt;/code>&lt;/pre>
&lt;p>在出现错误的情况下，例如，如果该行不是预期的格式，该日志行不会被过滤，而是会被添加一个新的 &lt;code>__error__&lt;/code> 标签。
需要注意的是如果一个提取的标签键名已经存在于原始日志流中，那么提取的标签键将以 &lt;code>_extracted&lt;/code> 作为后缀，以区分两个标签，你可以使用一个标签格式化表达式来强行覆盖原始标签，但是如果一个提取的键出现了两次，那么只有最新的标签值会被保留。
目前支持 &lt;code>json&lt;/code>、&lt;code>logfmt&lt;/code>、&lt;code>regexp&lt;/code> 和 &lt;code>unpack&lt;/code> 这几种解析器。
我们应该尽可能使用 &lt;code>json&lt;/code> 和 &lt;code>logfmt&lt;/code> 等预定义的解析器，这会更加容易，而当日志行结构异常时，可以使用 &lt;code>regexp&lt;/code>，可以在同一日志管道中使用多个解析器，这在你解析复杂日志时很有用。&lt;/p>
&lt;h4 id="json">JSON&lt;/h4>
&lt;p>json 解析器有两种模式运行。&lt;/p>
&lt;ul>
&lt;li>
&lt;ol>
&lt;li>没有参数。如果日志行是一个有效的 json 文档，在你的管道中添加 &lt;code>| json&lt;/code> 将提取所有 json 属性作为标签，嵌套的属性会使用 &lt;code>_&lt;/code> 分隔符被平铺到标签键中。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>注意：数组会被忽略。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>例如，使用 json 解析器从以下文件内容中提取标签。&lt;/p>
&lt;p>{
&amp;ldquo;protocol&amp;rdquo;: &amp;ldquo;HTTP/2.0&amp;rdquo;,
&amp;ldquo;servers&amp;rdquo;: [&amp;ldquo;129.0.1.1&amp;rdquo;, &amp;ldquo;10.2.1.3&amp;rdquo;],
&amp;ldquo;request&amp;rdquo;: {
&amp;ldquo;time&amp;rdquo;: &amp;ldquo;6.032&amp;rdquo;,
&amp;ldquo;method&amp;rdquo;: &amp;ldquo;GET&amp;rdquo;,
&amp;ldquo;host&amp;rdquo;: &amp;ldquo;foo.grafana.net&amp;rdquo;,
&amp;ldquo;size&amp;rdquo;: &amp;ldquo;55&amp;rdquo;,
&amp;ldquo;headers&amp;rdquo;: {
&amp;ldquo;Accept&amp;rdquo;: &amp;ldquo;&lt;em>/&lt;/em>&amp;rdquo;,
&amp;ldquo;User-Agent&amp;rdquo;: &amp;ldquo;curl/7.68.0&amp;rdquo;
}
},
&amp;ldquo;response&amp;rdquo;: {
&amp;ldquo;status&amp;rdquo;: 401,
&amp;ldquo;size&amp;rdquo;: &amp;ldquo;228&amp;rdquo;,
&amp;ldquo;latency_seconds&amp;rdquo;: &amp;ldquo;6.031&amp;rdquo;
}
}&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可以得到如下所示的标签列表：&lt;/p>
&lt;p>&amp;ldquo;protocol&amp;rdquo; =&amp;gt; &amp;ldquo;HTTP/2.0&amp;rdquo;
&amp;ldquo;request_time&amp;rdquo; =&amp;gt; &amp;ldquo;6.032&amp;rdquo;
&amp;ldquo;request_method&amp;rdquo; =&amp;gt; &amp;ldquo;GET&amp;rdquo;
&amp;ldquo;request_host&amp;rdquo; =&amp;gt; &amp;ldquo;foo.grafana.net&amp;rdquo;
&amp;ldquo;request_size&amp;rdquo; =&amp;gt; &amp;ldquo;55&amp;rdquo;
&amp;ldquo;response_status&amp;rdquo; =&amp;gt; &amp;ldquo;401&amp;rdquo;
&amp;ldquo;response_size&amp;rdquo; =&amp;gt; &amp;ldquo;228&amp;rdquo;
&amp;ldquo;response_size&amp;rdquo; =&amp;gt; &amp;ldquo;228&amp;rdquo;&lt;/p>
&lt;/li>
&lt;li>
&lt;ol start="2">
&lt;li>带有参数的。在你的管道中使用 &lt;code>|json label=&amp;quot;expression&amp;quot;, another=&amp;quot;expression&amp;quot;&lt;/code> 将只提取指定的 json 字段为标签，你可以用这种方式指定一个或多个表达式，与 &lt;code>label_format&lt;/code> 相同，所有表达式必须加引号。
当前仅支持字段访问（&lt;code>my.field&lt;/code>, &lt;code>my[&amp;quot;field&amp;quot;]&lt;/code>）和数组访问（&lt;code>list[0]&lt;/code>），以及任何级别嵌套中的这些组合（&lt;code>my.list[0][&amp;quot;field&amp;quot;]&lt;/code>）。
例如，&lt;code>|json first_server=&amp;quot;servers[0]&amp;quot;, ua=&amp;quot;request.headers[\&amp;quot;User-Agent\&amp;quot;]&lt;/code> 将从以下日志文件中提取标签：&lt;/li>
&lt;/ol>
&lt;p>{
&amp;ldquo;protocol&amp;rdquo;: &amp;ldquo;HTTP/2.0&amp;rdquo;,
&amp;ldquo;servers&amp;rdquo;: [&amp;ldquo;129.0.1.1&amp;rdquo;, &amp;ldquo;10.2.1.3&amp;rdquo;],
&amp;ldquo;request&amp;rdquo;: {
&amp;ldquo;time&amp;rdquo;: &amp;ldquo;6.032&amp;rdquo;,
&amp;ldquo;method&amp;rdquo;: &amp;ldquo;GET&amp;rdquo;,
&amp;ldquo;host&amp;rdquo;: &amp;ldquo;foo.grafana.net&amp;rdquo;,
&amp;ldquo;size&amp;rdquo;: &amp;ldquo;55&amp;rdquo;,
&amp;ldquo;headers&amp;rdquo;: {
&amp;ldquo;Accept&amp;rdquo;: &amp;ldquo;&lt;em>/&lt;/em>&amp;rdquo;,
&amp;ldquo;User-Agent&amp;rdquo;: &amp;ldquo;curl/7.68.0&amp;rdquo;
}
},
&amp;ldquo;response&amp;rdquo;: {
&amp;ldquo;status&amp;rdquo;: 401,
&amp;ldquo;size&amp;rdquo;: &amp;ldquo;228&amp;rdquo;,
&amp;ldquo;latency_seconds&amp;rdquo;: &amp;ldquo;6.031&amp;rdquo;
}
}&lt;/p>
&lt;/li>
&lt;li>
&lt;p>提取的标签列表为：&lt;/p>
&lt;p>&amp;ldquo;first_server&amp;rdquo; =&amp;gt; &amp;ldquo;129.0.1.1&amp;rdquo;
&amp;ldquo;ua&amp;rdquo; =&amp;gt; &amp;ldquo;curl/7.68.0&amp;rdquo;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果表达式返回一个数组或对象，它将以 json 格式分配给标签。例如，&lt;code>|json server_list=&amp;quot;services&amp;quot;, headers=&amp;quot;request.headers&lt;/code> 将提取到如下标签：&lt;/p>
&lt;p>&amp;ldquo;server_list&amp;rdquo; =&amp;gt; &lt;code>[&amp;quot;129.0.1.1&amp;quot;,&amp;quot;10.2.1.3&amp;quot;]&lt;/code>
&amp;ldquo;headers&amp;rdquo; =&amp;gt; &lt;code>{&amp;quot;Accept&amp;quot;: &amp;quot;*/*&amp;quot;, &amp;quot;User-Agent&amp;quot;: &amp;quot;curl/7.68.0&amp;quot;}&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="logfmt">logfmt&lt;/h4>
&lt;p>&lt;code>logfmt&lt;/code> 解析器可以通过使用 &lt;code>|logfmt&lt;/code> 来添加，它将从 logfmt 格式的日志行中提前所有的键和值。
例如，下面的日志行数据：&lt;/p>
&lt;pre>&lt;code>at=info method=GET path=/ host=grafana.net fwd=&amp;quot;124.133.124.161&amp;quot; service=8ms status=200
&lt;/code>&lt;/pre>
&lt;p>将提取得到如下所示的标签：&lt;/p>
&lt;pre>&lt;code>&amp;quot;at&amp;quot; =&amp;gt; &amp;quot;info&amp;quot;
&amp;quot;method&amp;quot; =&amp;gt; &amp;quot;GET&amp;quot;
&amp;quot;path&amp;quot; =&amp;gt; &amp;quot;/&amp;quot;
&amp;quot;host&amp;quot; =&amp;gt; &amp;quot;grafana.net&amp;quot;
&amp;quot;fwd&amp;quot; =&amp;gt; &amp;quot;124.133.124.161&amp;quot;
&amp;quot;service&amp;quot; =&amp;gt; &amp;quot;8ms&amp;quot;
&amp;quot;status&amp;quot; =&amp;gt; &amp;quot;200&amp;quot;
&lt;/code>&lt;/pre>
&lt;h4 id="regexp">regexp&lt;/h4>
&lt;p>与 &lt;code>logfmt&lt;/code> 和 &lt;code>json&lt;/code>（它们隐式提取所有值且不需要参数）不同，&lt;code>regexp&lt;/code> 解析器采用单个参数 &lt;code>| regexp &amp;quot;&amp;lt;re&amp;gt;&amp;quot;&lt;/code> 的格式，其参数是使用 Golang RE2 语法的正则表达式。
正则表达式必须包含至少一个命名的子匹配（例如&lt;code>(?P&amp;lt;name&amp;gt;re)&lt;/code>），每个子匹配项都会提取一个不同的标签。
例如，解析器 &lt;code>| regexp &amp;quot;(?P&amp;lt;method&amp;gt;\\w+) (?P&amp;lt;path&amp;gt;[\\w|/]+) \\((?P&amp;lt;status&amp;gt;\\d+?)\\) (?P&amp;lt;duration&amp;gt;.*)&amp;quot;&lt;/code> 将从以下行中提取标签：&lt;/p>
&lt;pre>&lt;code>POST /api/prom/api/v1/query_range (200) 1.5s
&lt;/code>&lt;/pre>
&lt;p>提取的标签为：&lt;/p>
&lt;pre>&lt;code>&amp;quot;method&amp;quot; =&amp;gt; &amp;quot;POST&amp;quot;
&amp;quot;path&amp;quot; =&amp;gt; &amp;quot;/api/prom/api/v1/query_range&amp;quot;
&amp;quot;status&amp;quot; =&amp;gt; &amp;quot;200&amp;quot;
&amp;quot;duration&amp;quot; =&amp;gt; &amp;quot;1.5s&amp;quot;
&lt;/code>&lt;/pre>
&lt;h4 id="unpack">unpack&lt;/h4>
&lt;p>&lt;code>unpack&lt;/code> 解析器将解析 json 日志行，并通过打包阶段解开所有嵌入的标签，一个特殊的属性 &lt;code>_entry&lt;/code> 也将被用来替换原来的日志行。
例如，使用 &lt;code>| unpack&lt;/code> 解析器，可以得到如下所示的标签：&lt;/p>
&lt;pre>&lt;code>{
&amp;quot;container&amp;quot;: &amp;quot;myapp&amp;quot;,
&amp;quot;pod&amp;quot;: &amp;quot;pod-3223f&amp;quot;,
&amp;quot;_entry&amp;quot;: &amp;quot;original log message&amp;quot;
}
&lt;/code>&lt;/pre>
&lt;p>允许提取 &lt;code>container&lt;/code> 和 &lt;code>pod&lt;/code> 标签以及原始日志信息作为新的日志行。&lt;/p>
&lt;blockquote>
&lt;p>如果原始嵌入的日志行是特定的格式，你可以将 unpack 与 json 解析器（或其他解析器）相结合使用。&lt;/p>
&lt;/blockquote>
&lt;h3 id="label-filter-expressionhttpsgrafanacomdocslokilatestlogqllabel-filter-expression标签过滤表达式">&lt;a href="https://grafana.com/docs/loki/latest/logql/#label-filter-expression">Label Filter Expression&lt;/a>(标签过滤表达式)&lt;/h3>
&lt;p>标签过滤表达式允许使用其原始和提取的标签来过滤日志行，它可以包含多个谓词。
一个谓词包含一个标签标识符、操作符和用于比较标签的值。
例如 &lt;code>cluster=&amp;quot;namespace&amp;quot;&lt;/code> 其中的 &lt;code>cluster&lt;/code> 是标签标识符，操作符是 &lt;code>=&lt;/code>，值是&lt;code>&amp;quot;namespace&amp;quot;&lt;/code>。
LogQL 支持从查询输入中自动推断出的多种值类型：&lt;/p>
&lt;ul>
&lt;li>&lt;code>String（字符串）&lt;/code>用双引号或反引号引起来，例如&lt;code>&amp;quot;200&amp;quot;&lt;/code>或&lt;code>us-central1&lt;/code>。&lt;/li>
&lt;li>&lt;code>Duration（时间）&lt;/code>是一串十进制数字，每个数字都有可选的数和单位后缀，如 &lt;code>&amp;quot;300ms&amp;quot;&lt;/code>、&lt;code>&amp;quot;1.5h&amp;quot;&lt;/code> 或 &lt;code>&amp;quot;2h45m&amp;quot;&lt;/code>，有效的时间单位是 &lt;code>&amp;quot;ns&amp;quot;&lt;/code>、&lt;code>&amp;quot;us&amp;quot;&lt;/code>（或 &lt;code>&amp;quot;µs&amp;quot;&lt;/code>）、&lt;code>&amp;quot;ms&amp;quot;&lt;/code>、&lt;code>&amp;quot;s&amp;quot;&lt;/code>、&lt;code>&amp;quot;m&amp;quot;&lt;/code>、&lt;code>&amp;quot;h&amp;quot;&lt;/code>。&lt;/li>
&lt;li>&lt;code>Number（数字）&lt;/code>是浮点数（64 位），如 250、89.923。&lt;/li>
&lt;li>&lt;code>Bytes（字节）&lt;/code>是一串十进制数字，每个数字都有可选的数和单位后缀，如 &lt;code>&amp;quot;42MB&amp;quot;&lt;/code>、&lt;code>&amp;quot;1.5Kib&amp;quot;&lt;/code> 或 &lt;code>&amp;quot;20b&amp;quot;&lt;/code>，有效的字节单位是 &lt;code>&amp;quot;b&amp;quot;&lt;/code>、&lt;code>&amp;quot;kib&amp;quot;&lt;/code>、&lt;code>&amp;quot;kb&amp;quot;&lt;/code>、&lt;code>&amp;quot;mib&amp;quot;&lt;/code>、&lt;code>&amp;quot;mb&amp;quot;&lt;/code>、&lt;code>&amp;quot;gib&amp;quot;&lt;/code>、&lt;code>&amp;quot;gb&amp;quot;&lt;/code>、&lt;code>&amp;quot;tib&amp;quot;&lt;/code>、&lt;code>&amp;quot;tb&amp;quot;&lt;/code>、&lt;code>&amp;quot;pib&amp;quot;&lt;/code>、&lt;code>&amp;quot;bb&amp;quot;&lt;/code>、&lt;code>&amp;quot;eb&amp;quot;&lt;/code>。&lt;/li>
&lt;/ul>
&lt;p>字符串类型的工作方式与 Prometheus 标签匹配器在日志流选择器中使用的方式完全一样，这意味着你可以使用同样的操作符（&lt;code>=&lt;/code>、&lt;code>!=&lt;/code>、&lt;code>=~&lt;/code>、&lt;code>!~&lt;/code>）。
使用 Duration、Number 和 Bytes 将在比较前转换标签值，并支持以下比较器。&lt;/p>
&lt;ul>
&lt;li>&lt;code>==&lt;/code> 或 &lt;code>=&lt;/code> 相等比较&lt;/li>
&lt;li>&lt;code>!=&lt;/code> 不等于比较&lt;/li>
&lt;li>&lt;code>&amp;gt;&lt;/code> 和 &lt;code>&amp;gt;=&lt;/code> 用于大于或大于等于比较&lt;/li>
&lt;li>&lt;code>&amp;lt;&lt;/code> 和 &lt;code>&amp;lt;=&lt;/code> 用于小于或小于等于比较&lt;/li>
&lt;/ul>
&lt;p>例如 &lt;code>logfmt | duration &amp;gt; 1m and bytes_consumed &amp;gt; 20MB&lt;/code> 过滤表达式。
如果标签值的转换失败，日志行就不会被过滤，而会添加一个 &lt;code>__error__&lt;/code> 标签，要过滤这些错误，请看管道错误部分。
你可以使用 &lt;code>and&lt;/code>和 &lt;code>or&lt;/code> 来连接多个谓词，它们分别表示&lt;strong>且&lt;/strong>和&lt;strong>或&lt;/strong>的二进制操作，&lt;code>and&lt;/code> 可以用逗号、空格或其他管道来表示，标签过滤器可以放在日志管道的任何地方。
以下所有的表达式都是等价的:&lt;/p>
&lt;pre>&lt;code>| duration &amp;gt;= 20ms or size == 20kb and method!~&amp;quot;2..&amp;quot;
| duration &amp;gt;= 20ms or size == 20kb | method!~&amp;quot;2..&amp;quot;
| duration &amp;gt;= 20ms or size == 20kb,method!~&amp;quot;2..&amp;quot;
| duration &amp;gt;= 20ms or size == 20kb method!~&amp;quot;2..&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>默认情况下，多个谓词的优先级是从右到左，你可以用圆括号包装谓词，强制使用从左到右的不同优先级。
例如，以下内容是等价的：&lt;/p>
&lt;pre>&lt;code>| duration &amp;gt;= 20ms or method=&amp;quot;GET&amp;quot; and size &amp;lt;= 20KB
| ((duration &amp;gt;= 20ms or method=&amp;quot;GET&amp;quot;) and size &amp;lt;= 20KB)
&lt;/code>&lt;/pre>
&lt;p>它将首先评估 &lt;code>duration&amp;gt;=20ms or method=&amp;quot;GET&amp;quot;&lt;/code>，要首先评估 &lt;code>method=&amp;quot;GET&amp;quot; and size&amp;lt;=20KB&lt;/code>，请确保使用适当的括号，如下所示。&lt;/p>
&lt;pre>&lt;code>| duration &amp;gt;= 20ms or (method=&amp;quot;GET&amp;quot; and size &amp;lt;= 20KB)
&lt;/code>&lt;/pre>
&lt;h3 id="line-format-expressionhttpsgrafanacomdocslokilatestlogqlline-format-expression行格式化表达式">&lt;a href="https://grafana.com/docs/loki/latest/logql/#line-format-expression">Line Format Expression&lt;/a>(行格式化表达式)&lt;/h3>
&lt;p>日志行格式化表达式可以通过使用 Golang 的 &lt;code>text/template&lt;/code> 模板格式重写日志行的内容，它需要一个字符串参数 &lt;code>| line_format &amp;quot;{{.label_name}}&amp;quot;&lt;/code> 作为模板格式，所有的标签都是注入模板的变量，可以用 &lt;code>{{.label_name}}&lt;/code> 的符号来使用。
例如，下面的表达式：&lt;/p>
&lt;pre>&lt;code>{container=&amp;quot;frontend&amp;quot;} | logfmt | line_format &amp;quot;{{.query}} {{.duration}}&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>将提取并重写日志行，只包含 &lt;code>query&lt;/code> 和请求的 &lt;code>duration&lt;/code>。你可以为模板使用双引号字符串或反引号 &lt;code>{{.label_name}}&lt;/code> 来避免转义特殊字符。
此外 &lt;code>line_format&lt;/code> 也支持数学函数，例如：
如果我们有以下标签 &lt;code>ip=1.1.1.1&lt;/code>, &lt;code>status=200&lt;/code> 和 &lt;code>duration=3000(ms)&lt;/code>, 我们可以用 &lt;code>duration&lt;/code> 除以 1000 得到以秒为单位的值：&lt;/p>
&lt;pre>&lt;code>{container=&amp;quot;frontend&amp;quot;} | logfmt | line_format &amp;quot;{{.ip}} {{.status}} {{div .duration 1000}}&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>上面的查询将得到的日志行内容为&lt;code>1.1.1.1 200 3&lt;/code>。&lt;/p>
&lt;h3 id="labels-format-expressionhttpsgrafanacomdocslokilatestlogqllabels-format-expression标签格式化表达式">&lt;a href="https://grafana.com/docs/loki/latest/logql/#labels-format-expression">Labels Format Expression&lt;/a>(标签格式化表达式)&lt;/h3>
&lt;p>&lt;code>| label_format&lt;/code>表达式可以重命名、修改或添加标签，它以逗号分隔的操作列表作为参数，可以同时进行多个操作。
当两边都是标签标识符时，例如 &lt;code>dst=src&lt;/code>，该操作将把 &lt;code>src&lt;/code> 标签重命名为 &lt;code>dst&lt;/code>。
左边也可以是一个模板字符串，例如 &lt;code>dst=&amp;quot;{{.status}} {{.query}}&amp;quot;&lt;/code>，在这种情况下，&lt;code>dst&lt;/code> 标签值会被 Golang 模板执行结果所取代，这与 &lt;code>| line_format&lt;/code> 表达式是同一个模板引擎，这意味着标签可以作为变量使用，也可以使用同样的函数列表。
在上面两种情况下，如果目标标签不存在，那么就会创建一个新的标签。
重命名形式 &lt;code>dst=src&lt;/code> 会在将 &lt;code>src&lt;/code> 标签重新映射到 &lt;code>dst&lt;/code> 标签后将其删除，然而，模板形式将保留引用的标签，例如 &lt;code>dst=&amp;quot;{{.src}}&amp;quot;&lt;/code> 的结果是 &lt;code>dst&lt;/code> 和 &lt;code>src&lt;/code> 都有相同的值。&lt;/p>
&lt;blockquote>
&lt;p>一个标签名称在每个表达式中只能出现一次，这意味着 &lt;code>| label_format foo=bar,foo=&amp;quot;new&amp;quot;&lt;/code> 是不允许的，但你可以使用两个表达式来达到预期效果，比如 &lt;code>| label_format foo=bar | label_format foo=&amp;quot;new&amp;quot;&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;h2 id="查询示例">查询示例&lt;/h2>
&lt;p>&lt;strong>多重过滤&lt;/strong>
过滤应该首先使用标签匹配器，然后是行过滤器，最后使用标签过滤器：&lt;/p>
&lt;pre>&lt;code>{cluster=&amp;quot;ops-tools1&amp;quot;, namespace=&amp;quot;loki-dev&amp;quot;, job=&amp;quot;loki-dev/query-frontend&amp;quot;} |= &amp;quot;metrics.go&amp;quot; !=&amp;quot;out of order&amp;quot; | logfmt | duration &amp;gt; 30s or status_code!=&amp;quot;200&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>多解析器&lt;/strong>
比如要提取以下格式日志行的方法和路径：&lt;/p>
&lt;pre>&lt;code>level=debug ts=2020-10-02T10:10:42.092268913Z caller=logging.go:66 traceID=a9d4d8a928d8db1 msg=&amp;quot;POST /api/prom/api/v1/query_range (200) 1.5s&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>你可以像下面这样使用多个解析器：&lt;/p>
&lt;pre>&lt;code>{job=&amp;quot;cortex-ops/query-frontend&amp;quot;} | logfmt | line_format &amp;quot;{{.msg}}&amp;quot; | regexp &amp;quot;(?P&amp;lt;method&amp;gt;\\w+) (?P&amp;lt;path&amp;gt;[\\w|/]+) \\((?P&amp;lt;status&amp;gt;\\d+?)\\) (?P&amp;lt;duration&amp;gt;.*)&amp;quot;`
&lt;/code>&lt;/pre>
&lt;p>首先通过 &lt;code>logfmt&lt;/code> 解析器提取日志中的数据，然后使用 &lt;code>| line_format&lt;/code> 重新将日志格式化为 &lt;code>POST /api/prom/api/v1/query_range (200) 1.5s&lt;/code>，然后紧接着就是用 &lt;code>regexp&lt;/code> 解析器通过正则表达式来匹配提前标签了。
&lt;strong>格式化&lt;/strong>
下面的查询显示了如何重新格式化日志行，使其更容易阅读。&lt;/p>
&lt;pre>&lt;code>{cluster=&amp;quot;ops-tools1&amp;quot;, name=&amp;quot;querier&amp;quot;, namespace=&amp;quot;loki-dev&amp;quot;}
|= &amp;quot;metrics.go&amp;quot;
|!= &amp;quot;loki-canary&amp;quot;
| logfmt
| query != &amp;quot;&amp;quot;
| label_format query=&amp;quot;{{ Replace .query \&amp;quot;\\n\&amp;quot; \&amp;quot;\&amp;quot; -1 }}&amp;quot;
| line_format &amp;quot;{{ .ts}}\t{{.duration}}\ttraceID = {{.traceID}}\t{{ printf \&amp;quot;%-100.100s\&amp;quot; .query }} &amp;quot;
&lt;/code>&lt;/pre>
&lt;p>其中的 &lt;code>label_format&lt;/code> 用于格式化查询，而 &lt;code>line_format&lt;/code> 则用于减少信息量并创建一个表格化的输出。比如对于下面的日志行数据：&lt;/p>
&lt;pre>&lt;code>level=info ts=2020-10-23T20:32:18.094668233Z caller=metrics.go:81 org_id=29 traceID=1980d41501b57b68 latency=fast query=&amp;quot;{cluster=\&amp;quot;ops-tools1\&amp;quot;, job=\&amp;quot;cortex-ops/query-frontend\&amp;quot;} |= \&amp;quot;query_range\&amp;quot;&amp;quot; query_type=filter range_type=range length=15m0s step=7s duration=650.22401ms status=200 throughput_mb=1.529717 total_bytes_mb=0.994659
level=info ts=2020-10-23T20:32:18.068866235Z caller=metrics.go:81 org_id=29 traceID=1980d41501b57b68 latency=fast query=&amp;quot;{cluster=\&amp;quot;ops-tools1\&amp;quot;, job=\&amp;quot;cortex-ops/query-frontend\&amp;quot;} |= \&amp;quot;query_range\&amp;quot;&amp;quot; query_type=filter range_type=range length=15m0s step=7s duration=624.008132ms status=200 throughput_mb=0.693449 total_bytes_mb=0.432718
&lt;/code>&lt;/pre>
&lt;p>经过上面的查询过后可以得到如下所示的结果：&lt;/p>
&lt;pre>&lt;code>2020-10-23T20:32:18.094668233Z 650.22401ms traceID = 1980d41501b57b68 {cluster=&amp;quot;ops-tools1&amp;quot;, job=&amp;quot;cortex-ops/query-frontend&amp;quot;} |= &amp;quot;query_range&amp;quot;
2020-10-23T20:32:18.068866235Z 624.008132ms traceID = 1980d41501b57b68 {cluster=&amp;quot;ops-tool
&lt;/code>&lt;/pre>
&lt;h1 id="metric-queries指标查询">Metric Queries(指标查询)&lt;/h1>
&lt;p>LogQL 还可以通过 &lt;strong>Functions(函数)&lt;/strong> 来对每个日志流进行计算，就是将日志流中的日志计数，并根据技术进行一些查询，这种查询方式与 PromQL 的指标查询类似。&lt;/p>
&lt;p>指标查询可用于计算诸如错误消息率或最近 3 个小时内日志数量最多的 N 个日志源之类的信息。&lt;/p>
&lt;h2 id="范围向量聚合">范围向量聚合&lt;/h2>
&lt;p>LogQL 与 Prometheus 具有相同的范围向量概念，不同之处在于所选的样本范围包括每个日志&lt;/p>
&lt;p>常用函数主要是如下 4 个：&lt;/p>
&lt;ul>
&lt;li>&lt;code>rate&lt;/code>: 计算每秒的日志条目&lt;/li>
&lt;li>&lt;code>count_over_time&lt;/code>: 对指定范围内的每个日志流的条目进行计数&lt;/li>
&lt;li>&lt;code>bytes_rate&lt;/code>: 计算日志流每秒的字节数&lt;/li>
&lt;li>&lt;code>bytes_over_time&lt;/code>: 对指定范围内的每个日志流的使用的字节数&lt;/li>
&lt;/ul>
&lt;p>比如计算 nginx 的 qps：&lt;/p>
&lt;pre>&lt;code>rate({filename=&amp;quot;/var/log/nginx/access.log&amp;quot;}[5m]))
&lt;/code>&lt;/pre>
&lt;p>计算 kernel 过去 5 分钟发生 oom 的次数：&lt;/p>
&lt;pre>&lt;code>count_over_time({filename=&amp;quot;/var/log/message&amp;quot;} |~ &amp;quot;oom_kill_process&amp;quot; [5m]))
&lt;/code>&lt;/pre>
&lt;h2 id="聚合运算符">聚合运算符&lt;/h2>
&lt;p>与 PromQL 一样，LogQL 支持内置聚合运算符的一个子集，可用于聚合单个向量的元素，从而产生一个具有更少元素但具有集合值的新向量：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>sum: Calculate sum over labels&lt;/p>
&lt;/li>
&lt;li>
&lt;p>min: Select minimum over labels&lt;/p>
&lt;/li>
&lt;li>
&lt;p>max: Select maximum over labels&lt;/p>
&lt;/li>
&lt;li>
&lt;p>avg: Calculate the average over labels&lt;/p>
&lt;/li>
&lt;li>
&lt;p>stddev: Calculate the population standard deviation over labels&lt;/p>
&lt;/li>
&lt;li>
&lt;p>stdvar: Calculate the population standard variance over labels&lt;/p>
&lt;/li>
&lt;li>
&lt;p>count: Count number of elements in the vector&lt;/p>
&lt;/li>
&lt;li>
&lt;p>bottomk: Select smallest k elements by sample value&lt;/p>
&lt;/li>
&lt;li>
&lt;p>topk: Select largest k elements by sample value&lt;/p>
&lt;/li>
&lt;li>
&lt;p>sum：求和&lt;/p>
&lt;/li>
&lt;li>
&lt;p>min：最小值&lt;/p>
&lt;/li>
&lt;li>
&lt;p>max：最大值&lt;/p>
&lt;/li>
&lt;li>
&lt;p>avg：平均值&lt;/p>
&lt;/li>
&lt;li>
&lt;p>stddev：标准差&lt;/p>
&lt;/li>
&lt;li>
&lt;p>stdvar：标准方差&lt;/p>
&lt;/li>
&lt;li>
&lt;p>count：计数&lt;/p>
&lt;/li>
&lt;li>
&lt;p>bottomk：最小的 k 个元素&lt;/p>
&lt;/li>
&lt;li>
&lt;p>topk：最大的 k 个元素&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>聚合函数我们可以用如下表达式描述：&lt;/p>
&lt;pre>&lt;code>&amp;lt;aggr-op&amp;gt;([parameter,] &amp;lt;vector expression) [without|by (label list)]
&lt;/code>&lt;/pre>
&lt;p>对于需要对标签进行分组时，我们可以用 &lt;code>without&lt;/code> 或者 &lt;code>by&lt;/code> 来区分。比如计算 nginx 的 qps，并按照 pod 来分组：&lt;/p>
&lt;pre>&lt;code>sum(rate({filename=&amp;quot;/var/log/nginx/access.log&amp;quot;}[5m])) by (pod)
&lt;/code>&lt;/pre>
&lt;p>只有在使用 &lt;code>bottomk&lt;/code> 和 &lt;code>topk&lt;/code> 函数时，我们可以对函数输入相关的参数。比如计算 nginx 的 qps 最大的前 5 个，并按照 pod 来分组：&lt;/p>
&lt;pre>&lt;code>topk(5,sum(rate({filename=&amp;quot;/var/log/nginx/access.log&amp;quot;}[5m])) by (pod)))
&lt;/code>&lt;/pre>
&lt;h2 id="binary-operators二元运算符">Binary Operators(二元运算符)&lt;/h2>
&lt;h3 id="数学计算">数学计算&lt;/h3>
&lt;p>Loki 存的是日志，都是文本，怎么计算呢？显然 LogQL 中的数学运算是面向区间向量操作的，LogQL 中的支持的二进制运算符如下：&lt;/p>
&lt;ul>
&lt;li>&lt;code>+&lt;/code>：加法&lt;/li>
&lt;li>&lt;code>-&lt;/code>：减法&lt;/li>
&lt;li>&lt;code>*&lt;/code>：乘法&lt;/li>
&lt;li>&lt;code>/&lt;/code>：除法&lt;/li>
&lt;li>&lt;code>%&lt;/code>：求模&lt;/li>
&lt;li>&lt;code>^&lt;/code>：求幂&lt;/li>
&lt;/ul>
&lt;p>比如我们要找到某个业务日志里面的错误率，就可以按照如下方式计算：&lt;/p>
&lt;pre>&lt;code>sum(rate({app=&amp;quot;foo&amp;quot;, level=&amp;quot;error&amp;quot;}[1m])) / sum(rate({app=&amp;quot;foo&amp;quot;}[1m]))
&lt;/code>&lt;/pre>
&lt;h3 id="逻辑运算">逻辑运算&lt;/h3>
&lt;p>集合运算仅在区间向量范围内有效，当前支持&lt;/p>
&lt;ul>
&lt;li>&lt;code>and&lt;/code>：并且&lt;/li>
&lt;li>&lt;code>or&lt;/code>：或者&lt;/li>
&lt;li>&lt;code>unless&lt;/code>：排除&lt;/li>
&lt;/ul>
&lt;p>比如：&lt;/p>
&lt;pre>&lt;code>rate({app=~&amp;quot;foo|bar&amp;quot;}[1m]) and rate({app=&amp;quot;bar&amp;quot;}[1m])
&lt;/code>&lt;/pre>
&lt;h3 id="比较运算">比较运算&lt;/h3>
&lt;p>LogQL 支持的比较运算符和 PromQL 一样，包括：&lt;/p>
&lt;ul>
&lt;li>&lt;code>==&lt;/code>：等于&lt;/li>
&lt;li>&lt;code>!=&lt;/code>：不等于&lt;/li>
&lt;li>&lt;code>&amp;gt;&lt;/code>：大于&lt;/li>
&lt;li>&lt;code>&amp;gt;=&lt;/code>: 大于或等于&lt;/li>
&lt;li>&lt;code>&amp;lt;&lt;/code>：小于&lt;/li>
&lt;li>&lt;code>&amp;lt;=&lt;/code>: 小于或等于&lt;/li>
&lt;/ul>
&lt;p>通常我们使用区间向量计算后会做一个阈值的比较，这对应告警是非常有用的，比如统计 5 分钟内 error 级别日志条目大于 10 的情况：&lt;/p>
&lt;pre>&lt;code>count_over_time({app=&amp;quot;foo&amp;quot;, level=&amp;quot;error&amp;quot;}[5m]) &amp;gt; 10
&lt;/code>&lt;/pre>
&lt;p>我们也可以通过布尔计算来表达，比如统计 5 分钟内 error 级别日志条目大于 10 为真，反正则为假：&lt;/p>
&lt;pre>&lt;code>count_over_time({app=&amp;quot;foo&amp;quot;, level=&amp;quot;error&amp;quot;}[5m]) &amp;gt; bool 10
&lt;/code>&lt;/pre>
&lt;h2 id="注释">注释&lt;/h2>
&lt;p>LogQL 查询可以使用 &lt;code>#&lt;/code> 字符进行注释，例如：&lt;/p>
&lt;pre>&lt;code>{app=&amp;quot;foo&amp;quot;} # anything that comes after will not be interpreted in your query
&lt;/code>&lt;/pre>
&lt;p>对于多行 LogQL 查询，可以使用 &lt;code>#&lt;/code> 排除整个或部分行：&lt;/p>
&lt;pre>&lt;code>{app=&amp;quot;foo&amp;quot;}
| json
# this line will be ignored
| bar=&amp;quot;baz&amp;quot; # this checks if bar = &amp;quot;baz&amp;quot;
&lt;/code>&lt;/pre>
&lt;h2 id="pipeline-errors-管道错误">Pipeline Errors 管道错误&lt;/h2>
&lt;p>There are multiple reasons which cause pipeline processing errors, such as:有多种原因导致流水线处理错误，例如：&lt;/p>
&lt;ul>
&lt;li>A numeric label filter may fail to turn a label value into a number 数字标签过滤器可能无法将标签值转换为数字&lt;/li>
&lt;li>A metric conversion for a label may fail.标签的度量转换可能会失败。&lt;/li>
&lt;li>A log line is not a valid json document.日志行不是有效的 JSON 文档。&lt;/li>
&lt;li>etc…等等…&lt;/li>
&lt;/ul>
&lt;p>When those failures happen, Loki won’t filter out those log lines. Instead they are passed into the next stage of the pipeline with a new system label named &lt;code>__error__&lt;/code>. The only way to filter out errors is by using a label filter expressions. The &lt;code>__error__&lt;/code> label can’t be renamed via the language.当这些故障发生时，Loki 不会过滤掉这些日志线。相反，它们通过名为__Error__的新系统标签传递到管道的下一个阶段。过滤误差的唯一方法是使用标签过滤表达式。 __Err__标签无法通过语言重命名。
For example to remove json errors:例如要删除 JSON 错误：&lt;/p>
&lt;pre>&lt;code>{cluster=&amp;quot;ops-tools1&amp;quot;,container=&amp;quot;ingress-nginx&amp;quot;}
| json
| __error__ != &amp;quot;JSONParserErr&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>Logql
Alternatively you can remove all error using a catch all matcher such as &lt;code>__error__ = &amp;quot;&amp;quot;&lt;/code> or even show only errors using &lt;code>__error__ != &amp;quot;&amp;quot;&lt;/code>.或者，您可以使用捕获器删除所有匹配器，例如__Error__ =“”甚至仅显示使用__Error__！=“”。
The filter should be placed after the stage that generated this error. This means if you need to remove errors from an unwrap expression it needs to be placed after the unwrap.在生成此错误的阶段后应放置过滤器。这意味着如果您需要从未包装中删除从未包装表达式中删除错误，则需要放置在未包装之后。&lt;/p>
&lt;pre>&lt;code>quantile_over_time(
0.99,
{container=&amp;quot;ingress-nginx&amp;quot;,service=&amp;quot;hosted-grafana&amp;quot;}
| json
| unwrap response_latency_seconds
| __error__=&amp;quot;&amp;quot;[1m]
) by (cluster)
&lt;/code>&lt;/pre>
&lt;p>Logql&lt;/p>
&lt;blockquote>
&lt;p>Metric queries cannot contains errors, in case errors are found during execution, Loki will return an error and appropriate status code.度量标准查询不能包含错误，以便在执行期间找到错误，Loki 将返回错误和适当的状态代码。&lt;/p>
&lt;/blockquote></description></item><item><title>Docs: Loki</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/Loki/Loki/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/Loki/Loki/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/grafana/loki">GitHub 项目，grafana/loki&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/fundamentals/overview/">官方文档，基础-概述&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.qikqiak.com/post/grafana-loki-usage/">阳明博客&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.zhihu.com/people/quchenyuan/posts">知乎文章&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://wsgzao.github.io/post/loki/">https://wsgzao.github.io/post/loki/&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Loki 是受 Prometheus 启发的水平可扩展，高度可用的多租户日志聚合系统。它的设计具有很高的成本效益，并且易于操作。它不索引日志的内容，而是为每个日志流设置一组标签。
与其他日志聚合系统相比，Loki 有以下特点：&lt;/p>
&lt;ul>
&lt;li>不对日志进行全文本索引。通过存储压缩的，非结构化的日志以及仅索引元数据，Loki 更加易于操作且运行成本更低。&lt;/li>
&lt;li>使用与 Prometheus 相同的标签对日志流进行索引和分组，从而使您能够使用与 Prometheus 相同的标签在指标和日志之间无缝切换。&lt;/li>
&lt;li>特别适合存储 Kubernetes Pod 日志。诸如 Pod 标签之类的元数据会自动被抓取并建立索引。&lt;/li>
&lt;li>在 Grafana 中具有本机支持（需要 Grafana v6.0）。&lt;/li>
&lt;/ul>
&lt;p>基于 Loki 的日志包含 3 个程序：&lt;/p>
&lt;ul>
&lt;li>Loki 是主服务器，负责存储日志和处理查询。&lt;/li>
&lt;li>Client Agent 客户端代理，负责收集日志并将其发送给 Loki。promtail 是其中一种 agent，是 loki 原配。&lt;/li>
&lt;li>Grafana 用于查询和显示日志。&lt;/li>
&lt;/ul>
&lt;p>Loki 像 Prometheus 一样，但是是用于处理日志的：我们更喜欢基于多维标签的索引方法，并且希望使用没有依赖关系的单一二进制，易于操作的系统。Loki 与 Prometheus 的不同之处在于，它侧重于日志而不是指标，并通过推送而不是拉取交付日志。&lt;/p>
&lt;blockquote>
&lt;p>Loki 与 Promtail 加一起才相当于 Prometheus，因为 Promtail 是发现目标，采集日志的程序。然后主动 Push 给 Loki，由 Loki 存储日志数据。
而 Promtheus，可以自己发现目标，采集指标，存储指标。&lt;/p>
&lt;/blockquote>
&lt;h2 id="loki-observability可观察性">Loki Observability(可观察性)&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/operations/observability/">官方文档，运维-可观测性&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Loki 和 Promtail 都在 &lt;code>/metrics&lt;/code> 端点上公开了指标，该端点暴露了 OpenMetrics 格式的指标。
Loki 存储库具有一个&lt;a href="https://github.com/grafana/loki/tree/main/production/loki-mixin">混合包&lt;/a>，其中包括一组仪表板，记录规则和警报。总之，mixin 为您提供了一个全面的软件包，用于监视生产中的 Loki。
有关 mixin 的更多信息，请参阅 &lt;a href="https://github.com/monitoring-mixins/docs">monitoring-mixins 项目&lt;/a> 的文档 。&lt;/p>
&lt;h2 id="multi-tenancy多租户">Multi Tenancy(多租户)&lt;/h2>
&lt;p>Loki 支持多租户，以使租户之间的数据完全分离。当 Loki 在多租户模式下运行时，所有数据（包括内存和长期存储中的数据）都由租户 ID 分区，该租户 ID 是从请求中的 &lt;code>X-Scope-OrgID&lt;/code> HTTP 头中提取的。当 Loki 不在多租户模式下时，将忽略 Header 头，并将租户 ID 设置为 &lt;code>fake&lt;/code>，这将显示在索引和存储的块中。&lt;/p>
&lt;h1 id="loki-架构概述">Loki 架构概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/fundamentals/architecture/">官方文档，基础-架构&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Loki 由多个组件组成，每个组件都可以实现特定的功能：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>写入日志数据&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>Distributor(分配器)&lt;/strong> # 对应 distributor 组件。负责处理客户端写入的日志，它是日志数据写入路径中的&lt;strong>第一站&lt;/strong>，一旦 Distributor 收到日志数据，会将其拆分为多个批次，然后并行发送给一个或多个 Ingester&lt;/li>
&lt;li>&lt;strong>Ingester(摄取器)&lt;/strong> # 对应 ingester 组件。负责将日志数据写入 本地文件系统 或 指定的存储后端(DynamoDB、S3、Cassandra 等)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>读取日志数据&lt;/strong>，处理 LogQL 请求
&lt;ul>
&lt;li>&lt;strong>Querier(查询器)&lt;/strong> # 对应 querier 组件。接收客户端发送的 LogQL 请求并从定的存储中查询日志数据并返回给客户端&lt;/li>
&lt;li>&lt;strong>Query Frontend(查询前端)&lt;/strong> # 对应 query-frontend 组件。为 Querier 组件提供负载均衡功能。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>其他&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>Table Manager 表管理器)&lt;/strong> # 对应 table-manager 组件。负责所有数据中，Table 的维护工作。根据配置文件中 schema_config.configs 字段中的相关配置，在指定时间开始之前创建周期表，并在根据 table_manager 字段中的相关配置，将数据时间范围超过保留期的数据删除。&lt;/li>
&lt;li>&lt;strong>Compactor(压缩器)&lt;/strong> # 2.6 版本时，Compactor 组件被设置为默认的用来实现数据保留功能的组件，暂时只支持 boltdb-shipper。准备要代替 table-manager 组件。&lt;/li>
&lt;li>&lt;strong>Ruler(规则管理器)&lt;/strong> # 对应 ruler 组件。从存储中读取数据，根据规则发送给告警处理程序。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>loki 二进制文件的设计方式与 thanos 非常类似，都是在单一二进制文件中，可以运行指定的一个或多个组件。
Loki 内部将组件称为 &lt;strong>Modules(模块)&lt;/strong>。如果想要运行指定的模块，有两种方式：&lt;/p>
&lt;ul>
&lt;li>命令行标志 # loki 二进制文件的 &lt;code>-target&lt;/code> 命令行标志&lt;/li>
&lt;li>配置文件 # 配置文件中的 &lt;code>target&lt;/code> 字段。&lt;/li>
&lt;/ul>
&lt;p>target 可用的值有：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>all&lt;/strong> # 表示 Loki 将以 Monolithic 架构运行，这也是默认的运行方式。Monolithic 模式非常适合测试或运行一个小规模的 Loki；而 Microservices 架构则提供了 Loki 的水平扩展性。&lt;/li>
&lt;li>&lt;strong>read&lt;/strong> # 运行 Ingestor 和 Distributor 组件&lt;/li>
&lt;li>&lt;strong>write&lt;/strong> # 运行 Querier、Query frontend、Ruler 组件&lt;/li>
&lt;li>&lt;strong>ingester&lt;/strong> # 只运行 Ingester 组件&lt;/li>
&lt;li>&lt;strong>distributor&lt;/strong> # 只运行 Distributor 组件&lt;/li>
&lt;li>&lt;strong>query-frontend&lt;/strong> # 只运行 Query Frontend 组件&lt;/li>
&lt;li>&lt;strong>query-scheduler&lt;/strong> # 只运行&lt;/li>
&lt;li>&lt;strong>querier&lt;/strong> # 只运行 Querier 组件&lt;/li>
&lt;li>&lt;strong>index-gateway&lt;/strong> # 只运行&lt;/li>
&lt;li>&lt;strong>ruler&lt;/strong> # 只运行 Ruler 组件&lt;/li>
&lt;li>&lt;strong>compactor&lt;/strong> # 只运行 Compactor 组件&lt;/li>
&lt;/ul>
&lt;h2 id="最基本的运行条件">最基本的运行条件&lt;/h2>
&lt;p>这些组件中，可以和存储直接交互的有 Ingester、Querier、Ruler。&lt;strong>最重要的组件是 Distributor、Ingester、Querier&lt;/strong>这三个，这是 Loki 基本运行的最低要求。
Distributor 接收客户端(比如 Promtail) 推送的日志，处理后交给 Ingester 转存到本地或对象存储中，Querier 接收 LogQL 查询请求。&lt;/p>
&lt;h2 id="架构分类">架构分类&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/fundamentals/architecture/deployment-modes/">官方文档，基础-架构-部署模式&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>作为一个应用程序，Loki 由许多组件微服务构建而成，旨在作为一个可水平扩展的分布式系统运行。Loki 的独特设计将整个分布式系统的代码编译成单个二进制或 Docker 映像。该单个二进制文件的行为由-target 命令行标志控制，并定义了三种操作模式之一。
Loki 旨在根据需求变化轻松地在不同架构下重新部署集群，无需更改配置或进行最少的配置更改。&lt;/p>
&lt;ul>
&lt;li>Monolithic 架构对于快速开始试验 Loki 以及每天高达约 100GB 的小读/写量非常有用。&lt;/li>
&lt;li>Loki 的简单可扩展部署可以扩展到每天数 TB 甚至更多的日志。&lt;/li>
&lt;li>对于非常大的 Loki 集群或需要对扩展和集群操作进行更多控制的集群，建议使用微服务模式。&lt;/li>
&lt;/ul>
&lt;h3 id="monolithic统一-架构">Monolithic(统一) 架构&lt;/h3>
&lt;p>这种架构需要通过 loki 二进制文件只启动 1 个进程，使该进程用 &lt;code>-target=all&lt;/code> 以便在一个进程中运行所有组件。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gcp6zx/1660115619129-e6fa2017-8e05-46d7-ab56-207ee3cfc90b.png" alt="image.png">
这是最经典的模式，早期 Loki 通常都是以这种模式被大家部署。这种模式是 loki 以单个二进制文件运行 Loki 的所有组件，如上图，instance 可以看作一个单独的二进制文件。
Monolithic 模式非常适合于本地开发、小规模等场景，Monolithic 模式可以通过多个进程进行扩展，但有以下限制：&lt;/p>
&lt;ul>
&lt;li>当运行带有多个副本的单体模式时，当前无法使用本地索引和本地存储，因为每个副本必须能够访问相同的存储后端，但是本地存储对于并发访问并不安全。主要是因为 BoltDB 仅允许一个进程在同一时间锁定数据库。如果使用远程存储不受影响。&lt;/li>
&lt;li>各个组件无法独立缩放，因此读取组件的数量不能超过写入组件的数量。&lt;/li>
&lt;/ul>
&lt;p>这个进程产生一个 gRPC 监听(默认 9095 端口)和一个 HTTP 监听(默认 3100 端口)。各个组件内部在同一个进程的共享内存中进行数据交互。&lt;/p>
&lt;h3 id="simple-scalable简单可扩展-架构">Simple scalable(简单可扩展) 架构&lt;/h3>
&lt;p>这种架构需要通过 loki 二进制文件至少启动 2 个进程，保证两个进程分别具有 读 和 写 的功能&lt;/p>
&lt;ul>
&lt;li>其中一个进程使用 &lt;code>-target=write&lt;/code> 运行具有写功能的组件，包括 Ingestor 和 Distributor&lt;/li>
&lt;li>另一个进程使用 &lt;code>-target=read&lt;/code> 运行具有读功能的组件，包括 Querier、Query frontend、Ruler&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gcp6zx/1660120707493-6efe2870-f1a3-446f-b760-6f520236c358.png" alt="image.png">
这种架构将 Loki 的读/写分离。这个图里少了一点，通常来说，5 个 Loki 实例前面还有一个负载均衡设备，用来接收客户端的 读/写请求，以便将请求转发给对应的 Loki 实例。&lt;/p>
&lt;h3 id="microservices微服务-架构">Microservices(微服务)  架构&lt;/h3>
&lt;p>这种架构需要通过 loki 二进制文件至少启动 4 个进程，整套架构由多个单一功能的进程组成&lt;/p>
&lt;ul>
&lt;li>&lt;code>-target=distributor&lt;/code> # 运行分配器&lt;/li>
&lt;li>&lt;code>-target=ingester&lt;/code># 运行摄取器&lt;/li>
&lt;li>&lt;code>-target=querier&lt;/code># 运行查询器&lt;/li>
&lt;li>&lt;code>-target=query-frontend&lt;/code># 运行查询前端&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gcp6zx/1660115629058-db37e36d-3ed5-4bd9-86bc-3fbb05df38d0.png" alt="image.png">
这种微服务架构与 Thanos 类似，可以通过一个 Loki 的二进制文件，使用子命令来启动不同的功能。&lt;/p>
&lt;ul>
&lt;li>每个组件都产生一个 gRPC 监听(默认 9095 端口)和一个 HTTP 监听(默认 3100 端口)。
&lt;ul>
&lt;li>通常情况下，gRPC 端口用于组件间通信；HTTP 端口用于暴露一些管理 API(比如 指标、运行状态、就绪性)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>各个组件可以暴露的 HTTP API 详见 &lt;a href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/Loki/Loki%20API.md">Loki API 章节&lt;/a>。通过 API，我们可以更清晰得了解到，每个组件可以实现的具体功能&lt;/li>
&lt;li>各个组件通过 memberlist 统一到一个哈希环上，以互相发现。当我们部署在 K8S 中时，将会配置 &lt;code>memberlist.join_members&lt;/code> 字段，并且需要创建对应的 service 资源，service 的 endpoint 将会关联到所有 Distributor、Ingester、Querier 组件。&lt;/li>
&lt;/ul>
&lt;h3 id="gateway网关">Gateway(网关)&lt;/h3>
&lt;p>在我们使用 Simple scalable 和 Microservices 这两种架构时，通常会使用一个 &lt;code>loki-gateway&lt;/code> ，这是一个 Nginx，配置很简单：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">http&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">server&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">listen&lt;/span> &lt;span style="color:#ae81ff">8080&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">location&lt;/span> = &lt;span style="color:#e6db74">/&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">return&lt;/span> &lt;span style="color:#ae81ff">200&lt;/span> &lt;span style="color:#e6db74">&amp;#39;OK&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">auth_basic&lt;/span> &lt;span style="color:#66d9ef">off&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">......略&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">location&lt;/span> = &lt;span style="color:#e6db74">/loki/api/v1/push&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">set&lt;/span> $loki_api_v1_push_backend &lt;span style="color:#e6db74">http://loki-loki-distributed-distributor.logging.svc.cluster.local&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">proxy_pass&lt;/span> $loki_api_v1_push_backend:3100$request_uri;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">location&lt;/span> ~ &lt;span style="color:#e6db74">/loki/api/.*&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">set&lt;/span> $loki_api_backend &lt;span style="color:#e6db74">http://loki-loki-distributed-query-frontend.logging.svc.cluster.local&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">proxy_pass&lt;/span> $loki_api_backend:3100$request_uri;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到，这个 &lt;code>loki-gateway&lt;/code> 用来为 Loki 进行读/写分离的。loki-gateway 会根据客户端发起请求的 URL 判断这个请求应该由哪个组件进行处理。
Nginx 的配置依据两种架构的不同而有细微区别，但是总归是需要一个 Gateway 的。不管是 Promtail 推送数据，还是客户端查询数据，都可以先经过 loki-gateway&lt;/p>
&lt;h2 id="数据写入路径">数据写入路径&lt;/h2>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gcp6zx/1660123438275-02b6febb-0f26-431b-9450-9b5f6f125305.png" alt="image.png">
整体的日志写入路径如下所示：&lt;/p>
&lt;ul>
&lt;li>&lt;code>Distributor&lt;/code> 收到一个 HTTP 请求，以存储流的数据。&lt;/li>
&lt;li>每个流都使用哈希环进行哈希操作。&lt;/li>
&lt;li>&lt;code>Distributor&lt;/code> 将每个流发送到合适的 &lt;code>Ingester&lt;/code> 和他们的副本（基于配置的复制因子）。&lt;/li>
&lt;li>每个 &lt;code>Ingester&lt;/code> 将为日志流数据创建一个块或附加到一个现有的块上。每个租户和每个标签集的块是唯一的。&lt;/li>
&lt;li>&lt;code>Distributor&lt;/code> 通过 HTTP 连接响应一个成功代码。&lt;/li>
&lt;/ul>
&lt;h2 id="数据读取路径">数据读取路径&lt;/h2>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gcp6zx/1660118903925-bca6ba6b-f991-4a28-a407-9c6febb38a36.png" alt="image.png">
日志读取路径的流程如下所示：&lt;/p>
&lt;ul>
&lt;li>&lt;code>Querier&lt;/code> 收到一个对数据的 HTTP 请求。&lt;/li>
&lt;li>&lt;code>Querier&lt;/code> 将查询传递给所有 &lt;code>Ingesters&lt;/code> 以获取内存数据。&lt;/li>
&lt;li>&lt;code>Ingesters&lt;/code> 收到读取请求，并返回与查询相匹配的数据（如果有的话）。&lt;/li>
&lt;li>如果没有 &lt;code>Ingesters&lt;/code> 返回数据，查询器会从后端存储(比如 S3)加载数据，并对其运行查询。&lt;/li>
&lt;li>查询器对所有收到的数据进行迭代和重复计算，通过 HTTP 连接返回最后一组数据。&lt;/li>
&lt;/ul>
&lt;h1 id="loki-主要组件概述">Loki 主要组件概述&lt;/h1>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gcp6zx/1621238613211-cedcd7da-602a-4c15-9b27-dbcb797317d8.png" alt="">&lt;/p>
&lt;h2 id="distributor分配器">Distributor(分配器)&lt;/h2>
&lt;p>Distributor 服务负责处理客户端写入的日志，它本质上是日志数据写入路径中的&lt;strong>第一站&lt;/strong>，一旦 Distributor 收到日志数据，会将其拆分为多个批次，然后并行发送给多个 Ingester。
Distributor 通过 gRPC 与 Ingester 通信，它们都是无状态的，可以根据需要扩大或缩小规模。&lt;/p>
&lt;h2 id="ingester摄取器">Ingester(摄取器)&lt;/h2>
&lt;p>Ingester 服务负责将日志数据写入长期存储后端（DynamoDB、S3、Cassandra 等）。此外 Ingester 会验证摄取的日志行是按照时间戳递增的顺序接收的（即每条日志的时间戳都比前面的日志晚一些），当 Ingester 收到不符合这个顺序的日志时，该日志行会被拒绝并返回一个错误。
注意：虽然 Ingester 支持 BoltDB 写入本地文件系统，但是这仅适用于[单进程模式](/docs/IT学习笔记/6.可观测性/日志系统/Loki/Loki%20 部署.md 部署.md)，因为 Querier 也需要访问相同的存储，而 BoltDB 仅允许一个进程在同一时间锁定数据库。&lt;/p>
&lt;h2 id="querier查询器">Querier(查询器)&lt;/h2>
&lt;p>Querier(查询器) 使用 LogQL 处理查询，从 Ingesters 和长期存储中获取日志。&lt;/p>
&lt;h2 id="query-frontend查询前端">Query Frontend(查询前端)&lt;/h2>
&lt;p>Query Frontend(查询前端) 是一个可选的组件。当 Loki 以微服务架构运行时，且存在多个 Querier(查询器)，则查询前端可以平均得调度 LogQL 请求到查询器上，说白了就是实现负载均衡的效果。并且查询前端还可以并行处理请求、并缓存这些数据。&lt;/p>
&lt;h1 id="loki-关联文件与配置">Loki 关联文件与配置&lt;/h1>
&lt;p>/etc/loki/local-config.yaml # loki 程序运行时默认配置文件
/StorageConfig/PATH/TO/index # loki 的 BoltDB 中存储索引数据保存路径，无默认值，根据配置文件中 &lt;code>.strorage_confg.boltdb.directory&lt;/code> 字段指定。
/StorageConfig/PATH/TO/chunks # loki 的 chunks(块) 存储数据保存路径，无默认值，根据配置文件中 &lt;code>.strorage_confg.filesystem.directory&lt;/code> 字段指定。&lt;/p>
&lt;h1 id="loki-与其他日志系统相比">Loki 与其他日志系统相比&lt;/h1>
&lt;p>官方文档：&lt;a href="https://grafana.com/docs/loki/latest/fundamentals/overview/comparisons/">https://grafana.com/docs/loki/latest/fundamentals/overview/comparisons/&lt;/a>
Loki / Promtail / Grafana vs EFK
EFK（Elasticsearch，Fluentd，Kibana）堆栈用于从各种来源提取，可视化和查询日志。
Elasticsearch 中的数据作为非结构化 JSON 对象存储在磁盘上。每个对象的键和每个键的内容都被索引。然后可以使用 JSON 对象或定义为 Lucene 的查询语言来查询数据以定义查询（称为查询 DSL）。
相比之下，Loki 在单二进制模式下可以将数据存储在磁盘上，但是在水平可伸缩模式下，数据存储在诸如 S3，GCS 或 Cassandra 之类的云存储系统中。日志以纯文本格式存储，并带有一组标签名称和值，其中仅对标签对进行索引。这种折衷使得它比全索引更便宜，并且允许开发人员从其应用程序积极地进行日志记录。使用 LogQL 查询 Loki 中的日志。但是，由于这种设计上的折衷，基于内容（即日志行中的文本）进行过滤的 LogQL 查询需要加载搜索窗口中与查询中定义的标签匹配的所有块。
Fluentd 通常用于收集日志并将其转发到 Elasticsearch。Fluentd 被称为数据收集器，它可以从许多来源提取日志，对其进行处理，然后将其转发到一个或多个目标。
相比之下，Promtail 的用例专门针对 Loki 量身定制。它的主要操作模式是发现存储在磁盘上的日志文件，并将与一组标签关联的日志文件转发给 Loki。Promtail 可以为与 Promtail 在同一节点上运行的 Kubernetes Pod 进行服务发现，充当容器边车或 Docker 日志记录驱动程序，从指定的文件夹中读取日志并尾随系统日志。
Loki 用一组标签对表示日志的方式类似于 Prometheus 表示度量的方式。当与 Prometheus 一起部署在环境中时，由于使用相同的服务发现机制，Promtail 的日志通常具有与应用程序指标相同的标签。具有相同级别的日志和指标使用户可以在指标和日志之间无缝地进行上下文切换，从而有助于根本原因分析。
Kibana 用于可视化和搜索 Elasticsearch 数据，并且在对该数据进行分析时非常强大。Kibana 提供了许多可视化工具来进行数据分析，例如位置图，用于异常检测的机器学习以及用于发现数据关系的图形。可以将警报配置为在发生意外情况时通知用户。
相比之下，Grafana 专门针对来自 Prometheus 和 Loki 等来源的时间序列数据量身定制。可以设置仪表板以可视化指标（即将提供日志支持），并且可以使用浏览视图对数据进行临时查询。与 Kibana 一样，Grafana 支持根据您的指标进行警报。&lt;/p>
&lt;ul>
&lt;li>kibana 启动速度比 grafana 慢了 10 倍&lt;/li>
&lt;li>es 启动时，内存使用达到 1.5G，后续存储同样内容的情况下，es 内存使用率 1G 多，loki 内存使用率 200 多 M&lt;/li>
&lt;li>promtail 使用 yaml 作为 配置文件格式，与 prom 配置逻辑一致。fluentd 配置文件格式类似 html&lt;/li>
&lt;li>grafana 页面可以直接通过标签用鼠标点击过滤。kibana 则需要输入内容。&lt;/li>
&lt;/ul></description></item><item><title>Docs: Loki API</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/Loki/Loki-API/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/Loki/Loki-API/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/">官方文档,HTTP API&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>每个组件都会暴露一些基本的 API&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#identify-ready-loki-instance">GET /ready&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#return-exposed-prometheus-metrics">GET /metrics&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#list-current-configuration">GET /config&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#list-running-services">GET /services&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#list-build-information">GET /loki/api/v1/status/buildinfo&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>除了这几个基本的 API 以外，每个组件都会暴露一些专用的 API，若是以 Monolithic 架构启动 Loki，则下面的所有 API 都会在这个进程暴露。&lt;/p>
&lt;h1 id="querier-api-与-query-frontend-api">Querier API 与 Query Frontend API&lt;/h1>
&lt;p>查询器与查询前端暴露的 API 是我们最常用的 API，用来处理客户端发来的 LogQL。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#query-loki">GET /loki/api/v1/query&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#query-loki-over-a-range-of-time">GET /loki/api/v1/query_range&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#step-vs-interval">Step vs Interval&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#list-labels-within-a-range-of-time">GET /loki/api/v1/labels&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#list-label-values-within-a-range-of-time">GET /loki/api/v1/label/&amp;lt;name&amp;gt;/values&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#list-series">GET /loki/api/v1/series&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#index-stats">GET /loki/api/v1/index/stats&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#stream-log-messages">GET /loki/api/v1/tail&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="distributor-api">Distributor API&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#post-flush">POST /flush&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#post-ingesterflush_shutdown">POST /ingester/flush_shutdown&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="ingester-api">Ingester API&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#flush-in-memory-chunks-to-backing-store">POST /flush&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#flush-in-memory-chunks-and-shut-down">POST /ingester/shutdown&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="ruler-api">Ruler API&lt;/h1>
&lt;p>以 /loki/ 开头的 API 与 &lt;a href="https://prometheus.io/docs/prometheus/latest/querying/api/">Prometheus API&lt;/a> 兼容，结果格式可以互换使用&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#ruler-ring-status">GET /ruler/ring&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#list-rule-groups">GET /loki/api/v1/rules&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#get-rule-groups-by-namespace">GET /loki/api/v1/rules/{namespace}&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#get-rule-group">GET /loki/api/v1/rules/{namespace}/{groupName}&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#set-rule-group">POST /loki/api/v1/rules/{namespace}&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#delete-rule-group">DELETE /loki/api/v1/rules/{namespace}/{groupName}&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#delete-namespace">DELETE /loki/api/v1/rules/{namespace}&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#list-rule-groups">GET /api/prom/rules&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#get-rule-groups-by-namespace">GET /api/prom/rules/{namespace}&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#get-rule-group">GET /api/prom/rules/{namespace}/{groupName}&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#set-rule-group">POST /api/prom/rules/{namespace}&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#delete-rule-group">DELETE /api/prom/rules/{namespace}/{groupName}&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#delete-namespace">DELETE /api/prom/rules/{namespace}&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#list-rules">GET /prometheus/api/v1/rules&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#list-alerts">GET /prometheus/api/v1/alerts&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="compactor-api">Compactor API&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#get-compactorring">GET /compactor/ring&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#post-lokiapiv1delete">POST /loki/api/v1/delete&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#get-lokiapiv1delete">GET /loki/api/v1/delete&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#delete-lokiapiv1delete">DELETE /loki/api/v1/delete&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="series-api">Series API&lt;/h1>
&lt;ul>
&lt;li>GET /loki/api/v1/series&lt;/li>
&lt;li>POST /loki/api/v1/series&lt;/li>
&lt;li>GET /api/prom/series&lt;/li>
&lt;li>POST /api/prom/series&lt;/li>
&lt;/ul></description></item><item><title>Docs: Loki Rules 配置</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/Loki/Loki-Rules-%E9%85%8D%E7%BD%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/Loki/Loki-Rules-%E9%85%8D%E7%BD%AE/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/rules/">官方文档，告警规则和记录规则&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Loki Rules 文件的结构与 Promethues 的 Rules 文件结构一模一样。&lt;/p>
&lt;h1 id="loki-rules-配置详解">Loki Rules 配置详解&lt;/h1>
&lt;h2 id="alerting-rules告警规则">Alerting Rules(告警规则)&lt;/h2>
&lt;h2 id="recording-rules记录规则">Recording Rules(记录规则)&lt;/h2></description></item><item><title>Docs: Loki 部署</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/Loki/Loki-%E9%83%A8%E7%BD%B2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/Loki/Loki-%E9%83%A8%E7%BD%B2/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/installation/">官方文档，安装&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/fundamentals/architecture/deployment-modes">官方文档，基础知识-架构-部署模式&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="使用-docker-运行-loki">使用 docker 运行 Loki&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker run -d --rm --name loki &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --network host &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -v /opt/loki/config:/etc/loki &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -v /opt/loki/data:/loki &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -v /etc/localtime:/etc/localtime:ro &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> grafana/loki
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意：与 Prometheus 类似，需要修改 /opt/loki 目录权限为 777，否则 pod 内进程对该目录无操作权限&lt;/p>
&lt;h1 id="在-kubernets-集群中部署">在 Kubernets 集群中部署&lt;/h1>
&lt;p>添加 loki 的 helm chart 仓库&lt;/p>
&lt;ul>
&lt;li>&lt;strong>helm repo add grafana &lt;a href="https://grafana.github.io/helm-charts">https://grafana.github.io/helm-charts&lt;/a>&lt;/strong>&lt;/li>
&lt;li>&lt;strong>helm repo update&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h2 id="helm-部署-loki-套件">Helm 部署 Loki 套件&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://grafana.com/docs/loki/v2.4.x/installation/helm/">官方文档 2.4.x，安装-helm&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>部署 Loki 栈&lt;/p>
&lt;ul>
&lt;li>kubectl create ns loki # 创建名称空间&lt;/li>
&lt;li>helm pull grafana/loki-stack # 获取 loki-stack 的 charts 压缩包&lt;/li>
&lt;li>tar -zxvf loki-stack-X.XX.X.tgz # 解压 charts&lt;/li>
&lt;li>cd loki-stack # 进入目录，根据需求修改模板或 values.yaml 文件&lt;/li>
&lt;li>helm upgrade &amp;ndash;install loki &amp;ndash;namespace=loki . # 使用默认配置在 loki 名称空间中部署 loki 栈 。该方式会部署 loki 与 promtail&lt;/li>
&lt;/ul>
&lt;p>在 grafana 中添加 loki 数据源，如图所示
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/vg0v2e/1616129749320-bb4bc4c9-2acb-460f-a655-5ff76766eb24.jpeg" alt="">&lt;/p>
&lt;h2 id="helm-部署-simple-scalable-架构-loki">Helm 部署 Simple scalable 架构 Loki&lt;/h2>
&lt;p>部署 Loki&lt;/p>
&lt;ul>
&lt;li>&lt;strong>helm install -n logging loki &amp;ndash;create-namespace grafana/loki-simple-scalable&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>注意：可扩展模式会部署 &lt;code>loki-gateway&lt;/code> 用以接收请求，并分离 读/写 请求，所有 Promtail 用来向 Loki 发起写请求的采集客户端和 Grafana 这种用来向 Loki 发起读请求的展示客户端，指定 Loki 端点时，都要指定 &lt;code>loki-gateway&lt;/code>。&lt;/p>
&lt;p>这里为什么要自带 grafana-agent？这个 grafana-agent 是通过 grafana/agent-operator 拉起来的。&lt;/p>
&lt;h2 id="helm-部署-microservices-架构-loki">Helm 部署 Microservices 架构 Loki&lt;/h2>
&lt;p>部署 Loki&lt;/p>
&lt;ul>
&lt;li>&lt;strong>helm install -n logging loki &amp;ndash;create-namespace grafana/loki-distributed&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h1 id="日志测试容器">日志测试容器&lt;/h1>
&lt;p>这俩容器会频繁刷新各种类型日志&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">apps/v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Deployment&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">dummylogs&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">replicas&lt;/span>: &lt;span style="color:#ae81ff">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">selector&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">matchLabels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">dummylogs&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">template&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">dummylogs&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">logging&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;true&amp;#34;&lt;/span> &lt;span style="color:#75715e"># 要采集日志需要加上该标签&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">containers&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">dummy&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">cnych/dummylogs:latest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">args&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">msg-processor&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">apps/v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Deployment&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">dummylogs2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">replicas&lt;/span>: &lt;span style="color:#ae81ff">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">selector&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">matchLabels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">dummylogs2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">template&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">dummylogs2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">logging&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;true&amp;#34;&lt;/span> &lt;span style="color:#75715e"># 要采集日志需要加上该标签&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">containers&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">dummy&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">cnych/dummylogs:latest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">args&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">msg-receiver-api&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Loki 管理</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/Loki/Loki-%E7%AE%A1%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/Loki/Loki-%E7%AE%A1%E7%90%86/</guid><description/></item><item><title>Docs: Loki 开发</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/Loki/Loki-%E5%BC%80%E5%8F%91/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/Loki/Loki-%E5%BC%80%E5%8F%91/</guid><description/></item><item><title>Docs: Loki 配置</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/Loki/Loki-%E9%85%8D%E7%BD%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/Loki/Loki-%E9%85%8D%E7%BD%AE/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/configuration/">官方文档，配置&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/rules/">官方文档，告警规则和记录规则&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Loki 可以通过两种方式配置 Loki 的运行时行为&lt;/p>
&lt;ul>
&lt;li>命令行标志&lt;/li>
&lt;li>配置文件&lt;/li>
&lt;/ul>
&lt;p>配置文件的一部分字段的值，可以通过命令行标志设置。在官方文档中，我们可以查看到配置文件中，所有与命令行标志对应的字段，效果如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># HTTP server listen host&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># CLI flag: -server.http-listen-address&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[http_listen_address&lt;/span>: &lt;span style="color:#ae81ff">\&amp;lt;string&amp;gt;]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>凡是注释中，有 &lt;code>CLI flag&lt;/code> 的字段，都可以通过命令行标签设置其值。&lt;/p>
&lt;h1 id="loki-命令行标志详解">Loki 命令行标志详解&lt;/h1>
&lt;p>&lt;strong>-target &amp;lt;STRING&amp;gt;&lt;/strong> # 指定要启用的模块&lt;/p>
&lt;ul>
&lt;li>可用的模块有 distributor、ingester、querier、query-frontend、table-manager。&lt;/li>
&lt;li>可以使用 read、write 来让 loki 运行在只读或只写的模式&lt;/li>
&lt;li>可以使用 all 表示启用所有模块&lt;/li>
&lt;/ul>
&lt;h1 id="lokiyaml-配置文件详解">loki.yaml 配置文件详解&lt;/h1>
&lt;p>文档中包含配置文件关键字与命令行 flag 的对应值，配置文件中的很多配置，都可以通过命令行 flag 来实现。
配置文件的基本结构：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 指定 loki 二进制文件要运行的组件列表。默认值：all，即运行所有组件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">target&lt;/span>: &lt;span style="color:#ae81ff">\&amp;lt;STRING&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 通过 X-Scope-OrgID 标头启用身份验证，如果为 true，则必须存在。 如果为 false，则 OrgID 将始终设置为“ fake”。默认值：true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">auth_enabled&lt;/span>: &lt;span style="color:#ae81ff">\&amp;lt;BOOLEAN&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 用于配置 loki 提供 http 和 gRPC 这两种服务的行为&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">server&lt;/span>: &lt;span style="color:#ae81ff">\&amp;lt;OBJECT&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 通用配置。用于配置一些其他配置部分可以共享的配置，比如存储。优先级低，若其他部分指定了相同的配置，则该配置在对应的其他部分的配置将被忽略。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 从 2.4 版本开始，common 字段将会逐步代替其他描述不清晰的字段，比如 common.storage 将会代替 storage_cofig 字段&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">common&lt;/span>: &lt;span style="color:#ae81ff">\&amp;lt;OBJECT&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">######## 存储架构配置 ########&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 配置储存 Chunk 与 Index 类型数据的模式，以及指定储存这些数据所用的存储类型。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">schema_config&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;schema_config&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 为 schema_config 字段指定的存储类型配置详细信息。比如 数据存储位置、连接存储的方式 等等。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 注意：该字段的配置会根据 schema_config 字段中指定的信息来选择可用的字段。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 未来将会逐步被 common.storage 字段代替&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">storage_config&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;storage_config&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">######## 组件配置 ########&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Distributor(分配器) 组件的配置&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">distributor&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;distributor_config&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Querier(查询器) 组件的配置.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">querier&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;querier_config&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Ingester(摄取器) 组件的配置。还可以配置摄取器如何将自己注册到哈希环上&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">ingester&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;ingester_config&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 配置 distributor 如何连接到 ingesters&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">ingester_client&lt;/span>: &lt;span style="color:#ae81ff">\&amp;lt;OBJECT&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Query Frontend(查询前端) 组件的配置&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">frontend&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;query_frontend_config&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Ruler(规则器) 组件的配置&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">ruler&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;ruler_config&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Compactor(压缩器) 组件的配置&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">compactor&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;compactor_config&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Table Manager(表管理器) 组件的配置，以规定数据保留的行为&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">table_manager&lt;/span>: &lt;span style="color:#ae81ff">\&amp;lt;OBJECT&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">######## 其他配置 ########&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># The queryrange_config configures the query splitting and caching in the Loki query-frontend.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">query_range&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;queryrange_config&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">chunk_store_config&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;chunk_store_config&amp;gt;&lt;/span> &lt;span style="color:#75715e"># 配置 Loki 如何将数据存放在指定的存储中&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 配置每个租户的限制或全局的限制&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">limits_config&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;limits_config&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># The frontend_worker_config configures the worker - running within the Loki&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># querier - picking up and executing queries enqueued by the query-frontend.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">frontend_worker&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;frontend_worker_config&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Configuration for &amp;#34;runtime config&amp;#34; module, responsible for reloading runtime configuration file.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">runtime_config&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;runtime_config&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Configuration for tracing&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">tracing&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;tracing_config&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="target-string--指定二进制文件要运行的组件列表">target: &amp;lt;STRING&amp;gt; # 指定二进制文件要运行的组件列表&lt;/h2>
&lt;p>可用的值有：all、read、write、ingester、distributor、query-frontend、query-scheduler、querier、index-gateway、ruler、compactor。&lt;/p>
&lt;h2 id="auth_enabled-boolean">auth_enabled: &amp;lt;BOOLEAN&amp;gt;&lt;/h2>
&lt;h2 id="server-object">server: &amp;lt;Object&amp;gt;&lt;/h2>
&lt;p>用于配置 loki 提供 http 和 gRPC 这两种服务的行为&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">server&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">http_listen_address&lt;/span>: &lt;span style="color:#ae81ff">\&amp;lt;STRING&amp;gt;&lt;/span> &lt;span style="color:#75715e"># 指定 http 服务监听的端口&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="common-objecthttpsgrafanacomdocslokinextconfigurationcommon">&lt;a href="https://grafana.com/docs/loki/next/configuration/#common">common: &amp;lt;OBJECT&amp;gt;&lt;/a>&lt;/h2>
&lt;blockquote>
&lt;p>2.4 版本之前并没有这个字段，早期 Loki 的配置文件解读起来非常混乱。但是 2.4 版本之后，可以通过 common 字段统一定义一些之前带有歧义的字段，&lt;code>common.storage&lt;/code> 可以代替 &lt;code>storage_config&lt;/code> 用以配置后端存储的信息。&lt;/p>
&lt;/blockquote>
&lt;p>通用配置。&lt;strong>在配置 Loki 组件所使用的 哈希环、存储、等等 时，可以不在每个组件单独配置，而是直接使用这里定义的通用配置。&lt;/strong>&lt;/p>
&lt;h3 id="path_prefix-string">path_prefix: &amp;lt;string&amp;gt;&lt;/h3>
&lt;p>When defined, the given prefix will be present in front of the endpoint paths.&lt;/p>
&lt;h3 id="replication_factor-int--default--3">replication_factor: &amp;lt;int&amp;gt; | default = 3&lt;/h3>
&lt;p>How many times incoming data should be replicated to the ingester component.&lt;/p>
&lt;h3 id="ring-object">ring: &amp;lt;OBJECT&amp;gt;&lt;/h3>
&lt;p>所有使用哈希环的组件的通用哈希环配置。. If a common ring is given, its values are used to define any undefined ring values. For instance, you can expect the &lt;code>heartbeat_period&lt;/code> defined in the common section to be used by the distributor&amp;rsquo;s ring, but only if the distributor&amp;rsquo;s ring itself # doesn&amp;rsquo;t have a &lt;code>heartbeat_period&lt;/code> set.
&lt;strong>kvstore: &amp;lt;OBJECT&amp;gt;&lt;/strong> #&lt;/p>
&lt;ul>
&lt;li>&lt;strong>store: &amp;lt;STRING&amp;gt;&lt;/strong> # 用于保存哈希环的存储。&lt;code>默认值：memberlist&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="storage-object">storage: &amp;lt;OBJECT&amp;gt;&lt;/h3>
&lt;blockquote>
&lt;p>该字段可以代替 &lt;code>storage_config&lt;/code> 字段。比如 ruler.storage.type 的值为 s3 的话，就会使用这里的 s3 字段的配置；若值为 local，则会使用这里的 filesystem 字段的配置&lt;/p>
&lt;/blockquote>
&lt;p>Loki 不同组件共享使用的存储配置。该字段配置存储信息，用以告诉 Loki 如何使用各种类型的存储。
&lt;strong>s3: &amp;lt;OBJECT&amp;gt;&lt;/strong># S3 类型存储的信息。包括 连接方式、数据要保存的桶 等信息&lt;/p>
&lt;ul>
&lt;li>详见下文通用配置字段 &lt;a href="#J3m3x">s3: &amp;lt;OBJECT&amp;gt;&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>azure: &amp;lt;Azure_Store_Config&amp;gt;&lt;/strong> #
&lt;strong>gcs: &amp;lt;&amp;gt;&lt;/strong> #
&lt;strong>swift: &amp;lt;&amp;gt;&lt;/strong> #
&lt;strong>filesystem:&lt;/strong>&lt;a href="https://grafana.com/docs/loki/next/configuration/#filesystem">&lt;strong>&amp;lt;OBJECT&amp;gt;&lt;/strong>&lt;/a> # 将本地文件系统作为 Loki 组件存储数据的地方&lt;/p>
&lt;ul>
&lt;li>&lt;strong>chunks_directory: &amp;lt;STRING&amp;gt;&lt;/strong># 存储 chunks 数据的目录&lt;/li>
&lt;li>&lt;strong>rules_directory: &amp;lt;STRING&amp;gt;&lt;/strong> # 存储 Loki Rules 文件的目录&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>bos: &amp;lt;OBJECT&amp;gt;&lt;/strong> # Baidu Object Storage(百度对象存储) 的信息。
&lt;strong>hedging:&lt;/strong>&lt;a href="https://grafana.com/docs/loki/next/configuration/#hedging">&lt;strong>&amp;lt;OBJECT&amp;gt;&lt;/strong>&lt;/a> #&lt;/p>
&lt;h3 id="配置示例">配置示例&lt;/h3>
&lt;p>通用的 S3 存储配置&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">common&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">storage&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">s3&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">access_key_id&lt;/span>: &lt;span style="color:#ae81ff">minioadmin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">bucketnames&lt;/span>: &lt;span style="color:#ae81ff">chunks&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">endpoint&lt;/span>: &lt;span style="color:#ae81ff">172.19.42.215&lt;/span>:&lt;span style="color:#ae81ff">9000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">insecure&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">s3forcepathstyle&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">secret_access_key&lt;/span>: &lt;span style="color:#ae81ff">minioadmin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ring&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">kvstore&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">store&lt;/span>: &lt;span style="color:#ae81ff">memberlist&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="配置如何存储-chunk-与-index-数据">配置如何存储 chunk 与 index 数据&lt;/h2>
&lt;p>影响 chunk 与 index 两类数据如何存储的最重要配置只有两个字段：&lt;code>schema_config&lt;/code> 和 &lt;code>storage_config&lt;/code>。其他字段都是对存储方式的补充。不过随着版本的更迭，从 2.4 版本开始，&lt;code>storage_config&lt;/code> 字段会逐渐被 &lt;code>common.storage&lt;/code> 字段顶替。
简单描述的话：&lt;/p>
&lt;ul>
&lt;li>schema_config 用来定义使用什么储存数据&lt;/li>
&lt;li>strage_config 用来定义如何连接存储以及存储储存数据的路径。&lt;/li>
&lt;/ul>
&lt;h3 id="schema_config-object">schema_config: &amp;lt;Object&amp;gt;&lt;/h3>
&lt;p>配置存储 chunk 与 index 两类数据的 schema(模式)。该字段用途详见 &lt;a href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/Loki/Storage(%E5%AD%98%E5%82%A8)/Storage(%E5%AD%98%E5%82%A8).md">Loki 存储&lt;/a>
schema_config 下只有一个单独的 &lt;code>configs&lt;/code> 字段，其实用 period_config 更准确~~~&lt;code>configs&lt;/code> 字段下这是一个数组，每个数组都可以用来定义&amp;quot;某一时间段 loki 存储所使用的 schema&amp;quot;。所以，&lt;code>configs&lt;/code> 字段用来定义从 哪个时间段开始使用哪种模式将 index 与 chunk 类型的数据存储到哪里去。&lt;/p>
&lt;h4 id="configs-object">configs: &amp;lt;[]Object&amp;gt;&lt;/h4>
&lt;p>&lt;strong>from: 2018-04-15&lt;/strong> # 该模式的起始时间
注意：store 与 object_store 字段的配置将会决定 Loki 使用 storage_config 中的哪个字段作为存储数据的地方
&lt;strong>schema: &amp;lt;STRING&amp;gt;&lt;/strong> # 模式的版本，当前推荐为 v11。
&lt;strong>store: &amp;lt;STRING&amp;gt;&lt;/strong> # 存放 Index 数据的存储类型。可用的值有：aws, aws-dynamo, gcp, bigtable, bigtable-hashed,cassandra, boltdb-shipper
&lt;strong>object_store: &amp;lt;STRING&amp;gt;&lt;/strong> # 存放 Chunks 数据的存储类型。可用的值有：s3、aws、azure、gcp、bigtable、gcs、cassandra、swift、filesystem。&lt;code>默认值：与 store 字段的值相同&lt;/code>。
&lt;strong>index: &amp;lt;Object&amp;gt;&lt;/strong> # 指定储存 Index 数据的行为。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>prefix: &amp;lt;STRING&amp;gt;&lt;/strong> # 表的前缀，也就是 index 文件的前缀。&lt;/li>
&lt;li>&lt;strong>period: &amp;lt;DURATION&amp;gt;&lt;/strong> # 表的周期(在当前期间中，每隔 DURATION 的时间创建一张表)。该值必须为 24h 的倍数。&lt;code>默认值：168h&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>chunks: &amp;lt;Ojbect&amp;gt;&lt;/strong> # 指定储存 Chunks 数据的行为。&lt;code>默认值：复制 index 字段的配置&lt;/code>。其内字段含义与 index 字段下的子字段功能一样。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>prefix: &amp;lt;STRING&amp;gt;&lt;/strong> #&lt;/li>
&lt;li>&lt;strong>period: &amp;lt;DURATION&amp;gt;&lt;/strong> #&lt;/li>
&lt;/ul>
&lt;p>~~注意~~~~：&lt;del>&lt;code>~~store~~&lt;/code>&lt;/del> 与 &lt;del>&lt;code>~~object_store~~&lt;/code>&lt;/del> 字段的值，将会影响 &lt;del>&lt;code>~~storage_config~~&lt;/code>&lt;/del> 字段下可以使用的字段。比如 store 为 boltdb-shipper，则 storage_config 中只有 boltdb-shipper 字段可以配置，其他无法配置，配置了就会报错。~~Loki 2.4 版本之后，推荐使用 &lt;code>common.storage&lt;/code> 字段。&lt;/p>
&lt;h3 id="storage_config-objcet">storage_config: &lt;!-- raw HTML omitted -->&lt;/h3>
&lt;blockquote>
&lt;p>Loki 2.4 版本之后，推荐使用 &lt;code>common.storage&lt;/code> 字段。&lt;/p>
&lt;/blockquote>
&lt;p>对 &lt;code>schema_config&lt;/code> 字段配置的扩充。主要用来定义储存 index 和 chunks 类型数据的存储的行为。比如 连接存储的方式、存储储存数据的位置 等等信息。
有多种存储类型可用，该字段中的配置需要根据 &lt;code>schema_config.configs.store&lt;/code> 与 &lt;code>schema_config.configs.object_store&lt;/code> 字段的值来编写。&lt;/p>
&lt;blockquote>
&lt;p>比如，在 schema_config.configs.store 中使用 aws，那么 storage_config 中就可以使用 aws 配置&lt;/p>
&lt;/blockquote>
&lt;h4 id="boltdb-object--boltdb-存储类型的配置">boltdb: &amp;lt;Object&amp;gt; # boltdb 存储类型的配置&lt;/h4>
&lt;p>仅当 schema_config.configs.store 为 boltdb 时，才配置该字段&lt;/p>
&lt;ul>
&lt;li>&lt;strong>directory: &amp;lt;STRING&amp;gt;&lt;/strong> # 存放 BoltDB 索引数据的绝对路径&lt;/li>
&lt;/ul>
&lt;h4 id="boltdb_shipper-ojbect--boltdb_shipper-存储类型的配置">boltdb_shipper: &amp;lt;Ojbect&amp;gt; # boltdb_shipper 存储类型的配置&lt;/h4>
&lt;p>仅当 schema_config.configs.store 为 boltdb_shipper 时，才配置该字段&lt;/p>
&lt;ul>
&lt;li>&lt;strong>active_index_directory: &amp;lt;STRING&amp;gt;&lt;/strong> #&lt;/li>
&lt;li>&lt;strong>cache_location: &amp;lt;STRING&amp;gt;&lt;/strong> #&lt;/li>
&lt;li>&lt;strong>cache_ttl: &amp;lt;DURATION&amp;gt;&lt;/strong> # &lt;code>默认值：24h&lt;/code>&lt;/li>
&lt;li>&lt;strong>shared_store: &amp;lt;STRING&amp;gt;&lt;/strong> # 用于保存 BoltDB 文件的存储。
&lt;ul>
&lt;li>在 2.4 版本之后，若 &lt;code>common.storage&lt;/code> 定义了 s3，且 &lt;code>schema_config.object_storage&lt;/code> 定义为 s3，则这个字段的值也为 s3。也就是说，Index 数据也会存到 S3。这个说法待验证。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="filesystem-object--filesystem-存储类型的配置">filesystem: &amp;lt;Object&amp;gt; # filesystem 存储类型的配置&lt;/h4>
&lt;p>仅当 schema_config.configs.object_store 为 filesystem 时，才配置该字段&lt;/p>
&lt;ul>
&lt;li>&lt;strong>directory: &amp;lt;STRING&amp;gt;&lt;/strong> # 存放 chunks 数据的绝对路径&lt;/li>
&lt;/ul>
&lt;h4 id="aws-object--s3-配置">aws: &amp;lt;Object&amp;gt; # S3 配置&lt;/h4>
&lt;p>仅当 schema_config.configs.object_store 为 aws 时，才配置该字段。该字段配置与通用存储配置中的 &lt;code>[s3](#zJRSQ)&lt;/code> 字段相同&lt;/p>
&lt;ul>
&lt;li>&lt;strong>bucketnames: &amp;lt;STRING&amp;gt;&lt;/strong> #&lt;/li>
&lt;li>&lt;strong>endpoint: localhost:9000&lt;/strong> #&lt;/li>
&lt;li>&lt;strong>access_key_id: minioadmin&lt;/strong> #&lt;/li>
&lt;li>&lt;strong>secret_access_key: minioadmin&lt;/strong> #&lt;/li>
&lt;li>&lt;strong>insecure: true&lt;/strong> #&lt;/li>
&lt;li>&lt;strong>s3forcepathstyle: true&lt;/strong> #&lt;/li>
&lt;/ul>
&lt;h2 id="distributor-组件配置">Distributor 组件配置&lt;/h2>
&lt;h3 id="distributor-object">distributor: &amp;lt;Object&amp;gt;&lt;/h3>
&lt;p>Loki 的 distributor(分配器) 组件配置。&lt;/p>
&lt;h2 id="ingester-组件配置">Ingester 组件配置&lt;/h2>
&lt;h3 id="ingester_client-object">ingester_client: &amp;lt;Object&amp;gt;&lt;/h3>
&lt;h3 id="ingester-object">ingester: &amp;lt;Object&amp;gt;&lt;/h3>
&lt;p>Loki 的 Ingester(摄取器) 配置，以及配置采集器如何将自己注册到键值存储
&lt;strong>lifecycler:&lt;/strong> #&lt;/p>
&lt;ul>
&lt;li>&lt;strong>address: 127.0.0.1&lt;/strong>#&lt;/li>
&lt;li>&lt;strong>ring:&lt;/strong> #
&lt;ul>
&lt;li>&lt;strong>kvstore:&lt;/strong> #
&lt;ul>
&lt;li>&lt;strong>store: &amp;lt;STRING&amp;gt;&lt;/strong> # 用于 ring 的后端存储类型。值为 consul, etcd,inmemory, memberlist&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>replication_factor: 1&lt;/strong> #&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>final_sleep: 0s&lt;/strong> #&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>chunk_idle_period: 5m&lt;/strong> #
&lt;strong>chunk_retain_period: 30s&lt;/strong> #
&lt;strong>max_transfer_retries: 0&lt;/strong> #
&lt;strong>wal: &amp;lt;Object&amp;gt;&lt;/strong> # Ingester 的 WAL 配置。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>enabled: &amp;lt;BOOLEAN&amp;gt;&lt;/strong>&lt;/li>
&lt;li>&lt;strong>dir: &amp;lt;/PATH/TO/DIR&amp;gt;&lt;/strong> # WAL 存放目录。&lt;code>默认值: wal&lt;/code>，即默认数据存储目录下的 /wal 目录。&lt;/li>
&lt;/ul>
&lt;h2 id="querier-组件配置">Querier 组件配置&lt;/h2>
&lt;h3 id="querier-objecthttpsgrafanacomdocslokilatestconfigurationquerier">querier: &amp;lt;&lt;a href="https://grafana.com/docs/loki/latest/configuration/#querier">OBJECT&lt;/a>&amp;gt;&lt;/h3>
&lt;h2 id="query-frontend-组件配置">Query frontend 组件配置&lt;/h2>
&lt;h3 id="frontend-objecthttpsgrafanacomdocslokilatestconfigurationfrontend">frontend: &amp;lt;&lt;a href="https://grafana.com/docs/loki/latest/configuration/#frontend">OBJECT&lt;/a>&amp;gt;&lt;/h3>
&lt;h2 id="ruler-组件配置">Ruler 组件配置&lt;/h2>
&lt;h3 id="ruler-object">ruler: &amp;lt;Object&amp;gt;&lt;/h3>
&lt;p>Ruler 组件配置。
&lt;strong>storage: &amp;lt;Ojbect&amp;gt;&lt;/strong> # 根据 type 的值，则会优先默认选择&lt;a href="#SJMUR">通用存储&lt;/a>。可用的值有：azure, gcs, s3, swift, local, bos。若没有通用存储，则使用 storage 字段下对应的字段。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>type: &amp;lt;STRING&amp;gt;&lt;/strong>#&lt;/li>
&lt;li>&lt;strong>s3: &amp;lt;OBJECT&amp;gt;&lt;/strong> # 配置用于存储规则文件的存储信息
&lt;ul>
&lt;li>详见下文通用配置字段 &lt;a href="#J3m3x">s3: &amp;lt;OBJECT&amp;gt;&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>rule_path: /loki/tmprules&lt;/strong> #
&lt;strong>alertmanager_url: &lt;a href="http://localhost">http://localhost&lt;/a>&lt;/strong> #
&lt;strong>ring:&lt;/strong> #&lt;/p>
&lt;ul>
&lt;li>&lt;strong>kvstore:&lt;/strong> #
&lt;ul>
&lt;li>&lt;strong>store: inmemory&lt;/strong> #&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="配置示例-1">配置示例&lt;/h3>
&lt;p>将规则文件保存在本地文件系统&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">ruler&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">alertmanager_url&lt;/span>: &lt;span style="color:#ae81ff">http://monitor-hw-cloud-k8s-alertmanager.monitoring.svc.cluster.local.:9093&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">enable_alertmanager_v2&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">external_url&lt;/span>: &lt;span style="color:#ae81ff">https://alertmanager.xx&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ring&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">kvstore&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">store&lt;/span>: &lt;span style="color:#ae81ff">memberlist&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">rule_path&lt;/span>: &lt;span style="color:#ae81ff">/tmp/loki/scratch&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">storage&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">local&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">directory&lt;/span>: &lt;span style="color:#ae81ff">/etc/loki/rules&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">local&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="table-manager-组件配置">Table manager 组件配置&lt;/h2>
&lt;h3 id="table_manager-object">table_manager: &amp;lt;Object&amp;gt;&lt;/h3>
&lt;p>Table Manager(表管理器) 组件配置，以规定数据保留的行为。该配置环境用途详见《&lt;a href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/Loki/Storage(%E5%AD%98%E5%82%A8)/Storage(%E5%AD%98%E5%82%A8).md">Loki 存储&lt;/a>》&lt;/p>
&lt;blockquote>
&lt;p>注意：&lt;/p>
&lt;ul>
&lt;li>Table Manager 无法管理存放在对象存储(比如 S3)中的数据，如果要使用对象存储来储存 Index 与 Chunks 数据，则应该自行设置 Bucket 的策略，以删除旧数据。&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>retention_deletes_enabled: &amp;lt;BOOLEAN&amp;gt;&lt;/strong> # 是否开启删除保留数据的行为。&lt;code>默认值：false&lt;/code>。
&lt;strong>retention_period: &amp;lt;DURATION&amp;gt;&lt;/strong> # 指定要保留多长时间的表。&lt;/p>
&lt;ul>
&lt;li>DURATION 的值必须是 schema_config.configs.index(或 chunks).period 字段值的倍数。&lt;code>默认值：0s&lt;/code>，即保留所有时间的表，不删除&lt;/li>
&lt;li>注意，为了避免查询超出保留期限的数据，&lt;code>chunk_store_config.max_look_back_period&lt;/code> 字段的值必须小于或等于 retention_period 的值&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>creation_grace_period: &amp;lt;DURATION&amp;gt;&lt;/strong> # 提前 DURATION 时间创建新表。&lt;code>默认值：10m&lt;/code>&lt;/p>
&lt;h2 id="limits_config-object--配置各个组件处理数据的最大值">limits_config: &amp;lt;Object&amp;gt; # 配置各个组件处理数据的最大值&lt;/h2>
&lt;p>&lt;strong>ingestrion_rate_mb: &amp;lt;FLOAT&amp;gt;&lt;/strong> # 每秒可以摄取日志量的大小，单位 MB。&lt;code>默认值：4&lt;/code>
&lt;strong>enforce_metric_name: &amp;lt;BOOLEAN&amp;gt;&lt;/strong># 强制每个样本都有一个 metric 名称。&lt;code>默认值：true&lt;/code>&lt;/p>
&lt;ul>
&lt;li>通常设为 false&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>reject_old_samples: &amp;lt;BOOLEAN&amp;gt;&lt;/strong># 旧样本是否会被拒绝。&lt;code>默认值：true&lt;/code>
&lt;strong>reject_old_samples_max_age: &amp;lt;DURATION&amp;gt;&lt;/strong> # 拒绝前可以接收的最大样本年龄。&lt;code>默认值：168h&lt;/code>&lt;/p>
&lt;ul>
&lt;li>如果拒绝旧样本，那么旧样本不能早于 reject_old_samples_max_age 时间&lt;/li>
&lt;/ul>
&lt;h2 id="其他">其他&lt;/h2>
&lt;h3 id="chunk_store_config-object">chunk_store_config: &amp;lt;Object&amp;gt;&lt;/h3>
&lt;p>配置 Loki 如何将数据存放在指定存储中。该配置环境用途详见《&lt;a href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/Loki/Storage(%E5%AD%98%E5%82%A8)/Storage(%E5%AD%98%E5%82%A8).md">Loki 存储&lt;/a>》
&lt;strong>max_look_back_period: &amp;lt;DURATION&amp;gt;&lt;/strong> # 限制可以查询多长时间的数据。&lt;code>默认值：0s&lt;/code>，即不做限制。DURATION 必须小于或等于 table_manager.retention_period 字段的值&lt;/p>
&lt;h1 id="lokiyaml-配置文件中的通用字段">loki.yaml 配置文件中的通用字段&lt;/h1>
&lt;p>这里面说明的通用字段会被配置文件中的某些字段共同使用。与 common 字段不同，这里指的字段是需要在配置文件中真实书写的；而 common 中定义的配置类似于默认值。&lt;/p>
&lt;h2 id="后端存储信息">后端存储信息&lt;/h2>
&lt;p>用来定义 如何连接存储、数据在存储中的路径 等等&lt;/p>
&lt;h3 id="s3-objecthttpsgrafanacomdocslokinextconfigurations3_storage_config--s3-存储配置">&lt;a href="https://grafana.com/docs/loki/next/configuration/#s3_storage_config">s3: &amp;lt;OBJECT&amp;gt;&lt;/a> # S3 存储配置&lt;/h3>
&lt;p>&lt;strong>endpoint: &amp;lt;STRING&amp;gt;&lt;/strong> # 连接 S3 的 endpoint。&lt;code>默认值：空&lt;/code>
&lt;strong>access_key_id: &amp;lt;STRING&amp;gt;&lt;/strong> # 连接 S3 的 AK。&lt;code>默认值：空&lt;/code>
&lt;strong>secret_access_key: &amp;lt;STRING&amp;gt;&lt;/strong> # 连接 S3 的 SK。&lt;code>默认值：空&lt;/code>
&lt;strong>bucketnames: &amp;lt;STRING&amp;gt;&lt;/strong> # 以逗号分割的桶名称列表。&lt;code>默认值：空&lt;/code>。多个桶可以均匀得分布 chunks
&lt;strong>insecure: &amp;lt;BOOLEAN&amp;gt;&lt;/strong> # 是否使用不安全的连接去连接 S3，i.e.是否使用 HTTP 连接 S3。&lt;code>默认值：false&lt;/code>
&lt;strong>s3forcepathstyle: &amp;lt;BOOLEAN&amp;gt;&lt;/strong> #
&lt;strong>http_config: &amp;lt;OBJECT&amp;gt;&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>insecure_skip_verify: &amp;lt;BOOLEAN&amp;gt;&lt;/strong> # 是否跳过证书验证。&lt;code>默认值：false&lt;/code>&lt;/li>
&lt;/ul>
&lt;h1 id="配置文件示例">配置文件示例&lt;/h1>
&lt;h2 id="loki-启动时的最小配置">loki 启动时的最小配置&lt;/h2>
&lt;h3 id="使用本地文件系统">使用本地文件系统&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">auth_enabled&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">server&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">http_listen_port&lt;/span>: &lt;span style="color:#ae81ff">3100&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">common&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">path_prefix&lt;/span>: &lt;span style="color:#ae81ff">/loki&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">storage&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">filesystem&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">chunks_directory&lt;/span>: &lt;span style="color:#ae81ff">/loki/chunks&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">rules_directory&lt;/span>: &lt;span style="color:#ae81ff">/loki/rules&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">replication_factor&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ring&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">instance_addr&lt;/span>: &lt;span style="color:#ae81ff">127.0.0.1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">kvstore&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">store&lt;/span>: &lt;span style="color:#ae81ff">inmemory&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">schema_config&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">configs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">from&lt;/span>: &lt;span style="color:#e6db74">2020-10-24&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">store&lt;/span>: &lt;span style="color:#ae81ff">boltdb-shipper&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">object_store&lt;/span>: &lt;span style="color:#ae81ff">filesystem&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">schema&lt;/span>: &lt;span style="color:#ae81ff">v11&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">index&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">prefix&lt;/span>: &lt;span style="color:#ae81ff">index_&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">period&lt;/span>: &lt;span style="color:#ae81ff">24h&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">ruler&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">alertmanager_url&lt;/span>: &lt;span style="color:#ae81ff">http://localhost:9093&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="使用-s3">使用 S3&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">auth_enabled&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">server&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">http_listen_port&lt;/span>: &lt;span style="color:#ae81ff">3100&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">common&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">path_prefix&lt;/span>: &lt;span style="color:#ae81ff">/loki&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">storage&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">s3&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">s3forcepathstyle&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">bucketnames&lt;/span>: &lt;span style="color:#ae81ff">loki-lch-test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">endpoint&lt;/span>: &lt;span style="color:#ae81ff">localhost:9000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">access_key_id&lt;/span>: &lt;span style="color:#ae81ff">minioadmin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">secret_access_key&lt;/span>: &lt;span style="color:#ae81ff">minioadmin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">insecure&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">replication_factor&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ring&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">instance_addr&lt;/span>: &lt;span style="color:#ae81ff">127.0.0.1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">kvstore&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">store&lt;/span>: &lt;span style="color:#ae81ff">inmemory&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">schema_config&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">configs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">from&lt;/span>: &lt;span style="color:#e6db74">2020-10-24&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">store&lt;/span>: &lt;span style="color:#ae81ff">boltdb-shipper&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">object_store&lt;/span>: &lt;span style="color:#ae81ff">s3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">schema&lt;/span>: &lt;span style="color:#ae81ff">v11&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">index&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">prefix&lt;/span>: &lt;span style="color:#ae81ff">index_&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">period&lt;/span>: &lt;span style="color:#ae81ff">24h&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">ruler&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">alertmanager_url&lt;/span>: &lt;span style="color:#ae81ff">http://localhost:9093&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="index-与-chunk-都使用-s3">Index 与 Chunk 都使用 S3&lt;/h2>
&lt;p>这里的 S3 使用 Mini&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">schema_config&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">configs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">from&lt;/span>: &lt;span style="color:#e6db74">2020-07-01&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">store&lt;/span>: &lt;span style="color:#ae81ff">boltdb-shipper&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">object_store&lt;/span>: &lt;span style="color:#ae81ff">aws&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">schema&lt;/span>: &lt;span style="color:#ae81ff">v11&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">index&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">prefix&lt;/span>: &lt;span style="color:#ae81ff">index_&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">period&lt;/span>: &lt;span style="color:#ae81ff">24h&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">common&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">storage&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">s3&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">access_key_id&lt;/span>: &lt;span style="color:#ae81ff">minioadmin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">bucketnames&lt;/span>: &lt;span style="color:#ae81ff">chunks&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">endpoint&lt;/span>: &lt;span style="color:#ae81ff">172.19.42.215&lt;/span>:&lt;span style="color:#ae81ff">9000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">insecure&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">s3forcepathstyle&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">secret_access_key&lt;/span>: &lt;span style="color:#ae81ff">minioadmin&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="简单完整配置">简单完整配置&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">auth_enabled&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">chunk_store_config&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">max_look_back_period&lt;/span>: &lt;span style="color:#ae81ff">0s&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">common&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ring&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">kvstore&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">store&lt;/span>: &lt;span style="color:#ae81ff">memberlist&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">storage&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">s3&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">access_key_id&lt;/span>: &lt;span style="color:#ae81ff">minioadmin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">bucketnames&lt;/span>: &lt;span style="color:#ae81ff">chunks&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">endpoint&lt;/span>: &lt;span style="color:#ae81ff">172.19.42.215&lt;/span>:&lt;span style="color:#ae81ff">9000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">insecure&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">s3forcepathstyle&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">secret_access_key&lt;/span>: &lt;span style="color:#ae81ff">minioadmin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">compactor&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">shared_store&lt;/span>: &lt;span style="color:#ae81ff">filesystem&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">distributor&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ring&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">kvstore&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">store&lt;/span>: &lt;span style="color:#ae81ff">memberlist&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">frontend&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">compress_responses&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">log_queries_longer_than&lt;/span>: &lt;span style="color:#ae81ff">5s&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">tail_proxy_url&lt;/span>: &lt;span style="color:#ae81ff">http://loki-loki-distributed-querier:3100&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">frontend_worker&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">frontend_address&lt;/span>: &lt;span style="color:#ae81ff">loki-loki-distributed-query-frontend:9095&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">ingester&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">chunk_block_size&lt;/span>: &lt;span style="color:#ae81ff">262144&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">chunk_encoding&lt;/span>: &lt;span style="color:#ae81ff">snappy&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">chunk_idle_period&lt;/span>: &lt;span style="color:#ae81ff">1h&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">chunk_retain_period&lt;/span>: &lt;span style="color:#ae81ff">1m&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">chunk_target_size&lt;/span>: &lt;span style="color:#ae81ff">1536000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">lifecycler&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ring&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">kvstore&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">store&lt;/span>: &lt;span style="color:#ae81ff">memberlist&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">replication_factor&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">max_chunk_age&lt;/span>: &lt;span style="color:#ae81ff">1h&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">max_transfer_retries&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">wal&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">dir&lt;/span>: &lt;span style="color:#ae81ff">/var/loki/wal&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">limits_config&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">enforce_metric_name&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">max_cache_freshness_per_query&lt;/span>: &lt;span style="color:#ae81ff">10m&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">reject_old_samples&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">reject_old_samples_max_age&lt;/span>: &lt;span style="color:#ae81ff">168h&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">split_queries_by_interval&lt;/span>: &lt;span style="color:#ae81ff">15m&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">memberlist&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">join_members&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">loki-loki-distributed-memberlist&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">query_range&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">align_queries_with_step&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">cache_results&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">max_retries&lt;/span>: &lt;span style="color:#ae81ff">5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">results_cache&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">cache&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">enable_fifocache&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">fifocache&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">max_size_items&lt;/span>: &lt;span style="color:#ae81ff">1024&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">validity&lt;/span>: &lt;span style="color:#ae81ff">24h&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">ruler&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">alertmanager_url&lt;/span>: &lt;span style="color:#ae81ff">https://alertmanager.xx:9093&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">enable_alertmanager_v2&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">external_url&lt;/span>: &lt;span style="color:#ae81ff">https://alertmanager.xx&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ring&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">kvstore&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">store&lt;/span>: &lt;span style="color:#ae81ff">memberlist&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">rule_path&lt;/span>: &lt;span style="color:#ae81ff">/tmp/loki/scratch&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">storage&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">local&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">directory&lt;/span>: &lt;span style="color:#ae81ff">/etc/loki/rules&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">local&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">schema_config&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">configs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">from&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2022-06-21&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">index&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">period&lt;/span>: &lt;span style="color:#ae81ff">24h&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">prefix&lt;/span>: &lt;span style="color:#ae81ff">loki_index_&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">object_store&lt;/span>: &lt;span style="color:#ae81ff">s3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">schema&lt;/span>: &lt;span style="color:#ae81ff">v12&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">store&lt;/span>: &lt;span style="color:#ae81ff">boltdb-shipper&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">server&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">http_listen_port&lt;/span>: &lt;span style="color:#ae81ff">3100&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">storage_config&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">boltdb_shipper&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">active_index_directory&lt;/span>: &lt;span style="color:#ae81ff">/var/loki/index&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">cache_location&lt;/span>: &lt;span style="color:#ae81ff">/var/loki/cache&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">cache_ttl&lt;/span>: &lt;span style="color:#ae81ff">168h&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">shared_store&lt;/span>: &lt;span style="color:#ae81ff">s3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">filesystem&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">directory&lt;/span>: &lt;span style="color:#ae81ff">/var/loki/chunks&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">table_manager&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">retention_deletes_enabled&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">retention_period&lt;/span>: &lt;span style="color:#ae81ff">0s&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Loki 衍生品</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/Loki/Loki-%E8%A1%8D%E7%94%9F%E5%93%81/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/Loki/Loki-%E8%A1%8D%E7%94%9F%E5%93%81/</guid><description/></item><item><title>Docs: Storage(存储)</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/Loki/Storage%E5%AD%98%E5%82%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/Loki/Storage%E5%AD%98%E5%82%A8/</guid><description/></item><item><title>Docs: 组件详解</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/Loki/%E7%BB%84%E4%BB%B6%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/Loki/%E7%BB%84%E4%BB%B6%E8%AF%A6%E8%A7%A3/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/architecture/">官方文档，架构&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/v2.6.x/fundamentals/architecture/components/">官方文档，架构-组件&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/dnG4Yye0cP5XtxY0VWiEDg">公众号,Grafana Loki 架构(阳明大佬翻译的官方文档)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Grafana Loki 是一套可以组合成一个功能齐全的日志堆栈组件，与其他日志记录系统不同，Loki 是基于仅索引有关日志元数据的想法而构建的：标签（就像 Prometheus 标签一样）。日志数据本身被压缩然后并存储在对象存储（例如 S3 或 GCS）的块中，甚至存储在本地文件系统上，轻量级的索引和高度压缩的块简化了操作，并显着降低了 Loki 的成本，Loki 更适合中小团队。
Grafana Loki 主要由 3 部分组成:&lt;/p>
&lt;ul>
&lt;li>loki: 日志记录引擎，负责存储日志和处理查询&lt;/li>
&lt;li>promtail: 代理，负责收集日志并将其发送给 loki&lt;/li>
&lt;li>grafana: UI 界面&lt;/li>
&lt;/ul>
&lt;h1 id="distributor分配器">Distributor(分配器)&lt;/h1>
&lt;p>Distributor 服务负责处理客户端写入的日志，它本质上是日志数据写入路径中的&lt;strong>第一站&lt;/strong>，一旦 Distributor 收到日志数据，会将其拆分为多个批次，然后并行发送给多个 Ingester。
Distributor 通过 gRPC 与 Ingester 通信，它们都是无状态的，可以根据需要扩大或缩小规模。&lt;/p>
&lt;h3 id="validation验证">Validation(验证)&lt;/h3>
&lt;h3 id="preprocessing预处理">Preprocessing(预处理)&lt;/h3>
&lt;h3 id="rate-limiting速率限制">Rate limiting(速率限制)&lt;/h3>
&lt;h3 id="forwarding转发">Forwarding(转发)&lt;/h3>
&lt;h3 id="hashing哈希">Hashing(哈希)&lt;/h3>
&lt;p>&lt;code>Distributors&lt;/code> 将一致性哈希和可配置的复制因子结合使用，以确定 &lt;code>Ingester&lt;/code> 服务的哪些实例应该接收指定的流。
流是一组与租户和唯一标签集关联的日志，使用租户 ID 和标签集对流进行 hash 处理，然后使用哈希查询要发送流的 &lt;code>Ingesters&lt;/code>。&lt;/p>
&lt;p>~~存储在 Consul 中的哈希环被用来实现一致性哈希~~，所有的 &lt;code>ingester&lt;/code> 都会使用自己拥有的一组 Token 注册到哈希环中，每个 Token 是一个随机的无符号 32 位数字，与一组 Token 一起，&lt;code>ingester&lt;/code> 将其状态注册到哈希环中，状态 &lt;code>JOINING&lt;/code> 和 &lt;code>ACTIVE&lt;/code> 都可以接收写请求，而 &lt;code>ACTIVE&lt;/code> 和 &lt;code>LEAVING&lt;/code> 的 &lt;code>ingesters&lt;/code> 可以接收读请求。在进行哈希查询时，&lt;code>distributors&lt;/code> 只使用处于请求的适当状态的 ingester 的 Token。&lt;/p>
&lt;p>为了进行哈希查找，&lt;code>distributors&lt;/code> 找到最小合适的 Token，其值大于日志流的哈希值，当复制因子大于 1 时，属于不同 &lt;code>ingesters&lt;/code> 的下一个后续 Token（在环中顺时针方向）也将被包括在结果中。&lt;/p>
&lt;p>这种哈希配置的效果是，一个 &lt;code>ingester&lt;/code> 拥有的每个 Token 都负责一个范围的哈希值，如果有三个值为 0、25 和 50 的 Token，那么 3 的哈希值将被给予拥有 25 这个 Token 的 &lt;code>ingester&lt;/code>，拥有 25 这个 Token 的 &lt;code>ingester&lt;/code>负责&lt;code>1-25&lt;/code>的哈希值范围。&lt;/p>
&lt;h3 id="quorum-consistency仲裁一致性">Quorum consistency(仲裁一致性)&lt;/h3>
&lt;p>由于所有的 &lt;code>Distributors&lt;/code> 共享对同一哈希环的访问权，所以写请求可以被发送到任何 &lt;code>Distributor&lt;/code>。&lt;/p>
&lt;p>为了确保查询结果的一致性，Loki 在读和写上使用 Dynamo 式的仲裁一致性方式，这意味着 &lt;code>Distributor&lt;/code> 将等待至少一半加一个 &lt;code>Ingesters&lt;/code> 的响应，然后再对发送的客户端进行响应。&lt;/p>
&lt;h1 id="ingester摄取器">Ingester(摄取器)&lt;/h1>
&lt;p>Ingester 服务负责将日志数据写入长期存储后端（DynamoDB、S3、Cassandra 等）。并且还会响应查询器的查询请求以返回自身内存中的数据。&lt;/p>
&lt;p>来自每个唯一标签集的日志在内存中被建立成 &lt;code>chunks(块)&lt;/code>，然后可以根据配置的时间间隔刷新到支持的后端存储。在下列情况下，块被压缩并标记为只读：&lt;/p>
&lt;ul>
&lt;li>当前块容量已满（该值可配置）&lt;/li>
&lt;li>过了太长时间没有更新当前块的内容&lt;/li>
&lt;li>刷新了&lt;/li>
&lt;/ul>
&lt;p>每当一个数据块被压缩并标记为只读时，一个可写的数据块就会取代它。如果一个 &lt;code>ingester&lt;/code> 进程崩溃或突然退出，所有尚未刷新的数据都会丢失。Loki 通常配置为多个副本（通常是 3 个）来&lt;strong>降低&lt;/strong>这种风险。&lt;/p>
&lt;p>当向持久存储刷新时，该块将根据其租户、标签和内容进行哈希处理，这意味着具有相同数据副本的多个 &lt;code>ingesters&lt;/code> 实例不会将相同的数据两次写入备份存储中，但如果对其中一个副本的写入失败，则会在备份存储中创建多个不同的块对象。有关如何对数据进行重复数据删除，请参阅 Querier。&lt;/p>
&lt;p>此外 Ingester 会验证摄取的日志行是按照时间戳递增的顺序接收的（即每条日志的时间戳都比前面的日志晚一些），当 Ingester 收到不符合这个顺序的日志时，该日志行会被拒绝并返回一个错误。&lt;/p>
&lt;ul>
&lt;li>如果传入的行与之前收到的行完全匹配（与之前的时间戳和日志文本都匹配），传入的行将被视为完全重复并被忽略。&lt;/li>
&lt;li>如果传入的行与前一行的时间戳相同，但内容不同，则接受该日志行。这意味着同一时间戳有两个不同的日志行是可能的。&lt;/li>
&lt;/ul>
&lt;p>但是，从 XX 版本开始，Ingester 添加了排序功能，通过配置&lt;a href="accept-out-of-order-writes">接收乱序写入&lt;/a>。&lt;/p>
&lt;h3 id="wal">WAL&lt;/h3>
&lt;p>上面我们也提到了 &lt;code>Ingesters&lt;/code> 将数据临时存储在内存中，如果发生了崩溃，可能会导致数据丢失，而 WAL 就可以帮助我们来提高这方面的可靠性。&lt;/p>
&lt;p>在计算机领域，WAL（Write-ahead logging，预写式日志）是数据库系统提供原子性和持久化的一系列技术。&lt;/p>
&lt;p>在使用 WAL 的系统中，所有的修改都先被写入到日志中，然后再被应用到系统状态中。通常包含 redo 和 undo 两部分信息。为什么需要使用 WAL，然后包含 redo 和 undo 信息呢？举个例子，如果一个系统直接将变更应用到系统状态中，那么在机器断电重启之后系统需要知道操作是成功了，还是只有部分成功或者是失败了（为了恢复状态）。如果使用了 WAL，那么在重启之后系统可以通过比较日志和系统状态来决定是继续完成操作还是撤销操作。&lt;/p>
&lt;p>&lt;code>redo log&lt;/code> 称为重做日志，每当有操作时，在数据变更之前将操作写入 redo log，这样当发生断电之类的情况时系统可以在重启后继续操作。&lt;code>undo log&lt;/code> 称为撤销日志，当一些变更执行到一半无法完成时，可以根据撤销日志恢复到变更之间的状态。&lt;/p>
&lt;p>Loki 中的 WAL 记录了传入的数据，并将其存储在本地文件系统中，以保证在进程崩溃的情况下持久保存已确认的数据。重新启动后，Loki 将&lt;strong>重放&lt;/strong>日志中的所有数据，然后将自身注册，准备进行后续写操作。这使得 Loki 能够保持在内存中缓冲数据的性能和成本优势，以及持久性优势（一旦写被确认，它就不会丢失数据）。&lt;/p>
&lt;h1 id="query-frontend查询前端">Query Frontend(查询前端)&lt;/h1>
&lt;p>查询前端是一个可选的服务，提供 &lt;code>Querier&lt;/code> 的 API 端点，可以用来加速读取路径。当查询前端就位时，应将传入的查询请求定向到查询前端，而不是 &lt;code>querier&lt;/code>, 为了执行实际的查询，群集中仍需要 &lt;code>querier&lt;/code> 服务。
查询前端在内部执行一些查询调整，并在内部队列中保存查询。&lt;code>querier&lt;/code> 作为 workers 从队列中提取作业，执行它们，并将它们返回到查询前端进行汇总。&lt;code>querier&lt;/code> 需要配置查询前端地址（通过&lt;code>-querier.frontend-address&lt;/code> CLI 标志），以便允许它们连接到查询前端。
查询前端是无状态的，然而，由于内部队列的工作方式，建议运行几个查询前台的副本，以获得公平调度的好处，在大多数情况下，两个副本应该足够了。&lt;/p>
&lt;h3 id="queueing队列">Queueing(队列)&lt;/h3>
&lt;p>查询前端的排队机制用于：&lt;/p>
&lt;ul>
&lt;li>确保可能导致 &lt;code>querier&lt;/code> 出现内存不足（OOM）错误的查询在失败时被重试。这允许管理员可以为查询提供不足的内存，或者并行运行更多的小型查询，这有助于降低总成本。&lt;/li>
&lt;li>通过使用先进先出队列（FIFO）将多个大型请求分配到所有 &lt;code>querier&lt;/code> 上，以防止在单个 &lt;code>querier&lt;/code> 中传送多个大型请求。&lt;/li>
&lt;li>通过在租户之间公平调度查询。&lt;/li>
&lt;/ul>
&lt;h3 id="splitting分割">Splitting(分割)&lt;/h3>
&lt;p>查询前端将较大的查询分割成多个较小的查询，在下游 &lt;code>querier&lt;/code> 上并行执行这些查询，并将结果再次拼接起来。这可以防止大型查询在单个查询器中造成内存不足的问题，并有助于更快地执行这些查询。&lt;/p>
&lt;h3 id="caching缓存">Caching(缓存)&lt;/h3>
&lt;p>查询前端支持缓存指标查询结果，并在后续查询中重复使用。如果缓存的结果不完整，查询前端会计算所需的子查询，并在下游 &lt;code>querier&lt;/code> 上并行执行这些子查询。查询前端可以选择将查询与其 step 参数对齐，以提高查询结果的可缓存性。结果缓存与任何 loki 缓存后端（当前为 memcached、redis 和内存缓存）兼容。&lt;/p>
&lt;h1 id="querier查询器">Querier(查询器)&lt;/h1>
&lt;p>Querier 查询器服务使用 LogQL 查询语言处理查询，从 Ingesters 和长期存储中获取日志。&lt;/p>
&lt;p>查询器查询所有 &lt;code>ingesters&lt;/code> 的内存数据，然后再到后端存储运行相同的查询。由于复制因子，查询器有可能会收到重复的数据。为了解决这个问题，查询器在内部对具有相同纳秒时间戳、标签集和日志信息的数据进行重复数据删除。&lt;/p>
&lt;h1 id="ruler规则管理器">Ruler(规则管理器)&lt;/h1>
&lt;h1 id="table-manger表管理器">Table Manger(表管理器)&lt;/h1>
&lt;p>Table Manager(表管理器)&lt;/p></description></item></channel></rss>