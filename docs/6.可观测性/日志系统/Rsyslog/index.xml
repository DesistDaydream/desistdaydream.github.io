<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – Rsyslog</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/Rsyslog/</link><description>Recent content in Rsyslog on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/Rsyslog/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Rsyslog</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/Rsyslog/Rsyslog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/Rsyslog/Rsyslog/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.rsyslog.com/">官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.rsyslog.com/doc/v8-stable/configuration/modules/index.html">官方文档,配置-模块&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rsyslog/rsyslog">GitHub 项目&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Rsyslog">Wiki,Rsyslog&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://man7.org/linux/man-pages/man3/syslog.3.html">Manual(手册),syslog(3)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://man7.org/linux/man-pages/man8/rsyslogd.8.html">Manual(手册),rsyslogd(8)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://wiki.archlinux.org/title/Systemd_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)/Journal_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">Arch 文档,Systemd-Journal-配合 syslog 使用&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>**Rocket-fast system for log processing(像火箭一样快的日志处理系统，简称 rsyslog) **是一款开源应用程序，用于 UNIX 和 类 Unix 操作系统，可以在 IP 网络中转发日志消息。Rsyslog 实现了基本的 Syslog 协议，并扩展了丰富的功能，比如基于内容的过滤、排队处理离线输出、支持模块、灵活的配置、使用 TCP 传输 等等.&lt;/p>
&lt;p>RsysLog 是一个日志统一管理的程序。通过 rsyslogd 这个守护进程提供服务，rsyslogd 程序是对 syslogd 的扩展，提供了更多的功能和可靠性。&lt;/p>
&lt;p>Rsyslog 提供了一个符合 &lt;a href="https://datatracker.ietf.org/doc/html/rfc5424">RFC 5424&lt;/a> 标准的日志消息系统。&lt;/p>
&lt;p>RsysLog 的特点：&lt;/p>
&lt;ul>
&lt;li>可以监听在某个端口上作为日志服务器，来手机多个主机的日志&lt;/li>
&lt;li>RsysLog 自带多个模块，可以通过模块来实现更多的功能。以 im 开头的是在收集日志时候所用到的，以 om 开头的是在输出日志时用到的(比如把收集到的日志保存在某一文件中)。&lt;/li>
&lt;/ul>
&lt;h2 id="moules模块">Moules(模块)&lt;/h2>
&lt;p>Rsyslog 采用模块化设计，可以通过加载模块来动态加载功能，模块也可以由任何第三方编写，只要符合 Rsyslog 规范即可。&lt;/p>
&lt;p>每个模块都有参数可以配置。&lt;/p>
&lt;h2 id="rsyslog-日志处理">Rsyslog 日志处理&lt;/h2>
&lt;p>Rsyslog 使用 &lt;a href="https://www.rsyslog.com/doc/v8-stable/configuration/modules/imuxsock.html">&lt;strong>imuxscok&lt;/strong>&lt;/a> 模块监听本地 Unix Socket(&lt;code>默认为 /dev/log&lt;/code>) 以接收本地系统上运行的应用程序产生的 syslog 格式的日志消息。当该 Socket 收到消息时，会通过 syslog(3) 这里面所描述的系统调用将日志消息传递给 Rsyslog。&lt;/p>
&lt;p>这个模块在 Rsyslog 的配置文件中必须进行配置，因为没有它，本地日志记录将无法进行，因为没有监听任何 Unix Socket，任何程序发往 /dev/log 的消息，也就无法接收了。&lt;/p>
&lt;p>实际上，由于 syslog 协议是标准的，绝大部分编程语言，都可以通过自身或第三方实现的 syslog 库，将日志数据直接写到 syslog 的 Socket 中。下面用 go 举例&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;log&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;log/syslog&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">sysLog&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">syslog&lt;/span>.&lt;span style="color:#a6e22e">Dial&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#a6e22e">syslog&lt;/span>.&lt;span style="color:#a6e22e">LOG_ERR&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;lichenhao&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Fatal&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">sysLog&lt;/span>.&lt;span style="color:#a6e22e">Emerg&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Hello world!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行一下，查看日志，可以看到，进程名 lichenhao，输出了一条日志消息&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>root@hw-cloud-xngy-jump-server-linux-2 /var/log&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># tail -n 1 syslog&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Oct &lt;span style="color:#ae81ff">19&lt;/span> 23:46:03 hw-cloud-xngy-jump-server-linux-2 lichenhao&lt;span style="color:#f92672">[&lt;/span>3283&lt;span style="color:#f92672">]&lt;/span>: Hello world!
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>此时如果同时在查看 /dev/log 文件，也可以看到同样的内容&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>root@hw-cloud-xngy-jump-server-linux-2 /home/lichenhao/test_dir&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># socat - /dev/log&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Broadcast message from systemd-journald@hw-cloud-xngy-jump-server-linux-2 &lt;span style="color:#f92672">(&lt;/span>Tue 2021-10-19 23:49:24 HKT&lt;span style="color:#f92672">)&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lichenhao&lt;span style="color:#f92672">[&lt;/span>3820&lt;span style="color:#f92672">]&lt;/span>: Hello world!
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="验证-rsyslog-接收日志">验证 Rsyslog 接收日志&lt;/h3>
&lt;p>看一下 rsyslog 进程打开的文件描述符&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>root@hw-cloud-xngy-jump-server-linux-2 ~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># ll /proc/$(pgrep rsyslog)/fd&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>total &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dr-x------ &lt;span style="color:#ae81ff">2&lt;/span> root root &lt;span style="color:#ae81ff">0&lt;/span> Oct &lt;span style="color:#ae81ff">19&lt;/span> 21:16 ./
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dr-xr-xr-x &lt;span style="color:#ae81ff">9&lt;/span> syslog syslog &lt;span style="color:#ae81ff">0&lt;/span> Oct &lt;span style="color:#ae81ff">19&lt;/span> 21:16 ../
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lr-x------ &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">64&lt;/span> Oct &lt;span style="color:#ae81ff">19&lt;/span> 21:16 &lt;span style="color:#ae81ff">0&lt;/span> -&amp;gt; /dev/null
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>l-wx------ &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">64&lt;/span> Oct &lt;span style="color:#ae81ff">19&lt;/span> 21:16 &lt;span style="color:#ae81ff">1&lt;/span> -&amp;gt; /dev/null
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>l-wx------ &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">64&lt;/span> Oct &lt;span style="color:#ae81ff">19&lt;/span> 21:16 &lt;span style="color:#ae81ff">2&lt;/span> -&amp;gt; /dev/null
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lrwx------ &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">64&lt;/span> Oct &lt;span style="color:#ae81ff">19&lt;/span> 21:16 &lt;span style="color:#ae81ff">3&lt;/span> -&amp;gt; &lt;span style="color:#e6db74">&amp;#39;socket:[15881]&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lr-x------ &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">64&lt;/span> Oct &lt;span style="color:#ae81ff">19&lt;/span> 21:16 &lt;span style="color:#ae81ff">4&lt;/span> -&amp;gt; /dev/urandom
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lr-x------ &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">64&lt;/span> Oct &lt;span style="color:#ae81ff">19&lt;/span> 21:16 &lt;span style="color:#ae81ff">5&lt;/span> -&amp;gt; /proc/kmsg
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lrwx------ &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">64&lt;/span> Oct &lt;span style="color:#ae81ff">19&lt;/span> 21:16 &lt;span style="color:#ae81ff">6&lt;/span> -&amp;gt; &lt;span style="color:#e6db74">&amp;#39;socket:[21398]&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>l-wx------ &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">64&lt;/span> Oct &lt;span style="color:#ae81ff">19&lt;/span> 21:16 &lt;span style="color:#ae81ff">7&lt;/span> -&amp;gt; /var/log/syslog
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>l-wx------ &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">64&lt;/span> Oct &lt;span style="color:#ae81ff">19&lt;/span> 21:16 &lt;span style="color:#ae81ff">8&lt;/span> -&amp;gt; /var/log/kern.log
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>l-wx------ &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">64&lt;/span> Oct &lt;span style="color:#ae81ff">19&lt;/span> 21:16 &lt;span style="color:#ae81ff">9&lt;/span> -&amp;gt; /var/log/auth.log
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>追踪一下进程的系统调用(这里是执行了一下 &lt;code>su - root&lt;/code> 命令产生的日志)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>root@hw-cloud-xngy-jump-server-linux-2 ~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># strace -p 595 -f -e recvmsg -s 1000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>strace: Process &lt;span style="color:#ae81ff">595&lt;/span> attached with &lt;span style="color:#ae81ff">4&lt;/span> threads
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>pid 626&lt;span style="color:#f92672">]&lt;/span> recvmsg&lt;span style="color:#f92672">(&lt;/span>3, &lt;span style="color:#f92672">{&lt;/span>msg_name&lt;span style="color:#f92672">=&lt;/span>NULL, msg_namelen&lt;span style="color:#f92672">=&lt;/span>0, msg_iov&lt;span style="color:#f92672">=[{&lt;/span>iov_base&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;lt;37&amp;gt;Oct 19 22:01:40 su: (to root) lichenhao on pts/1&amp;#34;&lt;/span>, iov_len&lt;span style="color:#f92672">=&lt;/span>8096&lt;span style="color:#f92672">}]&lt;/span>, msg_iovlen&lt;span style="color:#f92672">=&lt;/span>1, msg_control&lt;span style="color:#f92672">=[{&lt;/span>cmsg_len&lt;span style="color:#f92672">=&lt;/span>32, cmsg_level&lt;span style="color:#f92672">=&lt;/span>SOL_SOCKET, cmsg_type&lt;span style="color:#f92672">=&lt;/span>SO_TIMESTAMP_OLD, cmsg_data&lt;span style="color:#f92672">={&lt;/span>tv_sec&lt;span style="color:#f92672">=&lt;/span>1634652100, tv_usec&lt;span style="color:#f92672">=&lt;/span>471671&lt;span style="color:#f92672">}}&lt;/span>, &lt;span style="color:#f92672">{&lt;/span>cmsg_len&lt;span style="color:#f92672">=&lt;/span>28, cmsg_level&lt;span style="color:#f92672">=&lt;/span>SOL_SOCKET, cmsg_type&lt;span style="color:#f92672">=&lt;/span>SCM_CREDENTIALS, cmsg_data&lt;span style="color:#f92672">={&lt;/span>pid&lt;span style="color:#f92672">=&lt;/span>2549, uid&lt;span style="color:#f92672">=&lt;/span>0, gid&lt;span style="color:#f92672">=&lt;/span>0&lt;span style="color:#f92672">}}]&lt;/span>, msg_controllen&lt;span style="color:#f92672">=&lt;/span>64, msg_flags&lt;span style="color:#f92672">=&lt;/span>0&lt;span style="color:#f92672">}&lt;/span>, MSG_DONTWAIT&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">52&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>pid 626&lt;span style="color:#f92672">]&lt;/span> recvmsg&lt;span style="color:#f92672">(&lt;/span>3, &lt;span style="color:#f92672">{&lt;/span>msg_name&lt;span style="color:#f92672">=&lt;/span>NULL, msg_namelen&lt;span style="color:#f92672">=&lt;/span>0, msg_iov&lt;span style="color:#f92672">=[{&lt;/span>iov_base&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;lt;86&amp;gt;Oct 19 22:01:40 su: pam_unix(su-l:session): session opened for user root by lichenhao(uid=0)&amp;#34;&lt;/span>, iov_len&lt;span style="color:#f92672">=&lt;/span>8096&lt;span style="color:#f92672">}]&lt;/span>, msg_iovlen&lt;span style="color:#f92672">=&lt;/span>1, msg_control&lt;span style="color:#f92672">=[{&lt;/span>cmsg_len&lt;span style="color:#f92672">=&lt;/span>32, cmsg_level&lt;span style="color:#f92672">=&lt;/span>SOL_SOCKET, cmsg_type&lt;span style="color:#f92672">=&lt;/span>SO_TIMESTAMP_OLD, cmsg_data&lt;span style="color:#f92672">={&lt;/span>tv_sec&lt;span style="color:#f92672">=&lt;/span>1634652100, tv_usec&lt;span style="color:#f92672">=&lt;/span>471786&lt;span style="color:#f92672">}}&lt;/span>, &lt;span style="color:#f92672">{&lt;/span>cmsg_len&lt;span style="color:#f92672">=&lt;/span>28, cmsg_level&lt;span style="color:#f92672">=&lt;/span>SOL_SOCKET, cmsg_type&lt;span style="color:#f92672">=&lt;/span>SCM_CREDENTIALS, cmsg_data&lt;span style="color:#f92672">={&lt;/span>pid&lt;span style="color:#f92672">=&lt;/span>2549, uid&lt;span style="color:#f92672">=&lt;/span>0, gid&lt;span style="color:#f92672">=&lt;/span>0&lt;span style="color:#f92672">}}]&lt;/span>, msg_controllen&lt;span style="color:#f92672">=&lt;/span>64, msg_flags&lt;span style="color:#f92672">=&lt;/span>0&lt;span style="color:#f92672">}&lt;/span>, MSG_DONTWAIT&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">96&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以发现，从 fd 为 3 的 &lt;code>socket:[15881]&lt;/code> 这个文件接收到了日志信息&lt;/p>
&lt;p>看看这个文件是个啥&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>root@hw-cloud-xngy-jump-server-linux-2 ~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># lsof -p 595 -a -d 3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rsyslogd &lt;span style="color:#ae81ff">595&lt;/span> syslog 3u unix 0xffff99c534a7d800 0t0 &lt;span style="color:#ae81ff">15881&lt;/span> /run/systemd/journal/syslog type&lt;span style="color:#f92672">=&lt;/span>DGRAM
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>root@hw-cloud-xngy-jump-server-linux-2 ~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># cat /proc/net/unix | grep 15881&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ffff99c534a7d800: &lt;span style="color:#ae81ff">00000002&lt;/span> &lt;span style="color:#ae81ff">00000000&lt;/span> &lt;span style="color:#ae81ff">00000000&lt;/span> &lt;span style="color:#ae81ff">0002&lt;/span> &lt;span style="color:#ae81ff">01&lt;/span> &lt;span style="color:#ae81ff">15881&lt;/span> /run/systemd/journal/syslog
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>两种方式都指向了同一个文件 /run/systemd/journal/syslog&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>root@hw-cloud-xngy-jump-server-linux-2 ~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># ll /run/systemd/journal/syslog&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>srw-rw-rw- &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">0&lt;/span> Oct &lt;span style="color:#ae81ff">19&lt;/span> 21:16 /run/systemd/journal/syslog&lt;span style="color:#f92672">=&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这是一个 socket 文件，从 lsof 命令中可以看到是是一个用于实现 本地数据报通信的 [DGRAM 类型的 Unix Socket](/docs/IT学习笔记/1.操作系统/2.Kernel(内核)/7.Process%20 管理/Inter%20Process%20Communication(进程间通信).md 管理/Inter Process Communication(进程间通信).md)。&lt;/p>
&lt;p>这个文件替代了传统的 /dev/log 文件，/dev/log 变成了指向 /run/systemd/journal/dev-log 的软链接&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>root@hw-cloud-xngy-jump-server-linux-2 ~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># ll /dev/log&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">28&lt;/span> Oct &lt;span style="color:#ae81ff">19&lt;/span> 21:16 /dev/log -&amp;gt; /run/systemd/journal/dev-log&lt;span style="color:#f92672">=&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>但是在 CentOS 7 中，Rsyslog 依然直接使用的 /dev/log 这个 Socket。&lt;/p>
&lt;h2 id="rsyslog-的的规范">RsysLog 的的规范&lt;/h2>
&lt;p>RsysLog 使用 &lt;strong>Facility(设施)&lt;/strong> 来对各个程序产生的日志进行分类好便于管理，每个 Facility 包含 1 个或多个程序，Facility 用于约束多个程序所产生的日志数据流到同一个管道内，默认有以下几个，括号中的数字与名称相对应&lt;/p>
&lt;ul>
&lt;li>&lt;strong>kern(0)&lt;/strong> # 内核的日志。&lt;/li>
&lt;li>&lt;strong>user(1)&lt;/strong> # 用户层日志，比如用户使用 logger 命令来记录日志功能。&lt;/li>
&lt;li>&lt;strong>mail(2)&lt;/strong> # 邮件相关的日志。&lt;/li>
&lt;li>&lt;strong>daemon(3)&lt;/strong> # 系统服务产生的信息，比如 systemd 管理的服务的信息。&lt;/li>
&lt;li>&lt;strong>authpriv(4)&lt;/strong> # 认证相关的日志，比如 login、ssh、su 等需要账号密码的。&lt;/li>
&lt;li>&lt;strong>syslog(5)&lt;/strong> # 由 syslog 相关协议产生的信息，就是 rsyslog 程序本身的日志信息。&lt;/li>
&lt;li>&lt;strong>lpr(6)&lt;/strong> # 打印相关的日志。&lt;/li>
&lt;li>&lt;strong>news(7)&lt;/strong> # 新闻组服务器有关的日志。&lt;/li>
&lt;li>&lt;strong>uucp(8)&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>cron(9)&lt;/strong> # 定时任务产生的日志。&lt;/li>
&lt;li>&lt;strong>authpriv(10)&lt;/strong> # 与 auth 类似，更多的是记录账号私人的日志，包括 pam 模块运作的日志。&lt;/li>
&lt;li>&lt;strong>ftp(11)&lt;/strong> # 与 ftp 相关的信息。&lt;/li>
&lt;li>&lt;strong>16 到 23.local0 到 local7&lt;/strong> # 保留给本机用户自定义设施。比如可以把某些设施设置成 local0，然后供 RsysLog 收集日志&lt;/li>
&lt;/ul>
&lt;p>日志的级别：&lt;/p>
&lt;ul>
&lt;li>emerg(0)：错误信息。最严重日志等级，意味着系统将要宕机&lt;/li>
&lt;li>alert(1)：错误信息。比 emerg 等级轻&lt;/li>
&lt;li>crit(2)：错误信息。&lt;/li>
&lt;li>err(3)：错误信息。err 就是 error&lt;/li>
&lt;li>warn(4)：警告信息。可能有问题，但是还不至于影响到程序的运行。warn 就是 warnning&lt;/li>
&lt;li>notice(5)：基本信息。&lt;/li>
&lt;li>info(6)：基本信息。&lt;/li>
&lt;li>debug(7)：特殊的等级，用来 troubleshooting 时产生的日志&lt;/li>
&lt;li>none：特殊的等级。表示某个 Facility 不需要执行 Action。i.e.即不记录的级别&lt;/li>
&lt;/ul>
&lt;p>RsysLog 默认把日志保存在 /var/log/ 目录下的文件中，该目录下常见的日志文件有：&lt;/p>
&lt;ul>
&lt;li>messages # 几乎所有系统发生的信息都会记录在这个文件中
&lt;ul>
&lt;li>Ubuntu 发型版中是 syslog 文件&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>boot.log #&lt;/li>
&lt;li>cron # 记录 crontab 执行的信息&lt;/li>
&lt;li>dmesg # 系统开机时内核检查过程所产生的各项信息&lt;/li>
&lt;li>maillog 与 mail/* # 记录邮件的往来日志主要是 postfix(SMTP)与 dovecot(POP3)所产生的信息&lt;/li>
&lt;li>secure # 只要涉及到需要输入账号密码的软件，那么当登录时，会被记录在这个文件中。包括系统的 login 程序、su 和 sudo、ssh 等
&lt;ul>
&lt;li>Ubuntu 发型版中是 auth.og 文件&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>lastlog # 记录系统上所有账号最近一次登录系统时的相关信息。lastlog 命令就是利用这个文件记录的信息来展示的&lt;/li>
&lt;li>wtmp 与 faillog # 记录正确登录系统的账号信息与错误登录时所使用的账号信息。last 命令时读取的 wtmp 中的内容&lt;/li>
&lt;/ul>
&lt;h2 id="日志的格式">日志的格式&lt;/h2>
&lt;p>Linux 相关的日志格式一般为：&lt;/p>
&lt;p>月 日 时:分:秒 主机名 程序名:事件内容&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>随着时代的发展，各个应用程序大部分都通过各自的日志库，将日志直接写到磁盘上了~~&lt;/p>
&lt;h1 id="rsyslog-关联文件">Rsyslog 关联文件&lt;/h1>
&lt;p>&lt;strong>/etc/rsyslog.conf&lt;/strong> # rsyslog 程序的基础配置文件&lt;/p>
&lt;ul>
&lt;li>&lt;strong>/etc/rsyslog.d/*.conf&lt;/strong> # rsyslog.conf 可以包含该目录下的配置文件。常用于定义单独程序的日志配置，以便日后方便管理&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>/etc/sysconfig/rsyslog&lt;/strong> # rsyslogd 运行时参数配置
&lt;strong>/dev/log&lt;/strong> # 一个 Unix Domain Socket，rsyslogd 从这个 Socket 中读取日志消息。这是传统的日志服务 Socket。在 CentOS 8 及以后的版本中，该文件是一个指向 /run/systemd/journal/syslog 文件的软链接&lt;/p>
&lt;ul>
&lt;li>&lt;strong>/run/systemd/journal/syslog&lt;/strong> # rsyslogd 会持续监听该 Socket，当有数据传入时，使用 recvmsg() 调用获取日志数据。
&lt;ul>
&lt;li>这个文件是由 Systemd 提供的 Socket 文件，用以兼容传统日志服务。在 /etc/systemd/journald.conf 配置文件中，可以看到默认 ForwardToSyslog=yes 设置，即表示将自己的日志转发到 syslog 中。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>/var/log/*&lt;/strong> # 日志记录的位置。根据 rsyslog 程序的基础配置文件，各个 Linux 发行版的文件名也许不同，但是大体都差不多&lt;/p>
&lt;ul>
&lt;li>./message # CentOS 发行版的绝大部分日志文件
&lt;ul>
&lt;li>./syslog # Ubuntu 发型版的绝大部分日志文件&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>./secure # 所有 authpriv 设施的日志，比如 su、sudo、sshd 的登录信息等等。&lt;/li>
&lt;li>/var/log/maillog mail 记录&lt;/li>
&lt;li>/var/log/utmp&lt;/li>
&lt;li>/var/log/wtmp 登陆记录信息（last 命令即读取此日志）&lt;/li>
&lt;/ul></description></item><item><title>Docs: RsysLog 配置详解</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/Rsyslog/RsysLog-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/Rsyslog/RsysLog-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://man7.org/linux/man-pages/man5/rsyslog.conf.5.html">Manual(手册),rsyslog.conf(5)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>配置文件新老版本有两种格式，下面这两种写法，都可以表示让 Rsyslog 加载 imuxsock 模块&lt;/p>
&lt;ul>
&lt;li>&lt;strong>$ModLoad imuxsock # 老版本语法&lt;/strong>&lt;/li>
&lt;li>&lt;strong>module(load=&amp;ldquo;imuxsock&amp;rdquo;) # 新版本语法&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h1 id="modules-模块配置">MODULES 模块配置&lt;/h1>
&lt;p>&lt;strong>module(load=&amp;ldquo;imuxsock&amp;rdquo;)&lt;/strong># 加载 imuxsock 模块，以便让 Rsyslog 可以监听 /dev/log 这个 Unix Socket 以接收日志消息&lt;!-- raw HTML omitted -->配置 TCP 协议的 syslog 接收，用于在日志服务器的时候配置&lt;/p>
&lt;ul>
&lt;li>&lt;strong>$ModLoad imtcp&lt;/strong> # 使用 tcp 进行传输&lt;/li>
&lt;li>&lt;strong>$InputTCPServerRun 514&lt;/strong> # 监听在 514 端口上&lt;/li>
&lt;/ul>
&lt;h1 id="global-directives-全局指令配置">GLOBAL DIRECTIVES 全局指令配置&lt;/h1>
&lt;p>配置 rsyslogd 的全局属性，比如主信息队列大小等&lt;/p>
&lt;h1 id="template-模板配置">TEMPLATE 模板配置&lt;/h1>
&lt;p>该配置用于自定义日志的保存路径，日志格式，可以动态生成文件名等信息。定义后，可以在 RULE 中进行引用，该指令用法详见&lt;/p>
&lt;pre>&lt;code># 定义一个Location字段的模板，第一个是老版本的定义方法，第二个是新版的定义方法
$template RemoteLogs,&amp;quot;/var/log/%HOSTNAME%/%PROGRAMNAME%.log&amp;quot; *
template (name=&amp;quot;RemoteLogs&amp;quot; type=&amp;quot;string&amp;quot; string=&amp;quot;/var/log/%HOSTNAME%/%PROGRAMNAME%.log&amp;quot;)
&lt;/code>&lt;/pre>
&lt;h2 id="template-模板介绍">TEMPLATE 模板介绍&lt;/h2>
&lt;p>template 是 rsyslog 的一个关键功能，可以允许用户指定想要的任何日志格式。e.g.自定义日志的保存路径，日志格式。还可以动态生成文件名等信息&lt;/p>
&lt;p>template 有两种表示方式：&lt;/p>
&lt;ul>
&lt;li>7.0 之前的版本使用 $template&lt;/li>
&lt;li>7.0 之后的版本使用 template()&lt;/li>
&lt;/ul>
&lt;h3 id="语法结构templateparameters">语法结构：template(Parameters)&lt;/h3>
&lt;p>Parameters 必须包含 name 字段且 name 唯一，并指明类型，以及该类型的具体内容
template(NAME TYPE Descriptions)&lt;/p>
&lt;ol>
&lt;li>TYPE
&lt;ol>
&lt;li>list&lt;/li>
&lt;li>subtree&lt;/li>
&lt;li>string&lt;/li>
&lt;li>plugin&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>EXAMPLE
&lt;ol>
&lt;li>template (name=&amp;ldquo;RemoteLogs&amp;rdquo; type=&amp;ldquo;string&amp;rdquo; string=&amp;quot;/var/log/%HOSTNAME%/%PROGRAMNAME%.log&amp;quot;)&lt;/li>
&lt;li>:programname, regex, &amp;ldquo;Keepalived.*&amp;rdquo; -/var/log/keepalived/keepalived.log # 根据程序名字，使用正则表达式，开头是 Keepalived 的日志，写入到/var/log/keepalived/keepalived.log 文件中&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>可用的属性详见：&lt;a href="https://www.rsyslog.com/doc/v8-stable/configuration/properties.html">https://www.rsyslog.com/doc/v8-stable/configuration/properties.html&lt;/a>&lt;/p>
&lt;p>$template NAME,&amp;ldquo;PATH&amp;rdquo; # 定义一个名为 NAME 的模板来作为 RULE 配置段中 Location 字段使用，在 Location 字段中通过?NAME 来引用该对应模板&lt;/p>
&lt;ul>
&lt;li>PATH 的可用变量
&lt;ul>
&lt;li>&lt;code>%HOSTNAME%&lt;/code> # 用来区分是哪台远程主机的。&lt;/li>
&lt;li>&lt;code>%PROGRAMNAME%&lt;/code> # 通过日志标准格式中的 ProgramName 字段来进行分类保存日志。i.e.每个程序名是单独的一个文件&lt;/li>
&lt;li>&lt;code>%$year%%$month%%$day%&lt;/code> # 用来以时间格式命名文件&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="rules-规则配置">RULES 规则配置&lt;/h1>
&lt;p>Rules 配置段是 rsyslog 程序得以正常运行的最基础配置。规则的内容是告诉 rsyslog 处理日志的方式。i.e.每条规则用于定义以下几个内容：1.什么设施的。2.什么优先级。3.需要被记录在哪里&lt;/p>
&lt;p>每条规则占用一行，规则的内容分为两个字段：Selector(选择器)和 Action(动作 i.e.即对选择器选择出来的设施和优先级进行什么操作)。这两个字段由一个或多个空格或者制表符分割。而 Selector 则是通过 Facility(设施)、分隔符、Priority(优先级，也可以用 Level(级别)来表示)来对整个系统的所有设施日志进行筛选&lt;/p>
&lt;h3 id="syntax语法">Syntax(语法)&lt;/h3>
&lt;p>&lt;strong>Selector Action&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Selector(选择器)&lt;/strong># 根据匹配规则，选择要处理的日志。选择器由 Facility 和 Priority 组成，以 &lt;code>.&lt;/code> 分隔
&lt;ul>
&lt;li>&lt;strong>Facility.Priority&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Action(动作)&lt;/strong> # 描述了如何处理选择器选择出来的日志信息&lt;/li>
&lt;/ul>
&lt;h4 id="selectors选择器">Selectors(选择器)&lt;/h4>
&lt;p>多个选择器以 &lt;code>;&lt;/code> 符号分隔&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Facility(设施)&lt;/strong> # Facility 定义了 rsyslog 可以选择的设施都有哪些(注：该字段用 * 表示则表示所有支持的 Facility)。多个 Facility 以 &lt;code>,&lt;/code> 分隔
&lt;ul>
&lt;li>可选择设施见上文的对 Facility 的介绍&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>匹配符号&lt;/strong> # 除了 &lt;code>.&lt;/code> 还可以使用另外两个符号来进行更细致的匹配。
&lt;ul>
&lt;li>&lt;code>.&lt;/code> # 选择包含且比 Prority 还要严重的优先级&lt;/li>
&lt;li>&lt;code>.=&lt;/code> # 仅选择包含 Prority 所定义的优先级&lt;/li>
&lt;li>&lt;code>.!&lt;/code> # 选择不包含 Prority 中所定义的优先级的其余优先级&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Priority(日志的优先级，也可以叫日志的 Level 级别)&lt;/strong> # Priority 定义了每条信息的严重程度，下面以严重程度从高到低进行排序。括号中的数字指级别(注：该字段用*表示所有级别)
&lt;ul>
&lt;li>emerg(0)：错误信息。最严重日志等级，意味着系统将要宕机&lt;/li>
&lt;li>alert(1)：错误信息。比 emerg 等级轻&lt;/li>
&lt;li>crit(2)：错误信息。&lt;/li>
&lt;li>err(3)：错误信息。err 就是 error&lt;/li>
&lt;li>warn(4)：警告信息。可能有问题，但是还不至于影响到程序的运行。warn 就是 warnning&lt;/li>
&lt;li>notice(5)：基本信息。&lt;/li>
&lt;li>info(6)：基本信息。&lt;/li>
&lt;li>debug(7)：特殊的等级，用来 troubleshooting 时产生的日志&lt;/li>
&lt;li>none：特殊的等级。表示某个 Facility 不需要执行 Action。i.e.即不记录的级别&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="action动作">Action(动作)&lt;/h4>
&lt;p>匹配到的日志将要执行的动作。是保存本地文件、打印、保存到远程主机、转存到数据库中等等行为&lt;/p>
&lt;ul>
&lt;li>&lt;strong>RegularFile(常规文件)&lt;/strong> # 把日志写入到某个文件，文件路径可以引用模板。
&lt;ul>
&lt;li>如果在该字段前面记上 &lt;code>-&lt;/code>，则表示先将日志保存在内存的 buffer 中，等数据量足够大时再一次性将数据写入磁盘文件中。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>RemoteMachine(远程主机)&lt;/strong> # &lt;code>@HOST&lt;/code> 或者 &lt;code>@@HOST&lt;/code>。用于把日志发送给远程主机。@使用 UDP 协议，@@使用 TCP 协议，默认使用 514 端口&lt;/li>
&lt;li>*，表示把日志发送给目前在线的所有人，类似于 wall 命令&lt;/li>
&lt;li>| COMMAND：用于把日志信息通过管道符送给后面定义的 COMMAND 来进行处理&lt;/li>
&lt;li>打印机或其他。&lt;/li>
&lt;li>使用者名称(显示给用户)。&lt;/li>
&lt;li>&lt;strong>stop&lt;/strong> # Discard(丢弃)，老版本使用 &lt;code>~&lt;/code> 表示&lt;/li>
&lt;/ul>
&lt;h3 id="centos-系统中的默认配置示例">CentOS 系统中的默认配置示例&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 内核产生的日志全部送入到终端设施中，用于在系统出现严重问题，无法使用默认屏幕观察，可以使用笔记本连接到封闭服务器的RS232端口后，查看日志&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># kern.* /dev/console&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 除了mail、authpriv、cron以外的优先级为info且以上的所有设施的信息写入/var/log/messages文件中，Action字段以绝对的路径表示&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>*.info;mail.none;authpriv.none;cron.none /var/log/messages
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 认证方面的日志写入/var/log/secure文件中&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>authpriv.* /var/log/secure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 同上，用于邮件相关日志。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mail.* -/var/log/maillog
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 同上，用于定时任务相关日志&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cron.* /var/log/cron
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 任何优先级为emerg的设施日志以wall广播的方式给所有在系统登录的账号&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>*.emerg :omusrmsg:*
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 将uucp和news的等级为crit且以上的日志写入spooler文件中&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>uucp,news.crit /var/log/spooler
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># local7这个设施的所有优先级的日志写到/var/log/boot.log文件中&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>local7.* /var/log/boot.log
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 下面是对Rule的应用实例：&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 除了sshd、keepalived、haproxy程序的日志以外，其余所有程序的所有等级的日志保存在/var/log/messages文件中&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>*.*;sshd,keepalived,haproxy.none /var/log/messages
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 将local2设施的所有级别的日志写入名为RemoteLogs模板定义的文件中，Action字段引用模板RemoteLogs的路径&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>local2.* ?RemoteLogs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 以下符号用来告知 rsyslog 停止对日志消息的进一步处理，即只把日志写入指定的路径中，而不再重复写到默认的 /var/log/* 目录下&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;amp; stop &lt;span style="color:#75715e"># 注意，该指令仅对其上面一行的规则起作用，想让哪一条的规则生效，则在哪一行下面加上该组符号&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 把所有程序的所有级别的日志发送给192.168.10.10这台机器上，Action字段为远程主机&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>*.* @@192.168.10.10
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 丢弃所有日志,Action字段为丢弃&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>*.* stop
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 来自于远程主机的日志，不包括本机的日志全部写入到RemoteLogs模板定义的路径中&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>:FROMHOST-IP, !isequal, &lt;span style="color:#e6db74">&amp;#34;127.0.0.1&amp;#34;&lt;/span> -?RemoteLogs
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="outputs--输出">outputs # 输出&lt;/h1>
&lt;h1 id="配置实例">配置实例&lt;/h1>
&lt;p>注意：所有&lt;/p>
&lt;h2 id="实例一设置一台主机为日志服务器可以收集其余网络上的主机的日志信息">实例一：设置一台主机为日志服务器，可以收集其余网络上的主机的日志信息&lt;/h2>
&lt;p>日志服务器与其余服务器形成服务端与客户端的关系，服务端的日志服务监听某个端口，来收集其余机器发送过来的日志信息&lt;/p>
&lt;p>Server 端：&lt;/p>
&lt;pre>&lt;code>$ModLoad imtcp
$InputTCPServerRun 514
$template RemoteLogs,&amp;quot;/var/log/%HOSTNAME%/%PROGRAMNAME%.log&amp;quot; *
*.* ?RemoteLogs
&amp;amp; stop
&lt;/code>&lt;/pre>
&lt;p>:FROMHOST-IP, !isequal, &amp;ldquo;127.0.0.1&amp;rdquo; -?DynaFile&lt;/p>
&lt;p>client 端：&lt;/p>
&lt;p>在日志规则的 Location 配置段使用远程主机配置&lt;/p>
&lt;pre>&lt;code>*.* @@192.168.10.10 #把所有程序的所有级别的日志发送给192.168.10.10这台机器
注意：如果使用UDP进行传输，则使用1个@
&lt;/code>&lt;/pre>
&lt;h2 id="实例二配置-keepalived-程序的日志到指定的目录">实例二：配置 keepalived 程序的日志到指定的目录&lt;/h2>
&lt;p>直接使用实例一 Server 端的后三条配置即可&lt;/p>
&lt;h2 id="实例三根据正则匹配忽略某些日志信息写入到文件中">实例三：根据正则匹配忽略某些日志信息写入到文件中&lt;/h2>
&lt;p>下面的配置表示：如果输出日志的程序为 kubelet，并且日志信息中包含 Setting volume ownership 这种内容，那么所有匹配到的日志全部丢弃，不写入到文件中。&lt;/p>
&lt;pre>&lt;code>cat &amp;gt; /etc/rsyslog.d/ignore-kubelet-volume.conf &amp;lt;&amp;lt; EOF
if (\$programname == &amp;quot;kubelet&amp;quot;) and (\$msg contains &amp;quot;Setting volume ownership&amp;quot;) then {
stop
}
EOF
&lt;/code>&lt;/pre></description></item></channel></rss>