<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦的站点 – Storage(存储)</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/Prometheus/Storage%E5%AD%98%E5%82%A8/</link><description>Recent content in Storage(存储) on 断念梦的站点</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/Prometheus/Storage%E5%AD%98%E5%82%A8/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Storage(存储)</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/Prometheus/Storage%E5%AD%98%E5%82%A8/Storage%E5%AD%98%E5%82%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/Prometheus/Storage%E5%AD%98%E5%82%A8/Storage%E5%AD%98%E5%82%A8/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://prometheus.io/docs/prometheus/latest/storage/">官方文档,存储&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/prometheus/prometheus/tree/main/tsdb">GitHub,TSDB&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/prometheus/prometheus/blob/main/tsdb/docs/format/README.md">GitHub 文档,TSDB format&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.jianshu.com/p/ef9879dfb9ef">简书,Prometheus 存储机制&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/J3oK0idEFbvErOwBEBrNSg">公众号,Prometheus 存储流向&lt;/a>&lt;/li>
&lt;li>以下所有内容均基于 Prometheus 2.27+ 版本&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Prometheus 自身就包含一个 &lt;strong>Time Series Database(时间序列数据库)&lt;/strong>，所以 Prometheus 采集完指标数据后，可以保存在本地，由 Prometheus 自身来管理这些数据。当然，Prometheus 也可以通过一种称为 &lt;strong>Remote Write&lt;/strong> 的技术，将数据存储到 &lt;strong>Remote Storage Systems(远程存储系统)&lt;/strong>。&lt;/p>
&lt;p>本地存储限制了 Prometheus 的可扩展性，带来了数据持久化、高科用等一系列的问题。为了解决单节点存储的限制，Prometheus 没有自己实现集群存储，而是提供了远程读写的接口，让用户自己选择合适的时序数据库来实现 Prometheus 的扩展性。&lt;/p>
&lt;h1 id="local-storage本地存储">Local Storage(本地存储)&lt;a class="td-heading-self-link" href="#local-storage%e6%9c%ac%e5%9c%b0%e5%ad%98%e5%82%a8" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;strong>注意：&lt;/strong> Prometheus 的本地存储不支持不兼容 POSIX 的文件系统，因为可能会发生不可恢复的损坏。不支持 NFS 文件系统（包括 AWS 的 EFS）。NFS 可能符合 POSIX，但大多数实现均不符合。强烈建议使用本地文件系统以提高可靠性。Prometheus 启动时会有如下 warn：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/lh6032/1623820971678-3d263b32-2760-4e77-9a22-b2c438bc62d5.png" alt="image.png">&lt;/p>
&lt;p>并且，经过实践，在数据量足够多时，当 Prometheus 压缩数据时，有不小的概率会丢失某个 Block 中的 meta.json 文件。进而导致压缩失败，并频繁产生告警，详见故障：&lt;a href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/Prometheus/Prometheus%20%E7%AE%A1%E7%90%86/%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/compaction%20failed.md">compaction failed&lt;/a>&lt;/p>
&lt;p>Prometheus 的本地时间序列数据库将数据以自定义的高效格式存储在本地存储上。也就是说，Prometheus 采集到的指标数据，以文件的形式直接保存在操作系统的文件系统中。On-disk Layout 章节将会详细介绍这些数据在本地存储中布局。&lt;/p>
&lt;h2 id="on-disk-layout磁盘上的布局">On-disk Layout(磁盘上的布局)&lt;a class="td-heading-self-link" href="#on-disk-layout%e7%a3%81%e7%9b%98%e4%b8%8a%e7%9a%84%e5%b8%83%e5%b1%80" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>本地存储的目录看起来应该是下面这个样子：&lt;/p>
&lt;pre>&lt;code>./data
├── 01F5JX01DJSHFY98CREKE3F2FX
│   ├── chunks
│   │   └── 000001
│   ├── index
│   ├── meta.json
│   └── tombstones
├── 01F5MQ3BR42QWB0JVKA1T4BBHP
│   ├── chunks
│   │   └── 000001
│   ├── index
│   ├── meta.json
│   └── tombstones
├── 01F5MXZ46MQYP9QH0G0XVTQF0D
│   ├── chunks
│   │   └── 000001
│   ├── index
│   ├── meta.json
│   └── tombstones
├── chunks_head
│   ├── 000009
│   └── 000010
├── queries.active
└── wal
├── 00000008
├── 00000009
├── 00000010
└── checkpoint.00000007
└── 00000000
&lt;/code>&lt;/pre>
&lt;p>Prometheus 的存储大致可以分为两类&lt;/p>
&lt;ul>
&lt;li>Block(块) # 以 01 开头的那些目录。根据 &lt;a href="https://github.com/ulid/spec">ULID&lt;/a> 原理命名。&lt;/li>
&lt;li>Wal(预写日志) # wal 目录部分&lt;/li>
&lt;/ul>
&lt;p>注意：虽然持久化后的 Block 数据都是上述结构，但是在持久化之前，时序数据是保存在内存中，并且实现了 WAL 机制。&lt;/p>
&lt;p>最新写入的数据保存在内存中的 Block 中，每隔 2 小时都会持久化到磁盘中(也就是生成 01F5JX01DJSHFY98CREKE3F2FX 这种块目录)。为了防止程序崩溃导致数据丢失，实现了 &lt;strong>Write Ahead Log(预写日志，简称 WAL)&lt;/strong> 机制，启动时会以写入日志(WAL)的方式来实现重播，从而恢复数据。wal 目录中的这些原始数据尚未被 &lt;strong>Compaction(压缩)&lt;/strong>，因为，它们的大小明显要超过 Block 中 chunks 目录中数据的大小。Prometheus 最少保留 3 个 WAL 文件。&lt;/p>
&lt;p>通过 Block 的形式保存所有的时序数据，可以明显提高 Prometheus 的查询效率，当查询一段时间范围内的所有样本数据时，只需要简单的从落在该范围内的 Block 中查询数据即可。&lt;/p>
&lt;h3 id="block块">Block(块)&lt;a class="td-heading-self-link" href="#block%e5%9d%97" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>Prometheus 存储在本地的时间序列数据，被抽象为一个一个的 **Block(块)。**每个 Block 都是一个单独的目录，Block 由 4 个部分组成：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>chunks/*&lt;/strong> # Block(块) 中的所有时序数据所在的子目录。
&lt;ul>
&lt;li>chunks 目录中的时序数据被分组为一个或多个分段文件，默认情况下，每个文件的最大容量为 512MiB。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>meta.json&lt;/strong> # 元数据文件&lt;/li>
&lt;li>&lt;strong>index&lt;/strong> # 索引文件。根据指标名称和标签索引到 chunks 目录中的时间序列数据&lt;/li>
&lt;li>&lt;strong>tombstones&lt;/strong> # 如果通过 API 删除时序数据，删除记录会保存在单独的逻辑文件 &lt;code>tombstone&lt;/code> 当中。
&lt;ul>
&lt;li>也就是说，被删除的数据不会直接立即删除。而是通过 tombstones 文件建立一个删除记录，在通过 PromQL 查找数据时，不会搜索 tombstones 文件中标记的数据。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>默认情况下，一个 Block(块) 最少包含 2 个小时的时序数据。可以通过下面这些参数设置每个 Block 所包含数据的时间周期。&lt;/p>
&lt;ul>
&lt;li>&amp;ndash;storage.tsdb.min-block-duration # 一个存储 Block 的最小时间。默认 2 小时&lt;/li>
&lt;li>&amp;ndash;storage.tsdb.max-block-duration # 一个存储 Block 的最大时间
&lt;ul>
&lt;li>每隔一段时间，这些 2 小时的 Block 将会通过 Compaction 机制，压缩成时间周期更长的 Block，以节省存储空间。通常这个时间周期是 &amp;ndash;storage.tsdb.retention 标志指定的时间的 10%，若是 10% 的结果小于 31 天，则默认最大时间为 31 天。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&amp;ndash;storage.tsdb.retention # 块的过期时间.&lt;/li>
&lt;li>&lt;strong>举个栗子&lt;/strong>:&lt;/li>
&lt;li>假设有如下设置:
&lt;ul>
&lt;li>&amp;ndash;storage.tsdb.max-block-duration=1h&lt;/li>
&lt;li>&amp;ndash;storage.tsdb.max-block-duration=15m&lt;/li>
&lt;li>&amp;ndash;storage.tsdb.retention=2h&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>再假设你在今天的 16:00 搜索了数据,那么你最多可以搜索到今天 13:00(即 16-(2-1))的数据.而最少也可以搜索到 14:45(如果期间数据在产生)往后的数据。&lt;/li>
&lt;/ul>
&lt;p>我们将存储层划分为一个一个的 Block(块)，每个块在一段时间内保存所有序列。每个块充当独立数据库。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/lh6032/1620917933638-6655ade5-1636-43c7-8c72-20889f3218ed.jpeg" alt="1889435-999d351beafab3c6.jpg">
这样每次查询，仅检查所请求的时间范围内的块子集，查询执行时间自然会减少。
这种布局也使删除旧数据变得非常容易，一旦块的时间范围完全落后于配置的保留边界，它就可以完全丢弃。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/lh6032/1620917933635-d92e1ace-518f-4c73-b33e-03688b64b9ec.jpeg" alt="1889435-af09c18b8bbeb5fc.jpg">&lt;/p>
&lt;h3 id="index索引">Index(索引)&lt;a class="td-heading-self-link" href="#index%e7%b4%a2%e5%bc%95" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>一般 Prometheus 的查询是把 metric+label 做关键字的，而且是很宽泛，完全用户自定义的字符，因此没办法使用常规的 sql 数据库，prometheus 的存储层使用了全文检索中的&lt;a href="https://nlp.stanford.edu/IR-book/html/htmledition/a-first-take-at-building-an-inverted-index-1.html">倒排索引&lt;/a>概念，将每个时间序列视为一个小文档。而 metric 和 label 对应的是文档中的单词。
例如，requests_total{path=&amp;quot;/status&amp;quot;, method=&amp;ldquo;GET&amp;rdquo;, instance=&amp;ldquo;10.0.0.1:80&amp;rdquo;}是包含以下单词的文档：&lt;/p>
&lt;ul>
&lt;li>name=&amp;ldquo;requests_total&amp;rdquo;&lt;/li>
&lt;li>path=&amp;quot;/status&amp;quot;&lt;/li>
&lt;li>method=&amp;ldquo;GET&amp;rdquo;&lt;/li>
&lt;li>instance=&amp;ldquo;10.0.0.1:80&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;h3 id="compaction压缩">Compaction(压缩)&lt;a class="td-heading-self-link" href="#compaction%e5%8e%8b%e7%bc%a9" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>这些 2 小时的 Block 会在后台压缩成更大的 Block，数据压缩合并成更高级别的 Block 文件后删除低级别的 Block 文件。一个高级别的块通常包含数据保留时间 10%的时间周期的时序数据，若是 10% 小于 31 天，则默认为 31 天。&lt;/p>
&lt;p>这个和 leveldb、rocksdb 等 LSM 树的思路一致。这些设计和 Gorilla 的设计高度相似，所以 Prometheus 几乎就是等于一个缓存 TSDB。它本地存储的特点决定了它不能用于 long-term 数据存储，只能用于短期窗口的 timeseries 数据保存和查询，并且不具有高可用性（宕机会导致历史数据无法读取）。&lt;/p>
&lt;p>所以，Prometheus 实现了下文的 &lt;a href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/Prometheus/Storage(%E5%AD%98%E5%82%A8).md">Remote Storage 功能&lt;/a>，可以通过该功能，将数据通过网络转存到其他存储中。但是，需要仔细评估它们，性能和效率方面会产生很大的变化。&lt;/p>
&lt;p>现有存储层的样本压缩功能在 Prometheus 的早期版本中发挥了重要作用。单个原始数据点占用 16 个字节的存储空间。但当普罗米修斯每秒收集数十万个数据点时，可以快速填满硬盘。但，同一系列中的样本往往非常相似，我们可以利用这一类样品（同样 label）进行有效的压缩。批量压缩一系列的许多样本的块，在内存中，将每个数据点压缩到平均 1.37 字节的存储。这种压缩方案运行良好，也保留在新版本 2 存储层的设计中。具体压缩算法可以参考：&lt;a href="http://www.vldb.org/pvldb/vol8/p1816-teller.pdf">Facebook 的“Gorilla”论文中&lt;/a>&lt;/p>
&lt;h3 id="基准测试">基准测试&lt;a class="td-heading-self-link" href="#%e5%9f%ba%e5%87%86%e6%b5%8b%e8%af%95" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>cpu、内存、查询效率都比 1.x 版本得到了大幅度的提升
具体测试结果参考：&lt;a href="https://dzone.com/articles/prometheus-2-times-series-storage-performance-anal">https://dzone.com/articles/prometheus-2-times-series-storage-performance-anal&lt;/a>&lt;/p>
&lt;h2 id="存储配置">存储配置&lt;a class="td-heading-self-link" href="#%e5%ad%98%e5%82%a8%e9%85%8d%e7%bd%ae" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>对于本地存储，prometheus 提供了一些配置项，主要包括：&lt;/p>
&lt;ul>
&lt;li>&amp;ndash;storage.tsdb.path: 存储数据的目录，默认为 data/，如果要挂外部存储，可以指定该目录&lt;/li>
&lt;li>&amp;ndash;storage.tsdb.retention.time: 数据过期清理时间，默认保存 15 天&lt;/li>
&lt;li>&amp;ndash;storage.tsdb.retention.size: 实验性质，声明数据块的最大值，不包括 wal 文件，如 512MB&lt;/li>
&lt;/ul>
&lt;p>Prometheus 将所有当前使用的块保留在内存中。此外，它将最新使用的块保留在内存中，最大内存可以通过 storage.local.memory-chunks 标志配置。&lt;/p>
&lt;h3 id="容量规划">容量规划&lt;a class="td-heading-self-link" href="#%e5%ae%b9%e9%87%8f%e8%a7%84%e5%88%92" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>容量规划除了上边说的内存，还有磁盘存储规划，这和你的 Prometheus 的架构方案有关。&lt;/p>
&lt;ul>
&lt;li>如果是单机 Prometheus，计算本地磁盘使用量。&lt;/li>
&lt;li>如果是 Remote-Write，和已有的 Tsdb 共用即可。&lt;/li>
&lt;li>如果是 Thanos 方案，本地磁盘可以忽略（2H)，计算对象存储的大小就行。&lt;/li>
&lt;/ul>
&lt;p>在一般情况下，Prometheus 中存储的每一个样本大概占用 1-2 字节大小。如果需要对 Prometheus Server 的本地磁盘空间做容量规划时，可以通过以下公式计算：&lt;/p>
&lt;pre>&lt;code>磁盘大小 = 保留时间 * 每秒获取样本数 * 样本大小
&lt;/code>&lt;/pre>
&lt;p>**保留时间(retention_time_seconds)**和 &lt;strong>样本大小(bytes_per_sample)&lt;/strong> 不变的情况下，如果想减少本地磁盘的容量需求，只能通过减少每秒获取样本数(ingested_samples_per_second)的方式。&lt;/p>
&lt;p>因此有两种手段，一是减少时间序列的数量，二是增加采集样本的时间间隔。&lt;/p>
&lt;p>考虑到 Prometheus 会对时间序列进行压缩，因此减少时间序列的数量效果更明显。&lt;/p>
&lt;p>Prometheus 每 2 小时将已缓冲在内存中的数据压缩到磁盘上的块中。包括 Chunks、Indexes、Tombstones、Metadata，这些占用了一部分存储空间。一般情况下，Prometheus 中存储的每一个样本大概占用 1-2 字节大小（1.7Byte）。可以通过 PromQL 来查看每个样本平均占用多少空间：&lt;/p>
&lt;pre>&lt;code>rate(prometheus_tsdb_compaction_chunk_size_bytes_sum[2h])
/
rate(prometheus_tsdb_compaction_chunk_samples_sum[2h])
{instance=&amp;quot;0.0.0.0:8890&amp;quot;, job=&amp;quot;prometheus&amp;quot;} 1.252747585939941
&lt;/code>&lt;/pre>
&lt;p>查看当前每秒获取的样本数：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>rate&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>prometheus_tsdb_head_samples_appended_total&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>1h&lt;span style="color:#ce5c00;font-weight:bold">])&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>有两种手段，一是减少时间序列的数量，二是增加采集样本的时间间隔。考虑到 Prometheus 会对时间序列进行压缩，因此减少时间序列的数量效果更明显。&lt;/p>
&lt;p>举例说明：&lt;/p>
&lt;ul>
&lt;li>采集频率 30s，机器数量 1000，Metric 种类 6000，1000_6000_2_60_24 约 200 亿，30G 左右磁盘。&lt;/li>
&lt;li>只采集需要的指标，如 match[], 或者统计下最常使用的指标，性能最差的指标。&lt;/li>
&lt;/ul>
&lt;p>以上磁盘容量并没有把 wal 文件算进去，wal 文件 (Raw Data) 在 Prometheus 官方文档中说明至少会保存 3 个 Write-Ahead Log Files，每一个最大为 128M(实际运行发现数量会更多)。&lt;/p>
&lt;p>因为我们使用了 Thanos 的方案，所以本地磁盘只保留 2H 热数据。Wal 每 2 小时生成一份 Block 文件，Block 文件每 2 小时上传对象存储，本地磁盘基本没有压力。&lt;/p>
&lt;p>关于 Prometheus 存储机制，可以看&lt;a href="http://www.xuyasong.com/?p=1601">这篇&lt;/a>。&lt;/p>
&lt;h2 id="故障恢复">故障恢复&lt;a class="td-heading-self-link" href="#%e6%95%85%e9%9a%9c%e6%81%a2%e5%a4%8d" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>如果怀疑数据库中的损坏引起的问题，则可以通过使用 storage.local.dirtyflag 配置，来启动服务器来强制执行崩溃恢复。
如果没有帮助，或者如果您只想删除现有的数据库，可以通过删除存储目录的内容轻松地启动&lt;/p>
&lt;h1 id="remote-storage远程存储">Remote Storage(远程存储)&lt;a class="td-heading-self-link" href="#remote-storage%e8%bf%9c%e7%a8%8b%e5%ad%98%e5%82%a8" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>Prometheus 的本地存储在可伸缩性和持久性方面受到单个节点的限制。Prometheus 并没有尝试解决 Prometheus 本身中的集群存储，而是提供了一组允许与远程存储系统集成的接口。&lt;/p>
&lt;p>Prometheus 通过下面几种方式与远程存储系统集成：&lt;/p>
&lt;ul>
&lt;li>Prometheus 可以以标准格式将其采集到的样本数据写入到指定的远程 URL。&lt;/li>
&lt;li>Prometheus 可以以标准格式从指定的远程 URL 读取(返回)样本数据。&lt;/li>
&lt;li>Prometheus 可以以标准格式从其他 Prometheus 接收样本。&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/lh6032/1616069469195-edb3fcc9-e672-43be-b6b9-fcc52d6ed497.jpeg" alt="">&lt;/li>
&lt;/ul>
&lt;p>说白了，Prometheus 规定了一种标准格式，可以将采集到的指标数据实时发送给 Adapter，然后由 Adapter 处理后，在存储在第三方存储中(比如 InfluxDB、OpenTSDB 等等)。&lt;/p>
&lt;p>同时，Prometheus 自身也自带了一个 Adapter，可以在启动程序时，指定 &lt;code>--web.enable-remote-write-receiver&lt;/code> 标志即可，此时，Prometheus 会在 &lt;code>/api/v1/write&lt;/code> 端点上暴露 Remote Write API，其他 Prometheus 可以将采集到的指标数据发送到 &lt;code>http://PrometheusIP:PORT:9090/api/v1/write&lt;/code> 上，这与 Federate(联邦) 功能有点类似，都可以用来汇总数据的。此时，这个开启了 Remote Write API 的 Prometheus 通常被称为 &lt;strong>Receiver(接收器)&lt;/strong>，象征着这个 Prometheus 可以接收其他符合 Prometheus 标准格式的指标数据。&lt;/p>
&lt;p>其他的集成在 Adapter 要么可以自己实现，要么就继承在第三方存储中，在 &lt;a href="https://prometheus.io/docs/operating/integrations/#remote-endpoints-and-storage">官方文档,集成方式-远程端点和存储&lt;/a> 章节中可以看到现阶段所有可以实现 Remote Write API 的 Adapter 以及 第三方存储。&lt;/p>
&lt;p>有关在 Prometheus 中配置远程存储集成的详细信息，请参阅 Prometheus 配置文档的 &lt;a href="https://prometheus.io/docs/prometheus/latest/configuration/configuration/#remote_write">远程写入&lt;/a> 和&lt;a href="https://prometheus.io/docs/prometheus/latest/configuration/configuration/#remote_read">远程读取&lt;/a> 部分。&lt;/p>
&lt;p>有关请求和响应消息的详细信息，请参阅&lt;a href="https://github.com/prometheus/prometheus/blob/master/prompb/remote.proto">远程存储协议缓冲区定义&lt;/a>。&lt;/p>
&lt;p>注意：&lt;/p>
&lt;ul>
&lt;li>读写协议都使用基于 HTTP 的快速压缩协议缓冲区编码。该协议尚未被认为是稳定的 API，当可以安全地假定 Prometheus 和远程存储之间的所有跃点都支持 HTTP/2 时，该协议将来可能会更改为在 HTTP/2 上使用 gRPC。&lt;/li>
&lt;li>在 Remote Read 的实现中，读取路径上，Prometheus 仅从远端获取一组标签选择器和时间范围的原始系列数据。PromQL 对原始数据的所有评估仍然在 Prometheus 本身中进行。这意味着远程读取查询具有一定的可伸缩性限制，因为所有必需的数据都需要先加载到查询的 Prometheus 服务器中，然后再在其中进行处理。但是，暂时认为支持 PromQL 的完全分布式评估是不可行的。&lt;/li>
&lt;/ul>
&lt;h2 id="远程读">远程读&lt;a class="td-heading-self-link" href="#%e8%bf%9c%e7%a8%8b%e8%af%bb" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>在远程读的流程当中，当用户发起查询请求后，Promthues 将向 remote_read 中配置的 URL 发起查询请求(matchers,ranges)，Adaptor 根据请求条件从第三方存储服务中获取响应的数据。同时将数据转换为 Promthues 的原始样本数据返回给 Prometheus Server。
当获取到样本数据后，Promthues 在本地使用 PromQL 对样本数据进行二次处理。&lt;/p>
&lt;h2 id="远程写">远程写&lt;a class="td-heading-self-link" href="#%e8%bf%9c%e7%a8%8b%e5%86%99" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>用户可以在 Promtheus 配置文件中指定 Remote Write(远程写) 的 URL 地址，一旦设置了该配置项，Prometheus 将样本数据通过 HTTP 的形式发送给 Adaptor(适配器)。而用户则可以在适配器中对接外部任意的服务。外部服务可以是真正的存储系统，公有云的存储服务，也可以是消息队列等任意形式。&lt;/p>
&lt;h2 id="配置">配置&lt;a class="td-heading-self-link" href="#%e9%85%8d%e7%bd%ae" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>配置非常简单，只需要将对应的地址配置下就行&lt;/p>
&lt;pre>&lt;code>remote_write:
- url: &amp;quot;http://localhost:9201/write&amp;quot;
remote_read:
- url: &amp;quot;http://localhost:9201/read&amp;quot;
&lt;/code>&lt;/pre>
&lt;h4 id="heading">&lt;a class="td-heading-self-link" href="#heading" aria-label="Heading self-link">&lt;/a>&lt;/h4>
&lt;h1 id="压缩示例">压缩示例&lt;a class="td-heading-self-link" href="#%e5%8e%8b%e7%bc%a9%e7%a4%ba%e4%be%8b" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>root@hw-cloud-xngy-jump-server-linux-2 /mnt/sfs_turbo/monitoring-prometheus-prometheus-monitor-hw-cloud-k8s-prometheus-0-pvc-9ca02cc7-33f2-4059-807d-196c78a1e728/prometheus-db&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># ll&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>total &lt;span style="color:#0000cf;font-weight:bold">180&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxrwxrwx &lt;span style="color:#0000cf;font-weight:bold">40&lt;/span> root root &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">11&lt;/span> 09:00 ./
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxrwxrwx &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> root root &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Aug &lt;span style="color:#0000cf;font-weight:bold">17&lt;/span> 09:40 ../
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Aug &lt;span style="color:#0000cf;font-weight:bold">30&lt;/span> 13:26 01FEARAQ8BSD82FA4TDR516476/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Aug &lt;span style="color:#0000cf;font-weight:bold">30&lt;/span> 13:26 01FEARB5KS3BXX3GPQTMDQ5ZFD/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Sep &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> 13:01 01FEN0FGFRRF6VKPM1RT41SXJ4/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Sep &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span> 07:02 01FF6CNJS2V4QK65SXG31QMQZ6/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Sep &lt;span style="color:#0000cf;font-weight:bold">17&lt;/span> 01:02 01FFQRVFSQHH62X3K9CPA2Y7MZ/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Sep &lt;span style="color:#0000cf;font-weight:bold">23&lt;/span> 19:02 01FG95195EKPKK985Z1XJQ4M1P/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Sep &lt;span style="color:#0000cf;font-weight:bold">30&lt;/span> 13:03 01FGTH81ZQ5RPGTD5VNWXYWTAK/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">7&lt;/span> 07:05 01FHBXE6D4J7994S2FWQTBSN1K/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">8&lt;/span> 01:00 01FHDV5JG0JT9V0V5F7EJPGB7R/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">9&lt;/span> 13:01 01FHFRZ1B9EKAHBYA9VF7MABH1.tmp-for-deletion/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">9&lt;/span> 11:00 01FHHFWEFK55FNSAVZQQWJ5XZ6/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">9&lt;/span> 13:00 01FHHPR5QJG9C5Q98WHDAEJJM1/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">9&lt;/span> 13:00 01FHHPRNDK82JK6X12V6CX9SSK/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">9&lt;/span> 13:01 01FHHPS3NR7M2E8MAV37S61ME6/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">9&lt;/span> 15:00 01FHHXKY9K68GB1DST73HWM4W4/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">9&lt;/span> 17:00 01FHJ4FM7G4WVNH4SR7N4909PQ/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">9&lt;/span> 19:00 01FHJBBBGRB14DDKQ6G0MM3N36/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">9&lt;/span> 21:00 01FHJJ72QHW1JMZY44466EAFPE/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">9&lt;/span> 23:00 01FHJS2SZH369ZGEQF2WJCX97N/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span> 01:00 01FHJZYH7G903FDNBKKGKGGZM8/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span> 03:00 01FHK6T8FKEQE3F61EZAT0PB6C/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span> 05:00 01FHKDNZQJZKKCV9AXFDGQ48M3/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span> 07:00 01FHKMHPZH8DSC18W69H6E1H7X/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span> 09:00 01FHKVDE7F7AXTCMAT437TAW8X/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span> 11:00 01FHM295FJ6GWFC1YSBVN1P2SC/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span> 13:00 01FHM94WQJP3BYQV6X4RTG5G6T/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span> 15:00 01FHMG0KZHBH8J58D874RTHCEP/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span> 17:00 01FHMPWB7FRVXRAGZBDB8JM1FG/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span> 19:00 01FHMXR2FK0VZTDTH2M43KXTQ5/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span> 21:00 01FHN4KSQFXY291W9PDWR15XPC/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span> 23:00 01FHNBFGZGXTR6KZHSQ7HPG19E/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">11&lt;/span> 01:00 01FHNJB87GHRBG8BAVBGZG5FHE/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">11&lt;/span> 03:00 01FHNS6ZFJ3Z4AP894F4YE5RKP/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">11&lt;/span> 05:00 01FHP02PQG6NA8REWSAEKP1STW/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">11&lt;/span> 07:00 01FHP6YDZFB88DFPYB7RQBSMA2/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">11&lt;/span> 09:00 01FHPDT57J3XW0SSQRDSAAASF1/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">11&lt;/span> 09:00 chunks_head/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-rw-r--r-- &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> Sep &lt;span style="color:#0000cf;font-weight:bold">27&lt;/span> 21:49 lock
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-rw-r--r-- &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">20001&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">11&lt;/span> 10:09 queries.active
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">11&lt;/span> 09:00 wal/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>root@hw-cloud-xngy-jump-server-linux-2 /mnt/sfs_turbo/monitoring-prometheus-prometheus-monitor-hw-cloud-k8s-prometheus-0-pvc-9ca02cc7-33f2-4059-807d-196c78a1e728/prometheus-db&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># mv 01FHHPS3NR7M2E8MAV37S61ME6 /root/backup/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>root@hw-cloud-xngy-jump-server-linux-2 /mnt/sfs_turbo/monitoring-prometheus-prometheus-monitor-hw-cloud-k8s-prometheus-0-pvc-9ca02cc7-33f2-4059-807d-196c78a1e728/prometheus-db&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># [root@hw-cloud-xngy-jump-server-linux-2 /mnt/sfs_turbo/monitoring-prometheus-prometheus-monitor-hw-cloud-k8s-prometheus-0-pvc-9ca02cc7-33f2-4059-807d-196c78a1e728/prometheus-db]#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>root@hw-cloud-xngy-jump-server-linux-2 /mnt/sfs_turbo/monitoring-prometheus-prometheus-monitor-hw-cloud-k8s-prometheus-0-pvc-9ca02cc7-33f2-4059-807d-196c78a1e728/prometheus-db&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>root@hw-cloud-xngy-jump-server-linux-2 /mnt/sfs_turbo/monitoring-prometheus-prometheus-monitor-hw-cloud-k8s-prometheus-0-pvc-9ca02cc7-33f2-4059-807d-196c78a1e728/prometheus-db&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># ll&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>total &lt;span style="color:#0000cf;font-weight:bold">176&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxrwxrwx &lt;span style="color:#0000cf;font-weight:bold">39&lt;/span> root root &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">11&lt;/span> 10:09 ./
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxrwxrwx &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> root root &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Aug &lt;span style="color:#0000cf;font-weight:bold">17&lt;/span> 09:40 ../
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Aug &lt;span style="color:#0000cf;font-weight:bold">30&lt;/span> 13:26 01FEARAQ8BSD82FA4TDR516476/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Aug &lt;span style="color:#0000cf;font-weight:bold">30&lt;/span> 13:26 01FEARB5KS3BXX3GPQTMDQ5ZFD/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Sep &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> 13:01 01FEN0FGFRRF6VKPM1RT41SXJ4/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Sep &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span> 07:02 01FF6CNJS2V4QK65SXG31QMQZ6/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Sep &lt;span style="color:#0000cf;font-weight:bold">17&lt;/span> 01:02 01FFQRVFSQHH62X3K9CPA2Y7MZ/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Sep &lt;span style="color:#0000cf;font-weight:bold">23&lt;/span> 19:02 01FG95195EKPKK985Z1XJQ4M1P/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Sep &lt;span style="color:#0000cf;font-weight:bold">30&lt;/span> 13:03 01FGTH81ZQ5RPGTD5VNWXYWTAK/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">7&lt;/span> 07:05 01FHBXE6D4J7994S2FWQTBSN1K/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">8&lt;/span> 01:00 01FHDV5JG0JT9V0V5F7EJPGB7R/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">9&lt;/span> 13:01 01FHFRZ1B9EKAHBYA9VF7MABH1.tmp-for-deletion/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">9&lt;/span> 11:00 01FHHFWEFK55FNSAVZQQWJ5XZ6/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">9&lt;/span> 13:00 01FHHPR5QJG9C5Q98WHDAEJJM1/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">9&lt;/span> 13:00 01FHHPRNDK82JK6X12V6CX9SSK/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">9&lt;/span> 15:00 01FHHXKY9K68GB1DST73HWM4W4/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">9&lt;/span> 17:00 01FHJ4FM7G4WVNH4SR7N4909PQ/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">9&lt;/span> 19:00 01FHJBBBGRB14DDKQ6G0MM3N36/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">9&lt;/span> 21:00 01FHJJ72QHW1JMZY44466EAFPE/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">9&lt;/span> 23:00 01FHJS2SZH369ZGEQF2WJCX97N/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span> 01:00 01FHJZYH7G903FDNBKKGKGGZM8/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span> 03:00 01FHK6T8FKEQE3F61EZAT0PB6C/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span> 05:00 01FHKDNZQJZKKCV9AXFDGQ48M3/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span> 07:00 01FHKMHPZH8DSC18W69H6E1H7X/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span> 09:00 01FHKVDE7F7AXTCMAT437TAW8X/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span> 11:00 01FHM295FJ6GWFC1YSBVN1P2SC/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span> 13:00 01FHM94WQJP3BYQV6X4RTG5G6T/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span> 15:00 01FHMG0KZHBH8J58D874RTHCEP/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span> 17:00 01FHMPWB7FRVXRAGZBDB8JM1FG/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span> 19:00 01FHMXR2FK0VZTDTH2M43KXTQ5/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span> 21:00 01FHN4KSQFXY291W9PDWR15XPC/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span> 23:00 01FHNBFGZGXTR6KZHSQ7HPG19E/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">11&lt;/span> 01:00 01FHNJB87GHRBG8BAVBGZG5FHE/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">11&lt;/span> 03:00 01FHNS6ZFJ3Z4AP894F4YE5RKP/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">11&lt;/span> 05:00 01FHP02PQG6NA8REWSAEKP1STW/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">11&lt;/span> 07:00 01FHP6YDZFB88DFPYB7RQBSMA2/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">11&lt;/span> 09:00 01FHPDT57J3XW0SSQRDSAAASF1/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">11&lt;/span> 09:00 chunks_head/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-rw-r--r-- &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> Sep &lt;span style="color:#0000cf;font-weight:bold">27&lt;/span> 21:49 lock
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-rw-r--r-- &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">20001&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">11&lt;/span> 10:09 queries.active
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">11&lt;/span> 10:09 wal/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>root@hw-cloud-xngy-jump-server-linux-2 /mnt/sfs_turbo/monitoring-prometheus-prometheus-monitor-hw-cloud-k8s-prometheus-0-pvc-9ca02cc7-33f2-4059-807d-196c78a1e728/prometheus-db&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># ll 01FHHPS3NR7M2E8MAV37S61ME6&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ls: cannot access &lt;span style="color:#4e9a06">&amp;#39;01FHHPS3NR7M2E8MAV37S61ME6&amp;#39;&lt;/span>: No such file or directory
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>root@hw-cloud-xngy-jump-server-linux-2 /mnt/sfs_turbo/monitoring-prometheus-prometheus-monitor-hw-cloud-k8s-prometheus-0-pvc-9ca02cc7-33f2-4059-807d-196c78a1e728/prometheus-db&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># ll&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>total &lt;span style="color:#0000cf;font-weight:bold">136&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxrwxrwx &lt;span style="color:#0000cf;font-weight:bold">29&lt;/span> root root &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">11&lt;/span> 10:35 ./
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxrwxrwx &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> root root &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Aug &lt;span style="color:#0000cf;font-weight:bold">17&lt;/span> 09:40 ../
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Aug &lt;span style="color:#0000cf;font-weight:bold">30&lt;/span> 13:26 01FEARAQ8BSD82FA4TDR516476/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Aug &lt;span style="color:#0000cf;font-weight:bold">30&lt;/span> 13:26 01FEARB5KS3BXX3GPQTMDQ5ZFD/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Sep &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> 13:01 01FEN0FGFRRF6VKPM1RT41SXJ4/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Sep &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span> 07:02 01FF6CNJS2V4QK65SXG31QMQZ6/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Sep &lt;span style="color:#0000cf;font-weight:bold">17&lt;/span> 01:02 01FFQRVFSQHH62X3K9CPA2Y7MZ/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Sep &lt;span style="color:#0000cf;font-weight:bold">23&lt;/span> 19:02 01FG95195EKPKK985Z1XJQ4M1P/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Sep &lt;span style="color:#0000cf;font-weight:bold">30&lt;/span> 13:03 01FGTH81ZQ5RPGTD5VNWXYWTAK/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">7&lt;/span> 07:05 01FHBXE6D4J7994S2FWQTBSN1K/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">8&lt;/span> 01:00 01FHDV5JG0JT9V0V5F7EJPGB7R/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">9&lt;/span> 13:00 01FHHPRNDK82JK6X12V6CX9SSK/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span> 17:00 01FHMPWB7FRVXRAGZBDB8JM1FG/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span> 19:00 01FHMXR2FK0VZTDTH2M43KXTQ5/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span> 21:00 01FHN4KSQFXY291W9PDWR15XPC/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span> 23:00 01FHNBFGZGXTR6KZHSQ7HPG19E/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">11&lt;/span> 01:00 01FHNJB87GHRBG8BAVBGZG5FHE/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">11&lt;/span> 03:00 01FHNS6ZFJ3Z4AP894F4YE5RKP/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">11&lt;/span> 05:00 01FHP02PQG6NA8REWSAEKP1STW/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">11&lt;/span> 07:00 01FHP6YDZFB88DFPYB7RQBSMA2/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">11&lt;/span> 09:00 01FHPDT57J3XW0SSQRDSAAASF1/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">11&lt;/span> 10:33 01FHPK51H3650KFJ4QVSD1VRBX/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">11&lt;/span> 10:33 01FHPK5B0QGC4WTV8HXBAJC3HH/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">11&lt;/span> 10:33 01FHPK5KH2PG7G01DQECF0CN3Q/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">11&lt;/span> 10:33 01FHPK5WG49AN9B78W08PH8Q2M/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">11&lt;/span> 10:34 01FHPK65DB93Q1C71QSMBGM36C/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">11&lt;/span> 10:35 01FHPK7W5TEA4JV0388AFMH0TM/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">11&lt;/span> 10:32 chunks_head/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-rw-r--r-- &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">11&lt;/span> 10:31 lock
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-rw-r--r-- &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">20001&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">11&lt;/span> 10:35 queries.active
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">11&lt;/span> 10:32 wal/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>root@hw-cloud-xngy-jump-server-linux-2 /mnt/sfs_turbo/monitoring-prometheus-prometheus-monitor-hw-cloud-k8s-prometheus-0-pvc-9ca02cc7-33f2-4059-807d-196c78a1e728/prometheus-db&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># ll&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>total &lt;span style="color:#0000cf;font-weight:bold">96&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxrwxrwx &lt;span style="color:#0000cf;font-weight:bold">19&lt;/span> root root &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">11&lt;/span> 10:36 ./
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxrwxrwx &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> root root &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Aug &lt;span style="color:#0000cf;font-weight:bold">17&lt;/span> 09:40 ../
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Aug &lt;span style="color:#0000cf;font-weight:bold">30&lt;/span> 13:26 01FEARAQ8BSD82FA4TDR516476/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Aug &lt;span style="color:#0000cf;font-weight:bold">30&lt;/span> 13:26 01FEARB5KS3BXX3GPQTMDQ5ZFD/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Sep &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> 13:01 01FEN0FGFRRF6VKPM1RT41SXJ4/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Sep &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span> 07:02 01FF6CNJS2V4QK65SXG31QMQZ6/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Sep &lt;span style="color:#0000cf;font-weight:bold">17&lt;/span> 01:02 01FFQRVFSQHH62X3K9CPA2Y7MZ/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Sep &lt;span style="color:#0000cf;font-weight:bold">23&lt;/span> 19:02 01FG95195EKPKK985Z1XJQ4M1P/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Sep &lt;span style="color:#0000cf;font-weight:bold">30&lt;/span> 13:03 01FGTH81ZQ5RPGTD5VNWXYWTAK/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">7&lt;/span> 07:05 01FHBXE6D4J7994S2FWQTBSN1K/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">11&lt;/span> 05:00 01FHP02PQG6NA8REWSAEKP1STW/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">11&lt;/span> 07:00 01FHP6YDZFB88DFPYB7RQBSMA2/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">11&lt;/span> 09:00 01FHPDT57J3XW0SSQRDSAAASF1/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">11&lt;/span> 10:35 01FHPK919H3DMC9YQMQX6D2MPY/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">11&lt;/span> 10:36 01FHPK9V6C09SHQ0VK189R8VR4/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">11&lt;/span> 10:36 01FHPKA8TKRQ080T2KYKCZGBHX/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">11&lt;/span> 10:36 01FHPKAQNCTF4TKTPHCTW87EKV/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">11&lt;/span> 10:32 chunks_head/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-rw-r--r-- &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">11&lt;/span> 10:31 lock
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-rw-r--r-- &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">20001&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">11&lt;/span> 10:37 queries.active
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> lichenhao &lt;span style="color:#0000cf;font-weight:bold">2000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">11&lt;/span> 10:32 wal/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>root@hw-cloud-xngy-jump-server-linux-2 /mnt/sfs_turbo/monitoring-prometheus-prometheus-monitor-hw-cloud-k8s-prometheus-0-pvc-9ca02cc7-33f2-4059-807d-196c78a1e728/prometheus-db&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到，Prometheus 逐步压缩一天的所有 Block，并逐步压缩到单一的 Block 中。10 月 9 日 与 10 日的 Block 逐步压缩，统一到了 10 月 7 日的 Block 中。&lt;/p></description></item><item><title>Docs: Data Model(数据模型)</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/Prometheus/Storage%E5%AD%98%E5%82%A8/Data-Model%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/Prometheus/Storage%E5%AD%98%E5%82%A8/Data-Model%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://prometheus.io/docs/concepts/data_model/">官方文档，概念-数据模型&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://yunlzheng.gitbook.io/prometheus-book/parti-prometheus-ji-chu/promql">yunlzheng 文档&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Prometheus 从根本上将所有数据存储为 &lt;a href="https://en.wikipedia.org/wiki/Time_series">Time Series(时间序列)&lt;/a>：属于同一度量标准和同一组标注维的带有时间戳的值流。除了存储的时间序列外，Prometheus 可能会生成临时派生的时间序列作为查询的结果。&lt;/p>
&lt;h2 id="time-series-data时间序列数据-概念">Time-Series Data(时间序列数据) 概念&lt;a class="td-heading-self-link" href="#time-series-data%e6%97%b6%e9%97%b4%e5%ba%8f%e5%88%97%e6%95%b0%e6%8d%ae-%e6%a6%82%e5%bf%b5" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Time_series">Wiki&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.influxdata.com/what-is-time-series-data/">InfluxDB 对时间序列数据的定义&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://get.influxdata.com/rs/972-GDU-533/images/why%20time%20series.pdf">这是论文&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Time Series(时间序列)&lt;/strong> 是一组按照时间发生先后顺序进行排列的数据点序列。通常一组时间序列的时间间隔为一恒定值（如 1 秒，5 分钟，12 小时，7 天，1 年），因此时间序列可以作为离散时间数据进行分析处理。时间序列广泛应用于数理统计、信号处理、模式识别、计量经济学、数学金融、天气预报、地震预测、脑电图、控制工程、航空学、通信工程以及绝大多数涉及到时间数据测量的应用科学与工程学。&lt;/p>
&lt;p>&lt;strong>&lt;a href="https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/2.%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E6%95%B0%E6%8D%AE/%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E6%95%B0%E6%8D%AE.md">Time Series Data&lt;/a>(时间序列数据，简称 series)&lt;/strong> 是在一段时间内通过重复 Measurement(测量) 而获得的观测值的集合；可以将这些观测值绘制于图形之上，它会有一个数据轴和一个时间轴。&lt;/p>
&lt;p>从另一个角度看，时间序列数据是在不同时间上收集到的数据，用于所描述现象随时间变化的情况。这类数据反映了某一事物、现象等随时间的变化状态或程度。&lt;/p>
&lt;h2 id="prometheus-中时间序列数据的组成">Prometheus 中时间序列数据的组成&lt;a class="td-heading-self-link" href="#prometheus-%e4%b8%ad%e6%97%b6%e9%97%b4%e5%ba%8f%e5%88%97%e6%95%b0%e6%8d%ae%e7%9a%84%e7%bb%84%e6%88%90" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>时间序列(Time Series,简称 series) 有序列、系列的意思&lt;/strong>。比如有这么几种描述：一系列的书、这一系列操作、等等。可以通过这种语境来理解 series(比如可以这么描述：这一系列数据)。&lt;/p>
&lt;p>与传统意义上定义的时序数据一样，由两部分组成：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Metrics(指标)&lt;/strong> # 用来描述要采集的数据指标，是时序数据的唯一标识符。例如：检测各个城市的风力、系统内存已使用的字节数 等等。相当于关系型数据库中的表。&lt;/li>
&lt;li>&lt;strong>Sample(样本)&lt;/strong> # 针对监测对象的某项指标(由 Metric 和 Tag 定义)按特定时间间隔采集到的每个 Metric 值就是一个 Sample(样本)。类似关系型数据库中的一行。&lt;/li>
&lt;/ul>
&lt;p>首先需要明确一个概念：
&lt;strong>Vector(向量)(也称为欧几里得向量、几何向量、矢量)&lt;/strong>，指具有大小和方向的 &lt;strong>Magnitude(量)&lt;/strong>。它可以形象化地表示为带箭头的线段。箭头所指：代表向量的方向；线段长度：代表向量的大小。与向量对应的量叫做数量（物理学中称&lt;a href="https://baike.baidu.com/item/%E6%A0%87%E9%87%8F/1530843">标量&lt;/a>），数量（或标量）只有大小，没有方向。&lt;/p>
&lt;p>Prometheus 会将所有采集到的样本数据以 &lt;strong>TimeSeries(时间序列)&lt;/strong> 的方式保存在内存数据库中，并且定时保存到硬盘上。TimeSeriesData 是按照&lt;strong>时间戳&lt;/strong>和&lt;strong>值&lt;/strong>的序列顺序存放的一条不规则有方向的线段，我们称之为 &lt;strong>Vector(向量)&lt;/strong>。每条 TimeSeriesData 通过 &lt;strong>MetricsName(指标名称)&lt;/strong> 和一组 &lt;strong>LabelSet(标签集)&lt;/strong> 作为唯一标识符。如下所示，可以将 TimeSeries 理解为一个以时间为 x 轴、值为 y 轴的数字矩阵；而这个矩阵中的每一个点都是一个 &lt;strong>Sample(样本)&lt;/strong>，相同 MetricName 和 LabelSet 的多个样本之间连成的线段就是时间序列数据。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span> ^
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ . . . . . . . . . . . . . . . . . . - &amp;gt; node_cpu&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>&lt;span style="color:#000">cpu&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;cpu0&amp;#34;&lt;/span>,mode&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;idle&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ . . . . . . . . . . . . . . . . . - &amp;gt; node_cpu&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>&lt;span style="color:#000">cpu&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;cpu0&amp;#34;&lt;/span>,mode&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;system&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 值 . . . . . . . . . . . . . . . . . - &amp;gt; node_load1&lt;span style="color:#ce5c00;font-weight:bold">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ . . . . . . . . . . . . . . . . . - &amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v . . . . . . . . . . . . . . . . . . - &amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;------------------ 时间 ----------------&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 TimeSeries(时间序列) 中的每一个点称为一个 Sample(样本)，&lt;strong>Sample(样本)&lt;/strong> 与 &lt;strong>Metric(指标) 构成了时间序列数据&lt;/strong>，每条时间序列数据由这两部分组成：&lt;/p>
&lt;blockquote>
&lt;p>下面这个例子可以看到，Prometheus 返回的时间序列数据主要有两个字段，resultType(结果类型) 与 result(结果)。result 就是这条时间序列的数据内容
而 result 又分为 metric 和 value。其中 value 就是指的 sample&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// 获取 prometheus_http_requests_total 指标。发送GET请求
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// http://172.38.40.244:30001/api/v1/query?query=prometheus_http_requests_total
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// 获取如下结果
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;status&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;success&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;data&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;resultType&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;vector&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;result&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// 下面就是这条时间序列的内容
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;metric&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;__name__&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;prometheus_http_requests_total&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;code&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;200&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;handler&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;/api/v1/label/:name/values&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;instance&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;localhost:8080&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;job&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;prometheus&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;value&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1610437100.544&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;1&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="metric指标就是-metric-字段">Metric(指标)，就是 metric 字段&lt;a class="td-heading-self-link" href="#metric%e6%8c%87%e6%a0%87%e5%b0%b1%e6%98%af-metric-%e5%ad%97%e6%ae%b5" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>一个 Metrics 由 MetricName 和 描述当前样本特征的 LabelSets(所有标签的集合) 组成。&lt;/li>
&lt;/ul>
&lt;h3 id="sample样本就是-value-字段">Sample(样本)，就是 value 字段&lt;a class="td-heading-self-link" href="#sample%e6%a0%b7%e6%9c%ac%e5%b0%b1%e6%98%af-value-%e5%ad%97%e6%ae%b5" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>样本中包括一个时间戳和一个样本值。有时也可以称为 指标值、时间序列值 等等，毕竟在响应体中，value 字段&lt;/p>
&lt;ul>
&lt;li>&lt;strong>TimesTamp(时间戳)&lt;/strong>：一个精确到毫秒的时间戳。时间戳概念&lt;/li>
&lt;li>&lt;strong>SampleValue(样本值)&lt;/strong>： 一个 float64(也可以是别的类型) 的浮点型数据表示当前样本的值。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>样本也可以当作名词来描述这个序列的值的含义(i.e.一个数字代表了什么事物)。
怎么好理解怎么来，根据对 prom 的学习的不同阶段会有不同的理解。&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&amp;lt;--------------- metric -----------------------------------------&amp;gt; &amp;lt;-timestamp -&amp;gt;&amp;lt;-value-&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&amp;#34;__name__&amp;#34;&lt;/span>:&lt;span style="color:#4e9a06">&amp;#34;http_request_total&amp;#34;&lt;/span>,&lt;span style="color:#4e9a06">&amp;#34;method&amp;#34;&lt;/span>:&lt;span style="color:#4e9a06">&amp;#34;get&amp;#34;&lt;/span>,&lt;span style="color:#4e9a06">&amp;#34;statuscode&amp;#34;&lt;/span>:&lt;span style="color:#4e9a06">&amp;#34;200&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>,&lt;span style="color:#4e9a06">&amp;#34;value&amp;#34;&lt;/span>:&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>1568996888.215,&lt;span style="color:#4e9a06">&amp;#34;2&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>http_request_total&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>&lt;span style="color:#000">status&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;200&amp;#34;&lt;/span>, &lt;span style="color:#000">method&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;GET&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">}=&lt;/span>&lt;span style="color:#000">1434417561287&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&amp;gt; &lt;span style="color:#0000cf;font-weight:bold">94334&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>http_request_total&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>&lt;span style="color:#000">status&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;404&amp;#34;&lt;/span>, &lt;span style="color:#000">method&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;GET&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">}=&lt;/span>&lt;span style="color:#000">1434417560938&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&amp;gt; &lt;span style="color:#0000cf;font-weight:bold">38473&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>http_request_total&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>&lt;span style="color:#000">status&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;404&amp;#34;&lt;/span>, &lt;span style="color:#000">method&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;GET&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">}=&lt;/span>&lt;span style="color:#000">1434417561287&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&amp;gt; &lt;span style="color:#0000cf;font-weight:bold">38544&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>http_request_total&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>&lt;span style="color:#000">status&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;200&amp;#34;&lt;/span>, &lt;span style="color:#000">method&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;POST&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">}=&lt;/span>&lt;span style="color:#000">1434417560938&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&amp;gt; &lt;span style="color:#0000cf;font-weight:bold">4748&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>http_request_total&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>&lt;span style="color:#000">status&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;200&amp;#34;&lt;/span>, &lt;span style="color:#000">method&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;POST&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">}=&lt;/span>&lt;span style="color:#000">1434417561287&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&amp;gt; &lt;span style="color:#0000cf;font-weight:bold">4785&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="metric指标-结构">Metric(指标) 结构&lt;a class="td-heading-self-link" href="#metric%e6%8c%87%e6%a0%87-%e7%bb%93%e6%9e%84" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>指标的样式一：在形式上(输出到某个程序供人阅读)，指标(Metrics)都通过如下格式标识(指标名称(metrics name)和一组标签集(LabelSet))&lt;/p>
&lt;pre>&lt;code>&amp;lt;Metrics Name&amp;gt;{&amp;lt;Label Name&amp;gt;=&amp;lt;Label Value&amp;gt;, ...}
&lt;/code>&lt;/pre>
&lt;p>指标的样式二：在时间序列数据库中，指标(Metrics)则是使用下面的格式标识&lt;/p>
&lt;pre>&lt;code>{__name__=&amp;lt;Metrics Name&amp;gt;, &amp;lt;Label Name&amp;gt;=&amp;lt;Label Value&amp;gt;, ...}
&lt;/code>&lt;/pre>
&lt;ol>
&lt;li>&lt;strong>Metrics Name(指标的名称)&lt;/strong> # 可以反映被监控数据的含义（比如，http_request_total - 表示当前系统接收到的 HTTP 请求总量）。指标名称只能由 ASCII 字符、数字、下划线以及冒号组成并必须符合正则表达式[a-zA-Z_:][a-zA-Z0-9_:]*。&lt;/li>
&lt;li>&lt;strong>LabelSet(标签集)&lt;/strong> # 反映了当前样本的特征维度，通过这些维度 Prometheus 可以对样本数据进行过滤，聚合等。标签的名称只能由 ASCII 字符、数字以及下划线组成并满足正则表达式[a-zA-Z_][a-zA-Z0-9_]*。&lt;/li>
&lt;li>其中以__作为前缀的标签(两个_)，是获取到 metrics 后自动生成的原始标签。标签的值则可以包含任何 Unicode 编码的字符。在 Prometheus 的底层实现中指标名称实际上是以__name__=的形式保存在数据库中的，详见文章最后的图例&lt;/li>
&lt;/ol>
&lt;p>因此以下两种方式均表示的同一条 time-series ：&lt;/p>
&lt;pre>&lt;code>api_http_requests_total{method=&amp;quot;POST&amp;quot;, handler=&amp;quot;/messages&amp;quot;}
等同于：
{__name__=&amp;quot;api_http_requests_total&amp;quot;, method=&amp;quot;POST&amp;quot;, handler=&amp;quot;/messages&amp;quot;}
&lt;/code>&lt;/pre>
&lt;p>在 Prometheus 的源码中也可以看到指标(Metric)对应的数据结构，如下所示：&lt;/p>
&lt;pre>&lt;code>type Metric LabelSet
type LabelSet map[LabelName]LabelValue
type LabelName string
type LabelValue string
&lt;/code>&lt;/pre>
&lt;h2 id="白话说">白话说&lt;a class="td-heading-self-link" href="#%e7%99%bd%e8%af%9d%e8%af%b4" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>有一条名叫内存使用率的时间序列数据，&amp;ldquo;内存使用率&amp;quot;就叫做 metric name。在 2019 年 10 月 1 日 00:00 的值为 100M，在 2019 年 10 月 1 日 01:00 的值为 110M。时间就是样本里的时间戳。值就是该样本的值。所有这些具有时间标识的值连在一起组成一条线，就叫时间序列数据，这条线的名字就叫“内存使用率”&lt;/p>
&lt;p>可以看到，所谓的 Time Series，是使用一组标签作为唯一标识符的，可以这么说，所有标签都属于时间序列的名字，而不只是 name 字段。&lt;/p>
&lt;h1 id="metrics指标-的类型">Metrics(指标) 的类型&lt;a class="td-heading-self-link" href="#metrics%e6%8c%87%e6%a0%87-%e7%9a%84%e7%b1%bb%e5%9e%8b" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：
&lt;a href="https://prometheus.io/docs/concepts/metric_types/">官网文档，概念-metric 类型&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>在 Prometheus 的存储实现上所有的监控样本都是以 time-series 的形式保存在 Prometheus 的 TSDB(时序数据库) 中，而 TimeSeries 所对应的 Metric(监控指标) 也是通过 LabelSet 进行唯一命名的。&lt;/p>
&lt;p>从存储上来讲所有的 Metrics 都是相同的，但是在不同的场景下这些 Metrics 又有一些细微的差异。 例如，在 Node Exporter 返回的样本中指标 node_load1 反应的是当前系统的负载状态，随着时间的变化这个指标返回的样本数据是在不断变化的。而指标 node_cpu 所获取到的样本数据却不同，它是一个持续增大的值，因为其反应的是 CPU 的累积使用时间，从理论上讲只要系统不关机，这个值是会无限变大的。&lt;/p>
&lt;p>为了能够帮助用户理解和区分这些不同监控指标之间的差异，Prometheus 定义了 4 中不同的 &lt;strong>Metric Type(指标类型)&lt;/strong>：Counter(计数器)、Gauge(计量器)、Histogram(直方图)、Summary(摘要)。&lt;/p>
&lt;p>在 Exporter 返回的样本数据中，其注释中也包含了该样本的类型。例如：&lt;/p>
&lt;blockquote>
&lt;p>其中 TYPE node_cpu counter 表明 node_cpu 的指标类型为 counter&lt;/p>
&lt;/blockquote>
&lt;pre>&lt;code># HELP node_cpu Seconds the cpus spent in each mode.
# TYPE node_cpu counter
node_cpu{cpu=&amp;quot;cpu0&amp;quot;,mode=&amp;quot;idle&amp;quot;} 362812.789625
&lt;/code>&lt;/pre>
&lt;h2 id="counter计数器--只增不减的计数器">Counter(计数器) # 只增不减的计数器&lt;a class="td-heading-self-link" href="#counter%e8%ae%a1%e6%95%b0%e5%99%a8--%e5%8f%aa%e5%a2%9e%e4%b8%8d%e5%87%8f%e7%9a%84%e8%ae%a1%e6%95%b0%e5%99%a8" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Counter 类型的指标其工作方式和计数器一样，只增不减（除非系统发生重置）。常见的监控指标，如 http_requests_total，node_cpu 都是 Counter 类型的监控指标。 一般在定义 Counter 类型指标的名称时推荐使用_total 作为后缀。&lt;/p>
&lt;p>Counter 是一个简单但有强大的工具，例如我们可以在应用程序中记录某些事件发生的次数，通过以时序的形式存储这些数据，我们可以轻松的了解该事件产生速率的变化。 PromQL 内置的聚合操作和函数可以让用户对这些数据进行进一步的分析：&lt;/p>
&lt;p>例如，通过 rate()函数获取 HTTP 请求量的增长率：
rate(http_requests_total[5m])&lt;/p>
&lt;p>查询当前系统中，访问量前 10 的 HTTP 地址：
topk(10, http_requests_total)&lt;/p>
&lt;h2 id="gauge仪表盘--可增可减的-gauge">Gauge(仪表盘) # 可增可减的 Gauge&lt;a class="td-heading-self-link" href="#gauge%e4%bb%aa%e8%a1%a8%e7%9b%98--%e5%8f%af%e5%a2%9e%e5%8f%af%e5%87%8f%e7%9a%84-gauge" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>与 Counter 不同，Gauge 类型的指标侧重于反应系统的当前状态。因此这类指标的样本数据可增可减。常见指标如：node_memory_MemFree(主机当前空闲的内容大小)、node_memory_MemAvailable(可用内存大小)都是 Gauge 类型的监控指标。&lt;/p>
&lt;p>通过 Gauge 指标，用户可以直接查看系统的当前状态：&lt;/p>
&lt;pre>&lt;code>node_memory_MemFree
&lt;/code>&lt;/pre>
&lt;p>对于 Gauge 类型的监控指标，通过 PromQL 内置函数 delta() 可以获取样本在一段时间返回内的变化情况。例如，计算 CPU 温度在两个小时内的差异：&lt;/p>
&lt;pre>&lt;code>delta(cpu_temp_celsius{host=&amp;quot;zeus&amp;quot;}[2h])
&lt;/code>&lt;/pre>
&lt;p>还可以使用 deriv() 计算样本的线性回归模型，甚至是直接使用 predict_linear() 对数据的变化趋势进行预测。例如，预测系统磁盘空间在 4 个小时之后的剩余情况：&lt;/p>
&lt;pre>&lt;code>predict_linear(node_filesystem_free{job=&amp;quot;node&amp;quot;}[1h], 4 * 3600)
&lt;/code>&lt;/pre>
&lt;h2 id="histogram直方图-与-summary摘要">Histogram(直方图) 与 Summary(摘要)&lt;a class="td-heading-self-link" href="#histogram%e7%9b%b4%e6%96%b9%e5%9b%be-%e4%b8%8e-summary%e6%91%98%e8%a6%81" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://prometheus.io/docs/practices/histograms/">官方文档&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://fuckcloudnative.io/posts/prometheus-histograms/">云原生实验室&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>除了 Counter 和 Gauge 类型的监控指标以外，Prometheus 还定义了 Histogram 和 Summary 的指标类型。Histogram 和 Summary 主用用于统计和分析样本的分布情况。&lt;/p>
&lt;p>在大多数情况下人们都倾向于使用某些量化指标的平均值，例如 CPU 的平均使用率、页面的平均响应时间。这种方式的问题很明显，以系统 API 调用的平均响应时间为例：如果大多数 API 请求都维持在 100ms 的响应时间范围内，而个别请求的响应时间需要 5s，那么就会导致某些 WEB 页面的响应时间落到中位数的情况，而这种现象被称为长尾问题。&lt;/p>
&lt;p>为了区分是平均的慢还是长尾的慢，最简单的方式就是按照请求延迟的范围进行分组。例如，统计延迟在 0~10ms 之间的请求数有多少而 10~20ms 之间的请求数又有多少。通过这种方式可以快速分析系统慢的原因。Histogram 和 Summary 都是为了能够解决这样问题的存在，通过 Histogram 和 Summary 类型的监控指标，我们可以快速了解监控样本的分布情况。&lt;/p>
&lt;p>直方图和摘要均是样本观察值，也就是说在一段时间内持续观察某个样本后得出的数据。&lt;/p>
&lt;p>这两种指标类型都属于&lt;strong>统计学范畴的指标&lt;/strong>。&lt;/p>
&lt;h3 id="histogram直方图">Histogram(直方图)&lt;a class="td-heading-self-link" href="#histogram%e7%9b%b4%e6%96%b9%e5%9b%be" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>Histogram 在&lt;strong>一段时间范围内&lt;/strong>观察某指标(通常是 请求的持续时间 或 响应时间的长短 等)，并对该指标的样本进行采样，将其计入可配置的 &lt;strong>bucket(储存区)&lt;/strong> 中。Histogram 还提供所有 observed(被观察指标) 的样本在这一段时间范围内的总和。&lt;/p>
&lt;p>&lt;strong>传统意义上的直方图&lt;/strong>
假设我们想获取某个应用在不同响应时间的次数，则首先需要获取该应用在一段时间内的响应时间，收集这些样本。假设最后得到的所有样本的响应时间范围是 0s~10s。那么我们将样本的值划分为不同的区间，这个区间就是 &lt;strong>bucket(存储区)&lt;/strong>，假设每个 bucket 的宽度是 0.2s，那么第一个 bucket 则表示响应时间小于 0.2s 的所有样本数量；第二个 bucket 表示响应时间大于 0.2s 且小于 0.4s 的样本数量；以此类推。效果如图：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gnzmdt/1617542272313-06f1c876-f41b-431b-99ed-e1e14b152761.jpeg" alt="">&lt;/p>
&lt;p>&lt;strong>Prometheus 中的直方图&lt;/strong>&lt;/p>
&lt;p>Prometheus 中的直方图与传统意义的直方图有一些差别，准确描述，应该称为 &lt;strong>累计直方图&lt;/strong>。主要差别在 bucket 的定义，在 Prometheus 的累计直方图中，还是假设 bucket 的宽度为 0.2s，那么第一个 bucket 表示响应时间小于等于 0.2s 的样本数量，第二个 bucket 表示响应时间小于等于 0.4s 的样本数量，以此类推。也就是说，&lt;strong>每一个 bucket 中的样本都包含了卡面所有 bucket 中的样本&lt;/strong>，所以称为 累计直方图。而每个 bucket 范围中的最大值，称为 &lt;strong>upper inclusive bound(上边界)&lt;/strong>。效果如图：
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gnzmdt/1617543132157-1f35ddae-ef51-4ca7-9ece-72886154cc1f.jpeg" alt="">&lt;/p>
&lt;p>Histogram 类型的指标在同一时间具有多条时间序列(假设指标名称为 &amp;lt;basename)：(这些时间序列大体分为 3 种)&lt;/p>
&lt;ul>
&lt;li>**&amp;lt;basename&amp;gt;_bucket{le=&amp;quot;&amp;lt;上边界&amp;gt;&amp;rdquo;} **# 要观察的样本分布在 bucket 中的数量。解释的更通俗易懂一点，这个值表示 要观察的样本的值 小于等于 上边界的值 的所有样本数量。
&lt;ul>
&lt;li>le 通常用来表示该 bucket 的上限。le 这俩字符按照关系运算符来理解，就是“小于或等于”的意思。。。。。。。&lt;/li>
&lt;li>用白话说就是，le 是 bucket 的标识符，比如下面的示例，就可以这么描述：0 到 0.00025 储存区，含有 332 个样本；0 到 0.0005 储存区，含有 336 个样本。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>&amp;lt;basename&amp;gt;_sum&lt;/strong> # 所有 被观察样本的值 的总和。&lt;/li>
&lt;li>&lt;strong>&amp;lt;basename&amp;gt;_count&lt;/strong> # 观察次数。(该值和上面的 &amp;lt;basename&amp;gt;_bucket{le=&amp;quot;+Inf&amp;quot;} 相同)
&lt;ul>
&lt;li>本质上是一个 Counter 类型的指标。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>在 coredns 的样本数据中，我们能找到类型为 Histogram 的监控指标 &lt;code>coredns_dns_request_duration_seconds&lt;/code>&lt;/p>
&lt;p>在这些时间序列中，被观察的样本是“每个 dns 的解析请求所花费的时间”&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># HELP coredns_dns_request_duration_seconds Histogram of the time (in seconds) each request took.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># TYPE coredns_dns_request_duration_seconds histogram&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 在总共336次解析请求的花费时间中，小于0.00025秒的有332次&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>coredns_dns_request_duration_seconds_bucket&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>&lt;span style="color:#000">server&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;dns://:53&amp;#34;&lt;/span>,zone&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;.&amp;#34;&lt;/span>,le&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;0.00025&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">332&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 在总共336次解析请求的花费时间中，小于0.0005秒的有336次&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>coredns_dns_request_duration_seconds_bucket&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>&lt;span style="color:#000">server&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;dns://:53&amp;#34;&lt;/span>,zone&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;.&amp;#34;&lt;/span>,le&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;0.0005&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">336&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>........
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 在总共336次解析请求的花费时间中，小于8.192秒的有336次&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>coredns_dns_request_duration_seconds_bucket&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>&lt;span style="color:#000">server&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;dns://:53&amp;#34;&lt;/span>,zone&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;.&amp;#34;&lt;/span>,le&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;8.192&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">336&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>coredns_dns_request_duration_seconds_bucket&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>&lt;span style="color:#000">server&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;dns://:53&amp;#34;&lt;/span>,zone&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;.&amp;#34;&lt;/span>,le&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;+Inf&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">336&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 所有的336次解析请求，总的花费时间为 0.03502086400000001 秒&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>coredns_dns_request_duration_seconds_sum&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>&lt;span style="color:#000">server&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;dns://:53&amp;#34;&lt;/span>,zone&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;.&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span> 0.03502086400000001
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># DNS 解析请求一共336次&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>coredns_dns_request_duration_seconds_count&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>&lt;span style="color:#000">server&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;dns://:53&amp;#34;&lt;/span>,zone&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;.&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">336&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以通过 histogram_quantile() 函数 来计算 Histogram 类型样本的 分位数。分位数可能不太好理解，你可以理解为分割数据的点。我举个例子，假设样本的 9 分位数（quantile=0.9）的值为 x，即表示小于 x 的采样值的数量占总体采样值的 90%。Histogram 还可以用来计算应用性能指标值（Apdex score）。&lt;/p>
&lt;p>注意：&lt;/p>
&lt;p>bucket 可以理解为是对数据指标值域的一个划分，划分的依据应该基于数据值的分布。注意后面的采样点是包含前面的采样点的，假设 xxx_bucket{&amp;hellip;,le=&amp;ldquo;0.01&amp;rdquo;} 的值为 10，而 xxx_bucket{&amp;hellip;,le=&amp;ldquo;0.05&amp;rdquo;} 的值为 30，那么意味着这 30 个采样点中，有 10 个是小于 10 ms 的，其余 20 个采样点的响应时间是介于 10 ms 和 50 ms 之间的。&lt;/p>
&lt;p>用白话说：直方图与 Counter 和 Gauge 的本质区别在于，直方图是对一组样本进行统计获得的结果，而 Counter 和 Gauge 仅仅是一个单一的样本。
直方图的应用场景：在 1 小时的 http 请求中，有多少请求的响应时间少于 1 秒，有多少请求的响应时间少于 2 秒，总有有多少请求，所有请求的平均的响应时间是多少。&lt;/p>
&lt;p>如果是 Guage 的话，则只能表示每一个请求的具体响应时间，或者总共有多少个请求。&lt;/p>
&lt;p>所以才说，直方图就是一种&lt;strong>统计学上的指标&lt;/strong>&lt;/p>
&lt;h3 id="summary摘要">Summary(摘要)&lt;a class="td-heading-self-link" href="#summary%e6%91%98%e8%a6%81" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>与 Histogram 类型类似，用于表示一段时间内的数据采样结果（通常是请求持续时间或响应大小等），但它 bucket 表示分位数（通过客户端计算，然后展示出来），而不是通过区间来计算。&lt;/p>
&lt;p>例如，指标 prometheus_tsdb_wal_fsync_duration_seconds 的指标类型为 Summary。 它记录了 Prometheus Server 中 wal_fsync 处理的处理时间，通过访问 Prometheus Serve r 的 /metrics 地址，可以获取到以下监控样本数据：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span># HELP prometheus_tsdb_wal_fsync_duration_seconds Duration of WAL fsync.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span># TYPE prometheus_tsdb_wal_fsync_duration_seconds summary
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>prometheus_tsdb_wal_fsync_duration_seconds{quantile=&amp;#34;0.5&amp;#34;} 0.012352463
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>prometheus_tsdb_wal_fsync_duration_seconds{quantile=&amp;#34;0.9&amp;#34;} 0.014458005
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>prometheus_tsdb_wal_fsync_duration_seconds{quantile=&amp;#34;0.99&amp;#34;} 0.017316173
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>prometheus_tsdb_wal_fsync_duration_seconds_sum 2.888716127000002
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>prometheus_tsdb_wal_fsync_duration_seconds_count 216
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>从上面的样本中可以得知当前 Prometheus Server 进行 wal_fsync 操作的总次数为 216 次，耗时 2.888716127000002s。其中中位数（quantile=0.5）的耗时为 0.012352463，9 分位数（quantile=0.9）的耗时为 0.014458005s。&lt;/p>
&lt;h3 id="summary-类型-与-histogram-类型-的异同">Summary 类型 与 Histogram 类型 的异同&lt;a class="td-heading-self-link" href="#summary-%e7%b1%bb%e5%9e%8b-%e4%b8%8e-histogram-%e7%b1%bb%e5%9e%8b-%e7%9a%84%e5%bc%82%e5%90%8c" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ol>
&lt;li>两类样本同样会反应当前指标的记录的总数(以_count 作为后缀)以及其值的总量（以_sum 作为后缀）&lt;/li>
&lt;li>不同在于 Histogram 指标直接反应了在不同区间内样本的个数，区间通过标签 len 进行定义。&lt;/li>
&lt;li>对于分位数的计算而言，Histogram 通过 histogram_quantile 函数是在服务器端计算的分位数。 而 Sumamry 的分位数则是直接在客户端计算完成。&lt;/li>
&lt;li>Summary 在通过 PromQL 进行查询时有更好的性能表现，而 Histogram 则会消耗更多的资源。反之对于提供指标的服务而言，Histogram 消耗的资源更少。在选择这两种方式时用户应该按照自己的实际场景进行选择。&lt;/li>
&lt;/ol>
&lt;h1 id="prometheus-底层保存的时间序列数据的样例">Prometheus 底层保存的时间序列数据的样例&lt;a class="td-heading-self-link" href="#prometheus-%e5%ba%95%e5%b1%82%e4%bf%9d%e5%ad%98%e7%9a%84%e6%97%b6%e9%97%b4%e5%ba%8f%e5%88%97%e6%95%b0%e6%8d%ae%e7%9a%84%e6%a0%b7%e4%be%8b" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>详见 &lt;a href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/Prometheus/Prometheus%20API/Querying%20API.md">Querying API&lt;/a>&lt;/p>
&lt;p>下面红框的地方就是&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gnzmdt/1616069604244-2f845e27-61ec-4a5b-ab9a-0634bf8907b2.jpeg" alt="">&lt;/p>
&lt;h1 id="prometheus-格式的-metrics-详解">Prometheus 格式的 Metrics 详解&lt;a class="td-heading-self-link" href="#prometheus-%e6%a0%bc%e5%bc%8f%e7%9a%84-metrics-%e8%af%a6%e8%a7%a3" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://prometheus.io/docs/instrumenting/exposition_formats/">官方文档&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>通过各种 Exporter 暴露的 HTTP 服务，Prometheus 可以采集到 当前时间 主机所有监控指标的样本数据。数据格式示例如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span># HELP http_requests_total The total number of HTTP requests.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span># TYPE http_requests_total counter
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>http_requests_total{method=&amp;#34;post&amp;#34;,code=&amp;#34;200&amp;#34;} 1027 1395066363000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>http_requests_total{method=&amp;#34;post&amp;#34;,code=&amp;#34;400&amp;#34;} 3 1395066363000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span># Escaping in label values:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>msdos_file_access_time_seconds{path=&amp;#34;C:\\DIR\\FILE.TXT&amp;#34;,error=&amp;#34;Cannot find file:\n\&amp;#34;FILE.TXT\&amp;#34;&amp;#34;} 1.458255915e9
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span># Minimalistic line:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metric_without_timestamp_and_labels 12.47
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span># A weird metric from before the epoch:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>something_weird{problem=&amp;#34;division by zero&amp;#34;} +Inf -3982045
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note：上面通过 http 采集到的数据就是文本格式的 Metrics，格式一定是上述的样子，每个时间序列都分为 3 个部分。&lt;/p>
&lt;ol>
&lt;li>
&lt;h1 id="help-时间序列名称-时间序列描述">HELP 时间序列名称 时间序列描述&lt;a class="td-heading-self-link" href="#help-%e6%97%b6%e9%97%b4%e5%ba%8f%e5%88%97%e5%90%8d%e7%a7%b0-%e6%97%b6%e9%97%b4%e5%ba%8f%e5%88%97%e6%8f%8f%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;/li>
&lt;li>
&lt;h1 id="type-时间序列名称-时间序列类型">TYPE 时间序列名称 时间序列类型&lt;a class="td-heading-self-link" href="#type-%e6%97%b6%e9%97%b4%e5%ba%8f%e5%88%97%e5%90%8d%e7%a7%b0-%e6%97%b6%e9%97%b4%e5%ba%8f%e5%88%97%e7%b1%bb%e5%9e%8b" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;/li>
&lt;li>非#开头的每一行表示当前 Node Exporter 采集到的一个监控样本：node_cpu 和 node_load1 表明了当前指标的名称、大括号中的标签则反映了当前样本的一些特征和维度、浮点数则是该监控样本的具体值。
&lt;ol>
&lt;li>如果有多个 Metrics 的项目，则会有多行&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>主要由三个部分组成：样本的一般注释信息（HELP），样本的类型注释信息（TYPE）和样本。Prometheus 会对 Exporter 响应的内容逐行解析：&lt;/p>
&lt;p>如果当前行以# HELP 开始，Prometheus 将会按照以下规则对内容进行解析，得到当前的指标名称以及相应的说明信息：&lt;/p>
&lt;h2 id="-help"># HELP&lt;a class="td-heading-self-link" href="#-help" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>如果当前行以# TYPE 开始，Prometheus 会按照以下规则对内容进行解析，得到当前的指标名称以及指标类型:&lt;/p>
&lt;h2 id="-type"># TYPE&lt;a class="td-heading-self-link" href="#-type" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>TYPE 注释行必须出现在指标的第一个样本之前。如果没有明确的指标类型需要返回为 untyped。&lt;/p>
&lt;h2 id="metricsname-与-metrics-的值">MetricsName 与 Metrics 的值&lt;a class="td-heading-self-link" href="#metricsname-%e4%b8%8e-metrics-%e7%9a%84%e5%80%bc" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>除了# 开头的所有行都会被视为是监控样本数据。 每一行样本需要满足以下格式规范:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>metric_name &lt;span style="color:#ce5c00;font-weight:bold">[{&lt;/span> &lt;span style="color:#000">label_name&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;label_value&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span> , &lt;span style="color:#000">label_name&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;label_value&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> ,... &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">}]&lt;/span> value &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> timestamp &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中 metric_name 和 label_name 必须遵循 PromQL 的格式规范要求。value 是一个 float 格式的数据，timestamp 的类型为 int64（从 1970-01-01 00:00:00 以来的毫秒数），timestamp 为可选默认为当前时间。具有相同 metric_name 的样本必须按照一个组的形式排列，并且每一行必须是唯一的指标名称和标签键值对组合。&lt;/p></description></item></channel></rss>