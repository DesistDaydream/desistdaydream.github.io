<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – Prometheus API</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/Prometheus/Prometheus-API/</link><description>Recent content in Prometheus API on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/Prometheus/Prometheus-API/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Management API</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/Prometheus/Prometheus-API/Management-API/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/Prometheus/Prometheus-API/Management-API/</guid><description>
&lt;p>参考：&lt;a href="https://prometheus.io/docs/prometheus/latest/management_api/">官方文档&lt;/a>&lt;/p></description></item><item><title>Docs: Prometheus API</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/Prometheus/Prometheus-API/Prometheus-API/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/Prometheus/Prometheus-API/Prometheus-API/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://prometheus.io/docs/prometheus/latest/management_api/">官方文档，Prometheus-管理 API&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://prometheus.io/docs/prometheus/latest/querying/api/">官方文档，Prometheus-查询-HTTP API&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Prometheus 提供多种类型的 API 以满足不同需求。但是唯独没有可以修改配置的 API，Prometheus 的各种配置，只能通过重新加载修改后的配置文件这种方式来修改&lt;/p>
&lt;p>Prometheus API 分两大块&lt;/p>
&lt;ul>
&lt;li>&lt;strong>HTTP API&lt;/strong> # HTTP 接口，用于查询数据、状态等。所以也称为 Querying API&lt;/li>
&lt;li>&lt;strong>Management API&lt;/strong> # 管理接口，用于简单管理 Prometheus Server，重载配置，健康检查等&lt;/li>
&lt;/ul></description></item><item><title>Docs: Querying API</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/Prometheus/Prometheus-API/Querying-API/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/Prometheus/Prometheus-API/Querying-API/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://prometheus.io/docs/prometheus/latest/querying/api/">官方文档，Prometheus-查询-HTTP API&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://app.swaggerhub.com/apis/DesistDaydream/PrometheusAPI/v1">OpenAPI&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Querying API 可以查询 Prometheus 的 运行时配置、时间序列数据、运行时状态 等等。官方称之为 HTTP API&lt;/p>
&lt;h2 id="在-http-api-中使用-promql">在 HTTP API 中使用 PromQL&lt;/h2>
&lt;p>Prometheus 当前稳定的 HTTP API 可以通过 /api/v1 访问。&lt;/p>
&lt;h3 id="api-响应格式">API 响应格式&lt;/h3>
&lt;p>Prometheus API 使用了 JSON 格式的响应内容。 当 API 调用成功后将会返回 2xx 的 HTTP 状态码。&lt;/p>
&lt;p>反之，当 API 调用失败时可能返回以下几种不同的 HTTP 状态码：&lt;/p>
&lt;ul>
&lt;li>404 Bad Request # 当参数错误或者缺失时。&lt;/li>
&lt;li>422 Unprocessable Entity # 当表达式无法执行时。&lt;/li>
&lt;li>503 Service Unavailiable # 当请求超时或者被中断时。&lt;/li>
&lt;/ul>
&lt;p>这类 API 有一个统一的返回体&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 本次请求的结果
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">&amp;#34;status&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;success&amp;#34;&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">|&lt;/span> &lt;span style="color:#e6db74">&amp;#34;error&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 本次请求所返回的具体数据，就是一个PromQL的查询结果
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">&amp;#34;data&amp;#34;&lt;/span>: &lt;span style="color:#960050;background-color:#1e0010">&amp;lt;data&amp;gt;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 当 status 值为 error 时，会显示这两个字段。data 字段仍然会保留一些附加数据。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">&amp;#34;errorType&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;lt;string&amp;gt;&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;error&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;lt;string&amp;gt;&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 当执行http请求出现warnings时，会显示这个字段。data 字段中仍然会有数据
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">&amp;#34;warnings&amp;#34;&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;&amp;lt;string&amp;gt;&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>status 与 data 字段是默认包含的。当 status 值不是 success 时，会出现其他字段。&lt;/p>
&lt;p>不同的接口，data 字段下的格式就各不相同了。详见各 API 详解。&lt;/p>
&lt;h2 id="api-中的-post-请求">API 中的 POST 请求&lt;/h2>
&lt;p>在下面详解 API 中，只是介绍了 GET 方法示例，其实还可以使用 &lt;code>POST&lt;/code> 方法，并设定请求头 &lt;code>Content-Type:application/x-www-form-urlencoded&lt;/code>，直接在请求体中以 x-www-form-urlencoded 格式填写那些所需参数。&lt;/p>
&lt;p>使用 POST 请求有多个好处&lt;/p>
&lt;ul>
&lt;li>当 PromQL 非常长，可能会导致 URL 的字符数超过服务端规定的最大 URL 字符数时，此功能很有用。&lt;/li>
&lt;li>防止 curl 命令中使用编码&lt;/li>
&lt;/ul>
&lt;h3 id="当-promql-非常长可能会导致-url-的字符数超过服务端规定的最大-url-字符数时此功能很有用">当 PromQL 非常长，可能会导致 URL 的字符数超过服务端规定的最大 URL 字符数时，此功能很有用。&lt;/h3>
&lt;p>比如，即时查询中的例子，还可以这么写：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">curl&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">-X&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">POST&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">&amp;#39;http:&lt;/span>&lt;span style="color:#75715e">//localhost:9090/api/v1/query&amp;#39; \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">--header&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">&amp;#39;Content-Type:&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">application/x-www-form-urlencoded&amp;#39;&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">--data-urlencode&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">&amp;#39;query=up&amp;#39;&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">--data-urlencode&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">&amp;#39;time=&lt;/span>&lt;span style="color:#ae81ff">2021-05-18&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">T&lt;/span>&lt;span style="color:#ae81ff">14&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span>&lt;span style="color:#ae81ff">28&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span>&lt;span style="color:#ae81ff">51.781&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">Z&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;status&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;success&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;data&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;resultType&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;vector&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;result&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;metric&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;__name__&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;up&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;instance&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;localhost:9090&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;job&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;prometheus&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;value&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">1621348131.781&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;metric&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;__name__&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;up&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;instance&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;localhost:9100&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;job&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;node-exporter&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;value&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">1621348131.781&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="防止-curl-命令中使用编码">防止 curl 命令中使用编码&lt;/h3>
&lt;p>此外，该功能对于使用 curl 调试也非常有用。比如该示例的符号，都进行了编码，而通过 POST 请求，则不必编码，即可使用&lt;/p>
&lt;pre>&lt;code>curl 'http://localhost:9090/api/v1/series?match[]=up&amp;amp;match[]=process_start_time_seconds%7Bjob%3D%22prometheus%22%7D'
# 上述语句可以替换为
curl -X POST 'http://localhost:9090/api/v1/series' \
--header 'Content-Type: application/x-www-form-urlencoded' \
--data-urlencode 'match[]=up' \
--data-urlencode 'match[]=process_start_time_seconds{job=&amp;quot;prometheus&amp;quot;}'
&lt;/code>&lt;/pre>
&lt;h1 id="expression-queries表达式查询">Expression Queries(表达式查询)&lt;/h1>
&lt;p>通过这类 API，可以使用 PromQL 来获取时间序列数据。这类 API 分两类：&lt;strong>Instant Queries(即时查询)&lt;/strong> 与 &lt;strong>Range Queries(范围查询)&lt;/strong>&lt;/p>
&lt;h2 id="instant-queries即时查询">Instant Queries(即时查询)&lt;/h2>
&lt;pre>&lt;code>GET /api/v1/query
POST /api/v1/query
&lt;/code>&lt;/pre>
&lt;p>URL 请求参数：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>query=&lt;!-- raw HTML omitted -->&lt;/strong> # PromQL 表达式。&lt;/li>
&lt;li>&lt;strong>time=&lt;!-- raw HTML omitted -->&lt;/strong> # (可选参数)用于指定用于计算 PromQL 的时间戳。默认情况下使用当前系统时间。&lt;/li>
&lt;li>&lt;strong>timeout=&lt;!-- raw HTML omitted -->&lt;/strong> # 超时设置。可选参数，默认情况下使用-query,timeout 的全局设置。&lt;/li>
&lt;/ul>
&lt;p>例如使用以下表达式查询表达式 up 在时间点 2015-07-01T20:10:51.781Z 的计算结果：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">curl&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">&amp;#39;http:&lt;/span>&lt;span style="color:#75715e">//localhost:9090/api/v1/query?query=up&amp;amp;time=2021-02-28T6:23:51.781Z&amp;#39; | jq .
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;status&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;success&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;data&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;resultType&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;vector&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;result&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;metric&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;__name__&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;up&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;instance&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;172.19.42.248:9100&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;job&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;node_exporter&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;value&amp;#34;&lt;/span>: [ &lt;span style="color:#ae81ff">1614493431.781&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;metric&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;__name__&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;up&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;instance&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;localhost:9090&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;job&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;prometheus&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;value&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">1614493431.781&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="range-queries范围查询">Range Queries(范围查询)&lt;/h2>
&lt;pre>&lt;code>GET /api/v1/query_range
POST /api/v1/query_range
&lt;/code>&lt;/pre>
&lt;p>URL 请求参数：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>query=&lt;!-- raw HTML omitted -->&lt;/strong> # PromQL 表达式。&lt;/li>
&lt;li>&lt;strong>start=&amp;lt;rfc3339 | unix_timestamp&amp;gt;&lt;/strong> # 起始时间&lt;/li>
&lt;li>&lt;strong>end=&amp;lt;rfc3339 | unix_timestamp&amp;gt;&lt;/strong> # 结束时间&lt;/li>
&lt;li>&lt;strong>step=&amp;lt;duration | float&amp;gt;&lt;/strong> # 步长。起始时间与结束时间之间获取的所有数据的间隔时间。假如 step=10 则每隔 10 秒获取一次样本值。
&lt;ul>
&lt;li>就好像人走路，一步迈多长，这里就是返回样本值时，每隔多久返回一次。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>timeout=&lt;!-- raw HTML omitted -->&lt;/strong> # 超时设置。可选参数，默认情况下使用-query,timeout 的全局设置。Evaluation timeout. Optional. Defaults to and is capped by the value of the -query.timeout flag.&lt;/li>
&lt;/ul>
&lt;p>例如使用以下表达式查询表达式 up 在 30 秒范围内以 15 秒为间隔计算 PromQL 表达式的结果。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">curl&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">&amp;#39;http:&lt;/span>&lt;span style="color:#75715e">//localhost:9090/api/v1/query_range?query=up&amp;amp;start=2015-07-01T20:10:30.781Z&amp;amp;end=2015-07-01T20:11:00.781Z&amp;amp;step=15s&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;status&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;success&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;data&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;resultType&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;matrix&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;result&amp;#34;&lt;/span>: [{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;metric&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;__name__&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;up&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;job&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;prometheus&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;instance&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;localhost:9090&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;values&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#e6db74">&amp;#34;1435781430.781&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#e6db74">&amp;#34;1435781445.781&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#e6db74">&amp;#34;1435781460.781&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;metric&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;__name__&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;up&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;job&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;node&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;instance&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;localhost:9091&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;values&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#e6db74">&amp;#34;1435781430.781&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#e6db74">&amp;#34;1435781445.781&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#e6db74">&amp;#34;1435781460.781&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="表达式查询结果的响应数据的格式">表达式查询结果的响应数据的格式&lt;/h2>
&lt;p>当 API 调用成功后，Prometheus 会返回 JSON 格式的响应内容，格式如文章开头所示。并且在 &lt;code>data&lt;/code> 字段中返回查询结果，&lt;code>data&lt;/code> 字段包含 &lt;code>resultType&lt;/code> 与&lt;code> result&lt;/code> 两个字段：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;status&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;success&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;data&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;resultType&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;matrix&amp;#34;&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">|&lt;/span> &lt;span style="color:#e6db74">&amp;#34;vector&amp;#34;&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">|&lt;/span> &lt;span style="color:#e6db74">&amp;#34;scalar&amp;#34;&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">|&lt;/span> &lt;span style="color:#e6db74">&amp;#34;string&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;result&amp;#34;&lt;/span>: &lt;span style="color:#960050;background-color:#1e0010">&amp;lt;VALUE&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>**resultType**&lt;/code>** 字段**表示该时间序列的值类型：&lt;/p>
&lt;ul>
&lt;li>**matrix(矩阵) **# 范围向量表达式查询结果&lt;/li>
&lt;li>**vector(向量) **# 即时向量表达式查询结果&lt;/li>
&lt;li>&lt;strong>scalar(标量)&lt;/strong> # 标量表达式查询结果&lt;/li>
&lt;li>&lt;strong>string(字符串)&lt;/strong> # 字符串表达式查询结果&lt;/li>
&lt;/ul>
&lt;p>&lt;code>**result **&lt;/code>&lt;strong>字段&lt;/strong>就是查询结果，该字段的值将会随 resultType 字段值的变化而不尽相同。这与 PromQL 章节描述的概念保持一致&lt;/p>
&lt;h3 id="matrix">matrix&lt;/h3>
&lt;p>当返回数据类型 resultType 为 matrix 时，result 响应格式如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>[
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;metric&amp;#34;&lt;/span>: { &lt;span style="color:#f92672">&amp;#34;&amp;lt;label_name&amp;gt;&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;lt;label_value&amp;gt;&amp;#34;&lt;/span>, &lt;span style="color:#960050;background-color:#1e0010">...&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;values&amp;#34;&lt;/span>: [ [ &lt;span style="color:#960050;background-color:#1e0010">&amp;lt;unix_time&amp;gt;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;&amp;lt;sample_value&amp;gt;&amp;#34;&lt;/span> ], &lt;span style="color:#960050;background-color:#1e0010">...&lt;/span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中 metrics 表示当前时间序列的特征维度，values 包含当前事件序列的一组样本。&lt;/p>
&lt;h3 id="vector">vector&lt;/h3>
&lt;p>当返回数据类型 resultType 为 vector 时，result 响应格式如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>[
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;metric&amp;#34;&lt;/span>: { &lt;span style="color:#f92672">&amp;#34;&amp;lt;label_name&amp;gt;&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;lt;label_value&amp;gt;&amp;#34;&lt;/span>, &lt;span style="color:#960050;background-color:#1e0010">...&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;value&amp;#34;&lt;/span>: [ &lt;span style="color:#960050;background-color:#1e0010">&amp;lt;unix_time&amp;gt;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;&amp;lt;sample_value&amp;gt;&amp;#34;&lt;/span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中 metrics 表示当前时间序列的特征维度，value 只包含一个唯一的样本。&lt;/p>
&lt;h3 id="scalar">scalar&lt;/h3>
&lt;p>当返回数据类型 resultType 字段值为 scalar 时，result 字段格式如下：&lt;/p>
&lt;pre>&lt;code>[ &amp;lt;unix_time&amp;gt;, &amp;quot;&amp;lt;scalar_value&amp;gt;&amp;quot; ]
&lt;/code>&lt;/pre>
&lt;p>由于标量不存在时间序列一说，因此 result 表示为当前系统时间一个标量的值。&lt;/p>
&lt;h3 id="string">string&lt;/h3>
&lt;p>当返回数据类型 resultType 字段值为 string 时，result 字段格式如下：&lt;/p>
&lt;pre>&lt;code>[ &amp;lt;unix_time&amp;gt;, &amp;quot;&amp;lt;string_value&amp;gt;&amp;quot; ]
&lt;/code>&lt;/pre>
&lt;p>字符串类型的响应内容格式和标量相同。&lt;/p>
&lt;h1 id="querying-metadata查询元数据">Querying Metadata(查询元数据)&lt;/h1>
&lt;p>这类 API 可以获取相关数据的源数据列表，比如所有数据中，全部的标签列表，符合匹配规则的时间序列列表、甚至可以直接获取指定标签的标签值&lt;/p>
&lt;h2 id="获取-series仅获取序列不包含该序列的值">获取 Series，仅获取序列，不包含该序列的值&lt;/h2>
&lt;pre>&lt;code>GET /api/v1/series
POST /api/v1/series
&lt;/code>&lt;/pre>
&lt;p>URL 请求参数：&lt;/p>
&lt;ul>
&lt;li>&lt;code>match[]=&amp;lt;series_selector&amp;gt;&lt;/code> # 时间序列选择器，也就是 PromQL，该 API 会列出所有匹配到的序列，但是不包含序列的值。至少要有一个 match[] 参数&lt;/li>
&lt;li>&lt;code>start=&amp;lt;rfc3339 | unix_timestamp&amp;gt;&lt;/code>: 起始时间。可选的&lt;/li>
&lt;li>&lt;code>end=&amp;lt;rfc3339 | unix_timestamp&amp;gt;&lt;/code>: 结束时间。可选的&lt;/li>
&lt;/ul>
&lt;p>&lt;code>data&lt;/code> 字段中由一个对象列表组成，该对象包含匹配到的每个序列的标签&lt;/p>
&lt;p>以下示例返回与选择器 up 或 process_start_time_seconds {job =“ prometheus”} 匹配的所有序列：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">curl&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">&amp;#39;http:&lt;/span>&lt;span style="color:#75715e">//localhost:9090/api/v1/series?match[]=up&amp;amp;match[]=process_start_time_seconds%7Bjob%3D%22prometheus%22%7D&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;status&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;success&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;data&amp;#34;&lt;/span> : [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;__name__&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;up&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;job&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;prometheus&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;instance&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;localhost:9090&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;__name__&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;up&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;job&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;node&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;instance&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;localhost:9091&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;__name__&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;process_start_time_seconds&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;job&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;prometheus&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;instance&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;localhost:9090&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="获取-labels-列表">获取 Labels 列表&lt;/h2>
&lt;p>根据匹配规则，获取匹配到的所有序列中包含的所有标签。若是不加参数，则返回所有的 Labels&lt;/p>
&lt;pre>&lt;code>GET /api/v1/labels
POST /api/v1/labels
&lt;/code>&lt;/pre>
&lt;p>URL 请求参数：&lt;/p>
&lt;ul>
&lt;li>&lt;code>start=&amp;lt;rfc3339 | unix_timestamp&amp;gt;&lt;/code>: 起始时间。可选的&lt;/li>
&lt;li>&lt;code>end=&amp;lt;rfc3339 | unix_timestamp&amp;gt;&lt;/code>: 结束时间。可选的&lt;/li>
&lt;li>&lt;code>match[]=&amp;lt;series_selector&amp;gt;&lt;/code> # 时间序列选择器，也就是 PromQL，该 API 从匹配到的序列中获取这些序列包含的所有标签。可选的&lt;/li>
&lt;/ul>
&lt;p>&lt;code>data&lt;/code> 字段字符串类型的标签名列表&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">curl&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">--location&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">--request&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">GET&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">&amp;#39;http:&lt;/span>&lt;span style="color:#75715e">//test-prometheus.desistdaydream.ltd/api/v1/labels?match[]={job=%22prometheus%22}&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;status&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;success&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;data&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;__name__&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;alertmanager&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;branch&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;call&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;code&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;config&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;dialer_name&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;endpoint&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;event&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;goversion&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;handler&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;instance&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;interval&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;job&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;le&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;listener_name&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;quantile&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;reason&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;revision&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;role&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;rule_group&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;scrape_job&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;slice&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;version&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="获取-labels-的值">获取 Labels 的值&lt;/h2>
&lt;p>根据匹配规则获取指定标签名称的标签值的列表&lt;/p>
&lt;pre>&lt;code>GET /api/v1/label/&amp;lt;label_name&amp;gt;/values
&lt;/code>&lt;/pre>
&lt;p>URL 请求参数:&lt;/p>
&lt;ul>
&lt;li>&lt;code>start=&amp;lt;rfc3339 | unix_timestamp&amp;gt;&lt;/code>: 起始时间。可选的&lt;/li>
&lt;li>&lt;code>end=&amp;lt;rfc3339 | unix_timestamp&amp;gt;&lt;/code>: 结束时间。可选的&lt;/li>
&lt;li>&lt;code>match[]=&amp;lt;series_selector&amp;gt;&lt;/code> # 时间序列选择器，也就是 PromQL，该 API 从匹配到的序列中获取指定指标的所有值。可选的&lt;/li>
&lt;/ul>
&lt;p>This example queries for all label values for the &lt;code>job&lt;/code> label:&lt;/p>
&lt;pre>&lt;code>$ curl http://localhost:9090/api/v1/label/job/values
{
&amp;quot;status&amp;quot; : &amp;quot;success&amp;quot;,
&amp;quot;data&amp;quot; : [
&amp;quot;node&amp;quot;,
&amp;quot;prometheus&amp;quot;
]
}
&lt;/code>&lt;/pre>
&lt;h1 id="targets">Targets&lt;/h1>
&lt;pre>&lt;code>GET /api/v1/targets
&lt;/code>&lt;/pre>
&lt;h1 id="rules">Rules&lt;/h1>
&lt;pre>&lt;code>GET /api/v1/rules
&lt;/code>&lt;/pre>
&lt;h1 id="alerts">Alerts&lt;/h1>
&lt;pre>&lt;code>GET /api/v1/alerts
&lt;/code>&lt;/pre>
&lt;h1 id="querying-target-metadata">Querying Target Metadata&lt;/h1>
&lt;pre>&lt;code>GET /api/v1/targets/metadata
&lt;/code>&lt;/pre>
&lt;h1 id="querying-metric-metadata">Querying Metric Metadata&lt;/h1>
&lt;pre>&lt;code>GET /api/v1/metadata
&lt;/code>&lt;/pre>
&lt;h1 id="alertmanagers">Alertmanagers&lt;/h1>
&lt;pre>&lt;code>GET /api/v1/alertmanagers
&lt;/code>&lt;/pre>
&lt;h1 id="status">Status&lt;/h1>
&lt;pre>&lt;code>GET /api/v1/status/config
&lt;/code>&lt;/pre></description></item><item><title>Docs: TSDB Admin APIs</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/Prometheus/Prometheus-API/TSDB-Admin-APIs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/Prometheus/Prometheus-API/TSDB-Admin-APIs/</guid><description>
&lt;h1 id="heading">&lt;/h1>
&lt;p>参考：&lt;a href="https://prometheus.io/docs/prometheus/latest/querying/api/#tsdb-admin-apis">官方文档&lt;/a>&lt;/p></description></item></channel></rss>