<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>监控系统概述 on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/</link><description>Recent content in 监控系统概述 on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/index.xml" rel="self" type="application/rss+xml"/><item><title>监控系统概述</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/</guid><description>概述 参考：
马哥视频 公众号，贵司的监控系统处于什么时代 Network Monitor Server(网络监控服务器，简称 NMS)。最早的时候，在产生大规模监控需求前，一般都是通过在本机安装监控系统来实现对单台主机进行监控，后来当主机越来越多，这种让每台设备各自监控的方式显然是不行的，这时候为了解决这个问题，一般采用的方式是通过一个 NMS 来监控各个 node host，这台 NSM 要求能够定期得向每个被监控 node host 的传感器发送数据采集请求，各 node 收到请求后，收集对方请求的本地指标来返回给 NMS
NMS 会周期得完成数据采集，然后进行本地存储。为了实现简单便捷对被监控节点进行管理，就出现了 SNMP 这个协议。SNMP 是一种基于 UDP 的 7 层协议。
监控协议：
SNMP # 详见 SNMP(传统监控标准) HTTP # 详见 HTTP(新监控标准) 时间序列数据 在监控体系里，被采集的数据一般就称为 时间序列数据。通常人们将每一条时序数据，也称为 Metrics(指标)。一系列的指标，就是用来总结被监控目标在一段时间内的运行状态。
Metrics(指标) 就是指随时间变化的数据。不管是通过 SNMP 还是 HTTP 中的任何一种协议，从被监控对象采集到的状态信息，都统称为 Metrics(指标)。
监控系统组件 一套完整的监控系统，通常都包含实现下面几种功能的组件：
指标数据采集(有时候 采集 也称为 刮擦/抓取，英文一般是 Scrape) 指标数据存储 指标数据趋势分析及可视化 告警 常见的监控对象 系统层监控
硬件状态 系统监控：CPU、Load(负载)、Memory、DiskIO、Processes、Kernel Parameters 等等 网络监控：网络设备、网络延迟、丢包率 扽等 端口存活状态、JVM 的状态等 中间件及基础设施类系统监控</description></item><item><title>HTTP(新监控标准)</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/HTTP%E6%96%B0%E7%9B%91%E6%8E%A7%E6%A0%87%E5%87%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/HTTP%E6%96%B0%E7%9B%91%E6%8E%A7%E6%A0%87%E5%87%86/</guid><description>概述 参考：
由于 SNMP 的种种不便，现在更多的是基于 HTTP 协议来实现监控指标的采集。
同样，也是需要一个 Client 采集指标，需要一个 Server 端接收指标后存储指标。
像 SNMP 协议一样，光有协议还不行，基于 HTTP 协议的监控也需要一个数据模型的标准，就像 MIB 和 OID 类似。而现阶段，从 Prometheus 的 Data Model(数据模型) 演化过来的 OpenMetrics 标准，就是这么一种东西。
OpenMetrics 详见 OpenMetrics</description></item><item><title>MIB</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/MIB/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/MIB/</guid><description>概述 参考：
Wiki, Management_information_base MIB Wiki, Structure_of_Management_Information SMI https://www.techbuddies.io/2023/08/31/snmp-oids-explained-explore-what-they-are-and-how-to-correctly-use-them/ Management information base(管理信息库，简称 MIB) 是一种数据库，用于管理通信网络中的 entities(实体，也称为 Objects(对象))。MIB 使用 SMI 语法定义 Objects，其中包括 objects 的名称、OID、数据类型、描述(干什么用的)。MIB 也可以看作是 SNMP 的服务端与代理端的沟通桥梁，只有具有统一的格式，才能确定数据。
Structure of Managerment Intormation(管理信息结构,简称 SMI) 是 ASN.1 的子集，是一种技术语言，主要用在 SNMP(传统监控标准) 中，用于定义管理 MIB 中的 Objects。最新的版本是 1999 年的 SMIv2(RFC 2578)(文件内声明的名称为 SNMPv2-SMI)。
Object(对象) 可以是一个具体需要采集到的数据，比如 内存、CPU、磁盘、网络接口等等，也可以是一种抽象的集合，比如地区、硬件、系统、硬件、网络等等。上面说的所有事物，每一个都是一个 Object。所以，Object 可以包含另一个 Object，这也是人称常常将 MIB 称为树状的原因
Object Identifier(对象标识符，简称 OID) # 每一个 Object 都有一个 OID 数据存取格式：即每个 object 除了 OID 用作标示以外，还有数据内容需要遵循一定个格式规范 所谓的 MIB，其实主要是通过文件记录的内容。与其说是用文件记录，不如说 MIB 就是使用 ASN.1(标准的接口描述语言) 编写的代码。ASN.1 语言同样有类似 import、 function 这类的东西。只不过，记录 MIB 文件的语言，又与 ASN.</description></item><item><title>OpenMetrics</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/OpenMetrics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/OpenMetrics/</guid><description>概述 参考：
GitHub 项目，OpenObservability/OpenMetrics https://github.com/prometheus/OpenMetrics 官网 OpenMetrics 规范 OpenMetrics 是新时代的监控指标的标准，由 CNCF 主导，OpenMetrics 定义了大规模传输云原生指标的事实标准。
OpenMetricsSpec 用来定义监控指标的标准 [!Attention] 公众号 - InfoQ，OpenMetrics 归档并合并到 Prometheus
英文帖子: https://horovits.medium.com/openmetrics-is-archived-merged-into-prometheus-d555598d2d04 GitHub 项目，cncf/toc Issue 1364 已在 2024 年 8 月份将 OpenMetrics 项目归档合并到 Prometheus 中。
Data Model(数据模型) https://github.com/OpenObservability/OpenMetrics/blob/main/specification/OpenMetrics.md#data-model
平时我们口语交流，一般将随时间变化的数据称为 Metrics(指标)。这是监控数据的另一种叫法，与 OID 类似，可以代表一种监控数据、同时也是一种名词，比如我采集某个程序的监控数据，可以说采集这个程序的 Metrics。所以 Metrics 是一个抽象的叫法。
详见 Prometheus Data Model(数据模型)</description></item><item><title>SNMP(传统监控标准)</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/SNMP%E4%BC%A0%E7%BB%9F%E7%9B%91%E6%8E%A7%E6%A0%87%E5%87%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/SNMP%E4%BC%A0%E7%BB%9F%E7%9B%91%E6%8E%A7%E6%A0%87%E5%87%86/</guid><description>概述 参考：
RFC 1157，A Simple Network Management Protocol (SNMP) RFC 1156，Management Information Base for Network Management of TCP/IP-based internets Wiki, SNMP Simple Network Management Protocol(简单网络管理协议，简称 SNMP)。想实现该协议，通常需要由两部分完成(监控端和被监控端)，是在两端的两个进程之间进行通信，该进程都需要占用一个 socket
监控端：通常称为 NMS 端，管理端 被监控端：通常称为 Agent 端，NMS 要去收集被监控端的数据的时候，可能收集到的是一些很敏感的数据(CPU 使用率，带宽占用率等，这些一般是不公开的)，所以需要在被监控节点上部署一个专门的程序，这个程序能在本地取得一定的管理权限，然后接受监控端发送的数据收集指令，代为在被监控节点本地完成数据收集，所以被称为 Agent 端，代理端 SNMP 的工作模式，使用 udp 协议发送报文
监控端主动发送请求到被监控端的 agent 去收集数据 被监控节点主动向监控端报告自己所采集的数据 当监控端发现被监控端发生异常时，可以发送一些控制指令，将被监控端修改一些参数 实现 SNMP 的组件 Management Information Base(管理信息库，简称 MIB) # 用来定义所有监控端的 objects，其中包括 objects 的名称、OID、数据类型、描述(干什么用的)。MIB 也可以看作是 SNMP 的服务端与代理端的沟通桥梁，只有具有统一的格式，才能确定数据。 Object(对象) # 这个对象可以是一个具体需要采集到的数据，比如 内存、CPU、磁盘、网络接口等等，也可以是一种抽象的集合，比如地区、硬件、系统、硬件、网络等等。上面说的所有事物，每一个都是一个 Object。所以，Object 可以包含另一个 Object，这也是人称常常将 MIB 称为树状的原因 Object Identifier(对象标识符，简称 OID) # 每一个 Object 都有一个 OID 数据存取格式：即每个 object 除了 OID 用作标示以外，还有数据内容需要遵循一定个格式规范 Structure of Managerment Intormation(管理信息结构,简称 SMI) # 是 ASN.</description></item></channel></rss>