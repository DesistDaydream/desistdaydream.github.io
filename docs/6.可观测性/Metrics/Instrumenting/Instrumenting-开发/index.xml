<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Instrumenting 原理解析 on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Instrumenting/Instrumenting-%E5%BC%80%E5%8F%91/</link><description>Recent content in Instrumenting 原理解析 on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Instrumenting/Instrumenting-%E5%BC%80%E5%8F%91/index.xml" rel="self" type="application/rss+xml"/><item><title>Exporter 开发实践</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Instrumenting/Instrumenting-%E5%BC%80%E5%8F%91/Exporter-%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Instrumenting/Instrumenting-%E5%BC%80%E5%8F%91/Exporter-%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/</guid><description>概述 参考：
GitHub 自学代码 默认自带的 Metrics 的实现方式 公众号，k8s 技术圈-使用 Go 开发 Prometheus Exporter https://medium.com/teamzerolabs/15-steps-to-write-an-application-prometheus-exporter-in-go-9746b4520e26 在 Instrumenting 原理解析 中，逐一了解了实现 Exporter 的方法
首先，定义了一个包含 Metrics 描述符的结构体。以及实例化结构体的函数(也就是自定义一些 Metrics 的基本信息) 然后让该 结构体 实现 Collector 接口(i.e.为这个结构体添加 Describe() 与 Collect() 方法) 该 结构体 实现了 Collector 之后，就需要注册该 Metric，注册之后即可让 Prometheus 库通过 Collector 接口直接操作这个 Metric 而想要注册，首先需要一个新的注册器 创建完新的注册器之后，即可使用该注册器，将实现了 Collector 的 Metric 注册给 Prometheus 库。 最后，使用 HandlerFor() 将注册器作为参数传递进去，并返回一个 http.Handler，指定 访问路径，并设置监听端口 启动后，通过指定的访问路径，请求将会进入到 返回的 http.Handler 中，开始执行代码，最后获取完 Metric 信息，再响应给客户端 现在我将前面学习过程中零散的代码合并起来
// HelloWorldMetrics 用来保存所有 Metrics type HelloWorldMetrics struct { HelloWorldDesc *prometheus.</description></item><item><title>Exporter 开发问题</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Instrumenting/Instrumenting-%E5%BC%80%E5%8F%91/Exporter-%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Instrumenting/Instrumenting-%E5%BC%80%E5%8F%91/Exporter-%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98/</guid><description>collected before with the same name and label values time=&amp;ldquo;2021-03-25 12:17:30&amp;rdquo; level=info msg=&amp;ldquo;error gathering metrics: 3 error(s) occurred:\n*
collected metric &amp;ldquo;consoler_gdas_node_changer_status&amp;rdquo; { label:&amp;lt;name:&amp;ldquo;changer_serial&amp;rdquo; value:&amp;ldquo;Mcc01327 A&amp;rdquo; &amp;gt; label:&amp;lt;name:&amp;ldquo;ip&amp;rdquo; value:&amp;ldquo;192.168.10.139&amp;rdquo; &amp;gt; label:&amp;lt;name:&amp;ldquo;name&amp;rdquo; value:&amp;ldquo;DA-BH7&amp;rdquo; &amp;gt; gauge:&amp;lt;value:0 &amp;gt; } was collected before with the same name and label values\n*
collected metric &amp;ldquo;consoler_gdas_node_drive_status&amp;rdquo; { label:&amp;lt;name:&amp;ldquo;drive_serial&amp;rdquo; value:&amp;ldquo;Mcc01327 B&amp;rdquo; &amp;gt; label:&amp;lt;name:&amp;ldquo;ip&amp;rdquo; value:&amp;ldquo;192.168.10.139&amp;rdquo; &amp;gt; label:&amp;lt;name:&amp;ldquo;name&amp;rdquo; value:&amp;ldquo;DA-BH7&amp;rdquo; &amp;gt; gauge:&amp;lt;value:0 &amp;gt; } was collected before with the same name and label values\n*</description></item><item><title>Instrumenting 原理解析</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Instrumenting/Instrumenting-%E5%BC%80%E5%8F%91/Instrumenting-%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Instrumenting/Instrumenting-%E5%BC%80%E5%8F%91/Instrumenting-%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/</guid><description>概述 参考：
根据源码一步一步推到自学 prometheus 默认自带的 Metrics 的实现方式 Go 语言 Library prometheus/promhttp 库 Instrumenting 的实现主要依靠以下几种类型：
Desc(描述符) # 结构体。定义一个 Metric Registerer(注册器) # 接口。根据 Metrics 注册一个 Collector(采集器) Collector(采集器) # 接口。采集 Metrics 的具体实现 Gatherer(聚集器) # 接口。将采集到的 Metrics 聚集在一起 其中 Collector(采集器) 就像其名字一样，是定义采集 Metrics 的主要行为。在代码中，Collector(采集器) 表现为一个接口。这个接口有两个方法，Describe() 与 Collect()，其中在 Collect() 这个方法中，定义主要的采集 Metrics 行为
Desc(描述符) - 用来描述 Metric 的结构体 https://pkg.go.dev/github.com/prometheus/client_golang/prometheus#Desc
在 Prometheus 中，使用 Desc 结构体 来描述一个 Metric。Desc 是所有事物的基础，没有 Desc 也就无从采集 Metric，同时管理 Metric 也是通过 Desc
type Desc struct { // 完全限定名称。也就是 Metric 的名字，fqName 由 Namespace、Subsystem、Name 三部分组成 fqName string // Metric 的帮助信息 help string // constLabelPairs(常量标签对) 包含基于常量标签的预先计算的 DTO标签对。 constLabelPairs []*dto.</description></item></channel></rss>