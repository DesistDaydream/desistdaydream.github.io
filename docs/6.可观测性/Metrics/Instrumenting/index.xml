<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Instrumenting on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Instrumenting/</link><description>Recent content in Instrumenting on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Instrumenting/index.xml" rel="self" type="application/rss+xml"/><item><title>Instrumenting</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Instrumenting/Instrumenting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Instrumenting/Instrumenting/</guid><description>概述 参考：
官方文档，Instrumenting - Exporter 官方文档，最佳实践 - Instrumentation Prometheus 可以从如下几类 Intrumenting 中 Scrape(抓取) 指标：
Instrumentation(检测仪/仪表化) # 内部仪表。本质上是 Prometheus 的 Client Libraries(客户端库) 添加到程序代码中，以此暴露一个 endpoint，Prometheus Server 可以通过该 Endpoiint 抓取到指标。 可以理解为内嵌的 Exporter，比如 Prometheus Server 的 9090 端口的 /metrics 就属于此类。 说白了，就是被监控目标自己就可以吐出符合 Prometheus 格式的指标数据 Exporters # 外部仪表。 概念更为宽泛，除了使用到 Instrumentation 实现的各种程序外，还有一些通过脚本产生的符合 Prometheus Data Model(数据模型) 的纯文本的程序也可以称为 Exporter。 Pushgateway # 针对需要推送指标的应用 Instrumentation 参考:
官方文档，Instrumentation - 客户端库 Instrumentation(仪表化)，顾名思义，将某个东西变为 Instrumenting（也可以说变为 Exporter）。所以 Instrumentation 是一组 Library，当我们在编写的程序代码中引入了 Instrumentation，并使用其提供的各种方法、接口，那么我们的程序就可以变成像仪表一样的东西，以展示出想要的 观测或监控 数据。
Prometheus 官方维护了某些语言的 Library:</description></item><item><title>Blackbox Exporter</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Instrumenting/Blackbox-Exporter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Instrumenting/Blackbox-Exporter/</guid><description>概述 参考：
GitHub 项目，prometheus/blackbox_exporter 官方文档 公众号 - 云原生小白，Prometheus Operator中探针的使用 我们可以使用如下几种协议来对目标进行探测
http tcp dns icmp 使用方法 curl &amp;#39;http://10.244.1.26:19115/probe?module=http_2xx&amp;amp;target=www.baidu.com&amp;#39; Prometheus 使用 Blackbox Exporter 的配置示例 与一般 Exporter 配置不同， Blackbox Exporter 的配置方式与 SNMP Exporter 更像，每一个待探测的目标将会作为 Blackbox Exporter 程序的参数。可以通过 Relabel 机制，设置目标的 instance 标签。
scrape_configs: - job_name: &amp;#34;blackbox-http-get&amp;#34; metrics_path: /probe params: module: [http_2xx] # Look for a HTTP 200 response. static_configs: - targets: - http://prometheus.io # Target to probe with http. - https://prometheus.io # Target to probe with https.</description></item><item><title>Node Exporter</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Instrumenting/Node-Exporter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Instrumenting/Node-Exporter/</guid><description>概述 参考：
GitHub 项目，prometheus/node_exporter Node Exporter 用于收集服务器的 metrics，比如 内存、cpu、磁盘、I/O、电源、etc. 。Node Exporter 将采集各种指标的代码逻辑抽象称为 Node 的 Collector(采集器)。每类指标都对应一个 Collector，比如 cpu 采集器、meminfo 采集器、etc. 这些名称通常都能直观得看到想要采集的指标是什么
node_exporter 默认监听在 9100 端口上。
Prometheus Server 抓取 metrics 的位置 http://IP:9100/metrics # 获取 node_exporter 所在主机的 metrics 信息
Node Exporter 部署 二进制文件安装 node_exporter 为监控服务器 CPU、内存、磁盘、I/O 等信息，首先需要安装 node_exporter。node_exporter 的作用是服务器数据收集。
下载 node_exporter，过程基本与使用 prometheus 程序一样。下载页面在此 export VERSION=&amp;#34;1.6.0&amp;#34; wget https://github.com/prometheus/node_exporter/releases/download/v${VERSION}/node_exporter-${VERSION}.linux-amd64.tar.gz # 解压 mkdir -p /usr/local/prometheus/node_exporter tar -zxvf node_exporter-${VERSION}.linux-amd64.tar.gz -C /usr/local/prometheus/node_exporter --strip-components=1 创建 node_exporter 的 systemd 服务，在这里可以看到官方提供的 systemd 样例 tee /usr/lib/systemd/system/node-exporter.</description></item><item><title>Other Exporter</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Instrumenting/Other-Exporter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Instrumenting/Other-Exporter/</guid><description>概述 官方推荐的一些第三方 exporter: https://prometheus.io/docs/instrumenting/exporters/
process-exporter: 采集进程指标
https://github.com/ncabatoff/process-exporter Process Exporter 参考：
GitHub 项目，ncabatoff/process-exporter https://mp.weixin.qq.com/s/sbnTByKJYFKQrvnU_iPnZA process_names 下的数组定义进程组名称及该进程组的匹配条件，一共 3 个匹配方式
comm # 与 /proc/${pid}/stat 中第二个字段进行匹配 exe # cmdline # 与进程的所有参数进行匹配 process_names: # comm is the second field of /proc/&amp;lt;pid&amp;gt;/stat minus parens. # It is the base executable name, truncated at 15 chars. # It cannot be modified by the program, unlike exe. - comm: - bash # exe is argv[0]. If no slashes, only basename of argv[0] need match.</description></item><item><title>Push Gateway</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Instrumenting/Push-Gateway/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Instrumenting/Push-Gateway/</guid><description>概述 参考：
GitHub 项目，prometheus/pushgateway 官方文档，最佳实践 - 合时使用 Pushgateway Pushgateway 是 Prometheus 生态中一个重要工具，使用它的原因主要是：
Prometheus 采用 pull 模式，可能由于不在一个子网或者防火墙原因，导致 Prometheus 无法直接拉取各个 target 数据。 在监控业务数据的时候，需要将不同数据汇总, 由 Prometheus 统一收集。 由于以上原因，不得不使用 pushgateway，但在使用之前，有必要了解一下它的一些弊端：
将多个节点数据汇总到 pushgateway, 如果 pushgateway 挂了，受影响比多个 target 大。 Prometheus 拉取状态 up 只针对 pushgateway, 无法做到对每个节点有效。 Pushgateway 可以持久化推送给它的所有监控数据。 Pushgateway 对不推送的指标没有超时设计，并且在讨论中也不打算实现，因为各种提案都是不好的模式 https://github.com/prometheus/pushgateway/issues/19 https://groups.google.com/forum/#!topic/prometheus-developers/9IyUxRvhY7w 因此，即使你的监控已经下线，prometheus 还会拉取到旧的监控数据，需要手动清理 pushgateway 不要的数据。
Note：pushgateway 无法主动获取获取目标 metrics。目标需要通过脚本、daemon 程序、手动(e.g.通过 curl 获取 metrics 再发送给 pushgateway)等等方式，主动推送自己的 metrics 到 pushgateway 上。
PushGateway 部署 docker run -d -p 9091:9091 prom/pushgateway 在 Prometheus Server 的配置文件中加入配置以便让 Prometheus Server 获取 pushgateway 中的 metrics</description></item></channel></rss>