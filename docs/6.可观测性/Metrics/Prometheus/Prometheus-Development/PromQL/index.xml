<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PromQL on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Prometheus-Development/PromQL/</link><description>Recent content in PromQL on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Prometheus-Development/PromQL/index.xml" rel="self" type="application/rss+xml"/><item><title>PromQL</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Prometheus-Development/PromQL/PromQL/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Prometheus-Development/PromQL/PromQL/</guid><description>概述 参考：
GitHub 项目，prometheus/prometheus - promql 查询结果数据结构 代码中的查询结果类型，与 Querying API 中描述的一致
从 web/api/v1/api.go 文件可以看到所有可用的 HTTP API，从 r.Get(&amp;quot;/query&amp;quot;, wrap(api.query)) 可以跳转到即时向量表达式的查询逻辑。
func (api *API) query(r *http.Request) (result apiFuncResult) { ...... return apiFuncResult{&amp;amp;queryData{ ResultType: res.Value.Type(), Result: res.Value, Stats: qs, }, nil, res.Warnings, qry.Close} } 代码中的查询结果类型，与 Querying API 中描述的一致，主要是 4 个字段：status、data 中的 resultType 与 result
type queryData struct { ResultType parser.ValueType `json:&amp;#34;resultType&amp;#34;` Result parser.Value `json:&amp;#34;result&amp;#34;` Stats *stats.QueryStats `json:&amp;#34;stats,omitempty&amp;#34;` } parser.Value 是一个接口
type Value interface { Type() ValueType String() string } 一共有 4 个结构体实现了该接口</description></item></channel></rss>