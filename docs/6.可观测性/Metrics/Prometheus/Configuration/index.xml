<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Configuration on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Configuration/</link><description>Recent content in Configuration on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Configuration/index.xml" rel="self" type="application/rss+xml"/><item><title>Promethesu Server</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Configuration/Promethesu-Server/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Configuration/Promethesu-Server/</guid><description>概述 参考：
官方文档，配置 - 配置 官方文档，配置 - 命令行 - prometheus Prometheus Server 可通过两种方式来改变运行时行为
命令行标志 配置文件 配置文件热更新 Prometheus Server 可以在运行时重新加载其配置文件(也就俗称的热更新)。如果是新的配置不正确，则 Prometheus Server 则不会应用新的配置，并在日志中显示错误点。
有两种方式可以实现 Prometheus Server 的热更新功能
向 Prometheus Server 进程发送 SIGHUP 信号。 向 Prometheus Server 暴露的 /-/reload 端点发送 HTTP 的 POST 请求 注意：想要实现热更新功能，需要在 Prometheus Server 中指定 --web.enable-lifecycle 标志，这也将重新加载所有的 Rules 配置文件。
Prometheus Server 命令行标志详解 可以通过 prometheus -h 命令查看所有的可以用标志
prometheus 程序在启动时，可以使用一些标志来对程序进行一些基本设定，比如数据存储路径、存储时间等等
&amp;ndash;config.file(STRING) # Prometheus Server 的主配置文件。默认值: prometheus.yml，i.e. 当前目录下的 prometheus.yml 文件 &amp;ndash;enable-feature=&amp;hellip; # 启动指定的功能特性，多个功能以逗号分割。可以开启的功能详见：官方文档，已关闭的功能 &amp;ndash;web.</description></item><item><title>Rules</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Configuration/Rules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Configuration/Rules/</guid><description>概述 参考:
Prometheus 规则分为两种：
Recording Rule(记录规则) # Alerting Rule(告警规则) # ！！！注意编写告警规则的逻辑，由于 Prometheus 会定期评估告警，所以会定期读取数据，尽相避免读取大范围的数据，以免造成性能问题 Prometheus 规则配置文件需要在 Prometheus Server 配置 文件中的 rule_files 字段中指定，让 Prometheus 加载指定的文件并读取其配置(这个过程称为 Evaluation(评估))。
一个规则封装了一个向量表达式，该向量表达式在指定的时间间隔内进行评估并采取行动（目前要么记录，要么用于报警）。
可以通过发送 SIGHUP 到 Prometheus 进程在运行时重新加载规则文件。仅当所有规则文件格式正确时，才会应用更改。
[!Tip] 规则语法检查 可以使用 promtool 程序在不启动 Prometheus Server 的情况下检查文件中的语法是否正确。.e.g. promtool check rules /path/to/example.rules.yml
Recording Rule(记录规则) 参考：
官方文档，配置 - 记录规则 在我们使用 Prometheus 的过程中，随着时间的推移，存储在 Prometheus 中的监控指标数据越来越多，查询频率也在不断的增加，当我们用 Grafana 添加更多的 Dashboard 的时候，可能会慢慢的体验到 Grafana 已经无法按时渲染图表，并且偶尔还会出现超时的情况，特别是当我们在长时间汇总大量的指标数据的时候，Prometheus 查询超时的情况可能更多了，这时就需要一种能够类似于后排批处理的机制在后台完成这些复杂运算的计算，对于使用者而言只需要查询这些运算结果即可。
当我们有频繁使用的复杂查询时，如果直接将语句写在 Grafana 的 query 中，Grafana 每次刷新都对 Promethus 提交实时查询，会增加 Prometheus 的性能消耗并且降低了响应速度。 这时候我们就可以用到 Recoding rules 了。</description></item><item><title>Template</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Configuration/Template/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Configuration/Template/</guid><description>概述 参考：
官方文档，配置 - 模板示例 官方文档，配置 - 模板参考 Prometheus 可以在部分配置文件中（Rules、etc.）使用 Template(模板) 的能力，Prometheus 的模板基于 Go 语言的 Template 能力。
Template Function Prometheus 模板增加了一些函数以便更轻松得处理 PromQL 的查询结果（e.g. 将 Bytes 的数直接转为人类可读的带单位的结果），所有函数列表详见官方文档</description></item></channel></rss>