<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦的站点 – Configuration</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Configuration/</link><description>Recent content in Configuration on 断念梦的站点</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Configuration/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Promethesu Server</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Configuration/Promethesu-Server/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Configuration/Promethesu-Server/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://prometheus.io/docs/prometheus/latest/configuration/configuration/">官方文档，配置 - 配置&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://prometheus.io/docs/prometheus/latest/command-line/prometheus/">官方文档，配置 - 命令行 - prometheus&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Prometheus Server 可通过两种方式来改变运行时行为&lt;/p>
&lt;ul>
&lt;li>命令行标志&lt;/li>
&lt;li>配置文件&lt;/li>
&lt;/ul>
&lt;h2 id="配置文件热更新">配置文件热更新&lt;a class="td-heading-self-link" href="#%e9%85%8d%e7%bd%ae%e6%96%87%e4%bb%b6%e7%83%ad%e6%9b%b4%e6%96%b0" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Prometheus Server 可以在运行时重新加载其配置文件(也就俗称的热更新)。如果是新的配置不正确，则 Prometheus Server 则不会应用新的配置，并在日志中显示错误点。&lt;/p>
&lt;p>有两种方式可以实现 Prometheus Server 的热更新功能&lt;/p>
&lt;ul>
&lt;li>向 Prometheus Server 进程发送 &lt;code>SIGHUP&lt;/code> 信号。&lt;/li>
&lt;li>向 Prometheus Server 暴露的 &lt;code>/-/reload&lt;/code> 端点发送 &lt;code>HTTP 的 POST&lt;/code> 请求&lt;/li>
&lt;/ul>
&lt;p>注意：想要实现热更新功能，需要在 Prometheus Server 中指定 &lt;code>--web.enable-lifecycle&lt;/code> 标志，这也将重新加载所有的 Rules 配置文件。&lt;/p>
&lt;h1 id="prometheus-server-命令行标志详解">Prometheus Server 命令行标志详解&lt;a class="td-heading-self-link" href="#prometheus-server-%e5%91%bd%e4%bb%a4%e8%a1%8c%e6%a0%87%e5%bf%97%e8%af%a6%e8%a7%a3" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>可以通过 prometheus -h 命令查看所有的可以用标志&lt;/p>
&lt;p>prometheus 程序在启动时，可以使用一些标志来对程序进行一些基本设定，比如数据存储路径、存储时间等等&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&amp;ndash;config.file=/PATH/TO/FILE&lt;/strong> # prometheus 主配置文件，默认为当前路径的 prometheus.yml&lt;/li>
&lt;li>&lt;strong>&amp;ndash;enable-feature=&amp;hellip;&lt;/strong> # 启动指定的功能特性，多个功能以逗号分割。可以开启的功能详见：&lt;a href="https://prometheus.io/docs/prometheus/latest/disabled_features/">官方文档，已关闭的功能&lt;/a>&lt;/li>
&lt;li>&lt;strong>&amp;ndash;web.listen-address=&amp;ldquo;0.0.0.0:9090&amp;rdquo;&lt;/strong> # Prometheus 监听地址。&lt;code>默认值：0.0.0.0:9090&lt;/code>。该端口用于 Web UI、API 和 Telemetry(遥测)&lt;/li>
&lt;li>&lt;strong>&amp;ndash;web.config.file=/PATH/TO/FILE&lt;/strong> # [实验标志]用于开启 TLS 或 身份验证 配置文件路径。&lt;/li>
&lt;li>&amp;ndash;web.read-timeout=5m # Maximum duration before timing out read of the request, and closing idle connections.&lt;/li>
&lt;li>&lt;strong>&amp;ndash;web.max-connections=INT&lt;/strong> # 可以同时连接到 Prometheus Server 的最大数量。&lt;code>默认值:512&lt;/code>&lt;/li>
&lt;li>&lt;strong>&amp;ndash;web.external-url=URL&lt;/strong> # 可以从外部访问 Prometheus 的 URL。
&lt;ul>
&lt;li>例如，如果 Prometheus 是通过反向代理提供的，用于生成返回 Prometheus 本身的相对和绝对链接。如果 URL 具有路径部分，它将被用作所有 HTTP 的前缀 Prometheus 服务的端点。 如果省略，则会自动派生相关的 URL 组件。
&lt;ul>
&lt;li>注意：该标志在反向代理时似乎问题，详见：&lt;a href="https://github.com/prometheus/prometheus/issues/1583">https://github.com/prometheus/prometheus/issues/1583&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>例如，Prometheus 产生的的告警，推送到 AlertManager 时，会有一个 &lt;code>generatorURL&lt;/code> 字段，该字段中所使用的 URL 中的 Endpoint，就是 web.external-url，这个 URL 可以让获取该告警的人，点击 URL 即可跳转到 Prometheus 的 Web 页面并使用对应的 PromQL 查询。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>&amp;ndash;web.route-prefix=PATH&lt;/strong> # Web 端内部路由的前缀。 默认为 &amp;ndash;web.external-url 标志指定的路径。i.e.后端代码的路由入口路径。一般默认为 / 。&lt;/li>
&lt;li>&amp;ndash;web.user-assets= # Path to stat storage.tsdb.max-block-durationic asset directory, available at /user.&lt;/li>
&lt;li>&lt;strong>&amp;ndash;web.enable-lifecycle&lt;/strong> # 开启配置热更新，开启后，可使用 curl -X POST &lt;a href="http://PrometheusServerIP:9090/-/reload">http://PrometheusServerIP:9090/-/reload&lt;/a> 命令来重载配置以便让更改后的配置生效，而不用重启 prometheus 进程&lt;/li>
&lt;li>&lt;strong>&amp;ndash;web.enable-admin-api&lt;/strong> # 开启管理操作 API 端点。通过 admin API，可以删除时序数据。&lt;/li>
&lt;li>&amp;ndash;web.console.templates=&amp;ldquo;consoles&amp;rdquo; # Path to the console template directory, available at /consoles.&lt;/li>
&lt;li>&amp;ndash;web.console.libraries=&amp;ldquo;console_libraries&amp;rdquo; # Path to the console library directory.&lt;/li>
&lt;li>&amp;ndash;web.page-title=&amp;ldquo;Prometheus Time Series Collection and Processing Server&amp;rdquo; # Document title of Prometheus instance.&lt;/li>
&lt;li>&amp;ndash;web.cors.origin=&amp;quot;.*&amp;quot; # Regex for CORS origin. It is fully anchored. Example: &amp;lsquo;https?://(domain1|domain2).com&amp;rsquo;&lt;/li>
&lt;li>&amp;ndash;web.enable-remote-write-receiver # 开启 Prometheus &lt;a href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Storage/Storage.md">Storage&lt;/a> 中的 Remote Storage(远程存储) 功能。&lt;/li>
&lt;li>&lt;strong>&amp;ndash;storage.tsdb.path=&amp;quot;/PATH/DIR&amp;quot;&lt;/strong> # prometheus 存储 metircs 数据的目录(使用绝对路径)&lt;/li>
&lt;li>&lt;strong>&amp;ndash;storage.tsdb.retention.time&lt;/strong>(DURATION) # 数据的存储时间，如果既未设置此标志也未设置 storage.tsdb.retention.size 标志，&lt;code>默认值：15d&lt;/code>。支持的单位：y，w，d，h，m，s，ms。&lt;/li>
&lt;li>&amp;ndash;storage.tsdb.retention.size=STORAGE.TSDB.RETENTION.SIZE # [EXPERIMENTAL] Maximum number of bytes that can be stored for blocks. Units supported: KB, MB, GB, TB, PB. This flag is experimental and can be changed in future releases.&lt;/li>
&lt;li>&amp;ndash;storage.tsdb.no-lockfile # 不在数据目录创建锁文件。暂时不理解什么意思，待研究&lt;/li>
&lt;li>&amp;ndash;storage.tsdb.allow-overlapping-blocks # [EXPERIMENTAL] Allow overlapping blocks, which in turn enables vertical compaction and vertical query merge.&lt;/li>
&lt;li>&amp;ndash;storage.tsdb.wal-compression # Compress the tsdb WAL.&lt;/li>
&lt;li>&amp;ndash;storage.remote.flush-deadline= # How long to wait flushing sample on shutdown or config reload.&lt;/li>
&lt;li>&amp;ndash;storage.remote.read-sample-limit=5e7 # Maximum overall number of samples to return via the remote read interface, in a single query. 0 means no limit. This limit is ignored for streamed response types.&lt;/li>
&lt;li>&amp;ndash;storage.remote.read-concurrent-limit=10 # Maximum number of concurrent remote read calls. 0 means no limit.&lt;/li>
&lt;li>&amp;ndash;storage.remote.read-max-bytes-in-frame=1048576 # Maximum number of bytes in a single frame for streaming remote read response types before marshalling. Note that client might have limit on frame size as well. 1MB as recommended by protobuf&lt;/li>
&lt;li>by default.&lt;/li>
&lt;li>&amp;ndash;rules.alert.for-outage-tolerance=1h # Max time to tolerate prometheus outage for restoring &amp;ldquo;for&amp;rdquo; state of alert.&lt;/li>
&lt;li>&amp;ndash;rules.alert.for-grace-period=10m # Minimum duration between alert and restored &amp;ldquo;for&amp;rdquo; state. This is maintained only for alerts with configured &amp;ldquo;for&amp;rdquo; time greater than grace period.&lt;/li>
&lt;li>&lt;strong>&amp;ndash;rules.alert.resend-delay=DURATION&lt;/strong># 向 Alertmanager 重新发送警报前的最少等待时间。&lt;code>默认值：1m&lt;/code>。
&lt;ul>
&lt;li>当告警处于 FIRING 状态时，每间隔 1m，就会再次发送一次。注意：重发送之前，还需要一个评估规则的等待期，评估完成后，再等待该值的时间，才会重新发送告警。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&amp;ndash;alertmanager.notification-queue-capacity=10000 # The capacity of the queue for pending Alertmanager notifications.&lt;/li>
&lt;li>&amp;ndash;alertmanager.timeout=10s # Timeout for sending alerts to Alertmanager.&lt;/li>
&lt;li>&lt;strong>&amp;ndash;query.lookback-delta=DURATION&lt;/strong> # 评估 PromQL 表达式时最大的回溯时间。&lt;code>默认值：5m&lt;/code>
&lt;ul>
&lt;li>比如，当采集目标的间隔时间为 10m 时，由于该设置，最大只能查询当前时间的前 5m 的数据，这是，即时向量表达式返回的结果将会为空。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>&amp;ndash;query.timeout=DURATION&lt;/strong> # 一次查询的超时时间。&lt;code>默认值：2m&lt;/code>&lt;/li>
&lt;li>&amp;ndash;query.max-concurrency=20 # Maximum number of queries executed concurrently.&lt;/li>
&lt;li>&amp;ndash;query.max-samples=50000000 # Maximum number of samples a single query can load into memory. Note that queries will fail if they try to load more samples than this into memory, so this also limits the number of samples a query can return.&lt;/li>
&lt;li>&lt;strong>&amp;ndash;log.level=STRING&lt;/strong> # 设定 Prometheus Server 运行时输出的日志的级别。&lt;code>默认值：info&lt;/code>。 可用的值有：debug, info, warn, error&lt;/li>
&lt;li>&lt;strong>&amp;ndash;log.format=logfmt&lt;/strong> # 设定 Prometheus Server 运行时输出的日志的格式。&lt;code>默认值：logfmt&lt;/code>。可用的值有：logfmt, json&lt;/li>
&lt;/ul>
&lt;h1 id="prometheusyaml-配置文件详解">prometheus.yaml 配置文件详解&lt;a class="td-heading-self-link" href="#prometheusyaml-%e9%85%8d%e7%bd%ae%e6%96%87%e4%bb%b6%e8%af%a6%e8%a7%a3" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>下文用到的字段值的占位符说明&lt;/p>
&lt;ul>
&lt;li>BOOLEAN # 可以采用 true 或 false 值的布尔值&lt;/li>
&lt;li>DURATION # 持续时间。可以使用正则表达式
&lt;ul>
&lt;li>&lt;code>((([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?((([0-9]+)m)?((([0-9]+)s)?((([0-9]+)ms)?|0)&lt;/code>，例如：1d、1h30m、5m、10s。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>FILENAME # 当前工作目录中的有效路径&lt;/li>
&lt;li>HOST # 由主机名或 IP 后跟可选端口号组成的有效字符串。&lt;/li>
&lt;li>INT # 一个整数值&lt;/li>
&lt;li>LABELNAME # 与正则表达式 &lt;code>[a-zA-Z _] [a-zA-Z0-9 _] *&lt;/code> 匹配的字符串&lt;/li>
&lt;li>LABELVALUE # 一串 unicode 字符&lt;/li>
&lt;li>PATH # 有效的 URL 路径&lt;/li>
&lt;li>SCHEME # 一个字符串，可以使用值 http 或 https&lt;/li>
&lt;li>SECRET # 作为机密的常规字符串，例如密码&lt;/li>
&lt;li>STRING # 常规字符串&lt;/li>
&lt;li>TMPL_STRING # 使用前已模板扩展的字符串&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>顶层字段&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>global&lt;/strong>(&lt;a href="#global">global&lt;/a>) # 全局配置，所有内容作用于所有配置环境中,若其余配置环境中不再指定同样的配置，则global中的配置作为默认配置&lt;/li>
&lt;li>&lt;strong>rule_files&lt;/strong>(&lt;a href="#rule_files">rule_files&lt;/a>) #&lt;/li>
&lt;li>&lt;strong>scrape_configs&lt;/strong>([]&lt;a href="#scrape_configs(%E5%8D%A0%E6%AF%94%E6%9C%80%E5%A4%A7%E7%9A%84%E5%AD%97%E6%AE%B5)">scrape_configs&lt;/a>) # 抓取 Target 的 metrics 时的配置&lt;/li>
&lt;li>&lt;strong>alerting&lt;/strong>(&lt;a href="#alerting">alerting&lt;/a>) # 与 Alertmanager 相关的配置
&lt;ul>
&lt;li>alert_relabel_configs(&lt;a href="#relabel_configs">relabel_configs&lt;/a>)&lt;/li>
&lt;li>alertmanagers&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>remote_write&lt;/strong>([]&lt;a href="#remote_write">remote_write&lt;/a>) # 与远程写入相关功能的配置&lt;/li>
&lt;li>&lt;strong>remote_read&lt;/strong>([]&lt;a href="#remote_read">remote_read&lt;/a>) # 与远程读取相关功能的配置&lt;/li>
&lt;/ul>
&lt;h2 id="global">global&lt;a class="td-heading-self-link" href="#global" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>全局配置，所有内容作用于所有配置环境中,若其余配置环境中不再指定同样的配置，则 global 中的配置作为默认配置&lt;/p>
&lt;p>&lt;strong>scrape_interval(DURATION)&lt;/strong> # 抓取 targets 的指标频率，&lt;code>默认值：1m&lt;/code>。&lt;/p>
&lt;p>&lt;strong>scrape_timeout(DURATION)&lt;/strong> # 对 targets 发起抓取请求的超时时间。&lt;code>默认值：10s&lt;/code>。&lt;/p>
&lt;p>&lt;strong>scrape_protocols&lt;/strong> # 抓取 Targets 的协议。&lt;code>默认值: OpenMetricsText1.0.0, OpenMetricsText0.0.1, PrometheusText0.0.4&lt;/code>&lt;/p>
&lt;p>&lt;strong>evaluation_interval(DURATION)&lt;/strong> # 评估规则的周期。&lt;code>默认值：1m&lt;/code>。&lt;/p>
&lt;blockquote>
&lt;p>该字段主要用于向规则配置文件传递全局的配置。这个值会被 &lt;a href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Configuration/Rules.md">Rules&lt;/a>文件中的 &lt;code>.groups.interval&lt;/code> 覆盖，详见 interval 字段详解&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>external_labels(map[STRING]STRING)&lt;/strong> # 与外部系统(federation, remote storage, Alertmanager)通信时添加到任何时间序列或警报的标签。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>KEY: VAL&lt;/strong> # 比如该键值可以是 run: httpd，标签名是 run，run 的值是 httpd，KEY 与 VAL 使用字母，数字，_，-，.这几个字符且以字母或数字开头；val 可以为空。&lt;/li>
&lt;li>&amp;hellip;&amp;hellip;&lt;/li>
&lt;/ul>
&lt;h2 id="rule_files">rule_files&lt;a class="td-heading-self-link" href="#rule_files" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Configuration/Rules.md">规则文件配置&lt;/a>列表，从所有匹配到的文件中读取配置内容。可以使用正则表达式匹配多个符合的文件。Prometheus 支持两种规则&lt;/p>
&lt;ul>
&lt;li>recording rules(记录规则)&lt;/li>
&lt;li>alerting rules(告警规则)&lt;/li>
&lt;/ul>
&lt;h2 id="scrape_configs占比最大的字段">scrape_configs(占比最大的字段)&lt;a class="td-heading-self-link" href="#scrape_configs%e5%8d%a0%e6%af%94%e6%9c%80%e5%a4%a7%e7%9a%84%e5%ad%97%e6%ae%b5" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://prometheus.io/docs/prometheus/latest/configuration/configuration/#scrape_config">https://prometheus.io/docs/prometheus/latest/configuration/configuration/#scrape_config&lt;/a>&lt;/p>
&lt;p>在 &lt;a href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Prometheus.md">Prometheus&lt;/a> 一文中，粗略介绍了基本的 scrape_configs 配置段的内容，下面是最基本的配置：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">scrape_configs&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">job_name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;prometheus&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">scrape_interval&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">5s&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">static_configs&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">targets&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;localhost:9090&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>scrape_configs 是 Prometheus 采集指标的最重要也是最基本的配置信息，scrape_configs 字段是一个数组，所以可以配置多个 Scrape 配置，不同的 Scrape 配置，所以该段配置至少需要包含以下几个方面：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>名字&lt;/strong> # 每个 scrape 工作都应该具有一个名字。称为 job_name，名字主要起到标识符的作用。
&lt;ul>
&lt;li>该示例定义了一个抓取配置的 job，名字叫 prometheus&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>目标&lt;/strong> # 要抓取的 metrics 的目标。目标可以通过 &lt;strong>静态&lt;/strong> 或者 &lt;strong>动态(i.e.各种服务发现)&lt;/strong> 这两种方式指定
&lt;ul>
&lt;li>该示例通过静态配置定义这个 job 中要抓取的目标主机，目标主机由 IP:PORT 组成&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>间隔&lt;/strong> # 该 scrape 工作每次抓取 metrics 的时间间隔。就是每隔 X 秒抓一次
&lt;ul>
&lt;li>该示例每次抓取 metrics 的时间间隔为 5 秒(i.e.每 5 秒获取一次 metrics)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>其他&lt;/strong> # 除了名字、目标、间隔 以外，还可以配置一些额外的抓取配置，比如发起 HTTP 请求时需要携带的 Header 与 Body、抓取策略 等等&lt;/li>
&lt;/ul>
&lt;h3 id="基本配置">基本配置&lt;a class="td-heading-self-link" href="#%e5%9f%ba%e6%9c%ac%e9%85%8d%e7%bd%ae" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>&lt;strong>job_name&lt;/strong>(STRING) # 指定抓取 Metrics 的 Job 名字&lt;/p>
&lt;p>&lt;strong>scrape_interval&lt;/strong>(DURATION) # 指定这个 job 中抓取 targets 的频率。默认使用 global 配置环境中同名参数的值&lt;/p>
&lt;p>&lt;strong>scrape_timeout&lt;/strong>(DURATION) # 指定这个 job 中抓取 targets 的超时时长。默认使用 global 配置环境中同名参数的值&lt;/p>
&lt;p>&lt;strong>metrics_path&lt;/strong>(STRING) # 从 targets 获取 metrics 时 http 请求的路径。&lt;code>默认值: /metrics&lt;/code>&lt;/p>
&lt;p>&lt;strong>honor_labels&lt;/strong>(BOOLEAN) # 控制 Prometheus 是否尊重抓取到的数据中的标签，i.e. 如何处理标间之间的冲突。&lt;code>默认值：false&lt;/code>&lt;/p>
&lt;ul>
&lt;li>获取 targets 的 metrics 时(e.g.snmp_exporter|Federate|pushgateway 等)，其中的标签有可能会与本身的标签存在冲突
&lt;ul>
&lt;li>该参数的值为 true 时，则以抓取数据中的标签为准&lt;/li>
&lt;li>值为 false 时，就会重新命名表桥为 exported 形式，然后添加配置文件中的标签。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>honor_timestamps&lt;/strong>(BOOLEAN) # 控制 Prometheus 是否尊重抓取到的数据中的时间戳。&lt;code>默认值：true&lt;/code>&lt;/p>
&lt;ul>
&lt;li>比如从 federate、pushgateway 等地方获取指标时，指标中都是带着时间戳的，
&lt;ul>
&lt;li>若设置为 false，则会忽略这些采集到的时间戳，在入库时加上采集时的时间戳。&lt;/li>
&lt;li>若设置为 true，则是在入库时使用抓到到的指标中的时间戳。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>sample_limit&lt;/strong>(INT) # 每次抓取 metrics 的数量限制。&lt;code>默认值：0&lt;/code>。0 表示不限制&lt;/p>
&lt;h3 id="http-配置">HTTP 配置&lt;a class="td-heading-self-link" href="#http-%e9%85%8d%e7%bd%ae" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>Prometheus 抓取目标就是发起 HTTP 请求。&lt;/p>
&lt;p>除了 scheme、params 字段以外的其他字段是 Prometheus 共享库中的通用 HTTP 客户端配置，即下面的 &lt;code>HTTPClientConfig&lt;/code> 结构体中的内容。&lt;/p>
&lt;p>代码：&lt;a href="https://github.com/prometheus/common/blob/v0.30.0/config/http_config.go#L159">common/config/http_config.go&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// HTTPClientConfig configures an HTTP client.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">HTTPClientConfig&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// The HTTP basic authentication credentials for the targets.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">BasicAuth&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">BasicAuth&lt;/span> &lt;span style="color:#4e9a06">`yaml:&amp;#34;basic_auth,omitempty&amp;#34; json:&amp;#34;basic_auth,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// The HTTP authorization credentials for the targets.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">Authorization&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">Authorization&lt;/span> &lt;span style="color:#4e9a06">`yaml:&amp;#34;authorization,omitempty&amp;#34; json:&amp;#34;authorization,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// The OAuth2 client credentials used to fetch a token for the targets.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">OAuth2&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">OAuth2&lt;/span> &lt;span style="color:#4e9a06">`yaml:&amp;#34;oauth2,omitempty&amp;#34; json:&amp;#34;oauth2,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// The bearer token for the targets. Deprecated in favour of
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Authorization.Credentials.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">BearerToken&lt;/span> &lt;span style="color:#000">Secret&lt;/span> &lt;span style="color:#4e9a06">`yaml:&amp;#34;bearer_token,omitempty&amp;#34; json:&amp;#34;bearer_token,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// The bearer token file for the targets. Deprecated in favour of
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Authorization.CredentialsFile.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">BearerTokenFile&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#4e9a06">`yaml:&amp;#34;bearer_token_file,omitempty&amp;#34; json:&amp;#34;bearer_token_file,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// HTTP proxy server to use to connect to the targets.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">ProxyURL&lt;/span> &lt;span style="color:#000">URL&lt;/span> &lt;span style="color:#4e9a06">`yaml:&amp;#34;proxy_url,omitempty&amp;#34; json:&amp;#34;proxy_url,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// TLSConfig to use to connect to the targets.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">TLSConfig&lt;/span> &lt;span style="color:#000">TLSConfig&lt;/span> &lt;span style="color:#4e9a06">`yaml:&amp;#34;tls_config,omitempty&amp;#34; json:&amp;#34;tls_config,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// FollowRedirects specifies whether the client should follow HTTP 3xx redirects.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// The omitempty flag is not set, because it would be hidden from the
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// marshalled configuration when set to false.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">FollowRedirects&lt;/span> &lt;span style="color:#204a87;font-weight:bold">bool&lt;/span> &lt;span style="color:#4e9a06">`yaml:&amp;#34;follow_redirects&amp;#34; json:&amp;#34;follow_redirects&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>scheme&lt;/strong>(STRING) # 指定用于抓取 Metrics 时使用的协议。&lt;code>默认值：http&lt;/code>&lt;/p>
&lt;p>&lt;strong>params&lt;/strong>(map[STRING]STRING) # 发起 http 请求时，URL 里的参数(以键值对的方式表示)。
常用于 snmp_exporter，比如 &lt;a href="http://10.10.100.12:9116/snmp?module=if_mib&amp;amp;target=10.10.100.254">http://10.10.100.12:9116/snmp?module=if_mib&amp;amp;target=10.10.100.254&lt;/a>，问号后面就是参数的 key 与 value)&lt;/p>
&lt;ul>
&lt;li>STRING: STRING&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>basic_auth&lt;/strong>(Object) # 配置 HTTP 的基础认证信息。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>username&lt;/strong>(STRING) #&lt;/li>
&lt;li>&lt;strong>password&lt;/strong>(SECRET) #&lt;/li>
&lt;li>&lt;strong>password_file&lt;/strong>(STRING) #&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>authorization&lt;/strong>(Object) #&lt;/p>
&lt;ul>
&lt;li>&lt;strong>type&lt;/strong>(STRING) # 发起抓取请求时的身份验证类型。&lt;code>默认值：Bearer&lt;/code>&lt;/li>
&lt;li>&lt;strong>credentials&lt;/strong>(SECRET) # 用于身份验证的信息。与 credentials_file 字段互斥。如果是 type 字段是 Bearer，那么这里的值就用 Token 即可。&lt;/li>
&lt;li>&lt;strong>credentials_file&lt;/strong>(FileName) # 从文件中读取用于身份验证的信息。与 credentials 字段互斥&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>oauth2&lt;/strong>(Object) # 配置 OAuth 2.0 的认证配置。与 basic_auth 和 authorization 两个字段互斥&lt;/p>
&lt;p>&lt;strong>proxy_url&lt;/strong>(STRING) # 指定代理的 URL&lt;/p>
&lt;p>&lt;strong>tls_config&lt;/strong>(&lt;a href="#tls_config">tls_config&lt;/a>) # 指定抓取 metrics 请求时的 TLS 设定&lt;/p>
&lt;h3 id="scrape-目标配置">Scrape 目标配置&lt;a class="td-heading-self-link" href="#scrape-%e7%9b%ae%e6%a0%87%e9%85%8d%e7%bd%ae" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>Prometheus 将会根据这里的字段配置，以发现需要 Scrape 指标的目标，有两种方式来发现目标：静态 与 动态。&lt;/p>
&lt;p>&lt;strong>static_configs&lt;/strong>(&lt;a href="#static_configs">static_configs&lt;/a>) # 静态配置。直接指定需要抓去 Metrics 的 Targets。&lt;/p>
&lt;ul>
&lt;li>具体配置详见下文&lt;a href="#%E9%9D%99%E6%80%81%E7%9B%AE%E6%A0%87%E5%8F%91%E7%8E%B0">静态目标发现&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>XX_sd_configs&lt;/strong>([]OBJECT) # 动态配置。动态需要抓去 Metrics 的 Targets。XXX_sd_configs 中的 sd 全称为 Service Discovery(服务发现)&lt;/p>
&lt;ul>
&lt;li>具体配置详见下文&lt;a href="#%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E5%8F%91%E7%8E%B0">动态目标发现&lt;/a>&lt;/li>
&lt;li>不同的服务发现，有不同的配置方式。比如 &lt;code>kubernetes_sd_configs&lt;/code>、&lt;code>file_sd_configs&lt;/code> 等等。&lt;/li>
&lt;li>注意：当 Prometheus 自动发现这些待抓取目标时，会附带一些原始标签，这些标签以 &lt;code>__meta_XX&lt;/code> 开头，不同的服务发现配置发现标签不同，具体说明详见&lt;a href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Target(%E7%9B%AE%E6%A0%87)%20%E4%B8%8E%20Relabeling(%E9%87%8D%E6%96%B0%E6%A0%87%E8%AE%B0).md">《Label 与 Relabel》文章中的 Discovered Labels 章节&lt;/a> 的说明&lt;/li>
&lt;/ul>
&lt;p>&lt;code>XX_sd_configs&lt;/code> 与 &lt;code>static_configs&lt;/code> 的区别：静态配置与动态配置就好比主机获取 IP 时是 DHCP 还是 STATIC。动态配置可以动态获取要抓取的 Targets、静态就是指定哪个 Target 就去哪个 Target 抓取 Metrics&lt;/p>
&lt;h3 id="relabel-配置">Relabel 配置&lt;a class="td-heading-self-link" href="#relabel-%e9%85%8d%e7%bd%ae" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>&lt;strong>relabel_configs&lt;/strong>(&lt;a href="#relabel_configs">relabel_configs&lt;/a>) # 在发现目标后，重新配置 targets 的标签。&lt;/p>
&lt;ul>
&lt;li>具体配置详见下文 &lt;a href="#%E9%87%8D%E8%AE%BE%E6%A0%87%E7%AD%BE">重设标签&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>metric_relabel_configs&lt;/strong>(&lt;a href="#relabel_configs">relabel_configs&lt;/a>) # 在抓取到指标后，重新配置 metrics 的标签&lt;/p>
&lt;ul>
&lt;li>与 relabel_configs 字段配置内容相同&lt;/li>
&lt;/ul>
&lt;h2 id="alerting">alerting&lt;a class="td-heading-self-link" href="#alerting" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>alert_relabel_configs&lt;/strong>(&lt;a href="#relabel_configs">relabel_configs&lt;/a>)&lt;/p>
&lt;p>适用于推送告警时的 Relabel 功能，配置与 &lt;a href="#PGKul">relabel_configs&lt;/a> 相同&lt;/p>
&lt;p>&lt;strong>alertmanager&lt;/strong>([]&lt;a href="#alertmanager">alertmanager&lt;/a>) # 该字段配置方式与 scrape_config 字段的配置非常相似，只不过不是配置抓取目标，而是配置推送告警的目标&lt;/p>
&lt;h3 id="alertmanager">alertmanager&lt;a class="td-heading-self-link" href="#alertmanager" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>&lt;a href="https://prometheus.io/docs/prometheus/latest/configuration/configuration/#alertmanager_config">https://prometheus.io/docs/prometheus/latest/configuration/configuration/#alertmanager_config&lt;/a>&lt;/p>
&lt;p>alertmanager 字段指定了 Prometheus Server 发送警报的目标 Alertmanager，还提供了参数来配置如何与这些 Alertmanager 通信。此外，relabel_configs 允许从已发现的实体中选择 Alertmanagers，并对使用的 API 路径进行高级修改，该路径通过 &lt;strong>alerts_path&lt;/strong> 标签暴露。&lt;/p>
&lt;p>&lt;strong>timeout(DURATION)&lt;/strong> # 推送警报时，每个目标 Alertmanager 超时，单位：秒。&lt;code>默认值: 10&lt;/code>。&lt;/p>
&lt;p>&lt;strong>api_version(STRING)&lt;/strong> # 推送告警时，应该使用哪个版本的 Alertmanager 路径。&lt;code>默认值：v2&lt;/code>。&lt;/p>
&lt;p>&lt;strong>path_prefix(PATH)&lt;/strong> # 推送告警时的，目标路径前缀。&lt;code>默认值：/&lt;/code>。&lt;/p>
&lt;ul>
&lt;li>注意：就算指定了其他路径，也会默认在末尾添加 &lt;code>/api/v2/alerts&lt;/code>&lt;/li>
&lt;/ul>
&lt;h4 id="alerts-推送目标的配置">Alerts 推送目标的配置&lt;a class="td-heading-self-link" href="#alerts-%e6%8e%a8%e9%80%81%e7%9b%ae%e6%a0%87%e7%9a%84%e9%85%8d%e7%bd%ae" aria-label="Heading self-link">&lt;/a>&lt;/h4>
&lt;p>Prometheus 根据这部分配置来推送需要&lt;/p>
&lt;p>&lt;strong>static_configs&lt;/strong>(&lt;a href="#static_configs">static_configs&lt;/a>) # 静态配置。指定推送告警时的目标。&lt;/p>
&lt;ul>
&lt;li>具体配置详见下文 &lt;a href="#%E9%9D%99%E6%80%81%E7%9B%AE%E6%A0%87%E5%8F%91%E7%8E%B0">静态目标发现&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>XXX_sd_configs&lt;/strong>([]OBJECT) # 动态配置。动态发现可供推送告警的 alertmanager-XXXX。不同的服务发现，有不同的配置方式。与 scrape_configs 字段中的 XXX_sd_configs 配置类似。&lt;/p>
&lt;ul>
&lt;li>具体配置详见下文 &lt;a href="#%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E5%8F%91%E7%8E%B0">动态目标发现&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="http-配置-1">HTTP 配置&lt;a class="td-heading-self-link" href="#http-%e9%85%8d%e7%bd%ae-1" aria-label="Heading self-link">&lt;/a>&lt;/h4>
&lt;p>&lt;strong>scheme(SCHEME)&lt;/strong> # 推送告警时，所使用的协议。&lt;code>默认值：HTTP&lt;/code>&lt;/p>
&lt;p>下面的部分是 HTTP 的认证，是用来配置将告警推送到目标时所需要的认证信息。比如目标是 HTTPS 时，就需要这些配置。发起的 POST 推送请求时，Prometheus 使用 username 和 passwrod 字段的值为这个 HTTP 请求设置 Authorization 请求头。说白了就是发起 HTTP 请求时带着用户名和密码。&lt;/p>
&lt;p>&lt;strong>basic_auth(Object)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>username(STRING)&lt;/strong> #&lt;/li>
&lt;li>&lt;strong>password(SECRET)&lt;/strong> # password 和 password_files 字段是互斥的&lt;/li>
&lt;li>&lt;strong>password_file(STRING)&lt;/strong> #&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>authorization(Object)&lt;/strong> #&lt;/p>
&lt;ul>
&lt;li>&lt;strong>type(STRING)&lt;/strong> # 推送告警时的身份验证类型。&lt;code>默认值：Bearer&lt;/code>&lt;/li>
&lt;li>&lt;strong>credentials(secret)&lt;/strong> # 用于身份验证的信息。与 credentials_file 字段互斥。如果是 type 字段是 Bearer，那么这里的值就用 Token 即可。&lt;/li>
&lt;li>&lt;strong>credentials_file(filename)&lt;/strong> # 从文件中读取用于身份验证的信息。与 credentials 字段互斥&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>oauth2(Object)&lt;/strong> # 配置 OAuth 2.0 的认证配置。与 basic_auth 和 authorization 两个字段互斥&lt;/p>
&lt;p>&lt;strong>tls_config(Object)&lt;/strong> # 指定推送告警时的 TLS 设定&lt;/p>
&lt;h4 id="relabel-配置-1">Relabel 配置&lt;a class="td-heading-self-link" href="#relabel-%e9%85%8d%e7%bd%ae-1" aria-label="Heading self-link">&lt;/a>&lt;/h4>
&lt;p>&lt;strong>relabel_configs&lt;/strong>(&lt;a href="#relabel_configs">relabel_configs&lt;/a>) # 在发现目标后，重新配置 targets 的标签&lt;/p>
&lt;p>详见下文 &lt;a href="#%E9%87%8D%E8%AE%BE%E6%A0%87%E7%AD%BE">重设标签&lt;/a>&lt;/p>
&lt;h2 id="remote_write">remote_write&lt;a class="td-heading-self-link" href="#remote_write" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>与远程写相关的配置，详见 &lt;a href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Storage/Storage.md">Prometheus 存储章节&lt;/a>&lt;/p>
&lt;p>&lt;strong>url(STRING)&lt;/strong> # 指定要发送时间序列数据到远程存储的端点的 URL&lt;/p>
&lt;h2 id="remote_read">remote_read&lt;a class="td-heading-self-link" href="#remote_read" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>与远程读相关的配置，详见 &lt;a href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Storage/Storage.md">Prometheus 存储章节&lt;/a>&lt;/p>
&lt;p>&lt;strong>url(STRING)&lt;/strong> # 指定发起查询请求的远程数据库的端点的 URL&lt;/p>
&lt;h1 id="配置文件中的通用配置字段">配置文件中的通用配置字段&lt;a class="td-heading-self-link" href="#%e9%85%8d%e7%bd%ae%e6%96%87%e4%bb%b6%e4%b8%ad%e7%9a%84%e9%80%9a%e7%94%a8%e9%85%8d%e7%bd%ae%e5%ad%97%e6%ae%b5" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="静态目标发现">静态目标发现&lt;a class="td-heading-self-link" href="#%e9%9d%99%e6%80%81%e7%9b%ae%e6%a0%87%e5%8f%91%e7%8e%b0" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>这些通用字段会被配置文件中的某些字段共同使用&lt;/p>
&lt;h3 id="static_configs">static_configs&lt;a class="td-heading-self-link" href="#static_configs" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>&lt;a href="https://prometheus.io/docs/prometheus/latest/configuration/configuration/#static_config">https://prometheus.io/docs/prometheus/latest/configuration/configuration/#static_config&lt;/a>&lt;/p>
&lt;p>静态配置。指定用户抓取 metrics 的 targets。静态配置与动态配置就好比主机获取 IP 时是 DHCP 还是 STATIC。动态配置可以动态获取要抓取的 targets、静态就是指定哪个 target 就去哪个 target 抓取 metrics&lt;/p>
&lt;p>&lt;strong>targets&lt;/strong>([]STRING) # 指定要抓取 metrics 的 targets 的 IP:PORT&lt;/p>
&lt;ul>
&lt;li>&lt;strong>HOST&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>labels&lt;/strong>(map[STRING]STRING) # 指定该 targets 的标签，可以随意添加任意多个&lt;/p>
&lt;ul>
&lt;li>&lt;strong>KEY: VAL&lt;/strong> # 比如该键值可以是 run: httpd，标签名是 run，run 的值是 httpd，key 与 val 使用字母，数字，_，-，.这几个字符且以字母或数字开头；val 可以为空。&lt;/li>
&lt;li>&amp;hellip;&amp;hellip;&lt;/li>
&lt;/ul>
&lt;h2 id="动态目标发现">动态目标发现&lt;a class="td-heading-self-link" href="#%e5%8a%a8%e6%80%81%e7%9b%ae%e6%a0%87%e5%8f%91%e7%8e%b0" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="file_sd_configs">file_sd_configs&lt;a class="td-heading-self-link" href="#file_sd_configs" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>&lt;a href="https://prometheus.io/docs/prometheus/latest/configuration/configuration/#file_sd_config">https://prometheus.io/docs/prometheus/latest/configuration/configuration/#file_sd_config&lt;/a>&lt;/p>
&lt;p>基于文件的服务发现提供了一种配置静态目标的更通用的方法，并用作插入自定义服务发现机制的接口。&lt;/p>
&lt;p>在 Prometheus 支持的众多服务发现的实现方式中，基于文件的服务发现是最通用的方式。这种方式不需要依赖于任何的平台或者第三方服务。对于 Prometheus 而言也不可能支持所有的平台或者环境。通过基于文件的服务发现方式下，Prometheus 会定时从指定文件中读取最新的 Target 信息，因此，你可以通过任意的方式将监控 Target 的信息写入即可。&lt;/p>
&lt;p>用户可以通过 JSON 或者 YAML 格式的文件，定义所有的监控目标。同时还可以通过为这些实例添加一些额外的标签信息，这样从这些实例中采集到的样本信息将包含这些标签信息，从而可以为后续按照环境进行监控数据的聚合。&lt;/p>
&lt;p>&lt;strong>files&lt;/strong>(map[STRING]STRING) # Prometheus 将要读取的文件路径，将会从该文件发现待采集的 Target。支持正则表达式&lt;/p>
&lt;p>&lt;strong>refresh_interval&lt;/strong>(DURATION) # 重新读取文件的间隔时间。&lt;code>默认值：5m&lt;/code>&lt;/p>
&lt;p>通过这种方式，Prometheus 会自动的周期性读取文件中的内容。当文件中定义的内容发生变化时，不需要对 Prometheus Server 进行任何的重启操作。&lt;/p>
&lt;h4 id="配置样例">配置样例&lt;a class="td-heading-self-link" href="#%e9%85%8d%e7%bd%ae%e6%a0%b7%e4%be%8b" aria-label="Heading self-link">&lt;/a>&lt;/h4>
&lt;p>假设现在有一个名为 file_sd.yaml 文件，中分别定义了 2 个采集任务，以及每个任务对应的 Target 列表，内容如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#204a87;font-weight:bold">targets&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#4e9a06">&amp;#34;172.19.42.200&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">labels&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">network&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;switch&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>- &lt;span style="color:#204a87;font-weight:bold">targets&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#4e9a06">&amp;#34;172.19.42.243&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">labels&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">server&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;host-1&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建 Prometheus 配置文件/etc/prometheus/prometheus-file-sd.yml，并添加以下内容：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">global&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">scrape_interval&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">15s&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">scrape_timeout&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">10s&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">evaluation_interval&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">15s&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">scrape_configs&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">job_name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;file_ds&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">file_sd_configs&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">refresh_interval&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">5m&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># Prometheus 默认每 5m 重新读取一次文件内容，当需要修改时，可以通过refresh_interval进行设置&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">files&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#4e9a06">&amp;#34;file_sd.yaml&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里定义了一个基于 file_sd_configs 的监控采集任务，其中模式的任务名称为 file_ds。在 JSON 文件中可以使用 job 标签覆盖默认的 Job 名称。&lt;/p>
&lt;p>在 Prometheus UI 的 Targets 下就可以看到当前从 targets.json 文件中动态获取到的 Target 实例信息以及监控任务的采集状态，同时在 Labels 列下会包含用户添加的自定义标签&lt;/p>
&lt;p>这种通用的方式可以衍生了很多不同的玩法，比如与自动化配置管理工具(Ansible)结合、与 Cron Job 结合等等。 对于一些 Prometheus 还不支持的云环境，比如国内的阿里云、腾讯云等也可以使用这种方式通过一些自定义程序与平台进行交互自动生成监控 Target 文件，从而实现对这些云环境中基础设施的自动化监控支持。&lt;/p>
&lt;h3 id="kubernetes_sd_configs">kubernetes_sd_configs&lt;a class="td-heading-self-link" href="#kubernetes_sd_configs" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>&lt;a href="https://prometheus.io/docs/prometheus/latest/configuration/configuration/#kubernetes_sd_config">https://prometheus.io/docs/prometheus/latest/configuration/configuration/#kubernetes_sd_config&lt;/a>&lt;/p>
&lt;p>kubernetes_sd_configs 字段的配置可以让 Prometheus 从 Kubernetes 的 API Server 中自动发现需要抓取目标，并始终与集群状态保持同步。可以抓取的目标有 node、service、pod、endpoints、ingress。&lt;/p>
&lt;blockquote>
&lt;p>注意：如果 Prometheus Server 部署在 Kubernetes 集群外部，通过 k8s 的 API Server 自动发现的 pod ip 是集群内部 IP，一般情况下不互联的。因为 pod 的 ip 一般都是集群内部 IP。所以如果在发现目标后想要采集，需要在 Prometheus Server 所在服务器添加到 Kubernetes 的 Pod IP 的路由条目。&lt;/p>
&lt;/blockquote>
&lt;p>Note：使用该配置进行服务发现，请求都会经过 API Server，集群规模越大，API Server 压力也会跟随增高。&lt;/p>
&lt;h4 id="api-server-配置">API Server 配置&lt;a class="td-heading-self-link" href="#api-server-%e9%85%8d%e7%bd%ae" aria-label="Heading self-link">&lt;/a>&lt;/h4>
&lt;p>&lt;strong>api_server&lt;/strong>(STRING) # 指定 k8s 集群中 API Server 的地址。&lt;/p>
&lt;ul>
&lt;li>如果该字段为空，则默认 Prometheus 在 k8s 集群内部运行，将自动发现 apiserver，并使用 Pod 中 /var/run/secrets/kubernetes.io/serviceaccount/ 目录下的的 CA 证书 和 Token。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>basic_auth&lt;/strong>(Object)# 如果 apiserver 使用基本认证启动，则使用 basic_auth 字段。&lt;code>authorization&lt;/code> 字段互斥。password 和 password_file 是互斥的。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>username&lt;/strong>(STRING) #&lt;/li>
&lt;li>&lt;strong>password&lt;/strong>(SECRET) #&lt;/li>
&lt;li>&lt;strong>password_file&lt;/strong>(STRING) #&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>authorization&lt;/strong>(Object) # 如果 apiserver 使用证书启动，则使用 authorization 字段。与 &lt;code>basic_auth&lt;/code> 字段互斥。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>type&lt;/strong>(STRING) # 发起抓取请求时的身份验证类型。&lt;code>默认值：Bearer&lt;/code>&lt;/li>
&lt;li>&lt;strong>credentials&lt;/strong>(SECRET) # 用于身份验证的信息。与 credentials_file 字段互斥。如果是 type 字段是 Bearer，那么这里的值就用 Token 即可。该字段就是老版本的 bearer_token 字段&lt;/li>
&lt;li>&lt;strong>credentials_file&lt;/strong>(filename) # 从文件中读取用于身份验证的信息。与 credentials 字段互斥.该字段就是老版本的 bearer_token_file 字段&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>oauth2&lt;/strong>(Object) # 配置 OAuth 2.0 的认证配置。与 basic_auth 和 authorization 两个字段互斥&lt;/p>
&lt;p>&lt;strong>tls_config&lt;/strong>(Object) # 指定抓取 metrics 请求时的 TLS 设定&lt;/p>
&lt;p>&lt;strong>proxy_url&lt;/strong>(STRING) # Optional proxy URL&lt;/p>
&lt;h4 id="目标发现的规则配置">目标发现的规则配置&lt;a class="td-heading-self-link" href="#%e7%9b%ae%e6%a0%87%e5%8f%91%e7%8e%b0%e7%9a%84%e8%a7%84%e5%88%99%e9%85%8d%e7%bd%ae" aria-label="Heading self-link">&lt;/a>&lt;/h4>
&lt;p>&lt;strong>role&lt;/strong>(STRING) # 根据 STRING 动态发现地 Target。可用的 STRING 为 endpoints, service, pod, node,ingress。&lt;/p>
&lt;ul>
&lt;li>比如，Prometheus 可以自动发现 ep、svc 等等对象作为 scrape 地 target&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>namespaces&lt;/strong>(OBJECT) # 指定动态发现哪个 namesapce 下的 Target ，如果省略，则 Target 将从所有 namespaces 中动态发现&lt;/p>
&lt;ul>
&lt;li>&lt;strong>names&lt;/strong>([]STRING)&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>selectors&lt;/strong>([]Object) # 可以根据 selectors 中指定地 label 或者 field 来过滤动态发现的 Target 。如果省略，则不进行任何过滤。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>role&lt;/strong>(ROLE) #&lt;/li>
&lt;li>&lt;strong>label&lt;/strong>(STRING) # STRING 使用 key=value 的格式。&lt;/li>
&lt;li>&lt;strong>field&lt;/strong>(STRING) #&lt;/li>
&lt;/ul>
&lt;h4 id="配置样例-1">配置样例&lt;a class="td-heading-self-link" href="#%e9%85%8d%e7%bd%ae%e6%a0%b7%e4%be%8b-1" aria-label="Heading self-link">&lt;/a>&lt;/h4>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/prometheus/prometheus/blob/main/documentation/examples/prometheus-kubernetes.yml">官方推荐的样例&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>下面的例子是这样的：动态发现 kube-system 名称空间下的所有 pod 作为 target，并且进行过滤，只选择其中标签为 k8s-app=kube-dns 的 pod 作为 target&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">scrape_configs&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">job_name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;kubernetes-node&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">honor_timestamps&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">metrics_path&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">/metrics&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># 注意 scheme 字段，自动发现机制只是会发现 IP:PORT，并不会添加协议，有的 pod 是只提供 https 的。&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># 比如，如果是发现 kubelet、kube-apiserver 等 pod ，则这里应该改为 https&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">scheme&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">http&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">bearer_token_file&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">/etc/prometheus/config_out/serviceaccount/token&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">tls_config&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">insecure_skip_verify&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">ca_file&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">/etc/prometheus/config_out/serviceaccount/ca.crt&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">kubernetes_sd_configs&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">api_server&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;https://172.19.42.234:6443&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># 这里写了两遍认证信息，这是因为这里的认证则是针对 apiserver 的认证。而 scrape_configs 字段下的认证是针对已经发现的目标进行认证。&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># 需要先认证 apiserver 以发现待抓取的目标，然后再使用 scrape_configs 字段下的认证来采集目标的指标。&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">bearer_token_file&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">/etc/prometheus/config_out/serviceaccount/token&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">tls_config&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">insecure_skip_verify&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">ca_file&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">/etc/prometheus/config_out/serviceaccount/ca.crt&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">role&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">pod&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">namespaces&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">names&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">kube-system&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">selectors&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">role&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">pod&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">label&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">k8s-app=kube-dns&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面的配置将会自动发现 k8s 集群中的所有 coredns pod&lt;/p>
&lt;blockquote>
&lt;p>注意：这里可以发现，我们是可以访问集群内部的 10.244.0.243，这是因为我加了静态路由配置(&lt;code>ip route add 10.244.0.0/16 dev ens3 via 172.19.42.231&lt;/code>)，否则，集群外部的 Prometheus 是无法抓取访问不到的目标的。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/prometheus/1616049623195-79b06041-01c2-4b81-bcb5-d4efd06de281.png" alt="">&lt;/p>
&lt;p>可以看到，coredns 的两个端口都发现了，由于我们不需要 53 端口，所以还需要进一步过滤，就是把 53 端口过滤调。可以使用 Relabeling 功能，在配置后面添加如下内容：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">relabel_configs&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">source_labels&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">__meta_kubernetes_pod_container_port_number]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">regex&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">53&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">action&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">drop&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>此时，我们删除了 &lt;code>__meta_kubernetes_pod_container_port_number&lt;/code> 这个标签的值为 53 的所有指标。这样我们就可以看到，只剩下 9153 端口的指标了&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/prometheus/1616049623219-a5447656-6c61-40f1-acfe-df6218904b3a.png" alt="">&lt;/p>
&lt;h2 id="重设标签">重设标签&lt;a class="td-heading-self-link" href="#%e9%87%8d%e8%ae%be%e6%a0%87%e7%ad%be" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="relabel_configs">relabel_configs&lt;a class="td-heading-self-link" href="#relabel_configs" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config">官方文档，配置-配置-relabel_config&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Target(%E7%9B%AE%E6%A0%87)%20%E4%B8%8E%20Relabeling(%E9%87%8D%E6%96%B0%E6%A0%87%E8%AE%B0).md">Target 与 Relabeling&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>relabel 重设标签功能，用于将抓取到的样本中的原始 label 进行重新标记以生成新的 label。&lt;/p>
&lt;p>&lt;strong>source_labels&lt;/strong>([]STRING) # 从现有的标签中选择将要获取值的标签作为 source_labels。source_labels 可以有多个。&lt;/p>
&lt;p>&lt;strong>separator&lt;/strong>(STRING) # 指定 source_labels 中所有值之间的分隔符。&lt;code>默认值: ;&lt;/code>。&lt;/p>
&lt;p>&lt;strong>target_label&lt;/strong>(STRING) # 通过 regex 字段匹配到的值写入的指定的 target_label 中&lt;/p>
&lt;p>&lt;strong>regex&lt;/strong>(REGEX) # 从 source_label 获取的值进行正则匹配，匹配到的值写入到 target_label 中。&lt;code>默认正则表达式为(.*)&lt;/code>。i.e.匹配所有值&lt;/p>
&lt;p>&lt;strong>modulus&lt;/strong>(UINT64) # 去 source_labels 值的哈希值的模数&lt;/p>
&lt;p>&lt;strong>replacement&lt;/strong>(STRING) # 替换。指定要写入 target_label 的值，STRING 中可以引用 regex 字段的值，使用正则表达式方式引用。&lt;code>默认值：$1&lt;/code>。与 action 字段的 replace 值配合使用。&lt;/p>
&lt;p>&lt;strong>action&lt;/strong>(Relabel_Action) # 对匹配到的标签要执行的动作。&lt;code>默认值: replace&lt;/code>。&lt;/p>
&lt;h2 id="其他">其他&lt;a class="td-heading-self-link" href="#%e5%85%b6%e4%bb%96" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="tls_config">tls_config&lt;a class="td-heading-self-link" href="#tls_config" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>&lt;a href="https://prometheus.io/docs/prometheus/latest/configuration/configuration/#tls_config">https://prometheus.io/docs/prometheus/latest/configuration/configuration/#tls_config&lt;/a>&lt;/p>
&lt;p>tls_config 字段用来配置 TLS 连接信息。下面描述客户端就是 Prometheus Server，服务端就是要抓取 Metrics 的目标。&lt;/p>
&lt;p>&lt;strong>ca_file&lt;/strong>(FileName) # CA 证书，用于验证服务端证书&lt;/p>
&lt;p>&lt;strong>cert_file&lt;/strong>(FileName) # 证书文件，用于客户端对服务器的证书认证。&lt;/p>
&lt;p>&lt;strong>key_file&lt;/strong>(FileName) # 密钥文件，用于客户端对服务器的证书认证。&lt;/p>
&lt;p>&lt;strong>server_name&lt;/strong>(STRING) # ServerName 扩展名，用于指示服务器的名称。ServerName 概念参考: &lt;a href="https://tools.ietf.org/html/rfc4366#section-3.1">https://tools.ietf.org/html/rfc4366#section-3.1&lt;/a>&lt;/p>
&lt;p>&lt;strong>insecure_skip_verify&lt;/strong>(BOOLEAN) # 禁用服务端对证书的验证。类似于 curl 的 -k 选项&lt;/p></description></item><item><title>Docs: Rules</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Configuration/Rules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Configuration/Rules/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Prometheus 规则分为两种：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Recording Rule(记录规则)&lt;/strong> #&lt;/li>
&lt;li>&lt;strong>Alerting Rule(告警规则)&lt;/strong> #
&lt;ul>
&lt;li>！！！注意编写告警规则的逻辑，由于 Prometheus 会定期评估告警，所以会定期读取数据，尽相避免读取大范围的数据，以免造成性能问题&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Prometheus 规则配置文件需要在 &lt;a href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Configuration/Promethesu%20Server.md">Prometheus Server 配置&lt;/a> 文件中的 rule_files 字段中指定，让 Prometheus 加载指定的文件并读取其配置(这个过程称为 &lt;strong>Evaluation(评估)&lt;/strong>)。&lt;/p>
&lt;p>一个规则封装了一个向量表达式，该向量表达式在指定的时间间隔内进行评估并采取行动（目前要么记录，要么用于报警）。&lt;/p>
&lt;p>可以通过发送 SIGHUP 到 Prometheus 进程在运行时重新加载规则文件。仅当所有规则文件格式正确时，才会应用更改。&lt;/p>
&lt;blockquote>
&lt;p>[!Tip] 规则语法检查
可以使用 &lt;a href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Prometheus%20MGMT/promtool.md">promtool&lt;/a> 程序在不启动 Prometheus Server 的情况下检查文件中的语法是否正确。.e.g. &lt;code>promtool check rules /path/to/example.rules.yml&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;h1 id="recording-rule记录规则">Recording Rule(记录规则)&lt;a class="td-heading-self-link" href="#recording-rule%e8%ae%b0%e5%bd%95%e8%a7%84%e5%88%99" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://prometheus.io/docs/prometheus/latest/configuration/recording_rules/">官方文档，配置 - 记录规则&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>在我们使用 Prometheus 的过程中，随着时间的推移，存储在 Prometheus 中的监控指标数据越来越多，查询频率也在不断的增加，当我们用 Grafana 添加更多的 Dashboard 的时候，可能会慢慢的体验到 Grafana 已经无法按时渲染图表，并且偶尔还会出现超时的情况，特别是当我们在长时间汇总大量的指标数据的时候，Prometheus 查询超时的情况可能更多了，这时就需要一种能够类似于后排批处理的机制在后台完成这些复杂运算的计算，对于使用者而言只需要查询这些运算结果即可。&lt;/p>
&lt;p>当我们有频繁使用的复杂查询时，如果直接将语句写在 Grafana 的 query 中，Grafana 每次刷新都对 Promethus 提交实时查询，会增加 Prometheus 的性能消耗并且降低了响应速度。 这时候我们就可以用到 Recoding rules 了。&lt;/p>
&lt;p>记录规则允许我们预先计算经常使用或计算成本高的表达式，并将其结果保存为一组新的时间序列。因此，查询预先计算的结果通常比每次需要时执行原始表达式快得多。&lt;/p>
&lt;h2 id="配置示例">配置示例&lt;a class="td-heading-self-link" href="#%e9%85%8d%e7%bd%ae%e7%a4%ba%e4%be%8b" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>这是一个简单的记录规则。使用一个表达式 &lt;code>sum by (job) (http_inprogress_requests)&lt;/code> 生成了一条新的名为 &lt;code>job:http_inprogress_requests:sum&lt;/code> 的时间序列&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">groups&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">example&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">rules&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">record&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">job:http_inprogress_requests:sum&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">expr&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">sum by (job) (http_inprogress_requests)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="alerting-rule告警规则">Alerting Rule(告警规则)&lt;a class="td-heading-self-link" href="#alerting-rule%e5%91%8a%e8%ad%a6%e8%a7%84%e5%88%99" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/">官方文档，配置 - 告警规则&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Alerting Rules(告警规则)&lt;/strong> 可以让我们基于 PromQL 的表达式，定义告警的触发条件，当满足触发条件时，Prometheus Server 会将触发的告警通知发送到指定的服务。这个服务默认是 Prometheus 官方提供的 &lt;a href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Alertmanager/Alertmanager.md">Alertmanager&lt;/a>。详见 &lt;a href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Alerting.md">Alerting&lt;/a>&lt;/p>
&lt;p>在 Prometheus 中一条告警规则主要由以下几部分组成：&lt;/p>
&lt;ul>
&lt;li>告警名称：用户需要为告警规则命名，当然对于命名而言，需要能够直接表达出该告警的主要内容&lt;/li>
&lt;li>告警规则：告警规则实际上主要由 PromQL 进行定义，其实际意义是当表达式（PromQL）查询结果持续多长时间（During）后出发告警&lt;/li>
&lt;/ul>
&lt;p>在 Prometheus 中，还可以通过 Group(告警组) 对一组相关的告警进行统一定义。当然，这些定义都是通过 YAML 文件来统一管理的。&lt;/p>
&lt;h2 id="配置示例-1">配置示例&lt;a class="td-heading-self-link" href="#%e9%85%8d%e7%bd%ae%e7%a4%ba%e4%be%8b-1" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">groups&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">test&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">rules&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">alert&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">TestAlert&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">expr&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">prometheus_http_requests_total &amp;gt; 20&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">for&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">1m&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">labels&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">alert_test&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">test&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">annotations&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">message&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;{{$labels.instance}}: 测试告警(current value is: {{ $value }}&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在告警规则文件中，我们可以将一组相关的规则设置定义在一个 group 下。在每一个 group 中我们可以定义多个告警规则。一条告警规则主要由以下几部分组成：&lt;/p>
&lt;ul>
&lt;li>alert # 告警规则的名称。&lt;/li>
&lt;li>expr # 基于 PromQL 表达式告警触发条件，用于计算是否有时间序列满足该条件。
&lt;ul>
&lt;li>该样例的意思是某个值减去某几个值的和再除以某个值如果大于 20 就产生告警&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>for # evaluation(评估) 等待时间，可选参数。用于表示只有当触发条件持续一段时间后才发送告警。在等待期间新产生告警的状态为 pending。&lt;/li>
&lt;li>labels # 自定义标签，允许用户指定要附加到告警信息上的一组附加标签。&lt;/li>
&lt;li>annotations # 用于指定一组注释，用于描述告警的详细信息，annotations 的内容在告警产生时会一同作为参数发送到 Alertmanager。这里面的 key 与 value 都可以自己定义。这一部分的内容是在讲告警发到接收者的时候，接收者能看到的信息。常用语描述告警信息以便管理员定位问题&lt;/li>
&lt;/ul>
&lt;h2 id="告警规则配置进阶">告警规则配置进阶&lt;a class="td-heading-self-link" href="#%e5%91%8a%e8%ad%a6%e8%a7%84%e5%88%99%e9%85%8d%e7%bd%ae%e8%bf%9b%e9%98%b6" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/prometheus/1616069617782-d847748c-9878-4e48-abbb-413799232424.jpeg" alt="">&lt;/p>
&lt;p>如图所示，在一个告警产生时，会有其自身的 Labels，这些 Labels 信息可以填写进告警规则配置文件中，引用这些 Labels，就相当于把这些 Labels 中的值当做文件内容进行输出。(类似于引用变量)
引用语法：&lt;/p>
&lt;ol>
&lt;li>{{ $labels.LabelName }} # 这就是引用该 label 的值，其中 LabelName 就是上图红框中 Labels 的键&lt;/li>
&lt;li>{{ $value }} # 引用 expr 中 PromQL 表达式中获取到的值&lt;/li>
&lt;/ol>
&lt;h1 id="配置文件详解">配置文件详解&lt;a class="td-heading-self-link" href="#%e9%85%8d%e7%bd%ae%e6%96%87%e4%bb%b6%e8%af%a6%e8%a7%a3" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;strong>顶层字段&lt;/strong>&lt;/p>
&lt;p>&lt;strong>groups&lt;/strong>([]OBJECT)&lt;/p>
&lt;ul>
&lt;li>&lt;strong>name&lt;/strong>(STRING) # group 的名称，在一个文件中必须是唯一的&lt;/li>
&lt;li>&lt;strong>interval&lt;/strong>(DURATION) # 对这个组中的规则进行 evaluated(评估) 的频率。&lt;code>默认值: PrometheusServer 配置文件中的 global.evaluation_interval 的值&lt;/code>&lt;/li>
&lt;li>&lt;strong>limit&lt;/strong>(INT) # 限制警报规则和记录规则可以生成的警报系列的数量。 &lt;code>默认值: 0&lt;/code>，0 表示没有限制。&lt;/li>
&lt;li>&lt;strong>rules&lt;/strong>([]OBJECT) # 定义 Prometheus Rule 详情。rules 字段下使用不同的子字段会对应不同的规则。
&lt;ul>
&lt;li>包含 record 字段时，则该规则为 &lt;a href="#Recording%20Rule">Recording Rule&lt;/a>&lt;/li>
&lt;li>包含 alert 字段时，则该规则为 &lt;a href="#Alerting%20Rule">Alerting Rule&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Recording Rule 与 Alerting Rule 存在于规则组中。组中的规则以规定的时间间隔顺序运行，并具有相同的规则评估时间。Recording Rule 的名称必须是有效的 Metrics 名称。Alerting Rule 名称则比较宽泛，可以随意定义，一般来说，满足有效的标签值即可。&lt;/p>
&lt;blockquote>
&lt;p>[!Notes]
groups 在 recording rule 中并没有实际意义，只是与 alerting rule 同在一个配置文件中，所以两种规则格式要相同罢了，不管在哪个组下定义的记录规则，都可以在任何地方直接使用。&lt;/p>
&lt;p>生成新的时间序列后，Prometheus 会以新的时间序列名称保存数据，该数据与原始 expr 中的表达式所得出的值虽然一样，但是存储的指标是不一样的。&lt;/p>
&lt;/blockquote>
&lt;p>所谓 Evaluated(评估) 规则，就是指 PrometheusServer 会检查规则的状态，如果告警规则的状态是 FIRING，则发送告警。&lt;/p>
&lt;p>interval 字段的值 加上 PrometheusServer 的命令行标志 &amp;ndash;rules.alert.resend-delay 的值(默认 1m)，才是&lt;font color="#ff0000">&lt;strong>真实的评估周期&lt;/strong>&lt;/font>。这个说明在官方文档中没有，请参考 &lt;a href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Prometheus%20Development/Rule/Rule.md#%E8%AF%84%E4%BC%B0%E5%91%8A%E8%AD%A6%E8%A7%84%E5%88%99">Prometheus 规则处理逻辑中的 - 评估告警规则&lt;/a>&lt;/p>
&lt;h2 id="recording-rule">Recording Rule&lt;a class="td-heading-self-link" href="#recording-rule" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>record&lt;/strong>(STRING) # 新的时间序列的名字。必须是有效的 Metrics 名称。&lt;/p>
&lt;p>&lt;strong>expr&lt;/strong>(STRING) # PromQL 表达式，用于生成新时间序列的。每个评估周期都会在当前时间进行评估，并将结果记录为一组新的时间序列，该时间序列作为 Metrics 的名称由 record 字段定义。&lt;/p>
&lt;p>&lt;strong>labels&lt;/strong>(map[STRING]STRING) # 为新的时间序列添加标签集&lt;/p>
&lt;h2 id="alerting-rule">Alerting Rule&lt;a class="td-heading-self-link" href="#alerting-rule" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>alert&lt;/strong>(STRING) # 告警名称。&lt;/p>
&lt;p>&lt;strong>expr&lt;/strong>(STRING) # PromQL 表达式，用于产生告警的。 每个评估周期都会在当前时间进行评估，所有结果时间序列都会变为待处理/触发警报。&lt;/p>
&lt;p>&lt;strong>for&lt;/strong>(DURATION) # 发送告警的等待时间。&lt;code>默认值: 0s&lt;/code>，即没有等待期。告警产生后，默认是立刻发送的。配置该字段，可以指定在产生告警后的多长时间再发送告警。&lt;/p>
&lt;ul>
&lt;li>在等待期的告警状态为 Pending，超过等待期后，变为 Firing。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>labels&lt;/strong>(map[STRING]STRING) # 为该告警添加或覆盖标签&lt;/p>
&lt;p>&lt;strong>annotations&lt;/strong>(map[STRING]STRING) # 为该告警添加注释。&lt;/p>
&lt;h1 id="最佳实践">最佳实践&lt;a class="td-heading-self-link" href="#%e6%9c%80%e4%bd%b3%e5%ae%9e%e8%b7%b5" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://prometheus.io/docs/practices/rules/#recording-rules">官方文档，最佳实践 - 记录规则&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="recording-rule-命名">Recording Rule 命名&lt;a class="td-heading-self-link" href="#recording-rule-%e5%91%bd%e5%90%8d" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Recording 规则名称一般采用 &lt;code>level:metric:operations&lt;/code> 形式&lt;/p>
&lt;ul>
&lt;li>&lt;strong>level&lt;/strong> # 表示聚合级别和标签，比如 by (instance)，则 level 是 instance&lt;/li>
&lt;li>&lt;strong>metric&lt;/strong> # 指标名称，除了在使用 rate() 或 irate() 函数时，需要将指标名称的 &lt;code>_total&lt;/code> 之外，整体名称应该保持不变&lt;/li>
&lt;li>&lt;strong>operations&lt;/strong> # 应用于指标的操作列表&lt;/li>
&lt;/ul>
&lt;p>比如&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-promql" data-lang="promql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">rate&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">node_disk_io_time_seconds_total&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f57900">job&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;#34;&lt;/span>&lt;span style="color:#4e9a06">node-exporter&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;#34;,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#f57900">device&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=~&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;#34;&lt;/span>&lt;span style="color:#4e9a06">(/dev/)?(mmcblk.p.+|nvme.+|rbd.+|sd.+|vd.+|xvd.+|dm-.+|md.+|dasd.+)&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;#34;}[&lt;/span>&lt;span style="color:#4e9a06">5m&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>生成的时间序列数据可以命名为： &lt;code>record: instance_device:node_disk_io_time_seconds:rate5m&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">groups&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">node-exporter.rules&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">rules&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">record&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">instance:node_num_cpu:sum&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">expr&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">|&lt;/span>&lt;span style="color:#8f5902;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"> count without (cpu) (
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"> count without (mode) (
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"> node_cpu_seconds_total{job=&amp;#34;node-exporter&amp;#34;}
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"> )&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如图所示 expr 字段写的表达式与 record 指定的表达式查询结果相同&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/prometheus/1616069617793-9bf3f46e-a10f-4b18-9555-369ba0d8d17f.jpeg" alt="">&lt;/p>
&lt;p>等同于&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/prometheus/1616069617804-82e7c2f5-8bd7-4932-a5aa-9b702e780e59.jpeg" alt="">&lt;/p></description></item><item><title>Docs: Template</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Configuration/Template/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Configuration/Template/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://prometheus.io/docs/prometheus/latest/configuration/template_examples/">官方文档，配置 - 模板示例&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://prometheus.io/docs/prometheus/latest/configuration/template_reference/">官方文档，配置 - 模板参考&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Prometheus 可以在部分配置文件中（&lt;a href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Configuration/Rules.md">Rules&lt;/a>、etc.）使用 &lt;strong>Template(模板)&lt;/strong> 的能力，Prometheus 的模板基于 &lt;a href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go%20%E8%A7%84%E8%8C%83%E4%B8%8E%E6%A0%87%E5%87%86%E5%BA%93/Template.md">Go 语言的 Template&lt;/a> 能力。&lt;/p>
&lt;h1 id="template-function">Template Function&lt;a class="td-heading-self-link" href="#template-function" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>Prometheus 模板增加了一些函数以便更轻松得处理 PromQL 的查询结果（e.g. 将 Bytes 的数直接转为人类可读的带单位的结果），所有函数列表详见&lt;a href="https://prometheus.io/docs/prometheus/latest/configuration/template_reference/#functions">官方文档&lt;/a>&lt;/p></description></item></channel></rss>