<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Thanos on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/Thanos/</link><description>Recent content in Thanos on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/Thanos/index.xml" rel="self" type="application/rss+xml"/><item><title>Thanos</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/Thanos/Thanos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/Thanos/Thanos/</guid><description>概述 参考：
GitHub 项目，thanos-io/thanos 官网 K8S 训练营，Kubernetes 监控-Thanos 公众号-k8s 技术圈，使用 Thanos 集中管理多 Prometheus 实例数据 公众号-k8s 技术圈，Thanos Ruler 组件的使用 首先需要明确一点，Thanos 是一组程序的统称。这一组程序可以组成具有无限存储容量的高可用 Metrics 系统。可以将其无缝添加到现有 Prometheus 之上。
单独使用 Prometheus 可能产生的问题
长、短期数据未分层，一套 Prometheus 在被查询长周期指标时，Prometheus 所在服务器的内存、CPU 使用率飙升，甚至可能导致监控、告警服务不可用，原因在于两点： 查询长周期数据时，Prometheus 会将大量数据载入内存 Prometheus 载入的不是降采样数据 查询的时间范围越大，需要的内存就越多。在另一个生产的方案中，采用 VictoriaMetrics 单机版作为远端存储，服务器内存高达 128G。同时，这种方式还存在丢数据的情况。 Prometheus 联邦的方式，只是结局了将多个 Prometheus 聚合起来的情况，并没有提供抽样的能力，不能加快长周期指标的查询，不适用于当前远端存储的场景。 综上所属
Thanos Compact 组件能对指标数据进行降采样，以提高大时间范围查询的效率 Thanos 的 Sidecar 和 Receiver 组件都可以将指标数据转存到对象存储中 Thanos Querier 组件可以 此时，通过 Thanos 将数据分了层 短期数据保存在 Receiver 或 Prometheus 中，用于告警系统的高频查询以及 Grafana 的展示 长期数据保存在对象存储中，以供后续分析使用 Thanos 架构概述 Thanos 遵循 KISS 和 Unix 哲学，由一组组件组成，每个组件都可以实现特定的功能：</description></item><item><title>Thanos 部署</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/Thanos/Thanos-%E9%83%A8%E7%BD%B2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/Thanos/Thanos-%E9%83%A8%E7%BD%B2/</guid><description>概述 参考：
官方文档，快速教程 通过 docker 启动 Thanos Sidecar Query Store 在 Kubernetes 集群中部署 Thanos 参考：
GitHub，thanos-io/kube-thanos-examples(Manifests) 通过 kubectl 插件 kube-thanos 部署 Store 与 Query 的 Manifests Sidecar 或 Receiver 由于 Sidecar 的工作性质，所以，Sidecar 组件最好作为 Prometheus 的 sidecar 容器，部署在同一个 Pod 中。
Query Store Compact 通过 prometheus-operator 部署 Thanos 参考：
官方文档，prometheus operator-thanos GitHub 文档，prometheus-operator-文档-thanos</description></item><item><title>Thanos 管理</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/Thanos/Thanos-%E7%AE%A1%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/Thanos/Thanos-%E7%AE%A1%E7%90%86/</guid><description>Thanos Store 可能产生的问题 下面报警触发的原因未知，但是在 node-exporter 的面板中，打开系统明细，并查询 90 天数据，且 receive 只保留 30 天数据时，大概率会发生这个问题。
{ &amp;#34;status&amp;#34;: &amp;#34;success&amp;#34;, &amp;#34;data&amp;#34;: { &amp;#34;resultType&amp;#34;: &amp;#34;matrix&amp;#34;, &amp;#34;result&amp;#34;: [] }, &amp;#34;warnings&amp;#34;: [ &amp;#34;No StoreAPIs matched for this query&amp;#34;, &amp;#34;No StoreAPIs matched for this query&amp;#34; ] }</description></item><item><title>Thanos 配置详解</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/Thanos/Thanos-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/Thanos/Thanos-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</guid><description>概述 参考：
Sidecar 配置 命令行标志 &amp;ndash;grpc-addresss=&amp;lt;STRING&amp;gt; # 暴露的 StoreAPI 端点。默认值：0.0.0.0:10901 &amp;ndash;http-address=&amp;lt;STRING&amp;gt; # 监听的 HTTP 端点。/metrics 端点暴露指标。默认值：0.0.0.0:10902 &amp;ndash;objstore.config-file=&amp;lt;FILE&amp;gt;# 对象存储的配置信息。Sidecar 根据该配置，将 Prometheus 自身保存的数据转存到配置的对象存储中。 &amp;ndash;prometheus.url=&amp;lt;STRING&amp;gt;# 与 Prometheus Server 交互的地址。默认值：http://localhost:9090 &amp;ndash;tsdb.path=&amp;lt;PATH&amp;gt; # Prometheus 存储时间序列数据的路径。默认值：./data &amp;ndash;shipper.upload-compacted # 开启已压缩数据转存功能。该标志对迁移数据很有用。
配置文件 Receiver 配置 命令行标志 &amp;ndash;grpc-address=&amp;lt;STRING&amp;gt; # 暴露的 StoreAPI 端点。默认值：0.0.0.0:10901 &amp;ndash;http-address=&amp;lt;STRING&amp;gt; # 监听的 HTTP 端点。/metrics 端点暴露指标。默认值：0.0.0.0:10902 &amp;ndash;label=&amp;lt;KEY=&amp;ldquo;VALUE&amp;rdquo;&amp;gt; # 为所有序列创建的标签，多个标签指定多个 &amp;ndash;label 标志。与 prometheus 配置 external_labels 字段效果一样 &amp;ndash;objstore.config-file=&amp;lt;FILE&amp;gt;# 对象存储的配置信息。Receiver 根据该配置，将时序数据转存到对象存储中。 &amp;ndash;receive.hashrings-file=/etc/thanos/receiver-hashring.json # &amp;ndash;receive.local-endpoint=127.0.0.1:10901 # &amp;ndash;receive.replication-factor=1 # &amp;ndash;remote-write.address=&amp;lt;STRING&amp;gt; # 处理 Prometheus 的 Remote Write 请求的地址和端口。默认值：0.</description></item></channel></rss>