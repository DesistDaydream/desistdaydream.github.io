<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Thanos 组件详解 on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/Thanos/Thanos-%E7%BB%84%E4%BB%B6%E8%AF%A6%E8%A7%A3/</link><description>Recent content in Thanos 组件详解 on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/Thanos/Thanos-%E7%BB%84%E4%BB%B6%E8%AF%A6%E8%A7%A3/index.xml" rel="self" type="application/rss+xml"/><item><title>Thanos 组件详解</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/Thanos/Thanos-%E7%BB%84%E4%BB%B6%E8%AF%A6%E8%A7%A3/Thanos-%E7%BB%84%E4%BB%B6%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/Thanos/Thanos-%E7%BB%84%E4%BB%B6%E8%AF%A6%E8%A7%A3/Thanos-%E7%BB%84%E4%BB%B6%E8%AF%A6%E8%A7%A3/</guid><description>概述 参考：
官方文档，组件 https://zhuanlan.zhihu.com/p/137248127 Compactor(压实器) 注意：Compactor 在持久运行状态，会对对象存储发起大量的 GET 请求。最好间隔一段时间，运行一次，压缩一次数据即可，不必持久运行
Receiver(接收器) 参考：
官方文档,组件-接收器 Querier(查询器) 参考：
官方文档,组件-查询器 Querier 组件分为两部分
Querier(查询器) # 实现了 Prometheus API，可以通过 Querier 发起 PromQL 查询请求，以获取数据；甚至可以从 Prometheus Server 的时序数据库中删除数据。每个从 Querier 发起的 PromQL 查询请求都会发送到可以暴露 StoreAPI 的组件上，并获取查询结果。 Query Fronted(查询前端) # 实现了 Prometheus API，可以将请求负载均衡到指定的多个 Querier 上，同时可以缓存响应数据、也可以按查询日拆分。有点像 Redis 的效果 Querier 组件向一个或多个暴露 StoreAPI 的组件发起查询请求，并将结果去重后，返回给查询客户端。 Deduplication(重复数据删除) The query layer can deduplicate series that were collected from high-availability pairs of data sources such as Prometheus. A fixed single or multiple replica labels must be chosen for the entire cluster and can then be passed to query nodes on startup.</description></item><item><title>使用 Thanos 查询前端优化查询性能</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/Thanos/Thanos-%E7%BB%84%E4%BB%B6%E8%AF%A6%E8%A7%A3/%E4%BD%BF%E7%94%A8-Thanos-%E6%9F%A5%E8%AF%A2%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96%E6%9F%A5%E8%AF%A2%E6%80%A7%E8%83%BD/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/Thanos/Thanos-%E7%BB%84%E4%BB%B6%E8%AF%A6%E8%A7%A3/%E4%BD%BF%E7%94%A8-Thanos-%E6%9F%A5%E8%AF%A2%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96%E6%9F%A5%E8%AF%A2%E6%80%A7%E8%83%BD/</guid><description>Thanos 中的 Query 组件可以提供一个统一的查询入口，但是当查询的数据规模较大的时候，对 querier 组件也会有很大的压力，为此 Thanos 也提供了一个 Query Frontend 的组件来提升性能。Thanos Query Frontend 是 Thanos Query 的前端，它的目标是将大型查询拆分为多个较小的查询，并缓存查询结果来提升性能。
概述 Thanos Query Frontend 组件通过 thanos query-frontend 命令实现了一个放在 querier 前面的服务，以改进读取路径。它基于 Cortex Query Frontend 组件，所以你可以找到一些 Cortex 常见的特性，如查询拆分和结果缓存。Thanos Query Frontend 是无状态和水平扩展的，可以使用下列命令来启动 Thanos Query Frontend：
thanos query-frontend \ --http-address &amp;quot;0.0.0.0:9090&amp;quot; \ --query-frontend.downstream-url=&amp;quot;&amp;lt;thanos-querier&amp;gt;:&amp;lt;querier-http-port&amp;gt;&amp;quot;
在接收到查询请求后 query frontend 不会立即响应，而是将查询请求放入一个查询队列中，querier 会连接到 query frontend 并消费这个队列，执行从队列中获取的查询请求并响应给 query frontend，query frontend 会对这些响应的结果进行聚合。
特性 查询队列 query frontend 的队列机制有以下用途。
确保可能导致 OOM 的大型查询在发生错误时能够得到重试。
防止多个大的查询请求打在单个 querier 上。
可以分配租户所对应的 querier，避免单个租户使用 DOS 拒绝服务攻击其他租户。</description></item></channel></rss>