<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Prometheus 衍生品 on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/</link><description>Recent content in Prometheus 衍生品 on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/index.xml" rel="self" type="application/rss+xml"/><item><title>Mimir</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/Mimir/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/Mimir/</guid><description>概述 参考：
GitHub 项目，grafana/mimir 官网 Mimir 由 Grafana 团队开发，为 Prometheus 提供了水平可扩展的、高可用、多租户、长期存储 等功能</description></item><item><title>Prometheus 配置自动管理</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/Prometheus-%E9%85%8D%E7%BD%AE%E8%87%AA%E5%8A%A8%E7%AE%A1%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/Prometheus-%E9%85%8D%E7%BD%AE%E8%87%AA%E5%8A%A8%E7%AE%A1%E7%90%86/</guid><description>概述 jimmidyson/configmap-reload prometheus-operator 的 prometheus-config-reloader
Prometheus Configmanager 参考：
GitHub 项目，facebookincubator/prometheus-configmanager Prometheus-Configmanager 将规则配置文件抽象成 tenant(租户)，每个 tenant 都会有对应唯一的文件名(格式为：TenantID_rules.yml)。每当修改这些规则配置文件时，都会对 http://PrometheusIP:PORT/-/reload 发送 POST 请求以便让 Prometheus Server 重新加载配置文件。
一般情况，一个文件只有一个规则组，组名与 tenant 名称保持一致
基本示例 curl -X POST &amp;#34;http://localhost:9100/v1/desistdaydream/alert&amp;#34; -H &amp;#34;accept: application/json&amp;#34; -H &amp;#34;Content-Type: application/json&amp;#34; -d &amp;#39; { &amp;#34;alert&amp;#34;: &amp;#34;test&amp;#34;, &amp;#34;expr&amp;#34;: &amp;#34;string&amp;#34;, &amp;#34;labels&amp;#34;: { &amp;#34;additionalProp1&amp;#34;: &amp;#34;string&amp;#34;, &amp;#34;additionalProp2&amp;#34;: &amp;#34;string&amp;#34; }, &amp;#34;for&amp;#34;: &amp;#34;1m&amp;#34;, &amp;#34;annotations&amp;#34;: { &amp;#34;additionalProp1&amp;#34;: &amp;#34;string&amp;#34;, &amp;#34;additionalProp2&amp;#34;: &amp;#34;string&amp;#34; } }&amp;#39; 上面的 curl 请求会生成如下文件
/ # cat desistdaydream_rules.yml groups: - name: desistdaydream rules: - alert: test expr: string for: 1m labels: additionalProp1: string additionalProp2: string tenant: desistdaydream annotations: additionalProp1: string additionalProp2: string 部署 构建 docker build -t prometheus-configurer -f Dockerfile.</description></item><item><title>Prometheus 衍生品</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/Prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/Prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/</guid><description>概述 Prometheus 高可用 参考：
官方文档，存储 Prometheus 本身没有集群的概念，也就没有主备，也就没有互相备份，并且，Prometheus 是主动 pull 数据的，所以 如果 Prometheus 想要高可用就需要多个 Prometheus Server 共享存储，那么如果要共享存储，则无法保持数据一致性，因为共享存储内的数据会收到两份数据。官方给出了一个办法，就是使用 remote 配置，将数据保存到第三方存储中，而不是通过 Prometheus 自己的数据系统进行保存。
如果多个 Prometheus 分别保存自己的数据，那么当一个节点 down 掉后，另一个节点就算数据没丢失，也没法保证两边的数据一致性。所以，Prometheus 通过远程存储的功能，来实现基本的数据高可用功能。
高可用实践文章：
使用 Thanos+Prometheus+Grafana 打造监控系统：https://mp.weixin.qq.com/s/8Ws2po_oT5sSKLD3nGYwMw 高科用方案推荐 Cortex 项目地址：https://github.com/cortexproject/cortex
Thanos 具有长期存储功能的高可用 Prometheus 项目地址：https://github.com/thanos-io/thanos https://www.qikqiak.com/k8strain/monitor/thanos/
Victoria Metrics 快速，经济高效且可扩展的时间序列数据库 项目地址：https://github.com/VictoriaMetrics/VictoriaMetrics
m3db 项目地址：https://github.com/m3db/m3
高科用方案对比 Victoria Metrics 与 Thanos 对比 参考：
Thanos 与 VictoriaMetrics，谁才是打造大型 Prometheus 监控系统的王者？ 这篇文章对比有误差，并没有用 Thanos 的 Receiver 架构模式进行对比，实际上，Thanos 的 Receiver 模式与 VM 是类似的，也是通过 Remote Write 来实现数据转存。
Thanos 与 Cortex 对比 发展现状 Thanos 项目创建于 2017 年 12 月份。在 2019 年 8 月份成为 CNCF 沙盒项目。目前的维护成员主要来自于 Red Hat。 Cortex 项目创建于 2016 年 2 月份。在 2018 年 8 月成为 CNCF 沙盒项目。项目维护成员主要来自于 Weavework。</description></item><item><title>VictoriaMetrics</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/VictoriaMetrics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/VictoriaMetrics/</guid><description>概述 参考：
GitHub 项目，VictoriaMetrics/VictoriaMetrics 官网 MetricsQL https://docs.victoriametrics.com/MetricsQL.html#count_ne_over_time</description></item></channel></rss>