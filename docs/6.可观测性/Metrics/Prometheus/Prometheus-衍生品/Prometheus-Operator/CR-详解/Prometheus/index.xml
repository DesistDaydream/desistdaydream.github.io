<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Prometheus on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/Prometheus-Operator/CR-%E8%AF%A6%E8%A7%A3/Prometheus/</link><description>Recent content in Prometheus on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/Prometheus-Operator/CR-%E8%AF%A6%E8%A7%A3/Prometheus/index.xml" rel="self" type="application/rss+xml"/><item><title>Prometheus</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/Prometheus-Operator/CR-%E8%AF%A6%E8%A7%A3/Prometheus/Prometheus/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/Prometheus-Operator/CR-%E8%AF%A6%E8%A7%A3/Prometheus/Prometheus/</guid><description>概述 参考 Prometheus 文中关于 Prometheus Server 的部署我们发现，手动来维护 Prometheus Server 是相当费力的，而在 kubernetes 中，可以借助 operater 帮助我们来完成 Prometheus Server 的创建与维护工作，甚至连自动发现配置都可以。
Prometheus CRD 部署 当在 k8s 中部署了 operator 之后，部署 Prometheus Server 就变成了声明一个 Prometheus 资源。
这是声明一个 Prometheus 类型的资源的 manifest 示例：
apiVersion: monitoring.coreos.com/v1 kind: Prometheus metadata: name: test namespace: monitor spec: replicas: 1 serviceAccountName: prometheus 注意：
由于 Prometheus Server 容器需要读取集群内其他资源对象的数据，所以需要给 Prometheus 资源生成的 Pod 一个足够权限的 serviceAccount。 kubectl create -n monitor serviceaccount prometheus kubectl create clusterrolebinding prometheus-admin --clusterrole=cluster-admin --serviceaccount=monitor:prometheus 声明好 Prometheus 资源，则会看到一个名为 test 的 Prometheus 对象；该对象会自动帮助我们创建一个名为 prometheus-test 的 Statefulsets 对象；这个 Statefulsets 中的 pod 包括 2 个容器，1 个 Prometheus Server 容器，和 1 个 sidecar container；还会有一个 service 来关联到这些 pod 上</description></item><item><title>Prometheus Manifest 详解</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/Prometheus-Operator/CR-%E8%AF%A6%E8%A7%A3/Prometheus/Prometheus-Manifest-%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/Prometheus-Operator/CR-%E8%AF%A6%E8%A7%A3/Prometheus/Prometheus-Manifest-%E8%AF%A6%E8%A7%A3/</guid><description>概述 参考：
官方文档 apiVersion: monitoring.coreos.com/v1 kind: Prometheus metadata spec additionalScrapeConfigs(Object) # 额外的抓取配置 该字段可以通过 additional 功能 为 Prometheus Server 创建额外的 Scrape 配置。这种方式常用来为 Prometheus Server 创建静态的 Scrape 配置。
key(STRING) # 要引用的 secret 对象中 .data 字段下，指定的 key 的值 name(STRING) # 要使用的 secret 对象名称 containers([]Object) # 注入其他容器或修改 Operator 生成的容器 这可用于允许将身份验证代理添加到 Prometheus pod 或更改 Operator 生成的容器的行为。 如果此处描述的容器共享相同的名称，则它们将修改操作员生成的容器，并且通过战略合并补丁进行修改。 当前的容器名称为：“ prometheus”，“ config-reloader”和“ thanos-sidecar”。 覆盖容器完全不在维护人员支持的范围之内，因此，您接受此行为可能随时中断，恕不另行通知。
name(STRING) # 指定要修改的容器名。支持的容器名为：prometheus、config-reloader、thanos-sidecar。若指定的名称不存在，则创建新的容器 externalUrl(STRING) # 为 prometheus Server 指定 &amp;ndash;web.external-url 命令行标志的值 logFormat(STRING) # 为 Prometheus Server 指定 &amp;ndash;log.</description></item></channel></rss>