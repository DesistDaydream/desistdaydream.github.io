<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CR 详解 on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/Prometheus-Operator/CR-%E8%AF%A6%E8%A7%A3/</link><description>Recent content in CR 详解 on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/Prometheus-Operator/CR-%E8%AF%A6%E8%A7%A3/index.xml" rel="self" type="application/rss+xml"/><item><title>Pod Monitor</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/Prometheus-Operator/CR-%E8%AF%A6%E8%A7%A3/Pod-Monitor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/Prometheus-Operator/CR-%E8%AF%A6%E8%A7%A3/Pod-Monitor/</guid><description>概述 参考：
官方文档：https://github.com/prometheus-operator/prometheus-operator/blob/master/Documentation/design.md#podmonitor Pod Monitor 与 Service Monitor 一样，都是用来生成 Prometheus 配置文件中 scrape 配置段中的内容。
不同点在于 PM 直接与 pod 关联，根据标签选择来定义要监控的 pod，而不再需要通过 service 来暴露 pod 中的端口。
PodMonitor yaml 详解 apiVersion: monitoring.coreos.com/v1 kind: PodMonitor metadata: name: rabbitmq spec: # 指定从 pod 中哪个端口采集指标，需要在 pod 的 .spec.containers.ports 字段中指定 containerPort 和 name。 podMetricsEndpoints: - interval: 15s port: prometheus # 需要与 .spec.containers.ports.name 相同，则会将端口加入 scrape 配置中 # 指定要匹配的 pod 的 label，具有相同 label 的将会加入监控配置。 selector: matchLabels: app.kubernetes.io/component: rabbitmq # 指定要从哪个 namespace 中关联 pod。any: true 为匹配所有 ns 下的 pod namespaceSelector: any: true Pod Monitor 样例 apiVersion: monitoring.</description></item><item><title>Service Monitor</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/Prometheus-Operator/CR-%E8%AF%A6%E8%A7%A3/Service-Monitor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/Prometheus-Operator/CR-%E8%AF%A6%E8%A7%A3/Service-Monitor/</guid><description>Service Monitor 介绍 注意：ServiceMonitor 资源本身无法直接为目标 job 添加 label，所有 label 只能从关联的 Service 中获取，然后再通过 ServiceMonitor 资源的 spec.endpoints.relabelings 字段(就是使用 Prometheus 的 relabel 功能)，将获取到的 label 改为自己想要的
operator 根据 ServiceMonitor 的定义自动生成 Prometheus 配置文件中的 scrape 配置段中的内容。创建一个 SM，就代表要给 prometheus 配置中 scrape 配置段中加入内容。
ServiceMonitor 资源描述了 Prometheus Server 的 Target 列表，Operator 会监听这个资源的变化来动态的更新 Prometheus Server 的 Scrape Targets 并让 Prometheus Server 去 reload 配置。而该资源主要通过 Selector 根据 Labels 选取对应 Service 的 endpoints，并让 Prometheus Server 通过 Service 进行拉取 Metrics,Metrics 信息要在 http 的 url 输出符合 metrics 格式的信息,ServiceMonitor 也可以定义目标的 metrics 的 url.</description></item><item><title>各 CRD 的 yaml 样例</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/Prometheus-Operator/CR-%E8%AF%A6%E8%A7%A3/%E5%90%84-CRD-%E7%9A%84-yaml-%E6%A0%B7%E4%BE%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/Prometheus-Operator/CR-%E8%AF%A6%E8%A7%A3/%E5%90%84-CRD-%E7%9A%84-yaml-%E6%A0%B7%E4%BE%8B/</guid><description>应用实例 prometheus 使用 storageclass 实现持久存储 可以在 prometheus 这个 CRD 的定义中找到关于 storage 的字段https://github.com/coreos/kube-prometheus/blob/master/manifests/0prometheus-operator-0prometheusCustomResourceDefinition.yaml#L3633
注解中写到如果不指定 storage 的话，则默认使用 emptydir 类型作为存放监控数据的 volume 类型
如果想要修改成持久存储，则只需要在声明 prometheus 资源的 yaml 文件中加入如下 storage 字段即可，下面的实例是让 prometheus 使用名为 managed-nfs-storage 的 StorageClass
storage: volumeClaimTemplate: spec: storageClassName: managed-nfs-storage resources: requests: storage: 10Gi 当加入该字段后，prometheus 资源生成的 statefulset 就会多出来一个字段，如图所示。 prometheus 使用 hostPath 实现持久存储 如下示例，使用本地 pod 所在节点的本地目录/root/prometheus-k8s-db 来作为数据存储目录
注意，最好使用 nodeSelector 让 pod 始终调度到同一个节点。
apiVersion: monitoring.coreos.com/v1 kind: Prometheus metadata: name: test spec: replicas: 2 containers: - name: prometheus volumeMounts: - mountPath: /prometheus name: prometheus-k8s-db volumes: - name: prometheus-k8s-db hostPath: path: /root/prometheus-k8s-db nodeSelector: monitor: prometheus 修改 prometheus 的启动参数 可以在 prometheus 这个 CRD 的定义中找到关于 container 的字段https://github.</description></item></channel></rss>