<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Prometheus Operator on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/Prometheus-Operator/</link><description>Recent content in Prometheus Operator on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/Prometheus-Operator/index.xml" rel="self" type="application/rss+xml"/><item><title>Prometheus-adapter</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/Prometheus-Operator/Prometheus-adapter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/Prometheus-Operator/Prometheus-adapter/</guid><description>概述 参考:
GitHub 项目，kubernetes-sigs/prometheus-adapter 该项目从 DirectXMan12/k8s-prometheus-adapter 移动到 kubernetes-sigs/prometheus-adapter 主要特性： 一、adapter 在成功注册 API 之后，可以通过 Prometheus 实现 custom.metrics.k8s.io API 和 metrics.k8s.io API 的功能 adaper 可以替换掉 metrics server 来实现其功能。adapter 要想实现 kubectl top node/pod 命令的功能，则需要 adapter 通过查询 Prometheus 来获取数据完成，这需要 prometheus 提前获取某些数据来支撑 adapter 得查询，而查询语句则是根据 adapter 的配置文件中 resourceRules 配置环境中的规则来指定。
其中 kubectl top node 如果查询语句查询结果为空，则在执行命令查询时会报错：error: metrics not available yet 其中 kubectl top pod 如果查询语句查询结果为空，则在执行命令查询时会报错：No resources found 二、adapter 可以根据 prometheus 提供的核心 metrics 数据(比如 CPU 使用率等)或者自定义 metrics 数据，来自动实现[HPA](4.Controller(控制器).md 容器编排系统/4.Controller(控制器).md)功能。</description></item><item><title>kube-prometheus 项目</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/Prometheus-Operator/kube-prometheus-%E9%A1%B9%E7%9B%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/Prometheus-Operator/kube-prometheus-%E9%A1%B9%E7%9B%AE/</guid><description>概述 参考:
GitHub 项目，prometheus-operator/kube-prometheus 部署文件 https://github.com/coreos/kube-prometheus/tree/master/manifests https://github.com/prometheus-operator/kube-prometheus/tree/main/manifests GitHub 项目，prometheus-community/helm-charts（kube-prometheus 项目的 Helm Chart） 背景 该项目曾经属于 prometheus operator 项目的一部分，后来挪到 coreos 社区中，再后来又挪回 prometheus operator 社区中，并作为一个单独的 repo 存在。
kube-prometheus 在 prometheus-operator 基础上，给用户提供了一套完整的 yaml 文件，这样就不用让用户在创建完 operator 之后，还要自己写一大堆 prometheus 相关的 yaml 才能把监控系统用起来。
这套完整的 yaml 文件就在上面所写的‘部署文件’链接中,其中包括 prometheus 部署所用的各种 yaml 文件以及配置生成文件、RBAC、告警文件、grafana 还有 grafna 模板等等
兼容矩阵 部署</description></item><item><title>Operator API</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/Prometheus-Operator/Operator-API/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/Prometheus-Operator/Operator-API/</guid><description>参考：GitHub 文档</description></item><item><title>Prometheus Operator</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/Prometheus-Operator/Prometheus-Operator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/Prometheus-Operator/Prometheus-Operator/</guid><description>概述 参考：
官网 GitHub 项目 该项目曾经在 coreos/prometheus-operator 仓库中，后来移动到 prometheus-operator/prometheus-operator
背景 为什么会需要 prometheus-operator(后文简称 operator)
当 prometheus 需要监控 kubernetes 集群时，要手动修改配置文件中的 scrape 配置段是非常复杂且繁琐的。每启动一个新 pod 就要新加配置，并手动更新 prometheus 配置文件，有没有一种办法可以在新增 pod 时，让 prometheus 自动更新其配置文件呢？这就是 operator 的作用。
Prometheus Operator 通过数个 CRD 资源来控制 Prometheus 监控套件的运行，并作为这几个 CRD 的 controller(类似于 kube-controller-manager，只不过这个 Controller 只维护几个自定义的资源)来维护其正常运行，这些 CRD 就可以实现这样的功能：自动添加配置文件中 scrape 配置段的 job，并且自动执行热更新来加载配置文件等等。下面是这几个 CRD 的简介
CRD 介绍 参考：
官方文档 https://github.com/coreos/prometheus-operator/blob/master/Documentation/design.md Prometheus Operator 现阶段引入了如下几种自定义资源：
Prometheus # 它定义了所需的 Prometheus 主程序。Operator 始终确保正在运行与资源定义匹配的 prometheus 主程序。 Alertmanager # 它定义了所需的 Alertmanager 主程序。Operator 始终确保正在运行与资源定义匹配的 Alertmanager 主程序。 ThanosRuler # ServiceMonitor # 为 Prometheus Server 配置文件中的 scrape_config 配置段生成配置内容。以声明方式指定应如何监控服务组。 PodMonitor # 为 Prome theus Server 配置文件中的 scrape_config 配置段生成配置内容。与 ServiceMonitor 类型类似，只不过是从指定的 pod 中，发现待抓去的目标。 Probe # 为 Prometheus Server 配置文件中的 scrape_config 配置段生成配置内容。只会生成 blackbox-exporter 程序所需的配置。 PrometheusRule # 它定义了一个所需的 Prometheus 规则文件，该文件可以由包含 Prometheus 警报和记录规则的 Prometheus 实例加载。 AlertmanagerConfig # 随着发展，也许还会有其他的 CR 产生</description></item></channel></rss>