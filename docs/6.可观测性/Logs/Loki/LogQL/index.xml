<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>LogQL on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Logs/Loki/LogQL/</link><description>Recent content in LogQL on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Logs/Loki/LogQL/index.xml" rel="self" type="application/rss+xml"/><item><title>LogQL</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Logs/Loki/LogQL/LogQL/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Logs/Loki/LogQL/LogQL/</guid><description>概述 参考：
官方文档，查询 公众号，Loki 查询语言 LogQL 使用 Log Query Language(日志查询语言，简称 LogQL) 受 PromQL 启发，可以看作是分布式的 grep 命令，用来从汇总的日志源筛选日志。LogQL 通过 Labels(标签) 和 Operators(运算符) 进行过滤。
LogQL 查询有两种类型：
Log Queries(日志查询) # 根据查询语句返回日志条目，每行是一条日志。 Metric Queries(指标查询) # 用于扩展日志查询并根据 Log Queries 中的日志计数计算值。通过这种查询语句，可以计算将日志数据量化成指标信息，并且，Promtail 可以通过这种查询语句将指标信息，填充到自己暴露的 Metrics 端点中。 注意：由于 Loki 的设计，所有 LogQL 查询都必须包含一个 Log Queries 中的 日志流选择器
日志流选择器确定将搜索多少日志流（日志内容的唯一来源，例如文件）。然后，更细粒度的日志流选择器将搜索到的流的数量减少到可管理的数量。这意味着传递给日志流选择器的标签将影响查询执行的相对性能。然后使用过滤器表达式对来自匹配日志流的聚合日志进行分布式 grep。
Log Queries(日志查询) 详见 Log Queries
Metric Queries(指标查询) 详见 Metric Queries</description></item><item><title>Log Queries</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Logs/Loki/LogQL/Log-Queries/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Logs/Loki/LogQL/Log-Queries/</guid><description>概述 参考：
官方文档，查询 - 日志查询 基本的日志查询由两部分组成：
Log Stream Selector(日志流选择器) # Log Pipeline(日志管道) # 注意：由于 Loki 的设计原则，所有的 LogQL 查询必须包含 Log Stream Selector(日志流选择器)
日志流选择器决定了有多少日志流将被搜索到，一个更细粒度的日志流选择器将搜索到流的数量减少到一个可管理的数量。所以传递给日志流选择器的标签将影响查询执行的性能。
而日志流选择器后面的日志管道是可选的，日志管道是一组阶段表达式，它们被串联在一起应用于所过滤的日志流，每个表达式都可以过滤、解析和改变日志行内容以及各自的标签。
下面的例子显示了一个完整的日志查询的操作：
{container=&amp;quot;query-frontend&amp;quot;,namespace=&amp;quot;loki-dev&amp;quot;} |= &amp;quot;metrics.go&amp;quot; | logfmt | duration &amp;gt; 10s and throughput_mb &amp;lt; 500
该查询语句由以下几个部分组成：
一个日志流选择器 {container=&amp;quot;query-frontend&amp;quot;,namespace=&amp;quot;loki-dev&amp;quot;}，用于过滤 loki-dev 命名空间下面的 query-frontend 容器的日志 然后后面跟着一个日志管道 |= &amp;quot;metrics.go&amp;quot; | logfmt | duration &amp;gt; 10s and throughput_mb &amp;lt; 500，这管道表示将筛选出包含 metrics.go 这个词的日志，然后解析每一行日志提取更多的表达并进行过滤 为了避免转义特色字符，你可以在引用字符串的时候使用单引号，而不是双引号，比如 \w+1 与 &amp;ldquo;\w+&amp;rdquo; 是相同的。
Log Stream Selector(日志流选择器) Log Stream Selector 用于确定查询结果中应该包括哪些日志流。Log Stream Selector 由一个或多个Label(标签) 组成，Label 是以 = 分割的 Key/Value Paire(键/值对) 。所谓的日志流就是一行一行的日志，组合在一起，形成的一种类似数据流的感觉，从上到下哗哗流水那种感觉~日志流说白了就是日志的集合。stream(流) 的概念如果在 Prometheus 中描述，那就是 series(序列) 的概念。</description></item><item><title>Metric Queries</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Logs/Loki/LogQL/Metric-Queries/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Logs/Loki/LogQL/Metric-Queries/</guid><description>概述 参考：
官方文档，查询 - 指标查询 LogQL 还可以通过 Functions(函数) 来对每个日志流进行计算以实现 Metric Queries(指标查询) 。就是将日志流中的日志计数，并根据技术进行一些查询，这种查询方式与 PromQL 的指标查询类似。
指标查询可用于计算诸如 错误消息率、最近 3 个小时内日志数量最多的 N 个日志源、etc. 的信息。
范围向量聚合 LogQL 与 Prometheus 具有相同的范围向量概念，不同之处在于所选的样本范围包括每个日志
常用函数主要是如下 4 个：
rate: 计算每秒的日志条目 count_over_time: 对指定范围内的每个日志流的条目进行计数 bytes_rate: 计算日志流每秒的字节数 bytes_over_time: 对指定范围内的每个日志流的使用的字节数 比如计算 nginx 的 qps：
rate({filename=&amp;#34;/var/log/nginx/access.log&amp;#34;}[5m])) 计算 kernel 过去 5 分钟发生 oom 的次数：
count_over_time({filename=&amp;#34;/var/log/message&amp;#34;} |~ &amp;#34;oom_kill_process&amp;#34; [5m])) 聚合运算符 与 PromQL 一样，LogQL 支持内置聚合运算符的一个子集，可用于聚合单个向量的元素，从而产生一个具有更少元素但具有集合值的新向量：
sum: Calculate sum over labels min: Select minimum over labels max: Select maximum over labels avg: Calculate the average over labels stddev: Calculate the population standard deviation over labels stdvar: Calculate the population standard variance over labels count: Count number of elements in the vector bottomk: Select smallest k elements by sample value topk: Select largest k elements by sample value sum：求和 min：最小值 max：最大值 avg：平均值 stddev：标准差 stdvar：标准方差 count：计数 bottomk：最小的 k 个元素 topk：最大的 k 个元素 聚合函数我们可以用如下表达式描述：</description></item></channel></rss>