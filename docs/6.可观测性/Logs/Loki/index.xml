<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Loki on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Logs/Loki/</link><description>Recent content in Loki on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Logs/Loki/index.xml" rel="self" type="application/rss+xml"/><item><title>Loki</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Logs/Loki/Loki/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Logs/Loki/Loki/</guid><description>概述 参考：
GitHub 项目，grafana/loki 官方文档，基础 - 概述 Loki 是受 Prometheus 启发的水平可扩展，高度可用的多租户日志聚合系统。它的设计具有很高的成本效益，并且易于操作。它不索引日志的内容，而是为每个日志流设置一组标签。 与其他日志聚合系统相比，Loki 有以下特点：
不对日志进行全文本索引。通过存储压缩的，非结构化的日志以及仅索引元数据，Loki 更加易于操作且运行成本更低。 使用与 Prometheus 相同的标签对日志流进行索引和分组，从而使您能够使用与 Prometheus 相同的标签在指标和日志之间无缝切换。 特别适合存储 Kubernetes Pod 日志。诸如 Pod 标签之类的元数据会自动被抓取并建立索引。 在 Grafana 中具有本机支持（需要 Grafana v6.0）。 基于 Loki 的日志包含 3 个程序：
Loki 是主服务器，负责存储日志和处理查询。 Client Agent 客户端代理，负责收集日志并将其发送给 Loki。promtail 是其中一种 agent，是 loki 原配。 Grafana 用于查询和显示日志。 Loki 像 Prometheus 一样，但是是用于处理日志的：我们更喜欢基于多维标签的索引方法，并且希望使用没有依赖关系的单一二进制，易于操作的系统。Loki 与 Prometheus 的不同之处在于，它侧重于日志而不是指标，并通过推送而不是拉取交付日志。
Loki 与 Promtail 加一起才相当于 Prometheus，因为 Promtail 是发现目标，采集日志的程序。然后主动 Push 给 Loki，由 Loki 存储日志数据。 而 Promtheus，可以自己发现目标，采集指标，存储指标。
Loki Observability(可观察性) 参考：</description></item><item><title>Loki 部署</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Logs/Loki/Loki-%E9%83%A8%E7%BD%B2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Logs/Loki/Loki-%E9%83%A8%E7%BD%B2/</guid><description>概述 参考：
官方文档，安装 官方文档，基础知识 - 架构 - 部署模式 使用 docker 运行 Loki docker run -d --rm --name loki \ --network host \ -v /opt/loki/config:/etc/loki \ -v /opt/loki/data:/loki \ -v /etc/localtime:/etc/localtime:ro \ grafana/loki 注意：与 Prometheus 类似，需要修改 /opt/loki 目录权限为 777，否则 pod 内进程对该目录无操作权限
在 Kubernets 集群中部署 添加 loki 的 helm chart 仓库
helm repo add grafana https://grafana.github.io/helm-charts helm repo update Helm 部署 Loki 套件 参考：
官方文档 2.4.x，安装 - helm 部署 Loki 栈
kubectl create ns loki # 创建名称空间 helm pull grafana/loki-stack # 获取 loki-stack 的 charts 压缩包 tar -zxvf loki-stack-X.</description></item><item><title>Loki Rules 配置</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Logs/Loki/Loki-Rules-%E9%85%8D%E7%BD%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Logs/Loki/Loki-Rules-%E9%85%8D%E7%BD%AE/</guid><description>概述 参考：
官方文档，告警规则和记录规则 Loki Rules 文件的结构与 Promethues 的 Rules 文件结构一模一样。
Loki Rules 配置详解 Alerting Rules(告警规则) Recording Rules(记录规则)</description></item><item><title>Loki 配置</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Logs/Loki/Loki-%E9%85%8D%E7%BD%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Logs/Loki/Loki-%E9%85%8D%E7%BD%AE/</guid><description>概述 参考：
官方文档，配置 官方文档，告警规则和记录规则 Loki 可以通过两种方式配置 Loki 的运行时行为
命令行标志 配置文件 配置文件的一部分字段的值，可以通过命令行标志设置。在官方文档中，我们可以查看到配置文件中，所有与命令行标志对应的字段，效果如下：
# HTTP server listen host # CLI flag: -server.http-listen-address [http_listen_address(string)] 凡是注释中，有 CLI flag 的字段，都可以通过命令行标签设置其值。
Loki 命令行标志详解 -target &amp;lt;STRING&amp;gt; # 指定要启用的模块
可用的模块有 distributor、ingester、querier、query-frontend、table-manager。 可以使用 read、write 来让 loki 运行在只读或只写的模式 可以使用 all 表示启用所有模块 loki.yaml 配置文件详解 文档中包含配置文件关键字与命令行 flag 的对应值，配置文件中的很多配置，都可以通过命令行 flag 来实现。
顶层字段 target(STRING) # 指定 loki 二进制文件要运行的组件列表。默认值：all，即运行所有组件
可用的值有：all、read、write、ingester、distributor、query-frontend、query-scheduler、querier、index-gateway、ruler、compactor。 auth_enabled(BOOLEAN) # 通过 X-Scope-OrgID 标头启用身份验证，如果为 true，则必须存在。 如果为 false，则 OrgID 将始终设置为“ fake”。默认值：true
server(server) # 用于配置 loki 提供 http 和 gRPC 这两种服务的行为</description></item><item><title>Loki API</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Logs/Loki/Loki-API/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Logs/Loki/Loki-API/</guid><description>概述 参考：
官方文档, HTTP API 每个组件都会暴露一些基本的 API
GET /ready GET /metrics GET /config GET /services GET /loki/api/v1/status/buildinfo 除了这几个基本的 API 以外，每个组件都会暴露一些专用的 API，若是以 Monolithic 架构启动 Loki，则下面的所有 API 都会在这个进程暴露。
Querier API 与 Query Frontend API 查询器与查询前端暴露的 API 是我们最常用的 API，用来处理客户端发来的 LogQL。
GET /loki/api/v1/query GET /loki/api/v1/query_range Step vs Interval GET /loki/api/v1/labels GET /loki/api/v1/label/&amp;lt;name&amp;gt;/values GET /loki/api/v1/series GET /loki/api/v1/index/stats GET /loki/api/v1/tail Distributor API POST /flush POST /ingester/flush_shutdown Ingester API POST /flush POST /ingester/shutdown Ruler API 以 /loki/ 开头的 API 与 Prometheus API 兼容，结果格式可以互换使用</description></item><item><title>Authentication(认证)</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Logs/Loki/Authentication%E8%AE%A4%E8%AF%81/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Logs/Loki/Authentication%E8%AE%A4%E8%AF%81/</guid><description>概述 参考：
官方文档,运行方式-认证 Loki 不附带任何包含的身份验证层。运营商应在您的服务之前运行身份验证反向代理，例如使用基本身份验证或 OAuth2 代理的 NGINX。
请注意，在多租户模式下使用 Loki 时，Loki 要求将 HTTP 标头 X-Scope-OrgID设置为标识租户的字符串。填充此值的责任应由身份验证反向代理处理。阅读多租户文档以了解更多信息。
有关身份验证 Promtail 的信息，请参阅文档以了解如何配置 Promtail。</description></item><item><title>组件详解</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Logs/Loki/%E7%BB%84%E4%BB%B6%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Logs/Loki/%E7%BB%84%E4%BB%B6%E8%AF%A6%E8%A7%A3/</guid><description>概述 参考：
官方文档，架构 官方文档，架构 - 组件 公众号，Grafana Loki 架构(阳明翻译的官方文档) Grafana Loki 是一套可以组合成一个功能齐全的日志堆栈组件，与其他日志记录系统不同，Loki 是基于仅索引有关日志元数据的想法而构建的：标签（就像 Prometheus 标签一样）。日志数据本身被压缩然后并存储在对象存储（例如 S3 或 GCS）的块中，甚至存储在本地文件系统上，轻量级的索引和高度压缩的块简化了操作，并显着降低了 Loki 的成本，Loki 更适合中小团队。
Grafana Loki 主要由 3 部分组成:
loki: 日志记录引擎，负责存储日志和处理查询 promtail: 代理，负责收集日志并将其发送给 loki grafana: UI 界面 Distributor(分配器) Distributor 服务负责处理客户端写入的日志，它本质上是日志数据写入路径中的第一站，一旦 Distributor 收到日志数据，会将其拆分为多个批次，然后并行发送给多个 Ingester。
Distributor 通过 gRPC 与 Ingester 通信，它们都是无状态的，可以根据需要扩大或缩小规模。
Validation(验证) Preprocessing(预处理) Rate limiting(速率限制) Forwarding(转发) Hashing(哈希) Distributors 将一致性哈希和可配置的复制因子结合使用，以确定 Ingester 服务的哪些实例应该接收指定的流。
流是一组与租户和唯一标签集关联的日志，使用租户 ID 和标签集对流进行 hash 处理，然后使用哈希查询要发送流的 Ingesters。
存储在 Consul 中的哈希环被用来实现一致性哈希。。。所有的 ingester 都会使用自己拥有的一组 Token 注册到哈希环中，每个 Token 是一个随机的无符号 32 位数字，与一组 Token 一起，ingester 将其状态注册到哈希环中，状态 JOINING 和 ACTIVE 都可以接收写请求，而 ACTIVE 和 LEAVING 的 ingesters 可以接收读请求。在进行哈希查询时，distributors 只使用处于请求的适当状态的 ingester 的 Token。</description></item></channel></rss>