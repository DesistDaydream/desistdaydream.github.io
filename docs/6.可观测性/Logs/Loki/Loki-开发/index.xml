<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Loki 开发 on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Logs/Loki/Loki-%E5%BC%80%E5%8F%91/</link><description>Recent content in Loki 开发 on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Logs/Loki/Loki-%E5%BC%80%E5%8F%91/index.xml" rel="self" type="application/rss+xml"/><item><title>Loki 源码分析之日志写入</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Logs/Loki/Loki-%E5%BC%80%E5%8F%91/Loki-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8B%E6%97%A5%E5%BF%97%E5%86%99%E5%85%A5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Logs/Loki/Loki-%E5%BC%80%E5%8F%91/Loki-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8B%E6%97%A5%E5%BF%97%E5%86%99%E5%85%A5/</guid><description>原文链接：https://mp.weixin.qq.com/s/9BKZvNANqGJwziygytJ1ag 前面我们介绍了 Loki 的一些基本使用配置，但是对 Loki 还是了解不够深入，官方文档写得较为凌乱，而且没有跟上新版本，为了能够对 Loki 有一个更深入的认识，做到有的放矢，这里面我们尝试对 Loki 的源码进行一些简单的分析，由于有很多模块和实现细节，这里我们主要是对核心功能进行分析，希望对大家有所帮助。本文首先对日志的写入过程进行简单分析。
Distributor Push API Promtail 通过 Loki 的 Push API 接口推送日志数据，该接口在初始化 Distributor 的时候进行初始化，在控制器基础上包装了两个中间件，其中的 HTTPAuthMiddleware 就是获取租户 ID，如果开启了认证配置，则从 X-Scope-OrgID 这个请求 Header 头里面获取，如果没有配置则用默认的 fake 代替。
// pkg/loki/modules.go func (t *Loki) initDistributor() (services.Service, error) { ...... if t.cfg.Target != All { logproto.RegisterPusherServer(t.Server.GRPC, t.distributor) } pushHandler := middleware.Merge( serverutil.RecoveryHTTPMiddleware, t.HTTPAuthMiddleware, ).Wrap(http.HandlerFunc(t.distributor.PushHandler)) t.Server.HTTP.Handle(&amp;#34;/api/prom/push&amp;#34;, pushHandler) t.Server.HTTP.Handle(&amp;#34;/loki/api/v1/push&amp;#34;, pushHandler) return t.distributor, nil } Push API 处理器实现如下所示，首先通过 ParseRequest 函数将 Http 请求转换成 logproto.</description></item></channel></rss>