<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Promtail on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Logs/Loki/Promtail/</link><description>Recent content in Promtail on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Logs/Loki/Promtail/index.xml" rel="self" type="application/rss+xml"/><item><title>Promtail</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Logs/Loki/Promtail/Promtail/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Logs/Loki/Promtail/Promtail/</guid><description>概述 参考：
官方文档 GitHub 官方文档 公众号，Promtail Pipeline 日志处理配置 [!Attention] Grafana 弃用了 Promtail，推荐迁移到 Grafana Alloy
Promtail 是将本地日志内容发送到私有 Loki 或 Grafana Cloud 的代理。通常将其部署到 有监控需求的应用程序 的每台机器上。
promtail 通过类似于 tail 命令的这种方式来采集日志文件内容，采集完成后，添加 label，然后 push 给 Loki 。
Promtail 是 Loki 官方支持的日志采集端，在需要采集日志的节点上运行采集代理，再统一发送到 Loki 进行处理。除了使用 Promtail，社区还有很多采集日志的组件，比如 fluentd、fluent bit 等，都是比较优秀的。
但是 Promtail 是运行 Kubernetes 时的首选客户端，因为你可以将其配置为自动从 Promtail 运行的同一节点上运行的 Pod 中抓取日志。Promtail 和 Prometheus 在 Kubernetes 中一起运行，还可以实现非常强大的调试功能，如果 Prometheus 和 Promtail 使用相同的标签，用户还可以使用 Grafana 根据标签集在指标和日志之间切换。
此外如果你想从日志中提取指标，比如计算某个特定信息的出现次数，Promtail 效果也是非常友好的。在 Promtail 中一个 pipeline 管道被用来转换一个单一的日志行、标签和它的时间戳。
当前，Promtail 可以从两个来源 tail 日志</description></item><item><title>Label 与 Relabeling</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Logs/Loki/Promtail/Label-%E4%B8%8E-Relabeling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Logs/Loki/Promtail/Label-%E4%B8%8E-Relabeling/</guid><description>概述 参考：
Promtail 的 Label 与 Relabeling 功能与 Prometheus 中的 Relabeling(重新标记) 概念一样。
Promtail 具有一个嵌入式 Web 服务器，可以通过配置文件的 server 字段配置监听的端口，默认监听 80 端口
这个 Web 页面与 Prometheus 的页面基本一样，只不过更简单，只有 Service Dicovery 和 Targets 两个页面。
也确实只要两个页面就够了，在 Loki 套件中，Promtail 就是用来 发现目标、重新标记、采集日志、推送日志 的。
在服务发现页面里，也有 Discovered Labels 和 Target Labels 这两个
只不过 Journal 这个目标发现程序命名发现了很多标签，但是却显示不出来，这个比较奇怪</description></item><item><title>Promtail 配置</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Logs/Loki/Promtail/Promtail-%E9%85%8D%E7%BD%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Logs/Loki/Promtail/Promtail-%E9%85%8D%E7%BD%AE/</guid><description>概述 参考：
Loki 官方文档，发送数据 - Promtail - 配置 GitHub 官方文档 promtail.yaml 配置文件详解 Promtail 在 YAML 文件（通常称为 config.yaml）中进行配置，该文件包含 Promtail 运行时信息，抓取到的日志存储位置，以及抓取日志的行为
顶级字段
global(global) # 影响所有目标的全局设置。 server(server) # 配置 promtail 程序运行时行为。如指定监听的ip、port等信息。 clients(clients) # 配置 Promtail 如何连接到 Loki 的多个实例，并向每个实例发送日志。 Note：如果其中一台远程Loki服务器无法响应或发生任何可重试的错误，这将影响将日志发送到任何其他已配置的远程Loki服务器。 发送是在单个线程上完成的！ 如果要发送到多个远程Loki实例，通常建议并行运行多个Promtail客户端。 positions(positions) # positions 文件用于记录 Promtail 发现的目标。该字段用于定义如何保存 postitions.yaml 文件。 Promtail 发现的目标就是指日志文件。 scrape_configs(scrape_configs) # 配置 Promtail 如何发现日志文件，以及如何从这些日志文件抓取日志。 limits_config(limits_config) # 为 Promtail 配置全局的限制功能 target_config(target_config) # Configures how tailed targets will be watched. options(options_config) # Configures additional promtail configurations tracing(tracing_config) # Configures tracing support server clients positions positions 文件用于记录 Promtail 发现的目标。该字段用于定义如何保存 postitions.</description></item><item><title>Promtail 部署</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Logs/Loki/Promtail/Promtail-%E9%83%A8%E7%BD%B2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Logs/Loki/Promtail/Promtail-%E9%83%A8%E7%BD%B2/</guid><description>使用 docker 运行 Promtail 注意：使用 docker 运行 promtail 的时候，需要注意日志挂载路径及 scrape_configs 配置，因为在容器中运行，所以抓取路径是在容器中，而不是宿主机上，注意这点，否则会抓不到任何日志。
为了解决上面的问题，并且不影响容器内 /var/log 目录，所以启动时指定 -v /var/log:/var/log/host:ro 参数，并修改默认配置文件中 path: 的值为 /var/log/host/*
docker run -d --rm --name promtail \ --network host \ -v /opt/logging/config/promtail:/etc/promtail \ -v /var/log:/var/log/host:ro \ -v /etc/localtime:/etc/localtime:ro \ grafana/promtail</description></item></channel></rss>