<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Traces on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Traces/</link><description>Recent content in Traces on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Traces/index.xml" rel="self" type="application/rss+xml"/><item><title>Tempo</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Traces/Tempo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Traces/Tempo/</guid><description>概述 参考：
原文链接：https://cloud.tencent.com/developr/article/1759966 Tempo是 Grafana Labs 在ObservabilityCON 2020大会上新开源的一个用于做分布式式追踪的后端服务。它和 Cortex、Loki 一样，Tempo 也是一个兼备高扩展和低成本效应的系统。
之前小白有提到 Grafana Labs 的云原生 Observability 宇宙只剩下 trace 部分，那么今天就拿 Loki 的分布式追踪来体验下这 Observability 的最后一环吧。正式开始前，先看下小白精心准备的 Tempo 体验视频吧。
关于 Tempo Tempo 本质上来说还是一个存储系统，它兼容一些开源的 trace 协议（包含 Jaeger、Zipkin 和 OpenCensus 等），将他们存在廉价的 S3 存储中，并利用 TraceID 与其他监控系统（比如 Loki、Prometheus）进行协同工作。
可以看到 Tempo 的架构仍然分为distributor、ingester、querier、tempo-query、compactor这几个架构，熟悉 Loki 和 Cortex 的朋友可能光看名字就知道他们大概是做什么的。不熟悉的同学也没关系，下面简单说下各模块的作用：
distributor 监听多个端口，分别接受来自 Jaeger、Zipkin 和 OpenCensus 协议的数据，按照 TraceID 进行哈希并映射到哈希环上，并交由 ingester 进行存储处理。当前 distributor 支持的 trace 协议如下：
Protocol Port OpenTelemetry 55680 Jaeger - Thrift Compact 6831 Jaeger - Thrift Binary 6832 Jaeger - Thrift HTTP 14268 Jaeger - GRPC 14250 Zipkin 9411 ingester 具体负责 trace 数据的块存储（memcache、GCS、S3）、缓存（Memcache）和索引的处理</description></item><item><title>动态追踪</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Traces/%E5%8A%A8%E6%80%81%E8%BF%BD%E8%B8%AA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Traces/%E5%8A%A8%E6%80%81%E8%BF%BD%E8%B8%AA/</guid><description>概述 参考：
Wiki, Tacking https://zhuanlan.zhihu.com/p/24124082 Dynamic Tracing(动态追踪)
DTrace DTrace 是动态追踪技术的鼻祖，源自 Solaris 操作系统</description></item><item><title>追踪系统</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Traces/%E8%BF%BD%E8%B8%AA%E7%B3%BB%E7%BB%9F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Traces/%E8%BF%BD%E8%B8%AA%E7%B3%BB%E7%BB%9F/</guid><description>概述 参考：
Jaeger
Tempo
Skywalking
Zipkin
链路追踪需要在程序码中嵌入追踪库？那如何配置程序自己的调用栈数据推送到哪里，推送间隔，推送量之类的信息？
Application Performance Management(简称 APM) 是链路追踪程序可以实现的一种能力。
产品对比 分布式跟踪系统——产品对比
产品名称 厂商 开源 OpenTracing标准 侵入性 应用策略 时效性 决策支持 可视化 低消耗 延展性 Jaeger uber 开源 完全支持 部分侵入 策略灵活 时效性高， UDP协议传输数据(在Uber任意给定的一个Jaeger安装可以很容易地每天处理几十亿spans) 决策支持较好，并且底层支持metrics指标 报表不丰富，UI比较简单 消耗低 jaeger比较复杂，使用框架较多，比如：rpc框架采用thrift协议，不支持pb协议之类。后端存储比较复杂。但经过uber大规模使用，延展性好 zipkin twitter 开源 部分支持 侵入性强 策略灵活 时效性好 决策一般(功能单一，监控维度和监控信息不够丰富。没有告警功能) 丰富的数据报表 系统开销小 延展性好 CAT 大众点评 吴其敏 开源 - 侵入性强 策略灵活 时效性较好，rpc框架采用tcp传输数据 决策好 报表丰富，满足各种需求 消耗较低 ， 国内很多大厂都在使用 - Appdash sourcegraph 开源 完全支持 侵入性较弱 采样率支持(粒度：不能根据流量采样，只能依赖于请求数量)；没有trace开关 时效性高 决策支持低 可视化太弱，无报表分析 消耗方面。不支持大规模部署, 因为appdash主要依赖于memory，虽然可以持久化到磁盘，以及内存存储支持hash存储、带有效期的map存储、以及不加限制的内存存储，前者存储量过小、后者单机内存存储无法满足 延展性差 MTrace 美团 不开源 - - - - CallGraph 京东 不开源 - Watchman sina微博 不开源 - EagleEye 淘宝 不开源 - skywalking 华为 吴晟 开源 完全支持 侵入性很低 策略灵活 时效性较好 由于调用链路的更细化， 但是作者在性能和追踪细粒度之间保持了比较好的平衡。决策好 丰富的数据报表 消耗较低 延展性非常好，水平理论上无限扩展</description></item></channel></rss>