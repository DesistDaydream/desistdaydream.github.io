<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Grafana on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Grafana/</link><description>Recent content in Grafana on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Grafana/index.xml" rel="self" type="application/rss+xml"/><item><title>Grafana</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Grafana/Grafana/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Grafana/Grafana/</guid><description>概述 参考：
官网 GitHub 项目，grafana/grafana Grafana 是开源的可视化和分析软件。它使我们可以查询，可视化，警报和浏览指标，无论它们存储在哪里。它为您提供了将 时间序列数据 转换为精美的图形和可视化效果的工具。
Grafana 部署 参考：
官方文档，安装 - 安装 Grafana docker 方式运行 grafana 获取配置文件
mkdir -p /opt/monitoring/server/config/grafana mkdir -p /opt/monitoring/server/data/grafana chown -R 472 /opt/monitoring/server/data/grafana docker run -d --name grafana --rm grafana/grafana docker cp grafana:/etc/grafana /opt/monitoring/server/config docker stop grafana 运行 Grafana
docker run -d --name grafana \ --network host \ -v /opt/monitoring/server/config/grafana:/etc/grafana \ -v /opt/monitoring/server/data/grafana:/var/lib/grafana \ -v /etc/localtime:/etc/localtime \ grafana/grafana Grafana 关联文件与配置 /etc/grafana/ # Grafana 配置文件保存路径</description></item><item><title>Grafana Alerting</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Grafana/Grafana-Alerting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Grafana/Grafana-Alerting/</guid><description>概述 参考：
官方文档，告警 Alert rules(警报规则) # 确定是否触发警报的规则。e.g. 评估规则的周期（i.e. 多久检查一次告警是否应该触发）、etc.
Notification policies(通知策略) # 确定警报如何路由到联络点。e.g. 根据什么条件分组、发送前等待多久、相同警报重新发送的时间间隔、etc.
Contack points(联络点) # 当警报实例触发时如何通知联系人。e.g. 设置通过企业微信，使用 XXX 模板渲染消息，并发送给联系人。联系人是真实世界的实体，联络点是通知方式的抽象。
Alert rules 一个完整的 Alert rules 由三部分组成
Query(查询语句) Condition Expressions(条件表达式) # 可选。简称 Expressions Evaluation behavior(评估行为) # 评估行为 与 Prometheus 中的 Alerting 的评估行为类似（有一点不同是：Prom 的评估是决定是否将警报发送出去，但 Grafana 内部集成了类似 Alertmanager 的逻辑，所以评估是决定是否将警报交给 Notifications 组件） Grafana 会评估 Expressions 的处理结果（对 Query 查询结果的处理结果），满足条件的将会交给 Notifications 组件。
Evaluation behavior https://grafana.com/docs/grafana/latest/alerting/fundamentals/alert-rule-evaluation/
为 Alert rules 定义 Evaluation behavior(评估行为)，评估成功后，会改变警报的状态，并将某些状态的警报交给 Notification policies(通知策略) 以便对警报进行后续处理。
等待多久、间隔多久、查询出错或查询没数据时怎么办、etc. 都属于评估行为。包括如下几个部分</description></item><item><title>Grafana MGMT</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Grafana/Grafana-MGMT/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Grafana/Grafana-MGMT/</guid><description>概述 参考：
官方文档，管理 Grafana 密码重置 参考：
官方文档，管理 - CLI - 重置 admin 密码 SQLite3 重置 首先需要安装 sqlite3 命令行工具，然后通过 sqlite3 /PATH/TO/grafana.db 命令进入 Grafana 数据库
通过 select login, password, salt from user where login = 'admin'; 语句可以查询到 admin 的当前密码信息
使用下面的 SQL，可以更新 admin 用户的密码为 admin：
sqlite&amp;gt; update user set password = &amp;#39;59acf18b94d7eb0694c61e60ce44c110c7a683ac6a8f09580d626f90f4a242000746579358d77dd9e570e83fa24faa88a8a6&amp;#39;, salt = &amp;#39;F3FAxVm33R&amp;#39; where login = &amp;#39;admin&amp;#39;; API 修改密码 前提是没有忘记密码
curl -X PUT -H &amp;#34;Content-Type: application/json&amp;#34; -d &amp;#39;{ &amp;#34;oldPassword&amp;#34;: &amp;#34;旧密码&amp;#34;, &amp;#34;newPassword&amp;#34;: &amp;#34;新密码&amp;#34;, &amp;#34;confirmNew&amp;#34;: &amp;#34;新密码&amp;#34; }&amp;#39; http://账号:旧密码@IP:PORT/api/user/password grafana-cli 密码重置 grafana-cli admin reset-admin-password 新密码 常用 Dashboard 推荐 Kubernetes</description></item><item><title>Plugins</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Grafana/Plugins/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Grafana/Plugins/</guid><description>概述 参考：
Plugins(插件)
Clickhouse 参考：
GitHub 项目，grafana/clickhouse-datasource https://grafana.com/grafana/plugins/grafana-clickhouse-datasource/ ClickHouse 插件
Macros https://github.com/grafana/clickhouse-datasource?tab=readme-ov-file#macros
Grafana 的 ClickHouse 插件会改变一些 Grafana 中某些变量、函数的用法；还有一些新增加的 Macros 功能可以使用
$__timeFilter(COLUMN_NAME) #
Macro Description 渲染结果示例 $__dateFilter(ColumnName) Replaced by a conditional that filters the data (using the provided column) based on the date range of the panel date &amp;gt;= toDate('2022-10-21') AND date &amp;lt;= toDate('2022-10-23') $__timeFilter(ColumnName) 利用 toDateTime() 函数转换 Grafana 面板时间范围选择器选择时间范围的值 time &amp;gt;= toDateTime(1415792726) AND time &amp;lt;= toDateTime(1447328726) etc.</description></item><item><title>访问控制</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Grafana/%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Grafana/%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/</guid><description>概述 参考：
官方文档，安装 - 配置安全性 - 配置身份验证 Grafana 以 Organizations(组织) 为最大分类
组织可以包含 Teams，Teams 又可以包含 Users。
当我们正常登录或者匿名访问时，首先进到组织中，不同的组织，可以看到的面板、数据源等等配置都是不一样的。</description></item><item><title>Grafana数据模型</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Grafana/Grafana-%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Grafana/Grafana-%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B/</guid><description>概述 参考：
官方文档，开发者-构建插件-数据框架 Data Frames(数据框架) Grafana 支持各种不同的数据源，每个数据源都有自己的数据模型。为了实现这一点，Grafana 将来自每个数据源的查询结果合并为一个统一的数据结构，称为 Data Frames(数据框架)。 数据框架结构是从 R 编程语言和 Pandas 等数据分析工具中借用的概念。
数据帧在 Grafana 7.0+中可用，并且用更通用的数据结构代替了时间序列和表结构，该数据结构可以支持更大范围的数据类型。
本文档概述了数据框架结构以及如何在 Grafana 中处理数据。
数据框 数据框是面向列的表结构，这意味着它按列而不是按行存储数据。要了解这意味着什么，让我们看一下 Grafana 使用的 TypeScript 定义：
interface DataFrame { name?: string; // reference to query that create the frame refId?: string; fields: []Field; } 本质上，数据框是 Fields(字段)_ _的集合，其中每个字段对应于一列。每个字段又由值的集合以及元信息（例如这些值的数据类型）组成。
interface Field { name: string; // Prometheus like Labels / Tags labels?: Record&amp;lt;string, string&amp;gt;; // For example string, number, time (or more specific primitives in the backend) type: FieldType; // Array of values all of the same type values: Vector&amp;lt;T&amp;gt;; // Optional display data for the field (e.</description></item></channel></rss>