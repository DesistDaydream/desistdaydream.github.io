<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Grafana Configuration on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Grafana/Grafana-Configuration/</link><description>Recent content in Grafana Configuration on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Grafana/Grafana-Configuration/index.xml" rel="self" type="application/rss+xml"/><item><title>Grafana Configuration</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Grafana/Grafana-Configuration/Grafana-Configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Grafana/Grafana-Configuration/Grafana-Configuration/</guid><description>概述 参考：
官方文档，Setup - 配置 Grafana Grafna 可以通过 INI 格式的配置文件、命令行标志、环境变量来配置运行时行为。
环境变量 与 配置文件 中的配置具有一一对应的关系。环境变量可以覆盖配置文件中的配置(即.环境变量的优先级更高，如果有相通配置，以环境变量的配置为主)。
环境变量格式：GF_&amp;lt;SectionName&amp;gt;_&amp;lt;KeyName&amp;gt;
SectionName 对应配置文件中 [ ] 中的内容 KeyName 对应配置文件中的关键字。 配置文件中的 . 和 - 两个符号，到环境变量中则变为 _ 符号。环境变量的文本全是大写的 假如现在的配置文件内容如下：
# default section instance_name = ${HOSTNAME} [security] admin_user = admin [auth.google] client_secret = 0ldS3cretKey [plugin.grafana-image-renderer] rendering_ignore_https_errors = true 对应环境变量，则是：
GF_DEFAULT_INSTANCE_NAME=my-instance GF_SECURITY_ADMIN_USER=owner GF_AUTH_GOOGLE_CLIENT_SECRET=newS3cretKey GF_PLUGIN_GRAFANA_IMAGE_RENDERER_RENDERING_IGNORE_HTTPS_ERRORS=true 可以看到，Grafana 的配置具有层次感，配置文件中 [ ] 表示一套配置环境，配置环境下方，有具体的配置关键字。
备注 Grafana 容器镜像会默认配置一些环境变量，以指定一些基本的配置路径。此处是官方对镜像的解释
grafana.ini 配置文件详解 Grafana 的配置文件开头 ; 表示注释
paths data = &amp;lt;STRING&amp;gt; # Grafana 数据存储路径。默认值：/var/lib/grafana/data</description></item><item><title>Provisioning 配置</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Grafana/Grafana-Configuration/Provisioning-%E9%85%8D%E7%BD%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Grafana/Grafana-Configuration/Provisioning-%E9%85%8D%E7%BD%AE/</guid><description>概述 参考：
官方文档，管理 - Provisioning Grafana 在一开始，只能通过 Web 页面(也就是 API)来配置 DataSources(数据源) 和 Dashboard(仪表盘)。这样做有一个缺点，就是无法提前加载数据源和仪表盘。
比如现在有这么一种场景：我想新搭建一个 Grafana，并且包含一些数据源和仪表盘，正常情况是启动服务后，在 Web 页面导入和创建。
此时就会有个问题：如果数据源和仪表盘有几十个，逐一导入和创建势必会消耗大量人力，也无法实现自动话。
所以：有没有一种办法，可以在启动 Grafana 之前，就能直接加载这些数据呢？
Grafana 从 v5.0 版本中，决定通过一个 Provisioning(配置供应系统) 来解决上述问题。这个系统可以通过一系列的配置文件，让 Grafana 启动时加载他们，可以瞬间让启动好的 Grafana 就具有一定数量的数据源和仪表盘。这种行为使得 GitOps 更自然。这种思路除了可以用在数据源和仪表盘上以外，还可以扩展，比如提前配好用户信息、告警信息等等。
Grafana 的 Provisioning(配置供应系统) 可以提供如下能力，每种能力使用一个目录
Notes: 可以通过 grafana.ini 的 .paths.provisioning 字段修改 ${ProvisioningDir} 的值
能力 目录 用途 Data sources(数据源) ${ProvisioningDir}/dashboards/ 预配置 Grafana 数据源 Plugins(插件) ${ProvisioningDir}/plugins/ 预配置 Plugins Dashboards(仪表盘) ${ProvisioningDir}/dashboards/ 预配置 Panel 与 Dashboard Alerting(警报) ${ProvisioningDir}/alerting/ 预配置 Grafana Alerting 默认情况下，Grafana 从 /etc/grafana/provisioning/ 目录下读取要预加载的各种内容</description></item></channel></rss>