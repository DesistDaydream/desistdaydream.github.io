<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦的站点 – Observability(可观测性)</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Observability%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/</link><description>Recent content in Observability(可观测性) on 断念梦的站点</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Observability%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Exemplars</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Observability%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Exemplars/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Observability%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Exemplars/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考；&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://prometheus.io/docs/prometheus/latest/feature_flags/#exemplars-storage">https://prometheus.io/docs/prometheus/latest/feature_flags/#exemplars-storage&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/grafana/latest/basics/exemplars/">https://grafana.com/docs/grafana/latest/basics/exemplars/&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>这是啥？~CNCF 可观测性白皮书最后提到了这个&lt;/p>
&lt;h3 id="trace-id-实际应用">Trace ID 实际应用&lt;a class="td-heading-self-link" href="#trace-id-%e5%ae%9e%e9%99%85%e5%ba%94%e7%94%a8" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>我们讨论了在多个信号之间相互跳转的方法，但是它真的是有用的吗？让我们简单的看两个基本案例:&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/vx3gmg/1656494100400-266391e7-2b19-4845-a69a-2112f8128bbc.jpeg" alt="">&lt;/p>
&lt;ul>
&lt;li>我们收到了一个关于超出 SLO (service level objectives) 的意外高错误率的告警。告警来源于错误的计数器值，我们看到请求暴增导致 501 errors。我们使用_exemplar_ 跳转到事例的 logs 以了解准确的可供人类阅读的错误消息中。错误似乎来自于依赖深层次的内部微服务系统，由于存在与 trace ID 匹配的 request ID，所以可以跳转到 traces。多亏了这一点，我们确切的了解到哪个 service/process 导致了这个问题，并进一步挖掘更多的信息。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/vx3gmg/1656494100616-81e6c43f-e5c1-46c5-af8c-788ff1bc5f37.jpeg" alt="">&lt;/p>
&lt;ul>
&lt;li>我们去 debug 慢请求，我们使用 trace 采样手动触发请求并获得 trace ID。多亏了 tracing view，我们可以在请求方式的几个进程中看到，对于基本操作而说，ABC-1 请求的速度非常的慢。由于目标元数据和时间，我们选择了相关的 CPU 使用率 metrics。我们看到 CPU 使用率很高，接近了机器的限制值，表明 CPU 已经饱和。为了了解 CPU 使用率高的原因 (特别是当它是容器中仅存的进程)，我们使用相同的 目标元数据 和 time 选择跳转到 CPU profile。&lt;/li>
&lt;/ul>
&lt;p>总结一下，好像是通过一个 ID 可以在 Metrics、Log、Trace 数据之间相互跳转。即一个 ID 关联了一个或多个应用所有的可观测性数据&lt;/p></description></item><item><title>Docs: Observability(可观测性)</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Observability%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Observability%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Observability%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Observability%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/2xt1kHqJ2Sj2c4u08d1ejA">CNCF 可观测性白皮书&lt;/a>(中文)&lt;/li>
&lt;li>&lt;a href="https://landscape.cncf.io/">CNCF 全景图&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Observability#Observability_in_software_systems">Wiki，Observability&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://jimmysong.io/docs/opentelemetry-obervability/">宋净超-云原生资料库-OpenTelemetry 可观测性的未来&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/bO82iVKO0O8PTiYSHS-gag">公众号，云原生技术爱好者社区-什么是可观测性&lt;/a>(是对&lt;a href="https://www.cncf.io/blog/2021/03/02/what-was-observability-again/"> CNCF 中的一篇 Blog &lt;/a>的翻译)&lt;/li>
&lt;li>&lt;a href="https://cloud.google.com/architecture/integrating-monitoring-logging-trace-observability-and-alerting">Goole 文章&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/tlmJawfJTAItIpjLuG34wg">公众号，云原生社区-构建适合组织的云原生可观测性能力&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>想象一下，在没有财务预测的情况下经营企业，甚至不知道银行剩下多少钱。您怎么知道您是在巨大的现金缓冲中游泳还是由于资金不足而需要跳过客户午餐？如果不注意自己的财务状况，根本就不可能开展健康的业务。同样，如果不观察您的计算基础架构，就不可能保持应用程序运行正常。&lt;/p>
&lt;p>事实上，&lt;strong>Observability(可观测性)&lt;/strong> 非常重要，到 2021 年 2 月，云原生计算基金会(CNCF)列出了 102 个可观察性项目。可观测性不仅重要，而且昂贵。Netflix 被戏称为&lt;code>一个产生大量日志的平台，同时也是一个流视频平台&lt;/code>。可观测性之所以昂贵，有两个原因:&lt;/p>
&lt;ul>
&lt;li>可观测性比被观测系统至少可靠一个数量级。否则，你将继续调试你的可观察性堆栈，而不是使用它来保持你的应用程序运行。&lt;/li>
&lt;li>因为你永远不知道要观察什么，直到事件发生后，观察多于需要的东西是很常见的。一个好的汽车司机不仅要向前看，而且还要不断扫视周围以避免事故。&lt;/li>
&lt;/ul>
&lt;h1 id="什么是可观测性">什么是可观测性&lt;a class="td-heading-self-link" href="#%e4%bb%80%e4%b9%88%e6%98%af%e5%8f%af%e8%a7%82%e6%b5%8b%e6%80%a7" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>可观测性有许多名称，如监测、审计、遥测、仪器。忽略这些细微差别，所有这些词本质上的意思都是一样的:度量您的基础设施、平台和应用程序，以了解它是如何运行的。正如彼得·德鲁克(Peter Drucker)曾经说过的：&lt;strong>如果你无法量化它，你就无法管理它&lt;/strong>。&lt;/p>
&lt;p>如果你熟悉精益思维——即构建-度量-学习——那么可观察性就会自然而然地出现在你身上。可观测性通过测量阶段闭合反馈回路。它允许您的团队对应用程序进行快速更改，快速适应其用户基础和环境，而不会产生不必要的意外。良好的可观测性可以将凌晨 2 点被唤醒转换为日常检查。&lt;/p>
&lt;h1 id="真正的可观测性">真正的可观测性&lt;a class="td-heading-self-link" href="#%e7%9c%9f%e6%ad%a3%e7%9a%84%e5%8f%af%e8%a7%82%e6%b5%8b%e6%80%a7" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>具有可观测的系统通常具有三个部分&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Metrics(指标)监控&lt;/strong> # 随着时间推移产生的一些与监控相关的可聚合数据点&lt;/li>
&lt;li>&lt;strong>Logging(日志)监控&lt;/strong> # 离散式的日志或事件&lt;/li>
&lt;li>&lt;strong>Tracing(链路追踪)&lt;/strong> # 追踪程序的函数&lt;/li>
&lt;/ul>
&lt;p>CNCF 将 可观测性 和 数据分析 归类为一个单独的类别，且划分成 4 个子类&lt;/p>
&lt;ul>
&lt;li>&lt;strong>监控系统&lt;/strong> # 以 Prometheus 等为代表&lt;/li>
&lt;li>&lt;strong>日志系统&lt;/strong> # 以 Elastic Stack 和 PLG Stack 等为代表&lt;/li>
&lt;li>&lt;strong>追踪系统&lt;/strong> # 以 Jaeger、Zipkiin、SkyWalking、Pinpoint 等为代表
&lt;ul>
&lt;li>可以监控两个程序之间调用时，程序内部都调用了哪些函数。类似 Linux 的 Strace 命令，只不过这些监控是实时的。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>混沌工程系统&lt;/strong> # 以 ChaosMonkey 和 ChaosBlade 等为代表&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/boagu2/1619514000151-2c052586-b3d7-4c75-8683-bfcc40d9e7cf.png" alt="image.png">&lt;/p>
&lt;h2 id="metrics指标">Metrics(指标)&lt;a class="td-heading-self-link" href="#metrics%e6%8c%87%e6%a0%87" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>指标——也称为服务水平指标(SLI)或关键性能指标(KPI)——是数字值的时间序列。可以把它想象成每小时记录所有大城市的室外温度。指标使用最少的空间，提供最多的洞察力(为它们使用的空间)。它们可以记录每小时活动用户的数量、应用程序收到的请求的数量、可用磁盘空间的数量等。关注指标可以确保您的用户在使用应用程序时获得良好的体验，同时还可以降低基础设施的成本。&lt;/p>
&lt;p>度量标准是相当明确的。您的团队需要添加用于收集和公开给定度量的代码。然而，市面上最常用的工具，如 Nginx、Kubernetes 或 MySQL，已经输出了大量的指标，这些指标应该可以为您提供良好的态势感知。&lt;/p>
&lt;p>像 Prometheus 这样的项目可以帮助您以应用程序所需的最少支持来收集度量，而 Grafana 可以帮助可视化度量。事实上，我认为布满 Grafana 仪表盘的屏幕可以很好地装饰办公室的墙壁。这样你很清楚，上班的时候有什么事情可以处理。&lt;/p>
&lt;p>到目前为止，我们讨论了可视化，也就是一种更有意为之的可观测性。但是，如果这个系统现在需要关注呢?&lt;/p>
&lt;h2 id="logging日志">Logging(日志)&lt;a class="td-heading-self-link" href="#logging%e6%97%a5%e5%bf%97" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>在编写应用程序时，您的团队通常会添加&lt;code>日志&lt;/code>代码。当代码执行经过一个主要事件时，这些显式的指令将产生一个日志行，即一堆有意义的文本。例如，&lt;code>用户X已登录&lt;/code>或&lt;code>用户Y身份验证失败&lt;/code>，等等。这几行是问你的客户他们&lt;code>是否尝试清理浏览器缓存&lt;/code>并重新加载或实际监控他们之间的区别。日志记录是非常明确的:您的团队需要添加日志记录代码，并且需要预见要记录什么。经验法则是，所有主要的边界事件都需要被记录。有些应用程序错误只在生产环境中出现，所以您应该选择&lt;code>日志过多&lt;/code>而不是&lt;code>日志不足&lt;/code>。否则，大量时间就会浪费在寻找所谓的&lt;code>海森堡bug&lt;/code>(heisenbug)上:这种 bug 很难复现，但却会引起用户的不满。日志记录会产生大量的数据。为了节省成本，最好考虑短期和长期日志。短期日志-例如，最近 7 天-应该是&lt;code>可搜索的&lt;/code>，也就是说，你应该能够在几秒钟内执行全文搜索。像 Elasticsearch/Kibana 和 Loki 这样的项目最适合这个目的。长期日志可以以最便宜的形式存储，通常是对象存储。它们不能立即&lt;code>搜索&lt;/code>，因此，需要通过它们进行搜索的可能性也很小。事实上，如果您希望在隐私方面犯错，最好避免长期日志。&lt;/p>
&lt;p>有时，您并不关心确切的日志行，而是关心特定事件发生的次数。这些信息可以从日志中提取，但是有一种更有效的方法:指标。&lt;/p>
&lt;h2 id="tracing追踪">Tracing(追踪)&lt;a class="td-heading-self-link" href="#tracing%e8%bf%bd%e8%b8%aa" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="最后">最后&lt;a class="td-heading-self-link" href="#%e6%9c%80%e5%90%8e" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="告警">告警&lt;a class="td-heading-self-link" href="#%e5%91%8a%e8%ad%a6" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>警报就像系统&lt;code>呼救&lt;/code>，请求人类的注意。通常，如果给定的指标超过了阈值，随叫随到的人员就会收到 Slack 或微软团队中的电子邮件、短信或消息。可以实现自动升级，例如，如果第一个随叫人在 30 分钟内没有响应警报，第二个随叫人就会得到警报。警报是棘手的。警报太多，系统就会变成&lt;code>狼来了&lt;/code>，你的团队将以&lt;code>警惕疲劳&lt;/code>结束，并开始忽视甚至是重要的问题。提醒太少，你的客户就会为你&lt;code>做提醒&lt;/code>……这通常不是首选的提醒渠道，至少你的会计会抱怨必须兑现太多的发票。因此，&lt;code>何时发出警报&lt;/code>的门槛应该很高。这是&lt;code>凌晨2点&lt;/code>或&lt;code>求救&lt;/code>事件吗?也就是说，如果发生这种情况，应该叫醒某人吗?或者这是一个&lt;code>泛泛&lt;/code>的事件，可以在白天处理?&lt;/p>
&lt;p>幸运的是，像 Prometheus 这样的项目不仅能发出警报，还能进行预测。知道磁盘将在 72 小时内被填满，可以防止客户因停机而失望，也可以防止破坏团队成员的良好睡眠。&lt;/p>
&lt;h1 id="总结">总结&lt;a class="td-heading-self-link" href="#%e6%80%bb%e7%bb%93" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>缺乏可观测性就像闭着眼睛开车:你不知道离灾难有多近。你开得越快，路越忙，你就越要小心。&lt;/p>
&lt;p>可观测性也是一样:你越想让你的团队越快地添加功能，你就越应该在可观测性上投资。而且，虽然在可观测性上节省一些钱可能很诱人，但这些节省将在下一次缓慢修复事件中迅速消失。&lt;/p>
&lt;h1 id="sla">SLA&lt;a class="td-heading-self-link" href="#sla" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Service-level_agreement">Wiki，SLA&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Service level agreement(服务等级协议，简称 SLA)&lt;/strong> 是&lt;/p></description></item><item><title>Docs: 可观测性之数据模型</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Observability%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Observability%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/K11XBQlPJIxFGmsC39_lNQ">原文：公众号-k8s 技术圈，聊聊可观测性之数据模型&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>在 201x 年，随着容器技术的出现，容器的部署方式逐渐被各大互联网公司采用，相比物理机 / 虚拟机，容器的好处是环境隔离、轻量、快速。&lt;/p>
&lt;p>但是管理容器是一件复杂的事情，后来出现了 Kubernetes，成为了事实上的容器管理标准，目前各大公司都在使用 Kubernetes。&lt;/p>
&lt;p>因为容器和 Kubernetes 降低了服务（应用）的部署和升级成本，所以催生了「微服务」的概念，服务从「单体复杂服务」向「多个简单服务」演变，在之前，需要着重考虑服务内的架构设计，单个服务对外提供尽可能多的能力，而在微服务中，会直接把单个服务拆分成多个服务，服务之间用 API 调用。&lt;/p>
&lt;p>这里也可以看到，在微服务中，架构设计的重要性降低，API 设计的重要性提高。&lt;/p>
&lt;p>另外，拆分出微服务后，编程的难度事实上降低了，对编程人员的要求也降低了。&lt;/p>
&lt;p>这说明一个事实，随着基础设施的不断发展，会有越来越多的「编程能力」沉淀成基础设施，使编程的难度不断降低：软件开发不断向简单的方式发展。&lt;/p>
&lt;p>但是，随着微服务的发展，服务变得太多了，管理负责度又上升了，比如怎么去解决服务发现的问题、怎么控制流量、服务之间怎么做隔离，服务状态怎么观测等等。这时候又出现了「服务治理」的概念，关于服务治理，有一个新的词：Service Mesh，现在事实标准是 Istio。&lt;/p>
&lt;h2 id="概述-1">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0-1" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>可观测性是为了应对微服务的复杂场景下发明出来的一个词，本质上是为了衡量系统运行的状态，可观测性是服务治理的一个维度，和功能性、可测试性、可运维性一样。&lt;/p>
&lt;p>一般常说可观测性包含三个度量角度：Metric、Logging、Tracing，其实还有一个：Profiling。&lt;/p>
&lt;ul>
&lt;li>Metric：指标，对系统中某一类信息的聚合统计，比如 QPS、延迟、错误率等。&lt;/li>
&lt;li>Logging：日志，对系统所做行为的一种记录，它是离散的，没有相关性，为了区分这种记录的重要程度，会分级别（DEBUG、INFO、WARN、ERROR、FATAL）。&lt;/li>
&lt;li>Tracing：调用链，它反映的是请求经过某个组件的运行情况，经过组件的数据叫做 Span，Span 可以体现经过组件的状态、一些关键属性和事件、上下文信息。Span 之间通过 Trace ID 关联。&lt;/li>
&lt;li>Profiling：一般叫做 Continuous Profiling，持续分析，它反映的是程序内部的运行状态，比如栈调用、执行时间等。可以把 Profiling 可视化成火焰图方面分析问题。&lt;/li>
&lt;/ul>
&lt;p>一般来说，基于这些度量处理故障的流程是：&lt;code>Metric → Tracing → Logging → Profiling&lt;/code>&lt;/p>
&lt;p>根据 Metric 配置的告警策略发现问题，基于 Tracing 查看是哪个组件出问题，基于 Logging 查看组件的日志，Profiling 分析组件具体的故障或性能问题。&lt;/p>
&lt;h2 id="数据模型">数据模型&lt;a class="td-heading-self-link" href="#%e6%95%b0%e6%8d%ae%e6%a8%a1%e5%9e%8b" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>在 Tracing 领域，之前有两个项目，一个是 &lt;code>OpenTracing&lt;/code>，它是一个规范，&lt;code>Jaeger&lt;/code> 就是基于 &lt;code>OpenTracing&lt;/code> 的开源实现，另一个是 &lt;code>OpenCensus&lt;/code>，它是 Google 开源的度量工具。这两个项目功能高度重合，在 CNCF 主导下合并成了 &lt;code>OpenTelemetry&lt;/code>，而 OpenTracing 和 OpenCensus 也不再维护。&lt;/p>
&lt;p>当然 OpenTelemetry 不止做 Tracing，还覆盖 Metric 和 Logging，&lt;strong>它的目标是统一可观测性的标准协议，包括数据模型、API 规范、多语言 SDK、采集器。&lt;/strong>&lt;/p>
&lt;p>OpenTelemetry 只做统一的协议和规范，具体数据的后端存储和展示不是它的范围。协议和规范是可观测性对外暴露的**「接口」**，它的统一对于使用方来说是巨大的好处，目前来看，OpenTelemetry 未来会成为事实标准。&lt;/p>
&lt;p>为了对接不同的后端实现，OpenTelemetry 提供了各种 Exporter，比如为对接 Prometheus 提供了 Prometheus Exporter，对接 Cortex 和 Thanos 提供了 Prometheus Remote Write Exporter，对接 Loki 提供了 Loki Exporter，对接 Jaeger 提供了 Jaeger gRPC Exporter。&lt;/p>
&lt;p>不过，目前 OpenTelemetry 还不成熟，本文的数据模型基于我们事实上使用的后端实现来讨论（技术选型后面的文章再聊）。&lt;/p>
&lt;ol>
&lt;li>Metric 我们使用分布式 Prometheus 方案 Cortex，数据模型和 Prometheus 一致&lt;/li>
&lt;li>Logging 我们使用 Loki&lt;/li>
&lt;li>Tracing 我们使用 Grafana Tempo，Tempo 本身兼容 Zipkin、Jaeger、OpenTelemetry 等协议，所以 Tracing 直接采用 OpenTelemetry 的数据模型&lt;/li>
&lt;li>Profiling 的后端实现基本可以复用 Loki，数据模型也和 Logging 类似&lt;/li>
&lt;/ol>
&lt;p>先看 Metric，它的数据模型：&lt;strong>LabelSet + Timestamp + Number&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;code>LabelSet&lt;/code> 就是 Series，是若干个 label name / value 组合，指标名称也是一个 label name / value。&lt;/li>
&lt;li>&lt;code>Timestamp&lt;/code> 是时间戳，精度是毫米。&lt;/li>
&lt;li>&lt;code>Number&lt;/code> 是数值，类型是 float64。&lt;/li>
&lt;/ul>
&lt;p>下面是一个 Metric 例子：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/0f47acfd-8e84-458c-8ae5-3df4c7914280/640" alt="">&lt;/p>
&lt;p>另外，Prometheus 内置几种 Metric 类型，包括 Counter、Gauge、Histogram、Summary，Counter 是自增的，Gauge 可增可减，Histogram 是直方图，Summary 是摘要，Histogram 和 Summary 区别是 Histogram 需要通过 _bucket 来计算 P 值，而 Summary 在客户端直接计算好 P 值，直接存储即可。&lt;/p>
&lt;p>另外，Prometheus 还有很多内置函数，来做 Metric 的聚合，这里不再赘述。&lt;/p>
&lt;p>再看 Logging，数据模型：&lt;strong>LabelSet + Timestamp + String&lt;/strong>&lt;/p>
&lt;p>和 Metric 类似，只是 Number 换成了 String，Timestamp 精度是纳秒。&lt;/p>
&lt;p>在 Loki 中，使用 Logql 语法查询日志（和 Promql 类似），下面是一个例子：&lt;/p>
&lt;p>&lt;code>{container=&amp;quot;query-frontend&amp;quot;,namespace=&amp;quot;loki-dev&amp;quot;} |= &amp;quot;metrics.go&amp;quot; | logfmt | duration &amp;gt; 10s and throughput_mb &amp;lt; 500&lt;/code>&lt;/p>
&lt;p>下一个是 Tracing，Tracing 比较复杂：&lt;strong>Operation Name + Start / End Timestamp + Attributes + Events + Parent + SpanContext&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>Operation Name：操作名&lt;/li>
&lt;li>Start / End Timestamp：开始和结束时间&lt;/li>
&lt;li>Attributes：KV 对，包括 Status（比如 OK、Cancelled、Permission Denied）、
SpanKind（CLIENT、SERVER、PRODUCER、CONSUMER、INTERNAL 等）、自定义信息等&lt;/li>
&lt;li>Events：若干个元组列表，每个元组包括 timestamp、name、Attributes，用于记录一系列重要事件&lt;/li>
&lt;li>Parent 包含父亲的 Span ID、Trace ID&lt;/li>
&lt;li>SpanContext 包含自身的 Span ID、Trace ID&lt;/li>
&lt;/ol>
&lt;p>下面是一个例子：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/0f47acfd-8e84-458c-8ae5-3df4c7914280/640" alt="">&lt;/p>
&lt;p>最后看 Profiling，数据模型：&lt;strong>LabelSet + Timestamp + []byte&lt;/strong>&lt;/p>
&lt;p>Profiling 的数据格式是 protocol buffers，所以用 []byte。&lt;/p>
&lt;p>上面介绍了四种数据模型，其实在实际场景中，它们之间也会互相融合，下面说几种常见的融合场景。&lt;/p>
&lt;p>&lt;strong>第一，Metric 和 Tracing 融合。&lt;/strong>&lt;/p>
&lt;p>这里要用到 Exemplar，Exemplar 最早被用在 Google 的 StackDriver 中，后面成为了 OpenMetrics 标准的一部分，在应用通过标准 /metrics 端口暴露 Metric 时，Exemplar 信息也会被一起暴露。&lt;/p>
&lt;p>Prometheus 目前已支持 Exemplar，Prometheus 通过 /metrics 采集数据时也会把 Exemplar 存储下来，并暴露单独的 API 来获取 Exemplar 信息。&lt;/p>
&lt;p>&lt;code>$ curl -g 'http://localhost:9090/api/v1/query_exemplar?query=test_exemplar_metric_total&amp;amp;start=2020-09-14T15:22:25.479Z&amp;amp;end=020-09-14T15:23:25.479Z' {     &amp;quot;status&amp;quot;: &amp;quot;success&amp;quot;,     &amp;quot;data&amp;quot;: [         {             &amp;quot;seriesLabels&amp;quot;: {                 &amp;quot;__name__&amp;quot;: &amp;quot;test_exemplar_metric_total&amp;quot;,                 &amp;quot;instance&amp;quot;: &amp;quot;localhost:8090&amp;quot;,                 &amp;quot;job&amp;quot;: &amp;quot;prometheus&amp;quot;,                 &amp;quot;service&amp;quot;: &amp;quot;bar&amp;quot;             },             &amp;quot;exemplars&amp;quot;: [                 {                     &amp;quot;labels&amp;quot;: {&amp;quot;traceID&amp;quot;: &amp;quot;EpTxMJ40fUus7aGY&amp;quot;},                     &amp;quot;value&amp;quot;: 6,                     &amp;quot;timestamp&amp;quot;: 1600096945479,                     &amp;quot;hasTimestamp&amp;quot;: true                 }             ]         },     ] }&lt;/code>&lt;/p>
&lt;p>借助 Exemplar，可以把 Trace ID 作为一个 label pair 加入 Exemplar 中，从而可以在 Prometheus 查询到 Tracing 的信息，从而将 Metric 和 Tracing 连接起来。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/0f47acfd-8e84-458c-8ae5-3df4c7914280/640" alt="">&lt;/p>
&lt;p>&lt;strong>第二，Logging 和 Tracing 融合。&lt;/strong>&lt;/p>
&lt;p>只要使用带有 Tracing 库的 SDK，每个请求都会带上 Trace ID，并把这些 ID 打在日志中。&lt;/p>
&lt;p>通过 Trace ID 可以定位到一个唯一的 Tracing， 跳转到 Tracing 系统的 UI 进行查询。&lt;/p>
&lt;p>&lt;strong>第三，Metric 和 Profiling 融合。&lt;/strong>&lt;/p>
&lt;p>基于 Exemplar，把 Profiling ID 也放入 Exemplar 中，Prometheus 支持存储和查询即可。&lt;/p>
&lt;p>至于展示，可以在 Grafana 上开发一个 pprof 的 Panel 插件，这样可以展示 Profiling。&lt;/p>
&lt;blockquote>
&lt;p>原文地址：&lt;a href="https://mirror.xyz/0xFd007bb46C47D8600C139E34Df9DfceC86F0B319/hw60dfH7YMtM3jd5dT22spTpPGSS7T8yxskkddTXXro">https://mirror.xyz/0xFd007bb46C47D8600C139E34Df9DfceC86F0B319/hw60dfH7YMtM3jd5dT22spTpPGSS7T8yxskkddTXXro&lt;/a> &amp;gt; &lt;a href="https://mp.weixin.qq.com/s/K11XBQlPJIxFGmsC39_lNQ">https://mp.weixin.qq.com/s/K11XBQlPJIxFGmsC39_lNQ&lt;/a>&lt;/p>
&lt;/blockquote></description></item></channel></rss>