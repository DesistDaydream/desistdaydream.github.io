<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Keepalived on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/3.%E9%9B%86%E7%BE%A4%E4%B8%8E%E5%88%86%E5%B8%83%E5%BC%8F/Keepalived/</link><description>Recent content in Keepalived on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/3.%E9%9B%86%E7%BE%A4%E4%B8%8E%E5%88%86%E5%B8%83%E5%BC%8F/Keepalived/index.xml" rel="self" type="application/rss+xml"/><item><title>Keepalived 介绍</title><link>https://desistdaydream.github.io/docs/3.%E9%9B%86%E7%BE%A4%E4%B8%8E%E5%88%86%E5%B8%83%E5%BC%8F/Keepalived/1.1.Keepalived-%E4%BB%8B%E7%BB%8D/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/3.%E9%9B%86%E7%BE%A4%E4%B8%8E%E5%88%86%E5%B8%83%E5%BC%8F/Keepalived/1.1.Keepalived-%E4%BB%8B%E7%BB%8D/</guid><description>概述 参考：
官网 Keepalived 特点：
Active/passive 模式 Keepalived 是 vrrp 协议在 Linux 主机上以守护进程方式的实现 能够根据配置文件自动生成 ipvs 规则 对各 RS 做健康状态检测 万字长文带你从 0 学习 Keepalived 负载均衡器（Load Balancer, LB ）是一组能够将 IP 数据流以负载均衡形式转发到多台物理服务器的集成软件。有硬件负载均衡器和软件负载均衡器之分，硬件负载均衡器主要是在访问网络和服务器之间配置物理负载均衡设备，客户端对物理服务器的访问请求首先会抵达负载均衡设备，然后再由负载均衡设备根据一定的负载算法转发到后端服务器。相比而言，软件负载均衡器不需要特定的物理设备，只需在相应的操作系统上部署具有负载均衡功能的软件即可。
在 Openstack 高可用集群部署中，服务的负载均衡和高可用主要有两种主流的实现方案，即 HAProxy+ Keepalived 和 Pacemaker+HAProxy 方案。由于 OpenStack 服务组件多样，不同服务均需要进行特定的高可用设计，并且从集群资源统一调度和集群稳定性的角度考虑，后一种方案是多数 OpenStack 厂商的高可用部署方案首选，但是选用后一方案并不意味着 Keepalived 在 OpenStack 高可用集群部署中不被使用。由于 Keepalived 的主要作用之一是进行虚拟路由的故障切换，其在 Neutron 的 L3 高可用设计与实现中起着举足轻重的作用。
1.1 keepalived 及 LVS 概述 Keepalived 的项目实现的主要目标是简化 LVS 项目的配置并增强其稳定性，即 Keepalived 是对 LVS 项目的扩展增强。
Keepalived 为 Linux 系统和基于 Linux 的架构提供了负载均衡和高可用能力，其负载均衡功能主要源自集成在 Linux 内核中的 LVS 项目模块 IPVS( IP Virtual Server ），基于 IPVS 提供的 4 层 TCP/IP 协议负载均衡， Keepalived 也具备负载均衡的功能，此外， Keepalived 还实现了基于多层 TCP/IP 协议（ 3 层、4 层、5/7 层）的健康检查机制，因此， Keepalived 在 LVS 负载均衡功能的基础上，还提供了 LVS 集群物理服务器池健康检查和故障节点隔离的功能。</description></item><item><title>Keepalived 配置示例</title><link>https://desistdaydream.github.io/docs/3.%E9%9B%86%E7%BE%A4%E4%B8%8E%E5%88%86%E5%B8%83%E5%BC%8F/Keepalived/10.1.Keepalived-%E9%85%8D%E7%BD%AE%E7%A4%BA%E4%BE%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/3.%E9%9B%86%E7%BE%A4%E4%B8%8E%E5%88%86%E5%B8%83%E5%BC%8F/Keepalived/10.1.Keepalived-%E9%85%8D%E7%BD%AE%E7%A4%BA%E4%BE%8B/</guid><description>满足基本 HA 功能的配置 global_defs { notification_email { root@localhost } notification_email_from Alexandre.Cassen@firewall.loc smtp_server 127.0.0.1 smtp_connect_timeout 30 router_id LVS_DEVEL script_user root } vrrp_script chk_haproxy { script “killall -0 haproxy” interval 1 weight -2 } vrrp_instance VI_1 { state MASTER #备节点改成BACKUP interface ens33 virtual_router_id 51 priority 101 #倍节点改成100 advert_int 1 authentication { auth_type PASS auth_pass 1111 } virtual_ipaddress { 192.168.0.75 } track_script { chk_haproxy } notify_master &amp;quot;/etc/keepalived/notify master&amp;quot; root notify_backup &amp;quot;/etc/keepalived/notify backup&amp;quot; root notify_fault &amp;quot;/etc/keepalived/notify fault&amp;quot; root } include /etc/keepalived/include/* 基本 LVS 的配置</description></item><item><title>Keepalived 配置详解</title><link>https://desistdaydream.github.io/docs/3.%E9%9B%86%E7%BE%A4%E4%B8%8E%E5%88%86%E5%B8%83%E5%BC%8F/Keepalived/1.2.Keepalived-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/3.%E9%9B%86%E7%BE%A4%E4%B8%8E%E5%88%86%E5%B8%83%E5%BC%8F/Keepalived/1.2.Keepalived-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</guid><description>Keepalived 使用 keepalived 启动流程：
启动三个进程（主进程、healthcheck 进程、vrrp 进程）之后，先进入 backup 状态，运行一次 vrrp_script 成功后发现没有主，这时候会进入 master 状态，拉起 VIP，完成启动。 切换的流程： 原 keepalived master 节点，运行检查脚本异常，则 keepalived 进入 FAULT 状态，释放 vip，原 backup 的 keepalived 会接管 VIP。 注意事项：VIP 必须在 master 上。为了这个要求，需要在主库上先启动 keepalived。 Keepalived 配置 /etc/sysconfig/keepalived # keepalived 运行时参数配置
/etc/keepalived/keepalived.conf # keepalived 基本配置文件
Note：keepalived 配置文件的运行时加载功能，可以通过命令 kill -HUP $(cat /var/run/keepalived.pid) 实现。该功能需要在 1.2.20 及以上版本才能实现
下面是一个基本的 keepalived.conf 文件的配置示例
! Configuration File for keepalived global_defs { #全局配置段 notification_email { admin@example. com } notification_email_from noreply@example.</description></item><item><title>keepalived+nginx 配置示例</title><link>https://desistdaydream.github.io/docs/3.%E9%9B%86%E7%BE%A4%E4%B8%8E%E5%88%86%E5%B8%83%E5%BC%8F/Keepalived/10.2.keepalived+nginx-%E9%85%8D%E7%BD%AE%E7%A4%BA%E4%BE%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/3.%E9%9B%86%E7%BE%A4%E4%B8%8E%E5%88%86%E5%B8%83%E5%BC%8F/Keepalived/10.2.keepalived+nginx-%E9%85%8D%E7%BD%AE%E7%A4%BA%E4%BE%8B/</guid><description>适用于 keepalived 的 node 节点的前端负载均衡的配置 keepalived.conf 主节点配置内容 cat &amp;gt; /etc/keepalived/keepalived.conf &amp;lt;&amp;lt; EOF global_defs { router_id k8s-master-dr script_user root enable_script_security } vrrp_script check_nginx { script &amp;#34;/etc/keepalived/check_nginx.sh&amp;#34; interval 3 weight -2 fall 2 rise 2 } vrrp_instance VI_K8S { state BACKUP interface eth0 virtual_router_id 60 priority 101 nopreempt authentication { auth_type PASS auth_pass 4be37dc3b4c90194d1600c483e10ad1d } virtual_ipaddress { 172.40.0.60 } track_script { check_nginx } } EOF keepalived.conf 备节点配置内容 cat &amp;gt; /etc/keepalived/keepalived.conf &amp;lt;&amp;lt; EOF global_defs { router_id k8s-master-dr script_user root enable_script_security } vrrp_script check_nginx { script &amp;#34;/etc/keepalived/check_nginx.</description></item><item><title>问题实例：Keepalived 非抢占模式 VIP 不漂移</title><link>https://desistdaydream.github.io/docs/3.%E9%9B%86%E7%BE%A4%E4%B8%8E%E5%88%86%E5%B8%83%E5%BC%8F/Keepalived/%E9%97%AE%E9%A2%98%E5%AE%9E%E4%BE%8BKeepalived-%E9%9D%9E%E6%8A%A2%E5%8D%A0%E6%A8%A1%E5%BC%8F-VIP-%E4%B8%8D%E6%BC%82%E7%A7%BB/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/3.%E9%9B%86%E7%BE%A4%E4%B8%8E%E5%88%86%E5%B8%83%E5%BC%8F/Keepalived/%E9%97%AE%E9%A2%98%E5%AE%9E%E4%BE%8BKeepalived-%E9%9D%9E%E6%8A%A2%E5%8D%A0%E6%A8%A1%E5%BC%8F-VIP-%E4%B8%8D%E6%BC%82%E7%A7%BB/</guid><description>Keepalived 非抢占模式下 VIP 不漂移问题 Keepalived 主要是通过虚拟路由冗余来实现高可用功能。本文将不对 keepalived 的基本原理进行阐述，可参考文章 Keepalived 详细介绍简介、keepalived vip 漂移基本原理及选举算法。本文记录了在实践过程中使用 keepalived 时，在 weight 值变化的情况下 vip 不漂移的问题及解决方法。
场景
3 个 keepalived 节点, vip 为 172.31.23.6：
devops1a-zoocassa0 172.31.23.22
devops1a-zoocassa1 172.31.23.23
预期
两个节点初始都设为 BACKUP，按照优先级（priority）选举 MASTER；
在两个节点上检查 memcached 服务状态，失败则降低优先级；
如果 MASTER(假设为 devops1a-zoocassa0)上检查失败，BACKUP 上检查成功，则优先级高的 BACKUP 节点(假设为 devops1a-zoocassa1)切换为 MASTER 节点；
之前检查失败的 MASTER(devops1a-zoocassa0)上的服务恢复时, 之前的 BACKUP 节点(devops1a-zoocassa1)服务检查也成功，即使 devops1a-zoocassa0 优先级恢复到高于 devops1a-zoocassa1,也不再成为 MASTER(不抢占)。
不成功配置范例 主节点 dr-1 配置
global_defs { router_id k8s-master-dr } vrrp_script check_nginx { script &amp;quot;pidof nginx&amp;quot; interval 3 weight -2 fall 2 rise 2 } vrrp_instance VI_K8S { state BACKUP interface eth0 virtual_router_id 60 priority 101 nopreempt authentication { auth_type PASS auth_pass 4be37dc3b4c90194d1600c483e10ad1d } virtual_ipaddress { 172.</description></item></channel></rss>