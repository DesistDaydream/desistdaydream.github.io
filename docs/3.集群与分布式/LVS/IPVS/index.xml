<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – IPVS</title><link>https://desistdaydream.github.io/docs/3.%E9%9B%86%E7%BE%A4%E4%B8%8E%E5%88%86%E5%B8%83%E5%BC%8F/LVS/IPVS/</link><description>Recent content in IPVS on 断念梦</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/3.%E9%9B%86%E7%BE%A4%E4%B8%8E%E5%88%86%E5%B8%83%E5%BC%8F/LVS/IPVS/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: IPVS</title><link>https://desistdaydream.github.io/docs/3.%E9%9B%86%E7%BE%A4%E4%B8%8E%E5%88%86%E5%B8%83%E5%BC%8F/LVS/IPVS/IPVS/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/3.%E9%9B%86%E7%BE%A4%E4%B8%8E%E5%88%86%E5%B8%83%E5%BC%8F/LVS/IPVS/IPVS/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/IP_Virtual_Server">Wiki，IPVS&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.linuxvirtualserver.org/software/ipvs.html">官方文档&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>IP Virtual Service(IP 虚拟服务，简称 IPVS)&lt;/strong> 是基于 &lt;a href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.Kernel/8.Network/Linux%20%E7%BD%91%E7%BB%9C%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/Netfilter%20%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/Netfilter%20%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F.md">Netfilter&lt;/a> 的 Linux 内核模块，用来实现 &lt;a href="https://desistdaydream.github.io/docs/3.%E9%9B%86%E7%BE%A4%E4%B8%8E%E5%88%86%E5%B8%83%E5%BC%8F/LVS/LVS.md">LVS&lt;/a> 集群中的 &lt;strong>Scheduler(调度器)&lt;/strong> 功能。启动这个模块的 Linux 服务器就变成了 LVS 系统中的 &lt;strong>Director&lt;/strong>，此时，这个服务器可以看作是一种高效的 Layer-4(四层) 交换机。在 Director 上运行 IPVS 代码是 LVS 的基本要素。&lt;/p>
&lt;p>IPVS 在服务器上运行，并充当 RS 集群前面的负载均衡器。IPVS 可以将基于 TCP 和 UDP 的服务请求定向到真实服务器，并使真实服务器的服务在单个 IP 地址上表现为虚拟服务。当一个 TCP 连接的初始 SYN 报文到达时，IPVS 就选择一台服务器，将报文转发给它。此后通过查发报文的 IP 和 TCP 报文头地址，保证此连接的后继报文被转发到相同的服务器。这样，IPVS 无法检查到请求的内容再选择服务器，这就要求后端的服务器组是提供相同的服务，不管请求被送到哪一台服务器，返回结果都应该是一样的。但是在有一些应用中后端的服务器可能功能不一，有的是提供 HTML 文档的 Web 服务器，有的是提供图片的 Web 服务器，有的是提供 CGI 的 Web 服务器。这时，就需要基于内容请求分发 (Content-Based Request Distribution)，同时基于内容请求分发可以提高后端服务器上访问的局部性。&lt;/p>
&lt;ul>
&lt;li>一个 ipvs 主机可以同时定义多个 cluster service&lt;/li>
&lt;li>一个 cluster service 上至少应该定义一个 real server，定义时指明 lvs-type，以及 lvs scheduler&lt;/li>
&lt;/ul>
&lt;p>用白话理解 IPVS：
IPVS 就是包括 Director 和 RS 在内的所有设备上的 IP，统一虚拟成一个 IP，这个 IP 就是面向用户的唯一 IP，用户通过这个 IP，就可以访问集群，让集群为其提供服务，这也是负载均衡的体现，也是集群的体现，把很多设备当做一个整体来看。&lt;/p>
&lt;h2 id="ipvs-与-lvs-的关系">IPVS 与 LVS 的关系&lt;/h2>
&lt;p>LVS 更偏向于描述一个概念，而 IPVS 程序则是实现 LVS 的最核心部分。通过 IPVS 以及其管理工具 ipvsadm，可以实现 LVS 中的 Director(指挥器)。而 RS，本质上并不需要 LVS 或者 IPVS 代码支持，只需要在 DR 模式下，配置一些内核参数即可。&lt;/p>
&lt;p>而随着发展，IPVS 已经存单独的程序，被包含在 Linux 内核中，成了了默认自带的模块。&lt;/p>
&lt;p>可以这么说，IPVS 就是 LVS；也可以说，LVS 包含 ipvs 与 ipvsadm。&lt;/p>
&lt;h1 id="ipvs-配置">IPVS 配置&lt;/h1>
&lt;p>ipvs 可以通过两种方式进行配置：&lt;/p>
&lt;ul>
&lt;li>ipvsadm 命令&lt;/li>
&lt;li>ipvs 模块参数&lt;/li>
&lt;/ul>
&lt;p>ipvs 是一个内核模块，所以，想要配置 ipvs 则需要以&lt;a href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.Kernel/1.Linux%20Kernel/Module(%E6%A8%A1%E5%9D%97).md">内核模块&lt;/a>的配置方式来进行配置。可以通过 modinfo -p ip_vs 命令查看该模块可以配置的参数&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># modinfo -p ip_vs&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>conn_tab_bits:Set connections&lt;span style="color:#960050;background-color:#1e0010">&amp;#39;&lt;/span> hash size &lt;span style="color:#f92672">(&lt;/span>int&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>现阶段，可用的参数只有一个：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>conn_tab_bits&lt;/strong> # 设置连接表的大小。&lt;code>默认值：12&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>该参数控制下面示例中 size 的大小，2 的 12 次方，4096&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>root@lichenhao:~# ipvsadm -ln
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>IP Virtual Server version 1.2.1 &lt;span style="color:#f92672">(&lt;/span>size&lt;span style="color:#f92672">=&lt;/span>4096&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Prot LocalAddress:Port Scheduler Flags
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -&amp;gt; RemoteAddress:Port Forward Weight ActiveConn InActConn
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>IPVS connection hash table size，该表用于记录每个进来的连接及路由去向的信息（这个和 iptables 跟踪表类似）。连接的 Hash 表要容纳几百万个并发连接，任何一个报文到达都需要查找连接 Hash 表。Hash 表的查找复杂度为 O(n/m)，其中 n 为 Hash 表中对象的个数，m 为 Hash 表的桶个数。当对象在 Hash 表中均匀分布和 Hash 表的桶个数与对象个数一样多时，Hash 表的查找复杂度可以接近 O(1)&lt;/p>
&lt;p>连接跟踪表中，每行称为一个 hash bucket（hash 桶），桶的个数是一个固定的值 CONFIG_IP_VS_TAB_BITS，默认为 12（2 的 12 次方，4096）。这个值可以调整，该值的大小应该在 8 到 20 之间。&lt;/p>
&lt;p>LVS 的调优建议将 hash table 的值设置为不低于并发连接数。例如，并发连接数为 200，Persistent 时间为 200S，那么 hash 桶的个数应设置为尽可能接近 200x200=40000，2 的 15 次方为 32768 就可以了。当 ip_vs_conn_tab_bits=20 时，哈希表的的大小（条目）为 pow(2,20)，即 1048576。&lt;/p>
&lt;p>这里的 hash 桶的个数，并不是 LVS 最大连接数限制。LVS 使用哈希链表解决“哈希冲突”，当连接数大于这个值时，必然会出现哈稀冲突，会（稍微）降低性能，但是并不对在功能上对 LVS 造成影响。&lt;/p>
&lt;p>修改模块参数：echo &amp;ldquo;options ip_vs conn_tab_bits=22&amp;rdquo; &amp;gt; /etc/modprobe.d/ip_vs.conf，效果如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>IP Virtual Server version 1.2.1 &lt;span style="color:#f92672">(&lt;/span>size&lt;span style="color:#f92672">=&lt;/span>4194304&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Prot LocalAddress:Port Scheduler Flags
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -&amp;gt; RemoteAddress:Port Forward Weight ActiveConn InActConn
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TCP 10.10.9.60:30000 rr persistent &lt;span style="color:#ae81ff">30&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -&amp;gt; 10.10.9.69:30000 Route &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -&amp;gt; 10.10.9.70:30000 Route &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: ipvsadm 命令行工具</title><link>https://desistdaydream.github.io/docs/3.%E9%9B%86%E7%BE%A4%E4%B8%8E%E5%88%86%E5%B8%83%E5%BC%8F/LVS/IPVS/ipvsadm-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/3.%E9%9B%86%E7%BE%A4%E4%B8%8E%E5%88%86%E5%B8%83%E5%BC%8F/LVS/IPVS/ipvsadm-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;h1 id="syntax语法">Syntax(语法)&lt;/h1>
&lt;p>处理 Virtual Service 的命令语法：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>ipvsadm COMMAND VirtualService [-s Scheduler] [Persistence OPTIONS]&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>处理指定 Virtual Service 下的 Real Server 的命令语法：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>ipvsadm COMMAND VirtualService ServerAddress [PacketForwardingMethod] [Weight Options]&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>**
命令语法中各参数的含义&lt;/p>
&lt;ul>
&lt;li>&lt;strong>VirtuslService&lt;/strong> # 用于指定基于协议或者地址或者端口号的虚拟服务，通过三元组定义：Protocol、IP、PORT。
&lt;ul>
&lt;li>格式：&lt;code>-PROTOCOL IP:PORT&lt;/code>
&lt;ul>
&lt;li>-PROTOCOL 分两种
&lt;ul>
&lt;li>-t, &amp;ndash;tcp-service&lt;/li>
&lt;li>-u, &amp;ndash;udp-service&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Scheduler&lt;/strong> # Director 的调度方法
&lt;ul>
&lt;li>详见 &lt;a href="https://desistdaydream.github.io/docs/3.%E9%9B%86%E7%BE%A4%E4%B8%8E%E5%88%86%E5%B8%83%E5%BC%8F/LVS/LVS.md">LVS&lt;/a> 文章中描述的调度方法，使用其中 10 种任意一种的英文简称来写该参数，注意：是小写字母&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>ServerAddress&lt;/strong> # RS 的 IP&lt;/li>
&lt;li>&lt;strong>PacketForwardingMethod&lt;/strong> # 该位置指明 LVS 的工作模式，不写该参数表明默认 DR 类型
&lt;ul>
&lt;li>-g, &amp;ndash;gatewaying # 网关，表示 DR 模式&lt;/li>
&lt;li>-i, &amp;ndash;ipip # IP 封装 IP，表示 TUN 模式&lt;/li>
&lt;li>-m, &amp;ndash;masquerading # 伪装，表示 NAT 模式&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Weight Options&lt;/strong> # 权重选项&lt;/li>
&lt;/ul>
&lt;h2 id="command">COMMAND&lt;/h2>
&lt;p>管理集群服务的 COMMAND&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-A, &amp;ndash;add-service&lt;/strong> # 创建一个 VirtualService . 服务地址由 IP，PORT，protocol(协议)组成&lt;/li>
&lt;li>&lt;strong>-E, &amp;ndash;edit-service&lt;/strong> # 修改一个 VirtualService&lt;/li>
&lt;li>&lt;strong>-D, &amp;ndash;delete-service&lt;/strong> # 删除一个虚拟服务,以及相关的 RS&lt;/li>
&lt;li>&lt;strong>-C, &amp;ndash;clear&lt;/strong> # 清空这个虚拟服务器的表&lt;/li>
&lt;li>&lt;strong>-R, &amp;ndash;restore&lt;/strong> # 从标准输出还原 ipvs 规则&lt;/li>
&lt;li>&lt;strong>-S, &amp;ndash;save&lt;/strong># 保存 ipvs 规则到标准输出&lt;/li>
&lt;/ul>
&lt;p>管理集群服务中的 RS 的 COMMAND&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-a, &amp;ndash;add-server&lt;/strong> # 向指定的 VirtualService 中添加一个 RS&lt;/li>
&lt;li>&lt;strong>-e, &amp;ndash;edit-server&lt;/strong> # 修改指定 VirtualService 中的 RS&lt;/li>
&lt;li>&lt;strong>-d, &amp;ndash;delete-server&lt;/strong> # 从指定的 VirtualService 中移除一个 RS&lt;/li>
&lt;/ul>
&lt;p>通用的 COMMAND&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-Z, &amp;ndash;zero&lt;/strong> # 清空一个或所有 Virtual Service 下的数据包&lt;/li>
&lt;li>&lt;strong>-L, -l, &amp;ndash;list&lt;/strong> # 如果没有指定参数，则列出虚拟服务器表。如果输入了 service-address，只列出该服务。&lt;/li>
&lt;li>&lt;strong>&amp;ndash;set TCP TCPFIN UDP&lt;/strong> # 更改用于 IPVS 连接的超时值。 此命令始终使用 3 个参数，分别表示 TCP 会话，接收到 FIN 数据包后的 TCP 会话和 UDP 数据包的超时值（以秒为单位）。 超时值 0 表示保留了相应条目的当前超时值。&lt;code>默认值：900 120 300&lt;/code>。&lt;/li>
&lt;/ul>
&lt;h2 id="options">OPTIONS&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>-p, &amp;ndash;persistent [TIME]&lt;/strong> # 指定持久连接的超时时间&lt;/li>
&lt;/ul>
&lt;h3 id="与--l--l---list-命令搭配使用的选项">与 -L, -l, &amp;ndash;list 命令搭配使用的选项&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>-n&lt;/strong> # 当配合 -l 查询的时候，显示 IP 地址而不显示主机名，即不把 IP 解析成主机名。与 -l 命令配合时，效果如下：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>root@dr-01 ~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># ipvsadm -Ln&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>IP Virtual Server version 1.2.1 &lt;span style="color:#f92672">(&lt;/span>size&lt;span style="color:#f92672">=&lt;/span>4194304&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Prot LocalAddress:Port Scheduler Flags
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -&amp;gt; RemoteAddress:Port Forward Weight ActiveConn InActConn
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TCP 10.10.9.60:80 rr
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -&amp;gt; 10.10.9.61:80 Route &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -&amp;gt; 10.10.9.62:80 Route &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TCP 10.10.9.60:30000 rr persistent &lt;span style="color:#ae81ff">30&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -&amp;gt; 10.10.9.69:30000 Route &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -&amp;gt; 10.10.9.70:30000 Route &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>Forward # 当前 lvs 的模型，其中 Masq 为 nat 模型，route 为 dr 模型&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Weight # 当前 rs 的权重&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ActiveConn # 活动连接数,也就是 tcp 连接状态的 ESTABLISHED;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>InActConn # 指除了 ESTABLISHED 以外的,所有的其它状态的 tcp 连接.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-c, &amp;ndash;connection&lt;/strong> # 输出 ipvs 当 前的连接状态信息。效果如下：&lt;/p>
&lt;p>[root@node-1 ~]# ipvsadm &amp;ndash;list -nc
IPVS connection entries
pro expire state source virtual destination
TCP 14:52 ESTABLISHED 10.244.3.238:60996 10.96.0.1:443 172.38.40.214:6443
UDP 03:39 UDP 10.244.3.244:39398 10.96.0.10:53 10.244.0.39:53
TCP 14:48 ESTABLISHED 10.244.3.238:58412 10.96.0.1:443 172.38.40.214:6443&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;timeout&lt;/strong> # 输出 TCP 会话，接收到 FIN 数据包后的 TCP 会话和 UDP 数据包的超时值（以秒为单位）。效果如下：&lt;/p>
&lt;p>[root@node-1 ~]# ipvsadm -ln &amp;ndash;timeout
Timeout (tcp tcpfin udp): 900 120 300&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;daemon&lt;/strong># Daemon information output. The list command with this option will display the daemon status and its multicast interface.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;stats&lt;/strong> # 显示统计数据，效果如下&lt;/p>
&lt;p>[root@node-1 ~]# ipvsadm -ln &amp;ndash;stats
IP Virtual Server version 1.2.1 (size=4096)
Prot LocalAddress:Port Conns InPkts OutPkts InBytes OutBytes
-&amp;gt; RemoteAddress:Port
TCP 172.38.40.216:30080 0 0 0 0 0
-&amp;gt; 10.244.5.86:80 0 0 0 0 0
TCP 10.96.0.1:443 66 4327 4056 500036 4558037
-&amp;gt; 172.38.40.212:6443 22 835 702 147508 743066
-&amp;gt; 172.38.40.213:6443 22 2485 2432 240938 2923352
-&amp;gt; 172.38.40.214:6443 22 1007 922 111590 891619&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;rate&lt;/strong> # 速率信息输出。显示服务及其服务器的速率信息（例如，连接/秒，字节/秒和数据包/秒）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;thresholds&lt;/strong> # 输出阈值信息。显示服务列表中每个服务器的上/下连接阈值信息。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;persistent-conn&lt;/strong> # 持久连接信息的输出。在服务列表中显示每个服务器的持久连接计数器信息。持久连接用于将实际连接从同一客户端/网络转发到同一服务器。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="example">EXAMPLE&lt;/h1>
&lt;ul>
&lt;li>管理集群服务
&lt;ul>
&lt;li>ipvsadm -A|E virtual-service [-s SCHEDULER] # 增加修改
&lt;ul>
&lt;li>ipvsadm -A -t 192.168.0.63:80 -s rr # 添加一个虚拟服务，调度模式为轮询&lt;/li>
&lt;li>ipvsadm -D virtual-service # 删除&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>管理集群服务中的 RS
&lt;ul>
&lt;li>ipvsadm -a|e virtual-service -r server-address [-g|i|m] [-w weight] [-x upper] [-y lower]&lt;/li>
&lt;li>ipvsadm -d virtual-service -r server-address
&lt;ul>
&lt;li>ipvsadm -a -t 192.168.0.60:80 -r 192.168.0.62 -g # 添加一个 IP 为 0.62 的 RS 到 0.60 的 LVS 中，LVS 类型为-g,dr 类型&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>通用
&lt;ul>
&lt;li>ipvsadm -C # 清空&lt;/li>
&lt;li>ipvsadm -L|l [virtual-service] [options] # 查询&lt;/li>
&lt;li>ipvsadm -R&lt;/li>
&lt;li>ipvsadm -S [-n]&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ipvsadm -Ln # 查询，直接显示 IP 不显示主机名，信息如下所示&lt;/li>
&lt;/ul>
&lt;p>那既然这样,为什么从 lvs 里看的 ActiveConn 会比在真实机上通过 netstats 看到的 ESTABLISHED 高很多呢?&lt;/p>
&lt;p>原来 lvs 自身也有一个默认超时时间.可以用 ipvsadm -L &amp;ndash;timeout 查看,默认是 900 120 300,分别是 TCP TCPFIN UDP 的时间.也就是说一条 tcp 的连接经过 lvs 后,lvs 会把这台记录保存 15 分钟,而不管这条连接是不是已经失效(哪怕这次 http 请求已经完成切断开连接，但是在 lvs 中有保存记录)!所以如果你的服务器在 15 分钟以内有大量的并发请求连进来的时候,你就会看到这个数值直线上升.&lt;/p>
&lt;p>其实很多时候,我们看 lvs 的这个连接数是想知道现在的每台机器的真实连接数吧?怎么样做到这一点呢?其实知道现在的 ActiveConn 是怎样产生的,做到这一点就简单了.举个例子:比如你的 lvs 是用来负载网站,用的模式是 dr,后台的 web server 用的 nginx 这时候一条请求过来,在程序没有问题的情况下,一条连接最多也就五秒就断开了.这时候你可以这样设置 ipvsadm &amp;ndash;set 5 10 300.设置 tcp 连接只保持 5 秒中.如果现在 ActiveConn 很高你会发现这个数值会很快降下来,直到降到和你用 nginx 的 status 看当前连接数的时候差不多.你可以继续增加或者减小 5 这个数值,直到真实机的 status 连接数和 lvs 里的 ActiveConn，一般保证该数值与后端 RS 中代理服务的连接保持时间相当即可&lt;/p></description></item></channel></rss>