<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>HAProxy on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/3.%E9%9B%86%E7%BE%A4%E4%B8%8E%E5%88%86%E5%B8%83%E5%BC%8F/HAProxy/</link><description>Recent content in HAProxy on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/3.%E9%9B%86%E7%BE%A4%E4%B8%8E%E5%88%86%E5%B8%83%E5%BC%8F/HAProxy/index.xml" rel="self" type="application/rss+xml"/><item><title>HAProxy</title><link>https://desistdaydream.github.io/docs/3.%E9%9B%86%E7%BE%A4%E4%B8%8E%E5%88%86%E5%B8%83%E5%BC%8F/HAProxy/HAProxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/3.%E9%9B%86%E7%BE%A4%E4%B8%8E%E5%88%86%E5%B8%83%E5%BC%8F/HAProxy/HAProxy/</guid><description>HAProxy 可以实现四层以及七层负载均衡
多用于七层负载均衡
http 层代理
tcp 层的负载均衡
目前，有两种主流的代理模式：tcp 代理(即所谓的 4 层代理)和 http 代理(即所谓的 7 层代理)。在 4 层代理模式下，haproxy 简单的在两端进行双向转发。在 7 层代理模式下，haproxy 会对协议进行分析，可以根据协议来允许、阻塞、切换、增加、修改和移除 request 或 response 中的属性内容。
haproxy 工作逻辑 比如 client 为 114.114.114.114，haproyx 为 192.168.1.2，Server 为 192.168.1.3
client 发送数据包给 haproxy 所在服务器 192.168.1.2 192.168.1.2 发现这个数据包是给自己的 haproxy 的，则剥离 IP 与 PORT，并把数据包发送给用户空间的 haproxy haproxy 由于在用户空间，所以收到的数据包已经被内核剥离了 IP 与 PORT，此时 haproxy 会根据自身的配置以及数据包内的相关信息来进行匹配选择一个合适的 Server，然后发送给内核，告诉内核这个数据包要发送给某 Server。这是 haproxy 与 Server 建立的一个新 TCP 连接。 内核根据 Server 这个目的 IP，再封装上 mac 地址从网卡中发送出去。 这时候 Server 就会收到请求，处理完成后把响应报文发送给 haproxy 由于 haproxy 与 Client 和 Server 分别建立的两个 TCP 连接，这会生成两个 Socket，所以发送给 client 的响应数据以及之后的数据交互就直接通过两个相连的 socket 来进行。 socket 介绍详解 TCPIP，UDP，端口 Port，Socket，API.</description></item></channel></rss>