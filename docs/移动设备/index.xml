<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – 移动设备</title><link>https://desistdaydream.github.io/docs/%E7%A7%BB%E5%8A%A8%E8%AE%BE%E5%A4%87/</link><description>Recent content in 移动设备 on 断念梦</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/%E7%A7%BB%E5%8A%A8%E8%AE%BE%E5%A4%87/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: 移动设备</title><link>https://desistdaydream.github.io/docs/%E7%A7%BB%E5%8A%A8%E8%AE%BE%E5%A4%87/%E7%A7%BB%E5%8A%A8%E8%AE%BE%E5%A4%87/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/%E7%A7%BB%E5%8A%A8%E8%AE%BE%E5%A4%87/%E7%A7%BB%E5%8A%A8%E8%AE%BE%E5%A4%87/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://zhuanlan.zhihu.com/p/444481759">https://zhuanlan.zhihu.com/p/444481759&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>今天想和大家分享的内容是和我们手机上APP相关的，它们都是用什么编程语言写的呢？&lt;/p>
&lt;p>主要针对两大移动端：Android和IOS，我们就不多说了，下面我们从另一个角度进行分类。&lt;/p>
&lt;h1 id="第一类针对单一app开发的语言即开发一套代码只能运行在一个平台上">&lt;strong>第一类：针对单一APP开发的语言，即开发一套代码只能运行在一个平台上。&lt;/strong>&lt;/h1>
&lt;h2 id="1开发android的java和kotlin">1、开发Android的：Java和Kotlin&lt;/h2>
&lt;p>Kotlin是一种在Java虚拟机上运行的静态类型编程语言，被称之为Android世界的Swift。Kotlin可以编译成Java字节码，也可以编译成JavaScript，方便在没有 JVM 的设备上运行。运行效率提高很多，并且语法更加简洁好用。&lt;/p>
&lt;p>如果是与系统底层进行交互则需要使用JNI技术，通过和C或者C++结合实现相应的业务逻辑，比如美颜或者直播类型的APP。直播类型的APP采用的ffmpeg技术，其中ffmpeg就是用C语言实现的。&lt;/p>
&lt;p>&lt;img src="https://pic2.zhimg.com/v2-b6697b88d959003af2515ab4bc2092e9_b.jpg" alt="">&lt;/p>
&lt;h2 id="2开发ios的swift和object-c">2、开发IOS的：Swift和Object-C**&lt;/h2>
&lt;p>Swift 结合了 C 和 Objective-C 的优点并且不受 C 兼容性的限制。&lt;/p>
&lt;p>&lt;img src="https://pic1.zhimg.com/v2-c988362c2aedf592ad366a335a53ec38_b.jpg" alt="">&lt;/p>
&lt;h1 id="二第二类可以针对多个app端的编程语言即只需开发出一套代码就可在多个平台上运行">（二）第二类：可以针对多个APP端的编程语言，即只需开发出一套代码，就可在多个平台上运行。&lt;/h1>
&lt;h2 id="1第一种是flutter技术">1、第一种是Flutter技术&lt;/h2>
&lt;p>基于Dart语言，比如现在闲鱼APP就是基于flutter开发的。并且有着多年经验，而且闲鱼免费开源了框架。&lt;/p>
&lt;p>Flutter是谷歌的移动UI框架，可以快速在iOS和Android上构建高质量的原生用户界面。Flutter可以与现有的代码一起工作。在全世界，Flutter正在被越来越多的开发者和组织使用，并且Flutter是完全免费、开源的。&lt;/p>
&lt;p>Flutter的热重载可帮助您快速地进行测试、构建UI、添加功能并更快地修复错误。在iOS和Android模拟器或真机上可以在亚秒内重载，并且不会丢失状态。&lt;/p>
&lt;p>尤其是在UI上使用Flutter的现代、响应式框架，和一系列基础widget，轻松构建您的用户界面。使用功能强大且灵活的API（针对2D、动画、手势、效果等）解决艰难的UI挑战。&lt;/p>
&lt;p>&lt;img src="https://pic4.zhimg.com/v2-3363e67d08bc43662392a39a0d18ca1b_b.jpg" alt="">&lt;/p>
&lt;h2 id="2第二种是uni-app框架">2、第二种是Uni-app框架&lt;/h2>
&lt;p>基于 Vue.js。俗称一套代码编到8个平台上。&lt;/p>
&lt;p>uni-app是一个使用Vue.js开发所有前端应用的框架，开发者编写一套代码，可发布到iOS、Android、H5、以及各种小程序：微信/支付宝/百度/头条/QQ/钉钉等多个平台。&lt;/p>
&lt;p>&lt;img src="https://pic1.zhimg.com/v2-b915ba2b373b76680ef60ab18489db30_b.jpg" alt="">&lt;/p>
&lt;h1 id="小结">小结：&lt;/h1>
&lt;p>第二类开发起来更显效率，节约很多时间成本。当然，如果加上大型APP这个限定条件的话，就不能用单一的某一种编程语言来说了，一般情况下大型APP必然会用到的编程语言有三种：&lt;/p>
&lt;p>&lt;strong>第一种：&lt;/strong> 平台原生推荐语言，如：Android平台的Java和Kotlin，ios平台的object-c和Swift（swift版本之间的差异比较大，要学习的话还是要注意版本选择）。这部分一般用于处理核心业务、权限请求以及高性能要求页面。&lt;/p>
&lt;p>&lt;strong>第二种：&lt;/strong> web语言，这里主要指的是h5相关的技术栈。这部分主要处理非核心业务逻辑，以及需要动态更新的页面。&lt;/p>
&lt;p>&lt;strong>第三种：&lt;/strong> NDK相关，这里一般用到的就是C、C++。大部分写业务逻辑的同学用的比较少，不过大型APP一般还是会用到一些。主要应用于安全性要求高，高性能算法以及跨平台算法实现。&lt;/p>
&lt;p>素材源于:文章来源，C语言与程序设计；直接来源:嵌入式ARM&lt;/p></description></item><item><title>Docs: ADB</title><link>https://desistdaydream.github.io/docs/%E7%A7%BB%E5%8A%A8%E8%AE%BE%E5%A4%87/ADB/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/%E7%A7%BB%E5%8A%A8%E8%AE%BE%E5%A4%87/ADB/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://developer.android.com/tools/adb">官方文档，SDK 工具-adb&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://developer.android.com/studio/command-line/adb?hl=zh-cn">官方文档-中文&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Android_Debug_Bridge">Wiki，Android_Debug_Bridge&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Android Debug Bridge(安卓调试桥，简称 ADB)&lt;/strong> 是一种功能多样的命令行工具，可让您与设备进行通信。&lt;code>adb&lt;/code> 命令可用于执行各种设备操作，例如安装和调试应用。&lt;code>adb&lt;/code> 提供对 Unix shell（可用来在设备上运行各种命令）的访问权限。它是一种 C/S 架构程序，包括以下三个组件：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>adb&lt;/strong> 命令行工具，在开发机器上运行
&lt;ul>
&lt;li>&lt;strong>客户端&lt;/strong>：用于发送命令。客户端在开发机器上运行。您可以通过发出 &lt;code>adb&lt;/code> 命令从命令行终端调用客户端。&lt;/li>
&lt;li>&lt;strong>服务端&lt;/strong>：用于管理客户端与守护程序之间的通信。服务端在开发机器上作为后台进程运行。默认监听 5037 端口&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>adbd&lt;/strong> 守护程序，在设备上运行。守护程序在每个设备上作为后台进程运行，以接收 adb 服务端发来的各种指令。&lt;/li>
&lt;/ul>
&lt;p>adb 命令行工具作为客户端运行时，会先检查是否有服务端在运行，如果没有，则会执行 &lt;code>adb -L tcp:5037 fork-server server --reply-fd 4&lt;/code> 命令以启动 adb 服务端，默认监听在 5037 端口，并接收 adb 客户端发出的命令。&lt;/p>
&lt;p>而 adbd 守护程序，通常是设备上默认自带的进程，但是默认并没有启动，如果想要启用设备上的 adbd，需要开启 &lt;strong>USB 调试&lt;/strong>，该功能通常存在于&lt;strong>开发者选项&lt;/strong>中，参考&lt;a href="https://developer.android.com/studio/debug/dev-options?hl=zh-cn#enable">这里&lt;/a>来启用开发者选项。&lt;/p>
&lt;p>adb 服务端启动后会自动发现 USB 连接的设备、 安卓 Studio 模拟的设备，然后通过 &lt;code>adb devices -l&lt;/code> 可以列出这些设备。&lt;/p>
&lt;h3 id="adb-连接设备">ADB 连接设备&lt;/h3>
&lt;p>&lt;a href="https://blog.51cto.com/u_15549234/5139197">https://blog.51cto.com/u_15549234/5139197&lt;/a>&lt;/p>
&lt;p>我们可以通过两种方式让 adb 连接到设备&lt;/p>
&lt;ul>
&lt;li>本地连接&lt;/li>
&lt;li>无线连接&lt;/li>
&lt;/ul>
&lt;p>本利连接一般是通过 USB 连接真实设备或连接本地 安卓 Studio 模拟的设备。打开设备的 USB 调试并插上线，一般电脑都会自动发现设备。&lt;/p>
&lt;p>无线连接则可以通过 Wi-Fi 连接到设备。通常手机的开发者选项中，有一个 &lt;strong>无线调试&lt;/strong> 能力，启用后会让 adbd 监听在某个 IP:PORT 上，然后使用 &lt;code>adb connect IP:PORT&lt;/code> 即可通过网络连接到设备。&lt;/p>
&lt;h3 id="adb-使用">ADB 使用&lt;/h3>
&lt;p>adb 服务端连接到设备之后，就可以使用 adb &lt;!-- raw HTML omitted -->客户端向设备发送命令了&lt;!-- raw HTML omitted -->。最简单直接的方式是使用 &lt;code>adb shell&lt;/code> 命令打开一个 Shell，这就像使用 &lt;a href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E7%99%BB%E5%BD%95%20Linux%20%E4%B8%8E%20%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/Secure%20Shell(SSH)%20%E5%AE%89%E5%85%A8%E5%A4%96%E5%A3%B3%E5%8D%8F%E8%AE%AE/OpenSSH.md">OpenSSH&lt;/a> 类似，可以通过一个 Shell 访问 Android 系统。&lt;/p>
&lt;blockquote>
&lt;p>获取 Root 权限的设备（比如通过 Magisk 授予 Shell 超级用户权限）可以通过 &lt;code>su&lt;/code> 命令直接切换到 root 用户。&lt;/p>
&lt;/blockquote>
&lt;h1 id="syntax语法">Syntax(语法)&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://android.googlesource.com/platform/packages/modules/adb/+/refs/heads/master/docs/user/adb.1.md">Manual(手册)，adb(1)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>adb [GLOBAL_OPTIONS] command [COMMAND_OPTIONS]&lt;/strong>&lt;/p>
&lt;h2 id="global_options">GLOBAL_OPTIONS&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>-a&lt;/strong> # 监听所有网络接口，而不仅仅是本地主机&lt;/li>
&lt;li>&lt;strong>-s SERIAL&lt;/strong> # 指定要操作的设备（覆盖 $ANDROID_SERIAL），后续所有子命令都会对该选项指定的 device 进行控制。&lt;/li>
&lt;/ul>
&lt;h1 id="通用命令">通用命令&lt;/h1>
&lt;h2 id="devices---列出已连接的设备">devices - 列出已连接的设备&lt;/h2>
&lt;h1 id="网络命令">网络命令&lt;/h1>
&lt;h2 id="connect---通过-tcpip-连接到设备">connect - 通过 TCP/IP 连接到设备&lt;/h2>
&lt;h2 id="disconnect---断开通过-tcpip-连接的设备">disconnect - 断开通过 TCP/IP 连接的设备&lt;/h2>
&lt;h3 id="syntax语法-1">Syntax(语法)&lt;/h3>
&lt;p>disconnect [HOST[:PORT]]&lt;/p>
&lt;h1 id="文件传输命令">文件传输命令&lt;/h1>
&lt;ul>
&lt;li>push&lt;/li>
&lt;li>pull&lt;/li>
&lt;li>sync&lt;/li>
&lt;/ul>
&lt;h1 id="shell-命令">Shell 命令&lt;/h1>
&lt;ul>
&lt;li>shell&lt;/li>
&lt;/ul>
&lt;h1 id="应用安装命令">应用安装命令&lt;/h1>
&lt;ul>
&lt;li>install # 将单个包推送到设备并安装&lt;/li>
&lt;/ul>
&lt;h1 id="内部调试命令">内部调试命令&lt;/h1>
&lt;h1 id="最佳实践">最佳实践&lt;/h1>
&lt;p>代理配置&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 进入 shell&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>adb shell
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 查看代理&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>settings get global http_proxy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 设置代理&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>settings put global http_proxy 192.168.254.254:8888
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 取消代理&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>settings put global http_proxy :0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 或者注意删除代理信息&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>settings delete global http_proxy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>settings delete global global_http_proxy_host
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>settings delete global global_http_proxy_port
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Android</title><link>https://desistdaydream.github.io/docs/%E7%A7%BB%E5%8A%A8%E8%AE%BE%E5%A4%87/Android/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/%E7%A7%BB%E5%8A%A8%E8%AE%BE%E5%A4%87/Android/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.android.com/">官网&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Android 是一种 &lt;a href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/0.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%B1%BB%20Unix%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%B1%BB%20Unix%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.md">类 Unix 操作系统&lt;/a>，主要设计用于触摸屏移动设备，如智能手机和平板电脑。Android由一个名为开放手持设备联盟的开发者联盟开发，但其最广泛使用的版本主要由 Google 开发。它于2007年11月公布，第一款商用 Android 设备 HTC Dream 于2008年9月发布。&lt;/p>
&lt;p>&lt;strong>Device(设备)&lt;/strong> 通常指 手机、平板、手表、等等，甚至可以是安卓 Studio 模拟的设备。&lt;/p>
&lt;h1 id="目录结构">目录结构&lt;/h1>
&lt;p>安卓的目录结构与 &lt;a href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.Kernel/6.Filesystem/FHS(%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%B1%82%E6%AC%A1%E6%A0%87%E5%87%86).md">Linux 内核的目录结构&lt;/a>类似，但是有一些约定俗成的用于保存各类数据的目录&lt;/p>
&lt;h2 id="data--">/data # ？&lt;/h2>
&lt;ul>
&lt;li>/data/app/ # ?&lt;/li>
&lt;li>/data/data/ # ?&lt;/li>
&lt;/ul>
&lt;h2 id="sdcard">/sdcard&lt;/h2>
&lt;p>与 /storage/emulated/0 目录一样&lt;/p>
&lt;p>/sdcard 软链接到 /storage/self/primary&lt;/p>
&lt;p>/storage/self/primary 软链接到 /storage/emulated/0&lt;/p>
&lt;h2 id="storageemulated0">/storage/emulated/0/&lt;/h2>
&lt;p>这个好像是平时打开文件管理后看到的根目录（WSA 的文件管理也是在这个目录）&lt;/p>
&lt;ul>
&lt;li>.&lt;strong>/Android/data/${应用的包名}/&lt;/strong> # 应用的缓存和临时目录？&lt;/li>
&lt;/ul>
&lt;p>旧版本微信、QQ 接收文件存储路径为存储根目录的 Tencent 目录下，而新版微信接收文件路径切换到了 &lt;code>Android/data/com.tencent.mm/MicroMsg/Download&lt;/code> 目录下&lt;/p>
&lt;p>QQ 接收的文件也切换到了 &lt;code>Android/data/com.tencent.mobileqq/Tencent/QQfile_recv&lt;/code> 目录下&lt;/p></description></item><item><title>Docs: Android 开发</title><link>https://desistdaydream.github.io/docs/%E7%A7%BB%E5%8A%A8%E8%AE%BE%E5%A4%87/Android-%E5%BC%80%E5%8F%91/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/%E7%A7%BB%E5%8A%A8%E8%AE%BE%E5%A4%87/Android-%E5%BC%80%E5%8F%91/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://developer.android.com/">安卓开发者资源&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="android-studio">Android Studio&lt;/h1>
&lt;p>&lt;strong>Andriid Studio(安卓工作室)&lt;/strong> 是一款用于 Android 应用程序开发的官方 &lt;strong>Integrated Development Environment(集成开发环境，简称 IDE)&lt;/strong>，包含代码编辑器、构建工具、签名工具、SDK 工具等。&lt;/p>
&lt;h1 id="sdk-工具">SDK 工具&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://developer.android.com/tools">官方文档，SDK 工具&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="adb">ADB&lt;/h2>
&lt;p>详见 &lt;a href="docs/%E7%A7%BB%E5%8A%A8%E8%AE%BE%E5%A4%87/ADB.md">ADB&lt;/a>&lt;/p>
&lt;h1 id="最佳实践">最佳实践&lt;/h1>
&lt;h2 id="获取-root-权限">获取 Root 权限&lt;/h2>
&lt;p>Magisk &lt;a href="https://github.com/topjohnwu/Magisk">GitHub 项目，topjohnwu/Magisk&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/topjohnwu/Magisk/">https://github.com/topjohnwu/Magisk/&lt;/a> 对应用隐藏 Root 信息&lt;/p>
&lt;h2 id="其他">其他&lt;/h2>
&lt;p>使用 Magisk 的模块为系统添加 CA 证书&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/NVISOsecurity/MagiskTrustUserCerts">https://github.com/NVISOsecurity/MagiskTrustUserCerts&lt;/a> 2 年没更新了&lt;/li>
&lt;li>&lt;a href="https://github.com/nccgroup/ConscryptTrustUserCerts">https://github.com/nccgroup/ConscryptTrustUserCerts&lt;/a> # 适用于 andriod 14 ？
&lt;ul>
&lt;li>&lt;a href="https://github.com/nccgroup/ConscryptTrustUserCerts/issues/3">https://github.com/nccgroup/ConscryptTrustUserCerts/issues/3&lt;/a> 有了下面那个仓库&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://github.com/lupohan44/TrustUserCertificates">https://github.com/lupohan44/TrustUserCertificates&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>