<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – iptables(Netfilter 的实现)</title><link>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.Kernel%E5%86%85%E6%A0%B8/8.Network-%E7%AE%A1%E7%90%86/Linux-%E7%BD%91%E7%BB%9C%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/Netfilter-%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/iptablesNetfilter-%E7%9A%84%E5%AE%9E%E7%8E%B0/</link><description>Recent content in iptables(Netfilter 的实现) on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.Kernel%E5%86%85%E6%A0%B8/8.Network-%E7%AE%A1%E7%90%86/Linux-%E7%BD%91%E7%BB%9C%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/Netfilter-%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/iptablesNetfilter-%E7%9A%84%E5%AE%9E%E7%8E%B0/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: iptables 源码解析</title><link>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.Kernel%E5%86%85%E6%A0%B8/8.Network-%E7%AE%A1%E7%90%86/Linux-%E7%BD%91%E7%BB%9C%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/Netfilter-%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/iptablesNetfilter-%E7%9A%84%E5%AE%9E%E7%8E%B0/iptables-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.Kernel%E5%86%85%E6%A0%B8/8.Network-%E7%AE%A1%E7%90%86/Linux-%E7%BD%91%E7%BB%9C%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/Netfilter-%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/iptablesNetfilter-%E7%9A%84%E5%AE%9E%E7%8E%B0/iptables-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</guid><description>
&lt;p>原文链接：&lt;a href="https://mp.weixin.qq.com/s/O084fYzUFk7jAzJ2DDeADg">https://mp.weixin.qq.com/s/O084fYzUFk7jAzJ2DDeADg&lt;/a>&lt;/p>
&lt;p>大家好，我是飞哥！&lt;/p>
&lt;p>现在 iptables 这个工具的应用似乎是越来越广了。不仅仅是在传统的防火墙、NAT 等功能出现，在今天流行的的 Docker、Kubernets、Istio 项目中也经常能见着对它的身影。正因为如此，所以深入理解 iptables 工作原理是非常有价值的事情。&lt;/p>
&lt;p>Linux 内核网络栈是一个纯内核态的东西，和用户层功能是天然隔离。但为了迎合各种各样用户层不同的需求，内核开放了一些口子出来供用户干预。使得用户层可以通过一些配置，改变内核的工作方式，从而实现特殊的需求。&lt;/p>
&lt;p>Linux 在内核网络组件中很多关键位置布置了  netfilter  过滤器。Iptables 就是基于 netfilter 来实现的。所以本文中 iptables 和 netfilter 这两个名词有时候就混着用了。&lt;/p>
&lt;p>飞哥也在网上看过很多关于 netfilter 技术文章，但是我觉得都写的不够清晰。所以咱们撸起袖子，自己写一篇。Netfilter 的实现可以简单地归纳为四表五链。我们来详细看看四表、五链究竟是啥意思。&lt;/p>
&lt;h2 id="一iptables-中的五链">一、Iptables 中的五链&lt;/h2>
&lt;p>Linux 下的 netfilter 在内核协议栈的各个重要关卡埋下了五个钩子。每一个钩子都对应是一系列规则，以链表的形式存在，所以俗称&lt;strong>五链&lt;/strong>。当网络包在协议栈中流转到这些关卡的时候，就会依次执行在这些钩子上注册的各种规则，进而实现对网络包的各种处理。&lt;/p>
&lt;p>要想把五链理解好，飞哥认为&lt;strong>最关键是要把内核接收、发送、转发三个过程分开来看&lt;/strong>。&lt;/p>
&lt;h3 id="11-接收过程">1.1 接收过程&lt;/h3>
&lt;p>Linux 在网络包接收在 IP 层的入口函数是 ip_rcv。网络在这里包碰到的第一个 HOOK 就是 PREROUTING。当该钩子上的规则都处理完后，会进行路由选择。如果发现是本设备的网络包，进入 ip_local_deliver 中，在这里又会遇到 INPUT 钩子。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/b62be505-720a-465f-9eb2-322fd17c3f13/640" alt="">&lt;/p>
&lt;p>我们来看下详细的代码，先看 ip_rcv。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//file: net/ipv4/ip_input.c
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">ip_rcv&lt;/span>(&lt;span style="color:#66d9ef">struct&lt;/span> sk_buff &lt;span style="color:#f92672">*&lt;/span>skb, ......){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ......
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">NF_HOOK&lt;/span>(NFPROTO_IPV4, NF_INET_PRE_ROUTING, skb, dev, NULL,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ip_rcv_finish);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>NF_HOOK 这个函数会执行到 iptables 中 pre_routing 里的各种表注册的各种规则。当处理完后，进入 ip_rcv_finish。在这里函数里将进行路由选择。这也就是 PREROUTING 这一链名字得来的原因，因为是在路由前执行的。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//file: net/ipv4/ip_input.c
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">ip_rcv_finish&lt;/span>(&lt;span style="color:#66d9ef">struct&lt;/span> sk_buff &lt;span style="color:#f92672">*&lt;/span>skb){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>&lt;span style="color:#a6e22e">skb_dst&lt;/span>(skb)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> err &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">ip_route_input_noref&lt;/span>(skb, iph&lt;span style="color:#f92672">-&amp;gt;&lt;/span>daddr, iph&lt;span style="color:#f92672">-&amp;gt;&lt;/span>saddr,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> iph&lt;span style="color:#f92672">-&amp;gt;&lt;/span>tos, skb&lt;span style="color:#f92672">-&amp;gt;&lt;/span>dev);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">dst_input&lt;/span>(skb);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果发现是本地设备上的接收，会进入 ip_local_deliver 函数。接着是又会执行到 LOCAL_IN 钩子，这也就是我们说的 INPUT 链。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//file: net/ipv4/ip_input.c
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">ip_local_deliver&lt;/span>(&lt;span style="color:#66d9ef">struct&lt;/span> sk_buff &lt;span style="color:#f92672">*&lt;/span>skb){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ......
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">NF_HOOK&lt;/span>(NFPROTO_IPV4, NF_INET_LOCAL_IN, skb, skb&lt;span style="color:#f92672">-&amp;gt;&lt;/span>dev, NULL,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ip_local_deliver_finish);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>简单总结接收数据的处理流程是：&lt;strong>PREROUTING 链  -&amp;gt; 路由判断（是本机）-&amp;gt; INPUT 链&lt;/strong> -&amp;gt; &amp;hellip;&lt;/p>
&lt;h3 id="12-发送过程">1.2 发送过程&lt;/h3>
&lt;p>Linux 在网络包发送的过程中，首先是发送的路由选择，然后碰到的第一个 HOOK 就是 OUTPUT，然后接着进入 POSTROUTING 链。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/b62be505-720a-465f-9eb2-322fd17c3f13/640" alt="">&lt;/p>
&lt;p>来大致过一下源码，网络层发送的入口函数是 ip_queue_xmit。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//file: net/ipv4/ip_output.c
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">ip_queue_xmit&lt;/span>(&lt;span style="color:#66d9ef">struct&lt;/span> sk_buff &lt;span style="color:#f92672">*&lt;/span>skb, &lt;span style="color:#66d9ef">struct&lt;/span> flowi &lt;span style="color:#f92672">*&lt;/span>fl)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 路由选择过程
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 选择完后记录路由信息到 skb 上
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> rt &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#66d9ef">struct&lt;/span> rtable &lt;span style="color:#f92672">*&lt;/span>)&lt;span style="color:#a6e22e">__sk_dst_check&lt;/span>(sk, &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (rt &lt;span style="color:#f92672">==&lt;/span> NULL) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 没有缓存则查找路由项
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> rt &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">ip_route_output_ports&lt;/span>(...);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">sk_setup_caps&lt;/span>(sk, &lt;span style="color:#f92672">&amp;amp;&lt;/span>rt&lt;span style="color:#f92672">-&amp;gt;&lt;/span>dst);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">skb_dst_set_noref&lt;/span>(skb, &lt;span style="color:#f92672">&amp;amp;&lt;/span>rt&lt;span style="color:#f92672">-&amp;gt;&lt;/span>dst);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//发送
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">ip_local_out&lt;/span>(skb);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在这里先进行了发送时的路由选择，然后进入发送时的 IP 层函数 __ip_local_out。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//file: net/ipv4/ip_output.c
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">__ip_local_out&lt;/span>(&lt;span style="color:#66d9ef">struct&lt;/span> sk_buff &lt;span style="color:#f92672">*&lt;/span>skb)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> iphdr &lt;span style="color:#f92672">*&lt;/span>iph &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">ip_hdr&lt;/span>(skb);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>iph&lt;span style="color:#f92672">-&amp;gt;&lt;/span>tot_len &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">htons&lt;/span>(skb&lt;span style="color:#f92672">-&amp;gt;&lt;/span>len);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ip_send_check&lt;/span>(iph);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">nf_hook&lt;/span>(NFPROTO_IPV4, NF_INET_LOCAL_OUT, skb, NULL,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">skb_dst&lt;/span>(skb)&lt;span style="color:#f92672">-&amp;gt;&lt;/span>dev, dst_output);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面的 NF_HOOK 将发送数据包送入到 NF_INET_LOCAL_OUT (OUTPUT) 链。执行完后，进入 dst_output。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//file: include/net/dst.h
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">inline&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">dst_output&lt;/span>(&lt;span style="color:#66d9ef">struct&lt;/span> sk_buff &lt;span style="color:#f92672">*&lt;/span>skb)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">skb_dst&lt;/span>(skb)&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">output&lt;/span>(skb);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在这里获取到之前的选路，并调用选到的 output 发送。将进入 ip_output。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//file: net/ipv4/ip_output.c
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">ip_output&lt;/span>(&lt;span style="color:#66d9ef">struct&lt;/span> sk_buff &lt;span style="color:#f92672">*&lt;/span>skb)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//再次交给 netfilter，完毕后回调 ip_finish_output
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">NF_HOOK_COND&lt;/span>(NFPROTO_IPV4, NF_INET_POST_ROUTING, skb, NULL, dev,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ip_finish_output,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">!&lt;/span>(&lt;span style="color:#a6e22e">IPCB&lt;/span>(skb)&lt;span style="color:#f92672">-&amp;gt;&lt;/span>flags &lt;span style="color:#f92672">&amp;amp;&lt;/span> IPSKB_REROUTED));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>总结下发送数据包流程是：&lt;strong>路由选择&lt;/strong> -&amp;gt; &lt;strong>OUTPUT 链&lt;/strong>-&amp;gt; &lt;strong>POSTROUTING 链&lt;/strong> -&amp;gt; &amp;hellip;&lt;/p>
&lt;h3 id="13-转发过程">1.3 转发过程&lt;/h3>
&lt;p>其实除了接收和发送过程以外，Linux 内核还可以像路由器一样来工作。它将接收到网络包（不属于自己的），然后根据路由表选到合适的网卡设备将其转发出去。&lt;/p>
&lt;p>这个过程中，先是经历接收数据的前半段。在 ip_rcv 中经过 PREROUTING 链，然后路由后发现不是本设备的包，那就进入 ip_forward 函数进行转发，在这里又会遇到 FORWARD 链。最后还会进入 ip_output 进行真正的发送，遇到 POSTROUTING 链。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/b62be505-720a-465f-9eb2-322fd17c3f13/640" alt="">&lt;/p>
&lt;p>我们来过一下源码，先是进入 IP 层入口 ip_rcv，在这里遇到 PREROUTING 链。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//file: net/ipv4/ip_input.c
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">ip_rcv&lt;/span>(&lt;span style="color:#66d9ef">struct&lt;/span> sk_buff &lt;span style="color:#f92672">*&lt;/span>skb, ......){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ......
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">NF_HOOK&lt;/span>(NFPROTO_IPV4, NF_INET_PRE_ROUTING, skb, dev, NULL,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ip_rcv_finish);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>PREROUTING 链条上的规则都处理完后，进入 ip_rcv_finish，在这里路由选择，然后进入 dst_input。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//file: include/net/dst.h
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">inline&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">dst_input&lt;/span>(&lt;span style="color:#66d9ef">struct&lt;/span> sk_buff &lt;span style="color:#f92672">*&lt;/span>skb)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">skb_dst&lt;/span>(skb)&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">input&lt;/span>(skb);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>转发过程的这几步和接收过程一模一样的。不过内核路径就要从上面的 input 方法调用开始分道扬镳了。非本设备的不会进入 ip_local_deliver，而是会进入到 ip_forward。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//file: net/ipv4/ip_forward.c
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">ip_forward&lt;/span>(&lt;span style="color:#66d9ef">struct&lt;/span> sk_buff &lt;span style="color:#f92672">*&lt;/span>skb)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ......
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">NF_HOOK&lt;/span>(NFPROTO_IPV4, NF_INET_FORWARD, skb, skb&lt;span style="color:#f92672">-&amp;gt;&lt;/span>dev,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rt&lt;span style="color:#f92672">-&amp;gt;&lt;/span>dst.dev, ip_forward_finish);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 ip_forward_finish 里会送到 IP 层的发送函数 ip_output。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//file: net/ipv4/ip_output.c
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">ip_output&lt;/span>(&lt;span style="color:#66d9ef">struct&lt;/span> sk_buff &lt;span style="color:#f92672">*&lt;/span>skb)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//再次交给 netfilter，完毕后回调 ip_finish_output
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">NF_HOOK_COND&lt;/span>(NFPROTO_IPV4, NF_INET_POST_ROUTING, skb, NULL, dev,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ip_finish_output,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">!&lt;/span>(&lt;span style="color:#a6e22e">IPCB&lt;/span>(skb)&lt;span style="color:#f92672">-&amp;gt;&lt;/span>flags &lt;span style="color:#f92672">&amp;amp;&lt;/span> IPSKB_REROUTED));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 ip_output 里会遇到 POSTROUTING 链。再后面的流程就和发送过程的下半段一样了。&lt;/p>
&lt;p>总结下转发数据过程：&lt;strong>PREROUTING 链&lt;/strong> -&amp;gt; 路由判断（不是本设备，找到下一跳） -&amp;gt; &lt;strong>FORWARD 链&lt;/strong> -&amp;gt; &lt;strong>POSTROUTING 链&lt;/strong> -&amp;gt; &amp;hellip;&lt;/p>
&lt;h3 id="14-iptables-汇总">1.4 iptables 汇总&lt;/h3>
&lt;p>理解了接收、发送和转发三个过程以后，让我们把上面三个流程汇总起来。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/b62be505-720a-465f-9eb2-322fd17c3f13/640" alt="">&lt;/p>
&lt;p>数据&lt;strong>接收过程&lt;/strong>走的是 1 和 2，&lt;strong>发送过程&lt;/strong>走的是 4 、5，&lt;strong>转发过程&lt;/strong>是 1、3、5。有了这张图，我们能更清楚地理解 iptables 和内核的关系。&lt;/p>
&lt;h2 id="二iptables-的四表">二、Iptables 的四表&lt;/h2>
&lt;p>在上一节中，我们介绍了 iptables 中的五个链。在每一个链上都可能是由许多个规则组成的。在 NF_HOOK 执行到这个链的时候，就会把规则按照优先级挨个过一遍。如果有符合条件的规则，则执行规则对应的动作。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/b62be505-720a-465f-9eb2-322fd17c3f13/640" alt="">&lt;/p>
&lt;p>而这些规则根据用途的不同，又可以 raw、mangle、nat 和 filter。&lt;/p>
&lt;ul>
&lt;li>row 表的作用是将命中规则的包，跳过其它表的处理，它的优先级最高。&lt;/li>
&lt;li>mangle 表的作用是根据规则修改数据包的一些标志位，比如 TTL&lt;/li>
&lt;li>nat 表的作用是实现网络地址转换&lt;/li>
&lt;li>filter 表的作用是过滤某些包，这是防火墙工作的基础&lt;/li>
&lt;/ul>
&lt;p>例如在 PREROUTING 链中的规则中，分别可以执行 row、mangle 和 nat 三种功能。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/b62be505-720a-465f-9eb2-322fd17c3f13/640" alt="">&lt;/p>
&lt;p>我们再来聊聊，为什么不是全部四个表呢。这是由于功能的不同，不是所有功能都会完全使用到五个链。&lt;/p>
&lt;p>Raw 表目的是跳过其它表，所以只需要在接收和发送两大过程的最开头处把关，所以只需要用到 PREROUTING 和 OUTPUT 两个钩子。&lt;/p>
&lt;p>Mangle 表有可能会在任意位置都有可能会修改网络包，所以它是用到了全部的钩子位置。&lt;/p>
&lt;p>NAT 分为 SNAT（Source NAT）和 DNAT（Destination NAT）两种，可能会工作在 PREROUTING、INPUT、OUTPUT、POSTROUTING 四个位置。&lt;/p>
&lt;p>Filter 只在 INPUT、OUTPUT 和 FORWARD 这三步中工作就够了。&lt;/p>
&lt;p>从整体上看，四链五表的关系如下图。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/b62be505-720a-465f-9eb2-322fd17c3f13/640" alt="">&lt;/p>
&lt;p>这里再多说一点，每个命名空间都是有自己独立的 iptables 规则的。我们拿 NAT 来举例，内核在遍历 NAT 规则的时候，是从 net（命名空间变量）的 ipv4.nat_table 上取下来的。NF_HOOK 最终会执行到 nf_nat_rule_find 函数。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//file: net/ipv4/netfilter/iptable_nat.c
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">nf_nat_rule_find&lt;/span>(...)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> net &lt;span style="color:#f92672">*&lt;/span>net &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">nf_ct_net&lt;/span>(ct);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> ret;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//重要!!!!!! nat_table 是在 namespace 中存储着的
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> ret &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">ipt_do_table&lt;/span>(skb, hooknum, in, out, net&lt;span style="color:#f92672">-&amp;gt;&lt;/span>ipv4.nat_table);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (ret &lt;span style="color:#f92672">==&lt;/span> NF_ACCEPT) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>&lt;span style="color:#a6e22e">nf_nat_initialized&lt;/span>(ct, &lt;span style="color:#a6e22e">HOOK2MANIP&lt;/span>(hooknum)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ret &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">alloc_null_binding&lt;/span>(ct, hooknum);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> ret;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Docker 容器就是基于命名空间来工作的，所以每个 Docker 容器中都可以配置自己独立的 iptables 规则。&lt;/p>
&lt;h2 id="三iptables-使用举例">三、Iptables 使用举例&lt;/h2>
&lt;p>看完前面两小节，大家已经理解了四表五链是如何实现的了。那我们接下来通过几个实际的功能来看下实践中是如何使用 iptables 的。&lt;/p>
&lt;h3 id="31-nat">3.1 nat&lt;/h3>
&lt;p>假如说我们有一台 Linux，它的 eth0 的 IP 是 10.162.0.100，通过这个 IP 可以访问另外其它服务器。现在我们在这台机器上创建了个 Docker 虚拟网络环境 net1 出来，它的网卡 veth1 的 IP 是 192.168.0.2。&lt;/p>
&lt;p>如果想让 192.168.0.2 能访问外部网络，则需要宿主网络命名空间下的设备工作帮其进行网络包转发。由于这是个私有的地址，只有这台 Linux 认识，所以它是无法访问外部的服务器的。这个时候如果想要让 net1 正常访问 10.162.0.101，就必须在转发时执行 SNAT - 源地址替换。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/b62be505-720a-465f-9eb2-322fd17c3f13/640" alt="">&lt;/p>
&lt;p>SNAT 工作在路由之后，网络包发送之前，也就是 POSTROUTING 链。我们在宿主机的命名空间里增加如下这条 iptables 规则。这条规则判断如果源是 192.168.0 网段，且目的不是 br0 的，统统执行源 IP 替换判断。&lt;/p>
&lt;p>&lt;code># iptables -t nat -A POSTROUTING -s 192.168.0.0/24 ! -o br0 -j MASQUERADE&lt;/code>&lt;/p>
&lt;p>有了这条规则，我们来看下整个发包过程。&lt;/p>
&lt;p>当数据包发出来的时候，先从 veth 发送到 br0。由于 br0 在宿主机的命名空间中，这样会执行到 POSTROUTING 链。在这个链有我们刚配置的 snat 规则。根据这条规则，内核将网络包中 192.168.0.2（外界不认识） 替换成母机的 IP 10.162.0.100（外界都认识）。同时还要跟踪记录链接状态。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/b62be505-720a-465f-9eb2-322fd17c3f13/640" alt="">&lt;/p>
&lt;p>然后宿主机根据自己的路由表进行判断，选择默认发送设备将包从 eth0 网卡发送出去，直到送到 10.162.0.101。&lt;/p>
&lt;p>接下来在 10.162.0.100 上会收到来自 10.162.0.101 的响应包。由于上一步记录过链接跟踪，所以宿主机能知道这个回包是给 192.168.0.2 的。再反替换并通过 br0 将返回送达正确的 veth 上。&lt;/p>
&lt;p>这样 net1 环境中的 veth1  就可以访问外部网络服务了。&lt;/p>
&lt;h3 id="32-dnat-目的地址替换">3.2 DNAT 目的地址替换&lt;/h3>
&lt;p>接着上面小节里的例子，假设我们想在 192.168.0.2 上提供 80 端口的服务。同样，外面的服务器是无法访问这个地址的。这个时候要用到 DNAT 目的地址替换。需要在数据包进来的时候，将其目的地址替换成 192.168.0.2:80 才行。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/b62be505-720a-465f-9eb2-322fd17c3f13/640" alt="">&lt;/p>
&lt;p>DNAT 工作在内核接收到网络包的第一个链中，也就是 PREROUTING。我们增加一条 DNAT 规则，具体的配置如下。&lt;/p>
&lt;pre>&lt;code># iptables -t nat -A PREROUTING  ! -i br0 -p tcp -m tcp --dport 8088 -j DNAT --to-destination 192.168.0.2:80
&lt;/code>&lt;/pre>
&lt;p>当有外界来的网络包到达 eth0 的时候。由于 eth0 在母机的命名空间中，所以会执行到 PREROUTING 链。&lt;/p>
&lt;p>该规则判断如果端口是 8088 的 TCP 请求，则将目的地址替换为 192.168.0.2:80。再通过 br0（192.168.0.1）转发数据包，数据包将到达真正提供服务的 192.168.0.2:80 上。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/b62be505-720a-465f-9eb2-322fd17c3f13/640" alt="">&lt;/p>
&lt;p>同样在 DNAT 中也会有链接跟踪记录，所以  192.168.0.2 给 10.162.0.101 的返回包中的源地址会被替换成 10.162.0.100:8088。之后  10.162.0.101 收到包，它一直都以为自己是真的和  10.162.0.100:8088 通信。&lt;/p>
&lt;p>这样 net1 环境中的 veth1 也可以提供服务给外网使用了。事实上，单机的 Docker 就是通过这两小节介绍的 SNAT 和 DNAT 配置来进行网络通信的。&lt;/p>
&lt;h3 id="33filter">3.3 filter&lt;/h3>
&lt;p>Filter 表主要实现网络包的过滤。假如我们发现了一个恶意 IP 疯狂请求我们的服务器，对服务造成了影响。那么我们就可以用 filter 把它禁掉。其工作原理就是在接收包的 INPUT 链位置处进行判断，发现是恶意请求就尽早干掉不处理。避免进入到更上层继续浪费 CPU 开销。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/b62be505-720a-465f-9eb2-322fd17c3f13/640" alt="">&lt;/p>
&lt;p>具体的配置方法细节如下：&lt;/p>
&lt;p>&lt;code># iptables -I INPUT -s 1.2.3.4 -j DROP //封禁 # iptables -D INPUT -s 1.2.3.4 -j DROP //解封&lt;/code>&lt;/p>
&lt;p>当然也可以封禁某个 IP 段。&lt;/p>
&lt;p>&lt;code># iptables -I INPUT -s 121.0.0.0/8 -j DROP //封禁 # iptables -I INPUT -s 121.0.0.0/8 -j DROP //解封&lt;/code>&lt;/p>
&lt;p>再比如说假设你不想让别人任意 ssh 登录你的服务器，只允许你的 IP 访问。那就只放开你自己的 IP，其它的都禁用掉就好了。&lt;/p>
&lt;p>&lt;code># iptables -t filter -I INPUT -s 1.2.3.4 -p tcp --dport 22 -j ACCEPT&lt;/code>
&lt;code># iptables -t filter -I INPUT -p tcp --dport 22 -j DROP&lt;/code>&lt;/p>
&lt;h3 id="34raw">3.4 raw&lt;/h3>
&lt;p>Raw 表中的规则可以绕开其它表的处理。在 nat 表中，为了保证双向的流量都能正常完成地址替换，会跟踪并且记录链接状态。每一条连接都会有对应的记录生成。使用以下两个命令可以查看。&lt;/p>
&lt;p>&lt;code># conntrack -L  # cat /proc/net/ip_conntrack&lt;/code>&lt;/p>
&lt;p>但在高流量的情况下，可能会有连接跟踪记录满的问题发生。我就遇到过一次在测试单机百万并发连接的时候，发生因连接数超过了 nf_conntrack_max 而导致新连接无法建立的问题。&lt;/p>
&lt;p>&lt;code># ip_conntrack: table full, dropping packet&lt;/code>&lt;/p>
&lt;p>但其实如果不使用 NAT 功能的话，链接跟踪功能是可以关闭的，例如。&lt;/p>
&lt;p>&lt;code># iptables -t raw -A PREROUTING -d 1.2.3.4 -p tcp --dport 80 -j NOTRACK&lt;/code>
&lt;code># iptables -A FORWARD -m state --state UNTRACKED -j ACCEPT&lt;/code>&lt;/p>
&lt;h3 id="35mangle">3.5 mangle&lt;/h3>
&lt;p>路由器在转发网络包的时候，ttl 值会减 1 ，该值为 0 时，最后一个路由就会停止再转发这个数据包。如若不想让本次路由影响 ttl，便可以在 mangel 表中加个 1，把它给补回来。&lt;/p>
&lt;p>&lt;code># ptables -t mangle -A PREROUTING -i eth0 -j TTL --ttl-inc 1&lt;/code>&lt;/p>
&lt;p>所有从 eth0 接口进来的数据包的 ttl 值加 1，以抵消路由转发默认减的 1。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>Iptables 是一个非常常用，也非常重要的工具。Linux 上的防火墙、nat 等基础功能都是基于它实现的。还有现如今流行的的 Docker、Kubernets、Istio 项目中也经常能见着对它的身影。正因为如此，所以深入理解 iptables 工作原理是非常有价值的事情。&lt;/p>
&lt;p>今天我们先是在第一节里从内核接收、发送、转发三个不同的过程理解了五链的位置。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/b62be505-720a-465f-9eb2-322fd17c3f13/640" alt="">&lt;/p>
&lt;p>接着又根据描述了 iptables 从功能上看的另外一个维度，表。每个表都是在多个钩子位置处注册自己的规则。当处理包的时候触发规则，并执行。从整体上看，四链五表的关系如下图。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/b62be505-720a-465f-9eb2-322fd17c3f13/640" alt="">&lt;/p>
&lt;p>最后我们又分别在 raw、mangle、nat、filter 几个表上举了简单的应用例子。希望通过今天的学习，你能将 iptables 彻底融会贯通。相信这一定会对你的工作有很大的帮助的！&lt;/p></description></item><item><title>Docs: 使用 iptables 对多租户环境中的 TCP 限速</title><link>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.Kernel%E5%86%85%E6%A0%B8/8.Network-%E7%AE%A1%E7%90%86/Linux-%E7%BD%91%E7%BB%9C%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/Netfilter-%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/iptablesNetfilter-%E7%9A%84%E5%AE%9E%E7%8E%B0/%E4%BD%BF%E7%94%A8-iptables-%E5%AF%B9%E5%A4%9A%E7%A7%9F%E6%88%B7%E7%8E%AF%E5%A2%83%E4%B8%AD%E7%9A%84-TCP-%E9%99%90%E9%80%9F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.Kernel%E5%86%85%E6%A0%B8/8.Network-%E7%AE%A1%E7%90%86/Linux-%E7%BD%91%E7%BB%9C%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/Netfilter-%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/iptablesNetfilter-%E7%9A%84%E5%AE%9E%E7%8E%B0/%E4%BD%BF%E7%94%A8-iptables-%E5%AF%B9%E5%A4%9A%E7%A7%9F%E6%88%B7%E7%8E%AF%E5%A2%83%E4%B8%AD%E7%9A%84-TCP-%E9%99%90%E9%80%9F/</guid><description>
&lt;p>&lt;a href="https://mp.weixin.qq.com/s/n7bRJb-u5bzIj4TMb8JE-A">使用 iptables 对多租户环境中的 TCP 限速&lt;/a>&lt;/p>
&lt;p>我们有个服务以类似 SideCar 的方式和应用一起运行，SideCar 和应用通过 Unix Domain Socket 进行通讯。为了方便用户，在开发的时候不必在自己的开发环境中跑一个 SideCar，我用 socat 在一台开发环境的机器上 map UDS 到一个端口。这样用户在开发的时候就可以直接通过这个 TCP 端口测试服务，而不用自己开一个 SideCar 使用 UDS 了。&lt;/p>
&lt;p>因为所有人都要用这一个地址做开发，所以就有互相影响的问题。虽然性能还可以，几十万 QPS 不成问题，但是总有憨憨拿来搞压测，把资源跑满，影响别人。我在使用说明文档里用红色大字写了这是开发测试用的，不能压测，还是有一些视力不好的同事会强行压测。隔三差五我就得去解释一番，礼貌地请同事不要再这样做了。&lt;/p>
&lt;p>最近实在累了。研究了一下直接给这个端口加上 per IP 的 rate limit，效果还不错。方法是在 Per-IP rate limiting with iptables[1] 学习到的，这个公司是提供一个多租户的 SaaS 服务，也有类似的问题：有一些非正常用户 abuse 他们的服务，由于 abuse 发生在连接建立阶段，还没有进入到业务代码，所以无法从应用的层面进行限速，解决发现就是通过 iptables 实现的。详细的实现方法可以参考这篇文章。&lt;/p>
&lt;p>iptables 本身是无状态的，每一个进入的 packet 都单独判断规则。rate limit 显然是一个有状态的规则，所以要用到 module: &lt;code>hashlimit&lt;/code>。（原文中还用到了 &lt;code>conntrack&lt;/code>，他是想只针对新建连接做限制，已经建立的连接不限制速度了。因为这个应用内部就可以控制了，但是我这里是想对所有的 packet 进行限速，所以就不需要用到这个 module）&lt;/p>
&lt;p>完整的命令如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ iptables --new-chain SOCAT-RATE-LIMIT
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ iptables --append SOCAT-RATE-LIMIT &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --match hashlimit &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --hashlimit-mode srcip &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --hashlimit-upto 50/sec &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --hashlimit-burst &lt;span style="color:#ae81ff">100&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --hashlimit-name conn_rate_limit &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --jump ACCEPT
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ iptables --append SOCAT-RATE-LIMIT --jump DROP
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ iptables -I INPUT -p tcp --dport &lt;span style="color:#ae81ff">1234&lt;/span> --jump SOCAT-RATE-LIMIT
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>第一行是新建一个 iptables Chain，做 rate limit；&lt;/p>
&lt;p>第二行处理如果在 rate limit 限额内，就接受包；否则跳到第三行，直接将包 DROP；&lt;/p>
&lt;p>最后将新的 Chain 加入到 INPUT 中，对此端口的流量进行限制。&lt;/p>
&lt;p>有关 rate limit 的算法，主要是两个参数：&lt;/p>
&lt;ol>
&lt;li>&lt;code>--hashlimit-upto&lt;/code> 其实本质上是 1s 内可以进入多少 packet，&lt;code>50/sec&lt;/code> 就是 &lt;code>20ms&lt;/code> 一个 packet；&lt;/li>
&lt;li>那如何在 &lt;code>10ms&lt;/code> 发来 10 个 packet，后面一直没发送，怎么办？这个在测试情景下也比较常见，不能要求用户一直匀速地发送。所以就要用到 &lt;code>--hashlimit-burst&lt;/code>。字面意思是瞬间可以发送多少 packet，但实际上，可以理解这个参数就是可用的 credit。&lt;/li>
&lt;/ol>
&lt;p>两个指标配合起来理解，就是每个 ip 刚开始都会有 &lt;code>burst&lt;/code> 个 credit，每个 ip 发送来的 packet 都会占用 &lt;code>burst&lt;/code> 里面的 credit，用完了之后再发来的包就会被直接 DROP。这个 credit 会以 &lt;code>upto&lt;/code> 的速度一直增加，但是最多增加到 &lt;code>burst&lt;/code>（初始值），之后就 &lt;em>use it or lost it&lt;/em>.&lt;/p>
&lt;p>举个例子，假如 &lt;code>--hashlimit-upto 50/sec --hashlimit-burst 20&lt;/code> 的话，某个 IP 以匀速每 ms 一个 packet 的速度发送，最终会有多少 packets 被接受？答案是 70. 最初的 20ms，所有的 packet 都会被接受，因为 &lt;code>--hashlimit-burst&lt;/code> 是 20，所以最初的 credit 是 20. 这个用完之后就要依赖 &lt;code>--hashlimit--upto 50/sec&lt;/code> 来每 20ms 获得一个 packet credit 了。所以每 20ms 可以接受一个。&lt;/p>
&lt;p>这是限速之后的效果，非常明显：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/3af7c350-867e-429b-be82-d0a4816715c0/640" alt="">&lt;/p>
&lt;blockquote>
&lt;p>原文链接：&lt;a href="https://www.kawabangga.com/posts/4594">https://www.kawabangga.com/posts/4594&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h3 id="参考资料">参考资料&lt;/h3>
&lt;p>[1]&lt;/p>
&lt;p>Per-IP rate limiting with iptables: &lt;a href="https://making.pusher.com/per-ip-rate-limiting-with-iptables/index.html">&lt;em>https://making.pusher.com/per-ip-rate-limiting-with-iptables/index.html&lt;/em>&lt;/a>&lt;/p></description></item></channel></rss>