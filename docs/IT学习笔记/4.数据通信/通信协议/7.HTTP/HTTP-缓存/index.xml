<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – HTTP 缓存</title><link>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/7.HTTP/HTTP-%E7%BC%93%E5%AD%98/</link><description>Recent content in HTTP 缓存 on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/7.HTTP/HTTP-%E7%BC%93%E5%AD%98/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: 告别 HTTP</title><link>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/7.HTTP/HTTP-%E7%BC%93%E5%AD%98/%E5%91%8A%E5%88%AB-HTTP/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/7.HTTP/HTTP-%E7%BC%93%E5%AD%98/%E5%91%8A%E5%88%AB-HTTP/</guid><description>
&lt;h2 id="http-特性">HTTP 特性&lt;/h2>
&lt;h3 id="http11-的优点有哪些">HTTP（1.1） 的优点有哪些？&lt;/h3>
&lt;p>HTTP 最凸出的优点是「简单、灵活和易于扩展、应用广泛和跨平台」。&lt;/p>
&lt;p>&lt;em>1. 简单&lt;/em>&lt;/p>
&lt;p>HTTP 基本的报文格式就是 &lt;code>header + body&lt;/code>，头部信息也是 &lt;code>key-value&lt;/code> 简单文本的形式，&lt;strong>易于理解&lt;/strong>，降低了学习和使用的门槛。&lt;/p>
&lt;p>&lt;em>2. 灵活和易于扩展&lt;/em>&lt;/p>
&lt;p>HTTP 协议里的各类请求方法、URI/URL、状态码、头字段等每个组成要求都没有被固定死，都允许开发人员&lt;strong>自定义和扩充&lt;/strong>。&lt;/p>
&lt;p>同时 HTTP 由于是工作在应用层（ &lt;code>OSI&lt;/code> 第七层），则它&lt;strong>下层可以随意变化&lt;/strong>。&lt;/p>
&lt;p>HTTPS 也就是在 HTTP 与 TCP 层之间增加了 SSL/TLS 安全传输层，HTTP/3 甚至把 TCP 层换成了基于 UDP 的 QUIC。&lt;/p>
&lt;p>&lt;em>3. 应用广泛和跨平台&lt;/em>&lt;/p>
&lt;p>互联网发展至今，HTTP 的应用范围非常的广泛，从台式机的浏览器到手机上的各种 APP，从看新闻、刷贴吧到购物、理财、吃鸡，HTTP 的应用遍地开花，同时天然具有&lt;strong>跨平台&lt;/strong>的优越性。&lt;/p>
&lt;h3 id="http11-的缺点有哪些">HTTP（1.1） 的缺点有哪些？&lt;/h3>
&lt;p>HTTP 协议里有优缺点一体的&lt;strong>双刃剑&lt;/strong>，分别是「无状态、明文传输」，同时还有一大缺点「不安全」。&lt;/p>
&lt;p>&lt;em>1. 无状态双刃剑&lt;/em>&lt;/p>
&lt;p>无状态的&lt;strong>好处&lt;/strong>，因为服务器不会去记忆 HTTP 的状态，所以不需要额外的资源来记录状态信息，这能减轻服务器的负担，能够把更多的 CPU 和内存用来对外提供服务。&lt;/p>
&lt;p>无状态的&lt;strong>坏处&lt;/strong>，既然服务器没有记忆能力，它在完成有关联性的操作时会非常麻烦。&lt;/p>
&lt;p>例如登录-&amp;gt;添加购物车-&amp;gt;下单-&amp;gt;结算-&amp;gt;支付，这系列操作都要知道用户的身份才行。但服务器不知道这些请求是有关联的，每次都要问一遍身份信息。&lt;/p>
&lt;p>这样每操作一次，都要验证信息，这样的购物体验还能愉快吗？别问，问就是&lt;strong>酸爽&lt;/strong>！&lt;/p>
&lt;p>对于无状态的问题，解法方案有很多种，其中比较简单的方式用 &lt;strong>Cookie&lt;/strong> 技术。&lt;/p>
&lt;p>&lt;code>Cookie&lt;/code> 通过在请求和响应报文中写入 Cookie 信息来控制客户端的状态。&lt;/p>
&lt;p>相当于，&lt;strong>在客户端第一次请求后，服务器会下发一个装有客户信息的「小贴纸」，后续客户端请求服务器的时候，带上「小贴纸」，服务器就能认得了了&lt;/strong>，&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/dpbdo4/640" alt="">&lt;/p>
&lt;p>Cookie 技术&lt;/p>
&lt;p>&lt;em>2. 明文传输双刃剑&lt;/em>&lt;/p>
&lt;p>明文意味着在传输过程中的信息，是可方便阅读的，通过浏览器的 F12 控制台或 Wireshark 抓包都可以直接肉眼查看，为我们调试工作带了极大的便利性。&lt;/p>
&lt;p>但是这正是这样，HTTP 的所有信息都暴露在了光天化日下，相当于&lt;strong>信息裸奔&lt;/strong>。在传输的漫长的过程中，信息的内容都毫无隐私可言，很容易就能被窃取，如果里面有你的账号密码信息，那&lt;strong>你号没了&lt;/strong>。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/dpbdo4/640" alt="">&lt;/p>
&lt;p>&lt;em>3. 不安全&lt;/em>&lt;/p>
&lt;p>HTTP 比较严重的缺点就是不安全：&lt;/p>
&lt;ul>
&lt;li>通信使用明文（不加密），内容可能会被窃听。比如，&lt;strong>账号信息容易泄漏，那你号没了。&lt;/strong>&lt;/li>
&lt;li>不验证通信方的身份，因此有可能遭遇伪装。比如，&lt;strong>访问假的淘宝、拼多多，那你钱没了。&lt;/strong>&lt;/li>
&lt;li>无法证明报文的完整性，所以有可能已遭篡改。比如，&lt;strong>网页上植入垃圾广告，视觉污染，眼没了。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>HTTP 的安全问题，可以用 HTTPS 的方式解决，也就是通过引入 SSL/TLS 层，使得在安全上达到了极致。&lt;/p>
&lt;h3 id="http11-的性能如何">HTTP/1.1 的性能如何？&lt;/h3>
&lt;p>HTTP 协议是基于 &lt;strong>TCP/IP&lt;/strong>，并且使用了「&lt;strong>请求 - 应答&lt;/strong>」的通信模式，所以性能的关键就在这&lt;strong>两点&lt;/strong>里。&lt;/p>
&lt;p>&lt;em>1. 长连接&lt;/em>&lt;/p>
&lt;p>早期 HTTP/1.0 性能上的一个很大的问题，那就是每发起一个请求，都要新建一次 TCP 连接（三次握手），而且是串行请求，做了无谓的 TCP 连接建立和断开，增加了通信开销。&lt;/p>
&lt;p>为了解决上述 TCP 连接问题，HTTP/1.1 提出了&lt;strong>长连接&lt;/strong>的通信方式，也叫持久连接。这种方式的好处在于减少了 TCP 连接的重复建立和断开所造成的额外开销，减轻了服务器端的负载。&lt;/p>
&lt;p>持久连接的特点是，只要任意一端没有明确提出断开连接，则保持 TCP 连接状态。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/dpbdo4/640" alt="">&lt;/p>
&lt;p>短连接与长连接&lt;/p>
&lt;p>当然，如果某个 HTTP 长连接超过一定时间没有任何数据交互，服务端就会主动断开这个连接。&lt;/p>
&lt;p>&lt;em>2. 管道网络传输&lt;/em>&lt;/p>
&lt;p>HTTP/1.1 采用了长连接的方式，这使得管道（pipeline）网络传输成为了可能。&lt;/p>
&lt;p>即可在同一个 TCP 连接里面，客户端可以发起多个请求，只要第一个请求发出去了，不必等其回来，就可以发第二个请求出去，可以&lt;strong>减少整体的响应时间。&lt;/strong>&lt;/p>
&lt;p>举例来说，客户端需要请求两个资源。以前的做法是，在同一个 TCP 连接里面，先发送 A 请求，然后等待服务器做出回应，收到后再发出 B 请求。那么，管道机制则是允许浏览器同时发出 A 请求和 B 请求，如下图：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/dpbdo4/640" alt="">&lt;/p>
&lt;p>管道网络传输&lt;/p>
&lt;p>但是&lt;strong>服务器必须按照接收请求的顺序发送对这些管道化请求的响应&lt;/strong>。&lt;/p>
&lt;p>注意，是按照服务端收到的请求顺序响应，并不管哪个请求是先发送的，假设客户端先发送 A 请求，后发送 B 请求，如果服务端先收到 B 请求，就先响应 B 请求，然后再响应 A 请求，但是假设处理 B 请求的时候，耗时比较长，那么请求 A 的响应就会被阻塞，这称为「队头堵塞」。&lt;/p>
&lt;p>所以，&lt;strong>HTTP/1.1 管道解决了请求的队头阻塞，但是没有解决响应的队头阻塞&lt;/strong>。&lt;/p>
&lt;p>&lt;em>3. 队头阻塞&lt;/em>&lt;/p>
&lt;p>「请求 - 应答」的模式加剧了 HTTP 的性能问题。&lt;/p>
&lt;p>因为当顺序发送的请求序列中的一个请求因为某种原因被阻塞时，在后面排队的所有请求也一同被阻塞了，会招致客户端一直请求不到数据，这也就是「&lt;strong>队头阻塞&lt;/strong>」，好比上班的路上塞车。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/dpbdo4/640" alt="">&lt;/p>
&lt;p>队头阻塞&lt;/p>
&lt;p>总之 HTTP/1.1 的性能一般般，后续的 HTTP/2 和 HTTP/3 就是在优化 HTTP 的性能。&lt;/p>
&lt;hr>
&lt;h2 id="http-与-https">HTTP 与 HTTPS&lt;/h2>
&lt;h3 id="http-与-https-有哪些区别">HTTP 与 HTTPS 有哪些区别？&lt;/h3>
&lt;ol>
&lt;li>HTTP 是超文本传输协议，信息是明文传输，存在安全风险的问题。HTTPS 则解决 HTTP 不安全的缺陷，在 TCP 和 HTTP 网络层之间加入了 SSL/TLS 安全协议，使得报文能够加密传输。&lt;/li>
&lt;li>HTTP 连接建立相对简单， TCP 三次握手之后便可进行 HTTP 的报文传输。而 HTTPS 在 TCP 三次握手之后，还需进行 SSL/TLS 的握手过程，才可进入加密报文传输。&lt;/li>
&lt;li>HTTP 的端口号是 80，HTTPS 的端口号是 443。&lt;/li>
&lt;li>HTTPS 协议需要向 CA（证书权威机构）申请数字证书，来保证服务器的身份是可信的。&lt;/li>
&lt;/ol>
&lt;h3 id="https-解决了-http-的哪些问题">HTTPS 解决了 HTTP 的哪些问题？&lt;/h3>
&lt;p>HTTP 由于是明文传输，所以安全上存在以下三个风险：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>窃听风险&lt;/strong>，比如通信链路上可以获取通信内容，用户号容易没。&lt;/li>
&lt;li>&lt;strong>篡改风险&lt;/strong>，比如强制植入垃圾广告，视觉污染，用户眼容易瞎。&lt;/li>
&lt;li>&lt;strong>冒充风险&lt;/strong>，比如冒充淘宝网站，用户钱容易没。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/dpbdo4/640" alt="">&lt;/p>
&lt;p>HTTP 与 HTTPS 网络层&lt;/p>
&lt;p>HTTP&lt;strong>S&lt;/strong> 在 HTTP 与 TCP 层之间加入了 &lt;code>SSL/TLS&lt;/code> 协议，可以很好的解决了上述的风险：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>信息加密&lt;/strong>：交互信息无法被窃取，但你的号会因为「自身忘记」账号而没。&lt;/li>
&lt;li>&lt;strong>校验机制&lt;/strong>：无法篡改通信内容，篡改了就不能正常显示，但百度「竞价排名」依然可以搜索垃圾广告。&lt;/li>
&lt;li>&lt;strong>身份证书&lt;/strong>：证明淘宝是真的淘宝网，但你的钱还是会因为「剁手」而没。&lt;/li>
&lt;/ul>
&lt;p>可见，只要自身不做「恶」，SSL/TLS 协议是能保证通信是安全的。&lt;/p>
&lt;blockquote>
&lt;p>HTTPS 是如何解决上面的三个风险的？&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;strong>混合加密&lt;/strong>的方式实现信息的&lt;strong>机密性&lt;/strong>，解决了窃听的风险。&lt;/li>
&lt;li>&lt;strong>摘要算法&lt;/strong>的方式来实现&lt;strong>完整性&lt;/strong>，它能够为数据生成独一无二的「指纹」，指纹用于校验数据的完整性，解决了篡改的风险。&lt;/li>
&lt;li>将服务器公钥放入到&lt;strong>数字证书&lt;/strong>中，解决了冒充的风险。&lt;/li>
&lt;/ul>
&lt;p>&lt;em>1. 混合加密&lt;/em>&lt;/p>
&lt;p>通过&lt;strong>混合加密&lt;/strong>的方式可以保证信息的&lt;strong>机密性&lt;/strong>，解决了窃听的风险。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/dpbdo4/640" alt="">&lt;/p>
&lt;p>HTTPS 采用的是&lt;strong>对称加密&lt;/strong>和&lt;strong>非对称加密&lt;/strong>结合的「混合加密」方式：&lt;/p>
&lt;ul>
&lt;li>在通信建立前采用&lt;strong>非对称加密&lt;/strong>的方式交换「会话秘钥」，后续就不再使用非对称加密。&lt;/li>
&lt;li>在通信过程中全部使用&lt;strong>对称加密&lt;/strong>的「会话秘钥」的方式加密明文数据。&lt;/li>
&lt;/ul>
&lt;p>采用「混合加密」的方式的原因：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>对称加密&lt;/strong>只使用一个密钥，运算速度快，密钥必须保密，无法做到安全的密钥交换。&lt;/li>
&lt;li>&lt;strong>非对称加密&lt;/strong>使用两个密钥：公钥和私钥，公钥可以任意分发而私钥保密，解决了密钥交换问题但速度慢。&lt;/li>
&lt;/ul>
&lt;p>&lt;em>2. 摘要算法&lt;/em>&lt;/p>
&lt;p>&lt;strong>摘要算法&lt;/strong>用来实现&lt;strong>完整性&lt;/strong>，能够为数据生成独一无二的「指纹」，用于校验数据的完整性，解决了篡改的风险。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/dpbdo4/640" alt="">&lt;/p>
&lt;p>校验完整性&lt;/p>
&lt;p>客户端在发送明文之前会通过摘要算法算出明文的「指纹」，发送的时候把「指纹 + 明文」一同加密成密文后，发送给服务器，服务器解密后，用相同的摘要算法算出发送过来的明文，通过比较客户端携带的「指纹」和当前算出的「指纹」做比较，若「指纹」相同，说明数据是完整的。&lt;/p>
&lt;p>&lt;em>3. 数字证书&lt;/em>&lt;/p>
&lt;p>客户端先向服务器端索要公钥，然后用公钥加密信息，服务器收到密文后，用自己的私钥解密。&lt;/p>
&lt;p>这就存在些问题，如何保证公钥不被篡改和信任度？&lt;/p>
&lt;p>所以这里就需要借助第三方权威机构 &lt;code>CA&lt;/code> （数字证书认证机构），将&lt;strong>服务器公钥放在数字证书&lt;/strong>（由数字证书认证机构颁发）中，只要证书是可信的，公钥就是可信的。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/dpbdo4/640" alt="">&lt;/p>
&lt;p>数子证书工作流程&lt;/p>
&lt;p>通过数字证书的方式保证服务器公钥的身份，解决冒充的风险。&lt;/p>
&lt;h3 id="https--是如何建立连接的其间交互了什么">HTTPS   是如何建立连接的？其间交互了什么？&lt;/h3>
&lt;p>SSL/TLS 协议基本流程：&lt;/p>
&lt;ul>
&lt;li>客户端向服务器索要并验证服务器的公钥。&lt;/li>
&lt;li>双方协商生产「会话秘钥」。&lt;/li>
&lt;li>双方采用「会话秘钥」进行加密通信。&lt;/li>
&lt;/ul>
&lt;p>前两步也就是 SSL/TLS 的建立过程，也就是 TLS 握手阶段。&lt;/p>
&lt;p>SSL/TLS 的「握手阶段」涉及&lt;strong>四次&lt;/strong>通信，可见下图：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/dpbdo4/640" alt="">&lt;/p>
&lt;p>SSL/TLS 协议建立的详细流程：&lt;/p>
&lt;p>&lt;em>1. ClientHello&lt;/em>&lt;/p>
&lt;p>首先，由客户端向服务器发起加密通信请求，也就是 &lt;code>ClientHello&lt;/code> 请求。&lt;/p>
&lt;p>在这一步，客户端主要向服务器发送以下信息：&lt;/p>
&lt;p>（1）客户端支持的 SSL/TLS 协议版本，如 TLS 1.2 版本。&lt;/p>
&lt;p>（2）客户端生产的随机数（&lt;code>Client Random&lt;/code>），后面用于生成「会话秘钥」条件之一。&lt;/p>
&lt;p>（3）客户端支持的密码套件列表，如 RSA 加密算法。&lt;/p>
&lt;p>&lt;em>2. SeverHello&lt;/em>&lt;/p>
&lt;p>服务器收到客户端请求后，向客户端发出响应，也就是 &lt;code>SeverHello&lt;/code>。服务器回应的内容有如下内容：&lt;/p>
&lt;p>（1）确认 SSL/ TLS 协议版本，如果浏览器不支持，则关闭加密通信。&lt;/p>
&lt;p>（2）服务器生产的随机数（&lt;code>Server Random&lt;/code>），也是后面用于生产「会话秘钥」条件之一。&lt;/p>
&lt;p>（3）确认的密码套件列表，如 RSA 加密算法。&lt;/p>
&lt;p>（4）服务器的数字证书。&lt;/p>
&lt;p>&lt;em>3.客户端回应&lt;/em>&lt;/p>
&lt;p>客户端收到服务器的回应之后，首先通过浏览器或者操作系统中的 CA 公钥，确认服务器的数字证书的真实性。&lt;/p>
&lt;p>如果证书没有问题，客户端会&lt;strong>从数字证书中取出服务器的公钥&lt;/strong>，然后使用它加密报文，向服务器发送如下信息：&lt;/p>
&lt;p>（1）一个随机数（&lt;code>pre-master key&lt;/code>）。该随机数会被服务器公钥加密。&lt;/p>
&lt;p>（2）加密通信算法改变通知，表示随后的信息都将用「会话秘钥」加密通信。&lt;/p>
&lt;p>（3）客户端握手结束通知，表示客户端的握手阶段已经结束。这一项同时把之前所有内容的发生的数据做个摘要，用来供服务端校验。&lt;/p>
&lt;p>上面第一项的随机数是整个握手阶段的第三个随机数，会发给服务端，所以这个随机数客户端和服务端都是一样的。&lt;/p>
&lt;p>&lt;strong>服务器和客户端有了这三个随机数（Client Random、Server Random、pre-master key），接着就用双方协商的加密算法，各自生成本次通信的「会话秘钥」&lt;/strong>。&lt;/p>
&lt;p>&lt;em>4. 服务器的最后回应&lt;/em>&lt;/p>
&lt;p>服务器收到客户端的第三个随机数（&lt;code>pre-master key&lt;/code>）之后，通过协商的加密算法，计算出本次通信的「会话秘钥」。&lt;/p>
&lt;p>然后，向客户端发送最后的信息：&lt;/p>
&lt;p>（1）加密通信算法改变通知，表示随后的信息都将用「会话秘钥」加密通信。&lt;/p>
&lt;p>（2）服务器握手结束通知，表示服务器的握手阶段已经结束。这一项同时把之前所有内容的发生的数据做个摘要，用来供客户端校验。&lt;/p>
&lt;p>至此，整个 SSL/TLS 的握手阶段全部结束。接下来，客户端与服务器进入加密通信，就完全是使用普通的 HTTP 协议，只不过用「会话秘钥」加密内容。&lt;/p>
&lt;h2 id="http11http2http3-演变">HTTP/1.1、HTTP/2、HTTP/3 演变&lt;/h2>
&lt;h3 id="http11-相比-http10-提高了什么性能">HTTP/1.1 相比 HTTP/1.0 提高了什么性能？&lt;/h3>
&lt;p>HTTP/1.1 相比 HTTP/1.0 性能上的改进：&lt;/p>
&lt;ul>
&lt;li>使用 TCP 长连接的方式改善了 HTTP/1.0 短连接造成的性能开销。&lt;/li>
&lt;li>支持管道（pipeline）网络传输，只要第一个请求发出去了，不必等其回来，就可以发第二个请求出去，可以减少整体的响应时间。&lt;/li>
&lt;/ul>
&lt;p>但 HTTP/1.1 还是有性能瓶颈：&lt;/p>
&lt;ul>
&lt;li>请求 / 响应头部（Header）未经压缩就发送，首部信息越多延迟越大。只能压缩 &lt;code>Body&lt;/code> 的部分；&lt;/li>
&lt;li>发送冗长的首部。每次互相发送相同的首部造成的浪费较多；&lt;/li>
&lt;li>服务器是按请求的顺序响应的，如果服务器响应慢，会招致客户端一直请求不到数据，也就是队头阻塞；&lt;/li>
&lt;li>没有请求优先级控制；&lt;/li>
&lt;li>请求只能从客户端开始，服务器只能被动响应。&lt;/li>
&lt;/ul>
&lt;h3 id="http2-做了什么优化">HTTP/2 做了什么优化？&lt;/h3>
&lt;p>HTTP/2 协议是基于 HTTPS 的，所以 HTTP/2 的安全性也是有保障的。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/dpbdo4/640" alt="">&lt;/p>
&lt;p>HTT/1 ~ HTTP/2&lt;/p>
&lt;p>那 HTTP/2 相比 HTTP/1.1 性能上的改进：&lt;/p>
&lt;p>&lt;em>1. 头部压缩&lt;/em>&lt;/p>
&lt;p>HTTP/2 会&lt;strong>压缩头&lt;/strong>（Header）如果你同时发出多个请求，他们的头是一样的或是相似的，那么，协议会帮你&lt;strong>消除重复的部分&lt;/strong>。&lt;/p>
&lt;p>这就是所谓的 &lt;code>HPACK&lt;/code> 算法：在客户端和服务器同时维护一张头信息表，所有字段都会存入这个表，生成一个索引号，以后就不发送同样字段了，只发送索引号，这样就&lt;strong>提高速度&lt;/strong>了。&lt;/p>
&lt;p>&lt;em>2. 二进制格式&lt;/em>&lt;/p>
&lt;p>HTTP/2 不再像 HTTP/1.1 里的纯文本形式的报文，而是全面采用了&lt;strong>二进制格式&lt;/strong>，头信息和数据体都是二进制，并且统称为帧（frame）：&lt;strong>头信息帧（Headers Frame）和数据帧（Data Frame）&lt;/strong>。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/dpbdo4/640" alt="">&lt;/p>
&lt;p>HTTP/1 与 HTTP/2&lt;/p>
&lt;p>这样虽然对人不友好，但是对计算机非常友好，因为计算机只懂二进制，那么收到报文后，无需再将明文的报文转成二进制，而是直接解析二进制报文，这&lt;strong>增加了数据传输的效率&lt;/strong>。&lt;/p>
&lt;p>比如状态码 200 ，在 HTTP/1.1 是用 &amp;lsquo;2&amp;rsquo;&amp;lsquo;0&amp;rsquo;&amp;lsquo;0&amp;rsquo; 三个字符来表示（二进制：110010 110000 110000），如图：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/dpbdo4/640" alt="">&lt;/p>
&lt;p>在 HTTP/2 是用数字 200 表示（二进制：11001000），如图：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/dpbdo4/640" alt="">&lt;/p>
&lt;p>&lt;em>3. 数据流&lt;/em>&lt;/p>
&lt;p>HTTP/2 的数据包不是按顺序发送的，同一个连接里面连续的数据包，可能属于不同的回应。因此，必须要对数据包做标记，指出它属于哪个回应。&lt;/p>
&lt;p>在 HTTP/2 中每个请求或相应的所有数据包，称为一个数据流（&lt;code>Stream&lt;/code>）。每个数据流都标记着一个独一无二的编号（Stream ID），&lt;strong>不同 Stream 的帧是可以乱序发送的（因此可以并发不同的 Stream ）&lt;/strong>，因为每个帧的头部会携带 Stream ID 信息，所以接收端可以通过 Stream ID 有序组装成 HTTP 消息&lt;/p>
&lt;p>客户端和服务器&lt;strong>双方都可以建立 Stream&lt;/strong>， Stream ID 也是有区别的，客户端建立的 Stream 必须是奇数号，而服务器建立的 Stream 必须是偶数号。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/dpbdo4/640" alt="">&lt;/p>
&lt;p>客户端还可以&lt;strong>指定数据流的优先级&lt;/strong>。优先级高的请求，服务器就先响应该请求。&lt;/p>
&lt;p>&lt;em>4. 多路复用&lt;/em>&lt;/p>
&lt;p>HTTP/2 是可以在&lt;strong>一个连接中并发多个请求或回应，而不用按照顺序一一对应&lt;/strong>。&lt;/p>
&lt;p>移除了 HTTP/1.1 中的串行请求，不需要排队等待，也就不会再出现「队头阻塞」问题，&lt;strong>降低了延迟，大幅度提高了连接的利用率&lt;/strong>。&lt;/p>
&lt;p>举例来说，在一个 TCP 连接里，服务器收到了客户端 A 和 B 的两个请求，如果发现 A 处理过程非常耗时，于是就回应 A 请求已经处理好的部分，接着回应 B 请求，完成后，再回应 A 请求剩下的部分。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/dpbdo4/640" alt="">&lt;/p>
&lt;p>多路复用&lt;/p>
&lt;p>&lt;em>5. 服务器推送&lt;/em>&lt;/p>
&lt;p>HTTP/2 还在一定程度上改善了传统的「请求 - 应答」工作模式，服务不再是被动地响应，也可以&lt;strong>主动&lt;/strong>向客户端发送消息。&lt;/p>
&lt;p>比如，客户端通过 HTTP/1.1 请求从服务器那获取到了 HTML 文件，而 HTML 可能还需要依赖 CSS 来渲染页面，这时客户端还要再发起获取 CSS 文件的请求，需要两次消息往返，如下图左边部分：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/dpbdo4/640" alt="">&lt;/p>
&lt;p>img&lt;/p>
&lt;p>如上图右边部分，在 HTTP/2 中，客户端在访问 HTML 时，服务器可以直接主动推送 CSS 文件，减少了消息传递的次数。&lt;/p>
&lt;blockquote>
&lt;p>HTTP/2 有什么缺陷？&lt;/p>
&lt;/blockquote>
&lt;p>HTTP/2 通过 Stream 的并发能力，解决了 HTTP/1 队头阻塞的问题，看似很完美了，但是 HTTP/2 还是存在“队头阻塞”的问题，只不过问题不是在 HTTP 这一层面，而是在 TCP 这一层。&lt;/p>
&lt;p>&lt;strong>HTTP/2 是基于 TCP 协议来传输数据的，TCP 是字节流协议，TCP 层必须保证收到的字节数据是完整且连续的，这样内核才会将缓冲区里的数据返回给 HTTP 应用，那么当「前 1 个字节数据」没有到达时，后收到的字节数据只能存放在内核缓冲区里，只有等到这 1 个字节数据到达时，HTTP/2 应用层才能从内核中拿到数据，这就是 HTTP/2 队头阻塞问题。&lt;/strong>&lt;/p>
&lt;p>举个例子，如下图：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/dpbdo4/640" alt="">&lt;/p>
&lt;p>img&lt;/p>
&lt;p>图中发送方发送了很多个 packet，每个 packet 都有自己的序号，你可以认为是 TCP 的序列号，其中 packet 3 在网络中丢失了，即使 packet 4-6 被接收方收到后，由于内核中的 TCP 数据不是连续的，于是接收方的应用层就无法从内核中读取到，只有等到 packet 3 重传后，接收方的应用层才可以从内核中读取到数据，这就是 HTTP/2 的队头阻塞问题，是在 TCP 层面发生的。&lt;/p>
&lt;p>所以，一旦发生了丢包现象，就会触发 TCP 的重传机制，这样在一个 TCP 连接中的&lt;strong>所有的 HTTP 请求都必须等待这个丢了的包被重传回来&lt;/strong>。&lt;/p>
&lt;h3 id="http3-做了哪些优化">HTTP/3 做了哪些优化？&lt;/h3>
&lt;p>前面我们知道了 HTTP/1.1 和 HTTP/2 都有队头阻塞的问题：&lt;/p>
&lt;ul>
&lt;li>HTTP/1.1 中的管道（ pipeline）虽然解决了请求的队头阻塞，但是&lt;strong>没有解决响应的队头阻塞&lt;/strong>，因为服务端需要按顺序响应收到的请求，如果服务端处理某个请求消耗的时间比较长，那么只能等相应完这个请求后， 才能处理下一个请求，这属于 HTTP 层队头阻塞。&lt;/li>
&lt;li>HTTP/2 虽然通过多个请求复用一个 TCP 连接解决了 HTTP 的队头阻塞 ，但是&lt;strong>一旦发生丢包，就会阻塞住所有的 HTTP 请求&lt;/strong>，这属于 TCP 层队头阻塞。&lt;/li>
&lt;/ul>
&lt;p>HTTP/2 队头阻塞的问题是因为 TCP，所以 &lt;strong>HTTP/3 把 HTTP 下层的 TCP 协议改成了 UDP！&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/dpbdo4/640" alt="">&lt;/p>
&lt;p>HTTP/1 ~ HTTP/3&lt;/p>
&lt;p>UDP 发生是不管顺序，也不管丢包的，所以不会出现像 HTTP/2 队头阻塞的问题&lt;/p>
&lt;p>大家都知道 UDP 是不可靠传输的，但基于 UDP 的 &lt;strong>QUIC 协议&lt;/strong> 可以实现类似 TCP 的可靠性传输。&lt;/p>
&lt;p>QUIC 有以下 3 个特点。&lt;/p>
&lt;p>&lt;em>1、无队头阻塞&lt;/em>&lt;/p>
&lt;p>QUIC 协议也有类似 HTTP/2 Stream 与多路复用的概念，也是可以在同一条连接上并发传输多个 Stream，Stream 可以认为就是一条 HTTP 请求。&lt;/p>
&lt;p>QUIC 有自己的一套机制可以保证传输的可靠性的。&lt;strong>当某个流发生丢包时，只会阻塞这个流，其他流不会受到影响，因此不存在队头阻塞问题&lt;/strong>。这与 HTTP/2 不同，HTTP/2 只要某个流中的数据包丢失了，其他流也会因此受影响。&lt;/p>
&lt;p>所以，QUIC 连接上的多个 Stream 之间并没有依赖，都是独立的，某个流发生丢包了，只会影响该流，其他流不受影响。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/dpbdo4/640" alt="">&lt;/p>
&lt;p>&lt;em>2、更快的连接建立&lt;/em>&lt;/p>
&lt;p>对于 HTTP/1 和 HTTP/2 协议，TCP 和 TLS 是分层的，分别属于内核实现的传输层、openssl 库实现的表示层，因此它们难以合并在一起，需要分批次来握手，先 TCP 握手，再 TLS 握手。&lt;/p>
&lt;p>HTTP/3 在传输数据前虽然需要 QUIC 协议握手，这个握手过程只需要 1 RTT，握手的目的是为确认双方的「连接 ID」，连接迁移就是基于连接 ID 实现的。&lt;/p>
&lt;p>但是 HTTP/3 的 QUIC 协议并不是与 TLS 分层，而是 QUIC 内部包含了 TLS，它在自己的帧会携带 TLS 里的“记录”，再加上 QUIC 使用的是 TLS/1.3，因此仅需 1 个 RTT 就可以「同时」完成建立连接与密钥协商，如下图：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/dpbdo4/640" alt="">&lt;/p>
&lt;p>TCP HTTPS（TLS/1.3） 和 QUIC HTTPS&lt;/p>
&lt;p>甚至，在第二次连接的时候，应用数据包可以和 QUIC 握手信息（连接信息 + TLS 信息）一起发送，达到 0-RTT 的效果。&lt;/p>
&lt;p>&lt;em>3、连接迁移&lt;/em>&lt;/p>
&lt;p>基于 TCP 传输协议的 HTTP 协议，由于是通过四元组（源 IP、源端口、目的 IP、目的端口）确定一条 TCP 连接，那么&lt;strong>当移动设备的网络从 4G 切换到 WIFI 时，意味着 IP 地址变化了，那么就必须要断开连接，然后重新建立连接&lt;/strong>。而建立连接的过程包含 TCP 三次握手和 TLS 四次握手的时延，以及 TCP 慢启动的减速过程，给用户的感觉就是网络突然卡顿了一下，因此连接的迁移成本是很高的。&lt;/p>
&lt;p>而 QUIC 协议没有用四元组的方式来“绑定”连接，而是通过&lt;strong>连接 ID&lt;/strong>来标记通信的两个端点，客户端和服务器可以各自选择一组 ID 来标记自己，因此即使移动设备的网络变化后，导致 IP 地址变化了，只要仍保有上下文信息（比如连接 ID、TLS 密钥等），就可以“无缝”地复用原连接，消除重连的成本，没有丝毫卡顿感，达到了&lt;strong>连接迁移&lt;/strong>的功能。&lt;/p>
&lt;p>所以， QUIC 是一个在 UDP 之上的&lt;strong>伪&lt;/strong> TCP + TLS + HTTP/2 的多路复用的协议。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/dpbdo4/640" alt="">&lt;/p>
&lt;p>QUIC 是新协议，对于很多网络设备，根本不知道什么是 QUIC，只会当做 UDP，这样会出现新的问题，因为有的网络设备是会丢掉 UDP 包的，而 QUIC 是基于 UDP 实现的，那么如果网络设备无法识别这个是 QUIC 包，那么就会当作 UDP 包，然后被丢弃。&lt;/p>
&lt;p>所以，HTTP/3 现在普及的进度非常的缓慢，不知道未来 UDP 是否能够逆袭 TCP。&lt;/p>
&lt;hr>
&lt;p>参考资料：&lt;/p>
&lt;p>[1] 上野 宣.图解 HTTP.人民邮电出版社.&lt;/p>
&lt;p>[2] 罗剑锋.透视 HTTP 协议.极客时间.&lt;/p>
&lt;p>[3] 陈皓.HTTP 的前世今.酷壳 CoolShell.&lt;a href="https://coolshell.cn/articles/19840.html">https://coolshell.cn/articles/19840.html&lt;/a>&lt;/p>
&lt;p>[4] 阮一峰.HTTP 协议入门.阮一峰的网络日志.&lt;a href="http://www.ruanyifeng.com/blog/2016/08/http.html">http://www.ruanyifeng.com/blog/2016/08/http.html&lt;/a>&lt;/p>
&lt;hr>
&lt;h2 id="读者问答">读者问答&lt;/h2>
&lt;blockquote>
&lt;p>读者问：“https 和 http 相比，就是传输的内容多了对称加密，可以这么理解吗？”&lt;/p>
&lt;/blockquote>
&lt;ol>
&lt;li>建立连接时候：https 比 http 多了 TLS 的握手过程；&lt;/li>
&lt;li>传输内容的时候：https 会把数据进行加密，通常是对称加密数据；&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>读者问：“ 我看文中 TLS 和 SSL 没有做区分，这两个需要区分吗？”&lt;/p>
&lt;/blockquote>
&lt;p>这两实际上是一个东西。&lt;/p>
&lt;p>SSL 是洋文 “&lt;em>Secure Sockets Layer&lt;/em> 的缩写，中文叫做「安全套接层」。它是在上世纪 90 年代中期，由网景公司设计的。&lt;/p>
&lt;p>到了 1999 年，SSL 因为应用广泛，已经成为互联网上的事实标准。IETF 就在那年把 SSL 标准化。标准化之后的名称改为 TLS（是 “&lt;em>Transport Layer Security&lt;/em>” 的缩写），中文叫做 「传输层安全协议」。&lt;/p>
&lt;p>很多相关的文章都把这两者并列称呼（SSL/TLS），因为这两者可以视作同一个东西的不同阶段。&lt;/p>
&lt;blockquote>
&lt;p>读者问：“为啥 ssl 的握手是 4 次？”&lt;/p>
&lt;/blockquote>
&lt;p>SSL/TLS 1.2 需要 4 握手，需要 2 个 RTT 的时延，我文中的图是把每个交互分开画了，实际上把他们合在一起发送，就是 4 次握手：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/dpbdo4/640" alt="">&lt;/p>
&lt;p>另外， SSL/TLS 1.3 优化了过程，只需要 1 个 RTT 往返时延，也就是只需要 3 次握手：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/dpbdo4/640" alt="">&lt;/p>
&lt;hr>
&lt;p>&lt;strong>小林是专为大家图解的工具人，Goodbye，我们下次见！&lt;/strong>&lt;/p>
&lt;p>&lt;strong>图解系列文章：&lt;/strong>&lt;/p>
&lt;p>&lt;a href="http://mp.weixin.qq.com/s?__biz=MzUxODAzNDg4NQ==&amp;amp;mid=2247507000&amp;amp;idx=1&amp;amp;sn=c045101b45dd70ec37f9b81361b09f14&amp;amp;chksm=f98d9892cefa1184ac8e278e468a8a225cd5a6f4c3dfba83ed223c5da69421041961bfb945cc&amp;amp;scene=21#wechat_redirect">小林的网站上线啦！&lt;/a>&lt;/p>
&lt;p>&lt;a href="http://mp.weixin.qq.com/s?__biz=MzUxODAzNDg4NQ==&amp;amp;mid=2247492900&amp;amp;idx=1&amp;amp;sn=2c1d06a667b1e17e6d8caabff2bbb85b&amp;amp;chksm=f98da18ecefa28986109f13d28c1a06f304cb4d897eb2e931e79dc82d0b054ef6a9f7e1e4e91&amp;amp;scene=21#wechat_redirect">小林的图解系统，大曝光！&lt;/a>&lt;/p>
&lt;p>&lt;a href="http://mp.weixin.qq.com/s?__biz=MzUxODAzNDg4NQ==&amp;amp;mid=2247491944&amp;amp;idx=1&amp;amp;sn=b90deba780ae3840668e21127e467b83&amp;amp;chksm=f98da5c2cefa2cd456045e9b2ed92837ed10e4a2c650f463b29ef5d7f8f4d01014d92225acad&amp;amp;scene=21#wechat_redirect">不鸽了，小林的「图解网络 3.0 」发布！&lt;/a>&lt;/p></description></item></channel></rss>