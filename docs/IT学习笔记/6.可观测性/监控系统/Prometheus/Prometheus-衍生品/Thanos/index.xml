<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – Thanos</title><link>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/Prometheus/Prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/Thanos/</link><description>Recent content in Thanos on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/Prometheus/Prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/Thanos/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Thanos</title><link>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/Prometheus/Prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/Thanos/Thanos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/Prometheus/Prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/Thanos/Thanos/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/thanos-io/thanos">GitHub 项目，thanos-io/thanos&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://thanos.io/">官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.qikqiak.com/k8strain/monitor/thanos/#thanos">K8S 训练营，Kubernetes 监控-Thanos&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/VRnf0BMZfWSM4QobsHSiYg">公众号-k8s 技术圈，使用 Thanos 集中管理多 Prometheus 实例数据&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/o3Gr8X5Br3DsOATvXXlZBw">公众号-k8s 技术圈，Thanos Ruler 组件的使用&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>首先需要明确一点，Thanos 是一组程序的统称。这一组程序可以组成具有无限存储容量的高可用 Metrics 系统。可以将其无缝添加到现有 Prometheus 之上。&lt;/p>
&lt;p>单独使用 Prometheus 可能产生的问题&lt;/p>
&lt;ul>
&lt;li>长、短期数据未分层，一套 Prometheus 在被查询长周期指标时，Prometheus 所在服务器的内存、CPU 使用率飙升，甚至可能导致监控、告警服务不可用，原因在于两点：
&lt;ul>
&lt;li>查询长周期数据时，Prometheus 会将大量数据载入内存&lt;/li>
&lt;li>Prometheus 载入的不是降采样数据&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>查询的时间范围越大，需要的内存就越多。在另一个生产的方案中，采用 VictoriaMetrics 单机版作为远端存储，服务器内存高达 128G。同时，这种方式还存在丢数据的情况。&lt;/li>
&lt;li>Prometheus 联邦的方式，只是结局了将多个 Prometheus 聚合起来的情况，并没有提供抽样的能力，不能加快长周期指标的查询，不适用于当前远端存储的场景。&lt;/li>
&lt;/ul>
&lt;p>综上所属&lt;/p>
&lt;ul>
&lt;li>Thanos Compact 组件能对指标数据进行降采样，以提高大时间范围查询的效率&lt;/li>
&lt;li>Thanos 的 Sidecar 和 Receiver 组件都可以将指标数据转存到对象存储中&lt;/li>
&lt;li>Thanos Querier 组件可以&lt;/li>
&lt;li>此时，通过 Thanos 将数据分了层
&lt;ul>
&lt;li>短期数据保存在 Receiver 或 Prometheus 中，用于告警系统的高频查询以及 Grafana 的展示&lt;/li>
&lt;li>长期数据保存在对象存储中，以供后续分析使用&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="thanos-架构概述">Thanos 架构概述&lt;/h1>
&lt;p>Thanos 遵循 &lt;a href="https://en.wikipedia.org/wiki/KISS_principle">KISS &lt;/a>和 Unix 哲学，由一组组件组成，每个组件都可以实现特定的功能：&lt;/p>
&lt;ul>
&lt;li>Prometheus 本地数据处理
&lt;ul>
&lt;li>&lt;strong>Sidecar&lt;/strong> # 暴露 StoreAPI。连接 Prometheus，读取其数据以便进行下一步处理。将已压缩数据上传到对象存储，或读取其数据以进行查询和/或将其上传到云存储中。还可以动态重载 Prometheus 配置文件。&lt;/li>
&lt;li>**Receiver **# 暴露 StoreAPI。实现了 Prometheus 的 Remote Write API。接收 Prometheus 发送过来的 WAL 数据存储到 Receiver 本地的 TSDB 中，也就是说，Receiver 本身就是一个 TSDB。同时，也可以将这些数据上传到对象存储中。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>PromQL 查询处理。分为两个部分，一个前端一个后端。
&lt;ul>
&lt;li>&lt;strong>Querier&lt;/strong> # 实现 Prometheus 的 API、以及一个类似 Prometheus 的 Web 页面。Querier 从 StoreAPI 查询数据并返回结果。&lt;/li>
&lt;li>**Query Frontend **# 实现 Prometheus 的 API、以及一个类似 Prometheus 的 Web 页面。可以将请求负载均衡到指定的多个 Querier 上，同时可以缓存响应数据、也可以按查询日拆分。有点像 Redis 的效果。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>对象存储中的数据处理
&lt;ul>
&lt;li>**Store Gateway **# 暴露 StoreAPI。将对象存储中的数据暴露出来，供 Querier 组件通过 PromQL 查询&lt;/li>
&lt;li>**Compactor **# 压缩数据，对保存在对象存储中的数据进行降采样。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>其他
&lt;ul>
&lt;li>**Ruler **# 针对 Thanos 中的数据评估记录和警报规则以进行展示/上传。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>通过 thanos 程序的子命令可以运行指定的组件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>root@lichenhao:/mnt# docker run --rm quay.io/thanos/thanos:v0.20.0 --help
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>usage: thanos &lt;span style="color:#f92672">[&lt;/span>&amp;lt;flags&amp;gt;&lt;span style="color:#f92672">]&lt;/span> &amp;lt;command&amp;gt; &lt;span style="color:#f92672">[&lt;/span>&amp;lt;args&amp;gt; ...&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>A block storage based long-term storage &lt;span style="color:#66d9ef">for&lt;/span> Prometheus.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Flags:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -h, --help Show context-sensitive help &lt;span style="color:#f92672">(&lt;/span>also try --help-long and
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...... 略
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Commands:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> help &lt;span style="color:#f92672">[&lt;/span>&amp;lt;command&amp;gt;...&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Show help.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sidecar &lt;span style="color:#f92672">[&lt;/span>&amp;lt;flags&amp;gt;&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Sidecar &lt;span style="color:#66d9ef">for&lt;/span> Prometheus server.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> store &lt;span style="color:#f92672">[&lt;/span>&amp;lt;flags&amp;gt;&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Store node giving access to blocks in a bucket provider. Now supported GCS,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> S3, Azure, Swift, Tencent COS and Aliyun OSS.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> query &lt;span style="color:#f92672">[&lt;/span>&amp;lt;flags&amp;gt;&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Query node exposing PromQL enabled Query API with data retrieved from
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> multiple store nodes.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rule &lt;span style="color:#f92672">[&lt;/span>&amp;lt;flags&amp;gt;&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Ruler evaluating Prometheus rules against given Query nodes, exposing Store
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> API and storing old blocks in bucket.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> compact &lt;span style="color:#f92672">[&lt;/span>&amp;lt;flags&amp;gt;&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Continuously compacts blocks in an object store bucket.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...... 略
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> receive &lt;span style="color:#f92672">[&lt;/span>&amp;lt;flags&amp;gt;&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Accept Prometheus remote write API requests and write to local tsdb.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> query-frontend &lt;span style="color:#f92672">[&lt;/span>&amp;lt;flags&amp;gt;&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Query frontend command implements a service deployed in front of queriers to
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> improve query parallelization and caching.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Sidecar&lt;/strong> # 由 &lt;strong>thanos sidecar&lt;/strong> 子命令实现。&lt;/li>
&lt;li>**Receiver **# 由 &lt;strong>thanos receive&lt;/strong> 子命令实现。&lt;/li>
&lt;li>**Store Gateway **# 由 &lt;strong>thanos store&lt;/strong> 子命令实现。&lt;/li>
&lt;li>&lt;strong>Querier&lt;/strong> # 由 &lt;strong>thanos query&lt;/strong> 子命令实现。&lt;/li>
&lt;li>&lt;strong>Query Frontend&lt;/strong> # 由 &lt;strong>thanos query-frontend&lt;/strong> 子命令实现&lt;/li>
&lt;li>**Compactor **# 由 &lt;strong>thanos compact&lt;/strong> 子命令实现。&lt;/li>
&lt;li>**Ruler **# 由 &lt;strong>thanos rule&lt;/strong> 子命令实现。&lt;/li>
&lt;/ul>
&lt;p>thanos 二进制文件的设计方式与 loki 非常类似，都是在单一二进制文件中，可以运行指定的一个或多个组件。&lt;/p>
&lt;h2 id="storeapi">StoreAPI&lt;/h2>
&lt;p>**StoreAPI **并不算一个组件，而是 Thanos 的一个核心概念。Sidecar、Store、Receiver 组件可以暴露 StoreAPI 端点。而 Query 可以使用其他组件爆出来的 StoreAPI 端点。&lt;/p>
&lt;p>Query 向 StoreAPI 发送 PromQL 查询请求，Sidecar、Store、Receiver 在 StoreAPI 上收到 PromQL 请求后，从各自关联的后端数据库中查询数据，并返回给 Query。&lt;/p>
&lt;p>StoreAPI 一般都是 gRPC 调用。&lt;/p>
&lt;h2 id="架构分类">架构分类&lt;/h2>
&lt;p>在 Thanos 中，Sidecar 和 Receiver 组件是最主要的组件，这俩组件，可以让 Thanos 实现两种架构模型。&lt;/p>
&lt;ul>
&lt;li>Sidecar 架构 # 通过推送方式，将时序数据转存到对象存储中&lt;/li>
&lt;li>Receiver 架构 # 自身就是一个 TSDB，也实现了 Prometheus 的 Remote Write API。接收 Prometheus 发送过来的 WAL 数据存储到 Receiver 本地的 TSDB 中。同时，也可以将这些数据上传到对象存储中。&lt;/li>
&lt;/ul>
&lt;h3 id="sidecar-架构">Sidecar 架构&lt;/h3>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gq2u99/1620877646742-0d57551f-e57e-4ecb-a5d6-b2c14ad6f979.png" alt="Thanos High Level Arch Diagram.png">&lt;/p>
&lt;h3 id="receiver-架构">Receiver 架构&lt;/h3>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gq2u99/1620877652987-b4b6f910-11f7-4fb1-b74a-ac5cf02c772b.png" alt="Thanos High Level Arch Diagram Receive v0.19.png">&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>Compactor、Sidecar、Receiver、Ruler 是唯一对对象存储具有写权限的组件，且只有 Comactor 才能删除数据。&lt;/p>
&lt;ul>
&lt;li>通常情况下，Compactor 不需要高可用，因为 Compactor 没有针对所有对象存储提供的安全锁定机制，所以当多个 Compactor 同时操作同一个 Bucket 内的对象，则会出现争抢问题，导致数据异常。&lt;/li>
&lt;/ul>
&lt;h3 id="sidecar-与-receiver-两种架构的对比">Sidecar 与 Receiver 两种架构的对比&lt;/h3>
&lt;p>Sidecar&lt;/p>
&lt;ul>
&lt;li>优势:
&lt;ul>
&lt;li>查询时从多个源来获取数据，降低单一数据源压力&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>缺点:
&lt;ul>
&lt;li>近期数据需要 Query 与 Sidecar 之间网络请求完成，会增加额外耗时&lt;/li>
&lt;li>需要 Store Gateway 能访问每个 Prometheus 实例&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Receiver&lt;/p>
&lt;ul>
&lt;li>优势：
&lt;ul>
&lt;li>数据集中&lt;/li>
&lt;li>Prometheus 无状态&lt;/li>
&lt;li>只需要暴露 Receiver 给 Prometheus 访问&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>缺点:
&lt;ul>
&lt;li>Receiver 承受大量 Prometheus 的 remote write 写入&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>总的来说&lt;/p>
&lt;ul>
&lt;li>当 Prometheus 数量多的情况下，推荐使用 Sidecar 模式，因为所有 Prometheus 如果同时通过 Remote Write 向同一个 Receiver 写入数据，并且 Receiver 还要处理来自 Querier 的查询请求。&lt;/li>
&lt;li>当需要 Prometheus 完全无状态的时候，推荐使用 Receiver，并且这种模式也利于将整体架构转移到其他监控系统(比如 Grafana 的 Mimir)，此时 Prometheus 仅作为发现目标、采集数据所用，将时序数据的存储能力交给其他更优质的产品。&lt;/li>
&lt;/ul>
&lt;h1 id="thanos-主要组件概述">Thanos 主要组件概述&lt;/h1>
&lt;p>&lt;strong>Sidecar 和 Receiver 组件是最基本的 Thanos 功能。也就是说一般情况下，值部署一个 Sidecar 组件或者 Receiver 组件即可处理 Prometheus 本地的时序数据&lt;/strong>&lt;/p>
&lt;p>不同的是：&lt;/p>
&lt;ul>
&lt;li>Sidecar 是通过推送的方式，将 Prometheus 本地数据推送到对象存储。
&lt;ul>
&lt;li>不过 Sidecar 还有一些其他功能，比如动态加载配置文件等等。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Receiver 自身就是一个 TSDB，也实现了 Prometheus 的 Remote Write API。接收 Prometheus 发送过来的 WAL 数据存储到 Receiver 本地的 TSDB 中。
&lt;ul>
&lt;li>当然，Receiver 也可以将本地时序数据推送到对象存储。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="sidecar边车httpsthanosiotipcomponentssidecarmd">&lt;a href="https://thanos.io/tip/components/sidecar.md/">Sidecar(边车)&lt;/a>&lt;/h2>
&lt;p>Sidecar 可以连接 Prometheus Server，读取其数据以便进行下一步处理。Sidecar 可以提供下列功能：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>实时配置更新&lt;/strong> # 实时监控 Prometheus Server 配置文件，当文件变化时让 Prometheus Server 重载配置。或者通过配置文件模板，生成配置文件。&lt;/li>
&lt;li>**转存数据 **# 将 Prometheus Server 的数据转存到其他地方。比如 对象存储、公有云存储、本地文件系统 等等&lt;/li>
&lt;li>**暴露 StoreAPI **# Querier 组件可以通过 Sidecar 的 StoreAPI 向 Prometheus Server 发起 PromQL 请求，以获查询数据。&lt;/li>
&lt;/ul>
&lt;p>注意：&lt;/p>
&lt;ul>
&lt;li>该组件并不是通过 Prometheus 的 Remote Write 将数据写入到对象存储中的。而是将 Prometheus 已经压缩的数据块，上传到对象存储中。所以，如果直接从对象存储中查询数据，并不是实时的，远程存储的数据与 Prometheus 中的数据的时间间隔受 Prometheus 压缩数据间隔影响。
&lt;ul>
&lt;li>所以，Thanos 如果想要通过 Remote Write 来转存数据，则是通过 **Receiver **功能实现的。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>要使 Sidecar 模式正常运行，必须修改 Prometheus 的 &lt;code>--storage.tsdb.min-block-duration&lt;/code> 与 &lt;code>--storage.tsdb.max-block-duration&lt;/code> 这俩命令行标志的值为相同的值以禁用 Prometheus 的本地压缩，通常推荐设置为默认的 &lt;code>2h&lt;/code>。
&lt;ul>
&lt;li>这个设置是为了避免当 Sidecar 在上传数据会读取 Prometheus 的本地数据时而产生的问题。比如正在读取的数据正在被压缩，那么该数据上传到对象存储中将会出现问题，甚至都无法正常读取与上传&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="receiver接收器httpsthanosiotipcomponentsreceivemd">&lt;a href="https://thanos.io/tip/components/receive.md/">Receiver(接收器)&lt;/a>&lt;/h2>
&lt;p>Receiver 是一个实现了 Prometheus 的 Remote Write API 的 TSDB，具有如下功能。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Remote Write API&lt;/strong> # Receiver 接收 Prometheus Remote Write 传输过来的 WAL 数据，并存储在本地 TSDB 中。&lt;/li>
&lt;li>**转存数据 **# Receiver 还可以将这些数据转存到对象存储中。&lt;/li>
&lt;li>**暴露 StoreAPI **# Queriver 组件可以直接向 Receiver 的 StoreAPI 发起 PromQL 请求。
&lt;ul>
&lt;li>注意：由于 Receiver 自身就是 TSDB，所以这个 PromQL 可以直接从 Receiver 中查询数据而不用像 Sidecar 似的，还得把查询请求转发给 Prometheus。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="thanos-其他组件概述">Thanos 其他组件概述&lt;/h1>
&lt;h2 id="querier查询器httpsthanosiotipcomponentsquerymd">&lt;a href="https://thanos.io/tip/components/query.md/">Querier(查询器)&lt;/a>&lt;/h2>
&lt;p>&lt;strong>Query 组件分为两部分&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>**Querier(查询器) **# &lt;strong>实现了 Prometheus API&lt;/strong>，可以通过 Querier 发起 PromQL 查询请求，以获取数据；甚至可以从 Prometheus Server 的时序数据库中删除数据。每个从 Querier 发起的 PromQL 查询请求都会发送到可以暴露 StoreAPI 的组件上，并获取查询结果。&lt;/li>
&lt;li>&lt;strong>Query Fronted(查询前端) &lt;strong>#&lt;/strong> 实现 Prometheus API&lt;/strong>，可以将请求负载均衡到指定的多个 Querier 上，同时可以缓存响应数据、也可以按查询日拆分。有点像 Redis 之于 Mysql 的效果&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gq2u99/1620707578416-24269f9e-5260-465a-ab5b-083980a3a016.png" alt="image.png">&lt;/p>
&lt;h2 id="store-gateway存储网关httpsthanosiotipcomponentsstoremd">&lt;a href="https://thanos.io/tip/components/store.md/">Store Gateway(存储网关)&lt;/a>&lt;/h2>
&lt;p>当 Sidcar 或 Receiver 将 Prometheus Server 中的数据转存到对象存储中后，下一步我们就会希望如何用起来这些数据，比如，我们可不可以直接使用 PromQL 查询对象存储中的数据呢？当然可以！这就是 Store Gateway 的工作。&lt;/p>
&lt;p>&lt;strong>Store Gateway 也会暴露 StoreAPI 端点&lt;/strong>，Querier 组件通过这个 API，使用 PromQL 从对象存储中查询数据。&lt;/p>
&lt;p>注意：当 Query 组件通过 Store Gateway 查询数据时，由于对象存储中数据并不是实时的，所以，并不适合查询即时数据。&lt;/p>
&lt;h2 id="compactor压缩器httpsthanosiotipcomponentscompactmd">&lt;a href="https://thanos.io/tip/components/compact.md/">Compactor(压缩器)&lt;/a>&lt;/h2>
&lt;p>Prometheus Server 会定期压缩旧数据以提高查询效率。Compactor 组件可以实现相同功能，只不过，压缩目标是 Sidecar 或 Receiver 转存到对象存储中的数据。&lt;/p>
&lt;p>由于我们有数据长期存储的能力，也就可以实现查询较大时间范围的监控数据，当时间范围很大时，查询的数据量也会很大，这会导致查询速度非常慢。通常在查看较大时间范围的监控数据时，我们并不需要那么详细的数据，只需要看到大致就行。Thanos Compact 这个组件应运而生，它读取对象存储的数据，&lt;strong>对其进行压缩(下采样)再上传到对象存储&lt;/strong>，这样在查询大时间范围数据时就可以只读取压缩和降采样后的数据，极大地减少了查询的数据量，从而加速查询。&lt;/p>
&lt;h2 id="ruler规则管理器httpsthanosiotipcomponentsrulemd">&lt;a href="https://thanos.io/tip/components/rule.md/">Ruler(规则管理器)&lt;/a>&lt;/h2>
&lt;p>由于 Ruler 组件获取评估数据的路径是 &lt;code>ruler --&amp;gt; query --&amp;gt; sidecar --&amp;gt; prometheus&lt;/code>，需要经整个查询链条，这也提升了发生故障的风险，而且评估原本就可以在 Prometheus 中进行，所以在非必要的情况下更加推荐使用原本的 Prometheus 方式来做报警和记录规则的评估。&lt;/p>
&lt;h1 id="thanos-关联文件与配置">Thanos 关联文件与配置&lt;/h1>
&lt;p>Thanos 的配置就是指各个组件自己的配置&lt;/p>
&lt;h1 id="thanos-监控面板">Thanos 监控面板&lt;/h1>
&lt;p>&lt;a href="https://github.com/thanos-io/thanos/blob/main/examples/dashboards/dashboards.md">https://github.com/thanos-io/thanos/blob/main/examples/dashboards/dashboards.md&lt;/a>&lt;/p></description></item><item><title>Docs: Thanos 部署</title><link>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/Prometheus/Prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/Thanos/Thanos-%E9%83%A8%E7%BD%B2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/Prometheus/Prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/Thanos/Thanos-%E9%83%A8%E7%BD%B2/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://thanos.io/tip/thanos/quick-tutorial.md/#sidecar">官方文档,快速教程&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="通过-docker-启动-thanos">通过 docker 启动 Thanos&lt;/h1>
&lt;h2 id="sidecar">Sidecar&lt;/h2>
&lt;h2 id="query">Query&lt;/h2>
&lt;h1 id="store">Store&lt;/h1>
&lt;h1 id="在-kubernetes-集群中部署-thanos">在 Kubernetes 集群中部署 Thanos&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/thanos-io/kube-thanos/tree/main/examples">GitHub,examples(Manifests)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/thanos-io/kube-thanos/tree/main/manifests">通过 kubectl 插件 kube-thanos 部署 Store 与 Query 的 Manifests&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="sidecar-或-receiver">Sidecar 或 Receiver&lt;/h2>
&lt;p>由于 Sidecar 的工作性质，所以，Sidecar 组件最好作为 Prometheus 的 sidecar 容器，部署在同一个 Pod 中。&lt;/p>
&lt;h2 id="query-1">Query&lt;/h2>
&lt;h2 id="store-1">Store&lt;/h2>
&lt;h2 id="compact">Compact&lt;/h2>
&lt;h1 id="通过-prometheus-operator-部署-thanos">通过 prometheus-operator 部署 Thanos&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://prometheus-operator.dev/docs/operator/thanos/">官方文档,prometheus operator-thanos&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/prometheus-operator/prometheus-operator/blob/master/Documentation/thanos.md">GitHub 文档,prometheus-operator-文档-thanos&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>Docs: Thanos 管理</title><link>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/Prometheus/Prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/Thanos/Thanos-%E7%AE%A1%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/Prometheus/Prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/Thanos/Thanos-%E7%AE%A1%E7%90%86/</guid><description>
&lt;h1 id="thanos-store-可能产生的问题">Thanos Store 可能产生的问题&lt;/h1>
&lt;p>下面报警触发的原因未知，但是在 node-exporter 的面板中，打开系统明细，并查询 90 天数据，且 receive 只保留 30 天数据时，大概率会发生这个问题。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;status&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;success&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;data&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;resultType&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;matrix&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;result&amp;#34;&lt;/span>: []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;warnings&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;No StoreAPIs matched for this query&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;No StoreAPIs matched for this query&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Thanos 配置详解</title><link>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/Prometheus/Prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/Thanos/Thanos-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/Prometheus/Prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/Thanos/Thanos-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;/blockquote>
&lt;h1 id="sidecar-配置">Sidecar 配置&lt;/h1>
&lt;h2 id="命令行标志httpsthanosiotipcomponentssidecarmdflags">&lt;a href="https://thanos.io/tip/components/sidecar.md/#flags">命令行标志&lt;/a>&lt;/h2>
&lt;p>&lt;strong>&amp;ndash;grpc-addresss=&lt;!-- raw HTML omitted -->&lt;/strong> # 暴露的 StoreAPI 端点。默认值：&lt;code>0.0.0.0:10901&lt;/code>
&lt;strong>&amp;ndash;http-address=&lt;!-- raw HTML omitted -->&lt;/strong> # 监听的 HTTP 端点。/metrics 端点暴露指标。默认值：&lt;code>0.0.0.0:10902&lt;/code>
&lt;strong>&amp;ndash;objstore.config-file=&lt;!-- raw HTML omitted -->&lt;/strong># 对象存储的配置信息。Sidecar 根据该配置，将 Prometheus 自身保存的数据转存到配置的对象存储中。
&lt;strong>&amp;ndash;prometheus.url=&lt;!-- raw HTML omitted -->&lt;/strong># 与 Prometheus Server 交互的地址。默认值：&lt;code>http://localhost:9090&lt;/code>
&lt;strong>&amp;ndash;tsdb.path=&lt;!-- raw HTML omitted -->&lt;/strong> # Prometheus 存储时间序列数据的路径。默认值：&lt;code>./data&lt;/code>
&lt;strong>&amp;ndash;shipper.upload-compacted&lt;/strong> # 开启已压缩数据转存功能。该标志对迁移数据很有用。&lt;/p>
&lt;h2 id="配置文件">配置文件&lt;/h2>
&lt;h1 id="receiver-配置">Receiver 配置&lt;/h1>
&lt;h2 id="命令行标志httpsthanosiotipcomponentsreceivemdflags">&lt;a href="https://thanos.io/tip/components/receive.md/#flags">命令行标志&lt;/a>&lt;/h2>
&lt;p>&lt;strong>&amp;ndash;grpc-address=&lt;!-- raw HTML omitted -->&lt;/strong> # 暴露的 StoreAPI 端点。&lt;code>默认值：0.0.0.0:10901&lt;/code>
&lt;strong>&amp;ndash;http-address=&lt;!-- raw HTML omitted -->&lt;/strong> # 监听的 HTTP 端点。/metrics 端点暴露指标。&lt;code>默认值：0.0.0.0:10902&lt;/code>
&lt;strong>&amp;ndash;label=&amp;lt;KEY=&amp;ldquo;VALUE&amp;rdquo;&amp;gt;&lt;/strong> # 为所有序列创建的标签，多个标签指定多个 &amp;ndash;label 标志。与 prometheus 配置 external_labels 字段效果一样
&lt;strong>&amp;ndash;objstore.config-file=&lt;!-- raw HTML omitted -->&lt;/strong># 对象存储的配置信息。Receiver 根据该配置，将时序数据转存到对象存储中。
&lt;strong>&amp;ndash;receive.hashrings-file=/etc/thanos/receiver-hashring.json&lt;/strong> #
&lt;strong>&amp;ndash;receive.local-endpoint=127.0.0.1:10901&lt;/strong> #
&lt;strong>&amp;ndash;receive.replication-factor=1&lt;/strong> #
&lt;strong>&amp;ndash;remote-write.address=&lt;!-- raw HTML omitted -->&lt;/strong> # 处理 Prometheus 的 Remote Write 请求的地址和端口。&lt;code>默认值：0.0.0.0:19291&lt;/code>
&lt;strong>&amp;ndash;tsdb.path=&lt;!-- raw HTML omitted -->&lt;/strong> # Receiver 的 TSDB 存储数据的路径。&lt;code>默认值：./data&lt;/code>
&lt;strong>&amp;ndash;tsdb.retention=&lt;!-- raw HTML omitted -->&lt;/strong> # Receiver 的 TSDB 中存储数据的时长。&lt;code>默认值：15d&lt;/code>
&lt;strong>&amp;ndash;tsdb.wal-compression&lt;/strong> # 开启压缩 TSDB 的 WAL 功能。&lt;/p>
&lt;h2 id="配置文件-1">配置文件&lt;/h2>
&lt;h1 id="query-配置">Query 配置&lt;/h1>
&lt;h2 id="命令行标志httpsthanosiotipcomponentsquerymdflags">&lt;a href="https://thanos.io/tip/components/query.md/#flags">命令行标志&lt;/a>&lt;/h2>
&lt;p>&lt;strong>&amp;ndash;store=&lt;!-- raw HTML omitted -->&lt;/strong> # 发起 PromQL 查询请求时的目标，若有多个查询目标，可以配置多个该选项。通常用来指定某些组件暴露的 StoreAPI。
&lt;strong>&amp;ndash;query.lookback-delta=&lt;!-- raw HTML omitted -->&lt;/strong> # 评估 PromQL 表达式时最大的回溯时间。&lt;code>默认值：5m&lt;/code>&lt;/p>
&lt;ul>
&lt;li>比如，当采集目标的间隔时间为 10m 时，由于该设置，最大只能查询当前时间的前 5m 的数据，这是，即时向量表达式返回的结果将会为空。&lt;/li>
&lt;/ul>
&lt;h2 id="配置文件-2">配置文件&lt;/h2>
&lt;h1 id="store-配置">Store 配置&lt;/h1>
&lt;h2 id="命令行标志httpsthanosiotipcomponentsstoremdflags">&lt;a href="https://thanos.io/tip/components/store.md/#flags">命令行标志&lt;/a>&lt;/h2>
&lt;p>&lt;strong>&amp;ndash;grpc-address=&lt;!-- raw HTML omitted -->&lt;/strong> # 暴露的 StoreAPI 端点。&lt;code>默认值：0.0.0.0:10901&lt;/code>
&lt;strong>&amp;ndash;http-address=&lt;!-- raw HTML omitted -->&lt;/strong> # 监听的 HTTP 端点。/metrics 端点暴露指标。&lt;code>默认值：0.0.0.0:10902&lt;/code>
&lt;strong>&amp;ndash;objstore.config-file=&lt;!-- raw HTML omitted -->&lt;/strong># 对象存储的配置信息。Store 收到 PromQL 查询请求后，将会根据该配置文件的内容，去相应的对象存储中查询数据。&lt;/p>
&lt;h2 id="配置文件-3">配置文件&lt;/h2>
&lt;h1 id="compactor-配置">Compactor 配置&lt;/h1>
&lt;h2 id="命令行标志httpsthanosiotipcomponentscompactmdflags">&lt;a href="https://thanos.io/tip/components/compact.md/#flags">命令行标志&lt;/a>&lt;/h2>
&lt;p>&lt;strong>&amp;ndash;log.format=&lt;!-- raw HTML omitted -->&lt;/strong> # 输出的日志格式。&lt;code>默认值：logfmt&lt;/code>&lt;/p>
&lt;ul>
&lt;li>可用的格式有 logfmt、json&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>&amp;ndash;log.level=&lt;!-- raw HTML omitted -->&lt;/strong> # 输出日志的级别。&lt;code>默认值：info&lt;/code>
&lt;strong>&amp;ndash;retention.resolution-raw=&lt;!-- raw HTML omitted -->&lt;/strong> # 对象存储中，原始数据的保留时长。
&lt;strong>&amp;ndash;retention.resolution-5m=&lt;!-- raw HTML omitted -->&lt;/strong> # 对象存储中，降采样到样本间隔 5 分钟的数据的保留时长。
&lt;strong>&amp;ndash;retention.resolution-1h=&lt;!-- raw HTML omitted -->&lt;/strong> # 对象存储中，降采样到样本间隔 1 小时的数据的保留时长。&lt;/p>
&lt;ul>
&lt;li>通常建议它们的存放时间递增配置（一般只有比较新的数据才会放大看，久远的数据通常只会使用大时间范围查询来看个大致，所以建议将精细程度低的数据存放更长时间）。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>&amp;ndash;wait&lt;/strong> # 让 Compactor 持续运行，而不是压缩完成后结束进程
&lt;strong>&amp;ndash;wait-interval=&lt;!-- raw HTML omitted -->&lt;/strong> # 每次压缩任务的等待时间和桶刷新时间。仅在指定了 &amp;ndash;wait 标志后才起作用。&lt;/p>
&lt;h2 id="配置文件-4">配置文件&lt;/h2>
&lt;h1 id="ruler-配置">Ruler 配置&lt;/h1>
&lt;h2 id="命令行标志">命令行标志&lt;/h2>
&lt;h2 id="配置文件-5">配置文件&lt;/h2></description></item><item><title>Docs: Thanos 组件详解</title><link>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/Prometheus/Prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/Thanos/Thanos-%E7%BB%84%E4%BB%B6%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/Prometheus/Prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/Thanos/Thanos-%E7%BB%84%E4%BB%B6%E8%AF%A6%E8%A7%A3/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://thanos.io/tip/components/">官方文档，组件&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zhuanlan.zhihu.com/p/137248127">https://zhuanlan.zhihu.com/p/137248127&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="compactor压缩器">Compactor(压缩器)&lt;/h1>
&lt;p>&lt;strong>注意：Compactor 在持久运行状态，会对对象存储发起大量的 GET 请求。最好间隔一段时间，运行一次，压缩一次数据即可，不必持久运行&lt;/strong>
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/ilh4m6/1636990514133-53c917f1-6f57-4bb5-a59d-0776a5fef235.png" alt="image.png">&lt;/p>
&lt;h1 id="receiver接收器">Receiver(接收器)&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://thanos.io/tip/components/receive.md">官方文档,组件-接收器&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="querier查询器">Querier(查询器)&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://thanos.io/tip/components/query.md">官方文档,组件-查询器&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Querier 组件分为两部分&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Querier(查询器)&lt;/strong> # 实现了 Prometheus API，可以通过 Querier 发起 PromQL 查询请求，以获取数据；甚至可以从 Prometheus Server 的时序数据库中删除数据。每个从 Querier 发起的 PromQL 查询请求都会发送到可以暴露 StoreAPI 的组件上，并获取查询结果。&lt;/li>
&lt;li>&lt;strong>Query Fronted(查询前端)&lt;/strong> # 实现了 Prometheus API，可以将请求负载均衡到指定的多个 Querier 上，同时可以缓存响应数据、也可以按查询日拆分。有点像 Redis 的效果&lt;/li>
&lt;/ul>
&lt;p>Querier 组件向一个或多个暴露 StoreAPI 的组件发起查询请求，并将结果去重后，返回给查询客户端。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/ilh4m6/1627118034684-9a4e56ce-7593-4bca-bc38-7fd72bff563c.png" alt="image.png">&lt;/p>
&lt;h2 id="deduplication重复数据删除">Deduplication(重复数据删除)&lt;/h2>
&lt;p>The query layer can deduplicate series that were collected from high-availability pairs of data sources such as Prometheus. A fixed single or multiple replica labels must be chosen for the entire cluster and can then be passed to query nodes on startup.查询层可以从高可用性对数据源（如 Prometheus）收集的档案。必须为整个群集选择固定的单个或多个副本标签，然后可以通过启动时传递到查询节点。&lt;/p>
&lt;p>Two or more series that are only distinguished by the given replica label, will be merged into a single time series. This also hides gaps in collection of a single data source.仅通过给定的副本标签区分的两个或更多系列，将合并为单个时间序列。这也隐藏了收集单个数据源的间隙。&lt;/p>
&lt;h3 id="单副本标签示例">单副本标签示例&lt;/h3>
&lt;p>假如现在 Query 从不同的 StoreAPI 中获取了三条时序数据&lt;/p>
&lt;ul>
&lt;li>Prometheus + sidecar &amp;ldquo;A&amp;rdquo;: cluster=1,env=2,replica=A&lt;/li>
&lt;li>Prometheus + sidecar &amp;ldquo;B&amp;rdquo;: cluster=1,env=2,replica=B&lt;/li>
&lt;li>Prometheus + sidecar &amp;ldquo;A&amp;rdquo; in different cluster: cluster=2,env=2,replica=A&lt;/li>
&lt;/ul>
&lt;p>我们像下面这样配置 query&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>If we configure Querier like this:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>thanos query &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --http-address &lt;span style="color:#e6db74">&amp;#34;0.0.0.0:9090&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --query.replica-label &lt;span style="color:#e6db74">&amp;#34;replica&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --store &lt;span style="color:#e6db74">&amp;#34;&amp;lt;store-api&amp;gt;:&amp;lt;grpc-port&amp;gt;&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --store &lt;span style="color:#e6db74">&amp;#34;&amp;lt;store-api2&amp;gt;:&amp;lt;grpc-port&amp;gt;&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>当我们在运行 query 时指定了 &lt;code>--query.replica-label&lt;/code> 标志时，我们会将具有相同标签的时序去重只保留一个，此时我们将获得 2 个结果：&lt;/p>
&lt;ul>
&lt;li>up{job=&amp;ldquo;prometheus&amp;rdquo;,env=&amp;ldquo;2&amp;rdquo;,cluster=&amp;ldquo;1&amp;rdquo;} 1&lt;/li>
&lt;li>up{job=&amp;ldquo;prometheus&amp;rdquo;,env=&amp;ldquo;2&amp;rdquo;,cluster=&amp;ldquo;2&amp;rdquo;} 1&lt;/li>
&lt;/ul>
&lt;p>如果没有此副本标志（关闭数据删除），我们将获得 3 个结果：&lt;/p>
&lt;ul>
&lt;li>up{job=&amp;ldquo;prometheus&amp;rdquo;,env=&amp;ldquo;2&amp;rdquo;,cluster=&amp;ldquo;1&amp;rdquo;,replica=&amp;ldquo;A&amp;rdquo;} 1&lt;/li>
&lt;li>up{job=&amp;ldquo;prometheus&amp;rdquo;,env=&amp;ldquo;2&amp;rdquo;,cluster=&amp;ldquo;1&amp;rdquo;,replica=&amp;ldquo;B&amp;rdquo;} 1&lt;/li>
&lt;li>up{job=&amp;ldquo;prometheus&amp;rdquo;,env=&amp;ldquo;2&amp;rdquo;,cluster=&amp;ldquo;2&amp;rdquo;,replica=&amp;ldquo;A&amp;rdquo;} 1&lt;/li>
&lt;/ul>
&lt;h3 id="多副本标签示例">多副本标签示例&lt;/h3>
&lt;ul>
&lt;li>Prometheus + sidecar &amp;ldquo;A&amp;rdquo;: cluster=1,env=2,replica=A,replicaX=A&lt;/li>
&lt;li>Prometheus + sidecar &amp;ldquo;B&amp;rdquo;: cluster=1,env=2,replica=B,replicaX=B&lt;/li>
&lt;li>Prometheus + sidecar &amp;ldquo;A&amp;rdquo; in different cluster: cluster=2,env=2,replica=A,replicaX=A&lt;/li>
&lt;/ul>
&lt;p>上面的例子有两个需要去重的标签，那么就可以使用两次 &lt;code>--query.replica-label&lt;/code> 标志。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>thanos query &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --http-address &lt;span style="color:#e6db74">&amp;#34;0.0.0.0:9090&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --query.replica-label &lt;span style="color:#e6db74">&amp;#34;replica&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --query.replica-label &lt;span style="color:#e6db74">&amp;#34;replicaX&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --store &lt;span style="color:#e6db74">&amp;#34;&amp;lt;store-api&amp;gt;:&amp;lt;grpc-port&amp;gt;&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --store &lt;span style="color:#e6db74">&amp;#34;&amp;lt;store-api2&amp;gt;:&amp;lt;grpc-port&amp;gt;&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="query-frontend查询前端">Query Frontend(查询前端)&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://thanos.io/tip/components/query-frontend.md/">官方文档，组件-查询前端&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/W9diP0OKt_-ajAXM_wgogg">公众号-k8s 技术圈，使用 Thanos 查询前端优化查询性能&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="sidecar边车">Sidecar(边车)&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://thanos.io/tip/components/sidecar.md/">官方文档，组件-边车&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>Docs: Thanos 组件详解</title><link>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/Prometheus/Prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/Thanos/Thanos-%E7%BB%84%E4%BB%B6%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/Prometheus/Prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/Thanos/Thanos-%E7%BB%84%E4%BB%B6%E8%AF%A6%E8%A7%A3/</guid><description/></item></channel></rss>