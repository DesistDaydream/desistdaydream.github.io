<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – IT学习笔记</title><link>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link><description>Recent content in IT学习笔记 on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: 💻0.计算机</title><link>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/0.%E8%AE%A1%E7%AE%97%E6%9C%BA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/0.%E8%AE%A1%E7%AE%97%E6%9C%BA/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Computer">Wiki,Computer&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Von_Neumann_architecture">Wiki,Von Neumann Architecture(冯·诺依曼架构)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Xia_Peisu">Wiki,Xia_Peisu&lt;/a>(夏培肃，中国计算机之母)&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>世界上公认的第一台数字电子计算机于 1946 年问世，人们通常按照计算机元器件的演变，把计算机的发展过程分为如下几个阶段：&lt;/p>
&lt;ul>
&lt;li>第一代：1946 ~ 1958 年 # 电子管&lt;/li>
&lt;li>第二代：1958 ~ 1964 年 # 晶体管&lt;/li>
&lt;li>第三代：1964 ~ 1974 年 # 小规模集成电路&lt;/li>
&lt;li>第四代：1974 ~ 至今 # 大规模集成电路&lt;/li>
&lt;/ul>
&lt;h1 id="x86">X86&lt;/h1>
&lt;p>&lt;strong>x86&lt;/strong>是一个术语，用于描述与 Intel 8086 及其后续产品兼容的 CPU 指令集，包括 Pentium 和 Intel 及其他公司制造的其他产品。这是大多数台式机和笔记本电脑中使用的 CPU 架构。许多 21 世纪的工作站和服务器也使用 x86 处理器。1985 年，随着 i386 处理器的推出，最初的 16 位 x86 架构扩展到 32 位。随着 AMD Opteron 处理器的推出，它在 2003 年再次扩展到 64 位。&lt;/p>
&lt;p>英特尔在 2004 年采用了 64 位计算位架构和更高版本的 Prescott Pentium 4.不同版本是向后兼容的，这意味着 32 位 x86(x86-32)CPU 可以运行 32 位或 16 位操作系统，64 位 x86(x86-64)CPU 可以运行 16 位，32 位或 64 位操作系统。所有 x86 CPU（除了嵌入式系统中使用的某些 Intel CPU 的极少例外）都以 16 位实模式启动。在引导内核之前，现代操作系统（或有时是引导加载程序）将 CPU 切换为 32 位保护模式或 64 位长模式。&lt;/p>
&lt;h1 id="32-bit-与-64-bit32-位与-64-位">32-bit 与 64-bit(32 位与 64 位)&lt;/h1>
&lt;p>CPU 的位是指一次性可处理的数据量是多少，1 字节=8 位，32 位处理器可以一次性处理 4 个字节的数据量，,64 位处理器可以一次性处理 8 个字节的数据量。依次类推。32 位操作系统针对的 32 位的 CPU 设计。&lt;/p>
&lt;p>可以吧 1bit 理解为一个 0 或者一个 1，所以 4 字节就是 32bit，也就是说最大数为 11111111111111111111111111111111，换算成 10 进制就是 4294967295bit，由于 1024bit=1kb，1024kb=1m，以此类推的话，32 位处理器一次性处理 3.99G 的数据量，大于这个的数据，则无法被处理。&lt;/p>
&lt;p>在使用内存的时候，需要使用 16 进制来表示内存的地址位置 32 个 0 表示内存的第一个位置，32 个 1 表示内存地址的最后一个。&lt;/p>
&lt;h1 id="计算机为什么叫计算机">计算机为什么叫计算机&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.ximalaya.com/keji/246622/30260075">原来是这样-150 期&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>计算机本质就是用来计算的&lt;/p>
&lt;h1 id="冯诺依曼架构">冯·诺依曼架构&lt;/h1>
&lt;h1 id="bios-与-uefi">BIOS 与 UEFI&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/jTQu14SuoIj-c2L7hEiYzg">公众号-OSC 开源社区，用户极力反对，Fedora 重新讨论 BIOS 未来&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>Docs: 📄1.操作系统</title><link>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</guid><description/></item><item><title>Docs: 👨‍💻2.编程</title><link>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/</guid><description/></item><item><title>Docs: ✨3.集群与分布式</title><link>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/3.%E9%9B%86%E7%BE%A4%E4%B8%8E%E5%88%86%E5%B8%83%E5%BC%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/3.%E9%9B%86%E7%BE%A4%E4%B8%8E%E5%88%86%E5%B8%83%E5%BC%8F/</guid><description/></item><item><title>Docs: 🌐4.数据通信</title><link>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/</guid><description/></item><item><title>Docs: 📼5.数据存储</title><link>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;h2 id="参考">参考：&lt;/h2>
&lt;/blockquote>
&lt;p>Data Storage(数据存储)&lt;/p>
&lt;h1 id="metadata元数据">Metadata(元数据)&lt;/h1>
&lt;p>又称中介数据、中继数据，为描述数据的数据（data about data），主要是描述数据属性（property）的信息，用来支持如指示存储位置、历史数据、资源查找、文件记录等功能。元数据算是一种电子式目录，为了达到编制目录的目的，必须在描述并收藏数据的内容或特色，进而达成协助数据检索的目的。都柏林核心集（Dublin Core Metadata Initiative，DCMI）是元数据的一种应用，是 1995 年 2 月由国际图书馆电脑中心（OCLC）和美国国家超级计算应用中心（National Center for Supercomputing Applications，NCSA）所联合赞助的研讨会，在邀请 52 位来自图书馆员、电脑专家，共同制定规格，创建一套描述网络上电子文件之特征。&lt;/p>
&lt;p>例：一个文件的创建日期，所在位置等，除了文件内容以外的东西都可以称之为元数据。&lt;/p>
&lt;h1 id="备份和归档的区别">备份和归档的区别&lt;/h1>
&lt;ol>
&lt;li>
&lt;p>不同的过程会导致不同的结果。归档最通用的定义是存储有组织的数据。归档的目的是长时间存放有组织的数据集，确保其将来能够被精细地检索。改进的磁带是这种应用最理想的方式。FujiFilm 对它的新一代 BaFe 磁带产品的弹性测试证明其数据保存能力很强，可以存储 30 年以上。 相比之下，磁盘的故障率比其制造商说的还要高，几年前 Carnegie Mellon University 和 Google 的研究记录证明了这一点。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>备份是短时间存储那些频繁更换或更新的数据的副本。这相当于一批廉价的离线介质上的数据副本。通过这种方式，可以把数据与那些基于磁盘的数据中断事件隔离开，以免同时遭到损坏，这样，如果原始数据或存储平台损坏的话，数据就可以恢复到任何磁盘阵列。在磁盘到磁盘复制解决方案中，复制只能发生在两个完全相同的设备中。此外，复制过程还可以中断，这样你就可以检查在主数据存储和镜像仓库之间的增量或差异。不过，最好别这样做，因为它可能会导致在磁盘到磁盘的复制过程中产生很多不易察觉的错误。 很遗憾，我发现你在努力保护你的数据时，它已经在阵列之间移动了，而你只镜像复制了一个空白空间&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>TechTarget 中国原创内容，原文链接： &lt;a href="https://searchstorage.techtarget.com.cn/6-23590/">https://searchstorage.techtarget.com.cn/6-23590/&lt;/a>&lt;/p></description></item><item><title>Docs: 👀6.可观测性</title><link>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/</guid><description/></item><item><title>Docs: 🔐7.信息安全</title><link>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/</guid><description/></item><item><title>Docs: 📐8.通用技术</title><link>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/</guid><description/></item><item><title>Docs: 🛠️9.运维</title><link>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/</guid><description/></item><item><title>Docs: ☁️10.云原生</title><link>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/</guid><description/></item><item><title>Docs: 📹11.多媒体</title><link>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/11_%E5%A4%9A%E5%AA%92%E4%BD%93/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/11_%E5%A4%9A%E5%AA%92%E4%BD%93/</guid><description/></item><item><title>Docs: 🤖12.人工智能</title><link>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/12.%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/12.%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;p>NovelAI # &lt;a href="https://novelai.net/">https://novelai.net/&lt;/a> 写故事、作图&lt;/p>
&lt;h1 id="类-chatgpt-项目">类 ChatGPT 项目&lt;/h1>
&lt;p>bard，google 的
文心一言，百度的&lt;/p></description></item><item><title>Docs: 🧊区块链</title><link>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%8C%BA%E5%9D%97%E9%93%BE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%8C%BA%E5%9D%97%E9%93%BE/</guid><description/></item><item><title>Docs: 🧰实用工具</title><link>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/</guid><description>
&lt;h1 id="樱桃键盘">樱桃键盘&lt;/h1>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/na3u1y/1654068821514-75ee0957-87fb-44b4-bcbf-c635517dc6fc.png" alt="image.png">&lt;/p>
&lt;h1 id="国外产品">国外产品&lt;/h1>
&lt;p>Facebook
Twitter
Google
Spotify
Snapchat
Instagram
Shopify
Reddit
Twitch
Youtube
TikTok
Pinterest&lt;/p></description></item><item><title>Docs: 📚标准化术语</title><link>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/x_%E6%A0%87%E5%87%86%E5%8C%96%E6%9C%AF%E8%AF%AD/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/x_%E6%A0%87%E5%87%86%E5%8C%96%E6%9C%AF%E8%AF%AD/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;h2 id="参考">参考：&lt;/h2>
&lt;/blockquote>
&lt;p>StandardizedGlossary(标准化术语)&lt;/p>
&lt;h1 id="黑盒学习-与-白盒学习">黑盒学习 与 白盒学习&lt;/h1>
&lt;p>学习过程分两种&lt;/p>
&lt;ul>
&lt;li>黑盒 # 看看这个知识点与周围其他系统之间的关系，以及互相作用的效果。了解基本工作逻辑&lt;/li>
&lt;li>白盒 # 打开待学习的知识点，直接学习知识点的原理&lt;/li>
&lt;/ul>
&lt;p>要掌握一个学科的精髓，不能从细枝末节开始。人脑的能力很大程度上受限于信念。一个人不相信自己的时候，他就做不到本来可能的事。信心是很重要的，信心却容易被挫败。如果只见树木不见森林，人会失去信心，以为要到猴年马月才能掌握一个学科。&lt;/p>
&lt;p>所以我们不从 “树木” 开始，而是引导读者一起来探索这背后的“森林”，把计算机科学最根本的概念用浅显的例子解释，让读者领会到它们的本质。把这些概念稍作发展，你就得到逐渐完整的把握。你一开头就掌握着整个学科，而且一直掌握着它，只不过增添更多细节而已。这就像画画，先勾勒出轮廓，一遍遍的增加细节，日臻完善，却不失去对大局的把握。&lt;/p>
&lt;h1 id="bare-metal裸金属">Bare metal(裸金属)&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Bare_machine">Wiki,Bare machine&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>在计算机科学中，&lt;strong>Bare metal(裸金属)&lt;/strong> 也称为 &lt;strong>Bare machine(裸机)&lt;/strong>，是指在没有介入操作系统的逻辑硬件上执行指令的计算机。&lt;/p>
&lt;p>在很多软件的部署文档中，Bare metal 经常作为部署方式的一种，但是这时候裸金属部署，并不是真的在没有操作系统的服务器上安装软件，而是指在没有其他通用平台上安装，说白了，就是指&lt;strong>原始安装&lt;/strong>&lt;/p></description></item></channel></rss>