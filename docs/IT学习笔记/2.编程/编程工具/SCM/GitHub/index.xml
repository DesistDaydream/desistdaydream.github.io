<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – GitHub</title><link>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/SCM/GitHub/</link><description>Recent content in GitHub on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/SCM/GitHub/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: git clone克隆或下载一个仓库单个文件夹</title><link>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/SCM/GitHub/git-clone%E5%85%8B%E9%9A%86%E6%88%96%E4%B8%8B%E8%BD%BD%E4%B8%80%E4%B8%AA%E4%BB%93%E5%BA%93%E5%8D%95%E4%B8%AA%E6%96%87%E4%BB%B6%E5%A4%B9/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/SCM/GitHub/git-clone%E5%85%8B%E9%9A%86%E6%88%96%E4%B8%8B%E8%BD%BD%E4%B8%80%E4%B8%AA%E4%BB%93%E5%BA%93%E5%8D%95%E4%B8%AA%E6%96%87%E4%BB%B6%E5%A4%B9/</guid><description>
&lt;h1 id="heading">&lt;/h1>
&lt;h1 id="1如果是想克隆别人的项目或者自己的">1、如果是想克隆别人的项目或者自己的&lt;/h1>
&lt;p>很简单的一个网站就解决了。&lt;a href="http://downgit.zhoudaxiaa.com">DownGit&lt;/a>： 只需要找到仓库中对应文件夹的 url,输入之后,点击 download 自动打包下载:&lt;/p>
&lt;p>（这里说明一下，因为原作者的项目无法使用，这是我修改过的新项目吧，把资源链接改到了国内 CDN，所以访问速度很快！）&lt;/p>
&lt;h1 id="2克隆自己的项目">2、克隆自己的项目&lt;/h1>
&lt;p>&lt;strong>注意：本方法会下载整个项目，但是，最后出现在本地项目文件下里只有需要的那个文件夹存在。类似先下载，再过滤。&lt;/strong>&lt;/p>
&lt;p>&lt;strong>有时候因为需要我们只想 gitclone 下仓库的单个或多个文件夹，而不是全部的仓库内容，这样就很省事，所以下面就开始教程啦&lt;/strong>&lt;/p>
&lt;p>在 Git1.7.0 以前，这无法实现，但是幸运的是在 Git1.7.0 以后加入了 Sparse Checkout 模式，这使得 Check Out 指定文件或者文件夹成为可能。&lt;/p>
&lt;p>&lt;strong>举个例子：&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>现在有一个&lt;strong>test&lt;/strong>仓库&lt;a href="https://github.com/mygithub/test">https://github.com/mygithub/test&lt;/a>你要 gitclone 里面的&lt;strong>tt&lt;/strong>子目录：在本地的硬盘位置打开&lt;strong>Git Bash&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;pre>&lt;code>git init test &amp;amp;&amp;amp; cd test //新建仓库并进入文件夹
git config core.sparsecheckout true //设置允许克隆子目录
echo 'tt*' &amp;gt;&amp;gt; .git/info/sparse-checkout //设置要克隆的仓库的子目录路径 //空格别漏
git remote add origin git@github.com:mygithub/test.git //这里换成你要克隆的项目和库
git pull origin master //下载
复制代码
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>ok，大功告成！！！&lt;/strong>&lt;/p></description></item><item><title>Docs: GitHub</title><link>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/SCM/GitHub/GitHub/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/SCM/GitHub/GitHub/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>官方文档：&lt;a href="https://docs.github.com/cn">https://docs.github.com/cn&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>在代码仓库中，点击 &lt;code>.&lt;/code> 即可进入 Web 版的 VS Code，在线编辑当前仓库的代码。&lt;/p></description></item><item><title>Docs: GitHub Actions</title><link>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/SCM/GitHub/GitHub-Actions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/SCM/GitHub/GitHub-Actions/</guid><description/></item><item><title>Docs: GitHub 技巧</title><link>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/SCM/GitHub/GitHub-%E6%8A%80%E5%B7%A7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/SCM/GitHub/GitHub-%E6%8A%80%E5%B7%A7/</guid><description>
&lt;h1 id="管理所有通知">管理所有通知&lt;/h1>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/cplu4a/1662610871922-964b6726-be46-4fc9-b450-f3705aed8174.png" alt="image.png">&lt;/p>
&lt;h1 id="管理所有已经订阅的-issue">管理所有已经订阅的 issue&lt;/h1>
&lt;p>&lt;a href="https://github.com/notifications/subscriptions">https://github.com/notifications/subscriptions&lt;/a>&lt;/p>
&lt;h1 id="搜索用户评论过的内容">搜索用户评论过的内容&lt;/h1>
&lt;p>commenter:USERNAME&lt;/p>
&lt;h1 id="明确搜索仓库标题仓库描述readme">明确搜索仓库标题、仓库描述、README&lt;/h1>
&lt;p>GitHub 提供了便捷的搜索方式，可以限定只搜索仓库的标题、或者描述、README 等。&lt;/p>
&lt;p>以 Spring Cloud 为例，一般一个仓库，大概是这样的&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/cplu4a/1616903574584-c6483e74-4756-4303-96d8-53ff32e333c1.jpeg" alt="">&lt;/p>
&lt;p>其中，红色箭头指的两个地方，分别是仓库的名称和描述。咱们可以直接限定关键字只查特定的地方。比如咱们只想查找仓库名称包含 spring cloud 的仓库，可以使用语法&lt;/p>
&lt;p>in:name 关键词&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/cplu4a/1616903574564-8f67c6a5-a719-4880-8e05-5467aada9b7c.jpeg" alt="">&lt;/p>
&lt;p>如果想查找描述的内容，可以使用这样的方式：&lt;/p>
&lt;p>in:descripton 关键词&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/cplu4a/1616903574564-ac24da6d-574a-456b-87fb-507bbe8fc444.jpeg" alt="">&lt;/p>
&lt;p>这里就是搜索上面项目描述的内容。&lt;/p>
&lt;p>一般项目，都会有个 README 文件，如果要查该文件包含特定关键词的话，我想你猜到了&lt;/p>
&lt;p>in:readme 关键词&lt;/p>
&lt;h1 id="明确搜索-starfork-数大于多少的">明确搜索 star、fork 数大于多少的&lt;/h1>
&lt;p>一个项目 star 数的多少，一般代表该项目有受欢迎程度。虽然现在也有垃圾项目刷 star ，但毕竟是少数， star 依然是个不错的衡量标准。&lt;/p>
&lt;p>stars: &amp;gt; 数字 关键字。&lt;/p>
&lt;p>比如咱们要找 star 数大于 3000 的 Spring Cloud 仓库，就可以这样&lt;/p>
&lt;p>stars:&amp;gt;3000 spring cloud&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/cplu4a/1616903574567-e0f24105-b02a-46d7-b633-5070170810e8.jpeg" alt="">&lt;/p>
&lt;p>如果不加 &amp;gt;= 的话，是要精确找 star 数等于具体数字的，这个一般有点困难。&lt;/p>
&lt;p>如果要找在指定数字区间的话，使用&lt;/p>
&lt;p>stars: 10..20 关键词&lt;/p>
&lt;p>fork 数同理，将上面的 stars 换成 fork，其它语法相同&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/cplu4a/1616903574573-42bb52aa-c87d-454b-bac7-68525db88957.jpeg" alt="">&lt;/p>
&lt;ol start="3">
&lt;li>明确搜索仓库大小的&lt;/li>
&lt;/ol>
&lt;p>比如你只想看个简单的 Demo，不想找特别复杂的且占用磁盘空间较多的，可以在搜索的时候直接限定仓库的 size 。&lt;/p>
&lt;p>使用方式：&lt;/p>
&lt;p>size:&amp;gt;=5000 关键词&lt;/p>
&lt;p>这里注意下，这个数字代表 K, 5000 代表着 5M。&lt;/p>
&lt;h1 id="明确仓库是否还在更新维护">明确仓库是否还在更新维护&lt;/h1>
&lt;p>我们在确认是否要使用一些开源产品，框架的时候，是否继续维护是很重要的一点。如果已经过时没人维护的东西，踩了坑就不好办了。而在 GitHub 上找项目的时候，不再需要每个都点到项目里看看最近 push 的时间，直接在搜索框即可完成。&lt;/p>
&lt;p>元旦刚过，比如咱们要找临近年底依然在勤快更新的项目，就可以直接指定更新时间在哪个时间前或后的&lt;/p>
&lt;p>通过这样一条搜索 pushed:&amp;gt;2019-01-03 spring cloud&lt;/p>
&lt;p>咱们就找到了 1 月 3 号之后，还在更新的项目。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/cplu4a/1616903574580-8fddcda2-950e-41a8-9a31-6601402757d4.jpeg" alt="">&lt;/p>
&lt;p>你是想找指定时间之前或之后创建的仓库也是可以的，把 pushed 改成 created 就行。&lt;/p>
&lt;h1 id="明确搜索仓库的-license">明确搜索仓库的 LICENSE&lt;/h1>
&lt;p>咱们经常使用开源软件，一定都知道，开源软件也是分不同的「门派」不同的 LICENSE。开源不等于一切免费，不同的许可证要求也大不相同。 2018 年就出现了 Facebook 修改 React 的许可协议导致各个公司纷纷修改自己的代码，寻找替换的框架。&lt;/p>
&lt;p>例如咱们要找协议是最为宽松的 Apache License 2 的代码，可以这样&lt;/p>
&lt;p>license:apache-2.0 spring cloud&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/cplu4a/1616903574564-632dcc34-2b27-41e6-886a-5530636a94ee.jpeg" alt="">&lt;/p>
&lt;p>其它协议就把 apache-2.0 替换一下即可，比如换成 mit 之类的。&lt;/p>
&lt;h1 id="明确搜索仓库的语言">明确搜索仓库的语言&lt;/h1>
&lt;p>比如咱们就找 Java 的库， 除了像上面在左侧点击选择之外，还可以在搜索中过滤。像这样：&lt;/p>
&lt;p>language:java 关键词&lt;/p>
&lt;p>7.明确搜索某个人或组织的仓库&lt;/p>
&lt;p>比如咱们想在 GitHub 上找一下某个大神是不是提交了新的功能，就可以指定其名称后搜索，例如咱们看下 Josh Long 有没有提交新的 Spring Cloud 的代码，可以这样使用&lt;/p>
&lt;p>user:joshlong&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/cplu4a/1616903574568-a117b1af-b67c-40c2-869f-7fdaf3b9edb9.jpeg" alt="">&lt;/p>
&lt;p>组合使用一下，把 Java 项目过滤出来，多个查询之间「空格」分隔即可。&lt;/p>
&lt;p>user:joshlong language:java&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/cplu4a/1616903574577-960173b0-ec57-4b82-9d35-cb69e28bb633.jpeg" alt="">&lt;/p>
&lt;p>找某个组织的代码话，可以这样：&lt;/p>
&lt;p>org:spring-cloud 就可以列出具体 org 的仓库。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/cplu4a/1616903574593-1a151f42-a735-49ae-8372-5e17bfd2a519.jpeg" alt="">&lt;/p></description></item><item><title>Docs: github上fork了别人的项目后，再同步更新别人的提交.github上fork了别人的项目后，再同步更新别人的提交</title><link>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/SCM/GitHub/github%E4%B8%8Afork%E4%BA%86%E5%88%AB%E4%BA%BA%E7%9A%84%E9%A1%B9%E7%9B%AE%E5%90%8E%E5%86%8D%E5%90%8C%E6%AD%A5%E6%9B%B4%E6%96%B0%E5%88%AB%E4%BA%BA%E7%9A%84%E6%8F%90%E4%BA%A4.github%E4%B8%8Afork%E4%BA%86%E5%88%AB%E4%BA%BA%E7%9A%84%E9%A1%B9%E7%9B%AE%E5%90%8E%E5%86%8D%E5%90%8C%E6%AD%A5%E6%9B%B4%E6%96%B0%E5%88%AB%E4%BA%BA%E7%9A%84%E6%8F%90%E4%BA%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/SCM/GitHub/github%E4%B8%8Afork%E4%BA%86%E5%88%AB%E4%BA%BA%E7%9A%84%E9%A1%B9%E7%9B%AE%E5%90%8E%E5%86%8D%E5%90%8C%E6%AD%A5%E6%9B%B4%E6%96%B0%E5%88%AB%E4%BA%BA%E7%9A%84%E6%8F%90%E4%BA%A4.github%E4%B8%8Afork%E4%BA%86%E5%88%AB%E4%BA%BA%E7%9A%84%E9%A1%B9%E7%9B%AE%E5%90%8E%E5%86%8D%E5%90%8C%E6%AD%A5%E6%9B%B4%E6%96%B0%E5%88%AB%E4%BA%BA%E7%9A%84%E6%8F%90%E4%BA%A4/</guid><description>
&lt;h1 id="heading">&lt;/h1>
&lt;p>我从 github 网站和用 git 命令两种方式说一下。&lt;/p>
&lt;p>github 网站上操作&lt;/p>
&lt;ol>
&lt;li>
&lt;p>打开自己的仓库，进入 code 下面。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>点击 new pull request 创建。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/np6g3g/1616903559723-76f8c4f1-6c02-4145-829f-4b8ddb92de72.jpeg" alt="">&lt;/p>
&lt;ol>
&lt;li>
&lt;p>选择 base fork&lt;/p>
&lt;/li>
&lt;li>
&lt;p>选择 head fork&lt;/p>
&lt;/li>
&lt;li>
&lt;p>点击 Create pull request，并填写创建信息。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/np6g3g/1616903559704-28a10f3c-1397-40f9-9c67-0d9bc61da316.jpeg" alt="">&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/np6g3g/1616903559698-ff01b1e5-f9b9-406a-938b-3fca1309a5c0.jpeg" alt="">&lt;/p>
&lt;ol start="6">
&lt;li>点击 Merge pull request 合并从源 fork 来的代码。&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/np6g3g/1616903559689-63e77098-f4a1-4ea4-84c4-f514f4642fec.jpeg" alt="">&lt;/p>
&lt;ol start="7">
&lt;li>完成。&lt;/li>
&lt;/ol>
&lt;p>用 git 命令操作&lt;/p>
&lt;ol>
&lt;li>用 git remote 查看远程主机状态&lt;/li>
&lt;/ol>
&lt;p>git remote -v git remote add upstream &lt;a href="mailto:git@github.com">git@github.com&lt;/a>:xxx/xxx.gitgit fetch upstreamgit merge upstream/mastergit push&lt;/p>
&lt;ul>
&lt;li>
&lt;p>1&lt;/p>
&lt;/li>
&lt;li>
&lt;p>2&lt;/p>
&lt;/li>
&lt;li>
&lt;p>3&lt;/p>
&lt;/li>
&lt;li>
&lt;p>4&lt;/p>
&lt;/li>
&lt;li>
&lt;p>5&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: 我在 GitHub 上的互动</title><link>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/SCM/GitHub/%E6%88%91%E5%9C%A8-GitHub-%E4%B8%8A%E7%9A%84%E4%BA%92%E5%8A%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/SCM/GitHub/%E6%88%91%E5%9C%A8-GitHub-%E4%B8%8A%E7%9A%84%E4%BA%92%E5%8A%A8/</guid><description>
&lt;h1 id="issue">Issue&lt;/h1>
&lt;h2 id="bitnamicharts">bitnami/charts&lt;/h2>
&lt;p>&lt;a href="https://github.com/bitnami/charts/issues/4569#issuecomment-739678891">&lt;strong>Sentinel downtime and faulty service endpoints #4569&lt;/strong>&lt;/a>&lt;/p>
&lt;h2 id="coreosflannel">coreos/flannel&lt;/h2>
&lt;p>&lt;a href="https://github.com/coreos/flannel/issues/1259">&lt;strong>istio auto sidecar injection doesn&amp;rsquo;t work with flannel as CNI(Container Network Interface) tool #1259&lt;/strong>&lt;/a>&lt;/p>
&lt;h2 id="goharborharbor">goharbor/harbor&lt;/h2>
&lt;p>&lt;a href="https://github.com/goharbor/harbor/issues/7784">&lt;strong>add replication target /api/registries 400 bad request #7784&lt;/strong>&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/goharbor/harbor/issues/7489">&lt;strong>replication error：http error: code 401, message #7489&lt;/strong>&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/goharbor/harbor/issues/4557">&lt;strong>Harbor should expose metrics. #4557&lt;/strong>&lt;/a>&lt;/p>
&lt;h2 id="kubeappskubeapps">kubeapps/kubeapps&lt;/h2>
&lt;p>&lt;a href="https://github.com/kubeapps/kubeapps/issues/2222">&lt;strong>Do we have the swagger API doc of Dashboard or KubeOPS? #2222&lt;/strong>&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/kubeapps/kubeapps/issues/2223">&lt;strong>Cannot delete the Repositories sync job permanently #2223&lt;/strong>&lt;/a>&lt;/p>
&lt;h2 id="kuberneteskubernetes">kubernetes/kubernetes&lt;/h2>
&lt;p>&lt;a href="https://github.com/kubernetes/kubernetes/issues/90293">&lt;strong>kubelet warnings W0420 flooding systemd logs (kubernetes 1.18.2) #90293&lt;/strong>&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/kubernetes/kubernetes/issues/92072">&lt;strong>k8s related processes Disk read speed Too high #92072&lt;/strong>&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/kubernetes/kubernetes/issues/92671">&lt;strong>After the aggregation api is deleted, the deleted api still exists in the kube-apiserver metrics #92671&lt;/strong>&lt;/a>&lt;/p>
&lt;p>[&lt;strong>elasticsearch_logging_discovery.go:142] Found [] #94429&lt;/strong>](https://github.com/kubernetes/kubernetes/issues/94429)&lt;/p>
&lt;h2 id="lensapphttpsgithubcomlensapplenshttpsgithubcomlensapplens">&lt;a href="https://github.com/lensapp">lensapp&lt;/a>/&lt;a href="https://github.com/lensapp/lens">&lt;strong>lens&lt;/strong>&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/lensapp/lens/issues/112#issuecomment-755873566">&lt;strong>Add any custom repo helm chart #112&lt;/strong>&lt;/a>&lt;/p>
&lt;h2 id="istioistio">istio/istio&lt;/h2>
&lt;p>&lt;a href="https://github.com/istio/istio/issues/22319">&lt;strong>Error from server (InternalError): error when creating &amp;ldquo;STDIN&amp;rdquo;: Internal error occurred: failed calling webhook &amp;ldquo;validation.istio.io&amp;rdquo;: Post https://istiod.istio-system.svc:443/validate?timeout=30s: #22319&lt;/strong>&lt;/a>&lt;/p>
&lt;h3 id="facebookincubatorprometheus-configmanager">facebookincubator/&lt;strong>prometheus-configmanager&lt;/strong>&lt;/h3>
&lt;p>&lt;a href="https://github.com/facebookincubator/prometheus-configmanager/issues/27">&lt;strong>POST Bulk error unmarshalling payload #27&lt;/strong>&lt;/a>&lt;/p>
&lt;p>&lt;strong>prometheus-operator/prometheus-operator&lt;/strong>
&lt;a href="https://github.com/prometheus-operator/prometheus-operator/issues/4784">Operator CPU usage is high #4784&lt;/a> 与 &lt;a href="https://github.com/prometheus-operator/prometheus-operator/pull/4798">pkg/prometheus: reduce the number of reconciliations #4798&lt;/a> 帮助修复了一个 BUG&lt;/p>
&lt;h2 id="rookrook">rook/rook&lt;/h2>
&lt;p>&lt;a href="https://github.com/rook/rook/issues/4359">&lt;strong>Kubelet log spamed by &amp;ldquo;Operation for &amp;ldquo;/var/lib/kubelet/plugins/rbd.csi.ceph.com/csi.sock&amp;rdquo; failed.&amp;rdquo;&lt;/strong>&lt;/a>&lt;/p>
&lt;h1 id="pr">PR&lt;/h1>
&lt;h2 id="grafanaloki">grafana/loki&lt;/h2>
&lt;p>&lt;a href="https://github.com/grafana/loki/pull/2772">&lt;strong>reapir Retention Example Configuration #2772&lt;/strong>&lt;/a>&lt;/p>
&lt;h2 id="prometheus-operatorkube-prometheus">prometheus-operator/kube-prometheus&lt;/h2>
&lt;p>&lt;a href="https://github.com/prometheus-operator/kube-prometheus/pull/274">&lt;strong>Expression error #274&lt;/strong>&lt;/a>&lt;/p>
&lt;h2 id="timonwongprometheus-webhook-dingtalk">timonwong/prometheus-webhook-dingtalk&lt;/h2>
&lt;p>&lt;a href="https://github.com/timonwong/prometheus-webhook-dingtalk/pull/174">feat: markdowan type message add at designated person function&lt;/a> #174&lt;/p></description></item></channel></rss>