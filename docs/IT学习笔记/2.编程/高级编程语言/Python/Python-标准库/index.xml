<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – Python 标准库</title><link>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/Python-%E6%A0%87%E5%87%86%E5%BA%93/</link><description>Recent content in Python 标准库 on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/Python-%E6%A0%87%E5%87%86%E5%BA%93/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: 数据类型</title><link>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/Python-%E6%A0%87%E5%87%86%E5%BA%93/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/Python-%E6%A0%87%E5%87%86%E5%BA%93/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.python.org/3/reference/datamodel.html">官方文档，语言参考-数据模型&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>object(对象)&lt;/strong> 是 Python 中对数据的抽象。Python 程序中的所有数据都是由对象或对象间关系来表示的。 （从某种意义上说，按照冯·诺依曼的“存储程序计算机”模型，代码本身也是由对象来表示的。）&lt;/p>
&lt;blockquote>
&lt;p>Python 中的 object 概念类似于 JS 中的 &lt;a href="docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/JavaScript%20%E6%A0%87%E5%87%86%E5%BA%93/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.md#object(%E5%AF%B9%E8%B1%A1)">object&lt;/a> 概念。但是又不完全一样。
Python 变量的本质是对对象的引用&lt;/p>
&lt;/blockquote>
&lt;p>每个 object 都有一个 &lt;strong>Identity(标识符)&lt;/strong>、&lt;strong>Type(类型)&lt;/strong>、&lt;strong>Value(值)&lt;/strong>。一个对象被创建后，它的 Identity 就绝不会改变；你可以将其理解为该对象在内存中的地址。 &amp;lsquo;&lt;a href="https://docs.python.org/zh-cn/3/reference/expressions.html#is">&lt;code>is&lt;/code>&lt;/a>&amp;rsquo; 运算符可以比较两个对象的标识号是否相同；&lt;a href="https://docs.python.org/zh-cn/3/library/functions.html#id" title="id">&lt;code>id()&lt;/code>&lt;/a> 函数能返回一个代表其标识号的整数。&lt;/p>
&lt;p>&lt;strong>CPython 实现细节：&lt;/strong> 在 CPython 中，&lt;code>id(x)&lt;/code> 就是存放 &lt;code>x&lt;/code> 的内存的地址。从某个角度来看，获取变量的值，就是获取变量所引用的对象的值。&lt;/p>
&lt;blockquote>
&lt;p>对于 Python 和 JS 中的 object 来说，这个 object 就像全能的超人一样。。。。o(╯□╰)o。。。而 Go 语言中的全能超人责任 struct。&lt;/p>
&lt;/blockquote>
&lt;p>对象的 Type 决定该对象所支持的操作 (例如 &amp;ldquo;对象是否有长度属性？&amp;rdquo; 比如数组类型的长度) 并且定义了该类型的对象可能的取值。&lt;a href="https://docs.python.org/zh-cn/3/library/functions.html#type" title="type">&lt;code>type()&lt;/code>&lt;/a> 函数能返回一个对象的类型 (类型本身也是对象)。与 Identity 一样，一个对象的 Type 也是不可改变的。&lt;/p>
&lt;p>下面的代码可以让我们对 Python 对象有更形象的感受：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>s &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Hello, World!&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 变量的本质是对象的引用&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 在 Python 中有一个与 ESMAScript 中类似的 object(对象) 概念。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 在 Python 中，所有的数据都是对象，每一个对象都有唯一的标识符、类型和值。与 JavaScript 不同的是，在 Python 中，变量本身并不拥有内存空间，它只是指向一个对象的引用。因此，我们在 Python 中声明变量时，并不需要显式地指定它的类型。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">&amp;#34;对象标识符: &amp;#34;&lt;/span>, id(s))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">&amp;#34;对象的类型: &amp;#34;&lt;/span>, type(s))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">&amp;#34;对象的值: &amp;#34;&lt;/span>, s)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 由于变量就是对对象的引用，那么就可以调用这个对象的属性和方法。例如：&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(s&lt;span style="color:#f92672">.&lt;/span>upper()) &lt;span style="color:#75715e"># 输出 &amp;#34;HELLO, WORLD!&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(s&lt;span style="color:#f92672">.&lt;/span>lower()) &lt;span style="color:#75715e"># 输出 &amp;#34;hello, world!&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(s&lt;span style="color:#f92672">.&lt;/span>capitalize()) &lt;span style="color:#75715e"># 输出 &amp;#34;Hello, world!&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Python 标准库</title><link>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/Python-%E6%A0%87%E5%87%86%E5%BA%93/Python-%E6%A0%87%E5%87%86%E5%BA%93/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/Python-%E6%A0%87%E5%87%86%E5%BA%93/Python-%E6%A0%87%E5%87%86%E5%BA%93/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.python.org/3/library/index.html">官方文档-3，标准库参考&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/3/library/functions.html">官方文档-3，标准库参考-内置函数&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/3/library/constants.html">官方文档-3，标准库参考-内置常量&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Python Standard Library(Python 标准库)&lt;/strong> 也可以称为 &lt;strong>Package(包)&lt;/strong>，每个 package 都可以实现一类功能。&lt;/p>
&lt;p>&lt;a href="https://pypi.org/">pypi.org&lt;/a> 是 Python 的配套网站，可以查找所有可以通过 pip 命令下载的 Package 以及 Python 库&lt;/p>
&lt;h1 id="内置函数">内置函数&lt;/h1>
&lt;h1 id="内置常量">内置常量&lt;/h1>
&lt;h1 id="互联网协议和支持">互联网协议和支持&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://docs.python.org/zh-cn/3/library/webbrowser.html">webbrowser&amp;mdash; 方便的 Web 浏览器控制工具&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/zh-cn/3/library/wsgiref.html">wsgiref&amp;mdash; WSGI 工具和参考实现&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/zh-cn/3/library/urllib.html">urllib&amp;mdash; URL 处理模块&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/zh-cn/3/library/urllib.request.html">urllib.request&amp;mdash; 用于打开 URL 的可扩展库&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/zh-cn/3/library/urllib.request.html#module-urllib.response">urllib.response&amp;mdash; urllib 使用的 Response 类&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/zh-cn/3/library/urllib.parse.html">urllib.parse 用于解析 URL&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/zh-cn/3/library/urllib.error.html">urllib.error&amp;mdash; urllib.request 引发的异常类&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/zh-cn/3/library/urllib.robotparser.html">urllib.robotparser&amp;mdash; robots.txt 语法分析程序&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/zh-cn/3/library/http.html">http&amp;mdash; HTTP 模块&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/zh-cn/3/library/http.client.html">http.client&amp;mdash; HTTP 协议客户端&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/zh-cn/3/library/ftplib.html">ftplib&amp;mdash; FTP 协议客户端&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/zh-cn/3/library/poplib.html">poplib&amp;mdash; POP3 协议客户端&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/zh-cn/3/library/imaplib.html">imaplib&amp;mdash; IMAP4 协议客户端&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/zh-cn/3/library/smtplib.html">smtplib&amp;mdash; SMTP 协议客户端&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/zh-cn/3/library/uuid.html">uuid&amp;mdash;RFC 4122 定义的 UUID 对象&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/zh-cn/3/library/socketserver.html">socketserver&amp;mdash; 用于网络服务器的框架&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/zh-cn/3/library/http.server.html">http.server&amp;mdash; HTTP 服务器&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/zh-cn/3/library/http.cookies.html">http.cookies&amp;mdash; HTTP 状态管理&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/zh-cn/3/library/http.cookiejar.html">http.cookiejar—— HTTP 客户端的 Cookie 处理&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/zh-cn/3/library/xmlrpc.html">xmlrpc&amp;mdash; XMLRPC 服务端与客户端模块&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/zh-cn/3/library/xmlrpc.client.html">xmlrpc.client&amp;mdash; XML-RPC 客户端访问&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/zh-cn/3/library/xmlrpc.server.html">xmlrpc.server&amp;mdash; 基本 XML-RPC 服务器&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/zh-cn/3/library/ipaddress.html">ipaddress&amp;mdash; IPv4/IPv6 操作库&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Docs: Python 类</title><link>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/Python-%E6%A0%87%E5%87%86%E5%BA%93/Python-%E7%B1%BB/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/Python-%E6%A0%87%E5%87%86%E5%BA%93/Python-%E7%B1%BB/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.python.org/3/tutorial/classes.html">官方文档，教程-9.类&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017495723838528">廖雪峰 Python 教程，面向对象编程&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Classes(类) 提供了一种将数据与功能捆绑到一起的手段。创建一个新的 &lt;strong>class(类)&lt;/strong> 就意味着创造了一个新的 &lt;strong>object 的类型&lt;/strong>，进而可以使用这个新的类型创建多个 &lt;strong>instances(实例)&lt;/strong>。每个类实例都可以添加 &lt;strong>attributes(属性)&lt;/strong> 以维护其自身的状态，同时还可以有 &lt;strong>methods(方法)&lt;/strong> 用于修改其状态(方法在类中定义)。&lt;/p>
&lt;p>与其他编程语言相比，Python 的类机制增加了包含最少新语法和语义的类。它是 C ++和 Modula-3 中发现的类机制的混合物。 Python 类提供面向对象编程的所有标准功能：类继承机制允许多个基类，派生类可以覆盖其基类或类的任何方法，方法可以调用具有相同名称的基类的方法。对象可以包含任意数量和类型的数据。正如模块所面临的那样，类 Python 的动态性质的课程：它们是在运行时创建的，并且可以在创建后进一步修改。&lt;/p></description></item></channel></rss>