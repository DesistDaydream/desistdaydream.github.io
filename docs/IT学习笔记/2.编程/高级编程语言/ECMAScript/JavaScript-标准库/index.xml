<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – JavaScript 标准库</title><link>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/JavaScript-%E6%A0%87%E5%87%86%E5%BA%93/</link><description>Recent content in JavaScript 标准库 on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/JavaScript-%E6%A0%87%E5%87%86%E5%BA%93/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: 数据类型</title><link>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/JavaScript-%E6%A0%87%E5%87%86%E5%BA%93/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/JavaScript-%E6%A0%87%E5%87%86%E5%BA%93/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures">MDN 官方文档，JavaScript-JavaScript 数据类型和数据结构&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects">MDN 官方文档，Javascript 标准内置对象&lt;/a>(所有类型的对象的列表)&lt;/li>
&lt;li>&lt;a href="https://wangdoc.com/javascript/oop/new.html">网道，JavaScript 教程-面向对象编程-实例对象与 new 命令&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.bilibili.com/video/BV1W54y1J7Ed?p=50">https://www.bilibili.com/video/BV1W54y1J7Ed?p=50&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Primitive Type(原始类型，有的地方也称为基本数据类型)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Number(数值)&lt;/strong> # 十进制数字、科学计数法、其他进程表示方式的数字&lt;/li>
&lt;li>&lt;strong>String(字符串)&lt;/strong> # 单引号或双引号内的一切内容&lt;/li>
&lt;li>&lt;strong>Boolean(布尔)&lt;/strong> # ture 和 false&lt;/li>
&lt;li>&lt;strong>Null(空)&lt;/strong> #
&lt;ul>
&lt;li>Undefined&lt;/li>
&lt;li>Null # Null 类型是 Object，这是由于历史原因造成的。1995 年的 JavaScript 语言第一版，只设计了五种数据类型（对象、整数、浮点数、字符串和布尔值），没考虑 null，只把它当作 object 的一种特殊值。后来 null 独立出来，作为一种单独的数据类型，为了兼容以前的代码，typeof null 返回 object 就没法改变了。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Complex Type(合成类型，有的地方也称为引用数据类型)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>object(对象)&lt;/strong> # 各种值组成的集合，也就是下文提到的 &lt;a href="#p3TIB">标准内置对象&lt;/a>。在很多场景下，第一个 O 是小写的。
&lt;ul>
&lt;li>Object 又划分为很多子类型：
&lt;ul>
&lt;li>&lt;strong>Ojbect(对象)&lt;/strong> # 与 字典、映射 等同义的那个对象。&lt;/li>
&lt;li>&lt;strong>Array(数组)&lt;/strong> #&lt;/li>
&lt;li>&lt;strong>Functiom(函数)&lt;/strong> # JavaScript 中将 Function 当做一种类型来处理&lt;/li>
&lt;li>&lt;strong>其他&lt;/strong> #&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>通常我们这么描述： Object 类型的 object、Array 类型的 object、String 类型的 object、等等。简化一点就是 Object 对象、Array 对象、String 对象、等等。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="数据类型检测">数据类型检测&lt;/h2>
&lt;h1 id="object对象">object(对象)&lt;/h1>
&lt;p>&lt;strong>object(对象)&lt;/strong> 是 Javascript 语言的核心概念。所有的数据类型都可以称之为 object。&lt;/p>
&lt;blockquote>
&lt;p>注意：Javascript 还有一个 Object 类型的的数据也可以称为 object&lt;del>&lt;del>挺绕的&lt;/del>0.0。我们通常使用 Object 的 O 字母大小写来区分&lt;/del>~~~&lt;/p>
&lt;ul>
&lt;li>Object 是一种狭义的数据类型，与 字典、映射 等同义&lt;/li>
&lt;li>object 是
&lt;ul>
&lt;li>包含数据和用于处理数据的指令的数据结构。&lt;/li>
&lt;li>一种合成类型，一种在 JS 中最复杂的数据类型。&lt;/li>
&lt;li>一种将任意数据类型构建为 object 类型的方法&lt;/li>
&lt;li>也是一个逻辑上的对象，通过特定方法实例化的类型都可以称为对象。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">objectType&lt;/span> &lt;span style="color:#f92672">=&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">objectType&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#66d9ef">typeof&lt;/span> &lt;span style="color:#a6e22e">objectType&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">arrayType&lt;/span> &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">arrayType&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#66d9ef">typeof&lt;/span> &lt;span style="color:#a6e22e">arrayType&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面代码的输出结果如果从浏览器看的话，效果如下图：
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/th2szn/1641957269181-cffe1052-765a-403f-b3af-7ff732eceb78.png" alt="image.png">
可以看到，object 是一种类型，而 Array 和 Object 类型都属于 object 类型的原型类；也就是 Array 类型的 object、Object 类型的 object。&lt;/p>
&lt;h2 id="constructor构造函数">Constructor(构造函数)&lt;/h2>
&lt;p>面向对象编程的第一步，就是要生成对象。对象是单个实物的抽象。通常需要一个模板，表示某一类实物的共同特征，然后对象根据这个模板生成。&lt;/p>
&lt;p>典型的面向对象编程语言（比如 C++ 和 Java），都有“类”（class）这个概念。所谓“类”就是对象的模板，对象就是“类”的实例。但是，JavaScript 语言的对象体系，不是基于“类”的，而是基于 &lt;strong>Constructor(构造函数)&lt;/strong> 和 &lt;strong>Prototype(原型类)&lt;/strong>。&lt;/p>
&lt;p>JavaScript 语言使用 &lt;strong>Constructor(构造函数)&lt;/strong> 作为&lt;strong>对象的模板&lt;/strong>。所谓“构造函数”，就是用来描述对象的基本结构。通过一个构造函数，可以生成多个实例对象，这些实例对象都有相同的结构。而 &lt;strong>Prototype(原型类)&lt;/strong> 则是这个对象中的一个属性，用来标明该对象实例原始的类型，以便可以调用这个类型对象下的方法。&lt;/p>
&lt;p>构造函数的特点有两个：&lt;/p>
&lt;ul>
&lt;li>函数体内部使用了 &lt;code>this&lt;/code> 关键字，代表了所要生成的对象实例。&lt;/li>
&lt;li>生成对象的时候，必须使用 &lt;code>new&lt;/code> 关键字。
&lt;ul>
&lt;li>想要生成什么类型的对象，就使用对应的 Constructor，通常来说，Constructor 的名称与类型名称相同，只不过首字母大写。比如：
&lt;ul>
&lt;li>我要构造一个 String 类型的 object，则使用 &lt;code>String()&lt;/code> 函数。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>构造函数也是一个普通的函数，只不过具有某些特有的特征和用法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">Person&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span>, &lt;span style="color:#a6e22e">age&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 若没有 this 关键字，则这俩不会变为 Person 的属性，仅仅只是一个赋值操作
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">age&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">age&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">Person&lt;/span>.&lt;span style="color:#a6e22e">prototype&lt;/span>.&lt;span style="color:#a6e22e">showInfo&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> () {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34; is &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">age&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34; years old.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">p1&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Person&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;张三&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">18&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>Point()&lt;/code> 是构造函数，第一个字母通常都是大写的，且内部使用 &lt;code>this&lt;/code> 关键字&lt;/li>
&lt;li>&lt;code>price&lt;/code> 是构造函数的一个属性。&lt;/li>
&lt;/ul>
&lt;p>然后，我们可以通过 &lt;code>new&lt;/code> 关键字生成 &lt;code>Point()&lt;/code> 的一个实例。&lt;/p>
&lt;p>如果用面向对象的概念来类比的话：&lt;/p>
&lt;ul>
&lt;li>Point 是一个对象&lt;/li>
&lt;li>x 和 y 是对象中的一个属性&lt;/li>
&lt;li>p 是对象在实例化后的实体&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/th2szn/1650787512457-aee108cf-2ec9-488a-82ac-363293db2764.png" alt="image.png">
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/th2szn/1650789606739-0e7d0eb8-f5ef-4151-ba29-d6402090becf.png" alt="image.png">&lt;/p>
&lt;h3 id="es6-语法">ES6 语法&lt;/h3>
&lt;p>上面这种写法跟传统的面向对象语言（比如 C++ 和 Java）差异很大，很容易让新学习这门语言的程序员感到困惑。
ES6 提供了更接近传统语言的写法，引入了 Class（类）这个概念，作为对象的模板。通过 class 关键字，可以定义类。&lt;/p>
&lt;p>基本上，ES6 的 class 可以看作只是一个语法糖，它的绝大部分功能，ES5 都可以做到，新的 class 写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。上面的代码用 ES6 的 class 改写，就是下面这样：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Person&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">constructor&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span>, &lt;span style="color:#a6e22e">age&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">age&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">age&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">showInfo&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34; is &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">age&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34; years old.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">p1&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Person&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;张三&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">18&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="prototype原型">Prototype(原型)&lt;/h3>
&lt;p>每一个构造函数都会自带一个 prototype 属性。为了解决实例化时，对象上的方法被重复创建占用过多内存空间的问题。所以，想要定义对象上的方法，就是使用 &lt;code>OjbectName.pototype.MethodName&lt;/code> 语法。&lt;/p>
&lt;h3 id="内置构造函数示例">内置构造函数示例&lt;/h3>
&lt;p>用一个最简单的声明字符串变量为例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 基本字符串
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">stringType&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Hello_World&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 字符串对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">stringObjType&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> String(&lt;span style="color:#e6db74">&amp;#34;Hello_World&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;基本字符串的类型:&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">typeof&lt;/span> &lt;span style="color:#a6e22e">stringType&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;字符串对象的类型:&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">typeof&lt;/span> &lt;span style="color:#a6e22e">stringObjType&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">stringType&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">stringObjType&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里的 &lt;code>String()&lt;/code> 是一个构造函数&lt;/p>
&lt;p>执行结果如下：
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/th2szn/1640327798825-cba5f4ac-6cb9-4ed2-9c17-62a10d4fd2b2.png" alt="image.png">
使用 &lt;code>new&lt;/code> 构造函数后，一个普通的字符串成为了 object 类型，并且 &lt;strong>Prototype(原型类)&lt;/strong> 是 String。&lt;/p>
&lt;ul>
&lt;li>字符串字面量 (通过单引号或双引号定义) 是&lt;strong>基本字符串&lt;/strong>。&lt;/li>
&lt;li>通过 &lt;code>new&lt;/code> 构造出来的是&lt;strong>字符串对象&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;p>注意：当基本字符串需要调用一个字符串对象才有的方法或者查询值的时候(基本字符串是没有这些方法的)，&lt;strong>JavaScript 会自动将基本字符串转化为字符串对象&lt;/strong>并且调用相应的方法或者执行查询。&lt;/p>
&lt;h2 id="内置对象的方法">内置对象的方法&lt;/h2>
&lt;p>Javascript 中，提供了很多方法可以对数据直接进行操作(比如 类型转换、数组排序、遍历 等等)。在 &lt;a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects">MDN 官方文档，Javascript 标准内置对象&lt;/a> 中可以查看所有 Javascript 中内置的操作，这里是以对象类型进行分类，每个类型的对象都有很多可以操作其自身的方法。&lt;/p>
&lt;blockquote>
&lt;p>[这里](/docs/IT学习笔记/2.编程/高级编程语言/ECMAScript/JavaScript%20 标准库/各种类型的%20object(对象)%20 的常见方法.md 标准库/各种类型的 object(对象) 的常见方法.md)也列出了一些日常使用率非常高的对象方法&lt;/p>
&lt;/blockquote>
&lt;p>这种行为本质就是调用对象上的方法，与其他语言是类似的效果，我们使用 &lt;code>new&lt;/code> 关键字与构造函数创建出 A 类型的实例化对象(其实就是一个变量)，这个变量是 A 数据类型，然后就可以直接调用 A 数据类型下所有可用的方法。&lt;/p>
&lt;p>比如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">arrayObject&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Array(&lt;span style="color:#ae81ff">9&lt;/span>, &lt;span style="color:#ae81ff">6&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">4&lt;/span>, &lt;span style="color:#ae81ff">5&lt;/span>, &lt;span style="color:#ae81ff">7&lt;/span>, &lt;span style="color:#ae81ff">8&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">arrayObject&lt;/span>.&lt;span style="color:#a6e22e">sort&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">arrayObject&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我实例化了一个 Array 类型的对象：arrayObject，此时可以直接调用该类型下的方法 &lt;code>sort()&lt;/code> 对数据进行排序&lt;/p>
&lt;h2 id="原型链">原型链&lt;/h2>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/th2szn/1650791286870-fafece55-15db-47be-ae76-3d5f80ea30de.png" alt="image.png">
原型链是用 &lt;strong>proto&lt;/strong> 串联起来的对象链状结构，该结构用来在访问对象的成员的时候，提供访问路径。&lt;/p>
&lt;p>对方访问机制：&lt;/p>
&lt;ul>
&lt;li>首先在自己身上查找，如果有直接使用&lt;/li>
&lt;li>如果没有，自动去 &lt;strong>proto&lt;/strong> 上查找&lt;/li>
&lt;li>如果还没有，就再去 &lt;strong>proto&lt;/strong> 上查找&lt;/li>
&lt;li>直到 Ojbect.prototype 都没有，那么返回 undefiend&lt;/li>
&lt;/ul>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>其实，Javascript 的 object 可以简单理解为面向对象编程中的对象，通过构建各种类型的对象，以便使用对象上的方法。&lt;/p></description></item><item><title>Docs: DOM(文档对象模型)</title><link>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/JavaScript-%E6%A0%87%E5%87%86%E5%BA%93/DOM%E6%96%87%E6%A1%A3%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/JavaScript-%E6%A0%87%E5%87%86%E5%BA%93/DOM%E6%96%87%E6%A1%A3%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction">MDN 官方文档，参考-WebAPIs-DOM-DOM 简介&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Document Ojbect Model(文档对象模型，简称 DOM)&lt;/strong> 是 Web 文档(HTML 和 XML)的编程接口(通常描述为 WebAPI 中的 DOM 接口)。应用程序可以通过该接口更改 Web 文档的 结构、样式、内容 等。DOM 将 Web 文档抽象为 &lt;strong>Node(节点)&lt;/strong> 和 **Ojbect(对象，包含属性和方法的对象) **组成的结构集合。&lt;/p>
&lt;p>一个 Web 页面即是一个文档，这个文档可以在浏览器中作为 HTML 源码展示出来。DOM 则可以将文档表示为另一种形式，以便 JavaScript 等编程语言可以对其进行修改。
比如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 我们通过 document.querySelectorAll() 获取 Web 文档中所有 &amp;lt;p&amp;gt; 元素的列表
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 将所有 &amp;lt;p&amp;gt; 元素实例化为 paragraphs 变量
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">paragraphs&lt;/span> &lt;span style="color:#f92672">=&lt;/span> document.&lt;span style="color:#a6e22e">querySelectorAll&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;p&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 之后，通过代码对 paragraphs 的所有操作都会直接反应到前端 Web 页面上
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 这里表示将将会弹出提示框，并将其中第一个 &amp;lt;p&amp;gt; 元素的名称显示在提示框中
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">alert&lt;/span>(&lt;span style="color:#a6e22e">paragraphs&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>].&lt;span style="color:#a6e22e">nodeName&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>从上面的示例中可以看到，JavaScript 中使用 &lt;code>**document 类型的对象**&lt;/code>表示 Web 文档本身；document 对象里包含了非常多的方法来控制 Web 文档中的元素，在 &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Document">MDN 官方文档，WebAPIs-Document&lt;/a> 中可以看到所有 document 对象下的属性、方法、事件。示例中的 &lt;a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/querySelectorAll">querySelectorAll()&lt;/a> 方法将会返回匹配到的元素列表。&lt;/p>
&lt;p>DOM 本身并不是一个编程语言，可以说是一种 规范、模型、接口；DOM 可以用任何语言实现，DOM 被内嵌在浏览器中，各种编程语言可以自己实现 DOM 库以便在浏览器中调用 DOM。&lt;/p>
&lt;p>编程语言之于 DOM，有点类似于 runc 等运行时之于 OCI&lt;/p>
&lt;p>我们甚至可以在 Python 中使用 DOM 来控制 Web 文档&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Python DOM example&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> xml.dom.minidom &lt;span style="color:#66d9ef">as&lt;/span> m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>doc &lt;span style="color:#f92672">=&lt;/span> m&lt;span style="color:#f92672">.&lt;/span>parse(&lt;span style="color:#e6db74">r&lt;/span>&lt;span style="color:#e6db74">&amp;#34;C:\Projects\Py\chap1.xml&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>doc&lt;span style="color:#f92672">.&lt;/span>nodeName &lt;span style="color:#75715e"># DOM property of document object&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>p_list &lt;span style="color:#f92672">=&lt;/span> doc&lt;span style="color:#f92672">.&lt;/span>getElementsByTagName(&lt;span style="color:#e6db74">&amp;#34;para&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Event(事件)</title><link>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/JavaScript-%E6%A0%87%E5%87%86%E5%BA%93/Event%E4%BA%8B%E4%BB%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/JavaScript-%E6%A0%87%E5%87%86%E5%BA%93/Event%E4%BA%8B%E4%BB%B6/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://wangdoc.com/javascript/events/index.html">网道，Javascript 教程-事件&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Event(事件)&lt;/strong> 的本质是程序各个组成部分之间的一种通信方式，也是异步编程的一种实现。DOM 支持大量的事件，&lt;/p>
&lt;p>事件语法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">elementObject&lt;/span>.&lt;span style="color:#a6e22e">onEventType&lt;/span>&lt;span style="color:#f92672">=&lt;/span>Function(){}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;strong>elementObject&lt;/strong> # 元素对象，也就是事件源，通常是通过类似 &lt;code>getElementByID()&lt;/code>之类的方法获取到的 HTML 中的元素&lt;/li>
&lt;li>&lt;strong>onEventType&lt;/strong> # 以&lt;code>on&lt;/code>开头，后面跟一个事件名称&lt;/li>
&lt;li>&lt;strong>Function(){}&lt;/strong> # elementObject 触发 onEventType 时要执行的代码，也就是 HTML 中某一元素触发事件时要执行的操作&lt;/li>
&lt;/ul>
&lt;p>比如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">divElement&lt;/span> &lt;span style="color:#f92672">=&lt;/span> document.&lt;span style="color:#a6e22e">getElementById&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;event&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// click 点击事件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">divElement&lt;/span>.&lt;span style="color:#a6e22e">onclick&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> () {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">divElement&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;元素，被点击了一下&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="事件类型">事件类型&lt;/h1>
&lt;h2 id="鼠标事件">鼠标事件&lt;/h2>
&lt;ul>
&lt;li>click # 鼠标单击&lt;/li>
&lt;li>dblclick # 鼠标双击&lt;/li>
&lt;li>contextmenu # 左键单击&lt;/li>
&lt;li>mousedown # 鼠标按下&lt;/li>
&lt;li>mouseup # 鼠标抬起&lt;/li>
&lt;li>mousemove # 鼠标移动&lt;/li>
&lt;li>mouseenter # 鼠标移入&lt;/li>
&lt;li>mouseleave # 鼠标移出&lt;/li>
&lt;li>&amp;hellip;&amp;hellip; 等等&lt;/li>
&lt;/ul>
&lt;h2 id="键盘事件">键盘事件&lt;/h2>
&lt;ul>
&lt;li>keydown # 键盘按下&lt;/li>
&lt;li>keyup # 键盘抬起&lt;/li>
&lt;li>keypress # 键盘输入&lt;/li>
&lt;li>&amp;hellip;&amp;hellip; 等等&lt;/li>
&lt;/ul>
&lt;h2 id="浏览器事件">浏览器事件&lt;/h2>
&lt;ul>
&lt;li>load # 加载完毕&lt;/li>
&lt;li>scroll # 滚动&lt;/li>
&lt;li>resize # 尺寸改变&lt;/li>
&lt;li>&amp;hellip;&amp;hellip; 等等&lt;/li>
&lt;/ul>
&lt;h2 id="触摸事件">触摸事件&lt;/h2>
&lt;ul>
&lt;li>touchstart # 触摸开始&lt;/li>
&lt;li>touchmove # 触摸移动&lt;/li>
&lt;li>touchend # 触摸结束&lt;/li>
&lt;li>&amp;hellip;&amp;hellip; 等等&lt;/li>
&lt;/ul>
&lt;h2 id="表单事件">表单事件&lt;/h2>
&lt;ul>
&lt;li>focus # 聚焦&lt;/li>
&lt;li>blue # 失焦&lt;/li>
&lt;li>change # 改变&lt;/li>
&lt;li>input # 输入&lt;/li>
&lt;li>submit # 提交&lt;/li>
&lt;li>reset # 重置&lt;/li>
&lt;li>&amp;hellip;&amp;hellip; 等等&lt;/li>
&lt;/ul>
&lt;h1 id="事件对象">事件对象&lt;/h1>
&lt;p>每个事件触发时，都会记录一组数据，这组数据是事件类型对象，事件对象数据中的数据包括该时间一系列属性信息，比如：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>type&lt;/strong> # 什么事件&lt;/li>
&lt;li>&lt;strong>target&lt;/strong> # 谁触发的&lt;/li>
&lt;li>如果是鼠标事件，那么还会记录
&lt;ul>
&lt;li>&lt;strong>x&lt;/strong> # 光标 x 坐标&lt;/li>
&lt;li>&lt;strong>y&lt;/strong> # 光标 y 坐标&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>等等&amp;hellip;&amp;hellip;&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>比如我们模拟一下鼠标点击事件：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">divElement&lt;/span> &lt;span style="color:#f92672">=&lt;/span> document.&lt;span style="color:#a6e22e">getElementById&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;event&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// click 触发一个点击事件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">divElement&lt;/span>.&lt;span style="color:#a6e22e">onclick&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> (&lt;span style="color:#a6e22e">prop&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 事件的属性
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">prop&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个鼠标点击事件具有如下属性：
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/nzci2k/1641961554049-e88a8221-0593-4b6e-be48-6a093e0d1b0a.png" alt="image.png">
这是一个 PointerEvent 类型的对象&lt;/p>
&lt;h2 id="鼠标事件对象">鼠标事件对象&lt;/h2>
&lt;p>坐标信息&lt;/p>
&lt;ul>
&lt;li>&lt;strong>offsetX 和 offsetY&lt;/strong> # 相对于触发事件元素的坐标
&lt;ul>
&lt;li>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/nzci2k/1641961872393-217cf16a-78e5-449c-9e33-d91f52c6dd96.png" alt="image.png">&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>**client 和 clientY **# 相对于浏览器可视窗口的坐标
&lt;ul>
&lt;li>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/nzci2k/1641961917878-40b8b649-3846-4f31-81f1-9e98e407f320.png" alt="image.png">&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>pageX 和 pageY&lt;/strong> # 相对于页面文档流的坐标
&lt;ul>
&lt;li>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/nzci2k/1641961945785-c13cc660-5702-444f-b6a3-2d21a341341f.png" alt="image.png">&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="键盘事件对象">键盘事件对象&lt;/h2>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul></description></item><item><title>Docs: JavaScript 标准库</title><link>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/JavaScript-%E6%A0%87%E5%87%86%E5%BA%93/JavaScript-%E6%A0%87%E5%87%86%E5%BA%93/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/JavaScript-%E6%A0%87%E5%87%86%E5%BA%93/JavaScript-%E6%A0%87%E5%87%86%E5%BA%93/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/DesistDaydream/javascript-learning">GitHub,DesistDaydream/javascript-learning&lt;/a>(个人学习代码)&lt;/li>
&lt;li>&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API">MDN 官方文档，Web 开发技术-Web APIs&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>Docs: 各种类型的 object(对象) 的常见方法</title><link>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/JavaScript-%E6%A0%87%E5%87%86%E5%BA%93/%E5%90%84%E7%A7%8D%E7%B1%BB%E5%9E%8B%E7%9A%84-object%E5%AF%B9%E8%B1%A1-%E7%9A%84%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/JavaScript-%E6%A0%87%E5%87%86%E5%BA%93/%E5%90%84%E7%A7%8D%E7%B1%BB%E5%9E%8B%E7%9A%84-object%E5%AF%B9%E8%B1%A1-%E7%9A%84%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects">MDN 官方文档，参考-JavaScript-JavaScript-标准内置对象&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API">MDN 官方文档，参考-WebAPIs&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="string-对象">String 对象&lt;/h1>
&lt;p>常用 String 对象的方法&lt;/p>
&lt;ul>
&lt;li>toLowerCase() # 将字符串内的字母全部转换成小写&lt;/li>
&lt;li>toUpperCase() 将字符串内的字母全部转换成大写&lt;/li>
&lt;li>replace(&amp;ldquo;D&amp;rdquo;, 1) # replace(searchValue,replaceValue) 将字符串内第一个满足 searchValue 条件的字符替换为 replaceValue。注意：只能替换第一个&lt;/li>
&lt;li>trim() # 去除首尾所有空白字符&lt;/li>
&lt;li>split(&amp;quot; &amp;ldquo;) # 按照分隔符将字符串切割为一个数组。注意：只有字符串中有指定的分隔符，才会生效。否则切割后的元素只有一个。&lt;/li>
&lt;li>截取字符串
&lt;ul>
&lt;li>substr(5, 8) # 第一个参数是开始截取的索引号，第二个参数是截取数量&lt;/li>
&lt;li>substring(5, 8) # 第一个参数是开始截取的索引号，第二个参数是结束截取的索引号&lt;/li>
&lt;li>slice(5, 8) # 第一个参数是开始截取的索引号，第二个参数是结束截取的索引号&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="array-对象">Array 对象&lt;/h1>
&lt;p>常用 Array 对象的方法&lt;/p>
&lt;ul>
&lt;li>会改变原始数组的内容
&lt;ul>
&lt;li>push() # 从后面追加&lt;/li>
&lt;li>pop() # 从后面删除&lt;/li>
&lt;li>unshift() # 从前面添加&lt;/li>
&lt;li>shift() # 从前面删除&lt;/li>
&lt;li>reverse() # 反转数组&lt;/li>
&lt;li>splice() # 截取并添加&lt;/li>
&lt;li>sort() # 数组排序&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>不会改变原始数组的内容
&lt;ul>
&lt;li>join() # 数组连接为字符串&lt;/li>
&lt;li>concat() # 拼接数组&lt;/li>
&lt;li>slice() # 截取数组&lt;/li>
&lt;li>indexOf() # 查找元素在数组中的索引&lt;/li>
&lt;li>forEach() # 遍历数组&lt;/li>
&lt;li>map() # 映射数组&lt;/li>
&lt;li>filter() # 过滤数组&lt;/li>
&lt;li>every() # 判断是否全部满足条件&lt;/li>
&lt;li>some() # 判断是否有满足条件的项&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: 回调函数与异步编程</title><link>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/JavaScript-%E6%A0%87%E5%87%86%E5%BA%93/%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E4%B8%8E%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/JavaScript-%E6%A0%87%E5%87%86%E5%BA%93/%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E4%B8%8E%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.runoob.com/js/js-async.html">https://www.runoob.com/js/js-async.html&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="promise-对象">Promise 对象&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.bilibili.com/video/BV1TG411L7KM">B 站 up-思学堂，5 分钟彻底学会使用 Promise，你真的懂 Promise 吗？&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.runoob.com/w3cnote/javascript-promise-object.html">https://www.runoob.com/w3cnote/javascript-promise-object.html&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Promise.resolve() 方法
Promise.reject() 方法&lt;/p>
&lt;h2 id="promise-的异常处理">Promise 的异常处理&lt;/h2>
&lt;p>promise.catch&lt;/p></description></item></channel></rss>