<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – Middleware</title><link>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/Middleware/</link><description>Recent content in Middleware on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/Middleware/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: GO中间件(Middleware ) - SegmentFault 思否</title><link>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/Middleware/GO%E4%B8%AD%E9%97%B4%E4%BB%B6Middleware-SegmentFault-%E6%80%9D%E5%90%A6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/Middleware/GO%E4%B8%AD%E9%97%B4%E4%BB%B6Middleware-SegmentFault-%E6%80%9D%E5%90%A6/</guid><description>
&lt;p>原文链接：&lt;a href="https://segmentfault.com/a/1190000018819804">GO 中间件 (Middleware) - SegmentFault 思否&lt;/a>&lt;/p>
&lt;p>中间件是一种计算机&lt;a href="https://link.segmentfault.com/?url=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FSoftware">软件&lt;/a>，可为&lt;a href="https://link.segmentfault.com/?url=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FOperating_system">操作系统&lt;/a>提供的&lt;a href="https://link.segmentfault.com/?url=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FSoftware_application">软件应用程序&lt;/a>提供服务，以便于各个软件之间的沟通，特别是系统软件和应用软件。广泛用于 web 应用和面向服务的体系结构等。&lt;/p>
&lt;p>纵观 GO 语言，中间件应用比较普遍，主要应用：&lt;/p>
&lt;ul>
&lt;li>记录对服务器发送的请求（request）&lt;/li>
&lt;li>处理服务器响应（response ）&lt;/li>
&lt;li>请求和处理之间做一个权限认证工作&lt;/li>
&lt;li>远程调用&lt;/li>
&lt;li>安全&lt;/li>
&lt;li>等等&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>中间件处理程序&lt;/strong>是简单的&lt;code>http.Handler&lt;/code>，它包装另一个&lt;code>http.Handler&lt;/code>做请求的一些预处理和 / 或后处理。它被称为 “中间件”，因为它位于 Go Web 服务器和实际处理程序之间的中间位置。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/ed41e30b-8c8b-4238-90f6-663f162aa592/1460000018819807" alt="">&lt;/p>
&lt;p>下面是一些中间件例子&lt;/p>
&lt;h3 id="记录日志中间件">记录日志中间件&lt;/h3>
&lt;pre>&lt;code>package main
import (
&amp;quot;fmt&amp;quot;
&amp;quot;log&amp;quot;
&amp;quot;net/http&amp;quot;
)
func logging(f http.HandlerFunc) http.HandlerFunc {
return func(w http.ResponseWriter, r *http.Request) {
log.Println(r.URL.Path)
f(w, r)
}
}
func foo(w http.ResponseWriter, r *http.Request) {
fmt.Fprintln(w, &amp;quot;foo&amp;quot;)
}
func bar(w http.ResponseWriter, r *http.Request) {
fmt.Fprintln(w, &amp;quot;bar&amp;quot;)
}
func main() {
http.HandleFunc(&amp;quot;/foo&amp;quot;, logging(foo))
http.HandleFunc(&amp;quot;/bar&amp;quot;, logging(bar))
http.ListenAndServe(&amp;quot;:8080&amp;quot;, nil)
}
&lt;/code>&lt;/pre>
&lt;p>访问 &lt;a href="https://link.segmentfault.com/?url=http%3A%2F%2Flocalhost">http://localhost&lt;/a>:8080/foo&lt;/p>
&lt;p>返回结果&lt;/p>
&lt;p>foo&lt;/p>
&lt;p>将上面示例修改下，也可以实现相同的功能。&lt;/p>
&lt;pre>&lt;code>package main
import (
&amp;quot;fmt&amp;quot;
&amp;quot;log&amp;quot;
&amp;quot;net/http&amp;quot;
)
func foo(w http.ResponseWriter, r *http.Request) {
fmt.Fprintln(w, &amp;quot;foo&amp;quot;)
}
func bar(w http.ResponseWriter, r *http.Request) {
fmt.Fprintln(w, &amp;quot;bar&amp;quot;)
}
func loggingMiddleware(next http.Handler) http.Handler {
return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
log.Println(r.URL.Path)
next.ServeHTTP(w, r)
})
}
func main() {
http.Handle(&amp;quot;/foo&amp;quot;, loggingMiddleware(http.HandlerFunc(foo)))
http.Handle(&amp;quot;/bar&amp;quot;, loggingMiddleware(http.HandlerFunc(bar)))
http.ListenAndServe(&amp;quot;:8080&amp;quot;, nil)
}
&lt;/code>&lt;/pre>
&lt;p>访问 &lt;a href="https://link.segmentfault.com/?url=http%3A%2F%2Flocalhost">http://localhost&lt;/a>:8080/foo&lt;/p>
&lt;p>返回结果&lt;/p>
&lt;p>foo&lt;/p>
&lt;h3 id="多中间件例子">多中间件例子&lt;/h3>
&lt;pre>&lt;code>package main
import (
&amp;quot;fmt&amp;quot;
&amp;quot;log&amp;quot;
&amp;quot;net/http&amp;quot;
&amp;quot;time&amp;quot;
)
type Middleware func(http.HandlerFunc) http.HandlerFunc
func Logging() Middleware {
return func(f http.HandlerFunc) http.HandlerFunc {
return func(w http.ResponseWriter, r *http.Request) {
start := time.Now()
defer func() { log.Println(r.URL.Path, time.Since(start)) }()
f(w, r)
}
}
}
func Method(m string) Middleware {
return func(f http.HandlerFunc) http.HandlerFunc {
return func(w http.ResponseWriter, r *http.Request) {
if r.Method != m {
http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
return
}
f(w, r)
}
}
}
func Chain(f http.HandlerFunc, middlewares ...Middleware) http.HandlerFunc {
for \_, m := range middlewares {
f = m(f)
}
return f
}
func Hello(w http.ResponseWriter, r *http.Request) {
fmt.Fprintln(w, &amp;quot;hello world&amp;quot;)
}
func main() {
http.HandleFunc(&amp;quot;/&amp;quot;, Chain(Hello, Method(&amp;quot;GET&amp;quot;), Logging()))
http.ListenAndServe(&amp;quot;:8080&amp;quot;, nil)
}
&lt;/code>&lt;/pre>
&lt;p>中间件本身只是将其&lt;code>http.HandlerFunc&lt;/code>作为其参数之一，包装它并返回一个新&lt;code>http.HandlerFunc&lt;/code>的服务器来调用。在这里，我们定义了一种新类型&lt;code>Middleware&lt;/code>，最终可以更容易地将多个中间件链接在一起。&lt;/p>
&lt;p>当然我们也可以改成如下形式&lt;/p>
&lt;pre>&lt;code>package main
import (
&amp;quot;fmt&amp;quot;
&amp;quot;log&amp;quot;
&amp;quot;net/http&amp;quot;
&amp;quot;time&amp;quot;
)
type Middleware func(http.Handler) http.Handler
func Hello(w http.ResponseWriter, r *http.Request) {
fmt.Fprintln(w, &amp;quot;hello world&amp;quot;)
}
func Chain(f http.Handler, mmap ...Middleware) http.Handler {
for \_, m := range mmap {
f = m(f)
}
return f
}
func Method(m string) Middleware {
return func(f http.Handler) http.Handler {
return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
log.Println(r.URL.Path)
if r.Method != m {
http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
return
}
f.ServeHTTP(w, r)
})
}
}
func Logging() Middleware {
return func(f http.Handler) http.Handler {
return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
start := time.Now()
defer func() { log.Println(r.URL.Path, time.Since(start)) }()
f.ServeHTTP(w, r)
})
}
}
func main() {
http.Handle(&amp;quot;/&amp;quot;, Chain(http.HandlerFunc(Hello), Method(&amp;quot;GET&amp;quot;), Logging()))
http.ListenAndServe(&amp;quot;:8080&amp;quot;, nil)
}
&lt;/code>&lt;/pre>
&lt;h3 id="在-gin-框架下实现中间件">在 gin 框架下实现中间件&lt;/h3>
&lt;pre>&lt;code>r := gin.Default() 创建带有默认中间件的路由，默认是包含logger和recovery中间件的
r :=gin.new() 创建带有没有中间件的路由
&lt;/code>&lt;/pre>
&lt;p>示例&lt;/p>
&lt;pre>&lt;code>package main
import (
&amp;quot;github.com/gin-gonic/gin&amp;quot;
&amp;quot;log&amp;quot;
&amp;quot;time&amp;quot;
)
func Logger() gin.HandlerFunc {
return func(c *gin.Context) {
t := time.Now()
c.Set(&amp;quot;example&amp;quot;, &amp;quot;12345&amp;quot;)
c.Next()
latency := time.Since(t)
log.Print(latency)
status := c.Writer.Status()
log.Println(status)
}
}
func main() {
r := gin.New()
r.Use(Logger())
r.GET(&amp;quot;/test&amp;quot;, func(c *gin.Context) {
example := c.MustGet(&amp;quot;example&amp;quot;).(string)
log.Println(example)
})
r.Run(&amp;quot;:8080&amp;quot;)
}
&lt;/code>&lt;/pre>
&lt;p>以上示例也可改为&lt;/p>
&lt;pre>&lt;code>package main
import (
&amp;quot;github.com/gin-gonic/gin&amp;quot;
&amp;quot;log&amp;quot;
&amp;quot;time&amp;quot;
)
func Logger() gin.HandlerFunc {
return func(c *gin.Context) {
t := time.Now()
c.Set(&amp;quot;example&amp;quot;, &amp;quot;12345&amp;quot;)
c.Next()
latency := time.Since(t)
log.Print(latency)
status := c.Writer.Status()
log.Println(status)
}
}
func main() {
r := gin.New()
r.GET(&amp;quot;/test&amp;quot;, Logger(), func(c *gin.Context) {
example := c.MustGet(&amp;quot;example&amp;quot;).(string)
log.Println(example)
})
r.Run(&amp;quot;:8080&amp;quot;)
}
&lt;/code>&lt;/pre>
&lt;p>即不用 r.use 添加中间件，直接将 Logger() 写到 r.GET 方法的参数里（&amp;quot;/test&amp;quot; 之后）。&lt;/p>
&lt;p>更多 gin 中间件示例可参考 &lt;a href="https://link.segmentfault.com/?url=https%3A%2F%2Fgithub.com%2Fgin-gonic%2Fgin">https://github.com/gin-gonic/gin&lt;/a>&lt;/p>
&lt;p>&lt;strong>参考资料&lt;/strong>&lt;/p>
&lt;p>&lt;a href="https://link.segmentfault.com/?url=https%3A%2F%2Fdrstearns.github.io%2Ftutorials%2Fgomiddleware%2F">https://drstearns.github.io/t&amp;hellip;&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://link.segmentfault.com/?url=https%3A%2F%2Fgowebexamples.com%2Fadvanced-middleware%2F">https://gowebexamples.com/adv&amp;hellip;&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://link.segmentfault.com/?url=https%3A%2F%2Fgithub.com%2Fguyan0319%2Fgolang_development_notes%2Fblob%2Fmaster%2Fzh%2Fpreface.md">更多 GO 学习资料&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Docs: Middleware</title><link>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/Middleware/Middleware/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/Middleware/Middleware/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>原文链接：&lt;a href="https://chai2010.gitbooks.io/advanced-go-programming-book/content/ch5-web/ch5-03-middleware.html">https://chai2010.gitbooks.io/advanced-go-programming-book/content/ch5-web/ch5-03-middleware.html&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>本章将对现在流行的 Web 框架中的中间件(middleware)技术原理进行分析，并介绍如何使用中间件技术将业务和非业务代码功能进行解耦。&lt;/p>
&lt;h2 id="代码泥潭">代码泥潭&lt;/h2>
&lt;p>先来看一段代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// middleware/hello.go
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">hello&lt;/span>(&lt;span style="color:#a6e22e">wr&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">ResponseWriter&lt;/span>, &lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Request&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">wr&lt;/span>.&lt;span style="color:#a6e22e">Write&lt;/span>([]byte(&lt;span style="color:#e6db74">&amp;#34;hello&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">HandleFunc&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">hello&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">ListenAndServe&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;:8080&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这是一个典型的 Web 服务，挂载了一个简单的路由。我们的线上服务一般也是从这样简单的服务开始逐渐拓展开去的。
现在突然来了一个新的需求，我们想要统计之前写的 hello 服务的处理耗时，需求很简单，我们对上面的程序进行少量修改：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// middleware/hello_with_time_elapse.go
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">logger&lt;/span> = &lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>(&lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">Stdout&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">hello&lt;/span>(&lt;span style="color:#a6e22e">wr&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">ResponseWriter&lt;/span>, &lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Request&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">timeStart&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Now&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">wr&lt;/span>.&lt;span style="color:#a6e22e">Write&lt;/span>([]byte(&lt;span style="color:#e6db74">&amp;#34;hello&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">timeElapsed&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Since&lt;/span>(&lt;span style="color:#a6e22e">timeStart&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">timeElapsed&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样便可以在每次接收到 http 请求时，打印出当前请求所消耗的时间。
完成了这个需求之后，我们继续进行业务开发，提供的 API 逐渐增加，现在我们的路由看起来是这个样子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// middleware/hello_with_more_routes.go
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 省略了一些相同的代码
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">helloHandler&lt;/span>(&lt;span style="color:#a6e22e">wr&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">ResponseWriter&lt;/span>, &lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Request&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">showInfoHandler&lt;/span>(&lt;span style="color:#a6e22e">wr&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">ResponseWriter&lt;/span>, &lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Request&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">showEmailHandler&lt;/span>(&lt;span style="color:#a6e22e">wr&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">ResponseWriter&lt;/span>, &lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Request&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">showFriendsHandler&lt;/span>(&lt;span style="color:#a6e22e">wr&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">ResponseWriter&lt;/span>, &lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Request&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">timeStart&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Now&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">wr&lt;/span>.&lt;span style="color:#a6e22e">Write&lt;/span>([]byte(&lt;span style="color:#e6db74">&amp;#34;your friends is tom and alex&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">timeElapsed&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Since&lt;/span>(&lt;span style="color:#a6e22e">timeStart&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">timeElapsed&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">HandleFunc&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">helloHandler&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">HandleFunc&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/info/show&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">showInfoHandler&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">HandleFunc&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/email/show&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">showEmailHandler&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">HandleFunc&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/friends/show&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">showFriendsHandler&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>每一个 handler 里都有之前提到的记录运行时间的代码，每次增加新的路由我们也同样需要把这些看起来长得差不多的代码拷贝到我们需要的地方去。因为代码不太多，所以实施起来也没有遇到什么大问题。
渐渐的我们的系统增加到了 30 个路由和&lt;code>handler&lt;/code>函数，每次增加新的 handler，我们的第一件工作就是把之前写的所有和业务逻辑无关的周边代码先拷贝过来。
接下来系统安稳地运行了一段时间，突然有一天，老板找到你，我们最近找人新开发了监控系统，为了系统运行可以更加可控，需要把每个接口运行的耗时数据主动上报到我们的监控系统里。给监控系统起个名字吧，叫 metrics。现在你需要修改代码并把耗时通过 HTTP Post 的方式发给 metrics 系统了。我们来修改一下&lt;code>helloHandler()&lt;/code>：&lt;/p>
&lt;pre>&lt;code>func helloHandler(wr http.ResponseWriter, r *http.Request) {
timeStart := time.Now()
wr.Write([]byte(&amp;quot;hello&amp;quot;))
timeElapsed := time.Since(timeStart)
logger.Println(timeElapsed)
// 新增耗时上报
metrics.Upload(&amp;quot;timeHandler&amp;quot;, timeElapsed)
}
&lt;/code>&lt;/pre>
&lt;p>修改到这里，本能地发现我们的开发工作开始陷入了泥潭。无论未来对我们的这个 Web 系统有任何其它的非功能或统计需求，我们的修改必然牵一发而动全身。只要增加一个非常简单的非业务统计，我们就需要去几十个 handler 里增加这些业务无关的代码。虽然一开始我们似乎并没有做错，但是显然随着业务的发展，我们的行事方式让我们陷入了代码的泥潭。&lt;/p>
&lt;h2 id="使用中间件剥离非业务逻辑">使用中间件剥离非业务逻辑&lt;/h2>
&lt;p>我们来分析一下，一开始在哪里做错了呢？我们只是一步一步地满足需求，把我们需要的逻辑按照流程写下去呀？
我们犯的最大的错误，是把业务代码和非业务代码揉在了一起。对于大多数的场景来讲，非业务的需求都是在 http 请求处理前做一些事情，并且在响应完成之后做一些事情。我们有没有办法使用一些重构思路把这些公共的非业务功能代码剥离出去呢？回到刚开头的例子，我们需要给我们的&lt;code>helloHandler()&lt;/code>增加超时时间统计，我们可以使用一种叫&lt;code>function adapter&lt;/code>的方法来对&lt;code>helloHandler()&lt;/code>进行包装：&lt;/p>
&lt;pre>&lt;code>func hello(wr http.ResponseWriter, r *http.Request) {
wr.Write([]byte(&amp;quot;hello&amp;quot;))
}
func timeMiddleware(next http.Handler) http.Handler {
return http.HandlerFunc(func(wr http.ResponseWriter, r *http.Request) {
timeStart := time.Now()
// next handler
next.ServeHTTP(wr, r)
timeElapsed := time.Since(timeStart)
logger.Println(timeElapsed)
})
}
func main() {
http.Handle(&amp;quot;/&amp;quot;, timeMiddleware(http.HandlerFunc(hello)))
err := http.ListenAndServe(&amp;quot;:8080&amp;quot;, nil)
...
}
&lt;/code>&lt;/pre>
&lt;p>这样就非常轻松地实现了业务与非业务之间的剥离，魔法就在于这个&lt;code>timeMiddleware&lt;/code>。可以从代码中看到，我们的&lt;code>timeMiddleware()&lt;/code>也是一个函数，其参数为&lt;code>http.Handler&lt;/code>，&lt;code>http.Handler&lt;/code>的定义在&lt;code>net/http&lt;/code>包中：&lt;/p>
&lt;pre>&lt;code>type Handler interface {
ServeHTTP(ResponseWriter, *Request)
}
&lt;/code>&lt;/pre>
&lt;p>任何方法实现了&lt;code>ServeHTTP&lt;/code>，即是一个合法的&lt;code>http.Handler&lt;/code>，读到这里你可能会有一些混乱，我们先来梳理一下 http 库的&lt;code>Handler&lt;/code>，&lt;code>HandlerFunc&lt;/code>和&lt;code>ServeHTTP&lt;/code>的关系：&lt;/p>
&lt;pre>&lt;code>type Handler interface {
ServeHTTP(ResponseWriter, *Request)
}
type HandlerFunc func(ResponseWriter, *Request)
func (f HandlerFunc) ServeHTTP(w ResponseWriter, r *Request) {
f(w, r)
}
&lt;/code>&lt;/pre>
&lt;p>只要你的 handler 函数签名是：&lt;/p>
&lt;pre>&lt;code>func (ResponseWriter, *Request)
&lt;/code>&lt;/pre>
&lt;p>那么这个&lt;code>handler&lt;/code>和&lt;code>http.HandlerFunc()&lt;/code>就有了一致的函数签名，可以将该&lt;code>handler()&lt;/code>函数进行类型转换，转为&lt;code>http.HandlerFunc&lt;/code>。而&lt;code>http.HandlerFunc&lt;/code>实现了&lt;code>http.Handler&lt;/code>这个接口。在&lt;code>http&lt;/code>库需要调用你的 handler 函数来处理 http 请求时，会调用&lt;code>HandlerFunc()&lt;/code>的&lt;code>ServeHTTP()&lt;/code>函数，可见一个请求的基本调用链是这样的：&lt;/p>
&lt;pre>&lt;code>h = getHandler() =&amp;gt; h.ServeHTTP(w, r) =&amp;gt; h(w, r)
&lt;/code>&lt;/pre>
&lt;p>上面提到的把自定义&lt;code>handler&lt;/code>转换为&lt;code>http.HandlerFunc()&lt;/code>这个过程是必须的，因为我们的&lt;code>handler&lt;/code>没有直接实现&lt;code>ServeHTTP&lt;/code>这个接口。上面的代码中我们看到的 HandleFunc(注意 HandlerFunc 和 HandleFunc 的区别)里也可以看到这个强制转换过程：&lt;/p>
&lt;pre>&lt;code>func HandleFunc(pattern string, handler func(ResponseWriter, *Request)) {
DefaultServeMux.HandleFunc(pattern, handler)
}
// 调用
func (mux *ServeMux) HandleFunc(pattern string, handler func(ResponseWriter, *Request)) {
mux.Handle(pattern, HandlerFunc(handler))
}
&lt;/code>&lt;/pre>
&lt;p>知道 handler 是怎么一回事，我们的中间件通过包装 handler，再返回一个新的 handler 就好理解了。
总结一下，我们的中间件要做的事情就是通过一个或多个函数对 handler 进行包装，返回一个包括了各个中间件逻辑的函数链。我们把上面的包装再做得复杂一些：&lt;/p>
&lt;pre>&lt;code>customizedHandler = logger(timeout(ratelimit(helloHandler)))
&lt;/code>&lt;/pre>
&lt;p>这个函数链在执行过程中的上下文可以用_图 5-8_来表示。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/ggockh/1623161140176-1a508876-a2b1-4dfe-bcb9-9e67ecf4cd2d.png" alt="">
&lt;em>图 5-8 请求处理过程&lt;/em>
再直白一些，这个流程在进行请求处理的时候就是不断地进行函数压栈再出栈，有一些类似于递归的执行流：&lt;/p>
&lt;pre>&lt;code>[exec of logger logic] 函数栈: []
[exec of timeout logic] 函数栈: [logger]
[exec of ratelimit logic] 函数栈: [timeout/logger]
[exec of helloHandler logic] 函数栈: [ratelimit/timeout/logger]
[exec of ratelimit logic part2] 函数栈: [timeout/logger]
[exec of timeout logic part2] 函数栈: [logger]
[exec of logger logic part2] 函数栈: []
&lt;/code>&lt;/pre>
&lt;p>功能实现了，但在上面的使用过程中我们也看到了，这种函数套函数的用法不是很美观，同时也不具备什么可读性。&lt;/p>
&lt;h2 id="更优雅的中间件写法">更优雅的中间件写法&lt;/h2>
&lt;p>上一节中解决了业务功能代码和非业务功能代码的解耦，但也提到了，看起来并不美观，如果需要修改这些函数的顺序，或者增删中间件还是有点费劲，本节我们来进行一些“写法”上的优化。
看一个例子：&lt;/p>
&lt;pre>&lt;code>r = NewRouter()
r.Use(logger)
r.Use(timeout)
r.Use(ratelimit)
r.Add(&amp;quot;/&amp;quot;, helloHandler)
&lt;/code>&lt;/pre>
&lt;p>通过多步设置，我们拥有了和上一节差不多的执行函数链。胜在直观易懂，如果我们要增加或者删除中间件，只要简单地增加删除对应的&lt;code>Use()&lt;/code>调用就可以了。非常方便。
从框架的角度来讲，怎么实现这样的功能呢？也不复杂：&lt;/p>
&lt;pre>&lt;code>type middleware func(http.Handler) http.Handler
type Router struct {
middlewareChain [] middleware
mux map[string] http.Handler
}
func NewRouter() *Router{
return &amp;amp;Router{}
}
func (r *Router) Use(m middleware) {
r.middlewareChain = append(r.middlewareChain, m)
}
func (r *Router) Add(route string, h http.Handler) {
var mergedHandler = h
for i := len(r.middlewareChain) - 1; i &amp;gt;= 0; i-- {
mergedHandler = r.middlewareChain[i](mergedHandler)
}
r.mux[route] = mergedHandler
}
&lt;/code>&lt;/pre>
&lt;p>注意代码中的&lt;code>middleware&lt;/code>数组遍历顺序，和用户希望的调用顺序应该是&amp;quot;相反&amp;quot;的。应该不难理解。&lt;/p>
&lt;h2 id="哪些事情适合在中间件中做">哪些事情适合在中间件中做&lt;/h2>
&lt;p>以较流行的开源 Go 语言框架 chi 为例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">compress&lt;/span>.&lt;span style="color:#66d9ef">go&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> =&amp;gt; &lt;span style="color:#960050;background-color:#1e0010">对&lt;/span>&lt;span style="color:#a6e22e">http&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">的响应体进行压缩处理&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">heartbeat&lt;/span>.&lt;span style="color:#66d9ef">go&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> =&amp;gt; &lt;span style="color:#960050;background-color:#1e0010">设置一个特殊的路由，例如&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">ping&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">，&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">healthcheck&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">，用来给负载均衡一类的前置服务进行探活&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#66d9ef">go&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> =&amp;gt; &lt;span style="color:#960050;background-color:#1e0010">打印请求处理处理日志，例如请求处理时间，请求路由&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">profiler&lt;/span>.&lt;span style="color:#66d9ef">go&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> =&amp;gt; &lt;span style="color:#960050;background-color:#1e0010">挂载&lt;/span>&lt;span style="color:#a6e22e">pprof&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">需要的路由，如&lt;/span>&lt;span style="color:#e6db74">`/pprof`&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">、&lt;/span>&lt;span style="color:#e6db74">`/pprof/trace`&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">到系统中&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">realip&lt;/span>.&lt;span style="color:#66d9ef">go&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> =&amp;gt; &lt;span style="color:#960050;background-color:#1e0010">从请求头中读取&lt;/span>&lt;span style="color:#a6e22e">X&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">Forwarded&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">For&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">和&lt;/span>&lt;span style="color:#a6e22e">X&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">Real&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">IP&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">，将&lt;/span>&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Request&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">中的&lt;/span>&lt;span style="color:#a6e22e">RemoteAddr&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">修改为得到的&lt;/span>&lt;span style="color:#a6e22e">RealIP&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">requestid&lt;/span>.&lt;span style="color:#66d9ef">go&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> =&amp;gt; &lt;span style="color:#960050;background-color:#1e0010">为本次请求生成单独的&lt;/span>&lt;span style="color:#a6e22e">requestid&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">，可一路透传，用来生成分布式调用链路，也可用于在日志中串连单次请求的所有逻辑&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">timeout&lt;/span>.&lt;span style="color:#66d9ef">go&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> =&amp;gt; &lt;span style="color:#960050;background-color:#1e0010">用&lt;/span>&lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Timeout&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">设置超时时间，并将其通过&lt;/span>&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Request&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">一路透传下去&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">throttler&lt;/span>.&lt;span style="color:#66d9ef">go&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> =&amp;gt; &lt;span style="color:#960050;background-color:#1e0010">通过定长大小的&lt;/span>&lt;span style="color:#a6e22e">channel&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">存储&lt;/span>&lt;span style="color:#a6e22e">token&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">，并通过这些&lt;/span>&lt;span style="color:#a6e22e">token&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">对接口进行限流&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>每一个 Web 框架都会有对应的中间件组件，如果你有兴趣，也可以向这些项目贡献有用的中间件，只要合理一般项目的维护人也愿意合并你的 Pull Request。
比如开源界很火的 gin 这个框架，就专门为用户贡献的中间件开了一个仓库，见_图 5-9_：
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/ggockh/1623161140168-41c651d8-8692-4e8c-8e79-3a0e1a7bfa82.png" alt="">
如果读者去阅读 gin 的源码的话，可能会发现 gin 的中间件中处理的并不是&lt;code>http.Handler&lt;/code>，而是一个叫&lt;code>gin.HandlerFunc&lt;/code>的函数类型，和本节中讲解的&lt;code>http.Handler&lt;/code>签名并不一样。不过 gin 的&lt;code>handler&lt;/code>也只是针对其框架的一种封装，中间件的原理与本节中的说明是一致的。&lt;/p></description></item></channel></rss>