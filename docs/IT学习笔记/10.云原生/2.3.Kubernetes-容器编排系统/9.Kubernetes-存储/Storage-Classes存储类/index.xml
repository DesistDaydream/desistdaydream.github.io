<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – Storage Classes(存储类)</title><link>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/9.Kubernetes-%E5%AD%98%E5%82%A8/Storage-Classes%E5%AD%98%E5%82%A8%E7%B1%BB/</link><description>Recent content in Storage Classes(存储类) on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/9.Kubernetes-%E5%AD%98%E5%82%A8/Storage-Classes%E5%AD%98%E5%82%A8%E7%B1%BB/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Storage Class Provisioner</title><link>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/9.Kubernetes-%E5%AD%98%E5%82%A8/Storage-Classes%E5%AD%98%E5%82%A8%E7%B1%BB/Storage-Class-Provisioner/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/9.Kubernetes-%E5%AD%98%E5%82%A8/Storage-Classes%E5%AD%98%E5%82%A8%E7%B1%BB/Storage-Class-Provisioner/</guid><description>
&lt;h1 id="nfs-provisioner">NFS Provisioner&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/kubernetes-sigs/nfs-subdir-external-provisioner">GitHub&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/kubernetes-retired/external-storage/tree/master/nfs-client">GitHubOld&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>注意：NFS Provisioner 不支持容量限制功能
NFS subdir external provisioner 是一个自动 Provisioner，它使用您现有的和已配置的 NFS 服务器来通过持久卷声明来动态供应 Kubernetes 持久卷。PV 配置为 $ {namespace}-$ {pvcName}-$ {pvName}。&lt;/p>
&lt;h2 id="部署-nfs-provisioner">部署 NFS Provisioner&lt;/h2>
&lt;blockquote>
&lt;p>參考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://artifacthub.io/packages/helm/ckotzbauer/nfs-client-provisioner">arifacthub&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/kubernetes-sigs/nfs-subdir-external-provisioner#how-to-deploy-nfs-subdir-external-provisioner-to-your-cluster">GitHub&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/helm/charts/tree/master/stable/nfs-client-provisioner#installing-the-chart">GitHubOld&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>创建 namespace&lt;/p>
&lt;pre>&lt;code>apiVersion: v1
kind: Namespace
metadata:
name: storage
&lt;/code>&lt;/pre>
&lt;p>创建 rbac&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">ServiceAccount&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">nfs-client-provisioner&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">storage&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">ClusterRole&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">rbac.authorization.k8s.io/v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">nfs-client-provisioner-runner&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">rules&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">apiGroups&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">resources&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;persistentvolumes&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">verbs&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;get&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;list&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;watch&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;create&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;delete&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">apiGroups&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">resources&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;persistentvolumeclaims&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">verbs&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;get&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;list&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;watch&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;update&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">apiGroups&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;storage.k8s.io&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">resources&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;storageclasses&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">verbs&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;get&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;list&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;watch&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">apiGroups&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">resources&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;events&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">verbs&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;create&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;update&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;patch&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">ClusterRoleBinding&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">rbac.authorization.k8s.io/v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">run-nfs-client-provisioner&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">subjects&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">ServiceAccount&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">nfs-client-provisioner&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">storage&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">roleRef&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">ClusterRole&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">nfs-client-provisioner-runner&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">apiGroup&lt;/span>: &lt;span style="color:#ae81ff">rbac.authorization.k8s.io&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Role&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">rbac.authorization.k8s.io/v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">leader-locking-nfs-client-provisioner&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">namespace :storage&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">rules&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">apiGroups&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">resources&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;endpoints&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">verbs&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;get&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;list&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;watch&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;create&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;update&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;patch&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">RoleBinding&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">rbac.authorization.k8s.io/v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">leader-locking-nfs-client-provisioner&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">namespace :storage&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">subjects&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">ServiceAccount&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">nfs-client-provisioner&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># replace with namespace where provisioner is deployed&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">storage&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">roleRef&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Role&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">leader-locking-nfs-client-provisioner&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">apiGroup&lt;/span>: &lt;span style="color:#ae81ff">rbac.authorization.k8s.io&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>部署 client&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">ServiceAccount&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">nfs-client-provisioner&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">storage&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Deployment&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">extensions/v1beta1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">nfs-client-provisioner&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">storage&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">replicas&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">strategy&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">Recreate&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">template&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">nfs-client-provisioner&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">serviceAccountName&lt;/span>: &lt;span style="color:#ae81ff">nfs-client-provisioner&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">containers&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">nfs-client-provisioner&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">imagePullPolicy&lt;/span>: &lt;span style="color:#ae81ff">Never&lt;/span> &lt;span style="color:#75715e"># 不让每次部署都拉取镜像，直接使用本地镜像即可&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">quay.io/external_storage/nfs-client-provisioner:latest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">volumeMounts&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">nfs-client-root&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">mountPath&lt;/span>: &lt;span style="color:#ae81ff">/persistentvolumes&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">env&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">PROVISIONER_NAME&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#ae81ff">nfs-storage&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">NFS_SERVER&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#ae81ff">填写nfs设备的IP或者主机名&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">NFS_PATH&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#ae81ff">填写nfs设备上设定的数据存储路径&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">volumes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">nfs-client-root&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">nfs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">server&lt;/span>: &lt;span style="color:#ae81ff">填写nfs设备的IP或者主机名&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">path&lt;/span>: &lt;span style="color:#ae81ff">填写nfs设备上设定的数据存储路径&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建 storageClass&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">storage.k8s.io/v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">StorageClass&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">managed-nfs-storage&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">provisioner&lt;/span>: &lt;span style="color:#ae81ff">nfs-storage&lt;/span> &lt;span style="color:#75715e"># 必须与 manifests 文件中 PROVISIONER_NAME 环境变量的值相同&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">parameters&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">archiveOnDelete&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;false&amp;#34;&lt;/span> &lt;span style="color:#75715e"># 设置为 false 时，PV 将不会在删除 PVC 时存档&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="openebs">OpenEBS&lt;/h1>
&lt;h2 id="概述">概述&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://openebs.io/">官网&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>OpenEBS 建立在 Kubernetes 之上，使有状态应用程序能够轻松访问动态 &lt;strong>Local PV&lt;/strong> 或 &lt;strong>Replicated PV&lt;/strong>。通过使用容器附加存储模式，用户报告说他们的团队成本更低，管理更容易，控制力更强。
OpenEBS 是&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/cbnzrv/1627391323750-5ed0ed9d-7753-4790-bbb5-e0bfdcc25523.png" alt="image.png"> 由 MayaData 和社区共同开发的 100% 开源 CNCF 项目。著名用户包括 Arista、Optoro、Orange、Comcast 和 CNCF 本身。&lt;/p></description></item><item><title>Docs: Storage Classes(存储类)</title><link>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/9.Kubernetes-%E5%AD%98%E5%82%A8/Storage-Classes%E5%AD%98%E5%82%A8%E7%B1%BB/Storage-Classes%E5%AD%98%E5%82%A8%E7%B1%BB/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/9.Kubernetes-%E5%AD%98%E5%82%A8/Storage-Classes%E5%AD%98%E5%82%A8%E7%B1%BB/Storage-Classes%E5%AD%98%E5%82%A8%E7%B1%BB/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kubernetes.io/docs/concepts/storage/storage-classes/">官方文档,概念-存储-存储类&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/docs/tasks/administer-cluster/change-default-storage-class/">官方文档,任务-管理集群-改变默认 StorageClass&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>在介绍的 [PV](/docs/IT学习笔记/10.云原生/2.3.Kubernetes%20 容器编排系统/9.Kubernetes%20 存储/Persistent%20Volume(持久卷).md Volume(持久卷).md) 时有个问题就是管理员需要先创建 pv 固定好容量，再让用户或者开发创建的 PVC 从中挑选，有时候 PVC 申请的时候未必会有满足容量要求的 PV 可以提供，甚至管理员维护大量的 PV 的工作也是非常繁重的。为了实现在创建完 PVC 后，K8S 可以自动创建 PV 的功能，则可以使用 &lt;strong>Storage Class(存储类)&lt;/strong> 这个资源对象来满足这类需求。&lt;/p>
&lt;p>&lt;strong>Storage Class(存储类)&lt;/strong>，就像这个名字一样，Storage Class 是一个抽象的概念，用来抽象存储资源。一般情况都是把同类型的存储归为一类，比如 ssd 类型、hdd 类型等等，也可以按照功能划分，给订单组用的存储，给数据组用的存储等等。说白了，Storage Class 就是一块存储空间。&lt;/p>
&lt;p>创建完 StorageClass 后，直接创建 PVC 并指定 storageClassName 参数的值为该 StorageClass 的名字，即可自动生成 PV，而不用手动创建。然后在 pod 中直接使用 PVC 作为 volume 进行挂载即可。&lt;/p>
&lt;h2 id="storage-class-的实现方式">Storage Class 的实现方式&lt;/h2>
&lt;h3 id="storage-class-name名字">Storage Class Name(名字)&lt;/h3>
&lt;p>&lt;strong>Storage Class Name(存储类的名字)&lt;/strong> 是 PV、PVC 选择的标准，PV 与 PVC 总是会选择具有相同名字的 StorageClass 来进行配对。&lt;/p>
&lt;blockquote>
&lt;p>StorageClass 可以看做是一个具有无数多个 PV 的存储池，每一个 StorageClass 都可以由管理员自定定义一个 name，管理员可以根据存储性能的高低、备份策略、服务质量等等类别来对 StorageClass 进行命名。k8s 本身并不能理解“类别”到底意味着什么，仅仅是将这些当做 PV、PVC 的特性描述。&lt;/p>
&lt;/blockquote>
&lt;h3 id="provisioner供应器">Provisioner(供应器)&lt;/h3>
&lt;p>&lt;strong>Provisioner(供应器)&lt;/strong> 相当于 &lt;strong>StorageClass 的控制器&lt;/strong>，也称为 &lt;strong>volume plugin(卷插件)&lt;/strong>。&lt;strong>是 Storage Class 实现的主要工具&lt;/strong>，用于动态创建 pv。为了让 k8s 可以操作后端 storage，该存储需要支持 restful 风格的 api 接口，否则 k8s 的 StorageClass 资源无法正常工作。但是一般的存储程序，是没有 restful 风格的 api 接口的，这样这种存储就无法与 k8s 进行交互。为了解决这个问题，就需要使用 Provisioner，Provisioner 作为存储与 k8s 之间的翻译者，让存储与 k8s 集群进行交互。&lt;/p>
&lt;p>&lt;a href="https://kubernetes.io/docs/concepts/storage/storage-classes/#provisioner">这里面&lt;/a>有可以使用的 Provisioner 列表，其中分为两类&lt;/p>
&lt;ol>
&lt;li>internal，内部 Provisioners。k8s 内建的 Provisioner，名字都以 kubernetes.io 作为前缀&lt;/li>
&lt;li>external，外部 Provisioners。第三方提供遵循 CSI 标准的 Provisioner。可用的 external provisioners 可以在&lt;a href="https://github.com/kubernetes-incubator/external-storage">https://github.com/kubernetes-incubator/external-storage&lt;/a>这里找到，还有一些在第三方供给者在自己的网站上保存 provisioners 程序
&lt;ol>
&lt;li>nfs 就是典型的 external provisioners&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>parameters(参数)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>使用参数来描述该存储中数据的使用方式、如何关联到存储卷、如何关联到真实存储等等。不同的 Provisioner 可用的参数各不相同&lt;/li>
&lt;li>内部 Provisioners 的参数详见：&lt;a href="https://kubernetes.io/docs/concepts/storage/storage-classes/#parameters">https://kubernetes.io/docs/concepts/storage/storage-classes/#parameters&lt;/a>&lt;/li>
&lt;li>外部 Provisioners 的参数详见：&lt;a href="https://github.com/kubernetes-incubator/external-storage">https://github.com/kubernetes-incubator/external-storage&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="reclaim-policy回收策略">Reclaim Policy(回收策略)&lt;/h3>
&lt;p>在删除 Storage Class 创建的 PV 时， PV 中的数据应该如何处理，就是由 Reclaim Policy 决定的。一共由两种策略&lt;/p>
&lt;ul>
&lt;li>Delete # PV 删除时，数据删除&lt;/li>
&lt;li>Retain # PV 删除时，数据保留&lt;/li>
&lt;/ul>
&lt;h2 id="简单示例">简单示例&lt;/h2>
&lt;p>现在使用 NFS Provisioner 作为 Storage Class 的控制器，要根据&lt;a href="https://github.com/kubernetes-sigs/nfs-subdir-external-provisioner">此项目&lt;/a>来创建一个 nfs-client 的 Pod，并与后端存储关联。这个 Pod 就是 Provisioner。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>root@lichenhao rabbitmq-stack-allinone&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># kubectl get pod -n sc-provisioner&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NAME READY STATUS RESTARTS AGE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>test-nfs-client-provisioner-58675b55fb-nprpl 1/1 Running &lt;span style="color:#ae81ff">0&lt;/span> 5h2m
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个 Provisioner 具有 3 各关键参数：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">PROVISIONER_NAME&lt;/span> &lt;span style="color:#75715e"># 该 Provisioner 的名字&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#ae81ff">nfs-storage&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">NFS_SERVER&lt;/span> &lt;span style="color:#75715e"># 后端存储的地址&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#ae81ff">172.19.42.215&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">NFS_PATH&lt;/span> &lt;span style="color:#75715e"># 后端存储的数据储存路径&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#ae81ff">/data/test&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建一个 Storage Class 资源，并关联 Provisioner&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>root@lichenhao rabbitmq-stack-allinone&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># kubectl get storageclasses.storage.k8s.io managed-nfs-storage -o yaml | neat&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: storage.k8s.io/v1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: StorageClass
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: managed-nfs-storage
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>provisioner: nfs-storage &lt;span style="color:#75715e"># 指定要关联的 Profisioner，使用 名字 进行关联&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>parameters:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> archiveOnDelete: &lt;span style="color:#e6db74">&amp;#34;false&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这时候，如果创建了一个 PVC，并指定要使用的 Storage Class 的名字，则 PVC 控制器会将请求交给对应的 Storage Class 并创建一个属于该 Storage Class 的 PV，此时由于 Provisioner 一直监控着 该 Storage Class 的状态，所以会触发工作，再根据自身配置规则，在本地目录中，创建对应名称的目录(比如这个 NFS Provisioner 就会创建名为 &lt;code>名称空间-pvc名-pv名&lt;/code> 这样的目录)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>root@lichenhao rabbitmq-stack-allinone&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># kubectl get pvc -n rabbitmq&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>persistence-test-server-0 Bound pvc-ed8e801f-2659-4829-912b-669145c8396b 10Gi RWO managed-nfs-storage 42m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>persistence-test-server-1 Bound pvc-72c85e1c-8c06-45b2-ba46-e223fafd24d5 10Gi RWO managed-nfs-storage 42m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>persistence-test-server-2 Bound pvc-9157e421-7150-45ab-8432-2be935dd69ef 10Gi RWO managed-nfs-storage 42m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>root@lichenhao rabbitmq-stack-allinone&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># kubectl get pv&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM STORAGECLASS REASON AGE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pvc-72c85e1c-8c06-45b2-ba46-e223fafd24d5 10Gi RWO Delete Bound rabbitmq/persistence-test-server-1 managed-nfs-storage 42m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pvc-9157e421-7150-45ab-8432-2be935dd69ef 10Gi RWO Delete Bound rabbitmq/persistence-test-server-2 managed-nfs-storage 42m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pvc-ed8e801f-2659-4829-912b-669145c8396b 10Gi RWO Delete Bound rabbitmq/persistence-test-server-0 managed-nfs-storage 42m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>root@nfs-1 test&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># ll -h&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>total &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxrwxrwx &lt;span style="color:#ae81ff">4&lt;/span> root input &lt;span style="color:#ae81ff">231&lt;/span> Dec &lt;span style="color:#ae81ff">2&lt;/span> 21:53 rabbitmq-persistence-test-server-0-pvc-ed8e801f-2659-4829-912b-669145c8396b
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxrwxrwx &lt;span style="color:#ae81ff">4&lt;/span> root input &lt;span style="color:#ae81ff">231&lt;/span> Dec &lt;span style="color:#ae81ff">2&lt;/span> 21:53 rabbitmq-persistence-test-server-1-pvc-72c85e1c-8c06-45b2-ba46-e223fafd24d5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxrwxrwx &lt;span style="color:#ae81ff">4&lt;/span> root input &lt;span style="color:#ae81ff">231&lt;/span> Dec &lt;span style="color:#ae81ff">2&lt;/span> 21:53 rabbitmq-persistence-test-server-2-pvc-9157e421-7150-45ab-8432-2be935dd69ef
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="总结">总结&lt;/h2>
&lt;p>&lt;strong>Storage Class 与 Provisioner 的关系，就好像 ingress 与 ingress controller 的关系一样。&lt;/strong>
PV 与 StorageClass 是集群管理员使用的，PVC 是用户或者开发者使用的。PV 与 StorageClass 就是管理员所管理的存储资源，一个是手动分配，一个是自动分配；PVC 就是用户需要找管理员索要的存储资源。&lt;/p>
&lt;h1 id="默认-storage-class">默认 Storage Class&lt;/h1>
&lt;p>默认的 Storage Class 用于为 &lt;a href="https://www.teambition.com/project/5f90e312755d8a00446050eb/app/5eba5fba6a92214d420a3219/workspaces/5f90e312c800160016ea22fb/docs/5f9a47bc12d5ba00014970c7?scroll-to-block=5fc83d08eebc9352f7e0f5c7">不指定 StorageClassName 的 PVC &lt;/a>动态提供 PV。&lt;/p>
&lt;p>列出你的集群中的 StorageClasses：&lt;/p>
&lt;pre>&lt;code>kubectl get storageclass
&lt;/code>&lt;/pre>
&lt;p>输出类似这样：&lt;/p>
&lt;pre>&lt;code>NAME PROVISIONER AGE
standard (default) kubernetes.io/gce-pd 1d
gold kubernetes.io/gce-pd 1d
&lt;/code>&lt;/pre>
&lt;p>默认 StorageClass 以 &lt;code>(default)&lt;/code> 标记。&lt;/p>
&lt;p>请注意，最多只能有一个 StorageClass 能够被标记为默认。 如果它们中有两个或多个被标记为默认，Kubernetes 将忽略这个注解， 也就是它将表现为没有默认 StorageClass。&lt;/p>
&lt;p>&lt;strong>将指定的 StorageClass 标记为非默认&lt;/strong>
默认 StorageClass 的注解 &lt;code>storageclass.kubernetes.io/is-default-class&lt;/code> 设置为 &lt;code>true&lt;/code>。 注解的其它任意值或者缺省值将被解释为 &lt;code>false&lt;/code>。要标记一个 StorageClass 为非默认的，你需要改变它的值为 &lt;code>false&lt;/code>：&lt;/p>
&lt;pre>&lt;code>kubectl patch storageclass StorageClassName -p '{&amp;quot;metadata&amp;quot;: {&amp;quot;annotations&amp;quot;:{&amp;quot;storageclass.kubernetes.io/is-default-class&amp;quot;:&amp;quot;false&amp;quot;}}}'
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>将指定的 StorageClass 标记为默认&lt;/strong>
和前面的步骤类似，需要添加/设置注解 &lt;code>storageclass.kubernetes.io/is-default-class=true&lt;/code>。&lt;/p>
&lt;pre>&lt;code>kubectl patch storageclass StorageClassName -p '{&amp;quot;metadata&amp;quot;: {&amp;quot;annotations&amp;quot;:{&amp;quot;storageclass.kubernetes.io/is-default-class&amp;quot;:&amp;quot;true&amp;quot;}}}'
&lt;/code>&lt;/pre>
&lt;h1 id="特殊的-local-类型的-storageclass">特殊的 local 类型的 StorageClass&lt;/h1>
&lt;p>一般情况 StorageClass 都是动态创建 PV 的(i.e.创建一个 PVC，则会自动创建一个 PV 与之绑定，不用管理员手动创建 PV 了)，还有一种静态模式需要手动指定 PV，静态的就是指 local 模式的 storageclass&lt;/p>
&lt;p>静态模式的 storageClass 同样需要创建 pv、pvc，不过与普通的 pv、pvc 不同，pv 与 pvc 并不会立刻绑定到一起，而是当 pod 消费 pvc 的时候，才会寻找一个合适的 pv 进行绑定&lt;/p>
&lt;p>文末的简单示例，就是一个静态的 StorageClass,需要手动创建 PV 与 PVC，如果没有 StorageClass 的话，那么创建完 PV 与 PVC 后，这俩会自动绑定到一起&lt;/p>
&lt;p>示例：&lt;/p>
&lt;p>一般情况不会使用这种特殊的 StorageClass，而是使用一个具有正常后端存储的 StorageClass，这样创建 pvc 后可以自动创建 PV，而不再需要手动创建 PV 了&lt;/p>
&lt;p>local 表示这个 PV 是使用宿主机的目录来当存储使用的，使用 local 的话，必须使用 nodeAffinity，以便让使用与该 PV 绑定的 PVC 的 pod 可以调度到 local 所在的宿主机上。nodeAffinity 里的 key 与 value 字段，就是某个宿主机的 label，该 PV 会在有相同 label 的宿主机上挂载指定的目录。详见&lt;a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/#node-affinity">https://kubernetes.io/docs/concepts/storage/persistent-volumes/#node-affinity&lt;/a>，&lt;a href="https://kubernetes.io/docs/concepts/storage/volumes/#local">https://kubernetes.io/docs/concepts/storage/volumes/#local&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">PersistentVolume&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">test-pv&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">accessModes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">ReadWriteOnce&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">capacity&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">storage&lt;/span>: &lt;span style="color:#ae81ff">10Gi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">local&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">path&lt;/span>: &lt;span style="color:#ae81ff">/mnt/testPV&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">nodeAffinity&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">required&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">nodeSelectorTerms&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">matchExpressions&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">key&lt;/span>: &lt;span style="color:#ae81ff">kubernetes.io/hostname&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">operator&lt;/span>: &lt;span style="color:#ae81ff">In&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">values&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">master1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">persistentVolumeReclaimPolicy&lt;/span>: &lt;span style="color:#ae81ff">Delete&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">storageClassName&lt;/span>: &lt;span style="color:#ae81ff">local-storage&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">volumeMode&lt;/span>: &lt;span style="color:#ae81ff">Filesystem&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">PersistentVolumeClaim&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">test-pvc&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">accessModes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">ReadWriteOnce&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">resources&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">requests&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">storage&lt;/span>: &lt;span style="color:#ae81ff">8Gi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">storageClassName&lt;/span>: &lt;span style="color:#ae81ff">local-storage&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">volumeMode&lt;/span>: &lt;span style="color:#ae81ff">Filesystem&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://kubernetes.io/docs/concepts/storage/storage-classes/#local">https://kubernetes.io/docs/concepts/storage/storage-classes/#local&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">storage.k8s.io/v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">StorageClass&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">local-storage&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">provisioner&lt;/span>: &lt;span style="color:#ae81ff">kubernetes.io/no-provisioner&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">volumeBindingMode&lt;/span>: &lt;span style="color:#ae81ff">WaitForFirstConsumer&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: StorageClass Manifest 详解</title><link>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/9.Kubernetes-%E5%AD%98%E5%82%A8/Storage-Classes%E5%AD%98%E5%82%A8%E7%B1%BB/StorageClass-Manifest-%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/9.Kubernetes-%E5%AD%98%E5%82%A8/Storage-Classes%E5%AD%98%E5%82%A8%E7%B1%BB/StorageClass-Manifest-%E8%AF%A6%E8%A7%A3/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.19/#storageclass-v1-storage-k8s-io">API 文档&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>其中带有 &lt;code>-required-&lt;/code> 标志的为必须的字段&lt;/p>
&lt;h2 id="apiversion-storagek8siov1">apiVersion: storage.k8s.io/v1&lt;/h2>
&lt;h2 id="kind-storageclass">kind: StorageClass&lt;/h2>
&lt;h2 id="metadata">metadata:&lt;/h2>
&lt;ul>
&lt;li>name: &lt;!-- raw HTML omitted --> # 该 StorageClass 的名字&lt;/li>
&lt;/ul>
&lt;h2 id="provisioner-string--required---指定要使用的-provisioner">provisioner: &lt;!-- raw HTML omitted --> -required- # 指定要使用的 provisioner。&lt;/h2>
&lt;h2 id="parameters-mapstringstring--provisioner-的配置参数不同的-provisioner-具有不同的参数">parameters &amp;lt;map[string]string&amp;gt; # Provisioner 的配置参数，不同的 Provisioner 具有不同的参数&lt;/h2>
&lt;h3 id="nfs-parameters">NFS Parameters&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>archiveOnDelete: false&lt;/strong> # PV 删除时，是否存档数据。如果存档数据，则会在 PV 关联的目录名前加上 archived 字符串，以便保存数据。效果如下：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>root@nfs-1 test&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># ll -h&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>total &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxrwxrwx &lt;span style="color:#ae81ff">4&lt;/span> root input &lt;span style="color:#ae81ff">179&lt;/span> Dec &lt;span style="color:#ae81ff">2&lt;/span> 17:02 archived-rabbitmq-persistence-test-server-0-pvc-9e1aabf2-a072-44d1-92df-9cd0864f9fda
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxrwxrwx &lt;span style="color:#ae81ff">4&lt;/span> root input &lt;span style="color:#ae81ff">179&lt;/span> Dec &lt;span style="color:#ae81ff">2&lt;/span> 17:02 archived-rabbitmq-persistence-test-server-1-pvc-0409c70e-be04-43e1-9b4c-17b96930cb26
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxrwxrwx &lt;span style="color:#ae81ff">4&lt;/span> root input &lt;span style="color:#ae81ff">179&lt;/span> Dec &lt;span style="color:#ae81ff">2&lt;/span> 17:02 archived-rabbitmq-persistence-test-server-2-pvc-01937680-cc6c-4118-86fc-ed420fdc275b
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxrwxrwx &lt;span style="color:#ae81ff">4&lt;/span> root input &lt;span style="color:#ae81ff">231&lt;/span> Dec &lt;span style="color:#ae81ff">2&lt;/span> 21:53 rabbitmq-persistence-test-server-0-pvc-ed8e801f-2659-4829-912b-669145c8396b
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxrwxrwx &lt;span style="color:#ae81ff">4&lt;/span> root input &lt;span style="color:#ae81ff">231&lt;/span> Dec &lt;span style="color:#ae81ff">2&lt;/span> 21:53 rabbitmq-persistence-test-server-1-pvc-72c85e1c-8c06-45b2-ba46-e223fafd24d5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxrwxrwx &lt;span style="color:#ae81ff">4&lt;/span> root input &lt;span style="color:#ae81ff">231&lt;/span> Dec &lt;span style="color:#ae81ff">2&lt;/span> 21:53 rabbitmq-persistence-test-server-2-pvc-9157e421-7150-45ab-8432-2be935dd69ef
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 可以看到，前面三个时之前层经删除过的 PV，archiveOnDelete 参数改为 true 后，数据并不会被删除&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="reclaimpolicy-string--回收策略">reclaimPolicy: &lt;!-- raw HTML omitted --> # 回收策略&lt;/h2>
&lt;p>StorageClass 动态创建的 PV 的回收策略。&lt;/p>
&lt;ul>
&lt;li>Retain(保留) # 关联的 PVC 删除后，PV 保留，并变为 Released 状态。
&lt;ul>
&lt;li>再次创建 PVC 后，并不会绑定到被保留的 PV 上。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Delete(删除) # 关联的 PVC 删除后，PV 删除。&lt;code>默认值&lt;/code>
&lt;ul>
&lt;li>PV 中的数据将会根据参数的 archiveOnDelete 的值来决定如何处理。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="allowvolumeexpansion-boolean--存储类是否允许卷扩展">allowVolumeExpansion: &lt;!-- raw HTML omitted --> # 存储类是否允许卷扩展&lt;/h2>
&lt;h2 id="allowedtopologies-object">allowedTopologies &amp;lt;[]Object&amp;gt;&lt;/h2>
&lt;p>Restrict the node topologies where volumes can be dynamically provisioned. Each volume plugin defines its own supported topology specifications. An empty TopologySelectorTerm list means there is no topology restriction. This field is only honored by servers that enable the VolumeScheduling feature.&lt;/p>
&lt;h2 id="mountoptions-string">mountOptions &amp;lt;[]string&amp;gt;&lt;/h2>
&lt;p>Dynamically provisioned PersistentVolumes of this storage class are created with these mountOptions, e.g. [&amp;ldquo;ro&amp;rdquo;, &amp;ldquo;soft&amp;rdquo;]. Not validated - mount of the PVs will simply fail if one is invalid.&lt;/p>
&lt;h2 id="volumebindingmode-string">volumeBindingMode: &lt;!-- raw HTML omitted -->&lt;/h2>
&lt;p>VolumeBindingMode indicates how PersistentVolumeClaims should be provisioned and bound. When unset, VolumeBindingImmediate is used. This field is only honored by servers that enable the VolumeScheduling feature.&lt;/p>
&lt;h1 id="storageclass-manifest-样例">StorageClass Manifest 样例&lt;/h1>
&lt;pre>&lt;code>apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
name: managed-nfs-storage
provisioner: nfs-storage
parameters:
archiveOnDelete: &amp;quot;false&amp;quot;
&lt;/code>&lt;/pre></description></item></channel></rss>