<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – Charts</title><link>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86/Helm/Charts/</link><description>Recent content in Charts on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86/Helm/Charts/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Chart Hooks</title><link>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86/Helm/Charts/Chart-Hooks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86/Helm/Charts/Chart-Hooks/</guid><description>
&lt;h1 id="chart-hooks-概述">Chart Hooks 概述&lt;/h1>
&lt;p>参考：&lt;a href="https://helm.sh/docs/topics/charts_hooks/">&lt;strong>官方文档&lt;/strong>&lt;/a>&lt;/p>
&lt;p>Helm 提供了一种** Hook(钩子) **机制可以在一个 release 的生命周期内进行干预，比如：&lt;/p>
&lt;ol>
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>安装任何资源之前，提前先安装 ConfigMap 或者 Secret&lt;/p>
&lt;ol start="2">
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>在安装一个新的 Chart 执行，执行一个 Job 以备份数据库，然后在升级后执行第二个 Job 以还原数据。&lt;/p>
&lt;ol start="3">
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>在删除一个 Release 之前，运行一个 Job，以便在删除服务之前优雅得停止服务。&lt;/p>
&lt;ol start="4">
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>等等等&lt;/p>
&lt;p>说白了：就是让我们在操作 Chart 中的资源时，可以运行一个 Job 或某些资源(比如删除 operator 之前，运行一个 job 先删除所有 CRD 资源)。有点类似与就类似 &lt;a href="https://www.teambition.com/project/5f90e312755d8a00446050eb/app/5eba5fba6a92214d420a3219/workspaces/5f90e312c800160016ea22fb/docs/5fae78274cc5830001b9bbd6?scroll-to-block=5fae7842875a1b0329e90945">&lt;strong>crds 目录&lt;/strong>&lt;/a> 的作用一样，但并不完全一样。&lt;/p>
&lt;h2 id="hooks-种类">Hooks 种类&lt;/h2>
&lt;ol>
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>pre-install # 在渲染模板之后、创建资源之前，执行安装&lt;/p>
&lt;ol start="2">
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>post-install # 在 Chart 中所有资源创建之后(并不用等待 running)，执行安装&lt;/p>
&lt;ol start="3">
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>pre-delete # 在从 Kubernetes 删除任何资源之前，执行安装&lt;/p>
&lt;ol start="4">
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>post-delete # 删除所有 releases 资源后，执行安装&lt;/p>
&lt;ol start="5">
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>pre-upgrade # 在渲染模板之后，在任何资源更新之前，执行安装&lt;/p>
&lt;ol start="6">
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>post-upgrade # 在所有资源都升级后，执行安装&lt;/p>
&lt;ol start="7">
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>pre-rollback # Executes on a rollback request after templates are rendered, but before any resources are rolled back&lt;/p>
&lt;ol start="8">
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>post-rollback # Executes on a rollback request after all resources have been modified&lt;/p>
&lt;ol start="9">
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>test Executes when the Helm test subcommand is invoked ( view test docs)&lt;/p>
&lt;h1 id="release-的生命周期">Release 的生命周期&lt;/h1>
&lt;ol>
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>运行 helm install myapp&lt;/p>
&lt;ol start="2">
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>The Helm library install API is called&lt;/p>
&lt;ol start="3">
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>经过一些验证后，开始渲染 myapp 的模板&lt;/p>
&lt;ol start="4">
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>渲染后生成的资源加载到 Kubernetes 中&lt;/p>
&lt;ol start="5">
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>library 将 release 的数据返回给客户端&lt;/p>
&lt;ol start="6">
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>客户端退出&lt;/p>
&lt;p>等待钩子准备好意味着什么？ 这取决于挂钩中声明的资源。 如果资源是 Job 或 Pod 类型，Helm 将等待直到成功运行完成为止。 如果挂钩失败，释放将失败。 这是一项阻止操作，因此 Helm 客户端将在 Job 运行时暂停。&lt;/p>
&lt;h1 id="使用-hooks">使用 Hooks&lt;/h1>
&lt;p>Helm 会读取 manifest 文件中的 &lt;code>.annotations.&amp;quot;helm.sh/hook&amp;quot;&lt;/code>、&lt;code>annotations.&amp;quot;helm.sh/hook-weight&amp;quot;&lt;/code>、&lt;code>annotations.&amp;quot;helm.sh/hook-delete-policy&amp;quot;&lt;/code>这三个字段，来为具有这三个字段的资源执行 Hooks 功能。&lt;/p></description></item></channel></rss>