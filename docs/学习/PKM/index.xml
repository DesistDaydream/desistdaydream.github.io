<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PKM on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/%E5%AD%A6%E4%B9%A0/PKM/</link><description>Recent content in PKM on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/%E5%AD%A6%E4%B9%A0/PKM/index.xml" rel="self" type="application/rss+xml"/><item><title>PKM</title><link>https://desistdaydream.github.io/docs/%E5%AD%A6%E4%B9%A0/PKM/PKM/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/%E5%AD%A6%E4%B9%A0/PKM/PKM/</guid><description>概述 参考：
Wiki, Personal knowledge management Personal knowledge management(个人知识管理，简称 PKM) 是一个收集信息的过程
个人知识记录规范 配置文件与命令行参数 各种类型的配置文件（包括 INI、JSON、等等）、命令行参数是类似 Key/Value 的结构。在我的笔记中，记录格式一般都是这样的：
键的名称(值的类型)
--命令行参数名称(参数值类型)
对于配置文件来说，有的值的类型比较复杂（比如是一个 OBJECT 类型），可以再创建一个自定义的名称以在单独的章节下记录。
node1(STRING) node2(sub_node1) node3([]configs) node4(OBJECT) node5(map[STRING]STRING) node6(map[STRING]sub_node2) 笔记中的配置内容通常符合如下我自己定义的规范：
加粗的是 Key 括号中是 Value 的类型，Value 一般是非 Scalar 类型的节点。 若 Value 的类型是 Object，那么一般类型名称是自定义的。 由于 Object 类型的节点中，Value 也可以是一个节点，那么 Value 就有可能是由一个或多个内容组成，为了可以方便得复用这些内容，所以给它们起了一个名字。这就好像编程中的使用函数一样。 若 OBJECT 类型的字段下的字段非常多，我会在单独的标题中记录，Pod Manifest 是典型的例子。不但在单独的标题记录，而且还为这些字段进行了分组。在我们理解时，只有带有 (XXX) 这种写法的，才是 YAML 中真正的字段，而标题，通常不作为真正的字段，只是作为该字段的一个指示物，用以记录该字段下还有哪些字段。 若 Object 类型的字段比较简单，没有复杂的子字段，那么笔记中就直接用 OBJCET 这几个字符表示。 若 Value 的类型是 STRING、INT、etc. 简单类型，但是其含义很复杂，也会将该字段值的类型写作连接，在独立章节记录。 这种规范为了文档的整洁性，让相同层级的字段在一起，可以一眼看到同级内容，让 Value 与 Key 分开，将 Value 所包含的具体内容放在单独链接（i.</description></item><item><title>写作</title><link>https://desistdaydream.github.io/docs/%E5%AD%A6%E4%B9%A0/PKM/%E5%86%99%E4%BD%9C/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/%E5%AD%A6%E4%B9%A0/PKM/%E5%86%99%E4%BD%9C/</guid><description>概述 参考
GitHub 项目，ruanyf/document-style-guide中文技术文档写作规范 写作技巧 原文链接: https://mp.weixin.qq.com/s/I38Wr-CGEbaMrT-xj3QZ8A
技术写作的价值 写作并不是一件轻松的事情，特别是技术内容创作，它不仅需要兴趣来驱动，而且需要耐心，所以写作这个活动注定不适合所有人。我想无论是写作、演讲，还是录制视频，除了利益驱动无可厚非之外，大家肯定都有一个额外的共同目的：分享。
至于分享之后为了得到什么，那都不重要，比如我就是为了满足自己的虚荣心，说白了就是装 x，看着自己的文章被越来越多的人阅读，越来越多的人认识我，加我微信好友的人越来越多，自己在圈内越来越出名，虚荣心得到了极大的满足。既满足了自己的虚荣心，又造福了广大读者，有何不可呢？
除了我说的这些，写作还有没有其他价值呢？还是拿我亲身经历举例子，我的一部分文章给我带来了全新的工作机会；还有一部分文章吸引了很多社区和团队的目光，主动来和我合作；所有的这一切让我结识了更多志同道合的朋友；当然，获取到大量关注后也给我带来了更多的收入，这个不必避讳。
写作工具 工欲善其事，必先利其器。既然决定了进入“写作”这个战场，首当其冲的就是选一件称手的兵器，对于写作来说，这个兵器就是“写作工具”。选工具之前，先要明确一下自己偏好的排版格式，目前有两种主流的排版格式：
富文本：富文本格式（Rich Text Format, 一般简称为 RTF）是由微软公司开发的跨平台文档格式。最大的特点是：所见即所得，你把格式调整成什么样子，就会直接显示出什么样的效果。这一点和 Word 类似。目前微信公众号文章就是通过富文本来编辑的。 Markdown：Markdown 是一种轻量的标记语法，你可以理解为一种伪编程语言，和 HTML 有点像，只不过是专门为写作准备的极简格式。Markdown 的语法很简单，只有一些简单的符号，我们只需学习这几个简单的符号，然后插入到写作内容中，不用关心排版。 程序员大多都不喜欢使用 Word 这类富文本编辑器，因为不可控因素太多，各种形式、用法和风格，而且花样繁多，强依赖于编辑器，换个编辑器用法又不一样了。
众望所归的选择还是 Markdown，排版都是可复制的，文字的排版只是多打几个符号而已，最终产出的只是一个纯文本，非常利于传播和迁移。所以 Markdown 才是程序员的最爱。
目前市面上比较流行的 Markdown 编辑器琳琅满目，本文也无法为大家一一介绍，这里只推荐几个我认为最最最优秀的。
Obsidian Obsidian 是一个支持双向链接的笔记管理软件，但我们用它来写 Markdown 是极好的！Obsidian 最新版本也实现了即时预览功能，只需在编辑器设置中将默认的编辑模式改为即时预览即可。
可以看到其实时预览功能目前还有一些小缺陷，比如引用的样式渲染不太理想，不过后续这些问题都会被修复的，现在只是开始。
Obsidian
Typora https://www.typora.io/
Typora 最吸引人的特性就是它的即时渲染，也就是所谓的所见即所得。一般的 Markdown 编辑器都分为编辑栏和预览栏，Typora 将其合二为一，实时预览，只要你敲入相应的标记符号就立马为你转换为对应的样式，就像写 Word 一样流畅自如。这是本文在 Typora 中的排版样式：
遗憾的是 Typora 目前已经开始收费，但这是合理的，之前 Typora 发布的都是测试版，免费供大家使用，现在正式版开始取消免费，毕竟开发也需要付出，我们要尊重开发者，优质的产品值得付费。我们可以选择不用 Typora，但不必对其收费行为冷嘲热讽。
Typedown Typora 平替，微软商店可直接安装
https://apps.microsoft.com/store/detail/typedown-%E8%BD%BB%E9%87%8F%E7%BA%A7-markdown-%E7%BC%96%E8%BE%91%E5%99%A8/9P8TCW4H2HB4
VS Code VS Code 虽然是一个代码编辑器，但由于它的功能过于强大，插件过于丰富，扩展性极强，所以人们也常常用它来写作。</description></item><item><title>Obsidian</title><link>https://desistdaydream.github.io/docs/%E5%AD%A6%E4%B9%A0/PKM/Obsidian/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/%E5%AD%A6%E4%B9%A0/PKM/Obsidian/</guid><description>概述 参考：
官网 官方文档 开发者文档 Obsidian 也是基于 Chromium 的，使用 Ctrl + Shift + i 快捷键可以打开 DevTools
英文论坛
中文论坛
中文论坛与英文论坛的账户不共享
Obsidian 关联文件与配置 参考：
官方文档，Obsidian 如何存储数据 Obsidian 本身的运行时数据保存路径（我们假定设为 ${ObsidianData}）[^官方文档]
~/.config/Obsidian/ # Linux 系统 %APPDATA%/Obsidian/ # Windows 系统 ${REPO}/.obsidian/ # 特定于每个仓的配置的保存路径。在每个仓库的根目录下的 .obsidian/ 目录中。
workspaces.json # 工作区布局的配置文件。通常在每个仓库各自 .obsidian/ 目录下。 https://www.bilibili.com/video/BV1Dy4y1375P
Vault Obsidian 将本地仓库称为 vault，一个 vault 就是文件系统上的一个文件夹。这个 vault 中保存了所有记录的 文档、附件、插件、etc. 。
编辑与格式 https://help.obsidian.md/Editing+and+formatting/Basic+formatting+syntax
Obsidian 识别 Markdown 语法并渲染成文章。
Callouts https://help.obsidian.md/Editing+and+formatting/Callouts
Obsidian 扩展了 Markdown 的 Callouts(标注) 效果。</description></item><item><title>WPS</title><link>https://desistdaydream.github.io/docs/%E5%AD%A6%E4%B9%A0/PKM/WPS/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/%E5%AD%A6%E4%B9%A0/PKM/WPS/</guid><description>概述 参考 垃圾软件
安装时修改路径后提示没有权限，然后点继续就直接安装到 C 盘了，点取消才能安装到其他路径。
关联文件与配置 C:/ProgramData/kingsoft/ # 安装程序运行时下载的文件保存路径 C:/rogram Files (x86)/Kingsoft/ # 不知道干啥用的 C:/Users/DesistDaydream/AppData/Local/kingsoft/ # 不知道干啥用的 C:/Users/DesistDaydream/AppData/Roaming/kingsoft/ # 不知道干啥用的 %我的文档%/KingsoftData/ # 暂时不知道win中“我的文档”的变量是什么。 %我的文档%/WPS Cloud Files/ ./${ACCOUNT_ID}/cachedata/${RANDOM_NUM}/ # 金山文档通过 wps 方式打开后，会将文件缓存到该目录。每个文件占一个目录。</description></item></channel></rss>