<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DPDK on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/DPDK/</link><description>Recent content in DPDK on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/DPDK/index.xml" rel="self" type="application/rss+xml"/><item><title>DPDK</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/DPDK/DPDK/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/DPDK/DPDK/</guid><description>概述 参考：
GitHub 项目，DPDK/dpdk 官网 官方文档，API Wiki, Data Plane Development Kit DPDK 开发中文网 Data Plane Development Kit(数据平面开发套件，简称 DPDK) 是一个由 Linux 基金会 管理的开源软件项目。用于将 TCP 数据包的处理能力从内核空间移动到用户空间中的进程。主要是跳过了内核的 Interrupts(中断) 逻辑。
处理数据包的传统方式是 CPU 中断方式，即网卡驱动接收到数据包后通过中断通知 CPU 处理，然后由 CPU 拷贝数据并交给协议栈。在数据量大时，这种方式会产生大量 CPU 中断，导致 CPU 无法运行其他程序。
而 DPDK 则采用轮询方式实现数据包处理过程：DPDK 程序加载了网卡驱动，该驱动在收到数据包后不中断通知 CPU，而是将数据包通过零拷贝技术存入内存，这时应用层程序就可以通过 DPDK 提供的接口，直接从内存读取数据包。
这种处理方式节省了 CPU 中断时间、内存拷贝时间，并向应用层提供了简单易行且高效的数据包处理方式，使得网络应用的开发更加方便。但同时，由于需要重载网卡驱动，因此该开发包目前只能用在部分采用 Intel 网络处理芯片的网卡中。
DPDK 主要包含如下几个部分（https://doc.dpdk.org/guides/prog_guide/source_org.html#libraries）
Environmental Abstraction Layer(环境抽象层，简称 EAL) # 负责为应用间接访问底层的资源，比如内存空间、线程、设备、定时器等。如果把我们使用了 DPDK 的应用比作一个豪宅的主人的话，EAL就是这个豪宅的管家。 DPDK API Library # DPDK 的 API 库 etc. NIC Driver(网卡驱动程序) # 如名，只不过是轮询模式的驱动。 etc.</description></item><item><title>Library</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/DPDK/DPDK-Library/</link><pubDate>Fri, 18 Apr 2025 18:24:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/DPDK/DPDK-Library/</guid><description>概述 参考：
官方文档，开发者指南 - XXX 库 DPDK 的主要对外函数接口通常以 rte_(runtime environment) 作为前缀。
内存管理 Memory Pool Library etc. CPU 管理 etc. CPU 包处理 etc. Device Libraries etc. Protocol Processing Libraries etc. High-Level Libraries Graph Library etc. Utility Libraries Metrics Library Telemetry Library(遥测库) # 遥测库提供了一个接口，用于从各种 DPDK 库中检索信息。该库通过 Unix Socket 提供这些信息，接收来自客户端的请求，并回复包含所请求遥测信息的 JSON 响应。 etc. Telemetry Library 参考：
官方文档，开发者指南 - 遥测库 在 Telemetry Library 相关代码 telemetry_v2_init 进行初始化，注册了几个基本的命令（/, /info, /help）。其他注册的命令则需要到各种 Libraries 的代码中查看。可以通过搜索 init_telemetry 关键字找到各种 Library 注册到 Telemetry 的命令，比如 ethdev, mempool, etc.</description></item><item><title>Graph Library</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/DPDK/Graph-Library/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/DPDK/Graph-Library/</guid><description>概述 参考：
官方文档，Graph Library and Inbuilt Nodes https://zhuanlan.zhihu.com/p/604202266 https://zhuanlan.zhihu.com/p/613233087 DPDK 的 Graph(图) Library 将数据处理功能抽象为 Node(节点)，并将这些 Node 被 links(链接) 在一起以创建一张大型的数据处理流程图，以实现可重用的/模块化的数据处理能力。一个 Node 中可以有一个或多个流量处理 Function(功能)，一个 Node 处理完成后，交给下一个或几个其他 Node 继续处理流量数据
假如我们设计了如下一系列功能
decode flow reassemble resource control asset security record drop &amp;hellip;&amp;hellip;略 可以将这些功能分散到多个 Node 中，每个 Node 又可以规划如何如何调用这些功能
&amp;#34;node_m&amp;#34;: [ { &amp;#34;name&amp;#34;: &amp;#34;sink&amp;#34;, &amp;#34;next&amp;#34;: [ &amp;#34;flow&amp;#34; ] }, ...... 略 ], &amp;#34;node_n&amp;#34;: [ { &amp;#34;name&amp;#34;: &amp;#34;rx&amp;#34;, &amp;#34;next&amp;#34;: [ &amp;#34;decode&amp;#34; ] }, { &amp;#34;name&amp;#34;: &amp;#34;decode&amp;#34;, &amp;#34;next&amp;#34;: [ &amp;#34;traffic_filter&amp;#34; ] }, { &amp;#34;name&amp;#34;: &amp;#34;traffic_filter&amp;#34;, &amp;#34;next&amp;#34;: [ &amp;#34;capture&amp;#34;, &amp;#34;drop&amp;#34; ] }, .</description></item></channel></rss>