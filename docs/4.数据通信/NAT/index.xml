<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>NAT on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/NAT/</link><description>Recent content in NAT on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/NAT/index.xml" rel="self" type="application/rss+xml"/><item><title>NAT</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/NAT/NAT/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/NAT/NAT/</guid><description>概述 参考：
Wiki, Network Address Translation RFC 4787 RFC 5382,TCP 的 NAT 行为要求 RFC 5508,ICMP 的 NAT 行为要求 Network address translation(网络地址转换，简称 NAT) 是一种通过修改数据包的 IP 报头中的网络地址信息，将一个 IP 地址空间重新映射到另一个 IP 地址空间的方法，同时它们在流量路由设备中传输。该技术最初用作快捷方式，以避免在移动网络时重新寻址每个主机。面对 IPv4 地址耗尽，它已成为保护全球地址空间的流行和必不可少的工具。NAT 网关的一个可互联网路由的 IP 地址可用于整个专用网络。
IP 伪装是一种隐藏整个 IP 地址空间的技术，通常由私有 IP 地址组成，位于另一个 IP 地址的后面，通常是公共地址空间。必须隐藏的地址被更改为单个（公共）IP 地址作为传出 IP 数据包的“新”源地址，因此它看起来不是来自隐藏主机而是来自路由设备本身。由于这种技术的普及，以节省 IPv4 地址空间，术语 NAT 实际上已成为 IP 伪装的同义词。
由于网络地址转换修改了数据包中的 IP 地址信息，因此对 Internet 连接的质量产生严重影响，需要特别注意其实现的细节。NAT 实现在各种寻址情况下的特定行为及其对网络流量的影响方面差异很大。包含 NAT 实现的设备供应商通常不记录 NAT 行为的细节。
NAT 实现分类 NAT 按照 NAT 映射行为 和 有状态防火墙行为 可以分为多种类型</description></item><item><title>NAT 穿透是如何工作的：技术原理及企业级实践</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/NAT/NAT-%E7%A9%BF%E9%80%8F%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%AE%9E%E8%B7%B5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/NAT/NAT-%E7%A9%BF%E9%80%8F%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%AE%9E%E8%B7%B5/</guid><description>译者序 本文翻译自 2020 年的一篇英文博客： How NAT traversal works 。
设想这样一个问题：在北京和上海各有一台 ==局域网的机器== （例如一台是家里的台式机，一 台是连接到星巴克 WiFi 的笔记本），二者都是私网 IP 地址，但可以访问公网， ==如何让这两台机器通信呢？==
既然二者都能访问公网，那最简单的方式当然是在公网上架设一个中继服务器： 两台机器分别连接到中继服务，后者完成双向转发。这种方式显然有很大的性能开销，而 且中继服务器很容易成为瓶颈。
有没有办法不用中继，让 ==两台机器直接通信== 呢？
如果有一定的网络和协议基础，就会明白这事儿是可能的。Tailscale 的这篇 ==史诗级长文== 由浅入深地展示了这种“可能”，如果完全实现本文所 介绍的技术，你将得到一个企业级的 NAT/防火墙穿透工具。 此外，如作者所说， ==去中心化软件== 领域中的许多有趣想法，简化之后其实都变成了 ==跨过公网（互联网）实现端到端直连== 这一问题，因此本文的意义并不仅限于 NAT 穿透本身。
由于译者水平有限，本文不免存在遗漏或错误之处。如有疑问，请查阅原文。
以下是译文。
在前一篇文章 How Tailscale Works 中， 我们已经用较长篇幅介绍了 Tailscale 是如何工作的。但其中并没有详细描述我们是 ==如何穿透 NAT 设备，从而实现终端设备直连的== —— 不管这些终端之间 有什么设备（防火墙、NAT 等），以及有多少设备。本文试图补足这一内容。
1 引言 1.1 背景：IPv4 地址短缺，引入 NAT 全球 IPv4 地址早已不够用，因此人们发明了 NAT（网络地址转换）来缓解这个问题。
简单来说，大部分机器都使用 ==私有 IP 地址== ，如果它们需要访问公网服务，那么，
出向流量：需要经过一台 NAT 设备，它会对流量进行 SNAT，将私有 srcIP+Port 转 换成 NAT 设备的公网 IP+Port（这样应答包才能回来），然后再将包发出去； 应答流量（入向）：到达 NAT 设备后进行相反的转换，然后再转发给客户端。 整个过程对双方透明。</description></item></channel></rss>