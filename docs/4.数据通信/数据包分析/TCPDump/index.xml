<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – TCPDump</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/TCPDump/</link><description>Recent content in TCPDump on 断念梦</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/TCPDump/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: TCPDump</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/TCPDump/TCPDump/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/TCPDump/TCPDump/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.tcpdump.org/">官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.tcpdump.org/manpages/tcpdump.1.html">Manual(手册)，tcpdump(1)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.tcpdump.org/manpages/pcap-filter.7.html">Manual(手册)，PCAP-FILTER&lt;/a>，主要描述过滤表达式的语法&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Tcpdump">Wiki，tcpdump&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.middlewareinventory.com/blog/tcpdump-capture-http-get-post-requests-apache-weblogic-websphere/">https://www.middlewareinventory.com/blog/tcpdump-capture-http-get-post-requests-apache-weblogic-websphere/&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>TCPDump 是一个在命令行界面下的 Packet Analyzer(数据包分析程序)。tcpdump 适用于大多数&lt;a href="https://en.wikipedia.org/wiki/Unix-like">类 Unix&lt;/a> &lt;a href="https://en.wikipedia.org/wiki/Operating_system">操作系统&lt;/a>，在这些系统中，tcpdump 使用 &lt;a href="https://en.wikipedia.org/wiki/Libpcap">libpcap&lt;/a> 库来捕获数据包。对于 Windows 操作系统来说，tcpdump 使用的 pcap API 是 &lt;a href="https://en.wikipedia.org/wiki/WinPcap">WinPcap&lt;/a>(即 libpcap 的 Windows 版本)。&lt;/p>
&lt;p>tcpdump 最初由&lt;a href="https://en.wikipedia.org/wiki/Van_Jacobson">Van Jacobson&lt;/a>、&lt;a href="https://en.wikipedia.org/wiki/Sally_Floyd">Sally Floyd&lt;/a>、&lt;a href="https://en.wikipedia.org/wiki/Vern_Paxson">Vern Paxson&lt;/a>和&lt;a href="https://en.wikipedia.org/w/index.php?title=Steven_McCanne&amp;amp;action=edit&amp;amp;redlink=1">Steven McCanne&lt;/a>于 1988 年编写，他们当时在&lt;a href="https://en.wikipedia.org/wiki/Lawrence_Berkeley_Laboratory">劳伦斯伯克利实验室&lt;/a>网络研究小组工作。到 1990 年代后期，有许多版本的 tcpdump 作为各种操作系统的一部分分发，以及许多没有很好协调的补丁。 &lt;a href="https://en.wikipedia.org/w/index.php?title=Michael_Richardson_(mcr)&amp;amp;action=edit&amp;amp;redlink=1">Michael Richardson (mcr)&lt;/a>和&lt;a href="https://en.wikipedia.org/w/index.php?title=Bill_Fenner&amp;amp;action=edit&amp;amp;redlink=1">Bill Fenner&lt;/a>于 1999 年创建了&lt;a href="https://www.tcpdump.org/">www.tcpdump.org&lt;/a>。&lt;/p>
&lt;p>说明：Dump 有 &lt;strong>转出，倾卸；转储；内容全部打印&lt;/strong> 的含义，在官方文档中，通过 TCPDump 程序输出的数据包，通常称为 dump line，转储的行。说白了就是程序抓到的包，每个包都是一行~~~~~&lt;/p>
&lt;h1 id="syntax语法">Syntax(语法)&lt;/h1>
&lt;p>&lt;strong>tcpdump [OPTIONS] [Filter-Expression]&lt;/strong>&lt;/p>
&lt;h2 id="options">OPTIONS&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>-A&lt;/strong> # 以 ASCII 打印每个数据包 (减去其链接级别标头)。方便捕捉网页。&lt;/li>
&lt;li>&lt;strong>-c &amp;lt;INT&amp;gt;&lt;/strong> # 指定程序将会捕获的数据包数量。&lt;/li>
&lt;li>&lt;strong>-D, &amp;ndash;list-interfaces&lt;/strong> # 列出可用于抓包的接口。将会列出接口的数值编号和接口名，它们都可以用于&amp;quot;-i&amp;quot;后&lt;/li>
&lt;li>&lt;strong>-e&lt;/strong> # 在每条 dump 出来的行上显示二层头信息。这个选项可以输出 以太网 和 IEEE802.11 等协议的 MAC 层信息。
&lt;ul>
&lt;li>通常用来抓取 VLAN 的 Tag。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>-F &amp;lt;FEIL&amp;gt;&lt;/strong> # 指定一个包含 Filter-Expression 语法的文件。程序将会使用该文件的内容作为过滤表达式，并忽略命令行给出的过滤表达式。&lt;/li>
&lt;li>&lt;strong>-i, &amp;ndash;interface &amp;lt;DEV&amp;gt;&lt;/strong> # 抓取指定网卡 DEV 的包，&lt;code>默认值：any&lt;/code>，即抓取所有设备
&lt;ul>
&lt;li>注意：在有 Bond 的服务器上，不要抓所有设备的包，否则使用 Wireshark 读取抓包文件时，会显示出很多乱序和重传，这是因为 Bond 设备和 Bond Salve 设备的包是相同的，但是咱都抓了。相同的包，时间不同，Wireshark 就识别成乱序了。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>-l # 使用标准输出列的缓冲区；&lt;/li>
&lt;li>&lt;strong>-n&lt;/strong> # 不把主机的网络地址转换成 IP。可以多次指定，-nn 表示不转换 IP 地址和端口号的名称&lt;/li>
&lt;li>-O # 不将数据包编码最佳化&lt;/li>
&lt;li>-p # 不让网络界面进入混杂模式&lt;/li>
&lt;li>-q # 快速输出，仅列出少数的传输协议信息&lt;/li>
&lt;li>&lt;strong>-r &amp;lt;FILE&amp;gt;&lt;/strong> # 从 FILE 读取数据包。FILE 是通过 -w 选项保存的文件，或者任何使用 pcap API 的应用程序生成的文件。&lt;/li>
&lt;li>&lt;strong>-s &amp;lt;数据包大小&amp;gt;&lt;/strong> # 设置每个数据包的大小；&lt;/li>
&lt;li>&lt;strong>-S, &amp;ndash;absolute-tcp-sequence-numbers&lt;/strong> # 输出 TCP sequence 号的绝对值，而不是相对值&lt;/li>
&lt;li>&lt;strong>-tt&lt;/strong> # 显示每个抓到的包的时间戳(自 1970 年 1 月 1 日 00:00:00 以来)&lt;/li>
&lt;li>&lt;strong>-tttt&lt;/strong> # 显示每个抓到的包的绝对时间&lt;/li>
&lt;li>&lt;strong>-ttttt&lt;/strong> # 显示每个抓到的包的相对时间，单位微妙，第一个包是 &lt;code>00:00:00.000000&lt;/code>，&lt;/li>
&lt;li>&lt;strong>-T &amp;lt;数据包类型&amp;gt;&lt;/strong> # 强制将表达方式所指定的数据包转译成设置的数据包类型；&lt;/li>
&lt;li>&lt;strong>-v[vv]&lt;/strong> # 从一个 v 开始，每多一个 v 则抓出的包的信息则做出一部分最多 3 个 v，包信息最多&lt;/li>
&lt;li>&lt;strong>-w &amp;lt;/Path/TO/FILE&amp;gt;&lt;/strong> # 把数据包数据写入指定的文件&lt;/li>
&lt;/ul>
&lt;h2 id="filter-expression过滤表达式">Filter-Expression(过滤表达式)&lt;/h2>
&lt;p>&lt;strong>Filter Expression(过滤表达式)&lt;/strong> 用于过滤抓取到的数据包。可以让 tcpdump 程序只输出通过表达式匹配到的数据包。&lt;/p>
&lt;p>过滤表达式由一个或多个 &lt;strong>Primitives(原语)&lt;/strong> 组成。原语通常是一个具有一个或多个 &lt;strong>Qualifiers(限定词)&lt;/strong> 的 ID。ID 就是 端口号、主机名、IP 地址 等等&lt;/p>
&lt;h3 id="qualifiers限定词">Qualifiers(限定词)&lt;/h3>
&lt;p>一共有三种类型的限定词：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>TYPE&lt;/strong> # 类型限定词。指定 ID 的类型。默认值：&lt;code>host&lt;/code>
&lt;ul>
&lt;li>&lt;strong>host&lt;/strong> # 匹配主机名称或 IP 地址&lt;/li>
&lt;li>&lt;strong>net&lt;/strong> # 匹配网段，CIDR 模式。比如：1.2.3.0/24&lt;/li>
&lt;li>&lt;strong>port&lt;/strong> # 匹配端口号&lt;/li>
&lt;li>&lt;strong>portrange&lt;/strong> # 匹配端口号的范围。两个端口号中间以 &lt;code>-&lt;/code> 连接&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>DIR&lt;/strong> # direction(方向) 限定词。指定 ID 的传输方向。默认值：&lt;code>src or dst&lt;/code>
&lt;ul>
&lt;li>&lt;strong>src&lt;/strong>&lt;/li>
&lt;li>&lt;strong>dst&lt;/strong>&lt;/li>
&lt;li>&lt;strong>&amp;hellip;&amp;hellip; 等等&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>PROTO&lt;/strong> # 协议限定词。指定要匹配的协议
&lt;ul>
&lt;li>&lt;strong>icmp&lt;/strong>&lt;/li>
&lt;li>&lt;strong>ip&lt;/strong>&lt;/li>
&lt;li>&lt;strong>ip6&lt;/strong>&lt;/li>
&lt;li>&lt;strong>arp&lt;/strong>&lt;/li>
&lt;li>&lt;strong>tcp&lt;/strong>&lt;/li>
&lt;li>&lt;strong>udp&lt;/strong>&lt;/li>
&lt;li>&lt;strong>&amp;hellip;&amp;hellip;等等&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>不同类型的限定符之间可以互相组合&lt;/strong>，以实现更复杂的描述，比如：&lt;/p>
&lt;ul>
&lt;li>类型匹配和方向匹配组合
&lt;ul>
&lt;li>src host 1.1.1.1 # 匹配源主机为 1.1.1.1 的数据包&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>类型匹配、方向匹配、协议匹配全部组合在一起
&lt;ul>
&lt;li>udp dst portrange 100-400 # 匹配 目的端口范围在 100-400 之间的 UDP 协议的数据包&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>相同类型的限定符之间也可以互相组合&lt;/strong>，但是需要使用逻辑表达式 &lt;strong>and、or、not&lt;/strong>(或者用符号表示 &lt;code>&amp;amp;&amp;amp;&lt;/code>、&lt;code>||&lt;/code>、&lt;code>!&lt;/code>) 来连接两个限定符，比如：&lt;/p>
&lt;ul>
&lt;li>icmp or tcp # 匹配 icmp 或 tcp 的数据包&lt;/li>
&lt;li>ip host 1.1.1.1 and ! 2.2.2.2 # 匹配 1.1.1.1 主机，但不包括 2.2.2.2 主机之间的通信&lt;/li>
&lt;li>src and dst port 1111 # 匹配 源端口 和 目的端口 都是 1111 的数据包&lt;/li>
&lt;li>tcp src or dst portrange 1111-2222 # 匹配 源 或者 目的 任意一个方向的端口范围在 1111-2222 之间的 TCP 协议的数据包&lt;/li>
&lt;li>注意：为了节省输入，可以&lt;strong>省略相同的限定符&lt;/strong>，下面两个表达式的作用完全相同：
&lt;ul>
&lt;li>tcp dst port 21 or 22 or 23&lt;/li>
&lt;li>tcp dst port 21 or tcp dst port 22 or tcp dst port 33&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>icmp or tcp dst port 23 and host 1.1.1.1 # 匹配 icmp 或 tcp，目的端口为 23 且主机为 1.1.1.1 的数据包&lt;/li>
&lt;/ul>
&lt;p>对于比较复杂的过滤器表达式，为了逻辑的清晰，可以使用括号。不过默认情况下，tcpdump 把 () 当做特殊的字符，所以必须使用单引号 &amp;rsquo; 来消除歧义：&lt;/p>
&lt;ul>
&lt;li>tcpdump -nvv -c 20 &amp;lsquo;src 10.0.2.4 and (dat port 3389 or 22)&amp;rsquo;&lt;/li>
&lt;/ul>
&lt;h4 id="type-限定词">TYPE 限定词&lt;/h4>
&lt;h4 id="dir-限定词">DIR 限定词&lt;/h4>
&lt;h4 id="proto-限定词">PROTO 限定词&lt;/h4>
&lt;p>各种协议的数据包，都有其各自的包头，tcpdump 可以根据包头中的字段的值进行过滤，比如只抓 TCP 标志为 SYN 的包，只抓 HTTP 的包，等等。&lt;/p>
&lt;p>协议限定词扩展语法如下：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>PROTO[EXPR:SIZE]&lt;/strong>
&lt;ul>
&lt;li>PROTO # 协议名&lt;/li>
&lt;li>EXPR # 表达式&lt;/li>
&lt;li>SIZE #&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>简单示例：&lt;/p>
&lt;ul>
&lt;li>匹配 TCP 头中标志为 tcp-syn 的包
&lt;ul>
&lt;li>&lt;strong>&amp;rsquo;tcp[tcpflags] &amp;amp; tcp-syn != 0&amp;rsquo;&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>匹配 TCP 头中标志为 SYN 或 FIN 的包。也就是说一个 TCP 会话的开始和结束的包。
&lt;ul>
&lt;li>&lt;strong>tcp[tcpflags] &amp;amp; (tcp-syn|tcp-fin) != 0&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="应用示例">应用示例&lt;/h1>
&lt;p>从 bond0 网卡抓取 源地址为 10.10.10.10 且 端口号为 18999 的 UDP 的包，每个包大小为 500&lt;/p>
&lt;ul>
&lt;li>tcpdump -i bond0 udp port 18999 and src host 10.10.10.10 -s 500 0nvvvSe -T snmp&lt;/li>
&lt;/ul>
&lt;p>抓取 eth9 网卡，到 111.30.199.159 的包，记录到/tmp/srcIP 中&lt;/p>
&lt;ul>
&lt;li>tcpdump -i eth9 host 111.30.199.159 -Avns 0 -w /tmp/srcIP&lt;/li>
&lt;li>tcpdump -i eth0 -tnn dst port 80 -c 1000 | awk -F”.” &amp;lsquo;{print $1&amp;quot;.&amp;quot;$2&amp;quot;.&amp;quot;$3&amp;quot;.&amp;quot;$4&amp;quot;.&amp;quot;}&amp;rsquo; | sort |uniq -c | sort -nr | head-5&lt;/li>
&lt;/ul>
&lt;p>获取 vnet1 网卡的 icmp 的包，i.e.抓 ping 命令的包&lt;/p>
&lt;ul>
&lt;li>tcpdump icmp -i vnet1&lt;/li>
&lt;/ul>
&lt;p>在 eth0 上抓取目的端口是 53 的 udp 包&lt;/p>
&lt;ul>
&lt;li>tcpdump -i eth0 udp dst port 53&lt;/li>
&lt;/ul>
&lt;p>抓取多个 host 的数据包&lt;/p>
&lt;ul>
&lt;li>tcpdump -i any host 172.19.42.202 or 172.19.42.201 -nn&lt;/li>
&lt;/ul>
&lt;p>从 192.168 网段到 10 或者 172.16 网段的数据报&lt;/p>
&lt;ul>
&lt;li>tcpdump -nvX src net 192.168.0.0/16 and dat net 10.0.0.0/8 or 172.16.0.0/16&lt;/li>
&lt;/ul>
&lt;p>抓取 LACP 包，是否有用待验证？&lt;/p>
&lt;ul>
&lt;li>&lt;code>tcpdump -i bond1 ether host 01:80:c2:00:00:02&lt;/code>&lt;/li>
&lt;li>注意：ether 只能在某些设备上运行，需要指定具体网络设备，不能用 any&lt;/li>
&lt;/ul>
&lt;p>使用 tcpdump 截取数据报文的时候，默认会打印到屏幕的默认输出，你会看到按照顺序和格式，很多的数据一行行快速闪过，根本来不及看清楚所有的内容。不过，tcpdump 提供了把截取的数据保存到文件的功能，以便后面使用其他图形工具（比如 wireshark，Snort）来分析。&lt;/p>
&lt;p>-r 可以读取文件里的数据报文，显示到屏幕上。&lt;/p>
&lt;p>tcpdump -nXr capture_file.pcap host web30&lt;/p>
&lt;p>NOTE：保存到文件的数据不是屏幕上看到的文件信息，而是包含了额外信息的固定格式 pcap，需要特殊的软件来查看，使用 vim 或者 cat 命令会出现乱码。&lt;/p>
&lt;p>从 Mars 或者 Pluto 发出的数据报，并且目的端口不是 22&lt;/p>
&lt;p>tcpdump -vv src mars or pluto and not dat port 22&lt;/p>
&lt;h2 id="高级过滤">高级过滤&lt;/h2>
&lt;p>匹配 TCP 标志为 RST 的所有包。&lt;/p>
&lt;ul>
&lt;li>意思就是数据包的包头中，tcpflags 字段的 tcp-rst 的值为 1&lt;/li>
&lt;li>&lt;code>tcpdump 'tcp[tcpflags] &amp;amp; (tcp-rst) != 0' -nn&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="抓-http-的包">抓 HTTP 的包&lt;/h2>
&lt;p>&lt;strong>抓取 HTTP 的包&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;code>tcpdump -AnnSs 70 'tcp[20:4]=0x48545450'&lt;/code>
&lt;ul>
&lt;li>&lt;code>tcp[20:4]&lt;/code> # 由 &lt;a href="https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/3_4.TCP_IP/TCP/TCP.md#TCP%20Segment%20%E7%BB%93%E6%9E%84">TCP Segment 结构&lt;/a> 可知，TCP 的首部长度为 20 字节，那么 TCP 首部后面的 4 字节通常用来标识&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>或者&lt;/li>
&lt;li>&lt;code>tcpdump -AnnSs 70 'tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;gt;&amp;gt; 2):4] = 0x48545450'&lt;/code>
&lt;ul>
&lt;li>&lt;code>tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;gt;&amp;gt; 2):4]&lt;/code> # 首先确定我们感兴趣的字节的位置 (在 TCP 头之后)，然后选择我们希望匹配的 4 个字节。TODO: 还没搞明白这个描述&lt;/li>
&lt;li>&lt;code>0x47455420&lt;/code> # 0x 表示 16 进制，47455420 是 ASCII 中以 16 进制表示的 &lt;code>GET&lt;/code> 这四个字符(G、E、T、空格)。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Notes: 其中 -s 选项的值设为 70 是为了避免输出过多数据信息干扰。70 长度一般足够看到请求的 PATH，如果 PATH 太长，可以适当提高 -s 的值。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>抓取 HTTP 的 GET 请求的包&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;code>tcpdump -AnnSs 0 tcp[20:2]=0x4745 or tcp[20:2]=0x4854&lt;/code>
&lt;ul>
&lt;li>这里是用了 TCP 首部后两位进行匹配，即 GE 和 HT&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>或者&lt;/li>
&lt;li>&lt;code>tcpdump -AnnSs 0 'tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;gt;&amp;gt; 2):4] = 0x47455420'&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>抓取 HTTP 的 GET 或 POST 请求的包&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;code>tcpdump -nnAs 0 'tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;gt;&amp;gt; 2):4] = 0x47455420 or tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;gt;&amp;gt; 2):4] = 0x504F5354'&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>为什么要用 -Xe 选项？&lt;/p>
&lt;ul>
&lt;li>&lt;code>tcpdump -XvvennSs 0 tcp[20:2]=0x4745 or tcp[20:2]=0x4854&lt;/code>&lt;/li>
&lt;/ul>
&lt;h1 id="tcpdump-输出内容详解">tcpdump 输出内容详解&lt;/h1>
&lt;p>截取数据只是第一步，第二步就是理解这些数据，下面就解释一下 tcpdump 命令输出各部分的意义。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>21:27:06.995846 IP &lt;span style="color:#f92672">(&lt;/span>tos 0x0, ttl 64, id 45646, offset 0, flags &lt;span style="color:#f92672">[&lt;/span>DF&lt;span style="color:#f92672">]&lt;/span>, proto TCP &lt;span style="color:#f92672">(&lt;/span>6&lt;span style="color:#f92672">)&lt;/span>, length 64&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 192.168.1.106.56166 &amp;gt; 124.192.132.54.80: Flags &lt;span style="color:#f92672">[&lt;/span>S&lt;span style="color:#f92672">]&lt;/span>, cksum 0xa730 &lt;span style="color:#f92672">(&lt;/span>correct&lt;span style="color:#f92672">)&lt;/span>, seq 992042666, win 65535, options &lt;span style="color:#f92672">[&lt;/span>mss 1460,nop,wscale 4,nop,nop,TS val &lt;span style="color:#ae81ff">663433143&lt;/span> ecr 0,sackOK,eol&lt;span style="color:#f92672">]&lt;/span>, length &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>21:27:07.030487 IP &lt;span style="color:#f92672">(&lt;/span>tos 0x0, ttl 51, id 0, offset 0, flags &lt;span style="color:#f92672">[&lt;/span>DF&lt;span style="color:#f92672">]&lt;/span>, proto TCP &lt;span style="color:#f92672">(&lt;/span>6&lt;span style="color:#f92672">)&lt;/span>, length 44&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 124.192.132.54.80 &amp;gt; 192.168.1.106.56166: Flags &lt;span style="color:#f92672">[&lt;/span>S.&lt;span style="color:#f92672">]&lt;/span>, cksum 0xedc0 &lt;span style="color:#f92672">(&lt;/span>correct&lt;span style="color:#f92672">)&lt;/span>, seq 2147006684, ack 992042667, win 14600, options &lt;span style="color:#f92672">[&lt;/span>mss 1440&lt;span style="color:#f92672">]&lt;/span>, length &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>21:27:07.030527 IP &lt;span style="color:#f92672">(&lt;/span>tos 0x0, ttl 64, id 59119, offset 0, flags &lt;span style="color:#f92672">[&lt;/span>DF&lt;span style="color:#f92672">]&lt;/span>, proto TCP &lt;span style="color:#f92672">(&lt;/span>6&lt;span style="color:#f92672">)&lt;/span>, length 40&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 192.168.1.106.56166 &amp;gt; 124.192.132.54.80: Flags &lt;span style="color:#f92672">[&lt;/span>.&lt;span style="color:#f92672">]&lt;/span>, cksum 0x3e72 &lt;span style="color:#f92672">(&lt;/span>correct&lt;span style="color:#f92672">)&lt;/span>, ack 2147006685, win 65535, length &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>最基本也是最重要的信息就是数据报的源地址/端口和目的地址/端口，上面的例子第一条数据报中，源地址 ip 是 192.168.1.106，源端口是 56166，目的地址是 124.192.132.54，目的端口是 80。 &amp;gt; 符号代表数据的方向。&lt;/p>
&lt;p>此外，上面的三条数据还是 tcp 协议的三次握手过程，第一条就是 SYN 报文，这个可以通过 Flags [S] 看出。下面是常见的 TCP 报文的 Flags:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>[S]&lt;/strong> # SYN（开始连接）&lt;/li>
&lt;li>&lt;strong>[.]&lt;/strong> # 没有 Flag&lt;/li>
&lt;li>&lt;strong>[P]&lt;/strong> # PSH（推送数据）&lt;/li>
&lt;li>&lt;strong>[F]&lt;/strong> # FIN （结束连接）&lt;/li>
&lt;li>&lt;strong>[R]&lt;/strong> # RST（重置连接）&lt;/li>
&lt;/ul>
&lt;p>而第二条数据的 [S.] 表示 SYN-ACK，就是 SYN 报文的应答报文。&lt;/p>
&lt;p>tcpdump 很详细的 &lt;a href="http://blog.chinaunix.net/uid-11242066-id-4084382.html">http://blog.chinaunix.net/uid-11242066-id-4084382.html&lt;/a>&lt;/p>
&lt;p>&lt;a href="http://www.cnblogs.com/ggjucheng/archive/2012/01/14/2322659.html">http://www.cnblogs.com/ggjucheng/archive/2012/01/14/2322659.html&lt;/a> Linux tcpdump 命令详解&lt;/p>
&lt;p>Tcpdump usage examples（推荐） &lt;a href="http://www.rationallyparanoid.com/articles/tcpdump.html">http://www.rationallyparanoid.com/articles/tcpdump.html&lt;/a>&lt;/p>
&lt;p>使用 TCPDUMP 抓取 HTTP 状态头信息 &lt;a href="http://blog.sina.com.cn/s/blog_7475811f0101f6j5.html">http://blog.sina.com.cn/s/blog_7475811f0101f6j5.html&lt;/a>&lt;/p></description></item><item><title>Docs: TCPDump Capture HTTP GET/POST requests</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/TCPDump/TCPDump-Capture-HTTP-GET_POST-requests/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/TCPDump/TCPDump-Capture-HTTP-GET_POST-requests/</guid><description>
&lt;p>原文链接：&lt;a href="https://www.middlewareinventory.com/blog/tcpdump-capture-http-get-post-requests-apache-weblogic-websphere/">https://www.middlewareinventory.com/blog/tcpdump-capture-http-get-post-requests-apache-weblogic-websphere/&lt;/a>&lt;/p>
&lt;h1 id="概述">概述&lt;/h1>
&lt;p>TCPDUMP is a &lt;a href="https://en.wikipedia.org/wiki/Swiss_Army_knife">swiss army knife&lt;/a> for all the administrators and developers when it comes to troubleshooting. This post is written for the people who work in middleware technologies. Web servers such as Apache, NGINX, Oracle HTTP, IHS web servers and  application servers such as Weblogic, Websphere, Tomcat, Jboss
Consider yourself in any of the following scenarios&lt;/p>
&lt;ol>
&lt;li>You want to monitor the&lt;strong>traffic inflow and outflow&lt;/strong>of Apache httpd server on any specific port like port 80 or 443&lt;/li>
&lt;li>You have to&lt;strong>track the HTTP calls between web and application servers&lt;/strong> (or) to make sure that proxy is working fine.&lt;/li>
&lt;li>When you want to examine the presence and values of  specific headers like&lt;/li>
&lt;/ol>
&lt;p>X-Forwarded-For
X-Forwarded-Proto
X-Forwarded-Port
X-Forwarded-Host
X-Frame-Options
X-Forwarded-By
ETag&lt;/p>
&lt;ol>
&lt;li>When you want to review the &lt;strong>Cookies&lt;/strong> being placed in the request and response&lt;/li>
&lt;li>when you want to review the data which is being posted to the server in the POST method like&lt;/li>
&lt;/ol>
&lt;p>Content-type: multipart/form-data;  
Content-Type: application/x-www-form-urlencoded
Content-Type: application/json
Content-Type: text/plain&lt;/p>
&lt;ol>
&lt;li>To track the incoming web service call, made using SOAP UI (or) any web service client.&lt;/li>
&lt;/ol>
&lt;p>Table of Contents
&lt;a href="">&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.middlewareinventory.com/blog/tcpdump-capture-http-get-post-requests-apache-weblogic-websphere/#So_How_do_you_do_that">So, How do you do that?&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.middlewareinventory.com/blog/tcpdump-capture-http-get-post-requests-apache-weblogic-websphere/#The_Objective">The Objective&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.middlewareinventory.com/blog/tcpdump-capture-http-get-post-requests-apache-weblogic-websphere/#Before_we_proceed">Before we proceed&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.middlewareinventory.com/blog/tcpdump-capture-http-get-post-requests-apache-weblogic-websphere/#TCPDUMP_Examples">TCPDUMP Examples&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://www.middlewareinventory.com/blog/tcpdump-capture-http-get-post-requests-apache-weblogic-websphere/#How_to_capture_All_incoming_HTTP_GET_traffic_or_requests">How to capture All incoming  HTTP GET  traffic (or) requests&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.middlewareinventory.com/blog/tcpdump-capture-http-get-post-requests-apache-weblogic-websphere/#How_to_capture_All_incoming_HTTP_POST_requests">How to capture All incoming HTTP POST requests&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.middlewareinventory.com/blog/tcpdump-capture-http-get-post-requests-apache-weblogic-websphere/#How_to_capture_only_HTTP_GET_requests_Incoming_to_port_80_ApacheNGINX">How to capture only HTTP GET requests Incoming to port 80 ( Apache/NGINX)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.middlewareinventory.com/blog/tcpdump-capture-http-get-post-requests-apache-weblogic-websphere/#How_to_capture_only_HTTP_POST_requests_Incoming_to_port_80_ApacheNGINX">How to capture only HTTP POST requests Incoming to port 80 ( Apache/NGINX)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.middlewareinventory.com/blog/tcpdump-capture-http-get-post-requests-apache-weblogic-websphere/#How_to_capture_only_HTTP_GET_calls_Incoming_to_port_443_ApacheNGINX">How to capture only HTTP GET calls Incoming to port 443 ( Apache/NGINX)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.middlewareinventory.com/blog/tcpdump-capture-http-get-post-requests-apache-weblogic-websphere/#How_to_capture_only_HTTP_POST_calls_Incoming_to_port_443_ApacheNGINX">How to capture only HTTP POST calls Incoming to port 443 ( Apache/NGINX)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.middlewareinventory.com/blog/tcpdump-capture-http-get-post-requests-apache-weblogic-websphere/#How_to_capture_both_HTTP_GET_or_POST_Incoming_calls_to_port_80_or_443_ApacheNGINX_Originating_from_192168101_Host">How to capture both HTTP GET (or) POST  Incoming calls to port 80 (or) 443 ( Apache/NGINX) Originating from 192.168.10.1 Host&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.middlewareinventory.com/blog/tcpdump-capture-http-get-post-requests-apache-weblogic-websphere/#How_to_capture_a_Complete_HTTP_Transmission_incoming_and_outgoing_Including_both_HTTP_Request_and_Response_Associated_with_a_Single_Client_along_with_HTML_page_data_GET_POST_on_port_80">How to capture a Complete HTTP Transmission, incoming and outgoing Including both HTTP Request and Response.  Associated with a Single Client  along with HTML page data ( GET &amp;amp; POST ) on port 80&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.middlewareinventory.com/blog/tcpdump-capture-http-get-post-requests-apache-weblogic-websphere/#How_to_monitor_all_the_incoming_HTTP_Request_URLs_POST_or_GET">How to monitor all the incoming HTTP Request URL’s (POST or GET)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.middlewareinventory.com/blog/tcpdump-capture-http-get-post-requests-apache-weblogic-websphere/#How_to_capture_HTTP_Passwords_in_POST_Requests">How to  capture HTTP Passwords in POST Requests&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.middlewareinventory.com/blog/tcpdump-capture-http-get-post-requests-apache-weblogic-websphere/#How_to_capture_the_Cookies_from_Server_and_from_Client_Request_Response">How to capture the Cookies from Server and from Client ( Request &amp;amp; Response)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://www.middlewareinventory.com/blog/tcpdump-capture-http-get-post-requests-apache-weblogic-websphere/#How_to_Filter_HTTP_User_Agents">How to Filter HTTP User Agents&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.middlewareinventory.com/blog/tcpdump-capture-http-get-post-requests-apache-weblogic-websphere/#How_to_capture_the_HTTP_packets_being_transmitted_between_Webserver_and_Application_server_both_GET_POST">How to capture the HTTP packets being transmitted between Webserver and Application server both GET &amp;amp; POST?&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.middlewareinventory.com/blog/tcpdump-capture-http-get-post-requests-apache-weblogic-websphere/#Application_server_Oriented_examples">Application server Oriented examples&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://www.middlewareinventory.com/blog/tcpdump-capture-http-get-post-requests-apache-weblogic-websphere/#How_to_capture_a_Complete_HTTP_Transmission_incoming_and_outgoing_Including_both_HTTP_Request_and_Response_Associated_with_a_Single_Client_along_with_HTML_data_GET_POST_on_port_18001">How to capture a Complete HTTP Transmission, incoming and outgoing Including both HTTP Request and Response.  Associated with a Single Client along with HTML data ( GET &amp;amp; POST ) on port 18001&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.middlewareinventory.com/blog/tcpdump-capture-http-get-post-requests-apache-weblogic-websphere/#SOAP_Webservice_Capture">SOAP Webservice Capture&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.middlewareinventory.com/blog/tcpdump-capture-http-get-post-requests-apache-weblogic-websphere/#How_to_record_a_TCPDUMP_Session_or_Capture_packets_with_tcpdump">How to record a TCPDUMP Session (or) Capture packets with tcpdump&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.middlewareinventory.com/blog/tcpdump-capture-http-get-post-requests-apache-weblogic-websphere/#How_to_read_the_TCPDUMP_recorded_session_or_packet_capture_pcap_file">How to read the TCPDUMP recorded session (or) packet capture – pcap file&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="so-how-do-you-do-that">So, How do you do that?&lt;/h2>
&lt;p>&lt;strong>The answer is TCPDUMP.&lt;/strong> TCPDUMP is mostly misconceived as a network engineer’s subject and it displays some incomprehensible binary data that none of us could understand.
With proper tools and little knowledge about protocols, anyone can easily make use of it and feel the magic lies within.&lt;/p>
&lt;blockquote>
&lt;p>Be informed that the industry standards have changed for good and the &lt;strong>HTTPS is becoming a basic requirement&lt;/strong> for all webservices and websites. So it might make your troubleshooting little hard, since the packets are encrypted.  &lt;strong>There is a solution to decrypt HTTPS traffic&lt;/strong>
Refer my another article on &lt;a href="https://www.middlewareinventory.com/blog/how-to-decrypt-https-traffic/">How to decrypt HTTPS traffic to see headers and request/response content&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h2 id="the-objective">The Objective&lt;/h2>
&lt;p>In this post we are going to see how middleware administrators (or) developers could use tcpdump to accomplish their troubleshooting drama.
We are going to discuss the following items , practically as much as possible.&lt;/p>
&lt;ul>
&lt;li>How to monitor/track HTTP and HTTPS calls with tcpdump in weblogic,websphere,tomcat application servers and web servers like Apache &lt;strong>which runs on LINUX platform&lt;/strong>&lt;/li>
&lt;li>How to tamper and read the incoming and outgoing HTTP traffic to our applications deployed in weblogic&lt;/li>
&lt;li>How to dig into the incoming (or) outgoing HTTP traffic and take a look at the concrete elements of HTTP protocol such as&lt;strong>headers, cookies, request body&lt;/strong> as they gets transmitted.&lt;/li>
&lt;li>How to intercept the HTTP traffic initiated from the browser (or) SOAP UI to application server and sneak a peek into the content like &lt;strong>Request Body&lt;/strong> like&lt;strong>XML,JSON&lt;/strong>and &lt;strong>Username&lt;/strong> and &lt;strong>Password&lt;/strong> etc.&lt;/li>
&lt;li>How to monitor the incoming SOAP web service request body (or) request XML&lt;/li>
&lt;li>More practical examples on how to use TCPDUMP to analyze the HTTP traffic&lt;/li>
&lt;/ul>
&lt;h2 id="before-we-proceed">Before we proceed&lt;/h2>
&lt;p>Some basics about how to run tcpdump in your server in the right way.
&lt;strong>Make sure tcpdump is installed and configured properly&lt;/strong>
[root@mwiws01 ~]# tcpdump &amp;ndash;version
tcpdump version 4.9.2
libpcap version 1.5.3
OpenSSL 1.0.2k-fips 26 Jan 2017
&lt;strong>Use the right interface name (or) use any in the interface name.&lt;/strong>
To Get the interface name of your IP which you need to specify it in the tcpdump command.  you can execut the command &lt;code>ifconfig&lt;/code> (or) &lt;code>ip a&lt;/code>
In my case, My web server IP is &lt;code>192.168.10.10&lt;/code> so I should pick and use the interface name of the same &lt;code>enp0s8&lt;/code>
&lt;a href="https://www.middlewareinventory.com/wp-content/uploads/2018/07/Screen-Shot-2018-07-26-at-11.56.51-AM.png">&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/racvu0/1626585328886-4381d77e-46e1-4cad-9d76-d1af8f5c8f7d.png" alt="">&lt;/a>
Once you found your interface. In the requests you are going to track. you must mention the interface name
tcpdump -i enp0s8
you can optionally monitor all the available interfaces by mentioning
tcpdump -i any
Now we are All ready to Play.&lt;/p>
&lt;h2 id="tcpdump-examples">TCPDUMP Examples&lt;/h2>
&lt;p>TCPDUMP does the same job irrespective to what technology (or) server you are using it for. In other words, if you would like capture HTTP calls for Apache.  You mostly going to be using the port 80 or 443.
If you would like to capture the traffic of weblogic (or) Websphere or any application servers. All you have to do is change the port number in which your application server is listening
Though we have given examples for both web and application server here.  All you should be aware of is that. There is nothing specific to technology. We just change the port number (or) interface. That’s all.&lt;/p>
&lt;h3 id="how-to-capture-all-incoming-http-get-traffic-or-requests">How to capture All incoming  HTTP GET  traffic (or) requests&lt;/h3>
&lt;p>tcpdump -i enp0s8 -s 0 -A &amp;rsquo;tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;raquo; 2):4] = 0x47455420'
&lt;strong>Explanation:-&lt;/strong>
&lt;strong>tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;raquo; 2):4]&lt;/strong> first determines the location of the bytes we are interested in (after the TCP header) and then selects the 4 bytes we wish to match against.
To know more about how this segment syntax has been derived. refer this &lt;a href="https://security.stackexchange.com/questions/121011/wireshark-tcp-filter-tcptcp121-0xf0-24">link&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>Here &lt;code>0x47455420&lt;/code> depicts the ASCII value of  characters  &lt;code>'G' 'E' 'T' ' '&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>Character&lt;/strong>&lt;/th>
&lt;th>&lt;strong>ASCII Value&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>G&lt;/td>
&lt;td>47&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>E&lt;/td>
&lt;td>45&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>T&lt;/td>
&lt;td>54&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Space&lt;/td>
&lt;td>20&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;blockquote>
&lt;p>Refer this &lt;a href="https://www.middlewareinventory.com/ascii-table/">ASCII map table&lt;/a> for more reference&lt;/p>
&lt;/blockquote>
&lt;h3 id="how-to-capture-all-incoming-http-post-requests">How to capture All incoming &lt;strong>HTTP POST&lt;/strong> requests&lt;/h3>
&lt;p>tcpdump -i enp0s8 -s 0 -A &amp;rsquo;tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;raquo; 2):4] = 0x504F5354'
Here &lt;code>0x504F5354&lt;/code> represents  the ASCII value of  &lt;code>'P' 'O' 'S' 'T'&lt;/code>
&lt;strong>Sample Output&lt;/strong>
[root@mwiws01 ~]# tcpdump -i enp0s8 -s 0 -A &amp;rsquo;tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;raquo; 2):4] = 0x504F5354'
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on enp0s8, link-type EN10MB (Ethernet), capture size 262144 bytes
08:12:59.552588 IP 192.168.10.1.60651 &amp;gt; mwiws01.http: Flags [P.], seq 1817631852:1817632015, ack 3385979723, win 4117, options [nop,nop,TS val 399453898 ecr 6715402], length 163: HTTP: POST /new.html HTTP/1.1
E&amp;hellip;..@.@..C..
&amp;hellip;&lt;/p>
&lt;p>&amp;hellip;PlV.l&amp;hellip;K&amp;hellip;&amp;hellip;&amp;hellip;..
&amp;hellip;..fx
POST /new.html HTTP/1.1
Host: 192.168.10.10
User-Agent: curl/7.54.0
Accept: &lt;em>/&lt;/em>
X-Requested-By: middlewareinventory
TestHeader: TestValue
MyName: SaravAK&lt;/p>
&lt;p>^C
1 packet captured
1 packet received by filter
0 packets dropped by kernel
[root@mwiws01 ~]#&lt;/p>
&lt;h3 id="how-to-capture-only-http-get-requests-incoming-to-port-80--apachenginx">How to capture only &lt;strong>HTTP GET&lt;/strong> requests Incoming to port 80 ( Apache/NGINX)&lt;/h3>
&lt;p>tcpdump -i enp0s8 -s 0 -A &amp;rsquo;tcp dst port 80 and tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;raquo; 2):4] = 0x47455420'
&lt;strong>Sample Output&lt;/strong>
[root@mwiws01 ~]# tcpdump -i enp0s8 -s 0 -A &amp;rsquo;tcp dst port 80 and tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;raquo; 2):4] = 0x47455420'
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on enp0s8, link-type EN10MB (Ethernet), capture size 262144 bytes
06:50:12.424996 IP 192.168.10.1.58034 &amp;gt; mwiws01.http: Flags [P.], seq 1518079346:1518079506, ack 1444634698, win 4117, options [nop,nop,TS val 394486908 ecr 1748275], length 160: HTTP: GET /new.html HTTP/1.1
E&amp;hellip;_.@.@.E7..
&amp;hellip;&lt;/p>
&lt;p>&amp;hellip;PZ|.rV.`J&amp;hellip;..u&amp;hellip;..
..d|&amp;hellip;3GET /new.html HTTP/1.1
Host: 192.168.10.10
User-Agent: curl/7.54.0
Accept: &lt;em>/&lt;/em>
X-Requested-By: middlewareinventory
TestHeader: TestValue
MyName: Sarav&lt;/p>
&lt;h3 id="how-to-capture-only-http-post-requests-incoming-to-port-80--apachenginx">How to capture only &lt;strong>HTTP&lt;/strong> &lt;strong>POST&lt;/strong> requests Incoming to port 80 ( Apache/NGINX)&lt;/h3>
&lt;p>tcpdump -i enp0s8 -s 0 -A &amp;rsquo;tcp dst port 80 and tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;raquo; 2):4] = 0x504F5354'
&lt;strong>Sample Output&lt;/strong>
[root@mwiws01 ~]# tcpdump -i enp0s8 -s 0 -A &amp;rsquo;tcp dst port 80 and tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;raquo; 2):4] = 0x504F5354'
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on enp0s8, link-type EN10MB (Ethernet), capture size 262144 bytes
08:16:50.394502 IP 192.168.10.1.60759 &amp;gt; mwiws01.http: Flags [P.], seq 2281273674:2281273837, ack 1974611475, win 4117, options [nop,nop,TS val 399670036 ecr 6946244], length 163: HTTP: POST /new.html HTTP/1.1
E&amp;hellip;G.@.@.]&amp;hellip;
&amp;hellip;&lt;/p>
&lt;p>.W.P..yJu&amp;hellip;&amp;hellip;.x&amp;hellip;&amp;hellip;
..{..i..POST /new.html HTTP/1.1
Host: 192.168.10.10
User-Agent: curl/7.54.0
Accept: &lt;em>/&lt;/em>
X-Requested-By: middlewareinventory
TestHeader: TestValue
MyName: SaravAK&lt;/p>
&lt;p>^C
1 packet captured
1 packet received by filter
0 packets dropped by kernel&lt;/p>
&lt;h3 id="how-to-capture-only-http-get-calls-incoming-to-port-443--apachenginx">How to capture only HTTP GET calls Incoming to port 443 ( Apache/NGINX)&lt;/h3>
&lt;p>tcpdump -i enp0s8 -s 0 -A &amp;rsquo;tcp dst port 443 and tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;raquo; 2):4] = 0x47455420'&lt;/p>
&lt;h3 id="how-to-capture-only-http-post-calls-incoming-to-port-443--apachenginx">How to capture only HTTP POST calls Incoming to port 443 ( Apache/NGINX)&lt;/h3>
&lt;p>tcpdump -i enp0s8 -s 0 -A &amp;rsquo;tcp dst port 443 and tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;raquo; 2):4] = 0x504F5354'&lt;/p>
&lt;h3 id="how-to-capture-both-http-get-or-post-incoming-calls-to-port-80-or-443--apachenginx-originating-from-192168101-host">How to capture both &lt;strong>HTTP GET (or) POST&lt;/strong> &lt;strong>Incoming&lt;/strong> calls to &lt;strong>port 80 (or) 443&lt;/strong> ( Apache/NGINX) Originating from 192.168.10.1 Host**&lt;/h3>
&lt;p>tcpdump -i enp0s8 -s 0 -A &amp;rsquo;tcp dst port 80 or tcp dst port 443 and tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;raquo; 2):4] = 0x47455420 or tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;raquo; 2):4] = 0x504F5354&amp;rsquo; and host 192.168.10.1
&lt;a href="https://www.middlewareinventory.com/wp-content/uploads/2018/07/Screen-Shot-2018-07-26-at-1.55.24-PM.png">&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/racvu0/1626585328929-5536c529-8e26-474e-a50e-ab6a0ebd82ba.png" alt="">&lt;/a>&lt;/p>
&lt;h3 id="how-to-capture-a-complete-http-transmission-incoming-and-outgoing-including-both-http-request-and-response-associated-with-a-single-client-along-with-html-page-data--get--post--on-port-80">How to capture a Complete HTTP Transmission, incoming and outgoing Including both HTTP Request and Response.  Associated with a Single Client  along with HTML page data ( &lt;strong>GET &amp;amp; POST&lt;/strong> ) on port 80&lt;/h3>
&lt;p>Let suppose I access a page hosted in &lt;code>192.168.10.10&lt;/code> web server from my base machine with ip address &lt;code>192.168.10.1.&lt;/code>  using both GET and POST methods.  How do we track the HTTP request and response between the server and the client&lt;/p>
&lt;p>tcpdump -i enp0s8 -s 0 -A &amp;rsquo;tcp dst port 80 and tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;raquo; 2):4] = 0x47455420 or tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;raquo; 2):4] = 0x504F5354 or tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;raquo; 2):4] = 0x48545450 or tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;raquo; 2):4] = 0x3C21444F and host 192.168.10.1'
Here additionally, we are using two more ASCII values to capture the outgoing HTML files and HTTP calls they are as follows.
&lt;code>0x3C21444F&lt;/code> represents the ASCII value of  &lt;code>'&amp;lt;' 'D' 'O' 'C'&lt;/code> this is to capture the outgoing HTML file
&lt;code>0x48545450&lt;/code> represents the ASCII value of &lt;code>'H' 'T' 'T' 'P'&lt;/code> this is to capture the outgoing HTTP traffic (HTTP response)
&lt;strong>Trying with GET&lt;/strong>&lt;/p>
&lt;h3 id="httpsnotes-learningoss-cn-beijingaliyuncscomracvu01626585328906-fb238d26-9292-49e1-b817-835b23a83b41pnghttpswwwmiddlewareinventorycomwp-contentuploads201807screen-shot-2018-07-26-at-125613-pmpng">&lt;a href="https://www.middlewareinventory.com/wp-content/uploads/2018/07/Screen-Shot-2018-07-26-at-12.56.13-PM.png">&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/racvu0/1626585328906-fb238d26-9292-49e1-b817-835b23a83b41.png" alt="">&lt;/a>&lt;/h3>
&lt;p>&lt;strong>Trying with POST&lt;/strong>
&lt;a href="https://www.middlewareinventory.com/wp-content/uploads/2018/07/Screen-Shot-2018-07-26-at-1.37.45-PM.png">&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/racvu0/1626585328909-f810a2c8-b7b7-43be-a9f2-ffa39e4dd75d.png" alt="">&lt;/a>
In the preceding illustrations,  you can see the output of tcpdump command (to the right) shows the &lt;strong>REQUEST and RESPONSE&lt;/strong> data along with the&lt;strong>HTML code.&lt;/strong> You can also find it aligning to the &lt;strong>CURL’s verbose output&lt;/strong>&lt;/p>
&lt;h3 id="how-to-monitor-all-the-incoming-http-request-urls-post-or-get">How to monitor all the incoming HTTP Request URL’s (POST or GET)&lt;/h3>
&lt;p>tcpdump -i enp0s8 -s 0 -v -n -l | egrep -i &amp;ldquo;POST /|GET /|Host:&amp;rdquo;&lt;/p>
&lt;h3 id="how-to-capture-http-passwords-in-post-requests">How to  capture HTTP Passwords in POST Requests&lt;/h3>
&lt;p>tcpdump -i enp0s8 -s 0 -A -n -l | egrep -i &amp;ldquo;POST /|pwd=|passwd=|password=|Host:&amp;rdquo;&lt;/p>
&lt;h3 id="how-to-capture-the-cookies-from-server-and-from-client--request--response">How to capture the Cookies from Server and from Client ( Request &amp;amp; Response)&lt;/h3>
&lt;p>tcpdump -i enp0s8 -nn -A -s0 -l | egrep -i &amp;lsquo;Set-Cookie|Host:|Cookie:&amp;rsquo;&lt;/p>
&lt;h2 id="how-to-filter-http-user-agents">How to Filter HTTP User Agents&lt;/h2>
&lt;p>Extract HTTP User Agent from HTTP request header.
tcpdump -vvAls0 | grep &amp;lsquo;User-Agent:&amp;rsquo;&lt;/p>
&lt;h2 id="how-to-capture-the-http-packets-being-transmitted-between-webserver-and-application-server-both-get--post">How to capture the HTTP packets being transmitted between Webserver and Application server both GET &amp;amp; POST?&lt;/h2>
&lt;p>In cases, where you have check the HTTP traffic between webserver and application server.  you can use tcpdump to diagnose and troubleshoot the issue. It will be helpful for many middleware administrators.
By this you can make sure that the  websphere proxy plugin (or) weblogic proxy plugin is forwarding the HTTP calls properly. In fact, you can also see to which managed server (or) node the call is going and what data is being transmitted
Let’s suppose this is your environment&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>WebServer IP&lt;/th>
&lt;th>192.168.10.4&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>AppServer IP&lt;/td>
&lt;td>192.168.10.6&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>AppServer Listen Port&lt;/td>
&lt;td>18001&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>You can run the following command at the application server  to accomplish your requirement
tcpdump -i any -s 0 -A &amp;rsquo;tcp dst port 18001 and tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;raquo; 2):4] = 0x47455420 or tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;raquo; 2):4] = 0x504F5354 or tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;raquo; 2):4] = 0x48545450 or tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;raquo; 2):4] = 0x3C21444F and host 192.168.10.4'&lt;/p>
&lt;h2 id="application-server-oriented-examples">Application server Oriented examples&lt;/h2>
&lt;p>&lt;strong>Setting the Context:&lt;/strong>  We are using weblogic application server for this post but it does not limit the scope of this post only to weblogic.  As I already mentioned earlier.  All you have to change is the interface and the port.
Let me give some overview of the weblogic infrastructure been used for this post&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>Application Server product&lt;/strong>&lt;/th>
&lt;th>Weblogic Server 12c&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>Server Listening Port&lt;/strong>&lt;/td>
&lt;td>18001&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Server listen address&lt;/strong>&lt;/td>
&lt;td>192.168.60.4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Application Full URL&lt;/strong>&lt;/td>
&lt;td>&lt;a href="http://192.168.60.4:18001/TestWebService">http://192.168.60.4:18001/TestWebService&lt;/a>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>| **Application Web Service EndPoint
** | &lt;a href="http://192.168.60.4:18001/TestWebService/WS">http://192.168.60.4:18001/TestWebService/WS&lt;/a> |&lt;/p>
&lt;h3 id="how-to-capture-a-complete-http-transmission-incoming-and-outgoing-including-both-http-request-and-response-associated-with-a-single-client-along-with-html-data--get--post--on-port-18001">How to capture a Complete HTTP Transmission, incoming and outgoing Including both HTTP Request and Response.  Associated with a Single Client along with HTML data ( &lt;strong>GET &amp;amp; POST&lt;/strong> ) on port 18001&lt;/h3>
&lt;p>All the examples we have given above can be used for weblogic with just a little change in port number. However. we are giving an example here.
Here we are going to make a call from the client with up &lt;code>192.168.60.1&lt;/code> to our &lt;code>TestWebService&lt;/code> Application using GET and POST methods and capture the HTTP traffic data at the server end
tcpdump -i enp0s8 -s 0 -A &amp;rsquo;tcp dst port 18001 and tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;raquo; 2):4] = 0x47455420 or tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;raquo; 2):4] = 0x504F5354 or tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;raquo; 2):4] = 0x48545450 or tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;raquo; 2):4] = 0x3C21444F and host 192.168.60.1'
Sample Output
&lt;strong>Request from&lt;/strong>&lt;code>192.168.60.1&lt;/code> &lt;strong>using&lt;/strong>&lt;code>curl -v&lt;/code>
aksarav@middlewareinventory:~$ curl -v &amp;ldquo;-H X-Forwarded-By: middlewareinventory&amp;rdquo; -X POST &lt;a href="http://192.168.60.4:18001/TestWebService/">http://192.168.60.4:18001/TestWebService/&lt;/a>&lt;/p>
&lt;ul>
&lt;li>Trying 192.168.60.4&amp;hellip;&lt;/li>
&lt;li>TCP_NODELAY set&lt;/li>
&lt;li>Connected to 192.168.60.4 (192.168.60.4) port 18001 (#0)
&amp;gt; POST /TestWebService/ HTTP/1.1
&amp;gt; Host: 192.168.60.4:18001
&amp;gt; User-Agent: curl/7.54.0
&amp;gt; Accept: &lt;em>/&lt;/em>
&amp;gt; X-Forwarded-By: middlewareinventory
&amp;gt;
&amp;lt; HTTP/1.1 200 OK
&amp;lt; Date: Sat, 28 Jul 2018 06:21:42 GMT
&amp;lt; Accept-Ranges: bytes
&amp;lt; Content-Length: 475
&amp;lt; Content-Type: text/html
&amp;lt; Last-Modified: Sat, 28 Jul 2018 15:41:10 GMT
&amp;lt;  &lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->Sample WebService Application&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->This is Sample WebService Application&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->&lt;/li>
&lt;li>Connection #0 to host 192.168.60.4 left intact&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Response&lt;/strong>
[root@mwiapp01 ~]# tcpdump -i enp0s8 -s 0 -A &amp;rsquo;tcp dst port 18001 and tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;raquo; 2):4] = 0x47455420 or tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;raquo; 2):4] = 0x504F5354 or tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;raquo; 2):4] = 0x48545450 or tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;raquo; 2):4] = 0x3C21444F and host 192.168.60.1'
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on enp0s8, link-type EN10MB (Ethernet), capture size 65535 bytes
02:49:12.424425 IP 192.168.60.1.60442 &amp;gt; mwiapp01.18001: Flags [P.], seq 558796881:558797017, ack 3750122298, win 4117, options [nop,nop,TS val 317440918 ecr 4685369], length 136
E&amp;hellip;Z.@.@&amp;hellip;..&amp;lt;&amp;hellip;&amp;lt;&amp;hellip;FQ!N.Q..S:&amp;hellip;&amp;hellip;&amp;hellip;..
&amp;hellip;..G~9POST /TestWebService/ HTTP/1.1
Host: 192.168.60.4:18001
User-Agent: curl/7.54.0
Accept: &lt;em>/&lt;/em>
X-Forwarded-By: middlewareinventory&lt;/p>
&lt;p>02:49:12.426378 IP mwiapp01.18001 &amp;gt; 192.168.60.1.60442: Flags [P.], seq 1:171, ack 136, win 235, options [nop,nop,TS val 4685370 ecr 317440918], length 170
E&amp;hellip;-.@.@&amp;hellip;..&amp;lt;&amp;hellip;&amp;lt;.FQ&amp;hellip;.S:!N&amp;hellip;&amp;hellip;.&amp;amp;&amp;hellip;..
.G~:&amp;hellip;.HTTP/1.1 200 OK
Date: Sun, 29 Jul 2018 06:49:12 GMT
Accept-Ranges: bytes
Content-Length: 475
Content-Type: text/html
Last-Modified: Sat, 28 Jul 2018 15:41:10 GMT&lt;/p>
&lt;p>02:49:12.426683 IP mwiapp01.18001 &amp;gt; 192.168.60.1.60442: Flags [P.], seq 171:646, ack 136, win 235, options [nop,nop,TS val 4685371 ecr 317440920], length 475
E&amp;hellip;-.@.@&amp;hellip;..&amp;lt;&amp;hellip;&amp;lt;.FQ&amp;hellip;.S.!N&amp;hellip;&amp;hellip;.W&amp;hellip;..
.G~;&amp;hellip;.&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->Sample WebService Application&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->This is Sample WebService Application&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->&lt;/p>
&lt;h3 id="soap-webservice-capture">SOAP Webservice Capture&lt;/h3>
&lt;p>How to capture the Webservice Traffic between Webservice endpoint deployed at weblogic and web service Client ( For example SOAP UI) ?
Here is our web service End Point
&lt;a href="http://192.168.60.4:18001/TestWebService/WS">http://192.168.60.4:18001/TestWebService/WS&lt;/a>
Here we have to two methods.&lt;/p>
&lt;ul>
&lt;li>**Hello –**Just to say hello to the name being passed in the request&lt;/li>
&lt;li>&lt;strong>GetSimilarWord&lt;/strong> –  To Get the string from the user and search the internet for the matching word and return a  JSON array&lt;/li>
&lt;/ul>
&lt;p>Let’s invoke the methods in &lt;strong>SOAP UI&lt;/strong> and see what we see in tcpdump at the server end.
&lt;a href="https://www.middlewareinventory.com/wp-content/uploads/2018/07/Screen-Shot-2018-07-29-at-11.08.04-AM.png">&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/racvu0/1626585328918-c707fdcd-4514-4b09-8a14-ab4a336db3c0.png" alt="">&lt;/a>
[root@mwiapp01 ~]# tcpdump -i enp0s8 -s 0 -A &amp;rsquo;tcp dst port 18001 and tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;raquo; 2):4] = 0x47455420 or tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;raquo; 2):4] = 0x504F5354 or tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;raquo; 2):4] = 0x48545450 or tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;raquo; 2):4] = 0x30313136 and host 192.168.60.1'
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on enp0s8, link-type EN10MB (Ethernet), capture size 65535 bytes
03:25:45.147901 IP 192.168.60.1.60684 &amp;gt; mwiapp01.18001: Flags [P.], seq 2351207025:2351207604, ack 568016594, win 4104, options [nop,nop,TS val 319664919 ecr 6877781], length 579
E..w+9@.@&amp;hellip;..&amp;lt;&amp;hellip;&amp;lt;&amp;hellip;FQ.$.q!.&amp;gt;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;
&amp;hellip;h.UPOST /TestWebService/WS HTTP/1.1
Content-Type: text/xml
cache-control: no-cache
Postman-Token: 8d979543-94ff-4a32-9570-975bfa48d644
User-Agent: PostmanRuntime/7.1.1
Accept: &lt;em>/&lt;/em>
Host: 192.168.60.4:18001
accept-encoding: gzip, deflate
content-length: 291
Connection: keep-alive&lt;/p>
&lt;p>&amp;lt;soapenv:Envelope xmlns:soapenv=&amp;ldquo;&lt;a href="http://schemas.xmlsoap.org/soap/envelope/%22">http://schemas.xmlsoap.org/soap/envelope/&amp;quot;&lt;/a> xmlns:mid=&amp;ldquo;&lt;a href="https://middlewareinventory.com/%22%3E">https://middlewareinventory.com/&amp;quot;&amp;gt;&lt;/a>
&lt;a href="soapenv:Header/">soapenv:Header/&lt;/a>
&lt;a href="soapenv:Body">soapenv:Body&lt;/a>
&lt;a href="mid:hello">mid:hello&lt;/a> &lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->AKSarav&lt;!-- raw HTML omitted -->
&amp;lt;/mid:hello&amp;gt;
&amp;lt;/soapenv:Body&amp;gt;
&amp;lt;/soapenv:Envelope&amp;gt;
03:25:45.152523 IP mwiapp01.18001 &amp;gt; 192.168.60.1.60684: Flags [P.], seq 1:124, ack 579, win 245, options [nop,nop,TS val 6878096 ecr 319664919], length 123
E&amp;hellip;.:@.@&amp;hellip;..&amp;lt;&amp;hellip;&amp;lt;.FQ..!.&amp;gt;..$&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;.
..HTTP/1.1 200 OK
Date: Sun, 29 Jul 2018 07:25:45 GMT
Transfer-Encoding: chunked
Content-Type: text/xml; charset=utf-8&lt;/p>
&lt;p>03:25:45.152909 IP mwiapp01.18001 &amp;gt; 192.168.60.1.60684: Flags [P.], seq 124:410, ack 579, win 245, options [nop,nop,TS val 6878097 ecr 319664923], length 286
E..R.;@.@&amp;hellip;..&amp;lt;&amp;hellip;&amp;lt;.FQ..!.?M.$&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;.
..0116 &lt;!-- raw HTML omitted -->&amp;lt;S:Envelope xmlns:S=&amp;ldquo;&lt;a href="http://schemas.xmlsoap.org/soap/envelope/%22%3E">http://schemas.xmlsoap.org/soap/envelope/&amp;quot;&amp;gt;&lt;/a>&amp;lt;S:Body&amp;gt;&amp;lt;ns0:helloResponse xmlns:ns0=&amp;ldquo;&lt;a href="https://middlewareinventory.com/%22%3E">https://middlewareinventory.com/&amp;quot;&amp;gt;&lt;/a>&lt;!-- raw HTML omitted -->Hello AKSarav ! Welcome to middlewareinventory&lt;!-- raw HTML omitted -->&amp;lt;/ns0:helloResponse&amp;gt;&amp;lt;/S:Body&amp;gt;&amp;lt;/S:Envelope&amp;gt;&lt;/p>
&lt;p>^C
3 packets captured
3 packets received by filter
0 packets dropped by kernel&lt;/p>
&lt;p>You can see the SOAP XML response from the server being returned to the SOAP UI.
For those who are not familiar with SOAP UI. Use Postman as shown below.
&lt;a href="https://www.middlewareinventory.com/wp-content/uploads/2018/07/Screen-Shot-2018-07-29-at-1.05.56-PM.png">&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/racvu0/1626585328966-02ab7403-ec48-49ae-b2c7-9fb5895aaa42.png" alt="">&lt;/a>&lt;/p>
&lt;p>So far we have discussed various usage and examples of TCPDUMP.  But I am certain there might be a whole lot of requirements and examples that I may have missed in this post.
Instead of using the tcpdump command precisely to perform/capture request (or) response.
You could also record the tcpdump session ( take a dump of tcpdump) and analyze, In fact, it is more trustworthy and easy rather trying to write command with ASCII code matching.&lt;/p>
&lt;h3 id="how-to-record-a-tcpdump-session-or-capture-packets-with-tcpdump">How to record a TCPDUMP Session (or) Capture packets with tcpdump&lt;/h3>
&lt;p>To record the tcpdump session, you can use the following command
&lt;strong>Note*:&lt;/strong> here I have used any as an interface to capture all the packets across all the channels/interfaces available in my server
tcpdump -i any -s 0 -X -w /tmp/tcpdump.pcap
&lt;code>pcap&lt;/code> is a widely accepted extension for the tcpdump output.&lt;/p>
&lt;h3 id="how-to-read-the-tcpdump-recorded-session-or-packet-capture--pcap-file">How to read the TCPDUMP recorded session (or) packet capture – pcap file&lt;/h3>
&lt;p>tcpdump -A -r /tmp/tcpdump.pcap
This way. you would be able to read the recorded session and it will offer more information than the ASCII matching commands.
You can also use commands like &lt;code>less&lt;/code> for better readability and search.
tcpdump -A -r /tmp/tcpdump.pcap|less&lt;/p>
&lt;p>The Wireshark
There is a wonderful Sniffing tool (network packet analyzer) available in the market named Wireshark. You can just import the &lt;code>pcap&lt;/code> file and process your tcpdump output like never before.
You will just be amazed by the details and options that Wireshark provides. &lt;strong>I Guarantee it.&lt;/strong>
Look at this sample shows the detailed information and the XML response it has sent to the Client.
&lt;a href="https://www.middlewareinventory.com/wp-content/uploads/2018/07/Screen-Shot-2018-07-29-at-1.26.04-PM.png">&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/racvu0/1626585328965-f71817ac-67bb-4b40-9b6e-fad187aed166.png" alt="">&lt;/a>
Ohh man. It took a week to complete this post and I still feel like I have missed so many things. let me write another article dedicatedly for Wireshark and its capabilities.
Any questions, Feedback, Scoldings. Please use the comments section. Would be really happy to see that someone is showing interest.  It’s pretty lonely here. So comment anyway &lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/racvu0/1626585332331-a9c5f246-8627-4970-b070-230ea81852e3.svg" alt="">
See ya
Sarav AK&lt;/p></description></item></channel></rss>