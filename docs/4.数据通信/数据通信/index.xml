<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – 数据通信</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/</link><description>Recent content in 数据通信 on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: CIDR</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/CIDR/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/CIDR/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wiki-CIDR&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Classless Inter-Domain Routing(无类别域间路由，简称 CIDR)&lt;/strong> 是一个用于给用户分配&lt;a href="https://zh.wikipedia.org/wiki/IP%E5%9C%B0%E5%9D%80">IP 地址&lt;/a>以及在&lt;a href="https://zh.wikipedia.org/wiki/%E4%BA%92%E8%81%94%E7%BD%91">互联网&lt;/a>上有效地路由 IP&lt;a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E5%8C%85">数据包&lt;/a>的对 IP 地址进行归类的方法。&lt;/p>
&lt;p>在&lt;a href="https://zh.wikipedia.org/wiki/%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F">域名系统&lt;/a>出现之后的第一个十年里，基于&lt;a href="https://zh.wikipedia.org/wiki/%E5%88%86%E7%B1%BB%E7%BD%91%E7%BB%9C">分类网络&lt;/a>进行地址分配和路由 IP 数据包的设计就已明显显得&lt;a href="https://zh.wikipedia.org/wiki/%E5%8F%AF%E6%89%A9%E6%94%BE%E6%80%A7">可扩充性&lt;/a>不足（参见 RFC 1517）。为了解决这个问题，&lt;a href="https://zh.wikipedia.org/wiki/%E4%BA%92%E8%81%94%E7%BD%91%E5%B7%A5%E7%A8%8B%E5%B7%A5%E4%BD%9C%E5%B0%8F%E7%BB%84">互联网工程工作小组&lt;/a>在 1993 年发布了一新系列的标准 RFC 1518 和 RFC 1519 以定义新的分配 IP 地址块和路由&lt;a href="https://zh.wikipedia.org/wiki/IPv4">IPv4&lt;/a>数据包的方法。&lt;a href="https://zh.wikipedia.org/wiki/%E6%97%A0%E7%B1%BB%E5%88%AB%E5%9F%9F%E9%97%B4%E8%B7%AF%E7%94%B1#cite_note-RFC_1518-1">[1]&lt;/a>&lt;a href="https://zh.wikipedia.org/wiki/%E6%97%A0%E7%B1%BB%E5%88%AB%E5%9F%9F%E9%97%B4%E8%B7%AF%E7%94%B1#cite_note-RFC_1519-2">[2]&lt;/a>&lt;/p>
&lt;p>一个 IP 地址包含两部分：标识网络的&lt;strong>前缀&lt;/strong>和紧接着的在这个网络内的&lt;strong>主机地址&lt;/strong>。在之前的&lt;a href="https://zh.wikipedia.org/wiki/%E5%88%86%E7%B1%BB%E7%BD%91%E7%BB%9C">分类网络&lt;/a>中，IP 地址的分配把 IP 地址的 32 位按每 8 位为一段分开。这使得前缀必须为 8，16 或者 24 位。因此，可分配的最小的地址块有 256（24 位前缀，8 位主机地址，28=256）个地址，而这对大多数企业来说太少了。大一点的地址块包含 65536（16 位前缀，16 位主机，216=65536）个地址，而这对大公司来说都太多了。这导致不能充分使用 IP 地址和在路由上的不便，因为大量的需要单独路由的小型网络（C 类网络）因在地域上分得很开而很难进行&lt;a href="https://zh.wikipedia.org/w/index.php?title=%E8%81%9A%E5%90%88%E8%B7%AF%E7%94%B1&amp;amp;action=edit&amp;amp;redlink=1">聚合路由&lt;/a>，于是给路由设备增加了很多负担。&lt;/p>
&lt;p>无类别域间路由是基于 **Variable-length Subnet Masking(可变长子网掩码，简称 VLSM) **来进行任意长度的前缀的分配。在 RFC 950（1985）中有关于可变长子网掩码的说明。CIDR 包括：&lt;/p>
&lt;ul>
&lt;li>指定任意长度的前缀的可变长子网掩码技术。遵从 CIDR 规则的地址有一个后缀说明前缀的位数，例如：192.168.0.0/16。这使得对日益缺乏的 IPv4 地址的使用更加有效。&lt;/li>
&lt;li>将多个连续的前缀聚合成&lt;a href="https://zh.wikipedia.org/w/index.php?title=%E8%B6%85%E7%BD%91&amp;amp;action=edit&amp;amp;redlink=1">&lt;strong>超网&lt;/strong>&lt;/a>，以及，在互联网中，只要有可能，就显示为一个聚合的网络，因此在总体上可以减少路由表的表项数目。聚合使得互联网的路由表不用分为多级，并通过 VLSM 逆转“划分子网”的过程。&lt;/li>
&lt;li>根据机构的实际需要和短期预期需要而不是分类网络中所限定的过大或过小的地址块来管理 IP 地址的分配的过程。&lt;/li>
&lt;/ul>
&lt;p>因为在&lt;a href="https://zh.wikipedia.org/wiki/IPv6">IPv6&lt;/a>中也使用了 IPv4 的用后缀指示前缀长度的 CIDR，所以 IPv4 中的_分类_在 IPv6 中已不再使用。&lt;/p></description></item><item><title>Docs: Network Socket</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Network-Socket/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Network-Socket/</guid><description>
&lt;p>参考：&lt;a href="https://www.yuque.com/go/doc/33222667">Socket 概述&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/zvw5dg/1616161399168-31d4bf21-49d1-45dc-993e-83ea35d7a7f2.jpeg" alt="">&lt;/p>
&lt;p>面向连接服务（TCP 协议）：是电话系统服务模式的抽象，即每一次完整的数据传输都要经过建立连接，使用连接，终止连接的过程。在数据传输过程中，各数据分组不携带目的地址，而使用连接号（connect ID）。本质上，连接是一个管道，收发数据不但顺序一致，而且内容相同。TCP 协议提供面向连接的虚电路。例如&lt;/p>
&lt;ol>
&lt;li>文件传输 FTP&lt;/li>
&lt;li>远程登录 SSH&lt;/li>
&lt;li>数字语音&lt;/li>
&lt;li>等&lt;/li>
&lt;/ol>
&lt;p>无连接服务（UDP 协议）：是邮政系统服务的抽象，每个分组都携带完整的目的地址，各分组在系统中独立传送。无连接服务不能保证分组的先后顺序，不进行分组出错的恢复与重传，不保证传输的可靠性。UDP 协议提供无连接的数据报服务。例如：&lt;/p>
&lt;ol>
&lt;li>电子邮件&lt;/li>
&lt;li>电子邮件中的挂号信&lt;/li>
&lt;li>网络数据库查询&lt;/li>
&lt;li>等&lt;/li>
&lt;/ol>
&lt;p>TCP/IP 的 socket 提供下列三种类型套接字。&lt;/p>
&lt;ol>
&lt;li>流式套接字（SOCK_STREAM）：TCP Socket&lt;/li>
&lt;li>提供了一个面向连接、可靠的数据传输服务，数据无差错、无重复地发送，且按发送顺序接收。内设流量控制，避免数据流超限；数据被看作是字节流，无长度限制。文件传送协议（FTP）即使用流式套接字。&lt;/li>
&lt;li>数据报式套接字（SOCK_DGRAM）：UDP Socket&lt;/li>
&lt;li>提供了一个无连接服务（UDP）。数据包以独立包形式被发送，不提供无错保证数据可能丢失或重复，并且接收顺序混乱。网络文件系统（NFS）使用数据报式套接字。&lt;/li>
&lt;li>原始式套接字（SOCK_RAW） ：裸 Socket&lt;/li>
&lt;li>从应用层直接封装网络层报文，跳过传输层的协议.该接口允许对较低层协议，如 IP、ICMP 直接访问。常用于检验新的协议实现或访问现有服务中配置的新设备。&lt;/li>
&lt;/ol>
&lt;p>Socket Domain 套接字域，根据其所有使用的地址进行分类&lt;/p>
&lt;ol>
&lt;li>AF_INET：Address Family，IPv4&lt;/li>
&lt;li>AF_INET6：同上，IPv6&lt;/li>
&lt;li>AF_UNIX：同一主机上不同进程之间通信时使用&lt;/li>
&lt;/ol>
&lt;p>每类套接字至少提供了两种 socket：流，数据报&lt;/p>
&lt;p>tcp：传输控制协议，面向连接的协议，通信钱需要建立虚拟链路，结束后拆除链路&lt;/p>
&lt;p>udp:User Datagram Protocol，无连接的协议&lt;/p>
&lt;ol>
&lt;li>流：可靠的传递，面向连接，无边界&lt;/li>
&lt;li>数据报：不可靠的传递，有边界，无连接&lt;/li>
&lt;/ol>
&lt;p>套接字相关的系统调用&lt;/p>
&lt;ul>
&lt;li>socket()：创建一个套接字&lt;/li>
&lt;li>bind():绑定&lt;/li>
&lt;li>listen()：监听&lt;/li>
&lt;li>connect():请求连接建立&lt;/li>
&lt;li>write()：发送数据&lt;/li>
&lt;li>read()：接收数据&lt;/li>
&lt;/ul>
&lt;h2 id="socket-通信流程">Socket 通信流程&lt;/h2>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/zvw5dg/1616161399174-a6270b36-8bb5-48a4-ba3c-1ee812d450fe.png" alt="">&lt;/p></description></item><item><title>Docs: OSI 模型概念图</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/OSI-%E6%A8%A1%E5%9E%8B%E6%A6%82%E5%BF%B5%E5%9B%BE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/OSI-%E6%A8%A1%E5%9E%8B%E6%A6%82%E5%BF%B5%E5%9B%BE/</guid><description>
&lt;h1 id="osi-介绍">OSI 介绍&lt;/h1>
&lt;p>开放式系统互联模型（英语：Open System Interconnection Model，缩写：OSI；简称为 OSI 模型）是一种概念模型，由国际标准化组织提出，一个试图使各种计算机在世界范围内互连为网络的标准框架。定义于 ISO/IEC 7498-1。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/tudqyb/1616161546435-bc8ba6d0-bb9a-4fc8-819e-6108035f2d1a.jpeg" alt="">&lt;/p>
&lt;h1 id="osi-模型背景编辑">OSI 模型背景[编辑]&lt;/h1>
&lt;p>在制定计算机网络标准方面，起着重大作用的两大国际组织是：国际电信联盟电信标准化部门，与国际标准组织（ISO），虽然它们工作领域不同，但随着科学技术的发展，通信与信息处理之间的界限开始变得比较模糊，这也成了国际电信联盟电信标准化部门和 ISO 共同关心的领域。1984 年，ISO 发布了著名的 ISO/IEC 7498 标准，它定义了网络互联的 7 层框架，也就是开放式系统互联参考模型。&lt;/p>
&lt;p>层次划分[编辑]&lt;/p>
&lt;p>根据建议 X.200，OSI 将计算机网络体系结构划分为以下七层，标有 1 ～ 7，第 1 层在底部。 现“OSI/RM”是英文“Open Systems Interconnection Reference Model”的缩写。&lt;/p>
&lt;p>第 7 层 应用层[编辑]&lt;/p>
&lt;p>主条目：应用层&lt;/p>
&lt;p>应用层（Application Layer）提供为应用软件而设的接口，以设置与另一应用软件之间的通信。例如: HTTP，HTTPS，FTP，TELNET，SSH，SMTP，POP3.HTML.等。&lt;/p>
&lt;p>第 6 层 表达层[编辑]&lt;/p>
&lt;p>主条目：表达层&lt;/p>
&lt;p>表达层（Presentation Layer）把数据转换为能与接收者的系统格式兼容并适合传输的格式。&lt;/p>
&lt;p>第 5 层 会话层[编辑]&lt;/p>
&lt;p>主条目：会话层&lt;/p>
&lt;p>会话层（Session Layer）负责在数据传输中设置和维护电脑网络中两台电脑之间的通信连接。&lt;/p>
&lt;p>第 4 层 传输层[编辑]&lt;/p>
&lt;p>主条目：传输层&lt;/p>
&lt;p>传输层（Transport Layer）把传输表头（TH）加至数据以形成数据包。传输表头包含了所使用的协议等发送信息。例如:传输控制协议（TCP）等。&lt;/p>
&lt;p>第 3 层 网络层[编辑]&lt;/p>
&lt;p>主条目：网络层&lt;/p>
&lt;p>网络层（Network Layer）决定数据的路径选择和转寄，将网络表头（NH）加至数据包，以形成报文。网络表头包含了网络数据。例如:互联网协议（IP）等。&lt;/p>
&lt;p>第 2 层 数据链路层[编辑]&lt;/p>
&lt;p>主条目：数据链路层&lt;/p>
&lt;p>数据链路层（Data Link Layer）负责网络寻址、错误侦测和改错。当表头和表尾被加至数据包时，会形成帧。数据链表头（DLH）是包含了物理地址和错误侦测及改错的方法。数据链表尾（DLT）是一串指示数据包末端的字符串。例如以太网、无线局域网（Wi-Fi）和通用分组无线服务（GPRS）等。&lt;/p>
&lt;p>分为两个子层：逻辑链路控制（logical link control，LLC）子层和介质访问控制（Medium access control，MAC）子层。&lt;/p>
&lt;p>第 1 层 物理层[编辑]&lt;/p>
&lt;p>主条目：物理层&lt;/p>
&lt;p>物理层（Physical Layer）在局部局域网上传送数据帧（data frame），它负责管理电脑通信设备和网络媒体之间的互通。包括了针脚、电压、线缆规范、集线器、中继器、网卡、主机接口卡等。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>OSI 七层网络模型&lt;/td>
&lt;td>TCP/IP 四层概念模型&lt;/td>
&lt;td>对应网络协议&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>应用层（Application）&lt;/td>
&lt;td>应用层&lt;/td>
&lt;td>HTTP、TFTP, FTP, NFS, WAIS、SMTP&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>表示层（Presentation）&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>Telnet, Rlogin, SNMP, Gopher&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>会话层（Session）&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>SMTP, DNS&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>传输层（Transport）&lt;/td>
&lt;td>传输层&lt;/td>
&lt;td>TCP, UDP&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>网络层（Network）&lt;/td>
&lt;td>网络层&lt;/td>
&lt;td>IP, ICMP, ARP, RARP, AKP, UUCP&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>数据链路层（Data Link）&lt;/td>
&lt;td>数据链路层&lt;/td>
&lt;td>FDDI, Ethernet, Arpanet, PDN, SLIP, PPP、VLAN、VxLAN&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>物理层（Physical）&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>IEEE 802.1A, IEEE 802.2 到 IEEE 802.11&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Docs: 数据通信</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Data_communication">Wiki，Data communication&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/o6itXyzQOHO3D3ULD14DIQ">公众号-差评，现在性能拉满的手机芯片，原来是被它牵着鼻子走的？&lt;/a>(通讯进化简史)&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>**Data Communication(数据通信) **是在点对点或点多多上，以 digital bitstream(数字比特流) 或 数字化模拟信号的形式，传输和接收数据的沟通渠道。此类通道的示例是铜线、光纤、使用无线电频谱的无线通信、存储介质和计算机总线。数据表示为电磁信号，例如电压、无线电波、微波或红外信号。&lt;/p>
&lt;p>&lt;strong>Transimit(发送)&lt;/strong> # Transmission、Transfer
&lt;strong>Receive(接收)&lt;/strong> # Reception
&lt;a href="https://en.wikipedia.org/wiki/Dedicated_line">&lt;strong>Dedicated line(专线)&lt;/strong>&lt;/a> # 专线是专用于&lt;/p>
&lt;h1 id="光纤">光纤&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Optical_fiber">Wiki,Optical fiber&lt;/a>(光纤)&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Fiber-optic_communication">Wiki,Fiber-optic communication&lt;/a>(光纤通信)&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>光功率的单位是 dbm，光衰的单位是 db。发送端光功率(大)-接收端光功率（小）=光衰（正直）&lt;/p>
&lt;p>光功率值分大小，越小信号越弱。通常发光小于 0dbm(负值)。&lt;/p>
&lt;p>接收端能够接收的最小光功率称为灵敏度，发光功率减去接收灵敏度是允许的光纤衰耗值（dbm-dbm=db）.测试时实际的发光功率减去实际接收到的光功率的值就是光纤衰耗(db)&lt;/p>
&lt;p>举例说明：一段光纤能接受的最小光功率（即接受灵敏度）是-20dbm(低于-20 光纤点不亮)。&lt;/p>
&lt;p>发送端光功率是-5dbm，则最大光衰为-5-（-20）=15db,即允许的最大衰耗为 15db，大于则点不亮。 如接收端测出来的是-10dmb，那么光纤衰耗是-5-（-10）=5db,小于最大衰耗 15db，此时光纤能正常点亮。
&lt;a href="https://blog.51cto.com/zhuyong1985/1581202">
&lt;/a>&lt;/p></description></item><item><title>Docs: 无线通信</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E6%97%A0%E7%BA%BF%E9%80%9A%E4%BF%A1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E6%97%A0%E7%BA%BF%E9%80%9A%E4%BF%A1/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;/blockquote>
&lt;p>Wi-Fi 4 = 802.11n
Wi-Fi 5 = 802.11ac
Wi-Fi 6 = 802.11ax&lt;/p></description></item></channel></rss>