<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DNS on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/DNS/</link><description>Recent content in DNS on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/DNS/index.xml" rel="self" type="application/rss+xml"/><item><title>DDNS</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/DNS/DDNS/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/DNS/DDNS/</guid><description>概述 参考：
Wiki, DDNS Dynamic Domain Name System(动态域名系统，简称 DDNS) 是一种方法、概念，这个方法用来动态更新 DNS 中名称对应的 IP。通常情况下，域名都是解析到一个固定的 IP，但 DDNS 系统为动态网域提供一个固定的名称服务器（Name server），透过即时更新，使外界用户能够连上动态用户的网址。
比如家庭宽带，获取到的 IP 地址是实时变化的，要想通过域名访问当家庭宽带内部的服务，则必须使用 DDNS。
GitHub 项目，jeessy2/ddns-go 是一个使用 Go 写的，带有 Web 管理页面的 DDNS 工具</description></item><item><title>DNS</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/DNS/DNS/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/DNS/DNS/</guid><description>概述 参考：
Wiki, DNS Wiki, Name Server 《DNS 与 BIND》(第 5 版) Domain Name System(域名系统，简称 DNS) 是一个分层的和去中心化的命名系统，以便人们可以更方便得访问互联网。DNS 主要用来将更容易让人类记忆的 域名 与 IP地址 互相映射，以便可以通过域名定位和访问互联网上的服务。自 1985 年以来，域名系统通过提供全球性、分布式的域名服务，已成为 Internet 功能的重要组成部分。
从另一个方面说，DNS(域名系统) 其实是一个分布式的数据库。这种结构允许对整体数据库的各个部分进行本地控制，并且在各个部分中的数据通过 C/S 模式变得对整个网络都可用。通过复制和缓存等机制，DNS 将会拥有健壮性和充足的性能。
注：这段描述不好理解，需要看完后面才能体会。所谓的分布式，其实就是指 DNS 的模式，每个 Name Server 都可以是分布式数据库的一个节点。
当我们访问一个网站时，在浏览器上输入 https://www.baidu.com/ 时，www.baidu.com 就是域名。而管理 域名与 IP 对应关系的系统，就是域名系统。
DNS 其实是一个规范、概念，具体想要让 DNS 在世界上应用起来，则至少要保证两个方面
其一是服务端，通过 NameServer 为大家提供解析服务、存储域名与 IP 的对应关系， 其二是客户端，客户端上的应用程序将会调用符合 DNS 标准的库以便向 NameServer 发起域名查询请求，程序收到解析后的 IP 后将会发起请求。 背景 网络诞生之初并没有 DNS，那时候访问对方只需要 IP 地址就可以了，但是后来接入互联网的主机太多了，IP 没法记，所以研究了 DNS。
Internet Assigned Numbers Authority(互联网数字分配机构，简称 IANA) 是负责协调一些使 Internet 正常运作的机构。同时，由于 Internet 已经成为一个全球范围的不受集权控制的全球网络，为了使网络在全球范围内协调，存在对互联网一些关键的部分达成技术共识的需要，而这就是 IANA 的任务</description></item><item><title>DNSmasq</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/DNS/DNSmasq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/DNS/DNSmasq/</guid><description>概述 参考：
Manual(手册) https://cloud.tencent.com/developer/article/1534150 DNSmasq 是一个轻量的 DHCP 和 DNS 缓存 服务。
DNS 泛解析实例 最近遇到一个问题，需要在服务器上对域名进行泛解析，比如访问百度的域名统统解析到 6.6.6.6，然而发现 hosts 文件根本就不支持类似 *.baidu.com 的这种写法。
于是乎就在网上找了下资料，发现可以通过 Dnsmasq 来解决这个问题，原理其实就是本机的 DNS 指向 Dnsmasq 服务器，然后 Dnsmasq 通过类似通配符 (*) 的方式进行匹配，凡是匹配到 *.baidu.com 的都解析到 6.6.6.6。 利用 Dnsmasq 实现 hosts 泛解析
环境介绍
$ uname -a Linux ansheng 3.10.0-957.1.3.el7.x86_64 #1 SMP Thu Nov 29 14:49:43 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux $ whoami root $ cat /etc/redhat-release CentOS Linux release 7.6.1810 (Core) 安装 Dnsmasq 安装非常简单，通过 yum 即可。</description></item><item><title>Resource Record(资源记录)</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/DNS/Resource-Record%E8%B5%84%E6%BA%90%E8%AE%B0%E5%BD%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/DNS/Resource-Record%E8%B5%84%E6%BA%90%E8%AE%B0%E5%BD%95/</guid><description>概述 参考：
RR 定义的格式：NAME [TTL] CLASS RR-TYPE VALUE（注意：格式中的域名都要带根域名，即域名最后都要加一个 . ）
NAME 和 VALUE # 不同的 RR-TYPE 有不同的格式 CLASS：IN TYPE 资源记录类型：A，AAAA，PTR，SOA，NS，CNAME，MX 等： SRV 格式：域名系统中用于指定服务器提供服务的位置（如主机名和端口） name：_服务._协议.名称. value：优先级 权重 端口 主机. SOA 格式：Start Of Authority：起始授权记录，一个区域解析库有且只能有一个 SOA 记录，而且必须为解析库第一条记录 name：当前区域的名字，例如”baidu.com.“ value (属性) 当前区域的主 DNS 服务器的 FQDN，也可以使用当前区域的名字 当前区域管理员的邮箱地址，但是地址中不能用@符号，@符号用.替换 （主从服务协调属性的定义以及否定结果的统一的 TTL） NS 格式：Name Server：专用于标明当前区域的 DNS 服务器 name：当前区域的名字 value：当前区域的某 DNS 服务器的名字，例如 ns.baidu.com.;(一个区域可以有多个 NS 记录) MX 格式：Mail eXchanger：邮件交换器 TTL 可以从全局继承 A/AAAA 格式：Address，A 格式用于实现将 FQDN 解析为 IPv4(AAAA 格式用于将 FQDN 解析为 IPv6) name: value: PTR 格式：PoinTeR，用于将 IP 解析为 FQDN name：IP，特殊格式，反写 IP，比如 1.</description></item><item><title>Zone 与 Domain</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/DNS/Zone-%E4%B8%8E-Domain/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/DNS/Zone-%E4%B8%8E-Domain/</guid><description>Delegation(授权) Zone 是通过授权实现的，而授权，主要授予的就是 Domain 的管理权。
管理域的组织可以将域进一步划分成子域。每个子域都可以被授权给其他组织来管理，这意味着这些被授权的组织得负责维护子域中所有的数据。他们可以自由地 改变域中的数据，甚至将子域进一步划分成更多的子域，然后再授权给其他组织管理。父域仅仅保留指向子域数据来源的指针，这样父域便可将查询者引到该处。例如，stanford.edu 域被授权给在斯坦福大学的人，由他们负责管理校园网络。
比如，我想买一个域名 desistdaydream.com，我就需要去找管理 com 域的组织购买，我付给他们钱后，他们就给我授权，让我可以管理 desistdaydream.com 域。此时，该域的管理权则由我全权负责，而我还可以对 desistdaydream.com 域再次划分，比如 a.desistdaydream.com、b.desistdaydream.com、c.desistdaydream.com 等等，然后将这些域授权出去。
同时，我还可以只授权一个域，比如我只授权某人管理 a.b.desistdaydream.com 域，那么某人则无法将 a.b.desistdaydream.com 域再进行子域划分。
所以，授权就是指将管理子域的责任交给另一个组织的行为。
**zone **和 **domain **的区别
zone 是同 Delegation(授权) 联系在一起的，为了管理上的方便，我们把域的某部分授权出去让别人代为管理，这部分就是一个 zone 。为什么说是为了管理上的方便呢？因为这样一个很大的域就可以实现分散管理，而不是集中由一两台服务器来管理。而 zone 的划分就是通过 “授权机制”来实现的。这也是 设计 DNS 系统得初衷。 并不能说 domain 就比 zone 大，反过来也一样。例如 edu 域可以包含多个 zone ：berkeley.edu 、purdue.edu 。但 edu 也可以看成是根域 &amp;ldquo;.&amp;rdquo; 下的一个被授权出去的 zone ，它含有 berkeley.edu 、purdue.edu 等几个域。 域是以域名进行分界的，而 zone 是以授权范围来定界的。一个 zone 有可能跨域多个域名。例如 berkeley 域是所有以 berkeley.edu 结尾的域名空间；而 edu zone 可以包括 berkey 和 purdue 这两个域，都统一归 edu 这个 zone 管理。 一个域和一个 zone 可能具有相同的域名，但包含的节点却不同。例如使用了授权的域 Name Server 在加载数据时是以 zone 为单位，而不是以 Domain 为单位。 总结： domain 这是从逻辑上进行划分，体现域名的树性结构，根域、com 域、edu 域等；</description></item><item><title>反向解析原理</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/DNS/%E5%8F%8D%E5%90%91%E8%A7%A3%E6%9E%90%E5%8E%9F%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/DNS/%E5%8F%8D%E5%90%91%E8%A7%A3%E6%9E%90%E5%8E%9F%E7%90%86/</guid><description> 我们都知道DNS解析是把域名解析到IP，你知道怎么把IP解析到域名吗？知道反向解析的工作原理吗？ 上一篇博客DNS解析原理讲解了域名到IP的解析流程，本篇着重讲解一下从IP到域名的解析流程。 首先，简单聊一下反向解析的使用场景，当前使用最多的是用于邮箱服务器IP配置反向解析指向邮箱域名。比如一个邮箱服务器，每天会收到来自互联网IP发送大量邮件，并不是每封邮件都要接收的，否则邮箱会被垃圾邮件刷爆的。所以邮箱服务器通常都有自己的反垃圾邮件规则。比如收到某个IP服务器发过来的邮件，首先会判断此IP是否在反垃圾邮件联盟的黑名单里，如果IP在黑名单就直接拒收邮件了。然后会判断邮箱域名信誉度是否良好，是否在黑名单。怎么获取邮箱域名呢，就是通过检测IP的反向解析来获取邮箱域名。所以说，对于自己搭建邮箱服务器，IP设置反向解析指向域名是重要的一步。 那IP的解析流程是怎样的呢？ 要知道这个答案首先要知道IP在全球是怎么管理分配的。ICANN负责全球IP地址的编号分配，将部分商用IP分配给RIR(Regional Internet Registry，地区性 Internet 注册机构)来负责管理。全球一共有5个RIR： ARIN 主要负责北美地区业务
RIPE 主要负责欧洲地区业务
LACNIC 主要负责拉丁美洲美洲业务
AfriNIC 负责非洲地区业务
APNIC 负责亚太地区业务
RIR 再授权给国家级注册机构负责管理各国家内的 IP 管理，比如 APNIC 下面的 CNNIC，JPNIC 等。CNNIC 再把 IP 授权给不同服务商，比如华为云，其他运营商等等。
对于一个域名，例如www.huawei.com，我们知道是com顶级域，那假如一个IP 117.78.61.19，是怎么判断是哪个顶级域呢？ 反向解析也有一个顶级域是in-addr.arpa，对于IP 117.78.61.19实际对应的反向域名是19.61.78.117.in-addr.arpa，反向顶级域把117.in-addr.arpa这个A类授权给APNIC来管理，APNIC把78.117.in-addr.arpa这个B类授权给CNNIC来管理，CNNIC把下面的部分C类地址给华为云； 通过dig命令加 -x参数可以查看反向解析流程，大致类似于域名的解析流程。 知道了域名，IP的解析流程，对于我们定位解析不生效判断就更好理解了。可以查看是到哪一步中断，具体再去分析。希望以上分享对你有一定帮助</description></item></channel></rss>