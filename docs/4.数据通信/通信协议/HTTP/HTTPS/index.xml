<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – HTTPS</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/HTTP/HTTPS/</link><description>Recent content in HTTPS on 断念梦</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/HTTP/HTTPS/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: HTTPS</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/HTTP/HTTPS/HTTPS/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/HTTP/HTTPS/HTTPS/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;p>**Hyper Text Transfer Protocol over Secure Socket Layer(简称 HTTPS) **是以安全为目标的 HTTP 通道，简单讲是 HTTP 的安全版。即 HTTP 下加入 SSL 层，HTTPS 的安全基础是 SSL，因此加密的详细内容就需要 SSL。 它是一个 URI scheme（抽象标识符体系），句法类同 http:体系。用于安全的 HTTP 数据传输。https://URL 表明它使用了 HTTP，但 HTTPS 存在不同于 HTTP 的默认端口及一个加密/身份验证层（在 HTTP 与 TCP 之间）。这个系统的最初研发由网景公司(Netscape)进行，并内置于其浏览器 Netscape Navigator 中，提供了身份验证与加密通讯方法。现在它被广泛用于万维网上安全敏感的通讯，例如交易支付方面。&lt;/p>
&lt;h2 id="http-和-https-区别">HTTP 和 HTTPS 区别&lt;/h2>
&lt;p>https 本质是 http 与 ssl 结合的协议，并没有绝对意义上的 https 协议。需要到 ca 申请证书，一般免费证书很少，需要交费。&lt;/p>
&lt;p>http 是超文本传输协议，信息是明文传输，https 则是具有安全性的 ssl 加密传输协议 http 和 https 使用的是完全不同的连接方式用的端口也不一样：前者是 80，后者是 443。&lt;/p>
&lt;p>http 的连接很简单，是无状态的 HTTPS 协议是由 SSL+HTTP 协议构建的可进行加密传输、身份认证的网络协议 要比 http 协议安全&lt;/p>
&lt;h2 id="https-解决的问题">HTTPS 解决的问题&lt;/h2>
&lt;p>（1）信任主机的问题。&lt;/p>
&lt;p>采用 https 的 server 必须从 CA 申请一个用于证明服务器用途类型的证书。&lt;/p>
&lt;p>该证书只有用于对应的 server 的时候，客户度才信任次主机。所以目前所有的银行系统网站，关键部分应用都是 https 的。 客户通过信任该证书，从而信任了该主机。其实这样做效率很低，但是银行更侧重安全。 这一点对我们没有任何意义，我们的 server，采用的证书不管自己 issue 还是从公众的地方 issue， 客户端都是自己人，所以我们也就肯定信任该 server。&lt;/p>
&lt;p>（2）通讯过程中的数据的泄密和被窜改。&lt;/p>
&lt;p>1)一般意义上的 https， 就是 server 有一个证书。&lt;/p>
&lt;p>a) 主要目的是保证 server 就是他声称的 server。这个跟第一点一样。&lt;/p>
&lt;p>b) 服务端和客户端之间的所有通讯，都是加密的。&lt;/p>
&lt;p>i、具体讲，是客户端产生一个对称的密钥，通过 server 的证书来交换密钥。 一般意义上的握手过程。&lt;/p>
&lt;p>ii、加下来所有的信息往来就都是加密的。 第三方即使截获，也没有任何意义。因为他没有密钥。 当然窜改也就没有什么意义了。&lt;/p>
&lt;p>2)少许对客户端有要求的情况下，会要求客户端也必须有一个证书。&lt;/p>
&lt;p>a) 这里客户端证书，其实就类似表示个人信息的时候，除了用户名/密码， 还有一个 CA 认证过的身份。 应为个人证书一般来说上别人无法模拟的，所有这样能够更深的确认自己的身份。&lt;/p>
&lt;p>b) 目前少数个人银行的专业版是这种做法，具体证书可能是拿 U 盘作为一个备份的载体。像我用的交通银行的网上银行就是采取的这种方式。 HTTPS 一定是繁琐的。&lt;/p>
&lt;p>a) 本来简单的 http 协议，一个 get 一个 response。由于 https 要还密钥和确认加密算法的需要。单握手就需要 6/7 个往返。&lt;/p>
&lt;p>i、任何应用中，过多的 round trip 肯定影响性能。&lt;/p>
&lt;p>b) 接下来才是具体的 http 协议，每一次响应或者请求， 都要求客户端和服务端对会话的内容做加密/解密。&lt;/p>
&lt;p>i、尽管对称加密/解密效率比较高，可是仍然要消耗过多的 CPU，为此有专门的 SSL 芯片。 如果 CPU 信能比较低的话，肯定会降低性能，从而不能 serve 更多的请求。&lt;/p>
&lt;p>附 SSL 的简介&lt;/p>
&lt;p>SSL 是 Netscape 公司所提出的安全保密协议，在浏览器(如 Internet Explorer、Netscape Navigator)和 Web 服务器(如 Netscape 的 Netscape Enterprise Server、ColdFusion Server 等等)之间构造安全通道来进行数据传输，SSL 运行在 TCP/IP 层之上、应用层之下，为应用程序提供加密数据通道，它采用了 RC4、MD5 以及 RSA 等加密算法，使用 40 位的密钥，适用于商业信息的加密。&lt;/p>
&lt;p>同时，Netscape 公司相应开发了 HTTPS 协议并内置于其浏览器中，HTTPS 实际上就是 SSL over HTTP，它使用默认端口 443，而不是像 HTTP 那样使用端口 80 来和 TCP/IP 进行通信。HTTPS 协议使用 SSL 在发送方把原始数据进行加密，然 后在接受方进行解密，加密和解密需要发送方和接受方通过交换共知的密钥来实现，因此，所传送的数据不容易被网络黑客截获和解密。&lt;/p>
&lt;p>然而，加密和解密过程需要耗费系统大量的开销，严重降低机器的性能，相关测试数据表明使用 HTTPS 协议传输数据的工作效率只有使用 HTTP 协议传输的十分之一。&lt;/p>
&lt;p>假如为了安全保密，将一个网站所有的 Web 应用都启用 SSL 技术来加密，并使用 HTTPS 协议进行传输，那么该网站的性能和效率将会大大降低，而且 没有这个必要，因为一般来说并不是所有数据都要求那么高的安全保密级别，所以，我们只需对那些涉及机密数据的交互处理使用 HTTPS 协议，这样就做到鱼与 熊掌兼得。总之不需要用 https 的地方，就尽量不要用。&lt;/p>
&lt;h1 id="双向认证">双向认证&lt;/h1>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qygdgr/1660900843557-9912cd1f-2f59-4860-97e3-f9a8640772bf.png" alt="">&lt;/p></description></item><item><title>Docs: HTTPS 交互流程(ECDHE 算法)</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/HTTP/HTTPS/HTTPS-%E4%BA%A4%E4%BA%92%E6%B5%81%E7%A8%8BECDHE-%E7%AE%97%E6%B3%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/HTTP/HTTPS/HTTPS-%E4%BA%A4%E4%BA%92%E6%B5%81%E7%A8%8BECDHE-%E7%AE%97%E6%B3%95/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/pLyR8zuw4l7Z6sdUZ4IL5w">公众号-小林 coding，这 HTTPS，真滴牛逼！&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>HTTPS 常用的密钥交换算法有两种，分别是 RSA 和 ECDHE 算法。&lt;/p>
&lt;p>其中，RSA 是比较传统的密钥交换算法，它不具备前向安全的性质，因此现在很少服务器使用的。而 ECDHE 算法具有前向安全，所以被广泛使用。&lt;/p>
&lt;p>我在上一篇已经介绍了 RSA 握手的过程，今天这一篇就「从理论再到实战抓包」介绍 &lt;strong>ECDHE 算法&lt;/strong>。&lt;/p>
&lt;h3 id="离散对数">离散对数&lt;/h3>
&lt;p>ECDHE 密钥协商算法是 DH 算法演进过来的，所以我们先从 DH 算法说起。&lt;/p>
&lt;p>DH 算法是非对称加密算法， 因此它可以用于密钥交换，该算法的核心数学思想是&lt;strong>离散对数&lt;/strong>。&lt;/p>
&lt;p>是不是听到这个数学概念就怂了？不怕，这次不会说离散对数推到的过程，只简单提一下它的数学公式。&lt;/p>
&lt;p>离散对数是「离散 + 对数」的两个数学概念的组合，所以我们先来复习一遍对数。&lt;/p>
&lt;p>要说起对数，必然要说指数，因为它们是互为反函数，指数就是幂运算，对数是指数的逆运算。&lt;/p>
&lt;p>举个栗子，如果以 2 作为底数，那么指数和对数运算公式，如下图所示：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/dcp3g1/1616161079316-312e475f-cb69-45af-8289-7931f6ba39fa.png" alt="">&lt;/p>
&lt;p>那么对于底数为 2 的时候， 32 的对数是 5，64 的对数是 6，计算过程如下：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/dcp3g1/1616161079333-e70a9a79-3367-4ab3-b41f-87d78ba1f188.png" alt="">&lt;/p>
&lt;p>对数运算的取值是可以连续的，而离散对数的取值是不能连续的，因此也以「离散」得名，&lt;/p>
&lt;p>离散对数是在对数运算的基础上加了「模运算」，也就说取余数，对应编程语言的操作符是「%」，也可以用 mod 表示。离散对数的概念如下图：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/dcp3g1/1616161079336-e6d23927-9889-4040-ba45-a7c468d0e9b4.png" alt="">&lt;/p>
&lt;p>上图的，底数 a 和模数 p 是离散对数的公共参数，也就说是公开的，b 是真数，i 是对数。知道了对数，就可以用上面的公式计算出真数。但反过来，知道真数却很难推算出对数。&lt;/p>
&lt;p>&lt;strong>特别是当模数 p 是一个很大的质数，即使知道底数 a 和真数 b ，在现有的计算机的计算水平是几乎无法算出离散对数的，这就是 DH 算法的数学基础。&lt;/strong>&lt;/p>
&lt;hr>
&lt;h3 id="dh-算法">DH 算法&lt;/h3>
&lt;p>认识了离散对数，我们来看看 DH 算法是如何密钥交换的。&lt;/p>
&lt;p>现假设小红和小明约定使用 DH 算法来交换密钥，那么基于离散对数，小红和小明需要先确定模数和底数作为算法的参数，这两个参数是公开的，用 P 和 G 来代称。&lt;/p>
&lt;p>然后小红和小明各自生成一个随机整数作为&lt;strong>私钥&lt;/strong>，双方的私钥要各自严格保管，不能泄漏，小红的私钥用 a 代称，小明的私钥用 b 代称。&lt;/p>
&lt;p>现在小红和小明双方都有了 P 和 G 以及各自的私钥，于是就可以计算出&lt;strong>公钥&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>小红的公钥记作 A，A = G ^ a ( mod P )；&lt;/li>
&lt;li>小明的公钥记作 B，B = G ^ b ( mod P )；&lt;/li>
&lt;/ul>
&lt;p>A 和 B 也是公开的，因为根据离散对数的原理，从真数（A 和 B）反向计算对数 a 和 b 是非常困难的，至少在现有计算机的计算能力是无法破解的，如果量子计算机出来了，那就有可能被破解，当然如果量子计算机真的出来了，那么密钥协商算法就要做大的升级了。&lt;/p>
&lt;p>双方交换各自 DH 公钥后，小红手上共有 5 个数：P、G、a、A、B，小明手上也同样共有 5 个数：P、G、b、B、A。&lt;/p>
&lt;p>然后小红执行运算：B ^ a ( mod P )，其结果为 K，因为离散对数的幂运算有交换律，所以小明执行运算：A ^ b ( mod P )，得到的结果也是 K。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/dcp3g1/1616161079410-0f5ff362-59ad-4930-8c5b-702e0ec61916.png" alt="">&lt;/p>
&lt;p>这个 K 就是小红和小明之间用的&lt;strong>对称加密密钥&lt;/strong>，可以作为会话密钥使用。&lt;/p>
&lt;p>可以看到，整个密钥协商过程中，小红和小明公开了 4 个信息：P、G、A、B，其中 P、G 是算法的参数，A 和 B 是公钥，而 a、b 是双方各自保管的私钥，黑客无法获取这 2 个私钥，因此黑客只能从公开的 P、G、A、B 入手，计算出离散对数（私钥）。&lt;/p>
&lt;p>前面也多次强调， 根据离散对数的原理，如果 P 是一个大数，在现有的计算机的计算能力是很难破解出 私钥 a、b 的，破解不出私钥，也就无法计算出会话密钥，因此 DH 密钥交换是安全的。&lt;/p>
&lt;hr>
&lt;h3 id="dhe-算法">DHE 算法&lt;/h3>
&lt;p>根据私钥生成的方式，DH 算法分为两种实现：&lt;/p>
&lt;ul>
&lt;li>static DH 算法，这个是已经被废弃了；&lt;/li>
&lt;li>DHE 算法，现在常用的；&lt;/li>
&lt;/ul>
&lt;p>static DH 算法里有一方的私钥是静态的，也就说每次密钥协商的时候有一方的私钥都是一样的，一般是服务器方固定，即 a 不变，客户端的私钥则是随机生成的。&lt;/p>
&lt;p>于是，DH 交换密钥时就只有客户端的公钥是变化，而服务端公钥是不变的，那么随着时间延长，黑客就会截获海量的密钥协商过程的数据，因为密钥协商的过程有些数据是公开的，黑客就可以依据这些数据暴力破解出服务器的私钥，然后就可以计算出会话密钥了，于是之前截获的加密数据会被破解，所以 &lt;strong>static DH 算法不具备前向安全性&lt;/strong>。&lt;/p>
&lt;p>既然固定一方的私钥有被破解的风险，那么干脆就让双方的私钥在每次密钥交换通信时，都是随机生成的、临时的，这个方式也就是 DHE 算法，E 全称是 ephemeral（临时性的）。&lt;/p>
&lt;p>所以，即使有个牛逼的黑客破解了某一次通信过程的私钥，其他通信过程的私钥仍然是安全的，因为&lt;strong>每个通信过程的私钥都是没有任何关系的，都是独立的，这样就保证了「前向安全」&lt;/strong>。&lt;/p>
&lt;hr>
&lt;h3 id="ecdhe-算法">ECDHE 算法&lt;/h3>
&lt;p>DHE 算法由于计算性能不佳，因为需要做大量的乘法，为了提升 DHE 算法的性能，所以就出现了现在广泛用于密钥交换算法 —— &lt;strong>ECDHE 算法&lt;/strong>。&lt;/p>
&lt;p>ECDHE 算法是在 DHE 算法的基础上利用了 ECC 椭圆曲线特性，可以用更少的计算量计算出公钥，以及最终的会话密钥。&lt;/p>
&lt;p>小红和小明使用 ECDHE 密钥交换算法的过程：&lt;/p>
&lt;ul>
&lt;li>双方事先确定好使用哪种椭圆曲线，和曲线上的基点 G，这两个参数都是公开的；&lt;/li>
&lt;li>双方各自随机生成一个随机数作为&lt;strong>私钥 d&lt;/strong>，并与基点 G 相乘得到&lt;strong>公钥 Q&lt;/strong>（Q = dG），此时小红的公私钥为 Q1 和 d1，小明的公私钥为 Q2 和 d2；&lt;/li>
&lt;li>双方交换各自的公钥，最后小红计算点（x1，y1） = d1Q2，小明计算点（x2，y2） = d2Q1，由于椭圆曲线上是可以满足乘法交换和结合律，所以 d1Q2 = d1d2G = d2d1G = d2Q1 ，因此&lt;strong>双方的 x 坐标是一样的，所以它是共享密钥，也就是会话密钥&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;p>这个过程中，双方的私钥都是随机、临时生成的，都是不公开的，即使根据公开的信息（椭圆曲线、公钥、基点 G）也是很难计算出椭圆曲线上的离散对数（私钥）。&lt;/p>
&lt;hr>
&lt;h3 id="ecdhe-握手过程">ECDHE 握手过程&lt;/h3>
&lt;p>知道了 ECDHE 算法基本原理后，我们就结合实际的情况来看看。&lt;/p>
&lt;p>我用 Wireshark 工具抓了用 ECDHE 密钥协商算法的 TSL 握手过程，可以看到是四次握手：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/dcp3g1/1616161079396-cb3c352a-51fd-4666-8b40-06b3abfb18b1.png" alt="">&lt;/p>
&lt;p>细心的小伙伴应该发现了，&lt;strong>使用了 ECDHE，在 TLS 第四次握手前，客户端就已经发送了加密的 HTTP 数据&lt;/strong>，而对于 RSA 握手过程，必须要完成 TLS 四次握手，才能传输应用数据。&lt;/p>
&lt;p>所以，&lt;strong>ECDHE 相比 RSA 握手过程省去了一个消息往返的时间&lt;/strong>，这个有点「抢跑」的意思，它被称为是「&lt;em>TLS False Start&lt;/em>」，跟「&lt;em>TCP Fast Open&lt;/em>」有点像，都是在还没连接完全建立前，就发送了应用数据，这样便提高了传输的效率。&lt;/p>
&lt;p>接下来，分析每一个 ECDHE 握手过程。&lt;/p>
&lt;p>TLS 第一次握手&lt;/p>
&lt;p>客户端首先会发一个「&lt;strong>Client Hello&lt;/strong>」消息，消息里面有客户端使用的 TLS 版本号、支持的密码套件列表，以及生成的&lt;strong>随机数（***&lt;strong>Client Random&lt;/strong>*&lt;/strong>）**。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/dcp3g1/1616161079363-01339e83-2b01-4b86-a51f-158604aec01c.png" alt="">&lt;/p>
&lt;p>TLS 第二次握手&lt;/p>
&lt;p>服务端收到客户端的「打招呼」，同样也要回礼，会返回「&lt;strong>Server Hello&lt;/strong>」消息，消息面有服务器确认的 TLS 版本号，也给出了一个&lt;strong>随机数（***&lt;strong>Server Random&lt;/strong>*&lt;/strong>）**，然后从客户端的密码套件列表选择了一个合适的密码套件。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/dcp3g1/1616161079346-2d236807-70d0-4ab9-8435-d9d1fd616d48.png" alt="">&lt;/p>
&lt;p>不过，这次选择的密码套件就和 RSA 不一样了，我们来分析一下这次的密码套件的意思。&lt;/p>
&lt;p>「 TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384」&lt;/p>
&lt;ul>
&lt;li>密钥协商算法使用 ECDHE；&lt;/li>
&lt;li>签名算法使用 RSA；&lt;/li>
&lt;li>握手后的通信使用 AES 对称算法，密钥长度 256 位，分组模式是 GCM；&lt;/li>
&lt;li>摘要算法使用 SHA384；&lt;/li>
&lt;/ul>
&lt;p>接着，服务端为了证明自己的身份，发送「&lt;strong>Certificate&lt;/strong>」消息，会把证书也发给客户端。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/dcp3g1/1616161079339-c3c5361d-6e16-442d-9689-5e0bcd8c3dd4.png" alt="">&lt;/p>
&lt;p>这一步就和 RSA 握手过程有很大到区别了，因为服务端选择了 ECDHE 密钥协商算法，所以会在发送完证书后，发送「&lt;strong>Server Key Exchange&lt;/strong>」消息。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/dcp3g1/1616161079354-28ca02df-58e1-4973-98ca-9ebf05385b3d.png" alt="">&lt;/p>
&lt;p>这个过程服务器做了三件事：&lt;/p>
&lt;ul>
&lt;li>选择了&lt;strong>名为 named_curve 的椭圆曲线&lt;/strong>，选好了椭圆曲线相当于椭圆曲线基点 G 也定好了，这些都会公开给客户端；&lt;/li>
&lt;li>生成随机数作为服务端椭圆曲线的私钥，保留到本地；&lt;/li>
&lt;li>根据基点 G 和私钥计算出&lt;strong>服务端的椭圆曲线公钥&lt;/strong>，这个会公开给客户端。&lt;/li>
&lt;/ul>
&lt;p>为了保证这个椭圆曲线的公钥不被第三方篡改，服务端会用 RSA 签名算法给服务端的椭圆曲线公钥做个签名。&lt;/p>
&lt;p>随后，就是「&lt;strong>Server Hello Done&lt;/strong>」消息，服务端跟客户端表明：“这些就是我提供的信息，打招呼完毕”。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/dcp3g1/1616161079353-e59ab88d-3cc9-4318-8c16-dc534d248e0a.png" alt="">&lt;/p>
&lt;p>至此，TLS 两次握手就已经完成了，目前客户端和服务端通过明文共享了这几个信息：&lt;strong>Client Random、Server Random 、使用的椭圆曲线、椭圆曲线基点 G、服务端椭圆曲线的公钥&lt;/strong>，这几个信息很重要，是后续生成会话密钥的材料。&lt;/p>
&lt;p>TLS 第三次握手&lt;/p>
&lt;p>客户端收到了服务端的证书后，自然要校验证书是否合法，如果证书合法，那么服务端到身份就是没问题的。校验证书到过程，会走证书链逐级验证，确认证书的真实性，再用证书的公钥验证签名，这样就能确认服务端的身份了，确认无误后，就可以继续往下走。&lt;/p>
&lt;p>客户端会生成一个随机数作为客户端椭圆曲线的私钥，然后再根据服务端前面给的信息，生成&lt;strong>客户端的椭圆曲线公钥&lt;/strong>，然后用「&lt;strong>Client Key Exchange&lt;/strong>」消息发给服务端。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/dcp3g1/1616161079379-454c2d83-0d99-432c-a365-ec9d421264c6.png" alt="">&lt;/p>
&lt;p>至此，双方都有对方的椭圆曲线公钥、自己的椭圆曲线私钥、椭圆曲线基点 G。于是，双方都就计算出点（x，y），其中 x 坐标值双方都是一样的，前面说 ECDHE 算法时候，说 x 是会话密钥，&lt;strong>但实际应用中，x 还不是最终的会话密钥&lt;/strong>。&lt;/p>
&lt;p>还记得 TLS 握手阶段，客户端和服务端都会生成了一个随机数传递给对方吗？&lt;/p>
&lt;p>&lt;strong>最终的会话密钥，就是用「客户端随机数 + 服务端随机数 + x（ECDHE 算法算出的共享密钥） 」三个材料生成的&lt;/strong>。&lt;/p>
&lt;p>之所以这么麻烦，是因为 TLS 设计者不信任客户端或服务器「伪随机数」的可靠性，为了保证真正的完全随机，把三个不可靠的随机数混合起来，那么「随机」的程度就非常高了，足够让黑客计算出最终的会话密钥，安全性更高。&lt;/p>
&lt;p>算好会话密钥后，客户端会发一个「&lt;strong>Change Cipher Spec&lt;/strong>」消息，告诉服务端后续改用对称算法加密通信。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/dcp3g1/1616161079357-dace13e4-767a-4e9f-8065-088d25cb9e87.png" alt="">&lt;/p>
&lt;p>接着，客户端会发「&lt;strong>Encrypted Handshake Message&lt;/strong>」消息，把之前发送的数据做一个摘要，再用对称密钥加密一下，让服务端做个验证，验证下本次生成的对称密钥是否可以正常使用。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/dcp3g1/1616161079349-ca3ffe7c-cf01-4e7c-8fc8-c9a966c7ce85.png" alt="">&lt;/p>
&lt;p>TLS 第四次握手&lt;/p>
&lt;p>最后，服务端也会有一个同样的操作，发「&lt;strong>Change Cipher Spec&lt;/strong>」和「&lt;strong>Encrypted Handshake Message&lt;/strong>」消息，如果双方都验证加密和解密没问题，那么握手正式完成。于是，就可以正常收发加密的 HTTP 请求和响应了。&lt;/p>
&lt;hr>
&lt;h3 id="总结">总结&lt;/h3>
&lt;p>RSA 和 ECDHE 握手过程的区别：&lt;/p>
&lt;ul>
&lt;li>RSA 密钥协商算法「不支持」前向保密，ECDHE 密钥协商算法「支持」前向保密；&lt;/li>
&lt;li>使用了 RSA 密钥协商算法，TLS 完成四次握手后，才能进行应用数据传输，而对于 ECDHE 算法，客户端可以不用等服务端的最后一次 TLS 握手，就可以提前发出加密的 HTTP 数据，节省了一个消息的往返时间；&lt;/li>
&lt;li>使用 ECDHE， 在 TLS 第 2 次握手中，会出现服务器端发出的「Server Key Exchange」消息，而 RSA 握手过程没有该消息；&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>巨人的肩膀&lt;/p>
&lt;ol>
&lt;li>&lt;a href="https://zh.wikipedia.org/wiki/">https://zh.wikipedia.org/wiki/&lt;/a>橢圓曲線迪菲-赫爾曼金鑰交換&lt;/li>
&lt;li>&lt;a href="https://zh.wikipedia.org/wiki/">https://zh.wikipedia.org/wiki/&lt;/a>椭圆曲线&lt;/li>
&lt;li>&lt;a href="https://zh.wikipedia.org/wiki/">https://zh.wikipedia.org/wiki/&lt;/a>迪菲-赫爾曼密鑰交換&lt;/li>
&lt;li>&lt;a href="https://time.geekbang.org/column/article/148188">https://time.geekbang.org/column/article/148188&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zhuanlan.zhihu.com/p/106967180">https://zhuanlan.zhihu.com/p/106967180&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>Docs: HTTPS 交互流程(RSA 算法)</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/HTTP/HTTPS/HTTPS-%E4%BA%A4%E4%BA%92%E6%B5%81%E7%A8%8BRSA-%E7%AE%97%E6%B3%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/HTTP/HTTPS/HTTPS-%E4%BA%A4%E4%BA%92%E6%B5%81%E7%A8%8BRSA-%E7%AE%97%E6%B3%95/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/U9SRLE7jZTB6lUZ6c8gTKg">公众号-小林 coding，几幅图，拿下 HTTPS&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>对于还不知道对称加密和非对称加密的同学，你先复习我以前的这篇文章「&lt;a href="https://mp.weixin.qq.com/s/bUy220-ect00N4gnO0697A">硬核！30 张图解 HTTP 常见的面试题&lt;/a>」，本篇文章默认大家已经具备了这些知识。&lt;/p>
&lt;h1 id="tls-握手过程">TLS 握手过程&lt;/h1>
&lt;p>HTTP 由于是明文传输，所谓的明文，就是说客户端与服务端通信的信息都是肉眼可见的，随意使用一个抓包工具都可以截获通信的内容。&lt;/p>
&lt;p>所以安全上存在以下三个风险：&lt;/p>
&lt;ul>
&lt;li>&lt;em>窃听风险&lt;/em>，比如通信链路上可以获取通信内容，用户号容易没。&lt;/li>
&lt;li>&lt;em>篡改风险&lt;/em>，比如强制植入垃圾广告，视觉污染，用户眼容易瞎。&lt;/li>
&lt;li>&lt;em>冒充风险&lt;/em>，比如冒充淘宝网站，用户钱容易没。&lt;/li>
&lt;/ul>
&lt;p>HTTPS 在 HTTP 与 TCP 层之间加入了 TLS 协议，来解决上述的风险。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/udi7ae/1616161091237-b99e9ec3-2c6b-439b-8176-cfbeae42a6f7.jpeg" alt="">&lt;/p>
&lt;p>TLS 协议是如何解决 HTTP 的风险的呢？&lt;/p>
&lt;ul>
&lt;li>&lt;em>信息加密&lt;/em>：HTTP 交互信息是被加密的，第三方就无法被窃取；&lt;/li>
&lt;li>&lt;em>校验机制&lt;/em>：校验信息传输过程中是否有被第三方篡改过，如果被篡改过，则会有警告提示；&lt;/li>
&lt;li>&lt;em>身份证书&lt;/em>：证明淘宝是真的淘宝网；&lt;/li>
&lt;/ul>
&lt;p>可见，有了 TLS 协议，能保证 HTTP 通信是安全的了，那么在进行 HTTP 通信前，需要先进行 TLS 握手。TLS 的握手过程，如下图：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/udi7ae/1616161091232-869775d0-542d-47bc-9415-06a89c321a0a.png" alt="">&lt;/p>
&lt;p>上图简要概述来 TLS 的握手过程，其中每一个「框」都是一个记录（&lt;em>record&lt;/em>），记录是 TLS 收发数据的基本单位，类似于 TCP 里的 segment。多个记录可以组合成一个 TCP 包发送，所以&lt;strong>通常经过「四个消息」就可以完成 TLS 握手，也就是需要 2 个 RTT 的时延&lt;/strong>，然后就可以在安全的通信环境里发送 HTTP 报文，实现 HTTPS 协议。&lt;/p>
&lt;p>所以可以发现，HTTPS 是应用层协议，需要先完成 TCP 连接建立，然后走 TLS 握手过程后，才能建立通信安全的连接。&lt;/p>
&lt;p>事实上，不同的密钥交换算法，TLS 的握手过程可能会有一些区别。&lt;/p>
&lt;p>这里先简单介绍下密钥交换算法，因为考虑到性能的问题，所以双方在加密应用信息时使用的是对称加密密钥，而对称加密密钥是不能被泄漏的，为了保证对称加密密钥的安全性，所以使用非对称加密的方式来保护对称加密密钥的协商，这个工作就是密钥交换算法负责的。&lt;/p>
&lt;p>接下来，我们就以最简单的 &lt;code>RSA&lt;/code> 密钥交换算法，来看看它的 TLS 握手过程。&lt;/p>
&lt;h1 id="rsa-算法握手过程">RSA 算法握手过程&lt;/h1>
&lt;p>传统的 TLS 握手基本都是使用 RSA 算法来实现密钥交换的，在将 TLS 证书部署服务端时，证书文件中包含一对公私钥，其中公钥会在 TLS 握手阶段传递给客户端，私钥则一直留在服务端，一定要确保私钥不能被窃取。&lt;/p>
&lt;p>在 RSA 密钥协商算法中，客户端会生成随机密钥，并使用服务端的公钥加密后再传给服务端。根据非对称加密算法，公钥加密的消息仅能通过私钥解密，这样服务端解密后，双方就得到了相同的密钥，再用它加密应用消息。&lt;/p>
&lt;p>我用 Wireshark 工具抓了用 RSA 密钥交换的 TLS 握手过程，你可以从下面看到，一共经历来四次握手：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/udi7ae/1616161091227-617dff70-97a1-4db1-a290-7b7148af1b06.png" alt="">&lt;/p>
&lt;p>对应 Wireshark 的抓包，我也画了一幅图，你可以从下图很清晰地看到该过程：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/udi7ae/1616161091235-90f13da3-66fe-48fd-bfd3-4e2a8600cc95.png" alt="">&lt;/p>
&lt;p>那么，接下来针对每一个 TLS 握手做进一步的介绍。&lt;/p>
&lt;h2 id="tls-第一次握手">TLS 第一次握手&lt;/h2>
&lt;p>客户端首先会发一个「&lt;strong>Client Hello&lt;/strong>」消息，字面意思我们也能理解到，这是跟服务器「打招呼」。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/udi7ae/1616161091237-d3daea27-ccfe-49e9-812e-a20f2f246a7d.png" alt="">&lt;/p>
&lt;p>消息里面有客户端使用的 TLS 版本号、支持的密码套件列表，以及生成的&lt;strong>随机数（***&lt;strong>Client Random&lt;/strong>*&lt;/strong>）**，这个随机数会被服务端保留，它是生成对称加密密钥的材料之一。&lt;/p>
&lt;h2 id="tls-第二次握手">TLS 第二次握手&lt;/h2>
&lt;p>当服务端收到客户端的「Client Hello」消息后，会确认 TLS 版本号是否支持，和从密码套件列表中选择一个密码套件，以及生成&lt;strong>随机数（***&lt;strong>Server Random&lt;/strong>*&lt;/strong>）**。&lt;/p>
&lt;p>接着，返回「&lt;strong>Server Hello&lt;/strong>」消息，消息里面有服务器确认的 TLS 版本号，也给出了随机数（Server Random），然后从客户端的密码套件列表选择了一个合适的密码套件。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/udi7ae/1616161091236-50739c65-1ccb-4f8c-92fa-aae4c5ecd3a0.png" alt="">&lt;/p>
&lt;p>可以看到，服务端选择的密码套件是 “Cipher Suite: TLS_RSA_WITH_AES_128_GCM_SHA256”。&lt;/p>
&lt;p>这个密码套件看起来真让人头晕，好一大串，但是其实它是有固定格式和规范的。基本的形式是「&lt;strong>密钥交换算法 + 签名算法 + 对称加密算法 + 摘要算法&lt;/strong>」， 一般 WITH 单词前面有两个单词，第一个单词是约定密钥交换的算法，第二个单词是约定证书的验证算法。比如刚才的密码套件的意思就是：&lt;/p>
&lt;ul>
&lt;li>由于 WITH 单词只有一个 RSA，则说明握手时密钥交换算法和签名算法都是使用 RSA；&lt;/li>
&lt;li>握手后的通信使用 AES 对称算法，密钥长度 128 位，分组模式是 GCM；&lt;/li>
&lt;li>摘要算法 SHA384 用于消息认证和产生随机数；&lt;/li>
&lt;/ul>
&lt;p>就前面这两个客户端和服务端相互「打招呼」的过程，客户端和服务端就已确认了 TLS 版本和使用的密码套件，而且你可能发现客户端和服务端都会各自生成一个随机数，并且还会把随机数传递给对方。&lt;/p>
&lt;p>那这个随机数有啥用呢？其实这两个随机数是后续作为生成「会话密钥」的条件，所谓的会话密钥就是数据传输时，所使用的对称加密密钥。&lt;/p>
&lt;p>然后，服务端为了证明自己的身份，会发送「&lt;strong>Server Certificate&lt;/strong>」给客户端，这个消息里含有数字证书。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/udi7ae/1616161091288-f8cf8f4b-afa3-4f36-8f34-595fd9f3a832.png" alt="">&lt;/p>
&lt;p>随后，服务端发了「&lt;strong>Server Hello Done&lt;/strong>」消息，目的是告诉客户端，我已经把该给你的东西都给你了，本次打招呼完毕。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/udi7ae/1616161091257-6f83e7e9-62a9-4975-b627-967dde3b7744.png" alt="">&lt;/p>
&lt;h2 id="客户端验证证书">客户端验证证书&lt;/h2>
&lt;p>在这里刹个车，客户端拿到了服务端的数字证书后，要怎么校验该数字证书是真实有效的呢？&lt;/p>
&lt;h3 id="数字证书和-ca-机构">&lt;strong>数字证书和 CA 机构&lt;/strong>&lt;/h3>
&lt;p>在说校验数字证书是否可信的过程前，我们先来看看数字证书是什么，一个数字证书通常包含了：&lt;/p>
&lt;ul>
&lt;li>公钥；&lt;/li>
&lt;li>持有者信息；&lt;/li>
&lt;li>证书认证机构（CA）的信息；&lt;/li>
&lt;li>CA 对这份文件的数字签名及使用的算法；&lt;/li>
&lt;li>证书有效期；&lt;/li>
&lt;li>还有一些其他额外信息；&lt;/li>
&lt;/ul>
&lt;p>那数字证书的作用，是用来认证公钥持有者的身份，以防止第三方进行冒充。说简单些，证书就是用来告诉客户端，该服务端是否是合法的，因为只有证书合法，才代表服务端身份是可信的。&lt;/p>
&lt;p>我们用证书来认证公钥持有者的身份（服务端的身份），那证书又是怎么来的？又该怎么认证证书呢？&lt;/p>
&lt;p>为了让服务端的公钥被大家信任，服务端的证书都是由 CA （&lt;em>Certificate Authority&lt;/em>，证书认证机构）签名的，CA 就是网络世界里的公安局、公证中心，具有极高的可信度，所以由它来给各个公钥签名，信任的一方签发的证书，那必然证书也是被信任的。&lt;/p>
&lt;p>之所以要签名，是因为签名的作用可以避免中间人在获取证书时对证书内容的篡改。&lt;/p>
&lt;h3 id="数字证书签发和验证流程">数字证书签发和验证流程&lt;/h3>
&lt;p>如下图图所示，为数字证书签发和验证流程：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/udi7ae/1616161091349-49d23cec-ab20-44c7-b339-11660cb1f4c6.png" alt="">&lt;/p>
&lt;p>CA 签发证书的过程，如上图左边部分：&lt;/p>
&lt;ul>
&lt;li>首先 CA 会把持有者的公钥、用途、颁发者、有效时间等信息打成一个包，然后对这些信息进行 Hash 计算，得到一个 Hash 值；&lt;/li>
&lt;li>然后 CA 会使用自己的私钥将该 Hash 值加密，生成 Certificate Signature，也就是 CA 对证书做了签名；&lt;/li>
&lt;li>最后将 Certificate Signature 添加在文件证书上，形成数字证书；&lt;/li>
&lt;/ul>
&lt;p>客户端校验服务端的数字证书的过程，如上图右边部分：&lt;/p>
&lt;ul>
&lt;li>首先客户端会使用同样的 Hash 算法获取该证书的 Hash 值 H1；&lt;/li>
&lt;li>通常浏览器和操作系统中集成了 CA 的公钥信息，浏览器收到证书后可以使用 CA 的公钥解密 Certificate Signature 内容，得到一个 Hash 值 H2 ；&lt;/li>
&lt;li>最后比较 H1 和 H2，如果值相同，则为可信赖的证书，否则则认为证书不可信。&lt;/li>
&lt;/ul>
&lt;h3 id="证书链">证书链&lt;/h3>
&lt;p>但事实上，证书的验证过程中还存在一个证书信任链的问题，因为我们向 CA 申请的证书一般不是根证书签发的，而是由中间证书签发的，比如百度的证书，从下图你可以看到，证书的层级有三级：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/udi7ae/1616161091261-64484a59-fa0d-4e8f-bd65-1e21b9a2a21a.png" alt="">&lt;/p>
&lt;p>对于这种三级层级关系的证书的验证过程如下：&lt;/p>
&lt;ul>
&lt;li>客户端收到 baidu.com 的证书后，发现这个证书的签发者不是根证书，就无法根据本地已有的根证书中的公钥去验证 baidu.com 证书是否可信。于是，客户端根据 baidu.com 证书中的签发者，找到该证书的颁发机构是 “GlobalSign Organization Validation CA - SHA256 - G2”，然后向 CA 请求该中间证书。&lt;/li>
&lt;li>请求到证书后发现 “GlobalSign Organization Validation CA - SHA256 - G2” 证书是由 “GlobalSign Root CA” 签发的，由于 “GlobalSign Root CA” 没有再上级签发机构，说明它是根证书，也就是自签证书。应用软件会检查此证书有否已预载于根证书清单上，如果有，则可以利用根证书中的公钥去验证 “GlobalSign Organization Validation CA - SHA256 - G2” 证书，如果发现验证通过，就认为该中间证书是可信的。&lt;/li>
&lt;li>“GlobalSign Organization Validation CA - SHA256 - G2” 证书被信任后，可以使用 “GlobalSign Organization Validation CA - SHA256 - G2” 证书中的公钥去验证 baidu.com 证书的可信性，如果验证通过，就可以信任 baidu.com 证书。&lt;/li>
&lt;/ul>
&lt;p>在这四个步骤中，最开始客户端只信任根证书 GlobalSign Root CA 证书的，然后 “GlobalSign Root CA” 证书信任 “GlobalSign Organization Validation CA - SHA256 - G2” 证书，而 “GlobalSign Organization Validation CA - SHA256 - G2” 证书又信任 baidu.com 证书，于是客户端也信任 baidu.com 证书。&lt;/p>
&lt;p>总括来说，由于用户信任 GlobalSign，所以由 GlobalSign 所担保的 baidu.com 可以被信任，另外由于用户信任操作系统或浏览器的软件商，所以由软件商预载了根证书的 GlobalSign 都可被信任。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/udi7ae/1616161091318-809bae64-fa0d-43d1-afe4-f661122a0d98.png" alt="">&lt;/p>
&lt;p>操作系统里一般都会内置一些根证书，比如我的 MAC 电脑里内置的根证书有这么多：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/udi7ae/1616161091259-de5a6043-af08-4d6d-9c4f-b4a058fbfdb2.png" alt="">&lt;/p>
&lt;p>这样的一层层地验证就构成了一条信任链路，整个证书信任链验证流程如下图所示：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/udi7ae/1616161091295-62aa78be-4d1e-4f6b-a3f0-3b3fabba02bc.png" alt="">&lt;/p>
&lt;p>最后一个问题，为什么需要证书链这么麻烦的流程？Root CA 为什么不直接颁发证书，而是要搞那么多中间层级呢？&lt;/p>
&lt;p>这是为了确保根证书的绝对安全性，将根证书隔离地越严格越好，不然根证书如果失守了，那么整个信任链都会有问题。&lt;/p>
&lt;h2 id="tls-第三次握手">TLS 第三次握手&lt;/h2>
&lt;p>客户端验证完证书后，认为可信则继续往下走。接着，客户端就会生成一个新的&lt;strong>随机数 (***&lt;strong>pre-master&lt;/strong>*&lt;/strong>)**，用服务器的 RSA 公钥加密该随机数，通过「**Change Cipher Key Exchange**」消息传给服务端。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/udi7ae/1616161091269-3925f66e-1b80-4cb4-ab73-d285a983c320.png" alt="">&lt;/p>
&lt;p>服务端收到后，用 RSA 私钥解密，得到客户端发来的随机数 (pre-master)。&lt;/p>
&lt;p>至此，&lt;strong>客户端和服务端双方都共享了三个随机数，分别是 Client Random、Server Random、pre-master&lt;/strong>。&lt;/p>
&lt;p>于是，双方根据已经得到的三个随机数，生成&lt;strong>会话密钥（Master Secret）&lt;/strong>，它是对称密钥，用于对后续的 HTTP 请求/响应的数据加解密。&lt;/p>
&lt;p>生成完会话密钥后，然后客户端发一个「&lt;strong>Change Cipher Spec&lt;/strong>」，告诉服务端开始使用加密方式发送消息。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/udi7ae/1616161091272-a6d1ed2b-37bd-4867-a998-6d62b1f9c9af.png" alt="">&lt;/p>
&lt;p>然后，客户端再发一个「&lt;strong>Encrypted Handshake Message（Finishd）&lt;/strong>」消息，把之前所有发送的数据做个摘要，再用会话密钥（master secret）加密一下，让服务器做个验证，验证加密通信是否可用和之前握手信息是否有被中途篡改过。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/udi7ae/1616161091287-31494766-9b3d-4b15-a1c4-8ec5eda314e6.png" alt="">&lt;/p>
&lt;p>可以发现，「Change Cipher Spec」之前传输的 TLS 握手数据都是明文，之后都是对称密钥加密的密文。&lt;/p>
&lt;h2 id="tls-第四次握手">TLS 第四次握手&lt;/h2>
&lt;p>服务器也是同样的操作，发「&lt;strong>Change Cipher Spec&lt;/strong>」和「&lt;strong>Encrypted Handshake Message&lt;/strong>」消息，如果双方都验证加密和解密没问题，那么握手正式完成。&lt;/p>
&lt;p>最后，就用「会话密钥」加解密 HTTP 请求和响应了。&lt;/p>
&lt;h1 id="rsa-算法的缺陷">RSA 算法的缺陷&lt;/h1>
&lt;p>&lt;strong>使用 RSA 密钥协商算法的最大问题是不支持前向保密&lt;/strong>。因为客户端传递随机数（用于生成对称加密密钥的条件之一）给服务端时使用的是公钥加密的，服务端收到到后，会用私钥解密得到随机数。所以一旦服务端的私钥泄漏了，过去被第三方截获的所有 TLS 通讯密文都会被破解。&lt;/p>
&lt;p>为了解决这一问题，于是就有了 DH 密钥协商算法，这里简单介绍它的工作流程。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/udi7ae/1616161091265-ee398110-3868-463d-bba9-77318753bec2.png" alt="">&lt;/p>
&lt;p>客户端和服务端各自会生成随机数，并以此作为私钥，然后根据公开的 DH 计算公示算出各自的公钥，通过 TLS 握手双方交换各自的公钥，这样双方都有自己的私钥和对方的公钥，然后双方根据各自持有的材料算出一个随机数，这个随机数的值双方都是一样的，这就可以作为后续对称加密时使用的密钥。&lt;/p>
&lt;p>DH 密钥交换过程中，&lt;strong>即使第三方截获了 TLS 握手阶段传递的公钥，在不知道的私钥的情况下，也是无法计算出密钥的，而且每一次对称加密密钥都是实时生成的，实现前向保密&lt;/strong>。&lt;/p>
&lt;p>但因为 DH 算法的计算效率问题，后面出现了 ECDHE 密钥协商算法，我们现在大多数网站使用的正是 ECDHE 密钥协商算法，关于 ECDHE 握手的过程，将在下一篇揭晓，尽情期待哦。&lt;/p></description></item></channel></rss>