<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦的站点 – TCP/IP</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/TCP_IP/</link><description>Recent content in TCP/IP on 断念梦的站点</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/TCP_IP/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: TCP/IP</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/TCP_IP/TCP_IP/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/TCP_IP/TCP_IP/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://datatracker.ietf.org/doc/html/rfc791">RFC，791&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Internet_protocol_suite">Wiki，Internet protocol suite&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Internet protocol suite(互联网协议簇)&lt;/strong> 通常称为 &lt;strong>TCP/IP&lt;/strong>&lt;/p>
&lt;h2 id="封装">封装&lt;a class="td-heading-self-link" href="#%e5%b0%81%e8%a3%85" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>当应用程序用 TCP 传输数据时，数据被送入协议栈中，然后逐个通过每一层直到被当做一串比特流送入网络。其中每一层对收到的数据都要增加一些首部信息(有时还需要增加尾部信息)，过程如图所示：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/oc8ill/1628821300980-52f384b2-d2c9-4227-a1c5-6481d6cbf20e.png" alt="image.png">&lt;/p>
&lt;p>以太网帧的帧头和帧尾下面所标注的数字是典型以太网帧首部的字节查高难度。以太网数据帧的物理特性是其查高难度必须在 &lt;strong>46~1500 字节之间(也就是 MTU 的长度)&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>注意：所有的 Internet 标准和大多数有关 TCP/IP 的书都使用 octe 这个术语来表示字节。使用这个过分雕琢的术语是有历史原因的，因为 TCP/IP 的很多工作都是在 DEC-10 系统上进行的，但是它并不使用 8bit 的字节。由于现在几乎所有的计算机系统都采用 8bit 的字节，因此我们在本书中使用 Byte(字节) 这个术语。&lt;/p>
&lt;/blockquote>
&lt;p>由于应用数据受 MSS 长度限制，IP 首部 + TCP 首部 + 应用数据受 MTU 长度限制。所以，当一个 IP 报文超过 MTU 时就会进行 &lt;strong>Packet(分片/分组)&lt;/strong>。分组既可以是一个 IP 数据报，也可以是 IP 数据报的一个 &lt;strong>Fragment(片段)&lt;/strong>。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/oc8ill/1628821542180-6dae0209-e7ac-494e-b6f3-715ce143c6d5.png" alt="image.png">&lt;/p></description></item><item><title>Docs: TCP 重置</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/TCP_IP/TCP-%E9%87%8D%E7%BD%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/TCP_IP/TCP-%E9%87%8D%E7%BD%AE/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/-rxFP4iiV_TSKJz9jl3NDQ">公众号-小林coding，原来墙，是这么把我 TCP 连接干掉的！&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>大家好，我是小林。&lt;/p>
&lt;p>再过几天就春节了，应该很多小伙伴都已经放假了，或者是在回家的路上。&lt;/p>
&lt;p>就不聊太硬核的技术了，今天聊一个比较轻松的问题：&lt;strong>如何关闭一个 TCP 连接？&lt;/strong>&lt;/p>
&lt;p>可能大家第一反应是「杀掉进程」不就行了吗？&lt;/p>
&lt;p>是的，这个是最粗暴的方式，杀掉客户端进程和服务端进程影响的范围会有所不同：&lt;/p>
&lt;ul>
&lt;li>在客户端杀掉进程的话，就会发送 FIN 报文，来断开这个客户端进程与服务端建立的所有 TCP 连接，这种方式影响范围只有这个客户端进程所建立的连接，而其他客户端或进程不会受影响。&lt;/li>
&lt;li>而在服务端杀掉进程影响就大了，此时所有的 TCP 连接都会被关闭，服务端无法继续提供访问服务。&lt;/li>
&lt;/ul>
&lt;p>所以，&lt;strong>关闭进程的方式并不可取，最好的方式要精细到关闭某一条 TCP 连接&lt;/strong>。&lt;/p>
&lt;p>有的小伙伴可能会说，&lt;strong>伪造一个四元组相同的 RST 报文不就行了？&lt;/strong>&lt;/p>
&lt;p>这个思路很好，「伪造 RST 报文来关闭 TCP 连接」的方式其实有个专业术语叫：&lt;strong>TCP 重置攻击&lt;/strong>。&lt;/p>
&lt;p>&lt;img src="https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZeJBcVJZVhLicZJJMO0vq6KmnkkBGTEJCR545GVpXgoJHHekWhUIh4NkG3dhnSSSwu0jlrJCw5KToA/640?wx_fmt=png" alt="">&lt;/p>
&lt;p>我们的墙，在过滤网站的时候，其实就是这么干的。当然，墙除了 TCP 重置连接的方式外，还有很多方式来过滤网站，比如域名劫持、IP封锁、HTTPS 证书过滤等等。&lt;/p>
&lt;p>这次我们只重点关注 &lt;strong>TCP 重置技术&lt;/strong>。&lt;/p>
&lt;h1 id="tcp-重置技术">TCP 重置技术&lt;a class="td-heading-self-link" href="#tcp-%e9%87%8d%e7%bd%ae%e6%8a%80%e6%9c%af" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>伪造 RST 报文说来简单，但是不要忘了还有个「序列号」的问题，你伪造的 RST 报文的序列号一定能被对方接受吗？&lt;/p>
&lt;p>如果 RST 报文的序列号不是对方期望收到的序列号，那么这个 RST 报文则会被对方丢弃，就达不到重置 TCP 连接的效果了。&lt;/p>
&lt;p>举个例子，下面这个场景，客户端发送了一个长度为 100 的 TCP 数据报文，服务端收到后响应了 ACK 报文，表示收到了这个 TCP 数据报文。&lt;strong>服务端响应的这个 ACK 报文中的确认号（ack = x + 100）就是表明服务端下一次期望收到的序列号是 x + 100&lt;/strong>。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/tcp/20230427165528.png" alt="image.png">&lt;/p>
&lt;p>所以，要伪造一个有用的 RST 报文，&lt;strong>关键是要拿到对方下一次期望收到的序列号&lt;/strong>。&lt;/p>
&lt;p>这里介绍两个关闭一个 TCP 连接的工具：&lt;strong>tcpkill&lt;/strong> 和 &lt;strong>killcx&lt;/strong>。&lt;/p>
&lt;p>这两个工具都是通过伪造 RST 报文来关闭指定的 TCP 连接，但是它们拿到正确的序列号的实现方式是不同的。&lt;/p>
&lt;ul>
&lt;li>tcpkill 工具是在双方进行 TCP 通信时，拿到对方下一次期望收到的序列号，然后将序列号填充到伪造的 RST 报文，并将其发送给对方，达到关闭 TCP 连接的效果。&lt;/li>
&lt;li>killcx 工具是主动发送一个 SYN 报文，对方收到后会回复一个携带了正确序列号和确认号的 ACK 报文，这个 ACK 被称之为 Challenge ACK，这时就可以拿到对方下一次期望收到的序列号，然后将序列号填充到伪造的 RST 报文，并将其发送给对方，达到关闭 TCP 连接的效果。&lt;/li>
&lt;/ul>
&lt;p>可以看到， 这两个工具在获取对方下一次期望收到的序列号的方式是不同的。&lt;/p>
&lt;p>tcpkill 工具属于被动获取，就是在双方进行 TCP 通信的时候，才能获取到正确的序列号，很显然&lt;strong>这种方式无法关闭非活跃的 TCP 连接&lt;/strong>，只能用于关闭活跃的 TCP 连接。因为如果这条 TCP 连接一直没有任何数据传输，则就永远获取不到正确的序列号。&lt;/p>
&lt;p>killcx 工具则是属于主动获取，它是主动发送一个 SYN 报文，通过对方回复的 Challenge ACK 来获取正确的序列号，所以这种方式&lt;strong>无论 TCP 连接是否活跃，都可以关闭&lt;/strong>。&lt;/p>
&lt;p>接下来，我就用这两个工具做个实验，给大家演示一下，它们是如何关闭一个 TCP 连接的。&lt;/p>
&lt;h1 id="tcpkill-工具">tcpkill 工具&lt;a class="td-heading-self-link" href="#tcpkill-%e5%b7%a5%e5%85%b7" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>在这里， 我用 nc 工具来模拟一个 TCP 服务端，监听 8888 端口。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># nc -l -p 8888&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>模拟一个 TCP 服务端&lt;/p>
&lt;p>接着，在客户端机子上，用 nc 工具模拟一个 TCP 客户端，连接我们刚才启动的服务端，并且指定了客户端的端口为 11111。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># nc 121.43.173.240 8888 -p 11111&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>客户端连接服务端&lt;/p>
&lt;p>这时候， 服务端就可以看到这条 TCP 连接了。&lt;/p>
&lt;p>&lt;img src="https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZeJBcVJZVhLicZJJMO0vq6Km9iasRFwL0ppgNkR7kmLPRHCmB64bKHMPKWvGn1IJ8zIv7k5Ow04H2Fw/640?wx_fmt=png" alt="">&lt;/p>
&lt;p>TCP 连接的四元组信息&lt;/p>
&lt;p>注意，我这台服务端的公网 IP 地址是 121.43.173.240，私网 IP 地址是 172.19.11.21，在服务端通过 netstat 命令查看 TCP 连接的时候，则会将服务端的地址显示成私网 IP 地址 。至此，我们前期工作就做好了。&lt;/p>
&lt;p>接下来，我们在服务端执行 tcpkill 工具，来关闭这条 TCP 连接，看看会发生什么？&lt;/p>
&lt;p>在这里，我指定了要关闭的客户端 IP 为 114.132.166.90 和端口为 11111 的 TCP 连接。&lt;/p>
&lt;p>&lt;img src="https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZeJBcVJZVhLicZJJMO0vq6KmY9KE5GKRJ1R6PRfWEzmmTbrILPe1fFzQXiaRXOjib1LBY8ModpqxWRBg/640?wx_fmt=png" alt="">&lt;/p>
&lt;p>执行 tcpkill&lt;/p>
&lt;p>可以看到，tcpkill 工具阻塞中，没有任何输出，而且此时的 TCP 连接还是存在的，并没有被干掉。&lt;/p>
&lt;p>&lt;img src="https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZeJBcVJZVhLicZJJMO0vq6Km9iasRFwL0ppgNkR7kmLPRHCmB64bKHMPKWvGn1IJ8zIv7k5Ow04H2Fw/640?wx_fmt=png" alt="">&lt;/p>
&lt;p>TCP 连接还存在&lt;/p>
&lt;p>为什么 TCP 连接没用被干掉？&lt;/p>
&lt;p>因为在执行 tcpkill 工具后，这条 TCP 连接并没有传输任何数据，而 tcpkill 工具是需要拦截双方的 TCP 通信，才能获取到正确的序列号，从而才能伪装出正确的序列号的 RST 报文。&lt;/p>
&lt;p>所以，从这里也说明了，&lt;strong>tcpkill 工具不适合关闭非活跃的 TCP 连接&lt;/strong>。&lt;/p>
&lt;p>接下来，我们尝试在客户端发送一个数据。&lt;/p>
&lt;p>&lt;img src="https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZeJBcVJZVhLicZJJMO0vq6Km02icRNbW2GJEzZTOauIezYEO2m2icFxEiaMeqH4Lgt7pJqricH0s6HiaD0w/640?wx_fmt=png" alt="">&lt;/p>
&lt;p>客户端断开了&lt;/p>
&lt;p>可以看到，在发送了「hi」数据后，客户端就断开了，并且错误提示连接被对方关闭了。&lt;/p>
&lt;p>此时，服务端已经查看不到刚才那条 TCP 连接了。&lt;/p>
&lt;p>&lt;img src="https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZeJBcVJZVhLicZJJMO0vq6KmibTCsq2pT5MBIH7HlSosED3uT4ia5JBNeqdbjOf1JEy0Vz82wPElxNjQ/640?wx_fmt=png" alt="">&lt;/p>
&lt;p>刚才那条 TCP 连接已经不存在&lt;/p>
&lt;p>然后，我们在服务端看看 tcpkill 工具输出的信息。&lt;/p>
&lt;p>&lt;img src="https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZeJBcVJZVhLicZJJMO0vq6KmaYAibCeicexGaqLBCt3XD4rDSDWmtNTzf4WUQ2WntZ1sMB5lkkbW8qibA/640?wx_fmt=png" alt="">&lt;/p>
&lt;p>tcpkill 工具输出的信息&lt;/p>
&lt;p>可以看到， &lt;strong>tcpkill 工具给服务端和客户端都发送了伪造的 RST 报文，从而达到关闭一条 TCP 连接的效果&lt;/strong>。&lt;/p>
&lt;p>到这里我们知道了， 运行 tcpkill 工具后，只有目标连接有新 TCP 包发送/接收的时候，才能关闭一条 TCP 连接。因此，&lt;strong>tcpkill 只适合关闭活跃的 TCP 连接，不适合用来关闭非活跃的 TCP 连接&lt;/strong>。&lt;/p>
&lt;p>上面的实验过程，我也抓了数据包，流程如下：&lt;/p>
&lt;p>&lt;img src="https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZeJBcVJZVhLicZJJMO0vq6KmCVfYqrk09PrlJCkeJpC11DiamIDH5wZIgz4BrXUkzj7hia7NMGJa6NnA/640?wx_fmt=png" alt="">&lt;/p>
&lt;p>最后一个 RST 报文就是 tcpkill 工具伪造的 RST 报文。&lt;/p>
&lt;h1 id="killcx-工具">killcx 工具&lt;a class="td-heading-self-link" href="#killcx-%e5%b7%a5%e5%85%b7" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>在前面我提到过，killcx 工具则是属于主动获取，它是主动发送一个 SYN 报文，通过对方回复的 Challenge ACK 来获取正确的序列号，然后将这个正确的序列号填充到伪造的 RST 报文，并将  RST 报文发送给对方，达到关闭连接的效果。&lt;/p>
&lt;p>可能有的小伙伴听到发送 SYN 报文觉得很奇怪，SYN 报文不是建立 TCP 连接时才发送的吗？为什么都已经建立好的 TCP 连接，还要发送 SYN 报文？&lt;/p>
&lt;p>不着急，我先给大家讲讲「已建立连接的TCP，收到 SYN 会发生什么？」&lt;/p>
&lt;p>&lt;strong>处于 Establish 状态的服务端，如果收到了客户端的 SYN 报文，会回复一个携带了正确序列号和确认号的 ACK 报文，这个 ACK 被称之为 Challenge ACK。&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZeJBcVJZVhLicZJJMO0vq6Kmbt0cfSPgYxnpKBLdNNz3mKTDjZA9ibphCriaUoOTibqcibIexxlJ8Micvhw/640?wx_fmt=png" alt="">&lt;/p>
&lt;p>&lt;strong>上图中，服务端针对 SYN 报文响应的 Challenge ACK 报文里的「确认号」，就是服务端下一次期望收到的序列号，Challenge ACK 报文里的「序列号」，就是客户端下一次期望收到的序列号。&lt;/strong>&lt;/p>
&lt;p>之前我也写过一篇文章，源码分析了 「&lt;a href="https://mp.weixin.qq.com/s?__biz=MzUxODAzNDg4NQ==&amp;amp;mid=2247498170&amp;amp;idx=1&amp;amp;sn=8016a3ae1c7453dfa38062d84af820a9&amp;amp;scene=21#wechat_redirect">已建立连接的TCP，收到 SYN 会发生什么？&lt;/a>」，在这里就不贴源码了。大家记住我上面说的结论就行。&lt;/p>
&lt;p>killcx 工具正是通过&lt;strong>伪造一个四元组相同的 SYN 报文，来拿到“合法”的序列号的！&lt;/strong>&lt;/p>
&lt;p>如果处于 establish 状态的连接，在收到四元组相同的 SYN 报文后，&lt;strong>会回复一个 Challenge ACK，这个 ACK 报文里的「确认号」，正好是下一次想要接收的序列号，说白了，就是可以通过这一步拿到对方下一次预期接收的序列号。&lt;/strong>&lt;/p>
&lt;p>&lt;strong>然后用这个确认号作为 RST 报文的序列号，发送给对方，此时对方会认为这个 RST 报文里的序列号是合法的，于是就会释放连接！&lt;/strong>&lt;/p>
&lt;p>killcx 的工具使用方式也很简单，如果在服务端执行 killcx 工具，只需指明客户端的 IP 和端口号，如果在客户端执行 killcx 工具，则就指明服务端的  IP 和端口号。&lt;/p>
&lt;p>&lt;code>killcx &amp;lt;IP地址&amp;gt;:&amp;lt;端口号&amp;gt; &lt;/code>&lt;/p>
&lt;p>killcx 工具的工作原理，如下图，下图是在客户端执行 killcx 工具。&lt;/p>
&lt;p>&lt;img src="https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZeJBcVJZVhLicZJJMO0vq6KmFyGF1VG1PCKZjUGiaibBr9g5Lgja68Kl8YqaPq47jJajnpvTWbDaqRDw/640?wx_fmt=png" alt="">&lt;/p>
&lt;p>killcx 工具伪造客户端发送 SYN 报文，服务端收到后就会回复一个携带了正确「序列号和确认号」的 ACK 报文（Challenge ACK），然后就可以利用这个 ACK 报文里面的信息，伪造两个 RST 报文：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>用 Challenge ACK 里的「确认号」伪造 RST 报文发送给服务端，服务端收到 RST 报文后就会释放连接。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>用 Challenge ACK 里的「序列号」伪造 RST 报文发送给客户端，客户端收到 RST 也会释放连接。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>正是通过这样的方式，成功将一个 TCP 连接关闭了！&lt;/p>
&lt;p>这里给大家贴一个使用 killcx 工具关闭连接的抓包图，大家多看看序列号和确认号的变化。&lt;/p>
&lt;p>&lt;img src="https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZeJBcVJZVhLicZJJMO0vq6Kma36jVIyS4mjgMHguAaHc228AJ2TX2shbUTyibRNrs98hib5QPAdqXoYw/640?wx_fmt=png" alt="">&lt;/p>
&lt;h1 id="总结">总结&lt;a class="td-heading-self-link" href="#%e6%80%bb%e7%bb%93" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>要伪造一个能关闭 TCP 连接的 RST 报文，必须同时满足「四元组相同」和「序列号是对方期望的」这两个条件。&lt;/p>
&lt;p>今天给大家介绍了两种关闭 TCP 连接的工具：tcpkill 和 killcx 工具。&lt;/p>
&lt;p>这两种工具都是通过伪造 RST 报文来关闭 TCP 连接的，但是它们获取「对方下一次期望收到的序列号的方式是不同的，也正因此，造就了这两个工具的应用场景有区别。&lt;/p>
&lt;ul>
&lt;li>tcpkill 工具只能用来关闭活跃的 TCP 连接，无法关闭非活跃的 TCP 连接，因为 tcpkill 工具是等双方进行 TCP 通信后，才去获取正确的序列号，如果这条 TCP 连接一直没有任何数据传输，则就永远获取不到正确的序列号。&lt;/li>
&lt;li>killcx 工具可以用来关闭活跃和非活跃的 TCP 连接，因为 killcx 工具是主动发送 SYN 报文，这时对方就会回复  Challenge ACK ，然后  killcx 工具就能从这个 ACK 获取到正确的序列号。&lt;/li>
&lt;/ul>
&lt;p>怎么样，是不是觉得很巧妙！&lt;/p>
&lt;p>这次就说到这里啦， 我们下次见！溜啦溜啦！&lt;/p></description></item><item><title>Docs: IP</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/TCP_IP/IP/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/TCP_IP/IP/</guid><description/></item><item><title>Docs: TCP</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/TCP_IP/TCP/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/TCP_IP/TCP/</guid><description/></item><item><title>Docs: TCP 异常处理</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/TCP_IP/TCP-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/TCP_IP/TCP-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</guid><description>
&lt;h1 id="tcp-rst">TCP RST&lt;a class="td-heading-self-link" href="#tcp-rst" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.cnblogs.com/JohnABC/p/6323046.html">博客园-John_ABC，Linux-TCG 出现 RST 的几种情况&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://segmentfault.com/a/1190000038463522">https://segmentfault.com/a/1190000038463522&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>TCP RST 引起的常见报错：&lt;/p>
&lt;ul>
&lt;li>Connection reset&lt;/li>
&lt;li>Connection reset by peer&lt;/li>
&lt;/ul>
&lt;p>TCP 连接和释放时还有许多细节，比如半连接状态、半关闭状态等。详情请参考这方面的巨著《TCP/IP 详解》和《UNIX 网络编程》。
前面说到出现“Connection reset”的原因是服务器关闭了 Connection[调用了 Socket.close()方法]。大家可能有疑问了：服务器关闭了 Connection 为什么会返回“RST”而不是返回“FIN”标志。原因在于 Socket.close()方法的语义和 TCP 的“FIN”标志语义不一样：发送 TCP 的“FIN”标志表示我不再发送数据了，而 Socket.close()表示我不在发送也不接受数据了。问题就出在“我不接受数据” 上，如果此时客户端还往服务器发送数据，服务器内核接收到数据，但是发现此时 Socket 已经 close 了，则会返回“RST”标志给客户端。当然，此时客户端就会提示：“Connection reset”。详细说明可以参考 oracle 的有关文档：&lt;a href="http://docs.oracle.com/javase/1.5.0/docs/guide/net/articles/connection%5C_release.html%E3%80%82">http://docs.oracle.com/javase/1.5.0/docs/guide/net/articles/connection\_release.html。&lt;/a>
另一个可能导致的“Connection reset”的原因是服务器设置了 Socket.setLinger (true, 0)。但我检查过线上的 tomcat 配置，是没有使用该设置的，而且线上的服务器都使用了 nginx 进行反向代理，所以并不是该原因导致的。关于该原因上面的 oracle 文档也谈到了并给出了解释。
此外啰嗦一下，另外还有一种比较常见的错误“Connection reset by peer”，该错误和“Connection reset”是有区别的：
服务器返回了“RST”时，如果此时客户端正在从 Socket 套接字的输出流中读数据则会提示 Connection reset”；
服务器返回了“RST”时，如果此时客户端正在往 Socket 套接字的输入流中写数据则会提示“Connection reset by peer”。
“Connection reset by peer”如下图所示：&lt;/p>
&lt;p>前面谈到了导致“Connection reset”的原因，而具体的解决方案有如下几种：
出错了重试；
客户端和服务器统一使用 TCP 长连接；
客户端和服务器统一使用 TCP 短连接。
首先是出错了重试：这种方案可以简单防止“Connection reset”错误，然后如果服务不是“幂等”的则不能使用该方法；比如提交订单操作就不是幂等的，如果使用重试则可能造成重复提单。
然后是客户端和服务器统一使用 TCP 长连接：客户端使用 TCP 长连接很容易配置（直接设置 HttpClient 就好），而服务器配置长连接就比较麻烦了，就拿 tomcat 来说，需要设置 tomcat 的 maxKeepAliveRequests、connectionTimeout 等参数。另外如果使用了 nginx 进行反向代理或负载均衡，此时也需要配置 nginx 以支持长连接（nginx 默认是对客户端使用长连接，对服务器使用短连接）。
使用长连接可以避免每次建立 TCP 连接的三次握手而节约一定的时间，但是我这边由于是内网，客户端和服务器的 3 次握手很快，大约只需 1ms。ping 一下大约 0.93ms（一次往返）；三次握手也是一次往返（第三次握手不用返回）。根据 80/20 原理，1ms 可以忽略不计；又考虑到长连接的扩展性不如短连接好、修改 nginx 和 tomcat 的配置代价很大（所有后台服务都需要修改）；所以这里并没有使用长连接。&lt;/p>
&lt;p>正常情况 tcp 四层握手关闭连接，rst 基本都是异常情况，整理如下： 0.使用 ping 可以看到丢包情况
1. GFW
2. 对方端口未打开，发生在连接建立
如果对方 sync_backlog 满了的话，sync 简单被丢弃，表现为超时，而不会 rst
3. close Socket 时 recv buffer 不为空
例如，客户端发了两个请求，服务器只从 buffer 读取第一个请求处理完就关闭连接，tcp 层认为数据没有正确提交到应用，使用 rst 关闭连接。
3. 移动链路
移动网络下，国内是有 5 分钟后就回收信令，也就是 IM 产品，如果心跳&amp;gt;5 分钟后服务器再给客户端发消息，就会收到 rst。也要查移动网络下 IM 保持&amp;lt;5min 心跳。
4. 负载等设备
负载设备需要维护连接转发策略，长时间无流量，连接也会被清除，而且很多都不告诉两层机器，新的包过来时才通告 rst。
Apple push 服务也有这个问题，而且是不可预期的偶发性连接被 rst；rst 前第一个消息 write 是成功的，而第二条写才会告诉你连接被重置，
曾经被它折腾没辙，因此打开每 2 秒一次 tcp keepalive，固定 5 分钟 tcp 连接回收，而且发现连接出错时，重发之前 10s 内消息。
5. SO_LINGER 应用强制使用 rst 关闭
该选项会直接丢弃未发送完毕的 send buffer，可能造成业务错误，慎用； 当然内网服务间 http client 在收到应该时主动关闭，使用改选项，会节省资源。
好像曾经测试过 haproxy 某种配置下，会使用 rst 关闭连接，少了网络交互而且没有 TIME_WAIT 问题
6. 超过超时重传次数、网络暂时不可达
7. TIME_WAIT 状态
tw_recycle = 1 时，sync timestamps 比上次小时，会被 rst
7. 设置 connect_timeout
应用设置了连接超时，sync 未完成时超时了，会发送 rst 终止连接。
8. 非正常包
连接已经关闭，seq 不正确等
9. keepalive 超时
公网服务 tcp keepalive 最好别打开；移动网络下会增加网络负担，切容易掉线；非移动网络核心 ISP 设备也不一定都支持 keepalive，曾经也发现过广州那边有个核心节点就不支持。
10. 数据错误，不是按照既定序列号发送数据 11.在一个已关闭的 socket 上接收数据 12.服务器关闭或异常终止了连接，由于网络问题，客户端没有收到服务器的关闭请求，这称为 TCP 半打开连接。就算重启服务器，也没有连接信息。如果客户端向提其写入数据，对方就会回应一个 RST 报文段。&lt;/p>
&lt;h1 id="三次握手与四次挥手异常处理">三次握手与四次挥手异常处理&lt;a class="td-heading-self-link" href="#%e4%b8%89%e6%ac%a1%e6%8f%a1%e6%89%8b%e4%b8%8e%e5%9b%9b%e6%ac%a1%e6%8c%a5%e6%89%8b%e5%bc%82%e5%b8%b8%e5%a4%84%e7%90%86" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>原文链接：&lt;a href="https://mp.weixin.qq.com/s/CTqag_TxAHLuUwLvbrmlnw">公众号-小林 coding，TCP 才不傻！&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>大家好，我是小林。&lt;/p>
&lt;p>之前收到个读者的问题，对于 TCP 三次握手和四次挥手的一些疑问：&lt;/p>
&lt;ul>
&lt;li>第一次握手，如果客户端发送的 SYN 一直都传不到被服务器，那么客户端是一直重发 SYN 到永久吗？客户端停止重发 SYN 的时机是什么？&lt;/li>
&lt;li>第三次握手，如果服务器永远不会收到 ACK，服务器就永远都留在 Syn-Recv 状态了吗？退出此状态的时机是什么？&lt;/li>
&lt;li>第三次挥手，如果客户端永远收不到 FIN,ACK，客户端永远停留在 Fin-Wait-2 状态了吗？退出此状态时机是什么时候呢？&lt;/li>
&lt;li>第四次挥手，如果服务器永远收不到 ACK，服务器永远停留在 Last-Ack 状态了吗？退出此状态的时机是什么呢？&lt;/li>
&lt;li>如果客户端 在 2SML 内依旧没收到 FIN,ACK，会关闭链接吗？服务器那边怎么办呢，是怎么关闭链接的呢？&lt;/li>
&lt;/ul>
&lt;p>可以看到，这些问题都是关于 &lt;strong>TCP 是如何处理这些异常场景&lt;/strong>的，我们在学 TCP 连接建立和断开的时候，总是以为这些过程能如期完成。&lt;/p>
&lt;p>&lt;strong>可惜理想很丰满，现实很骨感，事实预料呀&lt;/strong>。&lt;/p>
&lt;p>&lt;strong>TCP 当然不傻&lt;/strong>，对以上这些异常场景都是有做处理的。&lt;/p>
&lt;p>这些内容在我的「图解网络 PDF」 也有说过。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/24e305c7-9ba8-4113-9be1-44404948d366/640" alt="">&lt;/p>
&lt;p>当时也用做实验的方式带大家看 TCP 是如何处理这些异常场景的。&lt;/p>
&lt;blockquote>
&lt;p>如果新读者还不知道小林的图解网络 PDF，可以到我公众号后台回复「图解」获取就行。&lt;/p>
&lt;/blockquote>
&lt;p>不过，当时这些知识分散到了多个章节，这次就针对读者问的这一系列问题，来详细说说 TCP 是怎么处理这些异常的？&lt;/p>
&lt;p>这些异常场景共分为两大类，第一类是 TCP 三次握手期间的异常，第二类是 TCP 四次挥手期间的异常。&lt;/p>
&lt;h3 id="tcp-三次握手期间的异常">TCP 三次握手期间的异常&lt;a class="td-heading-self-link" href="#tcp-%e4%b8%89%e6%ac%a1%e6%8f%a1%e6%89%8b%e6%9c%9f%e9%97%b4%e7%9a%84%e5%bc%82%e5%b8%b8" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>我们先来看看 TCP 三次握手是怎样的。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/24e305c7-9ba8-4113-9be1-44404948d366/640" alt="">&lt;/p>
&lt;h4 id="第一次握手丢失了会发生什么">第一次握手丢失了，会发生什么？&lt;a class="td-heading-self-link" href="#%e7%ac%ac%e4%b8%80%e6%ac%a1%e6%8f%a1%e6%89%8b%e4%b8%a2%e5%a4%b1%e4%ba%86%e4%bc%9a%e5%8f%91%e7%94%9f%e4%bb%80%e4%b9%88" aria-label="Heading self-link">&lt;/a>&lt;/h4>
&lt;p>当客户端想和服务端建立 TCP 连接的时候，首先第一个发的就是 SYN 报文，然后进入到 &lt;code>SYN_SENT&lt;/code> 状态。&lt;/p>
&lt;p>在这之后，如果客户端迟迟收不到服务端的 SYN-ACK 报文（第二次握手），就会触发超时重传机制。&lt;/p>
&lt;p>不同版本的操作系统可能超时时间不同，有的 1 秒的，也有 3 秒的，这个超时时间是写死在内核里的，如果想要更改则需要重新编译内核，比较麻烦。&lt;/p>
&lt;p>当客户端在 1 秒后没收到服务端的 SYN-ACK 报文后，客户端就会重发 SYN 报文，那到底重发几次呢？&lt;/p>
&lt;p>在 Linux 里，客户端的 SYN 报文最大重传次数由 &lt;code>tcp_syn_retries&lt;/code>内核参数控制，这个参数是可以自定义的，默认值一般是 5。&lt;/p>
&lt;p>通常，第一次超时重传是在 1 秒后，第二次超时重传是在 2 秒，第三次超时重传是在 4 秒后，第四次超时重传是在 8 秒后，第五次是在超时重传 16 秒后。没错，&lt;strong>每次超时的时间是上一次的 2 倍&lt;/strong>。&lt;/p>
&lt;p>当第五次超时重传后，会继续等待 32 秒，如果服务端仍然没有回应 ACK，客户端就不再发送 SYN 包，然后断开 TCP 连接。&lt;/p>
&lt;p>所以，总耗时是 1+2+4+8+16+32=63 秒，大约 1 分钟左右。&lt;/p>
&lt;h4 id="第二次握手丢失了会发生什么">第二次握手丢失了，会发生什么？&lt;a class="td-heading-self-link" href="#%e7%ac%ac%e4%ba%8c%e6%ac%a1%e6%8f%a1%e6%89%8b%e4%b8%a2%e5%a4%b1%e4%ba%86%e4%bc%9a%e5%8f%91%e7%94%9f%e4%bb%80%e4%b9%88" aria-label="Heading self-link">&lt;/a>&lt;/h4>
&lt;p>当服务端收到客户端的第一次握手后，就会回 SYN-ACK 报文给客户端，这个就是第二次握手，此时服务端会进入 &lt;code>SYN_RCVD&lt;/code> 状态。&lt;/p>
&lt;p>第二次握手的 &lt;code>SYN-ACK&lt;/code> 报文其实有两个目的 ：&lt;/p>
&lt;ul>
&lt;li>第二次握手里的 ACK， 是对第一次握手的确认报文；&lt;/li>
&lt;li>第二次握手里的 SYN，是服务端发起建立 TCP 连接的报文；&lt;/li>
&lt;/ul>
&lt;p>所以，如果第二次握手丢了，就会发送比较有意思的事情，具体会怎么样呢？&lt;/p>
&lt;p>因为第二次握手报文里是包含对客户端的第一次握手的 ACK 确认报文，所以，如果客户端迟迟没有收到第二次握手，那么客户端就觉得可能自己的 SYN 报文（第一次握手）丢失了，于是&lt;strong>客户端就会触发超时重传机制，重传 SYN 报文&lt;/strong>。&lt;/p>
&lt;p>然后，因为第二次握手中包含服务端的 SYN 报文，所以当客户端收到后，需要给服务端发送 ACK 确认报文（第三次握手），服务端才会认为该 SYN 报文被客户端收到了。&lt;/p>
&lt;p>那么，如果第二次握手丢失了，服务端就收不到第三次握手，于是&lt;strong>服务端这边会触发超时重传机制，重传 SYN-ACK 报文&lt;/strong>。&lt;/p>
&lt;p>在 Linux 下，SYN-ACK 报文的最大重传次数由 &lt;code>tcp_synack_retries&lt;/code>内核参数决定，默认值是 5。&lt;/p>
&lt;p>因此，当第二次握手丢失了，客户端和服务端都会重传：&lt;/p>
&lt;ul>
&lt;li>客户端会重传 SYN 报文，也就是第一次握手，最大重传次数由 &lt;code>tcp_syn_retries&lt;/code>内核参数决定。；&lt;/li>
&lt;li>服务端会重传 SYN-AKC 报文，也就是第二次握手，最大重传次数由 &lt;code>tcp_synack_retries&lt;/code>   内核参数决定。&lt;/li>
&lt;/ul>
&lt;h4 id="第三次握手丢失了会发生什么">第三次握手丢失了，会发生什么？&lt;a class="td-heading-self-link" href="#%e7%ac%ac%e4%b8%89%e6%ac%a1%e6%8f%a1%e6%89%8b%e4%b8%a2%e5%a4%b1%e4%ba%86%e4%bc%9a%e5%8f%91%e7%94%9f%e4%bb%80%e4%b9%88" aria-label="Heading self-link">&lt;/a>&lt;/h4>
&lt;p>客户端收到服务端的 SYN-ACK 报文后，就会给服务端回一个 ACK 报文，也就是第三次握手，此时客户端状态进入到 &lt;code>ESTABLISH&lt;/code> 状态。&lt;/p>
&lt;p>因为这个第三次握手的 ACK 是对第二次握手的 SYN 的确认报文，所以当第三次握手丢失了，如果服务端那一方迟迟收不到这个确认报文，就会触发超时重传机制，重传 SYN-ACK 报文，直到收到第三次握手，或者达到最大重传次数。&lt;/p>
&lt;p>注意，&lt;strong>ACK 报文是不会有重传的，当 ACK 丢失了，就由对方重传对应的报文&lt;/strong>。&lt;/p>
&lt;h3 id="tcp-四次挥手期间的异常">TCP 四次挥手期间的异常&lt;a class="td-heading-self-link" href="#tcp-%e5%9b%9b%e6%ac%a1%e6%8c%a5%e6%89%8b%e6%9c%9f%e9%97%b4%e7%9a%84%e5%bc%82%e5%b8%b8" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>我们再来看看 TCP 四次挥手的过程。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/24e305c7-9ba8-4113-9be1-44404948d366/640" alt="">&lt;/p>
&lt;h4 id="第一次挥手丢失了会发生什么">第一次挥手丢失了，会发生什么？&lt;a class="td-heading-self-link" href="#%e7%ac%ac%e4%b8%80%e6%ac%a1%e6%8c%a5%e6%89%8b%e4%b8%a2%e5%a4%b1%e4%ba%86%e4%bc%9a%e5%8f%91%e7%94%9f%e4%bb%80%e4%b9%88" aria-label="Heading self-link">&lt;/a>&lt;/h4>
&lt;p>当客户端（主动关闭方）调用 close 函数后，就会向服务端发送 FIN 报文，试图与服务端断开连接，此时客户端的连接进入到 &lt;code>FIN_WAIT_1&lt;/code> 状态。&lt;/p>
&lt;p>正常情况下，如果能及时收到服务端（被动关闭方）的 ACK，则会很快变为 &lt;code>FIN_WAIT2&lt;/code> 状态。&lt;/p>
&lt;p>如果第一次挥手丢失了，那么客户端迟迟收不到被动方的 ACK 的话，也就会触发超时重传机制，重传 FIN 报文，重发次数由 &lt;code>tcp_orphan_retries&lt;/code> 参数控制。&lt;/p>
&lt;p>当客户端重传 FIN 报文的次数超过 &lt;code>tcp_orphan_retries&lt;/code>   后，就不再发送 FIN 报文，直接进入到 &lt;code>close&lt;/code> 状态。&lt;/p>
&lt;h4 id="第二次挥手丢失了会发生什么">第二次挥手丢失了，会发生什么？&lt;a class="td-heading-self-link" href="#%e7%ac%ac%e4%ba%8c%e6%ac%a1%e6%8c%a5%e6%89%8b%e4%b8%a2%e5%a4%b1%e4%ba%86%e4%bc%9a%e5%8f%91%e7%94%9f%e4%bb%80%e4%b9%88" aria-label="Heading self-link">&lt;/a>&lt;/h4>
&lt;p>当服务端收到客户端的第一次挥手后，就会先回一个 ACK 确认报文，此时服务端的连接进入到 &lt;code>CLOSE_WAIT&lt;/code> 状态。&lt;/p>
&lt;p>在前面我们也提了，ACK 报文是不会重传的，所以如果服务端的第二次挥手丢失了，客户端就会触发超时重传机制，重传 FIN 报文，直到收到服务端的第二次挥手，或者达到最大的重传次数。&lt;/p>
&lt;p>这里提一下，当客户端收到第二次挥手，也就是收到服务端发送的 ACK 报文后，客户端就会处于 &lt;code>FIN_WAIT2&lt;/code> 状态，在这个状态需要等服务端发送第三次挥手，也就是服务端的 FIN 报文。&lt;/p>
&lt;p>对于 close 函数关闭的连接，由于无法再发送和接收数据，所以&lt;code>FIN_WAIT2&lt;/code> 状态不可以持续太久，而  &lt;code>tcp_fin_timeout&lt;/code> 控制了这个状态下连接的持续时长，默认值是 60 秒。&lt;/p>
&lt;p>这意味着对于调用 close 关闭的连接，如果在 60 秒后还没有收到 FIN 报文，客户端（主动关闭方）的连接就会直接关闭。&lt;/p>
&lt;h4 id="第三次挥手丢失了会发生什么">第三次挥手丢失了，会发生什么？&lt;a class="td-heading-self-link" href="#%e7%ac%ac%e4%b8%89%e6%ac%a1%e6%8c%a5%e6%89%8b%e4%b8%a2%e5%a4%b1%e4%ba%86%e4%bc%9a%e5%8f%91%e7%94%9f%e4%bb%80%e4%b9%88" aria-label="Heading self-link">&lt;/a>&lt;/h4>
&lt;p>当服务端（被动关闭方）收到客户端（主动关闭方）的 FIN 报文后，内核会自动回复 ACK，同时连接处于 &lt;code>CLOSE_WAIT&lt;/code> 状态，顾名思义，它表示等待应用进程调用 close 函数关闭连接。&lt;/p>
&lt;p>此时，内核是没有权利替代进程关闭连接，必须由进程主动调用 close 函数来触发服务端发送 FIN 报文。&lt;/p>
&lt;p>服务端处于 CLOSE_WAIT 状态时，调用了 close 函数，内核就会发出 FIN 报文，同时连接进入 LAST_ACK 状态，等待客户端返回 ACK 来确认连接关闭。&lt;/p>
&lt;p>如果迟迟收不到这个 ACK，服务端就会重发 FIN 报文，重发次数仍然由 &lt;code>tcp_orphan_retrie&lt;/code>s 参数控制，这与客户端重发 FIN 报文的重传次数控制方式是一样的。&lt;/p>
&lt;h4 id="第四次挥手丢失了会发生什么">第四次挥手丢失了，会发生什么？&lt;a class="td-heading-self-link" href="#%e7%ac%ac%e5%9b%9b%e6%ac%a1%e6%8c%a5%e6%89%8b%e4%b8%a2%e5%a4%b1%e4%ba%86%e4%bc%9a%e5%8f%91%e7%94%9f%e4%bb%80%e4%b9%88" aria-label="Heading self-link">&lt;/a>&lt;/h4>
&lt;p>当客户端收到服务端的第三次挥手的 FIN 报文后，就会回 ACK 报文，也就是第四次挥手，此时客户端连接进入 &lt;code>TIME_WAIT&lt;/code> 状态。&lt;/p>
&lt;p>在 Linux 系统，TIME_WAIT 状态会持续 60 秒后才会进入关闭状态。&lt;/p>
&lt;p>然后，服务端（被动关闭方）没有收到 ACK 报文前，还是处于 LAST_ACK 状态。&lt;/p>
&lt;p>如果第四次挥手的 ACK 报文没有到达服务端，服务端就会重发 FIN 报文，重发次数仍然由前面介绍过的 &lt;code>tcp_orphan_retries&lt;/code> 参数控制。&lt;/p>
&lt;hr>
&lt;p>是吧，TCP 聪明着很！&lt;/p></description></item><item><title>Docs: TCP/IP 管理工具</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/TCP_IP/TCP_IP-%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/TCP_IP/TCP_IP-%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h1 id="获取本机公网-ip">获取本机公网 IP&lt;a class="td-heading-self-link" href="#%e8%8e%b7%e5%8f%96%e6%9c%ac%e6%9c%ba%e5%85%ac%e7%bd%91-ip" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="ipify">ipify&lt;a class="td-heading-self-link" href="#ipify" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://geo.ipify.org/docs">https://geo.ipify.org/docs&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">main&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">res&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">_&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">http&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Get&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;https://api.ipify.org&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">ip&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">_&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">ioutil&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ReadAll&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">res&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Body&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">os&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Stdout&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Write&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ip&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="其他">其他&lt;a class="td-heading-self-link" href="#%e5%85%b6%e4%bb%96" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://ip.netarm.com">https://ip.netarm.com&lt;/a>
&lt;a href="http://ip.cip.cc">http://ip.cip.cc&lt;/a>
&lt;a href="http://ip.sb">http://ip.sb&lt;/a>
&lt;a href="https://geo.ipify.org/docs">https://geo.ipify.org/docs&lt;/a>&lt;/p>
&lt;h1 id="分类">分类&lt;a class="td-heading-self-link" href="#%e5%88%86%e7%b1%bb" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>#网络 #TCP/IP&lt;/p></description></item><item><title>Docs: UDP</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/TCP_IP/UDP/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/TCP_IP/UDP/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/User_Datagram_Protocol">Wiki，User_Datagram_Protocol&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://datatracker.ietf.org/doc/html/rfc768">RFC 768&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="udp-介绍">UDP 介绍&lt;a class="td-heading-self-link" href="#udp-%e4%bb%8b%e7%bb%8d" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>User Datagram Protocol (用户数据报协议，简称 UDP)&lt;/strong>。&lt;/p>
&lt;p>不保证数据报文是否安全可靠的到达对方&lt;/p></description></item></channel></rss>