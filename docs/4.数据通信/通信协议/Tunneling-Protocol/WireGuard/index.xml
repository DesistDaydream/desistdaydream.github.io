<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦的站点 – WireGuard</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/Tunneling-Protocol/WireGuard/</link><description>Recent content in WireGuard on 断念梦的站点</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/Tunneling-Protocol/WireGuard/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: WireGuard</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/Tunneling-Protocol/WireGuard/WireGuard/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/Tunneling-Protocol/WireGuard/WireGuard/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.wireguard.com/">官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/WireGuard/wireguard-linux">GitHub 项目，WrieGuard/wireguard-linux&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://git.zx2c4.com/wireguard-linux/tree/drivers/net/wireguard/">zx2c4 源码&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/WireGuard">Wiki，WireGuard&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://blog.ipfire.org/post/why-not-wireguard">IPFire 博客，Why Not WireGuard&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://fuckcloudnative.io/posts/wireguard-docs-theory/">米开朗基杨博客，WireGuard 教程：WireGuard 的工作原理&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zhangguanzhang.github.io/2020/08/05/wireguard-for-personal/">张馆长博客，个人办公用 wireguard 组网笔记&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>WireGuard 是一种可以实现加密 VPN 的通信协议。通常也表示为实现该通信协议的软件。&lt;/p>
&lt;p>WireGuard 是由 Jason Donenfeld 等人用 C 语言编写的一个开源 VPN 协议，被视为下一代 VPN 协议，旨在解决许多困扰 IPSec/IKEv2、OpenVPN 或 L2TP 等其他 VPN 协议的问题。它与 Tinc 和 MeshBird 等现代 VPN 产品有一些相似之处，即加密技术先进、配置简单。从 2020 年 1 月开始，它已经并入了 Linux 内核的 5.6 版本，这意味着大多数 Linux 发行版的用户将拥有一个开箱即用的 WireGuard。&lt;/p>
&lt;p>WireGuard 没有传统的 Server 端、Client 端的概念，在 WireGuard 构建的 VPN 环境中，使用 &lt;strong>Peer&lt;/strong> 来描述 VPN 中的每一个网络节点，这个 Peer 可以是 服务器、路由器 等等。通常来说，一个具有固定公网 IP 的 Peer，非官方得称为 &lt;strong>Bounce Server/Relay Server(弹跳服务器/中继服务器)&lt;/strong>。各个在 NAT 后面的 Peer，可以通过 Bounce Server 这个 Peer 直接互通。&lt;/p>
&lt;h2 id="wireguard-的不足">Wireguard 的不足&lt;a class="td-heading-self-link" href="#wireguard-%e7%9a%84%e4%b8%8d%e8%b6%b3" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://mp.weixin.qq.com/s/OvqpL9aO6oMSL4GgjE6zbw">公众号-云原生实验室，WireGuard 真的很香吗？香个屁！&lt;/a>&lt;/p>
&lt;h1 id="待整理文章内容">待整理文章内容&lt;a class="td-heading-self-link" href="#%e5%be%85%e6%95%b4%e7%90%86%e6%96%87%e7%ab%a0%e5%86%85%e5%ae%b9" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>WireGuard 与其他 VPN 协议的性能测试对比：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/kpbis3/1616160904902-4ab1975e-fa98-4b9e-b63b-775e63fa1828.jpeg" alt="">&lt;/p>
&lt;p>可以看到 WireGuard 直接碾压其他 VPN 协议。再来说说 OpenVPN，大约有 10 万行代码，而 WireGuard 只有大概 4000 行代码，代码库相当精简，简直就是件艺术品啊。你再看看 OpenVPN 的性能，算了不说了。&lt;/p>
&lt;p>WireGuard 优点：&lt;/p>
&lt;ul>
&lt;li>配置精简，可直接使用默认值&lt;/li>
&lt;li>只需最少的密钥管理工作，每个主机只需要 1 个公钥和 1 个私钥。&lt;/li>
&lt;li>就像普通的以太网接口一样，以 Linux 内核模块的形式运行，资源占用小。&lt;/li>
&lt;li>能够将部分流量或所有流量通过 VPN 传送到局域网内的任意主机。&lt;/li>
&lt;li>能够在网络故障恢复之后自动重连，戳到了其他 VPN 的痛处。&lt;/li>
&lt;li>比目前主流的 VPN 协议，连接速度要更快，延迟更低（见上图）。&lt;/li>
&lt;li>使用了更先进的加密技术，具有前向加密和抗降级攻击的能力。&lt;/li>
&lt;li>支持任何类型的二层网络通信，例如 ARP、DHCP 和 ICMP，而不仅仅是 TCP/HTTP。&lt;/li>
&lt;li>可以运行在主机中为容器之间提供通信，也可以运行在容器中为主机之间提供通信。&lt;/li>
&lt;/ul>
&lt;p>WireGuard 不能做的事：&lt;/p>
&lt;ul>
&lt;li>类似 gossip 协议实现网络自愈。&lt;/li>
&lt;li>通过信令服务器突破双重 NAT。&lt;/li>
&lt;li>通过中央服务器自动分配和撤销密钥。&lt;/li>
&lt;li>发送原始的二层以太网帧。&lt;/li>
&lt;/ul>
&lt;p>当然，你可以使用 WireGuard 作为底层协议来实现自己想要的功能，从而弥补上述这些缺憾。&lt;/p>
&lt;p>本系列 WireGuard 教程分为两个部分，第一部分偏理论，第二部分偏实践。本文是第一部分，下面开始正文教程。&lt;/p>
&lt;ol>
&lt;li>WireGuard 术语&lt;/li>
&lt;/ol>
&lt;p>Peer/Node/Device&lt;/p>
&lt;p>连接到 VPN 并为自己注册一个 VPN 子网地址（如 192.0.2.3）的主机。还可以通过使用逗号分隔的 CIDR 指定子网范围，为其自身地址以外的 IP 地址选择路由。&lt;/p>
&lt;p>中继服务器（Bounce Server）&lt;/p>
&lt;p>一个公网可达的对等节点，可以将流量中继到 NAT 后面的其他对等节点。Bounce Server 并不是特殊的节点，它和其他对等节点一样，唯一的区别是它有公网 IP，并且开启了内核级别的 IP 转发，可以将 VPN 的流量转发到其他客户端。&lt;/p>
&lt;p>子网（Subnet）&lt;/p>
&lt;p>一组私有 IP，例如 192.0.2.1-255 或 192.168.1.1/24，一般在 NAT 后面，例如办公室局域网或家庭网络。&lt;/p>
&lt;p>CIDR 表示法&lt;/p>
&lt;p>这是一种使用掩码表示子网大小的方式，这个不用解释了。&lt;/p>
&lt;p>NAT&lt;/p>
&lt;p>子网的私有 IP 地址由路由器提供，通过公网无法直接访问私有子网设备，需要通过 NAT 做网络地址转换。路由器会跟踪发出的连接，并将响应转发到正确的内部 IP。&lt;/p>
&lt;p>公开端点（Public Endpoint）&lt;/p>
&lt;p>节点的公网 IP 地址:端口，例如 123.124.125.126:1234，或者直接使用域名 some.domain.tld:1234。如果对等节点不在同一子网中，那么节点的公开端点必须使用公网 IP 地址。&lt;/p>
&lt;p>私钥（Private key）&lt;/p>
&lt;p>单个节点的 WireGuard 私钥，生成方法是：wg genkey &amp;gt; example.key。&lt;/p>
&lt;p>公钥（Public key）&lt;/p>
&lt;p>单个节点的 WireGuard 公钥，生成方式为：wg pubkey &amp;lt; example.key &amp;gt; example.key.pub。&lt;/p>
&lt;p>DNS&lt;/p>
&lt;p>域名服务器，用于将域名解析为 VPN 客户端的 IP，不让 DNS 请求泄漏到 VPN 之外。&lt;/p>
&lt;ol start="2">
&lt;li>WireGuard 工作原理&lt;/li>
&lt;/ol>
&lt;p>中继服务器工作原理&lt;/p>
&lt;p>中继服务器（Bounce Server）和普通的对等节点一样，它能够在 NAT 后面的 VPN 客户端之间充当中继服务器，可以将收到的任何 VPN 子网流量转发到正确的对等节点。事实上 WireGuard 并不关心流量是如何转发的，这个由系统内核和 iptables 规则处理。&lt;/p>
&lt;p>如果所有的对等节点都是公网可达的，则不需要考虑中继服务器，只有当有对等节点位于 NAT 后面时才需要考虑。&lt;/p>
&lt;p>在 WireGuard 里，客户端和服务端基本是平等的，差别只是谁主动连接谁而已。双方都会监听一个 UDP 端口，谁主动连接，谁就是客户端。主动连接的客户端需要指定对端的公网地址和端口，被动连接的服务端不需要指定其他对等节点的地址和端口。如果客户端和服务端都位于 NAT 后面，需要加一个中继服务器，客户端和服务端都指定中继服务器作为对等节点，它们的通信流量会先进入中继服务器，然后再转发到对端。&lt;/p>
&lt;p>WireGuard 是支持漫游的，也就是说，双方不管谁的地址变动了，WireGuard 在看到对方从新地址说话的时候，就会记住它的新地址（跟 mosh 一样，不过是双向的）。所以双方要是一直保持在线，并且通信足够频繁的话（比如配置 persistent-keepalive），两边的 IP 都不固定也不影响的。&lt;/p>
&lt;p>Wireguard 如何路由流量&lt;/p>
&lt;p>利用 WireGuard 可以组建非常复杂的网络拓扑，这里主要介绍几个典型的拓扑：&lt;/p>
&lt;p>① 端到端直接连接&lt;/p>
&lt;p>这是最简单的拓扑，所有的节点要么在同一个局域网，要么直接通过公网访问，这样 WireGuard 可以直接连接到对端，不需要中继跳转。&lt;/p>
&lt;p>② 一端位于 NAT 后面，另一端直接通过公网暴露&lt;/p>
&lt;p>这种情况下，最简单的方案是：通过公网暴露的一端作为服务端，另一端指定服务端的公网地址和端口，然后通过 persistent-keepalive 选项维持长连接，让 NAT 记得对应的映射关系。&lt;/p>
&lt;p>③ 两端都位于 NAT 后面，通过中继服务器连接&lt;/p>
&lt;p>大多数情况下，当通信双方都在 NAT 后面的时候，NAT 会做源端口随机化处理，直接连接可能比较困难。可以加一个中继服务器，通信双方都将中继服务器作为对端，然后维持长连接，流量就会通过中继服务器进行转发。&lt;/p>
&lt;p>④ 两端都位于 NAT 后面，通过 UDP NAT 打洞&lt;/p>
&lt;p>上面也提到了，当通信双方都在 NAT 后面的时候，直接连接不太现实，因为大多数 NAT 路由器对源端口的随机化相当严格，不可能提前为双方协调一个固定开放的端口。必须使用一个信令服务器（STUN），它会在中间沟通分配给对方哪些随机源端口。通信双方都会和公共信令服务器进行初始连接，然后它记录下随机的源端口，并将其返回给客户端。这其实就是现代 P2P 网络中 WebRTC 的工作原理。有时候，即使有了信令服务器和两端已知的源端口，也无法直接连接，因为 NAT 路由器严格规定只接受来自原始目的地址（信令服务器）的流量，会要求新开一个随机源端口来接受来自其他 IP 的流量（比如其他客户端试图使用原来的通信源端口）。运营商级别的 NAT 就是这么干的，比如蜂窝网络和一些企业网络，它们专门用这种方法来防止打洞连接。更多细节请参考下一部分的 NAT 到 NAT 连接实践的章节。&lt;/p>
&lt;p>如果某一端同时连接了多个对端，当它想访问某个 IP 时，如果有具体的路由可用，则优先使用具体的路由，否则就会将流量转发到中继服务器，然后中继服务器再根据系统路由表进行转发。你可以通过测量 ping 的时间来计算每一跳的长度，并通过检查对端的输出（wg show wg0）来找到 WireGuard 对一个给定地址的路由方式。&lt;/p>
&lt;p>WireGuard 报文格式&lt;/p>
&lt;p>WireGuard 使用加密的 UDP 报文来封装所有的数据，UDP 不保证数据包一定能送达，也不保证按顺序到达，但隧道内的 TCP 连接可以保证数据有效交付。WireGuard 的报文格式如下图所示：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/kpbis3/1616160904918-24e86676-6f0a-4804-8669-45d68a22e23d.jpeg" alt="">&lt;/p>
&lt;p>关于 WireGuard 报文的更多信息可以参考下面几篇文档：&lt;/p>
&lt;ul>
&lt;li>wireshark.org/docs/dfref/w/wg.html&lt;/li>
&lt;li>Lekensteyn/wireguard-dissector[2]&lt;/li>
&lt;li>nbsoftsolutions.com/blog/viewing-wireguard-traffic-with-tcpdump&lt;/li>
&lt;/ul>
&lt;p>WireGuard 的性能&lt;/p>
&lt;p>WireGuard 声称其性能比大多数 VPN 协议更好，但这个事情有很多争议，比如某些加密方式支持硬件层面的加速。&lt;/p>
&lt;p>WireGuard 直接在内核层面处理路由，直接使用系统内核的加密模块来加密数据，和 Linux 原本内置的密码子系统共存，原有的子系统能通过 API 使用 WireGuard 的 Zinc 密码库。WireGuard 使用 UDP 协议传输数据，在不使用的情况下默认不会传输任何 UDP 数据包，所以比常规 VPN 省电很多，可以像 55 一样一直挂着使用，速度相比其他 VPN 也是压倒性优势。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/kpbis3/1616160904933-319867cc-3391-4d97-bf43-e8c40786c553.jpeg" alt="">&lt;/p>
&lt;p>关于性能比较的更多信息可以参考下面几篇文档：&lt;/p>
&lt;ul>
&lt;li>wireguard.com/performance&lt;/li>
&lt;li>reddit.com/r/linux/comments/9bnowo/wireguard_benchmark_between_two_servers_with_10&lt;/li>
&lt;li>restoreprivacy.com/openvpn-ipsec-wireguard-l2tp-ikev2-protocols&lt;/li>
&lt;/ul>
&lt;p>WireGuard 安全模型
WireGuard 使用以下加密技术来保障数据的安全：&lt;/p>
&lt;ul>
&lt;li>使用 ChaCha20 进行对称加密，使用 Poly1305 进行数据验证。&lt;/li>
&lt;li>利用 Curve25519 进行密钥交换。&lt;/li>
&lt;li>使用 BLAKE2 作为哈希函数。&lt;/li>
&lt;li>使用 HKDF 进行解密。&lt;/li>
&lt;/ul>
&lt;p>WireGuard 的加密技术本质上是 Trevor Perrin 的 Noise 框架的实例化，它简单高效，其他的 VPN 都是通过一系列协商、握手和复杂的状态机来保障安全性。WireGuard 就相当于 VPN 协议中的 qmail，代码量比其他 VPN 协议少了好几个数量级。&lt;/p>
&lt;p>关于 WireGuard 加密的更多资料请参考下方链接：&lt;/p>
&lt;ul>
&lt;li>wireguard.com/papers/wireguard.pdf&lt;/li>
&lt;li>eprint.iacr.org/2018/080.pdf&lt;/li>
&lt;li>courses.csail.mit.edu/6.857/2018/project/He-Xu-Xu-WireGuard.pdf&lt;/li>
&lt;li>wireguard.com/talks/blackhat2018-slides.pdf&lt;/li>
&lt;li>arstechnica.com/gadgets/2018/08/wireguard-vpn-review-fast-connections-amaze-but-windows-support-needs-to-happen&lt;/li>
&lt;/ul>
&lt;p>WireGuard 密钥管理&lt;/p>
&lt;p>WireGuard 通过为每个对等节点提供简单的公钥和私钥来实现双向认证，每个对等节点在设置阶段生成密钥，且只在对等节点之间共享密钥。每个节点除了公钥和私钥，不再需要其他证书或预共享密钥。&lt;/p>
&lt;p>在更大规模的部署中，可以使用 Ansible 或 Kubernetes Secrets 等单独的服务来处理密钥的生成、分发和销毁。&lt;/p>
&lt;p>下面是一些有助于密钥分发和部署的服务：&lt;/p>
&lt;ul>
&lt;li>pypi.org/project/wireguard-p2p&lt;/li>
&lt;li>trailofbits/algo&lt;/li>
&lt;li>StreisandEffect/streisand&lt;/li>
&lt;li>its0x08/wg-install&lt;/li>
&lt;li>brittson/wireguard_config_maker&lt;/li>
&lt;li>wireguardconfig.com&lt;/li>
&lt;/ul>
&lt;p>如果你不想在 wg0.conf 配置文件中直接硬编码，可以从文件或命令中读取密钥，这使得通过第三方服务管理密钥变得更加容易：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>Interface&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">PostUp&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> wg &lt;span style="color:#204a87">set&lt;/span> %i private-key /etc/wireguard/wg0.key &amp;lt;&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>cat /some/path/%i/privkey&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>从技术上讲，多个服务端之间可以共享相同的私钥，只要客户端不使用相同的密钥同时连接到两个服务器。但有时客户端会需要同时连接多台服务器，例如，你可以使用 DNS 轮询来均衡两台服务器之间的连接，这两台服务器配置相同。大多数情况下，每个对等节点都应该使用独立的的公钥和私钥，这样每个对等节点都不能读取到对方的流量，保障了安全性。&lt;/p>
&lt;p>理论部分就到这里，下篇文章将会手把手教你如何从零开始配置 WireGuard，这里会涉及到很多高级的配置方法，例如动态 IP、NAT 到 NAT、IPv6 等等。&lt;/p>
&lt;h2 id="高级特性">高级特性&lt;a class="td-heading-self-link" href="#%e9%ab%98%e7%ba%a7%e7%89%b9%e6%80%a7" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="ipv6">IPv6&lt;a class="td-heading-self-link" href="#ipv6" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>前面的例子主要使用 &lt;code>IPv4&lt;/code>，WireGuard 也支持 &lt;code>IPv6&lt;/code>。例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ini" data-lang="ini">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">[Interface]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">AllowedIps&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">192.0.2.3/24, 2001:DB8::/64&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">[Peer]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">AllowedIPs&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">0.0.0.0/0, ::/0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="转发所有流量">转发所有流量&lt;a class="td-heading-self-link" href="#%e8%bd%ac%e5%8f%91%e6%89%80%e6%9c%89%e6%b5%81%e9%87%8f" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>如果你想通过 VPN 转发所有的流量，包括 VPN 子网和公网流量，需要在 &lt;code>[Peer]&lt;/code> 的 &lt;code>AllowedIPs&lt;/code> 中添加 &lt;code>0.0.0.0/0, ::/0&lt;/code>。&lt;/p>
&lt;p>即便只转发 &lt;code>IPv4&lt;/code> 流量，也要指定一个 &lt;code>IPv6&lt;/code> 网段，以避免将 &lt;code>IPv6&lt;/code> 数据包泄露到 VPN 之外。详情参考：&lt;strong>reddit.com/r/WireGuard/comments/b0m5g2/ipv6_leaks_psa_for_anyone_here_using_wireguard_to&lt;/strong>&lt;/p>
&lt;p>例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ini" data-lang="ini">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">[Interface]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># Name = phone.example-vpn.dev&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">Address&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">192.0.2.3/32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">PrivateKey&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;lt;private key for phone.example-vpn.dev&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">[Peer]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># Name = public-server1.example-vpn.dev&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">PublicKey&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;lt;public key for public-server1.example-vpn.dev&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">Endpoint&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">public-server1.example-vpn.dev:51820&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">AllowedIPs&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">0.0.0.0/0, ::/0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>一般只有把 VPN 当做武当纵云梯来用时，才会需要转发所有流量，不多说，点到为止。&lt;/p>
&lt;h3 id="nat-to-nat-连接">NAT-to-NAT 连接&lt;a class="td-heading-self-link" href="#nat-to-nat-%e8%bf%9e%e6%8e%a5" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>如果两个对等节点（peer）都位于 NAT 后面，想不通过中继服务器直接连接，需要保证至少有一个对等节点（peer）具有稳定的公网出口，使用静态公网 IP 或者通过 &lt;code>DDNS&lt;/code> 动态更新 &lt;code>FQDN&lt;/code> 都可以。&lt;/p>
&lt;p>&lt;code>WebRTC&lt;/code> 协议可以动态配置两个 NAT 之间的连接，它可以通过信令服务器来检测每个主机的 &lt;code>IP:Port&lt;/code> 组合。而 WireGuard 没有这个功能，它没有没有信令服务器来动态搜索其他主机，只能硬编码 &lt;code>Endpoint+ListenPort&lt;/code>，并通过 &lt;code>PersistentKeepalive&lt;/code> 来维持连接。&lt;/p>
&lt;p>总结一下 NAT-to-NAT 连接的前提条件：&lt;/p>
&lt;ul>
&lt;li>至少有一个对等节点（peer）有固定的公网 IP，如果都没有固定的公网 IP，也可以使用 &lt;code>DDNS&lt;/code> 来维护一个稳定的域名。&lt;/li>
&lt;li>至少有一个对等节点（peer）指定 UDP &lt;code>ListenPort&lt;/code>，而且它的 NAT 路由器不能做 UDP 源端口随机化，否则返回的数据包将被发送到之前指定的 &lt;code>ListenPort&lt;/code>，并被路由器丢弃，不会发送到新分配的随机端口。&lt;/li>
&lt;li>所有的对等节点（peer）必须在 &lt;code>[Peer]&lt;/code> 配置中启用其他对等节点（peer）的 &lt;code>PersistentKeepalive&lt;/code>，这样就可以维持连接的持久性。&lt;/li>
&lt;/ul>
&lt;p>对于通信双方来说，只要&lt;strong>服务端&lt;/strong>所在的 NAT 路由器没有指定到 NAT 后面的对等节点（peer）的转发规则，就需要进行 UDP 打洞。&lt;/p>
&lt;p>UDP 打洞的原理：&lt;/p>
&lt;ul>
&lt;li>&lt;code>Peer1&lt;/code> 向 &lt;code>Peer2&lt;/code> 发送一个 UDP 数据包，不过 &lt;code>Peer2&lt;/code> 的 NAT 路由器不知道该将这个包发给谁，直接丢弃了，不过没关系，这一步的目的是让 &lt;code>Peer1&lt;/code> 的 NAT 路由器能够接收 UDP 响应并转发到后面的 &lt;code>Peer1&lt;/code>。&lt;/li>
&lt;li>&lt;code>Peer2&lt;/code> 向 &lt;code>Peer1&lt;/code> 发送一个 UDP 数据包，由于上一步的作用，&lt;code>Peer1&lt;/code> 的 NAT 路由器已经建立临时转发规则，可以接收 UDP 响应，所以可以接收到该数据包，并转发到 &lt;code>Peer1&lt;/code>。&lt;/li>
&lt;li>&lt;code>Peer1&lt;/code> 向 &lt;code>Peer2&lt;/code> 发送一个 UDP 响应，由于上一步的作用，由于上一步的作用，&lt;code>Peer2&lt;/code> 的 NAT 路由器已经可以接收 UDP 响应，所以可以接收到该数据包，并转发到 &lt;code>Peer2&lt;/code>。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>这种发送一个初始的数据包被拒绝，然后利用路由器已建立的转发规则来接收响应的过程被称为 『UDP 打洞』。&lt;/strong>&lt;/p>
&lt;p>当你发送一个 UDP 数据包出去时，路由器通常会创建一个临时规则来映射源地址/端口和目的地址/端口，反之亦然。从目的地址和端口返回的 UDP 数据包会被转发到原来的源地址和端口，这就是大多数 UDP 应用在 NAT 后面的运作方式（如 BitTorrent、Skype 等）。这个临时规则会在一段时间后失效，所以 NAT 后面的客户端必须通过 &lt;code>PersistentKeepalive&lt;/code> 定期发送数据包来维持连接的持久性。&lt;/p>
&lt;p>当两个对等节点（peer）都位于 NAT 后面时，要想让 UDP 打洞生效，需要两个节点在差不多的时间向对方发送数据包，这就意味着双方需要提前知道对方的公网地址和端口号，可以在 &lt;code>wg0.conf&lt;/code> 中指定。&lt;/p>
&lt;h4 id="udp-打洞的局限性">UDP 打洞的局限性&lt;a class="td-heading-self-link" href="#udp-%e6%89%93%e6%b4%9e%e7%9a%84%e5%b1%80%e9%99%90%e6%80%a7" aria-label="Heading self-link">&lt;/a>&lt;/h4>
&lt;p>从 2019 年开始，很多以前用过的老式打洞方法都不再有效了。以前很著名的就是 &lt;strong>pwnat&lt;/strong>[6] 开创的一种新的打洞方法，它能够在不需要代理、第三方服务器、upnp、DMZ、sproofing、dns 转换的情况下实现 NAT 中的 P2P 通信。它的原理也很简单：&lt;/p>
&lt;p>通过让客户端假装成为一个互联网上任意的 &lt;code>ICMP&lt;/code> 跳跃点（ a random hop on the Internet）来解决这个问题，从而让服务端能够获取到客户端的 IP 地址。&lt;code>traceroute&lt;/code> 命令也是使用这项技术来检测 Internet 上的跳跃点。&lt;/p>
&lt;p>具体来说，当服务器启动时，它开始向固定地址 &lt;code>3.3.3.3&lt;/code> 发送固定的 &lt;strong>ICMP 回应请求包&lt;/strong>（ICMP echo request packets）。显然，我们无法从 &lt;code>3.3.3.3&lt;/code> 收到返回的 &lt;strong>ICMP 回应数据包&lt;/strong>（ICMP echo packets）。然而，&lt;code>3.3.3.3&lt;/code> 并不是我们可以访问的主机，我们也不是想伪装成它来发 ICMP 回应数据包。相反，pwnat 技术的实现原理在于，当我们的客户端想要连接服务端时，客户端（知道服务器 IP 地址）会向服务端送 &lt;strong>ICMP 超时数据包&lt;/strong>（ICMP Time Exceeded packet）。这个 ICMP 数据包里面包含了服务端发送到 &lt;code>3.3.3.3&lt;/code> 的原始固定 &lt;strong>ICMP 回应请求包&lt;/strong>。&lt;/p>
&lt;p>为什么要这样做呢？好吧，我们假装是互联网上的一个 ICMP 跳越点，礼貌地告诉服务器它原来的 &lt;strong>ICMP 回应请求包&lt;/strong>无法传递到 &lt;code>3.3.3.3&lt;/code>。而你的 NAT 是一个聪明的设备，它会注意到 &lt;strong>ICMP 超时数据包&lt;/strong>内的数据包与服务器发出 &lt;strong>ICMP 回应请求包&lt;/strong>相匹配。然后它将 &lt;strong>ICMP 超时数据包&lt;/strong>转发回 NAT 后面的服务器，包括来自客户端的完整 IP 数据包头，从而让服务端知道客户端 IP 地址是什么！&lt;/p>
&lt;p>现在这种类似的 UDP 打洞方法受到了很多的限制，详情可以参考&lt;a href="http://mp.weixin.qq.com/s?__biz=MzU1MzY4NzQ1OA==&amp;amp;mid=2247485991&amp;amp;idx=1&amp;amp;sn=b1a79b565e82ca034ae2c2b2bd9e3bcb&amp;amp;chksm=fbee4aeacc99c3fc0cf45c8ae9a84beb44874383cf337e284083cc81abaf23cbcf65ab58ea39&amp;amp;scene=21#wechat_redirect">上篇文章&lt;/a>，这里不过多阐述。除了 UDP 打洞之外，我们仍然可以使用硬编码的方式指定两个对等节点（peer）的公网地址和端口号，这个方法对大多数 NAT 网络都有效。&lt;/p>
&lt;h4 id="源端口随机化">源端口随机化&lt;a class="td-heading-self-link" href="#%e6%ba%90%e7%ab%af%e5%8f%a3%e9%9a%8f%e6%9c%ba%e5%8c%96" aria-label="Heading self-link">&lt;/a>&lt;/h4>
&lt;p>如果所有的对等节点（peer）都在具有严格的 UDP 源端口随机化的 NAT 后面（比如大多数蜂窝网络），那么无法实现 &lt;code>NAT-to-NAT&lt;/code> 连接。因为双方都无法协商出一个 &lt;code>ListenPort&lt;/code>，并保证自己的 NAT 在发出 ping 包后能够接收发往该端口的流量，所以就无法初始化打洞，导致连接失败。因此，一般在 &lt;code>LTE/3G&lt;/code> 网络中无法进行 p2p 通信。&lt;/p>
&lt;h4 id="使用信令服务器">使用信令服务器&lt;a class="td-heading-self-link" href="#%e4%bd%bf%e7%94%a8%e4%bf%a1%e4%bb%a4%e6%9c%8d%e5%8a%a1%e5%99%a8" aria-label="Heading self-link">&lt;/a>&lt;/h4>
&lt;p>上节提到了，如果所有的对等节点（peer）都在具有严格的 UDP 源端口随机化的 NAT 后面，就无法直接实现 &lt;code>NAT-to-NAT&lt;/code> 连接，但通过第三方的信令服务器是可以实现的。信令服务器相当于一个中转站，它会告诉通信双方关于对方的 &lt;code>IP:Port&lt;/code> 信息。这里有几个项目可以参考：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>takutakahashi/wg-connect&lt;/strong>&lt;/li>
&lt;li>&lt;strong>git.zx2c4.com/wireguard-tools/tree/contrib/nat-hole-punching&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h4 id="动态-ip-地址">动态 IP 地址&lt;a class="td-heading-self-link" href="#%e5%8a%a8%e6%80%81-ip-%e5%9c%b0%e5%9d%80" aria-label="Heading self-link">&lt;/a>&lt;/h4>
&lt;p>WireGuard 只会在启动时解析域名，如果你使用 &lt;code>DDNS&lt;/code> 来动态更新域名解析，那么每当 IP 发生变化时，就需要重新启动 WireGuard。目前建议的解决方案是使用 &lt;code>PostUp&lt;/code> 钩子每隔几分钟或几小时重新启动 WireGuard 来强制解析域名。
总的来说，&lt;code>NAT-to-NAT&lt;/code> 连接极为不稳定，而且还有一堆其他的限制，所以还是建议通过中继服务器来通信。
NAT-to-NAT 配置示例：
Peer1：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ini" data-lang="ini">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">[Interface]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">ListenPort&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">12000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">[Peer]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">Endpoint&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">peer2.example-vpn.dev:12000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">PersistentKeepalive&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">25&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Peer2：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ini" data-lang="ini">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">[Interface]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">ListenPort&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">12000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">[Peer]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">Endpoint&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">peer1.example-vpn.dev:12000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">PersistentKeepalive&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">25&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>更多资料：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>samyk/pwnat&lt;/strong>&lt;/li>
&lt;li>&lt;strong>en.wikipedia.org/wiki/UDP_hole_punching&lt;/strong>&lt;/li>
&lt;li>&lt;strong>stackoverflow.com/questions/8892142/udp-hole-punching-algorithm&lt;/strong>&lt;/li>
&lt;li>&lt;strong>stackoverflow.com/questions/12359502/udp-hole-punching-not-going-through-on-3g&lt;/strong>&lt;/li>
&lt;li>&lt;strong>stackoverflow.com/questions/11819349/udp-hole-punching-not-possible-with-mobile-provider&lt;/strong>&lt;/li>
&lt;li>&lt;strong>WireGuard/WireGuard@&lt;code>master&lt;/code>/contrib/examples/nat-hole-punching&lt;/strong>&lt;/li>
&lt;li>&lt;strong>staaldraad.github.io/2017/04/17/nat-to-nat-with-wireguard&lt;/strong>&lt;/li>
&lt;li>&lt;strong>golb.hplar.ch/2019/01/expose-server-vpn.html&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h3 id="动态分配子网-ip">动态分配子网 IP&lt;a class="td-heading-self-link" href="#%e5%8a%a8%e6%80%81%e5%88%86%e9%85%8d%e5%ad%90%e7%bd%91-ip" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>这里指的是对等节点（peer）的 VPN 子网 IP 的动态分配，类似于 DHCP，不是指 &lt;code>Endpoint&lt;/code>。&lt;/p>
&lt;p>WireGuard 官方已经在开发动态分配子网 IP 的功能，具体的实现可以看这里：&lt;strong>WireGuard/wg-dynamic&lt;/strong>&lt;/p>
&lt;p>当然，你也可以使用 &lt;code>PostUp&lt;/code> 在运行时从文件中读取 IP 值来实现一个动态分配 IP 的系统，类似于 Kubernetes 的 CNI 插件。例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ini" data-lang="ini">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">[Interface]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">PostUp&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">wg set %i allowed-ips /etc/wireguard/wg0.key &amp;lt;(some command)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="奇技淫巧">奇技淫巧&lt;a class="td-heading-self-link" href="#%e5%a5%87%e6%8a%80%e6%b7%ab%e5%b7%a7" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;h4 id="共享一个-peersconf-文件">共享一个 peers.conf 文件&lt;a class="td-heading-self-link" href="#%e5%85%b1%e4%ba%ab%e4%b8%80%e4%b8%aa-peersconf-%e6%96%87%e4%bb%b6" aria-label="Heading self-link">&lt;/a>&lt;/h4>
&lt;p>介绍一个秘密功能，可以简化 WireGuard 的配置工作。如果某个 &lt;code>peer&lt;/code> 的公钥与本地接口的私钥能够配对，那么 WireGuard 会忽略该 &lt;code>peer&lt;/code>。利用这个特性，我们可以在所有节点上共用同一个 peer 列表，每个节点只需要单独定义一个 &lt;code>[Interface]&lt;/code> 就行了，即使列表中有本节点，也会被忽略。具体方式如下：&lt;/p>
&lt;ul>
&lt;li>每个对等节点（peer）都有一个单独的 &lt;code>/etc/wireguard/wg0.conf&lt;/code> 文件，只包含 &lt;code>[Interface]&lt;/code> 部分的配置。&lt;/li>
&lt;li>每个对等节点（peer）共用同一个 &lt;code>/etc/wireguard/peers.conf&lt;/code> 文件，其中包含了所有的 peer。&lt;/li>
&lt;li>Wg0.conf 文件中需要配置一个 PostUp 钩子，内容为 &lt;code>PostUp = wg addconf /etc/wireguard/peers.conf&lt;/code>。&lt;/li>
&lt;/ul>
&lt;p>关于 &lt;code>peers.conf&lt;/code> 的共享方式有很多种，你可以通过 &lt;code>ansible&lt;/code> 这样的工具来分发，可以使用 &lt;code>Dropbox&lt;/code> 之类的网盘来同步，当然也可以使用 &lt;code>ceph&lt;/code> 这种分布式文件系统来将其挂载到不同的节点上。&lt;/p>
&lt;h4 id="从文件或命令输出中读取配置">从文件或命令输出中读取配置&lt;a class="td-heading-self-link" href="#%e4%bb%8e%e6%96%87%e4%bb%b6%e6%88%96%e5%91%bd%e4%bb%a4%e8%be%93%e5%87%ba%e4%b8%ad%e8%af%bb%e5%8f%96%e9%85%8d%e7%bd%ae" aria-label="Heading self-link">&lt;/a>&lt;/h4>
&lt;p>WireGuard 也可以从任意命令的输出或文件中读取内容来修改配置的值，利用这个特性可以方便管理密钥，例如可以在运行时从 &lt;code>Kubernetes Secrets&lt;/code> 或 &lt;code>AWS KMS&lt;/code> 等第三方服务读取密钥。&lt;/p>
&lt;h3 id="容器化">容器化&lt;a class="td-heading-self-link" href="#%e5%ae%b9%e5%99%a8%e5%8c%96" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>WireGuard 也可以跑在容器中，最简单的方式是使用 &lt;code>--privileged&lt;/code> 和 &lt;code>--cap-add=all&lt;/code> 参数，让容器可以加载内核模块。
你可以让 WireGuard 跑在容器中，向宿主机暴露一个网络接口；也可以让 WireGuard 运行在宿主机中，向特定的容器暴露一个接口。
下面给出一个具体的示例，本示例中的 &lt;code>vpn_test&lt;/code> 容器通过 WireGuard 中继服务器来路由所有流量。本示例中给出的容器配置是 &lt;code>docker-compose&lt;/code> 的配置文件格式。
中继服务器容器配置：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">version&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#39;3&amp;#39;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">services&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">wireguard&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">image&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">linuxserver/wireguard&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">ports&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#0000cf;font-weight:bold">51820&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">51820&lt;/span>&lt;span style="color:#000">/udp&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">cap_add&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">NET_ADMIN&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">SYS_MODULE&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">volumes&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">/lib/modules:/lib/modules&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">./wg0.conf:/config/wg0.conf:ro&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>中继服务器 WireGuard 配置 &lt;code>wg0.conf&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ini" data-lang="ini">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">[Interface]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># Name = relay1.wg.example.com&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">Address&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">192.0.2.1/24&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">ListenPort&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">51820&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">PrivateKey&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">oJpRt2Oq27vIB5/UVb7BRqCwad2YMReQgH5tlxz8YmI=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">DNS&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">1.1.1.1,8.8.8.8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">PostUp&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">iptables -A FORWARD -i wg0 -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE; ip6tables -A FORWARD -i wg0 -j ACCEPT; ip6tables -t nat -A POSTROUTING -o eth0 -j MASQUERADE&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">PostDown&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">iptables -D FORWARD -i wg0 -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE; ip6tables -D FORWARD -i wg0 -j ACCEPT; ip6tables -t nat -D POSTROUTING -o eth0 -j MASQUERADE&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">[Peer]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># Name = peer1.wg.example.com&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">PublicKey&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">I+hXRAJOG/UE2IQvIHsou2zTgkUyPve2pzvHTnd/2Gg=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">AllowedIPs&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">192.0.2.2/32&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>客户端容器配置：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">version&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#39;3&amp;#39;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">services&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">wireguard&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">image&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">linuxserver/wireguard&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">cap_add&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">NET_ADMIN&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">SYS_MODULE&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">volumes&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">/lib/modules:/lib/modules&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">./wg0.conf:/config/wg0.conf:ro&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">vpn_test&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">image&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">curlimages/curl&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">entrypoint&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">curl -s http://whatismyip.akamai.com/&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">network_mode&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#39;service:wireguard&amp;#39;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>客户端 WireGuard 配置 &lt;code>wg0.conf&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ini" data-lang="ini">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">[Interface]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># Name = peer1.wg.example.com&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">Address&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">192.0.2.2/32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">PrivateKey&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">YCW76edD4W7nZrPbWZxPZhcs32CsBLIi1sEhsV/sgk8=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">DNS&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">1.1.1.1,8.8.8.8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">[Peer]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># Name = relay1.wg.example.com&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">Endpoint&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">relay1.wg.example.com:51820&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">PublicKey&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">zJNKewtL3gcHdG62V3GaBkErFtapJWsAx+2um0c0B1s=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">AllowedIPs&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">192.0.2.1/24,0.0.0.0/0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">PersistentKeepalive&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">21&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="wireguard-关联文件与配置">WireGuard 关联文件与配置&lt;a class="td-heading-self-link" href="#wireguard-%e5%85%b3%e8%81%94%e6%96%87%e4%bb%b6%e4%b8%8e%e9%85%8d%e7%bd%ae" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;strong>/etc/wireguard/&lt;/strong> # WireGuard 运行时配置文件的存放路径。&lt;/p>
&lt;h1 id="命令行工具">命令行工具&lt;a class="td-heading-self-link" href="#%e5%91%bd%e4%bb%a4%e8%a1%8c%e5%b7%a5%e5%85%b7" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="wg-quick">wg-quick&lt;a class="td-heading-self-link" href="#wg-quick" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://man7.org/linux/man-pages/man8/wg-quick.8.html">Manual(手册)，wg-quick(8)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h3 id="syntax语法">Syntax(语法)&lt;a class="td-heading-self-link" href="#syntax%e8%af%ad%e6%b3%95" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>&lt;strong>wg-quick [ up | down | save | strip ] [ CONFIG_FILE | INTERFACE ]&lt;/strong>&lt;/p>
&lt;h1 id="分类">分类&lt;a class="td-heading-self-link" href="#%e5%88%86%e7%b1%bb" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>#网络 #隧道协议 #Wireguard&lt;/p>
&lt;/blockquote></description></item><item><title>Docs: WireGuard 部署</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/Tunneling-Protocol/WireGuard/WireGuard-%E9%83%A8%E7%BD%B2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/Tunneling-Protocol/WireGuard/WireGuard-%E9%83%A8%E7%BD%B2/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>原文链接：&lt;a href="https://mp.weixin.qq.com/s/vbt30eEGcp5JP5sHAPkwhw">https://mp.weixin.qq.com/s/vbt30eEGcp5JP5sHAPkwhw&lt;/a>&lt;/li>
&lt;li>英文原文链接：&lt;a href="https://github.com/pirate/wireguard-docs">https://github.com/pirate/wireguard-docs&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="安装-wireguard-包">安装 WireGuard 包&lt;a class="td-heading-self-link" href="#%e5%ae%89%e8%a3%85-wireguard-%e5%8c%85" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># CentOS7&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>yum install epel-release.noarch elrepo-release.noarch -y
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>yum install --enablerepo&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>elrepo-kernel kmod-wireguard wireguard-tools -y
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 如果使用的是非标准内核，需要安装 DKMS 包，待验证&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>curl -o /etc/yum.repos.d/jdoss-wireguard-epel-7.repo https://copr.fedorainfracloud.org/coprs/jdoss/wireguard/repo/epel-7/jdoss-wireguard-epel-7.repo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>yum install wireguard-dkms wireguard-tools
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># CentOS Stream&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>yum install epel-release.noarch elrepo-release.noarch -y
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>yum install --enablerepo&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>elrepo-kernel kmod-wireguard wireguard-tools
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># Ubuntu ≥ 18.04&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apt install wireguard
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># MacOS&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>brew install wireguard-tools
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># Windows 客户端下载地址：&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>https://download.wireguard.com/windows-client/wireguard-amd64-0.1.1.msi
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在中继服务器上开启 IP 地址转发：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>cat &amp;gt; /etc/sysctl.d/wireguard.conf &lt;span style="color:#4e9a06">&amp;lt;&amp;lt;EOF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">net.ipv4.ip_forward = 1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">net.ipv4.conf.all.proxy_arp = 1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sysctl -p /etc/sysctl.conf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="编写配置文件">编写配置文件&lt;a class="td-heading-self-link" href="#%e7%bc%96%e5%86%99%e9%85%8d%e7%bd%ae%e6%96%87%e4%bb%b6" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>配置文件可以放在任何路径下，但必须通过绝对路径引用。默认路径是 &lt;code>/etc/wireguard/&lt;/code>。下面通过三个 Peer 组成网络拓扑的配置进行演示&lt;/p>
&lt;h2 id="生成密钥">生成密钥&lt;a class="td-heading-self-link" href="#%e7%94%9f%e6%88%90%e5%af%86%e9%92%a5" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 生成中继服务器 Peer 的公钥与私钥&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wg genkey &lt;span style="color:#000;font-weight:bold">|&lt;/span> tee /etc/wireguard/key/gw-privatekey &lt;span style="color:#000;font-weight:bold">|&lt;/span> wg pubkey &amp;gt; /etc/wireguard/key/gw-publickey
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 生成其他 Peer 的公钥与私钥&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wg genkey &lt;span style="color:#000;font-weight:bold">|&lt;/span> tee /etc/wireguard/key/peer-client-privatekey &lt;span style="color:#000;font-weight:bold">|&lt;/span> wg pubkey &amp;gt; /etc/wireguard/key/peer-client-publickey
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wg genkey &lt;span style="color:#000;font-weight:bold">|&lt;/span> tee /etc/wireguard/key/peer-company-privatekey &lt;span style="color:#000;font-weight:bold">|&lt;/span> wg pubkey &amp;gt; /etc/wireguard/key/peer-company-publickey
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="在中继服务器上生成所有-peer-的配置文件">在中继服务器上，生成所有 Peer 的配置文件&lt;a class="td-heading-self-link" href="#%e5%9c%a8%e4%b8%ad%e7%bb%a7%e6%9c%8d%e5%8a%a1%e5%99%a8%e4%b8%8a%e7%94%9f%e6%88%90%e6%89%80%e6%9c%89-peer-%e7%9a%84%e9%85%8d%e7%bd%ae%e6%96%87%e4%bb%b6" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="配置中继服务器-peer">配置中继服务器 Peer&lt;a class="td-heading-self-link" href="#%e9%85%8d%e7%bd%ae%e4%b8%ad%e7%bb%a7%e6%9c%8d%e5%8a%a1%e5%99%a8-peer" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>cat &amp;gt; /etc/wireguard/wg-company.conf &lt;span style="color:#4e9a06">&amp;lt;&amp;lt;EOF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">[Interface]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">ListenPort = 16000
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">Address = 10.1.0.254/24
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">PrivateKey = $(cat /etc/wireguard/key/gw-privatekey)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">PostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -A FORWARD -o %i -j ACCEPT; iptables -t nat -A POSTROUTING -o ens3 -j MASQUERADE
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">PostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -D FORWARD -o %i -j ACCEPT; iptables -t nat -D POSTROUTING -o ens3 -j MASQUERADE
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">[Peer]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"># 客户端
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">PublicKey = $(cat /etc/wireguard/key/peer-client-publickey)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">AllowedIPs = 10.1.0.253/32
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">[Peer]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"># 天津-公司
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">PublicKey = $(cat /etc/wireguard/key/peer-company-publickey)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">AllowedIPs = 10.1.0.1/32, 172.38.0.0/16, 10.20.5.0/24
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="配置其他-peer">配置其他 Peer&lt;a class="td-heading-self-link" href="#%e9%85%8d%e7%bd%ae%e5%85%b6%e4%bb%96-peer" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>生成配置后，将配置文件拷贝到对应 Peer 的 /etc/wireguard 目录下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>cat &amp;gt; /etc/wireguard/client-company.conf &lt;span style="color:#4e9a06">&amp;lt;&amp;lt;EOF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">[Interface]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">PrivateKey = $(cat /etc/wireguard/key/peer-client-privatekey)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">Address = 10.1.0.253/24
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">[Peer]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">PublicKey = $(cat /etc/wireguard/key/gw-publickey)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">AllowedIPs = 10.1.0.0/24, 10.20.5.0/24, 172.38.0.0/16
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">Endpoint = $(curl -4 -s ip.sb):16000
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">PersistentKeepalive = 30
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>cat &amp;gt; /etc/wireguard/peer-company.conf &lt;span style="color:#4e9a06">&amp;lt;&amp;lt;EOF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">[Interface]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">PrivateKey = $(cat /etc/wireguard/key/peer-company-privatekey)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">Address = 10.1.0.1/24
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"># 由于需要通过家里的 Peer 访问公司内很多网段，所以公司内的 Peer 同样需要开启转发以访问其它网段
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">PostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -A FORWARD -o %i -j ACCEPT; iptables -t nat -A POSTROUTING -o ens33 -j MASQUERADE
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">PostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -D FORWARD -o %i -j ACCEPT; iptables -t nat -D POSTROUTING -o ens33 -j MASQUERADE
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">[Peer]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">PublicKey = $(cat /etc/wireguard/key/gw-publickey)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">AllowedIPs = 10.1.0.0/24, 192.168.0.0/24
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">Endpoint = $(curl -4 -s ip.sb):16000
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">PersistentKeepalive = 30
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="启动与停止">启动与停止&lt;a class="td-heading-self-link" href="#%e5%90%af%e5%8a%a8%e4%b8%8e%e5%81%9c%e6%ad%a2" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>启动中继服务器 Peer&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>wg-quick up /etc/wireguard/company-wg.conf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>启动其他 Peer&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>wg-quick up /etc/wireguard/company-client.conf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wg-quick up /etc/wireguard/company.conf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>服务启动时，本质是只是执行了几条命令，比如我现在使用 wg-company 配置启动 WireGuard：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># wg-quick up /etc/wireguard/company-wg.conf&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#] ip link add company-wg type wireguard&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#] wg setconf company-wg /dev/fd/63&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#] ip -4 address add 10.1.0.254/24 dev company-wg&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#] ip link set mtu 1420 up dev company-wg&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#] ip -4 route add 10.20.5.0/24 dev company-wg&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#] ip -4 route add 172.38.0.0/16 dev company-wg&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#] iptables -A FORWARD -i company-wg -j ACCEPT; iptables -A FORWARD -o company-wg -j ACCEPT; iptables -t nat -A POSTROUTING -o ens3 -j MASQUERADE&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到执行了如下几部操作&lt;/p>
&lt;ul>
&lt;li>创建 wireguard 类型的 网络设备，并设置该网络设备
&lt;ul>
&lt;li>ip link add wg-company type wireguar&lt;/li>
&lt;li>ip link set mtu 1420 up dev wg-company&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>根据 &lt;code>[Interface]&lt;/code> 部分的配置，为新添加的网络设备添加 IP 地址
&lt;ul>
&lt;li>ip -4 address add 10.1.0.254/24 dev wg-company&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>根据所有 &lt;code>[Peer]&lt;/code> 部分的配置，为主机添加路由条目
&lt;ul>
&lt;li>ip -4 route add 10.20.5.0/24 dev wg-company&lt;/li>
&lt;li>ip -4 route add 172.38.0.0/16 dev wg-company&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>为了让中继服务器可以转发数据包，需要配置 Netfilter 规则。这个规则，可以在 &lt;code>[Interface]&lt;/code> 部分的配置中通过 PostUp 字段定义
&lt;ul>
&lt;li>iptables -A FORWARD -i wg-company -j ACCEPT&lt;/li>
&lt;li>iptables -A FORWARD -o wg-company -j ACCEPT&lt;/li>
&lt;li>iptables -t nat -A POSTROUTING -o ens3 -j MASQUERADE&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>可以看到，即使我们不使用 wg-quick 命令，通过上述操作，同样可以激活 WireGuard，毕竟，WireGuard 已经被包含在 Linux Kernel 当中了，我们只需要创建出来 WireGuard 类型的网络设备，并配置好路由条目，即可转发数据包，实现 VPN 的功能。&lt;/p>
&lt;h2 id="通过-systemd-启动-wireguard">通过 systemd 启动 Wireguard&lt;a class="td-heading-self-link" href="#%e9%80%9a%e8%bf%87-systemd-%e5%90%af%e5%8a%a8-wireguard" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>WireGuard 安装完成后，会生成一个 &lt;code>wg-qucik@.service&lt;/code> 的 Unit 文件：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># systemctl cat wg-quick@.service&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># /lib/systemd/system/wg-quick@.service&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>Unit&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Description&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>WireGuard via wg-quick&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>8&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> %I
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">After&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>network-online.target nss-lookup.target
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Wants&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>network-online.target nss-lookup.target
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">PartOf&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>wg-quick.target
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Documentation&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>man:wg-quick&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>8&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Documentation&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>man:wg&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>8&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Documentation&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>https://www.wireguard.com/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Documentation&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>https://www.wireguard.com/quickstart/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Documentation&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>https://git.zx2c4.com/wireguard-tools/about/src/man/wg-quick.8
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Documentation&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>https://git.zx2c4.com/wireguard-tools/about/src/man/wg.8
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>Service&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Type&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>oneshot
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">RemainAfterExit&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>yes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">ExecStart&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>/usr/bin/wg-quick up %i
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">ExecStop&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>/usr/bin/wg-quick down %i
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Environment&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">WG_ENDPOINT_RESOLUTION_RETRIES&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>infinity
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>Install&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">WantedBy&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>multi-user.target
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>从 &lt;code>[Service]&lt;/code> 部分可以看到，启动和停止服务，就是通过 wg-quick 命令实现的。&lt;/p>
&lt;p>所以想要在让 Peer 开机自启 WireGuard，只需要执行如下操作即可：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>systemctl &lt;span style="color:#204a87">enable&lt;/span> wg-quick@wg-company --now
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>systemctl &lt;span style="color:#204a87">enable&lt;/span> wg-quick@client-company --now
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>systemctl &lt;span style="color:#204a87">enable&lt;/span> wg-quick@company --now
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="查看信息">查看信息&lt;a class="td-heading-self-link" href="#%e6%9f%a5%e7%9c%8b%e4%bf%a1%e6%81%af" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>接口：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 查看系统 VPN 接口信息&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ ip link show wg-company
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 查看 VPN 接口详细信息&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ wg show all
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ wg show wg-company
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>地址：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 查看 VPN 接口地址&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ ip address show wg-company
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>路由&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 查看系统路由表&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ ip route show table main
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ ip route show table &lt;span style="color:#204a87">local&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 获取到特定 IP 的路由&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ ip route get 192.0.2.3
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="分类">分类&lt;a class="td-heading-self-link" href="#%e5%88%86%e7%b1%bb" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>#网络 #隧道协议 #Wireguard&lt;/p>
&lt;/blockquote></description></item><item><title>Docs: Wireguard 全互联模式（full mesh）权威指南</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/Tunneling-Protocol/WireGuard/Wireguard-%E5%85%A8%E4%BA%92%E8%81%94%E6%A8%A1%E5%BC%8Ffull-mesh%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/Tunneling-Protocol/WireGuard/Wireguard-%E5%85%A8%E4%BA%92%E8%81%94%E6%A8%A1%E5%BC%8Ffull-mesh%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/0NntpHp3ghQEvgZvoV9eWw">公众号,云原生实验室-Wireguard 全互联模式（full mesh）权威指南&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>上篇文章给大家介绍了如何&lt;a href="http://mp.weixin.qq.com/s?__biz=MzU1MzY4NzQ1OA==&amp;amp;mid=2247491998&amp;amp;idx=1&amp;amp;sn=840c87b4ecc2108d4a121aa26825ce65&amp;amp;chksm=fbeda153cc9a284516e177a6bdbfc90e57a4f253beb5f2d1abaa9bca54a388e1fc60a5b61b2c&amp;amp;scene=21#wechat_redirect">👉 使用 wg-gen-web 来方便快捷地管理 WireGuard 的配置和秘钥&lt;/a>，文末埋了两个坑：一个是 &lt;code>WireGuard&lt;/code> 的全互联模式（full mesh），另一个是使用 WireGuard 作为 &lt;code>Kubernetes&lt;/code> 的 CNI 插件。今天就来填第一个坑。&lt;/p>
&lt;p>首先解释一下什么是全互联模式（full mesh），全互联模式其实就是一种网络连接形式，即所有结点之间都直接连接，不会通过第三方节点中转流量。和前面提到的点对多点架构[1] 其实是一个意思。&lt;/p>
&lt;h2 id="1-全互联模式架构与配置">1. 全互联模式架构与配置&lt;a class="td-heading-self-link" href="#1-%e5%85%a8%e4%ba%92%e8%81%94%e6%a8%a1%e5%bc%8f%e6%9e%b6%e6%9e%84%e4%b8%8e%e9%85%8d%e7%bd%ae" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>在 WireGuard 的世界里没有 Server 和 Client 之分，所有的节点都是 &lt;code>Peer&lt;/code>。大家使用 WireGuard 的常规做法是找一个节点作为中转节点，也就是 VPN 网关，然后所有的节点都和这个网关进行连接，所有节点之间都通过这个网关来进行通信。这种架构中，为了方便理解，我们可以把网关看成 Server，其他的节点看成 Client，但实际上是不区分 Server 和 Client 的。&lt;/p>
&lt;p>举个例子，假设有 &lt;code>4&lt;/code> 个节点，分别是 A/B/C/D，且这 4 个节点都不在同一个局域网，常规的做法是选取一个节点作为 VPN 网关，架构如图：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/dd680c3b-336a-4d85-be7b-de04eece92a8/640" alt="">&lt;/p>
&lt;p>这种架构的缺点我在之前的文章里也介绍过了，缺点相当明显：&lt;/p>
&lt;ul>
&lt;li>当 Peer 越来越多时，VPN 网关就会变成垂直扩展的瓶颈。&lt;/li>
&lt;li>通过 VPN 网关转发流量的成本很高，毕竟云服务器的流量很贵。&lt;/li>
&lt;li>通过 VPN 网关转发流量会带来很高的延迟。&lt;/li>
&lt;/ul>
&lt;p>那么全互联模式是什么样的架构呢？还是假设有 A/B/C/D 四个节点，每个节点都和其他节点建立 WireGuard 隧道，架构如图：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/dd680c3b-336a-4d85-be7b-de04eece92a8/640" alt="">&lt;/p>
&lt;p>这种架构带来的直接优势就是快！任意一个 Peer 和其他所有 Peer 都是直连，无需中转流量。那么在 WireGuard 的场景下如何实现全互联模式呢？其实这个问题不难，难点在于配置的繁琐程度，本文的主要目标就是精简 WireGuard 全互联模式的配置流程。为了让大家更容易理解，咱们还是先通过架构图来体现各个 Peer 的配置：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/dd680c3b-336a-4d85-be7b-de04eece92a8/640" alt="">&lt;/p>
&lt;p>配置一目了然，每个 Peer 和其他所有 Peer 都是直连，根本没有 VPN 网关这种角色。当然，现实世界的状况没有图中这么简单，有些 Peer 是没有公网 IP 的，躲在 NAT 后面，这里又分两种情况：&lt;/p>
&lt;ol>
&lt;li>NAT 受自己控制。这种情况可以在公网出口设置端口转发，其他 Peer 就可以通过这个公网 IP 和端口连接当前 Peer。如果公网 IP 是动态的，可以通过 DDNS 来解决，但 DDNS 会出现一些小问题，解决方法可以参考 WireGuard 的优化[2]。&lt;/li>
&lt;li>NAT 不受自己控制。这种情况无法在公网出口设置端口转发，只能通过 UDP 打洞来实现互联，具体可以参考 &lt;a href="http://mp.weixin.qq.com/s?__biz=MzU1MzY4NzQ1OA==&amp;amp;mid=2247492210&amp;amp;idx=1&amp;amp;sn=64cfcbf15253c7bdbbbe8939c3fb90da&amp;amp;chksm=fbeda2bfcc9a2ba9785f0f1d74653c757ad74c8c9f4feec2248fdfec2379e11d20a693877921&amp;amp;scene=21#wechat_redirect">👉WireGuard 教程：使用 DNS-SD 进行 NAT-to-NAT 穿透&lt;/a>。&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>接着上述方案再更进一步，打通所有 Peer 的私有网段，让任意一个 Peer 可以访问其他所有 Peer 的私有网段的机器&lt;/strong>。上述配置只是初步完成了全互联，让每个 Peer 可以相互访问彼此而已，要想相互访问私有网段，还得继续增加配置，还是直接看图：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/dd680c3b-336a-4d85-be7b-de04eece92a8/640" alt="">&lt;/p>
&lt;p>红色字体部分就是新增的配置，表示允许访问相应 Peer 的私有网段，就是这么简单。详细的配置步骤请看下一节。&lt;/p>
&lt;h2 id="2-全互联模式最佳实践">2. 全互联模式最佳实践&lt;a class="td-heading-self-link" href="#2-%e5%85%a8%e4%ba%92%e8%81%94%e6%a8%a1%e5%bc%8f%e6%9c%80%e4%bd%b3%e5%ae%9e%e8%b7%b5" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>对如何配置有了清晰的思路之后，接下来就可以进入实践环节了。我不打算从 WireGuard 安装开始讲起，而是以前几篇文章为基础添砖加瓦。所以我建议读者先按顺序看下这两篇文章：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://mp.weixin.qq.com/s?__biz=MzU1MzY4NzQ1OA==&amp;amp;mid=2247488853&amp;amp;idx=1&amp;amp;sn=38acb5689db9d9d69ab1ebc78248e0ed&amp;amp;chksm=fbee5598cc99dc8ee81dc6e2a6ed12bb1fd61efd19f152c75e6e41aadb79a15562d7a6c9cb81&amp;amp;scene=21#wechat_redirect">👉WireGuard 快速安装教程&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://mp.weixin.qq.com/s?__biz=MzU1MzY4NzQ1OA==&amp;amp;mid=2247491998&amp;amp;idx=1&amp;amp;sn=840c87b4ecc2108d4a121aa26825ce65&amp;amp;chksm=fbeda153cc9a284516e177a6bdbfc90e57a4f253beb5f2d1abaa9bca54a388e1fc60a5b61b2c&amp;amp;scene=21#wechat_redirect">👉WireGuard 配置教程：使用 wg-gen-web 来管理 WireGuard 的配置&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>咱们直接从配置开始说起。手撸配置的做法是不明智的，因为当节点增多之后工作量会很大，我还是建议通过图形化界面来管理配置，首选 &lt;a href="http://mp.weixin.qq.com/s?__biz=MzU1MzY4NzQ1OA==&amp;amp;mid=2247491998&amp;amp;idx=1&amp;amp;sn=840c87b4ecc2108d4a121aa26825ce65&amp;amp;chksm=fbeda153cc9a284516e177a6bdbfc90e57a4f253beb5f2d1abaa9bca54a388e1fc60a5b61b2c&amp;amp;scene=21#wechat_redirect">👉wg-gen-web&lt;/a>。&lt;/p>
&lt;p>现在还是假设有上节所述的 4 个 Peer，我们需要从中挑选一个 Peer 来安装 &lt;code>wg-gen-web&lt;/code>，然后通过 &lt;code>wg-gen-web&lt;/code> 来生成配置。挑选哪个 Peer 无所谓，这个没有特殊限制，这里假设挑选 &lt;code>AWS&lt;/code> 来安装 &lt;code>wg-gen-web&lt;/code>。&lt;/p>
&lt;p>安装的步骤直接略过，不是本文的重点，不清楚的可以阅读我之前的文章 &lt;a href="http://mp.weixin.qq.com/s?__biz=MzU1MzY4NzQ1OA==&amp;amp;mid=2247491998&amp;amp;idx=1&amp;amp;sn=840c87b4ecc2108d4a121aa26825ce65&amp;amp;chksm=fbeda153cc9a284516e177a6bdbfc90e57a4f253beb5f2d1abaa9bca54a388e1fc60a5b61b2c&amp;amp;scene=21#wechat_redirect">👉WireGuard 配置教程：使用 wg-gen-web 来管理 WireGuard 的配置&lt;/a>。Server 配置如图：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/dd680c3b-336a-4d85-be7b-de04eece92a8/640" alt="">&lt;/p>
&lt;p>生成 &lt;code>Azure&lt;/code> 的配置：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/dd680c3b-336a-4d85-be7b-de04eece92a8/640" alt="">&lt;/p>
&lt;p>SUBMIT 之后再查看 &lt;code>wg0.conf&lt;/code> 的内容：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ cat /etc/wireguard/wg0.conf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># Updated: 2021-02-24 07:34:23.805535396 +0000 UTC / Created: 2021-02-24 07:24:02.208816462 +0000 UTC&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>Interface&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Address&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> 10.0.0.1/24
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">ListenPort&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">51820&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">PrivateKey&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">eEnHKGkGksx0jqrEDogjRj5l417BrEA39lr7WW9L9U0&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">PreUp&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87">echo&lt;/span> WireGuard PreUp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">PostUp&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> iptables -I FORWARD -i wg0 -j ACCEPT&lt;span style="color:#000;font-weight:bold">;&lt;/span> iptables -I FORWARD -o wg0 -j ACCEPT&lt;span style="color:#000;font-weight:bold">;&lt;/span> iptables -I INPUT -i wg0 -j ACCEPT&lt;span style="color:#000;font-weight:bold">;&lt;/span> iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">PreDown&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87">echo&lt;/span> WireGuard PreDown
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">PostDown&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> iptables -D FORWARD -i wg0 -j ACCEPT&lt;span style="color:#000;font-weight:bold">;&lt;/span> iptables -D FORWARD -o wg0 -j ACCEPT&lt;span style="color:#000;font-weight:bold">;&lt;/span> iptables -D INPUT -i wg0 -j ACCEPT&lt;span style="color:#000;font-weight:bold">;&lt;/span> iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># Azure / / Updated: 2021-02-24 07:43:52.717385042 +0000 UTC / Created: 2021-02-24 07:43:52.717385042 +0000 UTC&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>Peer&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">PublicKey&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> OzdH42suuOpVY5wxPrxM+rEAyEPFg2eL0ZI29N7eSTY&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">PresharedKey&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">1SyJuVp16Puh8Spyl81EgD9PJZGoTLJ2mOccs2UWDvs&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">AllowedIPs&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> 10.0.0.2/32
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里无法通过图形化界面添加私有网段的配置，我们可以直接修改 &lt;code>wg0.conf&lt;/code> 添加配置：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ cat /etc/wireguard/wg0.conf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># Updated: 2021-02-24 07:34:23.805535396 +0000 UTC / Created: 2021-02-24 07:24:02.208816462 +0000 UTC&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>Interface&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Address&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> 10.0.0.1/24
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">ListenPort&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">51820&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">PrivateKey&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">eEnHKGkGksx0jqrEDogjRj5l417BrEA39lr7WW9L9U0&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">PreUp&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87">echo&lt;/span> WireGuard PreUp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">PostUp&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> iptables -I FORWARD -i wg0 -j ACCEPT&lt;span style="color:#000;font-weight:bold">;&lt;/span> iptables -I FORWARD -o wg0 -j ACCEPT&lt;span style="color:#000;font-weight:bold">;&lt;/span> iptables -I INPUT -i wg0 -j ACCEPT&lt;span style="color:#000;font-weight:bold">;&lt;/span> iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">PreDown&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87">echo&lt;/span> WireGuard PreDown
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">PostDown&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> iptables -D FORWARD -i wg0 -j ACCEPT&lt;span style="color:#000;font-weight:bold">;&lt;/span> iptables -D FORWARD -o wg0 -j ACCEPT&lt;span style="color:#000;font-weight:bold">;&lt;/span> iptables -D INPUT -i wg0 -j ACCEPT&lt;span style="color:#000;font-weight:bold">;&lt;/span> iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># Azure / / Updated: 2021-02-24 07:43:52.717385042 +0000 UTC / Created: 2021-02-24 07:43:52.717385042 +0000 UTC&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>Peer&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">PublicKey&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> OzdH42suuOpVY5wxPrxM+rEAyEPFg2eL0ZI29N7eSTY&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">PresharedKey&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">1SyJuVp16Puh8Spyl81EgD9PJZGoTLJ2mOccs2UWDvs&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">AllowedIPs&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> 10.0.0.2/32
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">AllowedIPs&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> 192.168.20.0/24
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>下载 Azure 配置文件：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/dd680c3b-336a-4d85-be7b-de04eece92a8/640" alt="">&lt;/p>
&lt;p>可以看到配置文件内容为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ cat Azure.conf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>Interface&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Address&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> 10.0.0.2/32
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">PrivateKey&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> IFhAyIWY7sZmabsqDDESj9fqoniE/uZFNIvAfYHjN2o&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>Peer&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">PublicKey&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">JgvmQFmhUtUoS3xFMFwEgP3L1Wnd8hJc3laJ90Gwzko&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">PresharedKey&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">1SyJuVp16Puh8Spyl81EgD9PJZGoTLJ2mOccs2UWDvs&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">AllowedIPs&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> 10.0.0.1/32, 192.168.10.0/24
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Endpoint&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> aws.com:51820
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>先不急着修改，一鼓作气生成所有 Peer 的配置文件：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/dd680c3b-336a-4d85-be7b-de04eece92a8/640" alt="">&lt;/p>
&lt;p>这时你会发现 &lt;code>wg0.conf&lt;/code> 中已经包含了所有 Peer 的配置：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ cat /etc/wireguard/wg0.conf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># Updated: 2021-02-24 07:57:00.745287945 +0000 UTC / Created: 2021-02-24 07:24:02.208816462 +0000 UTC&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>Interface&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Address&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> 10.0.0.1/24
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">ListenPort&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">51820&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">PrivateKey&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">eEnHKGkGksx0jqrEDogjRj5l417BrEA39lr7WW9L9U0&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">PreUp&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87">echo&lt;/span> WireGuard PreUp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">PostUp&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> iptables -I FORWARD -i wg0 -j ACCEPT&lt;span style="color:#000;font-weight:bold">;&lt;/span> iptables -I FORWARD -o wg0 -j ACCEPT&lt;span style="color:#000;font-weight:bold">;&lt;/span> iptables -I INPUT -i wg0 -j ACCEPT&lt;span style="color:#000;font-weight:bold">;&lt;/span> iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">PreDown&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87">echo&lt;/span> WireGuard PreDown
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">PostDown&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> iptables -D FORWARD -i wg0 -j ACCEPT&lt;span style="color:#000;font-weight:bold">;&lt;/span> iptables -D FORWARD -o wg0 -j ACCEPT&lt;span style="color:#000;font-weight:bold">;&lt;/span> iptables -D INPUT -i wg0 -j ACCEPT&lt;span style="color:#000;font-weight:bold">;&lt;/span> iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># Aliyun / / Updated: 2021-02-24 07:57:45.941019829 +0000 UTC / Created: 2021-02-24 07:57:45.941019829 +0000 UTC&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>Peer&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">PublicKey&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> kVq2ATMTckCKEJFF4TM3QYibxzlh+b9CV4GZ4meQYAo&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">PresharedKey&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">v818B5etpRlyVYHGUrv9abM5AIQK5xeoCizdWj1AqcE&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">AllowedIPs&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> 10.0.0.4/32
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># GCP / / Updated: 2021-02-24 07:57:27.3555646 +0000 UTC / Created: 2021-02-24 07:57:27.3555646 +0000 UTC&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>Peer&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">PublicKey&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">qn0Xfyzs6bLKgKcfXwcSt91DUxSbtATDIfe4xwsnsGg&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">PresharedKey&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">T5UsVvOEYwfMJQDJudC2ryKeCpnO3RV8GFMoi76ayyI&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">AllowedIPs&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> 10.0.0.3/32
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># Azure / / Updated: 2021-02-24 07:57:00.751653134 +0000 UTC / Created: 2021-02-24 07:43:52.717385042 +0000 UTC&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>Peer&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">PublicKey&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> OzdH42suuOpVY5wxPrxM+rEAyEPFg2eL0ZI29N7eSTY&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">PresharedKey&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">1SyJuVp16Puh8Spyl81EgD9PJZGoTLJ2mOccs2UWDvs&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">AllowedIPs&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> 10.0.0.2/32
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>现在问题就好办了，我们只需将 wg0.conf 中的 Aliyun 和 GCP 部分的配置拷贝到 Azure 的配置中，并删除 PresharedKey 的配置，再添加 Endpoint 和私有网段的配置：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ cat Azure.conf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>Interface&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Address&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> 10.0.0.2/32
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">PrivateKey&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> IFhAyIWY7sZmabsqDDESj9fqoniE/uZFNIvAfYHjN2o&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>Peer&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">PublicKey&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">JgvmQFmhUtUoS3xFMFwEgP3L1Wnd8hJc3laJ90Gwzko&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">PresharedKey&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">1SyJuVp16Puh8Spyl81EgD9PJZGoTLJ2mOccs2UWDvs&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">AllowedIPs&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> 10.0.0.1/32, 192.168.10.0/24
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Endpoint&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> aws.com:51820
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># Aliyun / / Updated: 2021-02-24 07:57:45.941019829 +0000 UTC / Created: 2021-02-24 07:57:45.941019829 +0000 UTC&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>Peer&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">PublicKey&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> kVq2ATMTckCKEJFF4TM3QYibxzlh+b9CV4GZ4meQYAo&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">AllowedIPs&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> 10.0.0.4/32
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">AllowedIPs&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> 192.168.40.0/24
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Endpoint&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> aliyun.com:51820
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># GCP / / Updated: 2021-02-24 07:57:27.3555646 +0000 UTC / Created: 2021-02-24 07:57:27.3555646 +0000 UTC&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>Peer&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">PublicKey&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">qn0Xfyzs6bLKgKcfXwcSt91DUxSbtATDIfe4xwsnsGg&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">AllowedIPs&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> 10.0.0.3/32
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">AllowedIPs&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> 192.168.30.0/24
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Endpoint&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> gcp.com:51820
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>同理，GCP 的配置如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ cat GCP.conf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>Interface&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Address&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> 10.0.0.3/32
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">PrivateKey&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> oK2gIMBAob67Amj2gT+wR9pzkbqWGNtq794nOoD3i2o&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>Peer&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">PublicKey&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">JgvmQFmhUtUoS3xFMFwEgP3L1Wnd8hJc3laJ90Gwzko&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">PresharedKey&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">T5UsVvOEYwfMJQDJudC2ryKeCpnO3RV8GFMoi76ayyI&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">AllowedIPs&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> 10.0.0.1/32, 192.168.10.0/24
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Endpoint&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> aws.com:51820
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># Aliyun / / Updated: 2021-02-24 07:57:45.941019829 +0000 UTC / Created: 2021-02-24 07:57:45.941019829 +0000 UTC&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>Peer&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">PublicKey&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> kVq2ATMTckCKEJFF4TM3QYibxzlh+b9CV4GZ4meQYAo&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">AllowedIPs&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> 10.0.0.4/32
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">AllowedIPs&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> 192.168.40.0/24
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Endpoint&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> aliyun.com:51820
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># Azure / / Updated: 2021-02-24 07:57:00.751653134 +0000 UTC / Created: 2021-02-24 07:43:52.717385042 +0000 UTC&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>Peer&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">PublicKey&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> OzdH42suuOpVY5wxPrxM+rEAyEPFg2eL0ZI29N7eSTY&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">PresharedKey&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">1SyJuVp16Puh8Spyl81EgD9PJZGoTLJ2mOccs2UWDvs&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">AllowedIPs&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> 10.0.0.2/32
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">AllowedIPs&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> 192.168.20.0/24
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Endpoint&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> azure.com:51820
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Aliyun 的配置如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ cat Aliyun.conf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>Interface&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Address&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> 10.0.0.4/32
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">PrivateKey&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> +A1ZESJjmHuskB4yKqTcqC3CB24TwBKHGSffWDHxI28&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>Peer&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">PublicKey&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">JgvmQFmhUtUoS3xFMFwEgP3L1Wnd8hJc3laJ90Gwzko&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">PresharedKey&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">v818B5etpRlyVYHGUrv9abM5AIQK5xeoCizdWj1AqcE&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">AllowedIPs&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> 10.0.0.1/32, 192.168.10.0/24
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Endpoint&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> aws.com:51820
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># GCP / / Updated: 2021-02-24 07:57:27.3555646 +0000 UTC / Created: 2021-02-24 07:57:27.3555646 +0000 UTC&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>Peer&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">PublicKey&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">qn0Xfyzs6bLKgKcfXwcSt91DUxSbtATDIfe4xwsnsGg&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">AllowedIPs&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> 10.0.0.3/32
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">AllowedIPs&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> 192.168.30.0/24
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Endpoint&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> gcp.com:51820
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># Azure / / Updated: 2021-02-24 07:57:00.751653134 +0000 UTC / Created: 2021-02-24 07:43:52.717385042 +0000 UTC&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>Peer&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">PublicKey&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> OzdH42suuOpVY5wxPrxM+rEAyEPFg2eL0ZI29N7eSTY&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">PresharedKey&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">1SyJuVp16Puh8Spyl81EgD9PJZGoTLJ2mOccs2UWDvs&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">AllowedIPs&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> 10.0.0.2/32
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">AllowedIPs&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> 192.168.20.0/24
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Endpoint&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> azure.com:51820
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>最后在各自的节点上通过各自的配置文件把 WireGuard 跑起来，就搞定了。&lt;/p>
&lt;p>整个图形化界面配置过程中会出现好几个地方需要手动调整配置，这是因为 &lt;code>wg-gen-web&lt;/code> 的功能目前还不完善，需要给它一定的时间。如果你无法接受手动调整配置，可以尝试另外一个项目：wg-meshconf[3]，这个项目专门用来生成 mesh 的配置，但没有图形化管理界面。各有利弊吧，大家自行选择。&lt;/p>
&lt;h2 id="3-总结">3. 总结&lt;a class="td-heading-self-link" href="#3-%e6%80%bb%e7%bb%93" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>我知道，很多人可能还是一头雾水，这玩意儿的应用场景有哪些？我随便举个简单的例子，假设你在云服务器上部署了 Kubernetes 集群，可以用本地的机器和云服务器的某台节点组建 WireGuard 隧道，然后在本地的 &lt;code>AllowedIPs&lt;/code> 中加上 Pod 网段和 Service 网段，就可以那啥了，你懂吧？&lt;/p>
&lt;p>好吧，又埋了一个坑，关于如何在家中直接访问云服务器 k8s 集群的 Pod IP 和 Service IP，后面会有专门的文章给大家讲解，虽然我也不确定是多久以后。。&lt;/p>
&lt;h3 id="参考资料">参考资料&lt;a class="td-heading-self-link" href="#%e5%8f%82%e8%80%83%e8%b5%84%e6%96%99" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>[1]&lt;/p>
&lt;p>点对多点架构: &lt;a href="https://fuckcloudnative.io/posts/why-not-why-not-wireguard/#7-wireguard-%E7%9C%9F%E7%9A%84%E5%BE%88%E5%BF%AB%E5%90%97">&lt;em>https://fuckcloudnative.io/posts/why-not-why-not-wireguard/#7-wireguard - 真的很快吗&lt;/em>&lt;/a>&lt;/p>
&lt;p>[2]&lt;/p>
&lt;p>WireGuard 的优化: &lt;a href="https://fuckcloudnative.io/posts/configure-wireguard-using-wg-gen-web/#%E5%8A%A8%E6%80%81-ip">&lt;em>https://fuckcloudnative.io/posts/configure-wireguard-using-wg-gen-web/# 动态 - ip&lt;/em>&lt;/a>&lt;/p>
&lt;p>[3]&lt;/p>
&lt;p>wg-meshconf: &lt;a href="https://github.com/k4yt3x/wg-meshconf/blob/master/README.md">&lt;em>https://github.com/k4yt3x/wg-meshconf/blob/master/README.md&lt;/em>&lt;/a>&lt;/p></description></item><item><title>Docs: WireGuard 全互联模式终极指南（上）！</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/Tunneling-Protocol/WireGuard/WireGuard-%E5%85%A8%E4%BA%92%E8%81%94%E6%A8%A1%E5%BC%8F%E7%BB%88%E6%9E%81%E6%8C%87%E5%8D%97%E4%B8%8A/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/Tunneling-Protocol/WireGuard/WireGuard-%E5%85%A8%E4%BA%92%E8%81%94%E6%A8%A1%E5%BC%8F%E7%BB%88%E6%9E%81%E6%8C%87%E5%8D%97%E4%B8%8A/</guid><description>
&lt;p>&lt;a href="https://mp.weixin.qq.com/s/s6eIoxaVNXVHRnWBnugylg">WireGuard 全互联模式终极指南（上）！&lt;/a>
&lt;a href="https://mp.weixin.qq.com/s/KrDJs3e6JjKgCADNigPUJA">https://mp.weixin.qq.com/s/KrDJs3e6JjKgCADNigPUJA&lt;/a>&lt;/p>
&lt;p>大家好，我是米开朗基杨。&lt;/p>
&lt;p>关注我的读者应该都还记得我之前写过一篇 &lt;a href="https://mp.weixin.qq.com/s?__biz=MzU1MzY4NzQ1OA==&amp;amp;mid=2247492833&amp;amp;idx=1&amp;amp;sn=642025bef0c6d400bc3f1cab9906a8e6&amp;amp;chksm=fbeda42ccc9a2d3a00711e3c79d0c2dc50935b5139e89032537daf2b8af544a148a740ff12c1&amp;amp;scene=21&amp;amp;cur_album_id=1612086810350829568#wechat_redirect">👉WireGuard 全互联模式 (full mesh) 的配置指南&lt;/a>，限于当时还没有成熟的产品来帮助我们简化全互联模式的配置，所以我选择了使用可视化界面 &lt;a href="https://mp.weixin.qq.com/s?__biz=MzU1MzY4NzQ1OA==&amp;amp;mid=2247491998&amp;amp;idx=1&amp;amp;sn=840c87b4ecc2108d4a121aa26825ce65&amp;amp;chksm=fbeda153cc9a284516e177a6bdbfc90e57a4f253beb5f2d1abaa9bca54a388e1fc60a5b61b2c&amp;amp;scene=21&amp;amp;cur_album_id=1612086810350829568#wechat_redirect">👉wg-gen-web&lt;/a> 来达成目的。但 &lt;a href="https://mp.weixin.qq.com/s?__biz=MzU1MzY4NzQ1OA==&amp;amp;mid=2247491998&amp;amp;idx=1&amp;amp;sn=840c87b4ecc2108d4a121aa26825ce65&amp;amp;chksm=fbeda153cc9a284516e177a6bdbfc90e57a4f253beb5f2d1abaa9bca54a388e1fc60a5b61b2c&amp;amp;scene=21&amp;amp;cur_album_id=1612086810350829568#wechat_redirect">👉wg-gen-web&lt;/a> 的缺陷也很明显，它生成的每一个客户端的配置都要手动调整，终究还是不够便利。&lt;/p>
&lt;p>今天我将为大家介绍一种更加完美的工具来配置 WireGuard 的全互联模式，这个工具就是 Netmaker[1]。&lt;/p>
&lt;p>&lt;strong>由于篇幅原因，本系列文章将会分成两篇进行介绍。本篇文章介绍 Netmaker 的工作原理和功能解读；下一篇文章将会介绍如何使用 Netmaker 来配置 WireGuard 全互联模式。&lt;/strong>&lt;/p>
&lt;h2 id="netmaker-介绍">Netmaker 介绍&lt;a class="td-heading-self-link" href="#netmaker-%e4%bb%8b%e7%bb%8d" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Netmaker 是一个用来配置 WireGuard 全互联模式的可视化工具，它的功能非常强大，不仅支持 UDP 打洞、NAT 穿透、多租户，还可以使用 Kubernetes 配置清单来部署，客户端几乎适配了所有平台，包括 Linux, Mac 和 Windows，还可以通过 WireGuard 原生客户端连接 iPhone 和 Android，真香！&lt;/p>
&lt;p>其最新版本的基准测试结果显示，基于 Netmaker 的 WireGuard 网络速度比其他全互联模式的 VPN（例如 Tailscale 和 ZeroTier）网络速度快 50% 以上。&lt;/p>
&lt;h2 id="netmaker-架构">Netmaker 架构&lt;a class="td-heading-self-link" href="#netmaker-%e6%9e%b6%e6%9e%84" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/9125c963-31dc-45d8-ae30-c608056cb4ee/640" alt="">&lt;/p>
&lt;p>Netmaker 使用的是 C/S 架构，即客户端 / 服务器架构。Netmaker Server 包含两个核心组件：用来管理网络的可视化界面，以及与客户端通信的 gRPC Server。你也可以可以选择部署 DNS 服务器（CoreDNS）来管理私有 DNS。&lt;/p>
&lt;p>客户端（netclient）是一个二进制文件，可以在绝大多数 Linux 客户端以及 macOS 和 Windows 客户端运行，它的功能就是自动管理 WireGuard，动态更新 Peer 的配置。&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>注意&lt;/strong>：这里不要将 Netmaker 理解成我之前的文章所提到的&lt;a href="https://mp.weixin.qq.com/s?__biz=MzU1MzY4NzQ1OA==&amp;amp;mid=2247491469&amp;amp;idx=1&amp;amp;sn=a5a1be7c9f4d2cf1f5f071a6f26f9856&amp;amp;chksm=fbee5f40cc99d6560cd756f6c710c066ae3605bad366b9b01006358542fd8374bb97ce50ac4f&amp;amp;scene=21&amp;amp;cur_album_id=1612086810350829568#wechat_redirect">👉 中心辐射型网络拓扑&lt;/a>。Netmaker Server 只是用来存储虚拟网络的配置并管理各个 Peer 的状态，Peer 之间的网络流量并不会通过 Netmaker Server。&lt;/p>
&lt;/blockquote>
&lt;p>Netmaker 还有一个重要的术语叫&lt;strong>签到&lt;/strong>，客户端会通过定时任务来不断向 Netmaker Server 签到，以动态更新自身的状态和 Peer 的配置，它会从 Netmaker Server 检索 Peer 列表，然后与所有的 Peer 建立点对点连接，即全互联模式。所有的 Peer 通过互联最终呈现出来的网络拓扑结构就类似于本地子网或 VPC。&lt;/p>
&lt;h2 id="netmaker-部署">Netmaker 部署&lt;a class="td-heading-self-link" href="#netmaker-%e9%83%a8%e7%bd%b2" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Netmaker 支持多种部署方式，包括二进制部署和容器化部署，容器化部署还支持 docker-compose 和 Kubernetes。如果你没有可以暴露服务到公网的 Kubernetes 集群，我推荐还是直接通过 docker-compose 来部署，简单粗暴。&lt;/p>
&lt;p>官方推荐的做法是使用 Caddy 或 Nginx 来反向代理 Netmaker UI、API Server 和 gRPC Server，但我的域名没有备案，我也怕麻烦，就直接通过公网 IP 来提供服务了。如果你也想通过公网域名来暴露 Netmaker 的服务，可以参考 Netmaker 的官方文档[2]。&lt;/p>
&lt;p>本文的部署方案将直接通过公网 IP 来提供服务，首先需要安装 docker-compose，安装方法可以参考 Docker 官方文档[3]。&lt;/p>
&lt;p>安装完 docker-compose 后，再下载 docker-compose 的 YAML 配置清单：&lt;/p>
&lt;p>&lt;code>$ wget https://cdn.jsdelivr.net/gh/gravitl/netmaker@master/compose/docker-compose.yml&lt;/code>&lt;/p>
&lt;p>现在还不能直接部署，需要根据自己的实际环境对配置清单进行修改。例如，我修改后的配置清单内容如下：&lt;/p>
&lt;p>`version: &amp;ldquo;3.4&amp;rdquo;&lt;/p>
&lt;p>services:
  netmaker:
    container_name: netmaker
    image: gravitl/netmaker:v0.8.2
    volumes:
      - /etc/netclient/config:/etc/netclient/config
      - dnsconfig:/root/config/dnsconfig
      - /usr/bin/wg:/usr/bin/wg
      - /data/sqldata/:/root/data
    cap_add:
      - NET_ADMIN
    restart: always
    network_mode: host
    environment:
      SERVER_HOST: &amp;ldquo;&amp;lt;public_ip&amp;gt;&amp;rdquo;
      COREDNS_ADDR: &amp;ldquo;&amp;lt;public_ip&amp;gt;&amp;rdquo;
      GRPC_SSL: &amp;ldquo;off&amp;rdquo;
      DNS_MODE: &amp;ldquo;on&amp;rdquo;
      CLIENT_MODE: &amp;ldquo;on&amp;rdquo;
      API_PORT: &amp;ldquo;8081&amp;rdquo;
      GRPC_PORT: &amp;ldquo;50051&amp;rdquo;
      SERVER_GRPC_WIREGUARD: &amp;ldquo;off&amp;rdquo;
      CORS_ALLOWED_ORIGIN: &amp;ldquo;*&amp;rdquo;
      DATABASE: &amp;ldquo;sqlite&amp;rdquo;
  netmaker-ui:
    container_name: netmaker-ui
    depends_on:
      - netmaker
    image: gravitl/netmaker-ui:v0.8
    links:
      - &amp;ldquo;netmaker:api&amp;rdquo;
    ports:
      - &amp;ldquo;80:80&amp;rdquo;
    environment:
      BACKEND_URL: &amp;ldquo;http://&amp;lt;public_ip&amp;gt;:8081&amp;rdquo;
    restart: always
    network_mode: host
  coredns:
    depends_on:
      - netmaker
    image: coredns/coredns
    command: -conf /root/dnsconfig/Corefile
    container_name: coredns
    restart: always
    network_mode: host
    volumes:
      - dnsconfig:/root/dnsconfig
volumes:
  dnsconfig: {}&lt;/p>
&lt;p>`&lt;/p>
&lt;p>总共有以下几处改动：&lt;/p>
&lt;ul>
&lt;li>删除了不必要的环境变量，并修改了其中一部分环境变量，比如关闭 SSL 模式，将域名替换为公网 IP。你需要根据自己的实际环境将 &lt;code>&amp;lt;public_ip&amp;gt;&lt;/code> 替换为你的公网 IP。&lt;/li>
&lt;li>将所有容器的网络模式都改为 host 模式，即 &lt;code>network_mode: host&lt;/code>。&lt;/li>
&lt;li>将 sqlite 的数据存储改为 hostpath，即 &lt;code>/data/sqldata/:/root/data&lt;/code>。&lt;/li>
&lt;/ul>
&lt;p>其中 &lt;code>CLIENT_MODE: &amp;quot;on&amp;quot;&lt;/code> 表示将 Netmaker Server 所在的节点也作为 Mesh Network 的 Peer 节点。&lt;/p>
&lt;p>最后我们就可以通过配置清单来部署容器了：&lt;/p>
&lt;p>&lt;code>$ docker-compose up -d&lt;/code>&lt;/p>
&lt;p>查看是否部署成功：&lt;/p>
&lt;p>`$ docker ps&lt;/p>
&lt;p>CONTAINER ID    IMAGE                                 COMMAND                   CREATED       STATUS    PORTS    NAMES
0daf3a35f8ce    docker.io/coredns/coredns:latest      &amp;ldquo;/coredns -conf /roo…&amp;rdquo;    7 days ago    Up                 coredns
0dbb0158e821    docker.io/gravitl/netmaker-ui:v0.8    &amp;ldquo;/docker-entrypoint.…&amp;rdquo;    7 days ago    Up                 netmaker-ui
bd39ee52013e    docker.io/gravitl/netmaker:v0.8.2     &amp;ldquo;./netmaker&amp;rdquo;              7 days ago    Up                 netmaker&lt;/p>
&lt;p>`&lt;/p>
&lt;p>部署成功后，就可以在浏览器的地址栏输入你的公网 IP 来访问 Netmaker UI 了。&lt;/p>
&lt;h2 id="netmaker-功能解读">Netmaker 功能解读&lt;a class="td-heading-self-link" href="#netmaker-%e5%8a%9f%e8%83%bd%e8%a7%a3%e8%af%bb" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>我们先通过 UI 来看看 Netmaker 都有哪些功能。&lt;/p>
&lt;h3 id="网络networks">网络（Networks）&lt;a class="td-heading-self-link" href="#%e7%bd%91%e7%bb%9cnetworks" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/9125c963-31dc-45d8-ae30-c608056cb4ee/640" alt="">&lt;/p>
&lt;p>Netmaker 允许创建任意数量的私有网络，可以设置任意地址范围。你只需要给这个网络起个名字，设置一个地址范围，并选择想要启用的选项。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/9125c963-31dc-45d8-ae30-c608056cb4ee/640" alt="">&lt;/p>
&lt;p>目前总共包含三个可选项：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Dual Stack&lt;/strong> : 双栈，即开启 IPv6。&lt;/li>
&lt;li>&lt;strong>Local Only&lt;/strong> : 各个 Peer 之间只会通过内网地址来互联，即 Endpoint 皆为内网地址。适用于数据中心、VPC 或家庭 / 办公网络的内部。&lt;/li>
&lt;li>&lt;strong>Hole Punching&lt;/strong> : 动态发现和配置 Endpoint 和端口，帮助 Peer 轻松穿透 NAT 进行 UDP 打洞。&lt;/li>
&lt;/ul>
&lt;p>管理员拥有对网络的最高控制器，例如，更改私有网络的网段，Peer 便会自动更新自身的 IP。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/9125c963-31dc-45d8-ae30-c608056cb4ee/640" alt="">&lt;/p>
&lt;p>如果发现网络被入侵，也可以让网络中的所有节点刷新公钥。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/9125c963-31dc-45d8-ae30-c608056cb4ee/640" alt="">&lt;/p>
&lt;h3 id="节点nodes">节点（Nodes）&lt;a class="td-heading-self-link" href="#%e8%8a%82%e7%82%b9nodes" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/9125c963-31dc-45d8-ae30-c608056cb4ee/640" alt="">&lt;/p>
&lt;p>Node 表示节点，通常是运行 Linux 的服务器，安装了 netclient 和 WireGuard。这个节点会通过 WireGuard 私有网络和其他所有节点相连。一但节点被添加到私有网络中，Netmaker 管理员就可以操控该节点的配置，例如：&lt;/p>
&lt;ul>
&lt;li>私有网络地址&lt;/li>
&lt;li>过期时间&lt;/li>
&lt;li>WireGuard 相关设置&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/9125c963-31dc-45d8-ae30-c608056cb4ee/640" alt="">&lt;/p>
&lt;p>管理员也可以将该节点从私有网络中完全删除，让其无法连接其他所有 Peer 节点。&lt;/p>
&lt;p>Node 还有两个比较重要的功能，就是将自身设置为 Ingress Gateway（入口网关）或者 Egress Gateway（出口网关）。Ingress Gateway 允许外部客户端的流量进入内部网络，Egress Gateway 允许将内部网络的流量转发到外部指定的 IP 范围。这两项功能对全互联模式进行了扩展，比如手机客户端就可以通过 Ingress Gateway 接入进来。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/9125c963-31dc-45d8-ae30-c608056cb4ee/640" alt="">&lt;/p>
&lt;h3 id="访问秘钥access-keys">访问秘钥（Access Keys）&lt;a class="td-heading-self-link" href="#%e8%ae%bf%e9%97%ae%e7%a7%98%e9%92%a5access-keys" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>一个节点想要加入到私有网络，需要获取访问秘钥进行授权，当然你也可以选择手动批准。&lt;/p>
&lt;p>一个访问秘钥可以被多个节点重复使用，你只需修改 Number 数量就可以实现这个目的。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/9125c963-31dc-45d8-ae30-c608056cb4ee/640" alt="">&lt;/p>
&lt;p>访问秘钥创建后只会显示一次，展示了三个选项：&lt;/p>
&lt;ol>
&lt;li>原始访问秘钥&lt;/li>
&lt;li>访问令牌（access token），它将访问密钥与用于加入网络的参数（例如地址、端口和网络名称）包装在一起。当你运行 &lt;code>netclient join -t &amp;lt;token&amp;gt;&lt;/code> 时，netclient 会对该令牌进行解码，并解析参数。&lt;/li>
&lt;li>安装脚本，用于在标准 Linux 服务器上首次安装 netclient。它只是简单地下载 netclient 并为你运行 &amp;ldquo;join&amp;rdquo; 命令。&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/9125c963-31dc-45d8-ae30-c608056cb4ee/640" alt="">&lt;/p>
&lt;h3 id="dns">DNS&lt;a class="td-heading-self-link" href="#dns" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>如果启用了 DNS 组件，Netmaker 就会通过 CoreDNS 来维护私有 DNS，它会为私有网络中的每个节点创建一个默认的 DNS 条目。你也可以创建自定义的 DNS 条目。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/9125c963-31dc-45d8-ae30-c608056cb4ee/640" alt="">&lt;/p>
&lt;h3 id="外部客户端external-clients">外部客户端（External Clients）&lt;a class="td-heading-self-link" href="#%e5%a4%96%e9%83%a8%e5%ae%a2%e6%88%b7%e7%ab%afexternal-clients" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>Netclient 目前只支持 Linux、macOS 和 Windows，如果 Android 和 iOS 端想要加入 VPN 私有网络，只能通过 WireGuard 原生客户端来进行连接。要想做到这一点，需要管理员事先创建一个 External Client，它会生成一个 WireGuard 配置文件，WireGuard 客户端可以下载该配置文件或者扫描二维码进行连接。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/9125c963-31dc-45d8-ae30-c608056cb4ee/640" alt="">&lt;/p>
&lt;p>当然，在创建 External Client 之前，需要先设置其中一个节点为 Ingress Gateway。&lt;/p>
&lt;p>需要说明的是，目前移动设备通过 External Client 接入只是权宜之计，随着 Netclient 对更多操作系统的支持，最终所有的客户端都应该使用 netclient 来连接。&lt;/p>
&lt;h2 id="netclient-介绍">Netclient 介绍&lt;a class="td-heading-self-link" href="#netclient-%e4%bb%8b%e7%bb%8d" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>netclient 是一个非常简单的 CLI，用于创建 WireGuard 配置和接口，将节点加入到 Netmaker 的私有网络中。netclient 可以管理任意数量的 Netmaker 私有网络，所有的网络都由同一个 netclient 实例管理。&lt;/p>
&lt;p>`$ netclient &amp;ndash;help
NAME:
   Netclient CLI - Netmaker&amp;rsquo;s netclient agent and CLI. Used to perform interactions with Netmaker server and set local WireGuard config.&lt;/p>
&lt;p>USAGE:
   netclient [global options] command [command options][arguments&amp;hellip;]&lt;/p>
&lt;p>VERSION:
   v0.8.1&lt;/p>
&lt;p>COMMANDS:
   join       Join a Netmaker network.
   leave      Leave a Netmaker network.
   checkin    Checks for local changes and then checks into the specified Netmaker network to ask about remote changes.
   push       Push configuration changes to server.
   pull       Pull latest configuration and peers from server.
   list       Get list of networks.
   uninstall  Uninstall the netclient system service.
   help, h    Shows a list of commands or help for one command&lt;/p>
&lt;p>GLOBAL OPTIONS:
   &amp;ndash;help, -h     show help (default: false)
   &amp;ndash;version, -v  print the version (default: false)&lt;/p>
&lt;p>`&lt;/p>
&lt;h3 id="netclient-工作原理">Netclient 工作原理&lt;a class="td-heading-self-link" href="#netclient-%e5%b7%a5%e4%bd%9c%e5%8e%9f%e7%90%86" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>使用 netclient 可以加入某个网络，拉取或推送变更，以及离开某个网络。同时 netclient 还有几个辅助命令用于其他场景。&lt;/p>
&lt;p>使用 netclient 加入某个网络时，它会创建一个目录 &lt;code>/etc/netclient&lt;/code>，并将 netclient 二进制文件本身复制到该目录下。&lt;/p>
&lt;p>&lt;code>$ ls -lh /etc/netclient/netclient -rwxr-xr-x 1 root root 12M Oct  8 23:08 /etc/netclient/netclient&lt;/code>&lt;/p>
&lt;p>同时会在该目录下创建一个子目录 &lt;code>config&lt;/code>，并在子目录下创建相应的配置文件。比如你加入的网络名称是 default，那么配置文件名称就是 &lt;code>netconfig-default&lt;/code>。&lt;/p>
&lt;p>&lt;code>$ ls -lh /etc/netclient/config/ total 32K -rwxr-xr-x 1 root root 1.8K Oct 17 16:23 netconfig-default -rw-r--r-- 1 root root  176 Oct  8 23:08 nettoken-default -rw-r--r-- 1 root root   16 Oct  8 23:08 secret-default -rw-r--r-- 1 root root   44 Oct  8 23:08 wgkey-default&lt;/code>&lt;/p>
&lt;p>如果第一次使用 netclient 加入某个网络，它会尝试将自己设置为当前节点的守护进程，以 Linux 为例，它会创建一个 systemd 服务：&lt;/p>
&lt;p>`$ cat /etc/systemd/system/netclient.service
[Unit]
Description=Network Check
Wants=netclient.timer&lt;/p>
&lt;p>[Service]
Type=simple
ExecStart=/etc/netclient/netclient checkin -n all&lt;/p>
&lt;p>[Install]
WantedBy=multi-user.target&lt;/p>
&lt;p>`&lt;/p>
&lt;p>该 systemd 服务的作用是向 Netmaker Server &lt;strong>签到&lt;/strong>，并将本地的配置与 Netmaker Server 托管的配置进行比较，根据比较结果进行适当修改，再拉取所有的 Peer 列表，最后重新配置 WireGuard。&lt;/p>
&lt;p>同时还会设置一个计划任务，来定期（每 15 秒执行一次）启动守护进程同步本地和远程 Netmaker Server 的配置。&lt;/p>
&lt;p>`$ cat /etc/systemd/system/netclient.timer
[Unit]
Description=Calls the Netmaker Mesh Client Service
Requires=netclient.service&lt;/p>
&lt;p>[Timer]
Unit=netclient.service&lt;/p>
&lt;p>OnCalendar=&lt;em>:&lt;/em>:0/15&lt;/p>
&lt;p>[Install]
WantedBy=timers.target&lt;/p>
&lt;p>`&lt;/p>
&lt;p>对于不支持 systemd 的 Linux 发行版，我们可以采取其他方式来执行守护进程和计划任务。我们也可以把 netclient 作为调试工具，执行 &lt;code>netclient pull&lt;/code> 从 Netmaker Server 获取最新配置，执行 &lt;code>netclient push&lt;/code> 将本地变更推送到 Netmaker Server，等等。&lt;/p>
&lt;h2 id="总结">总结&lt;a class="td-heading-self-link" href="#%e6%80%bb%e7%bb%93" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>本文在讲解过程中略过了很多功能和选项的细节，如果你有兴趣了解某个特定的功能或者选项，可以查阅 Netmaker 的官方文档[4]。下一篇文章将会介绍如何使用 Netmaker 来配置 WireGuard 全互联模式，我会详细介绍 Linux、macOS 和手机客户端分别该如何配置，敬请期待！&lt;/p>
&lt;h3 id="引用链接">引用链接&lt;a class="td-heading-self-link" href="#%e5%bc%95%e7%94%a8%e9%93%be%e6%8e%a5" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>[1]&lt;/p>
&lt;p>Netmaker: &lt;a href="https://github.com/gravitl/netmaker">&lt;em>https://github.com/gravitl/netmaker&lt;/em>&lt;/a>&lt;/p>
&lt;p>[2]&lt;/p>
&lt;p>Netmaker 的官方文档: &lt;a href="https://docs.netmaker.org/quick-start.html">&lt;em>https://docs.netmaker.org/quick-start.html&lt;/em>&lt;/a>&lt;/p>
&lt;p>[3]&lt;/p>
&lt;p>Docker 官方文档: &lt;a href="https://docs.docker.com/compose/install/">&lt;em>https://docs.docker.com/compose/install/&lt;/em>&lt;/a>&lt;/p>
&lt;p>[4]&lt;/p>
&lt;p>Netmaker 的官方文档: &lt;a href="https://docs.netmaker.org/">&lt;em>https://docs.netmaker.org/&lt;/em>&lt;/a>&lt;/p></description></item><item><title>Docs: Wireguard配置详解</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/Tunneling-Protocol/WireGuard/Wireguard-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/Tunneling-Protocol/WireGuard/Wireguard-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://zhangguanzhang.github.io/2020/08/05/wireguard-for-personal/">https://zhangguanzhang.github.io/2020/08/05/wireguard-for-personal/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://fuckcloudnative.io/posts/wireguard-docs-practice/#peer">https://fuckcloudnative.io/posts/wireguard-docs-practice/#peer&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>WireGuard 使用 &lt;a href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E6%97%A0%E6%B3%95%E5%88%86%E7%B1%BB%E7%9A%84%E8%AF%AD%E8%A8%80/INI.md">INI&lt;/a> 作为其配置文件格式。配置文件可以放在任何路径下，但必须通过绝对路径引用。默认路径是 &lt;code>/etc/wireguard/*.conf&lt;/code>。&lt;/p>
&lt;p>配置文件的命名形式必须为 &lt;code>${WireGuard_Interface_Name}.conf&lt;/code>。通常情况下 WireGuard 接口名称以 &lt;code>wg&lt;/code> 为前缀，并从 &lt;code>0&lt;/code> 开始编号，但你也可以使用其他名称，只要符合正则表达式 &lt;code>^[a-zA-Z0-9_=+.-]{1,15}$&lt;/code> 就行。当启动时，如果配置文件中有 wg0.conf 文件，则会创建一个名为 wg0 的网络设备。效果如下&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/opfrn4/1630110240584-d9fccfed-8434-4ed6-a7b7-d42796fed26c.png" alt="image.png">&lt;/p>
&lt;p>注意：&lt;code>${WireGuard_Interface_Name}&lt;/code> 不能过长，否则将会报错：&lt;code>wg-quick: The config file must be a valid interface name, followed by .conf&lt;/code>&lt;/p>
&lt;h2 id="基本配置示例">基本配置示例&lt;a class="td-heading-self-link" href="#%e5%9f%ba%e6%9c%ac%e9%85%8d%e7%bd%ae%e7%a4%ba%e4%be%8b" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ini" data-lang="ini">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">[Interface]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># Name = node1.example.tld&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">Address&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">192.0.2.3/32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">ListenPort&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">51820&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">PrivateKey&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">localPrivateKeyAbcAbcAbc=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">DNS&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">1.1.1.1,8.8.8.8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">Table&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">12345&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">MTU&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">1500&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">PreUp&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">/bin/example arg1 arg2 %i&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">PostUp&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">/bin/example arg1 arg2 %i&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">PreDown&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">/bin/example arg1 arg2 %i&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">PostDown&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">/bin/example arg1 arg2 %i&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">[Peer]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># Name = node2-node.example.tld&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">AllowedIPs&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">192.0.2.1/24&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">Endpoint&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">node1.example.tld:51820&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">PublicKey&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">remotePublicKeyAbcAbcAbc=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">PersistentKeepalive&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">25&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="interface">[Interface]&lt;a class="td-heading-self-link" href="#interface" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>Interface 部分定义本地 VPN 配置。例如：&lt;/p>
&lt;ul>
&lt;li>本地节点是客户端，只路由自身的流量，只暴露一个 IP。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ini" data-lang="ini">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">[Interface]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># Name = phone.example-vpn.dev&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">Address&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">192.0.2.5/32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">PrivateKey&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;lt;private key for phone.example-vpn.dev&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>本地节点是中继服务器，它可以将流量转发到其他对等节点（peer），并公开整个 VPN 子网的路由。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ini" data-lang="ini">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">[Interface]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># Name = public-server1.example-vpn.tld&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">Address&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">192.0.2.1/24&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">ListenPort&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">51820&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">PrivateKey&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;lt;private key for public-server1.example-vpn.tld&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">DNS&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">1.1.1.1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="address">Address&lt;a class="td-heading-self-link" href="#address" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>定义本地节点应该对哪个地址范围进行路由。如果是常规的客户端，则将其设置为节点本身的单个 IP（使用 CIDR 指定，例如 192.0.2.3/32）；如果是中继服务器，则将其设置为可路由的子网范围。
例如：&lt;/p>
&lt;ul>
&lt;li>常规客户端，只路由自身的流量：&lt;code>Address = 192.0.2.3/32&lt;/code>&lt;/li>
&lt;li>中继服务器，可以将流量转发到其他对等节点（peer）：&lt;code>Address = 192.0.2.1/24&lt;/code>&lt;/li>
&lt;li>也可以指定多个子网或 IPv6 子网：&lt;code>Address = 192.0.2.1/24,2001:DB8::/64&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="listenport">ListenPort&lt;a class="td-heading-self-link" href="#listenport" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>当本地节点是中继服务器时，需要通过该参数指定端口来监听传入 VPN 连接，默认端口号是 &lt;code>51820&lt;/code>。常规客户端不需要此选项。&lt;/p>
&lt;h2 id="privatekey">PrivateKey&lt;a class="td-heading-self-link" href="#privatekey" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>本地节点的私钥，所有节点（包括中继服务器）都必须设置。不可与其他服务器共用。
私钥可通过命令 &lt;code>wg genkey &amp;gt; example.key&lt;/code> 来生成。&lt;/p>
&lt;h2 id="dns">DNS&lt;a class="td-heading-self-link" href="#dns" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>通过 DHCP 向客户端宣告 DNS 服务器。客户端将会使用这里指定的 DNS 服务器来处理 VPN 子网中的 DNS 请求，但也可以在系统中覆盖此选项。例如：&lt;/p>
&lt;ul>
&lt;li>如果不配置则使用系统默认 DNS&lt;/li>
&lt;li>可以指定单个 DNS：&lt;code>DNS = 1.1.1.1&lt;/code>&lt;/li>
&lt;li>也可以指定多个 DNS：&lt;code>DNS = 1.1.1.1,8.8.8.8&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="table">Table&lt;a class="td-heading-self-link" href="#table" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>定义 VPN 子网使用的路由表，默认不需要设置。该参数有两个特殊的值需要注意：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Table = off&lt;/strong> : 禁止创建路由&lt;/li>
&lt;li>&lt;strong>Table = auto（默认值）&lt;/strong> : 将路由添加到系统默认的 table 中，并启用对默认路由的特殊处理。&lt;/li>
&lt;/ul>
&lt;p>例如：&lt;code>Table = 1234&lt;/code>&lt;/p>
&lt;h2 id="mtu">MTU&lt;a class="td-heading-self-link" href="#mtu" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>定义连接到对等节点（peer）的 &lt;code>MTU&lt;/code>（Maximum Transmission Unit，最大传输单元），默认不需要设置，一般由系统自动确定。&lt;/p>
&lt;h2 id="preup">PreUp&lt;a class="td-heading-self-link" href="#preup" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>启动 VPN 接口之前运行的命令。这个选项可以指定多次，按顺序执行。
例如：&lt;/p>
&lt;ul>
&lt;li>添加路由：&lt;code>PreUp = ip rule add ipproto tcp dport 22 table 1234&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="postup">PostUp&lt;a class="td-heading-self-link" href="#postup" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>启动 VPN 接口之后运行的命令。这个选项可以指定多次，按顺序执行。
例如：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>从文件或某个命令的输出中读取配置值：&lt;/p>
&lt;p>PostUp = wg set %i private-key /etc/wireguard/wg0.key &amp;lt;(some command here)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>添加一行日志到文件中：&lt;/p>
&lt;p>PostUp = echo &amp;ldquo;$(date +%s) WireGuard Started&amp;rdquo; &amp;raquo; /var/log/wireguard.log&lt;/p>
&lt;/li>
&lt;li>
&lt;p>调用 WebHook：&lt;/p>
&lt;p>PostUp = curl &lt;a href="https://events.example.dev/wireguard/started/?key=abcdefg">https://events.example.dev/wireguard/started/?key=abcdefg&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>添加路由：&lt;/p>
&lt;p>PostUp = ip rule add ipproto tcp dport 22 table 1234&lt;/p>
&lt;/li>
&lt;li>
&lt;p>添加 iptables 规则，启用数据包转发：&lt;/p>
&lt;p>PostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -A FORWARD -o %i -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE&lt;/p>
&lt;/li>
&lt;li>
&lt;p>强制 WireGuard 重新解析对端域名的 IP 地址：&lt;/p>
&lt;p>PostUp = resolvectl domain %i &amp;ldquo;~.&amp;rdquo;; resolvectl dns %i 192.0.2.1; resolvectl dnssec %i yes&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="predown">PreDown&lt;a class="td-heading-self-link" href="#predown" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>停止 VPN 接口之前运行的命令。这个选项可以指定多次，按顺序执行。
例如：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>添加一行日志到文件中：&lt;/p>
&lt;p>PreDown = echo &amp;ldquo;$(date +%s) WireGuard Going Down&amp;rdquo; &amp;raquo; /var/log/wireguard.log&lt;/p>
&lt;/li>
&lt;li>
&lt;p>调用 WebHook：&lt;/p>
&lt;p>PreDown = curl &lt;a href="https://events.example.dev/wireguard/stopping/?key=abcdefg">https://events.example.dev/wireguard/stopping/?key=abcdefg&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="postdown">PostDown&lt;a class="td-heading-self-link" href="#postdown" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>停止 VPN 接口之后运行的命令。这个选项可以指定多次，按顺序执行。
例如：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>添加一行日志到文件中：&lt;/p>
&lt;p>PostDown = echo &amp;ldquo;$(date +%s) WireGuard Going Down&amp;rdquo; &amp;raquo; /var/log/wireguard.log&lt;/p>
&lt;/li>
&lt;li>
&lt;p>调用 WebHook：&lt;/p>
&lt;p>PostDown = curl &lt;a href="https://events.example.dev/wireguard/stopping/?key=abcdefg">https://events.example.dev/wireguard/stopping/?key=abcdefg&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>删除 iptables 规则，关闭数据包转发：&lt;/p>
&lt;p>PostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -D FORWARD -o %i -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="peer">[Peer]&lt;a class="td-heading-self-link" href="#peer" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>定义能够为一个或多个地址路由流量的 Peer 的 VPN 设置。Peer 可以是将流量转发到其他 Peer 的中继服务器，也可以是通过公网或内网直连的客户端。&lt;/p>
&lt;p>中继服务器必须将所有的客户端定义为对等节点（peer），除了中继服务器之外，其他客户端都不能将位于 NAT 后面的节点定义为对等节点（peer），因为路由不可达。对于那些只为自己路由流量的客户端，只需将中继服务器作为对等节点（peer），以及其他需要直接访问的节点。&lt;/p>
&lt;p>举个例子，在下面的配置中，&lt;code>public-server1&lt;/code> 作为中继服务器，其他的客户端有的是直连，有的位于 NAT 后面：&lt;/p>
&lt;ul>
&lt;li>&lt;code>public-server1&lt;/code>（中继服务器）
[peer] : &lt;code>public-server2&lt;/code>, &lt;code>home-server&lt;/code>, &lt;code>laptop&lt;/code>, &lt;code>phone&lt;/code>&lt;/li>
&lt;li>&lt;code>public-server2&lt;/code>（直连客户端）
[peer] : &lt;code>public-server1&lt;/code>&lt;/li>
&lt;li>&lt;code>home-server&lt;/code>（客户端位于 NAT 后面）
[peer] : &lt;code>public-server1&lt;/code>, &lt;code>public-server2&lt;/code>&lt;/li>
&lt;li>&lt;code>laptop&lt;/code>（客户端位于 NAT 后面）
[peer] : &lt;code>public-server1&lt;/code>, &lt;code>public-server2&lt;/code>&lt;/li>
&lt;li>&lt;code>phone&lt;/code>（客户端位于 NAT 后面）
[peer] : &lt;code>public-server1&lt;/code>, &lt;code>public-server2&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>配置示例：&lt;/p>
&lt;ul>
&lt;li>对等节点（peer）是路由可达的客户端，只为自己路由流量&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ini" data-lang="ini">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">[Peer]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># Name = public-server2.example-vpn.dev&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">Endpoint&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">public-server2.example-vpn.dev:51820&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">PublicKey&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;lt;public key for public-server2.example-vpn.dev&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">AllowedIPs&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">192.0.2.2/32&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>对等节点（peer）是位于 NAT 后面的客户端，只为自己路由流量&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ini" data-lang="ini">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">[Peer]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># Name = home-server.example-vpn.dev&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">Endpoint&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">home-server.example-vpn.dev:51820&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">PublicKey&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;lt;public key for home-server.example-vpn.dev&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">AllowedIPs&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">192.0.2.3/32&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>对等节点（peer）是中继服务器，用来将流量转发到其他对等节点（peer）&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ini" data-lang="ini">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">[Peer]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># Name = public-server1.example-vpn.tld&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">Endpoint&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">public-server1.example-vpn.tld:51820&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">PublicKey&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;lt;public key for public-server1.example-vpn.tld&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 路由整个 VPN 子网的流量&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">AllowedIPs&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">192.0.2.1/24&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">PersistentKeepalive&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">25&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="endpoint">Endpoint&lt;a class="td-heading-self-link" href="#endpoint" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>指定 其他 Peer 的公网地址。如果 Peer 位于 NAT 后面或者没有稳定的公网访问地址，则忽略这个字段。通常只需要指定&lt;strong>中继服务器&lt;/strong>的 &lt;code>Endpoint&lt;/code>，当然有稳定公网 IP 的节点也可以指定。例如：&lt;/p>
&lt;ul>
&lt;li>通过 IP 指定：&lt;/li>
&lt;/ul>
&lt;p>Endpoint = 123.124.125.126:51820&lt;/p>
&lt;ul>
&lt;li>通过域名指定：&lt;/li>
&lt;/ul>
&lt;p>Endpoint = public-server1.example-vpn.tld:51820&lt;/p>
&lt;p>NAT 后的任何 Peer 都会将 AllowedIPs 指定网段的数据包，发送到 Endpoint。&lt;/p>
&lt;h2 id="allowedips">AllowedIPs&lt;a class="td-heading-self-link" href="#allowedips" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>当 Peer 向本 Peer 发送数据包时，只有源地址在该字段指定的地址范围内时，才会处理这些数据包，否则直接丢弃。同时，本 Peer 会根据该字段的地址范围，在路由表中添加路由条目。比如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>Interface&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Address&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> 10.1.0.254/24
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>Peer&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">AllowedIPs&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> 10.1.0.1/32, 172.16.0.0/24
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>则路由表会出现如下条目&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>10.1.0.0/24 dev wg0 proto kernel scope link src 10.1.0.254
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>172.16.0.0/24 dev wg0 scope link
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>也就是说，凡是发送给 AllowedIPs 字段中指定的地址范围的数据包，都会通过 WireGuard 生成的网络设备处理后发出去。&lt;/p>
&lt;p>&lt;strong>如果 Peer 是常规的客户端，则将其设置为节点本身的单个 IP；如果 Peer 是中继服务器，则将其设置为可路由的子网范围。可以使用 &lt;code>,&lt;/code> 来指定多个 IP 或子网范围。该字段也可以指定多次。&lt;/strong>&lt;/p>
&lt;p>当决定如何对一个数据包进行路由时，系统首先会选择最具体的路由，如果不匹配再选择更宽泛的路由。例如，对于一个发往 &lt;code>192.0.2.3&lt;/code> 的数据包，系统首先会寻找地址为 &lt;code>192.0.2.3/32&lt;/code> 的对等节点（peer），如果没有再寻找地址为 &lt;code>192.0.2.1/24&lt;/code> 的对等节点（peer），以此类推。&lt;/p>
&lt;p>例如：&lt;/p>
&lt;ul>
&lt;li>对等节点（peer）是常规客户端，只路由自身的流量：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ini" data-lang="ini">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">AllowedIPs&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">192.0.2.3/32&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>对等节点（peer）是中继服务器，可以将流量转发到其他对等节点（peer）：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ini" data-lang="ini">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">AllowedIPs&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">192.0.2.1/24&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>对等节点（peer）是中继服务器，可以转发所有的流量，包括外网流量和 VPN 流量，可以用来干嘛你懂得：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ini" data-lang="ini">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">AllowedIPs&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">0.0.0.0/0,::/0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>对等节点（peer）是中继服务器，可以路由其自身和其他对等节点（peer）的流量：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ini" data-lang="ini">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">AllowedIPs&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">192.0.2.3/32,192.0.2.4/32&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>对等节点（peer）是中继服务器，可以路由其自身的流量和它所在的内网的流量：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ini" data-lang="ini">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">AllowedIPs&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">192.0.2.3/32,192.168.1.1/24&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>本质上 &lt;strong>Endpoint 与 AllowedIPs 两个字段将会组成路由条目，可以这么描述：&lt;code>目的地址是 AllowedIPs 的数据包，下一跳是 Endpoint&lt;/code>。也可以不指定 Endpoint，而是仅仅将数据包送入 WireGuard 创建的网络设备中。&lt;/strong>&lt;/p>
&lt;h2 id="publickey">PublicKey&lt;a class="td-heading-self-link" href="#publickey" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Peer 的公钥，所有节点（包括中继服务器）都必须设置。可与其他对等节点（peer）共用同一个公钥。
公钥可通过命令 &lt;code>wg pubkey &amp;lt; example.key &amp;gt; example.key.pub&lt;/code> 来生成，其中 &lt;code>example.key&lt;/code> 是上面生成的私钥。
例如：&lt;code>PublicKey = somePublicKeyAbcdAbcdAbcdAbcd=&lt;/code>&lt;/p>
&lt;h2 id="persistentkeepalive">PersistentKeepalive&lt;a class="td-heading-self-link" href="#persistentkeepalive" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>如果连接是从一个位于 NAT 后面的对等节点（peer）到一个公网可达的对等节点（peer），那么 NAT 后面的对等节点（peer）必须定期发送一个出站 ping 包来检查连通性，如果 IP 有变化，就会自动更新 &lt;code>Endpoint&lt;/code>。&lt;/p>
&lt;p>例如：&lt;/p>
&lt;ul>
&lt;li>本地节点与对等节点（peer）可直连：该字段不需要指定，因为不需要连接检查。&lt;/li>
&lt;li>对等节点（peer）位于 NAT 后面：该字段不需要指定，因为维持连接是客户端（连接的发起方）的责任。&lt;/li>
&lt;li>本地节点位于 NAT 后面，对等节点（peer）公网可达：需要指定该字段 &lt;code>PersistentKeepalive = 25&lt;/code>，表示每隔 &lt;code>25&lt;/code> 秒发送一次 ping 来检查连接。&lt;/li>
&lt;/ul>
&lt;h1 id="配置示例">配置示例&lt;a class="td-heading-self-link" href="#%e9%85%8d%e7%bd%ae%e7%a4%ba%e4%be%8b" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="最简单的配置">最简单的配置&lt;a class="td-heading-self-link" href="#%e6%9c%80%e7%ae%80%e5%8d%95%e7%9a%84%e9%85%8d%e7%bd%ae" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>在带公网的 Peer 上执行如下指令生成三对公私钥、以及 3 个配置文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>wg genkey &lt;span style="color:#000;font-weight:bold">|&lt;/span> tee gw-privatekey &lt;span style="color:#000;font-weight:bold">|&lt;/span> wg pubkey &amp;gt; gw-publickey
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wg genkey &lt;span style="color:#000;font-weight:bold">|&lt;/span> tee peer1-privatekey &lt;span style="color:#000;font-weight:bold">|&lt;/span> wg pubkey &amp;gt; peer1-publickey
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wg genkey &lt;span style="color:#000;font-weight:bold">|&lt;/span> tee peer2-privatekey &lt;span style="color:#000;font-weight:bold">|&lt;/span> wg pubkey &amp;gt; peer2-publickey
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wg genkey &lt;span style="color:#000;font-weight:bold">|&lt;/span> tee peer3-privatekey &lt;span style="color:#000;font-weight:bold">|&lt;/span> wg pubkey &amp;gt; peer3-publickey
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>带公网的 Peer 配置文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>cat &amp;gt; wg0.conf &lt;span style="color:#4e9a06">&amp;lt;&amp;lt;EOF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">[Interface]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"># 除了本 Peer 以外的其他 Peer 连接本 Peer 所使用的端口，也表示本 Peer 监听的 UDP 端口号。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">ListenPort = 16000
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"># 用来表示 WireGuard 在本 Peer 上创建的网络设备的 IP，每个 Peer 都是独立的
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"># 说白了，就是本 Peer 用来与其他 Peer 通信的网络设备的 IP 地址和网段
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">Address = 10.1.0.254/24
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">PrivateKey = $(cat gw-privatekey)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"># 用来处理流量转发的 iptables 规则
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">PostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -A FORWARD -o %i -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">PostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -D FORWARD -o %i -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"># peer1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">[Peer]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">PublicKey = $(cat peer1-publickey)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">AllowedIPs = 10.1.0.1/32, 172.16.0.0/24
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"># peer2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">[Peer]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">PublicKey = $(cat peer2-publickey)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">AllowedIPs = 10.1.0.2/32, 172.19.42.0/24
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"># peer3
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">[Peer]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">PublicKey = $(cat peer3-publickey)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">AllowedIPs = 10.1.0.3/32, 192.168.31.0/24
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Peer1 配置文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>cat &amp;gt; peer1.conf &lt;span style="color:#4e9a06">&amp;lt;&amp;lt;EOF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">[Interface]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">PrivateKey = $(cat peer1-privatekey)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"># 用来表示 WireGuard 在本 Peer 上创建的网络设备的 IP，每个 Peer 都是独立的
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">Address = 10.1.0.1/24
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">[Peer]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"># gateway的公钥
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">PublicKey = $(cat gw-publickey)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">AllowedIPs = 10.1.0.0/24, 172.19.42.0/24, 192.168.31.0/24
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"># gateway 公网ip和端口
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">Endpoint = $(curl -s ip.sb):16000
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">PersistentKeepalive = 10
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Peer2 配置文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>cat &amp;gt; peer2.conf &lt;span style="color:#4e9a06">&amp;lt;&amp;lt;EOF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">[Interface]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">PrivateKey = $(cat peer2-privatekey)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">Address = 10.1.0.2/24
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">[Peer]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">PublicKey = $(cat gw-publickey)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">AllowedIPs = 10.1.0.0/24, 172.16.0.0/24, 192.168.31.0/24
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">Endpoint = $(curl -s ip.sb):16000
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">PersistentKeepalive = 10
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Peer3 配置文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>cat &amp;gt; peer3.conf &lt;span style="color:#4e9a06">&amp;lt;&amp;lt;EOF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">[Interface]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">PrivateKey = $(cat peer3-privatekey)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">Address = 10.1.0.3/24
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">[Peer]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">PublicKey = $(cat gw-publickey)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">AllowedIPs = 10.1.0.0/24, 172.19.42.0/24, 172.16.0.0/24
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">Endpoint = $(curl -s ip.sb):16000
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">PersistentKeepalive = 10
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>此时，在 Peer1 上使用 peer1.conf 文件启动 WireGuard；在 Peer2 上使用 peer2.conf 文件启动 WireGuard；在 Peer3 上使用 peer3.conf 文件启动 WireGuard。然后 Peer{1,2,3} 这三个节点就可以互通了~&lt;/p>
&lt;h1 id="unit-文件">Unit 文件&lt;a class="td-heading-self-link" href="#unit-%e6%96%87%e4%bb%b6" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>WireGuard 使用包管理器安装后，会自动创建一个由 Systemd 管理的 Unit 文件：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>root@hw-cloud-xngy-jump-server-linux-1 ~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># systemctl cat wg-quick@.service&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># /lib/systemd/system/wg-quick@.service&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>Unit&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Description&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>WireGuard via wg-quick&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>8&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> %I
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">After&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>network-online.target nss-lookup.target
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Wants&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>network-online.target nss-lookup.target
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">PartOf&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>wg-quick.target
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Documentation&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>man:wg-quick&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>8&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Documentation&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>man:wg&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>8&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Documentation&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>https://www.wireguard.com/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Documentation&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>https://www.wireguard.com/quickstart/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Documentation&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>https://git.zx2c4.com/wireguard-tools/about/src/man/wg-quick.8
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Documentation&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>https://git.zx2c4.com/wireguard-tools/about/src/man/wg.8
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>Service&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Type&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>oneshot
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">RemainAfterExit&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>yes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">ExecStart&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>/usr/bin/wg-quick up %i
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">ExecStop&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>/usr/bin/wg-quick down %i
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Environment&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">WG_ENDPOINT_RESOLUTION_RETRIES&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>infinity
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>Install&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">WantedBy&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>multi-user.target
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们可以通过 Unit 来配置 WireGuard 的开机自启，将 WireGuard 的维护工作交给 Systemd。&lt;/p>
&lt;h1 id="分类">分类&lt;a class="td-heading-self-link" href="#%e5%88%86%e7%b1%bb" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>#网络 #隧道协议 #Wireguard&lt;/p></description></item><item><title>Docs: 流量伪装</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/Tunneling-Protocol/WireGuard/%E6%B5%81%E9%87%8F%E4%BC%AA%E8%A3%85/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/Tunneling-Protocol/WireGuard/%E6%B5%81%E9%87%8F%E4%BC%AA%E8%A3%85/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;/blockquote>
&lt;p>WireGuard 在国内网络环境下会遇到一个致命的问题：&lt;strong>UDP 封锁/限速&lt;/strong>。虽然通过 WireGuard 可以在隧道内传输任何基于 IP 的协议（TCP、UDP、ICMP、SCTP、IPIP、GRE 等），但 WireGuard 隧道本身是通过 UDP 协议进行通信的，而国内运营商根本没有能力和精力根据 TCP 和 UDP 的不同去深度定制不同的 QoS 策略，几乎全部采取一刀切的手段：对 UDP 进行限速甚至封锁。&lt;/p>
&lt;p>虽然运营商对 UDP 不友好，但却无力深度检测 TCP 连接的真实性。既然对 TCP 连接睁一只眼闭一只眼，那我将 UDP 连接伪装成 TCP 连接不就蒙混过关了。目前支持将 UDP 流量伪装成 TCP 流量的主流工具是 &lt;a href="https://github.com/wangyu-/udp2raw-tunnel">udp2raw&lt;/a>，另一款比它更强大的新工具：&lt;a href="https://github.com/dndx/phantun">Phantun&lt;/a>。&lt;/p>
&lt;h1 id="udp2raw">udp2raw&lt;a class="td-heading-self-link" href="#udp2raw" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/wangyu-/udp2raw">GitHub 项目，wangyu-/udp2raw&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>使用原始套接字将 UDP 流量转换为加密的 UDP/FakeTCP/ICMP 流量的隧道，帮助您绕过 UDP 防火墙（或不稳定的 UDP 环境）&lt;/p>
&lt;h2 id="部署">部署&lt;a class="td-heading-self-link" href="#%e9%83%a8%e7%bd%b2" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>这里我使用 docker 部署的，实体进程和相关文档见 &lt;a href="https://github.com/wangyu-/udp2raw-tunnel/blob/master/doc/README.zh-cn.md#%E8%BF%90%E8%A1%8C">udp2raw 运行&lt;/a>&lt;/p>
&lt;p>Linux server 端 :&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 监听86的tcp端口，把86端口收到的伪装成tcp的udp报文转发到 127.0.0.1:16000 上&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker run &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> -d --name udp2raw &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> --restart always &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> --net host &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> --cap-add NET_RAW &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> --cap-add NET_ADMIN &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> -v /run/xtables.lock:/run/xtables.lock &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> zhangguanzhang/udp2raw &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> -s -l 0.0.0.0:86 &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> -r 127.0.0.1:16000 &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> -k passwd123 &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> --raw-mode faketcp &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> --cipher-mode xor -a
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Linux 或者软路由系统 client 端，软路径 openwrt 的话 iptables 的锁文件是位于 /var/run/xtables.lock，常规系统是 `/run/xtables.lock :&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 监听16000的 udp 端口，把16000端口收到的udp报文伪装成tcp发到 &amp;lt;public_ip&amp;gt;:86 上&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker run --net host &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> -d --name udp2raw &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> --restart always &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> --cap-add NET_RAW &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> --cap-add NET_ADMIN &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> -v /var/run/xtables.lock:/run/xtables.lock &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> zhangguanzhang/udp2raw &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> -c -l 0.0.0.0:16000 &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> -r &amp;lt;public_ip&amp;gt;:86 &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> -k passwd123 &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> --raw-mode faketcp &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> --cipher-mode xor -a
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://github.com/wangyu-/udp2raw-multiplatform">windows 客户端下载&lt;/a>，运行命令参考:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>./udp2raw_mp.exe -c -l 0.0.0.0:16000 -r &amp;lt;public_ip&amp;gt;:86 -k passwd123 --raw-mode faketcp --cipher-mode xor
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>所有 client 端的 [peer] 部分里之前连云主机的 ip 都写成 127.0.0.1:16000，这样 wg 客户端是先向本地的 udp2raw 客户端发 udp 报文，然后报文被封装成 tcp 发往云主机上的 udp2raw server，再到 wg server 上。&lt;/p>
&lt;p>&lt;strong>客户端和云主机上&lt;/strong> 的 wg 的 mtu 设置成 1280(网上有写 1200 的，但是 windows 的 wg 客户端无法启动，邮件询问作者说最小 1280 才能启动)。例如我路由器配置&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>Interface&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">MTU&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1280&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>Peer&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Endpoint&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> 127.0.0.1:16000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">PersistentKeepalive&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>windows 的 wg 目前 Endpoint 必须写本机的 ip（ipconfig 命令查看），不能写 127.0.0.1，否则无法连 peer（日志会一直刷 Failed to send handshake initiation write udp4 0.0.0.0:xxx-&amp;gt;127.0.0.1:16000: wsasendto: The requested address is not valid in its context），这个 bug 已经反馈给作者了。
udp2raw 的 client 连上 server 后，双方都会打印下面日志:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># server&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>changed state to server_ready
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># client&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>changed state from to client_handshake2 to client_ready
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="qos">qos&lt;a class="td-heading-self-link" href="#qos" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>不同运营商可能不一样，比如你 A 和 B 同时 udp2raw 你云主机，A 可以 B 不可以，可以考虑换下 &amp;ndash;raw-mode 和 &amp;ndash;seq-mode ，有的可能 faketcp，有的可能 udp ，有的可能 icmp&lt;/p>
&lt;h2 id="一个注意点">一个注意点&lt;a class="td-heading-self-link" href="#%e4%b8%80%e4%b8%aa%e6%b3%a8%e6%84%8f%e7%82%b9" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>openwrt 上在接口 添加 wireguard 接口，然后 peer 那里的 ip 写 127.0.0.1(也就是 openwrt 上的 udp2raw 的 ip)可能不行，换成 openwrt 的 局域网 ip 试下&lt;/p>
&lt;h1 id="phantun">Phantun&lt;a class="td-heading-self-link" href="#phantun" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/dndx/phantun">GitHub 项目，dndx/phantun&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/lgOqd7cMy8hFqST9uSih6w">公众号-米开朗基杨，突破运营商 QoS 封锁，WireGuard 真有“一套”！&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Phantun 整个项目&lt;strong>完全使用 Rust 实现&lt;/strong>，性能吊打 udp2raw。它的初衷和 udp2raw 类似，都是为了实现一种简单的用户态 TCP 状态机来对 UDP 流量做伪装。主要的目的是希望能让 UDP 流量看起来像是 TCP，又不希望受到 TCP retransmission 或者 congestion control 的影响。&lt;/p>
&lt;p>需要申明的是，&lt;strong>Phantun 的目标不是为了替代 udp2raw&lt;/strong>，从一开始 Phantun 就希望设计足够的简单高效，所以 udp2raw 支持的 &lt;strong>ICMP 隧道，加密，防止重放&lt;/strong>等等功能 Phantun 都选择不实现。&lt;/p>
&lt;p>Phantun 假设 UDP 协议本身已经解决了这些问题，所以整个转发过程就是简单的明文换头加上一些必要的 TCP   状态控制信息。对于我日常使用的 WireGuard 来说，Phantun 这种设计是足够安全的，因为 WireGuard   的协议已经更好的实现了这些安全功能。&lt;/p>
&lt;p>Phantun 使用 TUN 接口来收发 3 层数据包，udp2raw 使用 Raw Socket + BFP 过滤器。个人感觉基于 TUN 的实现要稍微的优雅一点，而且跨平台移植也要更容易。&lt;/p>
&lt;p>Phantun 的 TCP 连接是按需创建的，只启动 Client 不会主动去连接服务器，需要第一个数据包到达了后才会按需创建。每个 UDP   流都有自己独立的 TCP 连接。这一点跟 udp2raw 很不一样，udp2raw 所有的 UDP 连接共用一个 TCP 连接。这样做的坏处就是 udp2raw 需要额外的头部信息来区分连接，更加增加了头部的开销。跟纯 UDP 比较，Phantun 每个数据包的额外头部开销是 12  byte，udp2raw 根据我的测试达到了 44 bytes 。&lt;/p>
&lt;h2 id="phantun-工作原理">Phantun 工作原理&lt;a class="td-heading-self-link" href="#phantun-%e5%b7%a5%e4%bd%9c%e5%8e%9f%e7%90%86" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/wireguard/1669018288492-b85eb3fd-aeea-49b6-b81a-5ccdf8976c28.jpeg" alt="">&lt;/p>
&lt;p>Phantun 分为服务端和客户端，服务端会监听一个端口，比如 4567（通过 &lt;code>--local&lt;/code> 参数指定），并将 UDP 数据包转发到 UDP 服务（这里指的就是服务端 WireGuard 的监听端口和地址，通过 &lt;code>--remote&lt;/code> 参数指定）。&lt;/p>
&lt;p>客户端也会监听一个端口，比如 &lt;code>127.0.0.1:4567&lt;/code>（通过 &lt;code>--local&lt;/code> 参数指定），并且通过 &lt;code>--remote&lt;/code> 参数与服务端（比如 &lt;code>10.0.0.1:4567&lt;/code>）建立连接。&lt;/p>
&lt;p>客户端与服务端都会创建一个 TUN 网卡，客户端 TUN 网卡默认分配的 IPv4/IPv6 地址分别是 &lt;code>192.168.200.2&lt;/code> 和 &lt;code>fcc8::2&lt;/code>，服务端 TUN 网卡默认分配的 IPv4/IPv6 地址分别是 &lt;code>192.168.201.2&lt;/code> 和 &lt;code>fcc9::2&lt;/code>。&lt;/p>
&lt;p>客户端与服务端都需要开启 IP forwarding，并且需要创建相应的 NAT 规则。客户端在流量离开物理网卡之前，需要对 IP &lt;code>192.168.200.2&lt;/code> 进行 SNAT；服务端在流量进入网卡之前，需要将 IP DNAT 为 &lt;code>192.168.201.2&lt;/code>。&lt;/p>
&lt;h2 id="phantun-配置步骤">Phantun 配置步骤&lt;a class="td-heading-self-link" href="#phantun-%e9%85%8d%e7%bd%ae%e6%ad%a5%e9%aa%a4" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>接下来我会通过一个示例来演示如何使用 Phantun 将 WireGuard 的 UDP 流量伪装成 TCP。我们需要在服务端和客户端分别安装 phantun，可以到 release 页面[3]下载，推荐下载静态编译版本 &lt;code>phantun_x86_64-unknown-linux-musl.zip&lt;/code>。&lt;/p>
&lt;h3 id="服务端">服务端&lt;a class="td-heading-self-link" href="#%e6%9c%8d%e5%8a%a1%e7%ab%af" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>假设服务端的公网 IP 地址是 &lt;code>121.36.134.95&lt;/code>，WireGuard 监听端口是 &lt;code>51822&lt;/code>。首先修改配置文件 &lt;code>/etc/wireguard/wg0.conf&lt;/code>，在 &lt;code>[Interface]&lt;/code> 中添加以下配置：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-properties" data-lang="properties">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">MTU&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">1300&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">PreUp&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">iptables -t nat -A PREROUTING -p tcp -i eth0 --dport 4567 -j DNAT --to-destination 192.168.201.2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">PreUp&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">RUST_LOG=info phantun_server --local 4567 --remote 127.0.0.1:51822 &amp;amp;&amp;gt; /var/log/phantun_server.log &amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">PostDown&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">iptables -t nat -D PREROUTING -p tcp -i eth0 --dport 4567 -j DNAT --to-destination 192.168.201.2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">PostDown&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">killall phantun_server || true&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>你需要将 eth0 替换为你服务端的物理网卡名。MTU 值先不管，后面再告诉大家调试方法。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-properties" data-lang="properties">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">PreUp&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">iptables -t nat -A PREROUTING -p tcp -i eth0 --dport 4567 -j DNAT --to-destination 192.168.201.2&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这条 iptables 规则表示将 &lt;code>4567&lt;/code> 端口的入站流量 DNAT 为 TUN 网卡的 IP 地址。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-properties" data-lang="properties">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">PreUp&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">RUST_LOG=info phantun_server --local 4567 --remote 127.0.0.1:51822 &amp;amp;&amp;gt; /var/log/phantun_server.log &amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里会启动 phantun_server，监听在 &lt;code>4567&lt;/code> 端口，并将 UDP 数据包转发到 WireGuard。
服务端完整的 WireGuard 配置：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-properties" data-lang="properties">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># local settings for Endpoint B&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">[Interface]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">PrivateKey&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">QH1BJzIZcGo89ZTykxls4i2DKgvByUkHIBy3BES2gX8=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">Address&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">10.0.0.2/32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">ListenPort&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">51822&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">MTU&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">1300&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">PreUp&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">iptables -t nat -A PREROUTING -p tcp -i eth0 --dport 4567 -j DNAT --to-destination 192.168.201.2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">PreUp&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">RUST_LOG=info phantun_server --local 4567 --remote 127.0.0.1:51822 &amp;amp;&amp;gt; /var/log/phantun_server.log &amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">PostDown&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">iptables -t nat -D PREROUTING -p tcp -i eth0 --dport 4567 -j DNAT --to-destination 192.168.201.2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">PostDown&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">killall phantun_server || true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># remote settings for Endpoint A&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">[Peer]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">PublicKey&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">wXtD/VrRo92JHc66q4Ypmnd4JpMk7b1Sb0AcT+pJfwY=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">AllowedIPs&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">10.0.0.1/32&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>最后重启 WireGuard 即可：&lt;code>systemctl restart wg-quick@wg0&lt;/code>&lt;/p>
&lt;h3 id="客户端">客户端&lt;a class="td-heading-self-link" href="#%e5%ae%a2%e6%88%b7%e7%ab%af" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>假设客户端的 WireGuard 监听端口是 &lt;code>51821&lt;/code>。首先修改配置文件 &lt;code>/etc/wireguard/wg0.conf&lt;/code>，在 &lt;code>[Interface]&lt;/code> 中添加以下配置：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-properties" data-lang="properties">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">MTU&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">1300&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">PreUp&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">iptables -t nat -A POSTROUTING -o eth0 -s 192.168.200.2 -j MASQUERADE&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">PreUp&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">RUST_LOG=info phantun_client --local 127.0.0.1:4567 --remote 121.36.134.95:4567 &amp;amp;&amp;gt; /var/log/phantun_client.log &amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">PostDown&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">iptables -t nat -D POSTROUTING -o eth0 -s 192.168.200.2 -j MASQUERADE&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">PostDown&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">killall phantun_client || true&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>你需要将 eth0 替换为你服务端的物理网卡名。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-properties" data-lang="properties">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">PreUp&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">iptables -t nat -A POSTROUTING -o eth0 -s 192.168.200.2 -j MASQUERADE&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这条 iptables 规则表示对来自 &lt;code>192.168.200.2&lt;/code>（TUN 网卡） 的出站流量进行 MASQUERADE。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-properties" data-lang="properties">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">PreUp&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">RUST_LOG=info phantun_client --local 127.0.0.1:4567 --remote 121.36.134.95:4567 &amp;amp;&amp;gt; /var/log/phantun_client.log &amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里会启动 phantun_client，监听在 &lt;code>4567&lt;/code> 端口，并与服务端建立连接，将伪装的 TCP 数据包传送给服务端。
除此之外还需要修改 WireGuard peer 的 Endpoint，将其修改为 127.0.0.1:4567。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-properties" data-lang="properties">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">Endpoint&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">127.0.0.1:4567&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>客户端完整的 WireGuard 配置：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-properties" data-lang="properties">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># local settings for Endpoint A&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">[Interface]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">PrivateKey&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">0Pyz3cIg2gRt+KxZ0Vm1PvSIU+0FGufPIzv92jTyGWk=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">Address&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">10.0.0.1/32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">ListenPort&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">51821&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">MTU&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">1300&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">PreUp&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">iptables -t nat -A POSTROUTING -o eth0 -s 192.168.200.2 -j MASQUERADE&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">PreUp&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">RUST_LOG=info phantun_client --local 127.0.0.1:4567 --remote 121.36.134.95:4567 &amp;amp;&amp;gt; /var/log/phantun_client.log &amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">PostDown&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">iptables -t nat -D POSTROUTING -o eth0 -s 192.168.200.2 -j MASQUERADE&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">PostDown&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">killall phantun_client || true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># remote settings for Endpoint B&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">[Peer]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">PublicKey&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">m40NDb5Cqtb78b1DVwY1+kxbG2yEcRhxlrLm/DlPpz8=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">Endpoint&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">127.0.0.1:4567&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">AllowedIPs&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">10.0.0.2/32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">PersistentKeepalive&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">25&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>最后重启 WireGuard 即可：&lt;code>systemctl restart wg-quick@wg0&lt;/code>&lt;/p>
&lt;p>查看 phantun_client 的日志：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ tail -f /var/log/phantun_client.log
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> INFO client &amp;gt; Remote address is: 121.36.134.95:4567
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> INFO client &amp;gt; &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> cores available
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> INFO client &amp;gt; Created TUN device tun0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> INFO client &amp;gt; New UDP client from 127.0.0.1:51821
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> INFO fake_tcp &amp;gt; Sent SYN to server
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> INFO fake_tcp &amp;gt; Connection to 121.36.134.95:4567 established
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>查看 wg0 接口：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ wg show wg0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>interface: wg0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> public key: wXtD/VrRo92JHc66q4Ypmnd4JpMk7b1Sb0AcT+pJfwY&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> private key: &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>hidden&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> listening port: &lt;span style="color:#0000cf;font-weight:bold">51821&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>peer: m40NDb5Cqtb78b1DVwY1+kxbG2yEcRhxlrLm/DlPpz8&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> endpoint: 127.0.0.1:4567
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> allowed ips: 10.0.0.2/32
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> latest handshake: &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> minute, &lt;span style="color:#0000cf;font-weight:bold">57&lt;/span> seconds ago
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> transfer: &lt;span style="color:#0000cf;font-weight:bold">184&lt;/span> B received, &lt;span style="color:#0000cf;font-weight:bold">648&lt;/span> B sent
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> persistent keepalive: every &lt;span style="color:#0000cf;font-weight:bold">25&lt;/span> seconds
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>测试连通性：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ ping 10.0.0.2 -c &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PING 10.0.0.2 &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>10.0.0.2&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> 56&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>84&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> bytes of data.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#0000cf;font-weight:bold">64&lt;/span> bytes from 10.0.0.2: &lt;span style="color:#000">icmp_seq&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#000">ttl&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">64&lt;/span> &lt;span style="color:#000">time&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>13.7 ms
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#0000cf;font-weight:bold">64&lt;/span> bytes from 10.0.0.2: &lt;span style="color:#000">icmp_seq&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> &lt;span style="color:#000">ttl&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">64&lt;/span> &lt;span style="color:#000">time&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>14.4 ms
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#0000cf;font-weight:bold">64&lt;/span> bytes from 10.0.0.2: &lt;span style="color:#000">icmp_seq&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> &lt;span style="color:#000">ttl&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">64&lt;/span> &lt;span style="color:#000">time&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>15.0 ms
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--- 10.0.0.2 ping statistics ---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> packets transmitted, &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> received, 0% packet loss, &lt;span style="color:#204a87">time&lt;/span> 2005ms
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rtt min/avg/max/mdev &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> 13.718/14.373/15.047/0.542 ms
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="客户端多服务端">客户端（多服务端）&lt;a class="td-heading-self-link" href="#%e5%ae%a2%e6%88%b7%e7%ab%af%e5%a4%9a%e6%9c%8d%e5%8a%a1%e7%ab%af" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>如果客户端想和多个服务端建立连接，则新增的服务端配置如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-properties" data-lang="properties">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">PreUp&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">RUST_LOG=info phantun_client --local 127.0.0.1:4568 --remote xxxx:4567 --tun-local=192.168.202.1 --tun-peer=192.168.202.2 &amp;amp;&amp;gt; /var/log/phantun_client.log &amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">PostDown&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">iptables -t nat -D POSTROUTING -o eth0 -s 192.168.202.2 -j MASQUERADE&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>本地监听端口需要选择一个与之前不同的端口，同理，TUN 网卡的地址也需要修改。最终的配置如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-properties" data-lang="properties">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># local settings for Endpoint A&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">[Interface]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">PrivateKey&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">0Pyz3cIg2gRt+KxZ0Vm1PvSIU+0FGufPIzv92jTyGWk=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">Address&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">10.0.0.1/32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">ListenPort&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">51821&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">MTU&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">1300&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">PreUp&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">iptables -t nat -A POSTROUTING -o eth0 -s 192.168.200.2 -j MASQUERADE&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">PreUp&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">RUST_LOG=info phantun_client --local 127.0.0.1:4567 --remote 121.36.134.95:4567 &amp;amp;&amp;gt; /var/log/phantun_client.log &amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">PreUp&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">RUST_LOG=info phantun_client --local 127.0.0.1:4568 --remote xxxx:4567 --tun-local=192.168.202.1 --tun-peer=192.168.202.2 &amp;amp;&amp;gt; /var/log/phantun_client.log &amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">PostDown&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">iptables -t nat -D POSTROUTING -o eth0 -s 192.168.200.2 -j MASQUERADE&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">PostDown&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">iptables -t nat -D POSTROUTING -o eth0 -s 192.168.202.2 -j MASQUERADE&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">PostDown&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">killall phantun_client || true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># remote settings for Endpoint B&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">[Peer]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">PublicKey&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">m40NDb5Cqtb78b1DVwY1+kxbG2yEcRhxlrLm/DlPpz8=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">Endpoint&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">127.0.0.1:4567&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">AllowedIPs&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">10.0.0.2/32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">PersistentKeepalive&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">25&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="mtu-调优">MTU 调优&lt;a class="td-heading-self-link" href="#mtu-%e8%b0%83%e4%bc%98" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>如果你使用 ping 或者 dig 等工具（小数据包）测试 WireGuard 隧道能够正常工作，但浏览器或者远程桌面（大数据包）却无法正常访问，很有可能是 MTU 的问题，你需要将 MTU 的值调小一点。&lt;/p>
&lt;p>Phantun 官方建议将 MTU 的值设为 &lt;code>1428&lt;/code>（假设物理网卡的 MTU 是 1500），但经我测试是有问题的。建议直接将 MTU 设置为最低值 &lt;code>1280&lt;/code>，然后渐渐增加，直到无法正常工作为止，此时你的 MTU 就是最佳值。&lt;/p></description></item><item><title>Docs: 应用示例</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/Tunneling-Protocol/WireGuard/%E5%BA%94%E7%94%A8%E7%A4%BA%E4%BE%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/Tunneling-Protocol/WireGuard/%E5%BA%94%E7%94%A8%E7%A4%BA%E4%BE%8B/</guid><description/></item></channel></rss>