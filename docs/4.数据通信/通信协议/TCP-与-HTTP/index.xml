<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – TCP 与 HTTP</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/TCP-%E4%B8%8E-HTTP/</link><description>Recent content in TCP 与 HTTP on 断念梦</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/TCP-%E4%B8%8E-HTTP/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: TCP 与 HTTP</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/TCP-%E4%B8%8E-HTTP/TCP-%E4%B8%8E-HTTP/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/TCP-%E4%B8%8E-HTTP/TCP-%E4%B8%8E-HTTP/</guid><description>
&lt;h1 id="tcp-与-http-的-keep-alive">TCP 与 HTTP 的 Keep-Alive&lt;/h1>
&lt;p>原文链接：&lt;a href="https://mp.weixin.qq.com/s/25atTs4b-vORIx525ur_aw">https://mp.weixin.qq.com/s/25atTs4b-vORIx525ur_aw&lt;/a>&lt;/p>
&lt;p>大致问题是，&lt;strong>TCP 的 Keepalive 和 HTTP 的 Keep-Alive 是一个东西吗？&lt;/strong>
这是个好问题，应该有不少人都会搞混，因为这两个东西看上去太像了，很容易误以为是同一个东西。
事实上，&lt;strong>这两个完全是两样不同东西&lt;/strong>，实现的层面也不同：&lt;/p>
&lt;ul>
&lt;li>HTTP 的 Keep-Alive，是由&lt;strong>应用层（用户态）&lt;/strong> 实现的，称为 HTTP 长连接；&lt;/li>
&lt;li>TCP 的 Keepalive，是由 &lt;strong>TCP 层（内核态）&lt;/strong> 实现的，称为 TCP 保活机制；&lt;/li>
&lt;/ul>
&lt;p>接下来，分别说说它们。&lt;/p>
&lt;h3 id="http-的-keep-alive">HTTP 的 Keep-Alive&lt;/h3>
&lt;p>HTTP 协议采用的是「请求-应答」的模式，也就是客户端发起了请求，服务端才会返回响应，一来一回这样子。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/aqay4l/1625643072489-5556e712-c824-499b-8a85-9df5b8de00a2.png" alt="">请求-应答
由于 HTTP 是基于 TCP 传输协议实现的，客户端与服务端要进行 HTTP 通信前，需要先建立 TCP 连接，然后客户端发送 HTTP   请求，服务端收到后就返回响应，至此「请求-应答」的模式就完成了，随后就会释放 TCP 连接。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/aqay4l/1625643072516-f1e8278b-3248-4e10-b9a0-f1858df8238d.png" alt="">一个 HTTP 请求
如果每次请求都要经历这样的过程：建立 TCP -&amp;gt; 请求资源 -&amp;gt; 响应资源 -&amp;gt; 释放连接，那么此方式就是 &lt;strong>HTTP 短连接&lt;/strong>，如下图：
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/aqay4l/1625643072462-fff13ee3-a399-4f41-bfe9-443e85f007b1.png" alt="">HTTP 短连接
这样实在太累人了，一次连接只能请求一次资源。
能不能在第一个 HTTP 请求完后，先不断开 TCP 连接，让后续的 HTTP 请求继续使用此连接？
当然可以，HTTP 的 Keep-Alive 就是实现了这个功能，可以使用同一个 TCP 连接来发送和接收多个 HTTP 请求/应答，避免了连接建立和释放的开销，这个方法称为 &lt;strong>HTTP 长连接&lt;/strong>。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/aqay4l/1625643072505-c0e7c75c-925f-4b8a-a791-1b44484decf0.png" alt="">HTTP 长连接
HTTP 长连接的特点是，只要任意一端没有明确提出断开连接，则保持 TCP 连接状态。
怎么才能使用 HTTP 的 Keep-Alive 功能？
在 HTTP 1.0 中默认是关闭的，如果浏览器要开启 Keep-Alive，它必须在请求的包头中添加：&lt;/p>
&lt;pre>&lt;code>Connection: Keep-Alive
&lt;/code>&lt;/pre>
&lt;p>然后当服务器收到请求，作出回应的时候，它也添加一个头在响应中：&lt;/p>
&lt;pre>&lt;code>Connection: Keep-Alive
&lt;/code>&lt;/pre>
&lt;p>这样做，连接就不会中断，而是保持连接。当客户端发送另一个请求时，它会使用同一个连接。这一直继续到客户端或服务器端提出断开连接。
&lt;strong>从 HTTP 1.1 开始， 就默认是开启了 Keep-Alive&lt;/strong>，如果要关闭 Keep-Alive，需要在 HTTP 请求的包头里添加：&lt;/p>
&lt;pre>&lt;code>Connection:close
&lt;/code>&lt;/pre>
&lt;p>现在大多数浏览器都默认是使用 HTTP/1.1，所以 Keep-Alive 都是默认打开的。一旦客户端和服务端达成协议，那么长连接就建立好了。
HTTP 长连接不仅仅减少了 TCP 连接资源的开销，而且这给 &lt;strong>HTTP 流水线&lt;/strong>技术提供了可实现的基础。
所谓的 HTTP 流水线，是&lt;strong>客户端可以先一次性发送多个请求，而在发送过程中不需先等待服务器的回应&lt;/strong>，可以减少整体的响应时间。
举例来说，客户端需要请求两个资源。以前的做法是，在同一个 TCP 连接里面，先发送 A 请求，然后等待服务器做出回应，收到后再发出 B 请求。HTTP 流水线机制则允许客户端同时发出 A 请求和 B 请求。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/aqay4l/1625643072531-ffeb1c68-b44d-4176-888a-81045ac28a0a.webp" alt="">
右边为 HTTP 流水线机制
但是&lt;strong>服务器还是按照顺序响应&lt;/strong>，先回应 A 请求，完成后再回应 B 请求。
而且要等服务器响应完客户端第一批发送的请求后，客户端才能发出下一批的请求，也就说如果服务器响应的过程发生了阻塞，那么客户端就无法发出下一批的请求，此时就造成了「队头阻塞」的问题。
可能有的同学会问，如果使用了 HTTP 长连接，如果客户端完成一个 HTTP 请求后，就不再发起新的请求，此时这个 TCP 连接一直占用着不是挺浪费资源的吗？
对没错，所以为了避免资源浪费的情况，web 服务软件一般都会提供 &lt;code>keepalive_timeout&lt;/code> 参数，用来指定 HTTP 长连接的超时时间。
比如设置了 HTTP 长连接的超时时间是 60 秒，web 服务软件就会&lt;strong>启动一个定时器&lt;/strong>，如果客户端在完后一个 HTTP 请求后，在 60 秒内都没有再发起新的请求，&lt;strong>定时器的时间一到，就会触发回调函数来释放该连接。&lt;/strong>
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/aqay4l/1625643072526-84366250-09a5-4292-b738-0fc547c395cd.png" alt="">HTTP 长连接超时&lt;/p>
&lt;h3 id="tcp-的-keepalive">TCP 的 Keepalive&lt;/h3>
&lt;p>TCP 的 Keepalive 这东西其实就是 &lt;strong>TCP 的保活机制&lt;/strong>，它的工作原理我之前的文章写过，这里就直接贴下以前的内容。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/aqay4l/1625643072529-348d0a2d-5281-4f91-8d76-88d983c3da06.png" alt="">
如果两端的 TCP 连接一直没有数据交互，达到了触发 TCP 保活机制的条件，那么内核里的 TCP 协议栈就会发送探测报文。&lt;/p>
&lt;ul>
&lt;li>如果对端程序是正常工作的。当 TCP 保活的探测报文发送给对端, 对端会正常响应，这样 &lt;strong>TCP 保活时间会被重置&lt;/strong>，等待下一个 TCP 保活时间的到来。&lt;/li>
&lt;li>如果对端主机崩溃，或对端由于其他原因导致报文不可达。当 TCP 保活的探测报文发送给对端后，石沉大海，没有响应，连续几次，达到保活探测次数后，&lt;strong>TCP 会报告该 TCP 连接已经死亡&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;p>所以，TCP 保活机制可以在双方没有数据交互的情况，通过探测报文，来确定对方的 TCP 连接是否存活，这个工作是在内核完成的。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/aqay4l/1625643072539-7c6779d8-119f-43d0-9307-990c29756ac7.png" alt="">TCP 保活机制
注意，应用程序若想使用 TCP 保活机制需要通过 socket 接口设置 &lt;code>SO_KEEPALIVE&lt;/code> 选项才能够生效，如果没有设置，那么就无法使用 TCP 保活机制。&lt;/p>
&lt;h3 id="总结">总结&lt;/h3>
&lt;p>HTTP 的 Keep-Alive 也叫 HTTP 长连接，该功能是由「应用程序」实现的，可以使得用同一个 TCP 连接来发送和接收多个 HTTP 请求/应答，减少了 HTTP 短连接带来的多次 TCP 连接建立和释放的开销。
TCP 的 Keepalive 也叫 TCP 保活机制，该功能是由「内核」实现的，当客户端和服务端长达一定时间没有进行数据交互时，内核为了确保该连接是否还有效，就会发送探测报文，来检测对方是否还在线，然后来决定是否要关闭该连接。&lt;/p></description></item><item><title>Docs: 一个 TCP 连接上面能发多少个 HTTP 请求</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/TCP-%E4%B8%8E-HTTP/%E4%B8%80%E4%B8%AA-TCP-%E8%BF%9E%E6%8E%A5%E4%B8%8A%E9%9D%A2%E8%83%BD%E5%8F%91%E5%A4%9A%E5%B0%91%E4%B8%AA-HTTP-%E8%AF%B7%E6%B1%82/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/TCP-%E4%B8%8E-HTTP/%E4%B8%80%E4%B8%AA-TCP-%E8%BF%9E%E6%8E%A5%E4%B8%8A%E9%9D%A2%E8%83%BD%E5%8F%91%E5%A4%9A%E5%B0%91%E4%B8%AA-HTTP-%E8%AF%B7%E6%B1%82/</guid><description>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/61423830">你猜一个 TCP 连接上面能发多少个 HTTP 请求 - 知乎&lt;/a>&lt;/p>
&lt;p>一道经典的面试题是从 URL 在浏览器被被输入到页面展现的过程中发生了什么，大多数回答都是说请求响应之后 DOM 怎么被构建，被绘制出来。但是你有没有想过，收到的 HTML 如果包含几十个图片标签，这些图片是以什么方式、什么顺序、建立了多少连接、使用什么协议被下载下来的呢？&lt;/p>
&lt;p>要搞懂这个问题，我们需要先解决下面五个问题：&lt;/p>
&lt;ol>
&lt;li>现代浏览器在与服务器建立了一个 TCP 连接后是否会在一个 HTTP 请求完成后断开？什么情况下会断开？&lt;/li>
&lt;li>一个 TCP 连接可以对应几个 HTTP 请求？&lt;/li>
&lt;li>一个 TCP 连接中 HTTP 请求发送可以一起发送么（比如一起发三个请求，再三个响应一起接收）？&lt;/li>
&lt;li>为什么有的时候刷新页面不需要重新建立 SSL 连接？&lt;/li>
&lt;li>浏览器对同一 Host 建立 TCP 连接到数量有没有限制？&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>先来谈谈第一个问题：现代浏览器在与服务器建立了一个 TCP 连接后是否会在一个 HTTP 请求完成后断开？什么情况下会断开？&lt;/strong>&lt;/p>
&lt;p>在 HTTP/1.0 中，一个服务器在发送完一个 HTTP 响应后，会断开 TCP 链接。但是这样每次请求都会重新建立和断开 TCP 连接，代价过大。所以虽然标准中没有设定，某些服务器对 Connection: keep-alive 的 Header 进行了支持。意思是说，完成这个 HTTP 请求之后，不要断开 HTTP 请求使用的 TCP 连接。这样的好处是连接可以被重新使用，之后发送 HTTP 请求的时候不需要重新建立 TCP 连接，以及如果维持连接，那么 SSL 的开销也可以避免，两张图片是我短时间内两次访问 &lt;a href="https://link.zhihu.com/?target=https%3A//www.github.com">https://www.github.com&lt;/a> 的时间统计：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/6cbfab08-4d4d-43ef-a7c1-84e9fba6d0bd/v2-db695f956c18bbedb5e4553f16aaced7_b.jpg" alt="">&lt;/p>
&lt;p>头一次访问，有初始化连接和 SSL 开销&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/6cbfab08-4d4d-43ef-a7c1-84e9fba6d0bd/v2-2feab2309c3fac421fea2cf4492fb739_b.jpg" alt="">&lt;/p>
&lt;p>初始化连接和 SSL 开销消失了，说明使用的是同一个 TCP 连接&lt;/p>
&lt;p>持久连接：既然维持 TCP 连接好处这么多，HTTP/1.1 就把 Connection 头写进标准，并且默认开启持久连接，除非请求中写明 Connection: close，那么浏览器和服务器之间是会维持一段时间的 TCP 连接，不会一个请求结束就断掉。&lt;/p>
&lt;p>所以第一个问题的答案是：默认情况下建立 TCP 连接不会断开，只有在请求报头中声明 Connection: close 才会在请求完成后关闭连接。（详细文档见下面的链接）&lt;/p>
&lt;p>&lt;strong>第二个问题：一个 TCP 连接可以对应几个 HTTP 请求？&lt;/strong>&lt;/p>
&lt;p>了解了第一个问题之后，其实这个问题已经有了答案，如果维持连接，一个 TCP 连接是可以发送多个 HTTP 请求的。&lt;/p>
&lt;p>&lt;strong>第三个问题：一个 TCP 连接中 HTTP 请求发送可以一起发送么（比如一起发三个请求，再三个响应一起接收）？&lt;/strong>&lt;/p>
&lt;p>HTTP/1.1 存在一个问题，单个 TCP 连接在同一时刻只能处理一个请求，意思是说：两个请求的生命周期不能重叠，任意两个 HTTP 请求从开始到结束的时间在同一个 TCP 连接里不能重叠。&lt;/p>
&lt;p>虽然 HTTP/1.1 规范中规定了 &lt;a href="https://link.zhihu.com/?target=https%3A//tools.ietf.org/html/rfc2616%23section-8.1.2.2">Pipelining&lt;/a> 来试图解决这个问题，但是这个功能在浏览器中默认是关闭的。&lt;/p>
&lt;p>先来看一下 Pipelining 是什么，RFC 2616 中规定了：&lt;/p>
&lt;blockquote>
&lt;p>A client that supports persistent connections MAY &amp;ldquo;pipeline&amp;rdquo; its requests (i.e., send multiple requests without waiting for each response). A server MUST send its responses to those requests in the same order that the requests were received.&lt;/p>
&lt;p>一个支持持久连接的客户端可以在一个连接中发送多个请求（不需要等待任意请求的响应）。收到请求的服务器必须按照请求收到的顺序发送响应。&lt;/p>
&lt;/blockquote>
&lt;p>至于标准为什么这么设定，我们可以大概推测一个原因：由于 HTTP/1.1 是个文本协议，同时返回的内容也并不能区分对应于哪个发送的请求，所以顺序必须维持一致。比如你向服务器发送了两个请求 &lt;code>GET /query?q=A&lt;/code> 和 &lt;code>GET /query?q=B&lt;/code>，服务器返回了两个结果，浏览器是没有办法根据响应结果来判断响应对应于哪一个请求的。&lt;/p>
&lt;p>Pipelining 这种设想看起来比较美好，但是在实践中会出现许多问题：&lt;/p>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul>
&lt;p>一些代理服务器不能正确的处理 HTTP Pipelining。&lt;/p>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul>
&lt;p>正确的流水线实现是复杂的。详见&lt;/p>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul>
&lt;p>Head-of-line Blocking 连接头阻塞：在建立起一个 TCP 连接之后，假设客户端在这个连接连续向服务器发送了几个请求。按照标准，服务器应该按照收到请求的顺序返回结果，假设服务器在处理首个请求时花费了大量时间，那么后面所有的请求都需要等着首个请求结束才能响应。&lt;/p>
&lt;p>所以现代浏览器默认是不开启 HTTP Pipelining 的。&lt;/p>
&lt;p>但是，HTTP2 提供了 Multiplexing 多路传输特性，可以在一个 TCP 连接中同时完成多个 HTTP 请求。至于 Multiplexing 具体怎么实现的就是另一个问题了。我们可以看一下使用 HTTP2 的效果。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/6cbfab08-4d4d-43ef-a7c1-84e9fba6d0bd/v2-18674617fd7dbde4a6ab2a44611b53bc_b.jpg" alt="">&lt;/p>
&lt;p>绿色是发起请求到请求返回的等待时间，蓝色是响应的下载时间，可以看到都是在同一个 Connection，并行完成的&lt;/p>
&lt;p>所以这个问题也有了答案：在 HTTP/1.1 存在 Pipelining 技术可以完成这个多个请求同时发送，但是由于浏览器默认关闭，所以可以认为这是不可行的。在 HTTP2 中由于 Multiplexing 特点的存在，多个 HTTP 请求可以在同一个 TCP 连接中并行进行。&lt;/p>
&lt;p>那么在 HTTP/1.1 时代，浏览器是如何提高页面加载效率的呢？主要有下面两点：&lt;/p>
&lt;ol>
&lt;li>维持和服务器已经建立的 TCP 连接，在同一连接上顺序处理多个请求。&lt;/li>
&lt;li>和服务器建立多个 TCP 连接。&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>第四个问题：为什么有的时候刷新页面不需要重新建立 SSL 连接？&lt;/strong>&lt;/p>
&lt;p>在第一个问题的讨论中已经有答案了，TCP 连接有的时候会被浏览器和服务端维持一段时间。TCP 不需要重新建立，SSL 自然也会用之前的。&lt;/p>
&lt;p>&lt;strong>第五个问题：浏览器对同一 Host 建立 TCP 连接到数量有没有限制？&lt;/strong>&lt;/p>
&lt;p>假设我们还处在 HTTP/1.1 时代，那个时候没有多路传输，当浏览器拿到一个有几十张图片的网页该怎么办呢？肯定不能只开一个 TCP 连接顺序下载，那样用户肯定等的很难受，但是如果每个图片都开一个 TCP 连接发 HTTP 请求，那电脑或者服务器都可能受不了，要是有 1000 张图片的话总不能开 1000 个 TCP 连接吧，你的电脑同意 NAT 也不一定会同意。&lt;/p>
&lt;p>所以答案是：有。Chrome 最多允许对同一个 Host 建立六个 TCP 连接。不同的浏览器有一些区别。&lt;/p>
&lt;p>&lt;strong>那么回到最开始的问题，收到的 HTML 如果包含几十个图片标签，这些图片是以什么方式、什么顺序、建立了多少连接、使用什么协议被下载下来的呢？&lt;/strong>&lt;/p>
&lt;p>如果图片都是 HTTPS 连接并且在同一个域名下，那么浏览器在 SSL 握手之后会和服务器商量能不能用 HTTP2，如果能的话就使用 Multiplexing 功能在这个连接上进行多路传输。不过也未必会所有挂在这个域名的资源都会使用一个 TCP 连接去获取，但是可以确定的是 Multiplexing 很可能会被用到。&lt;/p>
&lt;p>如果发现用不了 HTTP2 呢？或者用不了 HTTPS（现实中的 HTTP2 都是在 HTTPS 上实现的，所以也就是只能使用 HTTP/1.1）。那浏览器就会在一个 HOST 上建立多个 TCP 连接，连接数量的最大限制取决于浏览器设置，这些连接会在空闲的时候被浏览器用来发送新的请求，如果所有的连接都正在发送请求呢？那其他的请求就只能等等了。&lt;/p></description></item></channel></rss>