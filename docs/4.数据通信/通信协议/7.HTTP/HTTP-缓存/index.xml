<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – HTTP 缓存</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/7.HTTP/HTTP-%E7%BC%93%E5%AD%98/</link><description>Recent content in HTTP 缓存 on 断念梦</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/7.HTTP/HTTP-%E7%BC%93%E5%AD%98/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: HTTP 缓存</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/7.HTTP/HTTP-%E7%BC%93%E5%AD%98/HTTP-%E7%BC%93%E5%AD%98/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/7.HTTP/HTTP-%E7%BC%93%E5%AD%98/HTTP-%E7%BC%93%E5%AD%98/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/bUy220-ect00N4gnO0697A">公众号-小林 coding，硬核！30 张图解 HTTP 常见的面试题&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/fvvnQ3xI1nz-Ri3vBfG2lw">公众号-小林 coding，告别 HTTP&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h3 id="http-缓存有哪些实现方式">HTTP 缓存有哪些实现方式？&lt;/h3>
&lt;p>对于一些具有重复性的 HTTP 请求，比如每次请求得到的数据都一样的，我们可以把这对「请求-响应」的数据都&lt;strong>缓存在本地&lt;/strong>，那么下次就直接读取本地的数据，不必在通过网络获取服务器的响应了，这样的话 HTTP/1.1 的性能肯定肉眼可见的提升。&lt;/p>
&lt;p>所以，避免发送 HTTP 请求的方法就是通过&lt;strong>缓存技术&lt;/strong>，HTTP 设计者早在之前就考虑到了这点，因此 HTTP 协议的头部有不少是针对缓存的字段。&lt;/p>
&lt;p>HTTP 缓存有两种实现方式，分别是&lt;strong>强制缓存和协商缓存&lt;/strong>。&lt;/p>
&lt;h3 id="什么是强制缓存">什么是强制缓存？&lt;/h3>
&lt;p>强缓存指的是只要浏览器判断缓存没有过期，则直接使用浏览器的本地缓存，决定是否使用缓存的主动性在于浏览器这边。&lt;/p>
&lt;p>如下图中，返回的是 200 状态码，但在 size 项中标识的是 from disk cache，就是使用了强制缓存。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/884948f1-0dd2-48b3-8dd0-41b261df0633/1649668520864-47bf15a0-854c-4725-ae4f-45751f99cf0f.png" alt="">&lt;/p>
&lt;p>强缓存是利用下面这两个 HTTP 响应头部（Response Header）字段实现的，它们都用来表示资源在客户端缓存的有效期：&lt;/p>
&lt;ul>
&lt;li>&lt;code>Cache-Control&lt;/code>， 是一个相对时间；&lt;/li>
&lt;li>&lt;code>Expires&lt;/code>，是一个绝对时间；&lt;/li>
&lt;/ul>
&lt;p>如果 HTTP 响应头部同时有 Cache-Control 和 Expires 字段的话，&lt;strong>Cache-Control 的优先级高于 Expires&lt;/strong> 。&lt;/p>
&lt;p>Cache-control 选项更多一些，设置更加精细，所以建议使用 Cache-Control 来实现强缓存。具体的实现流程如下：&lt;/p>
&lt;ul>
&lt;li>当浏览器第一次请求访问服务器资源时，服务器会在返回这个资源的同时，在 Response 头部加上 Cache-Control，Cache-Control 中设置了过期时间大小；&lt;/li>
&lt;li>浏览器再次请求访问服务器中的该资源时，会先&lt;strong>通过请求资源的时间与 Cache-Control 中设置的过期时间大小，来计算出该资源是否过期&lt;/strong>，如果没有，则使用该缓存，否则重新请求服务器；&lt;/li>
&lt;li>服务器再次收到请求后，会再次更新 Response 头部的 Cache-Control。&lt;/li>
&lt;/ul>
&lt;h3 id="什么是协商缓存">什么是协商缓存？&lt;/h3>
&lt;p>当我们在浏览器使用开发者工具的时候，你可能会看到过某些请求的响应码是 &lt;code>304&lt;/code>，这个是告诉浏览器可以使用本地缓存的资源，通常这种通过服务端告知客户端是否可以使用缓存的方式被称为协商缓存。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/884948f1-0dd2-48b3-8dd0-41b261df0633/1649668520944-8c9a8b13-8145-4ffc-9334-3d5eb46c4231.png" alt="">&lt;/p>
&lt;p>上图就是一个协商缓存的过程，所以&lt;strong>协商缓存就是与服务端协商之后，通过协商结果来判断是否使用本地缓存&lt;/strong>。&lt;/p>
&lt;p>协商缓存可以基于两种头部来实现。&lt;/p>
&lt;p>第一种：请求头部中的 &lt;code>If-Modified-Since&lt;/code> 字段与响应头部中的 &lt;code>Last-Modified&lt;/code> 字段实现，这两个字段的意思是：&lt;/p>
&lt;ul>
&lt;li>响应头部中的 &lt;code>Last-Modified&lt;/code>：标示这个响应资源的最后修改时间；&lt;/li>
&lt;li>请求头部中的 &lt;code>If-Modified-Since&lt;/code>：当资源过期了，发现响应头中具有 Last-Modified 声明，则再次发起请求的时候带上 Last-Modified 的时间，服务器收到请求后发现有 If-Modified-Since 则与被请求资源的最后修改时间进行对比（Last-Modified），如果最后修改时间较新（大），说明资源又被改过，则返回最新资源，HTTP 200 OK；如果最后修改时间较旧（小），说明资源无新修改，响应 HTTP 304 走缓存。&lt;/li>
&lt;/ul>
&lt;p>第二种：请求头部中的 &lt;code>If-None-Match&lt;/code> 字段与响应头部中的 &lt;code>ETag&lt;/code> 字段，这两个字段的意思是：&lt;/p>
&lt;ul>
&lt;li>响应头部中 &lt;code>Etag&lt;/code>：唯一标识响应资源；&lt;/li>
&lt;li>请求头部中的 &lt;code>If-None-Match&lt;/code>：当资源过期时，浏览器发现响应头里有 Etag，则再次向服务器发起请求时，会将请求头 If-None-Match 值设置为 Etag 的值。服务器收到请求后进行比对，如果资源没有变化返回 304，如果资源变化了返回 200。&lt;/li>
&lt;/ul>
&lt;p>第一种实现方式是基于时间实现的，第二种实现方式是基于一个唯一标识实现的，相对来说后者可以更加准确地判断文件内容是否被修改，避免由于时间篡改导致的不可靠问题。&lt;/p>
&lt;p>如果 HTTP 响应头部同时有 Etag 和 Last-Modified 字段的时候， Etag 的优先级更高，也就是先会判断 Etag 是否变化了，如果 Etag 没有变化，然后再看  Last-Modified。&lt;/p>
&lt;p>注意，&lt;strong>协商缓存这两个字段都需要配合强制缓存中 Cache-control 字段来使用，只有在未能命中强制缓存的时候，才能发起带有协商缓存字段的请求&lt;/strong>。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/884948f1-0dd2-48b3-8dd0-41b261df0633/1649668520918-e343317a-4c73-4f3c-b059-fc656dab9631.png" alt="">&lt;/p>
&lt;p>使用 ETag 字段实现的协商缓存的过程如下；&lt;/p>
&lt;ul>
&lt;li>当浏览器第一次请求访问服务器资源时，服务器会在返回这个资源的同时，在 Response 头部加上 ETag 唯一标识，这个唯一标识的值是根据当前请求的资源生成的；&lt;/li>
&lt;li>当浏览器再次请求访问服务器中的该资源时，首先会先检查强制缓存是否过期，如果没有过期，则直接使用本地缓存；如果缓存过期了，会在 Request 头部加上 If-None-Match 字段，该字段的值就是 ETag 唯一标识；&lt;/li>
&lt;li>服务器再次收到请求后，&lt;strong>会根据请求中的 If-None-Match 值与当前请求的资源生成的唯一标识进行比较&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>如果值相等，则返回 304 Not Modified，不会返回资源&lt;/strong>；&lt;/li>
&lt;li>如果不相等，则返回 200 状态码和返回资源，并在 Response 头部加上新的 ETag 唯一标识；&lt;/li>
&lt;li>如果浏览器收到 304 的请求响应状态码，则会从本地缓存中加载资源，否则更新资源。&lt;/li>
&lt;/ul></description></item></channel></rss>