<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦的站点 – 🌐4.数据通信</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/</link><description>Recent content in 🌐4.数据通信 on 断念梦的站点</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: 信息论</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E4%BF%A1%E6%81%AF%E8%AE%BA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E4%BF%A1%E6%81%AF%E8%AE%BA/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.bilibili.com/video/BV1fq4y1g7hq">B 站，信道容量、香农极限、极化码&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Information_theory">Wiki，Information Theory(信息论)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Polar_code_(coding_theory)">Wiki，Polar Code(极化码)&lt;/a>&lt;/li>
&lt;li>capacity-achieving&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/z_cn8UahTHhn8594VlV2iA">硬科普 | 熵与信息（一）：一个石破惊天的副产品&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/SwhY9ia_tj4IJ_lzy5s9dw">熵与信息（四）：如何用1 bit信息改变世界？&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>信息熵&lt;/strong> # 一个答案的最少提问次数&lt;/p>
&lt;p>&lt;strong>信道容量&lt;/strong> # 单位时间内能传输的信息量&lt;/p>
&lt;p>$log_2(\frac{1}{2})=-3$&lt;/p></description></item><item><title>Docs: 数据通信</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/</guid><description/></item><item><title>Docs: 通信协议</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/</guid><description/></item><item><title>Docs: bit 与 Byte</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/bit-%E4%B8%8E-Byte/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/bit-%E4%B8%8E-Byte/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="bit比特">bit（比特）&lt;a class="td-heading-self-link" href="#bit%e6%af%94%e7%89%b9" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>bit 也就是我们不一定听说过的比特，大名鼎鼎的比特币就是以此命名的。它的简写为小写字母 “b” 。&lt;/p>
&lt;p>作为信息技术的最基本存储单元，因为比特实在太小了，所以大家生活中并不是经常听到。那么 bit 是什么呢？&lt;/p>
&lt;p>电脑是以二进制存储以及发送接收数据的。二进制的一位，就叫做 1 bit。也就是说 bit 的含义就是二进制数中的一个数位，即 “0” 或者 &amp;ldquo;1&amp;rdquo;。&lt;/p>
&lt;h2 id="byte字节">Byte（字节）&lt;a class="td-heading-self-link" href="#byte%e5%ad%97%e8%8a%82" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Byte 是字节的英文写法。它的简写为大写字母 &lt;code>B&lt;/code>。&lt;/p>
&lt;p>既然名字叫字节，那肯定跟字符有关系。是的。英文字符通常是一个字节，也就是 1B，中文字符通常是两个字节，也就是 2B。&lt;/p>
&lt;p>字节 Byte 和比特 bit 的换算关系是 1 Byte = 8 bit 。&lt;/p>
&lt;h2 id="kib-千字节">KiB （千字节）&lt;a class="td-heading-self-link" href="#kib-%e5%8d%83%e5%ad%97%e8%8a%82" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>需要了解的是，1 KiB 并不是一千字节，因为计算机只认识二进制，所以在这里的 KiB，是 2 的 10 次方，也就是 1024 个字节。&lt;/p>
&lt;p>另外很多表示存储单位的地方都把 B 写成 b，造成了大家认知的混乱。其实在存储单位计量中出现 b 的地方，它的意思仍然是 B，不要因为 bit 的缩写是 b 就被误导了，在存储计量中是不会用 比特，千比特 这种单位的。但是在网速计量中，b 的真实意思就是指 比特 了，这个我们下面再说。&lt;/p>
&lt;h2 id="单位换算">单位换算&lt;a class="td-heading-self-link" href="#%e5%8d%95%e4%bd%8d%e6%8d%a2%e7%ae%97" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>存储单位换算关系如下&lt;/p>
&lt;ul>
&lt;li>1 Byte = 8 bit&lt;/li>
&lt;li>1 KiB= 1024 Bi&lt;/li>
&lt;li>1 MiB = 1024 KiB&lt;/li>
&lt;li>1 GiB = 1024 MiB&lt;/li>
&lt;li>1 TiB = 1024 GiB&lt;/li>
&lt;/ul>
&lt;h1 id="bit-和-byte">bit 和 Byte&lt;a class="td-heading-self-link" href="#bit-%e5%92%8c-byte" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>计算机内部的存储和运算都是通过 「 0，1 」 这两个数在二进制下完成的。&lt;/p>
&lt;p>其中每个 0 或 1 就是一个 &lt;strong>bit(位或比特)&lt;/strong>，bit 是信息的最小数据单位，并且 8 个 bit 刚好可以构成 1 个 &lt;strong>Byte(字节)&lt;/strong>。&lt;/p>
&lt;p>Byte 可以说是计算机中存储容量的基本单位。我们在属性里查看电脑的任何一个文件，占用空间的大小都是用多少字节来统计的。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/nb56i3/1616065436103-9aeaff35-7332-46ef-aaab-952a7a95f397.jpeg" alt="">&lt;/p>
&lt;p>但就像长度、重量和体积等其他单位一样，光是用一个 Byte 来衡量数据的大小肯定是不够的。&lt;/p>
&lt;p>因此在 bit 的单位后面还设有 Byte、KiB、MiB、GiB、TiB、PiB 等多个数据存储单位，各个单位之间遵循着一定的换算方式。&lt;/p>
&lt;p>如果世超没记错的话，自己当时在计算机课上学到的单位转换方式是这样的：&lt;/p>
&lt;p>1024（ 2 ^10 ) Byte = 1 KiB&lt;/p>
&lt;p>1024（ 2 ^10 ) KiB = 1 MiB&lt;/p>
&lt;p>1024（ 2 ^10 ) MiB = 1 GiB&lt;/p>
&lt;p>上面这种就是用计算机二进制的 10 次方，也就是以 1024 为进制的换算方式。&lt;/p>
&lt;p>差友们可能会觉得这个换算方式很对没错呀，挺贴合计算机的二进制系统的特点，另外，考试的时候不也是要求这么算的吗？&lt;/p>
&lt;p>但如果脱离计算机范畴，将它和生活中其他几个单位一比较，很多对电脑不了解的人来说，就很难理解 1024 这个换算数值是怎么来的了。&lt;/p>
&lt;p>毕竟像其他诸如 1A=1000mA、1kg=100g、1m=100cm 等生活中比较常见的单位，差不多都是拿十进制的几次方来作为换算方式。&lt;/p>
&lt;p>十进制的换算不仅更常见，直接拿整数一乘或者一除换算起来也会比 1024 方便很多，而且还更符合我们日常的生活习惯。&lt;/p>
&lt;p>所以，才有了下文的 &lt;a href="#KB%20%E4%B8%8E%20KiB%20%E7%9A%84%E5%8C%BA%E5%88%AB">KB 与 KiB 的区别&lt;/a>&lt;/p>
&lt;h1 id="kb-与-kib-的区别">KB 与 KiB 的区别&lt;a class="td-heading-self-link" href="#kb-%e4%b8%8e-kib-%e7%9a%84%e5%8c%ba%e5%88%ab" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Byte">Wiki，Byte&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zh.wikipedia.org/wiki/%E5%8D%83%E5%AD%97%E8%8A%82">Wiki-zh，千字节&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>International System of Units(国际单位制，简称 SI)&lt;/strong> 这种规范就是为了照顾到计算机外的行业，除了之前提到以 1024 的换算，还可以使用十进制来进行换算。这种制度其实很早很早就有了，比如距离单位(100cm=1m)、重量单位(1kg=1000g)、时间单位(1s=1000ms) 等等。&lt;/p>
&lt;p>&lt;strong>International Electrotechnical Commission(国际电工委员会，简称 IEC)&lt;/strong> 的规范中提到，用于二进制存储单位的标准命名建议在中间&amp;quot;加个 i&amp;quot;(其实是更改了命名)以示区分&lt;/p>
&lt;p>具体效果就如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>十进制前缀&lt;/th>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;th>二进制前缀&lt;/th>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>(SI)&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>(IEC 60027-2)&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>名字&lt;/td>
&lt;td>缩写&lt;/td>
&lt;td>次方&lt;/td>
&lt;td>名字&lt;/td>
&lt;td>缩写&lt;/td>
&lt;td>次方&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>KiloByte&lt;/td>
&lt;td>KB&lt;/td>
&lt;td>$10^3$&lt;/td>
&lt;td>KibiByte&lt;/td>
&lt;td>KiB&lt;/td>
&lt;td>$2^{10}$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>MegaByte&lt;/td>
&lt;td>MB&lt;/td>
&lt;td>$10^6$&lt;/td>
&lt;td>MebiByte&lt;/td>
&lt;td>MiB&lt;/td>
&lt;td>$2^{20}$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>GigaByte&lt;/td>
&lt;td>GB&lt;/td>
&lt;td>$10^9$&lt;/td>
&lt;td>GibiByte&lt;/td>
&lt;td>GiB&lt;/td>
&lt;td>$2^{30}$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>TeraByte&lt;/td>
&lt;td>TB&lt;/td>
&lt;td>$10^{12}$&lt;/td>
&lt;td>TebiByte&lt;/td>
&lt;td>TiB&lt;/td>
&lt;td>$2^{40}$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Petabyte&lt;/td>
&lt;td>PB&lt;/td>
&lt;td>$10^{15}$&lt;/td>
&lt;td>PebiByte&lt;/td>
&lt;td>PiB&lt;/td>
&lt;td>$2^{50}$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Exabyte&lt;/td>
&lt;td>EB&lt;/td>
&lt;td>$10^{18}$&lt;/td>
&lt;td>ExbiByte&lt;/td>
&lt;td>EiB&lt;/td>
&lt;td>$2^{60}$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ZettaByte&lt;/td>
&lt;td>ZB&lt;/td>
&lt;td>$10^{21}$&lt;/td>
&lt;td>ZebiByte&lt;/td>
&lt;td>ZiB&lt;/td>
&lt;td>$2^{70}$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>YottaByte&lt;/td>
&lt;td>YB&lt;/td>
&lt;td>$10^{24}$&lt;/td>
&lt;td>YobiByte&lt;/td>
&lt;td>YiB&lt;/td>
&lt;td>$2^{80}$&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;blockquote>
&lt;p>表里没有 Byte 与 bit，是因为这两种在名字写法上是一模一样的~&lt;/p>
&lt;/blockquote>
&lt;p>1998 年 12 月，IEC 通过创建前缀(例如 Kibi、Mebi、Gibi 等) 来明确表明 1024 的力量。因此 KibiByte 象征着 KiB(表示为：2^10 bytes = 1024 bytes)。这些前缀现在是&lt;strong>International System of Quantities(国际数量体系，简称 ISQ)&lt;/strong> 的一部分。IEC 进一步规定，KiloByte 只能用于表示 1000 个 bytes&lt;/p>
&lt;blockquote>
&lt;p>1 个字符=1 个 Byte，1 个汉字=2 个 Byte&lt;/p>
&lt;p>ASCII 码：1 个英文字母（不分大小写）占一个字节的空间。一个二进制数字序列，在计算机中作为一个数字单元，一般为 8 位二进制数，换算为十进制。最小值-128，最大值 127。如一个 ASCII 码就是一个字节。&lt;/p>
&lt;p>UTF-8 编码：一个英文字符等于一个字节，一个中文（含繁体）等于三个字节。中文标点占三个字节，英文标点占一个字节。&lt;/p>
&lt;p>Unicode 编码：一个英文等于两个字节，一个中文（含繁体）等于两个字节。中文标点占两个字节，英文标点占两个字节。&lt;/p>
&lt;/blockquote>
&lt;p>但在很长的一段时间里，不同领域仍然存在着两种换算方式混用的现象。这就导致存在了很多的误会产生&lt;/p>
&lt;h2 id="硬盘容量的误区">硬盘容量的误区&lt;a class="td-heading-self-link" href="#%e7%a1%ac%e7%9b%98%e5%ae%b9%e9%87%8f%e7%9a%84%e8%af%af%e5%8c%ba" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>最典型的一个例子就是硬盘厂商：它们标容量时遵照的就是 1000 进位而不是 1024 进位&lt;/p>
&lt;p>同样是 500GB 的硬盘，如果按照 1024 换算，需要 500&lt;em>1024MB 的空间，但以 1000 换算，只需要 500&lt;/em>1000MB 的空间，整整少了 12000MB，也就是 12GB 左右。但操作系统里读取硬盘时，则是按照 1024 进位的，所以你拿到手的硬盘在电脑上显示会比厂商标示的要少。显而易见的，硬盘的容量越大厂商们省的越多，但谁叫它就是有这么一个换算规范，你也不好说它是在偷工减料。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/nb56i3/1616065436150-0d382d4c-3a76-473f-b846-c04d27814ddc.jpeg" alt="">&lt;/p>
&lt;p>另外，如果差友同时拥有 Mac 和 Win 电脑，可能还会发现在两台电脑之间转移文件时，同个文件在两台电脑上显示的大小是不同的。&lt;/p>
&lt;p>这也是不同的系统采用了不同进制规范的缘故。&lt;/p>
&lt;h2 id="网速的误区">网速的误区&lt;a class="td-heading-self-link" href="#%e7%bd%91%e9%80%9f%e7%9a%84%e8%af%af%e5%8c%ba" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>至于运营商在宽带办理中宣传的 100M、1000M 实际使用时却没有那么快的网速，纯粹就是具体单位没有标清楚从而造成的误会。&lt;/p>
&lt;p>100M 宽带里的 M 是 Mbps，而 100M/s 下载速度里的 M 是 MBps，摆在一起差友们就很容易发现它们的区别：&lt;/p>
&lt;p>一个是小写 b，一个是大写 B。&lt;/p>
&lt;p>前面 Mbps 是兆比特每秒，指的是每秒传输的位数量；MBps 则是兆字节每秒，指的是指每秒传输的字节数量。&lt;/p>
&lt;p>别小看了这个 b，就因为存在着大小写的区别，两者之间就有了 8 倍的转换关系（ 8bit = 1B ），这样一来，100 Mbps 的宽带，满打满算下载速度也只有 100/8 Mbps= 12.5M/s。&lt;/p>
&lt;h1 id="bps-与-pps">bps 与 pps&lt;a class="td-heading-self-link" href="#bps-%e4%b8%8e-pps" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Bit_rate">Wiki，Bit_rate&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Network_throughput">Wiki，Network_throughput&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>bps 和 pps 作为衡量网络吞吐量的单位，从功能上而言两者没有区别。但是，两者的使用环境截然不同。&lt;/p>
&lt;p>&lt;strong>bit per second(简称 bps)&lt;/strong>，也可以表示成 b/s。常用的单位还有 &lt;strong>Bytes per second(简称 Bps)&lt;/strong>，速度向上扩展一下就是 KiB/s、MiB/s、etc. ，bps 是此类单位的最小单位 。&lt;/p>
&lt;ul>
&lt;li>bps 用来描述 &lt;strong>Bit rate(bit率)&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p> &lt;strong>packet per second(简称 pps)&lt;/strong>，也可以表示成 p/s 。不同于bps，这个单位不是用于文件传输速度的衡量，而是用于衡量交换机（switch），路由器（router）等网络设备对于帧（frame）或数据包（packet）的处理能力的单位。&lt;/p>
&lt;ul>
&lt;li>pps 用来描述 &lt;strong>Network throughput(网络吞吐量)&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>假设有2台带有干兆以太网NIC的PC通过路由器进行文件传输。（不讨论设备的相关设假设文件传输速度可达到最高值，则此例中为1 Gbps，如果以bps类对交换机处理能力进行量，记：此路由器处理能力为1 Gbps.&lt;/p>
&lt;p>同样是这台交换机，连接2台带有快速（百兆）以太网NIC的PC进行文件传输，此时传输速率100 Mbps，则记：此路由器处理能力为100 Mbps.&lt;/p>
&lt;p>显然，得出的结论是错误的。处理能力作为网络设备本身的属性不会因为所连接的设备而发生化。而能对其产生相对影响的另有他因。&lt;/p>
&lt;p>就好像用电脑打游戏，游戏的fps不会因为你的鼠标是USB2.0还是USB3.0还是Bluetooth而改而通常能影响到的一般只有温度，还有其他正在使用显卡（GPU）的进程的使用量。&lt;/p>
&lt;ul>
&lt;li>bps 用于表示传输速度&lt;/li>
&lt;li>pps 用于表示数据包处理速度&lt;/li>
&lt;/ul>
&lt;p>那么，到底该如何才能相对准确地衡量网络设备对数据包进行处理的能力大小呢？ 这个时候就轮到单位pps登场了。&lt;/p>
&lt;p>对于一般网络设备，制造商会同时标注设备的传输速度（bps）和数据包处理速度（pps）&lt;/p>
&lt;p>这是经过专门测量后标注的设备标准属性。&lt;/p>
&lt;p>例如思科交换机Cisco Catalyst3560G-48Ts，其标注为：传输速度：32Gbps数据包处理速度：38.7M pps此时，例如以每秒38.7M个，长为1500B的数据包进行传输时，一秒所需的bps为: &lt;code>1500Bytes/packet*38.7M packet/s*8 bit/Byte = 453.5G bps&lt;/code> 可见结果远大于32Gbps，因此使用次交换机进行上述数据包类型传输时会导致严重堵塞。&lt;/p>
&lt;p>同样，如果以 32Gbps 的速度传输长为 64B 的数据包，一秒所需的 pps 为: &lt;code>（32bps）/（64B/packet）/（8bit/B）=64M pps&lt;/code>显然，由于结果远大于 38.7M pps，此类通信也会导致严重堵塞。&lt;/p></description></item><item><title>Docs: DPDK</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/DPDK/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/DPDK/</guid><description/></item><item><title>Docs: File transfer</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/File-transfer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/File-transfer/</guid><description/></item><item><title>Docs: Networking device</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Networking-device/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Networking-device/</guid><description/></item><item><title>Docs: 同源同宿</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E5%90%8C%E6%BA%90%E5%90%8C%E5%AE%BF/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E5%90%8C%E6%BA%90%E5%90%8C%E5%AE%BF/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>同源同宿，找不到对应的英文。与 &lt;a href="https://desistdaydream.github.io/docs/3.%E9%9B%86%E7%BE%A4%E4%B8%8E%E5%88%86%E5%B8%83%E5%BC%8F/Load%20balancing.md">Load balancing&lt;/a> 中的 &lt;strong>Session persistence(会话保持)&lt;/strong> 的技术类似。&lt;/p></description></item><item><title>Docs: Utility</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Utility/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Utility/</guid><description/></item><item><title>Docs: DNS</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/DNS/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/DNS/</guid><description/></item><item><title>Docs: NAT</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/NAT/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/NAT/</guid><description/></item><item><title>Docs: SDN(软件定义网路)</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/SDN%E8%BD%AF%E4%BB%B6%E5%AE%9A%E4%B9%89%E7%BD%91%E8%B7%AF/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/SDN%E8%BD%AF%E4%BB%B6%E5%AE%9A%E4%B9%89%E7%BD%91%E8%B7%AF/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Software-defined_networking">Wiki，Software-defined networking&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Software Defined Networking(软件定义网络，简称 SDN)&lt;/strong> 技术是一种&lt;a href="https://en.wikipedia.org/wiki/Network_management">网络管理&lt;/a>方法，它支持动态的、以编程方式高效的网络配置，以提高网络性能和监控，使其更像&lt;a href="https://en.wikipedia.org/wiki/Cloud_computing">云计算，而&lt;/a>不是传统的网络管理。&lt;a href="https://en.wikipedia.org/wiki/Software-defined_networking#cite_note-ReferenceA-1">[1]&lt;/a> SDN 旨在解决传统网络的静态架构分散且复杂的事实，而当前网络需要更多的灵活性和易于故障排除。SDN 试图通过将&lt;a href="https://en.wikipedia.org/wiki/Network_packet">网络数据包&lt;/a>的转发过程（数据平面）与路由过程（控制平面）分离，将网络智能集中在一个网络组件中。&lt;a href="https://en.wikipedia.org/wiki/Software-defined_networking#cite_note-2">[2]&lt;/a>该&lt;a href="https://en.wikipedia.org/wiki/Control_plane">控制平面&lt;/a>由一个或多个控制器组成，这些控制器被认为是包含整个智能的 SDN 网络的大脑。然而，智能中心化在安全性、&lt;a href="https://en.wikipedia.org/wiki/Software-defined_networking#cite_note-ReferenceA-1">[1]&lt;/a>可扩展性和弹性&lt;a href="https://en.wikipedia.org/wiki/Software-defined_networking#cite_note-ReferenceA-1">[1]&lt;/a>方面有其自身的缺点，这是 SDN 的主要问题。&lt;/p>
&lt;p>自&lt;a href="https://en.wikipedia.org/wiki/OpenFlow">OpenFlow&lt;/a>协议于 2011 年出现以来，SDN 通常与&lt;a href="https://en.wikipedia.org/wiki/OpenFlow">OpenFlow&lt;/a>协议（用于与网络平面元素进行远程通信，以确定&lt;a href="https://en.wikipedia.org/wiki/Network_packet">网络数据包&lt;/a>通过&lt;a href="https://en.wikipedia.org/wiki/Network_switch">网络交换机&lt;/a>的路径）相关联。然而，自 2012 年&lt;a href="https://en.wikipedia.org/wiki/Software-defined_networking#cite_note-TechTarget:_SDN_is_not_OpenFlow-3">[3] &lt;/a>&lt;a href="https://en.wikipedia.org/wiki/Software-defined_networking#cite_note-TechTarget:_OpenFlow_not_the_only_show_in_town-4">[4]&lt;/a> OpenFlow 对于许多公司不再是独家解决方案，他们增加了专有技术。其中包括&lt;a href="https://en.wikipedia.org/wiki/Cisco_Systems">Cisco Systems&lt;/a>的开放网络环境和&lt;a href="https://en.wikipedia.org/wiki/Nicira">Nicira&lt;/a>的&lt;a href="https://en.wikipedia.org/wiki/Network_virtualization_platform">网络虚拟化平台&lt;/a>。
&lt;a href="https://en.wikipedia.org/wiki/SD-WAN">SD-WAN&lt;/a>将类似技术应用于&lt;a href="https://en.wikipedia.org/wiki/Wide_area_network">广域网&lt;/a>(WAN)。&lt;a href="https://en.wikipedia.org/wiki/Software-defined_networking#cite_note-5">[5]&lt;/a>&lt;/p>
&lt;p>SDN 技术目前可用于需要极快故障转移的工业控制应用，称为操作技术 (OT) 软件定义网络 (SDN)。OT SDN 技术是一种在关键基础设施网络的环境强化硬件上管理网络访问控制和以太网数据包交付的方法。OT SDN 将控制平面的管理从集中在流控制器中的交换机抽象出来，并将 SDN 应用为交换机中的底层控制平面。去除了传统控制平面，简化了交换机，同时集中控制平面管理。OT SDN 中使用的通用控制平面标准是 OpenFlow，使其可与其他 SDN 解决方案互操作，不同之处在于 OpenFlow 是交换机中唯一的控制平面，并且交换机在电源循环期间保留流量，并且所有流量和冗余都经过主动流量工程设计因此交换机可以执行转发，它们被配置为在有或没有在线流量控制器的情况下执行。OT SDN 在性能、网络安全和态势感知方面为工业网络提供了优势。性能优势是通过使用 OpenFlow 中的快速故障转移组的主动流量工程意外事件实现的，从而在微秒内从链路或交换机故障中恢复网络，而不是像生成树技术那样的毫秒级。另一个性能优势是环路缓解是通过流量工程路径规划完成的，而不是阻塞端口，允许系统所有者主动使用所有端口。OT SDN 的网络安全优势在于交换机默认拒绝，流是允许流量转发的规则。这提供了强大的网络访问控制，可以在每一跳从 OSI 模型的第 1 层到第 4 层检查数据包。由于旧控制平面不再存在，因此移除了旧控制平面安全漏洞。MAC 表欺骗和 BPDU 欺骗不再可能，因为两者都不存在于 OT SDN 交换机中。旋转和网络侦察不再适用于适当的流编程，因为仅允许转发结合物理位置和路径与虚拟数据包过滤的流量。OT SDN 的态势感知优势使网络所有者能够了解其网络上有哪些设备，哪些对话可以和正在发生，以及这些对话可以在谁之间发生。OT SDN 网络技术允许以太网满足关键基础设施测量和控制的苛刻通信消息交换要求，并简单地为系统所有者提供对哪些设备可以连接到网络、这些设备可以连接到哪里以及每个设备可以进行哪些对话的控制有。OT SDN 的态势感知优势使网络所有者能够了解其网络上有哪些设备，哪些对话可以和正在发生，以及这些对话可以在谁之间发生。OT SDN 网络技术允许以太网满足关键基础设施测量和控制的苛刻通信消息交换要求，并简单地为系统所有者提供对哪些设备可以连接到网络、这些设备可以连接到哪里以及每个设备可以进行哪些对话的控制有。OT SDN 的态势感知优势使网络所有者能够了解其网络上有哪些设备，哪些对话可以和正在发生，以及这些对话可以在谁之间发生。OT SDN 网络技术允许以太网满足关键基础设施测量和控制的苛刻通信消息交换要求，并简单地为系统所有者提供对哪些设备可以连接到网络、这些设备可以连接到哪里以及每个设备可以进行哪些对话的控制有。&lt;/p>
&lt;p>SDN 的研究仍在继续，因为许多&lt;a href="https://en.wikipedia.org/wiki/Emulator">仿真器&lt;/a>正在开发用于研究目的，例如 vSDNEmul、&lt;a href="https://en.wikipedia.org/wiki/Software-defined_networking#cite_note-6">[6]&lt;/a> EstiNet、&lt;a href="https://en.wikipedia.org/wiki/Software-defined_networking#cite_note-7">[7]&lt;/a> Mininet &lt;a href="https://en.wikipedia.org/wiki/Software-defined_networking#cite_note-8">[8]&lt;/a>等。&lt;/p></description></item></channel></rss>