<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦的站点 – 🌐4.数据通信</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/</link><description>Recent content in 🌐4.数据通信 on 断念梦的站点</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: DPDK</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/DPDK/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/DPDK/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/DPDK/dpdk">GitHub 项目，DPDK/dpdk&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.dpdk.org/">官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Data_Plane_Development_Kit">Wiki，Data Plane Development Kit&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Data Plane Development Kit(数据平面开发套件，简称 DPDK)&lt;/strong> 是一个由 &lt;a href="docs/x_%E6%A0%87%E5%87%86%E5%8C%96/Foundation/Linux%20Foundation.md">Linux 基金会&lt;/a> 管理的开源软件项目。用于将 TCP 数据包的处理能力从内核空间移动到用户空间中的进程。主要是跳过了内核的 &lt;a href="docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/CPU/Interrupts(%E4%B8%AD%E6%96%AD)/Interrupts(%E4%B8%AD%E6%96%AD).md">Interrupts(中断)&lt;/a> 逻辑。&lt;/p>
&lt;p>处理数据包的传统方式是 CPU 中断方式，即网卡驱动接收到数据包后通过中断通知 CPU 处理，然后由 CPU 拷贝数据并交给协议栈。在数据量大时，这种方式会产生大量 CPU 中断，导致 CPU 无法运行其他程序。&lt;/p>
&lt;p>而 DPDK 则采用轮询方式实现数据包处理过程：DPDK 程序加载了网卡驱动，该驱动在收到数据包后不中断通知 CPU，而是将数据包通过零拷贝技术存入内存，这时应用层程序就可以通过 DPDK 提供的接口，直接从内存读取数据包。&lt;/p>
&lt;p>这种处理方式节省了 CPU 中断时间、内存拷贝时间，并向应用层提供了简单易行且高效的数据包处理方式，使得网络应用的开发更加方便。但同时，由于需要重载网卡驱动，因此该开发包目前只能用在部分采用 Intel 网络处理芯片的网卡中。&lt;/p>
&lt;p>DPDK 主要包含如下几个部分（https://doc.dpdk.org/guides/prog_guide/source_org.html#libraries）&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Environmental Abstraction Layer(环境抽象层，简称 EAL)&lt;/strong> # 负责为应用间接访问底层的资源，比如内存空间、线程、设备、定时器等。如果把我们使用了 DPDK 的应用比作一个豪宅的主人的话，&lt;code>EAL&lt;/code>就是这个豪宅的管家。&lt;/li>
&lt;li>&lt;strong>DPDK API Library&lt;/strong> # DPDK 的 API 库
&lt;ul>
&lt;li>etc.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>&lt;a href="docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Networking%20device/NIC.md">NIC&lt;/a> Driver(网卡驱动程序)&lt;/strong> # 如名，只不过是轮询模式的驱动。
&lt;ul>
&lt;li>etc.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>DPDK APP&lt;/strong> # 一些实用的程序&lt;/li>
&lt;/ul>
&lt;h2 id="eal">EAL&lt;a class="td-heading-self-link" href="#eal" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://doc.dpdk.org/guides/prog_guide/env_abstraction_layer.html">https://doc.dpdk.org/guides/prog_guide/env_abstraction_layer.html&lt;/a>&lt;/p>
&lt;p>&lt;strong>Environment Abstraction Layer(环境抽象层，简称 EAL)&lt;/strong> 负责访问低级资源，例如硬件和内存空间。它提供了一个通用接口，对应用程序和库隐藏了环境细节。初始化例程负责决定如何分配这些资源（即内存空间、设备、定时器、控制台等）。&lt;/p>
&lt;h2 id="dpdk-library">DPDK Library&lt;a class="td-heading-self-link" href="#dpdk-library" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>TODO: 好多好多的库，功能非常全。&lt;/p>
&lt;h2 id="driver">Driver&lt;a class="td-heading-self-link" href="#driver" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Linux 驱动&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://doc.dpdk.org/guides/linux_gsg/linux_drivers.html#binding-and-unbinding-network-ports-to-from-the-kernel-modules">https://doc.dpdk.org/guides/linux_gsg/linux_drivers.html#binding-and-unbinding-network-ports-to-from-the-kernel-modules&lt;/a>&lt;/li>
&lt;li>&lt;strong>vfio&lt;/strong> # 使用 &lt;a href="docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/VFIO.md">VFIO&lt;/a> 功能的驱动。依赖 &lt;code>vfio-pci&lt;/code> 模块。&lt;a href="https://doc.dpdk.org/guides/linux_gsg/linux_drivers.html#binding-and-unbinding-network-ports-to-from-the-kernel-modules">官方文档&lt;/a>建议所有情况下都是用 vfio-pci 作为 DPDK 绑定端口的内核模块&lt;/li>
&lt;/ul>
&lt;p>TODO: 好多好多驱动。&lt;/p>
&lt;h1 id="dpdk-部署">DPDK 部署&lt;a class="td-heading-self-link" href="#dpdk-%e9%83%a8%e7%bd%b2" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;a href="https://core.dpdk.org/doc/quick-start/">https://core.dpdk.org/doc/quick-start/&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://doc.dpdk.org/guides/linux_gsg/index.html">这里&lt;/a> 是要在 Linux 安装 DPDK 的一些要求&lt;/p>
&lt;p>DPDK 的部署依赖 meson 和 ninja 两个构建工具、vfio-pci 内核模块。&lt;/p>
&lt;h2 id="dpdk-使用注意">DPDK 使用注意&lt;a class="td-heading-self-link" href="#dpdk-%e4%bd%bf%e7%94%a8%e6%b3%a8%e6%84%8f" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>当我们让 DPDK 程序接管网卡后，从系统中就无法通过常见的命令（e.g. ip, etc.）查看到系统中的网络设备，效果如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># lspci | grep Ethernet&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>01:00.0 Ethernet controller: Intel Corporation I350 Gigabit Network Connection &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>rev 01&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>01:00.1 Ethernet controller: Intel Corporation I350 Gigabit Network Connection &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>rev 01&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>02:00.0 Ethernet controller: Intel Corporation I350 Gigabit Network Connection &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>rev 01&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>02:00.1 Ethernet controller: Intel Corporation I350 Gigabit Network Connection &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>rev 01&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># ip link show&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu &lt;span style="color:#0000cf;font-weight:bold">65536&lt;/span> qdisc noqueue state UNKNOWN mode DEFAULT group default qlen &lt;span style="color:#0000cf;font-weight:bold">1000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2: eno3: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu &lt;span style="color:#0000cf;font-weight:bold">1500&lt;/span> qdisc mq state UP mode DEFAULT group default qlen &lt;span style="color:#0000cf;font-weight:bold">1000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> link/ether 44:a8:42:38:4e:2c brd ff:ff:ff:ff:ff:ff
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>5: enp2s0f1: &amp;lt;NO-CARRIER,BROADCAST,MULTICAST,UP&amp;gt; mtu &lt;span style="color:#0000cf;font-weight:bold">1500&lt;/span> qdisc mq state DOWN mode DEFAULT group default qlen &lt;span style="color:#0000cf;font-weight:bold">1000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> link/ether a0:36:9f:91:17:a7 brd ff:ff:ff:ff:ff:ff
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># dpdk-devbind.py -s&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Network devices using DPDK-compatible &lt;span style="color:#000">driver&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">============================================&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0000:01:00.1 &lt;span style="color:#4e9a06">&amp;#39;I350 Gigabit Network Connection 1521&amp;#39;&lt;/span> &lt;span style="color:#000">drv&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>vfio-pci &lt;span style="color:#000">unused&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>igb
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0000:02:00.0 &lt;span style="color:#4e9a06">&amp;#39;I350 Gigabit Network Connection 1521&amp;#39;&lt;/span> &lt;span style="color:#000">drv&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>vfio-pci &lt;span style="color:#000">unused&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>igb
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Network devices using kernel &lt;span style="color:#000">driver&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">===================================&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0000:01:00.0 &lt;span style="color:#4e9a06">&amp;#39;I350 Gigabit Network Connection 1521&amp;#39;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>eno3 &lt;span style="color:#000">drv&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>igb &lt;span style="color:#000">unused&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>vfio-pci *Active*
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0000:02:00.1 &lt;span style="color:#4e9a06">&amp;#39;I350 Gigabit Network Connection 1521&amp;#39;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>enp2s0f1 &lt;span style="color:#000">drv&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>igb &lt;span style="color:#000">unused&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>vfio-pci
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到机器上有 4 个 Ethernet，但是通过 ip 命令仅能看到 2 个（ip 这类命令只能看到内核管理的），另外 2 个被 DPDK 使用了，只有使用 DPDK 提供的程序才能获取到非内核管理的网卡信息。&lt;/p>
&lt;p>当我们让 DPDK 接管了网卡后，想要查看网卡当前所使用的驱动，可以使用 &lt;a href="docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux%20%E7%AE%A1%E7%90%86/Linux%20%E7%A1%AC%E4%BB%B6%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/Linux%20%E7%A1%AC%E4%BB%B6%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7.md#lspci">lspci&lt;/a> 命令查看到当前网卡所使用的驱动程序。（虽然其中显示的是 Kernel driver in use，但是实际上，驱动是 vfio-pci 的网卡已经被 DPDK 接管了）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># lspci -k | grep -i &amp;#34;Ethernet controller&amp;#34; -A 3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>01:00.0 Ethernet controller: Intel Corporation I350 Gigabit Network Connection &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>rev 01&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DeviceName: NIC1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Subsystem: Dell Gigabit 2P I350-t LOM
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Kernel driver in use: igb
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>01:00.1 Ethernet controller: Intel Corporation I350 Gigabit Network Connection &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>rev 01&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DeviceName: NIC2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Subsystem: Dell Gigabit 2P I350-t LOM
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Kernel driver in use: vfio-pci
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>02:00.0 Ethernet controller: Intel Corporation I350 Gigabit Network Connection &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>rev 01&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Subsystem: Intel Corporation Ethernet Server Adapter I350-T2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Kernel driver in use: vfio-pci
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Kernel modules: igb
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>02:00.1 Ethernet controller: Intel Corporation I350 Gigabit Network Connection &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>rev 01&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Subsystem: Intel Corporation Ethernet Server Adapter I350-T2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Kernel driver in use: igb
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Kernel modules: igb
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="dpdk-的实现">DPDK 的实现&lt;a class="td-heading-self-link" href="#dpdk-%e7%9a%84%e5%ae%9e%e7%8e%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://zhuanlan.zhihu.com/p/486288121">知乎，DPDK的整体工作原理&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.dpdk.org/guides/prog_guide/overview.html">https://doc.dpdk.org/guides/prog_guide/overview.html&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>在 &lt;a href="https://doc.dpdk.org/guides/linux_gsg/linux_drivers.html?highlight=vfio%20pci#binding-and-unbinding-network-ports-to-from-the-kernel-modules">DPDK 官方文档 - 7.1&lt;/a> 章节中，建议在所有情况下都使用 &lt;strong>vfio-pci&lt;/strong> 作为 DPDK 绑定端口的内核模块。如果 IOMMU 不可用，则可以在 no-iommu 模式下使用 vfio-pci。如果由于某种原因 vfio 不可用，则可以使用基于 UIO 的模块 igb_uio 和 uio_pci_generic。详细信息请参见 UIO 部分。&lt;/p>
&lt;h2 id="lcore--socket">lcore &amp;amp; socket&lt;a class="td-heading-self-link" href="#lcore--socket" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>Logical core(逻辑核心)&lt;/strong> DPDK 使用逻辑核心来管理并行处理，将任务分配给不同的逻辑核心以充分利用多核处理器的性能。通过使用逻辑核心，DPDK 应用程序可以更好地控制和利用系统中的处理器资源。狭义上 1 个 lcore 可以指 EAL 的 1 个线程。&lt;/p>
&lt;p>这两个概念在 &lt;code>DPDK&lt;/code>的代码中随处可见，&lt;strong>注意&lt;/strong>这里的 &lt;strong>socket&lt;/strong> 不是网络编程里面的那一套东西，而是 &lt;strong>CPU&lt;/strong> 相关的东西。具体的概念可以参看&lt;a href="https://link.zhihu.com/?target=https%3A//link.segmentfault.com/%3Fenc%3DkeRHFE71AwA4LEWK3gy%252F%252Bg%253D%253D.zL548YXL%252F1rT%252BQN9hhP0BSuhSZUszAZly2ULaOcHzihSAMFb3k6C8kBfLxFL65VqtdDdc0MigZcmMKHcWpmSUSTYHTTZ%252BgYz9XlsRQPKOK%252BWch%252FsoT6h%252BzR46e7YgN19TmdjGuy%252BwWL%252FfT2wdU6Q7Q%253D%253D">Differences between physical CPU vs logical CPU vs Core vs Thread vs Socket&lt;/a> 或者其翻译版本&lt;a href="https://link.zhihu.com/?target=https%3A//link.segmentfault.com/%3Fenc%3DQvdG3%252BI75LlbmFlczo3WpQ%253D%253D.wu%252FAAZX7seAtEJjmuttDzYMu8zmGLKxX2fcFZ%252BZxKkIQvVQguoy2MSUnOVZPbaU6">physical CPU vs logical CPU vs Core vs Thread vs Socket（翻译）&lt;/a>。&lt;/p>
&lt;p>对我们来说，只要知道可以&lt;code>DPDK&lt;/code>可以运行在多个&lt;code>lcore&lt;/code>上就足够了.&lt;/p>
&lt;p>&lt;code>DPDK&lt;/code> 如何知道有多少个&lt;code>lcore&lt;/code>呢 ? 在启动时解析文件系统中的特定文件就可以了, 参考函数&lt;code>eal_cpu_detected&lt;/code>&lt;/p>
&lt;h1 id="dpdk-工具">DPDK 工具&lt;a class="td-heading-self-link" href="#dpdk-%e5%b7%a5%e5%85%b7" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;a href="https://doc.dpdk.org/guides/tools/index.html">https://doc.dpdk.org/guides/tools/index.html&lt;/a>&lt;/p>
&lt;h2 id="dpdk-devbind---绑定和取消绑定设备与驱动程序检查他们的状态">dpdk-devbind - 绑定和取消绑定设备与驱动程序，检查他们的状态&lt;a class="td-heading-self-link" href="#dpdk-devbind---%e7%bb%91%e5%ae%9a%e5%92%8c%e5%8f%96%e6%b6%88%e7%bb%91%e5%ae%9a%e8%ae%be%e5%a4%87%e4%b8%8e%e9%a9%b1%e5%8a%a8%e7%a8%8b%e5%ba%8f%e6%a3%80%e6%9f%a5%e4%bb%96%e4%bb%ac%e7%9a%84%e7%8a%b6%e6%80%81" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>dpdk-devbind [OPTIONS] DEVICE1 DEVICE2 &amp;hellip;.&lt;/strong>&lt;/p>
&lt;p>&lt;strong>OPTIONS&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-s, &amp;ndash;status&lt;/strong> # 打印所有已知网络接口的当前状态。对于每个设备，它显示 PCI 域、总线、插槽和功能，以及设备的文本描述。根据设备是否由内核驱动程序、vfio-pci 驱动程序或无驱动程序使用，将显示其他相关信息： - Linux 接口名称，例如if=eth0 - 正在使用的驱动程序，例如drv=vfio-pci - 当前未使用该设备的任何合适的驱动程序，例如used=vfio-pci 注意：如果此标志与绑定/取消绑定选项一起传递，则状态显示将始终在其他操作发生后发生。&lt;/li>
&lt;li>&lt;strong>-b, &amp;ndash;bind DRIVER&lt;/strong> # 选择绑定网卡要使用的驱动程序。可以使用 none 以解除绑定&lt;/li>
&lt;li>&lt;strong>-u, &amp;ndash;unbind&lt;/strong> # 接触网卡设备绑定。等价于 &lt;code>-b none&lt;/code>&lt;/li>
&lt;li>&lt;strong>&amp;ndash;force&lt;/strong> # 强制绑定。默认情况下，若目标网卡已被内核启用（通常表现为已在路由表条目中），则无法被 DPDK 绑定。&lt;/li>
&lt;/ul>
&lt;p>EXAMPLE&lt;/p>
&lt;p>从当前驱动程序绑定 eth1 并转而使用 vfio-pci：&lt;/p>
&lt;ul>
&lt;li>&lt;code>dpdk-devbind --bind=vfio-pci eth1&lt;/code>&lt;/li>
&lt;/ul>
&lt;h1 id="dpdk-与-bpf-与-netfilter">DPDK 与 BPF 与 Netfilter&lt;a class="td-heading-self-link" href="#dpdk-%e4%b8%8e-bpf-%e4%b8%8e-netfilter" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>TODO&lt;/p></description></item><item><title>Docs: Networking device</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Networking-device/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Networking-device/</guid><description/></item><item><title>Docs: 同源同宿</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E5%90%8C%E6%BA%90%E5%90%8C%E5%AE%BF/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E5%90%8C%E6%BA%90%E5%90%8C%E5%AE%BF/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>同源同宿，找不到对应的英文。与 &lt;a href="docs/3.%E9%9B%86%E7%BE%A4%E4%B8%8E%E5%88%86%E5%B8%83%E5%BC%8F/Load%20balancing.md">Load balancing&lt;/a> 中的 &lt;strong>Session persistence(会话保持)&lt;/strong> 的技术类似。&lt;/p></description></item><item><title>Docs: bit( 比特 ) 和 Byte(字节) 的关系 以及 网速怎么算</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/bit-%E4%B8%8E-Byte-%E7%9A%84%E5%85%B3%E7%B3%BB%E4%BB%A5%E5%8F%8A%E7%BD%91%E9%80%9F%E6%80%8E%E4%B9%88%E7%AE%97/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/bit-%E4%B8%8E-Byte-%E7%9A%84%E5%85%B3%E7%B3%BB%E4%BB%A5%E5%8F%8A%E7%BD%91%E9%80%9F%E6%80%8E%E4%B9%88%E7%AE%97/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="bit比特">bit（比特）&lt;a class="td-heading-self-link" href="#bit%e6%af%94%e7%89%b9" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>bit 也就是我们不一定听说过的比特，大名鼎鼎的比特币就是以此命名的。它的简写为小写字母 “b” 。&lt;/p>
&lt;p>作为信息技术的最基本存储单元，因为比特实在太小了，所以大家生活中并不是经常听到。那么 bit 是什么呢？&lt;/p>
&lt;p>电脑是以二进制存储以及发送接收数据的。二进制的一位，就叫做 1 bit。也就是说 bit 的含义就是二进制数中的一个数位，即 “0” 或者 &amp;ldquo;1&amp;rdquo;。&lt;/p>
&lt;h2 id="byte字节">Byte（字节）&lt;a class="td-heading-self-link" href="#byte%e5%ad%97%e8%8a%82" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Byte 是字节的英文写法。它的简写为大写字母 “B&amp;quot;。&lt;/p>
&lt;p>既然名字叫字节，那肯定跟字符有关系。是的。英文字符通常是一个字节，也就是 1B，中文字符通常是两个字节，也就是 2B。&lt;/p>
&lt;p>字节 Byte 和比特 bit 的换算关系是 1 Byte = 8 bit 。&lt;/p>
&lt;h2 id="kib-千字节">KiB （千字节）&lt;a class="td-heading-self-link" href="#kib-%e5%8d%83%e5%ad%97%e8%8a%82" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>需要了解的是，1 KiB 并不是一千字节，因为计算机只认识二进制，所以在这里的 KiB，是 2 的 10 次方，也就是 1024 个字节。&lt;/p>
&lt;p>另外很多表示存储单位的地方都把 B 写成 b，造成了大家认知的混乱。其实在存储单位计量中出现 b 的地方，它的意思仍然是 B，不要因为 bit 的缩写是 b 就被误导了，在存储计量中是不会用 比特，千比特 这种单位的。但是在网速计量中，b 的真实意思就是指 比特 了，这个我们下面再说。&lt;/p>
&lt;h2 id="单位换算">单位换算&lt;a class="td-heading-self-link" href="#%e5%8d%95%e4%bd%8d%e6%8d%a2%e7%ae%97" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>存储单位换算关系如下&lt;/p>
&lt;ul>
&lt;li>1 Byte = 8 bit&lt;/li>
&lt;li>1 KiB= 1024 Bi&lt;/li>
&lt;li>1 MiB = 1024 KiB&lt;/li>
&lt;li>1 GiB = 1024 MiB&lt;/li>
&lt;li>1 TiB = 1024 GiB&lt;/li>
&lt;/ul>
&lt;h1 id="bit-和-byte">bit 和 Byte&lt;a class="td-heading-self-link" href="#bit-%e5%92%8c-byte" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>计算机内部的存储和运算都是通过 「 0，1 」 这两个数在二进制下完成的。&lt;/p>
&lt;p>其中每个 0 或 1 就是一个 &lt;strong>bit(位或比特)&lt;/strong>，bit 是信息的最小数据单位，并且 8 个 bit 刚好可以构成 1 个 &lt;strong>Byte(字节)&lt;/strong>。&lt;/p>
&lt;p>Byte 可以说是计算机中存储容量的基本单位。我们在属性里查看电脑的任何一个文件，占用空间的大小都是用多少字节来统计的。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/nb56i3/1616065436103-9aeaff35-7332-46ef-aaab-952a7a95f397.jpeg" alt="">&lt;/p>
&lt;p>但就像长度、重量和体积等其他单位一样，光是用一个 Byte 来衡量数据的大小肯定是不够的。&lt;/p>
&lt;p>因此在 bit 的单位后面还设有 Byte、KiB、MiB、GiB、TiB、PiB 等多个数据存储单位，各个单位之间遵循着一定的换算方式。&lt;/p>
&lt;p>如果世超没记错的话，自己当时在计算机课上学到的单位转换方式是这样的：&lt;/p>
&lt;p>1024（ 2 ^10 ) Byte = 1 KiB&lt;/p>
&lt;p>1024（ 2 ^10 ) KiB = 1 MiB&lt;/p>
&lt;p>1024（ 2 ^10 ) MiB = 1 GiB&lt;/p>
&lt;p>上面这种就是用计算机二进制的 10 次方，也就是以 1024 为进制的换算方式。&lt;/p>
&lt;p>差友们可能会觉得这个换算方式很对没错呀，挺贴合计算机的二进制系统的特点，另外，考试的时候不也是要求这么算的吗？&lt;/p>
&lt;p>但如果脱离计算机范畴，将它和生活中其他几个单位一比较，很多对电脑不了解的人来说，就很难理解 1024 这个换算数值是怎么来的了。&lt;/p>
&lt;p>毕竟像其他诸如 1A=1000mA、1kg=100g、1m=100cm 等生活中比较常见的单位，差不多都是拿十进制的几次方来作为换算方式。&lt;/p>
&lt;p>十进制的换算不仅更常见，直接拿整数一乘或者一除换算起来也会比 1024 方便很多，而且还更符合我们日常的生活习惯。&lt;/p>
&lt;p>所以，才有了下文的 &lt;a href="#muJb9">KB 与 KiB 的区别&lt;/a>&lt;/p>
&lt;h1 id="kb-与-kib-的区别">KB 与 KiB 的区别&lt;a class="td-heading-self-link" href="#kb-%e4%b8%8e-kib-%e7%9a%84%e5%8c%ba%e5%88%ab" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Byte">Wiki，Byte&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zh.wikipedia.org/wiki/%E5%8D%83%E5%AD%97%E8%8A%82">Wiki-zh，千字节&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>International System of Units(国际制度单位，简称 SI)&lt;/strong> 这种规范就是为了照顾到计算机外的行业，除了之前提到以 1024 的换算，还可以使用十进制来进行换算。这种制度其实很早很早就有了，比如距离单位(100cm=1m)、重量单位(1kg=1000g)、时间单位(1s=1000ms) 等等。&lt;/p>
&lt;p>&lt;strong>International Electrotechnical Commission(国际电工委员会，简称 IEC)&lt;/strong> 的规范中提到，用于二进制存储单位的标准命名建议在中间&amp;quot;加个 i&amp;quot;(其实是更改了命名)以示区分&lt;/p>
&lt;p>具体效果就如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>十进制前缀&lt;/th>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;th>二进制前缀&lt;/th>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>(SI)&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>(IEC 60027-2)&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>名字&lt;/td>
&lt;td>缩写&lt;/td>
&lt;td>次方&lt;/td>
&lt;td>名字&lt;/td>
&lt;td>缩写&lt;/td>
&lt;td>次方&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>KiloByte&lt;/td>
&lt;td>KB&lt;/td>
&lt;td>103&lt;/td>
&lt;td>KibiByte&lt;/td>
&lt;td>KiB&lt;/td>
&lt;td>$2^{10}$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>MegaByte&lt;/td>
&lt;td>MB&lt;/td>
&lt;td>106&lt;/td>
&lt;td>MebiByte&lt;/td>
&lt;td>MiB&lt;/td>
&lt;td>$2^{20}$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>GigaByte&lt;/td>
&lt;td>GB&lt;/td>
&lt;td>109&lt;/td>
&lt;td>GibiByte&lt;/td>
&lt;td>GiB&lt;/td>
&lt;td>$2^{30}$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>TeraByte&lt;/td>
&lt;td>TB&lt;/td>
&lt;td>1012&lt;/td>
&lt;td>TebiByte&lt;/td>
&lt;td>TiB&lt;/td>
&lt;td>$2^{40}$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Petabyte&lt;/td>
&lt;td>PB&lt;/td>
&lt;td>1015&lt;/td>
&lt;td>PebiByte&lt;/td>
&lt;td>PiB&lt;/td>
&lt;td>$2^{50}$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Exabyte&lt;/td>
&lt;td>EB&lt;/td>
&lt;td>1018&lt;/td>
&lt;td>ExbiByte&lt;/td>
&lt;td>EiB&lt;/td>
&lt;td>$2^{60}$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ZettaByte&lt;/td>
&lt;td>ZB&lt;/td>
&lt;td>1021&lt;/td>
&lt;td>ZebiByte&lt;/td>
&lt;td>ZiB&lt;/td>
&lt;td>$2^{70}$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>YottaByte&lt;/td>
&lt;td>YB&lt;/td>
&lt;td>1024&lt;/td>
&lt;td>YobiByte&lt;/td>
&lt;td>YiB&lt;/td>
&lt;td>$2^{80}$&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;blockquote>
&lt;p>表里没有 Byte 与 bit，是因为这两种在名字写法上是一模一样的~&lt;/p>
&lt;/blockquote>
&lt;p>1998 年 12 月，IEC 通过创建前缀(例如 Kibi、Mebi、Gibi 等) 来明确表明 1024 的力量。因此 KibiByte 象征着 KiB(表示为：2^10 bytes = 1024 bytes)。这些前缀现在是&lt;strong>International System of Quantities(国际数量体系，简称 ISQ)&lt;/strong> 的一部分。IEC 进一步规定，KiloByte 只能用于表示 1000 个 bytes&lt;/p>
&lt;blockquote>
&lt;p>1 个字符=1 个 Byte，1 个汉字=2 个 Byte
ASCII 码：1 个英文字母（不分大小写）占一个字节的空间。一个二进制数字序列，在计算机中作为一个数字单元，一般为 8 位二进制数，换算为十进制。最小值-128，最大值 127。如一个 ASCII 码就是一个字节。
UTF-8 编码：一个英文字符等于一个字节，一个中文（含繁体）等于三个字节。中文标点占三个字节，英文标点占一个字节。
Unicode 编码：一个英文等于两个字节，一个中文（含繁体）等于两个字节。中文标点占两个字节，英文标点占两个字节。&lt;/p>
&lt;/blockquote>
&lt;p>但在很长的一段时间里，不同领域仍然存在着两种换算方式混用的现象。这就导致存在了很多的误会产生&lt;/p>
&lt;h2 id="硬盘容量的误区">硬盘容量的误区&lt;a class="td-heading-self-link" href="#%e7%a1%ac%e7%9b%98%e5%ae%b9%e9%87%8f%e7%9a%84%e8%af%af%e5%8c%ba" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>最典型的一个例子就是硬盘厂商：它们标容量时遵照的就是 1000 进位而不是 1024 进位&lt;/p>
&lt;p>同样是 500GB 的硬盘，如果按照 1024 换算，需要 500&lt;em>1024MB 的空间，但以 1000 换算，只需要 500&lt;/em>1000MB 的空间，整整少了 12000MB，也就是 12GB 左右。但操作系统里读取硬盘时，则是按照 1024 进位的，所以你拿到手的硬盘在电脑上显示会比厂商标示的要少。显而易见的，硬盘的容量越大厂商们省的越多，但谁叫它就是有这么一个换算规范，你也不好说它是在偷工减料。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/nb56i3/1616065436150-0d382d4c-3a76-473f-b846-c04d27814ddc.jpeg" alt="">&lt;/p>
&lt;p>另外，如果差友同时拥有 Mac 和 Win 电脑，可能还会发现在两台电脑之间转移文件时，同个文件在两台电脑上显示的大小是不同的。&lt;/p>
&lt;p>这也是不同的系统采用了不同进制规范的缘故。&lt;/p>
&lt;h2 id="网速的误区">网速的误区&lt;a class="td-heading-self-link" href="#%e7%bd%91%e9%80%9f%e7%9a%84%e8%af%af%e5%8c%ba" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>至于运营商在宽带办理中宣传的 100M、1000M 实际使用时却没有那么快的网速，纯粹就是具体单位没有标清楚从而造成的误会。&lt;/p>
&lt;p>100M 宽带里的 M 是 Mbps，而 100M/s 下载速度里的 M 是 MBps，摆在一起差友们就很容易发现它们的区别：&lt;/p>
&lt;p>一个是小写 b，一个是大写 B。&lt;/p>
&lt;p>前面 Mbps 是兆比特每秒，指的是每秒传输的位数量；MBps 则是兆字节每秒，指的是指每秒传输的字节数量。&lt;/p>
&lt;p>别小看了这个 b，就因为存在着大小写的区别，两者之间就有了 8 倍的转换关系（ 8bit = 1B ），这样一来，100 Mbps 的宽带，满打满算下载速度也只有 100/8 Mbps= 12.5M/s。&lt;/p></description></item><item><title>Docs: DNS</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/DNS/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/DNS/</guid><description/></item><item><title>Docs: NAT</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/NAT/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/NAT/</guid><description/></item><item><title>Docs: SDN(软件定义网路)</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/SDN%E8%BD%AF%E4%BB%B6%E5%AE%9A%E4%B9%89%E7%BD%91%E8%B7%AF/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/SDN%E8%BD%AF%E4%BB%B6%E5%AE%9A%E4%B9%89%E7%BD%91%E8%B7%AF/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Software-defined_networking">Wiki，Software-defined networking&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Software Defined Networking(软件定义网络，简称 SDN)&lt;/strong> 技术是一种&lt;a href="https://en.wikipedia.org/wiki/Network_management">网络管理&lt;/a>方法，它支持动态的、以编程方式高效的网络配置，以提高网络性能和监控，使其更像&lt;a href="https://en.wikipedia.org/wiki/Cloud_computing">云计算，而&lt;/a>不是传统的网络管理。&lt;a href="https://en.wikipedia.org/wiki/Software-defined_networking#cite_note-ReferenceA-1">[1]&lt;/a> SDN 旨在解决传统网络的静态架构分散且复杂的事实，而当前网络需要更多的灵活性和易于故障排除。SDN 试图通过将&lt;a href="https://en.wikipedia.org/wiki/Network_packet">网络数据包&lt;/a>的转发过程（数据平面）与路由过程（控制平面）分离，将网络智能集中在一个网络组件中。&lt;a href="https://en.wikipedia.org/wiki/Software-defined_networking#cite_note-2">[2]&lt;/a>该&lt;a href="https://en.wikipedia.org/wiki/Control_plane">控制平面&lt;/a>由一个或多个控制器组成，这些控制器被认为是包含整个智能的 SDN 网络的大脑。然而，智能中心化在安全性、&lt;a href="https://en.wikipedia.org/wiki/Software-defined_networking#cite_note-ReferenceA-1">[1]&lt;/a>可扩展性和弹性&lt;a href="https://en.wikipedia.org/wiki/Software-defined_networking#cite_note-ReferenceA-1">[1]&lt;/a>方面有其自身的缺点，这是 SDN 的主要问题。&lt;/p>
&lt;p>自&lt;a href="https://en.wikipedia.org/wiki/OpenFlow">OpenFlow&lt;/a>协议于 2011 年出现以来，SDN 通常与&lt;a href="https://en.wikipedia.org/wiki/OpenFlow">OpenFlow&lt;/a>协议（用于与网络平面元素进行远程通信，以确定&lt;a href="https://en.wikipedia.org/wiki/Network_packet">网络数据包&lt;/a>通过&lt;a href="https://en.wikipedia.org/wiki/Network_switch">网络交换机&lt;/a>的路径）相关联。然而，自 2012 年&lt;a href="https://en.wikipedia.org/wiki/Software-defined_networking#cite_note-TechTarget:_SDN_is_not_OpenFlow-3">[3] &lt;/a>&lt;a href="https://en.wikipedia.org/wiki/Software-defined_networking#cite_note-TechTarget:_OpenFlow_not_the_only_show_in_town-4">[4]&lt;/a> OpenFlow 对于许多公司不再是独家解决方案，他们增加了专有技术。其中包括&lt;a href="https://en.wikipedia.org/wiki/Cisco_Systems">Cisco Systems&lt;/a>的开放网络环境和&lt;a href="https://en.wikipedia.org/wiki/Nicira">Nicira&lt;/a>的&lt;a href="https://en.wikipedia.org/wiki/Network_virtualization_platform">网络虚拟化平台&lt;/a>。
&lt;a href="https://en.wikipedia.org/wiki/SD-WAN">SD-WAN&lt;/a>将类似技术应用于&lt;a href="https://en.wikipedia.org/wiki/Wide_area_network">广域网&lt;/a>(WAN)。&lt;a href="https://en.wikipedia.org/wiki/Software-defined_networking#cite_note-5">[5]&lt;/a>&lt;/p>
&lt;p>SDN 技术目前可用于需要极快故障转移的工业控制应用，称为操作技术 (OT) 软件定义网络 (SDN)。OT SDN 技术是一种在关键基础设施网络的环境强化硬件上管理网络访问控制和以太网数据包交付的方法。OT SDN 将控制平面的管理从集中在流控制器中的交换机抽象出来，并将 SDN 应用为交换机中的底层控制平面。去除了传统控制平面，简化了交换机，同时集中控制平面管理。OT SDN 中使用的通用控制平面标准是 OpenFlow，使其可与其他 SDN 解决方案互操作，不同之处在于 OpenFlow 是交换机中唯一的控制平面，并且交换机在电源循环期间保留流量，并且所有流量和冗余都经过主动流量工程设计因此交换机可以执行转发，它们被配置为在有或没有在线流量控制器的情况下执行。OT SDN 在性能、网络安全和态势感知方面为工业网络提供了优势。性能优势是通过使用 OpenFlow 中的快速故障转移组的主动流量工程意外事件实现的，从而在微秒内从链路或交换机故障中恢复网络，而不是像生成树技术那样的毫秒级。另一个性能优势是环路缓解是通过流量工程路径规划完成的，而不是阻塞端口，允许系统所有者主动使用所有端口。OT SDN 的网络安全优势在于交换机默认拒绝，流是允许流量转发的规则。这提供了强大的网络访问控制，可以在每一跳从 OSI 模型的第 1 层到第 4 层检查数据包。由于旧控制平面不再存在，因此移除了旧控制平面安全漏洞。MAC 表欺骗和 BPDU 欺骗不再可能，因为两者都不存在于 OT SDN 交换机中。旋转和网络侦察不再适用于适当的流编程，因为仅允许转发结合物理位置和路径与虚拟数据包过滤的流量。OT SDN 的态势感知优势使网络所有者能够了解其网络上有哪些设备，哪些对话可以和正在发生，以及这些对话可以在谁之间发生。OT SDN 网络技术允许以太网满足关键基础设施测量和控制的苛刻通信消息交换要求，并简单地为系统所有者提供对哪些设备可以连接到网络、这些设备可以连接到哪里以及每个设备可以进行哪些对话的控制有。OT SDN 的态势感知优势使网络所有者能够了解其网络上有哪些设备，哪些对话可以和正在发生，以及这些对话可以在谁之间发生。OT SDN 网络技术允许以太网满足关键基础设施测量和控制的苛刻通信消息交换要求，并简单地为系统所有者提供对哪些设备可以连接到网络、这些设备可以连接到哪里以及每个设备可以进行哪些对话的控制有。OT SDN 的态势感知优势使网络所有者能够了解其网络上有哪些设备，哪些对话可以和正在发生，以及这些对话可以在谁之间发生。OT SDN 网络技术允许以太网满足关键基础设施测量和控制的苛刻通信消息交换要求，并简单地为系统所有者提供对哪些设备可以连接到网络、这些设备可以连接到哪里以及每个设备可以进行哪些对话的控制有。&lt;/p>
&lt;p>SDN 的研究仍在继续，因为许多&lt;a href="https://en.wikipedia.org/wiki/Emulator">仿真器&lt;/a>正在开发用于研究目的，例如 vSDNEmul、&lt;a href="https://en.wikipedia.org/wiki/Software-defined_networking#cite_note-6">[6]&lt;/a> EstiNet、&lt;a href="https://en.wikipedia.org/wiki/Software-defined_networking#cite_note-7">[7]&lt;/a> Mininet &lt;a href="https://en.wikipedia.org/wiki/Software-defined_networking#cite_note-8">[8]&lt;/a>等。&lt;/p></description></item><item><title>Docs: 数据通信</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/</guid><description/></item><item><title>Docs: 通信协议</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/</guid><description/></item><item><title>Docs: 信息论</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E4%BF%A1%E6%81%AF%E8%AE%BA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E4%BF%A1%E6%81%AF%E8%AE%BA/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.bilibili.com/video/BV1fq4y1g7hq">B 站，信道容量、香农极限、极化码&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Information_theory">Wiki，Information Theory(信息论)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Polar_code_(coding_theory)">Wiki，Polar Code(极化码)&lt;/a>&lt;/li>
&lt;li>capacity-achieving&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>信息熵&lt;/strong> # 一个答案的最少提问次数&lt;/p>
&lt;p>&lt;strong>信道容量&lt;/strong> # 单位时间内能传输的信息量&lt;/p></description></item></channel></rss>