<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦的站点 – Secure Shell(SSH) 安全外壳协议</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Utility/OpenSSH/</link><description>Recent content in Secure Shell(SSH) 安全外壳协议 on 断念梦的站点</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Utility/OpenSSH/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: OpenSSH</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Utility/OpenSSH/OpenSSH/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Utility/OpenSSH/OpenSSH/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.openssh.com/">官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.openssh.com/manual.html">官方文档，Manual(手册)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>OpenSSH 是 &lt;a href="https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/Secure%20Shell%20Protocol.md">Secure Shell Protocol&lt;/a> 的开源实现方案，该工具为 C/S 架构，服务端默认监听在 22/tcp 端口上。如果想要连接到服务端，同样需要一个客户端来进行连接。&lt;/p>
&lt;p>比如，现在有两台主机，主机 A 和主机 B，如果想要在 B 上可以操作 A，那么就需要在 A 机上安装服务端工具(openssh-server)，在 B 机上安装客户端工具(openssh-client)，然后通过 ssh 工具进行互联&lt;/p>
&lt;p>Note：现在 OpenSSH 一般作为 Linux 发行版的标准远程登录工具默认安装在系统中且开机自启动。&lt;/p>
&lt;h1 id="安装-openssh">安装 OpenSSH&lt;a class="td-heading-self-link" href="#%e5%ae%89%e8%a3%85-openssh" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h1 id="关联文件与配置">关联文件与配置&lt;a class="td-heading-self-link" href="#%e5%85%b3%e8%81%94%e6%96%87%e4%bb%b6%e4%b8%8e%e9%85%8d%e7%bd%ae" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;strong>/var/log/secure&lt;/strong> # 登录信息日志所在位置&lt;/p>
&lt;ul>
&lt;li>可以通过该日志获取到尝试暴力破解的 IP&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>/etc/ssh/ssh_config&lt;/strong> # OpenSSH 的 client 端配置(ssh、scp 等程序)&lt;/p>
&lt;p>&lt;strong>/etc/ssh/sshd_config&lt;/strong> # OpenSSH 的 server 端配置(sshd 程序)&lt;/p>
&lt;p>&lt;strong>~/.ssh/know_hosts&lt;/strong> # 已知的曾经连接过的主机的信息。凡是使用 ssh 连接过该主机，都会将信息记录在其中&lt;/p>
&lt;p>&lt;strong>~/.ssh/authorized_keys&lt;/strong> # 已经认证的公钥。如果其他 client 想要连接服务端，凡是在该文件中的公钥，都可以免密连接。&lt;/p>
&lt;ul>
&lt;li>注意：OpenSSH 使用非对称加密的方式，与传统互联网的 https 使用方式相反。https 的公钥是交给客户端，用来验证服务端返回的网页是否可信。而 OpenSSH 则是将公钥交给服务端，用来验证客户端发送的信息是否可信。&lt;/li>
&lt;li>这也确实符合逻辑
&lt;ul>
&lt;li>ssh 是一个客户端需要登录多个服务端，服务端要验证客户端发送的信息的真实性，要是不验证，那么就可以随便在自己服务器上执行命令了，这是不对的~&lt;/li>
&lt;li>而互联网通过 https 访问，则是多个客户端对应一个服务端。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>~/.ssh/config&lt;/strong> # OpenSSH 的 client 端配置，该配置文件主要针对不同用户来使用，默认不存在，需要手动创建。&lt;/p>
&lt;p>在客户端添加如下配置内容，就可以通过名字，而不是 IP 来 ssh 登录目标主机了，还不用改 hosts 文件，也不用配置域名解析&lt;/p>
&lt;p>Host centos8 User root Hostname 10.10.100.249 # 效果如下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># ssh centos8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root@10.10.100.249&lt;span style="color:#a40000">&amp;#39;&lt;/span>s password:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Last login: Fri Jul &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span> 22:56:38 &lt;span style="color:#0000cf;font-weight:bold">2020&lt;/span> from 10.10.100.200
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>工作环境一般配置&lt;/p>
&lt;ul>
&lt;li>不要使用默认端口&lt;/li>
&lt;li>禁止使用 protocaol version 1&lt;/li>
&lt;li>限制可登录用户&lt;/li>
&lt;li>设定空闲会话超时时长&lt;/li>
&lt;li>利用防火墙设置 ssh 访问策略&lt;/li>
&lt;li>仅监听特定的 IP 地址&lt;/li>
&lt;li>基于口令认证时，使用强密码策略
&lt;ul>
&lt;li>&lt;code>tr -dc A-Za-z0-9_ &amp;lt; /dev/urandom | head -c 30 | xargs&lt;/code> # 生成 30 位随机字符串&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>禁止使用空密码&lt;/li>
&lt;li>禁止 root 用户直接登录&lt;/li>
&lt;li>限制 ssh 的访问频度和并发(即同时)在线数&lt;/li>
&lt;li>做好日志&lt;/li>
&lt;/ul>
&lt;h1 id="openssh-优化">OpenSSH 优化&lt;a class="td-heading-self-link" href="#openssh-%e4%bc%98%e5%8c%96" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;ul>
&lt;li>提高 ssh 连接速度
&lt;ul>
&lt;li>修改 sshd_config 文件中 useDNS 为 no&lt;/li>
&lt;li>修改 ssh_config 文件中 GSSAPIAuthentication 为 no&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="问题实例">问题实例&lt;a class="td-heading-self-link" href="#%e9%97%ae%e9%a2%98%e5%ae%9e%e4%be%8b" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="使用-xshell-多次-ssh-跳转连接后-x11-无法转发">使用 Xshell 多次 ssh 跳转连接后 x11 无法转发&lt;a class="td-heading-self-link" href="#%e4%bd%bf%e7%94%a8-xshell-%e5%a4%9a%e6%ac%a1-ssh-%e8%b7%b3%e8%bd%ac%e8%bf%9e%e6%8e%a5%e5%90%8e-x11-%e6%97%a0%e6%b3%95%e8%bd%ac%e5%8f%91" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://serverfault.com/a/425413">https://serverfault.com/a/425413&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>问题描述：&lt;/p>
&lt;p>在 windows 上使用 xshell 连接到主机 A，再通过主机 A 连接到主机 B。在主机 B 上打开 x11 程序失败。(x11 程序必须 virt-manager、xclock 等具有图形化的程序)&lt;/p>
&lt;blockquote>
&lt;p>Note：如果使用 xshell 直接连接主机 B 则无此问题。&lt;/p>
&lt;/blockquote>
&lt;p>问题原因：&lt;/p>
&lt;p>缺少 x11 认证程序&lt;/p>
&lt;p>解决方式：&lt;/p>
&lt;p>安装程序包 yum install -y xorg-x11-xauth&lt;/p>
&lt;p>xorg-x11-xaut 软件包安装完成后退出当前 shell 重新登录，即可自动配置$DISPLAY 环境变量的值为 localhost:10.0&lt;/p>
&lt;p>由于现阶段 sshd_config 文件中已经默认开启 X11 转发( i.e. X11Forwarding yes )，所以 X11 转发的相关配置已不用修改&lt;/p>
&lt;p>最后在使用 ssh 登录的时候加上-Y 选项，i.e. ssh -Y root@主机 B 的 IP，然后 x11 的转发效果就实现了。&lt;/p>
&lt;p>&lt;a href="https://serverfault.com/a/425413">https://serverfault.com/a/425413&lt;/a>&lt;/p></description></item><item><title>Docs: OpenSSH 配置</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Utility/OpenSSH/OpenSSH-%E9%85%8D%E7%BD%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Utility/OpenSSH/OpenSSH-%E9%85%8D%E7%BD%AE/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://man.openbsd.org/sshd_config">官方文档，手册 - sshd_config&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://man.openbsd.org/ssh_config">官方文档，手册 - ssh_config&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="sshd_config-文件">sshd_config 文件&lt;a class="td-heading-self-link" href="#sshd_config-%e6%96%87%e4%bb%b6" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;strong>Port NUM&lt;/strong> # 设定 sshd 服务监听的端口号&lt;/p>
&lt;p>&lt;strong>ListenAddress &amp;lt;IP&amp;gt;&lt;/strong> # 设定 sshd 服务监听的 IP 地址(全 0 为所有 IP)&lt;/p>
&lt;p>&lt;strong>PermitRootLogin &amp;lt;yes|no&amp;gt;&lt;/strong> # 设定是否允许 root 用户通过 ssh 直接登录&lt;/p>
&lt;p>&lt;strong>AllowUsers &lt;User1 User2 User3.......>&lt;/strong> # 设定允许通过 ssh 登录的用户 User1,2,3 等等&lt;/p>
&lt;p>&lt;strong>AllowGroups &lt;Group1 Group2.........>&lt;/strong> # 设定允许通过 ssh 登录的组 Group1,2,3,等等等&lt;/p>
&lt;p>&lt;strong>UseDNS&lt;/strong>(BOOLEAN) # 指定登陆时是否进行 DNS 解析&lt;/p>
&lt;p>&lt;a href="https://man.openbsd.org/sshd_config#KbdInteractiveAuthentication">KbdInteractiveAuthentication&lt;/a> #&lt;/p>
&lt;blockquote>
&lt;p>注意：该关键字是已经被启用的 ChallengeResponseAuthentication 关键字的替代品&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>PermitTunnel&lt;/strong>(STRING) # 指定是否允许 tun 设备转发。可用的值有 yes、point-to-point、ethernet、no。&lt;code>默认值: no&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://man.openbsd.org/sshd_config#PermitTunnel">https://man.openbsd.org/sshd_config#PermitTunnel&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>GatewayPorts&lt;/strong> # 指定是否允许远程主机连接到为客户端转发的端口。&lt;/p>
&lt;h1 id="ssh_config-文件">ssh_config 文件&lt;a class="td-heading-self-link" href="#ssh_config-%e6%96%87%e4%bb%b6" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>[!Notes]
该配置文件中的配置信息，可以通过 ssh 命令的 -o 选项来覆盖配置文件中关键字的值&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>Tunnel&lt;/strong> # 启用隧道功能后, 客户端创建的 tun 设备的类型. 默认为 point-to-point. 该配置的功能与 sshd_config 中的 PermitTunnel 配置一样, 用来指定隧道功能下的 tun/tap 网络设备的类型.&lt;/p>
&lt;p>&lt;strong>TunnelDevice LOCAL_TUN[:REMOTE_TUN]&lt;/strong> # 与 ssh 的 -w 选项功能一致.&lt;/p>
&lt;p>&lt;strong>StrictHostKeyChecking&lt;/strong>&lt;/p>
&lt;p>If this flag is set to ’’accept-new’’ then ssh will automatically add new host keys to the user known hosts files, but will not permit connections to hosts with changed host keys. If this flag is set to ’’no’’ or ’’off’’, ssh will automatically add new host keys to the user known hosts files and allow connections to hosts with changed hostkeys to proceed, subject to some restrictions. If this flag is set to &lt;strong>ask&lt;/strong> (the default), new host keys will be added to the user known host files only after the user has confirmed that is what they really want to do, and ssh will refuse to connect to hosts whose host key has changed. The host keys of known hosts will be verified automatically in all cases.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>yes&lt;/strong> # 则 ssh(1) 将永远不会自动将主机密钥添加到 _~/.ssh/known_hosts _文件中，并且拒绝连接主机密钥已更改的主机。尽管当 _/etc/ssh/ssh_known_hosts _文件维护不当或经常与新主机建立连接时可能很烦人，但这可以最大程度地防止中间人（MITM）攻击。此选项强制用户手动添加所有新主机。&lt;/li>
&lt;li>&lt;strong>accept-new&lt;/strong> # 那么 ssh 会自动将新的主机密钥添加到用户已知的主机文件中，但不允许使用更改的主机密钥连接到主机。&lt;/li>
&lt;li>&lt;strong>no&lt;/strong> 或 &lt;strong>off&lt;/strong> # 则 ssh 会自动将新的主机密钥添加到用户已知的主机文件中，并允许在更改主机密钥的情况下继续进行主机连接。&lt;/li>
&lt;li>&lt;strong>ask(默认值)&lt;/strong> # 则只有在用户确认他们确实要这样做之后，新的主机密钥才会添加到用户已知的主机文件中，并且 ssh 将拒绝连接到其主机密钥的主机已经改变。在所有情况下，都会自动验证已知主机的主机密钥。&lt;/li>
&lt;/ul>
&lt;p>效果如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 严格检查，默认值 ask&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># ssh 172.19.42.248&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>The authenticity of host &lt;span style="color:#4e9a06">&amp;#39;172.19.42.248 (172.19.42.248)&amp;#39;&lt;/span> can&lt;span style="color:#4e9a06">&amp;#39;t be established.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">ECDSA key fingerprint is SHA256:dugyXVC21RvaDTtRp/cBTsqr0MPtjhBJmtjmzZTXljo.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">Are you sure you want to continue connecting (yes/no/[fingerprint])? ^C
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"># 不严格检查，改为 no
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">root@desistdaydream:~# ssh -o &amp;#39;&lt;/span>&lt;span style="color:#000">StrictHostKeyChecking&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>no&lt;span style="color:#4e9a06">&amp;#39; 172.19.42.248
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">Warning: Permanently added &amp;#39;&lt;/span>172.19.42.248&lt;span style="color:#4e9a06">&amp;#39; (ECDSA) to the list of known hosts.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">root@172.19.42.248&amp;#39;&lt;/span>s password:
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: OpenSSH Utilities</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Utility/OpenSSH/OpenSSH-Utilities/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Utility/OpenSSH/OpenSSH-Utilities/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://www.openssh.com/manual.html">官方 Manual(手册)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.myfreax.com/how-to-setup-ssh-tunneling/">https://www.myfreax.com/how-to-setup-ssh-tunneling/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hellolzc.github.io/2020/04/port-forwarding-with-ssh/">https://hellolzc.github.io/2020/04/port-forwarding-with-ssh/&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://tuxgraphics.org/~guido/scripts/ssh-socks5-port-forwarding.html">http://tuxgraphics.org/~guido/scripts/ssh-socks5-port-forwarding.html&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;ul>
&lt;li>ssh、scp、sftp # 客户端管理工具&lt;/li>
&lt;li>ssh-add、ssh-keysign、ssh-keyscan、ssh-keygen # 密钥管理工具&lt;/li>
&lt;li>sshd、sftp-server、ssh-agent # 服务端管理工具&lt;/li>
&lt;/ul>
&lt;h1 id="ssh---openssh-的-ssh-客户端工具远程登录程序">ssh - OpenSSH 的 ssh 客户端工具(远程登录程序)&lt;a class="td-heading-self-link" href="#ssh---openssh-%e7%9a%84-ssh-%e5%ae%a2%e6%88%b7%e7%ab%af%e5%b7%a5%e5%85%b7%e8%bf%9c%e7%a8%8b%e7%99%bb%e5%bd%95%e7%a8%8b%e5%ba%8f" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>详见 &lt;a href="https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Utility/OpenSSH/ssh.md">ssh&lt;/a>&lt;/p>
&lt;h1 id="scp---基于-ssh-协议的文件传输工具">scp - 基于 ssh 协议的文件传输工具&lt;a class="td-heading-self-link" href="#scp---%e5%9f%ba%e4%ba%8e-ssh-%e5%8d%8f%e8%ae%ae%e7%9a%84%e6%96%87%e4%bb%b6%e4%bc%a0%e8%be%93%e5%b7%a5%e5%85%b7" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>scp 是基于 SSH 的 &lt;a href="https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/File%20transfer/File%20transfer.md">File transfer&lt;/a> 工具&lt;/p>
&lt;h2 id="syntax语法">Syntax(语法)&lt;a class="td-heading-self-link" href="#syntax%e8%af%ad%e6%b3%95" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>scp [OPTIONS] SourceFILE DestinationFILE&lt;/strong>&lt;/p>
&lt;p>Note：远程 FILE 的格式为：USER@IP:/PATH/FILE)&lt;/p>
&lt;p>OPTIONS：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-p&lt;/strong> #&lt;/li>
&lt;li>&lt;strong>-r&lt;/strong> # 以递归方式复制，用于复制整个目录&lt;/li>
&lt;/ul>
&lt;h2 id="example">EXAMPLE&lt;a class="td-heading-self-link" href="#example" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>把本地 nginx 文件推上去复制到以 root 用户登录的 10.10.10.10 这台机器的/opt/soft/scptest 目录下&lt;/p>
&lt;ul>
&lt;li>scp /opt/soft/nginx-0.5.38.tar.gz &lt;a href="mailto:root@10.10.10.10">root@10.10.10.10&lt;/a>:/opt/soft/scptest&lt;/li>
&lt;/ul>
&lt;p>把以 root 用户登录的 10.10.10.10 机器中的 nginx 文件拉下来复制到本地/opt/soft 目录下&lt;/p>
&lt;ul>
&lt;li>scp &lt;a href="mailto:root@10.10.10.10">root@10.10.10.10&lt;/a>:/opt/soft/nginx-0.5.38.tar.gz /opt/soft/&lt;/li>
&lt;/ul>
&lt;p>基于密钥的认证,当对方主机 ssh 登录的用户的家目录存在公钥，并且公钥设置密码为空，那么以后 ssh 协议登录传输都可以直接登录而不用密码&lt;/p>
&lt;h1 id="ssh-keygen---在客户端生成密钥对">ssh-keygen - 在客户端生成密钥对&lt;a class="td-heading-self-link" href="#ssh-keygen---%e5%9c%a8%e5%ae%a2%e6%88%b7%e7%ab%af%e7%94%9f%e6%88%90%e5%af%86%e9%92%a5%e5%af%b9" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;strong>ssh-keygen -t rsa [-P &amp;lsquo;&amp;rsquo;] [-f ~/.ssh/id_rsa]&lt;/strong>&lt;/p>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>ssh-keygen -t rsa -P &amp;rsquo;&amp;rsquo; -f ~/.ssh/id_rsa&lt;/li>
&lt;/ul>
&lt;h1 id="ssh-copy-id---把生成的公钥传输至远程服务器对应用户的家目录">ssh-copy-id - 把生成的公钥传输至远程服务器对应用户的家目录&lt;a class="td-heading-self-link" href="#ssh-copy-id---%e6%8a%8a%e7%94%9f%e6%88%90%e7%9a%84%e5%85%ac%e9%92%a5%e4%bc%a0%e8%be%93%e8%87%b3%e8%bf%9c%e7%a8%8b%e6%9c%8d%e5%8a%a1%e5%99%a8%e5%af%b9%e5%ba%94%e7%94%a8%e6%88%b7%e7%9a%84%e5%ae%b6%e7%9b%ae%e5%bd%95" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;strong>ssh-copy-id [-i [Identity_File]] [User@]HostIP&lt;/strong>&lt;/p>
&lt;p>Identity_File(身份文件) # 一般为 /root/.ssh/id_rsa.pub&lt;/p>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>将公钥拷贝到服务端
&lt;ul>
&lt;li>ssh-copy-id -i /root/.ssh/id_rsa.pub &lt;a href="mailto:root@192.168.0.10">root@192.168.0.10&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>若没有 ssh-copy-id 命令，则可以这么这么弄
&lt;ul>
&lt;li>cat ~/.ssh/id_rsa.pub | ssh &lt;a href="mailto:root@192.168.0.10">root@192.168.0.10&lt;/a> &amp;lsquo;cat &amp;raquo; .ssh/authorized_keys&amp;rsquo;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: ssh</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Utility/OpenSSH/ssh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Utility/OpenSSH/ssh/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://man.openbsd.org/ssh">Manual(手册), ssh(1)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://man.openbsd.org/ssh_config">Manual(手册), ssh_config(5)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="syntax语法">Syntax(语法)&lt;a class="td-heading-self-link" href="#syntax%e8%af%ad%e6%b3%95" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;strong>ssh [OPTIONS] [User@] HostIP [COMMAND]&lt;/strong>&lt;/p>
&lt;h2 id="options">OPTIONS&lt;a class="td-heading-self-link" href="#options" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>-C&lt;/strong> # 请求压缩所有数据(包括 stdin、stdout、stderr、X11 转发的数据、TCP 和 UNIX-domain 连接)&lt;/li>
&lt;li>&lt;strong>-i &amp;lt;/PATH/FILE&amp;gt;&lt;/strong> # 使用指定的私钥文件来进行登录认证&lt;/li>
&lt;li>&lt;strong>-J &amp;lt;DEST[,DEST2,&amp;hellip;]&amp;gt;&lt;/strong> # 首先与 DEST 建立 ssh 连接，并通过 DEST 跳转到最终目标主机。如果需要多次跳转。可以指定多个 DEST 并以逗号分割。
&lt;ul>
&lt;li>DEST 格式为：&lt;code>[USER@]HOST[:PORT]&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>-o &amp;lt;KEY=VALUE&amp;gt;&lt;/strong> # 以命令行的方式配置本应该在 &lt;a href="https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Utility/OpenSSH/OpenSSH%20%E9%85%8D%E7%BD%AE.md">OpenSSH 配置&lt;/a> - ssh_config 文件中的内容。KEY 是 ssh_config 配置文件中的关键字。&lt;/li>
&lt;li>&lt;strong>-p &amp;lt;PORT&amp;gt;&lt;/strong> # 指定 HostIP 所在远程服务器监听的端口&lt;/li>
&lt;li>&lt;strong>-T&lt;/strong> # 不要分配一个伪终端&lt;/li>
&lt;li>&lt;strong>-W&lt;/strong> # 请求将客户端上的标准输入和输出通过安全通道转发到端口上的主机。 表示 -N，-T，ExitOnForwardFailure 和 ClearAllForwardings，尽管可以在配置文件中或使用 -o 命令行选项覆盖它们。&lt;/li>
&lt;li>&lt;strong>-X&lt;/strong> # 启用 X11 转发&lt;/li>
&lt;li>&lt;strong>-Y&lt;/strong> # 启用受信任的 X11 转发。 受信任的 X11 转发不受 X11 SECURITY 扩展控件的约束。&lt;/li>
&lt;/ul>
&lt;h3 id="隧道选项">隧道选项&lt;a class="td-heading-self-link" href="#%e9%9a%a7%e9%81%93%e9%80%89%e9%a1%b9" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>&lt;strong>-w LOCAL_TUN[:REMOTE_TUN]&lt;/strong> # 在客户端与服务端建立互相连接的 tun 设备. tun 设备的默认模式为 &lt;strong>point-to-point&lt;/strong>.&lt;/p>
&lt;ul>
&lt;li>LOCAL_TUN 和 REMOTE_TUN 可以是 数字 或者 any 关键字. e.g. &lt;code>-w 0:0&lt;/code> 则会创建名为 tun0 的设备&lt;/li>
&lt;li>Notes:
&lt;ul>
&lt;li>必须使用具有创建网络设备权限的用户执行 ssh 命令, 比如 root 用户.&lt;/li>
&lt;li>必须保证 &lt;a href="https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Utility/OpenSSH/OpenSSH%20%E9%85%8D%E7%BD%AE.md">OpenSSH 配置&lt;/a> 中 sshd_config 文件中的 PermitTunnel 的值不为 no, 才能保证在两端创建 tun 设备, 并让 tun 设备互联.&lt;/li>
&lt;li>可以通过 ssh_config 中的 Tunnel 指令改变 tun 设备的类型. e.g. &lt;code>ssh -p 20022 -o &amp;quot;Tunnel=ethernet&amp;quot; -w 0:0 root@1.1.1.1&lt;/code> 将会创建 tap 设备&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="端口转发选项">端口转发选项&lt;a class="td-heading-self-link" href="#%e7%ab%af%e5%8f%a3%e8%bd%ac%e5%8f%91%e9%80%89%e9%a1%b9" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>&lt;strong>-D &amp;lt;[Bind_Address]:PORT&amp;gt;&lt;/strong> # Dynamic(动态) 转发。启用动态转发的 ssh 程序相当于一个代理服务，通过监听的端口，可以将流量送到指定的目标主机。&lt;/p>
&lt;p>&lt;strong>-L &amp;lt;XXX&amp;gt;&lt;/strong> # Local(本地) 转发。发往本地的 TCP 端口 或 Unix Socket 上的流量转发到远端 TCP 端口 或 Unix Socket 上。&lt;/p>
&lt;ul>
&lt;li>XXX 有多种语法格式：&lt;/li>
&lt;li>&lt;strong>-L [Bind_Address:]LocalPort:RemoteHost:RemoteHostPort&lt;/strong>&lt;/li>
&lt;li>&lt;strong>-L [Bind_Address:]LocalPort:RemoteSocket&lt;/strong>&lt;/li>
&lt;li>**-L LocalSocket:RemoteHost:RemotePort **&lt;/li>
&lt;li>&lt;strong>-L LocalSocket:RemoteSocket&lt;/strong>&lt;/li>
&lt;li>假如现在有 A、B、C 三台主机，A 与 C 不通，A 与 B 通，C 与 B 通；也就是说 B 是中转站(运行 sshd 程序)。如果想要通过 A 访问 C，则需要在 A 上执行 &lt;code>ssh -L XXX B-IP&lt;/code> 命令&lt;/li>
&lt;li>Local 表示 A 主机，Remote 表示 C 主机&lt;/li>
&lt;li>访问 A Port 就是访问 C Port&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>-R &amp;lt;XXX&amp;gt;&lt;/strong> # Remote(远程) 转发。发往指定 &lt;code>RemotePort&lt;/code> 或 &lt;code>RemoteSocket&lt;/code> 上的流量转发到 &lt;code>本地端口&lt;/code> 或 &lt;code>Unix Socket&lt;/code> 上。远程转发其实更像将 Local 服务通过 ssh 程序以类似 nat 的方式暴露到 Remote 上。&lt;/p>
&lt;ul>
&lt;li>XXX 有多种语法格式：&lt;/li>
&lt;li>&lt;strong>-R [bind_address:]RemotePort:LocalHost:LocalPort&lt;/strong>&lt;/li>
&lt;li>&lt;strong>-R [bind_address:]RemotePort:LocalSocket&lt;/strong>&lt;/li>
&lt;li>&lt;strong>-R RemoteSocket:LocalHost:LocalPort&lt;/strong>&lt;/li>
&lt;li>&lt;strong>-R RemoteSocket:LocalSocket&lt;/strong>&lt;/li>
&lt;li>&lt;strong>-R [bind_address:]port&lt;/strong>&lt;/li>
&lt;li>假如现在有 A、B、C 三台主机，A 与 C 不通，A 与 B 通，C 与 B 通；也就是说 B 是中转站(运行 sshd 程序)。如果想要通过 A 访问 C，则需要在 C 上执行 &lt;code>ssh -R XXX B-IP&lt;/code> 命令&lt;/li>
&lt;li>Local 表示 C 主机，Remote 表示 B 主机&lt;/li>
&lt;li>从 A 访问 B Port 就是访问 C Port&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>端口转发常用附加选项&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-f&lt;/strong> # 在后台运行 ssh 程序。常与 -N 连用。
&lt;ul>
&lt;li>如果单独使用，则会报错：&lt;code>Cannot fork into background without a command to execute.&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>-g&lt;/strong> # 表示 ssh 隧道对应的转发端口将监听在主机的所有 IP 中，不使用 -g 时，转发端口默认只监听在主机的本地回环地址中，-g 表示开启网关模式，远程端口转发中，无法开启网关功能。&lt;/li>
&lt;li>&lt;strong>-N&lt;/strong> # 不要执行远程命令。这对于仅让 ssh 用来端口转发时非常有用。&lt;/li>
&lt;/ul>
&lt;h1 id="example">EXAMPLE&lt;a class="td-heading-self-link" href="#example" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;ul>
&lt;li>常用在脚本中，对远程服务器执行本地脚本，由于在后台执行如法判断脚本退出状态导致 set -e 失效，所以加上了 echo $? &amp;gt; /dev/null 来处理后台脚本的执行状态。
&lt;ul>
&lt;li>ssh -T root@${IP} &amp;lt; ${WorkDir}/install/install-docker.sh; echo $? &amp;gt; /dev/null &amp;amp;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>连接时，不要严格检查 HostKey。即跳过确实添加 HostKey 的过程，不用输入 yes 或 no。
&lt;ul>
&lt;li>ssh -o StrictHostKeyChecking=no 192.168.0.10&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>通过 IPv6 连接到目标主机。主意添加后面的 &lt;code>%DEV&lt;/code>，DEV 就是指定的网络设备。
&lt;ul>
&lt;li>ssh -6 fe80::2c75:df14:7422:36a%ens3&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>依次通过 202.43.145.163、172.19.42.247 这两台主机的跳转后，连接到 172.19.42.248
&lt;ul>
&lt;li>ssh -J &lt;a href="mailto:root@202.43.145.163">root@202.43.145.163&lt;/a>:42203,172.19.42.247 &lt;a href="mailto:root@172.19.42.248">root@172.19.42.248&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>建立隧道，并禁用远程执行命令，以通过公网远程连接 windows
&lt;ul>
&lt;li>在内网的 Win10 上执行如下命令，将会在 122.9.154.106 设备上开启 13389 端口监听，其他客户端通过访问 122.9.154.106 的 13389 端口，即可远程登录连接本地 windows&lt;/li>
&lt;li>ssh -N -R 13389:localhost:3389 &lt;a href="mailto:root@122.9.154.106">root@122.9.154.106&lt;/a> -p 10022&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>建立隧道，并禁用远程执行命令，通过本地的 13389 端口，即可远程连接到 172.19.42.240 的桌面
&lt;ul>
&lt;li>ssh -N -L 13389:172.19.42.240:3389 &lt;a href="mailto:root@202.43.145.163">root@202.43.145.163&lt;/a> -p 42201&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ssh 远程调用函数
&lt;ul>
&lt;li>&lt;a href="https://stackoverflow.com/questions/22107610/shell-script-run-function-from-script-over-ssh">https://stackoverflow.com/questions/22107610/shell-script-run-function-from-script-over-ssh&lt;/a> #&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>连接时启用 X11 转发，常用于在 Linux 系统上连接后启动
&lt;ul>
&lt;li>ssh -X -C 192.168.0.1&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="端口转发语法示例">端口转发语法示例&lt;a class="td-heading-self-link" href="#%e7%ab%af%e5%8f%a3%e8%bd%ac%e5%8f%91%e8%af%ad%e6%b3%95%e7%a4%ba%e4%be%8b" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>假如现在环境如下：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/mzs2hg/1639031352911-319c0d47-4ef2-4aa2-ae0f-b0e3f77615d0.jpeg" alt="">&lt;/p>
&lt;p>&lt;strong>A 与 C 直接互通&lt;/strong>，动态转发&lt;/p>
&lt;ul>
&lt;li>在 A 主机上执行命令：
&lt;ul>
&lt;li>&lt;strong>ssh -D localhost:10022 root@B-HOST&lt;/strong>&lt;/li>
&lt;li>这个命令的意思是：以 root 用户连接到 B 主机，并在本地 28080 端口上启用动态转发功能。相当于在 B 主机上与本地的 10022 端口建立了一个隧道。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>此时在 A 主机上执行如下命令即可直接远程登录到 C 主机
&lt;ul>
&lt;li>&lt;strong>ssh -o ProxyCommand=&amp;ldquo;nc -x 127.0.0.1:10022 %h %p&amp;rdquo; root@C-HOST&lt;/strong>&lt;/li>
&lt;li>也可以使用 socat 或 nc 程序
&lt;ul>
&lt;li>&lt;code>ssh -o ProxyCommand='socat - socks:127.0.0.1:%h:%p,socksport=10022' root@C-HOST&lt;/code>&lt;/li>
&lt;li>&lt;code>ssh -o ProxyCommand='nc -X 5 -x 127.0.0.110022 %h %p' root@C-HOST&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Windows 上可以使用 &lt;a href="https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Utility/Netcat.md">Netcat&lt;/a> 工具
&lt;ul>
&lt;li>&lt;code>ssh -o ProxyCommand=&amp;quot;ncat --proxy-type socks5 --proxy 127.0.0.1:10022 %h %p&amp;quot; root@C-HOST&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>通过 B 中转，将 C 的端口映射到 A 的端口上&lt;/strong>，本地转发&lt;/p>
&lt;ul>
&lt;li>&lt;strong>通过 A 访问 C 上的 mysql&lt;/strong>
&lt;ul>
&lt;li>在 A 主机上执行
&lt;ul>
&lt;li>&lt;strong>ssh -L 13306:C-IP:3306 root@B-HOST&lt;/strong>&lt;/li>
&lt;li>这个命令的意思是：A 主机上以 root 用户连接到 B 主机，并在 A 主机本地 13306 端口上启用本地转发，所有到 A 主机的 13306 端口的流量都会通过 B 主机转发到 C 主机的 3306 端口上&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>此时，即可通过 A 主机的 13306 端口连接 C 主机的 mysql 数据库。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>通过 A 访问 C 上的 Prometheus&lt;/strong>
&lt;ul>
&lt;li>与通过 A 访问 C 的 mysql 类似&lt;/li>
&lt;li>在 A 主机上执行
&lt;ul>
&lt;li>&lt;strong>ssh -L 19090:C-IP:9090 root@B-HOST&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>此时通过浏览器访问 http://A-IP:19090 即可打开 C 在 9090 端口上的 Web 应用&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>将 C 的端口映射到 B 的端口上&lt;/strong>，远程转发&lt;/p>
&lt;ul>
&lt;li>在 C 主机上执行
&lt;ul>
&lt;li>&lt;strong>ssh -R 19090:C-IP:9090 root@B-HOST&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>此时访问 http://B-IP:19090 即可直接打开 C 主机在 9090 端口上的 Web 应用。&lt;/li>
&lt;li>22 端口同理，只需要将 9090 改为 22，那么在任意一台机器上执行 &lt;strong>ssh root@B-IP -p 19090&lt;/strong> 命令就是通过 B 的 19090 端口 ssh 连接到 C 主机。&lt;/li>
&lt;li>注意：如果远程端口转发时遇到问题，需要在 sshd_config 配置文件中将 &lt;code>GatewayPorts&lt;/code> 设置为 yes。因为不开启该配置，在 B 上监听的 IP 将会是 127.0.0.1，开启后是 *&lt;/li>
&lt;/ul></description></item><item><title>Docs: 最佳实践</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Utility/OpenSSH/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Utility/OpenSSH/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://hellolzc.github.io/2020/04/port-forwarding-with-ssh/">妙用SSH端口转发&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="例一转发-windows-服务器的远程桌面">例一：转发 windows 服务器的远程桌面&lt;a class="td-heading-self-link" href="#%e4%be%8b%e4%b8%80%e8%bd%ac%e5%8f%91-windows-%e6%9c%8d%e5%8a%a1%e5%99%a8%e7%9a%84%e8%bf%9c%e7%a8%8b%e6%a1%8c%e9%9d%a2" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>在本地电脑上打开 PowerShell，输入如下命令（参数需要自己修改，参见上一节的解释）：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>ssh -L 10080:&amp;lt;内网Windows服务器IP&amp;gt;:3389 user@123.123.123.123 -p &lt;span style="color:#0000cf;font-weight:bold">6001&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面这条命令使用帐号 &lt;code>user&lt;/code> 登录了 &lt;code>123.123.123.123&lt;/code> 的 &lt;code>6001&lt;/code> 端口对应的服务器(&lt;code>192.168.0.123&lt;/code>)，并在该服务器上建立一个 ssh 转发，将本地计算机(&lt;code>127.0.0.1&lt;/code>，&lt;code>localhost&lt;/code>)的&lt;code>10080&lt;/code>端口映射到了 &lt;code>&amp;lt;内网Windows服务器IP&amp;gt;&lt;/code> 的 &lt;code>3389&lt;/code> 端口。 回车后，提示输入密码，输入账号 &lt;code>user&lt;/code> 在&lt;code>192.168.0.123&lt;/code>服务器密码。 登录后不要关闭 Powershell 窗口，否则转发会中断。&lt;/p>
&lt;p>之后便可以用本地地址访问 windows 服务器的远程桌面。&lt;/p>
&lt;p>为了节约带宽并提高流畅度，可以把桌面背景改成纯色，可以把颜色深度调低，还可以把显示配置里的分辨率调小，一般使用 1600*900 分辨率。 PS：如果是高分屏觉得此分辨率看不清楚可以使用远程桌面自带的缩放功能。在标题栏上点右键即可。&lt;/p>
&lt;p>同理，如果局域网的个人电脑也开启了远程桌面功能，也可以用这种办法访问。 RDP 协议优化是是很好的，这种办法 1 Mbps 的带宽就可以获得比较流畅的体验&lt;/p>
&lt;h1 id="例二转发目标服务器的-web-服务">例二：转发目标服务器的 web 服务&lt;a class="td-heading-self-link" href="#%e4%be%8b%e4%ba%8c%e8%bd%ac%e5%8f%91%e7%9b%ae%e6%a0%87%e6%9c%8d%e5%8a%a1%e5%99%a8%e7%9a%84-web-%e6%9c%8d%e5%8a%a1" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>tensorboard 和 jupyter notebook 使用的是 http 协议，可以通过端口转发来访问。&lt;/p>
&lt;p>打开 Powershell，输入如下命令&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>ssh -L 28186:localhost:28888 user@123.123.123.123 -p &lt;span style="color:#0000cf;font-weight:bold">6001&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面这条命令使用帐号 &lt;code>user&lt;/code> 登录了 &lt;code>123.123.123.123&lt;/code> 的 &lt;code>6001&lt;/code> 端口对应的服务器(&lt;code>192.168.0.123&lt;/code>)，并在该服务器上建立一个 ssh 转发，将本地计算机的&lt;code>28186&lt;/code>端口映射到了&lt;code>192.168.0.123&lt;/code> 的 &lt;code>28888&lt;/code> 端口。&lt;/p>
&lt;p>之后再浏览器中输入&lt;code>127.0.0.1:28186&lt;/code>便可以直接访问该端口的网页。&lt;/p>
&lt;h1 id="例三让服务器使用本地计算机的代理">例三：让服务器使用本地计算机的代理&lt;a class="td-heading-self-link" href="#%e4%be%8b%e4%b8%89%e8%ae%a9%e6%9c%8d%e5%8a%a1%e5%99%a8%e4%bd%bf%e7%94%a8%e6%9c%ac%e5%9c%b0%e8%ae%a1%e7%ae%97%e6%9c%ba%e7%9a%84%e4%bb%a3%e7%90%86" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>问：能不能让服务器使用本地计算机的网络呢？比如说，可以让&lt;code>git clone&lt;/code>可以走我的 PC 上的代理？
   答：可以， 这里假设本地 PC 的&lt;code>8080&lt;/code>端口提供了代理服务, 目标是让服务器 A 上的 Git 可以使用代理，假定你可以直接 ssh 登录服务器 A, 登录账户名为&lt;code>hello&lt;/code>。 使用命令&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>ssh -R 10800:localhost:8080 hello@&amp;lt;A 的IP&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>建立远程转发，就将本地&lt;code>8080&lt;/code>端口的代理转发到 ssh 服务器 A 上的&lt;code>10800&lt;/code>端口了。&lt;/p>
&lt;p>测试代理设置是否有效：在服务器上执行&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>ss -lntpd &lt;span style="color:#000;font-weight:bold">|&lt;/span> grep :10800 &lt;span style="color:#8f5902;font-style:italic"># 查看端口是否启用&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>curl www.google.com --socks5 127.0.0.1:10800 &lt;span style="color:#8f5902;font-style:italic"># 测试访问google&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Git 使用代理参考&lt;a href="https://hellolzc.github.io/2017/09/git-notes">我之前的博客&lt;/a>。 成功之后想干啥就可以干啥啦 XD&lt;/p>
&lt;h3 id="其他问题">其他问题&lt;a class="td-heading-self-link" href="#%e5%85%b6%e4%bb%96%e9%97%ae%e9%a2%98" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>问：那能不能直接转发服务器的 Samba 文件共享服务呢？&lt;/li>
&lt;li>答：不可以，Windows 不支持使用自定义的端口访问 Samba 服务器。 详见 &lt;a href="https://www.v2ex.com/t/541663">windows 访问 samba 如何指定端口？ - V2EX&lt;/a>&lt;/li>
&lt;li>问：可以不借助公网服务器建立转发吗？&lt;/li>
&lt;li>答：可以，可以借助 Teamviewer VPN 功能，使用实验室电脑做跳板。 参考 CSDN 博客(ccproxy 可以从官网上下载，免费版够用)： &lt;a href="https://blog.csdn.net/sky835202/article/details/80180279">teamview+ccproxy 实现远程局域网本地访问- CSDN 博客&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="反向隧道">反向隧道&lt;a class="td-heading-self-link" href="#%e5%8f%8d%e5%90%91%e9%9a%a7%e9%81%93" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>ssh 反向隧道相信大多数同学都比较了解，就算不了解也一定在日常工作中听说过，其实抛开那些专业的术语，通常我们借助 ssh 的反向隧道来实现两个网络隔离的主机间通信。最近小白在远程操作一个私有化的项目时正好用到了这个，简单总结了下便有了此文章。&lt;/p>
&lt;p>在操作之前，我先将需要的资源列出一个表格，大家在操作前可以先按照如下准备资源：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>代号&lt;/th>
&lt;th>角色&lt;/th>
&lt;th>机器位置&lt;/th>
&lt;th>地址&lt;/th>
&lt;th>账户&lt;/th>
&lt;th>ssh 端口&lt;/th>
&lt;th>sshd&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>A&lt;/td>
&lt;td>中转机器&lt;/td>
&lt;td>公网&lt;/td>
&lt;td>121.41.218.68&lt;/td>
&lt;td>root&lt;/td>
&lt;td>22&lt;/td>
&lt;td>启用&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>B&lt;/td>
&lt;td>客户机器&lt;/td>
&lt;td>客户内网&lt;/td>
&lt;td>10.155.0.0/24&lt;/td>
&lt;td>root&lt;/td>
&lt;td>22&lt;/td>
&lt;td>启用&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>C&lt;/td>
&lt;td>我的机器&lt;/td>
&lt;td>公司 / 家中&lt;/td>
&lt;td>127.0.0.1&lt;/td>
&lt;td>root&lt;/td>
&lt;td>22&lt;/td>
&lt;td>不需要&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;blockquote>
&lt;p>这里为了操作方便机器全部用的 root 账号，大家不要学我 😂&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>我的需求很简单，即客户内网 B 中有一批刚装完操作系统的服务器，我需要在公司或者家中的电脑上通过 Ansible Playbook 批量对这些机器进行初始化。&lt;/code>&lt;/p>
&lt;h2 id="第一步开启-ssh-server-代理功能">第一步：开启 ssh server 代理功能&lt;a class="td-heading-self-link" href="#%e7%ac%ac%e4%b8%80%e6%ad%a5%e5%bc%80%e5%90%af-ssh-server-%e4%bb%a3%e7%90%86%e5%8a%9f%e8%83%bd" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>在位于公网服务器上打开 sshd 的&lt;code>GatewayPorts&lt;/code>开关，并重启 sshd&lt;/p>
&lt;p>&lt;code>sed -i &amp;quot;s/#GatewayPorts no/GatewayPorts yes/g&amp;quot; /etc/ssh/sshd_config systemctl restart ssh&lt;/code>&lt;/p>
&lt;p>打开代理功能意味着，当我们在建立 ssh 反向隧道后，监听的地址会从默认的 127.0.0.1 更换成 0.0.0.0，方便 ssh 客户端远程登录。&lt;/p>
&lt;h2 id="第二步建立-ssh-反向隧道">第二步：建立 ssh 反向隧道&lt;a class="td-heading-self-link" href="#%e7%ac%ac%e4%ba%8c%e6%ad%a5%e5%bb%ba%e7%ab%8b-ssh-%e5%8f%8d%e5%90%91%e9%9a%a7%e9%81%93" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>在客户内网 B 中找一台能访问 121.41.218.68 地址的服务器，登录上去，并在终端内执行下述命令：&lt;/p>
&lt;p>&lt;code>ssh -lroot -p22 -qngfNTR 8822:localhost:22 121.41.218.68 -o ServerAliveInterval=10&lt;/code>&lt;/p>
&lt;p>这一步的关键信息其实就是在主机 B 和主机 A 之间建立一条 SSH 隧道，隧道端口的映射关系是 &lt;code>主机 B:22 &amp;lt;--&amp;gt; 主机 A:8822&lt;/code>&lt;/p>
&lt;p>之所以加上 ServerAliveInterval=10，是让客户端每 10s 发送一个心跳保持隧道的链接，否则这条连接很容易被重置。&lt;/p>
&lt;h2 id="第三步本地-ssh-client-代理">第三步：本地 ssh client 代理&lt;a class="td-heading-self-link" href="#%e7%ac%ac%e4%b8%89%e6%ad%a5%e6%9c%ac%e5%9c%b0-ssh-client-%e4%bb%a3%e7%90%86" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>目前有了 ssh 的隧道也只能满足我本地主机 C 能通过 121.41.218.68 的 8822 端口 ssh 登录到客户内网的 B 主机，还不能满足我进行批量运行任务的需求。&lt;/p>
&lt;p>此时，我们就需要在自己电脑上配置 ssh 客户端的 socket 代理来满足需求，配置位于&lt;code>～/.ssh/config&lt;/code>&lt;/p>
&lt;pre tabindex="0">&lt;code>host hosta
    HostName 121.41.218.68
    Port 8822
    User root
host 10.155.0.\*
    User root
    Port 22
    ProxyCommand ssh hosta -W %h:%p
&lt;/code>&lt;/pre>&lt;p>至此，我就可以在本地用 ansible-playbook 无缝的进行操作了。&lt;/p>
&lt;h2 id="总结">总结&lt;a class="td-heading-self-link" href="#%e6%80%bb%e7%bb%93" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>上述 3 步是整个 ssh 内网穿透的核心流程，如果要做得更加的优雅的话，我们还需要考虑几点优化：&lt;/p>
&lt;ul>
&lt;li>为三台机器上的 ssh 客户端分别配置公私钥&lt;/li>
&lt;li>为主机 B 上的 ssh 方向隧道创建服务进程，避免重启后隧道丢失&lt;/li>
&lt;li>尽量保证公网主机 A 的网络安全，可单独为隧道端口配置防火墙策略&lt;/li>
&lt;/ul>
&lt;p>当然，ssh 反向隧道除了能代理 ssh 服务外，它也能对内网的其他服务做 socket 转发，这里本文就不再展开。总之，建立 SSH 反向隧道这种事情大多数情况都是迫于无奈的临时选择，我们在用完后要及时释放连接，避免长期闲置被不法分子盯上后带来的损失。&lt;/p>
&lt;h1 id="基于-ssh-隧道能力实现-vpn">基于 SSH 隧道能力实现 VPN&lt;a class="td-heading-self-link" href="#%e5%9f%ba%e4%ba%8e-ssh-%e9%9a%a7%e9%81%93%e8%83%bd%e5%8a%9b%e5%ae%9e%e7%8e%b0-vpn" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://man.openbsd.org/ssh#SSH-BASED_VIRTUAL_PRIVATE_NETWORKS">https://man.openbsd.org/ssh#SSH-BASED_VIRTUAL_PRIVATE_NETWORKS&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://oicu.github.io/posts/5405ba2b.html">https://oicu.github.io/posts/5405ba2b.html&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>ssh 与 sshd 程序可以利用 Linux 的 tun 设备实现 VPN 的能力&lt;/p>
&lt;p>基于官方的示例, 还可以实现类似 &lt;a href="https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/Tunneling%20Protocol/WireGuard/WireGuard.md">WireGuard&lt;/a> 的中继 peer 效果, 并且通过 NAT 与 路由 组合的方式让无法访问互联网的设备访问互联网&lt;/p>
&lt;p>环境如下: Inner_A 无法访问互联网, Outer_B 可以访问互联网; B 可以通过 “专线或 VPN” 连接到 A, 但是 A 无法连接到 Outer_B&lt;/p>
&lt;p>&lt;img src="Excalidraw/ssh.excalidraw.md" alt="800">&lt;/p>
&lt;p>在 Outer_B 上执行&lt;/p>
&lt;blockquote>
&lt;p>Outer_B 也可以用 WSL (￣▽￣)&amp;quot;&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>ssh -NTCf -w0:1 root@Inner_A
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>此时 Outer_B 上创建了一个名为 tun0 的网络设备, 在 Inner_A 上创建了一个名为 tun1 的网络设备.&lt;/p>
&lt;p>在 Outer_B 上执行&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &amp;gt; /proc/sys/net/ipv4/ip_forward
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ip addr add 10.0.0.100/32 peer 10.0.0.200 dev tun0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ip link &lt;span style="color:#204a87">set&lt;/span> dev tun0 up
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>iptables -t nat -A POSTROUTING -s 10.0.0.200/32 -o eth0 -j MASQUERADE
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 Inner_A 上执行&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &amp;gt; /proc/sys/net/ipv4/ip_forward
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ip addr add 10.0.0.200/32 peer 10.0.0.100 dev tun1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ip link &lt;span style="color:#204a87">set&lt;/span> dev tun1 up
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>此时在 A 上已经可以通过 10.0.0.100 连接到 Outer_B&lt;/p>
&lt;p>若此时 Outer_B 通过 专线/VPN 连接到 Inner_A, 则需要先添加一条路由条目, 避免因改变默认路由导致连接中断&lt;/p>
&lt;blockquote>
&lt;p>这里假设 专线/VPN 的网络是 172.16.11.0/24; Inner_A 原本的网络是 10.10.11.51/24, 默认路由是 10.10.11.1&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>ip route add 172.16.11.0/24 dev eno3 via 10.10.11.1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后修改 Inner_A 的默认路由, 让所有访问互联网的流量发往 Outer_B&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>ip route replace default via 10.0.0.100
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>此时, Inner_A 即可通过 Outer_B 愉快得访问互联网了&lt;/p></description></item><item><title>Docs: sshpass</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Utility/OpenSSH/sshpass/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Utility/OpenSSH/sshpass/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://sourceforge.net/projects/sshpass/">源码&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://man.cx/sshpass">manual&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>sshpass 是一种使用 SSH 的 “交互式键盘密码身份验证” 非交互式执行密码身份验证的工具。大多数用户应该改用 SSH 更安全的公钥认证。&lt;/p>
&lt;h1 id="syntax语法">Syntax(语法)&lt;a class="td-heading-self-link" href="#syntax%e8%af%ad%e6%b3%95" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;strong>OPTIONS&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-p &amp;lt;STRING&amp;gt;&lt;/strong> # 指定 ssh 时使用的密码&lt;/li>
&lt;/ul>
&lt;h1 id="问题示例">问题示例&lt;a class="td-heading-self-link" href="#%e9%97%ae%e9%a2%98%e7%a4%ba%e4%be%8b" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="使用-sshpass--p-密码-ssh-rootip-地址-没有任何反应解决办法找到了">使用 sshpass -p 密码 ssh root@ip 地址 没有任何反应，解决办法找到了&lt;a class="td-heading-self-link" href="#%e4%bd%bf%e7%94%a8-sshpass--p-%e5%af%86%e7%a0%81-ssh-rootip-%e5%9c%b0%e5%9d%80-%e6%b2%a1%e6%9c%89%e4%bb%bb%e4%bd%95%e5%8f%8d%e5%ba%94%e8%a7%a3%e5%86%b3%e5%8a%9e%e6%b3%95%e6%89%be%e5%88%b0%e4%ba%86" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>添加-o StrictHostKeyChecking=no 选项【表示远程连接时不提示是否输入 yes/no】&lt;/p>
&lt;p>sshpass -p molihuacha.1 ssh -o StrictHostKeyChecking=no &lt;a href="mailto:root@188.131.150.204">root@188.131.150.204&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://blog.csdn.net/weixin_41831919/article/details/109660760">https://blog.csdn.net/weixin_41831919/article/details/109660760&lt;/a>&lt;/p></description></item></channel></rss>