<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Secure Shell(SSH) 安全外壳协议 on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Utility/OpenSSH/</link><description>Recent content in Secure Shell(SSH) 安全外壳协议 on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Utility/OpenSSH/index.xml" rel="self" type="application/rss+xml"/><item><title>OpenSSH</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Utility/OpenSSH/OpenSSH/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Utility/OpenSSH/OpenSSH/</guid><description>概述 参考：
官网 官方文档，Manual(手册) OpenSSH 是 Secure Shell Protocol 的开源实现方案，该工具为 C/S 架构，服务端默认监听在 22/tcp 端口上。如果想要连接到服务端，同样需要一个客户端来进行连接。
比如，现在有两台主机，主机 A 和主机 B，如果想要在 B 上可以操作 A，那么就需要在 A 机上安装服务端工具(openssh-server)，在 B 机上安装客户端工具(openssh-client)，然后通过 ssh 工具进行互联
Note：现在 OpenSSH 一般作为 Linux 发行版的标准远程登录工具默认安装在系统中且开机自启动。
OpenSSH 安装 OpenSSH 关联文件与配置 /var/log/secure # 登录信息日志所在位置
可以通过该日志获取到尝试暴力破解的 IP /etc/ssh/ssh_config # OpenSSH 的 client 端配置(ssh、scp 等程序)
/etc/ssh/sshd_config # OpenSSH 的 server 端配置(sshd 程序)
~/.ssh/know_hosts # 已知的曾经连接过的主机的信息。凡是使用 ssh 连接过该主机，都会将信息记录在其中
~/.ssh/authorized_keys # 已经认证的公钥。如果其他 client 想要连接服务端，凡是在该文件中的公钥，都可以免密连接。
注意：OpenSSH 使用非对称加密的方式，与传统互联网的 https 使用方式相反。https 的公钥是交给客户端，用来验证服务端返回的网页是否可信。而 OpenSSH 则是将公钥交给服务端，用来验证客户端发送的信息是否可信。 这也确实符合逻辑 ssh 是一个客户端需要登录多个服务端，服务端要验证客户端发送的信息的真实性，要是不验证，那么就可以随便在自己服务器上执行命令了，这是不对的~ 而互联网通过 https 访问，则是多个客户端对应一个服务端。 ~/.</description></item><item><title>OpenSSH 配置</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Utility/OpenSSH/OpenSSH-%E9%85%8D%E7%BD%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Utility/OpenSSH/OpenSSH-%E9%85%8D%E7%BD%AE/</guid><description>概述 参考：
官方文档，手册 - sshd_config 官方文档，手册 - ssh_config sshd_config 文件 Port(NUM) # 设定 sshd 服务监听的端口号
ListenAddress(IP) # 设定 sshd 服务监听的 IP 地址(全 0 为所有 IP)
PermitRootLogin(yes|no) # 设定是否允许 root 用户通过 ssh 直接登录
AllowUsers # 设定允许通过 ssh 登录的用户 User1,2,3 等等
AllowGroups # 设定允许通过 ssh 登录的组 Group1,2,3,等等等
KbdInteractiveAuthentication #
注意：该关键字是已经被启用的 ChallengeResponseAuthentication 关键字的替代品
PermitTunnel(STRING) # 指定是否允许 tun 设备转发。可用的值有 yes、point-to-point、ethernet、no。默认值: no
https://man.openbsd.org/sshd_config#PermitTunnel GatewayPorts # 指定是否允许远程主机连接到为客户端转发的端口。
ForceCommand #
https://man.openbsd.org/sshd_config#ForceCommand Match # 创建一个独立的配置块。满足 Match 指定的匹配条件时，Match 所在行下的所有配置都将覆盖</description></item><item><title>OpenSSH Utilities</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Utility/OpenSSH/OpenSSH-Utilities/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Utility/OpenSSH/OpenSSH-Utilities/</guid><description>概述 参考：
官方 Manual(手册) https://www.myfreax.com/how-to-setup-ssh-tunneling/ https://hellolzc.github.io/2020/04/port-forwarding-with-ssh/ http://tuxgraphics.org/~guido/scripts/ssh-socks5-port-forwarding.html ssh、scp、sftp # 客户端管理工具 ssh-add、ssh-keysign、ssh-keyscan、ssh-keygen # 密钥管理工具 sshd、sftp-server、ssh-agent # 服务端管理工具 ssh - OpenSSH 的 ssh 客户端工具(远程登录程序) 详见 ssh
scp - 基于 ssh 协议的文件传输工具 scp 是基于 SSH 的 File transfer 工具
Syntax(语法) scp [OPTIONS] SourceFILE DestinationFILE
Note：远程 FILE 的格式为：USER@IP:/PATH/FILE)
OPTIONS：
-p # -r # 以递归方式复制，用于复制整个目录 EXAMPLE 把本地 nginx 文件推上去复制到以 root 用户登录的 10.10.10.10 这台机器的/opt/soft/scptest 目录下
scp /opt/soft/nginx-0.5.38.tar.gz root@10.10.10.10:/opt/soft/scptest 把以 root 用户登录的 10.10.10.10 机器中的 nginx 文件拉下来复制到本地/opt/soft 目录下</description></item><item><title>SFTP Subsystem</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Utility/OpenSSH/SFTP-Subsystem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Utility/OpenSSH/SFTP-Subsystem/</guid><description>概述 参考：
Manual, sftp-server https://serverfault.com/questions/660160/difference-between-openssh-internal-sftp-and-sftp-server OpenSSH 的 SFTP 子系统早期由独立的二进制程序 sftp-server 实现（默认路径 /usr/libexec/openssh/sftp-server），后面内嵌到 sshd 中，通过 internal-sftp 参数开启 SFTP 子系统。
OpenSSH 的 SFTP 子系统可以实现 SFTP 能力。
要启用 SFTP 子系统，在 sshd_config 配置文件中使用 Subsystem sftp XXX 指令，XXX 用来指示是用外部二进制程序实现 SFTP 还是内嵌的 sftp 逻辑实现 SFTP。
下面两个指令都可以启动 SFTP 子系统（sftp-server 在新版已经内嵌到 sshd 程序中，更推荐使用 Subsystem sftp internal-sftp）
Subsystem sftp /usr/libexec/openssh/sftp-server Subsystem sftp internal-sftp sftp-server sftp-server 程序的命令参数同样可以在 sshd_config 配置文件中指定，比如：
Subsystem sftp internal-sftp -f LOCAL5 -l INFO OPTIONS -f LOG_FACILITY # 指定记录日志时使用的 Facility 代码。默认值: AUTH。可用的值有: DAEMON, USER, AUTH, LOCAL0, LOCAL1, LOCAL2, LOCAL3, LOCAL4, LOCAL5, LOCAL6, LOCAL7</description></item><item><title>ssh</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Utility/OpenSSH/ssh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Utility/OpenSSH/ssh/</guid><description>概述 参考：
Manual(手册), ssh(1) Manual(手册), ssh_config(5) Syntax(语法) ssh [OPTIONS] [User@] HostIP [COMMAND]
OPTIONS -C # 请求压缩所有数据(包括 stdin、stdout、stderr、X11 转发的数据、TCP 和 UNIX-domain 连接) -i &amp;lt;/PATH/FILE&amp;gt; # 使用指定的私钥文件来进行登录认证 -J &amp;lt;DEST[,DEST2,&amp;hellip;]&amp;gt; # 首先与 DEST 建立 ssh 连接，并通过 DEST 跳转到最终目标主机。如果需要多次跳转。可以指定多个 DEST 并以逗号分割。 DEST 格式为：[USER@]HOST[:PORT] -o &amp;lt;KEY=VALUE&amp;gt; # 以命令行的方式配置本应该在 OpenSSH 配置 - ssh_config 文件中的内容。KEY 是 ssh_config 配置文件中的关键字。 -p &amp;lt;PORT&amp;gt; # 指定 HostIP 所在远程服务器监听的端口 -T # 不要分配一个伪终端 -W # 请求将客户端上的标准输入和输出通过安全通道转发到端口上的主机。 表示 -N，-T，ExitOnForwardFailure 和 ClearAllForwardings，尽管可以在配置文件中或使用 -o 命令行选项覆盖它们。 -X # 启用 X11 转发 -Y # 启用受信任的 X11 转发。 受信任的 X11 转发不受 X11 SECURITY 扩展控件的约束。 隧道选项 -w LOCAL_TUN[:REMOTE_TUN] # 在客户端与服务端建立互相连接的 tun 设备.</description></item><item><title>最佳实践</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Utility/OpenSSH/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Utility/OpenSSH/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</guid><description>概述 参考：
妙用SSH端口转发 例一：转发 windows 服务器的远程桌面 在本地电脑上打开 PowerShell，输入如下命令（参数需要自己修改，参见上一节的解释）：
ssh -L 10080:&amp;lt;内网Windows服务器IP&amp;gt;:3389 user@123.123.123.123 -p 6001 上面这条命令使用帐号 user 登录了 123.123.123.123 的 6001 端口对应的服务器(192.168.0.123)，并在该服务器上建立一个 ssh 转发，将本地计算机(127.0.0.1，localhost)的10080端口映射到了 &amp;lt;内网Windows服务器IP&amp;gt; 的 3389 端口。 回车后，提示输入密码，输入账号 user 在192.168.0.123服务器密码。 登录后不要关闭 Powershell 窗口，否则转发会中断。
之后便可以用本地地址访问 windows 服务器的远程桌面。
为了节约带宽并提高流畅度，可以把桌面背景改成纯色，可以把颜色深度调低，还可以把显示配置里的分辨率调小，一般使用 1600*900 分辨率。 PS：如果是高分屏觉得此分辨率看不清楚可以使用远程桌面自带的缩放功能。在标题栏上点右键即可。
同理，如果局域网的个人电脑也开启了远程桌面功能，也可以用这种办法访问。 RDP 协议优化是是很好的，这种办法 1 Mbps 的带宽就可以获得比较流畅的体验
例二：转发目标服务器的 web 服务 tensorboard 和 jupyter notebook 使用的是 http 协议，可以通过端口转发来访问。
打开 Powershell，输入如下命令
ssh -L 28186:localhost:28888 user@123.123.123.123 -p 6001 上面这条命令使用帐号 user 登录了 123.123.123.123 的 6001 端口对应的服务器(192.</description></item><item><title>sshpass</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Utility/OpenSSH/sshpass/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Utility/OpenSSH/sshpass/</guid><description>概述 参考：
源码 manual sshpass 是一种使用 SSH 的 “交互式键盘密码身份验证” 非交互式执行密码身份验证的工具。大多数用户应该改用 SSH 更安全的公钥认证。
Syntax(语法) OPTIONS
-p &amp;lt;STRING&amp;gt; # 指定 ssh 时使用的密码 问题示例 使用 sshpass -p 密码 ssh root@ip 地址 没有任何反应，解决办法找到了 添加-o StrictHostKeyChecking=no 选项【表示远程连接时不提示是否输入 yes/no】
sshpass -p molihuacha.1 ssh -o StrictHostKeyChecking=no root@188.131.150.204
https://blog.csdn.net/weixin_41831919/article/details/109660760</description></item></channel></rss>