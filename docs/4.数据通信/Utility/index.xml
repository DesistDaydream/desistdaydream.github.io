<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Utility on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Utility/</link><description>Recent content in Utility on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Utility/index.xml" rel="self" type="application/rss+xml"/><item><title>FRP</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Utility/FRP/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Utility/FRP/</guid><description>概述 参考：
GitHub 项目，fatedier/frp Fast reverse proxy(快速反向代理，简称 FRP) 一个专注于内网穿透的高性能的反向代理应用，支持 TCP、UDP、HTTP、HTTPS 等多种协议，且支持 P2P 通信。可以将内网服务以安全、便捷的方式通过具有公网 IP 节点的中转暴露到公网。
重大变化 关于 v2 的一些说明 v2 版本的复杂度和难度比我们预期的要高得多。我只能利用零散的时间进行开发，而且由于上下文经常被打断，效率极低。由于这种情况可能会持续一段时间，我们仍然会在当前版本上进行一些优化和迭代，直到我们有更多空闲时间来推进大版本的重构，或者也有可能放弃一次性的重构，而是采用渐进的方式在当前版本上逐步做一些可能会导致不兼容的修改。
v2 的构想是基于我多年在云原生领域，特别是在 K8s 和 ServiceMesh 方面的工作经验和思考。它的核心是一个现代化的四层和七层代理，类似于 envoy。这个代理本身高度可扩展，不仅可以用于实现内网穿透的功能，还可以应用于更多领域。在这个高度可扩展的内核基础上，我们将实现 frp v1 中的所有功能，并且能够以一种更加优雅的方式实现原先架构中无法实现或不易实现的功能。同时，我们将保持高效的开发和迭代能力。
除此之外，我希望 frp 本身也成为一个高度可扩展的系统和平台，就像我们可以基于 K8s 提供一系列扩展能力一样。在 K8s 上，我们可以根据企业需求进行定制化开发，例如使用 CRD、controller 模式、webhook、CSI 和 CNI 等。在 frp v1 中，我们引入了服务端插件的概念，实现了一些简单的扩展性。但是，它实际上依赖于简单的 HTTP 协议，并且需要用户自己启动独立的进程和管理。这种方式远远不够灵活和方便，而且现实世界的需求千差万别，我们不能期望一个由少数人维护的非营利性开源项目能够满足所有人的需求。
最后，我们意识到像配置管理、权限验证、证书管理和管理 API 等模块的当前设计并不够现代化。尽管我们可能在 v1 版本中进行一些优化，但确保兼容性是一个令人头疼的问题，需要投入大量精力来解决。
非常感谢您对 frp 的支持。
FRP 关联文件与配置 https://gofrp.org/zh-cn/docs/reference/</description></item><item><title>hping</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Utility/hping/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Utility/hping/</guid><description>概述 参考：
GitHub 项目，antirez/hping https://www.kali.org/tools/hping3/ https://salsa.debian.org/debian/hping3 Wiki, Hping 原始 GitHub 项目截至 2024-04-18 已经有 10 年没更新了。
hping 不支持 IPv6
https://github.com/TeddyGuo/tping 像 hping，但支持 IPv6，Python 编写
nping 由 Nmap
hping 是由 Salvatore Sanfilippo（也称为 Antirez）创建的 TCP/IP 协议的开源数据包生成器和分析器。它是用于防火墙和网络安全审计和测试的常用工具之一，用于利用空闲扫描扫描技术（也是由 hping 作者发明的），现在在 Nmap Security Scanner 中实现。新版本的 hping，hping3，可以使用 Tcl 语言编写脚本，并实现一个基于字符串的、人类可读的 TCP/IP 数据包描述引擎，以便程序员可以编写与低级 TCP/IP 数据包操作和分析相关的脚本。很短的时间。
Syntax(语法) EXAMPLE https://www.cnblogs.com/Higgerw/p/16469371.html
通过 eth1，发送 SYN 报文到 172.24.194.179 的 80 端口。源地址伪造为 192.168.180.131，时间间隔 1000us
hping3 -I eth0 -S 172.24.194.179 -p 80 -a 192.168.180.131 -i u1000 通过 eth1, 发送 SYN 报文到 192.</description></item><item><title>Netcat</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Utility/Netcat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Utility/Netcat/</guid><description>概述 参考：
Wike，Netcat Ncat Manual(手册) https://zhuanlan.zhihu.com/p/83959309 Netcat 是一个简单的实用程序通过 TCP 或 UDP 网络连接读取和写入数据。它旨在成为一个可靠的后端工具，可直接使用或轻松由其他程序和脚本驱动。同时，它还是一个功能丰富的网络调试和探索工具，因为它几乎可以创建您需要的任何类型的连接，包括端口绑定以接受传入连接。
由于 Netcat 的设计理念和功能，被人亲切的亲切得称为 网络工具中的瑞士军刀
最初的 Netcat 是由 hobbit 于 1995 年发布的，尽管它很受欢迎，但它并没有得到维护。有时甚至很难找到v1.10 源代码的副本。该工具的灵活性和实用性促使 Nmap 项目产生 Ncat)，这是一种支持 SSL、IPv6、SOCKS 和 http 代理、连接代理等的现代重新实现。除了 Nmap 项目重新了 Netcat，还有很多重写甚至扩展了 Netcat 的工具
Socat OpenBSD 的 Netcat Cryptcat Netcat6 pnetcat SBD 所谓的GNU Netcat 如需下载和更多信息， 访问 Netcat 主页。
Ncat 参考：
Nmap，ncat Ncat 是一个功能丰富的网络实用程序，它可以从命令行跨网络读取和写入数据。Ncat 由 Nmap 项目编写的，是对古老的 Netcat 的大大改进的重新实现。它同时使用 TCP 和 UDP 进行通信，并被设计为一种可靠的后端工具，可立即为其他应用程序和用户提供网络连接。Ncat 不仅适用于 IPv4 和 IPv6，还为用户提供了几乎无限的潜在用途。
在 Ncat 的众多功能中，包括将 Ncat 链接在一起、将 TCP 和 UDP 端口重定向到其他站点、SSL 支持以及通过 SOCKS4 或 HTTP（CONNECT 方法）代理（以及可选的代理身份验证）进行代理连接的能力。一些通用原则适用于大多数应用程序，从而使您能够立即向通常不支持它的软件添加网络支持。</description></item><item><title>nping</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Utility/nping/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Utility/nping/</guid><description>概述 参考：
Nmap，nping 由 Nmap 项目组开发的类似 hping 的工具
每次的发包都称为一次 Probe(探测)
Syntax(语法) 参考：
Manual(手册)，nping nping [OPTIONS] {&amp;lt;targets&amp;gt;}
OPTIONS &amp;ndash;tcp # 使用 TCP 探针模式
TCP 探针模式选项 -g, &amp;ndash;source-port PORT_NUMBER # 设置源端口
&amp;ndash;flags FLAG_LIST # 设置 TCP 的 Flag, 多个 Flag 以逗号分隔
IPv4 选项 -S, &amp;ndash;source-ip # 设置源 IP 地址
Timing 和 Performance &amp;ndash;delay TIME # 前后两次发送探测行为的间隔. i.e. 每隔 TIME 探测一次
其他 -c, &amp;ndash;count N # 在发送 N 次后停止程序. 若 N 设为 0 则永不停止.</description></item><item><title>Utility</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Utility/Utility/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Utility/Utility/</guid><description>概述 参考：
https://github.com/L-codes/Neo-reGeorg
TCP Ping 工具。用来实现类似 ping 的效果来测试 4 层端口连接状态
https://github.com/cloverstd/tcping</description></item><item><title>vsftpd</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Utility/vsftpd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Utility/vsftpd/</guid><description>概述 参考：
https://security.appspot.com/vsftpd.html Wiki, Vsftpd vsftpd 是实现 FTP 协议的程序
vsftp 关联文件与配置 /etc/vsftpd.conf # vsftpd 程序的配置文件
/etc/ftpusers # 此文件包含 禁止 FTP 登录的用户名，通常有&amp;quot;root&amp;quot;，&amp;ldquo;uucp&amp;rdquo;，&amp;ldquo;news&amp;rdquo; 之类，因为这些用户权限太高，登录 FTP 误操作危险性大。
User NAME User NAME User NAME &amp;hellip;&amp;hellip;. User NAME 配置文件 keywords 说明
最小基本配置
write_enable=YES # 对 ftp 服务器是否有写的权限 local_enable=YES # 是否允许本地用户登录(本地用户即 ftp 服务器自身的用户) anonymous_enable=NO # 是否允许匿名登录 扩展配置
chroot_local_user=YES # 是否启动本地用户 chroot 规则，chroot 改变登录 ftp 的本地用户根的目录位置 allow_writeable_chroot=YES # 允许在限定目录有写权限 chroot_list_enable=YES # 是否启动不受 chroot 规则的用户名单 chroot_list_file=/etc/vsftpd.chroot_list # 定义不受限制的用户名单在哪个文件中 pam_service_name=vsftpd 改为 pam_service_name=ftp # 如果始终登录时候提示密码错误，则修改此项 vsftp 可以使用 Chroot 功能。比如：下面第一个图是不启动 Chroot 规则的情况，第二张图是启用 Chroot 规则的情况，可以看到当使用 Chroot 时，/srv/ftp/ 目录对于 ftp 程序来说是作为 / 存在的。由于这个原因，所以启动 Chroot 的时候，ftp 工具无法访问所设定的 / 目录以外的其他目录</description></item></channel></rss>