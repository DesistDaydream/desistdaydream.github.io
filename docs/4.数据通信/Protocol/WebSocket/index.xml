<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>WebSocket on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/WebSocket/</link><description>Recent content in WebSocket on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/WebSocket/index.xml" rel="self" type="application/rss+xml"/><item><title>WebSocket</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/WebSocket/WebSocket/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/WebSocket/WebSocket/</guid><description>概述 参考：
RFC 6455, The WebSocket Protocol Wiki, WebSocket 公众号-小林 coding，有了 HTTP 协议，为什么还要有 websocket 协议？ WebSocket 是一种计算机通信协议，通过单个 TCP 连接提供全双工通信通道。
WebSocket 与 HTTP 不同。这两种协议都位于 OSI 模型的第 7 层，并依赖于第 4 层的 TCP。尽管它们不同，但 RFC 6455 指出 WebSocket “旨在通过 HTTP 端口 443 和 80 工作，并支持 HTTP 代理和中介” ，从而使其与 HTTP 兼容。为了实现兼容性，WebSocket 握手使用 HTTP Upgrade 头从 HTTP 协议更改为 WebSocket 协议。
WebSocket 协议支持 Web 浏览器（或其他客户端应用程序）和 Web 服务器之间的交互，其开销比半双工替代方案（例如 HTTP轮询）低，从而促进从服务器到服务器的实时数据传输。这是通过为服务器提供一种标准化的方式来向客户端发送内容而无需客户端首先请求，并允许消息在保持连接打开的同时来回传递而实现的。通过这种方式，可以在客户端和服务器之间进行双向正在进行的对话。通信通常通过 TCP端口完成数字 443（或在不安全连接的情况下为 80），这对于使用防火墙阻止非网络 Internet 连接的环境有益。类似的浏览器-服务器双向双向通信已经使用Comet或Adobe Flash Player等临时技术以非标准化方式实现。[2]
大多数浏览器都支持该协议，包括Google Chrome、Firefox、Microsoft Edge、Internet Explorer、Safari和Opera。[3] 与 HTTP 不同，WebSocket 提供全双工通信。[4][5] 此外，WebSocket 支持基于 TCP 的消息流。TCP 单独处理字节流，而没有消息的固有概念。在 WebSocket 之前，使用Comet通道可以实现端口 80 全双工通信；然而，Comet 的实现并不简单，并且由于 TCP 握手和 HTTP 标头开销，对于小消息来说效率低下。WebSocket 协议旨在在不损害 Web 安全假设的情况下解决这些问题。</description></item><item><title>有了 HTTP 协议，为什么还要有 websocket 协议？</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/WebSocket/%E6%9C%89%E4%BA%86-HTTP-%E5%8D%8F%E8%AE%AE%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%98%E8%A6%81%E6%9C%89-websocket-%E5%8D%8F%E8%AE%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/WebSocket/%E6%9C%89%E4%BA%86-HTTP-%E5%8D%8F%E8%AE%AE%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%98%E8%A6%81%E6%9C%89-websocket-%E5%8D%8F%E8%AE%AE/</guid><description>平时我们打开网页，比如购物网站某宝。都是点一下「列表商品」，跳转一下网页就到了「商品详情」。
从 HTTP 协议的角度来看，就是点一下网页上的某个按钮， 前端发一次 HTTP请 求，网站返回一次 HTTP 响应 。这种由客户端主动请求，服务器响应的方式也满足大部分网页的功能场景。
但有没有发现，这种情况下，服务器从来就「不会主动」给客户端发一次消息。就像你喜欢的女生从来不会主动找你一样。
但如果现在，你在刷网页的时候「右下角」突然弹出一个小广告，提示你【一个人在家偷偷才能玩哦】。
求知，好学，勤奋 ，这些刻在你 DNA 里的东西都动起来了。
你点开后发现。
长相平平无奇的古某提示你&amp;quot;道士 9 条狗，全服横着走&amp;quot;。
影帝某辉老师跟你说&amp;quot;系兄弟就来砍我&amp;quot;。
来都来了，你就选了个角色进到了游戏界面里。
创建角色页面
这时候，上来就是一个小怪，从远处走来，然后疯狂拿木棒子抽你。
你全程没点任何一次鼠标 。服务器就自动将怪物的移动数据和攻击数据源源不断发给你了。
这….太暖心了。
感动之余，问题就来了，
像这种 看起来服务器主动发消息给客户端的场景 ，是怎么做到的？
在真正回答这个问题之前，我们先来聊下一些相关的知识背景。
使用 HTTP 不断轮询 其实问题的痛点在于， 怎么样才能在用户不做任何操作的情况下，网页能收到消息并发生变更。
最常见的解决方案是， 网页的前端代码里不断定时发 HTTP 请求到服务器，服务器收到请求后给客户端响应消息。
这其实时一种「 伪 」服务器推的形式。
它其实并不是服务器主动发消息到客户端，而是客户端自己不断偷偷请求服务器，只是用户无感知而已。
用这种方式的场景也有很多，最常见的就是 扫码登录 。
比如，某信公众号平台，登录页面二维码出现之后， 前端 网页根本不知道用户扫没扫，于是不断去向 后端 服务器询问，看有没有人扫过这个码。而且是以大概 1 到 2 秒的间隔去不断发出请求，这样可以保证用户在扫码后能在 1 到 2 秒内得到及时的反馈，不至于 等太久 。
但这样，会有两个比较明显的问题：
当你打开 F12 页面时，你会发现满屏的 HTTP 请求。虽然很小，但这其实也消耗带宽，同时也会增加下游服务器的负担。 最坏情况下，用户在扫码后，需要等个 1~2 秒，正好才触发下一次 HTTP 请求，然后才跳转页面，用户会感到 明显的卡顿 。 使用起来的体验就是，二维码出现后，手机扫一扫，然后在手机上点个确认，这时候 卡顿等个 1~2 秒 ，页面才跳转。</description></item></channel></rss>