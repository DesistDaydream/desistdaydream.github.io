<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>TCP on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/TCP_IP/TCP/</link><description>Recent content in TCP on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/TCP_IP/TCP/index.xml" rel="self" type="application/rss+xml"/><item><title>TCP</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/TCP_IP/TCP/TCP/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/TCP_IP/TCP/TCP/</guid><description>概述 参考：
RFC 675, RFC 793, TRANSMISSION CONTROL PROTOCOL - DARPA INTERNET PROGRAM PROTOCOL SPECIFICATION RFC 9293, Transmission Control Protocol (TCP) Wiki, TCP 极客时间,趣谈网络协议 https://www.jianshu.com/p/1118f497a425 https://www.jianshu.com/p/3c7a0771b67e 公众号-小林coding，通过动图学习 TCP 的滑动窗口和流量控制的工作方式 https://www2.tkn.tu-berlin.de/teaching/rn/animations/gbn_sr/ https://www2.tkn.tu-berlin.de/teaching/rn/animations/flow/ Transmission Control Protocol(传输控制协议，简称 TCP) 是互联网协议套件的最主要协议之一。它起源于最初的网络实现，补充了 Internet Protocol。因此整个套件通常称为 TCP/IP。
IP 地址后面的端口的作用：当从外部访问该 IP 地址的机器时候，是通过该 IP 地址的端口来访问这台机器的某个程序，然后程序向访问者提供该程序所具有的功能（服务）。web 界面默认是 80 端口，那么当你访问一个网页的时候，这个 IP 就会带你访问该机器的占用 80 端口的程序，然后该程序去调用首页脚本本间展示给访问者
例如：你通过远程 SSH 访问一台设备 192.168.0.1 的话，那么需要设置一下这台机器 SSH 服务程序所占用的端口号，比如 22，那么你就是通过 192.168.0.1:22 这个来访问这台机器的 SSH 进程。
上面的描述，就是一个基本的 TCP。
TCP 天然认为网络环境是恶劣的，丢包、乱序、重传，拥塞都是常有的事情，一言不合就可能送达不了，因而要从算法层面来保证可靠性。TCP 是靠谱的协议，但是这不能说明它面临的网络环境好。从 IP 层面来讲，如果网络状况的确那么差，是没有任何可靠性保证的，而作为 IP 的上一层 TCP 也无能为力，唯一能做的就是更加努力，不断重传，通过各种算法保证。也就是说，对于 TCP 来讲，IP 层你丢不丢包，我管不着，但是我在我的层面上，会努力保证可靠性。这有点像如果你在北京，和客户约十点见面，那么你应该清楚堵车是常态，你干预不了，也控制不了，你唯一能做的就是早走。打车不行就改乘地铁，尽力不失约。</description></item><item><title>TCP Header</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/TCP_IP/TCP/TCP-Header/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/TCP_IP/TCP/TCP-Header/</guid><description>概述 参考：
RFC 9293，3.1.Header Format TCP 段被封装在 IP 数据报中
首部长度：一般为 20 字节，选项最多 40 字节，限制 60 字节。下图中的位，即代表 bit，也就是说，首部一共 160 bit，即 20 Byte。
对照在 WireShark 中展示的内容看，排除 [] 中的内容，WireShark 中展示的一个 SYN TCP 段的内容，每一行就是包头中的一个内容
Source Port(源端口号) # Destination Port(目的端口号) # 每个 TCP 报文段都包含源和目的的端口号，这两个端口号用于寻找发送端与接收端的应用进程。这两个值加上 IP 首部中的源和目的的 IP 地址，组成 TCP 四元组，用于确定唯一一个 TCP 连接。 Sequence Number(序号，简称 SeqNum) # TCP 报文段的唯一标识符，该标识符具有先后顺序。如果不为每一个包编号，则没法确认哪个包先来哪个包后来。 SeqNum 用来解决网络包乱序的问题。 Initial Sequence Number(初始序号，简称 ISN) # TCP 交互的两端，有一个初始的 SeqNum，就是 A 发送给 B 或者 B 发送给 A 的第一个 TCP 段，这第一个 TCP 段的 SeqNum 就是 ISN。 注意：TCP 为应用层提供全双工服务，这意味着数据能在两个方向上独立进行传输。因此，一个 TCP 连接的两端都会有自己独立的 SeqNum。所以首次建立连接时客户端和服务端都会生成一个 ISN。ISN 是一个随机生成的数。 SeqNum 最大值为 232-1，到达最大值后，回到 0 开始。 Acknowledgment Number(确认序号，简称 AckNum) # 下一次期望收到数据中报文段的 SeqNum。发出去的包应该有确认，要不然怎么知道对方有没有收到呢？如果没有收到就应该重新发送，直到送达。 AckNum 用来解决丢包的问题。 AckNum 可以用来确认上次发送的数据大小。 假如 172.</description></item><item><title>常见 TCP 端口号</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/TCP_IP/TCP/%E5%B8%B8%E8%A7%81-TCP-%E7%AB%AF%E5%8F%A3%E5%8F%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/TCP_IP/TCP/%E5%B8%B8%E8%A7%81-TCP-%E7%AB%AF%E5%8F%A3%E5%8F%B7/</guid><description>Socket 网络端口含义 参考：
Wiki, TCP 与 UDP 端口号列表 IANA，分配-服务名和端口号注册列表 分类情况：
WellKnownPorts(公认端口) 从 0 到 1023，它们紧密绑定（binding）于一些服务。通常这些端口的通讯明确表明了某种服务的协议。这些端口由 IANA 分配管理，IANA(The Internet Assigned Numbers Authority，互联网数字分配机构)是负责协调一些使 Internet 正常运作的机构 RegisteredPorts(注册端口) 从 1024 到 49151。是公司和其他用户向互联网名称与数字地址分配机构（ICANN）登记的端口号，利用因特网的传输控制协议（TCP）和用户数据报协议（UDP）进行通信的应用软件需要使用这些端口。在大多数情况下，这些应用软件和普通程序一样可以被非特权用户打开。 Dynamicand/orPrivatePorts(动态和/或私有端口) 从 49152 到 65535。这类端口号仅在客户进程运行时才动态选择，因此又叫做短暂端口号。被保留给客户端进程选择暂时使用的。也可以理解为，客户端启动的时候操作系统随机分配一个端口用来和服务器通信，客户端进程关闭下次打开时，又重新分配一个新的端口。 TCP/UDP 端口列表 计算机之间依照互联网传输层TCP/IP 协议的协议通信，不同的协议都对应不同的端口。并且，利用数据报文的UDP也不一定和TCP采用相同的端口号码。以下为两种通信协议的端口列表链接
众所周知的端口 0 到 1023 号端口
0 到 1023（0 到 2^10 − 1）范围内的端口号是众所周知的端口或系统端口。 它们由提供广泛使用的网络服务类型的系统进程使用。在类 Unix 操作系统上，进程必须以超级用户权限执行才能使用众所周知的端口之一将网络套接字绑定到 IP 地址。
以下列表仅列出常用端口，详细的列表请参阅 IANA 网站。
注册端口 https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers#Registered_ports
1024 - 49151 号端口
从1024 到 49151 (210到214 215-1) 的端口号范围是注册的端口。IANA在请求实体申请时将它们分配给特定服务。[2] 在大多数系统上，注册端口可以在没有超级用户特权的情况下使用。</description></item><item><title>其他</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/TCP_IP/TCP/%E5%85%B6%E4%BB%96/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/TCP_IP/TCP/%E5%85%B6%E4%BB%96/</guid><description>我跟面试官聊 TCP 三次握手源码，他夸我真棒！ https://mp.weixin.qq.com/s/UHuey2WKzsdw6RR4aOT8rg
TCP 的 FIN_WAIT1 状态理解|深入理解 TCP https://mp.weixin.qq.com/s/ikKSEh20gBFcVOYDOtUiaw</description></item></channel></rss>