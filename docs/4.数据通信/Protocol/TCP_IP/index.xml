<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>TCP/IP on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/TCP_IP/</link><description>Recent content in TCP/IP on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/TCP_IP/index.xml" rel="self" type="application/rss+xml"/><item><title>TCP/IP</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/TCP_IP/TCP_IP/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/TCP_IP/TCP_IP/</guid><description>概述 参考：
RFC，791 Wiki, Internet protocol suite Internet protocol suite(互联网协议簇) 通常称为 TCP/IP
封装 当应用程序用 TCP 传输数据时，数据被送入协议栈中，然后逐个通过每一层直到被当做一串比特流送入网络。其中每一层对收到的数据都要增加一些首部信息(有时还需要增加尾部信息)，过程如图所示：
以太网帧的帧头和帧尾下面所标注的数字是典型以太网帧首部的字节查高难度。以太网数据帧的物理特性是其查高难度必须在 46~1500 字节之间(也就是 MTU 的长度)
注意：所有的 Internet 标准和大多数有关 TCP/IP 的书都使用 octe 这个术语来表示字节。使用这个过分雕琢的术语是有历史原因的，因为 TCP/IP 的很多工作都是在 DEC-10 系统上进行的，但是它并不使用 8bit 的字节。由于现在几乎所有的计算机系统都采用 8bit 的字节，因此我们在本书中使用 Byte(字节) 这个术语。
由于应用数据受 MSS 长度限制，IP 首部 + TCP 首部 + 应用数据受 MTU 长度限制。所以，当一个 IP 报文超过 MTU 时就会进行 Packet(分片/分组)。分组既可以是一个 IP 数据报，也可以是 IP 数据报的一个 Fragment(片段)。</description></item><item><title>TCP 异常处理</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/TCP_IP/TCP-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/TCP_IP/TCP-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</guid><description>概述 参考：
有些 TCP 异常处理的详解在 WireShark 目录下的 TCP Analysis 笔记中
万字长文 | 23 个问题 TCP 疑难杂症全解析 原文: https://juejin.cn/post/6869734247465402382
https://mp.weixin.qq.com/s/cyeeXx7fLZ_ngB-QnMM_TQ 每个时代，都不会亏待会学习的人。
在进入今天主题之前我先抛几个问题，这篇文章一共提出 23 个问题。
TCP 握手一定是三次？TCP 挥手一定是四次？
为什么要有快速重传，超时重传不够用？为什么要有 SACK，为什么要有 D-SACK？
都知道有滑动窗口，那由于接收方的太忙了滑动窗口降为了 0 怎么办？发送方就永远等着了？
Silly Window 又是什么？
为什么有滑动窗口流控还需要拥塞控制？
快速重传一定要依赖三次重复 ACK ？
这篇文章我想由浅到深地过一遍 TCP，不是生硬的搬出各个知识点，从问题入手，然后从发展、演进的角度来看 TCP。
起初我在学计算机网络的时候就有非常非常多的疑问，脑子里简直充满了十万个为什么，而网络又非常的复杂，发展了这么多年东西真的太多了，今天我就大致的浅显地说一说我对 TCP 这些要点的理解。
好了，废话不多说，开始上正菜。
TCP 是用来解决什么问题？ TCP 即 Transmission Control Protocol，可以看到是一个传输控制协议，重点就在这个控制。
控制什么？
控制可靠、按序地传输以及端与端之间的流量控制。够了么？还不够，它需要更加智能，因此还需要加个拥塞控制，需要为整体网络的情况考虑。
这就是出行你我他，安全靠大家。
为什么要 TCP，IP 层实现控制不行么？ 我们知道网络是分层实现的，网络协议的设计就是为了通信，从链路层到 IP 层其实就已经可以完成通信了。
你看链路层不可或缺毕竟咱们电脑都是通过链路相互连接的，然后 IP 充当了地址的功能，所以通过 IP 咱们找到了对方就可以进行通信了。
那加个 TCP 层干啥？IP 层实现控制不就完事了嘛？</description></item><item><title>TCP 重置</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/TCP_IP/TCP-%E9%87%8D%E7%BD%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/TCP_IP/TCP-%E9%87%8D%E7%BD%AE/</guid><description>概述 参考：
公众号-小林coding，原来墙，是这么把我 TCP 连接干掉的！ 大家好，我是小林。
再过几天就春节了，应该很多小伙伴都已经放假了，或者是在回家的路上。
就不聊太硬核的技术了，今天聊一个比较轻松的问题：如何关闭一个 TCP 连接？
可能大家第一反应是「杀掉进程」不就行了吗？
是的，这个是最粗暴的方式，杀掉客户端进程和服务端进程影响的范围会有所不同：
在客户端杀掉进程的话，就会发送 FIN 报文，来断开这个客户端进程与服务端建立的所有 TCP 连接，这种方式影响范围只有这个客户端进程所建立的连接，而其他客户端或进程不会受影响。 而在服务端杀掉进程影响就大了，此时所有的 TCP 连接都会被关闭，服务端无法继续提供访问服务。 所以，关闭进程的方式并不可取，最好的方式要精细到关闭某一条 TCP 连接。
有的小伙伴可能会说，伪造一个四元组相同的 RST 报文不就行了？
这个思路很好，「伪造 RST 报文来关闭 TCP 连接」的方式其实有个专业术语叫：TCP 重置攻击。
我们的墙，在过滤网站的时候，其实就是这么干的。当然，墙除了 TCP 重置连接的方式外，还有很多方式来过滤网站，比如域名劫持、IP封锁、HTTPS 证书过滤等等。
这次我们只重点关注 TCP 重置技术。
TCP 重置技术 伪造 RST 报文说来简单，但是不要忘了还有个「序列号」的问题，你伪造的 RST 报文的序列号一定能被对方接受吗？
如果 RST 报文的序列号不是对方期望收到的序列号，那么这个 RST 报文则会被对方丢弃，就达不到重置 TCP 连接的效果了。
举个例子，下面这个场景，客户端发送了一个长度为 100 的 TCP 数据报文，服务端收到后响应了 ACK 报文，表示收到了这个 TCP 数据报文。服务端响应的这个 ACK 报文中的确认号（ack = x + 100）就是表明服务端下一次期望收到的序列号是 x + 100。</description></item><item><title>TCP/IP 管理工具</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/TCP_IP/TCP_IP-%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/TCP_IP/TCP_IP-%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</guid><description>概述 获取本机公网 IP ipify https://geo.ipify.org/docs
func main() { res, _ := http.Get(&amp;#34;https://api.ipify.org&amp;#34;) ip, _ := ioutil.ReadAll(res.Body) os.Stdout.Write(ip) } 其他 https://ip.netarm.com http://ip.cip.cc http://ip.sb https://geo.ipify.org/docs</description></item></channel></rss>