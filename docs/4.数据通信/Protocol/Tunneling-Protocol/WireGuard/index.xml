<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>WireGuard on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/Tunneling-Protocol/WireGuard/</link><description>Recent content in WireGuard on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/Tunneling-Protocol/WireGuard/index.xml" rel="self" type="application/rss+xml"/><item><title>WireGuard</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/Tunneling-Protocol/WireGuard/WireGuard/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/Tunneling-Protocol/WireGuard/WireGuard/</guid><description>概述 参考：
官网 zx2c4 源码，wireguard-linux GitHub 项目，WrieGuard/wireguard-linux Wiki, WireGuard 张馆长博客，个人办公用 wireguard 组网笔记 米开朗基杨博客，WireGuard 教程：WireGuard 的工作原理 WireGuard 是一种可以实现加密 VPN 的通信协议。通常也表示为实现该通信协议的软件。
WireGuard 是由 Jason Donenfeld 等人用 C 语言编写的一个开源 VPN 协议，被视为下一代 VPN 协议，旨在解决许多困扰 IPSec/IKEv2、OpenVPN 或 L2TP 等其他 VPN 协议的问题。它与 Tinc 和 MeshBird 等现代 VPN 产品有一些相似之处，即加密技术先进、配置简单。
[!Tip] 从 2020 年 1 月开始，Wireguard 已经并入了 Linux 内核的 5.6 版本，这意味着大多数 Linux 发行版的用户将拥有一个开箱即用的 WireGuard。
WireGuard 没有传统的 Server 端、Client 端的概念，在 WireGuard 构建的 VPN 环境中，使用 Peer 来描述 VPN 中的每一个网络节点，这个 Peer 可以是 服务器、路由器、etc.</description></item><item><title>Wireguard 流量伪装</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/Tunneling-Protocol/WireGuard/Wireguard-%E6%B5%81%E9%87%8F%E4%BC%AA%E8%A3%85/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/Tunneling-Protocol/WireGuard/Wireguard-%E6%B5%81%E9%87%8F%E4%BC%AA%E8%A3%85/</guid><description>概述 参考：
WireGuard 在国内网络环境下会遇到一个致命的问题：UDP 封锁/限速。虽然通过 WireGuard 可以在隧道内传输任何基于 IP 的协议（TCP、UDP、ICMP、SCTP、IPIP、GRE 等），但 WireGuard 隧道本身是通过 UDP 协议进行通信的，而国内运营商根本没有能力和精力根据 TCP 和 UDP 的不同去深度定制不同的 QoS 策略，几乎全部采取一刀切的手段：对 UDP 进行限速甚至封锁。
虽然运营商对 UDP 不友好，但却无力深度检测 TCP 连接的真实性。既然对 TCP 连接睁一只眼闭一只眼，那我将 UDP 连接伪装成 TCP 连接不就蒙混过关了。目前支持将 UDP 流量伪装成 TCP 流量的主流工具是 udp2raw，另一款比它更强大的新工具：Phantun。
udp2raw 参考：
GitHub 项目，wangyu-/udp2raw 使用原始套接字将 UDP 流量转换为加密的 UDP/FakeTCP/ICMP 流量的隧道，帮助您绕过 UDP 防火墙（或不稳定的 UDP 环境）
部署 这里我使用 docker 部署的，实体进程和相关文档见 udp2raw 运行
Linux server 端 :
# 监听86的tcp端口，把86端口收到的伪装成tcp的udp报文转发到 127.0.0.1:16000 上 docker run \ -d --name udp2raw \ --restart always \ --net host \ --cap-add NET_RAW \ --cap-add NET_ADMIN \ -v /run/xtables.</description></item><item><title>WireGuard 部署</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/Tunneling-Protocol/WireGuard/WireGuard-%E9%83%A8%E7%BD%B2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/Tunneling-Protocol/WireGuard/WireGuard-%E9%83%A8%E7%BD%B2/</guid><description>概述 参考：
原文链接：https://mp.weixin.qq.com/s/vbt30eEGcp5JP5sHAPkwhw 英文原文链接: https://github.com/pirate/wireguard-docs 安装 WireGuard Unix-like OS 安装 WireGuard 本质是安装如下几个程序：
wireguard # WireGuard 的实现。wireguard 程序有两种实现方式，分为是用户态的实现与内核态的实现。 CLI wg # 管理 WireGuard 网络。生成密钥、设置网络设备信息、查看状态、etc. wg-quick # 用户友好的命令行工具，可以通过配置文件管理调用 wg 程序以启动或停止 WireGuard [!Tip] wireguard 用户态与内核态的实现
绝大多数 Unix-like OS 发行版的内核版本（Linux Kernel 5.6 版本开始）通常都内置了 wireguard 模块。
有些设备内核没有 wireguard 模块，使用 modprob wireguard 命令加载模块时报错 modprobe: FATAL: Module wireguard not found in directory /lib/modules/$(uanme -r)，此时可以利用用户态的 Wireguard 程序实现 Wireguard 互联。
https://github.com/WireGuard/wireguard-go 是使用 Go 语言在用户态实现的 Wireguard https://github.com/cloudflare/boringtun 是使用 Rust 语言在用户态实现的 Wireguard etc.</description></item><item><title>Wireguard配置详解</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/Tunneling-Protocol/WireGuard/Wireguard-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/Tunneling-Protocol/WireGuard/Wireguard-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</guid><description>概述 参考：
https://zhangguanzhang.github.io/2020/08/05/wireguard-for-personal/ https://fuckcloudnative.io/posts/wireguard-docs-practice/#peer WireGuard 使用 INI 作为其配置文件格式。配置文件可以放在任何路径下，但必须通过绝对路径引用。默认路径是 /etc/wireguard/*.conf。
配置文件的命名形式必须为 ${WireGuard_Interface_Name}.conf。通常情况下 WireGuard 接口名称以 wg 为前缀，并从 0 开始编号，但你也可以使用其他名称，只要符合正则表达式 ^[a-zA-Z0-9_=+.-]{1,15}$ 就行。当启动时，如果配置文件中有 wg0.conf 文件，则会创建一个名为 wg0 的网络设备。效果如下
注意：${WireGuard_Interface_Name} 不能过长，否则将会报错：wg-quick: The config file must be a valid interface name, followed by .conf
基本配置示例 [Interface] # Name = node1.example.tld Address = 192.0.2.3/32 ListenPort = 51820 PrivateKey = localPrivateKeyAbcAbcAbc= DNS = 1.1.1.1,8.8.8.8 Table = 12345 MTU = 1500 PreUp = /bin/example arg1 arg2 %i PostUp = /bin/example arg1 arg2 %i PreDown = /bin/example arg1 arg2 %i PostDown = /bin/example arg1 arg2 %i [Peer] # Name = node2-node.</description></item><item><title>天津测试环境</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/Tunneling-Protocol/WireGuard/%E5%BA%94%E7%94%A8%E7%A4%BA%E4%BE%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/Tunneling-Protocol/WireGuard/%E5%BA%94%E7%94%A8%E7%A4%BA%E4%BE%8B/</guid><description>生成公钥与私钥 wg genkey | tee /etc/wireguard/key/company/company-privatekey | wg pubkey &amp;gt; /etc/wireguard/key/company/company-publickey Peer-client 配置，作为客户端访问各资源池 cat &amp;gt; /etc/wireguard/company/company-client.conf &amp;lt;&amp;lt;EOF [Interface] PrivateKey = $(cat /etc/wireguard/key/peer-client-privatekey) Address = 10.1.0.253/24 [Peer] PublicKey = $(cat /etc/wireguard/key/gw-publickey) AllowedIPs = 10.1.0.0/24,10.20.5.0/24,172.38.0.0/16 Endpoint = $(curl -s ip.sb):16000 PersistentKeepalive = 10 EOF 中继服务器配置 带公网的 Peer 配置文件，该 Peer 作为中继服务器，负责连通访问客户端和所有资源池
cat &amp;gt; /etc/wireguard/company-wg.conf &amp;lt;&amp;lt;EOF [Interface] ListenPort = 16000 Address = 10.1.0.254/24 PrivateKey = $(cat /etc/wireguard/key/gw-privatekey) PostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -A FORWARD -o %i -j ACCEPT; iptables -t nat -A POSTROUTING -o ens3 -j MASQUERADE PostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -D FORWARD -o %i -j ACCEPT; iptables -t nat -D POSTROUTING -o ens3 -j MASQUERADE [Peer] # 客户端 PublicKey = $(cat /etc/wireguard/key/peer-client-publickey) AllowedIPs = 10.</description></item></channel></rss>