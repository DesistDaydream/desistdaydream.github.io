<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tunneling Protocol(隧道协议) on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/Tunneling-Protocol/</link><description>Recent content in Tunneling Protocol(隧道协议) on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/Tunneling-Protocol/index.xml" rel="self" type="application/rss+xml"/><item><title>Tunneling Protocol</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/Tunneling-Protocol/Tunneling-Protocol/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/Tunneling-Protocol/Tunneling-Protocol/</guid><description>概述 参考：
Wiki, Tunneling Protocol Wiki, Overlay Network Tunneling Protocol(隧道协议) 是一种通信协议，允许数据从一个网络移动到另一个网络。该协议通过通信协议中 Encapsulation(封装) 的过程跨公共网络发送专用网络通信。因为隧道涉及将流量数据重新打包为不同的形式，可能以加密为标准，它可以隐藏通过隧道运行的流量的性质。隧道协议通过使用数据包的 Payload(数据部分) 来承载实际提供服务的数据包。隧道使用分层协议模型，例如 OSI 或 TCP/IP 协议套件中的那些，但在使用有效载荷承载网络通常不提供的服务时通常会违反分层。通常，在分层模型中，传送协议在与有效载荷协议相同或更高的级别上运行。
隧道技术是一种通过使用互联网络的基础设施在网络之间传递数据的方式。使用隧道传递的数据（或负载）可以是不同协议的数据帧或包。隧道协议将其它协议的数据帧或包重新封装然后通过隧道发送。新的帧头提供路由信息，以便通过互联网传递被封装的负载数据。
隧道的常见用途
隧道协议可以允许外部协议在不支持该特定协议的网络上运行，例如在 IPv4 上运行 IPv6。 另一个重要用途是提供仅使用底层网络服务提供的不切实际或不安全的服务，例如向其物理网络地址不属于公司网络的远程用户提供公司网络地址。 用户还可以使用隧道“潜入”防火墙，使用防火墙通常会阻止的协议，但“包装”在防火墙不会阻止的协议中，例如 HTTP。如果防火墙策略没有明确排除这种“包装”，则此技巧可以绕过预期的防火墙策略（或任何一组互锁的防火墙策略）。 另一种基于 HTTP 的隧道方法使用 HTTP CONNECT 方法/命令。客户端向 HTTP 代理发出 HTTP CONNECT 命令。然后，代理与特定的 server:port 建立 TCP 连接，并在该 server:port 和客户端连接之间中继数据。 [1]因为这会产生安全漏洞，所以支持 CONNECT 的 HTTP 代理通常会限制对 CONNECT 方法的访问。代理仅允许连接到特定端口，例如 HTTPS 的 443。 应用场景：
一个公司在天津与北京分别有一个办公地点，天津的内网为 10.0.0.0/24，北京的内网为 10.0.1.0/24。那么如何让两个内网互通呢?可以使用 tunnel 技术，在两地公网出口建立隧道连接。天津访问北京的时候，目的内网地址是封装在公网 IP 里面的，这样就可以让私网地址的数据在公网传输。比如大企业都有自己的隧道网络，当使用个人电脑，安装上某些隧道软件后，那么这台电脑就可以访问公司内部网络了。 Overlay Overlay(叠加网络) 实际上是一种隧道封装技术，是对隧道技术的扩展。传统隧道技术仅限于隧道两端通信，而 Overlay 网络则可以实现 N 个端点之间的互相通信。</description></item><item><title>GRE</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/Tunneling-Protocol/GRE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/Tunneling-Protocol/GRE/</guid><description>概述 参考：
Generic Routing Encapsulation(通用路由封装，简称 GRE) 是一种隧道协议，在数据两端，对数据进行封装和解封装。是 Cisco Systems 开发的隧道协议，可以通过 Internet 协议网络将各种网络层协议封装在虚拟点对点链路中。
如上图，当从本机想要通过隧道发送数据时，会通过 GRE 模块进行封装，然后把对外通信的 IP 地址当做 GRE 的外部地址，封装在最外成变成新的 IP。此时，GRE 还会有一个内部地址用来与隧道的对端进行协商，以便识别公网上的隧道两端的设备
Linux 下实现 GRE 场景一：
如果 Linux1 想要访问 10.10.2.0/24 网段的设备，这时候可以使用 GRE 建立隧道来实 现。比如在 Linux1 上想访问 10.10.2.100 这台设备，把数据包通过手动添加路由的方式，直接送给 tun 设备，tun 设备会直接把数据包发送给其隧道的对端(i.e.Linux2)，当 Linux2 收到这个数据包时，会发现 GRE 的包头，并解开 GRE 后发现真实的目的地址(10.10.2.100)，这时候可以在 Linux2 上做一个 snat，指明源地址 172.16.0.1/32 且目的地址是 10.10.2.0/24 网段的数据包全部把源地址转换成 10.10.2.1(如果不做 snat，源地址是 172.16.0.1，在回包的时候，是无法回去的，否则再添加其余路由条目)
场景二：
10.10.0.1/24 与 10.10.1.1/24 作为网段的网关使用，可以让两边的内网机器，直接互相访问。同样需要手动添加路由，目的地址是对端内网网段的 IP 的数据包送给 tun 设备。
注意：在 Linux1 上 ping172.16.0.2 的时候，在 Linux2 上抓包的话，会显示源地址是 172.</description></item><item><title>IPsec and L2TP</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/Tunneling-Protocol/IPsec-and-L2TP/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/Tunneling-Protocol/IPsec-and-L2TP/</guid><description>概述 参考：
Wiki, IPsec Wiki, L2TP Internet Protocol Security(因特网协议安全，简称 IPsec) 是一种安全网络协议套件，可对数据包进行身份验证和加密，以通过 Internet 协议网络在两台计算机之间提供安全的加密通信。它用于虚拟专用网络 (VPN)。
Layer 2 Tunneling Protocol(2层隧道协议，简称 L2TP) 是一种隧道协议，用于支持虚拟专用网络 (VPN) 或作为 ISP 提供服务的一部分。它仅对其自己的控制消息使用加密（“隐藏”）（使用可选的预共享秘密），并且其本身不提供任何内容加密或机密性。相反，它为第 2 层提供隧道（可以加密），并且隧道本身可以通过第 3 层加密协议（例如 IPsec）进行传递。
知乎，既然IPsec有隧道模式，为什么还有L2TP+IPsec这样的组合？
您好，这是必应。根据我从网络上搜索到的信息，我给您简单介绍一下 ipsec 和 l2tp 的区别：
ipsec 是一种安全协议，它可以在网络层对数据进行加密、认证和完整性保护，防止数据被窃听、篡改或伪造。 l2tp 是一种隧道协议，它可以在数据链路层对数据进行封装和传输，实现不同网络之间的透明连接。 ipsec 和 l2tp 可以单独使用，也可以结合使用。当单独使用时，ipsec可以提供数据的安全性，但不能跨越不同的网络类型；l2tp可以提供数据的透明性，但不能保证数据的安全性。 当结合使用时，ipsec 和 l2tp 可以互补，实现数据的安全和透明传输。一般有两种组合方式：ipsec over l2tp 和 l2tp over ipsec。前者是先用ipsec加密数据，再用l2tp封装数据；后者是先用l2tp封装数据，再用 ipsec 加密数据。 Libreswan https://github.com/libreswan/libreswan
https://libreswan.org/
https://github.com/hwdsl2/setup-ipsec-vpn/blob/master/README-zh.md
https://github.com/hwdsl2/docker-ipsec-vpn-server/blob/master/README-zh.md IKEv2 客户端 参考：
https://github.com/hwdsl2/setup-ipsec-vpn/blob/master/docs/ikev2-howto-zh.md 现代操作系统支持 IKEv2 协议标准。因特网密钥交换（英语：Internet Key Exchange，简称 IKE 或 IKEv2）是一种网络协议，归属于 IPsec 协议族之下，用以创建安全关联 (Security Association, SA)。与 IKE 版本 1 相比较，IKEv2 的 功能改进 包括比如通过 MOBIKE 实现 Standard Mobility 支持，以及更高的可靠性。</description></item><item><title>PPTP</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/Tunneling-Protocol/PPTP/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/Tunneling-Protocol/PPTP/</guid><description>概述 参考：
Point-to-Point Tunneling Protocol(点对点隧道协议，简称 PPTP) 是一种过时的实现虚拟专用网络的方法。 PPTP 有许多众所周知的安全问题。
Note：pptpd 存在安全隐患，详情可参考这里
PPTP 使用 TCP 控制通道和通用路由封装隧道来封装 PPP 数据包。许多现代 VPN 使用各种形式的 UDP 来实现相同的功能。
Poptop Poptop 是 The PPTP Server for Linux
官方网址：http://poptop.sourceforge.net/
Poptop 的安装 需要 epel 源
yum install pptpd
Poptop 关联文件与配置 /etc/pptpd.conf # pptpd 主程序的主配置文件
localip IP # 当远程客户端连接到本地服务时，服务端建立虚拟网卡所用的 ip
remoteip IP-Range # 远程客户端连接到本地服务后，可以分配的给客户端的 ip 范围
Note：这俩配置完成后，当客户端连接时，就会出现下面虚拟网卡。
4: ppp0: &amp;lt;POINTOPOINT,MULTICAST,NOARP,UP,LOWER_UP&amp;gt; mtu 1396 qdisc pfifo_fast state UNKNOWN group default qlen 3 link/ppp inet 192.</description></item><item><title>TODO</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/Tunneling-Protocol/TODO/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/Tunneling-Protocol/TODO/</guid><description>概述 参考：
https://github.com/drunkdream/turbo-tunnel
https://github.com/turbo-tunnel/docs https://github.com/turbo-tunnel/telnet-go # 这是一个用go实现的telnet程序，你可以把它当作一个普通的 telnet 客户端来用（访问中文 telnet 服务端可能会有乱码）。当然，它的真正用途并不在此，而是用于当 SSH 服务端不支持端口转发时建立一个 TCP 隧道。实现原理是通过将 socket 双向通信转换为对stdin和stdout的读写，而stderr则用于日志或错误信息的输出。</description></item><item><title>Vmess</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/Tunneling-Protocol/Vmess/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/Tunneling-Protocol/Vmess/</guid><description>概述 参考：
https://www.chengxiaobai.com/essays/v2ray-trojan-xray.html
Vmess 协议是 V2Ray 项目的主流加密协议
Xray 参考：
原文: https://qoant.com/2021/04/vps-with-xray/ V2Fly 与 V2Ray
V2Fly 是 V2Ray 的延伸，因为 V2Ray 仓库的作者失踪，所以建立了 V2Fly，本质上两者没区别。
Xray 介绍 由于 Debian 包维护人员发现 XTLS库 的 LICENSE 不是 BSD 许可，提了一个 issue 希望作者 @rprx 能修改 LISENCE 许可方便打包，详见 https://github.com/XTLS/Go/issues/9。由这个 issue 引发了广泛讨论，rprx 认为目前许可不是问题，也有不少人认为协议是立场的体现，各执一词。
最终 V2ray(V2fly社区) 维护团队经过投票确认 XTLS 不符合 V2ray 的 MIT 协议，并在 V2ray-core 4.33.0版本移除了 XTLS。rprx 和其拥护者行动起来，很快就创建了 Project X 项目和其核心 Xray（Xray取名来自XTLS和V2ray的结合），并以 XTLS 为核心协议陆续发布了 Xray-core 的多个版本，于是 Xray 诞生了。
XTLS 和 Xray 离不开作者 @rprx 的辛勤付出，因此也简要介绍一下 @rprx：</description></item><item><title>为什么集群需要 Overlay 网络</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/Tunneling-Protocol/%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9B%86%E7%BE%A4%E9%9C%80%E8%A6%81-Overlay-%E7%BD%91%E7%BB%9C/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/Tunneling-Protocol/%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9B%86%E7%BE%A4%E9%9C%80%E8%A6%81-Overlay-%E7%BD%91%E7%BB%9C/</guid><description>原文链接：https://mp.weixin.qq.com/s/a1omUj17yNVUuymh6DYpRQ
对计算机网络或者 Kubernetes 网络稍有了解的工程师都应该听说过延展网络（Overlay Network），Overlay 网络其实并不是一门新技术，它是指构建在另一个网络上的计算机网络[^1]，这是一种网络虚拟化技术的形式，近年来云计算虚拟化技术的演进促进了网络虚拟化技术的应用。
overlay-network
图 1 - 延展网络
因为 Overlay 网络是建立在另一个计算机网络之上的虚拟网络，所以它不能独立出现，Overlay 底层依赖的网络就是 Underlay 网络，这两个概念也经常成对出现。
Underlay 网络是专门用来承载用户 IP 流量的基础架构层，它与 Overlay 网络之间的关系有点类似物理机和虚拟机。Underlay 网络和物理机都是真正存在的实体，它们分别对应着真实存在的网络设备和计算设备，而 Overlay 网络和虚拟机都是依托在下层实体使用软件虚拟出来的层级。
network-and-compute
图 2 - 网络与计算
在分析 Overlay 网络的作用之前，我们需要对它的常见实现有大概的了解，在实践中我们一般会使用虚拟局域网扩展技术（Virtual Extensible LAN，VxLAN）组建 Overlay 网络。在下图中，两个物理机可以通过三层的 IP 网络互相访问：
VxLAN-overlay-network
图 3 - VxLAN 组成的 Overlay 网络
VxLAN 使用虚拟隧道端点（Virtual Tunnel End Point、VTEP）设备对服务器发出和收到的数据包进行二次封装和解封。
上图中两个 VTEP 会相互连接并获得网络中的 MAC 地址、IP 地址等信息，例如，服务器 1 中的 VTEP 需要知道想要访问绿色网络中的 10.0.0.2 虚拟机需要先访问 IP 地址为 204.79.197.200 的服务器 2。这些配置可以被网络管理员手动配置、自动学习、也可以通过上层的管理器设置。当绿色的 10.</description></item><item><title>支持各种隧道协议的客户端</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/Tunneling-Protocol/%E6%94%AF%E6%8C%81%E5%90%84%E7%A7%8D%E9%9A%A7%E9%81%93%E5%8D%8F%E8%AE%AE%E7%9A%84%E5%AE%A2%E6%88%B7%E7%AB%AF/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/Tunneling-Protocol/%E6%94%AF%E6%8C%81%E5%90%84%E7%A7%8D%E9%9A%A7%E9%81%93%E5%8D%8F%E8%AE%AE%E7%9A%84%E5%AE%A2%E6%88%B7%E7%AB%AF/</guid><description>Clash 参考：
GitHub 项目，Dreamacro/clash GitHub 项目 Wiki（官方文档） [!Attention] 据说作者已被抓，2023-11-2 仓库没了
Clash Core 删库跑路后的选择
https://github.com/MetaCubeX/Clash.Meta # Clash.Meta https://github.com/MetaCubeX/mihomo/tree/Meta # Clash.Meta Clash 是一个 Go 语言开发的代理客户端，支持多种服务端协议，比如 Vmess、Shadowsocks、Trojan、Snell 等。
Clash 特性：
支持身份验证的本地 HTTP/HTTPS/SOCKS 服务器 VMess、Shadowsocks、Trojan、Snell 协议支持远程连接 内置 DNS 服务器，旨在最大限度地减少 DNS 污染攻击的影响，支持 DoH/DoT 上游和假 IP。 基于域、GEOIP、IPCIDR 或进程的规则将数据包转发到不同的节点 远程组允许用户实施强大的规则。支持自动回退、负载平衡或基于延迟的自动选择节点 远程提供者，允许用户远程获取节点列表，而不是在配置中硬编码 Netfilter TCP 重定向。使用 .在您的 Internet 网关上部署 Clash iptables。 全面的 HTTP RESTful API 控制器 规则 DOMAIN-SUFFIX：域名后缀匹配 DOMAIN：域名匹配 DOMAIN-KEYWORD：域名关键字匹配 IP-CIDR：IP 段匹配 SRC-IP-CIDR：源 IP 段匹配 GEOIP：GEOIP 数据库（国家代码）匹配 DST-PORT：目标端口匹配 SRC-PORT：源端口匹配 PROCESS-NAME：源进程名匹配 RULE-SET：根据 Rule Provider 匹配 MATCH：全匹配 Rule Providers(规则提供器) GitHub 项目，Loyalsoldier/clash-rules 根据 Loyalsoldier/v2ray-rules-dat 项目生成了适用于 Clash 的规则集合。有点类似于 iptables 中的 ipset</description></item></channel></rss>