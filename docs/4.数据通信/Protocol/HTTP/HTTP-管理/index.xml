<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>HTTP 管理 on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/HTTP/HTTP-%E7%AE%A1%E7%90%86/</link><description>Recent content in HTTP 管理 on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/HTTP/HTTP-%E7%AE%A1%E7%90%86/index.xml" rel="self" type="application/rss+xml"/><item><title>CORS跨域(一)：深入理解跨域请求概念及其根因</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/HTTP/HTTP-%E7%AE%A1%E7%90%86/CORS%E8%B7%A8%E5%9F%9F%E4%B8%80%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%E6%A6%82%E5%BF%B5%E5%8F%8A%E5%85%B6%E6%A0%B9%E5%9B%A0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/HTTP/HTTP-%E7%AE%A1%E7%90%86/CORS%E8%B7%A8%E5%9F%9F%E4%B8%80%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%E6%A6%82%E5%BF%B5%E5%8F%8A%E5%85%B6%E6%A0%B9%E5%9B%A0/</guid><description>原文链接：https://mp.weixin.qq.com/s/dynx7wrSINYFKZgGPcD3zQ
❝Talk is cheap. Show me the money.&amp;gt; ❞
前言 你好，我是YourBatman。 做 Web 开发的小伙伴对“跨域”定并不陌生，像狗皮膏药一样粘着几乎每位同学，对它可谓既爱又恨。跨域请求之于创业、小型公司来讲是个头疼的问题，因为这类企业还未沉淀出一套行之有效的、统一的解决方案。 让人担忧的是，据我了解不少程序员同学（不乏有高级开发）碰到跨域问题大都一头雾水：然后很自然的 用谷歌去百度一下搜索答案，但相关文章可能参差不齐、鱼龙混杂。短则半天长则一天（包含改代码、部署等流程）此问题才得以解决，一个“小小跨域”问题成功偷走你的宝贵时间。 既然跨域是个如此常见（特别是当下前后端分离的开发模式），因此深入理解 CORS 变得就异常的重要了（反倒前端工程师不用太了解），因此早在 2019 年我刚开始写博客那会就有过较为详细的系列文章：现在把它搬到公众号形成技术专栏，并且加点料，让它更深、更全面、更系统的帮助到你，希望可以助你从此不再怕 Cors 跨域资源共享问题。
本文提纲 版本约定 JDK：8 Servlet：4.x 正文 文章遵循一贯的风格，本文将采用概念 + 代码示例的方式，层层递进的进行展开叙述。那么上菜，先来个示例预览，模拟一下跨域请求，后面的一些的概念示例将以此作为抓手。
模拟跨域请求 要模拟跨域请求的根本是需要两个源：让请求的来源和目标源不一样。这里我就使用 IDEA 作为静态 Web 服务器（63342），Tomcat 作为后端动态 Servlet 服务器（8080）。
❝&amp;gt; 说明：服务器都在本机，端口不一样即可 ❞
前端代码 index.html
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt; &amp;lt;title&amp;gt;CORS跨域请求&amp;lt;/title&amp;gt; &amp;lt;!--导入Jquery--&amp;gt; &amp;lt;script src=&amp;quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;button id=&amp;quot;btn&amp;quot;&amp;gt;跨域从服务端获取内容&amp;lt;/button&amp;gt; &amp;lt;div id=&amp;quot;content&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;script&amp;gt; $(&amp;quot;#btn&amp;quot;).click(function () { // 跨域请求 $.get(&amp;quot;http://localhost:8080/cors&amp;quot;, function (result) { $(&amp;quot;#content&amp;quot;).</description></item><item><title>HTTP 优化</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/HTTP/HTTP-%E7%AE%A1%E7%90%86/HTTP-%E4%BC%98%E5%8C%96/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/HTTP/HTTP-%E7%AE%A1%E7%90%86/HTTP-%E4%BC%98%E5%8C%96/</guid><description>概述 参考：原文链接
问你一句：「** 你知道 HTTP/1.1 该如何优化吗？**」
我想你第一时间想到的是，使用 KeepAlive 将 HTTP/1.1 从短连接改成长链接。
这个确实是一个优化的手段，它是从底层的传输层这一方向入手的，通过减少 TCP 连接建立和断开的次数，来减少了网络传输的延迟，从而提高 HTTP/1.1 协议的传输效率。
但其实还可以从其他方向来优化 HTTP/1.1 协议，比如有如下 3 种优化思路：
尽量避免发送 HTTP 请求； 在需要发送 HTTP 请求时，考虑如何减少请求次数； 减少服务器的 HTTP 响应的数据大小； 下面，就针对这三种思路具体看看有哪些优化方法。
1 如何避免发送 HTTP 请求？ 这个思路你看到是不是觉得很奇怪，不发送 HTTP 请求，那还客户端还怎么和服务器交互数据？小林你这不是耍流氓嘛？
冷静冷静，你说的没错，客户端当然要向服务器发送请求的。
但是，对于一些具有重复性的 HTTP 请求，比如每次请求得到的数据都一样的，我们可以把这对「请求 - 响应」的数据都缓存在本地，那么下次就直接读取本地的数据，不必在通过网络获取服务器的响应了，这样的话 HTTP/1.1 的性能肯定肉眼可见的提升。
所以，避免发送 HTTP 请求的方法就是通过缓存技术，HTTP 设计者早在之前就考虑到了这点，因此 HTTP 协议的头部有不少是针对缓存的字段。
那缓存是如何做到的呢？
客户端会把第一次请求以及响应的数据保存在本地磁盘上，其中将请求的 URL 作为 key，而响应作为 value，两者形成映射关系。
这样当后续发起相同的请求时，就可以先在本地磁盘上通过 key 查到对应的 value，也就是响应，如果找到了，就直接从本地读取该响应。毋庸置疑，读取本次磁盘的速度肯定比网络请求快得多，如下图：
聪明的你可能想到了，万一缓存的响应不是最新的，而客户端并不知情，那么该怎么办呢？
放心，这个问题 HTTP 设计者早已考虑到。
所以，服务器在发送 HTTP 响应时，会估算一个过期的时间，并把这个信息放到响应头部中，这样客户端在查看响应头部的信息时，一旦发现缓存的响应是过期的，则就会重新发送网络请求。HTTP 关于缓说明会的头部字段很多，这部分内容留在下次文章，这次暂时不具体说明。</description></item><item><title>跨域</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/HTTP/HTTP-%E7%AE%A1%E7%90%86/%E8%B7%A8%E5%9F%9F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/HTTP/HTTP-%E7%AE%A1%E7%90%86/%E8%B7%A8%E5%9F%9F/</guid><description>什么是跨域？怎么解决跨域问题？ 原文链接：https://www.huaweicloud.com/articles/aac70d91034fc29ba92cde78f0b867f8.html
什么是跨域？ 跨域，指的是浏览器不能执行其他网站的脚本。它是由浏览器的同源策略造成的，是浏览器对JavaScript施加的安全限制。 所谓同源是指，域名，协议，端口均相同，不明白没关系，举个栗子： http://www.123.com/index.html 调用 http://www.123.com/server.PHP （非跨域） http://www.123.com/index.html 调用 http://www.456.com/server.php （主域名不同:123/456，跨域） http://abc.123.com/index.html 调用 http://def.123.com/server.php （子域名不同:abc/def，跨域） http://www.123.com:8080/index.html 调用 http://www.123.com:8081/server.php （端口不同:8080/8081，跨域） http://www.123.com/index.html 调用 https://www.123.com/server.php （协议不同:http/https，跨域） 请注意：localhost 和 127.0.0.1 虽然都指向本机，但也属于跨域。
浏览器执行javascript脚本时，会检查这个脚本属于哪个页面，如果不是同源页面，就不会被执行。
解决办法：
1、JSONP：
使用方式就不赘述了，但是要注意 JSONP 只支持 GET 请求，不支持 POST 请求。
JSONP 原理 ajax 请求受同源策略影响，不允许进行跨域请求，而 script 标签 src 属性中的链接却可以访问跨域的 js 脚本，利用这个特性，服务端不再返回 JSON 格式的数据，而是返回一段调用某个函数的 js 代码，在 src 中进行了调用，这样实现了跨域。 jsonp 其实是一种特定的格式，一般是 fun(json 格式参数)， 服务端：
header('Content-type: application/json'); //获取回调函数名 $jsoncallback = htmlspecialchars($_REQUEST ['jsoncallback']); //json数据 $json_data = '[&amp;quot;customername1&amp;quot;,&amp;quot;customername2&amp;quot;]'; //输出jsonp格式的数据 echo $jsoncallback .</description></item></channel></rss>