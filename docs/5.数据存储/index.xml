<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦的站点 – 📼5.数据存储</title><link>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/</link><description>Recent content in 📼5.数据存储 on 断念梦的站点</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: 1.存储</title><link>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/1.%E5%AD%98%E5%82%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/1.%E5%AD%98%E5%82%A8/</guid><description/></item><item><title>Docs: 2.数据库</title><link>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/2.%E6%95%B0%E6%8D%AE%E5%BA%93/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/2.%E6%95%B0%E6%8D%AE%E5%BA%93/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://db-engines.com/en/article/Database">DB-Engines&lt;/a>(所有数据库的排名、状态等信息的观察网站)&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>数据库是由特定软件（所谓的数据库管理系统或 DBMS）管理的数据的逻辑集合。数据库和 DBMS 共同构成数据库系统。&lt;/p>
&lt;p>A database is a logical collection of data which is managed by a specific software (the so-called &lt;a href="https://db-engines.com/en/article/Database+Management+System">database management system&lt;/a> or DBMS). Database and DBMS together form the database system.&lt;/p>
&lt;p>数据库不仅包括用户数据，还包括对其进行管理所需的对象（例如索引或日志文件）。&lt;/p>
&lt;p>A database includes not only user data but also the objects necessary for its management (e.g. indexes or logfiles).&lt;/p>
&lt;p>数据库的类型&lt;/p>
&lt;ol>
&lt;li>RDBMS：关系型数据库
&lt;ol>
&lt;li>Oracle&lt;/li>
&lt;li>MariaDB/MySQL&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>NoSQL：非关系型数据库
&lt;ol>
&lt;li>Key/Val NoSQL：redis,etcd&lt;/li>
&lt;li>Column Family NoSQL 列族：HBase&lt;/li>
&lt;li>Documentation NoSQL：MongoDB&lt;/li>
&lt;li>Graph  NoSQL：Neo4j&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>NewSQL：分布式数据库&lt;/li>
&lt;/ol>
&lt;h1 id="relational-dbms">Relational DBMS&lt;a class="td-heading-self-link" href="#relational-dbms" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;strong>Relational database management systems(关系数据库管理系统，简称 RDBMS)&lt;/strong> support the relational (=table-oriented) data model. The schema of a table (=relation schema) is defined by the table name and a fixed number of attributes with fixed data types. A record (=entity) corresponds to a row in the table and consists of the values of each attribute. A relation thus consists of a set of uniform records.&lt;/p>
&lt;p>The table schemas are generated by normalization in the process of data modeling.&lt;/p>
&lt;p>Certain basic operations are defined on the relations:&lt;/p>
&lt;ul>
&lt;li>classical set operations (union, intersection and difference)&lt;/li>
&lt;li>Selection (selection of a subset of records according to certain filter criteria for the attribute values)&lt;/li>
&lt;li>Projection (selecting a subset of attributes / columns of the table)&lt;/li>
&lt;li>Join: special conjunction of multiple tables as a combination of the Cartesian product with selection and projection.&lt;/li>
&lt;/ul>
&lt;p>These basic operations, as well as operations for creation, modification and deletion of table schemas, operations for controlling transactions and user management are performed by means of database languages, with SQL being a well established standard for such languages.&lt;/p>
&lt;p>The first relational database management systems appeared on the market at the beginning of the 1980s and since have been the most commonly used &lt;a href="https://db-engines.com/en/article/DBMS">DBMS&lt;/a> type.&lt;/p>
&lt;p>Over the years, many RDBMS have been expanded with non-relational concepts such as user-defined data types, not atomic attributes, inheritance and hierarchies, which is why they are sometimes referred to as object-relational DBMS.&lt;/p>
&lt;h2 id="most-popular-examples">Most popular examples&lt;a class="td-heading-self-link" href="#most-popular-examples" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://db-engines.com/en/system/Oracle">Oracle&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://db-engines.com/en/system/MySQL">MySQL&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://db-engines.com/en/system/Microsoft+SQL+Server">Microsoft SQL Server&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://db-engines.com/en/system/PostgreSQL">PostgreSQL&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://db-engines.com/en/system/IBM+Db2">IBM Db2&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Find more systems in our &lt;a href="https://db-engines.com/en/ranking/relational+dbms">relational DBMS ranking&lt;/a>.&lt;/p>
&lt;h1 id="nosql">NoSQL&lt;a class="td-heading-self-link" href="#nosql" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>NoSQL Database Systems are an alternative to the mainstream &lt;a href="https://db-engines.com/en/article/Relational+DBMS">Relational DBMS&lt;/a>. They don&amp;rsquo;t use a relational data model and typically have no SQL interface.&lt;/p>
&lt;p>Although this type of systems exists for many years (some even longer than relational systems), the term NoSQL was first introduced in 2009 when many new systems were developed in order to cope with the new requirements for database management systems at that time. E.g.  Big Data, scalability and fault tolerance for large web applications.&lt;/p>
&lt;p>The acronym NoSQL is often understood as &amp;ldquo;Not Only SQL&amp;rdquo;, implying that relational systems are a proven technology but not necessarily the optimal choice for each kind of intended use.&lt;/p>
&lt;h2 id="classification分类">Classification(分类)&lt;a class="td-heading-self-link" href="#classification%e5%88%86%e7%b1%bb" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>NoSQL systems are a heterogenous group of very different database systems. Therefore each attempt for a classification fails in classifying one or another system. However, the following categegories are well accepted:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://db-engines.com/en/article/Key-value+Stores">Key-Value Stores&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://db-engines.com/en/article/Wide+Column+Stores">Wide Column Stores&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://db-engines.com/en/article/Document+Stores">Document Stores&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://db-engines.com/en/article/Graph+DBMS">Graph DBMS&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://db-engines.com/en/article/RDF+Stores">RDF Stores&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://db-engines.com/en/article/Native+XML+DBMS">Native XML DBMS&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://db-engines.com/en/article/Content+Stores">Content Stores&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://db-engines.com/en/article/Search+Engines">Search Engines&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="advantages优势">Advantages(优势)&lt;a class="td-heading-self-link" href="#advantages%e4%bc%98%e5%8a%bf" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Not all of the above mentioned classes have the same general advantages, but they benefit from a combination of the following aspects.&lt;/p>
&lt;ul>
&lt;li>higher performance&lt;/li>
&lt;li>easy distribution of data on different nodes (e.g. sharding), thereby achieving scalability and fault tolerance&lt;/li>
&lt;li>higher flexibility by using a schema-free data model.&lt;/li>
&lt;li>simpler administration&lt;/li>
&lt;/ul>
&lt;h3 id="methods">Methods&lt;a class="td-heading-self-link" href="#methods" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>These advantages are achieved by means of one or more of the following approaches:&lt;/p>
&lt;ul>
&lt;li>No normalized relational data model&lt;/li>
&lt;li>Abandoning one or more of the ACID criteria&lt;/li>
&lt;li>Less powerful possibilities for querying the data&lt;/li>
&lt;/ul></description></item><item><title>Docs: 3.大数据</title><link>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/3.%E5%A4%A7%E6%95%B0%E6%8D%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/3.%E5%A4%A7%E6%95%B0%E6%8D%AE/</guid><description/></item><item><title>Docs: 其他</title><link>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E5%85%B6%E4%BB%96/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E5%85%B6%E4%BB%96/</guid><description/></item><item><title>Docs: 数据管理工具</title><link>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</guid><description/></item><item><title>Docs: 索引为什么能提高查询性能....</title><link>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E7%B4%A2%E5%BC%95%E4%B8%BA%E4%BB%80%E4%B9%88%E8%83%BD%E6%8F%90%E9%AB%98%E6%9F%A5%E8%AF%A2%E6%80%A7%E8%83%BD/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E7%B4%A2%E5%BC%95%E4%B8%BA%E4%BB%80%E4%B9%88%E8%83%BD%E6%8F%90%E9%AB%98%E6%9F%A5%E8%AF%A2%E6%80%A7%E8%83%BD/</guid><description>
&lt;p>原创 小林 coding&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/wl73g8/1616132791654-dffab79f-cc40-4333-901d-bcb73ae5363e.png" alt="">&lt;/p>
&lt;hr>
&lt;h2 id="前言">前言&lt;a class="td-heading-self-link" href="#%e5%89%8d%e8%a8%80" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>昨天，有个女孩子问我提高数据库查询性能有什么立竿见影的好方法？&lt;/p>
&lt;p>这简直是一道送分题，我自豪且略带鄙夷的说，当然是加「索引」了。&lt;/p>
&lt;p>她又不紧不慢的问，索引为什么就能提高查询性能。&lt;/p>
&lt;p>这还用问，索引就像一本书的目录，用目录查当然很快。&lt;/p>
&lt;p>她失望地摇了摇头，你说的只是一个类比，可&lt;strong>为什么通过目录就能提高查询速度呢&lt;/strong>。&lt;/p>
&lt;p>唉，对啊，通过书目可以快速查询，这只是一个现象，真正原因到底是什么呢。&lt;/p>
&lt;p>那女孩看着诧异且表情僵硬的我，满意而又意味深长的笑笑：原来你这个男程序员也不会，看来我还得靠自己研究了。&lt;/p>
&lt;p>哎，熬夜又要憔悴了我这该死的美貌。&lt;/p>
&lt;p>来自同行的羞辱，是可忍孰不可忍？！&lt;/p>
&lt;p>于是，我踏上了数据库索引学习的不归路，原来数据库索引使用了一种叫 B+ 树的古老数据结构，当然也有 Hash 等类型，暂且不说，可 B+ 树 这是个什么妖魔鬼怪呢？&lt;/p>
&lt;p>下面就来浅尝辄止的扒一扒树的前世今生。&lt;/p>
&lt;hr>
&lt;h2 id="正文">正文&lt;a class="td-heading-self-link" href="#%e6%ad%a3%e6%96%87" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="二叉树">二叉树&lt;a class="td-heading-self-link" href="#%e4%ba%8c%e5%8f%89%e6%a0%91" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>由 n（ n &amp;gt; 0）个有限节点组成一个具有层次关系的集合，看起来就像一个倒挂的树，因此称这样的数据结构为树。&lt;/p>
&lt;p>一个节点的子节点个数叫做度，通俗的讲就是树叉的个数。树中最大的度叫做树的度，也叫做阶。一个 2 阶树最多有 2 个子节点即最多有 2 叉，因此这样的树称为&lt;strong>二叉树&lt;/strong>，二叉树是树家族中最简单的树。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/wl73g8/1616132791571-a448ab7a-a724-4b7a-854d-b833da5d831e.jpeg" alt="">&lt;/p>
&lt;p>两个叉的树就是二叉树，可这除了用来按一定结构存放数据外，跟查询性能好像也没关系，不会又是一个没用的噱头吧。&lt;/p>
&lt;hr>
&lt;h3 id="二分查找">二分查找&lt;a class="td-heading-self-link" href="#%e4%ba%8c%e5%88%86%e6%9f%a5%e6%89%be" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>听说二叉树的原始威力来源于一种叫做二分查找的算法。&lt;/p>
&lt;p>相传在鹦鹉的原始社会，存在着森严的等级制度，每只鸟必须按高矮顺序分出等级和尊卑。&lt;/p>
&lt;p>那么问题来了，如下图，怎样才能找出&lt;strong>最高&lt;/strong>、&lt;strong>最矮&lt;/strong>、&lt;strong>中等高&lt;/strong>的那些鹦鹉呢、以及&lt;strong>指定高度&lt;/strong>的那只呢?&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/wl73g8/1616132791613-b27de62c-39c8-4d66-9060-039a36d50607.jpeg" alt="">&lt;/p>
&lt;p>第一种方法: 扫描法&lt;/p>
&lt;p>一个一个依次测量，完毕后所有的问题都迎刃而解。&lt;/p>
&lt;p>这种一个一个依次全部测量的方法叫做扫描，他的缺点很明显，最高和最矮，需要全部测量完毕才能知晓。&lt;/p>
&lt;p>而对于指定高度，最好的情况是第一次就找到；最坏的情况是最后一次才找到，时间复杂度为 n，也就是说从 13 个鹦鹉中找到指定身高的那只，最坏的情况是查 13 次。&lt;/p>
&lt;p>第二种方法：二分法&lt;/p>
&lt;p>13 个鹦鹉全部听令，按从矮到高列队，向左看齐，报数。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/wl73g8/1616132791617-908b3fbe-74b4-4709-afa7-2b11d4052a5b.jpeg" alt="">&lt;/p>
&lt;p>报数字 1 的就是最矮的，报数字 13 的就是最高的，报数字 7 的就是中等身高的那只。&lt;/p>
&lt;p>最好和最坏的情况都是一次找到。而查询性能一下子提高 13 倍，我的个乖乖，无论多个只鹦鹉，时间复杂度都是 1，好可怕。&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>问题&lt;/strong>：我不服，你这是偷换概念，有本事对比一个查找指定高度鹦鹉的性能。&lt;/p>
&lt;/blockquote>
&lt;p>因为鹦鹉们已经按高矮排好了队，所以指定高度的鹦鹉，要么是站中间那个只，要么就是在它的左边或右边的那群里。&lt;/p>
&lt;p>如果是中间那个，一次就找到，如果不是只需要从中间左边或右边那一半中找，再在这一半中找中间那只，对比身高。&lt;/p>
&lt;p>以此类推，每次都把查询的范围减半，时间复杂度&lt;code>log2(n)&lt;/code>。&lt;/p>
&lt;p>那么 log2(13) 就是 4，最坏的情况也才 4 次，时间复杂度确实不是 1 了，但好像也不糟，简化如下：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/wl73g8/1616132791626-ac4b3212-7eb2-418f-97b4-c8ca4feb3081.jpeg" alt="">&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>问题&lt;/strong>：如果按高矮排队，仍然需要一个一个比较，跟扫描有什么区别，那还不如直接扫描呢？&lt;/p>
&lt;/blockquote>
&lt;p>事实确实如此,单纯的一次查询，先排序，再二分查找，不见得比扫描快，甚至还不如。&lt;/p>
&lt;p>但是，在数据的世界，大部分数据一生会被查询无数次，如果只在数据降生的时候排一次序，往后余生，是不是就可以直接用二分查找，这似乎就是传说的读多写少，以及对应的复用。&lt;/p>
&lt;p>&lt;strong>优点&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>查找快&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>缺点&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>必须有序，需要提前排序&lt;/p>
&lt;/li>
&lt;li>
&lt;p>每次查找都需要不断计算中间位置&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="二分查找树">二分查找树&lt;a class="td-heading-self-link" href="#%e4%ba%8c%e5%88%86%e6%9f%a5%e6%89%be%e6%a0%91" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>如果一组数据不会或不常变更，那么他们的位置也基本不变。可是每次查询都需要重新计算中间位置是一种浪费，而浪费可耻。&lt;/p>
&lt;p>我们能不能把所有中间节点组织起来，每次使用时，直接取中间节点?&lt;/p>
&lt;p>请看下图，找到所有单次二分查找的中间节点，把他们连起来，并用手提起最中间的那个节点，就是一棵二分查找树。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/wl73g8/1616132791615-d57285a4-ec89-4930-ad46-489369e3d498.gif" alt="">&lt;/p>
&lt;p>&lt;strong>优点&lt;/strong>：二分查找树就是通过数据结构的方式实现了二分查找算法，通过存储中间节点的数据，弥补了二分查找每次都要计算中间位置的缺点。&lt;/p>
&lt;hr>
&lt;h3 id="平衡二叉树">平衡二叉树:&lt;a class="td-heading-self-link" href="#%e5%b9%b3%e8%a1%a1%e4%ba%8c%e5%8f%89%e6%a0%91" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>如果二分查找树不断进行修改，比如删除某些节点，经过一段时间后，最早那个中间节点的数据（根），很可能就不在中间了。&lt;/p>
&lt;p>中间位置就像一个天平的支点，如果他不在中间了，那么整个天平就会失衡，失衡的世界就会坍塌成不伦不类的瘸树，甚至是降维成一个链表或者数组。&lt;/p>
&lt;p>二分查找算法的关键在于有序和中间节点，而二分查找树的关键是中间节点的维护，如果维护的节点已经不在中间了，那么它就失去了意义。&lt;/p>
&lt;p>所以必须保证「二分查找树」是一个正确的树，一个根节点在中心的树，一个左右子树层级（高度）基本相等（高度相差不超过 1）的树，一个平衡的树。&lt;/p>
&lt;p>平衡二叉树中最常见的就是红黑树：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/wl73g8/1616132791611-76893fa7-eb50-41db-8478-5fc241a07fbe.jpeg" alt="">&lt;/p>
&lt;p>红黑树规定了一系列节点颜色规则，以及对应的左旋和右旋操作来保证颜色规则，从而达到树的平衡性。&lt;/p>
&lt;p>看到这花里胡哨的颜色以及复杂的规则，让人第一眼就望而却步，但所有的这些，也不过是为了保证二叉树的平衡性，由于维持平衡的操作太过麻烦，无法用一句话简单概括，只好用一堆人鬼难分的规则和步骤来实现，只要按着这些步骤就一定能实现二叉树的平衡。&lt;/p>
&lt;p>&lt;em>平衡二叉树 = 二分查找树 + 平衡（左右高度相差不超过 1 ）&lt;/em>&lt;/p>
&lt;p>平衡二叉树并未提高二分查找树的性能，它只是保正树不会被二向箔（多次增删改）打击降维成链表或不对称的残缺树，永远维持平衡。&lt;/p>
&lt;p>另外，不仅仅是二叉树，其他种类的树，也是需要有序和平衡，才能发挥最大的威力。&lt;/p>
&lt;hr>
&lt;h3 id="多叉树之-b-tree">多叉树之 B-tree&lt;a class="td-heading-self-link" href="#%e5%a4%9a%e5%8f%89%e6%a0%91%e4%b9%8b-b-tree" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>两个叉的树就能折半查询，理论可以提高一倍性能，那么多个叉是不是能提高更多倍性能？&lt;/p>
&lt;p>如下图的 3 阶（叉）树（所有数据仅用于演示，非真实分布）&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/wl73g8/1616132791626-104c0a58-a5d7-491d-8589-0f512b873106.jpeg" alt="">&lt;/p>
&lt;p>每个节点维护两个数据，并指向最多 3 个子节点。如图 3 个子节点的数据分别为：小于 17， 17 ~ 35 ，大于 35。&lt;/p>
&lt;p>假设，从上图中查找 10 这个数，步骤如下：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>找到根节点，对比 10 与 17 和 35 的大小，发现 10 &amp;lt; 17 在左子节点，也就是第 2 层节点；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>从根节点的指针，找到左子节点，对比 10 与 8 和 12 的大小，发现 8 &amp;lt; 10 &amp;lt; 12，数据在当前节点的中间子节点，也就是第 3 层节点；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>通过上步节点的指针，找到中间子节点（第 3 层节点），对比 10 与 9 和 10 的大小，发现 9 &amp;lt; 10 == 10，因此找到当前节点的第二数即为结果。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>加上忽略的 12 个数据，从 26 个数据中查找一个数字 10，仅仅用了 log3(26)≈ 3 次，而如果用平衡二叉树,则需要 log2(26)≈ 5 次，事实证明，多叉树确实可以再次提高查找性能。&lt;/p>
&lt;p>多叉树是在二分查找树的基础上，增加单个节点的数据存储数量，同时增加了树的子节点数，一次计算可以把查找范围缩小更多。&lt;/p>
&lt;p>&lt;strong>优点&lt;/strong>：二叉平衡树的基础上，使加载一次节点，可以加载更多路径数据，同时把查询范围缩减到更小。&lt;/p>
&lt;p>&lt;strong>复杂节点&lt;/strong>:&lt;/p>
&lt;p>至此，我们列举的数据都是孤零零的单个数字。试想，你手里已经有一个数据 10，为什么还要费力吧唧的再从一堆数据中找到这个 10，自己找自己？这不是有病吗？&lt;/p>
&lt;p>单个数字只能活在演示中，现实的世界要复杂的多，我们来看一个接近真实场景的案例。&lt;/p>
&lt;p>现有一个以年龄为索引的 3 阶树，存储了一批用户信息，如下图：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/wl73g8/1616132791623-f94d684d-bf9f-404d-90ea-216ed91bedb2.jpeg" alt="">&lt;/p>
&lt;p>数字为用户的年龄，其它为与树排序查找无关的业务数据，像这种索引数据与树排序查找无关的业务一起维护在节点的平衡多叉（阶）树称为 B- 树（ B 树）。&lt;/p>
&lt;p>&lt;strong>缺点&lt;/strong>：业务数据的大小可能远远超过了索引数据的大小，每次为了查找对比计算，需要把数据加载到内存以及 CPU 高速缓存中时，都要把索引数据和无关的业务数据全部查出来。本来一次就可以把所有索引数据加载进来，现在却要多次才能加载完。如果所对比的节点不是所查的数据，那么这些加载进内存的业务数据就毫无用处，全部抛弃。&lt;/p>
&lt;hr>
&lt;h3 id="磁盘-io">磁盘 I/O&lt;a class="td-heading-self-link" href="#%e7%a3%81%e7%9b%98-io" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>计算机的功能主要为：计算、存储和网络。而用于计算的数据以及计算后的结果很大一部分都需要存储起来，以备后续再次使用。向磁盘中存储和读取的过程叫磁盘 I/O。磁盘的读取方式和速度会严重影响到整个业务的计算性能。&lt;/p>
&lt;p>下面我们简单了解一下磁盘是如何工作的。&lt;/p>
&lt;p>磁盘大概长这个样子：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/wl73g8/1616132791643-edc82136-2780-4205-828b-07b66aad27ad.jpeg" alt="">&lt;/p>
&lt;p>磁盘主要由磁盘盘片、传动手臂、读写磁头和马达组成。&lt;/p>
&lt;p>为了存储容量,主轴像穿糖葫芦一样把多个磁盘片组成一个阵列。通过马达驱动主轴转动以及传动手臂移动，使读写磁头在磁盘片上读写数据。大概如下：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/wl73g8/1616132791647-8aba4e01-69c5-44e0-8f71-698da35373ce.jpeg" alt="">&lt;/p>
&lt;p>磁盘片由很多半径不等的同心圆组成，这些圆被称为磁道，数据就是写在这些磁道上。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/wl73g8/1616132791655-573a6baf-f037-408b-b066-e0e77c08e680.jpeg" alt="">&lt;/p>
&lt;p>每个磁道又划分成块称为扇区。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/wl73g8/1616132791667-89cc8abb-23e3-454d-9b8c-bab61790b0e9.jpeg" alt="">&lt;/p>
&lt;p>如果磁盘是一记事本，那么一张磁盘片就是本子的一页纸，而主轴就是本子的装订线；磁道就是纸页的行，而扇区可以看作是很宽的列。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/wl73g8/1616132791661-9c41f891-0818-4b44-b26c-927a33b5c7e7.jpeg" alt="">&lt;/p>
&lt;p>如果在磁盘中存储一首诗,想象中大概这个样子。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/wl73g8/1616132791698-850f52dd-d6cf-4479-9de1-6c6185b62ee9.jpeg" alt="">&lt;/p>
&lt;p>磁盘的读 I/O 操作,需要找到数据所在的磁盘片，以及对应的磁道和扇区。这些操作类似于从一本书中找到数据所在的页，行，列。&lt;/p>
&lt;p>因为每个磁盘片都对应一个磁头，所以性能的关键就在于找行和列，即寻道和磁盘旋转。寻道即通过磁头找到数据所在的磁道，相当于换行到数据所在行。由于磁头只能水平移动，即只能换行寻道，无法在指定磁道上移动，因此需要磁盘高速旋转移动到指定扇区，类似写春联时，笔不动，纸动。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/wl73g8/1616132791666-feb53a3d-7950-46f5-8ff8-be9ab19e1d6c.gif" alt="">&lt;/p>
&lt;p>综上所述，磁盘的读写是通过机械运动来定位数据所在位置，而 cpu 是通过电信号进行数字运算。粗略的认为，机械查询数据，与光速处理数据的性能完全不是在一个量级，总之一句话就是&lt;strong>磁盘处理太慢太慢了&lt;/strong>。&lt;/p>
&lt;p>虽然磁盘处理数据太慢了，但是它是目前相对廉价且稳定的存储设备，所以又不能舍弃不用，但大致可以通过以下方法进行优化。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>尽量减少 I/O 次数，比如可以使用缓存；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>每次 I/O 尽量获取更多的数据；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>每次 I/O 尽量获取有用的数据，当然相应的也间接减少总 I/O 次数；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="多叉树之-btree">多叉树之 B+tree&lt;a class="td-heading-self-link" href="#%e5%a4%9a%e5%8f%89%e6%a0%91%e4%b9%8b-btree" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>做为数据库的索引，无论用什么样的数据结构维护，这些数据最终都会存储到磁盘中。&lt;/p>
&lt;p>鉴于磁盘 I/O 的性能问题，以及每次 I/O 获取数据量上限所限，提高索引本身 I/O 的方法最好是，减少 I/O 次数和每次获取有用的数据。&lt;/p>
&lt;p>B-tree 已经大大改进了树家族的性能，它把多个数据集中存储在一个节点中，本身就可能减少了 I/O 次数或者寻道次数。&lt;/p>
&lt;p>但是仍然有一个致命的缺陷，那就是它的索引数据与业务绑定在一块，而业务数据的大小很有可能远远超过了索引数据，这会大大减小一次 I/O 有用数据的获取，间接的增加 I/O 次数去获取有用的索引数据。&lt;/p>
&lt;p>因为业务数据才是我们查询最终的目的，但是它又是在「二分」查找中途过程无用的数据，因此，如果只把业务数据存储在最终查询到的那个节点是不是就可以了？&lt;/p>
&lt;p>理想很丰满，现实很骨瘦如柴，谁知道哪个节点就是最终要查询的节点呢？&lt;/p>
&lt;p>B+tree 横空出世，&lt;strong>B+ 树就是为了拆分索引数据与业务数据的平衡多叉树&lt;/strong>。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/wl73g8/1616132791690-25dbb78a-2067-404c-82b4-89d75ba4dd21.jpeg" alt="">&lt;/p>
&lt;p>B+ 树中，非叶子节点只保存索引数据，叶子节点保存索引数据与业务数据。这样即保证了叶子节点的简约干净，数据量大大减小，又保证了最终能查到对应的业务数。既提高了单次 I/O 数据的有效性，又减少了 I/O 次数，还实现了业务。&lt;/p>
&lt;p>但是，在数据中索引与数据是分离的，不像示例那样的？&lt;/p>
&lt;p>如图：我们只需要把真实的业务数据，换成数据所在地址就可以了，此时，业务数据所在的地址在 B+ 树中充当业务数据。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/wl73g8/1616132791672-c0127e82-a3f6-40ed-8c46-b068661de9ae.jpeg" alt="">&lt;/p>
&lt;hr>
&lt;h3 id="总结">总结&lt;a class="td-heading-self-link" href="#%e6%80%bb%e7%bb%93" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>数据存储在磁盘（ SSD 跟 CPU 性能也不在一个量级），而磁盘处理数据很慢；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>提高磁盘性能主要通过减少 I/O 次数，以及单次 I/O 有效数据量；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>索引通过多阶（一个节点保存多个数据，指向多个子节点）使树的结构更矮胖，从而减少 I/O 次数；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>索引通过 B+ 树，把业务数据与索引数据分离，来提高单次 I/O 有效数据量，从而减少 I/O 次数；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>索引通过树数据的有序和「二分查找」（多阶树可以假设为多分查找），大大缩小查询范围；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>索引针对的是单个字段或部分字段，数据量本身比一条记录的数据量要少的多，这样即使通过扫描的方式查询索引也比扫描数据库表本身快的多；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="知识扩展">知识扩展&lt;a class="td-heading-self-link" href="#%e7%9f%a5%e8%af%86%e6%89%a9%e5%b1%95" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>树的结构最大的优点就是查询性能高，因此所有需要提高查询性能的都可以考虑树。&lt;/p>
&lt;p>而现实中也确实有这样的例子，比如：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>HashMap 中的数据冲突时，链表转化成红黑树；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>数据库索引使用的 B+ 树；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>搜索引擎倒排索引使用的字典树；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>以上只是浅尝辄止、点到为止的描述了数据库使用 B+ 树索引为什么能提高查询性能原因及简单过程。&lt;/p>
&lt;p>并没有深入各种数据结构的细节，也未提及其它索引类型和索引的具体存储格式，目的仅仅是，为了让大家对索引有一个感性的认识。&lt;/p></description></item></channel></rss>