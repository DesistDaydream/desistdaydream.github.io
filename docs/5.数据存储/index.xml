<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>📼5.数据存储 on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/</link><description>Recent content in 📼5.数据存储 on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/index.xml" rel="self" type="application/rss+xml"/><item><title>数据存储</title><link>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/</guid><description>概述 参考：
Data Storage(数据存储)
数据的检索可能与 Hashing 有很大的关系
Metadata(元数据) 又称中介数据、中继数据，为描述数据的数据（data about data），主要是描述数据属性（property）的信息，用来支持如指示存储位置、历史数据、资源查找、文件记录等功能。元数据算是一种电子式目录，为了达到编制目录的目的，必须在描述并收藏数据的内容或特色，进而达成协助数据检索的目的。都柏林核心集（Dublin Core Metadata Initiative，DCMI）是元数据的一种应用，是 1995 年 2 月由国际图书馆电脑中心（OCLC）和美国国家超级计算应用中心（National Center for Supercomputing Applications，NCSA）所联合赞助的研讨会，在邀请 52 位来自图书馆员、电脑专家，共同制定规格，创建一套描述网络上电子文件之特征。
例：一个文件的创建日期，所在位置等，除了文件内容以外的东西都可以称之为元数据。
备份和归档的区别 不同的过程会导致不同的结果。归档最通用的定义是存储有组织的数据。归档的目的是长时间存放有组织的数据集，确保其将来能够被精细地检索。改进的磁带是这种应用最理想的方式。FujiFilm 对它的新一代 BaFe 磁带产品的弹性测试证明其数据保存能力很强，可以存储 30 年以上。 相比之下，磁盘的故障率比其制造商说的还要高，几年前 Carnegie Mellon University 和 Google 的研究记录证明了这一点。
备份是短时间存储那些频繁更换或更新的数据的副本。这相当于一批廉价的离线介质上的数据副本。通过这种方式，可以把数据与那些基于磁盘的数据中断事件隔离开，以免同时遭到损坏，这样，如果原始数据或存储平台损坏的话，数据就可以恢复到任何磁盘阵列。在磁盘到磁盘复制解决方案中，复制只能发生在两个完全相同的设备中。此外，复制过程还可以中断，这样你就可以检查在主数据存储和镜像仓库之间的增量或差异。不过，最好别这样做，因为它可能会导致在磁盘到磁盘的复制过程中产生很多不易察觉的错误。 很遗憾，我发现你在努力保护你的数据时，它已经在阵列之间移动了，而你只镜像复制了一个空白空间
原文链接： https://searchstorage.techtarget.com.cn/6-23590/</description></item><item><title>WAL</title><link>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/WAL/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/WAL/</guid><description>概述 参考：
Wiki, Write-ahead logging 在计算机科学中，Write-ahead logging(预写日志记录，简称 WAL) 是一系列用于在数据库系统中提供原子性和持久性（ACID 属性中的两个）的技术。
在使用 WAL 的系统中，所有的修改都先被写入到日志中，然后再被应用到系统状态中。通常包含 redo 和 undo 两部分信息。为什么需要使用 WAL，然后包含 redo 和 undo 信息呢？举个例子，如果一个系统直接将变更应用到系统状态中，那么在机器断电重启之后系统需要知道操作是成功了，还是只有部分成功或者是失败了（为了恢复状态）。如果使用了 WAL，那么在重启之后系统可以通过比较日志和系统状态来决定是继续完成操作还是撤销操作。
redo log 称为重做日志，每当有操作时，在数据变更之前将操作写入 redo log，这样当发生断电之类的情况时系统可以在重启后继续操作。undo log 称为撤销日志，当一些变更执行到一半无法完成时，可以根据撤销日志恢复到变更之间的状态。
现代文件系统通常至少对文件系统元数据使用 WAL 的变体；这就是所谓的 Journaling File System。</description></item></channel></rss>