<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>MySQL on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE/MySQL/</link><description>Recent content in MySQL on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE/MySQL/index.xml" rel="self" type="application/rss+xml"/><item><title>MySQL</title><link>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE/MySQL/MySQL/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE/MySQL/MySQL/</guid><description>概述 参考：
官网 MySQL 的社区版本 MariaDB ，使用安装 MySQL 的 时候，会自动安装 MariaDB 。同时安装 mariadb-server ，即可开始使用了
MySQL 关联文件与配置 /etc/my.cnf # MariaDB 基础配置文件
/var/lib/myql/ # 数据存储路径
MySQL 数据类型 MySQL 中定义数据字段的类型对你数据库的优化是非常重要的。 MySQL 支持多种类型，大致可以分为三类：数值、日期/时间和字符串(字符)类型。
数值类型 MySQL 支持所有标准 SQL 数值数据类型。
这些类型包括严格数值数据类型(INTEGER、SMALLINT、DECIMAL 和 NUMERIC)，以及近似数值数据类型(FLOAT、REAL 和 DOUBLE PRECISION)。
关键字 INT 是 INTEGER 的同义词，关键字 DEC 是 DECIMAL 的同义词。
BIT 数据类型保存位字段值，并且支持 MyISAM、MEMORY、InnoDB 和 BDB 表。
作为 SQL 标准的扩展，MySQL 也支持整数类型 TINYINT、MEDIUMINT 和 BIGINT。下面的表显示了需要的每个整数类型的存储和范围。
类型 大小 范围（有符号） 范围（无符号） 用途 TINYINT 1 byte (-128，127) (0，255) 小整数值 SMALLINT 2 bytes (-32 768，32 767) (0，65 535) 大整数值 MEDIUMINT 3 bytes (-8 388 608，8 388 607) (0，16 777 215) 大整数值 INT 或 INTEGER 4 bytes (-2 147 483 648，2 147 483 647) (0，4 294 967 295) 大整数值 BIGINT 8 bytes (-9,223,372,036,854,775,808，9 223 372 036 854 775 807) (0，18 446 744 073 709 551 615) 极大整数值 FLOAT 4 bytes (-3.</description></item><item><title>MySQL SQL</title><link>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE/MySQL/MySQL-SQL/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE/MySQL/MySQL-SQL/</guid><description>概述 参考：
MySQL 官方文档，SLQ 语句 SQL 语言被细分为几个语言元素，包括：
子句，它们是语句和查询的组成部分。（在某些情况下，这些是可选的。） 表达式，可以生成标量值或由数据的列和行组成的表 Predicates，指定可以评估为 SQL三值逻辑 (3VL)（真/假/未知）或布尔 真值的条件，用于限制语句和查询的效果，或更改程序流程。 查询，根据特定条件检索数据。这是 SQL 的一个重要元素。 语句，可能对模式和数据产生持久影响，或者可能控制事务、程序流、连接、会话或诊断。 SQL 语句还包括分号(&amp;quot;;&amp;quot;) 语句终止符。虽然不是每个平台都需要它，但它被定义为 SQL 语法的标准部分。 SQL 语句和查询中通常会忽略无关紧要的空格，从而更容易格式化 SQL 代码以提高可读性。 在 MySQL 中按照功能将各种语句进行了分类：
Data Definition Statements(数据定义语句) Data Manipulation Statements(数据操作语句) Transactional and Locking Statements(事务和锁语句) Replication Statements(复制语句) Prepared Statements(预处理语句) Compound Statement Syntax(符合语句) Database Administration Statements(数据库管理语句) Utility Statements(使用程序语句) 关键字 参考：
MySQL 官方文档，语言结构 - 关键字和保留字 函数与运算符 参考：
MySQL 官方文档，函数与运算符 内置函数 参考：
MySQL 官方文档，函数与运算符 - 内置函数和运算符参考 函数名 功能 启用版本 弃用版本 REPLACE() 替换掉指定字符串 REGEXP_REPLACE() 替换掉使用正则表达式匹配到的字符串 8.</description></item><item><title>MySQL 部署</title><link>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE/MySQL/MySQL-%E9%83%A8%E7%BD%B2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE/MySQL/MySQL-%E9%83%A8%E7%BD%B2/</guid><description>概述 docker 启动 MySQL mkdir -p /opt/mysql/config mkdir -p /opt/mysql/data docker run -d --name mysql --restart always \ --network host \ -v /opt/mysql/data:/var/lib/mysql -v /opt/mysql/config:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=mysql \ mysql:8 对于 5.7+ 版本，推荐设置 SQL Mode，去掉默认的 ONLY_FULL_GROUP_BY。
tee /opt/mysql/config/mysql.cnf &amp;gt; /dev/null &amp;lt;&amp;lt;EOF [mysqld] sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION EOF 如果不去掉这个模式，当我们使用 group by 时，select 中选择的列如果不在 group by 中，将会报错：
ERROR 1055 (42000): Expression #2 of SELECT list is not in GROUP BY clause and contains nonaggregated column 'kalacloud.user_id' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by</description></item><item><title>MySQL 命令行工具</title><link>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE/MySQL/MySQL-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE/MySQL/MySQL-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</guid><description>概述 参考：
mysql 参考：
官方文档，MySQL 程序-客户端程序-mysql mysql 是一个简单的 SQL Shell。 它支持交互和非交互使用。 交互使用时，查询结果以 ASCII 表格式显示。 非交互使用（例如，用作过滤器）时，结果以制表符分隔的格式显示。 可以使用命令选项更改输出格式。
Syntax(语法) mysql [OPTIONS] [DATABASE]
DATABASE # 指定连接 mysql 后要操作的数据库。若不指定，则需要在交互模式下使用 use 指令选择数据库，否则对数据库的操作将会报 No database selected 错误：
mysql&amp;gt; show tables; ERROR 1046 (3D000): No database selected OPTIONS：
-h, &amp;ndash;host &amp;lt;HostName&amp;gt; # 指定要连接的 mysql 主机。如果链接本机 mysql，可以省略。 -P, &amp;ndash;port &amp;lt;PORT&amp;gt; # 指定要连接的 mysql 的端口。默认值：3306 -u, &amp;ndash;user &amp;lt;UserName&amp;gt; # 指定要登录 mysql 的用户名 -p, &amp;ndash;password &amp;lt;PASSWORD&amp;gt; # 使用密码来登录。如果指定要登录 mysql 的用户密码为空，则该选项可省 命令行模式 我们可以通过 mysql db_name &amp;lt;FILE.</description></item><item><title>MySQL 配置文件详解</title><link>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE/MySQL/MySQL-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE/MySQL/MySQL-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</guid><description>概述 参考：
my.cnf [mysqld] skip-grant-tables # 登录时跳过权限检查 设置时区 default-time_zone=&amp;#39;+8:00&amp;#39; ========================== # 开启 binlog log-bin=mysql-bin binlog-format=Row server-id=1 expire_logs_days=7 max_binlog_size=10m binlog https://dev.mysql.com/doc/refman/5.7/en/replication-howto-masterbaseconfig.html</description></item><item><title>MySQL 批量SQL插入性能优化</title><link>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE/MySQL/MySQL-%E6%89%B9%E9%87%8FSQL%E6%8F%92%E5%85%A5%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE/MySQL/MySQL-%E6%89%B9%E9%87%8FSQL%E6%8F%92%E5%85%A5%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</guid><description>对于一些数据量较大的系统，数据库面临的问题除了查询效率低下，还有就是数据入库时间长。特别像报表系统，每天花费在数据导入上的时间可能会长达几个小时或十几个小时之久。因此，优化数据库插入性能是很有意义的。
经过对 MySQL InnoDB 的一些性能测试，发现一些可以提高 insert 效率的方法，供大家参考参考。
1、一条 SQL 语句插入多条数据 常用的插入语句如：
INSERT INTO `insert_table` (`datetime`, `uid`, `content`, `type`) VALUES (&amp;#39;0&amp;#39;, &amp;#39;userid_0&amp;#39;, &amp;#39;content_0&amp;#39;, 0); INSERT INTO `insert_table` (`datetime`, `uid`, `content`, `type`) VALUES (&amp;#39;1&amp;#39;, &amp;#39;userid_1&amp;#39;, &amp;#39;content_1&amp;#39;, 1); 修改成：
INSERT INTO `insert_table` (`datetime`, `uid`, `content`, `type`) VALUES (&amp;#39;0&amp;#39;, &amp;#39;userid_0&amp;#39;, &amp;#39;content_0&amp;#39;, 0), (&amp;#39;1&amp;#39;, &amp;#39;userid_1&amp;#39;, &amp;#39;content_1&amp;#39;, 1); 修改后的插入操作能够提高程序的插入效率。这里第二种 SQL 执行效率高的主要原因是合并后日志量（MySQL 的 binlog 和 innodb 的事务让日志）减少了，降低日志刷盘的数据量和频率，从而提高效率。通过合并 SQL 语句，同时也能减少 SQL 语句解析的次数，减少网络传输的 IO。
这里提供一些测试对比数据，分别是进行单条数据的导入与转化成一条 SQL 语句进行导入，分别测试 1 百、1 千、1 万条数据记录。</description></item><item><title>最佳实践</title><link>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE/MySQL/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE/MySQL/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</guid><description>概述 参考：
基础操作 显示当前存在哪些数据库
mysql&amp;gt; show databases; +--------------------+ | Database | +--------------------+ | information_schema | | mysql | | performance_schema | | sys | +--------------------+ 4 rows in set (0.00 sec) 通常 MySQL 部署成功后，都有几个默认的数据库
information_schema mysql performance_schema sys 创建数据库
mysql&amp;gt; create database menagerie; Query OK, 1 row affected (0.00 sec) 开始使用数据库
mysql&amp;gt; use menagerie Database changed 创建表
mysql&amp;gt; create table pet (name VARCHAR(20), owner VARCHAR(20),species VARCHAR(20), sex CHAR(1), birth DATE, death DATE); Query OK, 0 rows affected (0.</description></item></channel></rss>