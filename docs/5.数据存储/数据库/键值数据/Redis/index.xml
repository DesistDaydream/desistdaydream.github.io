<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Redis on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E9%94%AE%E5%80%BC%E6%95%B0%E6%8D%AE/Redis/</link><description>Recent content in Redis on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E9%94%AE%E5%80%BC%E6%95%B0%E6%8D%AE/Redis/index.xml" rel="self" type="application/rss+xml"/><item><title>Redis</title><link>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E9%94%AE%E5%80%BC%E6%95%B0%E6%8D%AE/Redis/Redis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E9%94%AE%E5%80%BC%E6%95%B0%E6%8D%AE/Redis/Redis/</guid><description>概述 参考：
GitHub 项目，redis/redis GitHub 项目，valkey-io/valkey # Linux Foundation 基于 7.2.4 版本分叉的项目，保持原有 License 官网 [!Warning] 3 月 30 日 Redis 发布博客改变 License，后续 Linux 基金会基于 7.2.4 版本分叉，保持原有 License。开源版本改名称为 Redis OSS（open source）
Redis 是一个开源的、网络化的、内存中的、具有持久化的键值数据存储。(是否持久化根据配置决定)
Redis 是一个内存数据库, 所有数据默认都存在于内存当中,可以配置“定时以追加或者快照”的方式储存到硬盘中. 由于 redis 是一个内存数据库, 所以读取写入的速度是非常快的, 所以经常被用来做数据, 页面等的缓存。
Redis 的组件 redis-server # 服务端 redis-cli # Redis CLI，一个命令行客户端 redis-benchmark # 压测工具 redis-check-dump &amp;amp;&amp;amp; redis-check-aof # 检测工具 Redis 的数据类型 Redis 数据类型
Redis 部署 Docker 启动 Redis docker run -d --name redis \ --network=host \ redis:5.</description></item><item><title>Redis 数据类型</title><link>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E9%94%AE%E5%80%BC%E6%95%B0%E6%8D%AE/Redis/Redis-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E9%94%AE%E5%80%BC%E6%95%B0%E6%8D%AE/Redis/Redis-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid><description>概述 参考：
官方文档，数据类型 https://redis.io/docs/latest/develop/data-types/ string(字符串)，hash(哈希)，list(列表)，set(集合) 及 zset(sorted set：有序集合)。
后面增加了：
Bit arrays (或者说 simply bitmaps)
在 2.8.9 版本添加了 HyperLogLog 结构
一般情况下，每种类型的数据都有与之相关的 Redis CLI 中的子命令对应进行处理</description></item><item><title>Pub/Sub(发布/订阅)</title><link>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E9%94%AE%E5%80%BC%E6%95%B0%E6%8D%AE/Redis/Pub_Sub%E5%8F%91%E5%B8%83_%E8%AE%A2%E9%98%85/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E9%94%AE%E5%80%BC%E6%95%B0%E6%8D%AE/Redis/Pub_Sub%E5%8F%91%E5%B8%83_%E8%AE%A2%E9%98%85/</guid><description>概述 参考：
官方文档 https://redis.io/docs/latest/develop/interact/pubsub/ Wiki, 发布/订阅 模式 Redis 可以通过 SUBSCRIBE、UNSUBSCRIBE、PUBLISH 这类命令实现 Publish/Subscribe(发布/订阅)模式。
Redis 的 发布/订阅模式中，Messages(消息) 的发送者称为 Publishers(发布者)、消息的接收者称为 Subscribers(订阅者)。而发送者和接收者之间传递消息的途径称为 Channels(频道)。
订阅者可以订阅自己感兴趣的 Channels，并随时等待接收发布到这些 Channels 中的消息，并不需要知道有哪些发布者。
发布者可以向任何 Channels 中发布消息，而不需要知道有哪些订阅者
这种将 发布者 与 订阅者 解耦的模式，可以实现更大的可扩展性和更动态的网络拓扑结构。
Redis 中并没有默认已经存在的 Channels(频道)。 只要执行了 SUBSCRIBE 命令，并指定 Channel 名称，Redis 就会创建一个频道，并且执行该命令的客户端就称为 Subscriber。比如，现在执行如下命令：
127.0.0.1:6379&amp;gt; SUBSCRIBE test1 test2 Reading messages... (press Ctrl-C to quit) 1) &amp;#34;subscribe&amp;#34; 2) &amp;#34;test1&amp;#34; 3) (integer) 1 1) &amp;#34;subscribe&amp;#34; 2) &amp;#34;test2&amp;#34; 3) (integer) 2 此时，创建了两个 Channels，test1 和 test2，其他客户端发送到这些 Channels 的消息，将被推送到订阅了这俩通道的 Subscriber，也就是订阅者的客户端。效果如下：</description></item><item><title>Redis Operator</title><link>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E9%94%AE%E5%80%BC%E6%95%B0%E6%8D%AE/Redis/Redis-Operator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E9%94%AE%E5%80%BC%E6%95%B0%E6%8D%AE/Redis/Redis-Operator/</guid><description>通过 Operator 部署一套生产可用的 Redis 集群 该部署方式基于 spotahome 的 redis-operator 项目
这里是 crd 可用字段的信息
创建名称空间 kubectl create ns redis 创建 operator curl -LO https://raw.githubusercontent.com/spotahome/redis-operator/master/example/operator/all-redis-operator-resources.yaml # 修改 ClusterRoleBinding 的 namespace 为 redis sed -i &amp;#39;s/namespace: default/namespace: redis/g&amp;#39; all-redis-operator-resources.yaml # 添加 ServiceAccount namespace 为 redis sed -i &amp;#39;/^kind: ServiceAccount/{N;a\ namespace: redis }&amp;#39; all-redis-operator-resources.yaml # 添加 Deployment namespace 为 redis sed -i &amp;#39;/^kind: Deployment/{N;a\ namespace: redis }&amp;#39; all-redis-operator-resources.yaml kubectl apply -f all-redis-operator-resources.yaml 配置 redis 密码认证 # “密码”修改为自己想设置的密码 echo -n &amp;quot;密码&amp;quot; &amp;gt; password kubectl create -n redis secret generic redis-auth --from-file=password 部署 redis cat &amp;gt; redis.</description></item><item><title>Redis 配置详解</title><link>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E9%94%AE%E5%80%BC%E6%95%B0%E6%8D%AE/Redis/Redis-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E9%94%AE%E5%80%BC%E6%95%B0%E6%8D%AE/Redis/Redis-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</guid><description>概述 参考:
官方文档 https://redis.io/docs/latest/operate/oss_and_stack/management/config/ Redis 可以在不使用配置文件的情况下使用内置的默认配置启动。但是一般情况，都会使用一个 Redis 的配置文件(文件名通常是 redis.conf)来启动 Redis。Redis 启动后，会将 redis.conf 文件的内容加载到内存中，通过 Redis 客户端的 config get * 命令，即可获取当前已经加载到内存中的配置。
127.0.0.1:6379&amp;gt; config get * 1) &amp;#34;dbfilename&amp;#34; 2) &amp;#34;dump.rdb&amp;#34; 3) &amp;#34;requirepass&amp;#34; 4) &amp;#34;&amp;#34; 5) &amp;#34;masterauth&amp;#34; 6) &amp;#34;&amp;#34; ....... 后略 配置文件的写法非常简单。redis.conf 由 Directives(指令) 组成，每条指令一行。而 Directives 分为两部分
Keyword(关键字) # 该指令的含义 Arguments(参数) # Redis 执行该指令时的行为 格式如下：
# 关键字 参数(多个参数以空格分隔) Keyword Argument1 Argument2 ... ArugmentN 通过命令函参数传递配置 通过命令行传递参数的格式与 redis.conf 文件中配置格式完全相同，只不过关键字前面有个 -- 前缀。比如：
redis-server --port 6380 --replicaof 127.0.0.1 6379 生成的内存中配置如下：</description></item></channel></rss>