<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Redis 管理 on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E9%94%AE%E5%80%BC%E6%95%B0%E6%8D%AE/Redis/Redis-%E7%AE%A1%E7%90%86/</link><description>Recent content in Redis 管理 on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E9%94%AE%E5%80%BC%E6%95%B0%E6%8D%AE/Redis/Redis-%E7%AE%A1%E7%90%86/index.xml" rel="self" type="application/rss+xml"/><item><title>Redis 管理</title><link>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E9%94%AE%E5%80%BC%E6%95%B0%E6%8D%AE/Redis/Redis-%E7%AE%A1%E7%90%86/Redis-%E7%AE%A1%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E9%94%AE%E5%80%BC%E6%95%B0%E6%8D%AE/Redis/Redis-%E7%AE%A1%E7%90%86/Redis-%E7%AE%A1%E7%90%86/</guid><description>概述 参考：
官方文档，Redis 管理 https://redis.io/docs/latest/operate/oss_and_stack/management/admin/ 在生产中配置和管理 Redis 的建议。
概述 参考：
官方中文文档 官方优化建议
我们建议使用 linux 部署 Redis。Redis 也在 osx，FreeBSD，OpenBSD 上经过测试，但 Linux 经过所有主要的压力测试，并且最多产品部署。 确保设置 Linux 内核 overcommit memory setting 为 1。向/etc/sysctl.conf 添加 vm.overcommit_memory = 1 然后重启，或者运行命令 sysctl vm.overcommit_memory=1 以便立即生效。 确保禁用 Linux 内核特性 transparent huge pages，它对内存使用和延迟有非常大的负面影响。通过命令 echo never &amp;gt; /sys/kernel/mm/transparent_hugepage/enabled 来完成。 确保你的系统设置了一些 swap（我们建议和内存一样大）。如果 linux 没有 swap 并且你的 redis 实例突然消耗了太多内存，或者 Redis 由于内存溢出会宕掉，或者 Linux 内核 OOM Killer 会杀掉 Redis 进程。 设置一个明确的 maxmemory 参数来限制你的实例，以便确保实例会报告错误而不是当接近系统内存限制时失败 如果你对一个写频繁的应用使用 redis，当向磁盘保存 RDB 文件或者改写 AOF 日志时，redis 可能会用正常使用内存 2 倍的内存。额外使用的内存和保存期间写修改的内存页数量成比例，因此经常和这期间改动的键的数量成比例。确保相应的设置内存的大小。 当在 daemontools 下运行时，使用 daemonize no 即使你禁用持久化，如果你使用复制，redis 会执行 rdb 保存，除非你使用新的无磁盘复制特性，这个特性目前还是实验性的。 如果你使用复制，确保要么你的 master 激活了持久化，要么它不会在当掉后自动重启。slave 是 master 的完整备份，因此如果 master 通过一个空数据集重启，slave 也会被清掉。 Redis 延迟问题疑难解答</description></item><item><title>Redis 基础、高级特性与性能调优</title><link>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E9%94%AE%E5%80%BC%E6%95%B0%E6%8D%AE/Redis/Redis-%E7%AE%A1%E7%90%86/Redis-%E5%9F%BA%E7%A1%80%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7%E4%B8%8E%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E9%94%AE%E5%80%BC%E6%95%B0%E6%8D%AE/Redis/Redis-%E7%AE%A1%E7%90%86/Redis-%E5%9F%BA%E7%A1%80%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7%E4%B8%8E%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/</guid><description>概述 参考：
公众号，Redis 基础、高级特性与性能调优 公众号，万字总结，Redis 性能问题排查解决手册 本文将从Redis的基本特性入手，通过讲述Redis的数据结构和主要命令对Redis的基本能力进行直观介绍。之后概览Redis提供的高级能力，并在部署、维护、性能调优等多个方面进行更深入的介绍和指导。
本文适合使用Redis的普通开发人员，以及对Redis进行选型、架构设计和性能调优的架构设计人员。
Redis是一个开源的，基于内存的结构化数据存储媒介，可以作为数据库、缓存服务或消息服务使用。
Redis支持多种数据结构，包括字符串、哈希表、链表、集合、有序集合、位图、Hyperloglogs等。
Redis具备LRU淘汰、事务实现、以及不同级别的硬盘持久化等能力，并且支持副本集和通过Redis Sentinel实现的高可用方案，同时还支持通过Redis Cluster实现的数据自动分片能力。
Redis的主要功能都基于单线程模型实现，也就是说Redis使用一个线程来服务所有的客户端请求，同时Redis采用了非阻塞式IO，并精细地优化各种命令的算法时间复杂度，这些信息意味着：
Redis是线程安全的（因为只有一个线程），其所有操作都是原子的，不会因并发产生数据异常 Redis的速度非常快（因为使用非阻塞式IO，且大部分命令的算法时间复杂度都是O(1)) 使用高耗时的Redis命令是很危险的，会占用唯一的一个线程的大量处理时间，导致所有的请求都被拖慢。（例如时间复杂度为O(N)的KEYS命令，严格禁止在生产环境中使用） Redis的数据结构和相关常用命令 本节中将介绍Redis支持的主要数据结构，以及相关的常用Redis命令。本节只对Redis命令进行扼要的介绍，且只列出了较常用的命令。如果想要了解完整的Redis命令集，或了解某个命令的详细使用方法，请参考官方文档：https://redis.io/commands
Key Redis采用Key-Value型的基本数据结构，任何二进制序列都可以作为Redis的Key使用（例如普通的字符串或一张JPEG图片）
关于Key的一些注意事项：
不要使用过长的Key。例如使用一个1024字节的key就不是一个好主意，不仅会消耗更多的内存，还会导致查找的效率降低 Key短到缺失了可读性也是不好的，例如&amp;quot;u1000flw&amp;quot;比起&amp;quot;user:1000:followers&amp;quot;来说，节省了寥寥的存储空间，却引发了可读性和可维护性上的麻烦 最好使用统一的规范来设计Key，比如&amp;quot;object-type:id:attr&amp;quot;，以这一规范设计出的Key可能是&amp;quot;user:1000&amp;quot;或&amp;quot;comment:1234:reply-to&amp;quot; Redis允许的最大Key长度是512MB（对Value的长度限制也是512MB） String String是Redis的基础数据类型，Redis没有Int、Float、Boolean等数据类型的概念，所有的基本类型在Redis中都以String体现。
与String相关的常用命令：
SET：为一个key设置value，可以配合EX/PX参数指定key的有效期，通过NX/XX参数针对key是否存在的情况进行区别操作，时间复杂度O(1) GET：获取某个key对应的value，时间复杂度O(1) GETSET：为一个key设置value，并返回该key的原value，时间复杂度O(1) MSET：为多个key设置value，时间复杂度O(N) MSETNX：同MSET，如果指定的key中有任意一个已存在，则不进行任何操作，时间复杂度O(N) MGET：获取多个key对应的value，时间复杂度O(N) 上文提到过，Redis的基本数据类型只有String，但Redis可以把String作为整型或浮点型数字来使用，主要体现在INCR、DECR类的命令上：
INCR：将key对应的value值自增1，并返回自增后的值。只对可以转换为整型的String数据起作用。时间复杂度O(1) INCRBY：将key对应的value值自增指定的整型数值，并返回自增后的值。只对可以转换为整型的String数据起作用。时间复杂度O(1) DECR/DECRBY：同INCR/INCRBY，自增改为自减。 INCR/DECR系列命令要求操作的value类型为String，并可以转换为64位带符号的整型数字，否则会返回错误。
也就是说，进行INCR/DECR系列命令的value，必须在[-2^63 ~ 2^63 - 1]范围内。
前文提到过，Redis采用单线程模型，天然是线程安全的，这使得INCR/DECR命令可以非常便利的实现高并发场景下的精确控制。
例1：库存控制 在高并发场景下实现库存余量的精准校验，确保不出现超卖的情况。
设置库存总量：
SET inv:remain &amp;#34;100&amp;#34; 库存扣减+余量校验：
DECR inv:remain 当DECR命令返回值大于等于0时，说明库存余量校验通过，如果返回小于0的值，则说明库存已耗尽。
假设同时有300个并发请求进行库存扣减，Redis能够确保这300个请求分别得到99到-200的返回值，每个请求得到的返回值都是唯一的，绝对不会找出现两个请求得到一样的返回值的情况。
例2：自增序列生成 实现类似于RDBMS的Sequence功能，生成一系列唯一的序列号
设置序列起始值：
SET sequence &amp;#34;10000&amp;#34; 获取一个序列值：
INCR sequence 直接将返回值作为序列使用即可。
获取一批（如100个）序列值：
INCRBY sequence 100 假设返回值为N，那么[N - 99 ~ N]的数值都是可用的序列值。</description></item></channel></rss>