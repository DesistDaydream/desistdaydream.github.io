<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Redis 高可用 on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E9%94%AE%E5%80%BC%E6%95%B0%E6%8D%AE/Redis/Redis-%E9%AB%98%E5%8F%AF%E7%94%A8/</link><description>Recent content in Redis 高可用 on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E9%94%AE%E5%80%BC%E6%95%B0%E6%8D%AE/Redis/Redis-%E9%AB%98%E5%8F%AF%E7%94%A8/index.xml" rel="self" type="application/rss+xml"/><item><title>Redis 高可用</title><link>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E9%94%AE%E5%80%BC%E6%95%B0%E6%8D%AE/Redis/Redis-%E9%AB%98%E5%8F%AF%E7%94%A8/Redis-%E9%AB%98%E5%8F%AF%E7%94%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E9%94%AE%E5%80%BC%E6%95%B0%E6%8D%AE/Redis/Redis-%E9%AB%98%E5%8F%AF%E7%94%A8/Redis-%E9%AB%98%E5%8F%AF%E7%94%A8/</guid><description>概述 参考：
原文 知乎 微信公众号 Redis 支持三种高可用方案
Replication(复制) 模式 实际上，该模式并不是绝对的高可用，仅仅保证了数据的不丢失 Sentinel(哨兵) 模式 Cluster(集群) 模式 Cluster(集群) http://www.redis.cn/topics/cluster-tutorial.html
https://redis.io/topics/cluster-tutorial
客户端操作原理(请求路由原理) 请求重定向 在集群模式下，Redis 接收任何键相关命令时首先计算键对应的槽，再根据槽找出所对应的节点，如果节点是自身，则处理键命令；否则回复 MOVED 重定向错误，通知客户端请求正确的节点。这个过程称为 MOVED 重定向。
# 如果key经过计算后，其分配的slot就在当前节点，那么可以请求成功，否则，回复重定向消息 [root@node01 redis]# redis-cli -h 10.0.0.100 -p 6379 10.0.0.100:6379&amp;gt; set name tom OK 10.0.0.100:6379&amp;gt; set age 20 (error) MOVED 741 10.0.0.101:6379 重定向信息包含了键所对应的槽以及负责该槽的节点地址，根据这些信息客户端就可以向正确的节点发起请求。在 10.0.0.101:6379 节点上成功执行之前的命令：
[root@node02 redis]# redis-cli -h 10.0.0.101 -p 6379 10.0.0.101:6379&amp;gt; set age 20 OK 使用 redis-cli 命令时，可以加入-c 参数支持自动重定向，简化手动发起重定向的操作：
[root@node01 redis]# redis-cli -c -h 10.</description></item><item><title>Redis 高可用部署</title><link>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E9%94%AE%E5%80%BC%E6%95%B0%E6%8D%AE/Redis/Redis-%E9%AB%98%E5%8F%AF%E7%94%A8/Redis-%E9%AB%98%E5%8F%AF%E7%94%A8%E9%83%A8%E7%BD%B2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E9%94%AE%E5%80%BC%E6%95%B0%E6%8D%AE/Redis/Redis-%E9%AB%98%E5%8F%AF%E7%94%A8/Redis-%E9%AB%98%E5%8F%AF%E7%94%A8%E9%83%A8%E7%BD%B2/</guid><description>Docker 部署 Redis 高可用 Docker 部署 Redis Sentinel 模式
Sentinel 模式至少需要 3 个节点，所以这里假设有如下三个节点
172.19.42.231
172.19.42.232
172.19.42.233
创建配置文件与存储所在路径 mkdir -p /opt/redis/config mkdir -p /opt/redis/data chmod 777 /opt/redis/data 启动 Redis master 节点配置
cat &amp;gt; /opt/redis/config/redis.conf &amp;lt;&amp;lt;EOF save 900 1 maxmemory 1G EOF chmod 666 /opt/redis/config/redis.conf replica 节点配置
cat &amp;gt; /opt/redis/config/redis.conf &amp;lt;&amp;lt;EOF save 900 1 maxmemory 1G replicaof 172.19.42.231 6379 EOF chmod 666 /opt/redis/config/redis.conf 启动 Redis
docker run -d --name redis \ --network=host \ -v /opt/redis/config:/etc/redis \ -v /opt/redis/data:/data \ redis:5.</description></item><item><title>Replication(复制) 模式</title><link>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E9%94%AE%E5%80%BC%E6%95%B0%E6%8D%AE/Redis/Redis-%E9%AB%98%E5%8F%AF%E7%94%A8/Replication%E5%A4%8D%E5%88%B6-%E6%A8%A1%E5%BC%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E9%94%AE%E5%80%BC%E6%95%B0%E6%8D%AE/Redis/Redis-%E9%AB%98%E5%8F%AF%E7%94%A8/Replication%E5%A4%8D%E5%88%B6-%E6%A8%A1%E5%BC%8F/</guid><description>概述 参考：
官方文档 基本原理 主从复制模式中包含 一个主数据库实例(master) 与 一个或多个从数据库实例(slave)，如下图
客户端可对主数据库进行读写操作，对从数据库进行读操作，主数据库写入的数据会实时自动同步给从数据库。
具体工作机制为：
slave 启动后，向 master 发送 SYNC 命令，master 接收到 SYNC 命令后通过 bgsave 保存快照(即上文所介绍的 RDB 持久化)，并使用缓冲区记录保存快照这段时间内执行的写命令
master 将保存的快照文件发送给 slave，并继续记录执行的写命令
slave 接收到快照文件后，加载快照文件，载入数据
master 快照发送完后开始向 slave 发送缓冲区的写命令，slave 接收命令并执行，完成复制初始化
此后 master 每次执行一个写命令都会同步发送给 slave，保持 master 与 slave 之间数据的一致性
2. 部署示例
redis.conf 的主要配置
###网络相关### # bind 127.0.0.1 # 绑定监听的网卡IP，注释掉或配置成0.0.0.0可使任意IP均可访问 protected-mode no # 关闭保护模式，使用密码访问 port 6379 # 设置监听端口，建议生产环境均使用自定义端口 timeout 30 # 客户端连接空闲多久后断开连接，单位秒，0表示禁用 ###通用配置### daemonize yes # 在后台运行 pidfile /var/run/redis_6379.pid # pid进程文件名 logfile /usr/local/redis/logs/redis.</description></item><item><title>Sentinel 配置详解</title><link>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E9%94%AE%E5%80%BC%E6%95%B0%E6%8D%AE/Redis/Redis-%E9%AB%98%E5%8F%AF%E7%94%A8/Sentinel-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E9%94%AE%E5%80%BC%E6%95%B0%E6%8D%AE/Redis/Redis-%E9%AB%98%E5%8F%AF%E7%94%A8/Sentinel-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</guid><description>参考：官方文档 1、
Sentinel 的配置与 Redis 配置用法相同，当使用 &amp;ndash;sentinel 参数启动 redis 时，则 redis 程序加载配置文件时，将只会特定的配置信息
Sentinel 配置环境 port &amp;lt;INT&amp;gt; # Sentinel 监听的端口，Sentinel 之间使用该端口通讯 sentinel monitor &amp;lt;master-group-name&amp;gt; &amp;lt;IP&amp;gt; &amp;lt;PORT&amp;gt; &amp;lt;QUORUM&amp;gt; # 指定 Sentinel 要监听的 MASTER sentinel montior mymaster 192.168.50.101 6379 1 这个配置意味着，Sentinel 监控的目标 master 节点的 IP 为 192.168.50.101、端口为 6379，最后一个数字表示投票需要的&amp;quot;最少法定人数&amp;quot;。
最少法定人数的理解：比如有 10 个 sentinal 哨兵都在监控某一个 master 节点，如果需要至少 6 个哨兵发现 master 挂掉后，才认为 master 真正 down 掉，那么这里就配置为 6，最小配置 1 台 master，1 台 slave，在二个机器上都启动 sentinal 的情况下，哨兵数只有 2 个，如果一台机器物理挂掉，只剩一个 sentinal 能发现该问题，所以这里配置成 1。</description></item><item><title>Sentinel(哨兵) 模式</title><link>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E9%94%AE%E5%80%BC%E6%95%B0%E6%8D%AE/Redis/Redis-%E9%AB%98%E5%8F%AF%E7%94%A8/Sentinel%E5%93%A8%E5%85%B5-%E6%A8%A1%E5%BC%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E9%94%AE%E5%80%BC%E6%95%B0%E6%8D%AE/Redis/Redis-%E9%AB%98%E5%8F%AF%E7%94%A8/Sentinel%E5%93%A8%E5%85%B5-%E6%A8%A1%E5%BC%8F/</guid><description>概述 参考：
官方文档 中文文档 博客园大佬 博客园大佬 2 Redis Sentinel(哨兵) 基于 Redis 的 Replication(复制) 模式，增加了一个名为 Sentinel 的管理程序，用来保存 Redis Replication 模式的架构信息，以及对外提供该信息。同时 sentinel 程序监控多台 Redis 状态，当 Redis 不可用时，Sentinel 将自动下线该 Redis。
注意：Sentinel(哨兵) 模式必须基于 Replication 模式，否则没有任何意义。
注意：一套 Sentinel 是可以监听多套 Replication 模式的 Redis 的组合，这样可以有效节省资源，其中每套 Replication 模式的 Redis 会使用一个 master-name 作为一个标识。
客户端操作 Redis 原理
client 访问 sentinel 集群，获取 redis 集群 master 的 ip
client 连接 redis 集群的 master 对数据进行读写操作。
Redis Sentinel 为 Redis 提供了高可用性。这意味着，可以使用 Sentinel 程序部署 Redis，这种部署可以在无需人工干预的情况下抵抗某些类型的故障。Sentinel 具有以下特性：</description></item></channel></rss>