<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦的站点 – 数据库</title><link>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/</link><description>Recent content in 数据库 on 断念梦的站点</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: 数据库</title><link>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://db-engines.com/en/article/Database">DB-Engines&lt;/a>(所有数据库的排名、状态等信息的观察网站)&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>数据库是由特定软件（&lt;strong>所谓的数据库管理系统(简称 DBMS)&lt;/strong>）管理的数据的逻辑集合。数据库和 DBMS 共同构成数据库系统。&lt;/p>
&lt;p>A database is a logical collection of data which is managed by a specific software (the so-called &lt;a href="https://db-engines.com/en/article/Database+Management+System">database management system&lt;/a> or DBMS). Database and DBMS together form the database system.&lt;/p>
&lt;p>数据库不仅包括用户数据，还包括对其进行管理所需的对象（例如索引或日志文件）。&lt;/p>
&lt;p>A database includes not only user data but also the objects necessary for its management (e.g. indexes or logfiles).&lt;/p>
&lt;p>数据库的类型&lt;/p>
&lt;ol>
&lt;li>RDBMS：关系型数据库
&lt;ol>
&lt;li>Oracle&lt;/li>
&lt;li>MariaDB/MySQL&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>NoSQL：非关系型数据库
&lt;ol>
&lt;li>Key/Val NoSQL：redis,etcd&lt;/li>
&lt;li>Column Family NoSQL 列族：HBase&lt;/li>
&lt;li>Documentation NoSQL：MongoDB&lt;/li>
&lt;li>Graph  NoSQL：Neo4j&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>NewSQL：分布式数据库&lt;/li>
&lt;/ol>
&lt;h1 id="relational-dbms">Relational DBMS&lt;a class="td-heading-self-link" href="#relational-dbms" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>详见 &lt;a href="https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE.md">关系数据&lt;/a>&lt;/p>
&lt;p>&lt;strong>Relational database management systems(关系数据库管理系统，简称 RDBMS)&lt;/strong> support the relational (=table-oriented) data model. The schema of a table (=relation schema) is defined by the table name and a fixed number of attributes with fixed data types. A record (=entity) corresponds to a row in the table and consists of the values of each attribute. A relation thus consists of a set of uniform records.&lt;/p>
&lt;p>The table schemas are generated by normalization in the process of data modeling.&lt;/p>
&lt;p>Certain basic operations are defined on the relations:&lt;/p>
&lt;ul>
&lt;li>classical set operations (union, intersection and difference)&lt;/li>
&lt;li>Selection (selection of a subset of records according to certain filter criteria for the attribute values)&lt;/li>
&lt;li>Projection (selecting a subset of attributes / columns of the table)&lt;/li>
&lt;li>Join: special conjunction of multiple tables as a combination of the Cartesian product with selection and projection.&lt;/li>
&lt;/ul>
&lt;p>These basic operations, as well as operations for creation, modification and deletion of table schemas, operations for controlling transactions and user management are performed by means of database languages, with SQL being a well established standard for such languages.&lt;/p>
&lt;p>The first relational database management systems appeared on the market at the beginning of the 1980s and since have been the most commonly used &lt;a href="https://db-engines.com/en/article/DBMS">DBMS&lt;/a> type.&lt;/p>
&lt;p>Over the years, many RDBMS have been expanded with non-relational concepts such as user-defined data types, not atomic attributes, inheritance and hierarchies, which is why they are sometimes referred to as object-relational DBMS.&lt;/p>
&lt;h2 id="most-popular-examples">Most popular examples&lt;a class="td-heading-self-link" href="#most-popular-examples" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://db-engines.com/en/system/Oracle">Oracle&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://db-engines.com/en/system/MySQL">MySQL&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://db-engines.com/en/system/Microsoft+SQL+Server">Microsoft SQL Server&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://db-engines.com/en/system/PostgreSQL">PostgreSQL&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://db-engines.com/en/system/IBM+Db2">IBM Db2&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Find more systems in our &lt;a href="https://db-engines.com/en/ranking/relational+dbms">relational DBMS ranking&lt;/a>.&lt;/p>
&lt;h1 id="nosql">NoSQL&lt;a class="td-heading-self-link" href="#nosql" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>NoSQL Database Systems are an alternative to the mainstream &lt;a href="https://db-engines.com/en/article/Relational+DBMS">Relational DBMS&lt;/a>. They don&amp;rsquo;t use a relational data model and typically have no SQL interface.&lt;/p>
&lt;p>Although this type of systems exists for many years (some even longer than relational systems), the term NoSQL was first introduced in 2009 when many new systems were developed in order to cope with the new requirements for database management systems at that time. E.g.  Big Data, scalability and fault tolerance for large web applications.&lt;/p>
&lt;p>The acronym NoSQL is often understood as &amp;ldquo;Not Only SQL&amp;rdquo;, implying that relational systems are a proven technology but not necessarily the optimal choice for each kind of intended use.&lt;/p>
&lt;p>NoSQL 随着发展也出现了一种新的概念，称为 &lt;strong>Schemaless&lt;/strong>，在 &lt;a href="https://redis.io/blog/schemaless-databases/">Redis&lt;/a>、&lt;a href="https://www.mongodb.com/resources/basics/unstructured-data/schemaless">MongoDB&lt;/a>、etc. 的官网文章中都有提到 Schemaless Database。&lt;/p>
&lt;h2 id="classification分类">Classification(分类)&lt;a class="td-heading-self-link" href="#classification%e5%88%86%e7%b1%bb" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>NoSQL systems are a heterogenous group of very different database systems. Therefore each attempt for a classification fails in classifying one or another system. However, the following categegories are well accepted:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://db-engines.com/en/article/Key-value+Stores">Key-Value Stores&lt;/a>
&lt;ul>
&lt;li>详见 &lt;a href="https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E9%94%AE%E5%80%BC%E6%95%B0%E6%8D%AE/%E9%94%AE%E5%80%BC%E6%95%B0%E6%8D%AE.md">键值数据&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://db-engines.com/en/article/Wide+Column+Stores">Wide Column Stores&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://db-engines.com/en/article/Document+Stores">Document Stores&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://db-engines.com/en/article/Graph+DBMS">Graph DBMS&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://db-engines.com/en/article/RDF+Stores">RDF Stores&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://db-engines.com/en/article/Native+XML+DBMS">Native XML DBMS&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://db-engines.com/en/article/Content+Stores">Content Stores&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://db-engines.com/en/article/Search+Engines">Search Engines&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="advantages优势">Advantages(优势)&lt;a class="td-heading-self-link" href="#advantages%e4%bc%98%e5%8a%bf" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Not all of the above mentioned classes have the same general advantages, but they benefit from a combination of the following aspects.&lt;/p>
&lt;ul>
&lt;li>higher performance&lt;/li>
&lt;li>easy distribution of data on different nodes (e.g. sharding), thereby achieving scalability and fault tolerance&lt;/li>
&lt;li>higher flexibility by using a schema-free data model.&lt;/li>
&lt;li>simpler administration&lt;/li>
&lt;/ul>
&lt;h3 id="methods">Methods&lt;a class="td-heading-self-link" href="#methods" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>These advantages are achieved by means of one or more of the following approaches:&lt;/p>
&lt;ul>
&lt;li>No normalized relational data model&lt;/li>
&lt;li>Abandoning one or more of the ACID criteria&lt;/li>
&lt;li>Less powerful possibilities for querying the data&lt;/li>
&lt;/ul></description></item><item><title>Docs: 时间序列数据</title><link>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E6%95%B0%E6%8D%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E6%95%B0%E6%8D%AE/</guid><description/></item><item><title>Docs: 数据库对比</title><link>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%B9%E6%AF%94/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%B9%E6%AF%94/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="greptimedb-vs-clickhouse-vs-elasticsearch-日志引擎性能对比报告">GreptimeDB vs. ClickHouse vs. ElasticSearch 日志引擎性能对比报告&lt;a class="td-heading-self-link" href="#greptimedb-vs-clickhouse-vs-elasticsearch-%e6%97%a5%e5%bf%97%e5%bc%95%e6%93%8e%e6%80%a7%e8%83%bd%e5%af%b9%e6%af%94%e6%8a%a5%e5%91%8a" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>原文: &lt;a href="https://mp.weixin.qq.com/s/eITHYdw8Qoa0xYozqJZuOw">https://mp.weixin.qq.com/s/eITHYdw8Qoa0xYozqJZuOw&lt;/a>&lt;/p>
&lt;p>&lt;a href="http://mp.weixin.qq.com/s?__biz=Mzg3MTgxMzczNg==&amp;amp;mid=2247488395&amp;amp;idx=1&amp;amp;sn=151240e3f14f04a43c49878e48c71cbf&amp;amp;chksm=cef9948cf98e1d9a31c5767390e77e6fd4807fc18f91693fb75188ed7279ad4c56a9697f2346&amp;amp;scene=21#wechat_redirect">GreptimeDB 在 v0.9 版本&lt;/a>引入了日志存储和检索功能，使得用户可以使用同样数据模型和查询语言（SQL）来统一处理指标、日志（和事件）。&lt;/p>
&lt;p>本报告将初步给出 v0.9 首次引入的日志存储和检索的单机性能，包括写入和查询性能、资源占用和压缩率等。在可观测性领域中，常用的日志系统包括经典的 ELK 组合（ElasticSearch）以及在国内广泛使用的 ClickHouse。我们选择这两个系统进行横向对比，以供参考。GreptimeDB 面向云原生环境设计，因此我们也测试了基于 S3 对象存储的读写性能。&lt;/p>
&lt;h2 id="测试场景">测试场景&lt;a class="td-heading-self-link" href="#%e6%b5%8b%e8%af%95%e5%9c%ba%e6%99%af" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="测试数据和流程">测试数据和流程&lt;a class="td-heading-self-link" href="#%e6%b5%8b%e8%af%95%e6%95%b0%e6%8d%ae%e5%92%8c%e6%b5%81%e7%a8%8b" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>我们选用 nginx access log 作为写入数据，一行数据的样例如下：&lt;/p>
&lt;pre tabindex="0">&lt;code>129.37.245.88 - meln1ks [01/Aug/2024:14:22:47 +0800] &amp;#34;PATCH /observability/metrics/production HTTP/1.0&amp;#34; 501 33085
&lt;/code>&lt;/pre>&lt;p>我们使用 vector[1] 这个开源可观测数据 pipeline 来生成并写入上面的数据。整体测试的流程如图：&lt;/p>
&lt;p>&lt;img src="https://mmbiz.qpic.cn/sz_mmbiz_png/B9yiaFdoD68ygDPPbMcMQhj8CmsNHic5sbDibo2Upl8h2xezFS9y0kOEjWXxmd6lCh6WiaTx2SZHcXY0WmOib7rkFxQ/640?wx_fmt=png&amp;amp;from=appmsg" alt="">&lt;/p>
&lt;p>数据写入后，我们分别使用 SQL（GreptimeDB 和 ClickHouse）和  ElasticSearch HTTP 协议进行查询测试。&lt;/p>
&lt;h3 id="写入方式">写入方式&lt;a class="td-heading-self-link" href="#%e5%86%99%e5%85%a5%e6%96%b9%e5%bc%8f" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>写入方式我们也做了区分：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>切分模式&lt;/strong>：将每行日志，切分出多个字段，比如上面这行日志，可以切分出 &lt;code>http_version&lt;/code>、&lt;code>ip&lt;/code>、&lt;code>method&lt;/code>、&lt;code>path&lt;/code>、&lt;code>status&lt;/code> 等字段。我们同样使用 vector 进行日志的解析和切分；&lt;/li>
&lt;li>&lt;strong>全文模式&lt;/strong>：将该条日志，除了时间戳以外，完整存储为一个 &lt;code>message&lt;/code> 的文本字段，并启用全文索引。&lt;/li>
&lt;/ul>
&lt;p>我们也将比较两种模式带来的差异。&lt;/p>
&lt;h2 id="软硬件说明">软硬件说明&lt;a class="td-heading-self-link" href="#%e8%bd%af%e7%a1%ac%e4%bb%b6%e8%af%b4%e6%98%8e" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="硬件环境">硬件环境&lt;a class="td-heading-self-link" href="#%e7%a1%ac%e4%bb%b6%e7%8e%af%e5%a2%83" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>机器规格&lt;/th>
&lt;th>操作系统&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>aws c5d.2xlarge, 8 CPU 16 Gib memory&lt;/td>
&lt;td>ubuntu 24.04 LTS&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="软件版本及设置">软件版本及设置&lt;a class="td-heading-self-link" href="#%e8%bd%af%e4%bb%b6%e7%89%88%e6%9c%ac%e5%8f%8a%e8%ae%be%e7%bd%ae" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>GreptimeDB&lt;/td>
&lt;td>v0.9.2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ClickHouse（下文统称 CH）&lt;/td>
&lt;td>24.9.1.219&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ElasticSearch（下文统称 ES）&lt;/td>
&lt;td>8.15.0&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>如无特殊说明，三个存储都采用&lt;strong>默认配置&lt;/strong>。&lt;/p>
&lt;p>GreptimeDB S3 配置，开启了对象存储的读写 Buffer/Cache：&lt;/p>
&lt;pre tabindex="0">&lt;code>[storage]type = &amp;#34;S3&amp;#34;bucket = &amp;#34;ap-southeast-1-test-bucket&amp;#34;root = &amp;#34;logitem_data&amp;#34;access_key_id = &amp;#34;xxx&amp;#34;secret_access_key = &amp;#34;xxx&amp;#34;endpoint = &amp;#34;endpoint&amp;#34;region = &amp;#34;ap-southeast-1&amp;#34;cache_path = &amp;#34;/home/ubuntu/s3cache&amp;#34;cache_capacity = &amp;#34;20G&amp;#34;[[region_engine]][region_engine.mito]enable_experimental_write_cache = trueexperimental_write_cache_size = &amp;#34;20G&amp;#34;
&lt;/code>&lt;/pre>&lt;h3 id="切分模式设置">切分模式设置&lt;a class="td-heading-self-link" href="#%e5%88%87%e5%88%86%e6%a8%a1%e5%bc%8f%e8%ae%be%e7%bd%ae" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>Vector 解析配置：&lt;/p>
&lt;pre tabindex="0">&lt;code>[transforms.parse_logs]type = &amp;#34;remap&amp;#34;inputs = [&amp;#34;demo_logs&amp;#34;]source = &amp;#39;&amp;#39;&amp;#39;. = parse_regex!(.message, r&amp;#39;^(?P&amp;lt;ip&amp;gt;\S+) - (?P&amp;lt;user&amp;gt;\S+) \[(?P&amp;lt;timestamp&amp;gt;[^\]]+)\] &amp;#34;(?P&amp;lt;method&amp;gt;\S+) (?P&amp;lt;path&amp;gt;\S+) (?P&amp;lt;http_version&amp;gt;\S+)&amp;#34; (?P&amp;lt;status&amp;gt;\d+) (?P&amp;lt;bytes&amp;gt;\d+)$&amp;#39;)# Convert timestamp to a standard format.timestamp = parse_timestamp!(.timestamp, format: &amp;#34;%d/%b/%Y:%H:%M:%S %z&amp;#34;)# Convert status and bytes to integers.status = to_int!(.status).bytes = to_int!(.bytes)&amp;#39;&amp;#39;&amp;#39;
&lt;/code>&lt;/pre>&lt;p>GreptimeDB 建表语句：&lt;/p>
&lt;pre tabindex="0">&lt;code>--启用了 append 模式，并且将 user、path 和 status 设置为 Tag 类型（即主键）CREATE TABLE IF NOT EXISTS `test_table` (    `bytes` Int64 NULL,    `http_version` STRING NULL,    `ip` STRING NULL,    `method` STRING NULL,    `path` STRING NULL,    `status` SMALLINT UNSIGNED NULL,    `user` STRING NULL,    `timestamp` TIMESTAMP(3) NOT NULL,    PRIMARY KEY (`user`, `path`, `status`),    TIME INDEX (`timestamp`))ENGINE=mitoWITH(    append_mode = &amp;#39;true&amp;#39;);
&lt;/code>&lt;/pre>&lt;p>ClickHouse 建表语句：&lt;/p>
&lt;pre tabindex="0">&lt;code>--使用默认 MergeTree 引擎，定义同样的 sorting key。CREATE TABLE IF NOT EXISTS test_table(    bytes UInt64 NOT NULL,    http_version String NOT NULL,    ip String NOT NULL,    method String NOT NULL,    path String NOT NULL,    status UInt8 NOT NULL,    user String NOT NULL,    timestamp String NOT NULL,)ENGINE = MergeTree()ORDER BY (user, path, status);
&lt;/code>&lt;/pre>&lt;p>ElasticSearch 建表语句 (mapping)：&lt;/p>
&lt;pre tabindex="0">&lt;code>{  &amp;#34;vector-2024.08.19&amp;#34;: {    &amp;#34;mappings&amp;#34;: {      &amp;#34;properties&amp;#34;: {        &amp;#34;bytes&amp;#34;: {          &amp;#34;type&amp;#34;: &amp;#34;long&amp;#34;        },        &amp;#34;http_version&amp;#34;: {          &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;,          &amp;#34;fields&amp;#34;: {            &amp;#34;keyword&amp;#34;: {              &amp;#34;type&amp;#34;: &amp;#34;keyword&amp;#34;,              &amp;#34;ignore_above&amp;#34;: 256            }          }        },        &amp;#34;ip&amp;#34;: {          &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;,          &amp;#34;fields&amp;#34;: {            &amp;#34;keyword&amp;#34;: {              &amp;#34;type&amp;#34;: &amp;#34;keyword&amp;#34;,              &amp;#34;ignore_above&amp;#34;: 256            }          }        },        &amp;#34;method&amp;#34;: {          &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;,          &amp;#34;fields&amp;#34;: {            &amp;#34;keyword&amp;#34;: {              &amp;#34;type&amp;#34;: &amp;#34;keyword&amp;#34;,              &amp;#34;ignore_above&amp;#34;: 256            }          }        },        &amp;#34;path&amp;#34;: {          &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;,          &amp;#34;fields&amp;#34;: {            &amp;#34;keyword&amp;#34;: {              &amp;#34;type&amp;#34;: &amp;#34;keyword&amp;#34;,              &amp;#34;ignore_above&amp;#34;: 256            }          }        },        &amp;#34;status&amp;#34;: {          &amp;#34;type&amp;#34;: &amp;#34;long&amp;#34;        },        &amp;#34;timestamp&amp;#34;: {          &amp;#34;type&amp;#34;: &amp;#34;date&amp;#34;        },        &amp;#34;user&amp;#34;: {          &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;,          &amp;#34;fields&amp;#34;: {            &amp;#34;keyword&amp;#34;: {              &amp;#34;type&amp;#34;: &amp;#34;keyword&amp;#34;,              &amp;#34;ignore_above&amp;#34;: 256            }          }        }      }    }  }}
&lt;/code>&lt;/pre>&lt;h3 id="全文模式设置">全文模式设置&lt;a class="td-heading-self-link" href="#%e5%85%a8%e6%96%87%e6%a8%a1%e5%bc%8f%e8%ae%be%e7%bd%ae" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>GreptimeDB 建表语句：&lt;/p>
&lt;pre tabindex="0">&lt;code>--message 列启用 FULLTEXT 选项，开启全文索引CREATE TABLE IF NOT EXISTS `test_table` (    `message` STRING NULL     FULLTEXT WITH(        analyzer = &amp;#39;English&amp;#39;,         case_sensitive = &amp;#39;false&amp;#39;    ),    `timestamp` TIMESTAMP(3) NOT NULL,    TIME INDEX (`timestamp`))ENGINE=mitoWITH(    append_mode = &amp;#39;true&amp;#39;);
&lt;/code>&lt;/pre>&lt;p>ClickHouse 建表语句：&lt;/p>
&lt;pre tabindex="0">&lt;code>--同样指定 message 列建立全文索引CREATE TABLE IF NOT EXISTS `test_table` (    `message` STRING NULL     FULLTEXT WITH(        analyzer = &amp;#39;English&amp;#39;,         case_sensitive = &amp;#39;false&amp;#39;),    `timestamp` TIMESTAMP(3) NOT NULL,    TIME INDEX (`timestamp`))ENGINE=mitoWITH(    append_mode = &amp;#39;true&amp;#39;);
&lt;/code>&lt;/pre>&lt;p>ElasticSearch：&lt;/p>
&lt;pre tabindex="0">&lt;code>{  &amp;#34;vector-2024.08.19&amp;#34;: {    &amp;#34;mappings&amp;#34;: {      &amp;#34;properties&amp;#34;: {        &amp;#34;message&amp;#34;: {          &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;,          &amp;#34;fields&amp;#34;: {            &amp;#34;keyword&amp;#34;: {              &amp;#34;type&amp;#34;: &amp;#34;keyword&amp;#34;,              &amp;#34;ignore_above&amp;#34;: 256            }          }        },        &amp;#34;service&amp;#34;: {          &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;,          &amp;#34;fields&amp;#34;: {            &amp;#34;keyword&amp;#34;: {              &amp;#34;type&amp;#34;: &amp;#34;keyword&amp;#34;,              &amp;#34;ignore_above&amp;#34;: 256            }          }        },        &amp;#34;source_type&amp;#34;: {          &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;,          &amp;#34;fields&amp;#34;: {            &amp;#34;keyword&amp;#34;: {              &amp;#34;type&amp;#34;: &amp;#34;keyword&amp;#34;,              &amp;#34;ignore_above&amp;#34;: 256            }          }        },        &amp;#34;timestamp&amp;#34;: {          &amp;#34;type&amp;#34;: &amp;#34;date&amp;#34;        }      }    }  }}
&lt;/code>&lt;/pre>&lt;h2 id="写入性能">写入性能&lt;a class="td-heading-self-link" href="#%e5%86%99%e5%85%a5%e6%80%a7%e8%83%bd" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>不限速写入 1 亿条数据：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>切分模式&lt;/th>
&lt;th>&lt;/th>
&lt;th>全文模式&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>写入耗时（分钟）&lt;/td>
&lt;td>平均 TPS&lt;/td>
&lt;td>写入耗时（分钟）&lt;/td>
&lt;td>平均 TPS&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>GreptimeDB&lt;/td>
&lt;td>13.1&lt;/td>
&lt;td>127,226&lt;/td>
&lt;td>17.5&lt;/td>
&lt;td>95,238&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>GreptimeDB on S3&lt;/td>
&lt;td>13.2&lt;/td>
&lt;td>126,262&lt;/td>
&lt;td>16.2&lt;/td>
&lt;td>102,881&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ClickHouse&lt;/td>
&lt;td>10&lt;/td>
&lt;td>166,667&lt;/td>
&lt;td>12.2&lt;/td>
&lt;td>136,612&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ElasticSearch&lt;/td>
&lt;td>42.3&lt;/td>
&lt;td>39,401&lt;/td>
&lt;td>59.4&lt;/td>
&lt;td>28,058&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>切分模式下，&lt;strong>写入性能上 CH 最佳， GreptimeDB 本地磁盘模式和 S3 模式写入性能相当，都在 12~13 万行每秒左右， ES 最差，并且差距较大，仅为 GreptimeDB 的 1/3， ClickHouse 的 1/4&lt;/strong>；&lt;/li>
&lt;li>全文模式下，整体横向对比结论不变，但是写入性能都有所下降，GreptimeDB 下降 25%，ClickHouse 下降 18%，ES 下降 29%，可见&lt;strong>全文索引对写入的影响不小&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://mmbiz.qpic.cn/sz_mmbiz_png/B9yiaFdoD68ygDPPbMcMQhj8CmsNHic5sbNfeCeWoUknhgWmxbJoZk6cFzbmp7EWWjjgE37W7cmpZru8icV9P07aQ/640?wx_fmt=png&amp;amp;from=appmsg" alt="">&lt;/p>
&lt;h2 id="资源占用和压缩率">资源占用和压缩率&lt;a class="td-heading-self-link" href="#%e8%b5%84%e6%ba%90%e5%8d%a0%e7%94%a8%e5%92%8c%e5%8e%8b%e7%bc%a9%e7%8e%87" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="资源占用">资源占用&lt;a class="td-heading-self-link" href="#%e8%b5%84%e6%ba%90%e5%8d%a0%e7%94%a8" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>为了观察写入过程中的资源占用，我们将写入速度限速为 2 万行每秒，然后采集 CPU 和内存占用情况：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>切分模式&lt;/th>
&lt;th>&lt;/th>
&lt;th>全文模式&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>CPU(%)&lt;/td>
&lt;td>Memory(MB)&lt;/td>
&lt;td>CPU(%)&lt;/td>
&lt;td>Memory(MB)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>GreptimeDB&lt;/td>
&lt;td>33.24&lt;/td>
&lt;td>377&lt;/td>
&lt;td>16.79&lt;/td>
&lt;td>462&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ClickHouse&lt;/td>
&lt;td>8.91&lt;/td>
&lt;td>589&lt;/td>
&lt;td>32.97&lt;/td>
&lt;td>632&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ElasticSearch&lt;/td>
&lt;td>56.03&lt;/td>
&lt;td>12,381&lt;/td>
&lt;td>65.40&lt;/td>
&lt;td>8,782&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>可以看到：&lt;/p>
&lt;ul>
&lt;li>切分模式下，&lt;strong>ClickHouse 的 CPU 消耗最低，GreptimeDB 其次， ES 消耗较高，是 CH 的 6 倍， GreptimeDB 的 1.7 倍，内存上 GreptimeDB 消耗最低， ClickHouse 其次，而 ES 的内存占用超过了 12 G，是 CH 的 21 倍， GrptimeDB 的 32 倍&lt;/strong>；&lt;/li>
&lt;li>&lt;strong>全文模式下，无论是 CPU 还是内存，都是 GreptimeDB 最优，其次 ClickHouse，ES 仍然是消耗最高的，尤其是内存&lt;/strong>；&lt;/li>
&lt;li>测试过程中发现 &lt;strong>ClickHouse 的 CPU 波动最大&lt;/strong>，最高可以到 139%。&lt;/li>
&lt;/ul>
&lt;p>这个结果其实跟三者的架构，以及针对优化的场景有关，我们最后再分析。&lt;/p>
&lt;p>&lt;img src="https://mmbiz.qpic.cn/sz_mmbiz_png/B9yiaFdoD68ygDPPbMcMQhj8CmsNHic5sbr23zibicWyYOibAjmVbWdON7cZichz6vTQIqgx9QSduqHd04eG3icUmtCEQ/640?wx_fmt=png&amp;amp;from=appmsg" alt="">
&lt;img src="https://mmbiz.qpic.cn/sz_mmbiz_png/B9yiaFdoD68ygDPPbMcMQhj8CmsNHic5sb5fHg1cDDp0NFKoBIicq5EBbjbYy1g8iaOFvcK0yby8n7hHyCmUeE5xWQ/640?wx_fmt=png&amp;amp;from=appmsg" alt="">&lt;/p>
&lt;h3 id="压缩率">压缩率&lt;a class="td-heading-self-link" href="#%e5%8e%8b%e7%bc%a9%e7%8e%87" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>原始 10 亿条数据在 10 GB 大小左右，我们再来看下三者的压缩率：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;th>切分模式&lt;/th>
&lt;th>&lt;/th>
&lt;th>全文模式&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>磁盘占用（GB）&lt;/td>
&lt;td>压缩率&lt;/td>
&lt;td>磁盘占用（GB）&lt;/td>
&lt;td>压缩率&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>GreptimeDB&lt;/td>
&lt;td>data&lt;/td>
&lt;td>1.3&lt;/td>
&lt;td>13%&lt;/td>
&lt;td>3.3&lt;/td>
&lt;td>33%&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ClickHouse&lt;/td>
&lt;td>压缩前&lt;/td>
&lt;td>7.6&lt;/td>
&lt;td>&lt;/td>
&lt;td>15.5&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>压缩后&lt;/td>
&lt;td>2.6&lt;/td>
&lt;td>26%&lt;/td>
&lt;td>5.1&lt;/td>
&lt;td>51%&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ElasticSearch&lt;/td>
&lt;td>压缩前&lt;/td>
&lt;td>14.6&lt;/td>
&lt;td>&lt;/td>
&lt;td>19.0&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>压缩后&lt;/td>
&lt;td>10.2&lt;/td>
&lt;td>102%&lt;/td>
&lt;td>17.2&lt;/td>
&lt;td>172%&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>由于 ClickHouse 和 ES 在写入完成后会持续对数据进行压缩，我们这里同时记录刚写入完成和数据大小不再变化后的数据大小。可以看到：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>任何模式下， GreptimeDB 的压缩率都是最好的，切分模式下是原始数据的 13%，全文模式下是原始数据的 33%。&lt;/strong> ClickHouse 其次，也都比原始数据更小，而 ES 最差，由于索引构建的开销，整体数据都比原始数据更大；&lt;/li>
&lt;li>&lt;strong>切分模式下的压缩率都好于全文模式。&lt;/strong> 切分模式下，更多的列被提取出来，而 GreptimeDB 存储引擎是列存，因此压缩率更优。&lt;/li>
&lt;/ul>
&lt;h2 id="查询性能">查询性能&lt;a class="td-heading-self-link" href="#%e6%9f%a5%e8%af%a2%e6%80%a7%e8%83%bd" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="查询场景">查询场景&lt;a class="td-heading-self-link" href="#%e6%9f%a5%e8%af%a2%e5%9c%ba%e6%99%af" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>我们将查询场景区分为 6 个，覆盖比较典型的日志使用场景：&lt;/p>
&lt;p>1. Count 统计查询：统计全表数据行数；&lt;br>
2. 关键词匹配查询：匹配日志中的 user、method、endpoint、version、code 分别为特定值；&lt;br>
3. 区间统计查询：使用时间范围统计约一半（5,000 万行）数据量的查询；&lt;br>
4. 中间时间范围查询：取时间中间范围一分钟，并查询 1000 行数据；&lt;br>
5. 最近时间范围查询：取最近时间范围一分钟，并查询 1000 行数据；&lt;br>
6. 关键词匹配 + 区间查询：查询特定时间范围内的字段匹配结果。&lt;/p>
&lt;p>GreptimeDB 和 ClickHouse 都使用 SQL 进行查询，前者使用 MySQL 客户端工具，后者使用 CH 自身提供的命令行客户端[2]。&lt;/p>
&lt;p>ElasticSearch 我们使用 search 的 REST API[3]。&lt;/p>
&lt;h3 id="切分模式查询性能">切分模式查询性能&lt;a class="td-heading-self-link" href="#%e5%88%87%e5%88%86%e6%a8%a1%e5%bc%8f%e6%9f%a5%e8%af%a2%e6%80%a7%e8%83%bd" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>平均耗时 / 单位 ms&lt;/th>
&lt;th>GreptimeDB&lt;/th>
&lt;th>GreptimeDB on S3&lt;/th>
&lt;th>ClickHouse&lt;/th>
&lt;th>ElasticSearch&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Count 统计查询&lt;/td>
&lt;td>7&lt;/td>
&lt;td>7&lt;/td>
&lt;td>46&lt;/td>
&lt;td>10&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>关键词匹配查询&lt;/td>
&lt;td>41&lt;/td>
&lt;td>69&lt;/td>
&lt;td>52&lt;/td>
&lt;td>134&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>区间统计查询&lt;/td>
&lt;td>994&lt;/td>
&lt;td>1079&lt;/td>
&lt;td>413&lt;/td>
&lt;td>16&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>中间时间范围&lt;/td>
&lt;td>49&lt;/td>
&lt;td>56&lt;/td>
&lt;td>56&lt;/td>
&lt;td>32&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>最近时间范围&lt;/td>
&lt;td>78&lt;/td>
&lt;td>40&lt;/td>
&lt;td>133&lt;/td>
&lt;td>25&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>关键词匹配 + 区间查询&lt;/td>
&lt;td>27&lt;/td>
&lt;td>49&lt;/td>
&lt;td>52&lt;/td>
&lt;td>88&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>切分模式下，三者的查询性能大部分都很接近，都可以在 1 秒内完成查询&lt;/strong>，区间统计查询对于 GreptimeDB 和 ClickHouse 来说都需要扫表，比 ES 差的比较多，我们也在针对这一点做优化。&lt;strong>GreptimeDB 在本地磁盘和 S3 模式下的查询性能基本一致。&lt;/strong>&lt;/p>
&lt;h3 id="全文模式查询性能">全文模式查询性能&lt;a class="td-heading-self-link" href="#%e5%85%a8%e6%96%87%e6%a8%a1%e5%bc%8f%e6%9f%a5%e8%af%a2%e6%80%a7%e8%83%bd" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>GreptimeDB 默认的全文索引配置是相对保守的，为了保持稳定的在线写入和查询性能，没有充分利用内存和 CPU。而 ClickHouse 和 ES 都会充分利用内存和索引，因此我们在这个模式下还提供了一个优化配置的结果，我们修改了 GreptimeDB 下列两个配置：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>page_cache_size&lt;/code> = &amp;ldquo;10GB&amp;rdquo;，增大 SST 的 page cache 大小到 10GB；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>scan_parallelism&lt;/code> = 8，扫描 SST 的并行数，默认为 CPU 数的四分之一，调整到 8 以使用所有的 CPU 核心；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>我们也提供了默认配置下的查询结果:&lt;/p>
&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>平均耗时 / 单位 ms&lt;/th>
&lt;th>GreptimeDB&lt;/th>
&lt;th>GreptimeDB on S3&lt;/th>
&lt;th>GreptimeDB 默认设置&lt;/th>
&lt;th>ClickHouse&lt;/th>
&lt;th>ElasticSearch&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Count 统计查询&lt;/td>
&lt;td>8&lt;/td>
&lt;td>7&lt;/td>
&lt;td>8&lt;/td>
&lt;td>43&lt;/td>
&lt;td>9&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>关键词匹配查询&lt;/td>
&lt;td>994&lt;/td>
&lt;td>986&lt;/td>
&lt;td>5596&lt;/td>
&lt;td>2080&lt;/td>
&lt;td>161&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>区间统计查询&lt;/td>
&lt;td>1603&lt;/td>
&lt;td>1101&lt;/td>
&lt;td>1493&lt;/td>
&lt;td>572&lt;/td>
&lt;td>10&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>中间时间范围&lt;/td>
&lt;td>1624&lt;/td>
&lt;td>846&lt;/td>
&lt;td>3694&lt;/td>
&lt;td>51&lt;/td>
&lt;td>26&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>最近时间范围&lt;/td>
&lt;td>445&lt;/td>
&lt;td>17&lt;/td>
&lt;td>429&lt;/td>
&lt;td>606&lt;/td>
&lt;td>22&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>关键词匹配 + 区间查询&lt;/td>
&lt;td>930&lt;/td>
&lt;td>586&lt;/td>
&lt;td>5373&lt;/td>
&lt;td>1610&lt;/td>
&lt;td>122&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>GreptimeDB 默认配置的查询性能除了最近时间范围查询以外都最差，在修改默认配置后，所有查询耗时都可以在 1.6 秒内完成，部分查询比 CH 更快，比如最常见的关键词匹配+时间区间范围查询。ES 的查询性能最优，较大的内存占用和更优化的索引实现带来来更好的查询性能， CH 表现较为均衡。&lt;/p>
&lt;p>GreptimeDB 正在持续优化查询性能，未来预计默认配置将达到与 ClickHouse 相当的水平，敬请期待。&lt;/p>
&lt;h2 id="总结">总结&lt;a class="td-heading-self-link" href="#%e6%80%bb%e7%bb%93" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>通过测试，我们得出以下结论：&lt;/p>
&lt;ul>
&lt;li>GreptimeDB 的日志引擎在写入性能、资源占用和压缩率方面表现出色，CH 较为平衡，而 ES 在这些方面表现最差且资源消耗高。&lt;/li>
&lt;li>查询性能方面，切分模式下 GreptimeDB 与 CH 和 ES 相当。全文模式下，GreptimeDB 表现一般，但优化后可在 1.6 秒内完成大部分查询。ES 查询性能最佳，CH 较为均衡。&lt;/li>
&lt;li>GreptimeDB 在本地磁盘和 S3 对象存储模式下性能基本一致。&lt;/li>
&lt;li>切分模式（日志结构化）提升了读写性能和压缩率。GreptimeDB 和 ES 都具备 Ingestion Pipeline 功能，可将非结构化文本转换为结构化数据[4][5]。&lt;/li>
&lt;/ul>
&lt;p>这个结果其实跟三者面向的场景紧密相关：&lt;/p>
&lt;ol>
&lt;li>GreptimeDB 为面向在线的可观测应用而设计，比如智能运维和监控场景，尤其是海量数据，比如车联网或者大规模的监控系统，并且提供了数据直接保存在对象存储的能力。由于在线监控需要持续可用，因此 GreptimeDB 对于资源的使用会相对谨慎和控制，更希望提供稳定 7x24 读写服务，并具备良好的水平扩展能力。&lt;/li>
&lt;li>ClickHouse 面向离线数仓服务设计，离线数仓很多是 ad hoc 查询或者长时间范围的数据分析，对查询耗时和失败率没有那么敏感，CH 更充分地利用 CPU 和内存等资源。&lt;/li>
&lt;li>ElasticSearch 专为在线或离线检索业务而设计，具备良好的索引能力和完备的搜索功能（基于优秀的 Apache Lucence 项目），更加激进地使用资源，尤其是内存和磁盘占用，但是相对的，消耗的资源也是最大，写入性能也较差。&lt;/li>
&lt;/ol>
&lt;p>简而言之，在海量日志场景下， GreptimeDB 是一个性价比最高的选择，&lt;strong>基于云原生架构，可以用更低的资源消耗（CPU、内存和磁盘）来承载大量日志的存储，并且具备优秀的水平扩展能力，但是作为首个版本实现，查询性能相对一般，还需要持续优化&lt;/strong>。ClickHouse 也是较为优秀的选择，&lt;strong>只是 ClickHouse 仍然是传统的分布式架构设计，没有办法充分地利用云的基础设施，尤其是弹性和廉价对象存储。而 ES 则更适合面向在线的搜索业务&lt;/strong>，对于延时和结果排序更为敏感，日志场景不是合适的选择，资源消耗和写入性能都最差。最后，CH 和 ES 的分布式集群的运维部署都相当繁琐。&lt;/p>
&lt;p>GreptimeDB 的日志引擎目前还是第一个版本，我们将持续优化，敬请关注！&lt;/p></description></item><item><title>Docs: 关系数据</title><link>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE/</guid><description/></item><item><title>Docs: 键值数据</title><link>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E9%94%AE%E5%80%BC%E6%95%B0%E6%8D%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E9%94%AE%E5%80%BC%E6%95%B0%E6%8D%AE/</guid><description/></item></channel></rss>