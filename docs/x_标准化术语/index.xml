<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – 📚标准化术语</title><link>https://desistdaydream.github.io/docs/x_%E6%A0%87%E5%87%86%E5%8C%96%E6%9C%AF%E8%AF%AD/</link><description>Recent content in 📚标准化术语 on 断念梦</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/x_%E6%A0%87%E5%87%86%E5%8C%96%E6%9C%AF%E8%AF%AD/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Agent 与 Proxy</title><link>https://desistdaydream.github.io/docs/x_%E6%A0%87%E5%87%86%E5%8C%96%E6%9C%AF%E8%AF%AD/Agent-%E4%B8%8E-Proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/x_%E6%A0%87%E5%87%86%E5%8C%96%E6%9C%AF%E8%AF%AD/Agent-%E4%B8%8E-Proxy/</guid><description>
&lt;p>今天，在阅读 Jolokia 文档的时候，看到其支持两种架构模式： Agent Mode 与 Proxy Mode。从字面上理解，agent 与 proxy 都有代理的意思，那么它们在内涵上到底有什么不同的，值得思考。&lt;/p>
&lt;p>Agent Mode
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gu5xfp/1621662188213-22f409de-8912-4cb1-8722-b96d628694b6.png" alt="">&lt;/p>
&lt;p>Proxy Mode
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gu5xfp/1621662192171-21f74acf-2333-4edd-859d-cc8aba728428.png" alt="">
从上面两张图可以看出，Proxy 与 Agent 所处的位置和目的有所不同，Agent 处在被代理对象的内部，而 Proxy 与被代理对象之间处于一种相对独立的状态。&lt;/p>
&lt;p>举个例子，Proxy 类似于会计事务所，而 Agent 类似于公司里做会计工作的员工，它们都是处理企业的财务问题，但是角色不同。
————————————————
版权声明：本文为 CSDN 博主「墨城之左」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。
原文链接：&lt;a href="https://blog.csdn.net/antony1776/article/details/107835249">https://blog.csdn.net/antony1776/article/details/107835249&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://link.zhihu.com/?target=http%3A//blog.csdn.net/wl_fln/article/details/6444340">Proxy 和 Agent 区别&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>Agent 代理 通常指与用户接口的客户端程序
Proxy 代理 接收用户请求并将请求发给服务器,然后接收服务器回应并返回给用户 实际上 Proxy 的功能就是代替用户访问服务器,用户被隐藏.&lt;/p>
&lt;/blockquote>
&lt;p>作者：koooo
链接：&lt;a href="https://www.zhihu.com/question/28555646/answer/681545931">https://www.zhihu.com/question/28555646/answer/681545931&lt;/a>
来源：知乎
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。&lt;/p>
&lt;h2 id="the-etymology-of-agent-and-proxy-in-computer-networking-discourse">The Etymology of &amp;ldquo;Agent&amp;rdquo; and &amp;ldquo;Proxy&amp;rdquo; in Computer Networking Discourse&lt;/h2>
&lt;p>&lt;em>September 18, 1998.&lt;/em> &lt;em>&lt;a href="https://link.zhihu.com/?target=mailto%3A//reagle%40mit.edu">Joseph Reagle&lt;/a>&lt;/em>
Revised: January 15, 1999 .
Given that the topic of this paper addresses both computer and legal agency, we believe an examination of the usage of the terms &amp;ldquo;agent&amp;rdquo; and &amp;ldquo;proxy&amp;rdquo; within each field is instructive. The technical use of the term _&lt;a href="https://link.zhihu.com/?target=http%3A//ai.miningco.com/">agent&lt;/a>_can be characterized into three overlapping periods. During the &lt;a href="https://link.zhihu.com/?target=http%3A//ai.miningco.com/library/weekly/aa080397.htm">earliest period&lt;/a> (1960 onward) the term was used by the artificial intelligence community. During the same period, the community of Internet network designers used the term in a way similar to our own: a service that acted on the behalf of another. Finally, the 1990&amp;rsquo;s has been the decade of the agents: where the concept of potentially intelligent, autonomous computer programs that interact with each other within a networked community is hyped. It was also during this latter period that the term &lt;em>proxy&lt;/em> became widely used.
The technical concept of an agent was apparently first used in the artificial intelligence community in 1959 to describe the constituents (agents or demons) of a larger self-organizing behavior. [RR, Self] However, within AI its usage did not always relate to computer programs, but to linguistic analysis, particularly in Fillmore&amp;rsquo;s case grammar [Fill]:
An agent is one who performs a particular action and this can be reflected in &amp;gt; &lt;em>syntax&lt;/em>. In English, in an active sentence, the agent is usually referred to by the subject&amp;hellip;. A form used to indicate the agent is called &amp;lsquo;agentive.&amp;rsquo; In case grammar, agentive or agent is one of the specified sets of cases. [Bear]
Agents were the subject of papers on intelligent information sharing systems and artificial intelligence throughout the 70 and 80s&amp;rsquo;. Occasionally, IT related papers used the term as any other discipline would, such as &amp;ldquo;Computers as an Agent of Change.&amp;rdquo; [Dieb]. Consequently, the use of the term to denote an initiator of action both within the AI/linguistic community and its typical English usage led the term to be used as a substitute of the term &amp;ldquo;program&amp;rdquo; when the connotation of autonomy and network interaction were required.
&amp;lt;&amp;gt; &lt;a href="https://link.zhihu.com/?target=http%3A//wombat.doc.ic.ac.uk/foldoc/contents/networking.html">networking&lt;/a>&amp;gt; In the &amp;gt; &lt;a href="https://link.zhihu.com/?target=http%3A//wombat.doc.ic.ac.uk/foldoc/foldoc.cgi%3Fclient-server">client-server&lt;/a> model, the part of the system that performs information preparation and exchange on behalf of a &amp;gt; &lt;a href="https://link.zhihu.com/?target=http%3A//wombat.doc.ic.ac.uk/foldoc/foldoc.cgi%3Fclient">client&lt;/a> or &amp;gt; &lt;a href="https://link.zhihu.com/?target=http%3A//wombat.doc.ic.ac.uk/foldoc/foldoc.cgi%3Fserver">server&lt;/a>. Especially in the phrase &amp;ldquo;intelligent agent&amp;rdquo; it implies some kind of automatic process which can communicate with other agents to perform some collective task on behalf of one or more humans. [&amp;gt; &lt;a href="https://link.zhihu.com/?target=http%3A//wombat.doc.ic.ac.uk/foldoc/index.html">Free On-line Dictionary of Computing&lt;/a>]
While computer agents were the subject of papers for nearly two decades, it was in the 1990&amp;rsquo;s that the term became worthy of appearing in the title. Previously, the key words of related publications were information sharing, computer mediation, collaboration, and cooperation. [Wood] Starting in 1994, specific venues for agent research and discussion, [EWMA, CIKM] as well as a special issue of the Communications of the ACM placed the term prominently in popular discourse. [Comm]
One of the best sources of information on how the terms &lt;em>agents&lt;/em> and &lt;em>proxies&lt;/em> came to be used in the context of the Internet and Web is the IETF&amp;rsquo;s Request for Comments (RFC) archive. While the first occurrence of _agent&lt;em>in an RFC was administrative, [RFC95] its technical debut was instructive in its use with respect to qualifying an agent as a program that resides on and communicates with other programs on a network.
The above premise is that the program (or agent) is doing the communicating with an NCP and thus needs to be identified for message traffic routing from an NCP. [RFC129]
During the 70&amp;rsquo;s at the IETF the only other time _agent&lt;/em> was used in a technical sense was to refer to refer to the sender of an email. [RFC733] However, in 1980, with the arrival of the Transmission Control Protocol (TCP) [RFC761, RFC793] its usage was firmly established as a keyword in network protocol vernacular.
By 1987, the Internet TCP/IP protocol had matured sufficiently that the larger issue of network architecture and management became a focus of work at the IETF. Three critical RFCs related to this work include:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://link.zhihu.com/?target=http%3A//info.internet.isi.edu/in-notes/rfc/files/rfc1067.txt">RFC1067&lt;/a> &amp;ndash; Simple Network Management Protocol. [RFC1067]&lt;/li>
&lt;li>&lt;a href="https://link.zhihu.com/?target=http%3A//info.internet.isi.edu/in-notes/rfc/files/rfc1027.txt">RFC1027&lt;/a> &amp;ndash; Using ARP to implement transparent subnet gateways. [RFC1027]&lt;/li>
&lt;li>&lt;a href="https://link.zhihu.com/?target=http%3A//info.internet.isi.edu/in-notes/rfc/files/rfc1009.txt">RFC1009&lt;/a> &amp;ndash; Requirements for Internet gateways. [RFC1009]&lt;/li>
&lt;/ul>
&lt;p>A concept integral to &lt;em>proxy&lt;/em> was that of a &lt;em>gateway&lt;/em>. &lt;strong>Gateways&lt;/strong> often provide an interface between two networks &amp;ndash; each of which may use a different networking protocol. A &lt;em>proxy&lt;/em> is often run on the gateway and acts as a go between, representing requests or services on behalf of one party in terms the second party can understand. The term proxy was seemingly first used in the network context by Shapiro [Shap] in 1986 to designate one object as a local representative of a remote object. However, both of our terms, &lt;em>agent&lt;/em> and &lt;em>proxy&lt;/em>, received their fullest treatment in 1989 in RFC 1095. &lt;em>Proxy&lt;/em> is explicitly placed in a legal context.
3.1. Architectural OverviewThe basic concepts underlying OSI network management are quite simple [16]. There reside application processes called &amp;ldquo;managers&amp;rdquo; on managing systems (or management stations). There reside application processes called &amp;ldquo;agents&amp;rdquo; on managed systems (or network elements being managed). Network management occurs when managers and agents conspire (via protocols and a shared conceptual schema) to exchange monitoring and control information useful to the management of a network and its components. The terms &amp;ldquo;manager&amp;rdquo; and &amp;ldquo;agent&amp;rdquo; are also used in a loose and popular sense to refer to the managing and managed system, respectively&amp;hellip;. The terms &amp;ldquo;manager&amp;rdquo; and &amp;ldquo;agent&amp;rdquo; are used to denote the asymmetric relationship between management application processes in which the manager plays the superior role and the agent plays the subordinate.4.3. Proxy ManagementProxy is a term that originated in the legal community to indicate an entity empowered to perform actions on behalf of another. In our context, a proxy is a manager empowered to perform actions on behalf of another manager. This may be necessary because the manager cannot communicate directly with the managed devices either for security or other administrative reasons or because of incompatible communication mechanisms or protocols. In either case, the proxy assumes the agent role with respect to the requesting manager and the manager role with respect to the managed device. [RFC1090]
Subsequently, the terms agents and proxy have become integral to the nomenclature of networks and their applications. This includes email [ref], ftp [ref], the Web [HTTP], and firewalls [ref]. Professors [Maes, Mins, Negr] and students associated with the &lt;a href="https://link.zhihu.com/?target=http%3A//agents.www.media.mit.edu/groups/agents/">Agent Group&lt;/a> at the &lt;a href="https://link.zhihu.com/?target=http%3A//www.media.mit.edu/">MIT Media Lab&lt;/a> have significantly contributed to the advancement of software agents in the popular scientific press. Others &amp;ndash; beyond the authors of this paper &amp;ndash; have begin to think about the social implications of autonomous network agents [Fried1-3, Niss]&lt;/p>
&lt;h3 id="references">References&lt;/h3>
&lt;p>[Bear] Beardon C. (Editor) &lt;em>&lt;a href="https://link.zhihu.com/?target=http%3A//www.amazon.com/exec/obidos/ASIN/0130482994/qid%3D906405323/sr%3D1-8/002-1402323-9200248">Artificial Intelligence Terminology : A Reference Guide (Ellis Horwood Series in Artificial Intelligence Foundations and Concepts)&lt;/a>&lt;/em> (1989).
[CIKM] Third International Conference on Information and Knowledge Management (CIKM'94)
[Comm] Communications of the ACM. v.37 n.7, July1994.
[Dieb] Diebold, J. &lt;em>Man and the Computer; Technology as an Agent of Social Change.&lt;/em> F. A. Praeger, New York. (1969).
[EWMA] European Workshop on Modeling Autonomous Agents in a Multi-Agent World (7th : 1996 : Eindhoven, Netherlands)
[Fill] Fillmore, &amp;ldquo;&lt;em>The Case for Case&lt;/em>.&amp;rdquo; Universals in Linguistic Theory. (Bach, E. and Harms, R., eds.) Holt, Rinehart, and Winston, New York. (1968) pp. 1-90.
[Fried1] Friedman B., and Millett L. &lt;em>&amp;ldquo;It&amp;rsquo;s the computer&amp;rsquo;s fault&amp;rdquo; &amp;ndash; Reasoning about computers as moral agents&lt;/em>. Conference companion of the conference on Human Factors in Computing Systems, CHI &amp;lsquo;95. New York: Association for Computing Machinery. (May 1995) pp. 226- 227.
[Fried2] Friedman B, and Nissenbaum H. &lt;a href="https://link.zhihu.com/?target=http%3A//www.acm.org/pubs/citations/journals/tois/1996-14-3/p330-friedman/">Bias in computer systems &lt;/a>. ACM Trans. Inf. Syst. 14, 3 (Jul. 1996) pp. 330 - 347.
[Fried3] Friedman B, and Nissenbaum H &lt;a href="https://link.zhihu.com/?target=http%3A//www.acm.org/pubs/citations/proceedings/ai/267658/p466-friedman/">Software agents and user autonomy&lt;/a>. Autonomous agents. (1997) pp. 466 - 469.
[Maes] Maes, P. &lt;a href="https://link.zhihu.com/?target=http%3A//pattie.www.media.mit.edu/people/pattie/CACM-94/CACM-94.p1.html">Agents that Reduce Work and Information Overload.&lt;/a> Communications of the ACM. Vol. 37 No.7 (July 1994), pp. 31-40.
[Mins] Minsky, M, and D. Riecken. &lt;a href="https://link.zhihu.com/?target=http%3A//www.acm.org/pubs/citations/journals/cacm/1994-37-7/p22-minsky/">A Conversation with Marvin Minsky about Agents&lt;/a>. &lt;em>&lt;a href="https://link.zhihu.com/?target=http%3A//www.acm.org/cacm/">Communications of the ACM&lt;/a>&lt;/em> Vol. 37, No. 7 (July 1994) pp. 22-29.
[Negr] Nicholas Negroponte. &lt;em>Agents: From Direct Manipulation to Delegation&lt;/em>. Software Agents. (Jeffrey M. Bradshaw ed.), MIT Press 1997.
[Niss] Nissenbaum, H. &lt;a href="https://link.zhihu.com/?target=http%3A//www.acm.org/pubs/citations/journals/cacm/1994-37-1/p72-nissenbaum/">Computing and accountability&lt;/a>. Communications of the ACM. Vol. 37, No. 1 (Jan. 1994) pp. 72-80.
[RR] Rome, B. and Rome, S. &lt;em>Leviathan: A Simulation of Behavioral Systems, to Operate Dynamically on a Digital Computer&lt;/em>, System Development Corporation report no. SP-50, 6 (Nov. 1959), pp 15.
[RFC1095] &lt;em>&lt;a href="https://link.zhihu.com/?target=http%3A//info.internet.isi.edu/in-notes/rfc/files/rfc1095.txt">RFC1095&lt;/a>&lt;/em> &lt;em>&amp;ndash;&lt;/em> &lt;em>Common Management Information Services and Protocol over TCP/IP (CMOT).&lt;/em> U.S. Warrier, L. Besaw. Apr-01-1989. (Obsoleted by RFC1189)
[RFC1067] &lt;em>&lt;a href="https://link.zhihu.com/?target=http%3A//info.internet.isi.edu/in-notes/rfc/files/rfc1067.txt">RFC1067&lt;/a>&lt;/em> &lt;em>&amp;ndash;&lt;/em> &lt;em>Simple Network Management Protocol&lt;/em>. J.D. Case, M. Fedor, M.L. Schoffstall, J. Davin. Aug-01-1988. (Obsoleted by RFC1098)
[RFC1027] &lt;em>&lt;a href="https://link.zhihu.com/?target=http%3A//info.internet.isi.edu/in-notes/rfc/files/rfc1027.txt">RFC1027&lt;/a>&lt;/em> &lt;em>&amp;ndash;&lt;/em> Using ARP to implement transparent subnet gateways. S. Carl-Mitchell, J.S. Quarterman. Oct-01-1987.(Status: UNKNOWN)
[RFC1009] &lt;em>&lt;a href="https://link.zhihu.com/?target=http%3A//info.internet.isi.edu/in-notes/rfc/files/rfc1009.txt">RFC1009&lt;/a>&lt;/em> &lt;em>&amp;ndash; Requirements for Internet gateways&lt;/em>. R.T. Braden, J. Postel. Jun-01-1987. (Obsoletes RFC0985) (Obsoleted by RFC1812)
[RFC733] &lt;em>&lt;a href="https://link.zhihu.com/?target=http%3A//info.internet.isi.edu/in-notes/rfc/files/rfc733.txt">RFC733&lt;/a>&lt;/em> &lt;em>&amp;ndash; Standard for the format of ARPA network text messages&lt;/em>. D. Crocker, J. Vittal, K.T. Pogran, D.A. Henderson. Nov-21-1977. (Obsoletes RFC0724) (Obsoleted by RFC0822)
[RFC761] &lt;em>&lt;a href="https://link.zhihu.com/?target=http%3A//info.internet.isi.edu/in-notes/rfc/files/rfc761.txt">RFC761&lt;/a>&lt;/em> &lt;em>&amp;ndash; DoD standard Transmission Control Protocol&lt;/em>. J. Postel. Jan-01-1980.
[RFC95] &lt;a href="https://link.zhihu.com/?target=http%3A//info.internet.isi.edu/in-notes/rfc/files/rfc95.txt">RFC95&lt;/a> &amp;ndash; &lt;em>Distribution of NWG/RFC&amp;rsquo;s through the NIC&lt;/em>. S.D. Crocker. Feb-04-1971. (Obsoleted by RFC0155)
[Self] Selfridge, O. &amp;ldquo;Pandemonium: A Paradigm for Learning.&amp;rdquo; &lt;em>Mechanisation of Thought Processes&lt;/em>. London: H. M. Stationery Off., 1959, pp. 511-527.
[Shap] Shapiro, M. &lt;em>Structure and encapsulation in distributed systems: The proxy principle&lt;/em>. 6th International Conference on Distributed Computing Systems Proceedings (Cat. No. 86CH2293-9). (6th International Conference on Distributed Computing Systems Proceedings (Cat. No. 86CH2293-9), Cambridge, MA, USA, 19-23 May 1986). Washington, DC, USA: IEEE Comput. Soc. Press, 1986. pp. 198-204.
[Wood] &lt;a href="https://link.zhihu.com/?target=https%3A//cyber.harvard.edu/archived_content/people/reagle/amw%40cs.bham.ac.uk">Andy Wood&lt;/a>. &lt;a href="https://link.zhihu.com/?target=http%3A//www.cs.bham.ac.uk/~amw/agents/index.html">Agent Information and References&lt;/a>. Available at &lt;a href="https://link.zhihu.com/?target=http%3A//www.cs.bham.ac.uk/~amw/agents/index.html">http://www.cs.bham.ac.uk/~amw/agen&lt;/a>&lt;/p></description></item><item><title>Docs: Architecture(架构)</title><link>https://desistdaydream.github.io/docs/x_%E6%A0%87%E5%87%86%E5%8C%96%E6%9C%AF%E8%AF%AD/Architecture%E6%9E%B6%E6%9E%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/x_%E6%A0%87%E5%87%86%E5%8C%96%E6%9C%AF%E8%AF%AD/Architecture%E6%9E%B6%E6%9E%84/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Computer_architecture">Wiki,Computer Architecture&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="各行各业微服务技术架构图分享">各行各业微服务技术架构图分享&lt;/h1>
&lt;p>包含：智慧仓储#docker#部署图、通用微服务架构图、物联网终端微服务架构图、平台微服务技术架构、基于#SpringCloud#的微服务架构图、基于 SpringCloud 的微服务电商系统架构图、#k8s#云原生架构图、#云计算#总体架构和技术架构。&lt;/p>
&lt;p>微服务不是架构演变的终极目标。最近比较流行的方向还有 Serverless、FaaS 等方向。另一方面也有人再重新关注单体系统的开发，我们认为技术架构应该是服务业务的，根据不同的业务类型选择正确的技术栈是每个架构师应该具备的能力。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qqw80y/1617368744569-dcdb5790-f824-4e92-acf3-7418626145f1.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qqw80y/1617368744561-85ff1c5e-b8cb-47b5-a694-02c18c91f507.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qqw80y/1617368744564-b1293d93-92da-4485-9ca9-d506cc2852b3.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qqw80y/1617368744550-be650970-8462-4723-b1d9-f2295ba2c1b5.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qqw80y/1617368744560-7fe7fee6-28a5-40b5-9fbc-579dd72f33f5.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qqw80y/1617368744542-7f4f869a-a832-4747-b227-fa0b86cca182.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qqw80y/1617368744556-dc3f1543-3303-4d13-a5c0-45a295856e15.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qqw80y/1617368744546-db34bafc-8339-43e0-a6c1-f214c83b1f12.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qqw80y/1617368744551-e5e7434c-1b61-4aee-b687-7514633c2ca4.png" alt="">&lt;/p></description></item><item><title>Docs: B/S 和 C/S 架构</title><link>https://desistdaydream.github.io/docs/x_%E6%A0%87%E5%87%86%E5%8C%96%E6%9C%AF%E8%AF%AD/B_S-%E5%92%8C-C_S-%E6%9E%B6%E6%9E%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/x_%E6%A0%87%E5%87%86%E5%8C%96%E6%9C%AF%E8%AF%AD/B_S-%E5%92%8C-C_S-%E6%9E%B6%E6%9E%84/</guid><description>
&lt;h1 id="service-side-与-client-side">Service Side 与 Client Side&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;a href="https://en.wikipedia.org/wiki/Server-side">Wiki，Server Side&lt;/a>、&lt;a href="https://en.wikipedia.org/wiki/Client-side">Wiki，Client Side&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>Client/Server 结构(C/S 结构) 是大家熟知的 &lt;strong>Client Side(客户端) 与 Server Side(服务端)&lt;/strong> 结构。它是软件系统体系结构，通过它可以充分利用两端硬件环境的优势，将任务合理分配到 Client Side 和 Server Side 来实现，降低了系统的通讯开销。目前大多数应用软件系统都是 Client/Server 形式的两层结构，由于现在的软件应用系统正在向分布式的 Web 应用发展，Web 和 Client/Server 应用都可以进行同样的业务处理，应用不同的模块共享逻辑组件；因此，内部的和外部的用户都可以访问新的和现有的应用系统，通过现有应用系统中的逻辑可以扩展出新的应用系统。这也就是目前应用系统的发展方向。&lt;/p>
&lt;p>B/S 结构（Browser/Server，浏览器/服务器模式），是 WEB 兴起后的一种网络结构模式，WEB 浏览器是客户端最主要的应用软件。这种模式统一了客户端，将系统功能实现的核心部分集中到服务器上，简化了系统的开发、维护和使用。客户机上只要安装一个浏览器（Browser 英 [&amp;lsquo;braʊzə]美 [&amp;lsquo;braʊzɚ]），如 Netscape Navigator 或 Internet Explorer，服务器安装 SQL Server、Oracle、MYSQL 等数据库。浏览器通过 Web Server 同数据库进行数据交互。&lt;/p>
&lt;p>Apache 是普通服务器，本身只支持 html 即普通网页。不过可以通过插件支持 php,还可以与 Tomcat 连通(单向 Apache 连接 Tomcat,就是说通过 Apache 可以访问 Tomcat 资源。反之不然)。Apache 只支持静态网页，但像 php,cgi,jsp 等动态网页就需要 Tomcat 来处理。 Tomcat 是由 Apache 软件基金会下属的 Jakarta 项目开发的一个 Servlet 容器，按照 Sun Microsystems 提供的技术规范，实现了对 Servlet 和 JavaServer Page（JSP）的支持，并提供了作为 Web 服务器的一些特有功能，如 Tomcat 管理和控制平台、安全域管理和 Tomcat 阀等。由于 Tomcat 本身也内含了一个 HTTP 服务器，它也可以被视作一个单独的 Web 服务器。但是，不能将 Tomcat 和 Apache Web 服务器混淆，Apache Web Server 是一个用 C 语言实现的 HTTP web server；这两个 HTTP web server 不是捆绑在一起的。Apache Tomcat 包含了一个配置管理工具，也可以通过编辑 XML 格式的配置文件来进行配置。Apache，nginx，tomcat 并称为网页服务三剑客，可见其应用度之广泛。（说白了，tomcat 就是个底层设施软件服务，网页上所有的东西就要放在 tomcat 上，别人才能通过 tomcat 访问，tomcat 占用 80 端口）&lt;/p>
&lt;p>例子：当通过浏览器，访问一个网站的时候，这时候就是一个 B/S 的架构，因为网站肯定是运行在服务器上的，这个服务器的系统上又装了 tomcat 这个服务，并占用 80 端口，因此，人们通过浏览器访问网站，由于自动使用 80 端口，那么就直接访问到 comcat 服务，然后由 comcat 来调取网站的页面资源给客户展示出来。&lt;/p>
&lt;p>至于 C/S 就相当于通过 PC 端的一个软件，通过 URL 网址访问到服务器上的应用程序。&lt;/p></description></item><item><title>Docs: bit( 比特 ) 和 Byte(字节) 的关系 以及 网速怎么算</title><link>https://desistdaydream.github.io/docs/x_%E6%A0%87%E5%87%86%E5%8C%96%E6%9C%AF%E8%AF%AD/bit-%E6%AF%94%E7%89%B9-%E5%92%8C-Byte%E5%AD%97%E8%8A%82-%E7%9A%84%E5%85%B3%E7%B3%BB-%E4%BB%A5%E5%8F%8A-%E7%BD%91%E9%80%9F%E6%80%8E%E4%B9%88%E7%AE%97/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/x_%E6%A0%87%E5%87%86%E5%8C%96%E6%9C%AF%E8%AF%AD/bit-%E6%AF%94%E7%89%B9-%E5%92%8C-Byte%E5%AD%97%E8%8A%82-%E7%9A%84%E5%85%B3%E7%B3%BB-%E4%BB%A5%E5%8F%8A-%E7%BD%91%E9%80%9F%E6%80%8E%E4%B9%88%E7%AE%97/</guid><description>
&lt;h1 id="前言">前言&lt;/h1>
&lt;h2 id="bit比特">bit（比特）&lt;/h2>
&lt;p>bit 也就是我们不一定听说过的比特，大名鼎鼎的比特币就是以此命名的。它的简写为小写字母 “b” 。&lt;/p>
&lt;p>作为信息技术的最基本存储单元，因为比特实在太小了，所以大家生活中并不是经常听到。那么 bit 是什么呢？&lt;/p>
&lt;p>电脑是以二进制存储以及发送接收数据的。二进制的一位，就叫做 1 bit。也就是说 bit 的含义就是二进制数中的一个数位，即 “0” 或者 &amp;ldquo;1&amp;rdquo;。&lt;/p>
&lt;h2 id="byte字节">Byte（字节）&lt;/h2>
&lt;p>Byte 是字节的英文写法。它的简写为大写字母 “B&amp;quot;。&lt;/p>
&lt;p>既然名字叫字节，那肯定跟字符有关系。是的。英文字符通常是一个字节，也就是 1B，中文字符通常是两个字节，也就是 2B。&lt;/p>
&lt;p>字节 Byte 和比特 bit 的换算关系是 1 Byte = 8 bit 。&lt;/p>
&lt;h2 id="kib-千字节">KiB （千字节）&lt;/h2>
&lt;p>需要了解的是，1 KiB 并不是一千字节，因为计算机只认识二进制，所以在这里的 KiB，是 2 的 10 次方，也就是 1024 个字节。&lt;/p>
&lt;p>另外很多表示存储单位的地方都把 B 写成 b，造成了大家认知的混乱。其实在存储单位计量中出现 b 的地方，它的意思仍然是 B，不要因为 bit 的缩写是 b 就被误导了，在存储计量中是不会用 比特，千比特 这种单位的。但是在网速计量中，b 的真实意思就是指 比特 了，这个我们下面再说。&lt;/p>
&lt;h2 id="单位换算">单位换算&lt;/h2>
&lt;p>存储单位换算关系如下&lt;/p>
&lt;ul>
&lt;li>1 Byte = 8 bit&lt;/li>
&lt;li>1 KiB= 1024 Bi&lt;/li>
&lt;li>1 MiB = 1024 KiB&lt;/li>
&lt;li>1 GiB = 1024 MiB&lt;/li>
&lt;li>1 TiB = 1024 GiB&lt;/li>
&lt;/ul>
&lt;h1 id="bit-和-byte">bit 和 Byte&lt;/h1>
&lt;p>计算机内部的存储和运算都是通过 「 0，1 」 这两个数在二进制下完成的。&lt;/p>
&lt;p>其中每个 0 或 1 就是一个 &lt;strong>bit(位或比特)&lt;/strong>，bit 是信息的最小数据单位，并且 8 个 bit 刚好可以构成 1 个 &lt;strong>Byte(字节)&lt;/strong>。&lt;/p>
&lt;p>Byte 可以说是计算机中存储容量的基本单位。我们在属性里查看电脑的任何一个文件，占用空间的大小都是用多少字节来统计的。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/nb56i3/1616065436103-9aeaff35-7332-46ef-aaab-952a7a95f397.jpeg" alt="">
但就像长度、重量和体积等其他单位一样，光是用一个 Byte 来衡量数据的大小肯定是不够的。&lt;/p>
&lt;p>因此在 bit 的单位后面还设有 Byte、KiB、MiB、GiB、TiB、PiB 等多个数据存储单位，各个单位之间遵循着一定的换算方式。&lt;/p>
&lt;p>如果世超没记错的话，自己当时在计算机课上学到的单位转换方式是这样的：&lt;/p>
&lt;p>1024（ 2 ^10 ) Byte = 1 KiB&lt;/p>
&lt;p>1024（ 2 ^10 ) KiB = 1 MiB&lt;/p>
&lt;p>1024（ 2 ^10 ) MiB = 1 GiB&lt;/p>
&lt;p>上面这种就是用计算机二进制的 10 次方，也就是以 1024 为进制的换算方式。&lt;/p>
&lt;p>差友们可能会觉得这个换算方式很对没错呀，挺贴合计算机的二进制系统的特点，另外，考试的时候不也是要求这么算的吗？&lt;/p>
&lt;p>但如果脱离计算机范畴，将它和生活中其他几个单位一比较，很多对电脑不了解的人来说，就很难理解 1024 这个换算数值是怎么来的了。&lt;/p>
&lt;p>毕竟像其他诸如 1A=1000mA、1kg=100g、1m=100cm 等生活中比较常见的单位，差不多都是拿十进制的几次方来作为换算方式。&lt;/p>
&lt;p>十进制的换算不仅更常见，直接拿整数一乘或者一除换算起来也会比 1024 方便很多，而且还更符合我们日常的生活习惯。&lt;/p>
&lt;p>所以，才有了下文的 &lt;a href="#muJb9">KB 与 KiB 的区别&lt;/a>&lt;/p>
&lt;h1 id="kb-与-kib-的区别">KB 与 KiB 的区别&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Byte">Wiki，Byte&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zh.wikipedia.org/wiki/%E5%8D%83%E5%AD%97%E8%8A%82">Wiki-zh，千字节&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>**International System of Units(国际制度单位，简称 SI)**这种规范就是为了照顾到计算机外的行业，除了之前提到以 1024 的换算，还可以使用十进制来进行换算。这种制度其实很早很早就有了，比如距离单位(100cm=1m)、重量单位(1kg=1000g)、时间单位(1s=1000ms) 等等。&lt;/p>
&lt;p>&lt;strong>International Electrotechnical Commission(国际电工委员会，简称 IEC)&lt;/strong> 的规范中提到，用于二进制存储单位的标准命名建议在中间&amp;quot;加个 i&amp;quot;(其实是更改了命名)以示区分&lt;/p>
&lt;p>具体效果就如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>十进制前缀&lt;/th>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;th>二进制前缀&lt;/th>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>(SI)&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>(IEC 60027-2)&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>名字&lt;/td>
&lt;td>缩写&lt;/td>
&lt;td>次方&lt;/td>
&lt;td>名字&lt;/td>
&lt;td>缩写&lt;/td>
&lt;td>次方&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>KiloByte&lt;/td>
&lt;td>KB&lt;/td>
&lt;td>103&lt;/td>
&lt;td>KibiByte&lt;/td>
&lt;td>KiB&lt;/td>
&lt;td>210&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>MegaByte&lt;/td>
&lt;td>MB&lt;/td>
&lt;td>106&lt;/td>
&lt;td>MebiByte&lt;/td>
&lt;td>MiB&lt;/td>
&lt;td>220&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>GigaByte&lt;/td>
&lt;td>GB&lt;/td>
&lt;td>109&lt;/td>
&lt;td>GibiByte&lt;/td>
&lt;td>GiB&lt;/td>
&lt;td>230&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>TeraByte&lt;/td>
&lt;td>TB&lt;/td>
&lt;td>1012&lt;/td>
&lt;td>TebiByte&lt;/td>
&lt;td>TiB&lt;/td>
&lt;td>240&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Petabyte&lt;/td>
&lt;td>PB&lt;/td>
&lt;td>1015&lt;/td>
&lt;td>PebiByte&lt;/td>
&lt;td>PiB&lt;/td>
&lt;td>250&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Exabyte&lt;/td>
&lt;td>EB&lt;/td>
&lt;td>1018&lt;/td>
&lt;td>ExbiByte&lt;/td>
&lt;td>EiB&lt;/td>
&lt;td>260&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ZettaByte&lt;/td>
&lt;td>ZB&lt;/td>
&lt;td>1021&lt;/td>
&lt;td>ZebiByte&lt;/td>
&lt;td>ZiB&lt;/td>
&lt;td>270&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>YottaByte&lt;/td>
&lt;td>YB&lt;/td>
&lt;td>1024&lt;/td>
&lt;td>YobiByte&lt;/td>
&lt;td>YiB&lt;/td>
&lt;td>280&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;blockquote>
&lt;p>图里没有 Byte 与 bit，是因为这两种在名字写法上是一模一样的~&lt;/p>
&lt;/blockquote>
&lt;p>1998 年 12 月，IEC 通过创建前缀(例如 Kibi、Mebi、Gibi 等) 来明确表明 1024 的力量。因此 KibiByte 象征着 KiB(表示为：2^10 bytes = 024 bytes)。这些前缀现在是**International System of Quantities(国际数量体系，简称 ISQ)**的一部分。IEC 进一步规定，KiloByte 只能用于表示 1000 个 bytes&lt;/p>
&lt;blockquote>
&lt;p>1 个字符=1 个 Byte，1 个汉字=2 个 Byte
ASCII 码：1 个英文字母（不分大小写）占一个字节的空间。一个二进制数字序列，在计算机中作为一个数字单元，一般为 8 位二进制数，换算为十进制。最小值-128，最大值 127。如一个 ASCII 码就是一个字节。
UTF-8 编码：一个英文字符等于一个字节，一个中文（含繁体）等于三个字节。中文标点占三个字节，英文标点占一个字节。
Unicode 编码：一个英文等于两个字节，一个中文（含繁体）等于两个字节。中文标点占两个字节，英文标点占两个字节。&lt;/p>
&lt;/blockquote>
&lt;p>但在很长的一段时间里，不同领域仍然存在着两种换算方式混用的现象。这就导致存在了很多的误会产生&lt;/p>
&lt;h2 id="硬盘容量的误区">硬盘容量的误区&lt;/h2>
&lt;p>最典型的一个例子就是硬盘厂商：它们标容量时遵照的就是 1000 进位而不是 1024 进位
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/nb56i3/1616065436124-08711d7f-7895-484d-9e2a-cb4ca61ae00d.jpeg" alt="">
同样是 500GB 的硬盘，如果按照 1024 换算，需要 500&lt;em>1024MB 的空间，但以 1000 换算，只需要 500&lt;/em>1000MB 的空间，整整少了 12000MB，也就是 12GB 左右。但操作系统里读取硬盘时，则是按照 1024 进位的，所以你拿到手的硬盘在电脑上显示会比厂商标示的要少。显而易见的，硬盘的容量越大厂商们省的越多，但谁叫它就是有这么一个换算规范，你也不好说它是在偷工减料。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/nb56i3/1616065436150-0d382d4c-3a76-473f-b846-c04d27814ddc.jpeg" alt="">
另外，如果差友同时拥有 Mac 和 Win 电脑，可能还会发现在两台电脑之间转移文件时，同个文件在两台电脑上显示的大小是不同的。&lt;/p>
&lt;p>这也是不同的系统采用了不同进制规范的缘故。&lt;/p>
&lt;h2 id="网速的误区">网速的误区&lt;/h2>
&lt;p>至于运营商在宽带办理中宣传的 100M、1000M 实际使用时却没有那么快的网速，纯粹就是具体单位没有标清楚从而造成的误会。&lt;/p>
&lt;p>100M 宽带里的 M 是 Mbps，而 100M/s 下载速度里的 M 是 MBps，摆在一起差友们就很容易发现它们的区别：&lt;/p>
&lt;p>一个是小写 b，一个是大写 B。&lt;/p>
&lt;p>前面 Mbps 是兆比特每秒，指的是每秒传输的位数量；MBps 则是兆字节每秒，指的是指每秒传输的字节数量。&lt;/p>
&lt;p>别小看了这个 b，就因为存在着大小写的区别，两者之间就有了 8 倍的转换关系（ 8bit = 1B ），这样一来，100 Mbps 的宽带，满打满算下载速度也只有 100/8 Mbps= 12.5M/s。&lt;/p></description></item><item><title>Docs: Foundation(基金会)</title><link>https://desistdaydream.github.io/docs/x_%E6%A0%87%E5%87%86%E5%8C%96%E6%9C%AF%E8%AF%AD/Foundation%E5%9F%BA%E9%87%91%E4%BC%9A/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/x_%E6%A0%87%E5%87%86%E5%8C%96%E6%9C%AF%E8%AF%AD/Foundation%E5%9F%BA%E9%87%91%E4%BC%9A/</guid><description/></item><item><title>Docs: Internet(互联网)</title><link>https://desistdaydream.github.io/docs/x_%E6%A0%87%E5%87%86%E5%8C%96%E6%9C%AF%E8%AF%AD/Internet%E4%BA%92%E8%81%94%E7%BD%91/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/x_%E6%A0%87%E5%87%86%E5%8C%96%E6%9C%AF%E8%AF%AD/Internet%E4%BA%92%E8%81%94%E7%BD%91/</guid><description/></item><item><title>Docs: Transaction(事务)</title><link>https://desistdaydream.github.io/docs/x_%E6%A0%87%E5%87%86%E5%8C%96%E6%9C%AF%E8%AF%AD/Transaction%E4%BA%8B%E5%8A%A1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/x_%E6%A0%87%E5%87%86%E5%8C%96%E6%9C%AF%E8%AF%AD/Transaction%E4%BA%8B%E5%8A%A1/</guid><description>
&lt;p>事务的意思是这样的：假设某个数据可能需要经过A、B、C、D几个步骤才能修改完毕，我们把这四个步骤打包放到事务中，那么事务就可以确保这四个步骤要么全部执行完毕，要么全部都不去执行。这样即使在任意一个步骤断电或者程序崩溃都不会影响到数据的一致性问题。&lt;/p></description></item><item><title>Docs: 常用英文</title><link>https://desistdaydream.github.io/docs/x_%E6%A0%87%E5%87%86%E5%8C%96%E6%9C%AF%E8%AF%AD/%E5%B8%B8%E7%94%A8%E8%8B%B1%E6%96%87/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/x_%E6%A0%87%E5%87%86%E5%8C%96%E6%9C%AF%E8%AF%AD/%E5%B8%B8%E7%94%A8%E8%8B%B1%E6%96%87/</guid><description>
&lt;h1 id="heading">&lt;/h1>
&lt;h1 id="常见缩写">常见缩写&lt;/h1>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>英文&lt;/th>
&lt;th>中文&lt;/th>
&lt;th>缩写&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Business&lt;/td>
&lt;td>业务&lt;/td>
&lt;td>BIZ&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Management&lt;/td>
&lt;td>管理&lt;/td>
&lt;td>MGMT&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="版本信息">版本信息&lt;/h1>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>英文&lt;/th>
&lt;th>中文&lt;/th>
&lt;th>缩写&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Portable&lt;/td>
&lt;td>便携式、可移植&lt;/td>
&lt;td>&lt;/td>
&lt;td>一个程序如果不需要安装，直接使用二进制文件运行，通常称为 Portable。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="符号的英语名称">符号的英语名称&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>原文链接：&lt;a href="https://www.ruanyifeng.com/blog/2007/07/english_punctuation.html">https://www.ruanyifeng.com/blog/2007/07/english_punctuation.html&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;code> &lt;/code> space 空格
&lt;code>.&lt;/code> period or full stop 句号
&lt;code>,&lt;/code> comma 逗号
&lt;code>:&lt;/code> colon 冒号
&lt;code>;&lt;/code> semicolon 分号
&lt;code>!&lt;/code> exclamation mark 惊叹号
&lt;code>?&lt;/code> question mark 问号
&lt;code>-&lt;/code> hyphen 连字符&lt;/p>
&lt;p>&lt;code>*&lt;/code> asterisk 星号
&amp;rsquo; apostrophe 所有格符号，单词内部的省略
— dash 破折号
&lt;code>_&lt;/code> underscore 下划线
‘ ’ single quotation marks 单引号
“ ” double quotation marks 双引号
( ) parenthesis or round brackets 圆括号
[ ] square brackets 方括号
&amp;lt;&amp;gt; Angle brackets 尖括号
{} curly brackets or braces 大括号
《 》French quotes 法文引号；书名号
&amp;hellip; ellipsis 省略号
¨ tandem colon 双点号
&amp;quot; ditto 同上
‖ parallel 双线号
／ slash or virgule or diagonal mark 斜线号
＆ ampersand = AND
～ tilde or swung dash 代字号
§ section; division 分节号
→ arrow 箭号；参见号
&lt;code>|&lt;/code> vertical bar 竖线
&lt;code>\&lt;/code> backslash 反斜线
=====================&lt;/p>
&lt;h2 id="数学符号的英文名称">数学符号的英文名称&lt;/h2>
&lt;p>＋ plus 加号；正号
－ minus 减号；负号
± plus or minus 正负号
× is multiplied by 乘号
÷ is divided by 除号
＝ is equal to 等于号
≠ is not equal to 不等于号
≡ is equivalent to 全等于号
≌ is equal to or approximately equal to 等于或约等于号
≈ is approximately equal to 约等于号
＜ less than sign 小于号
＞ more than or greater than sign 大于号
≮ is not less than 不小于号
≯ is not more than 不大于号
≤ is less than or equal to 小于或等于号
≥ is more than or equal to 大于或等于号
％ per cent 百分之…
‰ per mill 千分之…
∞ infinity 无限大号
∝ varies as 与…成比例
√ (square) root 平方根
∵ since; because 因为
∴ hence 所以
∷ equals, as (proportion) 等于，成比例
∠ angle 角
⌒ semicircle 半圆
⊙ circle 圆
○ circumference 圆周
△ triangle 三角形
⊥ perpendicular to 垂直于
∪ union of 并，合集
∩ intersection of 交，通集
∫ the integral of …的积分
∑ (sigma) summation of 总和
° degree 度
′ minute 分
″ second 秒
＃ number …号
℃ Celsius system 摄氏度
＠ at 在&lt;/p>
&lt;h1 id="词性">词性&lt;/h1>
&lt;p>英语的词性大约有 10 种，名词 n. 副词 adv. 介词 prep，代词 pron，数词 num，动词 v，形容词 adj，冠词 art，连词 conj，感叹词 interj，及物动词 vt，不及物动词 vi，助动词 vaux，缩写 a bbr，动词不定式 inf.，单数 sing，复数 pl，情态动词 aux.。不同的词性代表着不同的意思，所以才有了英语语法不同的说法，下面就让小编为大家带来英语词性缩写，让大家了解一番。&lt;/p>
&lt;p>英语词性缩写：
　　 n = 名词，noun 的缩写&lt;/p>
&lt;p>u = 不可数名词，uncountable noun 的缩写&lt;/p>
&lt;p>c = 可数名词，countable noun 的缩写&lt;/p>
&lt;p>v = 动词， verb 的缩写&lt;/p>
&lt;p>vi = 不及物动词，intransitive verb 的缩写&lt;/p>
&lt;p>vt = 及物动词，transitive verb 的缩写&lt;/p>
&lt;p>aux.v = 助动词，auxiliary verb 的缩写&lt;/p>
&lt;p>model verb 情态动词&lt;/p>
&lt;p>conj = 连接词 ，conjunction 的缩写&lt;/p>
&lt;p>adj. = 形容词，adjective 的缩写&lt;/p>
&lt;p>adv.= 副词，adverb 的缩写&lt;/p>
&lt;p>art. = 冠词，article 的缩写&lt;/p>
&lt;p>prep = 介词;preposition 的缩写&lt;/p>
&lt;p>pron = 代名词，pronoun 的缩写&lt;/p>
&lt;p>num = 数词，numeral 的缩写&lt;/p>
&lt;p>int. = 感叹词，interjection 的缩写&lt;/p>
&lt;p>英文基本句式介绍: 五个基本句式可以演变出多种复杂的英语句子。这五个基本句式如下：&lt;/p>
&lt;p>S 十 V 主谓结构&lt;/p>
&lt;p>S 十 V 十 P 主系表结构&lt;/p>
&lt;p>S 十 V 十 O 主谓宾结构&lt;/p>
&lt;p>S 十 V 十 O1 十 O2 主谓双宾结构&lt;/p>
&lt;p>S 十 V 十 O 十 C 主谓宾补结构&lt;/p>
&lt;p>(说明：S=主语;V=谓语;P=表语;O=宾语;O1=间接宾语;O2=直接宾语;C=补语)&lt;/p>
&lt;p>1.S 十 V&lt;/p>
&lt;p>在此句式中，V 是不及物动词，又叫自动词(vi.)。例如：&lt;/p>
&lt;p>He runs quickly.他跑得快。&lt;/p>
&lt;p>They listened carefully.他们听得很仔细。&lt;/p>
&lt;p>He suffered from cold and hunger.他挨冻受饿。&lt;/p>
&lt;p>China belongs to the third world country.中国属于第三世界国家。&lt;/p>
&lt;p>The gas has given out.煤气用完了。&lt;/p>
&lt;p>My ink has run out.我的钢笔水用完了。&lt;/p>
&lt;p>2.S 十 V 十 P&lt;/p>
&lt;p>在此句式中，V 是系动词(link v.)，常见的系动词有：look，seem，appear，sound，feel，taste，smell，grow，get，fall ill/asleep，stand/sit still，become，turn 等。例如：&lt;/p>
&lt;p>He is older than he looks.他比看上去要老。&lt;/p>
&lt;p>He seen interested in the book.他似乎对这本书感兴趣。&lt;/p>
&lt;p>The story sounds interesting.这个故事听起来有趣。&lt;/p>
&lt;p>The desk feels hard.书桌摸起来很硬。&lt;/p>
&lt;p>The cake tastes nice.饼尝起来很香。&lt;/p>
&lt;p>The flowers smell sweet and nice.花闻起来香甜。&lt;/p>
&lt;p>You have grown taller than before.你长得比以前高了。&lt;/p>
&lt;p>He has suddenly fallen ill.他突然病倒了。&lt;/p>
&lt;p>He stood quite still.他静静地站看。&lt;/p>
&lt;p>He becomes a teacher when he grew up.他长大后当了教师。&lt;/p>
&lt;p>He could never turn traitor to his country.他永远不会背叛他的祖国。&lt;/p>
&lt;p>3.S 十 V 十 O&lt;/p>
&lt;p>在此句式中，V 是及物动词(vt.)，因此有宾语。例如：&lt;/p>
&lt;p>I saw a film yesterday.我昨天看了一部电影。&lt;/p>
&lt;p>Have you read the story?你读过这个故事吗?&lt;/p>
&lt;p>They found their home easily.他们很容易找到他们的家。&lt;/p>
&lt;p>They built a house last year.他们去年建了一所房子。&lt;/p>
&lt;p>They‘ve put up a factory in the village.他们在村里建了一座工厂。&lt;/p>
&lt;p>They have taken good care of the children.这些孩子他们照看得很好。&lt;/p>
&lt;p>You should look after your children well.你应该好好照看你的孩子。&lt;/p>
&lt;p>4.S 十 V 十 O1 十 O2&lt;/p>
&lt;p>在此句式中，V 是带有双宾语的及物动词。常见的须带双宾语的动词有 give，ask，bring，offer，send，pay，lend，show，tell，buy，get; rob，warn 等。例如：&lt;/p>
&lt;p>He gave me a book/a book to me.他给我一本书。&lt;/p>
&lt;p>He brought me a pen/a pen to me.他带给我一枝钢笔。&lt;/p>
&lt;p>He offered me his seat/his seat to me.他把座位让给我。&lt;/p>
&lt;p>注意下边动词改写后介词的变化：&lt;/p>
&lt;p>Mother bought me a book/a book for me.妈妈给我买了一本书。&lt;/p>
&lt;p>He got me a chair/a chair for me.他给我弄了一把椅子。&lt;/p>
&lt;p>Please do me a favor/a favor for me.请帮我一下。&lt;/p>
&lt;p>He asked me a question/a question of me.他问我个问题。&lt;/p>
&lt;p>注意，下边动词只有一种说法：&lt;/p>
&lt;p>They robbed the old man of his money.他们抢了老人的钱。&lt;/p>
&lt;p>He’s warned me of the danger.他警告我注意危险。&lt;/p>
&lt;p>The doctor has cured him of his disease.医生治好了他的病。&lt;/p>
&lt;p>We must rid the house of the rats.我们必须赶走屋里的老鼠。&lt;/p>
&lt;p>They deprived him of his right to speak.他们剥夺了他说话的权利。&lt;/p>
&lt;p>5.S 十 V 十 O 十 C&lt;/p>
&lt;p>在此句式中，V 是有宾语补足语的及物动词。常带宾语补足语的词有形容词、副词、介词短语、名词、不定式、现在分词、过去分词,请看下面的例子。&lt;/p>
&lt;p>They made the girl angry.他们使这个女孩生气了。&lt;/p>
&lt;p>They found her happy that day.他们发现那天她很高兴。&lt;/p>
&lt;p>I found him out.我发现他出去了。&lt;/p>
&lt;p>I saw him in.我见他在家。&lt;/p>
&lt;p>They saw a foot mark in the sand.他们发现沙地上有脚印。&lt;/p>
&lt;p>They named the boy Charlie.他们给这个男孩起名为查理。&lt;/p>
&lt;p>I saw him come in and go out.我见他进来又出去。&lt;/p>
&lt;p>They felt the car moving fast.他们感到汽车行驶得很快。&lt;/p>
&lt;p>I heard the glass broken just now.我刚才听到玻璃碎了。&lt;/p>
&lt;p>以上就是英语词性缩写，希望大家会喜欢。掌握这些缩写可以帮我们提高学习效率，至少记笔记的时间可以快一点。&lt;/p>
&lt;h1 id="常用名词">常用名词&lt;/h1>
&lt;p>row 行
column 列&lt;/p></description></item><item><title>Docs: 南北流量和东西流量——它们是什么意思</title><link>https://desistdaydream.github.io/docs/x_%E6%A0%87%E5%87%86%E5%8C%96%E6%9C%AF%E8%AF%AD/%E5%8D%97%E5%8C%97%E6%B5%81%E9%87%8F%E5%92%8C%E4%B8%9C%E8%A5%BF%E6%B5%81%E9%87%8F%E5%AE%83%E4%BB%AC%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/x_%E6%A0%87%E5%87%86%E5%8C%96%E6%9C%AF%E8%AF%AD/%E5%8D%97%E5%8C%97%E6%B5%81%E9%87%8F%E5%92%8C%E4%B8%9C%E8%A5%BF%E6%B5%81%E9%87%8F%E5%AE%83%E4%BB%AC%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;p>在 Service Mesh 微服务架构中，我们常常会听到东西流量和南北流量两个术语。&lt;/p>
&lt;p>南北流量（NORTH-SOUTH traffic）和东西流量（EAST-WEST traffic）是数据中心环境中的网络流量模式。下面我们通过一个例子来理解这两个术语。&lt;/p>
&lt;p>假设我们尝试通过浏览器访问某些 Web 应用。Web 应用部署在位于某个数据中心的应用服务器中。在多层体系结构中，典型的数据中心不仅包含应用服务器，还包含其他服务器，如负载均衡器、数据库等，以及路由器和交换机等网络组件。假设应用服务器是负载均衡器的前端。&lt;/p>
&lt;p>当我们访问 web 应用时，会发生以下类型的网络流量：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>客户端（位于数据中心一侧的浏览器）与负载均衡器（位于数据中心）之间的网络流量&lt;/p>
&lt;/li>
&lt;li>
&lt;p>负载均衡器、应用服务器、数据库等之间的网络流量，它们都位于数据中心。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>南北流量&lt;/p>
&lt;p>在这个例子中，前者即即客户端和服务器之间的流量被称为南北流量。简而言之，南北流量是 server-client 流量。&lt;/p>
&lt;p>东西流量&lt;/p>
&lt;p>第二种流量即不同服务器之间的流量与数据中心或不同数据中心之间的网络流被称为东西流量。简而言之，东西流量是 server-server 流量。&lt;/p>
&lt;p>当下，东西流量远超南北流量，尤其是在当今的大数据生态系统中，比如 Hadoop 生态系统（大量 server 驻留在数据中心中，用 map reduce 处理），server-server 流量远大于 server-client 流量。&lt;/p>
&lt;p>大家可能会好奇，东西南北，为什么这么命名。&lt;/p>
&lt;p>该命名来自于绘制典型 network diagrams 的习惯。在图表中，通常核心网络组件绘制在顶部（NORTH），客户端绘制在底部（SOUTH），而数据中心内的不同服务器水平（EAST-WEST）绘制。&lt;/p></description></item></channel></rss>