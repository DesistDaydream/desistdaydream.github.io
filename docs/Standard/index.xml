<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦的站点 – 📐Standard</title><link>https://desistdaydream.github.io/docs/Standard/</link><description>Recent content in 📐Standard on 断念梦的站点</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/Standard/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Glossary</title><link>https://desistdaydream.github.io/docs/Standard/Glossary/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/Standard/Glossary/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Glossary">Wiki, Glossary&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Standardization">Wiki, Standardization&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Standard(标准)&lt;/strong> 与 &lt;strong>Standardized(标准化)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Standardized 更多用来行用指定标准的过程&lt;/li>
&lt;li>Standard 是经过标准化后产生的结果，已经定义好的标准是在 执行、构建、生产 各种 任务、流程、产品 时的最佳方式或期望&lt;/li>
&lt;/ul>
&lt;p>学习某项技术时，有些名词，比如某某可以是技术、规范、标准、行为、协议(协议其实从广义角度看也是标准)、等。&lt;/p>
&lt;h1 id="idc">IDC&lt;a class="td-heading-self-link" href="#idc" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Data_center">https://en.wikipedia.org/wiki/Data_center&lt;/a>&lt;/p>
&lt;p>&lt;strong>Internet data center(互联网数据中心，简称 IDC)&lt;/strong>，也可以简称为 Data center(数据中心)，并不用只限制在互联网。IDC 是一座建筑物、建筑物内的专用空间或一组建筑物，用于容纳计算机系统和相关设备。通常用于对外或对内提供 计算、存储、通信 这最基本的三大能力。&lt;/p>
&lt;h1 id="isp">ISP&lt;a class="td-heading-self-link" href="#isp" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Internet_service_provider">https://en.wikipedia.org/wiki/Internet_service_provider&lt;/a>&lt;/p>
&lt;p>&lt;strong>Internet service provider(互联网服务提供商，简称 ISP)&lt;/strong> 是提供访问、使用、管理或参与 Internet 服务的组织。 ISP 可以以多种形式组织，例如商业、社区所有、非营利或其他私人所有。比如 中国移动、中国联通、中国电信、etc. 都属于 ISP&lt;/p>
&lt;h1 id="版本信息">版本信息&lt;a class="td-heading-self-link" href="#%e7%89%88%e6%9c%ac%e4%bf%a1%e6%81%af" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>英文&lt;/th>
&lt;th>中文&lt;/th>
&lt;th>缩写&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Portable&lt;/td>
&lt;td>便携式、可移植&lt;/td>
&lt;td>&lt;/td>
&lt;td>一个程序如果不需要安装，直接使用二进制文件运行，通常称为 Portable。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="全部">全部&lt;a class="td-heading-self-link" href="#%e5%85%a8%e9%83%a8" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>英文&lt;/th>
&lt;th>中文&lt;/th>
&lt;th>缩写与简称&lt;/th>
&lt;th>链接&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>5-tuple&lt;/td>
&lt;td>五元组&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;a href="https://datatracker.ietf.org/doc/html/rfc6146#section-2">RFC 6146&lt;/a>&lt;/td>
&lt;td>源 IP，源 PORT，目的 IP，目的 PORT，传输层协议，这五个量组成的一个集合&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Advanced Telecommunications Computing Architecture&lt;/td>
&lt;td>高级电信计算架构&lt;/td>
&lt;td>ATCA&lt;/td>
&lt;td>&lt;a href="https://en.wikipedia.org/wiki/Advanced_Telecommunications_Computing_Architecture">Wiki&lt;/a>&lt;/td>
&lt;td>atca架构本身就是一组工业标准框架，只要是基于这个国际统一标准做的板卡都可以集成到一起&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Architecture&lt;/td>
&lt;td>架构&lt;/td>
&lt;td>arch&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Broadband Remote Access Server&lt;/td>
&lt;td>宽带远程接入服务器&lt;/td>
&lt;td>BRAS&lt;/td>
&lt;td>&lt;a href="https://en.wikipedia.org/wiki/Broadband_remote_access_server">Wiki&lt;/a>&lt;/td>
&lt;td>是一种用于管理和控制带宽接入用户的网络设备&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Call detail record&lt;/td>
&lt;td>通话详细记录&lt;/td>
&lt;td>CDR&lt;/td>
&lt;td>&lt;a href="https://en.wikipedia.org/wiki/Call_detail_record">Wiki&lt;/a>&lt;/td>
&lt;td>中文常简称为 &amp;ldquo;话单&amp;rdquo;。随着发展，话单的含义也逐步扩展，包含了不止是通话的详细信息。有时候也用 xDR 描述。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Data Plane Development Kit&lt;/td>
&lt;td>数据平面开发套件&lt;/td>
&lt;td>DPDK&lt;/td>
&lt;td>&lt;a href="https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/DPDK/DPDK.md">DPDK&lt;/a>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Deep packet inspection&lt;/td>
&lt;td>深度数据包检测&lt;/td>
&lt;td>DPI&lt;/td>
&lt;td>&lt;a href="https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Network%20analysis/DPI.md">DPI&lt;/a>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Call Detail Record&lt;/td>
&lt;td>通话详细记录&lt;/td>
&lt;td>CDR(话单)&lt;/td>
&lt;td>&lt;a href="https://en.wikipedia.org/wiki/Call_detail_record">CDR&lt;/a>&lt;/td>
&lt;td>后期随着发展该名词逐渐包含了 网络、等 通信之间的详细记录，而不是单指通话。可以写为 &lt;strong>xDR&lt;/strong>(wiki 上没有 xDR，自己造的)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Cyberspace Situation Awareness&lt;/td>
&lt;td>网络态势感知&lt;/td>
&lt;td>CSA&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Mellanox Technologies&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>一家以色列裔美国跨国供应商，提供基于 InfiniBand 和以太网技术的计算机网络产品。Mellanox 为高性能计算、数据中心、云计算、计算机数据存储和金融服务&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Remote Authentication Dial-In User Service&lt;/td>
&lt;td>远程用户拨号认证&lt;/td>
&lt;td>RADIUS&lt;/td>
&lt;td>&lt;a href="https://en.wikipedia.org/wiki/RADIUS">Wiki&lt;/a>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Situational awareness&lt;/td>
&lt;td>态势感知&lt;/td>
&lt;td>SA&lt;/td>
&lt;td>&lt;a href="https://en.wikipedia.org/wiki/Situation_awareness">Wiki&lt;/a>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Service Level Indicator&lt;/td>
&lt;td>服务等级指标&lt;/td>
&lt;td>SLI&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Sevice Level Objective&lt;/td>
&lt;td>服务等级目标&lt;/td>
&lt;td>SLO&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Switched Port Analyzer&lt;/td>
&lt;td>&lt;/td>
&lt;td>SPAN&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Transaction&lt;br>&lt;/td>
&lt;td>事务&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;a href="#transaction">Transaction&lt;/a>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>tap/terminal access point/test access point&lt;/td>
&lt;td>窃听/终端接入点/测试接入点&lt;/td>
&lt;td>tap/TAP&lt;/td>
&lt;td>&lt;a href="https://en.wikipedia.org/wiki/Network_tap#Terminology">Wiki&lt;/a>&lt;/td>
&lt;td>tap 并不是什么单词的缩写，仅仅就是原本的窃听之类的意思。只不过有人觉得这词不好，而且也有一些特殊情况在，就通过 backronyms(把单词扩写，不是缩写的楞扩成好几个词) 把 tap 改成了其他的意思。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="transaction">Transaction&lt;a class="td-heading-self-link" href="#transaction" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>假设某个数据可能需要经过 A、B、C、D 几个步骤才能修改完毕，我们把这四个步骤打包放到事务中，那么事务就可以确保这四个步骤要么全部执行完毕，要么全部都不去执行。这样即使在任意一个步骤断电或者程序崩溃都不会影响到数据的一致性问题。&lt;/p>
&lt;h2 id="compaction-与-compression">Compaction 与 Compression&lt;a class="td-heading-self-link" href="#compaction-%e4%b8%8e-compression" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>Compaction(压实)&lt;/strong> # 数据分散在一大片区域中，将这些数据压实到某一块，以便留出来非碎片的，完整的空白区域&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Prometheus%20%E8%A1%8D%E7%94%9F%E5%93%81/Thanos/Thanos.md">Thanos&lt;/a> 的 Compactor 组件就是一个实现类似 Compaction 的行为&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Compression(压缩)&lt;/strong> # 将数据通过算法进行压缩，比如把 1MiB 的数据压缩成 500KiB&lt;/p>
&lt;h1 id="internet">Internet&lt;a class="td-heading-self-link" href="#internet" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://datatracker.ietf.org/doc/html/rfc1594#section-13">RFC 1594，13 章&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;a href="https://desistdaydream.github.io/docs/Standard/Internet/Internet.md">Internet&lt;/a>&lt;/p>
&lt;h1 id="国际标准">国际标准&lt;a class="td-heading-self-link" href="#%e5%9b%bd%e9%99%85%e6%a0%87%e5%87%86" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;strong>International System of Units(国际单位制，简称 SI)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/International_System_of_Units">https://en.wikipedia.org/wiki/International_System_of_Units&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>International Electrotechnical Commission(国际电工委员会，简称 IEC)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/International_Electrotechnical_Commission">https://en.wikipedia.org/wiki/International_Electrotechnical_Commission&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="中国标准">中国标准&lt;a class="td-heading-self-link" href="#%e4%b8%ad%e5%9b%bd%e6%a0%87%e5%87%86" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://std.samr.gov.cn/">全国标准信息公共服务平台&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://openstd.samr.gov.cn/bzgk/gb/index">国家标准全文公开系统&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://dbba.sacinfo.org.cn/">地方标准信息服务平台&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hbba.sacinfo.org.cn/">行业标准信息服务平台&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zhuanlan.zhihu.com/p/82467306">知乎，全网最全的国家标准、行业标准文本查询下载方法&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="中华人民共和国工业和信息化部">中华人民共和国工业和信息化部&lt;a class="td-heading-self-link" href="#%e4%b8%ad%e5%8d%8e%e4%ba%ba%e6%b0%91%e5%85%b1%e5%92%8c%e5%9b%bd%e5%b7%a5%e4%b8%9a%e5%92%8c%e4%bf%a1%e6%81%af%e5%8c%96%e9%83%a8" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>标准文件从 &lt;a href="https://std.miit.gov.cn/#/index">工业和信息化标准信息服务平台&lt;/a> 这里搜索后可以预览具体内容&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/glossary/std_miit_1.png" alt="image.png">&lt;/p>
&lt;h1 id="其他">其他&lt;a class="td-heading-self-link" href="#%e5%85%b6%e4%bb%96" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>StandardizedGlossary(标准化术语)&lt;/p>
&lt;h2 id="黑盒学习-与-白盒学习">黑盒学习 与 白盒学习&lt;a class="td-heading-self-link" href="#%e9%bb%91%e7%9b%92%e5%ad%a6%e4%b9%a0-%e4%b8%8e-%e7%99%bd%e7%9b%92%e5%ad%a6%e4%b9%a0" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>学习过程分两种&lt;/p>
&lt;ul>
&lt;li>黑盒 # 看看这个知识点与周围其他系统之间的关系，以及互相作用的效果。了解基本工作逻辑&lt;/li>
&lt;li>白盒 # 打开待学习的知识点，直接学习知识点的原理&lt;/li>
&lt;/ul>
&lt;p>要掌握一个学科的精髓，不能从细枝末节开始。人脑的能力很大程度上受限于信念。一个人不相信自己的时候，他就做不到本来可能的事。信心是很重要的，信心却容易被挫败。如果只见树木不见森林，人会失去信心，以为要到猴年马月才能掌握一个学科。&lt;/p>
&lt;p>所以我们不从 “树木” 开始，而是引导读者一起来探索这背后的“森林”，把计算机科学最根本的概念用浅显的例子解释，让读者领会到它们的本质。把这些概念稍作发展，你就得到逐渐完整的把握。你一开头就掌握着整个学科，而且一直掌握着它，只不过增添更多细节而已。这就像画画，先勾勒出轮廓，一遍遍的增加细节，日臻完善，却不失去对大局的把握。&lt;/p>
&lt;h2 id="bare-metal裸金属">Bare metal(裸金属)&lt;a class="td-heading-self-link" href="#bare-metal%e8%a3%b8%e9%87%91%e5%b1%9e" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Bare_machine">Wiki, Bare machine&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>在计算机科学中，&lt;strong>Bare metal(裸金属)&lt;/strong> 也称为 &lt;strong>Bare machine(裸机)&lt;/strong>，是指在没有介入操作系统的逻辑硬件上执行指令的计算机。&lt;/p>
&lt;p>在很多软件的部署文档中，Bare metal 经常作为部署方式的一种，但是这时候裸金属部署，并不是真的在没有操作系统的服务器上安装软件，而是指在没有其他通用平台上安装，说白了，就是指&lt;strong>原始安装&lt;/strong>&lt;/p></description></item><item><title>Docs: 常用英文</title><link>https://desistdaydream.github.io/docs/Standard/%E5%B8%B8%E7%94%A8%E8%8B%B1%E6%96%87/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/Standard/%E5%B8%B8%E7%94%A8%E8%8B%B1%E6%96%87/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;a href="https://www.bilibili.com/video/BV1uu4y1c7PY">B 站，TED中字：如何在3个月内学会任何外语并且永远不会忘记?&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.bilibili.com/read/cv7989082/">https://www.bilibili.com/read/cv7989082/&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/364365898">https://zhuanlan.zhihu.com/p/364365898&lt;/a>&lt;/p>
&lt;p>具有多个发音的字母:&lt;/p>
&lt;ul>
&lt;li>a、e&lt;/li>
&lt;li>c、g、x、y&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>c 在单词里总共存在四种可能的读音，包括 /k/、/s/、/ʃ/ 和 /tʃ/。&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>发 /k/ 音
&lt;ul>
&lt;li>当字母c位于词尾&lt;/li>
&lt;li>当字母c位于词首或词中时
&lt;ul>
&lt;li>如果后跟辅音字母或者元音字母 a, o, u 其中的一个，没有例外。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>发 /s/ 音
&lt;ul>
&lt;li>当字母c位于词首或词中时
&lt;ul>
&lt;li>如果后跟元音字母 y，没有例外&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>当字母c的后面只有一个元音字母，它或者是 e 或者是 i，再之后就是辅音字母或者什么都没有了（也就是单词结束了）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>tion, sion, cian 发 /ʃ(ə)n/&lt;/strong>&lt;/p>
&lt;p>I fear your lust for power could get the better of you. You are a hero, not a politician.&lt;/p>
&lt;h1 id="编程">编程&lt;a class="td-heading-self-link" href="#%e7%bc%96%e7%a8%8b" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>英文&lt;/th>
&lt;th>中文&lt;/th>
&lt;th>缩写&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Implementation&lt;/td>
&lt;td>实现&lt;/td>
&lt;td>impl&lt;/td>
&lt;td>Go 编程语言中用于表示实现了某个接口的结构体。Implement, Implementing&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>SUITE&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>复数为 suites，在计算机领域翻译为程序组。通常用于描述一个程序的执行单元。suite 可能是一个函数或者一个脚本，它包含了一系列的语句，这些语句通常在一个缩进的代码块中，这个代码块的开始和结束都使用了相同的缩进级别&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Compile&lt;/td>
&lt;td>编译&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Compiler&lt;/td>
&lt;td>编译器&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Bundle&lt;/td>
&lt;td>打包&lt;/td>
&lt;td>&lt;/td>
&lt;td>常见于前端，与后端编译不同，前端通常是将多个文件打包成一个文件，所以使用 Bundle 而不是 Compile&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Bundler&lt;/td>
&lt;td>打包器&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="常见缩写">常见缩写&lt;a class="td-heading-self-link" href="#%e5%b8%b8%e8%a7%81%e7%bc%a9%e5%86%99" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>英文&lt;/th>
&lt;th>中文&lt;/th>
&lt;th>缩写&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Business&lt;/td>
&lt;td>业务&lt;/td>
&lt;td>BIZ&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Management&lt;/td>
&lt;td>管理&lt;/td>
&lt;td>MGMT&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Protocol&lt;/td>
&lt;td>协议&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="符号的英语名称">符号的英语名称&lt;a class="td-heading-self-link" href="#%e7%ac%a6%e5%8f%b7%e7%9a%84%e8%8b%b1%e8%af%ad%e5%90%8d%e7%a7%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.ruanyifeng.com/blog/2007/07/english_punctuation.html">阮一峰，标点符号的英语名称&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;code> &lt;/code> space 空格
&lt;code>.&lt;/code> period or full stop 句号
&lt;code>,&lt;/code> comma 逗号
&lt;code>:&lt;/code> colon 冒号
&lt;code>;&lt;/code> semicolon 分号
&lt;code>!&lt;/code> exclamation mark 惊叹号
&lt;code>?&lt;/code> question mark 问号
&lt;code>-&lt;/code> hyphen 连字符&lt;/p>
&lt;p>&lt;code>*&lt;/code> asterisk 星号
&amp;rsquo; apostrophe 所有格符号，单词内部的省略
— dash 破折号
&lt;code>_&lt;/code> underscore 下划线
‘ ’ single quotation marks 单引号
“ ” double quotation marks 双引号
( ) parenthesis or round brackets 圆括号
[ ] square brackets 方括号
&amp;lt;&amp;gt; Angle brackets 尖括号&lt;/p>
&lt;p>《 》French quotes 法文引号；书名号
&amp;hellip; ellipsis 省略号
¨ tandem colon 双点号
&amp;quot; ditto 同上
‖ parallel 双线号
／ slash or virgule or diagonal mark 斜线号
＆ ampersand = AND
～ tilde or swung dash 代字号
§ section; division 分节号
→ arrow 箭号；参见号
&lt;code>|&lt;/code> vertical bar 竖线
&lt;code>\&lt;/code> backslash 反斜线&lt;/p>
&lt;h2 id="数学符号的英文名称">数学符号的英文名称&lt;a class="td-heading-self-link" href="#%e6%95%b0%e5%ad%a6%e7%ac%a6%e5%8f%b7%e7%9a%84%e8%8b%b1%e6%96%87%e5%90%8d%e7%a7%b0" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>＋ plus 加号；正号
－ minus 减号；负号
± plus or minus 正负号
× is multiplied by 乘号
÷ is divided by 除号
＝ is equal to 等于号
≠ is not equal to 不等于号
≡ is equivalent to 全等于号
≌ is equal to or approximately equal to 等于或约等于号
≈ is approximately equal to 约等于号
＜ less than sign 小于号
＞ more than or greater than sign 大于号
≮ is not less than 不小于号
≯ is not more than 不大于号
≤ is less than or equal to 小于或等于号
≥ is more than or equal to 大于或等于号
％ per cent 百分之…
‰ per mill 千分之…
∞ infinity 无限大号
∝ varies as 与…成比例
√ (square) root 平方根
∵ since; because 因为
∴ hence 所以
∷ equals, as (proportion) 等于，成比例
∠ angle 角
⌒ semicircle 半圆
⊙ circle 圆
○ circumference 圆周
△ triangle 三角形
⊥ perpendicular to 垂直于
∪ union of 并，合集
∩ intersection of 交，通集
∫ the integral of …的积分
∑ (sigma) summation of 总和
° degree 度
′ minute 分
″ second 秒
＃ number …号
℃ Celsius system 摄氏度
＠ at 在&lt;/p>
&lt;h1 id="词性">词性&lt;a class="td-heading-self-link" href="#%e8%af%8d%e6%80%a7" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>英语的词性大约有 10 种，名词 n. 副词 adv. 介词 prep，代词 pron，数词 num，动词 v，形容词 adj，冠词 art，连词 conj，感叹词 interj，及物动词 vt，不及物动词 vi，助动词 vaux，缩写 a bbr，动词不定式 inf.，单数 sing，复数 pl，情态动词 aux.。不同的词性代表着不同的意思，所以才有了英语语法不同的说法，下面就让小编为大家带来英语词性缩写，让大家了解一番。&lt;/p>
&lt;p>英语词性缩写：&lt;/p>
&lt;p>n = 名词，noun 的缩写&lt;/p>
&lt;p>u = 不可数名词，uncountable noun 的缩写&lt;/p>
&lt;p>c = 可数名词，countable noun 的缩写&lt;/p>
&lt;p>v = 动词， verb 的缩写&lt;/p>
&lt;p>vi = 不及物动词，intransitive verb 的缩写&lt;/p>
&lt;p>vt = 及物动词，transitive verb 的缩写&lt;/p>
&lt;p>aux.v = 助动词，auxiliary verb 的缩写&lt;/p>
&lt;p>model verb 情态动词&lt;/p>
&lt;p>conj = 连接词 ，conjunction 的缩写&lt;/p>
&lt;p>adj. = 形容词，adjective 的缩写&lt;/p>
&lt;p>adv.= 副词，adverb 的缩写&lt;/p>
&lt;p>art. = 冠词，article 的缩写&lt;/p>
&lt;p>prep = 介词;preposition 的缩写&lt;/p>
&lt;p>pron = 代名词，pronoun 的缩写&lt;/p>
&lt;p>num = 数词，numeral 的缩写&lt;/p>
&lt;p>int. = 感叹词，interjection 的缩写&lt;/p>
&lt;h1 id="中英文对比">中英文对比&lt;a class="td-heading-self-link" href="#%e4%b8%ad%e8%8b%b1%e6%96%87%e5%af%b9%e6%af%94" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>想要描述 “当 XX 时 YY” 这种事情时，中文先表述当 XX，然后再描述具体的行为 YY；而英文先表述具体的行为 YY，然后才说当 XX。&lt;/p>
&lt;h1 id="常用名词">常用名词&lt;a class="td-heading-self-link" href="#%e5%b8%b8%e7%94%a8%e5%90%8d%e8%af%8d" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>row 行&lt;/p>
&lt;p>column 列&lt;/p>
&lt;p>uppercase 大写字母&lt;/p>
&lt;p>lowercase 小写字母&lt;/p>
&lt;p>simulation 与 emulation&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.jianshu.com/p/12852c42f2be">https://www.jianshu.com/p/12852c42f2be&lt;/a>&lt;/li>
&lt;li>Simulation 是试图模仿一个功能。比如模拟点击（用 &lt;a href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/ECMAScript.md">ECMAScript&lt;/a>、py 模拟（simulation）浏览器点击）&lt;/li>
&lt;li>Emulation 是试图模范一个内部设计。比如模拟器（使用 swtich 模拟器（emulation）运行塞尔达、比如 &lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Virtualization%20implementation/KVM_QEMU/QEMU%20%E8%AE%BE%E5%A4%87%E6%A8%A1%E6%8B%9F%E9%80%BB%E8%BE%91.md">QEMU 设备模拟逻辑&lt;/a>）&lt;/li>
&lt;/ul>
&lt;p>collection 与 set&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://byjus.com/question-answer/what-is-the-difference-between-a-collection-and-a-set-give-reasona-to-support-your/">https://byjus.com/question-answer/what-is-the-difference-between-a-collection-and-a-set-give-reasona-to-support-your/&lt;/a>&lt;/li>
&lt;li>set 是 collection 的子集，set 是具有特定类型的 collection。说 ip set 而不是 ip collection，表示特定于 IP 的 集合。&lt;/li>
&lt;/ul></description></item><item><title>Docs: Foundation</title><link>https://desistdaydream.github.io/docs/Standard/Foundation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/Standard/Foundation/</guid><description/></item><item><title>Docs: IT</title><link>https://desistdaydream.github.io/docs/Standard/IT/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/Standard/IT/</guid><description/></item><item><title>Docs: Internet</title><link>https://desistdaydream.github.io/docs/Standard/Internet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/Standard/Internet/</guid><description/></item><item><title>Docs: B_S 和 C_S 架构</title><link>https://desistdaydream.github.io/docs/Standard/B_S-%E5%92%8C-C_S-%E6%9E%B6%E6%9E%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/Standard/B_S-%E5%92%8C-C_S-%E6%9E%B6%E6%9E%84/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="service-side-与-client-side">Service Side 与 Client Side&lt;a class="td-heading-self-link" href="#service-side-%e4%b8%8e-client-side" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Server-side">Wiki, Server Side&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Client-side">Wiki, Client Side&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Client/Server 结构(C/S 结构) 是大家熟知的 &lt;strong>Client Side(客户端) 与 Server Side(服务端)&lt;/strong> 结构。它是软件系统体系结构，通过它可以充分利用两端硬件环境的优势，将任务合理分配到 Client Side 和 Server Side 来实现，降低了系统的通讯开销。目前大多数应用软件系统都是 Client/Server 形式的两层结构，由于现在的软件应用系统正在向分布式的 Web 应用发展，Web 和 Client/Server 应用都可以进行同样的业务处理，应用不同的模块共享逻辑组件；因此，内部的和外部的用户都可以访问新的和现有的应用系统，通过现有应用系统中的逻辑可以扩展出新的应用系统。这也就是目前应用系统的发展方向。&lt;/p>
&lt;p>B/S 结构（Browser/Server，浏览器/服务器模式），是 WEB 兴起后的一种网络结构模式，WEB 浏览器是客户端最主要的应用软件。这种模式统一了客户端，将系统功能实现的核心部分集中到服务器上，简化了系统的开发、维护和使用。客户机上只要安装一个浏览器（Browser 英 [&amp;lsquo;braʊzə]美 [&amp;lsquo;braʊzɚ]），如 Netscape Navigator 或 Internet Explorer，服务器安装 SQL Server、Oracle、MYSQL 等数据库。浏览器通过 Web Server 同数据库进行数据交互。&lt;/p>
&lt;p>Apache 是普通服务器，本身只支持 html 即普通网页。不过可以通过插件支持 php,还可以与 Tomcat 连通(单向 Apache 连接 Tomcat,就是说通过 Apache 可以访问 Tomcat 资源。反之不然)。Apache 只支持静态网页，但像 php,cgi,jsp 等动态网页就需要 Tomcat 来处理。 Tomcat 是由 Apache 软件基金会下属的 Jakarta 项目开发的一个 Servlet 容器，按照 Sun Microsystems 提供的技术规范，实现了对 Servlet 和 JavaServer Page（JSP）的支持，并提供了作为 Web 服务器的一些特有功能，如 Tomcat 管理和控制平台、安全域管理和 Tomcat 阀等。由于 Tomcat 本身也内含了一个 HTTP 服务器，它也可以被视作一个单独的 Web 服务器。但是，不能将 Tomcat 和 Apache Web 服务器混淆，Apache Web Server 是一个用 C 语言实现的 HTTP web server；这两个 HTTP web server 不是捆绑在一起的。Apache Tomcat 包含了一个配置管理工具，也可以通过编辑 XML 格式的配置文件来进行配置。Apache，nginx，tomcat 并称为网页服务三剑客，可见其应用度之广泛。（说白了，tomcat 就是个底层设施软件服务，网页上所有的东西就要放在 tomcat 上，别人才能通过 tomcat 访问，tomcat 占用 80 端口）&lt;/p>
&lt;p>例子：当通过浏览器，访问一个网站的时候，这时候就是一个 B/S 的架构，因为网站肯定是运行在服务器上的，这个服务器的系统上又装了 tomcat 这个服务，并占用 80 端口，因此，人们通过浏览器访问网站，由于自动使用 80 端口，那么就直接访问到 comcat 服务，然后由 comcat 来调取网站的页面资源给客户展示出来。&lt;/p>
&lt;p>至于 C/S 就相当于通过 PC 端的一个软件，通过 URL 网址访问到服务器上的应用程序。&lt;/p></description></item><item><title>Docs: 中国行政区划及代码</title><link>https://desistdaydream.github.io/docs/Standard/%E4%B8%AD%E5%9B%BD%E8%A1%8C%E6%94%BF%E5%8C%BA%E5%88%92%E5%8F%8A%E4%BB%A3%E7%A0%81/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/Standard/%E4%B8%AD%E5%9B%BD%E8%A1%8C%E6%94%BF%E5%8C%BA%E5%88%92%E5%8F%8A%E4%BB%A3%E7%A0%81/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://std.samr.gov.cn/gb/search/gbDetailed?id=71F772D76EA3D3A7E05397BE0A0AB82A">GB/T 2260-2007 中华人民共和国行政区划代码&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.stats.gov.cn/sj/tjbz/qhdm/">国家统计局，统计用区划代码和城乡划分代码&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.stats.gov.cn/sj/tjbz/gjtjbz/202302/t20230213_1902741.html">国家统计局，统计用区划代码和城乡划分代码编制规则&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/modood/Administrative-divisions-of-China">GitHub 项目，modood/Administrative-divisions-of-China&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>Docs: Agent 与 Proxy</title><link>https://desistdaydream.github.io/docs/Standard/Agent-%E4%B8%8E-Proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/Standard/Agent-%E4%B8%8E-Proxy/</guid><description>
&lt;p>今天，在阅读 Jolokia 文档的时候，看到其支持两种架构模式： Agent Mode 与 Proxy Mode。从字面上理解，agent 与 proxy 都有代理的意思，那么它们在内涵上到底有什么不同的，值得思考。&lt;/p>
&lt;p>Agent Mode&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gu5xfp/1621662188213-22f409de-8912-4cb1-8722-b96d628694b6.png" alt="">&lt;/p>
&lt;p>Proxy Mode&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gu5xfp/1621662192171-21f74acf-2333-4edd-859d-cc8aba728428.png" alt="">
从上面两张图可以看出，Proxy 与 Agent 所处的位置和目的有所不同，Agent 处在被代理对象的内部，而 Proxy 与被代理对象之间处于一种相对独立的状态。&lt;/p>
&lt;p>举个例子，Proxy 类似于会计事务所，而 Agent 类似于公司里做会计工作的员工，它们都是处理企业的财务问题，但是角色不同。&lt;/p>
&lt;blockquote>
&lt;p>Agent 代理 通常指与用户接口的客户端程序&lt;/p>
&lt;p>Proxy 代理 接收用户请求并将请求发给服务器,然后接收服务器回应并返回给用户 实际上 Proxy 的功能就是代替用户访问服务器,用户被隐藏.&lt;/p>
&lt;/blockquote>
&lt;h2 id="the-etymology-of-agent-and-proxy-in-computer-networking-discourse">The Etymology of &amp;ldquo;Agent&amp;rdquo; and &amp;ldquo;Proxy&amp;rdquo; in Computer Networking Discourse&lt;a class="td-heading-self-link" href="#the-etymology-of-agent-and-proxy-in-computer-networking-discourse" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>原文: &lt;a href="https://cyber.harvard.edu/archived_content/people/reagle/etymology-agency-proxy-19981217.html">https://cyber.harvard.edu/archived_content/people/reagle/etymology-agency-proxy-19981217.html&lt;/a>&lt;/p>
&lt;p>&lt;em>September 18, 1998.&lt;/em> _&lt;a href="https://link.zhihu.com/?target=mailto%3A//reagle%40mit.edu">Joseph Reagle&lt;/a>
_
Revised: January 15, 1999 .&lt;/p>
&lt;p>Given that the topic of this paper addresses both computer and legal agency, we believe an examination of the usage of the terms &amp;ldquo;agent&amp;rdquo; and &amp;ldquo;proxy&amp;rdquo; within each field is instructive. The technical use of the term _&lt;a href="https://link.zhihu.com/?target=http%3A//ai.miningco.com/">agent&lt;/a>_can be characterized into three overlapping periods. During the &lt;a href="https://link.zhihu.com/?target=http%3A//ai.miningco.com/library/weekly/aa080397.htm">earliest period&lt;/a> (1960 onward) the term was used by the artificial intelligence community. During the same period, the community of Internet network designers used the term in a way similar to our own: a service that acted on the behalf of another. Finally, the 1990&amp;rsquo;s has been the decade of the agents: where the concept of potentially intelligent, autonomous computer programs that interact with each other within a networked community is hyped. It was also during this latter period that the term &lt;em>proxy&lt;/em> became widely used.&lt;/p>
&lt;p>The technical concept of an agent was apparently first used in the artificial intelligence community in 1959 to describe the constituents (agents or demons) of a larger self-organizing behavior. [RR, Self] However, within AI its usage did not always relate to computer programs, but to linguistic analysis, particularly in Fillmore&amp;rsquo;s case grammar [Fill]:&lt;/p>
&lt;p>An agent is one who performs a particular action and this can be reflected in &amp;gt; &lt;em>syntax&lt;/em>. In English, in an active sentence, the agent is usually referred to by the subject&amp;hellip;. A form used to indicate the agent is called &amp;lsquo;agentive.&amp;rsquo; In case grammar, agentive or agent is one of the specified sets of cases. [Bear]&lt;/p>
&lt;p>Agents were the subject of papers on intelligent information sharing systems and artificial intelligence throughout the 70 and 80s&amp;rsquo;. Occasionally, IT related papers used the term as any other discipline would, such as &amp;ldquo;Computers as an Agent of Change.&amp;rdquo; [Dieb]. Consequently, the use of the term to denote an initiator of action both within the AI/linguistic community and its typical English usage led the term to be used as a substitute of the term &amp;ldquo;program&amp;rdquo; when the connotation of autonomy and network interaction were required.&lt;/p>
&lt;p>&amp;lt;&amp;gt; &lt;a href="https://link.zhihu.com/?target=http%3A//wombat.doc.ic.ac.uk/foldoc/contents/networking.html">networking&lt;/a>&amp;gt; In the &amp;gt; &lt;a href="https://link.zhihu.com/?target=http%3A//wombat.doc.ic.ac.uk/foldoc/foldoc.cgi%3Fclient-server">client-server&lt;/a> model, the part of the system that performs information preparation and exchange on behalf of a &amp;gt; &lt;a href="https://link.zhihu.com/?target=http%3A//wombat.doc.ic.ac.uk/foldoc/foldoc.cgi%3Fclient">client&lt;/a> or &amp;gt; &lt;a href="https://link.zhihu.com/?target=http%3A//wombat.doc.ic.ac.uk/foldoc/foldoc.cgi%3Fserver">server&lt;/a>. Especially in the phrase &amp;ldquo;intelligent agent&amp;rdquo; it implies some kind of automatic process which can communicate with other agents to perform some collective task on behalf of one or more humans. [&amp;gt; &lt;a href="https://link.zhihu.com/?target=http%3A//wombat.doc.ic.ac.uk/foldoc/index.html">Free On-line Dictionary of Computing&lt;/a>]&lt;/p>
&lt;p>While computer agents were the subject of papers for nearly two decades, it was in the 1990&amp;rsquo;s that the term became worthy of appearing in the title. Previously, the key words of related publications were information sharing, computer mediation, collaboration, and cooperation. [Wood] Starting in 1994, specific venues for agent research and discussion, [EWMA, CIKM] as well as a special issue of the Communications of the ACM placed the term prominently in popular discourse. [Comm]&lt;/p>
&lt;p>One of the best sources of information on how the terms &lt;em>agents&lt;/em> and &lt;em>proxies&lt;/em> came to be used in the context of the Internet and Web is the IETF&amp;rsquo;s Request for Comments (RFC) archive. While the first occurrence of _agent*in an RFC was administrative, [RFC95] its technical debut was instructive in its use with respect to qualifying an agent as a program that resides on and communicates with other programs on a network.&lt;/p>
&lt;p>The above premise is that the program (or agent) is doing the communicating with an NCP and thus needs to be identified for message traffic routing from an NCP. [RFC129]&lt;/p>
&lt;p>During the 70&amp;rsquo;s at the IETF the only other time _agent* was used in a technical sense was to refer to refer to the sender of an email. [RFC733] However, in 1980, with the arrival of the Transmission Control Protocol (TCP) [RFC761, RFC793] its usage was firmly established as a keyword in network protocol vernacular.&lt;/p>
&lt;p>By 1987, the Internet TCP/IP protocol had matured sufficiently that the larger issue of network architecture and management became a focus of work at the IETF. Three critical RFCs related to this work include:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://link.zhihu.com/?target=http%3A//info.internet.isi.edu/in-notes/rfc/files/rfc1067.txt">RFC1067&lt;/a> &amp;ndash; Simple Network Management Protocol. [RFC1067]&lt;/li>
&lt;li>&lt;a href="https://link.zhihu.com/?target=http%3A//info.internet.isi.edu/in-notes/rfc/files/rfc1027.txt">RFC1027&lt;/a> &amp;ndash; Using ARP to implement transparent subnet gateways. [RFC1027]&lt;/li>
&lt;li>&lt;a href="https://link.zhihu.com/?target=http%3A//info.internet.isi.edu/in-notes/rfc/files/rfc1009.txt">RFC1009&lt;/a> &amp;ndash; Requirements for Internet gateways. [RFC1009]&lt;/li>
&lt;/ul>
&lt;p>A concept integral to &lt;em>proxy&lt;/em> was that of a &lt;em>gateway&lt;/em>. &lt;strong>Gateways&lt;/strong> often provide an interface between two networks &amp;ndash; each of which may use a different networking protocol. A &lt;em>proxy&lt;/em> is often run on the gateway and acts as a go between, representing requests or services on behalf of one party in terms the second party can understand. The term proxy was seemingly first used in the network context by Shapiro [Shap] in 1986 to designate one object as a local representative of a remote object. However, both of our terms, &lt;em>agent&lt;/em> and &lt;em>proxy&lt;/em>, received their fullest treatment in 1989 in RFC 1095. &lt;em>Proxy&lt;/em> is explicitly placed in a legal context.&lt;/p>
&lt;p>3.1. Architectural OverviewThe basic concepts underlying OSI network management are quite simple [16]. There reside application processes called &amp;ldquo;managers&amp;rdquo; on managing systems (or management stations). There reside application processes called &amp;ldquo;agents&amp;rdquo; on managed systems (or network elements being managed). Network management occurs when managers and agents conspire (via protocols and a shared conceptual schema) to exchange monitoring and control information useful to the management of a network and its components. The terms &amp;ldquo;manager&amp;rdquo; and &amp;ldquo;agent&amp;rdquo; are also used in a loose and popular sense to refer to the managing and managed system, respectively&amp;hellip;. The terms &amp;ldquo;manager&amp;rdquo; and &amp;ldquo;agent&amp;rdquo; are used to denote the asymmetric relationship between management application processes in which the manager plays the superior role and the agent plays the subordinate.4.3. Proxy ManagementProxy is a term that originated in the legal community to indicate an entity empowered to perform actions on behalf of another. In our context, a proxy is a manager empowered to perform actions on behalf of another manager. This may be necessary because the manager cannot communicate directly with the managed devices either for security or other administrative reasons or because of incompatible communication mechanisms or protocols. In either case, the proxy assumes the agent role with respect to the requesting manager and the manager role with respect to the managed device. [RFC1090]&lt;/p>
&lt;p>Subsequently, the terms agents and proxy have become integral to the nomenclature of networks and their applications. This includes email [ref], ftp [ref], the Web [HTTP], and firewalls [ref]. Professors [Maes, Mins, Negr] and students associated with the &lt;a href="https://link.zhihu.com/?target=http%3A//agents.www.media.mit.edu/groups/agents/">Agent Group&lt;/a> at the &lt;a href="https://link.zhihu.com/?target=http%3A//www.media.mit.edu/">MIT Media Lab&lt;/a> have significantly contributed to the advancement of software agents in the popular scientific press. Others &amp;ndash; beyond the authors of this paper &amp;ndash; have begin to think about the social implications of autonomous network agents [Fried1-3, Niss]&lt;/p>
&lt;h3 id="references">References&lt;a class="td-heading-self-link" href="#references" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>[Bear] Beardon C. (Editor) &lt;em>&lt;a href="https://link.zhihu.com/?target=http%3A//www.amazon.com/exec/obidos/ASIN/0130482994/qid%3D906405323/sr%3D1-8/002-1402323-9200248">Artificial Intelligence Terminology : A Reference Guide (Ellis Horwood Series in Artificial Intelligence Foundations and Concepts)&lt;/a>&lt;/em> (1989).
[CIKM] Third International Conference on Information and Knowledge Management (CIKM'94)
[Comm] Communications of the ACM. v.37 n.7, July1994.
[Dieb] Diebold, J. &lt;em>Man and the Computer; Technology as an Agent of Social Change.&lt;/em> F. A. Praeger, New York. (1969).
[EWMA] European Workshop on Modeling Autonomous Agents in a Multi-Agent World (7th : 1996 : Eindhoven, Netherlands)
[Fill] Fillmore, &amp;ldquo;&lt;em>The Case for Case&lt;/em>.&amp;rdquo; Universals in Linguistic Theory. (Bach, E. and Harms, R., eds.) Holt, Rinehart, and Winston, New York. (1968) pp. 1-90.
[Fried1] Friedman B., and Millett L. &lt;em>&amp;ldquo;It&amp;rsquo;s the computer&amp;rsquo;s fault&amp;rdquo; &amp;ndash; Reasoning about computers as moral agents&lt;/em>. Conference companion of the conference on Human Factors in Computing Systems, CHI &amp;lsquo;95. New York: Association for Computing Machinery. (May 1995) pp. 226- 227.
[Fried2] Friedman B, and Nissenbaum H. &lt;a href="https://link.zhihu.com/?target=http%3A//www.acm.org/pubs/citations/journals/tois/1996-14-3/p330-friedman/">Bias in computer systems &lt;/a>. ACM Trans. Inf. Syst. 14, 3 (Jul. 1996) pp. 330 - 347.
[Fried3] Friedman B, and Nissenbaum H &lt;a href="https://link.zhihu.com/?target=http%3A//www.acm.org/pubs/citations/proceedings/ai/267658/p466-friedman/">Software agents and user autonomy&lt;/a>. Autonomous agents. (1997) pp. 466 - 469.
[Maes] Maes, P. &lt;a href="https://link.zhihu.com/?target=http%3A//pattie.www.media.mit.edu/people/pattie/CACM-94/CACM-94.p1.html">Agents that Reduce Work and Information Overload.&lt;/a> Communications of the ACM. Vol. 37 No.7 (July 1994), pp. 31-40.
[Mins] Minsky, M, and D. Riecken. &lt;a href="https://link.zhihu.com/?target=http%3A//www.acm.org/pubs/citations/journals/cacm/1994-37-7/p22-minsky/">A Conversation with Marvin Minsky about Agents&lt;/a>. &lt;em>&lt;a href="https://link.zhihu.com/?target=http%3A//www.acm.org/cacm/">Communications of the ACM&lt;/a>&lt;/em> Vol. 37, No. 7 (July 1994) pp. 22-29.
[Negr] Nicholas Negroponte. &lt;em>Agents: From Direct Manipulation to Delegation&lt;/em>. Software Agents. (Jeffrey M. Bradshaw ed.), MIT Press 1997.
[Niss] Nissenbaum, H. &lt;a href="https://link.zhihu.com/?target=http%3A//www.acm.org/pubs/citations/journals/cacm/1994-37-1/p72-nissenbaum/">Computing and accountability&lt;/a>. Communications of the ACM. Vol. 37, No. 1 (Jan. 1994) pp. 72-80.
[RR] Rome, B. and Rome, S. &lt;em>Leviathan: A Simulation of Behavioral Systems, to Operate Dynamically on a Digital Computer&lt;/em>, System Development Corporation report no. SP-50, 6 (Nov. 1959), pp 15.
[RFC1095] &lt;em>&lt;a href="https://link.zhihu.com/?target=http%3A//info.internet.isi.edu/in-notes/rfc/files/rfc1095.txt">RFC1095&lt;/a>&lt;/em> &lt;em>&amp;ndash;&lt;/em> &lt;em>Common Management Information Services and Protocol over TCP/IP (CMOT).&lt;/em> U.S. Warrier, L. Besaw. Apr-01-1989. (Obsoleted by RFC1189)
[RFC1067] &lt;em>&lt;a href="https://link.zhihu.com/?target=http%3A//info.internet.isi.edu/in-notes/rfc/files/rfc1067.txt">RFC1067&lt;/a>&lt;/em> &lt;em>&amp;ndash;&lt;/em> &lt;em>Simple Network Management Protocol&lt;/em>. J.D. Case, M. Fedor, M.L. Schoffstall, J. Davin. Aug-01-1988. (Obsoleted by RFC1098)
[RFC1027] &lt;em>&lt;a href="https://link.zhihu.com/?target=http%3A//info.internet.isi.edu/in-notes/rfc/files/rfc1027.txt">RFC1027&lt;/a>&lt;/em> &lt;em>&amp;ndash;&lt;/em> Using ARP to implement transparent subnet gateways. S. Carl-Mitchell, J.S. Quarterman. Oct-01-1987.(Status: UNKNOWN)
[RFC1009] &lt;em>&lt;a href="https://link.zhihu.com/?target=http%3A//info.internet.isi.edu/in-notes/rfc/files/rfc1009.txt">RFC1009&lt;/a>&lt;/em> &lt;em>&amp;ndash; Requirements for Internet gateways&lt;/em>. R.T. Braden, J. Postel. Jun-01-1987. (Obsoletes RFC0985) (Obsoleted by RFC1812)
[RFC733] &lt;em>&lt;a href="https://link.zhihu.com/?target=http%3A//info.internet.isi.edu/in-notes/rfc/files/rfc733.txt">RFC733&lt;/a>&lt;/em> &lt;em>&amp;ndash; Standard for the format of ARPA network text messages&lt;/em>. D. Crocker, J. Vittal, K.T. Pogran, D.A. Henderson. Nov-21-1977. (Obsoletes RFC0724) (Obsoleted by RFC0822)
[RFC761] &lt;em>&lt;a href="https://link.zhihu.com/?target=http%3A//info.internet.isi.edu/in-notes/rfc/files/rfc761.txt">RFC761&lt;/a>&lt;/em> &lt;em>&amp;ndash; DoD standard Transmission Control Protocol&lt;/em>. J. Postel. Jan-01-1980.
[RFC95] &lt;a href="https://link.zhihu.com/?target=http%3A//info.internet.isi.edu/in-notes/rfc/files/rfc95.txt">RFC95&lt;/a> &amp;ndash; &lt;em>Distribution of NWG/RFC&amp;rsquo;s through the NIC&lt;/em>. S.D. Crocker. Feb-04-1971. (Obsoleted by RFC0155)
[Self] Selfridge, O. &amp;ldquo;Pandemonium: A Paradigm for Learning.&amp;rdquo; &lt;em>Mechanisation of Thought Processes&lt;/em>. London: H. M. Stationery Off., 1959, pp. 511-527.
[Shap] Shapiro, M. &lt;em>Structure and encapsulation in distributed systems: The proxy principle&lt;/em>. 6th International Conference on Distributed Computing Systems Proceedings (Cat. No. 86CH2293-9). (6th International Conference on Distributed Computing Systems Proceedings (Cat. No. 86CH2293-9), Cambridge, MA, USA, 19-23 May 1986). Washington, DC, USA: IEEE Comput. Soc. Press, 1986. pp. 198-204.
[Wood] &lt;a href="https://link.zhihu.com/?target=https%3A//cyber.harvard.edu/archived_content/people/reagle/amw%40cs.bham.ac.uk">Andy Wood&lt;/a>. &lt;a href="https://link.zhihu.com/?target=http%3A//www.cs.bham.ac.uk/~amw/agents/index.html">Agent Information and References&lt;/a>. Available at &lt;a href="https://link.zhihu.com/?target=http%3A//www.cs.bham.ac.uk/~amw/agents/index.html">http://www.cs.bham.ac.uk/~amw/agen&lt;/a>&lt;/p></description></item><item><title>Docs: Architecture(架构)</title><link>https://desistdaydream.github.io/docs/Standard/Architecture%E6%9E%B6%E6%9E%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/Standard/Architecture%E6%9E%B6%E6%9E%84/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Computer_architecture">Wiki, Computer Architecture&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="各行各业微服务技术架构图分享">各行各业微服务技术架构图分享&lt;a class="td-heading-self-link" href="#%e5%90%84%e8%a1%8c%e5%90%84%e4%b8%9a%e5%be%ae%e6%9c%8d%e5%8a%a1%e6%8a%80%e6%9c%af%e6%9e%b6%e6%9e%84%e5%9b%be%e5%88%86%e4%ba%ab" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>包含：智慧仓储#docker#部署图、通用微服务架构图、物联网终端微服务架构图、平台微服务技术架构、基于#SpringCloud#的微服务架构图、基于 SpringCloud 的微服务电商系统架构图、#k8s#云原生架构图、#云计算#总体架构和技术架构。&lt;/p>
&lt;p>微服务不是架构演变的终极目标。最近比较流行的方向还有 Serverless、FaaS 等方向。另一方面也有人再重新关注单体系统的开发，我们认为技术架构应该是服务业务的，根据不同的业务类型选择正确的技术栈是每个架构师应该具备的能力。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qqw80y/1617368744569-dcdb5790-f824-4e92-acf3-7418626145f1.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qqw80y/1617368744561-85ff1c5e-b8cb-47b5-a694-02c18c91f507.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qqw80y/1617368744564-b1293d93-92da-4485-9ca9-d506cc2852b3.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qqw80y/1617368744550-be650970-8462-4723-b1d9-f2295ba2c1b5.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qqw80y/1617368744560-7fe7fee6-28a5-40b5-9fbc-579dd72f33f5.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qqw80y/1617368744542-7f4f869a-a832-4747-b227-fa0b86cca182.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qqw80y/1617368744556-dc3f1543-3303-4d13-a5c0-45a295856e15.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qqw80y/1617368744546-db34bafc-8339-43e0-a6c1-f214c83b1f12.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qqw80y/1617368744551-e5e7434c-1b61-4aee-b687-7514633c2ca4.png" alt="">&lt;/p></description></item><item><title>Docs: MIT 开源许可证</title><link>https://desistdaydream.github.io/docs/Standard/MIT-%E5%BC%80%E6%BA%90%E8%AE%B8%E5%8F%AF%E8%AF%81/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/Standard/MIT-%E5%BC%80%E6%BA%90%E8%AE%B8%E5%8F%AF%E8%AF%81/</guid><description>
&lt;p>这一回终于把 MIT 协议讲明白了&lt;/p>
&lt;p>以下文章来源于微月人话 ，作者卫 sir&lt;/p>
&lt;p>微月人话&lt;/p>
&lt;p>简单而深入&lt;/p>
&lt;p>以前看到过李笑来讲的发生在他身上的故事，说他当年 ( 2001 年 ) 住在双榆树，经常去双安商场的地下超市买东西，有一次买了个什么东西觉得不好，要退，超市服务员说按规定，该类商品售出一概不能退，李笑来大怒，说你把书面规定拿出来，有的话我就不退了，如果没有，那我就一定要退，最后叫来了超市经理，经理一看这来者不善啊，也吵不过李笑来，就给退了。&lt;/p>
&lt;p>讲这个故事想说明什么呢，其实我们都明白，20 多年前的中国超市，很多管理规定都是口头上的，怎么会写成白纸黑字呢。&lt;/p>
&lt;p>从超市服务员的角度看，李笑来这行为就是捣乱，是胡搅蛮缠；李笑来则肯定觉得是在维护自己正当的消费者权益；最受震动的应该是超市管理层，如果是我，我会立刻要求起草一个关于退换货的规定，我可真不想再遇到下一个这样的人。&lt;/p>
&lt;p>这就是契约精神，说好的，都写下来，写下来的，我都认。&lt;/p>
&lt;p>现在说 MIT 协议。&lt;/p>
&lt;p>MIT 协议就是大名鼎鼎的开源软件许可协议 The MIT License，又称 MIT 许可证。&lt;/p>
&lt;p>有人在两年前专门做过分析 1，MIT 是 Github 上使用率最高的许可证，第二名到第五名是 Apache 2.0、GPL 2.0、GPL 3.0 和 bsd-3-clause。&lt;/p>
&lt;p>注：本文中，“MIT 协议”和“MIT 许可证”等同。&lt;/p>
&lt;p>什么是开源许可证？&lt;/p>
&lt;p>开源许可证是这样的，我把源码放网上了，如果还不错，就有很多人问我了，说你那个代码能不能让我用用？你那个代码我能不能放在我的产品里啊？你那个代码我用了，怎么那么多 Bug 啊？你那个代码我想当作教学案例使用，请问是不是可以啊？还有，你那个代码我用了，感觉不错，而且我还改了很多地方，我也把它放网上了，而且我还改了个名，你没有意见吧？你有意见我也准备改名了，因为现在这个软件中，我写的代码，比你写的多多了！&lt;/p>
&lt;p>（这都是比较有版权意识的，怕不问你就用以后惹上官司。）&lt;/p>
&lt;p>我可懒得回答这么多问题，我把这些可能问到的问题，都写成一段话，放在我的代码里，意思就是说：&lt;/p>
&lt;p>我允许你们 XXX，我许可你们 XXXX，你们可以 XXXX，但是，你们必须 XXXX，如果你们 XXXX 了，你们就必须 XXXX，对了，对于 XXXX 这些情况，我可不负责。&lt;/p>
&lt;p>你要同意，就用，不同意就别用。如果你用了，但违反了许可证的要求，我可能会告你啊！&lt;/p>
&lt;p>这就是许可证。&lt;/p>
&lt;p>你可以自己写一个许可证，但是如果你很懒的话 ( 一般人都很懒 ) ，你可以用别人写的比较好的许可证。&lt;/p>
&lt;p>写的比较好的开源许可证有很多种，比如 GPL、BSD、MIT、Apache 等等，MIT 只是其中的一个。&lt;/p>
&lt;p>你可以挑一个合你胃口的，这些许可证模版都是免费的，毕竟也没人指望这个卖钱。&lt;/p>
&lt;p>至于它们的区别，可以看看下面这张图接受一下科普。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/tamq2d/1616161654522-76d7d7b6-c4cd-4bbc-87b4-835c7eb24fcb.jpeg" alt="">&lt;/p>
&lt;p>“新蜂商城”事件&lt;/p>
&lt;p>前段时间有一个叫做“新蜂商城”（简称“新蜂”）的开源项目有点新闻，它使用了 MIT 许可证，其作者被人告知说，哎，你的开源软件被人在网上卖哎，你不管管吗？&lt;/p>
&lt;p>作者一看，还真是，有 up 主在 b 站上卖，有人在闲鱼上卖，虽然卖的也不贵，有卖 300 的，有卖几十的，但一眼望过去，很显然卖的就是自己的“新蜂”嘛！&lt;/p>
&lt;p>具体可以戳这里 -&amp;gt; ……这是什么骚操作&lt;/p>
&lt;p>然后就有点热闹，有人说这是侵权，要声援作者，控诉有人如此无耻；有人说这不算侵权，MIT 是很宽松的协议，基本上你什么都可以干，只要保留作者版权即可。&lt;/p>
&lt;p>作者倒是没有想去怎么处理，作者只是觉得“我抽出下班时间，断断续续写了半年的项目，不是心血也算是我的小作品吧，开源出去就是给你这么玩的？佩服。”&lt;/p>
&lt;p>大概作者还是比较年轻，不懂人世间的险恶吧！&lt;/p>
&lt;p>其实这应该是预料中的事。&lt;/p>
&lt;p>不应该有任何心理波澜。&lt;/p>
&lt;p>更何况，MIT 许可证，允许别人卖你的源码！&lt;/p>
&lt;p>从契约精神讲，说好允许别人做，就让别人做吧。&lt;/p>
&lt;p>这里面有个新手不太能想明白的问题，为啥有许可证允许别人卖自己的开源软件？&lt;/p>
&lt;p>这要谈到开源的精神了，还没有一点概念的读者可以先看看这篇：开源的 7 大理念&lt;/p>
&lt;p>早期玩开源的人，开源自己的代码，大多不是为了卖软件，大多都有着开放、共享、自由、打破垄断等等比较理想化的情结，唯一可图的大概也就是个“名”，所以几乎所有许可证都要求保留作者名字。&lt;/p>
&lt;p>为了更好地传播自己的代码，开源作者通常允许别人卖自己的源码。初期会考虑这样的情况：如果有人把 Linux 源码刻录成光盘发放，是不是应该收点成本费呢，再或者服务费？&lt;/p>
&lt;p>那如果有人以此牟取暴利呢，岂不是很亏？通常不会。因为既然能在网上免费下载源码，明白人就不会再去花大价钱去买。&lt;/p>
&lt;p>而且，如果作者发现真有人能使用自己的源码牟取暴利，完全可以不授权让他从中牟利，改许可证就可以了。这种事也不是没有发生过，而且还不是个例。参见开源公司被云厂商“寄生”，咋整？&lt;/p>
&lt;p>比如开源云原生 SQL 数据库 CockroachDB 宣布修改开源协议，从原本的 Apache-2.0 协议修改为 BSL ( Business Source License ) ，该协议要求用户唯一不能做的是在没有取得授权的情况下以商业形式用 CockroachDB 提供数据库即服务 ( DBaaS ) 。&lt;/p>
&lt;p>BSL 由 MySQL 的开发者迈克尔·蒙蒂·维德纽斯 ( Michael &amp;ldquo;Monty&amp;rdquo; Widenius ) 在 2013 年设计。它有三个主要特点，一是非商业性使用没有限制，商业性使用有限制；二是许可证中可以附加使用者自己的要求；三是有一个 change date，自此时间开始，源码将会由 BSL 转变为作者指定的其他许可证，如 GPL 等开源许可证。&lt;/p>
&lt;p>依我看，闲鱼上把“新蜂”卖个几十块钱，还搭上售后服务，也算正常吧。&lt;/p>
&lt;p>MIT 到底说了什么 ( 学英语！)&lt;/p>
&lt;p>先看原文：&lt;/p>
&lt;p>Copyright ( C )&lt;/p>
&lt;p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files ( the &amp;ldquo;Software&amp;rdquo; ) , to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p>
&lt;p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p>
&lt;p>THE SOFTWARE IS PROVIDED &amp;ldquo;AS IS&amp;rdquo;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p>
&lt;p>英语不好的直接晕倒！&lt;/p>
&lt;p>英语就算还可以的，想弄明白，也得看好一阵！&lt;/p>
&lt;p>剖析其句子结构，其实就是下面这样的，注意放在括号里面的，都不是句子的主干成分：&lt;/p>
&lt;p>第一段：&lt;/p>
&lt;p>Permission is ( hereby ) granted ( , free of charge, ) to any person ( obtaining a copy of ( this software and associated documentation files ( the &amp;ldquo;Software” ) ) ) , to deal in the Software without restriction, ( including without limitation the rights ( to use, copy, modify, merge, publish, distribute, sublicense, ( and/or ) sell copies of the Software, and to permit persons ( to whom the Software is furnished ) to do so ) ) , subject to the following conditions:&lt;/p>
&lt;p>其大致意思就是：只要满足以下条件，许可被赋予任何 ( 获得本软件拷贝及相关文档的 ) 人 ，这些人可以免费地、没有限制地处理本软件 ( 包括随意地使用、拷贝、合并、发布、分发、再许可、卖拷贝，以及再授权其他人 ( 那些被装配了本软件的 ) 做上面说的这些事 ) 。&lt;/p>
&lt;p>注意，and to permit persons 这里的 to permit，是和 to use，to copy 并列的，后面那个 to do so，则是指代前面的的一系列权利，to whom the Software is furnished 是修饰 persons 的，指的是被装配、被配发本软件的人。&lt;/p>
&lt;p>再有一点比较有趣的是，这一长段被许可的选项中，后面出现了个 and/or。&lt;/p>
&lt;p>and/or 一般用于连接两个选项，比如 A and/or B，意思就是说 A or B or both。这段文字中，虽然 and/or 只连接最后两个选项，但其用意似乎却是连接所有。比如：A, B, C, D and/or E，想表达的是：A and/or B and/or C and/or D and/or E，意思就是 A、B、C、D、E 这些选项可以任意组合选用。这个写法貌似严谨，实则多余。因为没有它完全不影响对文本意思的理解，有了它反而还增加了疑惑。（在文学上或是法律用语上，对 and/or 用法的批评都比较多 2。）&lt;/p>
&lt;p>第二段：&lt;/p>
&lt;p>The above copyright notice and this permission notice shall be included ( in all ( copies or substantial portions ) of the Software ) .&lt;/p>
&lt;p>上面这句翻译过来就是：以上版权声明和许可声明都必须包含 ( 在所有的本软件的完整拷贝或者实质性成分中 ) 。所谓实质性成分，可以这样理解，比如你对这个软件做了修改，但只改了 5%，那么版权声明和许可证声明都必须包含，如果你改了 95%，那就未必需要了，具体多少需要，要看是不是实质上 ( substantially ) 仍然是人家的。&lt;/p>
&lt;p>第三段：&lt;/p>
&lt;p>THE SOFTWARE IS PROVIDED &amp;ldquo;AS IS”, ( WITHOUT WARRANTY OF ANY KIND ( , EXPRESS OR IMPLIED, ) ( INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. ) ） IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE ( FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, ( WHETHER ( IN AN ACTION OF CONTRACT, TORT ) OR OTHERWISE ( , ARISING FROM, OUT OF OR IN CONNECTION WITH ( THE SOFTWARE OR ( ( THE USE OR OTHER DEALINGS ) IN THE SOFTWARE. ) ) ) ) )&lt;/p>
&lt;p>这段话，主要是说本软件是“AS IS”的，“AS IS”的意思就是“就这样的”，售出 ( 或免费提供 ) 后一概不负任何责任，“别再找我，就这样了”。有任何问题你就接受或者自己想办法处理吧，反正我这里不再管了，就是这个意思。有时候我在“闲鱼”上卖二手东西的时候，也真的想加一个标识“AS IS”，但是考虑到很多人不知道这个词，也就算了。&lt;/p>
&lt;p>上面这段全大写的英文很长，但还好，不算很难，基本上就是：本软件是 AS IS 的 ( 不提供任何保证， ( 不管是显式的还是隐式的，包括但不限于适销性保证、适用性保证、非侵权性保证 ) ) ，在任何情况下， ( 对于任何的权益追索、损失赔偿或者任何追责 ) ，作者或者版权所有人都不会负责。( 无论这些追责产生自合同、侵权，还是直接或间接来自于本软件以及与本软件使用或经营有关的情形 )&lt;/p>
&lt;p>适销性 ( MERCHANTABILITY ) 就是说商品一旦售出 ( 虽然可能是免费的 ) ，如果确有问题，就可以退换货，一般来说适销性是缺省的保证 ( 即便没有明示 ) ，法律会支持消费者对不合格产品的退换货权利 3。但对于 AS IS 这类商品而言，就是说你觉得不好使也别找我。你觉得根本没法用 ( FITNESS FOR A PARTICULAR PURPOSE ) 也别找我，而且我也不保证我这软件是不是侵权了。&lt;/p>
&lt;p>MIT 协议用了几乎一半的篇幅来说这个，足以见其重要性，这是西方人很强的商品经济意识和法律意识导致的。&lt;/p>
&lt;p>这是一种撇清关系的态度，就是说，出了什么事都别找我，更别去法院告我。我给你们贡献源码，可不是想给自己找麻烦的，我又不挣你们的钱。&lt;/p>
&lt;p>试想一下，如果在一个医疗设备的软件中，使用了“本软件”，结果由于 bug 导致医疗事故，结果追查下来，还要找我麻烦，那我怎么受得了！&lt;/p>
&lt;p>把这个 license 里所有的主干挑出来，其实就是：&lt;/p>
&lt;p>Permission is granted to any person to deal in the Software without restriction，subject to the following conditions:&lt;/p>
&lt;p>The above copyright notice and this permission notice shall be included.&lt;/p>
&lt;p>THE SOFTWARE IS PROVIDED &amp;ldquo;AS IS&amp;rdquo;, IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE.&lt;/p>
&lt;p>全文翻译过来，大约是这样，下面译版的版权归我哦：&lt;/p>
&lt;p>MIT 开源许可协议 ( 中文版翻译：卫 sir，遵循：CC-BY 协议 )&lt;/p>
&lt;p>版权 ( C ) &amp;lt;这里填年份&amp;gt; &amp;lt;这里填版权者姓名&amp;gt;&lt;/p>
&lt;p>特此向任何得到本软件拷贝及相关文档 ( 以下统称“本软件” ) 的人授权：被授权人有权使用、复制、修改、合并、发布、发行、再许可、售卖本软件拷贝、并有权向被供应人授予同等的权利，但必须满足以下条件：&lt;/p>
&lt;p>在本软件的所有副本或实质性使用中，都必须包含以上版权声明和本授权声明。&lt;/p>
&lt;p>本软件是“按原样“提供的，不附带任何明示或暗示的保证，包括没有任何有关适销性、适用性、非侵权性保证以及其他保证。在任何情况下，作者或版权持有人，对任何权益追索、损害赔偿以及其他追责，都不负任何责任。无论这些追责产生自合同、侵权，还是直接或间接来自于本软件以及与本软件使用或经营有关的情形。&lt;/p>
&lt;p>翻译成大白话缩略版，大约是下面这样的：&lt;/p>
&lt;p>版权是我 XXX 的，源自 XXXX 这一年！&lt;/p>
&lt;p>我授权任何人，可以干任何事，包括卖拷贝！&lt;/p>
&lt;p>但是，你必须：&lt;/p>
&lt;p>保留我的版权和许可！&lt;/p>
&lt;p>这软件就这样的！爱用不用，出了事别找我！&lt;/p>
&lt;p>我怎么用人家代码才算合规？&lt;/p>
&lt;p>使用一个用了 MIT 协议的源代码，你只需要保留人家的版权和许可证信息即可。&lt;/p>
&lt;p>也就是说要包含 LICENSE 文件，这个文件有完整的 MIT 许可证，其中也会有作者的版权信息。&lt;/p>
&lt;p>人家源码里面的版权和许可信息头，你也得保留。&lt;/p>
&lt;p>由于 MIT 协议并不要求使用者公开源码，如果你发行的仅仅是可执行软件（不带源码），那就要在软件的某个界面上说明。&lt;/p>
&lt;p>比如 Google Chrome 浏览器使用很多开源软件，在其界面中都予以了明示。&lt;/p>
&lt;p>在 Chrome 浏览器的“关于”中，有一句话：“Google Chrome 的诞生离不开 Chromium 开源项目以及其他开源软件。”&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/tamq2d/1616161654514-af86080c-b38d-410b-87da-382264e29ef2.jpeg" alt="">&lt;/p>
&lt;p>点击“开源软件”，会打开一个页面，列出了一长串的开源软件、其 LICENSE 和主页（或代码托管地）。&lt;/p>
&lt;p>下面是部分截图：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/tamq2d/1616161654516-35908e7c-5b5c-4806-8bc9-0563ea70d0e9.jpeg" alt="">&lt;/p>
&lt;p>这就很规范了。&lt;/p>
&lt;p>我在里面随便找个一个使用 MIT 协议的软件：brotli&lt;/p>
&lt;p>进入其代码仓库后，可以看到其源码头部是这么写的。&lt;/p>
&lt;p>/* Copyright 2013 Google Inc. All Rights Reserved.&lt;/p>
&lt;p>Distributed under MIT license.&lt;/p>
&lt;p>See file LICENSE for detail or copy at &lt;a href="https://opensource.org/licenses/MIT">https://opensource.org/licenses/MIT&lt;/a>&lt;/p>
&lt;p>*/&lt;/p>
&lt;p>截图如下：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/tamq2d/1616161654546-2a9951cc-1854-40fc-ab21-8a040710fcfa.jpeg" alt="">&lt;/p>
&lt;p>注意这个用法，第一行是写明了版权，下面则是对 MIT 许可证的一个引用。这样显得比较简洁。&lt;/p>
&lt;p>毕竟 MIT 许可证中唯一需要填写的就是版权。所以把第一句的信息放这里就可以了，MIT 许可证就不用动了。&lt;/p>
&lt;p>注意版权是指这个软件的著作权是谁的，许可证是指版权所有者允许别人怎么用这个软件。&lt;/p>
&lt;p>版权后面那句“All Rights Reserved”写不写都可以，这只是一个形式。真打到法院去，所有的权利都遵循著作权相关法律。&lt;/p>
&lt;p>顺便解释一下版权中的年份概念：&lt;/p>
&lt;p>软件在发布时都会声明版权，其中会包含年份，比如 Copyright 2012， Copyright 2008-2012 等。如果只包含一个年份，说明这是首次发布的年份。如果包含时间段，则第一个年份为第一次发布的年份，第二个是当前版本发布的年份。&lt;/p>
&lt;p>比如微软的 Windows XP 版权声明：Copyright© 1985-2001 Microsoft Corp。说明 Windows 第一个版本发布在 1985 年，Windows XP 版本发布年份为 2001 年。&lt;/p>
&lt;p>我是作者，我如何使用 MIT 协议&lt;/p>
&lt;p>如果我的开源软件要使用 MIT 协议，我应该怎么做？&lt;/p>
&lt;p>通常应该这么做：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>在一级目录下，给出一个 LICENSE（或 COPYING）文件，里面就是这个许可证的全文。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在所有的源码头部，说明版权，说明许可。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>注：有的项目使用了多个许可证，会建一个 licenses 目录放这些许可证。（比如 cockroachdb）&lt;/p>
&lt;p>版权那一行，你还可以写上你软件的主页或者代码存放地，一般来说，使用者都不应该删除这行内容的。&lt;/p>
&lt;p>举个例子，“木兰许可证”是这样指导人们使用的：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/tamq2d/1616161654557-38671027-cd5b-405c-8ac4-7daac1cc0b96.jpeg" alt="">&lt;/p>
&lt;p>那么，“新蜂”是怎么做的？&lt;/p>
&lt;p>我专门去“新蜂”的 github 仓库看了一眼，没错，作者在一级目录下放了 LICENSE 文件。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/tamq2d/1616161654543-b5460bf5-e188-422f-ac69-9e867e9216bb.jpeg" alt="">&lt;/p>
&lt;p>打开 LICENSE 文件，可以看到：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/tamq2d/1616161654557-3d9aa8cf-b207-4ac5-a2fd-fd8a04c0fd9c.jpeg" alt="">&lt;/p>
&lt;p>年份写成了 2019-2029，版权所有人写成了 newbee-mall。&lt;/p>
&lt;p>这是需要改进的，年份不应该写到 2029 去，应该写到当前版本发布的年份。&lt;/p>
&lt;p>版权所有人应该写作者“十三”（或“13”）而不是软件的名字。&lt;/p>
&lt;p>看看源码里面是怎么写的：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/tamq2d/1616161654547-b5472820-8f0a-431b-ac22-f5dec273610f.jpeg" alt="">&lt;/p>
&lt;p>翻了一遍，没有发现在任何源码的头部有版权和许可信息，这个做法也不规范。&lt;/p>
&lt;p>可见，作者十三对开源许可证并没有研究过。&lt;/p>
&lt;p>一些问题解答&lt;/p>
&lt;p>我能改许可证吗？ 当然可以。（MIT 允许你干任何事）&lt;/p>
&lt;p>所以说，MIT 协议和其他协议的兼容性很强（其实是单向兼容），比如，完全可以把一个 MIT 协议的软件改为 GPL 的，但一个 GPL 的可改不回 MIT 的。&lt;/p>
&lt;p>我能自己写一个许可证吗？ 当然可以。&lt;/p>
&lt;p>我能不写任何许可吗？ 当然可以，不写许可，就是“保留所有权利”。你可以让他们打电话问你，写邮件问你，发微信问你，你再告诉他们可以干什么。&lt;/p>
&lt;p>保留许可的意思基本上就是说，他们除了可以看你的源码 ( 因为你自己把它开源了 ) ，除了著作权法里面说的权利，基本上啥也不能干。&lt;/p>
&lt;p>如果我保留所有权利，那他有运行的权利吗？ 如果他是为了学习、研究或者欣赏，是可以运行的。&lt;/p>
&lt;p>他还可以评论您的软件。&lt;/p>
&lt;p>因为我国著作权法赋予了他这样的权利：&lt;/p>
&lt;p>现行的中华人民共和国著作权法 ( 2010 修正 ) 第二十二条中规定：&lt;/p>
&lt;p>在下列情况下使用作品，可以不经著作权人许可，不向其支付报酬，但应当指明作者姓名、作品名称，并且不得侵犯著作权人依照本法享有的其他权利：&lt;/p>
&lt;p>( 一 ) 为个人学习、研究或者欣赏，使用他人已经发表的作品；&lt;/p>
&lt;p>( 二 ) 为介绍、评论某一作品或者说明某一问题，在作品中适当引用他人已经发表的作品；&lt;/p>
&lt;p>……&lt;/p>
&lt;p>如果有人没有按照我的许可做，怎么办？ 你可以告他。&lt;/p>
&lt;p>不过，能不能打赢官司又是另一个话题了！&lt;/p>
&lt;hr>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="https://www.kaggle.com/mrisdal/safely-analyzing-github-projects-popular-licenses">https://www.kaggle.com/mrisdal/safely-analyzing-github-projects-popular-licenses&lt;/a> ↩&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/And/or">https://en.wikipedia.org/wiki/And/or&lt;/a> ↩&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://consumer.findlaw.com/consumer-transactions/what-is-the-warranty-of-merchantability.html">https://consumer.findlaw.com/consumer-transactions/what-is-the-warranty-of-merchantability.html&lt;/a> ↩&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>推荐阅读&lt;/p>
&lt;p>树莓派销量突然猛增&lt;/p>
&lt;p>80%的代码曾由一人提交，这项目何以从 ASF 毕业&lt;/p>
&lt;p>红帽借“订阅”模式成开源一哥，首创者升任总裁&lt;/p>
&lt;p>Git 15 周年：当年的分道扬镳，成就了今天的开源传奇&lt;/p>
&lt;p>Windows 中现在有独立的 Linux 文件夹系统&lt;/p></description></item><item><title>Docs: 南北流量和东西流量</title><link>https://desistdaydream.github.io/docs/Standard/%E5%8D%97%E5%8C%97%E6%B5%81%E9%87%8F%E5%92%8C%E4%B8%9C%E8%A5%BF%E6%B5%81%E9%87%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/Standard/%E5%8D%97%E5%8C%97%E6%B5%81%E9%87%8F%E5%92%8C%E4%B8%9C%E8%A5%BF%E6%B5%81%E9%87%8F/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>在 Service Mesh 微服务架构中，我们常常会听到东西流量和南北流量两个术语。&lt;/p>
&lt;p>南北流量（NORTH-SOUTH traffic）和东西流量（EAST-WEST traffic）是数据中心环境中的网络流量模式。下面我们通过一个例子来理解这两个术语。&lt;/p>
&lt;p>假设我们尝试通过浏览器访问某些 Web 应用。Web 应用部署在位于某个数据中心的应用服务器中。在多层体系结构中，典型的数据中心不仅包含应用服务器，还包含其他服务器，如负载均衡器、数据库等，以及路由器和交换机等网络组件。假设应用服务器是负载均衡器的前端。&lt;/p>
&lt;p>当我们访问 web 应用时，会发生以下类型的网络流量：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>客户端（位于数据中心一侧的浏览器）与负载均衡器（位于数据中心）之间的网络流量&lt;/p>
&lt;/li>
&lt;li>
&lt;p>负载均衡器、应用服务器、数据库等之间的网络流量，它们都位于数据中心。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>南北流量&lt;/p>
&lt;p>在这个例子中，前者即即客户端和服务器之间的流量被称为南北流量。简而言之，南北流量是 server-client 流量。&lt;/p>
&lt;p>东西流量&lt;/p>
&lt;p>第二种流量即不同服务器之间的流量与数据中心或不同数据中心之间的网络流被称为东西流量。简而言之，东西流量是 server-server 流量。&lt;/p>
&lt;p>当下，东西流量远超南北流量，尤其是在当今的大数据生态系统中，比如 Hadoop 生态系统（大量 server 驻留在数据中心中，用 map reduce 处理），server-server 流量远大于 server-client 流量。&lt;/p>
&lt;p>大家可能会好奇，东西南北，为什么这么命名。&lt;/p>
&lt;p>该命名来自于绘制典型 network diagrams 的习惯。在图表中，通常核心网络组件绘制在顶部（NORTH），客户端绘制在底部（SOUTH），而数据中心内的不同服务器水平（EAST-WEST）绘制。&lt;/p></description></item></channel></rss>