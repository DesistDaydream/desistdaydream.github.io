<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>📐Standard on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/Standard/</link><description>Recent content in 📐Standard on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/Standard/index.xml" rel="self" type="application/rss+xml"/><item><title>Glossary</title><link>https://desistdaydream.github.io/docs/Standard/Glossary/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/Standard/Glossary/</guid><description>概述 参考：
Wiki, Glossary Wiki, Standardization Standard(标准) 与 Standardized(标准化)
Standardized 更多用来行用指定标准的过程 Standard 是经过标准化后产生的结果，已经定义好的标准是在 执行、构建、生产 各种 任务、流程、产品 时的最佳方式或期望 学习某项技术时，有些名词，比如某某可以是技术、规范、标准、行为、协议(协议其实从广义角度看也是标准)、等。
IDC https://en.wikipedia.org/wiki/Data_center
Internet data center(互联网数据中心，简称 IDC)，也可以简称为 Data center(数据中心)，并不用只限制在互联网。IDC 是一座建筑物、建筑物内的专用空间或一组建筑物，用于容纳计算机系统和相关设备。通常用于对外或对内提供 计算、存储、通信 这最基本的三大能力。
ISP https://en.wikipedia.org/wiki/Internet_service_provider
Internet service provider(互联网服务提供商，简称 ISP) 是提供访问、使用、管理或参与 Internet 服务的组织。 ISP 可以以多种形式组织，例如商业、社区所有、非营利或其他私人所有。比如 中国移动、中国联通、中国电信、etc. 都属于 ISP
版本信息 英文 中文 缩写 说明 Portable 便携式、可移植 一个程序如果不需要安装，直接使用二进制文件运行，通常称为 Portable。 全部 英文 中文 缩写与简称 链接 解释 5-tuple 五元组 RFC 6146 源 IP，源 PORT，目的 IP，目的 PORT，传输层协议，这五个量组成的一个集合 Advanced Telecommunications Computing Architecture 高级电信计算架构 ATCA Wiki atca架构本身就是一组工业标准框架，只要是基于这个国际统一标准做的板卡都可以集成到一起 Architecture 架构 arch Broadband Remote Access Server 宽带远程接入服务器 BRAS Wiki 是一种用于管理和控制带宽接入用户的网络设备 Call detail record 通话详细记录 CDR Wiki 中文常简称为 &amp;ldquo;话单&amp;rdquo;。随着发展，话单的含义也逐步扩展，包含了不止是通话的详细信息。有时候也用 xDR 描述。 Data Plane Development Kit 数据平面开发套件 DPDK DPDK Deep packet inspection 深度数据包检测 DPI DPI Call Detail Record 通话详细记录 CDR(话单) CDR 后期随着发展该名词逐渐包含了 网络、等 通信之间的详细记录，而不是单指通话。可以写为 xDR(wiki 上没有 xDR，自己造的) Cyberspace Situation Awareness 网络态势感知 CSA Mellanox Technologies 一家以色列裔美国跨国供应商，提供基于 InfiniBand 和以太网技术的计算机网络产品。Mellanox 为高性能计算、数据中心、云计算、计算机数据存储和金融服务 Remote Authentication Dial-In User Service 远程用户拨号认证 RADIUS Wiki Situational awareness 态势感知 SA Wiki Service Level Indicator 服务等级指标 SLI Sevice Level Objective 服务等级目标 SLO Switched Port Analyzer SPAN Transaction</description></item><item><title>常用英文</title><link>https://desistdaydream.github.io/docs/Standard/%E5%B8%B8%E7%94%A8%E8%8B%B1%E6%96%87/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/Standard/%E5%B8%B8%E7%94%A8%E8%8B%B1%E6%96%87/</guid><description>概述 参考：
B 站，TED中字：如何在3个月内学会任何外语并且永远不会忘记?
https://www.bilibili.com/read/cv7989082/
https://zhuanlan.zhihu.com/p/364365898
具有多个发音的字母:
a、e c、g、x、y c 在单词里总共存在四种可能的读音，包括 /k/、/s/、/ʃ/ 和 /tʃ/。
发 /k/ 音 当字母c位于词尾 当字母c位于词首或词中时 如果后跟辅音字母或者元音字母 a, o, u 其中的一个，没有例外。 发 /s/ 音 当字母c位于词首或词中时 如果后跟元音字母 y，没有例外 当字母c的后面只有一个元音字母，它或者是 e 或者是 i，再之后就是辅音字母或者什么都没有了（也就是单词结束了）。 tion, sion, cian 发 /ʃ(ə)n/
I fear your lust for power could get the better of you. You are a hero, not a politician.
编程 英文 中文 缩写 说明 Implementation 实现 impl Go 编程语言中用于表示实现了某个接口的结构体。Implement, Implementing SUITE 复数为 suites，在计算机领域翻译为程序组。通常用于描述一个程序的执行单元。suite 可能是一个函数或者一个脚本，它包含了一系列的语句，这些语句通常在一个缩进的代码块中，这个代码块的开始和结束都使用了相同的缩进级别 Compile 编译 Compiler 编译器 Bundle 打包 常见于前端，与后端编译不同，前端通常是将多个文件打包成一个文件，所以使用 Bundle 而不是 Compile Bundler 打包器 常见缩写 英文 中文 缩写 Business 业务 BIZ Management 管理 MGMT Protocol 协议 符号的英语名称 参考：</description></item><item><title>B_S 和 C_S 架构</title><link>https://desistdaydream.github.io/docs/Standard/B_S-%E5%92%8C-C_S-%E6%9E%B6%E6%9E%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/Standard/B_S-%E5%92%8C-C_S-%E6%9E%B6%E6%9E%84/</guid><description>概述 参考：
Service Side 与 Client Side 参考：
Wiki, Server Side Wiki, Client Side Client/Server 结构(C/S 结构) 是大家熟知的 Client Side(客户端) 与 Server Side(服务端) 结构。它是软件系统体系结构，通过它可以充分利用两端硬件环境的优势，将任务合理分配到 Client Side 和 Server Side 来实现，降低了系统的通讯开销。目前大多数应用软件系统都是 Client/Server 形式的两层结构，由于现在的软件应用系统正在向分布式的 Web 应用发展，Web 和 Client/Server 应用都可以进行同样的业务处理，应用不同的模块共享逻辑组件；因此，内部的和外部的用户都可以访问新的和现有的应用系统，通过现有应用系统中的逻辑可以扩展出新的应用系统。这也就是目前应用系统的发展方向。
B/S 结构（Browser/Server，浏览器/服务器模式），是 WEB 兴起后的一种网络结构模式，WEB 浏览器是客户端最主要的应用软件。这种模式统一了客户端，将系统功能实现的核心部分集中到服务器上，简化了系统的开发、维护和使用。客户机上只要安装一个浏览器（Browser 英 [&amp;lsquo;braʊzə]美 [&amp;lsquo;braʊzɚ]），如 Netscape Navigator 或 Internet Explorer，服务器安装 SQL Server、Oracle、MYSQL 等数据库。浏览器通过 Web Server 同数据库进行数据交互。
Apache 是普通服务器，本身只支持 html 即普通网页。不过可以通过插件支持 php,还可以与 Tomcat 连通(单向 Apache 连接 Tomcat,就是说通过 Apache 可以访问 Tomcat 资源。反之不然)。Apache 只支持静态网页，但像 php,cgi,jsp 等动态网页就需要 Tomcat 来处理。 Tomcat 是由 Apache 软件基金会下属的 Jakarta 项目开发的一个 Servlet 容器，按照 Sun Microsystems 提供的技术规范，实现了对 Servlet 和 JavaServer Page（JSP）的支持，并提供了作为 Web 服务器的一些特有功能，如 Tomcat 管理和控制平台、安全域管理和 Tomcat 阀等。由于 Tomcat 本身也内含了一个 HTTP 服务器，它也可以被视作一个单独的 Web 服务器。但是，不能将 Tomcat 和 Apache Web 服务器混淆，Apache Web Server 是一个用 C 语言实现的 HTTP web server；这两个 HTTP web server 不是捆绑在一起的。Apache Tomcat 包含了一个配置管理工具，也可以通过编辑 XML 格式的配置文件来进行配置。Apache，nginx，tomcat 并称为网页服务三剑客，可见其应用度之广泛。（说白了，tomcat 就是个底层设施软件服务，网页上所有的东西就要放在 tomcat 上，别人才能通过 tomcat 访问，tomcat 占用 80 端口）</description></item><item><title>中国行政区划及代码</title><link>https://desistdaydream.github.io/docs/Standard/%E4%B8%AD%E5%9B%BD%E8%A1%8C%E6%94%BF%E5%8C%BA%E5%88%92%E5%8F%8A%E4%BB%A3%E7%A0%81/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/Standard/%E4%B8%AD%E5%9B%BD%E8%A1%8C%E6%94%BF%E5%8C%BA%E5%88%92%E5%8F%8A%E4%BB%A3%E7%A0%81/</guid><description>概述 参考：
GB/T 2260-2007 中华人民共和国行政区划代码 国家统计局，统计用区划代码和城乡划分代码 国家统计局，统计用区划代码和城乡划分代码编制规则 GitHub 项目，modood/Administrative-divisions-of-China</description></item><item><title>Agent 与 Proxy</title><link>https://desistdaydream.github.io/docs/Standard/Agent-%E4%B8%8E-Proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/Standard/Agent-%E4%B8%8E-Proxy/</guid><description>今天，在阅读 Jolokia 文档的时候，看到其支持两种架构模式： Agent Mode 与 Proxy Mode。从字面上理解，agent 与 proxy 都有代理的意思，那么它们在内涵上到底有什么不同的，值得思考。
Agent Mode
Proxy Mode
从上面两张图可以看出，Proxy 与 Agent 所处的位置和目的有所不同，Agent 处在被代理对象的内部，而 Proxy 与被代理对象之间处于一种相对独立的状态。
举个例子，Proxy 类似于会计事务所，而 Agent 类似于公司里做会计工作的员工，它们都是处理企业的财务问题，但是角色不同。
Agent 代理 通常指与用户接口的客户端程序
Proxy 代理 接收用户请求并将请求发给服务器,然后接收服务器回应并返回给用户 实际上 Proxy 的功能就是代替用户访问服务器,用户被隐藏.
The Etymology of &amp;ldquo;Agent&amp;rdquo; and &amp;ldquo;Proxy&amp;rdquo; in Computer Networking Discourse 原文: https://cyber.harvard.edu/archived_content/people/reagle/etymology-agency-proxy-19981217.html
September 18, 1998. _Joseph Reagle _ Revised: January 15, 1999 .
Given that the topic of this paper addresses both computer and legal agency, we believe an examination of the usage of the terms &amp;ldquo;agent&amp;rdquo; and &amp;ldquo;proxy&amp;rdquo; within each field is instructive.</description></item><item><title>Architecture(架构)</title><link>https://desistdaydream.github.io/docs/Standard/Architecture%E6%9E%B6%E6%9E%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/Standard/Architecture%E6%9E%B6%E6%9E%84/</guid><description>概述 参考：
Wiki, Computer Architecture 各行各业微服务技术架构图分享 包含：智慧仓储#docker#部署图、通用微服务架构图、物联网终端微服务架构图、平台微服务技术架构、基于#SpringCloud#的微服务架构图、基于 SpringCloud 的微服务电商系统架构图、#k8s#云原生架构图、#云计算#总体架构和技术架构。
微服务不是架构演变的终极目标。最近比较流行的方向还有 Serverless、FaaS 等方向。另一方面也有人再重新关注单体系统的开发，我们认为技术架构应该是服务业务的，根据不同的业务类型选择正确的技术栈是每个架构师应该具备的能力。</description></item><item><title>MIT 开源许可证</title><link>https://desistdaydream.github.io/docs/Standard/MIT-%E5%BC%80%E6%BA%90%E8%AE%B8%E5%8F%AF%E8%AF%81/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/Standard/MIT-%E5%BC%80%E6%BA%90%E8%AE%B8%E5%8F%AF%E8%AF%81/</guid><description>这一回终于把 MIT 协议讲明白了
以下文章来源于微月人话 ，作者卫 sir
微月人话
简单而深入
以前看到过李笑来讲的发生在他身上的故事，说他当年 ( 2001 年 ) 住在双榆树，经常去双安商场的地下超市买东西，有一次买了个什么东西觉得不好，要退，超市服务员说按规定，该类商品售出一概不能退，李笑来大怒，说你把书面规定拿出来，有的话我就不退了，如果没有，那我就一定要退，最后叫来了超市经理，经理一看这来者不善啊，也吵不过李笑来，就给退了。
讲这个故事想说明什么呢，其实我们都明白，20 多年前的中国超市，很多管理规定都是口头上的，怎么会写成白纸黑字呢。
从超市服务员的角度看，李笑来这行为就是捣乱，是胡搅蛮缠；李笑来则肯定觉得是在维护自己正当的消费者权益；最受震动的应该是超市管理层，如果是我，我会立刻要求起草一个关于退换货的规定，我可真不想再遇到下一个这样的人。
这就是契约精神，说好的，都写下来，写下来的，我都认。
现在说 MIT 协议。
MIT 协议就是大名鼎鼎的开源软件许可协议 The MIT License，又称 MIT 许可证。
有人在两年前专门做过分析 1，MIT 是 Github 上使用率最高的许可证，第二名到第五名是 Apache 2.0、GPL 2.0、GPL 3.0 和 bsd-3-clause。
注：本文中，“MIT 协议”和“MIT 许可证”等同。
什么是开源许可证？
开源许可证是这样的，我把源码放网上了，如果还不错，就有很多人问我了，说你那个代码能不能让我用用？你那个代码我能不能放在我的产品里啊？你那个代码我用了，怎么那么多 Bug 啊？你那个代码我想当作教学案例使用，请问是不是可以啊？还有，你那个代码我用了，感觉不错，而且我还改了很多地方，我也把它放网上了，而且我还改了个名，你没有意见吧？你有意见我也准备改名了，因为现在这个软件中，我写的代码，比你写的多多了！
（这都是比较有版权意识的，怕不问你就用以后惹上官司。）
我可懒得回答这么多问题，我把这些可能问到的问题，都写成一段话，放在我的代码里，意思就是说：
我允许你们 XXX，我许可你们 XXXX，你们可以 XXXX，但是，你们必须 XXXX，如果你们 XXXX 了，你们就必须 XXXX，对了，对于 XXXX 这些情况，我可不负责。
你要同意，就用，不同意就别用。如果你用了，但违反了许可证的要求，我可能会告你啊！
这就是许可证。
你可以自己写一个许可证，但是如果你很懒的话 ( 一般人都很懒 ) ，你可以用别人写的比较好的许可证。
写的比较好的开源许可证有很多种，比如 GPL、BSD、MIT、Apache 等等，MIT 只是其中的一个。
你可以挑一个合你胃口的，这些许可证模版都是免费的，毕竟也没人指望这个卖钱。</description></item><item><title>南北流量和东西流量</title><link>https://desistdaydream.github.io/docs/Standard/%E5%8D%97%E5%8C%97%E6%B5%81%E9%87%8F%E5%92%8C%E4%B8%9C%E8%A5%BF%E6%B5%81%E9%87%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/Standard/%E5%8D%97%E5%8C%97%E6%B5%81%E9%87%8F%E5%92%8C%E4%B8%9C%E8%A5%BF%E6%B5%81%E9%87%8F/</guid><description>概述 在 Service Mesh 微服务架构中，我们常常会听到东西流量和南北流量两个术语。
南北流量（NORTH-SOUTH traffic）和东西流量（EAST-WEST traffic）是数据中心环境中的网络流量模式。下面我们通过一个例子来理解这两个术语。
假设我们尝试通过浏览器访问某些 Web 应用。Web 应用部署在位于某个数据中心的应用服务器中。在多层体系结构中，典型的数据中心不仅包含应用服务器，还包含其他服务器，如负载均衡器、数据库等，以及路由器和交换机等网络组件。假设应用服务器是负载均衡器的前端。
当我们访问 web 应用时，会发生以下类型的网络流量：
客户端（位于数据中心一侧的浏览器）与负载均衡器（位于数据中心）之间的网络流量
负载均衡器、应用服务器、数据库等之间的网络流量，它们都位于数据中心。
南北流量
在这个例子中，前者即即客户端和服务器之间的流量被称为南北流量。简而言之，南北流量是 server-client 流量。
东西流量
第二种流量即不同服务器之间的流量与数据中心或不同数据中心之间的网络流被称为东西流量。简而言之，东西流量是 server-server 流量。
当下，东西流量远超南北流量，尤其是在当今的大数据生态系统中，比如 Hadoop 生态系统（大量 server 驻留在数据中心中，用 map reduce 处理），server-server 流量远大于 server-client 流量。
大家可能会好奇，东西南北，为什么这么命名。
该命名来自于绘制典型 network diagrams 的习惯。在图表中，通常核心网络组件绘制在顶部（NORTH），客户端绘制在底部（SOUTH），而数据中心内的不同服务器水平（EAST-WEST）绘制。</description></item></channel></rss>