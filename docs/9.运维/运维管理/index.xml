<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>运维管理 on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/%E8%BF%90%E7%BB%B4%E7%AE%A1%E7%90%86/</link><description>Recent content in 运维管理 on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/%E8%BF%90%E7%BB%B4%E7%AE%A1%E7%90%86/index.xml" rel="self" type="application/rss+xml"/><item><title>运维管理</title><link>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/%E8%BF%90%E7%BB%B4%E7%AE%A1%E7%90%86/%E8%BF%90%E7%BB%B4%E7%AE%A1%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/%E8%BF%90%E7%BB%B4%E7%AE%A1%E7%90%86/%E8%BF%90%E7%BB%B4%E7%AE%A1%E7%90%86/</guid><description>概述 参考：
公众号，统一运维平台建设的一些思路和实践 构建一站式运维平台的目的是为了提升运维效率。首先是运维对象要被管理起来，然后是监控这些对象，接着是这些对象的自动化运维，最后是所有的运维操作都要有所规范。概括起来对应的系统就是 CMDB、Monitor、AutoFlow、ITSM，如下图所示
CMDB # CMDB是运维的基石，也是运维的权威数据库，权威不仅体现在数据准确，也要求数据唯一，不能在多套系统里维护着同样的运维资源数据，这样数据准确性更难保证。CMDB的价值体现在数据被消费，最常见的消费场景就是监控、运维作业的调度执行、ITSM流程类相关的系统。
AutoFlow # AutoFlow(自动化运维平台) 是提升运维效率的利器。简单来说就是可以把机器上的各种运维操作比如：巡检、日志操作、代码部署、文件传输等等重复的运维任务编排成作业，去调度执行。
Monitor # Montiro(统一监控) 是实现系统和业务连续稳定运行的重要技术保障手段。业内比较知名的开源解决方案有zabbix和Prometheus，很多企业的实践也是结合了2者。
ITSM # ITSM 对这些系统进行了一个串联，用流程方式规范IT和运维。 在 ITIL4 的规范和指导下，与 CMDB、Monitor、AutoFlow 高度结合，一同打造一站式运维平台，从公司实际出发，解决流程失误、人员失误，打造贴合的流程工单，提升IT生产力，提供IT新视野，提高IT运维效率。
ITIL 参考：
Wiki, ITIL Information Technology Infrastructure Library (信息技术基础设施库，简称 ITIL) 是 IT 活动的一组实践和框架，例如 IT 服务管理 (ITSM) 和 IT 资产管理 (ITAM)，重点关注使 IT 服务与业务需求保持一致。
CMDB CMDB是运维的权威数据库, 网上对CMDB的建设和落地思路表述各异。其实直接衡量CMDB成功与否标志是其他系统是否愿意消费CMDB，如果是则证明数据是足够权威的。所以CMDB的建设大部分时间可能花在保证数据的正确性上，这个可以通过自动发现和ITSM的流程加以保证。比如主机的从购买、上架、系统初始化、应用部署、各种变更、下线、下架等等一个完整的生命周期，都是可以通过ITSM来进行规范的。
由于企业运维需求和场景各异，因此，要实现一个尽可能通用、灵活、可扩展的运维资源数据的配置和管理系统，系统必须要满足:
运维人员能根据企业的运维场景和需求，自己去构建存储的数据模型，以及模型之间的关系 提供丰富的API，尤其是在数据和关系检索要做到通用，便于二次开发 用户可以方便的订阅自己关心的数据，有丰富的图表展示 数据的自动发现和细粒度的权限控制 基于上述理念，设计并实现了一个CMDB，并开源出来，希望能得到大家的积极反馈，系统将持续不断的改进， 如果您觉得有用处，欢迎在GitHub上点1个小⭐️⭐️。
https://github.com/veops/cmdb
AutoFlow 自动化运维平台简单概括为对运维对象的任何变更操作都是由该平台来实现的，也即运维作业平台。实现该系统的核心是灵活的编排运维任务、任务的调度执行。
首先在系统上可以通过拖拽的方式来编排任务，这个任务节点可能是一个脚本、文件传输、发送邮件等。其次任务的调度执行可以完全关联CMDB来选择执行目标。当然任务执行方式既可以是人工触发也可以是计划任务的方式触发。
Monitor 监控是确保系统和业务连续稳定运行的重要技术保障手段，在运维中，监控是不可或缺的功能。
目前，业界知名的开源解决方案很多，如Zabbix、Prometheus，许多企业在实践中采用了这两者的结合。然而，这些开源监控解决方案在企业实践中一般需要进一步优化和丰富。
首先，单纯的采集、监控带来的收益可能不够明显。为了提升监控的价值，通常需要将监控与企业的配置管理数据库（CMDB）系统进行关联。通过与CMDB系统关联，可以更好地理解监控数据的上下文，从而更准确地识别和解决问题。
数据可视化和报表功能：监控系统应该提供直观的数据可视化和报表功能，以便运维人员能够更好地理解系统的状态和趋势，从而做出更明智的决策。
自动化运维和自愈能力：监控系统可以与自动化运维工具集成，实现自动化的故障诊断和修复。通过自愈能力，可以减少人工干预的需求，提高系统的可靠性和稳定性。
预测性分析和容量规划：监控系统可以通过对历史数据的分析，进行预测性分析和容量规划。这样可以帮助企业更好地预测系统的未来需求，避免资源瓶颈和性能问题。
监控系统最好具备告警管理功能。在大规模告警风暴的情况下，如果没有有效的告警管理，可能会导致大量无效的告警，从而淹没了重要的告警信息。因此，监控系统应该具备灵活的告警策略和管理机制，能够根据实际情况进行智能告警，减少噪音告警的产生，并确保重要的告警能够及时被发现和处理。
总之，监控系统在企业实践中需要与CMDB系统关联，具备告警管理功能，并且可以进一步优化和丰富数据可视化、自动化运维、预测性分析等方面的功能，以提升其价值和效果。</description></item><item><title>CMDB</title><link>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/%E8%BF%90%E7%BB%B4%E7%AE%A1%E7%90%86/CMDB/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/%E8%BF%90%E7%BB%B4%E7%AE%A1%E7%90%86/CMDB/</guid><description>概述 参考：
Wiki, CMDB Configuration management database(配置管理数据库，简称 CMDB) 是一个 ITIL 术语，指的是组织用来存储有关硬件和软件资产（通常称为配置项）信息的数据库。
CMDB 项目推荐
https://github.com/Combodo/iTop https://github.com/vbkunin/itop-docker https://github.com/TencentBlueKing/bk-cmdb https://github.com/veops/cmdb 维易 CMDB 文章: https://mp.weixin.qq.com/s/6W8DaDb3Y4NmK3rb9NGKAQ 简单的记录功能直接用 WPS 的轻维表即可，专治各种花里胡哨的开源产品。
fiy 参考：
GitHub 项目，lanyulei/fiy 部署问题：
使用 lz270978971/fiy-ui:latest 镜像构建前端
docker run -it lz270978971/fiy-ui:latest /bin/sh vim .env.production 修改其中的 VUE_APP_BASE_API 的值为运行 fiy 服务器机器的 IP npm run build:prod 打包前端页面 详见 issue 11 处理后端
clone fiy 后端代码，并在项目根目录下创建 statci/ui 目录，将容器内的 dist/ 目录的所有文件拷贝到刚创建的 static/ui/ 目录下 修改 config/settings.yml 文件中的数据库配置，如果需要使用搜索功能，还需要配置 es go build -ldflags=&amp;quot;-s -w&amp;quot; -o fiy main.</description></item><item><title>运维工具</title><link>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/%E8%BF%90%E7%BB%B4%E7%AE%A1%E7%90%86/%E8%BF%90%E7%BB%B4%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/%E8%BF%90%E7%BB%B4%E7%AE%A1%E7%90%86/%E8%BF%90%E7%BB%B4%E5%B7%A5%E5%85%B7/</guid><description>概述 常见运维工具介绍：
OS provisioning：PXE，Cobbler(repository,distritution,profile)
PXE:dhcp,tftp,http,ftp
dnsmasq:dhcp,dns
OS Config:系统配置
puppet,salstack,func Task Excute:任务执行
fabric,func,saltstack Deployment:部署
fabric 自动化运维工具介绍 Cobbler Cobbler
Ansible Ansible
SaltStack https://github.com/saltstack/salt
puppet https://www.puppet.com/
https://github.com/puppetlabs/puppet
其他 Go 语言实现的
基于 SSH 的 https://github.com/skx/deployr https://github.com/melbahja/goph 带有 Client 的 运维平台 https://github.com/openspug/spug # 开源运维平台：面向中小型企业设计的轻量级无Agent的自动化运维平台，整合了主机管理、主机批量执行、主机在线终端、文件在线上传下载、应用发布部署、在线任务计划、配置中心、监控、报警等一系列功能。
https://github.com/veops/cmdb
https://github.com/TencentBlueKing/bk-cmdb # 蓝鲸智云配置平台(BlueKing CMDB)</description></item></channel></rss>