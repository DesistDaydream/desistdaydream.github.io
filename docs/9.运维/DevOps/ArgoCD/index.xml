<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ArgoCD on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/DevOps/ArgoCD/</link><description>Recent content in ArgoCD on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/DevOps/ArgoCD/index.xml" rel="self" type="application/rss+xml"/><item><title>Argo CD</title><link>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/DevOps/ArgoCD/Argo-CD/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/DevOps/ArgoCD/Argo-CD/</guid><description>概述 参考：
GitHub 项目，argoproj/argo-cd Argo CD 保姆级入门教程 在上一篇『👉GitOps 介绍[1]』中，我介绍了什么是 GitOps，包括 GitOps 的原则和优势，以及 GitOps 与 DevOps 的区别。本文将介绍用于实施 GitOps 的工具 Argo CD。
Argo CD 是以 Kubernetes 作为基础设施，遵循声明式 GitOps 理念的持续交付（continuous delivery, CD）工具，支持多种配置管理工具，包括 ksonnet/jsonnet、kustomize 和 Helm 等。它的配置和使用非常简单，并且自带一个简单易用的可视化界面。
按照官方定义，Argo CD 被实现为一个 Kubernetes 控制器，它会持续监控正在运行的应用，并将当前的实际状态与 Git 仓库中声明的期望状态进行比较，如果实际状态不符合期望状态，就会更新应用的实际状态以匹配期望状态。
在正式开始解读和使用 Argo CD 之前，我们需要先搞清楚为什么需要 Argo CD？它能给我们带来什么价值？
传统 CD 工作流 从上篇文章『👉GitOps 介绍[2]』可以知道，目前大多数 CI/CD 工具都使用基于 Push 的部署模式，例如 Jenkins、CircleCI 等。这种模式一般都会在 CI 流水线运行完成后执行一个命令（比如 kubectl）将应用部署到目标环境中。
这种 CD 模式的缺陷很明显：
需要安装配置额外工具（比如 kubectl）； 需要 Kubernetes 对其进行授权； 需要云平台授权； 无法感知部署状态。也就无法感知期望状态与实际状态的偏差，需要借助额外的方案来保障一致性。 下面以 Argo CD 为例，来看看遵循声明式 GitOps 理念的 CD 工具是怎么实现的。</description></item></channel></rss>