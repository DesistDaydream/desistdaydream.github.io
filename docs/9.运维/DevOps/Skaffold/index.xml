<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Skaffold on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/DevOps/Skaffold/</link><description>Recent content in Skaffold on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/DevOps/Skaffold/index.xml" rel="self" type="application/rss+xml"/><item><title>Skaffold</title><link>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/DevOps/Skaffold/Skaffold/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/DevOps/Skaffold/Skaffold/</guid><description>概述 参考：
官方文档 Skaffold(脚手架) 是一个命令行工具，可以使得 kubernetes 原生应用的持续开发(CI/CD)变得更加简单。skaffold 可以处理构建(代码与 docker 镜像)、推送到仓库、部署到本地或者远程 kubernetes 集群中这一工作流程。使用一个简单的 yaml 配置文件来定义和执行 Pipeline。
Skaffold 特性
Skaffold 更轻量。与 Drone 和 Jenkins 等工具不同，它仅是一个命令行工具，并没有任何附加的组件。所以 Skaffold 也就无法与 SCM 对接来接收 webhook 消息。 不过也正是因为这种轻量的特性，可以将 Skaffold 集成在 Jenkins 或 Drone 中，作为 shell 命令来执行 CI/CD 的过程，使得整个流水线更加简洁明了。 在本地进行 Kubernetes 的快速开发。在 skaffold 运行之后，当在本地修改完代码之后，skaffold 可以自动触发流水线将应用程序部署到本地或者远程的 kubernetes 集群。 Skaffold 部署 下载 skaffold 命令行工具的二进制文件，并将其放在$PATH 目录中
curl -Lo skaffold https://storage.googleapis.com/skaffold/releases/latest/skaffold-linux-amd64 chmod +x skaffold mv skaffold /usr/local/bin 完成后，直接使用 skaffold 命令即可
Skaffold 配置 skaffold.yaml # Skaffold 通过该文件定义来定义 Pipeline 任务。</description></item><item><title>Skaffold Pipeline 详解</title><link>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/DevOps/Skaffold/Skaffold-Pipeline-%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/DevOps/Skaffold/Skaffold-Pipeline-%E8%AF%A6%E8%A7%A3/</guid><description>概述 参考：
官方文档 Skaffold 默认通过 yaml 格式的名为 skaffold.yaml 的文件来指定 Pipelines 的行为。该文件应存放在项目目录的根目录中。当在项目的根目录中运行 skaffold 命令时，skaffold 将尝试从当前目录读取 skaffold.yaml 文件，来执行其内定义的 pipeline 任务。对于官方来说，skaffold.yaml 也称为 skaffold 的配置文件。
Skaffold Pipeline 的工作流程 参考：官方文档，pipeline 阶段
Skafflod 在执行 Pipeline 时，会经过 5 个 stages(阶段)。
artifacts(工件) 大意就是指工具、物品等。比如 build artifacts(构建工件)，泛指可以执行构建功能的工具，比如 docker、Jib、Bazel 等等
运行 skaffold 时，skaffold 会在项目中收集源代码并使用配置文件中指定的构建工件来进行构建。构建成功后使用标记工件为镜像设置 tag，并推送到指定的镜像仓库中。在最后，skaffold 哈可以使用指定的部署工具(kubectl、helm 等)来将构建好的代码部署到 kubernetes 集群中。下面是各个阶段的详细介绍：
Init # generate a starting point for Skaffold configuration
Build # 根据指定的构建器来构建镜像
Tag # 根据指定的策略来为镜像设置 tag
Test # test images with structure tests</description></item><item><title>Skaffold 命令行工具</title><link>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/DevOps/Skaffold/Skaffold-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/DevOps/Skaffold/Skaffold-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</guid><description>概述 参考：
官方文档 Skaffold 命令行工具提供以下命令
End-to-end pipelines:
skaffold run # 构建并运行一次 skaffold dev # 进入dev模式，Skaffold 将监视应用程序的源文件，并在检测到更改时将重建您的映像（或将文件同步到正在运行的容器中），推送所有新映像并将该应用程序重新部署到群集中。 skaffold debug - to run a pipeline in debug mode Pipeline building blocks for CI/CD:
skaffold build - to just build and tag your image(s) skaffold deploy - to deploy the given image(s) skaffold delete - to cleanup the deployed artifacts skaffold render - build and tag images, and output templated Kubernetes manifests Getting started with a new project:</description></item></channel></rss>