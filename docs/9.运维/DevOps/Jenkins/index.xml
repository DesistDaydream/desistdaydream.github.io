<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Jenkins on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/DevOps/Jenkins/</link><description>Recent content in Jenkins on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/DevOps/Jenkins/index.xml" rel="self" type="application/rss+xml"/><item><title>Jenkins</title><link>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/DevOps/Jenkins/Jenkins/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/DevOps/Jenkins/Jenkins/</guid><description>概述 参考：
官方文档：https://jenkins.io/zh/ Jenkins 是一款开源 CI&amp;amp;CD 软件，用于自动化各种任务，包括构建、测试和部署软件。Jenkins 支持各种运行方式，可通过系统包、Docker 或者通过一个独立的 Java 程序。
Jenkins 自己本身并没有什么功能，仅提供一个基本的 web 页面和监听端口(用来接收 webhook 等)，CI/CD 功能的实现依赖于 Jenkins 的各种插件来实现。
Jenkins 说白了就是一个运行在系统上的程序，通过编写各种 Jenkins Pipelines(流水线)，来在系统中进行代码构建、拷贝文件、执行 shell 命令等等。使用的是系统上环境，比如系统有 go 编译器，那么 Jenkins 就可以执行 go 的相关命令；如果系统上没有安装 docker ，那么 Jenkins 也就没法执行 docker 相关的命令。可以把 Jenkins 当作一个复杂的、可以执行更多功能的 shell 脚本。
当然，既然系统上无法满足各类要求的话，那么 Pipeline 还可以通过使用容器的方式来运行，以便规避环境影响。
Pipe-line(流水线) 介绍 官方文档：https://www.jenkins.io/doc/book/pipeline/
Pipe-line 是 Jenkins 实现 CI/CD 的必备程序。在部署完 Jenkins 之后，一般情况都会首先安装 Pipe-line 插件，而日常使用中，最常用的也是 Pipeline。
顾名思义，Pipeline 流水线，就好像工厂中的流水线一样，第一步应该做什么，第二步应该做什么&amp;hellip;&amp;hellip;都是有明确规定的，这是一个自动化，明确的任务线。
Jenkinsfile Pipeline 通过一个文本文件(称为 Jenkinsfile)来决定其每一步应该执行什么样的操作(比如第一步下载代码、第二步构建、第三步部署&amp;hellip;等等)。这个 Jenkinsfile 文件可以提交到项目的代码存储库中，这是 Pipeline as code(流水线即代码) 的基础。</description></item><item><title>Jenkins 任务示例</title><link>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/DevOps/Jenkins/Jenkins-%E4%BB%BB%E5%8A%A1%E7%A4%BA%E4%BE%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/DevOps/Jenkins/Jenkins-%E4%BB%BB%E5%8A%A1%E7%A4%BA%E4%BE%8B/</guid><description>通过 Jenkins 执行 shell 命令
通过 Jenkins 流水线功能 构建 go 项目 hello world
通过 Jenkins 执行 shell 命令
在 Jenkins 首页点击新建任务，选择构建一个自由风格的软件项目，并输入名称，点击确定
选择构建标签，增加执行 shell 步骤，
在命令框中，输入想要执行的 shell 命令(类似于 shell 脚本)，点击保存
点击立即构建后，Jenkins 就会根据配置的 shell 命令执行任务。
点击下面红框中内容可以查看该次任务的详细信息，点击控制台输出，可以观察任务执行过程以及结果
至此，一次简单的 Jenkins 任务就执行完成了。
Note：
本示例是使用 docker 运行的 Jenkins。并且本机器为 k8s 集群的 master 节点
由于 Jenkins 运行在 docker 环境中，是获取不到 docker 外部的 kubectl 命令的
所以本示例是将 kubectl 命令以及配置文件拷贝到 Jenkins 的容器中，才让该任务成功执行，否则该任务执行失败，并提示无法找到 kubectl 命令。
通过 Jenkins 流水线功能 构建 go 项目 hello world</description></item><item><title>Jenkins 页面详解</title><link>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/DevOps/Jenkins/Jenkins-%E9%A1%B5%E9%9D%A2%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/DevOps/Jenkins/Jenkins-%E9%A1%B5%E9%9D%A2%E8%AF%A6%E8%A7%A3/</guid><description>流水线任务
General
GitHub 项目 #
This build requires lockable resources #
Throttle builds #
丢弃旧的构建 #
参数化构建过程 # 指定各种参数以便在脚本或者 pipeline 中使用。
字符参数 # 指定变量，名称为变量名，默认值为变量值。可以直接在脚本中引用。 关闭构建
在必要的时候
构建触发器
用来指定触发本次任务的方式，比如提交代码时触发，或者定时触发等等。
流水线
用来指定 Jenkinsfile 的内容。
定义 # 指定 Jenkinsfile 的获取方式。
Pipeline script # 直接在网页编写 Jenkinsfile 内容。
Pipeline script from SCM # 从项目根目录中查找 Jenkinsfile 文件
SCM # 指定获取 Jenkinsfile 的 SCM 及其 URL、认证、分支。
脚本路径 # 指定 Jenkinsfile 所在位置的绝对路径
自由风格的软件项目
General
GitHub 项目 #</description></item><item><title>Jenkins基于k8s的 CICD平台部署</title><link>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/DevOps/Jenkins/Jenkins%E5%9F%BA%E4%BA%8Ek8s%E7%9A%84-CICD%E5%B9%B3%E5%8F%B0%E9%83%A8%E7%BD%B2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/DevOps/Jenkins/Jenkins%E5%9F%BA%E4%BA%8Ek8s%E7%9A%84-CICD%E5%B9%B3%E5%8F%B0%E9%83%A8%E7%BD%B2/</guid><description>jenkins 基于 k8s 的 CICD 平台部署</description></item></channel></rss>