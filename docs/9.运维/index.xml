<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – 🛠️9.运维</title><link>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/</link><description>Recent content in 🛠️9.运维 on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Ansible</title><link>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/Ansible/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/Ansible/</guid><description/></item><item><title>Docs: Cobbler</title><link>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/Cobbler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/Cobbler/</guid><description/></item><item><title>Docs: PXE 简介</title><link>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/PXE-%E7%AE%80%E4%BB%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/PXE-%E7%AE%80%E4%BB%8B/</guid><description>
&lt;h1 id="heading">&lt;/h1>
&lt;p>&lt;strong>Preboot eXecution Environment(预启动执行环境，简称 PXE)&lt;/strong> 提供了一种使用网络接口（Network Interface）启动计算机的机制。这种机制让计算机的启动可以不依赖本地数据存储设备（如硬盘）或本地已安装的操作系统。&lt;/p>
&lt;p>在服务器开机时，可以使用 PXE 进行启动，该设备的 PXE 作为一个客户端，首先请求 DHCP，在获取到网络参数后，再在广播域里请求 PXE 类型的服务，来引导安装操作系统。一般来说都是通过 TFTP 来进行远程系统文件传输，然后再自动通过传输过来的文件自动进行系统安装&lt;/p></description></item><item><title>Docs: Standardized Glossary(标准化术语)</title><link>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/Standardized-Glossary%E6%A0%87%E5%87%86%E5%8C%96%E6%9C%AF%E8%AF%AD/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/Standardized-Glossary%E6%A0%87%E5%87%86%E5%8C%96%E6%9C%AF%E8%AF%AD/</guid><description/></item><item><title>Docs: 应用发布</title><link>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/%E5%BA%94%E7%94%A8%E5%8F%91%E5%B8%83/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/%E5%BA%94%E7%94%A8%E5%8F%91%E5%B8%83/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;p>关于蓝绿发布、金丝雀发布、和 A/B 测试&lt;/p>
&lt;h1 id="蓝绿发布">蓝绿发布&lt;/h1>
&lt;p>蓝绿部署中，一共有两套系统：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>一套是正在提供服务系统，标记为“绿色”；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>另一套是准备发布的系统，标记为“蓝色”。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>两套系统都是功能完善的，并且正在运行的系统，只是系统版本和对外服务情况不同。&lt;/p>
&lt;p>最初，没有任何系统，没有蓝绿之分。 然后，第一套系统开发完成，直接上线，这个过程只有一个系统，也没有蓝绿之分。 后来，开发了新版本，要用新版本替换线上的旧版本，在线上的系统之外，搭建了一个使用新版本代码的全新系统。&lt;/p>
&lt;p>这时候，一共有两套系统在运行，正在对外提供服务的老系统是绿色系统，新部署的系统是蓝色系统。 蓝色系统不对外提供服务，用来做啥？ 用来做发布前测试，测试过程中发现任何问题，可以直接在蓝色系统上修改，不干扰用户正在使用的系统。（注意，两套系统没有耦合的时候才能百分百保证不干扰） 蓝色系统经过反复的测试、修改、验证，确定达到上线标准之后，直接将用户切换到蓝色系统： 切换后的一段时间内，依旧是蓝绿两套系统并存，但是用户访问的已经是蓝色系统。这段时间内观察蓝色系统（新系统）工作状态，如果出现问题，直接切换回绿色系统。 当确信对外提供服务的蓝色系统工作正常，不对外提供服务的绿色系统已经不再需要的时候，蓝色系统正式成为对外提供服务系统，成为新的绿色系统。 原先的绿色系统可以销毁，将资源释放出来，用于部署下一个蓝色系统。 蓝绿部署只是上线策略中的一种，它不是可以应对所有情况的万能方案。 蓝绿部署能够简单快捷实施的前提假设是目标系统是非常内聚的，如果目标系统相当复杂，那么如何切换、两套系统的数据是否需要以及如何同步等，都需要仔细考虑。&lt;/p>
&lt;h1 id="金丝雀发布">金丝雀发布&lt;/h1>
&lt;p>金丝雀发布（Canary）也是一种发布策略，和国内常说的灰度发布是同一类策略。&lt;/p>
&lt;p>蓝绿部署是准备两套系统，在两套系统之间进行切换，金丝雀策略是只有一套系统，逐渐替换这套系统 譬如说，目标系统是一组无状态的 Web 服务器，但是数量非常多，假设有一万台。&lt;/p>
&lt;p>这时候，蓝绿部署就不能用了，因为你不可能申请一万台服务器专门用来部署蓝色系统（在蓝绿部署的定义中，蓝色的系统要能够承接所有访问）。 可以想到的一个方法是： 只准备几台服务器，在上面部署新版本的系统并测试验证。测试通过之后，担心出现意外，还不敢立即更新所有的服务器。 先将线上的一万台服务器中的 10 台更新为最新的系统，然后观察验证。确认没有异常之后，再将剩余的所有服务器更新。 这个方法就是金丝雀发布。 实际操作中还可以做更多控制，譬如说，给最初更新的 10 台服务器设置较低的权重、控制发送给这 10 台服务器的请求数，然后逐渐提高权重、增加请求数。 这个控制叫做“流量切分”，既可以用于金丝雀发布，也可以用于后面的 A/B 测试。 蓝绿部署和金丝雀发布是两种发布策略，都不是万能的。有时候两者都可以使用，有时候只能用其中一种。&lt;/p>
&lt;h1 id="ab-测试">A/B 测试&lt;/h1>
&lt;p>首先需要明确的是，A/B 测试和蓝绿部署以及金丝雀，完全是两回事。 蓝绿部署和金丝雀是发布策略，目标是确保新上线的系统稳定，关注的是新系统的 BUG、隐患。 A/B 测试是效果测试，同一时间有多个版本的服务对外服务，这些服务都是经过足够测试，达到了上线标准的服务，有差异但是没有新旧之分（它们上线时可能采用了蓝绿部署的方式）。 A/B 测试关注的是不同版本的服务的实际效果，譬如说转化率、订单情况等。 A/B 测试时，线上同时运行多个版本的服务，这些服务通常会有一些体验上的差异，譬如说页面样式、颜色、操作流程不同。相关人员通过分析各个版本服务的实际效果，选出效果最好的版本。 在 A/B 测试中，需要能够控制流量的分配，譬如说，为 A 版本分配 10%的流量，为 B 版本分配 10%的流量，为 C 版本分配 80%的流量。&lt;/p></description></item><item><title>Docs: 自动化运维</title><link>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4/</guid><description>
&lt;p>常见运维工具介绍：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>OS provisioning：PXE，Cobbler(repository,distritution,profile)&lt;/p>
&lt;ol>
&lt;li>
&lt;p>PXE:dhcp,tftp,http,ftp&lt;/p>
&lt;/li>
&lt;li>
&lt;p>dnsmasq:dhcp,dns&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>OS Config:系统配置&lt;/p>
&lt;ol>
&lt;li>puppet,salstack,func&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>Task Excute:任务执行&lt;/p>
&lt;ol>
&lt;li>fabric,func,saltstack&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>Deployment:部署&lt;/p>
&lt;ol>
&lt;li>fabric&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h1 id="自动化运维工具介绍">自动化运维工具介绍&lt;/h1>
&lt;h2 id="cobbler">cobbler&lt;/h2>
&lt;h2 id="ansible">ansible&lt;/h2>
&lt;h2 id="saltstack">saltstack&lt;/h2></description></item></channel></rss>