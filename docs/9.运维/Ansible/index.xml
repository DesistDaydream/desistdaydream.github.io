<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ansible on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/Ansible/</link><description>Recent content in Ansible on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/Ansible/index.xml" rel="self" type="application/rss+xml"/><item><title>Ansible</title><link>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/Ansible/Ansible/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/Ansible/Ansible/</guid><description>概述 参考：
官网 GitHub 项目，ansible/ansible 官方文档 公众号 - 程序员面试吧，快速入门 Ansible 自动化运维工具 https://www.zsythink.net/archives/tag/ansible/ Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy and maintain. Automate everything from code deployment to network configuration to cloud management, in a language that approaches plain English, using SSH, with no agents to install on remote systems
Ansible 是一个非常简单的 IT 自动化系统。它处理配置管理、应用程序部署、云供应、临时任务执行、网络自动化和多节点编排。Ansible 可以轻松得批量进行复杂的更改，例如使用负载均衡器进行零停机滚动更新。而这一过程使用 SSH 实现，无需在远程系统上安装代理程序。
Ansible 的主要目标是简单易用。它还非常注重安全性和可靠性，具有最少的移动部件，使用 OpenSSH 进行传输（使用其他传输和拉模式作为替代），以及一种围绕人类可审计性设计的语言 - 即使是那些不熟悉的人该程序。</description></item><item><title>Ansible 配置详解</title><link>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/Ansible/Ansible-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/Ansible/Ansible-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</guid><description>概述 参考：
官方文档，安装指南 - 配置 Ansible 官方文档，Ansible 配置设置 Ansible 可以通过多种方式来配置其运行时行为
配置文件，一般是在 /etc/ansible/ 目录下名为 ansible.cfg 的 INI 格式的配置文件 环境变量 命令行选项 playbook 中的关键字和变量 Ansible 的配置文件使用 INI 格式
[defaults] deprecation_warnings(BOOLEAN) # 是否显示某些功能的弃用警告。默认值：TRUE
host_key_checking(BOOLEAN) # 主机 SSH 密钥检查。默认值：TRUE。如果启用检查，则对从未 ssh 登录过的主机执行任务将会失败。
inventory(STRING) # 指定 ansible 运行时所用的主机清单路径。默认值: /etc/ansible/hosts
Note：可以指定文件或者路径，当指定路径时，则会从该路径下所有文件中读取 host 信息 remote_tmp(STRING) # Ansible 运行期间，受管理节点保存临时数据的地方。默认值: https://docs.ansible.com/ansible/latest/collections/environment_variables.html#envvar-ANSIBLE_REMOTE_TMP 也可以在命令行通过 -e 'ansible_remote_tmp=/tmp/ansible-tmp' 的方式修改 [inventory] [privilege_escalation] - 权限提升部分 become(BOOLEAN) # 是否启用以指定用户执行命令。默认值: False
become_method(STRING) # 提升权限的方式。默认值: sudo
become_user(STRING) # 提升权限所使用的 默认值: root</description></item><item><title>Inventory 文件</title><link>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/Ansible/Inventory-%E6%96%87%E4%BB%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/Ansible/Inventory-%E6%96%87%E4%BB%B6/</guid><description>概述 参考：
官方文档，用户指南 - 如何建立你的 Inventory Ansible 可同时操作属于一个组的多台主机，组和主机之间的关系通过 Inventory 文件配置。默认的文件路径为 /etc/ansible/hosts，也可以在 ansible、ansible-playbook 命令中使用 -i 选项指定其他的 Inventory 文件。
除默认文件外，还可以同时使用多个 inventory 文件，也可以从动态源，或云上拉取 inventory 配置信息。详见动态 Inventory。
Inventory文件格式 最常见的格式是 INI 和 YAML 格式，下面这是一个 INI 格式的 Inventory 示例
# 例1:定义一个单独的主机。未分组的机器。Note:需要在“例2”中中括号定义组之前指定 green.example.com 192.168.100.1 # 例2:定义一个主机组。组名为webservers的主机集合 [webservers] alpha.example.org 192.168.1.100 # 再定义一个主机组。组名为dbservers的主机集合 [dbservers] 192.168.2.100 # 定义一个主机的另一种方式。使用正则表达式来指定多个主机 www[001:006].example.com #www001.example.com一直到www006.example.com一共6台主机 db-[a:f]-node.example.com # 可以在主机ip或主机名后面添加参数，以此来控制Ansible与远程主机的交互方式。 # 详细的参数信息见官网：https://docs.ansible.com/ansible/latest/user_guide/intro_inventory.html#connecting-to-hosts-behavioral-inventory-parameters # 指定该主机要执行操作的主机ip、用户名和密码 www.desistdaydream.com ansible_host=10.10.100.200 ansible_user=&amp;#34;root&amp;#34; ansible_password=&amp;#34;my@password&amp;#34; # 例3:组的引用,可以把一个或多个组作为另一个组的子成员。all_host 组包含 webservers 与 dbservers 两个组中所有的 hosts [all_host:children] webservers dbservers Note：该文件的第一列为一般推荐使用主机名来表示，如果需要指定该主机的ip地址，则使用 ansbile_ssh_host 或者 ansible_host 参数来指定ip。</description></item><item><title>Ansible 命令行工具</title><link>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/Ansible/Ansible-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/Ansible/Ansible-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</guid><description>概述 参考：
官方文档，用户指南 - 命令行工具 官方文档，用户指南 - 传统目录 - 临时命令简介 由于 Ansible 是基于 SSH 远程管理主机，所以让 Ansible 的控制节点需要对受管理节点进行 ssh 的基于密钥的认证(方法详见 ssh 命令)或者在 inventory 文件中指定认证方式。
Note：Ansible 的控制节点和受管理节点的 Python 版本需要一致，否则 ansible 命令有时候会执行失败
ansible 参考：
官方文档，用户指南 - 使用命令行工具工作 - ansible ansible 是 Ansible 的一个 ad-hoc(临时) 命令，可以在一个或多个受管理节点上自动执行单个任务。ansible 命令即简单又快速，但并不具备可重复性，通过 ansible 命令的使用，我们可以了解到 Ansible 的简单性和强大的功能。并且，可以将类似的操作，直接移植到 Playbooks 中。
临时命令非常适合很少重复，但是又需要大批量执行的任务，比如重启服务器、复制文件、管理服务、管理用户 等等。我们可以在临时任务中使用所有 Ansible 模块
Syntax(语法) ansible &amp;lt;HostPattern&amp;gt; [OPTIONS]
HostPattern # 主机模式,可以是主机名，主机 IP，组名，还有一个 all(所有 hosts 里定义的主机) OPTIONS &amp;ndash;list-hosts # 列出所有 HostPattern 定义的被管理 host 并统计数量，一般用于查看组内的主机有多少 -i, &amp;ndash;inventory, &amp;ndash;inventory-file INVENTORY # 指定具体的 INVENTORY 路径或文件，而不使用配置中默认的。 INVENTORY 可以是 目录、文件、逗号分割的 IP 列表。 可以使用 -i 192.</description></item></channel></rss>