<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ansible 管理 on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/Ansible/Ansible-%E7%AE%A1%E7%90%86/</link><description>Recent content in Ansible 管理 on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/Ansible/Ansible-%E7%AE%A1%E7%90%86/index.xml" rel="self" type="application/rss+xml"/><item><title>Ansible 管理</title><link>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/Ansible/Ansible-%E7%AE%A1%E7%90%86/Ansible-%E7%AE%A1%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/Ansible/Ansible-%E7%AE%A1%E7%90%86/Ansible-%E7%AE%A1%E7%90%86/</guid><description>实际案例： 批量关闭/开启虚拟机 - name: 获取虚拟机列表 virt: command: list_vms register: info - name: 循环开启虚拟机 virt: name: &amp;#34;{{ item }}&amp;#34; command: start loop: &amp;#34;{{ info.list_vms }}&amp;#34;</description></item><item><title>ansible通过跳板机与目标主机通信</title><link>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/Ansible/Ansible-%E7%AE%A1%E7%90%86/ansible%E9%80%9A%E8%BF%87%E8%B7%B3%E6%9D%BF%E6%9C%BA%E4%B8%8E%E7%9B%AE%E6%A0%87%E4%B8%BB%E6%9C%BA%E9%80%9A%E4%BF%A1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/Ansible/Ansible-%E7%AE%A1%E7%90%86/ansible%E9%80%9A%E8%BF%87%E8%B7%B3%E6%9D%BF%E6%9C%BA%E4%B8%8E%E7%9B%AE%E6%A0%87%E4%B8%BB%E6%9C%BA%E9%80%9A%E4%BF%A1/</guid><description>在公司开发中，为了安全起见，生产环境跟开发环境是相互隔离开来的。也就是说在开发环境网络中无法直接 ssh 登录到生产环境的机器， 如果需要登录生产环境的机器，通常会需要借助跳板机，先登录到跳板机，然后通过跳板机登录到生产环境。
那么，使用 Ansible 时，如何配置，可以直接穿过跳板机呢？
大致的过程如下面的图示：
+-------------+ +----------+ +--------------+ | 开发环境机器A | &amp;lt;---&amp;gt; | 跳板机B | &amp;lt;--&amp;gt; | 生产环境机器B | +-------------+ +----------+ +--------------+ 我们可以通过 ssh 命令的 ProxyCommand 选项来解决以上问题。
通过 ProxyCommand 选项，机器 A 能够灵活使用任意代理机制与机器 C 上的 SSH Server 端口建立连接，接着机器 A 上的 SSH Client 再与该连接进行数据交互，从而机器 A 上的 SSH Client 与机器 C 上的 SSH Server 之间建立了与一般直接 SSH 连接不太一样的间接 SSH 连接。
不过由于间接 SSH 连接的透明性，逻辑上可认为机器 A 上的 SSH Client 与机器 C 上的 SSH Server 建立了直接 SSH 连接。</description></item></channel></rss>