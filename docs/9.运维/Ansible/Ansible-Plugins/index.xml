<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ansible Plugins on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/Ansible/Ansible-Plugins/</link><description>Recent content in Ansible Plugins on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/Ansible/Ansible-Plugins/index.xml" rel="self" type="application/rss+xml"/><item><title>AnsiblePlugins</title><link>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/Ansible/Ansible-Plugins/Ansible-Plugins/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/Ansible/Ansible-Plugins/Ansible-Plugins/</guid><description>概述 参考：
官方文档，使用插件 插件是增强 Ansible 核心功能的代码段。Ansible 使用插件架构来启用丰富，灵活和可扩展的功能集。
Ansible 附带了许多方便的插件，您可以轻松编写自己的插件。
本节介绍 Ansible 随附的各种类型的插件：
Action Plugins Become Plugins Cache Plugins Callback Plugins Cliconf Plugins Connection Plugins Httpapi Plugins Inventory Plugins Lookup Plugins Netconf Plugins Shell Plugins Strategy Plugins Vars Plugins Filters Plugins Tests Plugin Filter Configuration</description></item><item><title>Connection Plugins</title><link>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/Ansible/Ansible-Plugins/Connection-Plugins/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/Ansible/Ansible-Plugins/Connection-Plugins/</guid><description>概述 参考：
官方文档，Connection 插件 连接插件允许 Ansible 连接到目标主机，以便它可以在它们上执行任务。 Ansible 附带了许多连接插件，但每个主机一次只能使用一个。
默认情况下，Ansible 附带了几个连接插件。 最常用的是 ssh 和 local 类型。 所有这些都可以在剧本中使用，并与 /usr/bin/ansible 一起决定你想如何与远程机器交谈。 如有必要，我们可以创建自定义连接插件。
SSH https://docs.ansible.com/ansible/latest/collections/ansible/builtin/ssh_connection.html</description></item><item><title>Filters Plugins</title><link>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/Ansible/Ansible-Plugins/Filters-Plugins/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/Ansible/Ansible-Plugins/Filters-Plugins/</guid><description>概述 参考：
官方文档，用户指南-目录-使用过滤器操作数据 https://www.zsythink.net/archives/2862 在本博客中，ansible是一个系列文章，我们会尽量以通俗易懂的方式总结ansible的相关知识点。
ansible系列博文直达链接：ansible轻松入门系列
现在我有一个需求，我想要将获取到的变量的值中的所有字母都变成大写，如果想要在playbook中实现这个需求，我该怎么办呢？我可以借助一个叫做&amp;quot;过滤器&amp;quot;的东西，帮助我完成刚才的需求，&amp;ldquo;过滤器（filters）&amp;ldquo;可以帮助我们对数据进行处理，这样解释可能不够直观，不如这样，我们先来看一个过滤器的小例子，然后结合示例解释过滤器是个什么东西，示例如下：
- hosts: test70 remote_user: root gather_facts: no vars: testvar: 1a2b3c tasks: - debug: msg: &amp;#34;{{ testvar | upper }}&amp;#34; 如上例所示，testvar变量的值中包含三个小写字母，在使用debug模块输出这个变量的值时，我们使用了一个管道符，将testvar变量传递给了一个名为&amp;quot;upper&amp;quot;的东西，&amp;ldquo;upper&amp;quot;就是一个&amp;quot;过滤器&amp;rdquo;，执行上例playbook后你会发现，testvar中的所有小写字母都被变成了大写。
通过上述示例，你一定已经明白了，过滤器是一种能够帮助我们处理数据的工具，其实，ansible中的过滤器功能来自于jinja2模板引擎，我们可以借助jinja2的过滤器功能在ansible中对数据进行各种处理，而上例中的upper就是一种过滤器，这个过滤器的作用就是将小写字母变成大写，你一定已经发现了，当我们想要通过过滤器处理数据时，只需要将数据通过管道符传递给对应的过滤器即可，当然，过滤器不只有upper，还有很多其他的过滤器，这些过滤器有些是jinja2内置的，有些是ansible特有的，如果这些过滤器都不能满足你的需求，jinja2也支持自定义过滤器。
这篇文章我们就来总结一些常用的过滤器的用法，在总结时，不会区分它是jinja2内置的过滤器，还是ansible所独有的，我们总结的目的是在ansible中使用这些过滤器，如果你想要了解jinja2中有哪些内置过滤器，可以参考jinja2的官网链接，如下
http://jinja.pocoo.org/docs/2.10/templates/#builtin-filters
字符串操作有关的过滤器 - hosts: test70 remote_user: root vars: testvar: &amp;#34;abc123ABC 666&amp;#34; testvar1: &amp;#34; abc &amp;#34; testvar2: &amp;#39;123456789&amp;#39; testvar3: &amp;#34;1a2b,@#$%^&amp;amp;&amp;#34; tasks: - debug: #将字符串转换成纯大写 msg: &amp;#34;{{ testvar | upper }}&amp;#34; - debug: #将字符串转换成纯小写 msg: &amp;#34;{{ testvar | lower }}&amp;#34; - debug: #将字符串变成首字母大写,之后所有字母纯小写 msg: &amp;#34;{{ testvar | capitalize }}&amp;#34; - debug: #将字符串反转 msg: &amp;#34;{{ testvar | reverse }}&amp;#34; - debug: #返回字符串的第一个字符 msg: &amp;#34;{{ testvar | first }}&amp;#34; - debug: #返回字符串的最后一个字符 msg: &amp;#34;{{ testvar | last }}&amp;#34; - debug: #将字符串开头和结尾的空格去除 msg: &amp;#34;{{ testvar1 | trim }}&amp;#34; - debug: #将字符串放在中间，并且设置字符串的长度为30，字符串两边用空格补齐30位长 msg: &amp;#34;{{ testvar1 | center(width=30) }}&amp;#34; - debug: #返回字符串长度,length与count等效,可以写为count msg: &amp;#34;{{ testvar2 | length }}&amp;#34; - debug: #将字符串转换成列表，每个字符作为一个元素 msg: &amp;#34;{{ testvar3 | list }}&amp;#34; - debug: #将字符串转换成列表，每个字符作为一个元素，并且随机打乱顺序 #shuffle的字面意思为洗牌 msg: &amp;#34;{{ testvar3 | shuffle }}&amp;#34; - debug: #将字符串转换成列表，每个字符作为一个元素，并且随机打乱顺序 # 在随机打乱顺序时，将ansible_date_time.</description></item></channel></rss>