<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦的站点 – Playbook</title><link>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/Ansible/Playbook/</link><description>Recent content in Playbook on 断念梦的站点</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/Ansible/Playbook/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Playbook</title><link>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/Ansible/Playbook/Playbook/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/Ansible/Playbook/Playbook/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_intro.html">官方文档，Playbook指南-Playbook 介绍&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/playbook_guide/playbooks.html">官方文档，Playbook 指南-使用 Playbook&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://galaxy.ansible.com/">Ansible Galaxy&lt;/a> 类似于 playbook 仓库的地方&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/HA0vKnuKwKOaB5kdcYX9rg">公众号，任务中心之Ansible进阶篇&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>与通过命令行来执行 Ansbile 任务模式相比，Playbook 是 Ansible 执行任务的另一种方式，而且功能非常强大。&lt;/p>
&lt;p>playbook 可以通过定义一个或多个文件，然后让 ansible 使用这些文件来完成一系列复杂的任务。如果说通过命令行是对多台设备执行一个任务，那么 Playbook 则是可以对多台设备按顺序执行不同任务。&lt;/p>
&lt;p>playbook 称为&amp;quot;剧本&amp;quot;。每个 playbook 都包含一个或多个 plays(戏剧)。拿拍电影举例，一部电影会有一部“剧本 playbook”来描述电影情节，而整部电影都是由一场一场的“戏剧 play”拼凑起来的。每一场戏剧又需要执行多种“任务 task”(比如亲嘴、打架、聊天、上床~~~)&lt;/p>
&lt;p>首先，下面是一个 playbook 的样例。这个 playbook 中包含两个 play，一个叫 webservers，另一个叫 databases。其中 webservers 中包含两个 tasks，一个要使用 yum 模块执行动作，另一个要使用 template 模块，向文件中写入内容&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#204a87;font-weight:bold">hosts&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">webservers&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">remote_user&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">root&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">tasks&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">ensure apache is at the latest version&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">yum&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">httpd&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">state&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">latest&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">write the apache config file&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">template&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">src&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">/srv/httpd.j2&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">dest&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">/etc/httpd.conf&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>- &lt;span style="color:#204a87;font-weight:bold">hosts&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">databases&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">remote_user&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">root&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">tasks&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">ensure postgresql is at the latest version&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">yum&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">postgresql&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">state&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">latest&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">ensure that postgresql is started&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">service&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">postgresql&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">state&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>{&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>{&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">item } }&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">with_items&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">started&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 &lt;a href="https://galaxy.ansible.com/">Ansible Galaxy&lt;/a> 网站上，我们可以找到大量的社区已经编写好的 Playbook。&lt;/p>
&lt;h1 id="playbook-关键字">Playbook 关键字&lt;a class="td-heading-self-link" href="#playbook-%e5%85%b3%e9%94%ae%e5%ad%97" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/reference_appendices/playbooks_keywords.html">官方文档，参考与附录-Playbook 关键字&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>关键字是配置 Ansible 行为的几个来源之一。有关每个源的相对优先级的详细信息，请参阅控制 Ansible 的行为方式：优先级规则。&lt;/p>
&lt;ul>
&lt;li>hosts #&lt;/li>
&lt;li>tasks # 要在 Play 中执行的主要任务列表，这些任务在 &lt;code>roles 关键字定义的任务之后&lt;/code>，以及 &lt;code>post_tasks 关键字定义的任务之前&lt;/code> 执行&lt;/li>
&lt;li>roles #&lt;/li>
&lt;li>name #&lt;/li>
&lt;/ul>
&lt;h1 id="playbook-语法详解">Playbook 语法详解&lt;a class="td-heading-self-link" href="#playbook-%e8%af%ad%e6%b3%95%e8%af%a6%e8%a7%a3" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#204a87;font-weight:bold">hosts&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">STRING&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># 指定该playbook要操作的主机&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">tasks&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">STRING&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">#(可省略)指定该任务名称&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">MODULES&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># 指定该任务所要使用的模块名称&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">PARAMETER&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># 指定该模块参数&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>或&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#204a87;font-weight:bold">hosts&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">roles&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">RoleNameOne&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">RoleNameTwo&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="block-将多个-task-合并为一个进行统一处理">block 将多个 task 合并为一个进行统一处理&lt;a class="td-heading-self-link" href="#block-%e5%b0%86%e5%a4%9a%e4%b8%aa-task-%e5%90%88%e5%b9%b6%e4%b8%ba%e4%b8%80%e4%b8%aa%e8%bf%9b%e8%a1%8c%e7%bb%9f%e4%b8%80%e5%a4%84%e7%90%86" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>块允许对任务进行逻辑分组以及进行中的错误处理。您可以应用于单个任务的大多数内容（循环除外）都可以应用于块级，这也使设置任务通用的数据或指令变得更加容易。这并不意味着该指令会影响块本身，而是被块所包含的任务继承。即何时将应用于任务，而不是块本身。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">tasks&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Install, configure, and start Apache&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">block&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">install httpd and memcached&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">yum&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">httpd&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">memcached&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">state&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">present&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">apply the foo config template&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">template&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">src&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">templates/src.j2&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">dest&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">/etc/foo.conf&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">start service bar and enable it&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">service&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">bar&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">state&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">started&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">enabled&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">True&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">when&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">ansible_facts[&amp;#39;distribution&amp;#39;] == &amp;#39;CentOS&amp;#39;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">become&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">become_user&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">root&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">ignore_errors&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">yes&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="handler-任务处理器用于在执行任务时附加额外的任务">handler 任务处理器，用于在执行任务时附加额外的任务&lt;a class="td-heading-self-link" href="#handler-%e4%bb%bb%e5%8a%a1%e5%a4%84%e7%90%86%e5%99%a8%e7%94%a8%e4%ba%8e%e5%9c%a8%e6%89%a7%e8%a1%8c%e4%bb%bb%e5%8a%a1%e6%97%b6%e9%99%84%e5%8a%a0%e9%a2%9d%e5%a4%96%e7%9a%84%e4%bb%bb%e5%8a%a1" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_handlers.html">官方文档，使用 Ansible playbooks-Handlers: 任务 change 时运行操作&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>ansible 执行的每一个 task 都会报告该任务是否改变了目标，即 changed=true 或 changed=false。当 ansible 捕捉到 changed 为 true 的时候，则会触发一个 notify(通知)组件，该组件的作用就是用来调用指定的 handler。&lt;/p>
&lt;blockquote>
&lt;p>注意：通过 notify 调用的 handler 任务，只有&lt;strong>在所有任务全部完成后，才会执行&lt;/strong>。&lt;/p>
&lt;/blockquote>
&lt;p>handlers 示例：在 task 下定义 notify 来指定要调用的 handlers，需要与后面定义的 handlers 的 name 相同&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">tasks&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">copy template file to remote host&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">template&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">src=https://desistdaydream.github.io/etc/ansible/nginx.conf.j2 dest=/etc/nginx/nginx.conf&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">notify&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">restart nginx&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">test web page&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">copy&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">src=nginx/index.html.j2 dest=/usr/share/nginx/html/index.html&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">notify&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">restart nginx&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># 与handlers中的name相同才会调用成功&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>handlers 示例：定义 handlers，与定义 task 类似。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">handlers&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">restart nginx&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">service&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">name=nginx state=restarted&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">test web page&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">shell&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">curl -I http://192.168.100.10/index.html | grep 200 || /bin/false&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面的示例表示：当执行 template 模块的任务时，如果捕捉到 changed=true，那么就会触发 notify，如果分发的 index.html 改变了，那么也重启 nginx(当然这是没必要的，仅做示例演示)&lt;/p>
&lt;p>Note：notify 是在执行完一个 play 中所有 task 后被触发的，在一个 play 中也只会被触发一次。意味着如果一个 play 中有多个 task 出现了 changed=true，它也只会触发一次。例如上面的示例中，向 nginx 复制配置文件和复制 index.html 时如果都发生了改变，都会触发重启 apache 操作。但是只会在执行完 play 后重启一次，以避免多余的重启。&lt;/p>
&lt;h2 id="playbook-中的错误处理">playbook 中的错误处理&lt;a class="td-heading-self-link" href="#playbook-%e4%b8%ad%e7%9a%84%e9%94%99%e8%af%af%e5%a4%84%e7%90%86" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>通常情况下, 当出现失败时 Ansible 会停止在宿主机上执行.有时候,你会想要继续执行下去.为此 你需要像这样编写任务:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">this will not be counted as a failure&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">command&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">/bin/false&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">ignore_errors&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">yes&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># 使用ignore_errors来忽略该任务失败后终止ansbile的效果&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="ansible-artifacts">Ansible Artifacts&lt;a class="td-heading-self-link" href="#ansible-artifacts" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>在 Ansible Playbook 中，可以将 task、playbook、role、var、各种文件 等等统一抽象为 &lt;strong>Artifacts(工件)&lt;/strong>&lt;/p>
&lt;h2 id="复用-ansible-工件">复用 Ansible 工件&lt;a class="td-heading-self-link" href="#%e5%a4%8d%e7%94%a8-ansible-%e5%b7%a5%e4%bb%b6" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_reuse.html">官方文档，Playbook 指南-复用 Ansible 工件&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>我们可以在一个非常大的文件中编写简单的playbook，大多数用户首先学习单个文件的方法。然而，将自动化工作分解为较小的文件是组织复杂任务集并重复使用它们的绝佳方法。更小，更分散的 Artifacts 让您在多个playbook中多次使用相同的变量、任务和操作以解决不同的用例。您可以在多个父playbook中使用分布式 Artifacts，甚至可以在一个playbook中多次使用。例如，您可能希望在几个不同的playbook中更新客户数据库。如果您将与更新数据库相关的所有任务放在一个任务文件或角色中，您可以在许多playbook中重复使用它们，同时只需在一个地方维护它们。&lt;/p>
&lt;p>Ansible 提供四种可分发、可重复使用的 Artifacts：&lt;/p>
&lt;ul>
&lt;li>Variables files&lt;/li>
&lt;li>Task files&lt;/li>
&lt;li>palybooks&lt;/li>
&lt;li>roles&lt;/li>
&lt;/ul>
&lt;h3 id="include-与-import-的区别">include 与 import 的区别&lt;a class="td-heading-self-link" href="#include-%e4%b8%8e-import-%e7%9a%84%e5%8c%ba%e5%88%ab" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>&lt;a href="https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_reuse.html#comparing-includes-and-imports-dynamic-and-static-re-use">https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_reuse.html#comparing-includes-and-imports-dynamic-and-static-re-use&lt;/a>&lt;/p>
&lt;p>重用分布式 Ansible 工件的每种方法都有优点和局限性。您可以为某些剧本选择动态重用，为其他剧本选择静态重用。尽管您可以在单个剧本中同时使用动态和静态重用，但最好为每个剧本选择一种方法。混合静态和动态重用可能会在您的剧本中引入难以诊断的错误。此表总结了主要差异，因此您可以为您创建的每个剧本选择最佳方法。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>Include_*&lt;/th>
&lt;th>Import_*&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Type of re-use&lt;/td>
&lt;td>Dynamic&lt;/td>
&lt;td>Static&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>When processed&lt;/td>
&lt;td>At runtime, when encountered&lt;/td>
&lt;td>Pre-processed during playbook parsing&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Task or play&lt;/td>
&lt;td>All includes are tasks&lt;/td>
&lt;td>&lt;code>import_playbook&lt;/code> cannot be a task&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Task options&lt;/td>
&lt;td>Apply only to include task itself&lt;/td>
&lt;td>Apply to all child tasks in import&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Calling from loops&lt;/td>
&lt;td>Executed once for each loop item&lt;/td>
&lt;td>Cannot be used in a loop&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Using &lt;code>--list-tags&lt;/code>&lt;/td>
&lt;td>Tags within includes not listed&lt;/td>
&lt;td>All tags appear with &lt;code>--list-tags&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Using &lt;code>--list-tasks&lt;/code>&lt;/td>
&lt;td>Tasks within includes not listed&lt;/td>
&lt;td>All tasks appear with &lt;code>--list-tasks&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Notifying handlers&lt;/td>
&lt;td>Cannot trigger handlers within includes&lt;/td>
&lt;td>Can trigger individual imported handlers&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Using &amp;ndash;start-at-task&lt;/td>
&lt;td>Cannot start at tasks within includes&lt;/td>
&lt;td>Can start at imported tasks&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Using inventory variables&lt;/td>
&lt;td>Can &lt;code>include_*: {{ inventory_var }}&lt;/code>&lt;/td>
&lt;td>Cannot &lt;code>import_*: {{ inventory_var }}&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>With playbooks&lt;/td>
&lt;td>No &lt;code>include_playbook&lt;/code>&lt;/td>
&lt;td>Can import full playbooks&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>With variables files&lt;/td>
&lt;td>Can include variables files&lt;/td>
&lt;td>Use &lt;code>vars_files:&lt;/code> to import variables&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Docs: Playbook Role(角色)</title><link>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/Ansible/Playbook/Playbook-Role%E8%A7%92%E8%89%B2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/Ansible/Playbook/Playbook-Role%E8%A7%92%E8%89%B2/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_reuse_roles.html">官方文档，Playbook 指南-Roles&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://ansible-tran.readthedocs.io/en/latest/docs/playbooks_roles.html">Ansible 中文权威指南，Playbooks-Playbook 角色和 Incluede 语句&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>刚开始学习运用 playbook 时，可能会把 playbook 写成一个内容很多的文件，这种情况不利于扩展和复用。这时候可以使用一种方式，将这个复杂的 playbook 模块化，即拆分一个复杂的 playbook 文件成多个零散的小文件，将其组合成一个一个具有不同功能的 playbook。&lt;/p>
&lt;p>这时候就需要用到 ansible playbook 的 roles 概念了。roles 实际上是对 playbook 进行逻辑上的划分，主要依赖于目录的命名和摆放，一个 Role 就是一个目录，Role 名与目录名相同。&lt;/p>
&lt;p>当我们开始思考这些概念：tasks, handlers, variables 等等，是否可以将它们抽象为一个更大的概念呢。我们考虑的不再是”将这些 tasks，handlers，variables 等等应用到这些 hosts 中”，而是有了更抽象的概念，比如：”这些 hosts 是 dbservers” 或者 “那些 hosts 是 webservers”（注：dbserver，webservers 即是”角色”）。这种思考方式在编程中被称为”封装”，将其中具体的功能封装了起来。举个例子，你会开车但并不需要知道引擎的工作原理（注：同样的道理，我们只需要知道”这些 hosts 是 dbservers”，而不需要知道其中有哪些 task，handlers 等）。&lt;/p>
&lt;h1 id="roles-目录结构">roles 目录结构&lt;a class="td-heading-self-link" href="#roles-%e7%9b%ae%e5%bd%95%e7%bb%93%e6%9e%84" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>下面是一个最基本的 roles 目录结构。在这个目录结构里，有两个 roles，一个名为 common，另一个名为 webservers&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>site.yml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>webservers.yml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fooservers.yml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>roles/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> common/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tasks/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> handlers/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> files/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> templates/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vars/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> defaults/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> meta/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> webservers/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tasks/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> defaults/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> meta/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>每个目录的作用如下&lt;/p>
&lt;ul>
&lt;li>&lt;strong>tasks&lt;/strong> # 包含角色要执行任务的主要列表&lt;/li>
&lt;li>&lt;strong>handlers&lt;/strong> # 包含 handlers，该 role 甚至该 role 之外的任何地方都可以使用这些 handlers&lt;/li>
&lt;li>&lt;strong>defaults&lt;/strong> # 包含该 role 的变量的默认值 (see Using Variables for more information).&lt;/li>
&lt;li>&lt;strong>vars&lt;/strong> # 包含该 role 的变量的自定义值 (see Using Variables for more information).&lt;/li>
&lt;li>&lt;strong>files&lt;/strong> # 包含可以通过该 role 部署的文件。比如通过 script 模块使用的脚本。&lt;/li>
&lt;li>&lt;strong>templates&lt;/strong> # 包含可以通过该 role 部署的模板&lt;/li>
&lt;li>&lt;strong>meta&lt;/strong> # 为该 role 定义的一些元数据&lt;/li>
&lt;/ul>
&lt;p>Note：如果想让这些目录生效，需要在 tasks、handlers、vars、defaults、meta 目录中保存名为 main.yml 的文件，main.yml 的作用详见下文。如果没有文件或目录不存在，则会忽略&lt;/p>
&lt;h2 id="使用-roles">使用 roles&lt;a class="td-heading-self-link" href="#%e4%bd%bf%e7%94%a8-roles" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>在 playbook.yaml 文件中，使用关键字 roles 即可调用指定的 roles 内的工作内容&lt;/p>
&lt;pre>&lt;code>- hosts: webservers
roles:
- common
- webservers
&lt;/code>&lt;/pre>
&lt;p>roles 下指定的每个值(roles 名)，ansbile 都会去与该值同名的目录中获取其中所有文件，这其中遵循如下规则：&lt;/p>
&lt;ul>
&lt;li>如果 roles/X/tasks/main.yml 存在, 则其中列出的 task 将添加到 play 中。&lt;/li>
&lt;li>如果 roles/X/handlers/main.yml 存在, 则其中列出的 handler 都将添加到 play 中&lt;/li>
&lt;li>如果 roles/X/vars/main.yml 存在, 则其中列出的 variables 都将添加到 play 中&lt;/li>
&lt;li>如果 roles/X/defaults/main.yml 存在, 则其中列出的默认变量值会被添加到 play 中，如果在其他地方没有指定其中列出的变量的值，则会用到默认值&lt;/li>
&lt;li>如果 roles/X/meta/main.yml 存在,则其中列出的所有角色依赖项都将添加到角色列表中&lt;/li>
&lt;li>task 中 copy，script，template 或 include task 模块都会自动引用 role/X/{files,templates,tasks} 目录中文件，而不必使用绝对路径设置。&lt;/li>
&lt;/ul>
&lt;p>Note：&lt;/p>
&lt;ul>
&lt;li>其中 X 为 Role 名字&lt;/li>
&lt;li>ansible 会从以下几个目录中寻找与 roles 同名的目录来获取其中的内容
&lt;ul>
&lt;li>./roles # playbook.yaml 文件所在的目录寻找 roles 目录&lt;/li>
&lt;li>/etc/ansbile/roles # 默认的系统级别的 roles 目录&lt;/li>
&lt;li>/root/.ansible/roles&lt;/li>
&lt;li>/usr/share/ansible/roles&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>也可以在 ansible 的配置文件 ansbile.cfg 中修改 roles_path 字段来指定默认系统级别 role 的位置&lt;/li>
&lt;/ul>
&lt;h1 id="roles-目录结构的最佳示例">roles 目录结构的最佳示例&lt;a class="td-heading-self-link" href="#roles-%e7%9b%ae%e5%bd%95%e7%bb%93%e6%9e%84%e7%9a%84%e6%9c%80%e4%bd%b3%e7%a4%ba%e4%be%8b" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/user_guide/sample_setup.html">官方文档，用户指南-配置样例&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>production &lt;span style="color:#8f5902;font-style:italic"># 适用于 production 的 Inventory 文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>staging &lt;span style="color:#8f5902;font-style:italic"># 适用于 staging 的 Inventory 文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>group_vars/ &lt;span style="color:#8f5902;font-style:italic"># 在这里定义组的变量&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> group1.yml &lt;span style="color:#8f5902;font-style:italic"># 文件名以组名命名，group1.yml 是适用于 group1 组的变量&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> group2.yml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>host_vars/ &lt;span style="color:#8f5902;font-style:italic"># 在这里定义主机变量&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hostname1.yml &lt;span style="color:#8f5902;font-style:italic"># 文件名以主机名命名，hostname1.yml 是适用于 hostname1 主机的变量&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hostname2.yml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>library/ &lt;span style="color:#8f5902;font-style:italic"># if any custom modules, put them here (optional)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>module_utils/ &lt;span style="color:#8f5902;font-style:italic"># if any custom module_utils to support modules, put them here (optional)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>filter_plugins/ &lt;span style="color:#8f5902;font-style:italic"># if any custom filter plugins, put them here (optional)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>site.yml &lt;span style="color:#8f5902;font-style:italic"># master playbook&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>webservers.yml &lt;span style="color:#8f5902;font-style:italic"># playbook for webserver tier&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dbservers.yml &lt;span style="color:#8f5902;font-style:italic"># playbook for dbserver tier&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 当需要管理多个 Role 时，可以在 roles/ 目录中&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>roles/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> common/ &lt;span style="color:#8f5902;font-style:italic"># 名为 common 的角色&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tasks/ &lt;span style="color:#8f5902;font-style:italic">#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> main.yml &lt;span style="color:#8f5902;font-style:italic"># &amp;lt;-- tasks file can include smaller files if warranted&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> handlers/ &lt;span style="color:#8f5902;font-style:italic">#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> main.yml &lt;span style="color:#8f5902;font-style:italic"># &amp;lt;-- handlers file&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> templates/ &lt;span style="color:#8f5902;font-style:italic"># &amp;lt;-- files for use with the template resource&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ntp.conf.j2 &lt;span style="color:#8f5902;font-style:italic"># &amp;lt;------- templates end in .j2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> files/ &lt;span style="color:#8f5902;font-style:italic">#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bar.txt &lt;span style="color:#8f5902;font-style:italic"># &amp;lt;-- files for use with the copy resource&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> foo.sh &lt;span style="color:#8f5902;font-style:italic"># &amp;lt;-- script files for use with the script resource&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vars/ &lt;span style="color:#8f5902;font-style:italic">#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> main.yml &lt;span style="color:#8f5902;font-style:italic"># &amp;lt;-- variables associated with this role&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> defaults/ &lt;span style="color:#8f5902;font-style:italic">#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> main.yml &lt;span style="color:#8f5902;font-style:italic"># &amp;lt;-- default lower priority variables for this role&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> meta/ &lt;span style="color:#8f5902;font-style:italic">#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> main.yml &lt;span style="color:#8f5902;font-style:italic"># &amp;lt;-- role dependencies&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> library/ &lt;span style="color:#8f5902;font-style:italic"># roles can also include custom modules&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> module_utils/ &lt;span style="color:#8f5902;font-style:italic"># roles can also include custom module_utils&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lookup_plugins/ &lt;span style="color:#8f5902;font-style:italic"># or other types of plugins, like lookup in this case&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> webtier/ &lt;span style="color:#8f5902;font-style:italic"># 名为 webtier 的角色，其内的机构与 common 相同&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ......
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> monitoring/ &lt;span style="color:#8f5902;font-style:italic"># 同上&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ......
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fooapp/ &lt;span style="color:#8f5902;font-style:italic"># 同上&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ......
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="group_vars-与-host_vars-目录">group_vars 与 host_vars 目录&lt;a class="td-heading-self-link" href="#group_vars-%e4%b8%8e-host_vars-%e7%9b%ae%e5%bd%95" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>组变量与主机变量的文件除了可以放在 Palybook 的根目录，还可以放在存放 Inventory 文件的目录中，比如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>inventories/ &lt;span style="color:#8f5902;font-style:italic"># 这里存放 Inventory 目录，通过在命令行中使用 -i 选项以指定 Inventory 文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> production/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hosts &lt;span style="color:#8f5902;font-style:italic"># inventory file for production servers&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> group_vars/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> group1.yml &lt;span style="color:#8f5902;font-style:italic"># here we assign variables to particular groups&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> group2.yml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> host_vars/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hostname1.yml &lt;span style="color:#8f5902;font-style:italic"># here we assign variables to particular systems&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hostname2.yml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> staging/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hosts &lt;span style="color:#8f5902;font-style:italic"># inventory file for staging environment&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> group_vars/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> group1.yml &lt;span style="color:#8f5902;font-style:italic"># here we assign variables to particular groups&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> group2.yml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> host_vars/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stagehost1.yml &lt;span style="color:#8f5902;font-style:italic"># here we assign variables to particular systems&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stagehost2.yml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>library/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>module_utils/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>filter_plugins/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>site.yml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>webservers.yml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dbservers.yml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>roles/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> common/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> webtier/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> monitoring/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fooapp/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>至于 group_vars 与 host_vars 在不同目录的优先级可以参考 [Ansible 变量-优先级](/docs/9.运维/Ansible/Ansible%20Variables(变量).md Variables(变量).md) 部分&lt;/p></description></item><item><title>Docs: Variables(变量)</title><link>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/Ansible/Playbook/Variables%E5%8F%98%E9%87%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/Ansible/Playbook/Variables%E5%8F%98%E9%87%8F/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/user_guide/playbooks_variables.html">官方文档，用户指南-目录-使用变量&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="变量基本的定义与引用方式">变量基本的定义与引用方式&lt;a class="td-heading-self-link" href="#%e5%8f%98%e9%87%8f%e5%9f%ba%e6%9c%ac%e7%9a%84%e5%ae%9a%e4%b9%89%e4%b8%8e%e5%bc%95%e7%94%a8%e6%96%b9%e5%bc%8f" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>变量名应为字母、数字、下划线。并且始终应该以字母开头。&lt;/p>
&lt;p>基础的定义方式是在一个 play 中使用 vars 关键字定义变量，示例如下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#204a87;font-weight:bold">host&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">webservers&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">vars&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">http_port&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">80&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># 定义一个名为http_port的变量，值为80&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">tasks&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">debug&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note: vars 关键字可以用在 host 环境中，也可以用在 tasks 环境中，用在 tasks 环境时，则变量仅对当前任务生效&lt;/p>
&lt;p>下面是一个在角色中定义字典类型变量的样例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">~]# cat roles/test/defaults/main.yml&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">docker&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">version&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">18.06.2&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">dataDir&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">/var/lib/docker&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">registryMirrors&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">https://ac1rmo5p.mirror.aliyuncs.com&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">execOpts&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#4e9a06">&amp;#39;native.cgroupdriver=systemd&amp;#39;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">insecureRegistries&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#0000cf;font-weight:bold">100.64.2.52&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">9999&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#0000cf;font-weight:bold">100.64.1.31&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">9999&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="变量的引用方式">变量的引用方式&lt;a class="td-heading-self-link" href="#%e5%8f%98%e9%87%8f%e7%9a%84%e5%bc%95%e7%94%a8%e6%96%b9%e5%bc%8f" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>一般情况使用 &lt;code>{{ VarName }}&lt;/code> 来引用变量，特殊情况不用加 &lt;code>{{ }}&lt;/code> 而可以直接引用，比如在某些控制结构(比如 when)的语句中。&lt;/p>
&lt;p>变量可以通过两种方式引用字典内特定字段的变量&lt;/p>
&lt;ul>
&lt;li>使用方括号 [] 进行引用
&lt;ul>
&lt;li>docker[&amp;lsquo;registryMirrors&amp;rsquo;] 变量的值为&lt;a href="https://ac1rmo5p.mirror.aliyuncs.com">https://ac1rmo5p.mirror.aliyuncs.com&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>使用点号 . 进行引用
&lt;ul>
&lt;li>docker.registryMirrors 变量的值为&lt;a href="https://ac1rmo5p.mirror.aliyuncs.com">https://ac1rmo5p.mirror.aliyuncs.com&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Note：如果使用 点号 引用变量可能会引起问题，因为会与 python 字典的属性和方法冲突。所以，尽量使用方括号来引用变量&lt;/p>
&lt;h1 id="特殊变量">特殊变量&lt;a class="td-heading-self-link" href="#%e7%89%b9%e6%ae%8a%e5%8f%98%e9%87%8f" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="fact-变量">fact 变量&lt;a class="td-heading-self-link" href="#fact-%e5%8f%98%e9%87%8f" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>关闭 fact 变量&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">gather_facts&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">no&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Templates 模板(Jinja2)</title><link>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/Ansible/Playbook/Templates-%E6%A8%A1%E6%9D%BFJinja2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/Ansible/Playbook/Templates-%E6%A8%A1%E6%9D%BFJinja2/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/user_guide/playbooks_templating.html">官方文档,用户指南-传统目录-使用剧本-模板(Jinja2)&lt;/a>&lt;/li>
&lt;li>朱双印博客,jinja2 模板
&lt;ul>
&lt;li>&lt;a href="https://www.zsythink.net/archives/2999">https://www.zsythink.net/archives/2999&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.zsythink.net/archives/3021">https://www.zsythink.net/archives/3021&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.zsythink.net/archives/3037">https://www.zsythink.net/archives/3037&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.zsythink.net/archives/3051">https://www.zsythink.net/archives/3051&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://www.junmajinlong.com/ansible/9_power_of_jinja2/">骏马金龙，9. 如虎添翼的力量：解锁强大的 Jinja2 模板&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Jinja2 的内容较多，但对于学习 Ansible 来说，只需要学习其中和 template 相关的一部分 (其它的都和开发有关或 Ansible 中用不上) 以及 Ansible 对 Jinja2 的扩展功能即可。&lt;/p>
&lt;p>详见 Python 编程语言部分的 《&lt;a href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/Jinja.md">Jinja&lt;/a>》章节&lt;/p>
&lt;p>尽管在编写 Playbook 时可以不用在意是否要用 Jinja2，但 Ansible 的运行离不开 Jinja2，当 Ansible 开始执行 playbook 或任务时，总是会先使用 Jinja2 去解析所有指令的值，然后再执行任务。另一方面，在编写任务的过程中也会经常用到 Jinja2 来实现一些需求。所以，Jinja2 可以重要到成为 Ansible 的命脉。&lt;/p>
&lt;p>严格地说，playbook 中所有地方都使用了 Jinja2，包括几乎所有指令的值、template 模板文件、copy 模块的 content 指令的值、lookup 的 template 插件、等等。它们会先经过 Jinja2 渲染，然后再执行相关任务。&lt;/p>
&lt;p>例如，下面的 playbook 中分别使用了三种 Jinja2 特殊符号。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">---&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>- &lt;span style="color:#204a87;font-weight:bold">hosts&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">localhost&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">gather_facts&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">no&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">tasks&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">debug&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">msg&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;hello world, {{inventory_hostname}}&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">debug&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">msg&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;hello world{# comment #}&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">debug&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">msg&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;{% if True %}hello world{% endif %}&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>注：jinja2 原生的布尔值应当是小写的 true 和 false，但也支持首字母大写形式的 True 和 False。&lt;/p>
&lt;/blockquote>
&lt;p>执行结果：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>TASK [debug] ************************
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ok: [localhost] =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;msg&amp;#34;: &amp;#34;hello world, localhost&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TASK [debug] ************************
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ok: [localhost] =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;msg&amp;#34;: &amp;#34;hello world&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TASK [debug] ************************
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ok: [localhost] =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;msg&amp;#34;: &amp;#34;hello world&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>再比如模板文件 a.conf.j2 中使用这三种特殊语法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#8f5902;font-style:italic"># Comment this line #}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">variable value&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>{{&lt;span style="color:#000">inventory_hostname}}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>{&lt;span style="color:#000">% if True %}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">in if tag code&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>{{&lt;span style="color:#000">inventory_hostname}}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>{&lt;span style="color:#000">% endif %}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>对应的模板渲染任务：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#204a87;font-weight:bold">template&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">src&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">a.conf.j2&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">dest&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">/tmp/a.conf&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行后，将在 / tmp/a.conf 中生成如下内容：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">variable value&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">localhost&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">in if tag code&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">localhost&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>有些指令比较特殊，它们已经使用隐式的 {{}} 进行了预包围，例如 debug 模块的 var 参数、条件判断&lt;code>when&lt;/code>指令，所以这时就不要手动使用 {{}} 再包围指令的值。例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#204a87;font-weight:bold">debug&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">var&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">inventory_hostname&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>但有时候也确实是需要在 var 或 when 中的一部分使用 {{}} 来包围表示这是一个变量或是一个表达式，而非字符串的。例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#204a87;font-weight:bold">debug&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">var&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">hostvars[&amp;#39;{{php}}&amp;#39;]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">vars&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">php&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">192.168.200.143&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="ansible-扩展的测试函数">Ansible 扩展的测试函数&lt;a class="td-heading-self-link" href="#ansible-%e6%89%a9%e5%b1%95%e7%9a%84%e6%b5%8b%e8%af%95%e5%87%bd%e6%95%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>模板引擎是多功能的，可以用在很多方面，所以 Jinja2 自身置的大多数功能都是通用功能。使用 Jinja2 的工具可能会对 Jinja2 进行功能扩展，比如 Flask 扩展了一些功能，Ansible 也对 Jinja2 扩展了一些功能。&lt;/p>
&lt;p>Ansible 扩展的测试函数官方手册：&lt;a href="https://docs.ansible.com/ansible/latest/user_guide/playbooks_tests.html">https://docs.ansible.com/ansible/latest/user_guide/playbooks_tests.html&lt;/a>。&lt;/p>
&lt;h3 id="测试字符串">测试字符串&lt;a class="td-heading-self-link" href="#%e6%b5%8b%e8%af%95%e5%ad%97%e7%ac%a6%e4%b8%b2" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>Ansible 提供了三个正则测试函数：&lt;/p>
&lt;ul>
&lt;li>match()&lt;/li>
&lt;li>search()&lt;/li>
&lt;li>regex()&lt;/li>
&lt;/ul>
&lt;p>它们都返回布尔值，匹配成功时返回 true。&lt;/p>
&lt;p>其中，match() 要求从字符串的首字符开始匹配成功。&lt;/p>
&lt;p>例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&amp;#34;hello123world&amp;#34; is match(&amp;#34;\d+&amp;#34;) -&amp;gt; False
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;#34;hello123world&amp;#34; is match(&amp;#34;.*\d+&amp;#34;) -&amp;gt; True
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;#34;hello123world&amp;#34; is search(&amp;#34;\d+&amp;#34;) -&amp;gt; True
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;#34;hello123world&amp;#34; is regex(&amp;#34;\d+&amp;#34;) -&amp;gt; True
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="版本号大小比较">版本号大小比较&lt;a class="td-heading-self-link" href="#%e7%89%88%e6%9c%ac%e5%8f%b7%e5%a4%a7%e5%b0%8f%e6%af%94%e8%be%83" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>Ansible 作为配置服务、程序的配置管理工具，经常需要比较版本号的大小是否符合要求。Ansible 提供了一个&lt;code>version&lt;/code>测试函数可以用来测试版本号是否大于、小于、等于、不等于给定的版本号。&lt;/p>
&lt;p>语法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>version(&amp;#39;VERSION&amp;#39;,CMP)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中 CMP 可以是如下几种：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&amp;lt;, lt, &amp;lt;=, le, &amp;gt;, gt, &amp;gt;=, ge, ==, =, eq, !=, &amp;lt;&amp;gt;, ne
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>{{ ansible_facts[&amp;#34;distribution_version&amp;#34;] is version(&amp;#34;7.5&amp;#34;,&amp;#34;&amp;lt;=&amp;#34;) }}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>判断操作系统版本号是否小于等于 7.5。&lt;/p>
&lt;h3 id="子集父集测试">子集、父集测试&lt;a class="td-heading-self-link" href="#%e5%ad%90%e9%9b%86%e7%88%b6%e9%9b%86%e6%b5%8b%e8%af%95" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>&lt;code>A is subset(B)&lt;/code>测试 A 是否是 B 的子集&lt;/li>
&lt;li>&lt;code>A is superset(B)&lt;/code>测试 A 是否是 B 的父集&lt;/li>
&lt;/ul>
&lt;p>例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#204a87;font-weight:bold">debug&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">msg&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#39;{{[1,2,3] is subset([1,2,3,4])}}&amp;#39;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="成员测试">成员测试&lt;a class="td-heading-self-link" href="#%e6%88%90%e5%91%98%e6%b5%8b%e8%af%95" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>Jinja2 自己有一个&lt;code>in&lt;/code>操作符可以做成员测试，Ansible 另外还实现了一个 contains 测试函数，主要目的是为了结合 select、reject、selectattr 和 rejectattr 筛选器。&lt;/p>
&lt;p>官方给了一个示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">vars&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">lacp_groups&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">master&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">lacp0&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">network&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">10.65.100.0&lt;/span>&lt;span style="color:#000">/24&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">gateway&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">10.65.100.1&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">dns4&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#0000cf;font-weight:bold">10.65.100.10&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#0000cf;font-weight:bold">10.65.100.11&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">interfaces&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">em1&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">em2&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">master&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">lacp1&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">network&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">10.65.120.0&lt;/span>&lt;span style="color:#000">/24&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">gateway&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">10.65.120.1&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">dns4&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#0000cf;font-weight:bold">10.65.100.10&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#0000cf;font-weight:bold">10.65.100.11&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">interfaces&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">em3&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">em4&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">tasks&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">debug&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">msg&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;{{ (lacp_groups|selectattr(&amp;#39;interfaces&amp;#39;, &amp;#39;contains&amp;#39;, &amp;#39;em1&amp;#39;)|first).master }}&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>此外，Ansible 还实现了&lt;code>all&lt;/code>和&lt;code>any&lt;/code>测试函数，&lt;code>all()&lt;/code>测试表示当序列中所有元素都返回 true 时，all() 返回 true，&lt;code>any()&lt;/code>测试表示当序列中只要有元素返回 true，any() 就返回 true。&lt;/p>
&lt;p>仍然是官方给的示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">mylist&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#4e9a06">&amp;#34;{{ 3 == 3 }}&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">True&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">myotherlist&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">False&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">True&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">tasks&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">debug&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">msg&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;all are true!&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">when&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">mylist is all&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">debug&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">msg&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;at least one is true&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">when&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">myotherlist is any&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="测试文件">测试文件&lt;a class="td-heading-self-link" href="#%e6%b5%8b%e8%af%95%e6%96%87%e4%bb%b6" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>Ansible 提供了测试文件的相关函数：&lt;/p>
&lt;ul>
&lt;li>is exists：是否存在&lt;/li>
&lt;li>is directory：是否是目录&lt;/li>
&lt;li>is file：是否是普通文件&lt;/li>
&lt;li>is link：是否是软链接&lt;/li>
&lt;li>is abs：是否是绝对路径&lt;/li>
&lt;li>is same_file(F)：是否和 F 是硬链接关系&lt;/li>
&lt;li>is mount：是否是挂载点&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#204a87;font-weight:bold">debug&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">msg&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;path is a directory&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">when&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">mypath is directory&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>- &lt;span style="color:#204a87;font-weight:bold">debug&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">msg&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;path is {{ (mypath is abs)|ternary(&amp;#39;absolute&amp;#39;,&amp;#39;relative&amp;#39;)}}&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>- &lt;span style="color:#204a87;font-weight:bold">debug&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">msg&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;path is the same file as path2&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">when&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">mypath is same_file(path2)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>- &lt;span style="color:#204a87;font-weight:bold">debug&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">msg&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;path is a mount&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">when&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">mypath is mount&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="测试任务的执行状态">测试任务的执行状态&lt;a class="td-heading-self-link" href="#%e6%b5%8b%e8%af%95%e4%bb%bb%e5%8a%a1%e7%9a%84%e6%89%a7%e8%a1%8c%e7%8a%b6%e6%80%81" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>每个任务的执行结果都有 4 种状态：成功、失败、changed、跳过。&lt;/p>
&lt;p>Ansible 提供了相关的测试函数：&lt;/p>
&lt;ul>
&lt;li>succeeded、success&lt;/li>
&lt;li>failed、failure&lt;/li>
&lt;li>changed、change&lt;/li>
&lt;li>skipped、skip&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#204a87;font-weight:bold">shell&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">/usr/bin/foo&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">register&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">result&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">ignore_errors&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">True&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>- &lt;span style="color:#204a87;font-weight:bold">debug&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">msg&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;it failed&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">when&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">result is failed&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>- &lt;span style="color:#204a87;font-weight:bold">debug&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">msg&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;it changed&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">when&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">result is changed&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>- &lt;span style="color:#204a87;font-weight:bold">debug&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">msg&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;it succeeded in Ansible &amp;gt;= 2.1&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">when&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">result is succeeded&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>- &lt;span style="color:#204a87;font-weight:bold">debug&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">msg&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;it succeeded&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">when&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">result is success&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>- &lt;span style="color:#204a87;font-weight:bold">debug&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">msg&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;it was skipped&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">when&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">result is skipped&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="ansible-扩展的-filter">Ansible 扩展的 Filter&lt;a class="td-heading-self-link" href="#ansible-%e6%89%a9%e5%b1%95%e7%9a%84-filter" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>Ansible 扩展了非常多的 Filter，非常非常多，本来我只想介绍一部分。但是想到有些人不愿看英文，我还是将它们全都写出来，各位权当看中文手册好了。实际上它们也都非常容易，绝大多数筛选器用法几乎都不用动脑，一看便懂。&lt;/p>
&lt;h3 id="类型转换类筛选器">类型转换类筛选器&lt;a class="td-heading-self-link" href="#%e7%b1%bb%e5%9e%8b%e8%bd%ac%e6%8d%a2%e7%b1%bb%e7%ad%9b%e9%80%89%e5%99%a8" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>{{&amp;#34;123&amp;#34;|int}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{{&amp;#34;123&amp;#34;|float}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{{123|string}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{{range(1,6)|list}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{{123|bool}}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意，没有 dict 筛选器转换成字典类型。&lt;/p>
&lt;h3 id="获取当前时间点">获取当前时间点&lt;a class="td-heading-self-link" href="#%e8%8e%b7%e5%8f%96%e5%bd%93%e5%89%8d%e6%97%b6%e9%97%b4%e7%82%b9" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>Ansible 提供的 now() 可以获取当前时间点。&lt;/p>
&lt;p>例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#204a87;font-weight:bold">debug&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">msg&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;{{now()}}&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>得到结果：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span> ok: [localhost] =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;msg&amp;#34;: &amp;#34;2020-01-25 00:27:17.563627&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以指定输出的格式化字符串，支持的格式化字符串参考 python 官方手册：&lt;a href="https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior">https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior&lt;/a>。&lt;/p>
&lt;p>例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#204a87;font-weight:bold">debug&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">msg&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#39;{{now().strftime(&amp;#34;%Y-%m-%d %H:%M:%S.%f&amp;#34;)}}&amp;#39;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="yamljson-格式化">YAML、JSON 格式化&lt;a class="td-heading-self-link" href="#yamljson-%e6%a0%bc%e5%bc%8f%e5%8c%96" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>Ansible 提供了几个和 YAML、JSON 格式化相关的 Filter：&lt;/p>
&lt;pre>&lt;code>to_yaml
to_json
to_nice_yaml
to_nice_json
&lt;/code>&lt;/pre>
&lt;p>它们都可使用 indent 参数指定缩进的层次。&lt;/p>
&lt;p>&lt;code>to_yaml&lt;/code>和&lt;code>to_json&lt;/code>适用于调试，&lt;code>to_nice_yaml&lt;/code>和&lt;code>to_nice_json&lt;/code>适用于用户查看。&lt;/p>
&lt;p>例如：&lt;/p>
&lt;pre>&lt;code>- debug:
msg: '{{f1|to_nice_json(indent=2)}}'
vars:
f1:
father: &amp;quot;Bob&amp;quot;
mother: &amp;quot;Alice&amp;quot;
Children:
- Judy
- Tedy
&lt;/code>&lt;/pre>
&lt;h3 id="参数忽略">参数忽略&lt;a class="td-heading-self-link" href="#%e5%8f%82%e6%95%b0%e5%bf%bd%e7%95%a5" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>Ansible 提供了一个特殊变量 omit，可以用来忽略模块的参数效果。&lt;/p>
&lt;p>官方手册给了一个非常有代表性的示例，如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">touch files with an optional mode&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">file&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">dest&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;{{ item.path }}&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">state&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">touch&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">mode&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;{{ item.mode | default(omit) }}&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">loop&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">path&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">/tmp/foo&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">path&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">/tmp/bar&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">path&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">/tmp/baz&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">mode&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;0444&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>当所迭代的元素中不存在 mode 项，则使用默认值，默认值设置为特殊变量 omit，使得 file 模块的 mode 参数被忽略，相当于未书写该参数。只有给定了 mode 项时，mode 参数才生效。&lt;/p>
&lt;h3 id="列表元素连接">列表元素连接&lt;a class="td-heading-self-link" href="#%e5%88%97%e8%a1%a8%e5%85%83%e7%b4%a0%e8%bf%9e%e6%8e%a5" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>&lt;code>join&lt;/code>可以将列表各个元素根据指定的连接符连接起来：&lt;/p>
&lt;pre>&lt;code>{{ [1,2,3] | join(&amp;quot;-&amp;quot;) }}
&lt;/code>&lt;/pre>
&lt;h3 id="列表压平">列表压平&lt;a class="td-heading-self-link" href="#%e5%88%97%e8%a1%a8%e5%8e%8b%e5%b9%b3" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>前面的文章曾介绍过 flatten 筛选器，它可以将嵌套列表压平。&lt;/p>
&lt;p>例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#204a87;font-weight:bold">debug&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">msg&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;{{ [3, [4, 2] ] | flatten }}&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>- &lt;span style="color:#204a87;font-weight:bold">debug&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">msg&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;{{ [3, [4, [2]] ] | flatten(levels=1) }}&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="并集交集差集">并集、交集、差集&lt;a class="td-heading-self-link" href="#%e5%b9%b6%e9%9b%86%e4%ba%a4%e9%9b%86%e5%b7%ae%e9%9b%86" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>Ansible 提供了集合理论类的求值操作：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>unique：去重&lt;/p>
&lt;/li>
&lt;li>
&lt;p>union：并集，即两个集合中所有元素&lt;/p>
&lt;/li>
&lt;li>
&lt;p>intersect：交集，即两个集合中都存在的元素&lt;/p>
&lt;/li>
&lt;li>
&lt;p>difference：差集，即返回只在第一个集合中，不在第二个集合中的元素&lt;/p>
&lt;/li>
&lt;li>
&lt;p>symmetric_difference：对称差集，即返回两个集合中不重复的元素&lt;/p>
&lt;ul>
&lt;li>name: return [1,2,3]
debug:
msg: &amp;ldquo;{{ [1,2,3,2,1] | unique }}&amp;rdquo;&lt;/li>
&lt;li>name: return [1,2,3,4]
debug:
msg: &amp;ldquo;{{ [1,2,3] | union([2,3,4]) }}&amp;rdquo;&lt;/li>
&lt;li>name: return [2,3]
debug:
msg: &amp;ldquo;{{ [1,2,3] | intersect([2,3,4]) }}&amp;rdquo;&lt;/li>
&lt;li>name: return [1]
debug:
msg: &amp;ldquo;{{ [1,2,3] | difference([2,3,4]) }}&amp;rdquo;&lt;/li>
&lt;li>name: return [1,4]
debug:
msg: &amp;ldquo;{{ [1,2,3] | symmetric_difference([2,3,4]) }}&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="dict-和-list-转换">dict 和 list 转换&lt;a class="td-heading-self-link" href="#dict-%e5%92%8c-list-%e8%bd%ac%e6%8d%a2" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>&lt;code>dict2items()&lt;/code>：将字典转换为列表&lt;/li>
&lt;li>&lt;code>items2dict()&lt;/code>：将列表转换为字典&lt;/li>
&lt;/ul>
&lt;p>对于&lt;code>dict2items&lt;/code>，例如：&lt;/p>
&lt;pre>&lt;code>- debug:
msg: &amp;quot;{{ p | dict2items }}&amp;quot;
vars:
p:
name: junmajinlong
age: 28
&lt;/code>&lt;/pre>
&lt;p>得到：&lt;/p>
&lt;pre>&lt;code>[
{
&amp;quot;key&amp;quot;: &amp;quot;name&amp;quot;,
&amp;quot;value&amp;quot;: &amp;quot;junmajinlong&amp;quot;
},
{
&amp;quot;key&amp;quot;: &amp;quot;age&amp;quot;,
&amp;quot;value&amp;quot;: 28
}
]
&lt;/code>&lt;/pre>
&lt;p>对于&lt;code>items2dict&lt;/code>，例如：&lt;/p>
&lt;pre>&lt;code>- debug:
msg: &amp;quot;{{ p | items2dict }}&amp;quot;
vars:
p:
- key: name
value: junmajinlong
- key: age
value: 28
&lt;/code>&lt;/pre>
&lt;p>得到：&lt;/p>
&lt;pre>&lt;code>{
&amp;quot;age&amp;quot;: 28,
&amp;quot;name&amp;quot;: &amp;quot;junmajinlong&amp;quot;
}
&lt;/code>&lt;/pre>
&lt;p>默认情况下，&lt;code>dict2items&lt;/code>和&lt;code>items2dict&lt;/code>都使用&lt;code>key&lt;/code>和&lt;code>value&lt;/code>来转换，但它们都允许使用&lt;code>key_name&lt;/code>和&lt;code>value_name&lt;/code>自定义转换的名称。&lt;/p>
&lt;p>例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#204a87;font-weight:bold">debug&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">msg&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;{{ files | dict2items(key_name=&amp;#39;file&amp;#39;, value_name=&amp;#39;path&amp;#39;) }}&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">vars&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">files&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">users&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">/etc/passwd&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">groups&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">/etc/group&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>得到：&lt;/p>
&lt;pre>&lt;code>[
{
&amp;quot;file&amp;quot;: &amp;quot;users&amp;quot;,
&amp;quot;path&amp;quot;: &amp;quot;/etc/passwd&amp;quot;
},
{
&amp;quot;file&amp;quot;: &amp;quot;groups&amp;quot;,
&amp;quot;path&amp;quot;: &amp;quot;/etc/group&amp;quot;
}
]
&lt;/code>&lt;/pre>
&lt;h3 id="zip-和-zip_longest">zip 和 zip_longest&lt;a class="td-heading-self-link" href="#zip-%e5%92%8c-zip_longest" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>&lt;code>zip&lt;/code>和&lt;code>zip_longest&lt;/code>可以将多个列表的元素一一对应并组合起来。它们的区别是，zip 以短序列为主，&lt;code>zip_longest&lt;/code>以最长序列为主，缺失的部分使用 null 填充。&lt;/p>
&lt;p>例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">return [[1,&amp;#34;a&amp;#34;], [2,&amp;#34;b&amp;#34;]]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">debug&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">msg&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;{{ [1,2] | zip([&amp;#39;a&amp;#39;,&amp;#39;b&amp;#39;]) | list }}&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">return [[1,&amp;#34;a&amp;#34;], [2,&amp;#34;b&amp;#34;]]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">debug&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">msg&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;{{ [1,2] | zip([&amp;#39;a&amp;#39;,&amp;#39;b&amp;#39;,&amp;#39;c&amp;#39;]) | list }}&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">return [[1,&amp;#34;a&amp;#34;], [2,&amp;#34;b&amp;#34;], [null, &amp;#34;c&amp;#34;]]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">debug&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">msg&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;{{ [1,2] | zip_longest([&amp;#39;a&amp;#39;,&amp;#39;b&amp;#39;,&amp;#39;c&amp;#39;]) | list }}&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">return [[1,&amp;#34;a&amp;#34;,&amp;#34;aa&amp;#34;], [2,&amp;#34;b&amp;#34;,&amp;#34;bb&amp;#34;]]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">debug&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">msg&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;{{ [1,2] | zip([&amp;#39;a&amp;#39;,&amp;#39;b&amp;#39;], [&amp;#39;aa&amp;#39;,&amp;#39;bb&amp;#39;]) | list }}&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 Python 中经常会将 zip 的运算结果使用 dict() 构造成字典，Jinja2 中也可以：&lt;/p>
&lt;pre>&lt;code>- name: !unsafe 'return {&amp;quot;a&amp;quot;: 1, &amp;quot;b&amp;quot;: 2}'
debug:
msg: &amp;quot;{{ dict(['a','b'] | zip([1,2])) }}&amp;quot;
&lt;/code>&lt;/pre>
&lt;h3 id="子元素-subelements">子元素 subelements&lt;a class="td-heading-self-link" href="#%e5%ad%90%e5%85%83%e7%b4%a0-subelements" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>subelements 筛选器在前一章节详细解释过，这里不再介绍。&lt;/p>
&lt;h3 id="random-生成随机数">random 生成随机数&lt;a class="td-heading-self-link" href="#random-%e7%94%9f%e6%88%90%e9%9a%8f%e6%9c%ba%e6%95%b0" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>Jinja2 自身内置了一个 random 筛选器，Ansible 也有一个 random 筛选器，比 Jinja2 内置的定制性要更强一点。&lt;/p>
&lt;pre>&lt;code>&amp;quot;{{ ['a','b','c'] | random }}&amp;quot;
# =&amp;gt; 'c'
# 生成[0,60)的随机数
&amp;quot;{{ 60 | random }} * * * * root /script/from/cron&amp;quot;
# =&amp;gt; '21 * * * * root /script/from/cron'
# 生成[0,100)的随机数，步进为10
{{ 101 | random(step=10) }}
# =&amp;gt; 70
# 生成[1,100)的随机数，步进为10
{{ 101 | random(1, 10) }}
# =&amp;gt; 31
{{ 101 | random(start=1, step=10) }}
# =&amp;gt; 51
# 指定随机数种子。
# 下面指定为主机名，所以同主机生成的随机数相同，但不同主机的随机数不同
&amp;quot;{{ 60 | random(seed=inventory_hostname) }} * * * * root /script/from/cron&amp;quot;
&lt;/code>&lt;/pre>
&lt;h3 id="shuffle-打乱顺序">shuffle 打乱顺序&lt;a class="td-heading-self-link" href="#shuffle-%e6%89%93%e4%b9%b1%e9%a1%ba%e5%ba%8f" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/lmdoi2/1638717920341-716b62fb-5d66-43db-a26d-9a14afaa42fa.png" alt="image.png">&lt;/p>
&lt;h3 id="json_query">json_query&lt;a class="td-heading-self-link" href="#json_query" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>可查询 Json 格式的数据，&lt;code>json_query&lt;/code>在 Ansible 中非常实用，是必学 Filter 之一。&lt;/p>
&lt;p>Ansible 的&lt;code>json_query&lt;/code>基于 jmespath，所以需要先安装 jmespath：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>pip3 install jmespath
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>jmespath 的查询语法相关示例可参见其官方手册：&lt;/p>
&lt;ul>
&lt;li>入门手册： &lt;a href="http://jmespath.org/tutorial.html">http://jmespath.org/tutorial.html&lt;/a>&lt;/li>
&lt;li>示例：&lt;a href="http://jmespath.org/examples.html">http://jmespath.org/examples.html&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>下面我列出 Ansible 中给出的示例。&lt;/p>
&lt;p>例如，对于下面的数据结构：&lt;/p>
&lt;pre>&lt;code>{
&amp;quot;domain_definition&amp;quot;: {
&amp;quot;domain&amp;quot;: {
&amp;quot;cluster&amp;quot;: [
{&amp;quot;name&amp;quot;: &amp;quot;cluster1&amp;quot;},
{&amp;quot;name&amp;quot;: &amp;quot;cluster2&amp;quot;}
],
&amp;quot;server&amp;quot;: [
{
&amp;quot;name&amp;quot;: &amp;quot;server11&amp;quot;,
&amp;quot;cluster&amp;quot;: &amp;quot;cluster1&amp;quot;,
&amp;quot;port&amp;quot;: &amp;quot;8080&amp;quot;
},
{
&amp;quot;name&amp;quot;: &amp;quot;server12&amp;quot;,
&amp;quot;cluster&amp;quot;: &amp;quot;cluster1&amp;quot;,
&amp;quot;port&amp;quot;: &amp;quot;8090&amp;quot;
},
{
&amp;quot;name&amp;quot;: &amp;quot;server21&amp;quot;,
&amp;quot;cluster&amp;quot;: &amp;quot;cluster2&amp;quot;,
&amp;quot;port&amp;quot;: &amp;quot;9080&amp;quot;
},
{
&amp;quot;name&amp;quot;: &amp;quot;server22&amp;quot;,
&amp;quot;cluster&amp;quot;: &amp;quot;cluster2&amp;quot;,
&amp;quot;port&amp;quot;: &amp;quot;9090&amp;quot;
}
],
&amp;quot;library&amp;quot;: [
{
&amp;quot;name&amp;quot;: &amp;quot;lib1&amp;quot;,
&amp;quot;target&amp;quot;: &amp;quot;cluster1&amp;quot;
},
{
&amp;quot;name&amp;quot;: &amp;quot;lib2&amp;quot;,
&amp;quot;target&amp;quot;: &amp;quot;cluster2&amp;quot;
}
]
}
}
}
&lt;/code>&lt;/pre>
&lt;p>使用&lt;/p>
&lt;pre>&lt;code>{{ domain_definition | json_query('domain.cluster[*].name') }}
&lt;/code>&lt;/pre>
&lt;p>可以获取到名称 cluster1 和 cluster2。&lt;/p>
&lt;p>使用&lt;/p>
&lt;pre>&lt;code>{{ domain_definition | json_query('domain.server[*].name') }}
&lt;/code>&lt;/pre>
&lt;p>可以获取到 server11、server12、server21 和 server22。&lt;/p>
&lt;p>使用&lt;/p>
&lt;pre>&lt;code>- debug:
var: item
loop: &amp;quot;{{ domain_definition | json_query(server_name_cluster1_query) }}&amp;quot;
vars:
server_name_cluster1_query: &amp;quot;domain.server[?cluster=='cluster1'].port&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>可以迭代 8080 和 8090 两个端口。&lt;/p>
&lt;p>注意上面使用了问号&lt;code>?&lt;/code>，这表示后面的是一个表达式。&lt;/p>
&lt;p>使用&lt;/p>
&lt;pre>&lt;code>&amp;quot;{{domain_definition | json_query('domain.server[?cluster==`cluster2`].{name1: name, port1: port}')}}&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>可得到：&lt;/p>
&lt;pre>&lt;code>[
{
&amp;quot;name1&amp;quot;: &amp;quot;server21&amp;quot;,
&amp;quot;port1&amp;quot;: &amp;quot;9080&amp;quot;
},
{
&amp;quot;name1&amp;quot;: &amp;quot;server22&amp;quot;,
&amp;quot;port1&amp;quot;: &amp;quot;9090&amp;quot;
}
]
&lt;/code>&lt;/pre>
&lt;p>注意上面使用了反引号``而不是单双引号，因为单双引号都被使用过了，再使用就不方便，可读性也差。&lt;/p>
&lt;h3 id="ip-地址筛选">ip 地址筛选&lt;a class="td-heading-self-link" href="#ip-%e5%9c%b0%e5%9d%80%e7%ad%9b%e9%80%89" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>Ansible 提供了非常丰富的功能来完成 IP 地址的筛选，用法非常多，绝大多数关于 IP、网络地址类的计算、查询需求都能解决。&lt;/p>
&lt;p>使用它需要先安装 python 的 netaddr 包：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>pip3 install netaddr
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>完整用法参考官方手册：&lt;a href="https://docs.ansible.com/ansible/latest/user_guide/playbooks_filters_ipaddr.html#playbooks-filters-ipaddr">https://docs.ansible.com/ansible/latest/user_guide/playbooks_filters_ipaddr.html#playbooks-filters-ipaddr&lt;/a>。&lt;/p>
&lt;p>下面是我整理的一部分用法。&lt;/p>
&lt;p>检测是否是合理的 IP 地址：&lt;/p>
&lt;pre>&lt;code>{{ myvar | ipaddr }}
&lt;/code>&lt;/pre>
&lt;p>检测是否是合理的 ipv4 地址、ipv6 地址：&lt;/p>
&lt;pre>&lt;code>{{ myvar | ipv4 }}
{{ myvar | ipv6 }}
&lt;/code>&lt;/pre>
&lt;p>从列表中筛选出合理的 IP 地址：&lt;/p>
&lt;pre>&lt;code>test_list = ['192.24.2.1', 'host.fqdn', '::1', '192.168.32.0/24', 'fe80::100/10', True, '']
# {{ test_list | ipaddr }}
['192.24.2.1', '::1', '192.168.32.0/24', 'fe80::100/10']
# {{ test_list | ipv4 }}
['192.24.2.1', '192.168.32.0/24']
# {{ test_list | ipv6 }}
['::1', 'fe80::100/10']
&lt;/code>&lt;/pre>
&lt;p>获取 IP 地址部分：&lt;/p>
&lt;pre>&lt;code>{{ '192.0.2.1/24' | ipaddr('address') }}
{{ ipvar | ipv4('address') }}
{{ ipvar | ipv6('address') }}
&lt;/code>&lt;/pre>
&lt;p>检测或找出公网 IP 和私网 IP：&lt;/p>
&lt;pre>&lt;code># {{ test_list | ipaddr('public') }}
['192.24.2.1']
# {{ test_list | ipaddr('private') }}
['192.168.32.0/24', 'fe80::100/10']
&lt;/code>&lt;/pre>
&lt;h3 id="正则表达式筛选器">正则表达式筛选器&lt;a class="td-heading-self-link" href="#%e6%ad%a3%e5%88%99%e8%a1%a8%e8%be%be%e5%bc%8f%e7%ad%9b%e9%80%89%e5%99%a8" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>Ansible 提供了几个正则类的 Filter，主要有：&lt;/p>
&lt;ul>
&lt;li>&lt;code>regex_search&lt;/code>：普通正则匹配&lt;/li>
&lt;li>&lt;code>regex_findall&lt;/code>：全局匹配&lt;/li>
&lt;li>&lt;code>regex_replace&lt;/code>：正则替换&lt;/li>
&lt;/ul>
&lt;p>例如：&lt;/p>
&lt;pre>&lt;code>{{ 'foobar' | regex_search('(foo)') }}
# 匹配失败时返回空
{{ 'ansible' | regex_search('(foobar)') }}
# 多行模式、忽略大小写的匹配
{{ 'foo\nBAR' | regex_search(&amp;quot;^bar&amp;quot;, multiline=True, ignorecase=True) }}
# 全局匹配
# 每次匹配到的内容将存放在一个列表中
{{ 'DNS servers 8.8.8.8 and 8.8.4.4' | regex_findall('\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b') }}
# 正则替换
# &amp;quot;ansible&amp;quot; 替换为 &amp;quot;able&amp;quot;
{{ 'ansible' | regex_replace('^a.*i(.*)$', 'a\\1') }}
# &amp;quot;foobar&amp;quot; 替换为 &amp;quot;bar&amp;quot;
{{ 'foobar' | regex_replace('^f.*o(.*)$', '\\1') }}
# 使用命名捕获，&amp;quot;localhost:80&amp;quot; 替换为 &amp;quot;localhost, 80&amp;quot;
{{ 'localhost:80' | regex_replace('^(?P&amp;lt;host&amp;gt;.+):(?P&amp;lt;port&amp;gt;\\d+)$', '\\g&amp;lt;host&amp;gt;, \\g&amp;lt;port&amp;gt;') }}
# &amp;quot;localhost:80&amp;quot; 替换为 &amp;quot;localhost&amp;quot;
{{ 'localhost:80' | regex_replace(':80') }}
&lt;/code>&lt;/pre>
&lt;h3 id="url-处理筛选器">URL 处理筛选器&lt;a class="td-heading-self-link" href="#url-%e5%a4%84%e7%90%86%e7%ad%9b%e9%80%89%e5%99%a8" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>&lt;code>urlsplit&lt;/code>筛选器可以从一个 URL 中提取 fragment、hostname、netloc、password、path、port、query、scheme、以及 username。如果不传递任何参数，则直接返回一个包含了所有字段的字典。&lt;/p>
&lt;pre>&lt;code>{{ &amp;quot;http://user:passwd@www.acme.com:9000/dir/index.html?query=term#fragment&amp;quot; | urlsplit('hostname') }}
# =&amp;gt; 'www.acme.com'
{{ &amp;quot;http://user:password@www.acme.com:9000/dir/index.html?query=term#fragment&amp;quot; | urlsplit('netloc') }}
# =&amp;gt; 'user:passwd@www.acme.com:9000'
{{ &amp;quot;http://user:passwd@www.acme.com:9000/dir/index.html?query=term#fragment&amp;quot; | urlsplit('username') }}
# =&amp;gt; 'user'
{{ &amp;quot;http://user:passwd@www.acme.com:9000/dir/index.html?query=term#fragment&amp;quot; | urlsplit('password') }}
# =&amp;gt; 'passwd'
{{ &amp;quot;http://user:passwd@www.acme.com:9000/dir/index.html?query=term#fragment&amp;quot; | urlsplit('path') }}
# =&amp;gt; '/dir/index.html'
{{ &amp;quot;http://user:passwd@www.acme.com:9000/dir/index.html?query=term#fragment&amp;quot; | urlsplit('port') }}
# =&amp;gt; '9000'
{{ &amp;quot;http://user:passwd@www.acme.com:9000/dir/index.html?query=term#fragment&amp;quot; | urlsplit('scheme') }}
# =&amp;gt; 'http'
{{ &amp;quot;http://user:passwd@www.acme.com:9000/dir/index.html?query=term#fragment&amp;quot; | urlsplit('query') }}
# =&amp;gt; 'query=term'
{{ &amp;quot;http://user:passwd@www.acme.com:9000/dir/index.html?query=term#fragment&amp;quot; | urlsplit('fragment') }}
# =&amp;gt; 'fragment'
{{ &amp;quot;http://user:passwd@www.acme.com:9000/dir/index.html?query=term#fragment&amp;quot; | urlsplit }}
# =&amp;gt;
# {
# &amp;quot;fragment&amp;quot;: &amp;quot;fragment&amp;quot;,
# &amp;quot;hostname&amp;quot;: &amp;quot;www.acme.com&amp;quot;,
# &amp;quot;netloc&amp;quot;: &amp;quot;user:password@www.acme.com:9000&amp;quot;,
# &amp;quot;password&amp;quot;: &amp;quot;passwd&amp;quot;,
# &amp;quot;path&amp;quot;: &amp;quot;/dir/index.html&amp;quot;,
# &amp;quot;port&amp;quot;: 9000,
# &amp;quot;query&amp;quot;: &amp;quot;query=term&amp;quot;,
# &amp;quot;scheme&amp;quot;: &amp;quot;http&amp;quot;,
# &amp;quot;username&amp;quot;: &amp;quot;user&amp;quot;
# }
&lt;/code>&lt;/pre>
&lt;h3 id="编写注释的筛选器">编写注释的筛选器&lt;a class="td-heading-self-link" href="#%e7%bc%96%e5%86%99%e6%b3%a8%e9%87%8a%e7%9a%84%e7%ad%9b%e9%80%89%e5%99%a8" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>在模板渲染中，有可能需要在目标文件中生成一些注释信息。Ansible 提供了&lt;code>comment&lt;/code>筛选器来完成该任务。&lt;/p>
&lt;pre>&lt;code>{{ &amp;quot;Plain style (default)&amp;quot; | comment }}
&lt;/code>&lt;/pre>
&lt;p>会得到：&lt;/p>
&lt;pre>&lt;code>#
# Plain style (default)
#
&lt;/code>&lt;/pre>
&lt;p>可以自定义注释语法：&lt;/p>
&lt;pre>&lt;code>{{ &amp;quot;My Special Case&amp;quot; | comment(decoration=&amp;quot;! &amp;quot;) }}
&lt;/code>&lt;/pre>
&lt;p>得到：&lt;/p>
&lt;pre>&lt;code>!
! My Special Case
!
&lt;/code>&lt;/pre>
&lt;p>extract 结合 map 使用时，可以根据索引 (列表索引或字典索引) 从列表或字典中提取对应元素的值。&lt;/p>
&lt;pre>&lt;code>{{ [0,2] | map('extract', ['x','y','z']) | list }}
{{ ['x','y'] | map('extract', {'x': 42, 'y': 31}) | list }}
&lt;/code>&lt;/pre>
&lt;p>得到：&lt;/p>
&lt;pre>&lt;code>['x', 'z']
[42, 31]
&lt;/code>&lt;/pre>
&lt;h3 id="dict-合并">dict 合并&lt;a class="td-heading-self-link" href="#dict-%e5%90%88%e5%b9%b6" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>combine 筛选器可以将多个 dict 中同名 key 进行合并 (以覆盖的方式合并)。&lt;/p>
&lt;pre>&lt;code>{{ {'a':1, 'b':2} | combine({'b':3}) }}
&lt;/code>&lt;/pre>
&lt;p>得到：&lt;/p>
&lt;pre>&lt;code>{'a':1, 'b':3}
&lt;/code>&lt;/pre>
&lt;p>使用&lt;code>recursive=True&lt;/code>参数，可以递归到嵌套 dict 中进行覆盖合并：&lt;/p>
&lt;pre>&lt;code>{{ {'a':{'foo':1, 'bar':2}, 'b':2} | combine({'a':{'bar':3, 'baz':4}}, recursive=True) }}
&lt;/code>&lt;/pre>
&lt;p>将得到：&lt;/p>
&lt;pre>&lt;code>{'a':{'foo':1, 'bar':3, 'baz':4}, 'b':2}
&lt;/code>&lt;/pre>
&lt;p>可以合并多个 dict，如下：&lt;/p>
&lt;pre>&lt;code>{{ a | combine(b, c, d) }}
&lt;/code>&lt;/pre>
&lt;p>d 中同名 key 会覆盖 c，c 会覆盖 b，b 会覆盖 a。&lt;/p>
&lt;h3 id="hash-值计算">hash 值计算&lt;a class="td-heading-self-link" href="#hash-%e5%80%bc%e8%ae%a1%e7%ae%97" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>计算字符串的 sha1：&lt;/p>
&lt;pre>&lt;code>{{ 'test1' | hash('sha1') }}
&lt;/code>&lt;/pre>
&lt;p>计算字符串的 md5：&lt;/p>
&lt;pre>&lt;code>{{ 'test1' | hash('md5') }}
&lt;/code>&lt;/pre>
&lt;p>计算字符串的 checksum，默认即&lt;code>hash('sha1')&lt;/code>值：&lt;/p>
&lt;pre>&lt;code>{{ 'test2' | checksum }}
&lt;/code>&lt;/pre>
&lt;p>计算 sha512 密码 (随机 salt):&lt;/p>
&lt;pre>&lt;code>{{ 'passwd' | password_hash('sha512') }}
&lt;/code>&lt;/pre>
&lt;p>计算 sha256 密码 (指定 salt):&lt;/p>
&lt;pre>&lt;code>{{ passwd' | password_hash('sha256', 'mysalt') }}
&lt;/code>&lt;/pre>
&lt;p>同一主机生成的密码相同：&lt;/p>
&lt;pre>&lt;code>{{ 'passwd' | password_hash('sha512', 65534 | random(seed=inventory_hostname) | string) }}
&lt;/code>&lt;/pre>
&lt;p>根据字符串生成 UUID 值：&lt;/p>
&lt;pre>&lt;code>{{ hostname | to_uuid }}
&lt;/code>&lt;/pre>
&lt;h3 id="base64-编解码筛选器">base64 编解码筛选器&lt;a class="td-heading-self-link" href="#base64-%e7%bc%96%e8%a7%a3%e7%a0%81%e7%ad%9b%e9%80%89%e5%99%a8" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;pre>&lt;code>{{ encoded_str | b64decode }}
{{ decoded_str | b64encode }}
&lt;/code>&lt;/pre>
&lt;p>例如，Ansible 有一个&lt;code>slurp&lt;/code>模块，它的作用类似于 fetch 模块，它可以从目标节点中读取指定文件的内容，然后以 base64 方式编码返回，所以要获取其原始内容，需要 base64 解码。&lt;/p>
&lt;p>例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#204a87;font-weight:bold">slurp&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">src&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;/var/run/sshd.pid&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">register&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">sshd_pid&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>- &lt;span style="color:#204a87;font-weight:bold">debug&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">msg&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;base64_pid: {{sshd_pid.content}}&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>- &lt;span style="color:#204a87;font-weight:bold">debug&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">msg&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;sshd_pid: {{sshd_pid.content|b64decode}}&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>结果：&lt;/p>
&lt;pre>&lt;code>TASK [slurp] ***************
ok: [localhost]
TASK [debug] ******************
ok: [localhost] =&amp;gt; {
&amp;quot;msg&amp;quot;: &amp;quot;base64_pid: MTE4OAo=&amp;quot;
}
TASK [debug] *****************
ok: [localhost] =&amp;gt; {
&amp;quot;msg&amp;quot;: &amp;quot;base64_pid: 1188\n&amp;quot;
}
&lt;/code>&lt;/pre>
&lt;h3 id="文件名处理">文件名处理&lt;a class="td-heading-self-link" href="#%e6%96%87%e4%bb%b6%e5%90%8d%e5%a4%84%e7%90%86" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>&lt;code>basename&lt;/code>：获取字符串中的文件名部分&lt;/li>
&lt;li>&lt;code>dirname&lt;/code>：获取字符串中目录名部分&lt;/li>
&lt;li>&lt;code>expanduser&lt;/code>：扩展家目录，即将&lt;code>~&lt;/code>替换为家目录&lt;/li>
&lt;li>&lt;code>realpath&lt;/code>：获取软链接的原始路径&lt;/li>
&lt;li>&lt;code>splitext&lt;/code>：扩展名分离&lt;/li>
&lt;/ul>
&lt;p>对于 splitext 筛选器，例如：&lt;/p>
&lt;pre>&lt;code>{{&amp;quot;nginx.conf&amp;quot;|splitext}}
#=&amp;gt; (&amp;quot;nginx&amp;quot;,&amp;quot;.conf&amp;quot;)
{{'/etc/my.cnf'|splitext}}
#=&amp;gt; (&amp;quot;/etc/my&amp;quot;,&amp;quot;.cnf&amp;quot;)
&lt;/code>&lt;/pre>
&lt;h3 id="日期时间类处理">日期时间类处理&lt;a class="td-heading-self-link" href="#%e6%97%a5%e6%9c%9f%e6%97%b6%e9%97%b4%e7%b1%bb%e5%a4%84%e7%90%86" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>相对来说，Ansible 中处理日期时间的机会是比较少的。但是 Ansible 也提供了比较方便的处理日期时间的方式。&lt;/p>
&lt;p>使用&lt;code>strftime&lt;/code>将当前时间或给定时间 (只能以 epoch 数值指定) 按照给定的格式输出：&lt;/p>
&lt;pre>&lt;code># 将当前时间点以year-month-day hour:min:sec格式输出
{{ '%Y-%m-%d %H:%M:%S' | strftime }}
# 将指定的时间按照指定格式输出
{{ '%Y-%m-%d' | strftime(0) }} # =&amp;gt; 1970-01-01
{{ '%Y-%m-%d' | strftime(1441357287) }} # =&amp;gt; 2015-09-04
&lt;/code>&lt;/pre>
&lt;p>使用&lt;code>to_datetime&lt;/code>可以将日期时间字符串转换为 Python 日期时间对象，既然得到了对象，就可以进行时间比较、时间运算等操作。&lt;/p>
&lt;pre>&lt;code># 计算时间差(单位秒)
# 默认解析的日期时间字符串格式为%Y-%m-%d %H:%M:%S，但可以自定义格式
{{ ((&amp;quot;2016-08-14 20:00:12&amp;quot; | to_datetime) - (&amp;quot;2015-12-25&amp;quot; | to_datetime(&amp;quot;%Y-%m-%d&amp;quot;))).total_seconds() }}
#=&amp;gt;20203212.0
# 计算相差多少天。只考虑天数，不考虑时分秒等
{{ ((&amp;quot;2016-08-14 20:00:12&amp;quot; | to_datetime) - (&amp;quot;2015-12-25&amp;quot; | to_datetime('%Y-%m-%d'))).days }}
&lt;/code>&lt;/pre>
&lt;h3 id="human_to_bytes-和-human_readable">human_to_bytes 和 human_readable&lt;a class="td-heading-self-link" href="#human_to_bytes-%e5%92%8c-human_readable" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>&lt;code>human_readable&lt;/code>将数值转换为人类可读的数据量大小单位：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>{{&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000">|human_readable}}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>{{&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000">|human_readable(isbits=True)}}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>{{&lt;span style="color:#0000cf;font-weight:bold">10240&lt;/span>&lt;span style="color:#000">|human_readable}}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>{{&lt;span style="color:#0000cf;font-weight:bold">102400000&lt;/span>&lt;span style="color:#000">|human_readable}}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>{{&lt;span style="color:#0000cf;font-weight:bold">102400000&lt;/span>&lt;span style="color:#000">|human_readable(unit=&amp;#34;G&amp;#34;)}}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>{{&lt;span style="color:#0000cf;font-weight:bold">102400000&lt;/span>&lt;span style="color:#000">|human_readable(isbits=True, unit=&amp;#34;G&amp;#34;)}}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>human_to_bytes&lt;/code>将人类可读的单位转换为数值：&lt;/p>
&lt;pre>&lt;code>{{'0'|human_to_bytes}} #= 0
{{'0.1'|human_to_bytes}} #= 0
{{'0.9'|human_to_bytes}} #= 1
{{'1'|human_to_bytes}} #= 1
{{'10.00 KB'|human_to_bytes}} #= 10240
{{ '11 MB'|human_to_bytes}} #= 11534336
{{ '1.1 GB'|human_to_bytes}} #= 1181116006
{{'10.00 Kb'|human_to_bytes(isbits=True)}} #= 10240
&lt;/code>&lt;/pre>
&lt;h3 id="其它筛选器">其它筛选器&lt;a class="td-heading-self-link" href="#%e5%85%b6%e5%ae%83%e7%ad%9b%e9%80%89%e5%99%a8" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>&lt;code>quote&lt;/code>为字符串加引号，比如方便编写 shell 模块的命令：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#204a87;font-weight:bold">shell&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">echo {{ string_value | quote }}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>ternary&lt;/code>根据 true、false 来决定返回哪个值：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>{{&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">(gender == &amp;#34;male&amp;#34;) | ternary(&amp;#39;Mr&amp;#39;,&amp;#39;Ms&amp;#39;) }}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>{{&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">enabled | ternary(&amp;#39;no shutdown&amp;#39;, &amp;#39;shutdown&amp;#39;, omit) }}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>product&lt;/code>生成笛卡尔积：&lt;/p>
&lt;pre>&lt;code>{{['foo', 'bar'] | product(['com'])|list}}
#=&amp;gt;[[&amp;quot;foo&amp;quot;,&amp;quot;com&amp;quot;], [&amp;quot;bar&amp;quot;,&amp;quot;com&amp;quot;]]
&lt;/code>&lt;/pre>
&lt;h1 id="使用示例">使用示例&lt;a class="td-heading-self-link" href="#%e4%bd%bf%e7%94%a8%e7%a4%ba%e4%be%8b" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">将foo.j2文件输出到指定主机的/etc/file.con&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">template&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">src&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">/mytemplates/foo.j2&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># 指定源文件，是一个用jinja2语言写的文件&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">dest&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">/etc/file.conf&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># 指定要生成的目的文件&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">mode&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0744&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">#必须添加一个前导零，以便Ansible的YAML解析器知道它是一个八进制数（例如0644或01777）或将其引号（例如&amp;#39;644&amp;#39;或&amp;#39;1777&amp;#39;），以便Ansible接收字符串并可以从字符串进行自己的转换成数字。&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>模板文件示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>% &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> docker.registryMirrors is defined %&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span> &lt;span style="color:#8f5902;font-style:italic">#如果docker.registryMirrors变量存在，则执行最后一行之前的语句&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;registry-mirrors&amp;#34;&lt;/span>: &lt;span style="color:#ce5c00;font-weight:bold">[{&lt;/span>% &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> mirror in docker.registryMirrors %&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span> &lt;span style="color:#8f5902;font-style:italic">#输出 &amp;#34;registry-mirrors&amp;#34;: 后执行for循环，将docker.registryMirrors变量的多个值逐一传递给mirror变量，直到docker.registryMirros变量里的值全部引用完成&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;{{ mirror}}&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>% &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> not loop.last %&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>,&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>% endif %&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span> &lt;span style="color:#8f5902;font-style:italic">#输出 mirror 变量的值。如果循环没有结束，则输出一个逗号&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>%- endfor %&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span> &lt;span style="color:#8f5902;font-style:italic">#结束for循环&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>% endif %&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span> &lt;span style="color:#8f5902;font-style:italic">#结束if结构&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>输出结果示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;registry-mirrors&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;https://ac1rmo5p.mirror.aliyuncs.com&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;https://123.123.123&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="完全自定义的-nginx-虚拟主机配置">完全自定义的 nginx 虚拟主机配置&lt;a class="td-heading-self-link" href="#%e5%ae%8c%e5%85%a8%e8%87%aa%e5%ae%9a%e4%b9%89%e7%9a%84-nginx-%e8%99%9a%e6%8b%9f%e4%b8%bb%e6%9c%ba%e9%85%8d%e7%bd%ae" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>在生产中，一个开发不太完善的系统可能时不时就要去 nginx 虚拟主机中添加一个 location 配置段落，如果有多个 nginx 节点要配置，无疑这是一件让人悲伤的事情。&lt;/p>
&lt;p>值得庆幸，Ansible 通过 Jinja2 模板可以很容易地解决这个看上去复杂的事情。&lt;/p>
&lt;p>首先提供相关的变量文件&lt;code>vhost_vars.yml&lt;/code>，内容如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">servers&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">server_name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">www.abc.com&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">listen&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">80&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">locations&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">match_method&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">uri&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;/&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">root&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;/usr/share/nginx/html/abc/&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">index&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;index.html index.htm&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">gzip_types&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">css&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">js&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">plain&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">match_method&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;=&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">uri&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;/blogs&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">root&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;/usr/share/nginx/html/abc/blogs/&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">index&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;index.html index.htm&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">match_method&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;~&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">uri&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;\\.php$&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">fastcgi_pass&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;127.0.0.1:9000&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">fastcgi_index&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;index.php&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">fastcgi_param&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;SCRIPT_FILENAME /usr/share/www/php$fastcgi_script_name&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">include&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;fastcgi_params&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">server_name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">www.def.com&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">listen&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">8080&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">locations&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">match_method&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">uri&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;/&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">root&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;/usr/share/nginx/html/def/&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">index&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;index.html index.htm&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">match_method&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;~&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">uri&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;/imgs/.*\\.(png|jpg|jpeg|gif)$&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">root&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;/usr/share/nginx/html/def/imgs&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">index&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;index.html index.htm&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>从上面提供的变量文件来看，应该能看出来它的目的是为了能够自动生成一个或多个 server 段，而且允许随意增删改每个 server 段中的 location 及其它指令。这样一来，编写 nginx 虚拟主机配置的任务就变成了编写这个变量文件。&lt;/p>
&lt;p>需注意，每个 location 段有两个变量名&lt;code>match_method&lt;/code>和&lt;code>uri&lt;/code>，作用是生成 nginx location 配置项的前一部分，即&lt;code>location METHOD URI {}&lt;/code>。除这两个变量名外，剩余的变量名都会直接当作 nginx 配置指令渲染到配置文件中，所以它们都需和 nginx 指令名相同，比如 index 变量名渲染后会得到 nginx 的 index 指令。&lt;/p>
&lt;p>剩下的就是写一个 Jinja2 模板文件，模板中 Jinja2 语句块标签部分我没有使用缩进，这样比较容易控制格式。文件内容如下：&lt;/p>
&lt;pre>&lt;code>{# 负责渲染每个指令 #}
{% macro config(key,value) %}
{% if (value is sequence) and (value is not string) and (value is not mapping) %}
{# 如果指令是列表 #}
{% for item in value -%}
{# 如生成的结果是：gzip_types css js plain; #}
{{ key ~ ' ' ~ item if loop.first else item}}{{' ' if not loop.last else ';'}}
{%- endfor %}
{% else %}
{# 如果指令不是列表 #}
{{key}} {{value}};
{% endif %}
{% endmacro %}
{# 负责渲染location指令 #}
{% macro location(d) %}
location {{d.match_method}} {{d.uri}} {
{% for item in d|dict2items if item.key != &amp;quot;match_method&amp;quot; and item.key != &amp;quot;uri&amp;quot; %}
{{ config(item.key, item.value) }}
{%- endfor %}
}
{% endmacro %}
{% for server in servers %}
server {
{% for item in server|dict2items %}
{# 非location指令部分 #}
{% if item.key != &amp;quot;locations&amp;quot; %}
{{ config(item.key,item.value) }}
{%- else %}
{# 各个location指令部分 #}
{% for l in item.value|default([],true) %}
{{ location(l) }}
{% endfor %}
{% endif %}
{%- endfor %}
}
{% endfor %}
&lt;/code>&lt;/pre>
&lt;p>然后使用 template 模块去渲染即可：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#204a87;font-weight:bold">hosts&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">localhost&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">gather_facts&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">no&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">vars_files&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">vhost_vars.yml&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">tasks&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">template&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">src&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;vhost.conf.j2&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">dest&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">/tmp/vhost.conf&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>渲染得到的结果：&lt;/p>
&lt;pre>&lt;code>server {
server_name www.abc.com;
listen 80;
location / {
root /usr/share/nginx/html/abc/;
index index.html index.htm;
gzip_types css js plain; }
location = /blogs {
root /usr/share/nginx/html/abc/blogs/;
index index.html index.htm;
}
location ~ \.php$ {
fastcgi_pass 127.0.0.1:9000;
fastcgi_index index.php;
fastcgi_param SCRIPT_FILENAME /usr/share/www/php$fastcgi_script_name;
include fastcgi_params;
}
}
server {
server_name www.def.com;
listen 8080;
location / {
root /usr/share/nginx/html/def/;
index index.html index.htm;
}
location ~ /imgs/.*\.(png|jpg|jpeg|gif)$ {
root /usr/share/nginx/html/def/imgs;
index index.html index.htm;
}
}
&lt;/code>&lt;/pre></description></item><item><title>Docs: Conditionals(条件判断)</title><link>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/Ansible/Playbook/Conditionals%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/Ansible/Playbook/Conditionals%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/user_guide/playbooks_conditionals.html">官方文档,用户指南-传统目录-条件&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>通常，play 的结果可能取决于 variable，fact（有关远程系统的知识）或先前的任务结果。在某些情况下，变量的值可能取决于其他变量。可以基于主机是否符合其他条件来创建其他组来管理主机。&lt;/p>
&lt;p>Ansible 在条件中使用 Jinja 的 &lt;a href="https://docs.ansible.com/ansible/latest/user_guide/playbooks_tests.html">测试&lt;/a> 和 &lt;a href="https://docs.ansible.com/ansible/latest/user_guide/playbooks_filters.html">过滤器&lt;/a>来实现条件判断。详见 &lt;a href="https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/Ansible/Playbook/Templates%20%E6%A8%A1%E6%9D%BF(Jinja2).md">Ansible Template 文章中《Ansible 扩展测试函数》章节&lt;/a>&lt;/p>
&lt;h2 id="条件判断的简单样例">条件判断的简单样例&lt;a class="td-heading-self-link" href="#%e6%9d%a1%e4%bb%b6%e5%88%a4%e6%96%ad%e7%9a%84%e7%ae%80%e5%8d%95%e6%a0%b7%e4%be%8b" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>下面的样例表示：当 ansible_facts[&amp;lsquo;os_family&amp;rsquo;] 变量的值为 Debian 的时候，则执行上面的任务，任务内容是执行 shutdown 命令&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">tasks&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;shut down Debian flavored systems&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">command&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">/sbin/shutdown -t now&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">when&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">ansible_facts[&amp;#39;os_family&amp;#39;] == &amp;#34;Debian&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>判断主机是否在某个组中&lt;/p>
&lt;ul>
&lt;li>
&lt;p>when: inventory_hostname is search(&amp;ldquo;master&amp;rdquo;) # 当 inventory_hostname 变量的值含有 master 字符串时。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>when: inventory_hostname == groups[&amp;lsquo;kube_master&amp;rsquo;][0] # 当当前主机的 inventory_hostname 变量值等于 kube_master 主机组中的第一台主机时&lt;/p>
&lt;/li>
&lt;li>
&lt;p>when: inventory_hostname in groups[&amp;lsquo;kube_master&amp;rsquo;] # 当当前主机的 inventory_hostname 变量值在 kube_master 主机组中时。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>when: testvar1 is none # 当变量 testvar1 已定义，但是值为空时。Note：值为空表示 key 后面的值什么都不写，双引号都不能有&lt;/p>
&lt;/li>
&lt;li>
&lt;p>when: ((groups[&amp;lsquo;kube_master&amp;rsquo;] | length) &amp;gt; 1) # 当 kube_master 主机组的主机数量大于 1 时。&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: loop(循环)</title><link>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/Ansible/Playbook/loop%E5%BE%AA%E7%8E%AF/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/Ansible/Playbook/loop%E5%BE%AA%E7%8E%AF/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/user_guide/playbooks_loops.html">官方文档，用户指南-传统目录-Loops&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>有时需要重复执行多次任务。在计算机编程中，这称为循环。常见的 Ansible 循环包括使用文件模块更改多个文件和/或目录的所有权，使用用户模块创建多个用户以及重复轮询步骤直到达到特定结果。Ansible 提供了两个用于创建循环的关键字：&lt;code>loop&lt;/code> 和 &lt;code>with_XX&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;code>with_XX&lt;/code> 关键字依赖于 &lt;a href="https://docs.ansible.com/ansible/latest/plugins/inventory.html">Lookup Plugins(Lookup 插件)&lt;/a>。其中 根据插件的不同功能，使用不同的字符串。e.g.with_items 也是 Lookup 插件。
&lt;ul>
&lt;li>插件的介绍详见：&lt;a href="https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/Ansible/Ansible%20Plugins/Ansible%20Plugins.md">Ansible Plugins&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>loop&lt;/code> 关键字与 with_list 等效，是简单循环的最佳选择&lt;/li>
&lt;/ul>
&lt;h2 id="循环的简单样例">循环的简单样例&lt;a class="td-heading-self-link" href="#%e5%be%aa%e7%8e%af%e7%9a%84%e7%ae%80%e5%8d%95%e6%a0%b7%e4%be%8b" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>下面展示了循环的基本功能：通过 loop 或者 with_*来对一个列表中的值逐一操作&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">添加几个用户。循环的基本使用方式&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">user&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;{{ item }}&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">state&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">present&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">loop&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">testuser1&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">testuser2&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>等同于&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">添加几个用户。先赋值给一个变量，然后在loop关键字中引用变量。&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">vars&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">users&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">testuser1, testuser2]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">user&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;{{ item }}&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">state&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">present&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">loop&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;{{ users}}&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上述示例与下面的任务相同。这就相当于将两个任务模块相同但是操作内容不同的任务合并成为一个任务&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">添加testuser1用户&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">user&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;testuser1&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">state&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">present&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">添加testuser2用户&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">user&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;testuser2&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">state&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">present&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>从示例可以看出，循环是使用两个部分来组成整个循环的功能&lt;/p>
&lt;ol>
&lt;li>{{ item }}变量来引用 loop 关键字定义的内容
&lt;ol>
&lt;li>Note：在定义任何变量时，一定要避免使用 item 为变量名&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>loop 关键字来定义列表内容&lt;/li>
&lt;/ol>
&lt;h1 id="循环样例">循环样例&lt;a class="td-heading-self-link" href="#%e5%be%aa%e7%8e%af%e6%a0%b7%e4%be%8b" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="逐行读取文件">逐行读取文件&lt;a class="td-heading-self-link" href="#%e9%80%90%e8%a1%8c%e8%af%bb%e5%8f%96%e6%96%87%e4%bb%b6" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>参考链接：&lt;a href="https://stackoverflow.com/questions/48403508/ansible-read-local-file-to-var-and-then-loop-read-line-by-line">https://stackoverflow.com/questions/48403508/ansible-read-local-file-to-var-and-then-loop-read-line-by-line&lt;/a>&lt;/p>
&lt;p>通过 lookup 插件中的 file 功能读取 ip_vs.conf 文件，并逐行读取文件赋值给变量 info，然后执行 modprobe 命令调用变量，逐一加载模块&lt;/p>
&lt;p>Note：一定要加 .splitlines() ，否则会将文件里的换行符都赋值给变量，这样，变量只有一个值，而不是一个列表了&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">加载模块&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">vars&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">info&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;{{ lookup(&amp;#39;file&amp;#39;, &amp;#39;ip_vs.conf&amp;#39;).splitlines() }}&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">loop&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;{{ info }}&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">shell&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">modprobe {{ item }}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="匹配目录下所有文件">匹配目录下所有文件&lt;a class="td-heading-self-link" href="#%e5%8c%b9%e9%85%8d%e7%9b%ae%e5%bd%95%e4%b8%8b%e6%89%80%e6%9c%89%e6%96%87%e4%bb%b6" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>这个任务通过 with_fieglob 插件来获取该剧本的 file 目录下 rpm 目录下的所有文件，将这些文件复制到远程设备的 /root/downloads/kubeadm-let-ctl/ 目录下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">拷贝rpm安装包&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">copy&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">src&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;{{ item }}&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">dest&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">/root/downloads/kubeadm-let-ctl/&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">with_fileglob&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">rpm/*&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: 错误处理</title><link>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/Ansible/Playbook/%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/Ansible/Playbook/%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/user_guide/playbooks_error_handling.html">官方文档，用户指南-在 playbook 中的错误处理&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="忽略失败的任务ignore_errors">忽略失败的任务(ignore_errors)&lt;a class="td-heading-self-link" href="#%e5%bf%bd%e7%95%a5%e5%a4%b1%e8%b4%a5%e7%9a%84%e4%bb%bb%e5%8a%a1ignore_errors" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>默认情况下，当任意目标机器上的任务结果失败时，Ansible 都会停止继续执行，我们可以通过 &lt;code>ignore_errors&lt;/code> 关键字忽略错误，以便继续执行后续任务。
ignore_errors 指令仅在任务能够运行并返回“失败”值时起作用。它不会让 Ansible 忽略未定义的变量错误、连接失败、执行问题（例如，缺少包）或语法错误。&lt;/p>
&lt;h1 id="改变任务状态failed_when-与-changed_when">改变任务状态(failed_when 与 changed_when)&lt;a class="td-heading-self-link" href="#%e6%94%b9%e5%8f%98%e4%bb%bb%e5%8a%a1%e7%8a%b6%e6%80%81failed_when-%e4%b8%8e-changed_when" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>Ansible 可以通过特定条件定义任务的执行状态，通过对 &lt;code>failed_when&lt;/code>、&lt;code>changed_when&lt;/code> 关键字指定的条件进行判断，用以&lt;strong>定义&lt;/strong> failed、changed、ok 等&lt;strong>任务执行状态意味着什么&lt;/strong>。
failed_when&lt;/p>
&lt;ul>
&lt;li>若结果为真，则任务执行结果变为 &lt;code>fatal&lt;/code>&lt;/li>
&lt;li>若结果为假，则任务执行结果变为 &lt;code>changed&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>changed_when&lt;/p>
&lt;ul>
&lt;li>若结果为真，则任务执行结果变为 &lt;code>changed&lt;/code>&lt;/li>
&lt;li>若结果为假，则任务执行结果变为 &lt;code>ok&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>比如，我们常用 shell 模块执行一些命令，而 shell 模块的任务状态总是 changed 的~~如果一个 shell 命令执行后，没有变化，我们想让他将任务状态设为 ok，就可以通过 changed_when 功能，比如现在有如下两个任务&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Changed_when 判断的结果为真时，任务状态为 changed&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">shell&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">cmd&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;docker start changed_when&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">register&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">is_started&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">changed_when&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;#39;changed_when&amp;#39; in is_started[&amp;#39;stdout&amp;#39;]&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">ignore_errors&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Changed_when 判断的结果为假时，任务状态为 ok&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">shell&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">cmd&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;docker start changed_when&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">register&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">is_started&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">changed_when&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;#39;changed_when&amp;#39; in is_started[&amp;#39;stderr&amp;#39;]&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">ignore_errors&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Failed_when 判断的结果为真时，任务状态为 failed&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">shell&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">cmd&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;docker start failed_when&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">register&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">is_started&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">failed_when&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;#39;failed_when&amp;#39; in is_started[&amp;#39;stdout&amp;#39;]&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">ignore_errors&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Failed_when 判断的结果为假时，任务状态为 changed&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">shell&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">cmd&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;docker start failed_when&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">register&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">is_started&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">failed_when&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;#39;failed_when&amp;#39; in is_started[&amp;#39;stderr&amp;#39;]&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">ignore_errors&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>假设目标机器上已经有一个已经停止的，名为 test 的容器，则执行结果如下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># ansible-playbook -i inventory/test.yaml -e @inventory/test_password.yaml playbooks/error_handing.yaml&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PLAY &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>test&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> ****************************************************************************************************************************************
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TASK &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>error_handing : Changed_when 判断的结果为真时，任务状态为 changed&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> *****************************************************************************************
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>changed: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>hw-cloud-xngy-jump-server-linux-2&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TASK &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>error_handing : Changed_when 判断的结果为假时，任务状态为 ok&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> **********************************************************************************************
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ok: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>hw-cloud-xngy-jump-server-linux-2&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TASK &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>error_handing : Failed_when 判断的结果为真时，任务状态为 failed&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> *******************************************************************************************
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fatal: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>hw-cloud-xngy-jump-server-linux-2&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>: FAILED! &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&amp;gt; &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;changed&amp;#34;&lt;/span>: true, &lt;span style="color:#4e9a06">&amp;#34;cmd&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;docker start failed_when&amp;#34;&lt;/span>, &lt;span style="color:#4e9a06">&amp;#34;delta&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;0:00:00.253780&amp;#34;&lt;/span>, &lt;span style="color:#4e9a06">&amp;#34;end&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;2022-
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">...ignoring
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">TASK [error_handing : Failed_when 判断的结果为假时，任务状态为 changed] ******************************************************************************************
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">changed: [hw-cloud-xngy-jump-server-linux-2]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">PLAY RECAP *****************************************************************************************************************************************
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">hw-cloud-xngy-jump-server-linux-2 : ok=4 changed=3 unreachable=0 failed=0 skipped=0 rescued=0 ignored=1
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>由于启动一个容器，如果能正常启动，将会返回容器名，所以我们通过判断命令行的输出内容中是否包含 test 字符串来判断容器是否启动了&lt;/p>
&lt;ul>
&lt;li>若容器还没启动，则命令行会返回字符串，那么 changed_when 的判断结果为真，说明产生了变化，则将任务状态设置为 changed；&lt;/li>
&lt;li>若容器已经启动，则命令行不会返回任何字符串，那么 changed_when 的判断结果就为假，说明没有任何变化，此时任务状态则设置为 ok。&lt;/li>
&lt;/ul>
&lt;p>failed_when 的效果同理
注意：failed_when 与 changed_when 的判断逻辑有时候很反直觉，使用时一定要万分注意&lt;/p></description></item><item><title>Docs: Debugger</title><link>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/Ansible/Playbook/Debugger/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/Ansible/Playbook/Debugger/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/user_guide/playbooks_debugger.html">官方文档，用户指南-Debugging 任务&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Ansible 提供了一个任务调试器，因此您可以在执行过程中修复错误，而不是编辑 playbook 并再次运行它以查看更改是否有效。您可以在任务上下文中访问调试器的所有功能。您可以检查或设置变量的值，更新模块参数，并使用新的变量和参数重新运行任务。调试器可让您解决故障原因并继续执行 playbook。&lt;/p>
&lt;h3 id="enabling-the-debugger-with-thedebuggerkeywordhttpsdocsansiblecomansiblelatestuser_guideplaybooks_debuggerhtmlid8">&lt;a href="https://docs.ansible.com/ansible/latest/user_guide/playbooks_debugger.html#id8">Enabling the debugger with thedebuggerkeyword&lt;/a>&lt;a class="td-heading-self-link" href="#enabling-the-debugger-with-thedebuggerkeywordhttpsdocsansiblecomansiblelatestuser_guideplaybooks_debuggerhtmlid8" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>You can use the &lt;code>debugger&lt;/code> keyword to enable (or disable) the debugger for a specific play, role, block, or task. This option is especially useful when developing or extending playbooks, plays, and roles. You can enable the debugger on new or updated tasks. If they fail, you can fix the errors efficiently. The &lt;code>debugger&lt;/code> keyword accepts five values:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Value&lt;/th>
&lt;th>Result&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>always&lt;/td>
&lt;td>Always invoke the debugger, regardless of the outcome&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>never&lt;/td>
&lt;td>Never invoke the debugger, regardless of the outcome&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>on_failed&lt;/td>
&lt;td>Only invoke the debugger if a task fails&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>on_unreachable&lt;/td>
&lt;td>Only invoke the debugger if a host is unreachable&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>on_skipped&lt;/td>
&lt;td>Only invoke the debugger if the task is skipped&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Docs: Playbook 命令行工具</title><link>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/Ansible/Playbook/Playbook-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/Ansible/Playbook/Playbook-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/cli/ansible-playbook.html">官方文档，用户指南-传统目录-使用命令行工具-ansible-playbook&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>ansible-playbook 用来运行运行 Ansible playbook，以便在目标主机上执行定义的任务。&lt;/p>
&lt;h1 id="ansible-playbook">ansible-playbook&lt;a class="td-heading-self-link" href="#ansible-playbook" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>运行 Ansible playbooks，并在目标主机上执行剧本中定义的任务&lt;/p>
&lt;h2 id="syntax语法">Syntax(语法)&lt;a class="td-heading-self-link" href="#syntax%e8%af%ad%e6%b3%95" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>ansible-playbook [OPTIONS] PLAYBOOK&lt;/strong>&lt;/p>
&lt;h3 id="options">OPTIONS&lt;a class="td-heading-self-link" href="#options" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>&amp;ndash;ask-vault-pass # ask for vault password&lt;/li>
&lt;li>&amp;ndash;become-method # privilege escalation method to use (default=%(default)s), use ansible-doc -t become -l to list valid choices.&lt;/li>
&lt;li>&amp;ndash;become-user # run operations as this user (default=root)&lt;/li>
&lt;li>&lt;strong>-C, &amp;ndash;check&lt;/strong> # 不在目标主机上执行任务，仅检查任务是否可以完成&lt;/li>
&lt;li>&lt;strong>-c, &amp;ndash;connection &amp;lt;CONNECTION&amp;gt;&lt;/strong> # 要使用的连接插件。&lt;code>默认值：smart&lt;/code>
&lt;ul>
&lt;li>可以设置为 local 以便让 playbook 在本地执行而不用去远程机器上运行&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&amp;ndash;flush-cache # clear the fact cache for every host in inventory&lt;/li>
&lt;li>&amp;ndash;force-handlers # run handlers even if a task fails&lt;/li>
&lt;li>&lt;strong>-i, &amp;ndash;inventory, &amp;ndash;inventory-file&lt;/strong> # 指定 inventory 文件路径或者以逗号分隔的主机列表。(不推荐使用该选项)&lt;/li>
&lt;li>&lt;strong>-l , &amp;ndash;limit &amp;lt;SUBSET&amp;gt;&lt;/strong> # 限定执行的主机范围。可以对一批主机的其中一台执行操作，但是依然可以使用其他主机的变量。further limit selected hosts to an additional pattern&lt;/li>
&lt;li>&lt;strong>&amp;ndash;list-hosts&lt;/strong> # 列出执行该剧本所能匹配到的主机，但并不会执行&lt;/li>
&lt;li>&lt;strong>&amp;ndash;list-tags&lt;/strong> # 列出所有可用的 tags&lt;/li>
&lt;li>&lt;strong>&amp;ndash;list-tasks&lt;/strong> # 列出所有即将被执行的任务&lt;/li>
&lt;li>&amp;ndash;private-key , &amp;ndash;key-file # use this file to authenticate the connection&lt;/li>
&lt;li>&amp;ndash;scp-extra-args # specify extra arguments to pass to scp only (e.g. -l)&lt;/li>
&lt;li>&amp;ndash;sftp-extra-args # specify extra arguments to pass to sftp only (e.g. -f, -l)&lt;/li>
&lt;li>&amp;ndash;skip-tags # only run plays and tasks whose tags do not match these values&lt;/li>
&lt;li>&amp;ndash;ssh-common-args # specify common arguments to pass to sftp/scp/ssh (e.g. ProxyCommand)&lt;/li>
&lt;li>&amp;ndash;ssh-extra-args # specify extra arguments to pass to ssh only (e.g. -R)&lt;/li>
&lt;li>&lt;strong>&amp;ndash;start-at-task&lt;/strong> # start the playbook at the task matching this name&lt;/li>
&lt;li>&lt;strong>&amp;ndash;step&lt;/strong> # 一步一步运行,也就是说在运行每个任务和之前，会弹出确认信息，确认执行，才会执行该任务。有 3 个选项，执行、不执行、继续(继续就是指后续任务不再确认，从当前任务开始执行完剩下的任务)&lt;/li>
&lt;li>&amp;ndash;syntax-check # perform a syntax check on the playbook, but do not execute it&lt;/li>
&lt;li>&lt;strong>-t, &amp;ndash;tags&lt;/strong> # 仅运行带有名为 TAG 标签的 tasks 或者 plays&lt;/li>
&lt;li>&amp;ndash;vault-id # the vault identity to use&lt;/li>
&lt;li>&amp;ndash;vault-password-file # vault password file&lt;/li>
&lt;li>&amp;ndash;version # show program’s version number, config file location, configured module search path, module location, executable location and exit&lt;/li>
&lt;li>&lt;strong>-D, &amp;ndash;diff&lt;/strong> # 当使用 template、file、等指令更改文件时，显示这些文件更改前后的差异。通常与 &amp;ndash;check 选项一起使用。&lt;/li>
&lt;li>-K, &amp;ndash;ask-become-pass # ask for privilege escalation password&lt;/li>
&lt;li>-M, &amp;ndash;module-path # prepend colon-separated path(s) to module library (default=~/.ansible/plugins/modules:/usr/share/ansible/plugins/modules)&lt;/li>
&lt;li>-T , &amp;ndash;timeout # override the connection timeout in seconds (default=10)&lt;/li>
&lt;li>-b, &amp;ndash;become # run operations with become (does not imply password prompting)&lt;/li>
&lt;li>-c , &amp;ndash;connection # connection type to use (default=smart)&lt;/li>
&lt;li>&lt;strong>-e, &amp;ndash;extra-vars &amp;lt;@FILE | KEY=VALUE&amp;gt;&lt;/strong> # 添加额外的变量，可以是 &lt;code>KEY=VALUE&lt;/code> 格式(若是 yaml 的话则是 &lt;code>KEY: VALUE&lt;/code> 格式)，也可以直接指定 yaml 或 json 格式的文件，如果指定文件，以 &lt;code>@&lt;/code> 开头，比如：
&lt;ul>
&lt;li>&lt;code>--extra-vars @~/ansible/defaults/main.yaml&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>-f , &amp;ndash;forks # specify number of parallel processes to use (default=5)&lt;/li>
&lt;li>-k, &amp;ndash;ask-pass # ask for connection password&lt;/li>
&lt;li>-u , &amp;ndash;user # connect as this user (default=None)&lt;/li>
&lt;li>&lt;strong>-v, &amp;ndash;verbose&lt;/strong> # 详细模式(-vvv 会输出更多信息, -vvvv 将会启用 DEBUG 模式)&lt;/li>
&lt;/ul>
&lt;h2 id="example">EXAMPLE&lt;a class="td-heading-self-link" href="#example" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>从 install packages 这个任务开始执行 playbook
&lt;ul>
&lt;li>ansible-playbook playbook.yml &amp;ndash;start-at=&amp;ldquo;install packages&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>只对 HLJHEB-PSC-SCORE-PM-OS04-EBRS-HA02 主机执行 playbook
&lt;ul>
&lt;li>ansible-playbook -i inventory/ssc-pool-unicom-ha &amp;ndash;limit HLJHEB-PSC-SCORE-PM-OS04-EBRS-HA02 ha-gdas-proxy.yaml&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="常见的本地调试">常见的本地调试&lt;a class="td-heading-self-link" href="#%e5%b8%b8%e8%a7%81%e7%9a%84%e6%9c%ac%e5%9c%b0%e8%b0%83%e8%af%95" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>提前检查渲染的模板。通过 &amp;ndash;connectoin=local 以在本地运行，使用 &amp;ndash;diff 展示渲染后差异。&lt;/p>
&lt;ul>
&lt;li>ansible-playbook -i inventory/all.yaml deploy-mysql.yaml &amp;ndash;connection=local &amp;ndash;limit tj-test-spst-node-2 &amp;ndash;tag config-mysql&amp;ndash;check &amp;ndash;diff&lt;/li>
&lt;/ul></description></item></channel></rss>