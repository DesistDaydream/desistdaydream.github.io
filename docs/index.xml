<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦的站点 – 学习笔记</title><link>https://desistdaydream.github.io/docs/</link><description>Recent content in 学习笔记 on 断念梦的站点</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Interrupts(中断)</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/CPU/Interrupts%E4%B8%AD%E6%96%AD/Interrupts%E4%B8%AD%E6%96%AD/</link><pubDate>Tue, 19 Mar 2024 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/CPU/Interrupts%E4%B8%AD%E6%96%AD/Interrupts%E4%B8%AD%E6%96%AD/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Interrupt">Wiki, Interrupt&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/RPF-0e0oTYsUDefIEhgH_A">公众号-云原生实验室，Linux 中断（IRQ/softirq）基础：原理及内核实现&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Interrupte Request(终端请求，简称 IRQ)&lt;/strong>，是一种信号，该信号来源于外围硬件(相对于 CPU 和内存)的异步信号或者来自软件的同步信号，收到该信号后进行相应的硬件、软件处理。中断其实是一种异步的事件处理机制，可以提高系统的并发处理能力。&lt;/p>
&lt;p>Linux 内核对计算机上所有的设备进行管理，进行管理的方式是内核和设备之间的通信。解决通信的方式有两种：&lt;/p>
&lt;ol>
&lt;li>轮询。轮询是指内核对设备状态进行周期性的查询&lt;/li>
&lt;li>中断。中断是指在设备需要 CPU 的时候主动发起通信&lt;/li>
&lt;/ol>
&lt;p>从物理学的角度看，中断是一种电信号，由硬件设备产生，并直接送入中断控制器（如 8259A）的输入引脚上，然后再由中断控制器向处理器发送相应的信号。处理器一经检测到该信号，便中断自己当前正在处理的工作，转而去处理中断。此后，处理器会通知 OS 已经产生中断。这样，OS 就可以对这个中断进行适当的处理。不同的设备对应的中断不同，而每个中断都通过一个唯一的数字标识，这些值通常被称为中断线。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/os/kernel/cpu/interrupts/1616168186714-4fa3beb1-a385-452f-a110-10b7291a875f.jpeg" alt="">&lt;/p>
&lt;p>中断可以分为 NMI(不可屏蔽中断) 和 INTR(可屏蔽中断)。其中 NMI 通常用于电源掉电和物理存储器奇偶校验；INTR 是可屏蔽中断，可以通过设置中断屏蔽位来进行中断屏蔽，它主要用于接受外部硬件的中断信号，这些信号由中断控制器传递给 CPU。&lt;/p>
&lt;p>常见的两种中断控制器：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Programmable Interrupt Controller(可编程中断控制器，简称 PIC)&lt;/strong> 8259A&lt;/li>
&lt;li>&lt;strong>Advanced Programmable Interrupt Controller(高级可编程中断控制器，简称 APIC)&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>传统的 PIC 是由两片 8259A 风格的外部芯片以“级联”的方式连接在一起。每个芯片可处理多达 8 个不同的 IRQ。因为从 PIC 的 INT 输出线连接到主 PIC 的 IRQ2 引脚，所以可用 IRQ 线的个数达到 15 个&lt;/p>
&lt;h1 id="硬中断与软中断">硬中断与软中断&lt;a class="td-heading-self-link" href="#%e7%a1%ac%e4%b8%ad%e6%96%ad%e4%b8%8e%e8%bd%af%e4%b8%ad%e6%96%ad" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>中断处理分为两部分，上半部与下半部。&lt;/p>
&lt;ol>
&lt;li>硬中断，也就是中断处理的上半部
&lt;ol>
&lt;li>外围硬件发给 CPU 或者内存的异步信号就称之为硬中断&lt;/li>
&lt;li>由与系统相连的外设(比如网卡、硬盘)自动产生的。主要是用来通知操作系统系统外设状态的变化。比如当网卡收到数据包的时候，就会发出一个中断。我们通常所说的中断指的是硬中断(hardirq)。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>软中断：也就是中断处理的下半部
&lt;ol>
&lt;li>由软件系统本身发给操作系统内核的中断信号，称之为软中断。通常是由硬中断处理程序或进程调度程序对操作系统内核的中断，也就是我们常说的系统调用(System Call)&lt;/li>
&lt;li>为了满足实时系统的要求，中断处理应该是越快越好。linux 为了实现这个特点，当中断发生的时候，硬中断处理那些短时间就可以完成的工作，而将那些处理事件比较长的工作，放到中断之后来完成，也就是软中断(softirq)来完成。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>也就是说，如果在一个完整的中断流程中，硬中断首先产生，然后硬中断的处理程序将会发出中断信号后，再有软中断进行处理。&lt;/p>
&lt;h2 id="硬中断中断的上半部">硬中断(中断的上半部)&lt;a class="td-heading-self-link" href="#%e7%a1%ac%e4%b8%ad%e6%96%ad%e4%b8%ad%e6%96%ad%e7%9a%84%e4%b8%8a%e5%8d%8a%e9%83%a8" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="网络设备的中断">网络设备的中断&lt;a class="td-heading-self-link" href="#%e7%bd%91%e7%bb%9c%e8%ae%be%e5%a4%87%e7%9a%84%e4%b8%ad%e6%96%ad" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>在内核中，网络设备驱动是通过中断的方式来接受和处理数据包。当网卡设备上有数据到达的时候，会触发一个硬件中断来通知 CPU 来处理数据，此类处理中断的程序一般称作 &lt;strong>Interrupt Service Routines(中断服务程序，简称 ISR)&lt;/strong>。ISR 程序不宜处理过多逻辑，否则会让设备的中断处理无法及时响应。因此 Linux 中将中断处理函数分为上半部和下半部。上半部是只进行最简单的工作，快速处理然后释放 CPU。剩下将绝大部分的工作都放到下半部中，下半部中逻辑由内核线程选择合适时机进行处理。&lt;/p>
&lt;h2 id="软中断中断的下半部">软中断(中断的下半部)&lt;a class="td-heading-self-link" href="#%e8%bd%af%e4%b8%ad%e6%96%ad%e4%b8%ad%e6%96%ad%e7%9a%84%e4%b8%8b%e5%8d%8a%e9%83%a8" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Linux 2.4 以后内核版本采用的下半部实现方式是软中断，由 &lt;code>ksoftirqd&lt;/code> 内核线程全权处理， 正常情况下每个 CPU 核上都有自己的软中断处理数队列和 &lt;code>ksoftirqd&lt;/code> 内核线程。软中断实现只是通过给内存中设置一个对应的二进制值来标识，软中断处理的时机主要为以下 2 种：&lt;/p>
&lt;ul>
&lt;li>硬件中断 &lt;code>irq_exit&lt;/code>退出时；&lt;/li>
&lt;li>被唤醒 &lt;code>ksoftirqd&lt;/code> 内核线程进行处理软中断；&lt;/li>
&lt;/ul>
&lt;p>常见的软中断类型如下，代码：&lt;a href="https://github.com/torvalds/linux/blob/v5.19/include/linux/interrupt.h#L548">include/linux/interrupt.h&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">enum&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">HI_SOFTIRQ&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// tasklet
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">TIMER_SOFTIRQ&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// timer
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">NET_TX_SOFTIRQ&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// 网络数据包发送软中断
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">NET_RX_SOFTIRQ&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// 网络数据包接受软中断
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">BLOCK_SOFTIRQ&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// IO
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">IRQ_POLL_SOFTIRQ&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">TASKLET_SOFTIRQ&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// tasklet
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">SCHED_SOFTIRQ&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// schedule
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">HRTIMER_SOFTIRQ&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// timer
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">RCU_SOFTIRQ&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// lock
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">NR_SOFTIRQS&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>/proc/softirqs&lt;/code> 文件中显示的内容，即是这一段代码的实例化。&lt;/p>
&lt;p>优先级自上而下，HI_SOFTIRQ 的优先级最高。其中 &lt;code>NET_TX_SOFTIRQ&lt;/code> 对应于网络数据包的发送， &lt;code>NET_RX_SOFTIRQ&lt;/code> 对应于网络数据包接受，两者共同完成网络数据包的发送和接收。网络相关的中断程序在网络子系统初始化的时候进行注册， &lt;code>NET_RX_SOFTIRQ&lt;/code> 的对应函数为 &lt;code>net_rx_action()&lt;/code> ，在 &lt;code>net_rx_action()&lt;/code> 函数中会调用网卡设备设置的 &lt;code>poll&lt;/code> 函数，批量收取网络数据包并调用上层注册的协议函数进行处理，如果是为 ip 协议，则会调用 &lt;code>ip_rcv&lt;/code>，上层协议为 icmp 的话，继续调用 &lt;code>icmp_rcv&lt;/code> 函数进行后续的处理。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/os/kernel/cpu/interrupts/1616168186704-b346f542-96a8-4a50-a268-031938aadb86.png" alt="">&lt;/p>
&lt;h2 id="硬中断与软中断之区别与联系">硬中断与软中断之区别与联系？&lt;a class="td-heading-self-link" href="#%e7%a1%ac%e4%b8%ad%e6%96%ad%e4%b8%8e%e8%bd%af%e4%b8%ad%e6%96%ad%e4%b9%8b%e5%8c%ba%e5%88%ab%e4%b8%8e%e8%81%94%e7%b3%bb" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>硬中断是由外设硬件发出的，需要有中断控制器之参与。其过程是外设侦测到变化，告知中断控制器，中断控制器通过 CPU 或内存的中断脚通知 CPU，然后硬件进行程序计数器及堆栈寄存器之现场保存工作（引发上下文切换），并根据中断向量调用硬中断处理程序进行中断处理&lt;/li>
&lt;li>软中断则通常是由硬中断处理程序或者进程调度程序等软件程序发出的中断信号，无需中断控制器之参与，直接以一个 CPU 指令之形式指示 CPU 进行程序计数器及堆栈寄存器之现场保存工作(亦会引发上下文切换)，并调用相应的软中断处理程序进行中断处理(即我们通常所言之系统调用)&lt;/li>
&lt;li>硬中断直接以硬件的方式引发，处理速度快。软中断以软件指令之方式适合于对响应速度要求不是特别严格的场景&lt;/li>
&lt;li>硬中断通过设置 CPU 的屏蔽位可进行屏蔽，软中断则由于是指令之方式给出，不能屏蔽&lt;/li>
&lt;li>硬中断发生后，通常会在硬中断处理程序中调用一个软中断来进行后续工作的处理&lt;/li>
&lt;li>硬中断和软中断均会引起上下文切换(进程/线程之切换)，进程切换的过程是差不多的&lt;/li>
&lt;/ul>
&lt;h1 id="查看中断情况">查看中断情况&lt;a class="td-heading-self-link" href="#%e6%9f%a5%e7%9c%8b%e4%b8%ad%e6%96%ad%e6%83%85%e5%86%b5" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>查看中断分布情况即 CPU 都在哪些设备上干活，干了多少(也可以使用 itop 工具实时查看)？&lt;/p>
&lt;blockquote>
&lt;p>注意：下面查看的信息只列出了前 4 个 CPU，实际该设备有 128 核&lt;/p>
&lt;/blockquote>
&lt;h3 id="cat-procinterrupts-命令查看硬中断信息">&lt;code>cat /proc/interrupts&lt;/code> 命令查看硬中断信息&lt;a class="td-heading-self-link" href="#cat-procinterrupts-%e5%91%bd%e4%bb%a4%e6%9f%a5%e7%9c%8b%e7%a1%ac%e4%b8%ad%e6%96%ad%e4%bf%a1%e6%81%af" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 从左至右依次显示IRQ编号，每个cpu对该IRQ的处理次数(每个CPU占一列)，中断控制器的名字，IRQ的名字以及驱动程序注册该IRQ时使用的名字&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># cat /proc/interrupts&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CPU0 CPU1 CPU2 CPU3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 0: &lt;span style="color:#0000cf;font-weight:bold">620&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> IR-IO-APIC-edge timer
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 8: &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> IR-IO-APIC-edge rtc0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 9: &lt;span style="color:#0000cf;font-weight:bold">20774&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> IR-IO-APIC-fasteoi acpi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 16: &lt;span style="color:#0000cf;font-weight:bold">28&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> IR-IO-APIC-fasteoi ehci_hcd:usb1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 23: &lt;span style="color:#0000cf;font-weight:bold">243&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> IR-IO-APIC-fasteoi ehci_hcd:usb2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 88: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> DMAR_MSI-edge dmar0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 89: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> DMAR_MSI-edge dmar1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 90: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> IR-PCI-MSI-edge PCIe PME
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>......
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>101: &lt;span style="color:#0000cf;font-weight:bold">169988&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> IR-PCI-MSI-edge i40e-enp25s0f0-TxRx-0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>134: &lt;span style="color:#0000cf;font-weight:bold">1900138&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> IR-PCI-MSI-edge eth2-q0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>150: &lt;span style="color:#0000cf;font-weight:bold">4262209&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> IR-PCI-MSI-edge eth3-q0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>166: &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> IR-PCI-MSI-edge ioat-msix
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>......
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NMI: &lt;span style="color:#0000cf;font-weight:bold">710&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">280&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">658&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">235&lt;/span> Non-maskable interrupts
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LOC: &lt;span style="color:#0000cf;font-weight:bold">4230314&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2640664&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2427443&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1338890&lt;/span> Local timer interrupts
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>SPU: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> Spurious interrupts
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PMI: &lt;span style="color:#0000cf;font-weight:bold">710&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">280&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">658&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">235&lt;/span> Performance monitoring interrupts
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>IWI: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> IRQ work interrupts
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>RES: &lt;span style="color:#0000cf;font-weight:bold">679921&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1369165&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1013002&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">573776&lt;/span> Rescheduling interrupts
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CAL: &lt;span style="color:#0000cf;font-weight:bold">46507&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">67439&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">67569&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">67567&lt;/span> Function call interrupts
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TLB: &lt;span style="color:#0000cf;font-weight:bold">6547&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3416&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1798&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1015&lt;/span> TLB shootdowns
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TRM: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> Thermal event interrupts
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>THR: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> Threshold APIC interrupts
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>MCE: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> Machine check exceptions
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>MCP: &lt;span style="color:#0000cf;font-weight:bold">569&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">569&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">569&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">569&lt;/span> Machine check polls
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ERR: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>MIS: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这些信息在不同环境下，内容不同。比如对于网卡来说，物理机上一般是以 网卡名表示，比如上面的 eth2-q0 等等。而对于 kvm 虚拟机，一般是 virtio0-input.0 、 virtio0-output.0、virtio0-input.1、virtio0-output.1 等等，virtio0 这网卡有几个队列，就有几个对应的 input 和 output，input 和 output 分别表示该网卡队列的输出和输出的中断情况。&lt;/p>
&lt;p>在 CPU 数量过多时，输出的信息非常杂乱，通常有这么几种方式可以简化输出&lt;/p>
&lt;p>&lt;strong>&lt;code>cat /proc/interrupts | tr -s &amp;quot; &amp;quot;&lt;/code>&lt;/strong> # 让数据更紧凑，逐行查看&lt;/p>
&lt;p>&lt;strong>&lt;code>for i in $(egrep &amp;quot;-input.&amp;quot; /proc/interrupts |awk -F &amp;quot;:&amp;quot; '{print $1}');do cat /proc/irq/$i/smp_affinity_list;done&lt;/code>&lt;/strong> # 从 KVM 虚拟机中找到处理 IRQ 的 CPU。&lt;/p>
&lt;blockquote>
&lt;p>如果是物理机的话，把 grep 筛选的 -input. 这段内容改为物理机里网络设备名称即可&lt;/p>
&lt;/blockquote>
&lt;h3 id="cat-procsoftirqs-命令查看软中断请求信息">cat /proc/softirqs 命令查看软中断请求信息&lt;a class="td-heading-self-link" href="#cat-procsoftirqs-%e5%91%bd%e4%bb%a4%e6%9f%a5%e7%9c%8b%e8%bd%af%e4%b8%ad%e6%96%ad%e8%af%b7%e6%b1%82%e4%bf%a1%e6%81%af" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># cat /proc/softirqs&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CPU0 CPU1 CPU2 CPU3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HI: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> TIMER: &lt;span style="color:#0000cf;font-weight:bold">64617617&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">68513491&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">69044942&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">72115635&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NET_TX: &lt;span style="color:#0000cf;font-weight:bold">69847&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">732&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">763&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">789&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NET_RX: &lt;span style="color:#0000cf;font-weight:bold">27520994&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">45465624&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">45524602&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">56388657&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> BLOCK: &lt;span style="color:#0000cf;font-weight:bold">1107314&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1290437&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1396335&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1263193&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>BLOCK_IOPOLL: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> TASKLET: &lt;span style="color:#0000cf;font-weight:bold">444161&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">163638&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">518738&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">264470&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SCHED: &lt;span style="color:#0000cf;font-weight:bold">34176300&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">27939686&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">24531928&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">24977357&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HRTIMER: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> RCU: &lt;span style="color:#0000cf;font-weight:bold">152761131&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">170249352&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">156225062&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">158460201&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 CPU 数量过多时，输出的信息非常杂乱，通常有这么几种方式可以简化输出&lt;/p>
&lt;p>awk 脚本：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>BEGIN&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">cpucount&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">6&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">NR&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> 1&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">num&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> 5&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;%30s&amp;#34;&lt;/span>,&lt;span style="color:#000">$1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">i&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>2&lt;span style="color:#000;font-weight:bold">;&lt;/span>i&amp;lt;&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>cpucount&lt;span style="color:#000;font-weight:bold">;&lt;/span>i++&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;%15s\t&amp;#34;&lt;/span>,&lt;span style="color:#000">$i&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>RS&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NR &amp;gt; 1&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">i&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>1&lt;span style="color:#000;font-weight:bold">;&lt;/span>i&amp;lt;&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>cpucount+1&lt;span style="color:#000;font-weight:bold">;&lt;/span>i++&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;%15s\t&amp;#34;&lt;/span>,&lt;span style="color:#000">$i&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>RS&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>awk 命令持续观察&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>run&lt;span style="color:#ce5c00;font-weight:bold">()&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic"># 这个是输出指定列。即看个别 CPU 的软中断&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic"># awk &amp;#39;NR&amp;gt;1{printf(&amp;#34;%15s\t%10s\t%10s\t%10s\t%10s\n&amp;#34;,$1,$3,$4,$5,$6)}&amp;#39; &amp;lt;/proc/softirqs | grep NET_RX&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic"># 通过循环输出每行所有列。即看所有 CPU 的软中断&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> awk &lt;span style="color:#4e9a06">&amp;#39;NR&amp;gt;1{for(i=1;i&amp;lt;10;i++){printf(&amp;#34;%10s&amp;#34;,$i)}printf(&amp;#34;\n&amp;#34;)}&amp;#39;&lt;/span> &amp;lt;/proc/softirqs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">printf&lt;/span> -v run_str &lt;span style="color:#4e9a06">&amp;#39;%q&amp;#39;&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>&lt;span style="color:#204a87">declare&lt;/span> -f run&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>&lt;span style="color:#4e9a06">; run&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>watch -c -d &lt;span style="color:#4e9a06">&amp;#34;bash -c &lt;/span>&lt;span style="color:#000">$run_str&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="其他">其他&lt;a class="td-heading-self-link" href="#%e5%85%b6%e4%bb%96" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>总的中断次数可以通过 vmstat 或者 dstat 查看，其中 vmstat 中的 in 表示每秒的中断次数；&lt;/p>
&lt;p>通过 mpstat -P ALL 2,每隔两秒查看下所有核状态信息，其中%irq 为硬中断，%soft 为软中断&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>root@geekwolf:~# mpstat -P ALL &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>08:42:04 AM CPU %usr %nice %sys %iowait %irq %soft %steal %guest %idle
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>08:42:05 AM all 4.31 0.00 0.70 0.00 0.00 0.06 0.00 0.00 94.93
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>08:42:05 AM &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 5.26 0.00 1.05 0.00 0.00 60.05 0.00 0.00 92.63
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>08:42:05 AM &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 7.07 0.00 1.01 0.00 0.00 0.00 0.00 0.00 91.92
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>08:42:05 AM &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> 8.91 0.00 0.99 0.00 0.00 0.00 0.00 0.00 90.10
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>08:42:05 AM &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> 8.00 0.00 1.00 0.00 0.00 0.00 0.00 0.00 91.00
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>......
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="通过-取外卖-事件来类比中断">通过 “取外卖” 事件来类比中断&lt;a class="td-heading-self-link" href="#%e9%80%9a%e8%bf%87-%e5%8f%96%e5%a4%96%e5%8d%96-%e4%ba%8b%e4%bb%b6%e6%9d%a5%e7%b1%bb%e6%af%94%e4%b8%ad%e6%96%ad" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>说到中断，我在前面关于“上下文切换”的文章，简单说过中断的含义，先来回顾一下。&lt;/p>
&lt;p>中断是系统用来响应硬件设备请求的一种机制，它会打断进程的正常调度和执行，然后调用内核中的中断处理程序来响应设备的请求。&lt;/p>
&lt;p>你可能要问了，为什么要有中断呢？我可以举个生活中的例子，让你感受一下中断的魅力。&lt;/p>
&lt;p>比如说你订了一份外卖，但是不确定外卖什么时候送到，也没有别的方法了解外卖的进度，但是，配送员送外卖是不等人的，到了你这儿没人取的话，就直接走人了。所以你只能苦苦等着，时不时去门口看看外卖送到没，而不能干其他事情。&lt;/p>
&lt;p>不过呢，如果在订外卖的时候，你就跟配送员约定好，让他送到后给你打个电话，那你就不用苦苦等待了，就可以去忙别的事情，直到电话一响，接电话、取外卖就可以了。&lt;/p>
&lt;p>这里的“打电话”，其实就是一个中断。没接到电话的时候，你可以做其他的事情；只有接到了电话（也就是发生中断），你才要进行另一个动作：取外卖。&lt;/p>
&lt;p>这个例子你就可以发现，中断其实是一种异步的事件处理机制，可以提高系统的并发处理能力。&lt;/p>
&lt;p>由于中断处理程序会打断其他进程的运行，所以，为了减少对正常进程运行调度的影响，中断处理程序就需要尽可能快地运行。如果中断本身要做的事情不多，那么处理起来也不会有太大问题；但如果中断要处理的事情很多，中断服务程序就有可能要运行很长时间。特别是，中断处理程序在响应中断时，还会临时关闭中断。这就会导致上一次中断处理完成之前，其他中断都不能响应，也就是说中断有可能会丢失。那么还是以取外卖为例。假如你订了 2 份外卖，一份主食和一份饮料，并且是由 2 个不同的配送员来配送。这次你不用时时等待着，两份外卖都约定了电话取外卖的方式。但是，问题又来了。&lt;/p>
&lt;p>当第一份外卖送到时，配送员给你打了个长长的电话，商量发票的处理方式。与此同时，第二个配送员也到了，也想给你打电话。&lt;/p>
&lt;p>但是很明显，因为电话占线（也就是关闭了中断响应），第二个配送员的电话是打不通的。所以，第二个配送员很可能试几次后就走掉了（也就是丢失了一次中断）。&lt;/p>
&lt;p>软中断&lt;/p>
&lt;p>如果你弄清楚了“取外卖”的模式，那对系统的中断机制就很容易理解了。事实上，为了解决中断处理程序执行过长和中断丢失的问题，Linux 将中断处理过程分成了两个阶段，也就是上半部和下半部：&lt;/p>
&lt;ol>
&lt;li>上半部用来快速处理中断，它在中断禁止模式下运行，主要处理跟硬件紧密相关的或时间敏感的工作。&lt;/li>
&lt;li>上半部直接处理硬件请求，也就是我们常说的硬中断，特点是快速执行&lt;/li>
&lt;li>下半部用来延迟处理上半部未完成的工作，通常以内核线程的方式运行。&lt;/li>
&lt;li>下半部则是由内核触发，也就是我们常说的软中断，特点是延迟执行。&lt;/li>
&lt;/ol>
&lt;p>比如说前面取外卖的例子：&lt;/p>
&lt;ul>
&lt;li>上半部就是你接听电话，告诉配送员你已经知道了，其他事儿见面再说，然后电话就可以挂断了&lt;/li>
&lt;li>下半部才是取外卖的动作，以及见面后商量发票处理的动作。&lt;/li>
&lt;/ul>
&lt;p>这样，第一个配送员不会占用你太多时间，当第二个配送员过来时，照样能正常打通你的电话。&lt;/p>
&lt;p>除了取外卖，我再举个最常见的网卡接收数据包的例子，让你更好地理解。&lt;/p>
&lt;p>网卡接收到数据包后，会通过&lt;strong>硬件中断&lt;/strong>的方式，通知内核有新的数据到了。这时，内核就应该调用中断处理程序来响应它。你可以自己先想一下，这种情况下的上半部和下半部分别负责什么工作呢？&lt;/p>
&lt;ol>
&lt;li>对上半部来说，既然是快速处理，其实就是要把网卡的数据读到内存中，然后更新一下硬件寄存器的状态（表示数据已经读好了），最后再发送一个&lt;strong>软中断&lt;/strong>信号，通知下半部做进一步的处理。&lt;/li>
&lt;li>而下半部被软中断信号唤醒后，需要从内存中找到网络数据，再按照网络协议栈，对数据进行逐层解析和处理，直到把它送给应用程序。&lt;/li>
&lt;/ol>
&lt;p>实际上，上半部会打断 CPU 正在执行的任务，然后立即执行中断处理程序。而下半部以内核线程的方式执行，并且每个 CPU 都对应一个软中断内核线程，名字为 “ksoftirqd/CPU 编号”，比如说， 0 号 CPU 对应的软中断内核线程的名字就是 ksoftirqd/0。&lt;/p>
&lt;p>不过要注意的是，软中断不只包括了刚刚所讲的硬件设备中断处理程序的下半部，一些内核自定义的事件也属于软中断，比如内核调度和 RCU 锁（Read-Copy Update 的缩写，RCU 是 Linux 内核中最常用的锁之一）等。&lt;/p>
&lt;p>那要怎么知道你的系统里有哪些软中断呢？&lt;/p>
&lt;h2 id="查看软中断和内核线程">查看软中断和内核线程&lt;a class="td-heading-self-link" href="#%e6%9f%a5%e7%9c%8b%e8%bd%af%e4%b8%ad%e6%96%ad%e5%92%8c%e5%86%85%e6%a0%b8%e7%ba%bf%e7%a8%8b" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>运行下面的命令，查看 /proc/softirqs 文件的内容，你就可以看到各种类型软中断在不同 CPU 上的累积运行次数：&lt;/p>
&lt;p>/proc/softirqs 提供了软中断的运行情况；&lt;/p>
&lt;p>/proc/interrupts 提供了硬中断的运行情况&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>root@master-1 ~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># cat /proc/softirqs&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CPU0 CPU1 CPU2 CPU3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HI: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> TIMER: &lt;span style="color:#0000cf;font-weight:bold">64617617&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">68513491&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">69044942&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">72115635&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NET_TX: &lt;span style="color:#0000cf;font-weight:bold">69847&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">732&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">763&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">789&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NET_RX: &lt;span style="color:#0000cf;font-weight:bold">27520994&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">45465624&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">45524602&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">56388657&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> BLOCK: &lt;span style="color:#0000cf;font-weight:bold">1107314&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1290437&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1396335&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1263193&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>BLOCK_IOPOLL: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> TASKLET: &lt;span style="color:#0000cf;font-weight:bold">444161&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">163638&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">518738&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">264470&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SCHED: &lt;span style="color:#0000cf;font-weight:bold">34176300&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">27939686&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">24531928&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">24977357&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HRTIMER: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> RCU: &lt;span style="color:#0000cf;font-weight:bold">152761131&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">170249352&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">156225062&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">158460201&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在查看 /proc/softirqs 文件内容时，你要特别注意以下这两点。&lt;/p>
&lt;ul>
&lt;li>第一，要注意软中断的类型，也就是这个界面中第一列的内容。从第一列你可以看到，软中断包括了 10 个类别，分别对应不同的工作类型。比如 NET_RX 表示网络接收中断，而 NET_TX 表示网络发送中断。&lt;/li>
&lt;li>第二，要注意同一种软中断在不同 CPU 上的分布情况，也就是同一行的内容。正常情况下，同一种中断在不同 CPU 上的累积次数应该差不多。比如这个界面中，NET_RX 在 CPU0 和 CPU1 上的中断次数基本是同一个数量级，相差不大。&lt;/li>
&lt;/ul>
&lt;p>不过你可能发现，TASKLET 在不同 CPU 上的分布并不均匀。TASKLET 是最常用的软中断实现机制，每个 TASKLET 只运行一次就会结束 ，并且只在调用它的函数所在的 CPU 上运行。&lt;/p>
&lt;p>因此，使用 TASKLET 特别简便，当然也会存在一些问题，比如说由于只在一个 CPU 上运行导致的调度不均衡，再比如因为不能在多个 CPU 上并行运行带来了性能限制。&lt;/p>
&lt;p>另外，刚刚提到过，软中断实际上是以内核线程的方式运行的，每个 CPU 都对应一个软中断内核线程，这个软中断内核线程就叫做 ksoftirqd/CPU 编号。那要怎么查看这些线程的运行状况呢？&lt;/p>
&lt;p>其实用 ps 命令就可以做到，比如执行下面的指令：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>root@master-1 ~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># ps aux | grep softirq&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root &lt;span style="color:#0000cf;font-weight:bold">6&lt;/span> 0.1 0.0 &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> ? S Sep25 8:32 &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>ksoftirqd/0&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root &lt;span style="color:#0000cf;font-weight:bold">14&lt;/span> 0.2 0.0 &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> ? S Sep25 11:55 &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>ksoftirqd/1&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root &lt;span style="color:#0000cf;font-weight:bold">19&lt;/span> 0.1 0.0 &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> ? S Sep25 10:48 &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>ksoftirqd/2&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 0.2 0.0 &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> ? S Sep25 13:36 &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>ksoftirqd/3&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意，这些线程的名字外面都有中括号，这说明 ps 无法获取它们的命令行参数（cmline）。一般来说，ps 的输出中，名字括在中括号里的，一般都是内核线程。&lt;/p>
&lt;p>小结&lt;/p>
&lt;p>Linux 中的中断处理程序分为上半部和下半部：&lt;/p>
&lt;ol>
&lt;li>上半部对应硬件中断，用来快速处理中断。&lt;/li>
&lt;li>下半部对应软中断，用来异步处理上半部未完成的工作。&lt;/li>
&lt;/ol>
&lt;p>Linux 中的软中断包括网络收发、定时、调度、RCU 锁等各种类型，可以通过查看 /proc/softirqs 来观察软中断的运行情况。&lt;/p></description></item><item><title>Docs: PostgreSQL</title><link>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE/PostgreSQL/PostgreSQL/</link><pubDate>Sat, 11 Nov 2023 17:30:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE/PostgreSQL/PostgreSQL/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.postgresql.org/">官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.ruanyifeng.com/blog/2013/12/getting_started_with_postgresql.html">PostgreSQL 新手入门-阮一峰&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>PostgreSQL 是一个功能强大的开源对象关系数据库系统，经过 30 多年的积极开发，在可靠性、特性健壮性和性能方面赢得了很高的声誉。&lt;/p>
&lt;p>一个 Database(库) 中包含多个 Schemas(模式)，一个 Schema(模式) 中包含多个 Tables(表)&lt;/p>
&lt;h2 id="schema">Schema&lt;a class="td-heading-self-link" href="#schema" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://www.postgresql.org/docs/current/ddl-schemas.html">https://www.postgresql.org/docs/current/ddl-schemas.html&lt;/a>&lt;/p>
&lt;p>PostgreSQL 的数据库中包含 1 个或多个 Schema，所有的 Table 是归属在 Schema 下的。&lt;/p>
&lt;blockquote>
&lt;p>可以讲 Schema 理解为 Namespace（PostgreSQL 也是通过 pg_namespace 元表（元数据表）查看所有 Schema）&lt;/p>
&lt;/blockquote>
&lt;p>默认情况下，创建的 Table 自动放入名为 &lt;strong>public&lt;/strong> 的 Schema 下。每个数据库都会包含 public Schema。&lt;/p>
&lt;p>要访问非 public Schema 下的 Table，使用 &lt;code>.&lt;/code> 符号。e.g. &lt;code>SchemaName.TableName&lt;/code>，如果用最简单的 SQL 举例就是: &lt;code>select * from schema_demo.table_one&lt;/code> 列出名为 schema_demo 模式中的 table_one 表下的所有列。&lt;/p>
&lt;p>PostgreSQL 内置了如下几个 Schemas&lt;/p>
&lt;ul>
&lt;li>&lt;strong>public&lt;/strong> # 在不指定 Schema 的情况下，新建的 Table 都默认保存在 public Schema 中。&lt;/li>
&lt;li>&lt;strong>pg_catalog&lt;/strong> # System catalogs(系统目录)，保存 PostgreSQL 运行常见的&lt;/li>
&lt;li>&lt;strong>information_schema&lt;/strong> # 与 Schema 相关的内部信息&lt;/li>
&lt;/ul>
&lt;h1 id="postgresql-部署">PostgreSQL 部署&lt;a class="td-heading-self-link" href="#postgresql-%e9%83%a8%e7%bd%b2" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="部署">部署&lt;a class="td-heading-self-link" href="#%e9%83%a8%e7%bd%b2" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="redhat-包部署">Redhat 包部署&lt;a class="td-heading-self-link" href="#redhat-%e5%8c%85%e9%83%a8%e7%bd%b2" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>&lt;a href="https://www.postgresql.org/download/linux/redhat/">https://www.postgresql.org/download/linux/redhat/&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>yum install postgresql-server postgresql -y
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>除了 postgresl 客户端和服务端以外，还有两个包可以安装 postgresql-contrib（额外提供的模块）、postgresql-devel（C 语言开发的库和头文件）&lt;/p>
&lt;/blockquote>
&lt;p>初始化数据库，为 /var/lib/pgsql/data/ 目录填充数据，若目录为空则无法启动 postgresql。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>postgresql-setup --initdb
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>启动 PostgreSQL 服务端&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>systemctl &lt;span style="color:#204a87">enable&lt;/span> postgresql.service --now
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="debian-包部署">Debian 包部署&lt;a class="td-heading-self-link" href="#debian-%e5%8c%85%e9%83%a8%e7%bd%b2" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>&lt;a href="https://www.postgresql.org/download/linux/ubuntu/">https://www.postgresql.org/download/linux/ubuntu/&lt;/a>&lt;/p>
&lt;p>&lt;strong>一、安装&lt;/strong>&lt;/p>
&lt;p>首先，安装 PostgreSQL 客户端。&lt;/p>
&lt;p>&lt;code>sudo apt-get install postgresql-client&lt;/code>&lt;/p>
&lt;p>然后，安装 PostgreSQL 服务器。&lt;/p>
&lt;p>&lt;code>sudo apt-get install postgresql&lt;/code>&lt;/p>
&lt;p>正常情况下，安装完成后，PostgreSQL 服务器会自动在本机的 5432 端口开启。&lt;/p>
&lt;p>如果还想安装图形管理界面，可以运行下面命令，但是本文不涉及这方面内容。&lt;/p>
&lt;p>&lt;code>sudo apt-get install pgadmin3&lt;/code>&lt;/p>
&lt;h2 id="为-postgres-用户添加密码">为 postgres 用户添加密码&lt;a class="td-heading-self-link" href="#%e4%b8%ba-postgres-%e7%94%a8%e6%88%b7%e6%b7%bb%e5%8a%a0%e5%af%86%e7%a0%81" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># su - postgres&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>$ psql
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Password &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> user postgres:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>psql &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>13.3&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Type &lt;span style="color:#4e9a06">&amp;#34;help&amp;#34;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> help.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">postgres&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># \password postgres&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Enter new password:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Enter it again:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">postgres&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="修改配置">修改配置&lt;a class="td-heading-self-link" href="#%e4%bf%ae%e6%94%b9%e9%85%8d%e7%bd%ae" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://gist.github.com/AtulKsol/4470d377b448e56468baef85af7fd614">https://gist.github.com/AtulKsol/4470d377b448e56468baef85af7fd614&lt;/a>&lt;/p>
&lt;p>默认情况下 psql 使用对等身份验证通过 UNIX 套接字进行连接，这要求当前 UNIX 用户具有与 psql 相同的用户名。因此，您必须创建 UNIX 用户 postgres，然后以 postgres 身份登录或使用 sudo -u postgres psql 数据库名称 来访问数据库（并且 psql 不应要求输入密码）。若使用 &lt;code>1&lt;/code> 这种命令连接 PostgreSQL，将会又如下报错：&lt;/p>
&lt;p>&lt;code>psql: FATAL: Peer authentication failed for user “postgres” (or any user)&lt;/code>&lt;/p>
&lt;p>但如果打算通过 Unix 套接字而不是对等方法强制进行密码身份验证，修改 pg_hba.conf 配置文件中的如下内容：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># TYPE DATABASE USER ADDRESS METHOD&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">local&lt;/span> all all peer
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>改为&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># TYPE DATABASE USER ADDRESS METHOD&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">local&lt;/span> all all md5
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中 METHOD 可以有三个值：&lt;/p>
&lt;ul>
&lt;li>&lt;code>peer&lt;/code> 意味着它将信任 UNIX 用户的身份（真实性）。所以不要求密码。&lt;/li>
&lt;li>&lt;code>md5&lt;/code> 意味着它始终会要求输入密码，并在使用 MD5 哈希后进行验证。&lt;/li>
&lt;li>&lt;code>trust&lt;/code>意味着它永远不会要求输入密码，并且始终信任任何连接。&lt;/li>
&lt;/ul>
&lt;h3 id="修改监听以及允许通过-tcp-连接">修改监听以及允许通过 TCP 连接&lt;a class="td-heading-self-link" href="#%e4%bf%ae%e6%94%b9%e7%9b%91%e5%90%ac%e4%bb%a5%e5%8f%8a%e5%85%81%e8%ae%b8%e9%80%9a%e8%bf%87-tcp-%e8%bf%9e%e6%8e%a5" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 修改 postgresql.conf 配置文件，添加监听地址，改为*`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">listen_addresses&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;*&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 修改 pg_hba.conf，添加远程主机地址，放在第一行：允许任意用户从任意机器上以密码方式访问数据库，把下行添加为第一条规则：&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>host    all             all             0.0.0.0/0              md5
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="连接数据库">连接数据库&lt;a class="td-heading-self-link" href="#%e8%bf%9e%e6%8e%a5%e6%95%b0%e6%8d%ae%e5%ba%93" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># psql -d postgres -U postgres&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Password &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> user postgres:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>psql &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>13.3&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Type &lt;span style="color:#4e9a06">&amp;#34;help&amp;#34;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> help.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">postgres&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="添加新用户和新数据库">添加新用户和新数据库&lt;a class="td-heading-self-link" href="#%e6%b7%bb%e5%8a%a0%e6%96%b0%e7%94%a8%e6%88%b7%e5%92%8c%e6%96%b0%e6%95%b0%e6%8d%ae%e5%ba%93" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>初次安装后，默认生成一个名为 postgres 的数据库和一个名为 postgres 的数据库用户。这里需要注意的是，同时还生成了一个名为 postgres 的 Linux 系统用户。&lt;/p>
&lt;p>下面，我们使用 postgres 用户，来生成其他用户和新数据库。好几种方法可以达到这个目的，这里介绍两种。&lt;/p>
&lt;p>&lt;strong>第一种方法，使用 PostgreSQL 控制台。&lt;/strong>&lt;/p>
&lt;p>首先，新建一个 Linux 新用户，可以取你想要的名字，这里为 dbuser。&lt;/p>
&lt;blockquote>
&lt;p>sudo adduser dbuser&lt;/p>
&lt;/blockquote>
&lt;p>然后，切换到 postgres 用户。&lt;/p>
&lt;blockquote>
&lt;p>sudo su - postgres&lt;/p>
&lt;/blockquote>
&lt;p>下一步，使用 psql 命令登录 PostgreSQL 控制台。&lt;/p>
&lt;blockquote>
&lt;p>psql&lt;/p>
&lt;/blockquote>
&lt;p>这时相当于系统用户 postgres 以同名数据库用户的身份，登录数据库，这是不用输入密码的。如果一切正常，系统提示符会变为&amp;quot;postgres=#&amp;quot;，表示这时已经进入了数据库控制台。以下的命令都在控制台内完成。&lt;/p>
&lt;p>第一件事是使用\password 命令，为 postgres 用户设置一个密码。&lt;/p>
&lt;blockquote>
&lt;p>\password postgres&lt;/p>
&lt;/blockquote>
&lt;p>第二件事是创建数据库用户 dbuser（刚才创建的是 Linux 系统用户），并设置密码。&lt;/p>
&lt;blockquote>
&lt;p>CREATE USER dbuser WITH PASSWORD &amp;lsquo;password&amp;rsquo;;&lt;/p>
&lt;/blockquote>
&lt;p>第三件事是创建用户数据库，这里为 exampledb，并指定所有者为 dbuser。&lt;/p>
&lt;blockquote>
&lt;p>CREATE DATABASE exampledb OWNER dbuser;&lt;/p>
&lt;/blockquote>
&lt;p>第四件事是将 exampledb 数据库的所有权限都赋予 dbuser，否则 dbuser 只能登录控制台，没有任何数据库操作权限。&lt;/p>
&lt;blockquote>
&lt;p>GRANT ALL PRIVILEGES ON DATABASE exampledb to dbuser;&lt;/p>
&lt;/blockquote>
&lt;p>最后，使用\q 命令退出控制台（也可以直接按 ctrl+D）。&lt;/p>
&lt;blockquote>
&lt;p>\q&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>第二种方法，使用 shell 命令行。&lt;/strong>&lt;/p>
&lt;p>添加新用户和新数据库，除了在 PostgreSQL 控制台内，还可以在 shell 命令行下完成。这是因为 PostgreSQL 提供了命令行程序 createuser 和 createdb。还是以新建用户 dbuser 和数据库 exampledb 为例。&lt;/p>
&lt;p>首先，创建数据库用户 dbuser，并指定其为超级用户。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo -u postgres createuser --superuser dbuser
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后，登录数据库控制台，设置 dbuser 用户的密码，完成后退出控制台。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo -u postgres psql
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">\p&lt;/span>assword dbuser
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">\q&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>接着，在 shell 命令行下，创建数据库 exampledb，并指定所有者为 dbuser。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo -u postgres createdb -O dbuser exampledb
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="登录数据库">登录数据库&lt;a class="td-heading-self-link" href="#%e7%99%bb%e5%bd%95%e6%95%b0%e6%8d%ae%e5%ba%93" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>添加新用户和新数据库以后，就要以新用户的名义登录数据库，这时使用的是 psql 命令。&lt;/p>
&lt;blockquote>
&lt;p>psql -U dbuser -d exampledb -h 127.0.0.1 -p 5432&lt;/p>
&lt;/blockquote>
&lt;p>上面命令的参数含义如下：-U 指定用户，-d 指定数据库，-h 指定服务器，-p 指定端口。&lt;/p>
&lt;p>输入上面命令以后，系统会提示输入 dbuser 用户的密码。输入正确，就可以登录控制台了。&lt;/p>
&lt;p>psql 命令存在简写形式。如果当前 Linux 系统用户，同时也是 PostgreSQL 用户，则可以省略用户名（-U 参数的部分）。举例来说，我的 Linux 系统用户名为 ruanyf，且 PostgreSQL 数据库存在同名用户，则我以 ruanyf 身份登录 Linux 系统后，可以直接使用下面的命令登录数据库，且不需要密码。&lt;/p>
&lt;blockquote>
&lt;p>psql exampledb&lt;/p>
&lt;/blockquote>
&lt;p>此时，如果 PostgreSQL 内部还存在与当前系统用户同名的数据库，则连数据库名都可以省略。比如，假定存在一个叫做 ruanyf 的数据库，则直接键入 psql 就可以登录该数据库。&lt;/p>
&lt;blockquote>
&lt;p>psql&lt;/p>
&lt;/blockquote>
&lt;p>另外，如果要恢复外部数据，可以使用下面的命令。&lt;/p>
&lt;blockquote>
&lt;p>psql exampledb exampledb.sql&lt;/p>
&lt;/blockquote>
&lt;h1 id="postgresql-关联文件与配置">PostgreSQL 关联文件与配置&lt;a class="td-heading-self-link" href="#postgresql-%e5%85%b3%e8%81%94%e6%96%87%e4%bb%b6%e4%b8%8e%e9%85%8d%e7%bd%ae" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;strong>pg_hba.conf&lt;/strong> # 控制如何访问以及哪些可以访问 PgSQL Server&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.postgresql.org/docs/current/auth-pg-hba-conf.html">https://www.postgresql.org/docs/current/auth-pg-hba-conf.html&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>postgresql.conf&lt;/strong> # 可以改监听地址&lt;/p>
&lt;h1 id="元数据">元数据&lt;a class="td-heading-self-link" href="#%e5%85%83%e6%95%b0%e6%8d%ae" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="system-catalogs">System catalogs&lt;a class="td-heading-self-link" href="#system-catalogs" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.postgresql.org/docs/current/catalogs.html">官方文档，内部 - 51. 系统目录&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>System catalogs(系统目录)&lt;/strong> 是关系数据库管理系统存储模式元数据的地方，例如有关表和列的信息以及内部簿记信息。 PostgreSQL 的 &lt;font color="#ff0000">System catalogs 是常规表&lt;/font>。您可以删除并重新创建表、添加列、插入和更新值，并以这种方式严重扰乱您的系统。通常，不应手动更改系统目录，通常有 SQL 命令可以做到这一点。 （例如，CREATE DATABASE 会在 pg_database 目录中插入一行，并实际上在磁盘上创建数据库。）对于特别深奥的操作有一些例外，但随着时间的推移，其中许多操作已作为 SQL 命令提供，因此需要对系统目录的直接操作正在不断减少。&lt;/p>
&lt;p>这些 System catalogs 常规表默认保存在 &lt;code>pg_catalog&lt;/code> Schema 中，还可以通过 &lt;code>\dS&lt;/code>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Catalog 名称&lt;/th>
&lt;th>用途&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a href="https://www.postgresql.org/docs/current/catalog-pg-namespace.html" title="51.32. pg_namespace">&lt;code>pg_namespace&lt;/code>&lt;/a>&lt;/td>
&lt;td>记录 Schems 的基本元信息。包含 oid, nspname, nspowner,nspacl 列&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>TODO&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>比如 &lt;code>SELECT * FROM pg_namespace;&lt;/code> 可以查看所有 Schemas 的信息。&lt;/p>
&lt;h2 id="information-schema">Information Schema&lt;a class="td-heading-self-link" href="#information-schema" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.postgresql.org/docs/current/information-schema.html">官方文档，客户端接口&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Information Schema 由一组视图组成，这些视图包含有关当前数据库中定义的对象的信息。Information Schema 是在 SQL 标准中定义的，因此可以预期是可移植的并保持稳定，与 System catalogs 不同，Information Schema 特定于 PostgreSQL 并且根据实现问题进行建模。然而，Information Schema 视图不包含有关 PostgreSQL 特定功能的信息；要查询这些信息，您需要查询 System catalogs 或其他 PostgreSQL 特定的视图。&lt;/p>
&lt;p>Information Schema 有一个名为 information_schema 的 Schema。该模式自动存在于所有数据库中。该模式的所有者是集群中的初始数据库用户，该用户自然拥有该模式的所有权限，包括删除它的能力（但由此节省的空间微乎其微）。&lt;/p>
&lt;p>默认情况下，information_schema 不在模式搜索路径中，因此需要通过限定名称访问其中的所有对象。由于 information_schema 中某些对象的名称是用户应用程序中可能出现的通用名称，因此如果要将信息模式放入路径中，则应小心。&lt;/p>
&lt;blockquote>
&lt;p>[!Tip]
在 information_schema.schemate 查看 Schema 信息时，有一列名为 catalog_name，可以从 &lt;code>SELECT datname FROM pg_catalog.pg_database;&lt;/code> 获取到，这 catalog_name 就是类似 Database(数据库) 的概念。相当于在 psql 中执行 &lt;code>\l&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;h1 id="gui-工具">GUI 工具&lt;a class="td-heading-self-link" href="#gui-%e5%b7%a5%e5%85%b7" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;a href="https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7.md">数据库管理工具&lt;/a>&lt;/p></description></item><item><title>Docs: OpenTelemetry</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/OpenTelemetry/OpenTelemetry/</link><pubDate>Tue, 26 Sep 2023 08:34:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/OpenTelemetry/OpenTelemetry/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/open-telemetry">GitHub 组织，OpenTelemetry&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://opentelemetry.io/">官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://opentelemetry.io/docs/">官方文档&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/bcziZg8RhCrMGYgFeN76cw">公众号-OpenTelemetry，OpenTelemetry 核心原理篇 ：怎么理解分布式链路追踪技术？&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/3dD0hIuqpXdepLVC6V7aoA">公众号-OpenTelemetry，在生产环境如何选择靠谱的 APM 系统&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>OpenTelemetry(开放式遥测技术，简称 OTel)&lt;/strong> 是一组 &lt;strong>API、SDK、工具、更是一种遥测标准&lt;/strong>，旨在创建和管理 &lt;strong>Telemetry Data(遥测数据)&lt;/strong>。通过 OpenTelemetry 标准创建的程序，可以采集 OpenTelemetry 标准的遥测数据，并发送到我们指定的后端中。OpenTelemetry 支持各种流行的开源后端项目，比如 Prometheus、Jaeger 等。&lt;/p>
&lt;p>遥测数据包括&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Logs(日志数据)&lt;/strong> # &lt;a href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Logs/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F.md">日志系统&lt;/a>&lt;/li>
&lt;li>&lt;strong>Metrics(指标数据)&lt;/strong> # &lt;a href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0.md">监控系统&lt;/a>&lt;/li>
&lt;li>&lt;strong>Traces(链路追踪数据)&lt;/strong> # &lt;a href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Traces/%E8%BF%BD%E8%B8%AA%E7%B3%BB%E7%BB%9F.md">追踪系统&lt;/a>&lt;/li>
&lt;li>&lt;strong>Baggage&lt;/strong> # TODO: 这是啥&lt;/li>
&lt;/ul>
&lt;p>Notes：OpenTelemetry 不是像 Prometheus、Jaeger 那样的可观测性后端。相反，OpenTelemetry 支持将数据导出到各种开源和商业的后端产品中，它提供了一个可插拔的架构，因此可以轻松添加其他技术协议和格式。&lt;/p>
&lt;p>OTel 之于可观测性系统，类似 OCI 之于容器。但是能比 OCI 提供更多。&lt;/p>
&lt;h2 id="opentelemetry-组件">OpenTelemetry 组件&lt;a class="td-heading-self-link" href="#opentelemetry-%e7%bb%84%e4%bb%b6" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>目前，OpenTelemetry 由以下几个主要组件组成：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>规范&lt;/strong> # 与编程语言无关的规范，规定了遥测数据格式等&lt;/li>
&lt;li>&lt;strong>工具&lt;/strong> # 用于 采集/接收、转换、导出 遥测数据的工具。比如官方提供的 &lt;a href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/OpenTelemetry/Collector.md">OTel Collector&lt;/a>&lt;/li>
&lt;li>&lt;strong>SDK&lt;/strong> # 用于为各种编程语言提供编写符合 OpenTelemetry 规范的工具&lt;/li>
&lt;li>&lt;strong>自动 instrumentation 和 贡献包&lt;/strong> # TODO: 没搞懂这是什么？&lt;/li>
&lt;/ul>
&lt;h2 id="signals">Signals&lt;a class="td-heading-self-link" href="#signals" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://opentelemetry.io/docs/concepts/signals/">https://opentelemetry.io/docs/concepts/signals/&lt;/a>&lt;/p>
&lt;p>OpenTelemetry 创建了一个名词，将 &lt;em>可观测数据（遥测数据）&lt;/em> 抽象为 Signals。&lt;/p>
&lt;p>OpenTelemetry 是围绕 Signals 或 遥测类别 构建的。Metrics、Logs、Traces、Baggage 都是一种 Signals。每个 Signals 代表一组连贯的、独立的功能。每个信号都遵循单独的生命周期，定义其当前的稳定性级别。&lt;/p>
&lt;p>OpenTelemetry 的目的是收集、处理和导出 &lt;strong>Signals&lt;/strong>。传统定义中，&lt;a href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Process/Inter%20Process%20Communication(%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1)/Signal(%E4%BF%A1%E5%8F%B7).md">Signal(信号)&lt;/a> 是系统输出，描述操作系统和应用程序的底层活动。在 OpenTelemetry 中，Signals 可以是您想要在特定时间点测量的内容，例如温度或内存使用情况，也可以是您想要跟踪的分布式系统组件的事件。您可以将不同的 Signals 组合在一起，从不同角度观察同一项技术的内部运作情况。&lt;/p>
&lt;h1 id="opentelemetry-实现">OpenTelemetry 实现&lt;a class="td-heading-self-link" href="#opentelemetry-%e5%ae%9e%e7%8e%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;a href="https://github.com/grafana/agent">GitHub 项目，grafana/agent&lt;/a> #&lt;/p>
&lt;p>&lt;a href="https://github.com/flashcatcloud/categraf">GitHub 项目，flashcatcloud/categraf&lt;/a> # 通过配置文件，采集所有数据，然后 Push 给 Prom(Prom 需要使用 &lt;code>--web.enable-remote-write-receiver&lt;/code> 为自身开启远程写功能)，暂时没有等待 pull 的功能(截止 2022.6.1 v0.1.0 版本)&lt;/p>
&lt;p>&lt;a href="https://www.guance.com/">https://www.guance.com/&lt;/a> 观测云。。。。这个产品。。怎么说呢。。上来就让人各种注册才能体验的感觉很不好。。而且在云原生社区可观测性 SIG 群里，这家人的表达方式和处理事情的态度给人的感觉也不好~工作内部矛盾放在群里说。。还揭露个人隐私。。。。o(╯□╰)o&lt;/p>
&lt;p>&lt;a href="https://github.com/open-telemetry/opentelemetry-go-instrumentation">GitHub 项目，open-telemetry/opentelemetry-go-instrumentation&lt;/a> # 使用 Go 语言利用 eBPF 实现的 OpenTelemetry 自动 Instrumentation&lt;/p>
&lt;h2 id="grafana-agent">Grafana Agent&lt;a class="td-heading-self-link" href="#grafana-agent" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/grafana/agent">GitHub 项目，grafana/agent&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/agent/latest/">官方文档&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Grafana Agent 收集遥测数据并将其转发到 Grafana Stack、Grafana Cloud 或 Grafana Enterprise 的开源部署，然后可以在其中分析您的数据。您可以在 Kubernetes 和 Docker 上安装 Grafana Agent，或者作为 Linux、macOS 和 Windows 机器的系统进程。&lt;/p>
&lt;p>Grafana Agent 是开源的，其源代码可在 GitHub 上的&lt;a href="https://github.com/grafana/agent">https://github.com/grafana/agent&lt;/a>上获得。&lt;/p>
&lt;p>Grafana Agent 适用于希望收集和转发遥测数据以进行分析和待命警报的工程师、操作员或管理员。那些运行 Grafana Agent 的人必须安装和配置 Grafana Agent 才能正确收集遥测数据并监控正在运行的代理的健康状况。&lt;/p>
&lt;h1 id="最佳实践">最佳实践&lt;a class="td-heading-self-link" href="#%e6%9c%80%e4%bd%b3%e5%ae%9e%e8%b7%b5" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;a href="https://mp.weixin.qq.com/s/wiAT4GHaeitn2o6Byr_kGA">公众号-云原生小白，Opentelemetry 实践分享 - Golang篇&lt;/a>&lt;/p>
&lt;h1 id="opentelemetry-demo">OpenTelemetry Demo&lt;a class="td-heading-self-link" href="#opentelemetry-demo" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/open-telemetry/opentelemetry-demo">GitHub 项目，open-telemetry/opentelemetry-demo&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://opentelemetry.io/docs/demo/">官方文档，Demo&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://flashcat.cloud/blog/opentelemetry-demo-step-by-step/">https://flashcat.cloud/blog/opentelemetry-demo-step-by-step/&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>OpenTelemetry Demo&lt;/strong> 是一个由用不同编程语言编写的微服务组成的 Demo 系统，这些微服务通过 gRPC 和 HTTP 相互通信；以及一个使用 [Locust](https: locust.io/) 来伪造用户流量的负载生成器。&lt;/p>
&lt;p>这是一个基于微服务的分布式系统，旨在说明 OpenTelemetry 在近乎真实的环境中的实现，这个 demo 中提供了许多的服务，而且包含了几乎所有主流的语言，可以很好的模拟我们实际的使用场景。&lt;/p>
&lt;ul>
&lt;li>提供可用于演示 OpenTelemetry 仪器和可观测性的分布式系统的实际示例。&lt;/li>
&lt;li>为供应商、工具作者和其他人构建一个基础，以扩展和演示他们的 OpenTelemetry 集成。&lt;/li>
&lt;li>为 OpenTelemetry 贡献者创建一个活生生的示例，用于测试新版本的 API、SDK 以及其他组件或增强功能。&lt;/li>
&lt;/ul>
&lt;p>架构图来源: &lt;a href="https://opentelemetry.io/docs/demo/architecture/">https://opentelemetry.io/docs/demo/architecture/&lt;/a>&lt;/p>
&lt;pre class="mermaid">graph TD
subgraph Service Diagram
accountingservice(Accounting Service):::dotnet
adservice(Ad Service):::java
cache[(Cache&amp;lt;br/&amp;gt;&amp;amp;#40redis&amp;amp;#41)]
cartservice(Cart Service):::dotnet
checkoutservice(Checkout Service):::golang
currencyservice(Currency Service):::cpp
emailservice(Email Service):::ruby
frauddetectionservice(Fraud Detection Service):::kotlin
frontend(Frontend):::typescript
frontendproxy(Frontend Proxy &amp;lt;br/&amp;gt;&amp;amp;#40Envoy&amp;amp;#41):::cpp
imageprovider(Image Provider &amp;lt;br/&amp;gt;&amp;amp;#40nginx&amp;amp;#41):::cpp
loadgenerator([Load Generator]):::python
paymentservice(Payment Service):::javascript
productcatalogservice(Product Catalog Service):::golang
quoteservice(Quote Service):::php
recommendationservice(Recommendation Service):::python
shippingservice(Shipping Service):::rust
queue[(queue&amp;lt;br/&amp;gt;&amp;amp;#40Kafka&amp;amp;#41)]
Internet --&amp;gt;|HTTP| frontendproxy
frontendproxy --&amp;gt;|HTTP| frontend
loadgenerator --&amp;gt;|HTTP| frontendproxy
frontendproxy --&amp;gt;|HTTP| imageprovider
queue --&amp;gt;|TCP| accountingservice
queue --&amp;gt;|TCP| frauddetectionservice
frontend --&amp;gt;|gRPC| cartservice
frontend --&amp;gt;|gRPC| currencyservice
checkoutservice --&amp;gt;|gRPC| cartservice --&amp;gt; cache
checkoutservice --&amp;gt;|gRPC| productcatalogservice
checkoutservice --&amp;gt;|gRPC| currencyservice
checkoutservice --&amp;gt;|HTTP| emailservice
checkoutservice --&amp;gt;|gRPC| paymentservice
checkoutservice --&amp;gt;|gRPC| shippingservice
checkoutservice --&amp;gt;|TCP| queue
frontend --&amp;gt;|gRPC| adservice
frontend --&amp;gt;|gRPC| productcatalogservice
frontend ---&amp;gt;|gRPC| checkoutservice
frontend ----&amp;gt;|gRPC| recommendationservice --&amp;gt;|gRPC| productcatalogservice
shippingservice --&amp;gt;|HTTP| quoteservice
end
classDef dotnet fill:#178600,color:white;
classDef cpp fill:#f34b7d,color:white;
classDef erlang fill:#b83998,color:white;
classDef golang fill:#00add8,color:black;
classDef java fill:#b07219,color:white;
classDef javascript fill:#f1e05a,color:black;
classDef kotlin fill:#560ba1,color:white;
classDef php fill:#4f5d95,color:white;
classDef python fill:#3572A5,color:white;
classDef ruby fill:#701516,color:white;
classDef rust fill:#dea584,color:black;
classDef typescript fill:#e98516,color:black;&lt;/pre>
&lt;pre class="mermaid">graph TD
subgraph Service Legend
dotnetsvc(.NET):::dotnet
cppsvc(C&amp;#43;&amp;#43;):::cpp
erlangsvc(Erlang/Elixir):::erlang
golangsvc(Go):::golang
javasvc(Java):::java
javascriptsvc(JavaScript):::javascript
kotlinsvc(Kotlin):::kotlin
phpsvc(PHP):::php
pythonsvc(Python):::python
rubysvc(Ruby):::ruby
rustsvc(Rust):::rust
typescriptsvc(TypeScript):::typescript
end
classDef dotnet fill:#178600,color:white;
classDef cpp fill:#f34b7d,color:white;
classDef erlang fill:#b83998,color:white;
classDef golang fill:#00add8,color:black;
classDef java fill:#b07219,color:white;
classDef javascript fill:#f1e05a,color:black;
classDef kotlin fill:#560ba1,color:white;
classDef php fill:#4f5d95,color:white;
classDef python fill:#3572A5,color:white;
classDef ruby fill:#701516,color:white;
classDef rust fill:#dea584,color:black;
classDef typescript fill:#e98516,color:black;&lt;/pre>
&lt;p>Demo 中的 Collector 的配置在 &lt;a href="https://github.com/open-telemetry/opentelemetry-demo/blob/main/src/otelcollector/otelcol-config.yml">otelcol-config.yml&lt;/a> 这里找到&lt;/p>
&lt;pre class="mermaid">graph TB
subgraph tdf[Telemetry Data Flow]
subgraph subgraph_padding [ ]
style subgraph_padding fill:none,stroke:none;
%% padding to stop the titles clashing
subgraph od[OpenTelemetry Demo]
ms(Microservice)
end
ms -.-&amp;gt;|&amp;#34;OTLP&amp;lt;br/&amp;gt;gRPC&amp;#34;| oc-grpc
ms -.-&amp;gt;|&amp;#34;OTLP&amp;lt;br/&amp;gt;HTTP POST&amp;#34;| oc-http
subgraph oc[OTel Collector]
style oc fill:#97aef3,color:black;
oc-grpc[/&amp;#34;OTLP Receiver&amp;lt;br/&amp;gt;listening on&amp;lt;br/&amp;gt;grpc://localhost:4317&amp;#34;/]
oc-http[/&amp;#34;OTLP Receiver&amp;lt;br/&amp;gt;listening on &amp;lt;br/&amp;gt;localhost:4318&amp;lt;br/&amp;gt;&amp;#34;/]
oc-proc(Processors)
oc-prom[/&amp;#34;OTLP HTTP Exporter&amp;#34;/]
oc-otlp[/&amp;#34;OTLP Exporter&amp;#34;/]
oc-grpc --&amp;gt; oc-proc
oc-http --&amp;gt; oc-proc
oc-proc --&amp;gt; oc-prom
oc-proc --&amp;gt; oc-otlp
end
oc-prom --&amp;gt;|&amp;#34;localhost:9090/api/v1/otlp&amp;#34;| pr-sc
oc-otlp --&amp;gt;|gRPC| ja-col
subgraph pr[Prometheus]
style pr fill:#e75128,color:black;
pr-sc[/&amp;#34;Prometheus OTLP Write Receiver&amp;#34;/]
pr-tsdb[(Prometheus TSDB)]
pr-http[/&amp;#34;Prometheus HTTP&amp;lt;br/&amp;gt;listening on&amp;lt;br/&amp;gt;localhost:9090&amp;#34;/]
pr-sc --&amp;gt; pr-tsdb
pr-tsdb --&amp;gt; pr-http
end
pr-b{{&amp;#34;Browser&amp;lt;br/&amp;gt;Prometheus UI&amp;#34;}}
pr-http ----&amp;gt;|&amp;#34;localhost:9090/graph&amp;#34;| pr-b
subgraph ja[Jaeger]
style ja fill:#60d0e4,color:black;
ja-col[/&amp;#34;Jaeger Collector&amp;lt;br/&amp;gt;listening on&amp;lt;br/&amp;gt;grpc://jaeger:4317&amp;#34;/]
ja-db[(Jaeger DB)]
ja-http[/&amp;#34;Jaeger HTTP&amp;lt;br/&amp;gt;listening on&amp;lt;br/&amp;gt;localhost:16686&amp;#34;/]
ja-col --&amp;gt; ja-db
ja-db --&amp;gt; ja-http
end
subgraph gr[Grafana]
style gr fill:#f8b91e,color:black;
gr-srv[&amp;#34;Grafana Server&amp;#34;]
gr-http[/&amp;#34;Grafana HTTP&amp;lt;br/&amp;gt;listening on&amp;lt;br/&amp;gt;localhost:3000&amp;#34;/]
gr-srv --&amp;gt; gr-http
end
pr-http --&amp;gt; |&amp;#34;localhost:9090/api&amp;#34;| gr-srv
ja-http --&amp;gt; |&amp;#34;localhost:16686/api&amp;#34;| gr-srv
ja-b{{&amp;#34;Browser&amp;lt;br/&amp;gt;Jaeger UI&amp;#34;}}
ja-http ----&amp;gt;|&amp;#34;localhost:16686/search&amp;#34;| ja-b
gr-b{{&amp;#34;Browser&amp;lt;br/&amp;gt;Grafana UI&amp;#34;}}
gr-http --&amp;gt;|&amp;#34;localhost:3000/dashboard&amp;#34;| gr-b
end
end&lt;/pre>
&lt;p>Find the &lt;strong>Protocol Buffer Definitions&lt;/strong> in the &lt;code>/pb/&lt;/code> directory.&lt;/p>
&lt;h1 id="opentelemetry-历史">OpenTelemetry 历史&lt;a class="td-heading-self-link" href="#opentelemetry-%e5%8e%86%e5%8f%b2" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>OTel 于 2019 年 5 月，由 &lt;a href="https://opentracing.io/">OpenTracing&lt;/a> 与 OpenCensus 合并而成(&lt;a href="https://opensource.googleblog.com/2019/05/opentelemetry-merger-of-opencensus-and.html">Google Open Source&lt;/a>)，&lt;/p>
&lt;h1 id="opentelemetry-protocol">OpenTelemetry Protocol&lt;a class="td-heading-self-link" href="#opentelemetry-protocol" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/open-telemetry/opentelemetry-proto">GitHub 项目，open-telemetry/opentelemetry-proto&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>OpenTelemetry Protocol(简称 OTLP)&lt;/strong>&lt;/p></description></item><item><title>Docs: 存储的能力</title><link>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E5%AD%98%E5%82%A8/%E5%AD%98%E5%82%A8%E7%9A%84%E8%83%BD%E5%8A%9B/%E5%AD%98%E5%82%A8%E7%9A%84%E8%83%BD%E5%8A%9B/</link><pubDate>Tue, 26 Sep 2023 08:26:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E5%AD%98%E5%82%A8/%E5%AD%98%E5%82%A8%E7%9A%84%E8%83%BD%E5%8A%9B/%E5%AD%98%E5%82%A8%E7%9A%84%E8%83%BD%E5%8A%9B/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.zhihu.com/question/21536660">知乎，块存储、文件存储、对象存储这三者的本质差别是什么？&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>基于不同的 &lt;a href="https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E5%AD%98%E5%82%A8/%E5%AD%98%E5%82%A8%E7%9A%84%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E6%9E%B6%E6%9E%84/%E5%AD%98%E5%82%A8%E7%9A%84%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E6%9E%B6%E6%9E%84.md">存储的基础设施架构&lt;/a>，我们可以实现形形色色的&lt;strong>存储能力&lt;/strong>，每种存储能力，可以存放的数据内容各不相同。&lt;/p>
&lt;p>现阶段，可以提供的存储能力分为三种：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Block Storage(块存储)&lt;/strong>&lt;/li>
&lt;li>&lt;strong>File Storage(文件存储)&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Object Storage(对象存储)&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h2 id="块存储文件存储对象存储这三者的本质差别是什么">块存储、文件存储、对象存储这三者的本质差别是什么？&lt;a class="td-heading-self-link" href="#%e5%9d%97%e5%ad%98%e5%82%a8%e6%96%87%e4%bb%b6%e5%ad%98%e5%82%a8%e5%af%b9%e8%b1%a1%e5%ad%98%e5%82%a8%e8%bf%99%e4%b8%89%e8%80%85%e7%9a%84%e6%9c%ac%e8%b4%a8%e5%b7%ae%e5%88%ab%e6%98%af%e4%bb%80%e4%b9%88" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>它们就是不同的接口。块存储就是最接近存储介质的接口，也就是包装最薄的，或者说没有包装。文件和对象存储都是对块存储的包装。可以简单认为对象存储就是不分层次的文件存储。或者把文件看作对象存储的进一步包装。&lt;/p>
&lt;h1 id="block-storage块存储">Block Storage(块存储)&lt;a class="td-heading-self-link" href="#block-storage%e5%9d%97%e5%ad%98%e5%82%a8" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Block_(data_storage)">Wiki, Block&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>说白了就是硬盘&lt;/p>
&lt;h1 id="file-storage文件存储">File Storage(文件存储)&lt;a class="td-heading-self-link" href="#file-storage%e6%96%87%e4%bb%b6%e5%ad%98%e5%82%a8" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>说白了就是 &lt;a href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Filesystem/Filesystem.md">Filesystem&lt;/a>(文件系统)&lt;/p>
&lt;h1 id="object-based-storage对象存储">Object Based Storage(对象存储)&lt;a class="td-heading-self-link" href="#object-based-storage%e5%af%b9%e8%b1%a1%e5%ad%98%e5%82%a8" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Object_storage">Wiki, Object storage&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>说白了就是任何东西，对象可以是任何东西。&lt;/p>
&lt;p>&lt;strong>Object Based Storage(基于对象的存储，简称 OBS)&lt;/strong> 是一种为计算机存储数据的能力。通常由分布式存储架构来实现。&lt;/p>
&lt;p>与 File Storage 类似，只不过没有目录的层级结构，对象的获取，基于 RESTful 风格的 API 接口。&lt;/p>
&lt;p>但是与文件存储不同，对象存储中的数据不支持在存储设备上直接修改，必须要先 GET 到要修改的对象，在本地修改完成后，再 PUT 或 POST 回去。所以，并不适合需要频繁读写的数据(例如关系型数据库的数据)。&lt;/p>
&lt;p>而平时我们看到那些所谓的能在线修改的，其实是有一个客户端，我们在客户端操作，操作的时候，客户端是帮我们把对象 GET 出来的。&lt;/p>
&lt;h1 id="简单理解">简单理解&lt;a class="td-heading-self-link" href="#%e7%ae%80%e5%8d%95%e7%90%86%e8%a7%a3" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;strong>1. 块存储&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>“虚拟座谈会”中王旭提到：块存储是给虚拟机用的。&lt;/p>
&lt;/blockquote>
&lt;p>这句话深刻地表达了什么是块存储。。不知道有没有被大家忽略过去。&lt;/p>
&lt;p>对块存储最简单的理解方法就是：看产品。&lt;/p>
&lt;p>例子：&lt;/p>
&lt;ul>
&lt;li>Amazon 的 EC2 中就有块存储，叫做 EBS (Elastic Block Storage)。&lt;/li>
&lt;/ul>
&lt;p>什么鬼？&lt;/p>
&lt;p>其实就是虚拟机挂载的一块虚拟磁盘。。。&lt;/p>
&lt;p>推而广之，你会发现，自己平时用的 VMware、VirtualBox 都可以创建虚拟磁盘。能够造出这个东西，且构造的东西能被当作磁盘去用的，就叫做块存储。&lt;/p>
&lt;p>再来一个例子：&lt;/p>
&lt;ul>
&lt;li>RedHat 的 Ceph 中块存储产品的命令行接口是： create image, list image, delete image&lt;/li>
&lt;li>阿里云、腾讯云同样有类似 EBS 的功能&lt;/li>
&lt;/ul>
&lt;p>所以楼上的各位中 chen yue, 大华云存储对块存储的理解都是对的。&lt;/p>
&lt;p>&lt;strong>2. 对象存储和文件存储&lt;/strong>&lt;/p>
&lt;p>之所以将这两个放在一起说，是因为这两个和楼上杨志丰的解读类似，主要是 API 不同。。。&lt;/p>
&lt;p>对象存储：&lt;/p>
&lt;ul>
&lt;li>大多数对象存储的实现本质上是&lt;strong>键值对&lt;/strong>存储系统&lt;/li>
&lt;li>采用扁平化的管理方式(根据键，找到值)&lt;/li>
&lt;li>值可以是任何东西，可以是小文件(小二进制片段)，可以是大文件&lt;/li>
&lt;li>对象存储一般不支持追加写和更新，面向的是一次写入，多次读取的需求场景。&lt;/li>
&lt;li>多采用 RESTFul API&lt;/li>
&lt;/ul>
&lt;p>文件存储&lt;/p>
&lt;ul>
&lt;li>文件存储不考虑底层到底怎么实现的（很多其实就是对象存储上套一层目录管理层）&lt;/li>
&lt;li>采用目录结构管理数据&lt;/li>
&lt;li>一般要尽可能兼容 POSIX 文件系统 API&lt;/li>
&lt;/ul>
&lt;p>对于产品，仍然可以看 AWS 的相关内容。在对象存储方面，阿里云和腾讯云就有点扰乱概念了，里面频繁出现“管理海量文件”。。。那你到底是对象存储还是文件存储(虽然前面说了文件存储可以基于对象存储来做)&lt;/p>
&lt;p>另外还可以看 Ceph，这孩子将自己的产品封装成了块存储、对象存储、文件存储三种。&lt;/p>
&lt;h1 id="知乎回答">知乎回答&lt;a class="td-heading-self-link" href="#%e7%9f%a5%e4%b9%8e%e5%9b%9e%e7%ad%94" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="回答一">回答一&lt;a class="td-heading-self-link" href="#%e5%9b%9e%e7%ad%94%e4%b8%80" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>这三者的本质差别是使用数据的“用户”不同：块存储的用户是可以读写块设备的软件系统，例如传统的文件系统、数据库；文件存储的用户是自然人；对象存储的用户则是其它计算机软件。&lt;/p>
&lt;p>首先要说明一下的是，这三个概念都是分布式存储中的概念，由不同的网络存储协议实现。不过“网络”和“存储”的结合本身会对解释这三个概念的本质差异带来不便，下面的解释中我会先解释存储本身，之后再结合网络来说明。&lt;/p>
&lt;h3 id="块存储">块存储&lt;a class="td-heading-self-link" href="#%e5%9d%97%e5%ad%98%e5%82%a8" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>传统的文件系统，是直接访问存储数据的硬件介质的。介质不关心也无法去关心这些数据的组织方式以及结构，因此用的是最简单粗暴的组织方式：所有数据按照固定的大小分块，每一块赋予一个用于寻址的编号。以大家比较熟悉的机械硬盘为例，一块就是一个扇区，老式硬盘是 512 字节大小，新硬盘是 4K 字节大小。老式硬盘用柱面-磁头-扇区号（CHS，Cylinder-Head-Sector）组成的编号进行寻址，现代硬盘用一个逻辑块编号寻址（LBA，Logical Block Addressing）。所以，硬盘往往又叫块设备（Block Device）,当然，除了硬盘还有其它块设备，例如不同规格的软盘，各种规格的光盘，磁带等。&lt;/p>
&lt;p>至于哪些块组成一个文件，哪些块记录的是目录/子目录信息，这是文件系统的事情。不同的文件系统有不同的组织结构，这个就不展开了。为了方便管理，硬盘这样的块设备通常可以划分为多个逻辑块设备，也就是我们熟悉的硬盘分区（Partition）。反过来，单个介质的容量、性能有限，可以通过某些技术手段把多个物理块设备组合成一个逻辑块设备，例如各种级别的 RAID，JBOD，某些操作系统的卷管理系统（Volume Manager）如 Windows 的动态磁盘、Linux 的 LVM 等。&lt;/p>
&lt;p>补充一下的是，块设备的使用对象除了传统的文件系统以及一些专用的管理工具软件如备份软件、分区软件外，还有一些支持直接读写块设备的软件如数据库等，但一般用户很少这样使用。&lt;/p>
&lt;p>在网络存储中，服务器把本地的一个逻辑块设备——底层可能是一个物理块设备的一部分，也可能是多个物理块设备的组合，又或者多个物理块设备的组合中的一部分，甚至是一个本地文件系统上的一个文件——通过某种协议模拟成一个块设备，远程的客户端（可以是一台物理主机，也可以是虚拟机，某个回答所说的块设备是给虚拟机用是错误的）使用相同的协议把这个逻辑块设备作为一个本地存储介质来使用，划分分区，格式化自己的文件系统等等。这就是块存储，比较常见的块存储协议是 iSCSI。&lt;/p>
&lt;h3 id="文件存储">文件存储&lt;a class="td-heading-self-link" href="#%e6%96%87%e4%bb%b6%e5%ad%98%e5%82%a8" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>文件存储的用户是自然人，最容易理解。计算机中所有的数据都是 0 和 1，存储在硬件介质上的一连串的 01 组合对我们来说完全无法去分辨以及管理。因此我们用“文件”这个概念对这些数据进行组织，所有用于同一用途的数据，按照不同应用程序要求的结构方式组成不同类型的文件（通常用不同的后缀来指代不同的类型），然后我们给每一个文件起一个方便理解记忆的名字。而当文件很多的时候，我们按照某种划分方式给这些文件分组，每一组文件放在同一个目录（或者叫文件夹）里面，当然我们也需要给这些目录起一个容易理解和记忆的名字。而且目录下面除了文件还可以有下一级目录（称之为子目录或者子文件夹），所有的文件、目录形成一个树状结构。我们最常用的 Windows 系统中，打开资源管理器就可以看到以这种方式组织起来的无数个文件和目录。在 Linux 可以用 tree 命令列出以某个文件夹为根节点列出一棵树：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/oxzk92/1616133225674-7597bd4a-b175-48b3-90e4-3b60c1e4db7d.jpeg" alt="">&lt;/p>
&lt;p>为了方便查找，从根节点开始逐级目录往下，一直到文件本身，把这些目录、子目录、文件的名字用特殊的字符（例如 Windows/DOS 用“\”，类 Unix 系统用“/”）拼接起来，这样的一串字符称之为路径，例如 Linux 中的“/etc/systemd/system.conf”或者 Windows 中的“C:\Windows\System32\taskmgr.exe”。人类用路径作为唯一标识来访问具体的文件。而由作为自然人的程序员所编写的各种软件程序，绝大部分也使用这种方式来访问文件。&lt;/p>
&lt;p>把存储介质上的数据组织成目录-子目录-文件这种形式的数据结构，用于从这个结构中寻找、添加、修改、删除文件的程序，以及用于维护这个结构的程序，组成的系统有一个专用的名字：文件系统（File System）。文件系统有很多，常见的有 Windows 的 FAT/FAT32/NTFS，Linux 的 EXT2/EXT3/EXT4/XFS/BtrFS 等。而在网络存储中，底层数据并非存储在本地的存储介质，而是另外一台服务器上，不同的客户端都可以用类似文件系统的方式访问这台服务器上的文件，这样的系统叫网络文件系统（Network File System），常见的网络文件系统有 Windows 网络的 CIFS（也叫 SMB）、类 Unix 系统网络的 NFS 等。而文件存储除了网络文件系统外，FTP、HTTP 其实也算是文件存储的某种特殊实现，都是可以通过某个 url 来访问一个文件。&lt;/p>
&lt;h3 id="对象存储">对象存储&lt;a class="td-heading-self-link" href="#%e5%af%b9%e8%b1%a1%e5%ad%98%e5%82%a8" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>对象存储其实介于块存储和文件存储之间。文件存储的树状结构以及路径访问方式虽然方便人类理解、记忆和访问，但计算机需要把路径进行分解，然后逐级向下查找，最后才能查找到需要的文件，对于应用程序来说既没必要，也很浪费性能。&lt;/p>
&lt;p>而块存储是排它的，服务器上的某个逻辑块被一台客户端挂载后，其它客户端就无法访问上面的数据了。而且挂载了块存储的客户端上的一个程序要访问里面的数据，不算类似数据库直接访问裸设备这种方式外，通常也需要对其进行分区、安装文件系统后才能使用。除了在网络上传输的数据包效率更高以外，并不比使用文件存储好多少，客户端的文件系统依然需要对路径分解，然后逐级查找才能定位到某一个具体的文件。&lt;/p>
&lt;p>是否可以用不排它但又类似块设备访问的方式呢？理论上是可以的，但对块设备的访问方式虽然比文件存储快，其实也很麻烦——一个文件往往是由多个块组成，并且很可能是不连续的。例如要读取一个文件，可能需要发出这样的指令：&lt;/p>
&lt;ul>
&lt;li>读取从编号 A₁ 开始的 N₁ 个块；&lt;/li>
&lt;li>读取从编号 A₂ 开始的 N₂ 个块；&lt;/li>
&lt;li>读取从编号 A₃ 开始的 N₃ 个块；&lt;/li>
&lt;li>…………&lt;/li>
&lt;li>读取从编号 Ai 开始的 Ni 个块。&lt;/li>
&lt;/ul>
&lt;p>最后自行把这 i 个连续的块自行拼接成一个文件，这才完成了一个文件的读取操作。为了发出这些指令，访问文件的软件系统需要记录下这个文件分成多少个部分，每个部分的起始块编号是多少，有多少块，顺序如何。不单是读取操作，删除、写入、修改操作也是如此，非常麻烦复杂。而且往往一个文件可能需要被多个系统访问使用，这就更麻烦了。&lt;/p>
&lt;p>为了解决这中麻烦，使用一个统一的底层存储系统，管理这些文件和底层介质的组织结构，然后给每个文件一个唯一的标识，其它系统需要访问某个文件，直接提供文件的标识就可以了。存储系统可以用更高效的数据组织方式来管理这些标识以及其对应的存储介质上的块。&lt;/p>
&lt;p>当然，对于不同的软件系统来说，一次访问需要获取的不一定是单个我们传统意义上的文件，根据不同的需要可能只是一个/组值，某个文件的一部分，也可能是多个文件的组合，甚至是某个块设备，统称为对象。这就是对象存储。&lt;/p>
&lt;h2 id="回答二">回答二&lt;a class="td-heading-self-link" href="#%e5%9b%9e%e7%ad%94%e4%ba%8c" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>这三种存储，分别对应了不同的访问协议，这也就决定了他们的本质差别。&lt;/p>
&lt;p>先说一下文件存储，主要操作对象是文件和文件夹。以 NFS 为例，文件相关的接口包括：LOOKUP/ACCESS/READ/WRITE/CREATE/REMOVE/RENAME 等等，文件夹相关的接口包括：MKDIR/RMDIR/READDIR 等等。同时也会有 FSSTAT/FSINFO 等接口用于提供文件系统级别的信息。POSIX，SAMBA 等也是文件存储协议。协议更注重接口的灵活，以及访问权限控制。&lt;/p>
&lt;p>块存储，主要操作对象是磁盘。以 SCSI 为例，主要接口有 Read/Write/Read Capacity/Inquiry 等等。FC，iSCSI，也是块存储协议。和文件存储相比，没有文件和目录树的概念，一般协议也不会定义磁盘的创建和删除操作。协议更注重传输控制。&lt;/p>
&lt;p>对象存储，主要操作对象是对象（Object）。以 S3 为例，主要接口有 PUT/GET/DELETE 等。和文件和对象存储相比，没有随机读写的接口。和文件存储相比，没有目录树的概念。协议更注重简洁。&lt;/p>
&lt;h2 id="回答三">回答三&lt;a class="td-heading-self-link" href="#%e5%9b%9e%e7%ad%94%e4%b8%89" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>看了目前赞最多的“繁星亮”君的回答，感觉解释的还是不甚清楚。&lt;/p>
&lt;p>大家可以看看这个解释，简单明了：&lt;/p>
&lt;p>虚拟座谈会：有关分布式存储的三个基本问题&lt;/p>
&lt;p>引用下“豪迈”的观点：&lt;/p>
&lt;p>分布式存储的应用场景相对于其存储接口，现在流行分为三种:&lt;/p>
&lt;ol>
&lt;li>对象存储: 也就是通常意义的键值存储，其接口就是简单的 GET、PUT、DEL 和其他扩展，如七牛、又拍、Swift、S3&lt;/li>
&lt;li>块存储: 这种接口通常以 QEMU Driver 或者 Kernel Module 的方式存在，这种接口需要实现 Linux 的 Block Device 的接口或者 QEMU 提供的 Block Driver 接口，如 Sheepdog，AWS 的 EBS，青云的云硬盘和阿里云的盘古系统，还有 Ceph 的 RBD（RBD 是 Ceph 面向块存储的接口）&lt;/li>
&lt;li>文件存储: 通常意义是支持 POSIX 接口，它跟传统的文件系统如 Ext4 是一个类型的，但区别在于分布式存储提供了并行化的能力，如 Ceph 的 CephFS(CephFS 是 Ceph 面向文件存储的接口)，但是有时候又会把 GFS，HDFS 这种非 POSIX 接口的类文件存储接口归入此类。&lt;/li>
&lt;/ol></description></item><item><title>Docs: 对象存储</title><link>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E5%AD%98%E5%82%A8/%E5%AD%98%E5%82%A8%E7%9A%84%E8%83%BD%E5%8A%9B/%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8/%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8/</link><pubDate>Tue, 26 Sep 2023 08:25:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E5%AD%98%E5%82%A8/%E5%AD%98%E5%82%A8%E7%9A%84%E8%83%BD%E5%8A%9B/%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8/%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="simple-storage-service简单存储服务">Simple Storage Service(简单存储服务)&lt;a class="td-heading-self-link" href="#simple-storage-service%e7%ae%80%e5%8d%95%e5%ad%98%e5%82%a8%e6%9c%8d%e5%8a%a1" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.aws.amazon.com/zh_cn/AmazonS3/latest/dev/Welcome.html">AWS 官方文档&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Simple Storage Service(简单存储服务，简称 S3)&lt;/strong> 最早是由 AWS(亚马逊) 提出的一种对象存储服务。现在，S3 几乎称为对象存储的事实标准，各厂家基本上都会兼容 S3。&lt;/p></description></item><item><title>Docs: OpenSSL</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Crypto-mgmt/OpenSSL/OpenSSL/</link><pubDate>Tue, 12 Sep 2023 08:11:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Crypto-mgmt/OpenSSL/OpenSSL/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.openssl.org/">官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/openssl/openssl">GitHub 项目，openssl/openssl&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>OpenSSL 是一个商业级且功能齐全的工具包，用于通用密码学和安全通信&lt;/p>
&lt;p>OpenSSL 可以实现 &lt;strong>TLS(传输层安全性)&lt;/strong> 和 &lt;strong>SSL(安全套接字层)&lt;/strong> 协议的预期功能，类似于 OpenSSH 是 ssh 协议的实现&lt;/p>
&lt;p>OpenSSL 主要包含两组东西：&lt;/p>
&lt;ul>
&lt;li>openssl # 多用途的命令行工具&lt;/li>
&lt;li>libraries # OpenSSL 库
&lt;ul>
&lt;li>libcrypto # 加密解密库&lt;/li>
&lt;li>libssl # ssl 库，实现了 ssl 及 tls 的功能&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="openssl-关联文件">OpenSSL 关联文件&lt;a class="td-heading-self-link" href="#openssl-%e5%85%b3%e8%81%94%e6%96%87%e4%bb%b6" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;strong>/etc/ssl/openssl.conf&lt;/strong> # OpenSSL 的“命令行工具”和 “库”默认使用的配置文件。&lt;/p>
&lt;p>如果想要使用 CA 功能，需要进行如下配置&lt;/p>
&lt;ul>
&lt;li>touch /etc/pki/CA/index.txt&lt;/li>
&lt;li>echo 01 &amp;gt; /etc/pki/CA/serial&lt;/li>
&lt;/ul>
&lt;h1 id="openssl-命令行工具">openssl 命令行工具&lt;a class="td-heading-self-link" href="#openssl-%e5%91%bd%e4%bb%a4%e8%a1%8c%e5%b7%a5%e5%85%b7" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.openssl.org/docs/manmaster/man1/openssl.html">Manual(手册)，openssl&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>openssl 程序提供了丰富的子命令，以实现 TLS/SSL 网络协议以及它们所需要的相关加密标准。&lt;/p>
&lt;h2 id="syntax语法">Syntax(语法)&lt;a class="td-heading-self-link" href="#syntax%e8%af%ad%e6%b3%95" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>openssl Command [ OPTIONS ] [ ARGUMENTS ]&lt;/strong>&lt;/p>
&lt;h3 id="command">Command&lt;a class="td-heading-self-link" href="#command" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Standard commands # 标准命令
&lt;ul>
&lt;li>asn1parse，ca，ciphers，cms，crl，crl2pkcs7，dgst，dh，dhparam，dsa，dsaparam，ec，ecparam，enc，engine，errstr，gendh，gendsa，genpkey，genrsa，nseq，ocsp，passwd，pkcs12，pkcs7，pkcs8，pkey，pkeyparam，pkeyutl，prime，rand，req，rsa，rsautl，s_client，s_server，s_time，sess_id，smime，speed，spkac，ts，verify，version，x509&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Message Digest commands # 消息摘要命令，消息摘要算法的实现(用于单向加密)。使用 dgst 命令
&lt;ul>
&lt;li>md2，md4，md5，rmd160，sha，sha1&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Cipher commands # 密码命令（其中都是各种加密算法，用于对称加密）。使用 enc 命令
&lt;ul>
&lt;li>aes-128-cbc，aes-128-ecb，aes-192-cbc，aes-192-ecb，aes-256-cbc，aes-256-ecb，base64，bf，bf-cbc，bf-cfb，bf-ecb，bf-ofb，camellia-128-cbc，camellia-128-ecb，camellia-192-cbc，camellia-192-ecb，camellia-256-cbc，camellia-256-ecb，cast，cast-cbc，cast5-cbc，cast5-cfb，cast5-ecb，cast5-ofb，des，des-cbc，des-cfb，des-ecb，des-ede，des-ede-cbc，des-ede-cfb，des-ede-ofb，des-ede3，des-ede3-cbc，des-ede3-cfb，des-ede3-ofb，des-ofb，des3，desx，idea，idea-cbc，idea-cfb，idea-ecb，idea-ofb，rc2，rc2-40-cbc，rc2-64-cbc，rc2-cbc，rc2-cfb，rc2-ecb，rc2-ofb，rc4，rc4-40，rc5，rc5-cbc，rc5-cfb，rc5-ecb，rc5-ofb，seed，seed-cbc，seed-cfb，seed-ecb，seed-ofb，zlib&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="global-options">Global OPTIONS&lt;a class="td-heading-self-link" href="#global-options" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>-in FILE # 指明使用的文件&lt;/li>
&lt;li>-out FILE # 指明输出的文件&lt;/li>
&lt;/ul>
&lt;h2 id="standard-commands标准命令">Standard commands(标准命令)&lt;a class="td-heading-self-link" href="#standard-commands%e6%a0%87%e5%87%86%e5%91%bd%e4%bb%a4" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Crypto%20mgmt/OpenSSL/Standard%20commands.md">Standard commands&lt;/a>&lt;/p>
&lt;h2 id="message-digest-commands消息摘要命令">Message Digest commands(消息摘要命令)&lt;a class="td-heading-self-link" href="#message-digest-commands%e6%b6%88%e6%81%af%e6%91%98%e8%a6%81%e5%91%bd%e4%bb%a4" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>消息摘要算法的实现(用于单向加密)。使用 dgst 命令&lt;/p>
&lt;h2 id="cipher-commands密码命令">Cipher commands(密码命令)&lt;a class="td-heading-self-link" href="#cipher-commands%e5%af%86%e7%a0%81%e5%91%bd%e4%bb%a4" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>其中都是各种加密算法，用于对称加密。使用 enc 命令&lt;/p>
&lt;h3 id="openssl-enc---对称密钥程序用于创建管理对称密钥">openssl enc - 对称密钥程序，用于创建管理对称密钥&lt;a class="td-heading-self-link" href="#openssl-enc---%e5%af%b9%e7%a7%b0%e5%af%86%e9%92%a5%e7%a8%8b%e5%ba%8f%e7%94%a8%e4%ba%8e%e5%88%9b%e5%bb%ba%e7%ae%a1%e7%90%86%e5%af%b9%e7%a7%b0%e5%af%86%e9%92%a5" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>OPTIONS&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-e&lt;/strong> # 加密文件&lt;/li>
&lt;li>&lt;strong>-d&lt;/strong> # 解密文件&lt;/li>
&lt;li>&lt;strong>-des3&lt;/strong> # 使用 des3 算法进行加密或解密&lt;/li>
&lt;li>&lt;strong>-a&lt;/strong> # 基于文本进行编码&lt;/li>
&lt;li>&lt;strong>-salt&lt;/strong> # 加入一些盐&lt;/li>
&lt;/ul>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>openssl enc -e -des3 -a -salt -in fstab -out fstab.ciphertext # 加密 fstab 文件为 fstab.ciphertext，算法为 des3，基于文本进行编码，加入一些 salt&lt;/li>
&lt;li>openssl enc -d -des3 -a -salt -in fstab.ciphertext -out fstab # 解密 fstab.ciphertext 为 fstab 文件&lt;/li>
&lt;/ul>
&lt;h1 id="应用实例">应用实例&lt;a class="td-heading-self-link" href="#%e5%ba%94%e7%94%a8%e5%ae%9e%e4%be%8b" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="创建自签-ca-证书">创建自签 ca 证书&lt;a class="td-heading-self-link" href="#%e5%88%9b%e5%bb%ba%e8%87%aa%e7%ad%be-ca-%e8%af%81%e4%b9%a6" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>(umask 077; openssl genrsa -out ca.key 2048)&lt;/li>
&lt;li>openssl req -new -x509 -key ca.key -days 3650 -out ca.crt&lt;/li>
&lt;/ul>
&lt;h2 id="在-kubernetes-中生成个人证书">在 kubernetes 中生成个人证书&lt;a class="td-heading-self-link" href="#%e5%9c%a8-kubernetes-%e4%b8%ad%e7%94%9f%e6%88%90%e4%b8%aa%e4%ba%ba%e8%af%81%e4%b9%a6" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>在当前目录下生成一个 2048 位的名为 lch.key 的私钥（括号的作用是创建子 shell 执行命令，这样 umask 命令对当前 shell 没影响）
&lt;ul>
&lt;li>(umask 077;openssl genrsa -out lch.key 2048)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>使用 lck.key 进行证书申请
&lt;ul>
&lt;li>openssl req -new -key lch.key -out lch.csr -subj &amp;ldquo;/CN=lch&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>使用 ca.key 来给 lch.crt 颁发证书，以生成 lch.crt 文件
&lt;ul>
&lt;li>openssl x509 -req -in lch.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out lch.crt -days 365&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>查看 ca.crt 证书的信息
&lt;ul>
&lt;li>openssl x509 -in lch.crt -text -noout&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>openssl x509 部分命令&lt;/p>
&lt;p>打印出证书的内容：&lt;/p>
&lt;p>openssl x509 -in cert.pem -noout -text&lt;/p>
&lt;p>打印出证书的系列号&lt;/p>
&lt;p>openssl x509 -in cert.pem -noout -serial&lt;/p>
&lt;p>打印出证书的拥有者名字&lt;/p>
&lt;p>openssl x509 -in cert.pem -noout -subject&lt;/p>
&lt;p>以 RFC2253 规定的格式打印出证书的拥有者名字&lt;/p>
&lt;p>openssl x509 -in cert.pem -noout -subject -nameopt RFC2253&lt;/p>
&lt;p>在支持 UTF8 的终端一行过打印出证书的拥有者名字&lt;/p>
&lt;p>openssl x509 -in cert.pem -noout -subject -nameopt oneline -nameopt -escmsb&lt;/p>
&lt;p>打印出证书的 MD5 特征参数&lt;/p>
&lt;p>openssl x509 -in cert.pem -noout -fingerprint&lt;/p>
&lt;p>打印出证书的 SHA 特征参数&lt;/p>
&lt;p>openssl x509 -sha1 -in cert.pem -noout -fingerprint&lt;/p>
&lt;p>把 PEM 格式的证书转化成 DER 格式&lt;/p>
&lt;p>openssl x509 -in cert.pem -inform PEM -out cert.der -outform DER&lt;/p>
&lt;p>把一个证书转化成 CSR&lt;/p>
&lt;p>openssl x509 -x509toreq -in cert.pem -out req.pem -signkey key.pem&lt;/p>
&lt;p>给一个 CSR 进行处理，颁发字签名证书，增加 CA 扩展项&lt;/p>
&lt;p>openssl x509 -req -in careq.pem -extfile openssl.cnf -extensions v3_ca -signkey key.pem -out cacert.pem&lt;/p>
&lt;p>给一个 CSR 签名，增加用户证书扩展项&lt;/p>
&lt;p>openssl x509 -req -in req.pem -extfile openssl.cnf -extensions v3_usr -CA cacert.pem -CAkey key.pem -CAcreateserial&lt;/p>
&lt;p>查看 csr 文件细节：&lt;/p>
&lt;p>openssl req -in my.csr -noout -text&lt;/p></description></item><item><title>Docs: Cilium</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%BD%91%E7%BB%9C/CNI/Cilium/Cilium/</link><pubDate>Sun, 10 Sep 2023 10:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%BD%91%E7%BB%9C/CNI/Cilium/Cilium/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/cilium/cilium">GitHub 项目，cilium/cilium&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cilium.io/">官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.cilium.io/en/latest/">官方文档&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;a href="https://docs.google.com/presentation/d/1cZJ-pcwB9WG88wzhDm2jxQY4Sh8adYg0-N3qWQ8593I/edit#slide=id.g7608b8c2de_0_0">https://docs.google.com/presentation/d/1cZJ-pcwB9WG88wzhDm2jxQY4Sh8adYg0-N3qWQ8593I/edit#slide=id.g7608b8c2de_0_0&lt;/a>
&lt;a href="https://www.youtube.com/watch?v=bIRwSIwNHC0">https://www.youtube.com/watch?v=bIRwSIwNHC0&lt;/a>
&lt;a href="http://arthurchiao.art/blog/ebpf-and-k8s-zh/">http://arthurchiao.art/blog/ebpf-and-k8s-zh/&lt;/a>&lt;/p>
&lt;h1 id="常见问题">常见问题&lt;a class="td-heading-self-link" href="#%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>如果在设备 A 添加了到 PodIP 段的静态路由，从集群外部直接访问 pod ip 是不通的。。。。。icmp 行。。。其他不行。。好像在 datapath 处理的时候，给略过了。。。。&lt;/p></description></item><item><title>Docs: PKM</title><link>https://desistdaydream.github.io/docs/%E5%AD%A6%E4%B9%A0/PKM/PKM/</link><pubDate>Tue, 28 Feb 2023 20:27:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/%E5%AD%A6%E4%B9%A0/PKM/PKM/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Personal_knowledge_management">Wiki, Personal knowledge management&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Personal knowledge management(个人知识管理，简称 PKM)&lt;/strong> 是一个收集信息的过程&lt;/p>
&lt;h1 id="个人知识记录规范">个人知识记录规范&lt;a class="td-heading-self-link" href="#%e4%b8%aa%e4%ba%ba%e7%9f%a5%e8%af%86%e8%ae%b0%e5%bd%95%e8%a7%84%e8%8c%83" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="配置文件与命令行参数的记录">配置文件与命令行参数的记录&lt;a class="td-heading-self-link" href="#%e9%85%8d%e7%bd%ae%e6%96%87%e4%bb%b6%e4%b8%8e%e5%91%bd%e4%bb%a4%e8%a1%8c%e5%8f%82%e6%95%b0%e7%9a%84%e8%ae%b0%e5%bd%95" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>各种类型的配置文件（包括 INI、JSON、等等）、命令行参数是类似 Key/Value 的结构。在我的笔记中，记录格式一般都是这样的：&lt;/p>
&lt;p>&lt;code>键的名称(值的类型)&lt;/code>&lt;/p>
&lt;p>&lt;code>--命令行参数名称(参数值类型)&lt;/code>&lt;/p>
&lt;p>对于配置文件来说，有的值的类型比较复杂（比如是一个 OBJECT 类型），可以再创建一个自定义的名称以在单独的章节下记录。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>node1&lt;/strong>(STRING)&lt;/li>
&lt;li>&lt;strong>node2&lt;/strong>(&lt;a href="#sub_node1">sub_node1&lt;/a>)&lt;/li>
&lt;li>&lt;strong>node3&lt;/strong>([]&lt;a href="#configs">configs&lt;/a>)&lt;/li>
&lt;li>&lt;strong>node4&lt;/strong>(OBJECT)&lt;/li>
&lt;li>&lt;strong>node5&lt;/strong>(map[STRING]STRING)&lt;/li>
&lt;li>&lt;strong>node6&lt;/strong>(map[STRING]&lt;a href="#sub_node2">sub_node2&lt;/a>)&lt;/li>
&lt;/ul>
&lt;p>笔记中的配置内容通常符合如下我自己定义的规范：&lt;/p>
&lt;ul>
&lt;li>加粗的是 Key&lt;/li>
&lt;li>括号中是 Value 的类型，Value 一般是非 Scalar 类型的节点。
&lt;ul>
&lt;li>若 Value 的类型是 Object，那么一般类型名称是自定义的。
&lt;ul>
&lt;li>由于 Object 类型的节点中，Value 也可以是一个节点，那么 &lt;strong>Value 就有可能是由一个或多个内容&lt;/strong>组成，为了可以方便得复用这些内容，所以给&lt;strong>它们起了一个名字&lt;/strong>。这就&lt;strong>好像编程中的使用函数&lt;/strong>一样。&lt;/li>
&lt;li>若 OBJECT 类型的字段下的字段非常多，我会在单独的标题中记录，&lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/API%20Resource%20%E4%B8%8E%20Object/API%20%E5%8F%82%E8%80%83/%E5%B7%A5%E4%BD%9C%E8%B4%9F%E8%BD%BD%E8%B5%84%E6%BA%90/Pod%20Manifest.md">Pod Manifest&lt;/a> 是典型的例子。不但在单独的标题记录，而且还为这些字段进行了分组。在我们理解时，只有带有 &lt;code>(XXX)&lt;/code> 这种写法的，才是 YAML 中真正的字段，而标题，通常不作为真正的字段，只是作为该字段的一个指示物，用以记录该字段下还有哪些字段。&lt;/li>
&lt;li>若 Object 类型的字段比较简单，没有复杂的子字段，那么笔记中就直接用 &lt;code>OBJCET&lt;/code> 这几个字符表示。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>若 Value 的类型是 STRING、INT、etc. 简单类型，但是其含义很复杂，也会将该字段值的类型写作连接，在独立章节记录。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>这种规范为了文档的整洁性，让相同层级的字段在一起，可以一眼看到同级内容，让 Value 与 Key 分开，将 Value 所包含的具体内容放在单独链接（i.e. 单独章节）中。&lt;/p>
&lt;p>不管是 老式的 &lt;a href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E6%97%A0%E6%B3%95%E5%88%86%E7%B1%BB%E7%9A%84%E8%AF%AD%E8%A8%80/INI.md">INI&lt;/a>、还是新一些的 &lt;a href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E6%97%A0%E6%B3%95%E5%88%86%E7%B1%BB%E7%9A%84%E8%AF%AD%E8%A8%80/JSON.md">JSON&lt;/a>、&lt;a href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E6%97%A0%E6%B3%95%E5%88%86%E7%B1%BB%E7%9A%84%E8%AF%AD%E8%A8%80/YAML.md">YAML&lt;/a>、&lt;a href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E6%97%A0%E6%B3%95%E5%88%86%E7%B1%BB%E7%9A%84%E8%AF%AD%E8%A8%80/TOML.md">TOML&lt;/a>、etc. 都可以使用这套理论来记录&lt;/p>
&lt;h1 id="知识管理工具">知识管理工具&lt;a class="td-heading-self-link" href="#%e7%9f%a5%e8%af%86%e7%ae%a1%e7%90%86%e5%b7%a5%e5%85%b7" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;a href="https://www.notion.so/">Notion&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/AppFlowy-IO/AppFlowy">AppFlowy&lt;/a> # 开源版 Notion&lt;/p>
&lt;ul>
&lt;li>现阶段(0.0.4)只是一个本地应用程序，无法通过浏览器使用&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://www.yuque.com/">语雀&lt;/a>&lt;/p>
&lt;ul>
&lt;li>如何看待语雀付费策略？ &lt;a href="https://www.zhihu.com/question/562238887">https://www.zhihu.com/question/562238887&lt;/a>&lt;/li>
&lt;li>文档导出: &lt;a href="https://github.com/yuque/yuque-exporter">https://github.com/yuque/yuque-exporter&lt;/a>
&lt;ul>
&lt;li>先执行 crawl 生成想要下载的文档源数据&lt;/li>
&lt;li>执行 build 根据已存在的源数据生成 markdown 文件
&lt;ul>
&lt;li>源码执行：
&lt;ul>
&lt;li>&lt;code>pnpm i&lt;/code>&lt;/li>
&lt;li>&lt;code>pnpm build&lt;/code>&lt;/li>
&lt;li>&lt;code>export YUQUE_TOKEN=&amp;quot;XXXX&amp;quot;&lt;/code>&lt;/li>
&lt;li>&lt;code>node ./dist/bin/cli.js crawl desistdaydream/ycpve3&lt;/code>&lt;/li>
&lt;li>&lt;code>node ./dist/bin/cli.js build&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>语雀文档导出: &lt;a href="https://github.com/yuque/yuque-exporter">https://github.com/yuque/yuque-exporter&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://www.feishu.cn/product/docs">飞书&lt;/a>&lt;/p>
&lt;ul>
&lt;li>飞书转 Markdown: &lt;a href="https://github.com/Wsine/feishu2md">https://github.com/Wsine/feishu2md&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://github.com/dendronhq/dendron">Dendron&lt;/a> # 开源的、本地优先的、基于 MarkDown 的笔记工具&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/HbM93O49aOgW6w_ZX9lzlA">公众号-Github 爱好者，专为开发人员构建的个人知识管理工具-Dendron&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://desistdaydream.github.io/docs/%E5%AD%A6%E4%B9%A0/PKM/Obsidian.md">Obsidian&lt;/a> # Markdown 渲染程序&lt;/p>
&lt;h1 id="社区">社区&lt;a class="td-heading-self-link" href="#%e7%a4%be%e5%8c%ba" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>PKMer&lt;/p>
&lt;ul>
&lt;li>是一个【知识管理】爱好组织，我们热衷于知识管理，喜欢讨论提升效率软件，以及那些让你觉得欣喜的技术。&lt;/li>
&lt;li>&lt;a href="https://pkmer.cn/">https://pkmer.cn/&lt;/a>&lt;/li>
&lt;li>包含 Markdown、Obsidian、Excaildraw、Zotero、TiddyWiki、etc. 相关专题&lt;/li>
&lt;/ul></description></item><item><title>Docs: PromQL</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/PromQL/PromQL/</link><pubDate>Thu, 20 Oct 2022 14:51:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/PromQL/PromQL/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://prometheus.io/docs/prometheus/latest/querying/basics/">官方文档，Prometheus-查询-基础&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Prometheus Query Language(Prometheus 查询语言，简称 PromQL)&lt;/strong> 是一种提供了查询功能的编程语言，用来实时选择和汇总 &lt;a href="https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E6%95%B0%E6%8D%AE/%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E6%95%B0%E6%8D%AE.md">时间序列数据&lt;/a>。通过 PromQL 可以对监控数据进行筛选、过滤、组合等等操作。使用 PromQL 编写的语句也可以称为 &lt;strong>Expression(表达式)&lt;/strong>，表达式的结果可以通过其他方式显示为图形。&lt;/p>
&lt;h2 id="promql-体验">PromQL 体验&lt;a class="td-heading-self-link" href="#promql-%e4%bd%93%e9%aa%8c" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>在 graph 页面，可以在红框位置输入表达式&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/lfubxg/1616069073146-722bd1dd-2647-4bf9-84ed-4c2cbf694785.png" alt="">&lt;/p>
&lt;p>点击红框内的对话框 并输入关键字，系统会自动弹出可用的 metrics name&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/lfubxg/1616069073181-bbf09f64-c80f-4e9f-9644-2916ce031358.jpeg" alt="">&lt;/p>
&lt;p>表达式直接使用 MetricsName，则展示此时此刻的以 node_cpu_seconds_total 为指标名的所有 TimeSeries(时间序列) 数据&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/lfubxg/1616069073159-7b2a2e59-5866-478c-a87e-a9c6e42a65d5.png" alt="">&lt;/p>
&lt;p>如果需要筛选则可以输入如下图实例的表达式：node_cpu_seconds_total{job=~&amp;ldquo;external.*&amp;rdquo;}&lt;/p>
&lt;p>筛选出来 job 名开头是 external 的 cpu 情况。允许使用正则表达式，=~表示的就是用过正则来匹配后面的值&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/lfubxg/1616069073186-857243c7-7acb-4a2a-9787-ecd8dabbf732.jpeg" alt="">&lt;/p>
&lt;p>Prometheus 通过 MetricsName(指标名称) 及其对应的一组 LabelSet(标签集) 定义唯一的一条时间序列。指标名称反映了监控样本的基本标识，而 label 则在这个基本特征上为采集到的数据提供了多种特征维度。用户可以基于这些特征维度过滤，聚合，统计从而产生新的计算后的一条时间序列。&lt;/p>
&lt;p>PromQL 是 Prometheus 内置的数据查询语言，其提供对时间序列数据丰富的查询，聚合以及逻辑运算能力的支持。并且被广泛应用在 Prometheus 的日常应用当中，包括对数据查询、可视化、告警处理当中。可以这么说，PromQL 是 Prometheus 所有应用场景的基础，理解和掌握 PromQL 是 Prometheus 入门的第一课。&lt;/p>
&lt;h1 id="promql-基本语法">PromQL 基本语法&lt;a class="td-heading-self-link" href="#promql-%e5%9f%ba%e6%9c%ac%e8%af%ad%e6%b3%95" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>PromQL 没有绝对通用的语法，在不同场景查询条件下，语法也不同。但是，语法必须要有语句，这种语句就称为 &lt;strong>Expression(表达式)&lt;/strong>，Expression 可以是简单的字符串，也可以是一个指标名称，甚至是一串基于指标的复杂语法。&lt;/p>
&lt;p>在 PromQL 中，任何 &lt;strong>Expression(表达式)&lt;/strong> 或者 &lt;strong>subExpression(子表达式)&lt;/strong> 都可以归为四种类型：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Instant Vector Selectors(即时向量选择器)&lt;/strong> # 包含每个时间序列的单个样本的一组时间序列，共享相同的时间戳。
&lt;ul>
&lt;li>&lt;strong>即时向量&lt;/strong> 在有的地方也被翻译为 &lt;strong>瞬时向量&lt;/strong>，都是同一个意思。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Range Vector Selectors(范围向量选择器)&lt;/strong> # 包含每个时间序列随时间变化的数据点的一组时间序列。&lt;/li>
&lt;li>&lt;strong>String(字符串)&lt;/strong> # 一个简单的字符串值(目前未被使用)&lt;/li>
&lt;li>&lt;strong>Scalar(标量)&lt;/strong> # 一个简单的数字浮点值&lt;/li>
&lt;/ul>
&lt;p>在这四种表达式中，我们还可以通过 &lt;strong>Operators(操作符)&lt;/strong> 和 &lt;strong>Functions(函数)&lt;/strong> 来对获取到的时间序列数据，进行加工。&lt;/p>
&lt;p>这四种类型，又可以进行统一分类&lt;/p>
&lt;ul>
&lt;li>Instant Vector Selectors 和 Range Vector Selectors 统称为 &lt;strong>TimeSeries Selectors(时间序列选择器)&lt;/strong>
&lt;ul>
&lt;li>这种表达式会根据 Metrics 来获取指定的时间序列。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>String 和 Scalar 统称为 &lt;a href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/Data%20type/Literal.md">&lt;strong>Literal(字面量)&lt;/strong>&lt;/a>
&lt;ul>
&lt;li>给定不同类型的 Literal，就返回对应类型的的值，Prom 里只支持 string 和 scalar 这两种类型&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="expression表达式">Expression(表达式)&lt;a class="td-heading-self-link" href="#expression%e8%a1%a8%e8%be%be%e5%bc%8f" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="instant-vector-selectors即时向量选择器">Instant Vector Selectors(即时向量选择器)&lt;a class="td-heading-self-link" href="#instant-vector-selectors%e5%8d%b3%e6%97%b6%e5%90%91%e9%87%8f%e9%80%89%e6%8b%a9%e5%99%a8" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>即时向量选择器就是获取通过 Metric 来获取当前最新时间戳上的值，这就是即时的含义(指的是当前最新的值)&lt;/p>
&lt;h3 id="根据-metricname-选择时间序列数据">根据 MetricName 选择时间序列数据&lt;a class="td-heading-self-link" href="#%e6%a0%b9%e6%8d%ae-metricname-%e9%80%89%e6%8b%a9%e6%97%b6%e9%97%b4%e5%ba%8f%e5%88%97%e6%95%b0%e6%8d%ae" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>当我们直接使用 Metrics 查询时，可以查询该 Metrics 下的所有时间序列数据。如：&lt;/p>
&lt;p>&lt;strong>promhttp_metric_handler_requests_total&lt;/strong> # 该表达式会返回指标名称为 promhttp_metric_handler_requests_total 的所有时间序列数据：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-promql" data-lang="promql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">promhttp_metric_handler_requests_total&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f57900">code&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;#34;&lt;/span>&lt;span style="color:#4e9a06">200&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;#34;,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#f57900">instance&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;#34;&lt;/span>&lt;span style="color:#4e9a06">172.38.40.250:9090&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;#34;,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#f57900">job&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;#34;&lt;/span>&lt;span style="color:#4e9a06">prometheus&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;#34;}&lt;/span>&lt;span style="color:#a40000">=&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">98&lt;/span>&lt;span style="color:#a40000">@&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1518096812.326&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000">promhttp_metric_handler_requests_total&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f57900">code&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;#34;&lt;/span>&lt;span style="color:#4e9a06">500&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;#34;,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#f57900">instance&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;#34;&lt;/span>&lt;span style="color:#4e9a06">172.38.40.250:9090&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;#34;,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#f57900">job&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;#34;&lt;/span>&lt;span style="color:#4e9a06">prometheus&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;#34;}&lt;/span>&lt;span style="color:#a40000">=&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#a40000">@&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1518096812.326&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000">promhttp_metric_handler_requests_total&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f57900">code&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;#34;&lt;/span>&lt;span style="color:#4e9a06">503&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;#34;,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#f57900">instance&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;#34;&lt;/span>&lt;span style="color:#4e9a06">172.38.40.250:9090&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;#34;,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#f57900">job&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;#34;&lt;/span>&lt;span style="color:#4e9a06">prometheus&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;#34;}&lt;/span>&lt;span style="color:#a40000">=&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#a40000">@&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1518096812.326&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="过滤选择到的时间序列数据">过滤选择到的时间序列数据&lt;a class="td-heading-self-link" href="#%e8%bf%87%e6%bb%a4%e9%80%89%e6%8b%a9%e5%88%b0%e7%9a%84%e6%97%b6%e9%97%b4%e5%ba%8f%e5%88%97%e6%95%b0%e6%8d%ae" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>如果想要过滤查询结果，可以根据 metric 中的 Label 来进行匹配，通过在 &lt;code>{ }&lt;/code> 符号中使用一组 Label 来进一步过滤这些时间序列数据，支持两种匹配模式：完全匹配和正则匹配。可以使用 4 种用于标签匹配的操作符&lt;/p>
&lt;ul>
&lt;li>&lt;code>=&lt;/code> # 完全匹配。通过使用 &lt;code>Label=&amp;quot;Value&amp;quot;&lt;/code> 可以选择那些标签值满足表达式定义的时间序列；&lt;/li>
&lt;li>&lt;code>!=&lt;/code> # 完全不匹配。反之使用 &lt;code>Label!=&amp;quot;Value&amp;quot;&lt;/code> 则可以根据标签值匹配排除时间序列；&lt;/li>
&lt;li>&lt;code>=~&lt;/code> # 正则匹配。使用 &lt;code>Label=~&amp;quot;RegEx&amp;quot;&lt;/code> 表示选择那些标签符合正则表达式定义的时间序列；&lt;/li>
&lt;li>&lt;code>!~&lt;/code> # 正则不匹配。反之使用 &lt;code>Label!~&amp;quot;RegEx&amp;quot;&lt;/code> 进行排除；
&lt;ul>
&lt;li>正则匹配中，多个表达式之间使用 &lt;code>|&lt;/code> 进行分隔：&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>例如，如果我们只需要查询所有 promhttp_metric_handler_requests_total 指标中满足标签 code 的值为 200 的时间序列，则可以使用如下表达式：&lt;/p>
&lt;p>promhttp_metric_handler_requests_total{code=&amp;ldquo;200&amp;rdquo;}&lt;/p>
&lt;p>反之使用 code!=&amp;ldquo;200&amp;rdquo; 则可以排除这些时间序列：&lt;/p>
&lt;p>promhttp_metric_handler_requests_total{code!=&amp;ldquo;200&amp;rdquo;}&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/lfubxg/1616069073195-72aba6c2-dabb-47d8-960b-b26cdf73e04a.png" alt="">&lt;/p>
&lt;p>如果想查询多个环节下的时间序列序列可以使用如下表达式：&lt;/p>
&lt;p>promhttp_metric_handler_requests_total{code=~&amp;ldquo;200|500&amp;rdquo;}&lt;/p>
&lt;h3 id="根据-label-选择时间序列数据">根据 Label 选择时间序列数据&lt;a class="td-heading-self-link" href="#%e6%a0%b9%e6%8d%ae-label-%e9%80%89%e6%8b%a9%e6%97%b6%e9%97%b4%e5%ba%8f%e5%88%97%e6%95%b0%e6%8d%ae" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>我们可以把 Label 当作表达式来获取所有具有这些 Label 的 Metrics 的时间序列数据&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/lfubxg/1616069073324-a1b41ace-fb9a-4f25-af64-b18536239692.png" alt="">&lt;/p>
&lt;p>在 Label 中还可以使用原始标签&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/lfubxg/1616069073217-6f22cfb6-c05c-44ef-b079-6d91f6e295a2.png" alt="">&lt;/p>
&lt;h2 id="range-vector-selectors范围向量选择器">&lt;strong>Range Vector Selectors(范围向量选择器)&lt;/strong>&lt;a class="td-heading-self-link" href="#range-vector-selectors%e8%8c%83%e5%9b%b4%e5%90%91%e9%87%8f%e9%80%89%e6%8b%a9%e5%99%a8" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>直接通过表达式 http_requests_total 查询时间序列时，返回值中只会包含该时间序列中的最新的一个样本值，这样的返回结果我们称之为瞬时向量。而相应的这样的表达式称之为&lt;strong>瞬时向量表达式&lt;/strong>。&lt;/p>
&lt;p>而如果我们想要获取过去一段时间范围内的样本数据时，我们则需要使用&lt;strong>范围向量表达式&lt;/strong>。范围向量表达式 和 瞬时向量表达式 基本一样，唯一的区别在于，范围向量表达式 中我们需要定义时间选择的范围，时间范围通过 &lt;code>[ ]&lt;/code> (这个符号表示：&lt;strong>时间范围选择器&lt;/strong>) 进行定义。&lt;/p>
&lt;p>例如：&lt;/p>
&lt;p>&lt;code>promhttp_metric_handler_requests_total{}[4m]&lt;/code> # 该表达式将会返回查询到的时间序列中最近 4 分钟的所有样本数据：数据如下&lt;/p>
&lt;blockquote>
&lt;p>[!Notes]&lt;/p>
&lt;ul>
&lt;li>这种查询方式只可以获取到值，并不能生成图表，因为图表中的一条向量是由很多个点组成的，每个点的位置由横轴是 time、纵轴是 value 互相确认得到的。但是这种查询结果会使每个点由多个 time 与多个 value 组成，一个点怎么可能由多个点合成一个呢？这在二维图标上是没法显示出来的。&lt;/li>
&lt;li>由于有多个值而且还没法展示，所以范围向量一般不会单独使用，而是与 irate()等函数一起使用。以便让多个值根据指定的函数规则聚合成唯一的一个值。&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-promql" data-lang="promql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">promhttp_metric_handler_requests_total&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f57900">code&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;#34;&lt;/span>&lt;span style="color:#4e9a06">200&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;#34;,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#f57900">instance&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;#34;&lt;/span>&lt;span style="color:#4e9a06">172.38.40.250:9090&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;#34;,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#f57900">job&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;#34;&lt;/span>&lt;span style="color:#4e9a06">prometheus&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;#34;}&lt;/span>&lt;span style="color:#a40000">=&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">223&lt;/span>&lt;span style="color:#a40000">@&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1518096812.326&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">224&lt;/span>&lt;span style="color:#a40000">@&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1518096817.326&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">225&lt;/span>&lt;span style="color:#a40000">@&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1518096822.326&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">226&lt;/span>&lt;span style="color:#a40000">@&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1518096827.326&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#a40000">]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000">promhttp_metric_handler_requests_total&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f57900">code&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;#34;&lt;/span>&lt;span style="color:#4e9a06">200&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;#34;,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#f57900">instance&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;#34;&lt;/span>&lt;span style="color:#4e9a06">172.38.40.250:9090&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;#34;,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#f57900">job&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;#34;&lt;/span>&lt;span style="color:#4e9a06">prometheus&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;#34;}&lt;/span>&lt;span style="color:#a40000">=&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#a40000">@&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1518096812.326&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#a40000">@&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1518096817.326&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#a40000">@&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1518096822.326&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#a40000">@&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1518096827.326&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#a40000">]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>除了使用 m 表示分钟以外，PromQL 的时间范围选择器支持其它时间单位：&lt;/p>
&lt;ul>
&lt;li>ms # 毫秒&lt;/li>
&lt;li>s # 秒&lt;/li>
&lt;li>m # 分钟&lt;/li>
&lt;li>h # 小时&lt;/li>
&lt;li>d # 天&lt;/li>
&lt;li>w # 周&lt;/li>
&lt;li>y # 年&lt;/li>
&lt;/ul>
&lt;h3 id="subquery子查询">Subquery(子查询)&lt;a class="td-heading-self-link" href="#subquery%e5%ad%90%e6%9f%a5%e8%af%a2" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>在 &lt;code>[ ]&lt;/code> 符号表示的 时间范围选择器 中，可以使用 &lt;strong>Subquery(子查询)&lt;/strong> 功能为时间范围添加 &lt;strong>Resolution(分辨率)&lt;/strong>（有时候也成为 &lt;strong>Step(步长)&lt;/strong>），比如：&lt;/p>
&lt;p>&lt;code>promhttp_metric_handler_requests_total{}[4m:30s]&lt;/code>&lt;/p>
&lt;p>30s 就是 Resolution，表示在 4m 的时间范围中，每隔 30 秒取一个样本值。&lt;/p>
&lt;p>Resolution 通常是可省略的，默认值为 &lt;a href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Configuration/Promethesu%20Server.md">Promethesu Server&lt;/a> 的 &lt;code>.global.evaluation_interval&lt;/code>&lt;/p>
&lt;p>子查询之所以叫子查询，通常用在多个 &lt;a href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/PromQL/PromQL%20Functions(%E5%87%BD%E6%95%B0).md">PromQL Functions(函数)&lt;/a> 的场景，比如&lt;/p>
&lt;p>&lt;code>rate(avg_over_time(node_network_receive_bytes_total{device=&amp;quot;eth0&amp;quot;}[5m])[6h:5m])&lt;/code>是合法的&lt;/p>
&lt;p>&lt;code>rate(avg_over_time(node_network_receive_bytes_total{device=&amp;quot;eth0&amp;quot;}[5m])[6h:])&lt;/code> 是合法的&lt;/p>
&lt;p>&lt;code>rate(avg_over_time(node_network_receive_bytes_total{device=&amp;quot;eth0&amp;quot;}[5m])[6h])&lt;/code> 是非法的&lt;/p>
&lt;p>其中 &lt;code>avg_over_time(node_network_receive_bytes_total{device=&amp;quot;eth0&amp;quot;}[5m]&lt;/code> 的结果为即时向量的时间序列，若想基于该时间序列使用 rate 函数，则必须使用 Subquery 指定 Resolution。&lt;/p>
&lt;h3 id="offset-modifier位移修饰符---时间位移操作">Offset modifier(位移修饰符) - 时间位移操作&lt;a class="td-heading-self-link" href="#offset-modifier%e4%bd%8d%e7%a7%bb%e4%bf%ae%e9%a5%b0%e7%ac%a6---%e6%97%b6%e9%97%b4%e4%bd%8d%e7%a7%bb%e6%93%8d%e4%bd%9c" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>在瞬时向量表达式或者范围向量表达式中，都是以当前时间为基准：&lt;/p>
&lt;p>&lt;code>http_request_total{}&lt;/code> # 瞬时向量表达式，选择当前最新的数据&lt;/p>
&lt;p>&lt;code>http_request_total{}[5m]&lt;/code> # 范围向量表达式，选择以当前时间为基准，5 分钟内的数据&lt;/p>
&lt;p>而如果我们想查询，5 分钟前的瞬时样本数据，或昨天一天的区间内的样本数据呢? 这个时候我们就可以使用位移操作，位移操作的关键字为 offset。&lt;/p>
&lt;p>可以使用 offset 时间位移操作：&lt;/p>
&lt;p>&lt;code>http_request_total{} offset 5m&lt;/code> #&lt;/p>
&lt;p>&lt;code>http_request_total{}[5m] offset 1d&lt;/code> #&lt;/p>
&lt;h2 id="string字符串-表达式">String(字符串) 表达式&lt;a class="td-heading-self-link" href="#string%e5%ad%97%e7%ac%a6%e4%b8%b2-%e8%a1%a8%e8%be%be%e5%bc%8f" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>直接使用字符串，作为 PromQL 表达式，则会直接返回字符串。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&amp;#34;this is a string&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;#39;these are unescaped: \n \\ \t&amp;#39;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>`these are not unescaped: \n &amp;#39; &amp;#34; \t`
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>比如下图：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/lfubxg/1616069073187-d54f3195-edf1-4215-af6d-97b1132832f6.png" alt="">&lt;/p>
&lt;p>如果通过 API，则是这种样子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># curl &amp;#34;http://172.38.40.244:30001/api/v1/query?query=%22HelloWorld%22&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;status&amp;#34;&lt;/span>:&lt;span style="color:#4e9a06">&amp;#34;success&amp;#34;&lt;/span>,&lt;span style="color:#4e9a06">&amp;#34;data&amp;#34;&lt;/span>:&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;resultType&amp;#34;&lt;/span>:&lt;span style="color:#4e9a06">&amp;#34;string&amp;#34;&lt;/span>,&lt;span style="color:#4e9a06">&amp;#34;result&amp;#34;&lt;/span>:&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>1610673038.083,&lt;span style="color:#4e9a06">&amp;#34;HelloWorld&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">]}}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="scalar标量-表达式">Scalar(标量) 表达式&lt;a class="td-heading-self-link" href="#scalar%e6%a0%87%e9%87%8f-%e8%a1%a8%e8%be%be%e5%bc%8f" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>除了使用瞬时向量表达式和区间向量表达式以外，PromQL 还直接支持用户使用标量(Scalar)和字符串(String)。&lt;/p>
&lt;p>标量只有一个数字，没有时序。&lt;/p>
&lt;p>例如：&lt;/p>
&lt;p>10&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/lfubxg/1616069073229-d7297a02-c472-4d5d-a21f-0265ecc5ca63.png" alt="">&lt;/p>
&lt;p>需要注意的是，当使用表达式 count(http_requests_total)，返回的数据类型，依然是瞬时向量。用户可以通过内置函数 scalar()将单个瞬时向量转换为标量。&lt;/p>
&lt;h2 id="operators运算符">Operators(运算符)&lt;a class="td-heading-self-link" href="#operators%e8%bf%90%e7%ae%97%e7%ac%a6" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Prometheus 支持许多二进制和聚合运算符。详见《&lt;a href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/PromQL/PromQL%20Operators(%E8%BF%90%E7%AE%97%E7%AC%A6).md">PromQL Operators&lt;/a>》章节&lt;/p>
&lt;h2 id="functions函数">Functions(函数)&lt;a class="td-heading-self-link" href="#functions%e5%87%bd%e6%95%b0" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Prometheus 支持多种对数据进行操作的函数。详见《&lt;a href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/PromQL/PromQL%20Functions(%E5%87%BD%E6%95%B0).md">PromQL Functions&lt;/a>》章节&lt;/p>
&lt;h1 id="表达式样例">表达式样例&lt;a class="td-heading-self-link" href="#%e8%a1%a8%e8%be%be%e5%bc%8f%e6%a0%b7%e4%be%8b" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>所有的 PromQL 表达式都必须至少包含一个指标名称(例如 http_request_total)，或者一个不会匹配到空字符串的标签过滤器(例如{code=&amp;ldquo;200&amp;rdquo;})。&lt;/p>
&lt;p>因此以下两种方式，均为合法的表达式：
合法的表达式：&lt;/p>
&lt;ul>
&lt;li>http_request_total&lt;/li>
&lt;li>http_request_total{}&lt;/li>
&lt;li>
&lt;/li>
&lt;/ul>
&lt;p>不合法的表达式：&lt;/p>
&lt;ul>
&lt;li>&lt;code>{job=~&amp;quot;.*&amp;quot;}&lt;/code>
&lt;ul>
&lt;li>注意，可以使用 &lt;code>'{job=~&amp;quot;..*&amp;quot;}'&lt;/code> 来匹配所有 job 的 metric，但是官方不建议这么用，防止意外情况发生&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>同时，除了使用{label=value}的形式以外，我们还可以使用内置的__name__标签来指定监控指标名称：&lt;/p>
&lt;p>&lt;code>{__name__=~&amp;quot;http_request_total&amp;quot;}&lt;/code> # 合法&lt;/p>
&lt;p>&lt;code>{__name__=~&amp;quot;node_disk_bytes_read|node_disk_bytes_written&amp;quot;}&lt;/code> # 合法&lt;/p>
&lt;h2 id="即时向量查询结果的示意图">即时向量查询结果的示意图&lt;a class="td-heading-self-link" href="#%e5%8d%b3%e6%97%b6%e5%90%91%e9%87%8f%e6%9f%a5%e8%af%a2%e7%bb%93%e6%9e%9c%e7%9a%84%e7%a4%ba%e6%84%8f%e5%9b%be" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/lfubxg/1616069073170-822867a1-8a50-4fa6-ae70-e34c802af202.jpeg" alt="">&lt;/p>
&lt;h2 id="范围向量查询结果示意图">范围向量查询结果示意图&lt;a class="td-heading-self-link" href="#%e8%8c%83%e5%9b%b4%e5%90%91%e9%87%8f%e6%9f%a5%e8%af%a2%e7%bb%93%e6%9e%9c%e7%a4%ba%e6%84%8f%e5%9b%be" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/lfubxg/1616069073260-b6507c67-3c3c-4c52-bf34-773772f11743.jpeg" alt="">&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/lfubxg/1616069073175-af75032f-496c-4fe2-bfbf-4bd44d56e836.jpeg" alt="">&lt;/p></description></item><item><title>Docs: UDP</title><link>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/UDP/UDP/</link><pubDate>Wed, 12 Oct 2022 10:13:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/Protocol/UDP/UDP/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="概述-1">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0-1" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/User_Datagram_Protocol">Wiki, User_Datagram_Protocol&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://datatracker.ietf.org/doc/html/rfc768">RFC 768&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="udp-介绍">UDP 介绍&lt;a class="td-heading-self-link" href="#udp-%e4%bb%8b%e7%bb%8d" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>User Datagram Protocol (用户数据报协议，简称 UDP)&lt;/strong>。&lt;/p>
&lt;p>不保证数据报文是否安全可靠的到达对方&lt;/p></description></item><item><title>Docs: Helm CLI</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86/Helm/Helm-CLI/Helm-CLI/</link><pubDate>Tue, 27 Sep 2022 10:54:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86/Helm/Helm-CLI/Helm-CLI/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://helm.sh/docs/helm/helm/">官方文档，Helm 命令 - Helm&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="syntax语法">Syntax(语法)&lt;a class="td-heading-self-link" href="#syntax%e8%af%ad%e6%b3%95" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;strong>helm COMMANDS [FLAGS]&lt;/strong>&lt;/p>
&lt;p>Flags 与 Options 一样，是标志、标记的意思，就是指该命令的各个选项&lt;/p>
&lt;h2 id="flags">FLAGS&lt;a class="td-heading-self-link" href="#flags" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>全局 Flags&lt;/p>
&lt;ul>
&lt;li>&amp;ndash;add-dir-header                   If true, adds the file directory to the header&lt;/li>
&lt;li>&amp;ndash;alsologtostderr                  log to standard error as well as files&lt;/li>
&lt;li>&lt;strong>&amp;ndash;debug&lt;/strong> # 开启详细的输出信息&lt;/li>
&lt;li>-h, &amp;ndash;help                             help for helm&lt;/li>
&lt;li>&amp;ndash;kube-context string              name of the kubeconfig context to use&lt;/li>
&lt;li>&amp;ndash;kubeconfig STRING # 指定 helm 运行所需的 kubeconfig 文件路径为 STRING。默认为 /root/.kube/config&lt;/li>
&lt;li>&amp;ndash;log-backtrace-at traceLocation   when logging hits line file:N, emit a stack trace (default :0)&lt;/li>
&lt;li>&amp;ndash;log-dir string                   If non-empty, write log files in this directory&lt;/li>
&lt;li>&amp;ndash;log-file string                  If non-empty, use this log file&lt;/li>
&lt;li>&amp;ndash;log-file-max-size uint           Defines the maximum size a log file can grow to. Unit is megabytes. If the value is 0, the maximum file size is unlimited. (default 1800)&lt;/li>
&lt;li>&amp;ndash;logtostderr                      log to standard error instead of files (default true)&lt;/li>
&lt;li>&lt;strong>-n, &amp;ndash;namespace string&lt;/strong> # 指定当前命令要在哪个 namespace 下执行&lt;/li>
&lt;li>&amp;ndash;registry-config string           path to the registry config file (default &amp;ldquo;/root/.config/helm/registry.json&amp;rdquo;)&lt;/li>
&lt;li>&amp;ndash;repository-cache string          path to the file containing cached repository indexes (default &amp;ldquo;/root/.cache/helm/repository&amp;rdquo;)&lt;/li>
&lt;li>&amp;ndash;repository-config string         path to the file containing repository names and URLs (default &amp;ldquo;/root/.config/helm/repositories.yaml&amp;rdquo;)&lt;/li>
&lt;li>&amp;ndash;skip-headers                     If true, avoid header prefixes in the log messages&lt;/li>
&lt;li>&amp;ndash;skip-log-headers                 If true, avoid headers when opening log files&lt;/li>
&lt;li>&amp;ndash;stderrthreshold severity         logs at or above this threshold go to stderr (default 2)&lt;/li>
&lt;li>-v, &amp;ndash;v Level                          number for the log level verbosity&lt;/li>
&lt;li>&amp;ndash;vmodule moduleSpec               comma-separated list of pattern=N settings for file-filtered logging&lt;/li>
&lt;/ul>
&lt;h1 id="子命令">子命令&lt;a class="td-heading-self-link" href="#%e5%ad%90%e5%91%bd%e4%bb%a4" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="completion---为指定的-shellbash-或-zsh生成命令自动补全脚本">completion - 为指定的 shell（bash 或 zsh）生成命令自动补全脚本&lt;a class="td-heading-self-link" href="#completion---%e4%b8%ba%e6%8c%87%e5%ae%9a%e7%9a%84-shellbash-%e6%88%96-zsh%e7%94%9f%e6%88%90%e5%91%bd%e4%bb%a4%e8%87%aa%e5%8a%a8%e8%a1%a5%e5%85%a8%e8%84%9a%e6%9c%ac" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>helm completion SHELL [FLAGS]&lt;/p>
&lt;p>EXAMPLE&lt;/p>
&lt;p>为 bash shell 生成命令补全脚本，有多种方式，任选其一即可&lt;/p>
&lt;ul>
&lt;li>echo &amp;lsquo;source &amp;lt;(helm completion bash)&amp;rsquo; &amp;raquo; ~/.bashrc&lt;/li>
&lt;li>helm completion bash | sudo tee /etc/bash_completion.d/helm &amp;gt; /dev/null&lt;/li>
&lt;/ul>
&lt;h2 id="create---用给定的名字创建一个新的-chart">create - 用给定的名字创建一个新的 chart&lt;a class="td-heading-self-link" href="#create---%e7%94%a8%e7%bb%99%e5%ae%9a%e7%9a%84%e5%90%8d%e5%ad%97%e5%88%9b%e5%bb%ba%e4%b8%80%e4%b8%aa%e6%96%b0%e7%9a%84-chart" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>创建完成后会创建一个 chart 目录，该目录包含基本的可用文件，然后自己可以自定义其中内容&lt;/p>
&lt;h2 id="dependency---管理一个-chart-的依赖性">dependency - 管理一个 chart 的依赖性&lt;a class="td-heading-self-link" href="#dependency---%e7%ae%a1%e7%90%86%e4%b8%80%e4%b8%aa-chart-%e7%9a%84%e4%be%9d%e8%b5%96%e6%80%a7" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>env # Helm client environment information&lt;/p>
&lt;h2 id="get---获取指定-release-的扩展信息">get - 获取指定 release 的扩展信息&lt;a class="td-heading-self-link" href="#get---%e8%8e%b7%e5%8f%96%e6%8c%87%e5%ae%9a-release-%e7%9a%84%e6%89%a9%e5%b1%95%e4%bf%a1%e6%81%af" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>详见：&lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86/Helm/Helm%20CLI/helm%20%E6%9F%A5%E8%AF%A2%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4.md">helm 查询相关命令&lt;/a>&lt;/p>
&lt;h2 id="history---获取-release-的历史版本">history - 获取 release 的历史版本&lt;a class="td-heading-self-link" href="#history---%e8%8e%b7%e5%8f%96-release-%e7%9a%84%e5%8e%86%e5%8f%b2%e7%89%88%e6%9c%ac" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="install---安装一个-chart-archive可以创建出来一个-release">install - 安装一个 chart archive(可以创建出来一个 release)&lt;a class="td-heading-self-link" href="#install---%e5%ae%89%e8%a3%85%e4%b8%80%e4%b8%aa-chart-archive%e5%8f%af%e4%bb%a5%e5%88%9b%e5%bb%ba%e5%87%ba%e6%9d%a5%e4%b8%80%e4%b8%aa-release" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>详见：&lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86/Helm/Helm%20CLI/install%E3%80%81upgrade%20%E5%AD%90%E5%91%BD%E4%BB%A4.md">install、upgrade 子命令&lt;/a>&lt;/p>
&lt;h2 id="lint---检查一个-chart看看可能出现的问题examines-a-chart-for-possible-issues">lint - 检查一个 chart，看看可能出现的问题。examines a chart for possible issues&lt;a class="td-heading-self-link" href="#lint---%e6%a3%80%e6%9f%a5%e4%b8%80%e4%b8%aa-chart%e7%9c%8b%e7%9c%8b%e5%8f%af%e8%83%bd%e5%87%ba%e7%8e%b0%e7%9a%84%e9%97%ae%e9%a2%98examines-a-chart-for-possible-issues" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="list---列出所有-release">list - 列出所有 release&lt;a class="td-heading-self-link" href="#list---%e5%88%97%e5%87%ba%e6%89%80%e6%9c%89-release" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>helm list [FLAGS] [FILTER]&lt;/p>
&lt;p>FLAGS&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-a&lt;/strong> # 列出所有状态的的 release&lt;/li>
&lt;/ul>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>helm list -A # 列出所有名称空间下已经部署的或者失败的所有 release&lt;/li>
&lt;/ul>
&lt;h2 id="package---打包一个-chart-到定好版本的-chart-archive-文件中">package - 打包一个 chart 到定好版本的 chart archive 文件中&lt;a class="td-heading-self-link" href="#package---%e6%89%93%e5%8c%85%e4%b8%80%e4%b8%aa-chart-%e5%88%b0%e5%ae%9a%e5%a5%bd%e7%89%88%e6%9c%ac%e7%9a%84-chart-archive-%e6%96%87%e4%bb%b6%e4%b8%ad" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>该命令会查找指定路径下的 Chart.yaml 文件，然后打包该目录，如果目录中没有 Chart.yaml 文件则无法打包&lt;/p>
&lt;p>helm package [CHART_PATH] [&amp;hellip;] [FALGS]&lt;/p>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>helm package myapp/ # 将 myapp 目录下的内容打包成一个 charts archive&lt;/li>
&lt;/ul>
&lt;h2 id="plugin---安装显示卸载-helm-的插件">plugin - 安装、显示、卸载 helm 的插件&lt;a class="td-heading-self-link" href="#plugin---%e5%ae%89%e8%a3%85%e6%98%be%e7%a4%ba%e5%8d%b8%e8%bd%bd-helm-%e7%9a%84%e6%8f%92%e4%bb%b6" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="pull---从-repository-中下载指定的-chartnote下载的是压缩包可以解压修改其中内容">pull - 从 repository 中下载指定的 chart。Note：下载的是压缩包，可以解压修改其中内容&lt;a class="td-heading-self-link" href="#pull---%e4%bb%8e-repository-%e4%b8%ad%e4%b8%8b%e8%bd%bd%e6%8c%87%e5%ae%9a%e7%9a%84-chartnote%e4%b8%8b%e8%bd%bd%e7%9a%84%e6%98%af%e5%8e%8b%e7%bc%a9%e5%8c%85%e5%8f%af%e4%bb%a5%e8%a7%a3%e5%8e%8b%e4%bf%ae%e6%94%b9%e5%85%b6%e4%b8%ad%e5%86%85%e5%ae%b9" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="repo---创建列出移除更新索引-chart-的所有仓库">repo - 创建、列出、移除、更新、索引 chart 的所有仓库&lt;a class="td-heading-self-link" href="#repo---%e5%88%9b%e5%bb%ba%e5%88%97%e5%87%ba%e7%a7%bb%e9%99%a4%e6%9b%b4%e6%96%b0%e7%b4%a2%e5%bc%95-chart-%e7%9a%84%e6%89%80%e6%9c%89%e4%bb%93%e5%ba%93" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>helm repo [SubCommand]&lt;/p>
&lt;p>SubCommand&lt;/p>
&lt;ul>
&lt;li>add # 添加一个 charts 仓库
&lt;ul>
&lt;li>helm repo add [FLAGS] NAME URL # 添加一个名为 Name,url 为 URL 的仓库&lt;/li>
&lt;li>EXAMPLE
&lt;ul>
&lt;li>helm repo add desistdaydream &lt;a href="https://www.desistdaydream.com">https://www.desistdaydream.com&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>index       generate an index file given a directory containing packaged charts&lt;/li>
&lt;li>list        list chart repositories
&lt;ul>
&lt;li>EXAMPLE
&lt;ul>
&lt;li>helm repo list&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>remove      remove a chart repository&lt;/li>
&lt;li>update      update information of available charts locally from chart repositories&lt;/li>
&lt;/ul>
&lt;h2 id="rollback---回滚一个-release-到以前的版本">rollback - 回滚一个 release 到以前的版本&lt;a class="td-heading-self-link" href="#rollback---%e5%9b%9e%e6%bb%9a%e4%b8%80%e4%b8%aa-release-%e5%88%b0%e4%bb%a5%e5%89%8d%e7%9a%84%e7%89%88%e6%9c%ac" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="search---在可以存储-helm-图表的各种地方进行搜索以显示可用的-helm-charts">search - 在可以存储 Helm 图表的各种地方进行搜索，以显示可用的 helm charts&lt;a class="td-heading-self-link" href="#search---%e5%9c%a8%e5%8f%af%e4%bb%a5%e5%ad%98%e5%82%a8-helm-%e5%9b%be%e8%a1%a8%e7%9a%84%e5%90%84%e7%a7%8d%e5%9c%b0%e6%96%b9%e8%bf%9b%e8%a1%8c%e6%90%9c%e7%b4%a2%e4%bb%a5%e6%98%be%e7%a4%ba%e5%8f%af%e7%94%a8%e7%9a%84-helm-charts" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>helm search [COMMAND]&lt;/strong>&lt;/p>
&lt;h3 id="hub---在-helm-hub-或-monocular-实例中搜索-charts">hub - 在 helm hub 或 Monocular 实例中搜索 charts&lt;a class="td-heading-self-link" href="#hub---%e5%9c%a8-helm-hub-%e6%88%96-monocular-%e5%ae%9e%e4%be%8b%e4%b8%ad%e6%90%9c%e7%b4%a2-charts" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>FLAGS&lt;/p>
&lt;ul>
&lt;li>&amp;ndash;endpoint string      monocular instance to query for charts (default &amp;ldquo;&lt;a href="https://hub.helm.sh">https://hub.helm.sh&lt;/a>&amp;rdquo;)&lt;/li>
&lt;li>&amp;ndash;max-col-width uint   maximum column width for output table (default 50)&lt;/li>
&lt;li>-o, &amp;ndash;output format        prints the output in the specified format. Allowed values: table, json, yaml (default table)&lt;/li>
&lt;/ul>
&lt;h3 id="repo---在已添加的所有-repoistories-中搜索-charts">repo - 在已添加的所有 repoistories 中搜索 charts&lt;a class="td-heading-self-link" href="#repo---%e5%9c%a8%e5%b7%b2%e6%b7%bb%e5%8a%a0%e7%9a%84%e6%89%80%e6%9c%89-repoistories-%e4%b8%ad%e6%90%9c%e7%b4%a2-charts" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>&lt;strong>helm search repo [KEYWORD] [FLAGS]&lt;/strong>&lt;/p>
&lt;p>KEYWORD 可以指定 &lt;code>仓库名/图表名&lt;/code> 以搜索指定 仓库或 Chart&lt;/p>
&lt;p>FLAGS&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&amp;ndash;devel&lt;/strong> # 搜索结果包含开发版等效于 &amp;ndash;version 标志的值&amp;rsquo;&amp;gt;0.0.0-0&amp;rsquo;。如果设置了 &amp;ndash;version 标志，则忽略该标志。&lt;/li>
&lt;li>&lt;strong>&amp;ndash;max-col-width UINT&lt;/strong> # 输出表的每列的最大宽度为 UINT。(默认为 50)&lt;/li>
&lt;li>&lt;strong>-o, &amp;ndash;output FORMAT&lt;/strong> # 以指定的格式打印输出。 允许的值：table，json，yaml（默认表）&lt;/li>
&lt;li>-r, &amp;ndash;regexp               use regular expressions for searching repositories you have added&lt;/li>
&lt;li>&lt;strong>&amp;ndash;version STRING&lt;/strong> #       search using semantic versioning constraints on repositories you have added&lt;/li>
&lt;li>&lt;strong>-l, &amp;ndash;versions&lt;/strong> # 显示 Chart 的所有版本，而不仅仅显示最后一个版本。&lt;/li>
&lt;/ul>
&lt;h2 id="show---显示一个-chart-的信息多种信息可以使用子命令来控制要输出的-chart-信息">show - 显示一个 chart 的信息多种信息，可以使用子命令来控制要输出的 chart 信息&lt;a class="td-heading-self-link" href="#show---%e6%98%be%e7%a4%ba%e4%b8%80%e4%b8%aa-chart-%e7%9a%84%e4%bf%a1%e6%81%af%e5%a4%9a%e7%a7%8d%e4%bf%a1%e6%81%af%e5%8f%af%e4%bb%a5%e4%bd%bf%e7%94%a8%e5%ad%90%e5%91%bd%e4%bb%a4%e6%9d%a5%e6%8e%a7%e5%88%b6%e8%a6%81%e8%be%93%e5%87%ba%e7%9a%84-chart-%e4%bf%a1%e6%81%af" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="status---显示指定名字的-release-状态信息">status - 显示指定名字的 release 状态信息&lt;a class="td-heading-self-link" href="#status---%e6%98%be%e7%a4%ba%e6%8c%87%e5%ae%9a%e5%90%8d%e5%ad%97%e7%9a%84-release-%e7%8a%b6%e6%80%81%e4%bf%a1%e6%81%af" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>helm status ReleaseName [FLAGS]&lt;/strong>&lt;/p>
&lt;p>FLAGS&lt;/p>
&lt;ul>
&lt;li>-o, &amp;ndash;output FORMAT # 以指定的格式输出内容。&lt;code>默认值：table&lt;/code>。可用的值有 table、json、yaml
&lt;ul>
&lt;li>注意：yaml 格式可以显示该 release 的所有资源&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&amp;ndash;revision INT # 显示指定历史版本的信息&lt;/li>
&lt;/ul>
&lt;h2 id="template---在本地渲染-chart-模板并展示输出">template - 在本地渲染 chart 模板，并展示输出&lt;a class="td-heading-self-link" href="#template---%e5%9c%a8%e6%9c%ac%e5%9c%b0%e6%b8%b2%e6%9f%93-chart-%e6%a8%a1%e6%9d%bf%e5%b9%b6%e5%b1%95%e7%a4%ba%e8%be%93%e5%87%ba" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>详见：&lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86/Helm/Helm%20CLI/helm%20template%20%E6%A8%A1%E6%9D%BF%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4.md">helm template 模板相关命令&lt;/a>&lt;/p>
&lt;h2 id="test---test-a-release">test - test a release&lt;a class="td-heading-self-link" href="#test---test-a-release" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="uninstall---卸载指定的-release">uninstall - 卸载指定的 release&lt;a class="td-heading-self-link" href="#uninstall---%e5%8d%b8%e8%bd%bd%e6%8c%87%e5%ae%9a%e7%9a%84-release" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>helm uninstall [FLAGS] RELEASE_NAME [&amp;hellip;]&lt;/p>
&lt;p>FLAGS&lt;/p>
&lt;ul>
&lt;li>&amp;ndash;purge # 从 store 移除 release 以便让 release 的名字空出来为以后使用。&lt;/li>
&lt;/ul>
&lt;p>EXAMPLE&lt;/p>
&lt;h2 id="upgrade---升级一个-release">upgrade - 升级一个 release&lt;a class="td-heading-self-link" href="#upgrade---%e5%8d%87%e7%ba%a7%e4%b8%80%e4%b8%aa-release" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="verify---verify-that-a-chart-at-the-given-path-has-been-signed-and-is-valid">verify - verify that a chart at the given path has been signed and is valid&lt;a class="td-heading-self-link" href="#verify---verify-that-a-chart-at-the-given-path-has-been-signed-and-is-valid" aria-label="Heading self-link">&lt;/a>&lt;/h2></description></item><item><title>Docs: Helm</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86/Helm/Helm/</link><pubDate>Tue, 27 Sep 2022 10:49:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86/Helm/Helm/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/helm/helm">GitHub 项目，helm/helm&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://helm.sh/docs/">官方文档&lt;/a>&lt;/li>
&lt;li>其他后期发现的文章
&lt;ul>
&lt;li>&lt;a href="https://www.cnblogs.com/liugp/p/16659802.html">https://www.cnblogs.com/liugp/p/16659802.html&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Helm&lt;/strong> 是 Kubernetes 的 &lt;strong>Package Manager(包管理器)&lt;/strong>。Kubernetes 在希腊语中，意为舵手或飞行员，是一个蓝色的舵轮图标。所以 Helm 就以类似的概念命名，Helm 称为舵柄，图标与 Kubernetes 类似，寓意把握着 Kubernetes 航行的方向。&lt;/p>
&lt;h2 id="主要概念">主要概念&lt;a class="td-heading-self-link" href="#%e4%b8%bb%e8%a6%81%e6%a6%82%e5%bf%b5" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://helm.sh/docs/intro/using_helm/">官方文档，介绍-使用 Helm&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Helm 与 Kubernetes 的关系，就好比 yum 与 RedHat，apt 与 Ubuntu 一样，是一个 Kubernetes 专用的包管理器，安装专用于 k8s 集群之上的软件包。Helm 使用 Chart 帮助我们管理应用，Chart 就像 RPM 一样，里面描述了应用及其依赖关系。&lt;/p>
&lt;p>&lt;strong>Chart(图表)&lt;/strong> 是由 Helm 管理的应用部署包。Chart 是在一个结构相对固定的目录中，包含用于描述一个应用的一组 manifests 文件。&lt;/p>
&lt;ol>
&lt;li>Chart Archive(图标归档) # 是一个将 Chart 打包成 .tgz 格式的压缩文件。&lt;/li>
&lt;li>实际上，Chart 就是很多 &lt;a href="https://kubernetes.io/docs/reference/glossary/?all=true#term-manifest">&lt;strong>manifests&lt;/strong>&lt;/a> 的集合，里面有一个应用程序所需的 yaml 文件。而对于 kubernetes 来说，所谓的应用程序(软件包)也就是一堆 manifests，每个 manifest 代表一种资源(比如 deployment、service、ingress、configmap 等等)，这些 manifests 组合起来，就构成了一个应用。&lt;/li>
&lt;li>&lt;strong>Chart 包&lt;/strong> 就像 &lt;strong>RPM 包&lt;/strong>一样。这不过没有类似 rpm 的命令，而是直接使用类似 yum 的 helm 命令来管理这些包。并且，Chart 包 也和 RPM 包一样，具有依赖关系。&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>Release(发布)&lt;/strong> 是将 Chart 部署到 Kubernets 集群中运行的实例，每一次 helm install CHART 就会生成一个 Release&lt;/p>
&lt;ol>
&lt;li>Chart 是基础包，通过 config 赋值，生成 release。一般 config 来自于 chart archive 包中的 values.yaml 文件&lt;/li>
&lt;/ol>
&lt;p>chart 与 release 的关系就像 windows 中的 .exe 的安装文件与安装完成后在添加删除程序中看到的应用程序。chart 就是安装文件，release 就是程序。只不过 chart 可以是压缩包或者文件夹或者 url；helm list 命令就相当于打开了添加删除程序，可以看到已经安装好的 release。&lt;/p>
&lt;p>&lt;strong>Repository(仓库)&lt;/strong> 是存放 Charts 的地方，就是类似于 yum 源的概念。Helm 添加一个仓库 URL，就可以查看或安装该仓库下的 Charts。&lt;/p>
&lt;p>基于上述概念，可以这么描述他们：Helm 安装 Charts 到 kubernetes 中，并为每个安装创建一个新的 Release。如果想要找到新的 Charts，可以使用 Helm 搜索 Repository&lt;/p>
&lt;h3 id="在安装前自定义-chart">在安装前自定义 Chart&lt;a class="td-heading-self-link" href="#%e5%9c%a8%e5%ae%89%e8%a3%85%e5%89%8d%e8%87%aa%e5%ae%9a%e4%b9%89-chart" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>&lt;a href="https://helm.sh/docs/intro/using_helm/#customizing-the-chart-before-installing">https://helm.sh/docs/intro/using_helm/#customizing-the-chart-before-installing&lt;/a>&lt;/p>
&lt;p>在我们使用 yum 安装应用时，一般都是安装完成后，再对配置文件进行编辑，以改变应用的运行行为。&lt;/p>
&lt;p>但是使用 Helm 则不能这么做，因为 Helm 直接将应用部署到 Kubernetes 集群中，部署完成后，再改变运行行为的方式是不优雅，且不方便的。所以，我们需要 &lt;strong>Customizing the Chart Before Installing(在安装前自定义图表)&lt;/strong>。&lt;/p>
&lt;p>要查看图表上可配置的选项，使用&lt;code>helm show values&lt;/code>命令。&lt;/p>
&lt;h2 id="charts-repository图表仓库">Charts Repository(图表仓库)&lt;a class="td-heading-self-link" href="#charts-repository%e5%9b%be%e8%a1%a8%e4%bb%93%e5%ba%93" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>通常来说，我们可以直接使用别人已经做好的 Chart，就跟使用 Docker 镜像，或者使用 yum 安装一样。并且，Helm 社区在早期已经维护了一个 &lt;a href="https://github.com/helm/charts">&lt;strong>Helm Charts Hub&lt;/strong>&lt;/a>，这个 Hub 里包含丰富的 Charts。随着云原生应用的发展，这个仓库需要处理的 PR 越来越多，维护非常困难，所以 Helm 逐步把 Charts Hub 中的内容移动到 &lt;a href="https://artifacthub.io/">Artifact Hub&lt;/a> 中(Charts Hub 维护期持续 1 年)。&lt;a href="https://artifacthub.io/">&lt;strong>Arifact Hub&lt;/strong>&lt;/a> 是一个基于 Web 的应用程序，可用于查找，安装和发布 CNCF 项目的软件包和配置。例如，这可能包括 Helm 图表，Falco 配置，开放策略代理（OPA）策略和 OLM 运算符。&lt;/p>
&lt;p>Artifact Hub 中，除了包含 Helm Charts Hub 中的各种资源外，还有各种开源软件官方维护的 Charts，以及 &lt;a href="https://bitnami.com/stacks/helm">&lt;strong>Bitnami 中适用于 kubernetes 的 Charts&lt;/strong>&lt;/a>。&lt;/p>
&lt;p>&lt;a href="https://bitnami.com/">&lt;strong>Bitnami&lt;/strong>&lt;/a> 使我们可以轻松地在任何平台上启动并运行您我们喜爱的开源软件，包括笔记本电脑，Kubernetes 和所有主要云。除了流行的社区产品之外，Bitnami 现在是 VMware 的一部分，它为 IT 组织提供安全，合规，连续维护和可根据组织策略自定义的企业产品。&lt;/p>
&lt;h1 id="helm-的安装">Helm 的安装&lt;a class="td-heading-self-link" href="#helm-%e7%9a%84%e5%ae%89%e8%a3%85" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>注意：Helm 使用时，会读取 /root/.kube/config 文件来连接 Kubernetes 集群。&lt;/p>
&lt;ul>
&lt;li>下载 &lt;a href="https://github.com/helm/helm/releases">helm 的 linux 压缩文件&lt;/a>，解压后把 helm 的二进制文件移动到 /usr/bin 目录下，即可直接使用 helm 命令&lt;/li>
&lt;li>配置命令补全
&lt;ul>
&lt;li>echo &amp;ldquo;source &amp;lt;(helm completion bash)&amp;rdquo; &amp;raquo; /root/.bashrc&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>安装 push 插件
&lt;ul>
&lt;li>helm plugin install &lt;a href="https://github.com/chartmuseum/helm-push.git">https://github.com/chartmuseum/helm-push.git&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>当创建一个 Release 的时候，会先把 Chart 的数据存档(.tgz 格式)文件下载到 Helm 配置目录的 archive 目录下，然后再安装&lt;/li>
&lt;/ul>
&lt;h1 id="helm-关联文件与配置">Helm 关联文件与配置&lt;a class="td-heading-self-link" href="#helm-%e5%85%b3%e8%81%94%e6%96%87%e4%bb%b6%e4%b8%8e%e9%85%8d%e7%bd%ae" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;strong>~/.cache/helm/&lt;/strong> # helm 缓存路径&lt;/p>
&lt;ul>
&lt;li>&lt;strong>./plugin/&lt;/strong> # helm 插件安装路径&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>/root/.local/share/helm/plugins/&lt;/strong> #&lt;/p>
&lt;h1 id="helm-安装资源的顺序">Helm 安装资源的顺序&lt;a class="td-heading-self-link" href="#helm-%e5%ae%89%e8%a3%85%e8%b5%84%e6%ba%90%e7%9a%84%e9%a1%ba%e5%ba%8f" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;ul>
&lt;li>Namespace&lt;/li>
&lt;li>NetworkPolicy&lt;/li>
&lt;li>ResourceQuota&lt;/li>
&lt;li>LimitRange&lt;/li>
&lt;li>PodSecurityPolicy&lt;/li>
&lt;li>PodDisruptionBudget&lt;/li>
&lt;li>ServiceAccount&lt;/li>
&lt;li>Secret&lt;/li>
&lt;li>SecretList&lt;/li>
&lt;li>ConfigMap&lt;/li>
&lt;li>StorageClass&lt;/li>
&lt;li>PersistentVolume&lt;/li>
&lt;li>PersistentVolumeClaim&lt;/li>
&lt;li>CustomResourceDefinition&lt;/li>
&lt;li>ClusterRole&lt;/li>
&lt;li>ClusterRoleList&lt;/li>
&lt;li>ClusterRoleBinding&lt;/li>
&lt;li>ClusterRoleBindingList&lt;/li>
&lt;li>Role&lt;/li>
&lt;li>RoleList&lt;/li>
&lt;li>RoleBinding&lt;/li>
&lt;li>RoleBindingList&lt;/li>
&lt;li>Service&lt;/li>
&lt;li>DaemonSet&lt;/li>
&lt;li>Pod&lt;/li>
&lt;li>ReplicationController&lt;/li>
&lt;li>ReplicaSet&lt;/li>
&lt;li>Deployment&lt;/li>
&lt;li>HorizontalPodAutoscaler&lt;/li>
&lt;li>StatefulSet&lt;/li>
&lt;li>Job&lt;/li>
&lt;li>CronJob&lt;/li>
&lt;li>Ingress&lt;/li>
&lt;li>APIService&lt;/li>
&lt;/ul></description></item><item><title>Docs: Etcd</title><link>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E9%94%AE%E5%80%BC%E6%95%B0%E6%8D%AE/Etcd/Etcd/</link><pubDate>Mon, 26 Sep 2022 08:55:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E9%94%AE%E5%80%BC%E6%95%B0%E6%8D%AE/Etcd/Etcd/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/etcd-io/etcd">GitHub 项目，etcd-io/etcd&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/etcd-io/website">GitHub 项目，etcd-io/website&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://etcd.io/">官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://etcd.io/docs/">官方文档&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://juejin.cn/post/6844904031186321416">掘金 etcd 万字长文&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cloud.tencent.com/developer/article/1754878">腾讯云社区上的 etcd 万字长文&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Etcd 是 CoreOS 基于&lt;a href="https://desistdaydream.github.io/docs/3.%E9%9B%86%E7%BE%A4%E4%B8%8E%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E7%AE%97%E6%B3%95/%E5%85%B1%E8%AF%86%E7%AE%97%E6%B3%95.md">Raft 共识算法&lt;/a> 开发的分布式 key-value 存储，可用于服务发现、共享配置以及一致性保障(如数据库选主、分布式锁等)。&lt;/p>
&lt;ul>
&lt;li>基本的 key-value 存储，后端存储采用的是 BBolt 存储引擎，其前身是 BoltDB ，这是一款 golang 实现的嵌入式 KV 存储引擎，参考的是 LMDB，支持事务、ACID、MVCC、ZeroCopy、BTree 等特性。&lt;/li>
&lt;li>监听机制&lt;/li>
&lt;li>key 的过期及续约机制，用于监控和服务发现&lt;/li>
&lt;li>原子 CAS 和 CAD，用于分布式锁和 leader 选举
&lt;ul>
&lt;li>选举机制详见：&lt;a href="https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E9%94%AE%E5%80%BC%E6%95%B0%E6%8D%AE/Etcd/Etcd%20%E5%9F%BA%E4%BA%8E%20RAFT%20%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7.md">Etcd 基于 RAFT 的一致性&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="glossary术语">Glossary(术语)&lt;a class="td-heading-self-link" href="#glossary%e6%9c%af%e8%af%ad" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>官方文档：&lt;a href="https://github.com/etcd-io/etcd/blob/master/Documentation/learning/glossary.md">https://github.com/etcd-io/etcd/blob/master/Documentation/learning/glossary.md&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;strong>Raft&lt;/strong> # etcd 所采用的保证分布式系统强一致性的算法。&lt;/li>
&lt;li>&lt;strong>Endpoint(端点)&lt;/strong># 指向 etcd 服务或资源的 URL 。比如 &lt;a href="http://172.38.40.212:2379">http://172.38.40.212:2379&lt;/a> 就是 etcd 中的一个 endpoint ，这个 endpoint 指向了 172.38.40.212 设备的 2379 端口上的 etcd&lt;/li>
&lt;li>&lt;strong>Node&lt;/strong> # 一个 Raft 状态机实例。&lt;/li>
&lt;li>&lt;strong>Member(成员)&lt;/strong> # 一个 etcd 实例。它管理着一个 Node，并且可以为客户端请求提供服务。
&lt;ul>
&lt;li>Member 是组成 etcd cluster 的一部分。一个逻辑概念，是集群中提供服务的 etcd 服务器。可以为一个 member 单独定义一个名字和描述等信息。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Cluster(集群)&lt;/strong> # 由多个 Member 构成可以协同工作的 etcd 集群。&lt;/li>
&lt;li>&lt;strong>Peer&lt;/strong> # 对同一个 etcd 集群中另外一个 Member 的称呼。&lt;/li>
&lt;li>&lt;strong>Client&lt;/strong> # 向 etcd 集群发送 HTTP 请求的客户端。&lt;/li>
&lt;li>&lt;strong>snapshot&lt;/strong> # etcd 防止 WAL 文件过多而设置的快照，存储 etcd 数据状态。&lt;/li>
&lt;li>&lt;strong>Proxy&lt;/strong> # etcd 的一种模式，为 etcd 集群提供反向代理服务。&lt;/li>
&lt;li>&lt;strong>Leader&lt;/strong> # Raft 算法中通过竞选而产生的处理所有数据提交的节点。&lt;/li>
&lt;li>&lt;strong>Follower&lt;/strong> # 竞选失败的节点作为 Raft 中的从属节点，为算法提供强一致性保证。&lt;/li>
&lt;li>&lt;strong>Candidate&lt;/strong> # 当 Follower 超过一定时间接收不到 Leader 的心跳时转变为 Candidate 开始竞选。&lt;/li>
&lt;li>&lt;strong>Term&lt;/strong> # Raft 算法中的概念。某个节点成为 Leader 到下一次竞选时间，称为一个 Term。&lt;/li>
&lt;li>&lt;strong>Index&lt;/strong> # 数据项编号。Raft 中通过 Term 和 Index 来定位数据。&lt;/li>
&lt;/ul>
&lt;h1 id="etcd-工作方式简述">Etcd 工作方式简述&lt;a class="td-heading-self-link" href="#etcd-%e5%b7%a5%e4%bd%9c%e6%96%b9%e5%bc%8f%e7%ae%80%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>每个 etcd 一般使用两个端口进行工作，一个端口面向客户端提供服务(2379)，另一个端口集群内部通信(2380)。可以将 etcd 端口设置为接受 TLS 流量，非 TLS 流量，或同时接受 TLS 和非 TLS 流量。&lt;/p>
&lt;h3 id="数据读写顺序">数据读写顺序&lt;a class="td-heading-self-link" href="#%e6%95%b0%e6%8d%ae%e8%af%bb%e5%86%99%e9%a1%ba%e5%ba%8f" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>为了保证数据的强一致性，etcd 集群中所有的数据流向都是一个方向，从 Leader （主节点）流向 Follower，也就是所有 Follower 的数据必须与 Leader 保持一致，如果不一致会被覆盖。&lt;/p>
&lt;p>用户对于 etcd 集群所有节点进行读写&lt;/p>
&lt;ul>
&lt;li>读取：由于集群所有节点数据是强一致性的，读取可以从集群中随便哪个节点进行读取数据&lt;/li>
&lt;li>写入：etcd 集群有 leader，如果写入往 leader 写入，可以直接写入，然后然后 Leader 节点会把写入分发给所有 Follower，如果往 follower 写入，然后 Leader 节点会把写入分发给所有 Follower&lt;/li>
&lt;/ul>
&lt;h3 id="leader-选举">leader 选举&lt;a class="td-heading-self-link" href="#leader-%e9%80%89%e4%b8%be" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>假设三个节点的集群，三个节点上均运行 Timer（每个 Timer 持续时间是随机的），Raft 算法使用随机 Timer 来初始化 Leader 选举流程，第一个节点率先完成了 Timer，随后它就会向其他两个节点发送成为 Leader 的请求，其他节点接收到请求后会以投票回应然后第一个节点被选举为 Leader。&lt;/p>
&lt;p>成为 Leader 后，该节点会以固定时间间隔向其他节点发送通知，确保自己仍是 Leader。有些情况下当 Follower 们收不到 Leader 的通知后，比如说 Leader 节点宕机或者失去了连接，其他节点会重复之前选举过程选举出新的 Leader。&lt;/p>
&lt;h3 id="判断数据是否写入">判断数据是否写入&lt;a class="td-heading-self-link" href="#%e5%88%a4%e6%96%ad%e6%95%b0%e6%8d%ae%e6%98%af%e5%90%a6%e5%86%99%e5%85%a5" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>etcd 认为写入请求被 Leader 节点处理并分发给了多数节点后，就是一个成功的写入。那么多少节点如何判定呢，假设总结点数是 N，那么多数节点 &lt;code>Quorum=N/2+1&lt;/code>。关于如何确定 etcd 集群应该有多少个节点的问题，上图的左侧的图表给出了集群中节点总数(Instances)对应的 Quorum 数量，用 Instances 减去 Quorom 就是集群中容错节点（允许出故障的节点）的数量。&lt;/p>
&lt;p>所以在集群中推荐的最少节点数量是 3 个，因为 1 和 2 个节点的容错节点数都是 0，一旦有一个节点宕掉整个集群就不能正常工作了。&lt;/p>
&lt;h2 id="etcd-监控指标">Etcd 监控指标&lt;a class="td-heading-self-link" href="#etcd-%e7%9b%91%e6%8e%a7%e6%8c%87%e6%a0%87" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>官方文档：&lt;a href="https://etcd.io/docs/latest/op-guide/monitoring/">https://etcd.io/docs/latest/op-guide/monitoring/&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>ID：3070 是一个不错的 grafana dashboard&lt;/p>
&lt;/blockquote>
&lt;p>每个 etcd 服务器在 /metrics 路径下暴露 metrics 。默认在 http://ETCDIP:2379/metrics 下。&lt;/p>
&lt;p>可以使用 &amp;ndash;listen-metrics-urls 参数单独指定 etcd 要暴露 metrics 的 ip 和 port。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>$ curl -L http://localhost:2379/metrics &lt;span style="color:#000;font-weight:bold">|&lt;/span> grep -v debugging &lt;span style="color:#8f5902;font-style:italic"># ignore unstable debugging metrics&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># HELP etcd_disk_backend_commit_duration_seconds The latency distributions of commit called by backend.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># TYPE etcd_disk_backend_commit_duration_seconds histogram&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>etcd_disk_backend_commit_duration_seconds_bucket&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>&lt;span style="color:#000">le&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;0.002&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">72756&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>etcd_disk_backend_commit_duration_seconds_bucket&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>&lt;span style="color:#000">le&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;0.004&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">401587&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>etcd_disk_backend_commit_duration_seconds_bucket&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>&lt;span style="color:#000">le&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;0.008&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">405979&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>etcd_disk_backend_commit_duration_seconds_bucket&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>&lt;span style="color:#000">le&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;0.016&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">406464&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="健康检查">健康检查&lt;a class="td-heading-self-link" href="#%e5%81%a5%e5%ba%b7%e6%a3%80%e6%9f%a5" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>从 v3.3.0 开始，除了响应 /metrics 端点之外，&amp;ndash;listen-metrics-urls 参数指定的任何位置也将响应 /health 端点。如果标准端点配置了相互（客户机）TLS 身份验证，但负载平衡器或监视服务仍需要访问运行状况检查，则此功能非常有用。&lt;/p>
&lt;h1 id="etcd-关联文件与配置">Etcd 关联文件与配置&lt;a class="td-heading-self-link" href="#etcd-%e5%85%b3%e8%81%94%e6%96%87%e4%bb%b6%e4%b8%8e%e9%85%8d%e7%bd%ae" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;strong>/var/lib/etcd/&lt;/strong> # Etcd 数据存储目录。该目录为默认目录，可以在配置文件的 ETCD_DATA_DIR 字段中修改路径&lt;/p>
&lt;p>&lt;strong>/etc/etcd/etcd.conf&lt;/strong> # 基本配置文件&lt;/p>
&lt;p>&lt;strong>/etc/etcd/etcd.conf.yaml&lt;/strong> # 与基本配置文件类似，可以已 yaml 的形式写配置文件。&lt;/p>
&lt;p>下面是基本配置文件的示例&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ini" data-lang="ini">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#[Member]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">ETCD_DATA_DIR&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;/PATH&amp;#34; #etcd中的数据是基于内存的Key/Val存储，持久化之后，需要保存的目录即在此配置中定义&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">ETCD_LISTEN_PEER_URLS&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Protocol://IP:PORT,....&amp;#34; #指定etcd集群内互相通信时所监听的端口，默认2380&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">ETCD_LISTEN_CLIENT_URLS&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Protocol://IP:PORT,...&amp;#34; #指定etcd与其客户端(apiserver)通信时所监听的端口，默认2379&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">ETCD_NAME&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;HostName&amp;#34; #指定etcd所在节点的主机名&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">ETCD_SNAPSHOT_COUNT&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;NUM&amp;#34; #指定可以快照多少次，默认100000,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#[Clustering]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">ETCD_INITAL_ADVERTISE_PEER_URLS&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Protocol://{IP|HostName}:PORT,....&amp;#34; #一个声明，指定对外广告的etcd集群内互相通信时所监听的端口&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">ETCD_ADVERTISE_CLIENT_URLS&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Protocol://{IP|HostName}:PORT,....&amp;#34; #一个声明，指定对外广告的etcd与其客户端(apiserver)通信时所监听的端口&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">ETCD_INITIAL_CLUSTER&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;HostName1=Protocol://HostName1:PORT,HostName2=Protocol://HostName2:PORT,.......&amp;#34; #指定etcd集群初始成员信息，集群中有几个etcd就用写几个&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#[Proxy]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#ETCD_PROXY=&amp;#34;off&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#ETCD_PROXY_FAILURE_WAIT=&amp;#34;5000&amp;#34; #&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#ETCD_PROXY_REFRESH_INTERVAL=&amp;#34;30000&amp;#34; #&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#ETCD_PROXY_DIAL_TIMEOUT=&amp;#34;1000&amp;#34; #&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#ETCD_PROXY_WRITE_TIMEOUT=&amp;#34;5000&amp;#34; #&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#ETCD_PROXY_READ_TIMEOUT=&amp;#34;0&amp;#34; #&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#[Security]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">ETCD_CERT_FILE&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;/PATH/FILE&amp;#34; #指定集群与客户端通信时所用的服务端证书&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">ETCD_KEY_FILE&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;/PATH/FILE&amp;#34; #指定集群与客户端通信时所用的服务端证书的私钥&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">ETCD_CLIENT_CERT_AUTH&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;false|ture&amp;#34; #指明是否验证客户端证书&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">ETCD_TRUSTED_CA_FILE&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;/PATH/FILE&amp;#34; ##指定签署服务端证书的CA证书&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">ETCD_AUTO_TLS&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;false|ture&amp;#34; #是否让etcd自动生成服务端证书&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">ETCD_PEER_CERT_FILE&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;/PATH/FILE&amp;#34; #指定集群间通信时所用的证书&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">ETCD_PEER_KEY_FILE&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;/PATH/FILE&amp;#34; #指定集群间通信时所用的证书的私钥&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">ETCD_PEER_CLIENT_CERT_AUTH&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;false|ture&amp;#34; #指明是否验证客户端(即apiserver)的证书(peer模式中各节点互为服务端和客户端)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">ETCD_PEER_TRUSTED_CA_FILE&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;/PATH/FILE&amp;#34; #指定签署peer证书的CA证书&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">ETCD_PEER_AUTO_TLS&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;false|ture&amp;#34; #是否让etcd自动生成peer证书&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#[Logging]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#ETCD_DEBUG=&amp;#34;false&amp;#34; #&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#ETCD_LOG_PACKAGE_LEVELS=&amp;#34;&amp;#34; #&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#ETCD_LOG_OUTPUT=&amp;#34;default&amp;#34; #&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#[Unsafe]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#ETCD_FORCE_NEW_CLUSTER=&amp;#34;false&amp;#34; #&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#[Version]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#ETCD_VERSION=&amp;#34;false&amp;#34; #&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#ETCD_AUTO_COMPACTION_RETENTION=&amp;#34;0&amp;#34; #&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#[Profiling]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#ETCD_ENABLE_PPROF=&amp;#34;false&amp;#34; #&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#ETCD_METRICS=&amp;#34;basic&amp;#34; #&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#[Auth]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#ETCD_AUTH_TOKEN=&amp;#34;simple&amp;#34; #&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="etcd-架构">Etcd 架构&lt;a class="td-heading-self-link" href="#etcd-%e6%9e%b6%e6%9e%84" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/ummz3n/1616136796826-e3ea264c-885a-49c9-b416-06f0bf2f90ed.png" alt="">&lt;/p>
&lt;p>从 etcd 的架构图中我们可以看到，etcd 主要分为四个部分。&lt;/p>
&lt;ul>
&lt;li>HTTP Server：用于处理用户发送的 API 请求以及其它 etcd 节点的同步与心跳信息请求。&lt;/li>
&lt;li>Store：用于处理 etcd 支持的各类功能的事务，包括数据索引、节点状态变更、监控与反馈、事件处理与执行等等，是 etcd 对用户提供的大多数 API 功能的具体实现。&lt;/li>
&lt;li>Raft：Raft 强一致性算法的具体实现，是 etcd 的核心。&lt;/li>
&lt;li>WAL：Write Ahead Log（预写式日志），是 etcd 的数据存储方式。除了在内存中存有所有数据的状态以及节点的索引以外，etcd 就通过 WAL 进行持久化存储。WAL 中，所有的数据提交前都会事先记录日志。
&lt;ul>
&lt;li>Snapshot 是为了防止数据过多而进行的状态快照；&lt;/li>
&lt;li>Entry 表示存储的具体日志内容。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>通常，一个用户的请求发送过来，会经由 HTTP Server 转发给 Store 进行具体的事务处理，如果涉及到节点的修改，则交给 Raft 模块进行状态的变更、日志的记录，然后再同步给别的 etcd 节点以确认数据提交，最后进行数据的提交，再次同步。&lt;/p>
&lt;h1 id="etcd-应用场景">Etcd 应用场景&lt;a class="td-heading-self-link" href="#etcd-%e5%ba%94%e7%94%a8%e5%9c%ba%e6%99%af" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="31-服务注册与发现">3.1 服务注册与发现&lt;a class="td-heading-self-link" href="#31-%e6%9c%8d%e5%8a%a1%e6%b3%a8%e5%86%8c%e4%b8%8e%e5%8f%91%e7%8e%b0" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>etcd 可以用于服务的注册与发现&lt;/p>
&lt;ul>
&lt;li>前后端业务注册发现&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/ummz3n/1616136796808-e6ed3149-9eed-470a-9087-57aceb2dae5f.webp" alt="">&lt;/p>
&lt;p>中间价已经后端服务在 etcd 中注册，前端和中间价可以很轻松的从 etcd 中发现相关服务器然后服务器之间根据调用关系相关绑定调用&lt;/p>
&lt;ul>
&lt;li>多组后端服务器注册发现&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/ummz3n/1616136796829-3feff5ec-d633-4d98-94c9-586dff97110b.webp" alt="">&lt;/p>
&lt;p>后端多个无状态相同副本的 app 可以同事注册到 etcd 中，前端可以通过 haproxy 从 etcd 中获取到后端的 ip 和端口组，然后进行请求转发，可以用来故障转移屏蔽后端端口已经后端多组 app 实例。&lt;/p>
&lt;h2 id="32-消息发布与订阅">3.2 消息发布与订阅&lt;a class="td-heading-self-link" href="#32-%e6%b6%88%e6%81%af%e5%8f%91%e5%b8%83%e4%b8%8e%e8%ae%a2%e9%98%85" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/ummz3n/1616136796813-0167a273-8ea1-4594-84d6-7453ecaafbda.webp" alt="">&lt;/p>
&lt;p>etcd 可以充当消息中间件，生产者可以往 etcd 中注册 topic 并发送消息，消费者从 etcd 中订阅 topic，来获取生产者发送至 etcd 中的消息。&lt;/p>
&lt;h2 id="33-负载均衡">3.3 负载均衡&lt;a class="td-heading-self-link" href="#33-%e8%b4%9f%e8%bd%bd%e5%9d%87%e8%a1%a1" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/ummz3n/1616136796852-c515c4de-effd-4a85-b3e6-67aa0ff98665.webp" alt="">&lt;/p>
&lt;p>后端多组相同的服务提供者可以经自己服务注册到 etcd 中，etcd 并且会与注册的服务进行监控检查，服务请求这首先从 etcd 中获取到可用的服务提供者真正的 ip:port，然后对此多组服务发送请求，etcd 在其中充当了负载均衡的功能&lt;/p>
&lt;h2 id="34-分部署通知与协调">3.4 分部署通知与协调&lt;a class="td-heading-self-link" href="#34-%e5%88%86%e9%83%a8%e7%bd%b2%e9%80%9a%e7%9f%a5%e4%b8%8e%e5%8d%8f%e8%b0%83" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/ummz3n/1616136796815-22640fce-a1d8-4364-bfbc-f138d85a04df.webp" alt="">&lt;/p>
&lt;ul>
&lt;li>当 etcd watch 服务发现丢失，会通知服务检查&lt;/li>
&lt;li>控制器向 etcd 发送启动服务，etcd 通知服务进行相应操作&lt;/li>
&lt;li>当服务完成 work 会讲状态更新至 etcd，etcd 对应会通知用户&lt;/li>
&lt;/ul>
&lt;h2 id="35-分布式锁">3.5 分布式锁&lt;a class="td-heading-self-link" href="#35-%e5%88%86%e5%b8%83%e5%bc%8f%e9%94%81" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/ummz3n/1616136796823-f19aa84e-8a3e-4e0a-85f2-a464b8faf1e6.webp" alt="">&lt;/p>
&lt;p>当有多个竞争者 node 节点，etcd 作为总控，在分布式集群中与一个节点成功分配 lock&lt;/p>
&lt;h2 id="36-分布式队列">3.6 分布式队列&lt;a class="td-heading-self-link" href="#36-%e5%88%86%e5%b8%83%e5%bc%8f%e9%98%9f%e5%88%97" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/ummz3n/1616136796858-7ab4d693-a873-4932-b5c2-74fe5cb92fe8.webp" alt="">&lt;/p>
&lt;p>有对个 node，etcd 根据每个 node 来创建对应 node 的队列，根据不同的队列可以在 etcd 中找到对应的 competitor&lt;/p>
&lt;h2 id="37-集群与监控与-leader-选举">3.7 集群与监控与 Leader 选举&lt;a class="td-heading-self-link" href="#37-%e9%9b%86%e7%be%a4%e4%b8%8e%e7%9b%91%e6%8e%a7%e4%b8%8e-leader-%e9%80%89%e4%b8%be" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/ummz3n/1616136796814-3cb985e2-3fb5-4778-b8d7-06453c189268.webp" alt="">&lt;/p>
&lt;p>etcd 可以根据 raft 算法在多个 node 节点来选举出 leader&lt;/p>
&lt;h1 id="重大变化">重大变化&lt;a class="td-heading-self-link" href="#%e9%87%8d%e5%a4%a7%e5%8f%98%e5%8c%96" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>2022 年 8 月 22 日
众所周知，etcd 是 Kubernetes 的核心组件之一，同时它也被大量其他的开源项目所依赖，比如 Apache APISIX 也是使用 etcd 作为其默认的数据存储的。
但是 etcd 最早的两个维护者，基本上都由于工作变动的原因已经不在 etcd 项目中积极活跃了。后来社区中剩余的一些贡献者开始承担起了该项目的维护工作。
在几个月之前，etcd 项目现有的维护者们，由于难以达到大多数人的同意，也发起了一次社区治理方案的调整，在决策时改成了惰性共识 &lt;a href="https://github.com/etcd-io/etcd/pull/14053">https://github.com/etcd-io/etcd/pull/14053&lt;/a>
当前 CNCF TOC 正在讨论 etcd 项目的健康度问题，也许我们可以做点什么，让这个项目变的更好。&lt;/p></description></item><item><title>Docs: MySQL</title><link>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE/MySQL/MySQL/</link><pubDate>Mon, 26 Sep 2022 08:32:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE/MySQL/MySQL/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.mysql.com/">官网&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>MySQL 的社区版本 MariaDB ，使用安装 MySQL 的 时候，会自动安装 MariaDB 。同时安装 mariadb-server ，即可开始使用了&lt;/p>
&lt;h1 id="mysql-关联文件与配置">MySQL 关联文件与配置&lt;a class="td-heading-self-link" href="#mysql-%e5%85%b3%e8%81%94%e6%96%87%e4%bb%b6%e4%b8%8e%e9%85%8d%e7%bd%ae" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;strong>/etc/my.cnf&lt;/strong> # MariaDB 基础配置文件&lt;/p>
&lt;p>&lt;strong>/var/lib/myql/&lt;/strong> # 数据存储路径&lt;/p>
&lt;h1 id="mysql-数据类型">MySQL 数据类型&lt;a class="td-heading-self-link" href="#mysql-%e6%95%b0%e6%8d%ae%e7%b1%bb%e5%9e%8b" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>MySQL 中定义数据字段的类型对你数据库的优化是非常重要的。
MySQL 支持多种类型，大致可以分为三类：数值、日期/时间和字符串(字符)类型。&lt;/p>
&lt;h2 id="数值类型">数值类型&lt;a class="td-heading-self-link" href="#%e6%95%b0%e5%80%bc%e7%b1%bb%e5%9e%8b" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>MySQL 支持所有标准 SQL 数值数据类型。&lt;/p>
&lt;p>这些类型包括严格数值数据类型(INTEGER、SMALLINT、DECIMAL 和 NUMERIC)，以及近似数值数据类型(FLOAT、REAL 和 DOUBLE PRECISION)。&lt;/p>
&lt;p>关键字 INT 是 INTEGER 的同义词，关键字 DEC 是 DECIMAL 的同义词。&lt;/p>
&lt;p>BIT 数据类型保存位字段值，并且支持 MyISAM、MEMORY、InnoDB 和 BDB 表。&lt;/p>
&lt;p>作为 SQL 标准的扩展，MySQL 也支持整数类型 TINYINT、MEDIUMINT 和 BIGINT。下面的表显示了需要的每个整数类型的存储和范围。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>类型&lt;/th>
&lt;th>大小&lt;/th>
&lt;th>范围（有符号）&lt;/th>
&lt;th>范围（无符号）&lt;/th>
&lt;th>用途&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>TINYINT&lt;/td>
&lt;td>1 byte&lt;/td>
&lt;td>(-128，127)&lt;/td>
&lt;td>(0，255)&lt;/td>
&lt;td>小整数值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>SMALLINT&lt;/td>
&lt;td>2 bytes&lt;/td>
&lt;td>(-32 768，32 767)&lt;/td>
&lt;td>(0，65 535)&lt;/td>
&lt;td>大整数值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>MEDIUMINT&lt;/td>
&lt;td>3 bytes&lt;/td>
&lt;td>(-8 388 608，8 388 607)&lt;/td>
&lt;td>(0，16 777 215)&lt;/td>
&lt;td>大整数值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>INT 或 INTEGER&lt;/td>
&lt;td>4 bytes&lt;/td>
&lt;td>(-2 147 483 648，2 147 483 647)&lt;/td>
&lt;td>(0，4 294 967 295)&lt;/td>
&lt;td>大整数值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>BIGINT&lt;/td>
&lt;td>8 bytes&lt;/td>
&lt;td>(-9,223,372,036,854,775,808，9 223 372 036 854 775 807)&lt;/td>
&lt;td>(0，18 446 744 073 709 551 615)&lt;/td>
&lt;td>极大整数值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>FLOAT&lt;/td>
&lt;td>4 bytes&lt;/td>
&lt;td>(-3.402 823 466 E+38，-1.175 494 351 E-38)，0，(1.175 494 351 E-38，3.402 823 466 351 E+38)&lt;/td>
&lt;td>0，(1.175 494 351 E-38，3.402 823 466 E+38)&lt;/td>
&lt;td>单精度&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>浮点数值&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>DOUBLE&lt;/td>
&lt;td>8 bytes&lt;/td>
&lt;td>(-1.797 693 134 862 315 7 E+308，-2.225 073 858 507 201 4 E-308)，0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)&lt;/td>
&lt;td>0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)&lt;/td>
&lt;td>双精度&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>浮点数值&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>DECIMAL&lt;/td>
&lt;td>对 DECIMAL(M,D) ，如果 M&amp;gt;D，为 M+2 否则为 D+2&lt;/td>
&lt;td>依赖于 M 和 D 的值&lt;/td>
&lt;td>依赖于 M 和 D 的值&lt;/td>
&lt;td>小数值&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="日期和时间类型">日期和时间类型&lt;a class="td-heading-self-link" href="#%e6%97%a5%e6%9c%9f%e5%92%8c%e6%97%b6%e9%97%b4%e7%b1%bb%e5%9e%8b" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>表示时间值的日期和时间类型为 DATETIME、DATE、TIMESTAMP、TIME 和 YEAR。&lt;/p>
&lt;p>每个时间类型有一个有效值范围和一个&amp;quot;零&amp;quot;值，当指定不合法的 MySQL 不能表示的值时使用&amp;quot;零&amp;quot;值。&lt;/p>
&lt;p>TIMESTAMP 类型有专有的自动更新特性，将在后面描述。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>类型&lt;/th>
&lt;th>大小( bytes)&lt;/th>
&lt;th>范围&lt;/th>
&lt;th>格式&lt;/th>
&lt;th>用途&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>DATE&lt;/td>
&lt;td>3&lt;/td>
&lt;td>1000-01-01/9999-12-31&lt;/td>
&lt;td>YYYY-MM-DD&lt;/td>
&lt;td>日期值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>TIME&lt;/td>
&lt;td>3&lt;/td>
&lt;td>&amp;lsquo;-838:59:59&amp;rsquo;/&amp;lsquo;838:59:59&amp;rsquo;&lt;/td>
&lt;td>HH:MM:SS&lt;/td>
&lt;td>时间值或持续时间&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>YEAR&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1901/2155&lt;/td>
&lt;td>YYYY&lt;/td>
&lt;td>年份值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>DATETIME&lt;/td>
&lt;td>8&lt;/td>
&lt;td>1000-01-01 00:00:00/9999-12-31 23:59:59&lt;/td>
&lt;td>YYYY-MM-DD HH:MM:SS&lt;/td>
&lt;td>混合日期和时间值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>TIMESTAMP&lt;/td>
&lt;td>4&lt;/td>
&lt;td>1970-01-01 00:00:00/2038&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>结束时间是第 2147483647 秒，北京时间 2038-1-19 11:14:07，格林尼治时间 2038 年 1 月 19 日 凌晨 03:14:07&lt;/td>
&lt;td>YYYYMMDD HHMMSS&lt;/td>
&lt;td>混合日期和时间值，时间戳&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="字符串类型">字符串类型&lt;a class="td-heading-self-link" href="#%e5%ad%97%e7%ac%a6%e4%b8%b2%e7%b1%bb%e5%9e%8b" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>字符串类型指 CHAR、VARCHAR、BINARY、VARBINARY、BLOB、TEXT、ENUM 和 SET。该节描述了这些类型如何工作以及如何在查询中使用这些类型。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>类型&lt;/th>
&lt;th>大小&lt;/th>
&lt;th>用途&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>CHAR&lt;/td>
&lt;td>0-255 bytes&lt;/td>
&lt;td>定长字符串&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>VARCHAR&lt;/td>
&lt;td>0-65535 bytes&lt;/td>
&lt;td>变长字符串&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>TINYBLOB&lt;/td>
&lt;td>0-255 bytes&lt;/td>
&lt;td>不超过 255 个字符的二进制字符串&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>TINYTEXT&lt;/td>
&lt;td>0-255 bytes&lt;/td>
&lt;td>短文本字符串&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>BLOB&lt;/td>
&lt;td>0-65 535 bytes&lt;/td>
&lt;td>二进制形式的长文本数据&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>TEXT&lt;/td>
&lt;td>0-65 535 bytes&lt;/td>
&lt;td>长文本数据&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>MEDIUMBLOB&lt;/td>
&lt;td>0-16 777 215 bytes&lt;/td>
&lt;td>二进制形式的中等长度文本数据&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>MEDIUMTEXT&lt;/td>
&lt;td>0-16 777 215 bytes&lt;/td>
&lt;td>中等长度文本数据&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>LONGBLOB&lt;/td>
&lt;td>0-4 294 967 295 bytes&lt;/td>
&lt;td>二进制形式的极大文本数据&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>LONGTEXT&lt;/td>
&lt;td>0-4 294 967 295 bytes&lt;/td>
&lt;td>极大文本数据&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>注意：char(n) 和 varchar(n) 中括号中 n 代表字符的个数，并不代表字节个数，比如 CHAR(30) 就可以存储 30 个字符。&lt;/p>
&lt;p>CHAR 和 VARCHAR 类型类似，但它们保存和检索的方式不同。它们的最大长度和是否尾部空格被保留等方面也不同。在存储或检索过程中不进行大小写转换。&lt;/p>
&lt;p>BINARY 和 VARBINARY 类似于 CHAR 和 VARCHAR，不同的是它们包含二进制字符串而不要非二进制字符串。也就是说，它们包含字节字符串而不是字符字符串。这说明它们没有字符集，并且排序和比较基于列值字节的数值值。&lt;/p>
&lt;p>BLOB 是一个二进制大对象，可以容纳可变数量的数据。有 4 种 BLOB 类型：TINYBLOB、BLOB、MEDIUMBLOB 和 LONGBLOB。它们区别在于可容纳存储范围不同。&lt;/p>
&lt;p>有 4 种 TEXT 类型：TINYTEXT、TEXT、MEDIUMTEXT 和 LONGTEXT。对应的这 4 种 BLOB 类型，可存储的最大长度不同，可根据实际情况选择。&lt;/p>
&lt;h1 id="连接-mysql">连接 MySQL&lt;a class="td-heading-self-link" href="#%e8%bf%9e%e6%8e%a5-mysql" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="常见问题">常见问题&lt;a class="td-heading-self-link" href="#%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="access-denied-for-user-usernameip-using-password-yesno">Access denied for user &amp;lsquo;USERNAME&amp;rsquo;@&amp;lsquo;IP&amp;rsquo; (using password: YES/NO)&lt;a class="td-heading-self-link" href="#access-denied-for-user-usernameip-using-password-yesno" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>尝试使用 USERNAME 用户在 IP:3306 上访问数据库，但&lt;strong>提供了错误的密码/未提供密码&lt;/strong>，因此拒绝访问&lt;/p>
&lt;p>这俩的 using password 表示是否输入了密码，YES 表示输入了，NO 表示没输入&lt;/p></description></item><item><title>Docs: Loki</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Logs/Loki/Loki/</link><pubDate>Sun, 12 Jun 2022 12:01:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Logs/Loki/Loki/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/grafana/loki">GitHub 项目，grafana/loki&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/fundamentals/overview/">官方文档，基础-概述&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.qikqiak.com/post/grafana-loki-usage/">阳明博客&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.zhihu.com/people/quchenyuan/posts">知乎文章&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://wsgzao.github.io/post/loki/">https://wsgzao.github.io/post/loki/&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Loki 是受 Prometheus 启发的水平可扩展，高度可用的多租户日志聚合系统。它的设计具有很高的成本效益，并且易于操作。它不索引日志的内容，而是为每个日志流设置一组标签。
与其他日志聚合系统相比，Loki 有以下特点：&lt;/p>
&lt;ul>
&lt;li>不对日志进行全文本索引。通过存储压缩的，非结构化的日志以及仅索引元数据，Loki 更加易于操作且运行成本更低。&lt;/li>
&lt;li>使用与 Prometheus 相同的标签对日志流进行索引和分组，从而使您能够使用与 Prometheus 相同的标签在指标和日志之间无缝切换。&lt;/li>
&lt;li>特别适合存储 Kubernetes Pod 日志。诸如 Pod 标签之类的元数据会自动被抓取并建立索引。&lt;/li>
&lt;li>在 Grafana 中具有本机支持（需要 Grafana v6.0）。&lt;/li>
&lt;/ul>
&lt;p>基于 Loki 的日志包含 3 个程序：&lt;/p>
&lt;ul>
&lt;li>Loki 是主服务器，负责存储日志和处理查询。&lt;/li>
&lt;li>Client Agent 客户端代理，负责收集日志并将其发送给 Loki。promtail 是其中一种 agent，是 loki 原配。&lt;/li>
&lt;li>Grafana 用于查询和显示日志。&lt;/li>
&lt;/ul>
&lt;p>Loki 像 Prometheus 一样，但是是用于处理日志的：我们更喜欢基于多维标签的索引方法，并且希望使用没有依赖关系的单一二进制，易于操作的系统。Loki 与 Prometheus 的不同之处在于，它侧重于日志而不是指标，并通过推送而不是拉取交付日志。&lt;/p>
&lt;blockquote>
&lt;p>Loki 与 Promtail 加一起才相当于 Prometheus，因为 Promtail 是发现目标，采集日志的程序。然后主动 Push 给 Loki，由 Loki 存储日志数据。
而 Promtheus，可以自己发现目标，采集指标，存储指标。&lt;/p>
&lt;/blockquote>
&lt;h2 id="loki-observability可观察性">Loki Observability(可观察性)&lt;a class="td-heading-self-link" href="#loki-observability%e5%8f%af%e8%a7%82%e5%af%9f%e6%80%a7" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/operations/observability/">官方文档，运维-可观测性&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Loki 和 Promtail 都在 &lt;code>/metrics&lt;/code> 端点上公开了指标，该端点暴露了 &lt;a href="docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/OpenMetrics.md">OpenMetrics&lt;/a> 格式的指标。&lt;/p>
&lt;p>Loki 存储库具有一个&lt;a href="https://github.com/grafana/loki/tree/main/production/loki-mixin">混合包&lt;/a>，其中包括一组仪表板，记录规则和警报。总之，mixin 为您提供了一个全面的软件包，用于监视生产中的 Loki。&lt;/p>
&lt;p>有关 mixin 的更多信息，请参阅 &lt;a href="https://github.com/monitoring-mixins/docs">monitoring-mixins 项目&lt;/a> 的文档 。&lt;/p>
&lt;h2 id="multi-tenancy多租户">Multi Tenancy(多租户)&lt;a class="td-heading-self-link" href="#multi-tenancy%e5%a4%9a%e7%a7%9f%e6%88%b7" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Loki 支持多租户，以使租户之间的数据完全分离。当 Loki 在多租户模式下运行时，所有数据（包括内存和长期存储中的数据）都由租户 ID 分区，该租户 ID 是从请求中的 &lt;code>X-Scope-OrgID&lt;/code> HTTP 头中提取的。当 Loki 不在多租户模式下时，将忽略 Header 头，并将租户 ID 设置为 &lt;code>fake&lt;/code>，这将显示在索引和存储的块中。&lt;/p>
&lt;h1 id="loki-架构概述">Loki 架构概述&lt;a class="td-heading-self-link" href="#loki-%e6%9e%b6%e6%9e%84%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/fundamentals/architecture/">官方文档，基础 - 架构&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Loki 由多个组件组成，每个组件都可以实现特定的功能：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>写入日志数据&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>Distributor(分配器)&lt;/strong> # 对应 distributor 组件。负责处理客户端写入的日志，它是日志数据写入路径中的&lt;strong>第一站&lt;/strong>，一旦 Distributor 收到日志数据，会将其拆分为多个批次，然后并行发送给一个或多个 Ingester&lt;/li>
&lt;li>&lt;strong>Ingester(摄取器)&lt;/strong> # 对应 ingester 组件。负责将日志数据写入 本地文件系统 或 指定的存储后端(DynamoDB、S3、Cassandra 等)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>读取日志数据&lt;/strong>，处理 LogQL 请求
&lt;ul>
&lt;li>&lt;strong>Querier(查询器)&lt;/strong> # 对应 querier 组件。接收客户端发送的 LogQL 请求并从定的存储中查询日志数据并返回给客户端&lt;/li>
&lt;li>&lt;strong>Query Frontend(查询前端)&lt;/strong> # 对应 query-frontend 组件。为 Querier 组件提供负载均衡功能。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>其他&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>Table Manager 表管理器)&lt;/strong> # 对应 table-manager 组件。负责所有数据中，Table 的维护工作。根据配置文件中 schema_config.configs 字段中的相关配置，在指定时间开始之前创建周期表，并在根据 table_manager 字段中的相关配置，将数据时间范围超过保留期的数据删除。&lt;/li>
&lt;li>&lt;strong>Compactor(压缩器)&lt;/strong> # 2.6 版本时，Compactor 组件被设置为默认的用来实现数据保留功能的组件，暂时只支持 boltdb-shipper。准备要代替 table-manager 组件。&lt;/li>
&lt;li>&lt;strong>Ruler(规则管理器)&lt;/strong> # 对应 ruler 组件。从存储中读取数据，根据规则发送给告警处理程序。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>loki 二进制文件的设计方式与 thanos 非常类似，都是在单一二进制文件中，可以运行指定的一个或多个组件。&lt;/p>
&lt;p>Loki 内部将组件称为 &lt;strong>Modules(模块)&lt;/strong>。如果想要运行指定的模块，有两种方式：&lt;/p>
&lt;ul>
&lt;li>命令行标志 # loki 二进制文件的 &lt;code>-target&lt;/code> 命令行标志&lt;/li>
&lt;li>配置文件 # 配置文件中的 &lt;code>target&lt;/code> 字段。&lt;/li>
&lt;/ul>
&lt;p>target 可用的值有：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>all&lt;/strong> # 表示 Loki 将以 Monolithic 架构运行，这也是默认的运行方式。Monolithic 模式非常适合测试或运行一个小规模的 Loki；而 Microservices 架构则提供了 Loki 的水平扩展性。&lt;/li>
&lt;li>&lt;strong>read&lt;/strong> # 运行 Ingestor 和 Distributor 组件&lt;/li>
&lt;li>&lt;strong>write&lt;/strong> # 运行 Querier、Query frontend、Ruler 组件&lt;/li>
&lt;li>&lt;strong>ingester&lt;/strong> # 只运行 Ingester 组件&lt;/li>
&lt;li>&lt;strong>distributor&lt;/strong> # 只运行 Distributor 组件&lt;/li>
&lt;li>&lt;strong>query-frontend&lt;/strong> # 只运行 Query Frontend 组件&lt;/li>
&lt;li>&lt;strong>query-scheduler&lt;/strong> # 只运行&lt;/li>
&lt;li>&lt;strong>querier&lt;/strong> # 只运行 Querier 组件&lt;/li>
&lt;li>&lt;strong>index-gateway&lt;/strong> # 只运行&lt;/li>
&lt;li>&lt;strong>ruler&lt;/strong> # 只运行 Ruler 组件&lt;/li>
&lt;li>&lt;strong>compactor&lt;/strong> # 只运行 Compactor 组件&lt;/li>
&lt;/ul>
&lt;h2 id="最基本的运行条件">最基本的运行条件&lt;a class="td-heading-self-link" href="#%e6%9c%80%e5%9f%ba%e6%9c%ac%e7%9a%84%e8%bf%90%e8%a1%8c%e6%9d%a1%e4%bb%b6" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>这些组件中，可以和存储直接交互的有 Ingester、Querier、Ruler。&lt;strong>最重要的组件是 Distributor、Ingester、Querier&lt;/strong>这三个，这是 Loki 基本运行的最低要求。&lt;/p>
&lt;p>Distributor 接收客户端(比如 Promtail) 推送的日志，处理后交给 Ingester 转存到本地或对象存储中，Querier 接收 LogQL 查询请求。&lt;/p>
&lt;h2 id="架构分类">架构分类&lt;a class="td-heading-self-link" href="#%e6%9e%b6%e6%9e%84%e5%88%86%e7%b1%bb" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/fundamentals/architecture/deployment-modes/">官方文档，基础 - 架构 - 部署模式&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>作为一个应用程序，Loki 由许多组件微服务构建而成，旨在作为一个可水平扩展的分布式系统运行。Loki 的独特设计将整个分布式系统的代码编译成单个二进制或 Docker 映像。该单个二进制文件的行为由-target 命令行标志控制，并定义了三种操作模式之一。&lt;/p>
&lt;p>Loki 旨在根据需求变化轻松地在不同架构下重新部署集群，无需更改配置或进行最少的配置更改。&lt;/p>
&lt;ul>
&lt;li>Monolithic 架构对于快速开始试验 Loki 以及每天高达约 100GB 的小读/写量非常有用。&lt;/li>
&lt;li>Loki 的简单可扩展部署可以扩展到每天数 TB 甚至更多的日志。&lt;/li>
&lt;li>对于非常大的 Loki 集群或需要对扩展和集群操作进行更多控制的集群，建议使用微服务模式。&lt;/li>
&lt;/ul>
&lt;h3 id="monolithic统一-架构">Monolithic(统一) 架构&lt;a class="td-heading-self-link" href="#monolithic%e7%bb%9f%e4%b8%80-%e6%9e%b6%e6%9e%84" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>这种架构需要通过 loki 二进制文件只启动 1 个进程，使该进程用 &lt;code>-target=all&lt;/code> 以便在一个进程中运行所有组件。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gcp6zx/1660115619129-e6fa2017-8e05-46d7-ab56-207ee3cfc90b.png" alt="image.png">&lt;/p>
&lt;p>这是最经典的模式，早期 Loki 通常都是以这种模式被大家部署。这种模式是 loki 以单个二进制文件运行 Loki 的所有组件，如上图，instance 可以看作一个单独的二进制文件。
Monolithic 模式非常适合于本地开发、小规模等场景，Monolithic 模式可以通过多个进程进行扩展，但有以下限制：&lt;/p>
&lt;ul>
&lt;li>当运行带有多个副本的单体模式时，当前无法使用本地索引和本地存储，因为每个副本必须能够访问相同的存储后端，但是本地存储对于并发访问并不安全。主要是因为 BoltDB 仅允许一个进程在同一时间锁定数据库。如果使用远程存储不受影响。&lt;/li>
&lt;li>各个组件无法独立缩放，因此读取组件的数量不能超过写入组件的数量。&lt;/li>
&lt;/ul>
&lt;p>这个进程产生一个 gRPC 监听(默认 9095 端口)和一个 HTTP 监听(默认 3100 端口)。各个组件内部在同一个进程的共享内存中进行数据交互。&lt;/p>
&lt;h3 id="simple-scalable简单可扩展-架构">Simple scalable(简单可扩展) 架构&lt;a class="td-heading-self-link" href="#simple-scalable%e7%ae%80%e5%8d%95%e5%8f%af%e6%89%a9%e5%b1%95-%e6%9e%b6%e6%9e%84" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>这种架构需要通过 loki 二进制文件至少启动 2 个进程，保证两个进程分别具有 读 和 写 的功能&lt;/p>
&lt;ul>
&lt;li>其中一个进程使用 &lt;code>-target=write&lt;/code> 运行具有写功能的组件，包括 Ingestor 和 Distributor&lt;/li>
&lt;li>另一个进程使用 &lt;code>-target=read&lt;/code> 运行具有读功能的组件，包括 Querier、Query frontend、Ruler&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gcp6zx/1660120707493-6efe2870-f1a3-446f-b760-6f520236c358.png" alt="image.png">&lt;/p>
&lt;p>这种架构将 Loki 的读/写分离。这个图里少了一点，通常来说，5 个 Loki 实例前面还有一个负载均衡设备，用来接收客户端的 读/写请求，以便将请求转发给对应的 Loki 实例。&lt;/p>
&lt;h3 id="microservices微服务-架构">Microservices(微服务)  架构&lt;a class="td-heading-self-link" href="#microservices%e5%be%ae%e6%9c%8d%e5%8a%a1-%e6%9e%b6%e6%9e%84" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>这种架构需要通过 loki 二进制文件至少启动 4 个进程，整套架构由多个单一功能的进程组成&lt;/p>
&lt;ul>
&lt;li>&lt;code>-target=distributor&lt;/code> # 运行分配器&lt;/li>
&lt;li>&lt;code>-target=ingester&lt;/code># 运行摄取器&lt;/li>
&lt;li>&lt;code>-target=querier&lt;/code># 运行查询器&lt;/li>
&lt;li>&lt;code>-target=query-frontend&lt;/code># 运行查询前端&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gcp6zx/1660115629058-db37e36d-3ed5-4bd9-86bc-3fbb05df38d0.png" alt="image.png">&lt;/p>
&lt;p>这种微服务架构与 Thanos 类似，可以通过一个 Loki 的二进制文件，使用子命令来启动不同的功能。&lt;/p>
&lt;ul>
&lt;li>每个组件都产生一个 gRPC 监听(默认 9095 端口)和一个 HTTP 监听(默认 3100 端口)。
&lt;ul>
&lt;li>通常情况下，gRPC 端口用于组件间通信；HTTP 端口用于暴露一些管理 API(比如 指标、运行状态、就绪性)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>各个组件可以暴露的 HTTP API 详见 &lt;a href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Logs/Loki/Loki%20API.md">Loki API&lt;/a> 笔记。通过 API，我们可以更清晰得了解到，每个组件可以实现的具体功能&lt;/li>
&lt;li>各个组件通过 memberlist 统一到一个哈希环上，以互相发现。当我们部署在 K8S 中时，将会配置 &lt;code>memberlist.join_members&lt;/code> 字段，并且需要创建对应的 service 资源，service 的 endpoint 将会关联到所有 Distributor、Ingester、Querier 组件。&lt;/li>
&lt;/ul>
&lt;h3 id="gateway网关">Gateway(网关)&lt;a class="td-heading-self-link" href="#gateway%e7%bd%91%e5%85%b3" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>在我们使用 Simple scalable 和 Microservices 这两种架构时，通常会使用一个 &lt;code>loki-gateway&lt;/code> ，这是一个 Nginx，配置很简单：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">http&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">server&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">listen&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">8080&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">location&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">/&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">200&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;OK&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">auth_basic&lt;/span> &lt;span style="color:#000">off&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">......略&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">location&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">/loki/api/v1/push&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">set&lt;/span> &lt;span style="color:#000">$loki_api_v1_push_backend&lt;/span> &lt;span style="color:#4e9a06">http://loki-loki-distributed-distributor.logging.svc.cluster.local&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">proxy_pass&lt;/span> &lt;span style="color:#000">$loki_api_v1_push_backend:3100$request_uri&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">location&lt;/span> &lt;span style="color:#000;font-weight:bold">~&lt;/span> &lt;span style="color:#4e9a06">/loki/api/.*&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">set&lt;/span> &lt;span style="color:#000">$loki_api_backend&lt;/span> &lt;span style="color:#4e9a06">http://loki-loki-distributed-query-frontend.logging.svc.cluster.local&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">proxy_pass&lt;/span> &lt;span style="color:#000">$loki_api_backend:3100$request_uri&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到，这个 &lt;code>loki-gateway&lt;/code> 用来为 Loki 进行读/写分离的。loki-gateway 会根据客户端发起请求的 URL 判断这个请求应该由哪个组件进行处理。&lt;/p>
&lt;p>Nginx 的配置依据两种架构的不同而有细微区别，但是总归是需要一个 Gateway 的。不管是 Promtail 推送数据，还是客户端查询数据，都可以先经过 loki-gateway&lt;/p>
&lt;h2 id="数据写入路径">数据写入路径&lt;a class="td-heading-self-link" href="#%e6%95%b0%e6%8d%ae%e5%86%99%e5%85%a5%e8%b7%af%e5%be%84" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gcp6zx/1660123438275-02b6febb-0f26-431b-9450-9b5f6f125305.png" alt="image.png">&lt;/p>
&lt;p>整体的日志写入路径如下所示：&lt;/p>
&lt;ul>
&lt;li>&lt;code>Distributor&lt;/code> 收到一个 HTTP 请求，以存储流的数据。&lt;/li>
&lt;li>每个流都使用哈希环进行哈希操作。&lt;/li>
&lt;li>&lt;code>Distributor&lt;/code> 将每个流发送到合适的 &lt;code>Ingester&lt;/code> 和他们的副本（基于配置的复制因子）。&lt;/li>
&lt;li>每个 &lt;code>Ingester&lt;/code> 将为日志流数据创建一个块或附加到一个现有的块上。每个租户和每个标签集的块是唯一的。&lt;/li>
&lt;li>&lt;code>Distributor&lt;/code> 通过 HTTP 连接响应一个成功代码。&lt;/li>
&lt;/ul>
&lt;h2 id="数据读取路径">数据读取路径&lt;a class="td-heading-self-link" href="#%e6%95%b0%e6%8d%ae%e8%af%bb%e5%8f%96%e8%b7%af%e5%be%84" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gcp6zx/1660118903925-bca6ba6b-f991-4a28-a407-9c6febb38a36.png" alt="image.png">&lt;/p>
&lt;p>日志读取路径的流程如下所示：&lt;/p>
&lt;ul>
&lt;li>&lt;code>Querier&lt;/code> 收到一个对数据的 HTTP 请求。&lt;/li>
&lt;li>&lt;code>Querier&lt;/code> 将查询传递给所有 &lt;code>Ingesters&lt;/code> 以获取内存数据。&lt;/li>
&lt;li>&lt;code>Ingesters&lt;/code> 收到读取请求，并返回与查询相匹配的数据（如果有的话）。&lt;/li>
&lt;li>如果没有 &lt;code>Ingesters&lt;/code> 返回数据，查询器会从后端存储(比如 S3)加载数据，并对其运行查询。&lt;/li>
&lt;li>查询器对所有收到的数据进行迭代和重复计算，通过 HTTP 连接返回最后一组数据。&lt;/li>
&lt;/ul>
&lt;h1 id="loki-主要组件概述">Loki 主要组件概述&lt;a class="td-heading-self-link" href="#loki-%e4%b8%bb%e8%a6%81%e7%bb%84%e4%bb%b6%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gcp6zx/1621238613211-cedcd7da-602a-4c15-9b27-dbcb797317d8.png" alt="">&lt;/p>
&lt;h2 id="distributor分配器">Distributor(分配器)&lt;a class="td-heading-self-link" href="#distributor%e5%88%86%e9%85%8d%e5%99%a8" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Distributor 服务负责处理客户端写入的日志，它本质上是日志数据写入路径中的&lt;strong>第一站&lt;/strong>，一旦 Distributor 收到日志数据，会将其拆分为多个批次，然后并行发送给多个 Ingester。&lt;/p>
&lt;p>Distributor 通过 gRPC 与 Ingester 通信，它们都是无状态的，可以根据需要扩大或缩小规模。&lt;/p>
&lt;h2 id="ingester摄取器">Ingester(摄取器)&lt;a class="td-heading-self-link" href="#ingester%e6%91%84%e5%8f%96%e5%99%a8" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Ingester 服务负责将日志数据写入长期存储后端（DynamoDB、S3、Cassandra 等）。此外 Ingester 会验证摄取的日志行是按照时间戳递增的顺序接收的（即每条日志的时间戳都比前面的日志晚一些），当 Ingester 收到不符合这个顺序的日志时，该日志行会被拒绝并返回一个错误。&lt;/p>
&lt;p>注意：虽然 Ingester 支持 BoltDB 写入本地文件系统，但是这仅适用于[单进程模式](/docs/6.可观测性/日志系统/Loki/Loki%20 部署.md 部署.md)，因为 Querier 也需要访问相同的存储，而 BoltDB 仅允许一个进程在同一时间锁定数据库。&lt;/p>
&lt;h2 id="querier查询器">Querier(查询器)&lt;a class="td-heading-self-link" href="#querier%e6%9f%a5%e8%af%a2%e5%99%a8" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Querier(查询器) 使用 LogQL 处理查询，从 Ingesters 和长期存储中获取日志。&lt;/p>
&lt;h2 id="query-frontend查询前端">Query Frontend(查询前端)&lt;a class="td-heading-self-link" href="#query-frontend%e6%9f%a5%e8%af%a2%e5%89%8d%e7%ab%af" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Query Frontend(查询前端) 是一个可选的组件。当 Loki 以微服务架构运行时，且存在多个 Querier(查询器)，则查询前端可以平均得调度 LogQL 请求到查询器上，说白了就是实现负载均衡的效果。并且查询前端还可以并行处理请求、并缓存这些数据。&lt;/p>
&lt;h1 id="loki-关联文件与配置">Loki 关联文件与配置&lt;a class="td-heading-self-link" href="#loki-%e5%85%b3%e8%81%94%e6%96%87%e4%bb%b6%e4%b8%8e%e9%85%8d%e7%bd%ae" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;strong>/etc/loki/local-config.yaml&lt;/strong> # loki 程序运行时默认配置文件&lt;/p>
&lt;p>&lt;strong>${StorageConfig}/index&lt;/strong> # loki 的 BoltDB 中存储索引数据保存路径，无默认值，根据配置文件中 &lt;code>.strorage_confg.boltdb.directory&lt;/code> 字段指定。&lt;/p>
&lt;p>&lt;strong>${StorageConfig}/chunks&lt;/strong> # loki 的 chunks(块) 存储数据保存路径，无默认值，根据配置文件中 &lt;code>.strorage_confg.filesystem.directory&lt;/code> 字段指定。&lt;/p>
&lt;h1 id="loki-与其他日志系统相比">Loki 与其他日志系统相比&lt;a class="td-heading-self-link" href="#loki-%e4%b8%8e%e5%85%b6%e4%bb%96%e6%97%a5%e5%bf%97%e7%b3%bb%e7%bb%9f%e7%9b%b8%e6%af%94" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>官方文档：&lt;a href="https://grafana.com/docs/loki/latest/fundamentals/overview/comparisons/">https://grafana.com/docs/loki/latest/fundamentals/overview/comparisons/&lt;/a>&lt;/p>
&lt;p>Loki / Promtail / Grafana vs EFK&lt;/p>
&lt;p>EFK（Elasticsearch，Fluentd，Kibana）堆栈用于从各种来源提取，可视化和查询日志。&lt;/p>
&lt;p>Elasticsearch 中的数据作为非结构化 JSON 对象存储在磁盘上。每个对象的键和每个键的内容都被索引。然后可以使用 JSON 对象或定义为 Lucene 的查询语言来查询数据以定义查询（称为查询 DSL）。&lt;/p>
&lt;p>相比之下，Loki 在单二进制模式下可以将数据存储在磁盘上，但是在水平可伸缩模式下，数据存储在诸如 S3，GCS 或 Cassandra 之类的云存储系统中。日志以纯文本格式存储，并带有一组标签名称和值，其中仅对标签对进行索引。这种折衷使得它比全索引更便宜，并且允许开发人员从其应用程序积极地进行日志记录。使用 LogQL 查询 Loki 中的日志。但是，由于这种设计上的折衷，基于内容（即日志行中的文本）进行过滤的 LogQL 查询需要加载搜索窗口中与查询中定义的标签匹配的所有块。&lt;/p>
&lt;p>Fluentd 通常用于收集日志并将其转发到 Elasticsearch。Fluentd 被称为数据收集器，它可以从许多来源提取日志，对其进行处理，然后将其转发到一个或多个目标。&lt;/p>
&lt;p>相比之下，Promtail 的用例专门针对 Loki 量身定制。它的主要操作模式是发现存储在磁盘上的日志文件，并将与一组标签关联的日志文件转发给 Loki。Promtail 可以为与 Promtail 在同一节点上运行的 Kubernetes Pod 进行服务发现，充当容器边车或 Docker 日志记录驱动程序，从指定的文件夹中读取日志并尾随系统日志。&lt;/p>
&lt;p>Loki 用一组标签对表示日志的方式类似于 Prometheus 表示度量的方式。当与 Prometheus 一起部署在环境中时，由于使用相同的服务发现机制，Promtail 的日志通常具有与应用程序指标相同的标签。具有相同级别的日志和指标使用户可以在指标和日志之间无缝地进行上下文切换，从而有助于根本原因分析。&lt;/p>
&lt;p>Kibana 用于可视化和搜索 Elasticsearch 数据，并且在对该数据进行分析时非常强大。Kibana 提供了许多可视化工具来进行数据分析，例如位置图，用于异常检测的机器学习以及用于发现数据关系的图形。可以将警报配置为在发生意外情况时通知用户。&lt;/p>
&lt;p>相比之下，Grafana 专门针对来自 Prometheus 和 Loki 等来源的时间序列数据量身定制。可以设置仪表板以可视化指标（即将提供日志支持），并且可以使用浏览视图对数据进行临时查询。与 Kibana 一样，Grafana 支持根据您的指标进行警报。&lt;/p>
&lt;ul>
&lt;li>kibana 启动速度比 grafana 慢了 10 倍&lt;/li>
&lt;li>es 启动时，内存使用达到 1.5G，后续存储同样内容的情况下，es 内存使用率 1G 多，loki 内存使用率 200 多 M&lt;/li>
&lt;li>promtail 使用 yaml 作为 配置文件格式，与 prom 配置逻辑一致。fluentd 配置文件格式类似 html&lt;/li>
&lt;li>grafana 页面可以直接通过标签用鼠标点击过滤。kibana 则需要输入内容。&lt;/li>
&lt;/ul></description></item><item><title>Docs: Kustomize</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86/Kustomize/Kustomize/</link><pubDate>Tue, 12 Oct 2021 16:08:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86/Kustomize/Kustomize/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/kubernetes-sigs/kustomize">GitHub 项目，kubernetes-sigs/kustomize&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kustomize.io/">官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/docs/tasks/manage-kubernetes-objects/kustomization/">官方文档,任务-管理 K8S 对象-使用 Kustomize 对 Kubernetes 对象进行声明式管理&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Kustomize 是一个通过 Kustomization 文件来管理 Manifests 的应用程序，Manifests 就是用来生成 K8S 对象的 YAML 格式的文件。Kustomize 可以让我们自定义原始的，无模板的 YAML 文件，以用于多种用途，而原始的 YAML 则保持不变并可以使用。&lt;/p>
&lt;p>从 K8S 的 1.14 版本开始，Kustomize 被集成在 kubectl 工具中，可以通过下面几种方式来使用 Kustomize&lt;/p>
&lt;ul>
&lt;li>kustomize 子命令&lt;/li>
&lt;li>-k,&amp;ndash;kustomize 标志来代替 kubectl apply 命令中的 -f 标志。
&lt;ul>
&lt;li>比如 kubectl apply -k &amp;lt;KustomizationDIR&amp;gt;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Kustomize 与 Helm 非常类似，都可以用来渲染声明 Kubernetes 资源的 Manifests 文件，并部署到集群中，只不过，Kustomize 更轻便，更易用，但是，不像 Helm，并不能包装成 Chart 并统一上传到仓库中。&lt;/p>
&lt;h2 id="kustomization">Kustomization&lt;a class="td-heading-self-link" href="#kustomization" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Kustomize 就是通过 Kustomization 实现其功能的。Kustomization 有多种理解方式：&lt;/p>
&lt;ul>
&lt;li>一个名为 kustomization.yaml 的文件&lt;/li>
&lt;li>包含 kustomization.yaml 文件的目录&lt;/li>
&lt;li>当然，也可以直接用 Kustomization 来表示 Kustomize&lt;/li>
&lt;/ul>
&lt;p>在不同环境中，Kustomization 可以有不同的含义。&lt;/p>
&lt;p>Kustomization 目录的概念，与 Helm 的 Chart 概念类似，是一组用于描述一个应用的 Manifests 文件的集合，并且包含一个 kustomization.yaml 文件来定义如何组织这些 Manifests 文件。而 kustomization.yaml 文件，就是一个 YAML 格式的文件，Kustomize 也继承了 Kubernetes 的哲学，一切介资源，只不过，现阶段 Kustomize 只有一个资源，就是 &lt;code>kustomize.config.k8s.io/v1beta1&lt;/code> 下的 &lt;strong>Kustomization 资源&lt;/strong>。应用一个 Kustomization 资源，实际上就是声明了一个应用。&lt;/p>
&lt;p>除了下面的&lt;a href="#%E5%9F%BA%E6%9C%AC%E7%A4%BA%E4%BE%8B">基本使用示例&lt;/a>以外，Kustomize 还可以通过配置文件来自动生成 configMap、secret 等资源，通过层次结构来基于某个应用模板定义个性化的内容，为每个资源添加统一的标签或者注释，等等等一系列非常好用的应用管理功能。&lt;/p>
&lt;h2 id="基本示例">基本示例&lt;a class="td-heading-self-link" href="#%e5%9f%ba%e6%9c%ac%e7%a4%ba%e4%be%8b" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/tx70hw/1620570742728-0e30dc11-37f3-495d-920c-3814c5d1f0d6.jpeg" alt="">
通常情况下，一个 Kustomization 目录至少要包含一个 kustomization.yaml 文件，也可以包含若干需要部署的 Manifests 文件。加入目录结构如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~/someApp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── deployment.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── kustomization.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── service.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>service.yaml 定义如下:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">apiVersion&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">v1&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">kind&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Service&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">metadata&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">myapp&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">spec&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">selector&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">app&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">myapp&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">ports&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">port&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">80&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>deployment.yaml 定义如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">apiVersion&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">apps/v1&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">kind&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Deployment&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">metadata&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">myapp&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">spec&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">selector&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">matchLabels&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">app&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">myapp&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">template&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">metadata&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">myapp&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">labels&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">app&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">myapp&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">spec&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">containers&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">myapp&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">image&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">lchdzh/network-test:v2.0&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后在当前文件夹下面添加一个名为 kustomization.yaml 的文件：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">apiVersion&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">kustomize.config.k8s.io/v1beta1&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">kind&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Kustomization&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">resources&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">service.yaml&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">deployment.yaml&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个文件将是你的基础配置文件，它描述了你使用的资源文件。&lt;strong>apiVersion 与 kind 字段也可以省略不写&lt;/strong>&lt;/p>
&lt;p>使用 &lt;code>kubectl kustomize .&lt;/code> 命令运行后的结果如下所示。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">apiVersion&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">v1&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">kind&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Service&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">metadata&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">myapp&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">spec&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">ports&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">port&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">80&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">selector&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">app&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">myapp&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000">---&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">apiVersion&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">apps/v1&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">kind&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Deployment&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">metadata&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">labels&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">app&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">myapp&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">myapp&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">spec&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">selector&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">matchLabels&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">app&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">myapp&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">template&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">metadata&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">labels&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">app&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">myapp&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">myapp&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">spec&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">containers&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">image&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">lchdzh/network-test:v2.0&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">myapp&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们可以看到，Kustomize 将多个 Manifests 文件组合在了一起，并且，通过 &lt;code>kubectl apply -k .&lt;/code> 命令，我们可以直接部署这些资源到 K8S 集群中。&lt;/p>
&lt;h1 id="kustomize-的基本功能">Kustomize 的基本功能&lt;a class="td-heading-self-link" href="#kustomize-%e7%9a%84%e5%9f%ba%e6%9c%ac%e5%8a%9f%e8%83%bd" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="生成-configmapsecret-资源">生成 ConfigMap、Secret 资源&lt;a class="td-heading-self-link" href="#%e7%94%9f%e6%88%90-configmapsecret-%e8%b5%84%e6%ba%90" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>ConfigMap 和 Secret 包含其他 Kubernetes 对象（如 Pod）所需要的配置或敏感数据。 ConfigMap 或 Secret 中数据的来源往往是集群外部，例如某个 &lt;code>.properties&lt;/code> 文件或者 SSH 密钥文件。 Kustomize 通过 &lt;code>secretGenerator&lt;/code> 和 &lt;code>configMapGenerator&lt;/code>，可以基于文件或字面值来生成 Secret 和 ConfigMap 资源。&lt;/p>
&lt;p>详见 Kustomization Manifest 详解中的各个字段：&lt;/p>
&lt;ul>
&lt;li>[configMapGenerator](/docs/10.云原生/云原生应用管理/Kustomize/Kustomization%20Manifest%20 详解.md Manifest 详解.md)&lt;/li>
&lt;li>[secretGenerator](/docs/10.云原生/云原生应用管理/Kustomize/Kustomization%20Manifest%20 详解.md Manifest 详解.md)&lt;/li>
&lt;li>[generatorOptions](/docs/10.云原生/云原生应用管理/Kustomize/Kustomization%20Manifest%20 详解.md Manifest 详解.md)&lt;/li>
&lt;/ul>
&lt;h2 id="设置贯穿性字段">设置贯穿性字段&lt;a class="td-heading-self-link" href="#%e8%ae%be%e7%bd%ae%e8%b4%af%e7%a9%bf%e6%80%a7%e5%ad%97%e6%ae%b5" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="组织和定制各种资源">组织和定制各种资源&lt;a class="td-heading-self-link" href="#%e7%bb%84%e7%bb%87%e5%92%8c%e5%ae%9a%e5%88%b6%e5%90%84%e7%a7%8d%e8%b5%84%e6%ba%90" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h1 id="bases-and-overlays-功能">Bases and Overlays 功能&lt;a class="td-heading-self-link" href="#bases-and-overlays-%e5%8a%9f%e8%83%bd" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>Kustomize 和 Docker 比较类似，有很多层组成，每个层都是修改以前的层，正因为有这个理念存在，所以我们可以不断在其他人之上写东西，而不会增加配置的复杂性，构建的最终结果由基础部分和你在上面配置的其他层组成。&lt;/p>
&lt;h2 id="kustomize-overlays-功能的目录结构">kustomize Overlays 功能的目录结构&lt;a class="td-heading-self-link" href="#kustomize-overlays-%e5%8a%9f%e8%83%bd%e7%9a%84%e7%9b%ae%e5%bd%95%e7%bb%93%e6%9e%84" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kustomize/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── base
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── deployment.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── kust.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── service.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── overlays
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── prod
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── custom-env.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── kustomization.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── &lt;span style="color:#204a87">test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├── custom-env.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └── kustomization.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>在每个目录中，都有一个名为 kustomization.yaml (文件名不能变)的文件来对当前目录进行配置说明。&lt;/li>
&lt;li>一般会有一个 base 目录，用来存放应用运行所需的基础 yaml 配置，和整合这些 yaml 的 kustomize 配置文件&lt;/li>
&lt;li>还会有 overlays 目录来存放各种自定义的配置文件，这些文件信息可以附加到 base 中的基础应用配置用。&lt;/li>
&lt;li>比如生产环境和测试环境有不同的环境变量，则可以在不同目录中，存放不同的变量 yaml 文件，然后通过 kustomize 来将 yaml 中的信息整合在一起。&lt;/li>
&lt;/ol>
&lt;h2 id="基础模板">基础模板&lt;a class="td-heading-self-link" href="#%e5%9f%ba%e7%a1%80%e6%a8%a1%e6%9d%bf" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>要使用 Kustomize，需要有一个原始的 yaml 文件来描述你想要部署到集群中的任何资源，我们这里将这些 base 文件存储在 ./k8s/base/ 文件夹下面。&lt;/p>
&lt;p>这些文件我们&lt;strong>永远&lt;/strong>不会直接访问，我们将在它们上面添加一些自定义的配置来创建新的资源定义。&lt;/p>
&lt;h2 id="根据基础模板定制配置">根据基础模板定制配置&lt;a class="td-heading-self-link" href="#%e6%a0%b9%e6%8d%ae%e5%9f%ba%e7%a1%80%e6%a8%a1%e6%9d%bf%e5%ae%9a%e5%88%b6%e9%85%8d%e7%bd%ae" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>现在我们想要针对一些特定场景进行定制，比如，针对生产环境和测试环境需要由不同的配置。我们这里并不会涵盖 Kustomize 的整个功能集，而是作为一个标准示例，向你展示这个工具背后的哲学。&lt;/p>
&lt;p>首先我们创建一个新的文件夹  k8s/overlays/prod ，其中包含一个名为 kustomzization.yaml 的文件，文件内容如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">apiVersion&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">kustomize.config.k8s.io/v1beta1&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">kind&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Kustomization&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">bases&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">../../base&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>当前文件夹下面的目录结构如下所示：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>k8s/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── base
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── deployment.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── kustomization.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── service.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── overlays
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └── prod
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └── kustomization.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果现在我们构建这个文件，将会看到和之前在 base 目录中执行 kubectl kustomize 命令一样的结果&lt;/p>
&lt;p>接下来我们来为我们的 prod 环境进行一些定制。&lt;/p>
&lt;h3 id="定制环境变量">定制环境变量&lt;a class="td-heading-self-link" href="#%e5%ae%9a%e5%88%b6%e7%8e%af%e5%a2%83%e5%8f%98%e9%87%8f" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>在 base 目录的基础模板中，我们不定义任何环境变量，现在我们需要添加一些环境变量在之前的基础模板中而保持原模板文件不变的话。实际上很简单，我们只需要在我们的基础模板上创建一块我们想要模板化的代码块，然后在 kustomization.yaml 文件中引用即可。&lt;/p>
&lt;p>比如我们这里定义一个包含环境变量的配置文件：custom-env.yaml&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">apiVersion&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">apps/v1&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">kind&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Deployment&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">metadata&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">myapp&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">spec&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">template&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">spec&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">containers&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">app&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># (1)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">env&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">CUSTOM_ENV_VARIABLE&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">value&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Value defined by Kustomize&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note:注意 (1) 这里定义的 name 是非常重要的，kustomize 会通过该值找到需要修改的容器。&lt;/p>
&lt;p>这个 yaml 文件本身是无效的，它只描述了我们希望在上面的基础模板上添加的内容。我们需要将这个文件添加到 k8s/overlays/prod/kustomization.yaml 文件中即可：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">apiVersion&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">kustomize.config.k8s.io/v1beta1&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">kind&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Kustomization&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">bases&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">../../base&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">patchesStrategicMerge&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">custom-env.yaml&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>现在如果我们来构建下，可以看到如下的输出结果：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">apiVersion&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">v1&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">kind&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Service&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">metadata&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">myapp&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">spec&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">ports&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">port&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">80&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">selector&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">app&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">myapp&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000">---&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">apiVersion&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">apps/v1&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">kind&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Deployment&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">metadata&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">labels&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">app&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">myapp&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">myapp&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">spec&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">selector&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">matchLabels&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">app&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">myapp&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">template&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">metadata&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">labels&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">app&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">myapp&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">myapp&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">spec&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">containers&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">env&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">CUSTOM_ENV_VARIABLE&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">value&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Value defined by Kustomize&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">app&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">image&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">lchdzh/network-test:v2.0&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">myapp-container&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到我们的 env 块已经被合并到了我们的基础模板上了，自定义的 env 变量出现在了 deployment.yaml 文件中。&lt;/p>
&lt;h3 id="定制副本数量">定制副本数量&lt;a class="td-heading-self-link" href="#%e5%ae%9a%e5%88%b6%e5%89%af%e6%9c%ac%e6%95%b0%e9%87%8f" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>和上面的例子一样，我们来扩展我们的基础模板来定义一些还没有定义的变量。&lt;/p>
&lt;p>这里我们来添加一些关于副本的信息，和前面一样，只需要在一个 YAML 文件中定义副本所需的额外信息块，新建一个名为 replica-and-rollout-strategy.yaml 的文件，内容如下所示：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">apiVersion:&lt;/span> &lt;span style="color:#a40000">apps/v&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">kind:&lt;/span> &lt;span style="color:#a40000">Deployment&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">metadata:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">name:&lt;/span> &lt;span style="color:#a40000">myapp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">spec:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">replicas:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">strategy:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">rollingUpdate:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">maxSurge:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">maxUnavailable:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">type:&lt;/span> &lt;span style="color:#a40000">RollingUpdate&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>和前面一样，在 kustomization.yaml 文件中的 patchesStrategicMerge 字段下面添加这里定制的数据：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">apiVersion:&lt;/span> &lt;span style="color:#a40000">kustomize.config.k&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">8&lt;/span>&lt;span style="color:#a40000">s.io/v&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#a40000">beta&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">kind:&lt;/span> &lt;span style="color:#a40000">Kustomization&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">bases:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">-&lt;/span> &lt;span style="color:#a40000">../../base&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">patchesStrategicMerge:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">-&lt;/span> &lt;span style="color:#a40000">custom-env.yaml&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">-&lt;/span> &lt;span style="color:#a40000">replica-and-rollout-strategy.yaml&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>同样，这个时候再使用 kubectl kustomize 命令构建，如下所示：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">apiVersion:&lt;/span> &lt;span style="color:#a40000">v&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">kind:&lt;/span> &lt;span style="color:#a40000">Service&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">metadata:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">name:&lt;/span> &lt;span style="color:#a40000">myapp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">spec:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">ports:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">-&lt;/span> &lt;span style="color:#a40000">port:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">80&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">selector:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">app:&lt;/span> &lt;span style="color:#a40000">myapp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">---&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">apiVersion:&lt;/span> &lt;span style="color:#a40000">apps/v&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">kind:&lt;/span> &lt;span style="color:#a40000">Deployment&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">metadata:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">labels:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">app:&lt;/span> &lt;span style="color:#a40000">myapp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">name:&lt;/span> &lt;span style="color:#a40000">myapp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">spec:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">replicas:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">selector:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">matchLabels:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">app:&lt;/span> &lt;span style="color:#a40000">myapp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">strategy:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">rollingUpdate:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">maxSurge:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">maxUnavailable:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">type:&lt;/span> &lt;span style="color:#a40000">RollingUpdate&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">template:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">metadata:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">labels:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">app:&lt;/span> &lt;span style="color:#a40000">myapp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">name:&lt;/span> &lt;span style="color:#a40000">myapp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">spec:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">containers:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">-&lt;/span> &lt;span style="color:#a40000">env:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">-&lt;/span> &lt;span style="color:#a40000">name:&lt;/span> &lt;span style="color:#a40000">CUSTOM_ENV_VARIABLE&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">value:&lt;/span> &lt;span style="color:#a40000">Value&lt;/span> &lt;span style="color:#a40000">defined&lt;/span> &lt;span style="color:#a40000">by&lt;/span> &lt;span style="color:#a40000">Kustomize&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">name:&lt;/span> &lt;span style="color:#a40000">app&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">-&lt;/span> &lt;span style="color:#a40000">image:&lt;/span> &lt;span style="color:#a40000">lchdzh/network-test:v&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2.0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">name:&lt;/span> &lt;span style="color:#a40000">myapp-container&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们可以看到副本数量和滚动更新的策略都添加到了基础模板之上了。&lt;/p>
&lt;h3 id="其他定制及其相关说明">其他定制及其相关说明&lt;a class="td-heading-self-link" href="#%e5%85%b6%e4%bb%96%e5%ae%9a%e5%88%b6%e5%8f%8a%e5%85%b6%e7%9b%b8%e5%85%b3%e8%af%b4%e6%98%8e" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>需要注意的是 name 字段，kustomize 一般是通过 name 字段的值来找到需要修改配置的位置的。如果 name 不同或者没有，kustomize 会修改到错误的位置或者报错&lt;/p>
&lt;p>还可以定制 namespace，等&lt;/p>
&lt;h2 id="通过命令行定义-secret">通过命令行定义 secret&lt;a class="td-heading-self-link" href="#%e9%80%9a%e8%bf%87%e5%91%bd%e4%bb%a4%e8%a1%8c%e5%ae%9a%e4%b9%89-secret" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>我们常常会通过命令行来添加一个 secret 对象，kustomize 有一个 edit 的子命令可以用来编辑 kustomization.yaml 文件然后创建一个 secret 对象，比如我们这里添加一个如下所示的 secret 对象：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">cd&lt;/span> &lt;span style="color:#a40000">k&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">8&lt;/span>&lt;span style="color:#a40000">s/overlays/prod&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">kustomize&lt;/span> &lt;span style="color:#a40000">edit&lt;/span> &lt;span style="color:#a40000">add&lt;/span> &lt;span style="color:#a40000">secret&lt;/span> &lt;span style="color:#a40000">sl-demo-app&lt;/span> &lt;span style="color:#a40000">--from-literal=db-password=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">12345&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面的命令会修改 kustomization.yaml 文件添加一个 SecretGenerator 字段在里面。&lt;/p>
&lt;p>当然你也可以通过文件（比如&amp;ndash;from-file=file/path 或者&amp;ndash;from-evn-file=env/path.env）来创建 secret 对象。&lt;/p>
&lt;p>通过上面命令创建完 secret 对象后，kustomization.yaml 文件的内容如下所示：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">apiVersion:&lt;/span> &lt;span style="color:#a40000">kustomize.config.k&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">8&lt;/span>&lt;span style="color:#a40000">s.io/v&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#a40000">beta&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">kind:&lt;/span> &lt;span style="color:#a40000">Kustomization&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">bases:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">-&lt;/span> &lt;span style="color:#a40000">../../base&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">patchesStrategicMerge:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">-&lt;/span> &lt;span style="color:#a40000">custom-env.yaml&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">-&lt;/span> &lt;span style="color:#a40000">replica-and-rollout-strategy.yaml&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">secretGenerator:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">-&lt;/span> &lt;span style="color:#a40000">literals:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">-&lt;/span> &lt;span style="color:#a40000">db-password=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">12345&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">name:&lt;/span> &lt;span style="color:#a40000">sl-demo-app&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">type:&lt;/span> &lt;span style="color:#a40000">Opaque&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后同样的我们回到根目录下面执行 kustomize build 命令构建下模板，输出内容如下所示：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">$&lt;/span> &lt;span style="color:#a40000">kustomize&lt;/span> &lt;span style="color:#a40000">build&lt;/span> &lt;span style="color:#a40000">k&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">8&lt;/span>&lt;span style="color:#a40000">s/overlays/prod&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">apiVersion:&lt;/span> &lt;span style="color:#a40000">v&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">data:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">db-password:&lt;/span> &lt;span style="color:#a40000">MTIzNDU=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">kind:&lt;/span> &lt;span style="color:#a40000">Secret&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">metadata:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">name:&lt;/span> &lt;span style="color:#a40000">sl-demo-app&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">-6&lt;/span>&lt;span style="color:#a40000">ft&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">88&lt;/span>&lt;span style="color:#a40000">t&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2625&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">type:&lt;/span> &lt;span style="color:#a40000">Opaque&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">---&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">apiVersion:&lt;/span> &lt;span style="color:#a40000">v&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">kind:&lt;/span> &lt;span style="color:#a40000">Service&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">metadata:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">name:&lt;/span> &lt;span style="color:#a40000">sl-demo-app&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">spec:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">ports:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">-&lt;/span> &lt;span style="color:#a40000">name:&lt;/span> &lt;span style="color:#a40000">http&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">port:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">8080&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">selector:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">app:&lt;/span> &lt;span style="color:#a40000">sl-demo-app&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">---&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">apiVersion:&lt;/span> &lt;span style="color:#a40000">apps/v&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">kind:&lt;/span> &lt;span style="color:#a40000">Deployment&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">metadata:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">name:&lt;/span> &lt;span style="color:#a40000">sl-demo-app&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">spec:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">replicas:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">selector:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">matchLabels:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">app:&lt;/span> &lt;span style="color:#a40000">sl-demo-app&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">strategy:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">rollingUpdate:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">maxSurge:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">maxUnavailable:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">type:&lt;/span> &lt;span style="color:#a40000">RollingUpdate&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">template:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">metadata:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">labels:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">app:&lt;/span> &lt;span style="color:#a40000">sl-demo-app&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">spec:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">containers:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">-&lt;/span> &lt;span style="color:#a40000">env:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">-&lt;/span> &lt;span style="color:#a40000">name:&lt;/span> &lt;span style="color:#a40000">CUSTOM_ENV_VARIABLE&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">value:&lt;/span> &lt;span style="color:#a40000">Value&lt;/span> &lt;span style="color:#a40000">defined&lt;/span> &lt;span style="color:#a40000">by&lt;/span> &lt;span style="color:#a40000">Kustomize&lt;/span> &lt;span style="color:#a40000">❤️&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">image:&lt;/span> &lt;span style="color:#a40000">foo/bar:latest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">name:&lt;/span> &lt;span style="color:#a40000">app&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">ports:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">-&lt;/span> &lt;span style="color:#a40000">containerPort:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">8080&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">name:&lt;/span> &lt;span style="color:#a40000">http&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">protocol:&lt;/span> &lt;span style="color:#a40000">TCP&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们可以看到 secret 对象的名称是 sl-demo-app-6ft88t2625，而不是我们定义的 sl-demo-app，这是正常的，因为如果更改了 secret 内容，就可以触发滚动更新了。&lt;/p>
&lt;p>同样的，如果我们想要在 Deployment 中使用这个 Secret 对象，我们就可以像之前一样添加一个使用 Secret 的新的层定义即可。&lt;/p>
&lt;p>比如我们这里像把 db-password 的值通过环境变量注入到 Deployment 中，我们就可以定义下面这样的新的层信息：（database-secret.yaml）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">apiVersion:&lt;/span> &lt;span style="color:#a40000">apps/v&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">kind:&lt;/span> &lt;span style="color:#a40000">Deployment&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">metadata:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">name:&lt;/span> &lt;span style="color:#a40000">sl-demo-app&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">spec:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">template:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">spec:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">containers:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">-&lt;/span> &lt;span style="color:#a40000">name:&lt;/span> &lt;span style="color:#a40000">app&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">env:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">-&lt;/span> &lt;span style="color:#a40000">name:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;DB_PASSWORD&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">valueFrom:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">secretKeyRef:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">name:&lt;/span> &lt;span style="color:#a40000">sl-demo-app&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">key:&lt;/span> &lt;span style="color:#a40000">db.password&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后同样的，我们把这里定义的层添加到 k8s/overlays/prod/kustomization.yaml 文件中去：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">apiVersion:&lt;/span> &lt;span style="color:#a40000">kustomize.config.k&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">8&lt;/span>&lt;span style="color:#a40000">s.io/v&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#a40000">beta&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">kind:&lt;/span> &lt;span style="color:#a40000">Kustomization&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">bases:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">-&lt;/span> &lt;span style="color:#a40000">../../base&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">patchesStrategicMerge:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">-&lt;/span> &lt;span style="color:#a40000">custom-env.yaml&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">-&lt;/span> &lt;span style="color:#a40000">replica-and-rollout-strategy.yaml&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">-&lt;/span> &lt;span style="color:#a40000">database-secret.yaml&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">secretGenerator:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">-&lt;/span> &lt;span style="color:#a40000">literals:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">-&lt;/span> &lt;span style="color:#a40000">db-password=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">12345&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">name:&lt;/span> &lt;span style="color:#a40000">sl-demo-app&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">type:&lt;/span> &lt;span style="color:#a40000">Opaque&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>现在我们来构建整个的 prod 目录，我们会得到如下所示的信息：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">$&lt;/span> &lt;span style="color:#a40000">kustomize&lt;/span> &lt;span style="color:#a40000">build&lt;/span> &lt;span style="color:#a40000">k&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">8&lt;/span>&lt;span style="color:#a40000">s/overlays/prod&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">apiVersion:&lt;/span> &lt;span style="color:#a40000">v&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">data:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">db-password:&lt;/span> &lt;span style="color:#a40000">MTIzNDU=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">kind:&lt;/span> &lt;span style="color:#a40000">Secret&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">metadata:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">name:&lt;/span> &lt;span style="color:#a40000">sl-demo-app&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">-6&lt;/span>&lt;span style="color:#a40000">ft&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">88&lt;/span>&lt;span style="color:#a40000">t&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2625&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">type:&lt;/span> &lt;span style="color:#a40000">Opaque&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">---&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">apiVersion:&lt;/span> &lt;span style="color:#a40000">v&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">kind:&lt;/span> &lt;span style="color:#a40000">Service&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">metadata:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">name:&lt;/span> &lt;span style="color:#a40000">sl-demo-app&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">spec:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">ports:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">-&lt;/span> &lt;span style="color:#a40000">name:&lt;/span> &lt;span style="color:#a40000">http&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">port:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">8080&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">selector:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">app:&lt;/span> &lt;span style="color:#a40000">sl-demo-app&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">---&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">apiVersion:&lt;/span> &lt;span style="color:#a40000">apps/v&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">kind:&lt;/span> &lt;span style="color:#a40000">Deployment&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">metadata:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">name:&lt;/span> &lt;span style="color:#a40000">sl-demo-app&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">spec:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">replicas:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">selector:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">matchLabels:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">app:&lt;/span> &lt;span style="color:#a40000">sl-demo-app&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">strategy:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">rollingUpdate:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">maxSurge:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">maxUnavailable:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">type:&lt;/span> &lt;span style="color:#a40000">RollingUpdate&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">template:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">metadata:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">labels:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">app:&lt;/span> &lt;span style="color:#a40000">sl-demo-app&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">spec:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">containers:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">-&lt;/span> &lt;span style="color:#a40000">env:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">-&lt;/span> &lt;span style="color:#a40000">name:&lt;/span> &lt;span style="color:#a40000">DB_PASSWORD&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">valueFrom:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">secretKeyRef:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">key:&lt;/span> &lt;span style="color:#a40000">db.password&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">name:&lt;/span> &lt;span style="color:#a40000">sl-demo-app&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">-6&lt;/span>&lt;span style="color:#a40000">ft&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">88&lt;/span>&lt;span style="color:#a40000">t&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2625&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">-&lt;/span> &lt;span style="color:#a40000">name:&lt;/span> &lt;span style="color:#a40000">CUSTOM_ENV_VARIABLE&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">value:&lt;/span> &lt;span style="color:#a40000">Value&lt;/span> &lt;span style="color:#a40000">defined&lt;/span> &lt;span style="color:#a40000">by&lt;/span> &lt;span style="color:#a40000">Kustomize&lt;/span> &lt;span style="color:#a40000">❤️&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">image:&lt;/span> &lt;span style="color:#a40000">foo/bar:latest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">name:&lt;/span> &lt;span style="color:#a40000">app&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">ports:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">-&lt;/span> &lt;span style="color:#a40000">containerPort:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">8080&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">name:&lt;/span> &lt;span style="color:#a40000">http&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">protocol:&lt;/span> &lt;span style="color:#a40000">TCP&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们可以看到 secretKeyRef.name 的值也指定的被修改成了上面生成的 secret 对象的名称。&lt;/p>
&lt;p>由于 Secret 是一些私密的信息，所以最好是在安全的环境中来添加上面的 secret 的对象，而不应该和其他代码之类的一起被提交到代码仓库之类的去。&lt;/p>
&lt;p>如果是 ConfigMap 的话也是同样的逻辑，最后会生成一个 hash 值的名称，这样在 ConfigMap 更改时可以触发重新部署。&lt;/p>
&lt;p>修改镜像&lt;/p>
&lt;p>和 secret 资源对象一样，我们可以直接从命令行直接更改镜像或者 tag，如果你需要部署通过 CI/CD 系统标记的镜像的话这就非常有用了。&lt;/p>
&lt;p>比如我们这里来修改下镜像的 tag：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">cd&lt;/span> &lt;span style="color:#a40000">k&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">8&lt;/span>&lt;span style="color:#a40000">s/overlays/prod&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">TAG_VERSION=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3.4&lt;/span>&lt;span style="color:#a40000">.&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">kustomize&lt;/span> &lt;span style="color:#a40000">edit&lt;/span> &lt;span style="color:#a40000">set&lt;/span> &lt;span style="color:#a40000">image&lt;/span> &lt;span style="color:#a40000">foo/bar=foo/bar:$TAG_VERSION&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>一般情况下 TAG_VERSION 常常被定义在 CI/CD 系统中。&lt;/p>
&lt;p>现在的 kustomization.yaml 文件内容如下所示：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">apiVersion:&lt;/span> &lt;span style="color:#a40000">kustomize.config.k&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">8&lt;/span>&lt;span style="color:#a40000">s.io/v&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#a40000">beta&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">kind:&lt;/span> &lt;span style="color:#a40000">Kustomization&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">bases:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">-&lt;/span> &lt;span style="color:#a40000">../../base&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">patchesStrategicMerge:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">-&lt;/span> &lt;span style="color:#a40000">custom-env.yaml&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">-&lt;/span> &lt;span style="color:#a40000">replica-and-rollout-strategy.yaml&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">-&lt;/span> &lt;span style="color:#a40000">database-secret.yaml&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">secretGenerator:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">-&lt;/span> &lt;span style="color:#a40000">literals:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">-&lt;/span> &lt;span style="color:#a40000">db-password=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">12345&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">name:&lt;/span> &lt;span style="color:#a40000">sl-demo-app&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">type:&lt;/span> &lt;span style="color:#a40000">Opaque&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">images:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">-&lt;/span> &lt;span style="color:#a40000">name:&lt;/span> &lt;span style="color:#a40000">foo/bar&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">newName:&lt;/span> &lt;span style="color:#a40000">foo/bar&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">newTag:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3.4&lt;/span>&lt;span style="color:#a40000">.&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">5&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>同样回到根目录下面构建该模板，会得到如下所示的信息：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">$&lt;/span> &lt;span style="color:#a40000">kustomize&lt;/span> &lt;span style="color:#a40000">build&lt;/span> &lt;span style="color:#a40000">k&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">8&lt;/span>&lt;span style="color:#a40000">s/overlays/prod&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">apiVersion:&lt;/span> &lt;span style="color:#a40000">v&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">data:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">db-password:&lt;/span> &lt;span style="color:#a40000">MTIzNDU=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">kind:&lt;/span> &lt;span style="color:#a40000">Secret&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">metadata:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">name:&lt;/span> &lt;span style="color:#a40000">sl-demo-app&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">-6&lt;/span>&lt;span style="color:#a40000">ft&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">88&lt;/span>&lt;span style="color:#a40000">t&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2625&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">type:&lt;/span> &lt;span style="color:#a40000">Opaque&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">---&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">apiVersion:&lt;/span> &lt;span style="color:#a40000">v&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">kind:&lt;/span> &lt;span style="color:#a40000">Service&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">metadata:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">name:&lt;/span> &lt;span style="color:#a40000">sl-demo-app&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">spec:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">ports:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">-&lt;/span> &lt;span style="color:#a40000">name:&lt;/span> &lt;span style="color:#a40000">http&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">port:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">8080&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">selector:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">app:&lt;/span> &lt;span style="color:#a40000">sl-demo-app&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">---&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">apiVersion:&lt;/span> &lt;span style="color:#a40000">apps/v&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">kind:&lt;/span> &lt;span style="color:#a40000">Deployment&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">metadata:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">name:&lt;/span> &lt;span style="color:#a40000">sl-demo-app&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">spec:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">replicas:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">selector:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">matchLabels:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">app:&lt;/span> &lt;span style="color:#a40000">sl-demo-app&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">strategy:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">rollingUpdate:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">maxSurge:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">maxUnavailable:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">type:&lt;/span> &lt;span style="color:#a40000">RollingUpdate&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">template:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">metadata:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">labels:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">app:&lt;/span> &lt;span style="color:#a40000">sl-demo-app&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">spec:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">containers:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">-&lt;/span> &lt;span style="color:#a40000">env:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">-&lt;/span> &lt;span style="color:#a40000">name:&lt;/span> &lt;span style="color:#a40000">DB_PASSWORD&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">valueFrom:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">secretKeyRef:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">key:&lt;/span> &lt;span style="color:#a40000">db.password&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">name:&lt;/span> &lt;span style="color:#a40000">sl-demo-app&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">-6&lt;/span>&lt;span style="color:#a40000">ft&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">88&lt;/span>&lt;span style="color:#a40000">t&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2625&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">-&lt;/span> &lt;span style="color:#a40000">name:&lt;/span> &lt;span style="color:#a40000">CUSTOM_ENV_VARIABLE&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">value:&lt;/span> &lt;span style="color:#a40000">Value&lt;/span> &lt;span style="color:#a40000">defined&lt;/span> &lt;span style="color:#a40000">by&lt;/span> &lt;span style="color:#a40000">Kustomize&lt;/span> &lt;span style="color:#a40000">❤️&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">image:&lt;/span> &lt;span style="color:#a40000">foo/bar:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3.4&lt;/span>&lt;span style="color:#a40000">.&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">name:&lt;/span> &lt;span style="color:#a40000">app&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">ports:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">-&lt;/span> &lt;span style="color:#a40000">containerPort:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">8080&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">name:&lt;/span> &lt;span style="color:#a40000">http&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">protocol:&lt;/span> &lt;span style="color:#a40000">TCP&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们可以看到 Deployment 的第一个 container.image 已经被修改了 3.4.5 版本了。&lt;/p>
&lt;p>最终我们定制的模板文件目录结构如下所示：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">$&lt;/span> &lt;span style="color:#a40000">tree&lt;/span> &lt;span style="color:#a40000">.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">└──&lt;/span> &lt;span style="color:#a40000">k&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">8&lt;/span>&lt;span style="color:#a40000">s&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">├──&lt;/span> &lt;span style="color:#a40000">base&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">│&lt;/span> &lt;span style="color:#a40000">├──&lt;/span> &lt;span style="color:#a40000">deployment.yaml&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">│&lt;/span> &lt;span style="color:#a40000">├──&lt;/span> &lt;span style="color:#a40000">kustomization.yaml&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">│&lt;/span> &lt;span style="color:#a40000">└──&lt;/span> &lt;span style="color:#a40000">service.yaml&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">└──&lt;/span> &lt;span style="color:#a40000">overlays&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">└──&lt;/span> &lt;span style="color:#a40000">prod&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">├──&lt;/span> &lt;span style="color:#a40000">custom-env.yaml&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">├──&lt;/span> &lt;span style="color:#a40000">database-secret.yaml&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">├──&lt;/span> &lt;span style="color:#a40000">kustomization.yaml&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">└──&lt;/span> &lt;span style="color:#a40000">replica-and-rollout-strategy.yaml&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> &lt;span style="color:#a40000">directories,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">7&lt;/span> &lt;span style="color:#a40000">files&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>要安装到集群中也很简单：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">kustomize&lt;/span> &lt;span style="color:#a40000">build&lt;/span> &lt;span style="color:#a40000">k&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">8&lt;/span>&lt;span style="color:#a40000">s/overlays/prod&lt;/span> &lt;span style="color:#a40000">|&lt;/span> &lt;span style="color:#a40000">kubectl&lt;/span> &lt;span style="color:#a40000">apply&lt;/span> &lt;span style="color:#a40000">-f&lt;/span> &lt;span style="color:#a40000">-&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="总结">总结&lt;a class="td-heading-self-link" href="#%e6%80%bb%e7%bb%93" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>在上面的示例中，我们了解到了如何使用 Kustomize 的强大功能来定义你的 Kuberentes 资源清单文件，而不需要使用什么额外的模板系统，创建的所有的修改的块文件都将被应用到原始基础模板文件之上，而不用使用什么花括号之类的修改来更改它（貌似无形中有鄙视了下 Helm 😄）。&lt;/p>
&lt;p>Kustomize 中还有很多其他高级用法，比如 mixins 和继承或者允许为每一个创建的对象定义一个名称、标签或者 namespace 等等，你可以在官方的 Kustomize GitHub 代码仓库中查看高级示例和文档。&lt;/p></description></item><item><title>Docs: Storage(存储)</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Logs/Loki/Storage%E5%AD%98%E5%82%A8/Storage%E5%AD%98%E5%82%A8/</link><pubDate>Sat, 12 Jun 2021 12:02:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Logs/Loki/Storage%E5%AD%98%E5%82%A8/Storage%E5%AD%98%E5%82%A8/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/storage/">官方文档，存储&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/operations/storage/">官方文档，运维 - 存储&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/operations/storage/boltdb-shipper/">官方文档，运维 - 存储 - BoltDB - Shipper&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>与其他日志记录系统不同，Loki 是基于仅索引日志的元数据的想法而构建的。从 [Loki 的数据模型](/docs/6.可观测性/日志系统/Loki/Storage(存储)/Data%20Model(数据模型).md Model(数据模型).md)可知，日志是根据标签进行定位的。 日志数据本身会被压缩成 Chunks，并存储在本地的文件系统中；并且 Loki 还提供了一个 Index 数据，用来根据索引定位日志数据。小索引和高度压缩的 Chunks 简化了操作，并显着降低了 Loki 的成本。&lt;/p>
&lt;p>所以 Loki 需要存储两种不同类型的数据，当 Loki 收到 Log Stream 时，会存储两类数据：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Chunks(块)&lt;/strong> # &lt;strong>日志流本身的信息&lt;/strong>。每一个 Chunks 都是将一段时间的日志流压缩后形成的一个文件。
&lt;ul>
&lt;li>一个 Chunks 就是一个对象，如果是使用本地文件系统存储 Chunks，则可以抽象得将一个 Chunks 文件当做一个对象。在一个 Chunks 文件中一般包含里一段时间的日志流数据。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Indexes(索引)&lt;/strong> # &lt;strong>日志流索引的信息&lt;/strong>。每一个 Index 都是 键/值 格式的数据库文件，文件中的内容用来关联 日志流的标签 与 Chunks。
&lt;ul>
&lt;li>Index 中的 Key 就是日志流的标签，Value 就是 Chunks 文件所在的绝对路径。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Chunks 与 Index 的存储方式&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Chunks&lt;/strong> # 直接以压缩格式的文件形式存储。&lt;/li>
&lt;li>&lt;strong>Index&lt;/strong> # Loki 自身实现了一个本地的 &lt;strong>Key/Value Database(键值数据库)&lt;/strong>，这个数据库是基于 BoltDB 开发的，称为 &lt;strong>BoltDB-Shipper&lt;/strong>。BoltDB-Shipper 用来存储 Index 数据。
&lt;ul>
&lt;li>2.8 版本开始，Loki 可以使用 tsdb 的方式代替了 BoltDB-Shipper 来存储 Index。这种方式极大得优化索引的体积。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>小记：Loki 在 2.0 版本之前，这两类数据是分开存放的，只有 Chunks 数据可以存在对象存储中。直到 2.0 发布，Loki 开发了基于 BoltDB 的 BoltDB-Shipper 数据库用来存储 Index，并且已经可以将 Index 数据也存到对象存储中。&lt;/p>
&lt;/blockquote>
&lt;p>同时，Loki 还可以将这些数据，同时存储到 远程存储 中去(比如对象存储)。这些功能都是通过 Ingester 组件实现的。&lt;/p>
&lt;p>Loki 在不同的 Log Stream(日志流) 中接收日志，其中每个 Stream 的 tenantID(租户 ID) 和 一组标签 是该 Stream 的唯一标识。如果 Loki 以单租户模式运行，则所有块都放在名为 &lt;strong>&lt;code>fake&lt;/code>&lt;/strong> 的文件夹中，这是用于单个租户模式的合成租户名称。&lt;/p>
&lt;h2 id="local-storage本地存储">Local Storage(本地存储)&lt;a class="td-heading-self-link" href="#local-storage%e6%9c%ac%e5%9c%b0%e5%ad%98%e5%82%a8" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="on-disk-layout磁盘上的布局">On-disk Layout(磁盘上的布局)&lt;a class="td-heading-self-link" href="#on-disk-layout%e7%a3%81%e7%9b%98%e4%b8%8a%e7%9a%84%e5%b8%83%e5%b1%80" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>与 &lt;a href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Prometheus/Storage(%E5%AD%98%E5%82%A8)/Storage(%E5%AD%98%E5%82%A8).md">Prometheus 的存储概念&lt;/a>类似，Loki 也是将日志流数据抽象为一个一个的 Block(块)，只不过，在 Loki 这里，称之为 &lt;a href="#Table(%E8%A1%A8)%20%E6%A6%82%E5%BF%B5">Table(表)&lt;/a>。由于 Loki 需要存储 Index 与 Chunks 两种数据，所以，数据在磁盘上的布局，与 Prometheus 也就不太一样了。&lt;/p>
&lt;h3 id="index">Index&lt;a class="td-heading-self-link" href="#index" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>目录组织结构如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>root@nfs-1 loki&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># tree boltdb-shipper-active/index_18766/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>boltdb-shipper-active/index_18766/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#0000cf;font-weight:bold">1621413900&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── 1621413900.snapshot
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#0000cf;font-weight:bold">1621414800&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── 1621414800.snapshot
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> directories, &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> files
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>root@nfs-1 loki&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># tree boltdb-shipper-active/index_18766/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>boltdb-shipper-active/index_18766/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#0000cf;font-weight:bold">1621414800&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── 1621414800.snapshot
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> directories, &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> files
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>root@nfs-1 loki&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># tree boltdb-shipper-active/index_18766/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>boltdb-shipper-active/index_18766/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#0000cf;font-weight:bold">1621414800&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── 1621414800.snapshot
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#0000cf;font-weight:bold">1621415700&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── 1621415700.snapshot
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> directories, &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> files
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Loki 将 Index 数据根据 &lt;code>schema_config.configs.index.period&lt;/code> 这个配置，按照时间时间期间进行分组，莫认为 168h，也就是 7 天。&lt;/p>
&lt;p>如果将 &lt;code>schema_config.configs.index.period&lt;/code> 设置为 24h，那么对于 BoltDB-Shipper，一个表就是一个目录，表由许多较小的 BoltDB 文件组成(也就是说目录中有很多 BoltDB 文件)，每个文件仅存储 15 分钟的索引值。每天创建的表名称由 &lt;strong>prefix + period-number-since-epoch&lt;/strong> 组成。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>prefix&lt;/strong> # 是 &lt;code>schema_config.configs.index.period&lt;/code> 配置的值。&lt;/li>
&lt;li>&lt;strong>period-number-since-epoch&lt;/strong># 是从 &lt;a href="https://en.wikipedia.org/wiki/Unix_time">Epoch 时间&lt;/a>以来，到开始存储数据时刻的天数。&lt;/li>
&lt;/ul>
&lt;p>假如 &lt;code>schema_config.configs.index.period&lt;/code> 的值为 &lt;code>loki_index_&lt;/code>，当前时间是 2021 年 5 月 19 日，此时 Loki 收到了日志数据，则 Ingester 会创建一个 名为 &lt;strong>loki_index_18766&lt;/strong> 的目录，并且当收到日志流时，会在这个目录中创建以时间戳为名字的文件，这个文件中就是 Index 数据。&lt;/p>
&lt;blockquote>
&lt;p>自 Epoch 时间(1970 年 1 月 1 日) 至今为止，已经过了 18765 天，而我此时处于第 18766 天。那么这个目录名字中的数字就是 18766&lt;/p>
&lt;/blockquote>
&lt;p>上述 Index 数据将会根据 &lt;code>storage_config.boltdb_shipper&lt;/code> 中的 &lt;code>active_index_directory&lt;/code> 配置的存储路径存储在本地文件系统的目录内，如果还配置了 &lt;code>shared_store&lt;/code> 的值为非 filesystem，那么还会将这些数据上传到指定的对象存储中。&lt;/p>
&lt;p>在这里，我们为什么不会看到每隔 15 分钟就产生一个文件呢，那是因为 Compactor 这个组件的作用。Compactor 会将每个表中的 Index 数据进行合并，并删除其中的重复数据。你想啊~每隔 15 分钟产生一个文件，那一天 24 小时就有 96 个文件，积累起来是非常多的，在使用查询时也不够方便。&lt;/p>
&lt;p>所以，每隔 15 分钟，Compactor 会将旧的 Index 数据压缩到新的 Index 文件中，就像上面的目录结构中展现的，在 1621413900 和 1621414800 存在两个 Index，Compactor 会将 1621413900 中的数据合并到 1621414800 中，并去重，然后留下了唯一一个文件，当下个 15 分钟，又会生成名为 1621415700 的文件，Compactor 又会重复之前的动作，将数据合并到 1621415700 中，最终，在一天结束时，只会留下唯一一个文件。然后，今天的文件，又会被合并到明天的 Index 文件中，最终的最终，只会留下唯一一个 Index 文件。&lt;/p>
&lt;p>特别说明：Loki 与 Etcd 都是使用的 BoltDB 实现的，Index 到最后也会只有一个文件，这个文件就跟 etcd 的 db 文件一样，这个文件中是被压缩的很多很多的键/值对信息&lt;/p>
&lt;p>每天的结束，会将这个文件压缩为 .gz 的格式，并发送到 Chunks 数据存储目录中的 index 目录下。&lt;/p>
&lt;h3 id="chunks">Chunks&lt;a class="td-heading-self-link" href="#chunks" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>Chunks 数据的目录结构就很简单了&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>root@nfs-1 chunks&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># tree |more&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── index
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── index_18738
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ │ └── compactor-1619056534.gz
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── index_18739
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ │ └── compactor-1619142934.gz
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>......省略
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   └── index_18766
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── compactor-1621432533.gz
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   └── loki-bj-net-0-1615528533442739252-1621431900.gz
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── ZmFrZS80MDgzM2JkNDYxNWM0MWIzOjE3OGZmOTgxM2NmOjE3OGZmOTgxM2QwOjUyN2VlY2Yy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── ZmFrZS80MDgzM2JkNDYxNWM0MWIzOjE3OTdhM2JlOTUxOjE3OTdhM2JlOTUyOjI3NDZlMDdj
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#000">ZmFrZS80MDIwYTRmN2I2MzVmZGIyOjE3OGY3MDYwZTIwOjE3OGY3MDYxZTE3OmFhMzZhNzg&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── ZmFrZS80MDIwYTRmN2I2MzVmZGIyOjE3OGY5NzU4MzI3OjE3OGY5NzVkZTNiOmIxOTIzNWY4
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── ZmFrZS80MDIwYTRmN2I2MzVmZGIyOjE3OGZjYWZkZTA1OjE3OGZjYWZkZjE1OjIzNWIzMjVi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.......省略
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>那些一长串的字符文件，就是一个 Chunks。并且，Index 的数据压缩后，也会在 Chunks 目录中生成对应的文件。&lt;/p>
&lt;h2 id="remote-storage远程存储">Remote Storage(远程存储)&lt;a class="td-heading-self-link" href="#remote-storage%e8%bf%9c%e7%a8%8b%e5%ad%98%e5%82%a8" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>远程存储非常简单，从本地存储的模式可以看出来，Index 和 Chunks 本质上就是一个个的文件，并且互相具有关联关系，所以，Ingester 组件还可以将这些数据，发送到远程存储中。&lt;/p>
&lt;p>现阶段：&lt;/p>
&lt;ul>
&lt;li>Chunks 支持以下远程存储
&lt;ul>
&lt;li>&lt;strong>Cassandra&lt;/strong>&lt;/li>
&lt;li>&lt;strong>S3&lt;/strong> # 任何实现 S3 接口的服务都可以用来存储 Chunks 数据，比如开源的 [MinIO](/docs/5.数据存储/1.存储/存储的基础设施架构/Distributed%20Storage(分布式存储)/MinIO.md Storage(分布式存储)/MinIO.md)。&lt;/li>
&lt;li>&amp;hellip;&amp;hellip;等等，详见官方文档&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Index 支持以下远程存储
&lt;ul>
&lt;li>&lt;strong>Cassandra&lt;/strong>&lt;/li>
&lt;li>&amp;hellip;&amp;hellip;等等，详见官方文档&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Loki 的远程存储与 Prometheus 还有一点区别，Loki 自己的 Ingester 本身就实现了，而 Prometheus 的远程存储则需要其他程序对接。&lt;/p>
&lt;/blockquote>
&lt;p>现在用 MinIO 中存储的 Index 与 Chunks 查看一下目录结构&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gzp72g/1621436054664-ec14823d-2330-40c2-a6a1-155e6fc2b3b9.png" alt="image.png">&lt;/p>
&lt;p>fake 目录中就是 Chunks 数据&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gzp72g/1621436066582-d381149e-921e-47a1-9155-b716614528f7.png" alt="image.png">&lt;/p>
&lt;p>index 目录总就是 Index 数据&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gzp72g/1621436085579-707d7396-de4d-4761-b753-0bdd940de96b.png" alt="image.png">&lt;/p>
&lt;h3 id="index-1">Index&lt;a class="td-heading-self-link" href="#index-1" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>数据以 WAL 方式存在本地后，逐步上传到远程存储中。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>├── data
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── loki
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   ├── boltdb-shipper-active
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   │   └── uploader
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   │   └── name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   ├── boltdb-shipper-cache
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   ├── compactor
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   └── wal
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   └── &lt;span style="color:#0000cf;font-weight:bold">00000000&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="chunks-1">Chunks&lt;a class="td-heading-self-link" href="#chunks-1" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;h2 id="chunk-格式">Chunk 格式&lt;a class="td-heading-self-link" href="#chunk-%e6%a0%bc%e5%bc%8f" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>-------------------------------------------------------------------
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| | |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| MagicNumber(4b) | version(1b) |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| | |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-------------------------------------------------------------------
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| block-1 bytes | checksum (4b) |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-------------------------------------------------------------------
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| block-2 bytes | checksum (4b) |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-------------------------------------------------------------------
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| block-n bytes | checksum (4b) |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-------------------------------------------------------------------
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| # blocks (uvarint) |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-------------------------------------------------------------------
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| #entries(uvarint) | mint, maxt (varint) | offset, len (uvarint) |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-------------------------------------------------------------------
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| #entries(uvarint) | mint, maxt (varint) | offset, len (uvarint) |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-------------------------------------------------------------------
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| #entries(uvarint) | mint, maxt (varint) | offset, len (uvarint) |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-------------------------------------------------------------------
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| #entries(uvarint) | mint, maxt (varint) | offset, len (uvarint) |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-------------------------------------------------------------------
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| checksum(from # blocks) |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-------------------------------------------------------------------
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| metasOffset - offset to the point with # blocks |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-------------------------------------------------------------------
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>mint&lt;/code> 和 &lt;code>maxt&lt;/code>分别描述了最小和最大的 Unix 纳秒时间戳。&lt;/p>
&lt;h3 id="block-格式">Block 格式&lt;a class="td-heading-self-link" href="#block-%e6%a0%bc%e5%bc%8f" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>一个 block 由一系列日志 entries 组成，每个 entry 都是一个单独的日志行。
请注意，一个 block 的字节是用 Gzip 压缩存储的。以下是它们未压缩时的形式。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>-------------------------------------------------------------------
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| ts (varint) | len (uvarint) | log-1 bytes |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-------------------------------------------------------------------
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| ts (varint) | len (uvarint) | log-2 bytes |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-------------------------------------------------------------------
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| ts (varint) | len (uvarint) | log-3 bytes |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-------------------------------------------------------------------
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| ts (varint) | len (uvarint) | log-n bytes |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-------------------------------------------------------------------
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>ts&lt;/code> 是日志的 Unix 纳秒时间戳，而 len 是日志条目的字节长度。&lt;/p>
&lt;h1 id="schema模式-概念">Schema(模式) 概念&lt;a class="td-heading-self-link" href="#schema%e6%a8%a1%e5%bc%8f-%e6%a6%82%e5%bf%b5" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/operations/storage/schema/">官方文档，运维 - 存储 - 存储模式&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Loki 旨在向后兼容，当 Loki 内部存储发生变化时，通过 &lt;strong>Schema(模式)&lt;/strong> 功能，可以让 Loki 的数据迁移更加平滑。在 Schema 概念中，通过一种 &lt;strong>Period(期间)&lt;/strong> 的概念，来区分多个 Schema 的配置。本质上，一个 Schema 是一个数组，数组中的每个元素都是一个 Period，表示在这个 Period(期间) 内所使用的存储模式是 XX。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gzp72g/1660102594593-ad7383b9-e99d-414b-b4e4-8547ef28758f.png" alt="image.png">&lt;/p>
&lt;p>同时，&lt;strong>Schema 中的配置，也可以定义 Loki 储存数据所用的存储类型，Loki 想要正常运行，必须要指定具体的 Schema&lt;/strong>。&lt;/p>
&lt;p>假如现在配置文件中有如下配置：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">schema_config&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">configs&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">from&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">2019-07-01&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">store&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">boltdb-shipper&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">object_store&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">filesystem&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">schema&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">v10&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">index&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">prefix&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">index_&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">period&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">168h&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">from&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">2020-07-01&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">store&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">boltdb-shipper&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">object_store&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">s3&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">schema&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">v11&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">index&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">prefix&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">index_&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">period&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">168h&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个配置表示 Loki 现在可以通过两种 Schema 存储数据，在第一个 Period(期间)(2019 年 7 月 1 日 ~ 2020 年 7 月 1 号)，使用 v10 模式；在第二个 Period(期间)(2020 年 7 月 1 日 ~ 至今)，则使用 v11 模式。这种运行方式，显著简化了升级，让用户不再担心升级时如果存储模式发生变化而产生的影响。就算不是升级 Loki，当用户想要切换所使用的存储时，同样可以通过这种方式来平滑过度。&lt;/p>
&lt;p>基于此，Loki 可以根据不同的 Schema 配置，将不同时间段的数据存放在不同类型的存储中。&lt;/p>
&lt;ul>
&lt;li>比如现在有这么一种场景，公司本来将数据存放在本地，但是随着业务规模扩大，数据存储方式想改变了，这时候如何丝滑的迁移数据呢？&lt;/li>
&lt;li>通过 schema_config 字段的配置，2019-10-16 到 2020-11-16，使用本地存放数据；然后我买了公有云的存储产品，从 2020-11-16 到 2021-11-16，使用公有云存放数据。Loki 根据这种配置直到，当 2020-11-16 日开始，就会将数据存放在公有云数据库中了，而老的数据还可以不受影响。然后根据下文提到的 &lt;a href="#Log%20Retention(%E6%97%A5%E5%BF%97%E4%BF%9D%E7%95%99)">Retention&lt;/a> 功能，逐步将老数据删除，这种升级过度是非常丝滑的。&lt;/li>
&lt;/ul>
&lt;h2 id="在-schema-中配置储存数据所使用的存储类型">在 Schema 中配置储存数据所使用的存储类型&lt;a class="td-heading-self-link" href="#%e5%9c%a8-schema-%e4%b8%ad%e9%85%8d%e7%bd%ae%e5%82%a8%e5%ad%98%e6%95%b0%e6%8d%ae%e6%89%80%e4%bd%bf%e7%94%a8%e7%9a%84%e5%ad%98%e5%82%a8%e7%b1%bb%e5%9e%8b" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>并且，在 Schema 配置中，还可以通过 &lt;code>schema_config.configs.store&lt;/code> 与 &lt;code>schema_config.configs.object_store&lt;/code> 两个字段指定 Loki 储存 Index 和 Chunk 数据所使用的存储类型，比如上面这个例子中，对于 2020 年 7 月 1 日之前的数据，使用 boltdb-shipper 存储 Index 数据、filesystem 存储 Chunk 数据；2020 年 7 月 1 日之后的存储方式与之前一样。然后再通过 &lt;code>storage_config&lt;/code> 字段来配置 boltdb-shipper 和 filesystem 这两类存储的具体使用方式，比如指定认证信息、指定存储路径等等。&lt;/p>
&lt;p>同时，还可以通过&lt;code>schema_config.configs.store&lt;/code> 与 &lt;code>schema_config.configs.object_store&lt;/code> 两个字段来配置存储数据时 &lt;strong>Table(表)&lt;/strong> 的行为，比如 存储时间、文件名前缀 等等。&lt;/p>
&lt;p>比如上面这个示例中，配置了储存 Index 类型数据的一些简单行为：&lt;code>prefix&lt;/code> 字段指定了当前期间表的前缀为 index_，也就是存储 Index 数据的文件名开头都会是 index_；&lt;code>period&lt;/code> 字段则指定了在这个模式期间，表的周期为 168h，也就是每隔 168 小时，创建一张表。&lt;/p>
&lt;h2 id="依赖于-schema-的配置">依赖于 Schema 的配置&lt;a class="td-heading-self-link" href="#%e4%be%9d%e8%b5%96%e4%ba%8e-schema-%e7%9a%84%e9%85%8d%e7%bd%ae" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>由于 Schema 中配置了 Loki 储存 Index 与 Chunks 两种数据所使用的存储类型。所以，很多配置，都会基于这个信息，来进行个性化配置。比如在 Schema 中设定了 S3 类型的存储，那么就需要设定连接 S3 存储时所需的认证信息。&lt;/p>
&lt;blockquote>
&lt;p>注意：这一段内容会基于对 Loki 的存储概念已经有了详细了解后，才能看懂。&lt;/p>
&lt;/blockquote>
&lt;h1 id="tsdb">TSDB&lt;a class="td-heading-self-link" href="#tsdb" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;a href="https://lokidex.com/posts/tsdb/">https://lokidex.com/posts/tsdb/&lt;/a>&lt;/p>
&lt;p>从 Loki v2.8 开始，TSDB 是推荐的 Loki 索引。它很大程度上受到 Prometheus 的 TSDB 子项目的启发。如需更深入的解释，您可以阅读 Loki 维护者 Owen 的博客文章。简而言之，这个新索引更高效、更快且更具可扩展性。它也驻留在对象存储中，就像它前面的 &lt;a href="#BoltDB-Shipper%20%E8%BF%90%E8%A1%8C%E7%BB%86%E8%8A%82">BoltDB-Shipper&lt;/a> 索引一样。&lt;/p>
&lt;h1 id="chunk-存储">Chunk 存储&lt;a class="td-heading-self-link" href="#chunk-%e5%ad%98%e5%82%a8" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>Chunk 存储是 Loki 的长期数据存储，旨在支持交互式查询和持续写入，不需要后台维护任务。它由以下部分组成:&lt;/p>
&lt;ul>
&lt;li>一个 chunks 索引，这个索引可以通过以下方式支持：Amazon DynamoDB、Google Bigtable、Apache Cassandra。&lt;/li>
&lt;li>一个用于 chunk 数据本身的键值（KV）存储，可以是：Amazon DynamoDB、Google Bigtable、Apache Cassandra、Amazon S3、Google Cloud Storage。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>与 Loki 的其他核心组件不同，块存储不是一个单独的服务、任务或进程，而是嵌入到需要访问 Loki 数据的 &lt;code>ingester&lt;/code> 和 &lt;code>querier&lt;/code> 服务中的一个库。&lt;/p>
&lt;/blockquote>
&lt;p>块存储依赖于一个统一的接口，用于支持块存储索引的 &lt;code>NoSQL&lt;/code> 存储（DynamoDB、Bigtable 和 Cassandra）。这个接口假定索引是由以下项构成的键的条目集合。&lt;/p>
&lt;ul>
&lt;li>一个哈希 key，对所有的读和写都是必需的。&lt;/li>
&lt;li>一个范围 key，写入时需要，读取时可以省略，可以通过前缀或范围进行查询。&lt;/li>
&lt;/ul>
&lt;p>该接口在支持的数据库中的工作方式有些不同：&lt;/p>
&lt;ul>
&lt;li>&lt;code>DynamoDB&lt;/code> 原生支持范围和哈希键，因此，索引条目被直接建模为 DynamoDB 条目，哈希键作为分布键，范围作为 DynamoDB 范围键。&lt;/li>
&lt;li>对于 &lt;code>Bigtable&lt;/code> 和 &lt;code>Cassandra&lt;/code>，索引条目被建模为单个列值。哈希键成为行键，范围键成为列键。&lt;/li>
&lt;/ul>
&lt;p>一组模式集合被用来将读取和写入块存储时使用的匹配器和标签集映射到索引上的操作。随着 Loki 的发展，Schemas 模式也被添加进来，主要是为了更好地平衡写操作和提高查询性能。&lt;/p>
&lt;h1 id="log-retention日志保留">Log Retention(日志保留)&lt;a class="td-heading-self-link" href="#log-retention%e6%97%a5%e5%bf%97%e4%bf%9d%e7%95%99" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;a href="https://grafana.com/docs/loki/latest/operations/storage/retention/">https://grafana.com/docs/loki/latest/operations/storage/retention/&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>[!tip] 在 Loki 早期（版本 &amp;lt;= 2.7），Log Retention 能力是通过 Table manager 实现。从 2.8 版本开始，由于使用了 TSDB 存储模式，Retention 的行为可以由 Compactor 组件实现。&lt;/p>
&lt;/blockquote></description></item><item><title>Docs: Inter Process Communication(进程间通信)</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Process/Inter-Process-Communication%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/Inter-Process-Communication%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/</link><pubDate>Sat, 07 Nov 2020 20:29:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Process/Inter-Process-Communication%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/Inter-Process-Communication%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Inter-process_communication">Wiki, IPC&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Local_Inter-Process_Communication">Wiki, LPC&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/MnIcTR0KKpgnSoA3xaPUSA">公众号,小林 Coding-进程间通信&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Inter Process Communication(进程间通信，简称 IPC)&lt;/strong> 是一种允许多个进程共享数据的机制。IPC 的两个应用可以被分为客户端和服务端，客户端进程请求数据，服务端响应客户端的数据请求。有一些应用本身既是服务器又是客户端，这在分布式计算中，时常可以见到。这些进程可以运行在同一计算机上或网络连接的不同计算机上。&lt;/p>
&lt;p>IPC 对微内核和 nano 内核的设计过程非常重要。 微内核减少了内核提供的功能数量。 然后通过 IPC 与服务器通信获得这些功能，与普通的宏内核相比，IPC 的数量大幅增加。&lt;/p>
&lt;p>IPC 可以分为如下两类：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Local Procedure Call(本地过程调用，简称 LPC)&lt;/strong> #&lt;/li>
&lt;li>&lt;strong>Remote Procedure Call(远程过程调用，简称 RPC)&lt;/strong> #&lt;/li>
&lt;/ul>
&lt;p>IPC 可以通过多种方式实现：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>file(文件)&lt;/strong> # 多个进程可以通过磁盘上的文件共享数据。&lt;/li>
&lt;li>&lt;strong>Signal(信号)&lt;/strong># 从一个进程发送到另一个进程的系统消息，通常不用于传输数据，而是用于远程命令伙伴进程。&lt;a href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Process/Inter%20Process%20Communication(%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1)/Signal(%E4%BF%A1%E5%8F%B7).md">Signal(信号)&lt;/a>&lt;/li>
&lt;li>&lt;strong>pipe(管道)&lt;/strong># 使用标准输入和输出的单向数据通道。写入管道的写入端的数据由操作系统进行缓冲，直到从管道的读取端读取数据为止。通过使用相反“方向”上的两个管道可以实现过程之间的双向通信。详见 &lt;a href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Terminal%20%E4%B8%8E%20Shell/Bash/Bash%20%E5%86%85%E7%BD%AE%E5%91%BD%E4%BB%A4/%E7%AE%A1%E9%81%93%E7%AC%A6%E7%AD%89%E7%BB%84%E5%90%88%E5%91%BD%E4%BB%A4.md">管道符等组合命令&lt;/a>&lt;/li>
&lt;li>&lt;strong>Socket(套接字)&lt;/strong> # 计算机领域中数据通信的一种约定，或者说是一种方法，《&lt;a href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Process/Inter%20Process%20Communication(%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1)/Socket(%E5%A5%97%E6%8E%A5%E5%AD%97)/Socket(%E5%A5%97%E6%8E%A5%E5%AD%97).md">Socket(套接字)&lt;/a>》。Socket 又分为两种
&lt;ul>
&lt;li>Unix Domain Socket&lt;/li>
&lt;li>Network Socket&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Shared Memory(共享内存)&lt;/strong> #&lt;/li>
&lt;li>&lt;strong>Message Queue(消息队列)&lt;/strong> # 类似于 Socket 的数据流，但这通常保留了信息的边界。通常由操作系统实现，它们允许多个进程读写消息队列，而不需要彼此直接连接。&lt;/li>
&lt;li>&lt;strong>Mesage Passing(消息传递)&lt;/strong> # 允许多个程序使用消息队列和/或非 OS 托管通道进行通信。常用于并发模型。比如 LPC、RPC 等等。&lt;/li>
&lt;li>&lt;strong>等等&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h1 id="ipc-实现方式概述">IPC 实现方式概述&lt;a class="td-heading-self-link" href="#ipc-%e5%ae%9e%e7%8e%b0%e6%96%b9%e5%bc%8f%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>每个进程的用户地址空间都是独立的，一般而言是不能互相访问的，但内核空间是每个进程都共享的，所以进程之间要通信必须通过内核。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/iuxfg7/1619421762395-81aa05bc-0c16-4377-9584-9381c9433c63.png" alt="">&lt;/p>
&lt;p>Linux 内核提供了不少进程间通信的机制，我们来一起瞧瞧有哪些？&lt;/p>
&lt;h3 id="管道">管道&lt;a class="td-heading-self-link" href="#%e7%ae%a1%e9%81%93" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>如果你学过 Linux 命令，那你肯定很熟悉 &lt;code>|&lt;/code> 这个竖线。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">ps&lt;/span> &lt;span style="color:#000">auxf&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000">grep&lt;/span> &lt;span style="color:#000">mysql&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面命令行里的 &lt;code>|&lt;/code> 竖线就是一个&lt;strong>管道&lt;/strong>，它的功能是将前一个命令 &lt;code>ps auxf&lt;/code> 的输出，作为后一个命令 &lt;code>grep mysql&lt;/code> 的输入，从这功能描述，可以看出&lt;strong>管道传输数据是单向的&lt;/strong>，如果想相互通信，我们需要创建两个管道才行。&lt;/p>
&lt;p>同时，我们得知上面这种管道是没有名字，所以 &lt;code>|&lt;/code> 表示的管道称为&lt;strong>匿名管道&lt;/strong>，用完了就销毁。&lt;/p>
&lt;p>管道还有另外一个类型是&lt;strong>命名管道&lt;/strong>，也被叫做 &lt;code>FIFO&lt;/code>，因为数据是先进先出的传输方式。&lt;/p>
&lt;p>在使用命名管道前，先需要通过 &lt;code>mkfifo&lt;/code> 命令来创建，并且指定管道名字：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">mkfifo&lt;/span> &lt;span style="color:#000">myPipe&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>myPipe 就是这个管道的名称，基于 Linux 一切皆文件的理念，所以管道也是以文件的方式存在，我们可以用 ls 看一下，这个文件的类型是 p，也就是 pipe（管道） 的意思：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ ls
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-lprw-r--r--. 1 root    root         0 Jul 17 02:45 myPipe
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>接下来，我们往 myPipe 这个管道写入数据：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ &lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;hello&amp;#34;&lt;/span> &amp;gt; myPipe  // 将数据写进管道
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> // 停住了 ...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>你操作了后，你会发现命令执行后就停在这了，这是因为管道里的内容没有被读取，只有当管道里的数据被读完后，命令才可以正常退出。&lt;/p>
&lt;p>于是，我们执行另外一个命令来读取这个管道里的数据：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>cat &amp;lt; myPipe  // 读取管道里的数据hello
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到，管道里的内容被读取出来了，并打印在了终端上，另外一方面，echo 那个命令也正常退出了。&lt;/p>
&lt;p>我们可以看出，&lt;strong>管道这种通信方式效率低，不适合进程间频繁地交换数据&lt;/strong>。当然，它的好处，自然就是简单，同时也我们很容易得知管道里的数据已经被另一个进程读取了。&lt;/p>
&lt;blockquote>
&lt;p>那管道如何创建呢，背后原理是什么？&lt;/p>
&lt;/blockquote>
&lt;p>匿名管道的创建，需要通过下面这个系统调用：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>int pipe&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>int fd&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>2&lt;span style="color:#ce5c00;font-weight:bold">])&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里表示创建一个匿名管道，并返回了两个描述符，一个是管道的读取端描述符 &lt;code>fd[0]&lt;/code>，另一个是管道的写入端描述符 &lt;code>fd[1]&lt;/code>。注意，这个匿名管道是特殊的文件，只存在于内存，不存于文件系统中。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/iuxfg7/1619421762470-c218e6b2-110b-454f-b314-057383247469.png" alt="">&lt;/p>
&lt;p>其实，&lt;strong>所谓的管道，就是内核里面的一串缓存&lt;/strong>。从管道的一段写入的数据，实际上是缓存在内核中的，另一端读取，也就是从内核中读取这段数据。另外，管道传输的数据是无格式的流且大小受限。&lt;/p>
&lt;p>看到这，你可能会有疑问了，这两个描述符都是在一个进程里面，并没有起到进程间通信的作用，怎么样才能使得管道是跨过两个进程的呢？&lt;/p>
&lt;p>我们可以使用 &lt;code>fork&lt;/code> 创建子进程，&lt;strong>创建的子进程会复制父进程的文件描述符&lt;/strong>，这样就做到了两个进程各有两个「 &lt;code>fd[0]&lt;/code> 与 &lt;code>fd[1]&lt;/code>」，两个进程就可以通过各自的 fd 写入和读取同一个管道文件实现跨进程通信了。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/iuxfg7/1619421762310-ab6819a4-d922-4393-9591-590864172c59.png" alt="">&lt;/p>
&lt;p>管道只能一端写入，另一端读出，所以上面这种模式容易造成混乱，因为父进程和子进程都可以同时写入，也都可以读出。那么，为了避免这种情况，通常的做法是：&lt;/p>
&lt;ul>
&lt;li>父进程关闭读取的 fd[0]，只保留写入的 fd[1]；&lt;/li>
&lt;li>子进程关闭写入的 fd[1]，只保留读取的 fd[0]；&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/iuxfg7/1619421762492-d45b7c24-a90b-4fda-aea1-feb733f155bf.png" alt="">&lt;/p>
&lt;p>所以说如果需要双向通信，则应该创建两个管道。&lt;/p>
&lt;p>到这里，我们仅仅解析了使用管道进行父进程与子进程之间的通信，但是在我们 shell 里面并不是这样的。&lt;/p>
&lt;p>在 shell 里面执行 &lt;code>A | B&lt;/code> 命令的时候，A 进程和 B 进程都是 shell 创建出来的子进程，A 和 B 之间不存在父子关系，它俩的父进程都是 shell。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/iuxfg7/1619421762314-89d01b2d-6ffd-4cd8-9b56-6c6e9e6ffa03.png" alt="">&lt;/p>
&lt;p>所以说，在 shell 里通过「&lt;code>|&lt;/code>」匿名管道将多个命令连接在一起，实际上也就是创建了多个子进程，那么在我们编写 shell 脚本时，能使用一个管道搞定的事情，就不要多用一个管道，这样可以减少创建子进程的系统开销。&lt;/p>
&lt;p>我们可以得知，&lt;strong>对于匿名管道，它的通信范围是存在父子关系的进程&lt;/strong>。因为管道没有实体，也就是没有管道文件，只能通过 fork 来复制父进程 fd 文件描述符，来达到通信的目的。&lt;/p>
&lt;p>另外，&lt;strong>对于命名管道，它可以在不相关的进程间也能相互通信&lt;/strong>。因为命令管道，提前创建了一个类型为管道的设备文件，在进程里只要使用这个设备文件，就可以相互通信。&lt;/p>
&lt;p>不管是匿名管道还是命名管道，进程写入的数据都是缓存在内核中，另一个进程读取数据时候自然也是从内核中获取，同时通信数据都遵循&lt;strong>先进先出&lt;/strong>原则，不支持 lseek 之类的文件定位操作。&lt;/p>
&lt;h3 id="消息队列">消息队列&lt;a class="td-heading-self-link" href="#%e6%b6%88%e6%81%af%e9%98%9f%e5%88%97" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>前面说到管道的通信方式是效率低的，因此管道不适合进程间频繁地交换数据。&lt;/p>
&lt;p>对于这个问题，&lt;strong>消息队列&lt;/strong>的通信模式就可以解决。比如，A 进程要给 B 进程发送消息，A 进程把数据放在对应的消息队列后就可以正常返回了，B 进程需要的时候再去读取数据就可以了。同理，B 进程要给 A 进程发送消息也是如此。&lt;/p>
&lt;p>再来，&lt;strong>消息队列是保存在内核中的消息链表&lt;/strong>，在发送数据时，会分成一个一个独立的数据单元，也就是消息体（数据块），消息体是用户自定义的数据类型，消息的发送方和接收方要约定好消息体的数据类型，所以每个消息体都是固定大小的存储块，不像管道是无格式的字节流数据。如果进程从消息队列中读取了消息体，内核就会把这个消息体删除。&lt;/p>
&lt;p>消息队列生命周期随内核，如果没有释放消息队列或者没有关闭操作系统，消息队列会一直存在，而前面提到的匿名管道的生命周期，是随进程的创建而建立，随进程的结束而销毁。&lt;/p>
&lt;p>消息这种模型，两个进程之间的通信就像平时发邮件一样，你来一封，我回一封，可以频繁沟通了。&lt;/p>
&lt;p>但邮件的通信方式存在不足的地方有两点，&lt;strong>一是通信不及时，二是附件也有大小限制&lt;/strong>，这同样也是消息队列通信不足的点。&lt;/p>
&lt;p>&lt;strong>消息队列不适合比较大数据的传输&lt;/strong>，因为在内核中每个消息体都有一个最大长度的限制，同时所有队列所包含的全部消息体的总长度也是有上限。在 Linux 内核中，会有两个宏定义 &lt;code>MSGMAX&lt;/code> 和 &lt;code>MSGMNB&lt;/code>，它们以字节为单位，分别定义了一条消息的最大长度和一个队列的最大长度。&lt;/p>
&lt;p>&lt;strong>消息队列通信过程中，存在用户态与内核态之间的数据拷贝开销&lt;/strong>，因为进程写入数据到内核中的消息队列时，会发生从用户态拷贝数据到内核态的过程，同理另一进程读取内核中的消息数据时，会发生从内核态拷贝数据到用户态的过程。&lt;/p>
&lt;h3 id="共享内存">共享内存&lt;a class="td-heading-self-link" href="#%e5%85%b1%e4%ba%ab%e5%86%85%e5%ad%98" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>消息队列的读取和写入的过程，都会有发生用户态与内核态之间的消息拷贝过程。那&lt;strong>共享内存&lt;/strong>的方式，就很好的解决了这一问题。&lt;/p>
&lt;p>现代操作系统，对于内存管理，采用的是虚拟内存技术，也就是每个进程都有自己独立的虚拟内存空间，不同进程的虚拟内存映射到不同的物理内存中。所以，即使进程 A 和 进程 B 的虚拟地址是一样的，其实访问的是不同的物理内存地址，对于数据的增删查改互不影响。&lt;/p>
&lt;p>&lt;strong>共享内存的机制，就是拿出一块虚拟地址空间来，映射到相同的物理内存中&lt;/strong>。这样这个进程写入的东西，另外一个进程马上就能看到了，都不需要拷贝来拷贝去，传来传去，大大提高了进程间通信的速度。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/iuxfg7/1619421762492-966784b1-cbd4-4545-bdae-300663d06a0b.png" alt="">&lt;/p>
&lt;h3 id="信号量">信号量&lt;a class="td-heading-self-link" href="#%e4%bf%a1%e5%8f%b7%e9%87%8f" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>用了共享内存通信方式，带来新的问题，那就是如果多个进程同时修改同一个共享内存，很有可能就冲突了。例如两个进程都同时写一个地址，那先写的那个进程会发现内容被别人覆盖了。&lt;/p>
&lt;p>为了防止多进程竞争共享资源，而造成的数据错乱，所以需要保护机制，使得共享的资源，在任意时刻只能被一个进程访问。正好，&lt;strong>信号量&lt;/strong>就实现了这一保护机制。&lt;/p>
&lt;p>&lt;strong>信号量其实是一个整型的计数器，主要用于实现进程间的互斥与同步，而不是用于缓存进程间通信的数据&lt;/strong>。&lt;/p>
&lt;p>信号量表示资源的数量，控制信号量的方式有两种原子操作：&lt;/p>
&lt;ul>
&lt;li>一个是 &lt;strong>P 操作&lt;/strong>，这个操作会把信号量减去 -1，相减后如果信号量 &amp;lt;0，则表明资源已被占用，进程需阻塞等待；相减后如果信号量&amp;gt;= 0，则表明还有资源可使用，进程可正常继续执行。&lt;/li>
&lt;li>另一个是 &lt;strong>V 操作&lt;/strong>，这个操作会把信号量加上 1，相加后如果信号量 &amp;lt;= 0，则表明当前有阻塞中的进程，于是会将该进程唤醒运行；相加后如果信号量&amp;gt; 0，则表明当前没有阻塞中的进程；&lt;/li>
&lt;/ul>
&lt;p>P 操作是用在进入共享资源之前，V 操作是用在离开共享资源之后，这两个操作是必须成对出现的。&lt;/p>
&lt;p>接下来，举个例子，如果要使得两个进程互斥访问共享内存，我们可以初始化信号量为 &lt;code>1&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/iuxfg7/1619421762415-e1c7a414-1ecb-4d66-a920-881ebf3e3e85.png" alt="">&lt;/p>
&lt;p>具体的过程如下：&lt;/p>
&lt;ul>
&lt;li>进程 A 在访问共享内存前，先执行了 P 操作，由于信号量的初始值为 1，故在进程 A 执行 P 操作后信号量变为 0，表示共享资源可用，于是进程 A 就可以访问共享内存。&lt;/li>
&lt;li>若此时，进程 B 也想访问共享内存，执行了 P 操作，结果信号量变为了 -1，这就意味着临界资源已被占用，因此进程 B 被阻塞。&lt;/li>
&lt;li>直到进程 A 访问完共享内存，才会执行 V 操作，使得信号量恢复为 0，接着就会唤醒阻塞中的线程 B，使得进程 B 可以访问共享内存，最后完成共享内存的访问后，执行 V 操作，使信号量恢复到初始值 1。&lt;/li>
&lt;/ul>
&lt;p>可以发现，信号初始化为 &lt;code>1&lt;/code>，就代表着是&lt;strong>互斥信号量&lt;/strong>，它可以保证共享内存在任何时刻只有一个进程在访问，这就很好的保护了共享内存。&lt;/p>
&lt;p>另外，在多进程里，每个进程并不一定是顺序执行的，它们基本是以各自独立的、不可预知的速度向前推进，但有时候我们又希望多个进程能密切合作，以实现一个共同的任务。&lt;/p>
&lt;p>例如，进程 A 是负责生产数据，而进程 B 是负责读取数据，这两个进程是相互合作、相互依赖的，进程 A 必须先生产了数据，进程 B 才能读取到数据，所以执行是有前后顺序的。&lt;/p>
&lt;p>那么这时候，就可以用信号量来实现多进程同步的方式，我们可以初始化信号量为 &lt;code>0&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/iuxfg7/1619421762560-5bd9c203-120b-4f19-8bd1-4cf3bd2433d3.png" alt="">&lt;/p>
&lt;p>具体过程：&lt;/p>
&lt;ul>
&lt;li>如果进程 B 比进程 A 先执行了，那么执行到 P 操作时，由于信号量初始值为 0，故信号量会变为 -1，表示进程 A 还没生产数据，于是进程 B 就阻塞等待；&lt;/li>
&lt;li>接着，当进程 A 生产完数据后，执行了 V 操作，就会使得信号量变为 0，于是就会唤醒阻塞在 P 操作的进程 B；&lt;/li>
&lt;li>最后，进程 B 被唤醒后，意味着进程 A 已经生产了数据，于是进程 B 就可以正常读取数据了。&lt;/li>
&lt;/ul>
&lt;p>可以发现，信号初始化为 &lt;code>0&lt;/code>，就代表着是&lt;strong>同步信号量&lt;/strong>，它可以保证进程 A 应在进程 B 之前执行。&lt;/p>
&lt;h3 id="信号">信号&lt;a class="td-heading-self-link" href="#%e4%bf%a1%e5%8f%b7" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>上面说的进程间通信，都是常规状态下的工作模式。&lt;strong>对于异常情况下的工作模式，就需要用「信号」的方式来通知进程。&lt;/strong>&lt;/p>
&lt;p>信号跟信号量虽然名字相似度 66.66%，但两者用途完全不一样，就好像 Java 和 JavaScript 的区别。&lt;/p>
&lt;p>在 Linux 操作系统中， 为了响应各种各样的事件，提供了几十种信号，分别代表不同的意义。我们可以通过 &lt;code>kill -l&lt;/code> 命令，查看所有的信号：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>root@desistdaydream:~# &lt;span style="color:#204a87">kill&lt;/span> -l
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 1&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> SIGHUP 2&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> SIGINT 3&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> SIGQUIT 4&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> SIGILL 5&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> SIGTRAP
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 6&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> SIGABRT 7&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> SIGBUS 8&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> SIGFPE 9&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> SIGKILL 10&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> SIGUSR1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>11&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> SIGSEGV 12&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> SIGUSR2 13&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> SIGPIPE 14&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> SIGALRM 15&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> SIGTERM
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>16&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> SIGSTKFLT 17&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> SIGCHLD 18&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> SIGCONT 19&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> SIGSTOP 20&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> SIGTSTP
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>21&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> SIGTTIN 22&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> SIGTTOU 23&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> SIGURG 24&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> SIGXCPU 25&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> SIGXFSZ
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>26&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> SIGVTALRM 27&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> SIGPROF 28&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> SIGWINCH 29&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> SIGIO 30&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> SIGPWR
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>31&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> SIGSYS 34&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> SIGRTMIN 35&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> SIGRTMIN+1 36&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> SIGRTMIN+2 37&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> SIGRTMIN+3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>38&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> SIGRTMIN+4 39&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> SIGRTMIN+5 40&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> SIGRTMIN+6 41&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> SIGRTMIN+7 42&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> SIGRTMIN+8
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>43&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> SIGRTMIN+9 44&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> SIGRTMIN+10 45&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> SIGRTMIN+11 46&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> SIGRTMIN+12 47&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> SIGRTMIN+13
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>48&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> SIGRTMIN+14 49&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> SIGRTMIN+15 50&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> SIGRTMAX-14 51&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> SIGRTMAX-13 52&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> SIGRTMAX-12
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>53&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> SIGRTMAX-11 54&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> SIGRTMAX-10 55&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> SIGRTMAX-9 56&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> SIGRTMAX-8 57&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> SIGRTMAX-7
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>58&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> SIGRTMAX-6 59&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> SIGRTMAX-5 60&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> SIGRTMAX-4 61&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> SIGRTMAX-3 62&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> SIGRTMAX-2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>63&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> SIGRTMAX-1 64&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> SIGRTMAX
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行在 shell 终端的进程，我们可以通过键盘输入某些组合键的时候，给进程发送信号。例如&lt;/p>
&lt;ul>
&lt;li>Ctrl+C 产生 &lt;code>SIGINT&lt;/code> 信号，表示终止该进程；&lt;/li>
&lt;li>Ctrl+Z 产生 &lt;code>SIGTSTP&lt;/code> 信号，表示停止该进程，但还未结束；&lt;/li>
&lt;/ul>
&lt;p>如果进程在后台运行，可以通过 &lt;code>kill&lt;/code> 命令的方式给进程发送信号，但前提需要知道运行中的进程 PID 号，例如：&lt;/p>
&lt;ul>
&lt;li>kill -9 1050 ，表示给 PID 为 1050 的进程发送 &lt;code>SIGKILL&lt;/code> 信号，用来立即结束该进程；&lt;/li>
&lt;/ul>
&lt;p>所以，信号事件的来源主要有硬件来源（如键盘 Cltr+C ）和软件来源（如 kill 命令）。&lt;/p>
&lt;p>信号是进程间通信机制中&lt;strong>唯一的异步通信机制&lt;/strong>，因为可以在任何时候发送信号给某一进程，一旦有信号产生，我们就有下面这几种，用户进程对信号的处理方式。&lt;/p>
&lt;p>&lt;strong>1. 执行默认操作&lt;/strong>。Linux 对每种信号都规定了默认操作，例如，上面列表中的 SIGTERM 信号，就是终止进程的意思。Core 的意思是 Core Dump，也即终止进程后，通过 Core Dump 将当前进程的运行状态保存在文件里面，方便程序员事后进行分析问题在哪里。&lt;/p>
&lt;p>&lt;strong>2. 捕捉信号&lt;/strong>。我们可以为信号定义一个信号处理函数。当信号发生时，我们就执行相应的信号处理函数。&lt;/p>
&lt;p>&lt;strong>3. 忽略信号&lt;/strong>。当我们不希望处理某些信号的时候，就可以忽略该信号，不做任何处理。有两个信号是应用进程无法捕捉和忽略的，即 &lt;code>SIGKILL&lt;/code> 和 &lt;code>SEGSTOP&lt;/code>，它们用于在任何时候中断或结束某一进程。&lt;/p>
&lt;h3 id="socket">Socket&lt;a class="td-heading-self-link" href="#socket" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>前面提到的管道、消息队列、共享内存、信号量和信号都是在同一台主机上进行进程间通信，那要想&lt;strong>跨网络与不同主机上的进程之间通信，就需要 Socket 通信了。&lt;/strong>&lt;/p>
&lt;p>实际上，Socket 通信不仅可以跨网络与不同主机的进程间通信，还可以在同主机上进程间通信。&lt;/p>
&lt;p>我们来看看创建 socket 的系统调用：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">socket&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">domain&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#204a87;font-weight:bold">type&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">protocal&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>三个参数分别代表：&lt;/p>
&lt;ul>
&lt;li>domain 参数用来指定协议族，比如 AF_INET 用于 IPV4、AF_INET6 用于 IPV6、AF_LOCAL/AF_UNIX 用于本机；&lt;/li>
&lt;li>type 参数用来指定通信特性，比如 SOCK_STREAM 表示的是字节流，对应 TCP、SOCK_DGRAM   表示的是数据报，对应 UDP、SOCK_RAW 表示的是原始套接字；&lt;/li>
&lt;li>protocal 参数原本是用来指定通信协议的，但现在基本废弃。因为协议已经通过前面两个参数指定完成，protocol 目前一般写成 0 即可；&lt;/li>
&lt;/ul>
&lt;p>根据创建 socket 类型的不同，通信的方式也就不同：&lt;/p>
&lt;ul>
&lt;li>实现 TCP 字节流通信：socket 类型是 AF_INET 和 SOCK_STREAM；&lt;/li>
&lt;li>实现 UDP 数据报通信：socket 类型是 AF_INET 和 SOCK_DGRAM；&lt;/li>
&lt;li>实现本地进程间通信：
&lt;ul>
&lt;li>「本地字节流 socket 」类型是 AF_LOCAL 和 SOCK_STREAM&lt;/li>
&lt;li>「本地数据报 socket 」类型是 AF_LOCAL 和 SOCK_DGRAM。另外，AF_UNIX 和 AF_LOCAL 是等价的，所以 AF_UNIX 也属于本地 socket；&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>接下来，简单说一下这三种通信的编程模式。&lt;/p>
&lt;blockquote>
&lt;p>针对 TCP 协议通信的 socket 编程模型&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/iuxfg7/1619421762556-953130dd-bbfe-4a7d-ac0a-31c69ef31771.png" alt="">&lt;/p>
&lt;ul>
&lt;li>服务端和客户端初始化 &lt;code>socket&lt;/code>，得到文件描述符；&lt;/li>
&lt;li>服务端调用 &lt;code>bind&lt;/code>，将绑定在 IP 地址和端口;&lt;/li>
&lt;li>服务端调用 &lt;code>listen&lt;/code>，进行监听；&lt;/li>
&lt;li>服务端调用 &lt;code>accept&lt;/code>，等待客户端连接；&lt;/li>
&lt;li>客户端调用 &lt;code>connect&lt;/code>，向服务器端的地址和端口发起连接请求；&lt;/li>
&lt;li>服务端 &lt;code>accept&lt;/code> 返回用于传输的 &lt;code>socket&lt;/code> 的文件描述符；&lt;/li>
&lt;li>客户端调用 &lt;code>write&lt;/code> 写入数据；服务端调用 &lt;code>read&lt;/code> 读取数据；&lt;/li>
&lt;li>客户端断开连接时，会调用 &lt;code>close&lt;/code>，那么服务端 &lt;code>read&lt;/code> 读取数据的时候，就会读取到了 &lt;code>EOF&lt;/code>，待处理完数据后，服务端调用 &lt;code>close&lt;/code>，表示连接关闭。&lt;/li>
&lt;/ul>
&lt;p>这里需要注意的是，服务端调用 &lt;code>accept&lt;/code> 时，连接成功了会返回一个已完成连接的 socket，后续用来传输数据。&lt;/p>
&lt;p>所以，监听的 socket 和真正用来传送数据的 socket，是「&lt;strong>两个&lt;/strong>」 socket，一个叫作&lt;strong>监听 socket&lt;/strong>，一个叫作&lt;strong>已完成连接 socket&lt;/strong>。&lt;/p>
&lt;p>成功连接建立之后，双方开始通过 read 和 write 函数来读写数据，就像往一个文件流里面写东西一样。&lt;/p>
&lt;blockquote>
&lt;p>针对 UDP 协议通信的 socket 编程模型&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/iuxfg7/1619421762345-95e531c1-8f0d-42d3-80d2-e8981177ed74.png" alt="">&lt;/p>
&lt;p>UDP 是没有连接的，所以不需要三次握手，也就不需要像 TCP 调用 listen 和 connect，但是 UDP 的交互仍然需要 IP 地址和端口号，因此也需要 bind。&lt;/p>
&lt;p>对于 UDP 来说，不需要要维护连接，那么也就没有所谓的发送方和接收方，甚至都不存在客户端和服务端的概念，只要有一个 socket 多台机器就可以任意通信，因此每一个 UDP 的 socket 都需要 bind。&lt;/p>
&lt;p>另外，每次通信时，调用 sendto 和 recvfrom，都要传入目标主机的 IP 地址和端口。&lt;/p>
&lt;blockquote>
&lt;p>针对本地进程间通信的 socket 编程模型&lt;/p>
&lt;/blockquote>
&lt;p>本地 socket   被用于在&lt;strong>同一台主机上进程间通信&lt;/strong>的场景：&lt;/p>
&lt;ul>
&lt;li>本地 socket 的编程接口和 IPv4 、IPv6 套接字编程接口是一致的，可以支持「字节流」和「数据报」两种协议；&lt;/li>
&lt;li>本地 socket 的实现效率大大高于 IPv4 和 IPv6 的字节流、数据报 socket 实现；&lt;/li>
&lt;/ul>
&lt;p>对于本地字节流 socket，其 socket 类型是 AF_LOCAL 和 SOCK_STREAM。&lt;/p>
&lt;p>对于本地数据报 socket，其 socket 类型是 AF_LOCAL 和 SOCK_DGRAM。&lt;/p>
&lt;p>本地字节流 socket 和 本地数据报 socket 在 bind 的时候，不像 TCP 和 UDP 要绑定 IP 地址和端口，而是&lt;strong>绑定一个本地文件&lt;/strong>，这也就是它们之间的最大区别。&lt;/p>
&lt;h3 id="总结">总结&lt;a class="td-heading-self-link" href="#%e6%80%bb%e7%bb%93" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>由于每个进程的用户空间都是独立的，不能相互访问，这时就需要借助内核空间来实现进程间通信，原因很简单，每个进程都是共享一个内核空间。&lt;/p>
&lt;p>Linux 内核提供了不少进程间通信的方式，其中最简单的方式就是管道，管道分为「匿名管道」和「命名管道」。&lt;/p>
&lt;p>&lt;strong>匿名管道&lt;/strong>顾名思义，它没有名字标识，匿名管道是特殊文件只存在于内存，没有存在于文件系统中，shell 命令中的 &lt;code>|&lt;/code> 竖线就是匿名管道，通信的数据是&lt;strong>无格式的流并且大小受限&lt;/strong>，通信的方式是&lt;strong>单向&lt;/strong>的，数据只能在一个方向上流动，如果要双向通信，需要创建两个管道，再来&lt;strong>匿名管道是只能用于存在父子关系的进程间通信&lt;/strong>，匿名管道的生命周期随着进程创建而建立，随着进程终止而消失。&lt;/p>
&lt;p>&lt;strong>命名管道&lt;/strong>突破了匿名管道只能在亲缘关系进程间的通信限制，因为使用命名管道的前提，需要在文件系统创建一个类型为 p 的设备文件，那么毫无关系的进程就可以通过这个设备文件进行通信。另外，不管是匿名管道还是命名管道，进程写入的数据都是&lt;strong>缓存在内核&lt;/strong>中，另一个进程读取数据时候自然也是从内核中获取，同时通信数据都遵循&lt;strong>先进先出&lt;/strong>原则，不支持 lseek 之类的文件定位操作。&lt;/p>
&lt;p>&lt;strong>消息队列&lt;/strong>克服了管道通信的数据是无格式的字节流的问题，消息队列实际上是保存在内核的「消息链表」，消息队列的消息体是可以用户自定义的数据类型，发送数据时，会被分成一个一个独立的消息体，当然接收数据时，也要与发送方发送的消息体的数据类型保持一致，这样才能保证读取的数据是正确的。消息队列通信的速度不是最及时的，毕竟&lt;strong>每次数据的写入和读取都需要经过用户态与内核态之间的拷贝过程。&lt;/strong>&lt;/p>
&lt;p>&lt;strong>共享内存&lt;/strong>可以解决消息队列通信中用户态与内核态之间数据拷贝过程带来的开销，&lt;strong>它直接分配一个共享空间，每个进程都可以直接访问&lt;/strong>，就像访问进程自己的空间一样快捷方便，不需要陷入内核态或者系统调用，大大提高了通信的速度，享有&lt;strong>最快&lt;/strong>的进程间通信方式之名。但是便捷高效的共享内存通信，&lt;strong>带来新的问题，多进程竞争同个共享资源会造成数据的错乱。&lt;/strong>&lt;/p>
&lt;p>那么，就需要&lt;strong>信号量&lt;/strong>来保护共享资源，以确保任何时刻只能有一个进程访问共享资源，这种方式就是互斥访问。&lt;strong>信号量不仅可以实现访问的互斥性，还可以实现进程间的同步&lt;/strong>，信号量其实是一个计数器，表示的是资源个数，其值可以通过两个原子操作来控制，分别是 &lt;strong>P 操作和 V 操作&lt;/strong>。&lt;/p>
&lt;p>与信号量名字很相似的叫&lt;strong>信号&lt;/strong>，它俩名字虽然相似，但功能一点儿都不一样。信号是进程间通信机制中&lt;strong>唯一的异步通信机制&lt;/strong>，信号可以在应用进程和内核之间直接交互，内核也可以利用信号来通知用户空间的进程发生了哪些系统事件，信号事件的来源主要有硬件来源（如键盘 Cltr+C ）和软件来源（如 kill 命令），一旦有信号发生，&lt;strong>进程有三种方式响应信号 1. 执行默认操作、2. 捕捉信号、3. 忽略信号&lt;/strong>。有两个信号是应用进程无法捕捉和忽略的，即 &lt;code>SIGKILL&lt;/code> 和 &lt;code>SEGSTOP&lt;/code>，这是为了方便我们能在任何时候结束或停止某个进程。&lt;/p>
&lt;p>前面说到的通信机制，都是工作于同一台主机，如果&lt;strong>要与不同主机的进程间通信，那么就需要 Socket 通信了&lt;/strong>。Socket 实际上不仅用于不同的主机进程间通信，还可以用于本地主机进程间通信，可根据创建 Socket 的类型不同，分为三种常见的通信方式，一个是基于 TCP 协议的通信方式，一个是基于 UDP 协议的通信方式，一个是本地进程间通信方式。&lt;/p>
&lt;p>以上，就是进程间通信的主要机制了。你可能会问了，那线程通信间的方式呢？&lt;/p>
&lt;p>同个进程下的线程之间都是共享进程的资源，只要是共享变量都可以做到线程间通信，比如全局变量，所以对于线程间关注的不是通信方式，而是关注多线程竞争共享资源的问题，信号量也同样可以在线程间实现互斥与同步：&lt;/p>
&lt;ul>
&lt;li>互斥的方式，可保证任意时刻只有一个线程访问共享资源；&lt;/li>
&lt;li>同步的方式，可保证线程 A 应在线程 B 之前执行；&lt;/li>
&lt;/ul></description></item><item><title>Docs: Nginx</title><link>https://desistdaydream.github.io/docs/Web/Nginx/Nginx/</link><pubDate>Mon, 02 Nov 2020 10:39:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/Web/Nginx/Nginx/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/nginx/nginx">GitHub 项目，nginx/nginx&lt;/a>
&lt;ul>
&lt;li>原始代码：&lt;a href="https://hg.nginx.org/nginx/">https://hg.nginx.org/nginx/&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="http://nginx.org/">org 官方网站&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.nginx.com/">官方网站&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.nginx.com/products/nginx/modules/">官方网站,动态模块列表&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Nginx 称为 Engine X，可以做为 &lt;a href="https://desistdaydream.github.io/docs/Web/Web.md">Web&lt;/a> 服务器、代理服务器、缓存服务器、负载均衡器 等来使用。&lt;/p>
&lt;p>传统上基于进程或线程模型架构的 web 服务通过每进程或每线程处理并发连接请求，这势必会在网络和 I/O 操作时产生阻塞，其另一个必然结果则是对内存或 CPU 的利用率低下。生成一个新的进程/线程需要事先备好其运行时环境，这包括为其分配堆内存和栈内存，以及为其创建新的执行上下文等。这些操作都需要占用 CPU，而且过多的进程/线程还会带来线程抖动或频繁的上下文切换，系统性能也会由此进一步下降。&lt;/p>
&lt;p>在设计的最初阶段，nginx 的主要着眼点就是其高性能以及对物理计算资源的高密度利用，因此其采用了不同的架构模型。受启发于多种操作系统设计中基于“事件”的高级处理机制，nginx 采用了模块化、事件驱动、异步、单线程及非阻塞的架构，并大量采用了多路复用及事件通知机制。在 nginx 中，连接请求由为数不多的几个仅包含一个线程的进程 worker 以高效的回环(run-loop)机制进行处理，而每个 worker 可以并行处理数千个的并发连接及请求。&lt;/p>
&lt;p>Nginx 会按需同时运行多个进程：一个主进程(master)和几个工作进程(worker)，配置了缓存时还会有缓存加载器进程(cache loader)和缓存管理器进程(cache manager)等。所有进程均是仅含有一个线程，并主要通过“共享内存”的机制实现进程间通信。主进程以 root 用户身份运行，而 worker、cache loader 和 cache manager 均应以非特权用户身份运行。&lt;/p>
&lt;p>Nginx 特性：&lt;/p>
&lt;ol>
&lt;li>模块化设计，较好的扩展性，所有配置均有指定的模块进行处理。&lt;/li>
&lt;li>高可靠 master &amp;ndash;&amp;gt; worker，主控进程不接收和响应用户请求，主控进程负责解析配置文件并生成多个工作进程，工作进程来响应用户请求
&lt;ol>
&lt;li>主控进程读取并验证配置，创建或绑定套接字，启动及终止和维护 worker 进程的个数，无须重启进程让新配置的配置文件进行加载，以及完成平滑版本升级等等&lt;/li>
&lt;li>工作进程，负责缓存加载的(反向代理时候用)，负责响应用户请求，cache manager 缓存管理&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>低内存消耗，10000 个 keep-alive 模式下的 connection，仅需 2.5MB 内存&lt;/li>
&lt;li>支持热部署，不停机而更新配置文件，日志文件滚动，升级程序版本&lt;/li>
&lt;li>支持事件驱动、AIO、mmap&lt;/li>
&lt;/ol>
&lt;p>基本功能：&lt;/p>
&lt;ul>
&lt;li>静态资源的 web 服务器，能缓存打开的文件描述符&lt;/li>
&lt;li>http、SMTP、pop3 协议的反向代理服务器&lt;/li>
&lt;li>缓存加速、负载均衡&lt;/li>
&lt;li>支持 FastCGI(fpm，LNMP)，uWSGI(Python)等&lt;/li>
&lt;li>模块化(非 DSO 机制)、过滤器 zip、SSI 及图像的大小调整&lt;/li>
&lt;li>支持 SSL(https)&lt;/li>
&lt;/ul>
&lt;p>扩展功能&lt;/p>
&lt;ul>
&lt;li>基于名称和 IP 的虚拟主机&lt;/li>
&lt;li>支持 keepalive&lt;/li>
&lt;li>支持平滑升级&lt;/li>
&lt;li>定制访问日志&lt;/li>
&lt;li>支持 url 重写&lt;/li>
&lt;li>支持路径别名&lt;/li>
&lt;li>支持基于 IP 及用户的访问控制&lt;/li>
&lt;li>支持速率限制，支持并发数限制&lt;/li>
&lt;/ul>
&lt;h2 id="nginx-架构">Nginx 架构&lt;a class="td-heading-self-link" href="#nginx-%e6%9e%b6%e6%9e%84" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>详见 &lt;a href="https://desistdaydream.github.io/docs/Web/Nginx/Nginx%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.md">Nginx 源码解析&lt;/a>&lt;/p>
&lt;h2 id="总结">总结&lt;a class="td-heading-self-link" href="#%e6%80%bb%e7%bb%93" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>看似很复杂，其实总结起来 Nginx 主要就是两个功能，这两个功能也是配置文件中的主要内容，各种指令都离不开这两方面。&lt;/p>
&lt;ol>
&lt;li>定义接收流量的人口(port 或者 域名等)&lt;/li>
&lt;li>定义处理流量的规则(转发或者丢弃等)&lt;/li>
&lt;/ol>
&lt;p>所以，&lt;strong>Nginx 的本质，就是流量处理&lt;/strong>&lt;/p>
&lt;h1 id="nginx-部署">Nginx 部署&lt;a class="td-heading-self-link" href="#nginx-%e9%83%a8%e7%bd%b2" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="docker-运行-nginx">docker 运行 Nginx&lt;a class="td-heading-self-link" href="#docker-%e8%bf%90%e8%a1%8c-nginx" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>(可选)需要在宿主机的 /etc/nginx 下准备 nginx 的配置文件。这些基本配置文件可以先启动一个 nginx 容器，将容器内的配置文件全部拷贝到宿主机上即可。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker run -d --name nginx --network host --restart&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>always &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> -v /etc/nginx:/etc/nginx:ro &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> nginx:stable-alpine
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>也可以使用自己的配置来运行 nginx&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>mkdir -p /opt/nginx/conf/stream.d
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 生成配置文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cat &amp;gt; /opt/nginx/conf/nginx.conf &lt;span style="color:#4e9a06">&amp;lt;&amp;lt;EOF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">user nginx;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">worker_processes auto;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">error_log /var/log/nginx/error.log warn;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">pid /var/run/nginx.pid;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">events {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> worker_connections 1024;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">}
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">stream {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> include /etc/nginx/stream.d/*.conf;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">}
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">http {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">}
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 运行&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker run -d --name nginx --network host --restart&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>always &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> -v /opt/nginx/conf/stream.d:/etc/nginx/stream.d:ro &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> -v /opt/nginx/conf/nginx.conf:/etc/nginx/nginx.conf:ro &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> nginx:stable-alpine
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>挂载一些静态文件到容器中以响应客户端的 web 请求&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">StaticFiles&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;/root/projects/DesistDaydream/javascript-learning/9_browser&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker run -d --name nginx --network host --restart&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>always &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> -v &lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">StaticFiles&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>:/usr/share/nginx/html:ro &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> nginx:stable-alpine
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="nginx-关联文件">Nginx 关联文件&lt;a class="td-heading-self-link" href="#nginx-%e5%85%b3%e8%81%94%e6%96%87%e4%bb%b6" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;strong>/etc/nginx/&lt;/strong> # nginx 运行所需配置所在目录&lt;/p>
&lt;ul>
&lt;li>&lt;strong>./nginx.conf&lt;/strong> # nginx 主程序运行所读取的默认配置文件。&lt;/li>
&lt;/ul>
&lt;p>配置文件官方介绍：&lt;a href="https://docs.nginx.com/nginx/admin-guide/basic-functionality/managing-configuration-files/">https://docs.nginx.com/nginx/admin-guide/basic-functionality/managing-configuration-files/&lt;/a>&lt;/p>
&lt;p>修改完配置后，可以使用 nginx -s reload 命令使之生效&lt;/p>
&lt;p>下面是 nginx 默认的基本配置示例，可以实现一个简单的 web 服务。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">user&lt;/span> &lt;span style="color:#4e9a06">nginx&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># 指定以nginx用户来运行nginx进程
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">worker_processes&lt;/span> &lt;span style="color:#4e9a06">auto&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">error_log&lt;/span> &lt;span style="color:#4e9a06">/var/log/nginx/error.log&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">pid&lt;/span> &lt;span style="color:#4e9a06">/run/nginx.pid&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">include&lt;/span> &lt;span style="color:#000">/usr/share/nginx/modules/*.conf&lt;/span>; &lt;span style="color:#8f5902;font-style:italic">#包含/usr/share/nginx/modules/目录下以.conf为结尾的所有文件，加载其中的配置
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">events&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">worker_connections&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1024&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">http&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">log_format&lt;/span> &lt;span style="color:#4e9a06">main&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;&lt;/span>&lt;span style="color:#000">$remote_addr&lt;/span> &lt;span style="color:#4e9a06">-&lt;/span> &lt;span style="color:#000">$remote_user&lt;/span> &lt;span style="color:#4e9a06">[&lt;/span>&lt;span style="color:#000">$time_local]&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000">$request&amp;#34;&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#39;&lt;/span>&lt;span style="color:#000">$status&lt;/span> &lt;span style="color:#000">$body_bytes_sent&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000">$http_referer&amp;#34;&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#39;&amp;#34;&lt;/span>&lt;span style="color:#000">$http_user_agent&amp;#34;&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000">$http_x_forwarded_for&amp;#34;&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">access_log&lt;/span> &lt;span style="color:#4e9a06">/var/log/nginx/access.log&lt;/span> &lt;span style="color:#4e9a06">main&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">sendfile&lt;/span> &lt;span style="color:#000">on&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">tcp_nopush&lt;/span> &lt;span style="color:#000">on&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">tcp_nodelay&lt;/span> &lt;span style="color:#000">on&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">keepalive_timeout&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">65&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">types_hash_max_size&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2048&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">include&lt;/span> &lt;span style="color:#4e9a06">/etc/nginx/mime.types&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">default_type&lt;/span> &lt;span style="color:#4e9a06">application/octet-stream&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">include&lt;/span> &lt;span style="color:#4e9a06">/etc/nginx/conf.d/*.conf&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">server&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">listen&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">80&lt;/span> &lt;span style="color:#4e9a06">default_server&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">listen&lt;/span> &lt;span style="color:#4e9a06">[::]:80&lt;/span> &lt;span style="color:#4e9a06">default_server&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">server_name&lt;/span> &lt;span style="color:#4e9a06">_&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">root&lt;/span> &lt;span style="color:#4e9a06">/usr/share/nginx/html&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># 指定nginx的工作的/目录。i.e.location中/目录的起始位置
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">include&lt;/span> &lt;span style="color:#4e9a06">/etc/nginx/default.d/*.conf&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">location&lt;/span> &lt;span style="color:#4e9a06">/&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">error_page&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">404&lt;/span> &lt;span style="color:#4e9a06">/404.html&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">location&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">/40x.html&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">error_page&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">500&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">502&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">503&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">504&lt;/span> &lt;span style="color:#4e9a06">/50x.html&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">location&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">/50x.html&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="命令行工具">命令行工具&lt;a class="td-heading-self-link" href="#%e5%91%bd%e4%bb%a4%e8%a1%8c%e5%b7%a5%e5%85%b7" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="应用示例">应用示例&lt;a class="td-heading-self-link" href="#%e5%ba%94%e7%94%a8%e7%a4%ba%e4%be%8b" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>让nginx在前台运行，常用于container中&lt;/p>
&lt;ul>
&lt;li>&lt;code>nginx -g 'daemon off;'&lt;/code>&lt;/li>
&lt;/ul></description></item><item><title>Docs: Scheduling</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Scheduling/Scheduling/</link><pubDate>Thu, 02 Apr 2020 10:36:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Scheduling/Scheduling/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kubernetes.io/docs/concepts/scheduling-eviction/">官方文档，概念 - 调度、抢占与驱逐&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Scheduling(调度)&lt;/strong> 是一个行为，用来让 Pod 匹配到 Node，以便 Node 上的 Kubelet 可以运行这些 Pod。如果没有调度系统，Kubernetes 集群就不知道 Pod 应该运行在哪里。这种调度的概念，与 Linux 中调度任务来使用 CPU 是一个意思。可以看看 &lt;a href="https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/Scheduler.md">Scheduler&lt;/a> 相关文章，调度是在 IT 行业中，很多程序都很重要的概念。&lt;/p>
&lt;p>与 Scheduling(调度) 伴生的，还有 &lt;strong>Preemption(抢占)&lt;/strong> 与 &lt;strong>Eviction(驱逐)&lt;/strong> 两个概念。顾名思义：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Preemption(抢占)&lt;/strong> 是指终止优先级较低的 Pod 的行为，以便优先级较高的 Pod 可以在节点上调度。
&lt;ul>
&lt;li>抢占行为通常发生在资源不足时，当一个新 Pod 需要调度，但是资源不足，那么就可能需要抢占优先级低的 Pod，这个低优先级的 Pod 将会被驱逐，以便让优先级高的 Pod 运行在节点上。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Eviction(驱逐)&lt;/strong> 是指终止节点上一个或多个 Pod 的行为。&lt;/li>
&lt;/ul>
&lt;p>由 抢占 与 驱逐 两个行为，还引申出了 &lt;strong>Pod Disruption(中断)&lt;/strong> 的概念。&lt;a href="https://kubernetes.io/docs/concepts/workloads/pods/disruptions/">Pod Disruption(中断)&lt;/a> 是指节点上的 Pod 自愿或者非资源终止运行的行为。&lt;/p>
&lt;ul>
&lt;li>自愿中断是由应用程序所有者或者集群管理故意启动的(比如.维护节点前手动驱逐 Pod)&lt;/li>
&lt;li>非自愿中断是无意的，可能由不可避免的问题触发(比如.节点资源耗尽或意外删除)&lt;/li>
&lt;/ul></description></item><item><title>Docs: API 与 Resource</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/API-Resource-%E4%B8%8E-Object/API-%E4%B8%8E-Resource/</link><pubDate>Wed, 13 Nov 2019 21:49:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/API-Resource-%E4%B8%8E-Object/API-%E4%B8%8E-Resource/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kubernetes.io/docs/concepts/overview/kubernetes-api/">官方文档，概念 - 概述 - Kubernetes API&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/docs/reference/using-api/">官方文档，参考 - API 概述&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Kubernetes API 使我们可以查询和操纵 Kubernetes API 中资源的状态。Kubernetes API 符合 RESTful 规范。&lt;/p>
&lt;p>Kubernetes 把自身一切抽象理解为 &lt;strong>Resource(资源)&lt;/strong>，也叫 &lt;strong>API Resource&lt;/strong>(有地方也叫 Group Resource)。对集群的所有操作都是通过对 Kubernetes API 的 HTTP(s) 请求来实现的。可以使用命令 &lt;code>kubectl api-resources&lt;/code> 命令查看所有支持的资源。&lt;/p>
&lt;p>kubernetes 控制平面的核心是 &lt;strong>API Server&lt;/strong>。API Server 是实现了 Kubernets API 的应用程序，并为 Kubernetes 公开了一个 HTTP(s) 的 API，以供用户、集群中的不同部分和集群外部组件相互通信。&lt;/p>
&lt;p>Kubernetes 中各种资源(对象)的数据都通过 API 接口被提交到后端的持久化存储（etcd）中，Kubernetes 集群中的各部件之间通过该 API 接口实现解耦合，同时 Kubernetes 集群中一个重要且便捷的管理工具 kubectl 也是通过访问该 API 接口实现其强大的管理功能的。&lt;/p>
&lt;blockquote>
&lt;p>Note：kubectl 就是代替用户执行各种 http 请求的工具&lt;/p>
&lt;/blockquote>
&lt;p>在 Kubernetes 系统中，在大多数情况下，API 定义和实现都符合标准的 HTTP REST 格式，比如通过标准的 HTTP 动词（POST、PUT、GET、DELETE）来完成对相关资源对象的查询、创建、修改、删除等操作。但同时，Kubernetes 也为某些非标准的 REST 行为实现了附加的 API 接口，例如 Watch 某个资源的变化、进入容器执行某个操作等。另外，某些 API 接口可能违背严格的 REST 模式，因为接口返回的不是单一的 JSON 对象，而是其他类型的数据，比如 JSON 对象流或非结构化的文本日志数据等。&lt;/p>
&lt;p>另外，从另一个角度看，其实 kubernetes 就是提供了一个 web 服务，只是这个 web 服务不像传统的 B/S 架构那样，可以通过浏览器直接操作~kubernetes API 就是这个 web 服务的入口。&lt;/p>
&lt;blockquote>
&lt;p>注意：Kubernetes 的 API 与传统意义上的 API 不太一样。传统 API，一个 API 就是一个功能；而 Kubernetes API 中，一个 API 实际上又可以当作功能，也可以当作一个资源。对 API 的操作，就是对 Kubernets 资源进行操作&lt;/p>
&lt;/blockquote>
&lt;h2 id="api-resource资源-分类">API Resource(资源) 分类&lt;a class="td-heading-self-link" href="#api-resource%e8%b5%84%e6%ba%90-%e5%88%86%e7%b1%bb" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/">官方文档，参考 - kubernetes API&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.19/">1.19 版本 API 参考(一页模式)&lt;/a>(要查看其他版本，修改 URL 最后的版本号即可)。&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>资源大体可以分为下面几类：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>workload(工作负载)&lt;/strong> # 用于在集群上管理和运行容器
&lt;ul>
&lt;li>Pod，Deployment，StatefuSet，DaemonSet，Job 等&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Discovery &amp;amp; LB(服务发现及均衡)&lt;/strong> # 可以使用这些资源类型的对象将工作负载“缝合”到一个外部可访问的、负载均衡的服务中。
&lt;ul>
&lt;li>Service，Ingress 等&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Config &amp;amp; Storage(配置与存储)&lt;/strong> # 这种类型的资源是用于将初始化数据注入到应用程序中并保留容器外部数据的对象。
&lt;ul>
&lt;li>Volume，ConfigMap，secret 等&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Cluster(集群级资源)&lt;/strong> # 这种类型的资源对象定义了群集本身的配置方式。这些通常仅由集群运营商使用。
&lt;ul>
&lt;li>Namesapces,Node,Role,ClusterRole,RoleBinding,ClusterRoleBinding 等&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Metadata(元数据型资源)&lt;/strong> # 这种类型的资源是用于配置集群中其他资源行为的对象。
&lt;ul>
&lt;li>HPA，PodTemplate，LimitRange 等&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>各种资源所用的 manifest 文件中的各个字段的含义就可以参考该页面找到详解。&lt;/p>
&lt;h2 id="api-resource资源-的-url-结构">API Resource(资源) 的 URL 结构&lt;a class="td-heading-self-link" href="#api-resource%e8%b5%84%e6%ba%90-%e7%9a%84-url-%e7%bb%93%e6%9e%84" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>在 Kubernetes 中，资源的 URL 结构是由：Group（组）、Version（版本）和 Resource（资源种类）三个部分组成的。(还有一种 /metrics，/healthz 之类的结构，这里面的资源是系统自带的，不在任何组里)&lt;/p>
&lt;p>通过这样的结构，整个 Kubernetes 里的所有资源，实际上就可以用如下图的树形结构表示出来：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/sz9hgm/1616120310758-dc53a2df-2a39-45e9-92e3-9beb5d9101f0.png" alt="">&lt;/p>
&lt;p>比如，如果要创建一个 CronJob 资源&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">apiVersion&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">batch/v2alpha1&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">kind&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">CronJob&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在这个 YAML 文件中，“CronJob”就是资源的种类(Resource)，“batch”就是它的组(Group)，v2alpha1 就是它的版本(Version)。&lt;/p>
&lt;p>现阶段，有两个 API Groups 正在使用&lt;/p>
&lt;ul>
&lt;li>&lt;strong>core group(核心组)&lt;/strong> # 在/api/v1 路径下(由于某些历史原因而并没有在 &lt;code>/apis/core/v1&lt;/code> 路径下)。核心组是不需要 Group 的（即：它们 Group 是 &lt;code>&amp;quot;&amp;quot;&lt;/code>）。URI 路径为 &lt;code>/api/v1&lt;/code>，并且在定义资源的 manifest 文件中 apiVersion 字段的值不用包含组名，直接使用 v1 即可&lt;/li>
&lt;li>&lt;strong>named groups(已命名组)&lt;/strong> # URI 路径为 &lt;code>/apis/$GROUP_NAME/$VERSION&lt;/code>，在定义资源的 manifest 文件中 apiVersion 中省略 apis，使用 GroupName/Version&lt;/li>
&lt;/ul>
&lt;p>Notes:&lt;/p>
&lt;ul>
&lt;li>有的资源是 cluster 级别的(比如 node)，有的资源是 namespace 级别的(比如 pod)，对于 namespace 级别的资源，可以在 Version 和 Resource 中间添加 namespace 字段以获取指定 namespace 下的资源。i.e.&lt;code>/api/v1/namespaces/$NAMESPACE/pods/&lt;/code> (&lt;code>${NAMESPACE}&lt;/code> 就是具体的 namesapce 的名称)。&lt;/li>
&lt;li>所以 namesapce 级别资源的对象的 URI 应该像这样：&lt;code>/api/v1/namespaces/kube-system/pods/coredns-5644d7b6d9-tw4rh&lt;/code>&lt;/li>
&lt;li>而 cluster 级别资源的对象的 URI 则是：&lt;code>/api/v1/nodes/master1&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>所有资源类型要么受集群范围限制（&lt;code>/apis/GROUP/VERSION/_&lt;/code>），要么受命名空间限制（&lt;code>/apis/GROUP/VERSION/namespaces/NAMESPACE/_&lt;/code>）&lt;/strong>&lt;/p>
&lt;p>集群范围的资源：&lt;/p>
&lt;ul>
&lt;li>GET /apis/GROUP/VERSION/RESOURCETYPE # 返回指定资源类型的资源集合(返回的是一个 list 列表，比如 NodeList 等)&lt;/li>
&lt;li>GET /apis/GROUP/VERSION/RESOURCETYPE/NAME # 返回指定资源类型下名为 NAME 的的资源&lt;/li>
&lt;/ul>
&lt;p>名称空间范围的资源：&lt;/p>
&lt;ul>
&lt;li>GET /apis/GROUP/VERSION/RESOURCETYPE # 返回所有名称空间指定资源类型的实例集合(返回的是一个 list 列表，比如 podList、serviceList 等)&lt;/li>
&lt;li>GET /apis/GROUP/VERSION/namespaces/NAMESPACE/RESOURCETYPE # 返回 NAMESPACE 下指定 ResourceType 的所有实例集合(返回的是一个 list 列表，比如 podList、serviceList 等)&lt;/li>
&lt;li>GET /apis/GROUP/VERSION/namespaces/NAMESPACE/RESOURCETYPE/NAME # 返回 NAMESPACE 下指定 ResourceType，名为 NAME 的实例&lt;/li>
&lt;/ul>
&lt;h1 id="declarative-api声明式-api-的特点">Declarative API(声明式 API) 的特点：&lt;a class="td-heading-self-link" href="#declarative-api%e5%a3%b0%e6%98%8e%e5%bc%8f-api-%e7%9a%84%e7%89%b9%e7%82%b9" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;ul>
&lt;li>首先，所谓 &lt;strong>Declarative(声明式)&lt;/strong>，指的就是我只需要提交一个定义好的 API 对象来 &lt;strong>Declarative(声明)&lt;/strong> 我所期望的状态是什么样子。&lt;/li>
&lt;li>其次，“声明式 API”允许有多个 API 写端，以 PATCH 的方式对 API 对象进行修改，而无需关心本地原始 YAML 文件的内容。&lt;/li>
&lt;li>最后，也是最重要的，有了上述两个能力，Kubernetes 项目才可以基于对 API 对象的增、删、改、查，在完全无需外界干预的情况下，完成对“实际状态”和“期望状态”的调谐（Reconcile）过程。&lt;/li>
&lt;/ul>
&lt;p>所以说，声明式 API，才是 Kubernetes 项目编排能力“赖以生存”的核心所在。而想要实现 声明式 API，离不开 Controller 控制器，K8S 的大脑 的工作。&lt;/p>
&lt;h1 id="api-url-使用示例">API URL 使用示例&lt;a class="td-heading-self-link" href="#api-url-%e4%bd%bf%e7%94%a8%e7%a4%ba%e4%be%8b" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>下面是在 1.18.8 版本下获取到的 api 路径结构&lt;/p>
&lt;p>根路径将列出所有可用路径&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">~]#&lt;/span> &lt;span style="color:#a40000">curl&lt;/span> &lt;span style="color:#a40000">--cacert&lt;/span> &lt;span style="color:#a40000">/etc/kubernetes/pki/ca.crt&lt;/span> &lt;span style="color:#a40000">-H&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Authorization: Bearer ${TOKEN}&amp;#34;&lt;/span> &lt;span style="color:#a40000">https:&lt;/span>&lt;span style="color:#8f5902;font-style:italic">//172.38.40.215:6443/ -s
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;paths&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;/api&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;/api/v1&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;/apis&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;/apis/&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;/apis/admissionregistration.k8s.io&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;/apis/admissionregistration.k8s.io/v1&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;/apis/admissionregistration.k8s.io/v1beta1&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;/apis/apiextensions.k8s.io&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;/apis/apiextensions.k8s.io/v1&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;/apis/apiextensions.k8s.io/v1beta1&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;/apis/apiregistration.k8s.io&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">......&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果访问到错误的资源，还会返回 404 的响应码&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">~]#&lt;/span> &lt;span style="color:#a40000">curl&lt;/span> &lt;span style="color:#a40000">-s&lt;/span> &lt;span style="color:#a40000">--cacert&lt;/span> &lt;span style="color:#a40000">/etc/kubernetes/pki/ca.crt&lt;/span> &lt;span style="color:#a40000">-H&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Authorization: Bearer ${TOKEN}&amp;#34;&lt;/span> &lt;span style="color:#a40000">https:&lt;/span>&lt;span style="color:#8f5902;font-style:italic">//172.38.40.215:6443/api/v1/service
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;kind&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Status&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;apiVersion&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;v1&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;metadata&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;status&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Failure&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;message&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;the server could not find the requested resource&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;reason&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;NotFound&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;details&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;code&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">404&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在“组/版本”下面可以看到该“组/版本”下所包含的 API 资源列表&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">~]#&lt;/span> &lt;span style="color:#a40000">curl&lt;/span> &lt;span style="color:#a40000">-s&lt;/span> &lt;span style="color:#a40000">--cacert&lt;/span> &lt;span style="color:#a40000">/etc/kubernetes/pki/ca.crt&lt;/span> &lt;span style="color:#a40000">-H&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Authorization: Bearer ${TOKEN}&amp;#34;&lt;/span> &lt;span style="color:#a40000">https:&lt;/span>&lt;span style="color:#8f5902;font-style:italic">//172.38.40.215:6443/api/v1/
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;kind&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;APIResourceList&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;groupVersion&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;v1&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;resources&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">.......&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;name&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;configmaps&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;singularName&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;namespaced&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;kind&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;ConfigMap&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;verbs&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;create&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;delete&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;deletecollection&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;get&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;list&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;patch&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;update&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;watch&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;shortNames&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;cm&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;storageVersionHash&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;qFsyl6wFWjQ=&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;name&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;endpoints&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;singularName&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;namespaced&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;kind&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Endpoints&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;verbs&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;create&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;delete&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;deletecollection&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;get&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;list&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;patch&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;update&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;watch&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;shortNames&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;ep&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;storageVersionHash&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;fWeeMqaN/OA=&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">......&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在“资源”下可以看到该“资源”下所包含的所有对象，下图是 pod 资源的列表，包含所有 pod 对象及其信息&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">~]#&lt;/span> &lt;span style="color:#a40000">curl&lt;/span> &lt;span style="color:#a40000">-s&lt;/span> &lt;span style="color:#a40000">--cacert&lt;/span> &lt;span style="color:#a40000">/etc/kubernetes/pki/ca.crt&lt;/span> &lt;span style="color:#a40000">-H&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Authorization: Bearer ${TOKEN}&amp;#34;&lt;/span> &lt;span style="color:#a40000">https:&lt;/span>&lt;span style="color:#8f5902;font-style:italic">//172.38.40.215:6443/api/v1/pods | more
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;kind&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;PodList&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;apiVersion&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;v1&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;metadata&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;selfLink&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;/api/v1/pods&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;resourceVersion&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;618871&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;items&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;metadata&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;name&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;cattle-cluster-agent-cc6ddc6dc-7f89l&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;generateName&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;cattle-cluster-agent-cc6ddc6dc-&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;namespace&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;cattle-system&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;selfLink&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;/api/v1/namespaces/cattle-system/pods/cattle-cluster-agent-cc6ddc6dc-7f89l&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;uid&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;72f4a825-feb2-416a-900d-d8401acc9a18&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;resourceVersion&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;452264&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;creationTimestamp&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;2020-09-13T09:59:49Z&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;labels&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;app&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;cattle-cluster-agent&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;pod-template-hash&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;cc6ddc6dc&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;ownerReferences&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;apiVersion&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;apps/v1&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;kind&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;ReplicaSet&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;name&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;cattle-cluster-agent-cc6ddc6dc&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;uid&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;7d4b6cbe-d6d1-46e3-99e5-8410095880c7&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;controller&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;blockOwnerDeletion&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;managedFields&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">......&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: KVM/QEMU 命令行工具</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Virtualization-implementation/KVM_QEMU/KVM_QEMU-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/KVM_QEMU-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</link><pubDate>Thu, 17 Oct 2019 11:02:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Virtualization-implementation/KVM_QEMU/KVM_QEMU-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/KVM_QEMU-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.qemu.org/docs/master/system/qemu-manpage.html">官方文档，QEMU 用户文档&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.qemu.org/docs/master/system/invocation.html">官方文档，系统模拟-Invocation&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.qemu.org/docs/master/tools/index.html">官方文档，工具&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>KVM/QEMU 的虚拟机的生命周期是通过一系列 KVM/QEMU 工具集管理的，包括&lt;/p>
&lt;ul>
&lt;li>&lt;strong>qemu-img&lt;/strong> # 虚拟机镜像管理工具&lt;/li>
&lt;li>&lt;strong>qemu-system-$ARCH&lt;/strong> # 虚拟机运行时管理工具。
&lt;ul>
&lt;li>注意：在 CentOS 系统中，该二进制文件的名字是 qemu-kvm，并且是一个在 /usr/local/bin/qemu-kvm 指向 /usr/libexec/qemu-kvm 的软链接&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>等等&lt;/li>
&lt;/ul>
&lt;p>通常情况下，我们不管是通过 virt-manager 程序创建的虚拟机、还是使用 Libvirt 工具包创建的虚拟机，本质上，都是调用的 &lt;strong>qemu-img、qemu-system-x86_64&lt;/strong> 等工具。&lt;/p>
&lt;p>如果用容器比较的话&lt;/p>
&lt;ul>
&lt;li>qemu-img 像各种容器镜像管理工具&lt;/li>
&lt;li>qemu-system-x86_64 像 runc&lt;/li>
&lt;/ul>
&lt;h1 id="qemu-img">qemu-img&lt;a class="td-heading-self-link" href="#qemu-img" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Virtualization%20implementation/KVM_QEMU/KVM_QEMU%20%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/qemu-img.md">qemu-img&lt;/a>&lt;/p>
&lt;h1 id="qemu-system">qemu-system&lt;a class="td-heading-self-link" href="#qemu-system" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Virtualization%20implementation/KVM_QEMU/KVM_QEMU%20%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/qemu-system.md">qemu-system&lt;/a>&lt;/p></description></item><item><title>Docs: Kubernetes</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes/</link><pubDate>Fri, 14 Jun 2019 09:28:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kubernetes.io/docs/concepts/overview/">官方文档，概念 - 概述&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://labs.play-with-k8s.com/">play with kubernetes&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Kubernetes 是一套编排系统，编排目标是实现了 &lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization/Containerization.md">Containerization&lt;/a>(容器化) 的容器。&lt;/p>
&lt;p>Borg 是谷歌内部的容器管理系统，Kuberntes 根据 Borg 的思路使用 &lt;a href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go.md">Go&lt;/a> 语言重新开发，2015 年 7 月份发布&lt;/p>
&lt;p>特性：&lt;/p>
&lt;ol>
&lt;li>自我修复：一个 pod 崩了，可以在 1 秒启动，pod 比较轻量，kill 掉崩的容器再启动一个，所以一般情况一个 deployment 会启动多个 pod&lt;/li>
&lt;li>自动实现水平扩展：一个 pod 不够，再起一个&lt;/li>
&lt;li>自动服务发现和自动负载均衡：当在 k8s 上运行很多程序的时候，通过服务发现，找到所依赖的服务，且多个相同 pod 可以实现自动负载均衡&lt;/li>
&lt;li>自动发布与回滚&lt;/li>
&lt;li>支持密钥和配置管理：云原声应用，基于环境变量进行配置，需要一个外部组件，当镜像启动为容器的时候，可以自动去外部组件加载相关配置，这个配置中心就是 etcd&lt;/li>
&lt;li>存储编排&lt;/li>
&lt;li>任务的批量处理执行&lt;/li>
&lt;/ol>
&lt;p>Google 成立 CNCF，让各大公司共同管理，并把 Kubernetes 贡献给 &lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/%E4%BA%91%E5%8E%9F%E7%94%9F/CNCF.md">CNCF&lt;/a>，所以 Kubernetes 不会闭源。&lt;/p>
&lt;h1 id="kubernetes-架构">Kubernetes 架构&lt;a class="td-heading-self-link" href="#kubernetes-%e6%9e%b6%e6%9e%84" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;p>&lt;a href="https://kubernetes.io/docs/concepts/architecture/">官方文档，概念 - 集群架构&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>Kubernetes 集群由代表 Control Palne(控制平面) 和 一组 Nodes(节点) 的机器组成。&lt;/p>
&lt;p>&lt;img src="Excalidraw/k8s-arch.excalidraw.md" alt="k8s-arch.excalidraw|1000">&lt;/p>
&lt;h2 id="control-plane-components控制平面组件">Control Plane Components(控制平面组件)&lt;a class="td-heading-self-link" href="#control-plane-components%e6%8e%a7%e5%88%b6%e5%b9%b3%e9%9d%a2%e7%bb%84%e4%bb%b6" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="api-server">API Server&lt;a class="td-heading-self-link" href="#api-server" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>实现程序：kube-apiserver&lt;/p>
&lt;p>&lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/API%20Resource%20%E4%B8%8E%20Object/API%20Server/API%20Server.md">API Server&lt;/a>&lt;/p>
&lt;h3 id="etcd">Etcd&lt;a class="td-heading-self-link" href="#etcd" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>&lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Etcd/Etcd.md">Etcd&lt;/a>&lt;/p>
&lt;h3 id="scheduler">Scheduler&lt;a class="td-heading-self-link" href="#scheduler" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>实现程序：kube-scheduler&lt;/p>
&lt;p>&lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Scheduling/Scheduling.md">Scheduling&lt;/a>&lt;/p>
&lt;h3 id="controller-manager">Controller Manager&lt;a class="td-heading-self-link" href="#controller-manager" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>实现程序：kube-controller-manager&lt;/p>
&lt;p>&lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Controller/Controller.md">Controller&lt;/a>&lt;/p>
&lt;h2 id="node-components节点组件">Node Components(节点组件)&lt;a class="td-heading-self-link" href="#node-components%e8%8a%82%e7%82%b9%e7%bb%84%e4%bb%b6" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="kubelet">Kubelet&lt;a class="td-heading-self-link" href="#kubelet" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>&lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubelet/Kubelet.md">Kubelet&lt;/a>&lt;/p>
&lt;h3 id="kube-proxy">kube-proxy&lt;a class="td-heading-self-link" href="#kube-proxy" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>&lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes%20%E7%BD%91%E7%BB%9C/kube-proxy/kube-proxy.md">kube-proxy&lt;/a>&lt;/p>
&lt;h3 id="container-runtime">Container runtime&lt;a class="td-heading-self-link" href="#container-runtime" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>&lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubelet/Runtime.md">Runtime&lt;/a>&lt;/p>
&lt;h2 id="addons附加组件">Addons(附加组件)&lt;a class="td-heading-self-link" href="#addons%e9%99%84%e5%8a%a0%e7%bb%84%e4%bb%b6" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="dns">DNS&lt;a class="td-heading-self-link" href="#dns" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>DNS，core&lt;/p>
&lt;h3 id="webui">WebUI&lt;a class="td-heading-self-link" href="#webui" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>Dashboard 提供 web 界面的&lt;/p>
&lt;h3 id="container-resource-monitoring容器资源监控">Container Resource Monitoring(容器资源监控)&lt;a class="td-heading-self-link" href="#container-resource-monitoring%e5%ae%b9%e5%99%a8%e8%b5%84%e6%ba%90%e7%9b%91%e6%8e%a7" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>heapster：是 Kubernetes 原生的集群监控方案。Heapster 以 Pod 的形式运行，它会自动发现集群节点、从节点上的 Kubelet 获取监控数据。Kubelet 则是从节点上的 cAdvisor 收集数据。
&lt;ul>
&lt;li>Heapster 将数据按照 Pod 进行分组，将它们存储到预先配置的 backend 并进行可视化展示。Heapster 当前支持的 backend 有 InfluxDB（通过 Grafana 展示），Google Cloud Monitoring 等。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ingress&lt;/li>
&lt;/ul>
&lt;h3 id="cluster-level-logging集群级日志">Cluster-level Logging(集群级日志)&lt;a class="td-heading-self-link" href="#cluster-level-logging%e9%9b%86%e7%be%a4%e7%ba%a7%e6%97%a5%e5%bf%97" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;h1 id="kuberntes-api-接口">Kuberntes API 接口&lt;a class="td-heading-self-link" href="#kuberntes-api-%e6%8e%a5%e5%8f%a3" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>官方文档: &lt;a href="https://kubernetes.io/docs/concepts/overview/kubernetes-api/">https://kubernetes.io/docs/concepts/overview/kubernetes-api/&lt;/a>&lt;/p>
&lt;p>Kubernetes API 使您可以查询和操纵 Kubernetes 中对象的状态。 Kubernetes 控制平面的核心是 API 服务器和它公开的 HTTP API。用户，集群的不同部分以及外部组件都通过 API 服务器相互通信。&lt;/p>
&lt;h1 id="kubernetes-objects对象">Kubernetes Objects(对象)&lt;a class="td-heading-self-link" href="#kubernetes-objects%e5%af%b9%e8%b1%a1" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>官方文档: &lt;a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/">https://kubernetes.io/docs/concepts/overview/working-with-objects/&lt;/a>&lt;/p>
&lt;p>Kubernetes &lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/API%20Resource%20%E4%B8%8E%20Object/Object.md">Object&lt;/a> 是 Kubernetes 系统中的持久实体。 Kubernetes 使用这些实体来表示您的集群状态。了解 Kubernetes 对象模型以及如何使用这些对象。&lt;/p>
&lt;h2 id="kubernetes-所有用-kubectl-creat-出来的都可以理解为是一种对象">kubernetes 所有用 kubectl creat 出来的都可以理解为是一种对象&lt;a class="td-heading-self-link" href="#kubernetes-%e6%89%80%e6%9c%89%e7%94%a8-kubectl-creat-%e5%87%ba%e6%9d%a5%e7%9a%84%e9%83%bd%e5%8f%af%e4%bb%a5%e7%90%86%e8%a7%a3%e4%b8%ba%e6%98%af%e4%b8%80%e7%a7%8d%e5%af%b9%e8%b1%a1" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>workload：Pod，ReplicaSet，Deployment，StatefuSet()，DaemonSet，Job&lt;/li>
&lt;li>服务发现及均衡：Service，Ingress&lt;/li>
&lt;li>配置与存储：Volume
&lt;ul>
&lt;li>ConfiMap，secret&lt;/li>
&lt;li>DownwardAPI&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>集群级对象：Namesapces,Node,Role,ClusterRole,RoleBinding,ClusterRoleBinding&lt;/li>
&lt;li>元数据型对象：PodTemplate，LimitRange&lt;/li>
&lt;/ul>
&lt;p>每个对象所引用的路径格式为：/api/GROUP/VERSION/namespaces/NAMESPACES/TYPE/NAME&lt;/p>
&lt;p>可以使用命令 kubectl api-resources 命令查看所有可以创建为对象的资源&lt;/p>
&lt;h1 id="基本概念">基本概念&lt;a class="td-heading-self-link" href="#%e5%9f%ba%e6%9c%ac%e6%a6%82%e5%bf%b5" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;strong>Cluster：所有运行 kubernetes 的设备的合计&lt;/strong>&lt;/p>
&lt;p>Cluster 是计算、存储和网络资源的集合，Kubernetes 利用这些资源运行各种基于容器的应用。&lt;/p>
&lt;p>&lt;strong>Master ：控制 kubernetes 的 cluster&lt;/strong>&lt;/p>
&lt;p>Master 是 Cluster 的大脑，它的主要职责是调度，即决定将应用放在哪里运行。Master 运行 Linux 操作系统，可以是物理机或者虚拟机。为了实现高可用，可以运行多个 Master。&lt;/p>
&lt;p>&lt;strong>Node ：运行 kuberntes 的 node&lt;/strong>&lt;/p>
&lt;p>Node 的职责是运行容器应用。Node 由 Master 管理，Node 负责监控并汇报容器的状态，并根据 Master 的要求管理容器的生命周期。Node 运行在 Linux 操作系统，可以是物理机或者是虚拟机。&lt;/p>
&lt;p>&lt;strong>Pod：Kubernetes 的最小工作单元&lt;/strong>&lt;/p>
&lt;p>Pod 是 Kubernetes 的最小工作单元。每个 Pod 包含一个或多个容器。Pod 中的容器会作为一个整体被 Master 调度到一个 Node 上运行。
Kubernetes 引入 Pod 主要基于下面两个目的：&lt;/p>
&lt;ul>
&lt;li>可管理性。
&lt;ul>
&lt;li>有些容器天生就是需要紧密联系，一起工作。Pod 提供了比容器更高层次的抽象，将它们封装到一个部署单元中。Kubernetes 以 Pod 为最小单位进行调度、扩展、共享资源、管理生命周期。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>通信和资源共享。
&lt;ul>
&lt;li>Pod 中的所有容器使用同一个网络 namespace，即相同的 IP 地址和 Port 空间。它们可以直接用 localhost 通信。同样的，这些容器可以共享存储，当 Kubernetes 挂载 volume 到 Pod，本质上是将 volume 挂载到 Pod 中的每一个容器。user,mnt,pnt。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Pods 有两种使用方式：&lt;/p>
&lt;ul>
&lt;li>运行单一容器。
&lt;ul>
&lt;li>one-container-per-Pod 是 Kubernetes 最常见的模型，这种情况下，只是将单个容器简单封装成 Pod。即便是只有一个容器，Kubernetes 管理的也是 Pod 而不是直接管理容器。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>运行多个容器。
&lt;ul>
&lt;li>这些容器联系必须非常紧密，而且需要直接共享资源的应该放到一个 Pod 中(注意：当使用多容器的时候，其中一个容器要加上 command 的参数，否则其中一个起不来来)
&lt;ul>
&lt;li>比如：File Puller 会定期从外部的 Content Manager 中拉取最新的文件，将其存放在共享的 volume 中。Web Server 从 volume 读取文件，响应 Consumer 的请求。这两个容器是紧密协作的，它们一起为 Consumer 提供最新的数据；同时它们也通过 volume 共享数据。所以放到一个 Pod 是合适的。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Scheduler（kube-scheduler）：调度 POD&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Scheduler 负责决定将 Pod 放在哪个 Node 上运行。Scheduler 在调度时会充分考虑 Cluster 的拓扑结构，当前各个节点的负载，以及应用对高可用、性能、数据亲和性的需求。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Controller：执行运行 POD 的任务&lt;/strong>&lt;/p>
&lt;p>控制器，Kubernetes 一般情况人们不会直接创建 Pod，而是通过创建 Controller 来管理 Pod 的。Controller 中定义了 Pod 的部署特性，比如有几个副本，在什么样的 Node 上运行等。为了满足不同的业务场景，Kubernetes 提供了多种 Controller，包括 Deployment、ReplicaSet、DaemonSet、StatefuleSet、Job 等，我们逐一讨论。一般创建 POD，都是直接创建 Deployment 的 kind，然后定义该 Deployment 下有几个 pod 的副本，一般情况至少有俩，保证 pod 的高可用。注意：deployment 下创建的多个 pod 的功能和内容是一模一样的，多个 pod 被分配到多个节点，以便实现负载均衡和高可用，pod 比较轻量，就算挂了一个，还可以自动销毁后再自动启动一个，所以，不要把一个 deployment 下的多个 pod 分开理解，他们是一个整体&lt;/p>
&lt;p>&lt;strong>label selector：标签选择器，简称 selector&lt;/strong>&lt;/p>
&lt;p>可以给 kubernetes 中所有 node，resource 等等打上标签，然后让某个资源使用 selector 来选择具有相同标签的 Node 或 resource 成为同一组来协调工作或者进行各种限定&lt;/p>
&lt;p>比如具有相同标签的 Pod 和 Node，该 Pod 会使用 selector 选择在该 Node 上运行，该 Pod 对该 Node 具有倾向性；或者把具有相同标签的 Service 和 Pod 关联起来，使 Service 使用 selector 知道可以选择哪些 Pod 来进行调度&lt;/p>
&lt;p>&lt;strong>Service：服务发现，执行访问 POD 的任务&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Deployment 可以部署多个副本，每个 Pod 都有自己的 IP，外界如何访问这些副本呢？通过 Pod 的 IP 吗？&lt;/li>
&lt;li>要知道 Pod 很可能会被频繁地销毁和重启，它们的 IP 会发生变化，用 IP 来访问不太现实。答案是 Service。Service 作为访问 Pod 的接入层来使用&lt;/li>
&lt;li>Kubernetes Service 定义了外界访问一组特定 Pod 的方式。Service 有自己的 IP 和端口，Service 为 Pod 提供了负载均衡。&lt;/li>
&lt;li>可以把 service 想象成负载均衡功能的前端，该 Service 下的 pod 是负载均衡功能的后端,通过类似 nat 的方式，访问 service 的 IP:PORT，然后转发数据到后端的 pod，注意：在转发到后端 Pod 之前，Service 会先把请求转发到 Endpoints 后再转发到 Pod&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>kube-proxy：转发 Service 的流量到 POD&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>service 在逻辑上代表了后端的多个 Pod，外界通过 service 访问 Pod。service 接收到的请求是如何转发到 Pod 的呢？这就是 kube-proxy 要完成的工作。接管系统的 iptables，所有到达 Service 的请求，都会根据 proxy 所定义的 iptables 的规则，进行 nat 转发&lt;/li>
&lt;li>每个 Node 都会运行 kube-proxy 服务，它负责将访问 service 的 TCP/UPD 数据流转发到后端的容器。如果有多个副本，kube-proxy 会实现负载均衡。&lt;/li>
&lt;li>每个 Service 的变动(创建，改动，摧毁)都会通知 proxy，在 proxy 所在的本节点创建响应的 iptables 规则，如果 Service 后端的 Pod 摧毁后重新建立了，那么就是靠 proxy 来把 pod 信息提供给 Service。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Kubernetes 的网络&lt;/strong>&lt;/p>
&lt;p>kubernetes 的整体网络分为以下三类&lt;/p>
&lt;ul>
&lt;li>Node IP，各节点网络&lt;/li>
&lt;li>Cluster IP，Service 网络，虚拟的，是主机上 iptables 规则中的地址&lt;/li>
&lt;li>Pod IP，Pod 网络
&lt;ul>
&lt;li>同一个 Pod 内的多个容器间通信，通过各容器的 lo 通信&lt;/li>
&lt;li>各 Pod 之间的通信
&lt;ul>
&lt;li>overlay 叠加网络转发二层报文，通过隧道方式转发三层报文&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Pod 与 Service 之间的通信，&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>通过 CNI(Container Network Interface 容器网络接口)来使用第三方 plugin 实现网络的解决方案&lt;/p>
&lt;ul>
&lt;li>flannel，叠加网络，不支持网络策略&lt;/li>
&lt;li>calico，三层隧道网络，可基于 BGP 协议，即支持网络配置也支持网络策略&lt;/li>
&lt;li>canel，&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Namespace：隔离资源&lt;/strong>&lt;/p>
&lt;p>官方文档: &lt;a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/">https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/&lt;/a>&lt;/p>
&lt;p>该 Namespace 与平时所接触的 Namespace 不一样，这是 kubernetes 专用的另一种。如果有多个用户或项目组使用同一个 Kubernetes Cluster，如何将他们创建的 Controller、Pod 等资源分开呢？&lt;/p>
&lt;p>答案就是 Namespace。&lt;/p>
&lt;p>Namespace 可以将一个物理的 Cluster 逻辑上划分成多个虚拟 Cluster，每个 Cluster 就是一个 Namespace。不同 Namespace 里的资源是完全隔离的。&lt;/p>
&lt;p>Kubernetes 默认创建了两个 Namespace。&lt;/p>
&lt;ul>
&lt;li>default &amp;ndash; 创建资源时如果不指定，将被放到这个 Namespace 中。&lt;/li>
&lt;li>kube-system &amp;ndash; Kubernetes 自己创建的系统资源将放到这个 Namespace 中&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>API Server（kube-apiserver）&lt;/strong>&lt;/p>
&lt;p>API Server 提供 HTTP/HTTPS RESTful API，即 Kubernetes API。API Server 是 Kubernetes Cluster 的前端接口，各种客户端工具（CLI 或 UI）以及 Kubernetes 其他组件可以通过它管理 Cluster 的各种资源。kubectl 就是 API Server 的客户端程序，实现 k8s 各种资源的增删改查&lt;/p>
&lt;p>&lt;strong>ETCD&lt;/strong>&lt;/p>
&lt;p>作为 kubernetes 集群的存储系统使用，保存了集群的所有配置信息，需要高可用，如果需要在生产环境下使用，则需要在单独部署&lt;/p>
&lt;p>&lt;strong>Volume 卷&lt;/strong>&lt;/p>
&lt;p>Volume 的工作流程：可以把 volume 想象成一个中间人，数据流走向：Container—Volum—StorageResource&lt;/p>
&lt;p>Volume 的应用场景&lt;/p>
&lt;p>在 container 中的磁盘文件是短暂的，这对于 fornon-trivial 类型的 APP 来说会有一些问题。第一，当 container 崩溃时，kubelet 会重启它，但是文件都将丢失并且 container 以最干净的状态启动；第二，当在 Pod 中运行多个 container 的时候，这些 container 需要共享文件以实现功能。Volume 就是为了解决上面两种情况出现的。&lt;/p>
&lt;p>volume 定义了一个逻辑卷，该逻辑卷有多种类型，不同的类型可以把不同的存储资源当成 volume 使用(比如内存，文件，分区，网络存储等等)。当我们给 Pod 指定一个 volume 类型后，还需要给该类型的 volume 指定一个可以存放数据的地方；这样，在 container 使用 volume 的时候，可以把自己的数据存放在 volume 所指定的存储资源的地方&lt;/p>
&lt;p>&lt;strong>认证&lt;/strong>&lt;/p>
&lt;p>etcd 内部，etcd 与 apiservice，apiservice-客户端，apiservice 与 kubectl，apiservice 与 kube-proxy&lt;/p>
&lt;p>客户端与服务端的概念&lt;/p>
&lt;p>谁向谁发请求，前者就是客户端，所在在这里，客户端与服务端没有绝对，一个服务既可以是客户端也可以是服务端&lt;/p>
&lt;h2 id="pod-被创建的简单流程">Pod 被创建的简单流程&lt;a class="td-heading-self-link" href="#pod-%e8%a2%ab%e5%88%9b%e5%bb%ba%e7%9a%84%e7%ae%80%e5%8d%95%e6%b5%81%e7%a8%8b" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/te78l0/1616120984034-51654ec9-735a-4eb1-b033-c4dd648cd2d7.png" alt="800">&lt;/p>
&lt;ol>
&lt;li>kubectl 发送部署 Deployment 资源的请求到 API Server。&lt;/li>
&lt;li>API Server 通知 Controller Manager 创建一个 Deployment 资源。&lt;/li>
&lt;li>API Server 通知 Scheduler 执行调度任务，将两个副本 Pod 分发到 k8s-node1 和 k8s-node2。&lt;/li>
&lt;li>API Server 通知 k8s-node1 和 k8s-node2 上的 kubelet 在各自的节点上创建并运行 Pod。&lt;/li>
&lt;/ol>
&lt;p>补充几点：&lt;/p>
&lt;ul>
&lt;li>更详细的流程详见 &lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes%20%E6%9C%BA%E5%88%B6%E4%B8%8E%E7%89%B9%E6%80%A7/Pod%20%E6%98%AF%E5%A6%82%E4%BD%95%E5%87%BA%E7%8E%B0%E7%9A%84.md">Pod 是如何出现的&lt;/a>&lt;/li>
&lt;li>API Server 的通知是利用 &lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes%20%E6%9C%BA%E5%88%B6%E4%B8%8E%E7%89%B9%E6%80%A7/Watch%20and%20Informer.md">Watch and Informer&lt;/a> 机制实现的。各个组件主动与 API Server 建立长连接，接收 API Server 的通知&lt;/li>
&lt;li>应用的配置和当前状态信息保存在 Etcd 中，每一步操作完的结果都会经由 API Server 将信息更新到 Etcd 中。最后执行 &lt;code>kubectl get pod&lt;/code> 时 API Server 会从 etcd 中读取这些数据。&lt;/li>
&lt;li>flannel 会为每个 Pod 都分配 IP。因为没有创建 service，目前 kube-proxy 还没参与进来。&lt;/li>
&lt;/ul>
&lt;h1 id="待整理文章">待整理文章&lt;a class="td-heading-self-link" href="#%e5%be%85%e6%95%b4%e7%90%86%e6%96%87%e7%ab%a0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="node-节点">Node 节点&lt;a class="td-heading-self-link" href="#node-%e8%8a%82%e7%82%b9" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="控制平面到-node-的通信">控制平面到 Node 的通信&lt;a class="td-heading-self-link" href="#%e6%8e%a7%e5%88%b6%e5%b9%b3%e9%9d%a2%e5%88%b0-node-%e7%9a%84%e9%80%9a%e4%bf%a1" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>本文列举控制面节点（确切说是 API 服务器）和 Kubernetes 集群之间的通信路径。 目的是为了让用户能够自定义他们的安装，以实现对网络配置的加固，使得集群能够在不可信的网络上 （或者在一个云服务商完全公开的 IP 上）运行。&lt;/p>
&lt;p>节点到控制面&lt;/p>
&lt;p>Kubernetes 采用的是中心辐射型（Hub-and-Spoke）API 模式。 所有从集群（或所运行的 Pods）发出的 API 调用都终止于 apiserver（其它控制面组件都没有被设计为可暴露远程服务）。 apiserver 被配置为在一个安全的 HTTPS 端口（443）上监听远程连接请求， 并启用一种或多种形式的客户端身份认证机制。 一种或多种客户端鉴权机制应该被启用， 特别是在允许使用匿名请求 或服务账号令牌的时候。&lt;/p>
&lt;p>应该使用集群的公共根证书开通节点，这样它们就能够基于有效的客户端凭据安全地连接 apiserver。 例如：在一个默认的 GCE 部署中，客户端凭据以客户端证书的形式提供给 kubelet。 请查看 kubelet TLS 启动引导 以了解如何自动提供 kubelet 客户端证书。&lt;/p>
&lt;p>想要连接到 apiserver 的 Pod 可以使用服务账号安全地进行连接。 当 Pod 被实例化时，Kubernetes 自动把公共根证书和一个有效的持有者令牌注入到 Pod 里。 kubernetes 服务（位于所有名字空间中）配置了一个虚拟 IP 地址，用于（通过 kube-proxy）转发 请求到 apiserver 的 HTTPS 末端。&lt;/p>
&lt;p>控制面组件也通过安全端口与集群的 apiserver 通信。&lt;/p>
&lt;p>这样，从集群节点和节点上运行的 Pod 到控制面的连接的缺省操作模式即是安全的，能够在不可信的网络或公网上运行。&lt;/p>
&lt;p>控制面到节点&lt;/p>
&lt;p>从控制面（apiserver）到节点有两种主要的通信路径。 第一种是从 apiserver 到集群中每个节点上运行的 kubelet 进程。 第二种是从 apiserver 通过它的代理功能连接到任何节点、Pod 或者服务。&lt;/p>
&lt;p>API 服务器到 kubelet&lt;/p>
&lt;p>从 apiserver 到 kubelet 的连接用于：&lt;/p>
&lt;ul>
&lt;li>获取 Pod 日志&lt;/li>
&lt;li>挂接（通过 kubectl）到运行中的 Pod&lt;/li>
&lt;li>提供 kubelet 的端口转发功能。&lt;/li>
&lt;/ul>
&lt;p>这些连接终止于 kubelet 的 HTTPS 末端。 默认情况下，apiserver 不检查 kubelet 的服务证书。这使得此类连接容易受到中间人攻击， 在非受信网络或公开网络上运行也是 不安全的。&lt;/p>
&lt;p>为了对这个连接进行认证，使用 &amp;ndash;kubelet-certificate-authority 标志给 apiserver 提供一个根证书包，用于 kubelet 的服务证书。&lt;/p>
&lt;p>如果无法实现这点，又要求避免在非受信网络或公共网络上进行连接，可在 apiserver 和 kubelet 之间使用 SSH 隧道。&lt;/p>
&lt;p>最后，应该启用 Kubelet 用户认证和/或鉴权 来保护 kubelet API。&lt;/p>
&lt;p>apiserver 到节点、Pod 和服务&lt;/p>
&lt;p>从 apiserver 到节点、Pod 或服务的连接默认为纯 HTTP 方式，因此既没有认证，也没有加密。 这些连接可通过给 API URL 中的节点、Pod 或服务名称添加前缀 https: 来运行在安全的 HTTPS 连接上。 不过这些连接既不会验证 HTTPS 末端提供的证书，也不会提供客户端证书。 因此，虽然连接是加密的，仍无法提供任何完整性保证。 这些连接 目前还不能安全地 在非受信网络或公共网络上运行。&lt;/p>
&lt;p>SSH 隧道&lt;/p>
&lt;p>Kubernetes 支持使用 SSH 隧道来保护从控制面到节点的通信路径。在这种配置下，apiserver 建立一个到集群中各节点的 SSH 隧道（连接到在 22 端口监听的 SSH 服务） 并通过这个隧道传输所有到 kubelet、节点、Pod 或服务的请求。 这一隧道保证通信不会被暴露到集群节点所运行的网络之外。&lt;/p>
&lt;p>SSH 隧道目前已被废弃。除非你了解个中细节，否则不应使用。 Konnectivity 服务是对此通信通道的替代品。&lt;/p>
&lt;p>Konnectivity 服务&lt;/p>
&lt;p>FEATURE STATE: Kubernetes v1.18 [beta]&lt;/p>
&lt;p>作为 SSH 隧道的替代方案，Konnectivity 服务提供 TCP 层的代理，以便支持从控制面到集群的通信。 Konnectivity 服务包含两个部分：Konnectivity 服务器和 Konnectivity 代理，分别运行在 控制面网络和节点网络中。Konnectivity 代理建立并维持到 Konnectivity 服务器的网络连接。 启用 Konnectivity 服务之后，所有控制面到节点的通信都通过这些连接传输。&lt;/p>
&lt;p>请浏览 Konnectivity 服务任务 在你的集群中配置 Konnectivity 服务。&lt;/p>
&lt;h2 id="controller-控制器">Controller 控制器&lt;a class="td-heading-self-link" href="#controller-%e6%8e%a7%e5%88%b6%e5%99%a8" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>官方文档：&lt;a href="https://kubernetes.io/docs/concepts/architecture/controller/">https://kubernetes.io/docs/concepts/architecture/controller/&lt;/a>&lt;/p>
&lt;p>&lt;strong>控制器模式是 Kubernetes 的重要设计原则之一&lt;/strong>&lt;/p>
&lt;p>在机器人技术和自动化领域，控制回路（Control Loop）是一个非终止回路，用于调节系统状态。&lt;/p>
&lt;p>这是一个控制环的例子：房间里的温度自动调节器。&lt;/p>
&lt;p>当你设置了温度，告诉了温度自动调节器你的期望状态（Desired State）。 房间的实际温度是当前状态（Current State）。 通过对设备的开关控制，温度自动调节器让其当前状态接近期望状态。&lt;/p>
&lt;p>控制器通过 apiserver 监控集群的公共状态，并致力于将当前状态转变为期望的状态。&lt;/p>
&lt;p>&lt;strong>控制器模式&lt;/strong>&lt;/p>
&lt;p>一个控制器至少追踪一种类型的 Kubernetes 资源。这些 对象 有一个代表期望状态的 spec 字段。 该资源的控制器负责确保其当前状态接近期望状态。&lt;/p>
&lt;p>控制器可能会自行执行操作；在 Kubernetes 中更常见的是一个控制器会发送信息给 API 服务器，这会有副作用。 具体可参看后文的例子。&lt;/p>
&lt;p>通过 API 服务器来控制&lt;/p>
&lt;p>Job 控制器是一个 Kubernetes 内置控制器的例子。 内置控制器通过和集群 API 服务器交互来管理状态。&lt;/p>
&lt;p>Job 是一种 Kubernetes 资源，它运行一个或者多个 Pod， 来执行一个任务然后停止。 （一旦被调度了，对 kubelet 来说 Pod 对象就会变成了期望状态的一部分）。&lt;/p>
&lt;p>在集群中，当 Job 控制器拿到新任务时，它会保证一组 Node 节点上的 kubelet 可以运行正确数量的 Pod 来完成工作。 Job 控制器不会自己运行任何的 Pod 或者容器。Job 控制器是通知 API 服务器来创建或者移除 Pod。 控制面中的其它组件 根据新的消息作出反应（调度并运行新 Pod）并且最终完成工作。&lt;/p>
&lt;p>创建新 Job 后，所期望的状态就是完成这个 Job。Job 控制器会让 Job 的当前状态不断接近期望状态：创建为 Job 要完成工作所需要的 Pod，使 Job 的状态接近完成。&lt;/p>
&lt;p>控制器也会更新配置对象。例如：一旦 Job 的工作完成了，Job 控制器会更新 Job 对象的状态为 Finished。&lt;/p>
&lt;p>（这有点像温度自动调节器关闭了一个灯，以此来告诉你房间的温度现在到你设定的值了）。&lt;/p>
&lt;p>&lt;strong>直接控制&lt;/strong>&lt;/p>
&lt;p>相比 Job 控制器，有些控制器需要对集群外的一些东西进行修改。&lt;/p>
&lt;p>例如，如果你使用一个控制环来保证集群中有足够的节点，那么控制就需要当前集群外的一些服务在需要时创建新节点。&lt;/p>
&lt;p>和外部状态交互的控制器从 API 服务器获取到它想要的状态，然后直接和外部系统进行通信并使当前状态更接近期望状态。&lt;/p>
&lt;p>（实际上有一个控制器可以水平地扩展集群中的节点。请参阅 集群自动扩缩容）。&lt;/p>
&lt;p>&lt;strong>期望状态与当前状态&lt;/strong>&lt;/p>
&lt;p>Kubernetes 采用了系统的云原生视图，并且可以处理持续的变化。&lt;/p>
&lt;p>在任务执行时，集群随时都可能被修改，并且控制回路会自动修复故障。这意味着很可能集群永远不会达到稳定状态。&lt;/p>
&lt;p>只要集群中控制器的在运行并且进行有效的修改，整体状态的稳定与否是无关紧要的。&lt;/p>
&lt;p>&lt;strong>设计&lt;/strong>&lt;/p>
&lt;p>作为设计原则之一，Kubernetes 使用了很多控制器，每个控制器管理集群状态的一个特定方面。 最常见的一个特定的控制器使用一种类型的资源作为它的期望状态， 控制器管理控制另外一种类型的资源向它的期望状态演化。&lt;/p>
&lt;p>使用简单的控制器而不是一组相互连接的单体控制回路是很有用的。 控制器会失败，所以 Kubernetes 的设计正是考虑到了这一点。&lt;/p>
&lt;p>说明：&lt;/p>
&lt;p>可以有多个控制器来创建或者更新相同类型的对象。 在后台，Kubernetes 控制器确保它们只关心与其控制资源相关联的资源。&lt;/p>
&lt;p>例如，你可以创建 Deployment 和 Job；它们都可以创建 Pod。 Job 控制器不会删除 Deployment 所创建的 Pod，因为有信息 （标签）让控制器可以区分这些 Pod。&lt;/p>
&lt;p>&lt;strong>运行控制器的方式&lt;/strong>&lt;/p>
&lt;p>Kubernetes 内置一组控制器，运行在 kube-controller-manager 内。 这些内置的控制器提供了重要的核心功能。&lt;/p>
&lt;p>Deployment 控制器和 Job 控制器是 Kubernetes 内置控制器的典型例子。 Kubernetes 允许你运行一个稳定的控制平面，这样即使某些内置控制器失败了， 控制平面的其他部分会接替它们的工作。&lt;/p>
&lt;p>你会遇到某些控制器运行在控制面之外，用以扩展 Kubernetes。 或者，如果你愿意，你也可以自己编写新控制器。 你可以以一组 Pod 来运行你的控制器，或者运行在 Kubernetes 之外。 最合适的方案取决于控制器所要执行的功能是什么&lt;/p></description></item><item><title>Docs: 📹11.多媒体</title><link>https://desistdaydream.github.io/docs/11.%E5%A4%9A%E5%AA%92%E4%BD%93/11.%E5%A4%9A%E5%AA%92%E4%BD%93/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/11.%E5%A4%9A%E5%AA%92%E4%BD%93/11.%E5%A4%9A%E5%AA%92%E4%BD%93/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Multimedia">Multimedia&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Multimedia(多媒体)&lt;/strong> 是一种通信形式，它使用不同的内容形式（例如&lt;a href="https://en.wikipedia.org/wiki/Text_(literary_theory)" title="文本（文学理论）">文本&lt;/a>、&lt;a href="https://en.wikipedia.org/wiki/Sound" title="声音">音频&lt;/a>、&lt;a href="https://en.wikipedia.org/wiki/Image" title="图像">图像&lt;/a>、&lt;a href="https://en.wikipedia.org/wiki/Animation" title="动画片">动画&lt;/a>或&lt;a href="https://en.wikipedia.org/wiki/Video" title="视频">视频）&lt;/a>组合成一个单一的交互式演示，这与传统的大众媒体（例如印刷材料或录音）不同，后者的功能很少用户之间没有交互。流行的多媒体示例包括视频播客、音频幻灯片和动画视频。多媒体还包含有效交互通信的原理和应用，例如软件、硬件和其他技术的构建块。多媒体的五个主要组成部分是文本、图像、音频、视频和动画。&lt;/p>
&lt;h1 id="学习">学习&lt;a class="td-heading-self-link" href="#%e5%ad%a6%e4%b9%a0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;a href="https://www.bilibili.com/video/BV1kN411B7gx">B 站-差评君，从上传到被观看，一个视频到底都经历了什么？【差评君】&lt;/a>&lt;/p>
&lt;h1 id="名词解释">名词解释&lt;a class="td-heading-self-link" href="#%e5%90%8d%e8%af%8d%e8%a7%a3%e9%87%8a" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>帧&lt;/p>
&lt;p>帧宽度&lt;/p>
&lt;p>帧高度&lt;/p>
&lt;p>帧率&lt;/p>
&lt;p>编解码器&lt;/p>
&lt;p>帧总数&lt;/p>
&lt;p>格式&lt;/p>
&lt;p>模式&lt;/p>
&lt;p>亮度&lt;/p>
&lt;p>对比度&lt;/p>
&lt;p>饱和度&lt;/p>
&lt;p>色调&lt;/p>
&lt;p>增益&lt;/p>
&lt;p>曝光&lt;/p>
&lt;p>RGB&lt;/p>
&lt;p>白平衡&lt;/p>
&lt;p>矫正&lt;/p>
&lt;p>摩尔纹&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.bilibili.com/video/BV1uA4m1A73x">B 站 - 影视飓风，这是什么？摩尔纹。&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>分辨率、帧率、码率&lt;/p>
&lt;h1 id="帧率">帧率&lt;a class="td-heading-self-link" href="#%e5%b8%a7%e7%8e%87" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;a href="https://www.bilibili.com/video/BV1hp4y1f7B5">影视飓风将停止制作25帧视频&lt;/a> 介绍了各种帧率的历史&lt;/p>
&lt;p>25 50&lt;/p>
&lt;p>30 60&lt;/p>
&lt;p>29.97 59.94&lt;/p></description></item><item><title>Docs: 12.AI</title><link>https://desistdaydream.github.io/docs/12.AI/12.AI/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/12.AI/12.AI/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Artificial_intelligence">Wiki, Artificial_intelligence&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Artificial intelligence(人工智能，简称 AI)&lt;/strong> 是机器所展示的智能，与人类和其他动物的智能相对应。AI 通常包含语音识别、&lt;a href="https://desistdaydream.github.io/docs/12.AI/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89.md">计算机视觉&lt;/a>、&lt;a href="https://desistdaydream.github.io/docs/12.AI/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86.md">自然语言处理&lt;/a>、以及其他输入的映射&lt;/p>
&lt;p>随着机器的能力越来越强，被认为需要“智能”的任务通常从 AI 的定义中删除，这种现象被称为 AI 效应。例如，&lt;a href="https://desistdaydream.github.io/docs/12.AI/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/OCR.md">OCR&lt;/a> 经常被排除在被认为是人工智能的事物之外，已成为一项常规技术。&lt;/p>
&lt;p>TODO,名词解释：&lt;/p>
&lt;ul>
&lt;li>拟合&lt;/li>
&lt;li>回归&lt;/li>
&lt;li>Embedding&lt;/li>
&lt;li>凸优化&lt;/li>
&lt;/ul>
&lt;p>AI 好像不等于机器。。不像机器精确执行 01 指令。。AI 的本质好像是数学，并且是数学中的统计学，AI 的每一次判断都是一次概率统计然后输出概率大的内容。&lt;/p>
&lt;p>TODO: 本质上是将 数学问题转为数值计算问题？因为机器不认识加减乘除这些符号，但是又要训练机器学会这些，那么机器就要学会 101 如何变成 111 这类？&lt;/p>
&lt;h2 id="人工智能发展阶段">人工智能发展阶段&lt;a class="td-heading-self-link" href="#%e4%ba%ba%e5%b7%a5%e6%99%ba%e8%83%bd%e5%8f%91%e5%b1%95%e9%98%b6%e6%ae%b5" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/24811027">https://zhuanlan.zhihu.com/p/24811027&lt;/a>&lt;/p>
&lt;p>&lt;strong>运算智能、感知智能、认知智能&lt;/strong>&lt;/p>
&lt;p>&lt;strong>一是运算智能&lt;/strong>，即快速计算和记忆存储能力。人工智能所涉及的各项技术的发展是不均衡的。现阶段计算机比较具有优势的是运算能力和存储能力。1996 年 IBM 的深蓝计算机战胜了当时的国际象棋冠军卡斯帕罗夫，从此，人类在这样的强运算型的比赛方面就不能战胜机器了。&lt;/p>
&lt;p>&lt;strong>二是感知智能&lt;/strong>，即视觉、听觉、触觉等感知能力。人和动物都具备，能够通过各种智能感知能力与自然界进行交互。自动驾驶汽车，就是通过激光雷达等感知设备和人工智能算法，实现这样的感知智能的。机器在感知世界方面，比人类还有优势。人类都是被动感知的，但是机器可以主动感知，如：激光雷达、微波雷达和红外雷达。不管是 Big Dog 这样的感知机器人，还是自动驾驶汽车，因为充分利用了 DNN 和大数据的成果，机器在感知智能方面已越来越接近于人类。&lt;/p>
&lt;ul>
&lt;li>早期的计算机视觉属于感知智能，只能认识图片，而无法知道图片中所表达的意思。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>三是认知智能&lt;/strong>。通俗讲是“能理解会思考”。人类有语言，才有概念，才有推理，所以概念、意识、观念等都是人类认知智能的表现。典型的自然语言处理，就需要认知智能。&lt;/p>
&lt;ul>
&lt;li>第一层是语言理解&lt;/li>
&lt;li>第二层是分析、推理&lt;/li>
&lt;li>第三层是人格和情感&lt;/li>
&lt;/ul>
&lt;h2 id="技术脉络关系">技术脉络关系&lt;a class="td-heading-self-link" href="#%e6%8a%80%e6%9c%af%e8%84%89%e7%bb%9c%e5%85%b3%e7%b3%bb" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>个人总结：&lt;/p>
&lt;p>如果人工智能的本质是数学计算，那么首先出现的是辅助计算的工具，比如 NumPy、Torch，然后利用这些计算能力，发展出让机器学习的工具，TensorFlow、PyTorch 等，最后通过机器学习，训练出来可用的各种基本模型，比如 Transformer。&lt;/p>
&lt;ul>
&lt;li>NumPy、Torch 提供计算能力&lt;/li>
&lt;li>TensorFlow、PyTorch 依赖计算能力实现的用于机器学习的框架&lt;/li>
&lt;li>Transformer 使用学习框架生成模型，Transformer 一般是指一个过程、工具集，而不是单指一种模型，很多模型是通过 Transformer 工具使用或训练。&lt;/li>
&lt;/ul>
&lt;h1 id="机器学习">机器学习&lt;a class="td-heading-self-link" href="#%e6%9c%ba%e5%99%a8%e5%ad%a6%e4%b9%a0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/ai/20230524101934.png" alt="image.png">&lt;/p>
&lt;p>&lt;a href="https://desistdaydream.github.io/docs/12.AI/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0.md">机器学习&lt;/a>源于对 AI 的探索。在人工智能作为一门学科的早期，一些研究人员对让机器从数据中学习很感兴趣。他们试图用各种符号方法以及当时称为“神经网络”的方法来解决这个问题。&lt;/p>
&lt;p>后来，机器学习更多的依赖&lt;a href="https://desistdaydream.github.io/docs/12.AI/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Model.md">&lt;strong>模型&lt;/strong>&lt;/a>。&lt;/p>
&lt;h1 id="agi">AGI&lt;a class="td-heading-self-link" href="#agi" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Artificial_general_intelligence">Wiki, Artificial general intelligence&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Artificial General Intelligence(通用人工智能，简称 AGI)&lt;/strong> 是一种假设的&lt;a href="https://en.wikipedia.org/wiki/Intelligent_agent" title="智能代理">智能体&lt;/a>，它可以理解或学习&lt;a href="https://en.wikipedia.org/wiki/Human_intelligence" title="人类智慧">人类&lt;/a>或&lt;a href="https://en.wikipedia.org/wiki/Animal_cognition" title="动物认知">其他动物&lt;/a>可以完成的任何智力任务。&lt;/p>
&lt;h1 id="aigc">AIGC&lt;a class="td-heading-self-link" href="#aigc" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;strong>Artificial Inteligence Generated Content(人工智能生产内容，简称 AIGC)&lt;/strong>&lt;/p>
&lt;h1 id="ai-公司">AI 公司&lt;a class="td-heading-self-link" href="#ai-%e5%85%ac%e5%8f%b8" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>OpenAI&lt;/p>
&lt;p>Anthropic&lt;/p>
&lt;p>MiniMax # 北京稀宇科技有限公司。官网神秘未知。WPS AI 使用该公司的模型&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.glowapp.tech/">https://www.glowapp.tech/&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Runway &lt;a href="https://runwayml.com/">https://runwayml.com/&lt;/a>&lt;/p>
&lt;ul>
&lt;li>Gen-2 多模态 AI 模型，支持文本生成视频、图像生成视频、视频生成视频&lt;/li>
&lt;/ul>
&lt;h1 id="学习资料">学习资料&lt;a class="td-heading-self-link" href="#%e5%ad%a6%e4%b9%a0%e8%b5%84%e6%96%99" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="b-站">B 站&lt;a class="td-heading-self-link" href="#b-%e7%ab%99" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://www.bilibili.com/list/group/210003/421004">科技区官方账号，AIGC 合集&lt;/a>&lt;/p>
&lt;p>NLP 入门的，不知道谁录的课，有多个 UP 投稿&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.bilibili.com/video/BV1WG411G7mr">https://www.bilibili.com/video/BV1WG411G7mr&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.bilibili.com/video/BV1RY4y1P7Lc">https://www.bilibili.com/video/BV1RY4y1P7Lc&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>唐宇迪&lt;/p>
&lt;ul>
&lt;li>这哥们在 B 站一堆账号。。。o(╯□╰)o&lt;/li>
&lt;li>好像没一个真的，知乎好像是有说明： &lt;a href="https://www.zhihu.com/question/277554784/answer/2253481966">https://www.zhihu.com/question/277554784/answer/2253481966&lt;/a>
&lt;ul>
&lt;li>知乎这个看着像真的，他说自己不在 B 站发视频 &lt;a href="https://www.zhihu.com/people/tangyudi/answers">https://www.zhihu.com/people/tangyudi/answers&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://chenzomi12.github.io/index.html">AI系统 &amp;amp; 深度学习系统&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/chenzomi12/DeepLearningSystem">GitHub 项目，chenzomi12/DeepLearningSystem&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>B 站-ZOMI 酱&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://space.bilibili.com/517221395/channel/collectiondetail?sid=1778334">合集，合集·【大模型】AI集群&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://space.bilibili.com/568468320">B 站 - 学不会电磁场&lt;/a>&lt;/p>
&lt;h1 id="待总结名词">待总结名词&lt;a class="td-heading-self-link" href="#%e5%be%85%e6%80%bb%e7%bb%93%e5%90%8d%e8%af%8d" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>Embedding&lt;/p></description></item><item><title>Docs: Access Control</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Access-Control/Access-Control/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Access-Control/Access-Control/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/vhwA-1UrE_6R7lICCMpG6A">RBAC 的演进历史、设计理念及简洁实现&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Access Control(访问控制)&lt;/strong>&lt;/p>
&lt;h2 id="译者序">译者序&lt;a class="td-heading-self-link" href="#%e8%af%91%e8%80%85%e5%ba%8f" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>本文翻译自 2021 年的一篇英文博客：RBAC like it was meant to be[1]。&lt;/p>
&lt;p>很多系统（例如 Kubernetes）都在使用某种形式的 RBAC 做权限 / 访问控制。&lt;/p>
&lt;p>本文基于 access control 的发展历史，从设计层面分析了&lt;code>DAC -&amp;gt; MAC -&amp;gt; RBAC -&amp;gt; ABAC&lt;/code>的演进历程及各模型的优缺点、适用场景等， 然后从实际需求出发，一步一步地设计出一个实用、简洁、真正符合 RBAC 理念的访问控制系统。&lt;/p>
&lt;p>&lt;strong>由于译者水平有限，本文不免存在遗漏或错误之处。如有疑问，请查阅原文。&lt;/strong>&lt;/p>
&lt;p>以下是译文。&lt;/p>
&lt;hr>
&lt;p>大部分人都听说过&lt;strong>基于角色的访问控制&lt;/strong>（role-based access control, RBAC）以及它 的后继演进版&lt;strong>基于属性的访问控制&lt;/strong>（attribute-based access control, ABAC）， 但我们经常遗忘或不懂得欣赏其中的伟大思想。&lt;/p>
&lt;p>大部分如今常见的 RBAC 系统都经过了某种程度的简化，因此比最初的设计要弱一些。而本文想要说明，只要回到 RBAC 最初的设计，我们就能构建一个真正的 RBAC/ABAC 安全模型[2]，它比你能见到的那些系统更简单而强大，而且不管网络规模大还是小，它都能适用。&lt;/p>
&lt;p>客户经常跟我们反馈说，他们如何震惊于如下事实：在 Tailscale 平台上，只用如此少的规则就能表达他们的安全策略。这并非偶然！但在解释为什么之前，我们先来回顾一些历史。&lt;/p>
&lt;p>RBAC/ABAC 的概念和术语都源自几十年前的美国军方。[Role-Based Access Controls (Ferraiolo and Kuhn, 1992)](https://www.researchgate.net/publication/24164143_Role-Based_Access_Controls&amp;gt; &amp;ldquo;Role-Based Access Controls (Ferraiolo and Kuhn, 1992&amp;quot;Role-Based Access Controls (Ferraiolo and Kuhn, 1992)&amp;rdquo;)&amp;quot;) 是一篇很好的介绍。下面来看一下它们的一些演进过程。&lt;/p>
&lt;h2 id="11-dac自主访问控制各文件-owner-自主设置文件权限">1.1 DAC（自主访问控制）：各文件 owner 自主设置文件权限&lt;a class="td-heading-self-link" href="#11-dac%e8%87%aa%e4%b8%bb%e8%ae%bf%e9%97%ae%e6%8e%a7%e5%88%b6%e5%90%84%e6%96%87%e4%bb%b6-owner-%e8%87%aa%e4%b8%bb%e8%ae%be%e7%bd%ae%e6%96%87%e4%bb%b6%e6%9d%83%e9%99%90" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>最早出现的是 DAC（Discretionary Access Control），直到今天仍然很常见。&lt;/p>
&lt;h3 id="设计">设计&lt;a class="td-heading-self-link" href="#%e8%ae%be%e8%ae%a1" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>如下图所示，在 DAC 中 object owner 有权设置该 object 的访问权限。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/ef62c7f4-2473-4713-a153-66b5d85aa2f0/640" alt="">&lt;/p>
&lt;p>通过授予 individuals/groups 以 read/write/execute 权限， object (file) 的创建者能完全控制该 object 的内容和权限。&lt;/p>
&lt;p>例如，&lt;/p>
&lt;ol>
&lt;li>在 Unix 系统中，设置 file permission（“模式”，这也是 &lt;code>chmod&lt;/code> change mode 的来历） 就能授予别人 &lt;code>读 / 写 / 执行&lt;/code> 这个文件的权限。&lt;/li>
&lt;li>在 Google Doc 中，点击 share 按钮能授予权限。&lt;/li>
&lt;/ol>
&lt;h3 id="使用场景普通用户的文件权限控制">使用场景：普通用户的文件权限控制&lt;a class="td-heading-self-link" href="#%e4%bd%bf%e7%94%a8%e5%9c%ba%e6%99%af%e6%99%ae%e9%80%9a%e7%94%a8%e6%88%b7%e7%9a%84%e6%96%87%e4%bb%b6%e6%9d%83%e9%99%90%e6%8e%a7%e5%88%b6" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>军方不怎么喜欢 DAC，因为这种方式中，合规性很难保证，机密文件很容易被恶意 reshare 出去。&lt;/li>
&lt;li>但在普通用户场景中，这种方式还是很常用也很合理的。&lt;/li>
&lt;/ul>
&lt;h2 id="12-mac强制访问控制强制由专门的-admin-设置文件权限">1.2 MAC（强制访问控制）：（强制由）专门的 admin 设置文件权限&lt;a class="td-heading-self-link" href="#12-mac%e5%bc%ba%e5%88%b6%e8%ae%bf%e9%97%ae%e6%8e%a7%e5%88%b6%e5%bc%ba%e5%88%b6%e7%94%b1%e4%b8%93%e9%97%a8%e7%9a%84-admin-%e8%ae%be%e7%bd%ae%e6%96%87%e4%bb%b6%e6%9d%83%e9%99%90" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;blockquote>
&lt;p>注意：不要把 MAC (mandatory access control) 与网络术语 &amp;ldquo;MAC address&amp;rdquo; 中的 MAC (media access address) 搞混了，二者没有任何关系，只是碰巧缩写相同。&lt;/p>
&lt;/blockquote>
&lt;h3 id="设计dac-基础上引入专门的-admin-角色">设计：DAC 基础上引入专门的 admin 角色&lt;a class="td-heading-self-link" href="#%e8%ae%be%e8%ae%a1dac-%e5%9f%ba%e7%a1%80%e4%b8%8a%e5%bc%95%e5%85%a5%e4%b8%93%e9%97%a8%e7%9a%84-admin-%e8%a7%92%e8%89%b2" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>MAC (Mandatory access control) 对 DAC 做了增强。如下图所示， 由 administrator（管理员）或 administrative rule（管理员级别的规则） 来定义 rules。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/ef62c7f4-2473-4713-a153-66b5d85aa2f0/640" alt="">&lt;/p>
&lt;p>文件 owner 只能设置一个文件 type，这个 type 包含了哪些权限是由 admin 或 policy 设置的。用户能编辑文件内容，但无法修改文件权限。&lt;/p>
&lt;p>因此在 MAC 模型中，一个人做某些事情的 能力是无法再分享给其他人的，从而避免了文件被 reshare 的问题。&lt;/p>
&lt;h3 id="例子tcpudp-端口号">例子：TCP/UDP 端口号&lt;a class="td-heading-self-link" href="#%e4%be%8b%e5%ad%90tcpudp-%e7%ab%af%e5%8f%a3%e5%8f%b7" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>MAC 很难解释，因为在实际中很少看到它，甚至看到了之后，你都不觉得它是 “访问控制”。&lt;/p>
&lt;p>Wikipedia 给了一个很好的例子：TCP 或 UDP 端口号。当你占用了一个 local port 之后（假设没设置 SO_REUSEADDR[3]）， 这台机器上的其他任何人就都无法再用这个端口号了 —— 不管他们是什么级别的特权用户。这里，端口范围不可重叠这一条件，就是强制性的（mandatory）。&lt;/p>
&lt;h3 id="适用场景文档--系统访问控制">适用场景：文档 / 系统访问控制&lt;a class="td-heading-self-link" href="#%e9%80%82%e7%94%a8%e5%9c%ba%e6%99%af%e6%96%87%e6%a1%a3--%e7%b3%bb%e7%bb%9f%e8%ae%bf%e9%97%ae%e6%8e%a7%e5%88%b6" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>之前关于 file locking[4] 的文章中，我讨论了 advisory locks 和 mandatory locks 之间的区别：&lt;/p>
&lt;ul>
&lt;li>advisory lock：其他 apps 可以安全地读这个文件；&lt;/li>
&lt;li>mandatory lock：按照规则，其他不允许 apps 读任何内容。&lt;/li>
&lt;/ul>
&lt;p>可以看出，MAC 适用于对文档或系统的访问控制，这就不难理解为什么 军方对 MAC —— 至少在理论上 —— 如此兴奋了。理想场景：&lt;/p>
&lt;ul>
&lt;li>一个带锁的房间，门口有警卫站岗，&lt;/li>
&lt;li>出示门禁卡能进入这个房间，&lt;/li>
&lt;li>但警卫禁止携带相机进入房间。&lt;/li>
&lt;/ul>
&lt;p>在这种场景下，你自己有权限查看房间内的文档，但无法将其分享给其他人。&lt;/p>
&lt;p>这个例子给我们的一个启示是：数字系统中，MAC 在理论要比在实际中简单（easier in theory than in practice）。&lt;/p>
&lt;ul>
&lt;li>一个功能完整的（full-on）MAC 系统是很难真正实现的。&lt;/li>
&lt;li>Digital restrictions management(DRM，数字限制管理) 是 MAC 的 一种，在这种模型中，文件的接收方无法再将文件分享给别人—— 每个 BitTorrent 用户都能体会到这种方式是如何奏效的。&lt;/li>
&lt;/ul>
&lt;h2 id="13-mac-之双因素登录two-factor-login-as-mac">1.3 MAC 之双因素登录（two-factor login as MAC）&lt;a class="td-heading-self-link" href="#13-mac-%e4%b9%8b%e5%8f%8c%e5%9b%a0%e7%b4%a0%e7%99%bb%e5%bd%95two-factor-login-as-mac" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>大家可能没意识到，另一种 MAC 是 multi-factor authentication (MFA or 2FA):&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/ef62c7f4-2473-4713-a153-66b5d85aa2f0/640" alt="">&lt;/p>
&lt;p>2FA as MAC：密码可以共享，但硬件 token 不能。密码是 DAC，而硬件 token 是 MAC。&lt;/p>
&lt;p>用 MFA 能允许特定的人登录一台计算机或服务，如果这个人不是管理员（admin），那他 自己能登录，但将无法进一步将计算机共享给其他人，将密码告诉他们也不行。&lt;/p>
&lt;p>这种 login 是强制性的（mandatory，单有密码不行，还必须有硬件 token 才能登录）。在这个模型中，假设了第二因素（the second factor，即硬件 token）是不可分享的。&lt;/p>
&lt;h2 id="14-图片分享dacmac-模型比较">1.4 图片分享：DAC/MAC 模型比较&lt;a class="td-heading-self-link" href="#14-%e5%9b%be%e7%89%87%e5%88%86%e4%ba%abdacmac-%e6%a8%a1%e5%9e%8b%e6%af%94%e8%be%83" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>另一个例子是分享图片。&lt;/p>
&lt;ul>
&lt;li>在某些服务中，任何有正确 secret URL 的人都能访问给定的图片 / 消息 / 文件，并且任何有这个 URL 的人都能继续分享它，这是 DAC 模式。&lt;/li>
&lt;li>在另一些服务中，单有这个 URL 还不行，必须要登录有权限查看这个文件的账号之后， 才能 reshare：这 MAC 模式。虽然某些人能通过特定的 URL 访问 这个文件，但 reshre 这个 URL 并不能让其他人看到这个文件。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>当然，如果一个人能下载这个文件，然后发送副本给别人，那结果还是泄露了这个文件 。这也是为什么一些人认为 secret URL 的安全性在数学上与 MAC 是等价的，因为现在 分享 URL 已经和分享文件一样难了。但二者有一个区别：你可以关闭一个 URL 的共享，但无法追回一个已经发送出去的文件副本。&lt;/p>
&lt;/blockquote>
&lt;h2 id="15-mac-概念限制太多又好像没什么限制">1.5 MAC 概念：限制太多，又好像没什么限制&lt;a class="td-heading-self-link" href="#15-mac-%e6%a6%82%e5%bf%b5%e9%99%90%e5%88%b6%e5%a4%aa%e5%a4%9a%e5%8f%88%e5%a5%bd%e5%83%8f%e6%b2%a1%e4%bb%80%e4%b9%88%e9%99%90%e5%88%b6" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>历史上，军方中的 MAC 是围绕 multi-level security[5] 构建的，这里的设计思想是：并非只有 admin 和 non-admin 两种用户，实际上有很多层的访问。他们最初将其设想为同心圆（“最高机密许可”、“机密许可” 等等），但最后证明 表达力太弱（too unexpressive）。&lt;/p>
&lt;p>如今的访问控制更像是独立的 flags 或 subgroups。例如， SELinux 提供了对每个进程内的每个权限的细粒度控制，而传统 Unix/Linux 上只有 root 和常规用户权限的区分。但最终证明 SELinux 这套东西是噩梦般的复杂， 难以真正实用 —— 除非你在 NSA（发明 SELinux 的机构）工作，但即使 你在 NSA 也不一定会用。&lt;/p>
&lt;p>最终来说，MAC 的概念证明是过于限制又过于模糊（both too restrictive and too vague）。当人们谈论 MAC 时，我们很难搞清楚他们到底指的是什么，唯一知道是：这东西用起来非常让人抓狂。&lt;/p>
&lt;h2 id="21-rbac基于角色的访问控制">2.1 RBAC（基于角色的访问控制）&lt;a class="td-heading-self-link" href="#21-rbac%e5%9f%ba%e4%ba%8e%e8%a7%92%e8%89%b2%e7%9a%84%e8%ae%bf%e9%97%ae%e6%8e%a7%e5%88%b6" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>RBAC 是 MAC 的一个子集，它是一种特殊类型的 MAC，更加具体，因此 在讨论及使用上会更加方便。&lt;/p>
&lt;p>RBAC 与常见的 users/groups 模型类似。在 RBAC 中，&lt;/p>
&lt;ul>
&lt;li>admin 将某些 user 放到一个 group，然后&lt;/li>
&lt;li>可以指定将某些资源（文件、计算机等）共享给某个 group（role）；&lt;/li>
&lt;li>系统确保只有指定的 role 能访问指定的资源；&lt;/li>
&lt;li>文件的接收方没有 reshare 权限 —— 除非拷贝一份，否则是无法 reshare 的。&lt;/li>
&lt;/ul>
&lt;h2 id="22-abac基于属性的访问控制">2.2 ABAC（基于属性的访问控制）&lt;a class="td-heading-self-link" href="#22-abac%e5%9f%ba%e4%ba%8e%e5%b1%9e%e6%80%a7%e7%9a%84%e8%ae%bf%e9%97%ae%e6%8e%a7%e5%88%b6" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Attribute-based access control (Hu, Kuhn, Ferraiolo, 2015)[6] 是对 RBAC 的改进，加了一些细节（属性，Attributes）。&lt;/p>
&lt;ul>
&lt;li>属性可以是位置、客户端设备平台、认证类型、用户的 http cookies 等。&lt;/li>
&lt;li>当系统判断是否授予某个用户对某资源的访问权限时，ABAC 系统除了检查他们的 RBAC role（group），还会检查这个人携带的各种属性。&lt;/li>
&lt;/ul>
&lt;p>如果你遇到过下面这种情况 —— 登录某个服务时弹出额外的图片识别认证 reCAPTCHA[7]， 而你旁边的朋友登录时却不用 —— 就说明你遇到了 ABAC。&lt;/p>
&lt;p>ABAC 很有用，因为这些额外的属性能给我们带来很多有用信息，尤其 是对于那些连接到互联网的、攻击矢量特别多的系统。但在概念上，ABAC 与 RBAC 类似，只是稍微向前演进了一点。属性的解析和认证工作是中心式的，大部分都实现 在各家的 identity provider 中。有鉴于此，接下来我们的讨论重点扔将放在 RBAC。&lt;/p>
&lt;h2 id="23-也许你从未用过真正的-rbac">2.3 也许你从未用过真正的 RBAC&lt;a class="td-heading-self-link" href="#23-%e4%b9%9f%e8%ae%b8%e4%bd%a0%e4%bb%8e%e6%9c%aa%e7%94%a8%e8%bf%87%e7%9c%9f%e6%ad%a3%e7%9a%84-rbac" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>RBAC 与前面提到的 users/groups 模型类似。接下来看一个具体的文件系统安全模型，例如 Windows。&lt;/p>
&lt;blockquote>
&lt;p>这里也可以拿 Unix 作为例子，但经典 Unix 文件安全与常见的安全模型不同， 它只支持单个 owner、单个 group，以及 self/group/other 文件模式。如今 Linux 也支持 facls[8]， 这算是 RBAC，但没人知道怎么用，因此这个也不算数。&lt;/p>
&lt;/blockquote>
&lt;h3 id="windows-文件安全模型每个文件一个-acl">Windows 文件安全模型：每个文件一个 ACL&lt;a class="td-heading-self-link" href="#windows-%e6%96%87%e4%bb%b6%e5%ae%89%e5%85%a8%e6%a8%a1%e5%9e%8b%e6%af%8f%e4%b8%aa%e6%96%87%e4%bb%b6%e4%b8%80%e4%b8%aa-acl" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>在 Windows 中，&lt;/p>
&lt;ol>
&lt;li>每个文件（或目录）都有一个 users 和 groups 列表，以及&lt;/li>
&lt;li>每个列表中的成员可以对这个文件做什么操作。&lt;/li>
&lt;/ol>
&lt;p>这是一种访问控制列表（access control list，ACL）。owner 设置 ACL，操作系 统执行 ACL。这是 MAC，对吧？&lt;/p>
&lt;p>对的 —— 大部分情况下。想一下，任何有文件读权限的人，都可以拷贝一份，然后在副本上 设置权限，因此这是某种形式的 DAC，或者说在执行上充满漏洞的 MAC。但在真实文件上（而非 API 上）执行 MAC 非常难。我们将这个难题留给军方，现在把关注点放在 ACL 语义上。&lt;/p>
&lt;p>在一个 Windows filesystem ACL 中，有如下概念：&lt;/p>
&lt;ol>
&lt;li>User：在这个文件上执行操作的用户。在经典 RBAC 术语中，称为 subject。&lt;/li>
&lt;li>Group 或 Role：由管理员定义的一组 user。&lt;/li>
&lt;li>File：需要做访问控制的资源（resource）。也称为 object。subject 对 object 进行操作。&lt;/li>
&lt;li>Permission 或 Entitlement：一条 &lt;code>subject-action-object&lt;/code>（用户 - 动作 - 目标文件）规则。有时会说某个 subject 有一条 entitlement，或者说某个 object 允许某个 permission，这两种表达方式本质上是一样的，只是从不同的角度描述。&lt;/li>
&lt;li>ACL：一个 entitlements 列表。&lt;/li>
&lt;/ol>
&lt;h3 id="控制谁能访问哪个文件">控制谁能访问哪个文件&lt;a class="td-heading-self-link" href="#%e6%8e%a7%e5%88%b6%e8%b0%81%e8%83%bd%e8%ae%bf%e9%97%ae%e5%93%aa%e4%b8%aa%e6%96%87%e4%bb%b6" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>每个文件都有一个 ACL（permission 列表）。&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>每个文件都有一个 ACL。该 ACL 可能从文件所在子目录的 ACL 中继承某些 entry，也 可能不会，这些对我们目前的讨论来说不重要。&lt;/li>
&lt;li>ACL 相同的文件，它们的 ACL 可能在磁盘上是分别存储的，这些是实现细节，我们这里 也不关心。&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>如果想控制谁能访问这些文件，可通过以下任一种方式：&lt;/p>
&lt;ol>
&lt;li>找到 ACL 对应的 groups/roles，在其中添加或删除 user（称为修改 group/role 的 membership）；或者，&lt;/li>
&lt;li>直接修改 ACL，添加或删除 permissions。&lt;/li>
&lt;/ol>
&lt;p>如果想一次修改一组文件的 ACL，可以&lt;/p>
&lt;ol>
&lt;li>修改 group/role membership（简单），或者&lt;/li>
&lt;li>找到所有相关文件，逐个修改对应的 ACL（慢且易出错）。&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/ef62c7f4-2473-4713-a153-66b5d85aa2f0/640" alt="">&lt;/p>
&lt;p>文件多了之后，逐个修改 ACL 就不切实际了。&lt;/p>
&lt;h2 id="24-存在的问题acl-太多到处重复批量修改麻烦">2.4 存在的问题：ACL 太多，到处重复，批量修改麻烦&lt;a class="td-heading-self-link" href="#24-%e5%ad%98%e5%9c%a8%e7%9a%84%e9%97%ae%e9%a2%98acl-%e5%a4%aa%e5%a4%9a%e5%88%b0%e5%a4%84%e9%87%8d%e5%a4%8d%e6%89%b9%e9%87%8f%e4%bf%ae%e6%94%b9%e9%ba%bb%e7%83%a6" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>最后一点，也是访问控制开始出现漏洞的地方。&lt;/p>
&lt;ul>
&lt;li>几乎所有系统，不管是不是 RBAC，都支持寻找文件系统中的 objects，然后修改它们的 ACL， 但配套的 object 管理系统可能做的很差。&lt;/li>
&lt;li>在分布式系统中，这些 objects 可能分散在世界各地，放在各种不同的存储系统中，而 它们的共同之处就是都依赖你的 identity 系统。&lt;/li>
&lt;li>如果某天发现一个 permission 给错了，就必须找到这个 permission 的所有副本并解 决之，否则就遗留了一个安全问题。但如果 objects 管理系统做得比较糟糕，这里做起 来就会很麻烦。&lt;/li>
&lt;/ul>
&lt;p>被以上问题折磨多次之后，你可能会尝试一些新东西：&lt;/p>
&lt;ul>
&lt;li>将尽量多的信息从 ACL（分散在各处）中移出，&lt;/li>
&lt;li>将尽量多的东西移入 user groups（集中式存储，而且能审计）。&lt;/li>
&lt;/ul>
&lt;h2 id="31-仍以-windows-文件系统为例">3.1 仍以 Windows 文件系统为例&lt;a class="td-heading-self-link" href="#31-%e4%bb%8d%e4%bb%a5-windows-%e6%96%87%e4%bb%b6%e7%b3%bb%e7%bb%9f%e4%b8%ba%e4%be%8b" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>仍然以 Windows 文件系统为例，如下图所示，你可能会创建两个 group &lt;code>report-readers&lt;/code>和 &lt;code>report-writers&lt;/code>：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/ef62c7f4-2473-4713-a153-66b5d85aa2f0/640" alt="">&lt;/p>
&lt;p>将尽量多的东西从 ACL 中移出，将尽量多的东西移入 groups 中。&lt;/p>
&lt;p>效果是：所有 reports 文件能被 &lt;code>report-readers&lt;/code> 组内的用户读，能被 &lt;code>report-writers&lt;/code>组内的用户写。&lt;/p>
&lt;blockquote>
&lt;p>经验不足的人在这里会犯的一个错误是：只创建一个名为 &lt;code>report&lt;/code> 的 group，然后给 予这个 group read/write 权限。通常来说，需要文件读权限的用户，要比需要 写权限的用户更多。甚至在某些情况下，writer 和 reader 用户之间都没有重叠（例如审计日志场景）。&lt;/p>
&lt;/blockquote>
&lt;p>这种 per-file-type group（每种文件访问类型一个单独的 user group）结构是 Don&amp;rsquo;t Repeat Yourself(DRY) 原则在实际应用中的一个例子：上一节 RBAC/ABAC 模型中，根源问题是每个文件都有自己的 ACL， 这些 ACL 到处重复，因此这里提取出了重复部分放到了一个公共的地方。&lt;/p>
&lt;h2 id="32-存在的问题">3.2 存在的问题&lt;a class="td-heading-self-link" href="#32-%e5%ad%98%e5%9c%a8%e7%9a%84%e9%97%ae%e9%a2%98" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>这个改进比较合理，尤其是在有很多 objects 的大公司中工作良好，但也有几个问题：&lt;/p>
&lt;ol>
&lt;li>现在需要有某种形式的 IAM admin 访问控制，也就是对用户组的增删查改做控制。
上一节的 RBAC/ABAC 模型中无需这种功能，因为它直接修改文件的 ACL。IAM admin 管控带来的一个新问题是：&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>如果管控太松，会导致很多人都有 IAM 的访问权限，存在风险；&lt;/li>
&lt;li>如果管控太紧，大部分都无权修改 group membership，又会使得这种模型的好处大打折扣。&lt;/li>
&lt;/ul>
&lt;ol start="3">
&lt;li>End users 仍然能四处游荡，在需要时能修改每个 report 文件的 ACL（“Alice 真的真的需要查看这个文件”），破坏了你精心设计的系统 —— 而你自己都无法察觉。&lt;/li>
&lt;li>现在需要为每个 ACL 组合创建一个 user group。
最后会发现，公司的每个工程师都属于 975 个 group，每个 group 都需要定义 read/write 两种类型。你必须 review 每个 group 的 membership。这种方式虽然比 老的 ad-hoc 文件权限方式审计性要好，但也好不了太多。&lt;/li>
&lt;/ol>
&lt;p>至此，我们决定放弃文件系统的 ACL，原因是：文件系统已经设计成这样了， 基于文件系统的 ACL 我们只能做到目前这样。你大概率无法解决现有的文件系统和操作系统中这些问题。&lt;/p>
&lt;p>但接下来的好消息是：如今的服务都运行在无状态容器内， 大部分 VM 都无需密码就能执行 sudo， 因此我们不用再对文件系统进行控制，而是对 web 应用和 NoSQL 的 API 做控制。这也许不是巧合，因为对细粒度分布式安全（fine-grained distributed security）的需求一直在增长，而文件系统还停留在 1980s 年代。&lt;/p>
&lt;p>那么，接下来就开始设计我们想要的 permission 系统！&lt;/p>
&lt;h2 id="41-根据-user-type-而非-file-type-创建-user-group">4.1 根据 user type 而非 file type 创建 user group&lt;a class="td-heading-self-link" href="#41-%e6%a0%b9%e6%8d%ae-user-type-%e8%80%8c%e9%9d%9e-file-type-%e5%88%9b%e5%bb%ba-user-group" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>首先，注意到，前面两节的文件系统 ACL 方案其实并不是真正意义上基于角色的（role-based）访问控制。为什么呢？它把 user groups 作为 roles —— 这没有问题 —— 但如果你有 975 个像 &lt;code>report-readers&lt;/code> 和 &lt;code>report-writers&lt;/code>一样的 group，那这些就不算不上是真正的 human-relevant roles。HR 并不知道 你的新员工是否应该是 report-reader，这个决策太底层了（low-level）。&lt;/p>
&lt;p>因此我们得到的第一个启示就是：应该根据用户类型（user types）而非文件类型（file types）来创建 user groups。如下图所示：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/ef62c7f4-2473-4713-a153-66b5d85aa2f0/640" alt="">&lt;/p>
&lt;h2 id="42-roles-去扁平化增强表达力将-acl-定义为一组策略规则">4.2 Roles 去扁平化，增强表达力：将 ACL 定义为一组策略规则&lt;a class="td-heading-self-link" href="#42-roles-%e5%8e%bb%e6%89%81%e5%b9%b3%e5%8c%96%e5%a2%9e%e5%bc%ba%e8%a1%a8%e8%be%be%e5%8a%9b%e5%b0%86-acl-%e5%ae%9a%e4%b9%89%e4%b8%ba%e4%b8%80%e7%bb%84%e7%ad%96%e7%95%a5%e8%a7%84%e5%88%99" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>以上 group-per-user-type 格式还是过于扁平了（too flat）：它已经丢失了 “为什么某人会在某 group” 的语义含义（semantic meaning）。如果 Bob 离职了，我们必须修改所有可能包含 Bob 的 groups。这虽然已经比跟踪每个 &lt;code>report&lt;/code> 类型的文件 然后 double check 它的 permissions 是否还正确要好，但仍然很容易出错。&lt;/p>
&lt;p>我们假设有如下角色（roles）：Accounting（审计人员）、DevOps（研发运维人员）、Engineering（工程师）、Executive（高管）。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/ef62c7f4-2473-4713-a153-66b5d85aa2f0/640" alt="">&lt;/p>
&lt;p>然后我们就可以将 ACL 定义为一组策略规则（a set of policy rules）：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/ef62c7f4-2473-4713-a153-66b5d85aa2f0/640" alt="">&lt;/p>
&lt;p>这种模型与最初的 flat 模型表达的东西是一样的，但通过增加一个间接层（indirection）， 它表达了我们一直想表达（而没有表达出来）的东西。有了这个模型， 接下来就可以讨论：&lt;/p>
&lt;ul>
&lt;li>由 HR 部门定义的 human-relevant roles，以及&lt;/li>
&lt;li>由安全部门定义的标签（tags），以及&lt;/li>
&lt;li>二者是如何联系到一起的。&lt;/li>
&lt;/ul>
&lt;h2 id="43-关于策略规则的进一步解释">4.3 关于策略规则的进一步解释&lt;a class="td-heading-self-link" href="#43-%e5%85%b3%e4%ba%8e%e7%ad%96%e7%95%a5%e8%a7%84%e5%88%99%e7%9a%84%e8%bf%9b%e4%b8%80%e6%ad%a5%e8%a7%a3%e9%87%8a" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>我们正在设计一个新的权限系统。&lt;/p>
&lt;p>现在，先将刚才设计的能转换成的 roles 的 policy rules 进一步表示为：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/ef62c7f4-2473-4713-a153-66b5d85aa2f0/640" alt="">&lt;/p>
&lt;p>有了这样一种格式的描述之后，当我们需要满足 SOC2 合规性要求时，只需将 &lt;code>database&lt;/code>的 readers 改为，例如 &lt;code>[DevOps, Prod]&lt;/code>，这将会立即锁定所有数据库相关的对象。&lt;/p>
&lt;h2 id="44-其他特性">4.4 其他特性&lt;a class="td-heading-self-link" href="#44-%e5%85%b6%e4%bb%96%e7%89%b9%e6%80%a7" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>最后，我们来加两个其他特性：&lt;/p>
&lt;p>首先，与文件只有一种 type（读或写）不同，一个对象可以有零或多个 tags。因此，与数据库相关的源文件可以打上 &lt;code>database&lt;/code> 和 &lt;code>sourcefile&lt;/code> 两个 tag，对应地， 它获得的是两种 permission set 的交集。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/ef62c7f4-2473-4713-a153-66b5d85aa2f0/640" alt="">&lt;/p>
&lt;p>第二，只有 tag 的 owner 有权限增加或删除任何对象上的该 tag。例如在下图中，只有 Engineering 可以在某个对象打 &lt;code>sourcefile&lt;/code> tag。这能够避免意外将对象分享给应该完全隔离的人，或在不期望的地方错误地应用已有策略。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/ef62c7f4-2473-4713-a153-66b5d85aa2f0/640" alt="">&lt;/p>
&lt;h2 id="45-mac-归来">4.5 MAC 归来&lt;a class="td-heading-self-link" href="#45-mac-%e5%bd%92%e6%9d%a5" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>至此，我们看到了 MAC 回归的身影。但是，现在它，&lt;/p>
&lt;ol>
&lt;li>不需要一个针对 security policy 的 global admin access control。&lt;/li>
&lt;li>每个 tag owner 能直接对他们的 objects 进行授权，但他们能授予哪些访问权限，是 由整体上的安全策略（the overall security policy，即 roles）控制的。&lt;/li>
&lt;/ol>
&lt;h2 id="46-例子api-访问控制">4.6 例子：API 访问控制&lt;a class="td-heading-self-link" href="#46-%e4%be%8b%e5%ad%90api-%e8%ae%bf%e9%97%ae%e6%8e%a7%e5%88%b6" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>在类似 Tailscale 的网络系统中，我们其实并不会用 readers 和 writers 这样的文件系统术语。我们定义 node 和 port，以及允许谁连接到这些 node 和 port。例如可能会如下规则：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/ef62c7f4-2473-4713-a153-66b5d85aa2f0/640" alt="">&lt;/p>
&lt;p>有了以上规则，&lt;/p>
&lt;ol>
&lt;li>Engineering 中的任何人都可以启动一个&lt;code>dev-api-server&lt;/code> node，&lt;/li>
&lt;li>该 node 能接受从任何 &lt;code>dev-api-client&lt;/code> node 来的非加密连接（TLS 太难了！开发环境就放行非加密连接吧），但反之并不亦然。&lt;/li>
&lt;li>只有 Ops 中的人能启动 &lt;code>prod-api-server&lt;/code> 和 &lt;code>prod-api-client&lt;/code> nodes，它们只处理 https 流量，拒绝非加密 http。&lt;/li>
&lt;/ol>
&lt;p>下面是效果：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/ef62c7f4-2473-4713-a153-66b5d85aa2f0/640" alt="">&lt;/p>
&lt;p>这里注意：我们递归地用一些 tag names 来定义 permissions for other tags。Ops 中的某个人可以启动一个 node 并打上 &lt;code>prod-api-server&lt;/code> tag， 这个 node 就会获得与 &lt;code>prod-api-server&lt;/code> 而不是 Ops 相关联的 permissions 和 entitlements（ 这很重要，因为&lt;code>prod-api-server&lt;/code> instance 无法像 Ops 一样启动更多 instance）。&lt;/p>
&lt;p>真实的 Tailscale ACLs 和 tags[9] 与此很像，但更加具体。&lt;/p>
&lt;h2 id="51-根据-policy-rules-和-user-groups-自动生成访问权限">5.1 根据 policy rules 和 user groups 自动生成访问权限&lt;a class="td-heading-self-link" href="#51-%e6%a0%b9%e6%8d%ae-policy-rules-%e5%92%8c-user-groups-%e8%87%aa%e5%8a%a8%e7%94%9f%e6%88%90%e8%ae%bf%e9%97%ae%e6%9d%83%e9%99%90" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>如果试图将这个模型反向适配到 legacy-style filesystem permissions， 我们就会发现 roles 和 tag definitions 其实是相同类型的对象（都是 lists of users）， 二者之间通过一个（“安全策略”）算法进行单向转换：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/ef62c7f4-2473-4713-a153-66b5d85aa2f0/640" alt="">&lt;/p>
&lt;p>将 roles 扩展成 tags，然后适配到传统文件系统的权限控制模型。&lt;/p>
&lt;p>你可以类似地写一些脚本，将给定的 roles 和 group membership rules 自动生成你的 /etc/group 内容，我知道有些公司就是这样做的。这不是标准方式，维护很痛苦，而且通常用定时任务来批量执行，这意味着当修改 一个 tag 或 group membership 之后，必须要等上一段时间才能生效。但本质上来说，这 种方式是能工作的，而且比典型的操作系统默认值要好多了。&lt;/p>
&lt;h2 id="52-tags-和-roles-各自的适用场景">5.2 Tags 和 roles 各自的适用场景&lt;a class="td-heading-self-link" href="#52-tags-%e5%92%8c-roles-%e5%90%84%e8%87%aa%e7%9a%84%e9%80%82%e7%94%a8%e5%9c%ba%e6%99%af" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>前面说 tags（用于 ACL 目的）和 roles（用于 user management 目的）都是 “用户列表”（lists of users），其实这种说法有误导性。二者用于不同场景。最重要的是，不同的人负责系统的不同部分：&lt;/p>
&lt;ol>
&lt;li>Roles 描述的是 identity system (authentication) 中的人。Roles 变化很少，通常在入职、晋升或转岗时由 HR 部门设置。&lt;/li>
&lt;li>Object types (tags) 由 object owner 在这个 object 创建时设置。&lt;/li>
&lt;li>Entitlements 用 &lt;code>(Role, Tag)&lt;/code> 描述，由简单的程序（安全策略）来定义，由安全团队设置。&lt;/li>
&lt;/ol>
&lt;p>在这个架构中，这三种类型的人只有很少时候才需要交互：&lt;/p>
&lt;ol>
&lt;li>Accounting 部门中的财报 writer 并不关心谁是 Executive，也不关心 Executive 是否 有权查看或编辑财报。他们只需知道要给 report 文件打上 financial-report tag。&lt;/li>
&lt;li>安全团队并不关心哪个文件打了 &lt;code>financial-report&lt;/code>（讨论一般情况下），也不关心谁是 Executive。他们需要的是&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>能读、写对应的安全策略，以及确保策略生效：&lt;/li>
&lt;li>确保 financial-report tag 只能被 Accounting 部门打，对应的文件只能被 Executives 和 Accounting 读（read only）。&lt;/li>
&lt;/ul>
&lt;ol start="4">
&lt;li>HR 团队不知道也不关心文件或安全策略，他们只关心这周招了一个 Accounting role 的人。&lt;/li>
&lt;/ol>
&lt;h2 id="53-小结">5.3 小结&lt;a class="td-heading-self-link" href="#53-%e5%b0%8f%e7%bb%93" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>回到 network permissions 场景：在大公司中，正确地围绕这些概念设计你的模型，就能避免大量摩擦。&lt;/p>
&lt;p>我们在实际工作中可能会遇到如下类似的例子：工程师创建了一个新的开发（&lt;code>dev&lt;/code>）集群后，还要去提个工单，让安全团队给他开防火墙端口。为什么会这样？因为在这些公司中，安全团队维护的策略并不规范，没有收敛到以上模型：&lt;/p>
&lt;ol>
&lt;li>允许 Engineers 运行 dev API servers，接受来自本机或 dev API clients 的 incoming 连接 —— 这个没问题；&lt;/li>
&lt;li>通常不允许创建 outgoing connections —— 这个也没问题；&lt;/li>
&lt;li>噢对了，Carol 的 dev API server 需要主动访问数据库服务器，只能开单独策略了 —— 问题来了。&lt;/li>
&lt;/ol>
&lt;p>如果安全团队能将这些安全规则固化成代码片段，结果将会更好，能确保它们在整张 网络上得到一致执行。&lt;/p>
&lt;p>以上提到的所有东西，users、roles、object types、policies 都不是新概念， 它们都来自 1992 提出 RBAC 模型的那篇论文，只是术语稍有不同。&lt;/p>
&lt;p>如今，几乎每个人都在使用 users、groups、ACLs 了。一些人认为，我们实现的东西已经 是 RBAC，但事实告诉我们：并不是。还没有谁实现过完整的 RBAC 模型：&lt;/p>
&lt;ol>
&lt;li>每个人都是一个 User (subject)。&lt;/li>
&lt;li>每个 user 都有一个或多个 Roles。&lt;/li>
&lt;li>每个 object 都有一个或多个 Tags。&lt;/li>
&lt;li>一条 &amp;ldquo;security policy&amp;rdquo; 定义一个将 &lt;code>(Role, Tag)&lt;/code> 转换成 Entitlements 的公式。&lt;/li>
&lt;li>一个执行层（enforcement layer）负责 enforce security policy，并为每个 object 生成有效 entitlements 列表（ACL）。&lt;/li>
&lt;/ol>
&lt;p>但另一方面，实现这样一个模型比实现常见的 users+groups 模型并没有复杂多少—— 只要从一开始就将其放到系统的核心。&lt;/p>
&lt;p>最后回到文初，这就是为什么 Tailscale RBAC、ABAC 和 security policy 不同寻常的地方[10]。Tailscale objects 都是设备和端口（devices and ports），而非文件，但所有概念在使用上与在文件系统中是一样的。最终的产品在理念设计上很简洁：&lt;/p>
&lt;ol>
&lt;li>Device 或 container 的 owner 可以设置 tag；&lt;/li>
&lt;li>安全团队决定谁 own 哪些 tag、每个 tag 关联了哪些 permissions、tags 会授权给哪些 roles；&lt;/li>
&lt;li>Identity/HR 团队决定哪些 users 应该属于哪些 roles。&lt;/li>
&lt;/ol>
&lt;h3 id="引用链接">引用链接&lt;a class="td-heading-self-link" href="#%e5%bc%95%e7%94%a8%e9%93%be%e6%8e%a5" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>[1]&lt;/p>
&lt;p>RBAC like it was meant to be: &lt;a href="https://tailscale.com/blog/rbac-like-it-was-meant-to-be/">&lt;em>https://tailscale.com/blog/rbac-like-it-was-meant-to-be/&lt;/em>&lt;/a>&lt;/p>
&lt;p>[2]&lt;/p>
&lt;p>真正的 RBAC/ABAC 安全模型: &lt;a href="https://tailscale.com/kb/1018/acls/">&lt;em>https://tailscale.com/kb/1018/acls/&lt;/em>&lt;/a>&lt;/p>
&lt;p>[3]&lt;/p>
&lt;p>SO*REUSEADDR: &lt;a href="https://man7.org/linux/man-pages/man7/socket.7.html">_https://man7.org/linux/man-pages/man7/socket.7.html*&lt;/a>&lt;/p>
&lt;p>[4]&lt;/p>
&lt;p>之前关于 file locking: &lt;a href="https://apenwarr.ca/log/20101213">&lt;em>https://apenwarr.ca/log/20101213&lt;/em>&lt;/a>&lt;/p>
&lt;p>[5]&lt;/p>
&lt;p>multi-level security: &lt;a href="https://en.wikipedia.org/wiki/Multilevel_security">&lt;em>https://en.wikipedia.org/wiki/Multilevel_security&lt;/em>&lt;/a>&lt;/p>
&lt;p>[6]&lt;/p>
&lt;p>Attribute-based access control (Hu, Kuhn, Ferraiolo, 2015): &lt;a href="https://www.researchgate.net/publication/273393378_Attribute-Based_Access_Control">&lt;em>https://www.researchgate.net/publication/273393378_Attribute-Based_Access_Control&lt;/em>&lt;/a>&lt;/p>
&lt;p>[7]&lt;/p>
&lt;p>reCAPTCHA: &lt;a href="https://www.google.com/recaptcha/about/">&lt;em>https://www.google.com/recaptcha/about/&lt;/em>&lt;/a>&lt;/p>
&lt;p>[8]&lt;/p>
&lt;p>facls: &lt;a href="https://www.usenix.org/legacy/publications/library/proceedings/usenix03/tech/freenix03/full_papers/gruenbacher/gruenbacher_html/main.html">&lt;em>https://www.usenix.org/legacy/publications/library/proceedings/usenix03/tech/freenix03/full_papers/gruenbacher/gruenbacher_html/main.html&lt;/em>&lt;/a>&lt;/p>
&lt;p>[9]&lt;/p>
&lt;p>真实的 Tailscale ACLs 和 tags: &lt;a href="https://tailscale.com/kb/1018/acls/">&lt;em>https://tailscale.com/kb/1018/acls/&lt;/em>&lt;/a>&lt;/p>
&lt;p>[10]&lt;/p>
&lt;p>Tailscale RBAC、ABAC 和 security policy 不同寻常的地方: &lt;a href="https://tailscale.com/kb/1018/acls/">&lt;em>https://tailscale.com/kb/1018/acls/&lt;/em>&lt;/a>&lt;/p></description></item><item><title>Docs: Access Control(访问控制)</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%99%BB%E5%BD%95-Linux-%E4%B8%8E-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/Access-Control%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/Access-Control%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%99%BB%E5%BD%95-Linux-%E4%B8%8E-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/Access-Control%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/Access-Control%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Discretionary_access_control">Wiki, DAC&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Linux 使用 &lt;strong>Discretionary Access Control(自主访问控制，简称 DAC)&lt;/strong> 概念控制所有文件的基本权限。&lt;/p>
&lt;p>Linux 中每个文件都具有三个拥有者：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>user&lt;/strong> # 文件的属主，拥有文件的&lt;strong>一个 Linux Account(账户)&lt;/strong>&lt;/li>
&lt;li>&lt;strong>group&lt;/strong> # 文件的属组，拥有文件的&lt;strong>一组 Linux Account(账户)&lt;/strong>&lt;/li>
&lt;li>&lt;strong>other&lt;/strong> # 文件的其他，拥有该文件的&lt;strong>其他 Linux Account(账户)&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>上述三个角色，可以被赋予三个基本权限&lt;/p>
&lt;ul>
&lt;li>&lt;strong>read&lt;/strong> # 读，简写为 r&lt;/li>
&lt;li>&lt;strong>write&lt;/strong> # 写，简写为 w&lt;/li>
&lt;li>&lt;strong>execute&lt;/strong> # 执行，简写为 x&lt;/li>
&lt;/ul>
&lt;p>我们使用 &lt;code>ls -l&lt;/code> 命令查看文件，可以从第 1 列看到文件的类型与权限&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># ls -lh&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>total 20K
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lrwxrwxrwx. &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> root root &lt;span style="color:#0000cf;font-weight:bold">7&lt;/span> May &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2019&lt;/span> bin -&amp;gt; usr/bin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dr-xr-xr-x. &lt;span style="color:#0000cf;font-weight:bold">5&lt;/span> root root 4.0K May &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2019&lt;/span> boot
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">20&lt;/span> root root 3.1K May &lt;span style="color:#0000cf;font-weight:bold">14&lt;/span> 09:38 dev
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x. &lt;span style="color:#0000cf;font-weight:bold">82&lt;/span> root root 8.0K Jun &lt;span style="color:#0000cf;font-weight:bold">21&lt;/span> 19:42 etc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>......
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>第 1 列共 11 个字符，中间 9 个字符用以表示文件的基本权限，最后一个字符是文件的 ACL 与 SELinux 属性。格式与说明如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>示例&lt;/th>
&lt;th>文件类型&lt;/th>
&lt;th>属主权限&lt;/th>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;th>属组权限&lt;/th>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;th>其他权限&lt;/th>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;th>ACL 与 SELinux&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>读&lt;/td>
&lt;td>写&lt;/td>
&lt;td>执行&lt;/td>
&lt;td>读&lt;/td>
&lt;td>写&lt;/td>
&lt;td>执行&lt;/td>
&lt;td>读&lt;/td>
&lt;td>写&lt;/td>
&lt;td>执行&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>示例 1&lt;/td>
&lt;td>l&lt;/td>
&lt;td>r&lt;/td>
&lt;td>w&lt;/td>
&lt;td>x&lt;/td>
&lt;td>r&lt;/td>
&lt;td>w&lt;/td>
&lt;td>x&lt;/td>
&lt;td>r&lt;/td>
&lt;td>w&lt;/td>
&lt;td>x&lt;/td>
&lt;td>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>示例 2&lt;/td>
&lt;td>d&lt;/td>
&lt;td>r&lt;/td>
&lt;td>-&lt;/td>
&lt;td>x&lt;/td>
&lt;td>r&lt;/td>
&lt;td>-&lt;/td>
&lt;td>x&lt;/td>
&lt;td>r&lt;/td>
&lt;td>-&lt;/td>
&lt;td>x&lt;/td>
&lt;td>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>示例 3&lt;/td>
&lt;td>d&lt;/td>
&lt;td>r&lt;/td>
&lt;td>w&lt;/td>
&lt;td>x&lt;/td>
&lt;td>r&lt;/td>
&lt;td>-&lt;/td>
&lt;td>x&lt;/td>
&lt;td>r&lt;/td>
&lt;td>-&lt;/td>
&lt;td>x&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>中间 9 个字符分为 3 个组，分别对应文件的 3 种拥有者：&lt;/p>
&lt;ul>
&lt;li>第一组为文件的属主权限&lt;/li>
&lt;li>第二组为文件的属组权限&lt;/li>
&lt;li>第三组为文件的其他权限&lt;/li>
&lt;/ul>
&lt;p>每组的 3 个字符都符合如下规则：&lt;/p>
&lt;ul>
&lt;li>第一个字符表示是否有“读取”权限，为 &lt;code>r&lt;/code> 或 &lt;code>-&lt;/code>&lt;/li>
&lt;li>第二个字符表示是否有“写入”权限，为 &lt;code>w&lt;/code> 或 &lt;code>-&lt;/code>&lt;/li>
&lt;li>第三个字符表示是否有“执行”权限，为 &lt;code>x&lt;/code> 或 &lt;code>-&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>若为 &lt;code>-&lt;/code> 符号时，表示没有对应的权限&lt;/p>
&lt;p>简单示例&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-rw&amp;mdash;&amp;mdash;-&lt;/strong> # 表明了文件的拥有者对文件有 读、写 的权限，但是没有运行的权限。也很好理解，因为这是一个普通文件，默认没有可执行的属性。记住：如果有 w 权限（写的权限），那么表明也有删除此文件的权限。&lt;/li>
&lt;li>&lt;strong>&amp;mdash;-r&amp;mdash;&amp;ndash;&lt;/strong> # 表明文件所在的群组内的用户只可以读此文件，但不能写也不能执行。&lt;/li>
&lt;li>&lt;strong>&amp;mdash;&amp;mdash;-r&amp;ndash;&lt;/strong> # 表示其他用户只可以读此文件，但不能写也不能执行。&lt;/li>
&lt;/ul>
&lt;h1 id="权限管理工具">权限管理工具&lt;a class="td-heading-self-link" href="#%e6%9d%83%e9%99%90%e7%ae%a1%e7%90%86%e5%b7%a5%e5%85%b7" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://man7.org/linux/man-pages/man1/chmod.1.html">Manual(手册)，chmod&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://man7.org/linux/man-pages/man1/chown.1.html">Manual(手册)，chown&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Linux 所说的权限，就是用户和组的权限。这是最基本的权限。后面的文章中还会介绍高级权限。&lt;/p>
&lt;h2 id="chmod---修改文件的访问权限命令">chmod - 修改文件的访问权限命令&lt;a class="td-heading-self-link" href="#chmod---%e4%bf%ae%e6%94%b9%e6%96%87%e4%bb%b6%e7%9a%84%e8%ae%bf%e9%97%ae%e6%9d%83%e9%99%90%e5%91%bd%e4%bb%a4" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Linux/Unix 的文件权限分为三级 : 文件拥有者、文件所属组、其他。利用 chmod 可以控制文件如何被他人所调用。&lt;/p>
&lt;h3 id="syntax语法">Syntax(语法)&lt;a class="td-heading-self-link" href="#syntax%e8%af%ad%e6%b3%95" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>&lt;strong>chmod [OPTIONS] MODE[,MODE]&amp;hellip; FILE&amp;hellip;&lt;/strong>
&lt;strong>chmod [OPTIONS] OCTAL-MODE FILE&amp;hellip;&lt;/strong>
&lt;strong>chmod [OPTIONS] &amp;ndash;reference=RFILE FILE&amp;hellip;&lt;/strong>&lt;/p>
&lt;p>MODE 格式如下 : &lt;code>[ugoa][[+-=][rwxX]…][,…]&lt;/code>，其中&lt;/p>
&lt;ul>
&lt;li>&lt;strong>[ugoa]&lt;/strong> # u 表示该档案的拥有者，g 表示与该档案的拥有者属于同一个群体(group)者，o 表示其他以外的人，a 表示这三者皆是。&lt;/li>
&lt;li>&lt;strong>[+-=]&lt;/strong> # &lt;code>+&lt;/code> 表示增加权限、&lt;code>-&lt;/code> 表示取消权限、&lt;code>=&lt;/code> 表示唯一设定权限。&lt;/li>
&lt;li>&lt;strong>[rwxX]&lt;/strong> # 表示可读取，w 表示可写入，x 表示可执行。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>OPTIONS&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>-c, &amp;ndash;changes # like verbose but report only when a change is made&lt;/li>
&lt;li>&lt;strong>-f, &amp;ndash;silent, &amp;ndash;quiet&lt;/strong> # 静默模式&lt;/li>
&lt;li>-&lt;strong>v, &amp;ndash;verbose&lt;/strong> # 诊断模式，显示完整的执行过程&lt;/li>
&lt;li>&amp;ndash;no-preserve-root do not treat &amp;lsquo;/&amp;rsquo; specially (the default)&lt;/li>
&lt;li>&amp;ndash;preserve-root # fail to operate recursively on &amp;lsquo;/&amp;rsquo;&lt;/li>
&lt;li>&amp;ndash;reference=RFILE use RFILE&amp;rsquo;s mode instead of MODE values&lt;/li>
&lt;li>&lt;strong>-R, &amp;ndash;recursive&lt;/strong> # 递归方式设置，即修改指定目录及其所有子目录和其内文件的权限。&lt;/li>
&lt;/ul>
&lt;h3 id="example">EXAMPLE&lt;a class="td-heading-self-link" href="#example" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>修改当前目录及子目录内所有目录类型文件，并将这些目录的权限改为 755
&lt;ul>
&lt;li>&lt;strong>find ./* -type d -exec chmod 755 {} ;&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>修改当前目录及子目录内所有普通类型文件，并将这些文件的权限改为 644
&lt;ul>
&lt;li>&lt;strong>find ./* -type f -exec chmod 644 {} ;&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>文件 file.txt 的所有者增加读和运行的权限。
&lt;ul>
&lt;li>chmod u+rx file.txt&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>文件 file.txt 的群组其他用户增加读的权限。
&lt;ul>
&lt;li>chmod g+r file.txt&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>文件 file.txt 的其他用户移除读的权限。
&lt;ul>
&lt;li>chmod o-r file.txt&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>文件 file.txt 的群组其他用户增加读的权限，其他用户移除读的权限。
&lt;ul>
&lt;li>chmod g+r o-r file.txt&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>文件 file.txt 的群组其他用户和其他用户均移除读的权限。
&lt;ul>
&lt;li>chmod go-r file.txt&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>文件 file.txt 的所有用户增加运行的权限。
&lt;ul>
&lt;li>chmod +x file.txt&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>文件 file.txt 的所有者分配读，写和执行的权限；群组其他用户分配读的权限，不能写或执行；其他用户没有任何权限。
&lt;ul>
&lt;li>chmod u=rwx,g=r,o=- file.txt&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>递归执行赋权，设置 newname 文件夹权限
&lt;ul>
&lt;li>chmod -R 700 /home/newname&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="chown---改变文件的所有者命令">chown - 改变文件的所有者命令&lt;a class="td-heading-self-link" href="#chown---%e6%94%b9%e5%8f%98%e6%96%87%e4%bb%b6%e7%9a%84%e6%89%80%e6%9c%89%e8%80%85%e5%91%bd%e4%bb%a4" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="syntax语法-1">Syntax(语法)&lt;a class="td-heading-self-link" href="#syntax%e8%af%ad%e6%b3%95-1" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>&lt;strong>chown [OPTION] [OWNER][:[GROUP]] FILE&amp;hellip;&lt;/strong>&lt;/p>
&lt;p>&lt;strong>chown [OPTION] &amp;ndash;reference=RFILE FILE&amp;hellip;&lt;/strong>&lt;/p>
&lt;p>&amp;ndash;from=当前所有者:当前所属组&lt;/p>
&lt;ul>
&lt;li>只当每个文件的所有者和组符合选项所指定时才更改所有者和组。其中一个可以省略，这时已省略的属性就不需要符合原有的属性。&lt;/li>
&lt;/ul>
&lt;h3 id="example-1">EXAMPLE&lt;a class="td-heading-self-link" href="#example-1" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>改变文件的用户（用 ls -l 可以快速查看原用户和组），后接新的所有者的用户名，再接文件名：
&lt;ul>
&lt;li>chown newname file.txt&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>chown 命令也可以改变文件的群组，如下：
&lt;ul>
&lt;li>chown newname:friends file.txt # 将 file.txt 文件的用户改为 newname，所属用户组修改为 friends&lt;/li>
&lt;li>chown root /u # 将 /u 的属主更改为&amp;quot;root&amp;quot;&lt;/li>
&lt;li>chown root:staff /u # 和上面类似，但同时也将其属组更改为&amp;quot;staff&amp;quot;&lt;/li>
&lt;li>chown -hR root /u # 将 /u 及其子目录下所有文件的属主更改为&amp;quot;root&amp;quot;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="chattr-与-lsattr">chattr 与 lsattr&lt;a class="td-heading-self-link" href="#chattr-%e4%b8%8e-lsattr" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>chattr 工具可以修改文件属性，添加了 &lt;code>i&lt;/code> 属性的文件将无法被编辑，即使是 root 用户也不行。&lt;/p>
&lt;p>chattr # 改变 Linux 文件系统上的文件属性&lt;/p>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>为 /etc/passwd 文件添加 i 属性
&lt;ul>
&lt;li>chattr +i /etc/passwd&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>为 /etc/passwd 文件去除 i 属性
&lt;ul>
&lt;li>chattr -i /etc/passwd&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>lsattr # 查看 Linux 文件系统上的文件属性&lt;/p></description></item><item><title>Docs: Account Manager(账户管理)</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%99%BB%E5%BD%95-Linux-%E4%B8%8E-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/Account-Manager%E8%B4%A6%E6%88%B7%E7%AE%A1%E7%90%86/Account-Manager%E8%B4%A6%E6%88%B7%E7%AE%A1%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%99%BB%E5%BD%95-Linux-%E4%B8%8E-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/Account-Manager%E8%B4%A6%E6%88%B7%E7%AE%A1%E7%90%86/Account-Manager%E8%B4%A6%E6%88%B7%E7%AE%A1%E7%90%86/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/system_administrators_guide/ch-getting_started#sec-Managing_User_Accounts">红帽官方文档, RedHat7 - 管理用户账户的基础知识&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/system_administrators_guide/ch-managing_users_and_groups">红帽官方文档, RedHat7 - 系统管理员指南-第四章-管理用户和组&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/security_guide/index">红帽官方文档, RedHat7 - 安全指南&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Linux 操作系统是一个多用户操作系统，所以除了 &lt;strong>Terminal(终端)&lt;/strong> 以外，还需 &lt;strong>Account(账户)&lt;/strong> 才可以登录上去，Linux 操作系统允许多个用户访问安装在一台机器上的单个系统。每个 User(用户) 都在自己的 Account(账户) 下操作。因此，Account Manager 代表了 Linux 系统管理的核心要素。&lt;/p>
&lt;blockquote>
&lt;p>User 与 Account 傻傻分不清楚，在 Linux 操作系统中，通常都会将 Account 称为 User，但是，这个称呼实际上并不准确。因为一个 User，比如 root，可以被多个现实世界中多个人使用，那么 root 这个 User 就会对应多个真实的 User。这种描述是非常矛盾的。。。&lt;/p>
&lt;p>只不过，随着时间的推移，人们慢慢叫习惯了，各种文档和源码也都一直使用 UID 这种名称，也就不再特别区分 Account 和 User 了。只需要知道，UID 更准确的描述应该是 AID。&lt;/p>
&lt;/blockquote>
&lt;p>同时，一个 Linux Account 也可以不代表一个真实的 User，这样的 Account 只被应用程序使用，一个应用程序使用某个 Account 运行，以便让系统更方便得对程序进行精细化控制。这种控制方式称为 &lt;strong>Access Control(访问控制)&lt;/strong>，所以，从这种角度看，Account 也可以称为 &lt;strong>Role(角色)&lt;/strong>，详见 &lt;a href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%99%BB%E5%BD%95%20Linux%20%E4%B8%8E%20%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/Access%20Control(%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6)/Access%20Control(%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6).md">Access Control(访问控制)&lt;/a> 章节。&lt;/p>
&lt;p>为了方便得对多个 Account 管理，可以将多个 Account 组合起来，称为 &lt;strong>Group(组)&lt;/strong>，一个 Group 就是一个或多个 Account 的集合。&lt;/p>
&lt;p>通常，Linux 将账户分为两类&lt;/p>
&lt;ul>
&lt;li>Normal Accounts(普通账户)&lt;/li>
&lt;li>System Accounts(系统账户)&lt;/li>
&lt;/ul>
&lt;p>每个账户都有一个对应的 UID 作为其唯一标识符(纯数字)。同样，每个组也有一个对应的 GID 作为其唯一标识符(纯数字)。通常来说：&lt;/p>
&lt;ul>
&lt;li>1000 以下是系统账户与保留账户 和 系统组与保留组&lt;/li>
&lt;li>1000 以上是普通账户和组&lt;/li>
&lt;/ul>
&lt;p>每当我们使用 useradd 命令新建一个普通用户时，用户的 UID 都是 1000 之后的数字，这种行为可以通过修改 /etc/login.defs 文件中的 UID_MIN、GID_MIN 等参数来改变。&lt;/p>
&lt;h2 id="password密码">Password(密码)&lt;a class="td-heading-self-link" href="#password%e5%af%86%e7%a0%81" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>Password(密码)&lt;/strong> 是用来验证用户身份的最主要方法。当用户使用一个账户登录 Linux 操作系统时，密码是用来证明账户属于该用户的一种非常高效的方式。&lt;/p>
&lt;p>Linux 系统使用 &lt;strong>Secure Hash Algorithm 512(SHA512)&lt;/strong> 和 &lt;strong>shadow passwords&lt;/strong>。默认情况下，账户信息保存在 /etc/passwd 文件中，对应的密码信息经过哈希后保存在 /etc/shadow 文件中。&lt;/p>
&lt;h1 id="关联文件">关联文件&lt;a class="td-heading-self-link" href="#%e5%85%b3%e8%81%94%e6%96%87%e4%bb%b6" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;strong>/etc/group&lt;/strong> # 账户组信息&lt;/p>
&lt;p>&lt;strong>/etc/passwd&lt;/strong> # 账户信息&lt;/p>
&lt;p>&lt;strong>/etc/shadow&lt;/strong> # 安全账户信息&lt;/p>
&lt;p>&lt;strong>/etc/login.defs&lt;/strong> # login 工具包中的配置文件，部分账户管理工具会读取该文件中的参数&lt;/p>
&lt;p>&lt;strong>/etc/pam.d/&lt;/strong> #&lt;/p>
&lt;ul>
&lt;li>./chfn&lt;/li>
&lt;li>./chpasswd&lt;/li>
&lt;li>./chsh&lt;/li>
&lt;li>./newusers&lt;/li>
&lt;li>./passwd&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>/etc/skel/&lt;/strong> # 该目录为账户目录模板。该目录下包含多个隐藏的文件，当创建用户时，会拷贝该目录下的所有文件到所创建用户的家目录中&lt;/p>
&lt;p>&lt;strong>/home/AccountName/&lt;/strong> # UserName 为该账户同名的家目录&lt;/p>
&lt;p>&lt;strong>/var/spool/mail/AccountName&lt;/strong># 该文件为该账户的邮件池&lt;/p>
&lt;p>注意：&lt;/p>
&lt;ul>
&lt;li>若 /etc/shadow 被 selinux 所管理，有的时候密码修改将会失败，报错 &lt;code>passwd: Authentication token manipulation error&lt;/code>&lt;/li>
&lt;/ul>
&lt;h1 id="账户管理工具">账户管理工具&lt;a class="td-heading-self-link" href="#%e8%b4%a6%e6%88%b7%e7%ae%a1%e7%90%86%e5%b7%a5%e5%85%b7" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>Linux 系统的账户管理功能，通常由 &lt;strong>shadow-utils 包&lt;/strong> 或 &lt;strong>passwd 包&lt;/strong> 中的各种工具和库提供。&lt;/p>
&lt;blockquote>
&lt;p>在有的发行版中(比如 CentOS)，只会将 passwd 包中的 passwd 程序保留，而将其余的程序，放在名为 &lt;strong>shadow-utils&lt;/strong> 的包中。&lt;/p>
&lt;/blockquote>
&lt;p>不同的 Linux 发型，还会用到某些个别的包与主包配合提供完整的账户管理功能：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>base-passwd&lt;/strong> # 这是 Ubuntu 发型版中独有的包。这个包中包含一个 &lt;code>update-passwd&lt;/code> 的程序，将会根据 /var/lib/dpkg/info/base-passwd.preinst 脚本生成 /etc/passwd 和 /etc/group 文件
&lt;ul>
&lt;li>参考：&lt;a href="https://unix.stackexchange.com/questions/470126/how-is-the-etc-passwd-file-instantiated">https://unix.stackexchange.com/questions/470126/how-is-the-etc-passwd-file-instantiated&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>setup&lt;/strong> # 这是 CentOS 发行版中独有的包。包含了一组重要的系统配置文件和安装文件，例如 /etc/passwd、/etc/group、/etc/shadow、/etc/profile 等等&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/oib9pm/1635476577308-bd0e79ab-ffc9-41f8-ba65-471f0a3e2918.png" alt="image.png">&lt;/p>
&lt;h2 id="useradd---添加用户">useradd - 添加用户&lt;a class="td-heading-self-link" href="#useradd---%e6%b7%bb%e5%8a%a0%e7%94%a8%e6%88%b7" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://man7.org/linux/man-pages/man8/useradd.8.html">Manual(手册), useradd(8)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>useradd 程序在添加用户时，会读取 &lt;a href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%99%BB%E5%BD%95%20Linux%20%E4%B8%8E%20%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/Account%20Manager(%E8%B4%A6%E6%88%B7%E7%AE%A1%E7%90%86)/%E8%B4%A6%E6%88%B7%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.md">账户配置文件&lt;/a> 中提到的 /etc/login.defs 文件中的 PASS_MAX_DAYS、PASS_MIN_DAYS、etc. 参数，并将参数的值写入到 /etc/shadow 文件中的对应字段&lt;/p>
&lt;h3 id="syntax语法">Syntax(语法)&lt;a class="td-heading-self-link" href="#syntax%e8%af%ad%e6%b3%95" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>&lt;strong>useradd [OPTIONS] NAME&lt;/strong>&lt;/p>
&lt;p>OPTIONS：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-m&lt;/strong> # 自动建立用户的登入目录。&lt;/li>
&lt;li>&lt;strong>-u&lt;/strong> # 指定用户 ID 号。该值在系统中必须是唯一的。0~499 默认是保留给系统用户账号使用的，所以该值必须大于 499。&lt;/li>
&lt;li>&lt;strong>-g GID&lt;/strong> # 指定该用户的基本组 ID&lt;/li>
&lt;li>&lt;strong>-c&lt;/strong> # 加上备注文字，备注文字保存在 passwd 的备注栏中。&lt;/li>
&lt;li>-&lt;strong>d&lt;/strong> # 指定该用户的家目录，默认为 /home 目录下的与用户名同名的文件夹&lt;/li>
&lt;li>&lt;strong>-e&lt;/strong> # 指定账号的失效日期，日期格式为 MM/DD/YY，例如 06/30/12。缺省表示永久有效。&lt;/li>
&lt;li>-f # 指定在密码过期后多少天即关闭该账号。如果为 0 账号立即被停用；如果为-1 则账号一直可用。默认值为-1.&lt;/li>
&lt;li>&lt;strong>-G, &amp;ndash;groups &amp;lt;GROUPS&amp;gt;&lt;/strong> # 指定用户所属的附加群组。&lt;/li>
&lt;li>-l # 不要把用户添加到 lastlog 和 failog 中, 这个用户的登录记录不需要记载&lt;/li>
&lt;li>-M # 不要自动建立用户的登入目录。&lt;/li>
&lt;li>-n # 取消建立以用户名称为名的群组。&lt;/li>
&lt;li>-p # PASSWORD 指定新用户的密码&lt;/li>
&lt;li>-r # 建立一个系统帐号&lt;/li>
&lt;li>-s # 指定用户登入后所使用的 shell。默认值为/bin/bash。&lt;/li>
&lt;/ul>
&lt;p>EXAMPLE：&lt;/p>
&lt;ul>
&lt;li>创建一个名为 desistdaydream 的用户，并设置该用户密码为 lch@password
&lt;ul>
&lt;li>useradd -m desistdaydream &amp;amp;&amp;amp; echo &amp;rsquo;lch@password&amp;rsquo; | passwd desistdaydream &amp;ndash;stdin&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>新增一个用户 user，并指定用户组 ftp
&lt;ul>
&lt;li>useradd -g ftp user&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>新增一个用户：user 并指定家目录为/mnt/bak/。如果没有此目录，则报错，就需要手动创建目录
&lt;ul>
&lt;li>useradd -d /mnt/back/ user&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>新增一个用户：user 并设置密码为 123456
&lt;ul>
&lt;li>useradd -p 123456 user&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>新增一个 FTP 用户：ftp2018 （无需登录系统）
&lt;ul>
&lt;li>useradd -g ftp -s /sbin/nologin ftp2018&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="userdel---删除用户">userdel - 删除用户&lt;a class="td-heading-self-link" href="#userdel---%e5%88%a0%e9%99%a4%e7%94%a8%e6%88%b7" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="syntax语法-1">Syntax(语法)&lt;a class="td-heading-self-link" href="#syntax%e8%af%ad%e6%b3%95-1" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>&lt;strong>userdel [OPTIONS] NAME&lt;/strong>&lt;/p>
&lt;p>OPTIONS：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-f, &amp;ndash;force&lt;/strong> # 强制删除&lt;/li>
&lt;li>&lt;strong>-r, &amp;ndash;remove&lt;/strong> # 删除用户的时候同时移除该用户的家目录和邮件池。不加参数的话，只会删除用户，但是不会删除在/home 目录中的用户家目录。如果你想要连此用户的家目录也一并删除，可以加上 –remove-home 这个参数&lt;/li>
&lt;li>-&lt;strong>R, &amp;ndash;root CHROOT_DIR&lt;/strong> # chroot 到的目录&lt;/li>
&lt;li>&lt;strong>-Z, &amp;ndash;selinux-user&lt;/strong> # 为用户删除所有的 SELinux 用户映射&lt;/li>
&lt;/ul>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>userdel -r user # 删除名为 user 的用户，同时删除该用户的家目录和邮件池文件&lt;/li>
&lt;/ul>
&lt;h2 id="usermod---修改用户">usermod - 修改用户&lt;a class="td-heading-self-link" href="#usermod---%e4%bf%ae%e6%94%b9%e7%94%a8%e6%88%b7" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="syntax语法-2">Syntax(语法)&lt;a class="td-heading-self-link" href="#syntax%e8%af%ad%e6%b3%95-2" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>&lt;strong>usermod [OPTIONS] NAME&lt;/strong>&lt;/p>
&lt;p>OPTIONS：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-a, &amp;ndash;append GROUP&lt;/strong> # 将用户追加至上边 -G 中指定附加组中，并不从其它组中删除此用户&lt;/li>
&lt;li>&lt;strong>-c, &amp;ndash;comment &amp;lt;STRING&amp;gt;&lt;/strong> # GECOS 字段的新值&lt;/li>
&lt;li>&lt;strong>-d, &amp;ndash;home &amp;lt;HOME_DIR&amp;gt;&lt;/strong> # 用户的新主目录&lt;/li>
&lt;li>&lt;strong>-e, &amp;ndash;expiredate &amp;lt;EXPIRE_DATE&amp;gt;&lt;/strong> # 设定帐户过期的日期为 EXPIRE_DATE&lt;/li>
&lt;li>&lt;strong>-f, &amp;ndash;inactive INACTIVE&lt;/strong> # 过期 INACTIVE 天数后，设定密码为失效状态&lt;/li>
&lt;li>&lt;strong>-g, &amp;ndash;gid GROUP&lt;/strong> # 强制使用 GROUP 为新主组&lt;/li>
&lt;li>&lt;strong>-G, &amp;ndash;groups GROUPS&lt;/strong> # 新的附加组列表 GROUPS。将用户从该选项指定的组列表以外的组中删除。可以与 -a 选项配合，变更此行为。-a 会将用户附加到指定的组中而不删除。&lt;/li>
&lt;li>&lt;strong>-l, &amp;ndash;login LOGIN&lt;/strong> # 新的登录名称&lt;/li>
&lt;li>&lt;strong>-L, &amp;ndash;lock&lt;/strong> # 锁定用户帐号&lt;/li>
&lt;li>&lt;strong>-m, &amp;ndash;move-home&lt;/strong> # 将家目录内容移至新位置 (仅于 -d 一起使用)&lt;/li>
&lt;li>&lt;strong>-o, &amp;ndash;non-unique&lt;/strong> # 允许使用重复的(非唯一的) UID&lt;/li>
&lt;li>&lt;strong>-p, &amp;ndash;password PASSWORD&lt;/strong> # 将加密过的密码 (PASSWORD) 设为新密码&lt;/li>
&lt;li>-&lt;strong>R, &amp;ndash;root CHROOT_DIR&lt;/strong> # chroot 到的目录&lt;/li>
&lt;li>&lt;strong>-s, &amp;ndash;shell SHELL&lt;/strong> # 该用户帐号的新登录 shell&lt;/li>
&lt;li>&lt;strong>-u, &amp;ndash;uid UID&lt;/strong> # 用户帐号的新 UID&lt;/li>
&lt;li>&lt;strong>-U, &amp;ndash;unlock&lt;/strong> # 解锁用户帐号&lt;/li>
&lt;li>&lt;strong>-Z, &amp;ndash;selinux-user SEUSER&lt;/strong> # 用户账户的新 SELinux 用户映射&lt;/li>
&lt;/ul>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>修改 newname 用户所在群组为 test
&lt;ul>
&lt;li>usermod -g test newname&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>一次将一个用户添加到多个群组
&lt;ul>
&lt;li>usermod -G friends,happy,funny newname&lt;/li>
&lt;li>注意：使用 usermod 时要小心，因为配合-g 或-G 参数时，它会把用户从原先的群组里剔除，加入到新的群组。如果你不想离开原先的群组，又想加入新的群组，可以在-G 参数的基础上加上-a 参数，a 是英语 append 的缩写，表示“追加”。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>-a 追加用户到新的用户组，保留原来的组
&lt;ul>
&lt;li>usermod -aG happy newname&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="groupaddgroupdelgroupmodgpasswd---用户组管理相关命令">groupadd、groupdel、groupmod、gpasswd - 用户组管理相关命令&lt;a class="td-heading-self-link" href="#groupaddgroupdelgroupmodgpasswd---%e7%94%a8%e6%88%b7%e7%bb%84%e7%ae%a1%e7%90%86%e7%9b%b8%e5%85%b3%e5%91%bd%e4%bb%a4" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>OPTIONS：&lt;/p>
&lt;ul>
&lt;li>-f, &amp;ndash;force 如果组已经存在则成功退出，并且如果 GID 已经存在则取消 -g&lt;/li>
&lt;li>-g, &amp;ndash;gid GID # 为新组使用 GID&lt;/li>
&lt;li>-K, &amp;ndash;key KEY=VALUE # 不使用 /etc/login.defs 中的默认值&lt;/li>
&lt;li>-o, &amp;ndash;non-unique # 允许创建有重复 GID 的组&lt;/li>
&lt;li>-p, &amp;ndash;password PASSWORD # 为新组使用此加密过的密码&lt;/li>
&lt;li>-r, &amp;ndash;system # 创建一个系统账户&lt;/li>
&lt;li>-R, &amp;ndash;root CHROOT_DIR # chroot 到的目录&lt;/li>
&lt;/ul>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>创建一个名为 newname 的组
&lt;ul>
&lt;li>groupadd newname&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>修改组
&lt;ul>
&lt;li>groupmod -n test2group testgroup&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>删除名为 test2group 的组
&lt;ul>
&lt;li>groupdel test2group&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>查看当前登陆用户所在的组
&lt;ul>
&lt;li>groups&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>查看 testnewuser 所在的组
&lt;ul>
&lt;li>groups testnewuser&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="who---显示当前登录用户的相关信息">who - 显示当前登录用户的相关信息&lt;a class="td-heading-self-link" href="#who---%e6%98%be%e7%a4%ba%e5%bd%93%e5%89%8d%e7%99%bb%e5%bd%95%e7%94%a8%e6%88%b7%e7%9a%84%e7%9b%b8%e5%85%b3%e4%bf%a1%e6%81%af" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="syntax语法-3">Syntax(语法)&lt;a class="td-heading-self-link" href="#syntax%e8%af%ad%e6%b3%95-3" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>&lt;strong>who [OPTION]&amp;hellip; [ FILE | ARG1 ARG2 ]&lt;/strong>&lt;/p>
&lt;p>OPTIONS&lt;/p>
&lt;ul>
&lt;li>-a 打印能打印的全部&lt;/li>
&lt;li>-d 打印死掉的进程&lt;/li>
&lt;li>-m 同 am i,mom likes&lt;/li>
&lt;li>-q 打印当前登录用户数及用户名&lt;/li>
&lt;li>-u 打印当前登录用户登录信息&lt;/li>
&lt;li>-r 打印运行等级&lt;/li>
&lt;/ul>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>whoami # 要查看当前登录用户的用户名&lt;/li>
&lt;li>who am i # 表示打开当前伪终端的用户的用户名，可以简写为 who&lt;/li>
&lt;/ul>
&lt;p>who&lt;/p>
&lt;h1 id="密码管理工具">密码管理工具&lt;a class="td-heading-self-link" href="#%e5%af%86%e7%a0%81%e7%ae%a1%e7%90%86%e5%b7%a5%e5%85%b7" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="passwd--改变用户的密码">passwd # 改变用户的密码&lt;a class="td-heading-self-link" href="#passwd--%e6%94%b9%e5%8f%98%e7%94%a8%e6%88%b7%e7%9a%84%e5%af%86%e7%a0%81" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://man7.org/linux/man-pages/man1/passwd.1.html">Manual(手册),passwd(1)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h3 id="syntax语法-4">Syntax(语法)&lt;a class="td-heading-self-link" href="#syntax%e8%af%ad%e6%b3%95-4" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;h2 id="chage--控制用户的密码到期信息">chage # 控制用户的密码到期信息&lt;a class="td-heading-self-link" href="#chage--%e6%8e%a7%e5%88%b6%e7%94%a8%e6%88%b7%e7%9a%84%e5%af%86%e7%a0%81%e5%88%b0%e6%9c%9f%e4%bf%a1%e6%81%af" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://man7.org/linux/man-pages/man1/chage.1.html">Manual(手册),chage(1)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>passwd 软件包将会记录用户上次更改密码的时间、应该间隔多久更改一次密码 等等，chage 工具就可以对上述信息进行管理&lt;/p>
&lt;p>&lt;code>chage&lt;/code> 工具仅控制 /etc/shadow 文件中的信息，/etc/passwd 文件并不会影响到 &lt;code>chage&lt;/code> 程序的实现。并且，&lt;code>chage&lt;/code> 程序也不会报告 /etc/passwd 和 /etc/shaodw 文件的不一致情况，&lt;code>pwck&lt;/code> 工具可用于检测两个文件的不一致处。&lt;/p>
&lt;p>&lt;code>chage&lt;/code> 工具仅限于 root 用户，但是 -l 选项除外，非特权用户可以使用 -l 选项来确定自身的密码或账户合适到期。chage 可以修改 /etc/shadow 文件中多个字段的配置。&lt;/p>
&lt;h3 id="syntax语法-5">Syntax(语法)&lt;a class="td-heading-self-link" href="#syntax%e8%af%ad%e6%b3%95-5" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>&lt;strong>chage [OPTIONS] LOGIN&lt;/strong>&lt;/p>
&lt;p>&lt;strong>OPTIONS&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-d, &amp;ndash;lastday &amp;lt;INT&amp;gt;&lt;/strong> # 设置上次更改密码的日期。值是从 1970 年 1 月 1 日开始到某年某月某日的天数。
&lt;ul>
&lt;li>若指定空值，则表示从没修改过密码，即 -l 选项查看的第一行的值为 never。&lt;/li>
&lt;li>若指定 0，则用户再次登录时，则会被强制要求立刻修改密码，否则无法登录&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>-l, &amp;ndash;list&lt;/strong> # 显示账户的老化信息&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># chage -l root&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Last password change : Oct 01, &lt;span style="color:#0000cf;font-weight:bold">2021&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># 最后一次修改密码的时间&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Password expires : never
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Password inactive : never
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Account expires : never
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Minimum number of days between password change : &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Maximum number of days between password change : &lt;span style="color:#0000cf;font-weight:bold">99999&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Number of days of warning before password expires : &lt;span style="color:#0000cf;font-weight:bold">7&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;strong>-m, &amp;ndash;mindays &amp;lt;INT&amp;gt;&lt;/strong> # 密码可以修改的最小间隔天数。如果 INT 为 0，则表示不用等待，任何时候都可以修改密码
&lt;ul>
&lt;li>对应 shadow 文件中的第 4 个字段 minimum password age&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>-M, &amp;ndash;maxdays &amp;lt;INT&amp;gt;&lt;/strong> #
&lt;ul>
&lt;li>对应 shadow 文件中的第 5 个字段 maximum password age&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>-W, &amp;ndash;warndays &amp;lt;INT&amp;gt;&lt;/strong> #
&lt;ul>
&lt;li>对应 shadow 文件中的第 6 个字段 password warning period&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="pwck">pwck&lt;a class="td-heading-self-link" href="#pwck" aria-label="Heading self-link">&lt;/a>&lt;/h2></description></item><item><title>Docs: ACME</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Crypto-mgmt/ACME/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Crypto-mgmt/ACME/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://datatracker.ietf.org/doc/html/rfc8555/">RFC 8555, Automatic Certificate Management Environment (ACME)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.rfc-editor.org/rfc/rfc8737.html">RFC 8737, Automated Certificate Management Environment (ACME) TLS Application‑Layer Protocol Negotiation (ALPN) Challenge Extension&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.rfc-editor.org/rfc/rfc8738.html">RFC 8738, Automated Certificate Management Environment (ACME) IP Identifier Validation Extension&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Automatic_Certificate_Management_Environment">Wiki, ACME&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Automatic Certificate Management Environment(自动证书管理环境，简称 ACME)&lt;/strong> 是一种通信协议，用于自动化证书颁发机构与其用户的 Web 服务器之间的交互，允许以非常低的成本自动部署 PKI。它是由 ISRG 为他们的 Let&amp;rsquo;s Encrypt 服务设计的。&lt;/p>
&lt;h2 id="acme-服务提供商">ACME 服务提供商&lt;a class="td-heading-self-link" href="#acme-%e6%9c%8d%e5%8a%a1%e6%8f%90%e4%be%9b%e5%95%86" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>支持免费或低成本基于 ACME 的证书服务的提供商包括 Let&amp;rsquo;s Encrypt、Buypass Go SSL、ZeroSSL 和 SSL.com。许多其他证书颁发机构和软件供应商提供 ACME 服务，作为 &lt;a href="https://en.wikipedia.org/wiki/Entrust">Entrust&lt;/a> 和 &lt;a href="https://en.wikipedia.org/wiki/DigiCert">DigiCert&lt;/a> 等付费 PKI 解决方案的一部分。&lt;/p>
&lt;h2 id="acme-的实现">ACME 的实现&lt;a class="td-heading-self-link" href="#acme-%e7%9a%84%e5%ae%9e%e7%8e%b0" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>想要实现自动签证书，要经过如下几个步骤&lt;/p>
&lt;ul>
&lt;li>验证要签名证书所使用的域名是属于我的。这个验证过程又有多种途径
&lt;ul>
&lt;li>&lt;strong>DNS 验证&lt;/strong> # 通过提供域名注册商的认证信息(比如 ak、sk)，ACME 程序将会从域名注册商处验证域名属于我的&lt;/li>
&lt;li>&lt;strong>Web 验证&lt;/strong> # 通过域名访问 Web 服务。由于自己可以配置域名解析，所以只要域名可以解析到运行 ACME 程序的设备上，那么 ACME 程序就认为这个域名是属于我的。
&lt;ul>
&lt;li>这种方式有个弊端：首先要保证自己的域名可以解析到运行 ACME 程序的设备上；然后还要保证 ACME 程序可以通过域名访问到自己。这在国内没有备案的域名是不方便的&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://github.com/go-acme/lego">GitHub 项目，go-acme/lego&lt;/a> # 用 &lt;a href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go.md">Go&lt;/a> 语言实现的 ACME 库 和 Let&amp;rsquo;s Encrypt 客户端&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rea1shane/lego-docker-helper">https://github.com/rea1shane/lego-docker-helper&lt;/a> 这是？&lt;/li>
&lt;/ul>
&lt;h1 id="lets-encrypt">Let&amp;rsquo;s Encrypt&lt;a class="td-heading-self-link" href="#lets-encrypt" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://letsencrypt.org/">官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Let%27s_Encrypt">Wiki, Let&amp;rsquo;s Encrypt&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/certbot/certbot">GitHub 项目，certbot/certbot&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="使用-certbot-创建证书">使用 certbot 创建证书&lt;a class="td-heading-self-link" href="#%e4%bd%bf%e7%94%a8-certbot-%e5%88%9b%e5%bb%ba%e8%af%81%e4%b9%a6" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Let&amp;rsquo;s Encrypt 使用 certbot 工具为我们签署证书&lt;/p>
&lt;blockquote>
&lt;p>注意：保证执行 certbot 的服务器的 80 端口是可以被公网访问的，且保证签署证书时提供的域名是可以解析的(即已备案或无需备案)&lt;/p>
&lt;/blockquote>
&lt;p>证书申请成功后将会出现如下提示：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># certbot certonly --standalone&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Saving debug log to /var/log/letsencrypt/letsencrypt.log
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Plugins selected: Authenticator standalone, Installer None
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Please enter in your domain name&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>s&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>comma and/or space separated&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>Enter &lt;span style="color:#4e9a06">&amp;#39;c&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>to cancel&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>: 这里输入自己的&lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">域名&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Obtaining a new certificate
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Performing the following challenges:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>http-01 challenge &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">域名&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Waiting &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> verification...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Cleaning up challenges
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>IMPORTANT NOTES:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - Congratulations! Your certificate and chain have been saved at:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /etc/letsencrypt/live/&lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">域名&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>/fullchain.pem
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Your key file has been saved at:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /etc/letsencrypt/live/&lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">域名&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>/privkey.pem
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Your cert will expire on 2022-09-05. To obtain a new or tweaked
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> version of this certificate in the future, simply run certbot
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> again. To non-interactively renew *all* of your certificates, run
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;certbot renew&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - If you like Certbot, please consider supporting our work by:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Donating to ISRG / Let&lt;span style="color:#a40000">&amp;#39;&lt;/span>s Encrypt: https://letsencrypt.org/donate
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Donating to EFF: https://eff.org/donate-le
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>根据提示，在 &lt;code>/etc/letsencrypt/live/${DNS}/&lt;/code> 目录下，可以找到已经签署的证书及私钥&lt;/p>
&lt;h1 id="zerosll">ZeroSLL&lt;a class="td-heading-self-link" href="#zerosll" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://zerossl.com/">官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/zerossl/">GitHub 组织，ZeroSSL&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>ZeroSLL 是一个 CA 机构，可以为所有人提供快速、可靠、自由的 SSL 保护。&lt;/p>
&lt;p>在 &lt;a href="https://zerossl.com/features/acme/#clients">ZeroSSL Partners &amp;amp; ACME Clients&lt;/a> 这里可以看到所有可以支持使用 ZeroSSL 实现 ACME 的客户端应用，其中就包括 &lt;a href="#acme.sh">acme.sh&lt;/a>&lt;/p>
&lt;h1 id="acmesh">acme.sh&lt;a class="td-heading-self-link" href="#acmesh" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/acmesh-official/acme.sh">GitHub 项目，acemsh-official/acme.sh&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>acmesh 是一个使用纯粹 Shell（Unix shell）语言编写的 ACME 协议客户端。&lt;/p>
&lt;p>在过去，acme.sh 是一个常用的工具来申请、部署和续期免费的 SSL 证书，而默认的免费 SSL 证书 CA 机构是 Let&amp;rsquo;s Encrypt。然而，从 acme.sh v3.0 开始，默认的免费 SSL 证书 CA 机构变更为 ZeroSSL。这意味着 acmesh.sh 现在支持使用 ZeroSSL 来申请免费的SSL证书。&lt;/p>
&lt;h3 id="安装-acmesh">安装 acme.sh&lt;a class="td-heading-self-link" href="#%e5%ae%89%e8%a3%85-acmesh" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>acme.sh 是一个纯 Shell 脚本，首先下载这个脚本&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">MY_EMAIL&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;我的邮箱&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>curl https://get.acme.sh &lt;span style="color:#000;font-weight:bold">|&lt;/span> sh -s &lt;span style="color:#000">$MY_EMAIL&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">source&lt;/span> ~/.bashrc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>该脚本会创建 &lt;code>~/.acme.sh/&lt;/code> 目录，并在该目录中安装 acme.sh 脚本。acme.sh 的配置文件，生成证书默认保存的位置也在这里。同时会在 &lt;code>~/.bashrc&lt;/code> 文件中添加 &lt;code>. &amp;quot;/root/.acme.sh/acme.sh.env&amp;quot;&lt;/code>&lt;/p>
&lt;p>&lt;strong>安装过程不会污染已有的系统任何功能和文件&lt;/strong>, 所有的修改都限制在安装目录中: &lt;code>~/.acme.sh/&lt;/code>&lt;/p>
&lt;p>会在系统的 Crontab 中创建一个逻辑&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># crontab -l&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#0000cf;font-weight:bold">26&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> * * * /root/.acme.sh/acme.sh --cron --home &lt;span style="color:#4e9a06">&amp;#34;/root/.acme.sh&amp;#34;&lt;/span> &amp;gt; /dev/null
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="关联文件与配置">关联文件与配置&lt;a class="td-heading-self-link" href="#%e5%85%b3%e8%81%94%e6%96%87%e4%bb%b6%e4%b8%8e%e9%85%8d%e7%bd%ae" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>~/.acme.sh/&lt;/strong> # acme.sh 程序的主要工作目录&lt;/p>
&lt;ul>
&lt;li>&lt;strong>./account.conf&lt;/strong> # 包括不同 DNS 提供商的认证信息、账户信息、等等&lt;/li>
&lt;li>&lt;strong>./$DOMAIN_NAME/&lt;/strong> # 已处理域名的信息保存路径
&lt;ul>
&lt;li>&lt;strong>./$DOMAIN_NAME.conf&lt;/strong> # 与该域名相关的配置信息。&lt;code>acme.sh --info -d example.com&lt;/code> 命令读取的就是这个文件&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="生成证书">生成证书&lt;a class="td-heading-self-link" href="#%e7%94%9f%e6%88%90%e8%af%81%e4%b9%a6" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="不同-dns-提供商的处理">不同 DNS 提供商的处理&lt;a class="td-heading-self-link" href="#%e4%b8%8d%e5%90%8c-dns-%e6%8f%90%e4%be%9b%e5%95%86%e7%9a%84%e5%a4%84%e7%90%86" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;h4 id="使用阿里云解析生成证书">使用阿里云解析生成证书&lt;a class="td-heading-self-link" href="#%e4%bd%bf%e7%94%a8%e9%98%bf%e9%87%8c%e4%ba%91%e8%a7%a3%e6%9e%90%e7%94%9f%e6%88%90%e8%af%81%e4%b9%a6" aria-label="Heading self-link">&lt;/a>&lt;/h4>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/acmesh-official/acme.sh/wiki/dnsapi#11-use-aliyun-domain-api-to-automatically-issue-cert">GitHub 项目 Wiki, acmesh-official/acme.sh-dnsapi-使用阿里云域名 API 自动颁发证书&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>从 &lt;a href="https://ram.console.aliyun.com/users">阿里云控制台-RAM 访问控制-身份管理-用户&lt;/a> 处创建用户并获取 AK、SK&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">Ali_Key&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;AccessKeyId&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">Ali_Secret&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;AccessKeySecret&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="使用-namecom-生成证书">使用 Name.com 生成证书&lt;a class="td-heading-self-link" href="#%e4%bd%bf%e7%94%a8-namecom-%e7%94%9f%e6%88%90%e8%af%81%e4%b9%a6" aria-label="Heading self-link">&lt;/a>&lt;/h4>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/acmesh-official/acme.sh/wiki/dnsapi#28-use-namecom-api">GitHub 项目 Wiki, acmesh-official/acme.sh-dnsapi-使用 Name.com API&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>从 &lt;a href="https://www.name.com/zh-cn/account/settings/api">https://www.name.com/zh-cn/account/settings/api&lt;/a> 创建 Token&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">Namecom_Username&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;XXXX&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">Namecom_Token&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;XXXXX&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意：这俩变量要使用 PRODUCTION(生产)环境的。Name.com 创建完 Token 后会有两个~一个用于生产，一个用于测试，对应不用的 API&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>acme.sh --issue --dns dns_namecom -d 102205.xyz -d *.102205.xyz
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="使用-dnspod-生成证书">使用 DNSPod 生成证书&lt;a class="td-heading-self-link" href="#%e4%bd%bf%e7%94%a8-dnspod-%e7%94%9f%e6%88%90%e8%af%81%e4%b9%a6" aria-label="Heading self-link">&lt;/a>&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">DP_Id&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;XXXXXX&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">DP_Key&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;YYYYYYYYYYYYYYYY&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>acme.sh --issue --dns dns_dp -d 102205.xyz -d *.102205.xyz
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="拷贝证书">拷贝证书&lt;a class="td-heading-self-link" href="#%e6%8b%b7%e8%b4%9d%e8%af%81%e4%b9%a6" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>前面证书生成以后, 接下来需要把证书 copy 到真正需要用它的地方.&lt;/p>
&lt;p>注意, 默认生成的证书都放在安装目录下: &lt;code>~/.acme.sh/&lt;/code>, 请不要直接使用此目录下的文件, 例如: 不要直接让 nginx/apache 的配置文件使用这下面的文件. 这里面的文件都是内部使用, 而且目录结构可能会变化.&lt;/p>
&lt;p>正确的使用方法是使用 &lt;code>--install-cert&lt;/code> 命令,并指定目标位置, 然后证书文件会被copy到相应的位置&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>acme.sh --install-cert -d 102205.xyz &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span>--key-file ~/projects/DesistDaydream/cloud-native-apps/compose/nginx-myself/config/certs/102205.key &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span>--fullchain-file ~/projects/DesistDaydream/cloud-native-apps/compose/nginx-myself/config/certs/102205.pem &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span>--reloadcmd &lt;span style="color:#4e9a06">&amp;#34;docker exec -it nginx-geoip2 nginx -c /etc/nginx/nginx/nginx.conf -s reload&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="查看证书信息">查看证书信息&lt;a class="td-heading-self-link" href="#%e6%9f%a5%e7%9c%8b%e8%af%81%e4%b9%a6%e4%bf%a1%e6%81%af" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>acme.sh --info -d example.com
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 会输出如下内容：&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">DOMAIN_CONF&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>/root/.acme.sh/example.com/example.com.conf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Le_Domain&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>example.com
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Le_Alt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>no
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Le_Webroot&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>dns_ali
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Le_PreHook&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Le_PostHook&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Le_RenewHook&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Le_API&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>https://acme-v02.api.letsencrypt.org/directory
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Le_Keylength&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Le_OrderFinalize&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>https://acme-v02.api.letsencrypt.org/acme/finalize/23xxxx150/781xxxx4310
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Le_LinkOrder&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>https://acme-v02.api.letsencrypt.org/acme/order/233xxx150/781xxxx4310
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Le_LinkCert&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>https://acme-v02.api.letsencrypt.org/acme/cert/04cbd28xxxxxx349ecaea8d07
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Le_CertCreateTime&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1649358725&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Le_CertCreateTimeStr&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>Thu Apr &lt;span style="color:#0000cf;font-weight:bold">7&lt;/span> 19:12:05 UTC &lt;span style="color:#0000cf;font-weight:bold">2022&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Le_NextRenewTimeStr&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>Mon Jun &lt;span style="color:#0000cf;font-weight:bold">6&lt;/span> 19:12:05 UTC &lt;span style="color:#0000cf;font-weight:bold">2022&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Le_NextRenewTime&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1654456325&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Le_RealCertPath&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Le_RealCACertPath&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Le_RealKeyPath&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>/etc/acme/example.com/privkey.pem
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Le_ReloadCmd&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>service nginx force-reload
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Le_RealFullChainPath&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>/etc/acme/example.com/chain.pem
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这些信息是保存在 &lt;code>~/.acme.sh/DOMAIN_NAME/DOMAIN_NAME.conf&lt;/code> 文件中的，我们可以直接修改文件内容，比如 ReloadCmd、等等&lt;/p></description></item><item><title>Docs: AI Projects</title><link>https://desistdaydream.github.io/docs/12.AI/AI-Projects/AI-Projects/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/12.AI/AI-Projects/AI-Projects/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;a href="https://stability.ai/">https://stability.ai/&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/Stability-AI/generative-models">https://github.com/Stability-AI/generative-models&lt;/a> # 补帧，通过静态图片生成动图。&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://github.com/labring/FastGPT">labring/FastGPT&lt;/a>&lt;/p>
&lt;ul>
&lt;li>一个快速使用 openai api 的平台。支持一键构建AI知识库，支持多用户、多模型管理。&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://github.com/binary-husky/gpt_academic">https://github.com/binary-husky/gpt_academic&lt;/a> # 为GPT/GLM等LLM大语言模型提供实用化交互接口，特别优化论文阅读/润色/写作体验，模块化设计，支持自定义快捷按钮&amp;amp;函数插件，支持Python和C++等项目剖析&amp;amp;自译解功能，PDF/LaTex论文翻译&amp;amp;总结功能，支持并行问询多种LLM模型，支持chatglm3等本地模型。接入通义千问, deepseekcoder, 讯飞星火, 文心一言, llama2, rwkv, claude2, moss等。&lt;/p>
&lt;p>&lt;strong>NovelAI&lt;/strong> # &lt;a href="https://novelai.net/">https://novelai.net/&lt;/a> 写故事、作图&lt;/p>
&lt;p>&lt;strong>ChatGPT&lt;/strong> # &lt;a href="https://chat.openai.com/">https://chat.openai.com/&lt;/a>&lt;/p>
&lt;p>&lt;strong>Bard&lt;/strong>，google # &lt;a href="https://bard.google.com/">https://bard.google.com/&lt;/a>&lt;/p>
&lt;p>&lt;strong>Claude&lt;/strong>，Anthropic # 在 Slack 中创建名为 Claude 的应用。&lt;/p>
&lt;p>&lt;strong>文心一言&lt;/strong>，百度 # &lt;a href="https://yiyan.baidu.com/">https://yiyan.baidu.com/&lt;/a>&lt;/p>
&lt;p>&lt;strong>通义千问&lt;/strong>，阿里 # &lt;a href="https://tongyi.aliyun.com/">https://tongyi.aliyun.com/&lt;/a>&lt;/p>
&lt;h1 id="用于解决复杂任务的-ai">用于解决复杂任务的 AI&lt;a class="td-heading-self-link" href="#%e7%94%a8%e4%ba%8e%e8%a7%a3%e5%86%b3%e5%a4%8d%e6%9d%82%e4%bb%bb%e5%8a%a1%e7%9a%84-ai" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;a href="https://blog.x-agent.net/blog/xagent/">https://blog.x-agent.net/blog/xagent/&lt;/a>&lt;/p>
&lt;p>虽然开创性项目（e.g., &lt;a href="https://github.com/Significant-Gravitas/AutoGPT">AutoGPT&lt;/a>, &lt;a href="https://github.com/yoheinakajima/babyagi">BabyAGI&lt;/a>, &lt;a href="https://github.com/camel-ai/camel">CAMEL&lt;/a>, &lt;a href="https://github.com/geekan/MetaGPT">MetaGPT&lt;/a>, &lt;a href="https://github.com/microsoft/autogen">AutoGen&lt;/a>, &lt;a href="https://github.com/stanfordnlp/dspy">DSPy&lt;/a>, &lt;a href="https://github.com/Link-AGI/AutoAgents">AutoAgents&lt;/a>, &lt;a href="https://github.com/xlang-ai/OpenAgents">OpenAgents&lt;/a>, &lt;a href="https://github.com/aiwaves-cn/agents">Agents&lt;/a>, &lt;a href="https://github.com/OpenBMB/AgentVerse">AgentVerse&lt;/a>, &lt;a href="https://github.com/OpenBMB/ChatDev">ChatDev&lt;/a>）已经展示了这个方向的潜力，但完全自主的 AI 代理之旅仍然面临着巨大的挑战。&lt;/p>
&lt;p>&lt;a href="https://github.com/OpenBMB/XAgent">GitHub 项目，OpenBMB/XAgent&lt;/a>&lt;/p>
&lt;ul>
&lt;li>OpenBMB开源社区由清华大学自然语言处理实验室和&lt;a href="https://modelbest.cn/">面壁智能&lt;/a>共同支持发起&lt;/li>
&lt;/ul>
&lt;h1 id="claude">Claude&lt;a class="td-heading-self-link" href="#claude" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/7YJ7B6JTV7U1gXeLOiZsLw">公众号-OSC 开源社区，Anthropic推出 “更理性的 Claude”，正面硬刚ChatGPT&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Anthropic 公司推出的&lt;/p>
&lt;p>Claude 早期可以作为 &lt;a href="https://desistdaydream.github.io/docs/Utils/%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1/Slack.md">Slack&lt;/a> 的应用被添加到 Workspace 中并无条件使用。&lt;/p></description></item><item><title>Docs: Alertmanager</title><link>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Alertmanager/Alertmanager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/Metrics/Alertmanager/Alertmanager/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://prometheus.io/docs/alerting/latest/alertmanager/">官方文档&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Prometheus Alert 介绍详见 Prometheus Server Alert 说明&lt;/p>
&lt;p>Alertmanager 处理由客户端应用程序（例如 Prometheus 服务器）发送的警报。它负责将重复数据删除，分组和路由到正确的接收者集成，例如电子邮件，PagerDuty 或 OpsGenie。它还负责沉默和禁止警报。&lt;/p>
&lt;p>&lt;strong>Alertmanager 特性&lt;/strong>&lt;/p>
&lt;p>Prometheus 发送过来的每一个告警，都会由 Alertmanager 进行重复数据删除、分组、路由到正确的接收者(e.g.邮件、钉钉等)上。&lt;/p>
&lt;p>Alertmanager 除了提供基本的告警通知能力以外，还主要提供了如：分组、抑制以及静默等告警特性：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/fesx4v/1616068406984-251af31d-3e59-4621-bb62-d5228da42408.jpeg" alt="">&lt;/p>
&lt;p>&lt;strong>分组&lt;/strong>&lt;/p>
&lt;p>分组机制可以将详细的告警信息合并成一个通知。在某些情况下，比如由于系统宕机导致大量的告警被同时触发，在这种情况下分组机制可以将这些被触发的告警合并为一个告警通知，避免一次性接受大量的告警通知，而无法对问题进行快速定位。&lt;/p>
&lt;p>例如，当集群中有数百个正在运行的服务实例，并且为每一个实例设置了告警规则。假如此时发生了网络故障，可能导致大量的服务实例无法连接到数据库，结果就会有数百个告警被发送到 Alertmanager。&lt;/p>
&lt;p>而作为用户，可能只希望能够在一个通知中中就能查看哪些服务实例收到影响。这时可以按照服务所在集群或者告警名称对告警进行分组，而将这些告警内聚在一起成为一个通知。&lt;/p>
&lt;p>告警分组，告警时间，以及告警的接受方式可以通过 Alertmanager 的配置文件进行配置。&lt;/p>
&lt;p>&lt;strong>抑制&lt;/strong>&lt;/p>
&lt;p>抑制是指当某一告警发出后，可以停止重复发送由此告警引发的&lt;font color="#ff0000">其它&lt;/font>告警的机制。&lt;/p>
&lt;p>例如，当集群不可访问时触发了一次告警，通过配置 Alertmanager 可以忽略与该集群有关的其它所有告警。这样可以避免接收到大量与实际问题无关的告警通知。&lt;/p>
&lt;p>抑制机制同样通过 Alertmanager 的配置文件进行设置。&lt;/p>
&lt;p>&lt;strong>静默&lt;/strong>&lt;/p>
&lt;p>静默提供了一个简单的机制可以快速根据标签对告警进行静默处理。如果接收到的告警符合静默的配置，Alertmanager 则不会发送告警通知。&lt;/p>
&lt;p>静默设置需要在 Alertmanager 的 Web 页面上进行设置。&lt;/p>
&lt;h2 id="alertmanager-告警分组">Alertmanager 告警分组&lt;a class="td-heading-self-link" href="#alertmanager-%e5%91%8a%e8%ad%a6%e5%88%86%e7%bb%84" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>每一个告警进入 Alertmanager 后，都会进行分组处理，可以根据规则将多条告警合并为一个通知。这是为了可以让相关的告警可以合并在一起，一次性收集和发送，以便运维人员的故障排查。&lt;/p>
&lt;h2 id="alertmanager-告警路由">Alertmanager 告警路由&lt;a class="td-heading-self-link" href="#alertmanager-%e5%91%8a%e8%ad%a6%e8%b7%af%e7%94%b1" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>告警路由，顾名思义，路由就是根据“目的接收者”将每个告警发送到指定的接收者上的过程。&lt;/p>
&lt;p>每一个告警进入到 Alertmanager 都会由顶级的 route 进入路由树，需要注意的是顶级的 route 必须匹配所有告警(即不能有任何的匹配设置 match 和 match_re)，在一个路由树中，将每个被路由的目标称为 &lt;strong>Node(节点)。&lt;/strong>&lt;/p>
&lt;p>每一个路由都可以定义自己的接受人以及匹配规则。默认情况下，告警进入到顶级 route 后会遍历所有的子节点，直到找到最深的匹配 route，并将告警发送到该 route 定义的 receiver 中。但如果 route 中设置 continue 的值为 false，那么告警在匹配到第一个子节点之后就直接停止。如果 continue 为 true，报警则会继续进行后续子节点的匹配。如果当前告警匹配不到任何的子节点，那该告警将会基于当前路由节点的接收器配置方式进行处理。&lt;/p>
&lt;p>其中告警的匹配有两种方式可以选择。一种方式基于字符串验证，通过设置 match 规则判断当前告警中是否存在标签 labelname 并且其值等于 labelvalue。第二种方式则基于正则表达式，通过设置 match_re 验证当前告警标签的值是否满足正则表达式的内容。&lt;/p>
&lt;p>如果警报已经成功发送通知, 如果想设置发送告警通知之前要等待时间，则可以通过 repeat_interval 参数进行设置。&lt;/p>
&lt;h2 id="alertmanager-告警模板">Alertmanager 告警模板&lt;a class="td-heading-self-link" href="#alertmanager-%e5%91%8a%e8%ad%a6%e6%a8%a1%e6%9d%bf" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>告警模板的使用方式详见：告警模板详解&lt;/p>
&lt;p>默认情况下 Alertmanager 使用了系统自带的默认通知模板，模板源码可以从 &lt;a href="https://github.com/prometheus/alertmanager/blob/master/template/default.tmpl">https://github.com/prometheus/alertmanager/blob/master/template/default.tmpl&lt;/a> 获得。Alertmanager 的通知模板基于 Go 的模板系统。Alertmanager 也支持用户定义和使用自己的模板，一般来说有两种方式可以选择。&lt;/p>
&lt;p>第一种，基于模板字符串。用户可以直接在 Alertmanager 的配置文件中使用模板字符串，例如:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">receivers&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#39;slack-notifications&amp;#39;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">slack_configs&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">channel&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#39;#alerts&amp;#39;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">text&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#39;https://internal.myorg.net/wiki/alerts/{{ .GroupLabels.app }}/{{ .GroupLabels.alertname }}&amp;#39;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>第二种方式，自定义可复用的模板文件。例如，可以创建自定义模板文件 custom-template.tmpl，如下所示：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{{&lt;/span> &lt;span style="color:#000">define&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;slack.myorg.text&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">}}&lt;/span>&lt;span style="color:#000">https&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#8f5902;font-style:italic">//internal.myorg.net/wiki/alerts/{{ .GroupLabels.app }}/{{ .GroupLabels.alertname }}{{ end}}
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过在 Alertmanager 的全局设置中定义 templates 配置来指定自定义模板的访问路径:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># Files from which custom notification template definitions are read.&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># The last component may use a wildcard matcher, e.g. &amp;#39;templates/*.tmpl&amp;#39;.&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">templates&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">&amp;lt;filepath&amp;gt; ... ]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在设置了自定义模板的访问路径后，用户则可以直接在配置中使用该模板：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">receivers&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#39;slack-notifications&amp;#39;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">slack_configs&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">channel&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#39;#alerts&amp;#39;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">text&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#39;{{ template &amp;#34;slack.myorg.text&amp;#34; . }}&amp;#39;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">templates&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>- &lt;span style="color:#4e9a06">&amp;#39;/etc/alertmanager/templates/myorg.tmpl&amp;#39;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="alertmanager-部署">Alertmanager 部署&lt;a class="td-heading-self-link" href="#alertmanager-%e9%83%a8%e7%bd%b2" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>与 prometheus 一样，可以通过二进制安装或者 docker 启动&lt;/p>
&lt;h2 id="使用-docker-的方式运行-alertmanager">使用 docker 的方式运行 Alertmanager&lt;a class="td-heading-self-link" href="#%e4%bd%bf%e7%94%a8-docker-%e7%9a%84%e6%96%b9%e5%bc%8f%e8%bf%90%e8%a1%8c-alertmanager" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>获取配置文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>mkdir -p /etc/monitoring
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker run -d --name alertmanager --rm prom/alertmanager
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker cp alertmanager:/etc/alertmanager /etc/monitoring
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker stop alertmanager
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行 Alertmanager&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker run -d --name alertmanager &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> --network host &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> -v /etc/localtime:/etc/localtime &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> -v /etc/monitoring/alertmanager:/etc/alertmanager/config_out &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> prom/alertmanager &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> --config.file&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>/etc/alertmanager/config_out/alertmanager.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>部署完成后，Alertmanager 默认监听在 9093 端口上，通过浏览器打开 http://localhost:9093 可以看到如下示例的画面&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/fesx4v/1616068406956-f10fe3df-d57f-4602-a6ab-e4aab90c89f1.jpeg" alt="">&lt;/p>
&lt;p>首页 Alerts 标签上显示了从 Prometheus Server 推送过来的每一条告警，可以通过点击告警信息中的 Silence 来让该告警静音(i.e.不再发送告警邮件)&lt;/p>
&lt;h2 id="alertmanager-运行时的标志flags说明">Alertmanager 运行时的标志(Flags)说明&lt;a class="td-heading-self-link" href="#alertmanager-%e8%bf%90%e8%a1%8c%e6%97%b6%e7%9a%84%e6%a0%87%e5%bf%97flags%e8%af%b4%e6%98%8e" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>alertmanager 程序在启动时，可以使用一些标志来对程序进行一些基本设定，比如数据存储路径、存储时间等等&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&amp;ndash;config.file=&amp;quot;/PATH/TO/FILE&amp;quot;&lt;/strong># 指定 alertmanager 基本配置文件。 默认 /etc/alertmanager/alertmanager.yml&lt;/li>
&lt;li>&lt;strong>&amp;ndash;storage.path=&amp;quot;/PATH&amp;quot;&lt;/strong># 指定存储数据的基础路径。该路径包括告警信息、已经 silences 的告警等信息。&lt;/li>
&lt;li>&lt;strong>&amp;ndash;data.retention=120h&lt;/strong> # 数据保存时长。&lt;/li>
&lt;li>&amp;ndash;alerts.gc-interval=30m # Interval between alert GC.&lt;/li>
&lt;li>&amp;ndash;web.external-url=WEB.EXTERNAL-URL zThe URL under which Alertmanager is externally reachable (for example, if Alertmanager is served via a reverse proxy). Used for generating relative and absolute links back to Alertmanagerzitself. If the URL has a path portion, it will be used to prefix all HTTP endpoints served by Alertmanager. If omitted, relevant URL components will be derived automatically.&lt;/li>
&lt;li>&amp;ndash;web.route-prefix=WEB.ROUTE-PREFIX zPrefix for the internal routes of web endpoints. Defaults to path of &amp;ndash;web.external-url.&lt;/li>
&lt;li>&amp;ndash;web.listen-address=&amp;quot;:9093&amp;quot; zAddress to listen on for the web interface and API.&lt;/li>
&lt;li>&amp;ndash;web.get-concurrency=0 Maximum number of GET requests processed concurrently. If negative or zero, the limit is GOMAXPROC or 8, whichever is larger.&lt;/li>
&lt;li>&amp;ndash;web.timeout=0 Timeout for HTTP requests. If negative or zero, no timeout is set.&lt;/li>
&lt;li>&amp;ndash;cluster.listen-address=&amp;ldquo;0.0.0.0:9094&amp;rdquo; zListen address for cluster. Set to empty string to disable HA mode.&lt;/li>
&lt;li>&amp;ndash;cluster.advertise-address=CLUSTER.ADVERTISE-ADDRESS zExplicit address to advertise in cluster.&lt;/li>
&lt;li>&amp;ndash;cluster.peer=CLUSTER.PEER &amp;hellip; zInitial peers (may be repeated).&lt;/li>
&lt;li>&amp;ndash;cluster.peer-timeout=15s zTime to wait between peers to send notifications.&lt;/li>
&lt;li>&amp;ndash;cluster.gossip-interval=200ms zInterval between sending gossip messages. By lowering this value (more frequent) gossip messages are propagated across the cluster more quickly at the expense of increased bandwidth.&lt;/li>
&lt;li>&amp;ndash;cluster.pushpull-interval=1m0s zInterval for gossip state syncs. Setting this interval lower (more frequent) will increase convergence speeds across larger clusters at the expense of increased bandwidth usage.&lt;/li>
&lt;li>&amp;ndash;cluster.tcp-timeout=10s Timeout for establishing a stream connection with a remote node for a full state sync, and for stream read and write operations.&lt;/li>
&lt;li>&amp;ndash;cluster.probe-timeout=500ms zTimeout to wait for an ack from a probed node before assuming it is unhealthy. This should be set to 99-percentile of RTT (round-trip time) on your network.&lt;/li>
&lt;li>&amp;ndash;cluster.probe-interval=1s zInterval between random node probes. Setting this lower (more frequent) will cause the cluster to detect failed nodes more quickly at the expense of increased bandwidth usage.&lt;/li>
&lt;li>&amp;ndash;cluster.settle-timeout=1m0s zMaximum time to wait for cluster connections to settle before evaluating notifications.&lt;/li>
&lt;li>&amp;ndash;cluster.reconnect-interval=10s zInterval between attempting to reconnect to lost peers.&lt;/li>
&lt;li>&amp;ndash;cluster.reconnect-timeout=6h0m0s zLength of time to attempt to reconnect to a lost peer.&lt;/li>
&lt;li>&amp;ndash;log.level=info Only log messages with the given severity or above. One of: [debug, info, warn, error]&lt;/li>
&lt;li>&amp;ndash;log.format=logfmt Output format of log messages. One of: [logfmt, json]&lt;/li>
&lt;li>&amp;ndash;version Show application version.&lt;/li>
&lt;/ul>
&lt;h1 id="alertmanager-配置">Alertmanager 配置&lt;a class="td-heading-self-link" href="#alertmanager-%e9%85%8d%e7%bd%ae" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>/etc/alertmanager/alertmanager.conf # alertmanager 基本配置文件默认位置。可以通过 &amp;ndash;config.file 标志指定其他配置文件&lt;/p>
&lt;p>下面是一个基本的 alertmanager.conf 配置文件示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 全局配置环境&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">global&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">resolve_timeout&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">5m&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># 该参数定义了当Alertmanager持续多长时间未接收到告警后标记告警状态为resolved（已解决）&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># 配置邮件发送信息&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">smtp_smarthost&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;smtp.163.com:25&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">smtp_from&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;ych_1024@163.com&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">smtp_auth_username&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;ych_1024@163.com&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">smtp_auth_password&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;lt;邮箱密码&amp;gt;&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">smtp_hello&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;163.com&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">smtp_require_tls&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">false&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># 路由配置环境。所有报警信息进入后的根路由，用来设置报警的分发策略&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">route&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">group_by&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;alertname&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;cluster&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># 这里的标签列表是接收到报警信息后的重新分组标签，例如，接收到的报警信息里面有许多具有 cluster=A 和 alertname=LatncyHigh 这样的标签的报警信息将会批量被聚合到一个分组里面&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">group_wait&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">TIME&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># 当一个新的报警分组被创建后，需要等待至少TIME时间来初始化通知，这种方式可以确保您能有足够的时间为同一分组来获取多个警报，然后一起触发这个报警信息。&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">group_interval&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">TIME&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># 重复发送报警的设置(报警未消除的重复报警)。当一个组里的报警有变化时，等待&amp;#39;group_interval&amp;#39;时间来发送新的一组报警信息。默认5分钟。&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">repeat_interval&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">TIME&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># 重复发送报警的设置(报警未消除的重复报警)。一个组里的报警一直没有变化的话，等待&amp;#39;repeat_interval&amp;#39;时间来重新发送他们。默认4小时。&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">receiver&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">STRING&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># 指定默认的receiver名，如果一个报警没有任何一个routes匹配，则发送给默认的receiver&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">routes&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># 上面所有的配置参数都由所有子路由继承，并且可以在每个子路由上进行覆盖。&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">receiver&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">STRING&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># 指定该子路由要使用的receiver&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">group_wait&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">TIME&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">match&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># 指定标签名和值，凡是具有该标签名和值的告警由将路由到指定的receiver上&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># 也可以使用 match_re 关键字，来进行正则表达式匹配。LabelValue 可以使用正则来表示&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">LabelName&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">LabelValue&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># 接收者配置环境。用于定义分配好路由的告警信息将由谁来接收。&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">receivers&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;default&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># 指定receiver的名字&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">email_configs&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># 指定该receiver使用哪种配置&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">to&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;desistdaydream@wisetv.com.cn&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">send_resolved&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># 指定是否发送告警已解决的信息。默认为false,i.e.不发送&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="配置样例">配置样例&lt;a class="td-heading-self-link" href="#%e9%85%8d%e7%bd%ae%e6%a0%b7%e4%be%8b" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="默认配置文件">默认配置文件&lt;a class="td-heading-self-link" href="#%e9%bb%98%e8%ae%a4%e9%85%8d%e7%bd%ae%e6%96%87%e4%bb%b6" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">global&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">resolve_timeout&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">5m&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">route&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">group_by&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;alertname&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">group_wait&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">10s&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">group_interval&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">10s&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">repeat_interval&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">1h&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">receiver&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;web.hook&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">receivers&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;web.hook&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">webhook_configs&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">url&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;http://127.0.0.1:5001/&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">inhibit_rules&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">source_match&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">severity&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;critical&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">target_match&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">severity&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;warning&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">equal&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;alertname&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;dev&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;instance&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="使用腾讯企业邮箱的配置样例">使用腾讯企业邮箱的配置样例&lt;a class="td-heading-self-link" href="#%e4%bd%bf%e7%94%a8%e8%85%be%e8%ae%af%e4%bc%81%e4%b8%9a%e9%82%ae%e7%ae%b1%e7%9a%84%e9%85%8d%e7%bd%ae%e6%a0%b7%e4%be%8b" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>Note：如果要使用腾讯企业邮箱，则需要生成客户端密码，位置如下图&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/fesx4v/1616068406969-84d8a216-cd2b-4438-a0e6-a6a85c64318a.jpeg" alt="">&lt;/p>
&lt;p>下面的配置默认会将所有告警都发送给desistdaydream@wisetv.com.cn。其中具有 network_device: interface-state 标签名和值的告警会发送给wangpeng@wisetv.com.cn&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">global&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">resolve_timeout&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">5m&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">smtp_smarthost&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;smtp.exmail.qq.com:587&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">smtp_from&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;desistdaydream@wisetv.com.cn&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">smtp_auth_username&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;desistdaydream@wisetv.com.cn&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">smtp_auth_password&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;bVcyqAh4jnz2hkVg&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">smtp_hello&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;qq.com&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">smtp_require_tls&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">route&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">group_by&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;alertname&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;cluster&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">group_wait&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">30s&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">group_interval&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">5m&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">repeat_interval&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">5m&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">receiver&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">default&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">routes&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">receiver&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;network-group&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">group_wait&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">10s&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">match&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">network_device&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">interface-state&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">receivers&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;default&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">email_configs&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">to&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;desistdaydream@wisetv.com.cn&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">send_resolved&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;network-group&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">email_configs&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">to&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;wangpeng@wisetv.com.cn&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">send_resolved&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">to&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;desistdaydream@wisetv.com.cn&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">send_resolved&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="alertmanager-api">Alertmanager API&lt;a class="td-heading-self-link" href="#alertmanager-api" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/prometheus/alertmanager/blob/main/api/v2/openapi.yaml">GitHub 项目文件，prometheus/alertmanager/api/v2/openapi.yaml&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>Docs: ANSI</title><link>https://desistdaydream.github.io/docs/Standard/IT/ANSI/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/Standard/IT/ANSI/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/American_National_Standards_Institute">Wiki, ANSI&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>American National Standards Institute(美国国家标准协会，简称 ANSI)&lt;/strong> 是一家私人非营利组织，负责监督美国产品、服务、流程、系统和人员自愿共识标准的制定。 该组织还将美国标准与国际标准相协调，以便美国产品可以在全球范围内使用。&lt;/p></description></item><item><title>Docs: Ansible</title><link>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/Ansible/Ansible/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/Ansible/Ansible/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.ansible.com/">官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/ansible/ansible">GitHub 项目，ansible/ansible&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/index.html">官方文档&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/qu0vPgyNBbRlTtf1pMtq7Q">公众号,程序员面试吧-快速入门 Ansible 自动化运维工具&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.zsythink.net/archives/tag/ansible/">https://www.zsythink.net/archives/tag/ansible/&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy and maintain. Automate everything from code deployment to network configuration to cloud management, in a language that approaches plain English, using SSH, with no agents to install on remote systems&lt;/p>
&lt;p>Ansible 是一个非常简单的 IT 自动化系统。它处理配置管理、应用程序部署、云供应、临时任务执行、网络自动化和多节点编排。Ansible 可以轻松得批量进行复杂的更改，例如使用负载均衡器进行零停机滚动更新。而这一过程使用 SSH 实现，无需在远程系统上安装代理程序。&lt;/p>
&lt;p>Ansible 的主要目标是简单易用。它还非常注重安全性和可靠性，具有最少的移动部件，使用 OpenSSH 进行传输（使用其他传输和拉模式作为替代），以及一种围绕人类可审计性设计的语言 - 即使是那些不熟悉的人该程序。&lt;/p>
&lt;h2 id="概念">概念&lt;a class="td-heading-self-link" href="#%e6%a6%82%e5%bf%b5" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>Control node(控制节点)&lt;/strong> # 任何安装了 Ansible 的机器都可以称为控制节点。在控制节点中可以通过调用 &lt;code>ansible&lt;/code> 或 &lt;code>ansible-playbook&lt;/code> 命令来运行 Ansible 相关命令和 Playbooks。&lt;/p>
&lt;p>&lt;strong>Managed nodes(受管理节点)&lt;/strong> # 使用 Ansible 管理的 网络设备 或 服务器。受管理节点有时候也称为 &lt;strong>hosts&lt;/strong>。&lt;/p>
&lt;p>&lt;strong>Inventory(库存)&lt;/strong> # 库存是一个受管理节点的列表。库存有时候也称为 &lt;strong>hostfile&lt;/strong>。Inventory 还可以用来组织受管理节点，将每个节点进行分组，以便于扩展&lt;/p>
&lt;p>&lt;strong>Collections&lt;/strong> # 2.10 版本之后的新概念。Collections 是 Ansible 内容的分发格式，可以包括 Playbooks、Role、Modules、Plugins。新版中，Modules 和 Plugins 就被托管于 Collections 中。&lt;/p>
&lt;ul>
&lt;li>随着 Ansible 的发展，越来越多的模块、插件被开发并加入到 Ansible 的大家庭，这时候难免会出现命名上的冲突，或者调用上的重复。所以，从 2.10 版本之后，提出了 Collections 的概念。
&lt;ul>
&lt;li>Collections 最大的一个功能就是将模块分类，比如以前 核心模块 command，现在的全名就叫 ansible.builtin.command，前面的 ansible.builtin 就是 command 的 Collections。这种全名称为 &lt;strong>Full Qualified Class Name(完全限定类名，简称 FQCN)&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Tasks(任务)&lt;/strong> # Ansible 工作的最小单元，Ansible 对受管理节点执行的操作，称为任务。&lt;/p>
&lt;p>&lt;strong>Modules(模块)&lt;/strong> # 模块就是 Ansible 用来执行 Tasks 的代码。&lt;/p>
&lt;p>&lt;strong>Playbooks(剧本)&lt;/strong> # 一个被保存起来的有序的 Tasks 列表，通过重复运行 Playbooks，可以方便得重复一组任务。Playbooks 中还可以包含变量、模板、条件语句、控制循环，从本质上来说，编写一个 Playbooks，就好像编写一个脚本代码一样。&lt;/p>
&lt;p>Playbooks 是 Ansible 的精髓，如果把 Ansible 当做一门语言，那么就成可以称为 Playbooks 脚本编程语言。&lt;/p>
&lt;h1 id="ansible-的核心组件">Ansible 的核心组件&lt;a class="td-heading-self-link" href="#ansible-%e7%9a%84%e6%a0%b8%e5%bf%83%e7%bb%84%e4%bb%b6" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/ot4g6f/1616125280904-828340be-8634-4a3f-a97b-d4600818bd6e.jpeg" alt="">&lt;/p>
&lt;ul>
&lt;li>&lt;strong>ansible core&lt;/strong> # 核心组件，ansible 本身&lt;/li>
&lt;li>&lt;strong>host inventory&lt;/strong> # 主机库存，Ansible 所管理的主机清单，一个文本文件&lt;/li>
&lt;li>&lt;strong>Modules&lt;/strong> # 模块。ansible 的 modules 是实现 ansible 的核心，
&lt;ul>
&lt;li>&lt;strong>core modules&lt;/strong> # 核心模块
&lt;ul>
&lt;li>ansible 执行任何命令，都是通过 module 来完成；比如 ansible 让被管理机创建一个用户，那么就会去 core modules 中调用一个能实现创建用户功能的模块，来执行这个操作。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>custom modules&lt;/strong> # 自定义模块
&lt;ul>
&lt;li>可以使用任何编程语言来编写模块，只要符合 ansible 的标准即可，可以实现 ansible 本身不具备的功能&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="ansible-模块与插件">Ansible 模块与插件&lt;a class="td-heading-self-link" href="#ansible-%e6%a8%a1%e5%9d%97%e4%b8%8e%e6%8f%92%e4%bb%b6" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/module_plugin_guide/index.html">官方文档，使用 Ansible 模块与插件&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;a href="https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/Ansible/Ansible%20Modules/Ansible%20Modules.md">Ansible Modules(模块)&lt;/a> 是可以控制系统资源或执行系统命令的代码单元。 Ansible 提供了一个模块库，您可以直接在远程主机上或通过剧本执行。您还可以编写自定义模块。&lt;/p>
&lt;p>&lt;a href="https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/Ansible/Ansible%20Plugins/Ansible%20Plugins.md">Ansible Plugins(插件)&lt;/a> 与模块类似，它们是扩展核心 Ansible 功能的代码片段。 Ansible 使用插件架构来实现丰富、灵活和可扩展的功能集。 Ansible 附带了几个插件，让您可以轻松使用自己的插件。&lt;/p>
&lt;p>比如，&lt;strong>Ansible 的控制节点连接到被管理节点时所使用的连接方式，就是通过 Connection 插件来实现的&lt;/strong>。而连接到目标节点后要执行的任务，则是由模块来实现的。&lt;/p>
&lt;p>再比如，我们在写 Playbook 时，会遇上处理需要文本的情况，比如大写转小写、获取第一个或最后一个字符等等，这些都是使用一种 Filters 的插件实现的。&lt;/p>
&lt;h1 id="ansible-关联文件与配置">Ansible 关联文件与配置&lt;a class="td-heading-self-link" href="#ansible-%e5%85%b3%e8%81%94%e6%96%87%e4%bb%b6%e4%b8%8e%e9%85%8d%e7%bd%ae" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;strong>/etc/ansible/ansible.cfg&lt;/strong> # ansible 使用时调用的配置文件&lt;/p>
&lt;p>&lt;strong>/etc/ansible/hosts&lt;/strong> # Inventory 的默认配置文件。该文件可以定义被管理主机的 IP，port 等，都可以定义在该文件中，具体格式如下&lt;/p>
&lt;ul>
&lt;li>单独 host，任何未分组的主机，需要在定义主机组之前定义各单独的 host，可以是 IP 地址或者主机名&lt;/li>
&lt;li>主机组，定义一个主机组，组名用[]括起来，可以定义多个主机组；当使用 ansible 命令的时候，可以使用组名来对该组内所有主机进行操作&lt;/li>
&lt;li>配置文件说明：详见：&lt;a href="https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/Ansible/Inventory%20%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3.md">inventory 配置文件详解&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Docs: Ansible Modules</title><link>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/Ansible/Ansible-Modules/Ansible-Modules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/Ansible/Ansible-Modules/Ansible-Modules/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/module_plugin_guide/modules_intro.html">官方文档，使用 Ansible 模块和插件-模块介绍&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.10/user_guide/modules.html">2.10 版本&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Modules(模块)&lt;/strong> 也被称为 &lt;strong>Task Plugins(任务插件)&lt;/strong> 或 &lt;strong>Library Plugins(插件库)&lt;/strong>，Modules 是可以从 Ansible 的命令行或 Playbook 的任务中使用的代码块。Ansible 通常在受管理节点上执行每个模块以完成任务，并收集返回值。&lt;/p>
&lt;blockquote>
&lt;p>注意：在 Ansible 2.10 及以上的版本中，大多数模块都被托管到 &lt;a href="https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/Ansible/Ansible%20Collection.md">&lt;strong>Collection(集合)&lt;/strong>&lt;/a> 中。&lt;/p>
&lt;/blockquote>
&lt;p>我们可以通过命令行使用模块执行任务，比如&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>ansible webservers -m service -a &lt;span style="color:#4e9a06">&amp;#34;name=httpd state=started&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ansible webservers -m ping
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ansible webservers -m &lt;span style="color:#204a87">command&lt;/span> -a &lt;span style="color:#4e9a06">&amp;#34;/sbin/reboot -t now&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>也可以在 Playbooks 中使用模块执行任务，比如&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">restart webserver&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">service&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">httpd&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">state&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">restarted&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>等效于&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>ansible webservers -m service -a &lt;span style="color:#4e9a06">&amp;#34;name=httpd state=started&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>每个模块都可以接受参数，以空格分割的 &lt;code>KEY=VALUE&lt;/code> 格式。&lt;/p>
&lt;blockquote>
&lt;p>注意：在命令行中使用模块与在 Playbooks 中使用模块时，可以传递的参数不太一样，比如 command 或 shell 模块，只需要传递需要运行的命令这个参数即可，但是在 Playbooks 中使用这两个模块，还可以传递其他参数。&lt;/p>
&lt;/blockquote>
&lt;p>所有模块执行完成后，都会有返回一个 JSON 格式的数据，这意味着可以使用任何编程语言编写模块。模块应该是幂等的，如果检测到当前状态与所需要的最终状态匹配，则应该避免再进行任何更改。&lt;/p>
&lt;p>下面我们拿一个最简单的模块举例，ansible.builtin.command 模块，当我们使用 command 模块时，可以为其传递参数，在其执行完任务之后，还会有返回值。&lt;/p>
&lt;h2 id="简单示例">简单示例&lt;a class="td-heading-self-link" href="#%e7%ae%80%e5%8d%95%e7%a4%ba%e4%be%8b" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>假如现在有这么一个 Playbooks&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">test&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">command&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">whoami&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">register&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">info&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">debug&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">debug&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">msg&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;{{info}}&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个 Playbooks 的意思就是在受管理节点上执行 &lt;code>whoami&lt;/code> 命令，并将返回值保存到 info 变量中，通过 debug 模块，将 info 变量中的内容输出出来，效果如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#a40000">desistdaydream@hw-cloud-xngy-jump-server-linux&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">-2&lt;/span> &lt;span style="color:#a40000">~/projects/DesistDaydream/ehualu/ansible/playbook&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#a40000">$&lt;/span> &lt;span style="color:#a40000">ansible-playbook&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">90&lt;/span>&lt;span style="color:#a40000">-test.yaml&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">PLAY&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#a40000">test&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#a40000">*******************************************************************************************************************************************************************&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">TASK&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">90&lt;/span>&lt;span style="color:#a40000">-test&lt;/span> &lt;span style="color:#a40000">:&lt;/span> &lt;span style="color:#a40000">test&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#a40000">*********************************************************************************************************************************************************&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">changed:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#a40000">hw-cloud-xngy-jump-server-linux&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">-2&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">TASK&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">90&lt;/span>&lt;span style="color:#a40000">-test&lt;/span> &lt;span style="color:#a40000">:&lt;/span> &lt;span style="color:#a40000">debug&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#a40000">********************************************************************************************************************************************************&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">ok:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#a40000">hw-cloud-xngy-jump-server-linux&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">-2&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#a40000">=&amp;gt;&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;info&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;ansible_facts&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;discovered_interpreter_python&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;/usr/bin/python3&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;changed&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;cmd&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;whoami&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;delta&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;0:00:00.002447&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;end&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;2021-10-09 23:05:10.491190&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;failed&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">false&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;rc&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;start&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;2021-10-09 23:05:10.488743&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;stderr&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;stderr_lines&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;stdout&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;root&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;stdout_lines&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;root&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">PLAY&lt;/span> &lt;span style="color:#a40000">RECAP&lt;/span> &lt;span style="color:#a40000">********************************************************************************************************************************************************************&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">hw-cloud-xngy-jump-server-linux&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">-2&lt;/span> &lt;span style="color:#a40000">:&lt;/span> &lt;span style="color:#a40000">ok=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> &lt;span style="color:#a40000">changed=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#a40000">unreachable=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#a40000">failed=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#a40000">skipped=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#a40000">rescued=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#a40000">ignored=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们对比&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/command_module.html#return-values">官方文档中 command 模块的返回值&lt;/a>，可以看到，与文档中的返回值保持一致。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/shqrrv/1633792369531-e531b4d1-5c2b-427c-ade8-6207d5d6020b.png" alt="image.png">&lt;/p>
&lt;h2 id="总结">总结&lt;a class="td-heading-self-link" href="#%e6%80%bb%e7%bb%93" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>所以，这也是为什么将 Moduels 称为代码的原因，&lt;strong>所谓的 Modules，本质上就是代码写出来的程序，就像 Functions&lt;/strong>，具有形参，可以接受实参，执行完成后，还会有返回值。Ansible 通过模块执行完一个任务之后，就会处理这些返回值，将其 或保存、或展示、或丢弃 等等。同时，在 Playbooks 中，还可以通过判断语句，根据返回值的内容，决定下一个任务的运行模式。&lt;/p>
&lt;p>我们可以通过 &lt;code>ansible-doc -l&lt;/code> 命令查看所有可用的模块，或者从&lt;a href="https://docs.ansible.com/ansible/latest/collections/index.html#list-of-collections">官方文档-Collections 文档&lt;/a>中查看所有模块&lt;/p>
&lt;p>还可以使用 &lt;code>ansible-doc MODULE&lt;/code> 命令查看指定模块的文档&lt;/p>
&lt;h1 id="模块分类">模块分类&lt;a class="td-heading-self-link" href="#%e6%a8%a1%e5%9d%97%e5%88%86%e7%b1%bb" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/modules_by_category.html">官方文档 2.9，用户指南-使用模块-模块索引&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/index_module.html">官方文档 2.10+，所有模块和插件的索引-所有模块的索引&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>在 2.10 版本之前，模块的分类非常清晰；2.10 版本之后，由于模块被合并到集合中，所以很多已经分类的模块被合并到 &lt;a href="https://docs.ansible.com/ansible/latest/collections/index_module.html#ansible-builtin">builtin(内置) 模块&lt;/a>这个类别中，在这里则不再进行细致划分，非常乱。。。。&lt;/p>
&lt;p>模块的保存位置（ansible python module location）也产生了变化：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># ansible --version&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ansible 2.9.6
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> config &lt;span style="color:#000">file&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> /etc/ansible/ansible.cfg
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> configured module search &lt;span style="color:#000">path&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;/home/desistdaydream/.ansible/plugins/modules&amp;#39;&lt;/span>, &lt;span style="color:#4e9a06">&amp;#39;/usr/share/ansible/plugins/modules&amp;#39;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ansible python module &lt;span style="color:#000">location&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> /usr/lib/python3/dist-packages/ansible
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> executable &lt;span style="color:#000">location&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> /usr/bin/ansible
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> python &lt;span style="color:#000">version&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> 3.8.10 &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>default, Jun &lt;span style="color:#0000cf;font-weight:bold">22&lt;/span> 2022, 20:18:18&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>GCC 9.4.0&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/shqrrv/1669781692961-2dda8a1f-3eec-4687-beb3-fa3d141c1b5e.png" alt="image.png">&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># ansible --version&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ansible &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>core 2.13.6&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> config &lt;span style="color:#000">file&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> /etc/ansible/ansible.cfg
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> configured module search &lt;span style="color:#000">path&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;/root/.ansible/plugins/modules&amp;#39;&lt;/span>, &lt;span style="color:#4e9a06">&amp;#39;/usr/share/ansible/plugins/modules&amp;#39;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ansible python module &lt;span style="color:#000">location&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> /root/.local/lib/python3.8/site-packages/ansible
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ansible collection &lt;span style="color:#000">location&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> /root/.ansible/collections:/usr/share/ansible/collections
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> executable &lt;span style="color:#000">location&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> /usr/bin/ansible
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> python &lt;span style="color:#000">version&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> 3.8.10 &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>default, Jun &lt;span style="color:#0000cf;font-weight:bold">22&lt;/span> 2022, 20:18:18&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>GCC 9.4.0&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> jinja &lt;span style="color:#000">version&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> 3.1.2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">libyaml&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> True
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/shqrrv/1669781684010-2cc9f6a7-cb1e-4e93-bf81-e41ef417c23c.png" alt="image.png">&lt;/p></description></item><item><title>Docs: Ansible 管理</title><link>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/Ansible/Ansible-%E7%AE%A1%E7%90%86/Ansible-%E7%AE%A1%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/Ansible/Ansible-%E7%AE%A1%E7%90%86/Ansible-%E7%AE%A1%E7%90%86/</guid><description>
&lt;h1 id="实际案例">实际案例：&lt;a class="td-heading-self-link" href="#%e5%ae%9e%e9%99%85%e6%a1%88%e4%be%8b" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="批量关闭开启虚拟机">批量关闭/开启虚拟机&lt;a class="td-heading-self-link" href="#%e6%89%b9%e9%87%8f%e5%85%b3%e9%97%ad%e5%bc%80%e5%90%af%e8%99%9a%e6%8b%9f%e6%9c%ba" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">获取虚拟机列表&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">virt&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">command&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">list_vms&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">register&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">info&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">循环开启虚拟机&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">virt&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;{{ item }}&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">command&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">start&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">loop&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;{{ info.list_vms }}&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: AnsiblePlugins</title><link>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/Ansible/Ansible-Plugins/Ansible-Plugins/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/Ansible/Ansible-Plugins/Ansible-Plugins/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/plugins/plugins.html">官方文档，使用插件&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>插件是增强 Ansible 核心功能的代码段。Ansible 使用插件架构来启用丰富，灵活和可扩展的功能集。&lt;/p>
&lt;p>朗读 Ansible 附带了许多方便的插件，您可以轻松编写自己的插件。&lt;/p>
&lt;p>本节介绍 Ansible 随附的各种类型的插件：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/plugins/action.html">Action Plugins&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/plugins/become.html">Become Plugins&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/plugins/cache.html">Cache Plugins&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/plugins/callback.html">Callback Plugins&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/plugins/cliconf.html">Cliconf Plugins&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://desistdaydream.github.io/docs/9.%E8%BF%90%E7%BB%B4/Ansible/Ansible%20Plugins/Connection%20%E6%8F%92%E4%BB%B6.md">Connection 插件&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/plugins/httpapi.html">Httpapi Plugins&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/plugins/inventory.html">Inventory Plugins&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/plugins/lookup.html">Lookup Plugins&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/plugins/netconf.html">Netconf Plugins&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/plugins/shell.html">Shell Plugins&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/plugins/strategy.html">Strategy Plugins&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/plugins/vars.html">Vars Plugins&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/user_guide/playbooks_filters.html">Filters&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/user_guide/playbooks_tests.html">Tests&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/user_guide/plugin_filtering_config.html">Plugin Filter Configuration&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Docs: API</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/API/API/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/API/API/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/API">Wiki, API&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Application Programming Interface(应用程序接口，简称 API)&lt;/strong>。它定义了可以进行的调用或请求的类型，如何进行调用，应使用的数据格式，遵循的约定等。它还可以提供扩展机制，以便用户可以通过各种方式扩展现有功能。在不同程度上。API 可以是完全自定义的，特定于组件的，也可以基于行业标准设计以确保互操作性。通过&lt;a href="https://en.wikipedia.org/wiki/Information_hiding">信息隐藏&lt;/a>，API 支持&lt;a href="https://en.wikipedia.org/wiki/Modular_programming">模块化编程&lt;/a>，从而使用户可以独立于实现使用接口。&lt;/p>
&lt;h2 id="目的">目的&lt;a class="td-heading-self-link" href="#%e7%9b%ae%e7%9a%84" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>在构建应用程序时，API（应用程序编程接口）通过抽象化底层实现并仅公开开发人员需要的对象或动作来简化编程。电子邮件客户端的图形界面可能会为用户提供执行获取和突出显示新电子邮件的所有步骤的按钮，而用于文件输入/输出的 API 可能会为开发人员提供一种将文件从一个位置复制到另一个位置的功能，而无需要求开发人员了解幕后发生的文件系统操作。&lt;/p>
&lt;h2 id="术语的历史">术语的历史&lt;a class="td-heading-self-link" href="#%e6%9c%af%e8%af%ad%e7%9a%84%e5%8e%86%e5%8f%b2" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>1978 年的一张图建议将 API 的概念扩展为一个通用的编程接口，而不仅仅是应用程序。&lt;/p>
&lt;p>“API” 一词的含义已经扩展了其历史。首先，它仅描述了面向面向最终用户的程序（称为应用程序）的接口。此起源仍反映在名称“应用程序编程接口”中。如今，术语 API 的范围更广，不仅包括实用程序软件，甚至包括硬件接口。&lt;/p>
&lt;p>API 的概念比该术语要古老得多。英国计算机科学家 Wilkes 和 Wheeler 在 1940 年代为 EDSAC 计算机开发了模块化软件库。约书亚·布洛赫（Joshua Bloch）声称威尔克斯和惠勒（Wilker and Wheeler）“潜在地发明”了该 API，因为它更多地是被发现而不是被发明的概念。&lt;/p>
&lt;p>尽管创造 API 一词的人是在 Univac 1108 上实现软件，但他们的 API 的目标是使独立于硬件的程序成为可能。&lt;/p>
&lt;p>术语“应用程序接口”（没有-ing后缀）首先被记录在称为纸张数据结构和技术对于远程计算机图形在呈现 AFIPS 在 1968 年会议[6] [4]所述的本文使用的作者该术语描述应用程序（在这种情况下为图形程序）与计算机系统其余部分的交互。一致的应用程序接口（包括 Fortran 子例程调用）旨在使程序员摆脱处理图形显示设备的特性，并在更换计算机或显示器时提供硬件独立性。&lt;/p>
&lt;p>术语被引入到的场数据库由 CJ 日期中称为 1974 纸的关系和网络途径：应用程序编程接口的比较。 API 成为用于数据库管理系统的 ANSI/SPARC 框架的一部分。该框架将应用程序编程接口与其他接口（例如查询接口）分开对待。1970 年代的数据库专业人员发现，这些不同的接口可以组合在一起。一个足够丰富的应用程序接口也可以支持其他接口。&lt;/p>
&lt;p>这种观察导致 API 支持所有类型的编程，而不仅是应用程序编程。到 1990 年，API 被技术专家 Carl Malamud 定义为“程序员可以用来执行某些任务的一组服务” 。&lt;/p>
&lt;p>随着 Web API 的出现，API 的概念再次得到扩展。罗伊·菲尔丁（Roy Fielding）的论文《建筑风格》和2000 年在加州大学欧文分校（UC Irvine）的基于网络的软件体系结构设计概述了代表性状态转移（REST），并描述了“菲林丁”与传统的“图书馆应用程序接口”的“基于网络的应用程序编程接口”的概念。基于”的 API。XML 和 JSON Web API 于 2000 年开始得到广泛的商业采用，并一直持续到 2020 年。&lt;/p>
&lt;p>现在，Web API 是术语 API 的最常见含义。以这种方式使用时，术语“ API”与术语“通信协议”和“远程过程调用”在含义上有一些重叠。&lt;/p>
&lt;h2 id="用法">用法&lt;a class="td-heading-self-link" href="#%e7%94%a8%e6%b3%95" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="库和框架">库和框架&lt;a class="td-heading-self-link" href="#%e5%ba%93%e5%92%8c%e6%a1%86%e6%9e%b6" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>API 通常与软件库有关。当库是这套规则的“实际实现”时，API 描述并规定了“预期行为”（一种规范）。&lt;/p>
&lt;p>单个 API 可以采用共享同一编程接口的不同库的形式进行多种实现（或者没有一种实现是抽象的）。&lt;/p>
&lt;p>将 API 与实现分开，可以允许以一种语言编写的程序使用以另一种语言编写的库。例如，由于 Scala 和 Java 可以编译为兼容的字节码，因此 Scala 开发人员可以利用任何 Java API。&lt;/p>
&lt;p>API 的使用取决于所涉及的编程语言的类型。诸如 Lua 之类的过程语言的 API 可以主要由执行代码，操纵数据或处理错误的基本例程组成，而诸如 Java 之类的面向对象语言的 API 则可以提供类及其类方法的规范。&lt;/p>
&lt;p>语言绑定也是 API。通过将一种语言的特性和功能映射到以另一种语言实现的接口，语言绑定允许在以另一种语言进行开发时使用以一种语言编写的库或服务。[15]诸如 SWIG 和 F2PY（一种从 Fortran 到 Python 的接口生成器）之类的工具有助于创建此类接口。&lt;/p>
&lt;p>API 也可以与软件框架相关：框架可以基于实现了多个 API 的多个库，但是与 API 的正常使用不同，对框架内建行为的访问是通过使用新类扩展其内容来实现的插入框架本身。&lt;/p>
&lt;p>而且，整个控制程序流程可以通过控制反转或类似的机制而不受调用者的控制，而不受框架的控制。&lt;/p>
&lt;h3 id="操作系统">操作系统&lt;a class="td-heading-self-link" href="#%e6%93%8d%e4%bd%9c%e7%b3%bb%e7%bb%9f" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>API 可以指定应用程序和操作系统之间的接口。例如，POSIX 指定一组通用 API，这些 API 旨在使为 POSIX 兼容操作系统编写的应用程序能够为另一个 POSIX 兼容操作系统编译。&lt;/p>
&lt;p>Linux 和 Berkeley 软件发行版是实现 POSIX API 的操作系统的示例。&lt;/p>
&lt;p>Microsoft 已显示出对向后兼容 API 的坚定承诺，尤其是在其 Windows API（Win32）库中，因此较旧的应用程序可以使用称为“兼容模式”的可执行程序特定设置在新版 Windows 上运行。&lt;/p>
&lt;p>API 与应用程序二进制接口（ABI）的不同之处在于，API 是基于源代码的，而 ABI 是基于二进制的。例如，POSIX 提供 API，而 Linux Standard Base 提供 ABI。&lt;/p>
&lt;h3 id="远程-api">远程 API&lt;a class="td-heading-self-link" href="#%e8%bf%9c%e7%a8%8b-api" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>远程 API 允许开发人员通过协议（特定于通信的标准）来操纵远程资源，该协议允许不同的技术一起工作，而不论语言或平台如何。例如，Java 数据库连接 API 允许开发人员使用相同的功能集查询许多不同类型的数据库，而 Java 远程方法调用 API 使用 Java 远程方法协议来允许调用可远程操作但在本地运行的功能开发人员。&lt;/p>
&lt;p>因此，远程 API 对于维护面向对象程序设计中的对象抽象很有用。在代理对象上本地执行的方法调用，使用远程协议在远程对象上调用相应的方法，并获取要在本地用作返回值的结果。&lt;/p>
&lt;p>代理对象的修改也将导致远程对象的相应修改。&lt;/p>
&lt;h3 id="web-api">Web API&lt;a class="td-heading-self-link" href="#web-api" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>Notes: 这里说的 Web API 是一种暴露 API 的方式，与 &lt;a href="https://desistdaydream.github.io/docs/Web/WebAPIs/WebAPIs.md">WebAPIs&lt;/a> 不同，WebAPIs 是特指 Web 相关的所有 API，是具体的接口。&lt;/p>
&lt;/blockquote>
&lt;p>WebAPI 是企业和使用其资产的应用程序之间进行交互的已定义接口，这也是服务水平协议（SLA），用于指定功能提供者并为其 API 用户公开服务路径或 URL。API 方法是一种体系结构方法，它围绕为服务于不同类型消费者的不同应用程序提供一组服务的程序接口而发展。&lt;/p>
&lt;p>当在 Web 开发的上下文中使用 API 时，通常将其定义为一组规范，例如超文本传输协议（HTTP）请求消息以及响应消息的结构定义，通常以可扩展标记语言（XML））或 JavaScript 对象符号（JSON）格式。例如运输公司的 API，可以将其添加到以电子商务为中心的网站上，以方便订购运输服务，并自动包括当前的运输价格，而站点开发人员不必在网络数据库中输入运输者的价格表。尽管 “Web API” 在历史上实际上是 Web service 的代名词，但最近的趋势（所谓的 Web 2.0）已从基于简单对象访问协议（SOAP）的 Web service 和面向服务的体系结构（SOA）转向更直接的表示状态转移（REST）样式的 Web 资源和面向资源的体系结构（ROA）。&lt;/p>
&lt;p>这种趋势的一部分与语义 Web 向资源描述框架（RDF）的发展有关，RDF 是一种促进基于 Web 的本体工程技术的概念。Web API 允许将多个 API 组合到称为 mashup 的新应用程序中。在社交媒体领域，Web API 使 Web 社区可以促进在社区和应用程序之间共享内容和数据。这样，可以将在一个地方动态创建的内容发布并更新到 Web 上的多个位置。例如，Twitter 的 REST API 允许开发人员访问 Twitter 的核心数据，而 Search API 为开发人员提供了与 Twitter 搜索和趋势数据进行交互的方法。&lt;/p>
&lt;h2 id="设计">设计&lt;a class="td-heading-self-link" href="#%e8%ae%be%e8%ae%a1" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>API 的设计对其使用有重大影响。信息隐藏的原理将编程接口的作用描述为通过隐藏模块的实现细节来实现模块化编程，从而使模块用户无需了解模块内部的复杂性。因此，API 的设计试图仅提供用户期望的工具。编程接口的设计是软件体系结构的重要组成部分，是复杂软件的组织。&lt;/p>
&lt;h2 id="发布政策">发布政策&lt;a class="td-heading-self-link" href="#%e5%8f%91%e5%b8%83%e6%94%bf%e7%ad%96" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>API 是技术公司更常见的集成方式之一。提供和使用 API 的组件被视为业务生态系统的成员。&lt;/p>
&lt;p>发布 API 的主要策略是：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Private(私有)&lt;/strong>：该 API 仅供内部公司使用。&lt;/li>
&lt;li>&lt;strong>Partner(合作伙伴)&lt;/strong>：只有特定的业务合作伙伴可以使用 API。例如，Uber 和 Lyft 等租用公司的车辆允许经过批准的第三方开发人员直接在其应用程序内订购游乐设施。这使公司可以通过选择哪些应用程序可以访问 API 来进行质量控制，并为其提供额外的收入来源。&lt;/li>
&lt;li>&lt;strong>Public(公开)&lt;/strong>：该 API 供公众使用。例如，Microsoft 公开了 Windows API，Apple 发行了其 API Cocoa，因此可以为其平台编写软件。通常，并非所有人都能访问所有公共 API。例如，Cloudflare 或 Voxility 等 Internet 服务提供商使用 RESTful API，以允许客户和转售商访问其基础结构信息，DDoS 统计信息，网络性能或仪表板控件。可以通过“ API 令牌”或客户身份验证来授予对此类 API 的访问权限。&lt;/li>
&lt;/ul>
&lt;h3 id="公共-api-的含义">公共 API 的含义&lt;a class="td-heading-self-link" href="#%e5%85%ac%e5%85%b1-api-%e7%9a%84%e5%90%ab%e4%b9%89" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>API 公开时的重要因素是其“接口稳定性”。对 API 的更改（例如，向函数调用添加新参数）可能会破坏与依赖该 API 的客户端的兼容性。&lt;/p>
&lt;p>当公开展示的 API 的某些部分可能发生更改并因此不稳定时，应将特定 API 的这些部分明确记录为“不稳定”。例如，在 Google Guava 库中，被视为不稳定的部分或可能即将更改的部分都标有 Java 注释 &lt;code>@Beta&lt;/code>。&lt;/p>
&lt;p>公共 API 有时可以声明其自身的某些部分_已弃用_或废除。这通常意味着应将 API 的一部分视为要删除或以向后不兼容的方式进行修改的候选对象。因此，这些更改使开发人员可以脱离 API 的某些部分，这些部分将来将被删除或不再受支持。&lt;/p>
&lt;p>客户端代码可能包含 API 设计人员不打算使用的创新用法或机会用法。换句话说，对于具有大量用户基础的库，当元素成为公共 API 的一部分时，可以多种方式使用它。2020 年 2 月 19 日，Akamai 发布了他们的年度“互联网状况”报告，展示了针对全球金融服务中针对公共 API 平台的网络犯罪分子的增长趋势。从 2017 年 12 月到 2019 年 11 月，Akamai 见证了 854.2 亿次凭证违规攻击。大约 20％（即 165.5 亿）与定义为 API 端点的主机名相对。其中，4.735 亿针对金融服务部门组织。&lt;/p>
&lt;h2 id="文档">文档&lt;a class="td-heading-self-link" href="#%e6%96%87%e6%a1%a3" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>API 文档描述了 API 提供的服务以及如何使用这些服务，旨在涵盖客户出于实际目的需要了解的所有内容。&lt;/p>
&lt;p>文档对于使用 API 开发和维护应用程序至关重要。API 文档通常在文档文件中找到，但也可以在社交媒体（例如博客，论坛和问答网站）中找到。&lt;/p>
&lt;p>传统的文档文件通常通过具有一致外观和结构的文档系统（例如 Javadoc 或 Pydoc）来呈现。但是，文档中包含的内容类型因 API 而异。&lt;/p>
&lt;p>为了清楚起见，API 文档可能包括对 API 中的类和方法的描述以及“典型的使用场景，代码段，设计原理，性能讨论和合同”，但是 API 服务本身的实现细节通常是省略。&lt;/p>
&lt;p>该文档还涵盖了如何使用 API 的限制和限制。例如，对于一个 API 函数文档可以注意到，它的参数不能为 null，该函数本身没有线程安全的，因为 API 文档往往是全面的，它是作家保持更新文档和挑战用户仔细阅读它，可能会产生错误。&lt;/p>
&lt;p>API 文档可以使用 Java 注释之类的元数据信息来丰富。编译器，工具和_运行时_环境可以使用此元数据来实现自定义行为或自定义处理。&lt;/p>
&lt;p>可以以数据驱动的方式生成 API 文档。通过观察使用给定 API 的许多程序，可以推断出典型用法以及所需的合同和指令。然后，可以使用模板从挖掘的数据生成自然语言。&lt;/p></description></item><item><title>Docs: API Server</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/API-Resource-%E4%B8%8E-Object/API-Server/API-Server/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/API-Resource-%E4%B8%8E-Object/API-Server/API-Server/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kubernetes.io/docs/concepts/overview/components/#kube-apiserver">官方文档，概念 - 概述 - Kubernetes 组件 - kube-apiserver&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/docs/reference/command-line-tools-reference/kube-apiserver/">官方文档，参考 - 通用组件 - kube-apiserver&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>API Server 是实现 kubernetes API 的应用程序，它是 Kubernetes 控制平面的一个组件，用以对外暴露 Kubernetes API&lt;/strong>。Kubernetes API Server 验证和配置 API 对象的数据，包括 pod、service、replicationcontroller 等。 API Server 为 REST 操作提供服务，并为集群的共享状态提供前端，所有其他组件通过该前端进行交互。&lt;/p>
&lt;p>如果是通过 kubeadm 安装的 k8s 集群，那么 API Server 的表现形式就是一个名为 &lt;strong>kube-apiserver 的静态 pod&lt;/strong>。kube-apiserver 可以水平扩展，i.e. 部署多个 kube-apiserver 以实现高可用，应对高并发请求，到达 kube-apiserver 的流量可以在这些实例之间平衡。&lt;/p>
&lt;p>API Server 启动后，默认监听在 6443 端口(http 默认监听在 8080 上)。API Server 是 Kubernetes 集群的前端接口 ，各种客户端工具（CLI 或 UI）以及 Kubernetes 其他组件可以通过它管理集群的各种资源。kubectl 就是 API Server 的客户端程序，实现对 k8s 各种资源的增删改查的功能。各个 node 节点的 kubelet 也通过 master 节点的 API Server 来上报本节点的 Pod 状态。&lt;/p>
&lt;ul>
&lt;li>提供集群管理的 REST 风格 API 接口，包括认证授权、数据校验以及集群状态变更等&lt;/li>
&lt;li>提供其他模块之间的数据交互和通信的枢纽（其他模块通过 API Server 查询或修改数据，只有 API Server 才可以直接操作 etcd）&lt;/li>
&lt;/ul>
&lt;h1 id="api-server-的访问方式">API Server 的访问方式&lt;a class="td-heading-self-link" href="#api-server-%e7%9a%84%e8%ae%bf%e9%97%ae%e6%96%b9%e5%bc%8f" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kubernetes.io/docs/tasks/administer-cluster/access-cluster-api/">官方文档，任务-管理集群-使用 Kubernetes API 访问集群&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>注意：&lt;/p>
&lt;ul>
&lt;li>API Server 默认是安全的，在访问时，应使用 https 协议来操作。&lt;/li>
&lt;li>参考 [K8S 认证与授权介绍](7.API%20 访问控制.md 访问控制.md) 文章，学习在访问 API Server 时所遇到的验证问题。&lt;/li>
&lt;/ul>
&lt;h2 id="使用-kubectl-访问-api">使用 kubectl 访问 API&lt;a class="td-heading-self-link" href="#%e4%bd%bf%e7%94%a8-kubectl-%e8%ae%bf%e9%97%ae-api" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>现阶段有 kubectl 工具可以实现对 API Server 的访问&lt;/p>
&lt;p>使用 kubectl get &amp;ndash;raw / 命令让 kubectl 不再输出标准格式的数据，而是直接向 api server 请求原始数据&lt;/p>
&lt;h2 id="直接访问-rest-apieg使用-curl浏览器-等方式访问-api">直接访问 REST API(e.g.使用 curl、浏览器 等方式访问 API)&lt;a class="td-heading-self-link" href="#%e7%9b%b4%e6%8e%a5%e8%ae%bf%e9%97%ae-rest-apieg%e4%bd%bf%e7%94%a8-curl%e6%b5%8f%e8%a7%88%e5%99%a8-%e7%ad%89%e6%96%b9%e5%bc%8f%e8%ae%bf%e9%97%ae-api" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>kubectl 处理对 API 服务器的定位和身份验证。如果你想通过 http 客户端（如 curl 或 wget，或浏览器）直接访问 REST API，你可以通过多种方式对 API 服务器进行定位和身份验证：&lt;/p>
&lt;ol>
&lt;li>以代理模式运行 kubectl(推荐)。 推荐使用此方法，因为它用存储的 apiserver 位置并使用自签名证书验证 API 服务器的标识。 使用这种方法无法进行中间人（MITM）攻击。&lt;/li>
&lt;li>另外，你可以直接为 HTTP 客户端提供位置和身份认证。 这适用于被代理混淆的客户端代码。 为防止中间人攻击，你需要将根证书导入浏览器。&lt;/li>
&lt;/ol>
&lt;p>比如 curl &amp;ndash;request DELETE -cacert ${CAPATH} -H &amp;ldquo;Authorization: Bearer ${TOKEN}&amp;rdquo; https://${IP}:6443/api/v1/namespaces/monitoring/pods/prometheus-k8s-0 -k 这样一个请求就可以将集群内 monitoring 空间下的 prometheus-k8s-0 这个 pod 删除&lt;/p>
&lt;h3 id="获取认证所需信息">获取认证所需信息&lt;a class="td-heading-self-link" href="#%e8%8e%b7%e5%8f%96%e8%ae%a4%e8%af%81%e6%89%80%e9%9c%80%e4%bf%a1%e6%81%af" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>&lt;strong>方法一：使用 kubectl 的配置文件中的证书与私钥&lt;/strong>&lt;/p>
&lt;p>想要访问 https 下的内容，首先需要准备证书与私钥或者 ca 与 token 等等。&lt;/p>
&lt;ol>
&lt;li>首先获取 kubeclt 工具配置文件中的证书与私钥
&lt;ol>
&lt;li>cat /etc/kubernetes/admin.conf | grep client-certificate-data | awk &amp;lsquo;{print $2}&amp;rsquo; | base64 -d &amp;gt; /root/certs/admin.crt&lt;/li>
&lt;li>cat /etc/kubernetes/admin.conf | grep client-key-data | awk &amp;lsquo;{print $2}&amp;rsquo; | base64 -d &amp;gt; /root/certs/admin.key&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>确定 CA 文件位置(文件一般在 /etc/kubernetes/pki/ca.crt)
&lt;ol>
&lt;li>CAPATH=/etc/kubernetes/pki/ca.crt&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>确定要访问组件的的 IP
&lt;ol>
&lt;li>IP=172.38.40.212&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>方法二：使用拥有最高权限 ServiceAccount 的 Token 访问 https&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>(可选)创建一个专门存放 SA 的名称空间
&lt;ul>
&lt;li>kubectl create namespace user-sa-manage&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>创建一个 ServiceAccount
&lt;ul>
&lt;li>kubectl create -n user-sa-manage serviceaccount test-admin&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>将该 ServiceAccount 绑定到 cluster-admin 这个 clusterrole，以赋予最高权限
&lt;ul>
&lt;li>kubectl create clusterrolebinding test-admin &amp;ndash;clusterrole=cluster-admin &amp;ndash;serviceaccount=user-sa-manage:test-admin&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>将该 ServiceAccount 的 Token 的值注册到变量中
&lt;ul>
&lt;li>TOKEN=$(kubectl get -n user-sa-manage secrets -o jsonpath=&amp;quot;{.items[?(@.metadata.annotations[&amp;lsquo;kubernetes.io/service-account.name&amp;rsquo;]==&amp;lsquo;test-admin&amp;rsquo;)].data.token}&amp;quot;|base64 -d)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>确定 CA 文件位置(文件一般在 /etc/kubernetes/pki/ca.crt)
&lt;ul>
&lt;li>CAPATH=/etc/kubernetes/pki/ca.crt&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>确定要访问组件的的 IP
&lt;ul>
&lt;li>IP=172.38.40.212&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>使用令牌玩转 API
&lt;ul>
&lt;li>curl -k $IP/api -H &amp;ldquo;Authorization: Bearer $TOKEN&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Note：也可以从一个具有权限的 ServiceAccount 下的 secret 获取，可以使用现成的，也可以手动创建。比如下面用 promtheus 自带的 token。&lt;/p>
&lt;ol>
&lt;li>如果权限不足，那么访问的时候会报错，比如权限不够，或者认证不通过等等。报错信息有如下几种
&lt;ol>
&lt;li>no kind is registered for the type v1.Status in scheme &amp;ldquo;k8s.io/kubernetes/pkg/api/legacyscheme/scheme.go:30&amp;rdquo;&lt;/li>
&lt;li>Unauthorized&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>TOKEN=$(kubectl get secrets -n monitoring prometheus-k8s-token-q5hm4 &amp;ndash;template={{.data.token}} | base64 -d)&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>方法三：官方推荐，类似方法二&lt;/strong>&lt;/p>
&lt;p>官方文档：&lt;a href="https://kubernetes.io/docs/tasks/administer-cluster/access-cluster-api/">https://kubernetes.io/docs/tasks/administer-cluster/access-cluster-api/&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 查看所有的集群，因为你的 .kubeconfig 文件中可能包含多个上下文&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kubectl config view -o &lt;span style="color:#000">jsonpath&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;{&amp;#34;Cluster name\tServer\n&amp;#34;}{range .clusters[*]}{.name}{&amp;#34;\t&amp;#34;}{.cluster.server}{&amp;#34;\n&amp;#34;}{end}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 从上述命令输出中选择你要与之交互的集群的名称&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">CLUSTER_NAME&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;some_server_name&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 指向引用该集群名称的 API 服务器&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">APISERVER&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>kubectl config view -o &lt;span style="color:#000">jsonpath&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;{.clusters[?(@.name==\&amp;#34;&lt;/span>&lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">CLUSTER_NAME&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06">\&amp;#34;)].cluster.server}&amp;#34;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 获得令牌&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">TOKEN&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>kubectl get secrets -o &lt;span style="color:#000">jsonpath&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;{.items[?(@.metadata.annotations[&amp;#39;kubernetes\.io/service-account\.name&amp;#39;]==&amp;#39;default&amp;#39;)].data.token}&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">|&lt;/span>base64 -d&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 使用令牌玩转 API&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>curl -X GET &lt;span style="color:#000">$APISERVER&lt;/span>/api --header &lt;span style="color:#4e9a06">&amp;#34;Authorization: Bearer &lt;/span>&lt;span style="color:#000">$TOKEN&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span> --insecure
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="访问-api-server">访问 API Server&lt;a class="td-heading-self-link" href="#%e8%ae%bf%e9%97%ae-api-server" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>执行访问 https 前准备方法一
&lt;ul>
&lt;li>通过证书与私钥访问
&lt;ul>
&lt;li>&lt;code>curl --cacert ${CAPATH} --cert /root/certs/admin.crt --key /root/certs/admin.key https://${IP}:6443/&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>执行访问 https 前准备方法二
&lt;ul>
&lt;li>通过 https 的方式访问 API
&lt;ul>
&lt;li>&lt;code>curl --cacert ${CAPATH} -H &amp;quot;Authorization: Bearer ${TOKEN}&amp;quot; https://${IP}:6443/&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>kubectl
&lt;ul>
&lt;li>&lt;code>kubectl get --raw /&lt;/code> # 让 kubectl 不再输出标准格式的数据，而是直接向 api server 请求原始数据&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>kubectl proxy，一般监听在 6443 端口的 api server 使用该方式，监听在 8080 上的为 http，可直接访问
&lt;ul>
&lt;li>&lt;code>kubectl proxy --port=8080 --accept-hosts='^localhost$,^127.0.0.1$,^\[::1]$,10.10.100.151' --address='0.0.0.0'&lt;/code> # 在本地 8080 端口上启动 API Server 的一个代理网关，以便使用 curl 直接访问 api server 并使用命令 curl localhost:8080/获取数据
&lt;ul>
&lt;li>直接访问本地 8080 端口，即可通过 API Server 获取集群所有数据&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="编程方式访问-api">编程方式访问 API&lt;a class="td-heading-self-link" href="#%e7%bc%96%e7%a8%8b%e6%96%b9%e5%bc%8f%e8%ae%bf%e9%97%ae-api" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Kubernetes 官方支持  &lt;a href="https://kubernetes.io/zh/docs/tasks/administer-cluster/access-cluster-api/#go-client">Go&lt;/a>、&lt;a href="https://kubernetes.io/zh/docs/tasks/administer-cluster/access-cluster-api/#python-client">Python&lt;/a>、&lt;a href="https://kubernetes.io/zh/docs/tasks/administer-cluster/access-cluster-api/#java-client">Java&lt;/a>、 &lt;a href="https://kubernetes.io/zh/docs/tasks/administer-cluster/access-cluster-api/#dotnet-client">dotnet&lt;/a>、&lt;a href="https://kubernetes.io/zh/docs/tasks/administer-cluster/access-cluster-api/#javascript-client">Javascript&lt;/a>  和  &lt;a href="https://kubernetes.io/zh/docs/tasks/administer-cluster/access-cluster-api/#haskell-client">Haskell&lt;/a>  语言的客户端库。还有一些其他客户端库由对应作者而非 Kubernetes 团队提供并维护。 参考&lt;a href="https://kubernetes.io/zh/docs/reference/using-api/client-libraries/">客户端库&lt;/a>了解如何使用其他语言 来访问 API 以及如何执行身份认证。&lt;/p>
&lt;h3 id="go-客户端介绍">Go 客户端介绍&lt;a class="td-heading-self-link" href="#go-%e5%ae%a2%e6%88%b7%e7%ab%af%e4%bb%8b%e7%bb%8d" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>官方文档：&lt;a href="https://github.com/kubernetes/client-go/#compatibility-matrix">https://github.com/kubernetes/client-go/#compatibility-matrix&lt;/a>&lt;/li>
&lt;li>详见 &lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes%20%E5%BC%80%E5%8F%91/Client%20Libraries(%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BA%93)/Client%20Libraries(%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BA%93).md">Client Libraries(客户端库)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>版本控制策略：k8s 版本 1.18.8 对应 client-go 版本 0.18.8，其他版本以此类推。&lt;/p>
&lt;p>使用前注意事项：
使用 client-go 之前，需要手动获取对应版本的的 client-go 库。根据版本控制策略，使用如下命令进行初始化&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>go mod init client-go-test
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>go get k8s.io/client-go@kubernetes-1.19.2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这是一个使用 client-go 访问 API 的基本示例&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">package&lt;/span> &lt;span style="color:#000">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;context&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">v1&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;k8s.io/apimachinery/pkg/apis/meta/v1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;k8s.io/client-go/kubernetes&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;k8s.io/client-go/tools/clientcmd&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">main&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// 根据指定的 kubeconfig 创建一个用于连接集群的配置，/root/.kube/config 为 kubectl 命令所用的 config 文件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">config&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">_&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">clientcmd&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">BuildConfigFromFlags&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;/root/.kube/config&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// 根据 BuildConfigFromFlags 创建的配置，返回一个可以连接集群的指针
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">clientset&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">_&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">kubernetes&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">NewForConfig&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">config&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// 根据 NewForConfig 所创建的连接集群的指针，来访问 API，并对集群进行操作
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">pods&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">_&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">clientset&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">CoreV1&lt;/span>&lt;span style="color:#000;font-weight:bold">().&lt;/span>&lt;span style="color:#000">Pods&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">).&lt;/span>&lt;span style="color:#000">List&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">context&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">TODO&lt;/span>&lt;span style="color:#000;font-weight:bold">(),&lt;/span> &lt;span style="color:#000">v1&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ListOptions&lt;/span>&lt;span style="color:#000;font-weight:bold">{})&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">fmt&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Printf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;There are %d pods in the cluster\n&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87">len&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">pods&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Items&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="从-pod-中访问-api">从 Pod 中访问 API&lt;a class="td-heading-self-link" href="#%e4%bb%8e-pod-%e4%b8%ad%e8%ae%bf%e9%97%ae-api" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>从 Pod 内部访问 API 时，定位 API 服务器和向服务器认证身份的操作 与上面描述的外部客户场景不同。&lt;/p>
&lt;p>从 Pod 使用 Kubernetes API 的最简单的方法就是使用官方的 客户端库。 这些库可以自动发现 API 服务器并进行身份验证。&lt;/p>
&lt;h3 id="使用官方客户端库">使用官方客户端库&lt;a class="td-heading-self-link" href="#%e4%bd%bf%e7%94%a8%e5%ae%98%e6%96%b9%e5%ae%a2%e6%88%b7%e7%ab%af%e5%ba%93" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>从一个 Pod 内部连接到 Kubernetes API 的推荐方式为：&lt;/p>
&lt;ul>
&lt;li>对于 Go 语言客户端，使用官方的 Go 客户端库。 函数 &lt;code>rest.InClusterConfig()&lt;/code> 自动处理 API 主机发现和身份认证。 参见这里的一个例子。&lt;/li>
&lt;li>对于 Python 客户端，使用官方的 Python 客户端库。 函数 &lt;code>config.load_incluster_config()&lt;/code> 自动处理 API 主机的发现和身份认证。 参见这里的一个例子。&lt;/li>
&lt;li>还有一些其他可用的客户端库，请参阅客户端库页面。&lt;/li>
&lt;/ul>
&lt;p>在以上场景中，客户端库都使用 Pod 的服务账号凭据来与 API 服务器安全地通信。&lt;/p>
&lt;h3 id="直接访问-rest-api">直接访问 REST API&lt;a class="td-heading-self-link" href="#%e7%9b%b4%e6%8e%a5%e8%ae%bf%e9%97%ae-rest-api" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>在运行在 Pod 中时，可以通过 &lt;code>default&lt;/code> 命名空间中的名为 &lt;code>kubernetes&lt;/code> 的服务访问 Kubernetes API 服务器。也就是说，Pod 可以使用 &lt;code>kubernetes.default.svc&lt;/code> 主机名 来查询 API 服务器。官方客户端库自动完成这个工作。&lt;/p>
&lt;p>向 API 服务器进行身份认证的推荐做法是使用 &lt;a href="https://kubernetes.io/zh/docs/tasks/configure-pod-container/configure-service-account/">服务账号&lt;/a> 凭据。 默认情况下，每个 Pod 与一个服务账号关联，该服务账户的凭证（令牌）放置在此 Pod 中 每个容器的文件系统树中的 &lt;code>/var/run/secrets/kubernetes.io/serviceaccount/token&lt;/code> 处。&lt;/p>
&lt;p>如果由证书包可用，则凭证包被放入每个容器的文件系统树中的 &lt;code>/var/run/secrets/kubernetes.io/serviceaccount/ca.crt&lt;/code> 处， 且将被用于验证 API 服务器的服务证书。&lt;/p>
&lt;p>最后，用于命名空间域 API 操作的默认命名空间放置在每个容器中的 &lt;code>/var/run/secrets/kubernetes.io/serviceaccount/namespace&lt;/code> 文件中。&lt;/p>
&lt;h3 id="使用-kubectl-proxy">使用 kubectl proxy&lt;a class="td-heading-self-link" href="#%e4%bd%bf%e7%94%a8-kubectl-proxy" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>如果你希望不实用官方客户端库就完成 API 查询，可以将 &lt;code>kubectl proxy&lt;/code> 作为 command 在 Pod 启动一个边车（Sidecar）容器。&lt;/p>
&lt;p>这样，&lt;code>kubectl proxy&lt;/code> 自动完成对 API 的身份认证，并将其暴露到 Pod 的 &lt;code>localhost&lt;/code> 接口，从而 Pod 中的其他容器可以 直接使用 API。&lt;/p>
&lt;h3 id="不使用代理">不使用代理&lt;a class="td-heading-self-link" href="#%e4%b8%8d%e4%bd%bf%e7%94%a8%e4%bb%a3%e7%90%86" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>通过将认证令牌直接发送到 API 服务器，也可以避免运行 kubectl proxy 命令。 内部的证书机制能够为链接提供保护。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 指向内部 API 服务器的主机名&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">APISERVER&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>https://kubernetes.default.svc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 服务账号令牌的路径&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">SERVICEACCOUNT&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>/var/run/secrets/kubernetes.io/serviceaccount
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 读取 Pod 的名字空间&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">NAMESPACE&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>cat &lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">SERVICEACCOUNT&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>/namespace&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 读取服务账号的持有者令牌&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">TOKEN&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>cat &lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">SERVICEACCOUNT&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>/token&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 引用内部整数机构（CA）&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">CACERT&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">SERVICEACCOUNT&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>/ca.crt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 使用令牌访问 API&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>curl --cacert &lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">CACERT&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span> --header &lt;span style="color:#4e9a06">&amp;#34;Authorization: Bearer &lt;/span>&lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">TOKEN&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span> -X GET &lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">APISERVER&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>/api
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>输出类似于：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;kind&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;APIVersions&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;versions&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;v1&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;serverAddressByClientCIDRs&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;clientCIDR&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;0.0.0.0/0&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;serverAddress&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;10.0.1.149:443&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="api-server-健康检查点">API Server 健康检查点&lt;a class="td-heading-self-link" href="#api-server-%e5%81%a5%e5%ba%b7%e6%a3%80%e6%9f%a5%e7%82%b9" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kubernetes.io/docs/reference/using-api/health-checks/">官方文档&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Kubernetes API 服务器 提供 API 端点以指示 API 服务器的当前状态。 本文描述了这些 API 端点，并说明如何使用。&lt;/p>
&lt;h3 id="api-健康检查点">API 健康检查点&lt;a class="td-heading-self-link" href="#api-%e5%81%a5%e5%ba%b7%e6%a3%80%e6%9f%a5%e7%82%b9" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>Kubernetes API 服务器提供 3 个 API 端点（&lt;code>healthz&lt;/code>、&lt;code>livez&lt;/code> 和 &lt;code>readyz&lt;/code>）来表明 API 服务器的当前状态。 &lt;code>healthz&lt;/code> 端点已被弃用（自 Kubernetes v1.16 起），你应该使用更为明确的 &lt;code>livez&lt;/code> 和 &lt;code>readyz&lt;/code> 端点。 &lt;code>livez&lt;/code> 端点可与 &lt;code>--livez-grace-period&lt;/code> 标志一起使用，来指定启动持续时间。 为了正常关机，你可以使用 &lt;code>/readyz&lt;/code> 端点并指定 &lt;code>--shutdown-delay-duration&lt;/code> 标志。 检查 API 服务器的 &lt;code>health&lt;/code>/&lt;code>livez&lt;/code>/&lt;code>readyz&lt;/code> 端点的机器应依赖于 HTTP 状态代码。 状态码 &lt;code>200&lt;/code> 表示 API 服务器是 &lt;code>healthy&lt;/code>、&lt;code>live&lt;/code> 还是 &lt;code>ready&lt;/code>，具体取决于所调用的端点。 以下更详细的选项供操作人员使用，用来调试其集群或专门调试 API 服务器的状态。&lt;/p>
&lt;p>以下示例将显示如何与运行状况 API 端点进行交互。&lt;/p>
&lt;p>对于所有端点，都可以使用 &lt;code>verbose&lt;/code> 参数来打印检查项以及检查状态。 这对于操作人员调试 API 服务器的当前状态很有用，这些不打算给机器使用：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl -k https://localhost:6443/livez?verbose
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>或从具有身份验证的远程主机：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl get --raw&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;/readyz?verbose&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>输出将如下所示：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>+&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>ping ok
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>+&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>log ok
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>+&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>etcd ok
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>+&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>poststarthook/start-kube-apiserver-admission-initializer ok
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>+&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>poststarthook/generic-apiserver-start-informers ok
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>+&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>poststarthook/start-apiextensions-informers ok
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>+&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>poststarthook/start-apiextensions-controllers ok
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>+&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>poststarthook/crd-informer-synced ok
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>+&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>poststarthook/bootstrap-controller ok
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>+&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>poststarthook/rbac/bootstrap-roles ok
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>+&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>poststarthook/scheduling/bootstrap-system-priority-classes ok
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>+&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>poststarthook/start-cluster-authentication-info-controller ok
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>+&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>poststarthook/start-kube-aggregator-informers ok
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>+&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>poststarthook/apiservice-registration-controller ok
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>+&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>poststarthook/apiservice-status-available-controller ok
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>+&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>poststarthook/kube-apiserver-autoregistration ok
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>+&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>autoregister-completion ok
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>+&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>poststarthook/apiservice-openapi-controller ok
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>healthz check passed
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Kubernetes API 服务器也支持排除特定的检查项。 查询参数也可以像以下示例一样进行组合：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl -k &lt;span style="color:#4e9a06">&amp;#39;https://localhost:6443/readyz?verbose&amp;amp;exclude=etcd&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>输出显示排除了 &lt;code>etcd&lt;/code> 检查：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>+&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>ping ok
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>+&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>log ok
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>+&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>etcd excluded: ok
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>+&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>poststarthook/start-kube-apiserver-admission-initializer ok
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>+&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>poststarthook/generic-apiserver-start-informers ok
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>+&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>poststarthook/start-apiextensions-informers ok
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>+&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>poststarthook/start-apiextensions-controllers ok
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>+&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>poststarthook/crd-informer-synced ok
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>+&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>poststarthook/bootstrap-controller ok
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>+&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>poststarthook/rbac/bootstrap-roles ok
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>+&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>poststarthook/scheduling/bootstrap-system-priority-classes ok
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>+&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>poststarthook/start-cluster-authentication-info-controller ok
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>+&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>poststarthook/start-kube-aggregator-informers ok
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>+&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>poststarthook/apiservice-registration-controller ok
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>+&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>poststarthook/apiservice-status-available-controller ok
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>+&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>poststarthook/kube-apiserver-autoregistration ok
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>+&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>autoregister-completion ok
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>+&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>poststarthook/apiservice-openapi-controller ok
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>+&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>shutdown ok
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>healthz check passed
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="独立健康检查">独立健康检查&lt;a class="td-heading-self-link" href="#%e7%8b%ac%e7%ab%8b%e5%81%a5%e5%ba%b7%e6%a3%80%e6%9f%a5" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>&lt;strong>FEATURE STATE:&lt;/strong> &lt;code>Kubernetes v1.19 [alpha]&lt;/code>每个单独的健康检查都会公开一个 http 端点，并且可以单独检查。 单个运行状况检查的模式为 &lt;code>/livez/&amp;lt;healthcheck-name&amp;gt;&lt;/code>，其中 &lt;code>livez&lt;/code> 和 &lt;code>readyz&lt;/code> 表明你要检查的是 API 服务器是否存活或就绪。 &lt;code>&amp;lt;healthcheck-name&amp;gt;&lt;/code> 的路径可以通过上面的 &lt;code>verbose&lt;/code> 参数发现 ，并采用 &lt;code>[+]&lt;/code> 和 &lt;code>ok&lt;/code> 之间的路径。 这些单独的健康检查不应由机器使用，但对于操作人员调试系统而言，是有帮助的：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl -k https://localhost:6443/livez/etcd
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="api-server-与-etcd-的交互方式">API Server 与 Etcd 的交互方式&lt;a class="td-heading-self-link" href="#api-server-%e4%b8%8e-etcd-%e7%9a%84%e4%ba%a4%e4%ba%92%e6%96%b9%e5%bc%8f" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>数据通过 API Server 时，一般是进行序列化后保存到 etcd 中的，可以使用参数 &amp;ndash;etcd-prefix 来指定数据保存在 etcd 中后的地址前缀，默认为 &lt;code>/registry&lt;/code>&lt;/p>
&lt;p>一般情况，保存到 etcd 中后，会省略 Group 与 Version，直接使用 Resource 来作为 etcd 中的路径。比如：URI 为 /api/v1/namespaces/kube-system/pods/kube-apiserver-master1 的 pod 资源，在 etcd 中的存储路径为 /registry/pods/kube-system/kube-apiserver-master1。&lt;/p>
&lt;p>而序列化的方式可以通过 &amp;ndash;storage-media-type 来指定，默认为 protobuf 。使用这种方式将数据序列化之后，得出来的将会有很多乱码，详见 &lt;a href="https://desistdaydream.github.io/docs/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/%E9%94%AE%E5%80%BC%E6%95%B0%E6%8D%AE/Etcd/Etcd%20%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B.md">Etcd 数据模型&lt;/a> 中的说明&lt;/p>
&lt;h1 id="kube-apiserver-manifests-示例">kube-apiserver Manifests 示例&lt;a class="td-heading-self-link" href="#kube-apiserver-manifests-%e7%a4%ba%e4%be%8b" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">apiVersion&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">v1&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">kind&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Pod&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">metadata&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">annotations&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">kubeadm.kubernetes.io/kube-apiserver.advertise-address.endpoint&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">172.19.42.231&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">6443&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">creationTimestamp&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">null&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">labels&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">component&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">kube-apiserver&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">tier&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">control-plane&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">kube-apiserver&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">namespace&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">kube-system&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">spec&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">containers&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">command&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">kube-apiserver&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- --&lt;span style="color:#000">advertise-address=172.19.42.231&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- --&lt;span style="color:#000">allow-privileged=true&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- --&lt;span style="color:#000">authorization-mode=Node,RBAC&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- --&lt;span style="color:#000">client-ca-file=/etc/kubernetes/pki/ca.crt&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- --&lt;span style="color:#000">enable-admission-plugins=NodeRestriction&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- --&lt;span style="color:#000">enable-bootstrap-token-auth=true&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- --&lt;span style="color:#000">etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- --&lt;span style="color:#000">etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- --&lt;span style="color:#000">etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- --&lt;span style="color:#000">etcd-servers=https://127.0.0.1:2379&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- --&lt;span style="color:#000">insecure-port=0&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- --&lt;span style="color:#000">kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- --&lt;span style="color:#000">kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- --&lt;span style="color:#000">kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- --&lt;span style="color:#000">proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- --&lt;span style="color:#000">proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- --&lt;span style="color:#000">requestheader-allowed-names=front-proxy-client&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- --&lt;span style="color:#000">requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- --&lt;span style="color:#000">requestheader-extra-headers-prefix=X-Remote-Extra-&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- --&lt;span style="color:#000">requestheader-group-headers=X-Remote-Group&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- --&lt;span style="color:#000">requestheader-username-headers=X-Remote-User&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- --&lt;span style="color:#000">secure-port=6443&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- --&lt;span style="color:#000">service-account-key-file=/etc/kubernetes/pki/sa.pub&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- --&lt;span style="color:#000">service-cluster-ip-range=10.96.0.0/12&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- --&lt;span style="color:#000">service-node-port-range=30000-60000&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- --&lt;span style="color:#000">tls-cert-file=/etc/kubernetes/pki/apiserver.crt&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- --&lt;span style="color:#000">tls-private-key-file=/etc/kubernetes/pki/apiserver.key&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">image&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">registry.aliyuncs.com/k8sxio/kube-apiserver:v1.19.2&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">imagePullPolicy&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">IfNotPresent&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">livenessProbe&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">failureThreshold&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">8&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">httpGet&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">host&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">172.19.42.231&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">path&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">/livez&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">port&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">6443&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">scheme&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">HTTPS&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">initialDelaySeconds&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">periodSeconds&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">timeoutSeconds&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">15&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">kube-apiserver&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">readinessProbe&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">failureThreshold&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">httpGet&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">host&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">172.19.42.231&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">path&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">/readyz&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">port&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">6443&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">scheme&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">HTTPS&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">periodSeconds&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">timeoutSeconds&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">15&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">resources&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">requests&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">cpu&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">250m&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">startupProbe&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">failureThreshold&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">24&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">httpGet&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">host&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">172.19.42.231&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">path&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">/livez&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">port&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">6443&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">scheme&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">HTTPS&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">initialDelaySeconds&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">periodSeconds&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">timeoutSeconds&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">15&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">volumeMounts&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">mountPath&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">/etc/ssl/certs&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">ca-certs&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">readOnly&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">mountPath&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">/etc/pki&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">etc-pki&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">readOnly&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">mountPath&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">/etc/localtime&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">host-time&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">readOnly&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">mountPath&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">/etc/kubernetes/pki&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">k8s-certs&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">readOnly&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">hostNetwork&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">priorityClassName&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">system-node-critical&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">volumes&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">hostPath&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">path&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">/etc/ssl/certs&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">DirectoryOrCreate&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">ca-certs&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">hostPath&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">path&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">/etc/pki&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">DirectoryOrCreate&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">etc-pki&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">hostPath&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">path&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">/etc/localtime&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">host-time&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">hostPath&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">path&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">/etc/kubernetes/pki&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">DirectoryOrCreate&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">k8s-certs&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: API 参考</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/API-Resource-%E4%B8%8E-Object/API-%E5%8F%82%E8%80%83/API-%E5%8F%82%E8%80%83/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/API-Resource-%E4%B8%8E-Object/API-%E5%8F%82%E8%80%83/API-%E5%8F%82%E8%80%83/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23">官方文档，参考 - API 概述 - API&lt;/a>(这里是通过单一页面显示 API 资源各字段详解)
&lt;ul>
&lt;li>链接里是 1.23 的，想查看其他版本 API，改变 URL 中的版本即可。随着版本更新，老版本的页面会删除。&lt;/li>
&lt;li>该页面的原始文件是符合 OpenAPI 格式的 swagger.json，位置在 kubernetes/kubernetes 仓库的 &lt;a href="https://github.com/kubernetes/kubernetes/blob/master/api/openapi-spec/swagger.json">kubernetes/api/openapi-spec/swagger.json&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/">官方文档，参考 - KubernetesAPI&lt;/a>(这里是通过多级页面显示 API 资源各字段详解)
&lt;ul>
&lt;li>这些连接的内容，其实是 &lt;code>kubectl explain&lt;/code> 命令的内容显示在浏览器中了。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://github.com/kubernetes/api/blob/master/core/v1/types.go">GitHub 项目，kubernetes/api - core/v1/types.go&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>在本部分笔记后面的章节，各资源 Manifest 详解，其实已经描述了 API 中各个字段的含义。所以本篇文章不会详解每个 API，而是记录一下如何通过 Kubernetes 官网来查找 API 详解，以及如何使用官方文档查看 API 详解。&lt;/p>
&lt;p>如果笔记中记录得不够详细，&lt;code>kubectl explain&lt;/code> 命令也看着不方便，那么通过这篇文章中介绍的官方文档中的 API 详解来查看，将会更加直观。&lt;/p>
&lt;p>&lt;strong>Kubernetes API 参考中将会描述每种资源的 Manifests 中每个字段(即.YAML 中的节点)的含义。&lt;/strong>&lt;/p>
&lt;p>这是单一页面的样子。左侧是根据对资源的分类而形成的目录，右侧是完整的页面&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/kubernetes/api/1616120193938-a171af16-575d-4de6-951a-99cdca271a50.png" alt="">&lt;/p>
&lt;p>这是多级页面的样子，该 API 详解是内含在官方文档中的，并且对 API 进行了细致的分类&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/kubernetes/api/1616120193972-2c538ed5-7a6f-4aca-bf11-732240aa84d6.png" alt="">&lt;/p>
&lt;h2 id="字段的类型占位符">字段的类型占位符&lt;a class="td-heading-self-link" href="#%e5%ad%97%e6%ae%b5%e7%9a%84%e7%b1%bb%e5%9e%8b%e5%8d%a0%e4%bd%8d%e7%ac%a6" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>官方文档中，将每个字段的类型，放在字段名称后面的 &lt;code>()&lt;/code> 中，效果如图：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/kubernetes/api/20230419102123.png" alt="image.png">&lt;/p>
&lt;p>详见：&lt;a href="https://desistdaydream.github.io/docs/%E5%AD%A6%E4%B9%A0/PKM/PKM.md">PKM&lt;/a> 中关于对各种文档的使用说明示例。&lt;/p>
&lt;p>下面是几种基本的类型介绍：&lt;/p>
&lt;p>&lt;strong>[]TYPE&lt;/strong> # 基本数组组成，数组元素类型为 TYPE，比如 &lt;code>[]STRING&lt;/code> 格式应该就是下面这样&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">args&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">deletecr&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- --&lt;span style="color:#000">ns&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- --&lt;span style="color:#000">name&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>OBJECT&lt;/strong> # 基本对象类型，也称为 Mapping 类型。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">resources&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">limits&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">cpu&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;2&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">memory&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">2Gi&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">requests&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">cpu&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">500m&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">memory&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">400Mi&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>[]OBJECT&lt;/strong> # 数组中的元素是对象的特殊类型&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">containers&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">args&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">AAA&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">BBB&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">XXX&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">image&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">XXX&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">YYY&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">image&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">YYY&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>map[STRING]STRING&lt;/strong> # 特殊的对象类型。键 和 值 的数据类型都是 STRING&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">labels&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">key1&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">value1&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">key2&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">value2&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="api-分类">API 分类&lt;a class="td-heading-self-link" href="#api-%e5%88%86%e7%b1%bb" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/API%20Resource%20%E4%B8%8E%20Object/API%20%E5%8F%82%E8%80%83/%E5%B7%A5%E4%BD%9C%E8%B4%9F%E8%BD%BD%E8%B5%84%E6%BA%90/%E5%B7%A5%E4%BD%9C%E8%B4%9F%E8%BD%BD%E8%B5%84%E6%BA%90.md">Workloads Resources&lt;/a>(工作负载资源)&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/service-resources/">Services Resources&lt;/a>(服务资源)&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/">Config and Storage Resources&lt;/a>(配置与存储资源)&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/authentication-resources/">Authentication Resources&lt;/a>(认证资源)&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/authorization-resources/">Authorization Resources&lt;/a>(授权资源)&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/policies-resources/">Policies Resources&lt;/a>(策略资源)&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/extend-resources/">Extend Resources&lt;/a>(扩展资源)&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/cluster-resources/">Cluster Resources&lt;/a>(集群资源)&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/">Common Definitions&lt;/a>(通用定义) # 在多种资源 API 中，嵌入的 API。比如 节点选择器、meta 字段 等等&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/common-parameters/common-parameters/">Common Parameters&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>在每种资源的 Manifests 中，会有一些共用的部分称为 &lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/API%20Resource%20%E4%B8%8E%20Object/API%20%E5%8F%82%E8%80%83/Common%20Definitions(%E9%80%9A%E7%94%A8%E5%AE%9A%E4%B9%89)/Common%20Definitions(%E9%80%9A%E7%94%A8%E5%AE%9A%E4%B9%89).md">Common Definitions(通用定义)&lt;/a>（也可以说是功能定义），比如常见的 &lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/API%20Resource%20%E4%B8%8E%20Object/API%20%E5%8F%82%E8%80%83/Common%20Definitions(%E9%80%9A%E7%94%A8%E5%AE%9A%E4%B9%89)/LabelSelector.md">LabelSelector&lt;/a>，这属于资源的 Manifests 的一部分。很多组件在解析 Manifests 中的通用定义时，都会遵循相同的规则。除了通用定义以外的，都属于 K8S 的资源定义，比如定义 &lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/API%20Resource%20%E4%B8%8E%20Object/API%20%E5%8F%82%E8%80%83/%E5%B7%A5%E4%BD%9C%E8%B4%9F%E8%BD%BD%E8%B5%84%E6%BA%90/Pod%20Manifest.md">Pod&lt;/a> 的 API 参考、定义 &lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/API%20Resource%20%E4%B8%8E%20Object/API%20%E5%8F%82%E8%80%83/%E6%9C%8D%E5%8A%A1%E8%B5%84%E6%BA%90/Service%20Manifests.md">Service&lt;/a> 的 API 参考等等。&lt;/strong>&lt;/p>
&lt;h2 id="config-and-storage-resources">Config and Storage Resources&lt;a class="td-heading-self-link" href="#config-and-storage-resources" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h5 id="configmaphttpskubernetesiodocsreferencekubernetes-apiconfig-and-storage-resourcesconfig-map-v1">&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/config-map-v1/">ConfigMap&lt;/a>&lt;a class="td-heading-self-link" href="#configmaphttpskubernetesiodocsreferencekubernetes-apiconfig-and-storage-resourcesconfig-map-v1" aria-label="Heading self-link">&lt;/a>&lt;/h5>
&lt;p>ConfigMap holds configuration data for pods to consume.&lt;/p>
&lt;h5 id="secrethttpskubernetesiodocsreferencekubernetes-apiconfig-and-storage-resourcessecret-v1">&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/secret-v1/">Secret&lt;/a>&lt;a class="td-heading-self-link" href="#secrethttpskubernetesiodocsreferencekubernetes-apiconfig-and-storage-resourcessecret-v1" aria-label="Heading self-link">&lt;/a>&lt;/h5>
&lt;p>Secret holds secret data of a certain type.&lt;/p>
&lt;h5 id="volumehttpskubernetesiodocsreferencekubernetes-apiconfig-and-storage-resourcesvolume">&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/volume/">Volume&lt;/a>&lt;a class="td-heading-self-link" href="#volumehttpskubernetesiodocsreferencekubernetes-apiconfig-and-storage-resourcesvolume" aria-label="Heading self-link">&lt;/a>&lt;/h5>
&lt;p>Volume represents a named volume in a pod that may be accessed by any container in the pod.&lt;/p>
&lt;h5 id="persistentvolumeclaimhttpskubernetesiodocsreferencekubernetes-apiconfig-and-storage-resourcespersistent-volume-claim-v1">&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-claim-v1/">PersistentVolumeClaim&lt;/a>&lt;a class="td-heading-self-link" href="#persistentvolumeclaimhttpskubernetesiodocsreferencekubernetes-apiconfig-and-storage-resourcespersistent-volume-claim-v1" aria-label="Heading self-link">&lt;/a>&lt;/h5>
&lt;p>PersistentVolumeClaim is a user&amp;rsquo;s request for and claim to a persistent volume.&lt;/p>
&lt;h5 id="persistentvolumehttpskubernetesiodocsreferencekubernetes-apiconfig-and-storage-resourcespersistent-volume-v1">&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-v1/">PersistentVolume&lt;/a>&lt;a class="td-heading-self-link" href="#persistentvolumehttpskubernetesiodocsreferencekubernetes-apiconfig-and-storage-resourcespersistent-volume-v1" aria-label="Heading self-link">&lt;/a>&lt;/h5>
&lt;p>PersistentVolume (PV) is a storage resource provisioned by an administrator.&lt;/p>
&lt;h5 id="storageclasshttpskubernetesiodocsreferencekubernetes-apiconfig-and-storage-resourcesstorage-class-v1">&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/storage-class-v1/">StorageClass&lt;/a>&lt;a class="td-heading-self-link" href="#storageclasshttpskubernetesiodocsreferencekubernetes-apiconfig-and-storage-resourcesstorage-class-v1" aria-label="Heading self-link">&lt;/a>&lt;/h5>
&lt;p>StorageClass describes the parameters for a class of storage for which PersistentVolumes can be dynamically provisioned.&lt;/p>
&lt;h5 id="volumeattachmenthttpskubernetesiodocsreferencekubernetes-apiconfig-and-storage-resourcesvolume-attachment-v1">&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/volume-attachment-v1/">VolumeAttachment&lt;/a>&lt;a class="td-heading-self-link" href="#volumeattachmenthttpskubernetesiodocsreferencekubernetes-apiconfig-and-storage-resourcesvolume-attachment-v1" aria-label="Heading self-link">&lt;/a>&lt;/h5>
&lt;p>VolumeAttachment captures the intent to attach or detach the specified volume to/from the specified node.&lt;/p>
&lt;h5 id="csidriverhttpskubernetesiodocsreferencekubernetes-apiconfig-and-storage-resourcescsi-driver-v1">&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/csi-driver-v1/">CSIDriver&lt;/a>&lt;a class="td-heading-self-link" href="#csidriverhttpskubernetesiodocsreferencekubernetes-apiconfig-and-storage-resourcescsi-driver-v1" aria-label="Heading self-link">&lt;/a>&lt;/h5>
&lt;p>CSIDriver captures information about a Container Storage Interface (CSI) volume driver deployed on the cluster.&lt;/p>
&lt;h5 id="csinodehttpskubernetesiodocsreferencekubernetes-apiconfig-and-storage-resourcescsi-node-v1">&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/csi-node-v1/">CSINode&lt;/a>&lt;a class="td-heading-self-link" href="#csinodehttpskubernetesiodocsreferencekubernetes-apiconfig-and-storage-resourcescsi-node-v1" aria-label="Heading self-link">&lt;/a>&lt;/h5>
&lt;p>CSINode holds information about all CSI drivers installed on a node.&lt;/p>
&lt;h5 id="csistoragecapacity-v1beta1httpskubernetesiodocsreferencekubernetes-apiconfig-and-storage-resourcescsi-storage-capacity-v1beta1">&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/csi-storage-capacity-v1beta1/">CSIStorageCapacity v1beta1&lt;/a>&lt;a class="td-heading-self-link" href="#csistoragecapacity-v1beta1httpskubernetesiodocsreferencekubernetes-apiconfig-and-storage-resourcescsi-storage-capacity-v1beta1" aria-label="Heading self-link">&lt;/a>&lt;/h5>
&lt;p>CSIStorageCapacity stores the result of one CSI GetCapacity call.&lt;/p>
&lt;h2 id="authentication-resources">Authentication Resources&lt;a class="td-heading-self-link" href="#authentication-resources" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h5 id="serviceaccounthttpskubernetesiodocsreferencekubernetes-apiauthentication-resourcesservice-account-v1">&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/authentication-resources/service-account-v1/">ServiceAccount&lt;/a>&lt;a class="td-heading-self-link" href="#serviceaccounthttpskubernetesiodocsreferencekubernetes-apiauthentication-resourcesservice-account-v1" aria-label="Heading self-link">&lt;/a>&lt;/h5>
&lt;p>ServiceAccount binds together: &lt;em>a name, understood by users, and perhaps by peripheral systems, for an identity&lt;/em> a principal that can be authenticated and authorized * a set of secrets.&lt;/p>
&lt;h5 id="tokenrequesthttpskubernetesiodocsreferencekubernetes-apiauthentication-resourcestoken-request-v1">&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/authentication-resources/token-request-v1/">TokenRequest&lt;/a>&lt;a class="td-heading-self-link" href="#tokenrequesthttpskubernetesiodocsreferencekubernetes-apiauthentication-resourcestoken-request-v1" aria-label="Heading self-link">&lt;/a>&lt;/h5>
&lt;p>TokenRequest requests a token for a given service account.&lt;/p>
&lt;h5 id="tokenreviewhttpskubernetesiodocsreferencekubernetes-apiauthentication-resourcestoken-review-v1">&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/authentication-resources/token-review-v1/">TokenReview&lt;/a>&lt;a class="td-heading-self-link" href="#tokenreviewhttpskubernetesiodocsreferencekubernetes-apiauthentication-resourcestoken-review-v1" aria-label="Heading self-link">&lt;/a>&lt;/h5>
&lt;p>TokenReview attempts to authenticate a token to a known user.&lt;/p>
&lt;h5 id="certificatesigningrequesthttpskubernetesiodocsreferencekubernetes-apiauthentication-resourcescertificate-signing-request-v1">&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/authentication-resources/certificate-signing-request-v1/">CertificateSigningRequest&lt;/a>&lt;a class="td-heading-self-link" href="#certificatesigningrequesthttpskubernetesiodocsreferencekubernetes-apiauthentication-resourcescertificate-signing-request-v1" aria-label="Heading self-link">&lt;/a>&lt;/h5>
&lt;p>CertificateSigningRequest objects provide a mechanism to obtain x509 certificates by submitting a certificate signing request, and having it asynchronously approved and issued.&lt;/p>
&lt;h2 id="authorization-resources">Authorization Resources&lt;a class="td-heading-self-link" href="#authorization-resources" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h5 id="localsubjectaccessreviewhttpskubernetesiodocsreferencekubernetes-apiauthorization-resourceslocal-subject-access-review-v1">&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/authorization-resources/local-subject-access-review-v1/">LocalSubjectAccessReview&lt;/a>&lt;a class="td-heading-self-link" href="#localsubjectaccessreviewhttpskubernetesiodocsreferencekubernetes-apiauthorization-resourceslocal-subject-access-review-v1" aria-label="Heading self-link">&lt;/a>&lt;/h5>
&lt;p>LocalSubjectAccessReview checks whether or not a user or group can perform an action in a given namespace.&lt;/p>
&lt;h5 id="selfsubjectaccessreviewhttpskubernetesiodocsreferencekubernetes-apiauthorization-resourcesself-subject-access-review-v1">&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/authorization-resources/self-subject-access-review-v1/">SelfSubjectAccessReview&lt;/a>&lt;a class="td-heading-self-link" href="#selfsubjectaccessreviewhttpskubernetesiodocsreferencekubernetes-apiauthorization-resourcesself-subject-access-review-v1" aria-label="Heading self-link">&lt;/a>&lt;/h5>
&lt;p>SelfSubjectAccessReview checks whether or the current user can perform an action.&lt;/p>
&lt;h5 id="selfsubjectrulesreviewhttpskubernetesiodocsreferencekubernetes-apiauthorization-resourcesself-subject-rules-review-v1">&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/authorization-resources/self-subject-rules-review-v1/">SelfSubjectRulesReview&lt;/a>&lt;a class="td-heading-self-link" href="#selfsubjectrulesreviewhttpskubernetesiodocsreferencekubernetes-apiauthorization-resourcesself-subject-rules-review-v1" aria-label="Heading self-link">&lt;/a>&lt;/h5>
&lt;p>SelfSubjectRulesReview enumerates the set of actions the current user can perform within a namespace.&lt;/p>
&lt;h5 id="subjectaccessreviewhttpskubernetesiodocsreferencekubernetes-apiauthorization-resourcessubject-access-review-v1">&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/authorization-resources/subject-access-review-v1/">SubjectAccessReview&lt;/a>&lt;a class="td-heading-self-link" href="#subjectaccessreviewhttpskubernetesiodocsreferencekubernetes-apiauthorization-resourcessubject-access-review-v1" aria-label="Heading self-link">&lt;/a>&lt;/h5>
&lt;p>SubjectAccessReview checks whether or not a user or group can perform an action.&lt;/p>
&lt;h5 id="clusterrolehttpskubernetesiodocsreferencekubernetes-apiauthorization-resourcescluster-role-v1">&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/authorization-resources/cluster-role-v1/">ClusterRole&lt;/a>&lt;a class="td-heading-self-link" href="#clusterrolehttpskubernetesiodocsreferencekubernetes-apiauthorization-resourcescluster-role-v1" aria-label="Heading self-link">&lt;/a>&lt;/h5>
&lt;p>ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding.&lt;/p>
&lt;h5 id="clusterrolebindinghttpskubernetesiodocsreferencekubernetes-apiauthorization-resourcescluster-role-binding-v1">&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/authorization-resources/cluster-role-binding-v1/">ClusterRoleBinding&lt;/a>&lt;a class="td-heading-self-link" href="#clusterrolebindinghttpskubernetesiodocsreferencekubernetes-apiauthorization-resourcescluster-role-binding-v1" aria-label="Heading self-link">&lt;/a>&lt;/h5>
&lt;p>ClusterRoleBinding references a ClusterRole, but not contain it.&lt;/p>
&lt;h5 id="rolehttpskubernetesiodocsreferencekubernetes-apiauthorization-resourcesrole-v1">&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/authorization-resources/role-v1/">Role&lt;/a>&lt;a class="td-heading-self-link" href="#rolehttpskubernetesiodocsreferencekubernetes-apiauthorization-resourcesrole-v1" aria-label="Heading self-link">&lt;/a>&lt;/h5>
&lt;p>Role is a namespaced, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding.&lt;/p>
&lt;h5 id="rolebindinghttpskubernetesiodocsreferencekubernetes-apiauthorization-resourcesrole-binding-v1">&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/authorization-resources/role-binding-v1/">RoleBinding&lt;/a>&lt;a class="td-heading-self-link" href="#rolebindinghttpskubernetesiodocsreferencekubernetes-apiauthorization-resourcesrole-binding-v1" aria-label="Heading self-link">&lt;/a>&lt;/h5>
&lt;p>RoleBinding references a role, but does not contain it.&lt;/p>
&lt;h2 id="policies-resources">Policies Resources&lt;a class="td-heading-self-link" href="#policies-resources" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h5 id="limitrangehttpskubernetesiodocsreferencekubernetes-apipolicy-resourceslimit-range-v1">&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/policy-resources/limit-range-v1/">LimitRange&lt;/a>&lt;a class="td-heading-self-link" href="#limitrangehttpskubernetesiodocsreferencekubernetes-apipolicy-resourceslimit-range-v1" aria-label="Heading self-link">&lt;/a>&lt;/h5>
&lt;p>LimitRange sets resource usage limits for each kind of resource in a Namespace.&lt;/p>
&lt;h5 id="resourcequotahttpskubernetesiodocsreferencekubernetes-apipolicy-resourcesresource-quota-v1">&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/policy-resources/resource-quota-v1/">ResourceQuota&lt;/a>&lt;a class="td-heading-self-link" href="#resourcequotahttpskubernetesiodocsreferencekubernetes-apipolicy-resourcesresource-quota-v1" aria-label="Heading self-link">&lt;/a>&lt;/h5>
&lt;p>ResourceQuota sets aggregate quota restrictions enforced per namespace.&lt;/p>
&lt;h5 id="networkpolicyhttpskubernetesiodocsreferencekubernetes-apipolicy-resourcesnetwork-policy-v1">&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/policy-resources/network-policy-v1/">NetworkPolicy&lt;/a>&lt;a class="td-heading-self-link" href="#networkpolicyhttpskubernetesiodocsreferencekubernetes-apipolicy-resourcesnetwork-policy-v1" aria-label="Heading self-link">&lt;/a>&lt;/h5>
&lt;p>NetworkPolicy describes what network traffic is allowed for a set of Pods.&lt;/p>
&lt;h5 id="poddisruptionbudgethttpskubernetesiodocsreferencekubernetes-apipolicy-resourcespod-disruption-budget-v1">&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/policy-resources/pod-disruption-budget-v1/">PodDisruptionBudget&lt;/a>&lt;a class="td-heading-self-link" href="#poddisruptionbudgethttpskubernetesiodocsreferencekubernetes-apipolicy-resourcespod-disruption-budget-v1" aria-label="Heading self-link">&lt;/a>&lt;/h5>
&lt;p>PodDisruptionBudget is an object to define the max disruption that can be caused to a collection of pods.&lt;/p>
&lt;h5 id="podsecuritypolicy-v1beta1httpskubernetesiodocsreferencekubernetes-apipolicy-resourcespod-security-policy-v1beta1">&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/policy-resources/pod-security-policy-v1beta1/">PodSecurityPolicy v1beta1&lt;/a>&lt;a class="td-heading-self-link" href="#podsecuritypolicy-v1beta1httpskubernetesiodocsreferencekubernetes-apipolicy-resourcespod-security-policy-v1beta1" aria-label="Heading self-link">&lt;/a>&lt;/h5>
&lt;p>PodSecurityPolicy governs the ability to make requests that affect the Security Context that will be applied to a pod and container.&lt;/p>
&lt;h2 id="extend-resources">Extend Resources&lt;a class="td-heading-self-link" href="#extend-resources" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h5 id="customresourcedefinitionhttpskubernetesiodocsreferencekubernetes-apiextend-resourcescustom-resource-definition-v1">&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/extend-resources/custom-resource-definition-v1/">CustomResourceDefinition&lt;/a>&lt;a class="td-heading-self-link" href="#customresourcedefinitionhttpskubernetesiodocsreferencekubernetes-apiextend-resourcescustom-resource-definition-v1" aria-label="Heading self-link">&lt;/a>&lt;/h5>
&lt;p>CustomResourceDefinition represents a resource that should be exposed on the API server.&lt;/p>
&lt;h5 id="mutatingwebhookconfigurationhttpskubernetesiodocsreferencekubernetes-apiextend-resourcesmutating-webhook-configuration-v1">&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/extend-resources/mutating-webhook-configuration-v1/">MutatingWebhookConfiguration&lt;/a>&lt;a class="td-heading-self-link" href="#mutatingwebhookconfigurationhttpskubernetesiodocsreferencekubernetes-apiextend-resourcesmutating-webhook-configuration-v1" aria-label="Heading self-link">&lt;/a>&lt;/h5>
&lt;p>MutatingWebhookConfiguration describes the configuration of and admission webhook that accept or reject and may change the object.&lt;/p>
&lt;h5 id="validatingwebhookconfigurationhttpskubernetesiodocsreferencekubernetes-apiextend-resourcesvalidating-webhook-configuration-v1">&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/extend-resources/validating-webhook-configuration-v1/">ValidatingWebhookConfiguration&lt;/a>&lt;a class="td-heading-self-link" href="#validatingwebhookconfigurationhttpskubernetesiodocsreferencekubernetes-apiextend-resourcesvalidating-webhook-configuration-v1" aria-label="Heading self-link">&lt;/a>&lt;/h5>
&lt;p>ValidatingWebhookConfiguration describes the configuration of and admission webhook that accept or reject and object without changing it.&lt;/p>
&lt;h2 id="cluster-resources">Cluster Resources&lt;a class="td-heading-self-link" href="#cluster-resources" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h5 id="nodehttpskubernetesiodocsreferencekubernetes-apicluster-resourcesnode-v1">&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/cluster-resources/node-v1/">Node&lt;/a>&lt;a class="td-heading-self-link" href="#nodehttpskubernetesiodocsreferencekubernetes-apicluster-resourcesnode-v1" aria-label="Heading self-link">&lt;/a>&lt;/h5>
&lt;p>Node is a worker node in Kubernetes.&lt;/p>
&lt;h5 id="namespacehttpskubernetesiodocsreferencekubernetes-apicluster-resourcesnamespace-v1">&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/cluster-resources/namespace-v1/">Namespace&lt;/a>&lt;a class="td-heading-self-link" href="#namespacehttpskubernetesiodocsreferencekubernetes-apicluster-resourcesnamespace-v1" aria-label="Heading self-link">&lt;/a>&lt;/h5>
&lt;p>Namespace provides a scope for Names.&lt;/p>
&lt;h5 id="eventhttpskubernetesiodocsreferencekubernetes-apicluster-resourcesevent-v1">&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/cluster-resources/event-v1/">Event&lt;/a>&lt;a class="td-heading-self-link" href="#eventhttpskubernetesiodocsreferencekubernetes-apicluster-resourcesevent-v1" aria-label="Heading self-link">&lt;/a>&lt;/h5>
&lt;p>Event is a report of an event somewhere in the cluster.&lt;/p>
&lt;h5 id="apiservicehttpskubernetesiodocsreferencekubernetes-apicluster-resourcesapi-service-v1">&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/cluster-resources/api-service-v1/">APIService&lt;/a>&lt;a class="td-heading-self-link" href="#apiservicehttpskubernetesiodocsreferencekubernetes-apicluster-resourcesapi-service-v1" aria-label="Heading self-link">&lt;/a>&lt;/h5>
&lt;p>APIService represents a server for a particular GroupVersion.&lt;/p>
&lt;h5 id="leasehttpskubernetesiodocsreferencekubernetes-apicluster-resourceslease-v1">&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/cluster-resources/lease-v1/">Lease&lt;/a>&lt;a class="td-heading-self-link" href="#leasehttpskubernetesiodocsreferencekubernetes-apicluster-resourceslease-v1" aria-label="Heading self-link">&lt;/a>&lt;/h5>
&lt;p>Lease defines a lease concept.&lt;/p>
&lt;h5 id="runtimeclasshttpskubernetesiodocsreferencekubernetes-apicluster-resourcesruntime-class-v1">&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/cluster-resources/runtime-class-v1/">RuntimeClass&lt;/a>&lt;a class="td-heading-self-link" href="#runtimeclasshttpskubernetesiodocsreferencekubernetes-apicluster-resourcesruntime-class-v1" aria-label="Heading self-link">&lt;/a>&lt;/h5>
&lt;p>RuntimeClass defines a class of container runtime supported in the cluster.&lt;/p>
&lt;h5 id="flowschema-v1beta1httpskubernetesiodocsreferencekubernetes-apicluster-resourcesflow-schema-v1beta1">&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/cluster-resources/flow-schema-v1beta1/">FlowSchema v1beta1&lt;/a>&lt;a class="td-heading-self-link" href="#flowschema-v1beta1httpskubernetesiodocsreferencekubernetes-apicluster-resourcesflow-schema-v1beta1" aria-label="Heading self-link">&lt;/a>&lt;/h5>
&lt;p>FlowSchema defines the schema of a group of flows.&lt;/p>
&lt;h5 id="prioritylevelconfiguration-v1beta1httpskubernetesiodocsreferencekubernetes-apicluster-resourcespriority-level-configuration-v1beta1">&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/cluster-resources/priority-level-configuration-v1beta1/">PriorityLevelConfiguration v1beta1&lt;/a>&lt;a class="td-heading-self-link" href="#prioritylevelconfiguration-v1beta1httpskubernetesiodocsreferencekubernetes-apicluster-resourcespriority-level-configuration-v1beta1" aria-label="Heading self-link">&lt;/a>&lt;/h5>
&lt;p>PriorityLevelConfiguration represents the configuration of a priority level.&lt;/p>
&lt;h5 id="bindinghttpskubernetesiodocsreferencekubernetes-apicluster-resourcesbinding-v1">&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/cluster-resources/binding-v1/">Binding&lt;/a>&lt;a class="td-heading-self-link" href="#bindinghttpskubernetesiodocsreferencekubernetes-apicluster-resourcesbinding-v1" aria-label="Heading self-link">&lt;/a>&lt;/h5>
&lt;p>Binding ties one object to another; for example, a pod is bound to a node by a scheduler.&lt;/p>
&lt;h5 id="componentstatushttpskubernetesiodocsreferencekubernetes-apicluster-resourcescomponent-status-v1">&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/cluster-resources/component-status-v1/">ComponentStatus&lt;/a>&lt;a class="td-heading-self-link" href="#componentstatushttpskubernetesiodocsreferencekubernetes-apicluster-resourcescomponent-status-v1" aria-label="Heading self-link">&lt;/a>&lt;/h5>
&lt;p>ComponentStatus (and ComponentStatusList) holds the cluster validation info.&lt;/p>
&lt;h1 id="kubernetes-api-删除和弃用流程">Kubernetes API 删除和弃用流程&lt;a class="td-heading-self-link" href="#kubernetes-api-%e5%88%a0%e9%99%a4%e5%92%8c%e5%bc%83%e7%94%a8%e6%b5%81%e7%a8%8b" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kubernetes.io/docs/reference/using-api/deprecation-policy/">官方文档，参考 - API 概述 - Kubernetes 弃用策略&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Kubernetes 项目有一个记录良好的特性弃用策略[1]。该策略规定，只有当同一 API 的更新的、稳定的版本可用时，才可以弃用稳定的 API，并且 API 对于每个稳定性级别都有一个最短的生存期。给弃用的 API，是在未来的 Kubernetes 版本中被标记为删除的 API；它将继续运行，直到给删除（从弃用至少一年），但使用将导致显示警告。删除的 API 在当前版本中不再可用，此时你必须迁移到使用替换的 API。&lt;/p>
&lt;ul>
&lt;li>GA（Generally available，普遍可用）或稳定的 API 版本可能会被标记为弃用，但不得在 Kubernetes 的主要版本中删除。&lt;/li>
&lt;li>测试版或预发布 API 版本弃用后，必须支持 3 个版本。&lt;/li>
&lt;li>Alpha 或实验 API 版本可能会在任何版本中被删除，恕不另行通知。&lt;/li>
&lt;/ul>
&lt;p>无论某个 API 是因为某个功能从测试版升级到稳定版而被删除，还是因为该 API 没有成功，所有的删除都遵循这个弃用策略。每当删除一个 API 时，迁移选项都会在文档中提供说明。&lt;/p></description></item><item><title>Docs: API 访问控制</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/API-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/API-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/API-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/API-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kubernetes.io/docs/concepts/security/controlling-access/">官方文档, 概念 - 安全 - Kubernetes API 的访问控制&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>认证用于身份验证，授权用于权限检查，准入控制机制用于补充授权机制&lt;/strong>&lt;/p>
&lt;p>客户端与服务端的概念：谁向谁发请求，前者就是客户端，所在在这里，客户端与服务端没有绝对。一个服务既可以是客户端也可以是服务端，kubectl 在控制集群需要给 apiservice 发送 get，creat，delete 等指令的时候，kubectl 就是 apiservice 的客户端；而 apiservice 需要往 etcd 写入数据的时候，apiservice 就是 etcd 的客户端。&lt;/p>
&lt;p>当客户端向服务端发起请求的时候，服务端需要对客户端进行认证以便确认客户端身份是否可以接入；接入后再进行授权检查，检查该身份的请求是否可以在服务端执行。所以后面介绍的 认证 与 授权 是相辅相成，不可分隔，创建完认证之后，需要为这个认证信息进行授权，才是一套完整的鉴权机制&lt;/p>
&lt;blockquote>
&lt;p>比如现在有这么一个场景，张三要去商场买酱油。当张三到达商场后，保安人员首先要对张三进行认证，确认张三这个人可以进入商场；然后张三到达货柜拿走酱油去结账，收银人员进行授权检查，核验张三是否有权力购买酱油。&lt;/p>
&lt;/blockquote>
&lt;p>在 kubernetes 集群中，就是类似张三买酱油的场景。。。各个组件与资源对象之间的互相访问，在大多数时候，都需要进行认证与授权的检查。&lt;/p>
&lt;p>API Server 是集群的入口，不管是对资源对象的增删改查，还是访问集群中的某些对象，不可避免得只能与 API Server 交互，虽然在访问某些管理组件的 https 端口时，也需要进行认证，但是这种访问是属于基本的 https 访问。所以，在与其说是 k8s 的认证与授权，不如说是 kubernetes API 的访问控制。因为不管是从外部(kubeclt 等)、还是内部(controller-manager、某个 pod 访问集群资源)，都逃不开与 kubernetes API，也就是 api-server 这个组件的交互。毕竟 kubernetes API 是集群的唯一入口。。。就算是在集群内部署的 pod，如果想要访问集群内的资源，也逃不开 kubernetes API~~&lt;/p>
&lt;p>当然，使用 curl 命令来访问 controller、scheduler 时、或者 etcd 互相交互，都属于 认证与授权 的概念范畴~只不过这种情况不占大多数，所以就不再单独讨论了。这些认证授权方式与 API 的认证授权类似。&lt;/p>
&lt;h1 id="kubernetes-api-访问控制">Kubernetes API 访问控制&lt;a class="td-heading-self-link" href="#kubernetes-api-%e8%ae%bf%e9%97%ae%e6%8e%a7%e5%88%b6" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>我们可以通过 kubectl、客户端库、发送 REST 请求 这几种方法访问 &lt;a href="https://kubernetes.io/docs/concepts/overview/kubernetes-api/">Kubernetes API&lt;/a>。&lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/API%20%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/Authenticating(%E8%AE%A4%E8%AF%81)/User%20Account(KubeConfig).md">人类用户(User Account(KubeConfig))&lt;/a> 和 &lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/API%20%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/Authenticating(%E8%AE%A4%E8%AF%81)/Service%20Account.md">Kubernetes 的 Service Account&lt;/a> 都可以被授权进行 API 访问。 请求到达 API Server 后会经过几个阶段，具体如下图所示：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/cvkvyz/1616118854890-e2e31942-d6ea-40a7-83d8-816abb4c136a.jpeg" alt="">&lt;/p>
&lt;h2 id="传输层安全">传输层安全&lt;a class="td-heading-self-link" href="#%e4%bc%a0%e8%be%93%e5%b1%82%e5%ae%89%e5%85%a8" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>在典型的 Kubernetes 集群中，API 通过 443 端口提供服务。 API 服务器会提供一份证书。 该证书一般是私有 CA 自签名的，当然，也可以基于公信的 CA 公钥基础设施签名。&lt;/p>
&lt;p>如果集群使用私有证书颁发机构，需要在客户端的  &lt;code>~/.kube/config&lt;/code>  文件中提供该 CA 证书的副本， 以便在客户端使用程序访问 API 时，可以信任该连接并确认该连接没有被拦截。&lt;/p>
&lt;h2 id="认证">认证&lt;a class="td-heading-self-link" href="#%e8%ae%a4%e8%af%81" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>一旦 TLS 连接建立，HTTP 请求就进入到了认证的步骤。即图中的步骤 1 。 集群创建脚本或集群管理员会为 API 服务器配置一个或多个认证模块。 更具体的认证相关的描述详见&lt;a href="https://kubernetes.io/docs/admin/authentication/">这里&lt;/a>。&lt;/p>
&lt;p>认证步骤的输入是整个 HTTP 请求，但这里通常只是检查请求头和 / 或客户端证书。&lt;/p>
&lt;p>认证模块支持客户端证书，密码和 Plain Tokens， Bootstrap Tokens，以及 JWT Tokens（用于服务账户）。&lt;/p>
&lt;p>（管理员）可以同时设置多种认证模块，在设置了多个认证模块的情况下，每个模块会依次尝试认证， 直到其中一个认证成功。&lt;/p>
&lt;p>在 GCE 平台中，客户端证书，密码和 Plain Tokens，Bootstrap Tokens，以及 JWT Tokens 同时被启用。&lt;/p>
&lt;p>如果请求认证失败，则请求被拒绝，返回 401 状态码。 如果认证成功，则被认证为具体的 username，该用户名可供随后的步骤中使用。一些认证模块还提供了用户的组成员关系，另一些则没有。&lt;/p>
&lt;p>尽管 Kubernetes 使用“用户名”来进行访问控制和请求记录，但它实际上并没有 user 对象，也不存储用户名称或其他相关信息。&lt;/p>
&lt;h2 id="授权">授权&lt;a class="td-heading-self-link" href="#%e6%8e%88%e6%9d%83" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>当请求被认证为来自某个特定的用户后，该请求需要被授权。 即图中的步骤 2 。&lt;/p>
&lt;p>请求须包含请求者的用户名，请求动作，以及该动作影响的对象。 如果存在相应策略，声明该用户具有进行相应操作的权限，则该请求会被授权。&lt;/p>
&lt;p>例如，如果 Bob 有如下策略，那么他只能够读取 projectCaribou 命名空间下的 pod 资源：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;apiVersion&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;abac.authorization.kubernetes.io/v1beta1&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;kind&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Policy&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;spec&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;user&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;bob&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;namespace&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;projectCaribou&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;resource&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;pods&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;readonly&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果 Bob 发起以下请求，那么请求能够通过授权，因为 Bob 被允许访问 projectCaribou 命名空间下的对象：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;apiVersion&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;authorization.k8s.io/v1beta1&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;kind&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;SubjectAccessReview&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;spec&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;resourceAttributes&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;namespace&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;projectCaribou&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;verb&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;get&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;group&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;unicorn.example.org&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;resource&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;pods&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果 Bob 对 projectCaribou 命名空间下的对象发起一个写（create 或者 update）请求，那么它的授权会被拒绝。 如果 Bob 请求读取 （get）其他命名空间，例如 projectFish 下的对象，其授权也会被拒绝。&lt;/p>
&lt;p>Kubernetes 的授权要求使用通用的 REST 属性与现有的组织或云服务提供商的访问控制系统进行交互。 采用 REST 格式是必要的，因为除 Kubernetes 外，这些访问控制系统还可能与其他的 API 进行交互。&lt;/p>
&lt;p>Kubernetes 支持多种授权模块，例如 ABAC 模式，RBAC 模式和 Webhook 模式。 管理员创建集群时，会配置 API 服务器应用的授权模块。 如果多种授权模式同时被启用，Kubernetes 将检查所有模块，如果其中一种通过授权，则请求授权通过。 如果所有的模块全部拒绝，则请求被拒绝（HTTP 状态码 403）。&lt;/p>
&lt;p>要了解更多的 Kubernetes 授权相关信息，包括使用授权模块创建策略的具体说明等，可参考&lt;a href="https://kubernetes.io/docs/admin/authorization">授权概述&lt;/a>。&lt;/p>
&lt;h2 id="准入控制">准入控制&lt;a class="td-heading-self-link" href="#%e5%87%86%e5%85%a5%e6%8e%a7%e5%88%b6" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>准入控制模块是能够修改或拒绝请求的软件模块。 作为授权模块的补充，准入控制模块会访问被创建或更新的对象的内容。 它们作用于对象的创建，删除，更新和连接（proxy）阶段，但不包括对象的读取。&lt;/p>
&lt;p>可以同时配置多个准入控制器，它们会按顺序依次被调用。&lt;/p>
&lt;p>即图中的步骤 3 。&lt;/p>
&lt;p>与认证和授权模块不同的是，如果任一个准入控制器拒绝请求，那么整个请求会立即被拒绝。&lt;/p>
&lt;p>除了拒绝请求外，准入控制器还可以为对象设置复杂的默认值。&lt;/p>
&lt;p>可用的准入控制模块描述 &lt;a href="https://kubernetes.io/docs/admin/admission-controllers/">如下&lt;/a>。&lt;/p>
&lt;p>一旦请求通过所有准入控制器，将使用对应 API 对象的验证流程对其进行验证，然后写入对象存储 （如步骤 4）。&lt;/p>
&lt;h1 id="api-的端口和-ip">API 的端口和 IP&lt;a class="td-heading-self-link" href="#api-%e7%9a%84%e7%ab%af%e5%8f%a3%e5%92%8c-ip" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>上述讨论适用于发送请求到 API 服务器的安全端口（典型情况）。
实际上 API 服务器可以通过两个端口提供服务，默认情况下，API 服务器在 2 个端口上提供 HTTP 服务：&lt;/p>
&lt;ul>
&lt;li>Localhost Port:
&lt;ul>
&lt;li>用于测试和启动，以及管理节点的其他组件(scheduler, controller-manager)与 API 的交互&lt;/li>
&lt;li>没有 TLS&lt;/li>
&lt;li>默认值为 8080，可以通过 API Server 的 &lt;code>--insecure-port&lt;/code> 命令行标志来修改。&lt;/li>
&lt;li>默认的 IP 地址为 localhost，可以通过 API Server 的 &lt;code>--insecure-bind-address&lt;/code> 命令行标志来修改。&lt;/li>
&lt;li>请求会 &lt;strong>绕过&lt;/strong> 认证和鉴权模块。&lt;/li>
&lt;li>请求会被准入控制模块处理。&lt;/li>
&lt;li>其访问需要主机访问的权限。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Secure Port:
&lt;ul>
&lt;li>尽可能使用该端口访问&lt;/li>
&lt;li>应用 TLS。 可以通过 API Server 的 &lt;code>--tls-cert-file&lt;/code> 设置证书， &lt;code>--tls-private-key-file&lt;/code> 设置私钥。&lt;/li>
&lt;li>默认值为 6443，可以通过 API Server 的 &lt;code>--secure-port&lt;/code> 命令行标志来修改。&lt;/li>
&lt;li>默认 IP 是首个非本地的网络接口地址，可以通过 API Server 的 &lt;code>--bind-address&lt;/code> 命令行标志来修改。&lt;/li>
&lt;li>请求会经过认证和鉴权模块处理。&lt;/li>
&lt;li>请求会被准入控制模块处理。&lt;/li>
&lt;li>要求认证和授权模块正常运行。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: Authenticating(认证)</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/API-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/Authenticating%E8%AE%A4%E8%AF%81/Authenticating%E8%AE%A4%E8%AF%81/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/API-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/Authenticating%E8%AE%A4%E8%AF%81/Authenticating%E8%AE%A4%E8%AF%81/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/authentication/">官方文档, 参考 - API 访问控制 - 认证&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Authenticating(动词) 也称为 Authentication(名词) 身份验证。指明客户端是否有权限访问 API Server。&lt;/p>
&lt;p>就好比我们在登录一个网站时，需要输入账户和密码的概念类似。在使用 API Server 时，也是通过类似的方式，使用账户来登录 API server(虽然不是真的登录)。&lt;/p>
&lt;h2 id="accounts---kubernetes-集群中的账号">Accounts - Kubernetes 集群中的账号&lt;a class="td-heading-self-link" href="#accounts---kubernetes-%e9%9b%86%e7%be%a4%e4%b8%ad%e7%9a%84%e8%b4%a6%e5%8f%b7" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Accounts 是一个在认证授权系统里的逻辑概念。Accounts 需要通过认证概念中的东西(比如证书、token、或者用户名和密码等)来建立。类似于登陆系统的账户。而在 Kubernetes 中，Accounts 分为如下两类&lt;/p>
&lt;ol>
&lt;li>&lt;strong>UserAccount(用户账户，简称 User)&lt;/strong>&lt;/li>
&lt;li>&lt;strong>ServiceAccount(服务账户，简称 SA)&lt;/strong>&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>[!Tip]
UA 与 SA 的对比在 &lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/service-accounts-admin/#user-accounts-versus-service-accounts">官方文档, 参考 - API 访问控制 - 管理服务账号, User accounts 与 Service accounts&lt;/a> 有提到，官方并没有对 UserAccount 进行明确的定义，偏向于一个没有实体的抽象概念，更多的时候是用 &lt;strong>KubeConfig&lt;/strong> 这个词来作为 UserAccount 功能的实现。&lt;/p>
&lt;ul>
&lt;li>UA 用来给人。SA 用来给运行在 pod 中的进程&lt;/li>
&lt;li>UA 作用于全局，UA 的名字在集群的所有 namespace 中必须是唯一的。SA 作用于 namespace&lt;/li>
&lt;li>UA 于 SA 的账户审核注意事项是不同的，UA 的凭证信息需要在使用 kubectl config 命令时候的手动指定；SA 的凭证信息在创建 SA 后会自动生成对应的 secret 并把凭证信息保存其中。&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h3 id="user-account用户账号">User Account(用户账号)&lt;a class="td-heading-self-link" href="#user-account%e7%94%a8%e6%88%b7%e8%b4%a6%e5%8f%b7" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>详见：&lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/API%20%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/Authenticating(%E8%AE%A4%E8%AF%81)/User%20Account(KubeConfig).md">User Account(KubeConfig)&lt;/a>&lt;/p>
&lt;p>User 不属于 K8S 中的一个资源。这类 Account 适用于：客户端访问集群时使用(比如使用 kubectl、scheduler 等访问 api)&lt;/p>
&lt;p>一个 User 可以管理多个 k8s 集群、也可以多个 User 管理一个集群，权限不同。User 只有在 KubeConfig 文件中才具有实际意义。&lt;/p>
&lt;p>由于 User 不属于 K8S 资源，那么则无法通过 API 调用来添加 User Account。但是任何提供了由群集的证书颁发机构(CA)签名的有效证书的用户都将被视为已认证。基于这种情况，Kubernetes 使用证书中的 subject 字段中的 Common Name(通用名称,即 CN)的值，作为用户名。接下来，基于授权概念中的 RBAC 子系统会确定用户是否有权针对某资源执行特定的操作。&lt;/p>
&lt;p>如果想创建一个 User，则可以通过证书的方式来创建。比如像下面这样， 这就创建了一个名为 lch 的 User Account。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>openssl genrsa -out lch.key &lt;span style="color:#0000cf;font-weight:bold">2048&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>openssl req -new -key lch.key -out lch.csr -subj &lt;span style="color:#4e9a06">&amp;#34;/CN=lch&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果想使用 lch 这个 UA，则需要使用 kubectl config set-credentials 命令指定 lch 所需的相关凭证即可。还需要为 lch 绑定[授权概念](&amp;lt;/docs/10.云原生/2.3.Kubernetes%20 容器编排系统/7.API%20 访问控制/2.Authorization(授权).md&amp;raquo;)中的 Role 以便让该用户具有某些操作权限，然后 lch 这个 UA 即可对所绑定的集群有 Role 中所指定的操作权限。其中为 -subj 选项中 CN 的值就是 User 的名称。这个值也是在后面为 User 赋予 RBAC 权限的 rolebinding 时所使用的 &lt;code>subjects.name&lt;/code> 字段的值。&lt;/p>
&lt;p>进一步的细节可参阅 &lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/certificate-signing-requests/#normal-user">证书请求&lt;/a> 下普通用户主题。&lt;/p>
&lt;h3 id="service-account服务账号">Service Account(服务账号)&lt;a class="td-heading-self-link" href="#service-account%e6%9c%8d%e5%8a%a1%e8%b4%a6%e5%8f%b7" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>详见：&lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/API%20%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/Authenticating(%E8%AE%A4%E8%AF%81)/Service%20Account.md">Service Account&lt;/a>&lt;/p>
&lt;p>&lt;strong>Service Account(服务账号，简称 SA)&lt;/strong> 属于 K8S 中的一个资源。这类 Account 适用于：Pod 访问集群时使用。&lt;/p>
&lt;p>为什么需要 Service Account 呢？&lt;/p>
&lt;p>SA 概念的引入是基于这样的使用场景：运行在 pod 里的进程需要调用 Kubernetes API 以及非 Kubernetes API 的其它服务。Service Account 是给 pod 里面 Container 中的进程使用的，它为 pod 提供必要的身份认证。(与用户控制 kubectl 去调用 API 一样，这里相当于 Pod 中 Container 在调用 API 的时候需要的认证)&lt;/p>
&lt;h2 id="accounts-group账户组---useraccount-与-serviceaccount-都有-group">Accounts Group(账户组) - UserAccount 与 ServiceAccount 都有 Group&lt;a class="td-heading-self-link" href="#accounts-group%e8%b4%a6%e6%88%b7%e7%bb%84---useraccount-%e4%b8%8e-serviceaccount-%e9%83%bd%e6%9c%89-group" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>UA 与 SA 都可以属于一个或多个 Group&lt;/p>
&lt;p>Group 是 Account 的集合，本身并没有操作权限，但附加于 Group 上的权限可由其内部的所有用户继承，以实现高效的授权管理机制。Kubernetes 有几个内建的用于特殊目的的 Group：&lt;/p>
&lt;ol>
&lt;li>system:unauthenticated&lt;/li>
&lt;li>system:authenticated&lt;/li>
&lt;li>system:serviceaccounts&lt;/li>
&lt;li>system:serviceaccounts:&amp;lt;NameSpace&amp;gt;&lt;/li>
&lt;/ol>
&lt;p>KubeConfig 会给 UserAccount 提供与 APIServer 交互时所用的证书&lt;/p>
&lt;p>Secret 会给 ServiceAccount 提供与 APIServer 交互时所用的证书&lt;/p>
&lt;h1 id="authentication-strategies-认证策略ieaccount-可用的认证方式">Authentication Strategies 认证策略(i.e.Account 可用的认证方式)&lt;a class="td-heading-self-link" href="#authentication-strategies-%e8%ae%a4%e8%af%81%e7%ad%96%e7%95%a5ieaccount-%e5%8f%af%e7%94%a8%e7%9a%84%e8%ae%a4%e8%af%81%e6%96%b9%e5%bc%8f" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;a href="https://kubernetes.io/zh/docs/reference/access-authn-authz/authentication/#authentication-strategies">https://kubernetes.io/zh/docs/reference/access-authn-authz/authentication/#authentication-strategies&lt;/a>&lt;/p>
&lt;p>Kubernetes 接受的认证方式有如下几种：&lt;/p>
&lt;ul>
&lt;li>client certificates&lt;/li>
&lt;li>bearer tokens&lt;/li>
&lt;li>an authenticating proxy&lt;/li>
&lt;li>HTTP basic auth&lt;/li>
&lt;/ul>
&lt;p>向 API Server 发起 HTTPS 请求时，kubernetes 通过身份验证插件对请求进行身份验证。&lt;/p>
&lt;h2 id="x509-client-certsx509-客户端证书">X509 Client Certs(X509 客户端证书)&lt;a class="td-heading-self-link" href="#x509-client-certsx509-%e5%ae%a2%e6%88%b7%e7%ab%af%e8%af%81%e4%b9%a6" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/authentication/#x509-client-certs">https://kubernetes.io/docs/reference/access-authn-authz/authentication/#x509-client-certs&lt;/a>&lt;/p>
&lt;p>通过给 API 服务器传递 &amp;ndash;client-ca-file=SOMEFILE 选项，就可以启动客户端证书身份认证。 所引用的文件必须包含一个或者多个证书机构，用来验证向 API 服务器提供的客户端证书。 如果提供了客户端证书并且证书被验证通过，则 subject 中的公共名称（Common Name）就被 作为请求的用户名。 自 Kubernetes 1.4 开始，客户端证书还可以通过证书的 organization 字段标明用户的组成员信息。 要包含用户的多个组成员信息，可以在证书种包含多个 organization 字段。&lt;/p>
&lt;p>例如，使用 openssl 命令行工具生成一个证书签名请求：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>openssl req -new -key jbeda.pem -out jbeda-csr.pem -subj &lt;span style="color:#4e9a06">&amp;#34;/CN=jbeda/O=app1/O=app2&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>此命令将使用用户名 jbeda 生成一个证书签名请求（CSR），且该用户属于 &amp;ldquo;app&amp;rdquo; 和 &amp;ldquo;app2&amp;rdquo; 两个用户组。&lt;/p>
&lt;p>参阅&lt;a href="https://kubernetes.io/docs/concepts/cluster-administration/certificates/">管理证书&lt;/a>了解如何生成客户端证书&lt;/p>
&lt;h2 id="static-token-file静态令牌文件">Static Token File(静态令牌文件)&lt;a class="td-heading-self-link" href="#static-token-file%e9%9d%99%e6%80%81%e4%bb%a4%e7%89%8c%e6%96%87%e4%bb%b6" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/authentication/#static-token-file">https://kubernetes.io/docs/reference/access-authn-authz/authentication/#static-token-file&lt;/a>&lt;/p>
&lt;p>当 API 服务器的命令行设置了 &amp;ndash;token-auth-file=SOMEFILE 选项时，会从文件中 读取持有者令牌。目前，令牌会长期有效，并且在不重启 API 服务器的情况下 无法更改令牌列表。&lt;/p>
&lt;p>令牌文件是一个 CSV 文件，包含至少 3 个列：令牌、用户名和用户的 UID。 其余列被视为可选的组名。&lt;/p>
&lt;p>说明：&lt;/p>
&lt;p>如果要设置的组名不止一个，则对应的列必须用双引号括起来，例如&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>token,user,uid,&lt;span style="color:#4e9a06">&amp;#34;group1,group2,group3&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在请求中放入持有者令牌&lt;/p>
&lt;p>当使用持有者令牌来对某 HTTP 客户端执行身份认证时，API 服务器希望看到 一个名为 Authorization 的 HTTP 头，其值格式为 Bearer THETOKEN。 持有者令牌必须是一个可以放入 HTTP 头部值字段的字符序列，至多可使用 HTTP 的编码和引用机制。 例如：如果持有者令牌为 31ada4fd-adec-460c-809a-9e56ceb75269，则其 出现在 HTTP 头部时如下所示：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>Authorization: Bearer 31ada4fd-adec-460c-809a-9e56ceb75269
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 比如一个 curl 请求中，可以通过 -H 参数加入请求头&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>curl --cacert &lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">CAPATH&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span> -H &lt;span style="color:#4e9a06">&amp;#34;Authorization: Bearer &lt;/span>&lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">TOKEN&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span> https://&lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">IP&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>:6443/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Authorization(授权)</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/API-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/Authorization%E6%8E%88%E6%9D%83/Authorization%E6%8E%88%E6%9D%83/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/API-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/Authorization%E6%8E%88%E6%9D%83/Authorization%E6%8E%88%E6%9D%83/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/authorization/">官方文档, 参考 - API 访问控制 - 授权&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>在 Kubernetes 中，在 &lt;strong>Authorization(i.e.授予访问权限，简称：授权)&lt;/strong> 之前必须进行过 &lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/API%20%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/Authenticating(%E8%AE%A4%E8%AF%81)/Authenticating(%E8%AE%A4%E8%AF%81).md">Authenticating(认证)&lt;/a>&lt;/p>
&lt;h2 id="授权流程">授权流程&lt;a class="td-heading-self-link" href="#%e6%8e%88%e6%9d%83%e6%b5%81%e7%a8%8b" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="确定是允许还是拒绝请求">确定是允许还是拒绝请求&lt;a class="td-heading-self-link" href="#%e7%a1%ae%e5%ae%9a%e6%98%af%e5%85%81%e8%ae%b8%e8%bf%98%e6%98%af%e6%8b%92%e7%bb%9d%e8%af%b7%e6%b1%82" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>Kubernetes 使用 API 服务器授权 API 请求。它根据所有策略评估所有请求属性来决定允许或拒绝请求。 一个 API 请求的所有部分必须被某些策略允许才能继续。这意味着默认情况下拒绝权限。&lt;/p>
&lt;p>（尽管 Kubernetes 使用 API 服务器，但是依赖于特定种类对象的特定字段的访问控制和策略由准入控制器处理。）&lt;/p>
&lt;p>配置多个授权模块时，将按顺序检查每个模块。 如果任何授权模块批准或拒绝请求，则立即返回该决定，并且不会与其他授权模块协商。 如果所有模块对请求没有意见，则拒绝该请求。一个拒绝响应返回 HTTP 状态代码 403 。&lt;/p>
&lt;h3 id="审查您的请求属性">审查您的请求属性&lt;a class="td-heading-self-link" href="#%e5%ae%a1%e6%9f%a5%e6%82%a8%e7%9a%84%e8%af%b7%e6%b1%82%e5%b1%9e%e6%80%a7" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>Kubernetes 仅审查以下 API 请求属性：&lt;/p>
&lt;ul>
&lt;li>user - 身份验证期间提供的 user 字符串。&lt;/li>
&lt;li>group - 经过身份验证的用户所属的组名列表。&lt;/li>
&lt;li>extra - 由身份验证层提供的任意字符串键到字符串值的映射。&lt;/li>
&lt;li>API - 指示请求是否针对 API 资源。&lt;/li>
&lt;li>Request path - 各种非资源端点的路径，如 /api 或 /healthz。&lt;/li>
&lt;li>API request verb - API 动词 get，list，create，update，patch，watch，proxy，redirect，delete 和 deletecollection 用于资源请求。要确定资源 API 端点的请求动词，请参阅确定请求动词。&lt;/li>
&lt;li>HTTP request verb - HTTP 动词 get，post，put 和 delete 用于非资源请求。&lt;/li>
&lt;li>Resource - 正在访问的资源的 ID 或名称（仅限资源请求） - 对于使用 get，update，patch 和 delete 动词的资源请求，您必须提供资源名称。&lt;/li>
&lt;li>Subresource - 正在访问的子资源（仅限资源请求）。&lt;/li>
&lt;li>Namespace - 正在访问的对象的名称空间（仅适用于命名空间资源请求）。&lt;/li>
&lt;li>API group - 正在访问的 API 组（仅限资源请求）。空字符串表示核心 API 组。&lt;/li>
&lt;/ul>
&lt;h3 id="确定请求动词">确定请求动词&lt;a class="td-heading-self-link" href="#%e7%a1%ae%e5%ae%9a%e8%af%b7%e6%b1%82%e5%8a%a8%e8%af%8d" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>要确定资源 API 端点的请求动词，需要检查所使用的 HTTP 动词以及请求是否对单个资源或资源集合起作用：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>HTTP 动词&lt;/th>
&lt;th>request 动词&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>POST&lt;/td>
&lt;td>create&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>GET, HEAD&lt;/td>
&lt;td>get (单个资源)，list (资源集合)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>PUT&lt;/td>
&lt;td>update&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>PATCH&lt;/td>
&lt;td>patch&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>DELETE&lt;/td>
&lt;td>delete (单个资源)，deletecollection (资源集合)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Kubernetes 有时使用专门的动词检查授权以获得额外的权限。例如：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kubernetes.io/docs/concepts/policy/pod-security-policy/">Pod 安全策略&lt;/a> 检查 policy API 组中 podsecuritypolicies 资源的 use 动词的授权。&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/rbac/#privilege-escalation-prevention-and-bootstrapping">RBAC&lt;/a>检查 rbac.authorization.k8s.io API 组中 roles 和 clusterroles 资源的 bind 动词的授权。&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/authentication/">认证&lt;/a> layer 检查核心 API 组中 users，groups 和 serviceaccounts 的 impersonate 动词的授权，以及 authentication.k8s.io API 组中的 userextras&lt;/li>
&lt;/ul>
&lt;h1 id="授权的实现方式">授权的实现方式&lt;a class="td-heading-self-link" href="#%e6%8e%88%e6%9d%83%e7%9a%84%e5%ae%9e%e7%8e%b0%e6%96%b9%e5%bc%8f" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>在 Kubernetes 中，可以通过多种方式来实现 Authorization(授权) 功能&lt;/p>
&lt;h2 id="rbac-授权">RBAC 授权&lt;a class="td-heading-self-link" href="#rbac-%e6%8e%88%e6%9d%83" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>官方文档：&lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/rbac/">https://kubernetes.io/docs/reference/access-authn-authz/rbac/&lt;/a>&lt;/li>
&lt;li>RBAC 概念详见：&lt;a href="https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Access%20Control/RBAC.md">RBAC&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>RBAC&lt;/strong> # 基于角色的访问控制（RBAC）是一种基于企业内个人用户的角色来管理对计算机或网络资源的访问的方法。在这种语境中，权限是单个用户执行特定任务的能力，例如查看，创建或修改文件。要了解有关使用 RBAC 模式的更多信息，请参阅 &lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/rbac/">RBAC 模式&lt;/a>。&lt;/p>
&lt;ul>
&lt;li>当指定的 RBAC（基于角色的访问控制）使用 rbac.authorization.k8s.io API 组来驱动授权决策时，允许管理员通过 Kubernetes API 动态配置权限策略。&lt;/li>
&lt;li>要启用 RBAC，请使用 &amp;ndash;authorization-mode = RBAC 启动 apiserver 。&lt;/li>
&lt;/ul>
&lt;p>详见 ：&lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/API%20%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/Authorization(%E6%8E%88%E6%9D%83)/RBAC%20%E6%8E%88%E6%9D%83.md">RBAC 授权&lt;/a>&lt;/p>
&lt;h2 id="abac-授权">ABAC 授权&lt;a class="td-heading-self-link" href="#abac-%e6%8e%88%e6%9d%83" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>官方文档：&lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/abac/">https://kubernetes.io/docs/reference/access-authn-authz/abac/&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>ABAC&lt;/strong> # 基于属性的访问控制（ABAC）定义了一种访问控制范例，通过使用将属性组合在一起的策略，将访问权限授予用户。策略可以使用任何类型的属性（用户属性，资源属性，对象，环境属性等）。要了解有关使用 ABAC 模式的更多信息，请参阅 &lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/abac/">ABAC 模式&lt;/a>。&lt;/p>
&lt;h2 id="node-授权">Node 授权&lt;a class="td-heading-self-link" href="#node-%e6%8e%88%e6%9d%83" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>官方文档：&lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/node/">https://kubernetes.io/docs/reference/access-authn-authz/node/&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Node&lt;/strong> # 一个专用授权程序，根据计划运行的 pod 为 kubelet 授予权限。了解有关使用节点授权模式的更多信息，请参阅&lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/node/">节点授权.&lt;/a>&lt;/p>
&lt;h2 id="webhook-授权">Webhook 授权&lt;a class="td-heading-self-link" href="#webhook-%e6%8e%88%e6%9d%83" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>官方文档：&lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/webhook/">https://kubernetes.io/docs/reference/access-authn-authz/webhook/&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Webhook&lt;/strong># WebHook 是一个 HTTP 回调：发生某些事情时调用的 HTTP POST；通过 HTTP POST 进行简单的事件通知。实现 WebHook 的 Web 应用程序会在发生某些事情时将消息发布到 URL。要了解有关使用 Webhook 模式的更多信息，请参阅 Webhook 模式。&lt;/p></description></item><item><title>Docs: Automation</title><link>https://desistdaydream.github.io/docs/12.AI/Automation/Automation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/12.AI/Automation/Automation/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Category:Automation">Wiki 分类，Automation&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Automation">Wiki, Automation&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Automation(自动化)&lt;/strong> 描述了一系列减少流程中人为干预的技术&lt;/p></description></item><item><title>Docs: Bash</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Terminal-%E4%B8%8E-Shell/Bash/Bash/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Terminal-%E4%B8%8E-Shell/Bash/Bash/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.gnu.org/software/bash/">GNU 官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Bash_(Unix_shell)">Wiki, Bash&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.man7.org/linux/man-pages/man1/bash.1.html#SHELL_BUILTIN_COMMANDS">Manual(手册)，bash(1)-Shell 内置命令&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://wangdoc.com/bash/index.html">网道，Bash 脚本教程&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Bourne Again Shell(简称 Bash)&lt;/strong> 是 Brian Fox 为 GNU 项目编写的 Unix Shell 和编程语言，作为 &lt;strong>Bourne shell(简称 sh)&lt;/strong> 的免费软件替代品，于 1989 年首次发布，已被用作绝大多数 Linux 发行版的默认登录 Shell。Bash 是 Linus Torvalds 在移植 GCC 到 Linux 时最先移植的程序之一。&lt;/p>
&lt;p>Bash 是一种 Shell，学习 Bash，其实也算是学习一种脚本式的编程语言，Bash 本身就是一种类似编译器似的存在。&lt;/p>
&lt;h1 id="bash-关联文件与配置">Bash 关联文件与配置&lt;a class="td-heading-self-link" href="#bash-%e5%85%b3%e8%81%94%e6%96%87%e4%bb%b6%e4%b8%8e%e9%85%8d%e7%bd%ae" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="全局配置文件对所有用户生效的配置">全局配置文件，对所有用户生效的配置&lt;a class="td-heading-self-link" href="#%e5%85%a8%e5%b1%80%e9%85%8d%e7%bd%ae%e6%96%87%e4%bb%b6%e5%af%b9%e6%89%80%e6%9c%89%e7%94%a8%e6%88%b7%e7%94%9f%e6%95%88%e7%9a%84%e9%85%8d%e7%bd%ae" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>/etc/environment&lt;/strong> # 系统的环境变量，所有登录方式都会加载的文件。&lt;/p>
&lt;p>&lt;strong>/etc/profile&lt;/strong> # 任何用户使用 shell 时都会加载的配置。linux 不推荐直接修改该文件。加载该配置时自动加载 /etc/profile.d/_.sh 的所有文件&lt;/p>
&lt;p>&lt;strong>/etc/bashrc&lt;/strong> # 常用于设置登录功能和命令别名。linux 不推荐直接修改该文件。加载该配置时自动加载 /etc/profile.d/_.sh 的所有文件&lt;/p>
&lt;p>&lt;strong>/etc/profile.d/*.sh&lt;/strong> # 类似于 include 的效果。通常用来创建自定义配置。&lt;/p>
&lt;p>在 &lt;strong>/etc/profile&lt;/strong> 和 &lt;strong>/etc/bashrc&lt;/strong> 中都会有如下代码块&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> i in /etc/profile.d/*.sh /etc/profile.d/sh.local &lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> -r &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000">$i&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000;font-weight:bold">-#*i&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span> !&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000">$-&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> . &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000">$i&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> . &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000">$i&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span> &amp;gt;/dev/null
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这段脚本的大致意思就是：遍历 /etc/profile.d 目录下所有以 .sh 结尾的文件和 sh.local 文件。判断它们是否可读（&lt;code>[ -r &amp;quot;$i&amp;quot;]&lt;/code>），如果可读，判断当前 Shell启动方式是不是交互式（&lt;code>$-&lt;/code> 中包含 i）的，如果是交互式的，在当前 Shell 进程中执行该脚本（&lt;code>. &amp;quot;$i&amp;quot;&lt;/code>，&lt;code>source &amp;quot;$i&amp;quot;&lt;/code> 的简写， Shell 的模块化方式），否则，也在当前 Shell 进程中执行该脚本，只不过将输出重定向到了 /dev/null 中。&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>${-#*i}&lt;/code> 这个表达式的意思是：从左向右，在 - 变量中找到第一个 i ，并截取 i 之后的子串。&lt;/p>
&lt;/blockquote>
&lt;h2 id="用户配置文件对部分用户生效的配置">用户配置文件，对部分用户生效的配置&lt;a class="td-heading-self-link" href="#%e7%94%a8%e6%88%b7%e9%85%8d%e7%bd%ae%e6%96%87%e4%bb%b6%e5%af%b9%e9%83%a8%e5%88%86%e7%94%a8%e6%88%b7%e7%94%9f%e6%95%88%e7%9a%84%e9%85%8d%e7%bd%ae" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;blockquote>
&lt;p>这些配置文件一般都定义在用户的家目录当中，所以当某一用户使用 shell 时，就会在其家目录中加载这些配置文件。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;strong>~/.bash_profile&lt;/strong> # 仅对当前用户有效。该配置文件会对 ~/.bashrc 进行判断，如果存在，则加载 ~/.bashrc。&lt;/li>
&lt;li>&lt;strong>~/.bash_login&lt;/strong> # 仅对当前用户有效。该配置文件会对 ~/.bashrc 进行判断，如果存在，则加载 ~/.bashrc。&lt;/li>
&lt;li>&lt;strong>~/.profile&lt;/strong> # 仅对当前用户有效。该配置文件会对 ~/.bashrc 进行判断，如果存在，则加载 ~/.bashrc。&lt;/li>
&lt;li>其他
&lt;ul>
&lt;li>&lt;strong>~/.bashrc&lt;/strong> # 仅对当前用户有效。该配置文件会对 /etc/bashrc 进行判断，如果存在，则加载 /etc/bashrc。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Note：&lt;/p>
&lt;ul>
&lt;li>仅在登录的第一次读取一次 bash 这些配置文件，如果在里面加了内容想让其实现，需要重新登录或者用 source FILE 命令来让更改的内容生效）&lt;/li>
&lt;li>用户登录时逐一加载 ~/.bash_profile、~/.bash_login、~/.profile。当任何一个文件存在时，都不再加载其余文件。&lt;/li>
&lt;li>为什么配置文件会有这么多分类呢？详见 《shell 的四种登录与交互模式》章节。不同模式，加载的配置文件是不同的&lt;/li>
&lt;li>这三个文件通常只会存在一个，并且在其中的代码中，包含了判断是否存在 ~/.bashrc 文件并执行的逻辑。&lt;/li>
&lt;/ul>
&lt;h1 id="登录与交互模式">登录与交互模式&lt;a class="td-heading-self-link" href="#%e7%99%bb%e5%bd%95%e4%b8%8e%e4%ba%a4%e4%ba%92%e6%a8%a1%e5%bc%8f" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>这里面的概念推荐有一定 Linux 基础了之，尤其是得真正明白 Shell 到底是什么之后再来看。&lt;/p>
&lt;p>首先，有几种对登录类型的描述：&lt;/p>
&lt;ul>
&lt;li>交互式：一个个地输入命令并及时查看它们的输出结果，整个过程都在跟 Shell 不停地互动。&lt;/li>
&lt;li>非交互式：运行一个 Shell 脚本 文件，让所有命令批量化、一次性地执行。&lt;/li>
&lt;li>登录式：需要输入用户名和密码才能使用。&lt;/li>
&lt;li>非登录式：直接可以使用。&lt;/li>
&lt;/ul>
&lt;p>这几种类型的不通组合，决定了运行 Shell 的模式&lt;/p>
&lt;p>当我们运行一个 Shell 之后，Shell 会选择下面 4 中模式之一，作为运行本次 Shell 的模式，&lt;strong>不同的模式，加载的配置文件是不同的&lt;/strong>。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>login + interactive # 登录交互。&lt;/strong>
&lt;ul>
&lt;li>首先读取并执行 /etc/profile。&lt;/li>
&lt;li>然后逐一加载 ~/.bash_profile、~/.bash_login、~/.profile。当任何一个文件存在时，都不再加载其余文件。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>login + non-interactive # 登录不交互。&lt;/strong>
&lt;ul>
&lt;li>与 登录交互 模式相同。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>non-login + interactive # 不登陆交互&lt;/strong>
&lt;ul>
&lt;li>直接加载 ~/.bashrc 文件&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>non-login + non-interactive # 不登陆不交互&lt;/strong>
&lt;ul>
&lt;li>与 不登录交互 模式相同&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="如何判断是否为交互式-shell-有两种方式">如何判断是否为交互式 Shell? 有两种方式&lt;a class="td-heading-self-link" href="#%e5%a6%82%e4%bd%95%e5%88%a4%e6%96%ad%e6%98%af%e5%90%a6%e4%b8%ba%e4%ba%a4%e4%ba%92%e5%bc%8f-shell-%e6%9c%89%e4%b8%a4%e7%a7%8d%e6%96%b9%e5%bc%8f" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>查看特殊变量 &lt;code>-&lt;/code> ，如果输出的值包含 &lt;code>i&lt;/code>，则是交互式，否则是非交互式&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#000">$-&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 比如下面的情况&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root@desistdaydream:~# ssh 172.19.42.248
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root@desistdaydream:~# &lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#000">$-&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>himBHs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 当使用 ssh 登录时，使用 -T 参数不分配终端，则 $- 没有 i&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root@desistdaydream:~# ssh -T 172.19.42.248
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#000">$-&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hBs
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>查看变量 PS1 是否为空，如果不为空，则是交互式，否则为非交互式&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#000">$PS1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note：这里需要对“交互式”这三个字进行一下说明。与平时理解的所谓交互式不太一样，这里面虽然人类还是可以与设备交互，但是依然称为“非交互式”。&lt;/p>
&lt;p>如何判断是否为登录式 Shell ?&lt;/p>
&lt;p>执行命令 shopt login_shell，如果 login_shell 的值为 on 表示登录式，为 off 表示非登录式。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># shopt login_shell&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>login_shell on
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="典型登录模式总结">典型登录模式总结&lt;a class="td-heading-self-link" href="#%e5%85%b8%e5%9e%8b%e7%99%bb%e5%bd%95%e6%a8%a1%e5%bc%8f%e6%80%bb%e7%bb%93" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>登陆机器后的第一个 shell：登录 + 交互&lt;/li>
&lt;li>通过 ssh 登陆到远程主机：登录 + 交互&lt;/li>
&lt;li>新启动一个 shell 进程，如运行 bash ：不登陆 + 交互&lt;/li>
&lt;li>执行脚本，如 bash script.sh ：不登陆 + 不交互&lt;/li>
&lt;li>运行头部有如 #!/usr/bin/env bash 的可执行文件，如 ./executable ：不登陆 + 不交互&lt;/li>
&lt;li>远程执行脚本，如 ssh user@remote script.sh ：不登陆 + 不交互&lt;/li>
&lt;li>远程执行脚本，同时请求控制台，如 ssh user@remote -t &amp;rsquo;echo $PWD&amp;rsquo; ：不登陆 + 交互&lt;/li>
&lt;li>在图形化界面中打开 terminal：不登陆 + 交互&lt;/li>
&lt;/ul>
&lt;h2 id="登录系统后可自动执行的配置文件">登录系统后可自动执行的配置文件&lt;a class="td-heading-self-link" href="#%e7%99%bb%e5%bd%95%e7%b3%bb%e7%bb%9f%e5%90%8e%e5%8f%af%e8%87%aa%e5%8a%a8%e6%89%a7%e8%a1%8c%e7%9a%84%e9%85%8d%e7%bd%ae%e6%96%87%e4%bb%b6" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>/etc/rc.local&lt;/p>
&lt;ul>
&lt;li>注意：centos7 的 rc.local 没有可执行权限，需要添加权限(chmod +x /etc/rc.d/rc.local)，否则无法使用&lt;/li>
&lt;li>官方推荐使用 &lt;a href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Systemd/Systemd.md">Systemd&lt;/a> 来管理启动脚本。而不是这种方式&lt;/li>
&lt;/ul>
&lt;p>Systemd # &lt;a href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Systemd/Systemd.md">Systemd&lt;/a>&lt;/p>
&lt;h1 id="在-bash-中执行命令">在 Bash 中执行命令&lt;a class="td-heading-self-link" href="#%e5%9c%a8-bash-%e4%b8%ad%e6%89%a7%e8%a1%8c%e5%91%bd%e4%bb%a4" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="source-程序">source 程序&lt;a class="td-heading-self-link" href="#source-%e7%a8%8b%e5%ba%8f" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>source 程序可以在当前 Shell 环境中从指定文件中读取并执行命令&lt;/p>
&lt;p>注意：该命令可以使当前环境的配置文件在此环境中立刻生效而不用重启机器&lt;/p>
&lt;p>作用：&lt;/p>
&lt;ul>
&lt;li>这个命令其实只是简单地读取脚本里面的语句依次在当前 shell 里面执行，没有建立新的子 shell。那么脚本里面所有新建、改变变量的语句都会保存在当前 shell 里面&lt;/li>
&lt;li>source 命令(从 C Shell 而来)是 bash shell 的内置命令。&lt;/li>
&lt;li>source(或点)命令通常用于重新执行刚修改的初始化文档。&lt;/li>
&lt;/ul>
&lt;p>应用实例：一般用于写在 shell 脚本中，通过 source 执行外部文件中是变量赋值，这样不建立子 shell 的话，外部文件中的变量就可以在该脚本启动的 shell 中引用&lt;/p>
&lt;p>&lt;strong>source [选项] FILENAME&lt;/strong> # 使环境变量立刻生效&lt;/p>
&lt;p>在当前 bash 环境下读取并执行 FileName 中的命令。该 filename 文件可以“无执行权限”&lt;/p>
&lt;p>EXAMPLE：&lt;/p>
&lt;ul>
&lt;li>source openrc admin admin # 运行 openrc 这个配置文件，把第一个参数 admin 和第二个参数 admin 送给 openrc 文件中的$1 和$2&lt;/li>
&lt;li>source .bash_profile #&lt;/li>
&lt;/ul>
&lt;h2 id="sh-和-bash-程序">sh 和 bash 程序&lt;a class="td-heading-self-link" href="#sh-%e5%92%8c-bash-%e7%a8%8b%e5%ba%8f" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>实际上，执行 sh 或者 bash 就是相当于打开新的子 shell，并在新的 shell 中执行后续的命令。只不过 bash 与 sh 是不同的 shell，内置的功能有一些细微的区别。&lt;/p>
&lt;p>作用:&lt;/p>
&lt;ul>
&lt;li>开启一个新的 shell，读取并执行 File 中的命令。该 file 可以“无执行权限”&lt;/li>
&lt;li>注：两者在执行文件时的不同，是分别用自己的 shell 来跑文件。
&lt;ul>
&lt;li>sh 使用“-n”选项进行 shell 脚本的语法检查，使用“-x”选项实现 shell 脚本逐条语句的跟踪&lt;/li>
&lt;li>可以巧妙地利用 shell 的内置变量增强“-x”选项的输出信息等。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>bash [OPTIONS] [File]&lt;/strong> #&lt;/p>
&lt;p>OPTIONS&lt;/p>
&lt;ul>
&lt;li>-n # 对指定文件进行语法检查&lt;/li>
&lt;li>-x # 打印出执行脚本的过程&lt;/li>
&lt;/ul>
&lt;h2 id="-语法">./ 语法&lt;a class="td-heading-self-link" href="#-%e8%af%ad%e6%b3%95" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>作用:&lt;/p>
&lt;ul>
&lt;li>打开一个子 shell 来读取并执行 FileName 中命令。&lt;/li>
&lt;li>注：运行一个 shell 脚本时会启动另一个命令解释器.&lt;/li>
&lt;li>每个 shell 脚本有效地运行在父 shell(parent shell)的一个子进程里. 这个父 shell 是指在一个控制终端或在一个 xterm 窗口中给你命令指示符的进程.shell 脚本也可以启动他自已的子进程. 这些子 shell(即子进程)使脚本并行地，有效率地地同时运行脚本内的多个子任务.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Syntax(语法)&lt;/strong>&lt;/p>
&lt;p>&lt;strong>./FileName&lt;/strong>&lt;/p>
&lt;h1 id="命令行补全">命令行补全&lt;a class="td-heading-self-link" href="#%e5%91%bd%e4%bb%a4%e8%a1%8c%e8%a1%a5%e5%85%a8" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Command-line_completion">Wiki, CommandLineCompletion&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Command Line Completion(命令行补全)&lt;/strong> 也称为 &lt;strong>tab completion&lt;/strong>，是命令行解释器的常见功能，在命令行中的程序，可以自动填充部分需要手动输入的命令。&lt;/p>
&lt;p>由 bash-completion 程序实现&lt;/p>
&lt;h1 id="bash-关联文件与配置-1">Bash 关联文件与配置&lt;a class="td-heading-self-link" href="#bash-%e5%85%b3%e8%81%94%e6%96%87%e4%bb%b6%e4%b8%8e%e9%85%8d%e7%bd%ae-1" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;strong>/etc/bash_completion.d/&lt;/strong> #&lt;/p>
&lt;p>&lt;strong>/usr/share/bash-completion/completions/&lt;/strong> # 各种程序补全功能所需文件的保存目录。&lt;/p></description></item><item><title>Docs: Blockchain</title><link>https://desistdaydream.github.io/docs/Blockchain/Blockchain/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/Blockchain/Blockchain/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Blockchain">Wiki, Blockchain&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.bilibili.com/video/BV1T34y117Y9">B 站，汪杰解惑 NFT-02&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>2008 年 10 月 31 日 《Bitconi: A Peer-to-Peer Electronic Cash System 》&lt;/p>
&lt;ul>
&lt;li>保证信息的完整性和真实性&lt;/li>
&lt;li>保证信息的不可否认性&lt;/li>
&lt;/ul>
&lt;h1 id="数字加密货币">数字加密货币&lt;a class="td-heading-self-link" href="#%e6%95%b0%e5%ad%97%e5%8a%a0%e5%af%86%e8%b4%a7%e5%b8%81" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>如何把狗狗币|柴犬币 shib|放在 imtoken 钱包和 metamask 狐狸钱包中？
&lt;ul>
&lt;li>这里教如何添加代币，如何添加钱包中的网络&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=Gn4FCh5DEvg">https://www.youtube.com/watch?v=Gn4FCh5DEvg&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>【狐狸钱包】一分钟学会，如何一键添加各种主网？
&lt;ul>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=f1JU8TGImA0">https://www.youtube.com/watch?v=f1JU8TGImA0&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>钱包&lt;/p>
&lt;ul>
&lt;li>MetaMask 钱包&lt;/li>
&lt;li>Coinbase Wallet 钱包&lt;/li>
&lt;li>imtoken 钱包&lt;/li>
&lt;/ul>
&lt;p>NFT 交易平台&lt;/p>
&lt;ul>
&lt;li>OpenSea&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Percentage Fee(版税)&lt;/strong> # 即提成的百分比。每次 NFT 交易时，最初的创建者会获得交易额的百分比的收入。&lt;/p>
&lt;p>&lt;strong>Gas Fee(气体费)&lt;/strong> # 铸造一个 NFT 是有成本的，需要向矿工支付 Gas Fee&lt;/p>
&lt;p>钱包中的网络：就是“链”也就是“区块链”的链。在各种链上，可以搜索在当钱链上的交易记录。&lt;/p>
&lt;h2 id="eth">ETH&lt;a class="td-heading-self-link" href="#eth" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>Etherscan&lt;/strong> 是以太坊网络的区块链浏览器。 该网站可用于搜索交易、区块、钱包地址、智能合约以及其它链上数据，属于最热门的以太坊区块链浏览器之一，免费向用户开放。 使用&lt;strong>Etherscan&lt;/strong>即可详细了解如何与区块链、其他钱包以及 DAapp 进行交互&lt;/p>
&lt;p>&lt;a href="https://etherscan.io/address/0xED783c0ee7444435d31555f0Ab23E30ac2d0a9Eb">https://etherscan.io/address/0xED783c0ee7444435d31555f0Ab23E30ac2d0a9Eb&lt;/a>&lt;/p>
&lt;h2 id="链">链&lt;a class="td-heading-self-link" href="#%e9%93%be" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>HECO # 火币的链&lt;/p>
&lt;ul>
&lt;li>火币的 区块链浏览器 &lt;a href="https://hecoinfo.com/">https://hecoinfo.com/&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Etherscan # 以太坊的链&lt;/p>
&lt;ul>
&lt;li>以太坊的 区块链浏览器 &lt;a href="https://etherscan.io/">https://etherscan.io/&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>StarkNet&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.starknet.io/en">https://www.starknet.io/en&lt;/a>&lt;/li>
&lt;li>该公链项目会不定期为向 GitHub 上 Star 数较多的项目提交过 PR 的开发者发送 STRK，称之为“空投奖励”。想要领取空投需要符合一定的条件，每次条件不定，时间不定。&lt;/li>
&lt;/ul>
&lt;h2 id="应用示例">应用示例&lt;a class="td-heading-self-link" href="#%e5%ba%94%e7%94%a8%e7%a4%ba%e4%be%8b" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>当我们从交易所中将各种数字货币提取到钱包中后，虽然可以看到交易已完成，但是我们在钱包中却看不到。&lt;/p>
&lt;p>这是因为，在我们提币时，需要填写一个“提币网络”，这个“提币网络”其实就是指的区块链中的“链”，对应的就是各个钱包中的“网络”。&lt;/p>
&lt;p>所以我们首先应该先为钱包添加对应交易的“链”。&lt;/p>
&lt;h3 id="添加链">添加链&lt;a class="td-heading-self-link" href="#%e6%b7%bb%e5%8a%a0%e9%93%be" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/lddbaw/1647499683695-dd622c13-b54a-4ff3-b643-63f616244c4e.png" alt="image.png">&lt;/p>
&lt;p>从对应的“链”找到其 URL，这里以火币的 HECO 链为例，从&lt;a href="https://hecoinfo.com/apis#rpc">这里&lt;/a>可以找到 HECO 的 Endpoint 与 链 ID&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/lddbaw/1647499855988-a4357488-abd5-436f-abb8-805f64774e9f.png" alt="image.png">&lt;/p>
&lt;p>然后将 Endpoint 和 链 ID 填入，即可在钱包中添加“链”&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/lddbaw/1647499879301-9ec3af5b-4d36-495b-ade5-41710057a624.png" alt="image.png">&lt;/p>
&lt;p>后续提币的操作时，我们选择的“提币网络”也要与“链”对应上才行，交易记录通常都是保存在交易双方所在的链上。&lt;/p>
&lt;h3 id="获取交易记录">获取交易记录&lt;a class="td-heading-self-link" href="#%e8%8e%b7%e5%8f%96%e4%ba%a4%e6%98%93%e8%ae%b0%e5%bd%95" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>在火币交易记录查到 &lt;code>交易ID&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/lddbaw/1647498496139-aa024459-ea29-47f5-b918-400007cd2539.png" alt="image.png">&lt;/p>
&lt;h3 id="获取代币的合约地址">获取代币的合约地址&lt;a class="td-heading-self-link" href="#%e8%8e%b7%e5%8f%96%e4%bb%a3%e5%b8%81%e7%9a%84%e5%90%88%e7%ba%a6%e5%9c%b0%e5%9d%80" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>在&lt;a href="https://hecoinfo.com/">火币链&lt;/a>页面搜索该交易&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/lddbaw/1647498548140-52d38f6c-0e7b-4a3b-89d8-2907bea8d3c9.png" alt="image.png">&lt;/p>
&lt;p>可以获取到交易细节，然后查看 Tokens Transferred 中的 &lt;code>For&lt;/code> 信息&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/lddbaw/1647498734107-01e68293-ec25-4b4d-9db8-1c5ca84a8552.png" alt="image.png">&lt;/p>
&lt;p>然后就可以获取到交易代币的合约地址&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/lddbaw/1647498797213-df1d9e0c-c2b7-466c-8936-58f930d053ab.png" alt="image.png">&lt;/p>
&lt;p>这个地址就是钱包中，添加自定义代币时，所使用的地址。&lt;/p>
&lt;ul>
&lt;li>USDT: 0xa71edc38d189767582c38a3145b5873052c3e47a&lt;/li>
&lt;li>DOGE: 0x40280E26A572745B1152A54D1D44F365DaA51618&lt;/li>
&lt;/ul>
&lt;h3 id="导入代币">导入代币&lt;a class="td-heading-self-link" href="#%e5%af%bc%e5%85%a5%e4%bb%a3%e5%b8%81" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>填入地址后，代币符号与小数精度将会自动出现&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/lddbaw/1647498857327-a04a31ff-ff5c-4e32-8809-8bcc8582bdd2.png" alt="image.png">&lt;/p>
&lt;h1 id="交易">交易&lt;a class="td-heading-self-link" href="#%e4%ba%a4%e6%98%93" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>TODO: 如何将自己转移至交易所？手续费怎么算？转移至交易所后兑换成 USDT 出售。&lt;/p></description></item><item><title>Docs: Bootloader</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Bootloader/Bootloader/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Bootloader/Bootloader/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Bootloader">Wiki, Bootloader&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Bootloader(引导加载程序)&lt;/strong> 是负责 &lt;a href="https://en.wikipedia.org/wiki/Booting">booting(引导)&lt;/a> 计算器的软件。通常也被称为 Bootstrap Loader、Bootstrap。&lt;/p>
&lt;p>当计算机关闭时，操作系统、应用程序代码和数据 ‍‌ 仍存储在非易失性存储器中。当计算机开机时，它通常没有操作系统或其随机存取存储器 (RAM) 中的加载程序。计算机首先执行存储在只读存储器（ROM，以及后来的 EEPROM、NOR 闪存）中的相对较小的程序以及一些需要的数据，以初始化 RAM（特别是在 x86 系统上），访问非易失性设备（通常是块设备，例如 NAND 闪存）或可以将操作系统程序和数据加载到 RAM 中的设备。&lt;/p>
&lt;h1 id="关联文件与配置">关联文件与配置&lt;a class="td-heading-self-link" href="#%e5%85%b3%e8%81%94%e6%96%87%e4%bb%b6%e4%b8%8e%e9%85%8d%e7%bd%ae" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;strong>/boot/&lt;/strong> # 所有关于系统引导启动的配置信息，都在该目录下&lt;/p>
&lt;p>&lt;strong>/boot/grub2/&lt;/strong> #&lt;/p>
&lt;p>&lt;strong>/etc/default/grub&lt;/strong> # TODO: 好像不同系统路径不同？这是啥？&lt;/p>
&lt;h1 id="引导管理命令行工具">引导管理命令行工具&lt;a class="td-heading-self-link" href="#%e5%bc%95%e5%af%bc%e7%ae%a1%e7%90%86%e5%91%bd%e4%bb%a4%e8%a1%8c%e5%b7%a5%e5%85%b7" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>grub2-*&lt;/p>
&lt;p>grubby&lt;/p>
&lt;p>grub2-mkconfig&lt;/p></description></item><item><title>Docs: BPF</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/BPF/BPF/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/BPF/BPF/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Berkeley_Packet_Filter">Wiki, BPF&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/iovisor/bcc/blob/master/docs/kernel-versions.md">GitHub 项目,bcc-BPF 特性与 LInux 内核版本对照表&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>《Linux 内核观测技术 BPF》&lt;/p>
&lt;p>&lt;strong>Berkeley Packet Filter(伯克利包过滤器，简称 BPF)&lt;/strong>，是类 Unix 系统上数据链路层的一种原始接口，提供原始链路层封包的收发。在 Kernel 官方文档中，BPF 也称为 &lt;strong>Linux Socket Filtering(LInux 套接字过滤，简称 LSF)&lt;/strong>。BPF 有时也只表示 &lt;strong>filtering mechanism(过滤机制)&lt;/strong>，而不是整个接口。&lt;/p>
&lt;p>&lt;strong>注意：不管是后面描述的 eBPF 还是 BPF，这个名字或缩写，其本身所表达的含义，其实已经没有太大的意义了，因为这个项目的发展远远超出了它最初的构想。&lt;/strong>&lt;/p>
&lt;p>在 BPF 之前，如果想做数据包过滤，则必须将所有数据包复制到用户空间中，然后在那里过滤它们，这种方式意味着必须将所有数据包复制到用户空间中，复制数据的开销很大。当然可以通过将过滤逻辑转移到内核中解决开销问题，我们来看 BPF 做了什么工作。&lt;/p>
&lt;p>实际上，BPF 最早称为 &lt;strong>BSD Packet Filter&lt;/strong>，是很早就有的 Unix 内核特性，最早可追溯到 1992 年发表在 USENIX Conference 上的一篇论文&lt;a href="http://www.tcpdump.org/papers/bpf-usenix93.pdf">《BSD 数据包过滤：一种新的用户级包捕获架构》&lt;/a>，这篇文章作者描述了他们如何在 Unix 内核实现网络数据包过滤，这种技术比当时最先进的数据包过滤技术快了 20 倍。这篇文章描述的 BPF 在数据包过滤上引入了两大革新：&lt;/p>
&lt;ul>
&lt;li>一个新的虚拟机设计，可以有效得工作在基于寄存器结构的 CPU 之上。&lt;/li>
&lt;li>应用程序使用缓存只复制与过滤数据包相关的数据，不会复制数据包的宿友信息。这样可以最大程度得减少 BPF 处理的数据。&lt;/li>
&lt;/ul>
&lt;p>随后，得益于如此强大的性能优势，所有 Unix 系统都将 BPF 作为网络包过滤的首选技术，抛弃了消耗更多内存和性能更差的原有技术实现。后来由于 BPF 的理念逐渐成为主流，为各大操作系统所接受，这样早期 &amp;ldquo;B&amp;rdquo; 所代表的 BSD 便渐渐淡去，最终演化成了今天我们眼中的 BPF(Berkeley Packet Filter)。&lt;/p>
&lt;p>比如我们熟知的 Tcpdump 程序，其底层就是依赖 BPF 实现的包过滤。我们可以在命令后面增加 ”-d“ 来查看 tcpdump 过滤条件的底层汇编指令。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># tcpdump -d &amp;#39;ip and tcp port 8080&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>000&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> ldh &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>12&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>001&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> jeq &lt;span style="color:#8f5902;font-style:italic">#0x800 jt 2 jf 12&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>002&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> ldb &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>23&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>003&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> jeq &lt;span style="color:#8f5902;font-style:italic">#0x6 jt 4 jf 12&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>004&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> ldh &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>20&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>005&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> jset &lt;span style="color:#8f5902;font-style:italic">#0x1fff jt 12 jf 6&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>006&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> ldxb 4*&lt;span style="color:#ce5c00;font-weight:bold">([&lt;/span>14&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;amp;&lt;/span>0xf&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>007&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> ldh &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>x + 14&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>008&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> jeq &lt;span style="color:#8f5902;font-style:italic">#0x1f90 jt 11 jf 9&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>009&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> ldh &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>x + 16&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>010&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> jeq &lt;span style="color:#8f5902;font-style:italic">#0x1f90 jt 11 jf 12&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>011&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> ret &lt;span style="color:#8f5902;font-style:italic">#262144&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>012&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> ret &lt;span style="color:#8f5902;font-style:italic">#0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>-dd 可以打印字节码&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># tcpdump -dd &amp;#39;ip and tcp port 8080&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span> 0x28, 0, 0, 0x0000000c &lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span> 0x15, 0, 10, 0x00000800 &lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span> 0x30, 0, 0, 0x00000017 &lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span> 0x15, 0, 8, 0x00000006 &lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span> 0x28, 0, 0, 0x00000014 &lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span> 0x45, 6, 0, 0x00001fff &lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span> 0xb1, 0, 0, 0x0000000e &lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span> 0x48, 0, 0, 0x0000000e &lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span> 0x15, 2, 0, 0x00001f90 &lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span> 0x48, 0, 0, 0x00000010 &lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span> 0x15, 0, 1, 0x00001f90 &lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span> 0x6, 0, 0, 0x00040000 &lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span> 0x6, 0, 0, 0x00000000 &lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>,
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="bpf-的进化">BPF 的进化&lt;a class="td-heading-self-link" href="#bpf-%e7%9a%84%e8%bf%9b%e5%8c%96" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>得益于 BPF 在包过滤上的良好表现，Alexei Starovoitov 对 BPF 进行彻底的改造，并增加了新的功能，改善了它的性能，这个新版本被命名为 &lt;strong>extended BPF(扩展的 BPF，简称 eBPF)&lt;/strong>，新版本的 BPF 全面兼容并扩充了原有 BPF 的功能。因此，将传统的 BPF 重命名为 &lt;strong>classical BPF(传统的 BPF，简称 cBPF)&lt;/strong>，相对应的，新版本的 BPF 则命名为 eBPF 或直接称为 BPF(&lt;strong>所以，我们现在所说的 BPF，大部分情况下就是指 eBPF&lt;/strong>)。Linux Kernel 3.18 版本开始实现对 eBPF 的支持。&lt;/p>
&lt;h1 id="ebpf-概述">eBPF 概述&lt;a class="td-heading-self-link" href="#ebpf-%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://ebpf.io/">eBPF 官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://kerneltravel.net/categories/ebpf/">某网站系列文章&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>extended Berkeley Packet Filter(扩展的 BPF，简称 eBPF)&lt;/strong> 起源于 BPF，是对 BPF 的扩展。&lt;a href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/BPF/eBPF.md">eBPF&lt;/a> 针对现代硬件进行了优化和全新的设计，使其生成的指令集比 cBPF 解释器生成的机器码更快。这个扩展版本还将 cBPF VM 中的寄存器数量从两个 32 位寄存器增加到 10 个 64 位寄存器。寄存器数量和寄存器宽度的增加为编写更复杂的程序提供了可能性，开发人员可以自由的使用函数参数交换更多的信息。这些改进使得 eBPF 比原来的 cBPF 快四倍。这些改进，主要还是对网络过滤器内部处理的 eBPF 指令集进行优化，仍然被限制在内核空间中，只有少数用户空间中的程序可以编写 BPF 过滤器供内核处理，比如 Tcpdump 和 Seccomp。&lt;/p>
&lt;p>除了上述的优化之外，eBPF 最让人兴奋的改进，是其向用户空间的开放。开发者可以在用户空间，编写 eBPF 程序，并将其加在到内核空间执行。虽然 eBPF 程序看起来更像内核模块，但与内核模块不同的是，eBPF 程序不需要开发者重新编译内核，而且保证了在内核不崩溃的情况下完成加载操作，着重强调了安全性和稳定性。BPF 代码的主要贡献单位主要包括 Cilium、Facebook、Red Hat 以及 Netronome 等。&lt;/p>
&lt;p>Linux Kernel 一直是实现 可观察性、网络、安全性 的理想场所。不幸的是，想要自定义这些实现通常是不切实际的，因为它需要更改内核源代码或加载内核模块，并导致彼此堆叠的抽象层。而 eBPF 的出现，让这一切成为可能，&lt;strong>eBPF 可以在 Linux 内核中运行沙盒程序，而无需更改内核源代码或加载内核模块&lt;/strong>。通过&lt;strong>使 Linux Kernel 可编程&lt;/strong>，基础架构软件可以利用现有的层，从而使它们更加智能和功能丰富，而无需继续为系统增加额外的复杂性层。&lt;/p>
&lt;p>也正由于此，eBPF 不再局限于网络的过滤，而且 eBPF 就相当于内核本身的代码，想象空间无限，并且热加载到内核，换句话说，一旦加载到内核，内核的行为就变了。所以，eBPF 带动了 安全性、应用程序配置/跟踪、性能故障排除 等等领域的新一代工具的开发，这些工具不再依赖现有的内核功能，而是在不影响执行效率或安全性的情况下主动重新编程运行时行为：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Networking(网络)&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Observability(可观测性)&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>Monitoring(监控)&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Tracing(跟踪)&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Profiling(分析)&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Security(安全)&lt;/strong>&lt;/li>
&lt;li>&lt;strong>等等，随着发展，eBPF 还可以实现更多!&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>可以这么说，BPF 的种种能力，实现了 &lt;strong>Software Define Kernel(软件定义内核)&lt;/strong>。&lt;/p>
&lt;h2 id="ebpf-与-内核模块-的对比">eBPF 与 内核模块 的对比&lt;a class="td-heading-self-link" href="#ebpf-%e4%b8%8e-%e5%86%85%e6%a0%b8%e6%a8%a1%e5%9d%97-%e7%9a%84%e5%af%b9%e6%af%94" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>在 Linux 观测方面，eBPF 总是会拿来与 kernel 模块方式进行对比，eBPF 在安全性、入门门槛上比内核模块都有优势，这两点在观测场景下对于用户来讲尤其重要。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>维度&lt;/th>
&lt;th>Linux 内核模块&lt;/th>
&lt;th>eBPF&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>kprobes/tracepoints&lt;/td>
&lt;td>支持&lt;/td>
&lt;td>支持&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>安全性&lt;/td>
&lt;td>可能引入安全漏洞或导致内核 Panic&lt;/td>
&lt;td>通过验证器进行检查，可以保障内核安全&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>内核函数&lt;/td>
&lt;td>可以调用内核函数&lt;/td>
&lt;td>只能通过 BPF Helper 函数调用&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>编译性&lt;/td>
&lt;td>需要编译内核&lt;/td>
&lt;td>不需要编译内核，引入头文件即可&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>运行&lt;/td>
&lt;td>基于相同内核运行&lt;/td>
&lt;td>基于稳定 ABI 的 BPF 程序可以编译一次，各处运行&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>与应用程序交互&lt;/td>
&lt;td>打印日志或文件&lt;/td>
&lt;td>通过 perf_event 或 map 结构&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>数据结构丰富性&lt;/td>
&lt;td>一般&lt;/td>
&lt;td>丰富&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>入门门槛&lt;/td>
&lt;td>高&lt;/td>
&lt;td>低&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>升级&lt;/td>
&lt;td>需要卸载和加载，可能导致处理流程中断&lt;/td>
&lt;td>原子替换升级，不会造成处理流程中断&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>内核内置&lt;/td>
&lt;td>视情况而定&lt;/td>
&lt;td>内核内置支持&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="ebpf-发展史">eBPF 发展史&lt;a class="td-heading-self-link" href="#ebpf-%e5%8f%91%e5%b1%95%e5%8f%b2" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>eBPF 是如何诞生的呢？我最初开始讲起。这里“最初”我指的是 2013 年之前。&lt;/p>
&lt;h2 id="2013">2013&lt;a class="td-heading-self-link" href="#2013" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="传统的流量控制工具和系统">传统的流量控制工具和系统&lt;a class="td-heading-self-link" href="#%e4%bc%a0%e7%bb%9f%e7%9a%84%e6%b5%81%e9%87%8f%e6%8e%a7%e5%88%b6%e5%b7%a5%e5%85%b7%e5%92%8c%e7%b3%bb%e7%bb%9f" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>回顾一下当时的 “SDN” 蓝图。&lt;/p>
&lt;ol>
&lt;li>当时有 OpenvSwitch（OVS）、&lt;code>tc&lt;/code>（Traffic control），以及内核中的 Netfilter 子系 统（包括 &lt;code>iptables&lt;/code>、&lt;code>ipvs&lt;/code>、&lt;code>nftalbes&lt;/code> 工具），可以用这些工具对 datapath 进行“ 编程”：。&lt;/li>
&lt;li>BPF 当时用于 &lt;code>tcpdump&lt;/code>，&lt;strong>在内核中尽量前面的位置抓包&lt;/strong>，它不会 crash 内核；此 外，它还用于 seccomp，&lt;strong>对系统调用进行过滤&lt;/strong>（system call filtering），但当时 使用的非常受限，远不是今天我们已经在用的样子。&lt;/li>
&lt;li>此外就是前面提到的 feature creeping 问题，以及 &lt;strong>tc 和 netfilter 的代码重复问题，因为这两个子系统是竞争关系&lt;/strong>。&lt;/li>
&lt;li>&lt;strong>OVS 当时被认为是内核中最先进的数据平面&lt;/strong>，但它最大的问题是：与内核中其他网 络模块的集成不好【译者注 1】。此外，很多核心的内核开发者也比较抵触 OVS，觉得它很怪。&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>【译者注 1】例如，OVS 的 internal port、patch port 用 tcpdump 都是 &lt;a href="http://arthurchiao.art/blog/ovs-deep-dive-4-patch-port/">抓不到包的&lt;/a>，排障非常不方便。&lt;/p>
&lt;/blockquote>
&lt;h3 id="ebpf-与-传统流量控制-的区别">eBPF 与 传统流量控制 的区别&lt;a class="td-heading-self-link" href="#ebpf-%e4%b8%8e-%e4%bc%a0%e7%bb%9f%e6%b5%81%e9%87%8f%e6%8e%a7%e5%88%b6-%e7%9a%84%e5%8c%ba%e5%88%ab" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>对比 eBPF 和这些已经存在很多年的工具：&lt;/p>
&lt;ol>
&lt;li>tc、OVS、netfilter 可以对 datapath 进行“编程”：但前提是 datapath 知道你想做什 么（but only if the datapath knows what you want to do）。
&lt;ul>
&lt;li>只能利用这些工具或模块提供的既有功能。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>eBPF 能够让你&lt;strong>创建新的 datapath&lt;/strong>（eBPF lets you create the datapath instead）。&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;ul>
&lt;li>eBPF 就是内核本身的代码，想象空间无限，并且热加载到内核；换句话说，一旦加 载到内核，内核的行为就变了。&lt;/li>
&lt;li>在 eBPF 之前，改变内核行为这件事情，只能通过修改内核再重新编译，或者开发内 核模块才能实现。&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>译者注&lt;/p>
&lt;h3 id="ebpf第一个巨型patch">eBPF：第一个（巨型）patch&lt;a class="td-heading-self-link" href="#ebpf%e7%ac%ac%e4%b8%80%e4%b8%aa%e5%b7%a8%e5%9e%8bpatch" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>描述 eBPF 的 RFC 引起了广泛讨论，但普遍认为侵入性太强了（改动太大）。&lt;/li>
&lt;li>另外，当时 nftables (inspired by BPF) 正在上升期，它是一个与 eBPF 有点类似的 BPF 解释器，大家不想同时维护两个解释器。&lt;/li>
&lt;/ul>
&lt;p>最终这个 patch 被拒绝了。
被拒的另外一个原因是前面提到的，没有遵循“大改动小提交”原则，全部代码放到了一个 patch。Linus 会疯的。&lt;/p>
&lt;h2 id="2014">2014&lt;a class="td-heading-self-link" href="#2014" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="第一个-ebpf-patch-合并到内核">第一个 eBPF patch 合并到内核&lt;a class="td-heading-self-link" href="#%e7%ac%ac%e4%b8%80%e4%b8%aa-ebpf-patch-%e5%90%88%e5%b9%b6%e5%88%b0%e5%86%85%e6%a0%b8" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>用一个&lt;strong>扩展（extended）指令集&lt;/strong>逐步、全面替换原来老的 BPF 解释器。&lt;/li>
&lt;li>&lt;strong>自动新老 BPF 转换&lt;/strong>：in-kernel translation。&lt;/li>
&lt;li>后续 patch 将 eBPF 暴露给 UAPI，并添加了 verifier 代码和 JIT 代码。&lt;/li>
&lt;li>更多后续 patch，从核心代码中移除老的 BPF。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/ksq56w/1617847999424-2c5e5133-2862-4574-bffb-0776c6b0aa4b.png" alt="">&lt;/p>
&lt;p>我们也从那时开始，顺理成章地成为了 eBPF 的 maintainer。&lt;/p>
&lt;h3 id="kubernetes-提交第一个-commit">Kubernetes 提交第一个 commit&lt;a class="td-heading-self-link" href="#kubernetes-%e6%8f%90%e4%ba%a4%e7%ac%ac%e4%b8%80%e4%b8%aa-commit" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>巧合的是，&lt;strong>对后来影响深远的 Kubernetes，也在这一年提交了第一个 commit&lt;/strong>：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/ksq56w/1617847999414-121919ac-67f3-4841-b2a0-c0bd1668c7bd.png" alt="">&lt;/p>
&lt;h2 id="2015">2015&lt;a class="td-heading-self-link" href="#2015" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="ebpf-分成两个方向networking--tracing">eBPF 分成两个方向：networking &amp;amp; tracing&lt;a class="td-heading-self-link" href="#ebpf-%e5%88%86%e6%88%90%e4%b8%a4%e4%b8%aa%e6%96%b9%e5%90%91networking--tracing" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>到了 2015 年，eBPF 开发分成了两个方向：&lt;/p>
&lt;ul>
&lt;li>networking&lt;/li>
&lt;li>tracing&lt;/li>
&lt;/ul>
&lt;h3 id="ebpf-backend-合并到-llvm-37">eBPF backend 合并到 LLVM 3.7&lt;a class="td-heading-self-link" href="#ebpf-backend-%e5%90%88%e5%b9%b6%e5%88%b0-llvm-37" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>这一年的一个重要里程碑是 eBPF backend 合并到了 upstream LLVM 编译器套件，因此你 现在才能用 clang 编译 eBPF 代码。&lt;/p>
&lt;h3 id="支持将-ebpf-attach-到-kprobes">支持将 eBPF attach 到 kprobes&lt;a class="td-heading-self-link" href="#%e6%94%af%e6%8c%81%e5%b0%86-ebpf-attach-%e5%88%b0-kprobes" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>这是 tracing 的第一个使用案例。
Alexei 主要负责 tracing 部分，他添加了一个 patch，支持加载 eBPF 用来做 tracing， 能获取系统的观测数据。&lt;/p>
&lt;h3 id="通过-cls_bpftc-变得完全可编程">通过 cls_bpf，tc 变得完全可编程&lt;a class="td-heading-self-link" href="#%e9%80%9a%e8%bf%87-cls_bpftc-%e5%8f%98%e5%be%97%e5%ae%8c%e5%85%a8%e5%8f%af%e7%bc%96%e7%a8%8b" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>我主要负责 networking 部分，使 tc 子系统可编程，这样我们就能用 eBPF 来灵活的对 datapath 进行编程，获得一个高性能 datapath。&lt;/p>
&lt;h3 id="为-tc-添加了一个-lockless-ingress--egress-hook-点">为 tc 添加了一个 lockless ingress &amp;amp; egress hook 点&lt;a class="td-heading-self-link" href="#%e4%b8%ba-tc-%e6%b7%bb%e5%8a%a0%e4%ba%86%e4%b8%80%e4%b8%aa-lockless-ingress--egress-hook-%e7%82%b9" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>译注：可参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://arthurchiao.art/blog/understanding-tc-da-mode-zh/">深入理解 tc ebpf 的 direct-action (da) 模式（2020）&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://arthurchiao.art/blog/advanced-bpf-kernel-features-for-container-age-zh/">为容器时代设计的高级 eBPF 内核特性（FOSDEM, 2021）&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h3 id="添加了很多-verifer-和-ebpf-辅助代码helper">添加了很多 verifer 和 eBPF 辅助代码（helper）&lt;a class="td-heading-self-link" href="#%e6%b7%bb%e5%8a%a0%e4%ba%86%e5%be%88%e5%a4%9a-verifer-%e5%92%8c-ebpf-%e8%be%85%e5%8a%a9%e4%bb%a3%e7%a0%81helper" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>使用更方便。&lt;/p>
&lt;h3 id="bcc-项目发布">bcc 项目发布&lt;a class="td-heading-self-link" href="#bcc-%e9%a1%b9%e7%9b%ae%e5%8f%91%e5%b8%83" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>作为 tracing frontend for eBPF。&lt;/p>
&lt;h2 id="2016">2016&lt;a class="td-heading-self-link" href="#2016" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="ebpf-添加了一个新-fast-pathxdp">eBPF 添加了一个新 fast path：XDP&lt;a class="td-heading-self-link" href="#ebpf-%e6%b7%bb%e5%8a%a0%e4%ba%86%e4%b8%80%e4%b8%aa%e6%96%b0-fast-pathxdp" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>XDP 合并到内核，支持在驱动的 ingress 层 attach BPF 程序。&lt;/li>
&lt;li>nfp 最为第一家网卡及驱动，支持将 eBPF 程序 offload 到 cls_bpf &amp;amp; XDP hook 点。&lt;/li>
&lt;/ul>
&lt;h3 id="cilium-项目发布">Cilium 项目发布&lt;a class="td-heading-self-link" href="#cilium-%e9%a1%b9%e7%9b%ae%e5%8f%91%e5%b8%83" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>Cilium 最开始的目标是 &lt;strong>docker 网络解决方案&lt;/strong>。&lt;/p>
&lt;ul>
&lt;li>通过 eBPF 实现高效的 label-based policy、NAT64、tunnel mesh、容器连通性。&lt;/li>
&lt;li>整个 datapath &amp;amp; forwarding 逻辑全用 eBPF 实现，不再需要 Docker 或 OVS 桥接设备。&lt;/li>
&lt;/ul>
&lt;h2 id="2017">2017&lt;a class="td-heading-self-link" href="#2017" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="ebpf-开始大规模应用于生产环境">eBPF 开始大规模应用于生产环境&lt;a class="td-heading-self-link" href="#ebpf-%e5%bc%80%e5%a7%8b%e5%a4%a7%e8%a7%84%e6%a8%a1%e5%ba%94%e7%94%a8%e4%ba%8e%e7%94%9f%e4%ba%a7%e7%8e%af%e5%a2%83" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>2016 ~ 2017 年，eBPF 开始应用于生产环境：&lt;/p>
&lt;ol>
&lt;li>Netflix on eBPF for tracing: ‘Linux BPF superpowers’&lt;/li>
&lt;li>Facebook 公布了生产环境 XDP+eBPF 使用案例（DDoS &amp;amp; LB）
&lt;ul>
&lt;li>用 XDP/eBPF 重写了原来基于 IPVS 的 L4LB，性能 &lt;code>10x&lt;/code>。&lt;/li>
&lt;li>&lt;strong>eBPF 经受住了严苛的考验&lt;/strong>：从 2017 开始，每个进入 facebook.com 的包，都是经过了 XDP &amp;amp; eBPF 处理的。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Cloudflare 将 XDP+BPF 集成到了它们的 DDoS mitigation 产品。
&lt;ul>
&lt;li>成功将其组件从基于 Netfilter 迁移到基于 eBPF。&lt;/li>
&lt;li>到 2018 年，它们的 XDP L4LB 完全接管生产环境。&lt;/li>
&lt;li>扩展阅读：&lt;a href="http://arthurchiao.art/blog/cloudflare-arch-and-bpf-zh/">(译) Cloudflare 边缘网络架构：无处不在的 BPF（2019）&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>译者注：基于 XDP/eBPF 的 L4LB 原理都是类似的，简单来说，&lt;/p>
&lt;ol>
&lt;li>通过 BGP 宣告 VIP&lt;/li>
&lt;li>通过 ECMP 做物理链路高可用&lt;/li>
&lt;li>通过 XDP/eBPF 代码做重定向，将请求转发到后端（VIP -&amp;gt; Backend）&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>对此感兴趣可参考入门级介绍：&lt;a href="http://arthurchiao.art/blog/k8s-l4lb/">L4LB for Kubernetes: Theory and Practice with Cilium+BGP+ECMP&lt;/a>&lt;/p>
&lt;h2 id="2017--2018">2017 ~ 2018&lt;a class="td-heading-self-link" href="#2017--2018" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="ebpf-成为内核独立子系统">eBPF 成为内核独立子系统&lt;a class="td-heading-self-link" href="#ebpf-%e6%88%90%e4%b8%ba%e5%86%85%e6%a0%b8%e7%8b%ac%e7%ab%8b%e5%ad%90%e7%b3%bb%e7%bb%9f" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>随着 eBPF 社区的发展，feature 和 patch 越来越多，为了管理这些 patch，Alexei、我和 networking 的一位 maintainer David Miller 经过讨论，决定将 eBPF 作为独立的内核子 系统。&lt;/p>
&lt;ul>
&lt;li>eBPF patch 合并到 &lt;code>bpf&lt;/code> &amp;amp; &lt;code>bpf-next&lt;/code> kernel trees on git.kernel.org&lt;/li>
&lt;li>拆分 eBPF 邮件列表：&lt;code>bpf@vger.kernel.org&lt;/code> (archive at: &lt;code>lore.kernel.org/bpf/&lt;/code>)&lt;/li>
&lt;li>eBPF PR 经内核网络部分的 maintainer David S. Miller 提交给 Linus Torvalds&lt;/li>
&lt;/ul>
&lt;h3 id="ktls--ebpf">kTLS &amp;amp; eBPF&lt;a class="td-heading-self-link" href="#ktls--ebpf" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>kTLS &amp;amp; eBPF for introspection and ability for in-kernel TLS policy enforcement&lt;/p>
&lt;/blockquote>
&lt;p>kTLS 是&lt;strong>将 TLS 处理 offload 到内核&lt;/strong>，例如，将加解密过程从 openssl 下放到内核进 行，以&lt;strong>使得内核具备更强的可观测性&lt;/strong>（gain visibility）。
有了 kTLS，就可以用 eBPF 查看数据和状态，在内核应用安全策略。 &lt;strong>目前 openssl 已经完全原生支持这个功能&lt;/strong>。&lt;/p>
&lt;h3 id="bpftool--libbpf">bpftool &amp;amp; libbpf&lt;a class="td-heading-self-link" href="#bpftool--libbpf" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>为了检查内核内 eBPF 的状态（introspection）、查看内核加载了哪些 BPF 程序等， 我们添加了一个新工具 bpftool。现在这个工具已经功能非常强大了。
同样，为了方便用户空间应用使用 eBPF，我们提供了&lt;strong>用户空间 API&lt;/strong>（user space API for applications） &lt;code>libbpf&lt;/code>。这是一个 C 库，接管了所有加载工作，这样用户就不需要 自己处理复杂的加载过程了。&lt;/p>
&lt;h3 id="bpf-to-bpf-function-calls">BPF to BPF function calls&lt;a class="td-heading-self-link" href="#bpf-to-bpf-function-calls" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>增加了一个 BPF 函数调用另一个 BPF 函数的支持，使得 BPF 程序的编写更加灵活。&lt;/p>
&lt;h2 id="2018">2018&lt;a class="td-heading-self-link" href="#2018" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="cilium-10-发布">Cilium 1.0 发布&lt;a class="td-heading-self-link" href="#cilium-10-%e5%8f%91%e5%b8%83" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>这标志着 &lt;strong>BPF 革命之火燃烧到了 Kubernetes networking &amp;amp; security 领域&lt;/strong>。
Cilium 此时支持的功能：&lt;/p>
&lt;ul>
&lt;li>K8s CNI&lt;/li>
&lt;li>Identity-based L3-L7 policy&lt;/li>
&lt;li>ClusterIP Services&lt;/li>
&lt;/ul>
&lt;h3 id="btfbyte-type-format">BTF（Byte Type Format）&lt;a class="td-heading-self-link" href="#btfbyte-type-format" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>内核添加了一个称为 BTF 的组件。这是一种元数据格式，和 DWARF 这样的 debugging data 类似。但 BTF 的 size 要小的多，而更重要的是，有史以来，&lt;strong>内核第一次变得可自 描述了&lt;/strong>（self-descriptive）。什么意思？
想象一下当前正在运行中的内核，它&lt;strong>内置了自己的数据格式&lt;/strong>（its own data format） 和&lt;strong>内部数据结构&lt;/strong>（internal structures），你能用工具来查看这些东西（you can introspect them）。还是不太懂？这么说吧，&lt;strong>BTF 是后来的 “一次编译、到处运行”、 热补丁（live-patching）、BPF global data 处理等等所有这些 BPF 特性的基础&lt;/strong>。
新的特性不断加入，它们都依赖 BTF 提供富元数据（rich metadata）这个基础。&lt;/p>
&lt;blockquote>
&lt;p>更多 BTF 内容，可参考 &lt;a href="http://arthurchiao.art/blog/cilium-bpf-xdp-reference-guide-zh/">(译) Cilium：BPF 和 XDP 参考指南（2019）&lt;/a>
译者注&lt;/p>
&lt;/blockquote>
&lt;h3 id="linux-plumbers-会议开辟-bpfxdp-主题">Linux Plumbers 会议开辟 BPF/XDP 主题&lt;a class="td-heading-self-link" href="#linux-plumbers-%e4%bc%9a%e8%ae%ae%e5%bc%80%e8%be%9f-bpfxdp-%e4%b8%bb%e9%a2%98" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>这一年，Linux Plumbers 会议第一次开辟了专门讨论 BPF/XDP 的微型分会，我们 一起组织这场会议。其中，Networking Track 一半以上的议题都涉及 BPF 和 XDP 主题，因为这是一个非常振奋人心的特性，越来越多的人用它来解决实际问题。&lt;/p>
&lt;h3 id="新-socket-类型af_xdp">新 socket 类型：AF_XDP&lt;a class="td-heading-self-link" href="#%e6%96%b0-socket-%e7%b1%bb%e5%9e%8baf_xdp" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>内核添加了一个&lt;strong>新 socket 类型&lt;/strong> &lt;code>AF_XDP&lt;/code>。它提供的能力是：&lt;strong>在零拷贝（ zero-copy）的前提下将包从网卡驱动送到用户空间&lt;/strong>。&lt;/p>
&lt;blockquote>
&lt;p>回忆前面的内容，数据包到达网卡后，先经过 XDP，然后才为这个包分配内存。 因此在 XDP 层直接将包送到用户态是无需拷贝的。
译者注&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>AF_XDP&lt;/code> 提供的能力与 &lt;a href="https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/DPDK/DPDK.md">DPDK&lt;/a> 有点类似，不过&lt;/p>
&lt;ul>
&lt;li>DPDK 需要&lt;strong>重写网卡驱动&lt;/strong>，需要额外维护&lt;strong>用户空间的驱动代码&lt;/strong>。&lt;/li>
&lt;li>&lt;code>AF_XDP&lt;/code> 在&lt;strong>复用内核网卡驱动&lt;/strong>的情况下，能达到与 DPDK 一样的性能。&lt;/li>
&lt;/ul>
&lt;p>而且由于&lt;strong>复用了内核基础设施，所有的网络管理工具还都是可以用的&lt;/strong>，因此非常方便， 而 DPDK 这种 bypass 内核的方案导致绝大大部分现有工具都用不了了。&lt;/p>
&lt;p>由于所有这些操作都是发生在 XDP 层的，因此它称为 &lt;code>AF_XDP&lt;/code>。插入到这里的 BPF 代码 能直接将包送到 socket。&lt;/p>
&lt;h3 id="bpffilter">bpffilter&lt;a class="td-heading-self-link" href="#bpffilter" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>开始了 bpffilter prototype，作用是通过用户空间驱动（userspace driver），&lt;strong>将 iptables 规则转换成 eBPF 代码&lt;/strong>。&lt;/p>
&lt;p>这是将 iptables 转换成 eBPF 的第一次尝试，整个过程对用户都是无感知的，其中的某些 组件现在还在用，用于在其他方面扩展内核的功能。&lt;/p>
&lt;h2 id="2018--2019">2018 ~ 2019&lt;a class="td-heading-self-link" href="#2018--2019" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="bpftrace">bpftrace&lt;a class="td-heading-self-link" href="#bpftrace" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>Brendan 发布了 bpftrace 工具，作为 DTrace 2.0 for Linux。&lt;/p>
&lt;h3 id="bpf-专著bpf-performance-tools">BPF 专著《BPF Performance Tools》&lt;a class="td-heading-self-link" href="#bpf-%e4%b8%93%e8%91%97bpf-performance-tools" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>Berendan 写了一本 800 多页的 BPF 书。&lt;/p>
&lt;h3 id="cilium-16-发布">Cilium 1.6 发布&lt;a class="td-heading-self-link" href="#cilium-16-%e5%8f%91%e5%b8%83" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>第一次支持完全干掉基于 iptables 的 kube-proxy，全部功能基于 eBPF。&lt;/p>
&lt;blockquote>
&lt;p>这个版本其实是有问题的，例如 1.6 发布之后我们发现 externalIPs 的实现是有问题 ，社区在后面的版本修复了这个问题。在修复之前，还是得用 kube-proxy： &lt;a href="https://github.com/cilium/cilium/issues/9285">https://github.com/cilium/cilium/issues/9285&lt;/a>
译者注&lt;/p>
&lt;/blockquote>
&lt;h3 id="bpf-live-patching">BPF live-patching&lt;a class="td-heading-self-link" href="#bpf-live-patching" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>添加了一些内核新特性，例如尾调用（tail call），这使得 &lt;strong>eBPF 核心基础 设施第一次实现了热加载&lt;/strong>。这个功能帮我们极大地优化了 datapath。
另一个重要功能是 BPF trampolines，这里就不展开了，感兴趣的可以搜索相关资料，我只 能说这是另一个振奋人心的技术。&lt;/p>
&lt;h3 id="第一次-bpfconf受邀请才能参加的-bpf-内核专家会议">第一次 bpfconf：受邀请才能参加的 BPF 内核专家会议&lt;a class="td-heading-self-link" href="#%e7%ac%ac%e4%b8%80%e6%ac%a1-bpfconf%e5%8f%97%e9%82%80%e8%af%b7%e6%89%8d%e8%83%bd%e5%8f%82%e5%8a%a0%e7%9a%84-bpf-%e5%86%85%e6%a0%b8%e4%b8%93%e5%ae%b6%e4%bc%9a%e8%ae%ae" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>如题，这是 BPF 内核专家交换想法和讨论问题的会议。与 Linux Plumbers 会议互补。&lt;/p>
&lt;h3 id="bpf-backend-合并到-gcc">BPF backend 合并到 GCC&lt;a class="td-heading-self-link" href="#bpf-backend-%e5%90%88%e5%b9%b6%e5%88%b0-gcc" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>前面提到，BPF backend 很早就合并到 LLVM/Clang，现在，它终于合并到 GCC 了。 至此，&lt;strong>GCC 和 LLVM 这两个最主要的编译器套件都支持了 BPF backend&lt;/strong>。
此外，BPF 开始支持有限循环（bounded loops），在此之前，是不支持循环的，以防止程 序无限执行。&lt;/p>
&lt;h2 id="2019--2020">2019 ~ 2020&lt;a class="td-heading-self-link" href="#2019--2020" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="不知疲倦的增长和-ebpf-的第三个方向linux-security-modules">不知疲倦的增长和 eBPF 的第三个方向：Linux security modules&lt;a class="td-heading-self-link" href="#%e4%b8%8d%e7%9f%a5%e7%96%b2%e5%80%a6%e7%9a%84%e5%a2%9e%e9%95%bf%e5%92%8c-ebpf-%e7%9a%84%e7%ac%ac%e4%b8%89%e4%b8%aa%e6%96%b9%e5%90%91linux-security-modules" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Google 贡献了 &lt;a href="https://www.kernel.org/doc/html/latest/bpf/bpf_lsm.html">BPF LSM&lt;/a>（安全），部署在了他们的数据中心服务器上。&lt;/li>
&lt;li>BPF verifier 防护 Spectre 漏洞（2018 年轰动世界的 CPU bug）：even verifying safety on speculative program paths。&lt;/li>
&lt;li>&lt;strong>主流云厂商开始通过 SRIOV 支持 XDP&lt;/strong>：AWS (ena driver), Azure (hv_netvsc driver), …&lt;/li>
&lt;li>Cilium 1.8 支持基于 XDP 的 Service 负载均衡和 host network policies。&lt;/li>
&lt;li>Facebook 开发了基于 BPF 的 TCP 拥塞控制模块。&lt;/li>
&lt;li>Microsoft 基于 BPF 重写了将他们的 Windows monitoring 工具。&lt;/li>
&lt;/ul></description></item><item><title>Docs: BPF 流量控制机制</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/BPF/BPF-%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6%E6%9C%BA%E5%88%B6/BPF-%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6%E6%9C%BA%E5%88%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/BPF/BPF-%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6%E6%9C%BA%E5%88%B6/BPF-%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6%E6%9C%BA%E5%88%B6/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>Kernel 网络官方文档：&lt;a href="https://www.kernel.org/doc/html/latest/networking/filter.html#">LInux Socket Filtering aka Berkeley Packet Filter&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>Docs: Browser</title><link>https://desistdaydream.github.io/docs/Web/Browser/Browser/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/Web/Browser/Browser/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Web_browser">Wiki, Web_browser&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>在访问一个网页时，除非收到 3XX 重定向的响应，否则浏览器地址栏中的地址是不会改变的。比如 Nginx 中的 rewrite 功能，如果不使用 &lt;strong>redirect&lt;/strong> 或 &lt;strong>permanent&lt;/strong> 标志，那么所有的 URL 改变都是针对 Nginx 内部来说的。&lt;/p>
&lt;h1 id="解决网页播放鼠标移开屏幕或点击屏外视频暂停播放">解决网页播放【鼠标移开屏幕或点击屏外视频暂停播放】&lt;a class="td-heading-self-link" href="#%e8%a7%a3%e5%86%b3%e7%bd%91%e9%a1%b5%e6%92%ad%e6%94%be%e9%bc%a0%e6%a0%87%e7%a7%bb%e5%bc%80%e5%b1%8f%e5%b9%95%e6%88%96%e7%82%b9%e5%87%bb%e5%b1%8f%e5%a4%96%e8%a7%86%e9%a2%91%e6%9a%82%e5%81%9c%e6%92%ad%e6%94%be" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>原文： &lt;a href="https://www.jianshu.com/p/945851ea95da">https://www.jianshu.com/p/945851ea95da&lt;/a>&lt;/p>
&lt;p>从网页的 F12 中，元素-事件监听器 中&lt;/p>
&lt;ul>
&lt;li>将【blur】所有内容【remove】掉&lt;/li>
&lt;li>单击【mouseout】左边的倒三角，将出现的子元素全部remove掉，&lt;/li>
&lt;li>将【mouseup】也用同样的操作移除掉子元素，现在就可以成功切换页面而不受限制啦!&lt;/li>
&lt;/ul>
&lt;p>（点击Remove要精准，remove会把blur清除，不会进入其他设置）&lt;/p>
&lt;p>注：可同时点开多个网页播放器并行播放不暂停，提高效率&lt;/p></description></item><item><title>Docs: C</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C/C/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C/C/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://www.open-std.org/jtc1/sc22/wg14/">ISO C 工作组官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.learn-c.org/">https://www.learn-c.org/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/C_(programming_language)">Wiki, C Programming Language&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://wangdoc.com/clang/">网道，C&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="hello-world">Hello World&lt;a class="td-heading-self-link" href="#hello-world" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>代码：&lt;code>hello_world.c&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#include&lt;/span> &lt;span style="color:#8f5902;font-style:italic">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">main&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">void&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">printf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Hello World&lt;/span>&lt;span style="color:#4e9a06">\n&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>编译&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ gcc hello_world.c
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ ./a.out
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Hello World
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>