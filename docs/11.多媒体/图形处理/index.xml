<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>图形处理 on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/11.%E5%A4%9A%E5%AA%92%E4%BD%93/%E5%9B%BE%E5%BD%A2%E5%A4%84%E7%90%86/</link><description>Recent content in 图形处理 on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/11.%E5%A4%9A%E5%AA%92%E4%BD%93/%E5%9B%BE%E5%BD%A2%E5%A4%84%E7%90%86/index.xml" rel="self" type="application/rss+xml"/><item><title>图形处理</title><link>https://desistdaydream.github.io/docs/11.%E5%A4%9A%E5%AA%92%E4%BD%93/%E5%9B%BE%E5%BD%A2%E5%A4%84%E7%90%86/%E5%9B%BE%E5%BD%A2%E5%A4%84%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/11.%E5%A4%9A%E5%AA%92%E4%BD%93/%E5%9B%BE%E5%BD%A2%E5%A4%84%E7%90%86/%E5%9B%BE%E5%BD%A2%E5%A4%84%E7%90%86/</guid><description>概述 参考：
手把手教你使用OpenCV库（附实例、Python代码解析） 公众号-差评，为了把游戏接口做进Windows，这位大佬干翻了微软的管理层。 计算机如何读取图像？ 思考以下图片：
我们可以认出它是纽约天际线的图片。 但是计算机可以自己发现这一切吗？答案是不！
计算机将任何图片都读取为一组 0 到 255 之间的值。
对于任何一张彩色图片，有三个主通道——红色(R)，绿色(G)和蓝色(B)。它的工作原理非常简单。
对每个原色创建一个矩阵，然后，组合这些矩阵以提供 R, G 和 B 各个颜色的像素值。
每一个矩阵的元素提供与像素的亮度强度有关的数据。
思考下图： 如图所示，图像的大小被计算为 B x A x 3。
注意：对于黑白图片，只有一个单一通道。
图形接口 有位叫 Eric Engstrom微软大佬去世了。这位老哥没有比尔盖茨这么大的名气，但要是没他，我们现在想要在夜之城夜夜笙歌，估计没那么容易。甚至说 Windows 电脑，可能还只是一台主要的生产力工具，就像苹果 Mac 一样。
DirectX Eric Engstrom 所创立的 DirectX 接口，把 PC 个人电脑，拽进了电子游戏的世界。让玩电脑游戏成为了一种游戏方式。
先是辛辛苦苦从3XM、游 X Sky上找到资源，然后冒着被老妈发现的危险，电脑挂一晚上把游戏下下来。
好不容易下完了解压好，兴奋的打开游戏的 exe 文件，正准备抄起鼠标大杀四方，系统却弹出了这么一个窗口。。。
这个文件其实是 DirectX 的驱动文件，重新装一下 DirectX 最新驱动就行了。
正版游戏在运行之前会有一个自检的环节，来确认电脑中是否有相关的驱动文件。
而上传盗版游戏的黑客，并不会把这部分自检程序放到压缩包里。
这样一来，用户在解压完游戏之后就会发生文件缺失的情况，需要自己去网上找到对应的文件把它补上。
没有 .dll 文件，游戏就跑不起来。
那个时候玩的单机游戏，从CS 、红警、魔兽争霸 3到GTA 罪恶都市、骑马与砍杀、文明 IV等等等等游戏，都是基于DirectX接口开发的。
DirectX的存在，覆盖了整个电脑游戏发展史。
那问题来了，为什么在电脑上的游戏离不开 DirectX 呢？</description></item><item><title>CPU与GPU到底有什么区别？</title><link>https://desistdaydream.github.io/docs/11.%E5%A4%9A%E5%AA%92%E4%BD%93/%E5%9B%BE%E5%BD%A2%E5%A4%84%E7%90%86/CPU%E4%B8%8EGPU%E5%88%B0%E5%BA%95%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/11.%E5%A4%9A%E5%AA%92%E4%BD%93/%E5%9B%BE%E5%BD%A2%E5%A4%84%E7%90%86/CPU%E4%B8%8EGPU%E5%88%B0%E5%BA%95%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/</guid><description>原文链接：公众号-码农的荒岛求生，CPU 与 GPU 到底有什么区别？
大家好，我是小风哥，今天简单聊聊 CPU 与 GPU。
CPU 的故事我们聊得比较多了，之前也发布过很多关于 CPU 的文章，因此这里重点聊聊 GPU。
教授 vs 小学生
你可以简单的将 CPU 理解为学识渊博的教授，什么都精通，而 GPU 则是一堆小学生，只会简单的算数运算，可即使教授再神通广大，也不能一秒钟内计算出 500 次加减法，因此对简单重复的计算来说单单一个教授敌不过数量众多的小学生，在进行简单的算数运算这件事上，500 个小学生(并发)可以轻而易举打败教授。
因此我们可以看到，CPU 和 GPU 的最大不同在于架构，CPU 适用于广泛的应用场景(学识渊博)，可以执行任意程序，而 GPU 则专为多任务而生，并发能力强，具体来讲就是多核，一般的 CPU 有 2 核、4 核、8 核等，而 GPU 则可能会有成百上千核：
可以看到，CPU 内部 cache 以及控制部分占据了很大一部分片上面积，因此计算单元占比很少，再来看看 GPU，GPU 只有很简单的控制单元，剩下的大部分都被计算单元占据，因此 CPU 的核数有限，而 GPU 则轻松堆出上千核：
只不过 CPU 中每个核的能力好比教授，而 GPU 的每个核的能力好比一个小学生。
你可能会想，为什么 GPU 需要这么奇怪的架构呢？
为什么 GPU 需要这么多核心？
想一想计算机上的一张图是怎么表示的？无非就是屏幕上的一个个像素：
我们需要为每个像素进行计算，而且是相同的运算，就好比刚才例子中的小学生计算计加法一样，注意，对于屏幕来说一般会有上百万个像素，如果我们要串行的为每一个像素进行运算效率就太低了，因此我们可以让 GPU 中的每一个核心去为相应的像素进行计算，由于 GPU 中有很多核心，因此并行计算可以大幅提高速度。
现在你应该明白为什么 GPU 要这样工作了吧。
除了 GPU 的核心数比较多之外，GPU 的工作方式也比较奇怪。</description></item></channel></rss>