<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – 7.信息安全</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/</link><description>Recent content in 7.信息安全 on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Access Control(访问控制)</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/access-control%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/access-control%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/</guid><description/></item><item><title>Docs: Bastion Host(堡垒机)</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/bastion-host%E5%A0%A1%E5%9E%92%E6%9C%BA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/bastion-host%E5%A0%A1%E5%9E%92%E6%9C%BA/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Bastion_host">Wiki,Bastion host&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>Docs: Cryptography(密码学)</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/cryptography%E5%AF%86%E7%A0%81%E5%AD%A6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/cryptography%E5%AF%86%E7%A0%81%E5%AD%A6/</guid><description/></item><item><title>Docs: Hacking</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/hacking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/hacking/</guid><description>
&lt;h1 id="名词解释">名词解释&lt;/h1>
&lt;p>补充一个小知识点，软件漏洞在英文里不是 Hole——孔洞，而是 &lt;strong>Vulnerability(脆弱性)&lt;/strong>，因为软件里的漏洞往往不会是一个明晃晃的“洞”，而是一个不起眼的“脆弱性”。&lt;/p>
&lt;p>&lt;strong>Robo Hacking Game(机器人网络安全大赛，简称 RHG)&lt;/strong> 是中国版的 CGC 大赛。&lt;/p>
&lt;p>&lt;strong>Cyber Grand Challenge(网络空间超级挑战赛，简称 CGC)&lt;/strong> 是 **Defense Advanced Research Projects Agency(国防高级研究计划局，简称 DARPA) **举办的比赛。&lt;/p>
&lt;h2 id="安全公司">安全公司&lt;/h2>
&lt;p>深信服
360
永信至诚&lt;/p></description></item><item><title>Docs: Standardized Glossary(标准化术语)</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/standardized-glossary%E6%A0%87%E5%87%86%E5%8C%96%E6%9C%AF%E8%AF%AD/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/standardized-glossary%E6%A0%87%E5%87%86%E5%8C%96%E6%9C%AF%E8%AF%AD/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://datatracker.ietf.org/doc/html/rfc4949">RFC 4949(互联网安全术语)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>**Entity(实体) **# 是任何存在的东西（anything that exists） —— 即使 只在逻辑或概念上存在（even if only exists logically or conceptually）。 例如，&lt;/p>
&lt;ul>
&lt;li>你的计算机是一个 entity，&lt;/li>
&lt;li>你写的代码也是一个 entity，&lt;/li>
&lt;li>你自己也是一个 entity，&lt;/li>
&lt;li>你吃的杂粮饼也是一个 entity，&lt;/li>
&lt;li>你六岁时见过的幽灵也是一个 entity —— 即使你妈告诉你幽灵并不存在，这只是你的臆想。&lt;/li>
&lt;li>所以
&lt;ul>
&lt;li>CA 也算一个实体&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Identity(身份)&lt;/strong> # 每个 entity（实体）都有一个 identity（身份）。 要精确定义这个概念比较困难，这么来说吧：identity 是使你之所以为你 （what makes you you）的东西。&lt;/p>
&lt;ul>
&lt;li>具体到计算机领域，identity 通常用一系列属性来表示，描述某个具体的 entity， 这里的属性包括 group、age、location、favorite color、shoe size 等等。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Identifier(身份标识符)&lt;/strong> # Identifier 跟 identity 还不是一个东西：每个 identifier 都是一个唯一标识符， 也唯一地关联到某个有 identity 的 entity。&lt;/p>
&lt;ul>
&lt;li>例如，我是 Mike，但 Mike 并不是我的 identity，而只是个 name —— 虽然二者在我们 小范围的讨论中是同义的。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Claim(声明) &amp;amp; Authentication(认证)&lt;/strong> #&lt;/p>
&lt;ul>
&lt;li>一个 entity 能 claim（声明）说，它拥有某个或某些 name。&lt;/li>
&lt;li>其他 entity 能够对这个 claim 进行认证（authenticate），以确认这份声明的真假。一般来说，认证的目的是确认某些 claim 的合法性。&lt;/li>
&lt;li>Claim 不是只能关联到 name，还可以关联到别的东西。例如，我能 claim 任何东西： my age, your age, access rights, the meaning of life 等等。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Subscriber &amp;amp; CA &amp;amp; relying party (RP)&lt;/strong> #&lt;/p>
&lt;ul>
&lt;li>能作为一个证书的 subject 的 entity，称为 subscriber（证书 owner）或 end entity。对应地，subscriber 的证书有时也称为 end entity certificates 或 leaf certificates， 原因在后面讨论 certificate chains 时会介绍。&lt;/li>
&lt;li>CA（certificate authority，证书权威）是给 subscriber 颁发证书的 entity，是一种 certificate issuer（证书颁发者）。CA 的证书，通常称为 root certificate 或 intermediate certificate，具体取决于 CA 类型。&lt;/li>
&lt;li>Relying party 是 使用证书的用户（certificate user），它验证由 CA 颁发（给 subscriber）的证书是否合法。一个 entity 可以同时是一个 subscriber 和一个 relying party。 也就是说，单个 entity 既有自己的证书，又使用其他证书来认证 remote peers， 例如双向 TLS（mutual TLS，mTLS）场景。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>key(密钥)&lt;/strong> # 在密码学中，是指某个用来完成加密、解密、完整性验证等密码学应用的秘密信息。对于加密算法，key 指定明文转换成密文；对于解密算法，key 指定密文转换成明文&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Plaintext/Cleartext(明文)&lt;/strong> # 在密码学中，明文是未加密的信息，可以供人类和计算机读取的信息&lt;/li>
&lt;li>**Ciphertext/Cyphertext(密文) **# 在密码学中，密文是明文通过加密算法计算后生成的人类或计算器无法读取的一种信息&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Key Generation(密钥生成)&lt;/strong> # &lt;a href="https://en.wikipedia.org/wiki/Key_generation">详见 Wiki&lt;/a>。密钥一般都是各种程序根据指定算法生成的。&lt;/p>
&lt;p>&lt;strong>Password(密码)&lt;/strong> 与 &lt;strong>Key(密钥) 的区别&lt;/strong> # 详见 &lt;a href="https://en.wikipedia.org/wiki/Key_(cryptography)">Wiki Key，Key vs Password&lt;/a>。&lt;/p>
&lt;ul>
&lt;li>对于大多数计算机安全目的和大多数用户而言，“密钥”与“密码”（或“密码短语”）并不相同，尽管实际上可以将密码用作密钥。密钥和密码之间的主要实际区别在于，密码和密码旨在由人类用户生成，读取，记住和再现（尽管用户可以将这些任务委托给密码管理软件）。相反，密钥旨在由实现密码算法的软件使用，因此不需要人类可读性等。实际上，大多数用户在大多数情况下甚至都不知道其日常软件应用程序的安全组件正在使用代表他们的密钥。&lt;/li>
&lt;li>如果 &lt;a href="https://en.wikipedia.org/wiki/Password">密码&lt;/a> 被用作加密密钥，然后在精心设计的密码系统就不会这样使用它自己。这是因为密码往往是人类可读的，因此可能不是特别强。作为补偿，一个好的加密系统将不使用_密码作为密钥_来执行主要的加密任务本身，而是充当&lt;a href="https://en.wikipedia.org/wiki/Key_derivation_function">密钥派生功能&lt;/a>（KDF）的输入。该 KDF 使用密码作为起点，然后它将从该起点本身生成实际的安全加密密钥。世代可以使用各种方法，例如添加盐和拉伸键。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Encoding(编码)&lt;/strong> # 将数据的原始格式，转换为便于存储的格式&lt;/p>
&lt;p>**Decoding(解码) **# 将存储的数据转换为原始格式以便使用&lt;/p>
&lt;p>&lt;strong>Encrypt(加密)&lt;/strong> # 使用 Key(密钥) 对信息进行编码的过程。&lt;/p>
&lt;p>&lt;strong>Decrypt(解密)&lt;/strong> # 使用 Key(密钥) 对信息进行解码的过程&lt;/p>
&lt;p>**Encoding(编码) 与 Encrypt(加密) 的区别 **#&lt;/p>
&lt;ul>
&lt;li>编码使用公开的方案，将数据转换为另一种格式，便于维护数据与传播。任何人都可以使用相同的编码规范，解码数据&lt;/li>
&lt;li>加密使用私密的方法，将数据抓换为另一种格式，着重于数据的保密。只有拥有相同 Key 的人才可以使用相同的加密规范，解密数据&lt;/li>
&lt;li>总结：编码和加密都是对格式的一种转换，但是它们是有区别的。&lt;strong>编码是公开的&lt;/strong>，比如 Base 64 编码，任何人都可以解码；&lt;strong>而加密则相反，你只希望自己或者特定的人才可以对内容进行解密。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Signature(签名)&lt;/strong> # 非对称加密中，使用私钥进行数字签名的行为。&lt;/p>
&lt;p>&lt;strong>Verifying(验证)&lt;/strong> # 非对称加密中，使用公钥验证数字签名的行为。&lt;/p>
&lt;p>&lt;strong>Digital Signature(数字签名)&lt;/strong> # &lt;a href="https://en.wikipedia.org/wiki/Digital_signature">详见 Wiki&lt;/a>**。**用于检验数字消息或文件的真实性的数学方案&lt;/p>
&lt;p>**Public Key Cryptography Standards(非对称密钥加密标准，简称 PKCS) **# &lt;a href="https://en.wikipedia.org/wiki/PKCS">详见 Wiki&lt;/a>。该标准指定了使用公开密钥加密技术时所应该遵守的标准&lt;/p>
&lt;p>&lt;strong>Public Key Infrastructure(非对称密钥基础设施，简称 PKI)&lt;/strong> # &lt;a href="https://en.wikipedia.org/wiki/Public_key_infrastructure">详见 Wiki&lt;/a>。一个包括硬件、软件、人员、策略和规程的集合，用来实现基于公钥密码体制的密钥和证书的产生、管理、存储、分发和撤销等功能。&lt;/p>
&lt;p>&lt;strong>Secure Hash Algorithm(安全哈希算法，简称 SHA)&lt;/strong> # &lt;/p></description></item><item><title>Docs: 管理工具</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</guid><description/></item><item><title>Docs: 什么鬼？</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E4%BB%80%E4%B9%88%E9%AC%BC/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E4%BB%80%E4%B9%88%E9%AC%BC/</guid><description>
&lt;p>要研究态势感知或安全运营中心，可以采用OSSIM
要研究入侵防御技术，可以采用Snort或Security Onion
要研究防火墙技术，可以采用pfSense或OPNsense
要研究Web应用防火墙（WAF ），可以采用ModSecurity
要研究威胁情报技术，可以采用MISP或OpenCTI
要研究漏洞扫描技术，可以采用OpenVAS或W3AF
要研究堡垒机技术，可以采用JumpServer
要研究蜜罐技术，可以采用T-Pot或Hfish&lt;/p></description></item></channel></rss>