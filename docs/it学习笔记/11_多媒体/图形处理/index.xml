<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – 图形处理</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/11_%E5%A4%9A%E5%AA%92%E4%BD%93/%E5%9B%BE%E5%BD%A2%E5%A4%84%E7%90%86/</link><description>Recent content in 图形处理 on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/11_%E5%A4%9A%E5%AA%92%E4%BD%93/%E5%9B%BE%E5%BD%A2%E5%A4%84%E7%90%86/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: 图形处理</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/11_%E5%A4%9A%E5%AA%92%E4%BD%93/%E5%9B%BE%E5%BD%A2%E5%A4%84%E7%90%86/%E5%9B%BE%E5%BD%A2%E5%A4%84%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/11_%E5%A4%9A%E5%AA%92%E4%BD%93/%E5%9B%BE%E5%BD%A2%E5%A4%84%E7%90%86/%E5%9B%BE%E5%BD%A2%E5%A4%84%E7%90%86/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.jiqizhixin.com/articles/2019-03-22-10">手把手教你使用OpenCV库（附实例、Python代码解析）&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="计算机如何读取图像">计算机如何读取图像？&lt;/h2>
&lt;p>思考以下图片：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/fhwfe4/1658568420855-b25fc9bb-0d76-4e6f-a1b7-f77be1aff1da.png" alt="image.png">&lt;/p>
&lt;p>我们可以认出它是纽约天际线的图片。 但是计算机可以自己发现这一切吗？答案是不！&lt;/p>
&lt;p>计算机将任何图片都读取为一组 0 到 255 之间的值。&lt;/p>
&lt;p>对于任何一张彩色图片，有三个主通道——红色(R)，绿色(G)和蓝色(B)。它的工作原理非常简单。&lt;/p>
&lt;p>对每个原色创建一个矩阵，然后，组合这些矩阵以提供 R, G 和 B 各个颜色的像素值。&lt;/p>
&lt;p>每一个矩阵的元素提供与像素的亮度强度有关的数据。&lt;/p>
&lt;p>思考下图：
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/fhwfe4/1658568420764-dd8cadc1-402a-49a6-bdff-ccb3e61ba2eb.png" alt="image.png">&lt;/p>
&lt;p>如图所示，图像的大小被计算为 B x A x 3。&lt;/p>
&lt;p>注意：对于黑白图片，只有一个单一通道。&lt;/p>
&lt;h1 id="gpu">GPU&lt;/h1>
&lt;h1 id="图形接口">图形接口&lt;/h1>
&lt;p>有位叫 &lt;strong>Eric Engstrom&lt;/strong>微软大佬去世了。这位老哥没有比尔盖茨这么大的名气，但要是没他，我们现在想要在夜之城夜夜笙歌，估计没那么容易。甚至说 Windows 电脑，可能还只是一台主要的生产力工具，就像苹果 Mac 一样。&lt;/p>
&lt;p>Eric Engstrom 所创立的 DirectX 接口，&lt;strong>把 PC 个人电脑，拽进了电子游戏的世界。&lt;strong>让&lt;/strong>玩电脑游戏&lt;/strong>成为了一种游戏方式。&lt;/p>
&lt;p>先是辛辛苦苦从&lt;strong>3XM&lt;/strong>、&lt;strong>游 X Sky&lt;/strong>上找到资源，然后冒着被老妈发现的危险，电脑挂一晚上把游戏下下来。&lt;/p>
&lt;p>好不容易下完了解压好，兴奋的打开游戏的 exe 文件，正准备抄起鼠标大杀四方，系统却弹出了这么一个窗口。。。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/scemn1/1616164698340-628dde5f-0dc1-40eb-a57c-7108250c0636.jpeg" alt="">&lt;/p>
&lt;p>这个文件其实是 DirectX 的驱动文件，重新装一下 DirectX 最新驱动就行了。&lt;/p>
&lt;p>正版游戏在运行之前会有一个自检的环节，来确认电脑中是否有相关的驱动文件。&lt;/p>
&lt;p>而上传盗版游戏的黑客，并不会把这部分自检程序放到压缩包里。&lt;/p>
&lt;p>这样一来，用户在解压完游戏之后就会发生文件缺失的情况，需要自己去网上找到对应的文件把它补上。&lt;/p>
&lt;p>&lt;strong>没有 .dll 文件，游戏就跑不起来。&lt;/strong>&lt;/p>
&lt;p>那个时候玩的单机游戏，从&lt;strong>CS 、红警、魔兽争霸 3&lt;/strong>到&lt;strong>GTA 罪恶都市、骑马与砍杀、文明 IV&lt;/strong>等等等等游戏，都是基于&lt;strong>DirectX&lt;/strong>接口开发的。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/scemn1/1616164698318-16b5b71b-5d9a-4041-b07d-1ce6ac2969ec.png" alt="">&lt;/p>
&lt;p>&lt;strong>DirectX&lt;/strong>的存在，覆盖了整个电脑游戏发展史。&lt;/p>
&lt;p>&lt;strong>那问题来了，为什么在电脑上的游戏离不开 DirectX 呢？&lt;/strong>&lt;/p>
&lt;p>要解答这个问题，我们得先了解一下图形 API 的发展历史。&lt;/p>
&lt;p>早期的软件开发没有统一标准，往往是一个新的硬件出来，程序员就得为它定制开发一套软件来用。&lt;/p>
&lt;p>&lt;strong>这就造成了硬件与硬件，软件与软件之间并不互通。&lt;/strong>&lt;/p>
&lt;p>比如《仙剑奇侠传》，想要在不同的平台上玩，就需要程序员适配三次。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/scemn1/1616164698352-49bfaa0e-3eff-4c9e-b3b2-c6e19b63fc23.png" alt="">&lt;/p>
&lt;p>基于此，在人类的原始生产力&lt;strong>懒&lt;/strong>的驱使下，程序员们发明出了 &lt;strong>Application Programming Interface(应用编程接口，简称 API)&lt;/strong> 。它的出现统一了所有的开发规范，解决了不同硬件需要适配的问题，大大节省了开发的成本。&lt;/p>
&lt;p>要是用统一的 API，就不需要重复开发了，直接适配。▼&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/scemn1/1616164698353-349c841a-d70a-4584-bc7c-f2c642bcfc94.png" alt="">&lt;/p>
&lt;h2 id="opengl">OpenGL&lt;/h2>
&lt;p>不过那时候率先登场的 API 的并不是 DirectX ，而是大名鼎鼎的 Glide 和 OpenGL ，还没微软什么事。&lt;/p>
&lt;p>Glide 的 API 标准是一家叫 3dfx 的显卡公司创立的，在英伟达崛起之前， 3dfx 的 Voodoo 系列显卡就是当初 3D 游戏的绝对标杆。&lt;/p>
&lt;p>不管是古早的《 DOOM 》、《古墓丽影》还是 FPS 始祖游戏《雷神之锤》，都体现出了 API 接口的巨大优势。原本分散的游戏开发者，都聚集到了统一的平台上来做游戏，人多力量大，无数的新技术和好游戏就源源不断的冒出来了。而微软这边一开始其实并不看好游戏领域，根本不想在游戏方面投资。&lt;/p>
&lt;p>一方面 Windows 95 系统做的也差不多了，随时准备发布，管理层觉得这时候再做一个游戏编程界面没有太大必要。另一方面从老的 MS-DOS 系统上转移到新的环境里开发，谁也不敢保证会怎么样。&lt;/p>
&lt;p>Eric Engstrom 看到了这上面的前景，自己偷偷拉了个三人的小团队，开发起了 DirectX ，顶着微软管理层的压力，把这个项目给做了下来。&lt;/p>
&lt;p>到了 1995 年 4 月， DirectX 正式发布，并在后面逐步融合进了 Windows 95 ，为微软打入游戏市场，立下了汗马功劳。&lt;/p>
&lt;p>有意思的是，在 Eric Engstrom 开发 DirectX 的过程中，不仅要面对技术上的难题，还要面临微软的上层百般阻挠，面对企业内斗。&lt;/p>
&lt;p>这个过程还被写成了一本名为《 Renegades of the Empire 》（《帝国叛逆者》）的书，记述下了那段时间微软内忧外患的处境。&lt;/p>
&lt;p>不过至少结果是好的， DirectX 在经过了几个版本的更新之后，已经稳坐了游戏图形 API 的头把交椅。&lt;/p>
&lt;p>而 Glide 和 OpenGL 却被命运开了玩笑，相继翻车，给 DirectX 占领市场提供了很大机会。&lt;/p>
&lt;p>Glide 翻车是因为 3dfx 的没落，支持 Glide 的游戏及设备越来越少，它不及 Windows 系统有这么多的开发者，又不开源，没多久就顶不住了。&lt;/p>
&lt;p>OpenGL 倒是开源的，不过因为内部意见不统一，它逐渐转向了专业图形领域的方向，渐渐弱化了游戏方面的更新。&lt;/p>
&lt;p>在更新到了 DirectX 9.0 之后，微软在图形 API 的领域，基本坐稳了龙头老大的位置。&lt;/p>
&lt;p>顺带一提，微软的 XBOX 主机用到的也是 DirectX ，这样一来，就形成了一个闭环，但凡厂商想要在主机平台和 PC 平台上开发游戏，就绕不过 DirectX 。&lt;/p>
&lt;p>随之而来的就是 N 卡和 A 卡长达 10 年的显卡大战，由于两边都要用到 DirectX 来优化，&lt;strong>微软的更新就成了制衡 N 、 A 两家发展的砝码。&lt;/strong>&lt;/p>
&lt;h2 id="vulkan">Vulkan&lt;/h2>
&lt;p>OpenGL 的母公司 Khronos 推出了自家的新图形 API &lt;strong>Vulkan&lt;/strong>，意欲动摇 DirectX 的传统优势地位。&lt;/p>
&lt;p>&lt;strong>Vulkan&lt;/strong> 作为一个搅局者，他的强势之处在于跨平台的兼容性，它能在 &lt;strong>Windows、Linux、Android&lt;/strong> 三个平台上开发，连接了电脑和手机端。&lt;/p>
&lt;p>在底层硬件的兼容方面，&lt;strong>Vulkan&lt;/strong> 会更好一些，游戏开发者能更彻底的榨干显卡的性能。&lt;/p>
&lt;p>&lt;strong>未来的竞争或许会更势均力敌一些。。。&lt;/strong>&lt;/p></description></item><item><title>Docs: CPU与GPU到底有什么区别？</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/11_%E5%A4%9A%E5%AA%92%E4%BD%93/%E5%9B%BE%E5%BD%A2%E5%A4%84%E7%90%86/cpu%E4%B8%8Egpu%E5%88%B0%E5%BA%95%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/11_%E5%A4%9A%E5%AA%92%E4%BD%93/%E5%9B%BE%E5%BD%A2%E5%A4%84%E7%90%86/cpu%E4%B8%8Egpu%E5%88%B0%E5%BA%95%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/</guid><description>
&lt;p>原文链接：&lt;a href="https://mp.weixin.qq.com/s/Vokg9qdQaWt3pPtWeHPkew">公众号-码农的荒岛求生，CPU 与 GPU 到底有什么区别？&lt;/a>
大家好，我是小风哥，今天简单聊聊 CPU 与 GPU。&lt;/p>
&lt;p>CPU 的故事我们聊得比较多了，之前也发布过很多关于 CPU 的文章，因此这里重点聊聊 GPU。&lt;/p>
&lt;p>&lt;strong>教授 vs 小学生&lt;/strong>&lt;/p>
&lt;p>你可以简单的将 CPU 理解为学识渊博的教授，什么都精通，而 GPU 则是一堆小学生，只会简单的算数运算，可即使教授再神通广大，也不能一秒钟内计算出 500 次加减法，&lt;strong>因此对简单重复的计算来说单单一个教授敌不过数量众多的小学生&lt;/strong>，在进行简单的算数运算这件事上，500 个小学生(并发)可以轻而易举打败教授。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/ada20417-f607-4763-9bff-f503a64ca4e5/640" alt="">&lt;/p>
&lt;p>因此我们可以看到，CPU 和 GPU 的最大不同在于架构，CPU 适用于广泛的应用场景(学识渊博)，可以执行任意程序，而 GPU 则专为多任务而生，并发能力强，具体来讲就是多核，一般的 CPU 有 2 核、4 核、8 核等，而 GPU 则可能会有成百上千核：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/ada20417-f607-4763-9bff-f503a64ca4e5/640" alt="">&lt;/p>
&lt;p>可以看到，CPU 内部 cache 以及控制部分占据了很大一部分片上面积，因此计算单元占比很少，再来看看 GPU，GPU 只有很简单的控制单元，剩下的大部分都被计算单元占据，因此 CPU 的核数有限，而 GPU 则轻松堆出上千核：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/ada20417-f607-4763-9bff-f503a64ca4e5/640" alt="">&lt;/p>
&lt;p>只不过 CPU 中每个核的能力好比教授，而 GPU 的每个核的能力好比一个小学生。&lt;/p>
&lt;p>你可能会想，为什么 GPU 需要这么奇怪的架构呢？&lt;/p>
&lt;h5 id="heading">&lt;/h5>
&lt;p>&lt;strong>为什么 GPU 需要这么多核心？&lt;/strong>&lt;/p>
&lt;p>想一想计算机上的一张图是怎么表示的？无非就是屏幕上的一个个像素：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/ada20417-f607-4763-9bff-f503a64ca4e5/640" alt="">&lt;/p>
&lt;p>我们需要为每个像素进行计算，&lt;strong>而且是相同的运算&lt;/strong>，就好比刚才例子中的小学生计算计加法一样，注意，对于屏幕来说一般会有上百万个像素，如果我们要串行的为每一个像素进行运算效率就太低了，因此我们可以让 GPU 中的每一个核心去为相应的像素进行计算，由于 GPU 中有很多核心，因此并行计算可以大幅提高速度。&lt;/p>
&lt;p>现在你应该明白为什么 GPU 要这样工作了吧。&lt;/p>
&lt;p>除了 GPU 的核心数比较多之外，GPU 的工作方式也比较奇怪。&lt;/p>
&lt;h5 id="heading-1">&lt;/h5>
&lt;p>&lt;strong>奇怪的工作方式&lt;/strong>&lt;/p>
&lt;p>对 CPU 来说，不同的核心可以执行不同的机器指令，coreA 在运行 word 线程的同时 coreB 上可以运行浏览器线程，这就是所谓的多指令多数据，MIMD，(Multiple Instruction, Multiple Data)。&lt;/p>
&lt;p>而 GPU 则不同，&lt;strong>GPU 上的这些核心必须整齐划一的运行相同的机器指令&lt;/strong>，只是可以操作不同的数据，这就好比这些小学生在某个时刻必须都进行加法计算，不同的地方在于有的小学生可能需要计算 1+1，有的要计算 2+6 等等，变化的地方仅在于操作数，这就是所谓的单指令多数据，SIMD，(Single Instruction, Multiple Data)。&lt;/p>
&lt;p>因此我们可以看到 GPU 的工作方式和 CPU 是截然不同的。&lt;/p>
&lt;p>除了这种工作方式之外，GPU 的指令集还非常简单，不像 CPU 这种复杂的处理器，如果你去看 CPU 的编程手册就会发现，CPU 负责的事情非常多：中断处理、内存管理、IO 等等，这些对于 GPU 来说都是不存在的，可以看到 GPU 的定位非常简单，就是纯计算，GPU 绝不是用来取代 CPU 的，CPU 只是把一些 GPU 非常擅长的事情交给它，GPU 仅仅是用来分担 CPU 工作的配角。&lt;/p>
&lt;p>CPU 和 GPU 是这样配合工作的：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/ada20417-f607-4763-9bff-f503a64ca4e5/640" alt="">&lt;/p>
&lt;h5 id="heading-2">&lt;/h5>
&lt;p>&lt;strong>GPU 擅长什么&lt;/strong>&lt;/p>
&lt;p>比较适合 GPU 的计算场景是这样的：1)计算简单；2）重复计算，因此如果你的计算场景和这里的图像渲染相似那么使用 GPU 就很合理了。&lt;/p>
&lt;p>因此对于图形图像计算、天气预报以及神经网络等都适用于 GPU，哦对了，GPU 还适合用来挖矿。&lt;/p></description></item><item><title>Docs: Linux 图形处理</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/11_%E5%A4%9A%E5%AA%92%E4%BD%93/%E5%9B%BE%E5%BD%A2%E5%A4%84%E7%90%86/linux-%E5%9B%BE%E5%BD%A2%E5%A4%84%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/11_%E5%A4%9A%E5%AA%92%E4%BD%93/%E5%9B%BE%E5%BD%A2%E5%A4%84%E7%90%86/linux-%E5%9B%BE%E5%BD%A2%E5%A4%84%E7%90%86/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;h1 id="xorg-x11-wayland-linux-display-servers-and-protocols-explained">Xorg, X11, Wayland? Linux Display Servers And Protocols Explained&lt;/h1>
&lt;p>原文链接：&lt;a href="https://linuxiac.com/xorg-x11-wayland-linux-display-servers-and-protocols-explained/">https://linuxiac.com/xorg-x11-wayland-linux-display-servers-and-protocols-explained/&lt;/a>
&lt;strong>Have you ever wondered what exactly X server, Xorg, X11, Wayland and stuff like that does? Wayland vs Xorg, what is better? This guide is for you.&lt;/strong>
You always stumble upon those terms, and know they have something to do regarding the graphics, but you’d like to know more.&lt;/p>
&lt;h3 id="what-is-display-server-in-linux">What is display server in Linux?&lt;/h3>
&lt;p>A display server  is a program whose primary task is to coordinate the input and output of its clients to and from the rest of the operating system, the hardware, and each other. The display server communicates with its clients over the display server protocol.
The display server is a key component in any graphical user interface, specifically the windowing system. It is the basic component of Graphical User Interface (GUI) which sits between the graphical interface and the kernel. So, thanks to a display server, you can use your computer with GUI. Without it, you would only be restricted to a command line interface.
It is very important to not confuse display server with desktop environment. The desktop environments (&lt;a href="https://linuxiac.com/gnome-3-38-is-here-with-new-app-grid-and-better-performence/">Gnome&lt;/a>, KDE, Xfce, MATE, etc.) uses display server underneath it.
The display server communicates with its clients over the display server protocol. There are three display server protocols available in Linux. X11 and Wayland are two of them. The third, &lt;a href="https://mir-server.io/">Mir&lt;/a>, is beyond the scope of this tutorial.&lt;/p>
&lt;h3 id="x-window-system-xorg-x11-explained">X Window System, Xorg, X11, explained&lt;/h3>
&lt;p>X Window System, often referred to merely as X, is really old. First originating in 1984, it ended up being the default windowing system for most UNIX-like operating systems, including Linux.
&lt;strong>X.Org server&lt;/strong> is the free and open-source implementation of the X Window System display server stewarded by the &lt;a href="https://www.x.org/">X.Org Foundation&lt;/a>. It is an application that interacts with client applications via the X11 protocol to draw things on a display and to send input events like mouse movements, clicks, and keystrokes. Typically, one would start an X server which will wait for clients applications to connect to it. Xorg is based on a client/server model and thus allows clients to run either locally or remotely on a different machine.
If it’s not obvious, it’s implicit in the design of X11 that the application and the display don’t have to be on the same computer. At the time X was developed, it was very common that the X server would run on a workstation and the users would run applications on a remote computer with more processing power.
&lt;strong>X11&lt;/strong> is a network protocol. It describes how messages are exchanged between a client (application) and the display (server). These messages typically carry primitive drawing commands like “draw a box”, “write these character at this position”, “the left mouse button has been clicked”, etc.
But X11 is old, and it was still a pile of hacks sitting on top of a protocol not truly overhauled for over 30 years. Most of the features that the X Server protocol provided were not used anymore. Pretty much all of the work that X11 did was redelegated to the individual applications and the window manager. And yet all of those old features are still there, weighing down on all of these applications, hurting performance and security.&lt;/p>
&lt;h3 id="wayland-the-next-generation-display-server">Wayland, the next-generation display server&lt;/h3>
&lt;p>&lt;strong>Wayland&lt;/strong> was begun by Kristian Hogsberg, an X.Org developer, as a personal project in 2008. &lt;a href="https://wayland.freedesktop.org/">It is a communication protocol&lt;/a> that specifies the communication between a display server and its clients. Wayland is developed as a free and open-source community-driven project with the aim of replacing the X Window System (also known as X11, or Xorg ) with a modern, secure, and simpler windowing system.
In Wayland, the compositor is the display server. &lt;strong>Compositor&lt;/strong>, is a window manager that provides applications with an off-screen buffer for each window. The window manager composites the window buffers into an image representing the screen and writes the result into the display memory.
The Wayland protocol lets the compositor send the input events directly to the clients and lets the client send the damage event directly to the compositor.
As in the X case, when the client receives the event it updates the user interface (UI) in response. But, in the Wayland rendering happens in the client, and the client just sends a request to the compositor to indicate the region that was updated.
Wayland’s main advantage over X is that it is starting from scratch. One of the main reasons for X’s complexity is that, over the years, its role has changed. As a result, today, X11 acts largely as “a really terrible” communications protocol between the client and the window manager.
Wayland is also superior when it comes to security. With X11, it’s possible to do something known as “keylogging” by allowing any program to exist in the background and read what’s happening with other windows open in the X11 area. With Wayland this simply won’t happen, as each program works independently.&lt;/p>
&lt;h3 id="conclusion">Conclusion&lt;/h3>
&lt;p>However, the X Window System still has many advantages over Wayland. Even though Wayland eliminates most of the design flaws of the Xorg it has its own issues. Even though the Wayland project has been up for more than ten years things are not 100% stable. As of 2020, the majority of video games and graphics-intensive applications for Linux are still written for X11. Also, many closed-source graphics drivers, such as those for NVIDIA GPUs, do not yet offer complete support for Wayland.
X cannot last and Wayland, in many ways, is an improvement. But for now the vast majority of native applications that exist were written for Xorg. Until those apps are all ported, Xorg needs to be maintained. Wayland is not very stable yet, compared to Xorg.&lt;/p></description></item></channel></rss>