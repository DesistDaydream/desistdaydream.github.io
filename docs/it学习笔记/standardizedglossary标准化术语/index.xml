<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – StandardizedGlossary(标准化术语)</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/standardizedglossary%E6%A0%87%E5%87%86%E5%8C%96%E6%9C%AF%E8%AF%AD/</link><description>Recent content in StandardizedGlossary(标准化术语) on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/standardizedglossary%E6%A0%87%E5%87%86%E5%8C%96%E6%9C%AF%E8%AF%AD/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Agent 与 Proxy</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/standardizedglossary%E6%A0%87%E5%87%86%E5%8C%96%E6%9C%AF%E8%AF%AD/agent-%E4%B8%8E-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/standardizedglossary%E6%A0%87%E5%87%86%E5%8C%96%E6%9C%AF%E8%AF%AD/agent-%E4%B8%8E-proxy/</guid><description>
&lt;p>今天，在阅读 Jolokia 文档的时候，看到其支持两种架构模式： Agent Mode 与 Proxy Mode。从字面上理解，agent 与 proxy 都有代理的意思，那么它们在内涵上到底有什么不同的，值得思考。&lt;/p>
&lt;p>Agent Mode
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gu5xfp/1621662188213-22f409de-8912-4cb1-8722-b96d628694b6.png" alt="">&lt;/p>
&lt;p>Proxy Mode
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gu5xfp/1621662192171-21f74acf-2333-4edd-859d-cc8aba728428.png" alt="">
从上面两张图可以看出，Proxy 与 Agent 所处的位置和目的有所不同，Agent 处在被代理对象的内部，而 Proxy 与被代理对象之间处于一种相对独立的状态。&lt;/p>
&lt;p>举个例子，Proxy 类似于会计事务所，而 Agent 类似于公司里做会计工作的员工，它们都是处理企业的财务问题，但是角色不同。
————————————————
版权声明：本文为 CSDN 博主「墨城之左」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。
原文链接：&lt;a href="https://blog.csdn.net/antony1776/article/details/107835249">https://blog.csdn.net/antony1776/article/details/107835249&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://link.zhihu.com/?target=http%3A//blog.csdn.net/wl_fln/article/details/6444340">Proxy 和 Agent 区别&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>Agent 代理 通常指与用户接口的客户端程序
Proxy 代理 接收用户请求并将请求发给服务器,然后接收服务器回应并返回给用户 实际上 Proxy 的功能就是代替用户访问服务器,用户被隐藏.&lt;/p>
&lt;/blockquote>
&lt;p>作者：koooo
链接：&lt;a href="https://www.zhihu.com/question/28555646/answer/681545931">https://www.zhihu.com/question/28555646/answer/681545931&lt;/a>
来源：知乎
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。&lt;/p>
&lt;h2 id="the-etymology-of-agent-and-proxy-in-computer-networking-discourse">The Etymology of &amp;ldquo;Agent&amp;rdquo; and &amp;ldquo;Proxy&amp;rdquo; in Computer Networking Discourse&lt;/h2>
&lt;p>&lt;em>September 18, 1998.&lt;/em> &lt;em>&lt;a href="https://link.zhihu.com/?target=mailto%3A//reagle%40mit.edu">Joseph Reagle&lt;/a>&lt;/em>
Revised: January 15, 1999 .
Given that the topic of this paper addresses both computer and legal agency, we believe an examination of the usage of the terms &amp;ldquo;agent&amp;rdquo; and &amp;ldquo;proxy&amp;rdquo; within each field is instructive. The technical use of the term _&lt;a href="https://link.zhihu.com/?target=http%3A//ai.miningco.com/">agent&lt;/a>_can be characterized into three overlapping periods. During the &lt;a href="https://link.zhihu.com/?target=http%3A//ai.miningco.com/library/weekly/aa080397.htm">earliest period&lt;/a> (1960 onward) the term was used by the artificial intelligence community. During the same period, the community of Internet network designers used the term in a way similar to our own: a service that acted on the behalf of another. Finally, the 1990&amp;rsquo;s has been the decade of the agents: where the concept of potentially intelligent, autonomous computer programs that interact with each other within a networked community is hyped. It was also during this latter period that the term &lt;em>proxy&lt;/em> became widely used.
The technical concept of an agent was apparently first used in the artificial intelligence community in 1959 to describe the constituents (agents or demons) of a larger self-organizing behavior. [RR, Self] However, within AI its usage did not always relate to computer programs, but to linguistic analysis, particularly in Fillmore&amp;rsquo;s case grammar [Fill]:
An agent is one who performs a particular action and this can be reflected in &amp;gt; &lt;em>syntax&lt;/em>. In English, in an active sentence, the agent is usually referred to by the subject&amp;hellip;. A form used to indicate the agent is called &amp;lsquo;agentive.&amp;rsquo; In case grammar, agentive or agent is one of the specified sets of cases. [Bear]
Agents were the subject of papers on intelligent information sharing systems and artificial intelligence throughout the 70 and 80s&amp;rsquo;. Occasionally, IT related papers used the term as any other discipline would, such as &amp;ldquo;Computers as an Agent of Change.&amp;rdquo; [Dieb]. Consequently, the use of the term to denote an initiator of action both within the AI/linguistic community and its typical English usage led the term to be used as a substitute of the term &amp;ldquo;program&amp;rdquo; when the connotation of autonomy and network interaction were required.
&amp;lt;&amp;gt; &lt;a href="https://link.zhihu.com/?target=http%3A//wombat.doc.ic.ac.uk/foldoc/contents/networking.html">networking&lt;/a>&amp;gt; In the &amp;gt; &lt;a href="https://link.zhihu.com/?target=http%3A//wombat.doc.ic.ac.uk/foldoc/foldoc.cgi%3Fclient-server">client-server&lt;/a> model, the part of the system that performs information preparation and exchange on behalf of a &amp;gt; &lt;a href="https://link.zhihu.com/?target=http%3A//wombat.doc.ic.ac.uk/foldoc/foldoc.cgi%3Fclient">client&lt;/a> or &amp;gt; &lt;a href="https://link.zhihu.com/?target=http%3A//wombat.doc.ic.ac.uk/foldoc/foldoc.cgi%3Fserver">server&lt;/a>. Especially in the phrase &amp;ldquo;intelligent agent&amp;rdquo; it implies some kind of automatic process which can communicate with other agents to perform some collective task on behalf of one or more humans. [&amp;gt; &lt;a href="https://link.zhihu.com/?target=http%3A//wombat.doc.ic.ac.uk/foldoc/index.html">Free On-line Dictionary of Computing&lt;/a>]
While computer agents were the subject of papers for nearly two decades, it was in the 1990&amp;rsquo;s that the term became worthy of appearing in the title. Previously, the key words of related publications were information sharing, computer mediation, collaboration, and cooperation. [Wood] Starting in 1994, specific venues for agent research and discussion, [EWMA, CIKM] as well as a special issue of the Communications of the ACM placed the term prominently in popular discourse. [Comm]
One of the best sources of information on how the terms &lt;em>agents&lt;/em> and &lt;em>proxies&lt;/em> came to be used in the context of the Internet and Web is the IETF&amp;rsquo;s Request for Comments (RFC) archive. While the first occurrence of _agent&lt;em>in an RFC was administrative, [RFC95] its technical debut was instructive in its use with respect to qualifying an agent as a program that resides on and communicates with other programs on a network.
The above premise is that the program (or agent) is doing the communicating with an NCP and thus needs to be identified for message traffic routing from an NCP. [RFC129]
During the 70&amp;rsquo;s at the IETF the only other time _agent&lt;/em> was used in a technical sense was to refer to refer to the sender of an email. [RFC733] However, in 1980, with the arrival of the Transmission Control Protocol (TCP) [RFC761, RFC793] its usage was firmly established as a keyword in network protocol vernacular.
By 1987, the Internet TCP/IP protocol had matured sufficiently that the larger issue of network architecture and management became a focus of work at the IETF. Three critical RFCs related to this work include:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://link.zhihu.com/?target=http%3A//info.internet.isi.edu/in-notes/rfc/files/rfc1067.txt">RFC1067&lt;/a> &amp;ndash; Simple Network Management Protocol. [RFC1067]&lt;/li>
&lt;li>&lt;a href="https://link.zhihu.com/?target=http%3A//info.internet.isi.edu/in-notes/rfc/files/rfc1027.txt">RFC1027&lt;/a> &amp;ndash; Using ARP to implement transparent subnet gateways. [RFC1027]&lt;/li>
&lt;li>&lt;a href="https://link.zhihu.com/?target=http%3A//info.internet.isi.edu/in-notes/rfc/files/rfc1009.txt">RFC1009&lt;/a> &amp;ndash; Requirements for Internet gateways. [RFC1009]&lt;/li>
&lt;/ul>
&lt;p>A concept integral to &lt;em>proxy&lt;/em> was that of a &lt;em>gateway&lt;/em>. &lt;strong>Gateways&lt;/strong> often provide an interface between two networks &amp;ndash; each of which may use a different networking protocol. A &lt;em>proxy&lt;/em> is often run on the gateway and acts as a go between, representing requests or services on behalf of one party in terms the second party can understand. The term proxy was seemingly first used in the network context by Shapiro [Shap] in 1986 to designate one object as a local representative of a remote object. However, both of our terms, &lt;em>agent&lt;/em> and &lt;em>proxy&lt;/em>, received their fullest treatment in 1989 in RFC 1095. &lt;em>Proxy&lt;/em> is explicitly placed in a legal context.
3.1. Architectural OverviewThe basic concepts underlying OSI network management are quite simple [16]. There reside application processes called &amp;ldquo;managers&amp;rdquo; on managing systems (or management stations). There reside application processes called &amp;ldquo;agents&amp;rdquo; on managed systems (or network elements being managed). Network management occurs when managers and agents conspire (via protocols and a shared conceptual schema) to exchange monitoring and control information useful to the management of a network and its components. The terms &amp;ldquo;manager&amp;rdquo; and &amp;ldquo;agent&amp;rdquo; are also used in a loose and popular sense to refer to the managing and managed system, respectively&amp;hellip;. The terms &amp;ldquo;manager&amp;rdquo; and &amp;ldquo;agent&amp;rdquo; are used to denote the asymmetric relationship between management application processes in which the manager plays the superior role and the agent plays the subordinate.4.3. Proxy ManagementProxy is a term that originated in the legal community to indicate an entity empowered to perform actions on behalf of another. In our context, a proxy is a manager empowered to perform actions on behalf of another manager. This may be necessary because the manager cannot communicate directly with the managed devices either for security or other administrative reasons or because of incompatible communication mechanisms or protocols. In either case, the proxy assumes the agent role with respect to the requesting manager and the manager role with respect to the managed device. [RFC1090]
Subsequently, the terms agents and proxy have become integral to the nomenclature of networks and their applications. This includes email [ref], ftp [ref], the Web [HTTP], and firewalls [ref]. Professors [Maes, Mins, Negr] and students associated with the &lt;a href="https://link.zhihu.com/?target=http%3A//agents.www.media.mit.edu/groups/agents/">Agent Group&lt;/a> at the &lt;a href="https://link.zhihu.com/?target=http%3A//www.media.mit.edu/">MIT Media Lab&lt;/a> have significantly contributed to the advancement of software agents in the popular scientific press. Others &amp;ndash; beyond the authors of this paper &amp;ndash; have begin to think about the social implications of autonomous network agents [Fried1-3, Niss]&lt;/p>
&lt;h3 id="references">References&lt;/h3>
&lt;p>[Bear] Beardon C. (Editor) &lt;em>&lt;a href="https://link.zhihu.com/?target=http%3A//www.amazon.com/exec/obidos/ASIN/0130482994/qid%3D906405323/sr%3D1-8/002-1402323-9200248">Artificial Intelligence Terminology : A Reference Guide (Ellis Horwood Series in Artificial Intelligence Foundations and Concepts)&lt;/a>&lt;/em> (1989).
[CIKM] Third International Conference on Information and Knowledge Management (CIKM'94)
[Comm] Communications of the ACM. v.37 n.7, July1994.
[Dieb] Diebold, J. &lt;em>Man and the Computer; Technology as an Agent of Social Change.&lt;/em> F. A. Praeger, New York. (1969).
[EWMA] European Workshop on Modeling Autonomous Agents in a Multi-Agent World (7th : 1996 : Eindhoven, Netherlands)
[Fill] Fillmore, &amp;ldquo;&lt;em>The Case for Case&lt;/em>.&amp;rdquo; Universals in Linguistic Theory. (Bach, E. and Harms, R., eds.) Holt, Rinehart, and Winston, New York. (1968) pp. 1-90.
[Fried1] Friedman B., and Millett L. &lt;em>&amp;ldquo;It&amp;rsquo;s the computer&amp;rsquo;s fault&amp;rdquo; &amp;ndash; Reasoning about computers as moral agents&lt;/em>. Conference companion of the conference on Human Factors in Computing Systems, CHI &amp;lsquo;95. New York: Association for Computing Machinery. (May 1995) pp. 226- 227.
[Fried2] Friedman B, and Nissenbaum H. &lt;a href="https://link.zhihu.com/?target=http%3A//www.acm.org/pubs/citations/journals/tois/1996-14-3/p330-friedman/">Bias in computer systems &lt;/a>. ACM Trans. Inf. Syst. 14, 3 (Jul. 1996) pp. 330 - 347.
[Fried3] Friedman B, and Nissenbaum H &lt;a href="https://link.zhihu.com/?target=http%3A//www.acm.org/pubs/citations/proceedings/ai/267658/p466-friedman/">Software agents and user autonomy&lt;/a>. Autonomous agents. (1997) pp. 466 - 469.
[Maes] Maes, P. &lt;a href="https://link.zhihu.com/?target=http%3A//pattie.www.media.mit.edu/people/pattie/CACM-94/CACM-94.p1.html">Agents that Reduce Work and Information Overload.&lt;/a> Communications of the ACM. Vol. 37 No.7 (July 1994), pp. 31-40.
[Mins] Minsky, M, and D. Riecken. &lt;a href="https://link.zhihu.com/?target=http%3A//www.acm.org/pubs/citations/journals/cacm/1994-37-7/p22-minsky/">A Conversation with Marvin Minsky about Agents&lt;/a>. &lt;em>&lt;a href="https://link.zhihu.com/?target=http%3A//www.acm.org/cacm/">Communications of the ACM&lt;/a>&lt;/em> Vol. 37, No. 7 (July 1994) pp. 22-29.
[Negr] Nicholas Negroponte. &lt;em>Agents: From Direct Manipulation to Delegation&lt;/em>. Software Agents. (Jeffrey M. Bradshaw ed.), MIT Press 1997.
[Niss] Nissenbaum, H. &lt;a href="https://link.zhihu.com/?target=http%3A//www.acm.org/pubs/citations/journals/cacm/1994-37-1/p72-nissenbaum/">Computing and accountability&lt;/a>. Communications of the ACM. Vol. 37, No. 1 (Jan. 1994) pp. 72-80.
[RR] Rome, B. and Rome, S. &lt;em>Leviathan: A Simulation of Behavioral Systems, to Operate Dynamically on a Digital Computer&lt;/em>, System Development Corporation report no. SP-50, 6 (Nov. 1959), pp 15.
[RFC1095] &lt;em>&lt;a href="https://link.zhihu.com/?target=http%3A//info.internet.isi.edu/in-notes/rfc/files/rfc1095.txt">RFC1095&lt;/a>&lt;/em> &lt;em>&amp;ndash;&lt;/em> &lt;em>Common Management Information Services and Protocol over TCP/IP (CMOT).&lt;/em> U.S. Warrier, L. Besaw. Apr-01-1989. (Obsoleted by RFC1189)
[RFC1067] &lt;em>&lt;a href="https://link.zhihu.com/?target=http%3A//info.internet.isi.edu/in-notes/rfc/files/rfc1067.txt">RFC1067&lt;/a>&lt;/em> &lt;em>&amp;ndash;&lt;/em> &lt;em>Simple Network Management Protocol&lt;/em>. J.D. Case, M. Fedor, M.L. Schoffstall, J. Davin. Aug-01-1988. (Obsoleted by RFC1098)
[RFC1027] &lt;em>&lt;a href="https://link.zhihu.com/?target=http%3A//info.internet.isi.edu/in-notes/rfc/files/rfc1027.txt">RFC1027&lt;/a>&lt;/em> &lt;em>&amp;ndash;&lt;/em> Using ARP to implement transparent subnet gateways. S. Carl-Mitchell, J.S. Quarterman. Oct-01-1987.(Status: UNKNOWN)
[RFC1009] &lt;em>&lt;a href="https://link.zhihu.com/?target=http%3A//info.internet.isi.edu/in-notes/rfc/files/rfc1009.txt">RFC1009&lt;/a>&lt;/em> &lt;em>&amp;ndash; Requirements for Internet gateways&lt;/em>. R.T. Braden, J. Postel. Jun-01-1987. (Obsoletes RFC0985) (Obsoleted by RFC1812)
[RFC733] &lt;em>&lt;a href="https://link.zhihu.com/?target=http%3A//info.internet.isi.edu/in-notes/rfc/files/rfc733.txt">RFC733&lt;/a>&lt;/em> &lt;em>&amp;ndash; Standard for the format of ARPA network text messages&lt;/em>. D. Crocker, J. Vittal, K.T. Pogran, D.A. Henderson. Nov-21-1977. (Obsoletes RFC0724) (Obsoleted by RFC0822)
[RFC761] &lt;em>&lt;a href="https://link.zhihu.com/?target=http%3A//info.internet.isi.edu/in-notes/rfc/files/rfc761.txt">RFC761&lt;/a>&lt;/em> &lt;em>&amp;ndash; DoD standard Transmission Control Protocol&lt;/em>. J. Postel. Jan-01-1980.
[RFC95] &lt;a href="https://link.zhihu.com/?target=http%3A//info.internet.isi.edu/in-notes/rfc/files/rfc95.txt">RFC95&lt;/a> &amp;ndash; &lt;em>Distribution of NWG/RFC&amp;rsquo;s through the NIC&lt;/em>. S.D. Crocker. Feb-04-1971. (Obsoleted by RFC0155)
[Self] Selfridge, O. &amp;ldquo;Pandemonium: A Paradigm for Learning.&amp;rdquo; &lt;em>Mechanisation of Thought Processes&lt;/em>. London: H. M. Stationery Off., 1959, pp. 511-527.
[Shap] Shapiro, M. &lt;em>Structure and encapsulation in distributed systems: The proxy principle&lt;/em>. 6th International Conference on Distributed Computing Systems Proceedings (Cat. No. 86CH2293-9). (6th International Conference on Distributed Computing Systems Proceedings (Cat. No. 86CH2293-9), Cambridge, MA, USA, 19-23 May 1986). Washington, DC, USA: IEEE Comput. Soc. Press, 1986. pp. 198-204.
[Wood] &lt;a href="https://link.zhihu.com/?target=https%3A//cyber.harvard.edu/archived_content/people/reagle/amw%40cs.bham.ac.uk">Andy Wood&lt;/a>. &lt;a href="https://link.zhihu.com/?target=http%3A//www.cs.bham.ac.uk/~amw/agents/index.html">Agent Information and References&lt;/a>. Available at &lt;a href="https://link.zhihu.com/?target=http%3A//www.cs.bham.ac.uk/~amw/agents/index.html">http://www.cs.bham.ac.uk/~amw/agen&lt;/a>&lt;/p></description></item><item><title>Docs: Architecture(架构)</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/standardizedglossary%E6%A0%87%E5%87%86%E5%8C%96%E6%9C%AF%E8%AF%AD/architecture%E6%9E%B6%E6%9E%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/standardizedglossary%E6%A0%87%E5%87%86%E5%8C%96%E6%9C%AF%E8%AF%AD/architecture%E6%9E%B6%E6%9E%84/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Computer_architecture">Wiki,Computer Architecture&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="各行各业微服务技术架构图分享">各行各业微服务技术架构图分享&lt;/h1>
&lt;p>包含：智慧仓储#docker#部署图、通用微服务架构图、物联网终端微服务架构图、平台微服务技术架构、基于#SpringCloud#的微服务架构图、基于 SpringCloud 的微服务电商系统架构图、#k8s#云原生架构图、#云计算#总体架构和技术架构。&lt;/p>
&lt;p>微服务不是架构演变的终极目标。最近比较流行的方向还有 Serverless、FaaS 等方向。另一方面也有人再重新关注单体系统的开发，我们认为技术架构应该是服务业务的，根据不同的业务类型选择正确的技术栈是每个架构师应该具备的能力。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qqw80y/1617368744569-dcdb5790-f824-4e92-acf3-7418626145f1.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qqw80y/1617368744561-85ff1c5e-b8cb-47b5-a694-02c18c91f507.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qqw80y/1617368744564-b1293d93-92da-4485-9ca9-d506cc2852b3.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qqw80y/1617368744550-be650970-8462-4723-b1d9-f2295ba2c1b5.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qqw80y/1617368744560-7fe7fee6-28a5-40b5-9fbc-579dd72f33f5.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qqw80y/1617368744542-7f4f869a-a832-4747-b227-fa0b86cca182.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qqw80y/1617368744556-dc3f1543-3303-4d13-a5c0-45a295856e15.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qqw80y/1617368744546-db34bafc-8339-43e0-a6c1-f214c83b1f12.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qqw80y/1617368744551-e5e7434c-1b61-4aee-b687-7514633c2ca4.png" alt="">&lt;/p></description></item><item><title>Docs: B/S 和 C/S 架构</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/standardizedglossary%E6%A0%87%E5%87%86%E5%8C%96%E6%9C%AF%E8%AF%AD/b_s-%E5%92%8C-c_s-%E6%9E%B6%E6%9E%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/standardizedglossary%E6%A0%87%E5%87%86%E5%8C%96%E6%9C%AF%E8%AF%AD/b_s-%E5%92%8C-c_s-%E6%9E%B6%E6%9E%84/</guid><description>
&lt;h1 id="service-side-与-client-side">Service Side 与 Client Side&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;a href="https://en.wikipedia.org/wiki/Server-side">Wiki，Server Side&lt;/a>、&lt;a href="https://en.wikipedia.org/wiki/Client-side">Wiki，Client Side&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>Client/Server 结构(C/S 结构) 是大家熟知的 &lt;strong>Client Side(客户端) 与 Server Side(服务端)&lt;/strong> 结构。它是软件系统体系结构，通过它可以充分利用两端硬件环境的优势，将任务合理分配到 Client Side 和 Server Side 来实现，降低了系统的通讯开销。目前大多数应用软件系统都是 Client/Server 形式的两层结构，由于现在的软件应用系统正在向分布式的 Web 应用发展，Web 和 Client/Server 应用都可以进行同样的业务处理，应用不同的模块共享逻辑组件；因此，内部的和外部的用户都可以访问新的和现有的应用系统，通过现有应用系统中的逻辑可以扩展出新的应用系统。这也就是目前应用系统的发展方向。&lt;/p>
&lt;p>B/S 结构（Browser/Server，浏览器/服务器模式），是 WEB 兴起后的一种网络结构模式，WEB 浏览器是客户端最主要的应用软件。这种模式统一了客户端，将系统功能实现的核心部分集中到服务器上，简化了系统的开发、维护和使用。客户机上只要安装一个浏览器（Browser 英 [&amp;lsquo;braʊzə]美 [&amp;lsquo;braʊzɚ]），如 Netscape Navigator 或 Internet Explorer，服务器安装 SQL Server、Oracle、MYSQL 等数据库。浏览器通过 Web Server 同数据库进行数据交互。&lt;/p>
&lt;p>Apache 是普通服务器，本身只支持 html 即普通网页。不过可以通过插件支持 php,还可以与 Tomcat 连通(单向 Apache 连接 Tomcat,就是说通过 Apache 可以访问 Tomcat 资源。反之不然)。Apache 只支持静态网页，但像 php,cgi,jsp 等动态网页就需要 Tomcat 来处理。 Tomcat 是由 Apache 软件基金会下属的 Jakarta 项目开发的一个 Servlet 容器，按照 Sun Microsystems 提供的技术规范，实现了对 Servlet 和 JavaServer Page（JSP）的支持，并提供了作为 Web 服务器的一些特有功能，如 Tomcat 管理和控制平台、安全域管理和 Tomcat 阀等。由于 Tomcat 本身也内含了一个 HTTP 服务器，它也可以被视作一个单独的 Web 服务器。但是，不能将 Tomcat 和 Apache Web 服务器混淆，Apache Web Server 是一个用 C 语言实现的 HTTP web server；这两个 HTTP web server 不是捆绑在一起的。Apache Tomcat 包含了一个配置管理工具，也可以通过编辑 XML 格式的配置文件来进行配置。Apache，nginx，tomcat 并称为网页服务三剑客，可见其应用度之广泛。（说白了，tomcat 就是个底层设施软件服务，网页上所有的东西就要放在 tomcat 上，别人才能通过 tomcat 访问，tomcat 占用 80 端口）&lt;/p>
&lt;p>例子：当通过浏览器，访问一个网站的时候，这时候就是一个 B/S 的架构，因为网站肯定是运行在服务器上的，这个服务器的系统上又装了 tomcat 这个服务，并占用 80 端口，因此，人们通过浏览器访问网站，由于自动使用 80 端口，那么就直接访问到 comcat 服务，然后由 comcat 来调取网站的页面资源给客户展示出来。&lt;/p>
&lt;p>至于 C/S 就相当于通过 PC 端的一个软件，通过 URL 网址访问到服务器上的应用程序。&lt;/p></description></item><item><title>Docs: bit( 比特 ) 和 Byte(字节) 的关系 以及 网速怎么算</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/standardizedglossary%E6%A0%87%E5%87%86%E5%8C%96%E6%9C%AF%E8%AF%AD/bit-%E6%AF%94%E7%89%B9-%E5%92%8C-byte%E5%AD%97%E8%8A%82-%E7%9A%84%E5%85%B3%E7%B3%BB-%E4%BB%A5%E5%8F%8A-%E7%BD%91%E9%80%9F%E6%80%8E%E4%B9%88%E7%AE%97/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/standardizedglossary%E6%A0%87%E5%87%86%E5%8C%96%E6%9C%AF%E8%AF%AD/bit-%E6%AF%94%E7%89%B9-%E5%92%8C-byte%E5%AD%97%E8%8A%82-%E7%9A%84%E5%85%B3%E7%B3%BB-%E4%BB%A5%E5%8F%8A-%E7%BD%91%E9%80%9F%E6%80%8E%E4%B9%88%E7%AE%97/</guid><description>
&lt;h1 id="前言">前言&lt;/h1>
&lt;h2 id="bit比特">bit（比特）&lt;/h2>
&lt;p>bit 也就是我们不一定听说过的比特，大名鼎鼎的比特币就是以此命名的。它的简写为小写字母 “b” 。&lt;/p>
&lt;p>作为信息技术的最基本存储单元，因为比特实在太小了，所以大家生活中并不是经常听到。那么 bit 是什么呢？&lt;/p>
&lt;p>电脑是以二进制存储以及发送接收数据的。二进制的一位，就叫做 1 bit。也就是说 bit 的含义就是二进制数中的一个数位，即 “0” 或者 &amp;ldquo;1&amp;rdquo;。&lt;/p>
&lt;h2 id="byte字节">Byte（字节）&lt;/h2>
&lt;p>Byte 是字节的英文写法。它的简写为大写字母 “B&amp;quot;。&lt;/p>
&lt;p>既然名字叫字节，那肯定跟字符有关系。是的。英文字符通常是一个字节，也就是 1B，中文字符通常是两个字节，也就是 2B。&lt;/p>
&lt;p>字节 Byte 和比特 bit 的换算关系是 1 Byte = 8 bit 。&lt;/p>
&lt;h2 id="kib-千字节">KiB （千字节）&lt;/h2>
&lt;p>需要了解的是，1 KiB 并不是一千字节，因为计算机只认识二进制，所以在这里的 KiB，是 2 的 10 次方，也就是 1024 个字节。&lt;/p>
&lt;p>另外很多表示存储单位的地方都把 B 写成 b，造成了大家认知的混乱。其实在存储单位计量中出现 b 的地方，它的意思仍然是 B，不要因为 bit 的缩写是 b 就被误导了，在存储计量中是不会用 比特，千比特 这种单位的。但是在网速计量中，b 的真实意思就是指 比特 了，这个我们下面再说。&lt;/p>
&lt;h2 id="单位换算">单位换算&lt;/h2>
&lt;p>存储单位换算关系如下&lt;/p>
&lt;ul>
&lt;li>1 Byte = 8 bit&lt;/li>
&lt;li>1 KiB= 1024 Bi&lt;/li>
&lt;li>1 MiB = 1024 KiB&lt;/li>
&lt;li>1 GiB = 1024 MiB&lt;/li>
&lt;li>1 TiB = 1024 GiB&lt;/li>
&lt;/ul>
&lt;h1 id="bit-和-byte">bit 和 Byte&lt;/h1>
&lt;p>计算机内部的存储和运算都是通过 「 0，1 」 这两个数在二进制下完成的。&lt;/p>
&lt;p>其中每个 0 或 1 就是一个 &lt;strong>bit(位或比特)&lt;/strong>，bit 是信息的最小数据单位，并且 8 个 bit 刚好可以构成 1 个 &lt;strong>Byte(字节)&lt;/strong>。&lt;/p>
&lt;p>Byte 可以说是计算机中存储容量的基本单位。我们在属性里查看电脑的任何一个文件，占用空间的大小都是用多少字节来统计的。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/nb56i3/1616065436103-9aeaff35-7332-46ef-aaab-952a7a95f397.jpeg" alt="">
但就像长度、重量和体积等其他单位一样，光是用一个 Byte 来衡量数据的大小肯定是不够的。&lt;/p>
&lt;p>因此在 bit 的单位后面还设有 Byte、KiB、MiB、GiB、TiB、PiB 等多个数据存储单位，各个单位之间遵循着一定的换算方式。&lt;/p>
&lt;p>如果世超没记错的话，自己当时在计算机课上学到的单位转换方式是这样的：&lt;/p>
&lt;p>1024（ 2 ^10 ) Byte = 1 KiB&lt;/p>
&lt;p>1024（ 2 ^10 ) KiB = 1 MiB&lt;/p>
&lt;p>1024（ 2 ^10 ) MiB = 1 GiB&lt;/p>
&lt;p>上面这种就是用计算机二进制的 10 次方，也就是以 1024 为进制的换算方式。&lt;/p>
&lt;p>差友们可能会觉得这个换算方式很对没错呀，挺贴合计算机的二进制系统的特点，另外，考试的时候不也是要求这么算的吗？&lt;/p>
&lt;p>但如果脱离计算机范畴，将它和生活中其他几个单位一比较，很多对电脑不了解的人来说，就很难理解 1024 这个换算数值是怎么来的了。&lt;/p>
&lt;p>毕竟像其他诸如 1A=1000mA、1kg=100g、1m=100cm 等生活中比较常见的单位，差不多都是拿十进制的几次方来作为换算方式。&lt;/p>
&lt;p>十进制的换算不仅更常见，直接拿整数一乘或者一除换算起来也会比 1024 方便很多，而且还更符合我们日常的生活习惯。&lt;/p>
&lt;p>所以，才有了下文的 &lt;a href="#muJb9">KB 与 KiB 的区别&lt;/a>&lt;/p>
&lt;h1 id="kb-与-kib-的区别">KB 与 KiB 的区别&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Byte">Wiki，Byte&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zh.wikipedia.org/wiki/%E5%8D%83%E5%AD%97%E8%8A%82">Wiki-zh，千字节&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>**International System of Units(国际制度单位，简称 SI) **这种规范就是为了照顾到计算机外的行业，除了之前提到以 1024 的换算，还可以使用十进制来进行换算。这种制度其实很早很早就有了，比如距离单位(100cm=1m)、重量单位(1kg=1000g)、时间单位(1s=1000ms) 等等。&lt;/p>
&lt;p>&lt;strong>International Electrotechnical Commission(国际电工委员会，简称 IEC)&lt;/strong> 的规范中提到，用于二进制存储单位的标准命名建议在中间&amp;quot;加个 i&amp;quot;(其实是更改了命名)以示区分&lt;/p>
&lt;p>具体效果就如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>十进制前缀&lt;/th>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;th>二进制前缀&lt;/th>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>(SI)&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>(IEC 60027-2)&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>名字&lt;/td>
&lt;td>缩写&lt;/td>
&lt;td>次方&lt;/td>
&lt;td>名字&lt;/td>
&lt;td>缩写&lt;/td>
&lt;td>次方&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>KiloByte&lt;/td>
&lt;td>KB&lt;/td>
&lt;td>103&lt;/td>
&lt;td>KibiByte&lt;/td>
&lt;td>KiB&lt;/td>
&lt;td>210&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>MegaByte&lt;/td>
&lt;td>MB&lt;/td>
&lt;td>106&lt;/td>
&lt;td>MebiByte&lt;/td>
&lt;td>MiB&lt;/td>
&lt;td>220&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>GigaByte&lt;/td>
&lt;td>GB&lt;/td>
&lt;td>109&lt;/td>
&lt;td>GibiByte&lt;/td>
&lt;td>GiB&lt;/td>
&lt;td>230&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>TeraByte&lt;/td>
&lt;td>TB&lt;/td>
&lt;td>1012&lt;/td>
&lt;td>TebiByte&lt;/td>
&lt;td>TiB&lt;/td>
&lt;td>240&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Petabyte&lt;/td>
&lt;td>PB&lt;/td>
&lt;td>1015&lt;/td>
&lt;td>PebiByte&lt;/td>
&lt;td>PiB&lt;/td>
&lt;td>250&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Exabyte&lt;/td>
&lt;td>EB&lt;/td>
&lt;td>1018&lt;/td>
&lt;td>ExbiByte&lt;/td>
&lt;td>EiB&lt;/td>
&lt;td>260&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ZettaByte&lt;/td>
&lt;td>ZB&lt;/td>
&lt;td>1021&lt;/td>
&lt;td>ZebiByte&lt;/td>
&lt;td>ZiB&lt;/td>
&lt;td>270&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>YottaByte&lt;/td>
&lt;td>YB&lt;/td>
&lt;td>1024&lt;/td>
&lt;td>YobiByte&lt;/td>
&lt;td>YiB&lt;/td>
&lt;td>280&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;blockquote>
&lt;p>图里没有 Byte 与 bit，是因为这两种在名字写法上是一模一样的~&lt;/p>
&lt;/blockquote>
&lt;p>1998 年 12 月，IEC 通过创建前缀(例如 Kibi、Mebi、Gibi 等) 来明确表明 1024 的力量。因此 KibiByte 象征着 KiB(表示为：2^10 bytes = 024 bytes)。这些前缀现在是** International System of Quantities(国际数量体系，简称 ISQ) **的一部分。IEC 进一步规定，KiloByte 只能用于表示 1000 个 bytes&lt;/p>
&lt;blockquote>
&lt;p>1 个字符=1 个 Byte，1 个汉字=2 个 Byte
ASCII 码：1 个英文字母（不分大小写）占一个字节的空间。一个二进制数字序列，在计算机中作为一个数字单元，一般为 8 位二进制数，换算为十进制。最小值-128，最大值 127。如一个 ASCII 码就是一个字节。
UTF-8 编码：一个英文字符等于一个字节，一个中文（含繁体）等于三个字节。中文标点占三个字节，英文标点占一个字节。
Unicode 编码：一个英文等于两个字节，一个中文（含繁体）等于两个字节。中文标点占两个字节，英文标点占两个字节。&lt;/p>
&lt;/blockquote>
&lt;p>但在很长的一段时间里，不同领域仍然存在着两种换算方式混用的现象。这就导致存在了很多的误会产生&lt;/p>
&lt;h2 id="硬盘容量的误区">硬盘容量的误区&lt;/h2>
&lt;p>最典型的一个例子就是硬盘厂商：它们标容量时遵照的就是 1000 进位而不是 1024 进位
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/nb56i3/1616065436124-08711d7f-7895-484d-9e2a-cb4ca61ae00d.jpeg" alt="">
同样是 500GB 的硬盘，如果按照 1024 换算，需要 500&lt;em>1024MB 的空间，但以 1000 换算，只需要 500&lt;/em>1000MB 的空间，整整少了 12000MB，也就是 12GB 左右。但操作系统里读取硬盘时，则是按照 1024 进位的，所以你拿到手的硬盘在电脑上显示会比厂商标示的要少。显而易见的，硬盘的容量越大厂商们省的越多，但谁叫它就是有这么一个换算规范，你也不好说它是在偷工减料。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/nb56i3/1616065436150-0d382d4c-3a76-473f-b846-c04d27814ddc.jpeg" alt="">
另外，如果差友同时拥有 Mac 和 Win 电脑，可能还会发现在两台电脑之间转移文件时，同个文件在两台电脑上显示的大小是不同的。&lt;/p>
&lt;p>这也是不同的系统采用了不同进制规范的缘故。&lt;/p>
&lt;h2 id="网速的误区">网速的误区&lt;/h2>
&lt;p>至于运营商在宽带办理中宣传的 100M、1000M 实际使用时却没有那么快的网速，纯粹就是具体单位没有标清楚从而造成的误会。&lt;/p>
&lt;p>100M 宽带里的 M 是 Mbps，而 100M/s 下载速度里的 M 是 MBps，摆在一起差友们就很容易发现它们的区别：&lt;/p>
&lt;p>一个是小写 b，一个是大写 B。&lt;/p>
&lt;p>前面 Mbps 是兆比特每秒，指的是每秒传输的位数量；MBps 则是兆字节每秒，指的是指每秒传输的字节数量。&lt;/p>
&lt;p>别小看了这个 b，就因为存在着大小写的区别，两者之间就有了 8 倍的转换关系（ 8bit = 1B ），这样一来，100 Mbps 的宽带，满打满算下载速度也只有 100/8 Mbps= 12.5M/s。&lt;/p></description></item><item><title>Docs: Foundation(基金会)</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/standardizedglossary%E6%A0%87%E5%87%86%E5%8C%96%E6%9C%AF%E8%AF%AD/foundation%E5%9F%BA%E9%87%91%E4%BC%9A/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/standardizedglossary%E6%A0%87%E5%87%86%E5%8C%96%E6%9C%AF%E8%AF%AD/foundation%E5%9F%BA%E9%87%91%E4%BC%9A/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/3d6zMCrN55J3ufWkRB3gMA">公众号,开源基金会&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>**Information Technology(信息技术，简称 IT) **的发展离不开全球各地的 &lt;strong>Foundation(基金会)&lt;/strong> 的支持，没有这些基金会无私的奉献，开源软件不会像现在一样如此蓬勃发展。&lt;/p>
&lt;p>从 RMS 创立 FSF 发起自由软件运动，再到 OSI 成立并明确开源软件定义，这种崇尚开放协作的软件开发模式迅速席卷全球。&lt;/p>
&lt;p>除 FSF 与 OSI 外，还陆续诞生了许多致力于推广和发展开源的基金会。&lt;/p>
&lt;p>开源基金会对于开源软件和开源社区的组织、发展、协同创新提供了主导作用。开源基金会遵循公开、透明、开放等理念，为开源软件的孵化提供技术、运营、法律等全方位支持，为开源的社区建设和运营提供指导，发挥了孵化器和加速器的作用，开源基金会已成为开源生态最重要的组织者。&lt;/p>
&lt;p>以下罗列了一些有代表性的基金会：&lt;/p>
&lt;h3 id="1985-年--自由软件基金会成立">1985 年 —— 自由软件基金会成立&lt;/h3>
&lt;p>自由软件基金会（Free Software Foundation，简称 FSF）由 RMS 于 1985 年创立，这是一个非营利组织，其主要工作是运行 GNU 计划，使命是促进计算机用户的自由。基金会的员工编写并维护着一些 GNU 软件包。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/4a7d8aad-6807-412d-b999-c829b4670c7e/640" alt="">&lt;/p>
&lt;h3 id="1999-年--apache-软件基金会成立">1999 年 —— Apache 软件基金会成立&lt;/h3>
&lt;p>Apache 软件基金会（Apache Software Foundation，简称 ASF）正式创建于 1999 年，其前身是由一群开发爱好者构成的 &amp;ldquo;Apache Group&amp;rdquo;，他们通过 Brian Behlendorf 创建的邮件列表进行技术交流。&lt;/p>
&lt;p>托管于 ASF 的项目均遵循 Apache License，ASF 对行业和开源的贡献除了开源项目，还包括开源治理方面的贡献，例如在 Apache 社区内外被广泛使用的 Apache License、主导社区协作管理的 Apache Way，以及通过非营利组织的身份来支持 Apache 项目及社区。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/4a7d8aad-6807-412d-b999-c829b4670c7e/640" alt="">&lt;/p>
&lt;h3 id="2000-年--linux-基金会成立">2000 年 —— Linux 基金会成立&lt;/h3>
&lt;p>Linux 基金会（Linux Foundation，简称 LF）成立于 2000 年。它通过提供开放源代码所需的统一资源和服务，与封闭平台能成功地竞争，从而促进、保护和标准化 Linux。LF 开始于 2000 年的开源码发展实验室 (OSDL)，并与自由标准组织 (FSG) 合并后从而成为现在的组织。&lt;/p>
&lt;p>Linux 基金会赞助 Linux 创始人 Linus Torvalds 和主管维护者 Greg Kroah-Hartman 的工作。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/4a7d8aad-6807-412d-b999-c829b4670c7e/640" alt="">&lt;/p>
&lt;h3 id="2000-年--gnome-基金会成立">2000 年 —— GNOME 基金会成立&lt;/h3>
&lt;p>GNOME 基金会 (GNOME Foundation) 正式成立于 2010 年，它是一个非盈利组织，负责协调 GNOME 项目的各项工作。GNOME 基金会致力于达成 GNOME 项目的目标：即创建一个基于自由著作权协议的计算机平台。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/4a7d8aad-6807-412d-b999-c829b4670c7e/640" alt="">&lt;/p>
&lt;h3 id="2003-年--mozilla-基金会成立">2003 年 —— Mozilla 基金会成立&lt;/h3>
&lt;p>Mozilla 基金会 (Mozilla Foundation) 是为支持和领导开放源代码项目而设立的一个非营利组织。该组织制定管理开发政策，经营关键基础组织和管理商标及知识产权。它拥有一个子公司：Mozilla 公司，用来雇佣开发人员开发 Mozilla Firefox 浏览器和 Mozilla Thunderbird 电子邮件客户端。&lt;/p>
&lt;p>Mozilla 基金会把自己描述为 “一个致力于在互联网领域提供多样化选择和创新的公益组织”。在 Mozilla 基金会所遵循的 Mozilla 宣言当中，其中列出了十条原则，涵盖认为对全民及商业活动有益的互联网发展重要方针。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/4a7d8aad-6807-412d-b999-c829b4670c7e/640" alt="">&lt;/p>
&lt;h3 id="2004-年--eclipse-基金会成立">2004 年 —— Eclipse 基金会成立&lt;/h3>
&lt;p>Eclipse 基金会 (Eclipse Foundation) 成立于 2004 年，Eclipse 联盟（一个软件行业的联盟组织）发起成立了 Eclipse 基金会，由包括开发者、消费者和插件提供商在内的各独立团体组成董事会，为 Eclipse 的长期发展负责，并管理和领导 Eclipse 项目。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/4a7d8aad-6807-412d-b999-c829b4670c7e/640" alt="">&lt;/p>
&lt;h3 id="2006-年--blender-基金会成立">2006 年 —— Blender 基金会成立&lt;/h3>
&lt;p>Blender 基金会成立于 2006 年，这是一个为持续开发 Blender 而创建的非营利性组织。组织的创建是为了能雇佣 Blender 原始作者 Ton Roosendaal 全身心地投入到 Blender 的开发领导中，并维护整个软件的开发和分发工作积极有效。&lt;/p>
&lt;p>Blender 基金会有一个广泛的目标：“让整个网络世界都能方便地使用三维技术，而且是以 Blender 作为这个目标的核心。” 许多知名的互联网企业、软件厂商和游戏公司都加入了 Blender 基金会，例如育碧、微软、谷歌、亚马逊、Adobe、Facebook、NVIDIA 和 Epic 等公司。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/4a7d8aad-6807-412d-b999-c829b4670c7e/640" alt="">&lt;/p>
&lt;h3 id="2014-年--net-基金会成立">2014 年 —— .NET 基金会成立&lt;/h3>
&lt;p>2014 年，.NET 基金会由微软公司成立与赞助，这是一个独立的自由软件组织，其宗旨在于推进与维护微软公司开放源代码后的 .NET 框架。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/4a7d8aad-6807-412d-b999-c829b4670c7e/640" alt="">&lt;/p>
&lt;h3 id="2015-年--云原生计算基金会成立">2015 年 —— 云原生计算基金会成立&lt;/h3>
&lt;p>2015 年，云原生计算基金会（Cloud Native Computing Foundation，简称 CNCF）成立，这是一个厂商中立的基金会，其最初的口号是坚持和整合开源技术来让编排容器作为微服务架构的一部分。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/4a7d8aad-6807-412d-b999-c829b4670c7e/640" alt="">&lt;/p>
&lt;h3 id="2015-年--超级账本-hyperledger-成立">2015 年 —— 超级账本 (Hyperledger) 成立&lt;/h3>
&lt;p>2015 年，超级账本 (Hyperledger) 成立。Hyperledger 超级账本为 Linux 基金会协作的开源项目，旨在推进跨行业区块链技术。它是一个全球跨行业领导者的合作项目，包括金融、银行、物联网、供应链、制造和技术领域。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/4a7d8aad-6807-412d-b999-c829b4670c7e/640" alt="">&lt;/p>
&lt;h3 id="2015-年--risc-v-基金会成立">2015 年 —— RISC-V 基金会成立&lt;/h3>
&lt;p>RISC-V 基金会创建于 2015 年，旨在推广 RISC-V 开源指令集架构。2020 年 3 月基金会总部从美国迁往位于中立国瑞士的苏黎世。目前，RISC-V International 已经与 16 个来自不同国家和地区的行业组织建立了联盟，以确保跨越国家边界和利益纠纷的平等协作。&lt;/p>
&lt;p>截至 2020 年，RISC-V 的技术社区已发展至 50 多个技术和特殊兴趣小组，开发者人数超过 2300 人。从嵌入式到企业的整个计算领域，基于 RISC-V 的 CPU 内核、SoC、开发板、软件和工具等在市场上都呈现明显的增长势头。基金会目前已有 900 多个成员，包括 215 个来自全球各地的组织机构。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/4a7d8aad-6807-412d-b999-c829b4670c7e/640" alt="">&lt;/p>
&lt;h3 id="2019-年--openjs-基金会成立">2019 年 —— OpenJS 基金会成立&lt;/h3>
&lt;p>2019 年，JS 基金会和 Node.js 基金会合并成立 OpenJS 基金会，其使命是通过提供一个中立的组织来主导项目并共同赞助对整个生态有益的活动，进而促进 JavaScript 和 Web 生态的健康发展。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/4a7d8aad-6807-412d-b999-c829b4670c7e/640" alt="">&lt;/p>
&lt;h3 id="2020-年--tars-基金会成立">2020 年 —— TARS 基金会成立&lt;/h3>
&lt;p>2020 年，Linux 基金会宣布旗下项目 TARS 正式成立 TARS 基金会。TARS 基金会 (TARS Foundation) 是 Linux 基金会旗下的一个非盈利性开源微服务基金会。&lt;/p>
&lt;p>TARS 基金会专注于微服务领域，致力于帮助企业在拓展新领域时拥抱微服务体系架构，解决在使用微服务方面可能出现的问题，包括减少开发和服务治理的难度。它旨在解决多编程语言的互通、数据传输、数据存储一致性问题，并在支持海量请求的同时保证高性能。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/4a7d8aad-6807-412d-b999-c829b4670c7e/640" alt="">&lt;/p>
&lt;h3 id="2020-年--soda-基金会成立">2020 年 —— SODA 基金会成立&lt;/h3>
&lt;p>SODA 基金会成立于 2020 年 6 月，旨在建立一个开源数据与存储自治管理的软件生态系统，是一个跨项目协作以及帮助终端用户构建解决方案的中立论坛。&lt;/p>
&lt;p>SODA 基金会是在 Linux 基金会特许下，由中国建信金融科技、中国联通、Fujitsu、IBM、华为、NTT Communications、Sony、Toyota、Vodafone、 Wipro 等 25 家机构共同创立。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/4a7d8aad-6807-412d-b999-c829b4670c7e/640" alt="">&lt;/p>
&lt;p>相关链接：&lt;a href="https://cn.sodafoundation.io/">https://cn.sodafoundation.io/&lt;/a>&lt;/p>
&lt;h3 id="2020-年--开放原子开源基金会成立">2020 年 —— 开放原子开源基金会成立&lt;/h3>
&lt;p>开放原子开源基金会 (OpenAtom Foundation) 是致力于推动全球开源产业发展的非营利机构，于 2020 年 6 月在北京成立，由阿里巴巴、百度、华为、浪潮、360、腾讯、招商银行等十家龙头科技企业联合发起。&lt;/p>
&lt;p>开放原子开源基金会拟通过共建、共治、共享的方式，系统性打造信息产业和工业开源开放框架，搭建国际开源社区，提升行业协作效率，赋能千行百业。目前开放原子开源基金会业务范围主要包括为各类开源软件、开源硬件、开源芯片、开源内容提供中立的知识产权托管、战略咨询、法务咨询、项目运营、品牌营销和教育培训等服务。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/4a7d8aad-6807-412d-b999-c829b4670c7e/640" alt="">&lt;/p>
&lt;h3 id="2021-年--rust-基金会成立">2021 年 —— Rust 基金会成立&lt;/h3>
&lt;p>2021 年，由华为、Microsoft、Google、AWS 和 Mozilla 作为创始成员的 Rust 基金会 (Rust Foundation) 正式成立。&lt;/p>
&lt;p>Rust 基金会是一个独立的非营利组织，负责管理 Rust 编程语言和生态，并特别注重为治理和开发该项目的维护人员提供支持。其初始董事会成员共 10 人，5 位来自创始成员公司，另 5 位来自项目领导层。作为 Rust 项目的发源地，Mozilla 于 2020 年 8 月宣布了成立 Rust 基金会的计划，而今已经将所有商标和基础设施资产转移到了新的 Rust 基金会。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/4a7d8aad-6807-412d-b999-c829b4670c7e/640" alt="">&lt;/p>
&lt;p>各大基金会具体的运作模式是怎样、各自又有哪些代表项目？基金会的价值体现几何&amp;hellip;&amp;hellip; 欢迎大家畅所欲言（ps：理性讨论）~&lt;/p>
&lt;p>盘点若有遗漏，也欢迎大家点击文末【&lt;strong>阅读原文&lt;/strong>】，在开源长廊中进行编辑补充。&lt;/p>
&lt;p>END&lt;/p>
&lt;p>&lt;a href="https://notes-learning.oss-cn-beijing.aliyuncs.com/4a7d8aad-6807-412d-b999-c829b4670c7e/640">
&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/4a7d8aad-6807-412d-b999-c829b4670c7e/640" alt="">
觉得不错，请点个在看呀&lt;/p></description></item><item><title>Docs: Free Software Foundation(自由软件基金会)</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/standardizedglossary%E6%A0%87%E5%87%86%E5%8C%96%E6%9C%AF%E8%AF%AD/foundation%E5%9F%BA%E9%87%91%E4%BC%9A/free-software-foundation%E8%87%AA%E7%94%B1%E8%BD%AF%E4%BB%B6%E5%9F%BA%E9%87%91%E4%BC%9A/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/standardizedglossary%E6%A0%87%E5%87%86%E5%8C%96%E6%9C%AF%E8%AF%AD/foundation%E5%9F%BA%E9%87%91%E4%BC%9A/free-software-foundation%E8%87%AA%E7%94%B1%E8%BD%AF%E4%BB%B6%E5%9F%BA%E9%87%91%E4%BC%9A/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Free_Software_Foundation">Wiki&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>**Free Software Foundation(自由软件基金会，简称 FSF) **是一个&lt;a href="https://en.wikipedia.org/wiki/501(c)#501(c)(3)">符合 501（c）（3）&lt;/a> &lt;a href="https://en.wikipedia.org/wiki/Non-profit_organization">非营利组织&lt;/a>所创立&lt;a href="https://en.wikipedia.org/wiki/Richard_Stallman">理查德·斯托曼&lt;/a>在 1985 年 10 月 4 日，支持&lt;a href="https://en.wikipedia.org/wiki/Free_software_movement">自由软件运动&lt;/a>，从而促进普遍自由的学习，分发，创建和修改&lt;a href="https://en.wikipedia.org/wiki/Computer_software">计算机软件&lt;/a>，&lt;a href="https://en.wikipedia.org/wiki/Free_Software_Foundation#cite_note-4">[4]&lt;/a>组织偏爱在&lt;a href="https://en.wikipedia.org/wiki/Copyleft">Copyleft&lt;/a>（“相同方式共享”）条款下分发的软件，&lt;a href="https://en.wikipedia.org/wiki/Free_Software_Foundation#cite_note-5">[5]&lt;/a>例如使用其自己的&lt;a href="https://en.wikipedia.org/wiki/GNU_General_Public_License">GNU 通用公共许可证&lt;/a>。&lt;a href="https://en.wikipedia.org/wiki/Free_Software_Foundation#cite_note-6">[6]&lt;/a>所述的 FSF 在波士顿并入，&lt;a href="https://en.wikipedia.org/wiki/Free_Software_Foundation#cite_note-7">[7]&lt;/a> &lt;a href="https://en.wikipedia.org/wiki/Massachusetts">马萨诸塞&lt;/a>，&lt;a href="https://en.wikipedia.org/wiki/United_States">美国&lt;/a>，它也基于。&lt;a href="https://en.wikipedia.org/wiki/Free_Software_Foundation#cite_note-FSF_MACorpRegistry-8">[8]&lt;/a>&lt;/p>
&lt;p>从成立到 1990 年代中期，FSF 的资金主要用于聘请软件开发人员为&lt;a href="https://en.wikipedia.org/wiki/GNU_Project">GNU 项目&lt;/a>编写&lt;a href="https://en.wikipedia.org/wiki/Free_software">免费软件&lt;/a>。自 1990 年代中期以来，FSF 的员工和志愿者主要致力于解决自由软件运动和自由软件社区的法律和结构问题。&lt;/p>
&lt;p>与其目标一致，FSF 旨在仅在其自己的计算机上使用&lt;a href="https://en.wikipedia.org/wiki/Free_software">免费软件&lt;/a>。&lt;a href="https://en.wikipedia.org/wiki/Free_Software_Foundation#cite_note-9">[9]&lt;/a>&lt;/p>
&lt;h2 id="gnu">GNU&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/GNU">Wiki,GNU&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.gnu.org/">官网&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>GNU&lt;/strong> 是一个广泛的&lt;a href="https://en.wikipedia.org/wiki/Free_software">自由软件&lt;/a>集合，它可以作为一个操作系统使用，也可以与其他操作系统一起使用。&lt;a href="https://en.wikipedia.org/wiki/GNU#cite_note-handbookonopensource-5">[5] &lt;/a>&lt;a href="https://en.wikipedia.org/wiki/GNU#cite_note-6">[6] &lt;/a>&lt;a href="https://en.wikipedia.org/wiki/GNU#cite_note-7">[7]&lt;/a>使用完整的 GNU 工具导致了操作系统家族的诞生，即俗称的&lt;a href="https://en.wikipedia.org/wiki/Linux">Linux&lt;/a>。&lt;a href="https://en.wikipedia.org/wiki/GNU#cite_note-8">[8]&lt;/a>大部分 GNU 是根据&lt;a href="https://en.wikipedia.org/wiki/GNU_Project">GNU 项目&lt;/a>自己的通用公共许可证 ( &lt;a href="https://en.wikipedia.org/wiki/GNU_General_Public_License">GPL&lt;/a> ) 获得许可的。&lt;/p>
&lt;h2 id="gnulinux-命名争议编辑httpszhwikipediaorgwindexphptitlegnulinuxe591bde5908de788ade8adb0actioneditsection0summary20top2020">GNU/Linux 命名争议[&lt;a href="https://zh.wikipedia.org/w/index.php?title=GNU/Linux%E5%91%BD%E5%90%8D%E7%88%AD%E8%AD%B0&amp;amp;action=edit&amp;amp;section=0&amp;amp;summary=/*%20top%20*/%20">编辑&lt;/a>]&lt;/h2>
&lt;p>维基百科，自由的百科全书
&lt;a href="https://zh.wikipedia.org/wiki/GNU/Linux%E5%91%BD%E5%90%8D%E7%88%AD%E8%AD%B0#mw-head">跳到导航&lt;/a>&lt;a href="https://zh.wikipedia.org/wiki/GNU/Linux%E5%91%BD%E5%90%8D%E7%88%AD%E8%AD%B0#searchInput">跳到搜索&lt;/a>
&lt;strong>GNU/Linux 命名争议&lt;/strong>，是在自由及开放源代码软件社区成员内的，关于是应该把使用 GNU 软件与 Linux 内核组合之操作系统称为“GNU/Linux”还是“Linux”的争议。
&lt;strong>GNU/Linux&lt;/strong>这一名称是由&lt;a href="https://zh.wikipedia.org/wiki/%E8%87%AA%E7%94%B1%E8%BB%9F%E9%AB%94%E5%9F%BA%E9%87%91%E6%9C%83">自由软件基金会&lt;/a>的创立者与&lt;a href="https://zh.wikipedia.org/wiki/GNU%E8%A8%88%E5%8A%83">GNU 计划&lt;/a>的发起人&lt;a href="https://zh.wikipedia.org/wiki/%E7%90%86%E6%9F%A5%E5%BE%B7%C2%B7%E6%96%AF%E6%89%98%E6%9B%BC">理查德·斯托曼&lt;/a>所提出的。GNU 的开发者与其支持者，希望以该名称来作为此操作系统的正式名称。他们认为，此操作系统，包括了 GNU 系统软件包与&lt;a href="https://zh.wikipedia.org/wiki/Linux%E6%A0%B8%E5%BF%83">Linux 核心&lt;/a>，使用 GNU/Linux 这个名称，可以良好概括它的主要内容。况且，GNU 项目原本就是以发展一个自由的操作系统为远程项目，但迟迟没有完成。而&lt;a href="https://zh.wikipedia.org/wiki/Linux%E6%A0%B8%E5%BF%83">Linux 核心&lt;/a>的出现刚好可以补足这个缺口。
Linux 内核本身并不是 GNU 计划的一部分，GNU/Linux 这个名称在 Linux 社区中并没有得到一致认同。一些发行版社区例如&lt;a href="https://zh.wikipedia.org/wiki/Debian">Debian&lt;/a>采用了 GNU/Linux 这一名称，但许多 Linux 社区中的成员认为使用 Linux 这一名称是更好的，为此提出了数项理由，主张 Linux 这个名称朗朗上口，且在公众与媒体中更为通用。Linux 内核项目的发起人&lt;a href="https://zh.wikipedia.org/wiki/%E6%9E%97%E7%BA%B3%E6%96%AF%C2%B7%E6%89%98%E7%93%A6%E5%85%B9">林纳斯·托瓦兹&lt;/a>偏好于使用 Linux，但对于 GNU/Linux 这个名字并不强烈反感。&lt;/p>
&lt;h2 id="heading">&lt;/h2>
&lt;h3 id="发音编辑httpszhwikipediaorgwindexphptitlegnulinuxe591bde5908de788ade8adb0actioneditsection1">发音[&lt;a href="https://zh.wikipedia.org/w/index.php?title=GNU/Linux%E5%91%BD%E5%90%8D%E7%88%AD%E8%AD%B0&amp;amp;action=edit&amp;amp;section=1">编辑&lt;/a>]&lt;/h3>
&lt;p>GNU 的吉祥物&lt;a href="https://zh.wikipedia.org/wiki/%E8%A7%92%E9%A6%AC">角马&lt;/a>，与 Linux 吉祥物&lt;a href="https://zh.wikipedia.org/wiki/Tux">Tux&lt;/a>合体，代表 GNU/Linux
“GNU/Linux”&lt;a href="https://zh.wikipedia.org/wiki/Help:%E8%8B%B1%E8%AA%9E%E5%9C%8B%E9%9A%9B%E9%9F%B3%E6%A8%99">/ɡəˈnuː slæʃ ˈlɪnəks/&lt;/a>，在口语时，经常省略掉当中的斜线“/”，&lt;a href="https://zh.wikipedia.org/wiki/%E7%90%86%E6%9F%A5%E5%BE%B7%C2%B7%E6%96%AF%E6%89%98%E6%9B%BC">理查德·斯托曼&lt;/a>建议把斜线（slash）或加（plus）念出来，因为&lt;a href="https://zh.wikipedia.org/wiki/Linux%E6%A0%B8%E5%BF%83">Linux 核心&lt;/a>并不属于 GNU 项目软件&lt;a href="https://zh.wikipedia.org/wiki/GNU/Linux%E5%91%BD%E5%90%8D%E7%88%AD%E8%AD%B0#cite_note-1">[1]&lt;/a>。&lt;/p>
&lt;h3 id="概论编辑httpszhwikipediaorgwindexphptitlegnulinuxe591bde5908de788ade8adb0actioneditsection2">概论[&lt;a href="https://zh.wikipedia.org/w/index.php?title=GNU/Linux%E5%91%BD%E5%90%8D%E7%88%AD%E8%AD%B0&amp;amp;action=edit&amp;amp;section=2">编辑&lt;/a>]&lt;/h3>
&lt;p>GNU 计划始于 1984 年，它的最终的目标是完成一套完全自由的&lt;a href="https://zh.wikipedia.org/wiki/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F">操作系统&lt;/a>。到 1991 年，Linux 内核的第一个版本公开发行时，GNU 计划已经完成了除操作系统内核之外的大部分软件，其中包括了&lt;a href="https://zh.wikipedia.org/wiki/Shell">Shell&lt;/a>程序（&lt;a href="https://zh.wikipedia.org/wiki/Bash">Bash&lt;/a>），&lt;a href="https://zh.wikipedia.org/wiki/C%E8%AF%AD%E8%A8%80">C 语言&lt;/a>程序库（&lt;a href="https://zh.wikipedia.org/wiki/Glibc">Glibc&lt;/a>）以及一个 C 语言&lt;a href="https://zh.wikipedia.org/wiki/%E7%BC%96%E8%AF%91%E5%99%A8">编译器&lt;/a>（&lt;a href="https://zh.wikipedia.org/wiki/Gcc">Gcc&lt;/a>）等等。&lt;a href="https://zh.wikipedia.org/wiki/%E6%9E%97%E7%B4%8D%E6%96%AF%C2%B7%E6%89%98%E7%93%A6%E8%8C%B2">林纳斯·托瓦兹&lt;/a>和其他早期的 Linux 开发人员使用了这些软件，而完成了&lt;a href="https://zh.wikipedia.org/wiki/Linux">Linux&lt;/a>操作系统。正是由于 Linux 使用了很多的 GNU 程序，理查德·斯托曼认为将该操作系统称为“GNU/Linux”比较恰当。
Linux 内核是在&lt;a href="https://zh.wikipedia.org/wiki/GNU%E9%80%9A%E7%94%A8%E5%85%AC%E5%85%B1%E8%AE%B8%E5%8F%AF%E8%AF%81">GNU 通用公共许可证&lt;/a>下发行的。它并不是&lt;a href="https://zh.wikipedia.org/wiki/GNU%E8%A8%88%E5%8A%83">GNU 计划&lt;/a>的一部分。一些人拒绝使用“GNU/Linux”作为操作系统名称的人认为 Linux 朗朗上口，短而好记，而且斯托曼直到 1990 年代中期 Linux 开始流行后才要求更名。
有部分&lt;a href="https://zh.wikipedia.org/wiki/Linux%E5%8F%91%E8%A1%8C%E7%89%88">Linux 发行版&lt;/a>，例如&lt;a href="https://zh.wikipedia.org/wiki/Debian">Debian&lt;/a>，采用了“GNU/Linux”的称呼。但大多数 Linux 发行版制作团队依然将操作系统称为 Linux。有些人认为“操作系统”一词指的只是系统的内核，而其他程序都只能算是&lt;a href="https://zh.wikipedia.org/wiki/%E5%BA%94%E7%94%A8%E8%BD%AF%E4%BB%B6">应用软件&lt;/a>，这么一来，该操作系统的内核应叫 Linux。
在这两个主要名称之外，也有其他名称的提议。1992 年，Yggdrasil Linux 主张命名为 Linux/GNU/X，因为除了 GNU 计划软件之外，Linux 还采用了&lt;a href="https://zh.wikipedia.org/wiki/X%E8%A6%96%E7%AA%97">X 视窗&lt;/a>。&lt;/p>
&lt;h3 id="历史编辑httpszhwikipediaorgwindexphptitlegnulinuxe591bde5908de788ade8adb0actioneditsection3">历史[&lt;a href="https://zh.wikipedia.org/w/index.php?title=GNU/Linux%E5%91%BD%E5%90%8D%E7%88%AD%E8%AD%B0&amp;amp;action=edit&amp;amp;section=3">编辑&lt;/a>]&lt;/h3>
&lt;p>1992 年，Yggdrasil Linux 提出“GNU/Linux/X”这个名称。
1992 年，在&lt;a href="https://zh.wikipedia.org/wiki/Usenet">Usenet&lt;/a>及邮件列表讨论中，首次有人使用“GNU/Linux”这个名称&lt;a href="https://zh.wikipedia.org/wiki/GNU/Linux%E5%91%BD%E5%90%8D%E7%88%AD%E8%AD%B0#cite_note-2">[2]&lt;/a>。“GNU+Linux”这个名称，则可以追溯到 1993 年&lt;a href="https://zh.wikipedia.org/wiki/GNU/Linux%E5%91%BD%E5%90%8D%E7%88%AD%E8%AD%B0#cite_note-3">[3]&lt;/a> 。
1994 年，&lt;a href="https://zh.wikipedia.org/wiki/Debian">Debian&lt;/a>项目开始使用“GNU/Linux”来称呼它们自己&lt;a href="https://zh.wikipedia.org/wiki/GNU/Linux%E5%91%BD%E5%90%8D%E7%88%AD%E8%AD%B0#cite_note-4">[4]&lt;/a>&lt;a href="https://zh.wikipedia.org/wiki/GNU/Linux%E5%91%BD%E5%90%8D%E7%88%AD%E8%AD%B0#cite_note-5">[5]&lt;/a>。&lt;/p>
&lt;h3 id="gnulinux-支持者的观点编辑httpszhwikipediaorgwindexphptitlegnulinuxe591bde5908de788ade8adb0actioneditsection4">GNU/Linux 支持者的观点[&lt;a href="https://zh.wikipedia.org/w/index.php?title=GNU/Linux%E5%91%BD%E5%90%8D%E7%88%AD%E8%AD%B0&amp;amp;action=edit&amp;amp;section=4">编辑&lt;/a>]&lt;/h3>
&lt;p>&lt;a href="https://zh.wikipedia.org/wiki/%E7%90%86%E6%9F%A5%E5%BE%B7%C2%B7%E6%96%AF%E6%89%98%E6%9B%BC">理查德·斯托曼&lt;/a>认为：&lt;/p>
&lt;blockquote>
&lt;p>今天有数千万个用户，正在使用的这个操作系统，是早就已经开发好，让他们可以自由的使用。但是他们不晓得，因为他们以为这个系统是 Linux，而它是由一个学生“只是为了好玩”（just for fun）而发展出来的&lt;a href="https://zh.wikipedia.org/wiki/GNU/Linux%E5%91%BD%E5%90%8D%E7%88%AD%E8%AD%B0#cite_note-6">[a]&lt;/a>。
——理查德·斯托曼&lt;a href="https://zh.wikipedia.org/wiki/GNU/Linux%E5%91%BD%E5%90%8D%E7%88%AD%E8%AD%B0#cite_note-7">[6]&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>并且他强调，Linux 的成功，是创建在 GNU 项目的基础上：&lt;/p>
&lt;blockquote>
&lt;p>所以，如果你要为这个操作系统选出一个名字，根据谁写了在这系统中的程序，最适合的唯一选择就是_GNU_。但我们不认为这是这个问题的正确解答。GNU 计划，过去不是，现在也不是，一个为了发展特定软件包而创建的项目。……许多人为了这个系统中的自由软件都做出了小小的贡献，而这些功劳都应该归给他们。但这之所以是个集成好的系统－而不是只是把有用的软件收集在一起－这是因为 GNU 项目着手让它成为一个完整的系统。要创建一个完整的自由系统，需要哪些软件，我们列出了名单，而且我们有计划的进行写作，或是找到人来创作这个名单中的所有软件。
——理查德·斯托曼&lt;a href="https://zh.wikipedia.org/wiki/GNU/Linux%E5%91%BD%E5%90%8D%E7%88%AD%E8%AD%B0#cite_note-8">[7]&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>他一再强调 GNU 项目的贡献，认为不应该过度强调 Linux：&lt;/p>
&lt;blockquote>
&lt;p>把一长串的名字都列出来，像是 GNU/X11/Apache/Linux/TeX/Perl/Python/FreeCiv，这显然是很荒谬的，在某种程度上，你要设个标准，省略掉许多其他次要贡献者的名字。没有一个明显的地方可以设置这个标准，所以无论你设置的标准在哪，我们都不会提出抗议。……但是考虑到公平性，以及贡献，不管标准是什么，有个名字都是不应该被使用的，那就是“Linux”。把所有的功劳都归给一个次要的贡献者（Linux），但是忽略主要的贡献者（GNU），这不会是公平的。
——理查德·斯托曼&lt;a href="https://zh.wikipedia.org/wiki/GNU/Linux%E5%91%BD%E5%90%8D%E7%88%AD%E8%AD%B0#cite_note-9">[8]&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="https://zh.wikipedia.org/wiki/%E7%90%86%E6%9F%A5%E5%BE%B7%C2%B7%E6%96%AF%E6%89%98%E6%9B%BC">理查德·斯托曼&lt;/a>认为：“GNU/Linux 这个名字，承认我们的理想，在创建我们社区上所扮演的角色，而且帮助大众认知到这些理想的实际上的重要性。”&lt;a href="https://zh.wikipedia.org/wiki/GNU/Linux%E5%91%BD%E5%90%8D%E7%88%AD%E8%AD%B0#cite_note-10">[9]&lt;/a>，这与 Linux 核心开发者，关心“技术优势”超过“自由”，可以形成对比&lt;a href="https://zh.wikipedia.org/wiki/GNU/Linux%E5%91%BD%E5%90%8D%E7%88%AD%E8%AD%B0#cite_note-11">[10]&lt;/a>&lt;a href="https://zh.wikipedia.org/wiki/GNU/Linux%E5%91%BD%E5%90%8D%E7%88%AD%E8%AD%B0#cite_note-12">[11]&lt;/a>。&lt;/p>
&lt;h3 id="linux-支持者的观点编辑httpszhwikipediaorgwindexphptitlegnulinuxe591bde5908de788ade8adb0actioneditsection5">Linux 支持者的观点[&lt;a href="https://zh.wikipedia.org/w/index.php?title=GNU/Linux%E5%91%BD%E5%90%8D%E7%88%AD%E8%AD%B0&amp;amp;action=edit&amp;amp;section=5">编辑&lt;/a>]&lt;/h3>
&lt;p>&lt;a href="https://zh.wikipedia.org/wiki/%E5%9F%83%E9%87%8C%E5%85%8B%C2%B7%E9%9B%B7%E8%92%99">埃里克·雷蒙&lt;/a>曾说：&lt;/p>
&lt;blockquote>
&lt;p>有些人反对用“Linux”这个名字只能用来指核心，而不是整个操作系统。这个主张是用来代替在底下的领土争议；坚持使用 GNU/Linux 这个名字的人，希望成就 Linux 的最大功劳应该归给&lt;a href="https://zh.wikipedia.org/wiki/FSF">FSF&lt;/a>，因为史托曼跟他的朋友写了许多用户层级的工具。这个理论，或是 GNU/Linux 这个名称，都没有得到很大的支持&lt;a href="https://zh.wikipedia.org/wiki/GNU/Linux%E5%91%BD%E5%90%8D%E7%88%AD%E8%AD%B0#cite_note-13">[12]&lt;/a>。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="https://zh.wikipedia.org/wiki/%E6%9E%97%E7%BA%B3%E6%96%AF%C2%B7%E6%89%98%E7%93%A6%E5%85%B9">林纳斯·托瓦兹&lt;/a>个人倾向于使用 Linux 这个名称，但并不强烈反对 GNU/Linux 这个名字。他在访谈中表示：&lt;/p>
&lt;blockquote>
&lt;p>呣，关于这个的讨论已经持续很久了，非常感谢你。人们怎么称呼 Linux 并不是个大问题，至少功劳已经都归给有功劳的人了（两边都是）。就我个人来说，我会继续叫它_Linux_，……GNU 的人希望称呼它 GNU/Linux，这没问题。它是跟“Linux Pro”或“Red Hat Linux”或“Slackware Linux”这些名称一样好的名称。……Lignux 这个名称只是开玩笑取的，我觉得 Linux/GNU 或 GNU/Linux 有点更“专业”……&lt;a href="https://zh.wikipedia.org/wiki/GNU/Linux%E5%91%BD%E5%90%8D%E7%88%AD%E8%AD%B0#cite_note-14">[13]&lt;/a>&lt;a href="https://zh.wikipedia.org/wiki/GNU/Linux%E5%91%BD%E5%90%8D%E7%88%AD%E8%AD%B0#cite_note-15">[14]&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>在接受记录片《&lt;a href="https://zh.wikipedia.org/wiki/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A9%E5%91%BD">操作系统革命&lt;/a>》（Revolution OS）访谈时，&lt;a href="https://zh.wikipedia.org/wiki/%E6%9E%97%E7%BA%B3%E6%96%AF%C2%B7%E6%89%98%E7%93%A6%E5%85%B9">林纳斯·托瓦兹&lt;/a>表达对 GNU/Linux 这个名称的想法，他表示：&lt;/p>
&lt;blockquote>
&lt;p>好的，我认为这个称呼是合理的，但只有你真的做了一个 Linux 的 GNU 发行版时，这才是合理的……这就像是我觉得“Red Hat Linux”，或“SuSE Linux” 或“Debian Linux”这些名称是很好的，因为如果你真的做了一个你自己的 Linux 发行版时，你必须要帮它取个名称，但是要把 Linux 全部通称“GNU Linux”，我觉得这很荒谬。&lt;a href="https://zh.wikipedia.org/wiki/GNU/Linux%E5%91%BD%E5%90%8D%E7%88%AD%E8%AD%B0#cite_note-16">[15]&lt;/a>&lt;a href="https://zh.wikipedia.org/wiki/GNU/Linux%E5%91%BD%E5%90%8D%E7%88%AD%E8%AD%B0#cite_note-17">[16]&lt;/a>&lt;a href="https://zh.wikipedia.org/wiki/GNU/Linux%E5%91%BD%E5%90%8D%E7%88%AD%E8%AD%B0#cite_note-18">[17]&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>许多用户支持使用 Linux 这个名称来称呼这整个操作系统，因为这可以概括作业系中其他非核心组件、也非 GNU 的软件，例如&lt;a href="https://zh.wikipedia.org/wiki/Apache_HTTP_Server">Apache HTTP Server&lt;/a>、&lt;a href="https://zh.wikipedia.org/wiki/KDE">KDE&lt;/a>与&lt;a href="https://zh.wikipedia.org/wiki/X_Window%E7%B3%BB%E7%B5%B1">X 窗口系统&lt;/a>。&lt;a href="https://zh.wikipedia.org/wiki/X_Window%E7%B3%BB%E7%B5%B1">X 窗口系统&lt;/a>的创始者之一，&lt;a href="https://zh.wikipedia.org/w/index.php?title=%E5%90%89%E5%A7%86%C2%B7%E6%9D%B0%E6%8F%90%E6%96%AF&amp;amp;action=edit&amp;amp;redlink=1">吉姆·杰提斯&lt;/a>（Jim Gettys）认为：“&lt;/p>
&lt;blockquote>
&lt;p>在这台巴士上有许多的人；我没听到有人在大声的要求，支持 GNU 是比其他许多组件更必要的；你不能把轮胎，或是引擎，或是座椅拿走，这会让车子的功能停摆。我建议大家应该要高兴，我们有一台完整的车。&lt;a href="https://zh.wikipedia.org/wiki/GNU/Linux%E5%91%BD%E5%90%8D%E7%88%AD%E8%AD%B0#cite_note-19">[18]&lt;/a>&lt;a href="https://zh.wikipedia.org/wiki/GNU/Linux%E5%91%BD%E5%90%8D%E7%88%AD%E8%AD%B0#cite_note-20">[19]&lt;/a>&lt;/p>
&lt;/blockquote></description></item><item><title>Docs: IETF</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/standardizedglossary%E6%A0%87%E5%87%86%E5%8C%96%E6%9C%AF%E8%AF%AD/internet%E4%BA%92%E8%81%94%E7%BD%91/ietf/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/standardizedglossary%E6%A0%87%E5%87%86%E5%8C%96%E6%9C%AF%E8%AF%AD/internet%E4%BA%92%E8%81%94%E7%BD%91/ietf/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Internet_Engineering_Task_Force">WIki-IETF&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.ietf.org/">官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://datatracker.ietf.org/">IETF 存储哭搜索页&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>**Internet Engineering Task Force(互联网工程工作组，简称 IETF) **是一个开放标准组织，其开发和促进自愿互联网标准，特别是包括互联网协议套件(TCP/IP)的标准。它没有正式的会员名单或会员要求。所有参与者和经理都是志愿者，尽管他们的工作通常由雇主或赞助商资助。&lt;/p>
&lt;p>IETF 是首屈一指的互联网标准组织。它遵循设置这些标准的开放且有据可查的流程。一旦发布，这些标准将免费提供。&lt;/p>
&lt;h2 id="互联网标准">互联网标准&lt;/h2>
&lt;p>&lt;a href="https://www.ietf.org/standards/">https://www.ietf.org/standards/&lt;/a>&lt;/p>
&lt;ul>
&lt;li>RFCs(征求意见稿)&lt;/li>
&lt;li>IANA(互联网号码分配机构)&lt;/li>
&lt;li>Standards process(标准流程)&lt;/li>
&lt;li>Internet Drafts(互联网草案)&lt;/li>
&lt;li>Intellectual Property Rights(知识产权)&lt;/li>
&lt;/ul>
&lt;h1 id="rfc-概述">RFC 概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Request_for_Comments">Wiki-RFC&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.rfc-editor.org/search/rfc_search.php">RFC 存储库搜索&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.rfc-editor.org/">RFC Editor 存储库搜索&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>**Request for Comments(征求意见，简称 RFC)**是互联网协会（ISOC）及其相关机构的出版物，最突出的互联网工程工作组（IETF），互联网的主要技术开发和标准制定机构。&lt;/p>
&lt;h1 id="rfc-文档阅读方法">RFC 文档阅读方法&lt;/h1>
&lt;p>参考：&lt;a href="https://zhuanlan.zhihu.com/p/44635072">知乎&lt;/a>
Obsoleted by: NUM # 是当前文档的下一版。可以描述为：当前文档被 NUM 淘汰。也就是说：对于 NUM 文档来说，当前文档已过时。
Updated by: NUM # 是当前文档的早期版本。可以描述为：当前文档被 NUM 更新。也就是说：对于 NUM 文档来说，当前文档是已更新的。
Obsoletes: NUM # 对于当前版本，NUM 是过时的
Updates: NUM # 对于当前版本，NUM 是最新的&lt;/p>
&lt;h2 id="如何阅读-rfc">&lt;strong>如何阅读 RFC&lt;/strong>&lt;/h2>
&lt;p>来源： &lt;a href="https://link.zhihu.com/?target=https%3A//www.mnot.net/blog/standards/">How to read RFC?&lt;/a>
无论好坏，请求注释文档（RFC）包含了我们在 Internet 上遇到的许多协议。这些 RFC 文档被开发人员视为圣经，他们会试着去发现隐藏的含义，即使无法理解也无关紧要。虽然这通常会导致挫败感 - 但更重要的是 - RFC 其中的操作性和安全性思考。
然而，根据我对 HTTP 和&lt;a href="https://link.zhihu.com/?target=https%3A//datatracker.ietf.org/person/Mark%2520Nottingham">其他一些事情的&lt;/a>经验和收获，我们通过对 RFC 如何构建和发布的一些了解，可以更容易理解正在查看的 RFC 内容。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://link.zhihu.com/?target=https%3A//www.mnot.net/blog/2018/07/31/read_rfc%23where-to-start">从哪儿开始阅读？&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://link.zhihu.com/?target=https%3A//www.mnot.net/blog/2018/07/31/read_rfc%23what-kind-of-rfc-is-it">它是什么类型的 RFC？&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://link.zhihu.com/?target=https%3A//www.mnot.net/blog/2018/07/31/read_rfc%23is-it-current">RFC 是最新的吗？&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://link.zhihu.com/?target=https%3A//www.mnot.net/blog/2018/07/31/read_rfc%23understanding-context">理解 RFC 背景&lt;/a>&lt;/li>
&lt;li>RFC 语法要求&lt;a href="https://link.zhihu.com/?target=https%3A//www.mnot.net/blog/2018/07/31/read_rfc%23should">SHOULD&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://link.zhihu.com/?target=https%3A//www.mnot.net/blog/2018/07/31/read_rfc%23reading-examples">RFC 阅读技巧实例&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://link.zhihu.com/?target=https%3A//www.mnot.net/blog/2018/07/31/read_rfc%23on-abnf">ABNF&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://link.zhihu.com/?target=https%3A//www.mnot.net/blog/2018/07/31/read_rfc%23security-considerations">考虑安全因素&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://link.zhihu.com/?target=https%3A//www.mnot.net/blog/2018/07/31/read_rfc%23finding-out-more">更多&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="1从哪儿开始阅读">&lt;strong>1.从哪儿开始阅读？&lt;/strong>&lt;/h2>
&lt;p>查找 RFC 的规范位置是 &lt;a href="https://www.rfc-editor.org/">RFC Editor 网站&lt;/a>。但是，正如我们将在下面看到的那样，RFC 编辑器缺少一些关键信息，因此大多数人都使用 &lt;a href="https://link.zhihu.com/?target=https%3A//tools.ietf.org/">tools.ietf.org&lt;/a>。
即使找到合适的 RFC 也很困难，因为有这么多的 RFC（目前，将近 9,000 份）。显然，您可以使用通用 Web 搜索引擎找到它们，并且 RFC 编辑器在其站点上具有出色的搜索功能。
另一个方式是&lt;a href="https://link.zhihu.com/?target=https%3A//everyrfc.org/">EveryRFC&lt;/a>，我将它放在一起，以便按标题和关键字搜索 RFC，并按标签进行探索。
毫无疑问，纯文本 RFC 难以阅读，这种情况可以通过一些方式改变; RFC 编辑器正在包含一种&lt;a href="https://link.zhihu.com/?target=https%3A//www.rfc-editor.org/rse/format-faq/">新的 RFC 格式&lt;/a>，具有更令人满意的演示和自定义选项。与此同时，如果您想要更多可用的 RFC，您可以将第三方存储库用于选定的存储库; 例如，&lt;a href="https://link.zhihu.com/?target=https%3A//greenbytes.de/tech/webdav/">greenbytes&lt;/a>保留与 WebDAV 相关的 RFC 列表，&lt;a href="https://link.zhihu.com/?target=https%3A//httpwg.org/specs/">HTTP 工作组&lt;/a>维护与 HTTP 相关的 RFC。&lt;/p>
&lt;h2 id="2它是什么类型的-rfc">&lt;strong>2.它是什么类型的 RFC？&lt;/strong>&lt;/h2>
&lt;p>所有 RFC 在顶部都有一个横幅，看起来像这样：&lt;/p>
&lt;pre>&lt;code>Internet Engineering Task Force (IETF) R. Fielding, Ed.
Request for Comments: 7230 Adobe
Obsoletes: 2145, 2616 J. Reschke, Ed.
Updates: 2817, 2818 greenbytes
Category: Standards Track June 2014
ISSN: 2070-1721
&lt;/code>&lt;/pre>
&lt;p>在左上角，这个说“互联网工程任务组（IETF）”。这表明这是 IETF 的产品; 虽然它并不广为人知，但还有其他方法可以发布不需要 IETF 共识的 RFC; 例如，&lt;a href="https://link.zhihu.com/?target=https%3A//www.rfc-editor.org/about/independent/">独立媒体&lt;/a>。
实际上，许多“媒体”在 RFC 编辑器文档上发布了 RFC 文档。但要注意，&lt;strong>只有 IETF 流表明整个 IETF 已经审核并已就协议规范达成了共识&lt;/strong>。
在较旧的文档（在 RFC5705 之前）在那里 IETF 被称为“网络工作组”，因此你需要多挖掘一下，看看它们是否代表了 IETF 的共识; 查看&lt;a href="https://link.zhihu.com/?target=https%3A//www.rfc-editor.org/">RFC 编辑器站点&lt;/a>“Status of this Memo ”部分可以了解标识情况。
在确认“请求文档”编号之前。&lt;strong>它被称为“Internet-Draft 互联网草案”，而不是 RFC&lt;/strong> ; 说明这还只是一个提案，任何人都 &lt;a href="https://link.zhihu.com/?target=https%3A//datatracker.ietf.org/submit/">可以写一个&lt;/a>草案。仅仅因为某些东西是互联网草案但并不意味着它将被 IETF 采用。
RFC 的&lt;strong>类别&lt;/strong>是“标准跟踪”，“信息”，“实验”或“最佳实践”之一。这些之间的区别有时是模糊的，但如果它是由 IETF（互联网工程组）产生的，那么它就有了合理的审查。但请注意，即使 IETF 已达成共识，&lt;strong>信息&lt;/strong>和&lt;strong>实验&lt;/strong>也不是标准。
最后，RFC 文档的&lt;strong>作者&lt;/strong>会在标题的右侧著名。与学术界不同，这不是一份全面的文件清单; 通常，这是在“致谢”部分的底部附近完成的。在 RFC 中，这实际上是“谁编写了文档。”通常，您会看到附加的“Ed。”，这表明它们充当编辑人员，这是因为 RFC 或者草案是预先存在的（就像 RFC 修订时一样））。&lt;/p>
&lt;h2 id="3rfc-是最新的吗">&lt;strong>3.RFC 是最新的吗？&lt;/strong>&lt;/h2>
&lt;p>“RFC 是一系列档案文件; 他们不能改变，即使是一个字符也不能改变”（参见&lt;a href="https://link.zhihu.com/?target=https%3A//tools.ietf.org/rfcdiff%3Furl1%3Drfc7158%26url2%3Drfc7159">RFC7158 和 RFC7159 之间&lt;/a>的&lt;a href="https://link.zhihu.com/?target=https%3A//tools.ietf.org/rfcdiff%3Furl1%3Drfc7158%26url2%3Drfc7159">差异&lt;/a>这样做是极端的;）。
因此，知道您正在查看正确的文档非常重要。标题包含几个元数据，可以帮助明白这是关于什么内容的 RFC：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Obsoletes&lt;/strong>列出了完全被取代的 RFC 文档（取代文档会比旧文档大）; 即，你应该使用这个文件，而不是那个。请注意，旧版本的协议不一定会在较新版本的协议出现时废弃; 例如，HTTP / 2 不会废弃 HTTP / 1.1，因为实现旧协议仍然是合法的（也是必要的）。但是，RFC7230 确实废弃了 RFC2616，RFC2616 是该协议的参考。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/zwxdg5/1618283937874-fed16b60-0dda-4fbd-9d00-f9d3d8a43c20.jpeg" alt="">&lt;/p>
&lt;ul>
&lt;li>&lt;strong>update&lt;/strong>列出了本文档进行实质性更改的 RFC; 换句话说，如果你正在阅读这边 RFC 文档，同时也应该阅读这些 Update RFC 文章。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/zwxdg5/1618283937793-3b3e3793-6810-4627-b420-190386ac8d0c.jpeg" alt="">&lt;/p>
&lt;p>遗憾的是，ASCII 格式文本 RFC（例如，在 RFC 编辑器站点上的 RFC）不会告诉你当前正在查看的文档哪些文档更新或废弃了。这就是大多数人在&lt;a href="https://link.zhihu.com/?target=http%3A//tools.ietf.org">http://tools.ietf.org&lt;/a>上使用 RFC 存储库的原因，它将这些信息放在这样的&lt;a href="https://link.zhihu.com/?target=https%3A//tools.ietf.org/html/rfc2616">Banner&lt;/a>：&lt;/p>
&lt;pre>&lt;code>[Docs] [txt|pdf] [draft-ietf-http...] [Tracker] [Diff1] [Diff2] [Errata]
Obsoleted by: 7230, 7231, 7232, 7233, 7234, 7235 DRAFT STANDARD
Updated by: 2817, 5785, 6266, 6585 Errata Exist
&lt;/code>&lt;/pre>
&lt;p>工具页面上的每个数字都是一个链接，因此您可以轻松找到当前文档。
即使是最新的 RFC 也经常出现问题。在工具横幅中，您还会在右侧看到“Errata Exist”上面的勘误表链接警告。
&lt;strong>勘误表 Errata&lt;/strong>是对文档的更正和澄清，更正和澄清是不值得发布新的 RFC。但有时它们会对 RFC 的实现方式产生重大影响（例如，如果规范中的错误是一个严重的错误），那么它们值得通过。
例如，这是&lt;a href="https://link.zhihu.com/?target=https%3A//www.rfc-editor.org/errata_search.php%3Frfc%3D7230">RFC7230&lt;/a>的&lt;a href="https://link.zhihu.com/?target=https%3A//www.rfc-editor.org/errata_search.php%3Frfc%3D7230">勘误表 Errata&lt;/a>。当阅读勘误表时，请记住他们的状态; 许多人的修订被拒绝，因为有人误解了规范。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/zwxdg5/1618283937883-ea04793f-1070-497d-85db-9870a38e9d99.jpeg" alt="">&lt;/p>
&lt;h2 id="4理解-rfc-背景">&lt;strong>4.理解 RFC 背景&lt;/strong>&lt;/h2>
&lt;p>对于开发人员来说，查看 RFC 中的语句，实现他们看到的内容，但实际会与作者的意图相反，这种情况比想象中更为常见。
这是因为在选择性地阅读规范时，以一种不能被误解的方式编写规范是极其困难的（任何仿佛圣经一样的文档都会出现类似情况）。
因此，不仅需要阅读直接相关的文本，还必须（至少）阅读它引用的任何相关内容，无论是相同的规范还是不同的规范。如果您无法阅读整个 RFC，那么通过阅读任何可能相关的部分也会有很大帮助。
例如，HTTP 消息头被&lt;a href="https://link.zhihu.com/?target=https%3A//httpwg.org/specs/rfc7230.html%23http.message">定义&lt;/a>为由 CRLF（回车\r 换行\n）分隔，但是如果你在&lt;a href="https://link.zhihu.com/?target=https%3A//httpwg.org/specs/rfc7230.html%23message.robustness">这里&lt;/a>跳过，你会看到“收件人可以将单个 LF（换行\n）识别为行终止符并忽略任何前面的 CR（回车\n）。”
同样重要的是要记住，许多协议都设立了&lt;a href="https://link.zhihu.com/?target=https%3A//www.iana.org/protocols">IANA 注册&lt;/a>管理&lt;a href="https://link.zhihu.com/?target=https%3A//www.iana.org/protocols">机构&lt;/a>来管理其扩展点; 这些注册管理机构不是规范，是事实的来源。例如，HTTP 方法的规范列表在&lt;a href="https://link.zhihu.com/?target=https%3A//www.iana.org/assignments/http-methods/http-methods.xhtml">此注册表中&lt;/a>，而不是任何 HTTP 规范。&lt;/p>
&lt;h2 id="5rfc-语法要求">&lt;strong>5.RFC 语法要求&lt;/strong>&lt;/h2>
&lt;p>几乎所有的 RFC 都有类似于顶部的样板：&lt;/p>
&lt;pre>&lt;code>The key words &amp;quot;MUST&amp;quot;, &amp;quot;MUST NOT&amp;quot;, &amp;quot;REQUIRED&amp;quot;, &amp;quot;SHALL&amp;quot;, &amp;quot;SHALL NOT&amp;quot;,
&amp;quot;SHOULD&amp;quot;, &amp;quot;SHOULD NOT&amp;quot;, &amp;quot;RECOMMENDED&amp;quot;, &amp;quot;NOT RECOMMENDED&amp;quot;, &amp;quot;MAY&amp;quot;, and
&amp;quot;OPTIONAL&amp;quot; in this document are to be interpreted as described in
BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
capitals, as shown here.
&lt;/code>&lt;/pre>
&lt;p>这些&lt;a href="https://link.zhihu.com/?target=https%3A//tools.ietf.org/html/rfc2119">RFC2119&lt;/a>关键字有助于定义互操作性，但它们有时也&lt;a href="https://link.zhihu.com/?target=https%3A//tools.ietf.org/html/rfc2119">会使&lt;/a>开发人员感到困惑。看到规范说出如下内容是很常见的：&lt;/p>
&lt;pre>&lt;code>The Foo message MUST NOT contain a Bar header.
&lt;/code>&lt;/pre>
&lt;p>该要求被置于协议假象“Foo message”上。如果您要发送一个，很明显它不需要包含 Bar header; 如果你包含一个，它将不是一个符合要求的消息。
但是，收件人的行为不太清楚; 如果你看到带有“Bar header“的“Foo message“，你会怎么做？
一些开发人员会拒绝包含“Bar header“的“Foo message“，即使规范没有说明这样做。其他人仍将处理消息，但剥离 Bar header，或忽略 Bar header - 即使规范明确指出需要处理所有 header。
所有这些事情都可能 -或者无意中 - 导致一些互操作性问题。正确的做法是遵循标题的正常处理，&lt;strong>除非有相反的特定要求&lt;/strong>。
这是因为通常会写规范以便明确指定行为; 换句话说，允许未明确禁止的所有内容（只要没说的都是允许，但是一旦严格规定就需要严格遵循）。因此，过多地阅读规范可能会无意中造成伤害，因为你会被引入其他人必须解决的新思维。
在理想的世界中，规范将根据处理消息的人的行为来定义，如下所示：&lt;/p>
&lt;pre>&lt;code>Senders of the Foo message MUST NOT include a Bar header. Recipients
of a Foo message that includes a Bar header MUST ignore the Bar header,
but MUST NOT remove it.
&lt;/code>&lt;/pre>
&lt;p>如果没有这个，最好在规范的其他地方寻找有关错误处理的更加一般的建议（例如，HTTP 的&lt;a href="https://link.zhihu.com/?target=https%3A//httpwg.org/specs/rfc7230.html%23conformance">一致性和错误处理&lt;/a>部分）。
另外，请记住要求的目标 ：大多数规范都有一套高度发展的术语，用于区分协议中的不同角色。
例如，HTTP 具有&lt;a href="https://link.zhihu.com/?target=https%3A//httpwg.org/specs/rfc7230.html%23intermediaries">代理&lt;/a>，&lt;a href="https://link.zhihu.com/?target=https%3A//httpwg.org/specs/rfc7230.html%23intermediaries">代理&lt;/a>是一种中介，它实现客户端和服务器（但不是用户代理或源服务器）; 他们需要关注针对所有这些角色的要求。
同样，HTTP 根据具体情况区分“生成”消息并仅在某些要求中“转发”消息。注意这种特定的术语可以为你节省很多猜测。&lt;/p>
&lt;h2 id="should">SHOULD&lt;/h2>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/zwxdg5/1618283938058-68f4c249-bd67-431b-b432-50f3646251dc.jpeg" alt="">&lt;/p>
&lt;p>是的，应该得到自己的部分。尽管努力消除它，但这个多余的术语困扰着许多 RFC。RFC2119 将其描述为：&lt;/p>
&lt;pre>&lt;code>SHOULD This word, or the adjective &amp;quot;RECOMMENDED&amp;quot;, mean that there
may exist valid reasons in particular circumstances to ignore a
particular item, but the full implications must be understood and
carefully weighed before choosing a different course.
&lt;/code>&lt;/pre>
&lt;p>在实践中，作者经常使用 SHOULD 和 SHOULD NOT，这表示“我们希望你这样做，但我们知道我们不能总是要求这么做。”
例如，在&lt;a href="https://link.zhihu.com/?target=https%3A//httpwg.org/specs/rfc7231.html%23method.overview">HTTP 方法&lt;/a>的&lt;a href="https://link.zhihu.com/?target=https%3A//httpwg.org/specs/rfc7231.html%23method.overview">概述中&lt;/a>，我们看到：&lt;/p>
&lt;pre>&lt;code>When a request method is received that is unrecognized or not
implemented by an origin server, the origin server SHOULD respond
with the 501 (Not Implemented) status code. When a request method
is received that is known by an origin server but not allowed for
the target resource, the origin server SHOULD respond with the 405
(Method Not Allowed) status code.
&lt;/code>&lt;/pre>
&lt;p>这个 SHOULD 不是必须的，因为服务器可能会合理地决定采取另一个行动; 如果请求被认为是来自攻击者的客户端，则可能丢弃连接，或者要求 HTTP 身份验证，则可能会在到达 405 之前使用 401（未经过身份验证）强制执行该请求。
SHOULD 并不意味着服务器可以自由地忽略一个要求，这看起来对 RFC 不太尊重。
有时候，我们会&lt;a href="https://link.zhihu.com/?target=https%3A//httpwg.org/specs/rfc7231.html%23multipart.types">看到&lt;/a>一个遵循这种形式的 SHOULD 部分：&lt;/p>
&lt;pre>&lt;code>A sender that generates a message containing a payload body SHOULD
generate a Content-Type header field in that message unless the
intended media type of the enclosed representation is unknown to
the sender.
&lt;/code>&lt;/pre>
&lt;p>注意“除非 unless” - 它指定了应该允许的“特殊情况”。可以说这可以指定为 SHOULD，因为 Unless 部分仍然适用，但这种规范风格有点普遍。&lt;/p>
&lt;h2 id="6rfc-阅读实例">&lt;strong>6.RFC 阅读实例&lt;/strong>&lt;/h2>
&lt;p>另一个非常常见的缺陷是浏览示例的规范，并实现它们的功能。
不幸的是，示例通常得到作者最少的关注，因为它们需要随协议的每次更改而更新。
因此，它们通常是规范中最不可靠的部分。是的，作者应该在发布前绝对仔细检查这些例子，但错误确实会出现纰漏。
此外，即使是一个完美的例子也可能无法说明是关于你正在寻找的协议的相关; 为简洁起见，它们经常被截断，或者在解码发生后显示。
尽管需要更多时间，但最好还是阅读实际文本; 示例 Examples 不是 RFC 规范。&lt;/p>
&lt;h2 id="7abnf">&lt;strong>7.ABNF&lt;/strong>&lt;/h2>
&lt;p>&lt;a href="https://link.zhihu.com/?target=https%3A//tools.ietf.org/html/rfc5234">增强型 BNF&lt;/a>通常用于定义伪协议。例如：&lt;/p>
&lt;pre>&lt;code>FooHeader = 1#foo
foo = 1*9DIGIT [ &amp;quot;;&amp;quot; &amp;quot;bar&amp;quot; ]
&lt;/code>&lt;/pre>
&lt;p>一旦你习惯了它，ABNF 提供了一个易于理解的协议元素应该是什么样子的草图。
但是，ABNF 是“有理想和抱负的” - 它确定了一个理想的消息形式，而你生成的那些消息确实需要与之匹配。它没有指定如何处理未能匹配的已接收消息。事实上，很多规范关于在处理所有协议上很难说清楚和 ABNF 的关系。
如果你试图严格执行他们的 ABNF，大多数协议将会严重失败，但有时它很重要。在上面的例子中，分号周围不允许有空格，但你可以打赌有些人会把它放在那里，有些实现过程中会接受它。
因此，请确保阅读 ABNF 周围的文本以了解其他要求或上下文联系，并意识到如果没有直接要求，您可能必须将解析调整为比 ABNF 暗示的更容易接受的输入。
一些规范开始承认 ABNF 的期望性质并指定包含错误处理的显式解析算法。如果指定 ABNF，应严格遵循这些，以确保互操作性。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/zwxdg5/1618283937918-0dd17044-0b0b-4764-ac24-263f9f14447e.jpeg" alt="">&lt;/p>
&lt;h2 id="8考虑安全因素">&lt;strong>8.考虑安全因素&lt;/strong>&lt;/h2>
&lt;p>自&lt;a href="https://link.zhihu.com/?target=https%3A//tools.ietf.org/html/rfc3552">RFC3552&lt;/a>以来，RFC 样式包含了“安全注意事项”部分。
因此，如果没有关于安全性的实质性部分，很少发布 RFC; 审核流程不允许草案只是说“此协议没有考虑安全因素”。
因此，无论您是在实施还是部署协议，都必须阅读并确保您了解“安全注意事项”部分; 如果你不这样做，很可能会有一些东西会让你不知所措（没有考虑的安全因素）。
遵循其参考（如果有的话）也是一个好主意。如果没有，请尝试查找用于理解所讨论问题的一些术语。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/zwxdg5/1618283938062-7651f582-76f3-42a2-9c97-024799c28338.jpeg" alt="">&lt;/p>
&lt;h2 id="9发现更多">&lt;strong>9.发现更多&lt;/strong>&lt;/h2>
&lt;p>如果 RFC 没有回答您的问题，或者您不确定其文本的意图，最好的办法是找到最相关的&lt;a href="https://link.zhihu.com/?target=https%3A//datatracker.ietf.org/wg/">工作组&lt;/a>并在他们的邮件列表中提出问题。如果没有涉及相关主题的活动工作组，请尝试相应&lt;a href="https://link.zhihu.com/?target=https%3A//ietf.org/topics/areas/">区域&lt;/a>的邮件列表。
提交勘误通常不是您应该采取的第一步 - 第一步一般是：与某人交谈。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/zwxdg5/1618283938138-fce8f68d-637b-4752-9a0b-e6a544c76123.jpeg" alt="">&lt;/p>
&lt;p>许多工作组现在正在使用 Github 来管理他们的规范; 如果您对有效规范有疑问，请继续提交问题。如果它已经是 RFC，通常最好使用邮件列表，除非您找到截然不同的指示。
我确信还有更多关于如何阅读 RFC 的文章，有些人会质疑我在这里写的内容，但这就是我对它们的看法。我希望它很有用。&lt;/p>
&lt;h2 id="附加">&lt;strong>附加&lt;/strong>&lt;/h2>
&lt;p>&lt;a href="https://link.zhihu.com/?target=https%3A//www.rfc-editor.org/rfc-index-100a.html">https://www.rfc-editor.org/rfc-index-100a.html&lt;/a>
&lt;a href="https://link.zhihu.com/?target=https%3A//tools.ietf.org/rfc/index">https://tools.ietf.org/rfc/index&lt;/a>
发布于 2018-09-15&lt;/p></description></item><item><title>Docs: Internet(互联网)</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/standardizedglossary%E6%A0%87%E5%87%86%E5%8C%96%E6%9C%AF%E8%AF%AD/internet%E4%BA%92%E8%81%94%E7%BD%91/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/standardizedglossary%E6%A0%87%E5%87%86%E5%8C%96%E6%9C%AF%E8%AF%AD/internet%E4%BA%92%E8%81%94%E7%BD%91/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Internet">Wiki,Internet&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="互联网治理组织">互联网治理组织&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Category:Internet_governance_organizations">Wiki-Category,Internet governance organizations&lt;/a>(互联网治理组织)&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>**Internet Assigned Numbers Authority(互联网号码分配局，简称 IANA) **是一个标准组织，负责监督全球&lt;a href="https://en.wikipedia.org/wiki/IP_address">IP 地址&lt;/a>分配、&lt;a href="https://en.wikipedia.org/wiki/Autonomous_system_(Internet)">自治系统&lt;/a>号码分配、域名系统 (DNS) 中的&lt;a href="https://en.wikipedia.org/wiki/DNS_root_zone">根区管理、&lt;/a>&lt;a href="https://en.wikipedia.org/wiki/Internet_media_type">媒体类型&lt;/a>以及其他与&lt;a href="https://en.wikipedia.org/wiki/Internet_Protocol">互联网协议&lt;/a>相关的符号和互联网号码。&lt;/p>
&lt;p>&lt;strong>Internet Corporation for Assigned Names and Numbers(互联网名称与数字地址分配机构，简称 ICANN)&lt;/strong> 是一个美国&lt;a href="https://en.wikipedia.org/wiki/Multistakeholder_governance">多利益相关方团体&lt;/a>和非营利&lt;a href="https://en.wikipedia.org/wiki/Nonprofit_organization">组织&lt;/a>，负责协调与&lt;a href="https://en.wikipedia.org/wiki/Internet">Internet 的&lt;/a>&lt;a href="https://en.wikipedia.org/wiki/Namespace">命名空间&lt;/a>和数字空间相关的多个&lt;a href="https://en.wikipedia.org/wiki/Database">数据库&lt;/a>的维护和程序，确保网络稳定安全运行。ICANN 执行中央互联网地址池和&lt;a href="https://en.wikipedia.org/wiki/DNS_root_zone">DNS 根区&lt;/a>注册管理机构的实际技术维护工作&lt;a href="https://en.wikipedia.org/wiki/Internet_Assigned_Numbers_Authority">互联网号码分配机构&lt;/a>(IANA) 功能合同。ICANN 与&lt;a href="https://en.wikipedia.org/wiki/United_States_Department_of_Commerce">美国商务部&lt;/a>&lt;a href="https://en.wikipedia.org/wiki/National_Telecommunications_and_Information_Administration">国家电信和信息管理局&lt;/a>(NTIA)之间关于 IANA&lt;a href="https://en.wikipedia.org/wiki/Stewardship">管理&lt;/a>职能的合同于 2016 年 10 月 1 日结束，正式将职能移交给全球&lt;a href="https://en.wikipedia.org/wiki/Multistakeholder_governance">多利益相关方社群&lt;/a>。&lt;/p>
&lt;p>&lt;strong>Interne Engineering Task Force(互联网工程工作组，简称 IETF)&lt;/strong> 是一个开放标准组织，其开发和促进自愿互联网标准，特别是包括互联网协议套件(TCP/IP)的标准。它没有正式的会员名单或会员要求。所有参与者和经理都是志愿者，尽管他们的工作通常由雇主或赞助商资助。IETF 是首屈一指的互联网标准组织。它遵循设置这些标准的开放且有据可查的流程。一旦发布，这些标准将免费提供。&lt;/p>
&lt;p>**Internet Research Task Force(互联网研究任务组，简称 IRTF) **专注于 与 互联网相关的长期研究问题，而平行组织 互联网工程任务组 ( &lt;a href="https://ietf.org/">IETF&lt;/a> ) 则专注于工程和标准制定的短期问题。&lt;/p>
&lt;h1 id="internet-archive互联网档案馆">Internet Archive(互联网档案馆)&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Internet_Archive">Wiki,Internet_Archive&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Internet Archive(互联网档案馆) 是一个美国数字图书馆，其使命是“普及所有知识”。&lt;/p></description></item><item><title>Docs: Linux Foundation(Linux 基金会)</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/standardizedglossary%E6%A0%87%E5%87%86%E5%8C%96%E6%9C%AF%E8%AF%AD/foundation%E5%9F%BA%E9%87%91%E4%BC%9A/linux-foundationlinux-%E5%9F%BA%E9%87%91%E4%BC%9A/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/standardizedglossary%E6%A0%87%E5%87%86%E5%8C%96%E6%9C%AF%E8%AF%AD/foundation%E5%9F%BA%E9%87%91%E4%BC%9A/linux-foundationlinux-%E5%9F%BA%E9%87%91%E4%BC%9A/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;a href="https://en.wikipedia.org/wiki/Linux_Foundation">Wiki&lt;/a>、&lt;a href="https://www.linuxfoundation.org/">官网&lt;/a>、&lt;a href="https://wiki.linuxfoundation.org/">官网 Wiki&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>Linux Foundation(Linux 基金会，简称 LF)&lt;/strong>，是一家非营利性技术贸易协会，致力于促进，保护和推进 Linux 和 协同开发，并支持“历史上最大的共享技术资源”[2]。它开始于 2000 年的开源码发展实验室（OSDL），并与自由标准组织（FSG）合并后从而成为现在的组织。Linux 基金会赞助 Linux 创始人 Linus Torvalds 和主管维护者 Greg Kroah-Hartman 的工作 并由领导 Linux 和开源公司的支持，包括思科，富士通，惠普[3]，IBM，英特尔，微软[4]，NEC，甲骨文，高通和三星[5]等知名的科技公司，以及来自全世界的开发商 。近年来，Linux 基金会通过活动，培训和认证以及开源项目扩大了服务范围。&lt;/p>
&lt;h2 id="io-visor-project">IO Visor Project&lt;/h2>
&lt;p>官网：&lt;a href="https://www.iovisor.org/">https://www.iovisor.org/&lt;/a>&lt;/p></description></item><item><title>Docs: Transaction(事务)</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/standardizedglossary%E6%A0%87%E5%87%86%E5%8C%96%E6%9C%AF%E8%AF%AD/transaction%E4%BA%8B%E5%8A%A1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/standardizedglossary%E6%A0%87%E5%87%86%E5%8C%96%E6%9C%AF%E8%AF%AD/transaction%E4%BA%8B%E5%8A%A1/</guid><description>
&lt;p>事务的意思是这样的：假设某个数据可能需要经过A、B、C、D几个步骤才能修改完毕，我们把这四个步骤打包放到事务中，那么事务就可以确保这四个步骤要么全部执行完毕，要么全部都不去执行。这样即使在任意一个步骤断电或者程序崩溃都不会影响到数据的一致性问题。&lt;/p></description></item><item><title>Docs: 常用英文</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/standardizedglossary%E6%A0%87%E5%87%86%E5%8C%96%E6%9C%AF%E8%AF%AD/%E5%B8%B8%E7%94%A8%E8%8B%B1%E6%96%87/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/standardizedglossary%E6%A0%87%E5%87%86%E5%8C%96%E6%9C%AF%E8%AF%AD/%E5%B8%B8%E7%94%A8%E8%8B%B1%E6%96%87/</guid><description>
&lt;h1 id="heading">&lt;/h1>
&lt;h1 id="常见缩写">常见缩写&lt;/h1>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>英文&lt;/th>
&lt;th>中文&lt;/th>
&lt;th>缩写&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Business&lt;/td>
&lt;td>业务&lt;/td>
&lt;td>BIZ&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Management&lt;/td>
&lt;td>管理&lt;/td>
&lt;td>MGMT&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="版本信息">版本信息&lt;/h1>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>英文&lt;/th>
&lt;th>中文&lt;/th>
&lt;th>缩写&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Portable&lt;/td>
&lt;td>便携式、可移植&lt;/td>
&lt;td>&lt;/td>
&lt;td>一个程序如果不需要安装，直接使用二进制文件运行，通常称为 Portable。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="标点符号的英语名称">标点符号的英语名称&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>原文链接：&lt;a href="https://www.ruanyifeng.com/blog/2007/07/english_punctuation.html">https://www.ruanyifeng.com/blog/2007/07/english_punctuation.html&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>． period or full stop 句号
， comma 逗号
： colon 冒号
； semicolon 分号
！ exclamation mark 惊叹号
？ question mark 问号
- hyphen 连字符&lt;/p>
&lt;ul>
&lt;li>asterisk 星号
&amp;rsquo; apostrophe 所有格符号，单词内部的省略
— dash 破折号
_ underscore
‘ ’ single quotation marks 单引号
“ ” double quotation marks 双引号
( ) parenthesis or round brackets 圆括号
[ ] square brackets 方括号
&amp;lt;&amp;gt; Angle brackets 尖括号
{} curly brackets or braces 大括号
《 》French quotes 法文引号；书名号
&amp;hellip; ellipsis 省略号
¨ tandem colon 双点号
&amp;quot; ditto 同上
‖ parallel 双线号
／ slash or virgule or diagonal mark 斜线号
＆ ampersand = and
～ tilde or swung dash 代字号
§ section; division 分节号
→ arrow 箭号；参见号
| vertical bar 竖线
\ backslash 反斜线
=====================
附：部分数学符号的英文名称
＋ plus 加号；正号
－ minus 减号；负号
± plus or minus 正负号
× is multiplied by 乘号
÷ is divided by 除号
＝ is equal to 等于号
≠ is not equal to 不等于号
≡ is equivalent to 全等于号
≌ is equal to or approximately equal to 等于或约等于号
≈ is approximately equal to 约等于号
＜ less than sign 小于号
＞ more than or greater than sign 大于号
≮ is not less than 不小于号
≯ is not more than 不大于号
≤ is less than or equal to 小于或等于号
≥ is more than or equal to 大于或等于号
％ per cent 百分之…
‰ per mill 千分之…
∞ infinity 无限大号
∝ varies as 与…成比例
√ (square) root 平方根
∵ since; because 因为
∴ hence 所以
∷ equals, as (proportion) 等于，成比例
∠ angle 角
⌒ semicircle 半圆
⊙ circle 圆
○ circumference 圆周
△ triangle 三角形
⊥ perpendicular to 垂直于
∪ union of 并，合集
∩ intersection of 交，通集
∫ the integral of …的积分
∑ (sigma) summation of 总和
° degree 度
′ minute 分
″ second 秒
＃ number …号
℃ Celsius system 摄氏度
＠ at 在&lt;/li>
&lt;/ul>
&lt;h1 id="词性">词性&lt;/h1>
&lt;p>英语的词性大约有 10 种，名词 n. 副词 adv. 介词 prep，代词 pron，数词 num，动词 v，形容词 adj，冠词 art，连词 conj，感叹词 interj，及物动词 vt，不及物动词 vi，助动词 vaux，缩写 a bbr，动词不定式 inf.，单数 sing，复数 pl，情态动词 aux.。不同的词性代表着不同的意思，所以才有了英语语法不同的说法，下面就让小编为大家带来英语词性缩写，让大家了解一番。&lt;/p>
&lt;p>英语词性缩写：
　　 n = 名词，noun 的缩写&lt;/p>
&lt;p>u = 不可数名词，uncountable noun 的缩写&lt;/p>
&lt;p>c = 可数名词，countable noun 的缩写&lt;/p>
&lt;p>v = 动词， verb 的缩写&lt;/p>
&lt;p>vi = 不及物动词，intransitive verb 的缩写&lt;/p>
&lt;p>vt = 及物动词，transitive verb 的缩写&lt;/p>
&lt;p>aux.v = 助动词，auxiliary verb 的缩写&lt;/p>
&lt;p>model verb 情态动词&lt;/p>
&lt;p>conj = 连接词 ，conjunction 的缩写&lt;/p>
&lt;p>adj. = 形容词，adjective 的缩写&lt;/p>
&lt;p>adv.= 副词，adverb 的缩写&lt;/p>
&lt;p>art. = 冠词，article 的缩写&lt;/p>
&lt;p>prep = 介词;preposition 的缩写&lt;/p>
&lt;p>pron = 代名词，pronoun 的缩写&lt;/p>
&lt;p>num = 数词，numeral 的缩写&lt;/p>
&lt;p>int. = 感叹词，interjection 的缩写&lt;/p>
&lt;p>英文基本句式介绍: 五个基本句式可以演变出多种复杂的英语句子。这五个基本句式如下：&lt;/p>
&lt;p>S 十 V 主谓结构&lt;/p>
&lt;p>S 十 V 十 P 主系表结构&lt;/p>
&lt;p>S 十 V 十 O 主谓宾结构&lt;/p>
&lt;p>S 十 V 十 O1 十 O2 主谓双宾结构&lt;/p>
&lt;p>S 十 V 十 O 十 C 主谓宾补结构&lt;/p>
&lt;p>(说明：S=主语;V=谓语;P=表语;O=宾语;O1=间接宾语;O2=直接宾语;C=补语)&lt;/p>
&lt;p>1.S 十 V&lt;/p>
&lt;p>在此句式中，V 是不及物动词，又叫自动词(vi.)。例如：&lt;/p>
&lt;p>He runs quickly.他跑得快。&lt;/p>
&lt;p>They listened carefully.他们听得很仔细。&lt;/p>
&lt;p>He suffered from cold and hunger.他挨冻受饿。&lt;/p>
&lt;p>China belongs to the third world country.中国属于第三世界国家。&lt;/p>
&lt;p>The gas has given out.煤气用完了。&lt;/p>
&lt;p>My ink has run out.我的钢笔水用完了。&lt;/p>
&lt;p>2.S 十 V 十 P&lt;/p>
&lt;p>在此句式中，V 是系动词(link v.)，常见的系动词有：look，seem，appear，sound，feel，taste，smell，grow，get，fall ill/asleep，stand/sit still，become，turn 等。例如：&lt;/p>
&lt;p>He is older than he looks.他比看上去要老。&lt;/p>
&lt;p>He seen interested in the book.他似乎对这本书感兴趣。&lt;/p>
&lt;p>The story sounds interesting.这个故事听起来有趣。&lt;/p>
&lt;p>The desk feels hard.书桌摸起来很硬。&lt;/p>
&lt;p>The cake tastes nice.饼尝起来很香。&lt;/p>
&lt;p>The flowers smell sweet and nice.花闻起来香甜。&lt;/p>
&lt;p>You have grown taller than before.你长得比以前高了。&lt;/p>
&lt;p>He has suddenly fallen ill.他突然病倒了。&lt;/p>
&lt;p>He stood quite still.他静静地站看。&lt;/p>
&lt;p>He becomes a teacher when he grew up.他长大后当了教师。&lt;/p>
&lt;p>He could never turn traitor to his country.他永远不会背叛他的祖国。&lt;/p>
&lt;p>3.S 十 V 十 O&lt;/p>
&lt;p>在此句式中，V 是及物动词(vt.)，因此有宾语。例如：&lt;/p>
&lt;p>I saw a film yesterday.我昨天看了一部电影。&lt;/p>
&lt;p>Have you read the story?你读过这个故事吗?&lt;/p>
&lt;p>They found their home easily.他们很容易找到他们的家。&lt;/p>
&lt;p>They built a house last year.他们去年建了一所房子。&lt;/p>
&lt;p>They‘ve put up a factory in the village.他们在村里建了一座工厂。&lt;/p>
&lt;p>They have taken good care of the children.这些孩子他们照看得很好。&lt;/p>
&lt;p>You should look after your children well.你应该好好照看你的孩子。&lt;/p>
&lt;p>4.S 十 V 十 O1 十 O2&lt;/p>
&lt;p>在此句式中，V 是带有双宾语的及物动词。常见的须带双宾语的动词有 give，ask，bring，offer，send，pay，lend，show，tell，buy，get; rob，warn 等。例如：&lt;/p>
&lt;p>He gave me a book/a book to me.他给我一本书。&lt;/p>
&lt;p>He brought me a pen/a pen to me.他带给我一枝钢笔。&lt;/p>
&lt;p>He offered me his seat/his seat to me.他把座位让给我。&lt;/p>
&lt;p>注意下边动词改写后介词的变化：&lt;/p>
&lt;p>Mother bought me a book/a book for me.妈妈给我买了一本书。&lt;/p>
&lt;p>He got me a chair/a chair for me.他给我弄了一把椅子。&lt;/p>
&lt;p>Please do me a favor/a favor for me.请帮我一下。&lt;/p>
&lt;p>He asked me a question/a question of me.他问我个问题。&lt;/p>
&lt;p>注意，下边动词只有一种说法：&lt;/p>
&lt;p>They robbed the old man of his money.他们抢了老人的钱。&lt;/p>
&lt;p>He’s warned me of the danger.他警告我注意危险。&lt;/p>
&lt;p>The doctor has cured him of his disease.医生治好了他的病。&lt;/p>
&lt;p>We must rid the house of the rats.我们必须赶走屋里的老鼠。&lt;/p>
&lt;p>They deprived him of his right to speak.他们剥夺了他说话的权利。&lt;/p>
&lt;p>5.S 十 V 十 O 十 C&lt;/p>
&lt;p>在此句式中，V 是有宾语补足语的及物动词。常带宾语补足语的词有形容词、副词、介词短语、名词、不定式、现在分词、过去分词,请看下面的例子。&lt;/p>
&lt;p>They made the girl angry.他们使这个女孩生气了。&lt;/p>
&lt;p>They found her happy that day.他们发现那天她很高兴。&lt;/p>
&lt;p>I found him out.我发现他出去了。&lt;/p>
&lt;p>I saw him in.我见他在家。&lt;/p>
&lt;p>They saw a foot mark in the sand.他们发现沙地上有脚印。&lt;/p>
&lt;p>They named the boy Charlie.他们给这个男孩起名为查理。&lt;/p>
&lt;p>I saw him come in and go out.我见他进来又出去。&lt;/p>
&lt;p>They felt the car moving fast.他们感到汽车行驶得很快。&lt;/p>
&lt;p>I heard the glass broken just now.我刚才听到玻璃碎了。&lt;/p>
&lt;p>以上就是英语词性缩写，希望大家会喜欢。掌握这些缩写可以帮我们提高学习效率，至少记笔记的时间可以快一点。&lt;/p>
&lt;h1 id="常用名词">常用名词&lt;/h1>
&lt;p>row 行
column 列&lt;/p></description></item><item><title>Docs: 南北流量和东西流量——它们是什么意思</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/standardizedglossary%E6%A0%87%E5%87%86%E5%8C%96%E6%9C%AF%E8%AF%AD/%E5%8D%97%E5%8C%97%E6%B5%81%E9%87%8F%E5%92%8C%E4%B8%9C%E8%A5%BF%E6%B5%81%E9%87%8F%E5%AE%83%E4%BB%AC%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/standardizedglossary%E6%A0%87%E5%87%86%E5%8C%96%E6%9C%AF%E8%AF%AD/%E5%8D%97%E5%8C%97%E6%B5%81%E9%87%8F%E5%92%8C%E4%B8%9C%E8%A5%BF%E6%B5%81%E9%87%8F%E5%AE%83%E4%BB%AC%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D/</guid><description>
&lt;h1 id="heading">&lt;/h1>
&lt;p>在 Service Mesh 微服务架构中，我们常常会听到东西流量和南北流量两个术语。&lt;/p>
&lt;p>南北流量（NORTH-SOUTH traffic）和东西流量（EAST-WEST traffic）是数据中心环境中的网络流量模式。下面我们通过一个例子来理解这两个术语。&lt;/p>
&lt;p>假设我们尝试通过浏览器访问某些 Web 应用。Web 应用部署在位于某个数据中心的应用服务器中。在多层体系结构中，典型的数据中心不仅包含应用服务器，还包含其他服务器，如负载均衡器、数据库等，以及路由器和交换机等网络组件。假设应用服务器是负载均衡器的前端。&lt;/p>
&lt;p>当我们访问 web 应用时，会发生以下类型的网络流量：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>客户端（位于数据中心一侧的浏览器）与负载均衡器（位于数据中心）之间的网络流量&lt;/p>
&lt;/li>
&lt;li>
&lt;p>负载均衡器、应用服务器、数据库等之间的网络流量，它们都位于数据中心。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>南北流量&lt;/p>
&lt;p>在这个例子中，前者即即客户端和服务器之间的流量被称为南北流量。简而言之，南北流量是 server-client 流量。&lt;/p>
&lt;p>东西流量&lt;/p>
&lt;p>第二种流量即不同服务器之间的流量与数据中心或不同数据中心之间的网络流被称为东西流量。简而言之，东西流量是 server-server 流量。&lt;/p>
&lt;p>当下，东西流量远超南北流量，尤其是在当今的大数据生态系统中，比如 Hadoop 生态系统（大量 server 驻留在数据中心中，用 map reduce 处理），server-server 流量远大于 server-client 流量。&lt;/p>
&lt;p>大家可能会好奇，东西南北，为什么这么命名。&lt;/p>
&lt;p>该命名来自于绘制典型 network diagrams 的习惯。在图表中，通常核心网络组件绘制在顶部（NORTH），客户端绘制在底部（SOUTH），而数据中心内的不同服务器水平（EAST-WEST）绘制。&lt;/p></description></item></channel></rss>