<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – fio</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/x.linux-%E7%AE%A1%E7%90%86/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B8%8E%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/fio-#-%E7%A3%81%E7%9B%98%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/</link><description>Recent content in fio on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/x.linux-%E7%AE%A1%E7%90%86/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B8%8E%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/fio-#-%E7%A3%81%E7%9B%98%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: fio 参数详解</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/x.linux-%E7%AE%A1%E7%90%86/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B8%8E%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/fio-#-%E7%A3%81%E7%9B%98%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/fio-%E5%8F%82%E6%95%B0%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/x.linux-%E7%AE%A1%E7%90%86/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B8%8E%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/fio-#-%E7%A3%81%E7%9B%98%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/fio-%E5%8F%82%E6%95%B0%E8%AF%A6%E8%A7%A3/</guid><description>
&lt;h1 id="fio-job-file-参数详解">fio Job file 参数详解&lt;/h1>
&lt;p>官方文档：&lt;a href="https://fio.readthedocs.io/en/latest/fio_doc.html#job-file-parameters">https://fio.readthedocs.io/en/latest/fio_doc.html#job-file-parameters&lt;/a>&lt;/p>
&lt;h2 id="参数类型">参数类型：&lt;/h2>
&lt;p>Job file 的参数有多种类型，每种类型的参数的值可用的类型各不相同，比如时间类型的参数的值就需要填写时间相关的值。&lt;/p>
&lt;p>str # 字符串类型。值为字符数字字符序列&lt;/p>
&lt;p>time # 时间类型。值为带时间后缀的整数。时间的默认单位是秒(seconds)。可以指定其他单位： 天(d)、小时(h)、分钟(m)、毫秒(ms 或 msec)、微秒(us 或 usec)。e.g.使用 10m 表示 10 分钟。&lt;/p>
&lt;p>int # 整数类型。整数值，可以包含整数前缀和整数后缀：&lt;/p>
&lt;p>bool # 布尔类型。通常解析为整数，但是仅定义为 true 和 false（1 和 0）&lt;/p>
&lt;p>irange # 范围类型。带后缀的整数范围。允许给出值范围，例如 1024-4096。冒号也可以用作分隔符，例如。 1k：4k。如果该选项允许两组范围，则可以使用“，”或“ /”定界符来指定它们：1k-4k / 8k-32k。另请参见 int.&lt;/p>
&lt;p>float_list # 浮点列表类型。浮点数列表，以&amp;rsquo;：&amp;lsquo;字符分隔。&lt;/p>
&lt;h1 id="描述-job-的相关参数">描述 JOB 的相关参数&lt;/h1>
&lt;p>name=STR #这可以用来覆盖由 fio 为该作业打印的名称。否则，使用作业名称。在命令行上，此参数的特殊目的还用于发信号通知新作业的开始。&lt;/p>
&lt;h1 id="时间相关参数">时间相关参数&lt;/h1>
&lt;p>官方文档：&lt;a href="https://fio.readthedocs.io/en/latest/fio_doc.html#time-related-parameters">https://fio.readthedocs.io/en/latest/fio_doc.html#time-related-parameters&lt;/a>&lt;/p>
&lt;p>runtime=TIME # 指定 Job 运行的时间(默认单位：秒)。到时间后，不管指定的 size 大小有没有读写完。&lt;/p>
&lt;p>time_based # 如果设置，则 fio 将在 &lt;code>runtime 的值&lt;/code>这个时间内内运行，即使已完全读取或写入文件。它会在运行时允许的情况下简单地循环相同的工作负载。&lt;/p>
&lt;blockquote>
&lt;p>该参数一般配合 runtime 一起使用，单独使用没有效果。&lt;/p>
&lt;/blockquote>
&lt;h1 id="要测试的目标文件设备相关参数">要测试的目标文件/设备相关参数&lt;/h1>
&lt;p>directory=STR # 测试目录。&lt;/p>
&lt;p>filename=STR # 测试文件名称。通常选择需要测试的盘的 data 目录&lt;/p>
&lt;p>注意：！！当使用 fio 的 filename 参数指定某个要测试的裸设备（硬盘或分区），切勿在系统分区做测试，会破坏系统分区，而导致系统崩溃。若一定要测试系统分区较为安全的方法是：在根目录下创建一个空目录，在测试命令中使用 directory 参数指定该目录，而不使用 filename 参数。现在假设 /dev/vda3 设备挂载在 / 目录下，那么不要执行 fil &amp;ndash;filename=/dev/vda 这种操作&lt;/p>
&lt;h1 id="io-type-相关参数">I/O TYPE 相关参数&lt;/h1>
&lt;p>官方文档：&lt;a href="https://fio.readthedocs.io/en/latest/fio_doc.html#i-o-type">https://fio.readthedocs.io/en/latest/fio_doc.html#i-o-type&lt;/a>&lt;/p>
&lt;p>direct=BOOL # 测试过程绕过系统的 buffer。使测试结果更真实。&lt;code>默认值：false&lt;/code>i.e.使用缓存。&lt;/p>
&lt;p>rw=STR # 测试时的 I/O 模式。默认为 read。可用的模式有：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>read # 顺序读&lt;/p>
&lt;/li>
&lt;li>
&lt;p>write # 顺序写&lt;/p>
&lt;/li>
&lt;li>
&lt;p>randread # 随机读&lt;/p>
&lt;/li>
&lt;li>
&lt;p>randwrite # 随机写&lt;/p>
&lt;/li>
&lt;li>
&lt;p>randrw # 随机混合读和写&lt;/p>
&lt;/li>
&lt;li>
&lt;p>等&amp;hellip;..其余模式见官方文档&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>fdatasync=INT # 与 fsync 类似，但使用 fdatasync(2)只同步数据而不同步元数据块。在 Windows, FreeBSD, DragonFlyBSD 或 OSX 中没有 fdatasync(2)，所以这就回到使用 fsync(2)。默认值为 0，这意味着 fio 不会定期发出问题，并等待数据同步完成。&lt;/p>
&lt;h1 id="block-大小相关参数">Block 大小相关参数&lt;/h1>
&lt;p>官方文档：&lt;a href="https://fio.readthedocs.io/en/latest/fio_doc.html#block-size">https://fio.readthedocs.io/en/latest/fio_doc.html#block-size&lt;/a>&lt;/p>
&lt;p>bs=INT # 单次 I/O 的块文件大小&lt;/p>
&lt;p>bsrange=iRANGE # 与 bs 参数类似，只不过是指定一个块文件大小的范围&lt;/p>
&lt;h1 id="buffers-and-memory-相关参数">Buffers and memory 相关参数&lt;/h1>
&lt;p>zero_buffers # 用 0 初始化系统 buffer&lt;/p>
&lt;h1 id="io-size-相关参数">I/O Size 相关参数&lt;/h1>
&lt;p>size=INT # 本次的测试文件大小为 INT。fio 程序将持续运行，直到传输了 INT 这些数据。&lt;/p>
&lt;h1 id="io-engine引擎-相关参数">I/O engine(引擎) 相关参数&lt;/h1>
&lt;p>ioengine=STR # 告诉 fio 使用什么样的方式去测试 I/O。有如下方式可用：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>sync # 也就是最通常的 read/write 操作。基本的读(2)或写(2)I/O。lseek(2)用于定位 I/O 位置。请参阅 fsync 和 fdatasync 来同步写 I/O。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>psync # 基本的 pread(2)或 pwrite(2) I/O。除 Windows 外，所有支持的操作系统都是默认值。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>pvsync / pvsync2 - 对应的 preadv / pwritev，以及 preadv2 / p writev2&lt;/p>
&lt;/blockquote>
&lt;ol>
&lt;li>
&lt;p>vsync # 使用 readv / writev，主要是会将相邻的 I/O 进行合并&lt;/p>
&lt;/li>
&lt;li>
&lt;p>libaio # Linux 原生的异步 I/O，这也是通常我们这边用的最多的测试盘吞吐和延迟的方法&lt;/p>
&lt;ol>
&lt;li>对于 libaio engine 来说，还需要考虑设置 iodepth&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>测试多了，就会很悲催的发现，libaio 很容易就把盘给打死，但 sync 这些还需要启动几个线程。。。&lt;/p>
&lt;p>并且对于 fio &amp;ndash;rw=write &amp;ndash;ioengine=XXXX &amp;ndash;filename=fiotest &amp;ndash;direct=1 &amp;ndash;size=2G &amp;ndash;bs=4k &amp;ndash;name=&amp;ldquo;Max throughput&amp;rdquo; &amp;ndash;iodepth=4 命令，sync 引擎测试结果只有 libaio 引擎测试结果的三分之一。&lt;/p>
&lt;h1 id="io-engine引擎-特定参数">I/O engine(引擎) 特定参数&lt;/h1>
&lt;p>官方文档：&lt;a href="https://fio.readthedocs.io/en/latest/fio_doc.html#i-o-engine-specific-parameters">https://fio.readthedocs.io/en/latest/fio_doc.html#i-o-engine-specific-parameters&lt;/a>&lt;/p>
&lt;h1 id="io-depth深度-相关参数">I/O depth(深度) 相关参数&lt;/h1>
&lt;p>官方文档：&lt;a href="https://fio.readthedocs.io/en/latest/fio_doc.html#i-o-depth">https://fio.readthedocs.io/en/latest/fio_doc.html#i-o-depth&lt;/a>&lt;/p>
&lt;p>iodepth=INT # 针对文件保留的 I/O 单元数。 &lt;code>默认值：1&lt;/code>。&lt;/p>
&lt;blockquote>
&lt;p>请注意，将 iodepth 增加到 1 以上不会影响同步 ioengine(使用 verify_async 时的小角度除外)。 甚至异步引擎也可能会施加 OS 限制，从而导致无法实现所需的深度。 在 Linux 上使用 libaio 且未设置 direct = 1 时可能会发生这种情况，因为在该 OS 上缓冲的 I / O 并不异步。 密切注意 fio 输出中的 I / O 深度分布，以验证所达到的深度是否符合预期。&lt;/p>
&lt;/blockquote>
&lt;h1 id="io-rate-相关参数">I/O rate 相关参数&lt;/h1>
&lt;p>官方文档：&lt;a href="https://fio.readthedocs.io/en/latest/fio_doc.html#i-o-rate">https://fio.readthedocs.io/en/latest/fio_doc.html#i-o-rate&lt;/a>&lt;/p>
&lt;h1 id="io-latency">I/O latency&lt;/h1>
&lt;p>官方文档：&lt;a href="https://fio.readthedocs.io/en/latest/fio_doc.html#i-o-latency">https://fio.readthedocs.io/en/latest/fio_doc.html#i-o-latency&lt;/a>&lt;/p>
&lt;h1 id="io-replay">I/O replay&lt;/h1>
&lt;p>官方文档：&lt;a href="https://fio.readthedocs.io/en/latest/fio_doc.html#i-o-replay">https://fio.readthedocs.io/en/latest/fio_doc.html#i-o-replay&lt;/a>&lt;/p>
&lt;h1 id="线程进程job-同步相关参数">线程、进程、Job 同步相关参数&lt;/h1>
&lt;p>官方文档：&lt;a href="https://fio.readthedocs.io/en/latest/fio_doc.html#threads-processes-and-job-synchronization">https://fio.readthedocs.io/en/latest/fio_doc.html#threads-processes-and-job-synchronization&lt;/a>&lt;/p>
&lt;p>thead # 如果指定了此选项，则 fio 将使用 POSIX Threads 的函数 pthread_create(3) 创建线程来创建作业。Fio 默认使用 fork 创建 Job。i.e.使用进程来执行 Job&lt;/p>
&lt;blockquote>
&lt;p>使用 thread 在一定程度上可以节省系统开销&lt;/p>
&lt;/blockquote>
&lt;h1 id="认证参数">认证参数&lt;/h1>
&lt;p>官方文档：&lt;a href="https://fio.readthedocs.io/en/latest/fio_doc.html#verification">https://fio.readthedocs.io/en/latest/fio_doc.html#verification&lt;/a>&lt;/p>
&lt;h1 id="steady-state">Steady state&lt;/h1>
&lt;p>官方文档：&lt;a href="https://fio.readthedocs.io/en/latest/fio_doc.html#steady-state">https://fio.readthedocs.io/en/latest/fio_doc.html#steady-state&lt;/a>&lt;/p>
&lt;h1 id="测量和报告相关参数">测量和报告相关参数&lt;/h1>
&lt;p>官方文档：&lt;a href="https://fio.readthedocs.io/en/latest/fio_doc.html#measurements-and-reporting">https://fio.readthedocs.io/en/latest/fio_doc.html#measurements-and-reporting&lt;/a>&lt;/p>
&lt;h1 id="错误处理相关参数">错误处理相关参数&lt;/h1>
&lt;p>官方文档：&lt;a href="https://fio.readthedocs.io/en/latest/fio_doc.html#error-handling">https://fio.readthedocs.io/en/latest/fio_doc.html#error-handling&lt;/a>&lt;/p>
&lt;p>rwmixwrite=30 # 在混合读写的模式下，写占 30%&lt;/p>
&lt;p>group_reporting # 关于显示结果的，汇总每个进程的信息&lt;/p>
&lt;p>lockmem=1G # 只使用 1g 内存进行测试&lt;/p>
&lt;p>nrfiles=8 # 每个进程生成文件的数量&lt;/p>
&lt;p>numjobs=30 # 本次的测试线程为 30 个&lt;/p></description></item></channel></rss>