<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – Iproute 工具包</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/x.linux-%E7%AE%A1%E7%90%86/linux-%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/iproute-%E5%B7%A5%E5%85%B7%E5%8C%85/</link><description>Recent content in Iproute 工具包 on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/x.linux-%E7%AE%A1%E7%90%86/linux-%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/iproute-%E5%B7%A5%E5%85%B7%E5%8C%85/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: ip 命令行工具</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/x.linux-%E7%AE%A1%E7%90%86/linux-%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/iproute-%E5%B7%A5%E5%85%B7%E5%8C%85/ip-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/x.linux-%E7%AE%A1%E7%90%86/linux-%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/iproute-%E5%B7%A5%E5%85%B7%E5%8C%85/ip-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://man7.org/linux/man-pages/man8/ip.8.html">Manual(手册),ip(8)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>ip 命令行工具可以控制各种 &lt;strong>Object(对象)&lt;/strong>，这些对象包括：路由、网络设备、接口、隧道 等&lt;/p>
&lt;h1 id="syntax语法">Syntax(语法)&lt;/h1>
&lt;p>&lt;strong>ip [Global OPTIONS] OBJECT [COMMAND]&lt;/strong>&lt;/p>
&lt;p>ip 程序的语法有点复杂，对 Object 控制的命令中，有非常多的参数，不像普通命令一样，把参数称为 FLAGS 或 OPTIONS，且都是以 &lt;code>-&lt;/code> 或者 &lt;code>--&lt;/code> 符号开头的。&lt;/p>
&lt;p>这里我们使用 **大写字母 **来描述 &lt;strong>一个参数&lt;/strong> 或 &lt;strong>一个具体的值&lt;/strong>。参数中还可以包含一个或多个其他参数，每个参数的值，同样使用大写字母表示。&lt;/p>
&lt;p>在后面的文章中，凡是这种复杂的参数，都使用这类格式表示：&lt;code>参数 := 参数 | 值&lt;/code>，这就有点像编程中初始化&lt;strong>变量&lt;/strong>一样。在这里就是等于是定义一个参数，并为参数赋值。比如 &lt;code>ip link&lt;/code> 命令中，就有这种样子的写法：
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/us4bal/1638423450051-14c93955-fbe9-425a-9d96-eaf14b140241.png" alt="image.png">
这里面有一个 IFADDR 表示一个参数，IFADDR 参数又是由 PREFIX、SCOPE-ID 等参数组成，而 SCOPE-ID 则表示有具体含义的值。其实，本质上，命令行工具的参数，就是要传入代码的 Function 中的的实际参数。&lt;/p>
&lt;h2 id="global-opitons">Global OPITONS&lt;/h2>
&lt;p>注意：这里的 OPTIONS 是全局选项，要用在 ip 与 OBJECT 之间，比如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>root@lichenhao:~# ip -c route
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>default via 172.19.42.1 dev ens3 proto static metric &lt;span style="color:#ae81ff">100&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>10.19.0.0/24 dev docker0 proto kernel scope link src 10.19.0.1 linkdown
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>172.19.42.0/24 dev ens3 proto kernel scope link src 172.19.42.248 metric &lt;span style="color:#ae81ff">100&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root@lichenhao:~# ip route -c
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Command &lt;span style="color:#e6db74">&amp;#34;-c&amp;#34;&lt;/span> is unknown, try &lt;span style="color:#e6db74">&amp;#34;ip route help&amp;#34;&lt;/span>.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到，-c 选项用在 OBJECT 后面是无效的。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-d, -details&lt;/strong> # 输出更详细的信息,主要显示该网络设备的类型等&lt;/li>
&lt;li>&lt;strong>-f, -family &lt;!-- raw HTML omitted -->&lt;/strong> # 指定要使用的协议族。协议族标识符可以是 inet、inet6、bridge、mpls、link 中的一种。如果不存在此选项，则从其他参数中猜测协议族。如果命令行的其余部分没有提供足够的信息来猜测该系列，则 ip 会退回到默认值，通常是 inet 或任何其他值。链接是一个特殊的系列标识符，表示不涉及网络协议。
&lt;ul>
&lt;li>&lt;strong>-4&lt;/strong> # &lt;code>-family inet&lt;/code> 的简写&lt;/li>
&lt;li>&lt;strong>-6&lt;/strong> # &lt;code>-family inet6&lt;/code> 的简写&lt;/li>
&lt;li>&lt;strong>-B&lt;/strong> # &lt;code>-family bridge&lt;/code> 的简写&lt;/li>
&lt;li>&lt;strong>-M&lt;/strong> # &lt;code>-family mpls&lt;/code> 的简写&lt;/li>
&lt;li>&lt;strong>-0&lt;/strong> # &lt;code>-family link&lt;/code> 的简写&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>**-o, -oneline **# 在一行中输出每条记录，并用&amp;rsquo;&amp;lsquo;字符替换换行符。在使用 wc(1) 对记录进行计数 或 对输出进行 grep(1) 时，这非常方便。
&lt;ul>
&lt;li>注意，使用 -o 选项时，不会打印没有 IP 地址的网络设备&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>-s, -stats&lt;/strong> # 显示更详细的信息,主要显示该网络设备的接收、发送、错误、丢弃的数据包信息&lt;/li>
&lt;/ul>
&lt;h2 id="arguments">ARGUMENTS&lt;/h2>
&lt;p>&lt;strong>OBJECT := { link | address | addrlabel | route | rule | neigh | ntable | tunnel | tuntap | maddress | mroute | mrule | monitor | xfrm | netns | l2tp | tcp_metrics | token | macsec | vrf | mptcp }&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>注意：OBJECT(对象)选项用来指定 ip 程序想要控制的网络栈中的实体。&lt;/li>
&lt;li>比如：
&lt;ul>
&lt;li>link(链路)&lt;/li>
&lt;li>address(地址)&lt;/li>
&lt;li>route(路由条目)&lt;/li>
&lt;li>等&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ip 命令可以对这些网络对象进行相关操作，选定 object 后，后面执行相关 command 进行操作&lt;/li>
&lt;/ul>
&lt;h2 id="command">COMMAND&lt;/h2>
&lt;p>主要都是对各个 Object 的 add | delete | set | show | list 等类似增删改查的命令，还有各个 Object 独自的子命令&lt;/p>
&lt;h1 id="object-命令详解">OBJECT 命令详解&lt;/h1>
&lt;h2 id="link--网络设备配置">link # 网络设备配置&lt;/h2>
&lt;p>详见：
[link](✏IT 学习笔记/📄1.操作系统/X.Linux%20 管理/Linux%20 网络管理工具/Iproute%20 工具包/ip%20 命令行工具/link.md 命令行工具/link.md)&lt;/p>
&lt;h2 id="address--ipv4-或-ipv6-地址管理">address # IPv4 或 IPv6 地址管理&lt;/h2>
&lt;h3 id="syntax语法-1">Syntax(语法)&lt;/h3>
&lt;p>&lt;strong>ip [OPTIONS] address [COMMAND]&lt;/strong>&lt;/p>
&lt;p>&lt;strong>COMMAND：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>add | del | change | replace | show&lt;/li>
&lt;li>save | flush&lt;/li>
&lt;li>showdump | restore&lt;/li>
&lt;/ul>
&lt;h3 id="example">EXAMPLE&lt;/h3>
&lt;ul>
&lt;li>简略显示网络设备信息
&lt;ul>
&lt;li>ip -4 -o a s&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;pre>&lt;code>root@lichenhao:~/projects/kubeappsops# ip -4 -o a s
1: lo inet 127.0.0.1/8 scope host lo\ valid_lft forever preferred_lft forever
2: ens3 inet 172.19.42.248/24 brd 172.19.42.255 scope global ens3\ valid_lft forever preferred_lft forever
3: docker0 inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0\ valid_lft forever preferred_lft forever
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>筛选满足 IP 地址格式的网卡信息
&lt;ul>
&lt;li>ip a s up | egrep &amp;ndash;color=auto -n &amp;lsquo;[0-9]+.[0-9]+.[0-9]+.[0-9]+&amp;rsquo;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>显示[已经启动的]网卡 ip 信息,类似于 ifconfig 命令,可简写为 ip a s up
&lt;ul>
&lt;li>ip address show [up]&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>以详细信息显示 ens33 的网卡关于地址的信息，包括收发包的状态等
&lt;ul>
&lt;li>ip -s addr show ens33&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>给 eth0 网卡添加一个临时的 IP 地址
&lt;ul>
&lt;li>ip addr add 192.168.0.1/24 dev eth0&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ip addr add 10.0.0.101/24 broadcast 10.0.0.255 dev eth0 label eth0:0&lt;/li>
&lt;/ul>
&lt;p>Note：在 ip address show 命令中列出的网络设备，可能包含这样的名称 eth0.2@eth0 。其实设备名就是 eth0.2(其中 2 表示 vlan 号)，至于后面的&lt;code>@&lt;/code>则是一个关联同等级网络设备的符号，表示 eth0.2 这个设备是与 eth0 关联的。如果是 bridge 和 bond 之类的网络设备，则没有&lt;code>@&lt;/code>符号，因为和 bridge 或者 bond 关联的设备都是属于下级设备。&lt;/p>
&lt;h2 id="route--路由条目管理">route # 路由条目管理&lt;/h2>
&lt;p>详见：
[rule 与 route](✏IT 学习笔记/📄1.操作系统/X.Linux%20 管理/Linux%20 网络管理工具/Iproute%20 工具包/ip%20 命令行工具/rule%20 与%20route.md 命令行工具/rule 与 route.md)&lt;/p>
&lt;h2 id="rule--路由策略数据库管理">rule # 路由策略数据库管理&lt;/h2>
&lt;p>详见：
[rule 与 route](✏IT 学习笔记/📄1.操作系统/X.Linux%20 管理/Linux%20 网络管理工具/Iproute%20 工具包/ip%20 命令行工具/rule%20 与%20route.md 命令行工具/rule 与 route.md)&lt;/p>
&lt;h2 id="neighbor-管理-arp-或-ndisc-缓存条目">neighbor #管理 ARP 或 NDISC 缓存条目&lt;/h2>
&lt;p>&lt;strong>ip [OPTIONS] neighbor [COMMAND]&lt;/strong>&lt;/p>
&lt;p>EXAMPLE&lt;/p>
&lt;ol>
&lt;li>ip neighbor list # 显示邻居和 arp 表，即学到的 IP 地址，可显示该 IP 是否可达等状态，以及是从哪个端口学到的&lt;/li>
&lt;li>ip neigh flush dev eth0 # 移除 eth0 设备上的邻居条目（i.e.清空 arp）&lt;/li>
&lt;/ol>
&lt;h2 id="tuntap--tuntap-网络设备的管理">tuntap # tun/tap 网络设备的管理&lt;/h2>
&lt;p>&lt;strong>ip tuntap COMMAND mode { tun | tap } [ dev PHYS_DEV ] [ user USER ] [ group GROUP ] [ one_queue ] [ pi ] [ vnet_hdr ] [ multi_queue ] [ name NAME ]&lt;/strong>&lt;/p>
&lt;p>EXAMPLE&lt;/p>
&lt;ol>
&lt;li>ip tuntap add dev vnet3 mode tun # 创建一个 tun 类型，名为 vnet3 的网络设备&lt;/li>
&lt;/ol>
&lt;h2 id="netns--进程网络命名空间管理">netns # 进程网络命名空间管理&lt;/h2>
&lt;p>&lt;strong>ip [OPTIONS] netns [COMMAND]&lt;/strong>
是在 linux 中提供网络虚拟化的一个项目，使用 netns 网络空间虚拟化可以在本地虚拟化出多个网络环境，目前 netns 在 lxc 容器中被用来为容器提供网络(注意:可以查看 openstack、docker 各个节点上的虚拟网络设备并进行操作)。&lt;/p>
&lt;p>COMMAND
add、delete、set、list 增删改查通用命令&lt;/p>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>ip netns add r1 #创建名字为 r1 的 namespace&lt;/li>
&lt;li>ip netns list #列出 net namespace，显示名称&lt;/li>
&lt;/ul>
&lt;p>identify&lt;/p>
&lt;p>pids&lt;/p>
&lt;p>exec&lt;/p>
&lt;p>**ip netns exec NAME COMMAND&amp;hellip;. **# 对 NAME 这个 namesapce 执行 COMMAND 命令&lt;/p>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>ip netns exec r1 bash #进入 r1 这个 namesapce 的空间中，相当于启动了一个单独的关于该 namespace 的 shell，可以使用 exit 退出&lt;/li>
&lt;li>ip netns exec r1 ip a s #显示 r1 这个 namespace 的网路信息&lt;/li>
&lt;li>ip netns exec r1 ip link set veth1.1 name eth0 #设定 r1 这个 namespace 中的 veth1.1 网卡的名字为 eth0&lt;/li>
&lt;/ul>
&lt;p>monitor&lt;/p></description></item><item><title>Docs: ip 命令行工具</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/x.linux-%E7%AE%A1%E7%90%86/linux-%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/iproute-%E5%B7%A5%E5%85%B7%E5%8C%85/ip-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/x.linux-%E7%AE%A1%E7%90%86/linux-%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/iproute-%E5%B7%A5%E5%85%B7%E5%8C%85/ip-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</guid><description/></item><item><title>Docs: ss 命令行工具</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/x.linux-%E7%AE%A1%E7%90%86/linux-%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/iproute-%E5%B7%A5%E5%85%B7%E5%8C%85/ss-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/x.linux-%E7%AE%A1%E7%90%86/linux-%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/iproute-%E5%B7%A5%E5%85%B7%E5%8C%85/ss-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</guid><description>
&lt;h1 id="概述">&lt;strong>概述&lt;/strong>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://man.cx/ss">manual&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>ss 用于转储 socket 统计信息。 它允许显示类似于 netstat 工具的信息。 它可以显示比其他工具更多的 TCP 和状态信息&lt;/p>
&lt;h1 id="syntax语法">Syntax(语法)&lt;/h1>
&lt;p>&lt;strong>ss [OPTIONS] [FILTER]&lt;/strong>&lt;/p>
&lt;h2 id="options">OPTIONS&lt;/h2>
&lt;p>如果不使用任何选项，则 ss 命令将显示已建立连接的打开的非监听套接字（例如 TCP / UNIX / UDP）的列表。&lt;/p>
&lt;pre>&lt;code>[root@lichenhao ~]# ss
Netid State Recv-Q Send-Q Local Address:Port Peer Address:Port
......
u_str ESTAB 0 0 * 22170 * 22171
u_str ESTAB 0 0 /run/systemd/journal/stdout 23554 * 23347
u_str ESTAB 0 0 /var/lib/sss/pipes/private/sbus-dp_implicit_files.850 22246 * 22240
tcp ESTAB 0 0 172.19.42.248:ssh 172.19.42.203:63482
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>**-A QUERY, &amp;ndash;query=QUERY, &amp;ndash;socket=QUERY **# 要转储的套接字表的列表，用逗号分隔。可以理解以下标识符：all，inet，tcp，udp，raw，unix，packet，netlink，unix_dgram，unix_stream，unix_seqpacket，packet_raw，packet_dgram，dccp，sctp，vsock_stream，vsock_dgram，xdp 列表中的任何项目都可以选择添加前缀带有感叹号&lt;code>!&lt;/code>，以防止该套接字表被转储。&lt;/li>
&lt;li>**-a, &amp;ndash;all **# 显示所有已监听和未监听的 Sockets。&lt;/li>
&lt;li>**-e, &amp;ndash;extended **# 显示详细的 Socket 信息。对于 TCP 连接来说，相当于 -o 选项。
&lt;ul>
&lt;li>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/olkcwd/1626247848384-bfa595e0-6f72-49f3-b73c-665c07b5dfa1.png" alt="image.png">&lt;/li>
&lt;li>timer # TCP 连接的 keepalive 计时器&lt;/li>
&lt;li>uid # 该 Socket 所属的用户 ID&lt;/li>
&lt;li>ino # 该 Socket 的 inode 编号&lt;/li>
&lt;li>sk # 该 Socket 的 UUID&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>-n, &amp;ndash;numeric&lt;/strong> # 直接使用 ip 地址，而不通过域名服务器(常用，节省资源，界面明确）&lt;/li>
&lt;li>&lt;strong>-o, &amp;ndash;options&lt;/strong> # 显示定时器信息。格式为：&lt;code>timer:(timer_name&amp;gt;,&amp;lt;expire_time&amp;gt;,&amp;lt;retrans)&lt;/code>
&lt;ul>
&lt;li>timer_name # 计时器的名称。一共有 5 种：
&lt;ul>
&lt;li>on # 以下三种计时器之一: TCP retrans timer,TCP early retrans timer and tail loss probe timer&lt;/li>
&lt;li>keepalive # TCP 的保持活动计时器。Linux Kernel 默认 7200 秒。&lt;/li>
&lt;li>timewait # 当 TCP 连接进入 TIME-WAIT 状态时，将会触发该计时器。&lt;/li>
&lt;li>persist # zero window probe timer&lt;/li>
&lt;li>unknown # 未知计时器&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>expire_time # 计时器的过期时间&lt;/li>
&lt;li>retrans # 重新传输的次数。即 TCP keepalive 探测是重试的次数。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>**-s, &amp;ndash;summary **# 输出摘要统计信息. 此选项不解析套接字列表，以从各种来源获取摘要。 常用于套接字数量太大以至于无法解析 /proc/net/tcp 时。输出信息如下：&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;pre>&lt;code>[root@lichenhao ~]# ss -s
Total: 170
TCP: 5 (estab 1, closed 0, orphaned 0, timewait 0)
Transport Total IP IPv6
RAW 0 0 0
UDP 5 3 2
TCP 5 3 2
INET 10 6 4
FRAG 0 0 0
&lt;/code>&lt;/pre>
&lt;h2 id="filter">FILTER&lt;/h2>
&lt;p>&lt;strong>FILTER = [ state STATE-FILTER ] [ EXPRESSION ]&lt;/strong>
&lt;strong>STATE-FILTER(状态过滤)&lt;/strong> # 指定要过滤的连接状态，可用的状态有 established, syn-sent, syn-recv, fin-wait-1, fin-wait-2, time-wait, closed, close-wait, last-ack, listen 和 closing.&lt;/p>
&lt;ul>
&lt;li>除了以上状态，还可以用其他描述方式代替一个或多个状态&lt;/li>
&lt;li>**all # **for all the states&lt;/li>
&lt;li>&lt;strong>connected&lt;/strong> # all the states except for &lt;strong>listening&lt;/strong> and &lt;strong>closed&lt;/strong>&lt;/li>
&lt;li>&lt;strong>synchronized&lt;/strong> # &lt;strong>syn-sent &lt;strong>状态之外的所有&lt;/strong>已经连接&lt;/strong>的状态&lt;/li>
&lt;li>&lt;strong>bucket&lt;/strong> # states, which are maintained as minisockets, i.e. &lt;strong>time-wait&lt;/strong> and &lt;strong>syn-recv&lt;/strong>&lt;/li>
&lt;li>&lt;strong>big&lt;/strong> # opposite to &lt;strong>bucket&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>**EXPRESSION(表达式) **#&lt;/p>
&lt;h3 id="ip-地址筛选">IP 地址筛选&lt;/h3>
&lt;p>ss src ADDRESS_PATTERN&lt;/p>
&lt;ul>
&lt;li>src：表示来源&lt;/li>
&lt;li>ADDRESS_PATTERN：表示地址规则&lt;/li>
&lt;/ul>
&lt;p>如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>ss src 120.33.31.1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 列出来之20.33.31.1的连接&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>＃ 列出来至120.33.31.1,80端口的连接
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ss src 120.33.31.1:http
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ss src 120.33.31.1:8
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="端口筛选">端口筛选&lt;/h3>
&lt;p>ss dport OP PORT&lt;/p>
&lt;ul>
&lt;li>OP # 运算符&lt;/li>
&lt;li>PORT # 表示端口&lt;/li>
&lt;li>dport # 表示过滤目标端口、相反的有 sport&lt;/li>
&lt;/ul>
&lt;p>OP 运算符如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">=&lt;/span> 或 le : 小于等于 &amp;gt;&lt;span style="color:#f92672">=&lt;/span> or ge : 大于等于
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span> 或 eq : 等于
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>!&lt;span style="color:#f92672">=&lt;/span> 或 ne : 不等于端口
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt; 或 lt : 小于这个端口 &amp;gt; or gt : 大于端口
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>OP 实例&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>ss sport &lt;span style="color:#f92672">=&lt;/span> :http 也可以是 ss sport &lt;span style="color:#f92672">=&lt;/span> :80
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ss dport &lt;span style="color:#f92672">=&lt;/span> :http
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ss dport &lt;span style="color:#ae81ff">\&amp;gt;&lt;/span> :1024
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ss sport &lt;span style="color:#ae81ff">\&amp;gt;&lt;/span> :1024
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ss sport &lt;span style="color:#ae81ff">\&amp;lt;&lt;/span> :32000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ss sport eq :22
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ss dport !&lt;span style="color:#f92672">=&lt;/span> :22
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ss state connected sport &lt;span style="color:#f92672">=&lt;/span> :http
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ss &lt;span style="color:#ae81ff">\(&lt;/span> sport &lt;span style="color:#f92672">=&lt;/span> :http or sport &lt;span style="color:#f92672">=&lt;/span> :https &lt;span style="color:#ae81ff">\)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ss -o state fin-wait-1 &lt;span style="color:#ae81ff">\(&lt;/span> sport &lt;span style="color:#f92672">=&lt;/span> :http or sport &lt;span style="color:#f92672">=&lt;/span> :https &lt;span style="color:#ae81ff">\)&lt;/span> dst 192.168.1/24
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="example">EXAMPLE&lt;/h1>
&lt;ul>
&lt;li>显示状态是 established 的所有 tcp 连接
&lt;ul>
&lt;li>ss -nta state established&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>显示所有已建立的 SMTP 连接
&lt;ul>
&lt;li>&lt;strong>ss -o state established &amp;lsquo;( dport = :smtp or sport = :smtp )&amp;rsquo;&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>显示所有已建立的 HTTP 连接
&lt;ul>
&lt;li>&lt;strong>ss -o state established &amp;lsquo;( dport = :http or sport = :http )&amp;rsquo;&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>为我们的网络 193.233.7/24 列出所有处于状态 FIN-WAIT-1 的 tcp socket，并查看它们的计时器。
&lt;ul>
&lt;li>&lt;strong>ss -o state fin-wait-1 &amp;lsquo;( sport = :http or sport = :https )&amp;rsquo; dst 193.233.7/24&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>列出所有 socket(TCP 除外) 中所有状态的套接字。
&lt;ul>
&lt;li>&lt;strong>ss -a -A &amp;lsquo;all,!tcp&amp;rsquo;&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="netstat-命令行工具">netstat 命令行工具&lt;/h1>
&lt;p>与 ss 命令类似，OPTIONS 都差不多，就是显示的信息格式还有内容有细微差别&lt;/p>
&lt;p>OPTIONS&lt;/p>
&lt;ol>
&lt;li>-a 或&amp;ndash;all：显示所有状态的连线中的端口&lt;/li>
&lt;li>-p 或&amp;ndash;programs：显示正在使用端口的程序识别码和程序名称；&lt;/li>
&lt;li>-t 或&amp;ndash;tcp：显示 TCP 传输协议的连线状况&lt;/li>
&lt;li>-u 或&amp;ndash;udp：显示 UDP 传输协议的连线状况&lt;/li>
&lt;li>-x 或&amp;ndash;unix：显示 Unix 相关选项&lt;/li>
&lt;li>-e 或&amp;ndash;extend：显示网络其他相关信息；&lt;/li>
&lt;li>-l 或&amp;ndash;listening：显示监听中的服务端口&lt;/li>
&lt;li>-r 或&amp;ndash;route：显示 Routing Table；（与 route 命令显示信息相同）&lt;/li>
&lt;li>-s 或&amp;ndash;statistice：显示网络工作信息统计表；&lt;/li>
&lt;li>-c 或&amp;ndash;continuous：持续列出网络状态；&lt;/li>
&lt;/ol>
&lt;p>输出列表内容解析：分为两部分&lt;/p>
&lt;p>第一部分：Active Internet connections 活跃的互联网连接&lt;/p>
&lt;p>Proto 显示 socket 使用的协议(tcp,udp,raw)&lt;/p>
&lt;p>Recv-Q 和 Send-Q 指的是接收队列和发送队列(这些数字一般都应该是 0,如果不是则表示软件包正在队列&lt;/p>
&lt;p>中堆)&lt;/p>
&lt;p>Local Address 显示在本地哪个地址和端口上监听&lt;/p>
&lt;p>Foreign Address 显示接收外部哪些地址哪个端口的请求&lt;/p>
&lt;p>State 显示 socket 的状态(通常只有 tcp 有状态信息)&lt;/p>
&lt;p>PID/Program name 显示 socket 进程 id 和进程名&lt;/p>
&lt;p>第二部分：Active UNIX domain sockets 活跃的 UNIX 域套接口，只能用于本机通信的，性能可以提高一倍&lt;/p>
&lt;p>RefCnt 表示连接到本套接口上的进程号&lt;/p>
&lt;p>Types 显示套接口的类型&lt;/p>
&lt;p>Path 表示连接到套接口的其它进程使用的路径名&lt;/p>
&lt;p>常用例子：&lt;/p>
&lt;ol>
&lt;li>netstat -atnp #不进行域名解析的查看所有状态的端口协议为 tcp 且显示该端口的进程号和进程名的相关网络信息&lt;/li>
&lt;li>netstat -n | awk &amp;lsquo;/^tcp/ {print $5}&amp;rsquo; | awk -F: &amp;lsquo;{print $1}&amp;rsquo;| sort | uniq -c | sort -rn #统计当前系统中所有 tcp 和 udp 的连接，根据状态统计&lt;/li>
&lt;li>netstat -n | awk &amp;lsquo;/^tcp/ {++S[$NF]} END {for(a in S) print a, S[a]}&amp;rsquo; #统计当前系统中所有 tcp 和 udp 的连接，根据状态统计&lt;/li>
&lt;/ol></description></item></channel></rss>