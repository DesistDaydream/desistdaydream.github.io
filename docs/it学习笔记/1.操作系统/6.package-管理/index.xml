<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – 6.Package 管理</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/6.package-%E7%AE%A1%E7%90%86/</link><description>Recent content in 6.Package 管理 on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/6.package-%E7%AE%A1%E7%90%86/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Debian 包管理</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/6.package-%E7%AE%A1%E7%90%86/debian-%E5%8C%85%E7%AE%A1%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/6.package-%E7%AE%A1%E7%90%86/debian-%E5%8C%85%E7%AE%A1%E7%90%86/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://ubuntu.com/server/docs/package-management">Ubuntu 官方文档，软件-包管理&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Ubuntu 具有一个全面的包管理系统，用于安装、升级、配置和删除软件。除了为我们的 Ubuntu 系统提供超过 60k 个软件包的有组织访问之外，软件包管理工具还具有依赖性解析功能和软件更新检查功能。
Ubuntu 的包管理系统源自使用 Debian GUN/Linux 发行版的系统。Debian 软件包文件通常具有 &lt;code>.deb&lt;/code> 扩展名，并且可以存储于 &lt;strong>Repositories(存储库)&lt;/strong> 中，存储库是网络上或物理媒体(e.g.CD-ROM 光盘)上的软件包集合。软件包通常是预编译的二进制格式。
许多包使用依赖项。依赖项是主包为了正常运行而需要的附加包。例如，语音合成包 Festival 依赖于包 alsa-utils，该包提供了音频播放所需的 ALSA 声音库工具。为了让节日正常运行，必须安装它及其所有依赖项。 Ubuntu 中的软件管理工具会自动执行此操作。&lt;/p>
&lt;h1 id="dpkg-工具集">DPKG 工具集&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;a href="https://en.wikipedia.org/wiki/Dpkg">Wiki,Dpkg&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h2 id="概述-1">概述&lt;/h2>
&lt;p>&lt;strong>Debian Package(Debian 包，简称 dpkg)&lt;/strong> 是 Debian 及其衍生的 Linux 发行版的软件包管理程序，用于安装、删除 _.deb 软件包，以及查看 _.deb 软件包的信息。&lt;/p>
&lt;p>Dpkg 包含一系列的包管理工具：&lt;/p>
&lt;ul>
&lt;li>dpkg-deb&lt;/li>
&lt;li>dpkg-split&lt;/li>
&lt;li>dpkg-query&lt;/li>
&lt;li>dpkg-statoverride&lt;/li>
&lt;li>dpkg-divert&lt;/li>
&lt;li>dpkg-trigger&lt;/li>
&lt;/ul>
&lt;h2 id="dpkg-关联文件与配置">DPKG 关联文件与配置&lt;/h2>
&lt;h2 id="dpkg">dpkg&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://man7.org/linux/man-pages/man1/dpkg.1.html">Manual(手册),dpkg(1)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h3 id="syntax语法">Syntax(语法)&lt;/h3>
&lt;p>&lt;strong>dpkg [OPTIONS] ACTION&lt;/strong>
&lt;strong>ACTION&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-i, &amp;ndash;install PACKAGE&lt;/strong> # 安装指定的 PACKAGE。&lt;/li>
&lt;li>&lt;strong>-r，&amp;ndash;remove PACKAGE&lt;/strong> # 删除指定的已安装的 PACKAGE。保留配置&lt;/li>
&lt;li>**-p, &amp;ndash;purge PACKAGE **# 删除指定的已安装的 PACKAGE。连配置也删除&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>OPTIONS&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul>
&lt;h2 id="dpkg-query">dpkg-query&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://man7.org/linux/man-pages/man1/dpkg-query.1.html">Manual(手册)，dpkg-query(1)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>dpki-query 是一个查询工具，可以从 dpkg 数据库中查询包的信息&lt;/p>
&lt;h3 id="syntax语法-1">Syntax(语法)&lt;/h3>
&lt;p>&lt;strong>dpkg-query [OPTIONS] COMMAND # 安装包查询命令&lt;/strong>
&lt;strong>OPTIONS&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>COMMAND&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-L, &amp;ndash;listfiles &lt;!-- raw HTML omitted -->&lt;/strong> # 列出系统中 PACKAGE 的安装路径，所有关联的安装文件都会列出&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-l, &amp;ndash;list [PACKAGE]&lt;/strong> # 列出所有包，或指定的 PACKAGE，PACKAGE 可以使用通配符。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-S, &amp;ndash;search &lt;!-- raw HTML omitted -->&lt;/strong> # 搜索 FILE 属于哪个 Package。FILE 可以使用通配符。&lt;/p>
&lt;ul>
&lt;li>注意：当我们搜索二进制的命令文件属于哪个 Package 时，经常会搜不到，这是因为 which 命令查到的命令路径是 &lt;strong>/usr/bin&lt;/strong>，但是 Debian 包安装的程序，通常都是在 &lt;strong>/bin&lt;/strong> 目录下，虽然这俩是具有软链接的关系。&lt;/li>
&lt;li>所以，当我们搜不到时，可以尝试使用 /bin 目录作为二进制文件的路径前缀。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-s, &amp;ndash;status &lt;!-- raw HTML omitted -->&lt;/strong> # 报告所输入的(PackageName)这个软件包的状态&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="dpkg-相关程序示例">dpkg 相关程序示例&lt;/h2>
&lt;ul>
&lt;li>列出 corosync 这个包的安装路径
&lt;ul>
&lt;li>dpkg-query -L corosync&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>查找 nsswitch.conf 文件属于哪个包，并显示所在路径
&lt;ul>
&lt;li>dpkg-query &amp;ndash;search nsswitch.conf&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>清除所有已删除包的残余配置文件，可以清除一些残留无用的配置。
&lt;ul>
&lt;li>dpkg -l | grep ^rc|awk &amp;lsquo;{print $2}&amp;rsquo; | sudo xargs dpkg -P&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="apt-工具集">APT 工具集&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/APT_(software)">Wiki&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/APT_(software)">APT&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://salsa.debian.org/apt-team/apt">Debian 项目&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="概述-2">概述&lt;/h2>
&lt;p>&lt;strong>Advanced Package Tool(高级包工具，简称 APT)&lt;/strong> 是一个开源的用户接口，用来处理 Debian、Ubuntu 及其相关 Linux 发行版的软件安装和删除。&lt;/p>
&lt;p>不过，比较尴尬的是，APT 没有像 YUM 那种 repolist 查看所有仓库信息的命令，也就无法通过命令来启用或禁用仓库，只能编辑 /etc/apt/ 目录下的 source.list 相关文件来讲仓库注释以便禁用仓库。&lt;/p>
&lt;p>APT 中包含如下工具&lt;/p>
&lt;ul>
&lt;li>&lt;strong>apt-get&lt;/strong> # 安装、升级、删除包及其依赖，还可以从经过身份验证的来源检索包装和信息的信息&lt;/li>
&lt;li>&lt;strong>apt-cache&lt;/strong> # 查询已安装的包可用信息，以及查询可用的包的信息&lt;/li>
&lt;li>&lt;strong>apt-cdrom&lt;/strong> to use removable media as a source for packages&lt;/li>
&lt;li>&lt;strong>apt-config&lt;/strong> as an interface to the configuration settings&lt;/li>
&lt;li>&lt;strong>apt-key&lt;/strong> as an interface to manage authentication keys&lt;/li>
&lt;li>&lt;strong>apt-extracttemplates&lt;/strong> to be used by debconf to prompt for configuration questions before installation&lt;/li>
&lt;li>&lt;strong>apt-ftparchive&lt;/strong> creates Packages and other index files needed to publish an archive of deb packages&lt;/li>
&lt;li>&lt;strong>apt-sortpkgs&lt;/strong> is a Packages/Sources file normalizer&lt;/li>
&lt;li>&lt;strong>apt&lt;/strong> # 一种高级命令行界面，可用于更好的交互式用法&lt;/li>
&lt;/ul>
&lt;h2 id="apt-关联文件">APT 关联文件&lt;/h2>
&lt;p>&lt;strong>/etc/apt/*&lt;/strong> # APT 程序配置文件目录&lt;/p>
&lt;ul>
&lt;li>&lt;strong>./apt.conf&lt;/strong> # APT 程序的运行时配置文件。Configuration Item: Dir::Etc::Main.&lt;/li>
&lt;li>&lt;strong>./apt.conf.d/*&lt;/strong> # apt.conf 文件 include(包含) 该目录下的所有文件。Configuration Item: Dir::Etc::Parts.&lt;/li>
&lt;li>&lt;strong>./sources.list&lt;/strong> # 包源列表，apt 程序根据这个文件中列表，从对应位置获取包。Configuration Item: Dir::Etc::SourceList.&lt;/li>
&lt;li>&lt;strong>./sources.list.d/*&lt;/strong> # sources.list 文件 include(包含) 该目录下的所有文件。文件以 .list 结尾。Configuration Item: Dir::Etc::SourceParts.&lt;/li>
&lt;li>&lt;strong>/etc/apt/preferences&lt;/strong> # Version preferences file. This is where you would specify &amp;ldquo;pinning&amp;rdquo;, i.e. a preference to get certain packages from a separate source or from a different version of a distribution. Configuration Item: Dir::Etc::Preferences.&lt;/li>
&lt;li>&lt;strong>/etc/apt/preferences.d/*&lt;/strong> # File fragments for the version preferences. Configuration Item: Dir::Etc::PreferencesParts.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>/var/cache/apt/archives/*&lt;/strong> # retrieved(已检索) 的包文件的存储路径。apt 程序的缓存路径。所有下载的 .deb 包都会在这个目录中。Configuration Item: Dir::Cache::Archives.&lt;/p>
&lt;ul>
&lt;li>这个目录下的所有 *.deb 文件会被 &lt;strong>apt clean&lt;/strong> 命令清理。在使用 apt install 安装时，被安装的 .deb 包有时候也会存在该目录下&lt;/li>
&lt;li>&lt;strong>./partial/*&lt;/strong> # Storage area for package files in transit. Configuration Item: Dir::Cache::Archives (partial will be implicitly appended)&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>/var/lib/apt/lists/*&lt;/strong> # Storage area for state information for each package resource specified in sources.list(5) Configuration Item: Dir::State::Lists.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>./partial/*&lt;/strong> # Storage area for state information in transit. Configuration Item: Dir::State::Lists (partial will be implicitly appended)&lt;/li>
&lt;/ul>
&lt;h3 id="配置本地-apt-源">配置本地 apt 源&lt;/h3>
&lt;p>以 20.04 TLS 版本举例&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 将 iso 文件挂载到本地目录&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mount ubuntu-20.04.1-live-server-amd64.iso /mnt/cdrom/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 配置本地 apt 源&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mkdir -p /root/backup &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> cp -r /etc/apt /root/backup/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo tee /etc/apt/sources.list &amp;gt; /dev/null &lt;span style="color:#e6db74">&amp;lt;&amp;lt;EOF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">deb file:///mnt/cdrom focal main restricted
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其实就是把中间的 &lt;code>http://PATH&lt;/code> 改为 &lt;code>file:///PATH/TO/DIR&lt;/code> 即可，&lt;/p>
&lt;h2 id="apt-get">apt-get&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://manpages.ubuntu.com/manpages/focal/man8/apt-get.8.html">Manual(手册),apt-get(8)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h3 id="syntax语法-2">Syntax(语法)&lt;/h3>
&lt;p>&lt;strong>apt-get COMMAND [OPTIONS]&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>注意：可以直接使用 apt 命令&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>COMMAND&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>**install **# 安装或升级软件包&lt;/li>
&lt;li>&lt;strong>update&lt;/strong> # 更新软件包的索引。更新 source.list 文件或长时间没更新时，需要先 update 再安装包。&lt;/li>
&lt;li>&lt;strong>upgrade&lt;/strong> # 升级所有软件包。
&lt;ul>
&lt;li>注意：upgrade 之前必须要执行 &lt;code>apt update&lt;/code>，以便让 ATP 知道有新版本的软件包可用。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>reinstall &lt;!-- raw HTML omitted -->&lt;/strong> # 重新安装软件包&lt;/li>
&lt;li>&lt;strong>remove &lt;!-- raw HTML omitted -->&lt;/strong> # 删除指定的软件包&lt;/li>
&lt;li>&lt;strong>purge &lt;!-- raw HTML omitted -->&lt;/strong> # 删除指定得软件包及其配置文件&lt;/li>
&lt;li>&lt;strong>clean&lt;/strong> # 清除本地存储库内的已检索到的软件包文件。
&lt;ul>
&lt;li>该命令会从 /var/cache/apt/archives/ 和 /var/cache/apt/archives/partial/ 目录中删除除了锁文件以外的所有文件。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>**autoremove **# 自动清理所有不再使用的依赖&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>OPTIONS&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>Note：所有命令行选项都可以通过配置文件来设置。在配置文件中的写法在 Configuration Item 字段后面&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;strong>-d, &amp;ndash;download-only&lt;/strong> # 仅下载。包文件只会 retrieved(被检索)，并不会 unpacked(被解包) 或者 installed(被安装)。
&lt;ul>
&lt;li>配置项：APT::Get::Download-Only.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>&amp;ndash;only-upgrade&lt;/strong> # 与 install 命令一起使用时， 将升级指定的软件包，若软件包未安装，则忽略安装行为。
&lt;ul>
&lt;li>配置项：APT::Get::Only-Upgrade&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="example">EXAMPLE&lt;/h3>
&lt;ul>
&lt;li>仅下载包及其依赖
&lt;ul>
&lt;li>&lt;strong>apt reinstall -d `apt-cache depends docker-ce=5:19.03.11~3-0~ubuntu-focal | grep Depends | awk -F&amp;rsquo;: &amp;rsquo; &amp;lsquo;{print $2}&amp;rsquo;&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>安装指定版本的包(注意：包名和版本号之间用 &lt;code>=&lt;/code> 符号分割)
&lt;ul>
&lt;li>&lt;strong>apt install kubectl=1.19.9-00&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="apt-cache">apt-cache&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://man.cx/apt-cache">Manul(手册)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>对 APT 程序生成的包缓存执行各种操作。&lt;/p>
&lt;h3 id="syntax语法-3">Syntax(语法)&lt;/h3>
&lt;p>&lt;strong>apt-cache COMMAND [OPTIONS]&lt;/strong>&lt;/p>
&lt;p>&lt;strong>COMMAND&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>madison &lt;!-- raw HTML omitted -->&lt;/strong> # 显示包的可用版本&lt;/li>
&lt;li>&lt;strong>policy [PKG]&lt;/strong> # 显示包源的优先级。若指定了 PKG，则显示包的三个信息：1.已安装的版本。2.可安装的最高版本。3.版本列表&lt;/li>
&lt;li>&lt;strong>stats&lt;/strong> # 显示缓存中包的统计信息&lt;/li>
&lt;li>依赖关系命令
&lt;ul>
&lt;li>&lt;strong>depends &lt;!-- raw HTML omitted -->&lt;/strong> # 列出程序包具有的每个依赖关系以及可以满足该依赖关系的所有其他可能的程序包。&lt;/li>
&lt;li>&lt;strong>rdepends &lt;!-- raw HTML omitted -->&lt;/strong> # 显示了程序包具有的每个反向依赖项的列表。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="example-1">EXAMPLE&lt;/h3>
&lt;ul>
&lt;li>显示 docker-ce=5:20.10.0~3-0~ubuntu-focal 包的信息，可以看到这个包的源、版本等信息。
&lt;ul>
&lt;li>&lt;strong>apt-cache show docker-ce=5:20.10.0~3-0~ubuntu-focal&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>显示 containerd 包的
&lt;ul>
&lt;li>&lt;strong>apt-cache policy containerd&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>查询 xxx 包 依赖哪些包
&lt;ul>
&lt;li>&lt;strong>apt-cache depends xxx&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>查询 xxx 包 被哪些包依赖
&lt;ul>
&lt;li>&lt;strong>apt-cache rdepends xxx&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="apt-key">apt-key&lt;/h2>
&lt;h3 id="example-2">EXAMPLE&lt;/h3>
&lt;ul>
&lt;li>删除仓库的密钥
&lt;ul>
&lt;li>先列出所有密钥
&lt;ul>
&lt;li>sudo apt-key list&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>删除指定密钥
&lt;ul>
&lt;li>sudo apt-key del &amp;ldquo;3820 03C2 C8B7 B4AB 813E 915B 14E4 9429 73C6 2A1B&amp;rdquo;&lt;/li>
&lt;li>也可以仅指定最后 8 个字符&lt;/li>
&lt;li>sudo apt-key del 73C62A1B&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;h1 id="更新仓库">更新仓库&lt;/h1>
&lt;ul>
&lt;li>sudo apt update&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="包的自动更新">包的自动更新&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://ubuntu.com/server/docs/package-management">Ubuntu 官方文档，软件-包管理&lt;/a>-自动更新(这个小节没有链接)&lt;/li>
&lt;li>&lt;a href="https://wiki.debian.org/UnattendedUpgrades">https://wiki.debian.org/UnattendedUpgrades&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/mvo5/unattended-upgrades">GitHub 项目，mvo5/unattended-upgrades&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>APT 工具可以实现软件包的 Automatic Updates(自动更新) 功能，主要依赖于 unattended-upgrades 软件来实现，该软件现在随系统默认安装。该软件安装完成后，会自动启动 &lt;strong>unattended-upgrades.service&lt;/strong> 服务。&lt;/p>
&lt;h2 id="unattended-upgrades-关联文件与配置">Unattended upgrades 关联文件与配置&lt;/h2>
&lt;p>&lt;strong>/etc/apt/apt.conf.d/*&lt;/strong> #&lt;/p>
&lt;ul>
&lt;li>&lt;strong>10periodic&lt;/strong>&lt;/li>
&lt;li>&lt;strong>20auto-upgrades&lt;/strong>&lt;/li>
&lt;li>&lt;strong>50unattended-upgrades&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h2 id="关闭自动更新">关闭自动更新&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo sed -i.bak &lt;span style="color:#e6db74">&amp;#39;s/1/0/&amp;#39;&lt;/span> /etc/apt/apt.conf.d/10periodic
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo sed -i.bak &lt;span style="color:#e6db74">&amp;#39;s/1/0/&amp;#39;&lt;/span> /etc/apt/apt.conf.d/20auto-upgrades
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo systemctl disable unattended-upgrades --now
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Redhat 包管理</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/6.package-%E7%AE%A1%E7%90%86/redhat-%E5%8C%85%E7%AE%A1%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/6.package-%E7%AE%A1%E7%90%86/redhat-%E5%8C%85%E7%AE%A1%E7%90%86/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;h1 id="rpm-工具">rpm 工具&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://man7.org/linux/man-pages/man8/rpm.8.html">Manual(手册),rpm(8)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="syntax语法">Syntax(语法)&lt;/h2>
&lt;p>**rpm -i [OPTIONS] PACKAGE ** # 安装软件包&lt;/p>
&lt;p>OPTIONS&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-v&lt;/strong> # 显示安装过程&lt;/li>
&lt;li>&lt;strong>-h&lt;/strong> # 显示安装进度&lt;/li>
&lt;/ul>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>&lt;strong>rpm -ivh X.rpm&lt;/strong> # 安装 X.rpm 软件包&lt;/li>
&lt;li>&lt;strong>rpm -Uvh X.rpm&lt;/strong> # 升级 X.rpm 软件包&lt;/li>
&lt;/ul>
&lt;p>**rpm -q [OPTIONS] PACKAGE ** # 查询软件包&lt;/p>
&lt;p>OPTIONS&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-a&lt;/strong> # 列出所有已经安装在系统上的所有软件包的完整名称&lt;/li>
&lt;li>&lt;strong>-i &amp;lt;PACKAGE&amp;gt;&lt;/strong> # 列出 PACKAGE 这个包的详细信息，安装时间，版本，开发商，描述等等&lt;/li>
&lt;li>&lt;strong>-l &amp;lt;PACKAGE&amp;gt;&lt;/strong> # 列出 PACKAGE 这个包的所有文件与目录所在完整文件名(list)&lt;/li>
&lt;li>&lt;strong>-R &amp;lt;PACKAGE&amp;gt;&lt;/strong> # 列出 PACKAGE 这个包所依赖的文件&lt;/li>
&lt;li>**-f &amp;lt;FILE&amp;gt; ** # 列出该 FILE 属于哪个 PACKAGE 中的文件&lt;/li>
&lt;/ul>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>rpm -q PACKAGE_NAME&lt;/li>
&lt;li>rpm -qp *.rpm # 获取当前目录下的 rpm 包相关信息&lt;/li>
&lt;li>rpm -qa | less # 列出所有已安装的软件包&lt;/li>
&lt;li>rpm -qf /usr/sbin/httpd # 查看某个文件属于哪个软件包，可以是普通文件或可执行文件，跟文件的绝对路径&lt;/li>
&lt;li>rpm -qi PACKAGE_NAME # 列出已安装的这个包的标准详细信息&lt;/li>
&lt;li>rpm -ql PACKAGE_NAME # 列出 rpm 包的文件内容&lt;/li>
&lt;li>rpm -q –scripts kernel | less # 列出已安装 rpm 包自带的安装前和安装后脚本&lt;/li>
&lt;li>rpm -qa –queryformat ‘Package %{NAME} was build on %{BUILDHOST}\n’ | less queryformat # 强大的查询&lt;/li>
&lt;li>可以列出 queryformat 可以使用的所有变量从而组合成更强大的查询
&lt;ul>
&lt;li>rpm –querytags | less&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>rpm -e [OPTIONS] PACKAGE&lt;/strong> # 删除软件包&lt;/p>
&lt;p>OPTIONS&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&amp;ndash;nodeps&lt;/strong> # 不考虑依赖，单独卸载&lt;/li>
&lt;/ul>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>rpm -e PACKAGE_NAME&lt;/li>
&lt;li>rpm -e –nodeps PACKAGE_NAME # 不考虑依赖包&lt;/li>
&lt;li>rpm -e –allmatches PACKAGE_NAME # 删除所有跟 PACKAGE_NAME 匹配的所有版本的包&lt;/li>
&lt;/ul>
&lt;p>**rpm -V [OPTIONS] PACKAGE ** # 验证软件包&lt;/p>
&lt;p>OPTIONS&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-a&lt;/strong> # 列出系统上所有可能被更改过的文件&lt;/li>
&lt;/ul>
&lt;h1 id="dnf-工具">dnf 工具&lt;/h1>
&lt;p>dnf 是 yum 的替代品，是 RedHat 系列系统下一代的包管理器。dnf 的命令与 yum 命令基本相同，只是后来实现逻辑不同，所以 dnf 更快，更好用。&lt;/p>
&lt;p>在 centos 8 中， yum 命令实际上只是 dnf 的别名，在使用 yum 时，调用的是 dnf 命令。&lt;/p>
&lt;p>在 CentOS 7 及之前的版本，yum 官方仓库一直都是 Base 库、Extras 库、Updates 库、centosplus 库等。其中 Base 库是安装 CentOS 时必须提供的仓库，它提供 CentOS 安装(比如可以选择安装桌面环境、开发工具等)、运行以及一些常用用户空间程序。&lt;/p>
&lt;p>在 CentOS 8 中发生了变化，原来的 base 库被拆分成两部分：**「AppStream」**和 Base 库。安装 CentOS 8 时必须提供这两个库。&lt;/p>
&lt;ul>
&lt;li>CentOS 8 的 Base 库提供安装和运行 CentOS 8 时必须的包，即 CentOS 核心包。这个仓库中全都是 rpm 包。&lt;/li>
&lt;li>CentOS 8 的 AppStream 库提供常用用户空间程序，它们并不一定是安装和运行 CentOS 8 所必须的，比如 Python 包、Perl 包等语言包都在 AppStream。AppStream 中包含 rpm 包和 dnf 的模块。&lt;/li>
&lt;/ul>
&lt;p>AppStream 库中的包一般是用户空间程序包，这些程序的更新速度一般比 CentOS 系统更新快的多，将它们单独提取到 AppStream 库，意味着这些程序包和系统相关的包被解绑分开到两个仓库，这可以让系统包和常用程序包分开升级，有利于提供这些程序包的最新的版本。&lt;/p>
&lt;p>使用过 CentOS 的人可能都会庆幸这种改变。最近这些年互联网的发展极为迅速，很多程序包的迭代速度也非常快，以前的 CentOS 版本中，很多程序的版本往往都非常古老，要升级这些程序包，只能单独配置它们的镜像仓库(相当于是第三方仓库)，甚至很多程序只能自己编译新版本。&lt;/p>
&lt;h2 id="dnf-配置">dnf 配置&lt;/h2>
&lt;h1 id="yum-工具">yum 工具&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>Manual(手册),yum(8)&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="yum-关联文件与配置">yum 关联文件与配置&lt;/h2>
&lt;p>&lt;strong>/etc/yum.repos.d/*&lt;/strong> # 该目录下是所有源的配置文件，repos 为 repository(仓库)的简称，即 yum 仓库的意思&lt;/p>
&lt;p>配置本地 yum 源：cat local.repo（需要将系统 ISO 镜像挂载到/mnt/cdrom 上）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo tee /etc/yum.repos.d/local.repo &amp;gt; /dev/null &lt;span style="color:#e6db74">&amp;lt;&amp;lt;EOF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">[local_server]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">name=This is a local repo
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">baseurl=file:///mnt/cdrom
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">enabled=1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">gpgcheck=1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>配置远程 yum 源：
在 ISO 挂载目录，启动 80 端口，然后想要使用该源的，配置文件中 baseurl 改为 IP:///PATH 即可&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo tee /etc/yum.repos.d/remote.repo &amp;gt; /dev/null &lt;span style="color:#e6db74">&amp;lt;&amp;lt;EOF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">[remote_server]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">name=This is a local repo
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">baseurl=http://10.253.26.241/
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">enabled=1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">gpgcheck=1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>也可以通过一个可以访问外网的机器，使用 nginx 代理出去&lt;/p>
&lt;h2 id="syntax语法-1">Syntax(语法)&lt;/h2>
&lt;p>&lt;strong>yum [OPTIONS] [COMMAND] [PACKAGE &amp;hellip;]&lt;/strong>&lt;/p>
&lt;h3 id="options">OPTIONS&lt;/h3>
&lt;ul>
&lt;li>-t, &amp;ndash;tolerant # be tolerant of errors&lt;/li>
&lt;li>-C, &amp;ndash;cacheonly # run entirely from system cache, don&amp;rsquo;t update cache&lt;/li>
&lt;li>-c [config file], &amp;ndash;config=[config file] # config file location&lt;/li>
&lt;li>-R [minutes], &amp;ndash;randomwait=[minutes] # maximum command wait time&lt;/li>
&lt;li>-d [debug level], &amp;ndash;debuglevel=[debug level] # debugging output level&lt;/li>
&lt;li>&lt;strong>&amp;ndash;showduplicates&lt;/strong> # 使用 info、list 和 search 命令中不限制包的最新版本(即显示包的所有版本，不仅仅是最新版本)&lt;/li>
&lt;li>-e [error level], &amp;ndash;errorlevel=[error level] # error output level&lt;/li>
&lt;li>--rpmverbosity=[debug level name] # debugging output level for rpm&lt;/li>
&lt;li>-q, &amp;ndash;quiet # quiet operation&lt;/li>
&lt;li>&lt;strong>-v, &amp;ndash;verbose&lt;/strong> # 详细操作&lt;/li>
&lt;li>-y, &amp;ndash;assumeyes # answer yes for all questions&lt;/li>
&lt;li>--assumeno # answer no for all questions&lt;/li>
&lt;li>--installroot=[path] # set install root&lt;/li>
&lt;li>**&amp;ndash;enablerepo=REPO **# 激活一个或多个仓库（支持通配符）&lt;/li>
&lt;li>**&amp;ndash;disablerepo=REPO **# 禁掉一个或多个仓库（支持通配符）&lt;/li>
&lt;li>**-x [package], &amp;ndash;exclude=[package] **# 在名称或 glob 不包含包。&lt;/li>
&lt;li>**&amp;ndash;disableexcludes=REPO **# 禁掉除了 REPO 这个之外的别的仓库&lt;/li>
&lt;li>--disableincludes=[repo] # disable includepkgs for a repo or for everything&lt;/li>
&lt;li>--obsoletes # enable obsoletes processing during updates&lt;/li>
&lt;li>--noplugins # disable Yum plugins&lt;/li>
&lt;li>&lt;strong>&amp;ndash;nogpgcheck&lt;/strong> # 关闭 gpg 签名检查&lt;/li>
&lt;li>--disableplugin=[plugin] # disable plugins by name&lt;/li>
&lt;li>--enableplugin=[plugin] # enable plugins by name&lt;/li>
&lt;li>&lt;strong>&amp;ndash;skip-broken&lt;/strong> # 跳过需要解决问题的包。即.忽略错误，强制安装。
&lt;ul>
&lt;li>如果安装多个包，其中一个包没有的话，就会停止，使用该选项则会继续安装其他包。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>--color=COLOR # control whether color is used&lt;/li>
&lt;li>--releasever=RELEASEVER # set value of $releasever in yum config and repo files&lt;/li>
&lt;li>**&amp;ndash;downloadonly **# 在 yum 一个包时，不安装到系统中，仅下载该包及其依赖到默认的 /var/cache/yum/x86_64/7/REPO/packages/ 目录中。&lt;/li>
&lt;li>&lt;strong>&amp;ndash;downloaddir=DLDIR&lt;/strong> # 当使用 &amp;ndash;downloadonly 参数时，可以使用该参数来指定要下载软件包的下载目录。&lt;/li>
&lt;li>&amp;ndash;setopt=SETOPTS # set arbitrary config and repo options&lt;/li>
&lt;li>&amp;ndash;bugfix # Include bugfix relevant packages, in updates&lt;/li>
&lt;li>--security # Include security relevant packages, in updates&lt;/li>
&lt;li>--advisory=ADVS, &amp;ndash;advisories=ADVS # Include packages needed to fix the given advisory, in updates&lt;/li>
&lt;li>--bzs=BZS # Include packages needed to fix the given BZ, in updates&lt;/li>
&lt;li>--cves=CVES # Include packages needed to fix the given CVE, in updates&lt;/li>
&lt;li>&amp;ndash;sec-severity=SEVS, &amp;ndash;secseverity=SEVS # Include security relevant packages matching the severity, in updates&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;h3 id="command">COMMAND&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>autoremove&lt;/strong> # 移除已经没有被依赖的软件包&lt;/li>
&lt;li>&lt;strong>autoremove &amp;lt;Package&amp;gt;&lt;/strong> # 删除名为 Package 的包以及其依赖的包&lt;/li>
&lt;li>&lt;strong>clean &amp;lt;all|headers|packages|metadata|dbcache|plugins|expire-cache|rpmdb&amp;gt;&lt;/strong> # 用于清理在 yum 缓存目录中随时间积累的各种东西&lt;/li>
&lt;li>&lt;strong>deplist &amp;lt;PACKAGE&amp;gt;&lt;/strong> # 查看 Package 这个包的依赖关系
&lt;ul>
&lt;li>dependency # 表示 PACKAGE 依赖哪些库&lt;/li>
&lt;li>provider # 表示 dependency 中的库由哪个包提供&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>groups&lt;/strong> # 对一组安装包组执行操作&lt;/li>
&lt;li>&lt;strong>info &amp;lt;STRING&amp;gt;&lt;/strong> # 显示包的详细信息，类似于 rpm -qai，可以使用 string 表达式，模糊搜索包名&lt;/li>
&lt;li>&lt;strong>list [LIST OPTIONS] [STRING]&lt;/strong> # 显示包的信息，类似于 rpm -qa，可以使用 string 表达式，模糊搜索包名&lt;/li>
&lt;li>&lt;strong>install &amp;lt;PACKAGE&amp;gt;&lt;/strong> # 安装包&lt;/li>
&lt;li>&lt;strong>localinstall&lt;/strong> #
&lt;ul>
&lt;li>注意：install 与 localinstall&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>makecache&lt;/strong> # 生成 yum 缓存，以便使用 yum 命令进行安装或者查找的时候，可以从缓存中提取数据进行搜索&lt;/li>
&lt;li>&lt;strong>repolist&lt;/strong> # 列出当前所有已经启用的存储库&lt;/li>
&lt;li>&lt;strong>search &amp;lt;STRING&amp;gt;&lt;/strong> # 从包名以及该包的描述中搜索 STRING(字符串)的内容&lt;/li>
&lt;/ul>
&lt;h3 id="list-options">list OPTIONS&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>installed&lt;/strong> # 列出已安装的包&lt;/li>
&lt;/ul>
&lt;h2 id="example">EXAMPLE&lt;/h2>
&lt;ul>
&lt;li>生成已经在 yum.repos.d 目录中源文件的缓存
&lt;ul>
&lt;li>&lt;code>yum makecache&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>清理所有缓存
&lt;ul>
&lt;li>&lt;code>yum clean all&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>列出 docker-ce 这个软件包的信息
&lt;ul>
&lt;li>&lt;code>yum info docker-ce&lt;/code>&lt;/li>
&lt;li>&lt;code>yum --showduplicates list docker-ce&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>列出 libcurl 这个包的依赖关系
&lt;ul>
&lt;li>&lt;code>yum deplist libcurl&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>yum --disablerepo=&amp;quot;\*&amp;quot; --enablerepo=&amp;quot;elrepo-kernel&amp;quot; list available&lt;/code> #&lt;/li>
&lt;li>下载 kubectl 的 rpm 包，及其依赖(所依赖的文件取决于当前系统环境，i.e.已经安装的依赖不在其下载的依赖范围内)
&lt;ul>
&lt;li>&lt;code>yum install --downloadonly --downloaddir=./ kubectl&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>查看 kubernetes 源下的所有可用的包
&lt;ul>
&lt;li>&lt;code>yum --disablerepo=&amp;quot;\*&amp;quot; --enablerepo=&amp;quot;kubernetes&amp;quot; --showduplicates list available&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>禁用 docker-ce-stable 与 kubernetes 仓库并执行升级操作
&lt;ul>
&lt;li>&lt;code>yum --disablerepo=&amp;quot;docker-ce-stable,kubernetes&amp;quot; upgrade&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: Snap</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/6.package-%E7%AE%A1%E7%90%86/snap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/6.package-%E7%AE%A1%E7%90%86/snap/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://snapcraft.io/">官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Snap_(software)">Wiki,Sanp&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Snap 是 Canonical 为使用 Linux 内核的操作系统开发的用于软件打包、部署的程序&lt;/p>
&lt;ul>
&lt;li>snap 既是命令行界面又是应用程序包格式&lt;/li>
&lt;li>snapd 是管理和维护快照的后台服务&lt;/li>
&lt;li>snapcraft 是用于构建您自己的快照的命令和框架&lt;/li>
&lt;li>&lt;a href="https://snapcraft.io/store">Snap Store&lt;/a> 提供了一个上传 sanp 软件包的地方，供用户浏览和安装&lt;/li>
&lt;/ul></description></item></channel></rss>