<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – PAM(可插入式认证模块)</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E7%99%BB%E5%BD%95-linux-%E4%B8%8E-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/pam%E5%8F%AF%E6%8F%92%E5%85%A5%E5%BC%8F%E8%AE%A4%E8%AF%81%E6%A8%A1%E5%9D%97/</link><description>Recent content in PAM(可插入式认证模块) on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E7%99%BB%E5%BD%95-linux-%E4%B8%8E-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/pam%E5%8F%AF%E6%8F%92%E5%85%A5%E5%BC%8F%E8%AE%A4%E8%AF%81%E6%A8%A1%E5%9D%97/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: PAM 模块详解</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E7%99%BB%E5%BD%95-linux-%E4%B8%8E-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/pam%E5%8F%AF%E6%8F%92%E5%85%A5%E5%BC%8F%E8%AE%A4%E8%AF%81%E6%A8%A1%E5%9D%97/pam-%E6%A8%A1%E5%9D%97%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E7%99%BB%E5%BD%95-linux-%E4%B8%8E-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/pam%E5%8F%AF%E6%8F%92%E5%85%A5%E5%BC%8F%E8%AE%A4%E8%AF%81%E6%A8%A1%E5%9D%97/pam-%E6%A8%A1%E5%9D%97%E8%AF%A6%E8%A7%A3/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;h2 id="参考">参考：&lt;/h2>
&lt;/blockquote>
&lt;h1 id="pam-的各模块说明">PAM 的各模块说明&lt;/h1>
&lt;p>全局参数&lt;/p>
&lt;ul>
&lt;li>file=/PATH/TO/FILE # 用于指定统计次数存放的位置，默认保存在/var/log/tallylog 文件中；&lt;/li>
&lt;li>onerr #当意外发生时，返加 PAM_SUCCESS 或 pam 错误代码，一般该项不进行配置；&lt;/li>
&lt;li>audit # 如果登录的用户不存在，则将访问信息写入系统日志；&lt;/li>
&lt;li>silent # 静默模式，不输出任何日志信息；&lt;/li>
&lt;li>no_log_info # 不打印日志信息通过 syslog&lt;/li>
&lt;li>上面的五项全局参数，一般在使用中都不需要单独配置。&lt;/li>
&lt;/ul>
&lt;h1 id="pam_faillock--在指定的时间间隔内计算身份验证失败">pam_faillock # 在指定的时间间隔内计算身份验证失败&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://man.cx/pam_faillock">Manual(手册),pam_faillock(8)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://man.cx/faillock.conf(5)">Manual(手册),faillock.conf(5)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/dev-sec/ansible-collection-hardening/issues/377">https://github.com/dev-sec/ansible-collection-hardening/issues/377&lt;/a>&lt;/li>
&lt;li>红帽官方文档,安全指南-账户锁
&lt;ul>
&lt;li>&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/security_guide/chap-hardening_your_system_with_tools_and_services#sect-Security_Guide-Workstation_Security-Account_Locking">https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/security_guide/chap-hardening_your_system_with_tools_and_services#sect-Security_Guide-Workstation_Security-Account_Locking&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>提供 auth、account 管理类型的模块&lt;/p>
&lt;p>pam_faillock 模块在指定的时间间隔内维护每个账户在尝试进行身份验证时的失败事件，并且在连续失败时锁定账户。&lt;/p>
&lt;p>pam_faillock 与大部分模块有一点不同，不建议在 PAM 规则中配置参数，而是推荐使用默认的 /etc/security/faillock.conf 配置文件中配置参数&lt;/p>
&lt;h2 id="关联文件">关联文件&lt;/h2>
&lt;p>&lt;strong>/etc/security/faillock.conf&lt;/strong> # 运行时配置文件。除了在 /etc/pam.d/* 文件中配置模块的参数，还可以通过这个文件配置模块的参数。
&lt;strong>/var/run/faillock/*&lt;/strong> # 记录用户身份验证失败的事件。目录中的文件名以用户名命名&lt;/p>
&lt;h2 id="模块参数">模块参数&lt;/h2>
&lt;p>&lt;strong>preauth | authfail | authsucc&lt;/strong> #
&lt;strong>conf=&amp;lt;/PATH/TO/FILE&amp;gt;&lt;/strong> # 指定要使用的配置文件路径。&lt;/p>
&lt;h2 id="应用示例">应用示例&lt;/h2>
&lt;p>登录失败 3 次会锁定用户 60 秒，账户登录失败 3 次 锁定 30 秒&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span> sudo tee /etc/pam.d/password-auth-local &amp;gt; /dev/null &lt;span style="color:#e6db74">&amp;lt;&amp;lt;EOF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">auth required pam_faillock.so preauth audit deny=3 even_deny_root unlock_time=60 root_unlock_time=30
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">auth include password-auth-ac
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">auth [default=die] pam_faillock.so authfail audit deny=3 even_deny_root unlock_time=60 root_unlock_time=30
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">account required pam_faillock.so
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">account include password-auth-ac
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">password include password-auth-ac
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">session include password-auth-ac
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ln -sf /etc/pam.d/password-auth-local /etc/pam.d/password-auth
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意：由于 password-auth-ac 中有 pam_succeed_if.so uid &amp;gt;= 1000 quiet_success 这样一条规则，所以上述配置对 root 账户不起作用。&lt;/p>
&lt;h2 id="命令行工具">命令行工具&lt;/h2>
&lt;h3 id="faillock">faillock&lt;/h3>
&lt;p>&lt;strong>faillock [OPTIONS]&lt;/strong>
管理登录失败锁定记录的工具&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>root@LNDL-PSC-SCORE-PM-OS04-EBRS-HA02 pam.d&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># faillock&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>developer:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>When Type Source Valid
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2021-10-21 21:42:50 RHOST 172.16.10.11 V
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>When Type Source Valid
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2021-10-21 21:42:41 RHOST 172.16.10.11 V
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>OPTIONS&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&amp;ndash;user &lt;!-- raw HTML omitted -->&lt;/strong> # 指定要处理的用户名称&lt;/li>
&lt;li>&lt;strong>&amp;ndash;reset&lt;/strong> # 清除失败记录，解除锁定&lt;/li>
&lt;/ul>
&lt;h1 id="pam_nologin">pam_nologin&lt;/h1>
&lt;p>这个模块可以限制一般用户是否能够登入主机之用。当 /etc/nologin 这个文件存在时，则所有一般使用者均无法再登入系统了！若 /etc/nologin 存在，则一般使用者在登入时， 在他们的终端机上会将该文件的内容显示出来！所以，正常的情况下，这个文件应该是不能存在系统中的。 但这个模块对 root 以及已经登入系统中的一般账号并没有影响。&lt;/p>
&lt;h1 id="pam_pwhistory--记住最后的密码">pam_pwhistory # 记住最后的密码&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://man7.org/linux/man-pages/man8/pam_pwhistory.8.html">Manual(手册),pam_pwhistory(8)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>该模块用于记住用户设置过的密码，以防止用户在修改密码时频繁交替得使用相同的密码&lt;/p>
&lt;h2 id="关联文件-1">关联文件&lt;/h2>
&lt;p>&lt;strong>/etc/security/opasswd&lt;/strong> # 用户设置过的历史密码将会以加密方式保存在该文件中。&lt;/p>
&lt;h2 id="模块参数-1">模块参数&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>remember=INT&lt;/strong> # 用户设置过的 remember 个密码将会保存在 /etc/security/opasswd 文件中。&lt;code>默认值：10&lt;/code>。值为 0 时，模块将会保持 opasswd 文件的现有内容不变&lt;/li>
&lt;/ul>
&lt;h1 id="pam_pwquality--密码质量检查">pam_pwquality # 密码质量检查&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/libpwquality/libpwquality/">GitHub 项目，libpwquality/libpwquality&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://man.cx/pam_pwquality">Manual(手册)，pam_pwquality(8)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>pam_pwquality 模块属于 libpwquality 库，最初基于 pam_cracklib 模块，用以执行密码质量检查。仅提供 password 模块类型。&lt;/p>
&lt;blockquote>
&lt;p>注意：在红帽企业 Linux 7 中，pam_pwquality PAM 模块取代 pam_cracklib，该模块在红帽企业 Linux 6 中用作密码质量检查的默认模块。它使用与 pam_cracklib 相同的后端。详见&lt;a href="https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/7/html/security_guide/chap-hardening_your_system_with_tools_and_services">红帽官网&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>该模块的作用是提示用户输入密码，并根据系统字典和一组识别不良选择的规则检查其强度。第一个操作是提示输入一个密码，检查其强度，然后，如果认为强度高，则第二次提示输入密码（以验证第一次输入的密码是否正确）。一切顺利，密码将传递给后续模块以作为新的身份验证令牌安装。&lt;/p>
&lt;p>模块可以提供如下几种类型的检查&lt;/p>
&lt;ul>
&lt;li>**Palindrome(回文) **#&lt;/li>
&lt;li>&lt;strong>Case Change Only(仅大小写更改)&lt;/strong> # 新密码是否与旧密码相同，只是大小写不同？&lt;/li>
&lt;li>&lt;strong>Similar(相似)&lt;/strong> # 新密码是不是太像旧密码了？这主要由一个参数 difok 控制，它是旧密码和新密码之间足以接受新密码的一系列字符更改（插入、删除或替换）。&lt;/li>
&lt;li>&lt;strong>Rotated(旋转的)&lt;/strong> # Is the new password a rotated version of the old password?新密码是旧密码的轮换版本吗？&lt;/li>
&lt;li>&lt;strong>Same consecutive characters(相同的连续字符)&lt;/strong> # Optional check for same consecutive characters.可选检查相同的连续字符。&lt;/li>
&lt;li>&lt;strong>Too long monotonic character sequence(太长的单调字符序列)&lt;/strong> # 可选检查太长的单调字符序列。&lt;/li>
&lt;li>&lt;strong>Contains user name(包含用户名)&lt;/strong> # 检查密码是否包含某种形式的用户名。&lt;/li>
&lt;li>&lt;strong>Dictionary check(字典检查)&lt;/strong> # 调用 Cracklib 例程来检查密码是否是字典的一部分。&lt;/li>
&lt;/ul>
&lt;p>上述这些检查可以通过使用模块参数或通过修改 &lt;code>/etc/security/pwquality.conf&lt;/code> 配置文件来配置。模块参数 j 覆盖配置文件中的设置。&lt;/p>
&lt;h2 id="关联文件-2">关联文件&lt;/h2>
&lt;p>&lt;strong>/etc/security/pwquality.conf&lt;/strong> # 模块运行时配置文件
&lt;strong>/usr/lib64/security/pam_pwquality.so&lt;/strong> # 模块文件&lt;/p>
&lt;h2 id="模块参数-2">模块参数&lt;/h2>
&lt;p>通用参数&lt;/p>
&lt;ul>
&lt;li>&lt;strong>retry=&lt;!-- raw HTML omitted -->&lt;/strong> # 重试次数。&lt;code>默认值：1&lt;/code>。允许用户输入密码错误的最大次数、对于输入新密码时的情况，则是允许用户输入不符合要求的新密码的最大次数。&lt;/li>
&lt;/ul>
&lt;p>设置新密码时执行检查的参数，某些参数的值为 -1 时，表示新密码至少需要有 1 位数字、大写字母、特殊字符 等等。值为 0 表示禁用检查。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>minlen=&lt;!-- raw HTML omitted -->&lt;/strong> # 新密码的最小字符数。&lt;code>默认值：8&lt;/code>&lt;/li>
&lt;li>&lt;strong>dcredit=&lt;!-- raw HTML omitted -->&lt;/strong> # 新密码中包含的 **digit(数字) **的字符数。&lt;/li>
&lt;li>&lt;strong>ucredit=&lt;!-- raw HTML omitted -->&lt;/strong> # 新密码中包含的 **uppercase(大写字母) **的字符数。&lt;/li>
&lt;li>&lt;strong>lcredit=&lt;!-- raw HTML omitted -->&lt;/strong> # 新密码中包含的 &lt;strong>lowercase(小写字母)&lt;/strong> 的字符数。&lt;/li>
&lt;li>&lt;strong>ocredit=&lt;!-- raw HTML omitted -->&lt;/strong> # 新密码中包含的 &lt;strong>other(其他字符)&lt;/strong> 的字符数。其他字符就是特殊字符&lt;/li>
&lt;li>&lt;strong>minclass=&lt;!-- raw HTML omitted -->&lt;/strong> # 新密码中包含的字符类型的数量。&lt;code>默认值：0&lt;/code> 共有 4 中字符类型可用：
&lt;ul>
&lt;li>digits(数字)&lt;/li>
&lt;li>uppercase(大写字母)&lt;/li>
&lt;li>lettercase(小写字母)&lt;/li>
&lt;li>other(其他字符)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="应用示例-1">应用示例&lt;/h2>
&lt;p>输入错误最多 3 次，至少 14 个字符，其中 大写字母、小写字母、数字、特殊符号 这四类字符每类至少有一个。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>pam_pwquality.so try_first_pass retry&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span> minlen&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">14&lt;/span> dcredit&lt;span style="color:#f92672">=&lt;/span>-1 ucredit&lt;span style="color:#f92672">=&lt;/span>-1 ocredit&lt;span style="color:#f92672">=&lt;/span>-1 lcredit&lt;span style="color:#f92672">=&lt;/span>-1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="pwqualityconf-文件示例">pwquality.conf 文件示例&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>minlen &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">14&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lcredit &lt;span style="color:#f92672">=&lt;/span> -1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ucredit &lt;span style="color:#f92672">=&lt;/span> -1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dcredit &lt;span style="color:#f92672">=&lt;/span> -1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ocredit &lt;span style="color:#f92672">=&lt;/span> -1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="pam_succeed_if--测试账户特性">pam_succeed_if # 测试账户特性&lt;/h1>
&lt;p>pam_succeed_if 模块旨在根据 **账户的特征 **或 其他&lt;/p>
&lt;p>说白了，从编程角度看，这就是一个典型的 if&amp;hellip;else&amp;hellip; 控制结构，在一组规则栈中，通过使用该模块，对一些条件进行判断。&lt;/p>
&lt;p>比如&lt;/p>
&lt;ul>
&lt;li>&lt;code>pam_succeed_if.so uid &amp;gt;= 1000&lt;/code> 表示调用该模块的程序所使用的账号的 uid 要是大于等于 1000，则模块返回成功&lt;/li>
&lt;li>&lt;code>pam_succeed_if.so service in crond&lt;/code> 表示调用该模块的程序是 crond 的话，则模块返回成功。&lt;/li>
&lt;/ul>
&lt;p>该模块的常见用途就是根据该模块的条件测试结果，决定是否加载其他模块。&lt;/p>
&lt;h2 id="模块参数-3">模块参数&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>quiet_success&lt;/strong> # 若模块返回成功，则不要将验证事件记录到系统日志中。&lt;/li>
&lt;li>&lt;strong>use_uid&lt;/strong> # 使用运行应用程序的 UID 的用户的帐户而不是正在验证的用户来评估条件。&lt;/li>
&lt;li>&lt;strong>Conditions(条件)&lt;/strong> # 条件参数由 3 部分组成：&lt;code>Field Test Value&lt;/code>。
&lt;ul>
&lt;li>可用的 Field 有：user、uid、gid、shell、home、ruser、rhost、tty、service&lt;/li>
&lt;li>可用的 Test 有：&lt;code>&amp;lt;&lt;/code> &lt;code>&amp;lt;=&lt;/code> &lt;code>eq&lt;/code> &lt;code>&amp;gt;=&lt;/code> &lt;code>&amp;gt;&lt;/code> &lt;code>ne&lt;/code> &lt;code>=&lt;/code> &lt;code>!=&lt;/code> &lt;code>=~&lt;/code> &lt;code>!~&lt;/code> &lt;code>in&lt;/code> &lt;code>not in&lt;/code>&lt;/li>
&lt;li>比如：
&lt;ul>
&lt;li>&lt;strong>uid &amp;gt;= 1000&lt;/strong> # 表示运行程序所使用的账号的 uid 要是大于 1000，则模块返回成功&lt;/li>
&lt;li>更多语法说明，详见 Manual。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="应用示例-2">应用示例&lt;/h2>
&lt;p>该模块非常容易造成 PAM 认证时的结果与想要的结果产生偏差，比如在 CentOS7 下，/etc/pam.d/password-auth-ac 的配置如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>auth required pam_env.so
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>auth required pam_faildelay.so delay&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">2000000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>auth sufficient pam_unix.so nullok try_first_pass
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>auth requisite pam_succeed_if.so uid &amp;gt;&lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1000&lt;/span> quiet_success
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>auth required pam_deny.so
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>此时，我们想要使用 pam_faillock 模块配置一下账户认证失败后锁定的功能，如果将配置修改为如下样子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>auth required pam_env.so
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>auth required pam_faillock.so preauth audit deny&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span> even_deny_root unlock_time&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">60&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>auth required pam_faildelay.so delay&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">2000000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>auth sufficient pam_unix.so nullok try_first_pass
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>auth requisite pam_succeed_if.so uid &amp;gt;&lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1000&lt;/span> quiet_success
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>auth &lt;span style="color:#f92672">[&lt;/span>default&lt;span style="color:#f92672">=&lt;/span>die&lt;span style="color:#f92672">]&lt;/span> pam_faillock.so authfail audit deny&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span> even_deny_root unlock_time&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">60&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>auth required pam_deny.so
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>此时，所有 uid 小于 1000 的，包括 root 账户，都是无法享受到第 6 行规则的效果的，因为当执行到第 5 行时，发现此次认证行为的账户是 root(uid=0) 则直接返回失败，不在执行第 6 行的规则了~~&lt;/p>
&lt;h1 id="pam_unix--传统密码认证">pam_unix # 传统密码认证&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://man7.org/linux/man-pages/man8/pam_unix.8.html">Manual(手册),pam_unix(8)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>注意：推荐使用 pam_pwquality 模块与 pam_unix 模块配合使用&lt;/p>
&lt;p>若是不满足密码强度要求，将会出现类似如下的提示：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>root@common-centos-test pam.d&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># passwd developer&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Changing password &lt;span style="color:#66d9ef">for&lt;/span> user developer.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>New password:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>BAD PASSWORD: The password contains less than &lt;span style="color:#ae81ff">1&lt;/span> uppercase letters
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Retype new password:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>BAD PASSWORD: The password fails the dictionary check - it is too simplistic/systematic
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意：root 用户修改任何用户的密码不受此模块限制，只有普通用户修改自己的密码时才有效。&lt;/p>
&lt;h2 id="模块参数-4">模块参数&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>nullok&lt;/strong> # 此模块的默认操作是，如果用户的官方密码为空，则不允许用户访问服务。nullok 参数覆盖此默认值。&lt;/li>
&lt;li>&lt;strong>try_first_pass&lt;/strong> # 这个选项指示本模块首先尝试使用已有的密码，即从第一个向用户提示输入密码的模块那里取得密码，并对该密码进行认证。如果密码认证失败，则再提示用户输入密码。&lt;/li>
&lt;li>&lt;strong>use_authtok&lt;/strong> # “use_authtok”参数确保 pam_unix 模块不会提示输入密码，而是使用 pam_pwquality 提供的密码。&lt;/li>
&lt;li>&lt;strong>密码要求参数&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>minlen=INT&lt;/strong> # 密码长度最少 minlen 位&lt;/li>
&lt;li>&lt;strong>difok=INT&lt;/strong> # 新旧密码最少 difok 个字符不同&lt;/li>
&lt;li>&lt;strong>icredit=-1&lt;/strong> # 最少 1 个数字.&lt;/li>
&lt;li>&lt;strong>lcredit=-1&lt;/strong> # 最少 1 个小写字符&lt;/li>
&lt;li>&lt;strong>ucredit=-1&lt;/strong> # 最少 1 个大写字符&lt;/li>
&lt;li>&lt;strong>ocredit=-1&lt;/strong> # 最少 1 个特殊字符&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="heading">&lt;/h1></description></item><item><title>Docs: PAM配置文件</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E7%99%BB%E5%BD%95-linux-%E4%B8%8E-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/pam%E5%8F%AF%E6%8F%92%E5%85%A5%E5%BC%8F%E8%AE%A4%E8%AF%81%E6%A8%A1%E5%9D%97/pam%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E7%99%BB%E5%BD%95-linux-%E4%B8%8E-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/pam%E5%8F%AF%E6%8F%92%E5%85%A5%E5%BC%8F%E8%AE%A4%E8%AF%81%E6%A8%A1%E5%9D%97/pam%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://man7.org/linux/man-pages/man5/pam.conf.5.html">Manual(手册),pam.conf(5)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>这是一个最基本的配置文件示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#%PAM-1.0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>auth required pam_deny.so
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>account required pam_deny.so
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>password required pam_deny.so
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>session required pam_deny.so
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="syntax语法">Syntax(语法)&lt;/h1>
&lt;p>PAM 配置文件由 &lt;strong>Rules(规则)&lt;/strong> 列表组成，每条规则一行。规则是由空格分割的多个 &lt;strong>Tokens&lt;/strong> 组成&lt;/p>
&lt;blockquote>
&lt;p>不知道官方为什么把每个字段要称为 Token~~~o(╯□╰)o&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>Service Type Control Module-Path Module-Arguments&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Service&lt;/strong> # 需要调用 PAM 的应用程序的名称。比如 su、login、sshd 等等
&lt;ul>
&lt;li>注意：/etc/pam.conf 和 /etc/pam.d/* 配置文件有一点差别，在于 Service 字段。/etc/pam.d/ 目录下的所有配置文件，没有 Service 字段，取而代之的是文件名称，也就是说，Service 字段的值，就是 /etc/pam.d/ 目录下的文件名。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>**Type **# 管理类型，这个类型就是 《&lt;a href="docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E7%99%BB%E5%BD%95%20Linux%20%E4%B8%8E%20%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/PAM(%E5%8F%AF%E6%8F%92%E5%85%A5%E5%BC%8F%E8%AE%A4%E8%AF%81%E6%A8%A1%E5%9D%97)/_index.md#Linux-PAM%20%E7%AE%A1%E7%90%86%E7%BB%84(%E8%AE%A4%E8%AF%81%E5%8A%9F%E8%83%BD%E7%9A%84%E5%88%86%E7%BB%84)">PAM(可插入式认证模块)&lt;/a>》 的简写。即.本条规则中使用的模块要与哪个管理组关联。
&lt;ul>
&lt;li>可用的类型有 auth、account、password、session&lt;/li>
&lt;li>若在类型前面加上 &lt;code>-&lt;/code>，则表示即使模块不存在，也不会影响认证结果，也不会将事件记录到日志中。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>**Control **# 规则执行完成后的行为。即调用 PAM API 完成后，会有返回值，根据返回值，决定如何进行后续认证。&lt;/li>
&lt;li>&lt;strong>Module-Path&lt;/strong> # 规则调用的 PAM 模块名称，模块默认在 &lt;strong>/usr/lib64/security/&lt;/strong> 目录(CentOS 系统)下。
&lt;ul>
&lt;li>不同系统中，模块所在的默认路径可能不一样。&lt;/li>
&lt;li>若调用的 PAM 模块不在默认目录下，则该字段需要使用&lt;strong>模块的绝对路径&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Module-Arguments&lt;/strong> # 规则调用的 PAM 模块的参数。每个参数以空格分隔。&lt;/li>
&lt;/ul>
&lt;h2 id="service">Service&lt;/h2>
&lt;p>Service 除了以应用程序命名，还可以使用自定义的名称，这些名称通常通过 include 这种 Control 行为引用该 Service。&lt;/p>
&lt;h2 id="type">Type&lt;/h2>
&lt;p>指定规则所属的管理组。用于定义规则调用的模块需要与哪个管理类型关联。&lt;/p>
&lt;blockquote>
&lt;p>也就是指定这条规则指定的模块应该使用的模块类型。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>**account **# 对应账户管理。验证用户是否有权限访问。
&lt;ul>
&lt;li>比如验证用户的密码是否过期、验证用户是否有权访问所请求的服务&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>**auth **# 对应身份验证管理。验证用户身份，就是证明 root 是 root
&lt;ul>
&lt;li>比如让应用程序提示用户输入密码来确定该用户就是其所声称的身份。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>**password **# 对应密码管理，用于更改用户密码以及强制使用强密码配置
&lt;ul>
&lt;li>比如修改密码时，必须满足强度要求。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>**session **# 对应会话管理，用户管理和配置用户会话。会话在用户成功认证后启动生效&lt;/li>
&lt;/ul>
&lt;p>account 与 auth 的配合可以实现这么一个场景：&lt;/p>
&lt;ul>
&lt;li>比如现在有这么一个场景，张三要去商场买酱油。当张三到达商场后，保安人员首先要对张三进行认证，确认张三这个人可以进入商场；然后张三到达货柜拿走酱油去结账，收银人员进行授权检查，核验张三是否有权力购买酱油。&lt;/li>
&lt;/ul>
&lt;h2 id="control">Control&lt;/h2>
&lt;p>Control 会根据当前规则的执行结果，执行后续操作，也就是控制。比如当一条规则失败时，是否继续执行后面的规则；当一条规则成功时，是否执行后面的规则；等等。&lt;/p>
&lt;p>Control 有两种语法，简单与复杂。简单语法通过单一的指令，来定义规则执行后的行为；复杂指令通过 1 个或多个键值对来定义规则执行后的行为。&lt;/p>
&lt;h4 id="简单语法">简单语法&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>requisite&lt;/strong> # 验证失败时，立即结束整个验证过程，返回 failure。
&lt;ul>
&lt;li>就好比让你答题 100 道，如果在答题的过程中有一道做错了直接让你出去，不会进行下面的答题过程。拥有一票否决，此关不过，立即返回 failure。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>required&lt;/strong> # 验证失败时，最后会返回 failure，但仍需执行同一个规则栈中的其他规则。拥有参考其他模块意见基础之上的一票否决权。可以通过其它模块来检查为什么验证没有通过。&lt;/li>
&lt;li>&lt;strong>sufficient&lt;/strong> # 验证成功且之前的 required 模块没有失败时，立即结束整个验证过程，返回 true。验证失败时，忽略失败结果并继续执行栈中的后续规则。
&lt;ul>
&lt;li>换句话说，sufficient 的验证失败对整个验证没有任何影响。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>optional&lt;/strong> # 可选条件，无论验证结果如何，均不会影响。通常用于 session 类型。
&lt;ul>
&lt;li>该模块返回的通过/失败结果被忽略。当没有其他模块被引用时，标记为 optional 模块并且成功验证时该模块才是必须的。该模块被调用来执行一些操作，并不影响模块堆栈的结果。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>include&lt;/strong> # 包含另外一个配置文件中&lt;strong>相同类型&lt;/strong>的行。比如 &lt;code>password include system-auth-ac&lt;/code> 则会从 system-auth-ac 文件中，将 Type 字段为 password 的行填充到本文件中。
&lt;ul>
&lt;li>为当前规则中指定的 Type 引用 Module-Path 中定义的规则&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>**substack **# 子栈。这与 include 的不同之处在于，对子规则栈中的 done 和 die 操作的评估不会导致跳过完整模块堆栈的其余部分&lt;/li>
&lt;/ul>
&lt;h4 id="复杂语法">复杂语法&lt;/h4>
&lt;p>&lt;strong>[Value1=Acton1 Value2=Action2 &amp;hellip; ValueN=ActionN]&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Value # 该规则调用的模块执行完成后的返回码。
&lt;ul>
&lt;li>可用的返回码有：&lt;strong>success&lt;/strong>; &lt;strong>open_err&lt;/strong>; &lt;strong>symbol_err&lt;/strong>; &lt;strong>service_err&lt;/strong>; &lt;strong>system_err&lt;/strong>; &lt;strong>buf_err&lt;/strong>; &lt;strong>perm_denied&lt;/strong>; &lt;strong>auth_err&lt;/strong>; &lt;strong>cred_insufficient&lt;/strong>; &lt;strong>authinfo_unavail&lt;/strong>; &lt;strong>user_unknown&lt;/strong>; &lt;strong>maxtries&lt;/strong>; &lt;strong>new_authtok_reqd&lt;/strong>; &lt;strong>acct_expired&lt;/strong>; &lt;strong>session_err&lt;/strong>; &lt;strong>cred_unavail&lt;/strong>; &lt;strong>cred_expired&lt;/strong>; &lt;strong>cred_err&lt;/strong>; &lt;strong>no_module_data&lt;/strong>; &lt;strong>conv_err&lt;/strong>; &lt;strong>authtok_err&lt;/strong>; &lt;strong>authtok_recover_err&lt;/strong>; &lt;strong>authtok_lock_busy&lt;/strong>; &lt;strong>authtok_disable_aging&lt;/strong>; &lt;strong>try_again&lt;/strong>; &lt;strong>ignore&lt;/strong>; &lt;strong>abort&lt;/strong>; &lt;strong>authtok_expired&lt;/strong>; &lt;strong>module_unknown&lt;/strong>; &lt;strong>bad_item&lt;/strong>; and &lt;strong>default&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Action # 表示当发现该返回码时，要执行的行为。
&lt;ul>
&lt;li>可用的行为有：&lt;strong>ignore、bad、die、ok、done、reset、N&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="简单语法与复杂语法的对应关系">简单语法与复杂语法的对应关系&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>简单语法&lt;/th>
&lt;th>复杂语法&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>required&lt;/td>
&lt;td>[success=ok new_authtok_reqd=ok ignore=ignore default=bad]&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>requisite&lt;/td>
&lt;td>[success=ok new_authtok_reqd=ok ignore=ignore default=die]&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>sufficient&lt;/td>
&lt;td>[success=done new_authtok_reqd=done default=ignore]&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>optional&lt;/td>
&lt;td>[success=ok new_authtok_reqd=ok default=ignore]&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="module-path">Module-Path&lt;/h2>
&lt;p>在 CentOS 中，模块文件默认在 /usr/lib64/security/ 目录中，以 .so 结尾&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># ls /usr/lib64/security/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pam_access.so pam_cracklib.so pam_env.so pam_filter pam_issue.so pam_listfile.so pam_mkhomedir.so pam_permit.so pam_rhosts.so pam_selinux.so pam_succeed_if.so pam_timestamp.so pam_unix_auth.so pam_userdb.so
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pam_cap.so pam_debug.so pam_exec.so pam_filter.so pam_keyinit.so pam_localuser.so pam_motd.so pam_postgresok.so pam_rootok.so pam_sepermit.so pam_systemd.so pam_tty_audit.so pam_unix_passwd.so pam_warn.so
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pam_chroot.so pam_deny.so pam_faildelay.so pam_ftp.so pam_lastlog.so pam_loginuid.so pam_namespace.so pam_pwhistory.so pam_securetty.so pam_shells.so pam_tally2.so pam_umask.so pam_unix_session.so pam_wheel.so
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pam_console.so pam_echo.so pam_faillock.so pam_group.so pam_limits.so pam_mail.so pam_nologin.so pam_pwquality.so pam_selinux_permit.so pam_stress.so pam_time.so pam_unix_acct.so pam_unix.so pam_xauth.so
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 Ubuntu 中，模块文件默认在 /usr/lib/x86_64-linux-gnu/security/ 目录中，以 .so 结尾&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>$ ls /usr/lib/x86_64-linux-gnu/security/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pam_access.so pam_echo.so pam_faildelay.so pam_ftp.so pam_issue.so pam_listfile.so pam_mkhomedir.so pam_permit.so pam_securetty.so pam_stress.so pam_tally.so pam_umask.so pam_wheel.so
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pam_cap.so pam_env.so pam_faillock.so pam_gdm.so pam_keyinit.so pam_localuser.so pam_motd.so pam_pwhistory.so pam_selinux.so pam_succeed_if.so pam_time.so pam_unix.so pam_xauth.so
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pam_debug.so pam_exec.so pam_filter.so pam_gnome_keyring.so pam_lastlog.so pam_loginuid.so pam_namespace.so pam_rhosts.so pam_sepermit.so pam_systemd.so pam_timestamp.so pam_userdb.so
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pam_deny.so pam_extrausers.so pam_fprintd.so pam_group.so pam_limits.so pam_mail.so pam_nologin.so pam_rootok.so pam_shells.so pam_tally2.so pam_tty_audit.so pam_warn.so
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="module-arguments">Module-Arguments&lt;/h2>
&lt;p>详见 《[PAM 模块详解](✏IT 学习笔记/📄1.操作系统/5.登录%20Linux%20 与%20 访问控制/PAM(可插入式认证模块)/PAM%20 模块详解.md 模块详解.md)》&lt;/p>
&lt;h1 id="etcpamdpassword-auth-与-etcpamdsystem-auth">/etc/pam.d/password-auth 与 /etc/pam.d/system-auth&lt;/h1>
&lt;ul>
&lt;li>CentOS 发行版中，这个两个文件分别是 password-auth-ac 和 system-auth-ac 的软链接。两个 *-ac 文件，则是由 &lt;code>authconfig&lt;/code> 程序生成的&lt;/li>
&lt;li>Ubuntu 发行版中，这个两个文件分别是 common-password 和 common-auth。这两个文件，则是由 &lt;code>pam-auth-update&lt;/code> 程序生成的。&lt;/li>
&lt;/ul>
&lt;p>通常情况下，如果想要添加更多的认证配置，推荐使用一个新的文件，并使用 include 指令包含这俩文件即可。&lt;/p>
&lt;h2 id="centos-发行版配置">CentOS 发行版配置&lt;/h2>
&lt;p>auth required pam_env.so
auth required pam_faildelay.so delay=2000000
auth sufficient pam_unix.so nullok try_first_pass
auth requisite pam_succeed_if.so uid &amp;gt;= 1000 quiet_success
auth required pam_deny.so&lt;/p>
&lt;p>account required pam_unix.so
account sufficient pam_localuser.so
如果用户 ID 小于 1000，直接退出，不再进行验证
account sufficient pam_succeed_if.so uid &amp;lt; 1000 quiet
account required pam_permit.so&lt;/p>
&lt;p>password requisite pam_pwquality.so try_first_pass local_users_only retry=3 authtok_type=
password sufficient pam_unix.so sha512 shadow nullok try_first_pass use_authtok&lt;/p>
&lt;p>password required pam_deny.so&lt;/p>
&lt;p>session optional pam_keyinit.so revoke
session required pam_limits.so
-session optional pam_systemd.so
session [success=1 default=ignore] pam_succeed_if.so service in crond quiet use_uid
session required pam_unix.so&lt;/p>
&lt;h1 id="etcpamdsshd">/etc/pam.d/sshd&lt;/h1>
&lt;p>这是用于安全的 Shell 服务的 PAM 配置，比如 OpenSSH&lt;/p>
&lt;h1 id="include-common-auth">Standard Un*x authentication.
@include common-auth&lt;/h1>
&lt;h1 id="account-required-pam_nologinso">Disallow non-root logins when /etc/nologin exists.
account required pam_nologin.so&lt;/h1>
&lt;h1 id="-account-required-pam_accessso">Uncomment and edit /etc/security/access.conf if you need to set complex
# access limits that are hard to express in sshd_config.
# account required pam_access.so&lt;/h1>
&lt;h1 id="include-common-account">Standard Un*x authorization.
@include common-account&lt;/h1>
&lt;h1 id="session-successok-ignoreignore-module_unknownignore-defaultbad-pam_selinuxso-close">SELinux needs to be the first session rule. This ensures that any
# lingering context has been cleared. Without this it is possible that a
# module could execute code in the wrong domain.
session [success=ok ignore=ignore module_unknown=ignore default=bad] pam_selinux.so close&lt;/h1>
&lt;h1 id="session-required-pam_loginuidso">Set the loginuid process attribute.
session required pam_loginuid.so&lt;/h1>
&lt;h1 id="session-optional-pam_keyinitso-force-revoke">Create a new session keyring.
session optional pam_keyinit.so force revoke&lt;/h1>
&lt;h1 id="include-common-session">Standard Un*x session setup and teardown.
@include common-session&lt;/h1>
&lt;p>登录成功后打印当天消息。这包括来自 /run/motd.dynamic 的动态生成部分和来自 /etc/motd 的静态部分。
注释这两行，将会禁用登录后的消息提示功能
session optional pam_motd.so motd=/run/motd.dynamic
session optional pam_motd.so noupdate&lt;/p>
&lt;h1 id="session-optional-pam_mailso-standard-noenv--1">Print the status of the user&amp;rsquo;s mailbox upon successful login.
session optional pam_mail.so standard noenv # [1]&lt;/h1>
&lt;h1 id="session-required-pam_limitsso">Set up user limits from /etc/security/limits.conf.
session required pam_limits.so&lt;/h1>
&lt;h1 id="session-required-pam_envso-user_readenv1-envfileetcdefaultlocale">Read environment variables from /etc/environment and
# /etc/security/pam_env.conf.
session required pam_env.so # [1]
# In Debian 4.0 (etch), locale-related environment variables were moved to
# /etc/default/locale, so read that as well.
session required pam_env.so user_readenv=1 envfile=/etc/default/locale&lt;/h1>
&lt;h1 id="session-successok-ignoreignore-module_unknownignore-defaultbad-pam_selinuxso-open">SELinux needs to intervene at login time to ensure that the process starts
# in the proper default security context. Only sessions which are intended
# to run in the user&amp;rsquo;s context should be run after this.
session [success=ok ignore=ignore module_unknown=ignore default=bad] pam_selinux.so open&lt;/h1>
&lt;h1 id="include-common-password">Standard Un*x password updating.
@include common-password&lt;/h1>
&lt;h1 id="etcpamdsu">/etc/pam.d/su&lt;/h1>
&lt;p>&lt;strong>auth sufficient pam_rootok.so&lt;/strong>
当开始使用 pam_wheel.so 模块时，只有属于 wheel 组的用户，才可以使用 su 命令切换到 root 用户
&lt;strong>auth sufficient pam_wheel.so trust use_uid&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>当用户在 wheel 组时，使用 su - root 命令不需要密码即可切换到 root 用户&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>auth required pam_wheel.so use_uid&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>当用户在 wheel 组时，使用 su - root 命令需要密码即可切换到 root 用户&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>auth substack system-auth&lt;/strong>
&lt;strong>auth include postlogin&lt;/strong>
&lt;strong>account sufficient pam_succeed_if.so uid = 0 use_uid quiet&lt;/strong>
&lt;strong>account include system-auth&lt;/strong>
&lt;strong>password include system-auth&lt;/strong>
&lt;strong>session include system-auth&lt;/strong>
&lt;strong>session include postlogin&lt;/strong>
&lt;strong>session optional pam_xauth.so&lt;/strong>&lt;/p>
&lt;h1 id="配置示例">配置示例&lt;/h1>
&lt;p>&lt;strong>/etc/pam.d/sshd 配置文件示例&lt;/strong>
注意 sshd、login、remote、kde 这几个文件中的配置大部分都相同，&lt;/p>
&lt;pre>&lt;code># %PAM-1.0
# 最多连续三认认证登录都出错时，60秒后解锁，root用户也可以被锁定，root用户15秒后解锁。
auth required pam_tally2.so deny=3 unlock_time=60 even_deny_root root_unlock_time=15
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>/etc/pam.d/common-password 文件配置示例&lt;/strong>&lt;/p>
&lt;pre>&lt;code># 限制用户不能更改为之前使用的历史密码
password required pam_pwhistory.so use_authtok remember=6 retry=3
&lt;/code>&lt;/pre>
&lt;p>问题实例：限制用户不能更改为之前使用的历史密码&lt;/p>
&lt;ul>
&lt;li>Linux 历史密码在 /etc/security/opasswd 中存放&lt;/li>
&lt;li>解决方法
&lt;ul>
&lt;li>临时更改 commen-password 文件修改密码修改策略，去除历史密码的限制，更改完密码后在恢复原来的策略&lt;/li>
&lt;li>删掉 /etc/security/opasswd 中关于被修改文件的内容，这样就检测不到之前的历史密码了&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: 已弃用模块</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E7%99%BB%E5%BD%95-linux-%E4%B8%8E-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/pam%E5%8F%AF%E6%8F%92%E5%85%A5%E5%BC%8F%E8%AE%A4%E8%AF%81%E6%A8%A1%E5%9D%97/%E5%B7%B2%E5%BC%83%E7%94%A8%E6%A8%A1%E5%9D%97/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E7%99%BB%E5%BD%95-linux-%E4%B8%8E-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/pam%E5%8F%AF%E6%8F%92%E5%85%A5%E5%BC%8F%E8%AE%A4%E8%AF%81%E6%A8%A1%E5%9D%97/%E5%B7%B2%E5%BC%83%E7%94%A8%E6%A8%A1%E5%9D%97/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;h1 id="pam_tally2so-模块">pam_tally2.so 模块&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://man7.org/linux/man-pages/man8/pam_tally2.8.html">Manual(手册),pam_tally2(8)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>弃用说明：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/linux-pam/linux-pam/releases/tag/v1.4.0">GitHub,linux-pam 项目 1.4.0 版本中对 pam_tall2 模块的弃用说明&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://access.redhat.com/solutions/62949">https://access.redhat.com/solutions/62949&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/dev-sec/ansible-collection-hardening/issues/377">https://github.com/dev-sec/ansible-collection-hardening/issues/377&lt;/a>&lt;/li>
&lt;li>由 pam_faillock 模块代替&lt;/li>
&lt;/ul>
&lt;p>登录 Tallying(计数器) 模块&lt;/p>
&lt;p>应用场景：设置 Linux 用户连续 N 次输入错误密码进行登陆时，自动锁定 X 分钟或永久锁定（这里的永久锁定指除非进行手工解锁，否则会一直锁定）。&lt;/p>
&lt;h2 id="配置">配置&lt;/h2>
&lt;p>&lt;strong>/var/log/faillog&lt;/strong> #&lt;/p>
&lt;h2 id="模块参数">模块参数&lt;/h2>
&lt;ul>
&lt;li>**deny=INT **# 指定认证失败 deny 次后，将执行后面参数的策略。如锁定 N 秒，如果后面没有其他策略指定时，默认永远锁定，除非手动解锁。&lt;/li>
&lt;li>**lock_time=INT **# 认证失败时锁定 lock_time 秒&lt;/li>
&lt;li>**unlock_time=INT **# 锁定 unlock_time 秒后，自动解锁用户；&lt;/li>
&lt;li>&lt;strong>even_deny_root&lt;/strong> # root 用户在认证出错时，一样被锁定(该功能慎用)&lt;/li>
&lt;li>**root_unlock_time **# root 用户锁定后，多久会解锁。该选项一般是配合 even_deny_root 一起使用的。&lt;/li>
&lt;li>&lt;strong>magic_root&lt;/strong> # 如果用户 uid ＝ 0（即 root 账户或相当于 root 的帐户）在帐户认证时调用该模块发现失败时，不计入统计；&lt;/li>
&lt;li>**no_lock_time **# 不使用.fail_locktime 项在/var/log/faillog 中记录用户 －－－按英文直译不太明白，个人理解即不进行用户锁定；&lt;/li>
&lt;/ul>
&lt;h2 id="模块的命令行工具">模块的命令行工具&lt;/h2>
&lt;h3 id="pam_tally2">pam_tally2&lt;/h3>
&lt;p>pam_tally2 模块的控制工具，用于查询和操作计数器文件(/var/log/faillog)。e.g.查看用户登录失败的次数、清除用户登录失败的次数等等操作&lt;/p>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>pam_tally2 &amp;ndash;user ftp # 查询 ftp 用户被锁定情况&lt;/li>
&lt;li>pam_tally2 &amp;ndash;user ftp &amp;ndash;reset=0 # 解锁 ftp 用户&lt;/li>
&lt;/ul></description></item></channel></rss>