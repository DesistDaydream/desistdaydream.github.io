<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – PAM 模块详解</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E7%99%BB%E5%BD%95-linux-%E4%B8%8E-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/pam%E5%8F%AF%E6%8F%92%E5%85%A5%E5%BC%8F%E8%AE%A4%E8%AF%81%E6%A8%A1%E5%9D%97/pam-%E6%A8%A1%E5%9D%97%E8%AF%A6%E8%A7%A3/</link><description>Recent content in PAM 模块详解 on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E7%99%BB%E5%BD%95-linux-%E4%B8%8E-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/pam%E5%8F%AF%E6%8F%92%E5%85%A5%E5%BC%8F%E8%AE%A4%E8%AF%81%E6%A8%A1%E5%9D%97/pam-%E6%A8%A1%E5%9D%97%E8%AF%A6%E8%A7%A3/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: pam_limits 模块</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E7%99%BB%E5%BD%95-linux-%E4%B8%8E-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/pam%E5%8F%AF%E6%8F%92%E5%85%A5%E5%BC%8F%E8%AE%A4%E8%AF%81%E6%A8%A1%E5%9D%97/pam-%E6%A8%A1%E5%9D%97%E8%AF%A6%E8%A7%A3/pam_limits-%E6%A8%A1%E5%9D%97/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E7%99%BB%E5%BD%95-linux-%E4%B8%8E-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/pam%E5%8F%AF%E6%8F%92%E5%85%A5%E5%BC%8F%E8%AE%A4%E8%AF%81%E6%A8%A1%E5%9D%97/pam-%E6%A8%A1%E5%9D%97%E8%AF%A6%E8%A7%A3/pam_limits-%E6%A8%A1%E5%9D%97/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://man7.org/linux/man-pages/man8/pam_limits.8.html">Manual(手册),pam_limits(8)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.man7.org/linux/man-pages/man5/limits.conf.5.html">Manula(手册),limits.conf(5)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>应用场景：我的 Linux 主机里面同时登入了十个人，这十个人不知怎么搞的， 同时开启了 100 个文件，每个文件的大小约 10M ，请问一下， 我的 Linux 主机的内存要有多大才够？ 10&lt;em>100&lt;/em>10 = 10000M = 10G &amp;hellip; 老天爷，这样，系统不挂点才有鬼哩！为了要预防这个情况 的发生，所以我们是可以『限制用户的某些系统资源』的，包括可以开启的文件数量， 可以使用的 CPU 时间，可以使用的内存总量等等。除了这个模块有这个限制功能外，bash 还自带 ulimit 命令可以实现这个功能。&lt;/p>
&lt;ul>
&lt;li>限制用户会话过程中对各种系统资源的使用情况，默认情况下该模块的配置文件是/etc/security/limits.conf&lt;/li>
&lt;li>该配置文件中的参数，可以通过 &lt;code>ulimit -a&lt;/code> 命令查看&lt;/li>
&lt;/ul>
&lt;h1 id="关联文件">关联文件&lt;/h1>
&lt;p>/etc/security/* #&lt;/p>
&lt;ul>
&lt;li>/etc/security/limits.conf # 限制用户会话过程中对各种系统资源的使用情况的配置文件&lt;/li>
&lt;/ul>
&lt;h2 id="配置文件语法">配置文件语法&lt;/h2>
&lt;p>&lt;strong>/etc/security/limit.conf 文件语法格式：&lt;/strong>&lt;/p>
&lt;pre>&lt;code>&amp;lt;domain&amp;gt; &amp;lt;type&amp;gt; &amp;lt;item&amp;gt; &amp;lt;value&amp;gt;
XXX XXXX XXXX XXXX
用户名/组名 限制类型 要限制的项目 具体值
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>&lt;strong>domain&lt;/strong> #设置需要被限制的用户名或组名，组名前面加@和用户名区别。也可使用通配符 * 来表示所有用户&lt;/li>
&lt;li>&lt;strong>type&lt;/strong> # 在设定上，通常 soft 会比 hard 小，举例来说，soft 可设定为 80 而 hard 设定为 100，那么你可以使用到 90 (因为没有超过 100)，但介于 80~100 之间时，系统会有警告讯息通知你！
&lt;ul>
&lt;li>hard #严格的设定，指设定的 value 必定不能超过设定的数值&lt;/li>
&lt;li>soft #警告的设定，指设定的 value 可以超过设定值，但是若超过则有警告讯息。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>item&lt;/strong> # 指定要限制的项目
&lt;ul>
&lt;li>core # 限制内核文件的大小&lt;/li>
&lt;li>何谓 core 文件,当一个程序崩溃时，在进程当前工作目录的 core 文件中复制了该进程的存储图像。core 文件仅仅是一个内存映象（同时加上调试信息），主要是用来调试的。core 文件是个二进制文件，需要用相应的工具来分析程序崩溃时的内存映像，系统默认 core 文件的大小为 0，所以没有被创建。可以用 ulimit 命令查看和修改 core 文件的大小，例如：ulimit -c 1000 #指定修改 core 文件的大小，1000 指定了 core 文件大小。也可以对 core 文件的大小不做限制，如： ulimit -c unlimited&lt;/li>
&lt;li>date # 最大数据大小&lt;/li>
&lt;li>fsize # 最大文件大小&lt;/li>
&lt;li>memlock # 最大锁定内存地址空间&lt;/li>
&lt;li>nofile # 打开文件的最大数目，默认为 1024&lt;/li>
&lt;li>对于需要做许多套接字连接并使它们处于打开状态的应用程序而言，最好通过使用 ulimit -n，或者通过设置 nofile 参数，为用户把文件描述符的数量设置得比默认值高一些&lt;/li>
&lt;li>rss # 最大持久设置大小&lt;/li>
&lt;li>stack # 最大栈大小&lt;/li>
&lt;li>cpu # 以分钟为单位的最多 CPU 时间&lt;/li>
&lt;li>nproc # 打开进程的最大数&lt;/li>
&lt;li>as # 地址空间限制&lt;/li>
&lt;li>maxlogins # 此用户允许登录的最大数目&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>value&lt;/strong> # 指定 item 中具体项目的值
&lt;ul>
&lt;li>NUM # 可以是具体的数值&lt;/li>
&lt;li>unlimited # 表示无限制的&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="security-目录下文件的配置示例">security 目录下文件的配置示例&lt;/h2>
&lt;p>/etc/security/limits.conf 配置文件示例&lt;/p>
&lt;p>如图所示，左边的是 limit.conf 的配置，意思是所有用户的可以打开的文件最大数为 1000000，然后通过 bash 内嵌命令 ulimit -a 可以查看到右图的效果
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/xg1n26/1616166776345-13a61424-8c05-47a2-af4a-aac10869dcaa.png" alt="">
注意：在 CentOS 7 &amp;amp; Ubuntu 系统中，使用 Systemd 替代了之前的 SysV。/etc/security/limits.conf 文件的配置作用域缩小了。/etc/security/limits.conf 的配置，只适用于通过 PAM 认证登录用户的资源限制，它对 systemd 的 service 的资源限制不生效。因此登录用户的限制，通过 /etc/security/limits.conf 与 /etc/security/limits.d 下的文件设置即可。对于 systemd service 的资源设置，则需修改全局配置，全局配置文件放在 /etc/systemd/system.conf 和 /etc/systemd/user.conf，&lt;/p>
&lt;p>DefaultLimitNOFILE=100000 # 对应 max openfile&lt;/p>
&lt;p>DefaultLimitNPROC=65535 # 对应 max processes&lt;/p>
&lt;h1 id="命令行工具">命令行工具&lt;/h1>
&lt;h2 id="ulimit">ulimit&lt;/h2>
&lt;p>临时更改或者查看当前登录用户的资源限制情况。&lt;/p>
&lt;p>注意：该命令只可在当前 shell 环境中生效，如果想要让配置永久生效，需要修改/etc/security/limit.conf 文件&lt;/p>
&lt;p>OPTIONS&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-a&lt;/strong> # 显示所有限制 All current limits are reported&lt;/li>
&lt;li>-b # The maximum socket buffer size&lt;/li>
&lt;li>-c # core 文件大小的上限 The maximum size of core files created&lt;/li>
&lt;li>-d # 进程数据段大小的上限 The maximum size of a process&amp;rsquo;s data segment&lt;/li>
&lt;li>-e #The maximum scheduling priority (&amp;ldquo;nice&amp;rdquo;)&lt;/li>
&lt;li>-f #shell 所能创建的文件大小的上限 The maximum size of files written by the shell and its children&lt;/li>
&lt;li>-i #The maximum number of pending signals&lt;/li>
&lt;li>-l #The maximum size that may be locked into memory&lt;/li>
&lt;li>-m #驻留内存大小的上限 The maximum resident set size (many systems do not honor this limit)&lt;/li>
&lt;li>&lt;strong>-n&lt;/strong> # 打开文件数的上限 The maximum number of open file descriptors (most systems do not allow this value to be set)&lt;/li>
&lt;li>-p #管道大小 The pipe size in 512-byte blocks (this may not be set)&lt;/li>
&lt;li>-q #The maximum number of bytes in POSIX message queues&lt;/li>
&lt;li>-r #The maximum real-time scheduling priority&lt;/li>
&lt;li>-s # 堆栈大小的上限 The maximum stack size&lt;/li>
&lt;li>-t #每秒可占用的 CPU 时间上限 The maximum amount of cpu time in seconds&lt;/li>
&lt;li>-u #进程数的上限 The maximum number of processes available to a single user&lt;/li>
&lt;li>-v #虚拟内存的上限 The maximum amount of virtual memory available to the shell and, on some systems, to its children&lt;/li>
&lt;li>-x #The maximum number of file locks&lt;/li>
&lt;li>-T #The maximum number of threads&lt;/li>
&lt;/ul>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>ulimit -n 1000 #&lt;/li>
&lt;/ul>
&lt;h1 id="优化实例">优化实例&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>cat &amp;gt;&amp;gt; /etc/security/limits.d/max-openfile.conf &lt;span style="color:#e6db74">&amp;lt;&amp;lt; EOF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">* soft nproc 1000000
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">* hard nproc 1000000
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">* soft nofile 1000000
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">* hard nofile 1000000
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>cat /dev/urandom | head -1 | md5sum | head -c 32 &amp;raquo; /pass #生成 32 位随机密码&lt;/p></description></item></channel></rss>