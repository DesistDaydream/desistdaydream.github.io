<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – net(网络相关参数)</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.kernel%E5%86%85%E6%A0%B8/1.linux-kernel/kernel-%E5%8F%82%E6%95%B0/net%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E5%8F%82%E6%95%B0/</link><description>Recent content in net(网络相关参数) on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.kernel%E5%86%85%E6%A0%B8/1.linux-kernel/kernel-%E5%8F%82%E6%95%B0/net%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E5%8F%82%E6%95%B0/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: rp_filter</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.kernel%E5%86%85%E6%A0%B8/1.linux-kernel/kernel-%E5%8F%82%E6%95%B0/net%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E5%8F%82%E6%95%B0/rp_filter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.kernel%E5%86%85%E6%A0%B8/1.linux-kernel/kernel-%E5%8F%82%E6%95%B0/net%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E5%8F%82%E6%95%B0/rp_filter/</guid><description>
&lt;h1 id="heading">&lt;/h1>
&lt;p>rp_filter 参数应用实例&lt;/p>
&lt;p>rp_filter 参数示例&lt;/p>
&lt;p>假设机器有 2 个网口:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>eth0: 192.168.1.100&lt;/p>
&lt;/li>
&lt;li>
&lt;p>eth1：200.153.1.122&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>数据包源 IP：10.75.153.98，目的 IP：200.153.1.122&lt;/p>
&lt;p>系统路由表配置为：&lt;/p>
&lt;p>[root@localhost ~]# route -n&lt;/p>
&lt;p>Kernel IP routing table&lt;/p>
&lt;p>Destination Gateway Genmask Flags Metric Ref Use Iface&lt;/p>
&lt;p>default 192.168.1.234 0.0.0.0 　　 UG 0 0 0 eth0&lt;/p>
&lt;p>192.168.120.0 0.0.0.0 255.255.255.0 U 0 0 0 eth0&lt;/p>
&lt;p>10.75.153.98 0.0.0.0 255.255.255.0 U 0 0 0 eth0&lt;/p>
&lt;p>系统 rp_filter 参数的配置为：&lt;/p>
&lt;p>[root@localhost ~]# sysctl -a | grep rp_filter&lt;/p>
&lt;p>net.ipv4.conf.all.rp_filter=1&lt;/p>
&lt;p>net.ipv4.conf.default.rp_filter=1&lt;/p>
&lt;p>如上所示，数据包发到了 eth1 网卡，如果这时候开启了 rp_filter 参数，并配置为 1，则系统会严格校验数据包的反向路径。从路由表中可以看出，返回响应时数据包要从 eth0 网卡出，即请求数据包进的网卡和响应数据包出的网卡不是同一个网卡，这时候系统会判断该反向路径不是最佳路径，而直接丢弃该请求数据包。（业务进程也收不到该请求数据包）&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/zhv2lk/1616168317314-27937a08-a8c2-41a5-b15c-2cd36722d4ca.png" alt="">&lt;/p>
&lt;p>解决办法：&lt;/p>
&lt;p>1.修改路由表，使响应数据包从 eth1 出，即保证请求数据包进的网卡和响应数据包出的网卡为同一个网卡。&lt;/p>
&lt;p>2.关闭 rp_filter 参数。（注意 all 和 default 的参数都要改）&lt;/p>
&lt;p>1)修改/etc/sysctl.conf 文件，然后 sysctl -p 刷新到内存。&lt;/p>
&lt;p>2)使用 sysctl -w 直接写入内存：sysctl -w net.ipv4.conf.all.rp_filter=0&lt;/p>
&lt;p>3)修改/proc 文件系统： echo &amp;ldquo;0&amp;rdquo;&amp;gt;/proc/sys/net/ipv4/conf/all/rp_filter&lt;/p>
&lt;h2 id="开启-rp_filter-参数的作用">开启 rp_filter 参数的作用&lt;/h2>
&lt;ol>
&lt;li>减少 DDoS 攻击&lt;/li>
&lt;/ol>
&lt;p>校验数据包的反向路径，如果反向路径不合适，则直接丢弃数据包，避免过多的无效连接消耗系统资源。&lt;/p>
&lt;ol start="2">
&lt;li>防止 IP Spoofing&lt;/li>
&lt;/ol>
&lt;p>校验数据包的反向路径，如果客户端伪造的源 IP 地址对应的反向路径不在路由表中，或者反向路径不是最佳路径，则直接丢弃数据包，不会向伪造 IP 的客户端回复响应。&lt;/p>
&lt;h3 id="ps两种常见的非法攻击手段">Ps：两种常见的非法攻击手段：&lt;/h3>
&lt;ol>
&lt;li>DDos 攻击(Distribute Deny of Service)&lt;/li>
&lt;/ol>
&lt;p>分布式拒绝服务攻击。通过构造大量的无用数据包向目标服务发起请求，占用目标服务主机大量的资源，还可能造成网络拥塞，进而影响到正常用户的访问。&lt;/p>
&lt;ol start="2">
&lt;li>IP Spoofing（IP 欺骗）&lt;/li>
&lt;/ol>
&lt;p>IP Spoofing 指一个客户端通过伪造源 IP，冒充另外一个客户端与目标服务进行通信，从而达到某些不可告人的秘密。&lt;/p>
&lt;h2 id="另一种说法">另一种说法：&lt;/h2>
&lt;p>比如一台设备安装两&lt;del>个 &lt;del>haproxy，有多个网&lt;/del>卡&lt;/del>，多个 ip，不同 haproxy 代理不同网段，给不同后端。那么就需要关闭校验。&lt;/p>
&lt;h2 id="另一种说法-1">另一种说法：&lt;/h2>
&lt;p>在 Linux 中用于对 网卡的反向路由过滤策略进行配置的内核参数是 rp_filter，有关此参数的详细介绍以及配置方式请参见 Linux 内核参数 rp_filter。&lt;/p>
&lt;p>LVS 在 VS/TUN 模式下，需要对 tunl0 虚拟网卡的反向路由过滤策略进行配置。最直接的办法是把其值设置为 0。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>net.ipv4.conf.tunl0.rp_filter&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>net.ipv4.conf.all.rp_filter&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>因为 Linux 系统在对网卡应用反向路由过滤策略时，除了检查本网卡的 rp_filter 参数外，还会检查 all 配置项上的 rp_filter 参数，并使用这两个值中较大的值作为应用到当前网卡的反向路由过滤策略。所以需要同时把 &lt;code>net.ipv4.conf.all.rp_filter&lt;/code> 参数设置为 0。&lt;/p></description></item></channel></rss>