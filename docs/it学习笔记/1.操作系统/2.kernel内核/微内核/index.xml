<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – 微内核</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.kernel%E5%86%85%E6%A0%B8/%E5%BE%AE%E5%86%85%E6%A0%B8/</link><description>Recent content in 微内核 on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.kernel%E5%86%85%E6%A0%B8/%E5%BE%AE%E5%86%85%E6%A0%B8/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: 关于微内核的对话</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.kernel%E5%86%85%E6%A0%B8/%E5%BE%AE%E5%86%85%E6%A0%B8/%E5%85%B3%E4%BA%8E%E5%BE%AE%E5%86%85%E6%A0%B8%E7%9A%84%E5%AF%B9%E8%AF%9D/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.kernel%E5%86%85%E6%A0%B8/%E5%BE%AE%E5%86%85%E6%A0%B8/%E5%85%B3%E4%BA%8E%E5%BE%AE%E5%86%85%E6%A0%B8%E7%9A%84%E5%AF%B9%E8%AF%9D/</guid><description>
&lt;blockquote>
&lt;p>参考：&lt;a href="http://www.yinwang.org/blog-cn/2019/08/19/microkernel">原文链接&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>不知怎么的，最近 “微内核 vs 宏内核” 又成了热门话题。这场争论从 1992 年开始……&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/278c92c3-6d66-4a52-9b93-766dfd415034/minix-flamewar.jpg" alt="">&lt;/p>
&lt;h3 id="前言">前言&lt;/h3>
&lt;p>说实话我很久没有关心操作系统了，因为通常所谓的 “操作系统” 在我心里不过是一个 C 语言的运行时系统（run-time system），就像 JVM 是 Java 的运行时系统一样。由于 C 语言的设计缺陷，这些系统引入了各种无需有的概念（进程，线程，虚拟内存……），以及它们带来的复杂性和开销。&lt;/p>
&lt;p>微内核与宏内核之争当然也包括在内，在我看来这些都是无需有的概念和争论。操作系统相关的领域有很多的 “宗教斗争”，比如“Linux vs Windows”，“自由软件 vs 不自由软件”，“RISC vs CISC”，甚至“VIM vs Emacs”…… 人们为了证明自己用的系统或者工具是世界上“最好” 的，吵得昏天黑地。遇到有人指出自己用的工具的缺点，随时可能拿枪毙了对方。这些被叫做“flame war”。&lt;/p>
&lt;p>我曾经是某些宗教斗争中活跃的一员，不知道这事的人可以去查一下我的历史。等你经历了很多才发现，原来这些宗教情绪和斗争都是那么幼稚无知。&lt;/p>
&lt;p>这种 “技术宗教情绪” 往往显示出参与者心理地位的低下。因为他们缺乏自信，所以他们的心理需要靠山。这个靠山可能是某种操作系统（比如 Linux），某种编程语言（比如 C++），或者某种工具（比如 VIM）。这些人以自己能熟练使用这些工具为豪，居高临下，看不起“异教徒”。&lt;/p>
&lt;p>具有技术宗教情绪的人看似是为了 “技术”，“理想”，而其实跟那些以为开着豪车，穿着名牌就是“上流社会” 的人是一样低级的，因为他们依靠于这些物品，所以他们的地位在这些物品之下。&lt;/p>
&lt;p>一个人需要彻底的把这些东西看成是 “东西”，不带有任何崇拜或者鄙视的情绪，他的心理才算是成熟了。&lt;/p>
&lt;p>在我的理念里，一个操作系统本应该大概是&lt;a href="http://www.yinwang.org/blog-cn/2013/04/14/os-design">这个样子&lt;/a>。简单得很，根本不存在那么多问题。我可以利用这些思想来看透现有操作系统的绝大部分思想，管它是微内核还是宏内核。我可以把现有的操作系统看成是这个系统的 “退化版”。&lt;/p>
&lt;p>操作系统是一个死知识横行的领域。很多人发现操作系统课难学，难理解。里面有些内容，比如各种同步机制，很多人上完课毕了业，工作很多年以后都还弄不明白是怎么回事，它们为什么在那里。类似的东西包括虚拟内存，进程与线程的区别，等等。&lt;/p>
&lt;p>经过了很多的经验和思考，加上其他领域给我的启发，我终于明白了。原来很多这些概念都是无须有的，死掉的知识。&lt;/p>
&lt;p>操作系统课程里面的概念经常是这样形成的：&lt;/p>
&lt;ol>
&lt;li>很久以前，有人为了解决了一个特定的问题，提出了一个概念（比如 semaphore）。这个概念本来只有一个用途，就是解决他遇到的那个特定的问题。&lt;/li>
&lt;li>因为这人太有名，这概念就被写进了教科书里。有时候连他当时的具体实现细节都给写进去了。比如 semaphore 的两个操作被叫做 P 和 V，连这两个名字都给作为 “典故” 写进去了。&lt;/li>
&lt;li>教授们照本宣科，吹毛求疵，要你用这概念解决很多其它问题。很多根本就是人为造出来的变态问题，现实中遇不到的，或者是一些不该用这个概念解决的问题。&lt;/li>
&lt;/ol>
&lt;p>这就是为什么操作系统课学起来那么难——很多都是没道理的难。&lt;/p>
&lt;p>再加上 Unix 系统里面一堆设计恶劣，无法有效组合使用的工具软件，操作系统就在学生心中产生了威慑力。死记硬背，喜欢折腾，喜欢发现奇技淫巧的人，在这个领域里茁壮成长。逐渐的，他们产生了莫名的自信。他们并不理解里面的很多概念是怎么来的，只是记住了它们，他们写的代码很难看懂。然后他们开始从心理上打压那些记不住这些概念，看不懂他们代码的人。&lt;/p>
&lt;p>久而久之，这些人就成为了大家所崇拜的 “神”。&lt;/p>
&lt;p>跟有些人聊操作系统是件闹心的事，因为我往往会抛弃一些术语和概念，从零开始讨论。我试图从 “计算本质” 的出发点来理解这类事物，理解它们的起因，发展，现状和可能的改进。我所关心的往往是“这个事物应该是什么样子”，“它还可以是什么（也许更好的）样子”，而不只是“它现在是什么样子”。不明白我的这一特性，又自恃懂点东西的人，往往会误以为我连基本的术语都不明白。于是天就这样被他们聊死了。&lt;/p>
&lt;p>幸运的是我有几个聊得来的朋友，他们不会那么教条主义。于是今天我跟一个朋友在微信上聊起了 “微内核 vs 宏内核” 这件事。其实这个问题在我脑子里已经比较清楚了，可是通过这些对话，我学到了新的东西。这些东西是我们在对话之前可能都没有完全理解的，也许很多其他人也没理解。所以我觉得可以把这些有价值的对话记录下来。&lt;/p>
&lt;p>我不想从头解释这个事，因为你可以从网络上找到 “微内核” 和“宏内核”的设计原理。我想展示在这里的只是我们的对话，里面有对也有错，翻来覆去的思想斗争。对话是一个很有意思的东西，我觉得比平铺直叙的文章还要有效一些。&lt;/p>
&lt;h3 id="对话">对话&lt;/h3>
&lt;p>好了，现在开始。对话人物 “WY” 是我，“LD”是我的一个朋友。&lt;/p>
&lt;p>（8 月 19 日，开始）&lt;/p>
&lt;p>WY：好多年没折腾 OS，现在再折腾应该有新的发现。这篇 &lt;a href="https://pdfs.semanticscholar.org/983f/f3bf3adf07c9679f4a4e49cd5a8db2e68c5a.pdf">paper&lt;/a> 说 Minix 3 比 Linux 要慢 510%。&lt;/p>
&lt;p>WY：通常的定义，说微内核只需要 send 和 receive 两个系统调用。你不觉得有问题吗？其实函数调用的本质就是 send（参数）和 receive（返回值），但只有这两个系统调用，这种做法是过度的复用（multiplex）。&lt;/p>
&lt;p>（下载 Minix 3 源代码看了一会儿。上网搜索关于微内核的资料……）&lt;/p>
&lt;p>LD：是。&lt;/p>
&lt;p>LD：一个外设产生了中断，中断管理进程接收到到中断，发一个消息给相应的设备驱动进程，这个进程处理中断请求，如果设备驱动有 bug，挂了，也不会干扰 OS。这就是微内核逻辑。&lt;/p>
&lt;p>WY：微内核似乎一直没解决性能问题。后面的 L4, QNX&amp;hellip; 把 sever 隔离在不同的地址空间似乎是个最大的问题。&lt;/p>
&lt;p>LD：导致通讯成本特别大。本来传递个地址就可以的事。现在要整个复制过去。&lt;/p>
&lt;p>WY：地址空间不应该分开。或者也许可以在 MMU 上面做文章，传递时把那片内存给 map 过去。这样上下文切换又是一个开销…… 函数调用被搞的这么麻烦，微内核似乎确实是不行。对了，微内核服务调用时会产生进程切换吗？&lt;/p>
&lt;p>LD：会，按照微内核的定义，每一个基本单元都是一个进程。&lt;/p>
&lt;p>WY：完蛋了。&lt;/p>
&lt;p>LD：内存管理是一个进程，IO 管理是一个进程，每个设备驱动是一个进程，中断管理是一个进程。&lt;/p>
&lt;p>WY：进程切换的开销……&lt;/p>
&lt;p>LD：为了降低进程间通信开销，所以定义了 L4。我也不太懂这个有啥用。&lt;/p>
&lt;p>WY：改善的是通信开销，但仍然有进程切换开销。我刚看了一下 L4，它是从寄存器传值，但是进程切换会把寄存器都放到内存吧。&lt;/p>
&lt;p>LD：对呀，所以 L4 意义似乎不大。&lt;/p>
&lt;p>LD：带 “微” 的除了微软和微信，没一个成功的。&lt;/p>
&lt;p>LD：最近流行的所谓微服务。&lt;/p>
&lt;p>WY：驱动的 bug 应该有其他办法。&lt;/p>
&lt;p>LD：现在的 OS 的问题，就是内核微小的错误，都是让整个系统挂掉。这和我们写软件应该用多进程还是多线程，同样的问题。&lt;/p>
&lt;p>WY：应该从硬件底层彻底抛弃现在的进程切换方式。保存的上下文太多。&lt;/p>
&lt;p>LD：现在 OS 不是分成 user 和 kernel 保护级别么。 我觉得再增加一个两个保护级别，专门针对设备驱动程序似乎是更好的选择。&lt;/p>
&lt;p>WY：我以前设想一个办法可以完全不需要保护级别，而且不需要虚拟内存。&lt;/p>
&lt;p>LD：怎么办？ 编译器静态分析搞定？Rust？&lt;/p>
&lt;p>WY：完全使用实地址，但是代码无法访问对象外面的内存。&lt;/p>
&lt;p>LD：靠编译器保证？&lt;/p>
&lt;p>WY：不需要多先进的编译器。语言里面没有指针这东西就行，这样你没法访问不是给你的对象。嗯，需要抛弃 C 语言……&lt;/p>
&lt;p>LD：Rust！&lt;/p>
&lt;p>WY：还用不着 Rust。其实 JVM 早就是那样了。只不过通常不认为 JVM 是一个操作系统，但操作系统完全可以做成那样。&lt;/p>
&lt;p>LD：所谓对象，就是每次地址访问，除了地址还有一个 size？ 超过 size 不允许？还是编译器确保一定不会超过 size？&lt;/p>
&lt;p>WY：你在 Java 或者其它高级语言比如 Python&amp;hellip; 都没法访问对象外面的内存啊。只有 C 可以，因为 C 有指针，可以随便指到哪。&lt;/p>
&lt;p>LD：是的。C 这种方式，就是天天在没有护栏的桥上走来走去。除了越界访问，还有一个问题，就是多个 task 同时改一块内存。&lt;/p>
&lt;p>WY：然后为了防止越界，有了 “进程”，“虚拟地址” 这种概念。&lt;/p>
&lt;p>LD：虚拟地址，还是为了用虚拟内存。&lt;/p>
&lt;p>WY：虚拟地址，虚拟内存就是为了隔离。每个进程都以为地址从 0 开始，然后本来很容易的函数调用被隔离开了。如果改变了这个，微内核就真的可以很快了。实际上内核就不存在了…… 哦，还是有。就只剩下调度器，内存管理。IPC 没了，被函数调用所取代。&lt;/p>
&lt;p>LD：换个思路。其实 OS 最容易出问题的是硬件驱动，所以尽量让硬件标准化，别每个硬件都搞一套自己的驱动。让一套驱动支持多种硬件，问题就解决了。比如 usb 驱动。完全可以做到一类硬件都用一个设备驱动。&lt;/p>
&lt;p>WY：我还是觉得驱动程序 bug 其实可以不导致当机。用内核线程行不行？共享地址空间，但是异步执行。&lt;/p>
&lt;p>LD：Linux 似乎就是这样。tasklet，可以被调度的。&lt;/p>
&lt;p>WY：所以驱动程序要是当掉，可以不死对吗？我回去查一下。&lt;/p>
&lt;p>LD：看啥错误了。不小心修改了其它模块的内存就完蛋了。其它错误最多硬件本身不能用了。&lt;/p>
&lt;p>WY：所以就是为什么你说再多一个保护级别。&lt;/p>
&lt;p>LD：嗯，别碰了内核关键的代码。但是驱动之间还是可以互相干扰的。&lt;/p>
&lt;p>WY：是个不错的折中方案。所以微内核解决了一个不是那么关键的问题。&lt;/p>
&lt;p>LD：是的。这个问题不重要。哦，对了，Windows 是微内核的。好像从 2000 开始。&lt;/p>
&lt;p>WY：只是号称吧。Mac OS X 不是号称 Mach 微内核加 BSD 吗？&lt;/p>
&lt;p>LD：对。MacOS 也是微内核。&lt;/p>
&lt;p>WY：那他们怎么解决的性能问题呢？&lt;/p>
&lt;p>LD：不知道。Windows 蓝屏可不少，显然没做到完全隔离。至于 Mac，不清楚为啥那么稳定。&lt;/p>
&lt;p>WY：根据我们之前的讨论，Mac 微内核可能是假的。Mac 稳定是因为它的 driver 就没几个吧，硬件都是固定选好的。&lt;/p>
&lt;p>LD：嗯，也是稳定的主要原因。&lt;/p>
&lt;p>WY：这个英明了…… 而且看来微内核在集群方面也没什么用处。&lt;/p>
&lt;p>LD：集群，每个计算机是一个 node。挂了也不怕。&lt;/p>
&lt;p>（8 月 20 日继续讨论）&lt;/p>
&lt;p>WY：我发现这个 &lt;a href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.361.4009&amp;amp;rep=rep1&amp;amp;type=pdf">paper&lt;/a>……&lt;/p>
&lt;p>WY：这东西叫 L4Linux，就是 Linux 跑在 L4 微内核上。比起纯 Linux，开销只有 5%&lt;/p>
&lt;p>WY：代码在这里：&lt;a href="http://os.inf.tu-dresden.de/L4/LinuxOnL4">http://os.inf.tu-dresden.de/L4/LinuxOnL4&lt;/a>&lt;/p>
&lt;p>WY：L4 的做法是 1) 小参数用寄存器传递，不切换某些寄存器。2) 大型参数把内存映射到接收进程，跟我之前设想的一样。这样避免了拷贝。然后采用了 “direct process switch”，“lazy scheduling” 降低了调度开销。现代处理器的 tagged TLB 之类也大大降低了进程切换开销。 &lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/278c92c3-6d66-4a52-9b93-766dfd415034/direct-message-copy.jpg" alt="">
WY：上图是 direct message copy。先把接收进程的目的地址映射到发送进程的地址空间，然后发送进程往里拷贝。所以其实仍然有一次拷贝，并不像我理想的 OS 那样直接就能传递对象引用，完全不用拷贝。Pass-by-value vs pass-by-reference。但这比起 Linux 似乎开销是一样的。&lt;/p>
&lt;p>LD：微内核好处真的很大么？&lt;/p>
&lt;p>WY：好处就是微内核的好处，隔离。可能看各人需求了。一个 99.99% 可靠的系统和一个 99.999999% 可靠的系统的差别？&lt;/p>
&lt;p>WY：不过似乎高可靠需求都去用 vxworks 之类的了&lt;/p>
&lt;p>（上网查询 vxworks……）&lt;/p>
&lt;p>WY：原来 vxworks 也是微内核。&lt;/p>
&lt;p>WY：5% 的开销还可以接受…… 进程切换开销貌似没有提，用的地址映射方法。&lt;/p>
&lt;p>LD：cross address space&lt;/p>
&lt;p>WY：刚买了个 tplink 路由器，里面跑的 vxworks。&lt;/p>
&lt;p>LD：tplink 不是 Linux？&lt;/p>
&lt;p>WY：新的 tplink AC1900，改成了 vxworks。Airport Extreme 也是 vxworks。&lt;/p>
&lt;p>LD：why？&lt;/p>
&lt;p>WY：实时，可靠性高吧。&lt;/p>
&lt;p>LD：可靠性应该是最高的之一。卫星、武器都用。&lt;/p>
&lt;p>WY：波音 787 也用这个，各种火星车…… 貌似还是说明一些问题。&lt;/p>
&lt;p>WY：还有个 &lt;a href="https://www.ghs.com/products/safety_critical/integrity-do-178b.html">GreenHills Integrity DO-178B&lt;/a> 实时操作系统。F35 用的。&lt;/p>
&lt;p>WY：Much of the F-35&amp;rsquo;s software is written in C and C++ because of programmer availability; Ada83 code also is reused from the F-22. The Integrity DO-178B real-time operating system (RTOS) from Green Hills Software runs on COTS Freescale PowerPC processors.&lt;/p>
&lt;p>WY：Freescale PowerPC&amp;hellip;&lt;/p>
&lt;p>LD：我们的一个 mcu 就是 Freescale 的 PowerPC&lt;/p>
&lt;p>LD：有个叫 “rtems” 的 os，我一直很关注。&lt;/p>
&lt;p>WY：摘自 Integrity DO-178B RTOS：&lt;/p>
&lt;p>Safe and secure by design&lt;/p>
&lt;ul>
&lt;li>RTOS designed for use in reliable, mission critical,
safety critical and secure (MILS &amp;amp; MLS) applications&lt;/li>
&lt;li>Based on modern microkernel RTOS design&lt;/li>
&lt;li>Fast, deterministic behavior with absolute minimum interrupt latencies&lt;/li>
&lt;/ul>
&lt;p>WY：Integrity 也是微内核。看来微内核是可靠一些，属于在 C 语言框架下的一个不错的折中方案。&lt;/p>
&lt;p>……&lt;/p>
&lt;p>（如果你有什么不同意见，欢迎联系我。如果觉得有帮助，可以考虑&lt;a href="http://www.yinwang.org/blog-cn/2016/04/13/pay-blog">付费&lt;/a>）
&lt;a href="http://www.yinwang.org/blog-cn/2019/08/19/microkernel">http://www.yinwang.org/blog-cn/2019/08/19/microkernel&lt;/a>&lt;/p></description></item><item><title>Docs: 什么是微内核架构设计？</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.kernel%E5%86%85%E6%A0%B8/%E5%BE%AE%E5%86%85%E6%A0%B8/%E4%BB%80%E4%B9%88%E6%98%AF%E5%BE%AE%E5%86%85%E6%A0%B8%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.kernel%E5%86%85%E6%A0%B8/%E5%BE%AE%E5%86%85%E6%A0%B8/%E4%BB%80%E4%B9%88%E6%98%AF%E5%BE%AE%E5%86%85%E6%A0%B8%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/</guid><description>
&lt;h1 id="heading">&lt;/h1>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/nlfig5/1616168080608-410d0e89-44b2-42ad-b6e2-ea193a612e57.jpeg" alt="">&lt;/p>
&lt;p>阿里妹导读：作为一名 Java 程序员，相信同学们都听说过微内核架构设计，也有自己的理解。那么微内核是如何被提出来的？微内核在操作系统内核的设计中又有什么作用？本文从插件化(Plug-in)架构的角度来诠释微内核架构设计，通过微内核架构和微服务架构的对比，分享其对微服务设计的参考意义。&lt;/p>
&lt;p>文末福利：技术公开课《微服务实战：Service Mesh 与 Istio》。&lt;/p>
&lt;p>关于微内核架构设计现在比较热，听起来好像是操作系统内核相关的，作为 Java 程序员，操作系统内核那么遥远的事情，好像和我们没有什么关系。但是如果我说微内核其实就是插件化(Plug-in)架构，你一定会一脸疑惑，“你居然向 Java 程序员解释什么是插件化架构？我每天都在用啊，Eclipse、IntelliJ IDEA、OSGi、Spring Plugin、SPI 等，哪个不是插件化架构。我的一些项目也是采用插件化设计的，如使用插件实现流程控制定制等等”。但是别着急，即便是我们每天都在使用的技术，而且大多数人也都知道，如果我们能将其阐述得更清楚，并且能从中发现一些问题，做出一些优化有助于以后的架构设计，那么大多数人在日常的设计和开发中都能受益，岂不是更好。现在我们就来聊一聊微内核架构设计。&lt;/p>
&lt;p>&lt;strong>一 微内核设计之操作系统内核&lt;/strong>&lt;/p>
&lt;p>微内核设计其实就是插件体系。我们都知道，操作系统内核诞生得比较早，所以插件化最早被用在内核设计上，于是就有了微内核设计这一称呼。&lt;/p>
&lt;p>微内核是这样一种内核：它只完成内核不得不完成的功能，包括时钟中断、进程创建与销毁、进程调度、进程间通信，而其他的诸如文件系统、内存管理、设备驱动等都被作为系统进程放到了用户态空间。说白了，微内核是相对于宏内核而言的，像 Linux 就是典型的宏内核，它除了时钟中断、进程创建与销毁、进程调度、进程间通信外，其他的文件系统、内存管理、输入输出、设备驱动管理都需要内核完成。&lt;/p>
&lt;p>也就是说，微内核是相对宏内核而言的，宏内核是一个包含非常多功能的底层程序，也就是我们现在讲的 Monolith。它干的事情非常多，而且不是可插拔的，修改一些小的功能，都会涉及到整个程序的重新编译等，比如一个功能出现了一个小 bug，可能导致整个内核都出问题。这也是很多人将 Linux 称为 monolithic OS 的原因。而微内核只负责最核心的功能，其他功能都是通过用户态独立进程以插件方式加入进来，然后微内核负责进程的管理、调度和进程之间通讯，从而完成整个内核需要的功能。基本一个功能出现问题，但是该功能是以独立进程方式存在的，不会对其他进程有什么影响从而导致内核不可用，最多就是内核某一功能现在不可用而已。&lt;/p>
&lt;p>微内核就是一个运行在最高级别的程序片段，它能完成用户态程序不能完成的一些功能。微内核通过进程间通信来协调各个系统进程间的合作，这就需要系统调用，而系统调用需要切换堆栈以及保护进程现场，比较耗费时间；而宏内核则是通过简单的函数调用来完成各个模块之间的合作，所以理论上宏内核效率要比微内核高。这个和微服务的架构设计一样，我们将 Monolith 应用划分为多个小应用后，系统的设计就变得比较复杂了，之前都是应用内部函数调用，现在要涉及网络通讯、超时等问题，同时响应时间会被拉长。&lt;/p>
&lt;p>聊到这里，相信大家对微内核和宏内核已经有了一个大致的了解，看起来各有千秋。但是宏内核有一个最大的问题就是定制和维护陈本。现在的移动设备和 IoT 设备越来越多，如果要把一个庞大复杂的内核适配到某一设备上，是一件非常复杂的事情，如果很简单的话，那么把 Linux 内核适配到 Android 内核，甚至到 Tesla 等车载系统，基本上人人都可以做了。&lt;/p>
&lt;p>因此我们更需要一个微内核的架构设计，方便定制，而且非常小，可以实现功能的热替换或者在线更新等，这就是微内核被提出来的核心需求。但是微内核有一个运行的效率问题，所以在微内核和宏内核之间，又有了 Hybrid 内核，主要是想拥有微内核的灵活性，同时在关键点上有宏内核的性能。微内核设计在理论上确实有效率问题，但是随着芯片设计、硬件性能提升等，这方面或许已经有了非常大的提升，已经不再是最关键的问题。&lt;/p>
&lt;p>总体下来，内核设计有三个形式，如下：&lt;/p>
&lt;p>&lt;strong>二 插件化(Plug-in)架构设计&lt;/strong>&lt;/p>
&lt;p>上面聊了微内核在操作系统内核设计中的作用，接下来我们就开始讨论更通用的插件化架构设计，毕竟这个词大家都明白。&lt;/p>
&lt;p>插件化架构非常简单，就两个核心组件：系统核心(Core System)和插件化组件(Plug-in component)。Core System 负责管理各种插件，当然 Core System 也会包含一些重要功能，如插件注册管理、插件生命周期管理、插件之间的通讯、插件动态替换等。整体结构如下：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/nlfig5/1616168080313-4f5c5e54-460e-433b-a86b-c4e861cac46d.png" alt="">&lt;/p>
&lt;p>插件化架构对微服务架构设计帮助非常大，考虑到隔离性，插件可能是以独立进程方式运行的，那么这些进程如果扩展到网络上，分布在众多的服务器上，这个就是微服务架构的原型，所以了解微内核的同学都不屑于和你讨论微服务架构，相信你也明白了，除了 IT 传统的鄙视链因素，原理上确实就是这么回事。&lt;/p>
&lt;p>回到微服务架构设计场景，我们将 Plug-in component 重新命名为服务(Service)，这个和微内核设计中的服务也差不多，这个时候微服务和微内核就差不多了，都涉及到服务注册、管理和服务之间的通讯等。那我们看一下微内核是如何解决服务之间的通讯问题的？以下摘自维基百科：&lt;/p>
&lt;p>因为所有服务行程都各自在不同地址空间运行，因此在微核心架构下，不能像宏内核一样直接进行函数调用。在微核心架构下，要创建一个进程间通信机制，通过消息传递的机制来让服务进程间相互交换消息，调用彼此的服务，以及完成同步。采用主从式架构，使得它在分布式系统中有特别的优势，因为远程系统与本地进程间，可以采用同一套进程间通信机制。&lt;/p>
&lt;p>也就是说，采取的是基于消息的进程间通讯机制。消息最简单，就两个接口：send 和 receive，消息发送出去，然后等着收消息，处理后再发消息就可以了，这里大家应该也知道了，这个是异步的。回到插件化架构设计中，Plug-in 组件设计包含交互规范，也就是和外界相互通讯的接口，如果是基于消息通讯的话，就是 send 和 receive 接口，可以说是非常简单的。&lt;/p>
&lt;p>但是这里还有一个问题，那就是进程间通讯。你可能会问，这个有什么好疑问的，就是两个进程之间相互发消息呗。但是这里有一个最大的疑问，那就是进程间通讯是否有第三者介入？如下图：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/nlfig5/1616168080279-7918b353-018e-415f-aace-eb4e9aeccf2d.png" alt="">&lt;/p>
&lt;p>当然在操作系统的内核设计中，一定是通过内核进行转发的，就是我们理解的总线架构，内核负责协调各个进程间的通讯。这个大家也能理解，如果进程 A 直接发给另外一个进程 B，必然要了解对应的内存地址，微内核中的服务是可以被随时替换的，如果服务不可用或者被替换，这个时候要通知和其通讯的其他进程，是不是太复杂？刚才已经提到，只有 send 和 receive 接口，没有其他通知下线、服务不可用的接口。在微内核的设计中，一定是通过总线结构，进程向 Kernel 发送消息，然后 kernel 再发送给对应的进程，这样的一个总线设计。实际上很多应用内部在做 Plug-in 组件解耦时，都会使用 EventBus 的结构，其实就是总线的设计机制。&lt;/p>
&lt;p>为何婆婆妈妈说这些？因为非常关键。分布式的进程通讯是微服务的核心，我们理解的服务到服务的通讯，就是服务 A 启动监听端口，服务 B 会和服务 A 建立连接，然后两者通讯即可。这个方式和微内核设计中内核负责消息接收和转发的总线架构设计是不一样的。如采用 HTTP，HSF 等通讯协议时，相当于 kernel 告知通讯的双方各自的地址，然后它们之间就可以通讯了。然后就没有 Kernel 什么事情了，也不会用到什么总线的结构设计，这个就是传统的服务发现机制。&lt;/p>
&lt;p>但是还有一种模式，就是完全透明的插件化通讯机制，如下图：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/nlfig5/1616168080279-2912e2d4-db8e-43c2-85b8-8ca8e09ba527.png" alt="">&lt;/p>
&lt;p>Plug-in 组件，也就是微服务架构中的服务，是不能直接通讯的，而是需要 Core System 进行转发。这样做的好处和微内核架构一样，插件相互之间无直接联系，彼此之间非常透明，例如服务 A 下线后，完全不需要通知其他服务；服务 A 被替换，也不需要通知其他服务；服务 A 从数据中心 1 到数据中心 2，也不用通知其他服务；即便服务 N 和服务 A 之间网络不互通，两者之间也能通讯。&lt;/p>
&lt;p>这里有个问题：性能问题。我们都知道，两点之间，直线段最短。为何要多绕一下到 Core System 呢？这就是微内核和宏内核之间的争论之处，使用函数调用非常快，而进程间的消息通讯则是非常慢的，但是这种通过中介进行通讯机制的好处也是非常明显的。那么如何提升这种基于总线的通讯性能呢？当然有，比如选择高性能的二进制协议，HTTP 1.1 这种文本协议就不需要了；采用 Zero Copy 机制，可以快速进行网络包转发；好的网络硬件，如 RDMA；好的协议，如基于 UDP 的 QUIC 等。总结下来，和微内核一样，这种微服务通讯的性能是可以提升的。当然如果实在受不了这种性能，在关键场景，你可以采用 Hybrid 模式，混入一些服务之间直接通讯的设计，但只能在性能极致的场景中使用。&lt;/p>
&lt;p>此外，插件化架构中的插件组件是各种各样的，通讯的机制也各不一样，一些是 RPC 的，一些是 Pub/Sub 的，一些是无需 ACK 的（如 Beacon 接口），还有一些是双向通讯的等等。当然你可以选择不同的通讯协议，但是这里有一个问题，就是 Core System 需要理解这个协议，然后才能进行消息路由。这个时候 Core System 需要编写大量的 Adapter 来解析这些协议，例如 Envoy 包含各种 filter 来支持不同的协议，如 HTTP、MySQL、ZooKeeper 等，但是因此 Core System 就会变得非常复杂且不稳定。&lt;/p>
&lt;p>另外可以选一种通用的协议，Core System 只支持这一种协议，各个插件之间都基于该协议通讯，至于服务和其他外部系统如何通讯，如数据库、github 集成等，这些 Core System 并不关心，那只是 Service 内部的事情。目前比较通用的协议是 gRPC，如 K8s 内部都会采用该协议，另外 Dapr 也采用 gRPC 协议做服务集成，因为 gRPC 提供的通讯模型基本可以满足大多数的通讯场景。当然另外一个就是 RSocket，提供更丰富的通讯模型，也适用于 Core System 这种服务间通讯场景。对比 gRPC，RSocket 可以运行在各种传输层上，如 TCP、UDP、WebSocket、RDMA 等，相反的，gRPC 目前只能运行在 HTTP 2 之上。&lt;/p>
&lt;p>&lt;strong>三 服务通讯的延伸&lt;/strong>&lt;/p>
&lt;p>前面说到，最好由插件化架构设计的 Core System 作为服务之间消息通讯的路由，如果是这样的话，就会产生一种 Broker 模式，当然也有可能是 Agent。这里大家一定会想到 Service Mesh，没错。当然你可以选择 Agent Sidecar 模式，也可以选择中心化的 Broker 模式，这两者的功能都是一样的，只是处理的方式不一样而已。Agent 基于服务注册和发现机制，然后找到对方服务的 Agent，再进行两个 Agent 之间的通讯，只是省掉服务之间的调用的开销。但是 Broker 是集中式的，大家都向 Broker 发送和接收消息，不涉及服务注册发现机制，不涉及服务元信息推送，就是总线结构。&lt;/p>
&lt;p>我现在做的就是基于这种 Broker 的总线的架构设计，在 RSocket Broker 中，也是采用微内核架构设计，当然未必做得最好 。RSocket Broker 核心就是管理注册的服务、路由管理、数据采集等，而不会添加过多的功能，和 Core System 的设计理念一样，只添加必须的功能。如果你要扩展整个系统更多的功能，如发短信、发邮件、对接云存储服务等，需要编写一个 Service ，然后和 Broker 对接一下，再从 broker 那里收消息（receive），处理完毕后再发送（send）给 Broker 就可以了。总体结构如下：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/nlfig5/1616168080280-cfe8fda4-0dd2-475a-992d-9f73f3cae6e2.png" alt="">&lt;/p>
&lt;p>有不少同学会问，当服务实例的负载太高的时候，Broker 如何实现动态扩容呢？Broker 会给你提供数据，如一个服务实例 QPS，至于是否扩展，你只需要写一个服务，从 Broker 上采集数据，分析后，调用 K8s API 进行扩容即可，Broker 并不负载这些业务功能，它只会添加非常必要的功能，这个和 Core System 设计是一样的。&lt;/p>
&lt;p>回到插件化架构的灵活性上，如果系统中有一个 KV 存储的插件，你只要遵循消息格式或者通讯接口，就可以保存 KV 数据。但是你并不太关心是 Redis 存储的，还是 Tair 存储的，或者是云端的 KV 服务，这就为服务标准化和可替换性提供了很好的基础，这对应用上云或云原生化帮助非常大，整个系统有非常大的灵活性。&lt;/p>
&lt;p>&lt;strong>四 总结&lt;/strong>&lt;/p>
&lt;p>其实有非常多的书有关于微内核的介绍，操作系统的图书就不用说了，另外两本书也非常不错，对通用架构设计帮助也非常大，尤其是微服务的场景，我也是参考这两本书写这篇文章的。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/nlfig5/1616168080277-f0bfb631-f278-48b6-b16f-7811c09cd1cc.png" alt="">&lt;/p>
&lt;p>微内核架构设计对微服务设计有非常好的参考意义，但是微服务有一个非常大的问题就是服务边界的划分，对比操作系统，已经发展几十年，而且非常稳定，功能划分非常容易。而微服务架构是为业务服务的，虽然面对的业务可能已经存在上百年，但是软件化、数字化和流程化并没有多少年，加上现实业务的复杂性，还有各种妥协，个人认为微服务架构会更复杂一些。&lt;/p>
&lt;p>&lt;strong>技术公开课&lt;/strong>&lt;/p>
&lt;p>微服务实战：Service Mesh 与 Istio&lt;/p>
&lt;p>Service Mesh 是一个基础设施层，用于处理服务间通信。Istio 作为 Service Mesh 的开源项目，其最重要的功能就是对网格中微服务之间的流量进行管理，包括服务发现、请求路由和服务间的可靠通信。本课程共 8 个课时，带同学们初试 Istio，学习其在流量管理、遥测、服务韧性及安全性方面的知识和应用。&lt;/p></description></item></channel></rss>