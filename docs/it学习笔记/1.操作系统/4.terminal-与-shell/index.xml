<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – 4.Terminal 与 Shell</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.terminal-%E4%B8%8E-shell/</link><description>Recent content in 4.Terminal 与 Shell on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.terminal-%E4%B8%8E-shell/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: PowerShell</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.terminal-%E4%B8%8E-shell/windows_shell/powershell/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.terminal-%E4%B8%8E-shell/windows_shell/powershell/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://learn.microsoft.com/en-us/powershell">官方文档，PowerShell&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>PowerShell 是一种跨平台的任务自动化解决方案，由命令行 shell、脚本语言和配置管理框架组成。 PowerShell 在 Windows、Linux 和 macOS 上运行。&lt;/p>
&lt;p>PowerShell 的独特之处在于，它接受并返回 .NET 对象，而非纯文本。这个特点让 PowerShell 可以更轻松地在一个管道中串联不通的命令。&lt;/p>
&lt;blockquote>
&lt;p>这里面所说的对象，就是面向对象编程中常说的“对象”，就像 Go 语言中的 Struct 类似的东西，只不过是 .NET 语言中的对象。&lt;/p>
&lt;/blockquote>
&lt;p>这些对象在被接收后，再交给格式化函数处理，以人类可读的方式，输出出来。&lt;/p>
&lt;h2 id="powershell-命令">PowerShell 命令&lt;/h2>
&lt;p>PowerShell 中可以执行的命令分两类&lt;/p>
&lt;ul>
&lt;li>系统上的可执行命令。&lt;/li>
&lt;li>cmdlet&lt;/li>
&lt;/ul>
&lt;p>PowerShell 内置了一组 &lt;strong>cmdlet(全称 command-lets)&lt;/strong>，cmdlet 并不是一个独立的可执行文件，而是一种统称，cmdlet 被收集在 PowerShell 模块中，可以按需加载它们。可以用任何编译的 .NET 语言或 PowerShell 脚本语言来编写 cmdlet。&lt;/p>
&lt;p>cmdlet 中每个命令的名称都是由 &lt;strong>Verb-Noun(动词-名词)&lt;/strong> 组成，比如 Get-Command 命令用于获取在 CLI 中注册的所有 cmdlet。&lt;/p>
&lt;p>我们可以通过如下几个命令来搜索可用的 cmdlet&lt;/p>
&lt;ul>
&lt;li>&lt;code>Get-Verb&lt;/code> # 获取所有可用的动词&lt;/li>
&lt;li>&lt;code>Get-Command&lt;/code> # 此命令会检索计算机上安装的所有命令的列表。&lt;/li>
&lt;li>&lt;code>Get-Member&lt;/code> # 基于其他命令运行，可以获取 cmdlet 返回的对象信息，包括对象中的&lt;strong>属性、方法、等等&lt;/strong>&lt;/li>
&lt;li>&lt;code>Get-Help&lt;/code> # 以命令名称为参数调用此命令，将显示一个帮助页面，其中说明了命令的各个部分。&lt;/li>
&lt;/ul>
&lt;p>从本笔记的 &lt;a href="https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Y.Windows%20%E7%AE%A1%E7%90%86/Windows%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/_index.md">Windows 管理工具&lt;/a> 目录查找所有可用的命令，以及查看命令的用法&lt;/p>
&lt;p>我们可以通过 &lt;code>$psversiontable&lt;/code> 和 &lt;code>$host&lt;/code> 变量查看 PowerShell 版本信息&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>PS C:\&amp;gt; $psversiontable
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Name Value
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---- -----
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PSVersion &lt;span style="color:#ae81ff">7.3&lt;/span>.2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PSEdition Core
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>GitCommitId &lt;span style="color:#ae81ff">7.3&lt;/span>.2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>OS Microsoft Windows &lt;span style="color:#ae81ff">10.0&lt;/span>.19045
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Platform Win32NT
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PSCompatibleVersions {&lt;span style="color:#ae81ff">1.0&lt;/span>, &lt;span style="color:#ae81ff">2.0&lt;/span>, &lt;span style="color:#ae81ff">3.0&lt;/span>, &lt;span style="color:#ae81ff">4.0&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">…&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PSRemotingProtocolVersion &lt;span style="color:#ae81ff">2.3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>SerializationVersion &lt;span style="color:#ae81ff">1.1&lt;/span>.0.1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>WSManStackVersion &lt;span style="color:#ae81ff">3.0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PS C:\&amp;gt; $host
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Name &lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> ConsoleHost
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Version &lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> &lt;span style="color:#ae81ff">7.3&lt;/span>.2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>InstanceId &lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> 518ca4c4-e959-4d51-b3bb-cdcb3d5a1484
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>UI &lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> System.Management.Automation.Internal.Host.InternalHostUserInterface
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CurrentCulture &lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> zh-CN
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CurrentUICulture &lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> zh-CN
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PrivateData &lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> Microsoft.PowerShell.ConsoleHost+ConsoleColorProxy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>DebuggerEnabled &lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> True
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>IsRunspacePushed &lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> False
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Runspace &lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> System.Management.Automation.Runspaces.LocalRunspace
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="安装与更新">安装与更新&lt;/h1>
&lt;h1 id="使用-powershell">使用 PowerShell&lt;/h1>
&lt;p>&lt;code>powershell&lt;/code> 和 &lt;code>pwsh&lt;/code> 这几个命令一般都是用来打开 PowerShell 的，同时也是执行 PowerShell 脚本的前置命令。就像执行 Bash 脚本前加个 &lt;code>bash&lt;/code> 命令一样&lt;/p>
&lt;h1 id="item">ITEM&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://learn.microsoft.com/en-us/powershell/scripting/lang-spec/chapter-03#33-items">官方文档-PowerShell，脚本-基本概念-Items&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>PowerShell 中会抽象出一个 &lt;strong>Item(项)&lt;/strong> 的概念，Item 可以一个 &lt;strong>Alias(别名)&lt;/strong>、&lt;strong>Variable(变量)&lt;/strong>、&lt;strong>Function(函数)&lt;/strong>、&lt;strong>EnvironmentVariable(环境变量)&lt;/strong>、甚至可以是文件系统中的 &lt;strong>File(文件)&lt;/strong> 或者 &lt;strong>Directory(目录)&lt;/strong>。&lt;/p>
&lt;p>我们常用的 &lt;code>ls&lt;/code> 命令，在 PowerShell 中其实就是调用了 &lt;code>Get-ChildItem&lt;/code> 命令&lt;/p>
&lt;h1 id="porviders提供器-和-drives驱动器">Porviders(提供器) 和 Drives(驱动器)&lt;/h1>
&lt;p>在 PowerShell 中，Providers 和 Drives 是提供对不同数据源（如文件系统、注册表、Certificate 等）的访问的特定接口。Drives 则是实际代表特定数据源的容器，比如本地磁盘驱动器、注册表驱动器等。使用 PowerShell 可以对这些数据源进行管理和操作。&lt;/p></description></item><item><title>Docs: 4.Terminal 与 Shell</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.terminal-%E4%B8%8E-shell/4.terminal-%E4%B8%8E-shell/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.terminal-%E4%B8%8E-shell/4.terminal-%E4%B8%8E-shell/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Shell_(computing)">Wiki,Shell&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.man7.org/linux/man-pages/man1/bash.1.html">Manual(手册),bash&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://blog.csdn.net/kangkanglou/article/details/82698177">https://blog.csdn.net/kangkanglou/article/details/82698177&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://feihu.me/blog/2014/env-problem-when-ssh-executing-command-on-remote/">http://feihu.me/blog/2014/env-problem-when-ssh-executing-command-on-remote/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.jianshu.com/p/0c7ea235b473">https://www.jianshu.com/p/0c7ea235b473&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/RxpcqBGhUT-5z4N5kRXvBg">公众号，阿里技术-一种命令行解析的新思路&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>**Shell(也称为壳层) **是一种计算机程序，向人类用户或其他程序公开操作系统的服务。通常，操作系统的 Shell 程序会根据计算机的角色和特定操作，分为两类：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&lt;a href="https://en.wikipedia.org/wiki/Command-line_interface">command-line interface&lt;/a>(命令行界面，简称 CLI)&lt;/strong>&lt;/li>
&lt;li>&lt;strong>&lt;a href="https://en.wikipedia.org/wiki/Graphical_user_interface">graphical user interface&lt;/a>(图形用户界面，简称 GUI)&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>Shell 在计算机科学中指“为用户提供用户界面”的软件，通常指的是命令行界面的解析器。一般来说，这个词是指操作系统中提供访问内核所提供之服务的程序。Shell 也用于泛指所有为用户提供操作界面的程序，也就是程序和用户交互的接口。因此与之相对的是 Kernel(内核)，内核不提供和用户的交互功能。&lt;/p>
&lt;p>用白话讲：人类操作计算机的地方就是 Shell ，可以是一个输入命令的地方(CLI)，也可以是一个用户用鼠标点点点的图形界面(GUI)。Shell 也是一类程序的统称，实际上，当输入完用户名和密码登录系统的时候，就是 Linux 系统后台自动启动了一个名叫 Bash 的 Shell 程序，来让用户输入指令对计算机进行操作&lt;/p>
&lt;p>所以，一个 Shell 也会有一个进程号，在该 Shell 执行的程序的父进程号都是该 Shell 的进程号&lt;/p>
&lt;p>如下所示，[登录系统](/docs/IT学习笔记/1.操作系统/5.登录%20Linux%20 与%20 访问控制/5.登录%20Linux%20 与%20 访问控制.md Linux 与 访问控制.md)时，会启动一个进程标识当前登录的用户，并启动一个子进程，该子进程就是 Shell 的类型，这示例里的 Shell 为 Bash，并且会为该 Shell 分配一个&lt;a href="#c0DF2">终端&lt;/a>来与用户进行交互(这里的终端名是 tty1)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>root &lt;span style="color:#ae81ff">1067&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 11:20 ? Ss 0:00 login -- root
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root &lt;span style="color:#ae81ff">9622&lt;/span> &lt;span style="color:#ae81ff">1067&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> 13:19 tty1 Ss+ 0:00 &lt;span style="color:#ae81ff">\_&lt;/span> -bash
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>所有命令都是在这个 shell 下运行的，如下所使，在 bash 下执行了一个 cat 命令&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>root &lt;span style="color:#ae81ff">1067&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 11:20 ? Ss 0:00 login -- root
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root &lt;span style="color:#ae81ff">9622&lt;/span> &lt;span style="color:#ae81ff">1067&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 13:19 tty1 Ss 0:00 &lt;span style="color:#ae81ff">\_&lt;/span> -bash
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root &lt;span style="color:#ae81ff">11198&lt;/span> &lt;span style="color:#ae81ff">9622&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 13:22 tty1 S+ 0:00 &lt;span style="color:#ae81ff">\_&lt;/span> cat
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note：&lt;/p>
&lt;ul>
&lt;li>有一点需要明确，系统下的任何程序运行都需要一个用户，哪怕在刚装完系统第一次启动，所有进程也是基于 root 用户来运行的，所以脱离用户讨论 shell 是不对的。&lt;/li>
&lt;li>&lt;strong>由于 linux 常用的 shell 为 bash，下面主要描述的都是关于 bash shell 的配置&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h2 id="terminal终端">Terminal(终端)&lt;/h2>
&lt;blockquote>
&lt;p>参考： - &lt;a href="https://en.wikipedia.org/wiki/Computer_terminal">Wiki,Computer Terminal&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Teleprinter">Wiki,TTY&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Tty_(unix)">Wiki,TTY(Unix)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Pseudoterminal">Wiki,Psedoterminal&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Terminal_emulator">Wiki,Terminal emulator&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://askubuntu.com/questions/481906/what-does-tty-stand-for">TTY 代表什么&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://man7.org/linux/man-pages/man7/pty.7.html">Manual(手册),pty(7)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://man7.org/linux/man-pages/man4/pts.4.html">Manual(手册),pts(4)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Computer Terminal(计算机终端)&lt;/strong> 是一种 Electronic(电子) 或 Electromechanical(机电) 硬件设备，可用于将数据输入计算机或计算机系统，以及从计算机或计算机系统中转录数据。&lt;strong>Teletype(电传打字机，简称 TTY)&lt;/strong> 是早期硬件拷贝终端的一个例子，并且比计算机屏幕的使用早了几十年。早期的终端是廉价设备，与用于输入的打孔卡或纸带相比速度非常慢，但随着技术的改进和视频显示器的引用，终端将这些旧的交互形式推向整个行业，分时系统的发展，弥补了低效的用户打字能力，能够支持统一机器上的多个用户，每个用户都在自己的终端上操作。所以，现代我们将 &lt;strong>TTY 表示为终端&lt;/strong>，是那种最基础的终端。&lt;/p>
&lt;p>除了传统的硬件终端以外，我们还可以通过计算机程序模拟出硬件终端，这种功能称为 &lt;strong>Terminal Emulator(终端模拟器)&lt;/strong>，而很多时候也称为 &lt;strong>Psedoterminal/Pseudotty(伪终端，简称 PTY)&lt;/strong>。PTY 是一对提供双向通信通道的虚拟字符设备，通道的一端称为 master(&lt;strong>简称 PTMX&lt;/strong>)，另一端称为 slave(&lt;strong>简称 PTS&lt;/strong>)。Linux 通过 devpts 文件提供了对 PTS 功能的完整支持。&lt;/p>
&lt;p>终端也分为多种类型，有多种程序可以为用户分配一个指定类型的终端&lt;/p>
&lt;ul>
&lt;li>TTY&lt;/li>
&lt;li>Psedoterminal(伪终端)&lt;/li>
&lt;li>CLI&lt;/li>
&lt;li>TUI&lt;/li>
&lt;/ul>
&lt;p>名词有很多，但是至今位置没有一个明确的标准定义，大家都是拿起来就用~&lt;/p>
&lt;h2 id="cli-的-argsflagoptions">CLI 的 Args、Flag、Options&lt;/h2>
&lt;p>关于 CLI 的术语有很多，比如 Argument(参数)、Flag(标志)、Option(选项) 等&lt;/p>
&lt;p>本质上，命令及其参数只是一个字符串而已，字符串的含义是由 Shell 来解释的，对于 Shell 来说，命令和参数、参数和参数之间是由空白符分割的。除此之外，什么父命令、子命令、本地参数、单横线、双横线 还是其他字符开头都没关系，就仅仅是字符串而已，这些字符串由 Shell 传递给将要执行的程序中。&lt;/p>
&lt;ul>
&lt;li>Argument(参数) # 就是对命令后面一串空白符分割的字符串的称呼&lt;/li>
&lt;li>Flag(标志) # 这种类型的参数可以将某个值跟代码中的某个变量关联起来。&lt;/li>
&lt;li>Option(选项) # Flag 赋予了我们通过 CLI 直接给代码中某个变量赋值的能力。那么如果我没有给这个变量赋值呢，程序还能运行下去么？如果不能运行，则这个 Flag 就是必选的，否则就是可选的。那么这些 Flag 或者 Argument 从这种角度将可以称为 Option。也就是可选的 Flag；或者称为可选的 Argument。&lt;/li>
&lt;/ul>
&lt;h1 id="bash-关联文件">Bash 关联文件&lt;/h1>
&lt;h2 id="全局配置文件对所有用户生效的配置">全局配置文件，对所有用户生效的配置&lt;/h2>
&lt;p>**/etc/profile **# 任何用户使用 shell 时都会加载的配置。linux 不推荐直接修改该文件。加载该配置时自动加载 /etc/profile.d/&lt;em>.sh 的所有文件
**/etc/bashrc **# 常用于设置登录功能和命令别名。linux 不推荐直接修改该文件。加载该配置时自动加载 /etc/profile.d/&lt;/em>.sh 的所有文件
**/etc/profile.d/*.sh **# 类似于 include 的效果。通常用来创建自定义配置。
在 &lt;strong>/etc/profile&lt;/strong> 和 &lt;strong>/etc/bashrc&lt;/strong> 中都会有如下代码块&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> i in /etc/profile.d/*.sh /etc/profile.d/sh.local ; &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[&lt;/span> -r &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$i&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">]&lt;/span>; &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>-#*i&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> !&lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$-&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">]&lt;/span>; &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> . &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$i&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> . &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$i&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &amp;gt;/dev/null
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这段脚本的大致意思就是：遍历 /etc/profile.d 目录下所有以 .sh 结尾的文件和 sh.local 文件。判断它们是否可读（[ -r &amp;ldquo;$i&amp;rdquo;]），如果可读，判断当前 Shell启动方式是不是交互式（$- 中包含 i）的，如果是交互式的，在当前 Shell 进程中执行该脚本（. &amp;ldquo;$i&amp;rdquo;，source &amp;ldquo;$i&amp;rdquo; 的简写， Shell 的模块化方式），否则，也在当前 Shell 进程中执行该脚本，只不过将输出重定向到了 /dev/null 中。&lt;/p>
&lt;blockquote>
&lt;p>${-#*i} 这个表达式的意思是：从左向右，在 - 变量中找到第一个 i ，并截取 i 之后的子串。&lt;/p>
&lt;/blockquote>
&lt;h2 id="用户配置文件对部分用户生效的配置">用户配置文件，对部分用户生效的配置&lt;/h2>
&lt;blockquote>
&lt;p>这些配置文件一般都定义在用户的家目录当中，所以当某一用户使用 shell 时，就会在其家目录中加载这些配置文件。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>~/.bash_profile&lt;/strong> # 仅对当前用户有效。该配置文件会对 ~/.bashrc 进行判断，如果存在，则加载 ~/.bashrc。
&lt;strong>~/.bashrc&lt;/strong> # 仅对当前用户有效。该配置文件会对 /etc/bashrc 进行判断，如果存在，则加载 /etc/bashrc。
&lt;strong>~/.bash_login&lt;/strong> # 仅对当前用户有效。
&lt;strong>~/.profile&lt;/strong> # 仅对当前用户有效。&lt;/p>
&lt;p>Note：&lt;/p>
&lt;ul>
&lt;li>仅在登录的第一次读取一次 bash 这些配置文件，如果在里面加了内容想让其实现，需要重新登录或者用 source FILE 命令来让更改的内容生效）&lt;/li>
&lt;li>用户登录时逐一加载 ~/.bash_profile、~/.bashrc、~/.bash_login、~/.profile。当任何一个文件存在时，都不再加载其余文件。&lt;/li>
&lt;li>为什么配置文件会有这么多分类呢？详见 《shell 的四种模式》章节。不同模式，加载的配置文件是不同的&lt;/li>
&lt;/ul>
&lt;h2 id="四种登录与交互模式">四种登录与交互模式&lt;/h2>
&lt;p>这里面的概念推荐有一定 Linux 基础了之，尤其是得真正明白 Shell 到底是什么之后再来看。&lt;/p>
&lt;p>首先，有几种对登录类型的描述：&lt;/p>
&lt;ul>
&lt;li>交互式：一个个地输入命令并及时查看它们的输出结果，整个过程都在跟 Shell 不停地互动。&lt;/li>
&lt;li>非交互式：运行一个 Shell 脚本 文件，让所有命令批量化、一次性地执行。&lt;/li>
&lt;li>登录式：需要输入用户名和密码才能使用。&lt;/li>
&lt;li>非登录式：直接可以使用。&lt;/li>
&lt;/ul>
&lt;p>这几种类型的不通组合，决定了运行 Shell 的模式&lt;/p>
&lt;p>当我们运行一个 Shell 之后，Shell 会选择下面 4 中模式之一，作为运行本次 Shell 的模式，&lt;strong>不同的模式，加载的配置文件是不同的&lt;/strong>。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>login + interactive # 登录交互。&lt;/strong>
&lt;ul>
&lt;li>首先读取并执行 /etc/profile。&lt;/li>
&lt;li>然后逐一加载 ~/.bash_profile、~/.bash_login、~/.profile。当任何一个文件存在时，都不再加载其余文件。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>login + non-interactive # 登录不交互。&lt;/strong>
&lt;ul>
&lt;li>与 登录交互 模式相同。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>non-login + interactive # 不登陆交互&lt;/strong>
&lt;ul>
&lt;li>直接加载 ~/.bashrc 文件&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>non-login + non-interactive # 不登陆不交互&lt;/strong>
&lt;ul>
&lt;li>与 不登录交互 模式相同&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="如何判断是否为交互式-shell-有两种方式">如何判断是否为交互式 Shell? 有两种方式&lt;/h3>
&lt;p>查看特殊变量 &lt;code>-&lt;/code> ，如果输出的值包含 &lt;code>i&lt;/code>，则是交互式，否则是非交互式&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>echo $-
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 比如下面的情况&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root@lichenhao:~# ssh 172.19.42.248
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root@lichenhao:~# echo $-
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>himBHs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 当使用 ssh 登录时，使用 -T 参数不分配终端，则 $- 没有 i&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root@lichenhao:~# ssh -T 172.19.42.248
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo $-
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hBs
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>查看变量 PS1 是否为空，如果不为空，则是交互式，否则为非交互式&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>echo $PS1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note：这里需要对“交互式”这三个字进行一下说明。与平时理解的所谓交互式不太一样，这里面虽然人类还是可以与设备交互，但是依然称为“非交互式”。&lt;/p>
&lt;p>如何判断是否为登录式 Shell ?&lt;/p>
&lt;p>执行命令 shopt login_shell，如果 login_shell 的值为 on 表示登录式，为 off 表示非登录式。&lt;/p>
&lt;pre>&lt;code>[root@master ~]# shopt login_shell
login_shell on
&lt;/code>&lt;/pre>
&lt;h2 id="典型登录模式总结">典型登录模式总结&lt;/h2>
&lt;ul>
&lt;li>登陆机器后的第一个 shell：登录 + 交互&lt;/li>
&lt;li>通过 ssh 登陆到远程主机：登录 + 交互&lt;/li>
&lt;li>新启动一个 shell 进程，如运行 bash ：不登陆 + 交互&lt;/li>
&lt;li>执行脚本，如 bash script.sh ：不登陆 + 不交互&lt;/li>
&lt;li>运行头部有如 #!/usr/bin/env bash 的可执行文件，如 ./executable ：不登陆 + 不交互&lt;/li>
&lt;li>远程执行脚本，如 ssh user@remote script.sh ：不登陆 + 不交互&lt;/li>
&lt;li>远程执行脚本，同时请求控制台，如 ssh user@remote -t &amp;rsquo;echo $PWD&amp;rsquo; ：不登陆 + 交互&lt;/li>
&lt;li>在图形化界面中打开 terminal：不登陆 + 交互&lt;/li>
&lt;/ul>
&lt;h2 id="登录系统后可自动执行的配置文件">登录系统后可自动执行的配置文件&lt;/h2>
&lt;p>/etc/rc.local&lt;/p>
&lt;ul>
&lt;li>注意：centos7 的 rc.local 没有可执行权限，需要添加权限(chmod +x /etc/rc.d/rc.local)，否则无法使用&lt;/li>
&lt;li>官方推荐使用 systemd 来管理启动脚本。而不是这种方式&lt;/li>
&lt;/ul></description></item><item><title>Docs: Windows Shell</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.terminal-%E4%B8%8E-shell/windows_shell/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.terminal-%E4%B8%8E-shell/windows_shell/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/windows-commands">官方文档-Windowns Server，Windows 命令&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/en-us/windows/win32/shell/shell-entry">官方文档，Windows Shell&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/en-us/powershell/">官方文档，PowerShell&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Windows_shell">Wiki，Windows shell&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Windows 有两个 CLI 的 Shell：Command shell 和 PowerShell。每个 Shell 都是一个软件程序，可在我们与操作系统或应用程序之间提供直接通信，从而自动化 IT 操作的环境。&lt;/p>
&lt;p>Windows 有一个 GUI 的 Shell：Windows Shell，这个名词除了表示所有适用于 Windows 的 Shell 以外，还可以单独代表一个 Windows GUI Shell。&lt;/p>
&lt;h1 id="windows-terminal">Windows Terminal&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://learn.microsoft.com/en-us/windows/terminal/">官方文档-windows，终端&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>Docs: Windows Shell 变量</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.terminal-%E4%B8%8E-shell/windows_shell/windows_shell_%E5%8F%98%E9%87%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.terminal-%E4%B8%8E-shell/windows_shell/windows_shell_%E5%8F%98%E9%87%8F/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://learn.microsoft.com/en-us/powershell/scripting/lang-spec/chapter-03?view=powershell-7.3#312-environment-variables">官方文档-PowerShell，脚本-基本概念-环境变量&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://sysin.org/blog/windows-env/">https://sysin.org/blog/windows-env/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://ss64.com/nt/syntax-variables.html">https://ss64.com/nt/syntax-variables.html&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>赋值方式：&lt;/p>
&lt;ul>
&lt;li>在 CMD 中：&lt;/li>
&lt;li>在 PowerShell 中：&lt;code>$env:VAR=VALUE&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>引用方式：&lt;/p>
&lt;ul>
&lt;li>在 CMD 和资源管理器中：&lt;code>%VAR%&lt;/code>&lt;/li>
&lt;li>在 PowerShell 中：&lt;code>$env:VAR&lt;/code>
&lt;ul>
&lt;li>&lt;code>(type env:path) -split ';'&lt;/code> # 切割字符串，将 ; 替换为换行符。方便查看&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>TODO: Windows 中的变量好像不区分大小写？&lt;/p>
&lt;h2 id="常用环境变量">常用环境变量&lt;/h2>
&lt;p>&lt;strong>COMPUTERNAME&lt;/strong> # 主机名&lt;/p>
&lt;p>&lt;strong>USERNAME&lt;/strong> # 用户名&lt;/p>
&lt;p>&lt;strong>USERPROFILE&lt;/strong> # 用户家目录。默认值：&lt;code>C:/Users/${USERNAME}/&lt;/code>&lt;/p>
&lt;p>&lt;strong>TMP&lt;/strong> # 临时目录。默认值：&lt;/p>
&lt;ul>
&lt;li>系统级 &lt;code>C:/WINDOWS/TEMP&lt;/code>&lt;/li>
&lt;li>用户级 &lt;code>%USERPROFILE%/AppData/Local/Temp&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>APPDATA&lt;/strong> # 应用程序的数据保存路径。默认值：&lt;code>%USERPROFILE%/AppData/Roaming/&lt;/code>&lt;/p>
&lt;ul>
&lt;li>这个目录下的数据通常可以随着网络连接同步到其他电脑。比如用户的配置、插件等等。当然，很多时候，应用程序也会将这些可以在网络同步的数据保存到 文档、家目录 等等地方中。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>LOCALAPPDATA&lt;/strong> # 应用程序的本地数据保存路径。默认值：&lt;code>%USERPROFILE%/AppData/Local/&lt;/code>&lt;/p>
&lt;p>&lt;strong>ProgramData&lt;/strong> # 指定程序数据文件夹的路径。与 Program Files 文件夹不同，应用程序可以使用此文件夹为标准用户存储数据，因为它不需要提升的权限。&lt;code>默认值：C:/ProgramData&lt;/code>&lt;/p>
&lt;p>&lt;strong>ProgramFiles&lt;/strong> # &lt;code>默认值：C:/Program Files&lt;/code>&lt;/p>
&lt;p>注意：&lt;/p>
&lt;ul>
&lt;li>Windows 中没有指向 “文档”、“视频” 等等目录的变量，可以在 PowerShell 中使用 &lt;code>[environment]::getfolderpath(&amp;quot;mydocuments&amp;quot;)&lt;/code> 获取。
&lt;ul>
&lt;li>参考：https://stackoverflow.com/questions/3492920/is-there-a-system-defined-environment-variable-for-documents-directory&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>想要获取变量，有几下几种方式：&lt;/p>
&lt;ul>
&lt;li>Get-Item Env:*&lt;/li>
&lt;li>ls env:&lt;/li>
&lt;li>Get-Variable&lt;/li>
&lt;/ul>
&lt;h1 id="变量管理工具">变量管理工具&lt;/h1>
&lt;p>在 PowerShell 中，变量也可以称为一个 Item，因此可以由大多数与 Item 相关的 cmdlet 命令控制。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/new-variable?view=powershell-7.3">New-Variable&lt;/a>: Creates a variable&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/set-variable?view=powershell-7.3">Set-Variable&lt;/a>: Creates or changes the characteristics of one or more variables&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/get-variable?view=powershell-7.3">Get-Variable&lt;/a>: Gets information about one or more variables&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/clear-variable?view=powershell-7.3">Clear-Variable&lt;/a>: Deletes the value of one or more variables&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/remove-variable?view=powershell-7.3">Remove-Variable&lt;/a>: Deletes one or more variables&lt;/li>
&lt;/ul>
&lt;h1 id="最佳实践">最佳实践&lt;/h1>
&lt;h2 id="设置代理">设置代理&lt;/h2>
&lt;p>PowerShell&lt;/p>
&lt;ul>
&lt;li>&lt;code>$env:HTTPS_PROXY=&amp;quot;http://127.0.0.1:7890&amp;quot;&lt;/code>&lt;/li>
&lt;/ul></description></item><item><title>Docs: Windows Shell 命令</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.terminal-%E4%B8%8E-shell/windows_shell/windows_shell_%E5%91%BD%E4%BB%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.terminal-%E4%B8%8E-shell/windows_shell/windows_shell_%E5%91%BD%E4%BB%A4/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/windows-commands">官方文档，Windows Server-命令&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/en-us/powershell/module">官方文档，PowerShell-模块参考&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>所有受支持的 Windows 和 Windows Server 版本都内置了一组 Win32 控制台命令。同时，&lt;a href="https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.Terminal%20%E4%B8%8E%20Shell/Windows_Shell/PowerShell.md">PowerShell&lt;/a> 也内置了一组 cmdlet&lt;/p>
&lt;p>这些命令可以用来管理 Windows，很多命令的详解可以参见 &lt;a href="https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Y.Windows%20%E7%AE%A1%E7%90%86/Windows%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/_index.md">Windows 管理工具&lt;/a> 目录。&lt;/p>
&lt;p>本质上，内置的命令就两类：&lt;/p>
&lt;ul>
&lt;li>Win32 控制台命令。一般在保存 &lt;code>C:/Windows/System32/&lt;/code> 目录中，就像 Unix 的 &lt;code>/usr/bin&lt;/code> 这种目录似的，都是一些可执行文件。&lt;/li>
&lt;li>PowerShell 中的 cmdlet。也就是 PowerShell 的各种模块。这些 cmdlet 虽然不是可见的可执行文件，但是也可以实现类似命令的效果。&lt;/li>
&lt;/ul></description></item><item><title>Docs:</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.terminal-%E4%B8%8E-shell/bash/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.terminal-%E4%B8%8E-shell/bash/</guid><description/></item><item><title>Docs: Shell 编程语言</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.terminal-%E4%B8%8E-shell/shell-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.terminal-%E4%B8%8E-shell/shell-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/</guid><description/></item></channel></rss>