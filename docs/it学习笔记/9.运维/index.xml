<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – 9.运维</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/</link><description>Recent content in 9.运维 on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Ansible</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/ansible/ansible/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/ansible/ansible/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.ansible.com/">官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/ansible/ansible">GitHub 项目&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/index.html">官方文档&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/qu0vPgyNBbRlTtf1pMtq7Q">公众号,程序员面试吧-快速入门 Ansible 自动化运维工具&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.zsythink.net/archives/tag/ansible/">https://www.zsythink.net/archives/tag/ansible/&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy and maintain. Automate everything from code deployment to network configuration to cloud management, in a language that approaches plain English, using SSH, with no agents to install on remote systems
Ansible 是一个非常简单的 IT 自动化系统。它处理配置管理、应用程序部署、云供应、临时任务执行、网络自动化和多节点编排。Ansible 可以轻松得批量进行复杂的更改，例如使用负载均衡器进行零停机滚动更新。而这一过程使用 SSH 实现，无需在远程系统上安装代理程序。
Ansible 的主要目标是简单易用。它还非常注重安全性和可靠性，具有最少的移动部件，使用 OpenSSH 进行传输（使用其他传输和拉模式作为替代），以及一种围绕人类可审计性设计的语言 - 即使是那些不熟悉的人该程序。&lt;/p>
&lt;h2 id="概念">概念&lt;/h2>
&lt;p>&lt;strong>Control node(控制节点)&lt;/strong> # 任何安装了 Ansible 的机器都可以称为控制节点。在控制节点中可以通过调用 &lt;code>ansible&lt;/code> 或 &lt;code>ansible-playbook&lt;/code> 命令来运行 Ansible 相关命令和 Playbooks。
&lt;strong>Managed nodes(受管理节点)&lt;/strong> # 使用 Ansible 管理的 网络设备 或 服务器。受管理节点有时候也称为 &lt;strong>hosts&lt;/strong>。
&lt;strong>Inventory(库存)&lt;/strong> # 库存是一个受管理节点的列表。库存有时候也称为 &lt;strong>hostfile&lt;/strong>。Inventory 还可以用来组织受管理节点，将每个节点进行分组，以便于扩展
&lt;strong>Collections&lt;/strong> # 2.10 版本之后的新概念。Collections 是 Ansible 内容的分发格式，可以包括 Playbooks、Role、Modules、Plugins。新版中，Modules 就被托管于 Collections 中。&lt;/p>
&lt;ul>
&lt;li>随着 Ansible 的发展，越来越多的模块、插件被开发并加入到 Ansible 的大家庭，这时候难免会出现命名上的冲突，或者调用上的重复。所以，从 2.10 版本之后，提出了 Collections 的概念。
&lt;ul>
&lt;li>Collections 最大的一个功能就是将模块分类，比如以前 核心模块 command，现在的全名就叫 ansible.builtin.command，前面的 ansible.builtin 就是 command 的 Collections。这种全名称为 &lt;strong>Full Qualified Class Name(完全限定类名，简称 FQCN)&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Tasks(任务)&lt;/strong> # Ansible 工作的最小单元，Ansible 对受管理节点执行的操作，称为任务。
&lt;strong>Modules(模块)&lt;/strong> # 模块就是 Ansible 用来执行 Tasks 的代码。
&lt;strong>Playbooks(剧本)&lt;/strong> # 一个被保存起来的有序的 Tasks 列表，通过重复运行 Playbooks，可以方便得重复一组任务。Playbooks 中还可以包含变量、模板、条件语句、控制循环，从本质上来说，编写一个 Playbooks，就好像编写一个脚本代码一样。&lt;/p>
&lt;p>Playbooks 是 Ansible 的精髓，如果把 Ansible 当做一门语言，那么就成可以称为 Playbooks 脚本编程语言。&lt;/p>
&lt;h1 id="ansible-的核心组件">Ansible 的核心组件&lt;/h1>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/ot4g6f/1616125280904-828340be-8634-4a3f-a97b-d4600818bd6e.jpeg" alt="">&lt;/p>
&lt;ul>
&lt;li>&lt;strong>ansible core&lt;/strong> #核心组件，ansible 本身&lt;/li>
&lt;li>&lt;strong>host inventory&lt;/strong> # 主机库存，Ansible 所管理的主机清单，一个文本文件&lt;/li>
&lt;li>**Modules **# 模块。ansible 的 modules 是实现 ansible 的核心，
&lt;ul>
&lt;li>&lt;strong>core modules&lt;/strong> # 核心模块
&lt;ul>
&lt;li>ansible 执行任何命令，都是通过 module 来完成；比如 ansible 让被管理机创建一个用户，那么就会去 core modules 中调用一个能实现创建用户功能的模块，来执行这个操作。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>custom modules&lt;/strong> # 自定义模块
&lt;ul>
&lt;li>可以使用任何编程语言来编写模块，只要符合 ansible 的标准即可，可以实现 ansible 本身不具备的功能&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="ansible-关联文件与配置">Ansible 关联文件与配置&lt;/h1>
&lt;p>/etc/ansible/ansible.cfg # ansible 使用时调用的配置文件
/etc/ansible/hosts # Inventory 的默认配置文件。该文件可以定义被管理主机的 IP，port 等，都可以定义在该文件中，具体格式如下&lt;/p>
&lt;ul>
&lt;li>单独 host，任何未分组的主机，需要在定义主机组之前定义各单独的 host，可以是 IP 地址或者主机名&lt;/li>
&lt;li>主机组，定义一个主机组，组名用[]括起来，可以定义多个主机组；当使用 ansible 命令的时候，可以使用组名来对该组内所有主机进行操作&lt;/li>
&lt;li>配置文件说明：详见：[inventory 配置文件详解](✏IT 学习笔记/🛠️9.运维/Ansible/Inventory%20 配置文件详解.md 配置文件详解.md)&lt;/li>
&lt;/ul></description></item><item><title>Docs: Ansible Modules(模块)</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/ansible/ansible-modules%E6%A8%A1%E5%9D%97/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/ansible/ansible-modules%E6%A8%A1%E5%9D%97/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/user_guide/modules.html">官方文档，用户指南-传统目录-使用模块&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/user_guide/modules.html">2.9 版本&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Modules(模块)&lt;/strong> 也被称为 &lt;strong>Task Plugins(任务插件)&lt;/strong> 或 &lt;strong>Library Plugins(插件库)&lt;/strong>，Modules 是可以从 Ansible 的命令行或 Playbook 的任务中使用的代码块。Ansible 通常在受管理节点上执行每个模块以完成任务，并收集返回值。&lt;/p>
&lt;blockquote>
&lt;p>注意：在 Ansible 2.10 及以上的版本中，大多数模块都被托管到 &lt;strong>Collections(集合)&lt;/strong> 中。&lt;/p>
&lt;/blockquote>
&lt;p>我们可以通过命令行使用模块执行任务，比如&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>ansible webservers -m service -a &lt;span style="color:#e6db74">&amp;#34;name=httpd state=started&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ansible webservers -m ping
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ansible webservers -m command -a &lt;span style="color:#e6db74">&amp;#34;/sbin/reboot -t now&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>也可以在 Playbooks 中使用模块执行任务，比如&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">restart webserver&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">service&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">httpd&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">state&lt;/span>: &lt;span style="color:#ae81ff">restarted&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>等效于&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>ansible webservers -m service -a &lt;span style="color:#e6db74">&amp;#34;name=httpd state=started&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>每个模块都可以接受参数，以空格分割的 &lt;code>KEY=VALUE&lt;/code> 格式。&lt;/p>
&lt;blockquote>
&lt;p>注意：在命令行中使用模块与在 Playbooks 中使用模块时，可以传递的参数不太一样，比如 command 或 shell 模块，只需要传递需要运行的命令这个参数即可，但是在 Playbooks 中使用这两个模块，还可以传递其他参数。&lt;/p>
&lt;/blockquote>
&lt;p>所有模块执行完成后，都会有返回一个 JSON 格式的数据，这意味着可以使用任何编程语言编写模块。模块应该是幂等的，如果检测到当前状态与所需要的最终状态匹配，则应该避免再进行任何更改。&lt;/p>
&lt;p>下面我们拿一个最简单的模块举例，ansible.builtin.command 模块，当我们使用 command 模块时，可以为其传递参数，在其执行完任务之后，还会有返回值。&lt;/p>
&lt;h2 id="简单示例">简单示例&lt;/h2>
&lt;p>假如现在有这么一个 Playbooks&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">command&lt;/span>: &lt;span style="color:#ae81ff">whoami&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">register&lt;/span>: &lt;span style="color:#ae81ff">info&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">debug&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">debug&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">msg&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;{{info}}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个 Playbooks 的意思就是在受管理节点上执行 &lt;code>whoami&lt;/code> 命令，并将返回值保存到 info 变量中，通过 debug 模块，将 info 变量中的内容输出出来，效果如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>[&lt;span style="color:#960050;background-color:#1e0010">lichenhao@hw-cloud-xngy-jump-server-linux&lt;/span>&lt;span style="color:#ae81ff">-2&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">~/projects/DesistDaydream/ehualu/ansible/playbook&lt;/span>]&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">ansible-playbook&lt;/span> &lt;span style="color:#ae81ff">90&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">-test.yaml&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">PLAY&lt;/span> [&lt;span style="color:#960050;background-color:#1e0010">test&lt;/span>] &lt;span style="color:#960050;background-color:#1e0010">*******************************************************************************************************************************************************************&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">TASK&lt;/span> [&lt;span style="color:#ae81ff">90&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">-test&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">test&lt;/span>] &lt;span style="color:#960050;background-color:#1e0010">*********************************************************************************************************************************************************&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">changed:&lt;/span> [&lt;span style="color:#960050;background-color:#1e0010">hw-cloud-xngy-jump-server-linux&lt;/span>&lt;span style="color:#ae81ff">-2&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">TASK&lt;/span> [&lt;span style="color:#ae81ff">90&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">-test&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">debug&lt;/span>] &lt;span style="color:#960050;background-color:#1e0010">********************************************************************************************************************************************************&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">ok:&lt;/span> [&lt;span style="color:#960050;background-color:#1e0010">hw-cloud-xngy-jump-server-linux&lt;/span>&lt;span style="color:#ae81ff">-2&lt;/span>] &lt;span style="color:#960050;background-color:#1e0010">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;info&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;ansible_facts&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;discovered_interpreter_python&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/usr/bin/python3&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;changed&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;cmd&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;whoami&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;delta&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;0:00:00.002447&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;end&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2021-10-09 23:05:10.491190&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;failed&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;rc&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;start&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2021-10-09 23:05:10.488743&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;stderr&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;stderr_lines&amp;#34;&lt;/span>: [],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;stdout&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;root&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;stdout_lines&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;root&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">PLAY&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">RECAP&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">********************************************************************************************************************************************************************&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">hw-cloud-xngy-jump-server-linux&lt;/span>&lt;span style="color:#ae81ff">-2&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">ok=&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">changed=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">unreachable=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">failed=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">skipped=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">rescued=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">ignored=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们对比&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/command_module.html#return-values">官方文档中 command 模块的返回值&lt;/a>，可以看到，与文档中的返回值保持一致。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/shqrrv/1633792369531-e531b4d1-5c2b-427c-ade8-6207d5d6020b.png" alt="image.png">&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>所以，这也是为什么将 Moduels 称为代码的原因，&lt;strong>所谓的 Modules，本质上就是代码写出来的程序，就像 Functions&lt;/strong>，具有形参，可以接受实参，执行完成后，还会有返回值。Ansible 通过模块执行完一个任务之后，就会处理这些返回值，将其 或保存、或展示、或丢弃 等等。同时，在 Playbooks 中，还可以通过判断语句，根据返回值的内容，决定下一个任务的运行模式。&lt;/p>
&lt;p>我们可以通过 &lt;code>ansible-doc -l&lt;/code> 命令查看所有可用的模块，或者从&lt;a href="https://docs.ansible.com/ansible/latest/collections/index.html#list-of-collections">官方文档-Collections 文档&lt;/a>中查看所有模块
还可以使用&lt;code> ansible-doc MODULE&lt;/code> 命令查看指定模块的文档&lt;/p>
&lt;h1 id="模块分类">模块分类&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/modules_by_category.html">官方文档 2.9，用户指南-使用模块-模块索引&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/index_module.html">官方文档 2.10+，所有模块和插件的索引-所有模块的索引&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>在 2.10 版本之前，模块的分类非常清晰；2.10 版本之后，由于模块被合并到集合中，所以很多已经分类的模块被合并到 &lt;a href="https://docs.ansible.com/ansible/latest/collections/index_module.html#ansible-builtin">builtin(内置) 模块&lt;/a>这个类别中，在这里则不再进行细致划分，非常乱。。。。&lt;/p>
&lt;p>模块的保存位置（ansible python module location）也产生了变化：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># ansible --version&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ansible 2.9.6
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> config file &lt;span style="color:#f92672">=&lt;/span> /etc/ansible/ansible.cfg
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> configured module search path &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#e6db74">&amp;#39;/home/lichenhao/.ansible/plugins/modules&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;/usr/share/ansible/plugins/modules&amp;#39;&lt;/span>&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ansible python module location &lt;span style="color:#f92672">=&lt;/span> /usr/lib/python3/dist-packages/ansible
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> executable location &lt;span style="color:#f92672">=&lt;/span> /usr/bin/ansible
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> python version &lt;span style="color:#f92672">=&lt;/span> 3.8.10 &lt;span style="color:#f92672">(&lt;/span>default, Jun &lt;span style="color:#ae81ff">22&lt;/span> 2022, 20:18:18&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">[&lt;/span>GCC 9.4.0&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/shqrrv/1669781692961-2dda8a1f-3eec-4687-beb3-fa3d141c1b5e.png" alt="image.png">&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># ansible --version&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ansible &lt;span style="color:#f92672">[&lt;/span>core 2.13.6&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> config file &lt;span style="color:#f92672">=&lt;/span> /etc/ansible/ansible.cfg
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> configured module search path &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#e6db74">&amp;#39;/root/.ansible/plugins/modules&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;/usr/share/ansible/plugins/modules&amp;#39;&lt;/span>&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ansible python module location &lt;span style="color:#f92672">=&lt;/span> /root/.local/lib/python3.8/site-packages/ansible
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ansible collection location &lt;span style="color:#f92672">=&lt;/span> /root/.ansible/collections:/usr/share/ansible/collections
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> executable location &lt;span style="color:#f92672">=&lt;/span> /usr/bin/ansible
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> python version &lt;span style="color:#f92672">=&lt;/span> 3.8.10 &lt;span style="color:#f92672">(&lt;/span>default, Jun &lt;span style="color:#ae81ff">22&lt;/span> 2022, 20:18:18&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">[&lt;/span>GCC 9.4.0&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> jinja version &lt;span style="color:#f92672">=&lt;/span> 3.1.2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> libyaml &lt;span style="color:#f92672">=&lt;/span> True
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/shqrrv/1669781684010-2cc9f6a7-cb1e-4e93-bf81-e41ef417c23c.png" alt="image.png">&lt;/p></description></item><item><title>Docs: Ansible UI</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/ansible/ansible-ui/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/ansible/ansible-ui/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/ansible/awx">Github 项目,ansible/awx&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>Docs: Ansible Variables(变量)</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/ansible/ansible-variables%E5%8F%98%E9%87%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/ansible/ansible-variables%E5%8F%98%E9%87%8F/</guid><description>
&lt;h1 id="group_vars-概述">group_vars 概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/user_guide/playbooks_variables.html">官方文档,传统目录-使用变量&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/user_guide/playbooks_variables.html#variable-precedence-where-should-i-put-a-variable">官方文档,传统目录-使用变量-变量优先级&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>虽然通过自动化可以使事情更简单、更可重复，但是并非所有系统都完全相同。在某些情况下，观察到一个系统的行为或状态可能会影响到配置其他系统的方式。比如，我们可能需要找出一个系统的 IP 地址，并将这个 IP 地址作为另一个系统中配置的值。&lt;/p>
&lt;p>基于上述目的，Ansible 可以通过 &lt;strong>Variables(变量)&lt;/strong> 来管理各个系统之间的差异。&lt;/p>
&lt;p>Ansible 的变量就跟编程语言中的变量概念一样，同样可以定义、引用。我们使用标准的 YAML 语法创建变量，包括列表和字典；可以这么说，YAML 中每个字段的 key 就是变量名，value 就是变量的值。我们可以在 Playbooks、Inventory、甚至命令行中定义与引用变量。我们还可以在 Playbooks 运行期间，将任务的返回值注册为变量，以创建一个新的变量。&lt;/p>
&lt;p>创建变量后，我们可以在 模块的参数、模板、控制结构 中使用这些变量。在 &lt;a href="https://github.com/ansible/ansible-examples">GitHub 中有一个 Ansible 示例的目录&lt;/a>，可以看到很多 Ansible 使用变量的例子&lt;/p>
&lt;p>下面的示例就是在命令行中使用 debug 模块，查看了一下 inventory_hostname 这个默认变量的值&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>lichenhao@hw-cloud-xngy-jump-server-linux-2 ~/projects/DesistDaydream/ansible/playbooks&lt;span style="color:#f92672">]&lt;/span>$ ansible -i ../inventory/ all -m debug -a &lt;span style="color:#e6db74">&amp;#39;msg={{inventory_hostname}}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hw-cloud-xngy-jump-server-linux-2 | SUCCESS &lt;span style="color:#f92672">=&lt;/span>&amp;gt; &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;msg&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;hw-cloud-xngy-jump-server-linux-2&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="变量的优先级">变量的优先级&lt;/h2>
&lt;p>变量可以是自带的，就是由人们自行定义的，可以在多个地方定义变量，(e.g.在某些文件里定义变量、通过命令行传递变量等等。由于 ansible 所要处理的的文件有很多，不同类型的文件下定义的变量的优先级也不同)&lt;/p>
&lt;p>下面的优先级列表由低到高，最下面的变量优先级最高&lt;/p>
&lt;ul>
&lt;li>command line values (eg “-u user”)&lt;/li>
&lt;li>&lt;strong>role defaults&lt;/strong> # 定义在 &lt;code>${ROLE}/defaults/main.yaml&lt;/code> 中的默认变量&lt;/li>
&lt;li>&lt;strong>inventory file or script group vars&lt;/strong> # Inventory 文件中的组变量，即.&lt;code>[XXX:vars]&lt;/code>&lt;/li>
&lt;li>&lt;strong>inventory group_vars/all&lt;/strong> #&lt;/li>
&lt;li>&lt;strong>playbook group_vars/all&lt;/strong> #&lt;/li>
&lt;li>&lt;strong>inventory group_vars/*&lt;/strong> # 存放 Inventory 文件的目录下的 &lt;code>group_vars/&lt;/code> 目录&lt;/li>
&lt;li>&lt;strong>playbook group_vars/*&lt;/strong> # Playbook 根目录下的 &lt;code>group_vars/&lt;/code> 目录&lt;/li>
&lt;li>&lt;strong>inventory file or script host vars&lt;/strong> #&lt;/li>
&lt;li>&lt;strong>inventory host_vars/*&lt;/strong> #&lt;/li>
&lt;li>&lt;strong>playbook host_vars/*&lt;/strong> #&lt;/li>
&lt;li>&lt;strong>host facts / cached set_facts&lt;/strong> #&lt;/li>
&lt;li>play vars #&lt;/li>
&lt;li>play vars_prompt #&lt;/li>
&lt;li>play vars_files #&lt;/li>
&lt;li>&lt;strong>role vars&lt;/strong> # 定义在 &lt;code>${ROLE}/vars/main.yml&lt;/code> 中的变量&lt;/li>
&lt;li>block vars (only for tasks in block) #&lt;/li>
&lt;li>task vars (only for the task) #&lt;/li>
&lt;li>include_vars #&lt;/li>
&lt;li>set_facts / registered vars #&lt;/li>
&lt;li>role (and include_role) params #&lt;/li>
&lt;li>include params #&lt;/li>
&lt;li>extra vars (always win precedence) # 通过 ansible-playbook -e 指定的变量&lt;/li>
&lt;/ul>
&lt;p>Note：可以说 ansible playbook 中写的所有内容都是变量。都是可以引用的，只不过引用的方式不同。&lt;/p>
&lt;h1 id="变量的定义与引用">变量的定义与引用&lt;/h1>
&lt;p>变量名应为字母、数字、下划线。并且始终应该以字母开头。可以在 Inventory、Playbooks、命令行 中定义变量。Ansible 会加载它找到的每个可能的变量，然后根据&lt;a href="#ZixgX">变量优先级规则&lt;/a>选择要应用的变量&lt;/p>
&lt;p>可以通过 -e 选项直接定义一个变量，比如 &lt;code>ansible -e &amp;quot;test_var=hello_world&amp;quot;&lt;/code>，这里定义了 test_var 变量，变量的值为 hello_world。&lt;/p>
&lt;p>Ansible 使用 Jinja2 语法引用变量。Jinjia2 使用 &lt;code>{{ VarName }}&lt;/code> 来引用变量，比如&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>lichenhao@hw-cloud-xngy-jump-server-linux-2 ~/projects/DesistDaydream/ansible/playbooks&lt;span style="color:#f92672">]&lt;/span>$ ansible -i ../inventory/ all --extra-vars &lt;span style="color:#e6db74">&amp;#34;test_var=hello_world&amp;#34;&lt;/span> -m debug -a &lt;span style="color:#e6db74">&amp;#39;msg={{test_var}}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hw-cloud-xngy-jump-server-linux-2 | SUCCESS &lt;span style="color:#f92672">=&lt;/span>&amp;gt; &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;msg&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;hello_world&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面的例子中，我们定义了一个名为 test_var 的变量，变量的值为 hello_world，并使用 debug 模块，引用 test_var 变量。&lt;/p>
&lt;p>这只是最简单的变量的使用方式，命令行中不适合设置复杂格式的变量，更为复杂的类型的变量，通常在 YAML 或 JSON 格式的文件中定义，并直接引用文件即可定义变量(比如使用 &lt;code>--extra-vars &amp;quot;@./test_var.yaml&amp;quot;&lt;/code> 选项，即可通过 test_var.yaml 文件定义变量)&lt;/p>
&lt;h2 id="变量的类型">变量的类型&lt;/h2>
&lt;h3 id="list列表变量">List(列表)变量&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>lichenhao@hw-cloud-xngy-jump-server-linux-2 ~/projects/DesistDaydream/ansible/playbooks&lt;span style="color:#f92672">]&lt;/span>$ cat test_var.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>region:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- northeast
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- southeast
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- midwest
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>lichenhao@hw-cloud-xngy-jump-server-linux-2 ~/projects/DesistDaydream/ansible/playbooks&lt;span style="color:#f92672">]&lt;/span>$ ansible -i ../inventory/ all --extra-vars &lt;span style="color:#e6db74">&amp;#34;@./test_var.yaml&amp;#34;&lt;/span> -m debug -a &lt;span style="color:#e6db74">&amp;#39;msg={{region[1]}}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hw-cloud-xngy-jump-server-linux-2 | SUCCESS &lt;span style="color:#f92672">=&lt;/span>&amp;gt; &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;msg&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;southeast&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="dictionary字典变量">Dictionary(字典)变量&lt;/h3>
&lt;p>可以通过两种方式引用字典变量&lt;/p>
&lt;ul>
&lt;li>使用方 &lt;code>[]&lt;/code> 进行引用
&lt;ul>
&lt;li>foo[&amp;lsquo;field1&amp;rsquo;]&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>使用 &lt;code>.&lt;/code> 进行引用(不推荐使用该方式引用变量，可能会与 Python 语法产生冲突)
&lt;ul>
&lt;li>foo.field1&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>lichenhao@hw-cloud-xngy-jump-server-linux-2 ~/projects/DesistDaydream/ansible/playbooks&lt;span style="color:#f92672">]&lt;/span>$ cat test_var.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>foo:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> field1: one
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> field2: two
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>lichenhao@hw-cloud-xngy-jump-server-linux-2 ~/projects/DesistDaydream/ansible/playbooks&lt;span style="color:#f92672">]&lt;/span>$ ansible -i ../inventory/ all --extra-vars &lt;span style="color:#e6db74">&amp;#34;@./test_var.yaml&amp;#34;&lt;/span> -m debug -a msg&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{{foo[&amp;#39;field1&amp;#39;]}}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hw-cloud-xngy-jump-server-linux-2 | SUCCESS &lt;span style="color:#f92672">=&lt;/span>&amp;gt; &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;msg&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;one&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>lichenhao@hw-cloud-xngy-jump-server-linux-2 ~/projects/DesistDaydream/ansible/playbooks&lt;span style="color:#f92672">]&lt;/span>$ ansible -i ../inventory/ all --extra-vars &lt;span style="color:#e6db74">&amp;#34;@./test_var.yaml&amp;#34;&lt;/span> -m debug -a msg&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{{foo.field1}}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hw-cloud-xngy-jump-server-linux-2 | SUCCESS &lt;span style="color:#f92672">=&lt;/span>&amp;gt; &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;msg&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;one&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note：如果使用 &lt;code>.&lt;/code> 引用变量可能会引起问题，因为会与 python 字典的属性和方法冲突。所以，尽量使用 &lt;code>[]&lt;/code> 来引用变量&lt;/p>
&lt;h3 id="registering注册变量">Registering(注册)变量&lt;/h3>
&lt;p>Registering 类型的变量适用于 Playbooks 中，通过 &lt;code>register&lt;/code> 关键字将任务中的返回值注册为指定的变量，然后可以在 Playbooks 的后续任务中，引用注册的变量
比如&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>[&lt;span style="color:#ae81ff">lichenhao@hw-cloud-xngy-jump-server-linux-2 ~/projects/DesistDaydream/ansible/playbooks]$ cat roles/variables/tasks/main.yaml&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">command&lt;/span>: &lt;span style="color:#ae81ff">whoami&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">register&lt;/span>: &lt;span style="color:#ae81ff">info&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">debug&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">debug&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">msg&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;{{info}}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[&lt;span style="color:#ae81ff">lichenhao@hw-cloud-xngy-jump-server-linux-2 ~/projects/DesistDaydream/ansible/playbooks]$ ansible-playbook -i ../inventory/ variables.yaml&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">PLAY [test] **********************************************************************************************************************************************************************************************************************************************************************************************************************************************************&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">TASK [variables &lt;/span>: &lt;span style="color:#ae81ff">test] **********************************************************************************************************************************************************************************************************************************************************************************************************************************************&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">changed&lt;/span>: [&lt;span style="color:#ae81ff">hw-cloud-xngy-jump-server-linux-2]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">TASK [variables &lt;/span>: &lt;span style="color:#ae81ff">debug] *********************************************************************************************************************************************************************************************************************************************************************************************************************************************&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">ok&lt;/span>: [&lt;span style="color:#ae81ff">hw-cloud-xngy-jump-server-linux-2] =&amp;gt; {&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;msg&amp;#34;: &lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;ansible_facts&amp;#34;: &lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;discovered_interpreter_python&amp;#34;: &lt;/span>&lt;span style="color:#e6db74">&amp;#34;/usr/bin/python3&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;changed&amp;#34;: &lt;/span>&lt;span style="color:#66d9ef">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;cmd&amp;#34;: &lt;/span>[
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;whoami&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;delta&amp;#34;: &lt;/span>&lt;span style="color:#e6db74">&amp;#34;0:00:00.002390&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;end&amp;#34;: &lt;/span>&lt;span style="color:#e6db74">&amp;#34;2021-10-11 22:57:18.455061&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;failed&amp;#34;: &lt;/span>&lt;span style="color:#66d9ef">false&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;rc&amp;#34;: &lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;start&amp;#34;: &lt;/span>&lt;span style="color:#e6db74">&amp;#34;2021-10-11 22:57:18.452671&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;stderr&amp;#34;: &lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;stderr_lines&amp;#34;: &lt;/span>[],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;stdout&amp;#34;: &lt;/span>&lt;span style="color:#e6db74">&amp;#34;root&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;stdout_lines&amp;#34;: &lt;/span>[
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;root&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">PLAY RECAP ***********************************************************************************************************************************************************************************************************************************************************************************************************************************************************&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">hw-cloud-xngy-jump-server-linux-2 &lt;/span>: &lt;span style="color:#ae81ff">ok=2 changed=1 unreachable=0 failed=0 skipped=0 rescued=0 ignored=0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 test 任务中，我们将 command 模块执行的任务返回值，注册到 info 变量中；然后再 debug 任务中，引用了 info 变量。&lt;/p>
&lt;p>有关在后续任务的条件中使用注册变量的更多示例，请参阅&lt;a href="https://docs.ansible.com/ansible/latest/user_guide/playbooks_conditionals.html#playbooks-conditionals">条件&lt;/a>。注册变量可以是简单变量、列表变量、字典变量或复杂的嵌套数据结构。每个模块的文档包括 RETURN 描述该模块返回值的部分。要查看特定任务的值，请使用-v.
注册的变量存储在内存中。您不能缓存已注册的变量以供将来使用。注册的变量仅在当前 playbook 运行的其余部分在主机上有效。&lt;/p>
&lt;p>注册变量是主机级变量。当您使用循环在任务中注册变量时，注册的变量包含循环中每个项目的值。循环期间放置在变量中的数据结构将包含一个 results 属性，即来自模块的所有响应的列表。有关其工作原理的更深入示例，请参阅有关将寄存器与循环一起使用的&lt;a href="https://docs.ansible.com/ansible/latest/user_guide/playbooks_loops.html#playbooks-loops">循环&lt;/a>部分。&lt;/p>
&lt;blockquote>
&lt;p>注意：如果任务失败或被跳过，Ansible 仍会注册一个处于失败或跳过状态的变量，除非根据标签跳过该任务。有关添加和使用标签的信息，请参阅&lt;a href="https://docs.ansible.com/ansible/latest/user_guide/playbooks_tags.html#tags">标签&lt;/a>。&lt;/p>
&lt;/blockquote>
&lt;h3 id="nested嵌套变量">Nested(嵌套)变量&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>lichenhao@hw-cloud-xngy-jump-server-linux-2 ~/projects/DesistDaydream/ansible/playbooks&lt;span style="color:#f92672">]&lt;/span>$ cat test_var.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>foo:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- field1:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: one
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- field2:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: two
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>lichenhao@hw-cloud-xngy-jump-server-linux-2 ~/projects/DesistDaydream/ansible/playbooks&lt;span style="color:#f92672">]&lt;/span>$ ansible -i ../inventory/ all --extra-vars &lt;span style="color:#e6db74">&amp;#34;@./test_var.yaml&amp;#34;&lt;/span> -m debug -a msg&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{{foo[0].field1.name}}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hw-cloud-xngy-jump-server-linux-2 | SUCCESS &lt;span style="color:#f92672">=&lt;/span>&amp;gt; &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;msg&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;one&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="变量的定义方式">变量的定义方式&lt;/h2>
&lt;h3 id="在命令行中定义变量">在命令行中定义变量&lt;/h3>
&lt;p>在使用 &lt;code>ansible&lt;/code> 或 &lt;code>ansible-playbook&lt;/code> 命令时，可以通过 &amp;ndash;extra-vars 或 -e 选项，以在命令行中定义变量&lt;/p>
&lt;p>可以通过多种方式在命令行定义变量&lt;/p>
&lt;ul>
&lt;li>&lt;strong>KEY=VALUE&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>lichenhao@hw-cloud-xngy-jump-server-linux-2 ~/projects/DesistDaydream/ansible/playbooks&lt;span style="color:#f92672">]&lt;/span>$ ansible -i ../inventory/ all --extra-vars &lt;span style="color:#e6db74">&amp;#34;test_var=hello_world&amp;#34;&lt;/span> -m debug -a &lt;span style="color:#e6db74">&amp;#39;msg={{test_var}}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hw-cloud-xngy-jump-server-linux-2 | SUCCESS &lt;span style="color:#f92672">=&lt;/span>&amp;gt; &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;msg&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;hello_world&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;strong>JSON 字符串&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>lichenhao@hw-cloud-xngy-jump-server-linux-2 ~/projects/DesistDaydream/ansible/playbooks&lt;span style="color:#f92672">]&lt;/span>$ ansible -i ../inventory/ all --extra-vars &lt;span style="color:#e6db74">&amp;#39;{&amp;#34;test_var&amp;#34;:&amp;#34;hello world&amp;#34;}&amp;#39;&lt;/span> -m debug -a &lt;span style="color:#e6db74">&amp;#39;msg={{test_var}}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hw-cloud-xngy-jump-server-linux-2 | SUCCESS &lt;span style="color:#f92672">=&lt;/span>&amp;gt; &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;msg&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;hello world&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;strong>来自 JSON 或 YAML 文件&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>lichenhao@hw-cloud-xngy-jump-server-linux-2 ~/projects/DesistDaydream/ansible/playbooks&lt;span style="color:#f92672">]&lt;/span>$ cat test_var.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>test_var: &lt;span style="color:#e6db74">&amp;#39;hello world&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>lichenhao@hw-cloud-xngy-jump-server-linux-2 ~/projects/DesistDaydream/ansible/playbooks&lt;span style="color:#f92672">]&lt;/span>$ ansible -i ../inventory/ all --extra-vars &lt;span style="color:#e6db74">&amp;#34;@./test_var.yaml&amp;#34;&lt;/span> -m debug -a &lt;span style="color:#e6db74">&amp;#39;msg={{test_var}}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hw-cloud-xngy-jump-server-linux-2 | SUCCESS &lt;span style="color:#f92672">=&lt;/span>&amp;gt; &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;msg&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;hello world&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="在-inventory-中定义变量">在 Inventory 中定义变量&lt;/h3>
&lt;p>详见 [Inventory 配置文件详解](✏IT 学习笔记/🛠️9.运维/Ansible/Inventory%20 配置文件详解.md 配置文件详解.md)&lt;/p>
&lt;h3 id="在-playbooks-中定义变量">在 Playbooks 中定义变量&lt;/h3>
&lt;p>基础的定义方式是在一个 play 中使用 vars 关键字定义变量，示例如下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">host&lt;/span>: &lt;span style="color:#ae81ff">webservers&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">vars&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">http_port&lt;/span>: &lt;span style="color:#ae81ff">80&lt;/span> &lt;span style="color:#75715e"># 定义一个名为http_port的变量，值为80&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">tasks&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">debug&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note: vars 关键字可以用在 host 环境中，也可以用在 tasks 环境中，用在 tasks 环境时，则变量仅对当前任务生效&lt;/p>
&lt;p>下面是一个在角色中定义字典类型变量的样例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>[&lt;span style="color:#ae81ff">root@cobbler playbook]# cat roles/test/defaults/main.yml&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">docker&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">version&lt;/span>: &lt;span style="color:#ae81ff">18.06.2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">dataDir&lt;/span>: &lt;span style="color:#ae81ff">/var/lib/docker&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">registryMirrors&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">https://ac1rmo5p.mirror.aliyuncs.com&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">execOpts&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e6db74">&amp;#39;native.cgroupdriver=systemd&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">insecureRegistries&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">100.64.2.52&lt;/span>:&lt;span style="color:#ae81ff">9999&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">100.64.1.31&lt;/span>:&lt;span style="color:#ae81ff">9999&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="变量的引用方式">变量的引用方式&lt;/h2>
&lt;p>特殊情况不用加 &lt;code>{{ }}&lt;/code> 而可以直接引用，比如在某些控制结构(比如 when)的语句中。&lt;/p>
&lt;h1 id="registering-variables注册变量">Registering Variables(注册变量)&lt;/h1>
&lt;p>通常在剧本中，将给定命令的结果存储在变量中并在以后访问它可能很有用。&lt;/p>
&lt;p>注意：&lt;/p>
&lt;ul>
&lt;li>注册变量只适用于执行本注册任务的 host。假如在 host_A 注册了 Var_A，那么 host_B 想要引用 Var_A，则必须使用 &lt;code>hostvars&lt;/code> 变量。&lt;/li>
&lt;/ul>
&lt;p>应用示例：&lt;/p>
&lt;pre>&lt;code>- hosts: all
tasks:
- name: list contents of directory
command: ls /root/
register: contents #将该任务执行后的ansible报告的信息保存在名为contents变量中
- debug:
msg: &amp;quot;{{contents}}&amp;quot; #输出contents变量
- debug：
msg: &amp;quot;{{contents.stdout}}&amp;quot; #输出contents下的stdout变量的值，值为anaconda-ks.cfg\nScripts
&lt;/code>&lt;/pre>
&lt;p>比如下面，就是是 contents 变量的值。这其中包括要执行的命令、命令执行的日期、执行结果，等等 ansible 执行该 playbook 后的信息。&lt;/p>
&lt;pre>&lt;code>TASK [debug] *************************************************************
ok: [10.10.100.200] =&amp;gt; {
&amp;quot;msg&amp;quot;: {
&amp;quot;changed&amp;quot;: true,
&amp;quot;cmd&amp;quot;: [
&amp;quot;ls&amp;quot;,
&amp;quot;/root/&amp;quot;
],
&amp;quot;delta&amp;quot;: &amp;quot;0:00:00.004220&amp;quot;,
&amp;quot;end&amp;quot;: &amp;quot;2019-11-11 15:02:17.326659&amp;quot;,
&amp;quot;failed&amp;quot;: false,
&amp;quot;rc&amp;quot;: 0,
&amp;quot;start&amp;quot;: &amp;quot;2019-11-11 15:02:17.322439&amp;quot;,
&amp;quot;stderr&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;stderr_lines&amp;quot;: [],
&amp;quot;stdout&amp;quot;: &amp;quot;anaconda-ks.cfg\nScripts&amp;quot;,
&amp;quot;stdout_lines&amp;quot;: [
&amp;quot;anaconda-ks.cfg&amp;quot;,
&amp;quot;Scripts&amp;quot;
]
}
}
&lt;/code>&lt;/pre>
&lt;p>还可以将 register 与循环配合使用，通过命令获取的多个值注册到变量中，然后使用循环逐一读取变量的值&lt;/p>
&lt;pre>&lt;code>- name: retrieve the list of home directories
command: ls /home
register: home_dirs
- name: add home dirs to the backup spooler
file:
path: /mnt/bkspool/{{ item }}
src: /home/{{ item }}
state: link
loop: &amp;quot;{{ home_dirs.stdout_lines }}&amp;quot; # loop也可以使用这样的方式来获取每一行的值: &amp;quot;{{ home_dirs.stdout.split() }}&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>这个例子就是查看/mnt/bkspool/目录下的内容，然后将其中所有文件注意拷贝到/home/目录下&lt;/p>
&lt;h1 id="special-variables特殊的变量">Special Variables(特殊的变量)&lt;/h1>
&lt;blockquote>
&lt;p>官方文档：&lt;a href="https://docs.ansible.com/ansible/latest/reference_appendices/special_variables.html">https://docs.ansible.com/ansible/latest/reference_appendices/special_variables.html&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>无论是否定义任何变量，都可以使用 Ansible 提供的特殊变量访问有关主机的信息，一共有如下几种变量类型：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>magic variables(魔法变量)&lt;/strong>&lt;/li>
&lt;li>&lt;strong>facts variables(事实变量)&lt;/strong>&lt;/li>
&lt;li>&lt;strong>connection variables(连接变量)&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h2 id="magic-variables">Magic Variables&lt;/h2>
&lt;blockquote>
&lt;p>官方文档：&lt;a href="https://docs.ansible.com/ansible/latest/reference_appendices/special_variables.html#magic">https://docs.ansible.com/ansible/latest/reference_appendices/special_variables.html#magic&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>魔术变量不能随意覆盖并且也没法覆盖，这是一种 Ansbie 提供的&amp;quot;内部变量&amp;quot; ，可以反映 Ansible 所管理主机的最简单的基本状态，比如该主机的主机名、在 inventory 文件中的定义都会转换成这里面变量的值、等等。&lt;/p>
&lt;p>可以通过目标主机获取到 ansible 管理的所有主机的信息。最常用的魔术变量有以下几个&lt;/p>
&lt;ul>
&lt;li>&lt;strong>hostvars&lt;/strong> # 每个目标主机下面都包含类似下图的信息。其中是每个组所包含的 hosts
&lt;ul>
&lt;li>注意：通过 hostvars 变量，我们还可以获取到其他主机在执行任务是注册的变量，比如在 kubernetes 集群的 master-1 上生成了加入集群的指令，并注册为变量 join_cmd，正常是无法在其他主机直接使用的。这时候就要用到 hostvars 变量了。&lt;/li>
&lt;li>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/nsvz9y/1616125069735-9fbbff13-76a7-455a-9a5b-291800f65cc1.jpeg" alt="">&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>ansible_play_hosts&lt;/strong> # 一个列表，是当前 play 中活动的主机列表，受序号限制，无法访问的主机不会被当做“活动”主机。
&lt;ul>
&lt;li>该变量可以用于 for 循环，对列表中的主机进行遍历，逐一操作。&lt;/li>
&lt;li>等同于 ansible_play_batch&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>ansible_play_name&lt;/strong> # 当前执行 paly 的名称。i.e.playbook 中 hosts 这个键的值，也就是当前的主机组名称&lt;/li>
&lt;li>&lt;strong>groups&lt;/strong> # 默认值为 inbentory 下所有组及其组内的 host&lt;/li>
&lt;li>&lt;strong>group_names&lt;/strong> # 默认值为当前主机所属组的列表。&lt;/li>
&lt;li>&lt;strong>inventory_hostname&lt;/strong> # 默认值为 inventory 文件中配置的主机名称。即.ansible 的 hosts 文件的第一列内容&lt;/li>
&lt;li>**inventory_dir **# 默认值为 ansible 保存 hosts 文件的目录的绝对路径。默认路径为/etc/ansible/&lt;/li>
&lt;li>**play_hosts **# 默认值为当前 play 范围中可用的一组主机名&lt;/li>
&lt;li>**role_path **# 默认值为当前 role 的目录的绝对路径&lt;/li>
&lt;/ul>
&lt;p>应用实例：
&lt;strong>groups[&amp;quot;{{ansible_play_name}}&amp;quot;]&lt;/strong> # 获取当前 play 下的主机列表&lt;/p>
&lt;h2 id="fact-variables">Fact Variables&lt;/h2>
&lt;p>在 ansible 执行任务时，会默认执行名为 Gathering Facts 的任务，以获取目标主机的一些系统信息，如图所示。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/nsvz9y/1616125069706-0662e031-1bfe-478b-bb7d-09cb313f4fe0.jpeg" alt="">
这些信息以变量的形式体现，每个变量都有其对应的值。可以通过命令 ansible all -m setup 获取这些信息。如下所示&lt;/p>
&lt;p>ansible_facts 字段下面的所有字段才是可以直接引用的变量&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>[&lt;span style="color:#960050;background-color:#1e0010">root@lichenhao&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">~&lt;/span>]&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">ansible&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">all&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">-m&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">setup&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">10.10&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">.&lt;/span>&lt;span style="color:#ae81ff">100.249&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">|&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">SUCCESS&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;ansible_facts&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;ansible_all_ipv4_addresses&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;10.10.100.249&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;ansible_all_ipv6_addresses&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;fe80::47e1:ea44:cfc8:cad0&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;ansible_devices&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;fd0&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;holders&amp;#34;&lt;/span>: [],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;host&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;model&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">null&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;partitions&amp;#34;&lt;/span>: {},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;removable&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;rotational&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;scheduler_mode&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;deadline&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;sectors&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;sectorsize&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;512&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;size&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;0.00 Bytes&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;support_discard&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;vendor&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">null&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;sda&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;holders&amp;#34;&lt;/span>: [],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;host&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;SCSI storage controller: LSI Logic / Symbios Logic 53c1030 PCI-X Fusion-MPT Dual Ultra320 SCSI (rev 01)&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;model&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;VMware Virtual S&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;partitions&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;sda1&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;sectors&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;39843840&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;sectorsize&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">512&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;size&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;19.00 GB&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;start&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2048&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;removable&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;rotational&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;scheduler_mode&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;deadline&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;sectors&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;41943040&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;sectorsize&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;512&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;size&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;20.00 GB&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;support_discard&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;vendor&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;VMware,&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">......后续数据省略&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以在 Playbook 中以 &lt;code>{{ ansible_devices.sda.model }}&lt;/code> 这种方式引用 ansible_devices 下面的 sda 下的 model 变量的值&lt;/p>
&lt;p>Note：当进行大规模设备使用 ansible 时，如果每台设备都要获取 fact 信息，ansible 的压力会非常大，这时候推荐关闭 fact 功能，可以在 playbook.yaml 文件中使用 gather_facts 字段即可。如下所示&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">hosts&lt;/span>: &lt;span style="color:#ae81ff">WHAT EVER&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">gather_facts&lt;/span>: &lt;span style="color:#66d9ef">no&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="connection-variables">Connection Variables&lt;/h2>
&lt;h1 id="应用示例">应用示例&lt;/h1>
&lt;h2 id="获取组中的主机数量">获取组中的主机数量&lt;/h2>
&lt;pre>&lt;code> vars:
HOST_COUNT: &amp;quot;{{ groups['组名'] | length }}&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>获取 test 组中主机的总数量&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>lichenhao@hw-cloud-xngy-jump-server-linux-2 ~/projects/DesistDaydream/ansible/playbooks&lt;span style="color:#f92672">]&lt;/span>$ ansible -i ../inventory/ all -m debug -a &lt;span style="color:#e6db74">&amp;#34;msg={{ groups[&amp;#39;test&amp;#39;] | length }}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hw-cloud-xngy-jump-server-linux-2 | SUCCESS &lt;span style="color:#f92672">=&lt;/span>&amp;gt; &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;msg&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Ansible 管理</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/ansible/ansible-%E7%AE%A1%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/ansible/ansible-%E7%AE%A1%E7%90%86/</guid><description>
&lt;h1 id="heading">&lt;/h1>
&lt;h1 id="实际案例">实际案例：&lt;/h1>
&lt;h2 id="批量关闭开启虚拟机">批量关闭/开启虚拟机&lt;/h2>
&lt;pre>&lt;code>- name: 获取虚拟机列表
virt:
command: list_vms
register: info
- name: 循环开启虚拟机
virt:
name: &amp;quot;{{item}}&amp;quot;
command: start
loop: &amp;quot;{{info.list_vms}}&amp;quot;
&lt;/code>&lt;/pre></description></item><item><title>Docs: Ansible 命令行工具</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/ansible/ansible-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/ansible/ansible-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/user_guide/command_line_tools.html#command-line-tools">官方文档,用户指南-命令行工具&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/user_guide/intro_adhoc.html">官方文档,用户指南-传统目录-临时命令简介&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>由于 Ansible 是基于 SSH 远程管理主机，所以让 Ansible 的控制节点需要对受管理节点进行 ssh 的基于密钥的认证(方法详见 ssh 命令)或者在 inventory 文件中指定认证方式。&lt;/p>
&lt;p>Note：Ansible 的控制节点和受管理节点的 Python 版本需要一致，否则 ansible 命令有时候会执行失败&lt;/p>
&lt;h1 id="ansible">ansible&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/cli/ansible.html">官方文档，用户指南-使用命令行工具工作-ansible&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>ansible 是 Ansible 的一个 ad-hoc(临时) 命令，可以在一个或多个受管理节点上自动执行单个任务。ansible 命令即简单又快速，但并不具备可重复性，通过 ansible 命令的使用，我们可以了解到 Ansible 的简单性和强大的功能。&lt;strong>并且，可以将类似的操作，直接移植到 Playbooks 中&lt;/strong>。&lt;/p>
&lt;p>临时命令非常适合很少重复，但是又需要大批量执行的任务，比如重启服务器、复制文件、管理服务、管理用户 等等。我们可以在临时任务中使用所有 Ansible 模块&lt;/p>
&lt;h2 id="syntax语法">Syntax(语法)&lt;/h2>
&lt;p>&lt;strong>ansible &lt;!-- raw HTML omitted --> [OPTIONS]&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>HostPattern&lt;/strong> #主机模式,可以是主机名，主机 IP，组名，还有一个 all(所有 hosts 里定义的主机)&lt;/li>
&lt;/ul>
&lt;h3 id="options">OPTIONS&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>&amp;ndash;list-hosts&lt;/strong> # 列出所有 HostPattern 定义的被管理 host 并统计数量，一般用于查看组内的主机有多少&lt;/li>
&lt;li>&lt;strong>-i,&amp;ndash;inventory,&amp;ndash;inventory-file INVENTORY&lt;/strong> # 指定具体的 INVENTORY 路径或文件，而不使用配置中默认的。
&lt;ul>
&lt;li>INVENTORY 可以是目录或者文件&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Modules Options(模块选项)&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>-a, &amp;ndash;args &amp;lt;MODULE_ARGS&amp;gt;&lt;/strong> # 以空格分割的模块参数。格式为 &lt;code>ARG1=VAL1 ARG2=VAL2......&lt;/code>，注意使用引号，有的 VAL 也需要使用引号引起来&lt;/li>
&lt;li>只要使用 -m 选项，就必须要是使用 -a 选项&lt;/li>
&lt;li>&lt;strong>-m, &amp;ndash;module-name &lt;!-- raw HTML omitted -->&lt;/strong> # 执行任务要使用的模块，默认模块为 command。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Privilege Escalation Options(权限提升选项)&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>-b, &amp;ndash;become&lt;/strong> # 使用 become 模块执行所有操作。即开启权限提升功能&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="example">EXAMPLE&lt;/h2>
&lt;ul>
&lt;li>ansible all &amp;ndash;list-hosts # 列出所有主机&lt;/li>
&lt;li>测试 k8s_test_master 组的所有主机的连通性
&lt;ul>
&lt;li>ansible k8s_test_master -m ping&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>对所有管理主机使用默认模块 command 使用 date 命令
&lt;ul>
&lt;li>ansible all -a &amp;lsquo;date&amp;rsquo;
&lt;ul>
&lt;li>注：也可以使用 &lt;code>-m 'shell'&lt;/code> 显式得指定 shell 模块。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>将 resolv.conf 文件中的 nameserver 127.0.0.1 替换成 nameserver 10.8.8.8
&lt;ul>
&lt;li>ansible all -m lineinfile -a &amp;ldquo;dest=/etc/resolv.conf regexp=&amp;lsquo;nameserver 127.0.1.1&amp;rsquo; line=&amp;lsquo;nameserver 10.8.8.8&amp;rsquo;&amp;rdquo; #&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="常见模块命令示例">常见模块命令示例&lt;/h3>
&lt;blockquote>
&lt;p>参考：&lt;a href="https://docs.ansible.com/ansible/latest/user_guide/intro_adhoc.html#use-cases-for-ad-hoc-tasks">https://docs.ansible.com/ansible/latest/user_guide/intro_adhoc.html#use-cases-for-ad-hoc-tasks&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;strong>文件管理&lt;/strong>
&lt;ul>
&lt;li>拷贝文件
&lt;ul>
&lt;li>ansible all -m copy -a &amp;ldquo;src=https://desistdaydream.github.io/etc/hosts dest=/tmp/hosts&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>创建目录，类似 mkdir -p 命令
&lt;ul>
&lt;li>ansible all -m file -a &amp;ldquo;dest=/tmp/hosts mode=755 owner=lichenhao group=lichenhao state=directory&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>删除文件
&lt;ul>
&lt;li>ansible all -m file -a &amp;ldquo;dest=/opt/nginx/config/stream.d/wireguard.conf state=absent&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>包管理&lt;/strong>
&lt;ul>
&lt;li>安装最新的 net-snmp-utils 包
&lt;ul>
&lt;li>ansible -i inventory/ssc-pool-unicom-ha all -m yum -a &amp;ldquo;name=net-snmp-utils state=latest&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>用户和组管理&lt;/strong>
&lt;ul>
&lt;li>创建一个名为 sudo 的组，设置 gid 为 27
&lt;ul>
&lt;li>ansible -i inventory/ssc-pool-datalake-ha &lt;em>jxgz&lt;/em> -m group -a &amp;ldquo;name=sudo gid=27&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>cron&lt;/strong> # 添加定时任务
&lt;ul>
&lt;li>ansible all -m cron -a &amp;lsquo;minute=*/10 job=&amp;quot;/bin/echo hello&amp;quot; name=&amp;ldquo;test1&amp;rdquo;&amp;rsquo;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>script&lt;/strong> # 脚本模块，为远程机器执行本地脚本
&lt;ul>
&lt;li>ansible -i ./inventory/ssc-pool-unicom-ha all -m script -a &amp;lsquo;scripts.sh&amp;rsquo;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>setup&lt;/strong> # 收集远程主机的 facts
&lt;ul>
&lt;li>ansible all -m setup # 显示所有被管理节点的相关信息，每个被管理节点，在运行管理命令之前通常会将自己主机相关的信息如，OS 版本，IP 等报告给远程的 ansible 主机&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>unarchive&lt;/strong> # 解包
&lt;ul>
&lt;li>ansible all -m unarchive -a &amp;ldquo;src=https://desistdaydream.github.io/root/downloads/docker-ehualu-20.10.9.tar.gz dest=/&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="ansible-doc">ansible-doc&lt;/h1>
&lt;p>显示有关 Ansible 库中安装的模块的信息。 它显示了简短的插件清单及其简短描述，提供了其 DOCUMENTATION 字符串的打印输出，并且可以创建一个简短的“片段”，可以粘贴到 playbook 中。&lt;/p>
&lt;p>OPTIONS&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-l&lt;/strong> # 显示所有可用模块&lt;/li>
&lt;li>&lt;strong>-s&lt;/strong> # 显示指定的模块中在 playbook 可以定义的参数，可以当作该模块在命令行界面的使用方法&lt;/li>
&lt;/ul>
&lt;p>EXAMPLE&lt;/p>
&lt;h1 id="ansible-vault">ansible-vault&lt;/h1>
&lt;p>通过一个密码来加密或解密一个文件或字符串。可以加密 Ansible 使用的任何结构化数据文件。 这可以包括 group_vars/ 或 host_vars/ 清单变量、由 include_vars 或 vars_files 加载的变量，或在 ansible- playbook 命令行上使用 -e @file.yml 或 -e @file.json 传递的变量文件。 还包括角色变量和默认值！&lt;/p>
&lt;p>由于 Ansible 任务、处理程序和其他对象都是数据，因此它们也可以使用 Vault 进行加密。 如果您不想公开您正在使用的变量，您可以将单个任务文件完全加密。&lt;/p>
&lt;p>该程序加密文件的逻辑是通过管理员输入的密码，对文件进行加密，若想解密，也需要相同的密码才可以解密。与传统意义上通过算法加密的逻辑不太一样。&lt;/p>
&lt;h2 id="syntax语法-1">Syntax(语法)&lt;/h2>
&lt;p>&lt;strong>ansible-vault COMMAND&lt;/strong>&lt;/p>
&lt;p>&lt;strong>COMMAND&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>create&lt;/li>
&lt;li>decrypt&lt;/li>
&lt;li>edit&lt;/li>
&lt;li>view&lt;/li>
&lt;li>encrypt&lt;/li>
&lt;li>encrypt_string&lt;/li>
&lt;li>rekey&lt;/li>
&lt;/ul>
&lt;h1 id="ansible-inventory">ansible-inventory&lt;/h1>
&lt;p>显示、转存 Ansible Inventory 信息。默认输出 JSON 格式信息&lt;/p>
&lt;h2 id="syntax语法-2">Syntax(语法)&lt;/h2>
&lt;p>&lt;strong>ansible-inventory OPTIONS &amp;lt;&amp;ndash;list] | &amp;ndash;host HOST | &amp;ndash;graph&amp;gt;&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&amp;ndash;list&lt;/strong> # 输出所有主机信息&lt;/li>
&lt;li>&lt;strong>&amp;ndash;host &lt;!-- raw HTML omitted -->&lt;/strong> # 输出指定主机信息&lt;/li>
&lt;li>&lt;strong>&amp;ndash;graph&lt;/strong> #&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>OPTIONS&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&amp;ndash;export&lt;/strong> # 使用 &amp;ndash;list 时，优化输出内容，以便进行导出；而不是准确表示 Ansible 如何处理清单文件
&lt;ul>
&lt;li>用人话说：如果不加 &amp;ndash;export，那么当多个主机共享了 1 个变量时，输出的主机信息，会给每个主机都添加这个变量。不利于人类阅读与维护&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>-i, &amp;ndash;inventory &lt;!-- raw HTML omitted -->&lt;/strong> # 指定主机清单或逗号分割的主机列表&lt;/li>
&lt;li>&lt;strong>&amp;ndash;output &amp;lt;/PATH/TO/FILE&amp;gt;&lt;/strong> # 使用 &amp;ndash;list 时，将输出的内容保存到指定文件中，而不是输出到标准输出&lt;/li>
&lt;li>&lt;strong>-y, &amp;ndash;yaml&lt;/strong> # 使用 YAML 格式输出信息&lt;/li>
&lt;/ul>
&lt;h2 id="example-1">EXAMPLE&lt;/h2>
&lt;p>将 Inventory 文件以 YAML 格式输出并保存到文件&lt;/p>
&lt;ul>
&lt;li>ansible-inventory -i inventory &amp;ndash;yaml &amp;ndash;list &amp;ndash;output dest_inventory.yaml &amp;ndash;export&lt;/li>
&lt;/ul></description></item><item><title>Docs: Ansible 配置文件详解</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/ansible/ansible-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/ansible/ansible-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;/blockquote>
&lt;p>Ansible 的配置文件使用 INI 语法书写&lt;/p>
&lt;h1 id="defaults">[defaults]&lt;/h1>
&lt;p>&lt;strong>deprecation_warnings = &lt;!-- raw HTML omitted -->&lt;/strong> # 是否显示某些功能的弃用警告。&lt;code>默认值：TRUE&lt;/code>
&lt;strong>host_key_checking = &lt;!-- raw HTML omitted -->&lt;/strong> # 主机 SSH 密钥检查。&lt;code>默认值：TRUE&lt;/code>。如果启用检查，则对从未 ssh 登录过的主机执行任务将会失败。
&lt;strong>inventory = /etc/ansible/hosts&lt;/strong> # 指定 ansible 运行时所用的主机清单路径。默认路径为/etc/ansible/hosts&lt;/p>
&lt;ul>
&lt;li>Note：可以指定文件或者路径，当指定路径时，则会从该路径下所有文件中读取 host 信息&lt;/li>
&lt;/ul>
&lt;h1 id="inventory">[inventory]&lt;/h1>
&lt;h1 id="privilege_escalation-权限提升部分">[privilege_escalation] 权限提升部分&lt;/h1>
&lt;p>&lt;strong>become=&lt;!-- raw HTML omitted -->&lt;/strong> # 是否启用以指定用户执行命令。&lt;code>默认值：False&lt;/code>
&lt;strong>become_method=&lt;!-- raw HTML omitted -->&lt;/strong> # 提升权限的方式。&lt;code>默认值：sudo&lt;/code>
&lt;strong>become_user=&lt;!-- raw HTML omitted -->&lt;/strong> # 提升权限所使用的&lt;code>默认值：root&lt;/code>
&lt;strong>become_ask_pass=&lt;!-- raw HTML omitted -->&lt;/strong> # &lt;code>默认值：True&lt;/code>&lt;/p>
&lt;h1 id="paramiko_connection">[paramiko_connection]&lt;/h1>
&lt;h1 id="ssh_connection">[ssh_connection]&lt;/h1>
&lt;p>&lt;strong>transfer_method = &lt;!-- raw HTML omitted -->&lt;/strong> # 传输文件的机制。&lt;code>默认值：smart&lt;/code>。该指令代替旧版的 scp_if_ssh 指令&lt;/p>
&lt;ul>
&lt;li>sftp # 仅使用 sftp&lt;/li>
&lt;li>scp # 仅使用 scp&lt;/li>
&lt;li>piped # 仅使用 piped&lt;/li>
&lt;li>smart # 按照顺序尝试 sftp、scp、piped&lt;/li>
&lt;/ul>
&lt;h1 id="persistent_connection">[persistent_connection]&lt;/h1>
&lt;h1 id="accelerate">[accelerate]&lt;/h1>
&lt;h1 id="selinux">[selinux]&lt;/h1>
&lt;h1 id="colors">[colors]&lt;/h1>
&lt;h1 id="diff">[diff]&lt;/h1></description></item><item><title>Docs: ansible.builtin(内置模块)</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/ansible/ansible-modules%E6%A8%A1%E5%9D%97/ansible.builtin%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/ansible/ansible-modules%E6%A8%A1%E5%9D%97/ansible.builtin%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/index_module.html#ansible-builtin">官方文档,参考-所有模块和插件的索引-所有模块的索引-ansible.builtin&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/add_host_module.html#ansible-collections-ansible-builtin-add-host-module">ansible.builtin.add_host&lt;/a> – Add a host (and alternatively a group) to the ansible-playbook in-memory inventory&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/apt_module.html#ansible-collections-ansible-builtin-apt-module">ansible.builtin.apt&lt;/a> – Manages apt-packages&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/apt_key_module.html#ansible-collections-ansible-builtin-apt-key-module">ansible.builtin.apt_key&lt;/a> – Add or remove an apt key&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/apt_repository_module.html#ansible-collections-ansible-builtin-apt-repository-module">ansible.builtin.apt_repository&lt;/a> – Add and remove APT repositories&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/assemble_module.html#ansible-collections-ansible-builtin-assemble-module">ansible.builtin.assemble&lt;/a> – Assemble configuration files from fragments&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/assert_module.html#ansible-collections-ansible-builtin-assert-module">ansible.builtin.assert&lt;/a> – Asserts given expressions are true&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/async_status_module.html#ansible-collections-ansible-builtin-async-status-module">ansible.builtin.async_status&lt;/a> – Obtain status of asynchronous task&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/blockinfile_module.html#ansible-collections-ansible-builtin-blockinfile-module">ansible.builtin.blockinfile&lt;/a> – Insert/update/remove a text block surrounded by marker lines&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/command_module.html#ansible-collections-ansible-builtin-command-module">ansible.builtin.command&lt;/a> – Execute commands on targets&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/copy_module.html#ansible-collections-ansible-builtin-copy-module">ansible.builtin.copy&lt;/a> – Copy files to remote locations&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/cron_module.html#ansible-collections-ansible-builtin-cron-module">ansible.builtin.cron&lt;/a> – Manage cron.d and crontab entries&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/debconf_module.html#ansible-collections-ansible-builtin-debconf-module">ansible.builtin.debconf&lt;/a> – Configure a .deb package&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/debug_module.html#ansible-collections-ansible-builtin-debug-module">ansible.builtin.debug&lt;/a> – Print statements during execution&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/dnf_module.html#ansible-collections-ansible-builtin-dnf-module">ansible.builtin.dnf&lt;/a> – Manages packages with the dnf package manager&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/dpkg_selections_module.html#ansible-collections-ansible-builtin-dpkg-selections-module">ansible.builtin.dpkg_selections&lt;/a> – Dpkg package selection selections&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/expect_module.html#ansible-collections-ansible-builtin-expect-module">ansible.builtin.expect&lt;/a> – Executes a command and responds to prompts&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/fail_module.html#ansible-collections-ansible-builtin-fail-module">ansible.builtin.fail&lt;/a> – Fail with custom message&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/fetch_module.html#ansible-collections-ansible-builtin-fetch-module">ansible.builtin.fetch&lt;/a> – Fetch files from remote nodes&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/file_module.html#ansible-collections-ansible-builtin-file-module">ansible.builtin.file&lt;/a> – Manage files and file properties&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/find_module.html#ansible-collections-ansible-builtin-find-module">ansible.builtin.find&lt;/a> – Return a list of files based on specific criteria&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/gather_facts_module.html#ansible-collections-ansible-builtin-gather-facts-module">ansible.builtin.gather_facts&lt;/a> – Gathers facts about remote hosts&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/get_url_module.html#ansible-collections-ansible-builtin-get-url-module">ansible.builtin.get_url&lt;/a> – Downloads files from HTTP, HTTPS, or FTP to node&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/getent_module.html#ansible-collections-ansible-builtin-getent-module">ansible.builtin.getent&lt;/a> – A wrapper to the unix getent utility&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/git_module.html#ansible-collections-ansible-builtin-git-module">ansible.builtin.git&lt;/a> – Deploy software (or files) from git checkouts&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/group_module.html#ansible-collections-ansible-builtin-group-module">ansible.builtin.group&lt;/a> – Add or remove groups&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/group_by_module.html#ansible-collections-ansible-builtin-group-by-module">ansible.builtin.group_by&lt;/a> – Create Ansible groups based on facts&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/hostname_module.html#ansible-collections-ansible-builtin-hostname-module">ansible.builtin.hostname&lt;/a> – Manage hostname&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/import_playbook_module.html#ansible-collections-ansible-builtin-import-playbook-module">ansible.builtin.import_playbook&lt;/a> – Import a playbook&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/import_role_module.html#ansible-collections-ansible-builtin-import-role-module">ansible.builtin.import_role&lt;/a> – Import a role into a play&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/import_tasks_module.html#ansible-collections-ansible-builtin-import-tasks-module">ansible.builtin.import_tasks&lt;/a> – Import a task list&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/include_module.html#ansible-collections-ansible-builtin-include-module">ansible.builtin.include&lt;/a> – Include a play or task list&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/include_role_module.html#ansible-collections-ansible-builtin-include-role-module">ansible.builtin.include_role&lt;/a> – Load and execute a role&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/include_tasks_module.html#ansible-collections-ansible-builtin-include-tasks-module">ansible.builtin.include_tasks&lt;/a> – Dynamically include a task list&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/include_vars_module.html#ansible-collections-ansible-builtin-include-vars-module">ansible.builtin.include_vars&lt;/a> – Load variables from files, dynamically within a task&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/iptables_module.html#ansible-collections-ansible-builtin-iptables-module">ansible.builtin.iptables&lt;/a> – Modify iptables rules&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/known_hosts_module.html#ansible-collections-ansible-builtin-known-hosts-module">ansible.builtin.known_hosts&lt;/a> – Add or remove a host from the known_hosts file&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/lineinfile_module.html#ansible-collections-ansible-builtin-lineinfile-module">ansible.builtin.lineinfile&lt;/a> – Manage lines in text files&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/meta_module.html#ansible-collections-ansible-builtin-meta-module">ansible.builtin.meta&lt;/a> – Execute Ansible ‘actions’&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/package_module.html#ansible-collections-ansible-builtin-package-module">ansible.builtin.package&lt;/a> – Generic OS package manager&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/package_facts_module.html#ansible-collections-ansible-builtin-package-facts-module">ansible.builtin.package_facts&lt;/a> – Package information as facts&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/pause_module.html#ansible-collections-ansible-builtin-pause-module">ansible.builtin.pause&lt;/a> – Pause playbook execution&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/ping_module.html#ansible-collections-ansible-builtin-ping-module">ansible.builtin.ping&lt;/a> – Try to connect to host, verify a usable python and return pong on success&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/pip_module.html#ansible-collections-ansible-builtin-pip-module">ansible.builtin.pip&lt;/a> – Manages Python library dependencies&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/raw_module.html#ansible-collections-ansible-builtin-raw-module">ansible.builtin.raw&lt;/a> – Executes a low-down and dirty command&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/reboot_module.html#ansible-collections-ansible-builtin-reboot-module">ansible.builtin.reboot&lt;/a> – Reboot a machine&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/replace_module.html#ansible-collections-ansible-builtin-replace-module">ansible.builtin.replace&lt;/a> – Replace all instances of a particular string in a file using a back-referenced regular expression&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/rpm_key_module.html#ansible-collections-ansible-builtin-rpm-key-module">ansible.builtin.rpm_key&lt;/a> – Adds or removes a gpg key from the rpm db&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/script_module.html#ansible-collections-ansible-builtin-script-module">ansible.builtin.script&lt;/a> – Runs a local script on a remote node after transferring it&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/service_module.html#ansible-collections-ansible-builtin-service-module">ansible.builtin.service&lt;/a> – Manage services&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/service_facts_module.html#ansible-collections-ansible-builtin-service-facts-module">ansible.builtin.service_facts&lt;/a> – Return service state information as fact data&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/set_fact_module.html#ansible-collections-ansible-builtin-set-fact-module">ansible.builtin.set_fact&lt;/a> – Set host variable(s) and fact(s).&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/set_stats_module.html#ansible-collections-ansible-builtin-set-stats-module">ansible.builtin.set_stats&lt;/a> – Define and display stats for the current ansible run&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/setup_module.html#ansible-collections-ansible-builtin-setup-module">ansible.builtin.setup&lt;/a> – Gathers facts about remote hosts&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/shell_module.html#ansible-collections-ansible-builtin-shell-module">ansible.builtin.shell&lt;/a> – Execute shell commands on targets&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/slurp_module.html#ansible-collections-ansible-builtin-slurp-module">ansible.builtin.slurp&lt;/a> – Slurps a file from remote nodes&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/stat_module.html#ansible-collections-ansible-builtin-stat-module">ansible.builtin.stat&lt;/a> – Retrieve file or file system status&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/subversion_module.html#ansible-collections-ansible-builtin-subversion-module">ansible.builtin.subversion&lt;/a> – Deploys a subversion repository&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/systemd_module.html#ansible-collections-ansible-builtin-systemd-module">ansible.builtin.systemd&lt;/a> – Manage systemd units&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/sysvinit_module.html#ansible-collections-ansible-builtin-sysvinit-module">ansible.builtin.sysvinit&lt;/a> – Manage SysV services.&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/tempfile_module.html#ansible-collections-ansible-builtin-tempfile-module">ansible.builtin.tempfile&lt;/a> – Creates temporary files and directories&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/template_module.html#ansible-collections-ansible-builtin-template-module">ansible.builtin.template&lt;/a> – Template a file out to a target host&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/unarchive_module.html#ansible-collections-ansible-builtin-unarchive-module">ansible.builtin.unarchive&lt;/a> – Unpacks an archive after (optionally) copying it from the local machine&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/uri_module.html#ansible-collections-ansible-builtin-uri-module">ansible.builtin.uri&lt;/a> – Interacts with webservices&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/user_module.html#ansible-collections-ansible-builtin-user-module">ansible.builtin.user&lt;/a> – Manage user accounts&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/validate_argument_spec_module.html#ansible-collections-ansible-builtin-validate-argument-spec-module">ansible.builtin.validate_argument_spec&lt;/a> – Validate role argument specs.&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/wait_for_module.html#ansible-collections-ansible-builtin-wait-for-module">ansible.builtin.wait_for&lt;/a> – Waits for a condition before continuing&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/wait_for_connection_module.html#ansible-collections-ansible-builtin-wait-for-connection-module">ansible.builtin.wait_for_connection&lt;/a> – Waits until remote system is reachable/usable&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/yum_module.html#ansible-collections-ansible-builtin-yum-module">ansible.builtin.yum&lt;/a> – Manages packages with the yum package manager&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/yum_repository_module.html#ansible-collections-ansible-builtin-yum-repository-module">ansible.builtin.yum_repository&lt;/a> – Add or remove YUM repositories&lt;/li>
&lt;/ul>
&lt;p>根据 &lt;a href="https://docs.ansible.com/ansible/2.9/modules/modules_by_category.html">2.9 版本的模块索引&lt;/a>文档，我们可以将上面这些内置模块进行类别划分&lt;/p>
&lt;h1 id="commands--命令模块">Commands # 命令模块&lt;/h1>
&lt;blockquote>
&lt;p>官方文档：&lt;a href="https://docs.ansible.com/ansible/2.9/modules/list_of_commands_modules.html">https://docs.ansible.com/ansible/2.9/modules/list_of_commands_modules.html&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/command_module.html#command-module">command – Execute commands on targets&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/expect_module.html#expect-module">expect – Executes a command and responds to prompts&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/psexec_module.html#psexec-module">psexec – Runs commands on a remote Windows host based on the PsExec model&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/raw_module.html#raw-module">raw – Executes a low-down and dirty command&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/script_module.html#script-module">script – Runs a local script on a remote node after transferring it&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/shell_module.html#shell-module">shell – Execute shell commands on targets&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/telnet_module.html#telnet-module">telnet – Executes a low-down and dirty telnet command&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="commandhttpsdocsansiblecomansiblelatestcollectionsansiblebuiltincommand_modulehtml--在受管理节点上执行命令">&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/command_module.html">command&lt;/a> # 在受管理节点上执行命令&lt;/h2>
&lt;h2 id="scripthttpsdocsansiblecomansiblelatestcollectionsansiblebuiltinscript_modulehtml--将本地脚本传输到受管理节点上并运行">&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/script_module.html">script&lt;/a> # 将本地脚本传输到受管理节点上并运行&lt;/h2>
&lt;h1 id="files--文件处理模块">Files # 文件处理模块&lt;/h1>
&lt;p>详见 《[Files 类模块](✏IT 学习笔记/🛠️9.运维/Ansible/Ansible%20Modules(模块)/ansible.builtin(内置模块)/Files%20 类模块.md 类模块.md)》&lt;/p>
&lt;h1 id="packaging--包模块">Packaging # 包模块&lt;/h1>
&lt;blockquote>
&lt;p>官方文档：&lt;a href="https://docs.ansible.com/ansible/2.9/modules/list_of_packaging_modules.html">https://docs.ansible.com/ansible/2.9/modules/list_of_packaging_modules.html&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h2 id="language">Language&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/bower_module.html#bower-module">bower – Manage bower packages with bower&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/bundler_module.html#bundler-module">bundler – Manage Ruby Gem dependencies with Bundler&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/composer_module.html#composer-module">composer – Dependency Manager for PHP&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/cpanm_module.html#cpanm-module">cpanm – Manages Perl library dependencies&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/easy_install_module.html#easy-install-module">easy_install – Installs Python libraries&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/gem_module.html#gem-module">gem – Manage Ruby gems&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/maven_artifact_module.html#maven-artifact-module">maven_artifact – Downloads an Artifact from a Maven Repository&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/npm_module.html#npm-module">npm – Manage node.js packages with npm&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/pear_module.html#pear-module">pear – Manage pear/pecl packages&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/pip_module.html#pip-module">pip – Manages Python library dependencies&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/pip_package_info_module.html#pip-package-info-module">pip_package_info – pip package information&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/yarn_module.html#yarn-module">yarn – Manage node.js packages with Yarn&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="os">Os&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/apk_module.html#apk-module">apk – Manages apk packages&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/apt_module.html#apt-module">apt – Manages apt-packages&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/apt_key_module.html#apt-key-module">apt_key – Add or remove an apt key&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/apt_repo_module.html#apt-repo-module">apt_repo – Manage APT repositories via apt-repo&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/apt_repository_module.html#apt-repository-module">apt_repository – Add and remove APT repositories&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/apt_rpm_module.html#apt-rpm-module">apt_rpm – apt_rpm package manager&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/dnf_module.html#dnf-module">dnf – Manages packages with the dnf package manager&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/dpkg_selections_module.html#dpkg-selections-module">dpkg_selections – Dpkg package selection selections&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/flatpak_module.html#flatpak-module">flatpak – Manage flatpaks&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/flatpak_remote_module.html#flatpak-remote-module">flatpak_remote – Manage flatpak repository remotes&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/homebrew_module.html#homebrew-module">homebrew – Package manager for Homebrew&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/homebrew_cask_module.html#homebrew-cask-module">homebrew_cask – Install/uninstall homebrew casks&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/homebrew_tap_module.html#homebrew-tap-module">homebrew_tap – Tap a Homebrew repository&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/installp_module.html#installp-module">installp – Manage packages on AIX&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/layman_module.html#layman-module">layman – Manage Gentoo overlays&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/macports_module.html#macports-module">macports – Package manager for MacPorts&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/openbsd_pkg_module.html#openbsd-pkg-module">openbsd_pkg – Manage packages on OpenBSD&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/opkg_module.html#opkg-module">opkg – Package manager for OpenWrt&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/package_module.html#package-module">package – Generic OS package manager&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/package_facts_module.html#package-facts-module">package_facts – package information as facts&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/pacman_module.html#pacman-module">pacman – Manage packages with pacman&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/pkg5_module.html#pkg5-module">pkg5 – Manages packages with the Solaris 11 Image Packaging System&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/pkg5_publisher_module.html#pkg5-publisher-module">pkg5_publisher – Manages Solaris 11 Image Packaging System publishers&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/pkgin_module.html#pkgin-module">pkgin – Package manager for SmartOS, NetBSD, et al&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/pkgng_module.html#pkgng-module">pkgng – Package manager for FreeBSD &amp;gt;= 9.0&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/pkgutil_module.html#pkgutil-module">pkgutil – Manage CSW-Packages on Solaris&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/portage_module.html#portage-module">portage – Package manager for Gentoo&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/portinstall_module.html#portinstall-module">portinstall – Installing packages from FreeBSD’s ports system&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/pulp_repo_module.html#pulp-repo-module">pulp_repo – Add or remove Pulp repos from a remote host&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/redhat_subscription_module.html#redhat-subscription-module">redhat_subscription – Manage registration and subscriptions to RHSM using the subscription-manager command&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/rhn_channel_module.html#rhn-channel-module">rhn_channel – Adds or removes Red Hat software channels&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/rhn_register_module.html#rhn-register-module">rhn_register – Manage Red Hat Network registration using the rhnreg_ks command&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/rhsm_release_module.html#rhsm-release-module">rhsm_release – Set or Unset RHSM Release version&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/rhsm_repository_module.html#rhsm-repository-module">rhsm_repository – Manage RHSM repositories using the subscription-manager command&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/rpm_key_module.html#rpm-key-module">rpm_key – Adds or removes a gpg key from the rpm db&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/slackpkg_module.html#slackpkg-module">slackpkg – Package manager for Slackware &amp;gt;= 12.2&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/snap_module.html#snap-module">snap – Manages snaps&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/sorcery_module.html#sorcery-module">sorcery – Package manager for Source Mage GNU/Linux&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/svr4pkg_module.html#svr4pkg-module">svr4pkg – Manage Solaris SVR4 packages&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/swdepot_module.html#swdepot-module">swdepot – Manage packages with swdepot package manager (HP-UX)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/swupd_module.html#swupd-module">swupd – Manages updates and bundles in ClearLinux systems&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/urpmi_module.html#urpmi-module">urpmi – Urpmi manager&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/xbps_module.html#xbps-module">xbps – Manage packages with XBPS&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/yum_module.html#yum-module">yum – Manages packages with the yum package manager&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/yum_repository_module.html#yum-repository-module">yum_repository – Add or remove YUM repositories&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/zypper_module.html#zypper-module">zypper – Manage packages on SUSE and openSUSE&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/zypper_repository_module.html#zypper-repository-module">zypper_repository – Add and remove Zypper repositories&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="yumhttpsdocsansiblecomansiblelatestcollectionsansiblebuiltinyum_modulehtml--使用主机上的-yum-工具管理包">&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/yum_module.html">yum&lt;/a> # 使用主机上的 yum 工具管理包&lt;/h2>
&lt;h3 id="参数">参数&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>name: &lt;!-- raw HTML omitted -->&lt;/strong> # 包的名称&lt;/li>
&lt;li>&lt;strong>state: &lt;!-- raw HTML omitted -->&lt;/strong> # 指定要执行的操作，是安装还是移除包。可用的值有如下几个：
&lt;ul>
&lt;li>absent 与 removed # 移除指定的包&lt;/li>
&lt;li>installed 与 present # 简单得确保安装了指定的包&lt;/li>
&lt;li>latest # 安装最新版本的包，若当前包不是最新版本，则更新它。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="应用示例">应用示例&lt;/h3>
&lt;p>安装 bash-completion 与 vim 的最新版本的包&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>ansible all -m yum -a &lt;span style="color:#e6db74">&amp;#34;name=net-bash-completion,vim state=latest&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>- name: 安装运维工具
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> yum:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: &lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#e6db74">&amp;#39;bash-completion&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;vim&amp;#39;&lt;/span>&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> state: latest
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="system--系统模块">System # 系统模块&lt;/h1>
&lt;blockquote>
&lt;p>官方文档：&lt;a href="https://docs.ansible.com/ansible/latest/modules/list_of_system_modules.html">https://docs.ansible.com/ansible/latest/modules/list_of_system_modules.html&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/aix_devices_module.html#aix-devices-module">aix_devices – Manages AIX devices&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/aix_filesystem_module.html#aix-filesystem-module">aix_filesystem – Configure LVM and NFS file systems for AIX&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/aix_inittab_module.html#aix-inittab-module">aix_inittab – Manages the inittab on AIX&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/aix_lvg_module.html#aix-lvg-module">aix_lvg – Manage LVM volume groups on AIX&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/aix_lvol_module.html#aix-lvol-module">aix_lvol – Configure AIX LVM logical volumes&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/alternatives_module.html#alternatives-module">alternatives – Manages alternative programs for common commands&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/at_module.html#at-module">at – Schedule the execution of a command or script file via the at command&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/authorized_key_module.html#authorized-key-module">authorized_key – Adds or removes an SSH authorized key&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/awall_module.html#awall-module">awall – Manage awall policies&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/beadm_module.html#beadm-module">beadm – Manage ZFS boot environments on FreeBSD/Solaris/illumos systems&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/capabilities_module.html#capabilities-module">capabilities – Manage Linux capabilities&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/cron_module.html#cron-module">cron – Manage cron.d and crontab entries&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/cronvar_module.html#cronvar-module">cronvar – Manage variables in crontabs&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/crypttab_module.html#crypttab-module">crypttab – Encrypted Linux block devices&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/dconf_module.html#dconf-module">dconf – Modify and read dconf database&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/debconf_module.html#debconf-module">debconf – Configure a .deb package&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/facter_module.html#facter-module">facter – Runs the discovery program facter on the remote system&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/filesystem_module.html#filesystem-module">filesystem – Makes a filesystem&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/firewalld_module.html#firewalld-module">firewalld – Manage arbitrary ports/services with firewalld&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/gather_facts_module.html#gather-facts-module">gather_facts – Gathers facts about remote hosts&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/gconftool2_module.html#gconftool2-module">gconftool2 – Edit GNOME Configurations&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/getent_module.html#getent-module">getent – A wrapper to the unix getent utility&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/group_module.html#group-module">group – Add or remove groups&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/hostname_module.html#hostname-module">hostname – Manage hostname&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/interfaces_file_module.html#interfaces-file-module">interfaces_file – Tweak settings in /etc/network/interfaces files&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/iptables_module.html#iptables-module">iptables – Modify iptables rules&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/java_cert_module.html#java-cert-module">java_cert – Uses keytool to import/remove key from java keystore (cacerts)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/java_keystore_module.html#java-keystore-module">java_keystore – Create or delete a Java keystore in JKS format&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/kernel_blacklist_module.html#kernel-blacklist-module">kernel_blacklist – Blacklist kernel modules&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/known_hosts_module.html#known-hosts-module">known_hosts – Add or remove a host from the known_hosts file&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/listen_ports_facts_module.html#listen-ports-facts-module">listen_ports_facts – Gather facts on processes listening on TCP and UDP ports&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/locale_gen_module.html#locale-gen-module">locale_gen – Creates or removes locales&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/lvg_module.html#lvg-module">lvg – Configure LVM volume groups&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/lvol_module.html#lvol-module">lvol – Configure LVM logical volumes&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/make_module.html#make-module">make – Run targets in a Makefile&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/mksysb_module.html#mksysb-module">mksysb – Generates AIX mksysb rootvg backups&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/modprobe_module.html#modprobe-module">modprobe – Load or unload kernel modules&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/mount_module.html#mount-module">mount – Control active and configured mount points&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/nosh_module.html#nosh-module">nosh – Manage services with nosh&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/ohai_module.html#ohai-module">ohai – Returns inventory data from Ohai&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/open_iscsi_module.html#open-iscsi-module">open_iscsi – Manage iSCSI targets with Open-iSCSI&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/openwrt_init_module.html#openwrt-init-module">openwrt_init – Manage services on OpenWrt&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/osx_defaults_module.html#osx-defaults-module">osx_defaults – Manage macOS user defaults&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/pam_limits_module.html#pam-limits-module">pam_limits – Modify Linux PAM limits&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/pamd_module.html#pamd-module">pamd – Manage PAM Modules&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/parted_module.html#parted-module">parted – Configure block device partitions&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/pids_module.html#pids-module">pids – Retrieves process IDs list if the process is running otherwise return empty list&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/ping_module.html#ping-module">ping – Try to connect to host, verify a usable python and return pong on success&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/puppet_module.html#puppet-module">puppet – Runs puppet&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/python_requirements_info_module.html#python-requirements-info-module">python_requirements_info – Show python path and assert dependency versions&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/reboot_module.html#reboot-module">reboot – Reboot a machine&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/runit_module.html#runit-module">runit – Manage runit services&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/seboolean_module.html#seboolean-module">seboolean – Toggles SELinux booleans&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/sefcontext_module.html#sefcontext-module">sefcontext – Manages SELinux file context mapping definitions&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/selinux_module.html#selinux-module">selinux – Change policy and state of SELinux&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/selinux_permissive_module.html#selinux-permissive-module">selinux_permissive – Change permissive domain in SELinux policy&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/selogin_module.html#selogin-module">selogin – Manages linux user to SELinux user mapping&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/seport_module.html#seport-module">seport – Manages SELinux network port type definitions&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/service_module.html#service-module">service – Manage services&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/service_facts_module.html#service-facts-module">service_facts – Return service state information as fact data&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/setup_module.html#setup-module">setup – Gathers facts about remote hosts&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/solaris_zone_module.html#solaris-zone-module">solaris_zone – Manage Solaris zones&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/svc_module.html#svc-module">svc – Manage daemontools services&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/sysctl_module.html#sysctl-module">sysctl – Manage entries in sysctl.conf&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/syspatch_module.html#syspatch-module">syspatch – Manage OpenBSD system patches&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/systemd_module.html#systemd-module">systemd – Manage services&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/sysvinit_module.html#sysvinit-module">sysvinit – Manage SysV services&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/timezone_module.html#timezone-module">timezone – Configure timezone setting&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/ufw_module.html#ufw-module">ufw – Manage firewall with UFW&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/user_module.html#user-module">user – Manage user accounts&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/vdo_module.html#vdo-module">vdo – Module to control VDO&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/xfconf_module.html#xfconf-module">xfconf – Edit XFCE4 Configurations&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/xfs_quota_module.html#xfs-quota-module">xfs_quota – Manage quotas on XFS filesystems&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="systemdhttpsdocsansiblecomansiblelatestcollectionsansiblebuiltinsystemd_modulehtml--控制远程主机上以-systemd-运行的服务">&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/systemd_module.html">systemd&lt;/a> # 控制远程主机上以 systemd 运行的服务&lt;/h2>
&lt;h3 id="参数-1">参数&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>name: &lt;!-- raw HTML omitted -->&lt;/strong> # Unit 的名称&lt;/li>
&lt;li>&lt;strong>state: &lt;!-- raw HTML omitted -->&lt;/strong> # 设置 Unit 的状态。可用的值有
&lt;ul>
&lt;li>reloaded&lt;/li>
&lt;li>restarted&lt;/li>
&lt;li>started&lt;/li>
&lt;li>stopped&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>enabled: &lt;!-- raw HTML omitted -->&lt;/strong> # 设置 Unit 是否应该自启动&lt;/li>
&lt;/ul>
&lt;h3 id="使用示例">使用示例&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">启动并设置自启动kubelet与kube-proxy服务&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">systemd&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;{{item}}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">daemon_reload&lt;/span>: &lt;span style="color:#66d9ef">yes&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">state&lt;/span>: &lt;span style="color:#ae81ff">started&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">enabled&lt;/span>: &lt;span style="color:#66d9ef">yes&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">with_items&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">kubelet&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">kube-proxy&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="userhttpsdocsansiblecomansiblelatestcollectionsansiblebuiltinuser_modulehtml--管理远程主机上的用户账户">&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/user_module.html">user&lt;/a> # 管理远程主机上的用户账户&lt;/h2>
&lt;h3 id="参数-2">参数&lt;/h3>
&lt;p>user 模块使用示例：该示例同样适用于更改密码&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">创建k8s用户&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">user&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">developer&lt;/span> &lt;span style="color:#75715e">#指定要创建的用户名&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">password&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;$6$mysecretsalt$QjSLl.VQoxPKJkBE9.oLX82C5P4tAMH8UfFRpkxgkqSg2GNob8Y39hj5/cl7o0gbpPXVBGaB9oLuCPfVhIhyA0&amp;#34;&lt;/span> &lt;span style="color:#75715e"># 使用下面Note中的命令来获取加密后的密码&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">同时更改多个用户的密码&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">user&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;{{ item.name }}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">password&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;{{ item.chpass | password_hash(&amp;#39;sha512&amp;#39;) }}&amp;#34;&lt;/span> &lt;span style="color:#75715e"># 也可以直接使用明文作为密码&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">update_password&lt;/span>: &lt;span style="color:#ae81ff">always&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">with_items&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - { &lt;span style="color:#f92672">name: &amp;#39;root&amp;#39;, chpass&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;admin#123&amp;#39;&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - { &lt;span style="color:#f92672">name: &amp;#39;test&amp;#39;, chpass&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;yjun@123&amp;#39;&lt;/span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note：生成加密密码的方式&lt;/p>
&lt;ul>
&lt;li>ansible all -i localhost, -m debug -a &amp;ldquo;msg={{ &amp;lsquo;mypassword&amp;rsquo; | password_hash(&amp;lsquo;sha512&amp;rsquo;, &amp;lsquo;mysecretsalt&amp;rsquo;) }}&amp;rdquo;
&lt;ul>
&lt;li>命令中的 mypassword 就是想要使用的密码，mysecretsalt 则是密码学中加的盐，详见&lt;a href="https://zh.wikipedia.org/wiki/%E7%9B%90_(%E5%AF%86%E7%A0%81%E5%AD%A6)">https://zh.wikipedia.org/wiki/%E7%9B%90_(%E5%AF%86%E7%A0%81%E5%AD%A6)&lt;/a>&lt;/li>
&lt;li>将输出信息引号内的部分直接当做 password 的值即可&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="utilities-实用程序模块">Utilities 实用程序模块&lt;/h1>
&lt;h2 id="helper">Helper&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/meta_module.html#meta-module">meta – Execute Ansible ‘actions’&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="logic">Logic&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/assert_module.html#assert-module">assert – Asserts given expressions are true&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/async_status_module.html#async-status-module">async_status – Obtain status of asynchronous task&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/debug_module.html#debug-module">debug – Print statements during execution&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/fail_module.html#fail-module">fail – Fail with custom message&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/import_playbook_module.html#import-playbook-module">import_playbook – Import a playbook&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/import_role_module.html#import-role-module">import_role – Import a role into a play&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/import_tasks_module.html#import-tasks-module">import_tasks – Import a task list&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/include_module.html#include-module">include – Include a play or task list&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/include_role_module.html#include-role-module">include_role – Load and execute a role&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/include_tasks_module.html#include-tasks-module">include_tasks – Dynamically include a task list&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/include_vars_module.html#include-vars-module">include_vars – Load variables from files, dynamically within a task&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/pause_module.html#pause-module">pause – Pause playbook execution&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/set_fact_module.html#set-fact-module">set_fact – Set host facts from a task&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/set_stats_module.html#set-stats-module">set_stats – Set stats for the current ansible run&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/wait_for_module.html#wait-for-module">wait_for – Waits for a condition before continuing&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/wait_for_connection_module.html#wait-for-connection-module">wait_for_connection – Waits until remote system is reachable/usable&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="debughttpsdocsansiblecomansiblelatestcollectionsansiblebuiltindebug_modulehtml--输出变量或表达式">&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/debug_module.html">debug&lt;/a> # 输出变量或表达式&lt;/h2>
&lt;p>该模块可以在 playbook 执行期间，输出指定的内容，而不用停止 playbook。常用于调试变量或者表达式。比如使用 shell 模块的时候，可以通过 debug 模块来输出 shell 模块定义的语句的执行结果&lt;/p>
&lt;p>常与 when 指令一起使用。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Print the gateway for each host when defined&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ansible.builtin.debug&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">msg&lt;/span>: &lt;span style="color:#ae81ff">System {{ inventory_hostname }} has gateway {{ ansible_default_ipv4.gateway }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">when&lt;/span>: &lt;span style="color:#ae81ff">ansible_default_ipv4.gateway is defined&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Get uptime information&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ansible.builtin.shell&lt;/span>: &lt;span style="color:#ae81ff">/usr/bin/uptime&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">register&lt;/span>: &lt;span style="color:#ae81ff">result&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Print return information from the previous task&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ansible.builtin.debug&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">var&lt;/span>: &lt;span style="color:#ae81ff">result&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">verbosity&lt;/span>: &lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Display all variables/facts known for a host&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ansible.builtin.debug&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">var&lt;/span>: &lt;span style="color:#ae81ff">hostvars[inventory_hostname]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">verbosity&lt;/span>: &lt;span style="color:#ae81ff">4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Prints two lines of messages, but only if there is an environment value set&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ansible.builtin.debug&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">msg&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e6db74">&amp;#34;Provisioning based on YOUR_KEY which is: {{ lookup(&amp;#39;env&amp;#39;, &amp;#39;YOUR_KEY&amp;#39;) }}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e6db74">&amp;#34;These servers were built using the password of &amp;#39;{{ password_used }}&amp;#39;. Please retain this for later use.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="failhttpsdocsansiblecomansiblelatestcollectionsansiblebuiltinfail_modulehtml--终止任务的执行并输出自定义的消息">&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/fail_module.html">fail&lt;/a> # 终止任务的执行，并输出自定义的消息&lt;/h2>
&lt;h2 id="import-与-include-模块--在主任务中导入其他任务或变量">import 与 include 模块 # 在主任务中导入其他任务或变量&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.cnblogs.com/mauricewei/p/10054041.html">https://www.cnblogs.com/mauricewei/p/10054041.html&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.5/user">https://docs.ansible.com/ansible/2.5/user&lt;/a>_guide/playbooks_reuse.html#differences-between-static-and-dynamic&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.5/user">https://docs.ansible.com/ansible/2.5/user&lt;/a>_guide/playbooks_conditionals.html#applying-when-to-roles-imports-and-includes&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>随着要管理的服务不断增多，我们的 Playbook 也会越来越大，内容越来越多，管理起来也会随着复杂。这时，我们可以将某些 tasks 分散到很多文件中，通过 import 和 include 相关模块，实现 tasks 文件之间的相互调用。&lt;/p>
&lt;p>说白了，就是聚合多个文件的 tasks。&lt;/p>
&lt;p>一共有如下几种模块可以实现这类功能：&lt;/p>
&lt;ul>
&lt;li>import_playbook&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/import_role_module.html">import_role&lt;/a> #&lt;/li>
&lt;li>import_tasks # &lt;strong>Static(静态)&lt;/strong> 方法，在 playbooks 解析阶段将父 task 变量和子 task 变量全部读取并加载&lt;/li>
&lt;li>include&lt;/li>
&lt;li>include_tasks # &lt;strong>Dynamic(动态)&lt;/strong> 方法，在执行 play 之前才会加载自己变量&lt;/li>
&lt;li>include_vars&lt;/li>
&lt;/ul>
&lt;h3 id="动态与静态导入-tasks-的区别">动态与静态导入 tasks 的区别&lt;/h3>
&lt;h4 id="区别一">区别一&lt;/h4>
&lt;ul>
&lt;li>import_tasks(Static) 方法会在 playbooks 解析阶段将父 task 变量和子 task 变量全部读取并加载&lt;/li>
&lt;li>include_tasks(Dynamic) 方法则是在执行 play 之前才会加载自己变量&lt;/li>
&lt;/ul>
&lt;p>可能有点懵，举例说明
&lt;strong>下面两个例子是 test.yml 里的 task 调用 test2.yml，不同之处是一个使用 import_tasks 另一个使用 include_tasks&lt;/strong>
import_tasks：在执行 tasks 之前，ansible 解释器会先加载 test.yml 里的变量同时再加载 test2.yml 里的变量，那么 ansible_os_family 变量会有一个覆盖现象产生，最终的参数应为“BlackHat”，所以当 test.yml 里执行 when 语句时，ansible_os_family 被判定为“BlackHat”，when 的判断结果为 false，也就不会调用 test2.yml 了&lt;/p>
&lt;p>执行结果如下，test2.yml 里的 task 都被 skip 了：&lt;/p>
&lt;p>include_tasks：ansible 会在完全执行完 test.yml 里的 task 后才会加载 test2.yml 里的变量，所以当执行 when 语句时，ansible_os_family 的参数应为“RedHat”，此时 when 语句判断结果是 true，也就是 test2.yml 里的 tasks 会被执行。
将第一张图 test.yaml 里的 import_tasks 换成 include_tasks，执行结果如下：&lt;/p>
&lt;p>我们发现自 test2.yml 里的 task 被执行了，并且在 test2.yml 里 ansible_os_family 的参数变为了“BlackHat”。
这就是 include_tasts 和 import_tasks 方法的第一个区别。&lt;/p>
&lt;h4 id="区别二">区别二&lt;/h4>
&lt;ul>
&lt;li>include_tasks 方法调用的文件名称可以加变量&lt;/li>
&lt;li>import_tasks 方法调用的文件名称不可以有变量&lt;/li>
&lt;/ul>
&lt;p>这个区别比较简单，直接上示例：
当调用的文件名称有变量时，使用 include_tasks 方法：&lt;/p>
&lt;p>能够正常调用 test2.yml，执行结果如下：
当使用 import_tasks 方法时，执行报错。
ansible 也给出了错误原因，当使用 static include 时，是不能使用变量的：
这就是 include_tasts 和 import_tasks 方法的第二个区别。&lt;/p></description></item><item><title>Docs: ansible.posix(POSIX 标准模块)</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/ansible/ansible-modules%E6%A8%A1%E5%9D%97/ansible.posixposix-%E6%A0%87%E5%87%86%E6%A8%A1%E5%9D%97/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/ansible/ansible-modules%E6%A8%A1%E5%9D%97/ansible.posixposix-%E6%A0%87%E5%87%86%E6%A8%A1%E5%9D%97/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/index_module.html#ansible-posix">官方文档，参考-所有模块和插件的索引-所有模块的索引-ansible.posix&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>posix 模块是关于符合 POSIX 标准的操作系统相关的模块&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/posix/acl_module.html#ansible-collections-ansible-posix-acl-module">ansible.posix.acl&lt;/a> – Set and retrieve file ACL information.&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/posix/at_module.html#ansible-collections-ansible-posix-at-module">ansible.posix.at&lt;/a> – Schedule the execution of a command or script file via the at command&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/posix/authorized_key_module.html#ansible-collections-ansible-posix-authorized-key-module">ansible.posix.authorized_key&lt;/a> – Adds or removes an SSH authorized key&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/posix/firewalld_module.html#ansible-collections-ansible-posix-firewalld-module">ansible.posix.firewalld&lt;/a> – Manage arbitrary ports/services with firewalld&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/posix/firewalld_info_module.html#ansible-collections-ansible-posix-firewalld-info-module">ansible.posix.firewalld_info&lt;/a> – Gather information about firewalld&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/posix/mount_module.html#ansible-collections-ansible-posix-mount-module">ansible.posix.mount&lt;/a> – Control active and configured mount points&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/posix/patch_module.html#ansible-collections-ansible-posix-patch-module">ansible.posix.patch&lt;/a> – Apply patch files using the GNU patch tool&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/posix/seboolean_module.html#ansible-collections-ansible-posix-seboolean-module">ansible.posix.seboolean&lt;/a> – Toggles SELinux booleans&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/posix/selinux_module.html#ansible-collections-ansible-posix-selinux-module">ansible.posix.selinux&lt;/a> – Change policy and state of SELinux&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/posix/synchronize_module.html#ansible-collections-ansible-posix-synchronize-module">ansible.posix.synchronize&lt;/a> # 围绕 rsync 工具的模块&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/posix/sysctl_module.html#ansible-collections-ansible-posix-sysctl-module">ansible.posix.sysctl&lt;/a> – Manage entries in sysctl.conf.&lt;/li>
&lt;/ul></description></item><item><title>Docs: ansible通过跳板机与目标主机通信</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/ansible/ansible-%E7%AE%A1%E7%90%86/ansible%E9%80%9A%E8%BF%87%E8%B7%B3%E6%9D%BF%E6%9C%BA%E4%B8%8E%E7%9B%AE%E6%A0%87%E4%B8%BB%E6%9C%BA%E9%80%9A%E4%BF%A1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/ansible/ansible-%E7%AE%A1%E7%90%86/ansible%E9%80%9A%E8%BF%87%E8%B7%B3%E6%9D%BF%E6%9C%BA%E4%B8%8E%E7%9B%AE%E6%A0%87%E4%B8%BB%E6%9C%BA%E9%80%9A%E4%BF%A1/</guid><description>
&lt;p>在公司开发中，为了安全起见，生产环境跟开发环境是相互隔离开来的。也就是说在开发环境网络中无法直接 ssh 登录到生产环境的机器， 如果需要登录生产环境的机器，通常会需要借助跳板机，先登录到跳板机，然后通过跳板机登录到生产环境。&lt;/p>
&lt;p>那么，使用 Ansible 时，如何配置，可以直接穿过跳板机呢？&lt;/p>
&lt;p>大致的过程如下面的图示：&lt;/p>
&lt;pre>&lt;code>+-------------+ +----------+ +--------------+
| 开发环境机器A | &amp;lt;---&amp;gt; | 跳板机B | &amp;lt;--&amp;gt; | 生产环境机器B |
+-------------+ +----------+ +--------------+
&lt;/code>&lt;/pre>
&lt;p>我们可以通过 ssh 命令的 ProxyCommand 选项来解决以上问题。&lt;/p>
&lt;p>通过 ProxyCommand 选项，机器 A 能够灵活使用任意代理机制与机器 C 上的 SSH Server 端口建立连接，接着机器 A 上的 SSH Client 再与该连接进行数据交互，从而机器 A 上的 SSH Client 与机器 C 上的 SSH Server 之间建立了与一般直接 SSH 连接不太一样的间接 SSH 连接。&lt;/p>
&lt;p>不过由于间接 SSH 连接的透明性，逻辑上可认为机器 A 上的 SSH Client 与机器 C 上的 SSH Server 建立了直接 SSH 连接。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/wawlgb/1616124930604-fefb5961-13b2-48ca-ad59-0e623b3bdc35.jpeg" alt="">&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/wawlgb/1616124930609-2ca4dea8-3c64-4b8f-9e78-b37dd522fdba.jpeg" alt="">
原理&lt;/p>
&lt;p>ssh 命令自提供的代理机制，在机器 A 上另外单独建立与 B 的 SSH 连接，该 SSH 连接的 B 端侧与机器 C 上的 SSH Server 端口建立连接，该 SSH 连接的 A 端侧与机器 A 上的 SSH Client 建立连接。&lt;/p>
&lt;h1 id="测试环境">测试环境&lt;/h1>
&lt;p>A-本机：192.22.9.23&lt;/p>
&lt;p>B-跳板机：192.22.9.21&lt;/p>
&lt;p>C-目标机：192.22.4.46&lt;/p>
&lt;p>条件：A-&amp;gt;B 的互信&lt;/p>
&lt;h1 id="测试步骤">测试步骤&lt;/h1>
&lt;h2 id="测试-1">测试 1&lt;/h2>
&lt;p>A–&amp;gt;B：root 用户的互信
C：root 的登录信息&lt;/p>
&lt;pre>&lt;code># ansible all -m ping --ssh-common-args='-o ProxyCommand=&amp;quot;ssh -W %h:%p -q root@10.0.13.251&amp;quot;'
192.22.4.46 | SUCCESS =&amp;gt; {
&amp;quot;changed&amp;quot;: false,
&amp;quot;ping&amp;quot;: &amp;quot;pong&amp;quot;
}
&lt;/code>&lt;/pre>
&lt;p>可以成功穿过跳板机。&lt;/p>
&lt;h2 id="测试-2">测试 2&lt;/h2>
&lt;p>A–&amp;gt;B：一般用户（luke）的互信&lt;/p>
&lt;p>C：root 的登录信息&lt;/p>
&lt;pre>&lt;code># ansible all -m ping --ssh-common-args='-o ProxyCommand=&amp;quot;ssh -W %h:%p -q lichenhao@10.0.13.251&amp;quot;'
192.22.4.46 | SUCCESS =&amp;gt; {
&amp;quot;changed&amp;quot;: false,
&amp;quot;ping&amp;quot;: &amp;quot;pong&amp;quot;
}
&lt;/code>&lt;/pre>
&lt;p>跳板机普通用户，访问目标机器的 root 目录&lt;/p>
&lt;pre>&lt;code># ansible all --ssh-common-args='-o ProxyCommand=&amp;quot;ssh -W %h:%p -q lichenhao@10.0.13.251&amp;quot;' -m command -a 'ls /root/'
192.22.4.46 | CHANGED | rc=0 &amp;gt;&amp;gt;
1115.txt
anaconda-ks.cfg
deploytelegraf
deploytelegraf.tar.gz
epic-brook.18.11.20.01.tar.gz
epic-josh-threshold.0.1.26.tar.gz
images.tar.gz
metric.tar.gz
python-httplib2-0.9.2-1.el7.noarch.rpm
restates
sensu-1.6.1-1.el7.x86_64.rpm
sshpass-1.06-2.el7.x86_64.rpm
test1115.txt
tl.txt
&lt;/code>&lt;/pre>
&lt;p>结论&lt;/p>
&lt;p>访问权限取决于目标机器的登录用户。&lt;/p>
&lt;h2 id="测试-3">测试 3&lt;/h2>
&lt;p>A–&amp;gt;B：一般用户（luke）的互信&lt;/p>
&lt;p>C：一般用户（luke）的登录信息&lt;/p>
&lt;pre>&lt;code># ansible all -m ping --ssh-common-args='-o ProxyCommand=&amp;quot;ssh -W %h:%p -q lichenhao@10.0.13.251&amp;quot;'
192.22.4.46 | SUCCESS =&amp;gt; {
&amp;quot;changed&amp;quot;: false,
&amp;quot;ping&amp;quot;: &amp;quot;pong&amp;quot;
}
&lt;/code>&lt;/pre>
&lt;!-- raw HTML omitted -->
&lt;pre>&lt;code># ansible all --ssh-common-args='-o ProxyCommand=&amp;quot;ssh -W %h:%p -q lichenhao@10.0.13.251&amp;quot;' -m command -a 'pwd'
192.22.4.46 | CHANGED | rc=0 &amp;gt;&amp;gt;
/home/lichenhao
&lt;/code>&lt;/pre>
&lt;p>跳板机普通用户，目标机普通用户，无法访问 root&lt;/p>
&lt;pre>&lt;code># ansible all --ssh-common-args='-o ProxyCommand=&amp;quot;ssh -W %h:%p -q lichenhao@10.0.13.251&amp;quot;' -m command -a 'ls /root/'
192.22.4.46 | FAILED | rc=2 &amp;gt;&amp;gt;
ls: cannot open directory /root/: Permission deniednon-zero return code
&lt;/code>&lt;/pre>
&lt;p>目标机器的普通用户无法访问 root 权限的路径。&lt;/p>
&lt;h2 id="测试-4">测试 4&lt;/h2>
&lt;p>A–&amp;gt;B：root 用户的互信
C：luke 的登录信息&lt;/p>
&lt;pre>&lt;code># ansible all --ssh-common-args='-o ProxyCommand=&amp;quot;ssh -W %h:%p -q lichenhao@10.0.13.251&amp;quot;' -m command -a 'pwd'
192.22.4.46 | CHANGED | rc=0 &amp;gt;&amp;gt;
/home/luke
&lt;/code>&lt;/pre>
&lt;h1 id="总结">总结&lt;/h1>
&lt;p>1、若要使用跳板机功能，需要本机和跳板机的互信，任一用户的互信都可以。&lt;/p>
&lt;p>2、目标机器的操作权限，取决于目标机器的登录用户信息，与跳板机的登录信息无关。&lt;/p>
&lt;p>3、穿过跳板机，无法保证所有的 Ansible 功能都支持，特别是一些复杂的功能，如 synchronize 模块。后续需要用的模块需要一一测试。&lt;/p></description></item><item><title>Docs: Cobbler</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/cobbler/cobbler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/cobbler/cobbler/</guid><description>
&lt;p>前言：&lt;/p>
&lt;p>网络安装服务器套件 Cobbler(补鞋匠) 出现以前，我们一直在做装机民工这份很有前途的职业。自打若干年前 Red Hat 推出了 Kickstart，此后我们顿觉身价倍增。不再需要刻了光盘一台一台地安装 Linux，只要搞定 PXE、DHCP、 TFTP，还有那满屏眼花缭乱不知所云的 Kickstart 脚本，我们就可以像哈里波特一样，轻点魔棒，瞬间安装上百台服务器。这一堆花里胡哨的东西可不是一般人都能整明白的，没有大专以上学历，通不过英语四级， 根本别想玩转。&lt;/p>
&lt;p>总而言之，这是一份多么有前途，多么有技术含量的工作啊。&lt;/p>
&lt;p>很不幸，Red Hat 最新（Cobbler 项目最初在 2008 年左右发布）发布了网络安装服务器套件 Cobbler(补鞋匠)，它已将 Linux 网络安装的技术门槛，从大专以上文化水平，成功降低到初中以下，连补鞋匠都能学会。&lt;/p>
&lt;p>对于我们这些在装机领域浸淫多年，经验丰富，老骥伏枥，志在千里的民工兄弟们来说，不啻为一个晴天霹雳。&lt;/p>
&lt;h1 id="cobbler-介绍">Cobbler 介绍&lt;/h1>
&lt;p>参考：&lt;a href="http://cobbler.github.io/">Cobbler 官网&lt;/a>&lt;/p>
&lt;p>Cobbler 是一个 Linux 服务器快速网络安装的服务，而且在经过调整也可以支持网络安装 windows。&lt;/p>
&lt;p>该工具使用 python 开发，小巧轻便（才 15k 行 python 代码），可以通过网络启动(PXE)的方式来快速安装、重装物理服务器和虚拟机，同时还可以管理 DHCP，DNS，TFTP、RSYNC 以及 yum 仓库、构造系统 ISO 镜像。&lt;/p>
&lt;p>Cobbler 可以使用命令行方式管理，也提供了基于 Web 的界面管理工具(cobbler-web)，还提供了 API 接口，可以方便二次开发使用。&lt;/p>
&lt;p>Cobbler 是较早前的 kickstart 的升级版，优点是比较容易配置，还自带 web 界面比较易于管理。&lt;/p>
&lt;p>Cobbler 内置了一个轻量级配置管理系统，但它也支持和其它配置管理系统集成，如 Puppet，暂时不支持 SaltStack。&lt;/p>
&lt;p>Cobbler 客户端 Koan 支持虚拟机安装和操作系统重新安装，使重装系统更便捷。&lt;/p>
&lt;p>1)Cobbler 可以干啥&lt;/p>
&lt;p>使用 Cobbler，您无需进行人工干预即可安装机器。Cobbler 设置一个 PXE 引导环境（它还可以使用 yaboot 支持 PowerPC），并 控制与安装相关的所有方面，比如网络引导服务（DHCP 和 TFTP）与存储库镜像。当希望安装一台新机器时，Cobbler 可以：&lt;/p>
&lt;p>1）使用一个以前定义的模板来配置 DHCP 服务（如果启用了管理 DHCP）&lt;/p>
&lt;p>2）将一个存储库（yum 或 rsync）建立镜像或解压缩一个媒介，以注册一个新操作系统&lt;/p>
&lt;p>3）在 DHCP 配置文件中为需要安装的机器创建一个条目，并使用指定的参数（IP 和 MAC）&lt;/p>
&lt;p>4）在 TFTP 服务目录下创建适当的 PXE 文件&lt;/p>
&lt;p>5）重新启动 DHCP 服务来反应新的更改&lt;/p>
&lt;p>6）重新启动机器以开始安装（如果电源管理已启动）&lt;/p>
&lt;p>2)Cobbler 支持的系统和功能&lt;/p>
&lt;p>Cobbler 支持众多的发行版：RedHat、Fedora、CentOS、Debian、Ubuntu 和 SUSE。当添加一个操作系统（通常通过使用 ISO 文件）时，Cobbler 知道如何解压缩合适的文件并调整网络服务，以正确引导机器。&lt;/p>
&lt;p>Cobbler 可以使用 kickstart 模板。基于 Red Hat 或 Fedora 的系统使用 kickstart 文件来自动化安装流程。通过使用模板，就会拥有基本的 kickstart 模板，然后定义如何针对一种配置文件或 机器配置而替换其中的变量。例如，一个模板可能包含两个变量$domain和$machine_name.在 Cobbler 配置中，一个配置文件指定 domain=mydomain.com，并且每台使用该配置文件的机器在 machine_name 变量中指定其名称。该配置文件的所有机器都使用相同的 kickstart 安装且针对 domain=mydomain.com 进行配置，但每台机器拥有其自己的机器名称。您仍然可以使用 kickstart 模板 在不同的域中安装其他机器并使用不同的机器名称。&lt;/p>
&lt;p>为了协助管理系统，Cobbler 可通过 fence scripts 连接到各个电源管理环境。Cobbler 支持 apc_snmp、bladecenter、bullpap、drac、 ether_wake、ilo、integrity、ipmilan、ipmitool、lpar、rsa、virsh 和 wti。要重新安装一台机器，可 运行 reboot system foo 命令，而且 Cobbler 会使用必要的 和信息来为您运行恰当的 fence scripts（比如机器插槽数）。&lt;/p>
&lt;p>除了这些特性，还可以使用一个配置管理系统（CMS）。你有两种选择：该工具内的一个内部系统，或者现成的外部 CMS，比如 Chef 或 Puppet。借助内部系统，你可以指定文件模板，这些模板会依据配置参数进行处理（与 kickstart 模板的处理方式一样），然后复制到你指定的位 置。如果必须自动将配置文件部署到特定机器，那么此功能很有用&lt;/p>
&lt;p>使用 koan 客户端，Cobbler 可从客户端配置虚拟机并重新安装系统。&lt;/p>
&lt;h2 id="cobbler-各个组件之间关系">Cobbler 各个组件之间关系：&lt;/h2>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/tegfcw/1616125382993-9ef824a6-a456-4fc4-9eeb-8ca756ca7705.jpeg" alt="">&lt;/p>
&lt;p>主要目的配置网络接口：&lt;/p>
&lt;p>Cobbler 的配置结构基于一组注册的对象。每个对象表示一个与另一个实体相关联的实体（该对象指向另一个对象，或者另一个对象指向该对象）。当一个对象指向另一个对象时，它就继承了被指向对象的数据，并可覆盖或添加更多特定信息。以下对象类型的定义&lt;/p>
&lt;ol>
&lt;li>Distros（发行版）：表示一个操作系统，它承载了内核和 initrd 的信息，以及内核参数等其他数据。使用 cobbler import 命令后即可生成该对象&lt;/li>
&lt;li>Profile（配置文件）：包含一个 Distros、一个 kickstart 文件以及可能的存储库，还包含更多特定的内核参数等其他数据。使用 cobbler import 命令后，会默认使用名为/var/lib/cobbler/kickstarts/sample_end.ks 的 kickstart 文件。&lt;/li>
&lt;li>Systems（系统）：表示将要安装的新机器。它包含一个配置文件或一个镜像，还包含该机器的 IP 和 MAC 地址、电源管理（地址、凭据、类型）、（网卡绑定、设置 valn 等）&lt;/li>
&lt;li>Repository（镜像）：保存一个 yum 或 rsync 存储库的镜像信息&lt;/li>
&lt;li>Image（存储库）：可替换一个包含不属于此类比的额文件的发行版对象（例如，无法分为内核和 initrd 的对象）。&lt;/li>
&lt;/ol>
&lt;p>基于注册的对象以及各个对象之间的关联，Cobbler 知道如何更改文件系统以反应具体配置。因为系统配置的内部是抽象的，所以可以仅关注想要执行的操作。&lt;/p></description></item><item><title>Docs: Cobbler 部署</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/cobbler/cobbler-%E9%83%A8%E7%BD%B2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/cobbler/cobbler-%E9%83%A8%E7%BD%B2/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;h2 id="基础环境准备">基础环境准备&lt;/h2>
&lt;ul>
&lt;li>检测 selinux 是否关闭(必须关闭)
&lt;ul>
&lt;li>setenforce 0&lt;/li>
&lt;li>sed -i &amp;rsquo;s/SELINUX=enforcing/SELINUX=disabled/&amp;rsquo; /etc/selinux/config&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>检测防火墙是否关闭(必须关闭)
&lt;ul>
&lt;li>systemctl disable firewalld &amp;amp;&amp;amp; systemctl stop firewalld&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>注意：&lt;/p>
&lt;ul>
&lt;li>虚拟机网卡采用桥接模式，不使用 NAT 模式，我们会搭建 DHCP 服务器，在同一局域网多个 DHCP 服务会有冲突，所以最好把路由器的 DHCP 服务关闭&lt;/li>
&lt;/ul>
&lt;h2 id="安装-cobbler-以及相关功能配件">安装 Cobbler 以及相关功能配件&lt;/h2>
&lt;ul>
&lt;li>yum install cobbler cobbler-web pykickstart httpd dhcp tftp-server fence-agents -y
&lt;ul>
&lt;li>cobbler #cobbler 程序包&lt;/li>
&lt;li>cobbler-web #cobbler 的 web 服务包&lt;/li>
&lt;li>pykickstart #cobbler 检查 kickstart 语法错误&lt;/li>
&lt;li>httpd #Apache web 服务&lt;/li>
&lt;li>dhcp #dhcp 服务&lt;/li>
&lt;li>tftp-server #tftp 服务&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>systemctl enable cobblerd httpd tftp rsyncd dhcpd &amp;amp;&amp;amp; systemctl start cobblerd httpd tftp rsyncd dhcpd&lt;/li>
&lt;/ul>
&lt;h2 id="检测-cobbler">检测 Cobbler&lt;/h2>
&lt;p>cobbler 的运行依赖于 dhcp、tftp、rsync 及 dns 服务，其中 dhcp 可由 dhcpd（isc）提供，也可由 dnsmasq 提供；tftp 可由 tftp-server 程序包提供，也可由 cobbler 功能提供，rsync 有 rsync 程序包提供，dns 可由 bind 提供，也可由 dnsmasq 提供&lt;/p>
&lt;p>cobbler 可自行管理这些服务中的部分甚至是全部，但需要配置文件/etc/cobbler/settings 中的“manange_dhcp”、“manager_tftpd”、“manager_rsync”、“manager_dns”分别来进行定义，另外，由于各种服务都有着不同的实现方式，如若需要进行自定义，需要通过修改/etc/cobbler/modules.conf 配置文件中各服务的模块参数的值来实现。&lt;/p>
&lt;h3 id="检查配置文件并修改其中的错误提示需要在-cobblerd-和-httpd-启动的情况下检查">检查配置文件，并修改其中的错误提示。需要在 cobblerd 和 httpd 启动的情况下检查&lt;/h3>
&lt;p>检查 cobbler 配置存在的问题,逐一解决&lt;/p>
&lt;p>cobbler check&lt;/p>
&lt;p>使用该命令后，会出现若干报错，以下是对几个报错的总结&lt;/p>
&lt;p>备份将要修改的文件文件&lt;/p>
&lt;p>cp /etc/cobbler/settings{,.bak}&lt;/p>
&lt;p>cp /etc/xinetd.d/tftp{,.bak}&lt;/p>
&lt;ol>
&lt;li>The &amp;lsquo;server&amp;rsquo; field in /etc/cobbler/settings must be set to something other than localhost, or kickstarting features will not work. This should be a resolvable hostname or IP for the boot server as reachable by all machines that will use it.
&lt;ol>
&lt;li>修改/etc/cobbler/settings 文件中的 server 参数的值为提供 cobbler 服务的主机相应的 IP 地址或主机名 server，Cobbler 服务器的 IP，修改 384 行 server: 127.0.0.1
&lt;ol>
&lt;li>sed -i &amp;rsquo;s/server: 127.0.0.1/server: 192.168.10.11/&amp;rsquo; /etc/cobbler/settings&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>For PXE to be functional, the &amp;rsquo;next_server&amp;rsquo; field in /etc/cobbler/settings must be set to something other than 127.0.0.1, and should match the IP of the boot server on the PXE network
&lt;ol>
&lt;li>修改/etc/cobbler/settings 文件中的 next_server 参数的值为提供 PXE 服务的主机相应的 IP 地址，如 next_server: 192.168.31.73；
&lt;ol>
&lt;li>server，pxe 服务器的 IP，由于这里使用的是同一台机器，所以填 Cobbler 服务器的 IP，修改 272 行 next_server: 127.0.0.1
&lt;ol>
&lt;li>sed -i &amp;rsquo;s/next_server: 127.0.0.1/next_server: 192.168.10.11/&amp;rsquo; /etc/cobbler/settings&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>change &amp;lsquo;disable&amp;rsquo; to &amp;rsquo;no&amp;rsquo; in /etc/xinetd.d/tftp
&lt;ol>
&lt;li>修改/etc/xinetd.d/tftp 文件中的 disable 参数修改为 disable = no
&lt;ol>
&lt;li>sed -i &amp;rsquo;s/disable.*= yes/disable = no/g&amp;rsquo; /etc/xinetd.d/tftp&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>some network boot-loaders are missing from /var/lib/cobbler/loaders, you may run &amp;lsquo;cobbler get-loaders&amp;rsquo; to download them, or, if you only want to handle x86/x86&lt;em>64 netbooting, you may ensure that you have installed a _recent&lt;/em> version of the syslinux package installed and can ignore this message entirely. Files in this directory, should you want to support all architectures, should include pxelinux.0, menu.c32, elilo.efi, and yaboot. The &amp;lsquo;cobbler get-loaders&amp;rsquo; command is the easiest way to resolve these requirements.
&lt;ol>
&lt;li>执行 cobbler get-loaders 命令即可；否则，需要安装 syslinux 程序包，而后复制/usr/share/syslinux/{pxelinux.0,memu.c32}等文件至/var/lib/cobbler/loaders/目录中
&lt;ol>
&lt;li>cobbler get-loaders&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>debmirror package is not installed, it will be required to manage debian deployments and repositories
&lt;ol>
&lt;li>安装 debmirror
&lt;ol>
&lt;li>yum install debmirror -y&lt;/li>
&lt;li>cp /etc/debmirror.conf{,.bak}&lt;/li>
&lt;li>sed -i &amp;lsquo;/@dists/s/^/#&amp;amp;/&amp;rsquo; /etc/debmirror.conf&lt;/li>
&lt;li>sed -i &amp;lsquo;/@arches/s/^/#&amp;amp;/&amp;rsquo; /etc/debmirror.conf&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>The default password used by the sample templates for newly installed machines (default_password_crypted in /etc/cobbler/settings) is still set to &amp;lsquo;cobbler&amp;rsquo; and should be changed, try: &amp;ldquo;openssl passwd -1 -salt &amp;lsquo;random-phrase-here&amp;rsquo; &amp;lsquo;your-password-here&amp;rsquo;&amp;rdquo; to generate new one
&lt;ol>
&lt;li>生成密码来取代默认的密码，更安全。该密码用来给新安装的设备提供 root 密码。根据提示 your-password-here，这里是自己的密码，random-phrase-here，这里是随机的干扰码
&lt;ol>
&lt;li>openssl passwd -1 -salt &amp;rsquo;lichenhao&amp;rsquo; &amp;lsquo;123456&amp;rsquo;
&lt;ol>
&lt;li>$1$lichenha$UkZ9KiUaiwS/0C324YtoP0&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>sed -i &amp;rsquo;s/&amp;lsquo;default_password_crypted:.*&amp;rsquo;/&amp;lsquo;default_password_crypted: &amp;ldquo;$1$lichenha$UkZ9KiUaiwS/0C324YtoP0&amp;rdquo;/g&amp;rsquo; /etc/cobbler/settings&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>其他一些没有提示报错的小修改&lt;/p>
&lt;ol>
&lt;li>用 cobbler 管理 DHCP，修改 242 行 manage_dhcp: 0
&lt;ol>
&lt;li>sed -i &amp;rsquo;s/manage_dhcp: 0/manage_dhcp: 1/g&amp;rsquo; /etc/cobbler/settings&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>防止循环装系统，适用于服务器第一启动项是 PXE 启动，修改 292 行 pxe_just_once: 0
&lt;ol>
&lt;li>sed -i &amp;rsquo;s/pxe_just_once: 0/pxe_just_once: 1/&amp;rsquo; /etc/cobbler/settings&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>修改完后重启服务再进行一次检测,若提示 No configuration problems found. All systems go. 则可继续后续步骤&lt;/p>
&lt;ol>
&lt;li>systemctl restart cobblerd.service&lt;/li>
&lt;li>cobbler check&lt;/li>
&lt;/ol>
&lt;h3 id="配置-dhcp">配置 DHCP&lt;/h3>
&lt;ol>
&lt;li>修改 cobbler 的 dhcp 模版，这个模板会覆盖 dhcp 本身的配置文件。&lt;/li>
&lt;li>cp /etc/cobbler/dhcp.template{,.bak}&lt;/li>
&lt;li>vim /etc/cobbler/dhcp.template&lt;/li>
&lt;li>在文件末尾添加如下内容
&lt;ol>
&lt;li>subnet 192.168.10.0 netmask 255.255.255.0 { #规划一段子网以便用于被安装系统的设备来获取这一段 IP&lt;/li>
&lt;li>option domain-name-servers 114.114.114.114; #指定该子网的 DNS&lt;/li>
&lt;li>option routers 192.168.10.2; #指定该段子网的网关&lt;/li>
&lt;li>range dynamic-bootp 192.168.10.100 192.168.10.250; #指定给被安装系统的设备可用的 IP 段&lt;/li>
&lt;li>option subnet-mask 255.255.255.0; #指定该子网的掩码&lt;/li>
&lt;li>next-server $next_server;&lt;/li>
&lt;li>default-lease-time 43200;&lt;/li>
&lt;li>max-lease-time 86400;&lt;/li>
&lt;li>}&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h2 id="导入镜像">导入镜像&lt;/h2>
&lt;ol>
&lt;li>挂载 centos 光盘镜像
&lt;ol>
&lt;li>mount /dev/cdrom /mnt/&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>导入镜像,创建一个可以提供给其余被安装设备将要使用到的系统镜像
&lt;ol>
&lt;li>cobbler import &amp;ndash;path=/mnt/ &amp;ndash;name=CentOS7-2003 &amp;ndash;arch=x86_64&lt;/li>
&lt;li>安装源的唯一标示就是根据 name 参数来定义，本例导入成功后，安装源的唯一标示就是：CentOS7-2003-x86_64，如果重复，系统会提示导入失败。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>同步 cobbler 的配置，可以看到同步干了哪些事
&lt;ol>
&lt;li>cobbler sync&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>查看镜像列表
&lt;ol>
&lt;li>cobbler distro list
&lt;ol>
&lt;li>镜像存放目录，cobbler 会将镜像中的所有安装文件拷贝到本地一份，放在/var/www/cobbler/ks_mirror 下的 CentOS7-2003-x86_64 目录下。因此/var/www/cobbler 目录必须具有足够容纳安装文件的空间，查看一下目录内容
&lt;ol>
&lt;li>cd /var/www/cobbler/ks_mirror/&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h3 id="配置-kscfg">配置 ks.cfg&lt;/h3>
&lt;ol>
&lt;li>cd /var/lib/cobbler/kickstarts/&lt;/li>
&lt;li>vim centos7.ks #（sample_end.ks（默认使用的 ks 文件））修改成以下内容&lt;/li>
&lt;li>注意：文件中不能有中文，即使注释掉也不行，否则会导致安装失败&lt;/li>
&lt;/ol>
&lt;!-- raw HTML omitted -->
&lt;pre>&lt;code>#platform=x86, AMD64, or Intel EM64T
# System authorization information系统认证信息，使用加密，md5方式加密
auth --useshadow --enablemd5
# System bootloader configuration系统引导配置
# --location指定创建引导的位置，在mbr中创建引导；--append指定内核参数，crashkernel为开启kdump
bootloader --location=mbr --append=&amp;quot;crashkernel=auto&amp;quot;
# Partition clearing information分区清除信息
# 清除所有分区，并初始化磁盘标签
clearpart --all --initlabel
# Use text mode install
text
# Firewall configuration关闭防火墙
firewall --disabled
# Run the Setup Agent on first boot
firstboot --disable
# System keyboard系统键盘
keyboard us
# System language系统语言
lang en_US
# Use network installation指明安装系统的方式，这里使用网络方式安装，指明提供安装程序的服务器地址和路径
url --url=$tree
# If any cobbler repo definitions were referenced in the kickstart profile, include them here.
$yum_repo_stanza
# $SNIPPET变量括号内的值是目录/var/lib/cobbler/snippets下的文件，该文件中可以写入linux命令，当做脚本文件来说明
# Network information
$SNIPPET('network_config')
# Reboot after installation安装完成后重启系统
reboot
#Root password设定root的密码
rootpw --iscrypted $default_password_crypted
# SELinux configuration关闭SELinux
selinux --disabled
# Do not configure the X Window System不要配置X window系统
skipx
# System timezone设定系统时区
timezone Asia/Shanghai
# Install OS instead of upgrade重新安装操作系统，而不是升级
install
# Clear the Master Boot Record清除主引导记录
zerombr
# Allow anaconda to partition the system as needed该选项用于自动分区
#autopart
# Disk partitioning information磁盘分区信息
part /boot --fstype=xfs --asprimary --size=500
part biosboot --fstype=biosboot --asprimary --size=2
part pv.01 --size=1 --grow
volgroup vg0 pv.01
logvol / --fstype xfs --size=10240 --name=root --vgname=vg0
logvol swap --fstype swap --size=1024 --name=swap --vgname=vg0
logvol /var --fstype xfs --size=1 --grow --name=var --vgname=vg0
%pre
# %pre段落为安装前执行的任务
%end
%packages
# %package段落中指定要安装的软件包
@^minimal
@core
kexec-tools
%end
%post
#`%post`段落为安装系统完成后执行的任务
# 自定义系统配置
# 安装工具，在/var/lib/cobbler/snippets目录下添加名为tools的文件，文件中可以写入想要执行的linux命令
$SNIPPET('tools')
# End final steps
%end
&lt;/code>&lt;/pre>
&lt;ol>
&lt;li>在第一次导入系统镜像后，Cobbler 会给镜像指定一个默认的 kickstart 自动安装文件在/var/lib/cobbler/kickstarts 下的 sample_end.ks。&lt;/li>
&lt;li>cobbler list&lt;/li>
&lt;li>查看所有的 profile 设置
&lt;ol>
&lt;li>cobbler profile report&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>编辑 profile，修改关联的 ks 文件
&lt;ol>
&lt;li>cobbler profile edit &amp;ndash;name=CentOS7-2003-x86_64 &amp;ndash;kickstart=/var/lib/cobbler/kickstarts/CentOS7.ks&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>（可选）修改安装系统的内核参数，使得网卡名变为 eth
&lt;ol>
&lt;li>cobbler profile edit &amp;ndash;name=CentOS7-2003-x86_64 &amp;ndash;kopts=&amp;lsquo;net.ifnames=0 biosdevname=0&amp;rsquo;&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>可以看到下面 Kickstart 那里的配 置 cfg 文件地址被改变了[root@cobbler kickstarts]# cobbler profile report &amp;ndash;name=CentOS7-2003-x86_64 Name : CentOS7-2003-x86_64 TFTP Boot Files : {}Comment : DHCP Tag : defaultDistribution : CentOS7-2003-x86_64 Enable gPXE? : 0Enable PXE Menu? : 1Fetchable Files : {}Kernel Options : {}Kernel Options (Post Install) : {}Kickstart : /var/lib/cobbler/kickstarts/CentOS7-2003-x86_64.cfgKickstart Metadata : {}Management Classes : []Management Parameters : &amp;lt;&amp;gt;Name Servers : []Name Servers Search Path : []Owners : [&amp;lsquo;admin&amp;rsquo;]Parent Profile : Internal proxy : Red Hat Management Key : &amp;lt;&amp;gt;Red Hat Management Server : &amp;lt;&amp;gt;Repos : []Server Override : &amp;lt;&amp;gt;Template Files : {}Virt Auto Boot : 1Virt Bridge : xenbr0Virt CPUs : 1Virt Disk Driver Type : rawVirt File Size(GB) : 5Virt Path : Virt RAM (MB) : 512Virt Type : kvm#同步下 cobbler 数据，每次修改完都要镜像同步&lt;/p>
&lt;h2 id="开始批量安装系统">开始批量安装系统&lt;/h2>
&lt;p>cobbler 已经配置完成，开机后，使用 PXE 启动后，如果 DHCP 运行正常，则可看到如下界面&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/wf5w0g/1616125382981-7146a22b-241d-4c33-96f5-7167cabf7bf4.jpeg" alt="">&lt;/p>
&lt;p>这里如果方向键不选择第二项就无法装机，不算自动化，我们需要进行手动指定才可以完全自动化&lt;/p>
&lt;h2 id="全自动化安装">全自动化安装&lt;/h2>
&lt;p>上面可以看到在开机之后，还需要手动选择一下，还不够完全自动，如果想要开机之后，不用任何操作即可安装系统，那么可以使用 cobbler system 命令，通过 mac 来区分设备，当 cobbler 识别到 mac 时，就会自动选择 profiles 进行安装。&lt;/p>
&lt;p>VMware 查看物理 MAC 地址&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/wf5w0g/1616125383095-bb54ec6c-c5ff-49ea-a276-16b88900e2d7.jpeg" alt="">&lt;/p>
&lt;ol>
&lt;li>cobbler system add &amp;ndash;name=test &amp;ndash;mac=52:54:00:be:29:97 &amp;ndash;profile=CentOS8-2004-x86_64 &amp;ndash;ip-address=10.10.100.230 &amp;ndash;subnet=255.255.255.0 &amp;ndash;gateway=10.10.100.254 &amp;ndash;interface=eth0 &amp;ndash;static=1 &amp;ndash;hostname=cobbler-system-test &amp;ndash;name-servers=&amp;ldquo;223.5.5.5&amp;rdquo;&lt;/li>
&lt;/ol>
&lt;p>Note：&lt;/p>
&lt;ul>
&lt;li>此功能需要在 ks 文件中添加如下内容，否则在自动安装中，读取 ks 文件的时候会报错：unable to open input kickstart file:error opening file:No such file or directory: &amp;lsquo;/tmp/pre_install_network_config&amp;rsquo;&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;pre>&lt;code>...
%pre
$SNIPPET('pre_install_network_config')
%end
... # 后面是%packages的配置
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>如果有多块网卡的话，只自定义第二块网卡为外网，第一块网卡不一起配置，就会还是出现上文。多网卡像这样指定 IP 和网卡&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;pre>&lt;code>[root@cobbler ~]# cobbler system add --name=test --mac=52:54:00:be:29:97 --profile=CentOS8-2004-x86_64 --ip-address=10.0.0.82 --subnet=255.255.255.0 --interface=eth0 --static=1
[root@cobbler ~]# cobbler system edit --name=test --mac=52:54:00:04:89:ee --profile=CentOS8-2004-x86_64 --ip-address=192.168.31.82 --subnet=255.255.255.0 --gateway=192.168.31.1 --interface=eth1 --static=1 --hostname=zabbix --name-servers=&amp;quot;223.5.5.5&amp;quot;
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>其实 interface 的值可以随便写，因为 cobbler 是根据 mac 选择的，interface 的值没啥意义&lt;/li>
&lt;/ul>
&lt;h1 id="cobbler-配置">Cobbler 配置&lt;/h1>
&lt;p>/etc/cobbler/* # 基础配置文件路径&lt;/p>
&lt;ol>
&lt;li>,/setting #cobbler 服务的配置文件&lt;/li>
&lt;/ol>
&lt;p>/var/lib/cobbler/* # cobbler 数据保存路径&lt;/p>
&lt;ol>
&lt;li>./kickstarts/* # 从该路径下读取 kickstarts 文件。&lt;/li>
&lt;li>./snippets/* #kickstart 文件中$SNIPPET 变量内所用到的文件&lt;/li>
&lt;/ol>
&lt;p>/var/www/cobbler/* # cobble 数据保存路径&lt;/p>
&lt;ol>
&lt;li>,/ks_mirror/* #镜像存放目录，cobbler 会将镜像中的所有安装文件拷贝到本地一份，放在该目录下，该目录下的目录名是以 import 时指定的 name 来命名的。因此/var/www/cobbler 目录必须具有足够容纳安装文件的空间&lt;/li>
&lt;/ol>
&lt;h1 id="cobbler-的-web-管理界面的安装与配置">Cobbler 的 Web 管理界面的安装与配置&lt;/h1>
&lt;p>新版 Cobbler 的 Web 界面使用的是 https&lt;/p>
&lt;p>如果 web 界面报错，详见该文章的解决方式&lt;a href="http://www.trgeek.com/linux/2019/01/94.html">http://www.trgeek.com/linux/2019/01/94.html&lt;/a>，如果 google 浏览器打不开就用火狐，证书问题&lt;/p>
&lt;p>登录 URL: &lt;a href="https://10.10.100.250/cobbler_web">https://10.10.100.250/cobbler_web&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/wf5w0g/1616125383019-05bbc151-eeb0-4b67-b89b-e089ef3df4ef.jpeg" alt="">&lt;/p>
&lt;p>默认用户名：cobbler&lt;/p>
&lt;p>默认密码 ：cobbler&lt;/p>
&lt;p>/etc/cobbler/users.conf # Web 服务授权配置文件&lt;/p>
&lt;p>/etc/cobbler/users.digest # 用于 web 访问的用户名密码配置文件&lt;/p>
&lt;p>#在 Cobbler 组添加 ren 用户，提示输入 2 遍密码确认&lt;/p>
&lt;p>[root@cobbler kickstarts]# htdigest /etc/cobbler/users.digest &amp;ldquo;Cobbler&amp;rdquo; ren&lt;/p>
&lt;p>Adding user ren in realm Cobbler&lt;/p>
&lt;p>New password:&lt;/p>
&lt;p>Re-type new password:&lt;/p>
&lt;p>同步下&lt;/p>
&lt;p>[root@cobbler kickstarts]# cobbler sync&lt;/p>
&lt;h1 id="cobbler-的跨网段部署">Cobbler 的跨网段部署&lt;/h1>
&lt;p>如果想实现跨网段部署，需要注意以下几点&lt;/p>
&lt;ol>
&lt;li>修改/etc/cobbler/dhcp.template 中的配置信息，想给哪个网段部署系统，就加上该网段的配置。配置如下面的&lt;/li>
&lt;li>在没有 DHCP 服务的网段中的设备上开启 dhcp 中继服务，需要安装 DHCP 包。&lt;/li>
&lt;li>i.e.使用命令&lt;code>dhcrelay IP&lt;/code>(IP 为 DHCP 服务所在设备的 IP)来开启 DHCP 代理服务，这样在与 cobbler 不同网段的设备，也可以实现自动部署系统了。dhcrelay 命令还可以使用&lt;code>-i&lt;/code>选项指定网卡名，来确定代理从哪个网卡进来的 dhcp 流量&lt;/li>
&lt;li>还可以直接修改 dhcrelay 服务的配置文件，e.g.&lt;code>sed -i '/ExecStart=/s/$/&amp;amp; 192.168.20.12/g' /etc/systemd/system/dhcrelay.service&lt;/code>&lt;/li>
&lt;li>e.g.Cobbler 所在网段为 192.168.1.0/24，现在想给 192.168.2.0/24 网段的其中一台设备安装系统，这时候就需要在 192.168.2.0/24 网段那种找一台系统，开启 dhcp 中继&lt;/li>
&lt;/ol>
&lt;p>e.g./etc/cobbler/dhcp.template&lt;/p>
&lt;p>注意：&lt;/p>
&lt;ol>
&lt;li>需要注释掉 cobbler 与 dhcp 设备所在网段的网关配置，否则部署不同网段会失败，原因未知，待验证&lt;/li>
&lt;/ol>
&lt;!-- raw HTML omitted -->
&lt;pre>&lt;code>ddns-update-style interim;
allow booting;
allow bootp;
ignore client-updates;
set vendorclass = option vendor-class-identifier;
option pxe-system-type code 93 = unsigned integer 16;
subnet 192.168.20.0 netmask 255.255.255.0 {
# option routers 192.168.20.254;
option domain-name-servers 114.114.114.114;
option subnet-mask 255.255.255.0;
range dynamic-bootp 192.168.20.100 192.168.20.254;
default-lease-time 21600;
max-lease-time 43200;
next-server $next_server;
class &amp;quot;pxeclients&amp;quot; {
match if substring (option vendor-class-identifier, 0, 9) = &amp;quot;PXEClient&amp;quot;;
if option pxe-system-type = 00:02 {
filename &amp;quot;ia64/elilo.efi&amp;quot;;
} else if option pxe-system-type = 00:06 {
filename &amp;quot;grub/grub-x86.efi&amp;quot;;
} else if option pxe-system-type = 00:07 {
filename &amp;quot;grub/grub-x86_64.efi&amp;quot;;
} else if option pxe-system-type = 00:09 {
filename &amp;quot;grub/grub-x86_64.efi&amp;quot;;
} else {
filename &amp;quot;pxelinux.0&amp;quot;;
}
}
}
subnet 192.168.30.0 netmask 255.255.255.0 {
option domain-name-servers 114.114.114.114;
option routers 192.168.30.254;
range dynamic-bootp 192.168.30.100 192.168.30.250;
option subnet-mask 255.255.255.0;
next-server $next_server;
default-lease-time 21600;
max-lease-time 43200;
}
&lt;/code>&lt;/pre>
&lt;h1 id="附录">附录&lt;/h1>
&lt;p>添加 repos 源&lt;/p>
&lt;pre>&lt;code>1.添加repo源
#举个栗子，centos7.2版本的openstack的repo源
[root@cobbler02 ~]# cobbler repo add --name=centos7.2-openstack-mitaka --mirror=http://mirrors.aliyun.com/centos/7.2.1511/cloud/x86_64/openstack-mitaka/ --arch=x86_64 --breed=yum
#添加repo源，举个栗子，centos7版本的epel源
[root@cobbler02 ~]# cobbler repo add --name=centos7-x86_64-epel --mirror=http://mirrors.aliyun.com/epel/7/x86_64/ --arch=x86_64 --breed=yum
2.同步repo
[root@cobbler02 ~]# cobbler reposync
3.添加repo到对应的profile
cobbler profile edit --name=Centos-7-x86_64 --repos=
4.修改kickstart文件。添加。（些到%post %end中间）
%post
systemctl disable postfix.service
$yum_config_stanza
%end
5.添加定时任务，定期同步repo
&lt;/code>&lt;/pre>
&lt;p>客户机重装系统教程：1&lt;/p>
&lt;p>centos7 系列：&lt;/p>
&lt;p>1)不指定详细 system 模板，让 cobbler 自己装一台 centos7 的镜像&lt;/p>
&lt;pre>&lt;code>#注意上面如果没有指定epel源的是无法装koan包的
#执行这个命令：wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo
[root@zabbix ~]# yum install -y koan
#指定cobbler的服务器
[root@zabbix ~]# koan --server=192.168.31.73 --list=profiles
- looking for Cobbler at http://192.168.31.73:80/cobbler_api
CentOS-7.2-x86_64
#指定从哪个镜像进行安装
[root@zabbix ~]# koan --replace-self --server=192.168.31.73 --profile=CentOS-7.2-x86_64
- looking for Cobbler at http://192.168.31.73:80/cobbler_api
- reading URL: http://192.168.31.73/cblr/svc/op/ks/profile/CentOS-7.2-x86_64
install_tree: http://192.168.31.73/cblr/links/CentOS-7.2-x86_64
downloading initrd initrd.img to /boot/initrd.img_koan
url=http://192.168.31.73/cobbler/p_w_picpaths/CentOS-7.2-x86_64/initrd.img
- reading URL: http://192.168.31.73/cobbler/p_w_picpaths/CentOS-7.2-x86_64/initrd.img
downloading kernel vmlinuz to /boot/vmlinuz_koan
url=http://192.168.31.73/cobbler/p_w_picpaths/CentOS-7.2-x86_64/vmlinuz
- reading URL: http://192.168.31.73/cobbler/p_w_picpaths/CentOS-7.2-x86_64/vmlinuz
- ['/sbin/grubby', '--add-kernel', '/boot/vmlinuz_koan', '--initrd', '/boot/initrd.img_koan', '--args', '&amp;quot;ksdevice=link lang= text net.ifnames=0 ks=http://192.168.31.73/cblr/svc/op/ks/profile/CentOS-7.2-x86_64 biosdevname=0 kssendmac &amp;quot;', '--copy-default', '--make-default', '--title=kick1464687061']
- ['/sbin/grubby', '--update-kernel', '/boot/vmlinuz_koan', '--remove-args=root']
- reboot to apply changes
#重启系统
[root@zabbix ~]# reboot
&lt;/code>&lt;/pre>
&lt;p>2)指定设定好的系统配置，让系统生成一个指定的 mac 地址绑定的 ip 和其他你指定的东西&lt;/p>
&lt;pre>&lt;code>[root@zabbix ~]# yum install -y koan
#指定cobbler的服务器选择system模板
[root@MiWiFi-R2D-srv ~]# koan --server=192.168.31.73 --list=system
- looking for Cobbler at http://192.168.31.73:80/cobbler_api
koan does not know how
[root@MiWiFi-R2D-srv ~]# koan --replace-self --server=192.168.31.73 --system=zabbix02
- looking for Cobbler at http://192.168.31.73:80/cobbler_api
- reading URL: http://192.168.31.73/cblr/svc/op/ks/system/zabbix02
install_tree: http://192.168.31.73/cblr/links/CentOS-7.2-x86_64
downloading initrd initrd.img to /boot/initrd.img_koan
url=http://192.168.31.73/cobbler/p_w_picpaths/CentOS-7.2-x86_64/initrd.img
- reading URL: http://192.168.31.73/cobbler/p_w_picpaths/CentOS-7.2-x86_64/initrd.img
downloading kernel vmlinuz to /boot/vmlinuz_koan
url=http://192.168.31.73/cobbler/p_w_picpaths/CentOS-7.2-x86_64/vmlinuz
- reading URL: http://192.168.31.73/cobbler/p_w_picpaths/CentOS-7.2-x86_64/vmlinuz
- ['/sbin/grubby', '--add-kernel', '/boot/vmlinuz_koan', '--initrd', '/boot/initrd.img_koan', '--args', '&amp;quot;ksdevice=link lang= text net.ifnames=0 ks=http://192.168.31.73/cblr/svc/op/ks/system/zabbix02 biosdevname=0 kssendmac &amp;quot;', '--copy-default', '--make-default', '--title=kick1464688081']
- ['/sbin/grubby', '--update-kernel', '/boot/vmlinuz_koan', '--remove-args=root']
- reboot to apply changes to list that
[root@MiWiFi-R2D-srv ~]# reboot
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/wf5w0g/1616125383019-fc08ace0-55f9-4c41-873e-43b8a4aeae90.jpeg" alt="">&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/wf5w0g/1616125383004-27cf30e1-7d74-49f2-9840-c7f2fce73950.jpeg" alt="">&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/wf5w0g/1616125383082-57129950-42f7-4ea1-8837-579b371c54e0.jpeg" alt="">&lt;/p>
&lt;p>已经按照指定的 system 配置安装好了，但是这里出现了一个问题，双网卡的话，两个网段，现在的路由都是同一个了，所以上不了网了，求高手解决&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/wf5w0g/1616125383011-006ecd1b-39f8-40de-8836-92a1b578d936.jpeg" alt="">&lt;/p></description></item><item><title>Docs: cobbler命令说明</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/cobbler/cobbler%E5%91%BD%E4%BB%A4%E8%AF%B4%E6%98%8E/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/cobbler/cobbler%E5%91%BD%E4%BB%A4%E8%AF%B4%E6%98%8E/</guid><description>
&lt;h2 id="distro">distro&lt;/h2>
&lt;ol>
&lt;li>cobbler distro report &amp;ndash;name=CentOS7-1810 #查看安装镜像文件信息&lt;/li>
&lt;/ol>
&lt;!-- raw HTML omitted -->
&lt;p>OPTIONS&lt;/p>
&lt;ol>
&lt;li>
&lt;p>--path #指定制作部署系统时的镜像所用到的光盘镜像的路径&lt;/p>
&lt;/li>
&lt;li>
&lt;p>--name #为安装源定义一个名字，指定部署系统所用的镜像名&lt;/p>
&lt;/li>
&lt;li>
&lt;p>--arch #指定安装源是 32 位、64 位、ia64, 目前支持的选项有: x86│x86_64│ia64&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>EXAMPLE&lt;/p>
&lt;ol>
&lt;li>cobbler import &amp;ndash;path=/mnt/ &amp;ndash;name=CentOS7-1810 &amp;ndash;arch=x86_64 #&lt;/li>
&lt;/ol>
&lt;!-- raw HTML omitted -->
&lt;ol>
&lt;li>cobbler profile report &amp;ndash;name=CentOS7-x86_64 #查看指定的 profile 设置&lt;/li>
&lt;/ol>
&lt;!-- raw HTML omitted -->
&lt;ol>
&lt;li>cobbler system list #列出&lt;/li>
&lt;/ol>
&lt;!-- raw HTML omitted --></description></item><item><title>Docs: Conditionals 条件判断</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/ansible/playbook/conditionals-%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/ansible/playbook/conditionals-%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/user_guide/playbooks_conditionals.html">官方文档,用户指南-传统目录-条件&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>通常，play 的结果可能取决于 variable，fact（有关远程系统的知识）或先前的任务结果。在某些情况下，变量的值可能取决于其他变量。可以基于主机是否符合其他条件来创建其他组来管理主机。&lt;/p>
&lt;p>Ansible 在条件中使用 Jinja 的 &lt;a href="https://docs.ansible.com/ansible/latest/user_guide/playbooks_tests.html">测试&lt;/a> 和 &lt;a href="https://docs.ansible.com/ansible/latest/user_guide/playbooks_filters.html">过滤器 &lt;/a>来实现条件判断。详见 [Ansible Template 文章中《Ansible 扩展测试函数》章节](✏IT 学习笔记/🛠️9.运维/Ansible/Playbook/Templates%20 模板(Jinja2).md 模板(Jinja2).md)&lt;/p>
&lt;h2 id="条件判断的简单样例">条件判断的简单样例&lt;/h2>
&lt;p>下面的样例表示：当 ansible_facts[&amp;lsquo;os_family&amp;rsquo;] 变量的值为 Debian 的时候，则执行上面的任务，任务内容是执行 shutdown 命令&lt;/p>
&lt;pre>&lt;code>tasks:
- name: &amp;quot;shut down Debian flavored systems&amp;quot;
command: /sbin/shutdown -t now
when: ansible_facts['os_family'] == &amp;quot;Debian&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>判断主机是否在某个组中
when: inventory_hostname is search(&amp;ldquo;master&amp;rdquo;) # 当 inventory_hostname 变量的值含有 master 字符串时。
when: inventory_hostname == groups[&amp;lsquo;kube_master&amp;rsquo;][0] # 当当前主机的 inventory_hostname 变量值等于 kube_master 主机组中的第一台主机时
when: inventory_hostname in groups[&amp;lsquo;kube_master&amp;rsquo;] # 当当前主机的 inventory_hostname 变量值在 kube_master 主机组中时。&lt;/p>
&lt;p>when: testvar1 is none # 当变量 testvar1 已定义，但是值为空时。Note：值为空表示 key 后面的值什么都不写，双引号都不能有
when: ((groups[&amp;lsquo;kube_master&amp;rsquo;] | length) &amp;gt; 1) # 当 kube_master 主机组的主机数量大于 1 时。&lt;/p></description></item><item><title>Docs: Debugger</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/ansible/playbook/debugger/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/ansible/playbook/debugger/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/user_guide/playbooks_debugger.html">官方文档，用户指南-Debugging 任务&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Ansible 提供了一个任务调试器，因此您可以在执行过程中修复错误，而不是编辑 playbook 并再次运行它以查看更改是否有效。您可以在任务上下文中访问调试器的所有功能。您可以检查或设置变量的值，更新模块参数，并使用新的变量和参数重新运行任务。调试器可让您解决故障原因并继续执行 playbook。&lt;/p>
&lt;h3 id="enabling-the-debugger-with-thedebuggerkeywordhttpsdocsansiblecomansiblelatestuser_guideplaybooks_debuggerhtmlid8">&lt;a href="https://docs.ansible.com/ansible/latest/user_guide/playbooks_debugger.html#id8">Enabling the debugger with thedebuggerkeyword&lt;/a>&lt;/h3>
&lt;p>You can use the &lt;code>debugger&lt;/code> keyword to enable (or disable) the debugger for a specific play, role, block, or task. This option is especially useful when developing or extending playbooks, plays, and roles. You can enable the debugger on new or updated tasks. If they fail, you can fix the errors efficiently. The &lt;code>debugger&lt;/code> keyword accepts five values:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Value&lt;/th>
&lt;th>Result&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>always&lt;/td>
&lt;td>Always invoke the debugger, regardless of the outcome&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>never&lt;/td>
&lt;td>Never invoke the debugger, regardless of the outcome&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>on_failed&lt;/td>
&lt;td>Only invoke the debugger if a task fails&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>on_unreachable&lt;/td>
&lt;td>Only invoke the debugger if a host is unreachable&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>on_skipped&lt;/td>
&lt;td>Only invoke the debugger if the task is skipped&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Docs: Files 类模块</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/ansible/ansible-modules%E6%A8%A1%E5%9D%97/ansible.builtin%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97/files-%E7%B1%BB%E6%A8%A1%E5%9D%97/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/ansible/ansible-modules%E6%A8%A1%E5%9D%97/ansible.builtin%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97/files-%E7%B1%BB%E6%A8%A1%E5%9D%97/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/list_of_files_modules.html">官方文档 2.9，用户指南-使用模块-模块索引-文件模块&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Files 类别模块用来处理文件、文本&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/acl_module.html#acl-module">acl – Set and retrieve file ACL information&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/archive_module.html#archive-module">archive – Creates a compressed archive of one or more files or trees&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/assemble_module.html#assemble-module">assemble – Assemble configuration files from fragments&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/blockinfile_module.html#blockinfile-module">blockinfile # 添加、更新、删除指定的多行文本。Insert/update/remove a text block surrounded by marker lines&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/copy_module.html#copy-module">copy # 用于将文件从本地或远程设备上复制到远程设备上的某个位置。Copy files to remote locations&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/fetch_module.html#fetch-module">fetch – Fetch files from remote nodes&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/file_module.html#file-module">file # 管理文件和文件熟悉，用于创建文件、目录等。Manage files and file properties&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/find_module.html#find-module">find – Return a list of files based on specific criteria&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/ini_file_module.html#ini-file-module">ini_file – Tweak settings in INI files&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/iso_extract_module.html#iso-extract-module">iso_extract – Extract files from an ISO image&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/lineinfile_module.html#lineinfile-module">lineinfile # 与 sed 命令类似，修改指定文件中匹配到的行或添加行。Manage lines in text files&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/patch_module.html#patch-module">patch – Apply patch files using the GNU patch tool&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/read_csv_module.html#read-csv-module">read_csv – Read a CSV file&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/replace_module.html#replace-module">replace – Replace all instances of a particular string in a file using a back-referenced regular expression&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/stat_module.html#stat-module">stat # 获取文件或文件系统状态 Retrieve file or file system status&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/synchronize_module.html#synchronize-module">synchronize – A wrapper around rsync to make common tasks in your playbooks quick and easy&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/tempfile_module.html#tempfile-module">tempfile – Creates temporary files and directories&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/template_module.html#template-module">template # 根据文件模板，在远程主机上生成新文件。Template a file out to a remote server&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/unarchive_module.html#unarchive-module">unarchive # 解压缩一个归档文件。就是 tar 命。Unpacks an archive after (optionally) copying it from the local machine&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/xattr_module.html#xattr-module">xattr – Manage user defined extended attributes&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/2.9/modules/xml_module.html#xml-module">xml – Manage bits and pieces of XML files or strings&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="blockinfilehttpsdocsansiblecomansiblelatestcollectionsansiblebuiltinblockinfile_modulehtml--添加更新删除指定的多行文本">&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/blockinfile_module.html">blockinfile&lt;/a> # 添加、更新、删除指定的多行文本&lt;/h1>
&lt;p>blockinfile 模块使用示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#ae81ff">name:写入多行文本&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">blockinfile&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">path&lt;/span>: &lt;span style="color:#ae81ff">/etc/hosts&lt;/span> &lt;span style="color:#75715e">#指定要添加文本的文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">block&lt;/span>: &lt;span style="color:#ae81ff">|&lt;/span> &lt;span style="color:#75715e"># 注意要使用 | 符号，否则将没有换行。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">10.0.13.77&lt;/span> &lt;span style="color:#ae81ff">iptv-k8s-master-1.tjiptv.net&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">10.0.13.82&lt;/span> &lt;span style="color:#ae81ff">iptv-k8s-master-2.tjiptv.net&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>添加结果&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>root@lichenhao ~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># cat /etc/hosts&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>::1 localhost localhost.localdomain localhost6 localhost6.localdomain6
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># BEGIN ANSIBLE MANAGED BLOCK&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>10.0.13.77 iptv-k8s-master-1.tjiptv.net
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>10.0.13.82 iptv-k8s-master-2.tjiptv.net
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># END ANSIBLE MANAGED BLOCK&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note：&lt;/p>
&lt;ul>
&lt;li>blockinfile 模块会将 block 字段下面的所有内容当做一个文本块来看，将这一块内容全部添加到指定文件中 block 位置
&lt;ul>
&lt;li>block 位置是由 # BEGIN ANSIBLE MANAGED BLOCK 与 # END ANSIBLE MANAGED BLOCK 两行夹在中间的所有位置。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>如果再次执行该任务，则会将 block 下指定的文本块覆盖到目标文件 ANSIBLE 所表示的那几行，而不会添加到文件末尾&lt;/li>
&lt;/ul>
&lt;h1 id="copyhttpsdocsansiblecomansiblelatestcollectionsansiblebuiltincopy_modulehtml--用于将文件拷贝到被管理设备上的某个位置">&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/copy_module.html">copy&lt;/a> # 用于将文件拷贝到被管理设备上的某个位置&lt;/h1>
&lt;h2 id="参数">参数&lt;/h2>
&lt;ul>
&lt;li>必选参数
&lt;ul>
&lt;li>&lt;strong>src: &lt;!-- raw HTML omitted -->&lt;/strong> # 待拷贝的源文件路径。默认从 Ansible 控制节点搜索路径，搜索逻辑可以被 remote_src 参数修改&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>可选参数
&lt;ul>
&lt;li>&lt;strong>remote_src: &lt;!-- raw HTML omitted -->&lt;/strong> # 若开启 remote_src 参数，则 src 参数将会从被管理节点搜索待拷贝的源文件。&lt;code>默认值:false&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="应用示例">应用示例&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>$ ansible all -m copy -a &lt;span style="color:#e6db74">&amp;#34;src=https://desistdaydream.github.io/etc/hosts dest=/tmp/hosts&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>$ ansible all -m file -a &lt;span style="color:#e6db74">&amp;#34;dest=/tmp/hosts mode=755 owner=lichenhao group=lichenhao state=directory&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">拷贝文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ansible.builtin.copy&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">src&lt;/span>: &lt;span style="color:#ae81ff">/etc/hosts&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">dest&lt;/span>: &lt;span style="color:#ae81ff">/tmp/hosts&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">创建目录&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">copy&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">dest&lt;/span>: &lt;span style="color:#ae81ff">/tmp/hosts&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">mode&lt;/span>: &lt;span style="color:#ae81ff">0755&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">owner&lt;/span>: &lt;span style="color:#ae81ff">lichenhao&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">group&lt;/span>: &lt;span style="color:#ae81ff">lichenhao&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">state&lt;/span>: &lt;span style="color:#ae81ff">directory&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="filehttpsdocsansiblecomansiblelatestcollectionsansiblebuiltinfile_modulehtmlfile-module--用于创建文件目录等">&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/file_module.html#file-module">file&lt;/a> # 用于创建文件、目录等&lt;/h1>
&lt;p>file 模块示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">创建名为k8s的目录&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">file&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">path&lt;/span>: &lt;span style="color:#ae81ff">/etc/ssl/k8s&lt;/span> &lt;span style="color:#75715e"># 指定要创建的路径&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">owner&lt;/span>: &lt;span style="color:#ae81ff">k8s&lt;/span> &lt;span style="color:#75715e">#可省。默认所属用户为root&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">group&lt;/span>: &lt;span style="color:#ae81ff">k8s&lt;/span> &lt;span style="color:#75715e">#可省。默认所属组为k8s&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">state&lt;/span>: &lt;span style="color:#ae81ff">directory&lt;/span> &lt;span style="color:#75715e">#指定要创建的类型为目录&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note: state 还可以使用 link 用来创建软链接&lt;/p>
&lt;h1 id="文本替换">文本替换&lt;/h1>
&lt;p>lineinfile、replace、blockinfile 这三个模块可以实现文本编辑功能，类似于 sed。&lt;/p>
&lt;ul>
&lt;li>replace 模块可以对多行中的文本执行操作。&lt;/li>
&lt;li>lineinfile 模块对一行全部内容执行操作。&lt;/li>
&lt;li>blockinfile 模块可以在文件中插入、更新、删除一行&lt;/li>
&lt;/ul>
&lt;p>对于其他情况的文本编辑，则需要使用 copy、template 等模块直接生成文件，而不是编辑文件。&lt;/p>
&lt;p>虽然都是行匹配，但是 replace 只会替换匹配到行的字符串，而 lineinfile 则会替换匹配到整行。&lt;/p>
&lt;h2 id="lineinfilehttpsdocsansiblecomansiblelatestcollectionsansiblebuiltinlineinfile_modulehtml--行替换">&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/lineinfile_module.html">lineinfile&lt;/a> # 行替换&lt;/h2>
&lt;ul>
&lt;li>此模块确保文件中包含特定行，或使用向后引用的正则表达式替换现有行。&lt;/li>
&lt;li>当我们只想更改文件中的单行时，这主要有用。如果匹配到多行，那么只会对最后一行进行操作&lt;/li>
&lt;/ul>
&lt;h3 id="参数-1">参数&lt;/h3>
&lt;p>必填参数：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>path&lt;/strong> # 要修改的文件&lt;/li>
&lt;/ul>
&lt;p>其他参数：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>regexp&lt;/strong> # 正则表达式，用以匹配需要修改的行&lt;/li>
&lt;/ul>
&lt;p>注意&lt;/p>
&lt;ul>
&lt;li>如果 regexp 和 insertbefore 同时存在，则仅在找不到与 regexp 匹配的情况下才使用 insertbefore。不可与 backref 一起使用。&lt;/li>
&lt;li>insertafter EOF 与 insertbefore BOF 分别表示在文件末尾以及文件开头插入指定的行&lt;/li>
&lt;/ul>
&lt;h3 id="应用示例-1">应用示例&lt;/h3>
&lt;p>取消 UseDNS no 行前的 # 号&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">修改指定行的内容&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">lineinfile&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">dest&lt;/span>: &lt;span style="color:#ae81ff">/etc/ssh/sshd_config&lt;/span> &lt;span style="color:#75715e"># 指定要修改的文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">regexp&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;#(UseDNS\\s*no)&amp;#34;&lt;/span> &lt;span style="color:#75715e"># 使用正则表达式进行内容匹配&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">line&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;\1&amp;#39;&lt;/span> &lt;span style="color:#75715e"># 引用正则表达式中()匹配的内容&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">backrefs&lt;/span>: &lt;span style="color:#66d9ef">yes&lt;/span> &lt;span style="color:#75715e"># 指定是否可以进行引用，如果不指定，则匹配到的行会变成\1而不是通过\1引用的内容。&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在指定匹配到的最后一行之前或者之后添加行&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">在指定行之前或者之后添加行&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">lineinfile&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">dest&lt;/span>: &lt;span style="color:#ae81ff">/usr/lib/systemd/system/docker.service&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">regexp&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;^ExecStartPost=&amp;#34;&lt;/span> &lt;span style="color:#75715e"># (可省略)如果未匹配到regexp中的内容，则执行insertabefore。如果匹配到了，则不再匹配insertbefore，直接将匹配到的行替换成line指定的行。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">insertbefore&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;^ExecReload=&amp;#34;&lt;/span> &lt;span style="color:#75715e"># 在该字段指定的行之前添加line指定的内容。如果想再指定的行之后添加，则使用insertafter关键字&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">line&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;ExecStartPost=/usr/sbin/iptables -P FORWARD ACCEPT&amp;#34;&lt;/span> &lt;span style="color:#75715e"># 要添加的行&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>配置 Docker 启动参数&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">配置docker启动参数&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">block&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">lineinfile&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">dest&lt;/span>: &lt;span style="color:#ae81ff">/usr/lib/systemd/system/docker.service&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">regexp&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;^ExecStartPost=&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">insertbefore&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;^ExecReload=&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">line&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;ExecStartPost=/usr/sbin/iptables -P FORWARD ACCEPT&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">lineinfile&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">dest&lt;/span>: &lt;span style="color:#ae81ff">/usr/lib/systemd/system/docker.service&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">regexp&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;(ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock)&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">line&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;\1 {{docker.options}}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">backrefs&lt;/span>: &lt;span style="color:#66d9ef">yes&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="replacehttpsdocsansiblecomansiblelatestcollectionsansiblebuiltinreplace_modulehtml--字符替换">&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/replace_module.html">replace&lt;/a> # 字符替换&lt;/h2>
&lt;h3 id="参数-2">参数&lt;/h3>
&lt;p>必填参数：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>path&lt;/strong> # 要修改的文件。&lt;/li>
&lt;li>&lt;strong>regexp&lt;/strong> # 正则表达式，匹配到需要修改的字符串&lt;/li>
&lt;li>&lt;strong>replace&lt;/strong> # 替换 regexp 参数匹配到的字符串。若不指定该参数，则会删除 regexp 参数匹配到的字符串。&lt;/li>
&lt;/ul>
&lt;p>其他参数：&lt;/p>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul>
&lt;h3 id="应用示例-2">应用示例&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">replace&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">path&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/etc/apt/apt.conf.d/10periodic&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">regexp&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">replace&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="stathttpsdocsansiblecomansiblelatestcollectionsansiblebuiltinstat_modulehtmlstat-module--获取文件或文件系统状态">&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/stat_module.html#stat-module">stat&lt;/a> # 获取文件或文件系统状态&lt;/h1>
&lt;p>stat 模块类似于 Linux 中的 &lt;code>stat&lt;/code> 命令。常用来在改变文件之间，获取某些文件状态，并注册为变量，以便为后续任务进行判断。&lt;/p>
&lt;h2 id="应用示例-3">应用示例&lt;/h2>
&lt;h1 id="templatehttpsdocsansiblecomansiblelatestcollectionsansiblebuiltintemplate_modulehtml--根据文件模板在远程主机上生成新文件">&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/template_module.html">template&lt;/a> # 根据文件模板，在远程主机上生成新文件&lt;/h1>
&lt;p>template 模块使用 Jinja2 模板语言处理文件，并将渲染后的文件传送到目标主机上。&lt;/p>
&lt;h2 id="包含变量">包含变量&lt;/h2>
&lt;ul>
&lt;li>ansible_managed # (configurable via the defaults section of ansible.cfg) contains a string which can be used to describe the template name, host, modification time of the template file and the owner uid.&lt;/li>
&lt;li>template_host # contains the node name of the template’s machine.&lt;/li>
&lt;li>template_uid # is the numeric user id of the owner.&lt;/li>
&lt;li>template_path # is the path of the template.&lt;/li>
&lt;li>template_fullpath # is the absolute path of the template.&lt;/li>
&lt;li>template_destpath # is the path of the template on the remote system (added in 2.8).&lt;/li>
&lt;li>template_run_date # is the date that the template was rendered.&lt;/li>
&lt;/ul>
&lt;h2 id="参数-3">参数&lt;/h2>
&lt;p>必选参数&lt;/p>
&lt;ul>
&lt;li>&lt;strong>dest&lt;/strong> # 渲染后的模板文件被发送到目标主机的位置&lt;/li>
&lt;li>&lt;strong>src&lt;/strong> # Ansible 控制节点上 Jinja2 格式的模板文件路径。&lt;/li>
&lt;/ul>
&lt;p>Jinja 行为控制&lt;/p>
&lt;ul>
&lt;li>**lstrip_blocks **# 是否移除前导空白符和制表符。&lt;code>默认值：no&lt;/code>&lt;/li>
&lt;li>&lt;strong>trim_blocks&lt;/strong> # 是否移除换行符。&lt;code>默认值：yes&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>其他参数&lt;/p>
&lt;ul>
&lt;li>&lt;strong>backup: &lt;!-- raw HTML omitted -->&lt;/strong> # 是否创建一个包含时间戳信息的备份文件。&lt;code>默认值：no&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="返回值">返回值&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;msg&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;changed&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;checksum&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;d176c556a237d7d62f8e1a95ffcec7c06c1e6851&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;dest&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/tmp/template_variables.conf&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;diff&amp;#34;&lt;/span>: [],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;failed&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;gid&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;group&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;root&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;md5sum&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2f549414973ec5b547e40d0f49357ce5&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;mode&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;0644&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;owner&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;root&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;size&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">329&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;src&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/home/lichenhao/.ansible/tmp/ansible-tmp-1634401131.4389606-251148042480663/source&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;state&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;file&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;uid&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="应用示例-4">应用示例&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">ansible -m template -a &amp;#39;src=https://desistdaydream.github.io/mytemplates/foo.j2 dest=/tmp/foo.conf lstrip_blocks=yes&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>模板文件示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>% &lt;span style="color:#66d9ef">if&lt;/span> docker.registryMirrors is defined %&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#75715e">#如果docker.registryMirrors变量存在，则执行最后一行之前的语句&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;registry-mirrors&amp;#34;&lt;/span>: &lt;span style="color:#f92672">[{&lt;/span>% &lt;span style="color:#66d9ef">for&lt;/span> mirror in docker.registryMirrors %&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#75715e">#输出 &amp;#34;registry-mirrors&amp;#34;: 后执行for循环，将docker.registryMirrors变量的多个值逐一传递给mirror变量，直到docker.registryMirros变量里的值全部引用完成&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;{{ mirror}}&amp;#34;&lt;/span>&lt;span style="color:#f92672">{&lt;/span>% &lt;span style="color:#66d9ef">if&lt;/span> not loop.last %&lt;span style="color:#f92672">}&lt;/span>,&lt;span style="color:#f92672">{&lt;/span>% endif %&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#75715e">#输出 mirror 变量的值。如果循环没有结束，则输出一个逗号&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">{&lt;/span>%- endfor %&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#75715e">#结束for循环&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>% endif %&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#75715e">#结束if结构&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>输出结果示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;registry-mirrors&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;https://ac1rmo5p.mirror.aliyuncs.com&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;https://123.123.123&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>更多 template 模块原理及应用，详见 [Playbook 章节中的 Templates](✏IT 学习笔记/🛠️9.运维/Ansible/Playbook/Templates%20 模板(Jinja2).md 模板(Jinja2).md)&lt;/p>
&lt;h1 id="unarchivehttpsdocsansiblecomansiblelatestcollectionsansiblebuiltinunarchive_modulehtml--解压缩一个归档文件就是-tar-命令">&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/unarchive_module.html">unarchive&lt;/a> # 解压缩一个归档文件。就是 tar 命令。&lt;/h1>
&lt;h2 id="参数-4">参数&lt;/h2>
&lt;h2 id="应用示例-5">应用示例&lt;/h2></description></item><item><title>Docs: Filters Plugins(过滤插件)</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/ansible/playbook/plugins%E6%8F%92%E4%BB%B6/filters-plugins%E8%BF%87%E6%BB%A4%E6%8F%92%E4%BB%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/ansible/playbook/plugins%E6%8F%92%E4%BB%B6/filters-plugins%E8%BF%87%E6%BB%A4%E6%8F%92%E4%BB%B6/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/user_guide/playbooks_filters.html">官方文档，用户指南-目录-使用过滤器操作数据&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.zsythink.net/archives/2862">https://www.zsythink.net/archives/2862&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>在本博客中，ansible 是一个系列文章，我们会尽量以通俗易懂的方式总结 ansible 的相关知识点。&lt;/p>
&lt;p>ansible 系列博文直达链接：ansible 轻松入门系列&lt;/p>
&lt;p>现在我有一个需求，我想要将获取到的变量的值中的所有字母都变成大写，如果想要在 playbook 中实现这个需求，我该怎么办呢？我可以借助一个叫做&amp;quot;过滤器&amp;quot;的东西，帮助我完成刚才的需求，&amp;ldquo;过滤器（filters）&amp;ldquo;可以帮助我们对数据进行处理，这样解释可能不够直观，不如这样，我们先来看一个过滤器的小例子，然后结合示例解释过滤器是个什么东西，示例如下：&lt;/p>
&lt;pre>&lt;code>- hosts: test70
remote_user: root
gather_facts: no
vars:
testvar: 1a2b3c
tasks:
- debug:
msg: &amp;quot;{{ testvar | upper }}&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>如上例所示，testvar 变量的值中包含三个小写字母，在使用 debug 模块输出这个变量的值时，我们使用了一个管道符，将 testvar 变量传递给了一个名为&amp;quot;upper&amp;quot;的东西，&amp;ldquo;upper&amp;quot;就是一个&amp;quot;过滤器&amp;rdquo;，执行上例 playbook 后你会发现，testvar 中的所有小写字母都被变成了大写。&lt;/p>
&lt;p>通过上述示例，你一定已经明白了，过滤器是一种能够帮助我们处理数据的工具，其实，ansible 中的过滤器功能来自于 jinja2 模板引擎，我们可以借助 jinja2 的过滤器功能在 ansible 中对数据进行各种处理，而上例中的 upper 就是一种过滤器，这个过滤器的作用就是将小写字母变成大写，你一定已经发现了，当我们想要通过过滤器处理数据时，只需要将数据通过管道符传递给对应的过滤器即可，当然，过滤器不只有 upper，还有很多其他的过滤器，这些过滤器有些是 jinja2 内置的，有些是 ansible 特有的，如果这些过滤器都不能满足你的需求，jinja2 也支持自定义过滤器。&lt;/p>
&lt;p>这篇文章我们就来总结一些常用的过滤器的用法，在总结时，不会区分它是 jinja2 内置的过滤器，还是 ansible 所独有的，我们总结的目的是在 ansible 中使用这些过滤器，如果你想要了解 jinja2 中有哪些内置过滤器，可以参考 jinja2 的官网链接，如下&lt;/p>
&lt;p>&lt;a href="http://jinja.pocoo.org/docs/2.10/templates/#builtin-filters">http://jinja.pocoo.org/docs/2.10/templates/#builtin-filters&lt;/a>&lt;/p>
&lt;h1 id="字符串操作有关的过滤器">字符串操作有关的过滤器&lt;/h1>
&lt;pre>&lt;code>- hosts: test70
remote_user: root
vars:
testvar: &amp;quot;abc123ABC 666&amp;quot;
testvar1: &amp;quot; abc &amp;quot;
testvar2: '123456789'
testvar3: &amp;quot;1a2b,@#$%^&amp;amp;&amp;quot;
tasks:
- debug:
#将字符串转换成纯大写
msg: &amp;quot;{{ testvar | upper }}&amp;quot;
- debug:
#将字符串转换成纯小写
msg: &amp;quot;{{ testvar | lower }}&amp;quot;
- debug:
#将字符串变成首字母大写,之后所有字母纯小写
msg: &amp;quot;{{ testvar | capitalize }}&amp;quot;
- debug:
#将字符串反转
msg: &amp;quot;{{ testvar | reverse }}&amp;quot;
- debug:
#返回字符串的第一个字符
msg: &amp;quot;{{ testvar | first }}&amp;quot;
- debug:
#返回字符串的最后一个字符
msg: &amp;quot;{{ testvar | last }}&amp;quot;
- debug:
#将字符串开头和结尾的空格去除
msg: &amp;quot;{{ testvar1 | trim }}&amp;quot;
- debug:
#将字符串放在中间，并且设置字符串的长度为30，字符串两边用空格补齐30位长
msg: &amp;quot;{{ testvar1 | center(width=30) }}&amp;quot;
- debug:
#返回字符串长度,length与count等效,可以写为count
msg: &amp;quot;{{ testvar2 | length }}&amp;quot;
- debug:
#将字符串转换成列表，每个字符作为一个元素
msg: &amp;quot;{{ testvar3 | list }}&amp;quot;
- debug:
#将字符串转换成列表，每个字符作为一个元素，并且随机打乱顺序
#shuffle的字面意思为洗牌
msg: &amp;quot;{{ testvar3 | shuffle }}&amp;quot;
- debug:
#将字符串转换成列表，每个字符作为一个元素，并且随机打乱顺序
#在随机打乱顺序时，将ansible_date_time.epoch的值设置为随机种子
#也可以使用其他值作为随机种子，ansible_date_time.epoch是facts信息
msg: &amp;quot;{{ testvar3 | shuffle(seed=(ansible_date_time.epoch)) }}&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>跟数字操作有关的过滤器，示例如下&lt;/p>
&lt;p>| 1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48 | &amp;mdash;
- hosts: test70
remote_user: root
vars:
testvar4: -1
tasks:
- debug:
#将对应的值转换成 int 类型
#ansible 中，字符串和整形不能直接计算，比如{{ 8+&amp;lsquo;8&amp;rsquo; }}会报错
#所以，我们可以把一个值为数字的字符串转换成整形后再做计算
msg: &amp;ldquo;{{ 8+(&amp;lsquo;8&amp;rsquo; | int) }}&amp;rdquo;
- debug:
#将对应的值转换成 int 类型,如果无法转换,默认返回 0
#使用 int(default=6)或者 int(6)时，如果无法转换则返回指定值 6
msg: &amp;ldquo;{{ &amp;lsquo;a&amp;rsquo; | int(default=6) }}&amp;rdquo;
- debug:
#将对应的值转换成浮点型，如果无法转换，默认返回'0.0&amp;rsquo;
msg: &amp;ldquo;{{ &amp;lsquo;8&amp;rsquo; | float }}&amp;rdquo;
- debug:
#当对应的值无法被转换成浮点型时，则返回指定值’8.8‘
msg: &amp;ldquo;{{ &amp;lsquo;a&amp;rsquo; | float(8.88) }}&amp;rdquo;
- debug:
#获取对应数值的绝对值
msg: &amp;ldquo;{{ testvar4 | abs }}&amp;rdquo;
- debug:
#四舍五入
msg: &amp;ldquo;{{ 12.5 | round }}&amp;rdquo;
- debug:
#取小数点后五位
msg: &amp;ldquo;{{ 3.1415926 | round(5) }}&amp;rdquo;
- debug:
#从 0 到 100 中随机返回一个随机数
msg: &amp;ldquo;{{ 100 | random }}&amp;rdquo;
- debug:
#从 5 到 10 中随机返回一个随机数
msg: &amp;ldquo;{{ 10 | random(start=5) }}&amp;rdquo;
- debug:
#从 5 到 15 中随机返回一个随机数,步长为 3
#步长为 3 的意思是返回的随机数只有可能是 5、8、11、14 中的一个
msg: &amp;ldquo;{{ 15 | random(start=5,step=3) }}&amp;rdquo;
- debug:
#从 0 到 15 中随机返回一个随机数,这个随机数是 5 的倍数
msg: &amp;ldquo;{{ 15 | random(step=5) }}&amp;rdquo;
- debug:
#从 0 到 15 中随机返回一个随机数，并将 ansible_date_time.epoch 的值设置为随机种子
#也可以使用其他值作为随机种子，ansible_date_time.epoch 是 facts 信息
#seed 参数从 ansible2.3 版本开始可用&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th> msg: &amp;ldquo;{{ 15&lt;/th>
&lt;th>random(seed=(ansible_date_time.epoch)) }}&amp;rdquo;&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;/table>
&lt;p>列表操作相关的过滤器，示例如下&lt;/p>
&lt;p>Shell&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;/table>
&lt;p>| 1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95 | &amp;mdash;
- hosts: test70
remote_user: root
vars:
testvar7: [22,18,5,33,27,30]
testvar8: [1,[7,2,[15,9]],3,5]
testvar9: [1,&amp;lsquo;b&amp;rsquo;,5]
testvar10: [1,&amp;lsquo;A&amp;rsquo;,&amp;lsquo;b&amp;rsquo;,[&amp;lsquo;QQ&amp;rsquo;,&amp;lsquo;wechat&amp;rsquo;],&amp;lsquo;CdEf&amp;rsquo;]
testvar11: [&amp;lsquo;abc&amp;rsquo;,1,3,&amp;lsquo;a&amp;rsquo;,3,&amp;lsquo;1&amp;rsquo;,&amp;lsquo;abc&amp;rsquo;]
testvar12: [&amp;lsquo;abc&amp;rsquo;,2,&amp;lsquo;a&amp;rsquo;,&amp;lsquo;b&amp;rsquo;,&amp;lsquo;a&amp;rsquo;]
tasks:
- debug:
#返回列表长度,length 与 count 等效,可以写为 count
msg: &amp;ldquo;{{ testvar7 | length }}&amp;rdquo;
- debug:
#返回列表中的第一个值
msg: &amp;ldquo;{{ testvar7 | first }}&amp;rdquo;
- debug:
#返回列表中的最后一个值
msg: &amp;ldquo;{{ testvar7 | last }}&amp;rdquo;
- debug:
#返回列表中最小的值
msg: &amp;ldquo;{{ testvar7 | min }}&amp;rdquo;
- debug:
#返回列表中最大的值
msg: &amp;ldquo;{{ testvar7 | max }}&amp;rdquo;
- debug:
#将列表升序排序输出
msg: &amp;ldquo;{{ testvar7 | sort }}&amp;rdquo;
- debug:
#将列表降序排序输出
msg: &amp;ldquo;{{ testvar7 | sort(reverse=true) }}&amp;rdquo;
- debug:
#返回纯数字非嵌套列表中所有数字的和
msg: &amp;ldquo;{{ testvar7 | sum }}&amp;rdquo;
- debug:
#如果列表中包含列表，那么使用 flatten 可以&amp;rsquo;拉平&amp;rsquo;嵌套的列表
#2.5 版本中可用,执行如下示例后查看效果
msg: &amp;ldquo;{{ testvar8 | flatten }}&amp;rdquo;
- debug:
#如果列表中嵌套了列表，那么将第 1 层的嵌套列表‘拉平’
#2.5 版本中可用,执行如下示例后查看效果
msg: &amp;ldquo;{{ testvar8 | flatten(levels=1) }}&amp;rdquo;
- debug:
#过滤器都是可以自由结合使用的，就好像 linux 命令中的管道符一样
#如下，取出嵌套列表中的最大值
msg: &amp;ldquo;{{ testvar8 | flatten | max }}&amp;rdquo;
- debug:
#将列表中的元素合并成一个字符串
msg: &amp;ldquo;{{ testvar9 | join }}&amp;rdquo;
- debug:
#将列表中的元素合并成一个字符串,每个元素之间用指定的字符隔开
msg: &amp;ldquo;{{ testvar9 | join(&amp;rsquo; , &amp;lsquo;) }}&amp;rdquo;
- debug:
#从列表中随机返回一个元素
#对列表使用 random 过滤器时，不能使用 start 和 step 参数
msg: &amp;ldquo;{{ testvar9 | random }}&amp;rdquo;
- debug:
#从列表中随机返回一个元素,并将 ansible_date_time.epoch 的值设置为随机种子
#seed 参数从 ansible2.3 版本开始可用
msg: &amp;ldquo;{{ testvar9 | random(seed=(ansible_date_time.epoch)) }}&amp;rdquo;
- debug:
#随机打乱顺序列表中元素的顺序
#shuffle 的字面意思为洗牌
msg: &amp;ldquo;{{ testvar9 | shuffle }}&amp;rdquo;
- debug:
#随机打乱顺序列表中元素的顺序
#在随机打乱顺序时，将 ansible_date_time.epoch 的值设置为随机种子
#seed 参数从 ansible2.3 版本开始可用
msg: &amp;ldquo;{{ testvar9 | shuffle(seed=(ansible_date_time.epoch)) }}&amp;rdquo;
- debug:
#将列表中的每个元素变成纯大写
msg: &amp;ldquo;{{ testvar10 | upper }}&amp;rdquo;
- debug:
#将列表中的每个元素变成纯小写
msg: &amp;ldquo;{{ testvar10 | lower }}&amp;rdquo;
- debug:
#去掉列表中重复的元素，重复的元素只留下一个
msg: &amp;ldquo;{{ testvar11 | unique }}&amp;rdquo;
- debug:
#将两个列表合并，重复的元素只留下一个
#也就是求两个列表的并集
msg: &amp;ldquo;{{ testvar11 | union(testvar12) }}&amp;rdquo;
- debug:
#取出两个列表的交集，重复的元素只留下一个
msg: &amp;ldquo;{{ testvar11 | intersect(testvar12) }}&amp;rdquo;
- debug:
#取出存在于 testvar11 列表中,但是不存在于 testvar12 列表中的元素
#去重后重复的元素只留下一个
#换句话说就是:两个列表的交集在列表 1 中的补集
msg: &amp;ldquo;{{ testvar11 | difference(testvar12) }}&amp;rdquo;
- debug:
#取出两个列表中各自独有的元素,重复的元素只留下一个
#即去除两个列表的交集，剩余的元素
msg: &amp;ldquo;{{ testvar11 | symmetric_difference(testvar12) }}&amp;rdquo; |&lt;/p>
&lt;p>变量未定义时相关操作的过滤器，示例如下&lt;/p>
&lt;p>Shell&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;/table>
&lt;p>| 1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18 | &amp;mdash;
- hosts: test70
remote_user: root
gather_facts: no
vars:
testvar6: &amp;rsquo;&amp;rsquo;
tasks:
- debug:
#如果变量没有定义，则临时返回一个指定的默认值
#注：如果定义了变量，变量值为空字符串，则会输出空字符
#default 过滤器的别名是 d
msg: &amp;ldquo;{{ testvar5 | default(&amp;lsquo;zsythink&amp;rsquo;) }}&amp;rdquo;
- debug:
#如果变量的值是一个空字符串或者变量没有定义，则临时返回一个指定的默认值
msg: &amp;ldquo;{{ testvar6 | default(&amp;lsquo;zsythink&amp;rsquo;,boolean=true) }}&amp;rdquo;
- debug:
#如果对应的变量未定义,则报出“Mandatory variable not defined.”错误，而不是报出默认错误
msg: &amp;ldquo;{{ testvar5 | mandatory }}&amp;rdquo; |&lt;/p>
&lt;p>其实，说到上例中的 default 过滤器，还有一个很方便的用法，default 过滤器不仅能在变量未定义时返回指定的值，还能够让模块的参数变得&amp;quot;可有可无&amp;rdquo;。&lt;/p>
&lt;p>这样说不太容易理解，不如我们先来看一个工作场景，然后根据这个工作场景来描述所谓的&amp;quot;可有可无&amp;rdquo;，就容易理解多了，场景如下：&lt;/p>
&lt;p>假设，我现在需要在目标主机上创建几个文件，这些文件大多数都不需要指定特定的权限，只有个别文件需要指定特定的权限，所以，在定义这些文件时，我将变量定义为了如下样子&lt;/p>
&lt;p>Shell&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;/table>
&lt;p>| 1
2
3
4
5
6 | vars:
paths:
- path: /tmp/testfile
mode: &amp;lsquo;0444&amp;rsquo;
- path: /tmp/foo
- path: /tmp/bar |&lt;/p>
&lt;p>如上所示，我一共定义了 3 个文件，只有第一个文件指定了权限，第二个文件和第三个文件没有指定任何权限，这样定义目的是，当这三个文件在目标主机中创建时，只有第一个文件按照指定的权限被创建，之后的两个文件都按照操作系统的默认权限进行创建，为了方便示例，我只定义了 3 个文件作为示例，但是在实际工作中，你获得列表中可能有几十个这样的文件需要被创建，这些文件中，有些文件需要特定的权限，有些不需要，所以，我们可能需要使用循环来处理这个问题，但是在使用循环时，我们会遇到另一个问题，问题就是，有的文件有 mode 属性，有的文件没有 mode 属性，那么，我们就需要对文件是否有 mode 属性进行判断，所以，你可能会编写一个类似如下结构的 playbook&lt;/p>
&lt;p>Shell&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;/table>
&lt;p>| 1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16 | - hosts: test70
remote_user: root
gather_facts: no
vars:
paths:
- path: /tmp/test
mode: &amp;lsquo;0444&amp;rsquo;
- path: /tmp/foo
- path: /tmp/bar
tasks:
- file: dest={{item.path}} state=touch mode={{item.mode}}
with_items: &amp;ldquo;{{ paths }}&amp;rdquo;
when: item.mode is defined
- file: dest={{item.path}} state=touch
with_items: &amp;ldquo;{{ paths }}&amp;rdquo;
when: item.mode is undefined |&lt;/p>
&lt;p>上例中，使用 file 模块在目标主机中创建文件，很好的解决我们的问题，但是上例中，我们一共循环了两遍，因为我们需要对文件是否有 mode 属性进行判断，然后根据判断结果调整 file 模块的参数设定，那么有没有更好的办法呢？当然有，这个办法就是我们刚才所说的&amp;quot;可有可无&amp;quot;，我们可以将上例 playbook 简化成如下模样：&lt;/p>
&lt;p>Shell&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;/table>
&lt;p>| 1
2
3
4
5
6
7
8
9
10
11
12 | - hosts: test70
remote_user: root
gather_facts: no
vars:
paths:
- path: /tmp/test
mode: &amp;lsquo;0444&amp;rsquo;
- path: /tmp/foo
- path: /tmp/bar
tasks:
- file: dest={{item.path}} state=touch mode={{item.mode | default(omit)}}
with_items: &amp;ldquo;{{ paths }}&amp;rdquo; |&lt;/p>
&lt;p>上例中，我们并没有对文件是否有 mode 属性进行判断，而是直接调用了 file 模块的 mode 参数，将 mode 参数的值设定为了&amp;quot;{{item.mode | default(omit)}}&amp;quot;，这是什么意思呢？它的意思是，如果 item 有 mode 属性，就把 file 模块的 mode 参数的值设置为 item 的 mode 属性的值，如果 item 没有 mode 属性，file 模块就直接省略 mode 参数，&amp;lsquo;omit&amp;rsquo;的字面意思就是&amp;quot;省略&amp;quot;，换成大白话说就是：[有就用，没有就不用，可以有，也可以没有]，所谓的&amp;quot;可有可无&amp;quot;就是这个意思，是不是很方便？我觉得聪明如你一定看懂了，快动手试试吧~&lt;/p>
&lt;p>施主&lt;del>加油吧&lt;/del>~这篇文章就总结到这里，希望能够对你有所帮助~掰掰~&lt;/p></description></item><item><title>Docs: Inventory 配置文件详解</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/ansible/inventory-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/ansible/inventory-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/user_guide/intro_inventory.html">官方文档,用户指南-如何建立你的 Inventory&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Ansible 可同时操作属于一个组的多台主机,组和主机之间的关系通过 Inventory 文件配置。默认的文件路径为 /etc/ansible/hosts，也可以在 &lt;code>ansible&lt;/code>、&lt;code>ansible-playbook&lt;/code> 命令中使用 -i 选项指定其他的 Inventory 文件。&lt;/p>
&lt;p>除默认文件外,你还可以同时使用多个 inventory 文件(后面会讲到),也可以从动态源,或云上拉取 inventory 配置信息.详见 动态 Inventory.&lt;/p>
&lt;h2 id="inventory-文件格式">Inventory 文件格式&lt;/h2>
&lt;p>最常见的格式是 INI 和 YAML 格式，下面这是一个 INI 格式的 Inventory 示例&lt;/p>
&lt;pre>&lt;code># 例1:定义一个单独的主机。未分组的机器。Note:需要在“例2”中中括号定义组之前指定
green.example.com
192.168.100.1
# 例2:定义一个主机组。组名为webservers的主机集合
[webservers]
alpha.example.org
192.168.1.100
# 再定义一个主机组。组名为dbservers的主机集合
[dbservers]
192.168.2.100
# 定义一个主机的另一种方式。使用正则表达式来指定多个主机
www[001:006].example.com #www001.example.com一直到www006.example.com一共6台主机
db-[a:f]-node.example.com
# 可以在主机ip或主机名后面添加参数，以此来控制Ansible与远程主机的交互方式。
# 详细的参数信息见官网：https://docs.ansible.com/ansible/latest/user_guide/intro_inventory.html#connecting-to-hosts-behavioral-inventory-parameters
# 指定该主机要执行操作的主机ip、用户名和密码
www.desistdaydream.com ansible_host=10.10.100.200 ansible_user=&amp;quot;root&amp;quot; ansible_password=&amp;quot;my@password&amp;quot;
# 例3:组的引用,可以把一个或多个组作为另一个组的子成员。all_host 组包含 webservers 与 dbservers 两个组中所有的 hosts
[all_host:children]
webservers
dbservers
&lt;/code>&lt;/pre>
&lt;p>Note：该文件的第一列为一般推荐使用主机名来表示，如果需要指定该主机的 ip 地址，则使用 ansbile_ssh_host 或者 ansible_host 参数来指定 ip。&lt;/p>
&lt;p>因为，Ansible 默认变量 inventory_hostname 的值为 inventory 文件中第一列的内容，还有另一个变量是 inventory_hostname_short ，这个变量的值是主机名的短格式&lt;/p>
&lt;p>所以，在 Ansbile 里，自动就会将第一列认定为主机名，如果使用 ip 作为第一列的表示形式，那么与 Ansible 理念不符(至于为什么还可以用 ip 表示，可能是为了大家方便，所以第一列才可以使用 ip 的吧~~~)&lt;/p>
&lt;p>对应的 YAML 格式 Inventory 文件示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 定义一个名为 all_host 的组，通过 children 字段把其他组引入&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">all_host&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 例:组的引用,可以把一个或多个组作为另一个组的子成员。all_host 组包含 webservers 与 dbservers 两个组中所有的 hosts&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">children&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 例:定义一个主机组。组名为 dbservers 的主机集合&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">dbservers&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">hosts&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">192.168.2.100&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 定义一个主机的另一种方式。使用正则表达式来指定多个主机&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">db-[a:f]-node.example.com&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">www[001:006].example.com&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 可以在主机ip或主机名后面添加参数，以此来控制Ansible与远程主机的交互方式。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 详细的参数信息见官网：https://docs.ansible.com/ansible/latest/user_guide/intro_inventory.html#connecting-to-hosts-behavioral-inventory-parameters&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 指定该主机要执行操作的主机ip、用户名和密码&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">www.desistdaydream.com&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ansible_host&lt;/span>: &lt;span style="color:#ae81ff">10.10.100.200&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ansible_password&lt;/span>: &lt;span style="color:#ae81ff">my@password&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ansible_user&lt;/span>: &lt;span style="color:#ae81ff">root&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 例:定义一个主机组。组名为 webservers 的主机集合&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">webservers&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">hosts&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">192.168.1.100&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">alpha.example.org&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 例:定义一个单独的主机。未分组的机器。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">ungrouped&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">hosts&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">192.168.100.1&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">green.example.com&lt;/span>:
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="主机与组">主机与组&lt;/h2>
&lt;p>/etc/ansible/hosts 文件使用 INI 语法书写:&lt;/p>
&lt;pre>&lt;code>mail.example.com
[webservers]
foo.example.com
bar.example.com
[dbservers]
one.example.com
two.example.com
three.example.com
&lt;/code>&lt;/pre>
&lt;p>这里的 &lt;code>[]&lt;/code> 中的字符是组名，用于对系统进行分类,便于对不同系统进行个别的管理。&lt;/p>
&lt;p>一个系统可以属于不同的组,比如一台服务器可以同时属于 webserver 组 和 dbserver 组.这时属于两个组的变量都可以为这台主机所用,至于变量的优先级关系将于以后的章节中讨论.&lt;/p>
&lt;p>如果有主机的 SSH 端口不是标准的 22 端口,可在主机名之后加上端口号,用冒号分隔.SSH 配置文件中列出的端口号不会在 paramiko 连接中使用,会在 openssh 连接中使用.&lt;/p>
&lt;p>端口号不是默认设置时,可明确的表示为:&lt;/p>
&lt;pre>&lt;code>badwolf.example.com:5309
&lt;/code>&lt;/pre>
&lt;p>假设你有一些静态 IP 地址,希望设置一些别名,但不是在系统的 host 文件中设置,又或者你是通过隧道在连接,那么可以设置如下:&lt;/p>
&lt;pre>&lt;code>jumper ansible_ssh_port=5555 ansible_ssh_host=192.168.1.50
&lt;/code>&lt;/pre>
&lt;p>在这个例子中,通过 “jumper” 别名,会连接 192.168.1.50:5555.记住,这是通过 inventory 文件的特性功能设置的变量. 一般而言,这不是设置变量(描述你的系统策略的变量)的最好方式.后面会说到这个问题.&lt;/p>
&lt;p>一组相似的 hostname , 可简写如下:&lt;/p>
&lt;pre>&lt;code>[webservers]
www[01:50].example.com
&lt;/code>&lt;/pre>
&lt;p>数字的简写模式中,01:50 也可写为 1:50,意义相同.你还可以定义字母范围的简写模式:&lt;/p>
&lt;pre>&lt;code>[databases]
db-[a:f].example.com
&lt;/code>&lt;/pre>
&lt;p>对于每一个 host,你还可以选择连接类型和连接用户名:&lt;/p>
&lt;pre>&lt;code>[targets]
localhost ansible_connection=local
other1.example.com ansible_connection=ssh ansible_ssh_user=mpdehaan
other2.example.com ansible_connection=ssh ansible_ssh_user=mdehaan
&lt;/code>&lt;/pre>
&lt;p>所有以上讨论的对于 inventory 文件的设置是一种速记法,后面我们会讨论如何将这些设置保存为 ‘host_vars’ 目录中的独立的文件.&lt;/p>
&lt;h3 id="默认组">默认组&lt;/h3>
&lt;p>Inventory 文件中有两个默认的组，名称为：&lt;code>all&lt;/code> 和 &lt;code>ungrouped&lt;/code>(这两个名称是隐藏的)。all 组包含所有主机，ungrouped 组包含除了 all 有之外没有属组的主机。&lt;/p>
&lt;p>每个主机至少属于 2 个组&lt;/p>
&lt;ul>
&lt;li>all 和 ungrouped&lt;/li>
&lt;li>all 和 某组&lt;/li>
&lt;/ul>
&lt;h2 id="主机变量">主机变量&lt;/h2>
&lt;p>前面已经提到过,分配变量给主机很容易做到,这些变量定义后可在 playbooks 中使用:&lt;/p>
&lt;pre>&lt;code>[atlanta]
host1 http_port=80 maxRequestsPerChild=808
host2 http_port=303 maxRequestsPerChild=909
&lt;/code>&lt;/pre>
&lt;h2 id="组变量">组变量&lt;/h2>
&lt;p>也可以定义属于整个组的变量:&lt;/p>
&lt;pre>&lt;code>[atlanta]
host1
host2
[atlanta:vars]
ntp_server=ntp.atlanta.example.com
&lt;/code>&lt;/pre>
&lt;p>把一个组作为另一个组的子成员&lt;/p>
&lt;p>可以把一个组作为另一个组的子成员,以及分配变量给整个组使用. 这些变量可以给 /usr/bin/ansible-playbook 使用,但不能给 /usr/bin/ansible 使用:&lt;/p>
&lt;pre>&lt;code>[atlanta]
host1
host2
[raleigh]
host2
host3
[southeast:children]
atlanta
raleigh
[southeast:vars]
some_server=foo.southeast.example.com
halon_system_timeout=30
self_destruct_countdown=60
escape_pods=2
[usa:children]
southeast
northeast
southwest
northwest
&lt;/code>&lt;/pre>
&lt;p>如果我们需要存储一个列表或 hash 值，或者更喜欢把 host 和 group 的变量分开配置，请看下一节的说明.&lt;/p>
&lt;h1 id="组织-host_vars主机变量-和-group_vars组变量">组织 host_vars(主机变量) 和 group_vars(组变量)&lt;/h1>
&lt;p>在 Inventory 主文件中保存所有的变量并不是最佳的方式。我们通常在&lt;strong>独立的文件&lt;/strong>中定义这些变量，这些独立文件与 inventory 文件保持关联. 不同于 inventory 文件(INI 格式)，这些独立文件的格式为 YAML。&lt;/p>
&lt;p>假设有一个主机名为 ‘foosball’, 主机同时属于两个组&lt;/p>
&lt;ul>
&lt;li>raleigh&lt;/li>
&lt;li>webservers&lt;/li>
&lt;/ul>
&lt;p>那么以下配置文件中的变量可以为 ‘foosball’ 主机所用.依次为 ‘raleigh’ 的组变量,’webservers’ 的组变量,’foosball’ 的主机变量:&lt;/p>
&lt;pre>&lt;code>/etc/ansible/group_vars/raleigh
/etc/ansible/group_vars/webservers
/etc/ansible/host_vars/foosball
&lt;/code>&lt;/pre>
&lt;blockquote>
&lt;p>注意：&lt;/p>
&lt;ul>
&lt;li>&lt;code>group_vars/&lt;/code> 目录下文件名必须是&lt;strong>组名&lt;/strong>才可以将变量的值应用相同组名的组中的主机
&lt;ul>
&lt;li>如上所示：group_vars/raleigh 中的组变量适用于 raleigh 组。&lt;/li>
&lt;li>文件名也可以使用 all 和 ungrouped 用于为所有主机或所有未分组的主机定义变量。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>举例来说,假设你有一些主机,属于不同的数据中心,并依次进行划分.每一个数据中心使用一些不同的服务器.比如 ntp 服务器, database 服务器等等. 那么 ‘raleigh’ 这个组的组变量定义在文件 ‘/etc/ansible/group_vars/raleigh’ 之中,可能类似这样:&lt;/p>
&lt;pre>&lt;code>---
ntp_server: acme.example.org
database_server: storage.example.org
&lt;/code>&lt;/pre>
&lt;p>这些定义变量的文件不是一定要存在,因为这是可选的特性.&lt;/p>
&lt;p>还有更进一步的运用,你可以为一个主机,或一个组,创建一个目录,目录名就是主机名或组名.目录中的可以创建多个文件, 文件中的变量都会被读取为主机或组的变量.如下 ‘raleigh’ 组对应于 /etc/ansible/group_vars/raleigh/ 目录,其下有两个文件 db_settings 和 cluster_settings, 其中分别设置不同的变量:&lt;/p>
&lt;pre>&lt;code>/etc/ansible/group_vars/raleigh/db_settings
/etc/ansible/group_vars/raleigh/cluster_settings
&lt;/code>&lt;/pre>
&lt;p>‘raleigh’ 组下的所有主机,都可以使用 ‘raleigh’ 组的变量.当变量变得太多时,分文件定义变量更方便我们进行管理和组织. 还有一个方式也可参考,详见 Ansible Vault 关于组变量的部分. 注意,分文件定义变量的方式只适用于 Ansible 1.4 及以上版本.&lt;/p>
&lt;p>我们可以将 &lt;code>group_vars/&lt;/code> 和 &lt;code>host_vars/&lt;/code> 目录添加到 playbook 目录下. 如果两个目录下都存在,那么 playbook 目录下的配置会覆盖 inventory 目录的配置.&lt;/p>
&lt;p>把我们的 Inventory 文件 和 变量 放入 git repo 中,以便跟踪他们的更新,这是一种非常推荐的方式.&lt;/p>
&lt;h1 id="主机匹配模式">主机匹配模式&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/user_guide/intro_patterns.html">官方文档，用户指南-传统目录-模式：针对主机和组&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>主机列表的正则匹配
ansible 支持主机列表的正则匹配&lt;/p>
&lt;ul>
&lt;li>全量: &lt;code>all/*&lt;/code>&lt;/li>
&lt;li>逻辑或: &lt;code>:&lt;/code>&lt;/li>
&lt;li>逻辑非: &lt;code>!&lt;/code>&lt;/li>
&lt;li>逻辑与: &lt;code>＆&lt;/code>&lt;/li>
&lt;li>切片： &lt;code>[]&lt;/code>&lt;/li>
&lt;li>正则匹配： 以 &lt;code>~&lt;/code> 开头&lt;/li>
&lt;/ul>
&lt;p>ansible all -m ping #所有默认 inventory 文件中的机器
ansible &amp;ldquo;&lt;em>&amp;rdquo; -m ping #同上
ansible 121.28.13.&lt;/em> -m ping #所有 122.28.13.X 机器
ansible web1:web2 -m ping #所有属于组 web1 或属于 web2 的机器
ansible web1:!web2 -m ping #属于组 web1，但不属于 web2 的机器
ansible web1&amp;amp;web2 -m ping #属于组 web1 又属于 web2 的机器
ansible webserver[0] -m ping #属于组 webserver 的第 1 台机器
ansible webserver[0:5] -m ping #属于组 webserver 的第 1 到 4 台机器
ansible &amp;ldquo;~(beta|web).example.(com|org)&amp;rdquo; -m ping
&lt;a href="https://blog.51cto.com/kusorz/1936708">
&lt;/a>&lt;/p>
&lt;h1 id="inventory-参数详解">Inventory 参数详解&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/user_guide/intro_inventory.html#connecting-to-hosts-behavioral-inventory-parameters">官方文档,用户指南-传统目录-如何构建你的 Inventory-连接到主机:Inventory 参数&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>如同前面提到的,通过设置下面的参数,可以控制 ansible 与远程主机的交互方式,&lt;/p>
&lt;p>ansible_connection #指定 ansible 与远程主机的 connector(连接器)，默认为 ssh 的 smart 类型。&amp;lsquo;smart&amp;rsquo; 方式会根据是否支持 ControlPersist, 来判断&amp;rsquo;ssh&amp;rsquo; 方式是否可行.&lt;/p>
&lt;ul>
&lt;li>smart、ssh、paramiko #这三种类型都是 ssh 连接器下的类型。默认为 smart&lt;/li>
&lt;li>local&lt;/li>
&lt;li>docker&lt;/li>
&lt;/ul>
&lt;p>General 通用连接参数&lt;/p>
&lt;ul>
&lt;li>&lt;strong>ansible_host&lt;/strong> # 将要连接的远程主机名.可以设为 ip&lt;/li>
&lt;li>&lt;strong>ansible_port&lt;/strong> # 将要连接的远程主机端口号.默认端口为 22&lt;/li>
&lt;li>&lt;strong>ansible_user&lt;/strong> # 将要连接的远程主机的用户名&lt;/li>
&lt;li>&lt;strong>ansible_password&lt;/strong> # 将要连接的远程主机的密码(这种方式并不安全,我们强烈建议使用 &amp;ndash;ask-pass 或 -k 或 SSH 密钥)&lt;/li>
&lt;/ul>
&lt;p>只适用于 SSH 连接所用参数&lt;/p>
&lt;ul>
&lt;li>**ansible_sudo_pass **# sudo 密码(这种方式并不安全,我们强烈建议使用 &amp;ndash;ask-sudo-pass)&lt;/li>
&lt;li>&lt;strong>ansible_sudo_exe&lt;/strong> # sudo 命令路径(适用于 1.8 及以上版本)&lt;/li>
&lt;li>**ansible_ssh_private_key_file **# ssh 使用的私钥文件.适用于有多个密钥,而你不想使用 SSH 代理的情况.&lt;/li>
&lt;li>**ansible_shell_type **#目标系统的 shell 类型.默认情况下,命令的执行使用 &amp;lsquo;sh&amp;rsquo; 语法,可设置为 &amp;lsquo;csh&amp;rsquo; 或 &amp;lsquo;fish&amp;rsquo;.&lt;/li>
&lt;/ul>
&lt;p>权限提升参数&lt;/p>
&lt;ul>
&lt;li>&lt;strong>ansible_becom=yes|no&lt;/strong> # 是否允许提升权限执行操作。&lt;/li>
&lt;li>&lt;strong>ansible_become_user=&lt;!-- raw HTML omitted -->&lt;/strong> # 权限提升执行操作时所使用的用户。&lt;code>默认值：root&lt;/code>&lt;/li>
&lt;li>&lt;strong>ansible_become_password=&lt;!-- raw HTML omitted -->&lt;/strong> # 权限提升执行操作时所使用的用户的密码。(这种方式并不安全,我们强烈建议使用 &amp;ndash;ask-become-pass 或 -K)&lt;/li>
&lt;/ul>
&lt;p>远程主机环境参数&lt;/p>
&lt;ul>
&lt;li>**ansible_python_interprete **# 目标主机的 python 路径.适用于的情况: 系统中有多个 Python, 或者命令路径不是&amp;quot;/usr/bin/python&amp;quot;,比如 *BSD, 或者 /usr/bin/python
&lt;ul>
&lt;li>不是 2.X 版本的 Python.我们不使用 &amp;ldquo;/usr/bin/env&amp;rdquo; 机制,因为这要求远程用户的路径设置正确,且要求 &amp;ldquo;python&amp;rdquo; 可执行程序名不可为 python 以外的名字(实际有可能名为 python26). 与 ansible_python_interpreter 的工作方式相同,可设定如 ruby 或 perl 的路径&amp;hellip;.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>一个主机文件的例子:&lt;/p>
&lt;pre>&lt;code>some_host ansible_ssh_port=2222 ansible_ssh_user=manager
aws_host ansible_ssh_private_key_file=/home/example/.ssh/aws.pem
freebsd_host ansible_python_interpreter=/usr/local/bin/python
ruby_module_host ansible_ruby_interpreter=/usr/bin/ruby.1.9.3
&lt;/code>&lt;/pre>
&lt;h1 id="加密-inventory-中的密码">加密 Inventory 中的密码&lt;/h1>
&lt;p>假如现在有如下主机清单&lt;/p>
&lt;pre>&lt;code>[test]
hw-cloud-xngy-jump-server-linux-2 ansible_host=192.168.0.249 ansible_port=10022
[test:vars]
ansible_user=lichenhao
ansible_password={{ test_password }}
ansible_become=yes
ansible_become_password={{ test_become_password }}
&lt;/code>&lt;/pre>
&lt;p>其中的密码，是通过变量引用的，而这些变量所在的文件是可以加密的，加密后，即可保证操作便捷的同时保证安全性
我们可以在 Inventory 目录下创建一个 group_vars 目录，并在 group_vars 目录创建一个与 主机组名称同名的文件，效果如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>../inventory/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── group_vars
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   └── test
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── test
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 group_vars/test 中，内容应该如下(其中的变量替换成自己的密码)：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>test_password: &lt;span style="color:#e6db74">${&lt;/span>PASSWORD&lt;span style="color:#e6db74">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>test_become_password: &lt;span style="color:#e6db74">${&lt;/span>PASSWORD&lt;span style="color:#e6db74">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后使用 &lt;code>ansible-vault encrypt group_vars/test&lt;/code> 命令加密该文件，加密后的文件内容如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ANSIBLE_VAULT;1.1;AES256
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">33393764306539363338646334396661323930396235303837663131366562303237666337643864&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>6132363363383364316561326263633564323134336466660a623732613966653036326433313666
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">36356665663962613630393063303361353839313839636332313332666264363265646331333965&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>3164393363643639650a306233376438386333343961313735666161396365663235343430666437
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">64306364646266363563333437323364356332393639323436396136343438383662653133323634&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">33613239316237353839313632383530303638393966363133383834363662353135306563323635&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">386564623764653966303265653136353165&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这时候，我们执行 Playbooks 时，如果不指定解密所需的密码，将会提示如下报错&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>lichenhao@hw-cloud-xngy-jump-server-linux-2 ~/projects/DesistDaydream/ansible/playbooks&lt;span style="color:#f92672">]&lt;/span>$ ansible-playbook -i ../inventory/ variables.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PLAY &lt;span style="color:#f92672">[&lt;/span>test&lt;span style="color:#f92672">]&lt;/span> *******************************************************************************************************************************************************************
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ERROR! Attempting to decrypt but no vault secrets found
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>只需要添加 &lt;code>--ask-vault-pass&lt;/code> 参数并输入密码，Ansible 即可在运行中解密文件，并获取其中的变量值&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>lichenhao@hw-cloud-xngy-jump-server-linux-2 ~/projects/DesistDaydream/ansible/playbooks&lt;span style="color:#f92672">]&lt;/span>$ ansible-playbook -i ../inventory/ variables.yaml --ask-vault-pass
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Vault password:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PLAY &lt;span style="color:#f92672">[&lt;/span>test&lt;span style="color:#f92672">]&lt;/span> *******************************************************************************************************************************************************************
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TASK &lt;span style="color:#f92672">[&lt;/span>variables : test&lt;span style="color:#f92672">]&lt;/span> *******************************************************************************************************************************************************
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>changed: &lt;span style="color:#f92672">[&lt;/span>hw-cloud-xngy-jump-server-linux-2&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TASK &lt;span style="color:#f92672">[&lt;/span>variables : debug&lt;span style="color:#f92672">]&lt;/span> ******************************************************************************************************************************************************
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ok: &lt;span style="color:#f92672">[&lt;/span>hw-cloud-xngy-jump-server-linux-2&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">=&lt;/span>&amp;gt; &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;msg&amp;#34;&lt;/span>: &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ansible_facts&amp;#34;&lt;/span>: &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;discovered_interpreter_python&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/usr/bin/python3&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;changed&amp;#34;&lt;/span>: true,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;cmd&amp;#34;&lt;/span>: &lt;span style="color:#f92672">[&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;whoami&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;delta&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;0:00:00.002581&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;end&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2021-10-10 22:10:39.338994&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;failed&amp;#34;&lt;/span>: false,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;rc&amp;#34;&lt;/span>: 0,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;start&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2021-10-10 22:10:39.336413&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;stderr&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;stderr_lines&amp;#34;&lt;/span>: &lt;span style="color:#f92672">[]&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;stdout&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;root&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;stdout_lines&amp;#34;&lt;/span>: &lt;span style="color:#f92672">[&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;root&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: IPMI</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/standardized-glossary%E6%A0%87%E5%87%86%E5%8C%96%E6%9C%AF%E8%AF%AD/ipmi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/standardized-glossary%E6%A0%87%E5%87%86%E5%8C%96%E6%9C%AF%E8%AF%AD/ipmi/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;a href="https://en.wikipedia.org/wiki/Intelligent_Platform_Management_Interface">Wiki，IPMI&lt;/a>、&lt;a href="https://en.wikipedia.org/wiki/Intelligent_Platform_Management_Interface#Baseboard_management_controller">Wiki，BMC&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>**IntelligentPlatformManagement Interface(智能平台管理接口，简称 IPMI) **是一组自动计算机子系统的计算机接口规范，可提供管理和监视功能，独立于主机系统的 CPU，固件（BIOS 或 UEFI）和操作系统。&lt;/p>
&lt;p>IPMI 定义了系统管理员使用的一组接口，用于计算机系统的带外管理和监控其操作。例如，IPMI 提供了一种方法来管理可以通过使用与硬件的网络连接而不是对操作系统或登录外部关闭或以其他方式无响应的方式。另一个用例可以远程安装自定义操作系统。如果没有 IPMI，安装自定义操作系统可能需要管理员在计算机附近物理存在，请插入 DVD 或包含 OS 安装程序的 USB 闪存驱动器，并使用监视器和键盘完成安装过程。使用 IPMI，管理员可以安装 ISO 映像，模拟安装程序 DVD，并远程执行安装。&lt;/p>
&lt;h2 id="bmc">BMC&lt;/h2>
&lt;p>&lt;strong>Baseboard Management Controller(主板管理控制器)&lt;/strong> 提供 IPMI 架构中的智能。它是一个专门的微控制器，嵌入计算机主板上 - 通常是服务器。 BMC 管理系统管理软件和平台硬件之间的接口。 BMC 有自己的固件和 RAM。&lt;/p>
&lt;p>计算机系统内置的不同类型的传感器对 BMC 的参数，如温度，冷却风扇速度，电源状态，操作系统（OS）状态等。 BMC 监视传感器，如果任何参数在预设限制内，则可以通过网络向系统管理员发送警报，指示系统的潜在故障。管理员还可以远程与 BMC 通信，采取一些纠正措施 - 例如重置或电源循环系统以获得再次运行的挂起操作系统。这些能力降低了系统的总体拥有成本。&lt;/p>
&lt;p>符合 IPMI 版本 2.0 的系统也可以通过串行通信 LAN，从而可以通过 LAN 远程查看串行控制台输出。实现 IPMI 2.0 的系统通常还包括 KVM OVER IP，远程虚拟媒体和带外嵌入式 Web 服务器界面功能，虽然严格来说，这些位于 IPMI 接口标准的范围之外。&lt;/p>
&lt;h2 id="impi-的实现">IMPI 的实现&lt;/h2>
&lt;p>Dell iDrac
HuaWei iBmc
H3C HDM
浪潮 未知
HP iLO&lt;/p></description></item><item><title>Docs: kickstart 介绍</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/cobbler/kickstart-%E4%BB%8B%E7%BB%8D/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/cobbler/kickstart-%E4%BB%8B%E7%BB%8D/</guid><description>
&lt;h1 id="kickstart-简介">KickStart 简介&lt;/h1>
&lt;p>官方文档：&lt;a href="https://docs.centos.org/en-US/centos/install-guide/Kickstart2">https://docs.centos.org/en-US/centos/install-guide/Kickstart2&lt;/a>&lt;/p>
&lt;h1 id="kickstart-语法参考">Kickstart 语法参考&lt;/h1>
&lt;p>官方文档：&lt;a href="https://docs.centos.org/en-US/centos/install-guide/Kickstart2/#sect-kickstart-syntax">https://docs.centos.org/en-US/centos/install-guide/Kickstart2/#sect-kickstart-syntax&lt;/a>&lt;/p>
&lt;h2 id="磁盘配置">磁盘配置&lt;/h2>
&lt;p>bootloader [OPTIONS] #引导程序(boot loader)的相关配置。&lt;/p>
&lt;p>--location=VALUE #指定引导程序的安装位置为 VALUE&lt;/p>
&lt;ol>
&lt;li>
&lt;p>mbr #默认值。取决于磁盘格式是 MBR 还是 GUID&lt;/p>
&lt;/li>
&lt;li>
&lt;p>partition #将引导程序安装在包含内核的分区的第一个扇区中&lt;/p>
&lt;/li>
&lt;li>
&lt;p>none #不安装引导程序&lt;/p>
&lt;/li>
&lt;li>
&lt;p>boot #未知，待更新&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>磁盘分区相关配置&lt;/p>
&lt;p>part MntPoint [OPTIONS] # 创建一个分区，挂载点为 MntPoint，&lt;/p>
&lt;p>MntPoint #可用的挂载点有如下几种。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>/PATH # 指定挂载点到具体路径下&lt;/p>
&lt;/li>
&lt;li>
&lt;p>swap # 指定该分区为 swap&lt;/p>
&lt;/li>
&lt;li>
&lt;p>raid.ID&lt;/p>
&lt;/li>
&lt;li>
&lt;p>pv.ID # 指定该分区用于 lvm，即创建一个 pv(物理卷)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>biosboot # 指定该分区用于 BIOS 引导,建议大小为 2MiB&lt;/p>
&lt;/li>
&lt;li>
&lt;p>/boot/efi # 指定该分区用于 UEFI 引导，建议大小为 200MiB.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>OPTIONS&lt;/p>
&lt;ul>
&lt;li>
&lt;p>--size=NUM # 指定该分区的大小，单位为 MiB。Note：NUM 为一个正整数(不包含单位)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>--grow # 将该分区大小设置为所有剩余可用的空间。如果指定了 &amp;ndash;maximum 选项，则将该分区设置为该选项值的大小。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>--asprimary # 指定该分区为主分区。Note：对于 GUID 分区表(GPT),该选项没有任何意义。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>--fstype=TYPE #指定该分区的文件系统类型。可用类型有 xfs、ext2、ext3、ext4、swap、vfat、efi、biosboot&lt;/p>
&lt;/li>
&lt;li>
&lt;p>--ondisk= #指定要使用的磁盘名称&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>volgroup Name PartName #创建名为 NAME 卷组，使用名为 PartName 分区&lt;/p>
&lt;p>logvol PATH &amp;ndash;vgname=VGNAME &amp;ndash;name=NAME [OPTIONS] # 创建名为 NAME 逻辑卷，使用名为 VGNAME 的卷组&lt;/p>
&lt;p>配置示例：&lt;/p>
&lt;pre>&lt;code># 配置引导程序的信息，将引导程序安装到 mbr 中，
bootloader --location=mbr --append=&amp;quot;crashkernel=auto&amp;quot;
# 清理所有分区
clearpart --all --initlabel
# 创建主分区，挂载到/boot，文件系统类型为xfs，大小为500M，使用sda磁盘
part /boot --fstype=xfs --asprimary --size=500 --ondisk=sda
part biosboot --fstype=biosboot --asprimary --size=2 --ondisk=sda
# 分区，创建一个名为pv.01的物理卷，大小为磁盘剩余的所有空间，使用sda磁盘
part pv.01 --size=1 --grow --ondisk=sda
# 使用pv.01来创建一个vg0的卷组
volgroup vg0 pv.01
# 使用vg0卷组来创建逻辑卷，逻辑卷为swap分区，文件系统类型为swap，大小为32G，名字为swap
logvol swap --fstype swap --size=32768 --name=swap --vgname=vg0
# 使用vg0卷组来创建逻辑卷，挂载到/目录下，文件系统类型为xfs，大小使用逻辑卷剩下的所有空间，名字为root
logvol / --fstype xfs --size=1 --grow --name=root --vgname=vg0
# 分区，创建一个名为pv.02的物理卷，大小为磁盘剩余的所有空间，使用sdb磁盘
part pv.02 --size=1 --grow --ondisk=sdb
volgroup vg1 pv.02
logvol /app --fstype xfs --size=1 --grow --name=app --vgname=vg1
# UEFI模式下需要增加下面一条分区，且不用创建biosboot分区
part /boot/efi --fstype=&amp;quot;efi&amp;quot; --ondisk=sda --size=500 --fsoptions=&amp;quot;umask=0077,shortname=winnt&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>Packages 安装配置&lt;/p>
&lt;p>官方文档：&lt;a href="https://docs.centos.org/en-US/centos/install-guide/Kickstart2/#sect-kickstart-packages">https://docs.centos.org/en-US/centos/install-guide/Kickstart2/#sect-kickstart-packages&lt;/a>&lt;/p>
&lt;p>使用 ％packages %end 关键字指定 Kickstart 安装哪些软件包以及如何安装它们，可以指定 environment、group 或者单独的包名。这些可用的 packages 可以在 CentOS 的安装镜像的 .repodata/* 目录中找到&lt;/p>
&lt;p>比如当我把 iso 镜像文件挂载到 /mnt 目录下时，可以看到如下内容。(那些 xml 文件中可以看到 packages 列表及其依赖)&lt;/p>
&lt;pre>&lt;code>[root@cobbler repodata]# pwd
/mnt/BaseOS/repodata
[root@cobbler repodata]# ls
08a9add0907af002934460d81ea0edc8bb4154db679cdc113d4c51efcbddfce4-comps-BaseOS.x86_64.xml.xz 89376911bec34defd11535ee1f9e74237ec25e63c4dc5041ed519f1166d1cdca-other.xml.gz repomd.xml
190ce1d49a76eafb61b0e2738d7331a45f1efbdfb4c2c274176486f8c82f7f80-primary.xml.gz a6e31179a63dffb12846a2f8ad848618e7669225deb4222acadcbabb04d522f0-filelists.sqlite.xz TRANS.TBL
2caf33eae61c01725123a875217fe6bb0754c2916e7336286fbc392d23f42b57-other.sqlite.xz a9b7530c36c9681b97c159cd98693e7fffecf2d1018d508f990934a4fa71b447-primary.sqlite.xz
53db8eac92f79abf479e202fb013aca86d5060fd948e1ed7ea8f9493e72fd4d1-filelists.xml.gz fe7d9972481aaef922e8a2fafa4065c4eb9422125da783a058a9988cd9f3eb27-comps-BaseOS.x86_64.xml
&lt;/code>&lt;/pre>
&lt;p>.xml 文件中包含描述可用环境（用标记）和组（标记）的结构。每个条目都有一个 ID，用户可见性的值，名称，描述和包列表。如果选择了要安装的组，则始终会安装软件包列表中标记为必选的软件包，如果未在其他位置专门排除标记为默认的软件包，则即使已选择该组，也必须在其他位置特别包括标记为可选的软件包。&lt;/p>
&lt;p>配置示例：&lt;/p>
&lt;pre>&lt;code>%packages
安装 minimal-enviroment 环境的所有软件包，一个 Kickstart 文件仅可指定一个 environment 包
@^minimal-environment
安装 core 组下的所有软件包
@core
安装 kexec-tools 软件包
kexec-tools
%end
&lt;/code>&lt;/pre>
&lt;p>kickstart 配置文件样例&lt;/p>
&lt;pre>&lt;code>#platform=x86, AMD64, or Intel EM64T
# System authorization information系统认证信息，使用加密，md5方式加密
auth --useshadow --enablemd5
# System bootloader configuration 系统引导配置
# --location指定创建引导的位置，在mbr中创建引导；--append指定内核参数，crashkernel为开启kdump
bootloader --location=mbr --append=&amp;quot;crashkernel=auto&amp;quot;
# Partition clearing information分区清除信息
# 清除所有分区，并初始化磁盘标签
clearpart --all --initlabel
# Use text mode install
text
# Firewall configuration 关闭防火墙
firewall --disabled
# Run the Setup Agent on first boot
firstboot --disable
# System keyboard 系统键盘
keyboard us
# System language 系统语言
lang en_US
# Use network installation 指明安装系统的方式，这里使用网络方式安装，指明提供安装程序的服务器地址和路径
url --url=$tree
# If any cobbler repo definitions were referenced in the kickstart profile, include them here.
$yum_repo_stanza
# $SNIPPET 变量括号内的值是目录/var/lib/cobbler/snippets下的文件，该文件中可以写入linux命令，当做脚本文件来说明
# Network information
$SNIPPET('network_config')
# Reboot after installation 安装完成后重启系统
reboot
#Root password设定root的密码
rootpw --iscrypted $default_password_crypted
# SELinux configuration关闭SELinux
selinux --disabled
# Do not configure the X Window System不要配置X window系统
skipx
# System timezone设定系统时区
timezone Asia/Shanghai
# Install OS instead of upgrade 重新安装操作系统，而不是升级
install
# Clear the Master Boot Record清除主引导记录
zerombr
# Allow anaconda to partition the system as needed该选项用于自动分区
#autopart
# Disk partitioning information磁盘分区信息
part /boot --fstype=xfs --asprimary --size=500
part biosboot --fstype=biosboot --asprimary --size=2
part pv.01 --size=1 --grow
volgroup vg0 pv.01
logvol / --fstype xfs --size=10240 --name=root --vgname=vg0
logvol swap --fstype swap --size=1024 --name=swap --vgname=vg0
logvol /var --fstype xfs --size=1 --grow --name=var --vgname=vg0
%pre
# %pre段落为安装前执行的任务
%end
%packages
# %package段落中指定要安装的软件包
@^minimal
@core
kexec-tools
%end
%post
#`%post`段落为安装系统完成后执行的任务
# 自定义系统配置
# 安装工具，在/var/lib/cobbler/snippets目录下添加名为tools的文件，文件中可以写入想要执行的linux命令
$SNIPPET('tools')
# End final steps
%end
&lt;/code>&lt;/pre></description></item><item><title>Docs: loop(循环)</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/ansible/playbook/loop%E5%BE%AA%E7%8E%AF/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/ansible/playbook/loop%E5%BE%AA%E7%8E%AF/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/user_guide/playbooks_loops.html">官方文档，用户指南-传统目录-Loops&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>有时需要重复执行多次任务。在计算机编程中，这称为循环。常见的 Ansible 循环包括使用文件模块更改多个文件和/或目录的所有权，使用用户模块创建多个用户以及重复轮询步骤直到达到特定结果。Ansible 提供了两个用于创建循环的关键字：&lt;code>loop&lt;/code> 和 &lt;code>with_XX&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;code>with_XX&lt;/code> 关键字依赖于 &lt;a href="https://docs.ansible.com/ansible/latest/plugins/inventory.html">Lookup Plugins(Lookup 插件)&lt;/a>。其中 根据插件的不同功能，使用不同的字符串。e.g.with_items 也是 Lookup 插件。
&lt;ul>
&lt;li>插件的介绍详见：&lt;a href="https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/Ansible/Playbook/Plugins(%E6%8F%92%E4%BB%B6).md">Plugins 插件&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>loop&lt;/code> 关键字与 with_list 等效，是简单循环的最佳选择&lt;/li>
&lt;/ul>
&lt;h2 id="循环的简单样例">循环的简单样例：&lt;/h2>
&lt;p>下面展示了循环的基本功能：通过 loop 或者 with_*来对一个列表中的值逐一操作&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">添加几个用户。循环的基本使用方式&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">user&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;{{ item }}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">state&lt;/span>: &lt;span style="color:#ae81ff">present&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">loop&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">testuser1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">testuser2&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>等同于&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">添加几个用户。先赋值给一个变量，然后在loop关键字中引用变量。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">vars&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">users&lt;/span>: [&lt;span style="color:#ae81ff">testuser1, testuser2]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">user&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;{{ item }}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">state&lt;/span>: &lt;span style="color:#ae81ff">present&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">loop&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;{{ users}}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上述示例与下面的任务相同。这就相当于将两个任务模块相同但是操作内容不同的任务合并成为一个任务&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">添加testuser1用户&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">user&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;testuser1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">state&lt;/span>: &lt;span style="color:#ae81ff">present&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">添加testuser2用户&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">user&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;testuser2&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">state&lt;/span>: &lt;span style="color:#ae81ff">present&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>从示例可以看出，循环是使用两个部分来组成整个循环的功能&lt;/p>
&lt;ol>
&lt;li>{{ item }}变量来引用 loop 关键字定义的内容
&lt;ol>
&lt;li>Note：在定义任何变量时，一定要避免使用 item 为变量名&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>loop 关键字来定义列表内容&lt;/li>
&lt;/ol>
&lt;h1 id="循环样例">循环样例：&lt;/h1>
&lt;h2 id="逐行读取文件">逐行读取文件&lt;/h2>
&lt;p>参考链接：&lt;a href="https://stackoverflow.com/questions/48403508/ansible-read-local-file-to-var-and-then-loop-read-line-by-line">https://stackoverflow.com/questions/48403508/ansible-read-local-file-to-var-and-then-loop-read-line-by-line&lt;/a>&lt;/p>
&lt;p>通过 lookup 插件中的 file 功能读取 ip_vs.conf 文件，并逐行读取文件赋值给变量 info，然后执行 modprobe 命令调用变量，逐一加载模块&lt;/p>
&lt;p>Note：一定要加 .splitlines() ，否则会将文件里的换行符都赋值给变量，这样，变量只有一个值，而不是一个列表了&lt;/p>
&lt;pre>&lt;code>- name: 加载模块
vars:
info: &amp;quot;{{ lookup('file', 'ip_vs.conf').splitlines() }}&amp;quot;
loop: &amp;quot;{{ info }}&amp;quot;
shell: modprobe {{ item }}
&lt;/code>&lt;/pre>
&lt;h2 id="匹配目录下所有文件">匹配目录下所有文件&lt;/h2>
&lt;p>这个任务通过 with_fieglob 插件来获取该剧本的 file 目录下 rpm 目录下的所有文件，将这些文件复制到远程设备的 /root/downloads/kubeadm-let-ctl/ 目录下。&lt;/p>
&lt;pre>&lt;code>- name: 拷贝rpm安装包
copy:
src: &amp;quot;{{ item }}&amp;quot;
dest: /root/downloads/kubeadm-let-ctl/
with_fileglob:
- rpm/*
&lt;/code>&lt;/pre></description></item><item><title>Docs: Playbook</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/ansible/playbook/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/ansible/playbook/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://galaxy.ansible.com/">Ansible Galaxy&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>与通过命令行来执行 Ansbile 任务模式相比，Playbook 是 Ansible 执行任务的另一种方式，而且功能非常强大。&lt;/p>
&lt;p>playbook 可以通过定义一个或多个文件，然后让 ansible 使用这些文件来完成一系列复杂的任务。如果说通过命令行是对多台设备执行一个任务，那么 Playbook 则是可以对多台设备按顺序执行不同任务。&lt;/p>
&lt;p>playbook 称为&amp;quot;剧本&amp;quot;。每个 playbook 都包含一个或多个 plays(戏剧)。拿拍电影举例，一部电影会有一部“剧本 playbook”来描述电影情节，而整部电影都是由一场一场的“戏剧 play”拼凑起来的。每一场戏剧又需要执行多种“任务 task”(比如亲嘴、打架、聊天、上床~~~)&lt;/p>
&lt;p>首先，下面是一个 playbook 的样例。这个 playbook 中包含两个 play，一个叫 webservers，另一个叫 databases。其中 webservers 中包含两个 tasks，一个要使用 yum 模块执行动作，另一个要使用 template 模块，向文件中写入内容&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">hosts&lt;/span>: &lt;span style="color:#ae81ff">webservers&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">remote_user&lt;/span>: &lt;span style="color:#ae81ff">root&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">tasks&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">ensure apache is at the latest version&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">yum&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">httpd&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">state&lt;/span>: &lt;span style="color:#ae81ff">latest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">write the apache config file&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">template&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">src&lt;/span>: &lt;span style="color:#ae81ff">/srv/httpd.j2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">dest&lt;/span>: &lt;span style="color:#ae81ff">/etc/httpd.conf&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">hosts&lt;/span>: &lt;span style="color:#ae81ff">databases&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">remote_user&lt;/span>: &lt;span style="color:#ae81ff">root&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">tasks&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">ensure postgresql is at the latest version&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">yum&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">postgresql&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">state&lt;/span>: &lt;span style="color:#ae81ff">latest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">ensure that postgresql is started&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">service&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">postgresql&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">state&lt;/span>: { { &lt;span style="color:#ae81ff">item } }&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">with_items&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">started&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 &lt;a href="https://galaxy.ansible.com/">Ansible Galaxy&lt;/a> 网站上，我们可以找到大量的社区已经编写好的 Playbook。&lt;/p>
&lt;h1 id="playbook-关键字">Playbook 关键字&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/reference_appendices/playbooks_keywords.html">官方文档，参考与附录-Playbook 关键字&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>关键字是配置 Ansible 行为的几个来源之一。有关每个源的相对优先级的详细信息，请参阅控制 Ansible 的行为方式：优先级规则。
hosts #
tasks # 要在 Play 中执行的主要任务列表，这些任务在 &lt;code>roles 关键字定义的任务之后&lt;/code>，以及 &lt;code>post_tasks 关键字定义的任务之前&lt;/code> 执行
roles #
name #&lt;/p>
&lt;h1 id="playbook-语法详解">Playbook 语法详解&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">hosts&lt;/span>: &lt;span style="color:#ae81ff">STRING&lt;/span> &lt;span style="color:#75715e">#指定该playbook要操作的主机&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">tasks&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">STRING&lt;/span> &lt;span style="color:#75715e">#(可省略)指定该任务名称&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">MODULES&lt;/span>: &lt;span style="color:#75715e">#指定该任务所要使用的模块名称&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">PARAMETER&lt;/span>: &lt;span style="color:#75715e">#指定该模块参数&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>或&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">hosts&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">roles&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">RoleNameOne&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">RoleNameTwo&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="block-将多个-task-合并为一个进行统一处理">block 将多个 task 合并为一个进行统一处理&lt;/h2>
&lt;p>块允许对任务进行逻辑分组以及进行中的错误处理。您可以应用于单个任务的大多数内容（循环除外）都可以应用于块级，这也使设置任务通用的数据或指令变得更加容易。这并不意味着该指令会影响块本身，而是被块所包含的任务继承。即何时将应用于任务，而不是块本身。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">tasks&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Install, configure, and start Apache&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">block&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">install httpd and memcached&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">yum&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">httpd&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">memcached&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">state&lt;/span>: &lt;span style="color:#ae81ff">present&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">apply the foo config template&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">template&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">src&lt;/span>: &lt;span style="color:#ae81ff">templates/src.j2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">dest&lt;/span>: &lt;span style="color:#ae81ff">/etc/foo.conf&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">start service bar and enable it&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">service&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">bar&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">state&lt;/span>: &lt;span style="color:#ae81ff">started&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">enabled&lt;/span>: &lt;span style="color:#66d9ef">True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">when&lt;/span>: &lt;span style="color:#ae81ff">ansible_facts[&amp;#39;distribution&amp;#39;] == &amp;#39;CentOS&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">become&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">become_user&lt;/span>: &lt;span style="color:#ae81ff">root&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ignore_errors&lt;/span>: &lt;span style="color:#66d9ef">yes&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="handler-任务处理器用于在执行任务时附加额外的任务">handler 任务处理器，用于在执行任务时附加额外的任务&lt;/h2>
&lt;p>官方文档：&lt;a href="https://docs.ansible.com/ansible/latest/user_guide/playbooks_intro.html?highlight=handlers#handlers-running-operations-on-change">https://docs.ansible.com/ansible/latest/user_guide/playbooks_intro.html?highlight=handlers#handlers-running-operations-on-change&lt;/a>&lt;/p>
&lt;p>ansible 执行的每一个 task 都会报告该任务是否改变了目标，即 changed=true 或 changed=false。当 ansible 捕捉到 changed 为 true 的时候，则会触发一个 notify(通知)组件，该组件的作用就是用来调用指定的 handler。&lt;/p>
&lt;p>handlers 示例：在 task 下定义 notify 来指定要调用的 handlers，需要与后面定义的 handlers 的 name 相同&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">tasks&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">copy template file to remote host&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">template&lt;/span>: &lt;span style="color:#ae81ff">src=https://desistdaydream.github.io/etc/ansible/nginx.conf.j2 dest=/etc/nginx/nginx.conf&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">notify&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">restart nginx&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">test web page&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">copy&lt;/span>: &lt;span style="color:#ae81ff">src=nginx/index.html.j2 dest=/usr/share/nginx/html/index.html&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">notify&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">restart nginx&lt;/span> &lt;span style="color:#75715e"># 与handlers中的name相同才会调用成功&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>handlers 示例：定义 handlers，与定义 task 类似。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">handlers&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">restart nginx&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">service&lt;/span>: &lt;span style="color:#ae81ff">name=nginx state=restarted&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">test web page&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">shell&lt;/span>: &lt;span style="color:#ae81ff">curl -I http://192.168.100.10/index.html | grep 200 || /bin/false&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面的示例表示：当执行 template 模块的任务时，如果捕捉到 changed=true，那么就会触发 notify，如果分发的 index.html 改变了，那么也重启 nginx(当然这是没必要的，仅做示例演示)&lt;/p>
&lt;p>Note：notify 是在执行完一个 play 中所有 task 后被触发的，在一个 play 中也只会被触发一次。意味着如果一个 play 中有多个 task 出现了 changed=true，它也只会触发一次。例如上面的示例中，向 nginx 复制配置文件和复制 index.html 时如果都发生了改变，都会触发重启 apache 操作。但是只会在执行完 play 后重启一次，以避免多余的重启。&lt;/p>
&lt;h2 id="playbook-中的错误处理">playbook 中的错误处理&lt;/h2>
&lt;p>通常情况下, 当出现失败时 Ansible 会停止在宿主机上执行.有时候,你会想要继续执行下去.为此 你需要像这样编写任务:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">this will not be counted as a failure&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">command&lt;/span>: &lt;span style="color:#ae81ff">/bin/false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ignore_errors&lt;/span>: &lt;span style="color:#66d9ef">yes&lt;/span> &lt;span style="color:#75715e"># 使用ignore_errors来忽略该任务失败后终止ansbile的效果&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Playbook Role(角色)</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/ansible/playbook/playbook-role%E8%A7%92%E8%89%B2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/ansible/playbook/playbook-role%E8%A7%92%E8%89%B2/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/user_guide/playbooks_reuse_roles.html">官方文档，用户指南-Roles&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://ansible-tran.readthedocs.io/en/latest/docs/playbooks_roles.html">Ansible 中文权威指南，Playbooks-Playbook 角色和 Incluede 语句&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>刚开始学习运用 playbook 时，可能会把 playbook 写成一个内容很多的文件，这种情况不利于扩展和复用。这时候可以使用一种方式，将这个复杂的 playbook 模块化，即拆分一个复杂的 playbook 文件成多个零散的小文件，将其组合成一个一个具有不同功能的 playbook。&lt;/p>
&lt;p>这时候就需要用到 ansible playbook 的 roles 概念了。roles 实际上是对 playbook 进行逻辑上的划分，主要依赖于目录的命名和摆放，一个 Role 就是一个目录，Role 名与目录名相同。&lt;/p>
&lt;p>当我们开始思考这些概念：tasks, handlers, variables 等等，是否可以将它们抽象为一个更大的概念呢。我们考虑的不再是”将这些 tasks，handlers，variables 等等应用到这些 hosts 中”，而是有了更抽象的概念，比如：”这些 hosts 是 dbservers” 或者 “那些 hosts 是 webservers”（注：dbserver，webservers 即是”角色”）。这种思考方式在编程中被称为”封装”，将其中具体的功能封装了起来。举个例子，你会开车但并不需要知道引擎的工作原理（注：同样的道理，我们只需要知道”这些 hosts 是 dbservers”，而不需要知道其中有哪些 task，handlers 等）。&lt;/p>
&lt;h1 id="roles-目录结构">roles 目录结构&lt;/h1>
&lt;p>下面是一个最基本的 roles 目录结构。在这个目录结构里，有两个 roles，一个名为 common，另一个名为 webservers&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>site.yml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>webservers.yml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fooservers.yml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>roles/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> common/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tasks/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> handlers/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> files/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> templates/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vars/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> defaults/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> meta/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> webservers/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tasks/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> defaults/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> meta/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>每个目录的作用如下&lt;/p>
&lt;ul>
&lt;li>&lt;strong>tasks&lt;/strong> # 包含角色要执行任务的主要列表&lt;/li>
&lt;li>&lt;strong>handlers&lt;/strong> # 包含 handlers，该 role 甚至该 role 之外的任何地方都可以使用这些 handlers&lt;/li>
&lt;li>&lt;strong>defaults&lt;/strong> # 包含该 role 的变量的默认值 (see Using Variables for more information).&lt;/li>
&lt;li>&lt;strong>vars&lt;/strong> # 包含该 role 的变量的自定义值 (see Using Variables for more information).&lt;/li>
&lt;li>&lt;strong>files&lt;/strong> # 包含可以通过该 role 部署的文件。比如通过 script 模块使用的脚本。&lt;/li>
&lt;li>&lt;strong>templates&lt;/strong> # 包含可以通过该 role 部署的模板&lt;/li>
&lt;li>&lt;strong>meta&lt;/strong> # 为该 role 定义的一些元数据&lt;/li>
&lt;/ul>
&lt;p>Note：如果想让这些目录生效，需要在 tasks、handlers、vars、defaults、meta 目录中保存名为 main.yml 的文件，main.yml 的作用详见下文。如果没有文件或目录不存在，则会忽略&lt;/p>
&lt;h2 id="使用-roles">使用 roles&lt;/h2>
&lt;p>在 playbook.yaml 文件中，使用关键字 roles 即可调用指定的 roles 内的工作内容&lt;/p>
&lt;pre>&lt;code>- hosts: webservers
roles:
- common
- webservers
&lt;/code>&lt;/pre>
&lt;p>roles 下指定的每个值(roles 名)，ansbile 都会去与该值同名的目录中获取其中所有文件，这其中遵循如下规则：&lt;/p>
&lt;ul>
&lt;li>如果 roles/X/tasks/main.yml 存在, 则其中列出的 task 将添加到 play 中。&lt;/li>
&lt;li>如果 roles/X/handlers/main.yml 存在, 则其中列出的 handler 都将添加到 play 中&lt;/li>
&lt;li>如果 roles/X/vars/main.yml 存在, 则其中列出的 variables 都将添加到 play 中&lt;/li>
&lt;li>如果 roles/X/defaults/main.yml 存在, 则其中列出的默认变量值会被添加到 play 中，如果在其他地方没有指定其中列出的变量的值，则会用到默认值&lt;/li>
&lt;li>如果 roles/X/meta/main.yml 存在,则其中列出的所有角色依赖项都将添加到角色列表中&lt;/li>
&lt;li>task 中 copy，script，template 或 include task 模块都会自动引用 role/X/{files,templates,tasks} 目录中文件，而不必使用绝对路径设置。&lt;/li>
&lt;/ul>
&lt;p>Note：&lt;/p>
&lt;ul>
&lt;li>其中 X 为 Role 名字&lt;/li>
&lt;li>ansible 会从以下几个目录中寻找与 roles 同名的目录来获取其中的内容
&lt;ul>
&lt;li>./roles # playbook.yaml 文件所在的目录寻找 roles 目录&lt;/li>
&lt;li>/etc/ansbile/roles # 默认的系统级别的 roles 目录&lt;/li>
&lt;li>/root/.ansible/roles&lt;/li>
&lt;li>/usr/share/ansible/roles&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>也可以在 ansible 的配置文件 ansbile.cfg 中修改 roles_path 字段来指定默认系统级别 role 的位置&lt;/li>
&lt;/ul>
&lt;h1 id="roles-目录结构的最佳示例">roles 目录结构的最佳示例&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/user_guide/sample_setup.html">官方文档，用户指南-配置样例&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>production &lt;span style="color:#75715e"># 适用于 production 的 Inventory 文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>staging &lt;span style="color:#75715e"># 适用于 staging 的 Inventory 文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>group_vars/ &lt;span style="color:#75715e"># 在这里定义组的变量&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> group1.yml &lt;span style="color:#75715e"># 文件名以组名命名，group1.yml 是适用于 group1 组的变量&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> group2.yml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>host_vars/ &lt;span style="color:#75715e"># 在这里定义主机变量&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hostname1.yml &lt;span style="color:#75715e"># 文件名以主机名命名，hostname1.yml 是适用于 hostname1 主机的变量&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hostname2.yml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>library/ &lt;span style="color:#75715e"># if any custom modules, put them here (optional)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>module_utils/ &lt;span style="color:#75715e"># if any custom module_utils to support modules, put them here (optional)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>filter_plugins/ &lt;span style="color:#75715e"># if any custom filter plugins, put them here (optional)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>site.yml &lt;span style="color:#75715e"># master playbook&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>webservers.yml &lt;span style="color:#75715e"># playbook for webserver tier&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dbservers.yml &lt;span style="color:#75715e"># playbook for dbserver tier&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 当需要管理多个 Role 时，可以在 roles/ 目录中&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>roles/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> common/ &lt;span style="color:#75715e"># 名为 common 的角色&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tasks/ &lt;span style="color:#75715e">#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> main.yml &lt;span style="color:#75715e"># &amp;lt;-- tasks file can include smaller files if warranted&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> handlers/ &lt;span style="color:#75715e">#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> main.yml &lt;span style="color:#75715e"># &amp;lt;-- handlers file&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> templates/ &lt;span style="color:#75715e"># &amp;lt;-- files for use with the template resource&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ntp.conf.j2 &lt;span style="color:#75715e"># &amp;lt;------- templates end in .j2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> files/ &lt;span style="color:#75715e">#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bar.txt &lt;span style="color:#75715e"># &amp;lt;-- files for use with the copy resource&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> foo.sh &lt;span style="color:#75715e"># &amp;lt;-- script files for use with the script resource&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vars/ &lt;span style="color:#75715e">#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> main.yml &lt;span style="color:#75715e"># &amp;lt;-- variables associated with this role&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> defaults/ &lt;span style="color:#75715e">#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> main.yml &lt;span style="color:#75715e"># &amp;lt;-- default lower priority variables for this role&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> meta/ &lt;span style="color:#75715e">#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> main.yml &lt;span style="color:#75715e"># &amp;lt;-- role dependencies&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> library/ &lt;span style="color:#75715e"># roles can also include custom modules&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> module_utils/ &lt;span style="color:#75715e"># roles can also include custom module_utils&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lookup_plugins/ &lt;span style="color:#75715e"># or other types of plugins, like lookup in this case&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> webtier/ &lt;span style="color:#75715e"># 名为 webtier 的角色，其内的机构与 common 相同&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ......
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> monitoring/ &lt;span style="color:#75715e"># 同上&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ......
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fooapp/ &lt;span style="color:#75715e"># 同上&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ......
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="group_vars-与-host_vars-目录">group_vars 与 host_vars 目录&lt;/h2>
&lt;p>组变量与主机变量的文件除了可以放在 Palybook 的根目录，还可以放在存放 Inventory 文件的目录中，比如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>inventories/ &lt;span style="color:#75715e"># 这里存放 Inventory 目录，通过在命令行中使用 -i 选项以指定 Inventory 文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> production/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hosts &lt;span style="color:#75715e"># inventory file for production servers&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> group_vars/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> group1.yml &lt;span style="color:#75715e"># here we assign variables to particular groups&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> group2.yml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> host_vars/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hostname1.yml &lt;span style="color:#75715e"># here we assign variables to particular systems&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hostname2.yml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> staging/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hosts &lt;span style="color:#75715e"># inventory file for staging environment&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> group_vars/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> group1.yml &lt;span style="color:#75715e"># here we assign variables to particular groups&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> group2.yml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> host_vars/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stagehost1.yml &lt;span style="color:#75715e"># here we assign variables to particular systems&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stagehost2.yml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>library/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>module_utils/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>filter_plugins/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>site.yml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>webservers.yml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dbservers.yml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>roles/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> common/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> webtier/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> monitoring/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fooapp/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>至于 group_vars 与 host_vars 在不同目录的优先级可以参考 [Ansible 变量-优先级](✏IT 学习笔记/🛠️9.运维/Ansible/Ansible%20Variables(变量).md Variables(变量).md) 部分&lt;/p></description></item><item><title>Docs: Playbook 命令行工具</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/ansible/playbook/playbook-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/ansible/playbook/playbook-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/cli/ansible-playbook.html">官方文档，用户指南-传统目录-使用命令行工具-ansible-playbook&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>ansible-playbook 用来运行运行 Ansible playbook，以便在目标主机上执行定义的任务。&lt;/p>
&lt;h1 id="ansible-playbook--运行-ansible-playbooks并在目标主机上执行剧本中定义的任务">ansible-playbook # 运行 Ansible playbooks，并在目标主机上执行剧本中定义的任务&lt;/h1>
&lt;h2 id="syntax语法">Syntax(语法)&lt;/h2>
&lt;p>&lt;strong>ansible-playbook [OPTIONS] PLAYBOOK&lt;/strong>&lt;/p>
&lt;h3 id="options">OPTIONS&lt;/h3>
&lt;ul>
&lt;li>--ask-vault-pass # ask for vault password&lt;/li>
&lt;li>--become-method # privilege escalation method to use (default=%(default)s), use ansible-doc -t become -l to list valid choices.&lt;/li>
&lt;li>--become-user # run operations as this user (default=root)&lt;/li>
&lt;li>&lt;strong>-C, &amp;ndash;check&lt;/strong> # 不在目标主机上执行任务，仅检查任务是否可以完成&lt;/li>
&lt;li>--flush-cache # clear the fact cache for every host in inventory&lt;/li>
&lt;li>--force-handlers # run handlers even if a task fails&lt;/li>
&lt;li>&lt;strong>-i, &amp;ndash;inventory, &amp;ndash;inventory-file&lt;/strong> # 指定 inventory 文件路径或者以逗号分隔的主机列表。(不推荐使用该选项)&lt;/li>
&lt;li>&lt;strong>-l , &amp;ndash;limit &lt;!-- raw HTML omitted -->&lt;/strong> # 限定执行的主机范围。可以对一批主机的其中一台执行操作，但是依然可以使用其他主机的变量。further limit selected hosts to an additional pattern&lt;/li>
&lt;li>&lt;strong>&amp;ndash;list-hosts&lt;/strong> # 列出执行该剧本所能匹配到的主机，但并不会执行&lt;/li>
&lt;li>&lt;strong>&amp;ndash;list-tags&lt;/strong> # 列出所有可用的 tags&lt;/li>
&lt;li>&lt;strong>&amp;ndash;list-tasks&lt;/strong> # 列出所有即将被执行的任务&lt;/li>
&lt;li>--private-key , &amp;ndash;key-file # use this file to authenticate the connection&lt;/li>
&lt;li>--scp-extra-args # specify extra arguments to pass to scp only (e.g. -l)&lt;/li>
&lt;li>--sftp-extra-args # specify extra arguments to pass to sftp only (e.g. -f, -l)&lt;/li>
&lt;li>--skip-tags # only run plays and tasks whose tags do not match these values&lt;/li>
&lt;li>--ssh-common-args # specify common arguments to pass to sftp/scp/ssh (e.g. ProxyCommand)&lt;/li>
&lt;li>--ssh-extra-args # specify extra arguments to pass to ssh only (e.g. -R)&lt;/li>
&lt;li>&lt;strong>&amp;ndash;start-at-task&lt;/strong> # start the playbook at the task matching this name&lt;/li>
&lt;li>&lt;strong>&amp;ndash;step&lt;/strong> # 一步一步运行,也就是说在运行每个任务和之前，会弹出确认信息，确认执行，才会执行该任务。有 3 个选项，执行、不执行、继续(继续就是指后续任务不再确认，从当前任务开始执行完剩下的任务)&lt;/li>
&lt;li>--syntax-check # perform a syntax check on the playbook, but do not execute it&lt;/li>
&lt;li>&lt;strong>-t, &amp;ndash;tags&lt;/strong> # 仅运行带有名为 TAG 标签的 tasks 或者 plays&lt;/li>
&lt;li>--vault-id # the vault identity to use&lt;/li>
&lt;li>--vault-password-file # vault password file&lt;/li>
&lt;li>--version # show program’s version number, config file location, configured module search path, module location, executable location and exit&lt;/li>
&lt;li>&lt;strong>-D, &amp;ndash;diff&lt;/strong> # 当使用 template、file、等指令更改文件时，显示这些文件更改前后的差异。通常与 &amp;ndash;check 选项一起使用。&lt;/li>
&lt;li>-K, &amp;ndash;ask-become-pass # ask for privilege escalation password&lt;/li>
&lt;li>-M, &amp;ndash;module-path # prepend colon-separated path(s) to module library (default=~/.ansible/plugins/modules:/usr/share/ansible/plugins/modules)&lt;/li>
&lt;li>-T , &amp;ndash;timeout # override the connection timeout in seconds (default=10)&lt;/li>
&lt;li>-b, &amp;ndash;become # run operations with become (does not imply password prompting)&lt;/li>
&lt;li>-c , &amp;ndash;connection # connection type to use (default=smart)&lt;/li>
&lt;li>&lt;strong>-e, &amp;ndash;extra-vars &amp;lt;@FILE | KEY=VALUE&amp;gt;&lt;/strong> # 添加额外的变量，可以是 &lt;code>KEY=VALUE&lt;/code> 格式(若是 yaml 的话则是 &lt;code>KEY: VALUE&lt;/code> 格式)，也可以直接指定 yaml 或 json 格式的文件，如果指定文件，以 &lt;code>@&lt;/code> 开头，比如：
&lt;ul>
&lt;li>&lt;code>--extra-vars @~/ansible/defaults/main.yaml&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>-f , &amp;ndash;forks # specify number of parallel processes to use (default=5)&lt;/li>
&lt;li>-k, &amp;ndash;ask-pass # ask for connection password&lt;/li>
&lt;li>-u , &amp;ndash;user # connect as this user (default=None)&lt;/li>
&lt;li>&lt;strong>-v, &amp;ndash;verbose&lt;/strong> # 详细模式(-vvv 会输出更多信息, -vvvv 将会启用 DEBUG 模式)&lt;/li>
&lt;/ul>
&lt;h2 id="example">EXAMPLE&lt;/h2>
&lt;ul>
&lt;li>从 install packages 这个任务开始执行 playbook
&lt;ul>
&lt;li>ansible-playbook playbook.yml &amp;ndash;start-at=&amp;ldquo;install packages&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>只对 HLJHEB-PSC-SCORE-PM-OS04-EBRS-HA02 主机执行 playbook
&lt;ul>
&lt;li>ansible-playbook -i inventory/ssc-pool-unicom-ha &amp;ndash;limit HLJHEB-PSC-SCORE-PM-OS04-EBRS-HA02 ha-gdas-proxy.yaml&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: Plugins(插件)</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/ansible/playbook/plugins%E6%8F%92%E4%BB%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/ansible/playbook/plugins%E6%8F%92%E4%BB%B6/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>官方文档：&lt;a href="https://docs.ansible.com/ansible/latest/plugins/plugins.html">https://docs.ansible.com/ansible/latest/plugins/plugins.html&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>插件是增强 Ansible 核心功能的代码段。Ansible 使用插件架构来启用丰富，灵活和可扩展的功能集。&lt;/p>
&lt;p>朗读 Ansible 附带了许多方便的插件，您可以轻松编写自己的插件。&lt;/p>
&lt;p>本节介绍 Ansible 随附的各种类型的插件：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/plugins/action.html">Action Plugins&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/plugins/become.html">Become Plugins&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/plugins/cache.html">Cache Plugins&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/plugins/callback.html">Callback Plugins&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/plugins/cliconf.html">Cliconf Plugins&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/plugins/connection.html">Connection Plugins&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/plugins/httpapi.html">Httpapi Plugins&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/plugins/inventory.html">Inventory Plugins&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/plugins/lookup.html">Lookup Plugins&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/plugins/netconf.html">Netconf Plugins&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/plugins/shell.html">Shell Plugins&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/plugins/strategy.html">Strategy Plugins&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/plugins/vars.html">Vars Plugins&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/user_guide/playbooks_filters.html">Filters&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/user_guide/playbooks_tests.html">Tests&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/user_guide/plugin_filtering_config.html">Plugin Filter Configuration&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Docs: PXE 简介</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/pxe-%E7%AE%80%E4%BB%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/pxe-%E7%AE%80%E4%BB%8B/</guid><description>
&lt;h1 id="heading">&lt;/h1>
&lt;p>&lt;strong>Preboot eXecution Environment(预启动执行环境，简称 PXE)&lt;/strong> 提供了一种使用网络接口（Network Interface）启动计算机的机制。这种机制让计算机的启动可以不依赖本地数据存储设备（如硬盘）或本地已安装的操作系统。&lt;/p>
&lt;p>在服务器开机时，可以使用 PXE 进行启动，该设备的 PXE 作为一个客户端，首先请求 DHCP，在获取到网络参数后，再在广播域里请求 PXE 类型的服务，来引导安装操作系统。一般来说都是通过 TFTP 来进行远程系统文件传输，然后再自动通过传输过来的文件自动进行系统安装&lt;/p></description></item><item><title>Docs: SRE 到底是干什么的？？</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/standardized-glossary%E6%A0%87%E5%87%86%E5%8C%96%E6%9C%AF%E8%AF%AD/sre-%E5%88%B0%E5%BA%95%E6%98%AF%E5%B9%B2%E4%BB%80%E4%B9%88%E7%9A%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/standardized-glossary%E6%A0%87%E5%87%86%E5%8C%96%E6%9C%AF%E8%AF%AD/sre-%E5%88%B0%E5%BA%95%E6%98%AF%E5%B9%B2%E4%BB%80%E4%B9%88%E7%9A%84/</guid><description>
&lt;p>&lt;a href="https://mp.weixin.qq.com/s/Z5YSSmPaOzDGUbLfANuPqg">SRE 到底是干什么的？？&lt;/a>&lt;/p>
&lt;p>有很多人问过我想了解一下 SRE 这个岗位，这是个很大的话题，在这篇博客中把想到的一些介绍一下吧。&lt;/p>
&lt;p>SRE 到底是什么？这是一个最早由 Google 提出的概念，我的理解是，用软件解决运维问题。标准化，自动化，可扩展，高可用是主要的工作内容。这个岗位被提出的时候，想解决的问题是打破开发人员想要快速迭代，与运维人员想要保持稳定，拒绝频繁更新之间的矛盾。&lt;/p>
&lt;p>SRE 目前对于招聘来说还是比较困难。一方面，这个岗位需要一定的经验，而应届生一般来说不会有运维复杂软件的经历；另一方面就是很多人依然以为这就是 “运维” 工程师，认为做的是一些低级重复的工作，对这个工作有排斥。最根本的，其实这个岗位寻找的要么是具有运维经验的开发人员，要么是具有软件开发技能的运维工程师。所以比较难以找到合适的人。&lt;/p>
&lt;p>在现实生活中，不同公司的 SRE 岗位大有不同，有一些甚至可能还是传统运维的名字换了一个岗位名称。&lt;/p>
&lt;p>比如蚂蚁金服有两种 SRE，一种是负责稳定性的，就是大家所理解的 SRE；另一种叫做资金安全 SRE，并不负责服务正常运行，而是负责金钱数目正确，对账没有错误，工作内容以开发为主，主要是资金核对平台和核对规则（没有做过，只是个人理解）。某种意义上说，已经不算是 SRE 而是专业领域的开发了。&lt;/p>
&lt;p>Netflix[1] （2016 年）的模式是谁开发，谁维护。SRE 负责提供技术支持，和咨询服务。Netflix 在全球 170 个国家有服务，Core SREs 只有 5 个人。&lt;/p>
&lt;p>微软有专门的 Game Streaming SRE[2]，负责 XBox 在线游戏的稳定性。&lt;/p>
&lt;p>所以不同公司的 SRE 的内容各有偏重，取决于公司要提供什么样的服务。&lt;/p>
&lt;p>我们可以学习网络分层的方式，将 SRE 大致的工作内容从下往上分成 3 个大类：&lt;/p>
&lt;ol>
&lt;li>Infrastructure：主要负责最基础的硬件设施，网络，类似于 IaaS，做的事情可参考 DigitalOcean&lt;/li>
&lt;li>Platform：提供中间件技术，开箱即用的一些服务，类似于 PaaS，做的事情可参考 Heroku, GCP, AWS 等&lt;/li>
&lt;li>业务 SRE：维护服务，应用，维护业务的正常运行&lt;/li>
&lt;/ol>
&lt;h2 id="infrastructure">Infrastructure&lt;/h2>
&lt;p>Infrastructure 和 Platform SRE 其实可有可无，这些年商业化的服务其实越来越多了，比如，如果公司选择全部在 AWS 部署自己的服务的话，那么就不需要自己建立 Datacenter，维护网络之类的工作了，只需要几个 AWS 专家即可。&lt;/p>
&lt;p>如果有的话，工作内容也可大可小。可以从管理购买的 VPS 开始，也可以从采购硬件服务器开始。&lt;/p>
&lt;p>我觉得 Infrastructure SRE 的工作内容可以这样定义：&lt;/p>
&lt;ol>
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>负责服务器的采购，预算，CMDB 管理。要知道（能查询到）每一台的负责人是谁，在干什么。这个非常重要，如果做不好，会造成极大的资源浪费。&lt;/p>
&lt;ol start="2">
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>提供可靠软件的部署环境，一般是虚拟机，或者 bare mental。&lt;/p>
&lt;ol start="3">
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>操作系统的版本统一维护，Linux 发行版的版本，Kernel 的版本等。&lt;/p>
&lt;ol start="4">
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>维护机器上的基础软件，比如 NTP，监控代理，其他的一些代理。&lt;/p>
&lt;ol start="5">
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>提供机器的登录方式，权限管理，命令审计。&lt;/p>
&lt;ol start="6">
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>维护一套可观测性的基础设施，比如监控系统，log 系统，trace 系统。&lt;/p>
&lt;ol start="7">
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>维护网络，大公司可能都会自己设计机房内的网络。其中包括：&lt;/p>
&lt;ol start="8">
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>网络的连通，这个是必要的。对于上层用户（Platform SRE）来说，交付的服务应该是任意两个 IP 是可以 ping 通的，即管理好 3 层以下的网络。&lt;/p>
&lt;ol start="9">
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>NAT 服务&lt;/p>
&lt;ol start="10">
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>DNS 服务&lt;/p>
&lt;ol start="11">
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>防火墙&lt;/p>
&lt;ol start="12">
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>4 层负载均衡，7 层负载均衡&lt;/p>
&lt;ol start="13">
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>CDN&lt;/p>
&lt;ol start="14">
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>证书管理&lt;/p>
&lt;p>每一项既可以是一个很大的团队，也可以只有一个人去对商业化的 Infra 服务。可以使用开源的产品，也可以自己研发。&lt;/p>
&lt;h2 id="platform-sre">Platform SRE&lt;/h2>
&lt;p>Infrastructure SRE 维护的是基础设施，Platform SRE 使用他们提供的基础设施建立软件服务，让公司内的开发者可以使用开箱即用的软件服务，比如 Queue，Cache，定时任务，RPC 服务等等。&lt;/p>
&lt;p>主要的工作内容有：&lt;/p>
&lt;ol>
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>RPC 服务：让不同的服务可以互相发现并调用&lt;/p>
&lt;ol start="2">
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>私有云服务&lt;/p>
&lt;ol start="3">
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>队列服务，比如 Kafka 或者 RabbitMQ&lt;/p>
&lt;ol start="4">
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>分布式的 cronjob 服务&lt;/p>
&lt;ol start="5">
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>Cache&lt;/p>
&lt;ol start="6">
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>网关服务：反向代理的配置&lt;/p>
&lt;ol start="7">
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>对象存储：s3&lt;/p>
&lt;ol start="8">
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>其他一些数据库：ES，mongo 等等。一般来说，关系型数据库会有 DBA 来运维，但是 NoSQL 或者图数据库一般由 SRE 维护。&lt;/p>
&lt;ol start="9">
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>内部的开发环境：&lt;/p>
&lt;ol start="10">
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>SCM 系统，比如自建的 Gitlab&lt;/p>
&lt;ol start="11">
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>CI/CD 系统&lt;/p>
&lt;ol start="12">
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>镜像系统，比如 Harbor&lt;/p>
&lt;ol start="13">
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>其他的一些开发工具，比如分布式编译，Sentry 错误管理等等&lt;/p>
&lt;ol start="14">
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>一些离线计算环境，大数据的服务&lt;/p>
&lt;h2 id="业务-sre">业务 SRE&lt;/h2>
&lt;p>有了 Platform SRE 的支持，开发人员写代码就基本上不需要关心部署的问题了。可以专注于开发，使用公司开箱即用的服务。这一层的 SRE 更加贴近于业务，知道业务是怎么运行的，请求是怎么处理的，依赖了哪些组件。如果 X 除了问题，可以有哪些降级策略。参与应用的架构设计，提供技术支持。&lt;/p>
&lt;p>主要的工作内容有：&lt;/p>
&lt;ol>
&lt;li>参与系统的设计。比如熔断、降级，扩容等策略。&lt;/li>
&lt;li>做压测，了解系统的容量。&lt;/li>
&lt;li>做容量规划。&lt;/li>
&lt;li>业务侧的 Oncall。&lt;/li>
&lt;/ol>
&lt;p>对于一个专业的 SRE 来说，上述技能也不应该有明显的界限，比如说业务 SRE 也需要掌握一些网络技能，Infra SRE 也要写一些代码。很多工具每一个岗位的人都多少用的到，比如 Ansible/Puppet/SaltStack 这种 IT 自动化工具，或者 Grafana/Prometheus 这种监控工具，只有理解才能用的正确。换个角度讲，对于业务 SRE 来说，虽然基本上不会去管理四层以下的网络，但是如果遇到网络问题，能通过已有的工具和权限排查到交换机问题，去找 Infra SRE 帮忙：“请帮我看下 xx IP 到交换机是否有异常，因为 xxx 显示的结果是 xx”，总比 “我怀疑 xx 有网络问题，请帮忙排查下” 要好一些吧？&lt;/p>
&lt;p>以上是工作职责的大体划分，这个分层其实没有什么意义，倒是可以让读者了解一下 SRE 都涉及哪一些工作。&lt;/p>
&lt;p>下面是一些日常的工作内容。&lt;/p>
&lt;h2 id="部署服务">部署服务&lt;/h2>
&lt;p>部署分成两种：&lt;/p>
&lt;ol>
&lt;li>Day 1：将服务部署上线的那一天&lt;/li>
&lt;li>Day 2+：服务部署之后，还会进行很多更新，升级，配置更改，服务迁移等等&lt;/li>
&lt;/ol>
&lt;p>Day2+ 的工作要做很多次，Day 1 做的很少，在不断的迭代升级之后，还能保证有一个可靠的 Day 1 操作是很难的。换句话说，我们在服务部署之后一直改来改去，还要保证这个服务在一个全新的环境能够可靠的部署起来。部署环境的硬编码，奇奇怪怪的 work around，都会破坏 Day 1 的可靠性。之前一家公司，扩容一个新机房的过程简直是噩梦，太多的奇怪配置，hardcode，导致踩过无数个坑才能在一个新的机房部署起来全部的服务。&lt;/p>
&lt;p>Day2+ 的操作也不简单，主要要关注稳定性。对于重要的变更操作要设计好变更计划，如何做到灰度测试，如果出了问题应该如何回滚，如何保证回滚可以成功（如何测试回滚）等等。&lt;/p>
&lt;p>部署的操作最好都是可以追踪的，因为并不是所有会引起问题的操作都会立即引起问题。比如一个操作当时做完没有什么问题，但是过了 1 个月，偶然的重启或者内存达到了某一个指标触发了问题。如果能记录操作的话，我们可以回溯之前做过的变更，方便定位问题。现在一般都用 git 来追踪部署过程的变更（gitops[3]）。&lt;/p>
&lt;h2 id="oncall">Oncall&lt;/h2>
&lt;p>Oncall 简单来说就是要保证线上服务的正常运行。典型的工作流程是：收到告警，检查告警发出的原因，确认线上服务是否有问题，定位到问题，解决问题。&lt;/p>
&lt;p>收到告警并不总意味着真正的问题，也有可能告警设置的不合理。告警和监控面板并不是一个静态的配置，它应该是每天都在变化的，时刻在调整的。如果发现没有标志真正线上问题的告警发了出来，就应该修改告警规则。如果发现当前的监控无法快速定位问题，应该调整监控面板，添加或者删除监控指标。业务在发展，请求量在变化，某些阈值也需要不断地调整。&lt;/p>
&lt;p>定位问题没有一概而论的方法了，需要根据看到的实时，结合自己的经验，然后做推测，然后使用工具验证自己的推测，然后确定问题的根因。&lt;/p>
&lt;p>但是解决问题是可以有方法论的，叫做 SOP，标准操作流程[4]。即：如果出现了这种现象，那么执行那种操作，就可以恢复业务。SOP 文档应该提前制定，并且验证其有效性。&lt;/p>
&lt;p>需要注意的是上述定位问题、解决问题&lt;strong>并没有顺序关系&lt;/strong>。一个经常犯的错误是，在出现故障的时候，花了很长时间定位到故障的根因，然后再修复。这样花的时间一般会比较长。正确的做法是先根据现象看现有的 SOP 能否恢复业务。比如说当前错误只发生在某一个节点上，那么就直接下线这个节点，具体的原因后面再排查。恢复当前的故障永远是第一要务。但是恢复操作也要经过测试，比如猜测可以通过重启解决问题的话，可以先重启一台做测试，而不是一次性将所有服务重启。大部分情况是需要临场分析的，是一个紧张又刺激的过程。&lt;/p>
&lt;p>故障到底多久恢复算好？出现多少故障是可以容忍的？怎么标志服务的稳定性到底如何？我们使用 SLI/SLO 来衡量这些问题。&lt;/p>
&lt;h2 id="制定和交付-slislo">制定和交付 SLI/SLO&lt;/h2>
&lt;p>维护服务等级协议，听起来像是一个非常简单的事情，只要 “设定一个可用率” 然后去实现它就好了。然而现实的情况并不是。&lt;/p>
&lt;p>比如，制定可用率的时候，并不是说我们去 “实现 4 个 9”（99.99% 的时间可用）就够了，我们有以下问题要考虑：&lt;/p>
&lt;ol>
&lt;li>如何定义这个可用率？比如我们以可用率 &amp;gt; 99.9% 为目标，有一个服务部署了 5 个 Zone, 那么有一个 Zone 挂了，其余的 Zone 是可用的，那么可用率被破坏了吗？这个可用率是每一个 Zone 的还是所有的 Zone 一起计算的？&lt;/li>
&lt;li>可用率计算的最小单位是什么？如果 1min 内有 50s 没有达到可用率，那么这一分钟算是 down 还是 up？&lt;/li>
&lt;li>可用率的周期是怎么计算的？按照一个月还是一个周？一个周是最近的 7 天还是计算一个自然周？&lt;/li>
&lt;li>如何对 SLI 和 SLO 做监控？&lt;/li>
&lt;li>如果错误预算即将用完，有什么措施？比如减少发布？如果 SLI 和 SLO 没有达到会怎么样？&lt;/li>
&lt;/ol>
&lt;p>等等，如果这些问题不考虑清楚的话，那么 SLI 和 SLO 很可能就是没有意义的。SLI/SLO 也适用于对公司内部用户的承诺，让用户对我们的服务有预期，而不能有盲目的信任。比如 Google 在 SLI/SLO 还有预算的时候，会在满足 SLI/SLO 的时候自行对服务做一些破坏，让用户不要对服务有 100% 可用的错误预期。SLI/SLO 也会让 SRE 自己对当前服务的稳定性有更好的认识，可以根据此调整运维、变更、发布计划。&lt;/p>
&lt;h2 id="故障复盘">故障复盘&lt;/h2>
&lt;p>故障复盘的唯一目的是减少故障的发生。有几个我目前认为不错的做法。&lt;/p>
&lt;p>故障复盘需要有文档记录，包括故障发生的过程，时间线的记录，操作的记录，故障恢复的方法，故障根因的分析，为什么故障会发生的分析。文档应该隐去所有当事人的姓名对公司的所有人公开。很多公司对故障文档设置查看权限，我觉得没什么道理。有些公司的故障复盘甚至对外也是公开的[5]。&lt;/p>
&lt;p>故障在复盘的时候应该将当事人的名字用代码替代，可以营造更好的讨论氛围。&lt;/p>
&lt;p>不应该要求所有的故障复盘都产生 Action。之前一家的公司的故障复盘上，因为必须给领导一个 “交待”，所以每次都会产生一些措施来预防相同的故障再次发生，比如增加审批流程之类的。这很扯，让级别很高的领导审批他自己也看不懂的操作，只能让领导更痛苦，也让操作流程变得又臭又长，最后所有人都会忘记这里为什么会有一个审批，但是又没有人敢删掉。你删掉，出了事情你负责。&lt;/p>
&lt;p>Blame Free 文化？之前我认为是好的。但是后来发现，有些不按照流程操作导致的问题确实多少应该 Blame 一下，比如下线服务的时候没有检查还没有 tcp 连接就直接下线了，或者操作的时候没有做 canary 就全部操作了，这种不理智的行为导致的故障。但是条条框框又不应该太多，不然活都没法干了。&lt;/p>
&lt;h2 id="容量规划">容量规划&lt;/h2>
&lt;p>容量规划是一个非常复杂的问题，甚至有一些悖论。容量要提前做好规划，但是容量的规划需要知道业务的扩张速度，扩张速度这种事情又不是提前能计划好的。所以我一直觉得这个事情很难做，也一直没有见过做的很好的例子。&lt;/p>
&lt;p>但是至少可以对维护的系统建立一个模型，知道多少机器，多少资源，能容纳多少容量。这样遇到大促之类的活动也能及时估算需要的资源数量。&lt;/p>
&lt;h2 id="用户支持">用户支持&lt;/h2>
&lt;p>用户支持也是日常的一部分。包括技术咨询，以及用户要求的线上问题排查。&lt;/p>
&lt;p>这里就需要提到文档的重要性了。如果没有维护好文档，那么用户就会一遍又一遍问相同的问题。写文档也是一个技术活，优秀的需要很长时间的积累。文档也需要经常更新。我一般会这样，保持这样一种状态：用户可以不需要任何人就从文档中找到他需要的所有答案。如果我发现用户的问题无法从文档中找到，或者难以找到在文档中的什么地方，就会更新文档，或者重新组织文档。如果用户的问题已经从文档中找到，那么就直接发文档给他。如果用户的问题显然是文档看都没有看过（有很多人根本不看文档的，只看文档是谁写的然后径直去问这个人），就直接忽略。&lt;/p>
&lt;p>优秀的文档应该尽量引入少的专有名词，少使用没有用处的专业词汇描述，只描述具有指导意义的事实，假定用户没有相关的背景知识，列举使用例子，举一些现实会用到的例子而不是强行举例子，明确 Bad Case。等等。这其实是一个很大的话题了，这里就不展开了。&lt;/p>
&lt;p>暂时就想到这一些了。下面写一些我经常见到的误解，和经常被别人问的问题。&lt;/p>
&lt;p>有关做项目没有专业团队得不到训练。&lt;/p>
&lt;p>这方面是听到最多的抱怨。虽然说 SRE 在工作上应该是开发时间和运维时间各 50%，但是真实的情况是，即使 SRE 有一些开发工作，也大部分是面向内部用户，面向公司内部的开发者的。大部分项目是一些想法，需要去尝试一下行不行，基本上不会有专业的设计资源，PM 资源。这种项目就需要 SRE 有多方面的技能，包括对产品的理解，清楚地知道它有什么痛点，最好是自己经历过的痛点，然后需要懂设计，管理好开发进度。然而这种人非常少。其实能写中型项目代码的 SRE 就已经非常少了。所以大部分公司内部项目都会做的又难用又复杂。&lt;/p>
&lt;p>即使是有专业配套 PM 和设计，甚至前端资源。基本上也是一个灾难。我也经历过这样的团队。这种内部项目对标的不是互联网项目，而更像是 toB 的项目。用户 UI 的设计，交互逻辑，操作流程，交付周期等需要的都是另一个领域的知识。否则的话人越多，也只会徒增沟通成本，拖慢项目进度。&lt;/p>
&lt;p>回到经常听到的这个抱怨，说在 SRE 的团队没有像开发团队那样有 “正规军”，有设计和 PM，大家各司其职，后端开发只要对齐 API 然后实现就好了。大部分的应届生会有这样的幻想，但实际上不是这样。被搞错的最重要的一点是，&lt;strong>学习主要是靠自己的，和别人没有太大的关系&lt;/strong>。我觉得可能是在一个大团队里面，有很多人一起做一件事情，心里的怀疑和焦虑会少一点，人们会对这样的工作状态感到踏实，误以为是 “成长”，自己做所有的工作焦虑更多。&lt;/p>
&lt;p>事实是，在大团队工作可能学到更多的沟通技能，比如和不同的人对齐不同的阶段工作目标，要想要学到其他的东西还是要靠自己。比如拿到一个设计，如果照样子去实现了，其实不会学到什么东西。而要去理解为什么这么设计，为什么不那么设计。如果自己去做，思考的过程也基本是这样的，可以怎么设计，选择什么好。都是：思考，选择，尝试，经验，思考……&lt;/p>
&lt;p>另一个需要澄清的误区是，模仿并不是学习。在团队中经历了一个设计，如果记住了这个设计，下次碰到类似的问题也用这个设计去解决。这也不能叫做是学习。我见过有在业务部门做过支付的 SRE 写的代码，在内部系统中去实现了订单业务的订单、交易等概念完成一个运维流程，甚至 Model 的名字都没改过。拿着锤子找钉子，会让系统变得更加糟糕和复杂。&lt;/p>
&lt;p>总之，工作分的细并不代表工作就会更加专业。一个人身兼数职业可以在每一个方面做得很专业。重要的是不断学习，使用正确的做事方式，向优秀的项目和优秀的开发者学习。&lt;/p>
&lt;p>有关脏活累活。&lt;/p>
&lt;p>每一项工作都会有脏活累活：学不到什么东西，做起来没有意思。可能是整理系统的监控，可能是整理现有的文档，可能清理一些年久的运维脚本，可能是需要和不同的团队做一些沟通工作[6]等。&lt;/p>
&lt;p>这是不可避免的，如果可以的话，学会从每一项工作中找一些偷懒的方法吧，比如用脚本处理一些工作，用更聪明的方式工作等等。&lt;/p>
&lt;p>但是如果这种工作的比例太高的话，就要思考工作方式的问题了。如果陷入恶性循环，看能不能从工具和工作流程上做一些改变。如果不能的话，考虑换一份工作吧。&lt;/p>
&lt;p>有关背锅。&lt;/p>
&lt;p>互相甩锅的工作环境无疑是非常糟糕的工作环境。如果相同的团队、或者不同的团队之间需要相互勾心斗角的话，如果工作环境不允许大方承认（SRE 无可避免地会犯一些错误）自己的错误，说明公司营造的氛围有问题。比如某些公司规定，发生 P1 级别的错误就必须开除一个 Px 级别的员工，发生 P0 级别的错误就必须开除一个 Py 级别的员工一样。如果是这种情况的话，公司实际上是在用一种懒惰地方法通过提高人的压力来提高系统的稳定性。有没有效果不知道，但是确定的是不会有人在这种情况下工作的开心。建议换一份工作。&lt;/p>
&lt;p>如何转行？&lt;/p>
&lt;p>其实难度没有想象的高，毕竟大学里面没有一个叫做 SRE 的专业。SRE 要求的知识也是编写代码、设计系统、了解操作系统和网络等。所以在大学里面将本科的课程好好学好，尝试做（并维护）一些自己的项目，毕业的时候基本上就满足要求了。非科班的人要转行的话，也可以参考大学的课程内容去补足这方面的知识。&lt;/p>
&lt;p>需要注意的是，培训班出来的做开发完成业务可能够，但是做 SRE 远远不够。SRE 不仅需要 make things work，还要知道背后的原理。&lt;/p>
&lt;p>面试会问什么？&lt;/p>
&lt;p>我觉得和后端开发的面试内容基本上差不多。&lt;/p>
&lt;p>如果是去应聘的这个岗位所需要的一些技能，比如 K8S，监控系统等，可能也会问一些领域内的知识。虽说这部分工具性的东西都可以学习，但是如果人家要一个经验丰富的、或者入职就能干活的，那么面试成功的机会就会小很多。当然，也不必沮丧，这是市场的供需关系决定的，如果对方执意要找符合特定要求的候选人，那么对方的选择的范围也会小很多，不必因为错失了这种机会而后悔没去学习什么工具。话又说回来，技能越多，选择也会越多。&lt;/p>
&lt;p>排查错误可能是转行做 SRE 最大的一个门槛，这个需要一些经验。如果没有经验的话，就补足一些操作系统的知识，这样遇到未知的问题也可以通过已知的知识和工具去排查。&lt;/p>
&lt;p>做 SRE 需要会写代码吗？&lt;/p>
&lt;p>会，而且写代码的要求并不会比一个专业的后端开发低。&lt;/p>
&lt;p>选择大公司还是小公司？&lt;/p>
&lt;p>这属于两种截然不同的工作环境。小公司一般都有一个救火英雄式的人物，在公司的时间比较长，知道所有组件的部署结构，什么都懂。跟着这种人学习会成长很快。&lt;/p>
&lt;p>大公司细分领域很多。本文前面列出的内容可能每一项在大公司中都是一个团队，对某个领域可以深入研究。&lt;/p>
&lt;p>所以还是看想要做什么了。我个人比较喜欢靠谱的小公司，或者大公司中靠谱的小团队。&lt;/p>
&lt;p>如何判断一家公司是否靠谱？&lt;/p>
&lt;p>对于 SRE 这个职位，我总结了一些判断的技巧。比如可以判断一下对方目前的业务和 SRE 员工的数量是否处于一个 “正常” 的状态，人数是否在随着业务（机器的数量）现象增长？这是一个不好的迹象。是否 SRE 的数量过多？如果 SRE 人太多，有两个可能的原因：1）某个领导为了扩大自己的影响力在为一些 “不必要的” 岗位招人，这样会导致人多事少，大家开始做一些奇奇怪怪的事情，发明奇奇怪怪的需求，以各种各样的方式浪费自己的时间来领公司的工资；2）这个公司的基础太差，大部分工作都是需要人力运维，导致基本上有多少机器就需要多少人。总之，都不是什么好事情。&lt;/p>
&lt;p>一些技术比较好的公司，都没有庞大的 SRE 队伍，比如 Instagram, Netflix（现在可能人数不少了），以及一些创业公司，甚至都可以没有专门的 SRE，优秀的 SRE 首先要是开发者，优秀的开发者也离 SRE 不远了。一些耳熟能详的服务，比如 webarchive 这样的数据量，其实背后也只有几个人在维护[7]。前几年面试了国内的一家公司，在机房遍布全球，业务已经发展的比较庞大（上市了）的时候，SRE 团队也只有 10 个人。&lt;/p>
&lt;p>另外我比较喜欢问的一个问题是对方关于 AIOps 怎么看。因为我之前搞了两年这个东西，最后得到的结论是，这基本上是个浪费时间、欺骗上层领导的东西[8]。AI 这东西的不可解释性本质上就和运维操作将就因果相违背的。所以经常喜欢问面试官怎么看这个技术，基本上就可以判断靠不靠谱。当然了，这是我个人的职业阴影导致的后遗症，只能代表个人意见。&lt;/p>
&lt;p>就说这么多吧，都是一些个人理解，不一定对。写这篇文章感觉自己好像指点江山一样，其实我自己也干了才几年而已，所以本文内容仅供参考。如果有什么问题可以在评论提出，我能回答的话就尽量回答。&lt;/p>
&lt;h3 id="引用链接">引用链接&lt;/h3>
&lt;p>[1]&lt;/p>
&lt;p>Netflix: &lt;em>&lt;a href="https://www.youtube.com/watch?v=koGaH4ffXaU">https://www.youtube.com/watch?v=koGaH4ffXaU&lt;/a>&lt;/em>&lt;/p>
&lt;p>[2]&lt;/p>
&lt;p>Game Streaming SRE: &lt;em>&lt;a href="https://azure.microsoft.com/mediahandler/files/resourcefiles/devops-at-microsoft-game-streaming-sre/DevOps%20at%20Microsoft%20-%20Xbox%20game%20streaming%20SRE.pdf">https://azure.microsoft.com/mediahandler/files/resourcefiles/devops-at-microsoft-game-streaming-sre/DevOps%20at%20Microsoft%20-%20Xbox%20game%20streaming%20SRE.pdf&lt;/a>&lt;/em>&lt;/p>
&lt;p>[3]&lt;/p>
&lt;p>gitops: &lt;em>&lt;a href="https://www.weave.works/technologies/gitops/">https://www.weave.works/technologies/gitops/&lt;/a>&lt;/em>&lt;/p>
&lt;p>[4]&lt;/p>
&lt;p>SOP，标准操作流程: &lt;em>&lt;a href="https://en.wikipedia.org/wiki/Standard_operating_procedure">https://en.wikipedia.org/wiki/Standard_operating_procedure&lt;/a>&lt;/em>&lt;/p>
&lt;p>[5]&lt;/p>
&lt;p>对外也是公开的: &lt;em>&lt;a href="https://github.com/danluu/post-mortems">https://github.com/danluu/post-mortems&lt;/a>&lt;/em>&lt;/p>
&lt;p>[6]&lt;/p>
&lt;p>一些沟通工作: &lt;em>&lt;a href="https://www.kawabangga.com/posts/4294">https://www.kawabangga.com/posts/4294&lt;/a>&lt;/em>&lt;/p>
&lt;p>[7]&lt;/p>
&lt;p>背后也只有几个人在维护: &lt;em>&lt;a href="https://archive.org/details/jonah-edwards-presentation">https://archive.org/details/jonah-edwards-presentation&lt;/a>&lt;/em>&lt;/p>
&lt;p>[8]&lt;/p>
&lt;p>是个浪费时间、欺骗上层领导的东西: &lt;em>&lt;a href="https://www.kawabangga.com/posts/4145">https://www.kawabangga.com/posts/4145&lt;/a>&lt;/em>&lt;/p></description></item><item><title>Docs: Standardized Glossary(标准化术语)</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/standardized-glossary%E6%A0%87%E5%87%86%E5%8C%96%E6%9C%AF%E8%AF%AD/standardized-glossary%E6%A0%87%E5%87%86%E5%8C%96%E6%9C%AF%E8%AF%AD/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/standardized-glossary%E6%A0%87%E5%87%86%E5%8C%96%E6%9C%AF%E8%AF%AD/standardized-glossary%E6%A0%87%E5%87%86%E5%8C%96%E6%9C%AF%E8%AF%AD/</guid><description>
&lt;h1 id="部署环境">部署环境&lt;/h1>
&lt;p>Proof of Concept(概念验证，简称 poc)
Development(开发，简称 dev)
Test(测试，简称 test)
(灰度，简称 pre)
Production(生产，简称 pro)&lt;/p>
&lt;h1 id="服务器命名规范">服务器命名规范&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://codeantenna.com/a/VDpjUR86Hx">https://codeantenna.com/a/VDpjUR86Hx&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://datatracker.ietf.org/doc/html/rfc1178">RFC-1178，为你的计算机选择一个名字&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="推荐小规模集群-hostname-命名规范">推荐小规模集群 hostname 命名规范&lt;/h2>
&lt;p>规则: UN/LOCODE 码-机房标记(可选)-随机字符-系统和版本(可选)-云服务商缩写(可选)-环境(可选)-域名(可选)
简洁示例: suz-ba91 lxa-4f97
完整示例: gzu-spe-a904-rhel7-ecs-ctyun.prd.21cn.com can-4th-b69d-win2012-bms-ctyun.tst.21cn.com
过程:
I.查询 UN/LOCODE 城市代码, &lt;a href="https://service.unece.org/trade/locode/cn.htm">https://service.unece.org/trade/locode/cn.htm&lt;/a> ;
II.查询操作系统发行版本, 执行命令: hostnamectl ;
III.截取 uuid.online 生成的 ID 4 位字符, &lt;a href="http://www.uuid.online/">http://www.uuid.online/&lt;/a> ;
IV.根据上述规则和数据, 组成 hostname 名称 ;
V.执行命令: hostnamectl set-hostname .
说明: bms 代表物理机，ecs 代表虚拟机；系统和版本参见附录 3；环境缩写参见附录 4.&lt;/p>
&lt;h2 id="hostname-命名规则总结">hostname 命名规则总结&lt;/h2>
&lt;ol>
&lt;li>公有云服务器
规则: 云服务商缩写-IATA 城市代码-系统和版本-随机字符-域名
示例: aws-tko-ctos7-44rr4.colinleefish.com&lt;/li>
&lt;li>标准化别名结构(Standardized CNAME Structure)
规则: OrenTirosh 记忆编码项目特定选择的 1633 个词之一(只有 4-7 个字母),
示例：crimson melody verona banjo
DNS A Records 和 CNAME Records 示例：
melody.example.com. A 192.0.2.12
melody.lan.example.com. A 10.0.2.12
melody.oob.example.com. A 10.42.2.12
web02.prd.nyc.example.com. CNAME melody.example.com.
说明: 适用于 1500 个左右全局服务器命名.&lt;/li>
&lt;li>IBM hostname 命名格式
a.标准域名服务器（DNS）主机名字符串，例如，xmachine.manhattan.ibm.com
b.缺省的简短 DNS 主机名字符串，例如，xmachine
c.数字 IP 地址，例如，127.1.255.3&lt;/li>
&lt;li>ansible 方案
规则: 项目名-环境-模块-ip
示例: hnds-online-app-242&lt;/li>
&lt;li>IDC 方案
规则: {IDC}-{业务 bu}-[{项目名}[{编号}]]-{应用名}{机器编号}.vivo.lan
示例: jsyz01-op-cmdb-mysql001.aa.lan&lt;/li>
&lt;li>YouTube 方案
规则: {数据中心}{区域}{节点}-in-{楼层}.{域名}
示例:lga34s13-in-f14.1e100.net nuq04s29-in-f14.1e100.net&lt;/li>
&lt;li>ServerDensity 方案
示例: hcluster3-web1.sjc.sl.serverdensity.net&lt;/li>
&lt;li>aws 方案
示例：ec2-34-194-228-249.compute-1.amazonaws.com&lt;/li>
&lt;li>小规模服务器群方案
规则：以单词 / 动物 / 人物命名，适合
示例：lyre.riseup.net
devianza.investici.org
confino.investici.org
perdizione.investici.org
cryptonomicon.mit.edu
Random Name Generator 网站：
&lt;a href="https://www.behindthename.com/random/">https://www.behindthename.com/random/&lt;/a>&lt;/li>
&lt;li>google 方案
规则：必须符合 RFC 1035 要求
示例: test.example.com
说明：主机名必须包含一系列与正则表达式 &lt;a href="https://codeantenna.com/a/%5B-a-z0-9%5D*%5Ba-z0-9%5D">a-z&lt;/a>? 匹配的标签，各个标签用点连接起来。每个标签的长度为 1-63 个字符，整个序列不得超过 253 个字符。&lt;/li>
&lt;/ol>
&lt;h2 id="常见问题">常见问题&lt;/h2>
&lt;p>a. 不以用途(如 db1/nginx1 等)来命名的原因
因使用云主机时要突出的内容并不是用途, 故标记了地区/供应商/系统版本等.
b. 云主机供应商缩写非权威
目前，没有权威机构编制了云主机供应商的代号
c. 为什么选用 UN/LOCODE 码，而不是 IATA 城市代码
使用全拼太长, 取首字母易混淆, 例如 sz 无法区分深圳和苏州；
UN/LOCODE 码比 IATA 码能覆盖更多特定的位置，而且具有定义良好的标准。
d. 使用 5 个随机字符而不是 ip 地址后 3 位，或者使用 001 编号.
随机字符可以解决标记冲突的问题, 既足够使用又不至于太长.
ip 地址后三位有冲突的风险，而标记数字在服务器过少(如只有 001 编号)时, 显得突兀。&lt;/p>
&lt;h2 id="附录">附录&lt;/h2>
&lt;p>a. UN/LOCODE 码城市代码示例&lt;/p>
&lt;ul>
&lt;li>广州 can&lt;/li>
&lt;li>深圳 snz&lt;/li>
&lt;li>拉萨 lxa&lt;/li>
&lt;li>杭州 haz&lt;/li>
&lt;li>苏州 suz&lt;/li>
&lt;li>贵州 gzu&lt;/li>
&lt;/ul>
&lt;p>b. 云主机供应商缩写&lt;/p>
&lt;ul>
&lt;li>Amazon Web Services aws&lt;/li>
&lt;li>Microsoft Azure maz&lt;/li>
&lt;li>Linode lnd&lt;/li>
&lt;li>DigitalOcean don&lt;/li>
&lt;li>Vultr vlt&lt;/li>
&lt;li>Bandwagon bwg&lt;/li>
&lt;li>阿里云 aliyun&lt;/li>
&lt;li>Ucloud ucd&lt;/li>
&lt;li>腾讯云 qcd&lt;/li>
&lt;li>天翼云 ctyun&lt;/li>
&lt;/ul>
&lt;p>c. 系统和版本缩写与示例&lt;/p>
&lt;ul>
&lt;li>Red Hat Enterprise Linux rhel rhel7&lt;/li>
&lt;li>CentOS ctos ctos7&lt;/li>
&lt;li>Fedora fdr fdr7&lt;/li>
&lt;li>Oracle Linux orl orl7&lt;/li>
&lt;li>Ubuntu ubt ubt1604&lt;/li>
&lt;li>FreeBSD fbd fbd10&lt;/li>
&lt;li>CoreOS crs crs1068&lt;/li>
&lt;li>Windows win win2012&lt;/li>
&lt;/ul>
&lt;p>d. 软件应用环境缩写&lt;/p>
&lt;ul>
&lt;li>开发环境 development dev&lt;/li>
&lt;li>集成环境 integration intgr&lt;/li>
&lt;li>测试环境 testing tst&lt;/li>
&lt;li>QA 验证 QA qa&lt;/li>
&lt;li>模拟环境 staging stg&lt;/li>
&lt;li>生产环境 production prd&lt;/li>
&lt;/ul>
&lt;p>e. 主机功能编号&lt;/p>
&lt;ul>
&lt;li>app Application Server (non-web)&lt;/li>
&lt;li>sql Database Server&lt;/li>
&lt;li>ftp SFTPserver&lt;/li>
&lt;li>mta Mail Server&lt;/li>
&lt;li>dns Name Server&lt;/li>
&lt;li>cfg Configuration Management (puppet/ansible/etc.)&lt;/li>
&lt;li>mon Monitoring Server (nagios, sensu, etc.)&lt;/li>
&lt;li>prx Proxy/Load Balancer (software)&lt;/li>
&lt;li>ssh SSHJump/Bastion Host&lt;/li>
&lt;li>sto Storage Server&lt;/li>
&lt;li>vcs Version Control Software Server (Git/SVN/CVS/etc.)&lt;/li>
&lt;li>vmm Virtual Machine Manager&lt;/li>
&lt;li>web Web Server&lt;/li>
&lt;li>con Console/Terminal Server&lt;/li>
&lt;li>fwl Firewall&lt;/li>
&lt;li>lbl Load Balancer (physical)&lt;/li>
&lt;li>rtr L3 Router&lt;/li>
&lt;li>swt L2 Switch&lt;/li>
&lt;li>vpn VPN Gateway&lt;/li>
&lt;li>pdu Power Distribution Unit&lt;/li>
&lt;li>ups Uninterruptible Power Supply&lt;/li>
&lt;/ul>
&lt;p>##参考资料
&lt;a href="https://cloud.tencent.com/developer/article/1114482">1. 怎么制定一套合适的服务器命名方案&lt;/a>
[2. Airline and Location Code Search]https://www.iata.org/en/publications/directories/code-search/?airport.search=shenzhen
&lt;a href="https://www.jianshu.com/p/9cxmD4">3. 我如何标记自己的公有云服务器实例&lt;/a>
&lt;a href="http://v.colinlee.fish/posts/how-do-i-mark-my-public-cloud-instances.html">4. 我如何标记自己的公有云服务器实例&lt;/a>
&lt;a href="https://blog.csdn.net/blade2001/article/details/7194895">5. 什么是 staging server&lt;/a>
&lt;a href="https://blog.csdn.net/yy19890521/article/details/82345963">6. 软件生命周期中要经历的几种环境&lt;/a>
&lt;a href="https://www.ibm.com/support/knowledgecenter/zh/SSFTBX_8.5.6/com.ibm.wbpm.imuc.doc/topics/cins_naming.html">7. 概要文件、节点、服务器、主机和单元的命名注意事项&lt;/a>
&lt;a href="http://www.faqs.org/rfcs/rfc1178.html">8. RFC 1178 - Choosing a name for your computer&lt;/a>
&lt;a href="https://www.cnblogs.com/William-Guozi/p/Ops_nameRules.html">9. Ops：命名规范&lt;/a>
&lt;a href="https://nova.moe/explore-in-server-rdns-and-hostname/">10. 对服务器 rDNS/Hostname 命名的一次探索&lt;/a>
&lt;a href="https://www.cnblogs.com/kaishirenshi/p/10249072.html">11. 主机名命名规范&lt;/a>
&lt;a href="https://cloud.google.com/compute/docs/instances/custom-hostname-vm#limitations">12. 创建使用自定义主机名的虚拟机实例&lt;/a>&lt;/p>
&lt;h1 id="带你体验正规的运维工作是什么的">带你体验正规的运维工作是什么的！&lt;/h1>
&lt;p>原文链接：&lt;a href="https://www.sohu.com/a/156797475_99902604">https://www.sohu.com/a/156797475_99902604&lt;/a>&lt;/p>
&lt;p>运维人员对公司互联网业务所依赖的基础设施、基础服务、线上业务进行稳定性加强，进行日常巡检发现服务可能存在的隐患，对整体架构进行优化以屏蔽常见的运行故障，多数据中接入提高业务的容灾能力。通过监控、日志分析等技术手段，及时发现和响应服务故障，减少服务中断的时间，使公司的互联网业务符合预期的可用性要求，持续稳定地为用户提供务。
在安全方面，运维人员需要关注业务运行所涉及的各个层面，确保用户能够安全、完整地访问在线业务。
从网络边界划分、ACL 管理、流量分析、DDoS 防御，到操作系统、开源软件的漏洞扫描和修补，再到应用服务的 XSS、SQL 注入防护；
从安全流程梳、代码白盒黑盒扫描、权限审计，到入侵行为检测、业务风险控制等。
运维人员需要保障公司提供的互联网业 运行在安全、可控的状态下，确保公司业务数据和用户隐私数据的安全，同时还需要具备抵御各种恶意攻击的能力。
在确保业务稳定、安全的前提下，还需保障业务高效的运转，公司内快速的产出。运维工作需要对业务进行各方面优化。
比如，IO 优化提升数据库性能，图片压缩降低带宽使用量等，提供的互联网业务以较小的资源投入带来最大的用户价值和体验。同时，还需要通过各种工具平台提升内部产品发布交付的效率，提升公司内运维相关的工作效率。&lt;/p>
&lt;h1 id="工作分类运维">工作分类运维&lt;/h1>
&lt;p>运维的工作方向比较多，随着业务规模的不断发展，越成熟的互联网公司，运维岗位会划分得越细。当前很多大型的互联网公司，在初创时期只有系统运维，随着服务规模、服务质量的 要求，也逐渐进行了工作细分。
一般情况下运维团队的工作分类（见图 1-1）和职责如下。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/vlyx2u/1627887550887-d0f46f7c-eb15-4123-a9a4-d2910a1f28fd.png" alt="image.png">
图 1-1 运维团队的工作分类&lt;/p>
&lt;h2 id="系统运维">系统运维&lt;/h2>
&lt;p>系统运维负责 IDC、网络、CDN 和基础服务的建设（LVS、NTP、DNS）；负责资产管理，服务器选型、交付和维修。详细的工作职责如下：
1.IDC 数据中心建设
收集业务需求，预估未来数据中心的发展规模，从骨干网的分布，数据中心建筑，以及 Internet 接入、网络攻击防御能力、扩容能力、空间预留、外接专线能力、现场服务支撑能力等方面评估选型数据中心。负责数据中心的建设、现场维护工作。 2.网络建设
设计及规划生产网络架构，这里面包括：数据中心网络架构、传输网架构、CDN 网络架构等，以及网络调优等日常运维工作。
3.LVS 负载均衡和 SNAT 建设
LVS 是整个站点架构中的流量入口，根据网络规模和业务需求，构建负载均衡集群。
完成网络与业务服务器的衔接，提供高性能、高可用的负载调度能力，以及统一的网络层防攻击能力。
SNAT .集中提供数据中心的公网访问服务，通过集群化部署，保证出网服务的高性能与高可用。
4.CDN 规划和建设
CDN 工作划分为第三方和自建两部分。
建立第三方 CDN 的选型和调度控制；根据业务发展趋势，规划 CDN 新节点建设布局；完善 CDN 业务及监控，保障 CDN 系统稳定、高效运行。
分析业务加速频道的文件特性和数量，制定最优的加速策略和资源匹配；负责用户劫持等 CDN 日常故障排查工作。 5.服务器选型、交付和维护
负责服务器的测试选型，包含服务器整机、部件的基础性测试和业务测试，降低整机功率，提升机架部署密度等。
结合对公司业务的了解，推广新硬件、新方案减少业务的服务器投入规模。负责服务器硬件故障的诊断定位，服务器硬件监控、健康检查工具的开发和维护。
6.OS、内核选型和 OS 相关维护工作
负责整体平台的 OS 选型、定制和内核优化，以及 Patch 的更新和内部版本发布；建立基础的 YUM 包管理和分发中心，提供常用包版本库；跟进日常各类 OS 相关故障；针对不同的业务类型，提供定向的优化支持。 7.资产管理
记录和管理运维相关的基础物理信息，包括数据中心、网络、机柜、服务器、ACL、IP 等各种资源信息，制定有效的流程，确保信息的准确性；开放 API 接口，为自动化运维提供数据支持。 8.基础服务建设
业务对 DNS、NTP、SYSLOG 等基础服务的依赖非常高，需要设计高可用架构避免单点，提供稳定的基础服务。&lt;/p>
&lt;h2 id="应用运维">应用运维&lt;/h2>
&lt;p>应用运维负责线上服务的变更、服务状态监控、服务容灾和数据备份等工作，对服务进行例行排查、故障应急处理等工作。详细的工作职责如下所述。 1.设计评审
在产品研发阶段，参与产品设计评审，从运维的角度提出评审意见，使服务满足运维准入的高可用要求。 2.服务管理
负责制定线上业务升级变更及回滚方案，并进行变更实施。掌握所负责的服务及服务间关联关系、服务依赖的各种资源。能够发现服务上的缺陷，及时通报并推进解决。
制定服务稳定性指标及准入标准，同时不断完善和优化程序和系统的功能、效率，提高运行质量。完善监控内容，提高报警准确度。
在线上服务出现故障时，第一时间响应，对已知线上故障能按流程进行通报并按预案执行，未知故障组织相关人员联合排障。 3.资源管理
对各服务的服务器资产进行管理，梳理服务器资源状况、数据中心分布情况、网络专线及带宽情况，能够合理使用服务器资源，根据不同服务的需求，分配不同配置的服务器，确保服务器资源的充分利用。 4.例行检查
制定服务例行排查点，并不断完善。根据制定的服务排查点，对服务进行定期检查。对排查过程中发现的问题，及时进行追查，排除可能存在的隐患。 5.预案管理
确定服务所需的各项监控、系统指标的阈值或临界点，以及出现该情况后的处理预案。建立和更新服务预案文档，并根据日常故障情况不断补充完善，提高预案完备性。能够制定和评审各类预案，周期性进行预案演练，确保预案的可执行性。 6.数据备份
制定数据备份策略，按规范进行数据备份工作。保证数据备份的可用性和完整性，定期开展数据恢复性测试。&lt;/p>
&lt;h2 id="数据库运维">数据库运维&lt;/h2>
&lt;p>数据库运维负责数据存储方案设计、数据库表设计、索引设计和 SQL 优化，对数据库进行变更、监控、备份、高可用设计等工作。详细的工作职责如下所述。 1.设计评审
在产品研发初始阶段，参与设计方案评审，从 DBA 的角度提出数据存储方案、库表设计方案、SQL 开发标准、索引设计方案等，使服务满足数据库使用的高可用、高性能要求。 2.容量规划
掌握所负责服务的数据库的容量上限，清楚地了解当前瓶颈点，当服务还未到达容量上限时，及时进行优化、分拆或者扩容。 3.数据备份与灾备
制定数据备份与灾备策略，定期完成数据恢复性测试，保证数据备份的可用性和完整性。 4.数据库监控
完善数据库存活和性能监控，及时了解数据库运行状态及故障。
数据库安全
建设数据库账号体系，严格控制账号权限与开放范围，降低误操作和数据泄露的风险；加强离线备份数据的管理，降低数据泄露的风险。 5.数据库高可用和性能优化
对数据库单点风险和故障设计相应的切换方案，降低故障对数据库服务的影响；不断对数据库整体性能进行优化，包括新存储方案引进、硬件优化、文件系统优化、数据库优化、SQL 优化等，在保障成本不增加或者少量增加的情况下，数据库可以支撑更多的业务请求。 6.自动化系统建设
设计开发数据库自动化运维系统，包括数据库部署、自动扩容、分库分表、权限管理、备份恢复、SQL 审核和上线、故障切换等功能。&lt;/p>
&lt;h2 id="运维研发">运维研发&lt;/h2>
&lt;p>运维研发负责通用的运维平台设计和研发工作，如：资产管理、监控系统、运维平台、数据权限管理系统等。提供各种 API 供运维或研发人员使用，封装更高层的自动化运维系统。详细的工作职责如下所述。 8.运维平台
记录和管理服务及其关联关系，协助运维人员自动化、流程化地完成日常运维操作，包括机器管理、重启、改名、初始化、域名管理、流量切换和故障预案实施等。 9.监控系统
负责监控系统的设计、开发工作，完成公司服务器和各种网络设备的资源指标、线上业务运行指标的收集、告警、存储、分析、展示和数据挖掘等工作，持续提高告警的及时性、准确性和智能性，促进公司服务器资源的合理化调配。 10.自动化部署系统
参与部署自动化系统的开发，负责自动化部署系统所需要的基础数据和信息，负责权限管理、API 开发、Web 端开发。结合云计算，研发和提供 PaaS 相关高可用平台，进一步提高服务的部署速度和用户体验，提升资源利用率。&lt;/p>
&lt;h2 id="运维安全">运维安全&lt;/h2>
&lt;p>运维安全负责网络、系统和业务等方面的安全加固工作，进行常规的安全扫描、渗透测试，进行安全工具和系统研发以及安全事件应急处理。详细的工作职责如下所述。 1.安全制度建立
根据公司内部的具体流程，制定切实可行，且行之有效的安全制度。 2.安全培训
定期向员工提供具有针对性的安全培训和考核，在全公司内建立安全负责人制度。 3.风险评估
通过黑白盒测试和检查机制，定期产生对物理网络、服务器、业务应用、用户数据等方面的总体风险评估结果。 4.安全建设
根据风险评估结果，加固最薄弱的环节，包括设计安全防线、部署安全设备、及时更新补丁、防御病毒、源代码自动扫描和业务产品安全咨询等。为了降低可能泄露数据的价值，通过加密、匿名化、混淆数据，乃至定期删除等技术手段和流程来达到目的。 5.安全合规
为了满足例如支付牌照等合规性要求，安全团队承担着安全合规的对外接口人工作。 6.应急响应
建立安全报警系统，通过安全中心收集第三方发现的安全问题，组织各部门对已经发现的安全问题进行修复、影响面评估、事后安全原因追查。&lt;/p>
&lt;h1 id="运维工作发展过程">运维工作发展过程&lt;/h1>
&lt;p>早期的运维团队在人员较少的情况下，主要是进行数据中心建设、基础网络建设、服务器采购和服务器安装交付工作。几乎很少涉及线上服务的变更、监控、管理等工作。
这个时候的运维团队更多的属于基础建设的角色，提供一个简单、可用的网络环境和系统环境即可。
随着业务产品的逐渐成熟，对于服务质量方面就有了更高的要求。这个时候的运维团队还会承担一些服务器监控的工作，同时会负责 LVS、Nginx 等与业务逻辑无关的 4/7 层运维工作。
这个时候服务变更更多的是逐台的手工操作，或者有一些简单批量脚本的出现。监控的焦点更多的在服务器状态和资源使用情况上，对服务应用状态的监控几乎很少，监控更多的使用各种开源系统如 Nagios、Cacti 等。
由于业务规模和复杂度的持续增加，运维团队会逐渐划分为应用运维和系统运维两大块。应用运维开始接手线上业务，逐步开展服务监控梳理、数据备份以及服务变更的工作。
随着对服务的深入，应用运维工程师有能力开始对服务进行一些简单的优化。同时，为了应对每天大量的服务变更，我们也开始编写各类运维工具，针对某些特定的服务能够很方便的批量变更。
随着业务规模的增大，基础设施由于容量规划不足或抵御风险能力较弱导致的故障也越来越多，迫使运维人员开始将更多的精力投入到多数据中心容灾、预案管理的方向上。
业务规模达到一定程度后，开源的监控系统在性能和功能方面，已经无法满足业务需求；大量的服务变更、复杂的服务关系，以前靠人工记录、工具变更的方式不管在效率还是准确性方面也都无法满足业务需求。
在安全方面也出现了各种大大小小的事件，迫使我们投入更多的精力在安全防御上。逐渐的，运维团队形成之前提到的 5 个大的工作分类，每个分类都需要有专精的人才。
这个时候系统运维更专注于基础设施的建设和运维，提供稳定、高效的网络环境，交付服务器等资源给应用运维工程师。应用运维更专注于服务运行状态和效率。
数据库运维属于应用运维工作的细化，更专注于数据库领域的自动化、性能优化和安全防御。运维研发和运维安全提供各类平台、工具，进一步提升运维工程师的工作效率，使业务服务运行得更加稳定、高效和安全。
我们将运维发展过程划分为 4 个阶段，如图 1-2 所示。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/vlyx2u/1627887551274-632c2665-b2e3-4a7b-81a6-fa436d0143e1.png" alt="image.png">&lt;/p>
&lt;p>**手工管理阶段：**业务流量不大，服务器数量相对较少，系统复杂度不高。对于日常的业务管理操作，大家更多的是逐台登录服务器进行手工操作，属于各自为战，每个人都有自己的操作方式，缺少必要的操作标准、流程机制，比如业务目录环境都是各式各样的。
**工具批量操作阶段：**随着服务器规模、系统复杂度的增加，全人工的操作方式已经不能满足业务的快速发展需要。因此，运维人员逐渐开始使用批量化的操作工具，针对不同操作类型出现了不同的脚本程序。
但各团队都有自己的工具，每次操作需求发生变化时都需要调整工具。这主要是因为对于环境、操作的规范不够，导致可程序化处理能力较弱。此时，虽然效率提升了一部分，但很快又遇到了瓶颈。
操作的质量并没有太多的提升，甚至可能因为批量执行而导致更大规模的问题出现。我们开始建立大量的流程规范，比如复查机制，先上线一台服务器观察 10 分钟后再继续后面的操作，一次升级完成后至少要观察 20 分钟等。
这些主要还是靠人来监督和执行，但在实际过程中执行往往不到位，反而降低了工作效率。
**平台管理阶段：**在这个阶段，对于运维效率和误操作率有了更高的要求，我们决定开始建设运维平台，通过平台承载标准、流程，进而解放人力和提高质量。
这个时候对服务的变更动作进行了抽象，形成了操作方法、服务目录环境、服务运行方式等统一的标准，如程序的启停接口必须包括启动、停止、重载等。通过平台来约束操作流程，如上面提到的上线一台服务器观察 10 分钟。
在平台中强制设定暂停检查点，在第一台服务器操作完成后，需要运维人员填写相应的检查项，然后才可以继续执行后续的部署动作。
系统自调度阶段：更大规模的服务数量、更复杂的服务关联关系、各个运维平台的林立，原有的将批量操作转化成平台操作的方式已经不再适合，需要对服务变更进行更高一层的抽象。
将每一台服务器抽象成一个容器，由调度系统根据资源使用情况，将服务调度、部署到合适的服务器上，自动化完成与周边各个运维系统的联动，比如监控系统、日志系统、备份系统等。
通过自调度系统，根据服务运行情况动态伸缩容量，能够自动化处理常见的服务故障。运维人员的工作也会前置到产品设计阶段，协助研发人员改造服务使其可以接入到自调度系统中。
在整个运维的发展过程中，希望所有的工作都自动化起来，减少人的重复工作，降低知识传递的成本，使我们的运维交付更高效、更安全，使产品运行更稳定。对于故障的处理，也希望由事后处理变成提前发现，由人工处理变成系统自动容灾。&lt;/p></description></item><item><title>Docs: Templates 模板(Jinja2)</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/ansible/playbook/templates-%E6%A8%A1%E6%9D%BFjinja2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/ansible/playbook/templates-%E6%A8%A1%E6%9D%BFjinja2/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/user_guide/playbooks_templating.html">官方文档,用户指南-传统目录-使用剧本-模板(Jinja2)&lt;/a>&lt;/li>
&lt;li>朱双印博客,jinja2 模板
&lt;ul>
&lt;li>&lt;a href="https://www.zsythink.net/archives/2999">https://www.zsythink.net/archives/2999&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.zsythink.net/archives/3021">https://www.zsythink.net/archives/3021&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.zsythink.net/archives/3037">https://www.zsythink.net/archives/3037&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.zsythink.net/archives/3051">https://www.zsythink.net/archives/3051&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://www.junmajinlong.com/ansible/9_power_of_jinja2/">https://www.junmajinlong.com/ansible/9_power_of_jinja2/&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Jinja2 的内容较多，但对于学习 Ansible 来说，只需要学习其中和 template 相关的一部分 (其它的都和开发有关或 Ansible 中用不上) 以及 Ansible 对 Jinja2 的扩展功能即可。
Jinja 语法详见 Python 编程语言章节&lt;/p>
&lt;p>&lt;a href="https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/Jinja.md">Jinja&lt;/a>&lt;/p>
&lt;p>尽管在编写 playbook 时可以不用在意是否要用 Jinja2，但 Ansible 的运行离不开 Jinja2，当 Ansible 开始执行 playbook 或任务时，总是会先使用 Jinja2 去解析所有指令的值，然后再执行任务。另一方面，在编写任务的过程中也会经常用到 Jinja2 来实现一些需求。所以，Jinja2 可以重要到成为 Ansible 的命脉。&lt;/p>
&lt;p>严格地说，playbook 中所有地方都使用了 Jinja2，包括几乎所有指令的值、template 模板文件、copy 模块的 content 指令的值、lookup 的 template 插件、等等。它们会先经过 Jinja2 渲染，然后再执行相关任务。&lt;/p>
&lt;p>例如，下面的 playbook 中分别使用了三种 Jinja2 特殊符号。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">hosts&lt;/span>: &lt;span style="color:#ae81ff">localhost&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">gather_facts&lt;/span>: &lt;span style="color:#66d9ef">no&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">tasks&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">debug&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">msg&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;hello world, {{inventory_hostname}}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">debug&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">msg&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;hello world{# comment #}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">debug&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">msg&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;{% if True %}hello world{% endif %}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>注：jinja2 原生的布尔值应当是小写的 true 和 false，但也支持首字母大写形式的 True 和 False。&lt;/p>
&lt;/blockquote>
&lt;p>执行结果：&lt;/p>
&lt;pre>&lt;code>TASK [debug] ************************
ok: [localhost] =&amp;gt; {
&amp;quot;msg&amp;quot;: &amp;quot;hello world, localhost&amp;quot;
}
TASK [debug] ************************
ok: [localhost] =&amp;gt; {
&amp;quot;msg&amp;quot;: &amp;quot;hello world&amp;quot;
}
TASK [debug] ************************
ok: [localhost] =&amp;gt; {
&amp;quot;msg&amp;quot;: &amp;quot;hello world&amp;quot;
}
&lt;/code>&lt;/pre>
&lt;p>再比如模板文件 a.conf.j2 中使用这三种特殊语法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#75715e"># Comment this line #}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">variable value&lt;/span>: {{&lt;span style="color:#ae81ff">inventory_hostname}}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#ae81ff">% if True %}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">in if tag code&lt;/span>: {{&lt;span style="color:#ae81ff">inventory_hostname}}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#ae81ff">% endif %}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>对应的模板渲染任务：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">template&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">src&lt;/span>: &lt;span style="color:#ae81ff">a.conf.j2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">dest&lt;/span>: &lt;span style="color:#ae81ff">/tmp/a.conf&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行后，将在 / tmp/a.conf 中生成如下内容：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">variable value&lt;/span>: &lt;span style="color:#ae81ff">localhost&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">in if tag code&lt;/span>: &lt;span style="color:#ae81ff">localhost&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>有些指令比较特殊，它们已经使用隐式的 {{}} 进行了预包围，例如 debug 模块的 var 参数、条件判断&lt;code>when&lt;/code>指令，所以这时就不要手动使用 {{}} 再包围指令的值。例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">debug&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">var&lt;/span>: &lt;span style="color:#ae81ff">inventory_hostname&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>但有时候也确实是需要在 var 或 when 中的一部分使用 {{}} 来包围表示这是一个变量或是一个表达式，而非字符串的。例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">debug&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">var&lt;/span>: &lt;span style="color:#ae81ff">hostvars[&amp;#39;{{php}}&amp;#39;]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">vars&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">php&lt;/span>: &lt;span style="color:#ae81ff">192.168.200.143&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="ansible-扩展的测试函数">Ansible 扩展的测试函数&lt;/h1>
&lt;p>模板引擎是多功能的，可以用在很多方面，所以 Jinja2 自身置的大多数功能都是通用功能。使用 Jinja2 的工具可能会对 Jinja2 进行功能扩展，比如 Flask 扩展了一些功能，Ansible 也对 Jinja2 扩展了一些功能。&lt;/p>
&lt;p>Ansible 扩展的测试函数官方手册：&lt;a href="https://docs.ansible.com/ansible/latest/user_guide/playbooks_tests.html">https://docs.ansible.com/ansible/latest/user_guide/playbooks_tests.html&lt;/a>。&lt;/p>
&lt;h3 id="测试字符串">测试字符串&lt;/h3>
&lt;p>Ansible 提供了三个正则测试函数：&lt;/p>
&lt;ul>
&lt;li>match()&lt;/li>
&lt;li>search()&lt;/li>
&lt;li>regex()&lt;/li>
&lt;/ul>
&lt;p>它们都返回布尔值，匹配成功时返回 true。&lt;/p>
&lt;p>其中，match() 要求从字符串的首字符开始匹配成功。&lt;/p>
&lt;p>例如：&lt;/p>
&lt;pre>&lt;code>&amp;quot;hello123world&amp;quot; is match(&amp;quot;\d+&amp;quot;) -&amp;gt; False
&amp;quot;hello123world&amp;quot; is match(&amp;quot;.*\d+&amp;quot;) -&amp;gt; True
&amp;quot;hello123world&amp;quot; is search(&amp;quot;\d+&amp;quot;) -&amp;gt; True
&amp;quot;hello123world&amp;quot; is regex(&amp;quot;\d+&amp;quot;) -&amp;gt; True
&lt;/code>&lt;/pre>
&lt;h3 id="版本号大小比较">版本号大小比较&lt;/h3>
&lt;p>Ansible 作为配置服务、程序的配置管理工具，经常需要比较版本号的大小是否符合要求。Ansible 提供了一个&lt;code>version&lt;/code>测试函数可以用来测试版本号是否大于、小于、等于、不等于给定的版本号。&lt;/p>
&lt;p>语法：&lt;/p>
&lt;pre>&lt;code>version('VERSION',CMP)
&lt;/code>&lt;/pre>
&lt;p>其中 CMP 可以是如下几种：&lt;/p>
&lt;pre>&lt;code>&amp;lt;, lt, &amp;lt;=, le, &amp;gt;, gt, &amp;gt;=, ge, ==, =, eq, !=, &amp;lt;&amp;gt;, ne
&lt;/code>&lt;/pre>
&lt;p>例如：&lt;/p>
&lt;pre>&lt;code>{{ ansible_facts[&amp;quot;distribution_version&amp;quot;] is version(&amp;quot;7.5&amp;quot;,&amp;quot;&amp;lt;=&amp;quot;) }}
&lt;/code>&lt;/pre>
&lt;p>判断操作系统版本号是否小于等于 7.5。&lt;/p>
&lt;h3 id="子集父集测试">子集、父集测试&lt;/h3>
&lt;ul>
&lt;li>&lt;code>A is subset(B)&lt;/code>测试 A 是否是 B 的子集&lt;/li>
&lt;li>&lt;code>A is superset(B)&lt;/code>测试 A 是否是 B 的父集&lt;/li>
&lt;/ul>
&lt;p>例如：&lt;/p>
&lt;pre>&lt;code>- debug:
msg: '{{[1,2,3] is subset([1,2,3,4])}}'
&lt;/code>&lt;/pre>
&lt;h3 id="成员测试">成员测试&lt;/h3>
&lt;p>Jinja2 自己有一个&lt;code>in&lt;/code>操作符可以做成员测试，Ansible 另外还实现了一个 contains 测试函数，主要目的是为了结合 select、reject、selectattr 和 rejectattr 筛选器。&lt;/p>
&lt;p>官方给了一个示例：&lt;/p>
&lt;pre>&lt;code>vars:
lacp_groups:
- master: lacp0
network: 10.65.100.0/24
gateway: 10.65.100.1
dns4:
- 10.65.100.10
- 10.65.100.11
interfaces:
- em1
- em2
- master: lacp1
network: 10.65.120.0/24
gateway: 10.65.120.1
dns4:
- 10.65.100.10
- 10.65.100.11
interfaces:
- em3
- em4
tasks:
- debug:
msg: &amp;quot;{{ (lacp_groups|selectattr('interfaces', 'contains', 'em1')|first).master }}&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>此外，Ansible 还实现了&lt;code>all&lt;/code>和&lt;code>any&lt;/code>测试函数，&lt;code>all()&lt;/code>测试表示当序列中所有元素都返回 true 时，all() 返回 true，&lt;code>any()&lt;/code>测试表示当序列中只要有元素返回 true，any() 就返回 true。&lt;/p>
&lt;p>仍然是官方给的示例：&lt;/p>
&lt;pre>&lt;code> mylist:
- 1
- &amp;quot;{{ 3 == 3 }}&amp;quot;
- True
myotherlist:
- False
- True
tasks:
- debug:
msg: &amp;quot;all are true!&amp;quot;
when: mylist is all
- debug:
msg: &amp;quot;at least one is true&amp;quot;
when: myotherlist is any
&lt;/code>&lt;/pre>
&lt;h3 id="测试文件">测试文件&lt;/h3>
&lt;p>Ansible 提供了测试文件的相关函数：&lt;/p>
&lt;ul>
&lt;li>is exists：是否存在&lt;/li>
&lt;li>is directory：是否是目录&lt;/li>
&lt;li>is file：是否是普通文件&lt;/li>
&lt;li>is link：是否是软链接&lt;/li>
&lt;li>is abs：是否是绝对路径&lt;/li>
&lt;li>is same_file(F)：是否和 F 是硬链接关系&lt;/li>
&lt;li>is mount：是否是挂载点&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">debug&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">msg&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;path is a directory&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">when&lt;/span>: &lt;span style="color:#ae81ff">mypath is directory&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">debug&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">msg&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;path is {{ (mypath is abs)|ternary(&amp;#39;absolute&amp;#39;,&amp;#39;relative&amp;#39;)}}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">debug&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">msg&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;path is the same file as path2&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">when&lt;/span>: &lt;span style="color:#ae81ff">mypath is same_file(path2)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">debug&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">msg&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;path is a mount&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">when&lt;/span>: &lt;span style="color:#ae81ff">mypath is mount&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="测试任务的执行状态">测试任务的执行状态&lt;/h3>
&lt;p>每个任务的执行结果都有 4 种状态：成功、失败、changed、跳过。&lt;/p>
&lt;p>Ansible 提供了相关的测试函数：&lt;/p>
&lt;ul>
&lt;li>succeeded、success&lt;/li>
&lt;li>failed、failure&lt;/li>
&lt;li>changed、change&lt;/li>
&lt;li>skipped、skip&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">shell&lt;/span>: &lt;span style="color:#ae81ff">/usr/bin/foo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">register&lt;/span>: &lt;span style="color:#ae81ff">result&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ignore_errors&lt;/span>: &lt;span style="color:#66d9ef">True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">debug&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">msg&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;it failed&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">when&lt;/span>: &lt;span style="color:#ae81ff">result is failed&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">debug&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">msg&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;it changed&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">when&lt;/span>: &lt;span style="color:#ae81ff">result is changed&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">debug&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">msg&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;it succeeded in Ansible &amp;gt;= 2.1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">when&lt;/span>: &lt;span style="color:#ae81ff">result is succeeded&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">debug&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">msg&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;it succeeded&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">when&lt;/span>: &lt;span style="color:#ae81ff">result is success&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">debug&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">msg&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;it was skipped&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">when&lt;/span>: &lt;span style="color:#ae81ff">result is skipped&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="ansible-扩展的-filter">Ansible 扩展的 Filter&lt;/h1>
&lt;p>Ansible 扩展了非常多的 Filter，非常非常多，本来我只想介绍一部分。但是想到有些人不愿看英文，我还是将它们全都写出来，各位权当看中文手册好了。实际上它们也都非常容易，绝大多数筛选器用法几乎都不用动脑，一看便懂。&lt;/p>
&lt;h3 id="类型转换类筛选器">类型转换类筛选器&lt;/h3>
&lt;p>例如：&lt;/p>
&lt;pre>&lt;code>{{&amp;quot;123&amp;quot;|int}}
{{&amp;quot;123&amp;quot;|float}}
{{123|string}}
{{range(1,6)|list}}
{{123|bool}}
&lt;/code>&lt;/pre>
&lt;p>注意，没有 dict 筛选器转换成字典类型。&lt;/p>
&lt;h3 id="获取当前时间点">获取当前时间点&lt;/h3>
&lt;p>Ansible 提供的 now() 可以获取当前时间点。&lt;/p>
&lt;p>例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">debug&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">msg&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;{{now()}}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>得到结果：&lt;/p>
&lt;pre>&lt;code>ok: [localhost] =&amp;gt; {
&amp;quot;msg&amp;quot;: &amp;quot;2020-01-25 00:27:17.563627&amp;quot;
}
&lt;/code>&lt;/pre>
&lt;p>可以指定输出的格式化字符串，支持的格式化字符串参考 python 官方手册：&lt;a href="https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior">https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior&lt;/a>。&lt;/p>
&lt;p>例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">debug&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">msg&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;{{now().strftime(&amp;#34;%Y-%m-%d %H:%M:%S.%f&amp;#34;)}}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="yamljson-格式化">YAML、JSON 格式化&lt;/h3>
&lt;p>Ansible 提供了几个和 YAML、JSON 格式化相关的 Filter：&lt;/p>
&lt;pre>&lt;code>to_yaml
to_json
to_nice_yaml
to_nice_json
&lt;/code>&lt;/pre>
&lt;p>它们都可使用 indent 参数指定缩进的层次。&lt;/p>
&lt;p>&lt;code>to_yaml&lt;/code>和&lt;code>to_json&lt;/code>适用于调试，&lt;code>to_nice_yaml&lt;/code>和&lt;code>to_nice_json&lt;/code>适用于用户查看。&lt;/p>
&lt;p>例如：&lt;/p>
&lt;pre>&lt;code>- debug:
msg: '{{f1|to_nice_json(indent=2)}}'
vars:
f1:
father: &amp;quot;Bob&amp;quot;
mother: &amp;quot;Alice&amp;quot;
Children:
- Judy
- Tedy
&lt;/code>&lt;/pre>
&lt;h3 id="参数忽略">参数忽略&lt;/h3>
&lt;p>Ansible 提供了一个特殊变量 omit，可以用来忽略模块的参数效果。&lt;/p>
&lt;p>官方手册给了一个非常有代表性的示例，如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">touch files with an optional mode&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">file&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">dest&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;{{ item.path }}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">state&lt;/span>: &lt;span style="color:#ae81ff">touch&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">mode&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;{{ item.mode | default(omit) }}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">loop&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">path&lt;/span>: &lt;span style="color:#ae81ff">/tmp/foo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">path&lt;/span>: &lt;span style="color:#ae81ff">/tmp/bar&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">path&lt;/span>: &lt;span style="color:#ae81ff">/tmp/baz&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">mode&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;0444&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>当所迭代的元素中不存在 mode 项，则使用默认值，默认值设置为特殊变量 omit，使得 file 模块的 mode 参数被忽略，相当于未书写该参数。只有给定了 mode 项时，mode 参数才生效。&lt;/p>
&lt;h3 id="列表元素连接">列表元素连接&lt;/h3>
&lt;p>&lt;code>join&lt;/code>可以将列表各个元素根据指定的连接符连接起来：&lt;/p>
&lt;pre>&lt;code>{{ [1,2,3] | join(&amp;quot;-&amp;quot;) }}
&lt;/code>&lt;/pre>
&lt;h3 id="列表压平">列表压平&lt;/h3>
&lt;p>前面的文章曾介绍过 flatten 筛选器，它可以将嵌套列表压平。&lt;/p>
&lt;p>例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">debug&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">msg&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;{{ [3, [4, 2] ] | flatten }}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">debug&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">msg&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;{{ [3, [4, [2]] ] | flatten(levels=1) }}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="并集交集差集">并集、交集、差集&lt;/h3>
&lt;p>Ansible 提供了集合理论类的求值操作：&lt;/p>
&lt;ul>
&lt;li>unique：去重&lt;/li>
&lt;li>union：并集，即两个集合中所有元素&lt;/li>
&lt;li>intersect：交集，即两个集合中都存在的元素&lt;/li>
&lt;li>difference：差集，即返回只在第一个集合中，不在第二个集合中的元素&lt;/li>
&lt;li>symmetric_difference：对称差集，即返回两个集合中不重复的元素&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;pre>&lt;code>- name: return [1,2,3]
debug:
msg: &amp;quot;{{ [1,2,3,2,1] | unique }}&amp;quot;
- name: return [1,2,3,4]
debug:
msg: &amp;quot;{{ [1,2,3] | union([2,3,4]) }}&amp;quot;
- name: return [2,3]
debug:
msg: &amp;quot;{{ [1,2,3] | intersect([2,3,4]) }}&amp;quot;
- name: return [1]
debug:
msg: &amp;quot;{{ [1,2,3] | difference([2,3,4]) }}&amp;quot;
- name: return [1,4]
debug:
msg: &amp;quot;{{ [1,2,3] | symmetric_difference([2,3,4]) }}&amp;quot;
&lt;/code>&lt;/pre>
&lt;h3 id="dict-和-list-转换">dict 和 list 转换&lt;/h3>
&lt;ul>
&lt;li>&lt;code>dict2items()&lt;/code>：将字典转换为列表&lt;/li>
&lt;li>&lt;code>items2dict()&lt;/code>：将列表转换为字典&lt;/li>
&lt;/ul>
&lt;p>对于&lt;code>dict2items&lt;/code>，例如：&lt;/p>
&lt;pre>&lt;code>- debug:
msg: &amp;quot;{{ p | dict2items }}&amp;quot;
vars:
p:
name: junmajinlong
age: 28
&lt;/code>&lt;/pre>
&lt;p>得到：&lt;/p>
&lt;pre>&lt;code>[
{
&amp;quot;key&amp;quot;: &amp;quot;name&amp;quot;,
&amp;quot;value&amp;quot;: &amp;quot;junmajinlong&amp;quot;
},
{
&amp;quot;key&amp;quot;: &amp;quot;age&amp;quot;,
&amp;quot;value&amp;quot;: 28
}
]
&lt;/code>&lt;/pre>
&lt;p>对于&lt;code>items2dict&lt;/code>，例如：&lt;/p>
&lt;pre>&lt;code>- debug:
msg: &amp;quot;{{ p | items2dict }}&amp;quot;
vars:
p:
- key: name
value: junmajinlong
- key: age
value: 28
&lt;/code>&lt;/pre>
&lt;p>得到：&lt;/p>
&lt;pre>&lt;code>{
&amp;quot;age&amp;quot;: 28,
&amp;quot;name&amp;quot;: &amp;quot;junmajinlong&amp;quot;
}
&lt;/code>&lt;/pre>
&lt;p>默认情况下，&lt;code>dict2items&lt;/code>和&lt;code>items2dict&lt;/code>都使用&lt;code>key&lt;/code>和&lt;code>value&lt;/code>来转换，但它们都允许使用&lt;code>key_name&lt;/code>和&lt;code>value_name&lt;/code>自定义转换的名称。&lt;/p>
&lt;p>例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">debug&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">msg&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;{{ files | dict2items(key_name=&amp;#39;file&amp;#39;, value_name=&amp;#39;path&amp;#39;) }}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">vars&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">files&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">users&lt;/span>: &lt;span style="color:#ae81ff">/etc/passwd&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">groups&lt;/span>: &lt;span style="color:#ae81ff">/etc/group&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>得到：&lt;/p>
&lt;pre>&lt;code>[
{
&amp;quot;file&amp;quot;: &amp;quot;users&amp;quot;,
&amp;quot;path&amp;quot;: &amp;quot;/etc/passwd&amp;quot;
},
{
&amp;quot;file&amp;quot;: &amp;quot;groups&amp;quot;,
&amp;quot;path&amp;quot;: &amp;quot;/etc/group&amp;quot;
}
]
&lt;/code>&lt;/pre>
&lt;h3 id="zip-和-zip_longest">zip 和 zip_longest&lt;/h3>
&lt;p>&lt;code>zip&lt;/code>和&lt;code>zip_longest&lt;/code>可以将多个列表的元素一一对应并组合起来。它们的区别是，zip 以短序列为主，&lt;code>zip_longest&lt;/code>以最长序列为主，缺失的部分使用 null 填充。&lt;/p>
&lt;p>例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">return [[1,&amp;#34;a&amp;#34;], [2,&amp;#34;b&amp;#34;]]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">debug&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">msg&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;{{ [1,2] | zip([&amp;#39;a&amp;#39;,&amp;#39;b&amp;#39;]) | list }}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">return [[1,&amp;#34;a&amp;#34;], [2,&amp;#34;b&amp;#34;]]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">debug&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">msg&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;{{ [1,2] | zip([&amp;#39;a&amp;#39;,&amp;#39;b&amp;#39;,&amp;#39;c&amp;#39;]) | list }}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">return [[1,&amp;#34;a&amp;#34;], [2,&amp;#34;b&amp;#34;], [null, &amp;#34;c&amp;#34;]]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">debug&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">msg&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;{{ [1,2] | zip_longest([&amp;#39;a&amp;#39;,&amp;#39;b&amp;#39;,&amp;#39;c&amp;#39;]) | list }}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">return [[1,&amp;#34;a&amp;#34;,&amp;#34;aa&amp;#34;], [2,&amp;#34;b&amp;#34;,&amp;#34;bb&amp;#34;]]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">debug&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">msg&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;{{ [1,2] | zip([&amp;#39;a&amp;#39;,&amp;#39;b&amp;#39;], [&amp;#39;aa&amp;#39;,&amp;#39;bb&amp;#39;]) | list }}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 Python 中经常会将 zip 的运算结果使用 dict() 构造成字典，Jinja2 中也可以：&lt;/p>
&lt;pre>&lt;code>- name: !unsafe 'return {&amp;quot;a&amp;quot;: 1, &amp;quot;b&amp;quot;: 2}'
debug:
msg: &amp;quot;{{ dict(['a','b'] | zip([1,2])) }}&amp;quot;
&lt;/code>&lt;/pre>
&lt;h3 id="子元素-subelements">子元素 subelements&lt;/h3>
&lt;p>subelements 筛选器在前一章节详细解释过，这里不再介绍。&lt;/p>
&lt;h3 id="random-生成随机数">random 生成随机数&lt;/h3>
&lt;p>Jinja2 自身内置了一个 random 筛选器，Ansible 也有一个 random 筛选器，比 Jinja2 内置的定制性要更强一点。&lt;/p>
&lt;pre>&lt;code>&amp;quot;{{ ['a','b','c'] | random }}&amp;quot;
# =&amp;gt; 'c'
# 生成[0,60)的随机数
&amp;quot;{{ 60 | random }} * * * * root /script/from/cron&amp;quot;
# =&amp;gt; '21 * * * * root /script/from/cron'
# 生成[0,100)的随机数，步进为10
{{ 101 | random(step=10) }}
# =&amp;gt; 70
# 生成[1,100)的随机数，步进为10
{{ 101 | random(1, 10) }}
# =&amp;gt; 31
{{ 101 | random(start=1, step=10) }}
# =&amp;gt; 51
# 指定随机数种子。
# 下面指定为主机名，所以同主机生成的随机数相同，但不同主机的随机数不同
&amp;quot;{{ 60 | random(seed=inventory_hostname) }} * * * * root /script/from/cron&amp;quot;
&lt;/code>&lt;/pre>
&lt;h3 id="shuffle-打乱顺序">shuffle 打乱顺序&lt;/h3>
&lt;h3 id="imagepnghttpsnotes-learningoss-cn-beijingaliyuncscomlmdoi21638717920341-716b62fb-5d66-43db-a26d-9a14afaa42fapng">&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/lmdoi2/1638717920341-716b62fb-5d66-43db-a26d-9a14afaa42fa.png" alt="image.png">&lt;/h3>
&lt;h3 id="json_query">json_query&lt;/h3>
&lt;p>可查询 Json 格式的数据，&lt;code>json_query&lt;/code>在 Ansible 中非常实用，是必学 Filter 之一。&lt;/p>
&lt;p>Ansible 的&lt;code>json_query&lt;/code>基于 jmespath，所以需要先安装 jmespath：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ pip3 install jmespath
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>jmespath 的查询语法相关示例可参见其官方手册：&lt;/p>
&lt;ul>
&lt;li>入门手册： &lt;a href="http://jmespath.org/tutorial.html">http://jmespath.org/tutorial.html&lt;/a>&lt;/li>
&lt;li>示例：&lt;a href="http://jmespath.org/examples.html">http://jmespath.org/examples.html&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>下面我列出 Ansible 中给出的示例。&lt;/p>
&lt;p>例如，对于下面的数据结构：&lt;/p>
&lt;pre>&lt;code>{
&amp;quot;domain_definition&amp;quot;: {
&amp;quot;domain&amp;quot;: {
&amp;quot;cluster&amp;quot;: [
{&amp;quot;name&amp;quot;: &amp;quot;cluster1&amp;quot;},
{&amp;quot;name&amp;quot;: &amp;quot;cluster2&amp;quot;}
],
&amp;quot;server&amp;quot;: [
{
&amp;quot;name&amp;quot;: &amp;quot;server11&amp;quot;,
&amp;quot;cluster&amp;quot;: &amp;quot;cluster1&amp;quot;,
&amp;quot;port&amp;quot;: &amp;quot;8080&amp;quot;
},
{
&amp;quot;name&amp;quot;: &amp;quot;server12&amp;quot;,
&amp;quot;cluster&amp;quot;: &amp;quot;cluster1&amp;quot;,
&amp;quot;port&amp;quot;: &amp;quot;8090&amp;quot;
},
{
&amp;quot;name&amp;quot;: &amp;quot;server21&amp;quot;,
&amp;quot;cluster&amp;quot;: &amp;quot;cluster2&amp;quot;,
&amp;quot;port&amp;quot;: &amp;quot;9080&amp;quot;
},
{
&amp;quot;name&amp;quot;: &amp;quot;server22&amp;quot;,
&amp;quot;cluster&amp;quot;: &amp;quot;cluster2&amp;quot;,
&amp;quot;port&amp;quot;: &amp;quot;9090&amp;quot;
}
],
&amp;quot;library&amp;quot;: [
{
&amp;quot;name&amp;quot;: &amp;quot;lib1&amp;quot;,
&amp;quot;target&amp;quot;: &amp;quot;cluster1&amp;quot;
},
{
&amp;quot;name&amp;quot;: &amp;quot;lib2&amp;quot;,
&amp;quot;target&amp;quot;: &amp;quot;cluster2&amp;quot;
}
]
}
}
}
&lt;/code>&lt;/pre>
&lt;p>使用&lt;/p>
&lt;pre>&lt;code>{{ domain_definition | json_query('domain.cluster[*].name') }}
&lt;/code>&lt;/pre>
&lt;p>可以获取到名称 cluster1 和 cluster2。&lt;/p>
&lt;p>使用&lt;/p>
&lt;pre>&lt;code>{{ domain_definition | json_query('domain.server[*].name') }}
&lt;/code>&lt;/pre>
&lt;p>可以获取到 server11、server12、server21 和 server22。&lt;/p>
&lt;p>使用&lt;/p>
&lt;pre>&lt;code>- debug:
var: item
loop: &amp;quot;{{ domain_definition | json_query(server_name_cluster1_query) }}&amp;quot;
vars:
server_name_cluster1_query: &amp;quot;domain.server[?cluster=='cluster1'].port&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>可以迭代 8080 和 8090 两个端口。&lt;/p>
&lt;p>注意上面使用了问号&lt;code>?&lt;/code>，这表示后面的是一个表达式。&lt;/p>
&lt;p>使用&lt;/p>
&lt;pre>&lt;code>&amp;quot;{{domain_definition | json_query('domain.server[?cluster==`cluster2`].{name1: name, port1: port}')}}&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>可得到：&lt;/p>
&lt;pre>&lt;code>[
{
&amp;quot;name1&amp;quot;: &amp;quot;server21&amp;quot;,
&amp;quot;port1&amp;quot;: &amp;quot;9080&amp;quot;
},
{
&amp;quot;name1&amp;quot;: &amp;quot;server22&amp;quot;,
&amp;quot;port1&amp;quot;: &amp;quot;9090&amp;quot;
}
]
&lt;/code>&lt;/pre>
&lt;p>注意上面使用了反引号&lt;code> &lt;/code>而不是单双引号，因为单双引号都被使用过了，再使用就不方便，可读性也差。&lt;/p>
&lt;h3 id="ip-地址筛选">ip 地址筛选&lt;/h3>
&lt;p>Ansible 提供了非常丰富的功能来完成 IP 地址的筛选，用法非常多，绝大多数关于 IP、网络地址类的计算、查询需求都能解决。&lt;/p>
&lt;p>使用它需要先安装 python 的 netaddr 包：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ pip3 install netaddr
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>完整用法参考官方手册：&lt;a href="https://docs.ansible.com/ansible/latest/user_guide/playbooks_filters_ipaddr.html#playbooks-filters-ipaddr">https://docs.ansible.com/ansible/latest/user_guide/playbooks_filters_ipaddr.html#playbooks-filters-ipaddr&lt;/a>。&lt;/p>
&lt;p>下面是我整理的一部分用法。&lt;/p>
&lt;p>检测是否是合理的 IP 地址：&lt;/p>
&lt;pre>&lt;code>{{ myvar | ipaddr }}
&lt;/code>&lt;/pre>
&lt;p>检测是否是合理的 ipv4 地址、ipv6 地址：&lt;/p>
&lt;pre>&lt;code>{{ myvar | ipv4 }}
{{ myvar | ipv6 }}
&lt;/code>&lt;/pre>
&lt;p>从列表中筛选出合理的 IP 地址：&lt;/p>
&lt;pre>&lt;code>test_list = ['192.24.2.1', 'host.fqdn', '::1', '192.168.32.0/24', 'fe80::100/10', True, '']
# {{ test_list | ipaddr }}
['192.24.2.1', '::1', '192.168.32.0/24', 'fe80::100/10']
# {{ test_list | ipv4 }}
['192.24.2.1', '192.168.32.0/24']
# {{ test_list | ipv6 }}
['::1', 'fe80::100/10']
&lt;/code>&lt;/pre>
&lt;p>获取 IP 地址部分：&lt;/p>
&lt;pre>&lt;code>{{ '192.0.2.1/24' | ipaddr('address') }}
{{ ipvar | ipv4('address') }}
{{ ipvar | ipv6('address') }}
&lt;/code>&lt;/pre>
&lt;p>检测或找出公网 IP 和私网 IP：&lt;/p>
&lt;pre>&lt;code># {{ test_list | ipaddr('public') }}
['192.24.2.1']
# {{ test_list | ipaddr('private') }}
['192.168.32.0/24', 'fe80::100/10']
&lt;/code>&lt;/pre>
&lt;h3 id="正则表达式筛选器">正则表达式筛选器&lt;/h3>
&lt;p>Ansible 提供了几个正则类的 Filter，主要有：&lt;/p>
&lt;ul>
&lt;li>&lt;code>regex_search&lt;/code>：普通正则匹配&lt;/li>
&lt;li>&lt;code>regex_findall&lt;/code>：全局匹配&lt;/li>
&lt;li>&lt;code>regex_replace&lt;/code>：正则替换&lt;/li>
&lt;/ul>
&lt;p>例如：&lt;/p>
&lt;pre>&lt;code>{{ 'foobar' | regex_search('(foo)') }}
# 匹配失败时返回空
{{ 'ansible' | regex_search('(foobar)') }}
# 多行模式、忽略大小写的匹配
{{ 'foo\nBAR' | regex_search(&amp;quot;^bar&amp;quot;, multiline=True, ignorecase=True) }}
# 全局匹配
# 每次匹配到的内容将存放在一个列表中
{{ 'DNS servers 8.8.8.8 and 8.8.4.4' | regex_findall('\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b') }}
# 正则替换
# &amp;quot;ansible&amp;quot; 替换为 &amp;quot;able&amp;quot;
{{ 'ansible' | regex_replace('^a.*i(.*)$', 'a\\1') }}
# &amp;quot;foobar&amp;quot; 替换为 &amp;quot;bar&amp;quot;
{{ 'foobar' | regex_replace('^f.*o(.*)$', '\\1') }}
# 使用命名捕获，&amp;quot;localhost:80&amp;quot; 替换为 &amp;quot;localhost, 80&amp;quot;
{{ 'localhost:80' | regex_replace('^(?P&amp;lt;host&amp;gt;.+):(?P&amp;lt;port&amp;gt;\\d+)$', '\\g&amp;lt;host&amp;gt;, \\g&amp;lt;port&amp;gt;') }}
# &amp;quot;localhost:80&amp;quot; 替换为 &amp;quot;localhost&amp;quot;
{{ 'localhost:80' | regex_replace(':80') }}
&lt;/code>&lt;/pre>
&lt;h3 id="url-处理筛选器">URL 处理筛选器&lt;/h3>
&lt;p>&lt;code>urlsplit&lt;/code>筛选器可以从一个 URL 中提取 fragment、hostname、netloc、password、path、port、query、scheme、以及 username。如果不传递任何参数，则直接返回一个包含了所有字段的字典。&lt;/p>
&lt;pre>&lt;code>{{ &amp;quot;http://user:passwd@www.acme.com:9000/dir/index.html?query=term#fragment&amp;quot; | urlsplit('hostname') }}
# =&amp;gt; 'www.acme.com'
{{ &amp;quot;http://user:password@www.acme.com:9000/dir/index.html?query=term#fragment&amp;quot; | urlsplit('netloc') }}
# =&amp;gt; 'user:passwd@www.acme.com:9000'
{{ &amp;quot;http://user:passwd@www.acme.com:9000/dir/index.html?query=term#fragment&amp;quot; | urlsplit('username') }}
# =&amp;gt; 'user'
{{ &amp;quot;http://user:passwd@www.acme.com:9000/dir/index.html?query=term#fragment&amp;quot; | urlsplit('password') }}
# =&amp;gt; 'passwd'
{{ &amp;quot;http://user:passwd@www.acme.com:9000/dir/index.html?query=term#fragment&amp;quot; | urlsplit('path') }}
# =&amp;gt; '/dir/index.html'
{{ &amp;quot;http://user:passwd@www.acme.com:9000/dir/index.html?query=term#fragment&amp;quot; | urlsplit('port') }}
# =&amp;gt; '9000'
{{ &amp;quot;http://user:passwd@www.acme.com:9000/dir/index.html?query=term#fragment&amp;quot; | urlsplit('scheme') }}
# =&amp;gt; 'http'
{{ &amp;quot;http://user:passwd@www.acme.com:9000/dir/index.html?query=term#fragment&amp;quot; | urlsplit('query') }}
# =&amp;gt; 'query=term'
{{ &amp;quot;http://user:passwd@www.acme.com:9000/dir/index.html?query=term#fragment&amp;quot; | urlsplit('fragment') }}
# =&amp;gt; 'fragment'
{{ &amp;quot;http://user:passwd@www.acme.com:9000/dir/index.html?query=term#fragment&amp;quot; | urlsplit }}
# =&amp;gt;
# {
# &amp;quot;fragment&amp;quot;: &amp;quot;fragment&amp;quot;,
# &amp;quot;hostname&amp;quot;: &amp;quot;www.acme.com&amp;quot;,
# &amp;quot;netloc&amp;quot;: &amp;quot;user:password@www.acme.com:9000&amp;quot;,
# &amp;quot;password&amp;quot;: &amp;quot;passwd&amp;quot;,
# &amp;quot;path&amp;quot;: &amp;quot;/dir/index.html&amp;quot;,
# &amp;quot;port&amp;quot;: 9000,
# &amp;quot;query&amp;quot;: &amp;quot;query=term&amp;quot;,
# &amp;quot;scheme&amp;quot;: &amp;quot;http&amp;quot;,
# &amp;quot;username&amp;quot;: &amp;quot;user&amp;quot;
# }
&lt;/code>&lt;/pre>
&lt;h3 id="编写注释的筛选器">编写注释的筛选器&lt;/h3>
&lt;p>在模板渲染中，有可能需要在目标文件中生成一些注释信息。Ansible 提供了&lt;code>comment&lt;/code>筛选器来完成该任务。&lt;/p>
&lt;pre>&lt;code>{{ &amp;quot;Plain style (default)&amp;quot; | comment }}
&lt;/code>&lt;/pre>
&lt;p>会得到：&lt;/p>
&lt;pre>&lt;code>#
# Plain style (default)
#
&lt;/code>&lt;/pre>
&lt;p>可以自定义注释语法：&lt;/p>
&lt;pre>&lt;code>{{ &amp;quot;My Special Case&amp;quot; | comment(decoration=&amp;quot;! &amp;quot;) }}
&lt;/code>&lt;/pre>
&lt;p>得到：&lt;/p>
&lt;pre>&lt;code>!
! My Special Case
!
&lt;/code>&lt;/pre>
&lt;p>extract 结合 map 使用时，可以根据索引 (列表索引或字典索引) 从列表或字典中提取对应元素的值。&lt;/p>
&lt;pre>&lt;code>{{ [0,2] | map('extract', ['x','y','z']) | list }}
{{ ['x','y'] | map('extract', {'x': 42, 'y': 31}) | list }}
&lt;/code>&lt;/pre>
&lt;p>得到：&lt;/p>
&lt;pre>&lt;code>['x', 'z']
[42, 31]
&lt;/code>&lt;/pre>
&lt;h3 id="dict-合并">dict 合并&lt;/h3>
&lt;p>combine 筛选器可以将多个 dict 中同名 key 进行合并 (以覆盖的方式合并)。&lt;/p>
&lt;pre>&lt;code>{{ {'a':1, 'b':2} | combine({'b':3}) }}
&lt;/code>&lt;/pre>
&lt;p>得到：&lt;/p>
&lt;pre>&lt;code>{'a':1, 'b':3}
&lt;/code>&lt;/pre>
&lt;p>使用&lt;code>recursive=True&lt;/code>参数，可以递归到嵌套 dict 中进行覆盖合并：&lt;/p>
&lt;pre>&lt;code>{{ {'a':{'foo':1, 'bar':2}, 'b':2} | combine({'a':{'bar':3, 'baz':4}}, recursive=True) }}
&lt;/code>&lt;/pre>
&lt;p>将得到：&lt;/p>
&lt;pre>&lt;code>{'a':{'foo':1, 'bar':3, 'baz':4}, 'b':2}
&lt;/code>&lt;/pre>
&lt;p>可以合并多个 dict，如下：&lt;/p>
&lt;pre>&lt;code>{{ a | combine(b, c, d) }}
&lt;/code>&lt;/pre>
&lt;p>d 中同名 key 会覆盖 c，c 会覆盖 b，b 会覆盖 a。&lt;/p>
&lt;h3 id="hash-值计算">hash 值计算&lt;/h3>
&lt;p>计算字符串的 sha1：&lt;/p>
&lt;pre>&lt;code>{{ 'test1' | hash('sha1') }}
&lt;/code>&lt;/pre>
&lt;p>计算字符串的 md5：&lt;/p>
&lt;pre>&lt;code>{{ 'test1' | hash('md5') }}
&lt;/code>&lt;/pre>
&lt;p>计算字符串的 checksum，默认即&lt;code>hash('sha1')&lt;/code>值：&lt;/p>
&lt;pre>&lt;code>{{ 'test2' | checksum }}
&lt;/code>&lt;/pre>
&lt;p>计算 sha512 密码 (随机 salt):&lt;/p>
&lt;pre>&lt;code>{{ 'passwd' | password_hash('sha512') }}
&lt;/code>&lt;/pre>
&lt;p>计算 sha256 密码 (指定 salt):&lt;/p>
&lt;pre>&lt;code>{{ passwd' | password_hash('sha256', 'mysalt') }}
&lt;/code>&lt;/pre>
&lt;p>同一主机生成的密码相同：&lt;/p>
&lt;pre>&lt;code>{{ 'passwd' | password_hash('sha512', 65534 | random(seed=inventory_hostname) | string) }}
&lt;/code>&lt;/pre>
&lt;p>根据字符串生成 UUID 值：&lt;/p>
&lt;pre>&lt;code>{{ hostname | to_uuid }}
&lt;/code>&lt;/pre>
&lt;h3 id="base64-编解码筛选器">base64 编解码筛选器&lt;/h3>
&lt;pre>&lt;code>{{ encoded_str | b64decode }}
{{ decoded_str | b64encode }}
&lt;/code>&lt;/pre>
&lt;p>例如，Ansible 有一个&lt;code>slurp&lt;/code>模块，它的作用类似于 fetch 模块，它可以从目标节点中读取指定文件的内容，然后以 base64 方式编码返回，所以要获取其原始内容，需要 base64 解码。&lt;/p>
&lt;p>例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">slurp&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">src&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/var/run/sshd.pid&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">register&lt;/span>: &lt;span style="color:#ae81ff">sshd_pid&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">debug&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">msg&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;base64_pid: {{sshd_pid.content}}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">debug&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">msg&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;sshd_pid: {{sshd_pid.content|b64decode}}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>结果：&lt;/p>
&lt;pre>&lt;code>TASK [slurp] ***************
ok: [localhost]
TASK [debug] ******************
ok: [localhost] =&amp;gt; {
&amp;quot;msg&amp;quot;: &amp;quot;base64_pid: MTE4OAo=&amp;quot;
}
TASK [debug] *****************
ok: [localhost] =&amp;gt; {
&amp;quot;msg&amp;quot;: &amp;quot;base64_pid: 1188\n&amp;quot;
}
&lt;/code>&lt;/pre>
&lt;h3 id="文件名处理">文件名处理&lt;/h3>
&lt;ul>
&lt;li>&lt;code>basename&lt;/code>：获取字符串中的文件名部分&lt;/li>
&lt;li>&lt;code>dirname&lt;/code>：获取字符串中目录名部分&lt;/li>
&lt;li>&lt;code>expanduser&lt;/code>：扩展家目录，即将&lt;code>~&lt;/code>替换为家目录&lt;/li>
&lt;li>&lt;code>realpath&lt;/code>：获取软链接的原始路径&lt;/li>
&lt;li>&lt;code>splitext&lt;/code>：扩展名分离&lt;/li>
&lt;/ul>
&lt;p>对于 splitext 筛选器，例如：&lt;/p>
&lt;pre>&lt;code>{{&amp;quot;nginx.conf&amp;quot;|splitext}}
#=&amp;gt; (&amp;quot;nginx&amp;quot;,&amp;quot;.conf&amp;quot;)
{{'/etc/my.cnf'|splitext}}
#=&amp;gt; (&amp;quot;/etc/my&amp;quot;,&amp;quot;.cnf&amp;quot;)
&lt;/code>&lt;/pre>
&lt;h3 id="日期时间类处理">日期时间类处理&lt;/h3>
&lt;p>相对来说，Ansible 中处理日期时间的机会是比较少的。但是 Ansible 也提供了比较方便的处理日期时间的方式。&lt;/p>
&lt;p>使用&lt;code>strftime&lt;/code>将当前时间或给定时间 (只能以 epoch 数值指定) 按照给定的格式输出：&lt;/p>
&lt;pre>&lt;code># 将当前时间点以year-month-day hour:min:sec格式输出
{{ '%Y-%m-%d %H:%M:%S' | strftime }}
# 将指定的时间按照指定格式输出
{{ '%Y-%m-%d' | strftime(0) }} # =&amp;gt; 1970-01-01
{{ '%Y-%m-%d' | strftime(1441357287) }} # =&amp;gt; 2015-09-04
&lt;/code>&lt;/pre>
&lt;p>使用&lt;code>to_datetime&lt;/code>可以将日期时间字符串转换为 Python 日期时间对象，既然得到了对象，就可以进行时间比较、时间运算等操作。&lt;/p>
&lt;pre>&lt;code># 计算时间差(单位秒)
# 默认解析的日期时间字符串格式为%Y-%m-%d %H:%M:%S，但可以自定义格式
{{ ((&amp;quot;2016-08-14 20:00:12&amp;quot; | to_datetime) - (&amp;quot;2015-12-25&amp;quot; | to_datetime(&amp;quot;%Y-%m-%d&amp;quot;))).total_seconds() }}
#=&amp;gt;20203212.0
# 计算相差多少天。只考虑天数，不考虑时分秒等
{{ ((&amp;quot;2016-08-14 20:00:12&amp;quot; | to_datetime) - (&amp;quot;2015-12-25&amp;quot; | to_datetime('%Y-%m-%d'))).days }}
&lt;/code>&lt;/pre>
&lt;h3 id="human_to_bytes-和-human_readable">human_to_bytes 和 human_readable&lt;/h3>
&lt;p>&lt;code>human_readable&lt;/code>将数值转换为人类可读的数据量大小单位：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>{{&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#ae81ff">|human_readable}}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{{&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#ae81ff">|human_readable(isbits=True)}}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{{&lt;span style="color:#ae81ff">10240&lt;/span>&lt;span style="color:#ae81ff">|human_readable}}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{{&lt;span style="color:#ae81ff">102400000&lt;/span>&lt;span style="color:#ae81ff">|human_readable}}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{{&lt;span style="color:#ae81ff">102400000&lt;/span>&lt;span style="color:#ae81ff">|human_readable(unit=&amp;#34;G&amp;#34;)}}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{{&lt;span style="color:#ae81ff">102400000&lt;/span>&lt;span style="color:#ae81ff">|human_readable(isbits=True, unit=&amp;#34;G&amp;#34;)}}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>human_to_bytes&lt;/code>将人类可读的单位转换为数值：&lt;/p>
&lt;pre>&lt;code>{{'0'|human_to_bytes}} #= 0
{{'0.1'|human_to_bytes}} #= 0
{{'0.9'|human_to_bytes}} #= 1
{{'1'|human_to_bytes}} #= 1
{{'10.00 KB'|human_to_bytes}} #= 10240
{{ '11 MB'|human_to_bytes}} #= 11534336
{{ '1.1 GB'|human_to_bytes}} #= 1181116006
{{'10.00 Kb'|human_to_bytes(isbits=True)}} #= 10240
&lt;/code>&lt;/pre>
&lt;h3 id="其它筛选器">其它筛选器&lt;/h3>
&lt;p>&lt;code>quote&lt;/code>为字符串加引号，比如方便编写 shell 模块的命令：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">shell&lt;/span>: &lt;span style="color:#ae81ff">echo {{ string_value | quote }}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>ternary&lt;/code>根据 true、false 来决定返回哪个值：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{{ &lt;span style="color:#ae81ff">(gender == &amp;#34;male&amp;#34;) | ternary(&amp;#39;Mr&amp;#39;,&amp;#39;Ms&amp;#39;) }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{{ &lt;span style="color:#ae81ff">enabled | ternary(&amp;#39;no shutdown&amp;#39;, &amp;#39;shutdown&amp;#39;, omit) }}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>product&lt;/code>生成笛卡尔积：&lt;/p>
&lt;pre>&lt;code>{{['foo', 'bar'] | product(['com'])|list}}
#=&amp;gt;[[&amp;quot;foo&amp;quot;,&amp;quot;com&amp;quot;], [&amp;quot;bar&amp;quot;,&amp;quot;com&amp;quot;]]
&lt;/code>&lt;/pre>
&lt;h1 id="使用示例">使用示例&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">将foo.j2文件输出到指定主机的/etc/file.con&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">template&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">src&lt;/span>: &lt;span style="color:#ae81ff">/mytemplates/foo.j2&lt;/span> &lt;span style="color:#75715e">#指定源文件，是一个用jinja2语言写的文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">dest&lt;/span>: &lt;span style="color:#ae81ff">/etc/file.conf&lt;/span> &lt;span style="color:#75715e">#指定要生成的目的文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">mode&lt;/span>: &lt;span style="color:#ae81ff">0744&lt;/span> &lt;span style="color:#75715e">#必须添加一个前导零，以便Ansible的YAML解析器知道它是一个八进制数（例如0644或01777）或将其引号（例如&amp;#39;644&amp;#39;或&amp;#39;1777&amp;#39;），以便Ansible接收字符串并可以从字符串进行自己的转换成数字。&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>模板文件示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>% &lt;span style="color:#66d9ef">if&lt;/span> docker.registryMirrors is defined %&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#75715e">#如果docker.registryMirrors变量存在，则执行最后一行之前的语句&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;registry-mirrors&amp;#34;&lt;/span>: &lt;span style="color:#f92672">[{&lt;/span>% &lt;span style="color:#66d9ef">for&lt;/span> mirror in docker.registryMirrors %&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#75715e">#输出 &amp;#34;registry-mirrors&amp;#34;: 后执行for循环，将docker.registryMirrors变量的多个值逐一传递给mirror变量，直到docker.registryMirros变量里的值全部引用完成&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;{{ mirror}}&amp;#34;&lt;/span>&lt;span style="color:#f92672">{&lt;/span>% &lt;span style="color:#66d9ef">if&lt;/span> not loop.last %&lt;span style="color:#f92672">}&lt;/span>,&lt;span style="color:#f92672">{&lt;/span>% endif %&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#75715e">#输出 mirror 变量的值。如果循环没有结束，则输出一个逗号&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">{&lt;/span>%- endfor %&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#75715e">#结束for循环&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>% endif %&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#75715e">#结束if结构&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>输出结果示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;registry-mirrors&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;https://ac1rmo5p.mirror.aliyuncs.com&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;https://123.123.123&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="完全自定义的-nginx-虚拟主机配置">完全自定义的 nginx 虚拟主机配置&lt;/h2>
&lt;p>在生产中，一个开发不太完善的系统可能时不时就要去 nginx 虚拟主机中添加一个 location 配置段落，如果有多个 nginx 节点要配置，无疑这是一件让人悲伤的事情。&lt;/p>
&lt;p>值得庆幸，Ansible 通过 Jinja2 模板可以很容易地解决这个看上去复杂的事情。&lt;/p>
&lt;p>首先提供相关的变量文件&lt;code>vhost_vars.yml&lt;/code>，内容如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">servers&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">server_name&lt;/span>: &lt;span style="color:#ae81ff">www.abc.com&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">listen&lt;/span>: &lt;span style="color:#ae81ff">80&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">locations&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">match_method&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uri&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">root&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/usr/share/nginx/html/abc/&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">index&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;index.html index.htm&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">gzip_types&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">css&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">js&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">plain&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">match_method&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;=&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uri&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/blogs&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">root&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/usr/share/nginx/html/abc/blogs/&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">index&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;index.html index.htm&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">match_method&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;~&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uri&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;\\.php$&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">fastcgi_pass&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;127.0.0.1:9000&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">fastcgi_index&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;index.php&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">fastcgi_param&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;SCRIPT_FILENAME /usr/share/www/php$fastcgi_script_name&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">include&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;fastcgi_params&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">server_name&lt;/span>: &lt;span style="color:#ae81ff">www.def.com&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">listen&lt;/span>: &lt;span style="color:#ae81ff">8080&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">locations&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">match_method&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uri&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">root&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/usr/share/nginx/html/def/&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">index&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;index.html index.htm&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">match_method&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;~&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uri&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/imgs/.*\\.(png|jpg|jpeg|gif)$&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">root&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/usr/share/nginx/html/def/imgs&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">index&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;index.html index.htm&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>从上面提供的变量文件来看，应该能看出来它的目的是为了能够自动生成一个或多个 server 段，而且允许随意增删改每个 server 段中的 location 及其它指令。这样一来，编写 nginx 虚拟主机配置的任务就变成了编写这个变量文件。&lt;/p>
&lt;p>需注意，每个 location 段有两个变量名&lt;code>match_method&lt;/code>和&lt;code>uri&lt;/code>，作用是生成 nginx location 配置项的前一部分，即&lt;code>location METHOD URI {}&lt;/code>。除这两个变量名外，剩余的变量名都会直接当作 nginx 配置指令渲染到配置文件中，所以它们都需和 nginx 指令名相同，比如 index 变量名渲染后会得到 nginx 的 index 指令。&lt;/p>
&lt;p>剩下的就是写一个 Jinja2 模板文件，模板中 Jinja2 语句块标签部分我没有使用缩进，这样比较容易控制格式。文件内容如下：&lt;/p>
&lt;pre>&lt;code>{# 负责渲染每个指令 #}
{% macro config(key,value) %}
{% if (value is sequence) and (value is not string) and (value is not mapping) %}
{# 如果指令是列表 #}
{% for item in value -%}
{# 如生成的结果是：gzip_types css js plain; #}
{{ key ~ ' ' ~ item if loop.first else item}}{{' ' if not loop.last else ';'}}
{%- endfor %}
{% else %}
{# 如果指令不是列表 #}
{{key}} {{value}};
{% endif %}
{% endmacro %}
{# 负责渲染location指令 #}
{% macro location(d) %}
location {{d.match_method}} {{d.uri}} {
{% for item in d|dict2items if item.key != &amp;quot;match_method&amp;quot; and item.key != &amp;quot;uri&amp;quot; %}
{{ config(item.key, item.value) }}
{%- endfor %}
}
{% endmacro %}
{% for server in servers %}
server {
{% for item in server|dict2items %}
{# 非location指令部分 #}
{% if item.key != &amp;quot;locations&amp;quot; %}
{{ config(item.key,item.value) }}
{%- else %}
{# 各个location指令部分 #}
{% for l in item.value|default([],true) %}
{{ location(l) }}
{% endfor %}
{% endif %}
{%- endfor %}
}
{% endfor %}
&lt;/code>&lt;/pre>
&lt;p>然后使用 template 模块去渲染即可：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">hosts&lt;/span>: &lt;span style="color:#ae81ff">localhost&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">gather_facts&lt;/span>: &lt;span style="color:#66d9ef">no&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">vars_files&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">vhost_vars.yml&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">tasks&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">template&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">src&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;vhost.conf.j2&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">dest&lt;/span>: &lt;span style="color:#ae81ff">/tmp/vhost.conf&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>渲染得到的结果：&lt;/p>
&lt;pre>&lt;code>server {
server_name www.abc.com;
listen 80;
location / {
root /usr/share/nginx/html/abc/;
index index.html index.htm;
gzip_types css js plain; }
location = /blogs {
root /usr/share/nginx/html/abc/blogs/;
index index.html index.htm;
}
location ~ \.php$ {
fastcgi_pass 127.0.0.1:9000;
fastcgi_index index.php;
fastcgi_param SCRIPT_FILENAME /usr/share/www/php$fastcgi_script_name;
include fastcgi_params;
}
}
server {
server_name www.def.com;
listen 8080;
location / {
root /usr/share/nginx/html/def/;
index index.html index.htm;
}
location ~ /imgs/.*\.(png|jpg|jpeg|gif)$ {
root /usr/share/nginx/html/def/imgs;
index index.html index.htm;
}
}
&lt;/code>&lt;/pre></description></item><item><title>Docs: Variables(变量)</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/ansible/playbook/variables%E5%8F%98%E9%87%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/ansible/playbook/variables%E5%8F%98%E9%87%8F/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/user_guide/playbooks_variables.html">官方文档，用户指南-目录-使用变量&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="变量基本的定义与引用方式">变量基本的定义与引用方式&lt;/h1>
&lt;p>变量名应为字母、数字、下划线。并且始终应该以字母开头。&lt;/p>
&lt;p>基础的定义方式是在一个 play 中使用 vars 关键字定义变量，示例如下&lt;/p>
&lt;pre>&lt;code>- host: webservers
vars:
http_port: 80 # 定义一个名为http_port的变量，值为80
tasks:
- debug
&lt;/code>&lt;/pre>
&lt;p>Note: vars 关键字可以用在 host 环境中，也可以用在 tasks 环境中，用在 tasks 环境时，则变量仅对当前任务生效&lt;/p>
&lt;p>下面是一个在角色中定义字典类型变量的样例：&lt;/p>
&lt;pre>&lt;code>~]# cat roles/test/defaults/main.yml
docker:
version: 18.06.2
dataDir: /var/lib/docker
registryMirrors:
- https://ac1rmo5p.mirror.aliyuncs.com
execOpts:
- 'native.cgroupdriver=systemd'
insecureRegistries:
- 100.64.2.52:9999
- 100.64.1.31:9999
&lt;/code>&lt;/pre>
&lt;h3 id="变量的引用方式">变量的引用方式&lt;/h3>
&lt;p>一般情况使用 &lt;code>{{ VarName }}&lt;/code> 来引用变量，特殊情况不用加 &lt;code>{{ }}&lt;/code> 而可以直接引用，比如在某些控制结构(比如 when)的语句中。&lt;/p>
&lt;p>变量可以通过两种方式引用字典内特定字段的变量&lt;/p>
&lt;ol>
&lt;li>使用方括号 [] 进行引用
&lt;ol>
&lt;li>docker[&amp;lsquo;registryMirrors&amp;rsquo;] 变量的值为&lt;a href="https://ac1rmo5p.mirror.aliyuncs.com">https://ac1rmo5p.mirror.aliyuncs.com&lt;/a>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>使用点号 . 进行引用
&lt;ol>
&lt;li>docker.registryMirrors 变量的值为&lt;a href="https://ac1rmo5p.mirror.aliyuncs.com">https://ac1rmo5p.mirror.aliyuncs.com&lt;/a>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>Note：如果使用 点号 引用变量可能会引起问题，因为会与 python 字典的属性和方法冲突。所以，尽量使用方括号来引用变量&lt;/p></description></item><item><title>Docs: 错误处理</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/ansible/playbook/%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/ansible/playbook/%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.ansible.com/ansible/latest/user_guide/playbooks_error_handling.html">官方文档，用户指南-在 playbook 中的错误处理&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="忽略失败的任务ignore_errors">忽略失败的任务(ignore_errors)&lt;/h1>
&lt;p>默认情况下，当任意目标机器上的任务结果失败时，Ansible 都会停止继续执行，我们可以通过 &lt;code>ignore_errors&lt;/code> 关键字忽略错误，以便继续执行后续任务。
ignore_errors 指令仅在任务能够运行并返回“失败”值时起作用。它不会让 Ansible 忽略未定义的变量错误、连接失败、执行问题（例如，缺少包）或语法错误。&lt;/p>
&lt;h1 id="改变任务状态failed_when-与-changed_when">改变任务状态(failed_when 与 changed_when)&lt;/h1>
&lt;p>Ansible 可以通过特定条件定义任务的执行状态，通过对 &lt;code>failed_when&lt;/code>、&lt;code>changed_when&lt;/code> 关键字指定的条件进行判断，用以&lt;strong>定义&lt;/strong> failed、changed、ok 等&lt;strong>任务执行状态意味着什么&lt;/strong>。
failed_when&lt;/p>
&lt;ul>
&lt;li>若结果为真，则任务执行结果变为 &lt;code>fatal&lt;/code>&lt;/li>
&lt;li>若结果为假，则任务执行结果变为 &lt;code>changed&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>changed_when&lt;/p>
&lt;ul>
&lt;li>若结果为真，则任务执行结果变为 &lt;code>changed&lt;/code>&lt;/li>
&lt;li>若结果为假，则任务执行结果变为 &lt;code>ok&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>比如，我们常用 shell 模块执行一些命令，而 shell 模块的任务状态总是 changed 的~~如果一个 shell 命令执行后，没有变化，我们想让他将任务状态设为 ok，就可以通过 changed_when 功能，比如现在有如下两个任务&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Changed_when 判断的结果为真时，任务状态为 changed&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">shell&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">cmd&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;docker start changed_when&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">register&lt;/span>: &lt;span style="color:#ae81ff">is_started&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">changed_when&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;#39;changed_when&amp;#39; in is_started[&amp;#39;stdout&amp;#39;]&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ignore_errors&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Changed_when 判断的结果为假时，任务状态为 ok&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">shell&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">cmd&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;docker start changed_when&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">register&lt;/span>: &lt;span style="color:#ae81ff">is_started&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">changed_when&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;#39;changed_when&amp;#39; in is_started[&amp;#39;stderr&amp;#39;]&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ignore_errors&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Failed_when 判断的结果为真时，任务状态为 failed&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">shell&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">cmd&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;docker start failed_when&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">register&lt;/span>: &lt;span style="color:#ae81ff">is_started&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">failed_when&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;#39;failed_when&amp;#39; in is_started[&amp;#39;stdout&amp;#39;]&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ignore_errors&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Failed_when 判断的结果为假时，任务状态为 changed&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">shell&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">cmd&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;docker start failed_when&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">register&lt;/span>: &lt;span style="color:#ae81ff">is_started&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">failed_when&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;#39;failed_when&amp;#39; in is_started[&amp;#39;stderr&amp;#39;]&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ignore_errors&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>假设目标机器上已经有一个已经停止的，名为 test 的容器，则执行结果如下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># ansible-playbook -i inventory/test.yaml -e @inventory/test_password.yaml playbooks/error_handing.yaml&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PLAY &lt;span style="color:#f92672">[&lt;/span>test&lt;span style="color:#f92672">]&lt;/span> ****************************************************************************************************************************************
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TASK &lt;span style="color:#f92672">[&lt;/span>error_handing : Changed_when 判断的结果为真时，任务状态为 changed&lt;span style="color:#f92672">]&lt;/span> *****************************************************************************************
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>changed: &lt;span style="color:#f92672">[&lt;/span>hw-cloud-xngy-jump-server-linux-2&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TASK &lt;span style="color:#f92672">[&lt;/span>error_handing : Changed_when 判断的结果为假时，任务状态为 ok&lt;span style="color:#f92672">]&lt;/span> **********************************************************************************************
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ok: &lt;span style="color:#f92672">[&lt;/span>hw-cloud-xngy-jump-server-linux-2&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TASK &lt;span style="color:#f92672">[&lt;/span>error_handing : Failed_when 判断的结果为真时，任务状态为 failed&lt;span style="color:#f92672">]&lt;/span> *******************************************************************************************
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fatal: &lt;span style="color:#f92672">[&lt;/span>hw-cloud-xngy-jump-server-linux-2&lt;span style="color:#f92672">]&lt;/span>: FAILED! &lt;span style="color:#f92672">=&lt;/span>&amp;gt; &lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;changed&amp;#34;&lt;/span>: true, &lt;span style="color:#e6db74">&amp;#34;cmd&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;docker start failed_when&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;delta&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;0:00:00.253780&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;end&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2022-
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">...ignoring
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">TASK [error_handing : Failed_when 判断的结果为假时，任务状态为 changed] ******************************************************************************************
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">changed: [hw-cloud-xngy-jump-server-linux-2]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">PLAY RECAP *****************************************************************************************************************************************
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">hw-cloud-xngy-jump-server-linux-2 : ok=4 changed=3 unreachable=0 failed=0 skipped=0 rescued=0 ignored=1
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>由于启动一个容器，如果能正常启动，将会返回容器名，所以我们通过判断命令行的输出内容中是否包含 test 字符串来判断容器是否启动了&lt;/p>
&lt;ul>
&lt;li>若容器还没启动，则命令行会返回字符串，那么 changed_when 的判断结果为真，说明产生了变化，则将任务状态设置为 changed；&lt;/li>
&lt;li>若容器已经启动，则命令行不会返回任何字符串，那么 changed_when 的判断结果就为假，说明没有任何变化，此时任务状态则设置为 ok。&lt;/li>
&lt;/ul>
&lt;p>failed_when 的效果同理
注意：failed_when 与 changed_when 的判断逻辑有时候很反直觉，使用时一定要万分注意&lt;/p></description></item><item><title>Docs: 应用发布</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/%E5%BA%94%E7%94%A8%E5%8F%91%E5%B8%83/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/%E5%BA%94%E7%94%A8%E5%8F%91%E5%B8%83/</guid><description>
&lt;h1 id="heading">&lt;/h1>
&lt;p>关于蓝绿发布、金丝雀发布、和 A/B 测试&lt;/p>
&lt;h1 id="蓝绿发布">蓝绿发布&lt;/h1>
&lt;p>蓝绿部署中，一共有两套系统：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>一套是正在提供服务系统，标记为“绿色”；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>另一套是准备发布的系统，标记为“蓝色”。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>两套系统都是功能完善的，并且正在运行的系统，只是系统版本和对外服务情况不同。&lt;/p>
&lt;p>最初，没有任何系统，没有蓝绿之分。 然后，第一套系统开发完成，直接上线，这个过程只有一个系统，也没有蓝绿之分。 后来，开发了新版本，要用新版本替换线上的旧版本，在线上的系统之外，搭建了一个使用新版本代码的全新系统。&lt;/p>
&lt;p>这时候，一共有两套系统在运行，正在对外提供服务的老系统是绿色系统，新部署的系统是蓝色系统。 蓝色系统不对外提供服务，用来做啥？ 用来做发布前测试，测试过程中发现任何问题，可以直接在蓝色系统上修改，不干扰用户正在使用的系统。（注意，两套系统没有耦合的时候才能百分百保证不干扰） 蓝色系统经过反复的测试、修改、验证，确定达到上线标准之后，直接将用户切换到蓝色系统： 切换后的一段时间内，依旧是蓝绿两套系统并存，但是用户访问的已经是蓝色系统。这段时间内观察蓝色系统（新系统）工作状态，如果出现问题，直接切换回绿色系统。 当确信对外提供服务的蓝色系统工作正常，不对外提供服务的绿色系统已经不再需要的时候，蓝色系统正式成为对外提供服务系统，成为新的绿色系统。 原先的绿色系统可以销毁，将资源释放出来，用于部署下一个蓝色系统。 蓝绿部署只是上线策略中的一种，它不是可以应对所有情况的万能方案。 蓝绿部署能够简单快捷实施的前提假设是目标系统是非常内聚的，如果目标系统相当复杂，那么如何切换、两套系统的数据是否需要以及如何同步等，都需要仔细考虑。&lt;/p>
&lt;h1 id="金丝雀发布">金丝雀发布&lt;/h1>
&lt;p>金丝雀发布（Canary）也是一种发布策略，和国内常说的灰度发布是同一类策略。&lt;/p>
&lt;p>蓝绿部署是准备两套系统，在两套系统之间进行切换，金丝雀策略是只有一套系统，逐渐替换这套系统 譬如说，目标系统是一组无状态的 Web 服务器，但是数量非常多，假设有一万台。&lt;/p>
&lt;p>这时候，蓝绿部署就不能用了，因为你不可能申请一万台服务器专门用来部署蓝色系统（在蓝绿部署的定义中，蓝色的系统要能够承接所有访问）。 可以想到的一个方法是： 只准备几台服务器，在上面部署新版本的系统并测试验证。测试通过之后，担心出现意外，还不敢立即更新所有的服务器。 先将线上的一万台服务器中的 10 台更新为最新的系统，然后观察验证。确认没有异常之后，再将剩余的所有服务器更新。 这个方法就是金丝雀发布。 实际操作中还可以做更多控制，譬如说，给最初更新的 10 台服务器设置较低的权重、控制发送给这 10 台服务器的请求数，然后逐渐提高权重、增加请求数。 这个控制叫做“流量切分”，既可以用于金丝雀发布，也可以用于后面的 A/B 测试。 蓝绿部署和金丝雀发布是两种发布策略，都不是万能的。有时候两者都可以使用，有时候只能用其中一种。&lt;/p>
&lt;h1 id="ab-测试">A/B 测试&lt;/h1>
&lt;p>首先需要明确的是，A/B 测试和蓝绿部署以及金丝雀，完全是两回事。 蓝绿部署和金丝雀是发布策略，目标是确保新上线的系统稳定，关注的是新系统的 BUG、隐患。 A/B 测试是效果测试，同一时间有多个版本的服务对外服务，这些服务都是经过足够测试，达到了上线标准的服务，有差异但是没有新旧之分（它们上线时可能采用了蓝绿部署的方式）。 A/B 测试关注的是不同版本的服务的实际效果，譬如说转化率、订单情况等。 A/B 测试时，线上同时运行多个版本的服务，这些服务通常会有一些体验上的差异，譬如说页面样式、颜色、操作流程不同。相关人员通过分析各个版本服务的实际效果，选出效果最好的版本。 在 A/B 测试中，需要能够控制流量的分配，譬如说，为 A 版本分配 10%的流量，为 B 版本分配 10%的流量，为 C 版本分配 80%的流量。&lt;/p></description></item><item><title>Docs: 自动化运维</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4/</guid><description>
&lt;p>常见运维工具介绍：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>OS provisioning：PXE，Cobbler(repository,distritution,profile)&lt;/p>
&lt;ol>
&lt;li>
&lt;p>PXE:dhcp,tftp,http,ftp&lt;/p>
&lt;/li>
&lt;li>
&lt;p>dnsmasq:dhcp,dns&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>OS Config:系统配置&lt;/p>
&lt;ol>
&lt;li>puppet,salstack,func&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>Task Excute:任务执行&lt;/p>
&lt;ol>
&lt;li>fabric,func,saltstack&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>Deployment:部署&lt;/p>
&lt;ol>
&lt;li>fabric&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h1 id="自动化运维工具介绍">自动化运维工具介绍&lt;/h1>
&lt;h2 id="cobbler">cobbler&lt;/h2>
&lt;h2 id="ansible">ansible&lt;/h2>
&lt;h2 id="saltstack">saltstack&lt;/h2></description></item></channel></rss>