<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – Ansible 管理</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/ansible/ansible-%E7%AE%A1%E7%90%86/</link><description>Recent content in Ansible 管理 on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/ansible/ansible-%E7%AE%A1%E7%90%86/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Ansible 管理</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/ansible/ansible-%E7%AE%A1%E7%90%86/ansible-%E7%AE%A1%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/ansible/ansible-%E7%AE%A1%E7%90%86/ansible-%E7%AE%A1%E7%90%86/</guid><description>
&lt;h1 id="heading">&lt;/h1>
&lt;h1 id="实际案例">实际案例：&lt;/h1>
&lt;h2 id="批量关闭开启虚拟机">批量关闭/开启虚拟机&lt;/h2>
&lt;pre>&lt;code>- name: 获取虚拟机列表
virt:
command: list_vms
register: info
- name: 循环开启虚拟机
virt:
name: &amp;quot;{{item}}&amp;quot;
command: start
loop: &amp;quot;{{info.list_vms}}&amp;quot;
&lt;/code>&lt;/pre></description></item><item><title>Docs: ansible通过跳板机与目标主机通信</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/ansible/ansible-%E7%AE%A1%E7%90%86/ansible%E9%80%9A%E8%BF%87%E8%B7%B3%E6%9D%BF%E6%9C%BA%E4%B8%8E%E7%9B%AE%E6%A0%87%E4%B8%BB%E6%9C%BA%E9%80%9A%E4%BF%A1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.%E8%BF%90%E7%BB%B4/ansible/ansible-%E7%AE%A1%E7%90%86/ansible%E9%80%9A%E8%BF%87%E8%B7%B3%E6%9D%BF%E6%9C%BA%E4%B8%8E%E7%9B%AE%E6%A0%87%E4%B8%BB%E6%9C%BA%E9%80%9A%E4%BF%A1/</guid><description>
&lt;p>在公司开发中，为了安全起见，生产环境跟开发环境是相互隔离开来的。也就是说在开发环境网络中无法直接 ssh 登录到生产环境的机器， 如果需要登录生产环境的机器，通常会需要借助跳板机，先登录到跳板机，然后通过跳板机登录到生产环境。&lt;/p>
&lt;p>那么，使用 Ansible 时，如何配置，可以直接穿过跳板机呢？&lt;/p>
&lt;p>大致的过程如下面的图示：&lt;/p>
&lt;pre>&lt;code>+-------------+ +----------+ +--------------+
| 开发环境机器A | &amp;lt;---&amp;gt; | 跳板机B | &amp;lt;--&amp;gt; | 生产环境机器B |
+-------------+ +----------+ +--------------+
&lt;/code>&lt;/pre>
&lt;p>我们可以通过 ssh 命令的 ProxyCommand 选项来解决以上问题。&lt;/p>
&lt;p>通过 ProxyCommand 选项，机器 A 能够灵活使用任意代理机制与机器 C 上的 SSH Server 端口建立连接，接着机器 A 上的 SSH Client 再与该连接进行数据交互，从而机器 A 上的 SSH Client 与机器 C 上的 SSH Server 之间建立了与一般直接 SSH 连接不太一样的间接 SSH 连接。&lt;/p>
&lt;p>不过由于间接 SSH 连接的透明性，逻辑上可认为机器 A 上的 SSH Client 与机器 C 上的 SSH Server 建立了直接 SSH 连接。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/wawlgb/1616124930604-fefb5961-13b2-48ca-ad59-0e623b3bdc35.jpeg" alt="">&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/wawlgb/1616124930609-2ca4dea8-3c64-4b8f-9e78-b37dd522fdba.jpeg" alt="">
原理&lt;/p>
&lt;p>ssh 命令自提供的代理机制，在机器 A 上另外单独建立与 B 的 SSH 连接，该 SSH 连接的 B 端侧与机器 C 上的 SSH Server 端口建立连接，该 SSH 连接的 A 端侧与机器 A 上的 SSH Client 建立连接。&lt;/p>
&lt;h1 id="测试环境">测试环境&lt;/h1>
&lt;p>A-本机：192.22.9.23&lt;/p>
&lt;p>B-跳板机：192.22.9.21&lt;/p>
&lt;p>C-目标机：192.22.4.46&lt;/p>
&lt;p>条件：A-&amp;gt;B 的互信&lt;/p>
&lt;h1 id="测试步骤">测试步骤&lt;/h1>
&lt;h2 id="测试-1">测试 1&lt;/h2>
&lt;p>A–&amp;gt;B：root 用户的互信
C：root 的登录信息&lt;/p>
&lt;pre>&lt;code># ansible all -m ping --ssh-common-args='-o ProxyCommand=&amp;quot;ssh -W %h:%p -q root@10.0.13.251&amp;quot;'
192.22.4.46 | SUCCESS =&amp;gt; {
&amp;quot;changed&amp;quot;: false,
&amp;quot;ping&amp;quot;: &amp;quot;pong&amp;quot;
}
&lt;/code>&lt;/pre>
&lt;p>可以成功穿过跳板机。&lt;/p>
&lt;h2 id="测试-2">测试 2&lt;/h2>
&lt;p>A–&amp;gt;B：一般用户（luke）的互信&lt;/p>
&lt;p>C：root 的登录信息&lt;/p>
&lt;pre>&lt;code># ansible all -m ping --ssh-common-args='-o ProxyCommand=&amp;quot;ssh -W %h:%p -q lichenhao@10.0.13.251&amp;quot;'
192.22.4.46 | SUCCESS =&amp;gt; {
&amp;quot;changed&amp;quot;: false,
&amp;quot;ping&amp;quot;: &amp;quot;pong&amp;quot;
}
&lt;/code>&lt;/pre>
&lt;p>跳板机普通用户，访问目标机器的 root 目录&lt;/p>
&lt;pre>&lt;code># ansible all --ssh-common-args='-o ProxyCommand=&amp;quot;ssh -W %h:%p -q lichenhao@10.0.13.251&amp;quot;' -m command -a 'ls /root/'
192.22.4.46 | CHANGED | rc=0 &amp;gt;&amp;gt;
1115.txt
anaconda-ks.cfg
deploytelegraf
deploytelegraf.tar.gz
epic-brook.18.11.20.01.tar.gz
epic-josh-threshold.0.1.26.tar.gz
images.tar.gz
metric.tar.gz
python-httplib2-0.9.2-1.el7.noarch.rpm
restates
sensu-1.6.1-1.el7.x86_64.rpm
sshpass-1.06-2.el7.x86_64.rpm
test1115.txt
tl.txt
&lt;/code>&lt;/pre>
&lt;p>结论&lt;/p>
&lt;p>访问权限取决于目标机器的登录用户。&lt;/p>
&lt;h2 id="测试-3">测试 3&lt;/h2>
&lt;p>A–&amp;gt;B：一般用户（luke）的互信&lt;/p>
&lt;p>C：一般用户（luke）的登录信息&lt;/p>
&lt;pre>&lt;code># ansible all -m ping --ssh-common-args='-o ProxyCommand=&amp;quot;ssh -W %h:%p -q lichenhao@10.0.13.251&amp;quot;'
192.22.4.46 | SUCCESS =&amp;gt; {
&amp;quot;changed&amp;quot;: false,
&amp;quot;ping&amp;quot;: &amp;quot;pong&amp;quot;
}
# ansible all --ssh-common-args='-o ProxyCommand=&amp;quot;ssh -W %h:%p -q lichenhao@10.0.13.251&amp;quot;' -m command -a 'pwd'
192.22.4.46 | CHANGED | rc=0 &amp;gt;&amp;gt;
/home/lichenhao
&lt;/code>&lt;/pre>
&lt;p>跳板机普通用户，目标机普通用户，无法访问 root&lt;/p>
&lt;pre>&lt;code># ansible all --ssh-common-args='-o ProxyCommand=&amp;quot;ssh -W %h:%p -q lichenhao@10.0.13.251&amp;quot;' -m command -a 'ls /root/'
192.22.4.46 | FAILED | rc=2 &amp;gt;&amp;gt;
ls: cannot open directory /root/: Permission deniednon-zero return code
&lt;/code>&lt;/pre>
&lt;p>目标机器的普通用户无法访问 root 权限的路径。&lt;/p>
&lt;h2 id="测试-4">测试 4&lt;/h2>
&lt;p>A–&amp;gt;B：root 用户的互信
C：luke 的登录信息&lt;/p>
&lt;pre>&lt;code># ansible all --ssh-common-args='-o ProxyCommand=&amp;quot;ssh -W %h:%p -q lichenhao@10.0.13.251&amp;quot;' -m command -a 'pwd'
192.22.4.46 | CHANGED | rc=0 &amp;gt;&amp;gt;
/home/luke
&lt;/code>&lt;/pre>
&lt;h1 id="总结">总结&lt;/h1>
&lt;p>1、若要使用跳板机功能，需要本机和跳板机的互信，任一用户的互信都可以。&lt;/p>
&lt;p>2、目标机器的操作权限，取决于目标机器的登录用户信息，与跳板机的登录信息无关。&lt;/p>
&lt;p>3、穿过跳板机，无法保证所有的 Ansible 功能都支持，特别是一些复杂的功能，如 synchronize 模块。后续需要用的模块需要一一测试。&lt;/p></description></item></channel></rss>