<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – Hugo</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/hugo/</link><description>Recent content in Hugo on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/hugo/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: 命令行工具</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/hugo/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/hugo/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://gohugo.io/commands/hugo/">官方文档，命令-hugo&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;code>hugo&lt;/code> 是 Hugo 的命令行工具。&lt;/p>
&lt;p>在网站的根目录下使用 &lt;code>hugo&lt;/code> 命令，可以为网站构建静态文件，并保存到 &lt;code>publish/&lt;/code> 目录中。&lt;/p>
&lt;h2 id="sytnax语法">Sytnax(语法)&lt;/h2>
&lt;p>&lt;strong>hugo [COMMAND] [FLAGS]&lt;/strong>&lt;/p>
&lt;p>FLAGS&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-D, &amp;ndash;buildDrafts&lt;/strong> # 包含标记为 draft 的内容&lt;/li>
&lt;/ul>
&lt;h1 id="hugo-server">hugo server&lt;/h1>
&lt;h2 id="syntax语法">Syntax(语法)&lt;/h2>
&lt;p>&lt;strong>hugo server [FLAGS]&lt;/strong>&lt;/p>
&lt;p>FLAGS&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&amp;ndash;bind STRING&lt;/strong> # 监听地址。&lt;code>默认值: 127.0.0.1&lt;/code>&lt;/li>
&lt;li>&lt;strong>-p, &amp;ndash;port INT&lt;/strong> # 监听端口。&lt;code>默认值: 1313&lt;/code>&lt;/li>
&lt;li>&lt;strong>-w, &amp;ndash;watch&lt;/strong> # 监听文件的改变，文件改变时重新应用，以便结果可以实时显示。&lt;code>默认值: true&lt;/code>&lt;/li>
&lt;li>&lt;strong>&amp;ndash;cacheDir STRING&lt;/strong> # filesystem path to cache directory。&lt;code>默认值: $TMPDIR/hugo_cache/&lt;/code>&lt;/li>
&lt;/ul></description></item><item><title>Docs: 内容管理</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/hugo/%E5%86%85%E5%AE%B9%E7%AE%A1%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/hugo/%E5%86%85%E5%AE%B9%E7%AE%A1%E7%90%86/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://gohugo.io/content-management/">官方文档，内容管理&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>为了让静态站点生成器实现可扩展性和可管理型，我们可以为文章添加 &lt;strong>FrontMatter(前页)&lt;/strong> 和 &lt;strong>Templates(模板)&lt;/strong>。Hugo 基于这种特性，设计时不仅考虑了开发人员，还考虑到了内容管理者和作者。&lt;/p>
&lt;h2 id="页面渲染逻辑">页面渲染逻辑&lt;/h2>
&lt;p>网页中 URL 的生成逻辑&lt;/p>
&lt;ul>
&lt;li>网页中的 URL 将会根据目录名和文件名生成&lt;/li>
&lt;li>目录名、文件名中各种字符、特殊符号变成 URL 之后将会进行一些特殊处理
&lt;ul>
&lt;li>空格在 URL 中为 &lt;code>-&lt;/code> 符号&lt;/li>
&lt;li>字母在 URL 中为小写&lt;/li>
&lt;li>&lt;code>()&lt;/code> 符号被删除&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>比如&lt;/p>
&lt;ul>
&lt;li>content/zh-cn/docs/IT学习笔记/10.云原生/Cloud Native(云原生)/Cloud Native(云原生).md，访问该文件时时，URL 为 &lt;code>http://localhost/docs/it学习笔记/10.云原生/cloud-native云原生/cloud-native云原生/&lt;/code>&lt;/li>
&lt;/ul>
&lt;h1 id="frontmatter前页">FrontMatter(前页)&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://gohugo.io/content-management/front-matter/">官方文档，内容管理-前页&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>在每篇文档的开头，我们可以使用 TOML、YAML、JSON、ORG 这四种格式配置文档的元数据，通过这些元数据，我们可以让 Hugo 或 Hugo 主题提供更强大的功能。&lt;/p>
&lt;p>各种格式使用不同的符号来识别：&lt;/p>
&lt;pre tabindex="0">&lt;code>+++
TOML 格式
+++
---
YAML 格式
---
{JSON 格式}
&lt;/code>&lt;/pre>&lt;h2 id="前页变量">前页变量&lt;/h2>
&lt;p>在 FrontMatter 配置的元数据可以生成 FrontMatter Variables(前页变量)，Hugo 具有如下预定义的前页变量&lt;/p>
&lt;p>&lt;strong>title&lt;/strong> # 文档的标题&lt;/p>
&lt;p>&lt;strong>linktitle&lt;/strong> # 用于创建内容链接；如果设置，Hugo 将会使用 linkTitle 的值作为菜单栏、导航栏中文章的链接名称。 Hugo 还可以通过链接标题对内容列表进行排序。&lt;/p>
&lt;p>&lt;strong>data&lt;/strong> # 分配给此页面的日期时间。这通常是从 front matter 的日期字段中获取的，但这种行为是可配置的。&lt;/p>
&lt;p>&lt;strong>lastmod&lt;/strong> # 上次修改内容的日期&lt;/p></description></item><item><title>Docs: 配置文件详解</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/hugo/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/hugo/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://gohugo.io/getting-started/configuration/">官方文档，入门-配置&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Hugo 支持 toml、yaml、json 格式的配置文件，默认配置文件名为 &lt;strong>config.SUFFIX&lt;/strong>。所有的配置指令都可以写在 config.SUFFIX 文件中。&lt;/p>
&lt;p>我们可以拆分 config 文件，并将其保存在 &lt;code>${ConfigDir}&lt;/code> 目录下(默认为站点根目录下的 &lt;code>config/&lt;/code> 文件夹)。 ConfigDir 下的每个文件名代表配置中的根指令，比如：&lt;/p>
&lt;p>config.toml 文件中有如下指令&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>[&lt;span style="color:#a6e22e">Params&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">foo&lt;/span> = &lt;span style="color:#e6db74">&amp;#39;bar&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>那么拆分到 ConfigDir 目录时，则使用 params.toml 文件，内容为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">foo&lt;/span> = &lt;span style="color:#e6db74">&amp;#39;bar&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>除了 Hugo 本身会用到 config 文件，有些主题也会使用 config 文件，并具有各自可以识别的配置指令。比如 Docsy 主题。&lt;/p>
&lt;h1 id="config-目录结构">config 目录结构&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>├── config
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── _default
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   ├── config.toml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   ├── languages.toml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   ├── menus.en.toml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   ├── menus.zh.toml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   └── params.toml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── production
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   ├── config.toml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   └── params.toml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   └── staging
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│       ├── config.toml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│       └── params.toml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>_default/ 目录是站点的默认配置，可以直接保存单个 config 文件。&lt;/p>
&lt;p>production 与 staging 文件夹用来区分运行时配置，比如使用 &lt;code>hugo --environment staging&lt;/code> 命令时，Hugo 将会使用 &lt;code>config/_default/&lt;/code> 和 &lt;code>config/staging&lt;/code> 这两个下的所有文件，将所有文件合并后生成一个单独的临时 config 文件，作为站点运行时的配置文件。&lt;/p>
&lt;p>这种目录结构，可以帮助我们区分不用环境(比如开发环境、生产环境等)下运行网站所需要使用的配置。&lt;/p>
&lt;blockquote>
&lt;p>Hugo 有个默认值，执行 &lt;code>hugo server&lt;/code> 命令时，是在本地运行网站，所以默认为开发环境，使用 &lt;code>config/development/&lt;/code> 目录；而执行 &lt;code>hugo&lt;/code> 命令时，是要构建静态文件，所以默认为生产环境，使用 &lt;code>config/production&lt;/code> 目录。&lt;/p>
&lt;/blockquote></description></item><item><title>Docs: 主题</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/hugo/%E4%B8%BB%E9%A2%98/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/hugo/%E4%B8%BB%E9%A2%98/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;h2 id="参考">参考：&lt;/h2>
&lt;/blockquote></description></item></channel></rss>