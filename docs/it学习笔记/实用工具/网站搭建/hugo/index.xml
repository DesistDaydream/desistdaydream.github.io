<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – Hugo</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/hugo/</link><description>Recent content in Hugo on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/hugo/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Hugo</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/hugo/hugo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/hugo/hugo/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/gohugoio/hugo">GitHub 项目，gohugoio/hugo&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://github.com/coderzh/gohugo.org">GitHub 项目，coderzh/gohugo.org&lt;/a>（一个从19年停更的 Hugo 中文网）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://gohugo.io/">官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Hugo_(software)">Wiki,Hugo(软件)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Hugo 是用 Go 语言编写的静态站点生成器。Steve Francia 最初于 2013 年将 Hugo 创建为开源项目。&lt;/p>
&lt;h1 id="hugo-的基本使用">Hugo 的基本使用&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://hugo.aiaide.com/post/%E8%87%AA%E5%AE%9A%E4%B9%89hugo%E4%B8%BB%E9%A2%98-%E4%BB%8E%E5%86%85%E5%AE%B9%E9%A1%B5%E5%BC%80%E5%A7%8B/">自定义hugo主题&amp;ndash;从内容开始&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;code>hugo new site hello_world&lt;/code> 命令将会创建一个包含以下元素的目录结构，这些目录的作用可以在&lt;a href="#%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84">下文&lt;/a>找到：&lt;/p>
&lt;pre tabindex="0">&lt;code>hello_world/
├── archetypes/
│ └── default.md
├── assets/
├── content/
├── data/
├── layouts/
├── public/
├── static/
├── themes/
└── config.toml
&lt;/code>&lt;/pre>&lt;p>进入到这个目录之后，执行 &lt;code>hugo server&lt;/code> 将会启动一个 HTTP 服务端&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># hugo server --buildDrafts&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Start building sites …
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hugo v0.109.0-47b12b83e636224e5e601813ff3e6790c191e371+extended windows/amd64 BuildDate&lt;span style="color:#f92672">=&lt;/span>2022-12-23T10:38:11Z VendorInfo&lt;span style="color:#f92672">=&lt;/span>gohugoio
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>WARN 2023/01/22 16:15:45 found no layout file &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#e6db74">&amp;#34;HTML&amp;#34;&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> kind &lt;span style="color:#e6db74">&amp;#34;home&amp;#34;&lt;/span>: You should create a template file which matches Hugo Layouts Lookup Rules &lt;span style="color:#66d9ef">for&lt;/span> this combination.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>WARN 2023/01/22 16:15:45 found no layout file &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#e6db74">&amp;#34;HTML&amp;#34;&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> kind &lt;span style="color:#e6db74">&amp;#34;taxonomy&amp;#34;&lt;/span>: You should create a template file which matches Hugo Layouts Lookup Rules &lt;span style="color:#66d9ef">for&lt;/span> this combination.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>WARN 2023/01/22 16:15:45 found no layout file &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#e6db74">&amp;#34;HTML&amp;#34;&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> kind &lt;span style="color:#e6db74">&amp;#34;taxonomy&amp;#34;&lt;/span>: You should create a template file which matches Hugo Layouts Lookup Rules &lt;span style="color:#66d9ef">for&lt;/span> this combination.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | EN
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-------------------+-----
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Pages | &lt;span style="color:#ae81ff">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Paginator pages | &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Non-page files | &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Static files | &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Processed images | &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Aliases | &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Sitemaps | &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Cleaned | &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Built in &lt;span style="color:#ae81ff">44&lt;/span> ms
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Watching &lt;span style="color:#66d9ef">for&lt;/span> changes in D:&lt;span style="color:#ae81ff">\P&lt;/span>rojects&lt;span style="color:#ae81ff">\D&lt;/span>esistDaydream&lt;span style="color:#ae81ff">\h&lt;/span>ugo-learning&lt;span style="color:#ae81ff">\h&lt;/span>ello_world&lt;span style="color:#ae81ff">\{&lt;/span>archetypes,assets,content,data,layouts,static&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Watching &lt;span style="color:#66d9ef">for&lt;/span> config changes in D:&lt;span style="color:#ae81ff">\P&lt;/span>rojects&lt;span style="color:#ae81ff">\D&lt;/span>esistDaydream&lt;span style="color:#ae81ff">\h&lt;/span>ugo-learning&lt;span style="color:#ae81ff">\h&lt;/span>ello_world&lt;span style="color:#ae81ff">\c&lt;/span>onfig.toml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Environment: &lt;span style="color:#e6db74">&amp;#34;development&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Serving pages from memory
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Web Server is available at http://localhost:1313/ &lt;span style="color:#f92672">(&lt;/span>bind address 127.0.0.1&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Press Ctrl+C to stop
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们可以通过浏览器，访问默认的 1313 端口浏览我们的网站，但是此时我们只能看到一个 Hugo 默认的 &lt;code>Page Not Found&lt;/code>，因为我们还没有为网站设置、添加任何内容。&lt;/p>
&lt;p>Hugo 从 &lt;code>content/&lt;/code> 目录中渲染内容到页面，我们使用 &lt;code>hugo new posts/my-first-post.md&lt;/code> 命令将会创建 &lt;code>content/posts/my-first-post.md&lt;/code> 文件，我们可以自行在该文件中添加 markdown 格式的内容。&lt;/p>
&lt;p>但是我们依然无法看到任何东西，因为 Hugo 提供了非常大的自由度，并不会限制 HTML 的样式，所以我们需要先自己创建一个 HTML 页面(就像写前端一样)。&lt;/p>
&lt;p>在 layouts/ 目录下新建 _default 目录，并创建一个名为 single.html 文件，写下如下内容：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&amp;lt;!DOCTYPE html&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">html&lt;/span> &lt;span style="color:#a6e22e">lang&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;zh&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">head&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    &amp;lt;&lt;span style="color:#f92672">meta&lt;/span> &lt;span style="color:#a6e22e">charset&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;UTF-8&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    &amp;lt;&lt;span style="color:#f92672">meta&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;viewport&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">content&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;width=device-width, initial-scale=1.0&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    &amp;lt;&lt;span style="color:#f92672">meta&lt;/span> &lt;span style="color:#a6e22e">http-equiv&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;X-UA-Compatible&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">content&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;ie=edge&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    &amp;lt;&lt;span style="color:#f92672">title&lt;/span>&amp;gt;{{.Title}}&amp;lt;/&lt;span style="color:#f92672">title&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#f92672">head&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    &amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;post&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;post&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>        &amp;lt;&lt;span style="color:#f92672">article&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>            &amp;lt;&lt;span style="color:#f92672">header&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>                &amp;lt;&lt;span style="color:#f92672">h1&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;post-title&amp;#34;&lt;/span>&amp;gt;{{ .Title }}&amp;lt;/&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>            &amp;lt;/&lt;span style="color:#f92672">header&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>            {{.Content}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>        &amp;lt;/&lt;span style="color:#f92672">article&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    &amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#f92672">html&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>此时我们直接访问 &lt;code>http://localhost:1313/posts/my-first-post/&lt;/code> 即可看到我们刚才添加的 markdown 的内容。只不过没有任何样式，光秃秃的~&lt;/p>
&lt;p>&lt;img src="https://notes-picgo.oss-cn-beijing.aliyuncs.com/20230122175219.png" alt="image.png">&lt;/p>
&lt;h2 id="使用主题">使用主题&lt;/h2>
&lt;p>我们自己编写 HTML 是非常复杂的，咱是要内容管理。。又不是写前端页面~~~o(╯□╰)o&lt;/p>
&lt;p>Hugo 贴心得提供了主题功能，可以让我们专注于内容的产出，在 Hugo 官方的主题页面中，我们可以挑选我们喜欢的主题并放在 themes/ 目录下，以便使用时供 Hugo 加载&lt;/p>
&lt;blockquote>
&lt;p>除了将主题放在 themes/ 目录下，还可以使用 Hugo 模块功能，将主题当做 Go 模块一样的东西，统一管理。这样在我们创建多个 Hugo 站点并使用同一个主题时，不用重复下载了。&lt;/p>
&lt;/blockquote>
&lt;p>我们使用官方示例中的基本主题：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke themes/ananke
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#e6db74">&amp;#34;theme = &amp;#39;ananke&amp;#39;&amp;#34;&lt;/span> &amp;gt;&amp;gt; config.toml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>主题将会被下载到 thems/ 目录中，并且我们在 config.toml 文件中指定要使用的主题名称。&lt;/p>
&lt;p>此时再打开 1313 端口，我们就可以看到我们的站点了，第一篇文章以标题和概要的形式被展现在首页中。&lt;/p>
&lt;p>&lt;img src="https://notes-picgo.oss-cn-beijing.aliyuncs.com/20230122164828.png" alt="image.png">&lt;/p>
&lt;h3 id="通过-hugo-模块使用主题">通过 Hugo 模块使用主题&lt;/h3>
&lt;p>想要使用 Hugo 模块，我们需要 Go 环境&lt;/p>
&lt;p>执行如下命令&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>hugo mod init github.com/DesistDaydream/hugo-learning/hello_world
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hugo mod get github.com/theNewDynamic/gohugo-theme-ananke
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>此时主题将会被下载到 &lt;code>%TMP%/hugo_cache/modules/filecache/modules/pkg/mod/github.com&lt;/code> 目录下，然后我们可以删掉项目目录中 themes/ 目录下的主题文件了~o(∩_∩)o&lt;/p>
&lt;p>修改 config.toml 文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">theme&lt;/span> = [&lt;span style="color:#e6db74">&amp;#34;github.com/theNewDynamic/gohugo-theme-ananke&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="发布我们的网站">发布我们的网站&lt;/h2>
&lt;p>在基本示例中，我们只是在本地调试，如果想要将网站运行在服务器上，那么肯定需要像前端代码一样，将这些文件打包才可以。&lt;/p>
&lt;p>Hugo 打包非常简单，执行 &lt;code>hugo&lt;/code> 命令即可在 public/ 目录中生成我们网站的静态页面，将这个目录下的所有文件，统统放到 Nginx 中响应页面的目录，就可以访问我们自己的网站了~&lt;/p>
&lt;h3 id="最佳实践">最佳实践&lt;/h3>
&lt;p>很多时候，我们通过工作流（GitHub Action 等）将 &lt;code>public/&lt;/code> 目录下的文件转存到新项目中，并不会将原始内容与打包好的前端代码放在一起。&lt;/p>
&lt;h2 id="目录结构">目录结构&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://gohugo.io/getting-started/directory-structure/">官方文档，入门-目录结构&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h3 id="archetypes">archetypes&lt;/h3>
&lt;h3 id="assets">assets&lt;/h3>
&lt;p>存放所有需要由 Hugo Pipes 处理的文件。&lt;/p>
&lt;h3 id="config">config&lt;/h3>
&lt;blockquote>
&lt;p>注意：config 目录并不会随着 &lt;code>hugo new site example&lt;/code> 命令自动创建出来。而是在我们需要将单一配置文件拆分时，手动创建并使用的。&lt;/p>
&lt;/blockquote>
&lt;p>Hugo 附带了大量的配置指令。config 目录是将这些指令存储为 JSON、YAML 或 TOML 文件的地方。每个根设置对象都可以作为自己的文件并按环境构建。设置最少且不需要环境的项目可以在其根目录下使用单个 config.toml 文件。&lt;/p>
&lt;p>许多站点可能几乎不需要配置，但 Hugo 附带了大量 &lt;a href="https://gohugo.io/getting-started/configuration/#all-configuration-settings">configuration directives(配置指令)&lt;/a>，用于更详细地指导我们希望 Hugo 如何构建网站。注意：默认情况下不创建 config 目录。&lt;/p>
&lt;h3 id="content">content/&lt;/h3>
&lt;p>我们使用 Hugo 创建的网站的所有内容通常都要放在 content 目录中。content 目录下的每个顶级文件夹称为 &lt;a href="https://gohugo.io/content-management/sections/">content section(内容部分)&lt;/a>。&lt;/p>
&lt;p>比如，如果我的网站有三大块，分别是 blog、articles、tuorials，那么我们需要创建如下的目录结构&lt;/p>
&lt;pre tabindex="0">&lt;code>example/
├── content/
│ ├── blog/
│ ├── articles/
│ └── tuorials/
&lt;/code>&lt;/pre>&lt;p>Hugo 使用 section 的名称作为默认的 &lt;a href="https://gohugo.io/content-management/types/">content types(内容类型)&lt;/a>。假如有这么一个文件 content/blog/my-first-event.md，则这篇文章的内容类型就是 blog 类型。&lt;/p>
&lt;p>通过这种对网站内容的分类方式，更利于搜索、整理等。&lt;/p>
&lt;h3 id="data">data/&lt;/h3>
&lt;p>该目录用于存放 Hugo 在生成我的网站时可以使用的配置文件。可以用 YAML、JSON 或 TOML 格式编写这些文件。除了添加到此文件夹的文件外，还可以创建从动态内容中提取的数据模板。&lt;/p>
&lt;h3 id="layouts">layouts/&lt;/h3>
&lt;p>以 &lt;code>.html&lt;/code> 文件的形式存储模板，这些文件指定如何将您的内容视图呈现到静态网站中。模板包括 &lt;a href="https://gohugo.io/templates/list/">list pages&lt;/a>, your &lt;a href="https://gohugo.io/templates/homepage/">homepage&lt;/a>, &lt;a href="https://gohugo.io/templates/taxonomy-templates/">taxonomy templates&lt;/a>, &lt;a href="https://gohugo.io/templates/partials/">partials&lt;/a>, &lt;a href="https://gohugo.io/templates/single-page-templates/">single page templates&lt;/a>,等&lt;/p>
&lt;p>如果我们不使用主题，则 Hugo 会从 &lt;code>layouts&lt;/code> 目录中读取前端代码并渲染页面。&lt;/p>
&lt;h3 id="public">public/&lt;/h3>
&lt;p>使用 &lt;code>hugo&lt;/code> 命令生成网站的静态文件后，将会保存到 public 目录。public 目录生成的静态文件，可以直接通过 web 服务访问到。&lt;/p>
&lt;h3 id="static">static/&lt;/h3>
&lt;p>存储所有静态内容：图像、CSS、JavaScript 等。当 Hugo 构建您的站点时，静态目录中的所有资产都会按原样复制。使用静态文件夹的一个很好的例子是在 Google Search Console 上验证网站所有权，您希望 Hugo 在不修改其内容的情况下复制完整的 HTML 文件。&lt;/p>
&lt;h3 id="themes">themes/&lt;/h3>
&lt;blockquote>
&lt;p>更推荐的是使用 Hugo 模块使用主题，该目录不推荐使用。&lt;/p>
&lt;/blockquote>
&lt;p>Hugo 主题可以安装到该目录，使用 &lt;code>hugo server --themes&lt;/code> 指定使用的主题时，将会从该目录出寻找。&lt;/p>
&lt;h3 id="configtoml">config.toml&lt;/h3>
&lt;p>Hugo 运行站点时所使用的配置文件。&lt;/p>
&lt;p>推荐使用 config/ 目录，以便拆分 config.toml 文件。可以将 config.tom 文件移动到在 config/_default/config.toml 处作为默认配置。&lt;/p>
&lt;h1 id="hugo-modules模块">Hugo Modules(模块)&lt;/h1>
&lt;p>Hugo 模块是一个类似 Go 模块一样的存在。模块可以是我们的主项目或其他较小的模块，提供 Hugo 的 7 种组件类型中的一种或多种：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>static&lt;/strong>&lt;/li>
&lt;li>&lt;strong>content&lt;/strong>&lt;/li>
&lt;li>&lt;strong>layouts&lt;/strong>&lt;/li>
&lt;li>&lt;strong>data&lt;/strong>&lt;/li>
&lt;li>&lt;strong>assets&lt;/strong>&lt;/li>
&lt;li>&lt;strong>i18n&lt;/strong>&lt;/li>
&lt;li>&lt;strong>archetypes&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>在 config.toml 文件中的 module 字段添加配置，即可为站点设置引用的模块，我们可以将主题当做一个模块，&lt;/p>
&lt;h1 id="安装-hugo">安装 Hugo&lt;/h1>
&lt;p>安装 &lt;code>hogo&lt;/code> 命令行工具，即可开始使用 Hugo。推荐下载扩展版 hugo，即名字带有 extended 的文件。&lt;/p>
&lt;p>从 &lt;a href="https://github.com/gohugoio/hugo/releases">release&lt;/a> 页面下载带 &lt;strong>extended&lt;/strong> 后缀的文件。&lt;/p>
&lt;h1 id="关联文件与配置">关联文件与配置&lt;/h1>
&lt;p>&lt;strong>config.toml | config.yaml | config.json&lt;/strong> # 站点的配置文件，通常在站点的根目录
&lt;strong>${Site_Root_dir}/config&lt;/strong> # 可以将站点根目录下的 config.toml | config.yaml | config.json 拆分后保存到该目录。&lt;/p>
&lt;p>Hugo 运行时所需的缓存目录。包括需要使用的模块等：&lt;/p>
&lt;ul>
&lt;li>Windows:
&lt;ul>
&lt;li>&lt;strong>%TMP%/hugo_cache/*&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Linux:
&lt;ul>
&lt;li>&lt;strong>${TMP}/hugo_cache/*&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: 命令行工具</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/hugo/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/hugo/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://gohugo.io/commands/hugo/">官方文档，命令-hugo&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;code>hugo&lt;/code> 是 Hugo 的命令行工具。&lt;/p>
&lt;p>在网站的根目录下使用 &lt;code>hugo&lt;/code> 命令，可以为网站构建静态文件，并保存到 &lt;code>publish/&lt;/code> 目录中。&lt;/p>
&lt;h2 id="sytnax语法">Sytnax(语法)&lt;/h2>
&lt;p>&lt;strong>hugo [COMMAND] [FLAGS]&lt;/strong>&lt;/p>
&lt;p>FLAGS&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-D, &amp;ndash;buildDrafts&lt;/strong> # 包含标记为 draft 的内容&lt;/li>
&lt;/ul>
&lt;h1 id="hugo-server">hugo server&lt;/h1>
&lt;h2 id="syntax语法">Syntax(语法)&lt;/h2>
&lt;p>&lt;strong>hugo server [FLAGS]&lt;/strong>&lt;/p>
&lt;p>FLAGS&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&amp;ndash;bind STRING&lt;/strong> # 监听地址。&lt;code>默认值: 127.0.0.1&lt;/code>&lt;/li>
&lt;li>&lt;strong>-p, &amp;ndash;port INT&lt;/strong> # 监听端口。&lt;code>默认值: 1313&lt;/code>&lt;/li>
&lt;li>&lt;strong>-w, &amp;ndash;watch&lt;/strong> # 监听文件的改变，文件改变时重新应用，以便结果可以实时显示。&lt;code>默认值: true&lt;/code>&lt;/li>
&lt;li>&lt;strong>&amp;ndash;cacheDir STRING&lt;/strong> # filesystem path to cache directory。&lt;code>默认值: $TMPDIR/hugo_cache/&lt;/code>&lt;/li>
&lt;/ul></description></item><item><title>Docs: 内容管理</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/hugo/%E5%86%85%E5%AE%B9%E7%AE%A1%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/hugo/%E5%86%85%E5%AE%B9%E7%AE%A1%E7%90%86/</guid><description/></item><item><title>Docs: 配置文件详解</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/hugo/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/hugo/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://gohugo.io/getting-started/configuration/">官方文档，入门-配置&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Hugo 支持 toml、yaml、json 格式的配置文件，默认配置文件名为 &lt;strong>config.SUFFIX&lt;/strong>。所有的配置指令都可以写在 config.SUFFIX 文件中。&lt;/p>
&lt;p>我们可以拆分 config 文件，并将其保存在 &lt;code>${ConfigDir}&lt;/code> 目录下(默认为站点根目录下的 &lt;code>config/&lt;/code> 文件夹)。 ConfigDir 下的每个文件名代表配置中的根指令，比如：&lt;/p>
&lt;p>config.toml 文件中有如下指令&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>[&lt;span style="color:#a6e22e">Params&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">foo&lt;/span> = &lt;span style="color:#e6db74">&amp;#39;bar&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>那么拆分到 ConfigDir 目录时，则使用 &lt;code>params.toml&lt;/code> 文件，内容为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">foo&lt;/span> = &lt;span style="color:#e6db74">&amp;#39;bar&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>除了 Hugo 本身会用到 config 文件，有些主题也会使用 config 文件，并具有各自可以识别的配置指令。比如 Docsy 主题。&lt;/p>
&lt;p>在&lt;a href="https://gohugo.io/getting-started/configuration/#all-configuration-settings">这里&lt;/a>我们可以找到 Hugo 自带的所有配置指令&lt;/p>
&lt;h1 id="config-目录结构">config 目录结构&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>├── config
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── _default
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   ├── config.toml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   ├── languages.toml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   ├── menus.en.toml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   ├── menus.zh.toml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   └── params.toml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── production
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   ├── config.toml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   └── params.toml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   └── staging
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│       ├── config.toml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│       └── params.toml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>_default/ 目录是站点的默认配置，可以直接保存单个 config 文件。&lt;/p>
&lt;p>production 与 staging 文件夹用来区分运行时配置，比如使用 &lt;code>hugo --environment staging&lt;/code> 命令时，Hugo 将会使用 &lt;code>config/_default/&lt;/code> 和 &lt;code>config/staging&lt;/code> 这两个下的所有文件，将所有文件合并后生成一个单独的临时 config 文件，作为站点运行时的配置文件。&lt;/p>
&lt;p>这种目录结构，可以帮助我们区分不同环境(比如开发环境、生产环境等)下运行网站所需要使用的配置。&lt;/p>
&lt;blockquote>
&lt;p>Hugo 有个默认值，执行 &lt;code>hugo server&lt;/code> 命令时，是在本地运行网站，所以默认为开发环境，使用 &lt;code>config/development/&lt;/code> 目录；而执行 &lt;code>hugo&lt;/code> 命令时，是要构建静态文件，所以默认为生产环境，使用 &lt;code>config/production&lt;/code> 目录。&lt;/p>
&lt;/blockquote>
&lt;h1 id="基础指令">基础指令&lt;/h1>
&lt;p>baseURL = &amp;lsquo;&lt;a href="https://desistdaydream.github.io/'">https://desistdaydream.github.io/'&lt;/a>&lt;/p>
&lt;p>title = &amp;lsquo;断念梦的站点&amp;rsquo;&lt;/p>
&lt;p>contentDir = &amp;ldquo;content/zh-cn&amp;rdquo;&lt;/p>
&lt;p>defaultContentLanguage = &amp;ldquo;zh-cn&amp;rdquo;&lt;/p>
&lt;p>defaultContentLanguageInSubdir = false&lt;/p>
&lt;h1 id="markup-指令">markup 指令&lt;/h1>
&lt;p>markup 部分的配置用于处理 Markdown 和其他 Markup(标记) 相关配置。&lt;/p>
&lt;p>[goldmark]&lt;/p>
&lt;p>Goldmark 是适用于 Go 的 Markdown 解析库，Hugo 从 0.60 开始使用。它速度快，符合 CommonMark 标准，而且非常灵活。&lt;/p>
&lt;p>[tableOfContents]&lt;/p>
&lt;p>目录相关指令。这些设定只适用于 Goldmark 渲染器。&lt;/p>
&lt;p>&lt;strong>startLevel = &amp;lt;NUM&amp;gt;&lt;/strong> # 目录中显示的标题级别。从该指令的级别开始显示&lt;/p>
&lt;p>&lt;strong>endLevel = &amp;lt;NUM&amp;gt;&lt;/strong> # 目录中显示的标题级别。到该指令的级别结束显示&lt;/p>
&lt;p>&lt;strong>ordered = &amp;lt;BOOLEAN&amp;gt;&lt;/strong> # 是否生成有序列表而不是无序列表。&lt;/p></description></item><item><title>Docs: 主题</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/hugo/%E4%B8%BB%E9%A2%98/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/hugo/%E4%B8%BB%E9%A2%98/</guid><description/></item></channel></rss>