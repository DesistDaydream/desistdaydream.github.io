<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – 网站搭建</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/</link><description>Recent content in 网站搭建 on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Hugo</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/hugo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/hugo/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/gohugoio/hugo">GitHub 项目，gohugoio/hugo&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gohugo.io/">官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Hugo_(software)">Wiki,Hugo(软件)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Hugo 是用 Go 语言编写的静态站点生成器。Steve Francia 最初于 2013 年将 Hugo 创建为开源项目。&lt;/p>
&lt;h2 id="目录结构">目录结构&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://gohugo.io/getting-started/directory-structure/">官方文档，入门-目录结构&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;code>hugo new site example&lt;/code> 命令将会创建一个包含以下元素的目录结构：&lt;/p>
&lt;pre tabindex="0">&lt;code>example/
├── archetypes/
│ └── default.md
├── assets/
├── content/
├── data/
├── layouts/
├── public/
├── static/
├── themes/
└── config.toml
&lt;/code>&lt;/pre>&lt;h3 id="archetypes">archetypes&lt;/h3>
&lt;h3 id="assets">assets&lt;/h3>
&lt;p>存放所有需要由 Hugo Pipes 处理的文件。&lt;/p>
&lt;h3 id="config">config&lt;/h3>
&lt;blockquote>
&lt;p>注意：config 目录并不会随着 &lt;code>hugo new site example&lt;/code> 命令自动创建出来。而是在我们需要将单一配置文件拆分时，手动创建并使用的。&lt;/p>
&lt;/blockquote>
&lt;p>Hugo 附带了大量的配置指令。config 目录是将这些指令存储为 JSON、YAML 或 TOML 文件的地方。每个根设置对象都可以作为自己的文件并按环境构建。设置最少且不需要环境的项目可以在其根目录下使用单个 config.toml 文件。&lt;/p>
&lt;p>许多站点可能几乎不需要配置，但 Hugo 附带了大量 &lt;a href="https://gohugo.io/getting-started/configuration/#all-configuration-settings">configuration directives(配置指令)&lt;/a>，用于更详细地指导我们希望 Hugo 如何构建网站。注意：默认情况下不创建 config 目录。&lt;/p>
&lt;h3 id="content">content/&lt;/h3>
&lt;p>我们使用 Hugo 创建的网站的所有内容通常都要放在 content 目录中。content 目录下的每个顶级文件夹称为 &lt;a href="https://gohugo.io/content-management/sections/">content section(内容部分)&lt;/a>。&lt;/p>
&lt;p>比如，如果我的网站有三大块，分别是 blog、articles、tuorials，那么我们需要创建如下的目录结构&lt;/p>
&lt;pre tabindex="0">&lt;code>example/
├── content/
│ ├── blog/
│ ├── articles/
│ └── tuorials/
&lt;/code>&lt;/pre>&lt;p>Hugo 使用 section 的名称作为默认的 &lt;a href="https://gohugo.io/content-management/types/">content types(内容类型)&lt;/a>。假如有这么一个文件 content/blog/my-first-event.md，则这篇文章的内容类型就是 blog 类型。&lt;/p>
&lt;p>通过这种对网站内容的分类方式，更利于搜索、整理等。&lt;/p>
&lt;h3 id="data">data/&lt;/h3>
&lt;p>该目录用于存放 Hugo 在生成我的网站时可以使用的配置文件。可以用 YAML、JSON 或 TOML 格式编写这些文件。除了添加到此文件夹的文件外，还可以创建从动态内容中提取的数据模板。&lt;/p>
&lt;h3 id="layouts">layouts/&lt;/h3>
&lt;p>以 .html 文件的形式存储模板，这些文件指定如何将您的内容视图呈现到静态网站中。模板包括 &lt;a href="https://gohugo.io/templates/list/">list pages&lt;/a>, your &lt;a href="https://gohugo.io/templates/homepage/">homepage&lt;/a>, &lt;a href="https://gohugo.io/templates/taxonomy-templates/">taxonomy templates&lt;/a>, &lt;a href="https://gohugo.io/templates/partials/">partials&lt;/a>, &lt;a href="https://gohugo.io/templates/single-page-templates/">single page templates&lt;/a>,等&lt;/p>
&lt;h3 id="public">public/&lt;/h3>
&lt;p>使用 &lt;code>hugo&lt;/code> 命令生成网站的静态文件后，将会保存到 public 目录。public 目录生成的静态文件，可以直接通过 web 服务访问到。&lt;/p>
&lt;h3 id="static">static/&lt;/h3>
&lt;p>存储所有静态内容：图像、CSS、JavaScript 等。当 Hugo 构建您的站点时，静态目录中的所有资产都会按原样复制。使用静态文件夹的一个很好的例子是在 Google Search Console 上验证网站所有权，您希望 Hugo 在不修改其内容的情况下复制完整的 HTML 文件。&lt;/p>
&lt;h3 id="themes">themes/&lt;/h3>
&lt;blockquote>
&lt;p>更推荐的是使用 Hugo 模块使用主题，该目录不推荐使用。&lt;/p>
&lt;/blockquote>
&lt;p>Hugo 主题可以安装到该目录，使用 &lt;code>hugo server --themes&lt;/code> 指定使用的主题时，将会从该目录出寻找。&lt;/p>
&lt;h3 id="configtoml">config.toml&lt;/h3>
&lt;p>Hugo 运行站点时所使用的配置文件。&lt;/p>
&lt;p>推荐使用 config/ 目录，以便拆分 config.toml 文件。可以将 config.tom 文件移动到在 config/_default/config.toml 处作为默认配置。&lt;/p>
&lt;h1 id="hugo-modules模块">Hugo Modules(模块)&lt;/h1>
&lt;h2 id="hugo-模块是一个类似-go-模块一样的存在模块可以我们的主项目或较小的模块提供-hugo-的-7-种组件类型中的一种或多种">Hugo 模块是一个类似 Go 模块一样的存在。模块可以我们的主项目或较小的模块，提供 Hugo 的 7 种组件类型中的一种或多种：&lt;/h2>
&lt;p>在 config.toml 文件中的 module 字段添加配置，即可为站点设置引用的模块，我们可以将主题当做一个模块，&lt;/p>
&lt;h1 id="安装-hugo">安装 Hugo&lt;/h1>
&lt;h1 id="关联文件与配置">关联文件与配置&lt;/h1>
&lt;p>&lt;strong>config.toml | config.yaml | config.json&lt;/strong> # 站点的配置文件，通常在站点的根目录
&lt;strong>${Site_Root_dir}/config&lt;/strong> # 可以将站点根目录下的 config.toml | config.yaml | config.json 拆分后保存到该目录。&lt;/p>
&lt;p>Hugo 运行时所需的缓存目录。包括需要使用的模块等：&lt;/p>
&lt;ul>
&lt;li>Windows:
&lt;ul>
&lt;li>&lt;strong>%TMP%/hugo_cache/*&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Linux:
&lt;ul>
&lt;li>&lt;strong>${TMP}/hugo_cache/*&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item></channel></rss>