<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – JavaScript 标准库</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ecmascript/javascript-%E6%A0%87%E5%87%86%E5%BA%93/</link><description>Recent content in JavaScript 标准库 on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ecmascript/javascript-%E6%A0%87%E5%87%86%E5%BA%93/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: DOM(文档对象模型)</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ecmascript/javascript-%E6%A0%87%E5%87%86%E5%BA%93/dom%E6%96%87%E6%A1%A3%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ecmascript/javascript-%E6%A0%87%E5%87%86%E5%BA%93/dom%E6%96%87%E6%A1%A3%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction">MDN 官方文档，参考-WebAPIs-DOM-DOM 简介&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Document Ojbect Model(文档对象模型，简称 DOM)&lt;/strong> 是 Web 文档(HTML 和 XML)的编程接口(通常描述为 WebAPI 中的 DOM 接口)。应用程序可以通过该接口更改 Web 文档的 结构、样式、内容 等。DOM 将 Web 文档抽象为 &lt;strong>Node(节点)&lt;/strong> 和 **Ojbect(对象，包含属性和方法的对象) **组成的结构集合。&lt;/p>
&lt;p>一个 Web 页面即是一个文档，这个文档可以在浏览器中作为 HTML 源码展示出来。DOM 则可以将文档表示为另一种形式，以便 JavaScript 等编程语言可以对其进行修改。
比如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 我们通过 document.querySelectorAll() 获取 Web 文档中所有 &amp;lt;p&amp;gt; 元素的列表
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 将所有 &amp;lt;p&amp;gt; 元素实例化为 paragraphs 变量
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">paragraphs&lt;/span> &lt;span style="color:#f92672">=&lt;/span> document.&lt;span style="color:#a6e22e">querySelectorAll&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;p&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 之后，通过代码对 paragraphs 的所有操作都会直接反应到前端 Web 页面上
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 这里表示将将会弹出提示框，并将其中第一个 &amp;lt;p&amp;gt; 元素的名称显示在提示框中
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">alert&lt;/span>(&lt;span style="color:#a6e22e">paragraphs&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>].&lt;span style="color:#a6e22e">nodeName&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>从上面的示例中可以看到，JavaScript 中使用 &lt;code>**document 类型的对象**&lt;/code>表示 Web 文档本身；document 对象里包含了非常多的方法来控制 Web 文档中的元素，在 &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Document">MDN 官方文档，WebAPIs-Document&lt;/a> 中可以看到所有 document 对象下的属性、方法、事件。示例中的 &lt;a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/querySelectorAll">querySelectorAll()&lt;/a> 方法将会返回匹配到的元素列表。&lt;/p>
&lt;p>DOM 本身并不是一个编程语言，可以说是一种 规范、模型、接口；DOM 可以用任何语言实现，DOM 被内嵌在浏览器中，各种编程语言可以自己实现 DOM 库以便在浏览器中调用 DOM。&lt;/p>
&lt;p>编程语言之于 DOM，有点类似于 runc 等运行时之于 OCI&lt;/p>
&lt;p>我们甚至可以在 Python 中使用 DOM 来控制 Web 文档&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Python DOM example&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> xml.dom.minidom &lt;span style="color:#66d9ef">as&lt;/span> m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>doc &lt;span style="color:#f92672">=&lt;/span> m&lt;span style="color:#f92672">.&lt;/span>parse(&lt;span style="color:#e6db74">r&lt;/span>&lt;span style="color:#e6db74">&amp;#34;C:\Projects\Py\chap1.xml&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>doc&lt;span style="color:#f92672">.&lt;/span>nodeName &lt;span style="color:#75715e"># DOM property of document object&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>p_list &lt;span style="color:#f92672">=&lt;/span> doc&lt;span style="color:#f92672">.&lt;/span>getElementsByTagName(&lt;span style="color:#e6db74">&amp;#34;para&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Event(事件)</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ecmascript/javascript-%E6%A0%87%E5%87%86%E5%BA%93/event%E4%BA%8B%E4%BB%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ecmascript/javascript-%E6%A0%87%E5%87%86%E5%BA%93/event%E4%BA%8B%E4%BB%B6/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://wangdoc.com/javascript/events/index.html">网道，Javascript 教程-事件&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Event(事件)&lt;/strong> 的本质是程序各个组成部分之间的一种通信方式，也是异步编程的一种实现。DOM 支持大量的事件，&lt;/p>
&lt;p>事件语法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">elementObject&lt;/span>.&lt;span style="color:#a6e22e">onEventType&lt;/span>&lt;span style="color:#f92672">=&lt;/span>Function(){}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;strong>elementObject&lt;/strong> # 元素对象，也就是事件源，通常是通过类似 &lt;code>getElementByID()&lt;/code>之类的方法获取到的 HTML 中的元素&lt;/li>
&lt;li>&lt;strong>onEventType&lt;/strong> # 以&lt;code>on&lt;/code>开头，后面跟一个事件名称&lt;/li>
&lt;li>&lt;strong>Function(){}&lt;/strong> # elementObject 触发 onEventType 时要执行的代码，也就是 HTML 中某一元素触发事件时要执行的操作&lt;/li>
&lt;/ul>
&lt;p>比如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">divElement&lt;/span> &lt;span style="color:#f92672">=&lt;/span> document.&lt;span style="color:#a6e22e">getElementById&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;event&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// click 点击事件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">divElement&lt;/span>.&lt;span style="color:#a6e22e">onclick&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> () {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">divElement&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;元素，被点击了一下&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="事件类型">事件类型&lt;/h1>
&lt;h2 id="鼠标事件">鼠标事件&lt;/h2>
&lt;ul>
&lt;li>click # 鼠标单击&lt;/li>
&lt;li>dblclick # 鼠标双击&lt;/li>
&lt;li>contextmenu # 左键单击&lt;/li>
&lt;li>mousedown # 鼠标按下&lt;/li>
&lt;li>mouseup # 鼠标抬起&lt;/li>
&lt;li>mousemove # 鼠标移动&lt;/li>
&lt;li>mouseenter # 鼠标移入&lt;/li>
&lt;li>mouseleave # 鼠标移出&lt;/li>
&lt;li>&amp;hellip;&amp;hellip; 等等&lt;/li>
&lt;/ul>
&lt;h2 id="键盘事件">键盘事件&lt;/h2>
&lt;ul>
&lt;li>keydown # 键盘按下&lt;/li>
&lt;li>keyup # 键盘抬起&lt;/li>
&lt;li>keypress # 键盘输入&lt;/li>
&lt;li>&amp;hellip;&amp;hellip; 等等&lt;/li>
&lt;/ul>
&lt;h2 id="浏览器事件">浏览器事件&lt;/h2>
&lt;ul>
&lt;li>load # 加载完毕&lt;/li>
&lt;li>scroll # 滚动&lt;/li>
&lt;li>resize # 尺寸改变&lt;/li>
&lt;li>&amp;hellip;&amp;hellip; 等等&lt;/li>
&lt;/ul>
&lt;h2 id="触摸事件">触摸事件&lt;/h2>
&lt;ul>
&lt;li>touchstart # 触摸开始&lt;/li>
&lt;li>touchmove # 触摸移动&lt;/li>
&lt;li>touchend # 触摸结束&lt;/li>
&lt;li>&amp;hellip;&amp;hellip; 等等&lt;/li>
&lt;/ul>
&lt;h2 id="表单事件">表单事件&lt;/h2>
&lt;ul>
&lt;li>focus # 聚焦&lt;/li>
&lt;li>blue # 失焦&lt;/li>
&lt;li>change # 改变&lt;/li>
&lt;li>input # 输入&lt;/li>
&lt;li>submit # 提交&lt;/li>
&lt;li>reset # 重置&lt;/li>
&lt;li>&amp;hellip;&amp;hellip; 等等&lt;/li>
&lt;/ul>
&lt;h1 id="事件对象">事件对象&lt;/h1>
&lt;p>每个事件触发时，都会记录一组数据，这组数据是事件类型对象，事件对象数据中的数据包括该时间一系列属性信息，比如：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>type&lt;/strong> # 什么事件&lt;/li>
&lt;li>&lt;strong>target&lt;/strong> # 谁触发的&lt;/li>
&lt;li>如果是鼠标事件，那么还会记录
&lt;ul>
&lt;li>&lt;strong>x&lt;/strong> # 光标 x 坐标&lt;/li>
&lt;li>&lt;strong>y&lt;/strong> # 光标 y 坐标&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>等等&amp;hellip;&amp;hellip;&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>比如我们模拟一下鼠标点击事件：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">divElement&lt;/span> &lt;span style="color:#f92672">=&lt;/span> document.&lt;span style="color:#a6e22e">getElementById&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;event&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// click 触发一个点击事件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">divElement&lt;/span>.&lt;span style="color:#a6e22e">onclick&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> (&lt;span style="color:#a6e22e">prop&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 事件的属性
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">prop&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个鼠标点击事件具有如下属性：
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/nzci2k/1641961554049-e88a8221-0593-4b6e-be48-6a093e0d1b0a.png" alt="image.png">
这是一个 PointerEvent 类型的对象&lt;/p>
&lt;h2 id="鼠标事件对象">鼠标事件对象&lt;/h2>
&lt;p>坐标信息&lt;/p>
&lt;ul>
&lt;li>&lt;strong>offsetX 和 offsetY&lt;/strong> # 相对于触发事件元素的坐标
&lt;ul>
&lt;li>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/nzci2k/1641961872393-217cf16a-78e5-449c-9e33-d91f52c6dd96.png" alt="image.png">&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>**client 和 clientY **# 相对于浏览器可视窗口的坐标
&lt;ul>
&lt;li>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/nzci2k/1641961917878-40b8b649-3846-4f31-81f1-9e98e407f320.png" alt="image.png">&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>pageX 和 pageY&lt;/strong> # 相对于页面文档流的坐标
&lt;ul>
&lt;li>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/nzci2k/1641961945785-c13cc660-5702-444f-b6a3-2d21a341341f.png" alt="image.png">&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="键盘事件对象">键盘事件对象&lt;/h2>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul></description></item><item><title>Docs: 各种类型的 object(对象) 的常见方法</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ecmascript/javascript-%E6%A0%87%E5%87%86%E5%BA%93/%E5%90%84%E7%A7%8D%E7%B1%BB%E5%9E%8B%E7%9A%84-object%E5%AF%B9%E8%B1%A1-%E7%9A%84%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ecmascript/javascript-%E6%A0%87%E5%87%86%E5%BA%93/%E5%90%84%E7%A7%8D%E7%B1%BB%E5%9E%8B%E7%9A%84-object%E5%AF%B9%E8%B1%A1-%E7%9A%84%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects">MDN 官方文档，参考-JavaScript-JavaScript-标准内置对象&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API">MDN 官方文档，参考-WebAPIs&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="string-对象">String 对象&lt;/h1>
&lt;p>常用 String 对象的方法&lt;/p>
&lt;ul>
&lt;li>toLowerCase() # 将字符串内的字母全部转换成小写&lt;/li>
&lt;li>toUpperCase() 将字符串内的字母全部转换成大写&lt;/li>
&lt;li>replace(&amp;ldquo;D&amp;rdquo;, 1) # replace(searchValue,replaceValue) 将字符串内第一个满足 searchValue 条件的字符替换为 replaceValue。注意：只能替换第一个&lt;/li>
&lt;li>trim() # 去除首尾所有空白字符&lt;/li>
&lt;li>split(&amp;quot; &amp;ldquo;) # 按照分隔符将字符串切割为一个数组。注意：只有字符串中有指定的分隔符，才会生效。否则切割后的元素只有一个。&lt;/li>
&lt;li>截取字符串
&lt;ul>
&lt;li>substr(5, 8) # 第一个参数是开始截取的索引号，第二个参数是截取数量&lt;/li>
&lt;li>substring(5, 8) # 第一个参数是开始截取的索引号，第二个参数是结束截取的索引号&lt;/li>
&lt;li>slice(5, 8) # 第一个参数是开始截取的索引号，第二个参数是结束截取的索引号&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="array-对象">Array 对象&lt;/h1>
&lt;p>常用 Array 对象的方法&lt;/p>
&lt;ul>
&lt;li>会改变原始数组的内容
&lt;ul>
&lt;li>push() # 从后面追加&lt;/li>
&lt;li>pop() # 从后面删除&lt;/li>
&lt;li>unshift() # 从前面添加&lt;/li>
&lt;li>shift() # 从前面删除&lt;/li>
&lt;li>reverse() # 反转数组&lt;/li>
&lt;li>splice() # 截取并添加&lt;/li>
&lt;li>sort() # 数组排序&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>不会改变原始数组的内容
&lt;ul>
&lt;li>join() # 数组连接为字符串&lt;/li>
&lt;li>concat() # 拼接数组&lt;/li>
&lt;li>slice() # 截取数组&lt;/li>
&lt;li>indexOf() # 查找元素在数组中的索引&lt;/li>
&lt;li>forEach() # 遍历数组&lt;/li>
&lt;li>map() # 映射数组&lt;/li>
&lt;li>filter() # 过滤数组&lt;/li>
&lt;li>every() # 判断是否全部满足条件&lt;/li>
&lt;li>some() # 判断是否有满足条件的项&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: 回调函数与异步编程</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ecmascript/javascript-%E6%A0%87%E5%87%86%E5%BA%93/%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E4%B8%8E%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ecmascript/javascript-%E6%A0%87%E5%87%86%E5%BA%93/%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E4%B8%8E%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.runoob.com/js/js-async.html">https://www.runoob.com/js/js-async.html&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="promise-对象">Promise 对象&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.bilibili.com/video/BV1TG411L7KM">B 站 up-思学堂，5 分钟彻底学会使用 Promise，你真的懂 Promise 吗？&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.runoob.com/w3cnote/javascript-promise-object.html">https://www.runoob.com/w3cnote/javascript-promise-object.html&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Promise.resolve() 方法
Promise.reject() 方法&lt;/p></description></item></channel></rss>