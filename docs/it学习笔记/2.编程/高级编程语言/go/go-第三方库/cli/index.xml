<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – CLI</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go/go-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/cli/</link><description>Recent content in CLI on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go/go-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/cli/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Cobra</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go/go-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/cli/cobra/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go/go-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/cli/cobra/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/spf13/cobra">GitHub 项目，spf13/cobra&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cobra.dev/">官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zhangguanzhang.github.io/2019/06/02/cobra/">https://zhangguanzhang.github.io/2019/06/02/cobra/&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Cobra 是一个 golang 的库，其提供简单的接口来创建强大现代的 CLI 接口，类似于 git 或者 go 工具。同时，它也是一个应用，用来生成个人应用框架，从而开发以 Cobra 为基础的应用。热门的 docker 和 k8s 源码中都使用了 Cobra
Cobra 结构由三部分组成：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Command(命令)&lt;/strong> #&lt;/li>
&lt;li>&lt;strong>Args(参数)&lt;/strong> #&lt;/li>
&lt;li>&lt;strong>Flag(标志)&lt;/strong> #&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Command&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Use&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#75715e">// The one-line usage message.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Short&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#75715e">// The short description shown in the &amp;#39;help&amp;#39; output.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Long&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#75715e">// The long message shown in the &amp;#39;help&amp;lt;this-command&amp;gt;&amp;#39; output.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Run&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">cmd&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Command&lt;/span>, &lt;span style="color:#a6e22e">args&lt;/span> []&lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#75715e">// Run runs the command.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>传统 Linux 和 unix 的话命令规范为情况为下面几种&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 单独命令,例如date&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>date
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 带选项的命令&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ls -l
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 选项有值&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>last -n &lt;span style="color:#ae81ff">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 短选项合起来写,注意合起来写的时候最后一个选项以外的选项都必须是无法带值的，例如last -n 3 -R只能合起来写成下面的&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>last -Rn &lt;span style="color:#ae81ff">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 无值的长选项&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rm --force
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 带值的长选项&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>last --num &lt;span style="color:#ae81ff">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>last --num&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>find -type f
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 值能追加的命令&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>command --host ip1 --host ip2 &lt;span style="color:#75715e">#命令内部能完整读取所有host做处理&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 带args的命令&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rm file1 file2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cat -n file1 file2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 多级命令&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ip addr show
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ip addr delete xxx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 所有情况的命令&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cmd sub_cmd1 subcmd2 --host 10.0.0.2 -nL3 -d &lt;span style="color:#e6db74">&amp;#39;:&amp;#39;&lt;/span> --username&lt;span style="color:#f92672">=&lt;/span>admin &lt;span style="color:#e6db74">&amp;#39;^a&amp;#39;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;^b&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>而 cobra 是针对长短选项和多级命令都支持的库，单独或者混合都是支持的，不过大多数还是用来写多级命令的 cli tool 用的。命令的格式为下列&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>rootCommand subcommand1 subcommand2 -X value --XXXX value -Y a -Y b --ZZ c --ZZ d args1 args2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>前三个是不同场景下的说明，最后一个是要执行的函数&lt;/p>
&lt;h2 id="使用-cobra-编写的典型项目">使用 Cobra 编写的典型项目&lt;/h2>
&lt;p>Cobra 用于许多 Go 项目，例如 &lt;a href="https://kubernetes.io/">Kubernetes&lt;/a>、 &lt;a href="https://gohugo.io/">Hugo&lt;/a> 和 &lt;a href="https://github.com/cli/cli">GitHub CLI&lt;/a> 等等。&lt;a href="https://github.com/spf13/cobra/blob/main/projects_using_cobra.md">此列表&lt;/a>包含更广泛的使用 Cobra 的项目列表。
&lt;a href="https://github.com/gohugoio/hugo">https://github.com/gohugoio/hugo&lt;/a>
&lt;a href="https://github.com/containerd/nerdctl">https://github.com/containerd/nerdctl&lt;/a>&lt;/p>
&lt;h1 id="安装与导入">安装与导入&lt;/h1>
&lt;p>安装&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>go get -u github.com/spf13/cobra@latest
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>导入&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#e6db74">&amp;#34;github.com/spf13/cobra&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="cobra-命令行工具">Cobra 命令行工具&lt;/h2>
&lt;p>cobra-cli 是一个命令行程序，用于生成 Cobra 应用程序和命令文件。它将引导您的应用程序脚手架以快速开发基于 Cobra 的应用程序。这是将 Cobra 合并到您的应用程序中的最简单方法。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>go install github.com/spf13/cobra-cli@latest
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>安装后会创建一个可执行文件 cobra-cli 位于 &lt;code>${GOPATH}/bin&lt;/code> 目录中&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ go env | grep GOPATH
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>GOPATH&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/home/lichenhao/go&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ which cobra-cli
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/home/lichenhao/go/bin/cobra-cli
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="cobra-的基本使用">Cobra 的基本使用&lt;/h1>
&lt;p>我们使用 &lt;code>go mod init github.com/DesistDaydream/go-cobra&lt;/code> 初始化一个项目。
Cobra 的应用程序目录结构通常如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ tree
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── LICENSE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── cmd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── root.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── go.mod
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── go.sum
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── main.go
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>cobra-cli 默认情况下，Cobra 将添加 Apache 许可证。如果您不想这样，可以将标志添加 &lt;code>-l none&lt;/code> 到所有生成器命令。但是，它会在每个文件顶部添加 &lt;code>Copyright © 2022 NAME HERE &amp;lt;EMAIL ADDRESS&amp;gt;&lt;/code> 这样的添加版权声明。如果通过选项 &lt;code>-a YOUR NAME&lt;/code> 则索赔将包含您的姓名。
&lt;strong>注意：使用 cobra-cli 生成的目录结构在真正使用时并不灵活，我们通常会将 XXXCmd 变量封装到函数数，以便可以对变量进行更多的处理。灵活性更大。下面的使用示例并不是生产推荐的结构和用法。&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>main.go&lt;/code> 文件非常简单，只有一个目的，初始化 Cobra&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#e6db74">&amp;#34;github.com/DesistDaydream/go-cobra/cmd&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">cmd&lt;/span>.&lt;span style="color:#a6e22e">Execute&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="创建命令">创建命令&lt;/h2>
&lt;p>&lt;code>Command{}&lt;/code> 是 Cobra 命令的&lt;strong>核心结构体&lt;/strong>，只有有了这个结构体，才能围绕命令执行方法、设置命令行标志等。&lt;/p>
&lt;h3 id="创建根命令rootcmd">创建根命令(rootCmd)&lt;/h3>
&lt;p>根命令通常放在 &lt;code>cmd/root.go&lt;/code> 文件中&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// rootCmd 表示在没有任何子命令调用的情况时的基本命令
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">rootCmd&lt;/span> = &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">cobra&lt;/span>.&lt;span style="color:#a6e22e">Command&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Use&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;go-cobra&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Short&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;这个应用简要的描述&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Long&lt;/span>: &lt;span style="color:#e6db74">`横跨多行的较长描述，可能包含示例和使用应用程序的用法。 例如：
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">当我运行程序时，会显示该描述内容
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> 如果使用缩进，这行在界面展示时有缩进。`&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Run&lt;/span>: &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">cmd&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">cobra&lt;/span>.&lt;span style="color:#a6e22e">Command&lt;/span>, &lt;span style="color:#a6e22e">args&lt;/span> []&lt;span style="color:#66d9ef">string&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 如果这个应用没有任何子命令，直接使用 go-cobra 执行的话，将会执行这里面的代码
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="创建子命令">创建子命令&lt;/h3>
&lt;p>使用 &lt;code>Command.AddCommand()&lt;/code> 方法将一个或多个命令添加到父命令中，下面的示例可以为根命令添加一个 version 子命令。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">init&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">rootCmd&lt;/span>.&lt;span style="color:#a6e22e">AddCommand&lt;/span>(&lt;span style="color:#a6e22e">versionCmd&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">versionCmd&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">cobra&lt;/span>.&lt;span style="color:#a6e22e">Command&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Use&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;version&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Short&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;这个命令的简要描述&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Long&lt;/span>: &lt;span style="color:#e6db74">`横跨多行的较长描述，可能包含示例和使用命令的用法。`&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Run&lt;/span>: &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">cmd&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">cobra&lt;/span>.&lt;span style="color:#a6e22e">Command&lt;/span>, &lt;span style="color:#a6e22e">args&lt;/span> []&lt;span style="color:#66d9ef">string&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;version called&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="flag命令行标志">Flag(命令行标志)&lt;/h2>
&lt;p>标志可以是“持久的”，这意味着该标志将可用于分配给它的命令以及该命令下的每个命令。对于全局标志，将标志分配为根上的持久标志。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">rootCmd&lt;/span>.&lt;span style="color:#a6e22e">PersistentFlags&lt;/span>().&lt;span style="color:#a6e22e">StringVarP&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">rootFlags&lt;/span>.&lt;span style="color:#a6e22e">CfgFile&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;config&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;c&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;指定配置文件&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>也可以在本地分配一个标志，它只适用于该特定命令&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">rootCmd&lt;/span>.&lt;span style="color:#a6e22e">Flags&lt;/span>().&lt;span style="color:#a6e22e">BoolP&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;toggle&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;t&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">false&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;关于toggle标志的帮助信息&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>实际命令都有选项，分为持久和本地，持久例如&lt;code>kubectl&lt;/code>的&lt;code>-n&lt;/code>可以用在很多二级命令下，本地命令选项则不会被继承到子命令。我们给 remove 添加一个移除指定名字的选项，修改&lt;code>cmd/remove.go&lt;/code>的 init 函数：
添加 Flags 使用 &lt;code>Command.Flags()&lt;/code> 或 &lt;code>cmd.PersistentFlags()&lt;/code> 方法，具体有以下使用规律&lt;/p>
&lt;ul>
&lt;li>
&lt;!-- raw HTML omitted -->
&lt;/li>
&lt;li>&lt;!-- raw HTML omitted -->P&lt;/li>
&lt;li>&lt;!-- raw HTML omitted -->Var&lt;/li>
&lt;li>&lt;!-- raw HTML omitted -->VarP&lt;/li>
&lt;/ul>
&lt;p>带 P 的相对没带 P 的多了个短选项,没带 P 的选项只能用&lt;code>--long-iotion&lt;/code>这样，而不能使用 &lt;code>-l&lt;/code> 这种。&lt;/p>
&lt;ul>
&lt;li>获取选项的值用&lt;code>cmd.Flags().GetString(&amp;quot;name&amp;quot;)&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>不带 Var 的获取值使用&lt;code>Get&amp;lt;type&amp;gt;(&amp;quot;FlagName&amp;quot;)&lt;/code>，这样似乎非常麻烦，实际中都是用后面俩种 Var 直接传入地址自动注入的，例如&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">dates&lt;/span> &lt;span style="color:#66d9ef">int32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">cmd&lt;/span>.&lt;span style="color:#a6e22e">Flags&lt;/span>().&lt;span style="color:#a6e22e">Int32VarP&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">dates&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;date&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;d&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">1234&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;this is var test&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>type 有 &lt;code>Slice&lt;/code>，&lt;code>Count&lt;/code>，&lt;code>Duration&lt;/code>,&lt;code>IP&lt;/code>,&lt;code>IPMask&lt;/code>,&lt;code>IPNet&lt;/code> 之类的类型,Slice 类型可以多个传入，直接获取就是一个切片，例如 &lt;code>--master ip1 --master ip2&lt;/code>&lt;/li>
&lt;li>类似 &lt;code>--force&lt;/code> 这样的开关型选项，实际上用 Bool 类型即可，默认值设置为 false，单独给选项不带值就是 true，也可以手动传入 false 或者 true&lt;/li>
&lt;li>MarkDeprecated 告诉用户放弃这个标注位，应该使用新标志位，MarkShorthandDeprecated 是只放弃短的，长标志位依然可用。MarkHidden 隐藏标志位&lt;/li>
&lt;li>&lt;code>MarkFlagRequired(&amp;quot;region&amp;quot;)&lt;/code> 表示 region 是必须的选项，不设置下选项都是可选的&lt;/li>
&lt;/ul>
&lt;h2 id="读取配置文件">读取配置文件&lt;/h2>
&lt;p>~~类似~~&lt;code>~~kubectl~~&lt;/code>~~ 的~~&lt;code>~~~/.kube/config~~&lt;/code>~~ 和 ~~&lt;code>~~gcloud~~&lt;/code>&lt;del>这些 &lt;del>&lt;code>~~cli~~&lt;/code>&lt;/del> 都会读取一些配置信息，也可以从命令行指定信息。细心观察的话可以看到这个是一直存在在命令帮助上的&lt;/del>&lt;/p>
&lt;pre>&lt;code>Global Flags:
--config string config file (default is $HOME/.cli.yaml)
&lt;/code>&lt;/pre>
&lt;p>~~spf13 里的 viper 包的几个方法就是干这个的，viper 是 cobra 集成的配置文件读取的库
可以通过环境变量读取~~&lt;/p>
&lt;pre>&lt;code>removeCmd.Flags().StringP(&amp;quot;name&amp;quot;, &amp;quot;n&amp;quot;, viper.GetString(&amp;quot;ENVNAME&amp;quot;), &amp;quot;The application to be executed&amp;quot;)
&lt;/code>&lt;/pre>
&lt;p>~~默认可以在 &lt;del>&lt;code>~~cmd/root.go~~&lt;/code>&lt;/del> 文件里看到默认配置文件是家目录下的.应用名，这里我是~~&lt;code>~~$HOME/.cli.yaml~~&lt;/code>&lt;del>，创建并添加下面内容&lt;/del>&lt;/p>
&lt;pre>&lt;code>name: &amp;quot;Billy&amp;quot;
greeting: &amp;quot;Howdy&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>~~Command 的 Run 里提取字段~~&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">Run&lt;/span>: &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">cmd&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">cobra&lt;/span>.&lt;span style="color:#a6e22e">Command&lt;/span>, &lt;span style="color:#a6e22e">args&lt;/span> []&lt;span style="color:#66d9ef">string&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">greeting&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Hello&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">name&lt;/span>, &lt;span style="color:#a6e22e">_&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">cmd&lt;/span>.&lt;span style="color:#a6e22e">Flags&lt;/span>().&lt;span style="color:#a6e22e">GetString&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">name&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;World&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">viper&lt;/span>.&lt;span style="color:#a6e22e">GetString&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>)&lt;span style="color:#f92672">!=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">name&lt;/span> = &lt;span style="color:#a6e22e">viper&lt;/span>.&lt;span style="color:#a6e22e">GetString&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">viper&lt;/span>.&lt;span style="color:#a6e22e">GetString&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;greeting&amp;#34;&lt;/span>)&lt;span style="color:#f92672">!=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">greeting&lt;/span> = &lt;span style="color:#a6e22e">viper&lt;/span>.&lt;span style="color:#a6e22e">GetString&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;greeting&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">greeting&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>},
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>也可以将配置文件中的值绑定到命令行 Flag 里。在下面的示例中，通过 viper 包获取到的 author 的值将会绑定到命令行 Flag 的 author 中：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">author&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">init&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">rootCmd&lt;/span>.&lt;span style="color:#a6e22e">PersistentFlags&lt;/span>().&lt;span style="color:#a6e22e">StringVar&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">author&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;author&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;YOUR NAME&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Author name for copyright attribution&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">viper&lt;/span>.&lt;span style="color:#a6e22e">BindPFlag&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;author&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">rootCmd&lt;/span>.&lt;span style="color:#a6e22e">PersistentFlags&lt;/span>().&lt;span style="color:#a6e22e">Lookup&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;author&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 不想使用的话相关可以注释掉 viper 相关的，编译出来的程序能小几M
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="rootgo-文件简单示例">root.go 文件简单示例&lt;/h1>
&lt;p>&lt;code>rootCmd&lt;/code> 的声明通常会被封装在一个函数中，这个封装函数会被 Execute() 执行。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">Copyright © 2022 NAME HERE &amp;lt;EMAIL ADDRESS&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">cmd&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;os&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">vipercmd&lt;/span> &lt;span style="color:#e6db74">&amp;#34;github.com/DesistDaydream/go-cobra/cmd/viper&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;github.com/DesistDaydream/go-cobra/config&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;github.com/spf13/cobra&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">RootFlags&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 这里定义的变量，可以在下面的 init 函数中，通过 rootCmd.PersistentFlags().StringVar(&amp;amp;CfgFile, &amp;#34;config&amp;#34;, &amp;#34;&amp;#34;, &amp;#34;指定配置文件(默认在$HOME/.cobracli.yaml)&amp;#34;) 进行绑定
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 也可以通过 viper 进行绑定
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">CfgFile&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">rootFlags&lt;/span> &lt;span style="color:#a6e22e">RootFlags&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Execute 将所有子命令添加到根命令并设置 Flags。这由 main.main() 调用。它只需要对 rootCmd 发生一次。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Execute&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">app&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">newApp&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">app&lt;/span>.&lt;span style="color:#a6e22e">Execute&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">Exit&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">newApp&lt;/span>() &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">cobra&lt;/span>.&lt;span style="color:#a6e22e">Command&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// rootCmd 表示在没有任何子命令调用的情况时的基本命令。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">rootCmd&lt;/span> = &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">cobra&lt;/span>.&lt;span style="color:#a6e22e">Command&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Use&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;go-cobra&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Short&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;这个应用简要的描述&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Long&lt;/span>: &lt;span style="color:#e6db74">`横跨多行的较长描述，可能包含示例和使用应用程序的用法。 例如：
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">当我运行程序时，会显示该描述内容
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> 如果使用缩进，这行在界面展示时有缩进。`&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 如果这个应用没有任何子命令，直接使用 go-cobra 执行的话，将会执行下面 Run 字段指定的函数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Run&lt;/span>: &lt;span style="color:#a6e22e">rootRun&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 我们可以在这里定义命令行 Flags 和 配置设置。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 这里可以做一些初始化的工作，比如初始化数据库连接、初始化日志、读取配置文件等等
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ######## 添加 命令行Flags ########
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Cobra 支持 持久性flags (i.e. Global Flags)，如果在这个位置定义，则这些 flags 对应用程序来说是全局的。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 第一个参数是变量，用于存储该flag的值；第二个参数为该flag的名字；第三个参数为该flag的默认值,无默认值可以为空；第四个参数是该flag的描述信息
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 比如我现在使用如下命令: go-cobra --config abc 。那么 cfgFile 的值为abc。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">rootCmd&lt;/span>.&lt;span style="color:#a6e22e">PersistentFlags&lt;/span>().&lt;span style="color:#a6e22e">StringVarP&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">rootFlags&lt;/span>.&lt;span style="color:#a6e22e">CfgFile&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;config&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;c&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;指定配置文件&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Cobra 还支持本地 flags ，仅在直接调用此命令时才有意义。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">rootCmd&lt;/span>.&lt;span style="color:#a6e22e">Flags&lt;/span>().&lt;span style="color:#a6e22e">BoolP&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;toggle&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;t&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">false&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;关于toggle标志的帮助信息&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ######## 添加 配置 ########
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// ！！！注意！！！：Cobra 只有在上面的 Run 字段定义的函数运行之前才会解析手动指定的命令行 Flags，否则只能获取到代码中设置的 Flags 默认值。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 比如运行 go run main.go --config=&amp;#34;abc.yaml&amp;#34; 时，rootFlags.CfgFile 并不会被赋值为 abc.yaml，而是默认值。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 此时有两种方式解决这个问题：
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 1. 使用 Prase() 函数，提前解析 Flags：
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// rootCmd.PersistentFlags().Parse(os.Args)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 2. 使用 OnInitialize() 函数，该函数会在 Command.Run 字段指定的函数执行前，先执行 initConfig 函数。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 查看 Cobra 源码，OnInitialize() 中的 initializers 变量会在 preRun() 函数中被执行。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">cobra&lt;/span>.&lt;span style="color:#a6e22e">OnInitialize&lt;/span>(&lt;span style="color:#a6e22e">initConfig&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 假如我现在在这里执加了一行 config.NewConfig(rootFlags.CfgFile)，那么这个函数其实是会在 OnInitialize 函数执行之前执行的。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// config.NewConfig(rootFlags.CfgFile)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ######## 添加 子命令 ########
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 为了更好的管理子命令，我们通常会将子命令放在不同的文件中，然后在这里进行注册
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">rootCmd&lt;/span>.&lt;span style="color:#a6e22e">AddCommand&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">NewVersionCmd&lt;/span>(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">vipercmd&lt;/span>.&lt;span style="color:#a6e22e">NewViperCmd&lt;/span>(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">rootCmd&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">initConfig&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 使用 Viper 简化处理配置文件的过程。Viper 可以从 JSON、TOML、YAML、HCL、环境变量和命令行参数等等地方中读取配置。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">config&lt;/span>.&lt;span style="color:#a6e22e">NewConfig&lt;/span>(&lt;span style="color:#a6e22e">rootFlags&lt;/span>.&lt;span style="color:#a6e22e">CfgFile&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">rootRun&lt;/span>(&lt;span style="color:#a6e22e">cmd&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">cobra&lt;/span>.&lt;span style="color:#a6e22e">Command&lt;/span>, &lt;span style="color:#a6e22e">args&lt;/span> []&lt;span style="color:#66d9ef">string&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;主程序运行后执行的代码块。如果注销 Run，则运行主程序会显示上面Long上的信息&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;在 Run 字段指定的函数中，我们可以获取到 Flags 的值：&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">rootFlags&lt;/span>.&lt;span style="color:#a6e22e">CfgFile&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="cobracommand-结构体解析">cobra.Command 结构体解析&lt;/h1>
&lt;h3 id="别名aliases">别名(Aliases)&lt;/h3>
&lt;p>现在我们想添加一个别名&lt;/p>
&lt;pre>&lt;code>cli
|----app
|----remove|rm
&lt;/code>&lt;/pre>
&lt;p>我们修改下初始化值即可&lt;/p>
&lt;pre>&lt;code>var removeCmd = &amp;amp;cobra.Command{
Use: &amp;quot;remove&amp;quot;,
Aliases: []string{&amp;quot;rm&amp;quot;},
&lt;/code>&lt;/pre>
&lt;h3 id="命令帮助添加示例example">命令帮助添加示例(Example)&lt;/h3>
&lt;p>我们修改下 remove 的 Run 为下面&lt;/p>
&lt;pre>&lt;code>Run: func(cmd *cobra.Command, args []string) {
if len(args) == 0 {
cmd.Help()
return
}
},
&lt;/code>&lt;/pre>
&lt;p>运行输出里 example 是空的&lt;/p>
&lt;pre>&lt;code>[root@k8s-m1 cli]# go run main.go app remove
A longer description that spans multiple lines and likely contains examples
and usage of using your command. For example:
Cobra is a CLI library for Go that empowers applications.
This application is a tool to generate the needed files
to quickly create a Cobra application.
Usage:
cli app remove [flags]
Aliases:
remove, rm
Flags:
-h, --help help for remove
-n, --name string The application to be executed
Global Flags:
--config string config file (default is $HOME/.cli.yaml)
&lt;/code>&lt;/pre>
&lt;p>添加 example&lt;/p>
&lt;pre>&lt;code>var removeCmd = &amp;amp;cobra.Command{
Use: &amp;quot;remove&amp;quot;,
Aliases: []string{&amp;quot;rm&amp;quot;},
Example: `
cli remove -n test
cli remove --name test
`,
go run main.go app remove
A longer description that spans multiple lines and likely contains examples
and usage of using your command. For example:
Cobra is a CLI library for Go that empowers applications.
This application is a tool to generate the needed files
to quickly create a Cobra application.
Usage:
cli app remove [flags]
Aliases:
remove, rm
Examples:
cli remove -n test
cli remove --name test
Flags:
-h, --help help for remove
-n, --name string The application to be executed
Global Flags:
--config string config file (default is $HOME/.cli.yaml)
&lt;/code>&lt;/pre>
&lt;h3 id="参数验证器args">参数验证器(Args)&lt;/h3>
&lt;p>该字段接收类型为&lt;code>type PositionalArgs func(cmd *Command, args []string) error&lt;/code>
内置的为下面几个:&lt;/p>
&lt;ul>
&lt;li>&lt;code>NoArgs&lt;/code>: 如果存在任何位置参数，该命令将报告错误。&lt;/li>
&lt;li>&lt;code>ArbitraryArgs&lt;/code>: 该命令将接受任何 args。&lt;/li>
&lt;li>&lt;code>OnlyValidArgs&lt;/code>: 如果存在任何不在 ValidArgs 字段中的位置参数，该命令将报告错误 Command。&lt;/li>
&lt;li>&lt;code>MinimumNArgs(int)&lt;/code>: 如果没有至少 N 个位置参数，该命令将报告错误。&lt;/li>
&lt;li>&lt;code>MaximumNArgs(int)&lt;/code>: 如果有多于 N 个位置参数，该命令将报告错误。&lt;/li>
&lt;li>&lt;code>ExactArgs(int)&lt;/code>: 如果没有确切的 N 位置参数，该命令将报告错误。&lt;/li>
&lt;li>&lt;code>RangeArgs(min, max):&lt;/code> 如果 args 的数量不在预期 args 的最小和最大数量之间，则该命令将报告错误。&lt;/li>
&lt;li>自己写的话传入符合类型定义的函数即可```plaintext
Args: func(cmd *cobra.Command, args []string) error {
if len(args) &amp;lt; 1 {
return errors.New(&amp;ldquo;requires at least one arg&amp;rdquo;)
}
if myapp.IsValidColor(args[0]) {
return nil
}
return fmt.Errorf(&amp;ldquo;invalid color specified: %s&amp;rdquo;, args[0])
},&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>
前面说的没传递选项和任何值希望打印命令帮助也可以用`MinimumNArgs(1)`来触发
### [](#Run的hook &amp;#34;Run的hook&amp;#34;)Run的hook[](#Run的hook)
Run功能的执行先后顺序如下：
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>PersistentPreRun&lt;/li>
&lt;li>PreRun&lt;/li>
&lt;li>Run&lt;/li>
&lt;li>PostRun&lt;/li>
&lt;li>PersistentPostRun
接收&lt;code>func(cmd *Command, args []string)&lt;/code>类型的函数，Persistent 的能被下面的子命令继承
RunE 功能的执行先后顺序如下：&lt;/li>
&lt;li>PersistentPreRunE&lt;/li>
&lt;li>PreRunE&lt;/li>
&lt;li>RunE&lt;/li>
&lt;li>PostRunE&lt;/li>
&lt;li>PersistentPostRunE&lt;/li>
&lt;/ul>
&lt;p>接收&lt;code>func(cmd *Command, args []string) error&lt;/code>的函数&lt;/p>
&lt;h3 id="自定义-helpusage-输出">自定义 help,usage 输出&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>help```plaintext
command.SetHelpCommand(cmd *Command)
command.SetHelpFunc(f func(*Command, []string))
command.SetHelpTemplate(s string)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>usage```plaintext
command.SetUsageFunc(f func(*Command) error)
command.SetUsageTemplate(s string)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>
[http://www.xtgxiso.com/golang%E5%AE%9E%E7%8E%B0%E7%9A%84%E4%B8%80%E4%B8%AA%E4%B8%8D%E5%85%B3%E6%B3%A8%E5%93%8D%E5%BA%94%E7%9A%84http%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1/](http://www.xtgxiso.com/golang%E5%AE%9E%E7%8E%B0%E7%9A%84%E4%B8%80%E4%B8%AA%E4%B8%8D%E5%85%B3%E6%B3%A8%E5%93%8D%E5%BA%94%E7%9A%84http%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1/)
[https://blog.csdn.net/cs380637384/article/details/81231817](https://blog.csdn.net/cs380637384/article/details/81231817)
[https://studygolang.com/articles/7588](https://studygolang.com/articles/7588)
[https://www.cppentry.com/bencandy.php?fid=78&amp;amp;aid=213235&amp;amp;page=2](https://www.cppentry.com/bencandy.php?fid=78&amp;amp;aid=213235&amp;amp;page=2)
[https://ordina-jworks.github.io/development/2018/10/20/make-your-own-cli-with-golang-and-cobra.html#getting-started](https://ordina-jworks.github.io/development/2018/10/20/make-your-own-cli-with-golang-and-cobra.html#getting-started)
&lt;/code>&lt;/pre>&lt;h1 id="run-的-hook">Run 的 hook&lt;/h1>
&lt;p>Run 功能的执行先后顺序如下：&lt;/p>
&lt;ul>
&lt;li>PersistentPreRun&lt;/li>
&lt;li>PreRun&lt;/li>
&lt;li>Run&lt;/li>
&lt;li>PostRun&lt;/li>
&lt;li>PersistentPostRun&lt;/li>
&lt;/ul>
&lt;p>接收 &lt;code>func(cmd *Command, args []string)&lt;/code> 类型的函数，Persistent 的能被下面的子命令继承
RunE 功能的执行先后顺序如下：&lt;/p>
&lt;ul>
&lt;li>PersistentPreRunE&lt;/li>
&lt;li>PreRunE&lt;/li>
&lt;li>RunE&lt;/li>
&lt;li>PostRunE&lt;/li>
&lt;li>PersistentPostRunE&lt;/li>
&lt;/ul>
&lt;p>接收 &lt;code>func(cmd *Command, args []string) error&lt;/code> 的函数&lt;/p>
&lt;h3 id="注意">注意&lt;/h3>
&lt;p>当具有多级子命令时，&lt;code>PersistentXXX()&lt;/code> 相关函数只会执行一次
比如现在创建了一个 cobra 命令，具有如下几个子命令&lt;/p>
&lt;ul>
&lt;li>add
&lt;ul>
&lt;li>command&lt;/li>
&lt;li>args&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>del&lt;/li>
&lt;/ul>
&lt;p>如果在 cobra 和 add 中都使用了 PersistentPreRun() 函数的话，只会有第一个执行，并且是子命令的方法优先
参考 Issue：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/spf13/cobra/issues/216">https://github.com/spf13/cobra/issues/216&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/spf13/cobra/issues/252">https://github.com/spf13/cobra/issues/252&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>可以在最底层的子命令中，通过如下方式执行父命令的 &lt;code>PersistenXXX()&lt;/code> 函数&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">CreateCommand&lt;/span>() &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">cobra&lt;/span>.&lt;span style="color:#a6e22e">Command&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">subCmd&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">cobra&lt;/span>.&lt;span style="color:#a6e22e">Command&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">PersistentPreRun&lt;/span>: &lt;span style="color:#a6e22e">subPersistentPreRun&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">subCmd&lt;/span>.&lt;span style="color:#a6e22e">AddCommand&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">CreateSubSubCommand&lt;/span>(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">subCmd&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">subPersistentPreRun&lt;/span>(&lt;span style="color:#a6e22e">cmd&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">cobra&lt;/span>.&lt;span style="color:#a6e22e">Command&lt;/span>, &lt;span style="color:#a6e22e">args&lt;/span> []&lt;span style="color:#66d9ef">string&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 执行父命令的预运行逻辑
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">parent&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">cmd&lt;/span>.&lt;span style="color:#a6e22e">Parent&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">parent&lt;/span>.&lt;span style="color:#a6e22e">PersistentPreRun&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">parent&lt;/span>.&lt;span style="color:#a6e22e">PersistentPreRun&lt;/span>(&lt;span style="color:#a6e22e">parent&lt;/span>, &lt;span style="color:#a6e22e">args&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 本子命令的预运行逻辑
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="注意-2">注意 2：&lt;/h3>
&lt;p>&lt;code>parent.PersistentPreRun(parent, args)&lt;/code> 函数只会让下面一层子命令集成，也就是说，如果有这么一个命令 &lt;code>cmd c1 c2 c3 c4&lt;/code>，此时我们在 c1 出执行 &lt;code>parent.PersistentPreRun(parent, args)&lt;/code>，那么执行 c3 或 c4 时，上述继承效果将不会生效。如果想要让 c4 也继承 c1 的，则需要在 c2 和 c3 出也执行 &lt;code>parent.PersistentPreRun(parent, args)&lt;/code> 函数&lt;/p>
&lt;h2 id="自定义-helpusage-输出-1">自定义 help,usage 输出&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>help&lt;/p>
&lt;pre>&lt;code> command.SetHelpCommand(cmd *Command)command.SetHelpFunc(f func(*Command, []string))command.SetHelpTemplate(s string)
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>usage&lt;/p>
&lt;pre>&lt;code> command.SetUsageFunc(f func(*Command) error)command.SetUsageTemplate(s string)
&lt;/code>&lt;/pre>
&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="http://www.xtgxiso.com/golang%25E5%25AE%259E%25E7%258E%25B0%25E7%259A%2584%25E4%25B8%2580%25E4%25B8%25AA%25E4%25B8%258D%25E5%2585%25B3%25E6%25B3%25A8%25E5%2593%258D%25E5%25BA%2594%25E7%259A%2584http%25E4%25BB%25A3%25E7%2590%2586%25E6%259C%258D%25E5%258A%25A1/">http://www.xtgxiso.com/golang%E5%AE%9E%E7%8E%B0%E7%9A%84%E4%B8%80%E4%B8%AA%E4%B8%8D%E5%85%B3%E6%B3%A8%E5%93%8D%E5%BA%94%E7%9A%84http%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1/&lt;/a>
&lt;a href="https://blog.csdn.net/cs380637384/article/details/81231817">https://blog.csdn.net/cs380637384/article/details/81231817&lt;/a>
&lt;a href="https://studygolang.com/articles/7588">https://studygolang.com/articles/7588&lt;/a>
&lt;a href="https://www.cppentry.com/bencandy.php?fid=78&amp;amp;aid=213235&amp;amp;page=2">https://www.cppentry.com/bencandy.php?fid=78&amp;amp;aid=213235&amp;amp;page=2&lt;/a>
&lt;a href="https://ordina-jworks.github.io/development/2018/10/20/make-your-own-cli-with-golang-and-cobra.html#getting-started">https://ordina-jworks.github.io/development/2018/10/20/make-your-own-cli-with-golang-and-cobra.html#getting-started&lt;/a>&lt;/p></description></item><item><title>Docs: urfave/cli</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go/go-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/cli/urfave_cli/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go/go-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/cli/urfave_cli/</guid><description>
&lt;h1 id="概述">概述&lt;/h1></description></item></channel></rss>