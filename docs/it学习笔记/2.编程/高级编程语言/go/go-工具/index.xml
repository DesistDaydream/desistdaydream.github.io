<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – Go 工具</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go/go-%E5%B7%A5%E5%85%B7/</link><description>Recent content in Go 工具 on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go/go-%E5%B7%A5%E5%85%B7/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Go 工具</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go/go-%E5%B7%A5%E5%85%B7/go-%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go/go-%E5%B7%A5%E5%85%B7/go-%E5%B7%A5%E5%85%B7/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://go.dev/doc/cmd">官方文档，命令文档&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>go 是用来管理 Go 编程语言源代码的工具&lt;/p>
&lt;h1 id="go">go&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://pkg.go.dev/cmd/go">Go 包，标准库-cmd-go&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>go 是一个工具，用来管理 Go 语言编写的代码。该工具由多个子命令组成。每个子命令可以实现不同类型的功能。&lt;/p>
&lt;h2 id="bug--start-a-bug-report">bug # start a bug report&lt;/h2>
&lt;h2 id="buildhttpspkggodevcmdgohdr-compile_packages_and_dependencies--编译-package-及其依赖">&lt;a href="https://pkg.go.dev/cmd/go#hdr-Compile_packages_and_dependencies">build&lt;/a> # 编译 package 及其依赖&lt;/h2>
&lt;p>默认编译当前路径下的代码包及其依赖，生成一个可执行文件
OPTIONS&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-o &lt;!-- raw HTML omitted -->&lt;/strong> # 指定构建完成后生成的文件名为 NAME&lt;/li>
&lt;li>&lt;strong>-x&lt;/strong> # 输出 Go 程序编译、链接、打包的全过程。包括都使用了哪些库、执行了什么命令、等等&lt;/li>
&lt;/ul>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>指定构建名称
&lt;ul>
&lt;li>go build -o jhs_cli cmd/jhs_cli/main.go&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="clean--remove-object-files-and-cached-files">clean # remove object files and cached files&lt;/h2>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>go clean -i github.com/spf13/cobra/cobra #&lt;/li>
&lt;/ul>
&lt;p>doc show documentation for package or symbol&lt;/p>
&lt;p>env print Go environment information&lt;/p>
&lt;p>fix update packages to use new APIs&lt;/p>
&lt;p>fmt gofmt (reformat) package sources&lt;/p>
&lt;p>generate generate Go files by processing source&lt;/p>
&lt;h2 id="get-下载并安装-package-及其依赖">get #下载并安装 package 及其依赖&lt;/h2>
&lt;p>OPTIONS&lt;/p>
&lt;ul>
&lt;li>-u #更新现有依赖，强制更新它所依赖的其他全部模块，不包括自身&lt;/li>
&lt;li>-t #更新所有直接依赖和间接依赖的模块版本，包括单元测试中用到的。&lt;/li>
&lt;/ul>
&lt;p>install compile and install packages and dependencies&lt;/p>
&lt;p>list list packages or modules&lt;/p>
&lt;h2 id="mod--go-模块维护与管理命令">mod # go 模块维护与管理命令&lt;/h2>
&lt;p>详见《[Go Module](/docs/IT学习笔记/2.编程/高级编程语言/Go/Go%20 环境安装与使用/Go%20Module.md 环境安装与使用/Go Module.md)》章节&lt;/p>
&lt;h2 id="run--编译并运行-go-程序">run # 编译并运行 Go 程序&lt;/h2>
&lt;h2 id="test--test-packages">test # test packages&lt;/h2>
&lt;p>详见 《[Go 单元测试](/docs/IT学习笔记/2.编程/高级编程语言/Go/Go%20 单元测试.md 单元测试.md)》 章节&lt;/p>
&lt;h2 id="tool--run-specified-go-tool">tool # run specified go tool&lt;/h2>
&lt;h2 id="vet--report-likely-mistakes-in-packages">vet # report likely mistakes in packages&lt;/h2>
&lt;h1 id="其他工具">其他工具&lt;/h1>
&lt;p>很多 Go 语言生态的工具为我们编写代码提供了强大的支持，这些工具通常会作为 IDE 的插件被安装
比如 VSCode 中，当我们安装完 Go 的所有工具后，右键点击代码会出现如下提示：
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gy06h4/1654832963071-167da116-2e44-4818-a22c-37dc041ebafc.png" alt="image.png">
通过这些工具，我们可以&lt;/p>
&lt;ul>
&lt;li>检查代码问题&lt;/li>
&lt;li>自动创建测试代码&lt;/li>
&lt;li>自动格式化代码&lt;/li>
&lt;li>等等&lt;/li>
&lt;/ul>
&lt;h2 id="gopls">gopls&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/golang/tools">GitHub 项目，golang/tools&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.modb.pro/db/87143">VSCode 建议你启用 gopls，它到底是个什么东东&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>gopls 是一个用以实现 &lt;a href="https://en.wikipedia.org/wiki/Language_Server_Protocol">LSP&lt;/a> 的官方工具。&lt;/p>
&lt;h2 id="gotests">gotests&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/cweill/gotests">GitHub 项目，cweill/gotests&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>gotests 工具可以让我们更容易得编写 Go 单元测试。该工具可以根据目标源文件的 函数 和 方法 自动生成测试用例。测试文件中的任何新依赖项都会自动导入。
gotests 可以作为 IDE 的插件提供更方便的使用，下面是一个 Sublime Text3 插件的示例
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gy06h4/1654843875110-6dbf3a8d-1512-4022-bb7d-210084311509.gif" alt="">
在 &lt;a href="https://github.com/damienlevin/GoTests-Emacs">Emacs&lt;/a>, also &lt;a href="https://github.com/s-kostyaev/go-gen-test">Emacs&lt;/a>, &lt;a href="https://github.com/buoto/gotests-vim">Vim&lt;/a>, &lt;a href="https://atom.io/packages/gotests">Atom Editor&lt;/a>, &lt;a href="https://github.com/Microsoft/vscode-go">Visual Studio Code&lt;/a>, and &lt;a href="https://www.jetbrains.com/help/go/run-debug-configuration-for-go-test.html">IntelliJ Goland&lt;/a> 等 IDE 中也有这个插件。当然，如果不想在 IDE 中使用，也可以在命令行直接使用 gotests。、、、、、、&lt;/p>
&lt;h3 id="简单示例">简单示例&lt;/h3>
&lt;p>假如有一个文件 unit_tests.go 如下代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">UnitTests&lt;/span>(&lt;span style="color:#a6e22e">needArgs&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">needArgs&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;unittests&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>gotests 将会创建一个 unit_tests_test.go 文件，并为 UnitTests() 函数生成测试用例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">TestUnitTests&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">testing&lt;/span>.&lt;span style="color:#a6e22e">T&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 这是是测试时需要传递给 UnitTests() 的参数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">args&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">needArgs&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 可以创建多个测试
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">tests&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> []&lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 测试名称
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 需要传递给 UnitTests() 的参数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">args&lt;/span> &lt;span style="color:#a6e22e">args&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 需要判断 UnitTests() 的返回值
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">want&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// TODO: 在这里写具体的测试用例，也就是执行 UnitTests() 时想要传递的参数和想要获取到的返回值
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 这是一个 struct 类型的数组，注意书写格式。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;这是第一条测试在下面填写测试想要传递的参数以及想要获取到的返回值&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">args&lt;/span>: &lt;span style="color:#a6e22e">args&lt;/span>{&lt;span style="color:#e6db74">&amp;#34;unittests&amp;#34;&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">want&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;这里是第二条测试用例中需要用到的信息&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">args&lt;/span>: &lt;span style="color:#a6e22e">args&lt;/span>{&lt;span style="color:#e6db74">&amp;#34;这里的参数会导致返回值为 false,进而会导致本次测试失败&amp;#34;&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">want&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 执行我们提供的每一条测试用例
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">tt&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">tests&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Run&lt;/span>(&lt;span style="color:#a6e22e">tt&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">testing&lt;/span>.&lt;span style="color:#a6e22e">T&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">got&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">UnitTests&lt;/span>(&lt;span style="color:#a6e22e">tt&lt;/span>.&lt;span style="color:#a6e22e">args&lt;/span>.&lt;span style="color:#a6e22e">needArgs&lt;/span>); &lt;span style="color:#a6e22e">got&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#a6e22e">tt&lt;/span>.&lt;span style="color:#a6e22e">want&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 如果 UnitTests() 的返回值与我们填写的 want(即想要获得的返回值) 不一致，那么将会报错
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;UnitTests() = %v, want %v&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">got&lt;/span>, &lt;span style="color:#a6e22e">tt&lt;/span>.&lt;span style="color:#a6e22e">want&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行测试后效果如下：
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gy06h4/1654845554292-4eb67713-5aac-400a-894f-55242b3fe799.png" alt="image.png">&lt;/p>
&lt;h3 id="syntax语法">Syntax(语法)&lt;/h3>
&lt;p>&lt;strong>gotests [OPTIONS] PATH&amp;hellip;&lt;/strong>&lt;/p>
&lt;h2 id="dlv">dlv&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/go-delve/delve">GitHub 项目，go-delve/delve&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Delve 是 Go 编程语言的调试器。该项目的目标是为 Go 提供一个简单、功能齐全的调试工具。 Delve 应该易于调用和使用。如果您使用的是调试器，那么事情可能不会如您所愿。考虑到这一点，Delve 应该尽可能地远离你。&lt;/p>
&lt;h2 id="impl">impl&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/josharian/impl">GitHub 项目，josharian/impl&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>impl 用于生成实现接口的 [Method stub](&amp;lt;/docs/IT学习笔记/2.编程/Programming(编程)/Programming(编程).md&amp;raquo;)&lt;/p>
&lt;h3 id="简单示例-1">简单示例&lt;/h3>
&lt;p>通过 Go: Generate Interface Stubs 可以快速生成某个接口下的方法
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gy06h4/1642038271876-e8806fd8-1531-4c24-b1f4-a7f4d9ae306a.png" alt="image.png">
语法：&lt;code>VAR *STRUCT INTERFACE&lt;/code>
比如，我想让 &lt;code>File&lt;/code> 结构体实现 &lt;code>io.Closer&lt;/code> 接口，则输入:&lt;code>f *File io.Closer&lt;/code>，将会生成如下方法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">f&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">File&lt;/span>) &lt;span style="color:#a6e22e">Close&lt;/span>() &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> panic(&lt;span style="color:#e6db74">&amp;#34;not implemented&amp;#34;&lt;/span>) &lt;span style="color:#75715e">// TODO: Implement
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>也可以通过命令行，使用 &lt;code>impl 'f *File' io.Closer&lt;/code> 命令生成方法。&lt;/p>
&lt;/blockquote>
&lt;p>若提示 &lt;code>Cannot stub interface: unrecognized interface: handler.YuqeData&lt;/code>导致无法生成方法，则对接口使用一下 &lt;code>Find All Implementations&lt;/code>
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gy06h4/1642045391841-a1d01b46-deda-4561-b9b6-de714d8ee672.png" alt="image.png">&lt;/p>
&lt;h2 id="gomodifytags">gomodifytags&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/fatih/gomodifytags">GitHub 项目，fatih/gomodifytags&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="staticcheck">staticcheck&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/dominikh/go-tools">GitHub 项目，dominikh/go-tools&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://staticcheck.io/">官网&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Staticcheck 是一个高级 Go Linter，即用于 Go 的代码检查工具，使用静态分析，可以发现错误和性能问题，提供简化，并强制执行样式规则&lt;/p>
&lt;h2 id="goplay">goplay&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/haya14busa/goplay">GitHub 项目，haya14busa/goplay&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>goplay 可以让代码通过 &lt;a href="https://play.golang.org/">https://play.golang.org/&lt;/a> 打开（这是一个在线运行 Go 代码的网站）。&lt;/p></description></item><item><title>Docs: pprof(go程序的性能分析器)</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go/go-%E5%B7%A5%E5%85%B7/pprofgo%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%99%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go/go-%E5%B7%A5%E5%85%B7/pprofgo%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%99%A8/</guid><description>
&lt;h1 id="heading">&lt;/h1>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://go.dev/doc/diagnostics">Go 官方文档，诊断&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/google/pprof">GitHub 项目，google/pprof&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/google/pprof/tree/master/doc">GitHub 项目-文档，google/pprof/doc&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://pkg.go.dev/net/http/pprof">Go 包，net/http/pprof&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://go.dev/blog/pprof">Go 博客，分析 Go 程序&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://segmentfault.com/a/1190000016412013">思否，Golang 大杀器之性能剖析 PProf&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>pprof 是一个可视化和分析 Profiling 数据的工具。pprof 可以从目标获取运行数据并生成 profile.proto 格式的 Profiles 文件，还可以读取 profile.proto 格式的 Profiling 样本集合，并生成报告。&lt;/p>
&lt;p>profile.proto 是一个协议缓冲区，描述了一组调用堆栈和符号化信息。详见 &lt;a href="https://developers.google.com/protocol-buffers">https://developers.google.com/protocol-buffers&lt;/a>&lt;/p>
&lt;p>可以通过本地文件或 HTTP 读取 Profiles 文件。同时也可以聚合或比较多个 Profiles 文件。每个 profile.prot 格式的 Profile 样本的集合。&lt;/p>
&lt;h2 id="使用-pprof">使用 pprof&lt;/h2>
&lt;p>想要使用 pprof 程序非常简单，只需要引入 &lt;code>net/http/pprof&lt;/code> 包，并启动监听即可&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;log&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;net/http&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">_&lt;/span> &lt;span style="color:#e6db74">&amp;#34;net/http/pprof&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">ListenAndServe&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;localhost:18080&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Fatal&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;ListenAndServe: &amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意：若不使用 &lt;code>DefaultServeMux&lt;/code>，则我们需要手动注册处理程序，效果如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;log&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;net/http&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">_&lt;/span> &lt;span style="color:#e6db74">&amp;#34;net/http/pprof&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">mux&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">NewServeMux&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">mux&lt;/span>.&lt;span style="color:#a6e22e">Handle&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/debug/pprof/&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">HandlerFunc&lt;/span>(&lt;span style="color:#a6e22e">pprof&lt;/span>.&lt;span style="color:#a6e22e">Index&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">mux&lt;/span>.&lt;span style="color:#a6e22e">Handle&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/debug/pprof/cmdline&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">HandlerFunc&lt;/span>(&lt;span style="color:#a6e22e">pprof&lt;/span>.&lt;span style="color:#a6e22e">Cmdline&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">mux&lt;/span>.&lt;span style="color:#a6e22e">Handle&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/debug/pprof/profile&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">HandlerFunc&lt;/span>(&lt;span style="color:#a6e22e">pprof&lt;/span>.&lt;span style="color:#a6e22e">Profile&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">mux&lt;/span>.&lt;span style="color:#a6e22e">Handle&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/debug/pprof/symbol&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">HandlerFunc&lt;/span>(&lt;span style="color:#a6e22e">pprof&lt;/span>.&lt;span style="color:#a6e22e">Symbol&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">mux&lt;/span>.&lt;span style="color:#a6e22e">Handle&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/debug/pprof/trace&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">HandlerFunc&lt;/span>(&lt;span style="color:#a6e22e">pprof&lt;/span>.&lt;span style="color:#a6e22e">Trace&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">ListenAndServe&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;localhost:18080&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Fatal&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;ListenAndServe: &amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>此时我们可以在 pprof 启动的 HTTP 服务端的 &lt;code>/debug/pprof&lt;/code> 端点查看本程序 profile 信息：
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gz5a6m/1652319650333-cea6d5e1-0f15-4981-93f9-86d5833ecf57.png" alt="image.png">
pprof 库会暴露多个端点&lt;/p>
&lt;ul>
&lt;li>&lt;strong>/debug/pprof/allocs&lt;/strong> #
&lt;ul>
&lt;li>用与分析 Mem 申请内存频率过高的问题。比如 Go 频繁垃圾回收等&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>/debug/pprof/block&lt;/strong> # 查看导致阻塞同步的堆栈跟踪&lt;/li>
&lt;li>&lt;strong>/debug/pprof/cmdline&lt;/strong> #&lt;/li>
&lt;li>&lt;strong>/debug/pprof/goroutine&lt;/strong> # 查看当前所有运行的 goroutines 堆栈跟踪
&lt;ul>
&lt;li>用于分析 Goroutine 泄露问题&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>/debug/pprof/heap&lt;/strong> # 查看活动对象的内存分配情况
&lt;ul>
&lt;li>用于分析 Mem 使用率高的问题&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>/debug/pprof/mutex&lt;/strong> # 查看导致互斥锁的竞争持有者的堆栈跟踪
&lt;ul>
&lt;li>用于分析锁的抢占问题&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>/debug/pprof/profile&lt;/strong> # 默认获取程序 30s 对 CPU 的使用情况的 Profile 文件。
&lt;ul>
&lt;li>用于分析 CPU 使用率高的问题&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="不通过-nethttp-标准库使用-pprof">不通过 net/http 标准库使用 pprof&lt;/h2>
&lt;p>若不直接使用 &lt;code>net/http&lt;/code> 标准库，则需要手动注册路由&lt;/p>
&lt;h3 id="gin-库">gin 库&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;github.com/gin-contrib/pprof&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;github.com/gin-gonic/gin&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">router&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Default&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">pprof&lt;/span>.&lt;span style="color:#a6e22e">Register&lt;/span>(&lt;span style="color:#a6e22e">router&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">Run&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;:8080&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="chi-库">chi 库&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;net/http&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;github.com/go-chi/chi&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;github.com/go-chi/chi/middleware&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">chi&lt;/span>.&lt;span style="color:#a6e22e">NewRouter&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">Mount&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/debug&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">middleware&lt;/span>.&lt;span style="color:#a6e22e">Profiler&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">ListenAndServe&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;:8080&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">r&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="top-信息">top 信息&lt;/h2>
&lt;ul>
&lt;li>flat：给定函数上运行耗时&lt;/li>
&lt;li>flat%：同上的 CPU 运行耗时总比例&lt;/li>
&lt;li>sum%：给定函数累积使用 CPU 总比例&lt;/li>
&lt;li>cum：当前函数加上它之上的调用运行总耗时&lt;/li>
&lt;li>cum%：同上的 CPU 运行耗时总比例&lt;/li>
&lt;/ul>
&lt;h1 id="pprof-工具">pprof 工具&lt;/h1>
&lt;p>pprof 工具运行时，会在 ${HOME}/pprof/ 目录下生成临时的 &lt;code>*.pb.gz&lt;/code> 文件&lt;/p>
&lt;h2 id="syntax语法">Syntax(语法)&lt;/h2>
&lt;p>**pprof [FORMAT] [OPTIONS] [BINARY] &lt;!-- raw HTML omitted --> &amp;hellip; **
从 SOURCE 出获取性能信息数据，并在当前目录下生成 FORMAT 格式的 Profile 文件，文件名默认为 &lt;code>profileXXX.pb.gz&lt;/code>。若省略 FORMAT，则将会进入交互式 CLI。&lt;/p>
&lt;p>在省略 FORMAT 时，提供 &lt;code>-http&lt;/code> 参数，pprof 会启动 HTTP 服务，可以通过浏览器浏览 Profile 信息。&lt;/p>
&lt;p>&lt;strong>FORMAT&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-proto&lt;/strong> # 以压缩的 protobuf 格式输出 Profile 文件。&lt;code>默认生成的缓存 Profile 文件就是这种格式&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>SOURCE OPTIONS&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-seconds=&lt;!-- raw HTML omitted -->&lt;/strong> # 采集 SOURCE 的持续时间，单位：秒&lt;/li>
&lt;/ul>
&lt;h2 id="交互式-cli">交互式 CLI&lt;/h2>
&lt;p>&lt;strong>top -cum 5&lt;/strong> # 按照资源使用率排序并查看前 5 个&lt;/p>
&lt;h1 id="最佳实践">最佳实践&lt;/h1>
&lt;p>当我们在程序中注册了 pprof 之后，就可以开始使用 pprof 工具对获取到的性能数据进行分析。&lt;/p>
&lt;h2 id="生成-profile-文件">生成 Profile 文件&lt;/h2>
&lt;p>首先，我们需要先使用 pprof 工具从 &lt;code>**/debug/pprof/profile**&lt;/code>&lt;strong>端点&lt;/strong>获取性能数据。默认情况会采集 30 秒程序运行数据，并缓存 potol 格式的 Profile 文件到 &lt;code>${HOME}/pprof/&lt;/code> 目录中，同时在当前目录生成指定格式的 Profile 文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># go tool pprof -proto http://localhost:18080/debug/pprof/profile&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Fetching profile over HTTP from http://localhost:18080/debug/pprof/profile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Saved profile in /home/lichenhao/pprof/pprof.main.samples.cpu.001.pb.gz
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Generating report in profile001.pb.gz
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>注意：&lt;/p>
&lt;ul>
&lt;li>若待采集 profile 文件的目标程序需要使用 HTTPS，则将 http 改为 https+insecure&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="分析-profile-文件">分析 Profile 文件&lt;/h2>
&lt;p>想要分析 profile.proto 文件，同样需要使用 pprof 程序。我们可以通过两种方式分析数据文件&lt;/p>
&lt;ul>
&lt;li>交互式 CLI&lt;/li>
&lt;li>Web&lt;/li>
&lt;/ul>
&lt;h3 id="交互式-cli-1">交互式 CLI&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># go tool pprof profile001.pb.gz&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>File: main
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Type: cpu
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Time: May 12, &lt;span style="color:#ae81ff">2022&lt;/span> at 9:07am &lt;span style="color:#f92672">(&lt;/span>CST&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Duration: 10s, Total samples &lt;span style="color:#f92672">=&lt;/span> 10ms &lt;span style="color:#f92672">(&lt;/span> 0.1%&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Entering interactive mode &lt;span style="color:#f92672">(&lt;/span>type &lt;span style="color:#e6db74">&amp;#34;help&amp;#34;&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> commands, &lt;span style="color:#e6db74">&amp;#34;o&amp;#34;&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> options&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">(&lt;/span>pprof&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>CLI 中最常见的操作就是 top、list、web，web 命令是打开一个 Web 服务端，这里可以查看识图、火焰图等等&lt;/p>
&lt;p>&lt;code>top&lt;/code> 命令可以获取最消耗资源的函数名，然后通过 &lt;code>list FuncName&lt;/code> 列出其中函数中最消耗资源的几行代码并且会展示出资源消耗的数值。&lt;/p>
&lt;h3 id="web">Web&lt;/h3>
&lt;p>使用 &lt;code>-http&lt;/code> 参数以便让 pprof 工具监听一个端口，通过 Web 来分析数据&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># go tool pprof -http=:8080 profile001.pb.gz&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Serving web UI on http://localhost:8080
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>也可以在交互式 CLI 中使用 &lt;code>web&lt;/code> 命令打开该界面。若出现 &lt;code> Could not execute dot; may need to install graphviz.&lt;/code> 报错，安装 graphviz 即可。&lt;/p>
&lt;/blockquote>
&lt;p>在 Web 中可以将 profile 数据解析成火焰图、以图形和线条方式展示调用链、等等等&lt;/p>
&lt;p>效果如下：
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gz5a6m/1652326690785-770c9f40-8461-4904-9958-aefc3a88ee9f.png" alt="image.png">&lt;/p>
&lt;h2 id="最简单的排查-cpu-使用率问题">最简单的排查 CPU 使用率问题&lt;/h2>
&lt;p>在 &lt;code>pkg/webhook/webhook.go&lt;/code> 中添加 &lt;code>h.router.Mount(&amp;quot;/debug&amp;quot;, middleware.Profiler())&lt;/code> 代码以引入 pprof&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">h&lt;/span>.&lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">Use&lt;/span>(&lt;span style="color:#a6e22e">middleware&lt;/span>.&lt;span style="color:#a6e22e">Timeout&lt;/span>(&lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">h&lt;/span>.&lt;span style="color:#a6e22e">WebhookTimeout&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">h&lt;/span>.&lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">Mount&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/debug&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">middleware&lt;/span>.&lt;span style="color:#a6e22e">Profiler&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">h&lt;/span>.&lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">Get&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/receivers&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">h&lt;/span>.&lt;span style="color:#a6e22e">handler&lt;/span>.&lt;span style="color:#a6e22e">ListReceivers&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>程序启动后开始获取 CPU 信息的 Profile 文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># go tool pprof -proto http://localhost:19093/debug/pprof/profile&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Fetching profile over HTTP from http://localhost:19093/debug/pprof/profile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Saved profile in /home/lichenhao/pprof/pprof.main.samples.cpu.002.pb.gz
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Generating report in profile001.pb.gz
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>同时发起一些请求，触发其中的代码逻辑&lt;/p>
&lt;p>以 Web 形式分析 Profile 文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># go tool pprof -http=&amp;#34;:8080&amp;#34; profile001.pb.gz&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Serving web UI on http://localhost:8080
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>首先可以看到调用逻辑关系
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gz5a6m/1652341730532-08dc5241-a436-4288-bb7e-76e7e5f168ef.png" alt="image.png">
这里可以查看每个函数调用所占用的 CPU 时间
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gz5a6m/1652341794711-3758bcfe-b3e6-4611-8c7b-0c02338a97fe.png" alt="image.png">
这里可以查看火焰图
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gz5a6m/1652341761629-901f7396-c816-4d99-bedf-0a51ecda903c.png" alt="image.png">&lt;/p>
&lt;h1 id="pprof-实战">pprof 实战&lt;/h1>
&lt;p>原文链接：&lt;a href="https://cloud.tencent.com/developer/article/1485112">腾讯云+社区，golang pprof 实战-CPU,heap,alloc,goroutine,mutex,block&lt;/a>&lt;/p>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>如果要说在 golang 开发过程进行性能调优，pprof 一定是一个大杀器般的工具。但在网上找到的教程都偏向简略，难寻真的能应用于实战的教程。这也无可厚非，毕竟 pprof 是当程序占用资源异常时才需要启用的工具，而我相信大家的编码水平和排场问题的能力是足够高的，一般不会写出性能极度堪忧的程序，且即使发现有一些资源异常占用，也会通过排查代码快速定位，这也导致 pprof 需要上战场的机会少之又少。即使大家有心想学习使用 pprof，却也常常相忘于江湖。&lt;/p>
&lt;p>&lt;strong>既然如此，那我就送大家一个性能极度堪忧的“炸弹”程序吧！&lt;/strong>&lt;/p>
&lt;p>这程序没啥正经用途却极度占用资源，基本覆盖了常见的性能问题。本文就是希望读者能一步一步按照提示，使用 pprof 定位这个程序的的性能瓶颈所在，借此学习 pprof 工具的使用方法。&lt;/p>
&lt;p>因此，本文是一场“实验课”而非“理论课”，请读者腾出时间，脚踏实地，一步一步随实验步骤进行操作，这会是一个很有趣的冒险，不会很无聊，希望你能喜欢。&lt;/p>
&lt;h2 id="实验准备">实验准备&lt;/h2>
&lt;p>这里假设你有基本的 golang 开发功底，拥有 golang 开发环境并配置了 $GOPATH，能熟练阅读简单的代码或进行简单的修改，且知道如何编译运行 golang 程序。此外，需要你大致知道 pprof 是干什么的，有一个基本印象即可，你可以花几分钟时间读一下&lt;a href="https://links.jianshu.com/go?to=https%3A%2F%2Fblog.wolfogre.com%2Fredirect%2Fv3%2FA3jsjsv0r3pCsn4x_qmqFKwSAwM8Cv46xcU7LxImWv3F_wdFRERZQ0pZxVoWBjvFWhYGWsWtTRvFOwaJVMX_BDIwMTjM_wIwOcz_AjE1zP5HBolU_1AlMjAlRTUlQTQlQTclRTYlOUQlODAlRTUlOTklQTglRTQlQjklOEIlRTYlODAlQTclRTglODMlQkQlRTUlODklOTYlRTYlOUUlOTAlMjBQUHMsbi0YMRIDAzwK_jrFxVoWBjtuQQYW3Dsh_cU8Bk0KxTsGzDw8Bcw8ghxKiMU">《Golang 大杀器之性能剖析 PProf》&lt;/a>的开头部分，这不会耽误太久。&lt;/p>
&lt;p>此外由于你需要运行一个“炸弹”程序，请务必确保你用于做实验的机器有充足的资源，你的机器至少需要：&lt;/p>
&lt;ul>
&lt;li>2 核 CPU；&lt;/li>
&lt;li>2G 内存。&lt;/li>
&lt;/ul>
&lt;p>注意，以上只是最低需求，你的机器配置能高于上述要求自然最好。实际运行“炸弹”时，你可以关闭电脑上其他不必要的程序，甚至 IDE 都不用开，我们的实验操作基本上是在命令行里进行的。&lt;/p>
&lt;p>此外，务必确保你是在个人机器上运行“炸弹”的，能接受机器死机重启的后果（虽然这发生的概率很低）。请你务必不要在危险的边缘试探，比如在线上&lt;a href="https://cloud.tencent.com/product/cvm?from=10680">服务器&lt;/a>运行这个程序。&lt;/p>
&lt;p>可能说得你都有点害怕了，为打消你顾虑，我可以剧透一下“炸弹”的情况，让你安心：&lt;/p>
&lt;ul>
&lt;li>程序会占用约 2G 内存；&lt;/li>
&lt;li>程序占用 CPU 最高约 100%（总量按“核数 * 100%”来算）；&lt;/li>
&lt;li>程序不涉及网络或文件读写；&lt;/li>
&lt;li>程序除了吃资源之外没有其他危险操作。&lt;/li>
&lt;/ul>
&lt;p>且程序所占用的各类资源，均不会随着运行时间的增长而增长，换句话说，只要你把“炸弹”启动并正常运行了一分钟，就基本确认安全了，之后即使运行几天也不会有更多的资源占用，除了有点费电之外。&lt;/p>
&lt;h2 id="获取炸弹">获取“炸弹”&lt;/h2>
&lt;p>炸弹程序的代码我已经放到了 &lt;a href="https://links.jianshu.com/go?to=https%3A%2F%2Fblog.wolfogre.com%2Fredirect%2Fv3%2FA_4-v86v-9Btg9a9FuRKCcgSAwM8Cv46xcU7LxImWv3FQQYW3DshxTsGzDw8cyzMPIIcSogxEgMDPAr-OsXFWhYGO25BBhbcOyH9xTwGTQrFOwbMPDwFzDyCHEqIxQ">GitHub&lt;/a> 上，你只需要在终端里运行 &lt;code>go get&lt;/code> 便可获取，注意加上 &lt;code>-d&lt;/code> 参数，避免下载后自动安装：&lt;/p>
&lt;pre>&lt;code>go get -d github.com/wolfogre/go-pprof-practice
cd $GOPATH/src/github.com/wolfogre/go-pprof-practice
&lt;/code>&lt;/pre>
&lt;p>我们可以简单看一下 &lt;code>main.go&lt;/code> 文件，里面有几个帮助排除性能调问题的关键的的点，我加上了些注释方便你理解，如下：&lt;/p>
&lt;pre>&lt;code>package main
import (
_ &amp;quot;net/http/pprof&amp;quot;
)
func main() {
runtime.GOMAXPROCS(1)
runtime.SetMutexProfileFraction(1)
runtime.SetBlockProfileRate(1)
go func() {
if err := http.ListenAndServe(&amp;quot;:6060&amp;quot;, nil); err != nil {
log.Fatal(err)
}
os.Exit(0)
}()
}
&lt;/code>&lt;/pre>
&lt;p>除此之外的其他代码你一律不用看，那些都是我为了模拟一个“逻辑复杂”的程序而编造的，其中大多数的问题很容易通过肉眼发现，但我们需要做的是通过 pprof 来定位代码的问题，所以为了保证实验的趣味性请不要提前阅读代码，可以实验完成后再看。&lt;/p>
&lt;p>接着我们需要编译一下这个程序并运行，你不用担心依赖问题，这个程序没有任何外部依赖。&lt;/p>
&lt;pre>&lt;code>go build
./go-pprof-practice
&lt;/code>&lt;/pre>
&lt;p>运行后注意查看一下资源是否吃紧，机器是否还能扛得住，坚持一分钟，如果确认没问题，咱们再进行下一步。&lt;/p>
&lt;p>控制台里应该会不停的打印日志，都是一些“猫狗虎鼠在不停地吃喝拉撒”的屁话，没有意义，不用细看。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gz5a6m/1652342670773-707536b2-d1e0-4dcb-a837-97c73ce2ec20.png" alt="image.png">&lt;/p>
&lt;h2 id="使用-pprof-1">使用 pprof&lt;/h2>
&lt;p>保持程序运行，打开浏览器访问 &lt;code>http://localhost:6060/debug/pprof/&lt;/code>，可以看到如下页面：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gz5a6m/1652342670421-8ffb9b61-ff9a-4b0b-bf6e-57df41394c08.png" alt="image.png">&lt;/p>
&lt;p>image&lt;/p>
&lt;p>页面上展示了可用的程序运行采样数据，分别有：
页面上展示了可用的程序运行采样数据，分别有：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>类型&lt;/th>
&lt;th>描述&lt;/th>
&lt;th>备注&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>allocs&lt;/td>
&lt;td>内存分配情况的采样信息&lt;/td>
&lt;td>可以用浏览器打开，但可读性不高&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>blocks&lt;/td>
&lt;td>阻塞操作情况的采样信息&lt;/td>
&lt;td>可以用浏览器打开，但可读性不高&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>cmdline&lt;/td>
&lt;td>显示程序启动命令及参数&lt;/td>
&lt;td>可以用浏览器打开，这里会显示 ./go-pprof-practice&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>goroutine&lt;/td>
&lt;td>当前所有协程的堆栈信息&lt;/td>
&lt;td>可以用浏览器打开，但可读性不高&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>heap&lt;/td>
&lt;td>堆上内存使用情况的采样信息&lt;/td>
&lt;td>可以用浏览器打开，但可读性不高&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>mutex&lt;/td>
&lt;td>锁争用情况的采样信息&lt;/td>
&lt;td>可以用浏览器打开，但可读性不高&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>profile&lt;/td>
&lt;td>CPU 占用情况的采样信息&lt;/td>
&lt;td>浏览器打开会下载文件&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>threadcreate&lt;/td>
&lt;td>系统线程创建情况的采样信息&lt;/td>
&lt;td>可以用浏览器打开，但可读性不高&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>trace&lt;/td>
&lt;td>程序运行跟踪信息&lt;/td>
&lt;td>浏览器打开会下载文件，本文不涉及，可另行参阅《深入浅出 Go trace》&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>因为 cmdline 没有什么实验价值，trace 与本文主题关系不大，threadcreate 涉及的情况偏复杂，所以这三个类型的采样信息这里暂且不提。除此之外，其他所有类型的采样信息本文都会涉及到，且炸弹程序已经为每一种类型的采样信息埋藏了一个对应的性能问题，等待你的发现。&lt;/p>
&lt;p>由于直接阅读采样信息缺乏直观性，我们需要借助 &lt;code>go tool pprof&lt;/code> 命令来排查问题，这个命令是 go 原生自带的，所以不用额外安装。&lt;/p>
&lt;p>我们先不用完整地学习如何使用这个命令，毕竟那太枯燥了，我们一边实战一边学习。&lt;/p>
&lt;p>以下正式开始。&lt;/p>
&lt;h2 id="排查-cpu-占用过高">排查 CPU 占用过高&lt;/h2>
&lt;p>我们首先通过活动监视器（或任务管理器、top 命令，取决于你的操作系统和你的喜好），查看一下炸弹程序的 CPU 占用：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gz5a6m/1652342670264-907c836e-e6a7-4962-8809-1be829ae7078.png" alt="image.png">
可以看到 CPU 占用相当高，这显然是有问题的，我们使用 &lt;code>go tool pprof&lt;/code> 来排场一下：&lt;/p>
&lt;pre>&lt;code>go tool pprof http://localhost:6060/debug/pprof/profile
&lt;/code>&lt;/pre>
&lt;p>等待一会儿后，进入一个交互式终端：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gz5a6m/1652342670211-12943d99-488c-41f9-bcc0-ebb23e9125b9.png" alt="image.png">&lt;/p>
&lt;p>输入 top 命令，查看 CPU 占用较高的调用：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gz5a6m/1652342670434-f5e5887e-67e4-40cc-8235-30f14e1a2e31.png" alt="image.png">&lt;/p>
&lt;p>很明显，CPU 占用过高是 &lt;code>github.com/wolfogre/go-pprof-practice/animal/felidae/tiger.(*Tiger).Eat&lt;/code> 造成的。&lt;/p>
&lt;blockquote>
&lt;p>注：为了保证实验节奏，关于图中 &lt;code>flat&lt;/code>、&lt;code>flat%&lt;/code>、&lt;code>sum%&lt;/code>、&lt;code>cum&lt;/code>、&lt;code>cum%&lt;/code> 等参数的含义这里就不展开讲了，你可以先简单理解为数字越大占用情况越严重，之后可以在&lt;a href="https://links.jianshu.com/go?to=https%3A%2F%2Fblog.wolfogre.com%2Fredirect%2Fv3%2FA3jsjsv0r3pCsn4x_qmqFKwSAwM8Cv46xcU7LxImWv3F_wdFRERZQ0pZxVoWBjvFWhYGWsWtTRvFOwaJVMX_BDIwMTjM_wIwOcz_AjE1zP5HBolU_1AlMjAlRTUlQTQlQTclRTYlOUQlODAlRTUlOTklQTglRTQlQjklOEIlRTYlODAlQTclRTglODMlQkQlRTUlODklOTYlRTYlOUUlOTAlMjBQUHMsbi0YMRIDAzwK_jrFxVoWBjtuQQYW3Dsh_cU8Bk0KxTsGzDw8Bcw8ghxKiMU">《Golang 大杀器之性能剖析 PProf》&lt;/a>等其他资料中深入学习。&lt;/p>
&lt;/blockquote>
&lt;p>输入 &lt;code>list Eat&lt;/code>，查看问题具体在代码的哪一个位置：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gz5a6m/1652342672266-67b39808-d532-47f5-9f51-6a3597bc0620.png" alt="image.png">&lt;/p>
&lt;p>可以看到，是第 24 行那个一百亿次空循环占用了大量 CPU 时间，至此，问题定位成功！&lt;/p>
&lt;p>接下来有一个扩展操作：图形化显示调用栈信息，这很酷，但是需要你事先在机器上安装 &lt;code>graphviz&lt;/code>，大多数系统上可以轻松安装它：&lt;/p>
&lt;pre>&lt;code>brew install graphviz # for macos
apt install graphviz # for ubuntu
yum install graphviz # for centos
&lt;/code>&lt;/pre>
&lt;p>或者你也可以访问 &lt;a href="https://links.jianshu.com/go?to=https%3A%2F%2Fblog.wolfogre.com%2Fredirect%2Fv3%2FA421Yoc_xEV4GG_UO8tV1nMSAwM8Cv46xcU7gjwSbQjbbjsviVpukMUYBkEJFgboxTESAwM8Cv46xcVaFgY7bkEGFtw7If3FPAZNCsU7Bsw8PAXMPIIcSojF">graphviz 官网&lt;/a>寻找适合自己操作系统的安装方法。&lt;/p>
&lt;p>安装完成后，我们继续在上文的交互式终端里输入 &lt;code>web&lt;/code>，注意，虽然这个命令的名字叫“web”，但它的实际行为是产生一个 .svg 文件，并调用你的系统里设置的默认打开 .svg 的程序打开它。如果你的系统里打开 .svg 的默认程序并不是浏览器（比如可能是你的代码编辑器），这时候你需要设置一下默认使用浏览器打开 .svg 文件，相信这难不倒你。&lt;/p>
&lt;p>你应该可以看到：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gz5a6m/1652342672880-6d25d002-b6d6-4517-9462-7ba47d2fe941.png" alt="image.png">&lt;/p>
&lt;p>图中，&lt;code>tiger.(*Tiger).Eat&lt;/code> 函数的框特别大，箭头特别粗，pprof 生怕你不知道这个函数的 CPU 占用很高，这张图还包含了很多有趣且有价值的信息，你可以多看一会儿再继续。&lt;/p>
&lt;p>至此，这一小节使用 pprof 定位 CPU 占用的实验就结束了，你需要输入 &lt;code>exit&lt;/code> 退出 pprof 的交互式终端。&lt;/p>
&lt;p>为了方便进行后面的实验，我们修复一下这个问题，不用太麻烦，注释掉相关代码即可：&lt;/p>
&lt;pre>&lt;code>func (t *Tiger) Eat() {
log.Println(t.Name(), &amp;quot;eat&amp;quot;)
}
&lt;/code>&lt;/pre>
&lt;p>之后修复问题的的方法都是注释掉相关的代码，不再赘述。你可能觉得这很粗暴，但要知道，这个实验的重点是如何使用 pprof 定位问题，我们不需要花太多时间在改代码上。&lt;/p>
&lt;h2 id="排查内存占用过高">排查内存占用过高&lt;/h2>
&lt;p>重新编译炸弹程序，再次运行，可以看到 CPU 占用率已经下来了，但是内存的占用率仍然很高：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gz5a6m/1652342673383-82d8e798-d1b6-42fc-ab58-7f70d1c2d0d4.png" alt="image.png">&lt;/p>
&lt;p>image&lt;/p>
&lt;p>我们再次运行使用 pprof 命令，注意这次使用的 URL 的结尾是 heap：&lt;/p>
&lt;pre>&lt;code>go tool pprof http://localhost:6060/debug/pprof/heap
&lt;/code>&lt;/pre>
&lt;p>再一次使用 &lt;code>top&lt;/code>、&lt;code>list&lt;/code> 来定问问题代码：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gz5a6m/1652342675687-d36c06ac-c6b8-4739-9fd0-ae5272b71cb6.png" alt="image.png">&lt;/p>
&lt;p>可以看到这次出问题的地方在 &lt;code>github.com/wolfogre/go-pprof-practice/animal/muridae/mouse.(*Mouse).Steal&lt;/code>，函数内容如下：&lt;/p>
&lt;pre>&lt;code>func (m *Mouse) Steal() {
log.Println(m.Name(), &amp;quot;steal&amp;quot;)
max := constant.Gi
for len(m.buffer) * constant.Mi &amp;lt; max {
m.buffer = append(m.buffer, [constant.Mi]byte{})
}
}
&lt;/code>&lt;/pre>
&lt;p>可以看到，这里有个循环会一直向 m.buffer 里追加长度为 1 MiB 的数组，直到总容量到达 1 GiB 为止，且一直不释放这些内存，这就难怪会有这么高的内存占用了。&lt;/p>
&lt;p>使用 &lt;code>web&lt;/code> 来查看图形化展示，可以再次确认问题确实出在这里：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gz5a6m/1652342675266-a848fa57-5cb9-4188-bedd-0c84ed45c6db.png" alt="image.png">&lt;/p>
&lt;p>现在我们同样是注释掉相关代码来解决这个问题。&lt;/p>
&lt;p>再次编译运行，查看内存占用：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gz5a6m/1652342675895-2104ed19-316d-4df4-816d-a3fecb1e99d1.png" alt="image.png">&lt;/p>
&lt;p>可以看到内存占用已经将到了 35 MB，似乎内存的使用已经恢复正常，一片祥和。&lt;/p>
&lt;p>但是，内存相关的性能问题真的已经全部解决了吗？&lt;/p>
&lt;h2 id="排查频繁内存回收">排查频繁内存回收&lt;/h2>
&lt;p>你应该知道，频繁的 GC 对 golang 程序性能的影响也是非常严重的。虽然现在这个炸弹程序内存使用量并不高，但这会不会是频繁 GC 之后的假象呢？&lt;/p>
&lt;p>为了获取程序运行过程中 GC 日志，我们需要先退出炸弹程序，再在重新启动前赋予一个环境变量，同时为了避免其他日志的干扰，使用 grep 筛选出 GC 日志查看：&lt;/p>
&lt;pre>&lt;code>GODEBUG=gctrace=1 ./go-pprof-practice | grep gc
&lt;/code>&lt;/pre>
&lt;p>日志输出如下：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gz5a6m/1652342676751-565d6c37-649d-4a45-abbc-22de6a6764d6.png" alt="image.png">&lt;/p>
&lt;p>可以看到，GC 差不多每 3 秒就发生一次，且每次 GC 都会从 16MB 清理到几乎 0MB，说明程序在不断的申请内存再释放，这是高性能 golang 程序所不允许的。&lt;/p>
&lt;p>如果你希望进一步了解 golang 的 GC 日志可以查看&lt;a href="https://links.jianshu.com/go?to=https%3A%2F%2Fblog.wolfogre.com%2Fredirect%2Fv3%2FA9DNc05mRFLA-ZPsjfPhLuZDu-oKbuLF_wQyMDE2xf8CMDfF_wIwMcUtHy8qzDsGiVTMOxzFMRIDAzwK_jrFxVoWBjtuQQYW3Dsh_cU8Bk0KxTsGzDw8Bcw8ghxKiMU">《如何监控 golang 程序的垃圾回收》&lt;/a>,为保证实验节奏，这里不做展开。&lt;/p>
&lt;p>所以接下来使用 pprof 排查时，我们在乎的不是什么地方在占用大量内存，而是什么地方在不停地申请内存，这两者是有区别的。&lt;/p>
&lt;p>由于内存的申请与释放频度是需要一段时间来统计的，所有我们保证炸弹程序已经运行了几分钟之后，再运行命令：&lt;/p>
&lt;pre>&lt;code>go tool pprof http://localhost:6060/debug/pprof/allocs
&lt;/code>&lt;/pre>
&lt;p>同样使用 top、list、web 大法：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gz5a6m/1652342678255-9fbe8591-fd0c-426d-b10b-384a944a79fa.png" alt="image.png">&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gz5a6m/1652342677694-f7eb46e4-bbf3-4f83-a2eb-6fb0574cba27.png" alt="image.png">&lt;/p>
&lt;p>可以看到 &lt;code>github.com/wolfogre/go-pprof-practice/animal/canidae/dog.(*Dog).Run&lt;/code> 会进行无意义的内存申请，而这个函数又会被频繁调用，这才导致程序不停地进行 GC:&lt;/p>
&lt;pre>&lt;code>func (d *Dog) Run() {
log.Println(d.Name(), &amp;quot;run&amp;quot;)
_ = make([]byte, 16 * constant.Mi)
}
&lt;/code>&lt;/pre>
&lt;p>这里有个小插曲，你可尝试一下将 &lt;code>16 * constant.Mi&lt;/code> 修改成一个较小的值，重新编译运行，会发现并不会引起频繁 GC，原因是在 golang 里，对象是使用堆内存还是栈内存，由编译器进行逃逸分析并决定，如果对象不会逃逸，便可在使用栈内存，但总有意外，就是对象的尺寸过大时，便不得不使用堆内存。所以这里设置申请 16 MiB 的内存就是为了避免编译器直接在栈上分配，如果那样得话就不会涉及到 GC 了。&lt;/p>
&lt;p>我们同样注释掉问题代码，重新编译执行，可以看到这一次，程序的 GC 频度要低很多，以至于短时间内都看不到 GC 日志了：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gz5a6m/1652342677869-a929d664-3bb1-4a81-b44b-9e085c70a69f.png" alt="image.png">&lt;/p>
&lt;h2 id="排查协程泄露">排查协程泄露&lt;/h2>
&lt;p>由于 golang 自带内存回收，所以一般不会发生内存泄露。但凡事都有例外，在 golang 中，协程本身是可能泄露的，或者叫协程失控，进而导致内存泄露。&lt;/p>
&lt;p>我们在浏览器里可以看到，此时程序的协程数已经多达 106 条：
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gz5a6m/1652342920133-d94f6be1-3553-4e5b-9969-d90ee3e8eaee.png" alt="image.png">
虽然 106 条并不算多，但对于这样一个小程序来说，似乎还是不正常的。为求安心，我们再次是用 pprof 来排查一下：&lt;/p>
&lt;pre>&lt;code>go tool pprof http://localhost:6060/debug/pprof/goroutine
&lt;/code>&lt;/pre>
&lt;p>同样是 top、list、web 大法：
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gz5a6m/1652342931465-9bce9a37-20cb-4a3f-832a-ea349f816a14.png" alt="image.png">&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gz5a6m/1652342954617-7ec317ec-6c0b-444e-9107-591e4b80fa1f.png" alt="image.png">
可能这次问题藏得比较隐晦，但仔细观察还是不难发现，问题在于 &lt;code>github.com/wolfogre/go-pprof-practice/animal/canidae/wolf.(*Wolf).Drink&lt;/code> 在不停地创建没有实际作用的协程：&lt;/p>
&lt;pre>&lt;code>func (w *Wolf) Drink() {
log.Println(w.Name(), &amp;quot;drink&amp;quot;)
for i := 0; i &amp;lt; 10; i++ {
go func() {
time.Sleep(30 * time.Second)
}()
}
}
&lt;/code>&lt;/pre>
&lt;p>可以看到，Drink 函数每次回释放 10 个协程出去，每个协程会睡眠 30 秒再退出，而 Drink 函数又会被反复调用，这才导致大量协程泄露，试想一下，如果释放出的协程会永久阻塞，那么泄露的协程数便会持续增加，内存的占用也会持续增加，那迟早是会被操作系统杀死的。&lt;/p>
&lt;p>我们注释掉问题代码，重新编译运行可以看到，协程数已经降到 4 条了：
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gz5a6m/1652343010037-df499f46-85e0-4835-887e-e6c36439ac23.png" alt="image.png">&lt;/p>
&lt;h2 id="排查锁的争用">排查锁的争用&lt;/h2>
&lt;p>到目前为止，我们已经解决这个炸弹程序的所有资源占用问题，但是事情还没有完，我们需要进一步排查那些会导致程序运行慢的性能问题，这些问题可能并不会导致资源占用，但会让程序效率低下，这同样是高性能程序所忌讳的。&lt;/p>
&lt;p>我们首先想到的就是程序中是否有不合理的锁的争用，我们倒一倒，回头看看上一张图，虽然协程数已经降到 4 条，但还显示有一个 mutex 存在争用问题。&lt;/p>
&lt;p>相信到这里，你已经触类旁通了，无需多言，开整。&lt;/p>
&lt;pre>&lt;code>go tool pprof http://localhost:6060/debug/pprof/mutex
&lt;/code>&lt;/pre>
&lt;p>同样是 top、list、web 大法：
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gz5a6m/1652343071279-b6754799-45a6-4769-9f73-7d474636fe36.png" alt="image.png">
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gz5a6m/1652343075415-a3376489-a540-447c-b144-7fef8fe838b5.png" alt="image.png">
可以看出来这问题出在 &lt;code>github.com/wolfogre/go-pprof-practice/animal/canidae/wolf.(*Wolf).Howl&lt;/code>。但要知道，在代码中使用锁是无可非议的，并不是所有的锁都会被标记有问题，我们看看这个有问题的锁那儿触雷了。&lt;/p>
&lt;pre>&lt;code>func (w *Wolf) Howl() {
log.Println(w.Name(), &amp;quot;howl&amp;quot;)
m := &amp;amp;sync.Mutex{}
m.Lock()
go func() {
time.Sleep(time.Second)
m.Unlock()
}()
m.Lock()
}
&lt;/code>&lt;/pre>
&lt;p>可以看到，这个锁由主协程 Lock，并启动子协程去 Unlock，主协程会阻塞在第二次 Lock 这儿等待子协程完成任务，但由于子协程足足睡眠了一秒，导致主协程等待这个锁释放足足等了一秒钟。虽然这可能是实际的业务需要，逻辑上说得通，并不一定真的是性能瓶颈，但既然它出现在我写的“炸弹”里，就肯定不是什么“业务需要”啦。&lt;/p>
&lt;p>所以，我们注释掉这段问题代码，重新编译执行，继续。&lt;/p>
&lt;h2 id="排查阻塞操作">排查阻塞操作&lt;/h2>
&lt;p>好了，我们开始排查最后一个问题。&lt;/p>
&lt;p>在程序中，除了锁的争用会导致阻塞之外，很多逻辑都会导致阻塞。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gz5a6m/1652343092686-180c61a0-e682-4666-84ba-528f17fd346d.png" alt="image.png">
可以看到，这里仍有 2 个阻塞操作，虽然不一定是有问题的，但我们保证程序性能，我们还是要老老实实排查确认一下才对。&lt;/p>
&lt;pre>&lt;code>go tool pprof http://localhost:6060/debug/pprof/block
&lt;/code>&lt;/pre>
&lt;p>top、list、web，你懂得。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gz5a6m/1652343109220-a11fcfbf-b808-4da2-b253-3d4339319bd9.png" alt="image.png">
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gz5a6m/1652343120730-030aaaa4-47fa-41be-873b-ee97e32c730f.png" alt="image.png">
可以看到，阻塞操作位于 &lt;code>github.com/wolfogre/go-pprof-practice/animal/felidae/cat.(*Cat).Pee&lt;/code>：&lt;/p>
&lt;pre>&lt;code>func (c *Cat) Pee() {
log.Println(c.Name(), &amp;quot;pee&amp;quot;)
&amp;lt;-time.After(time.Second)
}
&lt;/code>&lt;/pre>
&lt;p>你应该可以看懂，不同于睡眠一秒，这里是从一个 channel 里读数据时，发生了阻塞，直到这个 channel 在一秒后才有数据读出，这就导致程序阻塞了一秒而非睡眠了一秒。&lt;/p>
&lt;p>这里有个疑点，就是上文中是可以看到有两个阻塞操作的，但这里只排查出了一个，我没有找到其准确原因，但怀疑另一个阻塞操作是程序监听端口提供 porof 查询时，涉及到 IO 操作发生了阻塞，即阻塞在对 HTTP 端口的监听上，但我没有进一步考证。&lt;/p>
&lt;p>不管怎样，恭喜你完整地完成了这个实验。&lt;/p>
&lt;h2 id="思考题">思考题&lt;/h2>
&lt;p>另有一些问题，虽然比较重要，但碍于篇幅（其实是我偷懒），就以思考题的形式留给大家了。&lt;/p>
&lt;ol>
&lt;li>每次进入交互式终端，都会提示“type ‘help’ for commands, ‘o’ for options”，你有尝试过查看有哪些命令和哪些选项吗？有重点了解一下“sample_index”这个选项吗？&lt;/li>
&lt;li>关于内存的指标，有申请对象数、使用对象数、申请空间大小、使用空间大小，本文用的是什么指标？如何查看不同的指标？（提示：在内存实验中，试试查看、修改“sample_index”选项。）&lt;/li>
&lt;li>你有听说过火焰图吗？要不要在试验中生成一下火焰图？&lt;/li>
&lt;li>main 函数中的 &lt;code>runtime.SetMutexProfileFraction&lt;/code> 和 &lt;code>runtime.SetBlockProfileRate&lt;/code> 是如何影响指标采样的？它们的参数的含义是什么？&lt;/li>
&lt;/ol>
&lt;h2 id="最后">最后&lt;/h2>
&lt;p>碍于我的水平有限，实验中还有很多奇怪的细节我只能暂时熟视无睹（比如“排查内存占用过高”一节中，为什么实际申请的是 1.5 GiB 内存），如果这些奇怪的细节你也发现了，并痛斥我假装睁眼瞎，那么我的目的就达到了……&lt;/p>
&lt;p>——还记得吗，本文的目的是让你熟悉使用 pprof，消除对它的陌生感，并能借用它进一步得了解 golang。而你通过这次试验，发现了程序的很多行为不同于你以往的认知或假设，并抱着好奇心，开始向比深处更深处迈进，那么，我何尝不觉得这是本文的功德呢？&lt;/p>
&lt;p>与君共勉。&lt;/p>
&lt;hr>
&lt;p>写得非常棒，向原作者致敬！&lt;/p>
&lt;p>作者：狼* 链接：&lt;a href="https://links.jianshu.com/go?to=https%3A%2F%2Fblog.wolfogre.com%2Fposts%2Fgo-ppof-practice">https://blog.wolfogre.com/posts/go-ppof-practice&lt;/a>&lt;/p></description></item><item><title>Docs: pprof(go程序的性能分析器)</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go/go-%E5%B7%A5%E5%85%B7/pprofgo%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%99%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go/go-%E5%B7%A5%E5%85%B7/pprofgo%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%99%A8/</guid><description/></item></channel></rss>