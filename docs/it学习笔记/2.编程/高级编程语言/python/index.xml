<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – Python</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/</link><description>Recent content in Python on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Python 工具</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/python%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/python%E5%B7%A5%E5%85%B7/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;h2 id="参考">参考：&lt;/h2>
&lt;/blockquote></description></item><item><title>Docs: Jinja</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/jinja/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/jinja/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/pallets/jinja">GitHub 项目&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://jinja.palletsprojects.com/">官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Jinja_(template_engine)">Wiki,Jinja&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://docs.jinkan.org/docs/jinja2/">国人翻译官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.junmajinlong.com/ansible/9_power_of_jinja2/">https://www.junmajinlong.com/ansible/9_power_of_jinja2/&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Jinja 是一个用于 Python 变成语言中的 &lt;strong>Template Engine(模板引擎)&lt;/strong>。Jinja 通常被用来作为 Python 的 Web 框架(e.g.Flask、Django)的数据渲染的底层调用。&lt;/p>
&lt;blockquote>
&lt;p>Django 其实自带模板引擎(DTL)，只不过由于 Jinja 的流行，通常都让 Django 的模板引擎使用 Jinja2&lt;/p>
&lt;/blockquote>
&lt;p>Jinja 模板引擎允许定制标签、过滤器、测试和全局变量。此外，与 Django 模板引擎不同，Jinja 允许模板设计器调用带有对象参数的函数。Jinja 是 Flask 的默认模板引擎，同时，也被 Ansible、Trac、Salt 使用。&lt;/p>
&lt;h2 id="jinja-是什么模板是什么">Jinja 是什么？模板是什么？&lt;/h2>
&lt;p>何为模板？举个例子就知道了。&lt;/p>
&lt;p>假设要发送一个文件给一个或多个目标节点，要发送的文件内容如下：&lt;/p>
&lt;pre>&lt;code>hello, __NAME__
&lt;/code>&lt;/pre>
&lt;p>其中 &lt;code>__NAME__&lt;/code> 部分想要根据目标节点的主机名来确定，比如发送给 www 节点时内容应该为 &lt;code>hello, www&lt;/code>，发送给 wwww 节点时，内容应该为&lt;code>hello, wwww&lt;/code>。换句话说，&lt;code>__NAME__&lt;/code> 是一个能够根据不同场景动态生成不同字符串的代码小片段。而根据特殊的代码片段动态生成字符串便是模板要实现的功能。&lt;/p>
&lt;p>现在解释模板便容易了：&lt;strong>所谓 Template(模板)，只是文本文件，可以在文本字符串中嵌入一些 Expressions(表达式)，然后使用模板引擎去解析整个模板，将其中嵌入的表达式替换成对应的结果&lt;/strong>。其中，&lt;strong>解析并替换模板表达式的过程&lt;/strong>，称为&lt;strong>渲染&lt;/strong>。从编程语言的角度说，&lt;strong>表达式就是代码中的 function。&lt;/strong>&lt;/p>
&lt;p>当模板引擎解析表达式时，每个&lt;strong>表达式&lt;/strong>都&lt;strong>有返回值&lt;/strong>。&lt;/p>
&lt;p>为了让模板引擎只替换表达式而不操作普通字符串，所以模板引擎需要能够区分模板表达式和普通字符串，所以模板表达式通常会使用 &lt;strong>Delimiters(分隔符)&lt;/strong> 包围起来。例如上面示例中，&lt;code>__NAME__&lt;/code>使用了前后两个下划线包围，表示这部分是模板表达式，它是需要进行替换的，而”hello” 是普通字符串，模板引擎不会去管它。&lt;/p>
&lt;p>Jinja 模板引擎提供了三种** Delimiters(分隔符) **来包围 &lt;strong>模板表达式&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;code>{{ XXX }}&lt;/code> # Jinja 的 &lt;strong>Basic(基本)&lt;/strong> 表达式。比如引用变量、使用过滤器&lt;/li>
&lt;li>&lt;code>{% XXX %}&lt;/code> # Jinja 的 &lt;strong>Statements(语句)&lt;/strong> 表达式，比如 定义变量、执行控制结构语句(if 语句、for 循环)、等等&lt;/li>
&lt;li>&lt;code>{# XXX #}&lt;/code> # Jinja 的注释符号&lt;/li>
&lt;/ul>
&lt;p>这些表达式可以用来定义变量、引用变量、定义函数、调用函数、执行控制结构等等。&lt;strong>说白了，模板其实也是一种变成语言，只不过代码是夹杂在常规字符串中的，并且使用特殊的符号，将这些代码包围起来。&lt;/strong>&lt;/p>
&lt;p>模板更多用在 web 编程中来生成 HTML 页面，但绝不限于 web 编程，它可以用在很多方面，比如 Ansible 就使用 Jinja2 模板引擎来解析 YAML 中的字符串，也用在 template 模块渲染模板文件。每种编程语言都有模板，比如 Python 的模板语言称为 Jinja、而 go 的模板语言就成为 go 模板、等等，通常来说，这些变成语言的模板表达式的语法，都是 &lt;code>{{ XX }}&lt;/code> 符号。&lt;/p>
&lt;h2 id="模板文件的扩展名">模板文件的扩展名&lt;/h2>
&lt;p>任何文件都可以作为模板加载，无论扩展名是什么。但是使用 &lt;code>.jinja&lt;/code> 作为扩展名，可以是某些 IDE 的插件更容易识别模板文件以提供 代码高亮、代码补全 等功能。&lt;/p>
&lt;p>另外一个识别模板的好方法，是将它们都放在 &lt;code>templates&lt;/code> 目录中，而不用管扩展名是什么。这是一个项目最常见的用法。&lt;/p>
&lt;h1 id="literal字面量">Literal(字面量)&lt;/h1>
&lt;p>Jinja 的 Literal(字面量) 是 最简单、最直接 的表达式形式。但是，这个其实没啥用&lt;del>&lt;del>毕竟是在文本文件中使用模板表达式，如果 Lieral 都是 字符串、数值、字典、等等 的话，直接在文本中写就好啦&lt;/del>&lt;/del>&lt;/p>
&lt;blockquote>
&lt;p>所谓的 Literal(字面量) 从中文角度看，就是所见即所得，比如我输入 &amp;ldquo;Hello World&amp;rdquo;，看到的就是这几个字母，这是一个字符串。Literal 更容易理解的词是 Data Type(数据类型)。&lt;/p>
&lt;/blockquote>
&lt;p>所以这里主要是定义一下解析表达式后可以返回的数据类型。Jinja 的基本数据类型有如下几种：&lt;/p>
&lt;ul>
&lt;li>字符串 # 双引号或单引号中间的一切都是字符串
&lt;ul>
&lt;li>&lt;code>&amp;quot;Hello World&amp;quot;&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>整数和浮点数 # 直接写下数值即可
&lt;ul>
&lt;li>&lt;code>42&lt;/code> 或者 &lt;code>42.23&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>列表
&lt;ul>
&lt;li>&lt;code>['list','of','objects']&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>元组
&lt;ul>
&lt;li>&lt;code>('tuple','of','values')&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>字典
&lt;ul>
&lt;li>&lt;code>{'dict': 'of', 'key': 'and', 'value': 'pairs'}&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>布尔 # 不带引号的 true 与 false
&lt;ul>
&lt;li>&lt;code>true&lt;/code> 和 &lt;code>false&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="variable变量-和-作用域">Variable(变量) 和 作用域&lt;/h1>
&lt;p>模板中的变量可以通过两种方式获得&lt;/p>
&lt;ul>
&lt;li>在模板中使用 &lt;code>{% set VAR = VALUE %}&lt;/code> 表达式进行定义&lt;/li>
&lt;li>在编程语言中，由代码在调用模板引擎函数时，在参数中定义。&lt;/li>
&lt;/ul>
&lt;h2 id="定义变量">定义变量&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#f92672">%&lt;/span> set VAR &lt;span style="color:#f92672">=&lt;/span> VALUE &lt;span style="color:#f92672">%&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#f92672">%&lt;/span> set VAR_1,VAR_2 &lt;span style="color:#f92672">=&lt;/span> VALUE_1,VALUE_2 &lt;span style="color:#f92672">%&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#f92672">%&lt;/span> set mystr &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;hello world&amp;#34;&lt;/span> &lt;span style="color:#f92672">%&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#f92672">%&lt;/span> set mylist1,mylist2 &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#ae81ff">1&lt;/span>,&lt;span style="color:#ae81ff">2&lt;/span>,&lt;span style="color:#ae81ff">3&lt;/span>],[&lt;span style="color:#ae81ff">4&lt;/span>,&lt;span style="color:#ae81ff">5&lt;/span>,&lt;span style="color:#ae81ff">6&lt;/span>] &lt;span style="color:#f92672">%&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="引用变量">引用变量&lt;/h2>
&lt;p>Jinja 模板语言中，引用变量是最基本、最简单的一种表达式。可以直接使用 &lt;code>{{ Variable }}&lt;/code> 引用一个变量。比如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#f92672">%&lt;/span> set NAME &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;DesistDaydrem&amp;#34;&lt;/span> &lt;span style="color:#f92672">%&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{{ NAME }}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Jinja 模板引擎允许使用点 &lt;code>.&lt;/code> 来访问列表或字典类型的变量，比如 &lt;code>mylist=[&amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;c&amp;quot;]&lt;/code> 列表，在 Jinja 中既可以使用 &lt;code>mylist[1]&lt;/code> 来访问第二个元素，也可以使用&lt;code>mylist.1&lt;/code>来访问它。&lt;/p>
&lt;p>在之前的文章中曾解释过这两种访问方式的区别，这里再重复一遍：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>使用 &lt;strong>&lt;code>**X.Y**&lt;/code>&lt;/strong> 时，先搜索 Ptyhon 对象的属性名或方法名，搜索不到时再搜索 Jinja 变量&lt;/strong>&lt;/li>
&lt;li>&lt;strong>使用 &lt;strong>&lt;code>**X[&amp;quot;Y&amp;quot;]**&lt;/code>&lt;/strong> 时，先搜索 Jinja 变量，搜索失败时，再搜索 Pythons 对象的属性名或方法名。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>所以，使用 &lt;code>X.Y&lt;/code> 方式时需要小心一些，使用 &lt;code>X[&amp;quot;Y&amp;quot;]&lt;/code> 更保险。当然，使用哪种方式都无所谓，出错了也知道如何去调整。&lt;/p>
&lt;h2 id="变量的作用域">变量的作用域&lt;/h2>
&lt;p>如果是在 if、for 等语句块外进行的变量赋值，则可以在 if、for 等语句块内引用。例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#f92672">%&lt;/span> set mylist &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#ae81ff">1&lt;/span>,&lt;span style="color:#ae81ff">2&lt;/span>,&lt;span style="color:#ae81ff">3&lt;/span>] &lt;span style="color:#f92672">%&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> item &lt;span style="color:#f92672">in&lt;/span> mylist &lt;span style="color:#f92672">%&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {{item}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#f92672">%&lt;/span> endfor &lt;span style="color:#f92672">%&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>但是除 if 语句块外，其它类型的语句块都有自己的作用域。比如 for 语句块内部赋值的变量在 for 退出后就消失。&lt;/p>
&lt;p>例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#f92672">%&lt;/span> set mylist &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#ae81ff">1&lt;/span>,&lt;span style="color:#ae81ff">2&lt;/span>,&lt;span style="color:#ae81ff">3&lt;/span>] &lt;span style="color:#f92672">%&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#f92672">%&lt;/span> set mystr &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;hello&amp;#34;&lt;/span> &lt;span style="color:#f92672">%&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> item &lt;span style="color:#f92672">in&lt;/span> mylist &lt;span style="color:#f92672">%&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {{item}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#f92672">%&lt;/span>set mystr&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;world&amp;#34;&lt;/span>&lt;span style="color:#f92672">%&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#f92672">%&lt;/span> endfor &lt;span style="color:#f92672">%&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{{mystr}}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>最后一行渲染的结果是&lt;code>hello&lt;/code>而不是&lt;code>world&lt;/code>。&lt;/p>
&lt;h1 id="运算符">运算符&lt;/h1>
&lt;h2 id="math算术-运算">Math(算术) 运算&lt;/h2>
&lt;ul>
&lt;li>&lt;code>**+** &lt;/code> # 将两个对象相加。通常对象是数字，但如果两者都是字符串或列表，您可以通过这种方式连接它们。然而，这不是连接字符串的首选方式！对于字符串连接，请查看 &lt;code>~&lt;/code> 运算符。 &lt;code>{{ 1 + 1 }}&lt;/code> 表达式的返回值为 2。
&lt;ul>
&lt;li>&lt;code>+&lt;/code> 操作符也可用于字符串串联、列表相加，例如&lt;code>&amp;quot;a&amp;quot;+&amp;quot;b&amp;quot;&lt;/code>得到”ab”，&lt;code>[1,2]+[3,4]&lt;/code>得到&lt;code>[1,2,3,4]&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>-&lt;/code>&lt;/li>
&lt;/ul>
&lt;h1 id="heading">&lt;/h1>
&lt;ul>
&lt;li>&lt;code>*&lt;/code> #
&lt;ul>
&lt;li>&lt;code>*&lt;/code> 也可用于重复字符串，例如&lt;code>&amp;quot;-&amp;quot; * 10&lt;/code>得到 10 个连续的短横线&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>/&lt;/code>&lt;/li>
&lt;/ul>
&lt;h1 id="heading-1">&lt;/h1>
&lt;ul>
&lt;li>&lt;code>/&lt;/code> 是浮点数除法，例如 3/2 得到 1.5&lt;/li>
&lt;li>&lt;code>// &lt;/code> #
&lt;ul>
&lt;li>&lt;code>//&lt;/code> 是截断式整除法，例如 20/7 得到 2&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>%&lt;/code>&lt;/li>
&lt;/ul>
&lt;h1 id="heading-2">&lt;/h1>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h2 id="comparisons比较-运算">Comparisons(比较) 运算&lt;/h2>
&lt;ul>
&lt;li>&lt;code>&amp;gt;&lt;/code> #&lt;/li>
&lt;li>&lt;code>&amp;lt; &lt;/code> #&lt;/li>
&lt;li>&lt;code>&amp;gt;=&lt;/code>&lt;/li>
&lt;/ul>
&lt;h1 id="heading-3">&lt;/h1>
&lt;ul>
&lt;li>&lt;code>&amp;lt;= &lt;/code> #&lt;/li>
&lt;li>&lt;code>== &lt;/code> #&lt;/li>
&lt;li>&lt;code>!=&lt;/code> #
需要说明一点：比较操作不仅仅只能比较数值，也能比较其它对象，比如字符串。&lt;/li>
&lt;/ul>
&lt;p>例如 &lt;code>&amp;quot;hey&amp;quot; &amp;gt; &amp;quot;hello&amp;quot;&lt;/code> 返回 True。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h2 id="logic逻辑">Logic(逻辑)&lt;/h2>
&lt;ul>
&lt;li>&lt;code>not &lt;/code> #&lt;/li>
&lt;li>&lt;code>and&lt;/code>
3&lt;/li>
&lt;li>&lt;code>or &lt;/code> #- &lt;code>(expr)&lt;/code> # &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/li>
&lt;/ul>
&lt;h2 id="其他运算符">其他运算符&lt;/h2>
&lt;ul>
&lt;li>&lt;code>in&lt;/code> # 成员测试，测试是否在容器内&lt;/li>
&lt;li>&lt;code>is&lt;/code> # 做 is 测试，参见后文&lt;/li>
&lt;li>&lt;code>|&lt;/code> # 过滤器，参见后文&lt;/li>
&lt;li>&lt;code>~&lt;/code> # 字符串串联 &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/li>
&lt;/ul>
&lt;h2 id="总结与说明">总结与说明&lt;/h2>
&lt;ul>
&lt;li>&lt;code>in&lt;/code> 运算符可测试多种容器，常见的包括：
&lt;ul>
&lt;li>列表测试 &lt;code>3 in [1,2,3]&lt;/code> - 字符串测试 &lt;code>&amp;quot;h&amp;quot; in &amp;quot;hey&amp;quot;&lt;/code>&lt;/li>
&lt;li>字典测试 &lt;code>&amp;quot;name&amp;quot; in {&amp;quot;name&amp;quot;:&amp;quot;j333333unma&amp;quot;,&amp;quot;age&amp;quot;:28}&lt;/code>&lt;/li>
&lt;li>上述几种测试结果都是 True&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>is&lt;/code> 运算符可以做很多测试，比如测试是否是数值、是否是字符串、变量是否定义、等等&lt;/li>
&lt;li>&lt;code>+&lt;/code> 可以做字符串串联，&lt;code>~&lt;/code> 也可以做字符串串联，例如 &lt;code>&amp;quot;ab&amp;quot; ~ &amp;quot;cd&amp;quot;&lt;/code> 运算结果为 &lt;code>&amp;quot;abcd&amp;quot;&lt;/code>&lt;/li>
&lt;li>&lt;code>not&lt;/code> 运算符和 &lt;code>is&lt;/code>、&lt;code>in&lt;/code> 结合时，可以放在两个位置。例如：
&lt;ul>
&lt;li>&lt;code>not (&amp;quot;h&amp;quot; in &amp;quot;hey&amp;quot;)&lt;/code> 和 &lt;code>&amp;quot;h&amp;quot; not in &amp;quot;hey&amp;quot;&lt;/code> 两者是等价的&lt;/li>
&lt;li>&lt;code>not (3 is number())&lt;/code> 和 &lt;code>3 is not number()&lt;/code> 两者是等价的 &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="control-structures控制结构">Control Structures(控制结构)&lt;/h1>
&lt;blockquote>
&lt;p>官方文档：&lt;a href="https://jinja.palletsprojects.com/en/latest/templates/">https://jinja.palletsprojects.com/en/latest/templates/&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>For(循环)&lt;/li>
&lt;li>If(条件判断)&lt;/li>
&lt;li>Macros(宏)- Call(调用)&lt;/li>
&lt;li>Filters(过滤)&lt;/li>
&lt;li>Assignments(赋值)&lt;/li>
&lt;li>Block Assignments(块赋值)&lt;/li>
&lt;li>Extends(继承)&lt;/li>
&lt;li>Blocks(块)&lt;/li>
&lt;li>Inclued(包含)&lt;/li>
&lt;li>Import(导入) &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/li>
&lt;/ul>
&lt;h2 id="条件判断">条件判断&lt;/h2>
&lt;p>Jinja 中可以使用 if&amp;hellip;else&amp;hellip; 语句进行条件判断，其语法为：&lt;/p>
&lt;pre>&lt;code>{% if CONDITION_1 %}
string_or_expression1
{% elif CONDITION_2 %}
string_or_expression2
{% elif CONDITION_3 %}
string_or_expression3
{% else %}
string_or_expression4
{% endif %}
&lt;/code>&lt;/pre>
&lt;p>其中 elif 和 else 分支都是可省略的。CONDITION 部分是条件表达式，关于 Jinja 支持的条件表达式，后面会介绍。&lt;/p>
&lt;p>例如，模板文件 a.txt.j2 内容如下：&lt;/p>
&lt;pre>&lt;code>今天星期几：
{% if whatday == &amp;quot;0&amp;quot; %}
星期日
{% elif whatday == &amp;quot;1&amp;quot; %}
星期一
{% elif whatday == &amp;quot;2&amp;quot; %}
星期二
{% elif whatday == &amp;quot;3&amp;quot; %}
星期三
{% elif whatday == &amp;quot;4&amp;quot; %}
星期四
{% elif whatday == &amp;quot;5&amp;quot; %}
星期五
{% elif whatday == &amp;quot;6&amp;quot; %}
星期六
{% else %}
错误数值
{% endif %}
&lt;/code>&lt;/pre>
&lt;p>上面判断变量 whatday 的值，然后输出对应的星期几。因为 whatday 变量的值是字符串，所以让它和字符串形式的数值进行等值比较。当然，也可以使用筛选器将字符串转换为数值后进行数值比较：&lt;code>whatday|int == 0&lt;/code>。&lt;/p>
&lt;p>playbook 内容如下：&lt;/p>
&lt;pre>&lt;code>---
- hosts: localhost
gather_facts: no
vars_prompt:
- name: whatday
default: 0
prompt: &amp;quot;星期几(0-&amp;gt;星期日,1-&amp;gt;星期一...):&amp;quot;
private: no
tasks:
- template:
src: a.txt.j2
dest: /tmp/a.txt
&lt;/code>&lt;/pre>
&lt;p>如果 if 语句的分支比较简单 (没有 elif 逻辑)，那么可以使用行内 if 表达式。&lt;/p>
&lt;p>其语法格式为：&lt;/p>
&lt;pre>&lt;code>string_or_expr1 if CONDITION else string_or_expr2
&lt;/code>&lt;/pre>
&lt;p>因为行内 if 是表达式而不是语句块，所以不使用 {%%} 符号，而使用 {{}} 。
例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">debug&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">msg&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;{{&amp;#39;周末&amp;#39; if whatday|int &amp;gt; 5 else &amp;#39;工作日&amp;#39;}}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h3 id="is-运算符">is 运算符&lt;/h3>
&lt;p>jinja 使用 &lt;code>is&lt;/code> 关键字，对表达式的渲染结果进行测试，测试结果有两种 true 和 false。常用在 &lt;code>{% if %}&lt;/code> 表达式中。&lt;/p>
&lt;p>比如 &lt;code>name is defined&lt;/code> 则表示对 name 这个表达式进行测试这个表达式，会根据名为 name 的变量是否被定义，返回 true 或 false。&lt;/p>
&lt;p>&lt;code>is&lt;/code> 运算符可以做很多测试操作，比如测试是否是数值，是否是字符串等等。下表列出了所有 Jinja2 内置的测试函数。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>callable()&lt;/th>
&lt;th>even()&lt;/th>
&lt;th>le()&lt;/th>
&lt;th>none()&lt;/th>
&lt;th>string()&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>defined()&lt;/td>
&lt;td>ge()&lt;/td>
&lt;td>lower()&lt;/td>
&lt;td>number()&lt;/td>
&lt;td>undefined()&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>divisibleby()&lt;/td>
&lt;td>gt()&lt;/td>
&lt;td>lt()&lt;/td>
&lt;td>odd()&lt;/td>
&lt;td>upper()&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>eq()&lt;/td>
&lt;td>in()&lt;/td>
&lt;td>mapping()&lt;/td>
&lt;td>sameas()&lt;/td>
&lt;td>escaped()&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>iterable()&lt;/td>
&lt;td>ne()&lt;/td>
&lt;td>sequence()&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>其中 callable()、escaped() 和 sameas() 在 Ansible 中几乎用不上，所以不解释。&lt;/p>
&lt;p>除了 Jinja2 的内置测试函数，Ansible 还有自己扩展的 is 测试函数，在后文我会统一列出来。&lt;/p>
&lt;p>这些测试函数有些可带参数、有些不带参数，当不带参数或只带一个参数时，括号可以省略。&lt;/p>
&lt;p>下面演示两个测试是否是字符串的示例，让大家知道该如何使用这些测试函数进行测试，之后直接解释各测试函数的意义便可。&lt;/p>
&lt;p>示例一：在 when 条件中测试&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">debug&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">msg&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;a string&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">when&lt;/span>: &lt;span style="color:#ae81ff">name is string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">vars&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">junmajinlong&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>示例二：在 jinja 模板的 if 中测试。测试 name 变量，如果不是字符串类型，则为真。&lt;/p>
&lt;pre>&lt;code>{% if name is not string %}
HELLOWORLD
{% endif %}
&lt;/code>&lt;/pre>
&lt;p>下面是各测试函数的作用：&lt;/p>
&lt;ul>
&lt;li>&lt;code>defined()&lt;/code>和&lt;code>undefined()&lt;/code> # 测试变量是否已定义&lt;/li>
&lt;li>&lt;code>number()&lt;/code>、&lt;code>string()&lt;/code>、&lt;code>none()&lt;/code> # 测试是否是一个数值、字符串、None&lt;/li>
&lt;li>&lt;code>lt()&lt;/code>、&lt;code>le()&lt;/code>、&lt;code>gt()&lt;/code>、&lt;code>ge()&lt;/code>、&lt;code>eq()&lt;/code>、&lt;code>ne()&lt;/code> # 分别测试是否小于、小于等于、大于、大于等于、等于、不等于&lt;/li>
&lt;li>&lt;code>lower()&lt;/code>和&lt;code>upper()&lt;/code> # 测试字符串是否全小写、全大写&lt;/li>
&lt;li>&lt;code>even()&lt;/code>和&lt;code>odd()&lt;/code> # 测试 value 是偶数还是奇数&lt;/li>
&lt;li>&lt;code>divisibleby(num)&lt;/code> # 测试是否能被 num 整除，例如&lt;code>18 is divisibleby 3&lt;/code>&lt;/li>
&lt;li>&lt;code>in(seq)&lt;/code> # 测试是否在 seq 中。例如&lt;code>3 is in([1,2,3])&lt;/code>、&lt;code>&amp;quot;h&amp;quot; is in(&amp;quot;hey&amp;quot;)&lt;/code>&lt;/li>
&lt;li>&lt;code>mapping()&lt;/code> # 测试是否是一个字典&lt;/li>
&lt;li>&lt;code>iterable()&lt;/code> # 测试是否可迭代，在 Ansible 中一般就是 list、dict、字符串，当然，在不同场景下可能还会遇到其它可迭代的结构&lt;/li>
&lt;li>&lt;code>sequence()&lt;/code> # 测试是否是一个序列结构，在 Ansible 中一般是 list、dict、字符串 (注：字符串、dict 在 python 中不是序列，但是在 Jinja2 测试中，属于序列)&lt;/li>
&lt;/ul>
&lt;p>纵观上面的内置测试函数，似乎并没有提供直接测试是否是一个列表类型的功能，但在 Ansible 中却会经常需要去判断所定义的变量是否是一个列表。所以这是一个常见的需求，可参考如下间接测试是否是列表的代码片段：&lt;/p>
&lt;pre>&lt;code>(VAR is sequence) and (VAR is not string) and (VAR is not mapping)
&lt;/code>&lt;/pre>
&lt;p>如果大家以后深入到 Ansible 的开发方面，可以自定义 Ansible 的模块和插件，那么就可以自己写一个更完善的 Filter 插件来测试是否是 list。下面我简单演示下基本步骤，大家能依葫芦画瓢更好，不理解也没任何关系。&lt;/p>
&lt;p>首先创建 filter_plugins 目录并在其内创建一个 py 文件，例如 collection.py，内容如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">islist&lt;/span>(collection):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> test data type is a list or not
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#39;&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> isinstance(collection, list)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">FilterModule&lt;/span>(object):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> custom jinja2 filter for test list type
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#39;&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">filters&lt;/span>(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;islist&amp;#39;&lt;/span>: islist
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后在 playbook 中便可使用 islist() 这个筛选器来判断是否是列表类型。例如：&lt;/p>
&lt;pre>&lt;code> msg: &amp;quot;a list&amp;quot;
when: p | islist
vars:
p:
- p1
- p2
&lt;/code>&lt;/pre>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h2 id="filters过滤器">Filters(过滤器)&lt;/h2>
&lt;p>通常，模板语言都会带有过滤器，JinJa 也不例外，每个过滤器函数都是一个功能，作用就类似于函数，而且它也可以接参数。变量可以通过 &lt;strong>Filters(过滤器)&lt;/strong> 修改。Jinja 中有两种使用 Filters 的方式：&lt;/p>
&lt;ul>
&lt;li>&lt;code>**|**&lt;/code>** 符号** # 过滤器 与 变量 之间使用 &lt;code>|&lt;/code> 符号分割，并且可以使用 &lt;code>()&lt;/code> 符号传递参数。多个过滤器可以链式调用，前一个过滤器的返回值会作为有一个过滤器的输入。&lt;/li>
&lt;li>&lt;code>**filter**&lt;/code>** 关键字 **# &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/li>
&lt;/ul>
&lt;h3 id="-符号">&lt;code>|&lt;/code> 符号&lt;/h3>
&lt;p>例如，Jinja 有一个内置 &lt;code>lower()&lt;/code> 过滤器函数，可以将字符串全部转化成大写字母。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">debug&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">msg&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;{{&amp;#39;hello world&amp;#39;|upper()}}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果过滤器函数没有给定参数，则括号可以省略，例如 &lt;code>&amp;quot;HELLO&amp;quot;|upper&lt;/code>。 &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h3 id="filter-关键字">&lt;code>filter&lt;/code> 关键字&lt;/h3>
&lt;p>我们还可以使用 filter 关键字，在语句表达式中使用过滤器，以对模板中的 一块数据(而不是一行或一个变量) 进行筛选操作，比如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#f92672">%&lt;/span> filter upper &lt;span style="color:#f92672">%&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 这部分文本内容中&lt;span style="color:#960050;background-color:#1e0010">，&lt;/span>小写字母将会变成大写的
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> This text becomes uppercase
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#f92672">%&lt;/span> endfilter &lt;span style="color:#f92672">%&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#ae81ff">% if result %}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{{&lt;span style="color:#ae81ff">result|replace(&amp;#39;no&amp;#39;, &amp;#39;yes&amp;#39;)}}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#ae81ff">%endif%}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h3 id="jinja-内置过滤器">Jinja 内置过滤器&lt;/h3>
&lt;p>JinJa 内置了多个过滤器函数，Ansible 自身也扩展了一些方便的筛选器函数，所以数量非常多。如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>abs()&lt;/th>
&lt;th>float()&lt;/th>
&lt;th>lower()&lt;/th>
&lt;th>round()&lt;/th>
&lt;th>tojson()&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>attr()&lt;/td>
&lt;td>forceescape()&lt;/td>
&lt;td>map()&lt;/td>
&lt;td>safe()&lt;/td>
&lt;td>trim()&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>batch()&lt;/td>
&lt;td>format()&lt;/td>
&lt;td>max()&lt;/td>
&lt;td>select()&lt;/td>
&lt;td>truncate()&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>capitalize()&lt;/td>
&lt;td>groupby()&lt;/td>
&lt;td>min()&lt;/td>
&lt;td>selectattr()&lt;/td>
&lt;td>unique()&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>center()&lt;/td>
&lt;td>indent()&lt;/td>
&lt;td>pprint()&lt;/td>
&lt;td>slice()&lt;/td>
&lt;td>upper()&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>default()&lt;/td>
&lt;td>int()&lt;/td>
&lt;td>random()&lt;/td>
&lt;td>sort()&lt;/td>
&lt;td>urlencode()&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>dictsort()&lt;/td>
&lt;td>join()&lt;/td>
&lt;td>reject()&lt;/td>
&lt;td>string()&lt;/td>
&lt;td>urlize()&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>escape()&lt;/td>
&lt;td>last()&lt;/td>
&lt;td>rejectattr()&lt;/td>
&lt;td>striptags()&lt;/td>
&lt;td>wordcount()&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>filesizeformat()&lt;/td>
&lt;td>length()&lt;/td>
&lt;td>replace()&lt;/td>
&lt;td>sum()&lt;/td>
&lt;td>wordwrap()&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>first()&lt;/td>
&lt;td>list()&lt;/td>
&lt;td>reverse()&lt;/td>
&lt;td>title()&lt;/td>
&lt;td>xmlattr()&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>我会将它们中绝大多数的含义列举出来 (剩下一部分是我觉得在 Ansible 中用不上的，比如 escape() 转义为 HTML 安全字符串)，各位没必要全都测试一遍，但是速看一遍并大概了解它们的含义和作用是有必要的。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>float(default=0.0)&lt;/code> # 将数值形式的字符串转换为浮点数。如果无法转换，则返回默认值 0.0。可使用 default 参数自定义转换失败时的默认值。&lt;/p>
&lt;ul>
&lt;li>例如&lt;code>&amp;quot;abcd&amp;quot;|float&lt;/code>、&lt;code>&amp;quot;&amp;quot;|float&lt;/code>都转换为 0.0，&lt;code>&amp;quot;&amp;quot;|float('NaN')&lt;/code>返回的是字符串 NaN，表示非数值含义。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>int(default=0,base=10)&lt;/code> # 将数值形式的字符串直接截断为整数。如果无法转换，则返回默认值 0。可使用 default 参数自定义转换失败时的默认值。&lt;/p>
&lt;ul>
&lt;li>此外，还可以指定进制参数 base，比如 base=2 表示将传递过来的参数当作二进制进行解析，然后转换为 10 进制数值。&lt;/li>
&lt;li>例如&lt;code>'3.55'|int&lt;/code>结果为 3，&lt;code>'0b100'|int(base=2)&lt;/code>结果为 4。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>abs()&lt;/code> # 计算绝对值。&lt;/p>
&lt;ul>
&lt;li>注意，只能计算数值，如果传递的是字符串，可使用筛选器 int() 或 float() 先转换成数值。例如&lt;code>'-3.14'|float|abs&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>round(precision=0,method='common')&lt;/code> # 对数值进行四舍五入。第一个参数指定四舍五入的精度，第二个参数指定四舍五入的方式，有三种方式可选择：&lt;/p>
&lt;ul>
&lt;li>ceil：只入不舍&lt;/li>
&lt;li>floor：只舍不入&lt;/li>
&lt;li>common：小于五的舍，大于等于 5 的入&lt;/li>
&lt;li>注意：
&lt;ul>
&lt;li>只能计算数值，如果传递的是字符串，可使用筛选器 int() 或 float() 先转换成数值&lt;/li>
&lt;li>计算的是整数，则返回值是整数，计算的是浮点数，则返回值是浮点数&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>例如&lt;code>42.55|round&lt;/code>的结果为 43.0，&lt;code>45|round&lt;/code>的结果是 45，&lt;code>42.55|round(1,'floor')&lt;/code>的结果是 42.5。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>random()&lt;/code> # 返回一个随机整数。竖线左边的值 X 决定了随机数的范围为&lt;code>[0,X)&lt;/code>。&lt;/p>
&lt;ul>
&lt;li>例如&lt;code>5|random&lt;/code>生成的随机数可能是 0、1、2、3、4。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>list()&lt;/code> # 转换为列表。如果要转换的目标是字符串，则返回的列表是字符串中的每个字符。&lt;/p>
&lt;ul>
&lt;li>例如&lt;code>range(1,4)|list&lt;/code>的结果是&lt;code>[1,2,3]&lt;/code>，&lt;code>&amp;quot;hey&amp;quot;|list&lt;/code>的结果是&lt;code>[&amp;quot;h&amp;quot;,&amp;quot;e&amp;quot;,&amp;quot;y&amp;quot;]&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>string()&lt;/code> # 转换为字符串。&lt;/p>
&lt;ul>
&lt;li>例如&lt;code>&amp;quot;333aa&amp;quot;&lt;/code>结果为”333aa”。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>tojson()&lt;/code> # 转换为 json 格式。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>lower()&lt;/code>、&lt;code>upper()&lt;/code>、&lt;code>title()&lt;/code>、&lt;code>capitalize()&lt;/code> # lower() 将大写字母转换为小写。upper() 将小写字母转换为大写。title() 将每个首字母转为大写。capitalize() 将第一个单词首字母转为大写。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>min()&lt;/code>、&lt;code>max()&lt;/code> # 从序列中取最小、最大值。&lt;/p>
&lt;ul>
&lt;li>例如&lt;code>[&amp;quot;a&amp;quot;,&amp;quot;abddd&amp;quot;,&amp;quot;cba&amp;quot;]|max&lt;/code>得到 cba。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>sum(start=0)&lt;/code> # 计算序列中各元素的算术和。可指定 start 参数作为算术和的起点。&lt;/p>
&lt;ul>
&lt;li>例如&lt;code>[1,2,3]|sum&lt;/code>得到 6，&lt;code>[1,2,3]|sum(start=3)&lt;/code>得到 9。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>trim()&lt;/code> # 移除字符串前缀和后缀空白。&lt;/p>
&lt;ul>
&lt;li>例如&lt;code>&amp;quot;abcd&amp;quot;|trim ~ &amp;quot;DEF&amp;quot;&lt;/code>得到”abcdDEF”。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>truncate()&lt;/code> # 截断字符串为指定长度。主要用于 web 编程，Ansible 用不到。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>replace(old,new,count=None)&lt;/code> # 将字符串中的 old 替换成 new，count 参数指定替换多少次，默认替换所有匹配成功的。&lt;/p>
&lt;ul>
&lt;li>例如&lt;code>&amp;quot;you see see you&amp;quot;|replace(&amp;quot;see&amp;quot;,&amp;quot;look&amp;quot;)&lt;/code>得到&lt;code>you look look you&lt;/code>，而&lt;code>replace(&amp;quot;see&amp;quot;,&amp;quot;look&amp;quot;,1)&lt;/code>则得到&lt;code>you look see you&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>first()&lt;/code>、&lt;code>last()&lt;/code> # 返回序列中的第一个、最后一个元素。&lt;/p>
&lt;ul>
&lt;li>例如&lt;code>&amp;quot;hello world&amp;quot; | last&lt;/code>返回字母 d，&lt;code>[2,3,4]|last&lt;/code>返回数值 4。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>map(attribute='xxx')&lt;/code> # 如果一个列表中包含了多个 dict，map 可根据指定的属性名 (即 dict 的 key)，从列表中各 dict 内筛选出该属性值部分。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>例如，对于如下变量：&lt;/p>
&lt;p>p:&lt;/p>
&lt;ul>
&lt;li>name: &amp;ldquo;junma&amp;rdquo;
age: 23&lt;/li>
&lt;li>name: woniu
age: 22
weight: 45&lt;/li>
&lt;li>name: tuner
age: 25
weight: 50&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>p|map(attribute=&amp;quot;name&amp;quot;)|list&lt;/code>将得到&lt;code>[&amp;quot;junma&amp;quot;,&amp;quot;woniu&amp;quot;,&amp;quot;tuner&amp;quot;]&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>select()&lt;/code>、&lt;code>reject()&lt;/code> # 从序列中选中、排除满足条件的项。例如：&lt;/p>
&lt;p>{{ numbers|select(&amp;ldquo;odd&amp;rdquo;) }} -&amp;gt;选出奇数
{{ numbers|select(&amp;ldquo;even&amp;rdquo;) }} -&amp;gt;选出偶数
{{ numbers|select(&amp;ldquo;lt&amp;rdquo;, 42) }} -&amp;gt;选出小于42的数
{{ strings|select(&amp;ldquo;eq&amp;rdquo;, &amp;ldquo;mystr&amp;rdquo;) }} -&amp;gt;选出&amp;quot;mystr&amp;quot;元素
{{ numbers|select(&amp;ldquo;divisibleby&amp;rdquo;, 3) }} -&amp;gt;选出被3整除的数&lt;/p>
&lt;/li>
&lt;li>
&lt;p>其中测试参数可以指定为支持的测试函数，在前文已经介绍过。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>selectattr()&lt;/code>、&lt;code>rejectattr()&lt;/code> # 根据对象属性筛选、排除序列中的多个元素。这个有时候很好用。比如：&lt;/p>
&lt;p>p:
- name: &amp;ldquo;junma&amp;rdquo;
age: 23
- name: woniu
age: 22
weight: 45
- name: tuner
age: 25
weight: 50&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>筛选所有 age 大于 22 岁的对象：&lt;/p>
&lt;pre>&lt;code>p|selectattr('age','gt',22)|list
&lt;/code>&lt;/pre>
&lt;p>得到的结果：&lt;/p>
&lt;pre>&lt;code>[
{&amp;quot;age&amp;quot;: 23,&amp;quot;name&amp;quot;: &amp;quot;junma&amp;quot;},
{&amp;quot;age&amp;quot;: 25,&amp;quot;name&amp;quot;: &amp;quot;tuner&amp;quot;,&amp;quot;weight&amp;quot;: 50}
]
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>
&lt;p>&lt;code>batch(count,fill_withs=None)&lt;/code> # 将序列中每 count 个元素打包成一个列表。最后一个列表可能元素个数不够，默认不填充，如果要填充，则指定&lt;code>fill_with&lt;/code>参数。&lt;/p>
&lt;ul>
&lt;li>例如&lt;code>[1,2,3,4,5]|batch(2)|list&lt;/code>得到&lt;code>[[1,2],[3,4],[5]]&lt;/code>，&lt;code>[1,2,3,4,5]|batch(2,'x')|list&lt;/code>得到&lt;code>[[1,2],[3,4],[5,'x']]&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>default('default_value',bool=False)&lt;/code>或&lt;code>d()&lt;/code> # 如果竖线左边的变量未定义，则返回 default() 指定的默认值。默认只对未定义变量其作用，如果想让 default() 也能对布尔类型的数据生效，需将第二个参数设置为 true。&lt;/p>
&lt;ul>
&lt;li>&lt;code>d()&lt;/code>是&lt;code>default()&lt;/code>的简写方式。&lt;/li>
&lt;li>例如&lt;code>myvar|d('undefined')&lt;/code>在 myvar 不存在时返回 undefined 字符串，&lt;code>&amp;quot;&amp;quot;|d(&amp;quot;empty&amp;quot;)&lt;/code>中因为是空字符串而不是未定义变量，所以仍然返回空字符串，&lt;code>&amp;quot;&amp;quot;|d(&amp;quot;empty&amp;quot;,true)&lt;/code>则返回 empty 字符串。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>unique()&lt;/code> # 对序列中进行去重操作。&lt;/p>
&lt;ul>
&lt;li>例如&lt;code>[1,2,3,3,1,2]|unique&lt;/code>得到结果&lt;code>[1,2,3]&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>(22).&lt;code>join(d=&amp;quot;&amp;quot;)&lt;/code>
将序列中的元素使用 d 参数指定的符号串联成字符串，默认连接符为空字符串。&lt;/p>
&lt;p>例如&lt;code>[1,2,3]|join(&amp;quot;-&amp;quot;)&lt;/code>得到&lt;code>1-2-3&lt;/code>，&lt;code>[1,2,3]|join&lt;/code>得到 123。&lt;/p>
&lt;p>(23).&lt;code>length()&lt;/code>和&lt;code>count()&lt;/code>
返回序列中元素的数量或字符串的字符个数。length 和 count 是别名等价的关系。&lt;/p>
&lt;p>(24).&lt;code>wordcount&lt;/code>
计算字符串中的单词个数。&lt;/p>
&lt;p>(25).&lt;code>reverse()&lt;/code>
颠倒序列元素。&lt;/p>
&lt;p>例如&lt;code>&amp;quot;hello&amp;quot;|reverse&lt;/code>得到&lt;code>olleh&lt;/code>，&lt;code>[1,2,3]|reverse|list&lt;/code>得到&lt;code>[3,2,1]&lt;/code>。&lt;/p>
&lt;p>(26).&lt;code>filesizeformat(binary=False)&lt;/code>
将数值大小转换为 kB、MB、GB 单位。默认按照 1000 为单位进行换算，如果指定 binary 参数为 True，则按 1024 进行换算。&lt;/p>
&lt;p>(27).&lt;code>slice(N, fill_with=None)&lt;/code>
将序列均分为 N 个列表，可指定&lt;code>fill_with&lt;/code>参数来填充均分时不足的列表。&lt;/p>
&lt;p>例如：&lt;/p>
&lt;pre>&lt;code>[1,2,3,4,5]|slice(3) |list -&amp;gt; [[1,2],[3,4],[5]]
[1,2,3,4] |slice(3,&amp;quot;x&amp;quot;)|list -&amp;gt; [[1,2],[3,&amp;quot;x&amp;quot;],[4,&amp;quot;x&amp;quot;]]
&lt;/code>&lt;/pre>
&lt;p>(28).&lt;code>groupby(attribute)&lt;/code>
根据指定的属性对 dict 进行分组。看下面的例子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">debug&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">msg&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;{{person|groupby(&amp;#34;name&amp;#34;)}}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">vars&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">person&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;junma&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">age&lt;/span>: &lt;span style="color:#ae81ff">23&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;junma&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">age&lt;/span>: &lt;span style="color:#ae81ff">33&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">woniu&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">age&lt;/span>: &lt;span style="color:#ae81ff">22&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">weight&lt;/span>: &lt;span style="color:#ae81ff">45&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">tuner&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">age&lt;/span>: &lt;span style="color:#ae81ff">25&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">weight&lt;/span>: &lt;span style="color:#ae81ff">50&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>得到的结果：&lt;/p>
&lt;pre>&lt;code>[
[&amp;quot;junma&amp;quot;, [{&amp;quot;age&amp;quot;: 23,&amp;quot;name&amp;quot;: &amp;quot;junma&amp;quot;},{&amp;quot;age&amp;quot;: 33,&amp;quot;name&amp;quot;: &amp;quot;junma&amp;quot;}]],
[&amp;quot;tuner&amp;quot;, [{&amp;quot;age&amp;quot;: 25,&amp;quot;name&amp;quot;: &amp;quot;tuner&amp;quot;,&amp;quot;weight&amp;quot;: 50}]],
[&amp;quot;woniu&amp;quot;, [{&amp;quot;age&amp;quot;: 22,&amp;quot;name&amp;quot;: &amp;quot;woniu&amp;quot;,&amp;quot;weight&amp;quot;: 45}]]
]
&lt;/code>&lt;/pre>
&lt;p>(29).&lt;code>indent(width=4)&lt;/code>
对字符串进行缩进格式化。默认缩进宽度为 4。&lt;/p>
&lt;p>(30).&lt;code>format()&lt;/code>
类似于&lt;code>printf&lt;/code>的方式格式化字符串。对于熟悉 Python 的人来说，使用&lt;code>%&lt;/code>或&lt;code>str.format()&lt;/code>格式化字符串要更方便些。&lt;/p>
&lt;p>下面是等价的：&lt;/p>
&lt;pre>&lt;code>{{ &amp;quot;%s, %s!&amp;quot;|format(&amp;quot;hello&amp;quot;, &amp;quot;world&amp;quot;) }}
{{ &amp;quot;%s, %s!&amp;quot; % (&amp;quot;hello&amp;quot;, &amp;quot;world&amp;quot;) }}
{{ &amp;quot;{}, {}!&amp;quot;.format(&amp;quot;hello&amp;quot;, &amp;quot;world&amp;quot;) }}
&lt;/code>&lt;/pre>
&lt;p>(31).&lt;code>center(witdth=80)&lt;/code>
将字符串扩充到指定宽度并放在中间位置，默认 80 个字符。&lt;/p>
&lt;p>例如&lt;code>&amp;quot;hello&amp;quot;|center(10)|replace(&amp;quot;&amp;quot;,&amp;quot;-&amp;quot;)&lt;/code>得到&lt;code>&amp;quot;--hello---&amp;quot;&lt;/code>。&lt;/p>
&lt;p>(32).&lt;code>sort(reverse=False, case_sensitive=False, attribute=None)&lt;/code>
对序列中的元素进行排序，attribute 指定按照什么进行排序。&lt;/p>
&lt;p>例如&lt;code>[&amp;quot;acd&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;ca&amp;quot;]|sort&lt;/code>得到&lt;code>[&amp;quot;a&amp;quot;,&amp;quot;acd&amp;quot;,&amp;quot;ca&amp;quot;]&lt;/code>。&lt;/p>
&lt;p>再例如，对于下面的变量：&lt;/p>
&lt;pre>&lt;code>person:
- name: &amp;quot;junma&amp;quot;
age: 23
- name: woniu
age: 22
weight: 45
- name: tuner
age: 25
weight: 50
&lt;/code>&lt;/pre>
&lt;p>可以使用&lt;code>person|sort(attribute=&amp;quot;age&amp;quot;)&lt;/code>对 3 个元素按照 age 进行升序排序。&lt;/p>
&lt;p>(33).&lt;code>dictsort(case_sensitive=False, by='key', reverse=False)&lt;/code>
对字典进行排序。默认按照 key 进行排序，可以指定为&lt;code>value&lt;/code>按照 value 进行排序。&lt;/p>
&lt;p>例如：&lt;/p>
&lt;pre>&lt;code>person:
p2:
name: &amp;quot;junma&amp;quot;
age: 23
p1:
name: woniu age: 22
weight: 45
p3:
age: 25
weight: 50
&lt;/code>&lt;/pre>
&lt;p>可以使用&lt;code>person|dictsort&lt;/code>按照 key(即 p1、p2、p3) 进行排序，结果是先 p1，再 p2，最后 p3。 &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h2 id="循环">循环&lt;/h2>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h3 id="for-迭代列表">for 迭代列表&lt;/h3>
&lt;p>for 循环的语法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> LIST &lt;span style="color:#f92672">%&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> string_or_expression
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#f92672">%&lt;/span> endfor &lt;span style="color:#f92672">%&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>还支持直接条件判断筛选要参与迭代的元素：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> LIST &lt;span style="color:#66d9ef">if&lt;/span> CONDITION &lt;span style="color:#f92672">%&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> string_or_expression
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#f92672">%&lt;/span> endfor &lt;span style="color:#f92672">%&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>此外，Jinja2 的 for 语句还允许使用 else 分支，如果 for 所迭代的列表 LIST 是空列表 (或没有元素可迭代)，则会执行 else 分支。&lt;/p>
&lt;pre>&lt;code>{% for i in LIST %}
string_or_expression
{% else %}
string_or_expression
{% endfor %}
&lt;/code>&lt;/pre>
&lt;p>例如，在模板文件 a.txt.j2 中有如下内容：&lt;/p>
&lt;pre>&lt;code>{% for file in files %}
&amp;lt;{{file}}&amp;gt;
{% else %}
no file in files
{% endfor %}
&lt;/code>&lt;/pre>
&lt;p>playbook 文件内容如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">hosts&lt;/span>: &lt;span style="color:#ae81ff">localhost&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">gather_facts&lt;/span>: &lt;span style="color:#66d9ef">no&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">tasks&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">template&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">src&lt;/span>: &lt;span style="color:#ae81ff">a.txt.j2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">dest&lt;/span>: &lt;span style="color:#ae81ff">/tmp/a.txt&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">vars&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">files&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">/tmp/a1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">/tmp/a2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">/tmp/a3&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行 playbook 之后，将生成包含如下内容的 / tmp/a.txt 文件：&lt;/p>
&lt;pre>&lt;code>&amp;lt;/tmp/a1&amp;gt;
&amp;lt;/tmp/a2&amp;gt;
&amp;lt;/tmp/a3&amp;gt;
&lt;/code>&lt;/pre>
&lt;p>如果将 playbook 中的&lt;code>files&lt;/code>变量设置为空列表，则会执行 else 分支，所以生成的 / tmp/a.txt 的内容为：&lt;/p>
&lt;pre>&lt;code>no file in files
&lt;/code>&lt;/pre>
&lt;p>如果 files 变量未定义或变量类型不是 list，则默认会报错。针对未定义变量，可采用如下策略提供默认空列表：&lt;/p>
&lt;pre>&lt;code>{% for file in (files|default([])) %}
&amp;lt;{{file}}&amp;gt;
{% else %}
no file in files
{% endfor %}
&lt;/code>&lt;/pre>
&lt;p>如果不想迭代文件列表中的&lt;code>/tmp/a3&lt;/code>，则可以加上条件判断：&lt;/p>
&lt;pre>&lt;code>&amp;lt;{{file}}&amp;gt;
{% else %}
no file in files
{% endfor %}
&lt;/code>&lt;/pre>
&lt;p>Jinja2 的 for 循环没有提供 break 和 continue 的功能，所以只能通过 {% for&amp;hellip;if&amp;hellip;%} 来间接实现类似功能。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h3 id="for-迭代字典">for 迭代字典&lt;/h3>
&lt;p>默认情况下，Jinja2 的 for 语句只能迭代列表。&lt;/p>
&lt;p>如果要迭代字典结构，需要先使用字典的&lt;code>items()&lt;/code>方法进行转换。如果没有学过 python，我下面做个简单解释：&lt;/p>
&lt;p>对于下面的字典结构：&lt;/p>
&lt;pre>&lt;code>p:
name: junmajinlong
age: 18
&lt;/code>&lt;/pre>
&lt;p>如果使用&lt;code>p.items()&lt;/code>，将计算得到如下结果：&lt;/p>
&lt;pre>&lt;code>[('name', 'junmajinlong'), ('age', 18)]
&lt;/code>&lt;/pre>
&lt;p>然后 for 语句中使用两个迭代变量分别保存各列表元素中的子元素即可。下面设置了两个迭代变量 key 和 value：&lt;/p>
&lt;pre>&lt;code>{% for key,value in p.items() %}
&lt;/code>&lt;/pre>
&lt;p>那么第一轮迭代时，key 变量保存的是 name 字符串，value 变量保存的是 junmajinlong 字符串，那么第二轮迭代时，key 变量保存的是 age 字符串，value 变量保存的是 18 数值。&lt;/p>
&lt;p>如果 for 迭代时不想要 key 或不想要 value，则使用&lt;code>_&lt;/code>来丢弃对应的值。也可以使用&lt;code>keys()&lt;/code>方法和&lt;code>values()&lt;/code>方法分别获取字典的 key 组成的列表、字典的 value 组成的列表。例如：&lt;/p>
&lt;pre>&lt;code>{% for key,_ in p.items() %}
{% for _,values in p.items() %}
{% for key in p.keys() %}
{% for value in p.values() %}
&lt;/code>&lt;/pre>
&lt;p>将上面的解释整理成下面的示例。playbook 内容如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">hosts&lt;/span>: &lt;span style="color:#ae81ff">localhost&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">gather_facts&lt;/span>: &lt;span style="color:#66d9ef">no&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">tasks&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">template&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">src&lt;/span>: &lt;span style="color:#ae81ff">a.txt.j2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">dest&lt;/span>: &lt;span style="color:#ae81ff">/tmp/a.txt&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">vars&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">p1&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;junmajinlong&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">age&lt;/span>: &lt;span style="color:#ae81ff">18&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>模板文件 a.txt.j2 内容如下：&lt;/p>
&lt;pre>&lt;code>{% for key,value in p1.items() %}
{% endfor %}
&lt;/code>&lt;/pre>
&lt;p>执行结果：&lt;/p>
&lt;pre>&lt;code>key: name, value: junmajinlong
key: age, value: 18
&lt;/code>&lt;/pre>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h3 id="for-的特殊控制变量">for 的特殊控制变量&lt;/h3>
&lt;p>在 for 循环内部，可以使用一些特殊变量，如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Variable&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>loop&lt;/td>
&lt;td>循环本身&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>loop.index&lt;/td>
&lt;td>本轮迭代的索引位，即第几轮迭代 (从 1 开始计数)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>loop.index0&lt;/td>
&lt;td>本轮迭代的索引位，即第几轮迭代 (从 0 开始计数)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>loop.revindex&lt;/td>
&lt;td>本轮迭代的逆向索引位 (距离最后一个 item 的长度，从 1 开始计数)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>loop.revindex0&lt;/td>
&lt;td>本轮迭代的逆向索引位 (距离最后一个 item 的长度，从 0 开始计数)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>loop.first&lt;/td>
&lt;td>如果本轮迭代是第一轮，则该变量值为 True&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>loop.last&lt;/td>
&lt;td>如果本轮迭代是最后一轮，则该变量值为 True&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>loop.length&lt;/td>
&lt;td>循环要迭代的轮数，即 item 的数量&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>loop.previtem&lt;/td>
&lt;td>本轮迭代的前一轮的 item 值，如果当前是第一轮，则该变量未定义&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>loop.nextitem&lt;/td>
&lt;td>本轮迭代的下一轮的 item 值，如果当前是最后一轮，则该变量未定义&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>loop.depth&lt;/td>
&lt;td>在递归循环中，表示递归的深度，从 1 开始计数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>loop.depth0&lt;/td>
&lt;td>在递归循环中，表示递归的深度，从 0 开始计数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>loop.cycle&lt;/td>
&lt;td>一个函数，可指定序列作为参数，for 每迭代一次便同步迭代序列中的一个元素&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>loop.changed(*val)&lt;/td>
&lt;td>如果本轮迭代时的 val 值和前一轮迭代时的 val 值不同，则返回 True&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>之前曾介绍过，在 Ansible 的循环开启&lt;code>extended&lt;/code>功能之后也能获取一些特殊变量。不难发现，Ansible 循环开启&lt;code>extended&lt;/code>后可获取的变量和此处 Jinja2 提供的循环变量大多是类似的。所以这里只介绍之前尚未解释过的几个变量。&lt;/p>
&lt;p>首先是&lt;code>loop.cycle()&lt;/code>，它是一个函数，可以传递一个序列 (比如列表) 作为参数。在 for 循环迭代时，每迭代一个元素的同时，也会从参数指定的序列中迭代一个元素，如果序列元素迭代完了，则从头开始继续迭代。&lt;/p>
&lt;p>例如，playbook 内容如下：&lt;/p>
&lt;pre>&lt;code>- hosts: localhost
gather_facts: no
tasks:
- template:
src: a.txt.j2
dest: /tmp/a.txt
vars:
p:
- aaa
- bbb
- ccc
&lt;/code>&lt;/pre>
&lt;p>模板文件 a.txt.j2 内容如下：&lt;/p>
&lt;pre>&lt;code>{% for i in p %}
item: {{i}}
cycle: {{loop.cycle(&amp;quot;AAA&amp;quot;,&amp;quot;BBB&amp;quot;)}}
{% endfor %}
&lt;/code>&lt;/pre>
&lt;p>渲染后得到的 / tmp/a.txt 文件内容如下：&lt;/p>
&lt;pre>&lt;code>item: aaa
cycle: AAA
item: bbb
cycle: BBB
item: ccc
cycle: AAA
&lt;/code>&lt;/pre>
&lt;p>然后是&lt;code>loop.changed(val)&lt;/code>，这也是一个函数。如果相邻的两轮迭代中 (即当前一轮和前一轮)，参数 val 的值没有发生变化，则当前一轮的&lt;code>loop.changed()&lt;/code>返回 False，否则返回 True。举个例子很容易理解：&lt;/p>
&lt;p>playbook 内容如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">hosts&lt;/span>: &lt;span style="color:#ae81ff">localhost&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">gather_facts&lt;/span>: &lt;span style="color:#66d9ef">no&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">tasks&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">template&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">src&lt;/span>: &lt;span style="color:#ae81ff">a.txt.j2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">dest&lt;/span>: &lt;span style="color:#ae81ff">/tmp/a.txt&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">vars&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">persons&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;junmajinlong&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">age&lt;/span>: &lt;span style="color:#ae81ff">18&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;junmajinlong&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">age&lt;/span>: &lt;span style="color:#ae81ff">22&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;wugui&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">age&lt;/span>: &lt;span style="color:#ae81ff">23&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>模板文件 a.txt.j2 内容如下：&lt;/p>
&lt;pre>&lt;code>{% for p in persons %}
{% if loop.changed(p.name) %}
index: {{loop.index}}
{% endif %} {% endfor %}
&lt;/code>&lt;/pre>
&lt;p>渲染后得到的 / tmp/a.txt 结果：&lt;/p>
&lt;pre>&lt;code>index: 1
index: 3
&lt;/code>&lt;/pre>
&lt;p>显然，第二轮迭代时的 p.name 和前一轮迭代时的 p.name 值是相同的，所以渲染结果中没有&lt;code>index: 2&lt;/code>。 &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h3 id="如何跨作用域">如何跨作用域&lt;/h3>
&lt;p>那如何在 for 循环内做一个自增操作呢？这应该也是非常常见的需求。但只能说 Jinja2 里这不方便，只能退而求其次找其它方式，这里我提供两种：&lt;/p>
&lt;pre>&lt;code>{# 使用loop.index，它本身就是自增的 #}
{% set mylist = [1,2,3] %}
{% for item in mylist %}
name{{loop.index}}
{% endfor %}
{# 使用Jinja2 2.10版的namespace，它可以让变量跨作用域 #}
{% set num = namespace(value=3) %}
{% for item in mylist %}
name{{num.value}}
{% set num.value = num.value + 2 %}
{% endfor %}
&lt;/code>&lt;/pre>
&lt;p>使用上面第二种方案时要注意 Jinja2 的版本号，Ansible 所使用的 Jinja2 很可能是低于 2.10 版本的。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h2 id="macro宏">Macro(宏)&lt;/h2>
&lt;p>计算机科学当中，Macro(宏) 表示的是一段指令的简写，它会在特定的时候替换成其所代表的一大段指令。&lt;/p>
&lt;p>如果各位之前不曾知道 Macro 的概念，我这里用一个不严谨、不属于同一个范畴但最方便大家理解的示例来解释：Shell 中的命令别名可以看作是 Macro，Shell 会在命令开始执行之前 (即在 Shell 解析命令行的阶段) 先将别名替换成其原本的值。比如将&lt;code>ls&lt;/code>替换成&lt;code>rm -rf&lt;/code>。&lt;/p>
&lt;p>Jinja2 是支持 Macro 概念的，宏类似于函数，比如可以接参数，具有代码复用的功能。但其本质和函数是不同的，Macro 是替换成原代码片段，函数是直接寻找到地址进行调用。这就不多扯了，好像离题有点远，这可不是编程教程。总的来说，Jinja2 的 Macro 需要像函数一样先定义，在使用的时候直接调用即可，至于底层细节，管它那么多干嘛，又不会涨一毛钱工资。&lt;/p>
&lt;p>举一个比较常见的案例，比如某服务的配置文件某指令可以接多个参数值，每个值以空格分隔，每个指令以分号&lt;code>;&lt;/code>结尾。例如：&lt;code>log 'host' 'port' 'date';&lt;/code>。如果用模板去动态配置这个指令，可能会使用 for 循环迭代，但要区分空格分隔符和尾部的分号分隔符。于是，编写如下 Macro：&lt;/p>
&lt;pre>&lt;code>{% macro delimiter(loop) -%}
{{ ' ' if not loop.last else ';' }}
{%- endmacro %}
&lt;/code>&lt;/pre>
&lt;p>上面表示定义了一个名为 delimiter 的 Macro，它能接一个表示 for 循环的参数。&lt;/p>
&lt;p>上面的 Macro 定义中还使用了 -%} 和 {%- ，这是用于处理空白符号的，稍后会解释它的用法，现在各位只需当这个短横线不存在即可。&lt;/p>
&lt;p>定义好这个 Macro 之后，就可以在任意需要的时候去” 调用” 它。例如：&lt;/p>
&lt;pre>&lt;code>log {% for item in log_args %}
'{{item}}'{{delimiter(loop)}}
{%- endfor %}
gzip {% for item in gzip_args %}
'{{item}}'{{delimiter(loop)}}
{%- endfor %}
&lt;/code>&lt;/pre>
&lt;p>提供一个 playbook，内容如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">hosts&lt;/span>: &lt;span style="color:#ae81ff">localhost&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">gather_facts&lt;/span>: &lt;span style="color:#66d9ef">no&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">tasks&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">template&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">src&lt;/span>: &lt;span style="color:#ae81ff">a.txt.j2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">dest&lt;/span>: &lt;span style="color:#ae81ff">/tmp/a.txt&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">vars&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">log_args&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">host&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">port&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">date&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">gzip_args&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;css&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;js&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;html&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>渲染出来的结果如下：&lt;/p>
&lt;pre>&lt;code>log 'host' 'port' 'date';
gzip 'css' 'js' 'html';
&lt;/code>&lt;/pre>
&lt;p>Macro 的参数还可以指定默认值，” 调用”Macro 并传递参数时，还可以用 key=value 的方式传递。例如：&lt;/p>
&lt;pre>&lt;code>{# 定义Macro时，指定默认值 #}
{% macro delimiter(loop,sep=&amp;quot; &amp;quot;,deli=&amp;quot;;&amp;quot;) -%}
{{ sep if not loop.last else deli }}
{%- endmacro %}
{# &amp;quot;调用&amp;quot;Macro时，使用key=value传递参数值 #}
log {% for item in log_args %}
'{{item}}'{{delimiter(loop,sep=&amp;quot;,&amp;quot;)}}
{%- endfor %}
gzip {% for item in gzip_args %}
'{{item}}'{{delimiter(loop,deli=&amp;quot;&amp;quot;)}}
{%- endfor %}
&lt;/code>&lt;/pre>
&lt;p>渲染得到的结果：&lt;/p>
&lt;pre>&lt;code>log 'host','port','date';
gzip 'css' 'js' 'html'
&lt;/code>&lt;/pre>
&lt;p>关于 Macro，还有些内容可以继续深入 (一些变量和 call 调用的方式)，但应该很少很少用到，所以我这就不再展开了，如果大家有意愿，可以去官方手册学习或网上搜索相关资料，有编程基础的人应该很容易理解，没有编程基础的，就别凑这个热闹了。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h2 id="block块-与-extends继承">Block(块) 与 Extends(继承)&lt;/h2>
&lt;p>有些服务程序的配置文件可以使用 include 指令来包含额外的配置文件，这样可以按不同功能来分类管理配置文件中的配置项。在解析配置文件的时候，会将 include 指令所指定的文件内容加载并合并到主配置文件中。&lt;/p>
&lt;p>Jinja2 的 block 功能有点类似于 include 指令的功能，block 的用法是这样的：先在一个类似于主配置文件的文件中定义 block，称为 base block 或父 block，然后在其它文件中继承 base block，称为子 block。在模板解析的时候，会将子 block 中的内容填充或覆盖到父 block 中。&lt;/p>
&lt;p>例如，在 base.conf.j2 文件中定义如下内容：&lt;/p>
&lt;pre>&lt;code>server {
listen 80;
server_name www.abc.com;
{% block root_page %}
location / {
root /usr/share/nginx/html;
index index.html index.htm;
}
{% endblock root_page %}
error_page 500 502 503 504 /50x.html;
{% block err_50x %}{% endblock err_50x %}
{% block php_pages %}{% endblock php_pages %}
}
&lt;/code>&lt;/pre>
&lt;p>这其实是一个 Nginx 的虚拟主机配置模板文件。在其中定义了三个 block：&lt;/p>
&lt;ul>
&lt;li>(1). 名为 root_page 的 block，其内部有内容，这个内容是默认内容&lt;/li>
&lt;li>(2). 名为 err_50x 的 block，没有内容&lt;/li>
&lt;li>(3). 名为 php_pages 的 block，没有内容&lt;/li>
&lt;/ul>
&lt;p>如果定义了同名子 block，则会使用子 block 来覆盖父 block，如果没有定义同名子 block，则会采用默认内容。&lt;/p>
&lt;p>下面专门用于定义子 block 内容的 child.conf.j2 文件，内容如下：&lt;/p>
&lt;pre>&lt;code>{% extends 'base.conf.j2' %}
{% block err_50x %}
location = /50x.html {
root /usr/share/nginx/html;
}
{% endblock err_50x %}
{% block php_pages %}
location ~ \.php$ {
fastcgi_pass &amp;quot;192.168.200.43:9000&amp;quot;;
fastcgi_index index.php;
fastcgi_param SCRIPT_FILENAME /usr/share/www/php$fastcgi_script_name;
include fastcgi_params;
}
{% endblock php_pages %}
&lt;/code>&lt;/pre>
&lt;p>子 block 文件中第一行需要使用 jinja2 的&lt;code>extends&lt;/code>标签来指定父 block 文件。这个子 block 文件中，没有定义名为&lt;code>root_page&lt;/code>的 block，所以会使用父 block 文件中同名 block 的默认内容，&lt;code>err_50x&lt;/code>和&lt;code>php_pages&lt;/code>则直接覆盖父 block。&lt;/p>
&lt;p>在 template 模块渲染文件时，需要指定子 block 作为其源文件。例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">hosts&lt;/span>: &lt;span style="color:#ae81ff">localhost&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">gather_facts&lt;/span>: &lt;span style="color:#66d9ef">no&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">tasks&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">template&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">src&lt;/span>: &lt;span style="color:#ae81ff">child.conf.j2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">dest&lt;/span>: &lt;span style="color:#ae81ff">/tmp/nginx.conf&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>渲染得到的结果:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">server&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">listen&lt;/span> &lt;span style="color:#ae81ff">80&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">server_name&lt;/span> &lt;span style="color:#e6db74">www.abc.com&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">location&lt;/span> &lt;span style="color:#e6db74">/&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">root&lt;/span> &lt;span style="color:#e6db74">/usr/share/nginx/html&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">index&lt;/span> &lt;span style="color:#e6db74">index.html&lt;/span> &lt;span style="color:#e6db74">index.htm&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">error_page&lt;/span> &lt;span style="color:#ae81ff">500&lt;/span> &lt;span style="color:#ae81ff">502&lt;/span> &lt;span style="color:#ae81ff">503&lt;/span> &lt;span style="color:#ae81ff">504&lt;/span> &lt;span style="color:#e6db74">/50x.html&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">location&lt;/span> = &lt;span style="color:#e6db74">/50x.html&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">root&lt;/span> &lt;span style="color:#e6db74">/usr/share/nginx/html&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">location&lt;/span> ~ &lt;span style="color:#e6db74">\.php$&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">fastcgi_pass&lt;/span> &lt;span style="color:#e6db74">&amp;#34;192.168.200.43:9000&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">fastcgi_index&lt;/span> &lt;span style="color:#e6db74">index.php&lt;/span>; &lt;span style="color:#f92672">fastcgi_param&lt;/span> &lt;span style="color:#e6db74">SCRIPT_FILENAME&lt;/span> &lt;span style="color:#e6db74">/usr/share/www/php&lt;/span>$fastcgi_script_name;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">include&lt;/span> &lt;span style="color:#e6db74">fastcgi_params&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>jinja2 的 block 是很出色的一个功能，但在 Ansible 中应该不太可能用到 (或机会极少)，所以多的就不介绍了，有兴趣的可自行找资料了解。 &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h1 id="jinja-的空白处理">Jinja 的空白处理&lt;/h1>
&lt;p>通常在模板文件中，会将模板代码片段按照编程语言的代码一样进行换行、缩进，但因为它们是嵌套在普通字符串中的，模板引擎并不知道那是一个普通字符串中的空白还是代码格式规范化的空白，而有时候这会带来问题。&lt;/p>
&lt;p>比如，模板文件 a.txt.j2 文件中的内容如下：&lt;/p>
&lt;pre>&lt;code>line start
line left {% if true %}
&amp;lt;line1&amp;gt;
{% endif %} line right
line end
&lt;/code>&lt;/pre>
&lt;p>这个模板文件中的代码部分看上去非常规范，有换行有缩进。一般来说，这段模板文件想要渲染得到的文本内容应该是：&lt;/p>
&lt;pre>&lt;code>line start
line left
&amp;lt;line1&amp;gt;
line right
line end
&lt;/code>&lt;/pre>
&lt;p>或者是：&lt;/p>
&lt;pre>&lt;code>line start
line left &amp;lt;line1&amp;gt; line right
line end
&lt;/code>&lt;/pre>
&lt;p>但实际渲染得到的结果：&lt;/p>
&lt;pre>&lt;code>line start
line left &amp;lt;line1&amp;gt;
line right
line end
&lt;/code>&lt;/pre>
&lt;p>渲染的结果中格式很不规范，主要原因就是 Jinja2 语句块前后以及语句块自身的换行符处理、空白符号处理导致的问题。&lt;/p>
&lt;p>Jinja2 提供了两个配置项：&lt;code>lstrip_blocks&lt;/code>和&lt;code>trim_blocks&lt;/code>，它们的意义分别是：&lt;/p>
&lt;ul>
&lt;li>(1).&lt;code>lstrip_blocks&lt;/code>：设置为 true 时，会将 Jinja2 语句块前面的本行前缀空白符号移除&lt;/li>
&lt;li>(2).&lt;code>trim_blocks&lt;/code>：设置为 true 时，Jinja2 语句块后的换行符会被移除掉&lt;/li>
&lt;/ul>
&lt;p>对于 Ansible 的 template 模块，&lt;code>lstrip_blocks&lt;/code> 默认设置为 False，&lt;code>trim_blocks&lt;/code> 默认设置为 true。也就是说，默认情况下，template 模块会将语句块后面的换行符移除掉，但是会保留语句块前的本行前缀空白符号。&lt;/p>
&lt;p>例如，对于下面这段模板片段：&lt;/p>
&lt;pre>&lt;code>line start
{% if true %}
&amp;lt;line1&amp;gt;
{% endif %}
line end
&lt;/code>&lt;/pre>
&lt;p>&lt;code>{% if&lt;/code>前的 4 个空格会保留，&lt;code>true %}&lt;/code>后的换行符会被移除，于是&amp;rsquo;line1&amp;rsquo;(注意前面两个空格) 渲染的时候会移到第二行去。再看&lt;code>{% endif %}&lt;/code>，&lt;code>{%&lt;/code>前面的空白符号会保留，&lt;code>%}&lt;/code>后面的换行符会被移除，所以&lt;code>line end&lt;/code>在渲染时会移动到第三行。第二行和第三行的换行符是由&amp;rsquo;line1&amp;rsquo;这行提供的。&lt;/p>
&lt;p>所以结果是：&lt;/p>
&lt;pre>&lt;code>line start
&amp;lt;line1&amp;gt;
line end
&lt;/code>&lt;/pre>
&lt;p>一般来说，将&lt;code>lstrip_blocks&lt;/code>和&lt;code>trim_blocks&lt;/code>都设置为 true，比较符合大多数情况下的空白处理需求。例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">template&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">src&lt;/span>: &lt;span style="color:#ae81ff">a.txt.j2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">dest&lt;/span>: &lt;span style="color:#ae81ff">/tmp/a.txt&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">lstrip_blocks&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">trim_blocks&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>渲染得到的结果：&lt;/p>
&lt;pre>&lt;code>line start
&amp;lt;line1&amp;gt;
line end
&lt;/code>&lt;/pre>
&lt;p>更符合一般需求的模板格式是，&lt;strong>Jinja2 指令部分 (比如 if、endif、for、endfor 等) 不要使用任何缩进格式，非 Jinja2 指令部分按需缩进&lt;/strong>。&lt;/p>
&lt;pre>&lt;code>line start
{% if true %}
&amp;lt;line1&amp;gt;
{% endif %}
line end
&lt;/code>&lt;/pre>
&lt;p>除了&lt;code>lstrip_blocks&lt;/code>以及&lt;code>trim_blocks&lt;/code>可以控制空白外，还可以使用&lt;code>{%- xxx&lt;/code>可以移除本语句块前的所有空白 (包括换行符)，使用&lt;code>-%}&lt;/code>可以移除本语句块后的所有空白 (包括换行符)。&lt;/p>
&lt;p>注意，&lt;code>xxx_blocks&lt;/code>这两个配置项和带&lt;code>-&lt;/code>符号的效果是不同的，总结下：&lt;/p>
&lt;ul>
&lt;li>(1).lstrip_blocks 只移除语句块前紧连着的且是本行前缀的空白符&lt;/li>
&lt;li>(2).{%- 移除语句块前所有空白&lt;/li>
&lt;li>(3).trip_blocks 只移除语句块后紧跟着的换行符&lt;/li>
&lt;li>(4).-%}`移除语句块后所有的空白&lt;/li>
&lt;/ul>
&lt;p>例如，下面两个模板片段：&lt;/p>
&lt;pre>&lt;code>line1
line2 {%- if true %}
line3
line4
{%- endif %}
line44
line5
&lt;/code>&lt;/pre>
&lt;p>在两个&lt;code>xxx_blocks&lt;/code>设置为 true 时，渲染得到的结果是：
line1
line2line3
line4line44
line5&lt;/p>
&lt;p>最后想告诉各位，如果渲染后得到的结果是合理的 (比如配置文件语法不报错)，就不要追求精确控制空白符号。比如别为了将多个连续的空格压缩成看上去更显规范的单个空格而想方设法(如果你是强迫症，就要小心咯)。如果你还没遇到过这个问题，那以后也肯定会遇到的，其实只要模板稍微写的复杂一点，就能体会到什么叫做” 众口难调”。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>在前面解释过，当使用&lt;code>x.y&lt;/code>的方式访问 y 的时候，会先寻找 x 的 y 属性或 y 方法，找不到才开始找 Jinja2 中定义的属性。&lt;/p>
&lt;p>所以，在 Ansible 中有些时候是可以直接使用 Python 对象自身方法的，比如字符串对象可以使用&lt;code>endswith&lt;/code>判断字符串是否以某字符串结尾。&lt;/p>
&lt;p>这也为 Ansible 提供了非常有用的功能。但是有些人可能没学过 Python，所以也不知道有哪些方法可用，也不理解有些代码是什么作用。这一点我也没有办法帮助各位，但大家也不用太过在意，几个方法而已，细节罢了。事实上也就字符串对象的方法比较多。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h3 id="python-字符串处理">Python 字符串处理&lt;/h3>
&lt;p>在 Jinja2 中，经常会使用到字符串。如何使用字符串对象的方法？&lt;/p>
&lt;p>例如，Python 字符串对象有一个 upper 方法，可以将字符串改变为大写字母，直接使用&lt;code>&amp;quot;abc&amp;quot;.upper()&lt;/code>，注意不要省略小括号，这一点和 Jinja2 和 Shell 函数都是不一样的。&lt;/p>
&lt;p>例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">debug&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">msg&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;{{ &amp;#34;abc&amp;#34;.upper() }}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">debug&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">msg&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;{{ &amp;#39;foo bar baz&amp;#39;.upper().split() }}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>得到：&lt;/p>
&lt;pre>&lt;code>TASK [debug] ****************
ok: [localhost] =&amp;gt; {
&amp;quot;msg&amp;quot;: &amp;quot;ABC&amp;quot;
}
TASK [debug] *****************
&amp;quot;msg&amp;quot;: [&amp;quot;FOO&amp;quot;, &amp;quot;BAR&amp;quot;, &amp;quot;BAZ&amp;quot;]
}
&lt;/code>&lt;/pre>
&lt;p>下面是字符串对象的各种方法，我简单说明了它们的功能，关于它们的用法和示例可参见我的博客：&lt;a href="https://www.junmajinlong.com/python/string_methods/">https://www.junmajinlong.com/python/string_methods/&lt;/a>。&lt;/p>
&lt;pre>&lt;code>lower：将字符串转换为小写字母
upper：将字符串转换为大写字母
title：将字符串所有单词首字母大写，其它字母小写
capitalize：将字符串首单词首字母大写，其它字母小写
swapcase：将字符串中所有字母大小写互换
isalpha：判断字符串中所有字符是否是字母
isdecimal：判断字符串中所有字符是否是数字
isdigit：判断字符串中所有字符是否是数字
isnumeric：判断字符串中所有字符是否是数字
isalnum：判断字符串中所有字符是否是字母或数字
islower：判断字符串中所有字符是否是小写字母
isupper：判断字符串中所有字符是否是大写字母
istitle：判断字符串中是否所有单词首字符大写，其它小写
isspace：判断字符串中所有字符是否是空白字符(空格、制表符、换行符等)
isprintable：判断字符串中所有字符是否是可打印字符(如制表符、换行符不是可打印字符)
isidentifier：判断字符串中是否符合标识符定义规则(即只包含字母、数字或下划线，且字母或下划线开头)
center：在左右两边填充字符串到指定长度，字符串居中
ljust：在右边填充字符串到指定长度
rjust：在左边填充字符串到指定长度
zfill：使用0填充在字符串左边
count：计算字符串中某字符或某子串出现的次数
endswith：字符串是否以某字符或某子串结尾
startswith：字符串是否以某字符或某子串开头
find：从左向右检查字符串中是否包含某子串，搜索不到时返回-1
rfind：从右向左检查字符串中是否包含某子串，搜索不到时返回-1
index：功能类似于find，搜索不到时报错
rindex：功能类似于rfind，搜索不到时报错
replace：替换字符串
expandtabs：将字符串中的制表符\t替换成空格，默认替换为8空格
split：将字符串分割得到列表
splitlines：按行分割字符串，每行作为列表的一个元素
join：将列表各元素使用指定符号连接起来，例如`&amp;quot;-&amp;quot;.[1,2,3]`得到`1-2-3`
strip：移除字符串前缀和后缀指定字符，如果没有指定移除的字符，则默认移除空白
lstrip：移除字符串指定的前缀字符，如果没有指定移除的字符，则默认移除空白
rstrip：移除字符串指定的后缀字符，如果没有指定移除的字符，则默认移除空白
format：格式化字符串，此外还可使用Python的`%`格式化方式，如{{ '%.2f' % 1.2345 }}
&lt;/code>&lt;/pre>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h3 id="list-对象方法">list 对象方法&lt;/h3>
&lt;p>虽然 Python 中 list 对象有很多操作方式，但应用到 Ansible 中，大概也就两个个方法值得了解：&lt;/p>
&lt;ul>
&lt;li>&lt;code>count()&lt;/code>：(无参数) 计算列表中元素的个数或给定参数在列表中出现的次数&lt;/li>
&lt;li>&lt;code>index()&lt;/code>：检索给定参数在列表中的位置，如果元素不存在，则报错&lt;/li>
&lt;/ul>
&lt;p>例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">debug&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">msg&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;{{ [1,2,1,1,3,4].count() }}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">debug&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">msg&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;{{ [1,2,1,1,3,4].count(1) }}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">debug&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">msg&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;{{ [1,2,1,1,3,4].index(2) }}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Python</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/python/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/python/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.python.org/">官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/python">GitHub 组织，Python&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="python-标识符与关键字">Python 标识符与关键字&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.python.org/3/reference/lexical_analysis.html#identifiers">官方文档，语言参考-2.3.标识符和关键字&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>and
as
assert
async
await
break
class
continue
def
del
elif
else
except
False
finally
for
from
global
if
import
in
is
lambda
None
nonlocal
not
or
pass
raise
return
True
try
while
with
yield&lt;/p>
&lt;h1 id="python-语言规范">Python 语言规范&lt;/h1>
&lt;h1 id="python">Python&lt;/h1>
&lt;h2 id="项目结构">项目结构&lt;/h2>
&lt;h2 id="命名规范">命名规范&lt;/h2>
&lt;h2 id="代码格式">代码格式&lt;/h2>
&lt;p>格式化工具(参考：&amp;lt;https://zhuanlan.zhihu.com/p/203307235)：&lt;/p>
&lt;ul>
&lt;li>black # 很好用&lt;/li>
&lt;li>autopep8&lt;/li>
&lt;li>yapf&lt;/li>
&lt;/ul>
&lt;h2 id="编码风格">编码风格&lt;/h2>
&lt;h2 id="依赖管理">依赖管理&lt;/h2>
&lt;h2 id="构建方式">构建方式&lt;/h2>
&lt;h1 id="版本变化">版本变化&lt;/h1></description></item><item><title>Docs: Python 标准库</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/python-%E6%A0%87%E5%87%86%E5%BA%93/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/python-%E6%A0%87%E5%87%86%E5%BA%93/</guid><description/></item><item><title>Docs: Python 第三方库</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/python-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/python-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/</guid><description/></item><item><title>Docs: Python 环境安装与使用</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/python-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/python-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</guid><description/></item></channel></rss>