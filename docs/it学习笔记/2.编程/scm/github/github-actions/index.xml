<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – GitHub Actions</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/scm/github/github-actions/</link><description>Recent content in GitHub Actions on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/scm/github/github-actions/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Actions 样例</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/scm/github/github-actions/actions-%E6%A0%B7%E4%BE%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/scm/github/github-actions/actions-%E6%A0%B7%E4%BE%8B/</guid><description>
&lt;h1 id="定时同步-github-的代码仓库到-gitee">定时同步 GitHub 的代码仓库到 Gitee&lt;/h1>
&lt;p>该功能已经有很多实现了，这篇文章以 &lt;a href="https://github.com/Yikun/hub-mirror-action">https://github.com/Yikun/hub-mirror-action&lt;/a> 项目为例。这个项目的基本逻辑是这样的：&lt;/p>
&lt;ul>
&lt;li>通过 GitHub Actions 构建一个 Docker 容器，在 Docker 容器中，引入 Gitee 的私钥，这样可以在容器中使用 git 命令向 Gitee push 代码而不用输入密码了&lt;/li>
&lt;li>容器启动后，在容器内 pull github 上的代码，并 push 到 gitee 上。&lt;/li>
&lt;/ul>
&lt;p>首先先来一个最基本的 Action 的 workflow 文件示例&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Gitee repos mirror periodic job&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">on&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 取消 push 的注释后，向本仓库推送代码即可开始 Gitee 同步&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># push:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">schedule&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 每天北京时间9点跑&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">cron&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;0 1 * * *&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">jobs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">build&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">runs-on&lt;/span>: &lt;span style="color:#ae81ff">ubuntu-latest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">steps&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Cache phpdragon src repos&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 使用 github 官方提供的 action 来引用发行版的主要版本&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/cache@v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">with&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">path&lt;/span>: &lt;span style="color:#ae81ff">/home/runner/work/phpdragon/phpdragon-cache&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">key&lt;/span>: &lt;span style="color:#ae81ff">${{ runner.os }}-phpdragon-repos-cache&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Mirror the Github organization repos to Gitee.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 这里我将对方项目原封不动 copy 到自己的 github 上了，所以这个步骤就直接使用自己的 action&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">DesistDaydream/hub-mirror-action@main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">with&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 必选，需要同步的Github用户（源）&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">src&lt;/span>: &lt;span style="color:#ae81ff">github/DesistDaydream&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 必选，需要同步到的Gitee的用户（目的）&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">dst&lt;/span>: &lt;span style="color:#ae81ff">gitee/DesistDaydream&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 必选，Gitee公钥对应的私钥&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">dst_key&lt;/span>: &lt;span style="color:#ae81ff">${{ secrets.GITEE_PRIVATE_KEY }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 必选，Gitee对应的用于创建仓库的token&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">dst_token&lt;/span>: &lt;span style="color:#ae81ff">${{ secrets.GITEE_TOKEN }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 黑、白名单，静态名单机制，可以用于更新某些指定库&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># static_list: repo_name&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">black_list&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;eHualu,kubernetesAPI,v2ray&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># white_list: &amp;#39;repo_name,repo_name2&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># force_update: true&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>必选参数&lt;/p>
&lt;ul>
&lt;li>&lt;code>src&lt;/code> 需要被同步的源端账户名，如 github/DesistDaydream，表示 Github 的 DesistDaydream 账户。&lt;/li>
&lt;li>&lt;code>dst&lt;/code> 需要同步到的目的端账户名，如 gitee/DesistDaydream，表示 Gitee 的 DesistDaydream 账户。&lt;/li>
&lt;li>&lt;code>dst_key&lt;/code> 与 Gitee 公钥对应的私钥，给 GitHub Actions 激活后创建的容器中 git 命令认证所用。&lt;/li>
&lt;li>&lt;code>dst_token&lt;/code> 用于自动创建不存在的仓库。&lt;/li>
&lt;li>注意： dst_key 与 dst_token 的值是通过 GitHub 的 Secrets 功能 引用的，类似于 k8s 的 secret 功能。&lt;/li>
&lt;/ul>
&lt;p>可选参数&lt;/p>
&lt;ul>
&lt;li>&lt;code>account_type&lt;/code> 默认为 user，源和目的的账户类型，可以设置为 org（组织）或者 user（用户），目前仅支持&lt;strong>同类型账户&lt;/strong>（即组织到组织，或用户到用户）的同步。&lt;/li>
&lt;li>&lt;code>clone_style&lt;/code> 默认为 https，可以设置为 ssh 或者 https。&lt;/li>
&lt;li>&lt;code>cache_path&lt;/code> 默认为&amp;rsquo;&amp;rsquo;, 将代码缓存在指定目录，用于与 actions/cache 配合以加速镜像过程。&lt;/li>
&lt;li>&lt;code>black_list&lt;/code> 默认为&amp;rsquo;&amp;rsquo;, 配置后，黑名单中的 repos 将不会被同步，如“repo1,repo2,repo3”。&lt;/li>
&lt;li>&lt;code>white_list&lt;/code> 默认为&amp;rsquo;&amp;rsquo;, 配置后，仅同步白名单中的 repos，如“repo1,repo2,repo3”。&lt;/li>
&lt;li>&lt;code>static_list&lt;/code> 默认为&amp;rsquo;&amp;rsquo;, 配置后，仅同步静态列表，不会再动态获取需同步列表（黑白名单机制依旧生效），如“repo1,repo2,repo3”。&lt;/li>
&lt;li>&lt;code>force_update&lt;/code> 默认为 false, 配置后，启用 git push -f 强制同步，&lt;strong>注意：开启后，会强制覆盖目的端仓库&lt;/strong>。&lt;/li>
&lt;li>&lt;code>debug&lt;/code> 默认为 false, 配置后，启用 debug 开关，会显示所有执行命令。&lt;/li>
&lt;/ul>
&lt;h1 id="获取并配置-github-连接-gitee-所需的认证信息">获取并配置 GitHub 连接 Gitee 所需的认证信息&lt;/h1>
&lt;p>认证信息：&lt;a href="https://www.yuque.com/desistdaydream/lmstiv/uvgrw2">https://www.yuque.com/desistdaydream/lmstiv/uvgrw2&lt;/a>&lt;/p>
&lt;h2 id="获取-gitee-token">获取 Gitee TOKEN&lt;/h2>
&lt;p>使用该连接：&lt;a href="https://gitee.com/profile/personal_access_tokens/new">https://gitee.com/profile/personal_access_tokens/new&lt;/a>，添加&lt;code>令牌描述&lt;/code>后，点击&lt;code>提交&lt;/code>以生成 TOKEN&lt;/p>
&lt;h2 id="获取密钥对">获取密钥对&lt;/h2>
&lt;p>随便找一个有 ssh-keygen 命令的主机，用于生成一对密钥。使用 ssh-keygen 命令生成密钥对，ssh-keygen 命令用法详见此处&lt;/p>
&lt;pre>&lt;code>ssh-keygen -t rsa -C 373406000@qq.com
&lt;/code>&lt;/pre>
&lt;h2 id="配置-gitee-公钥">配置 Gitee 公钥&lt;/h2>
&lt;p>在 &lt;a href="https://gitee.com/profile/sshkeys">Gitee 的配置页面中&lt;/a>添加公钥信息。以便 GitHub 使用 私钥连接时，可以通过认证。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/wn0scx/1640568955462-d3dbe873-2a73-4539-a477-0cfa71fb8a43.png" alt="image.png">&lt;/p>
&lt;h2 id="配置-私钥-和-token">配置 私钥 和 TOKEN&lt;/h2>
&lt;p>在 GitHub 以加密的方式传入到容器中。如果不加密，直接写到代码仓库中，那其他人就都看到了~~~~该操作主要是针对 代码仓库而言的，因为 私钥和 TOKEN 的信息，是需要在 Action 中引用的，而 Action 本身就是一摞代码~&lt;/p>
&lt;p>在&lt;a href="https://github.com/DesistDaydream/hub-mirror-action/settings/secrets">项目仓库的 Setting 中的 Secrets&lt;/a> 中&lt;a href="https://github.com/DesistDaydream/hub-mirror-action/settings/secrets/new">添加&lt;/a> 私钥 与 TOKEN 的变量。&lt;/p>
&lt;h3 id="添加-token">添加 TOKEN&lt;/h3>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/wn0scx/1640569010998-1d5f41bd-359d-4b4c-ae4d-d4352ba41ab7.png" alt="image.png">&lt;/p>
&lt;h3 id="添加私钥">添加私钥&lt;/h3>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/wn0scx/1616903594321-e357ab96-5486-42f9-ba85-9fdf869e9fbb.png" alt="">&lt;/p></description></item><item><title>Docs: Contexts 与 Variables</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/scm/github/github-actions/contexts-%E4%B8%8E-variables/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/scm/github/github-actions/contexts-%E4%B8%8E-variables/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.github.com/en/actions/learn-github-actions/contexts">官方文档，学习 GitHub Actions-上下文&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.github.com/en/actions/learn-github-actions/environment-variables">官方文档，学习 GitHub Actions-环境变量&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>GitHub Actions 中可以通过 &lt;strong>Contexts(上下文)&lt;/strong> 与 &lt;strong>Environment Variables(环境变量)&lt;/strong> 来暴露工作流的信息或引用工作流的信息。就像下面的示例一样：&lt;/p>
&lt;p>这是一个环境变量的示例：&lt;/p>
&lt;blockquote>
&lt;p>GitHub Action 中的环境变量本质上是 Shell 中的变量，引用方式也是一样的。&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Greeting on variable day&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">on&lt;/span>: &lt;span style="color:#ae81ff">workflow_dispatch&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">env&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">DAY_OF_WEEK&lt;/span>: &lt;span style="color:#ae81ff">Monday&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">jobs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">greeting_job&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">runs-on&lt;/span>: &lt;span style="color:#ae81ff">ubuntu-latest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">env&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">Greeting&lt;/span>: &lt;span style="color:#ae81ff">Hello&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">steps&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Say Hello Mona it&amp;#39;s Monday&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">echo &amp;#34;$Greeting $First_Name. Today is $DAY_OF_WEEK!&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">env&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">First_Name&lt;/span>: &lt;span style="color:#ae81ff">Mona&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这是一个上下文的示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Greeting on variable day&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">on&lt;/span>: &lt;span style="color:#ae81ff">workflow_dispatch&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">env&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">DAY_OF_WEEK&lt;/span>: &lt;span style="color:#ae81ff">Monday&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">jobs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">greeting_job&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">runs-on&lt;/span>: &lt;span style="color:#ae81ff">ubuntu-latest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">env&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">Greeting&lt;/span>: &lt;span style="color:#ae81ff">Hello&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">steps&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Say Hello Mona it&amp;#39;s Monday&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">echo &amp;#34;${{ env.Greeting }} ${{ env.First_Name }}. Today is ${{ env.DAY_OF_WEEK }}!&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">env&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">First_Name&lt;/span>: &lt;span style="color:#ae81ff">Mona&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>从示例中可以看到，想要使用 &lt;strong>Context(上下文)&lt;/strong>，需要使用一种特殊的语法，这种语法称为 &lt;strong>Expressions(表达式)&lt;/strong>。&lt;/p>
&lt;h2 id="expressions表达式">Expressions(表达式)&lt;/h2>
&lt;p>在 GitHub Actions 的 Workflow 文件中，我们可以使用 &lt;strong>Expressions(表达式)&lt;/strong> 设置和访问** 环境变量 &lt;strong>或访问&lt;/strong>上下文 **信息。表达式可以是 &lt;em>字面量、上下文引用、函数&lt;/em> 的任意组合。&lt;/p>
&lt;p>以 &lt;code>$&lt;/code> 开口，&lt;code>{{ }}&lt;/code> 括起来的内容即为表达式的语法，当 GitHub Action 运行时，Workflow 中的 &lt;code>${{ &amp;lt;EXPRESSION&amp;gt; }}&lt;/code> 内容会被解析为表达式进行处理，表达式就像模板一样，解析完成后，使用实际的值替换表达式。以实现以变成的方式设置 Workflow 文件。&lt;/p>
&lt;blockquote>
&lt;p>注意：
Workflow 中的 if 字段，会自动将其下的值解析为表达式，所以可以省略 &lt;code>${{ }}&lt;/code> 符号。&lt;/p>
&lt;/blockquote>
&lt;p>表达式 Fiterals(字面量)&lt;/p>
&lt;p>表达式 Operators(运算符)&lt;/p>
&lt;p>表达式 Functions(函数)&lt;/p>
&lt;ul>
&lt;li>contains&lt;/li>
&lt;li>startsWith&lt;/li>
&lt;li>endsWith&lt;/li>
&lt;li>format&lt;/li>
&lt;li>join&lt;/li>
&lt;li>toJSON&lt;/li>
&lt;li>fromJSON&lt;/li>
&lt;li>hashFiles&lt;/li>
&lt;li>状态检查函数
&lt;ul>
&lt;li>success&lt;/li>
&lt;li>always&lt;/li>
&lt;li>cancelled&lt;/li>
&lt;li>failure&lt;/li>
&lt;li>Evaluate Status Explicitly&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>函数使用示例&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">print&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">on&lt;/span>: &lt;span style="color:#ae81ff">push&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">env&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">continue&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">time&lt;/span>: &lt;span style="color:#ae81ff">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">jobs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">job1&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">runs-on&lt;/span>: &lt;span style="color:#ae81ff">ubuntu-latest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">steps&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">continue-on-error&lt;/span>: &lt;span style="color:#ae81ff">${{ fromJSON(env.continue) }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">timeout-minutes&lt;/span>: &lt;span style="color:#ae81ff">${{ fromJSON(env.time) }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">echo ...&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="context上下文">Context(上下文)&lt;/h2>
&lt;p>GitHub Action 中的上下文，是一种功能更丰富的环境变量，并且我们可以通过上下文的语法引用环境变量。&lt;/p>
&lt;p>在 Expressions(表达式) 中使用 Context(上下文)，可以让我们在 Workflow 文件中访问工作流运行信息、运行器环境信息、Job 信息、每个 Job 下的 Step 信息。&lt;/p>
&lt;p>每个上下文都是一个包含 &lt;strong>Properties(属性)&lt;/strong> 的 &lt;strong>Object(对象&lt;/strong>)，Properties 可以是字符串或其他 Objects&lt;/p>
&lt;p>在表达式语中使用上下文的语法为：&lt;code>${{ Object.Properties }}&lt;/code>。每个 Object 可以提供丰富的信息。&lt;/p>
&lt;p>现阶段 Action 有多个上下文可用：&lt;/p>
&lt;ul>
&lt;li>GitHub 本身信息相关的上下文
&lt;ul>
&lt;li>&lt;strong>github&lt;/strong> # Information about the workflow run.&lt;/li>
&lt;li>&lt;strong>secrets&lt;/strong> # Contains the names and values of secrets that are available to a workflow run.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Job 信息相关的上下文
&lt;ul>
&lt;li>&lt;strong>needs&lt;/strong> # Contains the outputs of all jobs that are defined as a dependency of the current job&lt;/li>
&lt;li>&lt;strong>env&lt;/strong> # Contains environment variables set in a workflow, job, or step.&lt;/li>
&lt;li>&lt;strong>job&lt;/strong> # Information about the currently running job.&lt;/li>
&lt;li>&lt;strong>steps&lt;/strong> # Information about the steps that have been run in the current job.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>runner&lt;/strong> # Information about the runner that is running the current job.&lt;/li>
&lt;li>&lt;strong>strategy&lt;/strong> # Information about the matrix execution strategy for the current job.&lt;/li>
&lt;li>&lt;strong>matrix&lt;/strong> # Contains the matrix properties defined in the workflow that apply to the current job.&lt;/li>
&lt;li>&lt;strong>inputs&lt;/strong> # Contains the inputs of a reusable workflow. For more information, see inputscontext&lt;/li>
&lt;/ul>
&lt;h1 id="github-本身信息相关的上下文">GitHub 本身信息相关的上下文&lt;/h1>
&lt;h2 id="github-上下文">github 上下文&lt;/h2>
&lt;p>github 上下文包含本次工作流的事件信息，还有很多 GitHub 信息，比如 &lt;code>github.actor&lt;/code> 属性表示发起工作流的用户名，如果这个项目只有自己一个人，那就是这个仓库的拥有者名称~&lt;/p>
&lt;h2 id="secrets-上下文">secrets 上下文&lt;/h2>
&lt;p>对于工作流程运行中的每个 Job，此上下文都是相同的。 您可以从 Job 中的任何步骤访问此上下文。 此对象包含下面列出的所有属性。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>属性名称&lt;/th>
&lt;th>类型&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>secrets.GITHUB_TOKEN&lt;/td>
&lt;td>String&lt;/td>
&lt;td>为每个工作流程运行自动创建的令牌。 更多信息请参阅“&lt;a href="https://docs.github.com/cn/actions/security-guides/automatic-token-authentication">自动令牌身份验证&lt;/a>”。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>secrets.&lt;!-- raw HTML omitted -->&lt;/td>
&lt;td>String&lt;/td>
&lt;td>特定 Secret 的值&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>SecretName 可以在在一个项目的设置中添加，如下图：
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qaf8qw/1652758616297-59e0ad52-f622-4d41-9235-b36a995ee87d.png" alt="image.png">
我们为本仓库添加了一个 SecretName 为 DOCKER_REGISTRY_PASSWORD 的 Secret，那么，在 Actions 中，可以使用 &lt;code>${{ secrets.DOCKER_REGISTRY_PASSWORD }}&lt;/code> 引用 DOCKER_REGISTRY_PASSWORD 的值。&lt;/p>
&lt;p>这个上下文常用在登录行为，以防止将密码以明文形式呈现，比如下面的示例，我们将会通过 secrets 上下文登录容器镜像仓库，并推送构建的镜像到仓库中。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">jobs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 推送到 docker.io&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">push-docker&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">needs&lt;/span>: [&lt;span style="color:#ae81ff">generate-tags]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">runs-on&lt;/span>: &lt;span style="color:#ae81ff">ubuntu-latest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">steps&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Check out repository code&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/checkout@v2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">登录镜像仓库网站&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">docker/login-action@v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">with&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">registry&lt;/span>: &lt;span style="color:#ae81ff">docker.io&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">username&lt;/span>: &lt;span style="color:#ae81ff">${{ secrets.DOCKER_REGISTRY_USERNAME }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">password&lt;/span>: &lt;span style="color:#ae81ff">${{ secrets.DOCKER_REGISTRY_PASSWORD }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">构建并推送容器镜像&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">docker/build-push-action@v2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">with&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">context&lt;/span>: &lt;span style="color:#ae81ff">.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">file&lt;/span>: &lt;span style="color:#ae81ff">Dockerfile&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">push&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">tags&lt;/span>: &lt;span style="color:#ae81ff">docker.io/lchdzh/e37-exporter:${{needs.generate-tags.outputs.tag}}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="job-信息相关的上下文">Job 信息相关的上下文&lt;/h1>
&lt;h2 id="needs-上下文">needs 上下文&lt;/h2>
&lt;p>needs 上下文中包含了由 jobs.JOB_ID.needs 字段定义的依赖 Job 中的信息。包含如下属性：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>needs.&amp;lt;JOB_ID&amp;gt;&lt;/th>
&lt;th>OBJECT&lt;/th>
&lt;th>A single job that the current job depends on.&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>needs.&amp;lt;JOB_ID&amp;gt;.outputs&lt;/td>
&lt;td>OBJECT&lt;/td>
&lt;td>The set of outputs of a job that the current job depends on.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>needs.&amp;lt;JOB_ID&amp;gt;.outputs.&amp;lt;OUTPUT_NAME&amp;gt;&lt;/td>
&lt;td>STRING&lt;/td>
&lt;td>当前 Job 所依赖的 Job 的输出中，OUTPUT_NAME 输出的值。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>needs.&amp;lt;JOB_ID&amp;gt;.result&lt;/td>
&lt;td>STRING&lt;/td>
&lt;td>当前 Job 所依赖的 Job 的运行结果。可能的值有：success, failure, cancelled, or skipped。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="steps-上下文">steps 上下文&lt;/h2>
&lt;p>此上下文针对作业中的每个步骤而改变。 您可以从作业中的任何步骤访问此上下文。 此对象包含下面列出的所有属性。
steps 上下文中包含了已指定 JOB_ID 且已运行的 Job 中的每个 step 的信息，包含如下属性&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>属性名称&lt;/th>
&lt;th>类型&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>steps.&amp;lt;step_id&amp;gt;.outputs&lt;/td>
&lt;td>对象&lt;/td>
&lt;td>为步骤定义的输出集。 更多信息请参阅“&lt;a href="https://docs.github.com/cn/articles/metadata-syntax-for-github-actions#outputs-for-docker-container-and-javascript-actions">GitHub Actions 的元数据语法&lt;/a>”。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>steps.&amp;lt;step_id&amp;gt;.conclusion&lt;/td>
&lt;td>字符串&lt;/td>
&lt;td>在 &lt;a href="https://docs.github.com/cn/actions/reference/workflow-syntax-for-github-actions#jobsjob_idstepscontinue-on-error">continue-on-error&lt;/a> 应用之后完成的步骤的结果。 可能的值包括 success、failure、cancelled 或 skipped。 当 continue-on-error 步骤失败时，outcome 为 failure，但最终的 conclusion 为 success。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>steps.&amp;lt;step_id&amp;gt;.outcome&lt;/td>
&lt;td>字符串&lt;/td>
&lt;td>在 &lt;a href="https://docs.github.com/cn/actions/reference/workflow-syntax-for-github-actions#jobsjob_idstepscontinue-on-error">continue-on-error&lt;/a> 应用之前完成的步骤的结果。 可能的值包括 success、failure、cancelled 或 skipped。 当 continue-on-error 步骤失败时，outcome 为 failure，但最终的 conclusion 为 success。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>steps.&amp;lt;step_id&amp;gt;.outputs.&amp;lt;output_name&amp;gt;&lt;/td>
&lt;td>字符串&lt;/td>
&lt;td>指定 StepIP 步骤中指定的 OutputName 输出的值。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="示例">示例&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Generate random failure&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">on&lt;/span>: &lt;span style="color:#ae81ff">push&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">jobs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">randomly-failing-job&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">runs-on&lt;/span>: &lt;span style="color:#ae81ff">ubuntu-latest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">steps&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">id&lt;/span>: &lt;span style="color:#ae81ff">checkout&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/checkout@v3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Generate 0 or 1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">id&lt;/span>: &lt;span style="color:#ae81ff">generate_number&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">echo &amp;#34;::set-output name=random_number::$(($RANDOM % 2))&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Pass or fail&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: |&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &lt;/span> &lt;span style="color:#ae81ff">if [[ ${{ steps.generate_number.outputs.random_number }} == 0 ]]; then exit 0; else exit 1; fi&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过 &lt;code>${{ steps.generate_number.outputs.random_number }}&lt;/code> 引用了当前 Job 中 ID 为 generate_number 这个步骤的输出中，random_number 的值。&lt;/p></description></item><item><title>Docs: Workflow 文件详解</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/scm/github/github-actions/workflow-%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/scm/github/github-actions/workflow-%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.github.com/en/actions/using-workflows/triggering-a-workflow">官方文档，使用工作流-触发工作流&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows">官方文档，使用工作流-触发工作流的事件&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions">官方文档，使用工作流-Workflow 语法&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>GitHub 的 Actions 通过 YAML 格式的文件来定义运行方式&lt;/p>
&lt;h1 id="name-string--workflow-的名称">name: &lt;!-- raw HTML omitted --> # Workflow 的名称。&lt;/h1>
&lt;p>默认值：当前 Workflow 的文件名。&lt;/p>
&lt;h1 id="on-objecthttpsdocsgithubcomenactionsreferenceworkflow-syntax-for-github-actionson--指定触发-workflow-的条件">&lt;a href="https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#on">on: &lt;!-- raw HTML omitted -->&lt;/a> # 指定触发 Workflow 的条件。&lt;/h1>
&lt;p>这个字段用来定义触发工作流的事件，在这里可以看到 GitHub 支持的所有事件&lt;/p>
&lt;h2 id="push--当上传代码时触发-workflow">push: # 当上传代码时，触发 Workflow&lt;/h2>
&lt;h3 id="branches-string--指定出发条件当上传代码到该字段指定的分支时触发-workflow">branches: &amp;lt;[]STRING&amp;gt; # 指定出发条件，当上传代码到该字段指定的分支时，触发 Workflow&lt;/h3>
&lt;h2 id="pull_request--当发生-pr-时触发-orkflow">pull_request: # 当发生 PR 时，触发 orkflow&lt;/h2>
&lt;h2 id="schedule-object--定时触发-worlkflow">schedule: &amp;lt;[]OBJECT&amp;gt; # 定时触发 Worlkflow&lt;/h2>
&lt;p>使用 POSIX cron 语法让 Worlkflow 在指定时间运行&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">on&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">schedule&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># * is a special character in YAML so you have to quote this string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">cron&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;30 5,17 * * *&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="workflow_dispatch-object--手动触发-workflow">workflow_dispatch: &lt;!-- raw HTML omitted --> # 手动触发 Workflow&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">on&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">workflow_dispatch&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">inputs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">file&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">description&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;指定要使用的镜像同步文件的路径&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">required&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">jobs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">build&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">......&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">steps&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">images sync&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 这里可以调用 inputs 中定义的变量，这些变量通过 Web 页面传递进来，也可以通过 CLI 传递进来。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: |&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &lt;/span> &lt;span style="color:#ae81ff">echo ${{ github.event.inputs.file }}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>下面对话框中填写的值将传入 Action 中，作为 &lt;code>file&lt;/code> 变量的值
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/sytu80/1643186313475-dfed2719-28b6-4680-8a28-b6a6772763c8.png" alt="image.png">&lt;/p>
&lt;h3 id="inputs-object--触发-workflow-时传入的信息">inputs: &lt;!-- raw HTML omitted --> # 触发 Workflow 时，传入的信息&lt;/h3>
&lt;p>更多 GitHub 可用的传入信息，详见 &lt;a href="https://docs.github.com/en/actions/learn-github-actions/contexts#github-context">Contexts&lt;/a>
&lt;strong>NAME: &lt;!-- raw HTML omitted -->&lt;/strong> # 定义变量。这里的 NAME 可以任意字符串，然后在 workflow 文件中使用&lt;code>${{ github.event.inputs.NAME }}&lt;/code>的方式调用&lt;/p>
&lt;ul>
&lt;li>&lt;strong>description: &lt;!-- raw HTML omitted -->&lt;/strong> # 对 NAME 的描述&lt;/li>
&lt;li>&lt;strong>type: &lt;!-- raw HTML omitted -->&lt;/strong> # 可用的类型有 string、number、boolean、choice、environment&lt;/li>
&lt;li>&lt;strong>required: &lt;!-- raw HTML omitted -->&lt;/strong> #&lt;/li>
&lt;li>&lt;strong>options: &amp;lt;[]TYPE&amp;gt;&lt;/strong> # 为 choice 类型提供可用选择的列表&lt;/li>
&lt;/ul>
&lt;h1 id="jobs-objecthttpsdocsgithubcomenactionsreferenceworkflow-syntax-for-github-actionsjobs--workflow-文件的主体用于定义要执行的一项或多项任务">&lt;a href="https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobs">jobs: &lt;!-- raw HTML omitted -->&lt;/a> # workflow 文件的主体，用于定义要执行的一项或多项任务&lt;/h1>
&lt;p>使用 &lt;strong>jobs.&amp;lt;JOB_ID&amp;gt;&lt;/strong> 为我们的工作提供唯一标识符，JOB*ID 是一个字符串，必须以字母或 &lt;code>*&lt;/code> 开头，并且仅能包含字母、数字、下划线、中横线。一个最简单的不用执行任何具体行为的 jobs 配置如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">jobs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">my_first_job&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">My first job&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">my_second_job&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">My second job&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>示例中 &lt;code>my_first_job&lt;/code> 就是 JOB_ID&lt;/p>
&lt;h2 id="job_idneeds-job_id--job_id--此-job-必须在指定的-job_id-成功后才可以执行">JOB_ID.needs: &amp;lt;[]JOB_ID | JOB_ID&amp;gt; # 此 Job 必须在指定的 JOB_ID 成功后才可以执行&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">jobs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">job1&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">job2&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">needs&lt;/span>: &lt;span style="color:#ae81ff">job1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">job3&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">needs&lt;/span>: [&lt;span style="color:#ae81ff">job1, job2]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面这个示例表示 job2 等待 job1 成功后开始执行；job3 等待 job1 和 job2 都成功后开始执行。&lt;/p>
&lt;h2 id="job_idruns-on-string--必须的运行-job_id-的运行器">JOB_ID.runs-on: &lt;!-- raw HTML omitted --> # 必须的。运行 JOB_ID 的运行器。&lt;/h2>
&lt;p>GitHub 自带的运行器有：ubuntu-latest、windows-latest、macos-latest 等等&lt;/p>
&lt;h2 id="job_idsteps-object--job-的运行步骤">JOB_ID.steps: &amp;lt;[]OBJECT&amp;gt; # Job 的运行步骤。&lt;/h2>
&lt;p>&lt;strong>env: &amp;lt;map[STRING]STRING&amp;gt;&lt;/strong> # 设定前 Job 中可用的环境变量。
&lt;strong>name: &lt;!-- raw HTML omitted -->&lt;/strong> # 当前 Job 的名称。
&lt;strong>run: &lt;!-- raw HTML omitted -->&lt;/strong> # 运行命令。使用 runs-on 中指定的操作系统的 shell 运行。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 单行命令&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Install Dependencies&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">npm install&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 多行命令&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Clean install dependencies and build&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: |&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> npm ci
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> npm run build&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># working-directory 字段与 run 关联使用，可以用来指定运行命令的工作目录&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Clean temp directory&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">rm -rf *&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">working-directory&lt;/span>: &lt;span style="color:#ae81ff">./temp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># shell 字段与 run 关联使用。可以用来指定运行命令的 shell&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">steps&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Display the path&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">echo $PATH&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">shell&lt;/span>: &lt;span style="color:#ae81ff">bash&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>uses: &lt;!-- raw HTML omitted -->&lt;/strong> # 当前步骤要使用的 Action。
在这里可以指定其他 Action 作为工作流的一部分来运行，本质上，Action 是可重用的代码。其实就类似于在代码中调用函数一样，&lt;code>uses&lt;/code> 字段可以理解为调用某个函数，这个函数就是指其他的 Action。在[这篇文章](✏IT 学习笔记/👨‍💻2.编程/SCM/GitHub/GitHub%20Actions/好用的%20Action.md Action.md)中，介绍了很多比较好用的 Action。&lt;/p>
&lt;p>通过使用其他 Action，可以大大简化自身工作流的配置文件。比如 Git Action 官方提供的 &lt;a href="https://github.com/actions/checkout">actions/checkout&lt;/a> 这个 Action，可以用来将仓库中的代码，拷贝到运行 Action 的容器中，然后进行后续操作，如果不使用这个 Action，那么我们就要写很多命令来 pull 代码了~&lt;/p>
&lt;h2 id="job_idoutputs-mapstringstring">JOB_ID.outputs: &amp;lt;map[STRING]STRING&amp;gt;&lt;/h2>
&lt;p>通过 outputs 行为可以为本 job 创建一个输出映射，本 job 的输出可以用于其他依赖本 job 的所有下游 job。job 之间的依赖关系通过 JOB_ID.needs 行为确定。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">jobs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">job1&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">runs-on&lt;/span>: &lt;span style="color:#ae81ff">ubuntu-latest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 将本 job 的 step 的输出映射到 job 的输出&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">outputs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">output1&lt;/span>: &lt;span style="color:#ae81ff">${{ steps.step1.outputs.test }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">output2&lt;/span>: &lt;span style="color:#ae81ff">${{ steps.step2.outputs.test }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">steps&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">id&lt;/span>: &lt;span style="color:#ae81ff">step1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">echo &amp;#34;::set-output name=test::hello&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">id&lt;/span>: &lt;span style="color:#ae81ff">step2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">echo &amp;#34;::set-output name=test::world&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">job2&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">runs-on&lt;/span>: &lt;span style="color:#ae81ff">ubuntu-latest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">needs&lt;/span>: &lt;span style="color:#ae81ff">job1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">steps&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">echo ${{needs.job1.outputs.output1}} ${{needs.job1.outputs.output2}}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>双冒号中的语法为 [Workflow 命令](✏IT 学习笔记/👨‍💻2.编程/SCM/GitHub/GitHub%20Actions/Workflow%20 文件详解/Workflow%20 命令.md 文件详解/Workflow 命令.md)&lt;/p>
&lt;/blockquote>
&lt;p>job1 创建了 &lt;code>output1&lt;/code> 变量，值为 &lt;code>hello&lt;/code>，同时创建了 &lt;code>output2&lt;/code> 变量，值为 &lt;code>world&lt;/code>。&lt;/p>
&lt;p>job2 中首先通过 needs 创建依赖关系，然后通过 &lt;code>${{ needs.job1.outputs.output1 }}&lt;/code> 与 &lt;code>${{ needs.job1.outputs.output2 }}&lt;/code> 引用 job1 中输出的变量。&lt;/p>
&lt;p>通过 needs 上下文引用值得表达式语法详见 &lt;a href="https://docs.github.com/en/actions/learn-github-actions/contexts#needs-context">Context,needs&lt;/a>&lt;/p></description></item><item><title>Docs: Workflow 文件详解</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/scm/github/github-actions/workflow-%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/scm/github/github-actions/workflow-%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</guid><description/></item><item><title>Docs: 好用的 Action</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/scm/github/github-actions/%E5%A5%BD%E7%94%A8%E7%9A%84-action/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/scm/github/github-actions/%E5%A5%BD%E7%94%A8%E7%9A%84-action/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;h1 id="dockerbuild-push-actionhttpsgithubcomdockerbuild-push-action">&lt;a href="https://github.com/docker/build-push-action">docker/build-push-action&lt;/a>&lt;/h1>
&lt;p>使用 Buildx 构建和推送 Docker 映像的 GitHub Action&lt;/p>
&lt;p>name: Build and push Docker image
uses: docker/build-push-action@v2
with:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>context: .&lt;/strong> # 构建上下文&lt;/li>
&lt;li>&lt;strong>file: simulate_mysql_exporter/e37_exporter/Dockerfile&lt;/strong> # 指定要使用的 Dockerfile 路径，&lt;code>默认值：{context字段的值}/Dockerfile&lt;/code>&lt;/li>
&lt;li>&lt;strong>push: true&lt;/strong> # 构建完成后，是否推送镜像&lt;/li>
&lt;li>&lt;strong>tags: ghcr.io/desistdaydream/e37-exporter:v0.2.0&lt;/strong> # 指定要构建的镜像名称&lt;/li>
&lt;/ul></description></item></channel></rss>