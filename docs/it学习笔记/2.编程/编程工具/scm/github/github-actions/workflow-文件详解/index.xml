<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – Workflow 文件详解</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/scm/github/github-actions/workflow-%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</link><description>Recent content in Workflow 文件详解 on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/scm/github/github-actions/workflow-%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Workflow 命令</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/scm/github/github-actions/workflow-%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/workflow-%E5%91%BD%E4%BB%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/scm/github/github-actions/workflow-%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/workflow-%E5%91%BD%E4%BB%A4/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions">官方文档，使用 Workflow-Workflow 命令&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>我们可以在 Workflow 中执行 Shell 命令时，使用 GitHub Action Workflow 的特殊命令。这些 Workflow 命令可以与运行机器通信以 &lt;em>设置环境变量、输出值、添加 debug 消息到 输出日志&lt;/em> 等等。&lt;/p>
&lt;p>大多数 Workflow 命令以特定格式通过 &lt;code>echo&lt;/code> 命令使用，语法为：
&lt;code>echo &amp;quot;::WorkflowCommand Parameter1={DATA},Parameter2={DATA},...::{COMMAND|VALUE}&amp;quot;&lt;/code>&lt;/p>
&lt;p>下面是一个设置步骤的输出内容的示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">jobs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">test-workflow-command&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">runs-on&lt;/span>: &lt;span style="color:#ae81ff">ubuntu-latest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">steps&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">设置 ARCH 变量的值为 uname -m 命令执行的结果&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">echo &amp;#39;::set-output name=ARCH::$(uname -m)&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">id&lt;/span>: &lt;span style="color:#ae81ff">arch-generator&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">从 id 为 arch-generator 步骤的输出中，获取 ARCH 的值&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">echo &amp;#34;The selected color is ${{ steps.arch-generator.outputs.ARCH }}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Workflow 文件详解</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/scm/github/github-actions/workflow-%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/workflow-%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/scm/github/github-actions/workflow-%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/workflow-%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.github.com/en/actions/using-workflows/triggering-a-workflow">官方文档，使用工作流-触发工作流&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows">官方文档，使用工作流-触发工作流的事件&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions">官方文档，使用工作流-Workflow 语法&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>GitHub 的 Actions 通过 YAML 格式的文件来定义运行方式&lt;/p>
&lt;h1 id="name-string--workflow-的名称">name: &amp;lt;STRING&amp;gt; # Workflow 的名称。&lt;/h1>
&lt;p>默认值：当前 Workflow 的文件名。&lt;/p>
&lt;h1 id="on-objecthttpsdocsgithubcomenactionsreferenceworkflow-syntax-for-github-actionson--指定触发-workflow-的条件">&lt;a href="https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#on">on: &amp;lt;OBJECT&amp;gt;&lt;/a> # 指定触发 Workflow 的条件。&lt;/h1>
&lt;p>这个字段用来定义触发工作流的事件，在这里可以看到 GitHub 支持的所有事件&lt;/p>
&lt;h2 id="push--当上传代码时触发-workflow">push: # 当上传代码时，触发 Workflow&lt;/h2>
&lt;h3 id="branches-string--指定出发条件当上传代码到该字段指定的分支时触发-workflow">branches: &amp;lt;[]STRING&amp;gt; # 指定出发条件，当上传代码到该字段指定的分支时，触发 Workflow&lt;/h3>
&lt;h2 id="pull_request--当发生-pr-时触发-orkflow">pull_request: # 当发生 PR 时，触发 orkflow&lt;/h2>
&lt;h2 id="schedule-object--定时触发-worlkflow">schedule: &amp;lt;[]OBJECT&amp;gt; # 定时触发 Worlkflow&lt;/h2>
&lt;p>使用 POSIX cron 语法让 Worlkflow 在指定时间运行&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">on&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">schedule&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># * is a special character in YAML so you have to quote this string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">cron&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;30 5,17 * * *&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="workflow_dispatch-object--手动触发-workflow">workflow_dispatch: &amp;lt;OBJECT&amp;gt; # 手动触发 Workflow&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">on&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">workflow_dispatch&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">inputs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">file&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">description&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;指定要使用的镜像同步文件的路径&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">required&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">jobs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">build&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">......&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">steps&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">images sync&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 这里可以调用 inputs 中定义的变量，这些变量通过 Web 页面传递进来，也可以通过 CLI 传递进来。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: |&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> echo ${{ github.event.inputs.file }}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>下面对话框中填写的值将传入 Action 中，作为 &lt;code>file&lt;/code> 变量的值
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/sytu80/1643186313475-dfed2719-28b6-4680-8a28-b6a6772763c8.png" alt="image.png">&lt;/p>
&lt;h3 id="inputs-object--触发-workflow-时传入的信息">inputs: &amp;lt;OBJECT&amp;gt; # 触发 Workflow 时，传入的信息&lt;/h3>
&lt;p>更多 GitHub 可用的传入信息，详见 &lt;a href="https://docs.github.com/en/actions/learn-github-actions/contexts#github-context">Contexts&lt;/a>
&lt;strong>NAME: &amp;lt;OBJECT&amp;gt;&lt;/strong> # 定义变量。这里的 NAME 可以任意字符串，然后在 workflow 文件中使用&lt;code>${{ github.event.inputs.NAME }}&lt;/code>的方式调用&lt;/p>
&lt;ul>
&lt;li>&lt;strong>description: &amp;lt;STRING&amp;gt;&lt;/strong> # 对 NAME 的描述&lt;/li>
&lt;li>&lt;strong>type: &amp;lt;STRING&amp;gt;&lt;/strong> # 可用的类型有 string、number、boolean、choice、environment&lt;/li>
&lt;li>&lt;strong>required: &amp;lt;BOLLEAN&amp;gt;&lt;/strong> #&lt;/li>
&lt;li>&lt;strong>options: &amp;lt;[]TYPE&amp;gt;&lt;/strong> # 为 choice 类型提供可用选择的列表&lt;/li>
&lt;/ul>
&lt;h1 id="jobs-objecthttpsdocsgithubcomenactionsreferenceworkflow-syntax-for-github-actionsjobs--workflow-文件的主体用于定义要执行的一项或多项任务">&lt;a href="https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobs">jobs: &amp;lt;OBJECT&amp;gt;&lt;/a> # workflow 文件的主体，用于定义要执行的一项或多项任务&lt;/h1>
&lt;p>使用 &lt;strong>jobs.&amp;lt;JOB_ID&amp;gt;&lt;/strong> 为我们的工作提供唯一标识符，JOB*ID 是一个字符串，必须以字母或 &lt;code>*&lt;/code> 开头，并且仅能包含字母、数字、下划线、中横线。一个最简单的不用执行任何具体行为的 jobs 配置如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">jobs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">my_first_job&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">My first job&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">my_second_job&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">My second job&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>示例中 &lt;code>my_first_job&lt;/code> 就是 JOB_ID&lt;/p>
&lt;h2 id="job_idneeds-job_id--job_id--此-job-必须在指定的-job_id-成功后才可以执行">JOB_ID.needs: &amp;lt;[]JOB_ID | JOB_ID&amp;gt; # 此 Job 必须在指定的 JOB_ID 成功后才可以执行&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">jobs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">job1&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">job2&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">needs&lt;/span>: &lt;span style="color:#ae81ff">job1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">job3&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">needs&lt;/span>: [&lt;span style="color:#ae81ff">job1, job2]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面这个示例表示 job2 等待 job1 成功后开始执行；job3 等待 job1 和 job2 都成功后开始执行。&lt;/p>
&lt;h2 id="job_idruns-on-string--必须的运行-job_id-的运行器">JOB_ID.runs-on: &amp;lt;STRING&amp;gt; # 必须的。运行 JOB_ID 的运行器。&lt;/h2>
&lt;p>GitHub 自带的运行器有：ubuntu-latest、windows-latest、macos-latest 等等&lt;/p>
&lt;h2 id="job_idsteps-object--job-的运行步骤">JOB_ID.steps: &amp;lt;[]OBJECT&amp;gt; # Job 的运行步骤。&lt;/h2>
&lt;p>&lt;strong>env: &amp;lt;map[STRING]STRING&amp;gt;&lt;/strong> # 设定前 Job 中可用的环境变量。
&lt;strong>name: &amp;lt;STRING&amp;gt;&lt;/strong> # 当前 Job 的名称。
&lt;strong>run: &amp;lt;STRING&amp;gt;&lt;/strong> # 运行命令。使用 runs-on 中指定的操作系统的 shell 运行。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 单行命令&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Install Dependencies&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">npm install&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 多行命令&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Clean install dependencies and build&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: |&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> npm ci
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> npm run build&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># working-directory 字段与 run 关联使用，可以用来指定运行命令的工作目录&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Clean temp directory&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">rm -rf *&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">working-directory&lt;/span>: &lt;span style="color:#ae81ff">./temp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># shell 字段与 run 关联使用。可以用来指定运行命令的 shell&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">steps&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Display the path&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">echo $PATH&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">shell&lt;/span>: &lt;span style="color:#ae81ff">bash&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>uses: &amp;lt;STRING&amp;gt;&lt;/strong> # 当前步骤要使用的 Action。
在这里可以指定其他 Action 作为工作流的一部分来运行，本质上，Action 是可重用的代码。其实就类似于在代码中调用函数一样，&lt;code>uses&lt;/code> 字段可以理解为调用某个函数，这个函数就是指其他的 Action。在[这篇文章](/docs/IT学习笔记/2.编程/SCM/GitHub/GitHub%20Actions/好用的%20Action.md Action.md)中，介绍了很多比较好用的 Action。&lt;/p>
&lt;p>通过使用其他 Action，可以大大简化自身工作流的配置文件。比如 Git Action 官方提供的 &lt;a href="https://github.com/actions/checkout">actions/checkout&lt;/a> 这个 Action，可以用来将仓库中的代码，拷贝到运行 Action 的容器中，然后进行后续操作，如果不使用这个 Action，那么我们就要写很多命令来 pull 代码了~&lt;/p>
&lt;h2 id="job_idoutputs-mapstringstring">JOB_ID.outputs: &amp;lt;map[STRING]STRING&amp;gt;&lt;/h2>
&lt;p>通过 outputs 行为可以为本 job 创建一个输出映射，本 job 的输出可以用于其他依赖本 job 的所有下游 job。job 之间的依赖关系通过 JOB_ID.needs 行为确定。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">jobs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">job1&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">runs-on&lt;/span>: &lt;span style="color:#ae81ff">ubuntu-latest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 将本 job 的 step 的输出映射到 job 的输出&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">outputs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">output1&lt;/span>: &lt;span style="color:#ae81ff">${{ steps.step1.outputs.test }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">output2&lt;/span>: &lt;span style="color:#ae81ff">${{ steps.step2.outputs.test }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">steps&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">id&lt;/span>: &lt;span style="color:#ae81ff">step1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">echo &amp;#34;::set-output name=test::hello&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">id&lt;/span>: &lt;span style="color:#ae81ff">step2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">echo &amp;#34;::set-output name=test::world&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">job2&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">runs-on&lt;/span>: &lt;span style="color:#ae81ff">ubuntu-latest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">needs&lt;/span>: &lt;span style="color:#ae81ff">job1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">steps&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">echo ${{needs.job1.outputs.output1}} ${{needs.job1.outputs.output2}}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>双冒号中的语法为 &lt;a href="docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.%E7%BC%96%E7%A8%8B/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/SCM/GitHub/GitHub%20Actions/Workflow%20%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/Workflow%20%E5%91%BD%E4%BB%A4.md">Workflow 命令&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>job1 创建了 &lt;code>output1&lt;/code> 变量，值为 &lt;code>hello&lt;/code>，同时创建了 &lt;code>output2&lt;/code> 变量，值为 &lt;code>world&lt;/code>。&lt;/p>
&lt;p>job2 中首先通过 needs 创建依赖关系，然后通过 &lt;code>${{ needs.job1.outputs.output1 }}&lt;/code> 与 &lt;code>${{ needs.job1.outputs.output2 }}&lt;/code> 引用 job1 中输出的变量。&lt;/p>
&lt;p>通过 needs 上下文引用值得表达式语法详见 &lt;a href="https://docs.github.com/en/actions/learn-github-actions/contexts#needs-context">Context,needs&lt;/a>&lt;/p></description></item></channel></rss>