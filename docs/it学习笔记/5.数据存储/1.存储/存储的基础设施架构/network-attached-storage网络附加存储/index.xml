<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – Network Attached Storage(网络附加存储)</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/1.%E5%AD%98%E5%82%A8/%E5%AD%98%E5%82%A8%E7%9A%84%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E6%9E%B6%E6%9E%84/network-attached-storage%E7%BD%91%E7%BB%9C%E9%99%84%E5%8A%A0%E5%AD%98%E5%82%A8/</link><description>Recent content in Network Attached Storage(网络附加存储) on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/1.%E5%AD%98%E5%82%A8/%E5%AD%98%E5%82%A8%E7%9A%84%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E6%9E%B6%E6%9E%84/network-attached-storage%E7%BD%91%E7%BB%9C%E9%99%84%E5%8A%A0%E5%AD%98%E5%82%A8/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: 1.Server Message Block</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/1.%E5%AD%98%E5%82%A8/%E5%AD%98%E5%82%A8%E7%9A%84%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E6%9E%B6%E6%9E%84/network-attached-storage%E7%BD%91%E7%BB%9C%E9%99%84%E5%8A%A0%E5%AD%98%E5%82%A8/1.server-message-block/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/1.%E5%AD%98%E5%82%A8/%E5%AD%98%E5%82%A8%E7%9A%84%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E6%9E%B6%E6%9E%84/network-attached-storage%E7%BD%91%E7%BB%9C%E9%99%84%E5%8A%A0%E5%AD%98%E5%82%A8/1.server-message-block/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;a href="https://en.wikipedia.org/wiki/Server_Message_Block">Wiki,SMB&lt;/a>、&lt;a href="https://en.wikipedia.org/wiki/Server_Message_Block">Wiki,Samba&lt;/a>、&lt;a href="https://searchstorage.techtarget.com/definition/Common-Internet-File-System-CIFS">Techtarget&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>Server Message Block(服务器消息块，简称 SMB)&lt;/strong> 是一个通信协议，该协议可以让网络中的各个节点可以共享访问 文件、打印机、串行端口，还可以提供经过身份验证的 &lt;a href="https://www.yuque.com/go/doc/33222674">IPC&lt;/a> 机制。&lt;/p>
&lt;p>现在，SMB 协议主要用来让 Windows 和 Linux 之间可以互相传输文件。&lt;/p>
&lt;h2 id="背景">背景&lt;/h2>
&lt;h3 id="smb--cifs--smb1edithttpsenwikipediaorgwindexphptitleserver_message_blockactioneditsection3smb--cifs--smb1-编辑">SMB / CIFS / SMB1[&lt;a href="https://en.wikipedia.org/w/index.php?title=Server_Message_Block&amp;amp;action=edit&amp;amp;section=3">edit&lt;/a>]SMB / CIFS / SMB1 [编辑]&lt;/h3>
&lt;p>&lt;a href="https://en.wikipedia.org/w/index.php?title=Barry_Feigenbaum&amp;amp;action=edit&amp;amp;redlink=1">Barry Feigenbaum&lt;/a> originally designed SMB at &lt;a href="https://en.wikipedia.org/wiki/IBM">IBM&lt;/a> in early 1983 with the aim of turning &lt;a href="https://en.wikipedia.org/wiki/DOS">DOS&lt;/a> &lt;a href="https://en.wikipedia.org/wiki/INT_21h">INT 21h&lt;/a> local file access into a networked file system.&lt;a href="https://en.wikipedia.org/wiki/Server_Message_Block#cite_note-tridgemyths-9">[9]&lt;/a> &lt;a href="https://en.wikipedia.org/wiki/Microsoft">Microsoft&lt;/a> has made considerable modifications to the most commonly used version. Microsoft merged the SMB protocol with the &lt;a href="https://en.wikipedia.org/wiki/LAN_Manager">LAN Manager&lt;/a> product which it had started developing for &lt;a href="https://en.wikipedia.org/wiki/OS/2">OS/2&lt;/a> with &lt;a href="https://en.wikipedia.org/wiki/3Com">3Com&lt;/a> around 1990, and continued to add features to the protocol in &lt;a href="https://en.wikipedia.org/wiki/Windows_for_Workgroups">Windows for Workgroups&lt;/a> (c. 1992) and in later versions of Windows.Barry Feigenbaum 在 1983 年初在 IBM 设计了 SMB，目的是将 DOS INT 21H 本地文件访问转换为网络文件系统。[9] Microsoft 对最常用的版本进行了相当大的修改。 Microsoft 将 SMB 协议与 LAN Manager 产品合并，它已开始为 1990 年左右开始为 OS / 2 开发的 OS / 2，并继续向工作组（C.192）和更高版本的 Windows 中的 Windows 中的协议添加功能。
SMB was originally designed to run on top of the &lt;a href="https://en.wikipedia.org/wiki/NetBIOS">NetBIOS&lt;/a>/NetBEUI &lt;a href="https://en.wikipedia.org/wiki/Application_programming_interface">API&lt;/a> (typically implemented with &lt;a href="https://en.wikipedia.org/wiki/NetBIOS_Frames">NBF&lt;/a>, NetBIOS over &lt;a href="https://en.wikipedia.org/wiki/IPX/SPX">IPX/SPX&lt;/a>, or &lt;a href="https://en.wikipedia.org/wiki/NetBIOS_over_TCP/IP">NBT&lt;/a>). Since &lt;a href="https://en.wikipedia.org/wiki/Windows_2000">Windows 2000&lt;/a>, SMB runs, by default, with a thin layer, similar to the Session Message packet of NBT&amp;rsquo;s Session Service, on top of &lt;a href="https://en.wikipedia.org/wiki/Transmission_Control_Protocol">TCP&lt;/a>, using TCP port 445 rather than TCP port 139—a feature known as &amp;ldquo;direct host SMB&amp;rdquo;.&lt;a href="https://en.wikipedia.org/wiki/Server_Message_Block#cite_note-direct-10">[10]&lt;/a>SMB 最初设计用于在 NetBIOS / NetBEUI API 之上（通常使用 NBF，NETBIOS 通过 IPX / SPX 或 NBT 实现）。由于 Windows 2000，SMB 默认情况下，使用 TCP 端口 445 而不是 TCP 端口 139-A 称为“Direct Host SMB”的特征。[10]
Windows Server 2003, and older &lt;a href="https://en.wikipedia.org/wiki/Network-attached_storage">NAS&lt;/a> devices use SMB1/CIFS natively. SMB1/CIFS is an extremely chatty protocol which is not such an issue on a local area network with low latency but becomes very slow on wide area networks as the back and forth handshake of the protocol magnifies the inherent high latency of such network. Later versions of the protocol reduced the high number of handshake exchanges. While Microsoft estimates that SMB1/CIFS comprises less than 10% of network traffic in the average Enterprise network, that is still a significant amount of traffic. One approach to mitigating the inefficiencies in the protocol is to use WAN Acceleration products such as those provided by Riverbed, Silver Peak, or Cisco Systems. A better approach is simply to eliminate SMB1/CIFS by upgrading the server infrastructure that uses it. This includes both NAS devices as well as Windows Server 2003. The most effective method in use currently to identify SMB1/CIFS traffic is to use a network analyzer tool such as Wireshark, etc., to identify SMB1/CIFS &amp;ldquo;talkers&amp;rdquo; and then decommission or upgrade them over time. Microsoft also provides an auditing tool in Windows Server 2016, which can be used to track down SMB1/CIFS talkers.&lt;a href="https://en.wikipedia.org/wiki/Server_Message_Block#cite_note-messageanalyzer-11">[11]&lt;/a>Windows Server 2003 和旧的 NAS 设备本地使用 SMB1 / CIFS。 SMB1 / CIFS 是一种极其聊天协议，在局域网上并不具有低延迟的问题，但在广域网上变得非常慢，因为协议的后退握手放大了这种网络的固有高延迟。后来的协议版本减少了大量握手交换。虽然 Microsoft 估计 SMB1 / CIFS 在普通企业网络中不到 10％的网络流量，但仍然是大量流量。一种减轻协议低效率的一种方法是使用 WAN 加速产品，例如河床，银峰或思科系统提供的产品。更好的方法只是通过升级使用它的服务器基础架构来消除 SMB1 / CIFS。这包括 NAS 设备以及 Windows Server 2003.目前用于识别 SMB1 / CIFS 流量的最有效的方法是使用网络分析工具，如 Wireshark 等，以识别 SMB1 / CIFS“Talkers”，然后再次退役或随着时间的推移升级它们。 Microsoft 还在 Windows Server 2016 中提供了一个审计工具，可用于跟踪 SMB1 / CIFS Talkers。[11]
In 1996, when Sun Microsystems announced &lt;a href="https://en.wikipedia.org/wiki/WebNFS">WebNFS&lt;/a>,&lt;a href="https://en.wikipedia.org/wiki/Server_Message_Block#cite_note-WebNFS-12">[12]&lt;/a> Microsoft launched an initiative to rename SMB to Common Internet File System (CIFS)&lt;a href="https://en.wikipedia.org/wiki/Server_Message_Block#cite_note-tridgemyths-9">[9]&lt;/a> and added more features, including support for &lt;a href="https://en.wikipedia.org/wiki/Symbolic_link">symbolic links&lt;/a>, &lt;a href="https://en.wikipedia.org/wiki/Hard_link">hard links&lt;/a>, larger file sizes, and an initial attempt at supporting direct connections over TCP port 445 without requiring &lt;a href="https://en.wikipedia.org/wiki/NetBIOS">NetBIOS&lt;/a> as a transport (a largely experimental effort that required further refinement). Microsoft submitted some partial specifications as &lt;a href="https://en.wikipedia.org/wiki/Internet_Draft">Internet-Drafts&lt;/a> to the &lt;a href="https://en.wikipedia.org/wiki/Internet_Engineering_Task_Force">IETF&lt;/a>,&lt;a href="https://en.wikipedia.org/wiki/Server_Message_Block#cite_note-IETF-13">[13]&lt;/a> though these submissions have expired.1996 年，当 Sun Microsystems 宣布 WebNFS，[12] Microsoft 推出了一项计划将 SMB 重命名为常见的 Internet 文件系统（CIFS）[9]并增加了更多功能，包括支持符号链接，硬链接，更大的文件大小和一个初步尝试在不需要 NetBIOS 作为运输的情况下支持直接连接的初步尝试（需要进一步改进的主要实验努力）。 Microsoft 将某些部分规格作为 IETF 提交了一些部分规范，[13]虽然这些提交已过期。
Microsoft &amp;ldquo;added SMB1 to the Windows Server 2012 R2 &lt;a href="https://en.wikipedia.org/wiki/Deprecation">deprecation&lt;/a> list in June 2013.&amp;rdquo;&lt;a href="https://en.wikipedia.org/wiki/Server_Message_Block#cite_note-14">[14]&lt;/a> Windows Server 2016 and some versions of Windows 10 Fall Creators Update do not have SMB1 installed by default.&lt;a href="https://en.wikipedia.org/wiki/Server_Message_Block#cite_note-15">[15]&lt;/a>Microsoft 将于 2013 年 6 月添加到 Windows Server 2012 R2 弃用列表中的 SMB1。“[14] Windows Server 2016 和一些版本的 Windows 10 秋季创建者更新没有 SMB1 默认安装。[15]&lt;/p>
&lt;h3 id="smb-20edithttpsenwikipediaorgwindexphptitleserver_message_blockactioneditsection4smb-20-编辑">SMB 2.0[&lt;a href="https://en.wikipedia.org/w/index.php?title=Server_Message_Block&amp;amp;action=edit&amp;amp;section=4">edit&lt;/a>]SMB 2.0 [编辑]&lt;/h3>
&lt;p>Microsoft introduced a new version of the protocol (SMB 2.0 or SMB2) with &lt;a href="https://en.wikipedia.org/wiki/Windows_Vista">Windows Vista&lt;/a> in 2006&lt;a href="https://en.wikipedia.org/wiki/Server_Message_Block#cite_note-smb2-16">[16]&lt;/a> and &lt;a href="https://en.wikipedia.org/wiki/Windows_Server_2008">Server 2008&lt;/a>. Although the protocol is proprietary, its specification has been published to allow other systems to interoperate with Microsoft operating systems that use the new protocol.&lt;a href="https://en.wikipedia.org/wiki/Server_Message_Block#cite_note-17">[17]&lt;/a>Microsoft 在 2006 年的 Windows Vista 引入了一个新版本的协议（SMB 2.0 或 SMB2）[16]和 Server 2008.虽然该协议是专有的，但它已发布其规范，以允许其他系统与使用使用的 Microsoft 操作系统互操作新协议。[17]
SMB2 reduces the &amp;lsquo;chattiness&amp;rsquo; of the SMB 1.0 protocol by reducing the number of commands and subcommands from over a hundred to just nineteen.&lt;a href="https://en.wikipedia.org/wiki/Server_Message_Block#cite_note-barreto-18">[18]&lt;/a> It has mechanisms for &lt;a href="https://en.wikipedia.org/wiki/Pipelining">pipelining&lt;/a>, that is, sending additional requests before the response to a previous request arrives, thereby improving performance over high-&lt;a href="https://en.wikipedia.org/wiki/Latency_(engineering)">latency&lt;/a> links. It adds the ability to compound multiple actions into a single request, which significantly reduces the number of &lt;a href="https://en.wikipedia.org/wiki/Round-trip_delay_time">round-trips&lt;/a> the client needs to make to the server, improving performance as a result.&lt;a href="https://en.wikipedia.org/wiki/Server_Message_Block#cite_note-barreto-18">[18]&lt;/a> SMB1 also has a compounding mechanism—known as AndX—to compound multiple actions, but Microsoft clients rarely use AndX.&lt;em>&lt;a href="https://en.wikipedia.org/wiki/Wikipedia:Citation_needed">citation needed&lt;/a>&lt;/em> It also introduces the notion of &amp;ldquo;durable file handles&amp;rdquo;: these allow a connection to an SMB server to survive brief network outages, as are typical in a wireless network, without having to incur the overhead of re-negotiating a new session.SMB2 通过减少超过一百到十九岁的命令和子命令的数量来减少 SMB 1.0 协议的“干脆”。[18]它具有流水线的机制，即，在对先前请求到达之前发送附加请求，从而提高了高延迟链路的性能。它增加了将多个操作复制到单个请求中的能力，这显着减少了客户端需要对服务器所需的往返的数量，从而提高性能。[18] SMB1 还具有复合机制，称为 Andx-to Compase 多种动作，但 Microsoft 客户端很少使用 Andx。[所需的引用]它还介绍了“持久文件处理函数”的概念：这些概述允许与 SMB 服务器的连接来生存简介网络中断，正如无线网络中的典型版本，而不必触发重新协商新会话的开销。
SMB2 includes support for &lt;a href="https://en.wikipedia.org/wiki/Symbolic_link">symbolic links&lt;/a>. Other improvements include caching of file properties, improved message signing with &lt;a href="https://en.wikipedia.org/wiki/HMAC">HMAC&lt;/a> &lt;a href="https://en.wikipedia.org/wiki/SHA-256">SHA-256&lt;/a> hashing algorithm and better scalability by increasing the number of users, shares and open files per server among others.&lt;a href="https://en.wikipedia.org/wiki/Server_Message_Block#cite_note-barreto-18">[18]&lt;/a> The SMB1 protocol uses 16-bit data sizes, which amongst other things, limits the maximum block size to 64K. SMB2 uses 32- or 64-bit wide storage fields, and 128 bits in the case of &lt;a href="https://en.wikipedia.org/wiki/File_handle">file-handles&lt;/a>, thereby removing previous constraints on block sizes, which improves performance with large file transfers over fast networks.&lt;a href="https://en.wikipedia.org/wiki/Server_Message_Block#cite_note-barreto-18">[18]&lt;/a>SMB2 包括对符号链接的支持。其他改进包括缓存文件属性，通过增加每个服务器等用户的用户，共享和打开文件的数量，改进了 HMAC SHA-256 散列算法和更好的可扩展性。[18] SMB1 协议使用 16 位数据大小，其中包括其他内容，将最大块大小限制为 64K。 SMB2 使用 32 个或 64 位宽的存储字段，以及在文件处理的情况下使用 128 位，从而在块大小上移除先前的约束，从而提高了大文件传输的性能。[18]
Windows Vista/&lt;a href="https://en.wikipedia.org/wiki/Server_2008">Server 2008&lt;/a> and later operating systems use SMB2 when communicating with other machines also capable of using SMB2. SMB1 continues in use for connections with older versions of Windows, as well various vendors&amp;rsquo; &lt;a href="https://en.wikipedia.org/wiki/Network-attached_storage">NAS&lt;/a> solutions. Samba 3.5 also includes experimental support for SMB2.&lt;a href="https://en.wikipedia.org/wiki/Server_Message_Block#cite_note-19">[19]&lt;/a> Samba 3.6 fully supports SMB2, except the modification of user quotas using the Windows quota management tools.&lt;a href="https://en.wikipedia.org/wiki/Server_Message_Block#cite_note-20">[20]&lt;/a>Windows Vista / Server 2008 及更高版本的操作系统在与其他机器通信时使用 SMB2，该机器也能够使用 SMB2。 SMB1 继续用于与旧版本的 Windows 连接，以及各种供应商的 NAS 解决方案。 Samba 3.5 还包括对 SMB2 的实验支持。[19] Samba 3.6 完全支持 SMB2，除了使用 Windows 配额管理工具修改用户配额。[20]
When SMB2 was introduced it brought a number of benefits over SMB1 for third party implementers of SMB protocols. SMB1, originally designed by &lt;a href="https://en.wikipedia.org/wiki/IBM">IBM&lt;/a>, was &lt;a href="https://en.wikipedia.org/wiki/Reverse_engineering">reverse engineered&lt;/a>, and later became part of a wide variety of non-Windows operating systems such as &lt;a href="https://en.wikipedia.org/wiki/Xenix">Xenix&lt;/a>, &lt;a href="https://en.wikipedia.org/wiki/OS/2">OS/2&lt;/a> and &lt;a href="https://en.wikipedia.org/wiki/OpenVMS">VMS&lt;/a> (&lt;a href="https://en.wikipedia.org/wiki/Pathworks">Pathworks&lt;/a>). &lt;a href="https://en.wikipedia.org/wiki/X/Open">X/Open&lt;/a> standardized it partially; it also had draft &lt;a href="https://en.wikipedia.org/wiki/Internet_Engineering_Task_Force">IETF&lt;/a> standards which lapsed. (See &lt;a href="http://ubiqx.org/cifs/Intro.html">http://ubiqx.org/cifs/Intro.html&lt;/a> for historical detail.) SMB2 is also a relatively clean break with the past. Microsoft&amp;rsquo;s SMB1 code has to work with a large variety of SMB clients and servers. SMB1 features many versions of information for commands (selecting what structure to return for a particular request) because features such as &lt;a href="https://en.wikipedia.org/wiki/Unicode">Unicode&lt;/a> support were retro-fitted at a later date. SMB2 involves significantly reduced compatibility-testing for implementers of the protocol. SMB2 code has considerably less complexity since far less variability exists (for example, non-Unicode code paths become redundant as SMB2 requires Unicode support).当 SMB2 引入时，它为 SMB 协议的第三方实施者带来了许多福利。最初由 IBM 设计的 SMB1 是反向设计的，后来成为 Xenix，OS / 2 和 VM（Pathworks）等各种非 Windows 操作系统的一部分。 X /开放部分地标准化;它还有 IETF 标准草案，退却。 （有关历史细节，请参阅http://ubiqx.org/cifs/intro.html。）SMB2也与过去相对干净。微软的SMB1代码必须使用各种SMB客户端和服务器。 SMB1 具有命令的许多信息版本（选择要返回的特定请求的结构），因为在以后的日期中重新装配诸如 Unicode 支持的功能。 SMB2 涉及对协议实施者的兼容性测试显着降低。 SMB2 代码具有很大的复杂性，因为存在较小的可变性（例如，当 SMB2 需要 Unicode 支持时，非 Unicode 代码路径变得冗余）。
Apple is also migrating to SMB2 (from their own &lt;a href="https://en.wikipedia.org/wiki/Apple_Filing_Protocol">Apple Filing Protocol&lt;/a>, now legacy) with OS X 10.9.&lt;a href="https://en.wikipedia.org/wiki/Server_Message_Block#cite_note-ai2013-21">[21]&lt;/a> This transition was fraught with compatibility problems though.&lt;a href="https://en.wikipedia.org/wiki/Server_Message_Block#cite_note-22">[22]&lt;/a>&lt;a href="https://en.wikipedia.org/wiki/Server_Message_Block#cite_note-23">[23]&lt;/a> Non-default support for SMB2 appeared in fact in OS X 10.7, when Apple abandoned Samba in favor of its own SMB implementation called SMBX.&lt;a href="https://en.wikipedia.org/wiki/Server_Message_Block#cite_note-ai2013-21">[21]&lt;/a> Apple switched to its own SMBX implementation after Samba adopted &lt;a href="https://en.wikipedia.org/wiki/GPLv3">GPLv3&lt;/a>.&lt;a href="https://en.wikipedia.org/wiki/Server_Message_Block#cite_note-24">[24]&lt;/a>&lt;a href="https://en.wikipedia.org/wiki/Server_Message_Block#cite_note-25">[25]&lt;/a>Apple 还与 OS X 10.9 迁移到 SMB2（从他们自己的 Apple 申请协议，现在遗留）。[21]这种转变充满了兼容性问题。[22] [23] SMB2 的非默认支持实际上出现在 OS X 10.7 中，当 Apple 废弃 Samba 有利于它自己的 SMB 实现，称为 SMBx。[21] Apple 在 Samba 采用 GPLv3 后切换到自己的 SMBX 实现。[24] [25]
The &lt;a href="https://en.wikipedia.org/wiki/Linux_kernel">Linux kernel&lt;/a>&amp;rsquo;s CIFS client file system has SMB2 support since version 3.7.&lt;a href="https://en.wikipedia.org/wiki/Server_Message_Block#cite_note-26">[26]&lt;/a>自版本 3.7 以来，Linux 内核的 CIFS 客户端文件系统具有 SMB2 支持。[26]&lt;/p>
&lt;h3 id="smb-21edithttpsenwikipediaorgwindexphptitleserver_message_blockactioneditsection5smb-21-编辑">SMB 2.1[&lt;a href="https://en.wikipedia.org/w/index.php?title=Server_Message_Block&amp;amp;action=edit&amp;amp;section=5">edit&lt;/a>]SMB 2.1 [编辑]&lt;/h3>
&lt;p>SMB 2.1, introduced with Windows 7 and Server 2008 R2, introduced minor performance enhancements with a new opportunistic locking mechanism.&lt;a href="https://en.wikipedia.org/wiki/Server_Message_Block#cite_note-27">[27]&lt;/a>使用 Windows 7 和 Server 2008 R2 引入的 SMB 2.1，带来了新的机会锁定机制的次要性能增强。[27]&lt;/p>
&lt;h3 id="smb-30edithttpsenwikipediaorgwindexphptitleserver_message_blockactioneditsection6smb-30-编辑">SMB 3.0[&lt;a href="https://en.wikipedia.org/w/index.php?title=Server_Message_Block&amp;amp;action=edit&amp;amp;section=6">edit&lt;/a>]SMB 3.0 [编辑]&lt;/h3>
&lt;p>SMB 3.0 (previously named SMB 2.2)&lt;a href="https://en.wikipedia.org/wiki/Server_Message_Block#cite_note-smb3-28">[28]&lt;/a> was introduced with &lt;a href="https://en.wikipedia.org/wiki/Windows_8">Windows 8&lt;/a>&lt;a href="https://en.wikipedia.org/wiki/Server_Message_Block#cite_note-smb3-28">[28]&lt;/a> and &lt;a href="https://en.wikipedia.org/wiki/Windows_Server_2012">Windows Server 2012&lt;/a>.&lt;a href="https://en.wikipedia.org/wiki/Server_Message_Block#cite_note-smb3-28">[28]&lt;/a> It brought several significant changes that are intended to add functionality and improve SMB2 performance,&lt;a href="https://en.wikipedia.org/wiki/Server_Message_Block#cite_note-29">[29]&lt;/a> notably in virtualized &lt;a href="https://en.wikipedia.org/wiki/Data_center">data centers&lt;/a>:使用 Windows 8 [28]和 Windows Server 2012 引入了 SMB 3.0（以前命名的 SMB 2.2）[28]。[28]它带来了几种重大变化，旨在添加功能并提高 SMB2 性能，[29]显着涉及虚拟化数据中心：&lt;/p>
&lt;ul>
&lt;li>the SMB Direct Protocol (SMB over &lt;a href="https://en.wikipedia.org/wiki/Remote_direct_memory_access">remote direct memory access&lt;/a> [RDMA])SMB 直接协议（SMB OVER 远程直接内存访问[RDMA]）&lt;/li>
&lt;li>SMB Multichannel (multiple connections per SMB session),&lt;a href="https://en.wikipedia.org/wiki/Server_Message_Block#cite_note-30">[30]&lt;/a>&lt;a href="https://en.wikipedia.org/wiki/Server_Message_Block#cite_note-31">[31]&lt;/a>SMB MultiShannel（每个 SMB 会话的多个连接），[30] [31]&lt;/li>
&lt;li>SMB Transparent Failover&lt;a href="https://en.wikipedia.org/wiki/Server_Message_Block#cite_note-32">[32]&lt;/a>&lt;a href="https://en.wikipedia.org/wiki/Server_Message_Block#cite_note-33">[33]&lt;/a>SMB 透明故障转移[32] [33]&lt;/li>
&lt;/ul>
&lt;p>It also introduces several security enhancements, such as &lt;a href="https://en.wikipedia.org/wiki/End-to-end_encryption">end-to-end encryption&lt;/a> and a new &lt;a href="https://en.wikipedia.org/wiki/Advanced_Encryption_Standard">AES&lt;/a> based signing algorithm.&lt;a href="https://en.wikipedia.org/wiki/Server_Message_Block#cite_note-34">[34]&lt;/a>&lt;a href="https://en.wikipedia.org/wiki/Server_Message_Block#cite_note-35">[35]&lt;/a>它还引入了几种安全增强功能，例如端到端加密和基于新的 AES 签名算法。[34] [35]&lt;/p>
&lt;h3 id="smb-302edithttpsenwikipediaorgwindexphptitleserver_message_blockactioneditsection7smb-302-编辑">SMB 3.0.2[&lt;a href="https://en.wikipedia.org/w/index.php?title=Server_Message_Block&amp;amp;action=edit&amp;amp;section=7">edit&lt;/a>]SMB 3.0.2 [编辑]&lt;/h3>
&lt;p>SMB 3.0.2 (known as 3.02 at the time) was introduced with Windows 8.1 and Windows Server 2012 R2;&lt;a href="https://en.wikipedia.org/wiki/Server_Message_Block#cite_note-36">[36]&lt;/a>&lt;a href="https://en.wikipedia.org/wiki/Server_Message_Block#cite_note-37">[37]&lt;/a> in those and later releases, the earlier SMB version 1 can be optionally disabled to increase security.&lt;a href="https://en.wikipedia.org/wiki/Server_Message_Block#cite_note-38">[38]&lt;/a>&lt;a href="https://en.wikipedia.org/wiki/Server_Message_Block#cite_note-barreto-smb3-links-ws2012r2-39">[39]&lt;/a>Windows 8.1 和 Windows Server 2012 R2 引入了 SMB 3.0.2（当时的 3.02）; [36] [37]在那些和稍后的版本中，早期的 SMB 版本 1 可以选择禁用以增加安全性。[38 ] [39]&lt;/p>
&lt;h3 id="smb-311edithttpsenwikipediaorgwindexphptitleserver_message_blockactioneditsection8smb-311-编辑">SMB 3.1.1[&lt;a href="https://en.wikipedia.org/w/index.php?title=Server_Message_Block&amp;amp;action=edit&amp;amp;section=8">edit&lt;/a>]SMB 3.1.1 [编辑]&lt;/h3>
&lt;p>SMB 3.1.1 was introduced with &lt;a href="https://en.wikipedia.org/wiki/Windows_10">Windows 10&lt;/a> and &lt;a href="https://en.wikipedia.org/wiki/Windows_Server_2016">Windows Server 2016&lt;/a>.&lt;a href="https://en.wikipedia.org/wiki/Server_Message_Block#cite_note-40">[40]&lt;/a> This version supports &lt;a href="https://en.wikipedia.org/wiki/Advanced_Encryption_Standard">AES-128&lt;/a> &lt;a href="https://en.wikipedia.org/wiki/Galois/Counter_Mode">GCM&lt;/a> encryption in addition to AES-128 &lt;a href="https://en.wikipedia.org/wiki/CCM_mode">CCM&lt;/a> encryption added in SMB3, and implements pre-authentication integrity check using &lt;a href="https://en.wikipedia.org/wiki/SHA-512">SHA-512&lt;/a> hash. SMB 3.1.1 also makes secure negotiation mandatory when connecting to clients using SMB 2.x and higher.使用 Windows 10 和 Windows Server 2016 引入了 SMB 3.1.1. [40]此版本还支持 AES-128 GCM 加密，除了在 SMB3 中添加的 AES-128 CCM 加密，使用 SHA-512 哈希实现预认证完整性检查。 SMB 3.1.1 还使用 SMB 2.x 和更高的客户端连接到客户端时强制使用安全协商。&lt;/p>
&lt;h2 id="cifs">CIFS&lt;/h2>
&lt;p>CIFS (Common Internet File System) is a protocol that gained popularity around the year 2000, as vendors worked to establish an Internet Protocol-based &lt;a href="https://searchmobilecomputing.techtarget.com/definition/file-sharing">file-sharing&lt;/a> protocol.CIFS（常见的 Internet 文件系统）是一项协议，它在 2000 年左右获得了普及的协议，因为供应商建立基于 Internet 协议的文件共享协议。
At its peak, CIFS was supported by operating systems (OSes) such as Windows, Linux and Unix. CIFS used the &lt;a href="https://searchnetworking.techtarget.com/definition/client-server">client-server&lt;/a> programming model in which a client program makes a request of a server program &amp;ndash; usually in another computer &amp;ndash; to access a file or pass a message to a program that runs in the server computer. The server takes the requested action and returns a response.在其峰值处，CIFS 由操作系统（OS）支持，例如 Windows，Linux 和 Unix。 CIFS 使用客户端 - 服务器编程模型，其中客户端程序使服务器程序的请求 - 通常在另一台计算机中 - 访问文件或将消息传递给在服务器计算机中运行的程序。服务器获取请求的操作并返回响应。
CIFS is now considered obsolete, because most modern data storage systems use the more robust Server Message Block (&lt;a href="https://searchnetworking.techtarget.com/definition/Server-Message-Block-Protocol">SMB&lt;/a>) 2.0 and 3.0 file-sharing protocols, which were major upgrades to CIFS.CIFS 现在被认为已过时，因为大多数现代数据存储系统使用更强大的服务器消息块（SMB）2.0 和 3.0 文件共享协议，这是 CIFS 的重大升级。
CIFS/SMB and the Network File System (&lt;a href="https://searchenterprisedesktop.techtarget.com/definition/Network-File-System">NFS&lt;/a>) are the two major protocols used in network-attached storage (&lt;a href="https://searchstorage.techtarget.com/definition/network-attached-storage">NAS&lt;/a>) systems.CIFS / SMB 和网络文件系统（NFS）是网络附加存储（NAS）系统中使用的两个主要协议。&lt;/p>
&lt;h3 id="cifs-vs-nfscifs-与-nfs">CIFS vs. NFSCIFS 与 NFS.&lt;/h3>
&lt;p>Developed by Sun Microsystems in the 1980s, NFS is now managed by the Internet Engineering Task Force (&lt;a href="https://whatis.techtarget.com/definition/IETF-Internet-Engineering-Task-Force">IETF&lt;/a>). NFS was originally used more in Unix and Linux OSes, while CIFS and SMB were used for Windows, but most major NAS vendors now support both protocols.由 Sun Microsystems 在 20 世纪 80 年代开发，NFS 现在由互联网工程任务组（IETF）管理。 NFS 最初在 UNIX 和 Linux OS 中使用更多，而 CIFS 和 SMB 用于 Windows，但大多数主要的 NAS 供应商现在支持这两个协议。
NFS is a client-server application that permits transparent file sharing between servers, desktops, laptops and other devices. Using NFS, users can store, view and update files remotely as though they were on their own computer. With CIFS/SMB, a client program requests a file from a server program located on another computer, and the server responds. This makes CIFS a &lt;a href="https://searchnetworking.techtarget.com/definition/chatty-protocol">chattier protocol&lt;/a> than NFS.NFS 是一个客户端 - 服务器应用程序，可允许服务器，桌面，笔记本电脑和其他设备之间的透明文件共享。使用 NFS，用户可以远程存储，查看和更新文件，好像它们在自己的计算机上。使用 CIFS / SMB，客户端程序请求来自位于另一台计算机上的服务器程序的文件，服务器响应。这使 CIFS 成为比 NFS 的淘汰的协议。&lt;/p>
&lt;h3 id="cifs-vs-smb-20-30cifs-与-smb-2030">CIFS vs. SMB 2.0, 3.0CIFS 与 SMB 2.0,3.0&lt;/h3>
&lt;p>The SMB &lt;a href="https://searchnetworking.techtarget.com/definition/Application-layer">application-layer&lt;/a> network protocol has been around since the 1980s. Developed at IBM, SMB allowed computers to read and write files over a local area network. Although CIFS and SMB are often used interchangeably, the CIFS protocol was introduced by Microsoft in early Windows OSes as an updated version of SMB.自 20 世纪 80 年代以来，SMB 应用层网络协议已经存在。在 IBM 开发，SMB 允许计算机通过局域网读取和写入文件。虽然 CIFS 和 SMB 通常互换使用，但 CIFS 协议由 Microsoft 在早期 Windows OS 中作为 SMB 的更新版本引入。
CIFS used the internet&amp;rsquo;s &lt;a href="https://searchnetworking.techtarget.com/definition/TCP-IP">TCP/IP&lt;/a> protocol and was viewed as a complement to existing internet application protocols, such as the File Transfer Protocol (&lt;a href="https://searchnetworking.techtarget.com/definition/File-Transfer-Protocol-FTP">FTP&lt;/a>) and the Hypertext Transfer Protocol (&lt;a href="https://whatis.techtarget.com/definition/HTTP-Hypertext-Transfer-Protocol">HTTP&lt;/a>). However, CIFS was considered a chatty protocol that was buggy and had issues with network latency. The protocol was also hard to maintain and not very secure because of the large number of commands and subcommands it processed. It was replaced when Microsoft introduced SMB in Windows 2000, Windows XP, Windows Server 2003 and Windows Server 2003 R2. Updated versions of the protocol were subsequently used in Windows Vista, Windows Server 2008, Windows 7 and Windows Server 2008.CIFS 使用 Internet 的 TCP / IP 协议，并被视为对现有的 Internet 应用程序协议的补充，例如文件传输协议（FTP）和超文本传输协议（HTTP）。但是，CIFS 被认为是一个笨拙的协议，它是错误的，并且具有网络延迟的问题。由于它处理了大量的命令和子命令，该协议也很难维护，而不是非常安全。当 Microsoft 在 Windows 2000，Windows XP，Windows Server 2003 和 Windows Server 2003 R2 中引入 SMB 时，它被替换。随后在 Windows Vista，Windows Server 2008，Windows 7 和 Windows Server 2008 中使用更新的协议版本。
SMB 2.0, introduced in the Windows OS in 2006, provided performance improvements over SMB 1.0 by reducing the number of commands and subcommands from more than 100 to 19. The 2.0 specification packs multiple actions into a single request &amp;ndash; to reduce the number of round-trip requests made between the client and server &amp;ndash; since the client may now &lt;a href="https://whatis.techtarget.com/definition/caching">cache&lt;/a> all changes to the file before committing it to the server.在 2006 年的 Windows OS 中引入的 SMB 2.0，通过减少超过 100 到 19 的命令和子命令的数量为 SMB 1.0 提供了性能改进。2.0 规范将多个操作包装为单个请求 - 以减少轮数 - 客户端和服务器之间的条件 - 由于客户端现在可以在向服务器提交到服务器之前缓存到文件的所有更改。
&lt;a href="https://searchwindowsserver.techtarget.com/definition/SMB-30-Server-Message-Block-30">SMB 3.0&lt;/a> was introduced in Windows 8 and Windows Server 2012, and launched SMB Direct, SMB Multichannel and SMB Transport Failover. It also introduced better security mechanisms, such as end-to-end encryption and the Advanced Encryption Standard (&lt;a href="https://searchsecurity.techtarget.com/definition/Advanced-Encryption-Standard">AES&lt;/a>) algorithm.SMB 3.0 是在 Windows 8 和 Windows Server 2012 中引入的，并推出了 SMB Direct，SMB MultiShannel 和 SMB 传输故障转移。它还引入了更好的安全机制，例如端到端加密和高级加密标准（AES）算法。
SMB 3.1.1, which became available in Windows 10 and Windows Server 2016, supports military-grade AES 128 GCM and AES 128 CCM encryption. It also uses the SHA-512 &lt;a href="https://searchsqlserver.techtarget.com/definition/hashing">hash&lt;/a> for preauthentication integrity checks.SMB 3.1.1 在 Windows 10 和 Windows Server 2016 中获得，支持军用 AEES 128 GCM 和 AES 128 CCM 加密。它还使用 SHA-512 散列进行预先认真完整性检查。
The &lt;a href="https://whatis.techtarget.com/definition/Samba">Samba&lt;/a> project played a major role in making SMB compatible with Unix. Samba is a free software implementation of the CIFS/SMB networking protocols that supports Microsoft Windows Server Domain, Active Directory and Microsoft Windows NT domains. With Samba, Unix-like OSes can interoperate with Windows and provided file and print services to Windows clients.Samba 项目在使 SMB 与 UNIX 兼容时发挥了重要作用。 Samba 是一个免费的软件实现，用于支持 Microsoft Windows Server 域，Active Directory 和 Microsoft Windows NT 域的 CIFS / SMB 网络协议。使用 Samba，Unix 类似的 oS 可以与 Windows 互操作，并为 Windows 客户端提供文件和打印服务。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/eysgyr/1618755274203-ef35cba6-f8d2-4371-8080-a9a8db101597.png" alt="">A comparison of CIFS, NFS and SMB file-sharing protocols.&lt;/p>
&lt;h3 id="cifs-protocol-featurescifs-协议功能">CIFS Protocol FeaturesCIFS 协议功能&lt;/h3>
&lt;p>The CIFS protocol includes a number of features as documented by Microsoft. These features include:CIFS 协议包括 Microsoft 记录的许多功能。这些功能包括：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Transport Intelligence&lt;/strong>: Although the CIFS protocol is normally used over top of a connection-oriented protocol, it can also make use of a connectionless protocol.传输智能：虽然 CIFS 协议通常在面向连接的协议之上使用，但它也可以使用无连接协议。&lt;/li>
&lt;li>&lt;strong>Flexible Connectivity&lt;/strong>: The CIFS protocol is extremely flexible with regard to client/server connectivity. A single client can connect to multiple servers, and can even make multiple connections to a single server if necessary.灵活的连接：CIFS 协议在客户端/服务器连接方面非常灵活。单个客户端可以连接到多个服务器，如果需要，甚至可以与单个服务器进行多次连接。&lt;/li>
&lt;li>&lt;strong>Feature Negotiation&lt;/strong>: The protocol&amp;rsquo;s dialect and supported features are negotiated on a connection-by-connection basis.功能协商：协议的方言和支持的功能在连接基础上协商。&lt;/li>
&lt;li>&lt;strong>Resource Access&lt;/strong>: The CIFS protocol does not limit the types of resources that clients are able to connect to. CIFS clients are able to concurrently connect to shared files, &lt;a href="https://whatis.techtarget.com/definition/named-pipe">named pipes&lt;/a>, print queues and other resources.资源访问：CIFS 协议不会限制客户端能够连接的资源类型。 CIFS 客户端能够同时连接到共享文件，命名为管道，打印队列和其他资源。&lt;/li>
&lt;li>&lt;strong>Security Context&lt;/strong>: The CIFS protocol does not limit the client to the use of a single security context. Multiple security contexts can be used over a connection if necessary.安全性上下文：CIFS 协议不会将客户端限制为使用单个安全上下文。如果需要，可以在连接上使用多个安全上下文。&lt;/li>
&lt;li>&lt;strong>File Access&lt;/strong>: A CIFS client is able to interact with multiple files simultaneously. Additionally, file sharing is a function of the server operating system and CIFS does not impose &lt;a href="https://whatis.techtarget.com/definition/lock">file locks&lt;/a>. This means that multiple clients can access a file simultaneously.文件访问：CIFS 客户端能够同时与多个文件进行交互。此外，文件共享是服务器操作系统的函数，并且 CIFS 不会强加文件锁定。这意味着多个客户端可以同时访问文件。&lt;/li>
&lt;li>&lt;strong>Extended Sub Protocols&lt;/strong>: The CIFS protocol allows the use of sub protocols, which can be used to extend functionality.扩展子协议：CIFS 协议允许使用子协议，该协议可用于扩展功能。&lt;/li>
&lt;li>&lt;strong>Named Pipe Interprocess Communication&lt;/strong>: CIFS allows named pipes to be used as a communication path between the client and the server.命名管道进程通信：CIFS 允许命名管道用作客户端和服务器之间的通信路径。&lt;/li>
&lt;li>&lt;strong>File and Record Locking and Safe Caching&lt;/strong>: Although the CIFS protocol allows multiple clients to simultaneously access a file, the protocol does support file and record locking, as well as file caching.文件和记录锁定和安全缓存：虽然 CIFS 协议允许多个客户端同时访问文件，但协议确实支持文件并记录锁定，以及文件缓存。&lt;/li>
&lt;li>&lt;strong>File, Directory and Volume Attributes&lt;/strong>: The CIFS protocol is designed to recognize and respect attributes that have been assigned at the file, folder and volume levels. The protocol is also compatible with Windows Access Control Lists (&lt;a href="https://searchsoftwarequality.techtarget.com/definition/access-control-list">ACL&lt;/a>).文件，目录和卷属性：CIFS 协议旨在识别并尊重已分配在文件，文件夹和卷级别的属性。该协议也与 Windows 访问控制列表（ACL）兼容。&lt;/li>
&lt;li>&lt;strong>File and Directory Change Notifications&lt;/strong>: The CIFS protocol includes a mechanism that allows clients to be notified when a change has been made to a shared resource. A Windows client that is accessing a shared folder through &lt;a href="https://searchenterprisedesktop.techtarget.com/definition/Microsoft-Windows-Explorer">File Explorer&lt;/a> for example, will generally display a current view of the shared folder&amp;rsquo;s contents because of this feature.文件和目录更改通知：CIFS 协议包括一种机制，该机制允许在对共享资源进行更改时通知客户端。例如，通过文件资源管理器访问共享文件夹的 Windows 客户端通常会因为此功能而显示共享文件夹内容的当前视图。&lt;/li>
&lt;li>&lt;strong>Batched Commands&lt;/strong>: The CIFS protocol allows messages to be linked together and processed in sequence.批量命令：CIFS 协议允许以序列链接在一起并处理消息。&lt;/li>
&lt;li>&lt;strong>Support for the Distributed File System&lt;/strong>: The Windows Server operating system supports the use of a Distributed File System (&lt;a href="https://searchwindowsserver.techtarget.com/definition/distributed-file-system-DFS">DFS&lt;/a>) which creates a global namespace that can include resources on multiple servers. The CIFS protocol fully supports the DFS feature.支持分布式文件系统：Windows Server 操作系统支持使用分布式文件系统（DFS），该文件系统（DFS）创建一个全局命名空间，可以在多个服务器上包含资源。 CIFS 协议完全支持 DFS 功能。&lt;/li>
&lt;li>&lt;strong>Remote Procedure Call Transport&lt;/strong>: The CIFS protocol supports the use of &lt;a href="https://searchapparchitecture.techtarget.com/definition/Remote-Procedure-Call-RPC">RPC&lt;/a> protocols such as MS-RPCE and MS-RAP.远程过程呼叫传输：CIFS 协议支持使用 RPC 协议，例如 MS-RPCE 和 MS-RAP。&lt;/li>
&lt;li>&lt;strong>Message Verification&lt;/strong>: Message signing can be used in conjunction with the CIFS protocol as a way of guaranteeing that messages have not been modified in transit.消息验证：消息签名可以与 CIFS 协议结合使用，作为保证在运输过程中未修改消息的方式。&lt;/li>
&lt;li>&lt;strong>Unicode File Name Support&lt;/strong>: The CIFS protocol supports the &lt;a href="https://whatis.techtarget.com/definition/ASCII-American-Standard-Code-for-Information-Interchange">ASCII&lt;/a> character set and &lt;a href="https://whatis.techtarget.com/definition/Unicode">Unicode&lt;/a> Legacy 8.3 filenames are supported, as are long file names.Unicode 文件名支持：CIFS 协议支持 ASCII 字符集，支持 Unicode 传统 8.3 文件名，也可以是长文件名。&lt;/li>
&lt;/ul>
&lt;h3 id="uses-of-cifs-用-cifs-的用途">Uses of CIFS 用 CIFS 的用途&lt;/h3>
&lt;p>The CIFS protocol was the genesis for the current generation SMB protocol that is used for file sharing in Windows systems. SMB is widely used for accessing files and folders on Windows networks.CIFS 协议是当前生成 SMB 协议的 Genesis，用于在 Windows 系统中共享文件共享。 SMB 广泛用于访问 Windows 网络上的文件和文件夹。
Although the CIFS protocol is probably most often associated with Microsoft, there are &lt;a href="https://whatis.techtarget.com/definition/open-source">open source&lt;/a> versions of the protocol available. CIFSD for example, is an open source CIFS/SMB protocol for Linux. Similarly, Samba &amp;ndash; the Windows interoperability suite for Linux and Unix &amp;ndash; includes an SMB/CIFS client. The CIFS/SMB protocol is also sometimes used to provide containers with connectivity to shared resources.虽然 CIFS 协议可能最常与 Microsoft 相关，但是有可用协议的开源版本。例如，CIFSD 是用于 Linux 的开源 CIFS / SMB 协议。同样，Samba - Linux 和 UNIX 的 Windows 互操作套件 - 包括 SMB / CIFS 客户端。 CIFS / SMB 协议有时也用于为包含与共享资源的连接提供的容器。&lt;/p>
&lt;h3 id="how-does-cifs-workcifs-如何工作">How Does CIFS Work?CIFS 如何工作？&lt;/h3>
&lt;p>When a CIFS client needs to communicate with a CIFS server, the action is almost always initiated at the application level. A user might, for example, open Windows File Explorer and attempt to access a shared folder.当 CIFS 客户端需要与 CIFS 服务器通信时，操作几乎始终在应用程序级别启动。例如，用户可能会打开 Windows 文件资源管理器并尝试访问共享文件夹。
The first step in accessing a shared resource is that the client establishes a &lt;a href="https://searchnetworking.techtarget.com/definition/NetBIOS">NetBIOS&lt;/a> session with the server (using a full duplex TCP session over port 139). CIFS messages can then be transmitted across this session.访问共享资源的第一步是客户端与服务器建立 NetBIOS 会话（使用端口 139 上的全双工 TCP 会话）。然后可以在本次会话中传输 CIFS 消息。
With the NetBIOS session in place, the client and server perform a negotiation process in which they determine which dialect will be used. This negotiation process is initiated by the client by way of the SMB_COM_Negotiate command. This command effectively transmits to the server a list of the dialects that the client understands. The server responds with the dialect that it will be using. This dialect must be one that is supported by both the client and the server.使用 NetBIOS 会话到位，客户端和服务器执行协商过程，其中它们确定将使用哪个方言。此协商过程由客户端发起 SMB_COM_NEGOTIET 命令。该命令有效地向服务器发送客户端理解的方言列表。服务器响应它将使用的方言。此方言必须是客户端和服务器支持的方言。
Once the client and server agree on a dialect, the client transmits authentication credentials (usually a username and password) to the server, and is furnished with a Unique Identifier (&lt;a href="https://internetofthingsagenda.techtarget.com/definition/unique-identifier-UID">UID&lt;/a>). When the client transmits its authentication credentials, it also sends a list of its capabilities. As such, this step is necessary even if the server does not require authentication.一旦客户端和服务器对方言达成一致，客户端将身份验证凭据（通常是用户名和密码）传输到服务器，并且具有唯一标识符（UID）。当客户端发送其认证凭据时，它还发送其功能列表。因此，即使服务器不需要认证，也必须执行此步骤。
On modern systems, the authentication process is generally handled by Active Directory. However, authentication is not a direct function of the CIFS protocol. As such, other authentication mechanisms, such as &lt;a href="https://searchsecurity.techtarget.com/definition/RADIUS">RADIUS&lt;/a>, could also be used. It is worth noting that CIFS can also be used for file sharing in a workgroup environment. Since a workgroup lacks a centralized authentication mechanism, the authentication process would utilize local user accounts on the workgroup computers.在现代系统上，身份验证过程通常由 Active Directory 处理。但是，身份验证不是 CIFS 协议的直接功能。因此，还可以使用其他认证机制，例如半径。值得注意的是，CIFS 也可以用于工作组环境中的文件共享。由于工作组缺乏集中式认证机制，因此认证过程将在工作组计算机上使用本地用户帐户。
If the authentication is successful, the server returns the assigned UID to the client. Now, the client transmits the Universal Naming Convention (&lt;a href="https://whatis.techtarget.com/definition/Universal-Naming-Convention-UNC">UNC&lt;/a>) name of the share that it wishes to attach to. The server checks to make sure that the share name is valid and that the client has the required permissions. If these checks are successful, the client is granted access to the share, and can then begin requesting access to resources within the share, such as files and folders.如果身份验证成功，则服务器将分配的 UID 返回给客户端。现在，客户端发送通用命名约定（UNC）所希望附加到的共享的名称。服务器检查以确保共享名称有效，并且客户端具有所需的权限。如果这些检查成功，则客户端被授予对共享的访问权限，然后可以开始请求访问共享中的资源，例如文件和文件夹。&lt;/p>
&lt;h3 id="downfalls-of-cifscifs-的垮台">Downfalls of CIFSCIFS 的垮台&lt;/h3>
&lt;p>Early on, Microsoft&amp;rsquo;s CIFS proposal held great potential. With CIFS, Microsoft sought to create a standard version of SMB. Among its benefits was support for direct communications over &lt;a href="https://searchnetworking.techtarget.com/definition/TCP">TCP&lt;/a> port 445, completely bypassing NetBIOS. In spite of this capability however, most CIFS clients and servers continued to be based on NetBIOS and LAN Manager (LanMan) authentication.早期，微软的 CIFS 提案持有巨大的潜力。使用 CIFS，Microsoft 试图创建一个标准版本的 SMB。它的好处是支持通过 TCP 端口 445 的直接通信，完全绕过 NetBIOS。然而，尽管这种能力，但大多数 CIFS 客户端和服务器都继续基于 NetBIOS 和 LAN Manager（Lanman）身份验证。
LAN Manager 1.0 was originally created to support various file system features and operating system functions within IBM&amp;rsquo;s OS/2. Subsequent versions of LAN Manager supported &lt;a href="https://searchsecurity.techtarget.com/definition/DOS">DOS&lt;/a> and Windows. The CIFS specification was based around the use of NT LAN Manager &amp;ndash; otherwise known as NTLM or NT LanMan 0.12.LAN Manager 1.0 最初创建，以支持 IBM 的 OS / 2 中的各种文件系统功能和操作系统功能。后续版本的 LAN Manager 支持 DOS 和 Windows。 CIFS 规范基于 NT LAN 管理器的使用 - 否则称为 NTLM 或 NT Lanman 0.12。
Over time, CIFS became obsolete as Microsoft released newer versions of its SMB protocol, with SMB 3.0 being the current version.随着时间的推移，CIFS 将随着 Microsoft 发布的新版本的 SMB 协议而变得过时，SMB 3.0 是当前版本。&lt;/p>
&lt;h3 id="how-to-configure-cifs-for-windows-如何为-windows-配置-cifs">How to Configure CIFS for Windows 如何为 Windows 配置 CIFS&lt;/h3>
&lt;p>The CIFS protocol is fully supported by Windows 10, but CIFS sharing is disabled by default (although Windows 10 is configured by default to act as a CIFS client). SMB is Microsoft&amp;rsquo;s preferred file sharing protocol, and supersedes CIFS, so it is unlikely that most admins will need to fully enable the CIFS protocol. Even so, the protocol is available for use if needed. Here is how the configuration process works.CIFS 协议由 Windows 10 完全支持，但默认情况下禁用 CIFS 共享（尽管默认情况下，Windows 10 配置为 CIFS 客户端）。 SMB 是 Microsoft 的首选文件共享协议，并取代了 CIFS，因此大多数管理员不太可能需要完全启用 CIFS 协议。即便如此，如果需要，协议可供使用。以下是配置过程的工作原理。
To enable the CIFS protocol, enter the Control command at the Windows Run prompt. This will cause Windows to open the &lt;a href="https://searchwindowsserver.techtarget.com/definition/Microsoft-Windows-Control-Panel">Control Panel&lt;/a>. Next, click on &lt;strong>Programs&lt;/strong>, and then click on the &lt;strong>Turn Windows Features On or Off&lt;/strong> link. This will cause Windows to display a dialog box within which features can be enabled or disabled by selecting the corresponding checkbox.要启用 CIFS 协议，请在 Windows 运行提示符下输入控制命令。这将导致 Windows 打开控制面板。接下来，单击“程序”，然后单击“或关闭”或“关闭”链接的“窗口”功能。这将导致窗口显示一个对话框，通过选择相应的复选框可以启用或禁用功能。
Scroll through the list of features until you locate SMB 1.0/CIFS File Sharing Support. By default, Windows 10 is configured to act as a CIFS client, but not as a CIFS server. Hence, some CIFS components are enabled by default. To fully enable CIFS, expand the &lt;strong>SMB 1.0/CIFS File Sharing Support&lt;/strong> container and then select the &lt;strong>SMB 1.0/CIFS Server&lt;/strong> checkbox. The other SMB 1.0/CIFS checkboxes (Automatic Removal and Client) should be selected by default. Click &lt;strong>OK&lt;/strong> to install the feature.滚动功能列表，直到找到 SMB 1.0 / CIFS 文件共享支持。默认情况下，Windows 10 被配置为充当 CIFS 客户端，但不是 CIFS 服务器。因此，默认情况下，某些 CIFS 组件将启用。要完全启用 CIFS，请展开 SMB 1.0 / CIFS 文件共享支持容器，然后选择 SMB 1.0 / CIFS 服务器复选框。默认情况下，应选择其他 SMB 1.0 / CIFS 复选框（自动删除和客户端）。单击“确定”以安装该功能。
In Windows 10, no additional CIFS configuration is necessary. Sharing a folder across a network works the same way, regardless if SMB or CIFS is being used. Right click on the folder that is to be shared and select the &lt;strong>Properties&lt;/strong> command from the shortcut menu. This will cause Windows to display the folder&amp;rsquo;s properties dialog box. Select the dialog box&amp;rsquo;s &lt;strong>Sharing&lt;/strong> tab and click the &lt;strong>Share&lt;/strong> button. Select the users with whom you wish to share the folder and adjust their permissions as necessary. If the folder needs to be shared among additional users, click the &lt;strong>Add&lt;/strong> button and then enter the name of the user or group with whom the folder should be shared. When you are done configuring the folder&amp;rsquo;s users and permissions, click the &lt;strong>Share&lt;/strong> button, followed by the &lt;strong>Close&lt;/strong> button.在 Windows 10 中，不需要额外的 CIFS 配置。在网络上共享文件夹以相同的方式运行，无论是否正在使用 SMB 或 CIFS。右键单击要共享的文件夹，然后从快捷菜单中选择“属性”命令。这将导致 Windows 显示文件夹的属性对话框。选择对话框的共享选项卡，然后单击“共享”按钮。选择与您希望共享该文件夹并根据需要调整其权限的用户。如果需要在其他用户之间共享文件夹，请单击“添加”按钮，然后输入应共享文件夹的用户或组的名称。完成文件夹的用户和权限时，单击“共享”按钮，然后单击“关闭”按钮。&lt;/p></description></item><item><title>Docs: 1.Server Message Block</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/1.%E5%AD%98%E5%82%A8/%E5%AD%98%E5%82%A8%E7%9A%84%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E6%9E%B6%E6%9E%84/network-attached-storage%E7%BD%91%E7%BB%9C%E9%99%84%E5%8A%A0%E5%AD%98%E5%82%A8/1.server-message-block/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/1.%E5%AD%98%E5%82%A8/%E5%AD%98%E5%82%A8%E7%9A%84%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E6%9E%B6%E6%9E%84/network-attached-storage%E7%BD%91%E7%BB%9C%E9%99%84%E5%8A%A0%E5%AD%98%E5%82%A8/1.server-message-block/</guid><description/></item><item><title>Docs: 2.Network File System</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/1.%E5%AD%98%E5%82%A8/%E5%AD%98%E5%82%A8%E7%9A%84%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E6%9E%B6%E6%9E%84/network-attached-storage%E7%BD%91%E7%BB%9C%E9%99%84%E5%8A%A0%E5%AD%98%E5%82%A8/2.network-file-system/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/1.%E5%AD%98%E5%82%A8/%E5%AD%98%E5%82%A8%E7%9A%84%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E6%9E%B6%E6%9E%84/network-attached-storage%E7%BD%91%E7%BB%9C%E9%99%84%E5%8A%A0%E5%AD%98%E5%82%A8/2.network-file-system/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;p>&lt;strong>Network File System(网络文件系统，简称 NFS)&lt;/strong> 是让客户端通过网络访问不同主机上磁盘里的数据，主要用在类 Unix 系统上实现文件共享的一种方法。 本例演示 CentOS 7 下安装和配置 NFS 的基本步骤。&lt;/p></description></item><item><title>Docs: 2.Network File System</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/1.%E5%AD%98%E5%82%A8/%E5%AD%98%E5%82%A8%E7%9A%84%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E6%9E%B6%E6%9E%84/network-attached-storage%E7%BD%91%E7%BB%9C%E9%99%84%E5%8A%A0%E5%AD%98%E5%82%A8/2.network-file-system/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/1.%E5%AD%98%E5%82%A8/%E5%AD%98%E5%82%A8%E7%9A%84%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E6%9E%B6%E6%9E%84/network-attached-storage%E7%BD%91%E7%BB%9C%E9%99%84%E5%8A%A0%E5%AD%98%E5%82%A8/2.network-file-system/</guid><description/></item></channel></rss>