<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – 其他</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E5%85%B6%E4%BB%96/</link><description>Recent content in 其他 on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E5%85%B6%E4%BB%96/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: 多路径multipath</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E5%85%B6%E4%BB%96/%E5%A4%9A%E8%B7%AF%E5%BE%84multipath/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E5%85%B6%E4%BB%96/%E5%A4%9A%E8%B7%AF%E5%BE%84multipath/</guid><description>
&lt;p>所需安装的组件：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>device-mapper-multipath-libs-XXXX&lt;/p>
&lt;/li>
&lt;li>
&lt;p>device-mapper-multipath-XXXX&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>配置说明详见官方文档：&lt;a href="https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/7/html/dm_multipath/mpio_description">https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/7/html/dm_multipath/mpio_description&lt;/a>&lt;/p>
&lt;p>配置示例：&lt;/p>
&lt;pre>&lt;code># This is a basic configuration file with some examples, for device mapper
# multipath.
#
# For a complete list of the default configuration values, run either
# multipath -t
# or
# multipathd show config
#
# For a list of configuration options with descriptions, see the multipath.conf
# man page
## By default, devices with vendor = &amp;quot;IBM&amp;quot; and product = &amp;quot;S/390.*&amp;quot; are
## blacklisted. To enable mulitpathing on these devies, uncomment the
## following lines.
#blacklist_exceptions {
# device {
# vendor &amp;quot;IBM&amp;quot;
# product &amp;quot;S/390.*&amp;quot;
# }
#}
## Use user friendly names, instead of using WWIDs as names.
defaults {
user_friendly_names yes
find_multipaths no
}
##
## Here is an example of how to configure some standard options.
##
#
#defaults {
# polling_interval 10
# path_selector &amp;quot;round-robin 0&amp;quot;
# path_grouping_policy multibus
# uid_attribute ID_SERIAL
# prio alua
# path_checker readsector0
# rr_min_io 100
# max_fds 8192
# rr_weight priorities
# failback immediate
# no_path_retry fail
# user_friendly_names yes
#}
##
## The wwid line in the following blacklist section is shown as an example
## of how to blacklist devices by wwid. The 2 devnode lines are the
## compiled in default blacklist. If you want to blacklist entire types
## of devices, such as all scsi devices, you should use a devnode line.
## However, if you want to blacklist specific devices, you should use
## a wwid line. Since there is no guarantee that a specific device will
## not change names on reboot (from /dev/sda to /dev/sdb for example)
## devnode lines are not recommended for blacklisting specific devices.
##
#blacklist {
# wwid 26353900f02796769
# devnode &amp;quot;^(ram|raw|loop|fd|md|dm-|sr|scd|st)[0-9]*&amp;quot;
# devnode &amp;quot;^hd[a-z]&amp;quot;
#}
blacklist {
devnode &amp;quot;^sda&amp;quot;
# devnode &amp;quot;^sdb&amp;quot;
}
#multipaths {
# multipath {
# wwid 3600508b4000156d700012000000b0000
# alias yellow
# path_grouping_policy multibus
# path_selector &amp;quot;round-robin 0&amp;quot;
# failback manual
# rr_weight priorities
# no_path_retry 5
# }
# multipath {
# wwid 1DEC_____321816758474
# alias red
# }
#}
#devices {
# device {
# vendor &amp;quot;COMPAQ &amp;quot;
# product &amp;quot;HSV110 (C)COMPAQ&amp;quot;
# path_grouping_policy multibus
# path_checker readsector0
# path_selector &amp;quot;round-robin 0&amp;quot;
# hardware_handler &amp;quot;0&amp;quot;
# failback 15
# rr_weight priorities
# no_path_retry queue
# }
# device {
# vendor &amp;quot;COMPAQ &amp;quot;
# product &amp;quot;MSA1000 &amp;quot;
# path_grouping_policy multibus
# }
#}
devices {
device {
vendor &amp;quot;HP&amp;quot;
product &amp;quot;MSA 2040 SAN&amp;quot;
path_grouping_policy group_by_prio
path_checker tur
path_selector &amp;quot;round-robin 0&amp;quot;
hardware_handler &amp;quot;0&amp;quot;
failback immediate
rr_weight priorities
no_path_retry queue
}
}
&lt;/code>&lt;/pre></description></item><item><title>Docs: 如何实现rsync多并发同步？</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E5%85%B6%E4%BB%96/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0rsync%E5%A4%9A%E5%B9%B6%E5%8F%91%E5%90%8C%E6%AD%A5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E5%85%B6%E4%BB%96/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0rsync%E5%A4%9A%E5%B9%B6%E5%8F%91%E5%90%8C%E6%AD%A5/</guid><description>
&lt;p>&lt;strong>前言&lt;/strong>&lt;/p>
&lt;p>工作中经常会遇到&lt;code>数据拷贝&lt;/code>或者&lt;code>数据同步&lt;/code>事情。一般情况会使用 &lt;code>rsync&lt;/code> 来做数据拷贝或者数据同步等。&lt;/p>
&lt;h2 id="问题">&lt;strong>问题&lt;/strong>&lt;/h2>
&lt;p>&lt;code>rsync&lt;/code> 不能做并发同步，特别是需要拷贝&lt;code>上T数据&lt;/code>时，rsync 一个进程拷贝有很大的瓶颈，不能把存储设备 IO 性能发挥的最好或者说把存储设备 IO 跑满。有什么方法让 &lt;code>rsync&lt;/code> 实现&lt;code>多进程同步&lt;/code>，并且自动识别目录下有多少个文件或者目录，不会出现重复性同步。&lt;/p>
&lt;h2 id="解决方法">&lt;strong>解决方法&lt;/strong>&lt;/h2>
&lt;p>下面是作者写的一个 &lt;code>shell&lt;/code> 脚本，实现 rsync 多进程同步。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/usr/bin/env bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Define source, target, maxdepth and cd to source&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>source&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/tmp/tmp_data&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>target&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/tmp/tmp_data2&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>depth&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>source&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Set the maximum number of concurrent rsync threads&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>maxthreads&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># How long to wait before checking the number of rsync threads again&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sleeptime&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Find all folders in the source directory within the maxdepth level&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>find . -maxdepth &lt;span style="color:#e6db74">${&lt;/span>depth&lt;span style="color:#e6db74">}&lt;/span> -type d | &lt;span style="color:#66d9ef">while&lt;/span> read dir
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Make sure to ignore the parent folder&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[&lt;/span> &lt;span style="color:#e6db74">`&lt;/span>echo &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>dir&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> | awk -F&lt;span style="color:#e6db74">&amp;#39;/&amp;#39;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;{print NF}&amp;#39;&lt;/span>&lt;span style="color:#e6db74">`&lt;/span> -gt &lt;span style="color:#e6db74">${&lt;/span>depth&lt;span style="color:#e6db74">}&lt;/span> &lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Strip leading dot slash&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> subfolder&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>echo &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>dir&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> | sed &lt;span style="color:#e6db74">&amp;#39;s@^\./@@g&amp;#39;&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[&lt;/span> ! -d &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>target&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>subfolder&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Create destination folder&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mkdir -p &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>target&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>subfolder&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Make sure the number of rsync threads running is below the threshold&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> &lt;span style="color:#f92672">[&lt;/span> &lt;span style="color:#e6db74">`&lt;/span>ps -ef | grep -w &lt;span style="color:#f92672">[&lt;/span>r&lt;span style="color:#f92672">]&lt;/span>sync | awk &lt;span style="color:#e6db74">&amp;#39;{print $NF}&amp;#39;&lt;/span> | sort -nr | uniq | wc -l&lt;span style="color:#e6db74">`&lt;/span> -ge &lt;span style="color:#e6db74">${&lt;/span>maxthreads&lt;span style="color:#e6db74">}&lt;/span> &lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echo &lt;span style="color:#e6db74">&amp;#34;Sleeping &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>sleeptime&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> seconds&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sleep &lt;span style="color:#e6db74">${&lt;/span>sleeptime&lt;span style="color:#e6db74">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">done&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Run rsync in background for the current subfolder and move one to the next one&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> nohup rsync -avP &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>source&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>subfolder&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>target&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>subfolder&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/&amp;#34;&lt;/span> &amp;lt;/dev/null &amp;gt;/dev/null 2&amp;gt;&amp;amp;&lt;span style="color:#ae81ff">1&lt;/span> &amp;amp;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">done&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Find all files above the maxdepth level and rsync them as well&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>find . -maxdepth &lt;span style="color:#e6db74">${&lt;/span>depth&lt;span style="color:#e6db74">}&lt;/span> -type f -print0 | rsync -avP --files-from&lt;span style="color:#f92672">=&lt;/span>- --from0 ./ &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>target&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: 预读失效与缓存污染</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E5%85%B6%E4%BB%96/%E9%A2%84%E8%AF%BB%E5%A4%B1%E6%95%88%E4%B8%8E%E7%BC%93%E5%AD%98%E6%B1%A1%E6%9F%93/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E5%85%B6%E4%BB%96/%E9%A2%84%E8%AF%BB%E5%A4%B1%E6%95%88%E4%B8%8E%E7%BC%93%E5%AD%98%E6%B1%A1%E6%9F%93/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/AvxPwQYi78nyfsALgzYNDQ">公众号-小林 coding，说两个问题&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>大家好，我是小林。&lt;/p>
&lt;p>上周群里看到有位小伙伴面试时，被问到这两个问题：
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/pcu5i5/1662080122204-7ddd39fe-0f7f-4fc0-b774-9864aef119bb.png" alt="">
咋一看，以为是在问操作系统的问题，其实这两个题目都是在问&lt;strong>如何改进 LRU 算法&lt;/strong>。&lt;/p>
&lt;p>因为传统的 LRU 算法存在这两个问题：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>「预读失效」导致缓存命中率下降（对应第一个问题）&lt;/strong>&lt;/li>
&lt;li>&lt;strong>「缓存污染」导致缓存命中率下降（对应第二个问题）&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>Redis 的缓存淘汰算法则是通过&lt;strong>实现 LFU 算法&lt;/strong>来避免「缓存污染」而导致缓存命中率下降的问题（Redis 没有预读机制）。&lt;/p>
&lt;p>MySQL 和 Linux 操作系统是通过&lt;strong>改进 LRU 算法&lt;/strong>来避免「预读失效和缓存污染」而导致缓存命中率下降的问题。&lt;/p>
&lt;p>这次，就重点讲讲 &lt;strong>MySQL 和 Linux 操作系统是如何改进 LRU 算法的？&lt;/strong>&lt;/p>
&lt;p>好了，开始发车，坐稳了！&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/pcu5i5/1662080122112-ad4b79d2-f700-47f1-9ffc-f15cdec8c346.png" alt="">&lt;/p>
&lt;h2 id="linux-和-mysql-的缓存">Linux 和 MySQL 的缓存&lt;/h2>
&lt;h3 id="linux-操作系统的缓存">Linux 操作系统的缓存&lt;/h3>
&lt;p>在应用程序读取文件的数据的时候，Linux 操作系统是会对读取的文件数据进行缓存的，会缓存在文件系统中的 &lt;strong>Page Cache&lt;/strong>（如下图中的页缓存）。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/pcu5i5/1662080122127-8c1f4801-621e-42e9-bc85-0b6c3a9bb340.png" alt="">&lt;/p>
&lt;p>Page Cache 属于内存空间里的数据，由于内存访问比磁盘访问快很多，在下一次访问相同的数据就不需要通过磁盘 I/O 了，命中缓存就直接返回数据即可。&lt;/p>
&lt;p>因此，Page Cache 起到了加速访问数据的作用。&lt;/p>
&lt;h3 id="mysql-的缓存">MySQL 的缓存&lt;/h3>
&lt;p>MySQL 的数据是存储在磁盘里的，为了提升数据库的读写性能，Innodb 存储引擎设计了一个&lt;strong>缓冲池&lt;/strong>（Buffer Pool），Buffer Pool 属于内存空间里的数据。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/pcu5i5/1662080122190-4d475079-36d4-456d-ac2d-7e09e4f5ea28.png" alt="">&lt;/p>
&lt;p>有了缓冲池后：&lt;/p>
&lt;ul>
&lt;li>当读取数据时，如果数据存在于 Buffer Pool 中，客户端就会直接读取 Buffer Pool 中的数据，否则再去磁盘中读取。&lt;/li>
&lt;li>当修改数据时，首先是修改 Buffer Pool 中数据所在的页，然后将其页设置为脏页，最后由后台线程将脏页写入到磁盘。&lt;/li>
&lt;/ul>
&lt;h2 id="传统-lru-是如何管理内存数据的">传统 LRU 是如何管理内存数据的？&lt;/h2>
&lt;p>Linux 的 Page Cache 和  MySQL 的 Buffer Pool 的大小是有限的，并不能无限的缓存数据，对于一些频繁访问的数据我们希望可以一直留在内存中，而一些很少访问的数据希望可以在某些时机可以淘汰掉，从而保证内存不会因为满了而导致无法再缓存新的数据，同时还能保证常用数据留在内存中。&lt;/p>
&lt;p>要实现这个，最容易想到的就是 LRU（Least recently used）算法。&lt;/p>
&lt;p>LRU 算法一般是用「链表」作为数据结构来实现的，链表头部的数据是最近使用的，而链表末尾的数据是最久没被使用的。那么，当空间不够了，就淘汰最久没被使用的节点，也就是链表末尾的数据，从而腾出内存空间。&lt;/p>
&lt;p>因为 Linux 的 Page Cache 和  MySQL 的 Buffer Pool 缓存的&lt;strong>基本数据单位都是页（Page）单位&lt;/strong>，所以&lt;strong>后续以「页」名称代替「数据」&lt;/strong>。&lt;/p>
&lt;p>传统的 LRU 算法的实现思路是这样的：&lt;/p>
&lt;ul>
&lt;li>当访问的页在内存里，就直接把该页对应的 LRU 链表节点移动到链表的头部。&lt;/li>
&lt;li>当访问的页不在内存里，除了要把该页放入到 LRU 链表的头部，还要淘汰 LRU 链表末尾的页。&lt;/li>
&lt;/ul>
&lt;p>比如下图，假设 LRU 链表长度为 5，LRU 链表从左到右有编号为 1，2，3，4，5 的页。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/pcu5i5/1662080122127-db4c2eee-db11-4b76-bead-31670d3ebc3b.png" alt="">&lt;/p>
&lt;p>如果访问了 3 号页，因为 3 号页已经在内存了，所以把 3 号页移动到链表头部即可，表示最近被访问了。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/pcu5i5/1662080122827-4a55a273-d5ee-44cb-815f-2f50965fa7b0.png" alt="">&lt;/p>
&lt;p>而如果接下来，访问了 8 号页，因为 8 号页不在内存里，且 LRU 链表长度为 5，所以必须要淘汰数据，以腾出内存空间来缓存 8 号页，于是就会淘汰末尾的 5 号页，然后再将 8 号页加入到头部。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/pcu5i5/1662080122765-2cfe3d24-e674-4a56-a020-3743ae118ef4.png" alt="">&lt;/p>
&lt;p>传统的 LRU 算法并没有被 Linux 和 MySQL 使用，因为传统的 LRU 算法无法避免下面这两个问题：&lt;/p>
&lt;ul>
&lt;li>预读失效导致缓存命中率下降；&lt;/li>
&lt;li>缓存污染导致缓存命中率下降；&lt;/li>
&lt;/ul>
&lt;h2 id="预读失效怎么办">预读失效，怎么办？&lt;/h2>
&lt;h3 id="什么是预读机制">什么是预读机制？&lt;/h3>
&lt;p>Linux 操作系统为基于 Page Cache 的读缓存机制提供&lt;strong>预读机制&lt;/strong>，一个例子是：&lt;/p>
&lt;ul>
&lt;li>应用程序只想读取磁盘上文件 A 的 offset 为 0-3KB 范围内的数据，由于磁盘的基本读写单位为 block（4KB），于是操作系统至少会读 0-4KB 的内容，这恰好可以在一个 page 中装下。&lt;/li>
&lt;li>但是操作系统出于空间局部性原理（靠近当前被访问数据的数据，在未来很大概率会被访问到），会选择将磁盘块 offset [4KB,8KB)、[8KB,12KB) 以及 [12KB,16KB) 都加载到内存，于是额外在内存中申请了 3 个 page；&lt;/li>
&lt;/ul>
&lt;p>下图代表了操作系统的预读机制：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/pcu5i5/1662080122821-412f5637-8a47-43b3-8e43-ce6ef9b76f41.png" alt="">&lt;/p>
&lt;p>上图中，应用程序利用 read 系统调动读取 4KB 数据，实际上内核使用预读机制（ReadaHead） 机制完成了 16KB 数据的读取，也就是通过一次磁盘顺序读将多个 Page 数据装入 Page Cache。&lt;/p>
&lt;p>这样下次读取 4KB 数据后面的数据的时候，就不用从磁盘读取了，直接在 Page Cache 即可命中数据。因此，预读机制带来的好处就是&lt;strong>减少了 磁盘 I/O 次数，提高系统磁盘 I/O 吞吐量&lt;/strong>。&lt;/p>
&lt;p>MySQL Innodb 存储引擎的 Buffer Pool 也有类似的预读机制，MySQL 从磁盘加载页时，会提前把它相邻的页一并加载进来，目的是为了减少磁盘 IO。&lt;/p>
&lt;h3 id="预读失效会带来什么问题">预读失效会带来什么问题？&lt;/h3>
&lt;p>如果&lt;strong>这些被提前加载进来的页，并没有被访问&lt;/strong>，相当于这个预读工作是白做了，这个就是&lt;strong>预读失效&lt;/strong>。&lt;/p>
&lt;p>如果使用传统的 LRU 算法，就会把「预读页」放到 LRU 链表头部，而当内存空间不够的时候，还需要把末尾的页淘汰掉。&lt;/p>
&lt;p>如果这些「预读页」如果一直不会被访问到，就会出现一个很奇怪的问题，&lt;strong>不会被访问的预读页却占用了 LRU 链表前排的位置，而末尾淘汰的页，可能是热点数据，这样就大大降低了缓存命中率&lt;/strong> 。&lt;/p>
&lt;h3 id="如何避免预读失效造成的影响">如何避免预读失效造成的影响？&lt;/h3>
&lt;p>我们不能因为害怕预读失效，而将预读机制去掉，大部分情况下，空间局部性原理还是成立的。&lt;/p>
&lt;p>要避免预读失效带来影响，最好就是&lt;strong>让预读页停留在内存里的时间要尽可能的短，让真正被访问的页才移动到 LRU 链表的头部，从而保证真正被读取的热数据留在内存里的时间尽可能长&lt;/strong>。&lt;/p>
&lt;p>那到底怎么才能避免呢？&lt;/p>
&lt;p>Linux 操作系统和 MySQL Innodb 通过改进传统 LRU 链表来避免预读失效带来的影响，具体的改进分别如下：&lt;/p>
&lt;ul>
&lt;li>Linux 操作系统实现两个了 LRU 链表：&lt;strong>活跃 LRU 链表（active_list）和非活跃 LRU 链表（inactive_list）&lt;/strong>；&lt;/li>
&lt;li>MySQL 的 Innodb 存储引擎是在一个 LRU 链表上划分来 2 个区域：&lt;strong>young 区域 和 old 区域&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;p>这两个改进方式，设计思想都是类似的，&lt;strong>都是将数据分为了冷数据和热数据，然后分别进行 LRU 算法&lt;/strong>。不再像传统的 LRU 算法那样，所有数据都只用一个 LRU 算法管理。&lt;/p>
&lt;p>接下来，具体聊聊 Linux 和 MySQL 是如何避免预读失效带来的影响？&lt;/p>
&lt;blockquote>
&lt;p>Linux 是如何避免预读失效带来的影响？&lt;/p>
&lt;/blockquote>
&lt;p>Linux 操作系统实现两个了 LRU 链表：&lt;strong>活跃 LRU 链表（active_list）和非活跃 LRU 链表（inactive_list）&lt;/strong>。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>active list&lt;/strong> 活跃内存页链表，这里存放的是最近被访问过（活跃）的内存页；&lt;/li>
&lt;li>&lt;strong>inactive list&lt;/strong> 不活跃内存页链表，这里存放的是很少被访问（非活跃）的内存页；&lt;/li>
&lt;/ul>
&lt;p>有了这两个 LRU 链表后，&lt;strong>预读页就只需要加入到 inactive list 区域的头部，当页被真正访问的时候，才将页插入 active list 的头部&lt;/strong>。如果预读的页一直没有被访问，就会从 inactive list 移除，这样就不会影响 active list 中的热点数据。&lt;/p>
&lt;p>接下来，给大家举个例子。&lt;/p>
&lt;p>假设 active list 和 inactive list 的长度为 5，目前内存中已经有如下 10 个页：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/pcu5i5/1662080122842-b2146f19-debc-43c8-bf48-bf4d798b6fe6.png" alt="">&lt;/p>
&lt;p>现在有个编号为 20 的页被预读了，这个页只会被插入到 inactive list 的头部，而 inactive list 末尾的页（10 号）会被淘汰掉。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/pcu5i5/1662080122773-9407a204-0743-4480-8f23-40a5afbb084c.png" alt="">&lt;/p>
&lt;p>&lt;strong>即使编号为 20 的预读页一直不会被访问，它也没有占用到  active list 的位置&lt;/strong>，而且还会比 active list 中的页更早被淘汰出去。&lt;/p>
&lt;p>如果 20 号页被预读后，立刻被访问了，那么就会将它插入到  active list 的头部， active list 末尾的页（5 号），会被&lt;strong>降级&lt;/strong>到 inactive list ，作为 inactive list 的头部，这个过程并不会有数据被淘汰。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/pcu5i5/1662080123241-2f8b92c4-6be8-48d5-8467-29c700e2cadf.png" alt="">&lt;/p>
&lt;blockquote>
&lt;p>MySQL 是如何避免预读失效带来的影响？&lt;/p>
&lt;/blockquote>
&lt;p>MySQL 的 Innodb 存储引擎是在一个 LRU 链表上划分来 2 个区域，&lt;strong>young 区域 和 old 区域&lt;/strong>。&lt;/p>
&lt;p>young 区域在 LRU 链表的前半部分，old 区域则是在后半部分，这两个区域都有各自的头和尾节点，如下图：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/pcu5i5/1662080123226-e1c5fe89-9168-432a-b724-957dab16738f.png" alt="">&lt;/p>
&lt;p>young 区域与 old 区域在 LRU 链表中的占比关系并不是一比一的关系，而是是 7 比 3 （默认比例）的关系。&lt;/p>
&lt;p>&lt;strong>划分这两个区域后，预读的页就只需要加入到 old 区域的头部，当页被真正访问的时候，才将页插入 young 区域的头部&lt;/strong>。如果预读的页一直没有被访问，就会从 old 区域移除，这样就不会影响 young 区域中的热点数据。&lt;/p>
&lt;p>接下来，给大家举个例子。&lt;/p>
&lt;p>假设有一个长度为 10 的 LRU 链表，其中 young 区域占比 70 %，old 区域占比 30 %。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/pcu5i5/1662080123499-1a6a0c7e-8399-400e-8ad8-7f840ef733d9.png" alt="">&lt;/p>
&lt;p>现在有个编号为 20 的页被预读了，这个页只会被插入到 old 区域头部，而 old 区域末尾的页（10 号）会被淘汰掉。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/pcu5i5/1662080123495-f21abe79-4c97-4255-85ba-75b524309ce6.png" alt="">&lt;/p>
&lt;p>如果 20 号页一直不会被访问，它也没有占用到 young 区域的位置，而且还会比 young 区域的数据更早被淘汰出去。&lt;/p>
&lt;p>如果 20 号页被预读后，立刻被访问了，那么就会将它插入到 young 区域的头部，young 区域末尾的页（7 号），会被挤到 old 区域，作为 old 区域的头部，这个过程并不会有页被淘汰。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/pcu5i5/1662080123500-590740c9-7e67-48e3-afdd-e0fac238030f.png" alt="">&lt;/p>
&lt;h2 id="缓存污染怎么办">缓存污染，怎么办？&lt;/h2>
&lt;h3 id="什么是缓存污染">什么是缓存污染？&lt;/h3>
&lt;p>虽然 Linux （实现两个 LRU 链表）和 MySQL （划分两个区域）通过改进传统的 LRU 数据结构，避免了预读失效带来的影响。&lt;/p>
&lt;p>但是如果还是使用「只要数据被访问一次，就将数据加入到活跃 LRU 链表头部（或者 young 区域）」这种方式的话，那么&lt;strong>还存在缓存污染的问题&lt;/strong>。&lt;/p>
&lt;p>当我们在批量读取数据的时候，由于数据被访问了一次，这些大量数据都会被加入到「活跃 LRU 链表」里，然后之前缓存在活跃 LRU 链表（或者 young 区域）里的热点数据全部都被淘汰了，&lt;strong>如果这些大量的数据在很长一段时间都不会被访问的话，那么整个活跃 LRU 链表（或者 young 区域）就被污染了&lt;/strong>。&lt;/p>
&lt;h3 id="缓存污染会带来什么问题">缓存污染会带来什么问题？&lt;/h3>
&lt;p>缓存污染带来的影响就是很致命的，等这些热数据又被再次访问的时候，由于缓存未命中，就会产生大量的磁盘 I/O，系统性能就会急剧下降。&lt;/p>
&lt;p>我以 MySQL 举例子，Linux 发生缓存污染的现象也是类似。&lt;/p>
&lt;p>当某一个 SQL 语句&lt;strong>扫描了大量的数据&lt;/strong>时，在 Buffer Pool 空间比较有限的情况下，可能会将 &lt;strong>Buffer Pool 里的所有页都替换出去，导致大量热数据被淘汰了&lt;/strong>，等这些热数据又被再次访问的时候，由于缓存未命中，就会产生大量的磁盘 I/O，MySQL 性能就会急剧下降。&lt;/p>
&lt;p>注意， 缓存污染并不只是查询语句查询出了大量的数据才出现的问题，即使查询出来的结果集很小，也会造成缓存污染。&lt;/p>
&lt;p>比如，在一个数据量非常大的表，执行了这条语句：&lt;/p>
&lt;p>&lt;code>select * from t_user where name like &amp;quot;%xiaolin%&amp;quot;;&lt;/code>&lt;/p>
&lt;p>可能这个查询出来的结果就几条记录，但是由于这条语句会发生索引失效，所以这个查询过程是全表扫描的，接着会发生如下的过程：&lt;/p>
&lt;ul>
&lt;li>从磁盘读到的页加入到 LRU 链表的 old 区域头部；&lt;/li>
&lt;li>当从页里读取行记录时，也就是&lt;strong>页被访问的时候，就要将该页放到 young 区域头部&lt;/strong>；&lt;/li>
&lt;li>接下来拿行记录的 name 字段和字符串 xiaolin 进行模糊匹配，如果符合条件，就加入到结果集里；&lt;/li>
&lt;li>如此往复，直到扫描完表中的所有记录。&lt;/li>
&lt;/ul>
&lt;p>经过这一番折腾，由于这条 SQL 语句访问的页非常多，每访问一个页，都会将其加入 young 区域头部，那么&lt;strong>原本 young 区域的热点数据都会被替换掉，导致缓存命中率下降&lt;/strong>。那些在批量扫描时，而被加入到 young 区域的页，如果在很长一段时间都不会再被访问的话，那么就污染了 young 区域。&lt;/p>
&lt;p>举个例子，假设需要批量扫描：21，22，23，24，25 这五个页，这些页都会被逐一访问（读取页里的记录）。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/pcu5i5/1662080123749-0bf9bf08-f0f7-4761-b086-a5ce3bb5f7f5.png" alt="">&lt;/p>
&lt;p>在批量访问这些页的时候，会被逐一插入到 young 区域头部。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/pcu5i5/1662080123684-c1cf4908-79d6-4a81-8673-04d82bd27f62.png" alt="">&lt;/p>
&lt;p>可以看到，原本在 young 区域的 6 和 7 号页都被淘汰了，而批量扫描的页基本占满了 young 区域，如果这些页在很长一段时间都不会被访问，那么就对 young 区域造成了污染。&lt;/p>
&lt;p>如果 6 和 7 号页是热点数据，那么在被淘汰后，后续有 SQL 再次读取  6 和 7 号页时，由于缓存未命中，就要从磁盘中读取了，降低了 MySQL 的性能，这就是缓存污染带来的影响。&lt;/p>
&lt;h3 id="怎么避免缓存污染造成的影响">怎么避免缓存污染造成的影响？&lt;/h3>
&lt;p>前面的 LRU 算法只要数据被访问一次，就将数据加入活跃 LRU 链表（或者 young 区域），&lt;strong>这种 LRU 算法进入活跃 LRU 链表的门槛太低了&lt;/strong>！正式因为门槛太低，才导致在发生缓存污染的时候，很容易就将原本在活跃 LRU 链表里的热点数据淘汰了。&lt;/p>
&lt;p>所以，&lt;strong>只要我们提高进入到活跃 LRU 链表（或者 young 区域）的门槛，就能有效地保证活跃 LRU 链表（或者 young 区域）里的热点数据不会被轻易替换掉&lt;/strong>。&lt;/p>
&lt;p>Linux 操作系统和 MySQL Innodb 存储引擎分别是这样提高门槛的：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Linux 操作系统&lt;/strong>：在内存页被访问&lt;strong>第二次&lt;/strong>的时候，才将页从 inactive list 升级到 active list 里。&lt;/li>
&lt;li>&lt;strong>MySQL Innodb&lt;/strong>：在内存页被访问&lt;strong>第二次&lt;/strong>的时候，并不会马上将该页从 old 区域升级到 young 区域，因为还要进行&lt;strong>停留在 old 区域的时间判断&lt;/strong>：&lt;/li>
&lt;li>如果第二次的访问时间与第一次访问的时间&lt;strong>在 1 秒内&lt;/strong>（默认值），那么该页就&lt;strong>不会&lt;/strong>被从 old 区域升级到 young 区域；&lt;/li>
&lt;li>如果第二次的访问时间与第一次访问的时间&lt;strong>超过 1 秒&lt;/strong>，那么该页就&lt;strong>会&lt;/strong>从 old 区域升级到 young 区域；&lt;/li>
&lt;/ul>
&lt;p>提高了进入活跃 LRU 链表（或者 young 区域）的门槛后，就很好了避免缓存污染带来的影响。&lt;/p>
&lt;p>在批量读取数据时候，&lt;strong>如果这些大量数据只会被访问一次，那么它们就不会进入到活跃 LRU 链表（或者 young 区域）&lt;/strong>，也就不会把热点数据淘汰，只会待在非活跃 LRU 链表（或者 old 区域）中，后续很快也会被淘汰。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>传统的 LRU 算法法无法避免下面这两个问题：&lt;/p>
&lt;ul>
&lt;li>预读失效导致缓存命中率下降；&lt;/li>
&lt;li>缓存污染导致缓存命中率下降；&lt;/li>
&lt;/ul>
&lt;p>为了避免「预读失效」造成的影响，Linux 和 MySQL 对传统的 LRU 链表做了改进：&lt;/p>
&lt;ul>
&lt;li>Linux 操作系统实现两个了 LRU 链表：&lt;strong>活跃 LRU 链表（active list）和非活跃 LRU 链表（inactive list）&lt;/strong>。&lt;/li>
&lt;li>MySQL  Innodb 存储引擎是在一个 LRU 链表上划分来 2 个区域：&lt;strong>young 区域 和 old 区域&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;p>但是如果还是使用「只要数据被访问一次，就将数据加入到活跃 LRU 链表头部（或者 young 区域）」这种方式的话，那么&lt;strong>还存在缓存污染的问题&lt;/strong>。&lt;/p>
&lt;p>为了避免「缓存污染」造成的影响，Linux 操作系统和 MySQL Innodb 存储引擎分别提高了升级为热点数据的门槛：&lt;/p>
&lt;ul>
&lt;li>Linux 操作系统：在内存页被访问&lt;strong>第二次&lt;/strong>的时候，才将页从 inactive list 升级到 active list 里。&lt;/li>
&lt;li>MySQL Innodb：在内存页被访问&lt;strong>第二次&lt;/strong>的时候，并不会马上将该页从 old 区域升级到 young 区域，因为还要进行&lt;strong>停留在 old 区域的时间判断&lt;/strong>：&lt;/li>
&lt;li>如果第二次的访问时间与第一次访问的时间&lt;strong>在 1 秒内&lt;/strong>（默认值），那么该页就&lt;strong>不会&lt;/strong>被从 old 区域升级到 young 区域；&lt;/li>
&lt;li>如果第二次的访问时间与第一次访问的时间&lt;strong>超过 1 秒&lt;/strong>，那么该页就&lt;strong>会&lt;/strong>从 old 区域升级到 young 区域；&lt;/li>
&lt;/ul>
&lt;p>通过提高了进入 active list  （或者 young 区域）的门槛后，就很好了避免缓存污染带来的影响。&lt;/p>
&lt;p>完！&lt;/p>
&lt;p>&lt;strong>推荐阅读：&lt;/strong>&lt;/p>
&lt;p>&lt;a href="http://mp.weixin.qq.com/s?__biz=MzUxODAzNDg4NQ==&amp;amp;mid=2247507000&amp;amp;idx=1&amp;amp;sn=c045101b45dd70ec37f9b81361b09f14&amp;amp;chksm=f98d9892cefa1184ac8e278e468a8a225cd5a6f4c3dfba83ed223c5da69421041961bfb945cc&amp;amp;scene=21#wechat_redirect">小林的网站上线啦！&lt;/a>&lt;/p>
&lt;p>&lt;a href="http://mp.weixin.qq.com/s?__biz=MzUxODAzNDg4NQ==&amp;amp;mid=2247507629&amp;amp;idx=1&amp;amp;sn=ed9bc5efb0faef11c59a74e579129158&amp;amp;chksm=f98d9a07cefa1311a0d7d840e36b3d414295c0c0fcd76997df1aec320d0b04e131d4f85fa3c4&amp;amp;scene=21#wechat_redirect">答应我，这次要搞懂 Buffer Pool&lt;/a>&lt;/p>
&lt;p>&lt;a href="http://mp.weixin.qq.com/s?__biz=MzUxODAzNDg4NQ==&amp;amp;mid=2247519503&amp;amp;idx=1&amp;amp;sn=bc0b683f5e4aeae5ec6b2c2672e36f6f&amp;amp;chksm=f98dc9a5cefa40b3ca139b8b869819b4b13172f512f29e6f1cc9c9a08ca6b3b09e66078e265b&amp;amp;scene=21#wechat_redirect">美团二面：TCP 四次挥手，可以变成三次吗？&lt;/a>&lt;/p>
&lt;p>&lt;a href="http://mp.weixin.qq.com/s?__biz=MzUxODAzNDg4NQ==&amp;amp;mid=2247519129&amp;amp;idx=1&amp;amp;sn=d8d1781d18962a4f43a2c2a44250f1cd&amp;amp;chksm=f98dcf33cefa4625d6e3131e9bc8fa5920aaa083d869c0839b70ae4644fd8a39541a70cb12fc&amp;amp;scene=21#wechat_redirect">灵魂拷问 TCP ，你要投降了吗？&lt;/a>&lt;/p></description></item></channel></rss>