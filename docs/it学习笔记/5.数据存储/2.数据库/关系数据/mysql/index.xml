<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – MySQL</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/2.%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE/mysql/</link><description>Recent content in MySQL on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/2.%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE/mysql/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: MySQL 命令行工具</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/2.%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE/mysql/mysql-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/2.%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE/mysql/mysql-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;h2 id="参考">参考：&lt;/h2>
&lt;/blockquote>
&lt;h1 id="mysql">mysql&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://dev.mysql.com/doc/refman/8.0/en/mysql.html">官方文档，MySQL 程序-客户端程序-mysql&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>mysql 是一个简单的 SQL Shell。 它支持交互和非交互使用。 交互使用时，查询结果以 ASCII 表格式显示。 非交互使用（例如，用作过滤器）时，结果以制表符分隔的格式显示。 可以使用命令选项更改输出格式。&lt;/p>
&lt;h2 id="syntax语法">Syntax(语法)&lt;/h2>
&lt;p>&lt;strong>mysql [OPTIONS] [DATABASE]&lt;/strong>
**DATABASE **# 指定连接 mysql 后要操作的数据库。若不指定，则需要在交互模式下使用 &lt;code>use&lt;/code> 指令选择数据库，否则对数据库的操作将会报 &lt;code>No database selected&lt;/code> 错误：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>mysql&amp;gt; show tables;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ERROR &lt;span style="color:#ae81ff">1046&lt;/span> &lt;span style="color:#f92672">(&lt;/span>3D000&lt;span style="color:#f92672">)&lt;/span>: No database selected
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>OPTIONS：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>**-h, &amp;ndash;host &lt;!-- raw HTML omitted --> **# 指定要连接的 mysql 主机。如果链接本机 mysql，可以省略。&lt;/li>
&lt;li>**-P, &amp;ndash;port &lt;!-- raw HTML omitted --> **# 指定要连接的 mysql 的端口。默认值：&lt;code>3306&lt;/code>&lt;/li>
&lt;li>**-u, &amp;ndash;user &lt;!-- raw HTML omitted --> **# 指定要登录 mysql 的用户名&lt;/li>
&lt;li>&lt;strong>-p, &amp;ndash;password &lt;!-- raw HTML omitted -->&lt;/strong> # 使用密码来登录。如果指定要登录 mysql 的用户密码为空，则该选项可省&lt;/li>
&lt;/ul>
&lt;h2 id="命令行模式">命令行模式&lt;/h2>
&lt;p>我们可以通过 &lt;code>mysql db_name &amp;lt;FILE.sql &amp;gt; output.tab&lt;/code> 命令直接执行写在文件中的 SQL 语句&lt;/p>
&lt;h2 id="交互模式">交互模式&lt;/h2>
&lt;h3 id="斜线命令">斜线命令&lt;/h3>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://dev.mysql.com/doc/refman/8.0/en/mysql-commands.html">官方文档，MySQL 程序-客户端程序-myslq 客户端命令&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>在 mysql 的交互模式中有一组 mysql 程序自带的命令，用以 控制输出格式、检查、获取数据信息 等等，这些命令以 &lt;code>\&lt;/code> 开头，不过也有与之相对应的字符串命令&lt;/p>
&lt;ul>
&lt;li>**\u, use &lt;!-- raw HTML omitted --> **# 选择想要操作的数据库。与 MySQL 的 SQL 中的 use 语句功能一致&lt;/li>
&lt;/ul>
&lt;h3 id="基础示例">基础示例&lt;/h3>
&lt;ul>
&lt;li>grant select,insert,update,delete,create,drop ON mysql.* TO &amp;rsquo;lichenhao&amp;rsquo;@&amp;rsquo;localhost&amp;rsquo; identified by &amp;rsquo;lichenhao&amp;rsquo;; # 为名为 mysql 的数据库创建名为 lichenhao 的用户，密码为 lichenhao，具有 select、insert、update、delete、create、drop 这些命令的执行权限。&lt;/li>
&lt;li>flush privileges; # 刷新权限。由权限账号信息是在 MYSQLD 服务启动的时候就加载到内存中的，所以你在原权限表中的任何直接修改都不会直接生效。用 flush privileges 把中表中的信息更新到内存。&lt;/li>
&lt;li>select user(); # 查看当前登录的用户。&lt;/li>
&lt;li>show databases; # 列出所有已经存在的数据库&lt;/li>
&lt;li>use mysql; # 切换当前要操作的数据库为 mysql&lt;/li>
&lt;li>show tables; # 显示当前数据库中所有的表&lt;/li>
&lt;li>show columns from db; # 显示当前数据库中名为 db 的表的属性。效果如下
&lt;ul>
&lt;li>desc test; # 与该命令效果相同&lt;/li>
&lt;li>Field # 该表中都有哪些列&lt;/li>
&lt;li>Type # 该列的数据类型&lt;/li>
&lt;li>Null # 该列是否可以插入 null&lt;/li>
&lt;li>Key # 索引类型&lt;/li>
&lt;li>Default # 该列插入空值时。默认插入什么值。&lt;/li>
&lt;li>Extra # 该列额外的参数。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;pre>&lt;code>MariaDB [mysql]&amp;gt; SHOW COLUMNS FROM db;
+-----------------------+---------------+------+-----+---------+-------+
| Field | Type | Null | Key | Default | Extra |
+-----------------------+---------------+------+-----+---------+-------+
| Host | char(60) | NO | PRI | | |
| Db | char(64) | NO | PRI | | |
| User | char(16) | NO | PRI | | |
| Select_priv | enum('N','Y') | NO | | N | |
.......
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>select Host,db from db; #显示 db 表中，Host 和 Db 列及其内容，效果如下&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;pre>&lt;code>MariaDB [mysql]&amp;gt; SELECT Host,db from db;
+-----------+---------+
| Host | db |
+-----------+---------+
| % | test |
| % | test\_% |
| localhost | mysql |
+-----------+---------+
&lt;/code>&lt;/pre>
&lt;h1 id="mysqladmin">mysqladmin&lt;/h1>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>mysqladmin -u root -p password &amp;ldquo;my_password&amp;rdquo; #修改 root 密码，密码为：my_password。如果默认密码为空，则可以不加-p。&lt;/li>
&lt;/ul></description></item><item><title>Docs: MySQL 配置文件详解</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/2.%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE/mysql/mysql-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/2.%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE/mysql/mysql-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;h2 id="参考">参考：&lt;/h2>
&lt;/blockquote>
&lt;h1 id="mycnf">my.cnf&lt;/h1>
&lt;p>[mysqld]
skip-grant-tables # 登录时跳过权限检查&lt;/p>
&lt;h1 id="default-time_zone800">设置时区
default-time_zone=&amp;rsquo;+8:00'&lt;/h1>
&lt;p>#  开启 binlog
log-bin=mysql-bin
binlog-format=Row
server-id=1
expire_logs_days=7
max_binlog_size=10m&lt;/p>
&lt;p>binlog
&lt;a href="https://dev.mysql.com/doc/refman/5.7/en/replication-howto-masterbaseconfig.html">https://dev.mysql.com/doc/refman/5.7/en/replication-howto-masterbaseconfig.html&lt;/a>&lt;/p></description></item><item><title>Docs: MySQL 批量SQL插入性能优化</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/2.%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE/mysql/mysql-%E6%89%B9%E9%87%8Fsql%E6%8F%92%E5%85%A5%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/2.%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE/mysql/mysql-%E6%89%B9%E9%87%8Fsql%E6%8F%92%E5%85%A5%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</guid><description>
&lt;p>对于一些数据量较大的系统，数据库面临的问题除了查询效率低下，还有就是数据入库时间长。特别像报表系统，每天花费在数据导入上的时间可能会长达几个小时或十几个小时之久。因此，优化数据库插入性能是很有意义的。&lt;/p>
&lt;p>经过对 MySQL InnoDB 的一些性能测试，发现一些可以提高 insert 效率的方法，供大家参考参考。&lt;/p>
&lt;h2 id="1一条-sql-语句插入多条数据">1、一条 SQL 语句插入多条数据&lt;/h2>
&lt;p>常用的插入语句如：&lt;/p>
&lt;pre>&lt;code>INSERT INTO `insert_table` (`datetime`, `uid`, `content`, `type`)
VALUES ('0', 'userid_0', 'content_0', 0);
INSERT INTO `insert_table` (`datetime`, `uid`, `content`, `type`)
VALUES ('1', 'userid_1', 'content_1', 1);
&lt;/code>&lt;/pre>
&lt;p>修改成：&lt;/p>
&lt;pre>&lt;code>INSERT INTO `insert_table` (`datetime`, `uid`, `content`, `type`)
VALUES ('0', 'userid_0', 'content_0', 0), ('1', 'userid_1', 'content_1', 1);
&lt;/code>&lt;/pre>
&lt;p>修改后的插入操作能够提高程序的插入效率。这里第二种 SQL 执行效率高的主要原因是合并后日志量（MySQL 的 binlog 和 innodb 的事务让日志）减少了，&lt;strong>降低日志刷盘的数据量和频率，从而提高效率。通过合并 SQL 语句，同时也能减少 SQL 语句解析的次数，减少网络传输的 IO&lt;/strong>。&lt;/p>
&lt;p>这里提供一些测试对比数据，分别是进行单条数据的导入与转化成一条 SQL 语句进行导入，分别测试 1 百、1 千、1 万条数据记录。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/osqpuu/1616133530263-c38130ab-121b-4b17-a60a-cfab979b341d.png" alt="">&lt;/p>
&lt;h2 id="2在事务中进行插入处理">2、在事务中进行插入处理。&lt;/h2>
&lt;p>把插入修改成：&lt;/p>
&lt;pre>&lt;code>START TRANSACTION;
INSERT INTO `insert_table` (`datetime`, `uid`, `content`, `type`)
VALUES ('0', 'userid_0', 'content_0', 0);
INSERT INTO `insert_table` (`datetime`, `uid`, `content`, `type`)
VALUES ('1', 'userid_1', 'content_1', 1);
...
COMMIT;
&lt;/code>&lt;/pre>
&lt;p>使用事务可以提高数据的插入效率，这是因为进行一个 INSERT 操作时，MySQL 内部会建立一个事务，在事务内才进行真正插入处理操作。通过使用事务可以减少创建事务的消耗，&lt;code>所有插入都在执行后才进行提交操作&lt;/code>。&lt;/p>
&lt;p>这里也提供了测试对比，分别是不使用事务与使用事务在记录数为 1 百、1 千、1 万的情况。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/osqpuu/1616133530313-c27041f7-5ee1-40ad-b700-39240dcf2a81.png" alt="">&lt;/p>
&lt;h2 id="3数据有序插入">3、数据有序插入。&lt;/h2>
&lt;p>数据有序的插入是指插入记录在主键上是有序排列，例如 datetime 是记录的主键：&lt;/p>
&lt;pre>&lt;code>INSERT INTO `insert_table` (`datetime`, `uid`, `content`, `type`)
VALUES ('1', 'userid_1', 'content_1', 1);
INSERT INTO `insert_table` (`datetime`, `uid`, `content`, `type`)
VALUES ('0', 'userid_0', 'content_0', 0);
INSERT INTO `insert_table` (`datetime`, `uid`, `content`, `type`)
VALUES ('2', 'userid_2', 'content_2',2);
&lt;/code>&lt;/pre>
&lt;p>修改成：&lt;/p>
&lt;pre>&lt;code>INSERT INTO `insert_table` (`datetime`, `uid`, `content`, `type`)
VALUES ('0', 'userid_0', 'content_0', 0);
INSERT INTO `insert_table` (`datetime`, `uid`, `content`, `type`)
VALUES ('1', 'userid_1', 'content_1', 1);
INSERT INTO `insert_table` (`datetime`, `uid`, `content`, `type`)
VALUES ('2', 'userid_2', 'content_2',2);
&lt;/code>&lt;/pre>
&lt;p>由于数据库插入时，需要维护索引数据，&lt;code>无序的记录会增大维护索引的成本&lt;/code>。我们可以参照 InnoDB 使用的 B+tree 索引，如果每次插入记录都在索引的最后面，索引的定位效率很高，并且对索引调整较小；如果插入的记录在索引中间，需要 B+tree 进行分裂合并等处理，会消耗比较多计算资源，并且插入记录的索引定位效率会下降，数据量较大时会有频繁的磁盘操作。&lt;/p>
&lt;p>下面提供随机数据与顺序数据的性能对比，分别是记录为 1 百、1 千、1 万、10 万、100 万。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/osqpuu/1616133530291-b48ef56b-2dff-401b-8ede-bf3dc7e64b61.png" alt="">&lt;/p>
&lt;p>从测试结果来看，该优化方法的性能有所提高，但是提高并不是很明显。&lt;/p>
&lt;h2 id="4性能综合测试">4、性能综合测试&lt;/h2>
&lt;p>这里提供了同时使用上面三种方法进行 INSERT 效率优化的测试。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/osqpuu/1616133530367-110c58c4-622e-41ff-8096-d1c640627053.png" alt="">&lt;/p>
&lt;p>从测试结果可以看到，合并数据+事务的方法在较小数据量时，性能提高是很明显的，数据量较大时（1 千万以上），性能会急剧下降，这是由于此时数据量超过了 innodb_buffer 的容量，每次定位索引涉及较多的磁盘读写操作，性能下降较快。而使用合并数据+事务+有序数据的方式在数据量达到千万级以上表现依旧是良好，在数据量较大时，有序数据索引定位较为方便，不需要频繁对磁盘进行读写操作，所以可以维持较高的性能。&lt;/p>
&lt;p>&lt;strong>注意事项：&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;code>SQL语句是有长度限制&lt;/code>，在进行数据合并在同一 SQL 中务必不能超过 SQL 长度限制，通过 max_allowed_packet 配置可以修改，默认是 1M，测试时修改为 8M。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>事务需要控制大小&lt;/code>，事务太大可能会影响执行的效率。MySQL 有 innodb_log_buffer_size 配置项，超过这个值会把 innodb 的数据刷到磁盘中，这时，效率会有所下降。所以比较好的做法是，在数据达到这个这个值前进行事务提交。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>参考文档：MySQL 批量 SQL 插入性能优化&lt;/p></description></item><item><title>Docs: Percona Monitoring and Management</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/2.%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE/mysql/percona-monitoring-and-management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/2.%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE/mysql/percona-monitoring-and-management/</guid><description>
&lt;p>参考：&lt;a href="https://www.percona.com/software/database-tools/percona-monitoring-and-management">官网介绍&lt;/a>，&lt;a href="https://www.percona.com/doc/percona-monitoring-and-management/2.x/index.html">官方文档&lt;/a>、&lt;a href="https://www.cnblogs.com/okchy/p/13605701.html">原文链接&lt;/a>&lt;/p>
&lt;p>分析慢查询的:&lt;a href="https://www.percona.com/blog/2020/10/07/how-to-find-query-slowdowns-using-percona-monitoring-and-management/">https://www.percona.com/blog/2020/10/07/how-to-find-query-slowdowns-using-percona-monitoring-and-management/&lt;/a>&lt;/p>
&lt;p>基于 pmm2 去排查故障的官方文档:&lt;a href="https://www.percona.com/blog/2020/07/15/mysql-query-performance-troubleshooting-resource-based-approach/">https://www.percona.com/blog/2020/07/15/mysql-query-performance-troubleshooting-resource-based-approach/&lt;/a>&lt;/p>
&lt;p>**Percona Monitoring and Management(简称 PMM) **是一个用于管理和监控 MySQL、PostgreSQL、MongoDB 和 ProxySQL 性能的开源平台。它是由 Percona 与管理数据库服务、支助和咨询领域的专家合作开发的。&lt;/p>
&lt;p>PMM 是一种免费的开源解决方案，您可以在自己的环境中运行它，以获得最大的安全性和可靠性。它为 MySQL、PostgreSQL 和 MongoDB 服务器提供了全面的基于时间的分析，以确保您的数据尽可能高效地工作。&lt;/p>
&lt;p>PMM 平台基于支持可伸缩性的客户机-服务器模型。它包括以下模块:&lt;/p>
&lt;p>PMM 客户机安装在您想要监视的每个数据库主机上。它收集服务器指标、一般系统指标和查询分析数据，以获得完整的性能概述。&lt;/p>
&lt;p>PMM 服务器是 PMM 的中心部分，它聚合收集到的数据，并在 web 界面中以表格、仪表板和图形的形式显示这些数据。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/hxu3v9/1616133512427-90c73526-d534-4d64-a402-c2c42373abb2.png" alt="">&lt;/p>
&lt;p>模块被打包以便于安装和使用。假设用户不需要了解组成每个模块的具体工具是什么，以及它们如何交互。然而，如果您想充分利用 PMM 的潜力，内部结构是重要的。&lt;/p>
&lt;p>PMM 是一种工具的集合，它被设计成可以无缝地协同工作。有些是由 Percona 开发的，有些是第三方开源工具。&lt;/p>
&lt;p>PMM Server&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/hxu3v9/1616133512441-02d3d028-1588-42fc-a8a4-4d1736674427.png" alt="">&lt;/p>
&lt;p>PMM 服务器在作为中央监视主机的机器上运行。它通过以下方式作为设备分发:&lt;/p>
&lt;p>*可用于运行容器的 Docker 映像&lt;/p>
&lt;p>*可以在 VirtualBox 或其他管理程序中运行的 OVA(打开虚拟设备)&lt;/p>
&lt;p>*您可以通过 Amazon Web 服务运行的 AMI (Amazon Machine Image)&lt;/p>
&lt;p>PMM 服务器包括以下工具:&lt;/p>
&lt;p>*查询分析(QAN)允许您在一段时间内分析 MySQL 查询性能。除客户端 QAN 代理外，还包括:&lt;/p>
&lt;p>QAN API 是存储和访问运行在 PMM 客户机上的 QAN 代理收集的查询数据的后端。&lt;/p>
&lt;p>QAN Web App 是一个可视化收集查询分析数据的 Web 应用程序。&lt;/p>
&lt;p>*Metrics Monitor 提供了对 MySQL 或 MongoDB 服务器实例至关重要的指标的历史视图。它包括以下内容:&lt;/p>
&lt;p>Prometheus 是一个第三方时间序列数据库，它连接到运行在 PMM 客户机上的出口商，并汇总出口商收集的指标。&lt;/p>
&lt;p>ClickHouse 是一个第三方的面向列的数据库，它促进了查询分析功能。有关更多信息，请参见 ClickHouse 文档。&lt;/p>
&lt;p>Grafana 是一个第三方的仪表盘和图形生成器，用于将普罗米修斯在直观的 web 界面中聚合的数据可视化。&lt;/p>
&lt;p>Percona 仪表板是由 Percona 为 Grafana 开发的一套仪表板。&lt;/p>
&lt;p>所有工具都可以从 PMM 服务器的 web 界面(登录页面)访问。&lt;/p>
&lt;p>PMM Client&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/hxu3v9/1616133512448-678fe0f9-6e67-49e3-bd57-f740c4f96042.png" alt="">&lt;/p>
&lt;p>每个 PMM 客户机收集关于一般系统和数据库性能的各种数据，并将这些数据发送到相应的 PMM 服务器。&lt;/p>
&lt;p>PMM 客户端包括以下内容:&lt;/p>
&lt;p>PMM -admin 是用于管理 PMM 客户机的命令行工具，例如，用于添加和删除您想要监视的数据库实例。&lt;/p>
&lt;p>PMM -agent 是一个客户端组件，一个最小的命令行接口，它是负责提供客户端功能的中心入口点:它进行客户端身份验证，获取存储在 PMM 服务器上的客户端配置，管理导出程序和其他代理。&lt;/p>
&lt;p>node_exporters 是一个收集一般系统指标的 Prometheus 端口。&lt;/p>
&lt;p>mysqld_exporters 是一个收集 MySQL 服务器指标的 Prometheus 端口。&lt;/p>
&lt;p>mongodb_exporters 是一个收集 MongoDB 服务器指标的 Prometheus 端口。&lt;/p>
&lt;p>postgres_端口是一个收集 PostgreSQL 性能指标的 Prometheus 端口。&lt;/p>
&lt;p>proxysql_exporters 是一个收集 ProxySQL 性能指标的 Prometheus 端口。&lt;/p>
&lt;p>为了使从 PMM 客户机到 PMM 服务器的数据传输更加安全，所有端口都能够使用 SSL/TLS 加密的连接，并且它们与 PMM 服务器的通信受到 HTTP 基本身份验证的保护。&lt;/p>
&lt;p>参考：&lt;/p>
&lt;p>端口：以下端口必须在 pmm server 和 client 之间开放;&lt;/p>
&lt;p>pmm server 需要开放 80 或 443 端口用于 pmm client 访问 pmm web。&lt;/p>
&lt;p>pmm client 端必须开放以下默认端口采集数据，可以通过 pmm-admin addc 命令进行修改。&lt;/p>
&lt;p>42000 For PMM to collect genenal system metrics.&lt;/p>
&lt;p>42001 This port is used by a service which collects query performance data and makes it available to QAN.&lt;/p>
&lt;p>42002 For PMM to collect MySQL server metrics.&lt;/p>
&lt;p>42003 For PMM to collect MongoDB server metrics.&lt;/p>
&lt;p>42004 For PMM to collect ProxySQL server metrics.&lt;/p>
&lt;h1 id="部署-pmm">部署 PMM&lt;/h1>
&lt;p>参考：官方文档&lt;/p>
&lt;p>安装步骤&lt;/p>
&lt;p>docker 部署 pmm 与 mysql 监控&lt;/p>
&lt;p>安装 docker&lt;/p>
&lt;p>yum install -y yum-utils device-mapper-persistent-data lvm2&lt;/p>
&lt;p>yum-config-manager &amp;ndash;add-repo &lt;a href="http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo&lt;/a>&lt;/p>
&lt;p>yum makecache fast&lt;/p>
&lt;p>yum -y install docker-ce&lt;/p>
&lt;p>systemctl start docker&lt;/p>
&lt;p>docker run hello-world&lt;/p>
&lt;p>PMM Server：192.168.24.90&lt;/p>
&lt;p>PMM Client：192.168.24.92&lt;/p>
&lt;p>1.Docker 安装 PMM Server&lt;/p>
&lt;p>这里使用的 Docker 标签适用于最新版本的 PMM 2(2.9.1)，但是您可以指定任何可用的标签来使用相应版本的 PMM 服务器。&lt;/p>
&lt;p>度量收集消耗磁盘空间。PMM 需要为每个被监视的数据库节点提供大约 1GB 的存储空间，数据保留时间设置为一周。(默认情况下，数据保留时间为 30 天。)要减小 Prometheus 数据库的大小，可以考虑禁用表统计信息。&lt;/p>
&lt;p>尽管一个受监控的数据库节点的最小内存量为 2 GB，但内存使用不会随着节点数量的增加而增加。例如，16GB 足够用于 20 个节点。&lt;/p>
&lt;p>#版本可自选&lt;/p>
&lt;p>docker create -v /opt/prometheus/data -v /opt/consul-data -v /var/lib/mysql -v /var/lib/grafana &amp;ndash;name pmm-data percona/pmm-server:2 /bin/true&lt;/p>
&lt;p>2.启动&lt;/p>
&lt;p>#必须开启防火墙&lt;/p>
&lt;p>docker run -d -p 80:80 -p 443:443 &amp;ndash;volumes-from pmm-data &amp;ndash;name pmm-server &amp;ndash;restart always percona/pmm-server:2&lt;/p>
&lt;p>端口默认是 80 ，如果 80 端口被占用，可改为其它端口号 比如 81&lt;/p>
&lt;p>3.查看 docker 运行状态&lt;/p>
&lt;p>docker ps -a&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/hxu3v9/1616133512459-b4a07422-0748-4be5-bbdd-db952ae5cad9.png" alt="">&lt;/p>
&lt;p>4.浏览器访问，地址一般是 http://ip 地址:端口，也可以直接输 ip 地址； 注意，一般端口默认为 80，默认用户名：admin，默认密码：admin&lt;/p>
&lt;p>例：&lt;a href="http://192.168.24.90:80">http://192.168.24.90:80&lt;/a>&lt;/p>
&lt;p>5.安装 pmm-client 客户端。&lt;/p>
&lt;p>yum install &lt;a href="https://repo.percona.com/yum/percona-release-latest.noarch.rpm">https://repo.percona.com/yum/percona-release-latest.noarch.rpm&lt;/a> -y&lt;/p>
&lt;p>yum install pmm2-client -y&lt;/p>
&lt;p>6.连接 PMM Server。&lt;/p>
&lt;p>pmm-admin config &amp;ndash;server-insecure-tls &amp;ndash;server-url=https://admin:admin@&lt;!-- raw HTML omitted -->:443&lt;/p>
&lt;p>例：pmm-admin config &amp;ndash;server-insecure-tls &amp;ndash;server-url=https://admin:admin@192.168.24.90:443&lt;/p>
&lt;p>注：PMM2 不需要像 PMM1 输入指定命令添加 Linux 主机监控&lt;/p>
&lt;p>当你使用 pmm-admin config 配置了要监控的节点时，PMM2 从那时自动开始收集 Linux 指标。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/hxu3v9/1616133512457-0d30d8f9-e92b-4ea3-b25a-2b7da2d86621.png" alt="">&lt;/p>
&lt;p>7.登陆浏览器访问主机监控数据&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/hxu3v9/1616133512459-6f938df2-c730-4504-bf71-e101ced88649.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/hxu3v9/1616133512488-8a3a80a1-199f-451b-a1ef-b8915f8d5e15.png" alt="">&lt;/p>
&lt;p>#pmm-admin 管理命令&lt;/p>
&lt;p>annotate [&lt;!-- raw HTML omitted -->] &lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>在 Grafana 图表中添加注释&lt;/p>
&lt;p>config [&lt;!-- raw HTML omitted -->] [&lt;!-- raw HTML omitted -->] [&lt;!-- raw HTML omitted -->] [&lt;!-- raw HTML omitted -->]&lt;/p>
&lt;p>配置本地 pmm-agent&lt;/p>
&lt;p>list [&lt;!-- raw HTML omitted -->]&lt;/p>
&lt;p>显示在此节点上运行的服务和代理&lt;/p>
&lt;p>status&lt;/p>
&lt;p>显示关于本地 pmm 代理的信息&lt;/p>
&lt;p>summary [&lt;!-- raw HTML omitted -->]&lt;/p>
&lt;p>获取系统数据以进行诊断&lt;/p>
&lt;p>add external &amp;ndash;listen-port=LISTEN-PORT [&lt;!-- raw HTML omitted -->]&lt;/p>
&lt;p>将外部监视添加&lt;/p>
&lt;p>add mongodb [&lt;!-- raw HTML omitted -->] [&lt;!-- raw HTML omitted -->] [&lt;!-- raw HTML omitted -->]&lt;/p>
&lt;p>监控 MongoDB&lt;/p>
&lt;p>add mysql [&lt;!-- raw HTML omitted -->] [&lt;!-- raw HTML omitted -->] [&lt;!-- raw HTML omitted -->]&lt;/p>
&lt;p>监控 MySQL&lt;/p>
&lt;p>add postgresql [&lt;!-- raw HTML omitted -->] [&lt;!-- raw HTML omitted -->] [&lt;!-- raw HTML omitted -->]&lt;/p>
&lt;p>监控 PostgreSQL&lt;/p>
&lt;p>add proxysql [&lt;!-- raw HTML omitted -->] [&lt;!-- raw HTML omitted -->] [&lt;!-- raw HTML omitted -->]&lt;/p>
&lt;p>监控 ProxySQL&lt;/p>
&lt;p>register [&lt;!-- raw HTML omitted -->] [&lt;!-- raw HTML omitted -->] [&lt;!-- raw HTML omitted -->] [&lt;!-- raw HTML omitted -->]&lt;/p>
&lt;p>注册当前节点到 PMM 服务器&lt;/p>
&lt;p>remove [&lt;!-- raw HTML omitted -->] &lt;!-- raw HTML omitted --> [&lt;!-- raw HTML omitted -->]&lt;/p>
&lt;p>从监控中删除服务&lt;/p>
&lt;p>7.添加 mysql 监控。&lt;/p>
&lt;p>MySQL 服务器添加指定权限用户&lt;/p>
&lt;p>create user pmm@&amp;rsquo;%&amp;rsquo; identified by &amp;lsquo;pmmpassword&amp;rsquo;;&lt;/p>
&lt;p>grant select,process,super,replication client on &lt;em>.&lt;/em> to &amp;lsquo;pmm&amp;rsquo;@&amp;rsquo;%&amp;rsquo;;&lt;/p>
&lt;p>grant update,delete,drop on performance_schema.* to &amp;lsquo;pmm&amp;rsquo;@&amp;rsquo;%&amp;rsquo;;&lt;/p>
&lt;p>flush privileges;&lt;/p>
&lt;p>#授权密码如报错：Your password does not satisfy the current policy requirements&lt;/p>
&lt;p>set global validate_password_policy=LOW;&lt;/p>
&lt;p>MySQL8.0 版本设置：set global validate_password.policy=LOW;&lt;/p>
&lt;p>查询分析获得从 MySQL 中获取指标数据有两种可能的来源：慢查询日志和 Performance Schema&lt;/p>
&lt;p>添加 Performance Schema 数据字典监控&lt;/p>
&lt;p>pmm-admin add mysql &amp;ndash;query-source=perfschema &amp;ndash;username=pmm &amp;ndash;password=pmmpassword ps-mysql&lt;/p>
&lt;p>添加慢日志监控&lt;/p>
&lt;p>pmm-admin add mysql &amp;ndash;query-source=slowlog &amp;ndash;username=pmm &amp;ndash;password=pmmpassword sl-mysql&lt;/p>
&lt;p>查看运行的服务&lt;/p>
&lt;p>pmm-admin list&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/hxu3v9/1616133512489-86f410ae-d99d-49a2-a505-2a9826ff1172.png" alt="">&lt;/p>
&lt;p>9.pmm 服务器页面查看&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/hxu3v9/1616133512483-5837728e-5d7e-4102-b343-9935ee58ac83.png" alt="">&lt;/p>
&lt;p>点击 Query Analytics 进入 SQL 语句分析&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/hxu3v9/1616133512502-b408704d-70af-4efe-97b1-db073b551516.png" alt="">&lt;/p>
&lt;p>10.MySQL 最佳配置&lt;/p>
&lt;p>慢日志设置&lt;/p>
&lt;p>如果你使用 Percona 分支版本，正确的慢查询日志配置将以最小的开销提供最多的信息。否则，如果支持请使用 PerformanceSchema。&lt;/p>
&lt;p>按定义，慢查询日志应该只记录慢查询。这些查询的执行时间超过了特定的阈值。这个阈值由参数 long_query_time 指定。&lt;/p>
&lt;p>在高负载的应用中，频繁快速的查询比罕见的慢速查询对性能的影响要大的多。为全面分析你的查询流量，设置 long_query_time 为 0，这样所有的查询语句都将被记录。&lt;/p>
&lt;p>然而，记录所有的查询将消耗 I/O 带宽，并导致慢查询日志增长很快。为了限制记录到慢查询日志中的查询数量，使用 Percona 分支版本中的查询采样功能。&lt;/p>
&lt;p>查询采样可能导致一些罕见的慢查询无法被记录到慢查询日志中。为了避免这种情况，使用 slow_query_long_always_write_time 参数指定哪类查询应该被忽略采样。也就是说，长时间的慢查询应该始终记录到慢查询日志中。&lt;/p>
&lt;p>Performance Schema 设置&lt;/p>
&lt;p>PMM 查询数据的默认源是慢查询日志。这在 MySQL5.1 及以后的版本中可用。从 MySQL5.6 版本（包括 Percona 分支版本 5.6 及以后版本），你可以选择从 Performance Schema 中解析查询数据，而不是慢查询日志。从 MySQL5.6.6 开始，默认启用 Performance Schema。&lt;/p>
&lt;p>Performance Schema 不像慢查询日志那样有丰富的数据，但是它具有所有关键的数据，并且通常解析很快。如果您没有使用 Percona 分支版本（支持对慢查询日志采样），Performance Schema 是更好的选择。&lt;/p>
&lt;p>启用 Performance Schema ，要将 performance_schema 参数设置为 ON:&lt;/p>
&lt;p>SHOW VARIABLES LIKE &amp;lsquo;performance_schema&amp;rsquo;;&lt;/p>
&lt;p>+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+&amp;mdash;&amp;mdash;-+&lt;/p>
&lt;p>| Variable_name | Value |&lt;/p>
&lt;p>+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+&amp;mdash;&amp;mdash;-+&lt;/p>
&lt;p>| performance_schema | ON |&lt;/p>
&lt;p>+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+&amp;mdash;&amp;mdash;-+&lt;/p>
&lt;p>如果这个参数没有设置为 ON，在 my.cnf 配置文件中添加以下内容并重启 MySQL 服务。&lt;/p>
&lt;p>[mysql]&lt;/p>
&lt;p>performance_schema=ON&lt;/p>
&lt;p>如果您使用了自定义的 Performance Schema 配置，确认 statement_digest 消费者已经启用：&lt;/p>
&lt;p>select * from setup_consumers;&lt;/p>
&lt;p>+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;+&lt;/p>
&lt;p>| NAME | ENABLED |&lt;/p>
&lt;p>+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;+&lt;/p>
&lt;p>| events_stages_current | NO |&lt;/p>
&lt;p>| events_stages_history | NO |&lt;/p>
&lt;p>| events_stages_history_long | NO |&lt;/p>
&lt;p>| events_statements_current | YES |&lt;/p>
&lt;p>| events_statements_history | YES |&lt;/p>
&lt;p>| events_statements_history_long | NO |&lt;/p>
&lt;p>| events_transactions_current | NO |&lt;/p>
&lt;p>| events_transactions_history | NO |&lt;/p>
&lt;p>| events_transactions_history_long | NO |&lt;/p>
&lt;p>| events_waits_current | NO |&lt;/p>
&lt;p>| events_waits_history | NO |&lt;/p>
&lt;p>| events_waits_history_long | NO |&lt;/p>
&lt;p>| global_instrumentation | YES |&lt;/p>
&lt;p>| thread_instrumentation | YES |&lt;/p>
&lt;p>| statements_digest | YES |&lt;/p>
&lt;p>+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;+&lt;/p>
&lt;p>15 rows in set (0.00 sec)&lt;/p>
&lt;p>重要&lt;/p>
&lt;p>Performance Schema 生产者在 MySQL5.6.6 及之后的版本中默认启用。它在 MySQL5.6 之前的版本中完全不可用。如果某些生产者没有被启用，您在 MySQLPerformanceSchemaDashboard 的 dashboard 中看不到相应的图。启用所有的生产者，在启动 MySQL 服务时设置 &amp;ndash;performance_schema_instrument 选项为 &amp;lsquo;%=on&amp;rsquo;。&lt;/p>
&lt;p>mysqld &amp;ndash;performance-schema-instrument=&amp;rsquo;%=on&amp;rsquo;&lt;/p>
&lt;p>这个选项会带来额外的负载，请小心使用。&lt;/p>
&lt;p>如果实例已经在运行，配置 QAN agent 从 Performance Schema 中收集数据：&lt;/p>
&lt;p>1.打开 PMM Query Analytics dashboard。&lt;/p>
&lt;p>2.点击 Settings 按钮。&lt;/p>
&lt;p>3.打开 Settings 部分。&lt;/p>
&lt;p>4.从收集下拉列表中选择 PerformanceSchema。&lt;/p>
&lt;p>5.点击 Apply 保存更改。&lt;/p>
&lt;p>如果您使用 pmm-admin 工具添加一个新的监控实例，使用 &amp;ndash;query-sourceperfschema 选项：&lt;/p>
&lt;p>使用 root 用户或者 sudo 命令执行以下命令&lt;/p>
&lt;p>pmm-admin add mysql &amp;ndash;username=pmm &amp;ndash;password=pmmpassword &amp;ndash;query-source=&amp;lsquo;perfschema&amp;rsquo; ps-mysql 127.0.0.1:3306&lt;/p>
&lt;p>更多信息，请执行 pmm-admin add mysql&amp;ndash;help。&lt;/p>
&lt;p>MySQL InnoDB 指标&lt;/p>
&lt;p>为图形收集指标和统计信息会增加开销。您可以使用收集和绘制低开销的指标，在故障排除时启用高开销的指标。&lt;/p>
&lt;p>InnoDB 指标提供了有关 InnoDB 操作的详细信息。尽管您可以选择捕获指定的计数器，但是即使始终启用它们，它们的开销也很低。启用所有的 InnoDB 指标，设置全局参数 innodb_monitor_enable 为 all:&lt;/p>
&lt;p>SET GLOBAL innodb_monitor_enable&lt;/p>
&lt;p>Percona 分支版本的特殊设置&lt;/p>
&lt;p>默认情况下，并非所有 Metrics Monitor 的 dashboard 都可以用于所有 MySQL 分支和配置：Oracle 版，Percona 版或者 MariaDB。一些图形适用于 Percona 版本和专有的插件和额外的配置。&lt;/p>
&lt;p>MySQL 用户统计信息（userstat）&lt;/p>
&lt;p>用户统计信息是 Percona 分支版本和 MariaDB 分支版本的功能。它提供了用户活动、单个表和索引访问的信息。在某些情况下，收集用户统计信息可能会带来高昂的开销，所以请谨慎使用此功能。&lt;/p>
&lt;p>启用收集用户统计信息，设置 userstat 参数为 1。&lt;/p>
&lt;p>查询相应时间插件&lt;/p>
&lt;p>查询响应时间分布是 Percona 分支版的可用功能。它提供了不同查询组的查询响应时间变化的信息，通常可以在导致严重问题之前发现性能问题。&lt;/p>
&lt;p>启用收集查询响应时间：&lt;/p>
&lt;p>1.安装 QUERY_RESPONSE_TIME 插件 mysql&amp;gt;INSTALL PLUGIN QUERY_RESPONSE_TIME_AUDIT SONAME&amp;rsquo;query_response_time.so&amp;rsquo;;mysql&amp;gt;INSTALL PLUGIN QUERY_RESPONSE_TIME SONAME&amp;rsquo;query_response_time.so&amp;rsquo;;mysql&amp;gt;INSTALL PLUGIN QUERY_RESPONSE_TIME_READ SONAME&amp;rsquo;query_response_time.so&amp;rsquo;;mysql&amp;gt;INSTALL PLUGIN QUERY_RESPONSE_TIME_WRITE SONAME&amp;rsquo;query_response_time.so&amp;rsquo;;&lt;/p>
&lt;p>2.设置全局参数 query_response_time_stats 为 ON。 mysql&amp;gt;SET GLOBAL query_response_time_stats=ON;&lt;/p>
&lt;p>相关信息：Percona 分支版官方文档&lt;/p>
&lt;p>query_response_time_stats: &lt;a href="https://www.percona.com/doc/percona-server/5.7/diagnostics/responsetimedistribution.html#queryresponsetime_stats">https://www.percona.com/doc/percona-server/5.7/diagnostics/responsetimedistribution.html#queryresponsetime_stats&lt;/a>&lt;/p>
&lt;p>Response time 介绍: &lt;a href="https://www.percona.com/doc/percona-server/5.7/diagnostics/responsetimedistribution.html#installing-the-plugins">https://www.percona.com/doc/percona-server/5.7/diagnostics/responsetimedistribution.html#installing-the-plugins&lt;/a>&lt;/p>
&lt;p>logslowrate_limit&lt;/p>
&lt;p>log_slow_rate_limit 参数定义了慢查询日志记录查询的比例。一个好的经验是每秒记录 100 个查询。例如如果您的 Percona 实例 QPS 为 10000，您应该设 log_slow_rate_limit 为 100,这样慢日志会记录每 100 个查询。&lt;/p>
&lt;p>注意&lt;/p>
&lt;p>当使用查询采样时，设置 log_slow_rate_type 为 query，以便它应用的是查询而不是会话。最好设置 log_slow_verbosity 为 full，以便在慢查询日志中记录每个记录的查询语句的最大的信息量。&lt;/p>
&lt;p>logslowverbosity&lt;/p>
&lt;ul>
&lt;li>log_slow_verbosity 参数指定了慢查询日志中包含多少信息。最好设置 log_slow_verbosity 为 full，以便存储有关每个记录的查询语句的最大信息量。&lt;/li>
&lt;/ul>
&lt;p>slowqueryloguseglobal_control&lt;/p>
&lt;p>默认情况下，慢查询日志只适用于新会话。如果希望调整慢查询日志设置并将这些设置应用于现有连接，请将 slow_query_log_use_global_control 设置为 all。&lt;/p>
&lt;p>为 PMM 配置 MySQL8.0&lt;/p>
&lt;p>MySQL8（在 8.0.4 版本中）改变了对客户端身份验证的方式。 default_authentication_pluging 参数设置为 caching_sha2_password。默认值的改变意味着 MySQL 的驱动需要支持 SHA-256 身份验证。另外，在使用 caching_sha2_password 时，必须对 MySQL8 的加密通道进行加密。&lt;/p>
&lt;p>PMM 使用的 MySQL 驱动还不支持 SHA-256 身份验证。&lt;/p>
&lt;p>为支持当前 MySQL 的版本，PMM 需要设置专有的 MySQL 用户。该 MySQL 用户应该使用 mysql_native_password 插件。虽然 MySQL 被配置支持 SSL 客户端，但是到 MySQL 服务器的连接没有加密。&lt;/p>
&lt;p>有两种解决方法监控 MySQL8.0.4 及以上版本&lt;/p>
&lt;p>1.更改你打算用于 PMM 的 MySQL 用户&lt;/p>
&lt;p>2.改变 MySQL 的全局配置&lt;/p>
&lt;p>更改 MySQL 用户&lt;/p>
&lt;p>假设你已经创建了你打算用于 PMM 的 MySQL 用户，请使用以下方法更改：&lt;/p>
&lt;p>然后，将此用户传递给 pmm-admin add 作为 &amp;ndash;username 的参数值&lt;/p>
&lt;p>这是首选的方法，因为这只会降低一个用户的安全性。&lt;/p>
&lt;p>更改全局 MySQL 的配置&lt;/p>
&lt;p>一种不太安全的方法是在添加监控前将 default_authentication_plugin 设置为 mysql_native_password。然后，重启 MySQL 服务，应用这个更改。&lt;/p></description></item></channel></rss>