<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – MySQL</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/2.%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE/mysql/</link><description>Recent content in MySQL on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/2.%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE/mysql/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: MySQL</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/2.%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE/mysql/mysql/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/2.%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE/mysql/mysql/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.mysql.com/">官网&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>MySQL 的社区版本 MariaDB ，使用安装 MySQL 的 时候，会自动安装 MariaDB 。同时安装 mariadb-server ，即可开始使用了&lt;/p>
&lt;h1 id="mysql-部署">MySQL 部署&lt;/h1>
&lt;h2 id="docker-启动-mysql">docker 启动 MySQL&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>mkdir -p /opt/mysql/config
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mkdir -p /opt/mysql/data
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker run -d --name mysql --restart always &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>--network host &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>-v /opt/mysql/data:/var/lib/mysql
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-v /opt/mysql/config:/etc/mysql/conf.d
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-e MYSQL_ROOT_PASSWORD&lt;span style="color:#f92672">=&lt;/span>mysql &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>mysql:8
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>对于 5.7+ 版本，推荐设置 SQL Mode，去掉默认的 ONLY_FULL_GROUP_BY。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>tee /opt/mysql/config/mysql.cnf &amp;gt; /dev/null &lt;span style="color:#e6db74">&amp;lt;&amp;lt;EOF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">[mysqld]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果不去掉这个模式，当我们使用 &lt;code>group by&lt;/code> 时，&lt;code>select&lt;/code> 中选择的列如果不在 group by 中，将会报错：
&lt;code>ERROR 1055 (42000): Expression #2 of SELECT list is not in GROUP BY clause and contains nonaggregated column 'kalacloud.user_id' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by&lt;/code>
如果想解决该错误，除了修改 SQL 模式外，还可以使用 &lt;code>ANY_VALUE()&lt;/code> 函数处理每一个 select 选中的列但是没有参与 group by 分组的字段。详见：&lt;a href="https://dev.mysql.com/doc/refman/5.7/en/group-by-handling.html">官方文档，函数和运算符-聚合函数-MySQL 对 GROUP BY 的处理&lt;/a>&lt;/p>
&lt;h2 id="kubernetes-中部署-mysql">Kubernetes 中部署 MySQL&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/C0EYTBJ7sLw823-qE5TjTA">阳明公众号&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="mysql-关联文件与配置">MySQL 关联文件与配置&lt;/h1>
&lt;p>&lt;strong>/etc/my.cnf&lt;/strong># MariaDB 基础配置文件
&lt;strong>/var/lib/myql/*&lt;/strong> # 数据存储路径&lt;/p>
&lt;h1 id="mysql-数据类型">MySQL 数据类型&lt;/h1>
&lt;p>MySQL 中定义数据字段的类型对你数据库的优化是非常重要的。
MySQL 支持多种类型，大致可以分为三类：数值、日期/时间和字符串(字符)类型。&lt;/p>
&lt;h2 id="数值类型">数值类型&lt;/h2>
&lt;p>MySQL 支持所有标准 SQL 数值数据类型。&lt;/p>
&lt;p>这些类型包括严格数值数据类型(INTEGER、SMALLINT、DECIMAL 和 NUMERIC)，以及近似数值数据类型(FLOAT、REAL 和 DOUBLE PRECISION)。&lt;/p>
&lt;p>关键字 INT 是 INTEGER 的同义词，关键字 DEC 是 DECIMAL 的同义词。&lt;/p>
&lt;p>BIT 数据类型保存位字段值，并且支持 MyISAM、MEMORY、InnoDB 和 BDB 表。&lt;/p>
&lt;p>作为 SQL 标准的扩展，MySQL 也支持整数类型 TINYINT、MEDIUMINT 和 BIGINT。下面的表显示了需要的每个整数类型的存储和范围。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>类型&lt;/th>
&lt;th>大小&lt;/th>
&lt;th>范围（有符号）&lt;/th>
&lt;th>范围（无符号）&lt;/th>
&lt;th>用途&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>TINYINT&lt;/td>
&lt;td>1 byte&lt;/td>
&lt;td>(-128，127)&lt;/td>
&lt;td>(0，255)&lt;/td>
&lt;td>小整数值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>SMALLINT&lt;/td>
&lt;td>2 bytes&lt;/td>
&lt;td>(-32 768，32 767)&lt;/td>
&lt;td>(0，65 535)&lt;/td>
&lt;td>大整数值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>MEDIUMINT&lt;/td>
&lt;td>3 bytes&lt;/td>
&lt;td>(-8 388 608，8 388 607)&lt;/td>
&lt;td>(0，16 777 215)&lt;/td>
&lt;td>大整数值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>INT 或 INTEGER&lt;/td>
&lt;td>4 bytes&lt;/td>
&lt;td>(-2 147 483 648，2 147 483 647)&lt;/td>
&lt;td>(0，4 294 967 295)&lt;/td>
&lt;td>大整数值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>BIGINT&lt;/td>
&lt;td>8 bytes&lt;/td>
&lt;td>(-9,223,372,036,854,775,808，9 223 372 036 854 775 807)&lt;/td>
&lt;td>(0，18 446 744 073 709 551 615)&lt;/td>
&lt;td>极大整数值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>FLOAT&lt;/td>
&lt;td>4 bytes&lt;/td>
&lt;td>(-3.402 823 466 E+38，-1.175 494 351 E-38)，0，(1.175 494 351 E-38，3.402 823 466 351 E+38)&lt;/td>
&lt;td>0，(1.175 494 351 E-38，3.402 823 466 E+38)&lt;/td>
&lt;td>单精度&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>浮点数值&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>DOUBLE&lt;/td>
&lt;td>8 bytes&lt;/td>
&lt;td>(-1.797 693 134 862 315 7 E+308，-2.225 073 858 507 201 4 E-308)，0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)&lt;/td>
&lt;td>0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)&lt;/td>
&lt;td>双精度&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>浮点数值&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>DECIMAL&lt;/td>
&lt;td>对 DECIMAL(M,D) ，如果 M&amp;gt;D，为 M+2 否则为 D+2&lt;/td>
&lt;td>依赖于 M 和 D 的值&lt;/td>
&lt;td>依赖于 M 和 D 的值&lt;/td>
&lt;td>小数值&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="日期和时间类型">日期和时间类型&lt;/h2>
&lt;p>表示时间值的日期和时间类型为 DATETIME、DATE、TIMESTAMP、TIME 和 YEAR。&lt;/p>
&lt;p>每个时间类型有一个有效值范围和一个&amp;quot;零&amp;quot;值，当指定不合法的 MySQL 不能表示的值时使用&amp;quot;零&amp;quot;值。&lt;/p>
&lt;p>TIMESTAMP 类型有专有的自动更新特性，将在后面描述。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>类型&lt;/th>
&lt;th>大小( bytes)&lt;/th>
&lt;th>范围&lt;/th>
&lt;th>格式&lt;/th>
&lt;th>用途&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>DATE&lt;/td>
&lt;td>3&lt;/td>
&lt;td>1000-01-01/9999-12-31&lt;/td>
&lt;td>YYYY-MM-DD&lt;/td>
&lt;td>日期值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>TIME&lt;/td>
&lt;td>3&lt;/td>
&lt;td>&amp;lsquo;-838:59:59&amp;rsquo;/&amp;lsquo;838:59:59&amp;rsquo;&lt;/td>
&lt;td>HH:MM:SS&lt;/td>
&lt;td>时间值或持续时间&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>YEAR&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1901/2155&lt;/td>
&lt;td>YYYY&lt;/td>
&lt;td>年份值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>DATETIME&lt;/td>
&lt;td>8&lt;/td>
&lt;td>1000-01-01 00:00:00/9999-12-31 23:59:59&lt;/td>
&lt;td>YYYY-MM-DD HH:MM:SS&lt;/td>
&lt;td>混合日期和时间值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>TIMESTAMP&lt;/td>
&lt;td>4&lt;/td>
&lt;td>1970-01-01 00:00:00/2038&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>结束时间是第 2147483647 秒，北京时间 2038-1-19 11:14:07，格林尼治时间 2038 年 1 月 19 日 凌晨 03:14:07&lt;/td>
&lt;td>YYYYMMDD HHMMSS&lt;/td>
&lt;td>混合日期和时间值，时间戳&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="字符串类型">字符串类型&lt;/h2>
&lt;p>字符串类型指 CHAR、VARCHAR、BINARY、VARBINARY、BLOB、TEXT、ENUM 和 SET。该节描述了这些类型如何工作以及如何在查询中使用这些类型。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>类型&lt;/th>
&lt;th>大小&lt;/th>
&lt;th>用途&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>CHAR&lt;/td>
&lt;td>0-255 bytes&lt;/td>
&lt;td>定长字符串&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>VARCHAR&lt;/td>
&lt;td>0-65535 bytes&lt;/td>
&lt;td>变长字符串&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>TINYBLOB&lt;/td>
&lt;td>0-255 bytes&lt;/td>
&lt;td>不超过 255 个字符的二进制字符串&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>TINYTEXT&lt;/td>
&lt;td>0-255 bytes&lt;/td>
&lt;td>短文本字符串&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>BLOB&lt;/td>
&lt;td>0-65 535 bytes&lt;/td>
&lt;td>二进制形式的长文本数据&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>TEXT&lt;/td>
&lt;td>0-65 535 bytes&lt;/td>
&lt;td>长文本数据&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>MEDIUMBLOB&lt;/td>
&lt;td>0-16 777 215 bytes&lt;/td>
&lt;td>二进制形式的中等长度文本数据&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>MEDIUMTEXT&lt;/td>
&lt;td>0-16 777 215 bytes&lt;/td>
&lt;td>中等长度文本数据&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>LONGBLOB&lt;/td>
&lt;td>0-4 294 967 295 bytes&lt;/td>
&lt;td>二进制形式的极大文本数据&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>LONGTEXT&lt;/td>
&lt;td>0-4 294 967 295 bytes&lt;/td>
&lt;td>极大文本数据&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>注意：char(n) 和 varchar(n) 中括号中 n 代表字符的个数，并不代表字节个数，比如 CHAR(30) 就可以存储 30 个字符。&lt;/p>
&lt;p>CHAR 和 VARCHAR 类型类似，但它们保存和检索的方式不同。它们的最大长度和是否尾部空格被保留等方面也不同。在存储或检索过程中不进行大小写转换。&lt;/p>
&lt;p>BINARY 和 VARBINARY 类似于 CHAR 和 VARCHAR，不同的是它们包含二进制字符串而不要非二进制字符串。也就是说，它们包含字节字符串而不是字符字符串。这说明它们没有字符集，并且排序和比较基于列值字节的数值值。&lt;/p>
&lt;p>BLOB 是一个二进制大对象，可以容纳可变数量的数据。有 4 种 BLOB 类型：TINYBLOB、BLOB、MEDIUMBLOB 和 LONGBLOB。它们区别在于可容纳存储范围不同。&lt;/p>
&lt;p>有 4 种 TEXT 类型：TINYTEXT、TEXT、MEDIUMTEXT 和 LONGTEXT。对应的这 4 种 BLOB 类型，可存储的最大长度不同，可根据实际情况选择。&lt;/p>
&lt;h1 id="mysql-命令行工具">mysql 命令行工具&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://dev.mysql.com/doc/refman/8.0/en/mysql.html">官方文档，MySQL 程序-客户端程序-mysql&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>mysql 是一个简单的 SQL Shell。 它支持交互和非交互使用。 交互使用时，查询结果以 ASCII 表格式显示。 非交互使用（例如，用作过滤器）时，结果以制表符分隔的格式显示。 可以使用命令选项更改输出格式。&lt;/p>
&lt;h2 id="syntax语法">Syntax(语法)&lt;/h2>
&lt;p>&lt;strong>mysql [OPTIONS] [DATABASE]&lt;/strong>
&lt;strong>DATABASE&lt;/strong># 指定连接 mysql 后要操作的数据库。若不指定，则需要在交互模式下使用 &lt;code>use&lt;/code> 指令选择数据库，否则对数据库的操作将会报 &lt;code>No database selected&lt;/code> 错误：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>mysql&amp;gt; show tables;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ERROR &lt;span style="color:#ae81ff">1046&lt;/span> &lt;span style="color:#f92672">(&lt;/span>3D000&lt;span style="color:#f92672">)&lt;/span>: No database selected
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>OPTIONS：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-h, &amp;ndash;host &lt;!-- raw HTML omitted -->&lt;/strong># 指定要连接的 mysql 主机。如果链接本机 mysql，可以省略。&lt;/li>
&lt;li>&lt;strong>-P, &amp;ndash;port &lt;!-- raw HTML omitted -->&lt;/strong># 指定要连接的 mysql 的端口。默认值：&lt;code>3306&lt;/code>&lt;/li>
&lt;li>&lt;strong>-u, &amp;ndash;user &lt;!-- raw HTML omitted -->&lt;/strong># 指定要登录 mysql 的用户名&lt;/li>
&lt;li>&lt;strong>-p, &amp;ndash;password &lt;!-- raw HTML omitted -->&lt;/strong> # 使用密码来登录。如果指定要登录 mysql 的用户密码为空，则该选项可省&lt;/li>
&lt;/ul>
&lt;h2 id="命令行模式">命令行模式&lt;/h2>
&lt;p>略&lt;/p>
&lt;h2 id="交互模式">交互模式&lt;/h2>
&lt;h3 id="斜线命令">斜线命令&lt;/h3>
&lt;p>在 mysql 的交互模式中有一组 mysql 程序自带的命令，用以 控制输出格式、检查、获取数据信息 等等，这些命令以 &lt;code>\&lt;/code> 开头，不过也有与之相对应的字符串命令&lt;/p>
&lt;ul>
&lt;li>&lt;strong>\u, use &lt;!-- raw HTML omitted -->&lt;/strong># 选择想要操作的数据库&lt;/li>
&lt;/ul>
&lt;h3 id="基础示例">基础示例&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>grant select,insert,update,delete,create,drop ON mysql.* TO &amp;rsquo;lichenhao&amp;rsquo;@&amp;rsquo;localhost&amp;rsquo; identified by &amp;rsquo;lichenhao&amp;rsquo;; # 为名为 mysql 的数据库创建名为 lichenhao 的用户，密码为 lichenhao，具有 select、insert、update、delete、create、drop 这些命令的执行权限。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>flush privileges; # 刷新权限。由权限账号信息是在 MYSQLD 服务启动的时候就加载到内存中的，所以你在原权限表中的任何直接修改都不会直接生效。用 flush privileges 把中表中的信息更新到内存。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>select user(); # 查看当前登录的用户。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>show databases; # 列出所有已经存在的数据库&lt;/p>
&lt;/li>
&lt;li>
&lt;p>use mysql; # 切换当前要操作的数据库为 mysql&lt;/p>
&lt;/li>
&lt;li>
&lt;p>show tables; # 显示当前数据库中所有的表&lt;/p>
&lt;/li>
&lt;li>
&lt;p>show columns from db; # 显示当前数据库中名为 db 的表的属性。效果如下&lt;/p>
&lt;ul>
&lt;li>
&lt;p>desc test; # 与该命令效果相同&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Field # 该表中都有哪些列&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Type # 该列的数据类型&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Null # 该列是否可以插入 null&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Key # 索引类型&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Default # 该列插入空值时。默认插入什么值。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Extra # 该列额外的参数。&lt;/p>
&lt;p>MariaDB [mysql]&amp;gt; SHOW COLUMNS FROM db;
+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;+&amp;mdash;&amp;mdash;+&amp;mdash;&amp;ndash;+&amp;mdash;&amp;mdash;&amp;mdash;+&amp;mdash;&amp;mdash;-+
| Field | Type | Null | Key | Default | Extra |
+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;+&amp;mdash;&amp;mdash;+&amp;mdash;&amp;ndash;+&amp;mdash;&amp;mdash;&amp;mdash;+&amp;mdash;&amp;mdash;-+
| Host | char(60) | NO | PRI | | |
| Db | char(64) | NO | PRI | | |
| User | char(16) | NO | PRI | | |
| Select_priv | enum(&amp;lsquo;N&amp;rsquo;,&amp;lsquo;Y&amp;rsquo;) | NO | | N | |
&amp;hellip;&amp;hellip;.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>select Host,db from db; # 显示 db 表中，Host 和 Db 列及其内容，效果如下&lt;/p>
&lt;p>MariaDB [mysql]&amp;gt; SELECT Host,db from db;
+&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+&amp;mdash;&amp;mdash;&amp;mdash;+
| Host | db |
+&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+&amp;mdash;&amp;mdash;&amp;mdash;+
| % | test |
| % | test_% |
| localhost | mysql |
+&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+&amp;mdash;&amp;mdash;&amp;mdash;+&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="mysqladmin">mysqladmin&lt;/h1>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>mysqladmin -u root -p password &amp;ldquo;my_password&amp;rdquo; # 修改 root 密码，密码为：my_password。如果默认密码为空，则可以不加-p。&lt;/li>
&lt;/ul></description></item><item><title>Docs: MySQL 命令行工具</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/2.%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE/mysql/mysql-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/2.%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE/mysql/mysql-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;/blockquote>
&lt;h1 id="mysql">mysql&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://dev.mysql.com/doc/refman/8.0/en/mysql.html">官方文档，MySQL 程序-客户端程序-mysql&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>mysql 是一个简单的 SQL Shell。 它支持交互和非交互使用。 交互使用时，查询结果以 ASCII 表格式显示。 非交互使用（例如，用作过滤器）时，结果以制表符分隔的格式显示。 可以使用命令选项更改输出格式。&lt;/p>
&lt;h2 id="syntax语法">Syntax(语法)&lt;/h2>
&lt;p>&lt;strong>mysql [OPTIONS] [DATABASE]&lt;/strong>
&lt;strong>DATABASE&lt;/strong> # 指定连接 mysql 后要操作的数据库。若不指定，则需要在交互模式下使用 &lt;code>use&lt;/code> 指令选择数据库，否则对数据库的操作将会报 &lt;code>No database selected&lt;/code> 错误：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>mysql&amp;gt; show tables;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ERROR &lt;span style="color:#ae81ff">1046&lt;/span> &lt;span style="color:#f92672">(&lt;/span>3D000&lt;span style="color:#f92672">)&lt;/span>: No database selected
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>OPTIONS：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-h, &amp;ndash;host &amp;lt;HostName&amp;gt;&lt;/strong> # 指定要连接的 mysql 主机。如果链接本机 mysql，可以省略。&lt;/li>
&lt;li>&lt;strong>-P, &amp;ndash;port &amp;lt;PORT&amp;gt;&lt;/strong> # 指定要连接的 mysql 的端口。默认值：&lt;code>3306&lt;/code>&lt;/li>
&lt;li>&lt;strong>-u, &amp;ndash;user &amp;lt;UserName&amp;gt;&lt;/strong> # 指定要登录 mysql 的用户名&lt;/li>
&lt;li>&lt;strong>-p, &amp;ndash;password &amp;lt;PASSWORD&amp;gt;&lt;/strong> # 使用密码来登录。如果指定要登录 mysql 的用户密码为空，则该选项可省&lt;/li>
&lt;/ul>
&lt;h2 id="命令行模式">命令行模式&lt;/h2>
&lt;p>我们可以通过 &lt;code>mysql db_name &amp;lt;FILE.sql &amp;gt; output.tab&lt;/code> 命令直接执行写在文件中的 SQL 语句&lt;/p>
&lt;h2 id="交互模式">交互模式&lt;/h2>
&lt;h3 id="斜线命令">斜线命令&lt;/h3>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://dev.mysql.com/doc/refman/8.0/en/mysql-commands.html">官方文档，MySQL 程序-客户端程序-myslq 客户端命令&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>在 mysql 的交互模式中有一组 mysql 程序自带的命令，用以 控制输出格式、检查、获取数据信息 等等，这些命令以 &lt;code>\&lt;/code> 开头，不过也有与之相对应的字符串命令&lt;/p>
&lt;ul>
&lt;li>&lt;strong>\u, use &amp;lt;DBName&amp;gt;&lt;/strong> # 选择想要操作的数据库。与 MySQL 的 SQL 中的 use 语句功能一致&lt;/li>
&lt;/ul>
&lt;h3 id="基础示例">基础示例&lt;/h3>
&lt;ul>
&lt;li>grant select,insert,update,delete,create,drop ON mysql.* TO &amp;rsquo;lichenhao&amp;rsquo;@&amp;rsquo;localhost&amp;rsquo; identified by &amp;rsquo;lichenhao&amp;rsquo;; # 为名为 mysql 的数据库创建名为 lichenhao 的用户，密码为 lichenhao，具有 select、insert、update、delete、create、drop 这些命令的执行权限。&lt;/li>
&lt;li>flush privileges; # 刷新权限。由权限账号信息是在 MYSQLD 服务启动的时候就加载到内存中的，所以你在原权限表中的任何直接修改都不会直接生效。用 flush privileges 把中表中的信息更新到内存。&lt;/li>
&lt;li>select user(); # 查看当前登录的用户。&lt;/li>
&lt;li>show databases; # 列出所有已经存在的数据库&lt;/li>
&lt;li>use mysql; # 切换当前要操作的数据库为 mysql&lt;/li>
&lt;li>show tables; # 显示当前数据库中所有的表&lt;/li>
&lt;li>show columns from db; # 显示当前数据库中名为 db 的表的属性。效果如下
&lt;ul>
&lt;li>desc test; # 与该命令效果相同&lt;/li>
&lt;li>Field # 该表中都有哪些列&lt;/li>
&lt;li>Type # 该列的数据类型&lt;/li>
&lt;li>Null # 该列是否可以插入 null&lt;/li>
&lt;li>Key # 索引类型&lt;/li>
&lt;li>Default # 该列插入空值时。默认插入什么值。&lt;/li>
&lt;li>Extra # 该列额外的参数。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>MariaDB [mysql]&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">SHOW&lt;/span> COLUMNS &lt;span style="color:#66d9ef">FROM&lt;/span> db;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#75715e">-----------------------+---------------+------+-----+---------+-------+
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">|&lt;/span> Field &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#66d9ef">Type&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#66d9ef">Null&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#66d9ef">Key&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#66d9ef">Default&lt;/span> &lt;span style="color:#f92672">|&lt;/span> Extra &lt;span style="color:#f92672">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#75715e">-----------------------+---------------+------+-----+---------+-------+
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#66d9ef">Host&lt;/span> &lt;span style="color:#f92672">|&lt;/span> char(&lt;span style="color:#ae81ff">60&lt;/span>) &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#66d9ef">NO&lt;/span> &lt;span style="color:#f92672">|&lt;/span> PRI &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#f92672">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">|&lt;/span> Db &lt;span style="color:#f92672">|&lt;/span> char(&lt;span style="color:#ae81ff">64&lt;/span>) &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#66d9ef">NO&lt;/span> &lt;span style="color:#f92672">|&lt;/span> PRI &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#f92672">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#66d9ef">User&lt;/span> &lt;span style="color:#f92672">|&lt;/span> char(&lt;span style="color:#ae81ff">16&lt;/span>) &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#66d9ef">NO&lt;/span> &lt;span style="color:#f92672">|&lt;/span> PRI &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#f92672">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">|&lt;/span> Select_priv &lt;span style="color:#f92672">|&lt;/span> enum(&lt;span style="color:#e6db74">&amp;#39;N&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;Y&amp;#39;&lt;/span>) &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#66d9ef">NO&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#f92672">|&lt;/span> N &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#f92672">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.......
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>select Host,db from db; # 显示 db 表中，Host 和 Db 列及其内容，效果如下&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>MariaDB [mysql]&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">SELECT&lt;/span> &lt;span style="color:#66d9ef">Host&lt;/span>,db &lt;span style="color:#66d9ef">from&lt;/span> db;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#75715e">-----------+---------+
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#66d9ef">Host&lt;/span> &lt;span style="color:#f92672">|&lt;/span> db &lt;span style="color:#f92672">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#75715e">-----------+---------+
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#f92672">|&lt;/span> test &lt;span style="color:#f92672">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#f92672">|&lt;/span> test&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>_&lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#f92672">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">|&lt;/span> localhost &lt;span style="color:#f92672">|&lt;/span> mysql &lt;span style="color:#f92672">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#75715e">-----------+---------+
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="mysqladmin">mysqladmin&lt;/h1>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>mysqladmin -u root -p password &amp;ldquo;my_password&amp;rdquo; # 修改 root 密码，密码为：my_password。如果默认密码为空，则可以不加-p。&lt;/li>
&lt;/ul></description></item><item><title>Docs: MySQL 配置文件详解</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/2.%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE/mysql/mysql-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/2.%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE/mysql/mysql-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;/blockquote>
&lt;h1 id="mycnf">my.cnf&lt;/h1>
&lt;p>[mysqld]
skip-grant-tables # 登录时跳过权限检查&lt;/p>
&lt;h1 id="default-time_zone800">设置时区
default-time_zone=&amp;rsquo;+8:00'&lt;/h1>
&lt;p>#  开启 binlog
log-bin=mysql-bin
binlog-format=Row
server-id=1
expire_logs_days=7
max_binlog_size=10m&lt;/p>
&lt;p>binlog
&lt;a href="https://dev.mysql.com/doc/refman/5.7/en/replication-howto-masterbaseconfig.html">https://dev.mysql.com/doc/refman/5.7/en/replication-howto-masterbaseconfig.html&lt;/a>&lt;/p></description></item><item><title>Docs: MySQL 批量SQL插入性能优化</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/2.%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE/mysql/mysql-%E6%89%B9%E9%87%8Fsql%E6%8F%92%E5%85%A5%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5.%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/2.%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE/mysql/mysql-%E6%89%B9%E9%87%8Fsql%E6%8F%92%E5%85%A5%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</guid><description>
&lt;p>对于一些数据量较大的系统，数据库面临的问题除了查询效率低下，还有就是数据入库时间长。特别像报表系统，每天花费在数据导入上的时间可能会长达几个小时或十几个小时之久。因此，优化数据库插入性能是很有意义的。&lt;/p>
&lt;p>经过对 MySQL InnoDB 的一些性能测试，发现一些可以提高 insert 效率的方法，供大家参考参考。&lt;/p>
&lt;h2 id="1一条-sql-语句插入多条数据">1、一条 SQL 语句插入多条数据&lt;/h2>
&lt;p>常用的插入语句如：&lt;/p>
&lt;pre>&lt;code>INSERT INTO `insert_table` (`datetime`, `uid`, `content`, `type`)
VALUES ('0', 'userid_0', 'content_0', 0);
INSERT INTO `insert_table` (`datetime`, `uid`, `content`, `type`)
VALUES ('1', 'userid_1', 'content_1', 1);
&lt;/code>&lt;/pre>
&lt;p>修改成：&lt;/p>
&lt;pre>&lt;code>INSERT INTO `insert_table` (`datetime`, `uid`, `content`, `type`)
VALUES ('0', 'userid_0', 'content_0', 0), ('1', 'userid_1', 'content_1', 1);
&lt;/code>&lt;/pre>
&lt;p>修改后的插入操作能够提高程序的插入效率。这里第二种 SQL 执行效率高的主要原因是合并后日志量（MySQL 的 binlog 和 innodb 的事务让日志）减少了，&lt;strong>降低日志刷盘的数据量和频率，从而提高效率。通过合并 SQL 语句，同时也能减少 SQL 语句解析的次数，减少网络传输的 IO&lt;/strong>。&lt;/p>
&lt;p>这里提供一些测试对比数据，分别是进行单条数据的导入与转化成一条 SQL 语句进行导入，分别测试 1 百、1 千、1 万条数据记录。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/osqpuu/1616133530263-c38130ab-121b-4b17-a60a-cfab979b341d.png" alt="">&lt;/p>
&lt;h2 id="2在事务中进行插入处理">2、在事务中进行插入处理。&lt;/h2>
&lt;p>把插入修改成：&lt;/p>
&lt;pre>&lt;code>START TRANSACTION;
INSERT INTO `insert_table` (`datetime`, `uid`, `content`, `type`)
VALUES ('0', 'userid_0', 'content_0', 0);
INSERT INTO `insert_table` (`datetime`, `uid`, `content`, `type`)
VALUES ('1', 'userid_1', 'content_1', 1);
...
COMMIT;
&lt;/code>&lt;/pre>
&lt;p>使用事务可以提高数据的插入效率，这是因为进行一个 INSERT 操作时，MySQL 内部会建立一个事务，在事务内才进行真正插入处理操作。通过使用事务可以减少创建事务的消耗，&lt;code>所有插入都在执行后才进行提交操作&lt;/code>。&lt;/p>
&lt;p>这里也提供了测试对比，分别是不使用事务与使用事务在记录数为 1 百、1 千、1 万的情况。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/osqpuu/1616133530313-c27041f7-5ee1-40ad-b700-39240dcf2a81.png" alt="">&lt;/p>
&lt;h2 id="3数据有序插入">3、数据有序插入。&lt;/h2>
&lt;p>数据有序的插入是指插入记录在主键上是有序排列，例如 datetime 是记录的主键：&lt;/p>
&lt;pre>&lt;code>INSERT INTO `insert_table` (`datetime`, `uid`, `content`, `type`)
VALUES ('1', 'userid_1', 'content_1', 1);
INSERT INTO `insert_table` (`datetime`, `uid`, `content`, `type`)
VALUES ('0', 'userid_0', 'content_0', 0);
INSERT INTO `insert_table` (`datetime`, `uid`, `content`, `type`)
VALUES ('2', 'userid_2', 'content_2',2);
&lt;/code>&lt;/pre>
&lt;p>修改成：&lt;/p>
&lt;pre>&lt;code>INSERT INTO `insert_table` (`datetime`, `uid`, `content`, `type`)
VALUES ('0', 'userid_0', 'content_0', 0);
INSERT INTO `insert_table` (`datetime`, `uid`, `content`, `type`)
VALUES ('1', 'userid_1', 'content_1', 1);
INSERT INTO `insert_table` (`datetime`, `uid`, `content`, `type`)
VALUES ('2', 'userid_2', 'content_2',2);
&lt;/code>&lt;/pre>
&lt;p>由于数据库插入时，需要维护索引数据，&lt;code>无序的记录会增大维护索引的成本&lt;/code>。我们可以参照 InnoDB 使用的 B+tree 索引，如果每次插入记录都在索引的最后面，索引的定位效率很高，并且对索引调整较小；如果插入的记录在索引中间，需要 B+tree 进行分裂合并等处理，会消耗比较多计算资源，并且插入记录的索引定位效率会下降，数据量较大时会有频繁的磁盘操作。&lt;/p>
&lt;p>下面提供随机数据与顺序数据的性能对比，分别是记录为 1 百、1 千、1 万、10 万、100 万。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/osqpuu/1616133530291-b48ef56b-2dff-401b-8ede-bf3dc7e64b61.png" alt="">&lt;/p>
&lt;p>从测试结果来看，该优化方法的性能有所提高，但是提高并不是很明显。&lt;/p>
&lt;h2 id="4性能综合测试">4、性能综合测试&lt;/h2>
&lt;p>这里提供了同时使用上面三种方法进行 INSERT 效率优化的测试。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/osqpuu/1616133530367-110c58c4-622e-41ff-8096-d1c640627053.png" alt="">&lt;/p>
&lt;p>从测试结果可以看到，合并数据+事务的方法在较小数据量时，性能提高是很明显的，数据量较大时（1 千万以上），性能会急剧下降，这是由于此时数据量超过了 innodb_buffer 的容量，每次定位索引涉及较多的磁盘读写操作，性能下降较快。而使用合并数据+事务+有序数据的方式在数据量达到千万级以上表现依旧是良好，在数据量较大时，有序数据索引定位较为方便，不需要频繁对磁盘进行读写操作，所以可以维持较高的性能。&lt;/p>
&lt;p>&lt;strong>注意事项：&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;code>SQL语句是有长度限制&lt;/code>，在进行数据合并在同一 SQL 中务必不能超过 SQL 长度限制，通过 max_allowed_packet 配置可以修改，默认是 1M，测试时修改为 8M。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>事务需要控制大小&lt;/code>，事务太大可能会影响执行的效率。MySQL 有 innodb_log_buffer_size 配置项，超过这个值会把 innodb 的数据刷到磁盘中，这时，效率会有所下降。所以比较好的做法是，在数据达到这个这个值前进行事务提交。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>参考文档：MySQL 批量 SQL 插入性能优化&lt;/p></description></item></channel></rss>