<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – 1.2.实现虚拟化的工具</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/</link><description>Recent content in 1.2.实现虚拟化的工具 on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: 1.2.实现虚拟化的工具</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/</guid><description/></item><item><title>Docs: KVM_QEMU</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/kvm_qemu/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/kvm_qemu/</guid><description/></item><item><title>Docs: KVM/QEMU</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/kvm_qemu/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/kvm_qemu/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.linux-kvm.org/page/Main_Page">官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://ubuntu.com/server/docs/virtualization-qemu">Ubuntu 官方文档，虚拟化-qemu&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="kvm-背景">KVM 背景&lt;/h2>
&lt;p>&lt;strong>Kernel-based Virtual Machine(基于内核的虚拟化机器，简称 KVM)&lt;/strong>， 是 Linux 的一个内核模块，就叫 &lt;strong>kvm&lt;/strong>，只用于管理虚拟 CPU 和内存。该内核模块使得 Linux 变成了一个 Hypervisor。&lt;/p>
&lt;ul>
&lt;li>它由 Quramnet 开发，该公司于 2008 年&lt;strong>被 Red Hat 收购&lt;/strong>。&lt;/li>
&lt;li>它支持 x86 (32 and 64 位), s390, Powerpc 等 CPU。&lt;/li>
&lt;li>它从 Linux 2.6.20 起就作为一模块被包含在 Linux 内核中。&lt;/li>
&lt;li>它需要支持虚拟化扩展的 CPU。&lt;/li>
&lt;li>它是完全开源的。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/zuowkm/1616124035086-2c826a6e-2fd2-402b-babd-06bfe2380e3d.png" alt="">
KVM 实际是 Linux 内核提供的虚拟化架构，可将内核直接充当 Hypervisor 来使用。KVM 需要宿主机的 CPU 本身支持虚拟化扩展，如 intel VT 和 AMD AMD-V 技术。KVM 自 2.6.20 版本后已合入主干并发行。除了支持 x86 的处理器，同时也支持 S/390,PowerPC,IA-61 以及 ARM 等平台。&lt;/p>
&lt;p>KVM 包含包含两个内核模块&lt;/p>
&lt;ol>
&lt;li>kvm 用来实现核心虚拟化功能&lt;/li>
&lt;li>kvm-intel # 与处理器强相关的模块&lt;/li>
&lt;/ol>
&lt;p>KVM 本身只提供了 CPU 和 Memory 的虚拟化，并暴露了一个** **&lt;code>**/dev/kvm**&lt;/code> 设备，以供宿主机上的用户空间的程序访问(比如 下文提到的 QEMU)。用户空间的程序通过 **/dev/kvm** 接口可以实现多种功能：&lt;/p>
&lt;h2 id="qemu-背景">QEMU 背景&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>QEMU 官网：&lt;a href="https://www.qemu.org/">https://www.qemu.org/&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>QEMU 是一个通过软件实现的完全虚拟化程序，通过动态二进制转换来模拟 CPU，并模拟一系列的硬件，使虚拟机认为自己和硬件直接打交道，其实是同 QEMU 模拟出来的硬件打交道，QEMU 再将这些指令翻译给真正硬件进行操作。通过这种模式，虚拟机可以和主机上的硬盘，网卡，CPU，CD-ROM，音频设备和 USB 设备进行交互。但由于所有指令都需要经过 QEMU 来翻译，因而性能会比较差
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/zuowkm/1616124035102-78899618-45f3-4dcc-9de1-9c80ecd532cb.jpeg" alt="">&lt;/p>
&lt;h2 id="kvmqemu-诞生">KVM/QEMU 诞生&lt;/h2>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/zuowkm/1616124035098-45602829-f8bc-4f49-b65d-56b8dba6c466.png" alt="图片来源：RedHat8 Virtualization Architecture 在 KVM/QEMU Storage Stack Performance Discussion 这篇文章中，作者还画了一个非常形象的图，可以作为参考，下面缩小的图就是" title="图片来源：RedHat8 Virtualization Architecture 在 KVM/QEMU Storage Stack Performance Discussion 这篇文章中，作者还画了一个非常形象的图，可以作为参考，下面缩小的图就是">
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/zuowkm/1616124035057-cdeb1319-ee83-4674-99c3-70a16da96211.jpeg" alt="">
从前面的背景介绍可知，KVM 实现了 CPU 和 Memory 的虚拟化，但 KVM 并不能模拟其他设备，所以需要其他东西来支持其他设备的模拟；而 QEMU 是通过纯软件实现的一套完整的虚拟化，但是性能非常低下。所以 KVM 与 QEMU 天然得相辅相成，KVM 的开发者选择了比较成熟的开源虚拟化软件 QEMU 来模拟 I/O 设备(网卡，磁盘等)，最后形成了 KVM/QEMU。&lt;/p>
&lt;p>在 KVM/QEMU 中，KVM 运行在内核空间，QEMU 运行在用户空间，实际模拟创建、管理各种虚拟硬件，QEMU 将 KVM 整合了进来，通过 ioctl() 系统调用来调用 /dev/kvm 设备，从而将 CPU 指令的部分交给内核模块来做，KVM 实现了 CPU 和 Memory 的虚拟化，QEMU 模拟 IO 设备(磁盘，网卡，显卡等)，KVM 加上 QEMU 后就是完整意义上的服务器虚拟化。&lt;/p>
&lt;p>综上所述，QEMU-KVM 具有两大作用：&lt;/p>
&lt;ul>
&lt;li>KVM 负责 cpu，内存 的虚拟&lt;/li>
&lt;li>QEMU 负责 I/O 设备 的模拟。比如显卡、PCI、USB、声卡、网卡、存储设备等等。&lt;/li>
&lt;/ul>
&lt;h2 id="结语">结语&lt;/h2>
&lt;p>QEMU-KVM，是 QEMU 的一个特定于 KVM 加速模块的分支，里面包含了很多关于 KVM 的特定代码，与 KVM 模块一起配合使用。&lt;/p>
&lt;p>目前 QEMU-KVM 已经与 QEMU 合二为一，所有特定于 KVM 的代码也都合入了 QEMU，当需要与 KVM 模块配合使用的时候，只需要在 QEMU 命令行加上 &amp;ndash;enable-kvm 就可以。&lt;/p>
&lt;h1 id="kvmqeum-虚拟化实现原理">KVM/QEUM 虚拟化实现原理&lt;/h1>
&lt;p>KVM/QEMU 主要通过以下组件来实现完整的虚拟化功能&lt;/p>
&lt;ul>
&lt;li>**kvm.ko.xz **# kvm 内核模块。用来模拟 CPU 与 RAM。&lt;/li>
&lt;li>&lt;strong>/dev/kvm&lt;/strong> # 一个字符设备(也是一个接口)。供用户空间的程序使用 &lt;code>ioctl()&lt;/code> 系统调用来访问 kvm 模块&lt;/li>
&lt;li>&lt;strong>qemu-kvm&lt;/strong> # 一个二进制文件。用来调用&lt;code>/dev/kvm&lt;/code>设备，并为虚拟机模拟各种 I/O 设备。qemu-kvm 也是最基本的用于创建虚拟机的命令行工具。&lt;/li>
&lt;/ul>
&lt;p>KVM/QEMU 通过 &lt;a href="https://www.yuque.com/go/doc/33175246">qemu-kvm 命令行工具&lt;/a>来创建 VM。qemu-kvm 程序使用 /dev/kvm 接口来调用 kvm 模块，以运行 VM。qemu-vm 也是创建 VM 的最基础工具。使用 /dev/kvm 接口的 qemu-kvm 程序可以提供如下能力：&lt;/p>
&lt;ul>
&lt;li>设置 VM 的地址空间。宿主机必须提供固件镜像(通常为模拟出来的 BIOS)以便让 VM 可以引导到 操作系统中&lt;/li>
&lt;li>为 VM 模拟 I/O 设备。&lt;/li>
&lt;li>将 VM 的视频显示映射回宿主机上。&lt;/li>
&lt;/ul>
&lt;h2 id="virtualization-cpu--memory">Virtualization CPU &amp;amp;&amp;amp; Memory&lt;/h2>
&lt;h3 id="cpu-虚拟化">CPU 虚拟化&lt;/h3>
&lt;p>QEMU 创建 CPU 线程，在初始化的时候设置好相应的虚拟 CPU 寄存器的值，然后调用 KVM 的接口，运行虚拟机，在物理 CPU 上执行虚拟机代码。&lt;/p>
&lt;p>在虚拟机运行时，KVM 会截获虚拟机中的敏感指令，当虚拟机中的代码是敏感指令或者满足了一定的退出条件时，CPU 会从 VMX non-root 模式退出到 KVM，这就是下图的 VM exit。虚拟机的退出首先陷入到 KVM 进行处理，但是如果遇到 KVM 无法处理的事件，比如虚拟机写了设备的寄存器地址，那么 KVM 就会将这个操作交给 QEMU 处理。当 QEMU/KVM 处理好了退出事件后，又会将 CPU 置于 VMX non-root 模式，也就是下图的 VM Entry。&lt;/p>
&lt;p>KVM 使用 VMCS 结构来保存 VM Exit 和 VM Entry
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/zuowkm/1616124035076-0336490e-7922-482c-91be-ee6b0a2ba562.png" alt="">&lt;/p>
&lt;h3 id="memory-虚拟化">Memory 虚拟化&lt;/h3>
&lt;p>QEMU 初始化时调用 KVM 接口告知 KVM，虚拟机所需要的物理内存，通过 mmap 分配宿主机的虚拟内存空间作为虚拟机的物理内存，QEMU 在更新内存布局时会持续调用 KVM 通知内核 KVM 模块虚拟机的内存分布。&lt;/p>
&lt;p>在 CPU 支持 EPT（拓展页表）后，CPU 会自动完成&lt;strong>虚拟机物理地址&lt;/strong>到&lt;strong>宿主机物理地址&lt;/strong>的转换。虚拟机第一次访问内存的时候会陷入 KVM，KVM 逐渐建立起 EPT 页面。这样后续的虚拟机的虚拟 CPU 访问虚拟机&lt;strong>虚拟内存地址&lt;/strong>时，会先被转换为&lt;strong>虚拟机物理地址&lt;/strong>，接着查找 EPT 表，获取宿主机物理地址
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/zuowkm/1616124035074-4de2d638-b8fb-499c-a1de-92ce5e6a10b3.png" alt="">&lt;/p>
&lt;h2 id="paravirtualized-devices半虚拟化设备">Paravirtualized Devices(半虚拟化设备)&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/virtualization_getting_started_guide/sec-virtualization_getting_started-products-virtualized-hardware-devices#sec-Virtualization_Getting_Started-Products-paravirtdevices">RedHat7 虚拟化硬件设备章节中的半虚拟化章节&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>半虚拟化设备，就是 Qemu 模拟的各种 I/O 设备&lt;/p>
&lt;p>在 QEMU/KVM 早期模拟其他的硬件(如存储、网络设备)性能不足。为了提高 IO 设备性能，所以产生了 &lt;strong>Paravirtualized Devices(半虚拟化设备)&lt;/strong>，Paravirtualized(半虚拟化) 为 VM 使用宿主机上的设备提供了&lt;strong>快速且高效的通讯方式&lt;/strong>。KVM/QEMU 使用 &lt;strong>Virtio API&lt;/strong> 作为 VM 与 Hypervisor 的中间层，以便为 VM 提供 Paravirtualized Devices(半虚拟化设备)。&lt;/p>
&lt;blockquote>
&lt;p>一些半虚拟化设备可以有效减少 I/O 的延迟，并把 I/O 的吞吐量提高至接近裸机的水平。&lt;/p>
&lt;/blockquote>
&lt;p>所有 &lt;strong>Virtio&lt;/strong> 设备都&lt;strong>由两部分组成&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>**Host Device **# 宿主机设备(也称为后端设备)&lt;/li>
&lt;li>&lt;strong>Guest Device&lt;/strong> # 虚拟机设备(也称为前端设备)&lt;/li>
&lt;/ul>
&lt;p>Paravirtualizd device driver(半虚拟化设备驱动) 可以让 VM 直接访问宿主机上的物理硬件设备。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/zuowkm/1616124035106-08438d88-b937-43b9-af1c-01ddb6771941.jpeg" alt="">
现阶段有多种半虚拟化设备可供使用&lt;/p>
&lt;ul>
&lt;li>virtio-net(半虚拟化网络设备) # 半虚拟化网络设备是一种虚拟网络设备，可通过增加的 I/O 性能和较低的延迟为虚拟机提供网络访问。&lt;/li>
&lt;li>virtio-blk(半虚拟化块设备) # 半虚拟化块设备是一种高性能的虚拟存储设备，可为虚拟机提供更高的 I / O 性能和更低的延迟。 虚拟机管理程序支持半虚拟化的块设备，该设备已连接到虚拟机（必须仿真的软盘驱动器除外）。&lt;/li>
&lt;li>virtio-scsi(半虚拟化控制器设备) # 半虚拟化 SCSI 控制器设备是一种更为灵活且可扩展的 virtio-blk 替代品。virtio-scsi 客机能继承目标设备的各种特征，并且能操作几百个设备，相比之下，virtio-blk 仅能处理 28 台设备。&lt;/li>
&lt;li>半虚拟化时钟&lt;/li>
&lt;li>virtio-serial(半虚拟化串口设备) #&lt;/li>
&lt;li>virtio-ballon(气球设备) # 气球（ballon）设备可以指定虚拟机的部分内存为没有被使用（这个过程被称为气球“&lt;em>充气&lt;/em> ” — inflation），从而使这部分内存可以被主机（或主机上的其它虚拟机）使用。当虚拟机这部分内存时，气球可以进行“&lt;em>放气&lt;/em> ”（deflated），主机就会把这部分内存重新分配给虚拟机。&lt;/li>
&lt;li>virtio-rng(半虚拟化随机数生成器)&lt;/li>
&lt;li>QXL(半虚拟化显卡) # 半虚拟化显卡与 QXL 驱动一同提供了一个有效地显示来自远程主机的虚拟机图形界面。SPICE 需要 QXL 驱动。&lt;/li>
&lt;/ul>
&lt;h3 id="创建虚拟机示例">创建虚拟机示例&lt;/h3>
&lt;p>qemu-kvm 命令中的 &lt;code>-device&lt;/code> 选项用于指定前端设备，比如 网卡、磁盘、usb 等等。而 &lt;code>-XXXXdev&lt;/code>等选项则是为了指定宿后端设备。比如宿主机上的文件、socket 等等&lt;/p>
&lt;p>qemu-kvm 使用 &lt;code>-device&lt;/code> 选项指定的参数将这些模拟出来的硬件设备，通过 ID 关联到&lt;code>-XXXdev&lt;/code>定的宿主机文件上。&lt;/p>
&lt;p>而在新版，则使用了更简单的方式，通过一个选项，来直接指定半虚拟化的两端设备，比如使用 &lt;code>-drive&lt;/code> 代替 &lt;code>-device&lt;/code> 和 &lt;code>-blockdev&lt;/code>、使用 &lt;code>-nic&lt;/code> 代替 &lt;code>-device&lt;/code> 和 &lt;code>-netdev&lt;/code> 等等。&lt;/p>
&lt;p>比如下面的示例：&lt;/p>
&lt;pre>&lt;code>qemu-kvm -m 4096 -smp 2 -name test \
# 模拟块设备
# -drive 使新版选项，是 -blockdev 和 -device 两个参数的集合，可以模拟一个块设备
# Host Device 为 /var/lib/libvirt/images/test-2.bj-net.qcow2
# Guest Device 为 virtio-blk 设备
-drive file=/var/lib/libvirt/images/test-2.bj-net.qcow2,format=qcow2,if=virtio \
-vnc :3 \
# 模拟网卡
# -netdev 指定 Host Device(宿主机设备) 为 tap 类型的网络设备
# -device 指定 Guest Device(虚拟机设备) 为 virtio-net 设备
-netdev tap,id=n1 \
-device virtio-net,netdev=n1 \
# 模拟串口
# -chardev 指定 Host Device(宿主机设备)为 socket
# -device 指定 Guest Device(虚拟机设备)为 virtio-serial
# virtserialport 是 virtio-serial-port 的意思
-chardev socket,path=/tmp/qga.sock,server,nowait,id=qga0 \
-device virtio-serial \
-device virtserialport,chardev=qga0,name=org.qemu.guest_agent.0
&lt;/code>&lt;/pre>
&lt;p>可以看到，所有通过 -device 选项在 VM 中模拟的硬件设备，都会根据 ID 关联到宿主机的某个文件或者设备上。&lt;/p>
&lt;p>而且还有一个 -drive 选项这种更简单的使用方式，来免去设定 ID 的困扰，并且输入的字符更少。&lt;/p>
&lt;h2 id="总结一下">总结一下&lt;/h2>
&lt;p>KVM/QEMU 虚拟化环境中，除了 CPU 与 Memory 是通过 KVM 虚拟化的，其他所有硬件设备，都是通过 QEMU 模拟出来，并且，要想让模拟出来的硬件设备能正常工作(模拟的硬件与宿主机交互)，则还需要在宿主机上创建与之关联的文件。所以，一共两部分来实现 QEMU 的模拟功能。&lt;/p>
&lt;ol>
&lt;li>&lt;strong>一部分是 QEMU 在 VM 中模拟出来的各种硬件&lt;/strong>&lt;/li>
&lt;li>&lt;strong>另一部分是在宿主机中与 VM 中模拟出来的硬件对应的各种文件或设备&lt;/strong>。&lt;/li>
&lt;/ol>
&lt;p>这两部分共同实现了 VM 中模拟的硬件与宿主机交互的能力。如果 VM 中的硬件与宿主机无法交互，那么是无法使用滴~~~&lt;/p>
&lt;h1 id="qemu-storage-emulationqemu-存储模拟">QEMU Storage Emulation(QEMU 存储模拟)&lt;/h1>
&lt;p>与 &lt;a href="https://www.yuque.com/desistdaydream/learning/tkr8dt#03psa">网络模拟&lt;/a> 类似，QEMU 想要让虚拟机获得一块硬盘，也需要由两部分组成一个完整的存储功能。&lt;/p>
&lt;ol>
&lt;li>&lt;strong>front-end(前端)&lt;/strong> # VM 中的 块设备&lt;/li>
&lt;li>**back-end(后端) **# 宿主机中的与 VM 中模拟出来的块设备进行交互的设备。&lt;/li>
&lt;/ol>
&lt;h1 id="qemu-network-emulationqemu-网络模拟">QEMU Network Emulation(QEMU 网络模拟)&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://wiki.qemu.org/Documentation/Networking">https://wiki.qemu.org/Documentation/Networking&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.qemu.org/docs/master/system/net.html">https://www.qemu.org/docs/master/system/net.html&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.qemu.org/2018/05/31/nic-parameter/">https://www.qemu.org/2018/05/31/nic-parameter/&lt;/a>，老版原理，将弃用&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>QEMU 想要让虚拟机与外界互通，需要由两部分组成一个完整的网络功能：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>front-end(前端)&lt;/strong> # VM 中的 NIC(Network Interface Controller，即人们常说的&lt;code>网卡&lt;/code>)。
&lt;ul>
&lt;li>VM 中的 NIC 是由 QEMU 模拟出来的，在支持 PCI 卡的系统上，通常可以是 e1000 网卡、rtl8139 网卡、virtio-net 设备。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>**back-end(后端) **# 宿主机中的与 VM 中模拟出来的 NIC 进行交互的设备。
&lt;ul>
&lt;li>back-end 有多种类型可以使用，这些后端可以用于将 VM 连接到真实网络，或连接到另一个 VM
&lt;ul>
&lt;li>&lt;a href="https://www.qemu.org/docs/master/system/net.html#using-tap-network-interfaces">TAP &lt;/a># 将 VM 连接到真实网络的标准方法&lt;/li>
&lt;li>&lt;a href="https://www.qemu.org/docs/master/system/net.html#using-the-user-mode-network-stack">User mode network stack&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>效果如图所示：
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/zuowkm/1616124035097-0a64383e-f37f-4cc3-bdc2-3c7502189b7d.png" alt="">&lt;/p>
&lt;h2 id="基本应用示例">基本应用示例&lt;/h2>
&lt;p>在使用 qemu-kvm 命令创建虚拟机时，通过一组两个选项来为虚拟机创建一个网络设备。比如：&lt;/p>
&lt;ul>
&lt;li>&lt;code>-netdev tap,id=n1&lt;/code> # 在宿主机创建一个&lt;code>后端设备&lt;/code>，这是一个 tap 类型的网络设备(tap 类型的设备路径为 /dev/net/tun)&lt;/li>
&lt;li>&lt;code>-device virtio-net-pci,netdev=n1&lt;/code> # 在 VM 中模拟一个&lt;code>前端设备&lt;/code>，这是一个 virtio-net-pci 类型的网卡&lt;/li>
&lt;/ul>
&lt;p>完整的命令如下：&lt;/p>
&lt;pre>&lt;code>qemu-kvm -m 4096 -smp 2 -name test \
-drive file=/var/lib/libvirt/images/test-1.bj-net.qcow2,format=qcow2,if=virtio \
-netdev tap,id=n1 \
-device virtio-net-pci,netdev=n1 \
-vnc :3
&lt;/code>&lt;/pre>
&lt;p>此时 qemu-kvm 发现 &lt;code>后端设备的 id&lt;/code> 与 &lt;code>前端设备的属性(netdev)的值&lt;/code> 一致，那么 qemu-kvm 就会将 两端设备关联。因此，在 VM 启动时，其打开了设备文件 /dev/net/tun 并获得了读写该文件的文件描述符 (FD)XX，同时向内核注册了一个 tap 类型虚拟网卡 tapX，tapX 与 FD XX 关联，虚拟机关闭时 tapX 设备会被内核释放。此虚拟网卡 tapX 一端连接用户空间程序 qemu-kvm，另一端连接主机链路层。&lt;/p>
&lt;pre>&lt;code>## 通过进程，获取该进程所使用的网络设备
# 当先宿主机上有3个虚拟机，分别对应 82649、82747、144776 这三个进程
# 82649 与 82747 使用网卡多队列功能，启用了8个队列，144776 仅有一个网卡队列
# 所以，82649 与 82747 打开了8个 /dev/net/tun 设备，而 144776 打开了1个 /dev/net/tun 设备
[root@host-3 fdinfo]# lsof /dev/net/tun
COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME
qemu-kvm 82649 qemu 27u CHR 10,200 0t0 102414 /dev/net/tun
qemu-kvm 82649 qemu 29u CHR 10,200 0t0 102414 /dev/net/tun
qemu-kvm 82649 qemu 31u CHR 10,200 0t0 102414 /dev/net/tun
qemu-kvm 82649 qemu 32u CHR 10,200 0t0 102414 /dev/net/tun
qemu-kvm 82649 qemu 33u CHR 10,200 0t0 102414 /dev/net/tun
qemu-kvm 82649 qemu 34u CHR 10,200 0t0 102414 /dev/net/tun
qemu-kvm 82649 qemu 35u CHR 10,200 0t0 102414 /dev/net/tun
qemu-kvm 82649 qemu 36u CHR 10,200 0t0 102414 /dev/net/tun
qemu-kvm 82747 qemu 28u CHR 10,200 0t0 102414 /dev/net/tun
qemu-kvm 82747 qemu 31u CHR 10,200 0t0 102414 /dev/net/tun
qemu-kvm 82747 qemu 32u CHR 10,200 0t0 102414 /dev/net/tun
qemu-kvm 82747 qemu 33u CHR 10,200 0t0 102414 /dev/net/tun
qemu-kvm 82747 qemu 34u CHR 10,200 0t0 102414 /dev/net/tun
qemu-kvm 82747 qemu 35u CHR 10,200 0t0 102414 /dev/net/tun
qemu-kvm 82747 qemu 36u CHR 10,200 0t0 102414 /dev/net/tun
qemu-kvm 82747 qemu 37u CHR 10,200 0t0 102414 /dev/net/tun
qemu-kvm 144776 qemu 31u CHR 10,200 0t0 102414 /dev/net/tun
# 查看 144776 进程的 fdinfo 中的 31 号描述符文件，可以看到该进程关联的网络设备是 vnet2
[root@host-3 fdinfo]# cat /proc/144776/fdinfo/31
pos: 0
flags: 0104002
mnt_id: 20
iff: vnet2
## 通过网络设备，获取使用该设备的进程
# 可以通过一条命令来直接获取使用指定 pid 设备的进程
# 下面的命令可以获取使用 vnet2 这个 tap 类型的网络设备的进程。
[root@host-3 fdinfo]# egrep -l iff:.*vnet2 /proc/*/fdinfo/* 2&amp;gt; /dev/null | cut -d/ -f3
144776
&lt;/code>&lt;/pre>
&lt;p>所以 144776 这个进程下的虚拟机经过其内部网卡发送的数据包，都会发送到 /dev/net/tun 设备上，然后根据其文件描述符，找到对应的 tap 设备，将数据包转发过去。这样，虚拟机的数据就通过网络，发送到物理机上了。&lt;/p>
&lt;blockquote>
&lt;p>获取 tap 设备 与 VM 关联性的方法参考：&lt;a href="https://unix.stackexchange.com/questions/462171/how-to-find-the-connection-between-tap-interface-and-its-file-descriptor">https://unix.stackexchange.com/questions/462171/how-to-find-the-connection-between-tap-interface-and-its-file-descriptor&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h2 id="virbr0-说明">virbr0 说明&lt;/h2>
&lt;p>virbr0 是 KVM 默认创建的一个 Bridge，其作用是为连接其上的虚机网卡提供 NAT 访问外网的功能。virbr0 默认分配了一个 IP 192.168.122.1，并为连接其上的其他虚拟网卡提供 DHCP 服务。&lt;/p>
&lt;ul>
&lt;li>需要说明的是，使用 NAT 的虚机 VM1 可以访问外网，但外网无法直接访问 VM1。 因为 VM1 发出的网络包源地址并不是 192.168.122.6，而是被 NAT 替换为宿主机的 IP 了。&lt;/li>
&lt;li>这个与使用 br0 不一样，在 br0 的情况下，VM1 通过自己的 IP 直接与外网通信，不会经过 NAT 地址转换。&lt;/li>
&lt;/ul></description></item><item><title>Docs: Vmware</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/vmware/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/vmware/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.vmware.com/">官网&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="vmware-workstation-的网络说明">Vmware Workstation 的网络说明&lt;/h1>
&lt;p>VMware 软件里可以提供一个虚拟交换机，PC 中创建的虚拟网卡与该虚拟机交换机直连，虚拟机也与该虚拟交换机直连
一、虚拟机发出的数据包两种走向：
（1）虚拟机——虚拟交换机——PC 上的虚拟网卡。到此为止，因为 PC 上的虚拟网卡和物理网卡是二层设备不在一个广播域，也无法路由
（2）虚拟机——虚拟交换机——VMware 的虚拟 NAT 设备——PC 上的物理网卡——Internet。
二、主机发出的数据包走向（通过虚拟网卡发送）主机发送的其余包，均通过本地网卡转发
（1）PC——PC 上的虚拟网卡——虚拟交换机——虚拟机。主机到虚拟机的路径仅此一条&lt;/p>
&lt;p>结论：&lt;/p>
&lt;ol>
&lt;li>禁用虚拟网卡后虚拟机依然可以访问外网，但是 PC 无法访问虚拟机。因为第一条中的（2）和第二条中的（1）&lt;/li>
&lt;li>启用静态 IP 后，PC 可以访问虚拟机，但是虚拟机只能访问到虚拟网卡，外网不同。因为第一条中的（1）（2）&lt;/li>
&lt;/ol>
&lt;p>仅主机模式说明&lt;/p>
&lt;ol>
&lt;li>创建一个虚拟交换机，所有 VM 连接到该虚拟交换机上，即可实现通信&lt;/li>
&lt;/ol>
&lt;p>Nat 模型说明：&lt;/p>
&lt;ol>
&lt;li>如图所示，VM 访问外网时通过虚拟 NAT 设备来进行外网访问的，可以把虚拟 NAT 设备当做一个具备 nat 功能的路由器，所以当给 VM 配置静态 IP 的时候，如果想连接外网，需要把网关配置成这个虚拟 NAT 设备上上端口的 IP，一般为 XXX.XXX.XXX.2.&lt;/li>
&lt;li>其余说明详见图中红字&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gafu3p/1616124111669-8462c7ae-7e65-42c3-93e2-4162bdf5b29a.jpeg" alt="">&lt;/p></description></item><item><title>Docs: Vmware</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/vmware/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/vmware/</guid><description/></item><item><title>Docs: Xen</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/xen/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/xen/</guid><description>
&lt;p>在 Xen 使用的方法中，没有指令翻译。这是通过两种方法之一实现的。第一，使用一个能理解和翻译虚拟操作系统发出的未修改指令的 CPU（此方法称作完全虚拟化或 full virtualization）。另一种，修改操作系统，从而使它发出的指令最优化，便于在虚拟化环境中执行（此方法称作准虚拟化或 paravirtualization）。&lt;/p>
&lt;p>在 Xen 环境中，主要有两个组成部分。一个是虚拟机监控器（VMM），也叫 hypervisor。Hypervisor 层在硬件与虚拟机之间，是必须最先载入到硬件的第一层。Hypervisor 载入后，就可以部署虚拟机了。在 Xen 中，虚拟机叫做“domain”。在这些虚拟机中，其中一个扮演着很重要的角色，就是 domain0，具有很高的特权。通常，在任何虚拟机之前安装的操作系统才有这种特权。&lt;/p>
&lt;p>Domain0 要负责一些专门的工作。由于 hypervisor 中不包含任何与硬件对话的驱动，也没有与管理员对话的接口，这些驱动就由 domain0 来提供了。通过 domain0，管理员可以利用一些 Xen 工具来创建其它虚拟机（Xen 术语叫 domainU）。这些 domainU 也叫无特权 domain。这是因为在基于 i386 的 CPU 架构中，它们绝不会享有最高优先级，只有 domain0 才可以。&lt;/p>
&lt;p>在 domain0 中，还会载入一个 xend 进程。这个进程会管理所有其它虚拟机，并提供这些虚拟机控制台的访问。在创建虚拟机时，管理员使用配置程序与 domain0 直接对话。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/fpcdzk/1616124139353-6dccbc0f-787a-4305-8851-45f3e17c8162.jpeg" alt="">&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/fpcdzk/1616124139376-0a4f6b44-7eef-419c-ad71-617061d9e6d2.jpeg" alt="">&lt;/p>
&lt;h1 id="xen-的组成部分">Xen 的组成部分：&lt;/h1>
&lt;ol>
&lt;li>Xen Hypervisor：分配 CPU、Memory、Interrupt&lt;/li>
&lt;li>Domain0：特权域，安装完 Hypervisor 后，自动生成的一个特权 Virtual Machine，负责管理整个 Xen 的 VM，可以直接访问硬件 IO 资源，修改 Linux Kernel 以实现半虚拟化功能
&lt;ol>
&lt;li>提供管理 DomainU 的工具栈，用于实现对虚拟机进行添加，启动，快照，停止，删除等操作&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>DomainU：非特权域，U 是各个虚拟机的编号 1,2,3,4,&amp;hellip;..，受 Domain0 管理
&lt;ol>
&lt;li>PV：不依赖于 CPU 的 HVM 特性，但要求 GusetOS 的内核做出修改以直销自己运行于 PV 环境&lt;/li>
&lt;li>HVM：依赖于 Intel VT 或 AMD AMD-V，还要依赖于 Qemu 来模拟 IO 设备&lt;/li>
&lt;li>PV on HVM：CPU 为 HVM 模式运行，IO 设备为 PV 模式运行&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>Xen 的工具栈&lt;/p>
&lt;ol>
&lt;li>xm/xend：在 Xen Hypervisor 的 Domain0 中要启动 xend 服务&lt;/li>
&lt;li>xm：命令行管理工具，有诸多子命令&lt;/li>
&lt;li>xl：基于 libxenlight 提供的轻量级的命令行工具栈&lt;/li>
&lt;li>xe/xapi：提供了对 Xen 管理的 api，因此多用于 cloud 环境中&lt;/li>
&lt;li>virsh/libvirt：&lt;/li>
&lt;/ol>
&lt;p>XenStore：为各 Domain 提供的共享信息存储空间，有着层级结构的名称空间，位于 Domain0 上&lt;/p></description></item><item><title>Docs: 虚拟化管理</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;h1 id="扩大-kvm-虚拟机-image-镜像">扩大 KVM 虚拟机 image 镜像&lt;/h1>
&lt;p>直接使用 qemu-img resize 的时候一定要先备份镜像。先使用 virsh shutdown VM 关闭镜像再进行如下操作：&lt;/p>
&lt;ul>
&lt;li>给原始系统文件添加磁盘空间
&lt;ul>
&lt;li>qemu-img resize centos7-baseImage-50G.qcow2 +500G&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>进入虚拟机操作新建硬盘分区
&lt;ul>
&lt;li>parted /dev/vda mkpart primary XXX 100%(XX 改为指定的最后一块扇区的容量)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>扩容 LVM，注意/dev/vda4 设备为真实情况的设备名称，注意修改
&lt;ul>
&lt;li>partprobe(可能还需要重启)&lt;/li>
&lt;li>pvcreate /dev/vda4&lt;/li>
&lt;li>vgextend vg0 /dev/vda4&lt;/li>
&lt;li>lvextend -l+100%FREE /dev/mapper/vg0-root
&lt;ul>
&lt;li>这里可以使用 lvextend -l +单元数量 /dev/mapper/vg0-lv101&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>扩展文件系统大小，注意/dev/mapper/vg0-root 修改为真实情况的分区路径
&lt;ul>
&lt;li>xfs_growfs /dev/mapper/vg0-root&lt;/li>
&lt;li>或者普通文件系统使用下面的命令&lt;/li>
&lt;li>resize2fs /dev/mapper/vg0-root (-f 强制扩展)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="通过-veth-设备查找对应的虚拟机">通过 veth 设备查找对应的虚拟机&lt;/h1>
&lt;p>通过 xml 文件查看虚拟机的 mac 地址&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># grep &amp;#34;mac addr&amp;#34; lchTest.xml&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;mac address&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;52:54:00:6a:86:89&amp;#39;&lt;/span>/&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>筛选网络设备 mac&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># ip a | grep &amp;#34;86:89&amp;#34; -B 1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>127: vnet1: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu &lt;span style="color:#ae81ff">1500&lt;/span> qdisc pfifo_fast master br1 state UNKNOWN group default qlen &lt;span style="color:#ae81ff">1000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> link/ether fe:54:00:6a:86:89 brd ff:ff:ff:ff:ff:ff
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>由此可见，vnet 设备的 mac 与虚拟机的 mac 在后面几位是永远保持一致的，所以可以通过 vnet 设备的 mac ，从所有虚拟机中的 xml 进行筛选就行可以找到 vnet 设备对应的虚拟机了。&lt;/p>
&lt;h2 id="应用实例">应用实例&lt;/h2>
&lt;p>比如我现在能看到 4 个 vnet 设备。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># ip a&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.....
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>62: vnet3: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu &lt;span style="color:#ae81ff">1500&lt;/span> qdisc pfifo_fast master br1 state UNKNOWN group default qlen &lt;span style="color:#ae81ff">1000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> link/ether fe:54:00:5c:11:85 brd ff:ff:ff:ff:ff:ff
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> inet6 fe80::fc54:ff:fe5c:1185/64 scope link
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> valid_lft forever preferred_lft forever
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>79: vnet0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu &lt;span style="color:#ae81ff">1500&lt;/span> qdisc mq master br1 state UNKNOWN group default qlen &lt;span style="color:#ae81ff">1000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> link/ether fe:54:00:68:20:51 brd ff:ff:ff:ff:ff:ff
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> inet6 fe80::fc54:ff:fe68:2051/64 scope link
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> valid_lft forever preferred_lft forever
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>127: vnet1: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu &lt;span style="color:#ae81ff">1500&lt;/span> qdisc pfifo_fast master br1 state UNKNOWN group default qlen &lt;span style="color:#ae81ff">1000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> link/ether fe:54:00:6a:86:89 brd ff:ff:ff:ff:ff:ff
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> inet6 fe80::fc54:ff:fe6a:8689/64 scope link
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> valid_lft forever preferred_lft forever
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>139: vnet2: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu &lt;span style="color:#ae81ff">1500&lt;/span> qdisc pfifo_fast master br1 state UNKNOWN group default qlen &lt;span style="color:#ae81ff">1000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> link/ether fe:54:00:3a:95:ef brd ff:ff:ff:ff:ff:ff
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> inet6 fe80::fc54:ff:fe3a:95ef/64 scope link
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> valid_lft forever preferred_lft forever
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我想看看 vnet3 是关联到哪个虚拟机上了，就可以进行如下操作：(首先看到 vnet3 的 mac 为 fe:54:00:5c:11:85)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># grep -r &amp;#34;5c:11:85&amp;#34; /etc/libvirt/qemu/*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/etc/libvirt/qemu/cobbler.test.tjiptv.net.xml: &amp;lt;mac address&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;52:54:00:5c:11:85&amp;#39;&lt;/span>/&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这时候可以看到，是 cobbler.test.tjiptv.net.xml 这台虚拟机在使用 vnet3 。&lt;/p></description></item><item><title>Docs: 虚拟化管理</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/</guid><description/></item></channel></rss>