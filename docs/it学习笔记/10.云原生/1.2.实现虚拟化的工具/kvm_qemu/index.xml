<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – KVM_QEMU</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/kvm_qemu/</link><description>Recent content in KVM_QEMU on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/kvm_qemu/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: KVM_QEMU 管理</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/kvm_qemu/kvm_qemu-%E7%AE%A1%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/kvm_qemu/kvm_qemu-%E7%AE%A1%E7%90%86/</guid><description/></item><item><title>Docs: KVM_QEMU 命令行工具</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/kvm_qemu/kvm_qemu-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/kvm_qemu/kvm_qemu-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</guid><description/></item><item><title>Docs: KVM/QEMU 部署</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/kvm_qemu/kvm_qemu-%E9%83%A8%E7%BD%B2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/kvm_qemu/kvm_qemu-%E9%83%A8%E7%BD%B2/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/configuring_and_managing_virtualization/index#enabling-virtualization-in-rhel8_virt-getting-started">https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/configuring_and_managing_virtualization/index#enabling-virtualization-in-rhel8_virt-getting-started&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://ubuntu.com/server/docs/virtualization-introduction">Ubuntu 官方文档，虚拟化介绍&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="前期准备">前期准备&lt;/h1>
&lt;p>查看 CPU 是否支持 KVM，筛选出来相关信息才可以正常使用 KVM&lt;/p>
&lt;ul>
&lt;li>egrep &amp;ldquo;(svm|vmx)&amp;rdquo; /proc/cpuinfo&lt;/li>
&lt;/ul>
&lt;h1 id="安装虚拟化组件">安装虚拟化组件&lt;/h1>
&lt;h2 id="centos">CentOS&lt;/h2>
&lt;ul>
&lt;li>yum group install -y &amp;lsquo;Virtualization Host&amp;rsquo; # 安装虚拟化组
&lt;ul>
&lt;li>若安装完成后，模块未装载，则手动装载 KVM 模块
&lt;ul>
&lt;li>modprobe kvm&lt;/li>
&lt;li>modprobe kvm-intel&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>验证系统是否已经准备好称为虚拟化主机
&lt;ul>
&lt;li>virt-host-validate&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>启动 libvirt 服务
&lt;ul>
&lt;li>systemctl enable libvirtd &amp;ndash;now&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>创建连接使用命令
&lt;ul>
&lt;li>ln -sv /usr/libexec/qemu-kvm /usr/bin/&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>安装 X 服务端程序
&lt;ul>
&lt;li>yum install -y xorg-x11-xauth xorg-x11-server-utils&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>安装图形管理工具
&lt;ul>
&lt;li>yum install virt-manager -y&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>安装 qemu 以模拟 I/O 设备
&lt;ul>
&lt;li>yum install qemu-system-x86 qemu-img -y&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>安装 virt 安装命令
&lt;ul>
&lt;li>yum install virt-install -y&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>安装虚拟机文件系统的管理工具
&lt;ul>
&lt;li>yum install libguestfs-tools -y&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="ubuntu">Ubuntu&lt;/h2>
&lt;p>检查环境&lt;/p>
&lt;ul>
&lt;li>sudo apt update&lt;/li>
&lt;li>sudo apt install -y cpu-checker&lt;/li>
&lt;li>kvm-ok&lt;/li>
&lt;/ul>
&lt;p>ln -sv /usr/bin/kvm /usr/bin/
安装虚拟化环境&lt;/p>
&lt;ul>
&lt;li>sudo apt install -y qumu-kvm libvirt-daemon-system libvirt-daemon libvirt-clients&lt;/li>
&lt;/ul>
&lt;p>安装虚拟机文件系统的管理工具&lt;/p>
&lt;ul>
&lt;li>apt install libguestfs-tools -y&lt;/li>
&lt;/ul>
&lt;h1 id="安转-vpn-与桌面可选">安转 VPN 与桌面(可选)&lt;/h1>
&lt;h2 id="centos-1">CentOS&lt;/h2>
&lt;ul>
&lt;li>yum install -y tigervnc-server # 安装 vnc 服务端&lt;/li>
&lt;li>yum groups install -y &amp;lsquo;GNOME Desktop&amp;rsquo; #&lt;/li>
&lt;/ul>
&lt;h1 id="其他">其他&lt;/h1>
&lt;p>yum -y install mesa-libGLES-devel.x86_64 mesa-dri-drivers
若不安装这两个包，当使用 virt-mangaer 工具是，可能会出现如下报错：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>libGL error: unable to load driver: swrast_dri.so
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>libGL error: failed to load driver: swrast
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: KVM/QEMU 管理</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/kvm_qemu/kvm_qemu-%E7%AE%A1%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/kvm_qemu/kvm_qemu-%E7%AE%A1%E7%90%86/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;h1 id="多-kvmqemu-集中管理">多 KVM/QEMU 集中管理&lt;/h1>
&lt;p>除了 OpenStack 以外，市面上没有多少可以批量管理 KVM 主机的项目&lt;del>&lt;del>o(╯□╰)o&lt;/del>&lt;/del> 唯一能搜到的只有一个 WebVirtCloud ~~~~
为什么要用 Python 写前端呢。。。裂开了。。。。o(╯□╰)o&lt;/p>
&lt;h2 id="webvirtcloud">WebVirtCloud&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/retspen/webvirtmgr">GitHub 项目，retspen/webvirtmgr&lt;/a>(已于 2018 年停止更新，被 webvirtcloud 代替)&lt;/li>
&lt;li>&lt;a href="https://github.com/retspen/webvirtcloud">GitHub 项目，retspen/webvirtcloud&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>WebVirtCloud 是一个由 Python 的 Web 框架 Django 编写的前后端一体项目。
WebVirtCloud 有多个组件&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Nginx&lt;/strong> 监听 80 端口，入口，用来响应 &lt;code>/static/&lt;/code> 下的各种静态资源&lt;/li>
&lt;li>&lt;strong>Webvirtcloud&lt;/strong> 监听 8000 端口，处理 &lt;code>IP:PORT/&lt;/code> 路径的访问请求，展示出的进程名为 gunicorn
&lt;ul>
&lt;li>Gunicorn(Green Unicorn) 是一个 UNIX 下符合 &lt;a href="https://en.wikipedia.org/wiki/Web_Server_Gateway_Interface">WSGI&lt;/a> 规范的 HTTP 服务器(说简单点就是一个类似 Nginx 程序)。
&lt;ul>
&lt;li>WSGI 指定了“web 服务器”和“Python web 应用/ web 框架”之间的标准接口，以提高 web 应用在一系列 web 服务器间的移植性。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Novnc&lt;/strong> 监听 6080 端口，处理 &lt;code>IP:PORT/novncd/&lt;/code> 路径的访问请求，展示出的进程名为 novncd&lt;/li>
&lt;/ul>
&lt;p>WebVirtCloud 在容器中通过老式的 runsvdir 运行，runsvdir 会读取 -P 选项指定的目录，可以看到，runsv 程序后的参数，就是 /etc/service/ 目录下的目录名&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>root@e7d4f80811cb:~# ll /etc/service
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">22&lt;/span> Nov &lt;span style="color:#ae81ff">16&lt;/span> &lt;span style="color:#ae81ff">2017&lt;/span> /etc/service -&amp;gt; runit/runsvdir/default/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root@e7d4f80811cb:~# ll /etc/runit/runsvdir/default/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>total &lt;span style="color:#ae81ff">40&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">4096&lt;/span> Jun &lt;span style="color:#ae81ff">2&lt;/span> 15:16 ./
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">4096&lt;/span> Sep &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#ae81ff">2021&lt;/span> ../
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">4096&lt;/span> Jun &lt;span style="color:#ae81ff">3&lt;/span> 06:29 cron/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">4096&lt;/span> Jun &lt;span style="color:#ae81ff">3&lt;/span> 06:29 nginx/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">4096&lt;/span> Jun &lt;span style="color:#ae81ff">3&lt;/span> 06:29 nginx-log-forwarder/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">4096&lt;/span> Jun &lt;span style="color:#ae81ff">3&lt;/span> 06:29 novnc/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">4096&lt;/span> Jun &lt;span style="color:#ae81ff">3&lt;/span> 06:29 sshd/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">4096&lt;/span> Jun &lt;span style="color:#ae81ff">3&lt;/span> 07:05 webvirtcloud/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root@e7d4f80811cb:~# ps -ef f
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root &lt;span style="color:#ae81ff">1616850&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 14:29 ? Sl 0:00 /usr/local/bin/containerd-shim-runc-v2 -namespace moby -id e7d4f80811cb5aaeec2cbc132a5995dac13ae4c25d21528d421d9d5c1481b36f -address /run/containerd/containerd.sock
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root &lt;span style="color:#ae81ff">1616872&lt;/span> &lt;span style="color:#ae81ff">1616850&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 14:29 ? Ss 0:00 &lt;span style="color:#ae81ff">\_&lt;/span> /usr/bin/python3 -u /sbin/my_init
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root &lt;span style="color:#ae81ff">1616921&lt;/span> &lt;span style="color:#ae81ff">1616872&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 14:29 ? S 0:00 | &lt;span style="color:#ae81ff">\_&lt;/span> /usr/sbin/syslog-ng --pidfile /var/run/syslog-ng.pid -F --no-caps
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root &lt;span style="color:#ae81ff">1616928&lt;/span> &lt;span style="color:#ae81ff">1616872&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 14:29 ? S 0:00 | &lt;span style="color:#ae81ff">\_&lt;/span> /usr/bin/runsvdir -P /etc/service
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root &lt;span style="color:#ae81ff">1616929&lt;/span> &lt;span style="color:#ae81ff">1616928&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 14:29 ? Ss 0:00 | &lt;span style="color:#ae81ff">\_&lt;/span> runsv cron
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root &lt;span style="color:#ae81ff">1616935&lt;/span> &lt;span style="color:#ae81ff">1616929&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 14:29 ? S 0:00 | | &lt;span style="color:#ae81ff">\_&lt;/span> /usr/sbin/cron -f
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root &lt;span style="color:#ae81ff">1616930&lt;/span> &lt;span style="color:#ae81ff">1616928&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 14:29 ? Ss 0:00 | &lt;span style="color:#ae81ff">\_&lt;/span> runsv sshd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root &lt;span style="color:#ae81ff">1616931&lt;/span> &lt;span style="color:#ae81ff">1616928&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 14:29 ? Ss 0:00 | &lt;span style="color:#ae81ff">\_&lt;/span> runsv webvirtcloud
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>www-data &lt;span style="color:#ae81ff">1616938&lt;/span> &lt;span style="color:#ae81ff">1616931&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 14:29 ? S 0:00 | | &lt;span style="color:#ae81ff">\_&lt;/span> /srv/webvirtcloud/venv/bin/python3 /srv/webvirtcloud/venv/bin/gunicorn webvirtcloud.wsgi:application -c /srv/webvirtcloud/gunicorn.conf.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>www-data &lt;span style="color:#ae81ff">1616948&lt;/span> &lt;span style="color:#ae81ff">1616938&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 14:29 ? Sl 0:00 | | &lt;span style="color:#ae81ff">\_&lt;/span> /srv/webvirtcloud/venv/bin/python3 /srv/webvirtcloud/venv/bin/gunicorn webvirtcloud.wsgi:application -c /srv/webvirtcloud/gunicorn.conf.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>www-data &lt;span style="color:#ae81ff">1616949&lt;/span> &lt;span style="color:#ae81ff">1616938&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 14:29 ? Sl 0:00 | | &lt;span style="color:#ae81ff">\_&lt;/span> /srv/webvirtcloud/venv/bin/python3 /srv/webvirtcloud/venv/bin/gunicorn webvirtcloud.wsgi:application -c /srv/webvirtcloud/gunicorn.conf.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>www-data &lt;span style="color:#ae81ff">1616950&lt;/span> &lt;span style="color:#ae81ff">1616938&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 14:29 ? Sl 0:00 | | &lt;span style="color:#ae81ff">\_&lt;/span> /srv/webvirtcloud/venv/bin/python3 /srv/webvirtcloud/venv/bin/gunicorn webvirtcloud.wsgi:application -c /srv/webvirtcloud/gunicorn.conf.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>www-data &lt;span style="color:#ae81ff">1616951&lt;/span> &lt;span style="color:#ae81ff">1616938&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 14:29 ? Sl 0:00 | | &lt;span style="color:#ae81ff">\_&lt;/span> /srv/webvirtcloud/venv/bin/python3 /srv/webvirtcloud/venv/bin/gunicorn webvirtcloud.wsgi:application -c /srv/webvirtcloud/gunicorn.conf.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>www-data &lt;span style="color:#ae81ff">1616953&lt;/span> &lt;span style="color:#ae81ff">1616938&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 14:29 ? Sl 0:00 | | &lt;span style="color:#ae81ff">\_&lt;/span> /srv/webvirtcloud/venv/bin/python3 /srv/webvirtcloud/venv/bin/gunicorn webvirtcloud.wsgi:application -c /srv/webvirtcloud/gunicorn.conf.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root &lt;span style="color:#ae81ff">1616932&lt;/span> &lt;span style="color:#ae81ff">1616928&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 14:29 ? Ss 0:00 | &lt;span style="color:#ae81ff">\_&lt;/span> runsv novnc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>www-data &lt;span style="color:#ae81ff">1616939&lt;/span> &lt;span style="color:#ae81ff">1616932&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 14:29 ? Sl 0:00 | | &lt;span style="color:#ae81ff">\_&lt;/span> /srv/webvirtcloud/venv/bin/python3 /srv/webvirtcloud/console/novncd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root &lt;span style="color:#ae81ff">1616933&lt;/span> &lt;span style="color:#ae81ff">1616928&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 14:29 ? Ss 0:00 | &lt;span style="color:#ae81ff">\_&lt;/span> runsv nginx-log-forwarder
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root &lt;span style="color:#ae81ff">1616940&lt;/span> &lt;span style="color:#ae81ff">1616933&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 14:29 ? S 0:00 | | &lt;span style="color:#ae81ff">\_&lt;/span> tail -F /var/log/nginx/error.log
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root &lt;span style="color:#ae81ff">1616934&lt;/span> &lt;span style="color:#ae81ff">1616928&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 14:29 ? Ss 0:00 | &lt;span style="color:#ae81ff">\_&lt;/span> runsv nginx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root &lt;span style="color:#ae81ff">1616943&lt;/span> &lt;span style="color:#ae81ff">1616934&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 14:29 ? S 0:00 | &lt;span style="color:#ae81ff">\_&lt;/span> nginx: master process /usr/sbin/nginx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>www-data &lt;span style="color:#ae81ff">1616944&lt;/span> &lt;span style="color:#ae81ff">1616943&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 14:29 ? S 0:00 | &lt;span style="color:#ae81ff">\_&lt;/span> nginx: worker process
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>www-data &lt;span style="color:#ae81ff">1616945&lt;/span> &lt;span style="color:#ae81ff">1616943&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 14:29 ? S 0:00 | &lt;span style="color:#ae81ff">\_&lt;/span> nginx: worker process
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="部署">部署&lt;/h3>
&lt;h4 id="构建镜像">构建镜像&lt;/h4>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/retspen/webvirtcloud/wiki/Docker-Installation-&amp;amp;-Update">GitHub 项目 Wiki，Docker Installation &amp;amp; Update&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>执行完第二步 Clone 代码后，需要修改一下 db.sqlite3 保存位置，以便可以将数据库挂载到容器外部，默认情况下数据库文件在根目录跟很多文件在一起，并且没法修改数据保存位置。。。。o(╯□╰)o
代码：&lt;code>webvirtcloud/settings.py.template&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>DATABASES &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;default&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ENGINE&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;django.db.backends.sqlite3&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># &amp;#34;NAME&amp;#34;: Path.joinpath(BASE_DIR, &amp;#34;db.sqlite3&amp;#34;),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 改为下面的代码&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;NAME&amp;#34;&lt;/span>: Path&lt;span style="color:#f92672">.&lt;/span>joinpath(BASE_DIR, &lt;span style="color:#e6db74">&amp;#34;data/db.sqlite3&amp;#34;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后继续执行后续构建操作即可。&lt;/p>
&lt;blockquote>
&lt;p>注意：构建镜像时，将会初始化数据库，生成所需的各种表&lt;/p>
&lt;/blockquote>
&lt;h4 id="运行">运行&lt;/h4>
&lt;p>准备目录&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>mkdir -p /opt/webvirtcloud/&lt;span style="color:#f92672">{&lt;/span>ssh,data&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 将构建时初始化的数据库文件拷贝到本地&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker run --rm -d --name webvirtcloud lchdzh/webvirtcloud
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker cp webvirtcloud:/srv/webvirtcloud/data/db.sqlite3 /opt/webvirtcloud/data/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker stop webvirtcloud
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>chown -R www-data:www-data /opt/webvirtcloud/&lt;span style="color:#f92672">{&lt;/span>ssh,data&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>nerdctl run -d --name webvirtcloud &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --network host &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -v /opt/webvirtcloud/data:/srv/webvirtcloud/data &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -v /opt/webvirtcloud/ssh:/var/www/.ssh &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> lchdzh/webvirtcloud
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在容器中生成密钥，禁用 StrictHostKeyChecking&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>cat &amp;gt; ~www-data/.ssh/config &lt;span style="color:#e6db74">&amp;lt;&amp;lt; EOF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">Host *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">StrictHostKeyChecking no
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>chown www-data -R ~www-data/.ssh/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>chown www-data -R /srv/webvirtcloud/data
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>setuser www-data ssh-keygen -t rsa -P &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span> -f /var/www/.ssh/id_rsa
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>setuser www-data ssh-copy-id -i /var/www/.ssh/id_rsa.pub root@192.168.0.10
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: KVM/QEMU 镜像管理</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/kvm_qemu/kvm_qemu-%E9%95%9C%E5%83%8F%E7%AE%A1%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/kvm_qemu/kvm_qemu-%E9%95%9C%E5%83%8F%E7%AE%A1%E7%90%86/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qemu-project.gitlab.io/qemu/system/images.html">官方文档，系统模拟-磁盘镜像&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/qemu/qemu/blob/master/docs/interop/qcow2.txt">GitHub 文档，qemu/qemu/docs/interop/qcow2.txt&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Qcow">Wiki,qcow&lt;/a>&lt;/li>
&lt;li>其他
&lt;ul>
&lt;li>&lt;a href="https://www.unixmen.com/qemu-kvm-using-copy-write-mode/">https://www.unixmen.com/qemu-kvm-using-copy-write-mode/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://opengers.github.io/virtualization/kvm-libvirt-qemu-5/">https://opengers.github.io/virtualization/kvm-libvirt-qemu-5/&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>KVM/QEMU 通过 &lt;code>[qemu-img](https://www.yuque.com/desistdaydream/learning/hnav1v)&lt;/code> 命令行工具管理虚拟机镜像。&lt;/p>
&lt;h1 id="qemu-copy-on-write">QEMU Copy On Write&lt;/h1>
&lt;p>注意：&lt;/p>
&lt;ul>
&lt;li>使用该特性创建出来虚拟机之后，整个快照链的根节点(i.e.backingfile 虚拟机)一定要不有任何更改，否则会导致基于其创建的其他所有虚拟机文件系统出现问题。比如变成 read-only 状态。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>QEMU Copy On Write(QEMU 写时复制，简称 QCOW)&lt;/strong> 是 QEMU 创建的虚拟机使用的磁盘镜像文件的文件格式。&lt;/p>
&lt;p>当使用 QCOW 时，不会对原始磁盘映像应用任何更改。所有更改都记录在其他的 QCOW 文件中。多个 QCOW 文件可以指向同一个镜像，而不会危及基本系统。QEMU/KVM 允许将 QCOW 文件的更改合并到原始图像中。&lt;/p>
&lt;h1 id="-修改-backingfile-后导致依赖-backingfile-的虚拟机的文件系统httpswwwcnblogscomfengrenzwp3383773html">&lt;a href="https://www.cnblogs.com/fengrenzw/p/3383773.html"> 修改 backingfile 后，导致依赖 backingfile 的虚拟机的文件系统&lt;/a>&lt;/h1>
&lt;p>&lt;a href="https://www.cnblogs.com/fengrenzw/p/3383773.html">https://www.cnblogs.com/fengrenzw/p/3383773.html&lt;/a>
我们知道 qcow2 的磁盘格式可以带来很大的便利性，因为部署的时候可以减少大量的时间、空间，可以增量备份、快照等非常诱人的特性。
因为下边可能会有点绕：
backing_file：后端，母镜像
qcow2：前端，子镜像
在使用的时候可能会遇到一种情况，就是使用 backing_file 时，如果修改了 backing_file，“可能”会导致前端的 qcow2 的崩溃，出现这种问题个人觉得是很正常的，并且是可以完全避免的。所以，在 openstack 在使用 qcow2 的过程中会使用 glance 镜像管理来保证它的安全和完整性，我们在使用 qcow2 的时候也务必不回去修改它。
至于为什么会出现这种现象，下面简单分析一下，可能会有些纰漏、错误，但感觉整体思路上不会有太大的偏差。
什么是 qcow2？
之前的博客也讲述过，qcow2：就是 qemu 的 cow 磁盘的第 2 版。既然是 cow，必然是创建的前端磁盘内容是“空”的，即只有 qcow2 磁盘格式的数据结构（当然包含 backing_file 的指针），而不包含任何磁盘内应该存放的实际内容。
我们启动虚拟机的时候，指定的是 qcow2，但同时会加载 backing_file（使用 qmp，info block 可以查看，或者/proc/$pid/fd/）。当读取文件的时候，根据 qcow2 内部的指针指向 backing_file，读取 backing_file 磁盘块上的内容。如果需要修改文件，则修改后的文件会保存到 qcow2 文件上。
那我们在使用 backing_file 特性时，再修改 backing_file（后端）时可能就出现大概三种情况：&lt;/p>
&lt;ul>
&lt;li>backing_ing 删除或修改了 qcow2 中没修改过的内容&lt;/li>
&lt;/ul>
&lt;p>因为 qcow2 本来就没有什么数据，所有能查看到的数据都是通过 backing_file 的指针查看到的，所以当 backing_file 修改了，qcow2 还是直接去读 backing_file，就相当于同步了，并不会有冲突或腐败。&lt;/p>
&lt;ul>
&lt;li>backing_ing 删除或修改了 qcow2 中修改过的内容&lt;/li>
&lt;/ul>
&lt;p>因为 qcow2 的 cow 机制，修改后的文件会保存到 qcow2 文件中，所以 backing_file 修改不会对 qcow2 文件造成任何影响，因为压根就没去读 backing_file。（但有个前提，修改的幅度不应太大，如果文件的 inode 也变了，可能会造成冲突和错误（不过，这都不是重点！）&lt;/p>
&lt;ul>
&lt;li>backing_ing 创建了 qcow2 中没有的内容&lt;/li>
&lt;/ul>
&lt;p>这种情况有点复杂，因为创建文件肯定会影响到文件系统的 inode，如果这个 inode 没有在 qcow2 做修改的话，会直接读取 backing_file,自然能够找到新添加的文件，如果 qcow2 的文件系统内的 inode 做了修改，我按照我自己的 inode 去找 backing_file 中的 block 发现对应不上，就会照成文件系统的损坏甚至崩溃；另一种情况是在 qcow2 中删除了一些文件或者将某个目录清空，然而在 backing_file 又在这个目录写了一些东西，qcow2 中的 inode 中可能去查看到这个数据，但因为 qcow2 中的这块数据已经修改，不会去查看 backing_file，就会导致有了 inode，但找不到 block。无论是有 inode 查看不到 block 还是 inode 删除，但 block 还在，不是我们所希望的。&lt;/p>
&lt;p>所以，如果使用 qcow2 的 backing_file，请务必保证其安全和完整性。&lt;/p></description></item><item><title>Docs: KVM/QEMU 命令行工具</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/kvm_qemu/kvm_qemu-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/kvm_qemu/kvm_qemu-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.qemu.org/docs/master/system/qemu-manpage.html">官方文档，QEMU 用户文档&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.qemu.org/docs/master/system/invocation.html">官方文档，系统模拟-Invocation&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.qemu.org/docs/master/tools/index.html">官方文档，工具&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>KVM/QEMU 的虚拟机的生命周期是通过一系列 KVM/QEMU 工具集管理的，包括&lt;/p>
&lt;ul>
&lt;li>&lt;strong>qemu-img&lt;/strong> # 虚拟机镜像管理工具&lt;/li>
&lt;li>&lt;strong>qemu-system-x86_64&lt;/strong> # 虚拟机运行时管理工具。
&lt;ul>
&lt;li>注意：在 CentOS 系统中，该二进制文件的名字是 qemu-kvm，并且是一个在 /usr/local/bin/qemu-kvm 指向 /usr/libexec/qemu-kvm 的软链接&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>等等&lt;/li>
&lt;/ul>
&lt;p>通常情况下，我们不管是通过 virt-manager 程序创建的虚拟机、还是使用 Libvirt 工具包创建的虚拟机，本质上，都是调用的 &lt;strong>qemu-img、qemu-system-x86_64&lt;/strong> 等工具。&lt;/p>
&lt;p>如果用容器比较的话&lt;/p>
&lt;ul>
&lt;li>qemu-img 像各种容器镜像管理工具&lt;/li>
&lt;li>qemu-system-x86_64 像 runc&lt;/li>
&lt;/ul>
&lt;h1 id="heading">&lt;/h1>
&lt;h1 id="heading-1">&lt;/h1></description></item><item><title>Docs: KVM/QEMU 运行时管理</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/kvm_qemu/kvm_qemu-%E8%BF%90%E8%A1%8C%E6%97%B6%E7%AE%A1%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/kvm_qemu/kvm_qemu-%E8%BF%90%E8%A1%8C%E6%97%B6%E7%AE%A1%E7%90%86/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;h2 id="参考">参考：&lt;/h2>
&lt;/blockquote>
&lt;p>KVM/QEMU 通过 &lt;code>[qemu-system-x86_64](https://www.yuque.com/desistdaydream/learning/zf85s7)&lt;/code> 命令行工具管理虚拟机运行时&lt;/p></description></item><item><title>Docs: QEMU Guest Agent</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/kvm_qemu/qemu-guest-agent/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/kvm_qemu/qemu-guest-agent/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.qemu.org/docs/master/interop/qemu-ga.html">官方文档，系统模拟管理和互操作性-QEMU 客户机代理&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.qemu.org/docs/master/interop/qemu-ga-ref.html">官方文档，系统模拟管理和互操作性-QEMU 客户机代理协议参考&lt;/a>(i.e.QGA 的 QMP API 参考文档)&lt;/li>
&lt;li>&lt;a href="https://wiki.qemu.org/Features/GuestAgent">https://wiki.qemu.org/Features/GuestAgent&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.toutiao.com/i6646012291059810823/">https://www.toutiao.com/i6646012291059810823/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.shuzhiduo.com/A/QV5ZgK76dy/">https://www.shuzhiduo.com/A/QV5ZgK76dy/&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>QEMU Guest Agent(QEMU 虚拟机代理，简称 QGA)&lt;/strong> 是一个类似于 VMware Tools 的工具，用来辅助 Hypervisor 实现对 VM 的管理。&lt;/p>
&lt;p>QEMU Guest Agent 旨在通过标准的 **QEMU Monitor Protocol(QEMU 监控协议，简称 QMP) **命令，实现 VM 与 宿主机 之间数据交互的功能。(比如可以在不登陆 VM 的情况下，让 VM 执行某些命令或者直接获取 VM 的信息)&lt;/p>
&lt;h2 id="qemu-guest-agent-架构">QEMU Guest Agent 架构&lt;/h2>
&lt;p>QGA 功能的实现与 虚拟化 I/O 的实现，是相同的原理。KVM/QEMU 会在 VM 中模拟一个 I/O 设备，并通过 ID 关联到宿主机的某个文件或设备上，这样就可以实现宿主机与虚拟机之间的交互。其实说白了，这个年代基本都是半虚拟化设备的实现方式，通过两部分来实现完整的功能：&lt;/p>
&lt;ol>
&lt;li>Host Device # 宿主机设备
&lt;ol>
&lt;li>**socket(套接字)&lt;strong>是宿主机中实现 QGA 的设备&lt;/strong>。**也可以是其他未来待发明的东西。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Guest Driver # 虚拟机驱动
&lt;ol>
&lt;li>**virtio-serial(半虚拟化的串口设备)&lt;strong>是 VM 中实现 QGA 的设备&lt;/strong>。**也可以是 isa-serial 等模拟设备。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>除了基本的半虚拟化设备，VM 中还需要一个程序来处理宿主机发来的 QMP 命令：&lt;/p>
&lt;ul>
&lt;li>一个名为 &lt;strong>qemu-ga&lt;/strong> 的二进制文件。&lt;/li>
&lt;/ul>
&lt;p>默认情况下，qemu-ga 会监听 VM 中的 virtio-serial(默认为 /dev/virtio-ports/org.qemu.guest_agent.0) 串口设备。这样一来，所有从宿主机向 socket 发送的命令，都会传递到 virtio-serial 中，进而被监听该设备的 qemu-ga 接收，并处理该命令。&lt;/p>
&lt;blockquote>
&lt;p>/dev/virtio-ports/org.qemu.guest_agent.0 实际上是 /dev/vport1p1 的符号链接，这类设备名字都是 vport1pX 这种格式，X 从 0 开始&lt;/p>
&lt;/blockquote>
&lt;p>为了可以让 VM 实时处理 virtio-serial 中的数据，所以，qemu-ga 以守护程序的方式运行在宿主机上，这个守护程序默认为 qemu-guest-agent.service。&lt;/p>
&lt;p>&lt;strong>这样一来，qemu-ga、qemu-guest-agent.service、virtio-serial、socket 这四个东西，就组成了一个完整的 QGA 技术栈。&lt;/strong>
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/mxgyxv/1624240513497-c71382f6-ebc0-4486-a2de-68de15875a07.png" alt="image.png">&lt;/p>
&lt;h3 id="virtio-serial-和-socket-之间的数据通信路线">**virtio-serial **和 &lt;strong>socket 之间的数据通信路线&lt;/strong>&lt;/h3>
&lt;p>假如我现在启动如下虚拟机，在 宿主机上创建了一个 socket(/tmp/qga.sock)，并为 VM 模拟了一个 virtio-serial&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># qemu-kvm -m 4096 -smp 2 -name test \&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-drive file&lt;span style="color:#f92672">=&lt;/span>/var/lib/libvirt/images/test-2.bj-net.qcow2,format&lt;span style="color:#f92672">=&lt;/span>qcow2,if&lt;span style="color:#f92672">=&lt;/span>virtio &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>-netdev tap,id&lt;span style="color:#f92672">=&lt;/span>n1 &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>-device virtio-net-pci,netdev&lt;span style="color:#f92672">=&lt;/span>n1 &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>-vnc :3 &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>-chardev socket,path&lt;span style="color:#f92672">=&lt;/span>/tmp/qga.sock,server,nowait,id&lt;span style="color:#f92672">=&lt;/span>qga0 &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>-device virtio-serial &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>-device virtserialport,chardev&lt;span style="color:#f92672">=&lt;/span>qga0,name&lt;span style="color:#f92672">=&lt;/span>org.qemu.guest_agent.0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>查看 VM 的进程 和 socket&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># fuser qga.sock&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/tmp/qga.sock: &lt;span style="color:#ae81ff">267751&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># ps -ef f | grep 267751&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root &lt;span style="color:#ae81ff">267766&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 01:45 ? S 0:00 &lt;span style="color:#ae81ff">\_&lt;/span> &lt;span style="color:#f92672">[&lt;/span>kvm-pit/267751&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root &lt;span style="color:#ae81ff">267751&lt;/span> &lt;span style="color:#ae81ff">238001&lt;/span> &lt;span style="color:#ae81ff">99&lt;/span> 01:45 pts/3 Sl+ 0:36 | &lt;span style="color:#ae81ff">\_&lt;/span> qemu-kvm -m &lt;span style="color:#ae81ff">4096&lt;/span> -smp &lt;span style="color:#ae81ff">2&lt;/span> -name test -drive file&lt;span style="color:#f92672">=&lt;/span>/var/lib/libvirt/images/test-2.bj-net.qcow2,format&lt;span style="color:#f92672">=&lt;/span>qcow2,if&lt;span style="color:#f92672">=&lt;/span>virtio -netdev tap,id&lt;span style="color:#f92672">=&lt;/span>n1 -device virtio-net-pci,netdev&lt;span style="color:#f92672">=&lt;/span>n1 -vnc :3 -chardev socket,path&lt;span style="color:#f92672">=&lt;/span>/tmp/qga.sock,server,nowait,id&lt;span style="color:#f92672">=&lt;/span>qga0 -device virtio-serial -device virtserialport,chardev&lt;span style="color:#f92672">=&lt;/span>qga0,name&lt;span style="color:#f92672">=&lt;/span>org.qemu.guest_agent.0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到，qga.sock 被 267751 进程使用着，而这个进程就是我们启动的一台虚拟机。当连接该 socket 后，读写的数据都会经过 267751 进程，并根据其中的 chardev 与 virtserialport 的关系，将数据送到 qemu 模拟的 virtio-serial 设备上，进而被 VM 内的 qemu-ga 接受并处理。&lt;/p>
&lt;h2 id="qemu-monitor-protocol">&lt;strong>QEMU Monitor Protocol&lt;/strong>&lt;/h2>
&lt;p>&lt;strong>QEMU Monitor Protocol(QEMU 监控协议，简称 QMP)&lt;/strong>
可用的 QMP 命令详见：&lt;a href="https://www.yuque.com/go/doc/33175114">QMP 命令参考&lt;/a>&lt;/p>
&lt;h1 id="qemu-guest-agent-部署">QEMU Guest Agent 部署&lt;/h1>
&lt;p>有多种方式可以部署 QEMU Guest Agent&lt;/p>
&lt;h2 id="kvmqemu-创建-qga">KVM/QEMU 创建 QGA&lt;/h2>
&lt;p>首先启动一个 VM&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># qemu-kvm -m 4096 -smp 2 -name test \&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-drive file&lt;span style="color:#f92672">=&lt;/span>/var/lib/libvirt/images/test-2.bj-net.qcow2,format&lt;span style="color:#f92672">=&lt;/span>qcow2,if&lt;span style="color:#f92672">=&lt;/span>virtio &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>-netdev tap,id&lt;span style="color:#f92672">=&lt;/span>n1 &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>-device virtio-net-pci,netdev&lt;span style="color:#f92672">=&lt;/span>n1 &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>-vnc :3 &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>-chardev socket,path&lt;span style="color:#f92672">=&lt;/span>/tmp/qga.sock,server,nowait,id&lt;span style="color:#f92672">=&lt;/span>qga0 &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>-device virtio-serial &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>-device virtserialport,chardev&lt;span style="color:#f92672">=&lt;/span>qga0,name&lt;span style="color:#f92672">=&lt;/span>org.qemu.guest_agent.0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 VM 中安装 QGA，并启动(直接 yum 即可，&lt;strong>一般通过 libvirt 启动的虚拟机，都默认自带 qemu-guest-aent&lt;/strong>)。一般默认配置即可，如果 qemu-ga 未监听默认设备，修改配置文件，并重启服务即可。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>yum install qemu-guest-agent -y
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>systemctl start qemu-guest-agent.service &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> systemctl enable qemu-guest-agent.service
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在宿主机上然后使用 socat 连接 /tmp/qga.sock 即可开始使用 QGA。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># socat - unix:/tmp/qga.sock&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;execute&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;guest-get-host-name&amp;#34;&lt;/span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 这是发送给 QGA 的数据&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;return&amp;#34;&lt;/span>: &lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;host-name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;centos8-2004&amp;#34;&lt;/span>&lt;span style="color:#f92672">}}&lt;/span> &lt;span style="color:#75715e"># 这是 QGA 返回的数据&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="libvirt-创建-qga">libvirt 创建 QGA&lt;/h2>
&lt;p>libvrit 提供了专门的 DomainQemuAgentCommand API（对应 virsh qemu-agent-command 命令）来和 QGA 通讯，另外还有有些 libvirt 内置 api 也可以支持 QGA，例如 virsh 的 reboot、shutdown 等命令。&lt;/p>
&lt;p>&lt;strong>通过 libvirt 启动 KVM/QEMU 的虚拟机不需要做任何配置，默认就会自动创建一个 channel&lt;/strong>，VM 的 xml 中 channel 配置段如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">channel&lt;/span> &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;unix&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">target&lt;/span> &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;virtio&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;org.qemu.guest_agent.0&amp;#34;&lt;/span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">address&lt;/span> &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;virtio-serial&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">controller&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">bus&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">port&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#f92672">channel&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>默认情况，虚拟机启动后会在 /var/lib/libvirt/qemu/channel/target/DOMAIN/ 目录下生成一个名为 org.qemu.guest_agent.0 的 socket 文件，如果在 virt-manager 中查看该 channel 设备，也可以看到 Source path
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/mxgyxv/1616123963420-5de205c9-b9f1-4910-a984-12f711d617b1.png" alt="">
注意：该 socket 被 libvirtd 始终连接着，无法通过 socat 等工具再次连接使用，通过 fuser 命令可以看到占用该 socket 的进程(255192 就是 qemu-kvm 运行虚拟机的进程)：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># fuser org.qemu.guest_agent.0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/var/lib/libvirt/qemu/channel/target/domain-54-lichenhao.bj-net/org.qemu.guest_agent.0: &lt;span style="color:#ae81ff">255192&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>而在 VM 内部，默认情况下，会在 /dev 目录下生成也会自动生成串口设备，并自动生成 qemu-ga 文件，且启动 qemu-guest-agent.service 服务&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># ll /dev/virtio-ports/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>total &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">11&lt;/span> Nov &lt;span style="color:#ae81ff">21&lt;/span> 00:41 com.redhat.spice.0 -&amp;gt; ../vport1p2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">11&lt;/span> Nov &lt;span style="color:#ae81ff">21&lt;/span> 00:41 org.qemu.guest_agent.0 -&amp;gt; ../vport1p1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">11&lt;/span> Nov &lt;span style="color:#ae81ff">21&lt;/span> 00:41 org.qemu.guest_agent.1 -&amp;gt; ../vport1p3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>root@lichenhao ~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># systemctl status qemu-guest-agent.service&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>● qemu-guest-agent.service - QEMU Guest Agent
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Loaded: loaded &lt;span style="color:#f92672">(&lt;/span>/usr/lib/systemd/system/qemu-guest-agent.service; disabled; vendor preset: enabled&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Active: active &lt;span style="color:#f92672">(&lt;/span>running&lt;span style="color:#f92672">)&lt;/span> since Fri 2020-11-20 23:40:33 CST; 44min ago
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Main PID: &lt;span style="color:#ae81ff">826&lt;/span> &lt;span style="color:#f92672">(&lt;/span>qemu-ga&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Tasks: &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">(&lt;/span>limit: 23968&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Memory: 2.7M
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CGroup: /system.slice/qemu-guest-agent.service
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└─826 /usr/bin/qemu-ga --method&lt;span style="color:#f92672">=&lt;/span>virtio-serial --path&lt;span style="color:#f92672">=&lt;/span>/dev/virtio-ports/org.qemu.guest_agent.0 --blacklist&lt;span style="color:#f92672">=&lt;/span> -F/etc/qemu-ga/fsfreeze-hook
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#ae81ff">20&lt;/span> 23:40:33 lichenhao.bj-net systemd&lt;span style="color:#f92672">[&lt;/span>1&lt;span style="color:#f92672">]&lt;/span>: Started QEMU Guest Agent.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>此时，宿主机的 socket 与 VM 中的串口设备(/dev/virtio-ports/org.qemu.guest_agent.0) 之间建立了一条 channel&lt;/p>
&lt;p>然后宿主机通过 libvirt 的 API(即 virsh qemu-agent-command 命令)，即可向 VM 中发送指令，效果如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># virsh qemu-agent-command lichenhao.bj-net --pretty &amp;#39;{&amp;#34;execute&amp;#34;:&amp;#34;guest-get-osinfo&amp;#34;}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;return&amp;#34;&lt;/span>: &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;CentOS Linux&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;kernel-release&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;4.18.0-193.28.1.el8_2.x86_64&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;version&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;8 (Core)&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;pretty-name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;CentOS Linux 8 (Core)&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;version-id&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;8&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;kernel-version&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;#1 SMP Thu Oct 22 00:20:22 UTC 2020&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;machine&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;x86_64&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;id&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;centos&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="通过-socat-等工具连接-socket">通过 socat 等工具连接 socket&lt;/h3>
&lt;p>由于通过 libvirt 创建的虚拟机的这个 channel 的 socket 一直被 libvirt 占用，所以无法使用别的方式连接。这时候我们可以自己再创建一个 channel&lt;/p>
&lt;p>那么在宿主机上的 libvirt 将不会建立与 socket 建立连接。&lt;/p>
&lt;p>宿主机上的 libvirt 的 xml：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">channel&lt;/span> &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;unix&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">target&lt;/span> &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;virtio&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;org.qemu.guest_agent.1&amp;#34;&lt;/span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">address&lt;/span> &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;virtio-serial&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">controller&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">bus&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">port&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;3&amp;#34;&lt;/span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#f92672">channel&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>我们也可以在其中加入 &lt;!-- raw HTML omitted --> 这一行，来手动指定 socket 文件的绝对路径。否则 socket 默认在 /var/lib/libvirt/qemu/channel/target/DOMAIN/ 目录下&lt;/p>
&lt;/blockquote>
&lt;p>此时 VM 内部的 qemu-guest-agent 进程还是在连接 org.qemu.guest_agent.0 设备，为了使用 .1 ，我们需要将 /usr/lib/systemd/system/qemu-guest-agent.service 文件中的所有 .0 改为 .1，然后重启服务。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># sed -i &amp;#39;s/qemu.guest_agent.0/qemu.guest_agent.1/g&amp;#39; /usr/lib/systemd/system/qemu-guest-agent.service&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># systemctl daemon-reload&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># systemctl restart qemu-guest-agent.service&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>最后，我们就可以在宿主机上使用 socat 去连接 socket 文件了：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># socat unix:/var/lib/libvirt/qemu/channel/target/domain-55-lichenhao.bj-net/org.qemu.guest_agent.1 readline&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;execute&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;guest-get-osinfo&amp;#34;&lt;/span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;return&amp;#34;&lt;/span>: &lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;CentOS Linux&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;kernel-release&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;4.18.0-193.28.1.el8_2.x86_64&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;version&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;8 (Core)&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;pretty-name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;CentOS Linux 8 (Core)&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;version-id&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;8&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;kernel-version&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;#1 SMP Thu Oct 22 00:20:22 UTC 2020&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;machine&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;x86_64&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;id&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;centos&amp;#34;&lt;/span>&lt;span style="color:#f92672">}}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="qemu-guest-agent-关联文件">QEMU Guest Agent 关联文件&lt;/h1>
&lt;p>&lt;strong>/etc/sysconfig/qemu-ga&lt;/strong> # qemu-ga 的配置文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># rpc 黑名单列表。这里用来定义 qemu-ga 不处理来自宿主机的哪些 QMP 命令。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>BLACKLIST_RPC&lt;span style="color:#f92672">=&lt;/span>guest-file-open,guest-file-close,guest-file-read,guest-file-write,guest-file-seek,guest-file-flush,guest-exec,guest-exec-status
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Fsfreeze hook script specification.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># FSFREEZE_HOOK_PATHNAME=/dev/null : disables the feature.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># FSFREEZE_HOOK_PATHNAME=/path/to/executable : enables the feature with the&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># specified binary or shell script.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># FSFREEZE_HOOK_PATHNAME= : enables the feature with the&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># default value (invoke &amp;#34;qemu-ga --help&amp;#34; to interrogate).&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>FSFREEZE_HOOK_PATHNAME&lt;span style="color:#f92672">=&lt;/span>/etc/qemu-ga/fsfreeze-hook
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>/usr/lib/systemd/system/qemu-guest-agent.service&lt;/strong> # qemu-ga 守护程序文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># systemctl cat qemu-guest-agent.service&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># /usr/lib/systemd/system/qemu-guest-agent.service&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>Unit&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Description&lt;span style="color:#f92672">=&lt;/span>QEMU Guest Agent
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>BindsTo&lt;span style="color:#f92672">=&lt;/span>dev-virtio&lt;span style="color:#ae81ff">\x&lt;/span>2dports-org.qemu.guest_agent.0.device
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>After&lt;span style="color:#f92672">=&lt;/span>dev-virtio&lt;span style="color:#ae81ff">\x&lt;/span>2dports-org.qemu.guest_agent.0.device
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>IgnoreOnIsolate&lt;span style="color:#f92672">=&lt;/span>True
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>Service&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>UMask&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0077&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>EnvironmentFile&lt;span style="color:#f92672">=&lt;/span>/etc/sysconfig/qemu-ga
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ExecStart&lt;span style="color:#f92672">=&lt;/span>/usr/bin/qemu-ga &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --method&lt;span style="color:#f92672">=&lt;/span>virtio-serial &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --path&lt;span style="color:#f92672">=&lt;/span>/dev/virtio-ports/org.qemu.guest_agent.0 &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --blacklist&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>BLACKLIST_RPC&lt;span style="color:#e6db74">}&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -F&lt;span style="color:#e6db74">${&lt;/span>FSFREEZE_HOOK_PATHNAME&lt;span style="color:#e6db74">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>StandardError&lt;span style="color:#f92672">=&lt;/span>syslog
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Restart&lt;span style="color:#f92672">=&lt;/span>always
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>RestartSec&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>Install&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>WantedBy&lt;span style="color:#f92672">=&lt;/span>dev-virtio&lt;span style="color:#ae81ff">\x&lt;/span>2dports-org.qemu.guest_agent.0.device
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="ovirt-guest-agent">ovirt-guest-agent&lt;/h1>
&lt;p>ovirt-guest-agent 是和 qemu-guest-agent 并列的一个概念。在使用 oVirt 作为虚拟化管理时，虚拟机内部安装下面三个工具，和 ovirt 配合能够提高虚拟机的用户体验和性能。&lt;/p>
&lt;ul>
&lt;li>oVirt Guest Agent：原理与 qemu-guest-agent 类似，但是提供的功能有所区别。&lt;/li>
&lt;li>Spice Agent：提高 spice 连接虚拟机的用户体验。&lt;/li>
&lt;li>VirtIO Drivers：包含一些驱程序，VirtIO Serial、VirtIO SCS、VirtIO Network、Memory Ballooning&lt;/li>
&lt;/ul>
&lt;p>qemu：
&lt;a href="https://wiki.qemu.org/Features/GuestAgent">https://wiki.qemu.org/Features/GuestAgent&lt;/a>&lt;/p></description></item><item><title>Docs: QEMU Guest Agent</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/kvm_qemu/qemu-guest-agent/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/kvm_qemu/qemu-guest-agent/</guid><description/></item><item><title>Docs: 访问虚拟机</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/kvm_qemu/%E8%AE%BF%E9%97%AE%E8%99%9A%E6%8B%9F%E6%9C%BA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/kvm_qemu/%E8%AE%BF%E9%97%AE%E8%99%9A%E6%8B%9F%E6%9C%BA/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_and_managing_virtualization/getting-started-with-virtualization-in-rhel-8_configuring-and-managing-virtualization#assembly_connecting-to-virtual-machines_virt-getting-started">RedHat 官方文档，8-配置和管理虚拟化-2.4 章.连接到虚拟机&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>我们可以通过多种方式与虚拟机进行交互：&lt;/p>
&lt;ul>
&lt;li>Cockpit # 基于 Web 的控制台&lt;/li>
&lt;li>Virt Manager 程序 # GUI 程序&lt;/li>
&lt;li>Virt Viewer 程序 # GUI 程序&lt;/li>
&lt;li>virsh console 子命令 # CLI 程序&lt;/li>
&lt;li>众所周知的 ssh&lt;/li>
&lt;/ul>
&lt;h1 id="cockpit">Cockpit&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/cockpit-project">GitHub 项目，cockpit-project&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cockpit-project.org/">官网&lt;/a>&lt;/li>
&lt;li>注意：
&lt;ul>
&lt;li>RHEL 8 仍支持虚拟机管理器（virt-manager）应用程序，但已弃用。Web 控制台打算在后续版本中替代它。因此，建议您熟悉用于在 GUI 中管理虚拟化的 Web 控制台。详见：&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/configuring_and_managing_virtualization/index#overview-of-virtual-machine-management-using-the-web-console_using-the-rhel-8-web-console-for-managing-vms">https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/configuring_and_managing_virtualization/index#overview-of-virtual-machine-management-using-the-web-console_using-the-rhel-8-web-console-for-managing-vms&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Cockpit 是一个基于 Web 的用于管理服务器的图形界面&lt;/p>
&lt;h2 id="安装-cockpit">安装 Cockpit&lt;/h2>
&lt;p>CentOS&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>yum install cockpit -y &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> yum install cockpit-machines -y
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>systemctl start cockpit &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> systemctl enable cockpit
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Ubuntu&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>apt update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apt install -y cockpit cockpit-machines
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中 cockpit-machines 是 cockpit 的插件，用于为 cockpit 添加虚拟机管理功能。&lt;/p>
&lt;h2 id="使用-cockpit">使用 Cockpit&lt;/h2>
&lt;p>Cockpit 开箱即用，安装完成后直接访问 http://IP:9090，打开 web 界面，使用系统的用户和密码登陆即可。web 页面管理虚拟机，效果如图
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/pn75i9/1616123978493-8d5e61ed-edc9-4962-8cb1-391f17c883ff.jpeg" alt="">
&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/configuring_and_managing_virtualization/index#overview-of-virtual-machine-management-using-the-web-console_using-the-rhel-8-web-console-for-managing-vms">
&lt;/a>&lt;/p>
&lt;h1 id="使用虚拟机的串行控制台">使用虚拟机的串行控制台&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_and_managing_virtualization/getting-started-with-virtualization-in-rhel-8_configuring-and-managing-virtualization#proc_opening-a-virtual-machine-serial-console_assembly_connecting-to-virtual-machines">红帽官方文档，8-2.配置和管理虚拟化-2.4.4.打开虚拟机串行控制台&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>使用 virsh console 命令，可以连接到虚拟机的串行控制台。&lt;/p>
&lt;p>有两种方法可以开启虚拟机内的串行控制台&lt;/p>
&lt;p>方法一：修改 grub 参数
在虚拟机上，编辑 &lt;code>/etc/default/grub&lt;/code> 文件并将 &lt;strong>console=ttyS0&lt;/strong> 添加到以 &lt;strong>GRUB_CMDLINE_LINUX&lt;/strong> 开头的行中。
清除可能会阻止您更改生效的内核选项。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># grub2-editenv - unset kernelopts&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>重新载入 Grub 配置：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># grub2-mkconfig -o /boot/grub2/grub.cfg&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Generating grub configuration file ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Found linux image: /boot/vmlinuz-3.10.0-948.el7.x86_64
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Found initrd image: /boot/initramfs-3.10.0-948.el7.x86_64.img
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>...&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>重启虚拟机。&lt;/p>
&lt;p>方法二：启动 serial-getty 服务
在虚拟机上启动 serial-getty@.service 服务并在开启服务的时候指定一个终端。e.g.&lt;strong>systemctl enable &lt;a href="mailto:serial-getty@ttyS0.service">serial-getty@ttyS0.service&lt;/a> &amp;ndash;now&lt;/strong>&lt;/p>
&lt;h1 id="访问远程虚拟化主机">访问远程虚拟化主机&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_and_managing_virtualization/getting-started-with-virtualization-in-rhel-8_configuring-and-managing-virtualization#setting-up-easy-access-to-remote-virtualization-hosts_assembly_connecting-to-virtual-machines">红帽官方文档，8-配置和管理虚拟化-第二章.虚拟化入门-2.4.5.设置对远程虚拟化主机的轻松访问&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>当我们想要使用 libvirt 程序管理远程主机上的 VM 时，可以使用 &lt;code>-c qemu+ssh://root@HOST/system&lt;/code> 语法管理远程宿主机上的虚拟机。效果如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># virsh -c qemu+ssh://root@172.19.42.201/system list&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root@172.19.42.201&lt;span style="color:#960050;background-color:#1e0010">&amp;#39;&lt;/span>s password:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Id Name State
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>----------------------------------------------------
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">1&lt;/span> node-1.bj-net running
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_and_managing_virtualization/getting-started-with-virtualization-in-rhel-8_configuring-and-managing-virtualization#setting-up-easy-access-to-remote-virtualization-hosts_assembly_connecting-to-virtual-machines">
&lt;/a>&lt;/p></description></item><item><title>Docs: 访问虚拟机</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/kvm_qemu/%E8%AE%BF%E9%97%AE%E8%99%9A%E6%8B%9F%E6%9C%BA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/kvm_qemu/%E8%AE%BF%E9%97%AE%E8%99%9A%E6%8B%9F%E6%9C%BA/</guid><description/></item><item><title>Docs: 最佳实践</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/kvm_qemu/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/kvm_qemu/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://notes.wadeism.net/post/kvm-create-vm-clone-by-overlay/">https://notes.wadeism.net/post/kvm-create-vm-clone-by-overlay/&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>注意：本最佳实践仅适用于独立使用 qemu-img、qemu-kvm 等 KVM/QEMU 的命令行工具，不包括 libvirtd 的工具&lt;/p>
&lt;h1 id="应用实例">应用实例&lt;/h1>
&lt;h2 id="准备工作">准备工作&lt;/h2>
&lt;p>创建 bridge 网络设备，并配置 ip，然后将宿主机的外部网卡关联的网络设备加入到 bridge 上。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>ip link add br0 type bridge
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ip addr add 172.19.42.249/24 dev br0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ip link set dev eth0 master br0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="启动虚拟机并安装系统">启动虚拟机并安装系统&lt;/h2>
&lt;p>创建一个 qcow2 格式的镜像文件，用作块设备&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>qemu-img create -f qcow2 qemu-install-test.qcow2 10G
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用 &lt;code>qemu-install-test.qcow2&lt;/code> 文件启动虚拟机，并挂载系统镜像。&lt;/p>
&lt;blockquote>
&lt;p>注意&lt;/p>
&lt;ul>
&lt;li>如果不分配内存，会提示无法加载 VFS 导致无法启动微型系统来安装系统。默认模拟 1 个 CPU。&lt;/li>
&lt;li>&lt;code>:3&lt;/code> 为 vncview 的访问时的端口，3 默认为 5903&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>qemu-kvm qemu-install-test.qcow2 &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>-m &lt;span style="color:#ae81ff">4096&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>-cdrom ./CentOS-8.2.2004-x86_64-dvd1.iso &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>-vnc 0.0.0.0:3
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用 vnc 连接并安装系统即可。&lt;/p>
&lt;blockquote>
&lt;p>注意：前提是可以实现 X11 转发，那么可以通过 XShell 这么用，如果无法 X11 转发，那么就需要在 Windows 中安装一个 VNC 客户端，然后连接到 IP:PORT，这里的端口是 5093&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>vncview :3
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>安装完成后，不用指定 cdrom 即可启动虚拟机&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>qemu-kvm qemu-install-test.qcow2 -m &lt;span style="color:#ae81ff">4096&lt;/span> -vnc 0.0.0.0:3
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="启动一个正常可用的虚拟机">启动一个正常可用的虚拟机&lt;/h2>
&lt;h3 id="生成脚本">生成脚本&lt;/h3>
&lt;p>生成 -netdev 选项所用的启动脚本&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>cat &amp;gt; /etc/qemu-ifup &lt;span style="color:#e6db74">&amp;lt;&amp;lt;\EOF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">BRIDGE=br0
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">if [ -n $1 ]; then
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> ip link set dev $1 master ${BRIDGE}
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> ip link set dev $1 up
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">[ $? -eq 0 ] &amp;amp;&amp;amp; exit 0 || exit 1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">else
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> echo &amp;#34;Error: no interface specified.&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">exit 1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">fi
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>chmod &lt;span style="color:#ae81ff">755&lt;/span> /etc/qemu-ifup
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="启动虚拟机">启动虚拟机&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>qemu-kvm -m &lt;span style="color:#ae81ff">4096&lt;/span> -smp &lt;span style="color:#ae81ff">2&lt;/span> -name test &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>-drive file&lt;span style="color:#f92672">=&lt;/span>/var/lib/libvirt/images/qemu-install-test.qcow2,format&lt;span style="color:#f92672">=&lt;/span>qcow2,if&lt;span style="color:#f92672">=&lt;/span>virtio &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>-netdev tap,id&lt;span style="color:#f92672">=&lt;/span>n1 &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>-device virtio-net,netdev&lt;span style="color:#f92672">=&lt;/span>n1 &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>-vnc :3
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="连接虚拟机">连接虚拟机&lt;/h3>
&lt;p>虚拟机启动后，使用 vnc 即可连接，需要先 &lt;code>yum install tigervnc&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>vncviewer :3
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="结语">结语&lt;/h3>
&lt;p>现在是使用 qemu-system-x86_64 工具自动创建的 tap 设备，若是使用已经已经存在的网络设备，那么还需要创建一个 downscript 脚本，以便可以在虚拟机关闭时，自动处理，将网络设备从 bridge 上拆下来，否则下次再次启动，网络设备已经在 bridge 上，就会报错，导致虚拟机无法启动。&lt;/p>
&lt;h2 id="通过-virsh-domxml-to-native-命令转换出-wiki-来的-qemu-kvm-命令行其中一部分">通过 virsh domxml-to-native 命令，转换出 wiki 来的 qemu-kvm 命令行其中一部分&lt;/h2>
&lt;p>其中使用&lt;code>...&lt;/code>省略了很多无用参数&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 使用 qemu-kvm 程序创建一个名为 lichenhao.bj-net 的虚拟机&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/usr/libexec/qemu-kvm -name lichenhao.bj-net
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 虚拟机使用哪种类型的机器，这里是 i440fx 红帽7&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-machine pc-i440fx-rhel7.0.0,accel&lt;span style="color:#f92672">=&lt;/span>kvm,usb&lt;span style="color:#f92672">=&lt;/span>off,dump-guest-core&lt;span style="color:#f92672">=&lt;/span>off
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 虚拟机所使用的 CPU 类型&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-cpu Skylake-Server-IBRS,-ds,-acpi,+ss,-ht,-tm,-pbe,-dtes64,-monitor,-ds_cpl,-vmx,-smx,-est,-tm2,-xtpr,-pdcm,-dca,-osxsave,-tsc_adjust,+clflushopt,-intel-pt,+pku,-ospke,+avx512vnni,+md-clear,+stibp,+ssbd,+hypervisor,-arat
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 虚拟机的内存大小&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-m &lt;span style="color:#ae81ff">4096&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-realtime mlock&lt;span style="color:#f92672">=&lt;/span>off
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>&lt;span style="color:#75715e"># 虚拟机有2个CPU，模拟成2个插槽，每个插槽的CPU有一个核心，每个核心1个线程&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-smp 2,sockets&lt;span style="color:#f92672">=&lt;/span>2,cores&lt;span style="color:#f92672">=&lt;/span>1,threads&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>......
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 虚拟机中 virtio-blk-pci 设备，是 VM 的硬盘&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 宿主机中 qcow2 文件，id 为 drive-virtio-disk0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 两者通过 drive 中的 id参数 与 device 中的 drive 参数保持一致，进行关联&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-drive file&lt;span style="color:#f92672">=&lt;/span>/var/lib/libvirt/images/master-3.bj-net.qcow2,format&lt;span style="color:#f92672">=&lt;/span>qcow2,...,id&lt;span style="color:#f92672">=&lt;/span>drive-virtio-disk0,...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-device virtio-blk-pci,...,drive&lt;span style="color:#f92672">=&lt;/span>drive-virtio-disk0,...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 略 drive 中的 id 与 device 中的 drive 相同。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-drive &lt;span style="color:#66d9ef">if&lt;/span>&lt;span style="color:#f92672">=&lt;/span>none,id&lt;span style="color:#f92672">=&lt;/span>drive-ide0-0-0,...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-device ide-cd,bus&lt;span style="color:#f92672">=&lt;/span>ide.0,...,drive&lt;span style="color:#f92672">=&lt;/span>drive-ide0-0-0,...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 虚拟机中 virtio-net-pci 设备，是 VM 中的网卡&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 宿主机中 tap 设备，id 为hostnet0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 两者通过 netdev 中的 id参数 与 device 中的 netdev 参数保持一致，进行关联。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-netdev tap,...id&lt;span style="color:#f92672">=&lt;/span>hostnet0,...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-device virtio-net-pci,...,netdev&lt;span style="color:#f92672">=&lt;/span>hostnet0,...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 略，chardev 中的 id 与 device 中的 chardev 相同&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-chardev pty,id&lt;span style="color:#f92672">=&lt;/span>charserial0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-device isa-serial,chardev&lt;span style="color:#f92672">=&lt;/span>charserial0,...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 略，chardev 中的 id 与 device 中的 chardev 相同&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-chardev socket,id&lt;span style="color:#f92672">=&lt;/span>charchannel0,path&lt;span style="color:#f92672">=&lt;/span>/var/lib/libvirt/qemu/channel/target/domain--1-lichenhao.bj-net/org.qemu.guest_agent.0,server,nowait
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-device virtserialport,bus&lt;span style="color:#f92672">=&lt;/span>virtio-serial0.0,nr&lt;span style="color:#f92672">=&lt;/span>1,chardev&lt;span style="color:#f92672">=&lt;/span>charchannel0,id&lt;span style="color:#f92672">=&lt;/span>channel0,name&lt;span style="color:#f92672">=&lt;/span>org.qemu.guest_agent.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.....
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>