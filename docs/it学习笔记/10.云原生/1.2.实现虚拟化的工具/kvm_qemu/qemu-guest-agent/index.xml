<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – QEMU Guest Agent</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/kvm_qemu/qemu-guest-agent/</link><description>Recent content in QEMU Guest Agent on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/kvm_qemu/qemu-guest-agent/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: QMP 命令参考</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/kvm_qemu/qemu-guest-agent/qmp-%E5%91%BD%E4%BB%A4%E5%8F%82%E8%80%83/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/kvm_qemu/qemu-guest-agent/qmp-%E5%91%BD%E4%BB%A4%E5%8F%82%E8%80%83/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.qemu.org/docs/master/interop/qemu-ga-ref.html">官方文档，系统模拟管理与交互-QEMU Guest Agent 协议参考&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.jianshu.com/p/27d8491ed100">简书，qemu-agent-command 命令含义&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>通过指令&lt;/p>
&lt;pre>&lt;code>virsh qemu-agent-command 虚拟机 --cmd '{&amp;quot;execute&amp;quot;:&amp;quot;guest-info&amp;quot;}'
&lt;/code>&lt;/pre>
&lt;p>可以查看其所有支持的命令，返回的数据如下&lt;/p>
&lt;pre>&lt;code>{&amp;quot;return&amp;quot;:{&amp;quot;version&amp;quot;:&amp;quot;2.8.0&amp;quot;,
&amp;quot;supported_commands&amp;quot;: [
{&amp;quot;enabled&amp;quot;:true,&amp;quot;name&amp;quot;:&amp;quot;guest-sync-delimited&amp;quot;,&amp;quot;success-response&amp;quot;:true},{&amp;quot;enabled&amp;quot;:true,&amp;quot;name&amp;quot;:&amp;quot;guest-sync&amp;quot;,&amp;quot;success-response&amp;quot;:true},
{&amp;quot;enabled&amp;quot;:true,&amp;quot;name&amp;quot;:&amp;quot;guest-suspend-ram&amp;quot;,&amp;quot;success-response&amp;quot;:false},
{&amp;quot;enabled&amp;quot;:true,&amp;quot;name&amp;quot;:&amp;quot;guest-suspend-hybrid&amp;quot;,&amp;quot;success-response&amp;quot;:false},
{&amp;quot;enabled&amp;quot;:true,&amp;quot;name&amp;quot;:&amp;quot;guest-suspend-disk&amp;quot;,&amp;quot;success-response&amp;quot;:false},
{&amp;quot;enabled&amp;quot;:true,&amp;quot;name&amp;quot;:&amp;quot;guest-shutdown&amp;quot;,&amp;quot;success-response&amp;quot;:false},
{&amp;quot;enabled&amp;quot;:true,&amp;quot;name&amp;quot;:&amp;quot;guest-set-vcpus&amp;quot;,&amp;quot;success-response&amp;quot;:true},
{&amp;quot;enabled&amp;quot;:true,&amp;quot;name&amp;quot;:&amp;quot;guest-set-user-password&amp;quot;,&amp;quot;success-response&amp;quot;:true},
{&amp;quot;enabled&amp;quot;:true,&amp;quot;name&amp;quot;:&amp;quot;guest-set-time&amp;quot;,&amp;quot;success-response&amp;quot;:true},
{&amp;quot;enabled&amp;quot;:true,&amp;quot;name&amp;quot;:&amp;quot;guest-set-memory-blocks&amp;quot;,&amp;quot;success-response&amp;quot;:true},
{&amp;quot;enabled&amp;quot;:true,&amp;quot;name&amp;quot;:&amp;quot;guest-ping&amp;quot;,&amp;quot;success-response&amp;quot;:true},
{&amp;quot;enabled&amp;quot;:true,&amp;quot;name&amp;quot;:&amp;quot;guest-network-get-interfaces&amp;quot;,&amp;quot;success-response&amp;quot;:true},
{&amp;quot;enabled&amp;quot;:true,&amp;quot;name&amp;quot;:&amp;quot;guest-info&amp;quot;,&amp;quot;success-response&amp;quot;:true},
{&amp;quot;enabled&amp;quot;:true,&amp;quot;name&amp;quot;:&amp;quot;guest-get-vcpus&amp;quot;,&amp;quot;success-response&amp;quot;:true},
{&amp;quot;enabled&amp;quot;:true,&amp;quot;name&amp;quot;:&amp;quot;guest-get-time&amp;quot;,&amp;quot;success-response&amp;quot;:true},
{&amp;quot;enabled&amp;quot;:true,&amp;quot;name&amp;quot;:&amp;quot;guest-get-memory-blocks&amp;quot;,&amp;quot;success-response&amp;quot;:true},
{&amp;quot;enabled&amp;quot;:true,&amp;quot;name&amp;quot;:&amp;quot;guest-get-memory-block-info&amp;quot;,&amp;quot;success-response&amp;quot;:true},
{&amp;quot;enabled&amp;quot;:true,&amp;quot;name&amp;quot;:&amp;quot;guest-get-fsinfo&amp;quot;,&amp;quot;success-response&amp;quot;:true},
{&amp;quot;enabled&amp;quot;:true,&amp;quot;name&amp;quot;:&amp;quot;guest-fstrim&amp;quot;,&amp;quot;success-response&amp;quot;:true},
{&amp;quot;enabled&amp;quot;:true,&amp;quot;name&amp;quot;:&amp;quot;guest-fsfreeze-thaw&amp;quot;,&amp;quot;success-response&amp;quot;:true},
{&amp;quot;enabled&amp;quot;:true,&amp;quot;name&amp;quot;:&amp;quot;guest-fsfreeze-status&amp;quot;,&amp;quot;success-response&amp;quot;:true},
{&amp;quot;enabled&amp;quot;:true,&amp;quot;name&amp;quot;:&amp;quot;guest-fsfreeze-freeze-list&amp;quot;,&amp;quot;success-response&amp;quot;:true},
{&amp;quot;enabled&amp;quot;:true,&amp;quot;name&amp;quot;:&amp;quot;guest-fsfreeze-freeze&amp;quot;,&amp;quot;success-response&amp;quot;:true},
{&amp;quot;enabled&amp;quot;:false,&amp;quot;name&amp;quot;:&amp;quot;guest-file-write&amp;quot;,&amp;quot;success-response&amp;quot;:true},
{&amp;quot;enabled&amp;quot;:false,&amp;quot;name&amp;quot;:&amp;quot;guest-file-seek&amp;quot;,&amp;quot;success-response&amp;quot;:true},
{&amp;quot;enabled&amp;quot;:false,&amp;quot;name&amp;quot;:&amp;quot;guest-file-read&amp;quot;,&amp;quot;success-response&amp;quot;:true},
{&amp;quot;enabled&amp;quot;:false,&amp;quot;name&amp;quot;:&amp;quot;guest-file-open&amp;quot;,&amp;quot;success-response&amp;quot;:true},
{&amp;quot;enabled&amp;quot;:false,&amp;quot;name&amp;quot;:&amp;quot;guest-file-flush&amp;quot;,&amp;quot;success-response&amp;quot;:true},
{&amp;quot;enabled&amp;quot;:false,&amp;quot;name&amp;quot;:&amp;quot;guest-file-close&amp;quot;,&amp;quot;success-response&amp;quot;:true},
{&amp;quot;enabled&amp;quot;:false,&amp;quot;name&amp;quot;:&amp;quot;guest-exec-status&amp;quot;,&amp;quot;success-response&amp;quot;:true},
{&amp;quot;enabled&amp;quot;:false,&amp;quot;name&amp;quot;:&amp;quot;guest-exec&amp;quot;,&amp;quot;success-response&amp;quot;:true}
]}}
&lt;/code>&lt;/pre>
&lt;p>返回为数据，其中 supported_command 为所有命令的数组&lt;/p>
&lt;p>其官方地址为：&lt;a href="https://links.jianshu.com/go?to=https%3A%2F%2Fqemu.weilnetz.de%2Fdoc%2Fqemu-ga-ref.html%23API-Reference">QEMU Guest Agent Protocol Reference&lt;/a>&lt;/p>
&lt;p>各命令含义如下：
1. guest-sync-delimited&lt;/p>
&lt;p>宿主机发送一个 int 数字给 qga，qga 返回这个数字，并且在后续返回字符串响应中加入 ascii 码为 0xff 的字符。
2. guest-sync&lt;/p>
&lt;p>回文唯一的整数，这个命令进行测试。&lt;/p>
&lt;p>这个命令用于确保 client 与 guest agent 是同步的，不包含之前 client 的陈旧数据。直到返回特定的数字之前的 guest agent 响应都应被忽略。当含有 client 接收到陈旧数据时，这个命令并不能可靠的执行。一个特定的场景是，如果 qemu-ga 响应被逐个字符地输入到 JSON 解析器中。在这些情况下，使用 guest-sync-delimited 可能是最佳选择。对于逐行获取响应并将其转换为 JSON 对象的客户机，guest-sync 应该足够了，但请注意，在通道不干净的情况下，一些解析响应的尝试可能会导致解析器错误。此类客户端还应该在此命令之前加上 0xFF 字节，以确保客户代理刷新前一个会话的部分读取的 JSON 数据。&lt;/p>
&lt;p>&lt;strong>Arguments:&lt;/strong>
&lt;em>id: int,随机生成的 64-bit 整数&lt;/em>&lt;/p>
&lt;p>&lt;strong>Returns:&lt;/strong>
&lt;em>客户端发出的特定整数&lt;/em>&lt;/p>
&lt;p>&lt;strong>测试:&lt;/strong>&lt;/p>
&lt;pre>&lt;code>virsh qemu-agent-command centos --cmd '{&amp;quot;execute&amp;quot;:&amp;quot;guest-sync&amp;quot;, &amp;quot;arguments&amp;quot;:{&amp;quot;id&amp;quot;:1234567890}}'
{&amp;quot;return&amp;quot;:1234567890}
&lt;/code>&lt;/pre>
&lt;ol start="3">
&lt;li>guest-ping
Ping the guest agent，如果不返回错误信息，则成功&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>测试:&lt;/strong>&lt;/p>
&lt;pre>&lt;code>virsh qemu-agent-command centos --cmd
'{&amp;quot;execute&amp;quot;:&amp;quot;guest-ping&amp;quot;}'
{&amp;quot;return&amp;quot;:{}}
&lt;/code>&lt;/pre>
&lt;ol start="4">
&lt;li>guest-get-time
获取虚拟机系统时间（相对于 1970-01-01 in UTC)；&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>Returns:&lt;/strong>
&lt;em>纳秒格式的时间&lt;/em>&lt;/p>
&lt;p>&lt;strong>测试:&lt;/strong>&lt;/p>
&lt;pre>&lt;code>virsh qemu-agent-command centos --cmd
'{&amp;quot;execute&amp;quot;:&amp;quot;guest-get-time&amp;quot;}'
{&amp;quot;return&amp;quot;:1534345952638400000}
&lt;/code>&lt;/pre>
&lt;ol start="5">
&lt;li>guest-set-time
设置虚拟机时间&lt;/li>
&lt;/ol>
&lt;p>Arguments:
time: int (optional)&lt;/p>
&lt;p>时间格式为纳秒，相对于 1970-01-01 in UTC&lt;/p>
&lt;p>&lt;strong>Returns:&lt;/strong>
&lt;em>成功则无返回值&lt;/em>&lt;/p>
&lt;ol start="6">
&lt;li>guest-info
获取 guest agent 信息&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>Returns:&lt;/strong>
&lt;em>GuestAgentInfo 对象&lt;/em>&lt;/p>
&lt;ol start="7">
&lt;li>guest-shutdown
开启虚拟机关机任务，其为异步命令，不保证关机成功&lt;/li>
&lt;/ol>
&lt;p>Arguments:&lt;/p>
&lt;p>&lt;em>mode: string (optional)&lt;/em>&lt;/p>
&lt;p>&lt;em>&amp;ldquo;halt&amp;rdquo;， &amp;ldquo;powerdown&amp;rdquo; ， &amp;ldquo;reboot&amp;quot;三种状态可以选择，powerdown 为默认选项，命令成功执行无返回。成功的标志是，VM 以 0 的推出状态推出，或使用 QMP 命令查询时返回 VM 状态为 shutdown&lt;/em>&lt;/p>
&lt;ol start="8">
&lt;li>guest-file-open&lt;/li>
&lt;/ol>
&lt;p>打开虚拟机内文件并返回文件句柄&lt;/p>
&lt;p>Arguments:&lt;/p>
&lt;p>path: string，虚拟机所打开文件完整路径&lt;/p>
&lt;p>mode: string (optional)，打开文件方式，与 fopen()函数相同，默认为&amp;quot;r&amp;rdquo;&lt;/p>
&lt;p>&lt;strong>Returns:&lt;/strong>&lt;/p>
&lt;p>执行成功则返回文件句柄&lt;/p>
&lt;ol start="9">
&lt;li>guest-file-close&lt;/li>
&lt;/ol>
&lt;p>关闭虚拟机文件&lt;/p>
&lt;p>Arguments:&lt;/p>
&lt;p>&lt;em>handle: int，guest-file-open 所返回的文件句柄&lt;/em>&lt;/p>
&lt;p>&lt;strong>Returns:&lt;/strong>&lt;/p>
&lt;p>&lt;em>成功无返回值&lt;/em>&lt;/p>
&lt;ol start="10">
&lt;li>guest-file-read&lt;/li>
&lt;/ol>
&lt;p>读取虚拟机中打开的文件（Data will be base64-encoded）&lt;/p>
&lt;p>Arguments:&lt;/p>
&lt;p>handle: int，guest-file-open 所返回的文件句柄&lt;/p>
&lt;p>count：int，最少读取位数（默认为 64K）&lt;/p>
&lt;p>&lt;strong>Returns:&lt;/strong>&lt;/p>
&lt;p>&lt;em>成功则返回 GuestFileRead 类&lt;/em>&lt;/p>
&lt;ol start="11">
&lt;li>guest-file-write&lt;/li>
&lt;/ol>
&lt;p>写入虚拟机打开的文件&lt;/p>
&lt;p>Arguments:&lt;/p>
&lt;p>handle: int，guest-file-open 所返回的文件句柄&lt;/p>
&lt;p>count：int，最少读取位数（默认为 64K）&lt;/p>
&lt;p>buf-b64: string，表示要写入数据的 base64 编码字符串&lt;/p>
&lt;p>count: int (optional)，写入的位数，默认是在 buffer 中的全部位数&lt;/p>
&lt;p>&lt;strong>Returns:&lt;/strong>&lt;/p>
&lt;p>&lt;em>成功返回 GuestFileWrite 类&lt;/em>&lt;/p>
&lt;ol start="12">
&lt;li>guest-file-seek&lt;/li>
&lt;/ol>
&lt;p>同 fseek()用法相同，seek 到文件的指定位置，&lt;/p>
&lt;p>Arguments:&lt;/p>
&lt;p>handle: int，guest-file-open 所返回的文件句柄&lt;/p>
&lt;p>offset：int，文件位移量&lt;/p>
&lt;p>whence: GuestFileWhence，描述 offset&lt;/p>
&lt;p>&lt;strong>Returns:&lt;/strong>&lt;/p>
&lt;p>成功则返回 GuestFileSeek 类&lt;/p>
&lt;p>&lt;strong>13. guest-file-flush&lt;/strong>&lt;/p>
&lt;p>将用户缓冲区数据写入磁盘或内核缓冲区&lt;/p>
&lt;p>Arguments:&lt;/p>
&lt;p>&lt;em>handle: int，guest-file-open 所返回的文件句柄&lt;/em>&lt;/p>
&lt;p>&lt;strong>Returns:&lt;/strong>&lt;/p>
&lt;p>成功则无返回值*&lt;/p>
&lt;ol start="14">
&lt;li>guest-fsfreeze-status&lt;/li>
&lt;/ol>
&lt;p>获取虚拟机文件冻结状态&lt;/p>
&lt;p>&lt;strong>Returns:&lt;/strong>&lt;/p>
&lt;p>&lt;em>GuestFsfreezeStatus 枚举，包括 thawed，frozen 两种状态&lt;/em>&lt;/p>
&lt;ol start="15">
&lt;li>guest-fsfreeze-freeze&lt;/li>
&lt;/ol>
&lt;p>同步并冻结虚拟机文件系统&lt;/p>
&lt;p>&lt;strong>Returns:&lt;/strong>&lt;/p>
&lt;p>返回目前冻结的文件个数，如果执行错误，则解冻当前所有文件。&lt;/p>
&lt;ol start="16">
&lt;li>guest-fsfreeze-freeze-list&lt;/li>
&lt;/ol>
&lt;p>同步和冻结指定的虚拟机文件，&lt;/p>
&lt;p>Arguments:&lt;/p>
&lt;p>&lt;em>mountpoints: array of string (optional)，要冻结的文件系统挂载点数组。如果省略，每个挂载的文件系统都会被冻结。无效的挂载点被忽略。&lt;/em>&lt;/p>
&lt;ol start="17">
&lt;li>guest-fsfreeze-thaw&lt;/li>
&lt;/ol>
&lt;p>解冻所有冻结的文件&lt;/p>
&lt;p>&lt;strong>Returns:&lt;/strong>&lt;/p>
&lt;p>&lt;em>解冻的文件个数&lt;/em>&lt;/p>
&lt;ol start="18">
&lt;li>guest-fstrim&lt;/li>
&lt;/ol>
&lt;p>文件系统未使用的硬盘空间&lt;/p>
&lt;p>Arguments：&lt;/p>
&lt;p>minimum: int (optional)&lt;/p>
&lt;p>最小可丢弃的连续自由范围，单位为字节。通过增加这个值，fstrim 操作将更快地完成具有严重碎片化的空闲空间的文件系统，尽管并非所有块都将被丢弃。默认值为零，意思是“丢弃所有空闲块”。&lt;/p>
&lt;ol start="19">
&lt;li>guest-suspend-disk&lt;/li>
&lt;/ol>
&lt;p>挂起虚拟机磁盘，如成功则不返回值&lt;/p>
&lt;ol start="20">
&lt;li>guest-suspend-ram&lt;/li>
&lt;/ol>
&lt;p>挂起虚拟机 ram&lt;/p>
&lt;ol start="21">
&lt;li>guest-suspend-hybrid&lt;/li>
&lt;/ol>
&lt;p>将虚拟机状态写入磁盘，并挂起 ram&lt;/p>
&lt;h2 id="guest-network-get-interfaces--获取虚拟机-ip-地址mac-地址子网掩码">guest-network-get-interfaces # 获取虚拟机 IP 地址，MAC 地址，子网掩码&lt;/h2>
&lt;p>{&amp;ldquo;execute&amp;rdquo;: &amp;ldquo;guest-network-get-interfaces&amp;rdquo;}&lt;/p>
&lt;ol start="23">
&lt;li>guest-get-vcpus
检索客户的逻辑处理器列表。这是一个只读操作。&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>Returns:&lt;/strong>&lt;/p>
&lt;p>&lt;em>虚拟机的 VCPUs 列表，以 GuestLogicalProcessor 类形式返回&lt;/em>&lt;/p>
&lt;ol start="24">
&lt;li>guest-set-vcpus&lt;/li>
&lt;/ol>
&lt;p>尝试重新配置客户内部的逻辑处理器(当前:启用/禁用)。&lt;/p>
&lt;p>Arguments:&lt;/p>
&lt;p>&lt;em>vcpus: array of GuestLogicalProcessor&lt;/em>&lt;/p>
&lt;ol start="25">
&lt;li>guest-get-fsinfo&lt;/li>
&lt;/ol>
&lt;p>获取在虚拟机中挂载的文件系统列表&lt;/p>
&lt;ol start="26">
&lt;li>guest-set-user-password&lt;/li>
&lt;/ol>
&lt;p>Arguments:&lt;/p>
&lt;p>username: string，需要更改密码的用户名&lt;/p>
&lt;p>password: string，新的密码（base64 encoded）&lt;/p>
&lt;p>crypted: boolean，如果以被 crypt()加密则为真，否则为 false&lt;/p>
&lt;p>&lt;strong>Returns:&lt;/strong>&lt;/p>
&lt;p>&lt;em>如成功则无返回值&lt;/em>&lt;/p>
&lt;ol start="27">
&lt;li>guest-get-memory-block&lt;/li>
&lt;/ol>
&lt;p>获取虚拟机内存块信息，返回虚拟机所知的所有内存块，以 GuestMemoryBlock 对象展示&lt;/p>
&lt;ol start="28">
&lt;li>guest-set-memory-blocks&lt;/li>
&lt;/ol>
&lt;p>设置虚拟机中的内存块信息&lt;/p>
&lt;h2 id="guest-exec-status--获取虚拟机中的进程状态如进程退出则获取其相关元数据">guest-exec-status # 获取虚拟机中的进程状态，如进程退出，则获取其相关元数据。&lt;/h2>
&lt;p>Arguments：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>pid: int&lt;/p>
&lt;p>{ &amp;ldquo;execute&amp;rdquo;: &amp;ldquo;guest-exec-status&amp;rdquo;, &amp;ldquo;arguments&amp;rdquo;: { &amp;ldquo;pid&amp;rdquo;: PID } }&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Returns:&lt;/strong>
成功则返回 GuestExecStatus 类对象,GuestExecStatus 含有如下成员&lt;/p>
&lt;blockquote>
&lt;p>exited: boolean，如进程已经终止则为真
exitcode: int (optional)，进程退出码
signal: int (optional)，异常终止代码
out-data: string (optional)，程序 stdout(base64-encoded)
err-data: string (optional)，程序 stderr(base64-encoded)
out-truncated: boolean (optional)，如果由于大小限制而未完全捕获 stdout，则为真。&lt;/p>
&lt;/blockquote>
&lt;p>err-truncated: boolean (optional)，如果由于大小限制而没有完全捕获 stderr，则为真。&lt;/p>
&lt;h2 id="guest-exec--在虚拟机中执行命令">guest-exec # 在虚拟机中执行命令&lt;/h2>
&lt;p>&lt;strong>Arguments:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>path: string，执行的路径或名称&lt;/p>
&lt;/li>
&lt;li>
&lt;p>arg: array of string (optional)，执行命令所需参数&lt;/p>
&lt;/li>
&lt;li>
&lt;p>env: array of string (optional)，执行所需的环境变量&lt;/p>
&lt;/li>
&lt;li>
&lt;p>input-data: string (optional)，所需数据&lt;/p>
&lt;/li>
&lt;li>
&lt;p>capture-output: boolean (optional)，获取进程的 stdout/stderr&lt;/p>
&lt;p>{ &amp;ldquo;execute&amp;rdquo;: &amp;ldquo;guest-exec&amp;rdquo;, &amp;ldquo;arguments&amp;rdquo;: { &amp;ldquo;path&amp;rdquo;: &amp;ldquo;ip&amp;rdquo;, &amp;ldquo;arg&amp;rdquo;: [ &amp;ldquo;addr&amp;rdquo;, &amp;ldquo;list&amp;rdquo; ], &amp;ldquo;capture-output&amp;rdquo;: true } }&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Returns:&lt;/strong>
如执行成功则返回其 PID&lt;/p>
&lt;h2 id="guest-get-host-name--返回机器名称">guest-get-host-name # 返回机器名称&lt;/h2>
&lt;h2 id="guest-get-timezone--获取虚拟机时区信息">guest-get-timezone # 获取虚拟机时区信息&lt;/h2>
&lt;h2 id="guest-get-osinfo--获取操作系统信息">guest-get-osinfo # 获取操作系统信息&lt;/h2>
&lt;h1 id="应用示例">应用示例&lt;/h1>
&lt;p>以 virsh qemu-agent-command 命令为例，通过 socat 等工具与 VM 交互，只需要直接输入 QMP 指令即可&lt;/p>
&lt;h2 id="在-vm-中执行命令并在宿主机接收执行结果">在 VM 中执行命令，并在宿主机接收执行结果&lt;/h2>
&lt;pre>&lt;code># 在 VM 中执行命令，并返回该命令 PID
[root@host-3 ~]# virsh qemu-agent-command lichenhao.bj-net --pretty '{ &amp;quot;execute&amp;quot;: &amp;quot;guest-exec&amp;quot;, &amp;quot;arguments&amp;quot;: { &amp;quot;path&amp;quot;: &amp;quot;ip&amp;quot;, &amp;quot;arg&amp;quot;: [ &amp;quot;addr&amp;quot;, &amp;quot;list&amp;quot; ], &amp;quot;capture-output&amp;quot;: true } }'
{
&amp;quot;return&amp;quot;: {
&amp;quot;pid&amp;quot;: 1826
}
}
# 通过 PID 获取命令输出结果，这个结果是 base64 编码的。
[root@host-3 ~]# virsh qemu-agent-command lichenhao.bj-net --pretty '{ &amp;quot;execute&amp;quot;: &amp;quot;guest-exec-status&amp;quot;, &amp;quot;arguments&amp;quot;: { &amp;quot;pid&amp;quot;: 1826 } }'
{
&amp;quot;return&amp;quot;: {
&amp;quot;exitcode&amp;quot;: 0,
&amp;quot;out-data&amp;quot;: &amp;quot;MTogbG86IDxMT09QQkFDSyxVUCxMT1dFUl9VUD4gbXR1IDY1NTM2IHFkaXNjIG5vcXVldWUgc3RhdGUgVU5LTk9XTiBncm91cCBkZWZhdWx0IHFsZW4gMTAwMAogICAgbGluay9sb29wYmFjayAwMDowMDowMDowMDowMDowMCBicmQgMDA6MDA6MDA6MDA6MDA6MDAKICAgIGluZXQgMTI3LjAuMC4xLzggc2NvcGUgaG9zdCBsbwogICAgICAgdmFsaWRfbGZ0IGZvcmV2ZXIgcHJlZmVycmVkX2xmdCBmb3JldmVyCiAgICBpbmV0NiA6OjEvMTI4IHNjb3BlIGhvc3QgCiAgICAgICB2YWxpZF9sZnQgZm9yZXZlciBwcmVmZXJyZWRfbGZ0IGZvcmV2ZXIKMjogZW5zMzogPEJST0FEQ0FTVCxNVUxUSUNBU1QsVVAsTE9XRVJfVVA+IG10dSAxNTAwIHFkaXNjIGZxX2NvZGVsIHN0YXRlIFVQIGdyb3VwIGRlZmF1bHQgcWxlbiAxMDAwCiAgICBsaW5rL2V0aGVyIDUyOjU0OjAwOjZkOmZhOmYwIGJyZCBmZjpmZjpmZjpmZjpmZjpmZgogICAgaW5ldCAxNzIuMTkuNDIuMjQ4LzI0IGJyZCAxNzIuMTkuNDIuMjU1IHNjb3BlIGdsb2JhbCBub3ByZWZpeHJvdXRlIGVuczMKICAgICAgIHZhbGlkX2xmdCBmb3JldmVyIHByZWZlcnJlZF9sZnQgZm9yZXZlcgo0OiBkb2NrZXIwOiA8Tk8tQ0FSUklFUixCUk9BRENBU1QsTVVMVElDQVNULFVQPiBtdHUgMTUwMCBxZGlzYyBub3F1ZXVlIHN0YXRlIERPV04gZ3JvdXAgZGVmYXVsdCAKICAgIGxpbmsvZXRoZXIgMDI6NDI6NWU6MjQ6Mjg6YmQgYnJkIGZmOmZmOmZmOmZmOmZmOmZmCiAgICBpbmV0IDEwLjM4LjAuMS8yNCBicmQgMTAuMzguMC4yNTUgc2NvcGUgZ2xvYmFsIGRvY2tlcjAKICAgICAgIHZhbGlkX2xmdCBmb3JldmVyIHByZWZlcnJlZF9sZnQgZm9yZXZlcgo=&amp;quot;,
&amp;quot;exited&amp;quot;: true
}
}
# 使用 base64 将数据解码
[root@host-3 ~]# echo &amp;quot;MTogbG86IDxMT09QQkFDSyxVUCxMT1dFUl9VUD4gbXR1IDY1NTM2IHFkaXNjIG5vcXVldWUgc3RhdGUgVU5LTk9XTiBncm91cCBkZWZhdWx0IHFsZW4gMTAwMAogICAgbGluay9sb29wYmFjayAwMDowMDowMDowMDowMDowMCBicmQgMDA6MDA6MDA6MDA6MDA6MDAKICAgIGluZXQgMTI3LjAuMC4xLzggc2NvcGUgaG9zdCBsbwogICAgICAgdmFsaWRfbGZ0IGZvcmV2ZXIgcHJlZmVycmVkX2xmdCBmb3JldmVyCiAgICBpbmV0NiA6OjEvMTI4IHNjb3BlIGhvc3QgCiAgICAgICB2YWxpZF9sZnQgZm9yZXZlciBwcmVmZXJyZWRfbGZ0IGZvcmV2ZXIKMjogZW5zMzogPEJST0FEQ0FTVCxNVUxUSUNBU1QsVVAsTE9XRVJfVVA+IG10dSAxNTAwIHFkaXNjIGZxX2NvZGVsIHN0YXRlIFVQIGdyb3VwIGRlZmF1bHQgcWxlbiAxMDAwCiAgICBsaW5rL2V0aGVyIDUyOjU0OjAwOjZkOmZhOmYwIGJyZCBmZjpmZjpmZjpmZjpmZjpmZgogICAgaW5ldCAxNzIuMTkuNDIuMjQ4LzI0IGJyZCAxNzIuMTkuNDIuMjU1IHNjb3BlIGdsb2JhbCBub3ByZWZpeHJvdXRlIGVuczMKICAgICAgIHZhbGlkX2xmdCBmb3JldmVyIHByZWZlcnJlZF9sZnQgZm9yZXZlcgo0OiBkb2NrZXIwOiA8Tk8tQ0FSUklFUixCUk9BRENBU1QsTVVMVElDQVNULFVQPiBtdHUgMTUwMCBxZGlzYyBub3F1ZXVlIHN0YXRlIERPV04gZ3JvdXAgZGVmYXVsdCAKICAgIGxpbmsvZXRoZXIgMDI6NDI6NWU6MjQ6Mjg6YmQgYnJkIGZmOmZmOmZmOmZmOmZmOmZmCiAgICBpbmV0IDEwLjM4LjAuMS8yNCBicmQgMTAuMzguMC4yNTUgc2NvcGUgZ2xvYmFsIGRvY2tlcjAKICAgICAgIHZhbGlkX2xmdCBmb3JldmVyIHByZWZlcnJlZF9sZnQgZm9yZXZlcgo=&amp;quot; | base64 -d
1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
inet 127.0.0.1/8 scope host lo
valid_lft forever preferred_lft forever
inet6 ::1/128 scope host
valid_lft forever preferred_lft forever
2: ens3: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000
link/ether 52:54:00:6d:fa:f0 brd ff:ff:ff:ff:ff:ff
inet 172.19.42.248/24 brd 172.19.42.255 scope global noprefixroute ens3
valid_lft forever preferred_lft forever
4: docker0: &amp;lt;NO-CARRIER,BROADCAST,MULTICAST,UP&amp;gt; mtu 1500 qdisc noqueue state DOWN group default
link/ether 02:42:5e:24:28:bd brd ff:ff:ff:ff:ff:ff
inet 10.38.0.1/24 brd 10.38.0.255 scope global docker0
valid_lft forever preferred_lft forever
&lt;/code>&lt;/pre></description></item></channel></rss>