<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – Docker 命令行工具</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.2.%E5%AE%9E%E7%8E%B0%E5%AE%B9%E5%99%A8%E7%9A%84%E5%B7%A5%E5%85%B7/docker/docker-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</link><description>Recent content in Docker 命令行工具 on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.2.%E5%AE%9E%E7%8E%B0%E5%AE%B9%E5%99%A8%E7%9A%84%E5%B7%A5%E5%85%B7/docker/docker-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: image 镜像管理命令</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.2.%E5%AE%9E%E7%8E%B0%E5%AE%B9%E5%99%A8%E7%9A%84%E5%B7%A5%E5%85%B7/docker/docker-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/image-%E9%95%9C%E5%83%8F%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.2.%E5%AE%9E%E7%8E%B0%E5%AE%B9%E5%99%A8%E7%9A%84%E5%B7%A5%E5%85%B7/docker/docker-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/image-%E9%95%9C%E5%83%8F%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4/</guid><description>
&lt;h2 id="build-build-an-image-from-a-dockerfile">build Build an image from a Dockerfile&lt;/h2>
&lt;h2 id="history-show-the-history-of-an-image">history Show the history of an image&lt;/h2>
&lt;h2 id="import-import-the-contents-from-a-tarball-to-create-a-filesystem-image">import Import the contents from a tarball to create a filesystem image&lt;/h2>
&lt;h2 id="inspect-display-detailed-information-on-one-or-more-images">inspect Display detailed information on one or more images&lt;/h2>
&lt;h2 id="load-load-an-image-from-a-tar-archive-or-stdin">load Load an image from a tar archive or STDIN&lt;/h2>
&lt;h2 id="ls-列出所有镜像">ls #列出所有镜像&lt;/h2>
&lt;h2 id="prune-移除未使用的镜像">prune #移除未使用的镜像&lt;/h2>
&lt;p>&lt;strong>docker image prune [OPTIONS]&lt;/strong>
OPTIONS&lt;/p>
&lt;ul>
&lt;li>-a, &amp;ndash;all #Remove all unused images, not just dangling ones&lt;/li>
&lt;li>-f, &amp;ndash;force #Do not prompt for confirmation&lt;/li>
&lt;/ul>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>docker image prune -a #清理所有没有使用的镜像&lt;/li>
&lt;/ul>
&lt;h2 id="pull-pull-an-image-or-a-repository-from-a-registry">pull Pull an image or a repository from a registry&lt;/h2>
&lt;h2 id="push-push-an-image-or-a-repository-to-a-registry">push Push an image or a repository to a registry&lt;/h2>
&lt;h2 id="rm-remove-one-or-more-images">rm Remove one or more images&lt;/h2>
&lt;h2 id="save-save-one-or-more-images-to-a-tar-archive-streamed-to-stdout-by-default">save Save one or more images to a tar archive (streamed to STDOUT by default)&lt;/h2>
&lt;h2 id="tag-create-a-tag-target_image-that-refers-to-source_image">tag Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE&lt;/h2></description></item><item><title>Docs: network 网络管理命令</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.2.%E5%AE%9E%E7%8E%B0%E5%AE%B9%E5%99%A8%E7%9A%84%E5%B7%A5%E5%85%B7/docker/docker-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/network-%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.2.%E5%AE%9E%E7%8E%B0%E5%AE%B9%E5%99%A8%E7%9A%84%E5%B7%A5%E5%85%B7/docker/docker-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/network-%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4/</guid><description>
&lt;h2 id="connect-connect-a-container-to-a-network">connect #Connect a container to a network&lt;/h2>
&lt;h2 id="create-create-a-network">create #Create a network&lt;/h2>
&lt;p>&lt;strong>docker network create [OPTIONS] NETWORK&lt;/strong>&lt;/p>
&lt;p>EXAMPLE&lt;/p>
&lt;ol>
&lt;li>docker network create -d bridge &amp;ndash;subnet &amp;ldquo;172.26.0.0/16&amp;rdquo; &amp;ndash;gateway &amp;ldquo;172.26.0.1&amp;rdquo; mybr0 #创建一个桥接的网络，网段是 172.26.0.0/16,网关是 172.26.0.1&lt;/li>
&lt;/ol>
&lt;h2 id="disconnect-disconnect-a-container-from-a-network">disconnect #Disconnect a container from a network&lt;/h2>
&lt;h2 id="inspect-display-detailed-information-on-one-or-more-networks">inspect #Display detailed information on one or more networks&lt;/h2>
&lt;h2 id="ls-list-networks">ls #List networks&lt;/h2>
&lt;h2 id="prune--移除所有未使用的网络">prune # 移除所有未使用的网络&lt;/h2>
&lt;h2 id="rm--移除一个或多个网络">rm # 移除一个或多个网络&lt;/h2></description></item><item><title>Docs: ps、stats 容器状态查看</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.2.%E5%AE%9E%E7%8E%B0%E5%AE%B9%E5%99%A8%E7%9A%84%E5%B7%A5%E5%85%B7/docker/docker-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/psstats-%E5%AE%B9%E5%99%A8%E7%8A%B6%E6%80%81%E6%9F%A5%E7%9C%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.2.%E5%AE%9E%E7%8E%B0%E5%AE%B9%E5%99%A8%E7%9A%84%E5%B7%A5%E5%85%B7/docker/docker-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/psstats-%E5%AE%B9%E5%99%A8%E7%8A%B6%E6%80%81%E6%9F%A5%E7%9C%8B/</guid><description>
&lt;h1 id="docker-ps">docker ps&lt;/h1>
&lt;h2 id="syntax语法">Syntax(语法)&lt;/h2>
&lt;p>&lt;strong>docker ps [OPTIONS]&lt;/strong>
以列表的形式显示容器，包括以下几个字段 CONTAINER ID(容器 ID 号)、IMAGE(启动该容器所用的 image)、COMMAND(该容器运行的命令)、CREATED(该容器被创建了多久)、STATUS(容器当前状态)、PORTS(容器所用端口)、NAMES(容器名，随机生成)，效果如图所示：
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/tuw6e1/1616121626421-52b41c7f-068e-4c87-9a54-8aab4d638bb0.png" alt="">
还可以通过 -s 选项，来输出容器占用的磁盘空间大小。&lt;/p>
&lt;p>&lt;strong>OPTIONS&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-a, &amp;ndash;all&lt;/strong> # 显示所有容器(默认只显示正在 running 状态的)&lt;/li>
&lt;li>&lt;strong>-f, &amp;ndash;filter FILTER&lt;/strong> # 根据提供的条件过滤输出内容。
&lt;ul>
&lt;li>可用的过滤条件详见：&lt;a href="https://docs.docker.com/engine/reference/commandline/ps/#filtering">https://docs.docker.com/engine/reference/commandline/ps/#filtering&lt;/a>&lt;/li>
&lt;li>比较常见的是根据 volume 进行过滤，可以根据指定的 volume 来过滤，从而发现哪些容器正在使用哪些 volume。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>&amp;ndash;format STRING&lt;/strong> # 使用 Go 模板漂亮得输出容器信息。
&lt;ul>
&lt;li>可用的 Go 模板占位符详见：&lt;a href="https://docs.docker.com/engine/reference/commandline/ps/#formatting">https://docs.docker.com/engine/reference/commandline/ps/#formatting&lt;/a>&lt;/li>
&lt;li>可以使用 table 指令，让输出内容以表格的方式呈现，效果如下(如果没有 table 指令，那么输出内容将会扎堆)。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;pre>&lt;code>[root@k8s-monitor-agent ~]# docker ps --format &amp;quot;table {{.Names}}\t{{.Size}}&amp;quot;
NAMES SIZE
pushgateway 46B (virtual 19.4MB)
node_exporter 16B (virtual 22.9MB)
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>&lt;strong>-n, &amp;ndash;last INT&lt;/strong> # Show n last created containers (includes all states) (default -1)&lt;/li>
&lt;li>&lt;strong>-l, &amp;ndash;latest&lt;/strong> # 显示最后创建的容器(所有状态)&lt;/li>
&lt;li>&lt;strong>&amp;ndash;no-trunc&lt;/strong> # 不要截断输出 i.e.每列显示的内容都是完整内容，不会被截断&lt;/li>
&lt;li>&lt;strong>-q, &amp;ndash;quiet&lt;/strong> # 仅输出 CONTAINER ID&lt;/li>
&lt;li>&lt;strong>-s, &amp;ndash;sizes&lt;/strong> # 显示容器所用磁盘容量。一个是可写层的数据量，还有一个是只读镜像数据的磁盘空间总量。&lt;/li>
&lt;/ul>
&lt;h2 id="example">EXAMPLE&lt;/h2>
&lt;ul>
&lt;li>显示所有容器的 CONTAINER ID 与 COMMAND 字段，且不截断输出
&lt;ul>
&lt;li>docker ps &amp;ndash;format &amp;ldquo;table {{.ID}}\t{{.Command}}&amp;rdquo; -a &amp;ndash;no-trunc&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>查看容器所占磁盘空间大小，并按照所占空间大小排序
&lt;ul>
&lt;li>docker ps &amp;ndash;format &amp;ldquo;{{.ID}}\t{{.Size}}&amp;rdquo; | sort -k 4 -h&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="过滤器示例">过滤器示例&lt;/h3>
&lt;p>只显示状态为 restarting 的容器&lt;/p>
&lt;ul>
&lt;li>docker ps -a &amp;ndash;filter status=restarting&lt;/li>
&lt;/ul>
&lt;p>只显示状态为 exited 的容器&lt;/p>
&lt;ul>
&lt;li>docker ps -a &amp;ndash;filter status=exited&lt;/li>
&lt;/ul>
&lt;p>查看那个容器使用了指定的 Volume&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># docker volume ls&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>DRIVER VOLUME NAME
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>local 87e775bf78c42bc70b63f49f5495081d835d4571a922b2c5400371456fb9fbd1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># docker ps -a -f volume=87e775bf78c42bc70b63f49f5495081d835d4571a922b2c5400371456fb9fbd1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>1b857d27d391 mysql:8 &lt;span style="color:#e6db74">&amp;#34;docker-entrypoint.s…&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">7&lt;/span> weeks ago Exited &lt;span style="color:#f92672">(&lt;/span>0&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#ae81ff">14&lt;/span> hours ago mysql
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="docker-stats-options-container">docker stats [OPTIONS] [CONTAINER&amp;hellip;.]&lt;/h1>
&lt;p>显示效果如下，可以显示容器的 CPU、内存的使用率，和磁盘的 IO。并实时刷新。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>CONTAINER ID NAME CPU % MEM USAGE / LIMIT MEM % NET I/O BLOCK I/O PIDS
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>4a12a78282a5 pushgateway 0.00% 8.383MiB / 7.638GiB 0.11% 656B / 0B 0B / 0B &lt;span style="color:#ae81ff">9&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0a5fde8051fd node_exporter 0.00% 4.312MiB / 7.638GiB 0.06% 0B / 0B
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>docker stats [OPTIONS] [CONTAINER&amp;hellip;]&lt;/strong>
OPTIONS&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-a, &amp;ndash;all&lt;/strong> # Show all containers (default shows just running)&lt;/li>
&lt;li>&lt;strong>&amp;ndash;format string&lt;/strong> # 使用 Go 模板漂亮得输出容器信息。
&lt;ul>
&lt;li>可用的 Go 模板占位符详见：&lt;a href="https://docs.docker.com/engine/reference/commandline/stats/#formatting">https://docs.docker.com/engine/reference/commandline/stats/#formatting&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>&amp;ndash;no-stream&lt;/strong> # 禁用流信息，仅显示第一次请求的结果。i.e.不实时刷新&lt;/li>
&lt;li>&lt;strong>&amp;ndash;no-trunc&lt;/strong> # Do not truncate output&lt;/li>
&lt;/ul>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>docker stats &amp;ndash;format &amp;ldquo;table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}&amp;rdquo; # 使用 go 模板输出指定内容&lt;/li>
&lt;/ul></description></item><item><title>Docs: run 运行容器</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.2.%E5%AE%9E%E7%8E%B0%E5%AE%B9%E5%99%A8%E7%9A%84%E5%B7%A5%E5%85%B7/docker/docker-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/run-%E8%BF%90%E8%A1%8C%E5%AE%B9%E5%99%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.2.%E5%AE%9E%E7%8E%B0%E5%AE%B9%E5%99%A8%E7%9A%84%E5%B7%A5%E5%85%B7/docker/docker-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/run-%E8%BF%90%E8%A1%8C%E5%AE%B9%E5%99%A8/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.docker.com/engine/reference/run/">官方文档，参考-命令行参考-docker-Docker run 参考&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.docker.com/engine/reference/commandline/run/">官方文档，参考-命令行参考-docker-docker run&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="syntax语法">Syntax(语法)&lt;/h1>
&lt;p>&lt;strong>docker run [OPTIONS] ImageName [COMMAND] [ARG&amp;hellip;]&lt;/strong>&lt;/p>
&lt;h2 id="options">OPTIONS&lt;/h2>
&lt;ul>
&lt;li>--add-host list Add a custom host-to-IP mapping (host:ip)&lt;/li>
&lt;li>-a, &amp;ndash;attach list Attach to STDIN, STDOUT or STDERR&lt;/li>
&lt;li>--blkio-weight uint16 Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0)&lt;/li>
&lt;li>--blkio-weight-device list Block IO weight (relative device weight) (default [])&lt;/li>
&lt;li>--cgroup-parent string Optional parent cgroup for the container&lt;/li>
&lt;li>--cidfile string Write the container ID to the file&lt;/li>
&lt;li>&lt;strong>-d, &amp;ndash;detach&lt;/strong> # 让容器运行在后台并打印出容器的 ID&lt;/li>
&lt;li>--detach-keys string Override the key sequence for detaching a container&lt;/li>
&lt;li>--device list Add a host device to the container&lt;/li>
&lt;li>--device-cgroup-rule list Add a rule to the cgroup allowed devices list&lt;/li>
&lt;li>--device-read-bps list Limit read rate (bytes per second) from a device (default [])&lt;/li>
&lt;li>--device-read-iops list Limit read rate (IO per second) from a device (default [])&lt;/li>
&lt;li>--device-write-bps list Limit write rate (bytes per second) to a device (default [])&lt;/li>
&lt;li>--device-write-iops list Limit write rate (IO per second) to a device (default [])&lt;/li>
&lt;li>--disable-content-trust Skip image verification (default true)&lt;/li>
&lt;li>--dns list Set custom DNS servers&lt;/li>
&lt;li>--dns-option list Set DNS options&lt;/li>
&lt;li>--dns-search list Set custom DNS search domains&lt;/li>
&lt;li>--entrypoint string Overwrite the default ENTRYPOINT of the image&lt;/li>
&lt;li>**-e, &amp;ndash;env &lt;!-- raw HTML omitted --> **# 设定容器内的环境变量。LIST 格式为 &lt;code>VAR=VALUE&lt;/code>，若要指定多个变量，则使用多次 &amp;ndash;env 选项。&lt;/li>
&lt;li>--env-file list Read in a file of environment variables&lt;/li>
&lt;li>&lt;strong>&amp;ndash;expose &lt;!-- raw HTML omitted -->&lt;/strong> # 等效于 Dockerfile 中的 EXPOSE 指令，仅暴露容器端口，不在宿主机暴露。&lt;/li>
&lt;li>--group-add list Add additional groups to join&lt;/li>
&lt;li>--health-cmd string Command to run to check health&lt;/li>
&lt;li>--health-interval duration Time between running the check (ms|s|m|h) (default 0s)&lt;/li>
&lt;li>--health-retries int Consecutive failures needed to report unhealthy&lt;/li>
&lt;li>--health-start-period duration Start period for the container to initialize before starting health-retries countdown (ms|s|m|h)(default 0s)&lt;/li>
&lt;li>--health-timeout duration Maximum time to allow one check to run (ms|s|m|h) (default 0s)&lt;/li>
&lt;li>-h, &amp;ndash;hostname &lt;!-- raw HTML omitted --> #指定容器内的 hostname&lt;/li>
&lt;li>--init Run an init inside the container that forwards signals and reaps processes&lt;/li>
&lt;li>&lt;strong>-i, &amp;ndash;interactive&lt;/strong> # 即使没有 attach 到容器，也保持 STDIN(标准输入)开启。通常与 -t 一起使用&lt;/li>
&lt;li>--ip string IPv4 address (e.g., 172.30.100.104)&lt;/li>
&lt;li>--ip6 string IPv6 address (e.g., 2001:db8::33)&lt;/li>
&lt;li>--ipc string IPC mode to use&lt;/li>
&lt;li>--isolation string Container isolation technology&lt;/li>
&lt;li>--kernel-memory bytes Kernel memory limit&lt;/li>
&lt;li>-l, &amp;ndash;label list Set meta data on a container&lt;/li>
&lt;li>--label-file list Read in a line delimited file of labels&lt;/li>
&lt;li>--link list Add link to another container&lt;/li>
&lt;li>--link-local-ip list Container IPv4/IPv6 link-local addresses&lt;/li>
&lt;li>--log-driver string Logging driver for the container&lt;/li>
&lt;li>--log-opt list Log driver options&lt;/li>
&lt;li>--mac-address string Container MAC address (e.g., 92:d0:c6:0a:29:33)&lt;/li>
&lt;li>--mount mount Attach a filesystem mount to the container&lt;/li>
&lt;li>&lt;strong>&amp;ndash;name &lt;!-- raw HTML omitted -->&lt;/strong> # 为容器分配一个名称。默认为随机字符串&lt;/li>
&lt;li>&lt;strong>&amp;ndash;network &lt;!-- raw HTML omitted -->&lt;/strong> # 连接一个容器到一个容器网络(default &amp;ldquo;default&amp;rdquo;)，可以是 docker network ls 列出的网络，也可以是其余 container 的网络。STRING 包括下面几种
&lt;ul>
&lt;li>none # 容器使用自己的网络（类似&amp;ndash;net=bridge），但是不进行配置&lt;/li>
&lt;li>bridge #通过 veth 接口将容器连接到默认的 Docker 桥(默认为 docker0 的网桥).&lt;/li>
&lt;li>host #直接使用宿主机的网络而不是独立的 network namespace&lt;/li>
&lt;li>ContainerName #连接到指定 container 的网络中&lt;/li>
&lt;li>NetworkName #连接到 docker network ls 所列出的其中一个 docker 网络上&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>--network-alias list Add ne twork-scoped alias for the container&lt;/li>
&lt;li>--no-healthcheck Disable any container-specified HEALTHCHECK&lt;/li>
&lt;li>--oom-kill-disable Disable OOM Killer&lt;/li>
&lt;li>--oom-score-adj int Tune host&amp;rsquo;s OOM preferences (-1000 to 1000)&lt;/li>
&lt;li>--pid string PID namespace to use&lt;/li>
&lt;li>--pids-limit int Tune container pids limit (set -1 for unlimited)&lt;/li>
&lt;li>--privileged Give extended privileges to this container&lt;/li>
&lt;li>**-p, &amp;ndash;publish [HostIP:][HostPort:]&lt;!-- raw HTML omitted --> **# 指明 Container 要映射到 Host 上的 IP 和端口。若只指明 HostIP 和 ContainerPort 则中间俩个冒号不可省。若不指定 HostIP，则第一个冒号可不写。要暴露多个端口则多次使用 -p 即可。&lt;/li>
&lt;li>&lt;strong>-P, &amp;ndash;publish-all&lt;/strong> # 将 Image 定义的 EXPOSE 要暴露的端口暴露给 host，随机分配 host 上的端口与之建立映射关系。一般从 10000 端口开始&lt;/li>
&lt;li>&lt;strong>&amp;ndash;read-only&lt;/strong> # 将容器的根文件系统挂载为只读模式&lt;/li>
&lt;li>&lt;strong>&amp;ndash;rm&lt;/strong> # 当容器退出时，删除它。包括创建的 volume 等一并删除&lt;/li>
&lt;li>--runtime string Runtime to use for this container&lt;/li>
&lt;li>--security-opt list Security Options&lt;/li>
&lt;li>--shm-size bytes Size of /dev/shm&lt;/li>
&lt;li>--sig-proxy Proxy received signals to the process (default true)&lt;/li>
&lt;li>--stop-signal string Signal to stop a container (default &amp;ldquo;SIGTERM&amp;rdquo;)&lt;/li>
&lt;li>--stop-timeout int Timeout (in seconds) to stop a container&lt;/li>
&lt;li>--storage-opt list Storage driver options for the container&lt;/li>
&lt;li>--sysctl map Sysctl options (default map[])&lt;/li>
&lt;li>--tmpfs list Mount a tmpfs directory&lt;/li>
&lt;li>**-t, &amp;ndash;tty **# 为此命令分配一个 pseudo-TTY(伪终端)，可以支持终端登录，通常与-i 一起使用。&lt;/li>
&lt;li>**-u, &amp;ndash;user &lt;!-- raw HTML omitted --> **# 为容器进程指定运行的用户名/UID
&lt;ul>
&lt;li>STRING 格式：&lt;code>&amp;lt;NAME|UID&amp;gt;[:&amp;lt;GROUP|GID&amp;gt;])&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>--userns string User namespace to use&lt;/li>
&lt;li>--uts string UTS namespace to use&lt;/li>
&lt;li>&lt;strong>-v, &amp;ndash;volume [SRC:]DST&lt;/strong> # 为容器创建一个 Volume 并挂载到其中的目录上。若指定的 host 上的路径不存在，则自动创建这个目录；若不指定 SRC 则 docker 会自动创建一个。默认在 /var/lib/docker/volumes/ 目录下创建 volume 所用的目录
&lt;ul>
&lt;li>Note：使用 /HOST/PATH 与 VolumeName 的区别详见：《[Docker 存储](/docs/IT学习笔记/10.云原生/2.2.实现容器的工具/Docker/Docker%20 存储.md 存储.md)》&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>--volume-driver string Optional volume driver for the container&lt;/li>
&lt;li>&lt;strong>&amp;ndash;volumes-from &lt;!-- raw HTML omitted -->&lt;/strong> # 运行的新容器从 ContainerName 这个容器复制存储卷来使用&lt;/li>
&lt;li>&lt;strong>-w, &amp;ndash;workdir &lt;!-- raw HTML omitted -->&lt;/strong> # 指定容器内的工作目录，让指定的目录执行当前命令&lt;/li>
&lt;/ul>
&lt;h3 id="资源配置相关选项">资源配置相关选项&lt;/h3>
&lt;ul>
&lt;li>--cpu-period int Limit CPU CFS (Completely Fair Scheduler) period&lt;/li>
&lt;li>--cpu-quota int Limit CPU CFS (Completely Fair Scheduler) quota&lt;/li>
&lt;li>--cpu-rt-period int Limit CPU real-time period in microseconds&lt;/li>
&lt;li>--cpu-rt-runtime int Limit CPU real-time runtime in microseconds&lt;/li>
&lt;li>-c, &amp;ndash;cpu-shares int CPU shares (relative weight)&lt;/li>
&lt;li>**&amp;ndash;cpus &lt;!-- raw HTML omitted --> **# 容器可使用的最大 CPU 资源&lt;/li>
&lt;li>--cpuset-cpus string CPUs in which to allow execution (0-3, 0,1)&lt;/li>
&lt;li>--cpuset-mems string MEMs in which to allow execution (0-3, 0,1)&lt;/li>
&lt;li>&lt;strong>-m, &amp;ndash;memory &lt;!-- raw HTML omitted -->&lt;/strong> # 内存限制。容器能使用的最大内存&lt;/li>
&lt;li>--mem ory-reservation bytes Memory soft limit&lt;/li>
&lt;li>--memory-swap bytes Swap limit equal to memory plus swap: &amp;lsquo;-1&amp;rsquo; to enable unlimited swap&lt;/li>
&lt;li>--memory-swappiness int Tune container memory swappiness (0 to 100) (default -1)&lt;/li>
&lt;li>&lt;strong>&amp;ndash;restart &lt;!-- raw HTML omitted -->&lt;/strong> # 容器的重启策略。&lt;code>默认值：0&lt;/code>&lt;/li>
&lt;li>&lt;strong>&amp;ndash;ulimit &lt;!-- raw HTML omitted -->&lt;/strong> # 为容器配置 Ulimit。&lt;code>默认值：[]&lt;/code>
&lt;ul>
&lt;li>比如：
&lt;ul>
&lt;li>--ulimit nofile=1000 # 限制容器最多能打开 1 万 个文件描述符&lt;/li>
&lt;li>--ulimit nproc=10 # 限制容器最多能打开 10 个进程&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="linux-capabilities-相关选项">Linux Capabilities 相关选项&lt;/h3>
&lt;ul>
&lt;li>--cap-add list # Add Linux capabilities&lt;/li>
&lt;li>--cap-drop list # Drop Linux capabilities&lt;/li>
&lt;/ul>
&lt;h1 id="最佳实践">最佳实践&lt;/h1>
&lt;ul>
&lt;li>docker run -d -p 80:80 httpd
&lt;ul>
&lt;li>其过程可以简单的描述为
&lt;ul>
&lt;li>从 Docker Hub 下载 httpd 镜像。镜像中已经安装好了 Apache HTTP Server。&lt;/li>
&lt;li>以后台启动 httpd 容器，并将容器的 80 端口映射到 host 的 80 端口。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>以后台运行镜像 nginx:latest&lt;/p>
&lt;ul>
&lt;li>docker run -p 80:80 -v /data:/data -d nginx:latest&lt;/li>
&lt;/ul>
&lt;p>在运行 centos 容器的时候，执行 tail 命令。该命令是为了让容器启动后不自动关闭&lt;/p>
&lt;ul>
&lt;li>docker run -d centos tail -f /dev/null&lt;/li>
&lt;/ul></description></item></channel></rss>