<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – Docker 介绍</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.2.%E5%AE%9E%E7%8E%B0%E5%AE%B9%E5%99%A8%E7%9A%84%E5%B7%A5%E5%85%B7/docker/docker-%E4%BB%8B%E7%BB%8D/</link><description>Recent content in Docker 介绍 on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.2.%E5%AE%9E%E7%8E%B0%E5%AE%B9%E5%99%A8%E7%9A%84%E5%B7%A5%E5%85%B7/docker/docker-%E4%BB%8B%E7%BB%8D/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Docker 架构的演变</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.2.%E5%AE%9E%E7%8E%B0%E5%AE%B9%E5%99%A8%E7%9A%84%E5%B7%A5%E5%85%B7/docker/docker-%E4%BB%8B%E7%BB%8D/docker-%E6%9E%B6%E6%9E%84%E7%9A%84%E6%BC%94%E5%8F%98/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.2.%E5%AE%9E%E7%8E%B0%E5%AE%B9%E5%99%A8%E7%9A%84%E5%B7%A5%E5%85%B7/docker/docker-%E4%BB%8B%E7%BB%8D/docker-%E6%9E%B6%E6%9E%84%E7%9A%84%E6%BC%94%E5%8F%98/</guid><description>
&lt;p>原文链接：&lt;a href="https://blog.csdn.net/csdnnews/article/details/90746002">https://blog.csdn.net/csdnnews/article/details/90746002&lt;/a>&lt;/p>
&lt;p>Docker 是如何工作的？这是一个简单的问题，但答案却是出乎意料的复杂。你可能很多次地听说过“守护进程(daemon)”和“运行时(runtime)”这两个术语，但可能从未真正理解它们的含义以及它们是如何配合在一起的。如果你像我一样，涉过源头去发现真相，那么，在你沉溺于代码之海时，你并不孤单。让我们面对现实吧，假想 Docker 的源代码是一顿意式大餐，而你正在狼吞虎咽你的美味意面。&lt;/p>
&lt;p>就像一把叉子可以把面条送到你的口中，这篇文章会将 Docker 的技术的方方面面组织在一起并导入你饥饿的大脑。&lt;/p>
&lt;p>为了更好地理解现在，我们首先需要回顾过去。2013 年，dotCloud 公司的 Solomon Hykes 在那年的 Python 大会上发表了 Linux 容器的未来的演讲（&lt;a href="https://www.youtube.com/watch?v=wW9CAH9nSLs">https://www.youtube.com/watch?v=wW9CAH9nSLs&lt;/a>，需科学上网），第一次将 Docker 带入了公众的视线。让我们将他的 git 代码库回溯到 2013 年 1 月，这个 Docker 开发更轻松的时间。&lt;/p>
&lt;p>&lt;strong>Docker 2013 是如何工作的？&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/wf39dp/1616122015461-9720f60e-baf0-4aa5-b9e5-985d6be8b373.png" alt="">&lt;/p>
&lt;p>Docker 由两个主要组件组成，一个供用户使用的命令行应用程序和一个管理容器的守护进程。这个守护进程依赖两个子组件来执行它的任务：在宿主主机文件系统上用来存储镜像和容器数据的存储组件；以及用于抽象原始内核调用来构建 Linux 容器的 LXC 接口。&lt;/p>
&lt;p>&lt;strong>命令行应用程序&lt;/strong>&lt;/p>
&lt;p>Docker 命令行应用程序是管理你的 Docker 运行副本已知的所有镜像和容器的人工界面。它相对简单，因为所有的管理都是由守护进程完成的。应用程序开始于一个 main 函数：&lt;/p>
&lt;pre>&lt;code>funcmain() {
var err error
...
// Example: &amp;quot;/var/run/docker.sock&amp;quot;, &amp;quot;run&amp;quot;
conn, err := rcli.CallTCP(os.Getenv(&amp;quot;DOCKER&amp;quot;), os.Args[1:]...)
...
receive_stdout := future.Go(func()error {
_, err := io.Copy(os.Stdout, conn)
return err
})
...
}
&lt;/code>&lt;/pre>
&lt;p>它会立即建立一个 TCP 连接，指向存储在 DOCKER 这个环境变量中的地址，这是 Docker 守护进程的地址。用户提供的参数发送给守护进程，然后命令行应用程序等待打印成功答复的结果。&lt;/p>
&lt;p>&lt;strong>dockerd&lt;/strong>&lt;/p>
&lt;p>Docker 守护进程的代码存放在同一个代码库中，这个进程称为 dockerd。它运行在后台来处理用户请求和容器清理工作。启动后，dockerd 将监听在 8080 端口上传入的 HTTP 连接和在 4242 端口上的 TCP 连接。&lt;/p>
&lt;pre>&lt;code>func main() { ... // d is the server, it will process requests made by the user d, err := New() ... go func() { if err := rcli.ListenAndServeHTTP(&amp;quot;:8080&amp;quot;, d); err != nil { log.Fatal(err) } }() if err := rcli.ListenAndServeTCP(&amp;quot;:4242&amp;quot;, d); err != nil { log.Fatal(err) }}
...
// d is the server, it will process requests made by the user
d, err := New()
...
go func() {
if err := rcli.ListenAndServeHTTP(&amp;quot;:8080&amp;quot;, d); err != nil {
log.Fatal(err)
}
}()
if err := rcli.ListenAndServeTCP(&amp;quot;:4242&amp;quot;, d); err != nil {
log.Fatal(err)
}
}
&lt;/code>&lt;/pre>
&lt;p>一旦命令接收到后，dockerd 将使用反射机制查找并调用要运行的函数。&lt;/p>
&lt;p>&lt;strong>docker run 命令&lt;/strong>&lt;/p>
&lt;p>其中一个运行的函数是 CmdRun，它对应这个 docker run（注：这个命令创建一个新的容器并运行一个命令）命令。&lt;/p>
&lt;pre>&lt;code>func(srv *Server)CmdRun(stdin io.ReadCloser, stdout io.Writer, args ...string)error {
    flags := rcli.Subcmd(stdout, &amp;quot;run&amp;quot;, &amp;quot;[OPTIONS] IMAGE COMMAND [ARG...]&amp;quot;, &amp;quot;Run a command in a new container&amp;quot;)
    ...
// Choose a default image if needed
if name == &amp;quot;&amp;quot; {
        name = &amp;quot;base&amp;quot;
    }
// Choose a default command if needed
iflen(cmd) == 0 {
        *fl_stdin = true
        *fl_tty = true
        *fl_attach = true
        cmd = []string{&amp;quot;/bin/bash&amp;quot;, &amp;quot;-i&amp;quot;}
    }
    ...
// Find the image
    img := srv.images.Find(name)
    ...
// Create Container
    container := srv.CreateContainer(img, *fl_tty, *fl_stdin, *fl_comment, cmd[0], cmd[1:]...)
    ...
// Start Container
    container.Start()
    ...
}
&lt;/code>&lt;/pre>
&lt;p>用户通常会提供一个镜像和一个命令，以便 dockerd 运行。当它们被省略时，将默认使用镜像 base 和命令/bin/bash。&lt;/p>
&lt;p>&lt;strong>查找镜像&lt;/strong>&lt;/p>
&lt;p>然后，我们通过将名称（或 ID）映射到文件系统上的一个位置来找到指定的镜像（假设前面已经执行过 docker pull （注：这个命令从镜像仓库中拉取或者更新指定镜像）命令，镜像已经生成）。&lt;/p>
&lt;pre>&lt;code>type Index struct {
    Path    string// &amp;quot;/var/lib/docker/images/index.json&amp;quot;
    ByName  map[string]*History
    ById    map[string]*Image
}
func(index *Index)Find(idOrName string) *Image {
    ...
// Lookup by ID
if image, exists := index.ById[idOrName]; exists {
return image
    }
// Lookup by name
if history, exists := index.ByName[idOrName]; exists &amp;amp;&amp;amp; history.Len() &amp;gt; 0 {
return (*history)[0]
    }
returnnil
}
&lt;/code>&lt;/pre>
&lt;p>在这个版本的 Docker 中，所有镜像都存储在/var/lib/docker/images 文件夹中。想进一步了解 Docker 镜像中有什么，请参阅我以前的博客文章（&lt;a href="https://cameronlonsdale.com/2018/11/26/whats-in-a-docker-image/">https://cameronlonsdale.com/2018/11/26/whats-in-a-docker-image/&lt;/a>）。&lt;/p>
&lt;p>&lt;strong>创建容器&lt;/strong>&lt;/p>
&lt;p>接着我们开始创建容器。dockerd 创建了一个结构（struct）来保存与这个容器相关的所有元数据，并将它存储在一个列表中以便于访问。&lt;/p>
&lt;pre>&lt;code>container := &amp;amp;Container{    // Examples
    Id:         id,         // &amp;quot;09906fa3&amp;quot;
    Root:       root,       // /var/lib/docker/containers/09906fa3/&amp;quot;
    Created:    time.Now(),
    Path:       command,    // &amp;quot;/bin/bash&amp;quot;
    Args:       args,       // [&amp;quot;-i&amp;quot;]
    Config:     config,
// &amp;quot;/var/lib/docker/containers/09906fa3/rootfs&amp;quot;
// &amp;quot;/var/lib/docker/containers/09906fa3/rw&amp;quot;
    Filesystem: newFilesystem(path.Join(root, &amp;quot;rootfs&amp;quot;), path.Join(root, &amp;quot;rw&amp;quot;), layers),
    State:      newState(),
// &amp;quot;/var/lib/docker/containers/09906fa3/config.lxc&amp;quot;
    lxcConfigPath: path.Join(root, &amp;quot;config.lxc&amp;quot;),
stdout:        newWriteBroadcaster(),
stderr:        newWriteBroadcaster(),
    stdoutLog:     new(bytes.Buffer),
    stderrLog:     new(bytes.Buffer),
}
...
// Create directories
os.Mkdir(root, 0700);
container.Filesystem.createMountPoints();
...
// Generate LXC Config file
container.generateLXCConfig();
&lt;/code>&lt;/pre>
&lt;p>当创建这个 struct 时，dockerd 会在下列路径为容器创建下面这个唯一目录：/var/lib/docker/containers/&lt;!-- raw HTML omitted -->。在这个目录下中有两个子目录：/rootfs 只读根文件系统层（来自联合挂载（union mounted)的镜像），/rw 提供一个单独的读写层，供容器来创建临时文件。&lt;/p>
&lt;p>最后，使用我们新创建的容器数据填充一个模板，用以生成 LXC 配置文件。更多关于 LXC 的信息，请参见下一节。&lt;/p>
&lt;p>&lt;strong>运行容器&lt;/strong>&lt;/p>
&lt;p>我们的容器终于创建出来了！但它还没有运行，现在让我们启动它。&lt;/p>
&lt;pre>&lt;code>func(container *Container)Start()error {
// Mount file system if not mounted
    container.Filesystem.EnsureMounted();
    params := []string{
&amp;quot;-n&amp;quot;, container.Id,
&amp;quot;-f&amp;quot;, container.lxcConfigPath,
&amp;quot;--&amp;quot;,
        container.Path,
    }
    params = append(params, container.Args...)
// /usr/bin/lxc-start -n 09906fa3 -f /var/lib/docker/containers/09906fa3/config.lxc -- /bin/bash -i
    container.cmd = exec.Command(&amp;quot;/usr/bin/lxc-start&amp;quot;, params...)
    ...
}
第一步是确保容器的文件系统已挂载。
&lt;/code>&lt;/pre>
&lt;p>第一步是确保容器的文件系统已挂载。&lt;/p>
&lt;pre>&lt;code>func(fs *Filesystem)Mount()error {
    ...
    rwBranch := fmt.Sprintf(&amp;quot;%v=rw&amp;quot;, fs.RWPath)
    roBranches := &amp;quot;&amp;quot;
for _, layer := range fs.Layers {
        roBranches += fmt.Sprintf(&amp;quot;%v=ro:&amp;quot;, layer)
    }
    branches := fmt.Sprintf(&amp;quot;br:%v:%v&amp;quot;, rwBranch, roBranches)
// Mount the branches onto &amp;quot;/var/lib/docker/containers/09906fa3/rootfs&amp;quot;
    syscall.Mount(&amp;quot;none&amp;quot;, fs.RootFS, &amp;quot;aufs&amp;quot;, 0, branches);
    ...
}
&lt;/code>&lt;/pre>
&lt;p>使用 AUFS 联合挂载文件系统（union mount file system），镜像的各个层以 read-only 方式挂载在彼此的顶部，以向容器呈现一个一致的视图。read-write 路径被挂载在最顶层，为容器提供临时存储。&lt;/p>
&lt;p>然后，为了启动容器，dockerd 使用刚才生成的 LXC 模板来运行另一个程序 lxc-start。&lt;/p>
&lt;p>&lt;strong>LXC&lt;/strong>&lt;/p>
&lt;p>LXC（Linux Containers）是一个抽象层，它为用户空间应用程序提供了一个简单的 API 来创建和管理容器。事实是，容器不是真实的东西，在 Linux 内核中没有称作容器的对象。容器是一组内核对象的集合，它们协同工作以提供进程隔离。因此，简单的 lxc-start 命令实际上被翻译成下面的设置和应用：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>内核名字空间 (ipc, uts, mount, pid, network 和 user)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Apparmor 和 SELinux profiles&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Seccomp policies&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Chroots (使用 pivot_root)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Kernel capabilities&lt;/p>
&lt;/li>
&lt;li>
&lt;p>CGroups (control groups)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>容器清理&lt;/strong>&lt;/p>
&lt;pre>&lt;code>func(container *Container)monitor() {
// Wait for the program to exit
    container.cmd.Wait()
    exitCode := container.cmd.ProcessState.Sys().(syscall.WaitStatus).ExitStatus()
// Cleanup
    container.stdout.Close()
    container.stderr.Close()
    container.Filesystem.Umount();
// Report status back
    container.State.setStopped(exitCode)
    container.save()
}
&lt;/code>&lt;/pre>
&lt;p>最后，dockerd 将监控容器直到完成，并在容器完成后清理不必要的数据。&lt;/p>
&lt;p>&lt;strong>总结&lt;/strong>&lt;/p>
&lt;p>概括起来，使用 Docker 2013 来管理一个容器的运行涉及以下步骤：&lt;/p>
&lt;pre>&lt;code>dockerd is sent the run command (using the command-line application or otherwise)
    ↳ dockerd finds the specified image on the file system
    ↳ A container struct is created and stored for future use
    ↳ Directories on the filesystemare setup foruseby the container
    ↳ LXC is instructed tostart the container
    ↳ dockerd monitors the containeruntil completion
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>Docker 发生了什么变化？&lt;/strong>&lt;/p>
&lt;p>Docker 自从被引入以来已经过去 6 年了，容器化模式在此期间已经得到了迅猛发展。无论是大小企业都采用了 Docker，特别在它和容器编排系统 Kubernetes 的结合之后。&lt;/p>
&lt;p>通过开源的力量，起初的 3 位贡献者已经发展到 1800 多人，每个人都为项目带来了新的想法。为了促进可扩展性，Open Container Initiative（OCI）标准于 2015 年发布，它定义了容器的镜像和运行时规范的开放标准。镜像规范概述了容器镜像的结构，运行时规范则描述了在其平台上运行容器时的实现应该遵循的接口和行为标准。因此，社区开发了广泛的容器管理项目，涵盖了从原生容器到被虚拟机隔离的容器。在微软的支持下，该行业现在也拥有了符合 OCI 标准的原生 Windows 容器。&lt;/p>
&lt;p>所有这些变化都反映在 moby 代码库中。基于这种历史背景，我们可以开始分析 Docker 2019 及其组件了。&lt;/p>
&lt;p>&lt;strong>Docker 2019 是如何工作的？&lt;/strong>
经过 6 年和 36207 次的代码提交，moby 代码库已经发展成为一个大型的合作项目，它正在影响和依赖许多组件。&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/wf39dp/1616122191830-b3b387ff-df23-4ff2-90ef-4e833bdfddee.jpeg" alt="1.jpg">&lt;/p>
&lt;p>从一个非常简单的角度来看，Moby 2019 有两个新的主要组件，一个是在容器的生命周期中管理容器的 containerd 组件，另一个是符合 OCI 标准的运行时（例如 runc）组件，它是用于创建容器的最低用户级抽象（替换 LXC）。&lt;/p>
&lt;p>&lt;strong>命令行应用程序&lt;/strong>&lt;/p>
&lt;p>命令行应用程序的控制流程大部分没有改变。今天，JSON 格式的 HTTP（S）报文是与 dockerd 通信的标准。&lt;/p>
&lt;p>为了实现可扩展性，API 和 docker 二进制文件是分开的。程序代码位于 docker/cli 目录，它依赖 moby/moby/client 包作为接口与 dockerd 对话。&lt;/p>
&lt;p>&lt;strong>dockerd&lt;/strong>&lt;/p>
&lt;p>dockerd 负责监听用户请求，并根据预先定义的路由对这些请求进行处理。&lt;/p>
&lt;pre>&lt;code>// Container Routes
func(r *containerRouter)initRoutes() {
    r.routes = []router.Route{
// HEAD
        router.NewHeadRoute(&amp;quot;/containers/{name:.*}/archive&amp;quot;, r.headContainersArchive),
// GET
        router.NewGetRoute(&amp;quot;/containers/json&amp;quot;, r.getContainersJSON),
        router.NewGetRoute(&amp;quot;/containers/{name:.*}/export&amp;quot;, r.getContainersExport),
        router.NewGetRoute(&amp;quot;/containers/{name:.*}/changes&amp;quot;, r.getContainersChanges),
        ...
    }
} 
&lt;/code>&lt;/pre>
&lt;p>这个引擎仍然负责各种各样的任务，例如与镜像注册项的交互，并在文件系统上设置目录供容器使用。默认驱动程序会把一个镜像联合挂载到/var/lib/docker/overlay2/下的目录。&lt;/p>
&lt;p>dockerd 不再负责管理运行容器的生命周期。随着项目的发展，决定将容器监管分开到一个名为 containerd 的单独项目。这样 docker 守护进程可以继续创新，而不必担心破坏运行时的实现。&lt;/p>
&lt;p>尽管 docker/engine 是从 moby/moby 分支出来的，考虑到可能的代码差异，到目前为止，它们共享相同的代码提交树。&lt;/p>
&lt;p>&lt;strong>docker run 命令&lt;/strong>&lt;/p>
&lt;pre>&lt;code>funcrunContainer(dockerCli command.Cli, opts *runOptions, copts *containerOptions, containerConfig *containerConfig)error {
    ...
// Create the container
    createResponse = createContainer(ctx, dockerCli, containerConfig, &amp;amp;opts.createOptions)
    ...
// Start the container
    client.ContainerStart(ctx, createResponse.ID, types.ContainerStartOptions{});
    ...
}
&lt;/code>&lt;/pre>
&lt;p>docker run 命令首先请求守护进程创建一个容器。此请求被路由到 postContainersCreate 命令。&lt;/p>
&lt;p>&lt;strong>创建容器&lt;/strong>&lt;/p>
&lt;p>稍后调用几个函数，我们来创建一个容器。&lt;/p>
&lt;pre>&lt;code>func (daemon *Daemon) create(opts createOpts) (retC *container.Container, retErr error) {
    ...
// Find the Image
    img = daemon.imageService.GetImage(params.Config.Image)
    ...
// Create container object
    container = daemon.newContainer(opts.params.Name, os, opts.params.Config, opts.params.HostConfig, imgID, opts.managed);
    ...
// Set RWLayer for container after mount labels have been set
    rwLayer = daemon.imageService.CreateLayer(container, setupInitLayer(daemon.idMapping))
    container.RWLayer = rwLayer
    ...
// Create root directory 
    idtools.MkdirAndChown(container.Root, 0700, rootIDs);
    ...
// Windows or Linux specific setup
    daemon.createContainerOSSpecificSettings(container, opts.params.Config, opts.params.HostConfig);
    ...
// Store in a map for future lookup
    daemon.Register(container);
    ...
}
&lt;/code>&lt;/pre>
&lt;p>首先，我们创建一个对象来存储容器的元数据。&lt;/p>
&lt;p>然后像以前一样，我们创建一个根目录，其中包含镜像数据和读写（read-write）层，供容器使用。现在的区别在于联合挂载文件系统（union mount file system）已经成长到能够支持 btrfs, OverlayFS 和其它文件系统。为了方便这一点，驱动系统抽象了实现。&lt;/p>
&lt;p>最后，容器对象被添加到守护进程的容器列表(map)中，以供将来使用。&lt;/p>
&lt;p>&lt;strong>启动容器&lt;/strong>&lt;/p>
&lt;p>现在容器已创建成功，但尚未运行。接下来，我们请求启动它。&lt;/p>
&lt;pre>&lt;code>func(daemon *Daemon)containerStart(container *container.Container, checkpoint string, checkpointDir string, resetRestartManager bool)(err error) {
    ...
// Create OCI spec for container
    spec = daemon.createSpec(container);
    ...
// Call containerd to create the container according to spec
    daemon.containerd.Create(ctx, container.ID, spec, createOptions)
    ...
// Call containerd to start running process inside of container
    pid = daemon.containerd.Start(context.Background(), container.ID, checkpointDir,
        container.StreamConfig.Stdin() != nil || container.Config.Tty,
        container.InitializeStdio);
    ...
}
&lt;/code>&lt;/pre>
&lt;p>这就是 containerd 起作用的地方，首先我们请求按照 OCI 规格（spec）来创建一个容器。然后，开始在这个容器内运行一个进程。然后把随后的监管交给 containerd 来处理。&lt;/p>
&lt;p>&lt;strong>containerd&lt;/strong>&lt;/p>
&lt;p>containerd 这个术语有令人困惑的地方。它被认为是一个运行时（runtime），但是又不实现 OCI 运行时规范，因此它是一个和 runc 不一样的的运行时。containerd 是一个守护进程，它使用了符合 OCI 规格的运行时来监管容器的生命周期。正如 Michael Crosby 所描述的，containerd 是容器的监管者。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/wf39dp/1616122241290-e69d939f-fadf-4db9-851d-8ac7148cbed0.jpeg" alt="2.jpg">
(Source: Docker)&lt;/p>
&lt;p>containerd 被设计成监控容器的通用基础层，专注于速度和简单性。&lt;/p>
&lt;p>很简单，创建一个容器所需要的只是它的规格（spec）和一个对根文件系统所在的位置进行编码的包。&lt;/p>
&lt;p>&lt;strong>创建容器&lt;/strong>&lt;/p>
&lt;pre>&lt;code>func(l *local)Create(ctx context.Context, req *api.CreateContainerRequest, _ ...grpc.CallOption)(*api.CreateContainerResponse, error) {
    l.withStoreUpdate(ctx, func(ctx context.Context, store containers.Store)error {
// Update container data store with new container record
        container := containerFromProto(&amp;amp;req.Container)
        created := store.Create(ctx, container)
        resp.Container = containerToProto(&amp;amp;created)
returnnil
    });
    ...
}
&lt;/code>&lt;/pre>
&lt;p>dockerd（通过一个 GRPC 客户端）请求 containerd 创建一个容器。containerd 接收这个请求后，将容器规格(spec)存储在位于/var/lib/containerd/下的文件系统支持的数据库中。&lt;/p>
&lt;p>&lt;strong>启动容器&lt;/strong>&lt;/p>
&lt;pre>&lt;code>// Start create and start a task for the specified containerd id
func(c *client)Start(ctx context.Context, id, checkpointDir string, withStdin bool, attachStdio libcontainerdtypes.StdioCallback)(int, error) {
    ctr, err := c.getContainer(ctx, id)
    ...
    t, err = ctr.NewTask(ctx, ...)
    ...
    t.Start(ctx);
    ...
returnint(t.Pid()), nil
}
&lt;/code>&lt;/pre>
&lt;p>启动一个容器涉及创建和启动一个称为 Task 的新对象，该对象代表着容器内的一个进程。&lt;/p>
&lt;p>&lt;strong>创建 Task&lt;/strong>&lt;/p>
&lt;p>1
Plain Text&lt;/p>
&lt;pre>&lt;code>func (l *local) Create(ctxcontext.Context, r *api.CreateTaskRequest, _ ...grpc.CallOption) (*api.CreateTaskResponse, error) {
container := l.getContainer(ctx, r.ContainerID)
    ...
    rtime l.getRuntime(container.Runtime.Name)
    ...
    c = rtime.Create(ctx, r.ContainerID, opts)
    ...
}
&lt;/code>&lt;/pre>
&lt;p>Task 的创建由底层容器的运行时负责。containerd 复用了 OCI 运行时，因此我们需要查找哪个运行时被用来创建这个 Task。第一个和默认的运行时是 runc。这个运行时的创建命令最终是运行一个外部进程 runc，但它是通过间接调用 docker-shim 进程来完成的。&lt;/p>
&lt;p>如果 containerd 崩溃了，运行中的容器的信息将会丢失。为了防止这种情况发生，containerd 为每个容器创建一个称为垫片（shim）的管理进程。shim 进程将调用一个 OCI 运行时来创建和启动一个容器，然后执行监视容器的职责，以捕获退出代码并管理标准 IO。&lt;/p>
&lt;p>在嵌套代码中，shim 将在执行 create 命令时使用 go-runc bindings 库来启动/run/containerd/runc 命令。。有关 runc 的更多信息，请参见下一节。&lt;/p>
&lt;p>如果 containerd 真的崩溃了，可以通过与 shim 通信并从/var/run/containerd/目录读取状态信息来恢复。&lt;/p>
&lt;p>&lt;strong>启动 Task&lt;/strong>&lt;/p>
&lt;p>既然容器已经创建了，启动 Task 需要做的事情就是简单地指示 shim 程序通过调用 runc start 命令来启动进程。&lt;/p>
&lt;p>&lt;strong>Runc&lt;/strong>&lt;/p>
&lt;p>runc 是一个命令行工具，用于根据 OCI 规格生成和运行容器。当它执行与 LXC 类似的工作时，它抽象出创建容器所需的 Linux 内核调用。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/wf39dp/1616122274035-4eb4c0d9-e3ba-47fe-a049-2e7cee2b89c7.jpeg" alt="3.jpg">&lt;/p>
&lt;p>（这只可爱的仓鼠属于 runc）&lt;/p>
&lt;p>runc 只是 OCI 运行时规格（spec）的一个实现，更多的可用于在各种系统上创建容器的实现可以在这里找到（&lt;a href="https://github.com/opencontainers/runtime-spec/blob/master/implementations.md">https://github.com/opencontainers/runtime-spec/blob/master/implementations.md&lt;/a>）。&lt;/p>
&lt;p>&lt;strong>创建容器(runc create)&lt;/strong>&lt;/p>
&lt;pre>&lt;code>var createCommand = cli.Command{
    Name:  &amp;quot;create&amp;quot;,
    Description: `The create command creates an instance of a container for a bundle. The bundle
is a directory with a specification file named &amp;quot;` + specConfig + `&amp;quot; and a root
filesystem.`,
    ...
    Action: func(context *cli.Context)error {
        spec := setupSpec(context)
        ...
        status := startContainer(context, spec, CT_ACT_CREATE, nil)
// exit with the container's exit status so any external supervisor is
// notified of the exit with the correct exit status.
        os.Exit(status)
returnnil
},
&lt;/code>&lt;/pre>
&lt;p>当 runc 创建一个容器时，它会在容器内设置名字空间、cgroups 甚至 init 进程。当创建结束时，进程暂停，等待信号开始运行。&lt;/p>
&lt;p>&lt;strong>启动容器(runc start)&lt;/strong>&lt;/p>
&lt;pre>&lt;code>var startCommand = cli.Command{
    Name:  &amp;quot;start&amp;quot;,
    Usage: &amp;quot;executes the user defined process in a created container&amp;quot;,
    ...
    Action: func(context *cli.Context)error {
        container := getContainer(context)
        status := container.Status()
        ...
switch status {
case libcontainer.Created:
return container.Exec()
case libcontainer.Stopped:
return errors.New(&amp;quot;cannot start a container that has stopped&amp;quot;)
case libcontainer.Running:
return errors.New(&amp;quot;cannot start an already running container&amp;quot;)
        }
    },
}
&lt;/code>&lt;/pre>
&lt;p>最后，runc 向暂停的进程发送一个信号以开始容器的启动。&lt;/p>
&lt;p>&lt;strong>直观总结&lt;/strong>&lt;/p>
&lt;p>概括起来，使用 Docker 2019 来管理一个容器的运行涉及以下步骤：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>一个创建容器的 POST 请求发送给 dockerd;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>dockerd 查找被请求的镜像;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>一个容器对象被创建，并存储起来以供将来使用&lt;/p>
&lt;/li>
&lt;li>
&lt;p>设置文件系统的目录结构供容器使用;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>一个启动容器的 POST 请求发送给 dockerd;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>为容器创建 OCI 规格（spec）;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>containerd 被调用来创建容器;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>containerd 将容器规格储存在数据库中;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>containerd 被调用来启动容器;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>containerd 为容器创建一个 Task&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Task 使用 shim 来调用 runc create 指令&lt;/p>
&lt;/li>
&lt;li>
&lt;p>containerd 启动这个 Task&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Task 使用 shim 来调用 runc start 指令&lt;/p>
&lt;/li>
&lt;li>
&lt;p>shim/containerd 继续监控容器直到任务完成&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>借助 containerd 的架构图，可以让我们直观地理解整个过程。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/wf39dp/1616122118090-96da77da-0b52-41c5-8942-9787f054a66a.jpeg" alt="p.jpg">&lt;/p>
&lt;p>&lt;strong>结论&lt;/strong>&lt;/p>
&lt;p>表面上看，Docker 及其配套项目显得杂乱无章，但实际上其底层的结构清晰并且已经实现了模块化。也就是说，发现所有上面的这些信息不是一件轻松的事。它散落在代码、博客帖子、会议讨论、文档和会议笔记中。拥有清晰的“自文档化”的代码是一个伟大的目标，但当涉及到大型系统时，我认为这还不够。有时，你只需要用简单的语言写下系统的外观，以及每个组件的职责。&lt;/p>
&lt;p>非常感谢这些项目的所有贡献者，特别是那些编写解释这些系统的文档的人。&lt;/p>
&lt;p>希望这篇文章这有助于帮助你理解 Docker 是如何运行容器的。我知道将来我会多次使用这篇文章作为参考。&lt;/p></description></item><item><title>Docs: Docker 介绍</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.2.%E5%AE%9E%E7%8E%B0%E5%AE%B9%E5%99%A8%E7%9A%84%E5%B7%A5%E5%85%B7/docker/docker-%E4%BB%8B%E7%BB%8D/docker-%E4%BB%8B%E7%BB%8D/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.2.%E5%AE%9E%E7%8E%B0%E5%AE%B9%E5%99%A8%E7%9A%84%E5%B7%A5%E5%85%B7/docker/docker-%E4%BB%8B%E7%BB%8D/docker-%E4%BB%8B%E7%BB%8D/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.docker.com/get-started/overview/">官方文档&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Docker 是一个基于容器技术的开放式平台，可以 开发、分享、运行应用程序。Docker 分为两个版本&lt;/p>
&lt;ul>
&lt;li>Docker-CE # 社区版&lt;/li>
&lt;li>Docker-EE # 商业版&lt;/li>
&lt;/ul>
&lt;p>Docker 为了解决 LXC 无法批量管理、复刻容器等问题应运而生，简化用户对容器的应用。Docker 是 Docker.inc 公司开源的一个基于 LXC 技术之上构建的 Container 容器引擎，不再使用模板技术，而是使用了 image 文件的方式来创建。image 是放在统一的互联网仓库中，当需要使用 Container 的时候，直接 run 或者 creat 等即可从仓库中下载到该 image，然后基于该 image 再运行 Container。&lt;/p>
&lt;p>Note：一开始，docker 在 linux 上实现容器技术的后端使用的是 lxc，后来使用 runc 来代替。&lt;/p>
&lt;h1 id="docker-的工作模式">Docker 的工作模式&lt;/h1>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qqh0gm/1616122015472-3e6bcce1-e878-485c-859b-057a2eaf98c6.png" alt="">
Docker 对使用者来讲是一个 C/S 模式的架构，而 Docker 的后端是一个非常松耦合的架构，模块各司其职，并有机组合，支撑 Docker 的运行。&lt;/p>
&lt;p>用户是使用 Docker Client 与 Docker Daemon 建立通信，并发送请求给后者。&lt;/p>
&lt;p>而 Docker Daemon 作为 Docker 架构中的主体部分，首先提供 Server 的功能使其可以接受 Docker Client 的请求；而后 Engine 执行 Docker 内部的一系列工作，每一项工作都是以一个 Job 的形式的存在。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qqh0gm/1616122015445-eda7a719-b2a0-4fd6-8c61-b8d450d2dc3d.png" alt="">
当利用 docker run 来创建容器时，Docker 在后台运行的标准操作包括：&lt;/p>
&lt;ol>
&lt;li>检查本地是否存在指定的镜像，不存在就从公有仓库下载&lt;/li>
&lt;li>利用镜像创建并启动一个容器&lt;/li>
&lt;li>分配一个文件系统，并在只读的镜像层外面挂在一层可读写层&lt;/li>
&lt;li>从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去&lt;/li>
&lt;li>从地址池配置一个 ip 地址给容器&lt;/li>
&lt;li>执行用户指定的应用程序&lt;/li>
&lt;li>执行完毕后 Container 被终止&lt;/li>
&lt;li>docker 容器默认会把容器内部第一个进程，也就是 pid=1 的程序作为 docker 容器是否正在运行的依据，如果 docker 容器 pid 挂了，那么 docker 容器便会直接退出。&lt;/li>
&lt;li>如果不想让 Container 运行完程序就终止，那么需要让 PID 为 1 的程序始终运行，比如 nginx 使用 daemon off 选项，或者其余任何可以让程序运行在前台的方法&lt;/li>
&lt;/ol>
&lt;h1 id="docker-关联文件">Docker 关联文件&lt;/h1>
&lt;p>Note：目录名中的 overlay2 指的是 docker 当前 Storage Driver 类型，使用不同的存储驱动，则目录名字也不同，如果我使用 aufs 驱动，那么目录名就会变为 aufs
由于 Docker 为 C/S 架构，所以 客户端与服务端分别有各自的配置&lt;/p>
&lt;ul>
&lt;li>客户端就是 docker 程序，也可以称为 docker-cli、docker 命令行工具&lt;/li>
&lt;li>服务端就是 dockerd 程序&lt;/li>
&lt;/ul>
&lt;h2 id="dockerd-程序关联文件">dockerd 程序关联文件&lt;/h2>
&lt;p>&lt;strong>/etc/docker/daemon.json&lt;/strong> # dockerd 服务运行时配置文件。该目录与文件需要自行创建，默认不存在，以 JSON 格式为守护程序设置任何配置选项。
&lt;strong>/run/docker/*&lt;/strong> # container 的状态文件(state.json)、IO 文件 、netns 文件保存路径。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>containerd/*&lt;/strong> # container 的 IO 文件(init-stdin、init-stdout)保存路径。其内目录名为 &lt;strong>ContainerID&lt;/strong>。&lt;/li>
&lt;li>&lt;strong>netns/*&lt;/strong> # 网络名称空间保存路径。&lt;/li>
&lt;li>&lt;strong>runtime-runc/moby/*&lt;/strong> # container 的运行时状态文件保存路径。其内目录名为 &lt;strong>ContainerID&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>/run/containerd/*&lt;/strong> # container 的 bundle 以及 containerd.sock 文件保存路径&lt;/p>
&lt;ul>
&lt;li>&lt;strong>io.containerd.runtime.v1.linux/moby/*&lt;/strong> # 容器启动后生成的 bundle 文件保存路径，其内目录名为 &lt;strong>ContainerID&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>/var/lib/docker/*&lt;/strong> # docker 管理的 网络、镜像、容器 等信息的保存路径。该路径为默认路径，可以通过配置修改。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>./containers/*&lt;/strong> # 所有 container 的元数据保存路径(其中包括容器日志文件、容器运行配置等)。其内目录名为 &lt;strong>ContainerID&lt;/strong>&lt;/li>
&lt;li>&lt;strong>./image/overlay2/*&lt;/strong> # docker images 以及 所有 layers 的元数据保存路径。
&lt;ul>
&lt;li>&lt;strong>./imagedb/*&lt;/strong> # images 的元数据保存路径
&lt;ul>
&lt;li>&lt;strong>./content/sha256/*&lt;/strong> # 所有 images 的 Image Configuration 文件保存路径。其内文件名为 &lt;strong>ImageID&lt;/strong>。&lt;/li>
&lt;li>&lt;strong>./metadata/sha256/*&lt;/strong> # 所有 images 的 创建时间、更新时间、父镜像的 Image Configuration 文件名 等信息保存路径，其内目录名为 &lt;strong>ImageID&lt;/strong>。
&lt;ul>
&lt;li>注意：好像只有自己在本地构建的镜像才会在该目录中记录。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>./layerdb&lt;/strong> # 所有 layers 的元数据保存路径。
&lt;ul>
&lt;li>&lt;strong>./mounts/*&lt;/strong> # container layers 元数据保存路径，其内目录名为 ContainerID。容器创建完后，该容器的可读写层的元数据保存在此。包括可读写层父层的 chainID、可读写层的 cacheID(目录内的 mount-id 文件内容就是 &lt;strong>cacheID&lt;/strong>)。&lt;/li>
&lt;li>&lt;strong>./sha256/*&lt;/strong> # images layers 元数据保存路径，其内目录名为 chainID。包括 layer 的 &lt;strong>cacheID&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>./overlay2/*&lt;/strong> # 所有 layers 的数据保存路径，其内目录名为 cacheID。docker run 的时候，是通过该目录中镜像层来启动的。创建容器后生成的可写层，也会保存在该目录，直到容器被删除。&lt;/li>
&lt;li>&lt;strong>./volumes/*&lt;/strong> # docker 创建的 volume 信息保存在该目录，如果是自动自动创建的 volume 则名为一串随机数&lt;/li>
&lt;/ul>
&lt;h2 id="docker-程序关联文件">docker 程序关联文件&lt;/h2>
&lt;p>&lt;strong>/root/.docker/config.json&lt;/strong> # docker login 后的信息都保存在此处，用户名和密码通过 base64 格式保存在其中。&lt;/p>
&lt;h1 id="docker-日志介绍">Docker 日志介绍&lt;/h1>
&lt;p>容器日志指的是每个容器打到 stdout 和 stderr 的日志，而不是容器内部的日志文件。docker 管理所有容器打到 stdout 和 stderr 的日志，其他来源的日志不归 docker 管理。我们通过 docker logs 命令查看容器日志都是读取容器打到 stdout 和 stderr 的日志。&lt;/p>
&lt;p>基于日志驱动（loging driver）的日志管理机制&lt;/p>
&lt;p>Docker 提供了一套通用、灵活的日志管理机制，Docker 将所有容器打到 stdout 和 stderr 的日志都统一通过日志驱动重定向到某个地方。&lt;/p>
&lt;p>Docker 支持的日志驱动有很多，比如 local、json-file、syslog、journald 等等，类似插件一样，不同的日志驱动可以将日志重定向到不同的地方，这体现了 Docker 日志管理的灵活性，以热插拔的方式实现日志不同目的地的输出。&lt;/p>
&lt;p>Dokcer 默认的日志日志驱动是 json-file，该驱动将将来自容器的 stdout 和 stderr 日志都统一以 json 的形式存储到本地磁盘。日志存储路径格式为：/var/lib/docker/containers/&amp;lt;容器 id&amp;gt;/&amp;lt;容器 id&amp;gt;-json.log。所以可以看出在 json-file 日志驱动下，Docker 将所有容器日志都统一重定向到了 /var/lib/docker/containers/ 目录下，这为日志收集提供了很大的便利。&lt;/p>
&lt;p>注意：只有日志驱动为：local、json-file 或者 journald 时，docker logs 命令才能查看到容器打到 stdout/stderr 的日志。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qqh0gm/1616122015494-8bc7a655-2804-40b9-b3d4-0e541a93359b.png" alt="">&lt;/p>
&lt;p>下面为官方支持的日志驱动列表：
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qqh0gm/1616122015440-06e63de1-bbb8-4d6c-9271-b37947d483ae.png" alt="">&lt;/p>
&lt;h2 id="docker-日志驱动loging-driver配置">Docker 日志驱动（loging driver）配置&lt;/h2>
&lt;p>上面我们已经知道 Docker 支持多种日志驱动类型，我们可以修改默认的日志驱动配置。日志驱动可以全局配置，也可以给特定容器配置。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>查看 Docker 当前的日志驱动配置&lt;/p>
&lt;p>$ docker info |grep &amp;ldquo;Logging Driver&amp;rdquo;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>查看单个容器的设置的日志驱动&lt;/p>
&lt;p>$ docker inspect -f &amp;lsquo;{{.HostConfig.LogConfig.Type}}&amp;rsquo; 容器id&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Docker 日志驱动全局配置，全局配置意味所有容器都生效，编辑 /etc/docker/daemon.json 文件（如果文件不存在新建一个），添加日志驱动配置。示例：配置 Docker 引擎日志驱动为 syslog&lt;/p>
&lt;p>{
&amp;ldquo;log-driver&amp;rdquo;: &amp;ldquo;syslog&amp;rdquo;
}&lt;/p>
&lt;/li>
&lt;li>
&lt;p>给特定容器配置日志驱动，在启动容器时指定日志驱动 &amp;ndash;log-driver 参数。示例：启动 nginx 容器，日志驱动指定为 journald&lt;/p>
&lt;p>$ docker run &amp;ndash;name nginx -d &amp;ndash;log-driver journald nginx&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="docker-默认的日志驱动-json-file">Docker 默认的日志驱动 json-file&lt;/h2>
&lt;p>json-file 日志驱动记录所有容器的 STOUT/STDERR 的输出 ，用 JSON 的格式写到文件中，每一条 json 日志中默认包含 log, stream, time 三个字段，示例日志如下：文件路径为： /var/lib/docker/containers/40f1851f5eb9e684f0b0db216ea19542529e0a2a2e7d4d8e1d69f3591a573c39/40f1851f5eb9e684f0b0db216ea19542529e0a2a2e7d4d8e1d69f3591a573c39-json.log&lt;/p>
&lt;pre>&lt;code>{&amp;quot;log&amp;quot;:&amp;quot;14:C 25 Jul 2019 12:27:04.072 * DB saved on disk\n&amp;quot;,&amp;quot;stream&amp;quot;:&amp;quot;stdout&amp;quot;,&amp;quot;time&amp;quot;:&amp;quot;2019-07-25T12:27:04.072712524Z&amp;quot;}
&lt;/code>&lt;/pre>
&lt;p>那么打到磁盘的 json 文件该如何配置轮替，防止撑满磁盘呢？每种 Docker 日志驱动都有相应的配置项日志轮转，比如根据单个文件大小和日志文件数量配置轮转。json-file 日志驱动支持的配置选项如下：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qqh0gm/1616122015431-a74f2c52-7a4b-443a-b6ec-d7031a967089.png" alt="">&lt;/p>
&lt;h1 id="heading">&lt;/h1></description></item><item><title>Docs: docker-shim 何去何从</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.2.%E5%AE%9E%E7%8E%B0%E5%AE%B9%E5%99%A8%E7%9A%84%E5%B7%A5%E5%85%B7/docker/docker-%E4%BB%8B%E7%BB%8D/docker-shim-%E4%BD%95%E5%8E%BB%E4%BD%95%E4%BB%8E/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.2.%E5%AE%9E%E7%8E%B0%E5%AE%B9%E5%99%A8%E7%9A%84%E5%B7%A5%E5%85%B7/docker/docker-%E4%BB%8B%E7%BB%8D/docker-shim-%E4%BD%95%E5%8E%BB%E4%BD%95%E4%BB%8E/</guid><description>
&lt;h1 id="heading">&lt;/h1>
&lt;p>关于 dockershim 即将灭亡的传言无疑存在严重夸大。如果一直有关注 Kubernetes 生态系统，很多朋友一时之间可能确实被 Kubernetes 1.20 版本的发布公告弄得有点不知所措。从公告内容来看，自 1.20 版本开始 dockershim 将被全面弃用。但请不要恐慌，调整呼吸，一切都会好起来。&lt;/p>
&lt;p>更重要的是，Mirantis 现已同意与 Docker 开展合作，在 Kubernetes 之外独立维护 shim 代码并将其作为 Docker Engine API 的统一 CRI 接口。对于 Mirantis 客户而言，这意味着 Docker Engine 的商业支持版本 Mirantis Container Runtime（MCR）也将提供 CRI 兼容能力。我们将从&lt;a href="https://github.com/dims/cri-d...">https://github.com/dims/cri-d...&lt;/a>，并逐步将其转化为开源项目&lt;a href="https://github.com/Mirantis/c...">https://github.com/Mirantis/c...&lt;/a>。换句话说，你可以像之前一样继续基于 Docker Engine 构建 Kubernetes，唯一的区别就是 dockershim 由内置方案变成了外部方案。我们将共同努力，保证它在保持原有功能的同时，顺利通过各类一致性测试并提供与此前内置版本相同的使用体验。Mirantis 将在 Mirantis Kubernetes Engine 中使用 dockershim，Docker 方面也将在 Docker Desktop 中继续提供 dockershim。&lt;/p>
&lt;p>从头说起……&lt;/p>
&lt;p>用过 Kubernetes 的朋友都清楚，它的最大作用就是编排各类容器。对不少用户来说，容器已经与 Docker 完全统一了起来。但这种说法并不准确，Docker 本身只是彻底改变了容器技术并将其推向了通用舞台，因此 Docker Engine 也成为 Kubernetes 所支持的第一种（也是最初唯一一种）容器运行时。&lt;/p>
&lt;p>但 Kubernetes 社区并不打算长期保持这样的状态。&lt;/p>
&lt;p>从长远来看，社区希望能够使用多种不同类型的容器，因此参与者们创建了容器运行时接口（CRI），也就是容器引擎与 Kubernetes 间进行通信的标准方式。如果容器引擎与 CRI 相兼容，即可轻松在 Kubernetes 当中运行。&lt;/p>
&lt;p>第一款兼容 CRI 的容器引擎是 containerd，而它来自……好吧，还是来自 Docker。很明显，Docker 本身不仅仅是一种容器运行时，而且提供可供其他用户消费的种种部件，甚至包括用户界面。因此，Docker 提取出与容器实际相关的部分，并将其调整为第一种与 CRI 兼容的运行时，而后把它捐赠给了云原生计算基金会（CNCF）。由此衍生出的 cri-containerd 组件具有运行时中立特性，而且能够支持多种 Linux 与 Windows 操作系统。&lt;/p>
&lt;p>但这还留下最后一个问题——Docker 本身仍然不兼容 CRI。&lt;/p>
&lt;p>Dockershim 是什么？&lt;/p>
&lt;p>正如 Kubernetes 最初对 Docker Engine 提供内置支持一样，其中同样包含对各类存储卷解决方案、网络解决方案甚至是云服务商的内置支持。但要不断维护这些支持功能实在是太过麻烦，因此社区决定将所有第三方解决方案从核心中剥离出来并创建相关接口，例如：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>容器运行时接口（CRI）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>容器网络接口（CNI）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>容器存储接口（CSI）&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>其中的基本思路在于，只要兼容这些接口，那么任何供应商都可以创建出能自动与 Kubernetes 相对接的产品。&lt;/p>
&lt;p>当然，这绝不是说不兼容的组件就没办法与 Kubernetes 配合使用；Kubernetes 可以使用正确的组件完成各类协同。换言之，不兼容的组件仅仅需要加上个“shim（意为垫片）”，由其在组件与相应的 Kubernetes 接口之间完成转换，即可轻松解决问题。例如，dockershim 会接收 CRI 命令并将其转换为 Docker Engine 能够理解的内容，反之亦然。但在第三方组件被从 Kubernetes 核心内剥离的背景之下，dockershim 自身也需要逐步退出。&lt;/p>
&lt;p>虽然听起来好像事情不小，但实际上没那么严重。大家使用 docker build 构建起的 CRI 兼容型镜像，未来仍然可以与 Kubernetes 正常配套使用。&lt;/p>
&lt;p>Kubernetes 放弃对 dockershim 的支持，会带来哪些影响？&lt;/p>
&lt;p>对大多数人来说，弃用 dockershim 其实半点影响也没有。这是因为大部分用户既意识不到 dockershim 的存在，实际上使用的也不是 Docker 本体；相反，他们使用的是与 CRI 相兼容的 containerd。&lt;/p>
&lt;p>当然，也有一部分用户（包括 Mirantis 的客户）在运行依赖于 dockershim 的工作负载，借此与 Kubernetes 实现无缝协作。&lt;/p>
&lt;p>考虑到 dockershim 仍然是不少企业难以割舍的重要组件，Mirantis 与 Docker 达成协议，继续支持并开发 dockershim。只不过这一次，dockershim 将以独立开源组件的身份存在。&lt;/p>
&lt;p>那么，这到底意味着什么？&lt;/p>
&lt;p>简单来讲，如果你直接使用 containerd，则不必抱有任何担心；因为 containerd 能够与 CRI 相兼容。如果你身为 Mirantis 的客户，同样不用担心；因为 Mirantis 容器运行时将包含对 dockershim 的支持，确保其与 CRI 相兼容。&lt;/p>
&lt;p>但如果你使用的是开源 Docker Engine，则 dockershim 项目将以开源组件的形式提供，您可以继续在 Kubernetes 上正常使用；唯一的区别就是需要对配置做出少量修改，具体请参见我们后续发布的说明文档。&lt;/p>
&lt;p>所以，请大家不必惊异。Docker 还在，dockershim 还在，一切如常。&lt;/p>
&lt;p>原文链接：&lt;a href="https://www.mirantis.com/blog...">https://www.mirantis.com/blog...&lt;/a>&lt;/p></description></item></channel></rss>