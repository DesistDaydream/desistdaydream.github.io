<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – 1.3.OpenStack 虚拟机编排系统</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.3.openstack-%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/</link><description>Recent content in 1.3.OpenStack 虚拟机编排系统 on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.3.openstack-%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: 1.3.OpenStack 虚拟机编排系统</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.3.openstack-%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/1.3.openstack-%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.3.openstack-%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/1.3.openstack-%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/</guid><description/></item><item><title>Docs: Keystone</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.3.openstack-%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/keystone/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.3.openstack-%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/keystone/</guid><description/></item><item><title>Docs: Neutron</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.3.openstack-%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/neutron/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.3.openstack-%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/neutron/</guid><description/></item><item><title>Docs: Neutron</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.3.openstack-%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/neutron/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.3.openstack-%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/neutron/</guid><description/></item><item><title>Docs: Nova</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.3.openstack-%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/nova/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.3.openstack-%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/nova/</guid><description>
&lt;h1 id="nova-的子组件以及工作流程">Nova 的子组件以及工作流程&lt;/h1>
&lt;p>Nova 的子组件&lt;/p>
&lt;ol>
&lt;li>
&lt;p>API&lt;/p>
&lt;ol>
&lt;li>nova-api 接收和响应客户的 API 调用。 除了提供 OpenStack 自己的 API，nova-api 还支持 Amazon EC2 API。 也就是说，如果客户以前使用 Amazon EC2，并且用 EC2 的 API 开发了些工具来管理虚机，那么如果现在要换成 OpenStack，这些工具可以无缝迁移到 OpenStack，因为 nova-api 兼容 EC2 API，无需做任何修改。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>Compute Core&lt;/p>
&lt;ol>
&lt;li>
&lt;p>nova-scheduler #虚机调度服务，负责决定在哪个计算节点上运行虚机&lt;/p>
&lt;/li>
&lt;li>
&lt;p>nova-compute #管理虚机的核心服务，通过调用 Hypervisor API 实现虚机生命周期管理&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Hypervisor #计算节点上跑的虚拟化管理程序，虚机管理最底层的程序。 不同虚拟化技术提供自己的 Hypervisor。 常用的 Hypervisor 有 KVM，Xen， VMWare 等&lt;/p>
&lt;/li>
&lt;li>
&lt;p>nova-conductor #nova-compute 经常需要更新数据库，比如更新虚机的状态。 出于安全性和伸缩性的考虑，nova-compute 并不会直接访问数据库，而是将这个任务委托给 nova-conductor，这个我们后面详细讨论。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>Console Interface&lt;/p>
&lt;ol>
&lt;li>
&lt;p>nova-console 用户可以通过多种方式访问虚机的控制台：nova-novncproxy，基于 Web 浏览器的 VNC 访问 nova-spicehtml5proxy，基于 HTML5 浏览器的 SPICE 访问 nova-xvpnvncproxy，基于 Java 客户端的 VNC 访问&lt;/p>
&lt;/li>
&lt;li>
&lt;p>nova-consoleauth 负责对访问虚机控制台请求提供 Token 认证&lt;/p>
&lt;/li>
&lt;li>
&lt;p>nova-cert 提供 x509 证书支持&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>Database Nova 会有一些数据需要存放到数据库中，一般使用 MySQL。数据库安装在控制节点上。 Nova 使用命名为 “nova” 的数据库。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Message Queue 在前面我们了解到 Nova 包含众多的子服务，这些子服务之间需要相互协调和通信。为解耦各个子服务，Nova 通过 Message Queue 作为子服务的信息中转站。 所以在架构图上我们看到了子服务之间没有直接的连线，是通过 Message Queue 联系的。OpenStack 默认是用 RabbitMQ 作为 Message Queue。 MQ 是 OpenStack 的核心基础组件。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/cu87t4/1616123186194-d43ec1f0-3506-4784-8c70-81fc866de03d.jpeg" alt="">&lt;/p>
&lt;ol>
&lt;li>
&lt;p>客户（可以是 OpenStack 最终用户，也可以是其他程序）向 API（nova-api）发送请求：“帮我创建一个虚机”&lt;/p>
&lt;/li>
&lt;li>
&lt;p>API 对请求做一些必要处理后，向 Messaging（RabbitMQ）发送了一条消息：“让 Scheduler 创建一个虚机”&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Scheduler（nova-scheduler）从 Messaging 获取到 API 发给它的消息，然后执行调度算法，从若干计算节点中选出节点 A&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Scheduler 向 Messaging 发送了一条消息：“在计算节点 A 上创建这个虚机”&lt;/p>
&lt;/li>
&lt;li>
&lt;p>计算节点 A 的 Compute（nova-compute）从 Messaging 中获取到 Scheduler 发给它的消息，然后在本节点的 Hypervisor 上启动虚机。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在虚机创建的过程中，Compute 如果需要查询或更新数据库信息，会通过 Messaging 向 Conductor（nova-conductor）发送消息，Conductor 负责数据库访问。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>以上是创建虚机最核心的步骤。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>程序之间的调用通常分两种：同步调用和异步调用。&lt;/p>
&lt;p>同步调用&lt;/p>
&lt;p>API 直接调用 Scheduler 的接口是同步调用。 其特点是 API 发出请求后需要一直等待，直到 Scheduler 完成对 Compute 的调度，将结果返回给 API 后 API 才能够继续做后面的工作。&lt;/p>
&lt;p>异步调用&lt;/p>
&lt;p>API 通过 Messaging 间接调用 Scheduler 就是异步调用。 其特点是 API 发出请求后不需要等待，直接返回，继续做后面的工作。 Scheduler 从 Messaging 接收到请求后执行调度操作，完成后将结果也通过 Messaging 发送给 API。在 OpenStack 这类分布式系统中，通常采用异步调用的方式，其好处是：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>解耦各子服务。 子服务不需要知道其他服务在哪里运行，只需要发送消息给 Messaging 就能完成调用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>提高性能 异步调用使得调用者无需等待结果返回。这样可以继续执行更多的工作，提高系统总的吞吐量。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>提高伸缩性 子服务可以根据需要进行扩展，启动更多的实例处理更多的请求，在提高可用性的同时也提高了整个系统的伸缩性。而且这种变化不会影响到其他子服务，也就是说变化对别人是透明的。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>image 说明：创建 instance 时会使用一个从 glance 下载下来的 image(暂时称作 image base）作为 backing file，当 instance 创建完成后生成了一个新的 image(暂时称作 using image)，启动时候后对 image 进行的操作都是在 using image 中进行的，base image 不受影响，当使用相同 image 创建多个 instance 的时候，就不会下载新的 image，而是直接使用已经下载好的在_base 文件夹下的 base image 来直接创建。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>~/data/nova/instances/ 这是保存 using image 的路径，在该文件夹下的 image ID 是文件夹形式，可以进入该文件夹查看该 using image 的日志磁盘信息等附加信息，这些信息都是可变的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>~/data/nova/instances/_base/ 这是从 glance 下载下来的 base image 的保存路径，这个基本镜像是不变的。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>注：VMware 中的快照就相当于这里的 base image(也可叫做模板)，基于这个快照使用的系统就是 using image。我们也可以把 using image 创建成一个新的 new base image，然后新的 image 发送给 glance，然后再从 glance 下载 new base image 作为 base image 2 来使用。&lt;/p></description></item><item><title>Docs: Opensatck 介绍</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.3.openstack-%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/opensatck-%E4%BB%8B%E7%BB%8D/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.3.openstack-%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/opensatck-%E4%BB%8B%E7%BB%8D/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/openstack/openstack">GitHub 项目，openstack/openstack&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.openstack.org/">官网&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Ubuntu 成为 OpenStack 部署排名第一的操作系统[
&lt;a href="https://cn.ubuntu.com/blog/ubuntu-becomes-number-one-os-for-openstack-deployment-post-1">https://cn.ubuntu.com/blog/ubuntu-becomes-number-one-os-for-openstack-deployment-post-1&lt;/a>&lt;/p>
&lt;p>](https://cn.ubuntu.com/blog/ubuntu-becomes-number-one-os-for-openstack-deployment-post-1)&lt;/p>
&lt;h1 id="heading">&lt;/h1>
&lt;h1 id="openstack-关键技术系列-最全-openstack-知识科普">OpenStack 关键技术系列: 最全 OpenStack 知识科普&lt;/h1>
&lt;p>最近几年，OpenStack 这个词大家早都熟的不能再熟，越来越多人开始关注。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/orsf4g/1616123375037-297d81e3-ef11-4b09-8347-2243b3d05cad.jpeg" alt="">&lt;/p>
&lt;pre>&lt;code> 对于大部分人来说，这还是一个很陌生的词，不知道它到底是什么，从哪里来，有什么用，和自己的工作有什么关系。
有人可能知道，它和现在非常火的云计算有很大的关系。伴随它一起出现的，还有很多新词，例如NFV、Nova、Neutron、Horizon等，更加让人云里雾里。
为了消除大家的疑惑，今天我们就来一个“大揭秘”——通过这篇通俗易懂的科普文，帮助大家轻松入门OpenStack。
&lt;/code>&lt;/pre>
&lt;p>OpenStack 的起源&lt;/p>
&lt;p>这玩意到底是从哪冒出来的？&lt;/p>
&lt;pre>&lt;code> 我们先来说说OpenStack的起源吧。
2002年，美国著名的电商公司亚马逊（Amazon）干了一件“不务正业”的事。他们向客户推出了一项全新的业务——包括存储空间、计算能力等资源服务的Web Service。这就是大名鼎鼎的AWS（Amazon Web Service）。
说白了，这个Web Service服务，就是为大家提供“远程电脑”。你可以远程控制它，有硬盘，有CPU，有内存啥的。你在上面配置你的各种服务，然后给你的用户使用，例如网站、FTP等。这个就是云计算的一种早期形式。
后来，到了2006年，亚马逊又推出了弹性计算云（Elastic Compute Cloud），也称 EC2 。EC2配置界面更简单，使用起来更方便，关键一点，它开始有了“弹性”！
&lt;/code>&lt;/pre>
&lt;p>什么是“弹性”？别急哈，等会我们再解释。&lt;/p>
&lt;p>同样是 2006 年，8 月 9 日，Google 首席执行官埃里克·施密特在搜索引擎大会上首次提出“云计算”（Cloud Computing）的概念。从此，云计算进入了高速发展阶段。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/orsf4g/1616123375022-8210d5dd-46f2-420e-9103-86bd74eeb3b9.jpeg" alt="">&lt;/p>
&lt;p>云计算&lt;/p>
&lt;p>到了 2010 年，当时有一家名叫 Rackspace 的公司，他们一直在做和亚马逊一样的云主机和云储存服务，但是始终都干不过亚马逊，排名第二。他们一气之下，干脆就把它们的云储存服务给开源了。&lt;/p>
&lt;p>啥叫开源（Open Source）？开源就是开放源代码，把程序的代码公开了，给所有人免费查看和使用。和他们一起开放源代码的，还有一个家伙，就是——NASA。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/orsf4g/1616123375009-147a7495-0d2b-4790-974a-c0b51ac0edcc.jpeg" alt="">&lt;/p>
&lt;p>好吧，又是一个“不务正业”的家伙。&lt;/p>
&lt;p>NASA 之前在云计算方面投入了大量的资金，但是后来发现这玩意好像是个无底洞，太烧钱了。而且，他们也似乎意识到这不是他们该干的事。所以，NASA 和 Rackspace 一起，选择开放源代码。&lt;/p>
&lt;p>其实还有一个原因：以前 NASA 是使用 Eucalyptus 云计算管理平台，不过这个平台分成两个版本，一个开源的版本，一个收费的版本。这就导致 NASA 很不爽，向 Eucalyptus 贡献代码，结果 Eucalyptus 认为这个代码和收费版本冲突，不接受。NASA 给气得不行，所以选择了将代码开源。&lt;/p>
&lt;p>Rackspace 和 NASA 并不是简单地代码一丢完事，而是联手共同成立了一个开源项目。这个项目，就是 OpenStack。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/orsf4g/1616123375003-fa1189ba-3087-41b2-b6b9-a86a312ce567.jpeg" alt="">&lt;/p>
&lt;p>OpenStack 的版本&lt;/p>
&lt;p>开源后的 OpenStack，到底经历了什么？&lt;/p>
&lt;p>开源项目的玩法，和企业内部研发是完全不一样的。开源项目中，地球上所有人都可以为这个项目贡献自己的力量，也可以使用这个项目的开发成果。也就是说，“人人为我，我为人人”。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/orsf4g/1616123375020-6ca92ee1-510e-4e3b-b25e-a85c2d91fbf7.jpeg" alt="">&lt;/p>
&lt;p>开源(Open Source)&lt;/p>
&lt;p>但是，为了保证项目能规范、有序地推进下去，还是需要有人“牵头”和“打杂”的。OpenStack 作为一个开源项目，它是由开源社区来负责推进和维护的。这个社区也并不是一盘散沙，它有自己的组织形态。&lt;/p>
&lt;p>首先，有一个 OpenStack 基金会，下面设立了董事会、技术委员会、用户委员会。基金会享有话语权，进行目标和发展的引导。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/orsf4g/1616123375003-25081c7e-1339-496f-8c52-5c0dcc647744.jpeg" alt="">&lt;/p>
&lt;p>基金会成员有三种形式。首先是独立个体，也就是以个人名义为 OpenStack 做出贡献。&lt;/p>
&lt;p>其次是铂金会员。主要由对 OpenStack 作出重要承诺的公司组成，他们提供资金与资源。目前，OpenStack 基金会主要有 7 家铂金会员。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/orsf4g/1616123374992-d2cd2b2d-554f-4427-a861-f6992500f61c.jpeg" alt="">&lt;/p>
&lt;pre>&lt;code> 最后是金牌会员。同样由公司组成，他们赞助的资金与资源比铂金会员稍微少一些。目前，OpenStack基金会拥有 21 位金牌会员。
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/orsf4g/1616123375063-adb07ccb-a240-40bb-9de3-4ffcb67c5d10.jpeg" alt="">&lt;/p>
&lt;pre>&lt;code> 从2010年项目诞生之日起，OpenStack开源社区每年都会开两次设计峰会（Design Summit），发布两个正式版本。迄今为止，一共已经出了17个版本。
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/orsf4g/1616123375074-d02f3b41-9e44-43da-be08-deda1fe629f0.jpeg" alt="">&lt;/p>
&lt;p>OpenStack 设计峰会&lt;/p>
&lt;p>这里我要开启“吐槽”模式了。开源社区这帮搞技术的宅男腐女，不管年龄大小，内心仍然是一群孩子。他们平时在公司上班比较“木鸡”，在社区这种自由环境里是一个比一个“皮”。&lt;/p>
&lt;p>从哪可以看出来？就在“取名”上——他们竟然给每个版本都单独取了一个名字(而非商业软件一样按数字序号命名)。每个版本的名字如下:&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/orsf4g/1616123375008-6bc9c88c-ad64-447b-a338-578ddf116de1.jpeg" alt="">&lt;/p>
&lt;p>不知道大家看出来没有，这些名字都是有“玄机”的！首先，版本号的第一个字母，从 A 开始，然后 B、C、D… 其次，每个名字都是从当次设计峰会所在城市中选一个地名，作为该版本的名字。&lt;/p>
&lt;p>例如，第一个版本 Austin，就是根据 Rackspace 公司所在地（也是第一次峰会所在地）——美国德克萨斯州的首府“奥斯丁”确定的。还有第 9 个版本，当时峰会是在香港举办的，用的“雪厂街”这个名字。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/orsf4g/1616123375077-68f3c47f-3a81-46d8-ac46-c66d817fda81.jpeg" alt="">&lt;/p>
&lt;p>这么做的直接后果就是，记忆和分辨起来真的很困难，容易看晕。&lt;/p>
&lt;p>OpenStack 的架构&lt;/p>
&lt;p>它由哪些部分组成？是如何进行工作的？&lt;/p>
&lt;p>接下来，我们看看 OpenStack 的架构。前面说了，OpenStack 从一开始，就是为了云计算服务的。简单来说，它就是一个操作系统，一套软件，一套 IaaS 软件。&lt;/p>
&lt;p>什么是 IaaS？Infrastructure as a Service，基础设施即服务(了解更多，看这里:“云计算”)。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/orsf4g/1616123375043-5e534c13-ef20-44ab-8faf-4c7fc3c42ee0.jpeg" alt="">&lt;/p>
&lt;p>云计算的三种服务模式：IaaS、PaaS、SaaS&lt;/p>
&lt;p>管理“基础设施资源”，便于用户调用和使用，是 OpenStack 的首要任务。基础设施资源，主要包括三个方面：计算、存储、网络。说通俗点，就是 CPU，硬盘，网卡。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/orsf4g/1616123375054-bc9b5930-658c-4a2e-b064-5921ea5ec792.jpeg" alt="">&lt;/p>
&lt;p>OpenStack 对资源进行管理，并且以服务的形式提供给上层应用或者用户去使用。&lt;/p>
&lt;p>例如前面我们所说的“弹性”。正是因为资源能够被灵活调用，所以用户使用资源时，这个云平台可以根据用户的需要，动态增加和删减资源，不用中断用户的使用，更无需全新申请。这就是“弹性”。&lt;/p>
&lt;p>那么，它到底是如何实现的呢？答案是——通过它的众多组件。&lt;/p>
&lt;p>前方高能预警……&lt;/p>
&lt;p>学习 OpenStack，最痛苦的事情，莫过于看它的架构。不信？好，扔个图给你看:&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/orsf4g/1616123375069-000ceee3-f4f8-4383-b38e-eccb7807d276.jpeg" alt="">&lt;/p>
&lt;p>OpenStack 系统架构逻辑关系图&lt;/p>
&lt;p>吓尿了吧。这还不算是最复杂的，再扔一个给你。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/orsf4g/1616123375077-819b8d49-5aa3-467f-b8f1-9c0d217fee49.jpeg" alt="">&lt;/p>
&lt;p>好了好了，不扔了，人都跑光了。OpenStack 拥有众多的组件，通过组件之间协同进行工作，所以看上去架构非常复杂。我还是用一个简单的图吧，看得更明白些，如下:&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/orsf4g/1616123375065-6de47154-6b9a-433f-8f0a-54891864e52b.jpeg" alt="">&lt;/p>
&lt;p>这个图里面的彩色方块，就是 OpenStack 最核心的组件。说到这些组件的名字，我实在忍不住又要吐槽这帮程序猿了，简直就是“取名狂魔”！他们不仅给每个项目版本单独取名字，连 openstack 内部的组件也难逃他们的魔爪。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/orsf4g/1616123375093-69331370-989f-4eb8-aa0d-81a432cf3ae3.jpeg" alt="">&lt;/p>
&lt;p>OpenStack 关键组件及作用&lt;/p>
&lt;p>这些组件里，我挑几个再介绍一下(看不懂也没关系，可以跳过):&lt;/p>
&lt;ul>
&lt;li>Nova&lt;/li>
&lt;/ul>
&lt;p>Nova 是整个 Openstack 里面最核心的组件。当初 Rackspace 和 NASA 贡献代码时，NASA 贡献的那部分就是 Nova 最早的代码（Rackspace 贡献的代码是 Swift）。OpenStack 云实例生命期所需的各种动作都将由 Nova 进行处理和支撑，它负责管理整个云的计算资源、网络、授权及测度。&lt;/p>
&lt;ul>
&lt;li>Keystone&lt;/li>
&lt;/ul>
&lt;p>Keystone 为所有的 OpenStack 组件提供认证和访问策略服务，主要对(但不限于)Swift、Glance、Nova 等进行认证与授权。&lt;/p>
&lt;ul>
&lt;li>Horizon&lt;/li>
&lt;/ul>
&lt;p>Horizon 是一个用以管理、控制 OpenStack 服务的 Web 控制面板。用户可以通过这个界面对 OpenStack 状态进行查看和管理。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/orsf4g/1616123375102-1e3c1e11-e5bf-4416-ab03-f1e0cb9d7f76.jpeg" alt="">&lt;/p>
&lt;p>用 Horizon 管理 OpenStack&lt;/p>
&lt;p>也就是说，OpenStack 的组件都有自己的功能定位。其实，每个组件都可以算是独立的一个程序(Software)。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/orsf4g/1616123375100-d253c5a7-51fc-467d-9240-b6626776e530.jpeg" alt="">&lt;/p>
&lt;p>Open 为开放之意，Stack 则是堆砌&lt;/p>
&lt;p>也就是许多 Open 的 Softwares 进行集合和堆砌。&lt;/p>
&lt;p>关于技术细节，就先说这么多吧，再说下去估计人都跑光啦。&lt;/p>
&lt;p>OpenStack 的发展&lt;/p>
&lt;p>现在的它，是一个什么规模和状态？&lt;/p>
&lt;p>经过八年的努力，如今的 OpenStack 已经今非昔比。很多企业和个人纷纷加入 Openstack 开源社区，使之成为了目前仅次于 LINUX 的全球第二大开源社区。&lt;/p>
&lt;p>按官网最新数据，现在有 180 多个国家，677 家企业，87426 名社区会员通过各种方式支撑着这个项目。项目的代码也已经超过了 2000 万行。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/orsf4g/1616123375099-586ae5b0-692c-4044-9c7f-04ce0b3e9456.jpeg" alt="">&lt;/p>
&lt;p>全球一半以上的 500 强企业，都采用了 OpenStack 技术。而且，根据调查，有 75%以上的企业打算今后使用这项技术。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/orsf4g/1616123375150-1db2a541-efd2-4249-9401-321411d8edb2.jpeg" alt="">&lt;/p>
&lt;p>OpenStack 在各行业的应用情况占比（2017 年）&lt;/p>
&lt;p>小枣君作为一枚通信汪，这里要特别强调一下，虽然 OpenStack 是云计算技术，主要是 IT 的概念，但对于通信行业来说极为重要。&lt;/p>
&lt;p>通信网络中的核心网，已经全面开始了向虚拟化和云计算的演进。小枣君之前就介绍过，现在通信行业里火热的 NFV 技术，就是基于虚拟化的，采用了 IT 里面的很多理念和设计。而核心网的 IT 化，将是整个通信系统 IT 化的第一步。&lt;/p>
&lt;p>华为的 FusionSphere 平台和中兴的 TECS 平台，都是基于 OpenStack 进行二次开发的商业系统。这些平台都已经被自家的核心网和云计算产品采用，目前处于替代传统平台的阶段。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/orsf4g/1616123375097-c7b08789-dcb4-4103-a48d-7392e1f7e9ae.jpeg" alt="">&lt;/p>
&lt;p>OpenStack 之所以这么受欢迎，主要原因有三个方面:&lt;/p>
&lt;ul>
&lt;li>首先是快速。OpenStack 安装部署所需要的时间很少，而时间就是价值。&lt;/li>
&lt;li>其次是灵活。OpenStack 获得了各大领导厂商的广泛支持，兼容性和适用性极强，使用起来非常方便可靠。&lt;/li>
&lt;li>最后是便宜。作为开源项目，OpenStack 的使用成本相对低廉，还能获得源源不断的更新，因为开源社区在为项目贡献活力。&lt;/li>
&lt;/ul>
&lt;p>总而言之，Openstack 拥有非常大的发展潜力，目前处于高速发展的上升期。在未来很长一段时间内，这种趋势都不会改变。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/orsf4g/1616123375108-c5e44ae5-d8ea-4bbf-9fcd-07115fa82036.jpeg" alt="">&lt;/p>
&lt;p>OpenStack 的学习&lt;/p>
&lt;p>到底该如何对它进行学习呢？&lt;/p>
&lt;p>经过上面的介绍，想必大家热血沸腾，跃跃欲试了吧？OpenStack 这么牛掰，到底该如何学习它呢？它看上去那么复杂，会不会很难学会呢？&lt;/p>
&lt;p>其实，虽然前面看到的架构很复杂，但是真心要学习 OpenStack 的话，并没有想象得那么困难。&lt;/p>
&lt;p>因为 OpenStack 是开源的项目，所以互联网上相关的学习资料非常丰富。无论是官方文档，还是非官方资料，都数不胜数。所以，问题不在于资料缺乏，而是资料太多你看不完…&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/orsf4g/1616123375164-e57c02e6-7476-44d5-96d9-5b22e66d8f8f.jpeg" alt="">&lt;/p>
&lt;p>官方网站强大的资料库和技术支撑&lt;/p>
&lt;p>&lt;a href="https://www.openstack.org/">https://www.openstack.org/&lt;/a>&lt;/p>
&lt;p>网上也有很多手把手进行教学的文档和视频，可以方便新人学习时进行参考。推荐几个大咖，大家可以百度找他们的博客来看: 陈沙克、何明桂、孔令贤，Cloudman。有了官方资料，加上大咖的博客，你只需要一台电脑，你就可以开始 OpenStack 的学习——直接下载，直接安装，直接配置，直接使用，没有任何门槛要求。如果遇到问题，先别急着找人问，先自己尝试找资料解决，一定会学得嗖嗖快。&lt;/p>
&lt;p>不过，OpenStack 入门虽然很容易，但是精通就很难了。需要长时间不断地钻研和积累，还需要进行大量的实践部署，才有可能成为专家。&lt;/p>
&lt;p>到底哪些人需要学习 OpenStack 呢？有三种人最应该立刻开始对它的学习。&lt;/p>
&lt;p>1、IT 行业从业者&lt;/p>
&lt;p>这就不用多说了，未来网络就是云计算，大数据的天下，只要是从事 IT 方面的工作，肯定会和云打交道，OpenStack 作为云计算技术的代表，是一个合适的切入点。&lt;/p>
&lt;p>2、通信、电子、计算机专业的大学生&lt;/p>
&lt;p>云计算技术在目前大部分高校都没有合适的教学规划，所以，在校大学生应该注意提前进行此类趋势技术的学习，既有利于就业，又能紧跟时代节奏，选择将来进修的合适方向。&lt;/p>
&lt;p>3、通信行业从业者&lt;/p>
&lt;p>啥都别说了，通信人赶紧滚去学习吧。好啦，关于 OpenStack 的介绍，就到这里，谢谢大家的观看！&lt;/p></description></item><item><title>Docs: Opensatck 介绍</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.3.openstack-%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/opensatck-%E4%BB%8B%E7%BB%8D/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.3.openstack-%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/opensatck-%E4%BB%8B%E7%BB%8D/</guid><description/></item><item><title>Docs: OpenStack 部署与清理</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.3.openstack-%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/openstack-%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%B8%85%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.3.openstack-%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/openstack-%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%B8%85%E7%90%86/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;h2 id="参考">参考：&lt;/h2>
&lt;/blockquote>
&lt;p>&lt;a href="https://thoughts.teambition.com/workspaces/603b04c9f83f2a00428f7321/folders/5fa948644cc5830001751d72">https://thoughts.teambition.com/workspaces/603b04c9f83f2a00428f7321/folders/5fa948644cc5830001751d72&lt;/a>&lt;/p>
&lt;p>部署 OpenStack 有多种方式&lt;/p>
&lt;ul>
&lt;li>手动部署 OpenStack 中的每一个组件
&lt;ul>
&lt;li>&lt;a href="https://docs.openstack.org/xena/install/">https://docs.openstack.org/xena/install/&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>使用自动化部署工具，部署工具有多种类型可供选择
&lt;ul>
&lt;li>&lt;a href="https://docs.openstack.org/xena/deploy/">https://docs.openstack.org/xena/deploy/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.openstack.org/project-deploy-guide/charm-deployment-guide/latest/">OpenStack Charms&lt;/a> # 使用 MAAS 和 Juju 部署。
&lt;ul>
&lt;li>一种完善的部署方式，基于 Ubuntu 开发 MAAS。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://docs.openstack.org/project-deploy-guide/kolla-ansible/latest/">OpenStack Kolla&lt;/a> # 在容器中使用 Ansible 部署
&lt;ul>
&lt;li>非常简单高效得部署一个用来 生产、开发、测试 的 OpenStack。支持 all-in-one 和 multinode 两种模式(即所有组件都在一个节点或分散在多个节点)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>其他&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="支持的操作系统">支持的操作系统&lt;/h2>
&lt;p>Kolla Ansible 支持以下主机操作系统 (OS)：&lt;/p>
&lt;blockquote>
&lt;p>从 Ussuri 版本开始，OpenStack 不再支持 CentOS 7 作为主机操作系统。Train 版本同时支持 CentOS 7 和 8，并提供了迁移路径。有关迁移到 CentOS 8 的信息，请参阅 &lt;a href="https://docs.openstack.org/kolla-ansible/train/user/centos8.html">Kolla Ansible Train 文档&lt;/a>。
不再支持 CentOS Linux 8（相对于 CentOS Stream 8）作为主机操作系统。Victoria 版本将来会同时支持 CentOS Linux 8 和 CentOS Stream 8，并提供迁移途径。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>CentOS Stream 8&lt;/li>
&lt;li>Debian Bullseye (11)&lt;/li>
&lt;li>RHEL 8（已弃用）&lt;/li>
&lt;li>Rocky Linux 8&lt;/li>
&lt;li>Ubuntu Focal (20.04)&lt;/li>
&lt;/ul>
&lt;h2 id="支持的容器镜像">支持的容器镜像&lt;/h2>
&lt;p>为获得最佳结果，基本容器映像分发应与主机操作系统分发匹配。支持以下值 kolla_base_distro：&lt;/p>
&lt;ul>
&lt;li>centos&lt;/li>
&lt;li>debian&lt;/li>
&lt;li>rhel（已弃用）&lt;/li>
&lt;li>ubuntu&lt;/li>
&lt;/ul>
&lt;p>有关哪些发行版支持哪些图像的详细信息，请参阅 &lt;a href="https://docs.openstack.org/kolla/latest/support_matrix">Kolla 支持矩阵&lt;/a>。&lt;/p>
&lt;h1 id="kolla-ansible">Kolla-ansible&lt;/h1>
&lt;p>注意：&lt;/p>
&lt;ul>
&lt;li>宿主机至少需要两个可用的网卡，在 &lt;code>/etc/kolla/globals.yml&lt;/code> 文件中，被描述为如下两个关键字
&lt;ul>
&lt;li>&lt;strong>network_interface&lt;/strong> # 管理网络、API 网络的网卡&lt;/li>
&lt;li>&lt;strong>neutron_external_interface&lt;/strong> # Neutron 外部接口就是指内网环境。该网络设备将会桥接到 &lt;code>ovs-switch&lt;/code> 这个桥设备上。虚拟机是通过这块网卡访问外网。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="安装依赖并使用虚拟环境">安装依赖并使用虚拟环境&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo apt update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo apt install python3-dev libffi-dev gcc libssl-dev
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建一个虚拟环境以安装部署工具&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>export KOLLA_DIR&lt;span style="color:#f92672">=&lt;/span>/root/kolla
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mkdir -p &lt;span style="color:#e6db74">${&lt;/span>KOLLA_DIR&lt;span style="color:#e6db74">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo apt install python3-venv
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>python3 -m venv &lt;span style="color:#e6db74">${&lt;/span>KOLLA_DIR&lt;span style="color:#e6db74">}&lt;/span>/venv
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>source &lt;span style="color:#e6db74">${&lt;/span>KOLLA_DIR&lt;span style="color:#e6db74">}&lt;/span>/venv/bin/activate
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pip install -U pip -i https://pypi.tuna.tsinghua.edu.cn/simple
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pip install &lt;span style="color:#e6db74">&amp;#39;ansible&amp;lt;5.0&amp;#39;&lt;/span> -i https://pypi.tuna.tsinghua.edu.cn/simple
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="安装-kolla-ansible">安装 Kolla-ansible&lt;/h2>
&lt;p>这里说的 Kolla-ansible 主要指的是用于部署 Openstack 的 Ansible Playbook~~~~&lt;/p>
&lt;p>确定要安装的版本。Kolla-ansible 的版本号与 Openstack 的版本号保持一致，这里以 Openstack 的 &lt;code>xena&lt;/code> 版本为例&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>export KOLLA_BRANCH_NAME&lt;span style="color:#f92672">=&lt;/span>xena
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用 pip 安装 kolla-ansible 及其依赖项。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>pip install git+https://opendev.org/openstack/kolla-ansible@&lt;span style="color:#e6db74">${&lt;/span>KOLLA_BRANCH_NAME&lt;span style="color:#e6db74">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建配置目录&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo mkdir -p /etc/kolla
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo chown $USER:$USER /etc/kolla
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cp -r &lt;span style="color:#e6db74">${&lt;/span>KOLLA_DIR&lt;span style="color:#e6db74">}&lt;/span>/venv/share/kolla-ansible/etc_examples/kolla/* /etc/kolla
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>将 Ansible Playbook 所需的 Inventory 拷贝到当前目录&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>cp &lt;span style="color:#e6db74">${&lt;/span>KOLLA_DIR&lt;span style="color:#e6db74">}&lt;/span>/venv/share/kolla-ansible/ansible/inventory/* .
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="配置-ansible">配置 Ansible&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>mkdir -p /etc/ansible
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tee /etc/ansible/ansible.cfg &amp;gt; /dev/null &lt;span style="color:#e6db74">&amp;lt;&amp;lt;EOF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">[defaults]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">host_key_checking=False
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">pipelining=True
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">forks=100
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="all-in-one-部署-openstack">All-in-one 部署 OpenStack&lt;/h2>
&lt;h3 id="配置-kolla">配置 Kolla&lt;/h3>
&lt;p>为 &lt;code>/etc/kolla/passwords.yml&lt;/code> 文件生成密码&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kolla-genpwd
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>配置 &lt;code>/etc/kolla/globals.yml&lt;/code> 文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kolla_base_distro: &lt;span style="color:#e6db74">&amp;#34;ubuntu&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kolla_install_type: &lt;span style="color:#e6db74">&amp;#34;source&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>network_interface: &lt;span style="color:#e6db74">&amp;#34;eno3&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># neutron 外部接口就是指内网环境。该网络设备将会桥街道 ovs-switch 这个桥设备上。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>neutron_external_interface: &lt;span style="color:#e6db74">&amp;#34;eno4&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kolla_internal_vip_address: &lt;span style="color:#e6db74">&amp;#34;192.168.88.236&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>enable_cinder: &lt;span style="color:#e6db74">&amp;#34;yes&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>openstack_release: &lt;span style="color:#e6db74">&amp;#34;xena&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>enable_haproxy: &lt;span style="color:#e6db74">&amp;#34;no&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="配置-inventory">配置 Inventory&lt;/h3>
&lt;p>略，直接使用 localhost 即可&lt;/p>
&lt;h3 id="部署依赖并检查环境">部署依赖并检查环境&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kolla-ansible -i ./all-in-one bootstrap-servers
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kolla-ansible -i ./all-in-one prechecks
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="部署-openstack">部署 OpenStack&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kolla-ansible -i ./all-in-one pull ？？？待验证
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kolla-ansible -i ./all-in-one deploy
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="multinode-部署-openstack">Multinode 部署 OpenStack&lt;/h2></description></item><item><title>Docs: 命令行工具</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.3.openstack-%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.3.openstack-%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</guid><description/></item><item><title>Docs: 命令行工具</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.3.openstack-%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.3.openstack-%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</guid><description/></item><item><title>Docs: 配置详解</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.3.openstack-%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.3.openstack-%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.openstack.org/xena/configuration/">官方文档，配置指南&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;a href="https://docs.openstack.org/rocky/configuration/">
&lt;/a>&lt;/p></description></item></channel></rss>