<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – 故障处理案例</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/8.kubernetes-%E7%BD%91%E7%BB%9C/kubernetes-dns/%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86%E6%A1%88%E4%BE%8B/</link><description>Recent content in 故障处理案例 on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/8.kubernetes-%E7%BD%91%E7%BB%9C/kubernetes-dns/%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86%E6%A1%88%E4%BE%8B/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: 记一次 K8S 内部服务调用域名解析超时排坑经历</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/8.kubernetes-%E7%BD%91%E7%BB%9C/kubernetes-dns/%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86%E6%A1%88%E4%BE%8B/%E8%AE%B0%E4%B8%80%E6%AC%A1-k8s-%E5%86%85%E9%83%A8%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90%E8%B6%85%E6%97%B6%E6%8E%92%E5%9D%91%E7%BB%8F%E5%8E%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/8.kubernetes-%E7%BD%91%E7%BB%9C/kubernetes-dns/%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86%E6%A1%88%E4%BE%8B/%E8%AE%B0%E4%B8%80%E6%AC%A1-k8s-%E5%86%85%E9%83%A8%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90%E8%B6%85%E6%97%B6%E6%8E%92%E5%9D%91%E7%BB%8F%E5%8E%86/</guid><description>
&lt;p>原文连接：&lt;a href="https://juejin.im/post/6844904178582552590">https://juejin.im/post/6844904178582552590&lt;/a>&lt;/p>
&lt;p>记一次 K8S 内部服务调用域名解析超时排坑经历&lt;/p>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>近期线上 k8s 时不时就会出现一些内部服务间的调用超时问题，通过日志可以得知超时的原因都是出现在&lt;code>域名解析&lt;/code>上，并且都是 k8s 内部的域名解析超时，于是直接先将内部域名替换成 k8s service 的 IP，观察一段时间发现没有超时的情况发生了，但是由于使用 service IP 不是长久之计，所以还要去找解决办法。&lt;/p>
&lt;h2 id="复现">复现&lt;/h2>
&lt;p>一开始运维同事在调用方 pod 中使用&lt;code>ab&lt;/code>工具对目标服务进行了多次压测，并没有发现有超时的请求，我介入之后分析&lt;code>ab&lt;/code>这类 http 压测工具应该都会有 dns 缓存，而我们主要是要测试 dns 服务的性能，于是直接动手撸了一个压测工具只做域名解析，代码如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;context&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;flag&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;net&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;sync/atomic&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;time&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">host&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">connections&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">duration&lt;/span> &lt;span style="color:#66d9ef">int64&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">limit&lt;/span> &lt;span style="color:#66d9ef">int64&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">timeoutCount&lt;/span> &lt;span style="color:#66d9ef">int64&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// os.Args = append(os.Args, &amp;#34;-host&amp;#34;, &amp;#34;www.baidu.com&amp;#34;, &amp;#34;-c&amp;#34;, &amp;#34;200&amp;#34;, &amp;#34;-d&amp;#34;, &amp;#34;30&amp;#34;, &amp;#34;-l&amp;#34;, &amp;#34;5000&amp;#34;)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">flag&lt;/span>.&lt;span style="color:#a6e22e">StringVar&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">host&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;host&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Resolve host&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">flag&lt;/span>.&lt;span style="color:#a6e22e">IntVar&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">connections&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;c&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Connections&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">flag&lt;/span>.&lt;span style="color:#a6e22e">Int64Var&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">duration&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;d&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Duration(s)&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">flag&lt;/span>.&lt;span style="color:#a6e22e">Int64Var&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">limit&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;l&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Limit(ms)&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">flag&lt;/span>.&lt;span style="color:#a6e22e">Parse&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">count&lt;/span> &lt;span style="color:#66d9ef">int64&lt;/span> = &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">errCount&lt;/span> &lt;span style="color:#66d9ef">int64&lt;/span> = &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">pool&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make(&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span>{}, &lt;span style="color:#a6e22e">connections&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">exit&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make(&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">min&lt;/span> &lt;span style="color:#66d9ef">int64&lt;/span> = &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">max&lt;/span> &lt;span style="color:#66d9ef">int64&lt;/span> = &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">sum&lt;/span> &lt;span style="color:#66d9ef">int64&lt;/span> = &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Sleep&lt;/span>(&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Second&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Duration&lt;/span>(&lt;span style="color:#a6e22e">duration&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">exit&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">endD&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">select&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">pool&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">pool&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">resolver&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">net&lt;/span>.&lt;span style="color:#a6e22e">Resolver&lt;/span>{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">now&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Now&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">resolver&lt;/span>.&lt;span style="color:#a6e22e">LookupIPAddr&lt;/span>(&lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Background&lt;/span>(), &lt;span style="color:#a6e22e">host&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">use&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Since&lt;/span>(&lt;span style="color:#a6e22e">now&lt;/span>).&lt;span style="color:#a6e22e">Nanoseconds&lt;/span>() &lt;span style="color:#f92672">/&lt;/span> int64(&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Millisecond&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">min&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#a6e22e">use&lt;/span> &amp;lt; &lt;span style="color:#a6e22e">min&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">min&lt;/span> = &lt;span style="color:#a6e22e">use&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">use&lt;/span> &amp;gt; &lt;span style="color:#a6e22e">max&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">max&lt;/span> = &lt;span style="color:#a6e22e">use&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">sum&lt;/span> &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#a6e22e">use&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">limit&lt;/span> &amp;gt; &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#a6e22e">use&lt;/span> &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#a6e22e">limit&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">timeoutCount&lt;/span>&lt;span style="color:#f92672">++&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">atomic&lt;/span>.&lt;span style="color:#a6e22e">AddInt64&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">count&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>.&lt;span style="color:#a6e22e">Error&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">atomic&lt;/span>.&lt;span style="color:#a6e22e">AddInt64&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">errCount&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">exit&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span> &lt;span style="color:#a6e22e">endD&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;request count：%d\nerror count：%d\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">count&lt;/span>, &lt;span style="color:#a6e22e">errCount&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;request time：min(%dms) max(%dms) avg(%dms) timeout(%dn)\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">min&lt;/span>, &lt;span style="color:#a6e22e">max&lt;/span>, &lt;span style="color:#a6e22e">sum&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">count&lt;/span>, &lt;span style="color:#a6e22e">timeoutCount&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>编译好二进制程序直接丢到对应的 pod 容器中进行压测：&lt;/p>
&lt;pre>&lt;code># 200个并发,持续30秒
./dns -host {service}.{namespace} -c 200 -d 30
&lt;/code>&lt;/pre>
&lt;p>这次可以发现最大耗时有&lt;code>5s&lt;/code>多，多次测试结果都是类似：
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/vhcqem/1616118022002-f6487df3-068d-4151-9ba9-3681c697bda2.jpeg" alt="">
而我们内部服务间 HTTP 调用的超时一般都是设置在&lt;code>3s&lt;/code>左右，以此推断出与线上的超时情况应该是同一种情况，在并发高的情况下会出现部分域名解析超时而导致 HTTP 请求失败。&lt;/p>
&lt;p>原因&lt;/p>
&lt;p>起初一直以为是&lt;code>coredns&lt;/code>的问题，于是找运维升级了下&lt;code>coredns&lt;/code>版本再进行压测，发现问题还是存在，说明不是版本的问题，难道是&lt;code>coredns&lt;/code>本身的性能就差导致的？想想也不太可能啊，才 200 的并发就顶不住了那性能也未免太弱了吧，结合之前的压测数据，平均响应都挺正常的(82ms)，但是就有个别请求会延迟，而且都是 5 秒左右，所以就又带着&lt;code>k8s dns 5s&lt;/code>的关键字去 google 搜了一下，这不搜不知道一搜吓一跳啊，原来是 k8s 里的一个大坑啊(其实和 k8s 没有太大的关系，只是 k8s 层面没有提供解决方案)。&lt;/p>
&lt;h3 id="5s-超时原因">5s 超时原因&lt;/h3>
&lt;p>linux 中 &lt;code>glibc&lt;/code> 的 resolver 的缺省超时时间是 5s，而导致超时的原因是内核 &lt;code>conntrack&lt;/code> 模块的 bug。&lt;/p>
&lt;blockquote>
&lt;p>Weave works 的工程师 Martynas Pumputis 对这个问题做了很详细的分析：&lt;/p>
&lt;/blockquote>
&lt;p>这里再引用下 imroc.io/posts/kuber…文章中的解释：&lt;/p>
&lt;blockquote>
&lt;p>DNS client (glibc 或 musl libc) 会并发请求 A 和 AAAA 记录，跟 DNS Server 通信自然会先 connect (建立 fd)，后面请求报文使用这个 fd 来发送，由于 UDP 是无状态协议， connect 时并不会发包，也就不会创建 conntrack 表项, 而并发请求的 A 和 AAAA 记录默认使用同一个 fd 发包，send 时各自发的包它们源 Port 相同(因为用的同一个 socket 发送)，当并发发包时，两个包都还没有被插入 conntrack 表项，所以 netfilter 会为它们分别创建 conntrack 表项，而集群内请求 kube-dns 或 coredns 都是访问的 CLUSTER-IP，报文最终会被 DNAT 成一个 endpoint 的 POD IP，当两个包恰好又被 DNAT 成同一个 POD IP 时，它们的五元组就相同了，在最终插入的时候后面那个包就会被丢掉，如果 dns 的 pod 副本只有一个实例的情况就很容易发生(始终被 DNAT 成同一个 POD IP)，现象就是 dns 请求超时，client 默认策略是等待 5s 自动重试，如果重试成功，我们看到的现象就是 dns 请求有 5s 的延时。&lt;/p>
&lt;/blockquote>
&lt;h2 id="解决方案">解决方案&lt;/h2>
&lt;h3 id="方案一使用-tcp-协议发送-dns-请求">方案（一）：使用 TCP 协议发送 DNS 请求&lt;/h3>
&lt;p>通过&lt;code>resolv.conf&lt;/code>的&lt;code>use-vc&lt;/code>选项来开启 TCP 协议&lt;/p>
&lt;p>测试&lt;/p>
&lt;ol>
&lt;li>
&lt;p>修改&lt;code>/etc/resolv.conf&lt;/code>文件，在最后加入一行文本：options use-vc&lt;/p>
&lt;/li>
&lt;li>
&lt;p>进行压测：# 200 个并发,持续 30 秒,记录超过 5s 的请求个数./dns -host {service}.{namespace} -c 200 -d 30 -l 5000 复制代码结果如下：&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/vhcqem/1616118021995-d7ec02ba-a66f-4045-a6e1-9a19ac683c5d.png" alt="">&lt;/p>
&lt;p>结论&lt;/p>
&lt;p>确实没有出现&lt;code>5s&lt;/code>的超时问题了，但是部分请求耗时还是比较高，在&lt;code>4s&lt;/code>左右，而且平均耗时比 UPD 协议的还高，效果并不好。&lt;/p>
&lt;h3 id="方案二避免相同五元组-dns-请求的并发">方案（二）：避免相同五元组 DNS 请求的并发&lt;/h3>
&lt;p>通过 &lt;code>resolv.conf&lt;/code> 的 &lt;code>single-request-reopen&lt;/code> 和 &lt;code>single-request&lt;/code> 选项来避免：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>single-request-reopen (glibc&amp;gt;=2.9) 发送 A 类型请求和 AAAA 类型请求使用不同的源端口。这样两个请求在 conntrack 表中不占用同一个表项，从而避免冲突。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>single-request (glibc&amp;gt;=2.10) 避免并发，改为串行发送 A 类型和 AAAA 类型请求，没有了并发，从而也避免了冲突。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>测试 single-request-reopen&lt;/p>
&lt;ul>
&lt;li>
&lt;p>修改 &lt;code>/etc/resolv.conf&lt;/code> 文件，在最后加入一行文本：options single-request-reopen&lt;/p>
&lt;/li>
&lt;li>
&lt;p>进行压测：# 200 个并发,持续 30 秒,记录超过 5s 的请求个数./dns -host {service}.{namespace} -c 200 -d 30 -l 5000 复制代码结果如下： &lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/vhcqem/1616118022005-4c81f4a7-7082-41e7-9132-bc9a994cbe04.jpeg" alt="">&lt;/p>
&lt;p>测试 single-request&lt;/p>
&lt;ol>
&lt;li>
&lt;p>修改&lt;code>/etc/resolv.conf&lt;/code>文件，在最后加入一行文本：options single-request 复制代码&lt;/p>
&lt;/li>
&lt;li>
&lt;p>进行压测：# 200 个并发,持续 30 秒,记录超过 5s 的请求个数./dns -host {service}.{namespace} -c 200 -d 30 -l 5000 复制代码结果如下：&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>结论&lt;/p>
&lt;p>通过压测结果可以看到&lt;code>single-request-reopen&lt;/code>和&lt;code>single-request&lt;/code>选项确实可以显著的降低域名解析耗时。&lt;/p>
&lt;h3 id="关于方案一和方案二的实施步骤和缺点">关于方案（一）和方案（二）的实施步骤和缺点&lt;/h3>
&lt;p>实施步骤&lt;/p>
&lt;p>其实就是要给容器的&lt;code>/etc/resolv.conf&lt;/code>文件添加选项，目前有两个方案比较合适：&lt;/p>
&lt;ol>
&lt;li>通过修改 pod 的 postStart hook 来设置&lt;/li>
&lt;/ol>
&lt;!-- raw HTML omitted -->
&lt;pre>&lt;code>lifecycle:
postStart:
exec:
command:
- /bin/sh
- -c
- &amp;quot;/bin/echo 'options single-request-reopen' &amp;gt;&amp;gt; /etc/resolv.conf&amp;quot;
&lt;/code>&lt;/pre>
&lt;ol>
&lt;li>通过修改 pod 的 template.spec.dnsConfig 来设置&lt;/li>
&lt;/ol>
&lt;!-- raw HTML omitted -->
&lt;pre>&lt;code>template:
spec:
dnsConfig:
options:
- name: single-request-reopen
&lt;/code>&lt;/pre>
&lt;p>缺点&lt;/p>
&lt;p>不支持&lt;code>alpine&lt;/code>基础镜像的容器，因为&lt;code>apline&lt;/code>底层使用的&lt;code>musl libc&lt;/code>库并不支持这些 resolv.conf 选项，所以如果使用&lt;code>alpine&lt;/code>基础镜像构建的应用，还是无法规避超时的问题。&lt;/p>
&lt;h3 id="方案三本地-dns-缓存">方案（三）：本地 DNS 缓存&lt;/h3>
&lt;p>其实 k8s 官方也意识到了这个问题比较常见，给出了 coredns 以 cache 模式作为 daemonset 部署的解决方案: github.com/kubernetes/…&lt;/p>
&lt;p>大概原理就是：&lt;/p>
&lt;blockquote>
&lt;p>本地 DNS 缓存以 DaemonSet 方式在每个节点部署一个使用 hostNetwork 的 Pod，创建一个网卡绑上本地 DNS 的 IP，本机的 Pod 的 DNS 请求路由到本地 DNS，然后取缓存或者继续使用 TCP 请求上游集群 DNS 解析 (由于使用 TCP，同一个 socket 只会做一遍三次握手，不存在并发创建 conntrack 表项，也就不会有 conntrack 冲突)&lt;/p>
&lt;/blockquote>
&lt;p>部署&lt;/p>
&lt;ol>
&lt;li>获取当前&lt;code>kube-dns service&lt;/code>的 clusterIP&lt;/li>
&lt;/ol>
&lt;!-- raw HTML omitted -->
&lt;pre>&lt;code># kubectl -n kube-system get svc kube-dns -o jsonpath=&amp;quot;{.spec.clusterIP}&amp;quot;
10.96.0.10
复制代码
&lt;/code>&lt;/pre>
&lt;ol>
&lt;li>下载官方提供的 yaml 模板进行关键字替换&lt;/li>
&lt;/ol>
&lt;!-- raw HTML omitted -->
&lt;pre>&lt;code>wget -O nodelocaldns.yaml &amp;quot;https://github.com/kubernetes/kubernetes/raw/master/cluster/addons/dns/nodelocaldns/nodelocaldns.yaml&amp;quot; &amp;amp;&amp;amp; \
sed -i 's/__PILLAR__DNS__SERVER__/10.96.0.10/g' nodelocaldns.yaml &amp;amp;&amp;amp; \
sed -i 's/__PILLAR__LOCAL__DNS__/169.254.20.10/g' nodelocaldns.yaml &amp;amp;&amp;amp; \
sed -i 's/__PILLAR__DNS__DOMAIN__/cluster.local/g' nodelocaldns.yaml &amp;amp;&amp;amp; \
sed -i 's/__PILLAR__CLUSTER__DNS__/10.96.0.10/g' nodelocaldns.yaml &amp;amp;&amp;amp; \
sed -i 's/__PILLAR__UPSTREAM__SERVERS__/\/etc\/resolv.conf/g' nodelocaldns.yaml
&lt;/code>&lt;/pre>
&lt;ol>
&lt;li>最终 yaml 文件如下：&lt;/li>
&lt;/ol>
&lt;!-- raw HTML omitted -->
&lt;pre>&lt;code># Copyright 2018 The Kubernetes Authors.
#
# Licensed under the Apache License, Version 2.0 (the &amp;quot;License&amp;quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &amp;quot;AS IS&amp;quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
apiVersion: v1
kind: ServiceAccount
metadata:
name: node-local-dns
namespace: kube-system
labels:
kubernetes.io/cluster-service: &amp;quot;true&amp;quot;
addonmanager.kubernetes.io/mode: Reconcile
---
apiVersion: v1
kind: Service
metadata:
name: kube-dns-upstream
namespace: kube-system
labels:
k8s-app: kube-dns
kubernetes.io/cluster-service: &amp;quot;true&amp;quot;
addonmanager.kubernetes.io/mode: Reconcile
kubernetes.io/name: &amp;quot;KubeDNSUpstream&amp;quot;
spec:
ports:
- name: dns
port: 53
protocol: UDP
targetPort: 53
- name: dns-tcp
port: 53
protocol: TCP
targetPort: 53
selector:
k8s-app: kube-dns
---
apiVersion: v1
kind: ConfigMap
metadata:
name: node-local-dns
namespace: kube-system
labels:
addonmanager.kubernetes.io/mode: Reconcile
data:
Corefile: |
cluster.local:53 {
errors
cache {
success 9984 30
denial 9984 5
}
reload
loop
bind 169.254.20.10 10.96.0.10
forward . 10.96.0.10 {
force_tcp
}
prometheus :9253
health 169.254.20.10:8080
}
in-addr.arpa:53 {
errors
cache 30
reload
loop
bind 169.254.20.10 10.96.0.10
forward . 10.96.0.10 {
force_tcp
}
prometheus :9253
}
ip6.arpa:53 {
errors
cache 30
reload
loop
bind 169.254.20.10 10.96.0.10
forward . 10.96.0.10 {
force_tcp
}
prometheus :9253
}
.:53 {
errors
cache 30
reload
loop
bind 169.254.20.10 10.96.0.10
forward . /etc/resolv.conf {
force_tcp
}
prometheus :9253
}
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
name: node-local-dns
namespace: kube-system
labels:
k8s-app: node-local-dns
kubernetes.io/cluster-service: &amp;quot;true&amp;quot;
addonmanager.kubernetes.io/mode: Reconcile
spec:
updateStrategy:
rollingUpdate:
maxUnavailable: 10%
selector:
matchLabels:
k8s-app: node-local-dns
template:
metadata:
labels:
k8s-app: node-local-dns
spec:
priorityClassName: system-node-critical
serviceAccountName: node-local-dns
hostNetwork: true
dnsPolicy: Default # Don't use cluster DNS.
tolerations:
- key: &amp;quot;CriticalAddonsOnly&amp;quot;
operator: &amp;quot;Exists&amp;quot;
containers:
- name: node-cache
image: k8s.gcr.io/k8s-dns-node-cache:1.15.7
resources:
requests:
cpu: 25m
memory: 5Mi
args:
[
&amp;quot;-localip&amp;quot;,
&amp;quot;169.254.20.10,10.96.0.10&amp;quot;,
&amp;quot;-conf&amp;quot;,
&amp;quot;/etc/Corefile&amp;quot;,
&amp;quot;-upstreamsvc&amp;quot;,
&amp;quot;kube-dns-upstream&amp;quot;,
]
securityContext:
privileged: true
ports:
- containerPort: 53
name: dns
protocol: UDP
- containerPort: 53
name: dns-tcp
protocol: TCP
- containerPort: 9253
name: metrics
protocol: TCP
livenessProbe:
httpGet:
host: 169.254.20.10
path: /health
port: 8080
initialDelaySeconds: 60
timeoutSeconds: 5
volumeMounts:
- mountPath: /run/xtables.lock
name: xtables-lock
readOnly: false
- name: config-volume
mountPath: /etc/coredns
- name: kube-dns-config
mountPath: /etc/kube-dns
volumes:
- name: xtables-lock
hostPath:
path: /run/xtables.lock
type: FileOrCreate
- name: kube-dns-config
configMap:
name: kube-dns
optional: true
- name: config-volume
configMap:
name: node-local-dns
items:
- key: Corefile
path: Corefile.base
&lt;/code>&lt;/pre>
&lt;p>通过 yaml 可以看到几个细节：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>部署类型是使用的&lt;code>DaemonSet&lt;/code>，即在每个 k8s node 节点上运行一个 dns 服务&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>hostNetwork&lt;/code>属性为&lt;code>true&lt;/code>，即直接使用 node 物理机的网卡进行端口绑定，这样在此 node 节点中的 pod 可以直接访问 dns 服务，不通过 service 进行转发，也就不会有 DNAT&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>dnsPolicy&lt;/code>属性为&lt;code>Default&lt;/code>，不使用 cluster DNS，在解析外网域名时直接使用本地的 DNS 设置&lt;/p>
&lt;/li>
&lt;li>
&lt;p>绑定在 node 节点&lt;code>169.254.20.10&lt;/code>和&lt;code>10.96.0.10&lt;/code>IP 上，这样节点下面的 pod 只需要将 dns 设置为&lt;code>169.254.20.10&lt;/code>即可直接访问宿主机上的 dns 服务。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>测试&lt;/p>
&lt;ol>
&lt;li>
&lt;p>修改&lt;code>/etc/resolv.conf&lt;/code>文件中的 nameserver：nameserver 169.254.20.10 复制代码&lt;/p>
&lt;/li>
&lt;li>
&lt;p>进行压测：# 200 个并发,持续 30 秒,记录超过 5s 的请求个数./dns -host {service}.{namespace} -c 200 -d 30 -l 5000 复制代码结果如下：&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>结论&lt;/p>
&lt;p>通过压测发现并没有解决超时的问题，按理说没有&lt;code>conntrack&lt;/code>冲突应该表现出的情况与方案(二)类似才对，也可能是我使用的姿势不对，不过虽然这个问题还存在，但是通过&lt;code>DaemonSet&lt;/code>将 dns 请求压力分散到各个 node 节点，也可以有效的缓解域名解析超时问题。&lt;/p>
&lt;p>实施&lt;/p>
&lt;ul>
&lt;li>方案（一）：通过修改 pod 的 template.spec.dnsConfig 来设置，并将&lt;code>dnsPolicy&lt;/code>设置为&lt;code>None&lt;/code>&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;pre>&lt;code>template:
spec:
dnsConfig:
nameservers:
- 169.254.20.10
searches:
- public.svc.cluster.local
- svc.cluster.local
- cluster.local
options:
- name: ndots
value: &amp;quot;5&amp;quot;
dnsPolicy: None
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>方案（二）：修改默认的&lt;code>cluster-dns&lt;/code>，在 node 节点上将&lt;code>/etc/systemd/system/kubelet.service.d/10-kubeadm.conf&lt;/code>文件中的&lt;code>--cluster-dns&lt;/code>参数值修改为&lt;code>169.254.20.10&lt;/code>，然后重启&lt;code>kubelet&lt;/code>&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;pre>&lt;code>systemctl restart kubelet
&lt;/code>&lt;/pre>
&lt;h2 id="最终解决方案">最终解决方案&lt;/h2>
&lt;p>最后还是决定使用&lt;code>方案(二)+方案(三)&lt;/code>配合使用，来最大程度的优化此问题，并且将线上所有的基础镜像都替换为非&lt;code>apline&lt;/code>的镜像版本，至此问题基本解决，也希望 K8S 官方能早日将此功能直接集成进去。&lt;/p></description></item></channel></rss>