<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – Ingress Controller</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/8.kubernetes-%E7%BD%91%E7%BB%9C/ingress/ingress-controller/</link><description>Recent content in Ingress Controller on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/8.kubernetes-%E7%BD%91%E7%BB%9C/ingress/ingress-controller/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Istio</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/8.kubernetes-%E7%BD%91%E7%BB%9C/ingress/ingress-controller/istio/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/8.kubernetes-%E7%BD%91%E7%BB%9C/ingress/ingress-controller/istio/</guid><description>
&lt;p>Istio 提供的 Ingress Controller 功能详见 Isito 介绍.note 中的 《Istio Ingress 入口流量路由功能介绍》 章节&lt;/p></description></item><item><title>Docs: Nginx</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/8.kubernetes-%E7%BD%91%E7%BB%9C/ingress/ingress-controller/nginx/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/8.kubernetes-%E7%BD%91%E7%BB%9C/ingress/ingress-controller/nginx/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;p>分为两个版本&lt;/p>
&lt;ul>
&lt;li>K8S 社区版 Nginx Ingress Controller # &lt;a href="https://github.com/kubernetes/ingress-nginx">https://github.com/kubernetes/ingress-nginx&lt;/a>&lt;/li>
&lt;li>Nginx 官网版 Nginx Ingress Controller # &lt;a href="https://github.com/nginxinc/kubernetes-ingress">https://github.com/nginxinc/kubernetes-ingress&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="部署">部署&lt;/h1>
&lt;h2 id="k8s-社区版部署方式">k8s 社区版部署方式：&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kubernetes.github.io/ingress-nginx/deploy/#bare-metal-clusters">官方文档，部署-安装指南-裸金属集群&lt;/a>(就是通过纯 Manifests 文件部署)&lt;/li>
&lt;li>&lt;a href="https://kubernetes.github.io/ingress-nginx/deploy/#using-helm">官方文档，部署-安装指南-&lt;/a>快速开始(直接就是 Helm 安装)&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>注意：&lt;/p>
&lt;ul>
&lt;li>从 v1.0.0 版本开始，仅支持 Kubernetes 版本 &amp;gt;= v1.19 ，因为从 v1.0.0 版本开始，删除了对 &lt;code>networking.k8s.io/v1beta&lt;/code> 资源的支持。
&lt;ul>
&lt;li>详见：&lt;a href="https://mp.weixin.qq.com/s/hVTWlfrqmjZRrb0KTsDrZA">公众号-CNCF，更新 NGINX-Ingress 以使用稳定的 Ingress API&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>从 v1.3.0 版本开始，仅支持 Kubernetes 版本 &amp;gt;= v1.20。
&lt;ul>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/7vOTDqpi4tg-AEzP_YAWAQ">详见：公众号-MoeLove，K8S 生态周报| Kubernetes Ingress-NGINX 功能冻结前最后一个版本发布&lt;/a>&lt;/li>
&lt;li>为了能兼容 Kubernetes 的更高版本，所以我们将 controller 中用于选举的机制修改成了使用 Lease API 的方式，而不再是原先的 configmap 的方式。其实在 Kubernetes Ingress-NGINX v1.3.0 版本中，我增加了往 Lease API 平滑迁移的逻辑，在使用 v1.3.0 版本的时候，可以自动的完成 ConfigMap 往 Lease API 迁移的逻辑。 &lt;strong>所以，如果是想要从旧版本进行平滑升级，建议先升级到 v1.3.0，待完成自动的迁移后，再往更新的版本升级&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>其中&lt;a href="https://kubernetes.github.io/ingress-nginx/deploy/#bare-metal"> Bare-metal 段落&lt;/a>为通过 yaml 文件部署方式&lt;/p>
&lt;ul>
&lt;li>部署一个 Nginx 的 IngressController&lt;/li>
&lt;li>Nginx-IngressController 的配置详见：&lt;a href="https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/">https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="使用-helm-部署">使用 helm 部署&lt;/h3>
&lt;ul>
&lt;li>helm repo add ingress-nginx &lt;a href="https://kubernetes.github.io/ingress-nginx">https://kubernetes.github.io/ingress-nginx&lt;/a>&lt;/li>
&lt;li>helm pull ingress-nginx/ingress-nginx&lt;/li>
&lt;li>tar -zxvf ingress-nginx-X.X.X.tgz&lt;/li>
&lt;li>cd ingress-nginx&lt;/li>
&lt;li>helm install nginx &amp;ndash;namespace ingress-controller &amp;ndash;create-namesapce .&lt;/li>
&lt;/ul>
&lt;p>部署完成后，即可创建 Ingress 对象，关联后端 Service&lt;/p>
&lt;ul>
&lt;li>配置好域名解析，直接使用域名访问即可，不用域名会出现问题。(如果 ingress 中没有配置 host 字段，则无需解析)
&lt;ul>
&lt;li>因为在 《&lt;a href="docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/7.HTTP/7.HTTP.md">HTTP&lt;/a>》 文章中，http 协议的 Request-URL 中包含了 client 访问时输入的网址，可以是 IP 或者域名，而 ingress 对象的配置中，host 配置的都是域名，如果是 ip 的话， ingress 是无法识别出带有 IP 的 URL 的。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="nginx-官方版部署方式">Nginx 官方版部署方式：&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://docs.nginx.com/nginx-ingress-controller/installation/installation-with-manifests/">https://docs.nginx.com/nginx-ingress-controller/installation/installation-with-manifests/&lt;/a>
&lt;ul>
&lt;li>直接创建一个 daemonset 类型的 nginx-ingress(就是 ingress-controller)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>创建 Ingress 对象，关联后端 Service&lt;/li>
&lt;li>配置好域名解析，直接使用域名访问即可。(如果 ingress 中没有配置 host 字段，则无需解析)
&lt;ul>
&lt;li>Note：不用域名会出现问题。因为在 《&lt;a href="docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/7.HTTP/7.HTTP.md">HTTP&lt;/a>》 文章中，http 协议的 Request-URL 中包含了 client 访问时输入的网址，可以是 IP 或者域名，而 ingress 对象的配置中，host 配置的都是域名，如果是 ip 的话， ingress 是无法识别出带有 IP 的 URL 的。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="关联文件与配置">关联文件与配置&lt;/h1>
&lt;p>可以通过如下几种方式来配置 Nginx Ingress Controller&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Command Line Flags&lt;/strong> # Controller 程序的命令行标志，可以定义程序自身的运行时行为。&lt;/li>
&lt;li>**ConfigMap **# 通过 &lt;code>--configmap&lt;/code> 命令行标志指定的名称空间下的 ConfigMap 资源，仅支持一个 ConfigMap 对象。
&lt;ul>
&lt;li>Nginx Ingress Controller 会读取该 ConfigMap 对象下的内容，并与 Custom template 一起生成 Nginx 的 nginx.conf 文件&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>**Annotations **# 通过为 Ingress 对象添加 Annotations 字段下的内容来定义 Nginx Ingress Controller 的运行时行为。&lt;/li>
&lt;li>&lt;strong>Custom template&lt;/strong> # Nginx Ingress Controller 会使用模板文件生成 nginx.conf 文件。模板文件可以在 &lt;a href="https://github.com/kubernetes/ingress-nginx/blob/master/rootfs/etc/nginx/template/nginx.tmpl">GitHub 代码&lt;/a>中找到&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>ConfigMap、Annotations、Custom template 都可以用来定义 nginx.conf 这个配置文件&lt;/strong>，不同的是：&lt;/p>
&lt;ul>
&lt;li>Annotations 主要用于定义每一个 Virtual Server 中的指令(比如 server{}、location{} 中的指令)&lt;/li>
&lt;li>而 ConfigMap 更多是定义 http{}、stream{} 这种配置环境中的指令。&lt;/li>
&lt;li>Custom template 则是生成 ngxin.conf 的模板文件，Annotations 与 ConfigMap 中定义的内容，都会通过值传递的方式，传递到模板文件中，然后生成 ngxin.conf 文件。&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://github.com/kubernetes/ingress-nginx/blob/main/rootfs/etc/nginx/template/nginx.tmpl">&lt;strong>/etc/nginx/template/nginx.tmpl&lt;/strong>&lt;/a> # Nginx 的 nginx.conf 文件的模板文件&lt;/p>
&lt;h1 id="grafana-面板">Grafana 面板&lt;/h1>
&lt;h2 id="12559">12559&lt;/h2>
&lt;p>&lt;a href="https://grafana.com/grafana/dashboards/12559">https://grafana.com/grafana/dashboards/12559&lt;/a>
该面板曾经名称为：Loki v2 Web Analytics Dashboard，在 Grafana 官方面板首页最顶部推荐了很久；现在更名为：
Grafana Loki Dashboard for NGINX Service Mesh&lt;/p></description></item><item><title>Docs: Nginx</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/8.kubernetes-%E7%BD%91%E7%BB%9C/ingress/ingress-controller/nginx/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/8.kubernetes-%E7%BD%91%E7%BB%9C/ingress/ingress-controller/nginx/</guid><description/></item><item><title>Docs: Traefik</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/8.kubernetes-%E7%BD%91%E7%BB%9C/ingress/ingress-controller/traefik/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/8.kubernetes-%E7%BD%91%E7%BB%9C/ingress/ingress-controller/traefik/</guid><description>
&lt;h1 id="traefik-介绍">Traefik 介绍&lt;/h1>
&lt;p>traefik 在 2.0 之后的版本，不再使用 ingress 资源作为入口，而是一个名为 IngressRoute 的 CRD 资源来作为入口&lt;/p>
&lt;h1 id="traefik-安装">Traefik 安装&lt;/h1>
&lt;p>k8s 的 yaml 文件：&lt;a href="https://docs.traefik.io/user-guides/crd-acme/">https://docs.traefik.io/user-guides/crd-acme/&lt;/a>&lt;/p>
&lt;h1 id="yaml-样例">Yaml 样例&lt;/h1>
&lt;pre tabindex="0">&lt;code>apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
name: simpleingressroute
spec:
entryPoints:
- web
routes:
- match: Host(`your.example.com`) &amp;amp;&amp;amp; PathPrefix(`/notls`) #Host可省略，这样就跟ingress的host字段省略、istio的VirtualService资源的hosts字段写*，是一个效果
kind: Rule
services:
- name: whoami
port: 80
&lt;/code>&lt;/pre>&lt;p>https 的 yaml 配置&lt;/p>
&lt;pre>&lt;code>apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
name: ingressroutetls
spec:
entryPoints:
- websecure
routes:
- match: Host(`your.example.com`) &amp;amp;&amp;amp; PathPrefix(`/tls`)
kind: Rule
services:
- name: whoami
port: 80
tls:
certResolver: myresolver
&lt;/code>&lt;/pre></description></item></channel></rss>