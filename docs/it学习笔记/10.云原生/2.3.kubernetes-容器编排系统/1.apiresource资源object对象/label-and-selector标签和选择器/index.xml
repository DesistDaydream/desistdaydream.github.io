<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – Label and Selector(标签和选择器)</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/1.apiresource%E8%B5%84%E6%BA%90object%E5%AF%B9%E8%B1%A1/label-and-selector%E6%A0%87%E7%AD%BE%E5%92%8C%E9%80%89%E6%8B%A9%E5%99%A8/</link><description>Recent content in Label and Selector(标签和选择器) on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/1.apiresource%E8%B5%84%E6%BA%90object%E5%AF%B9%E8%B1%A1/label-and-selector%E6%A0%87%E7%AD%BE%E5%92%8C%E9%80%89%E6%8B%A9%E5%99%A8/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Label and Selector(标签和选择器)</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/1.apiresource%E8%B5%84%E6%BA%90object%E5%AF%B9%E8%B1%A1/label-and-selector%E6%A0%87%E7%AD%BE%E5%92%8C%E9%80%89%E6%8B%A9%E5%99%A8/label-and-selector%E6%A0%87%E7%AD%BE%E5%92%8C%E9%80%89%E6%8B%A9%E5%99%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/1.apiresource%E8%B5%84%E6%BA%90object%E5%AF%B9%E8%B1%A1/label-and-selector%E6%A0%87%E7%AD%BE%E5%92%8C%E9%80%89%E6%8B%A9%E5%99%A8/label-and-selector%E6%A0%87%E7%AD%BE%E5%92%8C%E9%80%89%E6%8B%A9%E5%99%A8/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/">官方文档,概念-使用 Kubernetes 对象-标签和选择器&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/">官方文档,概念-使用 Kubernetes 对象-推荐的标签&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/docs/reference/labels-annotations-taints/">官方文档,参考-常见的内置标签、注释、污点&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/">官方文档,参考-Kubernets API-通用定义-标签选择器&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/node-selector-requirement/">官方文档,参考-Kubernets API-通用定义-节点选择器请求&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Label(标签)&lt;/strong> 是 &lt;code>键/值对&lt;/code> 的集合，在 Kubernetes 中，每一个对象都可以具有一个或多个** Label(标签)**。Label 主要用来让用户定义对象的属性，以便为所有对象进行分类，并且还可以组织和选择对象的子集。标签可以在创建对象的同时添加，也可以随时修改对象上的标签。&lt;/p>
&lt;p>Kubernetes 中的 Label 功能与 时间序列数据 中标签功能有异曲同工之妙，说白了，就是用来描述一个东西的。而且通过 Label，我们可以以松耦合的方式将我们自己想要的组织方式组织集群中的 Pod，而并不需要自己维护这些。&lt;/p>
&lt;p>&lt;strong>Kubernetes 中标签概念的重要性不亚于 API 资源和对象的概念。Pod 要运行在哪个 Node 上、下文将会提到的标签选择器，以及 Kubernetes 的调度系统等等等等，想要实现这些功能，都要依赖于标签。&lt;/strong>&lt;/p>
&lt;p>&lt;em>标签&lt;/em> 是键值对。有效的标签键有两个段：可选的前缀和名称，用斜杠（&lt;code>/&lt;/code>）分隔。 名称段是必需的，必须小于等于 63 个字符，以字母数字字符（&lt;code>[a-z0-9A-Z]&lt;/code>）开头和结尾， 带有破折号（&lt;code>-&lt;/code>），下划线（&lt;code>_&lt;/code>），点（ &lt;code>.&lt;/code>）和之间的字母数字。 前缀是可选的。如果指定，前缀必须是 DNS 子域：由点（&lt;code>.&lt;/code>）分隔的一系列 DNS 标签，总共不超过 253 个字符， 后跟斜杠（&lt;code>/&lt;/code>）。&lt;/p>
&lt;p>如果省略前缀，则假定标签键对用户是私有的。 向最终用户对象添加标签的自动系统组件（例如 &lt;code>kube-scheduler&lt;/code>、&lt;code>kube-controller-manager&lt;/code>、 &lt;code>kube-apiserver&lt;/code>、&lt;code>kubectl&lt;/code> 或其他第三方自动化工具）必须指定前缀。&lt;/p>
&lt;p>有效标签值：&lt;/p>
&lt;ul>
&lt;li>必须为 63 个字符或更少（可以为空）&lt;/li>
&lt;li>除非标签值为空，必须以字母数字字符（&lt;code>[a-z0-9A-Z]&lt;/code>）开头和结尾&lt;/li>
&lt;li>包含破折号（&lt;code>-&lt;/code>）、下划线（&lt;code>_&lt;/code>）、点（&lt;code>.&lt;/code>）和字母或数字。&lt;/li>
&lt;/ul>
&lt;h2 id="集群中特殊的标签">集群中特殊的标签&lt;/h2>
&lt;p>&lt;code>kubernetes.io/&lt;/code>  和 &lt;code>k8s.io/&lt;/code> 前缀是为 Kubernetes 核心组件保留的。
在每个 master 上都会有这么一个标签 node-role.kubernetes.io/XXXXX=，在使用 kubeclt get nodes 命令时， ROLES 列的值，就是根据该标签的 key 来决定的，key 中 XXXX 的值，会填写到 ROLES 列中。&lt;/p>
&lt;h2 id="一个对象中标签示例">一个对象中标签示例&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Pod&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">label-demo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">environment&lt;/span>: &lt;span style="color:#ae81ff">production&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">nginx&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">containers&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">nginx&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">nginx:1.14.2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">containerPort&lt;/span>: &lt;span style="color:#ae81ff">80&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="label-selector标签选择器简称-selector">Label Selector(标签选择器，简称 Selector)&lt;/h1>
&lt;p>可以给 kubernetes 中的对象打上标签，然后让某个对象使用 Selector 来选择具有相同标签的对象成为同一组来协调工作或者进行各种限定&lt;/p>
&lt;p>比如具有相同标签的 Pod 和 Node，该 Pod 会使用 Selector 选择在该 Node 上运行，该 Pod 对该 Node 具有倾向性；或者把具有相同标签的 Service 和 Pod 关联起来，使 Service 使用 Selector 知道可以选择哪些 Pod 来进行调度&lt;/p>
&lt;p>说白了，所谓的 Selector 就是根据给定的规则对标签进行匹配，凡是带有匹配到的标签的资源，都会被选择器选中。&lt;/p>
&lt;p>标签选择器可以用在下面这些资源的字段中：&lt;/p>
&lt;ul>
&lt;li>各种控制器
&lt;ul>
&lt;li>.spec.selector&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>pod
&lt;ul>
&lt;li>.spec.affinity.所有亲和类型.软/硬规则.nodeSelectorTerms&lt;/li>
&lt;li>.spec.nodeSelector&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>service
&lt;ul>
&lt;li>.spec.selector&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>等等&lt;/li>
&lt;/ul>
&lt;h2 id="selector-manifest">Selector Manifest&lt;/h2>
&lt;p>选择器的 Manifest 字段及其写法详见 [API 参考-LabelSelector](✏IT 学习笔记/☁️10.云原生/2.3.Kubernetes%20 容器编排系统/1.API、Resource(资源)、Object(对象)/API%20 参考/Common%20Definitions(通用定义)/LabelSelector%20 详解.md 参考/Common Definitions(通用定义)/LabelSelector 详解.md)&lt;/p>
&lt;h1 id="label-的使用方式">Label 的使用方式&lt;/h1>
&lt;h2 id="api">API&lt;/h2>
&lt;h3 id="list-和-watch-过滤">LIST 和 WATCH 过滤&lt;/h3>
&lt;p>LIST 和 WATCH 操作可以使用查询参数指定标签选择算符过滤一组对象。 两种需求都是允许的。（这里显示的是它们出现在 URL 查询字符串中）&lt;/p>
&lt;ul>
&lt;li>&lt;em>基于等值&lt;/em> 的需求: &lt;code>?labelSelector=environment%3Dproduction,tier%3Dfrontend&lt;/code>&lt;/li>
&lt;li>&lt;em>基于集合&lt;/em> 的需求: &lt;code>?labelSelector=environment+in+%28production%2Cqa%29%2Ctier+in+%28frontend%29&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>两种标签选择算符都可以通过 REST 客户端用于 list 或者 watch 资源。 例如，使用 &lt;code>kubectl&lt;/code> 定位 &lt;code>apiserver&lt;/code>，可以使用 &lt;em>基于等值&lt;/em> 的标签选择算符可以这么写：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl get pods -l environment&lt;span style="color:#f92672">=&lt;/span>production,tier&lt;span style="color:#f92672">=&lt;/span>frontend
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>或者使用 &lt;em>基于集合的&lt;/em> 需求：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl get pods -l &lt;span style="color:#e6db74">&amp;#39;environment in (production),tier in (frontend)&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>正如刚才提到的，&lt;em>基于集合&lt;/em> 的需求更具有表达力。例如，它们可以实现值的 &lt;em>或&lt;/em> 操作：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl get pods -l &lt;span style="color:#e6db74">&amp;#39;environment in (production, qa)&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>或者通过 &lt;em>exists&lt;/em> 运算符限制不匹配：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl get pods -l &lt;span style="color:#e6db74">&amp;#39;environment,environment notin (frontend)&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="在-api-对象中设置引用">在 API 对象中设置引用&lt;/h3>
&lt;p>一些 Kubernetes 对象，例如 &lt;code>[services](https://kubernetes.io/zh/docs/concepts/services-networking/service/)&lt;/code> 和 &lt;code>[replicationcontrollers](https://kubernetes.io/zh/docs/concepts/workloads/controllers/replicationcontroller/)&lt;/code> ， 也使用了标签选择算符去指定了其他资源的集合，例如 &lt;a href="https://kubernetes.io/zh/docs/concepts/workloads/pods/">pods&lt;/a>。&lt;/p>
&lt;h4 id="service-和-replicationcontroller">Service 和 ReplicationController&lt;/h4>
&lt;p>一个 &lt;code>Service&lt;/code> 指向的一组 Pods 是由标签选择算符定义的。同样，一个 &lt;code>ReplicationController&lt;/code> 应该管理的 pods 的数量也是由标签选择算符定义的。
两个对象的标签选择算符都是在 &lt;code>json&lt;/code> 或者 &lt;code>yaml&lt;/code> 文件中使用映射定义的，并且只支持 &lt;em>基于等值&lt;/em> 需求的选择算符：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;selector&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;component&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;redis&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>或者&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">selector&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">component&lt;/span>: &lt;span style="color:#ae81ff">redis&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个选择算符(分别在 &lt;code>json&lt;/code> 或者 &lt;code>yaml&lt;/code> 格式中) 等价于 &lt;code>component=redis&lt;/code> 或 &lt;code>component in (redis)&lt;/code> 。&lt;/p>
&lt;h4 id="支持基于集合需求的资源">支持基于集合需求的资源&lt;/h4>
&lt;p>比较新的资源，例如 &lt;code>[Job](https://kubernetes.io/zh/docs/concepts/workloads/controllers/job/)&lt;/code>、 &lt;code>[Deployment](https://kubernetes.io/zh/docs/concepts/workloads/controllers/deployment/)&lt;/code>、 &lt;code>[Replica Set](https://kubernetes.io/zh/docs/concepts/workloads/controllers/replicaset/)&lt;/code> 和 &lt;code>[DaemonSet](https://kubernetes.io/zh/docs/concepts/workloads/controllers/daemonset/)&lt;/code> ， 也支持 &lt;em>基于集合的&lt;/em> 需求。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">selector&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">matchLabels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">component&lt;/span>: &lt;span style="color:#ae81ff">redis&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">matchExpressions&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - { &lt;span style="color:#f92672">key: tier, operator: In, values&lt;/span>: [&lt;span style="color:#ae81ff">cache] }&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - { &lt;span style="color:#f92672">key: environment, operator: NotIn, values&lt;/span>: [&lt;span style="color:#ae81ff">dev] }&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>matchLabels&lt;/code> 是由 &lt;code>{key,value}&lt;/code> 对组成的映射。 &lt;code>matchLabels&lt;/code> 映射中的单个 &lt;code>{key,value }&lt;/code> 等同于 &lt;code>matchExpressions&lt;/code> 的元素， 其 &lt;code>key&lt;/code> 字段为 &amp;ldquo;key&amp;rdquo;，&lt;code>operator&lt;/code> 为 &amp;ldquo;In&amp;rdquo;，而 &lt;code>values&lt;/code> 数组仅包含 &amp;ldquo;value&amp;rdquo;。 &lt;code>matchExpressions&lt;/code> 是 Pod 选择算符需求的列表。 有效的运算符包括 &lt;code>In&lt;/code>、&lt;code>NotIn&lt;/code>、&lt;code>Exists&lt;/code> 和 &lt;code>DoesNotExist&lt;/code>。 在 &lt;code>In&lt;/code> 和 &lt;code>NotIn&lt;/code> 的情况下，设置的值必须是非空的。 来自 &lt;code>matchLabels&lt;/code> 和 &lt;code>matchExpressions&lt;/code> 的所有要求都按逻辑与的关系组合到一起 &amp;ndash; 它们必须都满足才能匹配。&lt;/p>
&lt;h4 id="选择节点集">选择节点集&lt;/h4>
&lt;p>通过标签进行选择的一个用例是确定节点集，方便 Pod 调度。 有关更多信息，详见 &lt;a href="https://www.yuque.com/go/doc/33166071">让 Pod 运行在指定 Node&lt;/a> 章节。&lt;/p>
&lt;h1 id="使用-kubectl-命令控制标签">使用 kubectl 命令控制标签&lt;/h1>
&lt;h2 id="syntax语法">Syntax(语法)&lt;/h2>
&lt;p>&lt;strong>kubectl label [&amp;ndash;overwrite] (-f FILENAME | TYPE NAME) KEY_1=VAL_1 &amp;hellip; KEY_N=VAL_N [&amp;ndash;resource-version=version] [options]&lt;/strong>&lt;/p>
&lt;p>在 get 子命令中，&lt;code>--show-label&lt;/code> 标志还可以显示获取到的对象的所有标签；&lt;code>-l&lt;/code> 标签可以根据表达式来过滤想要获取的对象&lt;/p>
&lt;h2 id="example">EXAMPLE&lt;/h2>
&lt;ul>
&lt;li>获取所有 node 的标签
&lt;ul>
&lt;li>&lt;strong>kubectl get node &amp;ndash;show-labels&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>为 node-1.bj-test 节点添加名为 &lt;code>node-role.kubernetes.io/proxy&lt;/code> 的标签，标签值为 &lt;code>ingress-controller&lt;/code>
&lt;ul>
&lt;li>&lt;strong>kubectl label nodes test-node-4 node-role.kubernetes.io/proxy=ingress-controller&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>将 node-1.bj-test 节点上的 &lt;code>node-role.kubernetes.io/proxy&lt;/code> 标签删除
&lt;ul>
&lt;li>&lt;strong>kubectl label nodes node-1.bj-test node-role.kubernetes.io/proxy-&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>给 k8s-node1 节点添加 disktype=ssd 这个标签
&lt;ul>
&lt;li>&lt;strong>kubectl label node k8s-node1 disktype=ssd&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>删除 k8s-node1 节点上的 disktype 标签
&lt;ul>
&lt;li>&lt;strong>kubectl label node k8s-node1 disktype-&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: 官方推荐标签用法</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/1.apiresource%E8%B5%84%E6%BA%90object%E5%AF%B9%E8%B1%A1/label-and-selector%E6%A0%87%E7%AD%BE%E5%92%8C%E9%80%89%E6%8B%A9%E5%99%A8/%E5%AE%98%E6%96%B9%E6%8E%A8%E8%8D%90%E6%A0%87%E7%AD%BE%E7%94%A8%E6%B3%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/1.apiresource%E8%B5%84%E6%BA%90object%E5%AF%B9%E8%B1%A1/label-and-selector%E6%A0%87%E7%AD%BE%E5%92%8C%E9%80%89%E6%8B%A9%E5%99%A8/%E5%AE%98%E6%96%B9%E6%8E%A8%E8%8D%90%E6%A0%87%E7%AD%BE%E7%94%A8%E6%B3%95/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/">官方文档&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>除了 kubectl 和 dashboard 之外，您可以使用其他工具来可视化和管理 Kubernetes 对象。一组通用的标签可以让多个工具之间相互操作，用所有工具都能理解的通用方式描述对象。
除了支持工具外，推荐的标签还以一种可以查询的方式描述了应用程序。
元数据围绕 &lt;em>应用（application）&lt;/em> 的概念进行组织。Kubernetes 不是 平台即服务（PaaS），没有或强制执行正式的应用程序概念。 相反，应用程序是非正式的，并使用元数据进行描述。应用程序包含的定义是松散的。&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>说明：&lt;/strong>
这些是推荐的标签。它们使管理应用程序变得更容易但不是任何核心工具所必需的。&lt;/p>
&lt;/blockquote>
&lt;p>共享标签和注解都使用同一个前缀：&lt;code>app.kubernetes.io&lt;/code>。没有前缀的标签是用户私有的。共享前缀可以确保共享标签不会干扰用户自定义的标签。&lt;/p>
&lt;h2 id="标签">标签&lt;/h2>
&lt;p>为了充分利用这些标签，应该在每个资源对象上都使用它们。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>键&lt;/th>
&lt;th>描述&lt;/th>
&lt;th>示例&lt;/th>
&lt;th>类型&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>app.kubernetes.io/name&lt;/code>&lt;/td>
&lt;td>应用程序的名称&lt;/td>
&lt;td>&lt;code>mysql&lt;/code>&lt;/td>
&lt;td>字符串&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>app.kubernetes.io/instance&lt;/code>&lt;/td>
&lt;td>用于唯一确定应用实例的名称&lt;/td>
&lt;td>&lt;code>mysql-abcxzy&lt;/code>&lt;/td>
&lt;td>字符串&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>app.kubernetes.io/version&lt;/code>&lt;/td>
&lt;td>应用程序的当前版本（例如，语义版本，修订版哈希等）&lt;/td>
&lt;td>&lt;code>5.7.21&lt;/code>&lt;/td>
&lt;td>字符串&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>app.kubernetes.io/component&lt;/code>&lt;/td>
&lt;td>架构中的组件&lt;/td>
&lt;td>&lt;code>database&lt;/code>&lt;/td>
&lt;td>字符串&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>app.kubernetes.io/part-of&lt;/code>&lt;/td>
&lt;td>此级别的更高级别应用程序的名称&lt;/td>
&lt;td>&lt;code>wordpress&lt;/code>&lt;/td>
&lt;td>字符串&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>app.kubernetes.io/managed-by&lt;/code>&lt;/td>
&lt;td>用于管理应用程序的工具&lt;/td>
&lt;td>&lt;code>helm&lt;/code>&lt;/td>
&lt;td>字符串&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>为说明这些标签的实际使用情况，请看下面的 StatefulSet 对象：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">apps/v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">StatefulSet&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app.kubernetes.io/name&lt;/span>: &lt;span style="color:#ae81ff">mysql&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app.kubernetes.io/instance&lt;/span>: &lt;span style="color:#ae81ff">mysql-abcxzy&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app.kubernetes.io/version&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;5.7.21&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app.kubernetes.io/component&lt;/span>: &lt;span style="color:#ae81ff">database&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app.kubernetes.io/part-of&lt;/span>: &lt;span style="color:#ae81ff">wordpress&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app.kubernetes.io/managed-by&lt;/span>: &lt;span style="color:#ae81ff">helm&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="应用和应用实例">应用和应用实例&lt;/h2>
&lt;p>应用可以在 Kubernetes 集群中安装一次或多次。在某些情况下，可以安装在同一命名空间中。例如，可以不止一次地为不同的站点安装不同的 WordPress。
应用的名称和实例的名称是分别记录的。例如，某 WordPress 实例的 &lt;code>app.kubernetes.io/name&lt;/code> 为 &lt;code>wordpress&lt;/code>，而其实例名称表现为 &lt;code>app.kubernetes.io/instance&lt;/code> 的属性值 &lt;code>wordpress-abcxzy&lt;/code>。这使应用程序和应用程序的实例成为可能是可识别的。应用程序的每个实例都必须具有唯一的名称。&lt;/p>
&lt;h2 id="示例">示例&lt;/h2>
&lt;p>为了说明使用这些标签的不同方式，以下示例具有不同的复杂性。&lt;/p>
&lt;h3 id="一个简单的无状态服务">一个简单的无状态服务&lt;/h3>
&lt;p>考虑使用 &lt;code>Deployment&lt;/code> 和 &lt;code>Service&lt;/code> 对象部署的简单无状态服务的情况。以下两个代码段表示如何以最简单的形式使用标签。
下面的 &lt;code>Deployment&lt;/code> 用于监督运行应用本身的 pods。&lt;/p>
&lt;pre>&lt;code>apiVersion: apps/v1
kind: Deployment
metadata:
labels:
app.kubernetes.io/name: myservice
app.kubernetes.io/instance: myservice-abcxzy
...
&lt;/code>&lt;/pre>
&lt;p>下面的 &lt;code>Service&lt;/code> 用于暴露应用。&lt;/p>
&lt;pre>&lt;code>apiVersion: v1
kind: Service
metadata:
labels:
app.kubernetes.io/name: myservice
app.kubernetes.io/instance: myservice-abcxzy
...
&lt;/code>&lt;/pre>
&lt;h3 id="带有一个数据库的-web-应用程序">带有一个数据库的 Web 应用程序&lt;/h3>
&lt;p>考虑一个稍微复杂的应用：一个使用 Helm 安装的 Web 应用（WordPress），其中 使用了数据库（MySQL）。以下代码片段说明用于部署此应用程序的对象的开始。
以下 &lt;code>Deployment&lt;/code> 的开头用于 WordPress：&lt;/p>
&lt;pre>&lt;code>apiVersion: apps/v1
kind: Deployment
metadata:
labels:
app.kubernetes.io/name: wordpress
app.kubernetes.io/instance: wordpress-abcxzy
app.kubernetes.io/version: &amp;quot;4.9.4&amp;quot;
app.kubernetes.io/managed-by: helm
app.kubernetes.io/component: server
app.kubernetes.io/part-of: wordpress
...
&lt;/code>&lt;/pre>
&lt;p>这个 &lt;code>Service&lt;/code> 用于暴露 WordPress：&lt;/p>
&lt;pre>&lt;code>apiVersion: v1
kind: Service
metadata:
labels:
app.kubernetes.io/name: wordpress
app.kubernetes.io/instance: wordpress-abcxzy
app.kubernetes.io/version: &amp;quot;4.9.4&amp;quot;
app.kubernetes.io/managed-by: helm
app.kubernetes.io/component: server
app.kubernetes.io/part-of: wordpress
...
&lt;/code>&lt;/pre>
&lt;p>MySQL 作为一个 &lt;code>StatefulSet&lt;/code> 暴露，包含它和它所属的较大应用程序的元数据：&lt;/p>
&lt;pre>&lt;code>apiVersion: apps/v1
kind: StatefulSet
metadata:
labels:
app.kubernetes.io/name: mysql
app.kubernetes.io/instance: mysql-abcxzy
app.kubernetes.io/version: &amp;quot;5.7.21&amp;quot;
app.kubernetes.io/managed-by: helm
app.kubernetes.io/component: database
app.kubernetes.io/part-of: wordpress
...
&lt;/code>&lt;/pre>
&lt;p>&lt;code>Service&lt;/code> 用于将 MySQL 作为 WordPress 的一部分暴露：&lt;/p>
&lt;pre>&lt;code>apiVersion: v1
kind: Service
metadata:
labels:
app.kubernetes.io/name: mysql
app.kubernetes.io/instance: mysql-abcxzy
app.kubernetes.io/version: &amp;quot;5.7.21&amp;quot;
app.kubernetes.io/managed-by: helm
app.kubernetes.io/component: database
app.kubernetes.io/part-of: wordpress
...
&lt;/code>&lt;/pre>
&lt;p>使用 MySQL &lt;code>StatefulSet&lt;/code> 和 &lt;code>Service&lt;/code>，您会注意到有关 MySQL 和 Wordpress 的信息，包括更广泛的应用程序。&lt;/p></description></item></channel></rss>