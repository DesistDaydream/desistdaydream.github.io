<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – 工作负载资源</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/1.apiresource%E8%B5%84%E6%BA%90object%E5%AF%B9%E8%B1%A1/api-%E5%8F%82%E8%80%83/%E5%B7%A5%E4%BD%9C%E8%B4%9F%E8%BD%BD%E8%B5%84%E6%BA%90/</link><description>Recent content in 工作负载资源 on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/1.apiresource%E8%B5%84%E6%BA%90object%E5%AF%B9%E8%B1%A1/api-%E5%8F%82%E8%80%83/%E5%B7%A5%E4%BD%9C%E8%B4%9F%E8%BD%BD%E8%B5%84%E6%BA%90/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: CronJab Manifests 详解</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/1.apiresource%E8%B5%84%E6%BA%90object%E5%AF%B9%E8%B1%A1/api-%E5%8F%82%E8%80%83/%E5%B7%A5%E4%BD%9C%E8%B4%9F%E8%BD%BD%E8%B5%84%E6%BA%90/cronjab-manifests-%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/1.apiresource%E8%B5%84%E6%BA%90object%E5%AF%B9%E8%B1%A1/api-%E5%8F%82%E8%80%83/%E5%B7%A5%E4%BD%9C%E8%B4%9F%E8%BD%BD%E8%B5%84%E6%BA%90/cronjab-manifests-%E8%AF%A6%E8%A7%A3/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/cron-job-v1/">官方文档，参考-KubernetesAPI-工作负载资源-CronJob&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>Docs: Deployment Manifest 详解</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/1.apiresource%E8%B5%84%E6%BA%90object%E5%AF%B9%E8%B1%A1/api-%E5%8F%82%E8%80%83/%E5%B7%A5%E4%BD%9C%E8%B4%9F%E8%BD%BD%E8%B5%84%E6%BA%90/deployment-manifest-%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/1.apiresource%E8%B5%84%E6%BA%90object%E5%AF%B9%E8%B1%A1/api-%E5%8F%82%E8%80%83/%E5%B7%A5%E4%BD%9C%E8%B4%9F%E8%BD%BD%E8%B5%84%E6%BA%90/deployment-manifest-%E8%AF%A6%E8%A7%A3/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.21/#deployment-v1-apps">API 文档，单页&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/deployment-v1/">官方文档,参考-Kubernetes API-工作负载资源-Deployment&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="yaml-中的顶层节点">YAML 中的顶层节点&lt;/h2>
&lt;ul>
&lt;li>apiVersion: apps/v1&lt;/li>
&lt;li>kind: Deployment&lt;/li>
&lt;li>&lt;a href="#d12d7d74">metadata: &lt;!-- raw HTML omitted -->&lt;/a>&lt;/li>
&lt;li>&lt;a href="#5xtmr">spec: &lt;!-- raw HTML omitted -->&lt;/a>&lt;/li>
&lt;li>&lt;a href="#Sbe0x">status: &lt;!-- raw HTML omitted -->&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="metadata-object">metadata: &lt;!-- raw HTML omitted -->&lt;/h1>
&lt;p>Deployment 对象的元数据，该字段内容详见通用定义的 [ObjectMeta](/docs/IT学习笔记/10.云原生/2.3.Kubernetes%20 容器编排系统/1.API、Resource(资源)、Object(对象)/API%20 参考/Common%20Definitions(通用定义)/ObjectMeta.md Definitions(通用定义)/ObjectMeta.md)&lt;/p>
&lt;h1 id="spec-object">spec: &lt;!-- raw HTML omitted -->&lt;/h1>
&lt;p>spec 用来描述一个 Deployment 应该具有的属性。也就是用来定义 Deployment 的行为规范。一共分为如下几类&lt;/p>
&lt;ul>
&lt;li>描述 Deployment 类型的控制器的行为&lt;/li>
&lt;li>描述 Deployment 控制器所关联的 Pod 的属性。&lt;/li>
&lt;/ul>
&lt;h2 id="控制器行为">控制器行为&lt;/h2>
&lt;p>&lt;strong>minReadySeconds: &lt;!-- raw HTML omitted -->&lt;/strong> # 新创建的 Pod 在启动后，经过 minReadySeconds 秒后一直没有崩溃，之后，将该 Pod 视为可用。&lt;code>默认值：0&lt;/code>。
默认值 0 表示 Pod 准备就绪后即被视为可用。
&lt;strong>progressDeadlineSeconds: &lt;!-- raw HTML omitted -->&lt;/strong> # 本 Deployment 对象被视为失败之前的等待时间，单位 秒。&lt;code>默认值：600&lt;/code>
&lt;strong>replicas: &lt;!-- raw HTML omitted -->&lt;/strong> # 该控制器运行的 Pod 数量，&lt;code>默认值：1&lt;/code>。
**revisionHistoryLimit: &lt;!-- raw HTML omitted --> **# 可以保留的允许回滚的旧 ReplicaSet 对象的数量。&lt;code>默认值：10&lt;/code>。控制器的历史可以通过 &lt;code>kubectl rollout&lt;/code> 命令控制
**selector: &lt;!-- raw HTML omitted --> # 必须的。**Pod 的标签选择器，根据标签匹配要控制的 Pod。必须与 &lt;code>template.metadata.labels&lt;/code> 的内容匹配。&lt;/p>
&lt;ul>
&lt;li>该字段内容详见通用定义的[ LabelSelector](/docs/IT学习笔记/10.云原生/2.3.Kubernetes%20 容器编排系统/1.API、Resource(资源)、Object(对象)/API%20 参考/Common%20Definitions(通用定义)/LabelSelector%20 详解.md Definitions(通用定义)/LabelSelector 详解.md)。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>strategy: &lt;!-- raw HTML omitted -->&lt;/strong> # 定义用一个新的 pod 代替现有 pod 的部署策略(更新 pod 的策略)&lt;/p>
&lt;ul>
&lt;li>&lt;strong>rollingUpdate: &lt;!-- raw HTML omitted -->&lt;/strong> # 当更新策略为 rollingUpdate 时，需要配置滚动更新的参数
&lt;ul>
&lt;li>**maxSurge: &lt;!-- raw HTML omitted --> **# 设定在更新时最大可用的 Pod 数，就是先添加几个新的 Pod 再删除老的&lt;/li>
&lt;li>**maxUnavailable: &lt;!-- raw HTML omitted --> **# 设定在更新时最大不可用的 Pod 数&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>type: &lt;!-- raw HTML omitted -->Recreate|RollingUpdate&lt;/strong> # 指定更新策略的类型，Recreate(重新创建) 与 RollingUpdate(滚动更新)。&lt;code>默认值：RollingUpdate&lt;/code>
&lt;ul>
&lt;li>Recreate 是删除一个创建一个&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="pod-属性">Pod 属性&lt;/h2>
&lt;p>&lt;strong>template: &lt;!-- raw HTML omitted --> # 必须的&lt;/strong>。定义 Pod 的模板,使用 Pod 类型的 metadata 和 spec 字段。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>metadata:&lt;/strong> #与 pod 资源定义的内容基本一致
&lt;ul>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>spec:&lt;/strong> #与 pod 资源定义的内容基本一致
&lt;ul>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="status-object">status: &lt;!-- raw HTML omitted -->&lt;/h1>
&lt;h1 id="manifests-样例">Manifests 样例&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">apps/v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Deployment&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">myapp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">myapp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">replicas&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">selector&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">matchLabels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">myapp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">template&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">myapp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">myapp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">containers&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">myapp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">lchdzh/network-test&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Pod Manifest 详解</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/1.apiresource%E8%B5%84%E6%BA%90object%E5%AF%B9%E8%B1%A1/api-%E5%8F%82%E8%80%83/%E5%B7%A5%E4%BD%9C%E8%B4%9F%E8%BD%BD%E8%B5%84%E6%BA%90/pod-manifest-%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/1.apiresource%E8%B5%84%E6%BA%90object%E5%AF%B9%E8%B1%A1/api-%E5%8F%82%E8%80%83/%E5%B7%A5%E4%BD%9C%E8%B4%9F%E8%BD%BD%E8%B5%84%E6%BA%90/pod-manifest-%E8%AF%A6%E8%A7%A3/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.21/#pod-v1-core">API 文档，单页&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/">官方文档,参考-Kubernetes API-工作负载资源-Pod&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="yaml-中的顶层节点">YAML 中的顶层节点&lt;/h2>
&lt;ul>
&lt;li>apiVersion: v1&lt;/li>
&lt;li>kind: Pod&lt;/li>
&lt;li>&lt;a href="#1iNnm">metadata: &lt;!-- raw HTML omitted -->&lt;/a>&lt;/li>
&lt;li>&lt;a href="#X4bVa">spec: &lt;!-- raw HTML omitted -->&lt;/a>&lt;/li>
&lt;li>&lt;a href="#Sbe0x">status: &lt;!-- raw HTML omitted -->&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="metadata-object">metadata: &lt;!-- raw HTML omitted -->&lt;/h1>
&lt;p>metadata 用来描述一个 Pod 的元数据信息。该字段内容详见通用定义的 [ObjectMeta](/docs/IT学习笔记/10.云原生/2.3.Kubernetes%20 容器编排系统/1.API、Resource(资源)、Object(对象)/API%20 参考/Common%20Definitions(通用定义)/ObjectMeta.md Definitions(通用定义)/ObjectMeta.md)&lt;/p>
&lt;ul>
&lt;li>**annotations: &lt;!-- raw HTML omitted --> **# Pod 注释，不同于 label，仅用于为资源提供元数据&lt;/li>
&lt;li>&lt;strong>labels: &amp;lt;map[STRING]STRING&amp;gt;&lt;/strong> # Pod 的标签，通过“键值对”的方式定义，可以添加多个标签
&lt;ul>
&lt;li>KEY: VAL # 比如该键值可以是 run: httpd，标签名是 run，run 的值是 httpd，key 与 val 使用字母，数字，_，-，.这几个字符且以字母或数字开头；val 可以为空。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>name: &lt;!-- raw HTML omitted -->&lt;/strong> # Pod 对象名称。必须名称空间唯一。&lt;/li>
&lt;li>&lt;strong>ownerReferences: &amp;lt;[]Object&amp;gt;&lt;/strong> # 该对象所依赖的对象列表，一般由控制器自动生成。也可以手动指定。&lt;/li>
&lt;/ul>
&lt;h1 id="spec-object">spec: &lt;!-- raw HTML omitted -->&lt;/h1>
&lt;p>spec 用来描述一个 Pod 应该具有的属性。Pod 中的 spec 字段大体分为如下几类&lt;/p>
&lt;ul>
&lt;li>Containers # 用来描述 Pod 中容器的属性&lt;/li>
&lt;li>Volumes # 用来描述 Pod 所用卷，以及容器如何使用这些卷&lt;/li>
&lt;li>Scheduling # Pod 如何被调度到 node&lt;/li>
&lt;li>Lifecycle # Pod 的生命周期&lt;/li>
&lt;li>Hostname and Name resolution # 容器的主机名和域名解析&lt;/li>
&lt;li>Hosts namespaces # Pod 使用主机上名称空间的方法&lt;/li>
&lt;li>Service account # Pod 的服务账户&lt;/li>
&lt;li>Security context # Pod 安全相关&lt;/li>
&lt;/ul>
&lt;h2 id="containers容器-相关字段">Containers(容器) 相关字段&lt;/h2>
&lt;p>&lt;strong>containers: &amp;lt;[]Object&amp;gt;&lt;/strong> # 署于该 pod 的 containers 列表
&lt;a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.19/#container-v1-core">containers&lt;/a> 字段&lt;strong>只会在 Pod 环境&lt;/strong>中创建&lt;/p>
&lt;ul>
&lt;li>&lt;strong>args: &amp;lt;[]STRING&amp;gt;&lt;/strong> # 定义容器运行的命令和参数。用于替换容器镜像中 CMD 指令。详见&lt;a href="https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/">为容器定义命令和参数章节&lt;/a>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 注意，在使用 args 为容器传递 flags 时，不要使用空格。否则，会自动为 flags 和 参数 加上单引号，导致 flags 失效&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 比如现在有如下 args 配置&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">args&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">deletecr&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - --&lt;span style="color:#ae81ff">ns default&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 当容器运行后，会被转换成 &amp;#34;deletecr &amp;#39;--ns default&amp;#39;&amp;#34;，这时，deletecr 的 flag 变成了 --ns default，而不是 --ns。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 这时，就会报错，并提示如下内容&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">flag provided but not defined&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;--ns default&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 可以看到，在容器中，将 --ns default 这个整体当作了一个 flags。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 所以，如果想要使用 args，可以这样写：&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">args&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">deletecr&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - --&lt;span style="color:#ae81ff">ns=default&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 或者&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">args&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">deletecr&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - --&lt;span style="color:#ae81ff">ns&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">default&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;strong>command: &amp;lt;[]STRING&amp;gt;&lt;/strong> # 定义容器运行的命令和参数。用于替换容器镜像中的 ENTRYPOINT 指令。详见为&lt;a href="https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/">容器定义命令和参数章节&lt;/a>&lt;/li>
&lt;li>&lt;strong>env: &amp;lt;[]Object&amp;gt;&lt;/strong> # 要在容器中设置的环境变量列表。详见&lt;a href="https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/">为容器定义命令和参数章节&lt;/a>&lt;/li>
&lt;li>**image: &lt;!-- raw HTML omitted --> **# 容器使用的镜像&lt;/li>
&lt;li>**imagePullPolicy: &lt;!-- raw HTML omitted --> **# 指明镜像拉取策略，公有三种 Always、IfNotPresent、Never。&lt;code>默认值：IfNotPresent&lt;/code>&lt;/li>
&lt;li>**name: &lt;!-- raw HTML omitted --> **# 容器的名称&lt;/li>
&lt;li>**ports: &amp;lt;[]Object&amp;gt; **# 容器对外暴露的端口，主要作为参考信息，就算不指定，通过 Service 也可以关联到容器中的指定端口，并通过 Service 访问容器内部。
&lt;ul>
&lt;li>**containerPort: &lt;!-- raw HTML omitted --> **# 容器内端口号&lt;/li>
&lt;li>&lt;strong>name: &lt;!-- raw HTML omitted -->&lt;/strong> # 端口号的名称，必须在 pod 中唯一。service 可以通过 name 引用端口。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>**resources: &lt;!-- raw HTML omitted --> **# 容器所需的资源。即.所需的 CPU、Memory 等等
&lt;ul>
&lt;li>&lt;strong>limits: &amp;lt;map[STRING]STRING&amp;gt;&lt;/strong> # 容器可以使用的最大资源
&lt;ul>
&lt;li>&lt;strong>cpu: &lt;!-- raw HTML omitted -->&lt;/strong> # 定义容器的 CPU 限额&lt;/li>
&lt;li>&lt;strong>memory: &lt;!-- raw HTML omitted -->&lt;/strong> # 定义容器的 Memory 限额&lt;/li>
&lt;li>&amp;hellip;&amp;hellip; 其他资源限额&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>requests: &amp;lt;map[STRING]STRING&amp;gt;&lt;/strong> # 容器所需的最小资源。如果 Requests 省略，则默认与 limits 下定义的值保持一直。
&lt;ul>
&lt;li>&lt;strong>cpu: &lt;!-- raw HTML omitted -->&lt;/strong> # 定义容器的 CPU 需求&lt;/li>
&lt;li>&lt;strong>memory: &lt;!-- raw HTML omitted -->&lt;/strong> # 定义容器的 Memory 需求&lt;/li>
&lt;li>&amp;hellip;&amp;hellip; 其他资源需求&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>volumeMounts: &amp;lt;[]Object&amp;gt;&lt;/strong> # 给 Container 挂载在 Pod 中创建的 Volume。Volume 通过下文的 &lt;a href="#HUz4k">Volumes 字段&lt;/a>指定
&lt;ul>
&lt;li>&lt;strong>mountPath: &lt;!-- raw HTML omitted --> # 必须的&lt;/strong>。把 Volume 挂载到容器中的目录上&lt;/li>
&lt;li>**name: &lt;!-- raw HTML omitted --> # 必须的。**要挂载的 Volume 的名称。必须与 &lt;code>spec.volumes.TYPE.volumeName&lt;/code> 字段的值相同，才可以引用到卷。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>initContainers: &amp;lt;[]Object&amp;gt;&lt;/strong> # 属于该 Pod 的初始化容器的列表
该字段中所定义的容器都会比普通 containers 字段定义的容器先启动，并且 initContainer 会按顺序逐一启动，直到它们都启动并且退出之后，普通容器才会启动&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&amp;hellip;&amp;hellip;&lt;/strong> # 与 containers 字段下的字段相同&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>imagePullSecrets: &amp;lt;[]Object&amp;gt;&lt;/strong> # 拉取镜像时使用的私有仓库的信息。
拉取镜像时，如果是私有仓库，则使用该字段指定的 secret 中的信息。实际上就是代替 docker login 命令。 更多信息见官网：&lt;a href="https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod">Specifying imagePullSecrets on a Pod()章节&lt;/a>&lt;/p>
&lt;h3 id="lifecycle生命周期">Lifecycle(生命周期)&lt;/h3>
&lt;p>Pod 生命周期功能详见[《Pod 的生命周期》](/docs/IT学习笔记/10.云原生/2.3.Kubernetes%20 容器编排系统/3.Pod%20 集群最小的工作单元/Pod%20 的生命周期，Probe(探针)，Hook(钩子).md 集群最小的工作单元/Pod 的生命周期，Probe(探针)，Hook(钩子).md)章节
&lt;strong>livenessProbe: &lt;!-- raw HTML omitted --> &lt;strong># 存活性探针，定期检测容器是否存活，容器&lt;/strong>正常启动后&lt;/strong>开始检查。若探针失败则容器将会重启&lt;/p>
&lt;ul>
&lt;li>注意：如果 liveness 探测失败，kubelet 会杀死容器，并且容器会受到其重启策略的约束。如果不提供活性探测，则默认状态为成功。&lt;/li>
&lt;li>**exec: &lt;!-- raw HTML omitted --> # **通过在容器中执行命令作为探针检测方法
&lt;ul>
&lt;li>&lt;strong>exec.command: &amp;lt;[]STRING&amp;gt;&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>httpGET: &lt;!-- raw HTML omitted -->&lt;/strong> # 使用 HTTP 的 GET 的请求作为探针检测方法。&lt;/li>
&lt;li>&lt;strong>tcpSocket: &lt;!-- raw HTML omitted -->&lt;/strong> # 通过检测 TCP 的端口作为探针检测方法。&lt;/li>
&lt;li>&lt;strong>grpc: &lt;!-- raw HTML omitted -->&lt;/strong> #&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>readinessProbe:&lt;!-- raw HTML omitted --> &lt;strong># 就绪状态探针，定期检测容器服务的准备状态，容器&lt;/strong>正常启动前&lt;/strong>开始检查。若探针失败则容器不会变为 Running 状态。&lt;/p>
&lt;ul>
&lt;li>注意：如果就绪探测失败，端点控制器会从与 Pod 匹配的所有服务的端点中删除 Pod 的 IP 地址。初始延迟之前的默认就绪状态为失败。如果不提供就绪探测，则默认状态为成功。&lt;/li>
&lt;li>&lt;strong>&amp;hellip;&amp;hellip; # 略，与 livenessProbe 下的字段一样。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h2 id="volumes卷-相关字段">Volumes(卷) 相关字段&lt;/h2>
&lt;p>&lt;strong>volumes: &amp;lt;[]Object&amp;gt;&lt;/strong> # 给 pod 创建一个 Volume&lt;/p>
&lt;ul>
&lt;li>&lt;strong>TYPE:&lt;/strong> #选择要创建的 volume 的类型，具体支持的类型可以使用 kubectl explain pod.spec.volumes 命令查看
&lt;ul>
&lt;li>&amp;hellip;&amp;hellip; #定义该类型的 volume 相关参数&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>**name: &lt;!-- raw HTML omitted --> # 必须的。**自定义该存储卷的名称&lt;/li>
&lt;/ul>
&lt;h2 id="scheduling调度-相关字段">Scheduling(调度) 相关字段&lt;/h2>
&lt;p>&lt;strong>nodeSelector: &amp;lt;map[string]string&amp;gt;&lt;/strong> # 指明 Node 标签选择器，该 Pod 会运行在具有相同标签的 Node 上
&lt;strong>nodeName: &lt;!-- raw HTML omitted -->&lt;/strong> # Pod 运行在指定 Node 上
&lt;strong>affinity: &lt;!-- raw HTML omitted -->&lt;/strong> # Pod 亲和性调度规则。用法详见[调度器章节](/docs/IT学习笔记/10.云原生/2.3.Kubernetes%20 容器编排系统/5.Scheduling(调度)/让%20Pod%20 运行在指定%20Node%20 上.md Pod 运行在指定 Node 上.md)&lt;/p>
&lt;ul>
&lt;li>**nodeAffinity: &lt;!-- raw HTML omitted --> **# 为 Pod 定义节点亲和性的调度规则
&lt;ul>
&lt;li>**preferredDuringSchedulingIgnoredDuringExecution: &amp;lt;[]Object&amp;gt; # **调度程序将倾向于将 Pod 调度到满足此字段指定的反亲和行要求的节点，但是也可能会选择违反一个或多个该字段指定的调度规则。
&lt;ul>
&lt;li>&lt;strong>preference: &lt;!-- raw HTML omitted --> # 必须的&lt;/strong>。
&lt;ul>
&lt;li>&lt;strong>matchExpressions: &amp;lt;[]OBJECT&amp;gt;&lt;/strong> # 该字段下的内容就是[通用的节点标签选择器字段](/docs/IT学习笔记/10.云原生/2.3.Kubernetes%20 容器编排系统/1.API、Resource(资源)、Object(对象)/API%20 参考/Common%20Definitions(通用定义)/LabelSelector%20 详解.md Definitions(通用定义)/LabelSelector 详解.md)&lt;/li>
&lt;li>&lt;strong>matchFields: &amp;lt;[OBJECT]&amp;gt;&lt;/strong> # 该字段下的内容就是[通用的节点标签选择器字段](/docs/IT学习笔记/10.云原生/2.3.Kubernetes%20 容器编排系统/1.API、Resource(资源)、Object(对象)/API%20 参考/Common%20Definitions(通用定义)/LabelSelector%20 详解.md Definitions(通用定义)/LabelSelector 详解.md)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>weight: &lt;!-- raw HTML omitted --> # 必须的&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>**requiredDuringSchedulingIgnoredDuringExecution: &lt;!-- raw HTML omitted --> # **如果在调度时未满足该字段指定的反亲和性要求，则不会将 pod 调度到该节点上。
&lt;ul>
&lt;li>&lt;strong>nodeSelectorTerms: &amp;lt;[]OBJECT&amp;gt; # 必须的&lt;/strong>。节点选择器列表。列表中元素之间是“或”的关系
&lt;ul>
&lt;li>&lt;strong>matchExpressions: &amp;lt;[]OBJECT&amp;gt;&lt;/strong> # 该字段下的内容就是[通用的节点标签选择器字段](/docs/IT学习笔记/10.云原生/2.3.Kubernetes%20 容器编排系统/1.API、Resource(资源)、Object(对象)/API%20 参考/Common%20Definitions(通用定义)/LabelSelector%20 详解.md Definitions(通用定义)/LabelSelector 详解.md)&lt;/li>
&lt;li>&lt;strong>matchFields: &amp;lt;[OBJECT]&amp;gt;&lt;/strong> # 该字段下的内容就是[通用的节点标签选择器字段](/docs/IT学习笔记/10.云原生/2.3.Kubernetes%20 容器编排系统/1.API、Resource(资源)、Object(对象)/API%20 参考/Common%20Definitions(通用定义)/LabelSelector%20 详解.md Definitions(通用定义)/LabelSelector 详解.md)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>podAffinity&lt;/strong> (&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#PodAffinity">PodAffinity&lt;/a>)# 描述 pod 亲和性的调度规则(e.g.将此 Pod 与其他一些 Pod 共同定位在同一节点、区域等中)。
&lt;ul>
&lt;li>&amp;hellip;&amp;hellip;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>podAntiAffinity: &lt;!-- raw HTML omitted -->&lt;/strong> (&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#PodAntiAffinity">PodAntiAffinity&lt;/a>)描述 pod 反亲和性的调度规则(e.g. 避免将此 Pod 放在与其他某些 Pod 相同的节点、区域等中)
&lt;ul>
&lt;li>**preferredDuringSchedulingIgnoredDuringExecution: &amp;lt;[]Object&amp;gt; # **调度程序将倾向于将 Pod 调度到满足此字段指定的反亲和行要求的节点，但是也可能会选择违反一个或多个该字段指定的调度规则。
&lt;ul>
&lt;li>&lt;strong>preference: &lt;!-- raw HTML omitted --> # 必须的&lt;/strong>。
&lt;ul>
&lt;li>&lt;strong>matchExpressions: &amp;lt;[]OBJECT&amp;gt;&lt;/strong> # 该字段下的内容就是[通用的标签选择器字段](Label%20and%20Selector(标签和选择器).md and Selector(标签和选择器).md)&lt;/li>
&lt;li>&lt;strong>matchFields: &amp;lt;[OBJECT]&amp;gt;&lt;/strong> # 该字段下的内容就是[通用的标签选择器字段](Label%20and%20Selector(标签和选择器).md and Selector(标签和选择器).md)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>weight: &lt;!-- raw HTML omitted --> # 必须的&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>**requiredDuringSchedulingIgnoredDuringExecution: &amp;lt;[]Object&amp;gt; # **如果在调度时未满足该字段指定的反亲和性要求，则不会将 pod 调度到该节点上。
&lt;ul>
&lt;li>&lt;strong>labelSelector: &lt;!-- raw HTML omitted -->&lt;/strong> # 该字段下的内容就是[通用的标签选择器字段](Label%20and%20Selector(标签和选择器).md and Selector(标签和选择器).md)&lt;/li>
&lt;li>**namespaceSelector: &lt;!-- raw HTML omitted --> # **该字段下的内容就是[通用的标签选择器字段](Label%20and%20Selector(标签和选择器).md and Selector(标签和选择器).md)&lt;/li>
&lt;li>&lt;strong>namespaces: &amp;lt;[]STING&amp;gt;&lt;/strong> # 。&lt;code>默认值：该 Pod 所在的名称空间&lt;/code>&lt;/li>
&lt;li>&lt;strong>topologyKey: &lt;!-- raw HTML omitted --> # 必须的&lt;/strong>。想要匹配的 Node 标签的键&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>tolerations: &amp;lt;[]Object&amp;gt;&lt;/strong> # 定义 Pod 容忍污点的容忍度。用法详见[调度器章节](/docs/IT学习笔记/10.云原生/2.3.Kubernetes%20 容器编排系统/5.Scheduling(调度)/让%20Pod%20 运行在指定%20Node%20 上.md Pod 运行在指定 Node 上.md)&lt;/p>
&lt;ul>
&lt;li>&amp;hellip;&amp;hellip;&lt;/li>
&lt;/ul>
&lt;h2 id="lifecycle生命周期-相关字段">Lifecycle(生命周期) 相关字段&lt;/h2>
&lt;p>&lt;strong>restartPolicy: &lt;!-- raw HTML omitted -->&lt;/strong> # Pod 中容器失败后的重启策略，&lt;code>默认值：Always&lt;/code>
STRING 可用的值有：Always、OnFailure、Never&lt;/p>
&lt;h2 id="hostname-and-name-resolution主机名和域名解析-相关字段">Hostname and Name resolution(主机名和域名解析) 相关字段&lt;/h2>
&lt;p>&lt;strong>dnsConfig: &lt;!-- raw HTML omitted -->&lt;/strong> #&lt;/p>
&lt;p>&lt;strong>dnsPolicy: &lt;!-- raw HTML omitted -->&lt;/strong> # pod 的域名解析策略。&lt;code>默认值：ClusterFirst&lt;/code>
可用值有：&lt;/p>
&lt;ul>
&lt;li>ClusterFirstWithHostNet&lt;/li>
&lt;li>ClusterFirst&lt;/li>
&lt;li>None&lt;/li>
&lt;/ul>
&lt;h2 id="hosts-namespaces容器如何使用宿主机中的名称空间-相关配置">Hosts namespaces(容器如何使用宿主机中的名称空间) 相关配置&lt;/h2>
&lt;p>&lt;strong>hostNetwork: &lt;!-- raw HTML omitted -->&lt;/strong> # 是否让 Pod 中的容器使用主机的网络名称空间。&lt;code>默认值：false&lt;/code>&lt;/p>
&lt;h2 id="service-account服务账户-相关字段">Service account(服务账户) 相关字段&lt;/h2>
&lt;p>&lt;strong>serviceAccountName: &lt;!-- raw HTML omitted -->&lt;/strong> # 容器所使用 ServiceAccount。&lt;/p>
&lt;h2 id="security-context容器安全环境-相关字段">Security context(容器安全环境) 相关字段&lt;/h2>
&lt;p>&lt;strong>securityContext: &lt;!-- raw HTML omitted --> 和 .spec.container.securityContext: &lt;!-- raw HTML omitted -->&lt;/strong>
&lt;code>securityContext&lt;/code> 字段用于配置如何安全得运行 Pod，比如以 非特权用户运行容器、SELinux 等等。Pod 安全配置内容，在 [Security Context(安全环境) 文章](/docs/IT学习笔记/10.云原生/2.3.Kubernetes%20 容器编排系统/3.Pod%20 集群最小的工作单元/Security%20Context(安全环境).md 集群最小的工作单元/Security Context(安全环境).md)中有更详细的描述。
注意：&lt;code>.spec.securityContext&lt;/code> 字段属于 Pod 级别的安全配置，在 &lt;code>.spec.containers&lt;/code> 字段下，还有一个 securityContext 字段，&lt;code>.spec.containers.securityContext&lt;/code> 字段属于 Container 级别的安全配置，该字段的优先级要高于 &lt;code>.spec.securityContext&lt;/code>。&lt;/p>
&lt;ul>
&lt;li>**fsGroup: &lt;!-- raw HTML omitted --> **# 功能待确认。&lt;/li>
&lt;li>&lt;strong>runAsNonRoot: &lt;!-- raw HTML omitted -->&lt;/strong> # 容器内的进程是否不以 root 身份运行。&lt;code>默认值：false&lt;/code>。
&lt;ul>
&lt;li>若为 true，则必须指定 runAsUser 字段，除非构建镜像时已经指定了进程运行的 UID。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>runAsUser: &lt;!-- raw HTML omitted -->&lt;/strong> # 指定运行容器内进程的 UID 为 INTEGER&lt;/li>
&lt;/ul>
&lt;h2 id="其他类别的字段">其他类别的字段&lt;/h2>
&lt;h1 id="status-object">status: &lt;!-- raw HTML omitted -->&lt;/h1>
&lt;h1 id="pod-manifest-样例">Pod Manifest 样例&lt;/h1>
&lt;p>以下是最简单最基本的 Pod 模板，具体 Pod 中可以实现的功能以及这些功能应该使用哪些 yaml 里的字段详见以下几处&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kubernetes.io/docs/tasks/configure-pod-container/">Configure Pods and Containers(配置 Pod 和 Container) &lt;/a>章节下面的所有内容；每种可以在 Pod 中配置的功能，都是一小章节&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/docs/tasks/inject-data-application/">Inject Data Into Applications(将数据注入应用程序)&lt;/a> 章节&lt;/li>
&lt;/ul>
&lt;h2 id="简单示例">简单示例&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Pod&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">myapp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">myapp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">containers&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">myapp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">lchdzh/network-test&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Statefulset Manifest 详解</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/1.apiresource%E8%B5%84%E6%BA%90object%E5%AF%B9%E8%B1%A1/api-%E5%8F%82%E8%80%83/%E5%B7%A5%E4%BD%9C%E8%B4%9F%E8%BD%BD%E8%B5%84%E6%BA%90/statefulset-manifest-%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/1.apiresource%E8%B5%84%E6%BA%90object%E5%AF%B9%E8%B1%A1/api-%E5%8F%82%E8%80%83/%E5%B7%A5%E4%BD%9C%E8%B4%9F%E8%BD%BD%E8%B5%84%E6%BA%90/statefulset-manifest-%E8%AF%A6%E8%A7%A3/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.21/#statefulset-v1-apps">API 文档单页&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/stateful-set-v1/">官方文档，参考-KubernetesAPI-工作负载资源-StatefulSet&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="apiversion-appsv1">apiVersion: apps/v1&lt;/h1>
&lt;h1 id="kind-statefulset">kind: StatefulSet&lt;/h1>
&lt;h1 id="metadata">metadata:&lt;/h1>
&lt;p>Statefulset 对象的元数据，该字段内容详见通用定义的 [ObjectMeta](/docs/IT学习笔记/10.云原生/2.3.Kubernetes%20 容器编排系统/1.API、Resource(资源)、Object(对象)/API%20 参考/Common%20Definitions(通用定义).md Definitions(通用定义).md)&lt;/p>
&lt;h1 id="sepc--指明该-statefulset-的规格">sepc: # 指明该 StatefulSet 的规格&lt;/h1>
&lt;p>spec 用来描述一个 Statefulset 应该具有的属性。也就是用来定义 Statefulset 的行为规范。一共分为如下几类&lt;/p>
&lt;ul>
&lt;li>描述 Statefulset 类型的控制器的行为&lt;/li>
&lt;li>描述 Statefulset 控制器所关联的 Pod 的属性。&lt;/li>
&lt;/ul>
&lt;h2 id="控制器行为">控制器行为&lt;/h2>
&lt;p>&lt;strong>podManagementPolicy: &lt;!-- raw HTML omitted -->&lt;/strong> # Pod 管理策略。&lt;code>默认值：OrderedReady&lt;/code>
此配置只影响扩、缩 Pod 的行为，更新 Pod 不受此配置控制。可用的值有以下两个：&lt;/p>
&lt;ul>
&lt;li>OrderedReady # 按照 Pod 的次序依次创建每个 Pod 并等待 Ready 之后才创建后面的 Pod&lt;/li>
&lt;li>Parallel #并行创建或删除 Pod（不等待前面的 Pod Ready 就开始创建所有的 Pod）&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>replicas: &lt;!-- raw HTML omitted -->&lt;/strong> # 该控制器运行的 Pod 数量，&lt;code>默认值：1&lt;/code>。
&lt;strong>selector: &lt;!-- raw HTML omitted --> # 必须的&lt;/strong>。Pod 的选择器，根据标签匹配要控制的 Pod。必须与 &lt;code>template.metadata.labels&lt;/code> 的内容匹配。&lt;/p>
&lt;ul>
&lt;li>该字段内容详见通用定义的[ LabelSelector](/docs/IT学习笔记/10.云原生/2.3.Kubernetes%20 容器编排系统/1.API、Resource(资源)、Object(对象)/API%20 参考/Common%20Definitions(通用定义)/LabelSelector%20 详解.md Definitions(通用定义)/LabelSelector 详解.md)。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>serviceName: &lt;!-- raw HTML omitted --> # 必须的&lt;/strong>。serviceName 是管理此 StatefulSet 的服务的名称。
该服务必须在 StatefulSet 之前存在，并且负责该集合的网络标识。 Pod 会遵循以下格式获取 DNS 或 hostname：pod-specific-string.serviceName.default.svc.cluster.local，其中&amp;quot;pod-specific-string&amp;quot;由 StatefulSet 控制器管理。
说白了，就是该字段指定的 service 名称将会自动生成子域名(而只有 headless 类型的 svc 才具有子域名)，假如现在有如下 pod 和 svc&lt;/p>
&lt;pre>&lt;code>root@lichenhao:~/projects/ehualu/ehualu/cloud_storage/monitoring/manifests# kubectl get pod -n cs-monitoring -o wide
NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES
cs-prometheus-0 2/2 Running 0 4m15s 10.244.4.54 node-2.bj-cs &amp;lt;none&amp;gt; &amp;lt;none&amp;gt;
cs-prometheus-1 2/2 Running 0 4m15s 10.244.5.55 node-3.bj-cs &amp;lt;none&amp;gt; &amp;lt;none&amp;gt;
root@lichenhao:~/projects/ehualu/ehualu/cloud_storage/monitoring/manifests# kubectl get svc -n cs-monitoring
NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE
cs-prometheus NodePort 10.98.204.140 &amp;lt;none&amp;gt; 9090:31001/TCP,9091:31002/TCP 5d
cs-prometheus-headless ClusterIP None &amp;lt;none&amp;gt; 9090/TCP 35s
&lt;/code>&lt;/pre>
&lt;p>我们可以发现，&lt;code>cs-prometheus-0.cs-prometheus-headless.cs-monitoring.svc&lt;/code> 这个域名将会固定解析 &lt;code>10.244.4.54&lt;/code>。而 &lt;code>cs-prometheus-1.cs-prometheus-headless.cs-monitoring.svc&lt;/code> 这个域名将会固定解析到 &lt;code>10.244.5.55&lt;/code>。而两个 svc 的域名，则是正常的解析结果，headless 是轮询解析到 pod 的 IP，而正常的 svc 直接解析到 10.98.204.140。&lt;/p>
&lt;p>&lt;strong>volumeClaimTemplates: &amp;lt;[]Object&amp;gt;&lt;/strong> # PVC 模板。用于从指定的 storageclass 中申请 PVC，可直接当做 volume，在 volumeMonut 中使用
注意：通过 volumeClaimTemplates 定义的 PVC 在 statefulset 删除后不会自动删除，详见：&lt;a href="https://github.com/kubernetes/kubernetes/issues/55045">官方 issue&lt;/a>&lt;/p>
&lt;ul>
&lt;li>metadata:
&lt;ul>
&lt;li>name: STRING # 指定 volumeClaimTemplates 的名称，该名称用于在 volumeMount 时使用&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>spec:
&lt;ul>
&lt;li>accessModes: # 指定该 volume 的访问模式
&lt;ul>
&lt;li>ReadWriteOnce # 样例为读写模式&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>resources: # 指定存储资源的申请量，样例为需求 30G
&lt;ul>
&lt;li>requests:
&lt;ul>
&lt;li>storage: 30Gi&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>storageClassName: STRING # 指定要从哪个 storageclass 中申请资源&lt;/li>
&lt;li>volumeMode: Filesystem # 指定卷模式，样例为 Filesystem&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="pod-属性">Pod 属性&lt;/h2>
&lt;h3 id="template-必须的定义-pod-的模板使用-pod-类型的-metadata-和-spec-字段">template: #必须的。定义 Pod 的模板,使用 Pod 类型的 metadata 和 spec 字段。&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>metadata:&lt;/strong> #与 pod 资源定义的内容基本一致
&lt;ul>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>spec:&lt;/strong> #与 pod 资源定义的内容基本一致
&lt;ul>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item></channel></rss>