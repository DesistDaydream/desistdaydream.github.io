<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – kubectl 命令行工具</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/kubernetes-%E7%AE%A1%E7%90%86/kubectl-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</link><description>Recent content in kubectl 命令行工具 on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/kubernetes-%E7%AE%A1%E7%90%86/kubectl-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: config 子命令，修改kubeconfig文件</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/kubernetes-%E7%AE%A1%E7%90%86/kubectl-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/config-%E5%AD%90%E5%91%BD%E4%BB%A4%E4%BF%AE%E6%94%B9kubeconfig%E6%96%87%E4%BB%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/kubernetes-%E7%AE%A1%E7%90%86/kubectl-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/config-%E5%AD%90%E5%91%BD%E4%BB%A4%E4%BF%AE%E6%94%B9kubeconfig%E6%96%87%E4%BB%B6/</guid><description>
&lt;h1 id="syntax语法">Syntax(语法)&lt;/h1>
&lt;p>&lt;strong>kubectl config SUBCOMMAND [options] #使用子命令修改 kubeconfig 文件&lt;/strong>&lt;/p>
&lt;p>Note：该命令的功能详见 [认证与授权章节中的 KubeConfig 文件详解](✏IT 学习笔记/☁️10.云原生/2.3.Kubernetes%20 容器编排系统/7.API%20 访问控制/1.Authenticating(认证)/User%20Account%20 详解.md 访问控制/1.Authenticating(认证)/User Account 详解.md)&lt;/p>
&lt;p>SUBCOMMAND 包括：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>current-context&lt;/strong> # 显示当前上下文 Displays the current-context&lt;/li>
&lt;li>&lt;strong>delete-cluster&lt;/strong> # Delete the specified cluster from the kubeconfig&lt;/li>
&lt;li>&lt;strong>delete-context&lt;/strong> # 从 kubeconfig 文件中删除指定的上下文&lt;/li>
&lt;li>&lt;strong>get-clusters&lt;/strong> # 显示在 kubeconfig 中已经定义的 cluster 信息。Display clusters defined in the kubeconfig&lt;/li>
&lt;li>&lt;strong>get-contexts&lt;/strong> # 显示在 kubeconfig 中的上下文列表。每行的信息表示包括以*表示当前使用的 context，context 名称，cluster 与 authinfo(认证信息即用户名)，名称空间&lt;/li>
&lt;li>**rename-context **# Renames a context from the kubeconfig file.&lt;/li>
&lt;li>&lt;strong>set&lt;/strong> # 在 KubeConfig 文件中设置一个单独的值。Sets an individual value in a kubeconfig file&lt;/li>
&lt;li>&lt;strong>set-cluster&lt;/strong> # 在 kubeconfig 中设定集群条目。&lt;/li>
&lt;li>**set-context **# 在 kubeconfig 中设定上下文条目。Sets a context entry in kubeconfig&lt;/li>
&lt;li>&lt;strong>set-credentials&lt;/strong> # 在 kubeconfig 中设定用户凭证。&lt;/li>
&lt;li>**unset **# 取消在 KubeConfig 文件中设置的一个单独的值。Unsets an individual value in a kubeconfig file&lt;/li>
&lt;li>**use-context **# 在 kubeconfig 中设定当前上下文(即使用哪个用户操作客户端)。&lt;/li>
&lt;li>**view **# 显示已经合并的 KubeConifg 文件或一个指定的 KubeConfig 文件。Display merged kubeconfig settings or a specified kubeconfig file。&lt;/li>
&lt;/ul>
&lt;h2 id="options">OPTIONS&lt;/h2>
&lt;ol>
&lt;li>--kubeconfig=/PATH/FILE #指明要操作的 KubeConfig 文件&lt;/li>
&lt;/ol>
&lt;h1 id="subcommand子命令">SubCommand(子命令)&lt;/h1>
&lt;h2 id="set-cluster--在-kubeconfig-文件中设置一个集群条目sets-a-cluster-entry-in-kubeconfig">set-cluster # 在 kubeconfig 文件中设置一个集群条目。Sets a cluster entry in kubeconfig&lt;/h2>
&lt;p>&lt;strong>kubectl config set-cluster NAME [&amp;ndash;server=server] [&amp;ndash;certificate-authority=PATH/TO/CERTIFICATE/AUTHORITY] [&amp;ndash;insecure-skip-tls-verify=true] [OPTIONS]&lt;/strong> #&lt;/p>
&lt;p>OPTIONS&lt;/p>
&lt;ul>
&lt;li>--embed-certs={false|true} #将&amp;ndash;certificate-authority 中指定的证书嵌入 kubeconfig 文件中。i.e.将证书内容使用 base64 编码后存入，默认为 false，即不读取内容进行编码，而是直接将路径写到 kubeconfig 文件中&lt;/li>
&lt;/ul>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>kubectl config set-cluster kubernetes \&lt;/li>
&lt;li>--certificate-authority=/etc/kubernetes/pki/ca.crt \&lt;/li>
&lt;li>--embed-certs=true \&lt;/li>
&lt;li>--server=192.168.10.10:6443 \&lt;/li>
&lt;li>--kubeconfig=./lch-config #为 lch-config 的 kubeconfig 文件设定集群信息，指定证书为/etc/kubernetes/pki/ca.crt，开启嵌入式认证，指定集群 api-server 的 ip 和 port。&lt;/li>
&lt;/ul>
&lt;h2 id="set-context--设定上下文确立-user-与-cluster-的绑定关系与上下文的-name">set-context # 设定上下文，确立 user 与 cluster 的绑定关系与上下文的 name&lt;/h2>
&lt;p>&lt;strong>kubectl config set-context [NAME | &amp;ndash;current] [&amp;ndash;cluster=cluster_nickname] [&amp;ndash;user=user_nickname] [&amp;ndash;namespace=namespace] [options]&lt;/strong>&lt;/p>
&lt;p>EXAMPLE&lt;/p>
&lt;ol>
&lt;li>kubectl config set-context lch@kubernetes &amp;ndash;cluster=kubernetes &amp;ndash;user=lch&lt;/li>
&lt;li>kubectl config set-context dashboard-admin@kubernetes &amp;ndash;cluster=kubernetes &amp;ndash;user=dashboard-admin &amp;ndash;kubeconfig=/root/dashbord-admin.conf #&lt;/li>
&lt;/ol>
&lt;h2 id="set-credentials--在-kubeconfig-中设置凭证即设置用户的认证以便让-kubernetes-集群认识到该用户ie创建-user-account">set-credentials # 在 kubeconfig 中设置凭证，即设置用户的认证，以便让 kubernetes 集群认识到该用户。i.e.创建 User Account&lt;/h2>
&lt;p>&lt;strong>kubectl config set-credentials NAME [&amp;ndash;client-certificate=Path/to/certfile] [&amp;ndash;client-key=Path/to/keyfile] [&amp;ndash;token=bearer_token] [&amp;ndash;username=BasicUser] [&amp;ndash;password=BasicPassword] [&amp;ndash;auth-provider=provider_name] [&amp;ndash;auth-provider-arg=key=value] [OPTIONS]&lt;/strong>
通过证书、token、用户密码或者认证提供者键值对来设定一个用户凭证。credential 的意思就是“一个人的背景的资格，成就，个人品质或方面，通常用于表明他们适合某事”。在这里就是这个 user 的证书或者 token 等以便在与集群交互时进行验证&lt;/p>
&lt;p>OPTIONS&lt;/p>
&lt;ul>
&lt;li>--embed-certs=ture|false #在 kubeconfig 中嵌入证书/私钥，即变成非明文的方式储存&lt;/li>
&lt;/ul>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>kubectl config set-credentials lch &amp;ndash;client-certificate=./lch.crt &amp;ndash;client-key=./lch.key &amp;ndash;embed-certs #通过使用证书与私钥的方式设定名为 lch 的用户&lt;/li>
&lt;li>kubectl config set-credentials dashboard-admin &amp;ndash;token=$DASH_TOCKEN &amp;ndash;kubeconfig=/root/dashbord-admin.conf #使用$DASH_TOCKEN 中的 token 来作为 user 的凭证&lt;/li>
&lt;/ul>
&lt;h2 id="use-context--设置当前-current-context-字段当前所用的使用的上下文">use-context # 设置当前 current-context 字段(当前所用的使用的上下文)&lt;/h2>
&lt;p>&lt;strong>kubectl config use-context CONTEXT_NAME [OPTIONS]&lt;/strong>
EXAMPLE&lt;/p>
&lt;ul>
&lt;li>kubectl config use-context dashboard-admin@kubernetes &amp;ndash;kubeconfig=/root/dashbord-admin.conf #&lt;/li>
&lt;/ul>
&lt;h2 id="view--显示一个-kubeconfig-文件的信息">view # 显示一个 kubeconfig 文件的信息。&lt;/h2>
&lt;p>&lt;strong>kubectl config view [FLAGS] [OPTIONS]&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>[&lt;span style="color:#ae81ff">root@master-1 ~]# kubectl config view&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">clusters&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">cluster&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">certificate-authority-data&lt;/span>: &lt;span style="color:#ae81ff">DATA+OMITTED&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">server&lt;/span>: &lt;span style="color:#ae81ff">https://k8s-api.bj-net.ehualu.local:6443&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">kubernetes&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">contexts&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">context&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">cluster&lt;/span>: &lt;span style="color:#ae81ff">kubernetes&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">user&lt;/span>: &lt;span style="color:#ae81ff">kubernetes-admin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">kubernetes-admin@kubernetes&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">current-context&lt;/span>: &lt;span style="color:#ae81ff">kubernetes-admin@kubernetes&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Config&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">preferences&lt;/span>: {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">users&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">kubernetes-admin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">user&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">client-certificate-data&lt;/span>: &lt;span style="color:#ae81ff">REDACTED&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">client-key-data&lt;/span>: &lt;span style="color:#ae81ff">REDACTED&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>OPTIONS&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&amp;ndash;raw&lt;/strong> # 显示原始字节数据&lt;/li>
&lt;li>&lt;strong>&amp;ndash;minify&lt;/strong> # 只显示当前 context 的信息。&lt;/li>
&lt;/ul>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>显示用户名为 user-2c2f24ck5f 的证书数据
&lt;ul>
&lt;li>&lt;strong>kubectl config view -o jsonpath=&amp;rsquo;{.users[?(@.name == &amp;ldquo;user-2c2f24ck5f&amp;rdquo;)].user.client-certificate-data}&amp;rsquo; &amp;ndash;raw&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>root@lichenhao:~# kubectl config view -o jsonpath&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;{.users[?(@.name == &amp;#34;user-2c2f24ck5f&amp;#34;)].user.client-certificate-data}&amp;#39;&lt;/span> --raw
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGVENDQWYyZ0F3SUJBZ0lJSlpaanZuVXlhd1l3RFFZSktvWklodmNOQVFFTEJRQXdGVEVUTUJFR0ExVUUKQXhNS2EzVmlaWEp1WlhSbGN6QWdGdzB5TVRBeU1qTXhNakl3TWpaYUdBOHlNVEl4TURFek1ERXlNakF5TjFvdwpOREVYTUJVR0ExVUVDaE1PYzNsemRHVnRPbTFoYzNSbGNuTXhHVEFYQmdOVkJBTVRFR3QxWW1WeWJtVjBaWE10CllXUnRhVzR3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRRDdXK1lRVlZ1SVFmd2gKcnNRNWhTQ3B2em1NdkRMc0x4SG9CeDNOWXEwNWhIMXlmR1lLWXpmMlRQM01TaS9HUUVJZkZicEFLSjdQODB0Qgp3UnVNS2s4TEdWcVI3d2paT0p0QjJRUnFhWG56NzJzS0NyanI5TFJWazBKWE9ZT3hCVzBmYnV3azdxQkFzdkJhCmdhVG1sQnJpZEJEQUwvYmRnbUwyd3EzdGF5RXJOY1g3WmZoNVo0UEFTUjJDQXJiVUdVZU9UN0xHNTEwWGd3K1kKa2NUYU00WS9oS0hOYnlyL2JmdzhjNU5KYjc0emQrMGhYWVpHK004bFRCRTRxNTlaWERvTkY4d2hEOUZkRmZCbwowYXk0ZStWOTBGK0lDaXk4bmlrOERKQTQ4cGJLSmNBaUUySkxKOXdkbC9jMnIrTU55eTIxeENoRmt3YktvVk5iCnRQYXBlZ2t0QWdNQkFBR2pTREJHTUE0R0ExVWREd0VCL3dRRUF3SUZvREFUQmdOVkhTVUVEREFLQmdnckJnRUYKQlFjREFqQWZCZ05WSFNNRUdEQVdnQlRXVVpJYjNBOERJMTV2T3lKSGgrVEZuYi8yRlRBTkJna3Foa2lHOXcwQgpBUXNGQUFPQ0FRRUFoRTZuL3JFTDVJRnd6QWE4ZkRza2p6ZXdpeVZCRDBRdlVrcGFkcmI1STNNVnBhcGJDVklyCm04dWIrMU53L2hMZ1g0VExDWHUyRk1zeUphY3p1YWMwaHpOS2ozOHdESlROc0VER09rZVhrRnRIMkkvZFhPODkKaE44K0NaSVZ1MklEaXljODA5dXNwVEZpOHRzYnBnVkxmUTBuNjBsaEdhN2V3TWp1MkVNY3R6U29KcWJGTFBVNgoxTSszeHZQdHJPRFV6djlYdjd6QWVwaUVLRUdtNmhkUndJMFl0dGtqY2N0TW0yZHY1VEFFSi9PSjBIajVtLzZoCldZWWRzdlREWDluMmFUZktQNnZIblZBcmJSZ1I2aU5POEhuYkE2dlNVWXg1em1WMjM2cFByNUtKUm1yaUFha0UKTUtnd0hmYmRVSDhLRGpCSFpKak42bVBZUjFNQmxyektzUT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: get 子命令</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/kubernetes-%E7%AE%A1%E7%90%86/kubectl-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/get-%E5%AD%90%E5%91%BD%E4%BB%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/kubernetes-%E7%AE%A1%E7%90%86/kubectl-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/get-%E5%AD%90%E5%91%BD%E4%BB%A4/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/DlYcJNNCc9C_YUZlvADuMQ">5 个冷门但非常实用的 Kubectl 使用技巧&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>展示对象的信息，get 获得的是该对象的个性信息，describe 获得的是该对象的集群信息&lt;/p>
&lt;h1 id="syntax语法">Syntax(语法)&lt;/h1>
&lt;p>&lt;strong>kubectl get (TYPE[.VERSION][.GROUP] [NAME | -l label] | TYPE[.VERSION][.GROUP]/NAME &amp;hellip;) [FLAGS]&lt;/strong>&lt;/p>
&lt;p>&lt;strong>FLAGS&lt;/strong>
Note：在 kubectl 命令中的 全局 flags 中还有很多有用的 flags 可以用于 get 子命令。比如 -v 指定 debug 等级，-n 指定要操作的 namespace，等等&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-A, &amp;ndash;all-namespaces&lt;/strong> # 列出在所有名称空间中的对象。&lt;/li>
&lt;li>--allow-missing-template-keys=true: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.&lt;/li>
&lt;li>--chunk-size=500: Return large lists in chunks rather than all at once. Pass 0 to disable. This flag is beta and may change in the future.&lt;/li>
&lt;li>&lt;strong>&amp;ndash;field-selector=&amp;rsquo;&amp;rsquo;&lt;/strong> # 根据一个或多个资源字段的值&lt;a href="https://kubernetes.io/zh/docs/concepts/overview/working-with-objects/kubernetes-objects">筛选 Kubernetes 对象&lt;/a>。支持 &amp;lsquo;=&amp;rsquo;, &amp;lsquo;==&amp;rsquo;, and &amp;lsquo;!=&amp;rsquo;.(比如 &amp;ndash;field-selector key1=value1,key2=value2)。注意，仅支持部分字段筛选&lt;/li>
&lt;li>-f, &amp;ndash;filename=[]: Filename, directory, or URL to files identifying the resource to get from a server.&lt;/li>
&lt;li>--ignore-not-found=false: If the requested object does not exist the command will return exit code 0.&lt;/li>
&lt;li>&lt;strong>-k, &amp;ndash;kustomize=&lt;!-- raw HTML omitted -->&lt;/strong> # 处理指定的 Kustomize 目录。这个标志不能与 -f 或 -R 同时使用。&lt;/li>
&lt;li>&lt;strong>-L, &amp;ndash;label-columns=[]&lt;/strong> # 显示所有展示出的对象具有 KEY 这个键所对应的值(KEY=VAL，显示那个 VAL)Accepts a comma separated list of labels that are going to be presented as columns. Names are case-sensitive. You can also use multiple flag options like -L label1 -L label2&amp;hellip;&lt;/li>
&lt;li>&lt;strong>&amp;ndash;no-headers&lt;/strong> # 当使用 默认的 或者 custom-column 格式输出信息时，不显示标题(标题就是 NAME 那一行)。&lt;/li>
&lt;li>**-o, &amp;ndash;output=FORMAT **# 指定输出信息的输出格式
&lt;ul>
&lt;li>FORMAT 包括 json|yaml|wide|name|custom-columns=&amp;hellip;|custom-columns-file=&amp;hellip;|go-template=&amp;hellip;|go-template-file=&amp;hellip;|jsonpath=&amp;hellip;|jsonpath-file=&amp;hellip;
&lt;ul>
&lt;li>官方说明：&lt;a href="https://kubernetes.io/docs/reference/kubectl/overview/#formatting-output">https://kubernetes.io/docs/reference/kubectl/overview/#formatting-output&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>yaml | json # 输出 yaml 或 json 格式的信息&lt;/li>
&lt;li>wide # 多显示该对象的 IP 和所在 NODE 两个信息&lt;/li>
&lt;li>name #仅打印对象名称，而不打印其他任何内容。Note：资源名称格式为：资源类型/名字&lt;/li>
&lt;li>custom-columns=&lt;!-- raw HTML omitted -->:&lt;!-- raw HTML omitted --> # 自定义以一列一列的形式显示列表。参考：[http://kubernetes.io/docs/user-guide/kubectl-overview/#custom-columns]&lt;/li>
&lt;li>golang template[http://golang.org/pkg/text/template/#pkg-overview]&lt;/li>
&lt;li>jsonpath template # 使用 json 格式里的路径来查看某个字段的状态，样例如下，&lt;code>.&lt;/code>符号是字符分隔符。用法详见&lt;a href="https://kubernetes.io/docs/reference/kubectl/jsonpath/">官方文档&lt;/a>
&lt;ul>
&lt;li>e.g.-o jsonpath=&amp;quot;{.status.phase}&amp;quot;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>--output-watch-events=false: Output watch event objects when &amp;ndash;watch or &amp;ndash;watch-only is used. Existing objects are output as initial ADDED events.&lt;/li>
&lt;li>&lt;strong>&amp;ndash;raw &lt;!-- raw HTML omitted -->&lt;/strong> #从 API Server 请求原始 URI。显示指定 URL Path 路径下的原始 URI 信息，默认输出为 JSON 格式&lt;/li>
&lt;li>-R, &amp;ndash;recursive=false: Process the directory used in -f, &amp;ndash;filename recursively. Useful when you want to manage related manifests organized within the same directory.&lt;/li>
&lt;li>&lt;strong>-l, &amp;ndash;selector=KEY[=VAL,KEY2=VAL2,&amp;hellip;]&lt;/strong> # 根据标签对输出进行过滤。可以只指定标签中的 key，或者指定多个 key，或者指定 key 不匹配的 value&lt;/li>
&lt;li>e.g. #-l key1=value1,key2=value2,Note:k/v 中的 = 还可以使用 == 和 !=&lt;/li>
&lt;li>--server-print=true: If true, have the server return the appropriate table output. Supports extension APIs and CRDs.&lt;/li>
&lt;li>--show-kind=false # 列出所请求对象的资源类型。&lt;/li>
&lt;li>&lt;strong>&amp;ndash;show-labels&lt;/strong> # 输出信息时，在最后一列显示该对象的 label。(默认不显示)&lt;/li>
&lt;li>--sort-by=&amp;rsquo;&amp;rsquo;: If non-empty, sort list types using this field specification. The field specification is expressed as a JSONPath expression (e.g. &amp;lsquo;{.metadata.name}&amp;rsquo;). The field in the API resource specified by this JSONPath expression must be an integer or a string.&lt;/li>
&lt;li>--template=&amp;rsquo;&amp;rsquo;: Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].&lt;/li>
&lt;li>-w, &amp;ndash;watch # 实时监控。类似于在命令前加 wathch。只有当资源状态变化时，才会显示&lt;/li>
&lt;li>--watch-only # Watch for changes to the requested object(s), without listing/getting first.&lt;/li>
&lt;/ul>
&lt;h1 id="example">EXAMPLE&lt;/h1>
&lt;ul>
&lt;li>获取原始 URL，显示 &lt;code>/&lt;/code> 下的资源
&lt;ul>
&lt;li>kubectl get &amp;ndash;raw /&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>查看所有名称空间下的所有资源
&lt;ul>
&lt;li>kubectl get all -A&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>显示 myapp-pod 这个 pod 的信息
&lt;ul>
&lt;li>kubectl get pod/myapp-pod&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>自定义显示内容，仅显示 node 名字 和 标签
&lt;ul>
&lt;li>kubectl get nodes -o custom-columns=NAME:.metadata.name,LABELS:.metadata.labels&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>root@master-test-1 .kube&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># kubectl get nodes -o custom-columns=NAME:.metadata.name,LABELS:.metadata.labels&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NAME LABELS
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>master-test-1 map&lt;span style="color:#f92672">[&lt;/span>beta.kubernetes.io/arch:amd64 beta.kubernetes.io/os:linux kubernetes.io/arch:amd64 kubernetes.io/hostname:master-test-1 kubernetes.io/os:linux node-role.kubernetes.io/controlplane:true node-role.kubernetes.io/etcd:true&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>node-test-1 map&lt;span style="color:#f92672">[&lt;/span>beta.kubernetes.io/arch:amd64 beta.kubernetes.io/os:linux kubernetes.io/arch:amd64 kubernetes.io/hostname:node-test-1 kubernetes.io/os:linux node-role.kubernetes.io/worker:true&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>node-test-2 map&lt;span style="color:#f92672">[&lt;/span>beta.kubernetes.io/arch:amd64 beta.kubernetes.io/os:linux kubernetes.io/arch:amd64 kubernetes.io/hostname:node-test-2 kubernetes.io/os:linux node-role.kubernetes.io/worker:true&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>显示 pod 的名字及其启动时间。
&lt;ul>
&lt;li>kubectl get pods -o=jsonpath=&amp;rsquo;{range .items[*]}{.metadata.name}{&amp;quot;\t&amp;quot;}{.status.startTime}{&amp;quot;\n&amp;quot;}{end}&amp;rsquo;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>root@master-test-1 .kube&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># kubectl get pods -A -o=jsonpath=&amp;#39;{range .items[*]}{.metadata.name}{&amp;#34;\t&amp;#34;}{.status.startTime}{&amp;#34;\n&amp;#34;}{end}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>myapp-pod 2020-08-21T15:57:35Z
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>default-http-backend-598b7d7dbd-xrp6s 2020-08-17T05:04:41Z
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nginx-ingress-controller-7b9mp 2020-08-17T05:04:40Z
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nginx-ingress-controller-lhbgl 2020-08-22T08:17:10Z
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>coredns-849545576b-7xt9p 2020-08-17T07:27:43Z
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>获取所有节点的污点&lt;/p>
&lt;ul>
&lt;li>kubectl get nodes &amp;ndash;template=&amp;rsquo;{{range .items}}{{.metadata.name}}{{&amp;quot;\t&amp;quot;}}{{.spec.taints}}{{&amp;quot;\n&amp;quot;}}{{end}}&amp;rsquo;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>列出事件（Events），按时间戳排序&lt;/p>
&lt;ul>
&lt;li>kubectl get events -A &amp;ndash;sort-by=&amp;rsquo;{.metadata.creationTimestamp}&amp;rsquo;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>删除所有名称空间中标签为 authz.cluster.cattle.io/rtb-owner-updated 的 rolebinding 对象&lt;/p>
&lt;ul>
&lt;li>for k in $(kubectl get ns -o name | awk -F/ &amp;lsquo;{print $2}&amp;rsquo;); do for i in $(kubectl get -n $k rolebindings.rbac.authorization.k8s.io -l &amp;ldquo;authz.cluster.cattle.io/rtb-owner-updated&amp;rdquo; -o name); do kubectl delete -n $k $i; done;done&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>从 kubernetes-dashboard 这个 deployment 中获取 SA，并从 SA 中提取 Token。&lt;/p>
&lt;ul>
&lt;li>APPNAME=$(kubectl get deployments.apps -n kubernetes-dashboard -o name)&lt;/li>
&lt;li>SA=$(kubectl get ${APPNAME} -n kubernetes-dashboard -ojsonpath=&amp;rsquo;{.spec.template.spec.serviceAccountName}&amp;rsquo;)&lt;/li>
&lt;li>kubectl get secrets -n kubernetes-dashboard -o jsonpath=&amp;quot;{.items[?(@.metadata.annotations[&amp;lsquo;kubernetes.io/service-account.name&amp;rsquo;]==&amp;rsquo;${SA}&amp;rsquo;)].data.token}&amp;quot; | base64 -d&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;h2 id="获取-admin-token">获取 admin TOKEN&lt;/h2>
&lt;/li>
&lt;li>
&lt;p>查看 replicaset 的历史版本号&lt;/p>
&lt;ul>
&lt;li>kubectl get replicasets.apps -n bluestore-console -ojsonpath=&amp;rsquo;{range .items[*]}{.metadata.annotations.deployment.kubernetes.io/revision}{&amp;quot;\t&amp;quot;}{.metadata.name}{&amp;quot;\n&amp;quot;}{end}&amp;rsquo;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="过滤-pod">过滤 Pod&lt;/h2>
&lt;p>获取 kube-system 名称空间下，标签 k8s-app 的值为 kube-dns 的所有 pod。&lt;/p>
&lt;ul>
&lt;li>kubectl get pod -n kube-system &amp;ndash;selector=&amp;ldquo;k8s-app=kube-dns&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;p>获取 node-1 节点上的所有 Pods&lt;/p>
&lt;ul>
&lt;li>kubectl get pods &amp;ndash;all-namespaces -o wide &amp;ndash;field-selector spec.nodeName=node-1&lt;/li>
&lt;/ul>
&lt;p>获取指定状态的 pod。(Succeeded 就是 Completed)&lt;/p>
&lt;ul>
&lt;li>kubectl get pods -A &amp;ndash;field-selector status.phase=Running&lt;/li>
&lt;li>kubectl get pod -A &amp;ndash;field-selector status.phase=Succeeded&lt;/li>
&lt;li>kubectl get pod -A &amp;ndash;field-selector status.reason=Evicted&lt;/li>
&lt;/ul>
&lt;p>获取 test 名称空间下所有资源&lt;/p>
&lt;ul>
&lt;li>kubectl api-resources -o name &amp;ndash;verbs=list &amp;ndash;namespaced | xargs -n 1 kubectl get &amp;ndash;show-kind &amp;ndash;ignore-not-found -n test&lt;/li>
&lt;/ul>
&lt;p>获取正在使用 pvc 的 pod&lt;/p>
&lt;ul>
&lt;li>kubectl get pods &amp;ndash;all-namespaces -o=json | jq -c &amp;lsquo;.items[] | {name: .metadata.name, namespace: .metadata.namespace, claimName:.spec.volumes[] | select( has (&amp;ldquo;persistentVolumeClaim&amp;rdquo;) ).persistentVolumeClaim.claimName }&amp;rsquo;&lt;/li>
&lt;/ul>
&lt;h3 id="获取-pod-在-node-上的分布数量">获取 Pod 在 Node 上的分布数量&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl get pods -A -o wide -l app&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;flannel&amp;#34;&lt;/span> | awk &lt;span style="color:#e6db74">&amp;#39;{print $8}&amp;#39;&lt;/span>|&lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> awk &lt;span style="color:#e6db74">&amp;#39;{ count[$0]++ }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> END {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> printf(&amp;#34;%-35s: %s\n&amp;#34;,&amp;#34;Word&amp;#34;,&amp;#34;Count&amp;#34;);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> for(ind in count){
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> printf(&amp;#34;%-35s: %d\n&amp;#34;,ind,count[ind]);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> }&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>若是指定了名称空间，awk 则应筛选 $7 列。&lt;/p>
&lt;h3 id="获取指定状态的-pod并删除">获取指定状态的 Pod，并删除&lt;/h3>
&lt;p>获取 Pod 状态为 Pending 的所有 Pod 并生成删除指令&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>export PodStatus&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Pending&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kubectl get pods --all-namespaces --field-selector status.phase&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>PodStatus&lt;span style="color:#e6db74">}&lt;/span> -o json | &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> jq &lt;span style="color:#e6db74">&amp;#39;.items[] | &amp;#34;kubectl get pods \(.metadata.name) -o wide -n \(.metadata.namespace)&amp;#34;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>！！！注意：执行 &lt;code>xargs -n 1 bash -c&lt;/code> 删除操作前，需要详细调试命令
最后加上 &lt;code>xargs -n 1 bash -c&lt;/code> 以执行生成的删除 Pod 指令&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl get pods --all-namespaces --field-selector status.phase&lt;span style="color:#f92672">=&lt;/span>Pending -o json | &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> jq &lt;span style="color:#e6db74">&amp;#39;.items[] | &amp;#34;kubectl delete pods \(.metadata.name) -n \(.metadata.namespace)&amp;#34;&amp;#39;&lt;/span> | &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> xargs -n &lt;span style="color:#ae81ff">1&lt;/span> bash -c
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果只是获取单一 Namespace 下的 Pods，直接只用 grep 命令筛选更快~&lt;/p>
&lt;ul>
&lt;li>kubectl -n default get pods | grep Completed | awk &amp;lsquo;{print $1}&amp;rsquo; | xargs kubectl -n default delete pods&lt;/li>
&lt;/ul>
&lt;h2 id="finalizers-字段处理">finalizers 字段处理&lt;/h2>
&lt;p>快速清空对象中的 finalizers 字段&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl get namespace test -o json &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> | tr -d &lt;span style="color:#e6db74">&amp;#34;\n&amp;#34;&lt;/span> | sed &lt;span style="color:#e6db74">&amp;#34;s/\&amp;#34;finalizers\&amp;#34;: \[[^]]\+\]/\&amp;#34;finalizers\&amp;#34;: []/&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> | kubectl replace --raw /api/v1/namespaces/test/finalize -f -
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: kubectl 扩展</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/kubernetes-%E7%AE%A1%E7%90%86/kubectl-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/kubectl-%E6%89%A9%E5%B1%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/kubernetes-%E7%AE%A1%E7%90%86/kubectl-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/kubectl-%E6%89%A9%E5%B1%95/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kubernetes.io/docs/tasks/extend-kubectl/kubectl-plugins/">官方文档&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>kubectl 有一个称为 &lt;strong>Plugins(插件)&lt;/strong> 机制，可以扩展 kubectl 工具的能力。通过插件，就相当于为 kubectl 添加了子命令。&lt;/p>
&lt;h1 id="安装-kubectl-插件">安装 kubectl 插件&lt;/h1>
&lt;p>插件是一个独立的可执行文件，名称以 &lt;code>kubectl-&lt;/code> 开头。 要安装插件，只需将此可执行文件移动到 &lt;code>$PATH&lt;/code> 中的任何位置。&lt;/p>
&lt;p>Kubernetes SIG 研发了一款名为 &lt;strong>Krew&lt;/strong> 的插件，这是一个可以管理插件的插件，Krew 之于 Kubectl，就好像 yum/apt 之于 CentOS/Ubuntu。可以使用 &lt;a href="https://krew.dev/">Krew&lt;/a> 来发现和安装开源的 kubectl 插件。&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>注意：&lt;/strong> Krew &lt;a href="https://krew.sigs.k8s.io/plugins/">插件索引&lt;/a> 所维护的 kubectl 插件并未经过安全性审查。 你要了解安装和运行第三方插件的安全风险，因为它们本质上时是一些在你的机器上 运行的程序。&lt;/p>
&lt;/blockquote>
&lt;h1 id="krew">Krew&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/kubernetes-sigs/krew/">GitHub 项目&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="krew-配置">Krew 配置&lt;/h2>
&lt;p>&lt;strong>~/.krew/*&lt;/strong> # Krew 配置文件与存储路径。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>./bin/*&lt;/strong> # Krew 安装的插件的软连接&lt;/li>
&lt;li>&lt;strong>./index/default/plugins/*&lt;/strong> # Krew 发现的插件元数据，想要安装插件，就会通过这里面的元数据信息进行。&lt;/li>
&lt;li>&lt;strong>./receipts/*&lt;/strong> # 已安装的插件的元数据。&lt;/li>
&lt;li>&lt;strong>./store/*&lt;/strong> # Krew 存储路径，所有安装的插件的二进制文件都会在该目录下。&lt;/li>
&lt;/ul>
&lt;h1 id="常见-kubectl-插件">常见 kubectl 插件&lt;/h1>
&lt;p>kubectl 插件管理工具，项目地址：&lt;a href="https://github.com/kubernetes-sigs/krew-index/blob/master/plugins.md">https://github.com/kubernetes-sigs/krew-index/blob/master/plugins.md&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>neat&lt;/strong> #让 kubectl get -o yaml 的输出更简洁
&lt;ul>
&lt;li>项目地址：&lt;a href="https://github.com/itaysk/kubectl-neat">https://github.com/itaysk/kubectl-neat&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>node-shell&lt;/strong> # 通过 kubectl 命令直接进入 node 的 shell 中
&lt;ul>
&lt;li>项目地址：&lt;a href="https://github.com/kvaps/kubectl-node-shell">GitHub 项目&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="好用的-kubectl-扩展工具">好用的 kubectl 扩展工具&lt;/h1>
&lt;h2 id="kubecm">kubecm&lt;/h2>
&lt;p>项目地址：&lt;a href="https://github.com/sunny0826/kubecm">https://github.com/sunny0826/kubecm&lt;/a>
整合 kubectl 的 config 文件，并可以简单得切换 kubectl 所要操作的目标集群&lt;/p></description></item><item><title>Docs: logs # 打印 pod 中的 container 的日志</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/kubernetes-%E7%AE%A1%E7%90%86/kubectl-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/logs-#-%E6%89%93%E5%8D%B0-pod-%E4%B8%AD%E7%9A%84-container-%E7%9A%84%E6%97%A5%E5%BF%97/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/kubernetes-%E7%AE%A1%E7%90%86/kubectl-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/logs-#-%E6%89%93%E5%8D%B0-pod-%E4%B8%AD%E7%9A%84-container-%E7%9A%84%E6%97%A5%E5%BF%97/</guid><description>
&lt;h1 id="heading">&lt;/h1>
&lt;h2 id="kubectl-logs--f--p-pod--typename--c-container-options">kubectl logs [-f] [-p] (POD | TYPE/NAME) [-c CONTAINER] [options]&lt;/h2>
&lt;p>语法结构&lt;/p>
&lt;ol>
&lt;li>
&lt;p>kubectl logs &lt;!-- raw HTML omitted --> # 查看指定 pod 的日志&lt;/p>
&lt;/li>
&lt;li>
&lt;p>kubectl logs -f &lt;!-- raw HTML omitted --> # 类似 tail -f 的方式查看(tail -f 实时查看日志文件 tail -f 日志文件 log)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>kubectl logs &lt;!-- raw HTML omitted --> -c &amp;lt;container_name&amp;gt; # 查看指定 pod 中指定容器的日志&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>OPTIONS&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>-f&lt;/strong> # 实时查看日志文件，类似于 tailf&lt;/p>
&lt;/li>
&lt;li>
&lt;p>**-p,&amp;ndash;previous **# 输出 pod 中曾经运行过，但目前已终止的容器的日志。(i.e 查看一个 container 重启之前的日志，用于排障)&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>EXAMPLE&lt;/p>
&lt;ol>
&lt;li>kubectl logs &amp;ndash;namespace=kube-system calico-node-krgz6 calico-node #查看 calico-node-krgz6 这个 pod 的日志&lt;/li>
&lt;/ol></description></item><item><title>Docs: set 与 rollout 更新资源命令</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/kubernetes-%E7%AE%A1%E7%90%86/kubectl-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/set-%E4%B8%8E-rollout-%E6%9B%B4%E6%96%B0%E8%B5%84%E6%BA%90%E5%91%BD%E4%BB%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/kubernetes-%E7%AE%A1%E7%90%86/kubectl-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/set-%E4%B8%8E-rollout-%E6%9B%B4%E6%96%B0%E8%B5%84%E6%BA%90%E5%91%BD%E4%BB%A4/</guid><description>
&lt;h1 id="set--在对象上设定特定的特性">set # 在对象上设定特定的特性&lt;/h1>
&lt;p>&lt;strong>kubectl set COMMAND [OPTIONS]&lt;/strong>
COMMAND&lt;/p>
&lt;ul>
&lt;li>&lt;strong>env&lt;/strong> # Update environment variables on a pod template&lt;/li>
&lt;li>&lt;strong>image&lt;/strong> # 更新一个 Pod 模板的镜像&lt;/li>
&lt;li>&lt;strong>resources&lt;/strong> # Update resource requests/limits on objects with pod templates&lt;/li>
&lt;li>&lt;strong>selector&lt;/strong> # Set the selector on a resource&lt;/li>
&lt;li>&lt;strong>serviceaccount&lt;/strong> # Update ServiceAccount of a resource&lt;/li>
&lt;li>&lt;strong>subject&lt;/strong> # Update User, Group or ServiceAccount in a RoleBinding/ClusterRoleBinding&lt;/li>
&lt;/ul>
&lt;h2 id="kubectl-set-image--更新资源">kubectl set image # 更新资源&lt;/h2>
&lt;p>更新资源的现有容器映像。可能的资源包括(不区分大小写)pod (po), replicationcontroller (rc), deployment (deploy), daemonset (ds), replicaset (rs)&lt;/p>
&lt;h3 id="syntax语法">Syntax(语法)&lt;/h3>
&lt;p>&lt;strong>kubectl set image (-f FILENAME | TYPE NAME) CONTAINER_NAME_1=CONTAINER_IMAGE_1 &amp;hellip; CONTAINER_NAME_N=CONTAINER_IMAGE_N&lt;/strong>&lt;/p>
&lt;p>OPTIONS&lt;/p>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>更新(myapp-deploy 这个控制器下的 pod 模板中的名为 myapp 这个容器中的镜像)到 ikubernetes/myapp:v3 这个版本,并且暂停 myapp-deploy 这个 deployment 的滚动更新，该命令的作用是只更新一个 pod，暂停后续更新，以便查看新版本在生产环境中的运行情况，正常之后，再开始暂停的更新即可
&lt;ul>
&lt;li>kubectl set image deployment myapp-deploy myapp=ikubernetes/myapp:v3 &amp;amp;&amp;amp; kubectl rollout pause deployment myapp-deploy&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="rollout--管理资源的滚动更新">rollout # 管理资源的滚动更新&lt;/h1>
&lt;p>&lt;strong>kubectl rollout COMMAND [OPTIONS]&lt;/strong>
COMMAND&lt;/p>
&lt;ul>
&lt;li>&lt;strong>history&lt;/strong> #滚动更新视图&lt;/li>
&lt;li>&lt;strong>pause&lt;/strong> #标记提供的资源以暂停这个资源&lt;/li>
&lt;li>**restart **# 重启一个资源&lt;/li>
&lt;li>&lt;strong>resume&lt;/strong> #重新开始被暂停的资源&lt;/li>
&lt;li>**status **#显示滚动更新的状态&lt;/li>
&lt;li>&lt;strong>undo&lt;/strong> #撤销以前的滚动更新&lt;/li>
&lt;/ul>
&lt;h2 id="history--查看滚动更新的历史情况">history # 查看滚动更新的历史情况&lt;/h2>
&lt;p>kubectl rollout history (TYPE NAME | TYPE/NAME) [flags] [options]&lt;/p>
&lt;p>REVISION #指明更新的版本序号&lt;/p>
&lt;p>CHANGE-CAUSE #指明该次更新执行的具体命令，只有在 apply 的时候使用&amp;ndash;record 参数，该项才有内容&lt;/p>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>**kubectl rollout history deployment myapp-deploy **&lt;/li>
&lt;/ul>
&lt;h2 id="pause--暂停滚动更新的资源">pause # 暂停滚动更新的资源&lt;/h2>
&lt;p>kubectl rollout pause RESOURCE [options]&lt;/p>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>&lt;strong>kubectl rollout pause deployment myapp-deploy&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h2 id="restart--重启一个资源">restart # 重启一个资源&lt;/h2>
&lt;p>滚动重启指定的资源&lt;/p>
&lt;h3 id="syntax语法-1">Syntax(语法)&lt;/h3>
&lt;p>&lt;strong>kubectl rollout restart RESOURCE [OPTIONS]&lt;/strong>&lt;/p>
&lt;p>&lt;strong>EXAMPLE&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>滚动重启 monitoring 名称空间下，名为 node-exporter 的 daemonset 类型资源
&lt;ul>
&lt;li>&lt;strong>kubectl rollout restart -n monitoring daemonset node-exporter&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="resume--重新开始被暂停的资源">resume # 重新开始被暂停的资源&lt;/h2>
&lt;p>kubectl rollout resume RESOURCE [options]&lt;/p>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>kubectl rollout resume deployment myapp-deploy&lt;/li>
&lt;/ul>
&lt;h2 id="status--查看更新状态">status # 查看更新状态&lt;/h2>
&lt;p>语法结构
kubectl rollout status (TYPE NAME | TYPE/NAME) [flags] [options]&lt;/p>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>kubectl rollout status deployment myapp #查看 myapp 这个 deployment 的更新状态&lt;/li>
&lt;/ul>
&lt;h2 id="undo--回滚">undo # 回滚&lt;/h2>
&lt;p>语法结构
kubectl rollout undo (TYPE NAME | TYPE/NAME) [flags] [OPTIONS]&lt;/p>
&lt;p>OPTIONS&lt;/p>
&lt;ul>
&lt;li>--to-revision=NUM #指定要回滚到哪个修订版，默认为 0，最后的修正版。查看修订版的 NUM 可以使用 kubectl rollout history 命令，该命令显示出的 REVISION 下面的数字就是 NUM，注意：如果我从 V1 更新到 V2 再更新到 V3，然后回滚到 V1，那么此时我再回滚到上一版的时候，指的是回滚到 V3 版&lt;/li>
&lt;/ul>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>kubectl rollout undo deployment myapp #回滚 myapp 这个 deployment 的更新状态&lt;/li>
&lt;/ul></description></item><item><title>Docs: 对象的创建与修改命令</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/kubernetes-%E7%AE%A1%E7%90%86/kubectl-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E4%BF%AE%E6%94%B9%E5%91%BD%E4%BB%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/kubernetes-%E7%AE%A1%E7%90%86/kubectl-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E4%BF%AE%E6%94%B9%E5%91%BD%E4%BB%A4/</guid><description>
&lt;h1 id="kubectl-apply--声明对象">kubectl apply # 声明对象&lt;/h1>
&lt;p>通过文件或 STDIN(标准输入)声明配置到一个资源中，如果该资源不存在，则会根据所声明的内容自动创建。&lt;/p>
&lt;p>有时候我们在使用 apply 应用一个对象时，会遇上类似&lt;a href="https://github.com/prometheus-community/helm-charts/issues/1500">如下&lt;/a>的提示：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>The CustomResourceDefinition &lt;span style="color:#e6db74">&amp;#34;XXXXX&amp;#34;&lt;/span> is invalid: metadata.annotations: Too long: must have at most &lt;span style="color:#ae81ff">262144&lt;/span> bytes
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>一个 Manifests 文件太大导致无法 apply，才是就需要使用 &lt;a href="#G6Jwi">replace&lt;/a> 来修改对象。或者为 apply 子命令添加 &lt;code>--server-side&lt;/code> 标志。&lt;/p>
&lt;h2 id="syntax语法">Syntax(语法)&lt;/h2>
&lt;p>**kubectl apply -f FILENAME [OPTIONS] **
OPTIONS&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&amp;ndash;record&lt;/strong> # 在资源注释中记录当前 kubectl 命令。 如果设置为 false，请不要记录该命令。 如果设置为 true，则记录该命令。 如果未设置，则默认仅在已存在的情况下更新现有注释值。&lt;/li>
&lt;li>&lt;strong>&amp;ndash;server-side&lt;/strong> #&lt;/li>
&lt;/ul>
&lt;h1 id="kubectl-edit--修改对象">kubectl edit # 修改对象&lt;/h1>
&lt;p>&lt;strong>kubectl edit (RESOURCE/NAME | -f FILENAME) [OPTIONS]&lt;/strong>
OPTIONS：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&amp;ndash;save-config=false|true&lt;/strong> #&lt;/li>
&lt;/ul>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>kubectl edit -n service kube-system kubernetes-dashboard&lt;/li>
&lt;/ul>
&lt;h1 id="kubectl-replace--替换使用文件或标准输入替换一个资源">kubectl replace # 替换。使用文件或标准输入替换一个资源&lt;/h1>
&lt;h2 id="syntax语法-1">Syntax(语法)&lt;/h2>
&lt;p>&lt;strong>kubectl replace -f FILENAME [options]&lt;/strong>
EXAMPLE&lt;/p>
&lt;ul>
&lt;li>重启指定的容器
&lt;ul>
&lt;li>&lt;strong>kubectl get pod {podname} -n {namespace} -o yaml | kubectl replace &amp;ndash;force -f -&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="kubectl-create--从一个文件或者标准输入中创建一个对象">kubectl create # 从一个文件或者标准输入中创建一个对象&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kubernetes.io/docs/reference/kubectl/conventions">官方文档，参考-命令行工具(kubectl)-使用公约&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>注意：并不是所有资源都可以通过命令行在标准输入中创建，但是所有资源都可以通过文件来创建一个对象。&lt;/p>
&lt;p>&lt;strong>kubectl create [COMMAND] [OPTIONS]&lt;/strong>
Command：&lt;/p>
&lt;ul>
&lt;li>clusterrole&lt;/li>
&lt;li>clusterrolebinding&lt;/li>
&lt;li>configmap&lt;/li>
&lt;li>cronjob&lt;/li>
&lt;li>deployment&lt;/li>
&lt;li>ingress&lt;/li>
&lt;li>job&lt;/li>
&lt;li>namespace&lt;/li>
&lt;li>poddisruptionbudget&lt;/li>
&lt;li>priorityclass&lt;/li>
&lt;li>quota&lt;/li>
&lt;li>role&lt;/li>
&lt;li>rolebinding&lt;/li>
&lt;li>secret&lt;/li>
&lt;li>service&lt;/li>
&lt;li>serviceaccount&lt;/li>
&lt;/ul>
&lt;h2 id="configmap">configmap&lt;/h2>
&lt;p>通过文件、目录或者指定的 literal 值创建一个 configmap(配置中心)
&lt;strong>kubectl create configmap NAME [&amp;ndash;from-file=[key=]source] [&amp;ndash;from-literal=key1=value1] [&amp;ndash;dry-run] [OPTIONS]&lt;/strong>&lt;/p>
&lt;p>OPTIONS&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&amp;ndash;from-env-file=&amp;rsquo;&amp;rsquo;&lt;/strong> # Specify the path to a file to read lines of key=val pairs to create a configmap (i.e. a Docker .env file).&lt;/li>
&lt;li>&lt;strong>&amp;ndash;from-file=[KEY=]/PATH/FILE&lt;/strong> # 键(KEY)文件可以使用文件路径指定，在这种情况下，文件名将作为 configmap 中的键值；或者可以指定键值和文件路径，这时候 configmap 中的键值，是指定的 KEY 的值，效果如 EXAMPLE 图&lt;/li>
&lt;li>&lt;strong>&amp;ndash;from-literal=[]&lt;/strong> # Specify a key and literal value to insert in configmap (i.e. mykey=somevalue)&lt;/li>
&lt;/ul>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>浅蓝色框为键/值对的键，红框文件中内容为键/值对的值，如果使用命令的时候不指定 KEY，则 yaml 格式的 configmap 的 data 下面字段的 KEY 为 www.conf
&lt;ul>
&lt;li>kubectl create configmap nginx-www &amp;ndash;from-file=www=./www.conf&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="rbac-相关资源--创建角色对象的相关命令">RBAC 相关资源 # 创建角色对象的相关命令&lt;/h2>
&lt;p>通用 OPTIONS：&lt;/p>
&lt;ul>
&lt;li>**&amp;ndash;dry-run **# 干跑一遍，意思是仅把结果打印到屏幕上而不真的创建这个对象，默认为关。常与 -o 连用，用来测试命令执行结果&lt;/li>
&lt;li>**-o &amp;lt;json|yaml|name|templatefile|template|go-template|go-template-file|jsonpath-file|jsonpath&amp;gt; **# 选择输出信息的输出格式&lt;/li>
&lt;li>**&amp;ndash;serviceaccount=[] **# 服务帐户绑定到角色, in the format &lt;!-- raw HTML omitted -->:&lt;!-- raw HTML omitted -->&lt;/li>
&lt;/ul>
&lt;h3 id="role">role&lt;/h3>
&lt;p>&lt;strong>kubectl create role NAME &amp;ndash;verb=VERB &amp;ndash;resource=RESOURCE[.GROUP/SubResource] [&amp;ndash;resource-name=RESOURCE] [OPTIONS]&lt;/strong>
VERB 是指明该 role 可以执行的动作(命令)且多个动作以逗号间隔，GROUP 省略时，则默认核心组，apiGroups 字段值为 &amp;ldquo;&amp;quot;。&lt;/p>
&lt;p>OPTIONS&lt;/p>
&lt;ul>
&lt;li>--allow-missing-template-keys=true: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.&lt;/li>
&lt;li>&lt;strong>&amp;ndash;resource=&lt;!-- raw HTML omitted -->&lt;/strong> # 指定该 role 的规则，作用于哪些资源。RESOURCE 以 &lt;code>资源名.API组&lt;/code> 的方式命名，多个资源以逗号分隔。如果想要指定所有资源，则 RESOURCE 为 &lt;em>.&lt;/em>&lt;/li>
&lt;li>--resource-name=[] # Resource in the white list that the rule applies to, repeat this flag for multiple items&lt;/li>
&lt;li>&lt;strong>&amp;ndash;save-config=false&lt;/strong> # 如果为 true，则当前对象的配置将保存在其注释中。 否则，注释将保持不变。 当您将来希望对这个对象执行 kubectl 应用时，此标志很有用。&lt;/li>
&lt;li>--template=&amp;rsquo;&amp;rsquo;: Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].&lt;/li>
&lt;li>--validate=true: If true, use a schema to validate the input before sending it&lt;/li>
&lt;li>&lt;strong>&amp;ndash;verb=&lt;!-- raw HTML omitted -->&lt;/strong> # 指明该 role 可以执行的动作(命令)，多个动作以逗号间隔&lt;/li>
&lt;/ul>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>kubectl create role lch -n lch &amp;ndash;verb=_ &amp;ndash;resource=_.* # 在 lch 名称空间中创建一个名为 lch 的角色，可以对所有 API 组下的所有资源，执行任何操作。&lt;/li>
&lt;li>kubectl create role pods-reader &amp;ndash;verb=get,list,watch &amp;ndash;resource=pods &amp;ndash;dry-run -o yaml #创建一个名为 pods-reader 的角色，只能对核心 API 组下的 pods 资源，执行 get、list、watch 操作。仅运行不真正创建，并输出 yaml 格式的信息。&lt;/li>
&lt;/ul>
&lt;h3 id="rolebinding">rolebinding&lt;/h3>
&lt;p>&lt;strong>kubectl create rolebinding NAME &amp;ndash;clusterrole=NAME|&amp;ndash;role=NAME [&amp;ndash;user=username] [&amp;ndash;group=groupname][&amp;ndash;serviceaccount=namespace:serviceaccountname] [OPTIONS]&lt;/strong> #绑定 role 或者 clusterrole 其中之一并指明 rolebinding 资源的名称&lt;/p>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>在 lch 名称空间中创建一个名为 lch 的角色绑定，将 lch 角色与 lch 用户绑定。
&lt;ul>
&lt;li>kubectl create rolebinding lch -n lch &amp;ndash;role=lch &amp;ndash;user=lch&lt;/li>
&lt;li>kubectl create rolebinding lch -n test &amp;ndash;role=lch &amp;ndash;serviceaccount=test:lch&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>创建一个 rolebinding 资源并把 pods-reader 这个 role 与 lch 这个用户绑定起来
&lt;ul>
&lt;li>kubectl create rolebinding bind-lch-read &amp;ndash;role=pods-reader &amp;ndash;user=lch&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="clusterrole">clusterrole&lt;/h3>
&lt;p>&lt;strong>kubectl create clusterrole NAME &amp;ndash;verb=VERB &amp;ndash;resource=RESOURCE.GROUP [&amp;ndash;resource-name=resourcename]&lt;/strong>&lt;/p>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>kubectl create clusterrole cluster-reader &amp;ndash;verb=get,list,watch &amp;ndash;resource=pods&lt;/li>
&lt;/ul>
&lt;h3 id="clusterrolebinding">clusterrolebinding&lt;/h3>
&lt;p>&lt;strong>kubectl create clusterrolebinding NAME &amp;ndash;clusterrole=NAME [&amp;ndash;user=username] [&amp;ndash;group=groupname][&amp;ndash;serviceaccount=namespace:serviceaccountname] [OPTIONS]&lt;/strong> # 只能绑定 clusterrole 并指定 clusterrolebinding 资源的名称&lt;/p>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>kubectl create clusterrolebinding bind-lch-allreader &amp;ndash;clusterrole=cluster=reader &amp;ndash;user=lch&lt;/li>
&lt;li>kubectl create clusterrolebinding dashboard-cluster-admin &amp;ndash;clusterrole=cluster-admin &amp;ndash;serviceaccount=kube-system:dashboard-admin&lt;/li>
&lt;/ul>
&lt;h2 id="secret--使用指定的子命令创建-secret-对象">secret # 使用指定的子命令创建 secret 对象&lt;/h2>
&lt;p>SubCommand：&lt;/p>
&lt;ul>
&lt;li>docker-registry # Create a secret for use with a Docker registry&lt;/li>
&lt;li>generic # 从本地文件、目录或文字值创建一个秘密&lt;/li>
&lt;li>tls # Create a TLS secret&lt;/li>
&lt;/ul>
&lt;p>**kubectl create secret docker-registry NAME &amp;ndash;docker-username=user &amp;ndash;docker-password=password &amp;ndash;docker-email=email [&amp;ndash;docker-server=string] [&amp;ndash;from-literal=key1=value1] [&amp;ndash;dry-run] [options] **&lt;/p>
&lt;p>&lt;strong>kubectl create secret generic NAME [&amp;ndash;type=string] [&amp;ndash;from-file=[key=]source] [&amp;ndash;from-literal=key1=value1] [&amp;ndash;dry-run] [options]&lt;/strong>&lt;/p>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>无用，创建 serviceaccount 时会自动创建，仅作语句格式参考
&lt;ul>
&lt;li>kubectl create secret generic dashboard-cert -n kube-system &amp;ndash;from-file=dashboard.crt=dashboard.crt &amp;ndash;from-file=dashboard.key=dashboard.key&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>kubectl create secret tls NAME &amp;ndash;cert=path/to/cert/file &amp;ndash;key=path/to/key/file [&amp;ndash;dry-run] [options]&lt;/strong>&lt;/p>
&lt;h2 id="serviceaccount--使用指定的名字创建一个-serviceaccount服务账户对象">serviceaccount # 使用指定的名字创建一个 ServiceAccount(服务账户)对象&lt;/h2>
&lt;p>&lt;strong>kubectl create serviceaccount NAME [&amp;ndash;dry-run] [OPTIONS]&lt;/strong>&lt;/p>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>在 kube-system 名称空间中创建一个名为 dashboard-dashboard 的 serviceaccount
&lt;ul>
&lt;li>kubectl create serviceaccount dashboard-dashboard -n kube-system&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item></channel></rss>