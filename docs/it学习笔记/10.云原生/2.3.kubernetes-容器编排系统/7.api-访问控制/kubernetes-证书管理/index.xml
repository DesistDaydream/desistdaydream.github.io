<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – Kubernetes 证书管理</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/7.api-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/kubernetes-%E8%AF%81%E4%B9%A6%E7%AE%A1%E7%90%86/</link><description>Recent content in Kubernetes 证书管理 on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/7.api-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/kubernetes-%E8%AF%81%E4%B9%A6%E7%AE%A1%E7%90%86/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: 手动管理 Kubernetes 证书</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/7.api-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/kubernetes-%E8%AF%81%E4%B9%A6%E7%AE%A1%E7%90%86/%E6%89%8B%E5%8A%A8%E7%AE%A1%E7%90%86-kubernetes-%E8%AF%81%E4%B9%A6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/7.api-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/kubernetes-%E8%AF%81%E4%B9%A6%E7%AE%A1%E7%90%86/%E6%89%8B%E5%8A%A8%E7%AE%A1%E7%90%86-kubernetes-%E8%AF%81%E4%B9%A6/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kubernetes.io/docs/tasks/administer-cluster/certificates/">官方文档,任务-管理集群-证书&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>在使用客户端证书认证的场景下，你可以通过 &lt;code>easyrsa&lt;/code>、&lt;code>openssl&lt;/code> 或 &lt;code>cfssl&lt;/code> 等工具以手工方式生成证书。&lt;/p>
&lt;h3 id="easyrsa">easyrsa&lt;/h3>
&lt;p>&lt;strong>easyrsa&lt;/strong> 支持以手工方式为你的集群生成证书。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>下载、解压、初始化打过补丁的 easyrsa3。&lt;/p>
&lt;p>curl -LO &lt;a href="https://storage.googleapis.com/kubernetes-release/easy-rsa/easy-rsa.tar.gz">https://storage.googleapis.com/kubernetes-release/easy-rsa/easy-rsa.tar.gz&lt;/a>
tar xzf easy-rsa.tar.gz
cd easy-rsa-master/easyrsa3
./easyrsa init-pki&lt;/p>
&lt;/li>
&lt;li>
&lt;p>生成新的证书颁发机构（CA）。参数 &lt;code>--batch&lt;/code> 用于设置自动模式； 参数 &lt;code>--req-cn&lt;/code> 用于设置新的根证书的通用名称（CN）。&lt;/p>
&lt;p>./easyrsa &amp;ndash;batch &amp;ldquo;&amp;ndash;req-cn=${MASTER_IP}@&lt;code>date +%s&lt;/code>&amp;rdquo; build-ca nopass&lt;/p>
&lt;/li>
&lt;li>
&lt;p>生成服务器证书和秘钥。 参数 &lt;code>--subject-alt-name&lt;/code> 设置 API 服务器的 IP 和 DNS 名称。 &lt;code>MASTER_CLUSTER_IP&lt;/code> 用于 API 服务器和控制管理器，通常取 CIDR 的第一个 IP，由 &lt;code>--service-cluster-ip-range&lt;/code> 的参数提供。 参数 &lt;code>--days&lt;/code> 用于设置证书的过期时间。 下面的示例假定你的默认 DNS 域名为 &lt;code>cluster.local&lt;/code>。&lt;/p>
&lt;p>./easyrsa &amp;ndash;subject-alt-name=&amp;ldquo;IP:${MASTER_IP},&amp;rdquo;&lt;br>
&amp;ldquo;IP:${MASTER_CLUSTER_IP},&amp;rdquo;&lt;br>
&amp;ldquo;DNS:kubernetes,&amp;rdquo;&lt;br>
&amp;ldquo;DNS:kubernetes.default,&amp;rdquo;&lt;br>
&amp;ldquo;DNS:kubernetes.default.svc,&amp;rdquo;&lt;br>
&amp;ldquo;DNS:kubernetes.default.svc.cluster,&amp;rdquo;&lt;br>
&amp;ldquo;DNS:kubernetes.default.svc.cluster.local&amp;rdquo; &lt;br>
&amp;ndash;days=10000 &lt;br>
build-server-full server nopass&lt;/p>
&lt;/li>
&lt;li>
&lt;p>拷贝文件 &lt;code>pki/ca.crt&lt;/code>、&lt;code>pki/issued/server.crt&lt;/code> 和 &lt;code>pki/private/server.key&lt;/code> 到你的目录中。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在 API 服务器的启动参数中添加以下参数：&lt;/p>
&lt;p>&amp;ndash;client-ca-file=/yourdirectory/ca.crt
&amp;ndash;tls-cert-file=/yourdirectory/server.crt
&amp;ndash;tls-private-key-file=/yourdirectory/server.key&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="openssl">openssl&lt;/h3>
&lt;p>&lt;strong>openssl&lt;/strong> 支持以手工方式为你的集群生成证书。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>生成一个 2048 位的 ca.key 文件&lt;/p>
&lt;p>openssl genrsa -out ca.key 2048&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在 ca.key 文件的基础上，生成 ca.crt 文件（用参数 -days 设置证书有效期）&lt;/p>
&lt;p>openssl req -x509 -new -nodes -key ca.key -subj &amp;ldquo;/CN=${MASTER_IP}&amp;rdquo; -days 10000 -out ca.crt&lt;/p>
&lt;/li>
&lt;li>
&lt;p>生成一个 2048 位的 server.key 文件：&lt;/p>
&lt;p>openssl genrsa -out server.key 2048&lt;/p>
&lt;/li>
&lt;li>
&lt;p>创建一个用于生成证书签名请求（CSR）的配置文件。 保存文件（例如：&lt;code>csr.conf&lt;/code>）前，记得用真实值替换掉尖括号中的值（例如：&lt;code>&amp;lt;MASTER_IP&amp;gt;&lt;/code>）。 注意：&lt;code>MASTER_CLUSTER_IP&lt;/code> 就像前一小节所述，它的值是 API 服务器的服务集群 IP。 下面的例子假定你的默认 DNS 域名为 &lt;code>cluster.local&lt;/code>。&lt;/p>
&lt;p>[ req ]
default_bits = 2048
prompt = no
default_md = sha256
req_extensions = req_ext
distinguished_name = dn
[ dn ]
C = &lt;!-- raw HTML omitted -->
ST = &lt;!-- raw HTML omitted -->
L = &lt;!-- raw HTML omitted -->
O = &lt;!-- raw HTML omitted -->
OU = &lt;!-- raw HTML omitted -->
CN = &amp;lt;MASTER_IP&amp;gt;
[ req_ext ]
subjectAltName = @alt_names
[ alt_names ]
DNS.1 = kubernetes
DNS.2 = kubernetes.default
DNS.3 = kubernetes.default.svc
DNS.4 = kubernetes.default.svc.cluster
DNS.5 = kubernetes.default.svc.cluster.local
IP.1 = &amp;lt;MASTER_IP&amp;gt;
IP.2 = &amp;lt;MASTER_CLUSTER_IP&amp;gt;
[ v3_ext ]
authorityKeyIdentifier=keyid,issuer:always
basicConstraints=CA:FALSE
keyUsage=keyEncipherment,dataEncipherment
extendedKeyUsage=serverAuth,clientAuth
subjectAltName=@alt_names&lt;/p>
&lt;/li>
&lt;li>
&lt;p>基于上面的配置文件生成证书签名请求：&lt;/p>
&lt;p>openssl req -new -key server.key -out server.csr -config csr.conf&lt;/p>
&lt;/li>
&lt;li>
&lt;p>基于 ca.key、ca.key 和 server.csr 等三个文件生成服务端证书：&lt;/p>
&lt;p>openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key &lt;br>
-CAcreateserial -out server.crt -days 10000 &lt;br>
-extensions v3_ext -extfile csr.conf&lt;/p>
&lt;/li>
&lt;li>
&lt;p>查看证书：&lt;/p>
&lt;p>openssl x509 -noout -text -in ./server.crt&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>最后，为 API 服务器添加相同的启动参数。&lt;/p>
&lt;h3 id="cfssl">cfssl&lt;/h3>
&lt;p>&lt;strong>cfssl&lt;/strong> 是另一个用于生成证书的工具。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>下载、解压并准备如下所示的命令行工具。 注意：你可能需要根据所用的硬件体系架构和 cfssl 版本调整示例命令。&lt;/p>
&lt;p>curl -L &lt;a href="https://github.com/cloudflare/cfssl/releases/download/v1.5.0/cfssl_1.5.0_linux_amd64">https://github.com/cloudflare/cfssl/releases/download/v1.5.0/cfssl_1.5.0_linux_amd64&lt;/a> -o cfssl
chmod +x cfssl
curl -L &lt;a href="https://github.com/cloudflare/cfssl/releases/download/v1.5.0/cfssljson_1.5.0_linux_amd64">https://github.com/cloudflare/cfssl/releases/download/v1.5.0/cfssljson_1.5.0_linux_amd64&lt;/a> -o cfssljson
chmod +x cfssljson
curl -L &lt;a href="https://github.com/cloudflare/cfssl/releases/download/v1.5.0/cfssl-certinfo_1.5.0_linux_amd64">https://github.com/cloudflare/cfssl/releases/download/v1.5.0/cfssl-certinfo_1.5.0_linux_amd64&lt;/a> -o cfssl-certinfo
chmod +x cfssl-certinfo&lt;/p>
&lt;/li>
&lt;li>
&lt;p>创建一个目录，用它保存所生成的构件和初始化 cfssl：&lt;/p>
&lt;p>mkdir cert
cd cert
../cfssl print-defaults config &amp;gt; config.json
../cfssl print-defaults csr &amp;gt; csr.json&lt;/p>
&lt;/li>
&lt;li>
&lt;p>创建一个 JSON 配置文件来生成 CA 文件，例如：&lt;code>ca-config.json&lt;/code>：&lt;/p>
&lt;p>{
&amp;ldquo;signing&amp;rdquo;: {
&amp;ldquo;default&amp;rdquo;: {
&amp;ldquo;expiry&amp;rdquo;: &amp;ldquo;8760h&amp;rdquo;
},
&amp;ldquo;profiles&amp;rdquo;: {
&amp;ldquo;kubernetes&amp;rdquo;: {
&amp;ldquo;usages&amp;rdquo;: [
&amp;ldquo;signing&amp;rdquo;,
&amp;ldquo;key encipherment&amp;rdquo;,
&amp;ldquo;server auth&amp;rdquo;,
&amp;ldquo;client auth&amp;rdquo;
],
&amp;ldquo;expiry&amp;rdquo;: &amp;ldquo;8760h&amp;rdquo;
}
}
}
}&lt;/p>
&lt;/li>
&lt;li>
&lt;p>创建一个 JSON 配置文件，用于 CA 证书签名请求（CSR），例如：&lt;code>ca-csr.json&lt;/code>。 确认用你需要的值替换掉尖括号中的值。&lt;/p>
&lt;p>{
&amp;ldquo;CN&amp;rdquo;: &amp;ldquo;kubernetes&amp;rdquo;,
&amp;ldquo;key&amp;rdquo;: {
&amp;ldquo;algo&amp;rdquo;: &amp;ldquo;rsa&amp;rdquo;,
&amp;ldquo;size&amp;rdquo;: 2048
},
&amp;ldquo;names&amp;rdquo;:[{
&amp;ldquo;C&amp;rdquo;: &amp;ldquo;&lt;!-- raw HTML omitted -->&amp;rdquo;,
&amp;ldquo;ST&amp;rdquo;: &amp;ldquo;&lt;!-- raw HTML omitted -->&amp;rdquo;,
&amp;ldquo;L&amp;rdquo;: &amp;ldquo;&lt;!-- raw HTML omitted -->&amp;rdquo;,
&amp;ldquo;O&amp;rdquo;: &amp;ldquo;&lt;!-- raw HTML omitted -->&amp;rdquo;,
&amp;ldquo;OU&amp;rdquo;: &amp;ldquo;&lt;!-- raw HTML omitted -->&amp;rdquo;
}]
}&lt;/p>
&lt;/li>
&lt;li>
&lt;p>生成 CA 秘钥文件（&lt;code>ca-key.pem&lt;/code>）和证书文件（&lt;code>ca.pem&lt;/code>）：&lt;/p>
&lt;p>../cfssl gencert -initca ca-csr.json | ../cfssljson -bare ca&lt;/p>
&lt;/li>
&lt;li>
&lt;p>创建一个 JSON 配置文件，用来为 API 服务器生成秘钥和证书，例如：&lt;code>server-csr.json&lt;/code>。 确认用你需要的值替换掉尖括号中的值。&lt;code>MASTER_CLUSTER_IP&lt;/code> 是为 API 服务器 指定的服务集群 IP，就像前面小节描述的那样。 以下示例假定你的默认 DSN 域名为&lt;code>cluster.local&lt;/code>。&lt;/p>
&lt;p>{
&amp;ldquo;CN&amp;rdquo;: &amp;ldquo;kubernetes&amp;rdquo;,
&amp;ldquo;hosts&amp;rdquo;: [
&amp;ldquo;127.0.0.1&amp;rdquo;,
&amp;ldquo;&amp;lt;MASTER_IP&amp;gt;&amp;rdquo;,
&amp;ldquo;&amp;lt;MASTER_CLUSTER_IP&amp;gt;&amp;rdquo;,
&amp;ldquo;kubernetes&amp;rdquo;,
&amp;ldquo;kubernetes.default&amp;rdquo;,
&amp;ldquo;kubernetes.default.svc&amp;rdquo;,
&amp;ldquo;kubernetes.default.svc.cluster&amp;rdquo;,
&amp;ldquo;kubernetes.default.svc.cluster.local&amp;rdquo;
],
&amp;ldquo;key&amp;rdquo;: {
&amp;ldquo;algo&amp;rdquo;: &amp;ldquo;rsa&amp;rdquo;,
&amp;ldquo;size&amp;rdquo;: 2048
},
&amp;ldquo;names&amp;rdquo;: [{
&amp;ldquo;C&amp;rdquo;: &amp;ldquo;&lt;!-- raw HTML omitted -->&amp;rdquo;,
&amp;ldquo;ST&amp;rdquo;: &amp;ldquo;&lt;!-- raw HTML omitted -->&amp;rdquo;,
&amp;ldquo;L&amp;rdquo;: &amp;ldquo;&lt;!-- raw HTML omitted -->&amp;rdquo;,
&amp;ldquo;O&amp;rdquo;: &amp;ldquo;&lt;!-- raw HTML omitted -->&amp;rdquo;,
&amp;ldquo;OU&amp;rdquo;: &amp;ldquo;&lt;!-- raw HTML omitted -->&amp;rdquo;
}]
}&lt;/p>
&lt;/li>
&lt;li>
&lt;p>为 API 服务器生成秘钥和证书，默认会分别存储为&lt;code>server-key.pem&lt;/code> 和 &lt;code>server.pem&lt;/code> 两个文件。&lt;/p>
&lt;p>../cfssl gencert -ca=ca.pem -ca-key=ca-key.pem &lt;br>
&amp;ndash;config=ca-config.json -profile=kubernetes &lt;br>
server-csr.json | ../cfssljson -bare server&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="分发自签名的-ca-证书">分发自签名的 CA 证书&lt;/h2>
&lt;p>客户端节点可能不认可自签名 CA 证书的有效性。 对于非生产环境，或者运行在公司防火墙后的环境，你可以分发自签名的 CA 证书到所有客户节点，并刷新本地列表以使证书生效。
在每一个客户节点，执行以下操作：&lt;/p>
&lt;pre>&lt;code>sudo cp ca.crt /usr/local/share/ca-certificates/kubernetes.crt
sudo update-ca-certificates
Updating certificates in /etc/ssl/certs...
1 added, 0 removed; done.
Running hooks in /etc/ca-certificates/update.d....
done.
&lt;/code>&lt;/pre>
&lt;h2 id="证书-api">证书 API&lt;/h2>
&lt;p>你可以通过 &lt;code>certificates.k8s.io&lt;/code> API 提供 x509 证书，用来做身份验证， 如&lt;a href="https://kubernetes.io/zh/docs/tasks/tls/managing-tls-in-a-cluster">本&lt;/a>文档所述。&lt;/p></description></item></channel></rss>