<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – 示例</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/kubernetes-%E5%BC%80%E5%8F%91/client-libraries%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BA%93/%E7%A4%BA%E4%BE%8B/</link><description>Recent content in 示例 on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/kubernetes-%E5%BC%80%E5%8F%91/client-libraries%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BA%93/%E7%A4%BA%E4%BE%8B/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: 使用 Go 构建 Kubernetes 应用</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/kubernetes-%E5%BC%80%E5%8F%91/client-libraries%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BA%93/%E7%A4%BA%E4%BE%8B/%E4%BD%BF%E7%94%A8-go-%E6%9E%84%E5%BB%BA-kubernetes-%E5%BA%94%E7%94%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/kubernetes-%E5%BC%80%E5%8F%91/client-libraries%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BA%93/%E7%A4%BA%E4%BE%8B/%E4%BD%BF%E7%94%A8-go-%E6%9E%84%E5%BB%BA-kubernetes-%E5%BA%94%E7%94%A8/</guid><description>
&lt;p>&lt;a href="https://mp.weixin.qq.com/s/849NTst8GGFMiZZQQgrgUg">使用 Go 构建 Kubernetes 应用&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/b2d2e933-67a9-43d6-8061-144b115d0818/640" alt="">&lt;/p>
&lt;p>Kubernetes 项目使用 Go 语言编写，对 Go api 原生支持非常便捷。本篇文章介绍了如何使用 kubernetes client-go 实践一个简单的与 K8s 交互过程。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/b2d2e933-67a9-43d6-8061-144b115d0818/640" alt="">&lt;/p>
&lt;h2 id="kubernetes-的-go-client-项目client-go">kubernetes 的 Go Client 项目（client-go）&lt;/h2>
&lt;p>go client 是 k8s client 中最古老的一个，具有很多特性。Client-go 没有使用 Swagger 生成器，它使用的是源于 k8s 项目中的源代码生成工具，这个工具的目的是要生成 k8s 风格的对象和序列化程序。&lt;/p>
&lt;p>该项目是一组包的集合，该包能够满足从 REST 风格的原语到复杂 client 的不同的编程需求。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/b2d2e933-67a9-43d6-8061-144b115d0818/640" alt="">&lt;/p>
&lt;p>RESTClient 是一个基础包，它使用&lt;code>api-machinery&lt;/code>库中的类型作为一组 REST 原语提供对 API 的访问。作为对&lt;code>RESTClient&lt;/code>之上的抽象，_clientset_将是你创建 k8s client 工具的起点。它暴露了公开化的 API 资源及其对应的序列化。&lt;/p>
&lt;p>注意：在 client-go 中还包含了如 discovery, dynamic, 和 scale 这样的包，虽然本次不介绍这些包，但是了解它们的能力还是很重要的。&lt;/p>
&lt;h2 id="一个简单的-k8s-client-工具">一个简单的 k8s client 工具&lt;/h2>
&lt;p>让我们再次回顾我们将要构建的工具，来说明 go client 的用法。&lt;strong>pvcwatch&lt;/strong>是一个简单的命令行工具，它可以监听集群中声明的 PVC 容量。当总数到达一个阈值的时候，他会采取一个 action（在这个例子中是在屏幕上通知显示）&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/b2d2e933-67a9-43d6-8061-144b115d0818/640" alt="">&lt;/p>
&lt;p>&lt;strong>你能在 github 上找到完整的例子&lt;/strong>&lt;/p>
&lt;p>这个例子是为了展示 k8s 的 go client 的以下几个方面：- 如何去连接 - 资源列表的检索和遍历 - 对象监听&lt;/p>
&lt;h2 id="setup">Setup&lt;/h2>
&lt;p>client-go 支持 Godep 和 dep 作为 vendor 的管理程序，我觉得 dep 便于使用所以继续使用 dep。例如，以下是 client-go v6.0 和 k8s API v1.9 所需最低限度的&lt;code>Gopkg.toml&lt;/code>。&lt;/p>
&lt;p>&lt;code>[[constraint]] name = &amp;quot;k8s.io/api&amp;quot; version = &amp;quot;kubernetes-1.9.0&amp;quot; [[constraint]] name = &amp;quot;k8s.io/apimachinery&amp;quot; version = &amp;quot;kubernetes-1.9.0&amp;quot; [[constraint]] name = &amp;quot;k8s.io/client-go&amp;quot; version = &amp;quot;6.0.0&amp;quot;&lt;/code>&lt;/p>
&lt;p>运行&lt;code>dep ensure&lt;/code>确保剩下的工作。&lt;/p>
&lt;h2 id="连接-api-server">连接 API Server&lt;/h2>
&lt;p>我们 Go client 的第一步就是建立一个与 API Server 的连接。为了做到这一点，我们要使用实体包中的&lt;code>clientcmd&lt;/code>，如下代码所示：&lt;/p>
&lt;p>&lt;code>import ( ...     &amp;quot;k8s.io/client-go/tools/clientcmd&amp;quot; ) func main() {     kubeconfig := filepath.Join(os.Getenv(&amp;quot;HOME&amp;quot;), &amp;quot;.kube&amp;quot;, &amp;quot;config&amp;quot;,     )     config, err := clientcmd.BuildConfigFromFlags(&amp;quot;&amp;quot;, kubeconfig)     if err != nil {         log.Fatal(err)     } ... }&lt;/code>&lt;/p>
&lt;p>_Client-go_通过提供实体功能来从不同的上下文中获取你的配置，从而使之成为一个不重要的任务。&lt;/p>
&lt;h3 id="从-config-文件">从 config 文件&lt;/h3>
&lt;p>正如上面的例子所做的那样，你能从 kubeconfig 文件启动配置来连接 API server。当你的代码运行在集群之外的时候这是一个理想的方案。&lt;code>clientcmd.BuildConfigFromFlags(&amp;quot;&amp;quot;, configFile)&lt;/code>&lt;/p>
&lt;h3 id="从集群">从集群&lt;/h3>
&lt;p>当你的代码运行在这个集群中的时候，你可以用上面的函数并且不使用任何参数，这个函数就会通过集群的信息去连接 api server。&lt;/p>
&lt;p>&lt;code>clientcmd.BuildConfigFromFlags(&amp;quot;&amp;quot;,&amp;quot;&amp;quot;)&lt;/code>&lt;/p>
&lt;p>或者我们可以通过 rest 包来创建一个使用集群中的信息去配置启动的 (译者注：k8s 里所有的 Pod 都会以 Volume 的方式自动挂载 k8s 里面默认的 ServiceAccount, 所以会用默认的 ServiceAccount 的授权信息)，如下：&lt;/p>
&lt;p>&lt;code>import &amp;quot;k8s.io/client-go/rest&amp;quot; ... rest.InClusterConfig()&lt;/code>&lt;/p>
&lt;h3 id="创建一个-clientset">创建一个 clientset&lt;/h3>
&lt;p>我们需要创建一个序列化的 client 为了让我们获取 API 对象。在&lt;code>kubernetes&lt;/code>包中的 Clientset 类型定义，提供了去访问公开的 API 对象的序列化 client，如下：&lt;/p>
&lt;p>&lt;code>type Clientset struct {     *authenticationv1beta1.AuthenticationV1beta1Client     *authorizationv1.AuthorizationV1Client ...     *corev1.CoreV1Client }&lt;/code>&lt;/p>
&lt;p>一旦我们有正确的配置连接，我们就能使用这个配置去初始化一个 clientset，如下：&lt;/p>
&lt;p>&lt;code>func main() {config, err := clientcmd.BuildConfigFromFlags(&amp;quot;&amp;quot;, kubeconfig)     ...     clientset, err := kubernetes.NewForConfig(config)     if err != nil {         log.Fatal(err)     } }&lt;/code>&lt;/p>
&lt;p>对于我们的例子，我们使用的是&lt;code>v1&lt;/code>的 API 对象。下一步，我们要使用 clientset 通过&lt;code>CoreV1()&lt;/code>去访问核心 api 资源，如下：&lt;/p>
&lt;p>&lt;code>func main() {     ...     clientset, err := kubernetes.NewForConfig(config)     if err != nil {         log.Fatal(err)     }     api := clientset.CoreV1() }&lt;/code>&lt;/p>
&lt;p>你能在这里看到可以获得 clientsets。&lt;/p>
&lt;h2 id="获取集群的-pvc-列表">获取集群的 PVC 列表&lt;/h2>
&lt;p>我们对 clientset 执行的最基本操作之一获取存储的 API 对象的列表。在我们的例子中，我们将要拿到一个 namespace 下面的 pvc 列表，如下：&lt;/p>
&lt;p>&lt;code>import ( ...     metav1 &amp;quot;k8s.io/apimachinery/pkg/apis/meta/v1&amp;quot; ) func main() {     var ns, label, field string     flag.StringVar(&amp;amp;ns, &amp;quot;namespace&amp;quot;, &amp;quot;&amp;quot;,&amp;quot;namespace&amp;quot;)     flag.StringVar(&amp;amp;label, &amp;quot;l&amp;quot;, &amp;quot;&amp;quot;,&amp;quot;Label selector&amp;quot;)     flag.StringVar(&amp;amp;field, &amp;quot;f&amp;quot;, &amp;quot;&amp;quot;,&amp;quot;Field selector&amp;quot;) ...     api := clientset.CoreV1()     // setup list options     listOptions := metav1.ListOptions{         LabelSelector: label,          FieldSelector: field,     }     pvcs, err := api.PersistentVolumeClaims(ns).List(listOptions)     if err != nil {         log.Fatal(err)     }     printPVCs(pvcs) ... }&lt;/code>&lt;/p>
&lt;p>在上面的代码中，我们使用&lt;code>ListOptions&lt;/code>指定 label 和 field selectors （还有 namespace）来缩小 pvc 列表的范围，这个结果的返回类型是&lt;code>v1.PeristentVolumeClaimList&lt;/code>。下面的这个代码展示了我们如何去遍历和打印从 api server 中获取的 pvc 列表。&lt;/p>
&lt;p>&lt;code>func printPVCs(pvcs *v1.PersistentVolumeClaimList) {     template := &amp;quot;%-32s%-8s%-8s\n&amp;quot;     fmt.Printf(template, &amp;quot;NAME&amp;quot;, &amp;quot;STATUS&amp;quot;, &amp;quot;CAPACITY&amp;quot;)     for _, pvc := range pvcs.Items {         quant := pvc.Spec.Resources.Requests[v1.ResourceStorage]         fmt.Printf(             template,              pvc.Name,              string(pvc.Status.Phase),              quant.String())     } }&lt;/code>&lt;/p>
&lt;h2 id="监听集群中-pvc">监听集群中 pvc&lt;/h2>
&lt;p>k8s 的 Go client 框架支持为指定的 API 对象在其生命周期事件中监听集群的能力，包括创建，更新，删除一个指定对象时候触发的&lt;code>CREATED&lt;/code>,&lt;code>MODIFIED&lt;/code>,&lt;code>DELETED&lt;/code>事件。对于我们的命令行工具，我们将要监听在集群中已经声明的 PVC 的总量。&lt;/p>
&lt;p>对于某一个 namespace，当 pvc 的容量到达了某一个阈值（比如说 200Gi），我们将会采取某个动作。为了简单起见，我们将要在屏幕上打印个通知。但是在更复杂的实现中，可以使用相同的办法触发一个自动操作。&lt;/p>
&lt;h3 id="启动监听功能">启动监听功能&lt;/h3>
&lt;p>现在让我们为&lt;code>PersistentVolumeClaim&lt;/code>这个资源通过&lt;code>Watch&lt;/code>去创建一个监听器。然后这个监听器通过&lt;code>ResultChan&lt;/code>从 go 的 channel 中访问事件通知。&lt;/p>
&lt;p>&lt;code>func main() { ...     api := clientset.CoreV1()     listOptions := metav1.ListOptions{         LabelSelector: label,          FieldSelector: field,     }     watcher, err :=api.PersistentVolumeClaims(ns).        Watch(listOptions)     if err != nil {       log.Fatal(err)     }     ch := watcher.ResultChan() ... }&lt;/code>&lt;/p>
&lt;h3 id="循环事件">循环事件&lt;/h3>
&lt;p>接下来我们将要处理资源事件。但是在我们处理事件之前，我们先声明&lt;code>resource.Quantity&lt;/code>类型的的两个变量为&lt;code>maxClaimsQuant&lt;/code>和&lt;code>totalClaimQuant&lt;/code>来分别表示我们的申请资源阈值（译者注：代表某个 ns 下集群中运行的 PVC 申请的上限）和运行总数。&lt;/p>
&lt;p>&lt;code>import(     &amp;quot;k8s.io/apimachinery/pkg/api/resource&amp;quot;     ... ) func main() {     var maxClaims string     flag.StringVar(&amp;amp;maxClaims, &amp;quot;max-claims&amp;quot;, &amp;quot;200Gi&amp;quot;,          &amp;quot;Maximum total claims to watch&amp;quot;)     var totalClaimedQuant resource.Quantity     maxClaimedQuant := resource.MustParse(maxClaims) ...     ch := watcher.ResultChan()     for event := range ch {         pvc, ok := event.Object.(*v1.PersistentVolumeClaim)         if !ok {             log.Fatal(&amp;quot;unexpected type&amp;quot;)         }         ...     } }&lt;/code>&lt;/p>
&lt;p>在上面的&lt;code>for-range&lt;/code>循环中，watcher 的 channel 用于处理来自服务器传入的通知。每个事件赋值给变量 event，并且&lt;code>event.Object&lt;/code>的类型被声明为&lt;code>PersistentVolumeClaim&lt;/code>类型，所以我们能从中提取出来。&lt;/p>
&lt;h3 id="处理-added-事件">处理 ADDED 事件&lt;/h3>
&lt;p>当一个新的 PVC 创建的时候，&lt;code>event.Type&lt;/code>的值被设置为&lt;code>watch.Added&lt;/code>。然后我们用下面的代码去获取新增的声明的容量（&lt;code>quant&lt;/code>），将其添加到正在运行的总容量中（&lt;code>totalClaimedQuant&lt;/code>）。最后我们去检查是否当前的容量总值大于当初设定的最大值 (&lt;code>maxClaimedQuant&lt;/code>)，如果大于的话我们就触发一个事件。&lt;/p>
&lt;p>&lt;code>import(     &amp;quot;k8s.io/apimachinery/pkg/watch&amp;quot;     ... ) func main() { ...     for event := range ch {pvc, ok := event.Object.(*v1.PersistentVolumeClaim)         if !ok {             log.Fatal(&amp;quot;unexpected type&amp;quot;)         }         quant := pvc.Spec.Resources.Requests[v1.ResourceStorage]         switch event.Type {             case watch.Added:                 totalClaimedQuant.Add(quant)                 log.Printf(&amp;quot;PVC %s added, claim size %s\n&amp;quot;,                      pvc.Name, quant.String())                 if totalClaimedQuant.Cmp(maxClaimedQuant) == 1 {                     log.Printf(                         &amp;quot;\nClaim overage reached: max %s at %s&amp;quot;,                         maxClaimedQuant.String(),                         totalClaimedQuant.String())                     // trigger action                     log.Println(&amp;quot;*** Taking action ***&amp;quot;)                 }             }         ...         }     } }&lt;/code>&lt;/p>
&lt;h3 id="处理-deleted-事件">处理 DELETED 事件&lt;/h3>
&lt;p>代码也会在 PVC 被删除的时候做出反应，它执行相反的逻辑以及把被删除的这个 PVC 申请的容量在正在运行的容量的总值里面减去。&lt;/p>
&lt;p>&lt;code>func main() { ...     for event := range ch {         ...         switch event.Type {         case watch.Deleted:             quant := pvc.Spec.Resources.Requests[v1.ResourceStorage]             totalClaimedQuant.Sub(quant)             log.Printf(&amp;quot;PVC %s removed, size %s\n&amp;quot;,                 pvc.Name, quant.String())             if totalClaimedQuant.Cmp(maxClaimedQuant) &amp;lt;= 0 {                 log.Printf(&amp;quot;Claim usage normal: max %s at %s&amp;quot;,                     maxClaimedQuant.String(),                     totalClaimedQuant.String(),                 )                 // trigger action                 log.Println(&amp;quot;*** Taking action ***&amp;quot;)             }         }         ...     } }&lt;/code>&lt;/p>
&lt;h2 id="运行程序">运行程序&lt;/h2>
&lt;p>当程序在一个运行中的集群被执行的时候，首先会列出 PVC 的列表。然后开始监听集群中新的&lt;code>PersistentVolumeClaim&lt;/code>事件。&lt;/p>
&lt;p>`$&amp;gt; ./pvcwatch&lt;/p>
&lt;p>Using kubeconfig:  /Users/vladimir/.kube/config&lt;/p>
&lt;p>&amp;mdash; PVCs &amp;mdash;-&lt;/p>
&lt;p>NAME                            STATUS  CAPACITY&lt;/p>
&lt;p>my-redis-redis                  Bound   50Gi&lt;/p>
&lt;p>my-redis2-redis                 Bound   100Gi&lt;/p>
&lt;hr>
&lt;p>Total capacity claimed: 150Gi&lt;/p>
&lt;hr>
&lt;p>&amp;mdash; PVC Watch (max claims 200Gi) &amp;mdash;-&lt;/p>
&lt;p>2018/02/13 21:55:03 PVC my-redis2-redis added, claim size 100Gi&lt;/p>
&lt;p>2018/02/13 21:55:03&lt;/p>
&lt;p>At 50.0% claim capcity (100Gi/200Gi)&lt;/p>
&lt;p>2018/02/13 21:55:03 PVC my-redis-redis added, claim size 50Gi&lt;/p>
&lt;p>2018/02/13 21:55:03&lt;/p>
&lt;p>At 75.0% claim capcity (150Gi/200Gi)&lt;/p>
&lt;p>`&lt;/p>
&lt;p>下面让我们部署一个应用到集群中，这个应用会申请&lt;code>75Gi&lt;/code>容量的存储。（例如，让我们通过 helm 去部署一个实例 influxdb）。&lt;/p>
&lt;p>&lt;code>helm install --name my-influx \ --set persistence.enabled=true,persistence.size=75Gi stable/influxdb&lt;/code>&lt;/p>
&lt;p>正如下面你看到的，我们的工具立刻反应出来有个新的声明以及一个警告因为当前的运行的声明总量已经大于我们设定的阈值。&lt;/p>
&lt;p>&lt;code>--- PVC Watch (max claims 200Gi) ---- ... 2018/02/13 21:55:03 At 75.0% claim capcity (150Gi/200Gi) 2018/02/13 22:01:29 PVC my-influx-influxdb added, claim size 75Gi 2018/02/13 22:01:29 Claim overage reached: max 200Gi at 225Gi 2018/02/13 22:01:29 *** Taking action *** 2018/02/13 22:01:29 At 112.5% claim capcity (225Gi/200Gi)&lt;/code>&lt;/p>
&lt;p>相反，从集群中删除一个 PVC 的时候，该工具会相应展示提示信息。&lt;/p>
&lt;p>&lt;code>... At 112.5% claim capcity (225Gi/200Gi) 2018/02/14 11:30:36 PVC my-redis2-redis removed, size 100Gi 2018/02/14 11:30:36 Claim usage normal: max 200Gi at 125Gi 2018/02/14 11:30:36 *** Taking action ***&lt;/code>&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>这篇文章是进行的系列的一部分, 使用 Go 语言的官方 k8s 客户端与 API server 进行交互。和以前一样，这个代码会逐步的去实现一个命令行工具去监听指定 namespace 下面的 PVC 的大小。这个代码实现了一个简单的监听列表去触发从服务器返回的资源事件。&lt;/p>
&lt;p>&lt;em>文章转自：Linux 爱好者&lt;/em>&lt;/p>
&lt;p>&lt;strong>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/b2d2e933-67a9-43d6-8061-144b115d0818/640" alt="">&lt;/strong>&lt;/p>
&lt;p>&lt;strong>Django Model 背后原理是什么？屡屡在面试中将你难倒的元编程究竟难在哪里？锁定 3 日（周三）晚 20:00，Python 大牛讲师 Wayne 带你搞懂 Django 背后的元编程！扫码报名立即参加 ↓↓&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/b2d2e933-67a9-43d6-8061-144b115d0818/640" alt="">&lt;/p></description></item><item><title>Docs: 在不生成 crd client 代码的情况下通过 client-go 增删改查 k8s crd 资源</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/kubernetes-%E5%BC%80%E5%8F%91/client-libraries%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BA%93/%E7%A4%BA%E4%BE%8B/%E5%9C%A8%E4%B8%8D%E7%94%9F%E6%88%90-crd-client-%E4%BB%A3%E7%A0%81%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E9%80%9A%E8%BF%87-client-go-%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5-k8s-crd-%E8%B5%84%E6%BA%90/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/kubernetes-%E5%BC%80%E5%8F%91/client-libraries%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BA%93/%E7%A4%BA%E4%BE%8B/%E5%9C%A8%E4%B8%8D%E7%94%9F%E6%88%90-crd-client-%E4%BB%A3%E7%A0%81%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E9%80%9A%E8%BF%87-client-go-%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5-k8s-crd-%E8%B5%84%E6%BA%90/</guid><description>
&lt;p>原文链接：&lt;a href="https://mozillazg.com/2020/07/k8s-kubernetes-client-go-list-get-create-update-patch-delete-crd-resource-without-generate-client-code-update-or-create-via-yaml.html">https://mozillazg.com/2020/07/k8s-kubernetes-client-go-list-get-create-update-patch-delete-crd-resource-without-generate-client-code-update-or-create-via-yaml.html&lt;/a>
2020-07-19&lt;/p>
&lt;p>&lt;a href="https://mozillazg.com/category/k8s.html">k8s&lt;/a> &lt;a href="https://mozillazg.com/tag/k8s.html">k8s&lt;/a> / &lt;a href="https://mozillazg.com/tag/kubernetes.html">kubernetes&lt;/a> / &lt;a href="https://mozillazg.com/tag/crd.html">crd&lt;/a> / &lt;a href="https://mozillazg.com/tag/client-go.html">client-go&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://mozillazg.com/2020/07/k8s-kubernetes-client-go-list-get-create-update-patch-delete-crd-resource-without-generate-client-code-update-or-create-via-yaml.html#hidid1">前言¶&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mozillazg.com/2020/07/k8s-kubernetes-client-go-list-get-create-update-patch-delete-crd-resource-without-generate-client-code-update-or-create-via-yaml.html#hidcrd">示例 CRD¶&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mozillazg.com/2020/07/k8s-kubernetes-client-go-list-get-create-update-patch-delete-crd-resource-without-generate-client-code-update-or-create-via-yaml.html#hidlist">list 资源¶&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mozillazg.com/2020/07/k8s-kubernetes-client-go-list-get-create-update-patch-delete-crd-resource-without-generate-client-code-update-or-create-via-yaml.html#hidget">get 资源¶&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mozillazg.com/2020/07/k8s-kubernetes-client-go-list-get-create-update-patch-delete-crd-resource-without-generate-client-code-update-or-create-via-yaml.html#hidcreate">create 资源¶&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mozillazg.com/2020/07/k8s-kubernetes-client-go-list-get-create-update-patch-delete-crd-resource-without-generate-client-code-update-or-create-via-yaml.html#hidupdate">update 资源¶&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mozillazg.com/2020/07/k8s-kubernetes-client-go-list-get-create-update-patch-delete-crd-resource-without-generate-client-code-update-or-create-via-yaml.html#hidpatch">patch 资源¶&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mozillazg.com/2020/07/k8s-kubernetes-client-go-list-get-create-update-patch-delete-crd-resource-without-generate-client-code-update-or-create-via-yaml.html#hiddelete">delete 资源¶&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mozillazg.com/2020/07/k8s-kubernetes-client-go-list-get-create-update-patch-delete-crd-resource-without-generate-client-code-update-or-create-via-yaml.html#hidid2">总结¶&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mozillazg.com/2020/07/k8s-kubernetes-client-go-list-get-create-update-patch-delete-crd-resource-without-generate-client-code-update-or-create-via-yaml.html#hidid3">参考资料¶&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>一般情况下管理 crd 资源都是通过由 &lt;a href="https://github.com/kubernetes/code-generator">code-generator&lt;/a> 生成的 crd client 来操作，但是有时也会有只想简单的操作一下资源不想去导入或生成 crd client 相关代码的需求，这里简单的记录一下在不生成 crd client 代码的情况下通过 client-go 增删改查 k8s crd 资源的方法。&lt;/p>
&lt;h2 id="示例-crd">示例 CRD&lt;/h2>
&lt;p>先来定义一个测试用的 CRD （其实已有的 Pod 之类的也是可以的，没啥特别的不一定要自定义 CRD，这里只是展示这个能力，因为一般如果是内置的资源的话，直接用内置的 client 和内置的资源 struct 就可以了）（这个 crd 来自 &lt;a href="https://kubernetes.io/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definitions/">官方文档&lt;/a> ）：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">apiextensions.k8s.io/v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">CustomResourceDefinition&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># name must match the spec fields below, and be in the form: &amp;lt;plural&amp;gt;.&amp;lt;group&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">crontabs.stable.example.com&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># group name to use for REST API: /apis/&amp;lt;group&amp;gt;/&amp;lt;version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">group&lt;/span>: &lt;span style="color:#ae81ff">stable.example.com&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># list of versions supported by this CustomResourceDefinition&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">versions&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Each version can be enabled/disabled by Served flag.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">served&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># One and only one version must be marked as the storage version.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">storage&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">schema&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">openAPIV3Schema&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">object&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">properties&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">object&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">properties&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">cronSpec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">replicas&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">integer&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># either Namespaced or Cluster&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">scope&lt;/span>: &lt;span style="color:#ae81ff">Namespaced&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">names&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># plural name to be used in the URL: /apis/&amp;lt;group&amp;gt;/&amp;lt;version&amp;gt;/&amp;lt;plural&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">plural&lt;/span>: &lt;span style="color:#ae81ff">crontabs&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># singular name to be used as an alias on the CLI and for display&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">singular&lt;/span>: &lt;span style="color:#ae81ff">crontab&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># kind is normally the CamelCased singular type. Your resource manifests use this.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">CronTab&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># shortNames allow shorter string to match your resource on the CLI&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">shortNames&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">ct&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后通过 kubectl 创建一下这个 crd ，然后再创建几个 crd 对象&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ kubectl apply -f crd.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>customresourcedefinition.apiextensions.k8s.io/crontabs.stable.example.com created
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ cat c.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: &lt;span style="color:#e6db74">&amp;#34;stable.example.com/v1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: CronTab
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: cron-1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cronSpec: &lt;span style="color:#e6db74">&amp;#34;* * * * */5&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> image: my-awesome-cron-image-1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: &lt;span style="color:#e6db74">&amp;#34;stable.example.com/v1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: CronTab
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: cron-2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cronSpec: &lt;span style="color:#e6db74">&amp;#34;* * * * */8&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> image: my-awesome-cron-image-2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: &lt;span style="color:#e6db74">&amp;#34;stable.example.com/v1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: CronTab
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: cron-3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cronSpec: &lt;span style="color:#e6db74">&amp;#34;* * * * */10&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> image: my-awesome-cron-image-3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ kubectl apply -f c.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>crontab.stable.example.com/cron-1 created
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>crontab.stable.example.com/cron-2 created
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>crontab.stable.example.com/cron-3 created
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ kubectl get crontab.stable.example.com
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NAME AGE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cron-1 9s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cron-2 9s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cron-3 9s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="list-资源">list 资源&lt;/h2>
&lt;p>首先是如何 list 前面创建的 3 个资源，类似 kubectl get &lt;a href="http://crontab.stable.example.com/">crontab.stable.example.com&lt;/a> 的效果。&lt;/p>
&lt;p>简单来说就是通过 &lt;a href="http://k8s.io/client-go/dynamic">k8s.io/client-go/dynamic&lt;/a> 里的 Interface 提供的方法来操作 crd 资源。 关键是怎么拿到 NamespaceableResourceInterface 实例以及把结果转换为自定义的结构体。&lt;/p>
&lt;p>完整的 list 资源的代码如下:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;encoding/json&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;os&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;path/filepath&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">metav1&lt;/span> &lt;span style="color:#e6db74">&amp;#34;k8s.io/apimachinery/pkg/apis/meta/v1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;k8s.io/apimachinery/pkg/runtime/schema&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;k8s.io/client-go/dynamic&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;k8s.io/client-go/tools/clientcmd&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">gvr&lt;/span> = &lt;span style="color:#a6e22e">schema&lt;/span>.&lt;span style="color:#a6e22e">GroupVersionResource&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Group&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;stable.example.com&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Version&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;v1&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Resource&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;crontabs&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">CrontabSpec&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">CronSpec&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;cronSpec&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Image&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;image&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Crontab&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">metav1&lt;/span>.&lt;span style="color:#a6e22e">TypeMeta&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;,inline&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">metav1&lt;/span>.&lt;span style="color:#a6e22e">ObjectMeta&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;metadata,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Spec&lt;/span> &lt;span style="color:#a6e22e">CrontabSpec&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;spec,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">CrontabList&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">metav1&lt;/span>.&lt;span style="color:#a6e22e">TypeMeta&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;,inline&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">metav1&lt;/span>.&lt;span style="color:#a6e22e">ListMeta&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;metadata,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Items&lt;/span> []&lt;span style="color:#a6e22e">Crontab&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;items&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">listCrontabs&lt;/span>(&lt;span style="color:#a6e22e">client&lt;/span> &lt;span style="color:#a6e22e">dynamic&lt;/span>.&lt;span style="color:#a6e22e">Interface&lt;/span>, &lt;span style="color:#a6e22e">namespace&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">CrontabList&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">list&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">client&lt;/span>.&lt;span style="color:#a6e22e">Resource&lt;/span>(&lt;span style="color:#a6e22e">gvr&lt;/span>).&lt;span style="color:#a6e22e">Namespace&lt;/span>(&lt;span style="color:#a6e22e">namespace&lt;/span>).&lt;span style="color:#a6e22e">List&lt;/span>(&lt;span style="color:#a6e22e">metav1&lt;/span>.&lt;span style="color:#a6e22e">ListOptions&lt;/span>{})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">data&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">list&lt;/span>.&lt;span style="color:#a6e22e">MarshalJSON&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">ctList&lt;/span> &lt;span style="color:#a6e22e">CrontabList&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">json&lt;/span>.&lt;span style="color:#a6e22e">Unmarshal&lt;/span>(&lt;span style="color:#a6e22e">data&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">ctList&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">ctList&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">kubeconfig&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">filepath&lt;/span>.&lt;span style="color:#a6e22e">Join&lt;/span>(&lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">Getenv&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;HOME&amp;#34;&lt;/span>), &lt;span style="color:#e6db74">&amp;#34;.kube&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;config&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">config&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">clientcmd&lt;/span>.&lt;span style="color:#a6e22e">BuildConfigFromFlags&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">kubeconfig&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> panic(&lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">client&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">dynamic&lt;/span>.&lt;span style="color:#a6e22e">NewForConfig&lt;/span>(&lt;span style="color:#a6e22e">config&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> panic(&lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">list&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">listCrontabs&lt;/span>(&lt;span style="color:#a6e22e">client&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;default&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> panic(&lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">list&lt;/span>.&lt;span style="color:#a6e22e">Items&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;%s %s %s %s\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Namespace&lt;/span>, &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Name&lt;/span>, &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Spec&lt;/span>.&lt;span style="color:#a6e22e">CronSpec&lt;/span>, &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Spec&lt;/span>.&lt;span style="color:#a6e22e">Image&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行结果如下:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ go run main.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>default cron-1 * * * * */5 my-awesome-cron-image-1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>default cron-2 * * * * */8 my-awesome-cron-image-2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>default cron-3 * * * * */10 my-awesome-cron-image-3
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>代码相对来说比较简单，有一个要注意的地方就是 gvr 里各个字段的值来自 crd 定义的 yaml 文件:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># group name to use for REST API: /apis/&amp;lt;group&amp;gt;/&amp;lt;version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 对应 Group 字段的值&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">group&lt;/span>: &lt;span style="color:#ae81ff">stable.example.com&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># list of versions supported by this CustomResourceDefinition&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">versions&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span> &lt;span style="color:#75715e"># 对应 Version 字段的可选值&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># ...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">names&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># plural name to be used in the URL: /apis/&amp;lt;group&amp;gt;/&amp;lt;version&amp;gt;/&amp;lt;plural&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 对应 Resource 字段的值&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">plural&lt;/span>: &lt;span style="color:#ae81ff">crontabs&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意：因为这个 crd 定义的是 namespace 资源，如果是非 namespace 资源的话，应当改为使用不指定 namespace 的方法:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">client&lt;/span>.&lt;span style="color:#a6e22e">Resource&lt;/span>(&lt;span style="color:#a6e22e">gvr&lt;/span>).&lt;span style="color:#a6e22e">List&lt;/span>(&lt;span style="color:#a6e22e">metav1&lt;/span>.&lt;span style="color:#a6e22e">ListOptions&lt;/span>{})
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="get-资源">get 资源&lt;/h2>
&lt;p>get 资源的方法也是通过 dynamic.Interface 来实现，关键是怎么把结果转换为上面定义的结构体， 关键代码示例如下:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">getCrontab&lt;/span>(&lt;span style="color:#a6e22e">client&lt;/span> &lt;span style="color:#a6e22e">dynamic&lt;/span>.&lt;span style="color:#a6e22e">Interface&lt;/span>, &lt;span style="color:#a6e22e">namespace&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Crontab&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">utd&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">client&lt;/span>.&lt;span style="color:#a6e22e">Resource&lt;/span>(&lt;span style="color:#a6e22e">gvr&lt;/span>).&lt;span style="color:#a6e22e">Namespace&lt;/span>(&lt;span style="color:#a6e22e">namespace&lt;/span>).&lt;span style="color:#a6e22e">Get&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span>, &lt;span style="color:#a6e22e">metav1&lt;/span>.&lt;span style="color:#a6e22e">GetOptions&lt;/span>{})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">data&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">utd&lt;/span>.&lt;span style="color:#a6e22e">MarshalJSON&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">ct&lt;/span> &lt;span style="color:#a6e22e">Crontab&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">json&lt;/span>.&lt;span style="color:#a6e22e">Unmarshal&lt;/span>(&lt;span style="color:#a6e22e">data&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">ct&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">ct&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">ct&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">getCrontab&lt;/span>(&lt;span style="color:#a6e22e">client&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;default&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;cron-1&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> panic(&lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;%s %s %s %s\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">ct&lt;/span>.&lt;span style="color:#a6e22e">Namespace&lt;/span>, &lt;span style="color:#a6e22e">ct&lt;/span>.&lt;span style="color:#a6e22e">Name&lt;/span>, &lt;span style="color:#a6e22e">ct&lt;/span>.&lt;span style="color:#a6e22e">Spec&lt;/span>.&lt;span style="color:#a6e22e">CronSpec&lt;/span>, &lt;span style="color:#a6e22e">ct&lt;/span>.&lt;span style="color:#a6e22e">Spec&lt;/span>.&lt;span style="color:#a6e22e">Image&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行效果:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-latex" data-lang="latex">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">$&lt;/span> go run main.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>default cron&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#f92672">*/&lt;/span>&lt;span style="color:#ae81ff">5&lt;/span> my&lt;span style="color:#f92672">-&lt;/span>awesome&lt;span style="color:#f92672">-&lt;/span>cron&lt;span style="color:#f92672">-&lt;/span>image&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="create-资源">create 资源&lt;/h2>
&lt;p>create 资源的方法也是通过 dynamic.Interface 来实现 ，这里主要记录一下怎么基于 yaml 文本的内容来创建资源。&lt;/p>
&lt;p>关键代码示例如下:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-latex" data-lang="latex">&lt;span style="display:flex;">&lt;span>func createCrontabWithYaml(client dynamic.Interface, namespace string, yamlData string) (*Crontab, error) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> decoder := yaml.NewDecodingSerializer(unstructured.UnstructuredJSONScheme)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> obj := &amp;amp;unstructured.Unstructured{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> if _, _, err := decoder.Decode([]byte(yamlData), &amp;amp;gvk, obj); err != nil {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> return nil, err
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> utd, err := client.Resource(gvr).Namespace(namespace).Create(obj, metav1.CreateOptions{})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> if err != nil {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> return nil, err
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> data, err := utd.MarshalJSON()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> if err != nil {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> return nil, err
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> var ct Crontab
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> if err := json.Unmarshal(data, &amp;amp;ct); err != nil {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> return nil, err
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> return &amp;amp;ct, nil
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>func main() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> // ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> createData := `
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: &amp;#34;stable.example.com/v1&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: CronTab
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: cron-4
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cronSpec: &amp;#34;* * * * */15&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> image: my-awesome-cron-image-4
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>`
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ct, err := createCrontabWithYaml(client, &amp;#34;default&amp;#34;, createData)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> if err != nil {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> panic(err)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fmt.Printf(&amp;#34;&lt;span style="color:#75715e">%s %s %s %s\n&amp;#34;, ct.Namespace, ct.Name, ct.Spec.CronSpec, ct.Spec.Image)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行效果:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-latex" data-lang="latex">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">$&lt;/span> go run main.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>default cron&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">4&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#f92672">*/&lt;/span>&lt;span style="color:#ae81ff">15&lt;/span> my&lt;span style="color:#f92672">-&lt;/span>awesome&lt;span style="color:#f92672">-&lt;/span>cron&lt;span style="color:#f92672">-&lt;/span>image&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">$&lt;/span> kubectl get crontab.stable.example.com cron-4
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NAME AGE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cron-4 5m33s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="update-资源">update 资源&lt;/h2>
&lt;p>update 资源的方法也是通过 dynamic.Interface 来实现 ，这里主要记录一下怎么基于 yaml 文本的内容来更新资源。&lt;/p>
&lt;p>关键代码示例如下:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-latex" data-lang="latex">&lt;span style="display:flex;">&lt;span>func updateCrontabWithYaml(client dynamic.Interface, namespace string, yamlData string) (*Crontab, error) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> decoder := yaml.NewDecodingSerializer(unstructured.UnstructuredJSONScheme)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> obj := &amp;amp;unstructured.Unstructured{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> if _, _, err := decoder.Decode([]byte(yamlData), &amp;amp;gvk, obj); err != nil {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> return nil, err
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> utd, err := client.Resource(gvr).Namespace(namespace).Get(obj.GetName(), metav1.GetOptions{})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> if err != nil {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> return nil, err
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> obj.SetResourceVersion(utd.GetResourceVersion())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> utd, err = client.Resource(gvr).Namespace(namespace).Update(obj, metav1.UpdateOptions{})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> if err != nil {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> return nil, err
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> data, err := utd.MarshalJSON()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> if err != nil {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> return nil, err
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> var ct Crontab
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> if err := json.Unmarshal(data, &amp;amp;ct); err != nil {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> return nil, err
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> return &amp;amp;ct, nil
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>func main() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> // ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> updateData := `
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: &amp;#34;stable.example.com/v1&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: CronTab
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: cron-2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cronSpec: &amp;#34;* * * * */15&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> image: my-awesome-cron-image-2-update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>`
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ct, err := updateCrontabWithYaml(client, &amp;#34;default&amp;#34;, updateData)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> if err != nil {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> panic(err)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fmt.Printf(&amp;#34;&lt;span style="color:#75715e">%s %s %s %s\n&amp;#34;, ct.Namespace, ct.Name, ct.Spec.CronSpec, ct.Spec.Image)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行效果:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-latex" data-lang="latex">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">$&lt;/span> kubectl get crontab.stable.example.com cron&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">-&lt;/span>o jsonpath&lt;span style="color:#f92672">=&lt;/span>&amp;#39;{.spec}&amp;#39;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>map&lt;span style="color:#f92672">[&lt;/span>cronSpec:&lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#f92672">*/&lt;/span>&lt;span style="color:#ae81ff">8&lt;/span> image:my&lt;span style="color:#f92672">-&lt;/span>awesome&lt;span style="color:#f92672">-&lt;/span>cron&lt;span style="color:#f92672">-&lt;/span>image&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">$&lt;/span> go run main.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>default cron-2 * * * * */15 my-awesome-cron-image-2-update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">$&lt;/span> kubectl get crontab.stable.example.com cron&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">-&lt;/span>o jsonpath&lt;span style="color:#f92672">=&lt;/span>&amp;#39;{.spec}&amp;#39;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>map&lt;span style="color:#f92672">[&lt;/span>cronSpec:&lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#f92672">*/&lt;/span>&lt;span style="color:#ae81ff">15&lt;/span> image:my&lt;span style="color:#f92672">-&lt;/span>awesome&lt;span style="color:#f92672">-&lt;/span>cron&lt;span style="color:#f92672">-&lt;/span>image&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">-&lt;/span>update&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="patch-资源">patch 资源&lt;/h2>
&lt;p>patch 资源的方法跟 patch pod 之类的代码类似，关键代码示例如下:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-latex" data-lang="latex">&lt;span style="display:flex;">&lt;span>func patchCrontab(client dynamic.Interface, namespace, name string, pt types.PatchType, data []byte) error {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _, err := client.Resource(gvr).Namespace(namespace).Patch(name, pt, data, metav1.PatchOptions{})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> return err
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>func main() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>// ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>patchData := []byte(`{&amp;#34;spec&amp;#34;: {&amp;#34;image&amp;#34;: &amp;#34;my-awesome-cron-image-1-patch&amp;#34;}}`)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>if err := patchCrontab(client, &amp;#34;default&amp;#34;, &amp;#34;cron-1&amp;#34;, types.MergePatchType, patchData); err != nil {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> panic(err)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行效果:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-latex" data-lang="latex">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">$&lt;/span> kubectl get crontab.stable.example.com cron&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">-&lt;/span>o jsonpath&lt;span style="color:#f92672">=&lt;/span>&amp;#39;{.spec.image}&amp;#39;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>my&lt;span style="color:#f92672">-&lt;/span>awesome&lt;span style="color:#f92672">-&lt;/span>cron&lt;span style="color:#f92672">-&lt;/span>image&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">$&lt;/span> go run main.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">$&lt;/span> kubectl get crontab.stable.example.com cron&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">-&lt;/span>o jsonpath&lt;span style="color:#f92672">=&lt;/span>&amp;#39;{.spec.image}&amp;#39;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>my&lt;span style="color:#f92672">-&lt;/span>awesome&lt;span style="color:#f92672">-&lt;/span>cron&lt;span style="color:#f92672">-&lt;/span>image&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">-&lt;/span>patch
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="delete-资源">delete 资源&lt;/h2>
&lt;p>delete 资源相对来说简单很多，关键代码示例如下:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-latex" data-lang="latex">&lt;span style="display:flex;">&lt;span>func deleteCrontab(client dynamic.Interface, namespace string, name string) error {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> return client.Resource(gvr).Namespace(namespace).Delete(name, nil)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>func main() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> // ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> if err := deleteCrontab(client, &amp;#34;default&amp;#34;, &amp;#34;cron-3&amp;#34;); err != nil {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> panic(err)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>结果:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-latex" data-lang="latex">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">$&lt;/span> go run main.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">$&lt;/span> kubectl get crontab.stable.example.com
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NAME AGE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cron-1 4h5m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cron-2 4h5m
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="总结">总结&lt;/h2>
&lt;p>简单记录了一下 list、get、create、update、patch、delete crd 资源的方法，其他方法大同小异就没记录了。 简单来说就是可以通过 dynamic.Interface 在不生成特定的 client 代码的情况下操作 crd 资源。&lt;/p>
&lt;p>BTW, 另外一个非常规的操作 crd 资源的办法就是直接请求 api server 的 rest api 而不是借助封装好的方法，后面有时间的时候再记录一下这个方法。&lt;/p>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/kubernetes/client-go/">kubernetes/client-go: Go client for Kubernetes.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/kubernetes/code-generator">kubernetes/code-generator: Generators for kube-like API types&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definitions/">Extend the Kubernetes API with CustomResourceDefinitions | Kubernetes&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/docs/tasks/administer-cluster/access-cluster-api/">Access Clusters Using the Kubernetes API | Kubernetes&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>