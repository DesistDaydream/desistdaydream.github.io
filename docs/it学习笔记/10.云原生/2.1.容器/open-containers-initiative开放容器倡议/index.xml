<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – Open Containers Initiative(开放容器倡议)</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.1.%E5%AE%B9%E5%99%A8/open-containers-initiative%E5%BC%80%E6%94%BE%E5%AE%B9%E5%99%A8%E5%80%A1%E8%AE%AE/</link><description>Recent content in Open Containers Initiative(开放容器倡议) on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.1.%E5%AE%B9%E5%99%A8/open-containers-initiative%E5%BC%80%E6%94%BE%E5%AE%B9%E5%99%A8%E5%80%A1%E8%AE%AE/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: OCI Image 规范</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.1.%E5%AE%B9%E5%99%A8/open-containers-initiative%E5%BC%80%E6%94%BE%E5%AE%B9%E5%99%A8%E5%80%A1%E8%AE%AE/oci-image-%E8%A7%84%E8%8C%83/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.1.%E5%AE%B9%E5%99%A8/open-containers-initiative%E5%BC%80%E6%94%BE%E5%AE%B9%E5%99%A8%E5%80%A1%E8%AE%AE/oci-image-%E8%A7%84%E8%8C%83/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/opencontainers/image-spec/blob/main/spec.md">GitHub 项目,opencontainers/image-spec/spec.md&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://segmentfault.com/a/1190000009309347">思否大佬&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/8wAv87DkJjE6fVEEmoQ60Q">https://mp.weixin.qq.com/s/8wAv87DkJjE6fVEEmoQ60Q&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://blog.k8s.li/Exploring-container-image.html">https://blog.k8s.li/Exploring-container-image.html&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>OCI Image 规范的目的，是为了让其他人按照规范创建交互工具，这个工具应该可以 &lt;strong>building(构建)&lt;/strong>、&lt;strong>transporting(传输)&lt;/strong>、&lt;strong>running(运行)&lt;/strong> 一个容器镜像。&lt;/p>
&lt;p>一个 OCI Image 应该由一个 Image Manifest、一个 Image Index(可选)、一组文件系统层、一个配置文件 组成。&lt;/p>
&lt;p>本质上，镜像的每一层就是一个一个的 tar.gz 的文件，当各种容器工具 pull 镜像时，会根据各种元数据文件，获取到这些 tar.gz 文件，下载到本地，并根据自身的实现解压他们。&lt;/p>
&lt;h2 id="oci-image-规范的组件">OCI Image 规范的组件&lt;/h2>
&lt;p>前文所描述的组成 OCI Image 规范的多个组成部分，又被细分为如下 &lt;strong>Components(组件)&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/opencontainers/image-spec/blob/master/image-layout.md">Image Layout&lt;/a> # 镜像内容的文件系统布局。说白了，镜像的主要内容就在这里。
&lt;ul>
&lt;li>&lt;a href="https://github.com/opencontainers/image-spec/blob/master/manifest.md">Image Manifest&lt;/a> # 描述构成容器镜像所具有的组件的文件。比如这个镜像有哪些 layer，额外的 annotation 信息。manifest 文件中保存了很多和当前平台有关的信息&lt;/li>
&lt;li>&lt;a href="https://github.com/opencontainers/image-spec/blob/master/config.md">Image Configuration&lt;/a> # 一个文档，该文档确定适用于转换为 &lt;a href="https://github.com/opencontainers/runtime-spec">runtime bundle&lt;/a> 运行时包的映像的层顺序和配置。保存了文件系统的层级信息（每个层级的 hash 值，以及历史信息），以及容器运行时需要的一些信息（比如环境变量、工作目录、命令参数、mount 列表），指定了镜像在某个特定平台和系统的配置。比较接近我们使用 docker inspect   看到的内容&lt;/li>
&lt;li>&lt;a href="https://github.com/opencontainers/image-spec/blob/master/image-index.md">Image Index&lt;/a> # 带注释的图像清单索引。指向不同平台的 manifest 文件，这个文件能保证一个镜像可以跨平台使用，每个平台拥有不同的 manifest 文件，使用 index 作为索引&lt;/li>
&lt;li>&lt;a href="https://github.com/opencontainers/image-spec/blob/main/layer.md">Filesystem Layer changeset&lt;/a> # 描述容器文件系统的变更集。以 layer 保存的文件系统，每个 layer 保存了和上层之间变化的部分，layer 应该保存哪些文件，怎么表示增加、修改和删除的文件等&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://github.com/opencontainers/image-spec/blob/master/conversion.md">Conversion&lt;/a> # 描述此翻译应如何发生。a document describing how this translation should occur&lt;/li>
&lt;li>&lt;a href="https://github.com/opencontainers/image-spec/blob/master/descriptor.md">Descriptor&lt;/a> # 描述所引用内容的类型，元数据和内容地址的引用。a reference that describes the type, metadata and content address of referenced content&lt;/li>
&lt;/ul>
&lt;p>Future versions of this specification may include the following OPTIONAL features:&lt;/p>
&lt;ul>
&lt;li>Signatures that are based on signing image content address&lt;/li>
&lt;li>Naming that is federated based on DNS and can be delegated&lt;/li>
&lt;/ul>
&lt;p>OCI Image 的所有组件其实都是一个个的文件，这些文件的名称都是其内容执行 sha256 后的值。每个文件都有一个 &lt;a href="https://github.com/opencontainers/image-spec/blob/master/media-types.md">&lt;strong>OCI Image Media Types&lt;/strong>&lt;/a>&lt;strong>(OCI 镜像媒体类型)&lt;/strong>，在官方文档中详细介绍了规范中各个组件的媒体类型&lt;/p>
&lt;h3 id="media-types媒体类型--oci-image-组件文件的打包格式">Media Types(媒体类型) # OCI Image 组件文件的打包格式&lt;/h3>
&lt;p>OCI Image 中的每个组件都会打包成一个文件。做过 web 开发的程序员对 media type 应该比较熟悉，简单点说，就是当客户端用 http 协议下载一个文件的时候，需要在 http 的首部带上 Accept 字段，告诉服务器端它支持哪些类型的文件，服务器返回文件的时候，需要在 http 的首部带上 Content-Type 字段，告诉客户端返回文件的类型，如 Accept: text/html,application/xml 和 Content-Type: text/html&lt;/p>
&lt;p>&lt;strong>OCI Media Type 文件类型:&lt;/strong>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Media Type&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>application/vnd.oci.descriptor.v1+json&lt;/td>
&lt;td>Content Descriptor 内容描述文件&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>application/vnd.oci.layout.header.v1+json&lt;/td>
&lt;td>OCI Layout 布局描述文件&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>application/vnd.oci.image.index.v1+json&lt;/td>
&lt;td>Image Index 高层次的镜像元信息文件&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>application/vnd.oci.image.manifest.v1+json&lt;/td>
&lt;td>Image Manifest 镜像元信息文件&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>application/vnd.oci.image.config.v1+json&lt;/td>
&lt;td>Image Config 镜像配置文件&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>application/vnd.oci.image.layer.v1.tar&lt;/td>
&lt;td>Image Layer 镜像层文件&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>application/vnd.oci.image.layer.v1.tar+gzip&lt;/td>
&lt;td>Image Layer 镜像层文件 gzip 压缩&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>application/vnd.oci.image.layer.nondistributable.v1.tar&lt;/td>
&lt;td>Image Layer 非内容寻址管理&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>application/vnd.oci.image.layer.nondistributable.v1.tar+gzip&lt;/td>
&lt;td>Image Layer, gzip 压缩 非内容寻址管理&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="image-layout">Image Layout&lt;/h1>
&lt;p>在开始介绍 layout 之前，先来回顾一下上一篇介绍 hello-world 时提到的从 register 服务器拉 image 的过程：&lt;/p>
&lt;ul>
&lt;li>首先获取 image 的 manifests&lt;/li>
&lt;li>根据 manifests 文件中 config 的 sha256 码，得到 image config 文件&lt;/li>
&lt;li>遍历 manifests 里面的所有 layer，根据其 sha256 码在本地找，如果找到对应的 layer，则跳过，否则从服务器取相应 layer 的压缩包&lt;/li>
&lt;li>等上面的所有步骤完成后，就会拼出完整的 image&lt;/li>
&lt;/ul>
&lt;p>从上面的过程中可以看出，我们从服务器上取 image 的时候不需要知道 image manifests 和 config 文件的名字，也不需要知道 layer 压缩包的名字。&lt;/p>
&lt;p>那么 image 从服务器拉下来后，在本地应该怎么存储呢？文件名称和目录结构应该是怎样的呢？OCI 也有相应的标准，名字叫 &lt;a href="https://github.com/opencontainers/image-spec/blob/master/image-layout.md">image layout&lt;/a>，有了这样的标准之后，我们就可以将整个 image 打成一个包，方便的在不同机器，不同容器平台之间导入导出。&lt;/p>
&lt;p>不过遗憾的是，OCI 的这个标准还在变化中，根据 github 上所看到的，v1.0.0-rc5 在 v1.0.0-rc4 上就有较大的修改，并且现在 docker 也不支持该标准。&lt;/p>
&lt;blockquote>
&lt;p>docker 对 OCI image layout 的支持还在开发中&lt;/p>
&lt;/blockquote>
&lt;p>下面是 &lt;a href="https://github.com/opencontainers/image-spec/blob/v1.0/image-layout.md#example-layout">v1.0 版本的镜像布局示例&lt;/a>：&lt;/p>
&lt;blockquote>
&lt;p>这里以通过 &lt;code>nerdctl image save lchdzh/k8s-debug:v1 -o k8s-debug.tar&lt;/code> 命令将 lchdzh/k8s-debug 镜像打包，打包后再通过 &lt;code>tar&lt;/code> 命令解包获取 OCI 格式的镜像文件。该镜像的构建详见[ kubernetes 的故障处理技巧](✏IT 学习笔记/☁️10.云原生/2.3.Kubernetes%20 容器编排系统/Kubernetes%20 管理/性能优化%20 与%20 故障处理/故障处理技巧.md 容器编排系统/Kubernetes 管理/性能优化 与 故障处理/故障处理技巧.md)&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># tree&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── blobs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   └── sha256
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── 02daccf1684b499e99c258348d492c5f0ea086174d2f0d430791d4f902ae4f71
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── 188c0c94c7c576fff0792aca7ec73d67a2f7f4cb3a6e53a84559337260b36964
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── 5f9b9d9c910519d9a4b1e06f031672e14acf9bcc288ed7e3ed3842916ed4394d
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── c690d4fd64d6622c3721a1db686c2e4cfb559dd1d9f9ff825584a8f56ec02c7f
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── df727e3daae2c57da7071b4056d328d4bbb9d6a913e469d8f07b58e35a5cff96
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   └── ee24b921ba004624b350e7f140e68c6a7d8297bb815b4ca526979a7e66cec15a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── index.json
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── manifest.json &lt;span style="color:#75715e"># 不用关注这里的这个文件，版本问题导致还有，其实应该没有&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── oci-layout
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>注意，这里 Image Layout 的根目录中多了一个 manifest.json 的目录，这是一个历史遗留问题，这里根目录中的 manifest.json 文件是旧 OCI 版本的 Image Manifest 文件。但是实际上，新版 OCI 标准的 Image Layout 的根目录中，不必包含 maniest.json 文件，该文件已经在 blobs 中了，其中的 Tags 信息则在 index.json 文件中。&lt;/p>
&lt;/blockquote>
&lt;p>可以看到，一个镜像通常由这几部分组成：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>blobs 目录&lt;/strong>&lt;/li>
&lt;li>&lt;strong>oci-layout 文件&lt;/strong>&lt;/li>
&lt;li>&lt;strong>index.json 文件(单平台是可选的)&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h2 id="blobs-目录">blobs 目录&lt;/h2>
&lt;p>blobs 目录可以说是一个镜像的核心内容，这些内容被组织成一个一个的 &lt;a href="https://en.wikipedia.org/wiki/Binary_large_object">Binary Large Object(二进制大对象，简称 blob)&lt;/a>，这些 blob 文件分为三类&lt;/p>
&lt;ul>
&lt;li>Image Manifest 文件&lt;/li>
&lt;li>Image Configuration 文件&lt;/li>
&lt;li>Image Filesystem Layer 文件
&lt;ul>
&lt;li>这是一个被打包、压缩后的镜像文件系统。也就是镜像中的所有实体文件。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>每个文件名都是其内容的 sha256 码&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># sha256sum ./blobs/sha256/*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>02daccf1684b499e99c258348d492c5f0ea086174d2f0d430791d4f902ae4f71 ./blobs/sha256/02daccf1684b499e99c258348d492c5f0ea086174d2f0d430791d4f902ae4f71
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>188c0c94c7c576fff0792aca7ec73d67a2f7f4cb3a6e53a84559337260b36964 ./blobs/sha256/188c0c94c7c576fff0792aca7ec73d67a2f7f4cb3a6e53a84559337260b36964
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>5f9b9d9c910519d9a4b1e06f031672e14acf9bcc288ed7e3ed3842916ed4394d ./blobs/sha256/5f9b9d9c910519d9a4b1e06f031672e14acf9bcc288ed7e3ed3842916ed4394d
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c690d4fd64d6622c3721a1db686c2e4cfb559dd1d9f9ff825584a8f56ec02c7f ./blobs/sha256/c690d4fd64d6622c3721a1db686c2e4cfb559dd1d9f9ff825584a8f56ec02c7f
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df727e3daae2c57da7071b4056d328d4bbb9d6a913e469d8f07b58e35a5cff96 ./blobs/sha256/df727e3daae2c57da7071b4056d328d4bbb9d6a913e469d8f07b58e35a5cff96
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ee24b921ba004624b350e7f140e68c6a7d8297bb815b4ca526979a7e66cec15a ./blobs/sha256/ee24b921ba004624b350e7f140e68c6a7d8297bb815b4ca526979a7e66cec15a
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>看一下每个文件的类型：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># file debian/blobs/sha256/*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>./blobs/sha256/02daccf1684b499e99c258348d492c5f0ea086174d2f0d430791d4f902ae4f71: gzip compressed data, original size modulo 2^32 &lt;span style="color:#ae81ff">30614528&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>./blobs/sha256/188c0c94c7c576fff0792aca7ec73d67a2f7f4cb3a6e53a84559337260b36964: gzip compressed data, original size modulo 2^32 &lt;span style="color:#ae81ff">5843456&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>./blobs/sha256/5f9b9d9c910519d9a4b1e06f031672e14acf9bcc288ed7e3ed3842916ed4394d: gzip compressed data, original size modulo 2^32 &lt;span style="color:#ae81ff">6679552&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>./blobs/sha256/c690d4fd64d6622c3721a1db686c2e4cfb559dd1d9f9ff825584a8f56ec02c7f: JSON data
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>./blobs/sha256/df727e3daae2c57da7071b4056d328d4bbb9d6a913e469d8f07b58e35a5cff96: gzip compressed data, original size modulo 2^32 &lt;span style="color:#ae81ff">105835008&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>./blobs/sha256/ee24b921ba004624b350e7f140e68c6a7d8297bb815b4ca526979a7e66cec15a: JSON data
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中 gzip 类型的就是镜像层的真实数据。另外两个一个是 Image Manifest 文件，一个是 Image Configuration 文件&lt;/p>
&lt;h3 id="image-manifest-文件">Image Manifest 文件&lt;/h3>
&lt;p>符合 &lt;a href="#9b1dd83b">Image Manifest 标准&lt;/a>的文件。这个入口文件描述了 OCI 镜像的实际配置和其中的 Layer 配置。如果有多层那 layers 数组中的元素也会相应增加。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">~]#&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">cat&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">blobs/sha&lt;/span>&lt;span style="color:#ae81ff">256&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">/ee&lt;/span>&lt;span style="color:#ae81ff">24&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">b&lt;/span>&lt;span style="color:#ae81ff">921&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">ba&lt;/span>&lt;span style="color:#ae81ff">004624&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">b&lt;/span>&lt;span style="color:#ae81ff">350e7&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">f&lt;/span>&lt;span style="color:#ae81ff">140e68&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">c&lt;/span>&lt;span style="color:#ae81ff">6&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">a&lt;/span>&lt;span style="color:#ae81ff">7&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">d&lt;/span>&lt;span style="color:#ae81ff">8297&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">bb&lt;/span>&lt;span style="color:#ae81ff">815&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">b&lt;/span>&lt;span style="color:#ae81ff">4&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">ca&lt;/span>&lt;span style="color:#ae81ff">526979&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">a&lt;/span>&lt;span style="color:#ae81ff">7e66&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">cec&lt;/span>&lt;span style="color:#ae81ff">15&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">a&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">|&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">jq&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;schemaVersion&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">2&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;mediaType&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;application/vnd.docker.distribution.manifest.v2+json&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;config&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;mediaType&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;application/vnd.docker.container.image.v1+json&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;size&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">2145&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;digest&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;sha256:c690d4fd64d6622c3721a1db686c2e4cfb559dd1d9f9ff825584a8f56ec02c7f&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;layers&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;mediaType&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;application/vnd.docker.image.rootfs.diff.tar.gzip&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;size&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">2796860&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;digest&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;sha256:188c0c94c7c576fff0792aca7ec73d67a2f7f4cb3a6e53a84559337260b36964&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;mediaType&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;application/vnd.docker.image.rootfs.diff.tar.gzip&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;size&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">33480758&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;digest&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;sha256:df727e3daae2c57da7071b4056d328d4bbb9d6a913e469d8f07b58e35a5cff96&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;mediaType&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;application/vnd.docker.image.rootfs.diff.tar.gzip&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;size&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">2226823&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;digest&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;sha256:5f9b9d9c910519d9a4b1e06f031672e14acf9bcc288ed7e3ed3842916ed4394d&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;mediaType&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;application/vnd.docker.image.rootfs.diff.tar.gzip&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;size&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">12125653&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;digest&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;sha256:02daccf1684b499e99c258348d492c5f0ea086174d2f0d430791d4f902ae4f71&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="image-configuration-文件">Image Configuration 文件&lt;/h3>
&lt;p>符合 &lt;a href="#iJRmF">Image Configuration 标准&lt;/a>的文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">~]#&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">cat&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">blobs/sha&lt;/span>&lt;span style="color:#ae81ff">256&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">/c&lt;/span>&lt;span style="color:#ae81ff">690&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">d&lt;/span>&lt;span style="color:#ae81ff">4&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">fd&lt;/span>&lt;span style="color:#ae81ff">64&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">d&lt;/span>&lt;span style="color:#ae81ff">6622&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">c&lt;/span>&lt;span style="color:#ae81ff">3721&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">a&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">db&lt;/span>&lt;span style="color:#ae81ff">686&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">c&lt;/span>&lt;span style="color:#ae81ff">2e4&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">cfb&lt;/span>&lt;span style="color:#ae81ff">559&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">dd&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">d&lt;/span>&lt;span style="color:#ae81ff">9&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">f&lt;/span>&lt;span style="color:#ae81ff">9&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">ff&lt;/span>&lt;span style="color:#ae81ff">825584&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">a&lt;/span>&lt;span style="color:#ae81ff">8&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">f&lt;/span>&lt;span style="color:#ae81ff">56&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">ec&lt;/span>&lt;span style="color:#ae81ff">02&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">c&lt;/span>&lt;span style="color:#ae81ff">7&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">f&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">|&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">jq&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;architecture&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;amd64&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;config&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Env&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;TZ=Asia/Shanghai&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;LC_ALL=C.UTF-8&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;LANG=C.UTF-8&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;LANGUAGE=C.UTF-8&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Entrypoint&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;/bin/bash&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;ArgsEscaped&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;OnBuild&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">null&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;created&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2021-08-17T16:38:31.174884751+08:00&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;history&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;created&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2020-10-22T02:19:24.33416307Z&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;created_by&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/bin/sh -c #(nop) ADD file:f17f65714f703db9012f00e5ec98d0b2541ff6147c2633f7ab9ba659d0c507f4 in / &amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;created&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2020-10-22T02:19:24.499382102Z&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;created_by&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/bin/sh -c #(nop) CMD [\&amp;#34;/bin/sh\&amp;#34;]&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;empty_layer&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;created&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2021-08-17T16:04:08.177778645+08:00&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;created_by&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;RUN /bin/sh -c sed -i &amp;#39;s/dl-cdn.alpinelinux.org/mirrors.tuna.tsinghua.edu.cn/g&amp;#39; /etc/apk/repositories &amp;amp;&amp;amp; apk update &amp;amp;&amp;amp; apk add --no-cache vim bash tcpdump curl wget strace mysql-client iproute2 redis jq iftop tzdata tar nmap bind-tools htop &amp;amp;&amp;amp; ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime # buildkit&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;comment&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;buildkit.dockerfile.v0&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;created&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2021-08-17T16:04:29.900220581+08:00&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;created_by&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;RUN /bin/sh -c wget -O /usr/bin/httpstat https://github.com/davecheney/httpstat/releases/download/v1.0.0/httpstat-linux-amd64-v1.0.0 &amp;amp;&amp;amp; chmod +x /usr/bin/httpstat # buildkit&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;comment&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;buildkit.dockerfile.v0&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;created&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2021-08-17T16:38:31.174884751+08:00&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;created_by&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;COPY /go/bin/grpcurl /usr/bin/grpcurl # buildkit&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;comment&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;buildkit.dockerfile.v0&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;created&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2021-08-17T16:38:31.174884751+08:00&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;created_by&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;ENV TZ=Asia/Shanghai LC_ALL=C.UTF-8 LANG=C.UTF-8 LANGUAGE=C.UTF-8&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;comment&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;buildkit.dockerfile.v0&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;empty_layer&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;created&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2021-08-17T16:38:31.174884751+08:00&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;created_by&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;ENTRYPOINT [\&amp;#34;/bin/bash\&amp;#34;]&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;comment&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;buildkit.dockerfile.v0&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;empty_layer&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;os&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;linux&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;rootfs&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;layers&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;diff_ids&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;sha256:ace0eda3e3be35a979cec764a3321b4c7d0b9e4bb3094d20d3ff6782961a8d54&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;sha256:4041c1a8637589d2c872e14d1068376c5e21bf96a837fa2225f91066e84b1e55&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;sha256:6f5211c02ff0b7e40b9ca7c5f62cc8732647b046e22cc5046053412d1fef97f6&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;sha256:6e63a43fa96c6ea85d34c23db4c28b76ecda01c03aa721f6a3355b04501bdc58&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="layers-文件">Layers 文件&lt;/h3>
&lt;p>符合 &lt;a href="#Qy2Oy">Filesystem Layers 标准&lt;/a>的文件。对于 Layers 类型的 blob 来说，这个文件的格式可以是 application/vnd.oci.image.layer.v1.tar 和 application/vnd.oci.image.layer.v1.tar+gzip 两种中的一种。&lt;/p>
&lt;p>同时标准还定义了 application/vnd.oci.image.layer.nondistributable.v1.tar 和 application/vnd.oci.image.layer.nondistributable.v1.tar+gzip 这两种对应于 nondistributable 的格式，其实这两种格式和前两种格式包含的内容是一样的，只是用不同的类型名称来区分它们的用途，对于名称中有 nondistributable 的 layer，标准要求这种类型的 layer 不能上传，只能下载。&lt;/p>
&lt;p>解压后会得到一个 rootfs。这就是这些镜像层的最真实内容&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># mkdir -p layers/{1,2,3,4}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># tar -xf blobs/sha256/02daccf1684b499e99c258348d492c5f0ea086174d2f0d430791d4f902ae4f71 -C layers/1/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># tar -xf blobs/sha256/188c0c94c7c576fff0792aca7ec73d67a2f7f4cb3a6e53a84559337260b36964 -C layers/2/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># tar -xf blobs/sha256/5f9b9d9c910519d9a4b1e06f031672e14acf9bcc288ed7e3ed3842916ed4394d -C layers/3/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># tar -xf blobs/sha256/df727e3daae2c57da7071b4056d328d4bbb9d6a913e469d8f07b58e35a5cff96 -C layers/4/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># tree -L 2 layers/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>layers/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   └── usr
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── bin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── dev
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── etc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── home
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── lib
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── media
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── mnt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── opt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── proc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── root
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── run
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── sbin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── srv
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── sys
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── tmp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── usr
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   └── var
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#ae81ff">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── etc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── root
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   └── usr
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── &lt;span style="color:#ae81ff">4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├── bin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├── etc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├── lib
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├── run
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├── sbin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├── usr
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └── var
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>解压到 layer/2 目录中的内容，就是 Dockerfile 中的：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">FROM&lt;/span>&lt;span style="color:#e6db74"> alpine:latest&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>解压到 layer/4 目录中的内容，就是 Dockerfile 中的：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">RUN&lt;/span> sed -i &lt;span style="color:#e6db74">&amp;#39;s/dl-cdn.alpinelinux.org/mirrors.tuna.tsinghua.edu.cn/g&amp;#39;&lt;/span> /etc/apk/repositories &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> apk update &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> apk add --no-cache vim bash tcpdump curl wget strace mysql-client iproute2 redis jq iftop tzdata tar nmap bind-tools htop &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>解压到 layer/3 目录中的内容，就是 Dockerfile 中的：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">RUN&lt;/span> wget -O /usr/bin/httpstat https://github.com/davecheney/httpstat/releases/download/v1.0.0/httpstat-linux-amd64-v1.0.0 &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> chmod +x /usr/bin/httpstat&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>解压到 layer/1 目录中的内容，就是 Dockerfile 中的：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">COPY&lt;/span> --from&lt;span style="color:#f92672">=&lt;/span>grpcurl /go/bin/grpcurl /usr/bin/grpcurl&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="通过镜像层文件启动容器">通过镜像层文件启动容器&lt;/h4>
&lt;p>在 OCI Runtime 规范中的 [Filesystem Bundle 示例](✏IT 学习笔记/☁️10.云原生/2.1.容器/Open%20Containers%20Initiative(开放容器倡议)/OCI%20Runtime%20 规范.md Runtime 规范.md)中，我们可以直接通过 Layers 文件以及 runc 工具，直接启动一个标准的符合 OCI 规范的简单容器。&lt;/p>
&lt;h2 id="oci-layout-文件">oci-layout 文件&lt;/h2>
&lt;p>一个 JSON 格式的文件，包含 image 标准的版本信息。也就是用于说明本镜像遵循的 OCI 标准的版本号&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># cat oci-layout&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;imageLayoutVersion&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;1.0.0&amp;#34;&lt;/span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="indexjson-文件">index.json 文件&lt;/h2>
&lt;p>一个符合 &lt;a href="#jCDjJ">Image Index 标准&lt;/a>的 JSON 格式的文件，关于本镜像布局的索引信息。&lt;/p>
&lt;p>index.json 文件更多的是用来定义一个镜像的多平台信息，比如，一个镜像在 Linux、Windows 或者 amd64、arm64 这种平台上运行时，应该使用的 Image Manifest 文件。同时还包含该镜像的名称以及 Tag。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">~]#&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">cat&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">index.json&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">|&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">jq&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;schemaVersion&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">2&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;manifests&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;mediaType&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;application/vnd.docker.distribution.manifest.v2+json&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;digest&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;sha256:ee24b921ba004624b350e7f140e68c6a7d8297bb815b4ca526979a7e66cec15a&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;size&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">1163&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;annotations&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;io.containerd.image.name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;docker.io/lchdzh/k8s-debug:v1&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;org.opencontainers.image.ref.name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;v1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>并不像示例中的文件格式一模一样，具体原因未知，估计是版本问题。也有可能是只有 Linxu amd64 这一个平台的版本。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;ul>
&lt;li>各种实现容器的工具自身是否还维护了一个镜像名称与 Index 文件的对应关系？待确认&lt;/li>
&lt;li>根据 Index 文件中的 &lt;code>manifests.digest&lt;/code> 字段找到本平台的 Manifest 文件&lt;/li>
&lt;li>根据 Manifest 文件中的 &lt;code>config.digest&lt;/code> 字段找到 Configuration 文件&lt;/li>
&lt;li>根据 Configuration，找到 Image Configuration，即可将 Manifest 中指定的各种 layers 组合起来，形成一个镜像，并根据其中的环境变量等信息，使用该镜像启动一个容器。&lt;/li>
&lt;/ul>
&lt;h1 id="filesystem-layers">Filesystem Layers&lt;/h1>
&lt;p>Filesystem Layer 包含了文件系统的信息，即该 image 包含了哪些文件，以及它们的属性和数据。比如在某一层增加了一个文件，那么这一层所包含的内容就是增加的这个文件的数据以及它的属性&lt;/p>
&lt;p>每个 filesystem layer 都包含了在上一个 layer 的改动情况，主要包含三方面的内容：&lt;/p>
&lt;ul>
&lt;li>变化类型：是增加、修改还是删除了文件&lt;/li>
&lt;li>文件类型：每个变化发生在哪种文件类型上&lt;/li>
&lt;li>文件属性：文件的修改时间、用户 ID、组 ID、RWX 权限等&lt;/li>
&lt;/ul>
&lt;p>最终，每个 Layers 都会被打包成如下几种媒体类型其中之一：&lt;/p>
&lt;ul>
&lt;li>application/vnd.oci.image.layer.v1.tar # 通常都是这种媒体类型&lt;/li>
&lt;li>application/vnd.oci.image.layer.v1.tar+gzip # 通常都是这种媒体类型&lt;/li>
&lt;li>application/vnd.oci.image.layer.v1.tar+zstd&lt;/li>
&lt;li>application/vnd.oci.image.layer.nondistributable.v1.tar&lt;/li>
&lt;li>application/vnd.oci.image.layer.nondistributable.v1.tar+gzip&lt;/li>
&lt;li>application/vnd.oci.image.layer.nondistributable.v1.tar +zstd&lt;/li>
&lt;/ul>
&lt;p>也就是说，一个 OCI Image 中每个镜像层的“文件系统”或“文件系统的更改”层在打包完成后，会被序列化为一个 Layers 类型的 blob 文件&lt;/p>
&lt;h1 id="image-manifest">Image Manifest&lt;/h1>
&lt;p>Image Manifest 是一个 json 文件，media type 为 application/vnd.oci.image.manifest.v1+json，这个文件包含了对前面 filesystem layers 和 image config 的描述&lt;/p>
&lt;p>manifest 文件中 config 的 sha256 就是 image 的 ID，即上面 image config 文件的 sha256 值，这里是 b5b2b2c507a0944348e0303114d8d93aaaa081732b86451d9bce1f432a537bc7&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;schemaVersion&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">2&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;config&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;mediaType&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;application/vnd.oci.image.config.v1+json&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;size&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">7023&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;digest&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;sha256:b5b2b2c507a0944348e0303114d8d93aaaa081732b86451d9bce1f432a537bc7&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;layers&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;mediaType&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;application/vnd.oci.image.layer.v1.tar+gzip&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;size&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">32654&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;digest&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;sha256:9834876dcfb05cb167a5c24953eba58c4ac89b1adf57f28f2f9d09af107ee8f0&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;mediaType&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;application/vnd.oci.image.layer.v1.tar+gzip&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;size&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">16724&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;digest&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;sha256:3c3a4604a545cdc127456d94e421cd355bca5b528f4a9c1905b15da2eb4a4c6b&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;mediaType&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;application/vnd.oci.image.layer.v1.tar+gzip&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;size&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">73109&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;digest&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;sha256:ec4b8955958665577945c89419d1af06b5f7636b4ac3da7f12184802ad867736&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;annotations&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;com.example.key1&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;value1&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;com.example.key2&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;value2&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>config 里面包含了对 image config 文件的描述，有 media type，文件大小，以及 sha256 码&lt;/li>
&lt;li>layers 包含了对每一个 layer 的描述，和对 config 文件的描述一样，也包含了 media type，文件大小，以及 sha256 码&lt;/li>
&lt;/ul>
&lt;p>这里 layer 的 sha256 和 image config 文件中的 diff_ids 有可能不一样，比如这里的 layer 文件格式是 tar+gzip，那么这里的 sha256 就是 tar+gzip 包的 sha256 码，而 diff_ids 是 tar+gzip 解压后 tar 文件的 sha256 码&lt;/p>
&lt;h1 id="image-configuration">Image Configuration&lt;/h1>
&lt;p>image config 就是一个 json 文件，它的 media type 是 application/vnd.oci.image.config.v1+json，这个 json 文件包含了对这个 image 的描述。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;created&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2015-10-31T22:22:56.015925234Z&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;author&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Alyssa P. Hacker &amp;lt;alyspdev@example.com&amp;gt;&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;architecture&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;amd64&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;os&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;linux&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;config&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;User&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;alice&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;ExposedPorts&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;8080/tcp&amp;#34;&lt;/span>: {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Env&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;FOO=oci_is_a&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;BAR=well_written_spec&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Entrypoint&amp;#34;&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;/bin/my-app-binary&amp;#34;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Cmd&amp;#34;&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;--foreground&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;--config&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;/etc/my-app.d/default.cfg&amp;#34;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Volumes&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;/var/job-result-data&amp;#34;&lt;/span>: {},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;/var/log/my-app-logs&amp;#34;&lt;/span>: {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;WorkingDir&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/home/alice&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Labels&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;com.example.project.git.url&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;https://example.com/project.git&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;com.example.project.git.commit&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;45a939b2999782a3f005621a8d0f29aa387e1d6b&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;rootfs&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;diff_ids&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;sha256:c6f988f4874bb0add23a778f753c65efe992244e148a1d2ec2a8b664fb66bbd1&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;layers&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;history&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;created&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2015-10-31T22:22:54.690851953Z&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;created_by&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/bin/sh -c #(nop) ADD file:a3bc1e842b69636f9df5256c49c5374fb4eef1e281fe3f282c65fb853ee171c5 in /&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;created&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2015-10-31T22:22:55.613815829Z&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;created_by&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/bin/sh -c #(nop) CMD [\&amp;#34;sh\&amp;#34;]&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;empty_layer&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;created&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2015-10-31T22:22:56.329850019Z&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;created_by&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/bin/sh -c apk add curl&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里只介绍几个比较重要的属性，其它的请参考&lt;a href="https://github.com/opencontainers/image-spec/blob/main/config.md">&lt;strong>标准文档&lt;/strong>&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>architecture&lt;/strong> # CPU 架构类型，现在大部分都是 amd64，不过 arm64 估计会慢慢多起来&lt;/li>
&lt;li>&lt;strong>os&lt;/strong> # 操作系统，本人只用过 linux&lt;/li>
&lt;li>&lt;strong>config&lt;/strong> # 当根据这个 image 启动 container 时，config 里面的配置就是运行 container 时的默认参数，在后续介绍 runtime 的时候再仔细介绍每一项的意义&lt;/li>
&lt;li>&lt;strong>rootfs&lt;/strong> # 指定了 image 所包含的 filesystem layers，type 的值必须是 layers，diff_ids 包含了 layer 的列表（顺序排列），每一个 sha256 就是每层 layer 对应 tar 包的 sha256 码&lt;/li>
&lt;/ul>
&lt;h2 id="oci-image-中的各种标识符xxxid">OCI Image 中的各种标识符(XXXID)&lt;/h2>
&lt;p>有多个 XXXID 来标识 OCI Image 的各种信息&lt;/p>
&lt;ul>
&lt;li>**ImageID **# 镜像的唯一标志，值为 Image Configuration 文件通过 sha256 计算的结果
&lt;ul>
&lt;li>imageID 对于 Docker 来说一般可以在 ${DockerRootDir}/image/${StorageDriver}/repositories.json 文件中找到&lt;/li>
&lt;li>镜像的 configuration 文件就是以 imageID 命名，对于 Docker 来说 一般保存在 ${DockerRootDir}/image/${StorageDriver}/imagedb/content/sha256/ 目录下&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>**Layer DiffID **# 镜像层的校验 ID，根据该镜像层的打包文件校验获得
&lt;ul>
&lt;li>diffID 一般在 configuration 文件的 &lt;code>.rootfs.diff_ids&lt;/code> 字段中找到&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>**Layer ChainID **# docker 内容寻址机制采用的索引 ID，其值根据当前层和所有父层的 diffID(或父层的 chainID) 计算获得
&lt;ul>
&lt;li>chainID 计算完成后，对于 Docker 来说一般可以在 ${DockerRootDir}/image/${StorageDriver}/layerdb/sha256/ 目录中找到 chainID 的同名目录&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>digest&lt;/strong> # 对于某些 image 来说，可能在发布之后还会做一些更新，比如安全方面的，这时虽然镜像的内容变了，但镜像的名称和 tag 没有变，所以会造成前后两次通过同样的名称和 tag 从服务器得到不同的两个镜像的问题，于是 docker 引入了镜像的 digest 的概念，一个镜像的 digest 就是镜像的 manifes 文件的 sha256 码，当镜像的内容发生变化的时候，即镜像的 layer 发生变化，从而 layer 的 sha256 发生变化，而 manifest 里面包含了每一个 layer 的 sha256，所以 manifest 的 sha256 也会发生变化，即镜像的 digest 发生变化，这样就保证了 digest 能唯一的对应一个镜像&lt;/li>
&lt;/ul>
&lt;h1 id="image-index可选">Image Index(可选)&lt;/h1>
&lt;p>&lt;a href="https://github.com/opencontainers/image-spec/blob/master/image-index.md">image index&lt;/a> 也是个 json 文件，media type 是 application/vnd.oci.image.index.v1+json。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;schemaVersion&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">2&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;manifests&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;mediaType&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;application/vnd.oci.image.index.v1+json&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;size&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">7143&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;digest&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;sha256:0228f90e926ba6b96e4f39cf294b2586d38fbb5a1e385c05cd1ee40ea54fe7fd&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;annotations&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;org.opencontainers.image.ref.name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;stable-release&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;mediaType&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;application/vnd.oci.image.manifest.v1+json&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;size&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">7143&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;digest&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;sha256:e692418e4cbaf90ca69d05a66403747baa33ee08806650b51fab815ad7fc331f&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;platform&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;architecture&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;ppc64le&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;os&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;linux&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;annotations&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;org.opencontainers.image.ref.name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;v1.0&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;mediaType&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;application/xml&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;size&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">7143&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;digest&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;sha256:b3d63d132d21c3ff4c35a061adf23cf43da8ae054247e32faa95494d904a007e&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;annotations&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;org.freedesktop.specifications.metainfo.version&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;1.0&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;org.freedesktop.specifications.metainfo.type&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;AppStream&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;annotations&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;com.example.index.revision&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;r124356&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其实到 manifest 为止，已经有了整个 image 的完整描述，为什么还需要 image index 这个文件呢？主要原因是 manifest 描述的 image 只能支持一个平台，也没法支持多个 tag，加上 index 文件的目的就是让这个 image 能支持多个平台和多 tag。&lt;/p>
&lt;p>image index 是 v1.0.0-rc5 才加进来的一个文件，并且 docker 到现在也不支持该文件&lt;/p>
&lt;p>index 文件包含了对 image 中所有 manifest 的描述，相当于一个 manifest 列表，包括每个 manifest 的 media type，文件大小，sha256 码，支持的平台以及平台特殊的配置。&lt;/p>
&lt;p>比如 ubuntu 想让它的 image 支持 amd64 和 arm64 平台，于是它在两个平台上都编译好相应的包，然后将两个平台的 layer 都放到这个 image 的 filesystem layers 里面，然后写两个 config 文件和两个 manifest 文件，再加上这样一个描述不同平台 manifest 的 index 文件，就可以让这个 image 支持两个平台了，两个平台的用户可以使用同样的命令得到自己平台想要的那些 layer。&lt;/p>
&lt;p>image index 最新的标准里面并没有涉及到 tag，不过估计后续会加上。&lt;/p>
&lt;h1 id="容器镜像总结">容器镜像总结&lt;/h1>
&lt;p>Image Layout 规范是容器镜像的最主要部分，其他的规范，都是对 Image Layout 规范的扩展和补充，不管是 docker、containerd 还是什么其他的容器化实现程序，在执行 pull 命令时，都是获取 OCI 标准的 Image Layout，这样就等于是获取到了镜像文件系统的每一层，以及索引数据。&lt;/p>
&lt;p>然后将其中 gzip 类型的镜像层文件解压缩到本地文件系统上，这些程序再自己实现一套适用于自己的关联系统，将镜像层组合起来。&lt;/p>
&lt;p>当我们使用镜像运行容器时，就是根据索引数据，找到每一层，通过联合挂载的方式，形成容器的文件系统，再为其分配一个 mount namespace。然后再根据具体配置，为进程分配其他所需的名称空间即可。&lt;/p>
&lt;h1 id="通用规范">通用规范&lt;/h1>
&lt;h2 id="annotations注释">Annotations(注释)&lt;/h2>
&lt;p>在 Image Manifests 和 Descriptors 规范中具有 annotations 字段，可用于为镜像添加一些标识符以便其他服务识别。比如 GitHub Package 将会根据 &lt;code>org.opencontainers.image.source&lt;/code> 注释将镜像归属到指定的仓库中。&lt;/p>
&lt;blockquote>
&lt;p>在 Dockerfile 中可以通过 LABEL 关键字为镜像添加注释&lt;/p>
&lt;/blockquote>
&lt;p>OCI 中预定义了一些常用注释以用于镜像索引或识别镜像作者&lt;/p>
&lt;ul>
&lt;li>&lt;strong>org.opencontainers.image.created&lt;/strong> date and time on which the image was built (string, date-time as defined by &lt;a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339&lt;/a>).&lt;/li>
&lt;li>&lt;strong>org.opencontainers.image.authors&lt;/strong> contact details of the people or organization responsible for the image (freeform string)&lt;/li>
&lt;li>&lt;strong>org.opencontainers.image.url&lt;/strong> URL to find more information on the image (string)&lt;/li>
&lt;li>&lt;strong>org.opencontainers.image.documentation&lt;/strong> URL to get documentation on the image (string)&lt;/li>
&lt;li>&lt;strong>org.opencontainers.image.source&lt;/strong> URL to get source code for building the image (string)&lt;/li>
&lt;li>&lt;strong>org.opencontainers.image.version&lt;/strong> version of the packaged software
&lt;ul>
&lt;li>The version MAY match a label or tag in the source code repository&lt;/li>
&lt;li>version MAY be &lt;a href="https://semver.org/">Semantic versioning-compatible&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>org.opencontainers.image.revision&lt;/strong> Source control revision identifier for the packaged software.&lt;/li>
&lt;li>&lt;strong>org.opencontainers.image.vendor&lt;/strong> Name of the distributing entity, organization or individual.&lt;/li>
&lt;li>&lt;strong>org.opencontainers.image.licenses&lt;/strong> License(s) under which contained software is distributed as an &lt;a href="https://spdx.org/spdx-specification-21-web-version#h.jxpfx0ykyb60">SPDX License Expression&lt;/a>.&lt;/li>
&lt;li>&lt;strong>org.opencontainers.image.ref.name&lt;/strong> Name of the reference for a target (string).
&lt;ul>
&lt;li>SHOULD only be considered valid when on descriptors on index.json within &lt;a href="https://github.com/opencontainers/image-spec/blob/main/image-layout.md">image layout&lt;/a>.&lt;/li>
&lt;li>Character set of the value SHOULD conform to alphanum of A-Za-z0-9 and separator set of -._:@/+&lt;/li>
&lt;li>The reference must match the following &lt;a href="https://github.com/opencontainers/image-spec/blob/main/considerations.md#ebnf">grammar&lt;/a>:ref ::= component (&amp;quot;/&amp;quot; component)_ component ::= alphanum (separator alphanum)_ alphanum ::= [A-Za-z0-9]+ separator ::= [-._:@+] | &amp;ldquo;&amp;ndash;&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>org.opencontainers.image.title&lt;/strong> Human-readable title of the image (string)&lt;/li>
&lt;li>&lt;strong>org.opencontainers.image.description&lt;/strong> Human-readable description of the software packaged in the image (string)&lt;/li>
&lt;li>&lt;strong>org.opencontainers.image.base.digest&lt;/strong> &lt;a href="https://github.com/opencontainers/image-spec/blob/main/descriptor.md#digests">Digest&lt;/a> of the image this image is based on (string)
&lt;ul>
&lt;li>This SHOULD be the immediate image sharing zero-indexed layers with the image, such as from a Dockerfile FROM statement.&lt;/li>
&lt;li>This SHOULD NOT reference any other images used to generate the contents of the image (e.g., multi-stage Dockerfile builds).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>org.opencontainers.image.base.name&lt;/strong> Image reference of the image this image is based on (string)
&lt;ul>
&lt;li>This SHOULD be image references in the format defined by &lt;a href="https://github.com/distribution/distribution/blob/d0deff9cd6c2b8c82c6f3d1c713af51df099d07b/reference/reference.go">distribution/distribution&lt;/a>.&lt;/li>
&lt;li>This SHOULD be a fully qualified reference name, without any assumed default registry. (e.g., registry.example.com/my-org/my-image:tag instead of my-org/my-image:tag).&lt;/li>
&lt;li>This SHOULD be the immediate image sharing zero-indexed layers with the image, such as from a Dockerfile FROM statement.&lt;/li>
&lt;li>This SHOULD NOT reference any other images used to generate the contents of the image (e.g., multi-stage Dockerfile builds).&lt;/li>
&lt;li>If the image.base.name annotation is specified, the image.base.digest annotation SHOULD be the digest of the manifest referenced by the image.ref.name annotation.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: OCI Runtime 规范</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.1.%E5%AE%B9%E5%99%A8/open-containers-initiative%E5%BC%80%E6%94%BE%E5%AE%B9%E5%99%A8%E5%80%A1%E8%AE%AE/oci-runtime-%E8%A7%84%E8%8C%83/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.1.%E5%AE%B9%E5%99%A8/open-containers-initiative%E5%BC%80%E6%94%BE%E5%AE%B9%E5%99%A8%E5%80%A1%E8%AE%AE/oci-runtime-%E8%A7%84%E8%8C%83/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/opencontainers/runtime-spec/blob/main/spec.md">GitHub 项目,opencontainers/runtime-spec/spec.md&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/opencontainers/runtime-tools">GitHub 项目,opencontainers/runtime-tools&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://segmentfault.com/a/1190000009583199">思否大佬&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>OCI Runtime 规范用来指定一个 Container 的配置、执行环境和生命周期。&lt;/p>
&lt;p>容器的配置被指定为 config.json ，并详细说明了可以创建容器的字段。指定执行环境是为了确保容器内运行的应用程序在运行时之间具有一致的环境，以及为容器的生命周期定义的常见操作。&lt;/p>
&lt;p>由于容器运行起来，需要一个运行环境，比如是运行在 linux 上、还是 windows 上~~所以，OCI Runtime 标准，会根据不同的平台，制定不同的规范。现阶段有 4 中平台规范。这点是根 OCI Image 规范不太一样的地方。&lt;/p>
&lt;ul>
&lt;li>linux：&lt;a href="https://github.com/opencontainers/runtime-spec/blob/master/runtime.md">runtime.md&lt;/a>，&lt;a href="https://github.com/opencontainers/runtime-spec/blob/master/config.md">config.md&lt;/a>，&lt;a href="https://github.com/opencontainers/runtime-spec/blob/master/config-linux.md">config-linux.md&lt;/a>和&lt;a href="https://github.com/opencontainers/runtime-spec/blob/master/runtime-linux.md">runtime-linux.md&lt;/a>。&lt;/li>
&lt;li>solaris：&lt;a href="https://github.com/opencontainers/runtime-spec/blob/master/runtime.md">runtime.md&lt;/a>，&lt;a href="https://github.com/opencontainers/runtime-spec/blob/master/config.md">config.md&lt;/a>和&lt;a href="https://github.com/opencontainers/runtime-spec/blob/master/config-solaris.md">config-solaris.md&lt;/a>。&lt;/li>
&lt;li>windows：&lt;a href="https://github.com/opencontainers/runtime-spec/blob/master/runtime.md">runtime.md&lt;/a>，&lt;a href="https://github.com/opencontainers/runtime-spec/blob/master/config.md">config.md&lt;/a>和&lt;a href="https://github.com/opencontainers/runtime-spec/blob/master/config-windows.md">config-windows.md&lt;/a>。&lt;/li>
&lt;li>vm：&lt;a href="https://github.com/opencontainers/runtime-spec/blob/master/runtime.md">runtime.md&lt;/a>，&lt;a href="https://github.com/opencontainers/runtime-spec/blob/master/config.md">config.md&lt;/a>和&lt;a href="https://github.com/opencontainers/runtime-spec/blob/master/config-vm.md">config-vm.md&lt;/a>。&lt;/li>
&lt;/ul>
&lt;p>由于我们日常使用 linux，所以下面就只研究 linux 平台的 OCI Runtime 规范&lt;/p>
&lt;p>runtime 规范有如下几个，所有人必须遵守该规范来使用 runtime ：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/opencontainers/runtime-spec/blob/master/bundle.md">Filesystem Bundle&lt;/a> # 文件系统捆绑。bundle 是以某种方式组织的一组文件，包含了容器所需要的所有信息，有了这个 bundle 后，符合 runtime 标准的程序(e.g.runc)就可以根据 bundle 启动容器了(哪怕没有 docker，也可以启动一个容器)。&lt;/li>
&lt;li>&lt;a href="https://github.com/opencontainers/runtime-spec/blob/master/runtime.md">Runtime and Lifecycle&lt;/a> # 使用一个 runtime 创建的容器实体必须能够对同一容器使用本规范中定义的操作。
&lt;ul>
&lt;li>&lt;a href="https://github.com/opencontainers/runtime-spec/blob/master/runtime-linux.md">Linux-specific Runtime and Lifecycle&lt;/a> # 这是关于 linux 平台的 Runtime 与 Lifecycle&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://github.com/opencontainers/runtime-spec/blob/master/config.md">Configuration&lt;/a> # Configuration 包含对容器执行标准操作(比如 create、start、stop 等)所必须的元数据。这包括要运行的过程、要注入的环境变量、要使用的沙盒功能等等。不同平台(linux、window 等)，有不同的规范。
&lt;ul>
&lt;li>&lt;a href="https://github.com/opencontainers/runtime-spec/blob/master/config-linux.md">Linux-specific configuration&lt;/a> # 这是关于 linux 平台的 Configuration&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="filesystem-bundle">Filesystem Bundle&lt;/h1>
&lt;p>官方详解：&lt;a href="https://github.com/opencontainers/runtime-spec/blob/master/bundle.md">https://github.com/opencontainers/runtime-spec/blob/master/bundle.md&lt;/a>&lt;/p>
&lt;p>bundle 中包含了运行容器所需要的所有信息，有了这个 bundle 后，符合 runtime 标准的程序（比如 runc）就可以根据 bundle 启动容器了。&lt;/p>
&lt;p>一个容器的 Bundle 必须包含以下内容：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>config.json&lt;/strong> # 此文件包含配置数据。该文件必须留在 bundle 目录的根目录中，并且必须名为 config.json。config.json 内的写法参考下文 &lt;a href="#AGQoL">Configuration 章节&lt;/a>。&lt;/li>
&lt;li>&lt;strong>rootfs&lt;/strong> # 容器的根文件系统目录，不过 bundle 对 rootfs 没有要求，名字也可以随便改，只要在 config.json 文件中的 &lt;code>.root.path&lt;/code> 字段配置好就可以。&lt;/li>
&lt;/ul>
&lt;h2 id="应用示例">应用示例&lt;/h2>
&lt;p>rootfs OCI 镜像规范中，blobs 目录下的镜像层文件。config.json 可以通过 OCI 官方提供的 &lt;a href="https://github.com/opencontainers/runtime-tools">runtime-tools&lt;/a> 工具生成，现在我们操作一下:&lt;/p>
&lt;blockquote>
&lt;p>也可以使用 &lt;code>runc spec&lt;/code> 命令生成 config.json 文件
这里接着 [OCI Image 规范中的实验](✏IT 学习笔记/☁️10.云原生/2.1.容器/Open%20Containers%20Initiative(开放容器倡议)/OCI%20Image%20 规范.md Image 规范.md)中的 [Layers 文件](✏IT 学习笔记/☁️10.云原生/2.1.容器/Open%20Containers%20Initiative(开放容器倡议)/OCI%20Image%20 规范.md Image 规范.md)章节，使用 lchdzh/k8s-debug 镜像。&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># cd /root/test_dir/k8s-debug/layers&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># oci-runtime-tool generate --output config.json&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>config.json 文件中的 root.path 字段用来指定 rootfs 路径；process.args 字段用来指定运行容器时所使用的命令&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">......&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;process&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;args&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;sh&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;root&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;path&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;rootfs&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">......&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>此时我们将其中一个镜像层目录改名，改为 rootfs，省的改 config.json 文件了~~~:D&lt;/p>
&lt;p>验证一下，可以发现通过了&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ oci-runtime-tool validate
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Bundle validation succeeded.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这时，使用 OCI 中的 runc 工具，即可运行出来一个容器&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~/test_dir/k8s-debug/layers&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># runc run hello&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cat /etc/os-release
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NAME&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Alpine Linux&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ID&lt;span style="color:#f92672">=&lt;/span>alpine
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>VERSION_ID&lt;span style="color:#f92672">=&lt;/span>3.12.1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PRETTY_NAME&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Alpine Linux v3.12&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>HOME_URL&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;https://alpinelinux.org/&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>BUG_REPORT_URL&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;https://bugs.alpinelinux.org/&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ip a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu &lt;span style="color:#ae81ff">65536&lt;/span> qdisc noqueue state UNKNOWN qlen &lt;span style="color:#ae81ff">1000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> inet 127.0.0.1/8 scope host lo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> valid_lft forever preferred_lft forever
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> inet6 ::1/128 scope host
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> valid_lft forever preferred_lft forever
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到，直接运行的时候，虽然没有 shell 提示符，但是各种名称空间已经是单独的了，这就是通过 alpine:latest 镜像启动的容器。并且没有任何网络设备接入。&lt;/p>
&lt;h3 id="rootfs-中只有一个文件的话">rootfs 中只有一个文件的话&lt;/h3>
&lt;p>任何目录都可以作为容器的根文件系统并启动，比如我们直接使用 &lt;code>COPY --from=grpcurl /go/bin/grpcurl /usr/bin/grpcurl&lt;/code> 镜像层作为容器的根文件系统&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ mv rootfs &lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ mv &lt;span style="color:#ae81ff">1&lt;/span> config.json
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 这里注意，由于这个镜像层只有一个 grpcurl 命令&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 所以无法执行 Bundle 中 config.conf 中 .process.args 字段中指定的 sh 命令&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 所以 .process.args 字段的值需要修改为 /usr/bin/grpcurl&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ cat config.json |grep grpc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;/usr/bin/grpcurl&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>此时运行一下看看，可以看到可以正常运行一个容器，只不过这个容器是瞬时的而已。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~/test_dir/k8s-debug/layers&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># runc run hello&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Too few arguments.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Try &lt;span style="color:#e6db74">&amp;#39;/usr/bin/grpcurl -help&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> more details.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="docker-中的-filesystem-bundle">docker 中的 Filesystem Bundle&lt;/h2>
&lt;p>下面是在 docker 环境下 bundle 位置的示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>root@lichenhao containerd&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># pwd&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/run/containerd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>root@lichenhao containerd&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># tree&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── containerd.sock
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── io.containerd.runtime.v1.linux
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── moby
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── 28f5bed704dc80bed6dbaa8af514d2191d8d4ab0339bb3a663e66609ccd34c10
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── config.json
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── init.pid
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── log.json
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── rootfs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── io.containerd.runtime.v2.task
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>而 rootfs 实际在另外一个目录，通过 config.json 中可以看到&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>root@lichenhao 28f5bed704dc80bed6dbaa8af514d2191d8d4ab0339bb3a663e66609ccd34c10&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># pwd&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/run/containerd/io.containerd.runtime.v1.linux/moby/28f5bed704dc80bed6dbaa8af514d2191d8d4ab0339bb3a663e66609ccd34c10
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>root@lichenhao 28f5bed704dc80bed6dbaa8af514d2191d8d4ab0339bb3a663e66609ccd34c10&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># cat config.json | jq . | more&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.....
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;root&amp;#34;&lt;/span>: &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;path&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/var/lib/docker/overlay2/d976eddf7575a3464486d92539229146f3df66080a3265195791ebb0d24b24dd/merged&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.....
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="runtime-and-lifecycle">Runtime and Lifecycle&lt;/h1>
&lt;p>官方详解：&lt;a href="https://github.com/opencontainers/runtime-spec/blob/master/runtime.md">https://github.com/opencontainers/runtime-spec/blob/master/runtime.md&lt;/a>&lt;/p>
&lt;p>Runtime 与 Lifecycle 规范部分，定义了跟容器 runtime 相关的三部分内容&lt;/p>
&lt;ol>
&lt;li>Container 的状态&lt;/li>
&lt;li>Container 的生命周期&lt;/li>
&lt;li>对使用一个 runtime 创建出来的 container 实体，可以实现的操作。这些操作包括增删改查等等。&lt;/li>
&lt;/ol>
&lt;h2 id="container-state容器的状态-规范">Container State(容器的状态) 规范&lt;/h2>
&lt;ul>
&lt;li>ociVersion (string, REQUIRED) is version of the Open Container Initiative Runtime Specification with which the state complies.&lt;/li>
&lt;li>id (string, REQUIRED) is the container&amp;rsquo;s ID. This MUST be unique across all containers on this host. There is no requirement that it be unique across hosts.&lt;/li>
&lt;li>status (string, REQUIRED) is the runtime state of the container. The value MAY be one of:
&lt;ul>
&lt;li>creating: the container is being created (step 2 in the &lt;a href="https://github.com/opencontainers/runtime-spec/blob/master/runtime.md#lifecycle">lifecycle&lt;/a>)&lt;/li>
&lt;li>created: the runtime has finished the &lt;a href="https://github.com/opencontainers/runtime-spec/blob/master/runtime.md#create">create operation&lt;/a> (after step 2 in the &lt;a href="https://github.com/opencontainers/runtime-spec/blob/master/runtime.md#lifecycle">lifecycle&lt;/a>), and the container process has neither exited nor executed the user-specified program&lt;/li>
&lt;li>running: the container process has executed the user-specified program but has not exited (after step 5 in the &lt;a href="https://github.com/opencontainers/runtime-spec/blob/master/runtime.md#lifecycle">lifecycle&lt;/a>)&lt;/li>
&lt;li>stopped: the container process has exited (step 7 in the &lt;a href="https://github.com/opencontainers/runtime-spec/blob/master/runtime.md#lifecycle">lifecycle&lt;/a>)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Additional values MAY be defined by the runtime, however, they MUST be used to represent new runtime states not defined above.&lt;/p>
&lt;ul>
&lt;li>pid (int, REQUIRED when status is created or running on Linux, OPTIONAL on other platforms) is the ID of the container process. For hooks executed in the runtime namespace, it is the pid as seen by the runtime. For hooks executed in the container namespace, it is the pid as seen by the container.&lt;/li>
&lt;li>bundle (string, REQUIRED) is the absolute path to the container&amp;rsquo;s bundle directory. This is provided so that consumers can find the container&amp;rsquo;s configuration and root filesystem on the host.&lt;/li>
&lt;li>annotations (map, OPTIONAL) contains the list of annotations associated with the container. If no annotations were provided then this property MAY either be absent or an empty map.&lt;/li>
&lt;/ul>
&lt;p>除了上述属性外，还可以包含其他属性。有关获取容器状态的信息的方式，请参考下文 Query State 段落。&lt;/p>
&lt;h2 id="lifecycle生命周期-规范">Lifecycle(生命周期) 规范&lt;/h2>
&lt;p>生命周期描述了从创建容器到容器不再存在发生的事件的时间轴。&lt;/p>
&lt;ul>
&lt;li>OCI compliant runtime&amp;rsquo;s &lt;a href="https://github.com/opencontainers/runtime-spec/blob/master/runtime.md#create">create&lt;/a> command is invoked with a reference to the location of the bundle and a unique identifier.&lt;/li>
&lt;li>The container&amp;rsquo;s runtime environment MUST be created according to the configuration in &lt;a href="https://github.com/opencontainers/runtime-spec/blob/master/config.md">config.json&lt;/a>. If the runtime is unable to create the environment specified in the &lt;a href="https://github.com/opencontainers/runtime-spec/blob/master/config.md">config.json&lt;/a>, it MUST &lt;a href="https://github.com/opencontainers/runtime-spec/blob/master/runtime.md#errors">generate an error&lt;/a>. While the resources requested in the &lt;a href="https://github.com/opencontainers/runtime-spec/blob/master/config.md">config.json&lt;/a> MUST be created, the user-specified program (from &lt;a href="https://github.com/opencontainers/runtime-spec/blob/master/config.md#process">process&lt;/a>) MUST NOT be run at this time. Any updates to &lt;a href="https://github.com/opencontainers/runtime-spec/blob/master/config.md">config.json&lt;/a> after this step MUST NOT affect the container.&lt;/li>
&lt;li>The &lt;a href="https://github.com/opencontainers/runtime-spec/blob/master/config.md#prestart">prestart hooks&lt;/a> MUST be invoked by the runtime. If any prestart hook fails, the runtime MUST &lt;a href="https://github.com/opencontainers/runtime-spec/blob/master/runtime.md#errors">generate an error&lt;/a>, stop the container, and continue the lifecycle at step 12.&lt;/li>
&lt;li>The &lt;a href="https://github.com/opencontainers/runtime-spec/blob/master/config.md#createRuntime-hooks">createRuntime hooks&lt;/a> MUST be invoked by the runtime. If any createRuntime hook fails, the runtime MUST &lt;a href="https://github.com/opencontainers/runtime-spec/blob/master/runtime.md#errors">generate an error&lt;/a>, stop the container, and continue the lifecycle at step 12.&lt;/li>
&lt;li>The &lt;a href="https://github.com/opencontainers/runtime-spec/blob/master/config.md#createContainer-hooks">createContainer hooks&lt;/a> MUST be invoked by the runtime. If any createContainer hook fails, the runtime MUST &lt;a href="https://github.com/opencontainers/runtime-spec/blob/master/runtime.md#errors">generate an error&lt;/a>, stop the container, and continue the lifecycle at step 12.&lt;/li>
&lt;li>Runtime&amp;rsquo;s &lt;a href="https://github.com/opencontainers/runtime-spec/blob/master/runtime.md#start">start&lt;/a> command is invoked with the unique identifier of the container.&lt;/li>
&lt;li>The &lt;a href="https://github.com/opencontainers/runtime-spec/blob/master/config.md#startContainer-hooks">startContainer hooks&lt;/a> MUST be invoked by the runtime. If any startContainer hook fails, the runtime MUST &lt;a href="https://github.com/opencontainers/runtime-spec/blob/master/runtime.md#errors">generate an error&lt;/a>, stop the container, and continue the lifecycle at step 12.&lt;/li>
&lt;li>The runtime MUST run the user-specified program, as specified by &lt;a href="https://github.com/opencontainers/runtime-spec/blob/master/config.md#process">process&lt;/a>.&lt;/li>
&lt;li>The &lt;a href="https://github.com/opencontainers/runtime-spec/blob/master/config.md#poststart">poststart hooks&lt;/a> MUST be invoked by the runtime. If any poststart hook fails, the runtime MUST &lt;a href="https://github.com/opencontainers/runtime-spec/blob/master/runtime.md#warnings">log a warning&lt;/a>, but the remaining hooks and lifecycle continue as if the hook had succeeded.&lt;/li>
&lt;li>The container process exits. This MAY happen due to erroring out, exiting, crashing or the runtime&amp;rsquo;s &lt;a href="https://github.com/opencontainers/runtime-spec/blob/master/runtime.md#kill">kill&lt;/a> operation being invoked.&lt;/li>
&lt;li>Runtime&amp;rsquo;s &lt;a href="https://github.com/opencontainers/runtime-spec/blob/master/runtime.md#delete">delete&lt;/a> command is invoked with the unique identifier of the container.&lt;/li>
&lt;li>The container MUST be destroyed by undoing the steps performed during create phase (step 2).&lt;/li>
&lt;li>The &lt;a href="https://github.com/opencontainers/runtime-spec/blob/master/config.md#poststop">poststop hooks&lt;/a> MUST be invoked by the runtime. If any poststop hook fails, the runtime MUST &lt;a href="https://github.com/opencontainers/runtime-spec/blob/master/runtime.md#warnings">log a warning&lt;/a>, but the remaining hooks and lifecycle continue as if the hook had succeeded.&lt;/li>
&lt;/ul>
&lt;p>这里以 runc 为例，说明容器的生命周期&lt;/p>
&lt;ul>
&lt;li>执行命令 runc create 创建容器，参数中指定 bundle 的位置以及容器的 ID，容器的状态变为 creating&lt;/li>
&lt;li>runc 根据 bundle 中的 config.json，准备好容器运行时需要的环境和资源，但不运行 process 中指定的进程，这步执行完成之后，表示容器创建成功，修改 config.json 将不再对创建的容器产生影响，这时容器的状态变成 created。&lt;/li>
&lt;li>执行命令 runc start 启动容器&lt;/li>
&lt;li>runc 执行 config.json 中配置的 prestart 钩子&lt;/li>
&lt;li>runc 执行 config.json 中 process 指定的程序，这时容器状态变成了 running&lt;/li>
&lt;li>runc 执行 poststart 钩子。&lt;/li>
&lt;li>容器由于某些原因退出，比如容器中的第一个进程主动退出，挂掉或者被 kill 掉等。这时容器状态变成了 stoped&lt;/li>
&lt;li>执行命令 runc delete 删除容器，这时 runc 就会删除掉上面第 2 步所做的所有工作。&lt;/li>
&lt;li>runc 执行 poststop 钩子&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Errors 与 Warnings 规范&lt;/strong>&lt;/p>
&lt;h2 id="standard-operations标准操作-规范用来规范容器必须支持的操作">Standard Operations(标准操作) 规范，用来规范容器必须支持的操作&lt;/h2>
&lt;p>除非另有说明，否则 runtime 必须支持以下操作(注意：这些操作未指定任何命令行 API，并且参数是常规操作的输入。)&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Query State(查询状态)&lt;/strong> # 返回容器的状态，包含上面介绍的那些内容.&lt;/li>
&lt;li>&lt;strong>Create(创建容器&lt;/strong>) # 创建容器，这一步执行完成后，容器创建完成，修改 bundle 中的 config.json 将不再对已创建的容器产生影响&lt;/li>
&lt;li>&lt;strong>Start(启动容器)&lt;/strong> # 启动容器，执行 config.json 中 process 部分指定的进程&lt;/li>
&lt;li>&lt;strong>Kill(停止容器)&lt;/strong> # 通过给容器发送信号来停止容器，信号的内容由 kill 命令的参数指定&lt;/li>
&lt;li>&lt;strong>Delete(删除容器)&lt;/strong> # 删除容器，如果容器正在运行中，则删除失败。删除操作会删除掉 create 操作时创建的所有内容。&lt;/li>
&lt;/ul>
&lt;h1 id="configuration">Configuration&lt;/h1>
&lt;p>官方详解：&lt;a href="https://github.com/opencontainers/runtime-spec/blob/master/config-linux.md">https://github.com/opencontainers/runtime-spec/blob/master/config-linux.md&lt;/a>&lt;/p>
&lt;p>Configuration 规范定义了《Filesystem Bundle 规范》章节中，config.json 文件中应该包含哪些内容&lt;/p>
&lt;p>Configuration 中包含对容器实施 standard operations(标准操作内容见上文) 所必须的元数据。这包括要运行的过程、要注入的环境变量、要使用的沙盒功能等等。&lt;/p>
&lt;p>config.json 文件的样例，可以参考官方：&lt;a href="https://github.com/opencontainers/runtime-spec/blob/master/config.md#configuration-schema-example">https://github.com/opencontainers/runtime-spec/blob/master/config.md#configuration-schema-example&lt;/a>&lt;/p></description></item><item><title>Docs: Open Containers Initiative(开放容器倡议)</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.1.%E5%AE%B9%E5%99%A8/open-containers-initiative%E5%BC%80%E6%94%BE%E5%AE%B9%E5%99%A8%E5%80%A1%E8%AE%AE/open-containers-initiative%E5%BC%80%E6%94%BE%E5%AE%B9%E5%99%A8%E5%80%A1%E8%AE%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.1.%E5%AE%B9%E5%99%A8/open-containers-initiative%E5%BC%80%E6%94%BE%E5%AE%B9%E5%99%A8%E5%80%A1%E8%AE%AE/open-containers-initiative%E5%BC%80%E6%94%BE%E5%AE%B9%E5%99%A8%E5%80%A1%E8%AE%AE/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://opencontainers.org/">OCI 官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/opencontainers">GitHub 账户,OpenContainers&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://segmentfault.com/u/public0821/articles">segmentfault,《走进 docker》系列文章&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>**Open Containers Initiative(开放容器倡议，简称 OCI)。**是一个轻量级的，开放的治理结构（项目），由 Linux Foundation 主持成立，其明确目的是围绕 Container 镜像格式和运行时创建 开放的行业标准。OCI 由 Docker，CoreOS 和其他容器行业领导者于 2015 年 6 月 22 日启动。&lt;/p>
&lt;p>OCI 公有如下几个个规范：
一开始有两个&lt;/p>
&lt;ul>
&lt;li>**Image-spec(镜像规范) **# 容器镜像所包含的内容以及格式都遵循统一的格式标准，由 OCI 负责维护，官方详解地址为：image-spec&lt;/li>
&lt;li>&lt;strong>Runtime-spec(运行时规范)&lt;/strong> # 容器运行时的内容以及格式都遵循统一的格式标准，由 OCI 负责维护，官方详解地址为：runtime-spec&lt;/li>
&lt;/ul>
&lt;p>后来新加的一个&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Distribution-spec(分发规范)&lt;/strong> #&lt;/li>
&lt;/ul>
&lt;p>在所有企业、各人在构建镜像、运行容器时，都应该遵守 OCI 标准，比如想用 docker 工具构建一个镜像，那么构建出来的镜像规范，必须符合 OCI 标准。其他类似 docker 的工具同理。如果想自己开发一个构建镜像的工具或者运行容器的运行时，都需要符合 OCI 的标准。这样大家都遵守同一套规范，才有利于技术的发展。&lt;/p></description></item></channel></rss>