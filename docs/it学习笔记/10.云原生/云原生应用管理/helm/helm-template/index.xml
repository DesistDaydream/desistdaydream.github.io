<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – Helm Template</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86/helm/helm-template/</link><description>Recent content in Helm Template on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86/helm/helm-template/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Named Templates(命名模板)</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86/helm/helm-template/named-templates%E5%91%BD%E5%90%8D%E6%A8%A1%E6%9D%BF/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86/helm/helm-template/named-templates%E5%91%BD%E5%90%8D%E6%A8%A1%E6%9D%BF/</guid><description>
&lt;p>官方文档：&lt;a href="https://helm.sh/docs/chart_template_guide/named_templates/">https://helm.sh/docs/chart_template_guide/named_templates/&lt;/a>&lt;/p>
&lt;p>**Named Templates(命名模板，**有时称为 &lt;strong>partial(部分)&lt;/strong> 或 &lt;strong>subtemplate(子模板)&lt;/strong>) 是限定在一个文件内部的模板，并起一个名称。Named Templates 可以在一个文件中定义，并在其他地方使用它们。&lt;/p>
&lt;p>我们有两种创建方法，以及几种不同的使用方法。&lt;/p>
&lt;p>在  &lt;a href="https://www.teambition.com/project/5f90e312755d8a00446050eb/app/5eba5fba6a92214d420a3219/workspaces/5f90e312c800160016ea22fb/docs/5f9a623d4cc5830001a8edc8">&lt;strong>控制结构与变量&lt;/strong>&lt;/a> 章节中，我们介绍了声明和管理模板三个动作：define，template，和 block。在本节中，我们将介绍这三个动作，并介绍一个 include 函数，与 template 类似功能。&lt;/p>
&lt;p>在命名模板时要注意一个重要的细节：模板名称是全局的。如果声明两个具有相同名称的模板，则最后加载一个模板是起作用的模板。由于子 chart 中的模板与顶级模板一起编译，因此注意小心地使用特定 chart 的名称来命名模板。&lt;/p>
&lt;p>通用的命名约定是为每个定义的模板添加 chart 名称：{{define &amp;ldquo;mychart.labels&amp;rdquo;}}。通过使用特定 chart 名称作为前缀，我们可以避免由于同名模板的两个不同 chart 而可能出现的任何冲突。&lt;/p>
&lt;p>&lt;strong>partials 和 _ 文件&lt;/strong>&lt;/p>
&lt;p>到目前为止，我们已经使用了一个文件，一个文件包含一个模板。但 Helm 的模板语言允许创建指定的嵌入模板，可以通过名称访问。&lt;/p>
&lt;p>在我们开始编写这些模板之前，有一些文件命名约定值得一提：&lt;/p>
&lt;ul>
&lt;li>大多数文件 templates/ 被视为包含 Kubernetes manifests&lt;/li>
&lt;li>NOTES.txt 是一个例外&lt;/li>
&lt;li>名称以下划线（_）开头的文件被假定为没有内部 manifest。这些文件不会渲染 Kubernetes 对象定义，而是在其他 chart 模板中随处可用以供调用。&lt;/li>
&lt;/ul>
&lt;p>这些文件用于存储 partials 和辅助程序。事实上，当我们第一次创建时 mychart，我们看到一个叫做文件 _helpers.tpl。该文件是模板 partials 的默认位置。&lt;/p>
&lt;h2 id="define-定义模板--template-引用模板">define 定义模板 &amp;amp;&amp;amp; template 引用模板&lt;/h2>
&lt;p>define 定义模板，语法如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>{{ &lt;span style="color:#ae81ff">define &amp;#34;MY.NAME&amp;#34; }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># body of template here&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{{ &lt;span style="color:#ae81ff">end }}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>例如，我们可以定义一个模板来封装一个 Kubernetes 标签块：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>{{- &lt;span style="color:#ae81ff">define &amp;#34;mychart.labels&amp;#34; }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">generator&lt;/span>: &lt;span style="color:#ae81ff">helm&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">date&lt;/span>: {{ &lt;span style="color:#ae81ff">now | htmlDate }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{{- &lt;span style="color:#ae81ff">end }}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>template 引用模板，语法如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">template&lt;/span> &lt;span style="color:#e6db74">&amp;#34;模板名&amp;#34;&lt;/span> [&lt;span style="color:#960050;background-color:#1e0010">范围&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>现在我们可以将此模板嵌入到现有的 ConfigMap 中，然后将其包含在 template 操作中：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>{{- &lt;span style="color:#ae81ff">define &amp;#34;mychart.labels&amp;#34; }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">generator&lt;/span>: &lt;span style="color:#ae81ff">helm&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">date&lt;/span>: {{ &lt;span style="color:#ae81ff">now | htmlDate }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{{- &lt;span style="color:#ae81ff">end }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">ConfigMap&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: {{ &lt;span style="color:#ae81ff">.Release.Name }}-configmap&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {{- &lt;span style="color:#ae81ff">template &amp;#34;mychart.labels&amp;#34; }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">data&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">myvalue&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Hello World&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {{- &lt;span style="color:#ae81ff">range $key, $val := .Values.favorite }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {{ &lt;span style="color:#f92672">$key }}&lt;/span>: {{ &lt;span style="color:#ae81ff">$val | quote }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {{- &lt;span style="color:#ae81ff">end }}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>当模板引擎读取该文件时，它将存储引用 mychart.labels 直到 template &amp;ldquo;mychart.labels&amp;rdquo; 被调用。然后它将在文件内渲染该模板。所以结果如下所示：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Source: mychart/templates/configmap.yaml&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">ConfigMap&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">running-panda-configmap&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">generator&lt;/span>: &lt;span style="color:#ae81ff">helm&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">date&lt;/span>: &lt;span style="color:#e6db74">2016-11-02&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">data&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">myvalue&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Hello World&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">drink&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;coffee&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">food&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;pizza&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Helm chart 通常将这些模板放入 partials 文件中，默认是 _helpers.tpl 文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#960050;background-color:#1e0010">{/*&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">Generate&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">basic&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">labels&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">*/&lt;/span>}&lt;span style="color:#960050;background-color:#1e0010">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#960050;background-color:#1e0010">{-&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">define&lt;/span> &lt;span style="color:#f92672">&amp;#34;mychart.labels&amp;#34;&lt;/span> }&lt;span style="color:#960050;background-color:#1e0010">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">labels:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">generator:&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">helm&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">date:&lt;/span> {&lt;span style="color:#960050;background-color:#1e0010">{&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">now&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">|&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">htmlDate&lt;/span> }&lt;span style="color:#960050;background-color:#1e0010">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#960050;background-color:#1e0010">{-&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">end&lt;/span> }&lt;span style="color:#960050;background-color:#1e0010">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>按照惯例，define 函数应该有一个简单的文档块（{{/_ &amp;hellip; _/}}）来描述他们所做的事情。&lt;/p>
&lt;p>即使这个定义在 _helpers.tpl，它仍然可以在 configmap.yaml 以下位置访问：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">apiVersion:&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">v&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">kind:&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">ConfigMap&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">metadata:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">name:&lt;/span> {&lt;span style="color:#960050;background-color:#1e0010">{&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">.Release.Name&lt;/span> }&lt;span style="color:#960050;background-color:#1e0010">}-configmap&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#960050;background-color:#1e0010">{-&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">template&lt;/span> &lt;span style="color:#f92672">&amp;#34;mychart.labels&amp;#34;&lt;/span> }&lt;span style="color:#960050;background-color:#1e0010">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">data:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">myvalue:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Hello World&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#960050;background-color:#1e0010">{-&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">range&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">$key,&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">$val&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">:=&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">.Values.favorite&lt;/span> }&lt;span style="color:#960050;background-color:#1e0010">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#960050;background-color:#1e0010">{&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">$key&lt;/span> }&lt;span style="color:#960050;background-color:#1e0010">}:&lt;/span> {&lt;span style="color:#960050;background-color:#1e0010">{&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">$val&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">|&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">quote&lt;/span> }&lt;span style="color:#960050;background-color:#1e0010">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#960050;background-color:#1e0010">{-&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">end&lt;/span> }&lt;span style="color:#960050;background-color:#1e0010">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如上所述， 模板名称是全局的 。因此，如果两个模板被命名为相同的名称，则最后一次使用的模板将被使用。由于子 chart 中的模板与顶级模板一起编译，因此最好使用 chart 专用名称命名模板。一个流行的命名约定是为每个定义的模板添加 chart 名称：{{define &amp;ldquo;mychart.labels&amp;rdquo;}}。&lt;/p>
&lt;h2 id="设置模板的范围">设置模板的范围&lt;/h2>
&lt;p>在我们上面定义的模板中，我们没有使用任何对象。我们只是使用函数。当时，如果要在命名模板中，引用对象，则会产生如下问题：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>{{&lt;span style="color:#ae81ff">/* Generate basic labels */}}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{{- &lt;span style="color:#ae81ff">define &amp;#34;mychart.labels&amp;#34; }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">generator&lt;/span>: &lt;span style="color:#ae81ff">helm&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">date&lt;/span>: {{ &lt;span style="color:#ae81ff">now | htmlDate }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">chart&lt;/span>: {{ &lt;span style="color:#ae81ff">.Chart.Name }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">version&lt;/span>: {{ &lt;span style="color:#ae81ff">.Chart.Version }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{{- &lt;span style="color:#ae81ff">end }}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果我们这样做，将不会得到我们所期望的结果：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Source: mychart/templates/configmap.yaml&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">ConfigMap&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">moldy-jaguar-configmap&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">generator&lt;/span>: &lt;span style="color:#ae81ff">helm&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">date&lt;/span>: &lt;span style="color:#e6db74">2016-11-02&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">chart&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">version&lt;/span>:
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>名称和版本发生了什么变化？他们不在我们定义的模板的范围内。当一个已命名的模板（用于创建 define）被渲染时，它将接收由该 template 调用传入的作用域。在我们的例子中，我们包含了这样的模板：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#960050;background-color:#1e0010">{-&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">template&lt;/span> &lt;span style="color:#f92672">&amp;#34;mychart.labels&amp;#34;&lt;/span> }&lt;span style="color:#960050;background-color:#1e0010">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>没有范围被传入，因此在模板中我们无法访问任何内容.。虽然这很容易解决。我们只需将范围传递给模板：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">ConfigMap&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: {{ &lt;span style="color:#ae81ff">.Release.Name }}-configmap&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {{- &lt;span style="color:#ae81ff">template &amp;#34;mychart.labels&amp;#34; . }}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>请注意，我们在调用 template 时末尾传递了 .。我们可以很容易地通过 .Values 或者 .Values.favorite 或者我们想要的任何范围。但是我们想要的是顶级范围。&lt;/p>
&lt;p>现在，当我们用 helm install &amp;ndash;dry-run &amp;ndash;debug ./mychart 执行这个模板，我们得到这个：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Source: mychart/templates/configmap.yaml&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">ConfigMap&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">plinking-anaco-configmap&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">generator&lt;/span>: &lt;span style="color:#ae81ff">helm&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">date&lt;/span>: &lt;span style="color:#e6db74">2016-11-02&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">chart&lt;/span>: &lt;span style="color:#ae81ff">mychart&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">version&lt;/span>: &lt;span style="color:#ae81ff">0.1.0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>现在 {{.Chart.Name}} 解析为 mychart,{{ .Chart.Version }} 解析为 0.1.0。&lt;/p>
&lt;h2 id="include-函数引用模板的另一种方式">include 函数，引用模板的另一种方式&lt;/h2>
&lt;p>假设我们已经定义了一个如下所示的简单模板：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>{{- &lt;span style="color:#ae81ff">define &amp;#34;mychart.app&amp;#34; -}}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">app_name&lt;/span>: {{ &lt;span style="color:#ae81ff">.Chart.Name }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">app_version&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;{{ .Chart.Version }}+{{ .Release.Time.Seconds }}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{{- &lt;span style="color:#ae81ff">end -}}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>现在我想插入到我的模板的 labels: 部分和 data: 部分：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">ConfigMap&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: {{ &lt;span style="color:#ae81ff">.Release.Name }}-configmap&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {{ &lt;span style="color:#ae81ff">template &amp;#34;mychart.app&amp;#34; .}}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">data&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">myvalue&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Hello World&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {{- &lt;span style="color:#ae81ff">range $key, $val := .Values.favorite }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {{ &lt;span style="color:#f92672">$key }}&lt;/span>: {{ &lt;span style="color:#ae81ff">$val | quote }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {{- &lt;span style="color:#ae81ff">end }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{{ &lt;span style="color:#ae81ff">template &amp;#34;mychart.app&amp;#34; . }}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>输出不是我们所期望的：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Source: mychart/templates/configmap.yaml&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">ConfigMap&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">measly-whippet-configmap&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app_name&lt;/span>: &lt;span style="color:#ae81ff">mychart&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">app_version&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;0.1.0+1478129847&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">data&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">myvalue&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Hello World&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">drink&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;coffee&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">food&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;pizza&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app_name&lt;/span>: &lt;span style="color:#ae81ff">mychart&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">app_version&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;0.1.0+1478129847&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意，app_version 缩进在两个地方都是错误的。为什么？因为被替换的模板具有与右侧对齐的文本。因为 template 是一个动作，而不是一个函数，所以没有办法将 template 调用的输出传递给其他函数; 数据只是内嵌插入。&lt;/p>
&lt;p>为了解决这个问题，Helm 提供了一个替代 template 方案，将模板的内容导入到当前管道中，并将其传递到管道中的其函数。&lt;/p>
&lt;p>这里是上面的例子，用 indent 纠正正确缩进 mychart_app 模板：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">ConfigMap&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: {{ &lt;span style="color:#ae81ff">.Release.Name }}-configmap&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{{ &lt;span style="color:#ae81ff">include &amp;#34;mychart.app&amp;#34; . | indent 4 }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">data&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">myvalue&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Hello World&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {{- &lt;span style="color:#ae81ff">range $key, $val := .Values.favorite }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {{ &lt;span style="color:#f92672">$key }}&lt;/span>: {{ &lt;span style="color:#ae81ff">$val | quote }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {{- &lt;span style="color:#ae81ff">end }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{{ &lt;span style="color:#ae81ff">include &amp;#34;mychart.app&amp;#34; . | indent 2 }}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>现在生成的 YAML 每个部分都正确缩进：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Source: mychart/templates/configmap.yaml&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">ConfigMap&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">edgy-mole-configmap&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app_name&lt;/span>: &lt;span style="color:#ae81ff">mychart&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app_version&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;0.1.0+1478129987&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">data&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">myvalue&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Hello World&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">drink&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;coffee&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">food&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;pizza&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app_name&lt;/span>: &lt;span style="color:#ae81ff">mychart&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app_version&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;0.1.0+1478129987&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="注意在-helm-模板中使用-include-比-template-会更好可以更好地为-yaml-处理输出格式">&lt;strong>注意：在 Helm 模板中使用 include 比 template 会更好，可以更好地为 YAML 处理输出格式。&lt;/strong>&lt;/h2>
&lt;p>有时我们想要导入内容，但不是作为模板。也就是说，我们要逐字输入文件。我们下一节中描述可以通过&lt;a href="https://www.teambition.com/project/5f90e312755d8a00446050eb/app/5eba5fba6a92214d420a3219/workspaces/5f90e312c800160016ea22fb/docs/5f9a61ae37398300016bd678?scroll-to-block=5fc1ac01c9e7383184abe2e2">&lt;strong>使用.Files 的对象来读取文件&lt;/strong>&lt;/a>。&lt;/p>
&lt;h1 id="在-templates模板中-访问文件">在 Templates(模板中) 访问文件&lt;/h1>
&lt;p>官方文档：&lt;a href="https://helm.sh/docs/chart_template_guide/accessing_files/">&lt;strong>https://helm.sh/docs/chart_template_guide/accessing_files/&lt;/strong>&lt;/a>&lt;/p></description></item><item><title>Docs: Pipeline 与 Function</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86/helm/helm-template/pipeline-%E4%B8%8E-function/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86/helm/helm-template/pipeline-%E4%B8%8E-function/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>官方文档：&lt;a href="https://helm.sh/docs/chart_template_guide/functions_and_pipelines/">https://helm.sh/docs/chart_template_guide/functions_and_pipelines/&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>将 .Values 对象中的字符串注入模板时，应引用这些字符串。我们可以通过在 **Template Directive(模板指令) **中调用 quota 函数来实现，比如下面这个示例，会将引入的指转换为字符串类型：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">ConfigMap&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: {{&lt;span style="color:#ae81ff">.Release.Name}}-configmap&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">data&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">myvalue&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Hello World&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">drink&lt;/span>: {{&lt;span style="color:#ae81ff">quote .Values.favorite.drink}}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">food&lt;/span>: {{&lt;span style="color:#ae81ff">quote .Values.favorite.food}}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>模板函数遵循语法 &lt;code>functionName arg1 arg2...&lt;/code>。在上面的代码片段中，&lt;code>quote .Values.favorite.drink&lt;/code> 调用 quote 函数并将一个参数传递给它。&lt;/p>
&lt;p>Helm 拥有超过 60 种可用函数。其中一些是由  &lt;a href="https://pkg.go.dev/text/template">&lt;strong>Go template language(Go 模板语言)&lt;/strong>&lt;/a> 本身定义的。其他大多数都是 &lt;a href="https://pkg.go.dev/github.com/Masterminds/sprig">&lt;strong>Sprig template library(Sprig 模板库)&lt;/strong>&lt;/a> 的一部分。随着示例的进行，我们将看到其中的许多例子。&lt;/p>
&lt;p>注意：虽然我们将 &lt;strong>Helm template language(Helm 模板语言)&lt;/strong> 视为 Helm 特有的，但它实际上是 Go 模板语言，一些额外函数和各种包装器的组合，以将某些对象暴露给模板。Go 模板上的许多资源在了解模板时可能会有所帮助。&lt;/p>
&lt;h1 id="pipeline-管道">Pipeline 管道&lt;/h1>
&lt;blockquote>
&lt;p>在 Helm 的 Template 中，**Pipeline(管道) **的概念与 Go Template 中 Pipeline 的概念不同，并不是指产生数据的操作。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>Pipeline(管道)&lt;/strong> 与 Linux 中管道的概念类似，用于连接多个 &lt;a href="https://www.teambition.com/project/5f90e312755d8a00446050eb/app/5eba5fba6a92214d420a3219/workspaces/5f90e312c800160016ea22fb/docs/5f9a633937398300016bed65?scroll-to-block=5f9a6348246f30f3eef35c3e">&lt;strong>Template Directives(模板指令)&lt;/strong>&lt;/a>。换句话说，**Pipeline(管道) **是一种按顺序完成多项任务的有效方式。&lt;/p>
&lt;p>本篇文章开头的示例，如果使用 Pipeline 重写，则是这样的：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">ConfigMap&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: {{ &lt;span style="color:#ae81ff">.Release.Name }}-configmap&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">data&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">myvalue&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Hello World&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">drink&lt;/span>: {{ &lt;span style="color:#ae81ff">.Values.favorite.drink | quote }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">food&lt;/span>: {{ &lt;span style="color:#ae81ff">.Values.favorite.food | quote }}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在此示例中，我们没有调用 &lt;code>quote ARGUMENT&lt;/code>，而是颠倒了顺序。使用 Pipeline 符号 &lt;code>|&lt;/code> 将参数“发送”到函数：&lt;code>.Values.favorite.drink | quote&lt;/code>。使用 Pipeline，我们可以将多个功能链接在一起，比如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">ConfigMap&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: {{ &lt;span style="color:#ae81ff">.Release.Name }}-configmap&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">data&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">myvalue&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Hello World&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">drink&lt;/span>: {{ &lt;span style="color:#ae81ff">.Values.favorite.drink | quote }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">food&lt;/span>: {{ &lt;span style="color:#ae81ff">.Values.favorite.food | upper | quote }}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="function-函数">Function 函数&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://helm.sh/docs/chart_template_guide/function_list/">官方文档，Chart 模板指南-模板函数列表&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Helm Template Function(Helm 模板函数)&lt;/strong> 可以用来丰富模板功能，通过函数，可以对传入模板的数据进行更多操作，以便让这些数据更符合我们的预期。&lt;/p>
&lt;p>简单示例：&lt;/p>
&lt;p>这是一个模板文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">apiVersion:&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">v&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">kind:&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">ConfigMap&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">metadata:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">name:&lt;/span> {&lt;span style="color:#960050;background-color:#1e0010">{.Release.Name&lt;/span>}&lt;span style="color:#960050;background-color:#1e0010">}-configmap&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">data:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">drink:&lt;/span> {&lt;span style="color:#960050;background-color:#1e0010">{.Values.favorite.drink&lt;/span>}&lt;span style="color:#960050;background-color:#1e0010">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">food:&lt;/span> {&lt;span style="color:#960050;background-color:#1e0010">{quote&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">.Values.favorite.food&lt;/span>}&lt;span style="color:#960050;background-color:#1e0010">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这是值文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">favorite:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">drink:&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">tee&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">food:&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">bread&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>渲染模板结果：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># helm template test .&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Source: test/templates/test.yaml&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: v1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: ConfigMap
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: test-configmap
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>data:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> drink: tee &lt;span style="color:#75715e"># 未使用 quote 函数&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> food: &lt;span style="color:#e6db74">&amp;#34;bread&amp;#34;&lt;/span> &lt;span style="color:#75715e"># 使用了 quote 函数&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在模板中，使用了一个名为 quote 的函数，这个函数的功能是，可以将引用的对象的值都机上双引号。Helm 里所有可用的函数列表：&lt;a href="https://helm.sh/docs/chart_template_guide/function_list/">https://helm.sh/docs/chart_template_guide/function_list/&lt;/a>&lt;/p>
&lt;h2 id="default-函数">default 函数&lt;/h2>
&lt;p>模板中经常使用函数是 default，语法为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>default DEFAULT_VALUE GIVEN_VALUE
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>参数：&lt;/p>
&lt;ol>
&lt;li>DEFAULT_VALUE    # 指定默认值&lt;/li>
&lt;li>GIVEN_VALUE    # 默认值将会传给 GIVEN_VALUE&lt;/li>
&lt;/ol>
&lt;p>default 函数用来为模板内部的指令指定默认值&lt;/p>
&lt;p>上面的示例修改一下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>apiVersion: v1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: ConfigMap
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: &lt;span style="color:#f92672">{{&lt;/span>.Release.Name&lt;span style="color:#f92672">}}&lt;/span>-configmap
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>data:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> drink: &lt;span style="color:#f92672">{{&lt;/span>.Values.favorite.drink&lt;span style="color:#f92672">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> food: &lt;span style="color:#f92672">{{&lt;/span>quote .Values.favorite.food&lt;span style="color:#f92672">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> food_default: &lt;span style="color:#f92672">{{&lt;/span>default &lt;span style="color:#e6db74">&amp;#34;bread&amp;#34;&lt;/span> .Values.favorite.food&lt;span style="color:#f92672">}}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>此时，如果我们将 value.yaml 中 food: bread 注释掉，会得到如下结果：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>root@master-1 test&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># helm template test .&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Source: test/templates/function_pipeline.yaml&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: v1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: ConfigMap
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: test-configmap
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>data:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> drink: tee
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> food:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> food_default: bread
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="lookup-函数">lookup 函数&lt;/h2>
&lt;p>lookup 函数可以用于查找 kubernetes 集群中的资源，语法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>lookup APIVERSION KIND NAMESPACE NAME
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>比如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">(lookup&lt;/span> &lt;span style="color:#e6db74">&amp;#34;v1&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Namespace&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;default&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">).metadata.annotations&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上述指令将会获取 default 名称空间的 metadata.annotaions 字段的信息。类似于 kubectl get ns default &amp;ndash;template={{.metadata.annotations}} 命令，与该命令获取的值一致。&lt;/p>
&lt;p>注意：当使用 helm template 命令或者使用 &amp;ndash;dry-run 标志时，并不会与 Kubernetes 的 API Server 建立联系，所以 lookup 在上述两种情景下，无法获取具体的值，只会返回一个空的 map 。&lt;/p>
&lt;h2 id="operators-函数">Operators 函数&lt;/h2>
&lt;p>Operators 运算符，在 helm 模板里也当作函数来看。eq、ne、lt、gt、and、or 等等，均视为函数&lt;/p>
&lt;p>与正常情况不同，运算符作为函数时，需要将这个关键字放在语法开头，后面跟参数。比如：&lt;/p>
&lt;p>&lt;strong>eq # 比较两个 Pipeline 是否相等&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 比较 ARG1 与 ARG2 是否相等&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 也可以指定多个参数，所有参数都是与 ARG1 进行比较&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>eq ARG1 ARG2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>and # 与运算，当两个 Pipeline 都为真时，结果为真&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 如果 .Values.fooString 值存在，并且 .Values.fooString 的值为 foo，则执行后面的指令&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{{&lt;/span>&lt;span style="color:#66d9ef">if&lt;/span> and .Values.fooString &lt;span style="color:#f92672">(&lt;/span>eq .Values.fooString &lt;span style="color:#e6db74">&amp;#34;foo&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">{{&lt;/span>...&lt;span style="color:#f92672">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{{&lt;/span>end&lt;span style="color:#f92672">}}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="字典类型数据处理函数">字典类型数据处理函数&lt;/h2>
&lt;h3 id="xamergeoverwrite-mustmergeoverwritehttpshelmshdocschart_template_guidefunction_listmergeoverwrite-mustmergeoverwrite">
&lt;a href="https://helm.sh/docs/chart_template_guide/function_list/#mergeoverwrite-mustmergeoverwrite">mergeOverwrite, mustMergeOverwrite&lt;/a>&lt;/h3>
&lt;p>将两个或多个字典合并为一个，右侧的优先级最高&lt;/p>
&lt;p>Syntax(语法)
&lt;code>$NewDict := mergeOverwrite $DEST $SOURCE1 $SOURCE2&lt;/code>&lt;/p>
&lt;p>简单示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">dst&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">default&lt;/span>: &lt;span style="color:#ae81ff">default&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">overwrite&lt;/span>: &lt;span style="color:#ae81ff">me&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">key&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">src&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">overwrite&lt;/span>: &lt;span style="color:#ae81ff">overwritten&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">key&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过 &lt;code>mergeOverwrite .Values.dst .Values.src&lt;/code> 语句我们可以得到如下结果：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">newdict&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">default&lt;/span>: &lt;span style="color:#ae81ff">default&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">overwrite&lt;/span>: &lt;span style="color:#ae81ff">overwritten&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">key&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Subcharts 与 Global Values</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86/helm/helm-template/subcharts-%E4%B8%8E-global-values/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86/helm/helm-template/subcharts-%E4%B8%8E-global-values/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;a href="https://helm.sh/docs/chart_template_guide/subcharts_and_globals/">&lt;strong>官方文档&lt;/strong>&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>假如 Chart A 依赖的 Chart B，则 Chart B 称之为 &lt;strong>SubCharts(子图表)&lt;/strong>。&lt;/p>
&lt;p>SubCharts 受以下规范约束&lt;/p>
&lt;ul>
&lt;li>SubCharts 是“独立的”，这意味着 SubCharts 永远不能显式依赖其父图表。&lt;/li>
&lt;li>因此，SubCharts 无法访问其父级的 Values。&lt;/li>
&lt;li>父图表可以覆盖 SubCharts 的 Values。&lt;/li>
&lt;li>Helm 具有可被所有图表访问的 &lt;strong>Global Values(全局值)&lt;/strong> 的概念。&lt;/li>
&lt;/ul></description></item><item><title>Docs: 关于 Template 的其他说明</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86/helm/helm-template/%E5%85%B3%E4%BA%8E-template-%E7%9A%84%E5%85%B6%E4%BB%96%E8%AF%B4%E6%98%8E/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86/helm/helm-template/%E5%85%B3%E4%BA%8E-template-%E7%9A%84%E5%85%B6%E4%BB%96%E8%AF%B4%E6%98%8E/</guid><description>
&lt;h1 id="如何-debug-templates">如何 Debug Templates&lt;/h1>
&lt;p>官方文档：&lt;a href="https://helm.sh/docs/chart_template_guide/debugging/">&lt;strong>https://helm.sh/docs/chart_template_guide/debugging/&lt;/strong>&lt;/a>&lt;/p>
&lt;p>调试模板可能会很棘手，因为渲染的模板已发送到 Kubernetes API 服务器，该服务器可能会出于格式化以外的其他原因而拒绝 YAML 文件。&lt;/p>
&lt;p>有一些命令可以帮助您调试。&lt;/p>
&lt;ul>
&lt;li>&lt;code>helm lint&lt;/code> 是验证图表是否遵循最佳做法的首选工具&lt;/li>
&lt;li>&lt;code>helm install --dry-run --debug&lt;/code>或&lt;code>helm template --debug&lt;/code>：我们已经看到了这个技巧。这是让服务器呈现模板，然后返回生成的清单文件的好方法。&lt;/li>
&lt;li>&lt;code>helm get manifest&lt;/code>：这是查看服务器上安装了哪些模板的好方法。&lt;/li>
&lt;li>&lt;code>helm template&lt;/code> ：用于调试模板渲染结果&lt;/li>
&lt;/ul>
&lt;p>当您的 YAML 无法解析，但您想查看生成的内容时，检索 YAML 的一种简单方法是在模板中注释掉问题部分，然后重新运行&lt;code>helm install --dry-run --debug&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">v2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># some: problem section&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># {{ .Values.foo | quote }}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面的内容将呈现并返回完整的注释：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">v2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># some: problem section&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># &amp;#34;bar&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这提供了一种查看生成的内容的快速方法，而不会阻止 YAML 分析错误。&lt;/p>
&lt;h1 id="helmignore-文件">.helmignore 文件&lt;/h1>
&lt;p>&lt;a href="https://helm.sh/docs/chart_template_guide/helm_ignore_file/">&lt;strong>https://helm.sh/docs/chart_template_guide/helm_ignore_file/&lt;/strong>&lt;/a>&lt;/p>
&lt;h1 id="notestxt-文件">NOTES.txt 文件&lt;/h1>
&lt;p>&lt;a href="https://helm.sh/docs/chart_template_guide/notes_files/">&lt;strong>https://helm.sh/docs/chart_template_guide/notes_files/&lt;/strong>&lt;/a>&lt;/p>
&lt;h1 id="其他">其他&lt;/h1>
&lt;p>&lt;a href="https://helm.sh/docs/chart_template_guide/wrapping_up/">&lt;strong>https://helm.sh/docs/chart_template_guide/wrapping_up/&lt;/strong>&lt;/a>&lt;/p>
&lt;h1 id="关于-yaml-与-go-数据类型-和-go-模板的说明">关于 YAML 与 Go 数据类型 和 Go 模板的说明&lt;/h1>
&lt;p>&lt;a href="https://helm.sh/docs/chart_template_guide/yaml_techniques/">&lt;strong>https://helm.sh/docs/chart_template_guide/yaml_techniques/&lt;/strong>&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://helm.sh/docs/chart_template_guide/data_types/">&lt;strong>https://helm.sh/docs/chart_template_guide/data_types/&lt;/strong>&lt;/a>&lt;/p></description></item><item><title>Docs: 控制结构与变量</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86/helm/helm-template/%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84%E4%B8%8E%E5%8F%98%E9%87%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E4%BA%91%E5%8E%9F%E7%94%9F/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86/helm/helm-template/%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84%E4%B8%8E%E5%8F%98%E9%87%8F/</guid><description>
&lt;h1 id="control-structures-控制结构">Control Structures 控制结构&lt;/h1>
&lt;p>参考：&lt;a href="https://helm.sh/docs/chart_template_guide/control_structures/">&lt;strong>官方文档&lt;/strong>&lt;/a>&lt;/p>
&lt;p>控制结构在模板板中被称为 actions(动作)&lt;/p>
&lt;p>Helm 模板中有如下几种控制结构：&lt;/p>
&lt;ol>
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>if/else    # 一个条件判断的代码块&lt;/p>
&lt;ol start="2">
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>with     # 用于更改当前作用域&lt;/p>
&lt;ol start="3">
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>range    # 用于循环遍历数组或者 map。&lt;/p>
&lt;p>除此之外，还提供了一些声明和使用命名模板的控制结构：&lt;/p>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul>
&lt;p>define    # 在模板中声明一个新的命名模板&lt;/p>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul>
&lt;p>template    # 导入一个命名模板&lt;/p>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul>
&lt;p>block    # 声明了一种特殊的可填写模板区域&lt;/p>
&lt;p>define、template、block 这三种控制结构，放在 named template(命名模板) 中进行详解，详见：&lt;a href="https://www.teambition.com/project/5f90e312755d8a00446050eb/app/5eba5fba6a92214d420a3219/workspaces/5f90e312c800160016ea22fb/docs/5f9a61ae37398300016bd678">&lt;strong>Named Templates 命名模板&lt;/strong>&lt;/a>。&lt;/p>
&lt;p>在下文的各种示例中，我们使用下面这种数据，来让各种控制结构进行处理，values.yaml 文件如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>favorite:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> drink: water
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> food: sushi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> game: &lt;span style="color:#e6db74">&amp;#39;WOW &amp;amp; PAL&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sushiKinds:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- sashimi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- name: hot
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- name: handRoll
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rice: more
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- name:
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="ifelse">IF/ELSE&lt;/h2>
&lt;p>if/else 判断语句的语法如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{{&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> PIPELINE &lt;span style="color:#f92672">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Do something&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{{&lt;/span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> OTHER PIPELINE &lt;span style="color:#f92672">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Do something else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{{&lt;/span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#f92672">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Default case&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{{&lt;/span> end &lt;span style="color:#f92672">}}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>当 PIPELINE 值为以下内容，判定为 false：&lt;/p>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul>
&lt;p>布尔值 false&lt;/p>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul>
&lt;p>数字零&lt;/p>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul>
&lt;p>一个空字符串&lt;/p>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul>
&lt;p>nil&lt;/p>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul>
&lt;p>一个空的集合（map，slice，tuple，dict，array）&lt;/p>
&lt;p>下列模板将判断如果 .Values.favorite.drink == &amp;ldquo;water&amp;rdquo; 则新增 mug: true 。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>apiVersion: v1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: ConfigMap
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: &lt;span style="color:#f92672">{{&lt;/span> .Release.Name &lt;span style="color:#f92672">}}&lt;/span>-configmap
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>data:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> drink: &lt;span style="color:#f92672">{{&lt;/span> .Values.favorite.drink | default &lt;span style="color:#e6db74">&amp;#34;tea&amp;#34;&lt;/span> | quote &lt;span style="color:#f92672">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> food: &lt;span style="color:#f92672">{{&lt;/span> .Values.favorite.food | upper | quote &lt;span style="color:#f92672">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">{{&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> eq .Values.favorite.drink &lt;span style="color:#e6db74">&amp;#34;water&amp;#34;&lt;/span> &lt;span style="color:#f92672">}}&lt;/span>mug: true&lt;span style="color:#f92672">{{&lt;/span> end &lt;span style="color:#f92672">}}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="with">With&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{{&lt;/span> with PIPELINE &lt;span style="color:#f92672">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># with声明的作用域&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{{&lt;/span> end &lt;span style="color:#f92672">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>复制代码
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>with 用于更改当前作用域(.)。上文提到在{{ .Release.Name }}中，最左边的（.）表示当前作用域下的顶层命名空间，.Values 告诉模板在当前作用域范围的顶层命名空间下查找 Values 对象。使用 with 可以改变模板变量的当前作用域，把（.）赋值给另一个对象：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>apiVersion: v1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: ConfigMap
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: &lt;span style="color:#f92672">{{&lt;/span> .Release.Name &lt;span style="color:#f92672">}}&lt;/span>-configmap
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>data:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> myvalue: &lt;span style="color:#e6db74">&amp;#34;Hello World&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">{{&lt;/span>- with .Values.favorite &lt;span style="color:#f92672">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> drink: &lt;span style="color:#f92672">{{&lt;/span> .drink | default &lt;span style="color:#e6db74">&amp;#34;tea&amp;#34;&lt;/span> | quote &lt;span style="color:#f92672">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> food: &lt;span style="color:#f92672">{{&lt;/span> .food | upper | quote &lt;span style="color:#f92672">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">{{&lt;/span>- end &lt;span style="color:#f92672">}}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在上面的例子中，在 with 的作用范围内（{- with .xxxx} 到 {{- end}}之间）可以直接引用.drink 和.food，这是因为{{- with .Values.favorite}}把 Values.favorite 赋值给了当前作用域(.)。&lt;/p>
&lt;h2 id="range">range&lt;/h2>
&lt;p>用于循环遍历 array 或 map 。range 与 go 语言中的 for&amp;hellip;range 关键字的行为相同，只是语法不同。语法如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{{&lt;/span> range &lt;span style="color:#f92672">[&lt;/span>$STRING1, $STRING2 :&lt;span style="color:#f92672">=]&lt;/span> PIPELINE &lt;span style="color:#f92672">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># do something&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{{&lt;/span>end&lt;span style="color:#f92672">}}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>PIPELINE 用于产生 map 或者 array 类型的数据；非这两类的数据，range 无法处理。&lt;/p>
&lt;ol start="2">
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>$STRING1 与 $STRING2 是可选的。通过 range 处理的 PIPELINE 可以返回两个参数。&lt;/p>
&lt;p>range 在处理 array 与 map 这两类数据时，方式是不同的。在 data 字段下，展示 range 处理 map 与 array 这两类数据时的四种不同情况：&lt;/p>
&lt;ol>
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>map    # 使用 range 循环处理 map。map 范围下的 {{ . }} 为每个 map 中键值对的值&lt;/p>
&lt;ol start="2">
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>mapVariable    # 两个变量分别为 map 数据的 key 和 value。也就是说 {{ . }} 的值与 $element 的值相同。&lt;/p>
&lt;ol start="3">
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>array    # 使用 range 循环处理 array。array 范围下的 {{ . }} 为数组中每个元素的值。&lt;/p>
&lt;ol start="4">
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>arrayVariables    # 两个变量分别为 array 数据的 索引 和 元素。也就是说 {{ . }} 的值与 $value 的值相同。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">apiVersion:&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">v&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">kind:&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">ConfigMap&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">metadata:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">name:&lt;/span> {&lt;span style="color:#960050;background-color:#1e0010">{&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">.Release.Name&lt;/span> }&lt;span style="color:#960050;background-color:#1e0010">}-range-configmap&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">data:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">map:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#960050;background-color:#1e0010">{.Values.favorite&lt;/span>}&lt;span style="color:#960050;background-color:#1e0010">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#960050;background-color:#1e0010">{-&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">range&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">.Values.favorite&lt;/span>}&lt;span style="color:#960050;background-color:#1e0010">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#960050;background-color:#1e0010">{&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">.&lt;/span> }&lt;span style="color:#960050;background-color:#1e0010">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#960050;background-color:#1e0010">{-&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">end&lt;/span> }&lt;span style="color:#960050;background-color:#1e0010">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">mapVariable:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#960050;background-color:#1e0010">{-&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">range&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">$key,&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">$val&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">:=&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">.Values.favorite&lt;/span>}&lt;span style="color:#960050;background-color:#1e0010">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#960050;background-color:#1e0010">{&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">$key&lt;/span> }&lt;span style="color:#960050;background-color:#1e0010">}:&lt;/span> {&lt;span style="color:#960050;background-color:#1e0010">{&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">$val&lt;/span> }&lt;span style="color:#960050;background-color:#1e0010">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#960050;background-color:#1e0010">{-&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">end&lt;/span> }&lt;span style="color:#960050;background-color:#1e0010">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">array:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#960050;background-color:#1e0010">{-&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">/*&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">如果要添加下面这行，则需要在&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">array：后面添加&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">|&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">符号，否则会报错：helm&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">did&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">not&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">find&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">expected&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">&amp;#39;,&amp;#39;&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">or&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">&amp;#39;]&amp;#39;&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">*/&lt;/span>}&lt;span style="color:#960050;background-color:#1e0010">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#960050;background-color:#1e0010">{/*.Values.sushiKinds*/&lt;/span>}&lt;span style="color:#960050;background-color:#1e0010">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#960050;background-color:#1e0010">{-&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">range&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">.Values.sushiKinds&lt;/span>}&lt;span style="color:#960050;background-color:#1e0010">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#960050;background-color:#1e0010">{&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">.&lt;/span> }&lt;span style="color:#960050;background-color:#1e0010">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#960050;background-color:#1e0010">{-&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">end&lt;/span> }&lt;span style="color:#960050;background-color:#1e0010">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">arrayVariables:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#960050;background-color:#1e0010">{-&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">range&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">$index,&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">$element&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">:=&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">.Values.sushiKinds&lt;/span>}&lt;span style="color:#960050;background-color:#1e0010">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">索引&lt;/span> {&lt;span style="color:#960050;background-color:#1e0010">{&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">$index&lt;/span> }&lt;span style="color:#960050;background-color:#1e0010">}&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">号元素的值为：&lt;/span>{&lt;span style="color:#960050;background-color:#1e0010">{&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">$element&lt;/span> }&lt;span style="color:#960050;background-color:#1e0010">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#960050;background-color:#1e0010">{-&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">end&lt;/span> }&lt;span style="color:#960050;background-color:#1e0010">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>渲染结果如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>root@master-1 control_structures&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># helm template ctrl . -s templates/range.yaml&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Source: control_tructures/templates/range.yaml&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: v1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: ConfigMap
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: ctrl-range-configmap
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>data:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> map:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> map&lt;span style="color:#f92672">[&lt;/span>drink:water food:sushi game:WOW &amp;amp; PAL&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> water
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sushi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> WOW &amp;amp; PAL
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mapVariable:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> drink: water
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> food: sushi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> game: WOW &amp;amp; PAL
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> array: |-
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[&lt;/span>sashimi map&lt;span style="color:#f92672">[&lt;/span>name:hot&lt;span style="color:#f92672">]&lt;/span> map&lt;span style="color:#f92672">[&lt;/span>name:handRoll rice:more&lt;span style="color:#f92672">]&lt;/span> map&lt;span style="color:#f92672">[&lt;/span>name:&amp;lt;nil&amp;gt;&lt;span style="color:#f92672">]]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sashimi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> map&lt;span style="color:#f92672">[&lt;/span>name:hot&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> map&lt;span style="color:#f92672">[&lt;/span>name:handRoll rice:more&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> map&lt;span style="color:#f92672">[&lt;/span>name:&amp;lt;nil&amp;gt;&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> arrayVariables:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 索引 &lt;span style="color:#ae81ff">0&lt;/span> 号元素的值为：sashimi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 索引 &lt;span style="color:#ae81ff">1&lt;/span> 号元素的值为：map&lt;span style="color:#f92672">[&lt;/span>name:hot&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 索引 &lt;span style="color:#ae81ff">2&lt;/span> 号元素的值为：map&lt;span style="color:#f92672">[&lt;/span>name:handRoll rice:more&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 索引 &lt;span style="color:#ae81ff">3&lt;/span> 号元素的值为：map&lt;span style="color:#f92672">[&lt;/span>name:&amp;lt;nil&amp;gt;&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意：如果想要继续获取 map[] 中的每个 key/value 对的值，则需要再次使用 range 来获取 map[] 中的值。就是在 sushiKinds1-2 中使用 sushiKinds1-1 的指令。只不过有一点需要主要，在这个例子中，3 号元素值并不是 map ，也就无法使用 range。所以这种不同类型的数据结构，最好不要混用，否则模板很难处理。&lt;/p>
&lt;p>也就是说 Helm 里的 range 控制结构如法处理 map 与 array 的混合数据数据类型，只能同类处理。&lt;/p>
&lt;p>map 与 array 的混合数据(比如这种 - sashimi: good 结构的数据)，{{- range $key, $val := .Values.favorite}} 这种指令渲染效果不好。渲染结果是这样的： 0: map[sashimi:good]，并不能将 map 中的键值对直接拆开&lt;/p>
&lt;h3 id="通过-range-来梳理范围内的对象">通过 range 来梳理&lt;code>.&lt;/code>范围内的对象&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>apiVersion: v1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: ConfigMap
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: &lt;span style="color:#f92672">{{&lt;/span> .Release.Name &lt;span style="color:#f92672">}}&lt;/span>-test-configmap
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>datadot: &lt;span style="color:#f92672">{{&lt;/span> . &lt;span style="color:#f92672">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>datadotrange: |-
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{{&lt;/span>- range $index, $value :&lt;span style="color:#f92672">=&lt;/span> .Release&lt;span style="color:#f92672">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">{{&lt;/span>$index&lt;span style="color:#f92672">}}&lt;/span>: &lt;span style="color:#f92672">{{&lt;/span> $value &lt;span style="color:#f92672">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{{&lt;/span>- end&lt;span style="color:#f92672">}}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>从这里可以看到输出结果：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>root@master-1 test&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># helm template test .&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Source: test/templates/test.yaml&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: v1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: ConfigMap
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: test-test-configmap
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 实际上， . 范围内的数据就是一个具有6个 map 的数组。是 map 与 array 的混合结构数据&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>datadot: map&lt;span style="color:#f92672">[&lt;/span>Capabilities:0x2a66d80 Chart:0xc00015aa20 Files:map&lt;span style="color:#f92672">[]&lt;/span> Release:map&lt;span style="color:#f92672">[&lt;/span>IsInstall:true IsUpgrade:false Name:test Namespace:default Revision:1 Service:Helm&lt;span style="color:#f92672">]&lt;/span> Template:map&lt;span style="color:#f92672">[&lt;/span>BasePath:test/templates Name:test/templates/test.yaml&lt;span style="color:#f92672">]&lt;/span> Values:map&lt;span style="color:#f92672">[]]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 而 .Release 范围内的数据，也具有多个元素。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>datadotrange: |-
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> IsInstall: true
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> IsUpgrade: false
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Name: test
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Namespace: default
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Revision: &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Service: Helm
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>从输出结果来看， . 范围下的对象有 Capabilities、Chart、Files、Release、Template、Values 这几个。正好与 Helm Template 介绍 中描述的 内置对象 匹配上。&lt;/p>
&lt;h3 id="toyaml-函数">toYaml 函数&lt;/h3>
&lt;p>toYaml 用来遍历 PIPELINE 范围内的每一行，toYAML 的效果相当于 range 的简化版，把 yaml 文件中 PIPELINE 范围内的所有内容原封不动导入到模板中。常用来处理注释类数据。&lt;/p>
&lt;p>语法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{{&lt;/span>toYAML PIPELINE&lt;span style="color:#f92672">}}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>apiVersion: v1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: ConfigMap
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: &lt;span style="color:#f92672">{{&lt;/span> .Release.Name &lt;span style="color:#f92672">}}&lt;/span>-test-configmap
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>data:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">{{&lt;/span>- toYaml .Values | nindent 2&lt;span style="color:#f92672">}}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这时，会将 annotations 下的一组键值对都传进模板，如果不用 toYaml，是无法实现的，因为传递的值中有冒号。渲染结果如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>[&lt;span style="color:#960050;background-color:#1e0010">root@master&lt;/span>&lt;span style="color:#ae81ff">-1&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">test&lt;/span>]&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">helm&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">template&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">test&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">---&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">Source:&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">test/templates/test.yaml&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">apiVersion:&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">v&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">kind:&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">ConfigMap&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">metadata:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">name:&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">test-test-configmap&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">data:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">favorite:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">drink:&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">water&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">food:&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">sushi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">game:&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">WOW&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">&amp;amp;&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">PAL&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">sushiKinds:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">-&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">sashimi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">-&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">name:&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">hot&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">-&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">name:&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">handRoll&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">rice:&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">more&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">-&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">name:&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="range-中的-tuple-函数">range 中的 tuple 函数&lt;/h3>
&lt;p>有时能够快速在模板中创建一个列表，然后遍历该列表很有用。 Helm 模板具有简化此功能的功能：元组。在计算机科学中，元组是固定大小的列表式集合，但是具有任意数据类型。这大致传达了元组的使用方式。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span> sizes: |-
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">{{&lt;/span>- range tuple &lt;span style="color:#e6db74">&amp;#34;small&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;medium&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;large&amp;#34;&lt;/span> &lt;span style="color:#f92672">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">{{&lt;/span> . &lt;span style="color:#f92672">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">{{&lt;/span>- end &lt;span style="color:#f92672">}}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面会产生这个：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span> sizes: |-
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - small
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - medium
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - large
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="whitespace空格处理">Whitespace(空格)处理&lt;/h2>
&lt;p>&lt;a href="https://helm.sh/docs/chart_template_guide/control_structures/#controlling-whitespace">&lt;strong>官方文档&lt;/strong>&lt;/a>&lt;/p>
&lt;p>在上述的模板示例中，我们会在一些模板指令里面&lt;del>会&lt;/del>出现中划线&lt;code>-&lt;/code>这个符号，例如{{- xxx}}或者{{xxx -}}。这个中划线的作用就是消除多于空格。例如有如下的模板：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>apiVersion: v1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: ConfigMap
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: &lt;span style="color:#f92672">{{&lt;/span> .Release.Name &lt;span style="color:#f92672">}}&lt;/span>-configmap
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>data:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> myvalue: &lt;span style="color:#e6db74">&amp;#34;Hello World&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> drink: &lt;span style="color:#f92672">{{&lt;/span> .Values.favorite.drink | default &lt;span style="color:#e6db74">&amp;#34;tea&amp;#34;&lt;/span> | quote &lt;span style="color:#f92672">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> food: &lt;span style="color:#f92672">{{&lt;/span> .Values.favorite.food | upper | quote &lt;span style="color:#f92672">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">{{&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> eq .Values.favorite.drink &lt;span style="color:#e6db74">&amp;#34;coffee&amp;#34;&lt;/span> &lt;span style="color:#f92672">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mug: true
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">{{&lt;/span> end &lt;span style="color:#f92672">}}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其渲染结果是：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>apiVersion: v1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: ConfigMap
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: telling-chimp-configmap
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>data:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> myvalue: &lt;span style="color:#e6db74">&amp;#34;Hello World&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> drink: &lt;span style="color:#e6db74">&amp;#34;coffee&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> food: &lt;span style="color:#e6db74">&amp;#34;PIZZA&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mug: true
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到，在 mug: true 前后各多了一个空行，这是因为在模板渲染的过程中，删除了&lt;code>{{&lt;/code>和&lt;code>}}&lt;/code>中的内容，但保留了其余的空白。使用&lt;code>-&lt;/code>符号来消除模板语句占用的空格，为直观展示删除效果，在下列示例中，星号(*)表示被删除的空格：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>apiVersion: v1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: ConfigMap
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: &lt;span style="color:#f92672">{{&lt;/span> .Release.Name &lt;span style="color:#f92672">}}&lt;/span>-configmap
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>data:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> myvalue: &lt;span style="color:#e6db74">&amp;#34;Hello World&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> drink: &lt;span style="color:#f92672">{{&lt;/span> .Values.favorite.drink | default &lt;span style="color:#e6db74">&amp;#34;tea&amp;#34;&lt;/span> | quote &lt;span style="color:#f92672">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> food: &lt;span style="color:#f92672">{{&lt;/span> .Values.favorite.food | upper | quote &lt;span style="color:#f92672">}}&lt;/span>*
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>**&lt;span style="color:#f92672">{{&lt;/span>- &lt;span style="color:#66d9ef">if&lt;/span> eq .Values.favorite.drink &lt;span style="color:#e6db74">&amp;#34;coffee&amp;#34;&lt;/span> &lt;span style="color:#f92672">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mug: true*
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>**&lt;span style="color:#f92672">{{&lt;/span>- end &lt;span style="color:#f92672">}}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>渲染结果：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>data:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> myvalue: &lt;span style="color:#e6db74">&amp;#34;Hello World&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> drink: &lt;span style="color:#e6db74">&amp;#34;coffee&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> food: &lt;span style="color:#e6db74">&amp;#34;PIZZA&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mug: true
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>中横线在左边&lt;code>{{- xxx}}&lt;/code>表示消除左边的空格，中横线在右边&lt;code>{{xxx -}}&lt;/code>表示消除右边的空格。要小心不要写成了：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> food: &lt;span style="color:#f92672">{{&lt;/span> .Values.favorite.food | upper | quote &lt;span style="color:#f92672">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">{{&lt;/span>- &lt;span style="color:#66d9ef">if&lt;/span> eq .Values.favorite.drink &lt;span style="color:#e6db74">&amp;#34;coffee&amp;#34;&lt;/span> -&lt;span style="color:#f92672">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mug: true
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">{{&lt;/span>- end -&lt;span style="color:#f92672">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样渲染出来的结果会是&lt;code>food: &amp;quot;PIZZA&amp;quot;mug:true&lt;/code>。 除了使用&lt;code>-&lt;/code>消除模板的空格外，Helm 还提供了 indent 函数增加空格来进行缩进：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>data:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> myvalue: &lt;span style="color:#e6db74">&amp;#34;Hello World&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> drink: &lt;span style="color:#e6db74">&amp;#34;coffee&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> food: &lt;span style="color:#e6db74">&amp;#34;PIZZA&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{{&lt;/span> &lt;span style="color:#e6db74">&amp;#34;mug: true&amp;#34;&lt;/span> | indent2 &lt;span style="color:#f92672">}}&lt;/span> &lt;span style="color:#75715e"># 为&amp;#34;mug: true&amp;#34;增加两个空格的缩进。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="variables-变量">Variables 变量&lt;/h1>
&lt;p>变量在大部分变成语言都是基本组成部分，但是在 Helm Template 中使用率较低。一般常用来优化 with 与 range 控制结构。&lt;/p>
&lt;p>比如下面的示例，引用对象的范围不在在 with 中指定的范围内时，这时候可以通过变量来解决。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">{{&lt;/span>- with .Values.favorite&lt;span style="color:#f92672">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> drink: &lt;span style="color:#f92672">{{&lt;/span>.drink | default &lt;span style="color:#e6db74">&amp;#34;tea&amp;#34;&lt;/span> | quote&lt;span style="color:#f92672">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> food: &lt;span style="color:#f92672">{{&lt;/span>.food | upper | quote&lt;span style="color:#f92672">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> release: &lt;span style="color:#f92672">{{&lt;/span>.Release.Name&lt;span style="color:#f92672">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">{{&lt;/span>- end&lt;span style="color:#f92672">}}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个示例中 release: {{.Release.Name}} 引用将会失败，因为该引用在 with 规定的 .Valuse.favorite 这个范围内，在这个范围内，没有 Release 对象。&lt;/p>
&lt;p>这时候，变量就派上用场了。&lt;/p>
&lt;p>变量的定义与引用格式：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 定义一个名为 NAME 的变量。通过 := 符号对变量进行赋值&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$NAME :&lt;span style="color:#f92672">=&lt;/span> PIPELINE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 引用变量 NAME&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{{&lt;/span> $NAME &lt;span style="color:#f92672">}}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>现在修改以下文章开头的模板&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>apiVersion: v1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: ConfigMap
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: &lt;span style="color:#f92672">{{&lt;/span>.Release.Name&lt;span style="color:#f92672">}}&lt;/span>-configmap
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>data:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> myvalue: &lt;span style="color:#e6db74">&amp;#34;Hello World&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">{{&lt;/span>- $relname :&lt;span style="color:#f92672">=&lt;/span> .Release.Name -&lt;span style="color:#f92672">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">{{&lt;/span>- with .Values.favorite&lt;span style="color:#f92672">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> drink: &lt;span style="color:#f92672">{{&lt;/span>.drink | default &lt;span style="color:#e6db74">&amp;#34;tea&amp;#34;&lt;/span> | quote&lt;span style="color:#f92672">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> food: &lt;span style="color:#f92672">{{&lt;/span>.food | upper | quote&lt;span style="color:#f92672">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> release: &lt;span style="color:#f92672">{{&lt;/span>$relname&lt;span style="color:#f92672">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">{{&lt;/span>- end&lt;span style="color:#f92672">}}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样，在 with 控制结构中的 release 就有值了~&lt;/p>
&lt;p>有一个始终是全局变量 $ ，此变量将始终指向根上下文。当您在一个范围内循环并且需要知道图表的发行名称时，这可能非常有用。&lt;/p>
&lt;p>$ 符号可以起到转义符的作用，试得在一个范围内的 . 符号可以在全局中引用其内的对象。比如&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{{&lt;/span>- range .Values.tlsSecrets &lt;span style="color:#f92672">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: v1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: Secret
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: &lt;span style="color:#f92672">{{&lt;/span> .name &lt;span style="color:#f92672">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> labels:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Many helm templates would use `.` below, but that will not work,however `$` will work here&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> app.kubernetes.io/name: &lt;span style="color:#f92672">{{&lt;/span> template &lt;span style="color:#e6db74">&amp;#34;fullname&amp;#34;&lt;/span> $ &lt;span style="color:#f92672">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 无法引用.Chart.Name，但可以执行 $.Chart.Name 来引用.Chart.Name&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> helm.sh/chart: &lt;span style="color:#e6db74">&amp;#34;{{ &lt;/span>$&lt;span style="color:#e6db74">.Chart.Name }}-{{ &lt;/span>$&lt;span style="color:#e6db74">.Chart.Version }}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> app.kubernetes.io/instance: &lt;span style="color:#e6db74">&amp;#34;{{ &lt;/span>$&lt;span style="color:#e6db74">.Release.Name }}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> app.kubernetes.io/version: &lt;span style="color:#e6db74">&amp;#34;{{ &lt;/span>$&lt;span style="color:#e6db74">.Chart.AppVersion }}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> app.kubernetes.io/managed-by: &lt;span style="color:#e6db74">&amp;#34;{{ &lt;/span>$&lt;span style="color:#e6db74">.Release.Service }}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>type: kubernetes.io/tls
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>data:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tls.crt: &lt;span style="color:#f92672">{{&lt;/span> .certificate &lt;span style="color:#f92672">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tls.key: &lt;span style="color:#f92672">{{&lt;/span> .key &lt;span style="color:#f92672">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{{&lt;/span>- end &lt;span style="color:#f92672">}}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>