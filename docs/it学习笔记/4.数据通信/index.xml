<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – 🌐4.数据通信</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/</link><description>Recent content in 🌐4.数据通信 on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: DNS</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/dns/</guid><description/></item><item><title>Docs: NAT</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/nat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/nat/</guid><description/></item><item><title>Docs: SDN(软件定义网路)</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/sdn%E8%BD%AF%E4%BB%B6%E5%AE%9A%E4%B9%89%E7%BD%91%E8%B7%AF/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/sdn%E8%BD%AF%E4%BB%B6%E5%AE%9A%E4%B9%89%E7%BD%91%E8%B7%AF/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Software-defined_networking">Wiki,Software-defined networking&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Software Defined Networking(软件定义网络，简称 SDN)&lt;/strong> 技术是一种&lt;a href="https://en.wikipedia.org/wiki/Network_management">网络管理&lt;/a>方法，它支持动态的、以编程方式高效的网络配置，以提高网络性能和监控，使其更像&lt;a href="https://en.wikipedia.org/wiki/Cloud_computing">云计算，而&lt;/a>不是传统的网络管理。&lt;a href="https://en.wikipedia.org/wiki/Software-defined_networking#cite_note-ReferenceA-1">[1]&lt;/a> SDN 旨在解决传统网络的静态架构分散且复杂的事实，而当前网络需要更多的灵活性和易于故障排除。SDN 试图通过将&lt;a href="https://en.wikipedia.org/wiki/Network_packet">网络数据包&lt;/a>的转发过程（数据平面）与路由过程（控制平面）分离，将网络智能集中在一个网络组件中。&lt;a href="https://en.wikipedia.org/wiki/Software-defined_networking#cite_note-2">[2]&lt;/a>该&lt;a href="https://en.wikipedia.org/wiki/Control_plane">控制平面&lt;/a>由一个或多个控制器组成，这些控制器被认为是包含整个智能的 SDN 网络的大脑。然而，智能中心化在安全性、&lt;a href="https://en.wikipedia.org/wiki/Software-defined_networking#cite_note-ReferenceA-1">[1]&lt;/a>可扩展性和弹性&lt;a href="https://en.wikipedia.org/wiki/Software-defined_networking#cite_note-ReferenceA-1">[1]&lt;/a>方面有其自身的缺点，这是 SDN 的主要问题。&lt;/p>
&lt;p>自&lt;a href="https://en.wikipedia.org/wiki/OpenFlow">OpenFlow&lt;/a>协议于 2011 年出现以来，SDN 通常与&lt;a href="https://en.wikipedia.org/wiki/OpenFlow">OpenFlow&lt;/a>协议（用于与网络平面元素进行远程通信，以确定&lt;a href="https://en.wikipedia.org/wiki/Network_packet">网络数据包&lt;/a>通过&lt;a href="https://en.wikipedia.org/wiki/Network_switch">网络交换机&lt;/a>的路径）相关联。然而，自 2012 年&lt;a href="https://en.wikipedia.org/wiki/Software-defined_networking#cite_note-TechTarget:_SDN_is_not_OpenFlow-3">[3] &lt;/a>&lt;a href="https://en.wikipedia.org/wiki/Software-defined_networking#cite_note-TechTarget:_OpenFlow_not_the_only_show_in_town-4">[4]&lt;/a> OpenFlow 对于许多公司不再是独家解决方案，他们增加了专有技术。其中包括&lt;a href="https://en.wikipedia.org/wiki/Cisco_Systems">Cisco Systems&lt;/a>的开放网络环境和&lt;a href="https://en.wikipedia.org/wiki/Nicira">Nicira&lt;/a>的&lt;a href="https://en.wikipedia.org/wiki/Network_virtualization_platform">网络虚拟化平台&lt;/a>。
&lt;a href="https://en.wikipedia.org/wiki/SD-WAN">SD-WAN&lt;/a>将类似技术应用于&lt;a href="https://en.wikipedia.org/wiki/Wide_area_network">广域网&lt;/a>(WAN)。&lt;a href="https://en.wikipedia.org/wiki/Software-defined_networking#cite_note-5">[5]&lt;/a>&lt;/p>
&lt;p>SDN 技术目前可用于需要极快故障转移的工业控制应用，称为操作技术 (OT) 软件定义网络 (SDN)。OT SDN 技术是一种在关键基础设施网络的环境强化硬件上管理网络访问控制和以太网数据包交付的方法。OT SDN 将控制平面的管理从集中在流控制器中的交换机抽象出来，并将 SDN 应用为交换机中的底层控制平面。去除了传统控制平面，简化了交换机，同时集中控制平面管理。OT SDN 中使用的通用控制平面标准是 OpenFlow，使其可与其他 SDN 解决方案互操作，不同之处在于 OpenFlow 是交换机中唯一的控制平面，并且交换机在电源循环期间保留流量，并且所有流量和冗余都经过主动流量工程设计因此交换机可以执行转发，它们被配置为在有或没有在线流量控制器的情况下执行。OT SDN 在性能、网络安全和态势感知方面为工业网络提供了优势。性能优势是通过使用 OpenFlow 中的快速故障转移组的主动流量工程意外事件实现的，从而在微秒内从链路或交换机故障中恢复网络，而不是像生成树技术那样的毫秒级。另一个性能优势是环路缓解是通过流量工程路径规划完成的，而不是阻塞端口，允许系统所有者主动使用所有端口。OT SDN 的网络安全优势在于交换机默认拒绝，流是允许流量转发的规则。这提供了强大的网络访问控制，可以在每一跳从 OSI 模型的第 1 层到第 4 层检查数据包。由于旧控制平面不再存在，因此移除了旧控制平面安全漏洞。MAC 表欺骗和 BPDU 欺骗不再可能，因为两者都不存在于 OT SDN 交换机中。旋转和网络侦察不再适用于适当的流编程，因为仅允许转发结合物理位置和路径与虚拟数据包过滤的流量。OT SDN 的态势感知优势使网络所有者能够了解其网络上有哪些设备，哪些对话可以和正在发生，以及这些对话可以在谁之间发生。OT SDN 网络技术允许以太网满足关键基础设施测量和控制的苛刻通信消息交换要求，并简单地为系统所有者提供对哪些设备可以连接到网络、这些设备可以连接到哪里以及每个设备可以进行哪些对话的控制有。OT SDN 的态势感知优势使网络所有者能够了解其网络上有哪些设备，哪些对话可以和正在发生，以及这些对话可以在谁之间发生。OT SDN 网络技术允许以太网满足关键基础设施测量和控制的苛刻通信消息交换要求，并简单地为系统所有者提供对哪些设备可以连接到网络、这些设备可以连接到哪里以及每个设备可以进行哪些对话的控制有。OT SDN 的态势感知优势使网络所有者能够了解其网络上有哪些设备，哪些对话可以和正在发生，以及这些对话可以在谁之间发生。OT SDN 网络技术允许以太网满足关键基础设施测量和控制的苛刻通信消息交换要求，并简单地为系统所有者提供对哪些设备可以连接到网络、这些设备可以连接到哪里以及每个设备可以进行哪些对话的控制有。&lt;/p>
&lt;p>SDN 的研究仍在继续，因为许多&lt;a href="https://en.wikipedia.org/wiki/Emulator">仿真器&lt;/a>正在开发用于研究目的，例如 vSDNEmul、&lt;a href="https://en.wikipedia.org/wiki/Software-defined_networking#cite_note-6">[6]&lt;/a> EstiNet、&lt;a href="https://en.wikipedia.org/wiki/Software-defined_networking#cite_note-7">[7]&lt;/a> Mininet &lt;a href="https://en.wikipedia.org/wiki/Software-defined_networking#cite_note-8">[8]&lt;/a>等。&lt;/p></description></item><item><title>Docs: Tunneling Protocol(隧道协议)</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/tunneling-protocol%E9%9A%A7%E9%81%93%E5%8D%8F%E8%AE%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/tunneling-protocol%E9%9A%A7%E9%81%93%E5%8D%8F%E8%AE%AE/</guid><description/></item><item><title>Docs: WebDAV</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/webdav/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/webdav/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/WebDAV">Wiki,WebDAV&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.rfc-editor.org/rfc/rfc4918.html">RFC 4918， HTTP Extensions for Web Distributed Authoring and Versioning (WebDAV) &lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.zhihu.com/question/30719209">https://www.zhihu.com/question/30719209&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Web Distributed Authoring and Versioning(Web 分布式创作和版本控制，简称 WebDAV)&lt;/strong> 是 HTTP 的一组扩展，它允许&lt;a href="https://en.wikipedia.org/wiki/User_agent">用户代理&lt;/a>通过提供&lt;a href="https://en.wikipedia.org/wiki/Concurrency_control">并发控制&lt;/a>和&lt;a href="https://en.wikipedia.org/wiki/Namespace">命名空间操作的设施，&lt;/a>直接在 &lt;a href="https://en.wikipedia.org/wiki/Web_server">HTTP Web 服务器&lt;/a> 中协作创作内容，从而允许 Web 被视为一种 可写的、协作的 媒体，而不仅仅是一种只读媒体。WebDAV 定义在 &lt;a href="https://datatracker.ietf.org/doc/html/rfc4918">RFC 4918&lt;/a> 中&lt;/p>
&lt;p>当我们使用符合 WebDAV 标准的程序部署了服务端之后，通过客户端，就可以使用 HTTP 协议访问服务端&lt;/p>
&lt;h2 id="应用示例">应用示例&lt;/h2>
&lt;p>通过 WebDAV，可以将互联网上的网盘提供商，将自身的网盘，挂载到操作系统上，作为一个盘符&lt;/p>
&lt;p>HTTP 协议定义了几种请求: GET, POST,PUT 等用来下载文件上传数据。WebDAV 在标准的 HTTP 协议上扩展了特有的请求方式: PROPFIND, MOVE, COPY 等。 然后用这些请求，操作 web 服务器上的磁盘(像不像一个网盘！！！)&lt;/p></description></item><item><title>Docs: 交换机 与 路由器</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E4%BA%A4%E6%8D%A2%E6%9C%BA-%E4%B8%8E-%E8%B7%AF%E7%94%B1%E5%99%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E4%BA%A4%E6%8D%A2%E6%9C%BA-%E4%B8%8E-%E8%B7%AF%E7%94%B1%E5%99%A8/</guid><description>
&lt;h1 id="华为交换机">华为交换机&lt;/h1>
&lt;h2 id="创建-trunk">创建 trunk&lt;/h2>
&lt;p>sy&lt;/p>
&lt;p>[HUAWEI] int eth-trunk 1&lt;/p>
&lt;p>[HUAWEI-Eth-Trunk1] mode manual load-balance&lt;/p>
&lt;p>[HUAWEI-Eth-Trunk1] port link-type trunk&lt;/p>
&lt;p>[HUAWEI-Eth-Trunk1] quit&lt;/p>
&lt;p>[HUAWEI] int g1/0/0&lt;/p>
&lt;p>[HUAWEI-GigabitEthernet1/0/0] eth-trunk 1&lt;/p>
&lt;p>[HUAWEI-GigabitEthernet1/0/0] q&lt;/p>
&lt;p>[HUAWEI] int g 1/0/1&lt;/p>
&lt;p>[HUAWEI-GigabitEthernet1/0/1] eth-trunk 1&lt;/p>
&lt;p>[HUAWEI-GigabitEthernet1/0/1] q&lt;/p>
&lt;p>配置 SNMP&lt;/p>
&lt;pre>&lt;code>root@lichenhao:~/otherProjects# telnet 172.19.42.200
Trying 172.19.42.200...
Connected to 172.19.42.200.
Escape character is '^]'.
Warning: Telnet is not a secure protocol, and it is recommended to use Stelnet.
Login authentication
Username:root
Password:
Warning: The initial password poses security risks.
The password needs to be changed. Change now? [Y/N]: n
Info: The max number of VTY users is 10, and the number
of current VTY users on line is 1.
The current login time is 2000-06-28 00:17:28+00:00.
# 进入系统视图
&amp;lt;HUAWEI&amp;gt;sys
# 开启 snmp
[HUAWEI]snmp-agent
# 配置 snmp 版本
[HUAWEI]snmp-agent sys-info version v2c
Warning: SNMPv1/SNMPv2c is not secure, and it is recommended to use SNMPv3.
# 关闭团体名密码复杂度检查功能，网上的傻逼资料都不关，不管就没法配置简单的团体名
[HUAWEI]snmp-agent community complexity-check disable
Warning: Does not recommend to disable complexity check. A simple community name may result in security threats.
# 配置 read 模式的团体名
[HUAWEI]snmp-agent community read public
&lt;/code>&lt;/pre></description></item><item><title>Docs: 数据包分析</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/</guid><description/></item><item><title>Docs: 数据通信</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/</guid><description/></item><item><title>Docs: 通信协议</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/</guid><description/></item><item><title>Docs: 信息论</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E4%BF%A1%E6%81%AF%E8%AE%BA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E4%BF%A1%E6%81%AF%E8%AE%BA/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.bilibili.com/video/BV1fq4y1g7hq">B 站-信道容量、香农极限、极化码&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Information_theory">Wiki,Information Theory(信息论)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Polar_code_(coding_theory)">Wiki,Polar Code(极化码)&lt;/a>&lt;/li>
&lt;li>capacity-achieving&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>信息熵&lt;/strong> # 一个答案的最少提问次数
&lt;strong>信道容量&lt;/strong> # 单位时间内能传输的信息量&lt;/p></description></item><item><title>Docs: 中间人攻击与HTTPS抓包</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB%E4%B8%8Ehttps%E6%8A%93%E5%8C%85/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB%E4%B8%8Ehttps%E6%8A%93%E5%8C%85/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/IYZrtK7pJTeCOBwY-sC9HA">公众号-小林 coding，字节一面：HTTPS 一定安全可靠吗？&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>作者：小林 coding&lt;/p>
&lt;p>八股文网站：xiaolincoding.com&lt;/p>
&lt;p>大家好，我是小林。&lt;/p>
&lt;p>上周有位读者在面字节时被问道这么一个问题：&lt;strong>HTTPS 一定安全可靠吗？&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/c4a2528a-2a6a-4424-9cee-a5fcb0429055/640" alt="">&lt;/p>
&lt;p>这个问题的场景是这样的：客户端通过浏览器向服务端发起 HTTPS 请求时，被「假基站」转发到了一个「中间人服务器」，于是客户端是和「中间人服务器」完成了 TLS 握手，然后这个「中间人服务器」再与真正的服务端完成 TLS 握手。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/c4a2528a-2a6a-4424-9cee-a5fcb0429055/640" alt="">&lt;/p>
&lt;p>具体过程如下：&lt;/p>
&lt;ul>
&lt;li>客户端向服务端发起 HTTPS 建立连接请求时，然后被「假基站」转发到了一个「中间人服务器」，接着中间人向服务端发起 HTTPS 建立连接请求，此时客户端与中间人进行 TLS 握手，中间人与服务端进行 TLS 握手；&lt;/li>
&lt;li>在客户端与中间人进行 TLS 握手过程中，中间人会发送自己的公钥证书给客户端，&lt;strong>客户端验证证书的真伪&lt;/strong>，然后从证书拿到公钥，并生成一个随机数，用公钥加密随机数发送给中间人，中间人使用私钥解密，得到随机数，此时双方都有随机数，然后通过算法生成对称加密密钥（A），后续客户端与中间人通信就用这个对称加密密钥来加密数据了。&lt;/li>
&lt;li>在中间人与服务端进行 TLS 握手过程中，服务端会发送从 CA 机构签发的公钥证书给中间人，从证书拿到公钥，并生成一个随机数，用公钥加密随机数发送给服务端，服务端使用私钥解密，得到随机数，此时双方都有随机数，然后通过算法生成对称加密密钥（B），后续中间人与服务端通信就用这个对称加密密钥来加密数据了。&lt;/li>
&lt;li>后续的通信过程中，中间人用对称加密密钥（A）解密客户端的 HTTPS 请求的数据，然后用对称加密密钥（B）加密 HTTPS 请求后，转发给服务端，接着服务端发送 HTTPS 响应数据给中间人，中间人用对称加密密钥（B）解密 HTTPS 响应数据，然后再用对称加密密钥（A）加密后，转发给客户端。&lt;/li>
&lt;/ul>
&lt;p>从客户端的角度看，其实并不知道网络中存在中间人服务器这个角色。&lt;/p>
&lt;p>那么中间人就可以解开浏览器发起的 HTTPS 请求里的数据，也可以解开服务端响应给浏览器的 HTTPS 响应数据。相当于，中间人能够 “偷看” 浏览器与服务端之间的 HTTPS 请求和响应的数据。&lt;/p>
&lt;p>但是要发生这种场景是有前提的，&lt;strong>前提是用户点击接受了中间人服务器的证书。&lt;/strong>&lt;/p>
&lt;p>中间人服务器与客户端在 TLS 握手过程中，实际上发送了自己伪造的证书给浏览器，而这个伪造的证书是能被浏览器（客户端）识别出是非法的，于是就会提醒用户该证书存在问题。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/c4a2528a-2a6a-4424-9cee-a5fcb0429055/640" alt="">&lt;/p>
&lt;p>如果用户执意点击「继续浏览此网站」，相当于用户接受了中间人伪造的证书，那么后续整个 HTTPS 通信都能被中间人监听了。&lt;/p>
&lt;p>所以，这其实并不能说 HTTPS 不够安全，毕竟浏览器都已经提示证书有问题了，如果用户坚决要访问，那&lt;strong>不能怪 HTTPS ，得怪自己手贱&lt;/strong>。&lt;/p>
&lt;h2 id="客户端是如何验证证书的">客户端是如何验证证书的？&lt;/h2>
&lt;p>接下来，详细说一下实际中数字证书签发和验证流程。&lt;/p>
&lt;p>如下图图所示，为数字证书签发和验证流程：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/c4a2528a-2a6a-4424-9cee-a5fcb0429055/640" alt="">
当服务端向 CA 机构申请证书的时候，CA 签发证书的过程，如上图左边部分：&lt;/p>
&lt;ul>
&lt;li>首先 CA 会把持有者的公钥、用途、颁发者、有效时间等信息打成一个包，然后对这些信息进行 Hash 计算，得到一个 Hash 值；&lt;/li>
&lt;li>然后 CA 会使用自己的私钥将该 Hash 值加密，生成 Certificate Signature，也就是 CA 对证书做了签名；&lt;/li>
&lt;li>最后将 Certificate Signature 添加在文件证书上，形成数字证书；&lt;/li>
&lt;/ul>
&lt;p>客户端校验服务端的数字证书的过程，如上图右边部分：&lt;/p>
&lt;ul>
&lt;li>首先客户端会使用同样的 Hash 算法获取该证书的 Hash 值 H1；&lt;/li>
&lt;li>通常浏览器和操作系统中集成了 CA 的公钥信息，浏览器收到证书后可以使用 CA 的公钥解密 Certificate Signature 内容，得到一个 Hash 值 H2 ；&lt;/li>
&lt;li>最后比较 H1 和 H2，如果值相同，则为可信赖的证书，否则则认为证书不可信。&lt;/li>
&lt;/ul>
&lt;p>但事实上，证书的验证过程中&lt;strong>还存在一个证书信任链的问题&lt;/strong>，因为我们向 CA 申请的证书一般不是根证书签发的，而是由中间证书签发的，比如百度的证书，从下图你可以看到，证书的层级有三级：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/c4a2528a-2a6a-4424-9cee-a5fcb0429055/640" alt="">&lt;/p>
&lt;p>对于这种三级层级关系的证书的验证过程如下：&lt;/p>
&lt;ul>
&lt;li>客户端收到 baidu.com 的证书后，发现这个证书的签发者不是根证书，就无法根据本地已有的根证书中的公钥去验证 baidu.com 证书是否可信。于是，客户端根据 baidu.com 证书中的签发者，找到该证书的颁发机构是 “GlobalSign Organization Validation CA - SHA256 - G2”，然后向 CA 请求该中间证书。&lt;/li>
&lt;li>请求到证书后发现 “GlobalSign Organization Validation CA - SHA256 - G2” 证书是由 “GlobalSign Root CA” 签发的，由于 “GlobalSign Root CA” 没有再上级签发机构，说明它是根证书，也就是自签证书。应用软件会检查此证书有否已预载于根证书清单上，如果有，则可以利用根证书中的公钥去验证 “GlobalSign Organization Validation CA - SHA256 - G2” 证书，如果发现验证通过，就认为该中间证书是可信的。&lt;/li>
&lt;li>“GlobalSign Organization Validation CA - SHA256 - G2” 证书被信任后，可以使用 “GlobalSign Organization Validation CA - SHA256 - G2” 证书中的公钥去验证 baidu.com 证书的可信性，如果验证通过，就可以信任 baidu.com 证书。&lt;/li>
&lt;/ul>
&lt;p>在这四个步骤中，最开始客户端只信任根证书 GlobalSign Root CA 证书的，然后 “GlobalSign Root CA” 证书信任 “GlobalSign Organization Validation CA - SHA256 - G2” 证书，而 “GlobalSign Organization Validation CA - SHA256 - G2” 证书又信任 baidu.com 证书，于是客户端也信任 baidu.com 证书。总括来说，由于用户信任 GlobalSign，所以由 GlobalSign 所担保的 baidu.com 可以被信任，另外由于用户信任操作系统或浏览器的软件商，所以由软件商预载了根证书的 GlobalSign 都可被信任。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/c4a2528a-2a6a-4424-9cee-a5fcb0429055/640" alt="">&lt;/p>
&lt;p>操作系统里一般都会内置一些根证书，比如我的 MAC 电脑里内置的根证书有这么多：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/c4a2528a-2a6a-4424-9cee-a5fcb0429055/640" alt="">&lt;/p>
&lt;p>这样的一层层地验证就构成了一条信任链路，整个证书信任链验证流程如下图所示：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/c4a2528a-2a6a-4424-9cee-a5fcb0429055/640" alt="">&lt;/p>
&lt;p>如果你的电脑中毒了，被恶意导入了中间人的根证书，那么在验证中间人的证书的时候，由于你操作系统信任了中间人的根证书，那么等同于中间人的证书是合法的。&lt;/p>
&lt;p>这种情况下，浏览器是不会弹出证书存在问题的风险提醒的。&lt;/p>
&lt;p>这其实也不关 HTTPS 的事情，是你电脑中毒了才导致 HTTPS 数据被中间人劫持的。&lt;/p>
&lt;p>所以，&lt;strong>HTTPS 协议本身到目前为止还是没有任何漏洞的，即使你成功进行中间人攻击，本质上是利用了客户端的漏洞（用户点击继续访问或者被恶意导入伪造的根证书），并不是 HTTPS 不够安全。&lt;/strong>&lt;/p>
&lt;h2 id="为什么抓包工具能截取-https-数据">为什么抓包工具能截取 HTTPS 数据？&lt;/h2>
&lt;p>抓包工具 Fiddler 之所以可以明文看到 HTTPS 数据，工作原理与中间人一致的。&lt;/p>
&lt;p>对于 HTTPS 连接来说，中间人要满足以下两点，才能实现真正的明文代理:&lt;/p>
&lt;ol>
&lt;li>中间人，作为客户端与真实服务端建立连接这一步不会有问题，因为服务端不会校验客户端的身份；&lt;/li>
&lt;li>中间人，作为服务端与真实客户端建立连接，这里会有客户端信任服务端的问题，也就是服务端必须有对应域名的私钥；&lt;/li>
&lt;/ol>
&lt;p>中间人要拿到私钥只能通过如下方式：&lt;/p>
&lt;ol>
&lt;li>去网站服务端拿到私钥；&lt;/li>
&lt;li>去 CA 处拿域名签发私钥；&lt;/li>
&lt;li>自己签发证书，且被浏览器信任；&lt;/li>
&lt;/ol>
&lt;p>不用解释，抓包工具只能使用第三种方式取得中间人的身份。&lt;/p>
&lt;p>使用抓包工具进行 HTTPS 抓包的时候，需要在客户端安装 Fiddler 的根证书，这里实际上起认证中心（CA）的作用。&lt;/p>
&lt;p>Fiddler 能够抓包的关键是客户端会往系统受信任的根证书列表中导入 Fiddler 生成的证书，而这个证书会被浏览器信任，也就是 Fiddler 给自己创建了一个认证中心 CA。&lt;/p>
&lt;p>客户端拿着中间人签发的证书去中间人自己的 CA 去认证，当然认为这个证书是有效的。&lt;/p>
&lt;h2 id="如何避免被中间人抓取数据">如何避免被中间人抓取数据？&lt;/h2>
&lt;p>我们要保证自己电脑的安全，不要被病毒乘虚而入，而且也不要点击任何证书非法的网站，这样 HTTPS 数据就不会被中间人截取到了。&lt;/p>
&lt;p>当然，我们还可以通过 HTTPS 双向认证来避免这种问题。&lt;/p>
&lt;p>一般我们的 HTTPS 是单向认证，客户端只会验证了服务端的身份，但是服务端并不会验证客户端的身份。&lt;/p>
&lt;p>如果用了双向认证方式，不仅客户端会验证服务端的身份，而且服务端也会验证客户端的身份。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/c4a2528a-2a6a-4424-9cee-a5fcb0429055/640" alt="">&lt;/p>
&lt;p>服务端一旦验证到请求自己的客户端为不可信任的，服务端就拒绝继续通信，客户端如果发现服务端为不可信任的，那么也中止通信。&lt;/p>
&lt;p>完！&lt;/p></description></item></channel></rss>