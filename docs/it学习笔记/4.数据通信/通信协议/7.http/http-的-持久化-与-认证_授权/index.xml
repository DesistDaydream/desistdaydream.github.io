<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – HTTP 的 持久化 与 认证_授权</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/7.http/http-%E7%9A%84-%E6%8C%81%E4%B9%85%E5%8C%96-%E4%B8%8E-%E8%AE%A4%E8%AF%81_%E6%8E%88%E6%9D%83/</link><description>Recent content in HTTP 的 持久化 与 认证_授权 on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/7.http/http-%E7%9A%84-%E6%8C%81%E4%B9%85%E5%8C%96-%E4%B8%8E-%E8%AE%A4%E8%AF%81_%E6%8E%88%E6%9D%83/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Session 与 Cookie</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/7.http/http-%E7%9A%84-%E6%8C%81%E4%B9%85%E5%8C%96-%E4%B8%8E-%E8%AE%A4%E8%AF%81_%E6%8E%88%E6%9D%83/session-%E4%B8%8E-cookie/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/7.http/http-%E7%9A%84-%E6%8C%81%E4%B9%85%E5%8C%96-%E4%B8%8E-%E8%AE%A4%E8%AF%81_%E6%8E%88%E6%9D%83/session-%E4%B8%8E-cookie/</guid><description>
&lt;p>Cookie&lt;/p>
&lt;p>背景&lt;/p>
&lt;ul>
&lt;li>
&lt;p>HTTP 是无状态协议，服务器不能记录浏览器的访问状态，也就是说服务器不能区分两次请求是否由同一个客户端发出&lt;/p>
&lt;/li>
&lt;li>
&lt;p>**Cookie(小甜饼) **就是解决 HTTP 协议无状态的方案之一&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Cookie 实际上就是服务器保存再浏览器上的一段信息。浏览器有了 Cookie 之后，每次向服务器发送请求时都会同时将该信息发送给服务器，服务器收到请求后，就可以根据该信息处理请求&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Cookie 由服务器创建，并发送给浏览器，最终由浏览器保存&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qpvk57/1616161168269-5454b393-dbe3-4518-a3e0-480ab5358176.png" alt="">&lt;/p>
&lt;p>Cookie 的用途&lt;/p>
&lt;ul>
&lt;li>
&lt;p>保持用户登陆状态，由于不够安全，现在有其他方式替代&lt;/p>
&lt;/li>
&lt;li>
&lt;p>京东未登录的状态下，使用 Cookie 存储购物车中的物品的&lt;/p>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>淘宝不是这么实现的，淘宝必须登录才能浏览详细商品&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>上一次连接时打开的页面&lt;/p>
&lt;/li>
&lt;li>
&lt;p>与某个账号关联&lt;/p>
&lt;/li>
&lt;li>
&lt;p>等等&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="cookie-的属性">Cookie 的属性&lt;/h2>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qpvk57/1623676019731-6e1d1e07-4c5a-4d22-a396-32d3e541c07f.png" alt="image.png">&lt;/p>
&lt;p>一个 cookie 将会具有如下字段：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>name&lt;/strong> # cookie 的名称&lt;/p>
&lt;/li>
&lt;li>
&lt;p>**value **# cookie 的值&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>domain&lt;/strong> # 可以访问此 cookie 的域名&lt;/p>
&lt;/li>
&lt;li>
&lt;p>**path **# 可以访问此 cookie 的页面路径。比如 domain 是 desistdaydream.ltd，path 是 /cookie，那么只有访问 &lt;a href="http://desistdaydream.ltd/cookie">http://desistdaydream.ltd/cookie&lt;/a> 路径下的页面时，才可以读取此 cookie&lt;/p>
&lt;/li>
&lt;li>
&lt;p>**MaxAge **或 &lt;strong>Expires&lt;/strong> # 设置 cookie 持久化时的过期时长&lt;/p>
&lt;ul>
&lt;li>注意：Expires 是老式的过期方法， 如果可以，应该使用 MaxAge 设置过期时间，但有些老版本的浏览器不支持 MaxAge。 如果要支持所有浏览器，要么使用 Expires，要么同时使用 MaxAge 和 Expires。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>size&lt;/strong> # cookie 的大小&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>httpOnly&lt;/strong> # 是否允许别人通过 js 获取自己的 cookie&lt;/p>
&lt;ul>
&lt;li>httpOnly 属性限制了 cookie 对 HTTP 请求的作用范围。特别的，该属性指示用户代理忽略那些通过&amp;quot;非 HTTP&amp;quot; 方式对 cookie 的访问（比如浏览器暴露给 js 的接口）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>secure&lt;/strong> # 是否只能通过 https 访问&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>注意：&lt;/p>
&lt;ul>
&lt;li>HttpOnly 属性和 Secure 属性相互独立：一个 cookie 既可以是 HttpOnly 的也可以有 Secure 属性。 在前段时间的项目中我就用 js 去读取一个 cookie，结果怎么都取不到这个值，最后查证这个 cookie 是 httpOnly 的，花了近 2 个小时，悲剧了。&lt;/li>
&lt;/ul>
&lt;p>Cookie 的缺点&lt;/p>
&lt;ul>
&lt;li>
&lt;p>不安全，明文&lt;/p>
&lt;/li>
&lt;li>
&lt;p>增加带宽消耗&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可以在客户端手动禁用&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Cookie 是有上限的，最大 4096 字节&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Session&lt;/p>
&lt;p>背景&lt;/p>
&lt;p>Cookie 虽然在一定程度上解决了 &amp;ldquo;保持状态&amp;rdquo; 的需求，但是由于 Cookie 本身最大支持 4096 字节，以及 Cookie 本身保存在客户端，可能被拦截或窃取，因此就需要有一种新的东西，它能支持更多的字节，并且他保存在服务器，有较高的安全性，这，就是 &lt;strong>Session(会话)&lt;/strong>。&lt;/p>
&lt;p>但是这时，问题又来了，基于 HTTP 协议的无状态特征，服务器根本不知道访问者是谁。又如何保存呢？此时，Cookie 又来了，起到了一个桥接的作用。&lt;/p>
&lt;p>用户登录成功之后，我们在服务端为每个用户创建一个特定的 **SessionData **和 &lt;strong>SessionID&lt;/strong>，他们一一对应。其中：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>SessionData 是在服务端保存的一个数据结构，用来跟踪用户的状态，这个数据可以保存在集群、数据库、文件中&lt;/p>
&lt;ul>
&lt;li>这个 SessionData 的数据结构一般都是 KEY/VALUE 类型的结构，相当于一个 **大 map。**可以保存在内存中、关系型数据库、Rdis、文件、等等地方&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>SessionID 作为唯一标识符，通常会写入到用户的 Cookie 中。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>所以，&lt;strong>Session 必须依赖于 Cookie 才能使用&lt;/strong>，生成一个 SessionID 放在 Cookie 里传给客户端即可。&lt;/p>
&lt;p>在互联网早期，访问一个网站为了持久化，将用户名和密码放在 cookie 里，一条信息就对应一条 cookie。&lt;/p>
&lt;p>比如访问 baidu.com 后，浏览器记录了这么几个 cookie：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>username: DesistDaydream&lt;/p>
&lt;/li>
&lt;li>
&lt;p>password: mypassword&lt;/p>
&lt;/li>
&lt;li>
&lt;p>XXX: XXXX&lt;/p>
&lt;/li>
&lt;li>
&lt;p>YYY: YYY&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&amp;hellip;..等等&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>而使用了 Session 之后，Cookie 不再记录这些敏感信息，只保存一个 ID 用来标识这个 Session：&lt;/p>
&lt;ul>
&lt;li>sessionID: DesistDaydream&lt;/li>
&lt;/ul>
&lt;p>剩下的信息一般都保存在服务器本地，根据 sessionID 找到对应信息即可&lt;/p>
&lt;p>Session 逻辑&lt;/p>
&lt;p>这是一个简单的 Session 处理请求的逻辑&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qpvk57/1616161168291-de47fffb-605b-41a5-ae65-aa3004c78762.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qpvk57/1616161168320-400fd569-42fc-41ba-a439-6556a456a72e.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qpvk57/1616161168293-4d7ef534-5772-4f15-8eaf-ccf0aa43f1db.png" alt="">&lt;/p>
&lt;h2 id="session-设计思路">Session 设计思路&lt;/h2>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qpvk57/1616161168286-70f4c25f-49bd-4b84-8b50-f0bca0900dd1.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qpvk57/1616161168270-49a7f14e-1cf0-4e50-8ddc-3cc8d9537544.png" alt="">&lt;/p>
&lt;p>Session 本质上是一个 K/V ，通过 key 进行增删改查。可以存储在 RAM 或者 Redis 中。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>一般有多个 Session，所以需要一个管理器统一管理&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Session 一般作为中间件，所以需要暴露结构给其他代码使用&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Session 接口设计&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Set()&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Get()&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Del()&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Save() # 持久存储&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>SessionMgr 接口设计&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Init() # 初始化，加载 RAM 或 Redis &lt;/p>
&lt;/li>
&lt;li>
&lt;p>CreateSession() # 创建一个新的 Session&lt;/p>
&lt;/li>
&lt;li>
&lt;p>GetSession() # 通过 SessionID 获取对应的 Session 对象&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>RAM Session 设计&lt;/p>
&lt;ul>
&lt;li>
&lt;p>定义 RAM Session 对象&lt;/p>
&lt;ul>
&lt;li>
&lt;p>SessionID&lt;/p>
&lt;/li>
&lt;li>
&lt;p>存 K/V 的 map&lt;/p>
&lt;/li>
&lt;li>
&lt;p>读写锁&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>构造函数，为了获取对象&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Set()&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Get()&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Del()&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Save()&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>RAM SessionMgr 设计&lt;/p>
&lt;ul>
&lt;li>
&lt;p>定义 Memory SessionMgr 对象&lt;/p>
&lt;ul>
&lt;li>
&lt;p>存放所有 Session 的 map&lt;/p>
&lt;/li>
&lt;li>
&lt;p>读写锁&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>构造函数&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Init()&lt;/p>
&lt;/li>
&lt;li>
&lt;p>CreateSession()&lt;/p>
&lt;/li>
&lt;li>
&lt;p>GetSession()&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Redis Session 设计&lt;/p>
&lt;ul>
&lt;li>
&lt;p>定义 RedisSession 对象&lt;/p>
&lt;ul>
&lt;li>
&lt;p>SessionID&lt;/p>
&lt;/li>
&lt;li>
&lt;p>存 K/V 的 map&lt;/p>
&lt;/li>
&lt;li>
&lt;p>读写锁&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Redis 连接池&lt;/p>
&lt;/li>
&lt;li>
&lt;p>记录内存中 map 是否被修改的编辑&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>构造函数&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Set()&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Get()&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Del()&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Save()&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Redis SessionMgr 设计&lt;/p>
&lt;ul>
&lt;li>
&lt;p>定义 Redis SessionMgr 对象&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Redis 地址、密码、连接池、读写锁&lt;/p>
&lt;/li>
&lt;li>
&lt;p>存放所有 Session 的 map&lt;/p>
&lt;/li>
&lt;li>
&lt;p>读写锁&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>构造函数&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Init()&lt;/p>
&lt;/li>
&lt;li>
&lt;p>CreateSession()&lt;/p>
&lt;/li>
&lt;li>
&lt;p>GetSession()&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: Token 与 JWT</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/7.http/http-%E7%9A%84-%E6%8C%81%E4%B9%85%E5%8C%96-%E4%B8%8E-%E8%AE%A4%E8%AF%81_%E6%8E%88%E6%9D%83/token-%E4%B8%8E-jwt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/7.http/http-%E7%9A%84-%E6%8C%81%E4%B9%85%E5%8C%96-%E4%B8%8E-%E8%AE%A4%E8%AF%81_%E6%8E%88%E6%9D%83/token-%E4%B8%8E-jwt/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://jwt.io/">JWT 官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://datatracker.ietf.org/doc/html/rfc7519">rfc7519&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html">阮一峰,JSON Web Token 入门教程&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="jwt">JWT&lt;/h1>
&lt;p>&lt;strong>JSON Web Token(简称 JWT)&lt;/strong> 是目前最流行的跨域认证解决方案。JWT 是一个开放标准(&lt;a href="https://tools.ietf.org/html/rfc7519">RFC 7519&lt;/a>)，定义了一种紧凑且子包含的方式，用于在各方滞纳金作为 JSON 对象安全得传输信息。该信息可以被验证和信任，因为它是经过数字签名的。可以通过 RSA 或 ECDSA 这种公钥/私钥对进行签名、也可以使用 HMAC 进行签名。&lt;/p>
&lt;h2 id="背景">背景&lt;/h2>
&lt;h3 id="跨域认证的问题">跨域认证的问题&lt;/h3>
&lt;p>互联网服务离不开用户认证。一般流程是下面这样。&lt;/p>
&lt;ol>
&lt;li>用户向服务器发送用户名和密码。&lt;/li>
&lt;li>服务器验证通过后，在当前对话（session）里面保存相关数据，比如用户角色、登录时间等等。&lt;/li>
&lt;li>服务器向用户返回一个 session_id，写入用户的 Cookie。&lt;/li>
&lt;li>用户随后的每一次请求，都会通过 Cookie，将 session_id 传回服务器。&lt;/li>
&lt;li>服务器收到 session_id，找到前期保存的数据，由此得知用户的身份。&lt;/li>
&lt;/ol>
&lt;p>这种模式的问题在于，扩展性（scaling）不好。单机当然没有问题，如果是服务器集群，或者是跨域的服务导向架构，就要求 session 数据共享，每台服务器都能够读取 session。&lt;/p>
&lt;p>举例来说，A 网站和 B 网站是同一家公司的关联服务。现在要求，用户只要在其中一个网站登录，再访问另一个网站就会自动登录，请问怎么实现？&lt;/p>
&lt;p>一种解决方案是 session 数据持久化，写入数据库或别的持久层。各种服务收到请求后，都向持久层请求数据。这种方案的优点是架构清晰，缺点是工程量比较大。另外，持久层万一挂了，就会单点失败。&lt;/p>
&lt;p>另一种方案是服务器索性不保存 session 数据了，所有数据都保存在客户端，每次请求都发回服务器。JWT 就是这种方案的一个代表。&lt;/p>
&lt;h2 id="jwt-的原理">JWT 的原理&lt;/h2>
&lt;p>JWT 的原理是，服务器认证以后，生成一个 JSON 对象，发回给用户，就像下面这样。&lt;/p>
&lt;pre>&lt;code>{
&amp;quot;姓名&amp;quot;: &amp;quot;张三&amp;quot;,
&amp;quot;角色&amp;quot;: &amp;quot;管理员&amp;quot;,
&amp;quot;到期时间&amp;quot;: &amp;quot;2018年7月1日0点0分&amp;quot;
}
&lt;/code>&lt;/pre>
&lt;p>以后，用户与服务端通信的时候，都要发回这个 JSON 对象。服务器完全只靠这个对象认定用户身份。为了防止用户篡改数据，服务器在生成这个对象的时候，会加上签名（详见后文）。&lt;/p>
&lt;p>服务器就不保存任何 session 数据了，也就是说，服务器变成无状态了，从而比较容易实现扩展。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/sn00y2/1623744463253-b71ac60f-9871-4aef-8c37-8166947d5b58.webp" alt="">&lt;/p>
&lt;h2 id="jwt-的数据结构">JWT 的数据结构&lt;/h2>
&lt;p>实际的 JWT 大概就像下面这样。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/sn00y2/1623651349414-4518a10e-dbd4-4461-a4e2-a039518e8355.jpeg" alt="">
它是一个很长的字符串，中间用点（.）分隔成三个部分。注意，JWT 内部是没有换行的，这里只是为了便于展示，将它写成了几行。
JWT 的三个部分依次如下。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Header(头部)&lt;/strong> #&lt;/li>
&lt;li>**Payload(负载) **#&lt;/li>
&lt;li>&lt;strong>Signature(签名)&lt;/strong> #&lt;/li>
&lt;/ul>
&lt;p>写成一行，就是下面的样子。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>Header.Payload.Signature
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/sn00y2/1623651350412-81b31181-9912-4411-a330-00e6e92e791b.jpeg" alt="">&lt;/p>
&lt;h3 id="header">Header&lt;/h3>
&lt;p>Header 部分是一个 JSON 对象，描述 JWT 的元数据，通常是下面的样子。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;alg&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;HS256&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;typ&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;JWT&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>alg # 表示签名的算法（algorithm），默认是 HMAC SHA256(写成 HS256)&lt;/li>
&lt;li>typ # 表示这个令牌（token）的类型（type），JWT 令牌统一写为 JWT。&lt;/li>
&lt;/ul>
&lt;p>最后，将上面的 JSON 对象使用 Base64URL 算法（详见后文）转成字符串。&lt;/p>
&lt;h3 id="payload">Payload&lt;/h3>
&lt;p>Payload 部分也是一个 JSON 对象，用来存放实际需要传递的数据。Payload 由多个 &lt;strong>Claims(要求)&lt;/strong> 组成。Claims 通常用来描述实体和附加数据，实体通常来说就是一个用户。&lt;/p>
&lt;p>一共有三种类型的 Claims：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Registered Claims(已注册要求)&lt;/strong>，其实就是 JWT 默认自带的。JWT 规定了 7 个默认的 Claims。
&lt;ul>
&lt;li>&lt;strong>iss(issuer)&lt;/strong> # 签发人。与 x509 证书的 Issuer 概念一样&lt;/li>
&lt;li>&lt;strong>sub(subject)&lt;/strong> # 主体。与 x509 证书的 Subject 概念一样&lt;/li>
&lt;li>&lt;strong>aud(audience)&lt;/strong> # 受众，就是 JWT 的人或程序或某事物&lt;/li>
&lt;li>&lt;strong>exp(expiration time)&lt;/strong> # 过期时间。这个时间必须要大于 &lt;code>iat&lt;/code> 字段指定的时间&lt;/li>
&lt;li>&lt;strong>nbf(Not Before)&lt;/strong> # 生效时间。定义在什么时间之前该 JWT 是不可用的。类似 X.509 中的 &lt;code>Not Before&lt;/code> 字段。&lt;/li>
&lt;li>&lt;strong>iat(Issued At)&lt;/strong> # 签发时间。&lt;/li>
&lt;li>&lt;strong>jti(JWT ID)&lt;/strong> # JWT 的 ID，主要用来作为一次性 Token，从而回避重放攻击&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>**Public Claims(公共要求)，**使用 JWT 时的自定义 Claims。
&lt;ul>
&lt;li>但是给 Public Claims 命名时，要注意不要与 &lt;a href="https://www.iana.org/assignments/jwt/jwt.xhtml">IANA JSON Web Token Registry&lt;/a> 中定义的名称相冲突。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>**Private Claims(私有要求)，**也是一种自定义的 Claims，通常用来共享信息。JWT 的生产者和消费者可以同意使用 Private Claims，而不是其他两种类型的 Claims。&lt;/li>
&lt;/ul>
&lt;p>下面就是一个有效的 Payload 的示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;sub&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;1234567890&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;John Doe&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;admin&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意，JWT 默认是不加密的，任何人都可以读到，所以不要把敏感信息放在 JWT 中。
**
这个 JSON 对象也要使用 Base64URL 算法转成字符串。&lt;/p>
&lt;h3 id="signature">Signature&lt;/h3>
&lt;p>&lt;strong>Signature(签名)&lt;/strong> 是对前 Header 与 Payload 的签名，防止数据篡改。
首先，需要指定一个 secret(密钥)。这个密钥只有服务器才知道，不能泄露给用户。然后，使用 Header 里面指定的签名算法（默认是 HMAC SHA256），按照下面的公式产生签名。&lt;/p>
&lt;pre>&lt;code>HMACSHA256(
base64UrlEncode(HEADER) + &amp;quot;.&amp;quot; +
base64UrlEncode(PAYLOAD),
secret)
&lt;/code>&lt;/pre>
&lt;p>当我们要解析 JWT 时，也要使用相同 Secret，如果 Secret，则验证签名将会失败，JWT 这个 Token 也就失效了~这就是签名的重要性啦~&lt;/p>
&lt;h3 id="总结">总结&lt;/h3>
&lt;p>算出 Signature 以后，把 Header、Payload、Signature 三个部分拼成一个字符串，每个部分之间用&amp;quot;点&amp;quot;（.）分隔，这就组成了一个字符串类型的 JWT。&lt;/p>
&lt;p>&lt;strong>Base64URL&lt;/strong>
前面提到，Header 和 Payload 串型化的算法是 Base64URL。这个算法跟 Base64 算法基本类似，但有一些小的不同。
JWT 作为一个令牌（token），有些场合可能会放到 URL（比如 api.example.com/?token=xxx）。Base64 有三个字符+、/和=，在 URL 里面有特殊含义，所以要被替换掉：=被省略、+替换成-，/替换成_ 。这就是 Base64URL 算法。&lt;/p>
&lt;h2 id="jwt-的使用方式">JWT 的使用方式&lt;/h2>
&lt;p>客户端收到服务器返回的 JWT，可以储存在 Cookie 里面，也可以储存在 localStorage。
此后，客户端每次与服务器通信，都要带上这个 JWT。你可以把它放在 Cookie 里面自动发送，但是这样不能跨域，所以更好的做法是放在 HTTP 请求的头信息 Authorization 字段里面。&lt;/p>
&lt;pre>&lt;code>Authorization: Bearer &amp;lt;TOKEN&amp;gt;
&lt;/code>&lt;/pre>
&lt;p>另一种做法是，跨域的时候，JWT 就放在 POST 请求的数据体里面。&lt;/p>
&lt;h2 id="jwt-的几个特点">JWT 的几个特点&lt;/h2>
&lt;p>（1）JWT 默认是不加密，但也是可以加密的。生成原始 Token 以后，可以用密钥再加密一次。
（2）JWT 不加密的情况下，不能将秘密数据写入 JWT。
（3）JWT 不仅可以用于认证，也可以用于交换信息。有效使用 JWT，可以降低服务器查询数据库的次数。
（4）JWT 的最大缺点是，由于服务器不保存 session 状态，因此无法在使用过程中废止某个 token，或者更改 token 的权限。也就是说，一旦 JWT 签发了，在到期之前就会始终有效，除非服务器部署额外的逻辑。
（5）JWT 本身包含了认证信息，一旦泄露，任何人都可以获得该令牌的所有权限。为了减少盗用，JWT 的有效期应该设置得比较短。对于一些比较重要的权限，使用时应该再次对用户进行认证。
（6）为了减少盗用，JWT 不应该使用 HTTP 协议明码传输，要使用 HTTPS 协议传输。&lt;/p>
&lt;h2 id="参考链接">参考链接&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://jwt.io/introduction/">Introduction to JSON Web Tokens&lt;/a>， by Auth0&lt;/li>
&lt;li>&lt;a href="https://medium.com/@bryanmanuele/sessionless-authentication-withe-jwts-with-node-express-passport-js-69b059e4b22c">Sessionless Authentication using JWTs (with Node + Express + Passport JS)&lt;/a>, by Bryan Manuele&lt;/li>
&lt;li>&lt;a href="https://github.com/dwyl/learn-json-web-tokens/blob/master/README.md">Learn how to use JSON Web Tokens&lt;/a>, by dwyl&lt;/li>
&lt;/ul>
&lt;p>（完）&lt;/p></description></item></channel></rss>