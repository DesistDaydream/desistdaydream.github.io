<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – 7.WebSocket</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/7.websocket/</link><description>Recent content in 7.WebSocket on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/7.websocket/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: 有了 HTTP 协议，为什么还要有 websocket 协议？</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/7.websocket/%E6%9C%89%E4%BA%86-http-%E5%8D%8F%E8%AE%AE%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%98%E8%A6%81%E6%9C%89-websocket-%E5%8D%8F%E8%AE%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/7.websocket/%E6%9C%89%E4%BA%86-http-%E5%8D%8F%E8%AE%AE%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%98%E8%A6%81%E6%9C%89-websocket-%E5%8D%8F%E8%AE%AE/</guid><description>
&lt;p>原文链接：&lt;a href="https://mp.weixin.qq.com/s/TtRKkVxS6H-miQ8luQgY1A">https://mp.weixin.qq.com/s/TtRKkVxS6H-miQ8luQgY1A&lt;/a>&lt;/p>
&lt;p>平时我们打开网页，比如购物网站某宝。都是点一下「列表商品」，跳转一下网页就到了「商品详情」。&lt;/p>
&lt;p>从 HTTP 协议的角度来看，就是点一下网页上的某个按钮，&lt;strong>前端发一次 HTTP 请 求，网站返回一次 HTTP 响应&lt;/strong>。这种由客户端主动请求，服务器响应的方式也满足大部分网页的功能场景。&lt;/p>
&lt;p>但有没有发现，这种情况下，服务器从来就「不会主动」给客户端发一次消息。就像你喜欢的女生从来不会主动找你一样。&lt;/p>
&lt;p>但如果现在，你在刷网页的时候「右下角」突然弹出一个小广告，提示你【一个人在家偷偷才能玩哦】。&lt;/p>
&lt;p>&lt;strong>求知，好学，勤奋&lt;/strong>，这些刻在你 DNA 里的东西都动起来了。&lt;/p>
&lt;p>你点开后发现。&lt;/p>
&lt;p>长相平平无奇的古某提示你&amp;quot;道士 9 条狗，全服横着走&amp;quot;。&lt;/p>
&lt;p>影帝某辉老师跟你说&amp;quot;系兄弟就来砍我&amp;quot;。&lt;/p>
&lt;p>来都来了，你就选了个角色进到了游戏界面里。&lt;/p>
&lt;p>这时候，上来就是一个小怪，从远处走来，然后疯狂拿木棒子抽你。&lt;/p>
&lt;p>&lt;strong>你全程没点任何一次鼠标&lt;/strong>。服务器就自动将怪物的移动数据和攻击数据源源不断发给你了。&lt;/p>
&lt;p>这….太暖心了。&lt;/p>
&lt;p>感动之余，问题就来了，&lt;/p>
&lt;p>像这种&lt;strong>看起来服务器主动发消息给客户端的场景&lt;/strong>，是怎么做到的？&lt;/p>
&lt;p>在真正回答这个问题之前，我们先来聊下一些相关的知识背景。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/afdf7e39-b517-44de-aba8-101722d9d45e/640" alt="">&lt;/p>
&lt;h2 id="使用-http-不断轮询">使用 HTTP 不断轮询&lt;/h2>
&lt;p>其实问题的痛点在于，&lt;strong>怎么样才能在用户不做任何操作的情况下，网页能收到消息并发生变更。&lt;/strong>&lt;/p>
&lt;p>最常见的解决方案是，&lt;strong>网页的前端代码里不断定时发 HTTP 请求到服务器，服务器收到请求后给客户端响应消息。&lt;/strong>&lt;/p>
&lt;p>这其实时一种「&lt;strong>伪&lt;/strong>」服务器推的形式。&lt;/p>
&lt;p>它其实并不是服务器主动发消息到客户端，而是客户端自己不断偷偷请求服务器，只是用户无感知而已。&lt;/p>
&lt;p>用这种方式的场景也有很多，最常见的就是&lt;strong>扫码登录&lt;/strong>。&lt;/p>
&lt;p>比如，某信公众号平台，登录页面二维码出现之后，&lt;strong>前端&lt;/strong>网页根本不知道用户扫没扫，于是不断去向&lt;strong>后端&lt;/strong>服务器询问，看有没有人扫过这个码。而且是以大概 1 到 2 秒的间隔去不断发出请求，这样可以保证用户在扫码后能在 1 到 2 秒内得到及时的反馈，不至于&lt;strong>等太久&lt;/strong>。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/afdf7e39-b517-44de-aba8-101722d9d45e/640" alt="">&lt;/p>
&lt;p>使用 HTTP 定时轮询&lt;/p>
&lt;p>但这样，会有两个比较明显的问题：&lt;/p>
&lt;ul>
&lt;li>当你打开 F12 页面时，你会发现满屏的 HTTP 请求。虽然很小，但这其实也消耗带宽，同时也会增加下游服务器的负担。&lt;/li>
&lt;li>最坏情况下，用户在扫码后，需要等个 1~2 秒，正好才触发下一次 HTTP 请求，然后才跳转页面，用户会感到&lt;strong>明显的卡顿&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;p>使用起来的体验就是，二维码出现后，手机扫一扫，然后在手机上点个确认，这时候&lt;strong>卡顿等个 1~2 秒&lt;/strong>，页面才跳转。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/afdf7e39-b517-44de-aba8-101722d9d45e/640" alt="">&lt;/p>
&lt;p>不断轮询查看是否有扫码&lt;/p>
&lt;p>那么问题又来了，&lt;strong>有没有更好的解决方案？&lt;/strong>&lt;/p>
&lt;p>有，而且实现起来成本还非常低。&lt;/p>
&lt;h2 id="长轮询">长轮询&lt;/h2>
&lt;p>我们知道，HTTP 请求发出后，一般会给服务器留一定的时间做响应，比如 3 秒，规定时间内没返回，就认为是超时。&lt;/p>
&lt;p>如果我们的 HTTP 请求&lt;strong>将超时设置的很大&lt;/strong>，比如 30 秒，&lt;strong>在这 30 秒内只要服务器收到了扫码请求，就立马返回给客户端网页。如果超时，那就立马发起下一次请求。&lt;/strong>&lt;/p>
&lt;p>这样就减少了 HTTP 请求的个数，并且由于大部分情况下，用户都会在某个 30 秒的区间内做扫码操作，所以响应也是及时的。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/afdf7e39-b517-44de-aba8-101722d9d45e/640" alt="">&lt;/p>
&lt;p>长轮询&lt;/p>
&lt;p>比如，某度云网盘就是这么干的。所以你会发现一扫码，手机上点个确认，电脑端网页就&lt;strong>秒跳转&lt;/strong>，体验很好。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/afdf7e39-b517-44de-aba8-101722d9d45e/640" alt="">&lt;/p>
&lt;p>长轮询的方式来替代&lt;/p>
&lt;p>像这种发起一个请求，在较长时间内等待服务器响应的机制，就是所谓的&lt;strong>长训轮机制&lt;/strong>。我们常用的消息队列 RocketMQ 中，消费者去取数据时，也用到了这种方式。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/afdf7e39-b517-44de-aba8-101722d9d45e/640" alt="">&lt;/p>
&lt;p>RocketMQ 的消费者通过长轮询获取数据&lt;/p>
&lt;p>像这种，在用户不感知的情况下，服务器将数据推送给浏览器的技术，就是所谓的&lt;strong>服务器推送&lt;/strong>技术，它还有个毫不沾边的英文名，&lt;strong>comet&lt;/strong> 技术，大家听过就好。&lt;/p>
&lt;p>上面提到的两种解决方案（不断轮询和长轮询），本质上，其实还是客户端主动去取数据。&lt;/p>
&lt;p>对于像扫码登录这样的&lt;strong>简单场景&lt;/strong>还能用用。但如果是网页游戏呢，游戏一般会有大量的数据需要从服务器主动推送到客户端。&lt;/p>
&lt;p>这就得说下 &lt;strong>websocket&lt;/strong> 了。&lt;/p>
&lt;h2 id="websocket-是什么http-的半双工">websocket 是什么(HTTP 的半双工)&lt;/h2>
&lt;p>我们知道 TCP 连接的两端，&lt;strong>同一时间里&lt;/strong>，&lt;strong>双方&lt;/strong>都可以&lt;strong>主动&lt;/strong>向对方发送数据。这就是所谓的&lt;strong>全双工&lt;/strong>。&lt;/p>
&lt;p>而现在使用最广泛的&lt;code>HTTP/1.1&lt;/code>，也是基于 TCP 协议的，&lt;strong>同一时间里&lt;/strong>，客户端和服务器&lt;strong>只能有一方主动&lt;/strong>发数据，这就是所谓的&lt;strong>半双工&lt;/strong>。&lt;/p>
&lt;p>也就是说，好好的全双工 TCP，被 HTTP/1.1 用成了半双工。&lt;/p>
&lt;p>为什么？&lt;/p>
&lt;p>这是由于 HTTP 协议设计之初，考虑的是看看网页文本的场景，能做到&lt;strong>客户端发起请求再由服务器响应&lt;/strong>，就够了，根本就没考虑网页游戏这种，客户端和服务器之间都要互相主动发大量数据的场景。&lt;/p>
&lt;p>所以，为了更好的支持这样的场景，我们需要另外一个&lt;strong>基于 TCP 的新协议&lt;/strong>。&lt;/p>
&lt;p>于是新的应用层协议&lt;strong>websocket&lt;/strong>就被设计出来了。&lt;/p>
&lt;p>大家别被这个名字给带偏了。虽然名字带了个 socket，但其实 &lt;strong>socket 和 websocket 之间，就跟雷峰和雷峰塔一样，二者接近毫无关系&lt;/strong>。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/afdf7e39-b517-44de-aba8-101722d9d45e/640" alt="">&lt;/p>
&lt;p>websocket 在四层网络协议中的位置&lt;/p>
&lt;h3 id="怎么建立-websocket-连接">怎么建立 websocket 连接&lt;/h3>
&lt;p>我们平时刷网页，一般都是在浏览器上刷的，一会刷刷图文，这时候用的是 &lt;strong>HTTP 协议&lt;/strong>，一会打开网页游戏，这时候就得切换成我们新介绍的 &lt;strong>websocket 协议&lt;/strong>。&lt;/p>
&lt;p>为了兼容这些使用场景。浏览器在 &lt;strong>TCP 三次握手&lt;/strong>建立连接之后，都&lt;strong>统一使用 HTTP 协议&lt;/strong>先进行一次通信。&lt;/p>
&lt;ul>
&lt;li>如果此时是&lt;strong>普通的 HTTP 请求&lt;/strong>，那后续双方就还是老样子继续用普通 HTTP 协议进行交互，这点没啥疑问。&lt;/li>
&lt;li>如果这时候是&lt;strong>想建立 websocket 连接&lt;/strong>，就会在 HTTP 请求里带上一些&lt;strong>特殊的 header 头&lt;/strong>，如下：&lt;/li>
&lt;/ul>
&lt;p>&lt;code>Connection: Upgrade Upgrade: websocket Sec-WebSocket-Key: T2a6wZlAwhgQNqruZ2YUyg==\r\n&lt;/code>&lt;/p>
&lt;p>这些 header 头的意思是，浏览器想&lt;strong>升级协议（Connection: Upgrade）&lt;/strong>，并且&lt;strong>想升级成 websocket 协议（Upgrade: websocket）&lt;/strong>。同时带上一段&lt;strong>随机生成的 base64 码（Sec-WebSocket-Key）&lt;/strong>，发给服务器。&lt;/p>
&lt;p>如果服务器正好支持升级成 websocket 协议。就会走 websocket 握手流程，同时根据客户端生成的 base64 码，用某个&lt;strong>公开的&lt;/strong>算法变成另一段字符串，放在 HTTP 响应的 &lt;code>Sec-WebSocket-Accept&lt;/code> 头里，同时带上&lt;code>101状态码&lt;/code>，发回给浏览器。HTTP 的响应如下：&lt;/p>
&lt;p>&lt;code>HTTP/1.1 101 Switching Protocols\r\n Sec-WebSocket-Accept: iBJKv/ALIW2DobfoA4dmr3JHBCY=\r\n Upgrade: websocket\r\n Connection: Upgrade\r\n&lt;/code>&lt;/p>
&lt;p>HTTP 状态码=200（正常响应）的情况，大家见得多了。101 确实不常见，它其实是指&lt;strong>协议切换&lt;/strong>。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/afdf7e39-b517-44de-aba8-101722d9d45e/640" alt="">&lt;/p>
&lt;p>base64 转为新的字符串&lt;/p>
&lt;p>之后，浏览器也用同样的&lt;strong>公开算法&lt;/strong>将&lt;code>base64码&lt;/code>转成另一段字符串，如果这段字符串跟服务器传回来的&lt;strong>字符串一致&lt;/strong>，那验证通过。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/afdf7e39-b517-44de-aba8-101722d9d45e/640" alt="">&lt;/p>
&lt;p>对比客户端和服务端生成的字符串&lt;/p>
&lt;p>就这样经历了一来一回两次 HTTP 握手，websocket 就建立完成了，后续双方就可以使用 webscoket 的数据格式进行通信了。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/afdf7e39-b517-44de-aba8-101722d9d45e/640" alt="">&lt;/p>
&lt;p>建立 websocket 连接.drawio&lt;/p>
&lt;h3 id="websocket-抓包">websocket 抓包&lt;/h3>
&lt;p>我们可以用 wireshark 抓个包，实际看下数据包的情况。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/afdf7e39-b517-44de-aba8-101722d9d45e/640" alt="">&lt;/p>
&lt;p>客户端请求升级为 websocket&lt;/p>
&lt;p>上面这张图，注意画了红框的第&lt;code>2445&lt;/code>行报文，是 websocket 的&lt;strong>第一次握手&lt;/strong>，意思是发起了一次带有&lt;code>特殊Header&lt;/code>的 HTTP 请求。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/afdf7e39-b517-44de-aba8-101722d9d45e/640" alt="">&lt;/p>
&lt;p>服务器同意升级为 websocket 协议&lt;/p>
&lt;p>上面这个图里画了红框的&lt;code>4714&lt;/code>行报文，就是服务器在得到第一次握手后，响应的&lt;strong>第二次握手&lt;/strong>，可以看到这也是个 HTTP 类型的报文，返回的状态码是 101。同时可以看到返回的报文 header 中也带有各种&lt;code>websocket&lt;/code>相关的信息，比如&lt;code>Sec-WebSocket-Accept&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/afdf7e39-b517-44de-aba8-101722d9d45e/640" alt="">&lt;/p>
&lt;p>两次 HTTP 请求之后正式使用 websocket 通信&lt;/p>
&lt;p>上面这张图就是全貌了，从截图上的注释可以看出，websocket 和 HTTP 一样都是基于 TCP 的协议。&lt;strong>经历了三次 TCP 握手之后，利用 HTTP 协议升级为 websocket 协议&lt;/strong>。&lt;/p>
&lt;p>你在网上可能会看到一种说法：&amp;ldquo;websocket 是基于 HTTP 的新协议&amp;rdquo;，&lt;strong>其实这并不对&lt;/strong>，因为 websocket 只有在建立连接时才用到了 HTTP，&lt;strong>升级完成之后就跟 HTTP 没有任何关系了&lt;/strong>。&lt;/p>
&lt;p>这就好像你喜欢的女生通过你要到了你大学室友的微信，然后他们自己就聊起来了。你能说这个女生是通过你去跟你室友沟通的吗？不能。你跟 HTTP 一样，都只是个&lt;strong>工具人&lt;/strong>。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/afdf7e39-b517-44de-aba8-101722d9d45e/640" alt="">&lt;/p>
&lt;p>都是工具人&lt;/p>
&lt;p>这就有点&amp;quot;&lt;strong>借壳生蛋&lt;/strong>&amp;ldquo;的那意思。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/afdf7e39-b517-44de-aba8-101722d9d45e/640" alt="">&lt;/p>
&lt;p>HTTP 和 websocket 的关系&lt;/p>
&lt;h3 id="websocket-的消息格式">websocket 的消息格式&lt;/h3>
&lt;p>上面提到在完成协议升级之后，两端就会用 webscoket 的数据格式进行通信。&lt;/p>
&lt;p>数据包在 websocket 中被叫做&lt;strong>帧&lt;/strong>，我们来看下它的数据格式长什么样子。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/afdf7e39-b517-44de-aba8-101722d9d45e/640" alt="">&lt;/p>
&lt;p>websocket 报文格式&lt;/p>
&lt;p>这里面字段很多，但我们只需要关注下面这几个。&lt;/p>
&lt;p>&lt;strong>opcode 字段&lt;/strong>：这个是用来标志这是个&lt;strong>什么类型&lt;/strong>的数据帧。比如。&lt;/p>
&lt;ul>
&lt;li>等于 1 ，是指 text 类型（&lt;code>string&lt;/code>）的数据包&lt;/li>
&lt;li>等于 2 ，是二进制数据类型（&lt;code>[]byte&lt;/code>）的数据包&lt;/li>
&lt;li>等于 8 ，是关闭连接的信号&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>payload 字段&lt;/strong>：存放的是我们&lt;strong>真正想要传输的数据的长度&lt;/strong>，单位是&lt;strong>字节&lt;/strong>。比如你要发送的数据是&lt;code>字符串&amp;quot;111&amp;quot;&lt;/code>，那它的长度就是&lt;code>3&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/afdf7e39-b517-44de-aba8-101722d9d45e/640" alt="">&lt;/p>
&lt;p>img&lt;/p>
&lt;p>另外，可以看到，我们存放** payload 长度的字段有好几个**，我们既可以用最前面的&lt;code>7bit&lt;/code>, 也可以用后面的&lt;code>7+16bit 或 7+64bit。&lt;/code>&lt;/p>
&lt;p>那么问题就来了。&lt;/p>
&lt;p>我们知道，在数据层面，大家都是 01 二进制流。我怎么知道&lt;strong>什么情况下应该读 7 bit，什么情况下应该读 7+16bit 呢？&lt;/strong>&lt;/p>
&lt;p>websocket 会用最开始的 7bit 做标志位。不管接下来的数据有多大，都&lt;strong>先读最先的 7 个 bit&lt;/strong>，根据它的取值决定还要不要再读个 16bit 或 64bit。&lt;/p>
&lt;ul>
&lt;li>如果&lt;code>最开始的7bit&lt;/code>的值是 0~125，那么它就表示了 &lt;strong>payload 全部长度&lt;/strong>，只读最开始的&lt;code>7个bit&lt;/code>就完事了。&lt;/li>
&lt;/ul>
&lt;p>payload 长度在 0 到 125 之间&lt;/p>
&lt;ul>
&lt;li>如果是&lt;code>126（0x7E）&lt;/code>。那它表示 payload 的长度范围在 &lt;code>126~65535&lt;/code> 之间，接下来还需要&lt;strong>再读 16bit&lt;/strong>。这 16bit 会包含 payload 的真实长度。&lt;/li>
&lt;/ul>
&lt;p>payload 长度在 126 到 65535 之间&lt;/p>
&lt;ul>
&lt;li>如果是&lt;code>127（0x7F）&lt;/code>。那它表示 payload 的长度范围&lt;code>&amp;gt;=65536&lt;/code>，接下来还需要&lt;strong>再读 64bit&lt;/strong>。这 64bit 会包含 payload 的长度。这能放 2 的 64 次方 byte 的数据，换算一下好多个 TB，肯定够用了。&lt;/li>
&lt;/ul>
&lt;p>payload 长度大于等于 65536 的情况&lt;/p>
&lt;p>&lt;strong>payload data 字段&lt;/strong>：这里存放的就是真正要传输的数据，在知道了上面的 payload 长度后，就可以根据这个值去截取对应的数据。&lt;/p>
&lt;p>大家有没有发现一个小细节，websocket 的数据格式也是&lt;strong>数据头（内含 payload 长度） + payload data&lt;/strong> 的形式。&lt;/p>
&lt;p>这是因为 TCP 协议本身就是全双工，但直接使用&lt;strong>纯裸 TCP&lt;/strong>去传输数据，会有&lt;strong>粘包&lt;/strong>的&amp;quot;问题&amp;rdquo;。为了解决这个问题，上层协议一般会用&lt;strong>消息头+消息体&lt;/strong>的格式去重新包装要发的数据。&lt;/p>
&lt;p>而&lt;strong>消息头&lt;/strong>里一般含有&lt;strong>消息体的长度&lt;/strong>，通过这个长度可以去截取真正的消息体。&lt;/p>
&lt;p>HTTP 协议和大部分 RPC 协议，以及我们今天介绍的 websocket 协议，都是这样设计的。&lt;/p>
&lt;p>消息边界长度标志&lt;/p>
&lt;h3 id="websocket-的使用场景">websocket 的使用场景&lt;/h3>
&lt;p>websocket 完美继承了 TCP 协议的&lt;strong>全双工&lt;/strong>能力，并且还贴心的提供了解决粘包的方案。&lt;/p>
&lt;p>它适用于&lt;strong>需要服务器和客户端（浏览器）频繁交互&lt;/strong>的大部分场景，比如网页/小程序游戏，网页聊天室，以及一些类似飞书这样的网页协同办公软件。&lt;/p>
&lt;p>回到文章开头的问题，在使用 websocket 协议的网页游戏里，怪物移动以及攻击玩家的行为是&lt;strong>服务器逻辑&lt;/strong>产生的，对玩家产生的伤害等数据，都需要由&lt;strong>服务器主动发送给客户端&lt;/strong>，客户端获得数据后展示对应的效果。&lt;/p>
&lt;p>websocket 的使用场景&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;ul>
&lt;li>TCP 协议本身是&lt;strong>全双工&lt;/strong>的，但我们最常用的 HTTP/1.1，虽然是基于 TCP 的协议，但它是&lt;strong>半双工&lt;/strong>的，对于大部分需要服务器主动推送数据到客户端的场景，都不太友好，因此我们需要使用支持全双工的 websocket 协议。&lt;/li>
&lt;li>在 HTTP/1.1 里，只要客户端不问，服务端就不答。基于这样的特点，对于登录页面这样的简单场景，可以使用&lt;strong>定时轮询或者长轮询&lt;/strong>的方式实现&lt;strong>服务器推送&lt;/strong>(comet)的效果。&lt;/li>
&lt;li>对于客户端和服务端之间需要频繁交互的复杂场景，比如网页游戏，都可以考虑使用 websocket 协议。&lt;/li>
&lt;li>websocket 和 socket 几乎没有任何关系，只是叫法相似。&lt;/li>
&lt;li>正因为各个浏览器都支持 HTTP 协 议，所以 websocket 会先利用 HTTP 协议加上一些特殊的 header 头进行握手升级操作，升级成功后就跟 HTTP 没有任何关系了，之后就用 websocket 的数据格式进行收发数据。&lt;/li>
&lt;/ul></description></item></channel></rss>