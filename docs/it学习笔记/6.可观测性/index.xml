<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – 6.可观测性</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/</link><description>Recent content in 6.可观测性 on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: (弃用)Graph 类型面板详解</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/grafana/panel%E9%9D%A2%E6%9D%BF-%E4%B8%8E-dashboard%E4%BB%AA%E8%A1%A8%E7%9B%98/time-series-%E7%B1%BB%E5%9E%8B%E9%9D%A2%E6%9D%BF/%E5%BC%83%E7%94%A8graph-%E7%B1%BB%E5%9E%8B%E9%9D%A2%E6%9D%BF%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/grafana/panel%E9%9D%A2%E6%9D%BF-%E4%B8%8E-dashboard%E4%BB%AA%E8%A1%A8%E7%9B%98/time-series-%E7%B1%BB%E5%9E%8B%E9%9D%A2%E6%9D%BF/%E5%BC%83%E7%94%A8graph-%E7%B1%BB%E5%9E%8B%E9%9D%A2%E6%9D%BF%E8%AF%A6%E8%A7%A3/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;h2 id="参考">参考：&lt;/h2>
&lt;/blockquote>
&lt;p>这是一个初始的 Graph 面板，有两条查询语句，更改了序列的名称。&lt;/p>
&lt;pre>&lt;code>sum(node_memory_MemTotal_bytes)
(sum(node_memory_MemTotal_bytes{} - node_memory_MemAvailable_bytes{}) / sum(node_memory_MemTotal_bytes{}))*100
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qzbd5e/1616067957167-730a2679-0ad0-488a-9c4c-8f3ba5ace79d.png" alt="">&lt;/p>
&lt;p>Graph 是一个二维的，具有 x/y Axes(轴) 的面板。x 轴(横轴) 以时间分布、y 轴(纵轴) 以样本值分布&lt;/p>
&lt;p>下面的文章将只介绍 Graph 面板的独有配置，有很多共有配置详见&lt;a href="https://www.yuque.com/go/doc/33145831">此处&lt;/a>&lt;/p>
&lt;h1 id="panel--面板配置">Panel # 面板配置&lt;/h1>
&lt;h2 id="display--显示设置值的显示样式柱状线条圆点三种">Display # 显示。设置值的显示样式(柱状、线条、圆点三种)&lt;/h2>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qzbd5e/1616067957211-044eecd5-5b98-425a-8de8-3799545d50f6.png" alt="">&lt;/p>
&lt;p>在 Display 标签里，有 5 个开关，Bars、Lines、Staircase、Points 用于指定值的显示样式。Alert thresholds 用于指定是否显示告警阈值。&lt;/p>
&lt;blockquote>
&lt;p>其他的配置选项，都是在开启某个样式后，才会显示对应样式专用的选项。
Min step 设置时间长一点，Bars 与 Points 样式才可以看出来效果。否则都挤到一坨去了~&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>Bars&lt;/strong> # 柱状图样式。当 X 轴的模式变为 Series、Historgram 时，自动开启
&lt;strong>Lines&lt;/strong> # 线条样式。默认样式&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Staircase&lt;/strong> # 开启线条样式时，才可以使用这种样式。&lt;/li>
&lt;li>&lt;strong>Line width&lt;/strong> # 线条宽度。&lt;/li>
&lt;li>&lt;strong>Area fill&lt;/strong> # 线条到底部这一区域的填充度。默认 1。&lt;/li>
&lt;li>&lt;strong>Fill gradient&lt;/strong> # 填充渐变。默认 0。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Points&lt;/strong> # 圆点样式。
&lt;strong>Point radius&lt;/strong> # 每个圆点的半径
&lt;strong>Alert thresholds&lt;/strong> # 在面板上显示报警阈值和区域&lt;/p>
&lt;p>除了设置面板中值的显示样式，还可以设置一些其他的设置
&lt;strong>Stacking and null value(叠加与空值)&lt;/strong>
用于在面板上叠加所有 series 的值&lt;/p>
&lt;p>**Hover tooltip(悬停提示) # **开启后，鼠标悬停在面板上，会出现一些关于 series 的信息
Mode # 模式。&lt;/p>
&lt;ul>
&lt;li>All series # 鼠标悬停到面板时，显示所有 series 的信息&lt;/li>
&lt;li>Single # 鼠标选定到面板时，只显示鼠标所在的 series 的信息。&lt;/li>
&lt;/ul>
&lt;p>Sort order # 排序。有三种排序方式：None(不排序)、Increasing(由上到下逐渐增大)、Decreasing(由上到下逐渐减小)&lt;/p>
&lt;h2 id="series-overrides--序列替换用于个性化每个序列的配置">Series overrides # 序列替换。用于个性化每个序列的配置&lt;/h2>
&lt;p>顾名思义，就是用来替换序列样式的。当一个面板上，配置了多个查询语句，这时就会产生多条 Series。而右侧的配置，是统一的，所有 Series 的配置内容都一样，这样不利于数据展示。所以通过 Series overrides 可以个性化得配置每一条 Series，让不同的 Series 展示出不同的效果(比如多条 Series 可以具有不同的单位、不同的线条宽度不同、不同的显示方式)&lt;/p>
&lt;p>点击 &lt;code>+ Add series override&lt;/code> 即可为指定的 series 进行配置&lt;/p>
&lt;p>在 &lt;code>Alias or regex&lt;/code> 选择要配置的序列。这里也可以使用正则表达式进行多个 series 的匹配。然后点击 &lt;code>+&lt;/code> 符号，即可为选定的 series 进行单独的配置。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qzbd5e/1616067957244-03bc347c-faa5-4145-8a6b-fe3138242f0b.png" alt="">&lt;/p>
&lt;h3 id="应用实例">应用实例&lt;/h3>
&lt;p>上面的例子，一个语句是内存用量，一个语句是内存使用率，单位是不一样(一个 KiB、一个百分比)。这时候，就需要使用 Series overrides，为每个 Serie 单独配置。不但单位可以分别配置，还可以将 Serie 移动到右侧的 Y 轴。还可以为不同的 series 配置不用的显示方式(比如有的用圆点、有点用线条、有的用柱状图，都可以在同一个面板显示出来)&lt;/p>
&lt;p>比如我现在为 总平均使用率 序列进行单独配置，面板就会变成下面这种效果：
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qzbd5e/1616067957204-1cae00cd-e82c-4042-9d6b-11daed4f9b8f.png" alt="">&lt;/p>
&lt;h2 id="axis--设定坐标轴的显示内容">Axis # 设定坐标轴的显示内容&lt;/h2>
&lt;p>在这里可以更改 x 轴 和 y 轴 的显示内容。常用于配置 metrics 值的 unit(单位)、Decimals(小数位数)。&lt;/p>
&lt;p>&lt;strong>Left Y/Right Y&lt;/strong> # 更改 Y-axes(Y 轴) 的信息&lt;/p>
&lt;ul>
&lt;li>Show # 是否显示这个轴&lt;/li>
&lt;li>Unit # 配置 Y 轴 的单位&lt;/li>
&lt;li>Decimals # 配置 Y 轴显示的小数位数。&lt;/li>
&lt;li>Label # 配置 Y 轴 的标签(标签会显示在 Y 轴 的旁边)&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Y-Axes&lt;/strong> # Y 轴 配置。一些对齐方式
&lt;strong>X-Axis&lt;/strong> # X 轴 配置。可以更改 X 轴的 Mode(模式)&lt;/p>
&lt;ul>
&lt;li>Mode # 模式。用于改变 X 轴的 显示模式。
&lt;ul>
&lt;li>Time # 时间模式。默认模式。X 轴 表示 时间，数据按时间分组（例如，按小时或分钟）。&lt;/li>
&lt;li>Series # 序列模式。X 轴 表示 series，数据按照序列分组。Y 轴 仍然代表该序列的值
&lt;ul>
&lt;li>注意：当 X 轴 切换到 Series 模式时，Display 配置中的将自动使用柱状图的方式&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Histogram # 直方图模式。X 轴 表示 序列的值，Y 轴 表示 该值的计数。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="x-轴的-series-模式-示例">X 轴的 Series 模式 示例&lt;/h3>
&lt;p>当 X 轴 变为 series 模式 时，由于没有时间这种维度，所以一般都使用 当前值。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qzbd5e/1616067957169-8ff35969-aa1d-4259-8144-1a88bb33a486.png" alt="">&lt;/p>
&lt;h2 id="legend--用于配置面板内的-legendit-学习笔记6可观测性grafanapanel面板20-与20dashboard仪表盘panel面板20-配置详解md-配置详解md">Legend # 用于配置面板内的 [Legend](✏IT 学习笔记/👀6.可观测性/Grafana/Panel(面板)%20 与%20Dashboard(仪表盘)/Panel(面板)%20 配置详解.md 配置详解.md)&lt;/h2>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qzbd5e/1616067957204-998bd4db-f185-4f42-9138-9edb69081d84.png" alt="">&lt;/p>
&lt;h2 id="time-regions--时间区域graph-类型面板不常用">Time regions # 时间区域。Graph 类型面板不常用&lt;/h2>
&lt;h1 id="field--字段配置">Field # 字段配置&lt;/h1>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qzbd5e/1616067957229-733ae428-0442-42e4-b76e-d36f89196a3d.png" alt="">&lt;/p>
&lt;h1 id="overrides--字段替换配置graph-类型面板不常用">Overrides # 字段替换配置，Graph 类型面板不常用&lt;/h1>
&lt;p>详见：[Overrides](✏IT 学习笔记/👀6.可观测性/Grafana/Panel(面板)%20 与%20Dashboard(仪表盘)/Panel(面板)%20 配置详解.md 配置详解.md)&lt;/p></description></item><item><title>Docs: Aggregation Operators(聚合运算符)</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/prometheus/promql/aggregation-operators%E8%81%9A%E5%90%88%E8%BF%90%E7%AE%97%E7%AC%A6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/prometheus/promql/aggregation-operators%E8%81%9A%E5%90%88%E8%BF%90%E7%AE%97%E7%AC%A6/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://prometheus.io/docs/prometheus/latest/querying/operators/#aggregation-operators">官方文档,Prometheus-查询-运算符-聚合运算符&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Prometheus 还提供了下列内置的聚合运算符，这些运算符仅作用于瞬时向量。可以将瞬时表达式返回的样本数据进行聚合，形成一个新的时间序列。&lt;/p>
&lt;ul>
&lt;li>sum (求和)&lt;/li>
&lt;li>min (最小值)&lt;/li>
&lt;li>max (最大值)&lt;/li>
&lt;li>avg (平均值)&lt;/li>
&lt;li>stddev (标准差)&lt;/li>
&lt;li>stdvar (标准差异)&lt;/li>
&lt;li>count (计数)&lt;/li>
&lt;li>count_values (对 value 进行计数)&lt;/li>
&lt;li>bottomk (后 n 条时序)&lt;/li>
&lt;li>topk (前 n 条时序)&lt;/li>
&lt;li>quantile (分布统计)&lt;/li>
&lt;/ul>
&lt;h2 id="syntax语法">Syntax(语法)&lt;/h2>
&lt;p>&lt;strong>[AggregationOperators] [without|by (LabelName,&amp;hellip;.)] ([Parameter,&amp;hellip;] VectorExpression)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Aggregation Operators&lt;/strong> # 聚合运算符&lt;/li>
&lt;li>&lt;strong>without|by (LabelName,&amp;hellip;)&lt;/strong> # 若不指定该选项，则聚合全部数据的值。如果指定了，则按照指定的 LabelName 进行聚合。通过 without 和 by 可以按照样本的问题对数据进行聚合。该用法的示例图详见文末
&lt;ul>
&lt;li>&lt;strong>by&lt;/strong> # 聚合 by 后面指定的 LabelName 样本数据，并将聚合以外的标签的移除&lt;/li>
&lt;li>&lt;strong>without&lt;/strong> # 与 by 相反，聚合 without 后面没有指定的 LabelName 样本数据。并将聚合以外的标签的移除&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Parameter #&lt;/strong> 参数，其中只有 count_values, quantile, topk, bottomk 支持&lt;/li>
&lt;li>&lt;strong>VectorExpression&lt;/strong> # 向量表达式。详见 &lt;a href=".md">PromQL&lt;/a> 章节&lt;/li>
&lt;/ul>
&lt;h1 id="sum-与-min-与-max-与-avg-详解">sum 与 min 与 max 与 avg 详解&lt;/h1>
&lt;h1 id="count-与-count_values-详解">count 与 count_values 详解&lt;/h1>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>计算 up 序列 的值为 1 的序列总数
&lt;ul>
&lt;li>count by(job, namespace, service) (up == 1)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="quantile-详解">quantile 详解&lt;/h1>
&lt;p>参考：
&lt;a href="https://cloud.tencent.com/developer/news/319419">https://cloud.tencent.com/developer/news/319419&lt;/a>
&lt;a href="https://www.zhihu.com/question/20575291">https://www.zhihu.com/question/20575291&lt;/a>&lt;/p>
&lt;p>其实，在 Prometheus 中，把 quantile(分位数)改为 percentile(百分位数)更准确&lt;/p>
&lt;p>在这么一组数中&lt;/p>
&lt;p>18,6,250,4,21,10,1,1,4274,5,102,15,5,3,10,1,5,3,177,5,34,45,1,5,15&lt;/p>
&lt;p>quantile(0.5,上述所有数的集合)，如果使用该公式计算 0.5 百分位数，则值为 6。也就是说，比 6 大数的有 50%，比 6 小的数有 50%&lt;/p>
&lt;p>quantile(0.99,上述所有数的集合)，如果使用该公式计算 0.99 百分位数，则值为 3308.239999999992。比 3308 大的数有 1%，比 3308 小的有 99%&lt;/p>
&lt;p>如果使用响应时间来举例，那么，0.99 百分位的值为 10，意味着：在此时此刻，所有请求的响应时间中，有 99%都是 10 以上秒，剩下的不到 10 秒&lt;/p>
&lt;h1 id="example">Example&lt;/h1>
&lt;p>如果 http_requests_total 指标一共有 3 个 label，分别是 application、instance、group。那么下面的两种运算方式得出的结果是一样的&lt;/p>
&lt;ul>
&lt;li>sum without (instance) (http_requests_total)&lt;/li>
&lt;li>等价于&lt;/li>
&lt;li>sum by (code,handler,job,method) (http_requests_total)&lt;/li>
&lt;/ul>
&lt;p>如果只需要计算整个应用的 HTTP 请求总量，可以直接使用表达式&lt;/p>
&lt;ul>
&lt;li>sum(http_requests_total)&lt;/li>
&lt;/ul>
&lt;p>count_values 用于时间序列中每一个样本值出现的次数。count_values 会为每一个唯一的样本值输出一个时间序列，并且每一个时间序列包含一个额外的标签。&lt;/p>
&lt;ul>
&lt;li>count_values(&amp;ldquo;count&amp;rdquo;, http_requests_total)&lt;/li>
&lt;/ul>
&lt;p>topk 和 bottomk 则用于对样本值进行排序，返回当前样本值前 n 位，或者后 n 位的时间序列。获取 HTTP 请求数前 5 位的时序样本数据，可以使用表达式：&lt;/p>
&lt;ul>
&lt;li>topk(5, http_requests_total)&lt;/li>
&lt;/ul>
&lt;p>quantile 用于计算当前样本数据值的分布情况 quantile(φ, express)其中 0 ≤ φ ≤ 1。例如，当 φ 为 0.5 时，即表示找到当前样本数据中的中位数&lt;/p>
&lt;ul>
&lt;li>quantile(0.5, http_requests_total)&lt;/li>
&lt;/ul>
&lt;h1 id="效果示例图">效果示例图&lt;/h1>
&lt;p>不进行聚合运算的数据
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/fybu67/1616069162982-ceaed866-8e18-4a11-ba5b-a248b397ef1d.jpeg" alt="">
不使用 by 或者 without，聚合运算所有数据，得出唯一一个值
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/fybu67/1616069162971-82c3f7c8-4fd3-4e75-be31-b7c41e43b2d5.jpeg" alt="">
使用 by，聚合具有相同 namespace 的样本值，得出一个或多个值
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/fybu67/1660618023658-45664731-5ddb-455f-8a7b-42ad1c3c3dfa.png" alt="image.png">&lt;/p></description></item><item><title>Docs: Alerting(告警)</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/prometheus/alerting%E5%91%8A%E8%AD%A6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/prometheus/alerting%E5%91%8A%E8%AD%A6/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://prometheus.io/docs/alerting/latest/overview/">官方文档,告警-告警概述&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://prometheus.io/docs/alerting/latest/clients/">官方文档,告警-客户端&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/prometheus/alertmanager/blob/main/api/v2/openapi.yaml">OpenAPI&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Prometheus 本身不提告警的通知的功能！告警能力在 Prometheus 的架构中被划分成两个独立的部分。如下所示，通过在 Prometheus 中定义 AlertRule（告警规则），Prometheus 会周期性的对告警规则进行 &lt;strong>Evaluate(评估)&lt;/strong>，如果满足告警触发条件就会向 Alertmanager 发送告警信息。&lt;/p>
&lt;p>&lt;strong>Evaluate(评估)&lt;/strong> 就是指，Prometheus Server 会定期执行规则配置文件中的 PromQL，获得结果并与阈值进行匹配，当超过设置的阈值时，会产生告警。这个过程，就称为 **Evaluate(评估)。**在代码中，通过 Eval() 方法来评估规则。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/sw6o6t/1616069590594-41190e69-d023-4ef4-87ad-fdc1a7cf8b6f.png" alt="">&lt;/p>
&lt;p>Alertmanager 处理客户端应用程序(如 Prometheus Server)发送的警报。它负责对它们进行重复数据删除，分组和路由，以及正确的接收器集成，例如 email，PagerDuty 或 OpsGenie。它还负责警报的静音和抑制。&lt;/p>
&lt;p>即：Prometheus Server 只负责根据 PromQL 语句定义的规则产生告警并发送给 Alertmanager(告警管理器)。&lt;/p>
&lt;p>注意：&lt;/p>
&lt;ul>
&lt;li>Alertmanager 是一个单独的程序，需要独立安装使用&lt;/li>
&lt;li>Alertmanager 既可以描述为一类具有处理告警功能的应用程序。也可以描述为一个 Prometheus 官方推出的名为 Alertmanager 的程序。以后的描述一般都不加区分&lt;/li>
&lt;/ul>
&lt;h2 id="关联-alertmanager-与-prometheus">关联 Alertmanager 与 Prometheus&lt;/h2>
&lt;p>由于 Alertmanager 与 Prometheus 是两个程序。所以需要修改 Prometheus Server 的配置文件，以便让自己产生的告警可以发送到正确地方，配置效果如下（Prometheus 推出的 Alertmanager 默认监听在 9093 端口上）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">alerting&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">alertmanagers&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">static_configs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">targets&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;localhost:9093&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>告警规则的配置，由于 Prometheus Server 自己产生告警，所以还需要在配置文件中指定具体根据哪个《告警规则的配置文件》来生成告警&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">rule_files&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">/etc/prometheus/rules.yml&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>下文会介绍配置文件的详细用法&lt;/p>
&lt;h3 id="prometheus-推出的-alertmanager-程序简介">Prometheus 推出的 Alertmanager 程序简介&lt;/h3>
&lt;blockquote>
&lt;p>详见：&lt;a href="https://www.yuque.com/go/doc/33146169">Alertmanager 介绍&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>Prometheus 推出的 Alertmanager 作为一个独立的组件，可以实现告警管理功能，负责接收并处理来自 Prometheus Server(也可以是其它的客户端程序)的告警信息。Alertmanager 可以对这些告警信息进行进一步的处理，比如当接收到大量重复告警时能够消除重复的告警信息，同时对告警信息进行分组并且路由到正确的通知方，Alertmanager 内置了对邮件，Slack 等多种通知方式的支持。同时 AlertManager 还提供了静默和告警抑制机制来对告警通知行为进行优化。&lt;/p>
&lt;h2 id="查看告警的状态">查看告警的状态&lt;/h2>
&lt;p>在 prometheus server 的 web 页面中的 &lt;code>Alerts&lt;/code> 标签查看到所有其所配置和产生的告警信息，效果如图：
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/sw6o6t/1616069590604-e9eaacdf-e275-4662-b8f1-8d1739a63fc4.jpeg" alt="">&lt;/p>
&lt;p>其中每行都是一条告警规则，绿色表示没有达到设定的阈值，不会产生告警；红色的表示达到设定的阈值并已经持续了一段时间，所以产生了告警，并推送给 alermanager。在绿条或者红条中间的位置是“路径&amp;gt;组名”这里表示其下的所有告警都是这个组里的。点开一个告警，就能看到其中的配置，包括告警规则的名称、告警触发条件、等待时长等等信息&lt;/p>
&lt;h2 id="告警发送过程">告警发送过程&lt;/h2>
&lt;p>在 State 中，有两种状态，一个是 PENDING，一个是 FIRING。当告警刚刚出发时，处于 PENDING 状态，此时告警并不会推送到 Alertmanager，当该状态无法恢复且持续配置中定义一段时间后，则变为 FIRING，并向 Alertmanager 推送告警。&lt;/p>
&lt;p>当一个告警解决后，会具有一个隐藏的 Pending 状态，持续 15 分钟，在这 15 分钟之内，依然会重复发送告警，只不过发送的每个告警的结束时间，都是同一个，就是解决告警的时间。这个 15 分钟是不可变的，在代码 github.com/prometheus/prometheus/rules/alerting.go 这个里，有一个常量 &lt;code>resolvedRetention&lt;/code> 就是用来判断何时删除一个未激活告警的条件之一。&lt;/p>
&lt;h1 id="prometheus-告警规则配置">Prometheus 告警规则配置&lt;/h1>
&lt;blockquote>
&lt;p>详见：&lt;a href="https://www.yuque.com/go/doc/33147385">Prometheus Alerting Rules 配置详解&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h1 id="告警数据结构">告警数据结构&lt;/h1>
&lt;p>&lt;strong>免责声明：Prometheus 会自动负责发送由其配置的&lt;/strong>&lt;a href="https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/">警报规则&lt;/a>&lt;strong>生成的&lt;/strong>&lt;a href="https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/">警报&lt;/a>&lt;strong>。强烈建议在 Prometheus 中根据时间序列数据配置警报规则，而不是实现直接客户端。&lt;/strong>
&lt;strong>也就是说，不要自己写一个程序，频繁对 Prometheus 发起 PromQL 查询请求，来生成告警。&lt;/strong>&lt;/p>
&lt;p>Alertmanager 现阶段有两个 API，v1 和 v2，这两个 API 都是用来监听发送到自身的告警。&lt;/p>
&lt;p>Prometheus 产生告警后，会通过 POST 请求将下列 JSON 格式内容向 Alertamanger 推送告警：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>[
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;labels&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;alertname&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;lt;Prometheus Server 的规则配置文件中的 .groups.rules.alert 字段的值&amp;gt;&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;&amp;lt;LabelName&amp;gt;&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;lt;LabelValue&amp;gt;&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;annotations&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;&amp;lt;LabelName&amp;gt;&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;lt;LabelValue&amp;gt;&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;startsAt&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;lt;RFC3339&amp;gt;&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;endsAt&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;lt;RFC3339&amp;gt;&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;generatorURL&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;lt;GeneratorURL&amp;gt;&amp;#34;&lt;/span> &lt;span style="color:#75715e">// 生成告警的 URL。就是可以向 Prometheus API 发送的包含 PromQL 的完整 URL
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>推送路径根据 Prometheus Server 配置文件中 &lt;code>alerting.alertmanagers.api_version&lt;/code> 和 &lt;code>alerting.alertmanagers.path_prefix&lt;/code> 这两个字段决定。&lt;/p>
&lt;p>默认推送路径为 /api/v2/alerts。如果 api_version 为 v2，path_prefix 值为 /test，最终的路径就是 /test/api/v2/alerts&lt;/p>
&lt;h2 id="labels-与-annotations-字段">labels 与 annotations 字段&lt;/h2>
&lt;p>&lt;strong>labels(标签)&lt;/strong> 是告警的唯一标识符。具有相同标签的告警，则称为重复数据，重复数据只会保留最新的一个。
&lt;strong>annotations(注释)&lt;/strong> 顾名思义，就是用来注释一个告警&lt;/p>
&lt;p>labels 包含如下内容：&lt;/p>
&lt;ul>
&lt;li>alertname 字段
&lt;ul>
&lt;li>该字段的的值就是 Prometheus Server 的 Rules 配置文件中的 .groups.rules.alert 字段的值&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>告警规则配置文件中定义的标签&lt;/li>
&lt;li>产生告警的时间序列所具有的标签&lt;/li>
&lt;/ul>
&lt;h2 id="startsat-与-endsat-字段">startsAt 与 endsAt 字段&lt;/h2>
&lt;p>&lt;strong>startsAt&lt;/strong> # 告警的开始时间
&lt;strong>endsAt&lt;/strong> # 告警的结束时间&lt;/p>
&lt;ul>
&lt;li>结束时间可以这么理解：从开始时间到结束时间，如果 Alertmanager 没有再收到相同的告警，则认为告警已经处理&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>注意：对于 Prometheus 官方的 Alertmanager 来说，startsAt 和 endsAt 时间戳都是可选的。如果省略了 startAt，则由 Alertmanager 分配当前时间。 endsAt 只有在已知警报的结束时间时才会设置。否则，它将被设置为从最后一次收到警报的时间开始的一个可配置的超时时间段。&lt;/p>
&lt;/blockquote>
&lt;h2 id="示例">示例&lt;/h2>
&lt;h3 id="配置文件">配置文件&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">groups&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">rules&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">alert&lt;/span>: &lt;span style="color:#ae81ff">test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">expr&lt;/span>: &lt;span style="color:#ae81ff">vector(1)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">level&lt;/span>: &lt;span style="color:#ae81ff">warning&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">annotations&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">additionalExample&lt;/span>: &lt;span style="color:#ae81ff">test&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="生成的告警数据">生成的告警数据&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>[
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;labels&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;alertname&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;test&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;level&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;warning&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;annotations&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;additionalExample&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;test&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;startsAt&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2021-02-23T03:56:42.944457098Z&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;endsAt&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2021-02-23T04:04:27.944457098Z&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;generatorURL&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;http://cs-cs-prometheus.desistdaydream.ltd/graph?g0.expr=vector%281%29\u0026g0.tab=1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>抓包内容如下：
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/sw6o6t/1621754366379-909c188e-f854-4c8e-8a9d-e75b6e671d2c.png" alt="image.png">&lt;/p></description></item><item><title>Docs: Alertmanager</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/alertmanager/alertmanager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/alertmanager/alertmanager/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://prometheus.io/docs/alerting/latest/alertmanager/">官方文档&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Prometheus Alert 介绍详见 Prometheus Server Alert 说明&lt;/p>
&lt;p>Alertmanager 处理由客户端应用程序（例如 Prometheus 服务器）发送的警报。它负责将重复数据删除，分组和路由到正确的接收者集成，例如电子邮件，PagerDuty 或 OpsGenie。它还负责沉默和禁止警报。&lt;/p>
&lt;p>&lt;strong>Alertmanager 特性&lt;/strong>&lt;/p>
&lt;p>Prometheus 发送过来的每一个告警，都会由 Alertmanager 进行重复数据删除、分组、路由到正确的接收者(e.g.邮件、钉钉等)上。&lt;/p>
&lt;p>Alertmanager 除了提供基本的告警通知能力以外，还主要提供了如：分组、抑制以及静默等告警特性：
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/fesx4v/1616068406984-251af31d-3e59-4621-bb62-d5228da42408.jpeg" alt="">
&lt;strong>分组&lt;/strong>
分组机制可以将详细的告警信息合并成一个通知。在某些情况下，比如由于系统宕机导致大量的告警被同时触发，在这种情况下分组机制可以将这些被触发的告警合并为一个告警通知，避免一次性接受大量的告警通知，而无法对问题进行快速定位。&lt;/p>
&lt;p>例如，当集群中有数百个正在运行的服务实例，并且为每一个实例设置了告警规则。假如此时发生了网络故障，可能导致大量的服务实例无法连接到数据库，结果就会有数百个告警被发送到 Alertmanager。&lt;/p>
&lt;p>而作为用户，可能只希望能够在一个通知中中就能查看哪些服务实例收到影响。这时可以按照服务所在集群或者告警名称对告警进行分组，而将这些告警内聚在一起成为一个通知。&lt;/p>
&lt;p>告警分组，告警时间，以及告警的接受方式可以通过 Alertmanager 的配置文件进行配置。&lt;/p>
&lt;p>&lt;strong>抑制&lt;/strong>
抑制是指当某一告警发出后，可以停止重复发送由此告警引发的其它告警的机制。&lt;/p>
&lt;p>例如，当集群不可访问时触发了一次告警，通过配置 Alertmanager 可以忽略与该集群有关的其它所有告警。这样可以避免接收到大量与实际问题无关的告警通知。&lt;/p>
&lt;p>抑制机制同样通过 Alertmanager 的配置文件进行设置。&lt;/p>
&lt;p>&lt;strong>静默&lt;/strong>
静默提供了一个简单的机制可以快速根据标签对告警进行静默处理。如果接收到的告警符合静默的配置，Alertmanager 则不会发送告警通知。&lt;/p>
&lt;p>静默设置需要在 Alertmanager 的 Werb 页面上进行设置。&lt;/p>
&lt;h2 id="alertmanager-告警分组">Alertmanager 告警分组&lt;/h2>
&lt;p>每一个告警进入 Alertmanager 后，都会进行分组处理，可以根据规则将多条告警合并为一个通知。这是为了可以让相关的告警可以合并在一起，一次性收集和发送，以便运维人员的故障排查。&lt;/p>
&lt;h2 id="alertmanager-告警路由">Alertmanager 告警路由&lt;/h2>
&lt;p>告警路由，顾名思义，路由就是根据“目的接收者”将每个告警发送到指定的接收者上的过程。&lt;/p>
&lt;p>每一个告警进入到 Alertmanager 都会由顶级的 route 进入路由树，需要注意的是顶级的 route 必须匹配所有告警(即不能有任何的匹配设置 match 和 match_re)，在一个路由树中，将每个被路由的目标称为 &lt;strong>Node(节点)。&lt;/strong>&lt;/p>
&lt;p>每一个路由都可以定义自己的接受人以及匹配规则。默认情况下，告警进入到顶级 route 后会遍历所有的子节点，直到找到最深的匹配 route，并将告警发送到该 route 定义的 receiver 中。但如果 route 中设置 continue 的值为 false，那么告警在匹配到第一个子节点之后就直接停止。如果 continue 为 true，报警则会继续进行后续子节点的匹配。如果当前告警匹配不到任何的子节点，那该告警将会基于当前路由节点的接收器配置方式进行处理。&lt;/p>
&lt;p>其中告警的匹配有两种方式可以选择。一种方式基于字符串验证，通过设置 match 规则判断当前告警中是否存在标签 labelname 并且其值等于 labelvalue。第二种方式则基于正则表达式，通过设置 match_re 验证当前告警标签的值是否满足正则表达式的内容。&lt;/p>
&lt;p>如果警报已经成功发送通知, 如果想设置发送告警通知之前要等待时间，则可以通过 repeat_interval 参数进行设置。&lt;/p>
&lt;h2 id="alertmanager-告警模板">Alertmanager 告警模板&lt;/h2>
&lt;p>告警模板的使用方式详见：告警模板详解&lt;/p>
&lt;p>默认情况下 Alertmanager 使用了系统自带的默认通知模板，模板源码可以从 &lt;a href="https://github.com/prometheus/alertmanager/blob/master/template/default.tmpl">https://github.com/prometheus/alertmanager/blob/master/template/default.tmpl&lt;/a> 获得。Alertmanager 的通知模板基于 Go 的模板系统。Alertmanager 也支持用户定义和使用自己的模板，一般来说有两种方式可以选择。&lt;/p>
&lt;p>第一种，基于模板字符串。用户可以直接在 Alertmanager 的配置文件中使用模板字符串，例如:&lt;/p>
&lt;pre>&lt;code>receivers:
- name: 'slack-notifications'
slack_configs:
- channel: '#alerts'
text: 'https://internal.myorg.net/wiki/alerts/{{ .GroupLabels.app }}/{{ .GroupLabels.alertname }}'
&lt;/code>&lt;/pre>
&lt;p>第二种方式，自定义可复用的模板文件。例如，可以创建自定义模板文件 custom-template.tmpl，如下所示：&lt;/p>
&lt;pre>&lt;code>{{ define &amp;quot;slack.myorg.text&amp;quot; }}https://internal.myorg.net/wiki/alerts/{{ .GroupLabels.app }}/{{ .GroupLabels.alertname }}{{ end}}
&lt;/code>&lt;/pre>
&lt;p>通过在 Alertmanager 的全局设置中定义 templates 配置来指定自定义模板的访问路径:&lt;/p>
&lt;pre>&lt;code># Files from which custom notification template definitions are read.
# The last component may use a wildcard matcher, e.g. 'templates/*.tmpl'.
templates:
[ - &amp;lt;filepath&amp;gt; ... ]
&lt;/code>&lt;/pre>
&lt;p>在设置了自定义模板的访问路径后，用户则可以直接在配置中使用该模板：&lt;/p>
&lt;pre>&lt;code>receivers:
- name: 'slack-notifications'
slack_configs:
- channel: '#alerts'
text: '{{ template &amp;quot;slack.myorg.text&amp;quot; . }}'
templates:
- '/etc/alertmanager/templates/myorg.tmpl'
&lt;/code>&lt;/pre>
&lt;h1 id="alertmanager-部署">Alertmanager 部署&lt;/h1>
&lt;p>与 prometheus 一样，可以通过二进制安装或者 docker 启动&lt;/p>
&lt;h2 id="使用-docker-的方式运行-alertmanager">使用 docker 的方式运行 Alertmanager&lt;/h2>
&lt;p>获取配置文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>mkdir -p /etc/monitoring
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker run -d --name alertmanager --rm prom/alertmanager
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker cp alertmanager:/etc/alertmanager /etc/monitoring
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker stop alertmanager
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行 Alertmanager&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker run -d --name alertmanager &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --network host &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -v /etc/localtime:/etc/localtime &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -v /etc/monitoring/alertmanager:/etc/alertmanager/config_out &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> prom/alertmanager &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --config.file&lt;span style="color:#f92672">=&lt;/span>/etc/alertmanager/config_out/alertmanager.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>部署完成后，Alertmanager 默认监听在 9093 端口上，通过浏览器打开 http://localhost:9093 可以看到如下示例的画面
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/fesx4v/1616068406956-f10fe3df-d57f-4602-a6ab-e4aab90c89f1.jpeg" alt="">
首页 Alerts 标签上显示了从 Prometheus Server 推送过来的每一条告警，可以通过点击告警信息中的 Silence 来让该告警静音(i.e.不再发送告警邮件)&lt;/p>
&lt;h2 id="alertmanager-运行时的标志flags说明">Alertmanager 运行时的标志(Flags)说明&lt;/h2>
&lt;p>alertmanager 程序在启动时，可以使用一些标志来对程序进行一些基本设定，比如数据存储路径、存储时间等等&lt;/p>
&lt;ul>
&lt;li>**&amp;ndash;config.file=&amp;quot;/PATH/TO/FILE&amp;quot; **# 指定 alertmanager 基本配置文件。 默认 /etc/alertmanager/alertmanager.yml&lt;/li>
&lt;li>**&amp;ndash;storage.path=&amp;quot;/PATH&amp;quot; **# 指定存储数据的基础路径。该路径包括告警信息、已经 silences 的告警等信息。&lt;/li>
&lt;li>&lt;strong>&amp;ndash;data.retention=120h&lt;/strong> # 数据保存时长。&lt;/li>
&lt;li>--alerts.gc-interval=30m # Interval between alert GC.&lt;/li>
&lt;li>--web.external-url=WEB.EXTERNAL-URL zThe URL under which Alertmanager is externally reachable (for example, if Alertmanager is served via a reverse proxy). Used for generating relative and absolute links back to Alertmanagerzitself. If the URL has a path portion, it will be used to prefix all HTTP endpoints served by Alertmanager. If omitted, relevant URL components will be derived automatically.&lt;/li>
&lt;li>--web.route-prefix=WEB.ROUTE-PREFIX zPrefix for the internal routes of web endpoints. Defaults to path of &amp;ndash;web.external-url.&lt;/li>
&lt;li>--web.listen-address=&amp;quot;:9093&amp;quot; zAddress to listen on for the web interface and API.&lt;/li>
&lt;li>--web.get-concurrency=0 Maximum number of GET requests processed concurrently. If negative or zero, the limit is GOMAXPROC or 8, whichever is larger.&lt;/li>
&lt;li>--web.timeout=0 Timeout for HTTP requests. If negative or zero, no timeout is set.&lt;/li>
&lt;li>--cluster.listen-address=&amp;ldquo;0.0.0.0:9094&amp;rdquo; zListen address for cluster. Set to empty string to disable HA mode.&lt;/li>
&lt;li>--cluster.advertise-address=CLUSTER.ADVERTISE-ADDRESS zExplicit address to advertise in cluster.&lt;/li>
&lt;li>--cluster.peer=CLUSTER.PEER &amp;hellip; zInitial peers (may be repeated).&lt;/li>
&lt;li>--cluster.peer-timeout=15s zTime to wait between peers to send notifications.&lt;/li>
&lt;li>--cluster.gossip-interval=200ms zInterval between sending gossip messages. By lowering this value (more frequent) gossip messages are propagated across the cluster more quickly at the expense of increased bandwidth.&lt;/li>
&lt;li>--cluster.pushpull-interval=1m0s zInterval for gossip state syncs. Setting this interval lower (more frequent) will increase convergence speeds across larger clusters at the expense of increased bandwidth usage.&lt;/li>
&lt;li>--cluster.tcp-timeout=10s Timeout for establishing a stream connection with a remote node for a full state sync, and for stream read and write operations.&lt;/li>
&lt;li>--cluster.probe-timeout=500ms zTimeout to wait for an ack from a probed node before assuming it is unhealthy. This should be set to 99-percentile of RTT (round-trip time) on your network.&lt;/li>
&lt;li>--cluster.probe-interval=1s zInterval between random node probes. Setting this lower (more frequent) will cause the cluster to detect failed nodes more quickly at the expense of increased bandwidth usage.&lt;/li>
&lt;li>--cluster.settle-timeout=1m0s zMaximum time to wait for cluster connections to settle before evaluating notifications.&lt;/li>
&lt;li>--cluster.reconnect-interval=10s zInterval between attempting to reconnect to lost peers.&lt;/li>
&lt;li>--cluster.reconnect-timeout=6h0m0s zLength of time to attempt to reconnect to a lost peer.&lt;/li>
&lt;li>--log.level=info Only log messages with the given severity or above. One of: [debug, info, warn, error]&lt;/li>
&lt;li>--log.format=logfmt Output format of log messages. One of: [logfmt, json]&lt;/li>
&lt;li>--version Show application version.&lt;/li>
&lt;/ul>
&lt;h1 id="alertmanager-配置">Alertmanager 配置&lt;/h1>
&lt;p>/etc/alertmanager/alertmanager.conf # alertmanager 基本配置文件默认位置。可以通过 &amp;ndash;config.file 标志指定其他配置文件&lt;/p>
&lt;p>下面是一个基本的 alertmanager.conf 配置文件示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 全局配置环境&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">global&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">resolve_timeout&lt;/span>: &lt;span style="color:#ae81ff">5m&lt;/span> &lt;span style="color:#75715e"># 该参数定义了当Alertmanager持续多长时间未接收到告警后标记告警状态为resolved（已解决）&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 配置邮件发送信息&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">smtp_smarthost&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;smtp.163.com:25&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">smtp_from&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;ych_1024@163.com&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">smtp_auth_username&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;ych_1024@163.com&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">smtp_auth_password&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;lt;邮箱密码&amp;gt;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">smtp_hello&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;163.com&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">smtp_require_tls&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 路由配置环境。所有报警信息进入后的根路由，用来设置报警的分发策略&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">route&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">group_by&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;alertname&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;cluster&amp;#34;&lt;/span>] &lt;span style="color:#75715e"># 这里的标签列表是接收到报警信息后的重新分组标签，例如，接收到的报警信息里面有许多具有 cluster=A 和 alertname=LatncyHigh 这样的标签的报警信息将会批量被聚合到一个分组里面&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">group_wait&lt;/span>: &lt;span style="color:#ae81ff">TIME&lt;/span> &lt;span style="color:#75715e"># 当一个新的报警分组被创建后，需要等待至少TIME时间来初始化通知，这种方式可以确保您能有足够的时间为同一分组来获取多个警报，然后一起触发这个报警信息。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">group_interval&lt;/span>: &lt;span style="color:#ae81ff">TIME&lt;/span> &lt;span style="color:#75715e"># 重复发送报警的设置(报警未消除的重复报警)。当一个组里的报警有变化时，等待&amp;#39;group_interval&amp;#39;时间来发送新的一组报警信息。默认5分钟。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">repeat_interval&lt;/span>: &lt;span style="color:#ae81ff">TIME&lt;/span> &lt;span style="color:#75715e"># 重复发送报警的设置(报警未消除的重复报警)。一个组里的报警一直没有变化的话，等待&amp;#39;repeat_interval&amp;#39;时间来重新发送他们。默认4小时。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">receiver&lt;/span>: &lt;span style="color:#ae81ff">STRING&lt;/span> &lt;span style="color:#75715e"># 指定默认的receiver名，如果一个报警没有任何一个routes匹配，则发送给默认的receiver&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">routes&lt;/span>: &lt;span style="color:#75715e"># 上面所有的配置参数都由所有子路由继承，并且可以在每个子路由上进行覆盖。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">receiver&lt;/span>: &lt;span style="color:#ae81ff">STRING&lt;/span> &lt;span style="color:#75715e">#指定该子路由要使用的receiver&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">group_wait&lt;/span>: &lt;span style="color:#ae81ff">TIME&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">match&lt;/span>: &lt;span style="color:#75715e">#指定标签名和值，凡是具有该标签名和值的告警由将路由到指定的receiver上&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 也可以使用 match_re 关键字，来进行正则表达式匹配。LabelValue 可以使用正则来表示&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">LabelName&lt;/span>: &lt;span style="color:#ae81ff">LabelValue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 接收者配置环境。用于定义分配好路由的告警信息将由谁来接收。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">receivers&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;default&amp;#34;&lt;/span> &lt;span style="color:#75715e"># 指定receiver的名字&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">email_configs&lt;/span>: &lt;span style="color:#75715e">#指定该receiver使用哪种配置&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">to&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;lichenhao@wisetv.com.cn&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">send_resolved&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span> &lt;span style="color:#75715e">#指定是否发送告警已解决的信息。默认为false,i.e.不发送&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="配置样例">配置样例&lt;/h2>
&lt;h3 id="默认配置文件">默认配置文件&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">global&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">resolve_timeout&lt;/span>: &lt;span style="color:#ae81ff">5m&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">route&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">group_by&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;alertname&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">group_wait&lt;/span>: &lt;span style="color:#ae81ff">10s&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">group_interval&lt;/span>: &lt;span style="color:#ae81ff">10s&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">repeat_interval&lt;/span>: &lt;span style="color:#ae81ff">1h&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">receiver&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;web.hook&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">receivers&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;web.hook&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">webhook_configs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">url&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;http://127.0.0.1:5001/&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">inhibit_rules&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">source_match&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">severity&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;critical&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">target_match&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">severity&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;warning&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">equal&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;alertname&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;dev&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;instance&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="使用腾讯企业邮箱的配置样例">使用腾讯企业邮箱的配置样例&lt;/h3>
&lt;p>Note：如果要使用腾讯企业邮箱，则需要生成客户端密码，位置如下图
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/fesx4v/1616068406969-84d8a216-cd2b-4438-a0e6-a6a85c64318a.jpeg" alt="">
下面的配置默认会将所有告警都发送给lichenhao@wisetv.com.cn。其中具有 network_device: interface-state 标签名和值的告警会发送给wangpeng@wisetv.com.cn&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">global&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">resolve_timeout&lt;/span>: &lt;span style="color:#ae81ff">5m&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">smtp_smarthost&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;smtp.exmail.qq.com:587&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">smtp_from&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;lichenhao@wisetv.com.cn&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">smtp_auth_username&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;lichenhao@wisetv.com.cn&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">smtp_auth_password&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;bVcyqAh4jnz2hkVg&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">smtp_hello&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;qq.com&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">smtp_require_tls&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">route&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">group_by&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;alertname&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;cluster&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">group_wait&lt;/span>: &lt;span style="color:#ae81ff">30s&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">group_interval&lt;/span>: &lt;span style="color:#ae81ff">5m&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">repeat_interval&lt;/span>: &lt;span style="color:#ae81ff">5m&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">receiver&lt;/span>: &lt;span style="color:#ae81ff">default&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">routes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">receiver&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;network-group&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">group_wait&lt;/span>: &lt;span style="color:#ae81ff">10s&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">match&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">network_device&lt;/span>: &lt;span style="color:#ae81ff">interface-state&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">receivers&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;default&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">email_configs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">to&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;lichenhao@wisetv.com.cn&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">send_resolved&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;network-group&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">email_configs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">to&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;wangpeng@wisetv.com.cn&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">send_resolved&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">to&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;lichenhao@wisetv.com.cn&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">send_resolved&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="alertmanager-api">Alertmanager API&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/prometheus/alertmanager/blob/main/api/v2/openapi.yaml">GitHub 项目文件，prometheus/alertmanager/api/v2/openapi.yaml&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>Docs: Alertmanager 扩展</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/alertmanager/alertmanager-%E6%89%A9%E5%B1%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/alertmanager/alertmanager-%E6%89%A9%E5%B1%95/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/prymitive/karma">GitHub 项目，prymitive/karma&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/uHSlzuVBb51-qgX92pEnLQ">公众号-k8s 技术圈，超漂亮的 Alertmanager 可视化面板 - karma&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/feiyu563/PrometheusAlert">GitHub 项目，feiyu563/PrometheusAlert&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/kubesphere/notification-manager">GitHub 项目，kubesphere/notification-manager&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/timonwong/prometheus-webhook-dingtalk">GitHub 项目，timonwong/prometheus-webhook-dingtalk&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Alertmanager 自带一个 UI 界面，可以用来查看报警和静默管理，但是还缺乏一个 Dashboard 必要的一些功能，比如报警历史记录等等，karma 这个工具就可以来帮助增强 Alertmanager 的可视化功能。&lt;/p>
&lt;p>feiyu563/PrometheusAlert 可以提供更多的通知功能，将告警发送到各种地方。&lt;/p>
&lt;h1 id="notification-manager">notification-manager&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/kubesphere/notification-manager">GitHub 项目，kubesphere/notification-manager&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>功能测试&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>wget https://raw.githubusercontent.com/kubesphere/notification-manager/master/config/ci/alerts.json
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>curl -XPOST http://localhost:19093/api/v2/alerts -d @./alerts.json
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="notificationmanager-crd">NotificationManager CRD&lt;/h2>
&lt;h3 id="接收器与配置相关字段">接收器与配置相关字段&lt;/h3>
&lt;p>&lt;strong>receivers: &lt;!-- raw HTML omitted -->&lt;/strong> #&lt;/p>
&lt;ul>
&lt;li>&lt;strong>globalReceiverSelector: &lt;!-- raw HTML omitted -->&lt;/strong> #
&lt;ul>
&lt;li>该字段内容详见[ LabelSelector](✏IT 学习笔记/☁️10.云原生/2.3.Kubernetes%20 容器编排系统/1.API、Resource(资源)、Object(对象)/API%20 参考/Common%20Definitions(通用定义)/LabelSelector%20 详解.md 容器编排系统/1.API、Resource(资源)、Object(对象)/API 参考/Common Definitions(通用定义)/LabelSelector 详解.md)。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>tenantReceiverSelector: &lt;!-- raw HTML omitted -->&lt;/strong> #
&lt;ul>
&lt;li>该字段内容详见[ LabelSelector](✏IT 学习笔记/☁️10.云原生/2.3.Kubernetes%20 容器编排系统/1.API、Resource(资源)、Object(对象)/API%20 参考/Common%20Definitions(通用定义)/LabelSelector%20 详解.md 容器编排系统/1.API、Resource(资源)、Object(对象)/API 参考/Common Definitions(通用定义)/LabelSelector 详解.md)。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>tenantKey: &lt;!-- raw HTML omitted -->&lt;/strong> #&lt;/li>
&lt;/ul>
&lt;p>示例:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">receivers&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 具有 type: global 标签的 Receiver 将会被设置为全局 Receiver&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">globalReceiverSelector&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">matchLabels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">global&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 具有 type: tenant 标签的 Receiver 将会被设置为租户 Receiver&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">tenantReceiverSelector&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">matchLabels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">tenant&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># notification-manager 通过 tenantKey 的值识别 Receiver 的租户名称。i.e. 租户类型的 Receiver 通过 key 为 user 的标签值识别租户名称&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">tenantKey&lt;/span>: &lt;span style="color:#ae81ff">user&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="通知管理器的-webhook-与-dispatcher-相关字段">通知管理器的 Webhook 与 Dispatcher 相关字段&lt;/h3>
&lt;p>&lt;strong>args: &amp;lt;[]TYPE&amp;gt;&lt;/strong> # 设定 NotificationManager Webhook 的启动参数。
&lt;strong>batchMaxSize: &lt;!-- raw HTML omitted -->&lt;/strong> # 从缓存中获取数据时最大的告警数量。&lt;code>默认值：100&lt;/code>
&lt;strong>batchMaxWait: &lt;!-- raw HTML omitted -->&lt;/strong> # 从缓存中获取数据的等待时间。&lt;code>默认值：1m&lt;/code>。即每隔一分钟获取一次数据&lt;/p>
&lt;blockquote>
&lt;p>batchMaxSize 与 batchMaxWait 说明：Notification-Manager 接收到的告警数据首先会被推送到缓存中，再从缓存中批量取出数据并行处理。所以可以通过 &lt;code>batchMaxSize&lt;/code> 与 &lt;code>batchMaxWait&lt;/code> 两个字段来配置每次从缓存中取出多少数据与时间间隔。详见 从&lt;a href="#moaPC">缓存中获取告警&lt;/a>的代码。所以我们会发现，每次 Notification-Manager 收到告警后，将会等待 1 分钟之后才会开始处理这些告警。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>routePolicy: &lt;!-- raw HTML omitted -->&lt;/strong> # 路由策略，定义将收到的告警信息路由给哪个 Receiver。&lt;code>默认值：All&lt;/code>。&lt;/p>
&lt;ul>
&lt;li>All # 通知信息将会被路由到所有通过 Router 匹配到的 Receiver 上，并且同时路由到到默认的全局 Receiver&lt;/li>
&lt;li>RouterFirst # 通知信息在被路由到 Router 匹配到的 Receiver 上之后，不在路由给默认的全局 Receiver&lt;/li>
&lt;li>RouterOnly # 通知信息只会被路有道 Router 匹配到的 Receiver 上。&lt;/li>
&lt;/ul>
&lt;h3 id="生成通知信息与组织通知信息相关字段">生成通知信息与组织通知信息相关字段&lt;/h3>
&lt;h3 id="其他字段">其他字段&lt;/h3>
&lt;h2 id="router-crd">Router CRD&lt;/h2>
&lt;p>&lt;strong>alertSelector: &lt;!-- raw HTML omitted -->&lt;/strong> # 告警标签选择器。与 K8S 的 LabelSelector 的功能完全一样&lt;/p>
&lt;ul>
&lt;li>该字段内容详见[ LabelSelector](✏IT 学习笔记/☁️10.云原生/2.3.Kubernetes%20 容器编排系统/1.API、Resource(资源)、Object(对象)/API%20 参考/Common%20Definitions(通用定义)/LabelSelector%20 详解.md 容器编排系统/1.API、Resource(资源)、Object(对象)/API 参考/Common Definitions(通用定义)/LabelSelector 详解.md)。注意一点：多个匹配条件之间的关键是 AND。如果想要使用 OR 的逻辑，以根据多个条件匹配多条告警，需要使用多个 Router，详见 &lt;a href="https://github.com/kubesphere/notification-manager/issues/153">Issue #153&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="receiver-crd">Receiver CRD&lt;/h2>
&lt;h2 id="通用定义">通用定义&lt;/h2>
&lt;h2 id="代码分析">代码分析&lt;/h2>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/fy8tkv/1652004437657-71dec4c2-c104-4c34-a43c-74ffb8d4545b.png" alt="image.png">&lt;/p>
&lt;h3 id="入口与监听">入口与监听&lt;/h3>
&lt;p>程序开始主要做了如下几件事：&lt;/p>
&lt;ul>
&lt;li>实例化告警存储器，用以缓存接收到的告警消息。告警存储器称之为 Provider。&lt;/li>
&lt;li>带着告警存储器实例化 Webhook 并运行，用以接受告警消息后将告警缓存起来(执行 Provider.Push() 方法)&lt;/li>
&lt;li>带着告警存储器实例化调度员并运行，用以获取缓存中的告警消息(执行 Provider.Pull() 方法)&lt;/li>
&lt;/ul>
&lt;p>Cache 默认为 Memory，在内存中存储各个地方推送过来的告警
代码：&lt;code>cmd/notification-manager/main.go&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">storeType&lt;/span> = &lt;span style="color:#a6e22e">kingpin&lt;/span>.&lt;span style="color:#a6e22e">Flag&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;store.type&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Type of store which used to cache the alerts&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ).&lt;span style="color:#a6e22e">Default&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;memory&amp;#34;&lt;/span>).&lt;span style="color:#a6e22e">String&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Main&lt;/span>() &lt;span style="color:#66d9ef">int&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 实例化告警存储器，默认内存
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">alerts&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">store&lt;/span>.&lt;span style="color:#a6e22e">NewAlertStore&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">storeType&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 带着存储器实例化一个 Webhook，并启动监听程序，默认监听在 19093
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">webhook&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">wh&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">alerts&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">srvCh&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make(&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">srvCh&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#a6e22e">webhook&lt;/span>.&lt;span style="color:#a6e22e">Run&lt;/span>(&lt;span style="color:#a6e22e">ctxHttp&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 带着告警存储器实例化一个 Dispatcher，用以从告警存储器中 pull 下来告警后发送出去
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">disp&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">dispatcher&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>(&lt;span style="color:#a6e22e">logger&lt;/span>, &lt;span style="color:#a6e22e">ctl&lt;/span>, &lt;span style="color:#a6e22e">alerts&lt;/span>, &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">webhookTimeout&lt;/span>, &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">wkrTimeout&lt;/span>, &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">wkrQueue&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">dispCh&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#a6e22e">disp&lt;/span>.&lt;span style="color:#a6e22e">Run&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>告警存储器都实现了 Provider 接口
代码：&lt;code>pkg/store/provider/interface.go&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Provider&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Push&lt;/span>(&lt;span style="color:#a6e22e">alert&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">template&lt;/span>.&lt;span style="color:#a6e22e">Alert&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Pull&lt;/span>(&lt;span style="color:#a6e22e">batchSize&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">batchWait&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Duration&lt;/span>) ([]&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">template&lt;/span>.&lt;span style="color:#a6e22e">Alert&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Close&lt;/span>() &lt;span style="color:#66d9ef">error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="接收告警并推送到缓存">接收告警并推送到缓存&lt;/h3>
&lt;p>而想要 Pull 到数据，则需要先通过告警存储器中的 Provider Push 到存储中，首先通过 /api/v2/alerts 端点接收告警
代码：&lt;code>pkg/webhook/webhook.go&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">New&lt;/span>(&lt;span style="color:#a6e22e">logger&lt;/span> &lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Logger&lt;/span>, &lt;span style="color:#a6e22e">notifierCtl&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">controller&lt;/span>.&lt;span style="color:#a6e22e">Controller&lt;/span>, &lt;span style="color:#a6e22e">alerts&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">store&lt;/span>.&lt;span style="color:#a6e22e">AlertStore&lt;/span>, &lt;span style="color:#a6e22e">o&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Options&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Webhook&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">h&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">Webhook&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Options&lt;/span>: &lt;span style="color:#a6e22e">o&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">logger&lt;/span>: &lt;span style="color:#a6e22e">logger&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">h&lt;/span>.&lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">Post&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/api/v2/alerts&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">h&lt;/span>.&lt;span style="color:#a6e22e">handler&lt;/span>.&lt;span style="color:#a6e22e">Alert&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过 Provider.Push() 方法推送的告警将进入 Channel，由 Dispatcher 的通知阶段代码进行消费 Channel 中的告警信息以发送给 Receiver
代码：&lt;code>pkg/webhook/v1/handler.go&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">h&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">HttpHandler&lt;/span>) &lt;span style="color:#a6e22e">Alert&lt;/span>(&lt;span style="color:#a6e22e">w&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">ResponseWriter&lt;/span>, &lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Request&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">data&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">template&lt;/span>.&lt;span style="color:#a6e22e">Data&lt;/span>{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">utils&lt;/span>.&lt;span style="color:#a6e22e">JsonDecode&lt;/span>(&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">Body&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">data&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">alert&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">data&lt;/span>.&lt;span style="color:#a6e22e">Alerts&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 推送告警
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">h&lt;/span>.&lt;span style="color:#a6e22e">alerts&lt;/span>.&lt;span style="color:#a6e22e">Push&lt;/span>(&lt;span style="color:#a6e22e">alert&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">_&lt;/span> = &lt;span style="color:#a6e22e">level&lt;/span>.&lt;span style="color:#a6e22e">Error&lt;/span>(&lt;span style="color:#a6e22e">h&lt;/span>.&lt;span style="color:#a6e22e">logger&lt;/span>).&lt;span style="color:#a6e22e">Log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;msg&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;push alert error&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;error&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>.&lt;span style="color:#a6e22e">Error&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">h&lt;/span>.&lt;span style="color:#a6e22e">handle&lt;/span>(&lt;span style="color:#a6e22e">w&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">response&lt;/span>{&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">StatusOK&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Notification request accepted&amp;#34;&lt;/span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="从缓存中获取告警">从缓存中获取告警&lt;/h3>
&lt;p>Dispatcher 中通过 Pull() 方法从存储中获取告警，并通过 Dispatcher.processAlerts() 方法处理他们以便发送。
代码：&lt;code>pkg/dispatcher/dispatcher.go&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">d&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Dispatcher&lt;/span>) &lt;span style="color:#a6e22e">Run&lt;/span>() &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// err is not nil means the store had closed, dispatcher should process remaining alerts, then exit.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// BatchMaxSize 定义了每次从缓存中可以获取的最大告警条数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// BatchMaxWait 定义了每次执行 Pull() 的间隔时间
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 默认情况下，每隔 1 分钟会 PUll 100 条告警以进一步处理
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">alerts&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">d&lt;/span>.&lt;span style="color:#a6e22e">alerts&lt;/span>.&lt;span style="color:#a6e22e">Pull&lt;/span>(&lt;span style="color:#a6e22e">d&lt;/span>.&lt;span style="color:#a6e22e">notifierCtl&lt;/span>.&lt;span style="color:#a6e22e">GetBatchMaxSize&lt;/span>(), &lt;span style="color:#a6e22e">d&lt;/span>.&lt;span style="color:#a6e22e">notifierCtl&lt;/span>.&lt;span style="color:#a6e22e">GetBatchMaxWait&lt;/span>()); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#a6e22e">d&lt;/span>.&lt;span style="color:#a6e22e">processAlerts&lt;/span>(&lt;span style="color:#a6e22e">alerts&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">d&lt;/span>.&lt;span style="color:#a6e22e">processAlerts&lt;/span>(&lt;span style="color:#a6e22e">alerts&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Dispatcher.processAlerts() -&amp;gt; Dispatcher.worker() 将会执行&lt;a href="#oxPq5">告警处理阶段&lt;/a>&lt;/p>
&lt;h3 id="执行告警处理阶段">执行告警处理阶段&lt;/h3>
&lt;p>代码：&lt;code>pkg/dispatcher/dispatcher.go&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">d&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Dispatcher&lt;/span>) &lt;span style="color:#a6e22e">worker&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>, &lt;span style="color:#a6e22e">data&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span>{}, &lt;span style="color:#a6e22e">stopCh&lt;/span> &lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span>{}) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">pipeline&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">stage&lt;/span>.&lt;span style="color:#a6e22e">MultiStage&lt;/span>{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Global silence stage
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">pipeline&lt;/span> = append(&lt;span style="color:#a6e22e">pipeline&lt;/span>, &lt;span style="color:#a6e22e">silence&lt;/span>.&lt;span style="color:#a6e22e">NewStage&lt;/span>(&lt;span style="color:#a6e22e">d&lt;/span>.&lt;span style="color:#a6e22e">notifierCtl&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Route stage
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">pipeline&lt;/span> = append(&lt;span style="color:#a6e22e">pipeline&lt;/span>, &lt;span style="color:#a6e22e">route&lt;/span>.&lt;span style="color:#a6e22e">NewStage&lt;/span>(&lt;span style="color:#a6e22e">d&lt;/span>.&lt;span style="color:#a6e22e">notifierCtl&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Tenant silence stage
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">pipeline&lt;/span> = append(&lt;span style="color:#a6e22e">pipeline&lt;/span>, &lt;span style="color:#a6e22e">filter&lt;/span>.&lt;span style="color:#a6e22e">NewStage&lt;/span>(&lt;span style="color:#a6e22e">d&lt;/span>.&lt;span style="color:#a6e22e">notifierCtl&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Aggregation stage
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">pipeline&lt;/span> = append(&lt;span style="color:#a6e22e">pipeline&lt;/span>, &lt;span style="color:#a6e22e">aggregation&lt;/span>.&lt;span style="color:#a6e22e">NewStage&lt;/span>(&lt;span style="color:#a6e22e">d&lt;/span>.&lt;span style="color:#a6e22e">notifierCtl&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Notify stage
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">pipeline&lt;/span> = append(&lt;span style="color:#a6e22e">pipeline&lt;/span>, &lt;span style="color:#a6e22e">notify&lt;/span>.&lt;span style="color:#a6e22e">NewStage&lt;/span>(&lt;span style="color:#a6e22e">d&lt;/span>.&lt;span style="color:#a6e22e">notifierCtl&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// History stage
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">pipeline&lt;/span> = append(&lt;span style="color:#a6e22e">pipeline&lt;/span>, &lt;span style="color:#a6e22e">history&lt;/span>.&lt;span style="color:#a6e22e">NewStage&lt;/span>(&lt;span style="color:#a6e22e">d&lt;/span>.&lt;span style="color:#a6e22e">notifierCtl&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">pipeline&lt;/span>.&lt;span style="color:#a6e22e">Exec&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">d&lt;/span>.&lt;span style="color:#a6e22e">l&lt;/span>, &lt;span style="color:#a6e22e">data&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">stopCh&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span>{}{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过 MultiStage 按顺序执行一系列阶段，最后执行 MultiStage.Exec()，MultiStage 实现了 Stage 接口&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Stage&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Exec&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>, &lt;span style="color:#a6e22e">l&lt;/span> &lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Logger&lt;/span>, &lt;span style="color:#a6e22e">data&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span>{}) (&lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>, &lt;span style="color:#66d9ef">interface&lt;/span>{}, &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>同时，所有对告警信息需要执行的操作(上图中 Cache 右边的部分)都实现了该接口：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 告警静音 pkg/silence/silence.go
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">silenceStage&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">notifierCtl&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">controller&lt;/span>.&lt;span style="color:#a6e22e">Controller&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 告警路由 pkg/route/router.go
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">routeStage&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">notifierCtl&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">controller&lt;/span>.&lt;span style="color:#a6e22e">Controller&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 告警过滤 pkg/filter/filter.go
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">filterStage&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">notifierCtl&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">controller&lt;/span>.&lt;span style="color:#a6e22e">Controller&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 告警聚合 pkg/aggregation/aggregation.go
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">aggregationStage&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">notifierCtl&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">controller&lt;/span>.&lt;span style="color:#a6e22e">Controller&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 告警通知 pkg/notify/notify.go
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">notifyStage&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">notifierCtl&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">controller&lt;/span>.&lt;span style="color:#a6e22e">Controller&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 告警历史 pkg/history/history.go
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">historyStage&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">notifierCtl&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">controller&lt;/span>.&lt;span style="color:#a6e22e">Controller&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>告警的每个处理阶段，均由上述操作的 Exec() 方法实现&lt;/p>
&lt;h4 id="告警通知阶段">告警通知阶段&lt;/h4>
&lt;p>代码：``&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">notifyStage&lt;/span>) &lt;span style="color:#a6e22e">Exec&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>, &lt;span style="color:#a6e22e">l&lt;/span> &lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Logger&lt;/span>, &lt;span style="color:#a6e22e">data&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span>{}) (&lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>, &lt;span style="color:#66d9ef">interface&lt;/span>{}, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">reflect2&lt;/span>.&lt;span style="color:#a6e22e">IsNil&lt;/span>(&lt;span style="color:#a6e22e">data&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">_&lt;/span> = &lt;span style="color:#a6e22e">level&lt;/span>.&lt;span style="color:#a6e22e">Debug&lt;/span>(&lt;span style="color:#a6e22e">l&lt;/span>).&lt;span style="color:#a6e22e">Log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;msg&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Start notify stage&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;seq&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">ctx&lt;/span>.&lt;span style="color:#a6e22e">Value&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;seq&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">group&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">async&lt;/span>.&lt;span style="color:#a6e22e">NewGroup&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Receiver 是告警的接受者，即推送目标
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// []*template.Data 是需要推送的告警列表
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">alertMap&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">data&lt;/span>.(&lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#a6e22e">internal&lt;/span>.&lt;span style="color:#a6e22e">Receiver&lt;/span>][]&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">template&lt;/span>.&lt;span style="color:#a6e22e">Data&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">k&lt;/span>, &lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">alertMap&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">receiver&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">k&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ds&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">v&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 获取推送目标，比如 钉钉、微信 等
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">nf&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">factories&lt;/span>[&lt;span style="color:#a6e22e">receiver&lt;/span>.&lt;span style="color:#a6e22e">GetType&lt;/span>()](&lt;span style="color:#a6e22e">l&lt;/span>, &lt;span style="color:#a6e22e">receiver&lt;/span>, &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">notifierCtl&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">d&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">ds&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">alert&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">d&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">group&lt;/span>.&lt;span style="color:#a6e22e">Add&lt;/span>(&lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">stopCh&lt;/span> &lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span>{}) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 使用对应的 Receiver 的 Notify() 方法发送通知
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">stopCh&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#a6e22e">nf&lt;/span>.&lt;span style="color:#a6e22e">Notify&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">alert&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">data&lt;/span>, &lt;span style="color:#a6e22e">group&lt;/span>.&lt;span style="color:#a6e22e">Wait&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>所有 Receiver 都实现了 Notifier 接口
代码：&lt;code>pkg/notify/notifier/interface.go&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Notifier&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Notify&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>, &lt;span style="color:#a6e22e">data&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">template&lt;/span>.&lt;span style="color:#a6e22e">Data&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>代码：&lt;code>pkg/notify/notifier/${RECEIVER}/${RECEIVER}.go&lt;/code>&lt;/p>
&lt;p>以 钉钉(dingtalk) 为例
代码：&lt;code>pkg/notify/notifier/dingtalk/dingtalk.go&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Notifier&lt;/span>) &lt;span style="color:#a6e22e">Notify&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>, &lt;span style="color:#a6e22e">data&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">template&lt;/span>.&lt;span style="color:#a6e22e">Data&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">group&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">async&lt;/span>.&lt;span style="color:#a6e22e">NewGroup&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">n&lt;/span>.&lt;span style="color:#a6e22e">receiver&lt;/span>.&lt;span style="color:#a6e22e">ChatBot&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">group&lt;/span>.&lt;span style="color:#a6e22e">Add&lt;/span>(&lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">stopCh&lt;/span> &lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span>{}) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">stopCh&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#a6e22e">n&lt;/span>.&lt;span style="color:#a6e22e">sendToChatBot&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">data&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> len(&lt;span style="color:#a6e22e">n&lt;/span>.&lt;span style="color:#a6e22e">receiver&lt;/span>.&lt;span style="color:#a6e22e">ChatIDs&lt;/span>) &amp;gt; &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">group&lt;/span>.&lt;span style="color:#a6e22e">Add&lt;/span>(&lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">stopCh&lt;/span> &lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span>{}) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">stopCh&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#a6e22e">n&lt;/span>.&lt;span style="color:#a6e22e">sendToConversation&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">data&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">group&lt;/span>.&lt;span style="color:#a6e22e">Wait&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Alertmanager 配置</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/alertmanager/alertmanager-%E9%85%8D%E7%BD%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/alertmanager/alertmanager-%E9%85%8D%E7%BD%AE/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://prometheus.io/docs/alerting/latest/configuration/">官方文档，告警-配置&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="alertmanager-配置文件">Alertmanager 配置文件&lt;/h1>
&lt;p>下文用到的占位符说明：&lt;/p>
&lt;ul>
&lt;li>&lt;!-- raw HTML omitted --> # 与正则表达式匹配的持续时间  [0-9]+(ms|[smhdwy])&lt;/li>
&lt;li>&lt;!-- raw HTML omitted --> # 与正则表达式匹配的字符串  [a-zA-Z_][a-zA-Z0-9_]*&lt;/li>
&lt;li>&lt;!-- raw HTML omitted --> # 一串 unicode 字符&lt;/li>
&lt;li>&lt;!-- raw HTML omitted --> # 当前工作目录中的有效路径&lt;/li>
&lt;li>&lt;!-- raw HTML omitted --> # 可以接受值的布尔值，true 或 false&lt;/li>
&lt;li>&lt;!-- raw HTML omitted --> # 一个普通的字符串&lt;/li>
&lt;li>&lt;!-- raw HTML omitted --> # 是秘密的常规字符串，例如密码&lt;/li>
&lt;li>&amp;lt;tmpl_string&amp;gt; # a string which is template-expanded before usage&lt;/li>
&lt;li>&amp;lt;tmpl_secret&amp;gt; # a string which is template-expanded before usage that is a secret&lt;/li>
&lt;/ul>
&lt;p>下面是一个配置文件的基本结构&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 全局配置，所有内容作用于所有配置环境中,若其余配置环境中不再指定同样的配置，则global中的配置作为默认配置&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">global&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># The default SMTP From header field.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[ smtp_from&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;tmpl_string&amp;gt; ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># The default SMTP smarthost used for sending emails, including port number.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Port number usually is 25, or 587 for SMTP over TLS (sometimes referred to as STARTTLS).&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Example: smtp.example.org:587&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[ smtp_smarthost&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;string&amp;gt; ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># The default hostname to identify to the SMTP server.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[ smtp_hello&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;string&amp;gt; | default = &amp;#34;localhost&amp;#34; ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># SMTP Auth using CRAM-MD5, LOGIN and PLAIN. If empty, Alertmanager doesn&amp;#39;t authenticate to the SMTP server.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[ smtp_auth_username&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;string&amp;gt; ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># SMTP Auth using LOGIN and PLAIN.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[ smtp_auth_password&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;secret&amp;gt; ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># SMTP Auth using PLAIN.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[ smtp_auth_identity&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;string&amp;gt; ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># SMTP Auth using CRAM-MD5.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[ smtp_auth_secret&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;secret&amp;gt; ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># The default SMTP TLS requirement.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Note that Go does not support unencrypted connections to remote SMTP endpoints.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[ smtp_require_tls&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;bool&amp;gt; | default = true ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># The API URL to use for Slack notifications.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[ slack_api_url&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;secret&amp;gt; ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[ victorops_api_key&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;secret&amp;gt; ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[ victorops_api_url&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;string&amp;gt; | default = &amp;#34;https://alert.victorops.com/integrations/generic/20131114/alert/&amp;#34; ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[ pagerduty_url&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;string&amp;gt; | default = &amp;#34;https://events.pagerduty.com/v2/enqueue&amp;#34; ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[ opsgenie_api_key&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;secret&amp;gt; ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[ opsgenie_api_url&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;string&amp;gt; | default = &amp;#34;https://api.opsgenie.com/&amp;#34; ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[ hipchat_api_url&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;string&amp;gt; | default = &amp;#34;https://api.hipchat.com/&amp;#34; ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[ hipchat_auth_token&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;secret&amp;gt; ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[ wechat_api_url&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;string&amp;gt; | default = &amp;#34;https://qyapi.weixin.qq.com/cgi-bin/&amp;#34; ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[ wechat_api_secret&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;secret&amp;gt; ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[ wechat_api_corp_id&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;string&amp;gt; ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># The default HTTP client configuration&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[ http_config&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;http_config&amp;gt; ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 如果接收到的告警不包括 EndsAt 字段，那么经过 resolve_timeout 时间后，如果没有重复收到告警，则认为该告警已解决。默认5m。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">resolve_timeout&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;DURATION&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 指定告警模板文件的路径。若不指定则使用默认模板。可以使用通配符，e.g. &amp;#39;templates/*.tmpl&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">templates&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [ - &lt;span style="color:#ae81ff">&amp;lt;filepath&amp;gt; ... ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 路由树的节点(Alertmanager 的主要配置)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">route&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">详见下文单独章节&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">routes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">详见下文单独章节&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 告警的接收者列表(Alertmanager 的主要配置)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">receivers&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#ae81ff">&amp;lt;receiver&amp;gt; ...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 抑制规则列表&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">inhibit_rules&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [ - &lt;span style="color:#ae81ff">&amp;lt;inhibit_rule&amp;gt; ... ]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="global-object">global: &lt;!-- raw HTML omitted -->&lt;/h2>
&lt;p>全局配置，其内的内容作用于所有配置环境中,若其余配置环境中不再指定同样的配置，则 global 中的配置作为默认配置。在这里可以定义告警发送者的信息，比如通过邮件发送告警，那么可以定义全局的 SMTP 配置。&lt;/p>
&lt;h2 id="templates-object">templates: &amp;lt;[]OBJECT&amp;gt;&lt;/h2>
&lt;p>用于定义接收人收到的告警的样式。如 HTML 模板、邮件模板等等。&lt;/p>
&lt;h3 id="配置示例">配置示例&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">templates&lt;/span>: [- &lt;span style="color:#ae81ff">&amp;lt;filepath&amp;gt; ...]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="route-object">route: &lt;!-- raw HTML omitted -->&lt;/h2>
&lt;p>该字段中，可以配置多个相同接收者的子路由。在一个路由树中，将每个被路由的目标称为 &lt;strong>Node(节点)。&lt;/strong>
&lt;strong>group_by: &amp;lt;[]STRING&amp;gt;&lt;/strong> # 告警分组策略，凡是具有 []STRING 指定的标签名的告警都分为同一个组。&lt;/p>
&lt;ul>
&lt;li>可以使用 &lt;code>group_by: ['...']&lt;/code> 配置禁用聚合功能。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>group_interval: &lt;!-- raw HTML omitted -->&lt;/strong> # 发送告警的间隔时间。&lt;code>默认值：5m&lt;/code>。
&lt;strong>group_wait: &lt;!-- raw HTML omitted -->&lt;/strong> # 发送告警前，需要等待分组行为的时间。&lt;code>默认值：30s&lt;/code>&lt;/p>
&lt;ul>
&lt;li>新收到的告警会进行分组聚合，并以组的形式发送，为了方式大量告警频繁触发告警发送，所以有一个等待期，等到多个告警聚合在一个组时，统一发送&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>matchers: &amp;lt;[]OBJECT&amp;gt;&lt;/strong> # 匹配规则，凡是符合该规则的告警，将会进入当前节点。说白了，只有匹配上了，才会将告警发出去。&lt;/p>
&lt;blockquote>
&lt;p>注意：&lt;/p>
&lt;ul>
&lt;li>如果多个 Label 是“或”的关系，那就只能配置多个相同接收者的路由，每个路由的 matchers 不同。&lt;/li>
&lt;li>&lt;code>matchers&lt;/code> 字段代替了在 0.22.0 版本开始被弃用的 &lt;code>match&lt;/code> 与 &lt;code>match_re&lt;/code> 字段&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>recevier: &lt;!-- raw HTML omitted -->&lt;/strong> # 当前路由匹配到的告警的接收者。如果 recevier 是整个路由树的根，则就是默认接收者
**routes: **&lt;a href="#L0o2z">&lt;strong>&amp;lt;[]OBJECT&amp;gt;&lt;/strong>&lt;/a> # 子路由配置。&lt;code>routes&lt;/code> 字段的中的每个元素其实就是 &lt;code>route: &amp;lt;OBJECT&amp;gt;&lt;/code>。&lt;/p>
&lt;ul>
&lt;li>也就是说，&lt;code>routes: &amp;lt;[]OBJECT&amp;gt;&lt;/code> 下每个元素的字段，与 &lt;code>route: &amp;lt;OBJECT&amp;gt;&lt;/code> 下的字段相同，这是一个嵌套循环~~&lt;/li>
&lt;/ul>
&lt;h3 id="配置示例-1">配置示例&lt;/h3>
&lt;p>其中具有标签 instance=dev-phone.* 和 job=snmp-metrics 的告警都会路由给名为 dev-phone-group 的接收者&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">route&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">group_by&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e6db74">&amp;#34;namespace&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">group_interval&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;5m&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">group_wait&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;30s&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">receiver&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;default&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">repeat_interval&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;6h&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">routes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">receiver&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;network-group&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">group_wait&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;10s&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">match&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">network_device&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;interface-state&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">receiver&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;dev-phone-group&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">group_wait&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;10s&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">match_re&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">instance&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;dev-phone.*&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">receiver&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;dev-phone-group&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">group_wait&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;10s&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">match_re&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">job&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;snmp-metrics&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="receivers-object">receivers: &amp;lt;[]OBJECT&amp;gt;&lt;/h2>
&lt;p>&lt;strong>receivers(接收者)&lt;/strong> 是一个抽象的概念，可以是一个邮箱，也可以是微信、Slack、Webhook 等等。receivers 与 route 配置，根据路由规则将告警发送给指定的接收人。&lt;/p>
&lt;pre>&lt;code># 指定接收者的名称，用于在 route 配置环境中根据路由规则指定具体的接收者。
name: &amp;lt;STRING&amp;gt;
# 不同的接收者有不同的配置环境。
XXXXX_configs:
- &amp;lt;详见下文对应配置环境&amp;gt;, ...
&lt;/code>&lt;/pre>
&lt;p>现阶段 alertmanager 支持的 XXXX_configs 有 email_configs、pagerduty_configs、pushover_configs、slack_configs、opsgenie_configs、webhook_configs、victorops_configs、wechat_configs。&lt;/p>
&lt;h3 id="email_configs-字段邮件-接收者">email_configs 字段。邮件 接收者&lt;/h3>
&lt;p>配置示例&lt;/p>
&lt;pre>&lt;code>receivers:
- name: &amp;quot;default&amp;quot;
email_configs:
- to: &amp;quot;lichenhao@wisetv.com.cn&amp;quot;
send_resolved: true
&lt;/code>&lt;/pre>
&lt;h3 id="webhook_configs-字段webhook-接收者">webhook_configs 字段。webhook 接收者&lt;/h3>
&lt;p>webhook 类型的接收者是一种通用的接收者，不像其他类型的接收者，只能发送给特定的服务。而 webhook 只需要指定接收消息的 IP:PORT 即可。Alertmanager 会将指定的消息体已 POST 方法发送给对方，不管对方是什么，只要能处理 Alertamanger 发过去的 JSON 结构的数据即可。&lt;/p>
&lt;pre>&lt;code># Whether or not to notify about resolved alerts.
[ send_resolved: &amp;lt;boolean&amp;gt; | default = true ]
# The endpoint to send HTTP POST requests to.
url: &amp;lt;string&amp;gt;
# The HTTP client's configuration.
[ http_config: &amp;lt;http_config&amp;gt; | default = global.http_config ]
# The maximum number of alerts to include in a single webhook message. Alerts
# above this threshold are truncated. When leaving this at its default value of
# 0, all alerts are included.
[ max_alerts: &amp;lt;int&amp;gt; | default = 0 ]
&lt;/code>&lt;/pre>
&lt;h2 id="inhibit_rules-object">inhibit_rules: &lt;!-- raw HTML omitted -->&lt;/h2>
&lt;p>抑制规则配置&lt;/p>
&lt;h1 id="配置文件示例">配置文件示例&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">config&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">global&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">resolve_timeout&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;5m&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">route&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">group_by&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e6db74">&amp;#34;job&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e6db74">&amp;#34;ssc_pool_type&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">group_wait&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;30s&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">group_interval&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;5m&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">repeat_interval&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;6h&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">receiver&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;webhook&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">routes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">repeat_interval&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;5m&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">match&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">alertname&lt;/span>: &lt;span style="color:#ae81ff">Watchdog&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">receiver&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;developer&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">match&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">job&lt;/span>: &lt;span style="color:#ae81ff">console-server-exporter&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">receiver&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;developer&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">receivers&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;webhook&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">webhook_configs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">url&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;http://gateway.ssc.svc.cluster.local.:9010/alarmService/api/v1/alerts&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">send_resolved&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">url&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;http://alertmanager-webhook-dingtalk.monitoring.svc.cluster.local.:8060/dingtalk/webhook1/send&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">send_resolved&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;developer&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">webhook_configs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">url&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;http://alertmanager-webhook-dingtalk.monitoring.svc.cluster.local.:8060/dingtalk/webhook_mention_users/send&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">templates&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e6db74">&amp;#34;/etc/alertmanager/config/*.tmpl&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Alertmanager 数据结构</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/alertmanager/alertmanager-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/alertmanager/alertmanager-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://prometheus.io/docs/alerting/latest/clients/">官方文档，告警-客户端&lt;/a>(接收告警的数据结构)&lt;/li>
&lt;li>&lt;a href="https://prometheus.io/docs/alerting/latest/configuration/#webhook_config">官方文档，告警-配置-webhook_config&lt;/a>(通过 Webhook 推送告警的数据结构)&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="alertmanager-接收告警的数据结构">AlertManager 接收告警的数据结构&lt;/h2>
&lt;p>这个数据结构，其实就是 Prometheus 推送告警的数据结构~~~详见 &lt;a href="https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/Prometheus/Alerting(%E5%91%8A%E8%AD%A6).md">《Prometheus Alerting》&lt;/a>章节&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>[
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;labels&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;alertname&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;lt;requiredAlertName&amp;gt;&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;&amp;lt;labelname&amp;gt;&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;lt;labelvalue&amp;gt;&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;annotations&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;&amp;lt;labelname&amp;gt;&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;lt;labelvalue&amp;gt;&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;startsAt&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;lt;rfc3339&amp;gt;&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;endsAt&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;lt;rfc3339&amp;gt;&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;generatorURL&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;lt;generator_url&amp;gt;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="alertmanager-通过-webhook-推送告警的数据结构">Alertmanager 通过 Webhook 推送告警的数据结构&lt;/h2>
&lt;p>下面就是 Alertmanager 在 Webhook 配置中，以 POST 请求发送的 JSON 结构的数据格式：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;version&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;4&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;groupKey&amp;#34;&lt;/span>: &lt;span style="color:#960050;background-color:#1e0010">&amp;lt;string&amp;gt;&lt;/span>, &lt;span style="color:#75715e">// key identifying the group of alerts (e.g. to deduplicate)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">&amp;#34;truncatedAlerts&amp;#34;&lt;/span>: &lt;span style="color:#960050;background-color:#1e0010">&amp;lt;int&amp;gt;&lt;/span>, &lt;span style="color:#75715e">// how many alerts have been truncated due to &amp;#34;max_alerts&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 当前发送的告警状态，如果是激活的告警则是 firing，如果是已经解决的则是 resolved
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">&amp;#34;status&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;lt;resolved|firing&amp;gt;&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;receiver&amp;#34;&lt;/span>: &lt;span style="color:#960050;background-color:#1e0010">&amp;lt;string&amp;gt;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 根据 AlertManager 配置中 group_by 字段获取。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 也就是说通过某个标签分组，那么这个标签的名和值都会被写到这个字段中
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">&amp;#34;groupLabels&amp;#34;&lt;/span>: &lt;span style="color:#960050;background-color:#1e0010">&amp;lt;object&amp;gt;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;commonLabels&amp;#34;&lt;/span>: &lt;span style="color:#960050;background-color:#1e0010">&amp;lt;object&amp;gt;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;commonAnnotations&amp;#34;&lt;/span>: &lt;span style="color:#960050;background-color:#1e0010">&amp;lt;object&amp;gt;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;externalURL&amp;#34;&lt;/span>: &lt;span style="color:#960050;background-color:#1e0010">&amp;lt;string&amp;gt;&lt;/span>, &lt;span style="color:#75715e">// backlink to the Alertmanager.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">&amp;#34;alerts&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;status&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;lt;resolved|firing&amp;gt;&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;labels&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;alertname&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;lt;RequiredAlertName&amp;gt;&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;&amp;lt;labelname&amp;gt;&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;lt;labelvalue&amp;gt;&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">......&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;annotations&amp;#34;&lt;/span>: &lt;span style="color:#960050;background-color:#1e0010">&amp;lt;object&amp;gt;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;startsAt&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;lt;rfc3339&amp;gt;&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;endsAt&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;lt;rfc3339&amp;gt;&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;generatorURL&amp;#34;&lt;/span>: &lt;span style="color:#960050;background-color:#1e0010">&amp;lt;string&amp;gt;&lt;/span> &lt;span style="color:#75715e">// identifies the entity that caused the alert
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="示例">示例&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;receiver&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;webhook&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;status&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;firing&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;alerts&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;status&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;firing&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;labels&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;instance&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;192.168.0.1:9100&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;job&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;node-exporter&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;severity&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;warning&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;alertname&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;测试告警1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;annotations&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;description&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;测试告警1的告警详情&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;summary&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;测试告警1概要&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;startsAt&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2021-04-24T15:22:27.944457098Z&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;endsAt&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;0001-01-01T00:00:00Z&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;generatorURL&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;http://lichenhao:9090/graph?g0.expr=vector%281%29\u0026g0.tab=1&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;fingerprint&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;5adc80257c32889a&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;status&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;firing&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;labels&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;instance&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;192.168.0.1:9100&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;severity&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;warning&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;alertname&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;测试告警2&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;annotations&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;description&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;测试告警2的告警详情&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;summary&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;测试告警2概要&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;startsAt&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2021-04-24T15:22:27.944457098Z&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;endsAt&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;0001-01-01T00:00:00Z&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;generatorURL&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;http://lichenhao:9090/graph?g0.expr=vector%281%29\u0026g0.tab=1&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;fingerprint&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;e6532a92e438cdbf&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;groupLabels&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;alertname&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;测试告警组&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;commonLabels&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;instance&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;192.168.0.1:9100&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;severity&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;warning&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;commonAnnotations&amp;#34;&lt;/span>: {},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;externalURL&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;http://lichenhao:9093&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;version&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;4&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;groupKey&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;{}:{instance=\&amp;#34;192.168.0.1:9100\&amp;#34;}&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;truncatedAlerts&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;receiver&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;webhook&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;status&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;firing&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;alerts&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;status&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;firing&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;labels&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;alertname&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;测试告警3&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;label_2&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;value-1&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;severity&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;critical&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;tenant&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;test&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;annotations&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;additionalProp1&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;string&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;startsAt&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2021-04-24T15:22:27.944457098Z&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;endsAt&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;0001-01-01T00:00:00Z&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;generatorURL&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;http://lichenhao:9090/graph?g0.expr=vector%281%29\u0026g0.tab=1&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;fingerprint&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;496f742ac98e2398&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;groupLabels&amp;#34;&lt;/span>: {},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;commonLabels&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;alertname&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;测试告警3&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;label_2&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;value-1&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;severity&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;critical&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;tenant&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;test&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;commonAnnotations&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;additionalProp1&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;string&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;externalURL&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;http://lichenhao:9093&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;version&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;4&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;groupKey&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;{}:{}&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;truncatedAlerts&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Authentication(认证)</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/loki/authentication%E8%AE%A4%E8%AF%81/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/loki/authentication%E8%AE%A4%E8%AF%81/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/operations/authentication/">官方文档,运行方式-认证&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Loki 不附带任何包含的身份验证层。运营商应在您的服务之前运行身份验证反向代理，例如使用基本身份验证或 OAuth2 代理的 NGINX。
请注意，在多租户模式下使用 Loki 时，Loki 要求将 HTTP 标头 &lt;code>X-Scope-OrgID&lt;/code>设置为标识租户的字符串。填充此值的责任应由身份验证反向代理处理。阅读&lt;a href="https://grafana.com/docs/loki/latest/operations/multi-tenancy/">多租户&lt;/a>文档以了解更多信息。
有关身份验证 Promtail 的信息，请参阅文档以&lt;a href="https://grafana.com/docs/loki/latest/clients/promtail/configuration/">了解如何配置 Promtail&lt;/a>。&lt;/p></description></item><item><title>Docs: Binary Operators(二元运算符)</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/prometheus/promql/binary-operators%E4%BA%8C%E5%85%83%E8%BF%90%E7%AE%97%E7%AC%A6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/prometheus/promql/binary-operators%E4%BA%8C%E5%85%83%E8%BF%90%E7%AE%97%E7%AC%A6/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://prometheus.io/docs/prometheus/latest/querying/operators/#binary-operators">官方文档&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>PromQL 支持基本的 逻辑 和 算术 运算符。 对于两个即时向量之间的运算，可以修改匹配行为。&lt;/p>
&lt;p>使用 PromQL 除了能够方便的按照查询和过滤时间序列以外，PromQL 还支持丰富的运算符，用户可以使用这些运算符对进一步的对事件序列进行二次加工。这些运算符包括：数学运算符，逻辑运算符，布尔运算符等等。&lt;/p>
&lt;p>&lt;strong>官方文档中，将时间序列中的标签称为 element(元素)&lt;/strong>&lt;/p>
&lt;h1 id="arithmetic算术-二元运算符">Arithmetic(算术) 二元运算符&lt;/h1>
&lt;p>PromQL 支持以下算术二元运算符：&lt;/p>
&lt;ul>
&lt;li>
&lt;ul>
&lt;li>(加法)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;ul>
&lt;li>(减法)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;ul>
&lt;li>(乘法)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>/ (除法)&lt;/li>
&lt;li>% (求余)&lt;/li>
&lt;li>^ (幂运算)&lt;/li>
&lt;/ul>
&lt;p>算术二元运算符可以实现如下三种类型的运算：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Between two scalars(标量与标量)&lt;/strong>&lt;/li>
&lt;li>**Between an instant vector and a scalar(即时向量与标量) **&lt;/li>
&lt;li>&lt;strong>Between two instant vectors(即时向量与即时向量)&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h2 id="between-two-scalars标量与标量">Between two scalars(标量与标量)&lt;/h2>
&lt;p>就是普通的数学运算，类似于 1+1、2*3 等等，直接获取一个标量结果&lt;/p>
&lt;h2 id="between-an-instant-vector-and-a-scalar即时向量与标量">Between an instant vector and a scalar(即时向量与标量)&lt;/h2>
&lt;p>当瞬时向量与标量之间进行数学运算时，数学运算符会依次作用域瞬时向量中的每一个样本值，从而得到一组新的时间序列。
与 标量之间 的二元运算一样，只不过将即时向量表达式获取到的所有时间序列的值与标量进行运算，效果如下：
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/zpuhbm/1626438137638-8b462402-4042-4c0d-b030-fc186973d5ab.png" alt="image.png">
经过运算后：
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/zpuhbm/1626438160237-51de2eda-a03a-494a-8b86-16ffdaeb0551.png" alt="image.png">&lt;/p>
&lt;h2 id="between-two-instant-vectors即时向量与即时向量">Between two instant vectors(即时向量与即时向量)&lt;/h2>
&lt;p>如果是即时向量与即时向量之间进行数学运算时，过程会相对复杂一点。 例如，如果我们想根据 node_disk_bytes_written 和 node_disk_bytes_read 获取主机磁盘 IO 的总量，可以使用如下表达式：&lt;/p>
&lt;pre>&lt;code>node_disk_read_bytes_total + node_disk_written_bytes_total
&lt;/code>&lt;/pre>
&lt;p>那这个表达式是如何工作的呢？依次找到与左边向量表达式的标签完全匹配的右边向量表示，并将两者进行进行运算。同时新的时间序列将不会包含指标名称。 该表达式返回结果的示例如下所示：
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/zpuhbm/1626440024200-621fc788-29f8-4455-b933-4dbc3fa3a881.png" alt="image.png">
如果运算符左右两边的向量表达式没有匹配到，则直接丢弃，效果如下：
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/zpuhbm/1626440170722-a5bee3be-4df9-4553-9525-3aadd8c193f0.png" alt="image.png">&lt;/p>
&lt;h1 id="comparison比较-运算符">Comparison(比较) 运算符&lt;/h1>
&lt;p>目前，Prometheus 支持以下布尔运算符如下：&lt;/p>
&lt;ul>
&lt;li>== (相等)&lt;/li>
&lt;li>!= (不相等)&lt;/li>
&lt;li>
&lt;blockquote>
&lt;p>(大于)&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>&amp;lt; (小于)&lt;/li>
&lt;li>
&lt;blockquote>
&lt;p>= (大于等于)&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>&amp;lt;= (小于等于)&lt;/li>
&lt;/ul>
&lt;p>在 PromQL 通过标签匹配模式，用户可以根据时间序列的特征维度对其进行查询。而 比较运算 则支持用户根据时间序列中样本的值，对时间序列进行过滤。&lt;/p>
&lt;p>比如有这么一种场景：&lt;/p>
&lt;ul>
&lt;li>通过数学运算符我们可以很方便的计算出，当前所有主机节点的内存使用率：
&lt;ul>
&lt;li>(node_memory_bytes_total - node_memory_free_bytes_total) / node_memory_bytes_total&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>而系统管理员在排查问题的时候可能只想知道当前内存使用率超过 95%的主机呢？通过使用比较运算，就可以方便的获取到该结果：
&lt;ul>
&lt;li>(node_memory_bytes_total - node_memory_free_bytes_total) / node_memory_bytes_total &amp;gt; 0.95&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>即时向量与标量进行布尔运算时，PromQL 依次比较向量中的所有时间序列样本的值，如果比较结果为 true 则保留，反之丢弃。&lt;/p>
&lt;p>即时向量与即时向量直接进行布尔运算时，同样遵循默认的匹配模式：依次找到与左边向量元素匹配（标签完全一致）的右边向量元素进行相应的运算，如果没找到匹配元素，则直接丢弃。&lt;/p>
&lt;h2 id="使用-bool-修饰符改变比较运算符的行为">使用 bool 修饰符改变比较运算符的行为&lt;/h2>
&lt;p>布尔运算符的默认行为是对时序数据进行过滤。而在其它的情况下我们可能需要的是真正的布尔结果。例如，只需要知道当前模块的 HTTP 请求量是否&amp;gt;=1000，如果大于等于 1000 则返回 1（true）否则返回 0（false）。这时可以使用 bool 修饰符改变布尔运算的默认行为。 例如：&lt;/p>
&lt;pre>&lt;code>http_requests_total &amp;gt; bool 1000
&lt;/code>&lt;/pre>
&lt;p>使用 bool 修改符后，布尔运算不会对时间序列进行过滤，而是直接依次瞬时向量中的各个样本数据与标量的比较结果 0 或者 1。从而形成一条新的时间序列。&lt;/p>
&lt;pre>&lt;code>http_requests_total{code=&amp;quot;200&amp;quot;,handler=&amp;quot;query&amp;quot;,instance=&amp;quot;localhost:9090&amp;quot;,job=&amp;quot;prometheus&amp;quot;,method=&amp;quot;get&amp;quot;} 1
http_requests_total{code=&amp;quot;200&amp;quot;,handler=&amp;quot;query_range&amp;quot;,instance=&amp;quot;localhost:9090&amp;quot;,job=&amp;quot;prometheus&amp;quot;,method=&amp;quot;get&amp;quot;} 0
&lt;/code>&lt;/pre>
&lt;p>同时需要注意的是，如果是在两个标量之间使用布尔运算，则必须使用 bool 修饰符&lt;/p>
&lt;p>2 == bool 2 # 结果为 1&lt;/p>
&lt;h1 id="logical逻辑-运算符">Logical(逻辑) 运算符&lt;/h1>
&lt;p>目前，Prometheus 支持以下逻辑运算符(这些运算符只能作用在瞬时向量上)：&lt;/p>
&lt;ul>
&lt;li>and (并且)&lt;/li>
&lt;li>or (或者)&lt;/li>
&lt;li>unless (排除)&lt;/li>
&lt;/ul>
&lt;p>使用即时向量表达式能够获取到一个包含多个时间序列的集合，我们称为瞬时向量。 通过集合运算，可以在两个瞬时向量与瞬时向量之间进行相应的集合操作。&lt;/p>
&lt;p>vector1 and vector2 会产生一个由 vector1 的元素组成的新的向量。该向量包含 vector1 中完全匹配 vector2 中的元素组成。&lt;/p>
&lt;p>vector1 or vector2 会产生一个新的向量，该向量包含 vector1 中所有的样本数据，以及 vector2 中没有与 vector1 匹配到的样本数据。&lt;/p>
&lt;p>vector1 unless vector2 会产生一个新的向量，新向量中的元素由 vector1 中没有与 vector2 匹配的元素组成。&lt;/p>
&lt;h1 id="运算符优先级">运算符优先级&lt;/h1>
&lt;p>对于复杂类型的表达式，需要了解运算操作的运行优先级&lt;/p>
&lt;p>例如，查询主机的 CPU 使用率，可以使用表达式：&lt;/p>
&lt;pre>&lt;code>100 * (1 - avg (irate(node_cpu{mode='idle'}[5m])) by(job) )
&lt;/code>&lt;/pre>
&lt;p>其中 irate 是 PromQL 中的内置函数，用于计算区间向量中时间序列每秒的即时增长率。关于内置函数的部分，会在下一节详细介绍。&lt;/p>
&lt;p>在 PromQL 操作符中优先级由高到低依次为：&lt;/p>
&lt;ol>
&lt;li>^&lt;/li>
&lt;li>*, /, %&lt;/li>
&lt;li>+, -&lt;/li>
&lt;li>==, !=, &amp;lt;=, &amp;lt;, &amp;gt;=, &amp;gt;&lt;/li>
&lt;li>and, unless&lt;/li>
&lt;li>or&lt;/li>
&lt;/ol></description></item><item><title>Docs: Blackbox Exporter</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/instrumenting/blackbox-exporter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/instrumenting/blackbox-exporter/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/prometheus/blackbox_exporter">GitHub 项目，prometheus/blackbox_exporter&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://prometheus.io/docs/guides/multi-target-exporter/#configuring-modules">官方文档&lt;/a>&lt;/li>
&lt;li>个人文章参考：
&lt;ul>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/gBdOMob_GZ5t44evAHFVOA">https://mp.weixin.qq.com/s/gBdOMob_GZ5t44evAHFVOA&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>我们可以使用如下几种协议来对目标进行探测&lt;/p>
&lt;ul>
&lt;li>http&lt;/li>
&lt;li>tcp&lt;/li>
&lt;li>dns&lt;/li>
&lt;li>icmp&lt;/li>
&lt;/ul>
&lt;h2 id="使用方法">使用方法&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl &lt;span style="color:#e6db74">&amp;#39;http://10.244.1.26:19115/probe?module=http_2xx&amp;amp;target=www.baidu.com&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="prometheus-使用-blackbox-exporter-的配置示例">Prometheus 使用 Blackbox Exporter 的配置示例&lt;/h2>
&lt;p>与一般 Exporter 配置不同， Blackbox Exporter 的配置方式与 [SNMP Exporter](✏IT 学习笔记/👀6.可观测性/监控系统/Instrumenting/SNMP%20Exporter.md Exporter.md) 更像，每一个待探测的目标将会作为 Blackbox Exporter 程序的参数。可以通过 Relabel 机制，设置目标的 instance 标签。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">scrape_configs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">job_name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;blackbox-http-get&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">metrics_path&lt;/span>: &lt;span style="color:#ae81ff">/probe&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">params&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">module&lt;/span>: [&lt;span style="color:#ae81ff">http_2xx]&lt;/span> &lt;span style="color:#75715e"># Look for a HTTP 200 response.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">static_configs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">targets&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">http://prometheus.io&lt;/span> &lt;span style="color:#75715e"># Target to probe with http.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">https://prometheus.io&lt;/span> &lt;span style="color:#75715e"># Target to probe with https.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">http://example.com:8080&lt;/span> &lt;span style="color:#75715e"># Target to probe with http on port 8080.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">relabel_configs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">source_labels&lt;/span>: [&lt;span style="color:#ae81ff">__address__]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">target_label&lt;/span>: &lt;span style="color:#ae81ff">__param_target&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">source_labels&lt;/span>: [&lt;span style="color:#ae81ff">__param_target]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">target_label&lt;/span>: &lt;span style="color:#ae81ff">instance&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">target_label&lt;/span>: &lt;span style="color:#ae81ff">__address__&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">replacement&lt;/span>: &lt;span style="color:#ae81ff">127.0.0.1&lt;/span>:&lt;span style="color:#ae81ff">9115&lt;/span> &lt;span style="color:#75715e"># The blackbox exporter&amp;#39;s real hostname:port.&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="配置详解">配置详解&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/prometheus/blackbox_exporter/blob/master/CONFIGURATION.md">GitHub,CONFIGURATION.md&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Blackbox Exporter 的配置以模块区分，每个模块都有其独立的配置字段。一个模块就代表了一种探针类型及其探测行为。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">modules&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 指定模块的名称,可以定义多个模块。一个模块就代表一种探针及其探测行为。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">NAME_1&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 该模块的探针要使用的探测协议，可用的值有 http、tcp、dns、icmp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">prober&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;STRING&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 探测时的超时时长&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">timeout&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;DURATION&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 探针的行为，ProberProtool 应为 prober 字段的值&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ProberProtocol&lt;/span>: &lt;span style="color:#ae81ff">......&lt;/span> &lt;span style="color:#75715e"># 不同的探测协议，可用的配置字段各不相同，假如使用 http，则 ProberProtocol 替换为 http。详见下文单独章节&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="http-协议探针">http 协议探针&lt;/h2>
&lt;p>&lt;strong>valid_status_codes: &amp;lt;[]INT&amp;gt;&lt;/strong> # 此探针可以接受的响应状态码。&lt;code>默认值：2xx&lt;/code>。注:2xx 表示所有 2xx 状态码，这个字段的值如果要手动指定，必须是 int 类型。&lt;/p>
&lt;ul>
&lt;li>若响应码不在该字段指定的范围内，则探测失败&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>valid_http_versions: &lt;!-- raw HTML omitted -->&lt;/strong> # 探针接受的 HTTP 版本。&lt;/p>
&lt;ul>
&lt;li>若 HTTP 版本不在字段指定的范围内，则探测失败&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>method: &lt;!-- raw HTML omitted -->&lt;/strong> # 探针探测是要使用的 HTTP Method。&lt;code>默认值：GET&lt;/code>
&lt;strong>headers: &amp;lt;map[STGRING]STRING&amp;gt;&lt;/strong> # 设置探测时要使用的 Header，每行都是一个请求头的键值对。
**compression: &lt;!-- raw HTML omitted --> **#
&lt;strong>follow_redirects: &lt;!-- raw HTML omitted -->&lt;/strong> #
&lt;strong>fail_if_ssl: &lt;!-- raw HTML omitted -->&lt;/strong> # 如果 SSL 存在，则探针失败。&lt;code>默认值：false&lt;/code>
&lt;strong>fail_if_not_ssl: &lt;!-- raw HTML omitted -->&lt;/strong> # 如果 SSL 不存在，则探针失败。&lt;code>默认值：false&lt;/code>
&lt;strong>fail_if_body_matches_regexp:&lt;/strong> # Probe fails if response body matches regex.
[ - &lt;!-- raw HTML omitted -->, &amp;hellip; ]
**fail_if_body_not_matches_regexp: **# Probe fails if response body does not match regex.
[ - &lt;!-- raw HTML omitted -->, &amp;hellip; ]
**fail_if_header_matches: **# Probe fails if response header matches regex. For headers with multiple values, fails if &lt;em>at least one&lt;/em> matches.
[ - &amp;lt;http&lt;em>header_match_spec&amp;gt;, &amp;hellip; ]
&lt;strong>fail_if_header_not_matches:&lt;/strong> # Probe fails if response header does not match regex. For headers with multiple values, fails if _none&lt;/em> match.
[ - &amp;lt;http_header_match_spec&amp;gt;, &amp;hellip; ]&lt;/p>
&lt;p>######## Prometheus &lt;a href="https://github.com/prometheus/common/blob/v0.30.0/config/http_config.go#L159">共享库中的通用 HTTP 客户端配置&lt;/a> ########
&lt;strong>basic_auth: &lt;!-- raw HTML omitted -->&lt;/strong> # 配置 HTTP 的基础认证信息。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>username: &lt;!-- raw HTML omitted -->&lt;/strong> #&lt;/li>
&lt;li>&lt;strong>password: &lt;!-- raw HTML omitted -->&lt;/strong> #&lt;/li>
&lt;li>&lt;strong>password_file: &lt;!-- raw HTML omitted -->&lt;/strong> #&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>bearer_token: &lt;!-- raw HTML omitted -->&lt;/strong> # 探测目标时要使用的 bearer 令牌
&lt;strong>bearer_token_file: &lt;!-- raw HTML omitted -->&lt;/strong> # 探测目标时要使用的 bearer 令牌文件
&lt;strong>oauth2: &lt;!-- raw HTML omitted -->&lt;/strong> # 配置 OAuth 2.0 的认证配置。与 basic_auth 和 authorization 两个字段互斥
&lt;strong>proxy_url: &lt;!-- raw HTML omitted -->&lt;/strong> # HTTP proxy server to use to connect to the targets.
&lt;strong>tls_config: &lt;!-- raw HTML omitted -->&lt;/strong> # 发起 HTTP 请求时的 TLS 配置，即发起 HTTPS 请求。
详见 &lt;a href="#b9c06c74">tls 配置段&lt;/a>
######## Prometheus &lt;a href="https://github.com/prometheus/common/blob/v0.30.0/config/http_config.go#L159">共享库中的通用 HTTP 客户端配置&lt;/a>结束 ########&lt;/p>
&lt;p>&lt;strong>preferred_ip_protocol: &lt;!-- raw HTML omitted -->&lt;/strong> # 探针首选的 IP 协议版本。&lt;code>默认值：ip6&lt;/code>
&lt;strong>ip_protocol_fallback: &lt;!-- raw HTML omitted -->&lt;/strong> # 。&lt;code>默认值：true&lt;/code>
&lt;strong>body: &lt;!-- raw HTML omitted -->&lt;/strong> # 探测时要携带的 HTTP Body&lt;/p>
&lt;h2 id="tcp-协议探针">tcp 协议探针&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># The IP protocol of the TCP probe (ip4, ip6).&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[ preferred_ip_protocol&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;string&amp;gt; | default = &amp;#34;ip6&amp;#34; ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[ ip_protocol_fallback&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;boolean | default = true&amp;gt; ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># The source IP address.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[ source_ip_address&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;string&amp;gt; ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># The query sent in the TCP probe and the expected associated response.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># starttls upgrades TCP connection to TLS.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">query_response&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[ - [ [ expect&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;string&amp;gt; ],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[ send&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;string&amp;gt; ],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[ starttls&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;boolean | default = false&amp;gt; ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ], &lt;span style="color:#ae81ff">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Whether or not TLS is used when the connection is initiated.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[ tls&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;boolean | default = false&amp;gt; ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Configuration for TLS protocol of TCP probe.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">tls_config&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [ &lt;span style="color:#ae81ff">&amp;lt;tls_config&amp;gt; ]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="dns-协议探针">dns 协议探针&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># The IP protocol of the DNS probe (ip4, ip6).&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[ preferred_ip_protocol&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;string&amp;gt; | default = &amp;#34;ip6&amp;#34; ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[ ip_protocol_fallback&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;boolean | default = true&amp;gt; ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># The source IP address.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[ source_ip_address&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;string&amp;gt; ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[ transport_protocol&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;string&amp;gt; | default = &amp;#34;udp&amp;#34; ]&lt;/span> &lt;span style="color:#75715e"># udp, tcp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Whether to use DNS over TLS. This only works with TCP.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[ dns_over_tls&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;boolean | default = false&amp;gt; ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Configuration for TLS protocol of DNS over TLS probe.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">tls_config&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [ &lt;span style="color:#ae81ff">&amp;lt;tls_config&amp;gt; ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">query_name&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;string&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[ query_type&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;string&amp;gt; | default = &amp;#34;ANY&amp;#34; ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[ query_class&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;string&amp;gt; | default = &amp;#34;IN&amp;#34; ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># List of valid response codes.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">valid_rcodes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [ - &lt;span style="color:#ae81ff">&amp;lt;string&amp;gt; ... | default = &amp;#34;NOERROR&amp;#34; ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">validate_answer_rrs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">fail_if_matches_regexp&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [ - &lt;span style="color:#ae81ff">&amp;lt;regex&amp;gt;, ... ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">fail_if_all_match_regexp&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [ - &lt;span style="color:#ae81ff">&amp;lt;regex&amp;gt;, ... ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">fail_if_not_matches_regexp&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [ - &lt;span style="color:#ae81ff">&amp;lt;regex&amp;gt;, ... ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">fail_if_none_matches_regexp&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [ - &lt;span style="color:#ae81ff">&amp;lt;regex&amp;gt;, ... ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">validate_authority_rrs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">fail_if_matches_regexp&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [ - &lt;span style="color:#ae81ff">&amp;lt;regex&amp;gt;, ... ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">fail_if_all_match_regexp&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [ - &lt;span style="color:#ae81ff">&amp;lt;regex&amp;gt;, ... ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">fail_if_not_matches_regexp&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [ - &lt;span style="color:#ae81ff">&amp;lt;regex&amp;gt;, ... ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">fail_if_none_matches_regexp&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [ - &lt;span style="color:#ae81ff">&amp;lt;regex&amp;gt;, ... ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">validate_additional_rrs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">fail_if_matches_regexp&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [ - &lt;span style="color:#ae81ff">&amp;lt;regex&amp;gt;, ... ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">fail_if_all_match_regexp&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [ - &lt;span style="color:#ae81ff">&amp;lt;regex&amp;gt;, ... ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">fail_if_not_matches_regexp&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [ - &lt;span style="color:#ae81ff">&amp;lt;regex&amp;gt;, ... ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">fail_if_none_matches_regexp&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [ - &lt;span style="color:#ae81ff">&amp;lt;regex&amp;gt;, ... ]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="icmp-协议探针">icmp 协议探针&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># The IP protocol of the ICMP probe (ip4, ip6).&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[ preferred_ip_protocol&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;string&amp;gt; | default = &amp;#34;ip6&amp;#34; ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[ ip_protocol_fallback&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;boolean | default = true&amp;gt; ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># The source IP address.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[ source_ip_address&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;string&amp;gt; ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Set the DF-bit in the IP-header. Only works with ip4, on *nix systems and&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># requires raw sockets (i.e. root or CAP_NET_RAW on Linux).&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[ dont_fragment&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;boolean&amp;gt; | default = false ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># The size of the payload.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[ payload_size&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;int&amp;gt; ]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="通用配置">通用配置&lt;/h2>
&lt;h2 id="tls-配置段">tls 配置段&lt;/h2>
&lt;p>可以为多种协议的探针配置，用来配置安全相关信息。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 禁用目标证书认证。默认值：false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">insecure_skip_verify&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;BOOLEAN&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># The CA cert to use for the targets.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[ ca_file&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;filename&amp;gt; ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># The client cert file for the targets.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[ cert_file&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;filename&amp;gt; ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># The client key file for the targets.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[ key_file&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;filename&amp;gt; ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Used to verify the hostname for the targets.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[ server_name&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;string&amp;gt; ]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="配置示例">配置示例&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">modules&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">http_2xx&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">prober&lt;/span>: &lt;span style="color:#ae81ff">http&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">http&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># valid_http_versions: [&amp;#34;HTTP/1.1&amp;#34;, &amp;#34;HTTP/2&amp;#34;]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># valid_status_codes: [200]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">method&lt;/span>: &lt;span style="color:#ae81ff">GET&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">preferred_ip_protocol&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;ip4&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">tls_config&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">insecure_skip_verify&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">http_post_2xx&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">prober&lt;/span>: &lt;span style="color:#ae81ff">http&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">timeout&lt;/span>: &lt;span style="color:#ae81ff">10s&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">http&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">valid_http_versions&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;HTTP/1.1&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;HTTP/2&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">method&lt;/span>: &lt;span style="color:#ae81ff">POST&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">preferred_ip_protocol&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;ip4&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">tls_config&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">insecure_skip_verify&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">tcp_connect&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">prober&lt;/span>: &lt;span style="color:#ae81ff">tcp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">timeout&lt;/span>: &lt;span style="color:#ae81ff">10s&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">dns&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">prober&lt;/span>: &lt;span style="color:#ae81ff">dns&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">dns&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">transport_protocol&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;tcp&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">preferred_ip_protocol&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;ip4&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">query_name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;kubernetes.default.svc.cluster.local&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">icmp&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">prober&lt;/span>: &lt;span style="color:#ae81ff">icmp&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: compaction failed</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/prometheus/prometheus-%E7%AE%A1%E7%90%86/%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/compaction-failed/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/prometheus/prometheus-%E7%AE%A1%E7%90%86/%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/compaction-failed/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;p>compaction failed 是一个 Prometheus 在压缩数据时产生的错误，导致该问题的因素多种多样，最常见的就是使用 NFS 作为 Prometehus 时序数据库的后端存储。&lt;/p>
&lt;p>&lt;a href="https://prometheus.io/docs/prometheus/latest/storage/">官方文档&lt;/a>中曾明确表明不支持 NFS 文件系统
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/mhabk3/1633918055761-a5d5266e-c5ce-455c-92c1-0b219b2a2c60.png" alt="image.png">
该问题的表现形式通常为文件丢失，比如，某个 Block 中的 meta.json 文件丢失&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>msg&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;compaction failed&amp;#34;&lt;/span> err&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;plan compaction: open /prometheus/01FHHPS3NR7M2E8MAV37S61ME6/meta.json: no such file or directory&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>msg&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Failed to read meta.json for a block during reloadBlocks. Skipping&amp;#34;&lt;/span> dir&lt;span style="color:#f92672">=&lt;/span>/prometheus/01FHHPS3NR7M2E8MAV37S61ME6 err&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;open /prometheus/01FHHPS3NR7M2E8MAV37S61ME6/meta.json: no such file or directory&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>经过日志筛选，该问题起源于一次 Deleting obsolete block 操作之后的 compact blocks，也就是删除过期块后压缩块。 失败操作源于：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>msg&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;compaction failed&amp;#34;&lt;/span> err&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;delete compacted block after failed db reloadBlocks:01FHHPS3NR7M2E8MAV37S61ME6: unlinkat /prometheus/01FHHPS3NR7M2E8MAV37S61ME6/chunks: directory not empty&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/mhabk3/1633919258306-20285a8b-186e-4177-a043-5f06f54f7f2a.png" alt="image.png">&lt;/p>
&lt;p>这些报错日志信息，可以在 &lt;a href="https://github.com/prometheus/prometheus/blob/release-2.28/tsdb/db.go">./prometheus/tsdb/db.go&lt;/a> 代码中找到&lt;/p>
&lt;h2 id="解决方式">解决方式&lt;/h2>
&lt;p>可以直接删除 01FHHPS3NR7M2E8MAV37S61ME6 块，也就是直接删除这个目录，并重启 Prometheus&lt;/p></description></item><item><title>Docs: CR 详解</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/prometheus/prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/prometheus-operator/cr-%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/prometheus/prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/prometheus-operator/cr-%E8%AF%A6%E8%A7%A3/</guid><description/></item><item><title>Docs: Data Model(数据模型)</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/loki/storage%E5%AD%98%E5%82%A8/data-model%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/loki/storage%E5%AD%98%E5%82%A8/data-model%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>官方文档没有专门将 Log Stream 的章节，Stream 的概念都是在其他章节提到的&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/getting-started/labels/">官方文档,入门-标签&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/operations/storage/">官方文档,运维-存储&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="log-stream日志流-概念">Log Stream(日志流) 概念&lt;/h1>
&lt;p>Loki 通过一种称为 &lt;strong>Log Stream(日志流)&lt;/strong> 的概念组织所有日志数据。&lt;strong>Log Stream(日志流) 之于 Loki 类似于 Time series(时间序列) 之于 Prometheus&lt;/strong>
**
Loki 使用 &lt;strong>Stream(流)&lt;/strong> 这个词来描述保存的日志数据，并根据 **Label(标签)** 来定位日志流，Label 是日志流的元数据。Label 的概念和用法与 Prometheus 中的 Label 一致。如果 Loki 与 Prometheus 同时使用，那么他们之间得标签是一致的，通过 Label，很容易得就可以将应用程序指标和日志数据关联起来。&lt;/p>
&lt;p>Stream 与 Label 是强关联的，在 Loki 中，Label 是唯一可以定义 Log Stream 的东西。每个标签键和值的组合定义了一条 log stream。如果一个标签值发生了变化，则这会生成一个新的 Log stream。在 Prometheus 中，类似 Log Stream 概念的是 time series(stream 对应 series)。但是不同的是，在 Prometheus 中还有一个维度，是 metrics name(指标名称)。但是在 Loki 中则谁 Path，一个 采集日志的 Path 实际上是会采集很多很多日志的。也正是由于此，所以 Loki 将这种概念称为 Stream，而不是 Series。&lt;/p>
&lt;p>用白话说，所谓的 Log Stream 可以是下面事物的一种：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>File&lt;/strong> # 一个文件就是一个 Log Stream。一般情况，客户端(比如 Promtail)从文件中 tail 内容以获取日志信息，所以，一个日志就相当于一个 日志流。&lt;/li>
&lt;li>**STDOUT **# 标准输出。&lt;/li>
&lt;li>&amp;hellip;.等等&lt;/li>
&lt;/ul>
&lt;p>所以 Log Stream 就是上述事物的一种通用抽象。&lt;/p>
&lt;h2 id="log-line日志行-概念">Log Line(日志行) 概念&lt;/h2>
&lt;p>Log Line 就是指日志流中的每一行日志，称为 &lt;strong>Log Line(日志行)&lt;/strong>。Log Line 之于 Loki 类似于 Series 之于 Prometheus。&lt;/p>
&lt;h2 id="标签示例">标签示例&lt;/h2>
&lt;p>下面的示例将说明 Loki 中 Label 标签的基本使用和概念。&lt;/p>
&lt;p>首先看下下面的示例，这是一个 promtail 的抓取配置示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">scrape_configs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">job_name&lt;/span>: &lt;span style="color:#ae81ff">system&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">pipeline_stages&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">static_configs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">targets&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">localhost&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">job&lt;/span>: &lt;span style="color:#ae81ff">syslog&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">__path__&lt;/span>: &lt;span style="color:#ae81ff">/var/log/syslog&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个配置将获取日志文件数据并添加一个 job=syslog 的标签，我们可以这样来查询：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#960050;background-color:#1e0010">job=&lt;/span>&lt;span style="color:#f92672">&amp;#34;syslog&amp;#34;&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这将在 Loki 中创建一个流。现在我们再新增一些任务配置：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">scrape_configs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">job_name&lt;/span>: &lt;span style="color:#ae81ff">system&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">pipeline_stages&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">static_configs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">targets&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">localhost&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">job&lt;/span>: &lt;span style="color:#ae81ff">syslog&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">__path__&lt;/span>: &lt;span style="color:#ae81ff">/var/log/syslog&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">job_name&lt;/span>: &lt;span style="color:#ae81ff">system&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">pipeline_stages&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">static_configs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">targets&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">localhost&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">job&lt;/span>: &lt;span style="color:#ae81ff">apache&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">__path__&lt;/span>: &lt;span style="color:#ae81ff">/var/log/apache.log&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>现在我们采集两个日志文件，每个文件有一个标签与一个值，所以 Loki 会存储为两个流。我们可以通过下面几种方式来查询这些流：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#960050;background-color:#1e0010">job=&lt;/span>&lt;span style="color:#f92672">&amp;#34;apache&amp;#34;&lt;/span>} &lt;span style="color:#960050;background-color:#1e0010">&amp;lt;-&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">显示&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">job&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">标签为&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">apache&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">的日志&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#960050;background-color:#1e0010">job=&lt;/span>&lt;span style="color:#f92672">&amp;#34;syslog&amp;#34;&lt;/span>} &lt;span style="color:#960050;background-color:#1e0010">&amp;lt;-&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">显示&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">job&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">标签为&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">syslog&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">的日志&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#960050;background-color:#1e0010">job=~&lt;/span>&lt;span style="color:#f92672">&amp;#34;apache|syslog&amp;#34;&lt;/span>} &lt;span style="color:#960050;background-color:#1e0010">&amp;lt;-&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">显示&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">job&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">标签为&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">apache&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">或者&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">syslog&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">的日志&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>最后一种方式我们使用的是一个 regex 标签匹配器来获取 job 标签值为 apache 或者 syslog 的日志。接下来我们看看如何使用额外的标签：&lt;/p>
&lt;p>要获取这两个任务的日志可以用下面的方式来代替 regex 的方式：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#960050;background-color:#1e0010">env=&lt;/span>&lt;span style="color:#f92672">&amp;#34;dev&amp;#34;&lt;/span>} &lt;span style="color:#960050;background-color:#1e0010">&amp;lt;-&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">将返回所有带有&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">env=dev&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">标签的日志&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过使用一个标签就可以查询很多日志流了，通过组合多个不同的标签，可以创建非常灵活的日志查询。Label 标签是 Loki 日志数据的索引，它们用于查找压缩后的日志内容，这些内容被单独存储为块。标签和值的每一个唯一组合都定义了一个流 ，一个流的日志被分批，压缩，并作为块进行存储。&lt;/p>
&lt;h1 id="cardinality基数-概念">Cardinality(基数) 概念&lt;/h1>
&lt;p>前面的示例使用的是静态定义的 Label 标签，只有一个值；但是有一些方法可以动态定义标签。比如我们有下面这样的日志数据：&lt;/p>
&lt;pre>&lt;code>11.11.11.11 - frank [25/Jan/2000:14:00:01 -0500] &amp;quot;GET /1986.js HTTP/1.1&amp;quot; 200 932 &amp;quot;-&amp;quot; &amp;quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; de; rv:1.9.1.7) Gecko/20091221 Firefox/3.5.7 GTB6&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>我们可以使用下面的方式来解析这条日志数据：&lt;/p>
&lt;pre>&lt;code>- job_name: system
pipeline_stages:
- regex:
expression: &amp;quot;^(?P&amp;lt;ip&amp;gt;\\S+) (?P&amp;lt;identd&amp;gt;\\S+) (?P&amp;lt;user&amp;gt;\\S+) \\[(?P&amp;lt;timestamp&amp;gt;[\\w:/]+\\s[+\\-]\\d{4})\\] \&amp;quot;(?P&amp;lt;action&amp;gt;\\S+)\\s?(?P&amp;lt;path&amp;gt;\\S+)?\\s?(?P&amp;lt;protocol&amp;gt;\\S+)?\&amp;quot; (?P&amp;lt;status_code&amp;gt;\\d{3}|-) (?P&amp;lt;size&amp;gt;\\d+|-)\\s?\&amp;quot;?(?P&amp;lt;referer&amp;gt;[^\&amp;quot;]*)\&amp;quot;?\\s?\&amp;quot;?(?P&amp;lt;useragent&amp;gt;[^\&amp;quot;]*)?\&amp;quot;?$&amp;quot;
- labels:
action:
status_code:
static_configs:
- targets:
- localhost
labels:
job: apache
env: dev
__path__: /var/log/apache.log
&lt;/code>&lt;/pre>
&lt;p>这个 regex 匹配日志行的每个组件，并将每个组件的值提取到一个 capture 组里面。在 pipeline 代码内部，这些数据被放置到一个临时的数据结构中，允许在处理该日志行时将其用于其他处理（此时，临时数据将被丢弃）。&lt;/p>
&lt;p>从该 regex 中，我们就使用其中的两个 capture 组，根据日志行本身的内容动态地设置两个标签：&lt;/p>
&lt;pre>&lt;code>action (例如 action=&amp;quot;GET&amp;quot;, action=&amp;quot;POST&amp;quot;) status_code (例如 status_code=&amp;quot;200&amp;quot;, status_code=&amp;quot;400&amp;quot;)
&lt;/code>&lt;/pre>
&lt;p>假设我们有下面几行日志数据：&lt;/p>
&lt;pre>&lt;code>11.11.11.11 - frank [25/Jan/2000:14:00:01 -0500] &amp;quot;GET /1986.js HTTP/1.1&amp;quot; 200 932 &amp;quot;-&amp;quot; &amp;quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; de; rv:1.9.1.7) Gecko/20091221 Firefox/3.5.7 GTB6&amp;quot;
11.11.11.12 - frank [25/Jan/2000:14:00:02 -0500] &amp;quot;POST /1986.js HTTP/1.1&amp;quot; 200 932 &amp;quot;-&amp;quot; &amp;quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; de; rv:1.9.1.7) Gecko/20091221 Firefox/3.5.7 GTB6&amp;quot;
11.11.11.13 - frank [25/Jan/2000:14:00:03 -0500] &amp;quot;GET /1986.js HTTP/1.1&amp;quot; 400 932 &amp;quot;-&amp;quot; &amp;quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; de; rv:1.9.1.7) Gecko/20091221 Firefox/3.5.7 GTB6&amp;quot;
11.11.11.14 - frank [25/Jan/2000:14:00:04 -0500] &amp;quot;POST /1986.js HTTP/1.1&amp;quot; 400 932 &amp;quot;-&amp;quot; &amp;quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; de; rv:1.9.1.7) Gecko/20091221 Firefox/3.5.7 GTB6&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>则在 Loki 中收集日志后，会创建为如下所示的流：&lt;/p>
&lt;pre>&lt;code>{job=&amp;quot;apache&amp;quot;,env=&amp;quot;dev&amp;quot;,action=&amp;quot;GET&amp;quot;,status_code=&amp;quot;200&amp;quot;} 11.11.11.11 - frank [25/Jan/2000:14:00:01 -0500] &amp;quot;GET /1986.js HTTP/1.1&amp;quot; 200 932 &amp;quot;-&amp;quot; &amp;quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; de; rv:1.9.1.7) Gecko/20091221 Firefox/3.5.7 GTB6&amp;quot;
{job=&amp;quot;apache&amp;quot;,env=&amp;quot;dev&amp;quot;,action=&amp;quot;POST&amp;quot;,status_code=&amp;quot;200&amp;quot;} 11.11.11.12 - frank [25/Jan/2000:14:00:02 -0500] &amp;quot;POST /1986.js HTTP/1.1&amp;quot; 200 932 &amp;quot;-&amp;quot; &amp;quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; de; rv:1.9.1.7) Gecko/20091221 Firefox/3.5.7 GTB6&amp;quot;
{job=&amp;quot;apache&amp;quot;,env=&amp;quot;dev&amp;quot;,action=&amp;quot;GET&amp;quot;,status_code=&amp;quot;400&amp;quot;} 11.11.11.13 - frank [25/Jan/2000:14:00:03 -0500] &amp;quot;GET /1986.js HTTP/1.1&amp;quot; 400 932 &amp;quot;-&amp;quot; &amp;quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; de; rv:1.9.1.7) Gecko/20091221 Firefox/3.5.7 GTB6&amp;quot;
{job=&amp;quot;apache&amp;quot;,env=&amp;quot;dev&amp;quot;,action=&amp;quot;POST&amp;quot;,status_code=&amp;quot;400&amp;quot;} 11.11.11.14 - frank [25/Jan/2000:14:00:04 -0500] &amp;quot;POST /1986.js HTTP/1.1&amp;quot; 400 932 &amp;quot;-&amp;quot; &amp;quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; de; rv:1.9.1.7) Gecko/20091221 Firefox/3.5.7 GTB6&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>这 4 行日志将成为 4 个独立的流，并开始填充 4 个独立的块。任何与这些 标签/值 组合相匹配的额外日志行将被添加到现有的流中。如果有另一个独特的标签组合进来（比如 status_code=“500”）就会创建另一个新的流。&lt;/p>
&lt;p>比如我们为 IP 设置一个 Label 标签，不仅用户的每一个请求都会变成一个唯一的流，每一个来自同一用户的不同 action 或 status_code 的请求都会得到自己的流。&lt;/p>
&lt;p>如果有 4 个共同的操作（GET、PUT、POST、DELETE）和 4 个共同的状态码（可能不止 4 个！），这将会是 16 个流和 16 个独立的块。然后现在乘以每个用户，如果我们使用 IP 的标签，你将很快就会有数千或数万个流了。&lt;/p>
&lt;p>这个 Cardinality 太高了，这足以让 Loki 挂掉。&lt;/p>
&lt;p>当我们谈论 Cardinality 的时候，我们指的是标签和值的组合，以及他们创建的流的数量，高 Cardinality 是指使用具有较大范围的可能值的标签，如 IP，或结合需要其他标签，即使它们有一个小而有限的集合，比如 status_code 和 action。&lt;/p>
&lt;p>高 Cardinality 会导致 Loki 建立一个巨大的索引（💰💰💰💰），并将成千上万的微小块存入对象存储中（慢），Loki 目前在这种配置下的性能非常差，运行和使用起来非常不划算的。&lt;/p></description></item><item><title>Docs: Data Model(数据模型)</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/prometheus/storage%E5%AD%98%E5%82%A8/data-model%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/prometheus/storage%E5%AD%98%E5%82%A8/data-model%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://prometheus.io/docs/concepts/data_model/">官方文档&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://yunlzheng.gitbook.io/prometheus-book/parti-prometheus-ji-chu/promql">yunlzheng 文档&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Prometheus 从根本上将所有数据存储为 &lt;a href="https://en.wikipedia.org/wiki/Time_series">Time Series(时间序列)&lt;/a>：属于同一度量标准和同一组标注维的带有时间戳的值流。除了存储的时间序列外，Prometheus 可能会生成临时派生的时间序列作为查询的结果。&lt;/p>
&lt;h2 id="time-series-data时间序列数据-概念">Time-Series Data(时间序列数据) 概念&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Time_series">Wiki&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.influxdata.com/what-is-time-series-data/">InfluxDB 对时间序列数据的定义&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://get.influxdata.com/rs/972-GDU-533/images/why%20time%20series.pdf">这是论文&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Time Series(时间序列)&lt;/strong> 是一组按照时间发生先后顺序进行排列的数据点序列。通常一组时间序列的时间间隔为一恒定值（如 1 秒，5 分钟，12 小时，7 天，1 年），因此时间序列可以作为离散时间数据进行分析处理。时间序列广泛应用于数理统计、信号处理、模式识别、计量经济学、数学金融、天气预报、地震预测、脑电图、控制工程、航空学、通信工程以及绝大多数涉及到时间数据测量的应用科学与工程学。&lt;/p>
&lt;p>**Time Series Data(时间序列数据，简称 series) **是在一段时间内通过重复 Measurement(测量) 而获得的观测值的集合；可以将这些观测值绘制于图形之上，它会有一个数据轴和一个时间轴。&lt;/p>
&lt;p>从另一个角度看，时间序列数据是在不同时间上收集到的数据，用于所描述现象随时间变化的情况。这类数据反映了某一事物、现象等随时间的变化状态或程度。&lt;/p>
&lt;h2 id="prometheus-中时间序列数据的组成">Prometheus 中时间序列数据的组成&lt;/h2>
&lt;p>**时间序列(Time Series,简称 series) 有序列、系列的意思。**比如有这么几种描述：一系列的书、这一系列操作、等等。可以通过这种语境来理解 series(比如可以这么描述：这一系列数据)。&lt;/p>
&lt;p>与传统意义上定义的时序数据一样，由两部分组成：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Metrics(指标)&lt;/strong> # 用来描述要采集的数据指标，是时序数据的唯一标识符。例如：检测各个城市的风力、系统内存已使用的字节数 等等。相当于关系型数据库中的表。&lt;/li>
&lt;li>**Sample(样本) ** # 针对监测对象的某项指标(由 Metric 和 Tag 定义)按特定时间间隔采集到的每个 Metric 值就是一个 Sample(样本)。类似关系型数据库中的一行。&lt;/li>
&lt;/ul>
&lt;p>首先需要明确一个概念：
&lt;strong>Vector(向量)(也称为欧几里得向量、几何向量、矢量)&lt;/strong>，指具有大小和方向的 &lt;strong>Magnitude(量)&lt;/strong>。它可以形象化地表示为带箭头的线段。箭头所指：代表向量的方向；线段长度：代表向量的大小。与向量对应的量叫做数量（物理学中称&lt;a href="https://baike.baidu.com/item/%E6%A0%87%E9%87%8F/1530843">标量&lt;/a>），数量（或标量）只有大小，没有方向。&lt;/p>
&lt;p>Prometheus 会将所有采集到的样本数据以 &lt;strong>TimeSeries(时间序列)&lt;/strong> 的方式保存在内存数据库中，并且定时保存到硬盘上。TimeSeriesData 是按照&lt;strong>时间戳&lt;/strong>和&lt;strong>值&lt;/strong>的序列顺序存放的一条不规则有方向的线段，我们称之为 **Vector(向量)。**每条 TimeSeriesData 通过 **MetricsName(指标名称) **和一组 &lt;strong>LabelSet(标签集)&lt;/strong> 作为唯一标识符。如下所示，可以将 TimeSeries 理解为一个以时间为 x 轴、值为 y 轴的数字矩阵；而这个矩阵中的每一个点都是一个 &lt;strong>Sample(样本)&lt;/strong>，相同 MetricName 和 LabelSet 的多个样本之间连成的线段就是时间序列数据。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span> ^
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ . . . . . . . . . . . . . . . . . . - &amp;gt; node_cpu&lt;span style="color:#f92672">{&lt;/span>cpu&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;cpu0&amp;#34;&lt;/span>,mode&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;idle&amp;#34;&lt;/span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ . . . . . . . . . . . . . . . . . - &amp;gt; node_cpu&lt;span style="color:#f92672">{&lt;/span>cpu&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;cpu0&amp;#34;&lt;/span>,mode&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;system&amp;#34;&lt;/span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 值 . . . . . . . . . . . . . . . . . - &amp;gt; node_load1&lt;span style="color:#f92672">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ . . . . . . . . . . . . . . . . . - &amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v . . . . . . . . . . . . . . . . . . - &amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;------------------ 时间 ----------------&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 TimeSeries(时间序列) 中的每一个点称为一个 Sample(样本)，&lt;strong>Sample(样本) &lt;strong>与&lt;/strong> Metric(指标) 构成了时间序列数据&lt;/strong>，每条时间序列数据由这两部分组成：&lt;/p>
&lt;blockquote>
&lt;p>下面这个例子可以看到，Prometheus 返回的时间序列数据主要有两个字段，resultType(结果类型) 与 result(结果)。result 就是这条时间序列的数据内容
而 result 又分为 metric 和 value。其中 value 就是指的 sample&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 获取 prometheus_http_requests_total 指标。发送GET请求
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// http://172.38.40.244:30001/api/v1/query?query=prometheus_http_requests_total
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 获取如下结果
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;status&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;success&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;data&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;resultType&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;vector&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;result&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 下面就是这条时间序列的内容
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">&amp;#34;metric&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;__name__&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;prometheus_http_requests_total&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;code&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;200&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;handler&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/api/v1/label/:name/values&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;instance&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;localhost:8080&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;job&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;prometheus&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;value&amp;#34;&lt;/span>: [&lt;span style="color:#ae81ff">1610437100.544&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="metric指标就是-metric-字段">Metric(指标)，就是 metric 字段&lt;/h3>
&lt;ul>
&lt;li>一个 Metrics 由 MetricName 和 描述当前样本特征的 LabelSets(所有标签的集合) 组成。&lt;/li>
&lt;/ul>
&lt;h3 id="sample样本就是-value-字段">Sample(样本)，就是 value 字段&lt;/h3>
&lt;p>样本中包括一个时间戳和一个样本值。有时也可以称为 指标值、时间序列值 等等，毕竟在响应体中，value 字段&lt;/p>
&lt;ul>
&lt;li>&lt;strong>TimesTamp(时间戳)&lt;/strong>：一个精确到毫秒的时间戳。时间戳概念&lt;/li>
&lt;li>&lt;strong>SampleValue(样本值)&lt;/strong>： 一个 float64(也可以是别的类型) 的浮点型数据表示当前样本的值。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>样本也可以当作名词来描述这个序列的值的含义(i.e.一个数字代表了什么事物)。
怎么好理解怎么来，根据对 prom 的学习的不同阶段会有不同的理解。&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&amp;lt;--------------- metric -----------------------------------------&amp;gt; &amp;lt;-timestamp -&amp;gt;&amp;lt;-value-&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;__name__&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;http_request_total&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;method&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;get&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;statuscode&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;200&amp;#34;&lt;/span>&lt;span style="color:#f92672">}&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;value&amp;#34;&lt;/span>:&lt;span style="color:#f92672">[&lt;/span>1568996888.215,&lt;span style="color:#e6db74">&amp;#34;2&amp;#34;&lt;/span>&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>http_request_total&lt;span style="color:#f92672">{&lt;/span>status&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;200&amp;#34;&lt;/span>, method&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;GET&amp;#34;&lt;/span>&lt;span style="color:#f92672">}=&lt;/span>1434417561287 &lt;span style="color:#f92672">=&lt;/span>&amp;gt; &lt;span style="color:#ae81ff">94334&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>http_request_total&lt;span style="color:#f92672">{&lt;/span>status&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;404&amp;#34;&lt;/span>, method&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;GET&amp;#34;&lt;/span>&lt;span style="color:#f92672">}=&lt;/span>1434417560938 &lt;span style="color:#f92672">=&lt;/span>&amp;gt; &lt;span style="color:#ae81ff">38473&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>http_request_total&lt;span style="color:#f92672">{&lt;/span>status&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;404&amp;#34;&lt;/span>, method&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;GET&amp;#34;&lt;/span>&lt;span style="color:#f92672">}=&lt;/span>1434417561287 &lt;span style="color:#f92672">=&lt;/span>&amp;gt; &lt;span style="color:#ae81ff">38544&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>http_request_total&lt;span style="color:#f92672">{&lt;/span>status&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;200&amp;#34;&lt;/span>, method&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;POST&amp;#34;&lt;/span>&lt;span style="color:#f92672">}=&lt;/span>1434417560938 &lt;span style="color:#f92672">=&lt;/span>&amp;gt; &lt;span style="color:#ae81ff">4748&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>http_request_total&lt;span style="color:#f92672">{&lt;/span>status&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;200&amp;#34;&lt;/span>, method&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;POST&amp;#34;&lt;/span>&lt;span style="color:#f92672">}=&lt;/span>1434417561287 &lt;span style="color:#f92672">=&lt;/span>&amp;gt; &lt;span style="color:#ae81ff">4785&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="metric指标-结构">Metric(指标) 结构&lt;/h2>
&lt;p>指标的样式一：在形式上(输出到某个程序供人阅读)，指标(Metrics)都通过如下格式标识(指标名称(metrics name)和一组标签集(LabelSet))&lt;/p>
&lt;pre>&lt;code>&amp;lt;Metrics Name&amp;gt;{&amp;lt;Label Name&amp;gt;=&amp;lt;Label Value&amp;gt;, ...}
&lt;/code>&lt;/pre>
&lt;p>指标的样式二：在时间序列数据库中，指标(Metrics)则是使用下面的格式标识&lt;/p>
&lt;pre>&lt;code>{__name__=&amp;lt;Metrics Name&amp;gt;, &amp;lt;Label Name&amp;gt;=&amp;lt;Label Value&amp;gt;, ...}
&lt;/code>&lt;/pre>
&lt;ol>
&lt;li>&lt;strong>Metrics Name(指标的名称)&lt;/strong> #可以反映被监控数据的含义（比如，http_request_total - 表示当前系统接收到的 HTTP 请求总量）。指标名称只能由 ASCII 字符、数字、下划线以及冒号组成并必须符合正则表达式[a-zA-Z_:][a-zA-Z0-9_:]*。&lt;/li>
&lt;li>&lt;strong>LabelSet(标签集)&lt;/strong> #反映了当前样本的特征维度，通过这些维度 Prometheus 可以对样本数据进行过滤，聚合等。标签的名称只能由 ASCII 字符、数字以及下划线组成并满足正则表达式[a-zA-Z_][a-zA-Z0-9_]*。&lt;/li>
&lt;li>其中以__作为前缀的标签(两个_)，是获取到 metrics 后自动生成的原始标签。标签的值则可以包含任何 Unicode 编码的字符。在 Prometheus 的底层实现中指标名称实际上是以__name__=的形式保存在数据库中的，详见文章最后的图例&lt;/li>
&lt;/ol>
&lt;p>因此以下两种方式均表示的同一条 time-series ：&lt;/p>
&lt;pre>&lt;code>api_http_requests_total{method=&amp;quot;POST&amp;quot;, handler=&amp;quot;/messages&amp;quot;}
等同于：
{__name__=&amp;quot;api_http_requests_total&amp;quot;, method=&amp;quot;POST&amp;quot;, handler=&amp;quot;/messages&amp;quot;}
&lt;/code>&lt;/pre>
&lt;p>在 Prometheus 的源码中也可以看到指标(Metric)对应的数据结构，如下所示：&lt;/p>
&lt;pre>&lt;code>type Metric LabelSet
type LabelSet map[LabelName]LabelValue
type LabelName string
type LabelValue string
&lt;/code>&lt;/pre>
&lt;h2 id="白话说">白话说&lt;/h2>
&lt;p>有一条名叫内存使用率的时间序列数据，&amp;ldquo;内存使用率&amp;quot;就叫做 metric name。在 2019 年 10 月 1 日 00:00 的值为 100M，在 2019 年 10 月 1 日 01:00 的值为 110M。时间就是样本里的时间戳。值就是该样本的值。所有这些具有时间标识的值连在一起组成一条线，就叫时间序列数据，这条线的名字就叫“内存使用率”&lt;/p>
&lt;p>可以看到，所谓的 Time Series，是使用一组标签作为唯一标识符的，可以这么说，所有标签都属于时间序列的名字，而不只是 name 字段。&lt;/p>
&lt;h1 id="metrics指标-的类型">Metrics(指标) 的类型&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;a href="https://prometheus.io/docs/concepts/metric_types/">官网文档&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>在 Prometheus 的存储实现上所有的监控样本都是以 time-series 的形式保存在 Prometheus 的 TSDB(时序数据库) 中，而 TimeSeries 所对应的 Metric(监控指标) 也是通过 LabelSet 进行唯一命名的。&lt;/p>
&lt;p>从存储上来讲所有的 Metrics 都是相同的，但是在不同的场景下这些 Metrics 又有一些细微的差异。 例如，在 Node Exporter 返回的样本中指标 node_load1 反应的是当前系统的负载状态，随着时间的变化这个指标返回的样本数据是在不断变化的。而指标 node_cpu 所获取到的样本数据却不同，它是一个持续增大的值，因为其反应的是 CPU 的累积使用时间，从理论上讲只要系统不关机，这个值是会无限变大的。&lt;/p>
&lt;p>为了能够帮助用户理解和区分这些不同监控指标之间的差异，Prometheus 定义了 4 中不同的 &lt;strong>Metric Type(指标类型)&lt;/strong>：Counter(计数器)、Gauge(计量器)、Histogram(直方图)、Summary(摘要)。&lt;/p>
&lt;p>在 Exporter 返回的样本数据中，其注释中也包含了该样本的类型。例如：&lt;/p>
&lt;blockquote>
&lt;p>其中 TYPE node_cpu counter 表明 node_cpu 的指标类型为 counter&lt;/p>
&lt;/blockquote>
&lt;pre>&lt;code># HELP node_cpu Seconds the cpus spent in each mode.
# TYPE node_cpu counter
node_cpu{cpu=&amp;quot;cpu0&amp;quot;,mode=&amp;quot;idle&amp;quot;} 362812.7890625
&lt;/code>&lt;/pre>
&lt;h2 id="counter计数器--只增不减的计数器">Counter(计数器) # 只增不减的计数器&lt;/h2>
&lt;p>Counter 类型的指标其工作方式和计数器一样，只增不减（除非系统发生重置）。常见的监控指标，如 http_requests_total，node_cpu 都是 Counter 类型的监控指标。 一般在定义 Counter 类型指标的名称时推荐使用_total 作为后缀。&lt;/p>
&lt;p>Counter 是一个简单但有强大的工具，例如我们可以在应用程序中记录某些事件发生的次数，通过以时序的形式存储这些数据，我们可以轻松的了解该事件产生速率的变化。 PromQL 内置的聚合操作和函数可以让用户对这些数据进行进一步的分析：&lt;/p>
&lt;p>例如，通过 rate()函数获取 HTTP 请求量的增长率：
rate(http_requests_total[5m])&lt;/p>
&lt;p>查询当前系统中，访问量前 10 的 HTTP 地址：
topk(10, http_requests_total)&lt;/p>
&lt;h2 id="gauge仪表盘--可增可减的-gauge">Gauge(仪表盘) # 可增可减的 Gauge&lt;/h2>
&lt;p>与 Counter 不同，Gauge 类型的指标侧重于反应系统的当前状态。因此这类指标的样本数据可增可减。常见指标如：node_memory_MemFree(主机当前空闲的内容大小)、node_memory_MemAvailable(可用内存大小)都是 Gauge 类型的监控指标。&lt;/p>
&lt;p>通过 Gauge 指标，用户可以直接查看系统的当前状态：&lt;/p>
&lt;pre>&lt;code>node_memory_MemFree
&lt;/code>&lt;/pre>
&lt;p>对于 Gauge 类型的监控指标，通过 PromQL 内置函数 delta() 可以获取样本在一段时间返回内的变化情况。例如，计算 CPU 温度在两个小时内的差异：&lt;/p>
&lt;pre>&lt;code>delta(cpu_temp_celsius{host=&amp;quot;zeus&amp;quot;}[2h])
&lt;/code>&lt;/pre>
&lt;p>还可以使用 deriv() 计算样本的线性回归模型，甚至是直接使用 predict_linear() 对数据的变化趋势进行预测。例如，预测系统磁盘空间在 4 个小时之后的剩余情况：&lt;/p>
&lt;pre>&lt;code>predict_linear(node_filesystem_free{job=&amp;quot;node&amp;quot;}[1h], 4 * 3600)
&lt;/code>&lt;/pre>
&lt;h2 id="histogram直方图-与-summary摘要">Histogram(直方图) 与 Summary(摘要)&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;a href="https://prometheus.io/docs/practices/histograms/">官方文档&lt;/a>、&lt;a href="https://fuckcloudnative.io/posts/prometheus-histograms/">云原生实验室&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>除了 Counter 和 Gauge 类型的监控指标以外，Prometheus 还定义了 Histogram 和 Summary 的指标类型。Histogram 和 Summary 主用用于统计和分析样本的分布情况。&lt;/p>
&lt;p>在大多数情况下人们都倾向于使用某些量化指标的平均值，例如 CPU 的平均使用率、页面的平均响应时间。这种方式的问题很明显，以系统 API 调用的平均响应时间为例：如果大多数 API 请求都维持在 100ms 的响应时间范围内，而个别请求的响应时间需要 5s，那么就会导致某些 WEB 页面的响应时间落到中位数的情况，而这种现象被称为长尾问题。&lt;/p>
&lt;p>为了区分是平均的慢还是长尾的慢，最简单的方式就是按照请求延迟的范围进行分组。例如，统计延迟在 0~10ms 之间的请求数有多少而 10~20ms 之间的请求数又有多少。通过这种方式可以快速分析系统慢的原因。Histogram 和 Summary 都是为了能够解决这样问题的存在，通过 Histogram 和 Summary 类型的监控指标，我们可以快速了解监控样本的分布情况。&lt;/p>
&lt;p>直方图和摘要均是样本观察值，也就是说在一段时间内持续观察某个样本后得出的数据。&lt;/p>
&lt;p>这两种指标类型都属于&lt;strong>统计学范畴的指标&lt;/strong>。&lt;/p>
&lt;h3 id="histogram直方图">Histogram(直方图)&lt;/h3>
&lt;p>Histogram 在&lt;strong>一段时间范围内&lt;/strong>观察某指标(通常是 请求的持续时间 或 响应时间的长短 等)，并对该指标的样本进行采样，将其计入可配置的 &lt;strong>bucket(储存区)&lt;/strong> 中。Histogram 还提供所有 observed(被观察指标) 的样本在这一段时间范围内的总和。&lt;/p>
&lt;p>&lt;strong>传统意义上的直方图&lt;/strong>
假设我们想获取某个应用在不同响应时间的次数，则首先需要获取该应用在一段时间内的响应时间，收集这些样本。假设最后得到的所有样本的响应时间范围是 0s~10s。那么我们将样本的值划分为不同的区间，这个区间就是 &lt;strong>bucket(存储区)&lt;/strong>，假设每个 bucket 的宽度是 0.2s，那么第一个 bucket 则表示响应时间小于 0.2s 的所有样本数量；第二个 bucket 表示响应时间大于 0.2s 且小于 0.4s 的样本数量；以此类推。效果如图：
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gnzmdt/1617542272313-06f1c876-f41b-431b-99ed-e1e14b152761.jpeg" alt="">&lt;/p>
&lt;p>&lt;strong>Prometheus 中的直方图&lt;/strong>
Prometheus 中的直方图与传统意义的直方图有一些差别，准确描述，应该称为 **累计直方图。**主要差别在 bucket 的定义，在 Prometheus 的累计直方图中，还是假设 bucket 的宽度为 0.2s，那么第一个 bucket 表示响应时间小于等于 0.2s 的样本数量，第二个 bucket 表示响应时间小于等于 0.4s 的样本数量，以此类推。也就是说，&lt;strong>每一个 bucket 中的样本都包含了卡面所有 bucket 中的样本&lt;/strong>，所以称为 累计直方图。而每个 bucket 范围中的最大值，称为 **upper inclusive bound(上边界)。**效果如图：
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gnzmdt/1617543132157-1f35ddae-ef51-4ca7-9ece-72886154cc1f.jpeg" alt="">&lt;/p>
&lt;p>Histogram 类型的指标在同一时间具有多条时间序列(假设指标名称为 &amp;lt;basename)：(这些时间序列大体分为 3 种)&lt;/p>
&lt;ul>
&lt;li>**&lt;!-- raw HTML omitted -->_bucket{le=&amp;quot;&amp;lt;上边界&amp;gt;&amp;rdquo;} **# 要观察的样本分布在 bucket 中的数量。解释的更通俗易懂一点，这个值表示 要观察的样本的值 小于等于 上边界的值 的所有样本数量。
&lt;ul>
&lt;li>le 通常用来表示该 bucket 的上限。le 这俩字符按照关系运算符来理解，就是“小于或等于”的意思。。。。。。。&lt;/li>
&lt;li>用白话说就是，le 是 bucket 的标识符，比如下面的示例，就可以这么描述：0 到 0.00025 储存区，含有 332 个样本；0 到 0.0005 储存区，含有 336 个样本。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>&lt;!-- raw HTML omitted -->_sum&lt;/strong> # 所有 被观察样本的值 的总和。&lt;/li>
&lt;li>&lt;strong>&lt;!-- raw HTML omitted -->_count&lt;/strong> # 观察次数。(该值和上面的 &lt;!-- raw HTML omitted -->_bucket{le=&amp;quot;+Inf&amp;quot;} 相同)
&lt;ul>
&lt;li>本质上是一个 Counter 类型的指标。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>在 coredns 的样本数据中，我们能找到类型为 Histogram 的监控指标 &lt;code>coredns_dns_request_duration_seconds&lt;/code>&lt;/p>
&lt;p>在这些时间序列中，被观察的样本是“每个 dns 的解析请求所花费的时间”&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># HELP coredns_dns_request_duration_seconds Histogram of the time (in seconds) each request took.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># TYPE coredns_dns_request_duration_seconds histogram&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 在总共336次解析请求的花费时间中，小于0.00025秒的有332次&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>coredns_dns_request_duration_seconds_bucket&lt;span style="color:#f92672">{&lt;/span>server&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;dns://:53&amp;#34;&lt;/span>,zone&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;.&amp;#34;&lt;/span>,le&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0.00025&amp;#34;&lt;/span>&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#ae81ff">332&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 在总共336次解析请求的花费时间中，小于0.0005秒的有336次&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>coredns_dns_request_duration_seconds_bucket&lt;span style="color:#f92672">{&lt;/span>server&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;dns://:53&amp;#34;&lt;/span>,zone&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;.&amp;#34;&lt;/span>,le&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0.0005&amp;#34;&lt;/span>&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#ae81ff">336&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>........
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 在总共336次解析请求的花费时间中，小于8.192秒的有336次&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>coredns_dns_request_duration_seconds_bucket&lt;span style="color:#f92672">{&lt;/span>server&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;dns://:53&amp;#34;&lt;/span>,zone&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;.&amp;#34;&lt;/span>,le&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;8.192&amp;#34;&lt;/span>&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#ae81ff">336&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>coredns_dns_request_duration_seconds_bucket&lt;span style="color:#f92672">{&lt;/span>server&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;dns://:53&amp;#34;&lt;/span>,zone&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;.&amp;#34;&lt;/span>,le&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;+Inf&amp;#34;&lt;/span>&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#ae81ff">336&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 所有的336次解析请求，总的花费时间为 0.03502086400000001 秒&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>coredns_dns_request_duration_seconds_sum&lt;span style="color:#f92672">{&lt;/span>server&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;dns://:53&amp;#34;&lt;/span>,zone&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;.&amp;#34;&lt;/span>&lt;span style="color:#f92672">}&lt;/span> 0.03502086400000001
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># DNS 解析请求一共336次&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>coredns_dns_request_duration_seconds_count&lt;span style="color:#f92672">{&lt;/span>server&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;dns://:53&amp;#34;&lt;/span>,zone&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;.&amp;#34;&lt;/span>&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#ae81ff">336&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以通过 histogram_quantile() 函数 来计算 Histogram 类型样本的 分位数。分位数可能不太好理解，你可以理解为分割数据的点。我举个例子，假设样本的 9 分位数（quantile=0.9）的值为 x，即表示小于 x 的采样值的数量占总体采样值的 90%。Histogram 还可以用来计算应用性能指标值（Apdex score）。&lt;/p>
&lt;p>注意：
bucket 可以理解为是对数据指标值域的一个划分，划分的依据应该基于数据值的分布。注意后面的采样点是包含前面的采样点的，假设 xxx_bucket{&amp;hellip;,le=&amp;ldquo;0.01&amp;rdquo;} 的值为 10，而 xxx_bucket{&amp;hellip;,le=&amp;ldquo;0.05&amp;rdquo;} 的值为 30，那么意味着这 30 个采样点中，有 10 个是小于 10 ms 的，其余 20 个采样点的响应时间是介于 10 ms 和 50 ms 之间的。&lt;/p>
&lt;p>用白话说：直方图与 Counter 和 Gauge 的本质区别在于，直方图是对一组样本进行统计获得的结果，而 Counter 和 Gauge 仅仅是一个单一的样本。
直方图的应用场景：在 1 小时的 http 请求中，有多少请求的响应时间少于 1 秒，有多少请求的响应时间少于 2 秒，总有有多少请求，所有请求的平均的响应时间是多少。
如果是 Guage 的话，则只能表示每一个请求的具体响应时间，或者总共有多少个请求。
所以才说，直方图就是一种&lt;strong>统计学上的指标&lt;/strong>&lt;/p>
&lt;h3 id="summary摘要">Summary(摘要)&lt;/h3>
&lt;p>与 Histogram 类型类似，用于表示一段时间内的数据采样结果（通常是请求持续时间或响应大小等），但它 bucket 表示分位数（通过客户端计算，然后展示出来），而不是通过区间来计算。&lt;/p>
&lt;p>例如，指标 prometheus_tsdb_wal_fsync_duration_seconds 的指标类型为 Summary。 它记录了 Prometheus Server 中 wal_fsync 处理的处理时间，通过访问 Prometheus Serve r 的 /metrics 地址，可以获取到以下监控样本数据：&lt;/p>
&lt;pre>&lt;code># HELP prometheus_tsdb_wal_fsync_duration_seconds Duration of WAL fsync.
# TYPE prometheus_tsdb_wal_fsync_duration_seconds summary
prometheus_tsdb_wal_fsync_duration_seconds{quantile=&amp;quot;0.5&amp;quot;} 0.012352463
prometheus_tsdb_wal_fsync_duration_seconds{quantile=&amp;quot;0.9&amp;quot;} 0.014458005
prometheus_tsdb_wal_fsync_duration_seconds{quantile=&amp;quot;0.99&amp;quot;} 0.017316173
prometheus_tsdb_wal_fsync_duration_seconds_sum 2.888716127000002
prometheus_tsdb_wal_fsync_duration_seconds_count 216
&lt;/code>&lt;/pre>
&lt;p>从上面的样本中可以得知当前 Prometheus Server 进行 wal_fsync 操作的总次数为 216 次，耗时 2.888716127000002s。其中中位数（quantile=0.5）的耗时为 0.012352463，9 分位数（quantile=0.9）的耗时为 0.014458005s。&lt;/p>
&lt;h3 id="summary-类型-与-histogram-类型-的异同">Summary 类型 与 Histogram 类型 的异同&lt;/h3>
&lt;ol>
&lt;li>两类样本同样会反应当前指标的记录的总数(以_count 作为后缀)以及其值的总量（以_sum 作为后缀）&lt;/li>
&lt;li>不同在于 Histogram 指标直接反应了在不同区间内样本的个数，区间通过标签 len 进行定义。&lt;/li>
&lt;li>对于分位数的计算而言，Histogram 通过 histogram_quantile 函数是在服务器端计算的分位数。 而 Sumamry 的分位数则是直接在客户端计算完成。&lt;/li>
&lt;li>Summary 在通过 PromQL 进行查询时有更好的性能表现，而 Histogram 则会消耗更多的资源。反之对于提供指标的服务而言，Histogram 消耗的资源更少。在选择这两种方式时用户应该按照自己的实际场景进行选择。&lt;/li>
&lt;/ol>
&lt;h1 id="prometheus-底层保存的时间序列数据的样例">Prometheus 底层保存的时间序列数据的样例&lt;/h1>
&lt;p>详见&lt;a href="https://www.yuque.com/go/doc/33146966"> Prometheus Query API&lt;/a>
下面红框的地方就是
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gnzmdt/1616069604244-2f845e27-61ec-4a5b-ab9a-0634bf8907b2.jpeg" alt="">&lt;/p>
&lt;h1 id="prometheus-格式的-metrics-详解">Prometheus 格式的 Metrics 详解&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://prometheus.io/docs/instrumenting/exposition_formats/">官方文档&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>通过各种 Exporter 暴露的 HTTP 服务，Prometheus 可以采集到 当前时间 主机所有监控指标的样本数据。数据格式示例如下：&lt;/p>
&lt;pre>&lt;code># HELP http_requests_total The total number of HTTP requests.
# TYPE http_requests_total counter
http_requests_total{method=&amp;quot;post&amp;quot;,code=&amp;quot;200&amp;quot;} 1027 1395066363000
http_requests_total{method=&amp;quot;post&amp;quot;,code=&amp;quot;400&amp;quot;} 3 1395066363000
# Escaping in label values:
msdos_file_access_time_seconds{path=&amp;quot;C:\\DIR\\FILE.TXT&amp;quot;,error=&amp;quot;Cannot find file:\n\&amp;quot;FILE.TXT\&amp;quot;&amp;quot;} 1.458255915e9
# Minimalistic line:
metric_without_timestamp_and_labels 12.47
# A weird metric from before the epoch:
something_weird{problem=&amp;quot;division by zero&amp;quot;} +Inf -3982045
&lt;/code>&lt;/pre>
&lt;p>Note：上面通过 http 采集到的数据就是文本格式的 Metrics，格式一定是上述的样子，每个时间序列都分为 3 个部分。&lt;/p>
&lt;ol>
&lt;li>
&lt;h1 id="help-时间序列名称-时间序列描述">HELP 时间序列名称 时间序列描述&lt;/h1>
&lt;/li>
&lt;li>
&lt;h1 id="type-时间序列名称-时间序列类型">TYPE 时间序列名称 时间序列类型&lt;/h1>
&lt;/li>
&lt;li>非#开头的每一行表示当前 Node Exporter 采集到的一个监控样本：node_cpu 和 node_load1 表明了当前指标的名称、大括号中的标签则反映了当前样本的一些特征和维度、浮点数则是该监控样本的具体值。
&lt;ol>
&lt;li>如果有多个 Metrics 的项目，则会有多行&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>主要由三个部分组成：样本的一般注释信息（HELP），样本的类型注释信息（TYPE）和样本。Prometheus 会对 Exporter 响应的内容逐行解析：&lt;/p>
&lt;p>如果当前行以# HELP 开始，Prometheus 将会按照以下规则对内容进行解析，得到当前的指标名称以及相应的说明信息：&lt;/p>
&lt;h2 id="-help"># HELP&lt;/h2>
&lt;p>如果当前行以# TYPE 开始，Prometheus 会按照以下规则对内容进行解析，得到当前的指标名称以及指标类型:&lt;/p>
&lt;h2 id="-type"># TYPE&lt;/h2>
&lt;p>TYPE 注释行必须出现在指标的第一个样本之前。如果没有明确的指标类型需要返回为 untyped。&lt;/p>
&lt;h2 id="metricsname-与-metrics-的值">MetricsName 与 Metrics 的值&lt;/h2>
&lt;p>除了# 开头的所有行都会被视为是监控样本数据。 每一行样本需要满足以下格式规范:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>metric_name &lt;span style="color:#f92672">[{&lt;/span> label_name &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;label_value&amp;#34;&lt;/span> &lt;span style="color:#f92672">{&lt;/span> , label_name &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;label_value&amp;#34;&lt;/span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#f92672">[&lt;/span> ,... &lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">}]&lt;/span> value &lt;span style="color:#f92672">[&lt;/span> timestamp &lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中 metric_name 和 label_name 必须遵循 PromQL 的格式规范要求。value 是一个 float 格式的数据，timestamp 的类型为 int64（从 1970-01-01 00:00:00 以来的毫秒数），timestamp 为可选默认为当前时间。具有相同 metric_name 的样本必须按照一个组的形式排列，并且每一行必须是唯一的指标名称和标签键值对组合。&lt;/p></description></item><item><title>Docs: dell硬件监控OMSA</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/dell%E7%A1%AC%E4%BB%B6%E7%9B%91%E6%8E%A7omsa/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/dell%E7%A1%AC%E4%BB%B6%E7%9B%91%E6%8E%A7omsa/</guid><description>
&lt;h1 id="omsa全称-openmanage-server-administrator是戴尔公司自主研发的-it-系统管理解决方案">OMSA（全称 Openmanage Server Administrator),是戴尔公司自主研发的 IT 系统管理解决方案。&lt;/h1>
&lt;p>&lt;a href="http://linux.dell.com/">http://linux.dell.com/&lt;/a>
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gknv4x/1616067497715-90aa8503-f2c3-4436-ac53-560ef9f66d5f.jpeg" alt="">&lt;/p>
&lt;h2 id="omsa-的安装">OMSA 的安装&lt;/h2>
&lt;h3 id="自动安装">自动安装&lt;/h3>
&lt;p>&lt;a href="https://linux.dell.com/repo/hardware/dsu/">https://linux.dell.com/repo/hardware/dsu/&lt;/a>&lt;/p>
&lt;ol>
&lt;li>配置存储库
&lt;ol>
&lt;li>curl -O &lt;a href="https://linux.dell.com/repo/hardware/dsu/bootstrap.cgi">https://linux.dell.com/repo/hardware/dsu/bootstrap.cgi&lt;/a>&lt;/li>
&lt;li>bash bootstrap.cgi&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>yum install srvadmin-all.x86_64&lt;/li>
&lt;/ol>
&lt;p>Note：&lt;/p>
&lt;ol>
&lt;li>srvadmin-base #代理程序，可以生成 snmp 信息&lt;/li>
&lt;li>srvadmin-server-cli #命令行客户端，可以通过命令行查看硬件信息&lt;/li>
&lt;li>srvadmin-storage-cli #存储资源的命令行客户端，不安装这个则无法获取 raid 和硬盘的数据&lt;/li>
&lt;/ol>
&lt;p>下面是使用 yum 安装 OMSA 的 repo 文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># cat /etc/yum.repos.d/DELL-OMSA.repo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>dell-system-update_independent&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>name&lt;span style="color:#f92672">=&lt;/span>dell-system-update_independent
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>baseurl&lt;span style="color:#f92672">=&lt;/span>https://linux.dell.com/repo/hardware/dsu/os_independent/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gpgcheck&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gpgkey&lt;span style="color:#f92672">=&lt;/span>https://linux.dell.com/repo/hardware/dsu/public.key
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> https://linux.dell.com/repo/hardware/dsu/public_gpg3.key
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>enabled&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>exclude&lt;span style="color:#f92672">=&lt;/span>dell-system-update*.i386
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>dell-system-update_dependent&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>name&lt;span style="color:#f92672">=&lt;/span>dell-system-update_dependent
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mirrorlist&lt;span style="color:#f92672">=&lt;/span>https://linux.dell.com/repo/hardware/dsu/mirrors.cgi?osname&lt;span style="color:#f92672">=&lt;/span>el$releasever&amp;amp;basearch&lt;span style="color:#f92672">=&lt;/span>$basearch&amp;amp;native&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gpgcheck&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gpgkey&lt;span style="color:#f92672">=&lt;/span>https://linux.dell.com/repo/hardware/dsu/public.key
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> https://linux.dell.com/repo/hardware/dsu/public_gpg3.key
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>enabled&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>参考文章：&lt;a href="http://www.madown.com/2017/05/23/81/">http://www.madown.com/2017/05/23/81/&lt;/a>&lt;/p>
&lt;h3 id="手动安装">手动安装&lt;/h3>
&lt;p>&lt;a href="https://www.dell.com/support/home/">https://www.dell.com/support/home/&lt;/a>去该网站输入主机号查询，然后根据关键字搜索 OMSA 并下载
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gknv4x/1616067497724-a84a9901-d1a0-4c18-9198-303c071c9960.jpeg" alt="">&lt;/p>
&lt;ol>
&lt;li>解压已下载的安装包
&lt;ol>
&lt;li>mkdir dell-omsa&lt;/li>
&lt;li>tar -zxvf OM-SrvAdmin-Dell-Web-LX-9.3.0-3465_A00.tar -C dell-omsa #&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>安装 rpm 包
&lt;ol>
&lt;li>cd dell-omsa/linux/RPMS/supportRPMS/srvadmin/RHEL7/x86_64&lt;/li>
&lt;li>yum localinstall *.rpm&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>将 dell-r740.tar.gz 拷贝到/root/Download 目录下并执行以下脚本&lt;/p>
&lt;h2 id="omsa-的配置与使用">OMSA 的配置与使用&lt;/h2>
&lt;p>安装 dell 监控 openManager 相关组件完成后，会在/opt/dell/*目录下生成配置文件与可执行文件&lt;/p>
&lt;ul>
&lt;li>配置 openManager&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gknv4x/1616067497704-782c72fb-2dcf-4422-9654-b71a7c89d1eb.jpeg" alt="">&lt;/p>
&lt;ul>
&lt;li>/opt/dell/srvadmin/sbin/srvadmin-services.sh start #启动 openManger
&lt;ul>
&lt;li>该脚本会通过 systemd 启动三个服务&lt;/li>
&lt;li>instsvcdrv #&lt;/li>
&lt;li>dataeng #&lt;/li>
&lt;li>dsm_om_connsvc #web 控制台&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>/opt/dell/srvadmin/sbin/srvadmin-services.sh enable #设置开机自启 openManager&lt;/li>
&lt;li>systemctl stop dsm_om_connsvc #关闭 openManager 的 web 服务&lt;/li>
&lt;li>systemctl disable dsm_om_connsvc #将 openManager 的 web 服务开机自启关闭&lt;/li>
&lt;li>systemctl restart snmpd #重启 snmp 服务。由于安装 openManager 会在 snmpd 的配置文件中写入内容，所以需要重启 snmpd 服务使得该配置生效&lt;/li>
&lt;li>在 wiseman 上添加相关的 dell 硬件监控。效果如图，在主机的模板里添加 dell server 模板&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gknv4x/1616067497780-3afd659e-d460-4c2b-8d66-1f9a3c67890a.jpeg" alt="">&lt;/p>
&lt;h1 id="命令行工具使用说明">命令行工具使用说明&lt;/h1>
&lt;h2 id="omreport-command">omreport COMMAND&lt;/h2>
&lt;p>在任何时候都可以使用 omreport -?来获取命令帮助以查看都有哪些可用的 COMMAND，例如：omreport -?、omreport chassis -?等
COMMAND&lt;/p>
&lt;ol>
&lt;li>about Product and version properties.&lt;/li>
&lt;li>licenses Displays the digital licenses of the installed hardware devices.&lt;/li>
&lt;li>preferences Report system preferences.&lt;/li>
&lt;li>system System component properties.&lt;/li>
&lt;li>chassis 机架组件的属性。i.e.基本硬件的信息。Chassis component properties.&lt;/li>
&lt;li>storage #显示存储组件的属性&lt;/li>
&lt;/ol>
&lt;h2 id="omreport-storage">omreport storage&lt;/h2>
&lt;p>EXAMPLE&lt;/p>
&lt;ol>
&lt;li>omreport storage pdisk controller=0 #&lt;/li>
&lt;/ol></description></item><item><title>Docs: EFK 部署</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/elk-_-efk/efk-%E9%83%A8%E7%BD%B2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/elk-_-efk/efk-%E9%83%A8%E7%BD%B2/</guid><description>
&lt;h1 id="在-kubernetes-中部署-efk-套件">在 Kubernetes 中部署 EFK 套件&lt;/h1>
&lt;p>官方 addons：&lt;a href="https://github.com/kubernetes/kubernetes/tree/release-1.18/cluster/addons/fluentd-elasticsearch">https://github.com/kubernetes/kubernetes/tree/release-1.18/cluster/addons/fluentd-elasticsearch&lt;/a>&lt;/p>
&lt;p>官方 addons 问题：&lt;a href="https://github.com/kubernetes/kubernetes/issues/94429">https://github.com/kubernetes/kubernetes/issues/94429&lt;/a>&lt;/p>
&lt;p>参考：&lt;a href="https://www.qikqiak.com/post/install-efk-stack-on-k8s/">https://www.qikqiak.com/post/install-efk-stack-on-k8s/&lt;/a>&lt;/p>
&lt;p>es-service.yaml&lt;/p>
&lt;pre tabindex="0">&lt;code>kind: Service
apiVersion: v1
metadata:
name: elasticsearch
namespace: logging
labels:
app: elasticsearch
spec:
selector:
app: elasticsearch
clusterIP: None
ports:
- port: 9200
name: rest
- port: 9300
name: inter-node
&lt;/code>&lt;/pre>&lt;p>es-statefulset.yaml&lt;/p>
&lt;pre>&lt;code>apiVersion: apps/v1
kind: StatefulSet
metadata:
name: es
namespace: logging
spec:
serviceName: elasticsearch
replicas: 3
selector:
matchLabels:
app: elasticsearch
template:
metadata:
labels:
app: elasticsearch
spec:
containers:
- name: elasticsearch
image: docker.elastic.co/elasticsearch/elasticsearch:7.6.2
ports:
- name: rest
containerPort: 9200
- name: inter
containerPort: 9300
resources:
limits:
cpu: 1000m
requests:
cpu: 1000m
volumeMounts:
- name: data
mountPath: /usr/share/elasticsearch/data
env:
- name: cluster.name
value: k8s-logs
- name: node.name
valueFrom:
fieldRef:
fieldPath: metadata.name
- name: cluster.initial_master_nodes
value: &amp;quot;es-0,es-1,es-2&amp;quot;
- name: discovery.zen.minimum_master_nodes
value: &amp;quot;2&amp;quot;
- name: discovery.seed_hosts
value: &amp;quot;elasticsearch&amp;quot;
- name: ES_JAVA_OPTS
value: &amp;quot;-Xms512m -Xmx512m&amp;quot;
- name: network.host
value: &amp;quot;0.0.0.0&amp;quot;
volumes:
- name: data
emptyDir: {}
&lt;/code>&lt;/pre>
&lt;p>fluentd-configmap.yaml&lt;/p>
&lt;pre>&lt;code>kind: ConfigMap
apiVersion: v1
metadata:
name: fluentd-config
namespace: logging
data:
system.conf: |-
&amp;lt;system&amp;gt;
root_dir /tmp/fluentd-buffers/
&amp;lt;/system&amp;gt;
containers.input.conf: |-
&amp;lt;source&amp;gt;
@id fluentd-containers.log
@type tail # Fluentd 内置的输入方式，其原理是不停地从源文件中获取新的日志。
path /var/log/containers/*.log # 挂载的服务器Docker容器日志地址
pos_file /var/log/es-containers.log.pos
tag raw.kubernetes.* # 设置日志标签
read_from_head true
&amp;lt;parse&amp;gt; # 多行格式化成JSON
@type multi_format # 使用 multi-format-parser 解析器插件
&amp;lt;pattern&amp;gt;
format json # JSON解析器
time_key time # 指定事件时间的时间字段
time_format %Y-%m-%dT%H:%M:%S.%NZ # 时间格式
&amp;lt;/pattern&amp;gt;
&amp;lt;pattern&amp;gt;
format /^(?&amp;lt;time&amp;gt;.+) (?&amp;lt;stream&amp;gt;stdout|stderr) [^ ]* (?&amp;lt;log&amp;gt;.*)$/
time_format %Y-%m-%dT%H:%M:%S.%N%:z
&amp;lt;/pattern&amp;gt;
&amp;lt;/parse&amp;gt;
&amp;lt;/source&amp;gt;
# 在日志输出中检测异常，并将其作为一条日志转发
# https://github.com/GoogleCloudPlatform/fluent-plugin-detect-exceptions
&amp;lt;match raw.kubernetes.**&amp;gt; # 匹配tag为raw.kubernetes.**日志信息
@id raw.kubernetes
@type detect_exceptions # 使用detect-exceptions插件处理异常栈信息
remove_tag_prefix raw # 移除 raw 前缀
message log
stream stream
multiline_flush_interval 5
max_bytes 500000
max_lines 1000
&amp;lt;/match&amp;gt;
&amp;lt;filter **&amp;gt; # 拼接日志
@id filter_concat
@type concat # Fluentd Filter 插件，用于连接多个事件中分隔的多行日志。
key message
multiline_end_regexp /\n$/ # 以换行符“\n”拼接
separator &amp;quot;&amp;quot;
&amp;lt;/filter&amp;gt;
# 添加 Kubernetes metadata 数据
&amp;lt;filter kubernetes.**&amp;gt;
@id filter_kubernetes_metadata
@type kubernetes_metadata
&amp;lt;/filter&amp;gt;
# 修复 ES 中的 JSON 字段
# 插件地址：https://github.com/repeatedly/fluent-plugin-multi-format-parser
&amp;lt;filter kubernetes.**&amp;gt;
@id filter_parser
@type parser # multi-format-parser多格式解析器插件
key_name log # 在要解析的记录中指定字段名称。
reserve_data true # 在解析结果中保留原始键值对。
remove_key_name_field true # key_name 解析成功后删除字段。
&amp;lt;parse&amp;gt;
@type multi_format
&amp;lt;pattern&amp;gt;
format json
&amp;lt;/pattern&amp;gt;
&amp;lt;pattern&amp;gt;
format none
&amp;lt;/pattern&amp;gt;
&amp;lt;/parse&amp;gt;
&amp;lt;/filter&amp;gt;
# 删除一些多余的属性
&amp;lt;filter kubernetes.**&amp;gt;
@type record_transformer
remove_keys $.docker.container_id,$.kubernetes.container_image_id,$.kubernetes.pod_id,$.kubernetes.namespace_id,$.kubernetes.master_url,$.kubernetes.labels.pod-template-hash
&amp;lt;/filter&amp;gt;
# 只保留具有logging=true标签的Pod日志
&amp;lt;filter kubernetes.**&amp;gt;
@id filter_log
@type grep
&amp;lt;regexp&amp;gt;
key $.kubernetes.labels.logging
pattern ^true$
&amp;lt;/regexp&amp;gt;
&amp;lt;/filter&amp;gt;
###### 监听配置，一般用于日志聚合用 ######
forward.input.conf: |-
# 监听通过TCP发送的消息
&amp;lt;source&amp;gt;
@id forward
@type forward
&amp;lt;/source&amp;gt;
output.conf: |-
&amp;lt;match **&amp;gt;
@id elasticsearch
@type elasticsearch
@log_level info
include_tag_key true
host elasticsearch
port 9200
logstash_format true
logstash_prefix k8s # 设置 index 前缀为 k8s
request_timeout 30s
&amp;lt;buffer&amp;gt;
@type file
path /var/log/fluentd-buffers/kubernetes.system.buffer
flush_mode interval
retry_type exponential_backoff
flush_thread_count 2
flush_interval 5s
retry_forever
retry_max_interval 30
chunk_limit_size 2M
queue_limit_length 8
overflow_action block
&amp;lt;/buffer&amp;gt;
&amp;lt;/match&amp;gt;
&lt;/code>&lt;/pre>
&lt;p>fluentd-daemonset.yaml&lt;/p>
&lt;pre>&lt;code>apiVersion: v1
kind: ServiceAccount
metadata:
name: fluentd-es
namespace: logging
labels:
k8s-app: fluentd-es
kubernetes.io/cluster-service: &amp;quot;true&amp;quot;
addonmanager.kubernetes.io/mode: Reconcile
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
name: fluentd-es
labels:
k8s-app: fluentd-es
kubernetes.io/cluster-service: &amp;quot;true&amp;quot;
addonmanager.kubernetes.io/mode: Reconcile
rules:
- apiGroups:
- &amp;quot;&amp;quot;
resources:
- &amp;quot;namespaces&amp;quot;
- &amp;quot;pods&amp;quot;
verbs:
- &amp;quot;get&amp;quot;
- &amp;quot;watch&amp;quot;
- &amp;quot;list&amp;quot;
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
name: fluentd-es
labels:
k8s-app: fluentd-es
kubernetes.io/cluster-service: &amp;quot;true&amp;quot;
addonmanager.kubernetes.io/mode: Reconcile
subjects:
- kind: ServiceAccount
name: fluentd-es
namespace: logging
apiGroup: &amp;quot;&amp;quot;
roleRef:
kind: ClusterRole
name: fluentd-es
apiGroup: &amp;quot;&amp;quot;
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
name: fluentd-es
namespace: logging
labels:
k8s-app: fluentd-es
kubernetes.io/cluster-service: &amp;quot;true&amp;quot;
addonmanager.kubernetes.io/mode: Reconcile
spec:
selector:
matchLabels:
k8s-app: fluentd-es
template:
metadata:
labels:
k8s-app: fluentd-es
kubernetes.io/cluster-service: &amp;quot;true&amp;quot;
# 此注释确保如果节点被驱逐，fluentd不会被驱逐，支持关键的基于 pod 注释的优先级方案。
annotations:
scheduler.alpha.kubernetes.io/critical-pod: ''
spec:
serviceAccountName: fluentd-es
containers:
- name: fluentd-es
image: quay.io/fluentd_elasticsearch/fluentd:v3.0.1
env:
- name: FLUENTD_ARGS
value: --no-supervisor -q
resources:
limits:
memory: 500Mi
requests:
cpu: 100m
memory: 200Mi
volumeMounts:
- name: varlog
mountPath: /var/log
- name: varlibdockercontainers
mountPath: /var/lib/docker/containers
readOnly: true
- name: config-volume
mountPath: /etc/fluent/config.d
tolerations:
- operator: Exists
terminationGracePeriodSeconds: 30
volumes:
- name: varlog
hostPath:
path: /var/log
- name: varlibdockercontainers
hostPath:
path: /var/lib/docker/containers
- name: config-volume
configMap:
name: fluentd-config
&lt;/code>&lt;/pre>
&lt;p>kibana.yaml&lt;/p>
&lt;pre>&lt;code>apiVersion: v1
kind: Service
metadata:
name: kibana
namespace: logging
labels:
app: kibana
spec:
ports:
- port: 5601
nodePort: 30003
type: NodePort
selector:
app: kibana
---
apiVersion: apps/v1
kind: Deployment
metadata:
name: kibana
namespace: logging
labels:
app: kibana
spec:
selector:
matchLabels:
app: kibana
template:
metadata:
labels:
app: kibana
spec:
containers:
- name: kibana
image: docker.elastic.co/kibana/kibana:7.6.2
resources:
limits:
cpu: 1000m
requests:
cpu: 1000m
env:
- name: ELASTICSEARCH_HOSTS
value: http://elasticsearch:9200
ports:
- containerPort: 5601
&lt;/code>&lt;/pre>
&lt;h1 id="常见问题">常见问题&lt;/h1>
&lt;h2 id="elasticsearch_logging_discoverygo142-found-">elasticsearch_logging_discovery.go:142] Found []&lt;/h2>
&lt;p>&lt;a href="https://github.com/kubernetes/kubernetes/issues/94429">https://github.com/kubernetes/kubernetes/issues/94429&lt;/a>&lt;/p></description></item><item><title>Docs: Error on ingesting out-of-order result from rule evaluation</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/prometheus/prometheus-%E7%AE%A1%E7%90%86/%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/error-on-ingesting-out-of-order-result-from-rule-evaluation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/prometheus/prometheus-%E7%AE%A1%E7%90%86/%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/error-on-ingesting-out-of-order-result-from-rule-evaluation/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;p>Error on ingesting out-of-order result from rule evaluation&lt;/p>
&lt;p>该问题通常是由于记录规则的处理结果中，包含 NaN 而产生的告警，所有 NaN 的时间序列都会被丢弃，并不会保存到数据库中。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/bprr89/1633938701153-3857ea39-4849-4d33-89e3-ad34ac5313e0.png" alt="image.png">
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/bprr89/1633938707935-150d51c1-9dec-41a9-9346-f2e62bf74a53.png" alt="image.png">
下面是报错的具体内容，可以看到 numDropped 是记录规则查询后生成的新时间序列中，被丢弃的时间序列。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>caller&lt;span style="color:#f92672">=&lt;/span>manager.go:651 component&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;rule manager&amp;#34;&lt;/span> group&lt;span style="color:#f92672">=&lt;/span>kube-apiserver.rules msg&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Error on ingesting out-of-order result from rule evaluation&amp;#34;&lt;/span> numDropped&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">231&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>caller&lt;span style="color:#f92672">=&lt;/span>manager.go:651 component&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;rule manager&amp;#34;&lt;/span> group&lt;span style="color:#f92672">=&lt;/span>kube-apiserver-availability.rules msg&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Error on ingesting out-of-order result from rule evaluation&amp;#34;&lt;/span> numDropped&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">121&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个错误日志，可以从 Prometheus 代码中 &lt;a href="https://github.com/prometheus/prometheus/blob/release-2.28/rules/manager.go#L651">./prometheus/rules/manager.go&lt;/a> 的 Group.Eval() 方法中看到，每次评估规则时，只要有异常值得序列，都会抛出该错误日志信息。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Eval runs a single evaluation cycle in which all rules are evaluated sequentially.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">g&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Group&lt;/span>) &lt;span style="color:#a6e22e">Eval&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>, &lt;span style="color:#a6e22e">ts&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Time&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">samplesTotal&lt;/span> &lt;span style="color:#66d9ef">float64&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span>, &lt;span style="color:#a6e22e">rule&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">rules&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">select&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">done&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">default&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">rule&lt;/span> &lt;span style="color:#a6e22e">Rule&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">......&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">vector&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">app&lt;/span>.&lt;span style="color:#a6e22e">Append&lt;/span>(&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">Metric&lt;/span>, &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">T&lt;/span>, &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">V&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">rule&lt;/span>.&lt;span style="color:#a6e22e">SetHealth&lt;/span>(&lt;span style="color:#a6e22e">HealthBad&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">rule&lt;/span>.&lt;span style="color:#a6e22e">SetLastError&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">switch&lt;/span> &lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">Cause&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">storage&lt;/span>.&lt;span style="color:#a6e22e">ErrOutOfOrderSample&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">numOutOfOrder&lt;/span>&lt;span style="color:#f92672">++&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">level&lt;/span>.&lt;span style="color:#a6e22e">Debug&lt;/span>(&lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">logger&lt;/span>).&lt;span style="color:#a6e22e">Log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;msg&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Rule evaluation result discarded&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;err&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;sample&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">s&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">storage&lt;/span>.&lt;span style="color:#a6e22e">ErrDuplicateSampleForTimestamp&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">numDuplicates&lt;/span>&lt;span style="color:#f92672">++&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">level&lt;/span>.&lt;span style="color:#a6e22e">Debug&lt;/span>(&lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">logger&lt;/span>).&lt;span style="color:#a6e22e">Log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;msg&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Rule evaluation result discarded&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;err&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;sample&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">s&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">default&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">level&lt;/span>.&lt;span style="color:#a6e22e">Warn&lt;/span>(&lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">logger&lt;/span>).&lt;span style="color:#a6e22e">Log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;msg&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Rule evaluation result discarded&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;err&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;sample&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">s&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">seriesReturned&lt;/span>[&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">Metric&lt;/span>.&lt;span style="color:#a6e22e">String&lt;/span>()] = &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">Metric&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">numOutOfOrder&lt;/span> &amp;gt; &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">level&lt;/span>.&lt;span style="color:#a6e22e">Warn&lt;/span>(&lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">logger&lt;/span>).&lt;span style="color:#a6e22e">Log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;msg&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Error on ingesting out-of-order result from rule evaluation&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;numDropped&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">numOutOfOrder&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">numDuplicates&lt;/span> &amp;gt; &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">level&lt;/span>.&lt;span style="color:#a6e22e">Warn&lt;/span>(&lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">logger&lt;/span>).&lt;span style="color:#a6e22e">Log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;msg&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Error on ingesting results from rule evaluation with different value but same timestamp&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;numDropped&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">numDuplicates&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">......&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }(&lt;span style="color:#a6e22e">i&lt;/span>, &lt;span style="color:#a6e22e">rule&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">metrics&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">metrics&lt;/span>.&lt;span style="color:#a6e22e">GroupSamples&lt;/span>.&lt;span style="color:#a6e22e">WithLabelValues&lt;/span>(&lt;span style="color:#a6e22e">GroupKey&lt;/span>(&lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">File&lt;/span>(), &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">Name&lt;/span>())).&lt;span style="color:#a6e22e">Set&lt;/span>(&lt;span style="color:#a6e22e">samplesTotal&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">cleanupStaleSeries&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">ts&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Error on ingesting out-of-order samples</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/prometheus/prometheus-%E7%AE%A1%E7%90%86/%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/error-on-ingesting-out-of-order-samples/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/prometheus/prometheus-%E7%AE%A1%E7%90%86/%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/error-on-ingesting-out-of-order-samples/</guid><description>
&lt;h1 id="故障现象">故障现象&lt;/h1>
&lt;p>查看日志发现很多 &lt;code>Error on ingesting out-of-order samples&lt;/code> Warn 信息
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/rpaa9g/1629643964887-eaa5bc33-94fb-4add-8424-f40dfd65ec02.png" alt="image.png">&lt;/p>
&lt;h1 id="故障原因">故障原因&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.robustperception.io/debugging-out-of-order-samples">https://www.robustperception.io/debugging-out-of-order-samples&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>当一个 job 中从多个 Prometheus 中采集相同指标时，就容易产生这个问题。比如，下图示例：
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/rpaa9g/1629687458928-d2444080-a4ff-406c-8a70-76fa687459ae.jpeg" alt="">
当采集目标是具有相同数据的多个 Prometheus，并且采集时轮流采集，就会很容易产生上述问题&lt;/p>
&lt;h1 id="故障处理">故障处理&lt;/h1>
&lt;p>每个 Job 配置中，添加 &lt;code>honor_timestamps: false&lt;/code> 配置。&lt;/p></description></item><item><title>Docs: Exemplars</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/observability%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/exemplars/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/observability%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/exemplars/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考；&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://prometheus.io/docs/prometheus/latest/feature_flags/#exemplars-storage">https://prometheus.io/docs/prometheus/latest/feature_flags/#exemplars-storage&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/grafana/latest/basics/exemplars/">https://grafana.com/docs/grafana/latest/basics/exemplars/&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>这是啥？~CNCF 可观测性白皮书最后提到了这个&lt;/p>
&lt;h3 id="trace-id-实际应用">Trace ID 实际应用&lt;/h3>
&lt;p>我们讨论了在多个信号之间相互跳转的方法，但是它真的是有用的吗？让我们简单的看两个基本案例:
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/vx3gmg/1656494100400-266391e7-2b19-4845-a69a-2112f8128bbc.jpeg" alt="">&lt;/p>
&lt;ul>
&lt;li>我们收到了一个关于超出 SLO (service level objectives) 的意外高错误率的告警。告警来源于错误的计数器值，我们看到请求暴增导致 501 errors。我们使用_exemplar_ 跳转到事例的 logs 以了解准确的可供人类阅读的错误消息中。错误似乎来自于依赖深层次的内部微服务系统，由于存在与 trace ID 匹配的 request ID，所以可以跳转到 traces。多亏了这一点，我们确切的了解到哪个 service/process 导致了这个问题，并进一步挖掘更多的信息。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/vx3gmg/1656494100616-81e6c43f-e5c1-46c5-af8c-788ff1bc5f37.jpeg" alt="">&lt;/p>
&lt;ul>
&lt;li>我们去 debug 慢请求，我们使用 trace 采样手动触发请求并获得 trace ID。多亏了 tracing view，我们可以在请求方式的几个进程中看到，对于基本操作而说，ABC-1 请求的速度非常的慢。由于目标元数据和时间，我们选择了相关的 CPU 使用率 metrics。我们看到 CPU 使用率很高，接近了机器的限制值，表明 CPU 已经饱和。为了了解 CPU 使用率高的原因 (特别是当它是容器中仅存的进程)，我们使用相同的 目标元数据 和 time 选择跳转到 CPU profile。&lt;/li>
&lt;/ul>
&lt;p>总结一下，好像是通过一个 ID 可以在 Metrics、Log、Trace 数据之间相互跳转。即一个 ID 关联了一个或多个应用所有的可观测性数据&lt;/p></description></item><item><title>Docs: Exporter 开发实践</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/prometheus/prometheus-%E5%BC%80%E5%8F%91/instrumenting-%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/exporter-%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/prometheus/prometheus-%E5%BC%80%E5%8F%91/instrumenting-%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/exporter-%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/DesistDaydream/prometheus-instrumenting">GitHub 自学代码&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/prometheus/client_golang/blob/master/prometheus/go_collector.go">默认自带的 Metrics 的实现方式&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/s1nSaC-8ejvM342v5KPdxA">公众号,k8s 技术圈-使用 Go 开发 Prometheus Exporter&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>在 &lt;a href="https://www.yuque.com/go/doc/33146247">Exporter 原理解析&lt;/a>中，逐一了解了实现 Exporter 的方法&lt;/p>
&lt;ul>
&lt;li>首先，定义了一个包含 Metrics 描述符的结构体。以及实例化结构体的函数(也就是自定义一些 Metrics 的基本信息)&lt;/li>
&lt;li>然后让该 结构体 实现 Collector 接口(i.e.为这个结构体添加 &lt;code>Describe()&lt;/code> 与 &lt;code>Collect()&lt;/code> 方法)&lt;/li>
&lt;li>该 结构体 实现了 Collector 之后，就需要注册该 Metric，注册之后即可让 Prometheus 库通过 Collector 接口直接操作这个 Metric&lt;/li>
&lt;li>而想要注册，首先需要一个新的注册器&lt;/li>
&lt;li>创建完新的注册器之后，即可使用该注册器，将实现了 Collector 的 Metric 注册给 Prometheus 库。&lt;/li>
&lt;li>最后，使用 HandlerFor() 将注册器作为参数传递进去，并返回一个 http.Handler，指定 访问路径，并设置监听端口&lt;/li>
&lt;li>启动后，通过指定的访问路径，请求将会进入到 返回的 http.Handler 中，开始执行代码，最后获取完 Metric 信息，再响应给客户端&lt;/li>
&lt;/ul>
&lt;p>现在我将前面学习过程中零散的代码合并起来&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;math/rand&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;net/http&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;sync&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;github.com/prometheus/client_golang/prometheus&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;github.com/prometheus/client_golang/prometheus/promhttp&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// HelloWorldMetrics 用来保存所有 Metrics
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">HelloWorldMetrics&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">HelloWorldDesc&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">prometheus&lt;/span>.&lt;span style="color:#a6e22e">Desc&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">mutex&lt;/span> &lt;span style="color:#a6e22e">sync&lt;/span>.&lt;span style="color:#a6e22e">Mutex&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 加锁用，与主要处理逻辑无关
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// NewHelloWorldMetrics 实例化 HelloWorldMetrics，就是为所有 Mestirs 设定一些基本信息
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">NewHelloWorldMetrics&lt;/span>() &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">HelloWorldMetrics&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">HelloWorldMetrics&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">HelloWorldDesc&lt;/span>: &lt;span style="color:#a6e22e">prometheus&lt;/span>.&lt;span style="color:#a6e22e">NewDesc&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;a_hello_world_exporter&amp;#34;&lt;/span>, &lt;span style="color:#75715e">// Metric 名称
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Help Info for Hello World Exporter &amp;#34;&lt;/span>, &lt;span style="color:#75715e">// Metric 的帮助信息
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> []&lt;span style="color:#66d9ef">string&lt;/span>{&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>}, &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#75715e">// Metric 的可变标签值的标签 与 不可变标签值的标签
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> ),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Describe 让 HelloWorldMetrics 实现 Collector 接口。将 Metrics 的描述符传到 channel 中
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">ms&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">HelloWorldMetrics&lt;/span>) &lt;span style="color:#a6e22e">Describe&lt;/span>(&lt;span style="color:#a6e22e">ch&lt;/span> &lt;span style="color:#66d9ef">chan&lt;/span>&lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">prometheus&lt;/span>.&lt;span style="color:#a6e22e">Desc&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ch&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#a6e22e">ms&lt;/span>.&lt;span style="color:#a6e22e">HelloWorldDesc&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Collect 让 HelloWorldMetrics 实现 Collector 接口。采集 Metrics 的具体行为并设置 Metrics 的值类型,将 Metrics 的信息传到 channel 中
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">ms&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">HelloWorldMetrics&lt;/span>) &lt;span style="color:#a6e22e">Collect&lt;/span>(&lt;span style="color:#a6e22e">ch&lt;/span> &lt;span style="color:#66d9ef">chan&lt;/span>&lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#a6e22e">prometheus&lt;/span>.&lt;span style="color:#a6e22e">Metric&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ms&lt;/span>.&lt;span style="color:#a6e22e">mutex&lt;/span>.&lt;span style="color:#a6e22e">Lock&lt;/span>() &lt;span style="color:#75715e">// 加锁
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">ms&lt;/span>.&lt;span style="color:#a6e22e">mutex&lt;/span>.&lt;span style="color:#a6e22e">Unlock&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 为 ms.HelloWorldDesc 这个 Metric 设置其属性的值
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 该 Metric 值的类型为 Gauge，name 标签值为 haohao 时，Metric 的值为 1000 以内的随机数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">ch&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#a6e22e">prometheus&lt;/span>.&lt;span style="color:#a6e22e">MustNewConstMetric&lt;/span>(&lt;span style="color:#a6e22e">ms&lt;/span>.&lt;span style="color:#a6e22e">HelloWorldDesc&lt;/span>, &lt;span style="color:#a6e22e">prometheus&lt;/span>.&lt;span style="color:#a6e22e">GaugeValue&lt;/span>, float64(&lt;span style="color:#a6e22e">rand&lt;/span>.&lt;span style="color:#a6e22e">Int31n&lt;/span>(&lt;span style="color:#ae81ff">1000&lt;/span>)), &lt;span style="color:#e6db74">&amp;#34;haohao&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 该 Metric 值的类型为 Gauge，name 标签值为 nana 时，Metric 的值为 100 以内的随机数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">ch&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#a6e22e">prometheus&lt;/span>.&lt;span style="color:#a6e22e">MustNewConstMetric&lt;/span>(&lt;span style="color:#a6e22e">ms&lt;/span>.&lt;span style="color:#a6e22e">HelloWorldDesc&lt;/span>, &lt;span style="color:#a6e22e">prometheus&lt;/span>.&lt;span style="color:#a6e22e">GaugeValue&lt;/span>, float64(&lt;span style="color:#a6e22e">rand&lt;/span>.&lt;span style="color:#a6e22e">Int31n&lt;/span>(&lt;span style="color:#ae81ff">100&lt;/span>)), &lt;span style="color:#e6db74">&amp;#34;nana&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 实例化自己定义的所有 Metrics
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">m&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">NewHelloWorldMetrics&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 两种注册 Metrics 的方式
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 第一种：实例化一个新注册器，用来注册 自定义Metrics
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 使用 HandlerFor 将自己定义的已注册的 Metrics 作为参数，以便可以通过 http 获取 metric 信息
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">reg&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">prometheus&lt;/span>.&lt;span style="color:#a6e22e">NewRegistry&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">reg&lt;/span>.&lt;span style="color:#a6e22e">MustRegister&lt;/span>(&lt;span style="color:#a6e22e">m&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Handle&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/metrics&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">promhttp&lt;/span>.&lt;span style="color:#a6e22e">HandlerFor&lt;/span>(&lt;span style="color:#a6e22e">reg&lt;/span>, &lt;span style="color:#a6e22e">promhttp&lt;/span>.&lt;span style="color:#a6e22e">HandlerOpts&lt;/span>{}))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 第二种：使用自带的默认注册器，用来注册 自定义Metrics
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// prometheus.MustRegister(m)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// http.Handle(&amp;#34;/metrics&amp;#34;, promhttp.Handler())
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 让该 exporter 监听在8080 上
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">ListenAndServe&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;:8080&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">Export 暴露结果：
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># HELP a_hello_world_exporter Help Info for Hello World Exporter
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># TYPE a_hello_world_exporter gauge
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">a_hello_world_exporter{name=&amp;#34;haohao&amp;#34;} 81
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">a_hello_world_exporter{name=&amp;#34;nana&amp;#34;} 87
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">*/&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="prometheus-自带的-metrics">Prometheus 自带的 Metrics&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;log&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;net/http&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;github.com/prometheus/client_golang/prometheus/promhttp&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Handle&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/metrics&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">promhttp&lt;/span>.&lt;span style="color:#a6e22e">Handler&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Fatal&lt;/span>(&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">ListenAndServe&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;:8080&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个最简单的 Exporter 内部其实是使用了一个 &lt;strong>prometheus 库&lt;/strong> 默认的采集器 &lt;code>NewGoCollector()&lt;/code> 和 &lt;code>NewProcessCollector()&lt;/code> 采集当前 Go 运行时的相关信息，比如 go 堆栈使用、goroutine 数据、当前程序所用资源等等。内容如下：&lt;/p>
&lt;pre>&lt;code>root@lichenhao:~# curl localhost:8080/metrics
# HELP go_gc_duration_seconds A summary of the pause duration of garbage collection cycles.
# TYPE go_gc_duration_seconds summary
go_gc_duration_seconds{quantile=&amp;quot;0&amp;quot;} 0
go_gc_duration_seconds{quantile=&amp;quot;0.25&amp;quot;} 0
go_gc_duration_seconds{quantile=&amp;quot;0.5&amp;quot;} 0
go_gc_duration_seconds{quantile=&amp;quot;0.75&amp;quot;} 0
go_gc_duration_seconds{quantile=&amp;quot;1&amp;quot;} 0
go_gc_duration_seconds_sum 0
go_gc_duration_seconds_count 0
# HELP go_goroutines Number of goroutines that currently exist.
# TYPE go_goroutines gauge
go_goroutines 7
# HELP go_info Information about the Go environment.
# TYPE go_info gauge
go_info{version=&amp;quot;go1.15.5&amp;quot;} 1
# ........后面略，还有很多
&lt;/code>&lt;/pre>
&lt;h2 id="promhttphandler">promhttp.Handler()&lt;/h2>
&lt;p>&lt;code>promhttp.Handler()&lt;/code> 使用默认的 &lt;a href="https://pkg.go.dev/github.com/prometheus/client_golang/prometheus/promhttp?utm_source=gopls#HandlerOpts">promhttp.HandlerOpts&lt;/a> 为 &lt;a href="https://pkg.go.dev/github.com/prometheus/client_golang/prometheus?utm_source=gopls#pkg-variables">prometheus.DefaultGatherer&lt;/a> 返回一个&lt;a href="https://pkg.go.dev/net/http#Handler"> http.Handler&lt;/a>。&lt;/p>
&lt;pre>&lt;code>func Handler() http.Handler {
return InstrumentMetricHandler(
prometheus.DefaultRegisterer, HandlerFor(prometheus.DefaultGatherer, HandlerOpts{}),
)
}
&lt;/code>&lt;/pre>
&lt;p>&lt;code>promhttp.Handler()&lt;/code> 会注册默认采集器并采集一些默认指标。&lt;/p>
&lt;p>DefaultGatherer 是 &lt;a href="https://pkg.go.dev/github.com/prometheus/client_golang/prometheus?utm_source=gopls#Gatherer">Gatherer&lt;/a> 接口的实现；DefaultRegisterer 是 &lt;a href="https://pkg.go.dev/github.com/prometheus/client_golang/prometheus?utm_source=gopls#Registerer">Registerer &lt;/a>接口的实现。最初这两个&lt;a href="https://pkg.go.dev/github.com/prometheus/client_golang/prometheus?utm_source=gopls#pkg-variables">变量&lt;/a>都指向同一个 Registry，这个默认的 Registry 中包含 &lt;code>NewGoCollector()&lt;/code> 和 &lt;code>NewProcessCollector()&lt;/code> 这两个采集器&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">defaultRegistry&lt;/span> = &lt;span style="color:#a6e22e">NewRegistry&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">DefaultRegisterer&lt;/span> &lt;span style="color:#a6e22e">Registerer&lt;/span> = &lt;span style="color:#a6e22e">defaultRegistry&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">DefaultGatherer&lt;/span> &lt;span style="color:#a6e22e">Gatherer&lt;/span> = &lt;span style="color:#a6e22e">defaultRegistry&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">init&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">MustRegister&lt;/span>(&lt;span style="color:#a6e22e">NewProcessCollector&lt;/span>(&lt;span style="color:#a6e22e">ProcessCollectorOpts&lt;/span>{}))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">MustRegister&lt;/span>(&lt;span style="color:#a6e22e">NewGoCollector&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="instrumentmetrichandler">InstrumentMetricHandler()&lt;/h2>
&lt;p>在 InstrumentMetricHandler() 函数中，使用了比 NewDesc() 更高级的 NewConterVec()、NewGauge() 来定义一个 Metric&lt;/p>
&lt;p>InstrumentMetricHandler is usually used with an http.Handler returned by the HandlerFor function. It instruments the provided http.Handler with two metrics: A counter vector &amp;ldquo;promhttp_metric_handler_requests_total&amp;rdquo; to count scrapes partitioned by HTTP status code, and a gauge &amp;ldquo;promhttp_metric_handler_requests_in_flight&amp;rdquo; to track the number of simultaneous scrapes. This function idempotently registers collectors for both metrics with the provided Registerer. It panics if the registration fails. The provided metrics are useful to see how many scrapes hit the monitored target (which could be from different Prometheus servers or other scrapers), and how often they overlap (which would result in more than one scrape in flight at the same time). Note that the scrapes-in-flight gauge will contain the scrape by which it is exposed, while the scrape counter will only get incremented after the scrape is complete (as only then the status code is known). For tracking scrape durations, use the &amp;ldquo;scrape_duration_seconds&amp;rdquo; gauge created by the Prometheus server upon each scrape.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">InstrumentMetricHandler&lt;/span>(&lt;span style="color:#a6e22e">reg&lt;/span> &lt;span style="color:#a6e22e">prometheus&lt;/span>.&lt;span style="color:#a6e22e">Registerer&lt;/span>, &lt;span style="color:#a6e22e">handler&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Handler&lt;/span>) &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Handler&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">cnt&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">prometheus&lt;/span>.&lt;span style="color:#a6e22e">NewCounterVec&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">prometheus&lt;/span>.&lt;span style="color:#a6e22e">CounterOpts&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;promhttp_metric_handler_requests_total&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Help&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Total number of scrapes by HTTP status code.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> []&lt;span style="color:#66d9ef">string&lt;/span>{&lt;span style="color:#e6db74">&amp;#34;code&amp;#34;&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Initialize the most likely HTTP status codes.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">cnt&lt;/span>.&lt;span style="color:#a6e22e">WithLabelValues&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;200&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">cnt&lt;/span>.&lt;span style="color:#a6e22e">WithLabelValues&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;500&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">cnt&lt;/span>.&lt;span style="color:#a6e22e">WithLabelValues&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;503&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">reg&lt;/span>.&lt;span style="color:#a6e22e">Register&lt;/span>(&lt;span style="color:#a6e22e">cnt&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">are&lt;/span>, &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span>.(&lt;span style="color:#a6e22e">prometheus&lt;/span>.&lt;span style="color:#a6e22e">AlreadyRegisteredError&lt;/span>); &lt;span style="color:#a6e22e">ok&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">cnt&lt;/span> = &lt;span style="color:#a6e22e">are&lt;/span>.&lt;span style="color:#a6e22e">ExistingCollector&lt;/span>.(&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">prometheus&lt;/span>.&lt;span style="color:#a6e22e">CounterVec&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> panic(&lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">gge&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">prometheus&lt;/span>.&lt;span style="color:#a6e22e">NewGauge&lt;/span>(&lt;span style="color:#a6e22e">prometheus&lt;/span>.&lt;span style="color:#a6e22e">GaugeOpts&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;promhttp_metric_handler_requests_in_flight&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Help&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Current number of scrapes being served.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">reg&lt;/span>.&lt;span style="color:#a6e22e">Register&lt;/span>(&lt;span style="color:#a6e22e">gge&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">are&lt;/span>, &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span>.(&lt;span style="color:#a6e22e">prometheus&lt;/span>.&lt;span style="color:#a6e22e">AlreadyRegisteredError&lt;/span>); &lt;span style="color:#a6e22e">ok&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">gge&lt;/span> = &lt;span style="color:#a6e22e">are&lt;/span>.&lt;span style="color:#a6e22e">ExistingCollector&lt;/span>.(&lt;span style="color:#a6e22e">prometheus&lt;/span>.&lt;span style="color:#a6e22e">Gauge&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> panic(&lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">InstrumentHandlerCounter&lt;/span>(&lt;span style="color:#a6e22e">cnt&lt;/span>, &lt;span style="color:#a6e22e">InstrumentHandlerInFlight&lt;/span>(&lt;span style="color:#a6e22e">gge&lt;/span>, &lt;span style="color:#a6e22e">handler&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>registry.MustRegister(metrics)
&lt;/code>&lt;/pre>
&lt;p>1
Plain Text&lt;/p>
&lt;p>这个 Collector 接口又代表什么意思呢&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/ig8l2r/1616068562616-5c10af60-c810-4622-bc0f-35d331cbd2b0.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/ig8l2r/1616068562665-009ae48a-3f65-48d1-b08f-49d7ae2089ca.png" alt="">&lt;/p>
&lt;h1 id="添加新的-gatherer采集器">添加新的 Gatherer(采集器)&lt;/h1></description></item><item><title>Docs: Exporter 开发问题</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/prometheus/prometheus-%E5%BC%80%E5%8F%91/%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86%E6%A1%88%E4%BE%8B/exporter-%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/prometheus/prometheus-%E5%BC%80%E5%8F%91/%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86%E6%A1%88%E4%BE%8B/exporter-%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98/</guid><description>
&lt;h1 id="collected-before-with-the-same-name-and-label-values">collected before with the same name and label values&lt;/h1>
&lt;p>time=&amp;ldquo;2021-03-25 12:17:30&amp;rdquo; level=info msg=&amp;ldquo;error gathering metrics: 3 error(s) occurred:\n*&lt;/p>
&lt;p>collected metric &amp;ldquo;consoler_gdas_node_changer_status&amp;rdquo; { label:&amp;lt;name:&amp;ldquo;changer_serial&amp;rdquo; value:&amp;ldquo;Mcc01327   A&amp;rdquo; &amp;gt; label:&amp;lt;name:&amp;ldquo;ip&amp;rdquo; value:&amp;ldquo;192.168.10.139&amp;rdquo; &amp;gt; label:&amp;lt;name:&amp;ldquo;name&amp;rdquo; value:&amp;ldquo;DA-BH7&amp;rdquo; &amp;gt; gauge:&amp;lt;value:0 &amp;gt; } was collected before with the same name and label values\n*&lt;/p>
&lt;p>collected metric &amp;ldquo;consoler_gdas_node_drive_status&amp;rdquo; { label:&amp;lt;name:&amp;ldquo;drive_serial&amp;rdquo; value:&amp;ldquo;Mcc01327   B&amp;rdquo; &amp;gt; label:&amp;lt;name:&amp;ldquo;ip&amp;rdquo; value:&amp;ldquo;192.168.10.139&amp;rdquo; &amp;gt; label:&amp;lt;name:&amp;ldquo;name&amp;rdquo; value:&amp;ldquo;DA-BH7&amp;rdquo; &amp;gt; gauge:&amp;lt;value:0 &amp;gt; } was collected before with the same name and label values\n*&lt;/p>
&lt;p>collected metric &amp;ldquo;consoler_gdas_node_drive_status&amp;rdquo; { label:&amp;lt;name:&amp;ldquo;drive_serial&amp;rdquo; value:&amp;ldquo;Mcc01327   C&amp;rdquo; &amp;gt; label:&amp;lt;name:&amp;ldquo;ip&amp;rdquo; value:&amp;ldquo;192.168.10.139&amp;rdquo; &amp;gt; label:&amp;lt;name:&amp;ldquo;name&amp;rdquo; value:&amp;ldquo;DA-BH7&amp;rdquo; &amp;gt; gauge:&amp;lt;value:1 &amp;gt; } was collected before with the same name and label values&amp;rdquo;&lt;/p></description></item><item><title>Docs: Federate(集群联邦)</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/prometheus/federate%E9%9B%86%E7%BE%A4%E8%81%94%E9%82%A6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/prometheus/federate%E9%9B%86%E7%BE%A4%E8%81%94%E9%82%A6/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://prometheus.io/docs/prometheus/latest/federation/">官方文档，Prometheus-联邦&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>通过 Remote Storage 可以分离监控样本采集和数据存储，解决 Prometheus 的持久化问题。这一部分会重点讨论如何利用联邦集群特性对 Promthues 进行扩展，以适应不同监控规模的变化。&lt;/p>
&lt;p>Prometheus Federate 还可以充当代理功能，让 Prometheus Server 获取无法直接访问网段的 Metrics&lt;/p>
&lt;h1 id="使用联邦集群">使用联邦集群&lt;/h1>
&lt;p>对于大部分监控规模而言，我们只需要在每一个数据中心(例如：EC2 可用区，Kubernetes 集群)安装一个 Prometheus Server 实例，就可以在各个数据中心处理上千规模的集群。同时将 Prometheus Server 部署到不同的数据中心可以避免网络配置的复杂性。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gx0oz1/1616069518476-78bbd4f5-fc64-4a96-bde6-2309bd716812.jpeg" alt="">
如上图所示，在每个数据中心部署单独的 Prometheus Server，用于采集当前数据中心监控数据。并由一个中心的 Prometheus Server 负责聚合多个数据中心的监控数据。这一特性在 Promthues 中称为联邦集群。&lt;/p>
&lt;p>联邦集群的核心在于每一个 Prometheus Server 都包含额一个用于获取当前实例中监控样本的接口/federate(用于 web 打开 localhost:9090/federate 即可，初始是空白的，需要详细指明要匹配的内容，才可以获取 metrics)。对于中心 Prometheus Server 而言，无论是从其他的 Prometheus 实例还是 Exporter 实例中获取数据实际上并没有任何差异。其实其他的 promeheus 就相当于中心 prometheus 的一个 exporter&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">scrape_configs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">job_name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;federate&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">scrape_interval&lt;/span>: &lt;span style="color:#ae81ff">15s&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">honor_labels&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">metrics_path&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/federate&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">params&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;match[]&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e6db74">&amp;#39;up{job=~&amp;#34;external.*&amp;#34;}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">static_configs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">targets&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e6db74">&amp;#34;192.168.77.11:9090&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e6db74">&amp;#34;192.168.77.12:9090&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>配置说明：&lt;/p>
&lt;ol>
&lt;li>通过 URL 中的 match[]参数指定我们可以指定需要获取的时间序列。match[]参数必须是一个瞬时向量选择器，例如 up 或者{job=&amp;ldquo;api-server&amp;rdquo;}。配置多个 match[]参数，用于获取多组时间序列的监控数据。该例中表示 job 名字开头是 external 的 metric 都抓取
&lt;ol>
&lt;li>如果只指定指标名，则获取当前 prom 中该指标名的所有样本；如果只指定标签，则获取所有符合该标签的样本。&lt;/li>
&lt;li>事例中 up{job=~&amp;ldquo;external.&lt;em>&amp;rdquo;} 表示获取 up 指标中，标签符合正则 external.&lt;/em> 的所有样本&lt;/li>
&lt;li>注意，可以使用 &amp;lsquo;{job=~&amp;quot;..*&amp;quot;}&amp;rsquo; 来匹配所有 job 的 metric，但是官方不建议这么用，防止意外情况发生&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>horbor_labels 配置 true 可以确保当采集到的监控指标冲突时，能够自动忽略冲突的监控数据。如果为 false 时，prometheus 会自动将冲突的标签替换为”exported_“的形式。&lt;/li>
&lt;li>targets 的目标选择要抓取的另一个 prometheus 运行时所监听的 IP:PORT&lt;/li>
&lt;/ol>
&lt;p>可以在 web 上进行 match 语句的测试，例如下面，如果获取到的数据和自己预期的一样，那么该配置就没问题&lt;/p>
&lt;ol>
&lt;li>&lt;a href="http://172.38.40.214:30001/federate?match%5B%5D=up%7Bjob%253D~%22external.*%22%7D">http://172.38.40.214:30001/federate?match[]=up{job%3D~&amp;ldquo;external.*&amp;rdquo;}&lt;/a>
&lt;ol>
&lt;li>使用 curl 命令：
&lt;ol>
&lt;li>curl &amp;lsquo;http://172.38.40.214:30001/federate?match[]=up{job%3D~&amp;ldquo;external.*&amp;rdquo;}&amp;rsquo;&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>url 中的规则为
&lt;ol>
&lt;li>{job=~&amp;ldquo;prometheus&amp;rdquo;}&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>功能分区
联邦集群的特性可以帮助用户根据不同的监控规模对 Promthues 部署架构进行调整。例如如下所示，可以在各个数据中心中部署多个 Prometheus Server 实例。每一个 Prometheus Server 实例只负责采集当前数据中心中的一部分任务(Job)，例如可以将不同的监控任务分离到不同的 Prometheus 实例当中，再有中心 Prometheus 实例进行聚合。&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gx0oz1/1616069518457-5ea7fc2c-1edc-4ce8-acc4-b5bd7534e556.jpeg" alt="">
功能分区，即通过联邦集群的特性在任务级别对 Prometheus 采集任务进行划分，以支持规模的扩展。&lt;/p></description></item><item><title>Docs: Flame Graphs(火焰图)</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/flame-graphs%E7%81%AB%E7%84%B0%E5%9B%BE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/flame-graphs%E7%81%AB%E7%84%B0%E5%9B%BE/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/brendangregg/FlameGraph">GitHub 项目，brendangregg/FlameGraph&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.brendangregg.com/flamegraphs.html">官方文档&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://queue.acm.org/detail.cfm?id=2927301">论文&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;a href="https://www.ruanyifeng.com/blog/2017/09/flame-graph.html">https://www.ruanyifeng.com/blog/2017/09/flame-graph.html&lt;/a>
&lt;a href="https://zhuanlan.zhihu.com/p/73385693">https://zhuanlan.zhihu.com/p/73385693&lt;/a>&lt;/p>
&lt;h1 id="前言">前言&lt;/h1>
&lt;p>在没有读《性能之巅》这本书之前，就听说过火焰图。当时学习同事用 go 写的项目代码，发现里边有个文件夹叫火焰图，觉得名字很好玩，就百度了一下，惊叹还有这种操作。不过当时并没有听过 Brendan Gregg 的大名，因为懒也没有深入学习。这次找到了 Brendan Gregg 的 blog，也了解了一点动态追踪技术的知识，决心要好好学习一下。
于是就找到了一切开始的地方： Brendan Gregg 写的论文《&lt;a href="https://link.zhihu.com/?target=https%3A//queue.acm.org/detail.cfm%3Fid%3D2927301">The Flame Graph&lt;/a> 》
作为一个英语菜鸡，从来都没有读过英文论文。正好借这次机会尝试一下，看能不能点个新的技能点。结果尝试才发现，真的好难～～刚开始，读一小段就开始犯困。于是坚持每天强迫自己从头开始重读一遍。花了差不多一周时间，总算能集中注意力的读完。
然后我就想，老是吐槽各种汉化的国外优秀的技术书籍生涩难懂，何不亲自试一试呢？于是就有了今天的这篇学习笔记。&lt;/p>
&lt;h1 id="火焰图">火焰图&lt;/h1>
&lt;h2 id="让软件执行情况可视化是性能分析调试的利器">让软件执行情况可视化，是性能分析、调试的利器&lt;/h2>
&lt;p>Brendan Gregg, Netflix
日常工作中，我们需要理解软件对系统资源的使用情况。比如对于 cpu，我们想知道当前软件究竟使用了多少 cpu？软件更新以后又变化了多少？剖析器(profilers)可以用来分析这样的问题，帮助软件开发者优化代码，指导软件使用者调优运行环境。但是 profile 通常都很长，太长的输出分析和理解起来都很不方便。火焰图作为一种新的 profile 可视化方式，可以让我们更直观，更方便的理解、分析问题。
在像“Netflix 云微服务架构”这种软件升级迭代迅速的环境中，快速理解 profiles 尤为重要。同时，对 profile 的快速的理解也有助于我们更好的研究其他人编写的软件。
火焰图可以用多种 profilers（包括资源和系统事件）的输出生成，本文以 cpu 为例，介绍了火焰图的用法以及其可以解决的各种实际问题。&lt;/p>
&lt;h3 id="profile-的理解">profile 的理解&lt;/h3>
&lt;p>profile 有 剖面、剖面图 的含义，对于医学角度来说，如果不解剖看剖面图，也就无法看到一个生物内部的运行情况。同理，在性能分析领域，想要理解一个程序，也需要解剖它，看看它的剖面图。所以，&lt;strong>profile 就可以理解为一个应用程序的 剖面图&lt;/strong>。只有看到剖面图，才能深入程序内部一探究竟~~~&lt;/p>
&lt;h2 id="cpu-profiling">CPU Profiling&lt;/h2>
&lt;p>CPU 分析的一种常用技术是，使用像 Linux perf_events 和 DTrace 之类系统追踪工具的对 stack traces 进行采样。stack trace 显示了代码的调用关系，比如下面的 stack trace ,每个方法作为一行并按照父子关系从下到上排序。&lt;/p>
&lt;pre>&lt;code>SpinPause
StealTask::do_it
GCTaskThread::run
java_start
start_thread
&lt;/code>&lt;/pre>
&lt;p>综合考虑采样成本、输出大小、应用环境，CPU profile 有可能是这样收集：对所有的 cpu，对 stack traces 以每秒 99 次的速度，连续采样 30 秒（使用 99 而不是 100，是为了防止采样周期与某些系统周期事件重合，影响采样结果）。对于一个 16 核的机器来说，输出结果可能会有 47520 个堆栈采样。可能会输出成千上万行文本。（ps:原文是 not 100, to avoid lock-step sampling 理解不了，所以按照书中的描述写的）
有些 profile 可以压缩输出，比如 DTrace，可以把相同的 stack traces 汇总到一起，只输出次数。这个优化还是蛮有用的，比如长时间的 for 循环，或者系统 idle 状态的 stack traces，都会被简化成一个。
Linux perf_events 还可以进一步压缩输出，通过合并相同的 substack，使用树形结构汇总输出。对于树的每个分枝，都可以统计 count 或百分比。如图一所示：
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/hxnw7s/1619535684402-a78901d6-3770-4ff9-90d9-3089acd9510c.jpeg" alt="">
实际上，perf_events 和 DTrace 的输出，在很多情况下，足够分析问题使用了。但是也有时候，面对超长的输出，就像面对一堵写满字的高墙，分析其中某个堆栈就好比盲人摸象、管中窥豹。&lt;/p>
&lt;h3 id="the-problem">The Problem&lt;/h3>
&lt;p>为了分析“the Joyent public cloud”的性能问题，我们发明了火焰图。问题简单描述就是:某台服务器上部署了一个 mysql 服务，该服务的 cpu 使用率比预期的情况高了 40%。
我们使用 DTrace，以 997 Hz 的频率连续采样 stack traces 60 秒，尽管 DTrace 对输出进行了压缩，输出还是有 591622 行，包括 27053 个 stack traces，图二展示了输出结果，屏幕最下方显示的是调用最频繁的方法，说不定是问题的关键。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/hxnw7s/1619535684447-cc99cf85-c6e5-415f-995c-56ed19002211.jpeg" alt="">
最频繁的方法是&lt;code>calc_sum_of_all_status()&lt;/code>,这个方法在执行 mysql 命令&lt;code>show status&lt;/code>时被调用。也许有个客户端在疯狂执行这个命令做监控？
为了证明这个结论，用该方法采样的次数 5530，除以总的采样次数 348427。算出来这个方法只占用了 1.6%,远远不到 40%。看来得继续分析 profile。
如果继续按照调用频度，一个一个分析 stack traces，完全是一项体力劳动。看下图三就知道这是一项多么庞大的工作量。缩放以后，整个 DTrace 输出就像一个毫无特征的灰色图片。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/hxnw7s/1619535684409-cdd3aff2-75f7-47b6-9ed4-08b6df33d4ed.jpeg" alt="">
这简直是不可能完成的任务！那么，有没有更好的方法呢？
为了充分利用 stack traces 层次的特性，我发明了一种可视化原型，如图四所示，展示了跟图三相同的信息。图片之所以选择暖色调，是因为这种原型解释了为什么 cpu 很“hot”，也正是因为暖色调和火焰一样的形状。这种原型被命名为“火焰图”。（可交互的 svg 格式的图 4 可以在&lt;a href="https://link.zhihu.com/?target=http%3A//queue.acm.org/downloads/2016/Gregg4.svg">http://queue.acm.org/downloads/2016/Gregg4.svg&lt;/a> 体验）
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/hxnw7s/1619535684411-236cd7fb-6362-4a8a-a78f-9a0d7256f2f0.jpeg" alt="">
使用火焰图可以很快的找到 profile 的主体部分，图片显示之前找到的 MySQL status 命令，只占 profile 的 3.28%，真正的大头是含有&lt;code>join&lt;/code>的 mysql 语句。顺着这个线索，我们找到了根本问题，解决以后，cpu 使用率下降了 40%。&lt;/p>
&lt;h3 id="flame-graphs-explained">Flame Graphs Explained&lt;/h3>
&lt;p>火焰图用相邻的 diagram 代表一堆 stack traces 。diagram 的形状像是一个倒着的冰锥 &lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/hxnw7s/1619535684456-a7bde9ca-6bbf-459f-8fa6-6ccf8bf48044.svg" alt=""> 。这个冰锥一样的图形通常用来描述 cpu profile。
火焰图有以下特征：
• 一列 box 代表一个 stack trace，每个 box 代表一个 stack frame。
• y 轴显示了栈的深度，按照调用关系从下到上排列。最顶上的 box 代表采样时，on-CPU 的方法。每个 box 下边是该方法的调用者，以此类推。
• x 轴代表了整个采样的范围，注意 x 轴并不代表时间，所有 box 按照方法名称的字母顺序排列，这样的好处是，相同名称的 box，可以合并为一个。
• box 的宽度代表了该方法在采样中出现的频率。该频率与宽度成比例。
• 如果 box 很长，会显示完整的方法名称，如果很短，只会显示省略号或者 nothing。
• box 的颜色是随机选择的暖色调，这样有助于肉眼区分细长的塔状 boxes。当然也有其他配色方案，后面再说。
• profile 有可能是单线程、多线程、多应用甚至是多 host 的，如果需要，可以分解成子图。
• 还有很多其他的采样方式，box 的宽度除了频率以外，还可以表示多种其他的含义。比如 off-cpu 火焰图中，x 轴的宽度代表方法 block 的时间。
使用火焰图，整个 profile 一目了然，可以方便的定位到感兴趣的位置。火焰图成了软件执行情况的导航图。
除了这种可交互的展示方式，火焰图也可以方便的保存为静态图片的格式，方便打印出来。&lt;/p>
&lt;h3 id="interactivity">Interactivity&lt;/h3>
&lt;p>火焰图可以支持交互功能，可以显示更多细节、改进导航和执行计算。
原生的火焰图使用嵌入式 javascript 生成一张可交互的 svg 图片，提供了三种交互特性：鼠标 hover 显示详情、点击缩放和搜索。
&lt;strong>hover 显示详情&lt;/strong>
当鼠标 hove 到 box 上，tooltip 内和图片左下方会显示方法的 full name，该方法的采样数量，以及百分比。格式如下：&lt;/p>
&lt;pre>&lt;code>Function: mysqld'JOIN::exec (272,959 samples, 78.34 percent).
&lt;/code>&lt;/pre>
&lt;p>hover 这项特性有助于用户查看很窄的 box，显示百分比能够帮助用户量化代码路径的资源使用率，指导用户找到代码中急需优化的部分。
&lt;strong>点击缩放&lt;/strong>
当用户点击一个 box 时，火焰图水平缩放，以显示局部的细节信息。该 box 下方的父 box 颜色变淡，表示只有部分被展示。点击 reset zoom 可以回到全局视图。
&lt;strong>搜索&lt;/strong>
点击 search 或者按 ctrl+f 来使用搜索功能。搜索功能支持正则表达式，所有命中的 box 会被高亮并被显示为紫色。同时，图片右下角会显示命中方法的总百分比。如图五所示。（可交互的图五可以在这里体验： &lt;a href="https://link.zhihu.com/?target=http%3A//queue.acm.org/downloads/2016/Gregg5.svg">http://queue.acm.org/downloads/2016/Gregg5.svg&lt;/a>.）
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/hxnw7s/1619535684408-74db187a-b473-40ed-9232-ca926f24b102.jpeg" alt="">
搜索不仅可以方便定位方法，还可以高亮逻辑上相关的一组方法。比如输入&amp;quot;^ext4_&amp;ldquo;显示所有跟 linux ext4 文件系统相关的方法。
有时候，多个代码路径都以相同的热点函数（比如自旋锁）结束，如果这些方法分布在图片 20 多个位置上，汇总他们的百分比就很麻烦。搜索功能可以解决这个问题。&lt;/p>
&lt;h3 id="instructions">Instructions&lt;/h3>
&lt;p>火焰图有很多实现，原生的火焰图使用 Perl 编写，并且开放源码。包括采样在内，生成一张火焰图总共分三步：&lt;/p>
&lt;ol>
&lt;li>用户采样 stack traces (比如使用 Linux perf_events、DTrace 或者 Xperf)。&lt;/li>
&lt;li>将采样输出压缩为指定格式。我们已经编写了很多 perl 脚本处理各种 profiler 的输出。在项目中以&amp;quot;stackcollapse&amp;quot;前缀命名。&lt;/li>
&lt;li>使用 flamegraph.pl 生成火焰图. 该脚本使用 javascript 解析前边步骤的输出生成最终输出。&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>指定压缩格式&lt;/strong>指的是：把一个 stack traces 展示为一行，栈帧之间使用分号间隔，并在末尾的空格之后显示采样数量。应用名称，进程 id 之类的信息，可以用“.”分隔以后， 补充在 stack traces 之前。增加这些信息以后，生成的火焰图中，会按照这些前缀进行分组。
比如说，假如 profile 包含下面三个 stack traces:&lt;/p>
&lt;pre>&lt;code>func_c func_b func_a start_thread
func_d func_a start_thread
func_d func_a start_thread
&lt;/code>&lt;/pre>
&lt;p>压缩为指定格式以后，是这个样子的:&lt;/p>
&lt;pre>&lt;code>start_thread;func_a;func_b;func_c 1
start_thread;func_a;func_d 2
&lt;/code>&lt;/pre>
&lt;p>如果把应用名称（比如：java）也加在里面，则是：&lt;/p>
&lt;pre>&lt;code>java;start_thread;func_a;func_b;func_c 1
java;start_thread;func_a;func_d 2
&lt;/code>&lt;/pre>
&lt;p>设计这种中间格式的好处是，如果出现了新的 profiler，只需要编写转换器就可以使用火焰图。目前已经有 DTrace、perf_events、FreeBSD pmcstat, Xperf, SystemTap, Xcode Instruments, Intel VTune, Lightweight Java Profiler, Java jstack, and gdb 这么多可用的转换器。
flamegraph.pl 支持一些用户选项，比如说更改火焰图的 title。
下面是从采样（使用 perf ）到生成图片的一个具体的例子:&lt;/p>
&lt;pre>&lt;code># git clone https://github.com/brendangregg/FlameGraph
# cd FlameGraph
# perf record -F 99 -a -g -- sleep 60
# perf script | ./stackcollapse-perf.pl | ./flamegraph.pl &amp;gt; out.svg
&lt;/code>&lt;/pre>
&lt;p>因为中间格式每个记录一行，在生成火焰图之前可以使用 grep/sed/awk 进行修改。使用其他 profiler 的教程参见&lt;a href="https://link.zhihu.com/?target=https%3A//github.com/brendangregg/FlameGraph">官方文档&lt;/a>。&lt;/p>
&lt;h3 id="flame-graph-interpretation">Flame Graph Interpretation&lt;/h3>
&lt;p>如何分析生成的火焰图:
• 火焰图顶部显示了采样过程中 on CPU 的方法。对 CPU profiles，这些方法直接占用 cpu 资源。对于其他的 profile，这些方法导致了相关的内核事件。
• 在火焰图顶部寻找“高原”状的方法，位于顶部的某个很宽的方法，表示其在采样中大量出现。对于 CPU profiles，这意味着这个方法经常在 CPU 上运行。
• 自顶向下看显示了调用关系，上边的方法被其下方的方法调用，以此类推。快速的从上往下浏览可以理解某个方法为什么被调用。
• 自底向上看显示了代码逻辑，提供了程序的全局视图。底部的方法会调用其顶部的多个方法，以此类推。自底向上看可以看到代码的分支形成的多个小型的“塔尖”。
• box 的宽度可以用来比较，更宽的 box 意味着在采样结果中更多的比例。
• 对于 cpu profiles 来说，如果 a 方法比 b 方法宽，有可能是因为 a 方法本身执行需要使用比 b 方法更多的 cpu。也有可能是 a 方法被调用的次数比 b 方法更频繁。采样的最终结果并不能体现一个方法被调用多少次，所以这两种情况都有可能。
• 如果一个方法顶部出现了两个“大塔尖”，导致火焰图中出现一个“大分叉”，这样的方法很值得研究。两个“塔尖”可能是被调用的两个子方法，也可能是条件语句的两个不同分支。&lt;/p>
&lt;h3 id="interpretation-example">Interpretation Example&lt;/h3>
&lt;p>为了更直观的让大家理解火焰图的含义，下面以图六作为例子。这是使用 cpu profile 生成的一张火焰图。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/hxnw7s/1619535684422-6c4e4abe-767b-4f3c-b725-b0380038f19a.jpg" alt="">
图片顶部显示说明&lt;code>g()&lt;/code>使用 cpu 最频繁；虽然&lt;code>d()&lt;/code>很宽，但是该方法直接使用 cpu 最少。&lt;code>b()&lt;/code>和&lt;code>c()&lt;/code>并不直接使用 cpu 资源，而他们的子方法使用。
&lt;code>g()&lt;/code>底部的方法显示了调用关系：&lt;code>g() &lt;/code>被&lt;code> f()&lt;/code>调用,&lt;code>f()&lt;/code>被 &lt;code>d()&lt;/code>调用,以此类推。
对比&lt;code>b()&lt;/code> 和&lt;code> h()&lt;/code>的宽度可以发现，&lt;code>b()&lt;/code>对 cpu 的使用率是&lt;code>h()&lt;/code>的 4 倍。真正在 cpu 上执行的是他们的子方法。
该图的主分支是&lt;code>a()&lt;/code> 调用了 &lt;code>b()&lt;/code> 和 &lt;code>h()&lt;/code>,原因有可能是&lt;code>a()&lt;/code>中存在条件分支（比如一个 if 语句，如果为 true 执行&lt;code>b()&lt;/code>,反之执行&lt;code>h()&lt;/code>）,也有可能&lt;code>a()&lt;/code>分成了两个步骤&lt;code>b() &lt;/code>和&lt;code> h()&lt;/code>。&lt;/p>
&lt;h3 id="other-code-path-visualizations">Other Code-Path Visualizations&lt;/h3>
&lt;p>正如图一所示，&lt;strong>Linux perf_events&lt;/strong> 使用树形结构展示 cpu 使用率，这是另一种层级可视化方式。与火焰图相比，该方法并不能提供直观的全局视图。
&lt;strong>KCacheGrind&lt;/strong> 使用有向无环图实现可视化，使用宽度自适应的 box 表示方法，使用箭头表示调用关系，box 和箭头上都标注了百分比。与 Linux perf_events 一样，图片缩小以后，也很难提供全局信息。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/hxnw7s/1619535684440-0ff268f5-3021-473d-aeaf-6fa1d4b5c051.jpeg" alt="">
&lt;strong>sunburst&lt;/strong>布局跟火焰图的冰锥布局很像。不同的是 sunburst 使用了极坐标。sunburst 生成的图形很漂亮，但是却并不利于理解。与角度大小相比，人们更容易区分宽度。所以在直观性上火焰图更胜一筹 &lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/hxnw7s/1619535684460-0fa7cc81-0b41-49df-9df3-c52c3dc2c7a9.svg" alt=""> 。
**Flame charts **灵感来源于火焰图，是跟火焰图相似的可视化方式。区别是，x 轴并不是按照字母表的顺序排列，而是按照时间百分比排序。这样做的优势是：很容易发现时间相关的问题。但同时，缺点也很明显，这种排序减少了方法的合并，当分析多个线程时，劣势更加明显。Flame charts 跟火焰图一起使用应该会更有用。&lt;/p>
&lt;h3 id="challenges">Challenges&lt;/h3>
&lt;p>火焰图面临的挑战，更多是来自于 profilers，而不是火焰图本身。profilers 会面对两类典型的问题：
• &lt;strong>Stack traces 不完整&lt;/strong>。
有些 profiler 只提供固定深度（比如 10）的采样，这种不完整的输出不利于分析，如果增大深度，这些 profiler 会直接失败。更糟糕的问题是有些编译器会使用“&lt;strong>重用帧指针寄存器&lt;/strong>（frame pointer register）”这样的编译优化，破坏了标准 Stack traces 采样流程。解决方式是关闭这种编译器优化（比如 gcc 使用参数 &lt;code>-fno-omit-frame-pointer&lt;/code>）或者使用另一种采样技术。
• &lt;strong>方法名称丢失&lt;/strong>。
有些 profilers，堆栈信息是完整的，但是方法名称却丢失了，显示为十六进制地址。使用了&lt;strong>JIT&lt;/strong> (just-in-time) 技术编译的代码经常有这个问题。因为 JIT 并不会为 profiler 创建符号表。对于不同的 profiler 和 runtime，这个问题有不同的解决方式，比如 Linux perf_events 允许应程序提供一个额外的符号表文件，用于产生采样结果。
我们在 Netflix 的工作过程中，曾经尝试为 Java 生成火焰图，结果两个问题都遇到了 &lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/hxnw7s/1619535684464-4d4fe494-900b-49a2-8435-567c5510f0f0.svg" alt=""> 。第一个问题通过一个新的 jvm 参数：&lt;code>—XX:+PreserveFramePointer&lt;/code>解决了。该参数禁用了编译器优化。第二个问题由 perf-map-agent 解决，这个 Java agent 可以为 profiler 生成符号表。
火焰图面临的另一个挑战是生成 SVG 文件的大小。一个超大的 profile 有可能会有成千上万的 code paths，最终生成的 svg 可能有几十 mb,浏览器加载要花费比较长的时间。解决方式是忽略掉在途中细到肉眼难以观察的方法，忽略这些方法不会影响全局视图，同时能缩小输出。&lt;/p>
&lt;h3 id="other-color-schemes">Other Color Schemes&lt;/h3>
&lt;p>除了使用随机的暖色调外，火焰图支持其他配色方案，比如使用颜色区分代码或者数据维度。
Perl 版本的火焰图支持很多配色选项，其中一个选项是&lt;strong>java&lt;/strong>。该选项通过不同颜色区分模块，规则如下：绿色代表 Java，黄色为 C++，红色用于所有其他用户代码，橙色用于内核模块。见图七（可交互的 svg 格式的图 7 可以在&lt;a href="https://link.zhihu.com/?target=http%3A//queue.acm.org/downloads/2016/Gregg7.svg">http://queue.acm.org/downloads/2016/Gregg7.svg&lt;/a> 体验）。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/hxnw7s/1619535684510-3f8c57a8-1f07-4361-936b-1539013e1dfb.jpeg" alt="">
另一个可用的选项是&lt;strong>hash&lt;/strong>，该选项根据函数名的 hash 选择颜色，这个选项在比较多张火焰图的时候非常有用，因为在不同的图片上，相同的方法会用相同的颜色表示。
颜色选项对于“差分火焰图”也很重要，“差分火焰图”将在下一节中介绍。&lt;/p>
&lt;h3 id="differential-flame-graphs">Differential Flame Graphs&lt;/h3>
&lt;p>差分火焰图显示了两个 profile 的区别。比如现在有两个 profile A 和 B，Perl 版本的火焰图支持这样的操作：以 A 为基准，使用 B 与 A 的差值生成一张火焰图。在差分火焰图上，红色代表差值为正数，蓝色代表差值为负数。这种差分图的问题是，如果 A 中的某个方法，在 B 中完全没有被调用，差分图就会把这种方法丢弃。丢失的数据会误导用户。
一种改进的方法是&lt;code>flamegraphdiff&lt;/code>，使用三张图解决这个问题。第一张是 A,第二张是 B，第三张是前边提到的差分图。当鼠标 hover 到任意一个方法时，三张图上该方法都会高亮显示。同时 flamegraphdiff 也支持红/蓝的配色方案说明百分比的增减。&lt;/p>
&lt;h3 id="other-targets">Other Targets&lt;/h3>
&lt;p>前边提到，火焰图可以可视化多种 profiler 的输出。profiler 有以下几种：CPU PMC (performance monitoring counter) 溢出事件, 静态追踪（static tracing） 事件, 动态追踪（dynamic tracing） 事件。下面是一些其他 profiler 的例子.
&lt;strong>Stall Cycles&lt;/strong>
tall-cycle 火焰图显示被处理器或硬件资源（通常是内存 I/O）block 的代码路径。stack trace 使用 PMC profiler, 比如 Linux perf_events 采集，分析这样的火焰图，开发人员可以使用其他策略优化代码，优化的目的是减少内存 I/O，而不是减少指令。
&lt;strong>CPI&lt;/strong>
CPI(cycles per instruction)指令每周期数, 或者其倒数 IPC 可以描述 cpu 的使用情况。cpi 火焰图用宽度表示采样 cpu 周期数，同时用颜色区分每个函数的 cpi：红色表示高 cpi，蓝色表示低 cpi。cpi 火焰图需要两个 profile：CPU 采样 profile 和 指令数量 profile，使用差分火焰图技术生成。
&lt;strong>Memory&lt;/strong>
火焰图可以通过可视化许多不同的内存事件来揭示内存增长。
通过跟踪 malloc() 方法可以生成 malloc 火焰图，用于可视化申请内存的代码路径。这个方案可能很难应用与实践，因为 malloc 函数调用很频繁，使得在某些场景中跟踪它们的成本很高。
通过跟踪 brk()和 mmap()方法可以展示导致虚拟内存中的扩展的代码路径。当然如果异步的申请内存就另当别论了。这些方法调用频率很低，很适合追踪。
跟踪内存缺页异常可以展示导致物理内存中的扩展的代码路径。导致内存缺页的代码路径通常会频繁的申请内存。内存缺页异也是低频事件。
&lt;strong>I/O&lt;/strong>
与 io 相关的问题，比如文件系统，存储设备和网络，通常可以使用 system tracers 方便的追踪。使用这类 profiles 生成的火焰图显示了使用 I/O 的代码路径。
在实践中，io 火焰图可以定位导致 io 的原因。比如一个磁盘 io 可能由以下事件引起：应用程序发起系统调用，文件系统预读，异步的脏数据 flush，或者内核异步的磁盘清理。通过火焰图上的代码路径可以区分以上导致磁盘 io 的事件类型。
&lt;strong>Off-CPU&lt;/strong>
当然，也有许多问题使用上边提到的火焰图是看不见的。分析这些问题需要了解线程被阻塞（而不是 on cpu）的时间。线程阻塞的原因有很多，比如等待 I/O、锁、计时器、打开 CPU 以及等待分页或交换。追踪线程被重新调度时的 stack traces 可以区分这些原因，线程 block 的时间长度可以通过跟踪线程从离开 CPU 到返回 CPU 的时间来测量。系统 profilers 通常使用内核中的静态跟踪点来跟踪这些事件。
通过上边 profile 可以生成 Off-CPU 火焰图用来分析这类问题 &lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/hxnw7s/1619535684469-02f3f063-04fb-4a64-8b07-c845e66b25f8.svg" alt=""> 。
&lt;strong>Wakeups&lt;/strong>
在 Off-CPU 火焰图的应用中发现这样一个问题：当线程阻塞的原因是条件变量时，火焰图很难解答“为什么条件变量被其他线程持有这么长时间”这样的问题。
通过跟踪线程唤醒事件，可以生成 Wakeups 火焰图。该图显示了线程阻塞的原因。Wakeups 火焰图可以与 Off-CPU 火焰图一起研究，以获得关于阻塞线程的更多信息。
&lt;strong>Chain Graphs&lt;/strong>
持有条件变量的线程可能已在另一个条件变量（由另一个线程持有）上被阻塞。实际上，一个线程可能被第二个、第三个甚至第四个线程阻塞。对于这种复杂场景，只分析一个 wakeup 火焰图可能还不够。
chain 火焰图是分析这种复杂场景的一种尝试，chain 火焰图从 off-CPU 火焰图为基础，将 Wakeups 火焰图放到每个 stack traces 顶部。通过自顶向下的分析可以理解阻塞线程的整个条件变量链路。宽度对应线程 block 的时间。
chain 火焰图可以通过组合 Off-CPU 火焰图 U 和 Wakeups 火焰图来实现。这需要大量的采样，目前来看，在实际应用中不太现实。&lt;/p>
&lt;h3 id="future-work">Future Work&lt;/h3>
&lt;p>与火焰图相关的许多工作，都涉及到不同的 profiler 与不同的 runtimes（例如，对于 NoDE.JS、Ruby、Perl、Lua、Erlang、Python、Java、Gangangand，以及 dTrof、PrimeEvices、PMCSTAT、Xperf、仪器）。等等）。将来可能会增加更多种类。
另一个正在开发的差分火焰图，称为白/黑差分，使用前面描述的单火焰图方案加上右侧的一个额外区域，用来显示丢失的代码路径。差分火焰图（任何类型）在未来也会得到更多的应用；在 Netflix，我们正在努力让微服务每晚生成这些图：用来帮助进行性能问题分析。
其他几个火焰图实现正在开发中，探索不同的特性。比如：bla bla bla&amp;hellip;bla bla bla&amp;hellip;&lt;/p>
&lt;h3 id="conclusion">Conclusion&lt;/h3>
&lt;p>火焰图是堆栈跟踪的可视化的高效工具，支持 CPU 以及许多其他 profile。它创建了软件执行情况的可视地图，并允许用户导航到感兴趣的区域。与其他可视化技术相比，火焰图更直观的传递信息，在处理超大 profile 是优势明显。火焰图作为理解 profile 的基本工具，已经成功分析解决了无数的性能问题。&lt;/p>
&lt;h3 id="acknowledgments">Acknowledgments&lt;/h3>
&lt;p>bla bla bla&amp;hellip;bla bla bla&amp;hellip;&lt;/p>
&lt;h3 id="references只列举了感兴趣的">References(只列举了感兴趣的)&lt;/h3>
&lt;p>&amp;hellip;bla bla bla&amp;hellip;bla bla bla&amp;hellip;
6. &lt;a href="https://link.zhihu.com/?target=http%3A//techblog.netflix.com/2015/07/java-in-flames.html">Gregg, B., Spier, M. 2015. Java in flames. The Netflix Tech Blog;&lt;/a>
7. &lt;a href="https://link.zhihu.com/?target=http%3A//queue.acm.org/detail.cfm%3Fid%3D1805128">Heer, J., Bostock, M., Ogievetsky, V. 2010. A tour through the visualization zoo. acmqueue 8(5);&lt;/a>
&amp;hellip;bla bla bla&amp;hellip;bla bla bla&amp;hellip; 10.&lt;a href="https://link.zhihu.com/?target=http%3A//www.creativebloq.com/design/science-behind-data-visualisation-8135496">Odds, G. 2013. The science behind data visualisation. Creative Bloq;&lt;/a>
&amp;hellip;bla bla bla&amp;hellip;bla bla bla&amp;hellip; 15.&lt;a href="https://link.zhihu.com/?target=http%3A//agentzh.org/misc/slides/off-cpu-flame-graphs.pdf">Zhang, Y. 2013. Introduction to off-CPU time flame graphs;&lt;/a>&lt;/p>
&lt;h2 id="结论">结论：&lt;/h2>
&lt;p>现在终于明白为什么很多汉化的技术书籍，读起来比较拗口了。翻译这么短的一篇介绍性文章，都感觉心力憔悴。。。
从最开始的小心翼翼，逐句翻译生怕表达错了含义，结果觉得翻译结果&lt;strong>啰哩啰嗦&lt;/strong>。到后来试图用自己的理解描述，又害怕因为理解错误，词不达意。到最后逐渐佛系，降低心里期望。现在终于明白了译者的辛苦。
在这里正好提一下这个 github 地址：&lt;a href="https://link.zhihu.com/?target=https%3A//github.com/LCTT/TranslateProject">TranslateProject&lt;/a>，之前网上查到的好多帖子都是 LCTT 汉化的，一直都没有注意，这次查资料才发现。后续我也试一试按照他们的规范把这篇文章提个 push 申请啥的。
读完这篇论文，才知道网上很多对火焰图的理解都比较片面。特别是后边 Other Targets 部分，很多内容很有意思，网上查找“火焰图”关键词搜到的文章都没有提及。通过这次经历，也终于理解了之前一位前辈说&lt;strong>要多看 paper&lt;/strong>，不要老是在网上看几篇帖子就以为自己理解了。果然还是一手的信息靠谱。
整片文章我最感兴趣的，就是&lt;strong>Challenge&lt;/strong>里边提到的，作者在给 java 生成火焰图的时候，遇到的两个问题。当时读的时候，一直不理解帧指针寄存器（frame pointer register）是个啥东西。还好这段有 References &lt;a href="https://link.zhihu.com/?target=http%3A//techblog.netflix.com/2015/07/java-in-flames.html.">java-in-flames&lt;/a>。根据指导我详细学习了一下如何使用本文提到的技术，生成 java 的火焰图。后续会整理一个“《性能之巅》学习笔记之火焰图 其之二”介绍一下。总之也是挺有趣的。&lt;em>当然，bcc 是什么鬼？我不知道啊，听都没听过[#doge#]～～&lt;/em>
之前一直很奇怪，为什么论文必须要有 References，现在有点理解了。
这个技能点到底有没有点上，其实心里还是没什么底，希望能够坚持下去，虽然阅读英文的资料耗费心力，但是收获真的很大。就像长跑者思维：因为今天下雨了，所以才要去跑步。因为很困难，所以干就完了！&lt;/p></description></item><item><title>Docs: Grafana</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/grafana/grafana/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/grafana/grafana/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://grafana.com/">官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/grafana/grafana">GitHub 项目，grafana/grafana&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Grafana 是开源的可视化和分析软件。它使我们可以查询，可视化，警报和浏览指标，无论它们存储在哪里。用简单的英语，它为您提供了将时间序列数据库（TSDB）数据转换为精美的图形和可视化效果的工具。&lt;/p>
&lt;h1 id="grafana-部署">Grafana 部署&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://grafana.com/docs/grafana/latest/setup-grafana/installation/">官方文档，安装-安装 Grafana&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="docker-方式运行-grafana">docker 方式运行 grafana&lt;/h2>
&lt;p>获取配置文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>mkdir -p /opt/monitoring/server/config/grafana
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mkdir -p /opt/monitoring/server/data/grafana
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>chown -R &lt;span style="color:#ae81ff">472&lt;/span> /opt/monitoring/server/data/grafana
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker run -d --name grafana --rm grafana/grafana
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker cp grafana:/etc/grafana /opt/monitoring/server/config
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker stop grafana
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行 Grafana&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>docker run -d --name grafana &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --network host &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -v /opt/monitoring/server/config/grafana:/etc/grafana &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -v /opt/monitoring/server/data/grafana:/var/lib/grafana &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -v /etc/localtime:/etc/localtime &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> grafana/grafana
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="grafana-关联文件">Grafana 关联文件&lt;/h1>
&lt;p>**/etc/grafana/* **# grafana 配置文件保存路径&lt;/p>
&lt;ul>
&lt;li>&lt;strong>./grafana.ini&lt;/strong> # grafana 运行所需配置文件&lt;/li>
&lt;li>&lt;strong>./provisioning/*&lt;/strong> # Grafana 的 Provisioning 功能要读取的路径。该功能详见 &lt;a href="https://www.yuque.com/go/doc/33145852">Provisioning 配置&lt;/a>
&lt;ul>
&lt;li>&lt;strong>./dashboards/*.yaml&lt;/strong> # Grafana 启动时，会根据该路径下配置文件内的 .providers.options.path 字段的路径配置，去对应路径加载 grafana 的 dashboard 的 json 文件。&lt;/li>
&lt;li>&lt;strong>./datasources/*.yaml&lt;/strong> # Grafana 启动时，会根据该路径下配置文件，自动加载数据源信息。&lt;/li>
&lt;li>&lt;strong>./notifiers/*.yaml&lt;/strong> # Grafana 启动时，加载的告警配置文件。&lt;/li>
&lt;li>&lt;strong>./plugins/*.yaml&lt;/strong> # Grafana 启动时，加载的插件的配置文件。用来管理 Grafana 插件&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>/var/lib/grafana/*&lt;/strong> # grafana 数据保存路径&lt;/p>
&lt;ul>
&lt;li>&lt;strong>./grafana.db&lt;/strong> # grafana 数据文件，包括 用户信息、dashboard、datasource 等等。这是一个 SQLite3 数据库文件。&lt;/li>
&lt;li>&lt;strong>./plugins/*&lt;/strong> # grafana 安装的插件保存在该目录下&lt;/li>
&lt;/ul></description></item><item><title>Docs: Grafana 8.0 告警使用</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/grafana/grafana-8.0-%E5%91%8A%E8%AD%A6%E4%BD%BF%E7%94%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/grafana/grafana-8.0-%E5%91%8A%E8%AD%A6%E4%BD%BF%E7%94%A8/</guid><description>
&lt;p>&lt;a href="https://mp.weixin.qq.com/s/1aJOqhGOXaOas2lPUcP2-g">Grafana 8.0 告警使用&lt;/a>&lt;/p>
&lt;p>Grafana 除了支持丰富的数据源和图表功能之外，还支持告警功能，该功能也使得 Grafana 从一个数据可视化工具成为了一个真正的监控利器。Grafana 可以通过 Alerting 模块的配置把监控数据中的异常信息进行告警，告警的规则可以直接基于现有的数据图表进行配置，在告警的时候也会把出现异常的图表进行通知，使得我们的告警通知更加友好。&lt;/p>
&lt;h2 id="渠道">渠道&lt;/h2>
&lt;p>Grafana Alerting 支持多种告警渠道，比如钉钉、Discord、Email、Kafka、Pushover、Telegram、Webhook 等等，我们这里可以使用钉钉和 Email 进行展示说明。&lt;/p>
&lt;h3 id="email">Email&lt;/h3>
&lt;p>邮箱告警通常是最常见的告警接收方式，通过 Grafana 告警需要在 Grafana 的配置文件中配置 stmp 服务。在配置文件 &lt;code>/etc/grafana/grafana.ini&lt;/code> 文件中添加 &lt;code>SMTP/Emailing&lt;/code> 配置块并开启 &lt;code>Alerting&lt;/code>：&lt;/p>
&lt;p>`#################################### SMTP / Emailing ##########################
[smtp]
enabled = true
host = smtp.163.com:465  # 我们这里使用 163 的邮箱
user = &lt;a href="mailto:xxx@163.com">xxx@163.com&lt;/a>
password =   # 使用网易邮箱的授权码
skip_verify = true
from_address = &lt;a href="mailto:xxx@163.com">xxx@163.com&lt;/a>&lt;/p>
&lt;p>#################################### Alerting ############################
[alerting]
enabled = true
execute_alerts = true&lt;/p>
&lt;p>`&lt;/p>
&lt;p>需要注意的是这里我们使用的是 163 的邮箱进行发送，在配置 &lt;code>smtp&lt;/code> 的时候需要在邮箱中开启 &lt;code>IMAP/SMTP&lt;/code> 和 &lt;code>POP3/SMTP&lt;/code> 两个服务，并添加一个授权码，上面的 password 密码使用的就是授权码进行认证：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/68cbb85c-974c-43b2-91df-cfb650f286aa/640" alt="">&lt;/p>
&lt;p>配置完成后重新启动 Grafana：&lt;/p>
&lt;p>&lt;code>☸ ➜ systemctl daemon-reload ☸ ➜ systemctl restart grafana-server&lt;/code>&lt;/p>
&lt;p>回到 Grafana 页面中点击左侧的 &lt;code>Notification channels&lt;/code> 开始添加消息通知渠道：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/68cbb85c-974c-43b2-91df-cfb650f286aa/640" alt="">&lt;/p>
&lt;p>点击 &lt;code>Add channel&lt;/code> 按钮新建一个通知渠道，这里我们选择渠道类型为 &lt;code>Email&lt;/code>，添加接收通知的邮件地址，此外还可以对通知进行简单的配置：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/68cbb85c-974c-43b2-91df-cfb650f286aa/640" alt="">&lt;/p>
&lt;p>点击下方的 &lt;code>Test&lt;/code> 按钮可以测试是否可以正常发送邮件，如果出现 &lt;code>Test notification sent&lt;/code> 的提示证明发送成功，正常也可以收到一封如下所示的告警通知邮件：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/68cbb85c-974c-43b2-91df-cfb650f286aa/640" alt="">&lt;/p>
&lt;p>测试成功后点击 &lt;code>Save&lt;/code> 按钮，保存这个通知渠道。&lt;/p>
&lt;h3 id="钉钉">钉钉&lt;/h3>
&lt;p>Grafana 还内置支持了钉钉，所以如果我们想把告警消息接入钉钉群也是非常方便的。创建一个自定义群机器人，需要注意的是现在的钉钉群机器人新增了 3 种安全认证方式，这里我们选择关键字的方式即可，设置关键字 &lt;code>alert&lt;/code> 即可：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/68cbb85c-974c-43b2-91df-cfb650f286aa/640" alt="">&lt;/p>
&lt;p>创建后会生成一个 Webhook 的地址，复制该地址：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/68cbb85c-974c-43b2-91df-cfb650f286aa/640" alt="">&lt;/p>
&lt;p>然后回到 Grafana 中新建一个新的通知渠道，选择类型为 &lt;code>DingDing&lt;/code>，将上面复制的 Webhook 地址拷贝到 &lt;code>Url&lt;/code> 栏目中：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/68cbb85c-974c-43b2-91df-cfb650f286aa/640" alt="">&lt;/p>
&lt;p>同样点击 &lt;code>Test&lt;/code> 按钮可以测试消息：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/68cbb85c-974c-43b2-91df-cfb650f286aa/640" alt="">&lt;/p>
&lt;p>测试通过后点击 &lt;code>Save&lt;/code> 保存该通知渠道即可。这样我们就创建了两个通知渠道，也可以根据需要设置一个默认的渠道，如果还有其他的渠道需求，可以自行添加即可。&lt;/p>
&lt;h2 id="规则">规则&lt;/h2>
&lt;p>在通知渠道的左侧就是一个 &lt;code>Alert rules&lt;/code> 告警规则的选项卡，点击该页面下面的 &lt;code>How to add an alert&lt;/code> 按钮就有提示如果创建一个告警：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/68cbb85c-974c-43b2-91df-cfb650f286aa/640" alt="">&lt;/p>
&lt;p>提示非常清晰，在任何仪表板图形面板的 &lt;code>Alert&lt;/code> 选项卡中添加和配置告警即可，可以使用现有查询构建和可视化告警，所以我们需要前往仪表板的图形面板中进行配置，这里我们同样以 CPU 使用率这个面板进行说明。&lt;/p>
&lt;p>进入 CPU 使用率的面板编辑页面：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/68cbb85c-974c-43b2-91df-cfb650f286aa/640" alt="">&lt;/p>
&lt;p>在编辑页面图形下方有 &lt;code>Query&lt;/code>、&lt;code>Transform&lt;/code>、&lt;code>Alert&lt;/code> 三个选项卡，前两个我们都已经使用过了，这里需要使用到的是 &lt;code>Alert&lt;/code> 这个选项卡：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/68cbb85c-974c-43b2-91df-cfb650f286aa/640" alt="">&lt;/p>
&lt;p>但是我们切换到 &lt;code>Alert&lt;/code> 选项卡页面的时候出现了 &lt;code>Template variables are not supported in alert queries&lt;/code> 这样的提示信息，意思就是在告警查询中是不支持模板变量的，但是我们这里的图形查询中定义了好几个变量，应该怎么处理该问题呢？&lt;/p>
&lt;p>首先我们需要在该面板中添加一个没有变量的查询语句，该语句用于报警使用，比如我们对节点总的使用率进行监控报警，添加新的查询语句 &lt;code>(1 - sum(rate(node_cpu_seconds_total{instance=~&amp;quot;node1:9100&amp;quot;, mode=&amp;quot;idle&amp;quot;}[5m])) by (instance) / sum(rate(node_cpu_seconds_total{instance=~&amp;quot;node1:9100&amp;quot;}[5m])) by (instance) ) * 100&lt;/code>，去掉对节点参数的使用，因为 Grafana 的报警不支持多维数据，所以这里我们暂时只对 &lt;code>node1&lt;/code> 节点进行监控，然后需要将该查询设置成 &lt;code>Disable query&lt;/code>，这样图表中就不会有该指标数据了，因为该指标是用来监控报警的：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/68cbb85c-974c-43b2-91df-cfb650f286aa/640" alt="">&lt;/p>
&lt;p>现在我们再切换到 &lt;code>Alert&lt;/code> 选项卡页面就可以正常创建报警规则了：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/68cbb85c-974c-43b2-91df-cfb650f286aa/640" alt="">&lt;/p>
&lt;p>点击 &lt;code>Create Alert&lt;/code> 按钮创建报警规则：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/68cbb85c-974c-43b2-91df-cfb650f286aa/640" alt="">&lt;/p>
&lt;p>在 Rule Name 中，添加一个描述性名称，该名称显示在警报规则列表中，后面的 &lt;code>Evaluate every&lt;/code> 表示的评估时间，这里我们设置 &lt;code>1m&lt;/code>，表示每隔 1 分钟 Grafana 会来评估我们的报警规则，&lt;code>For&lt;/code> 表示的是 &lt;code>Pending Duration&lt;/code> 的时长，意思就是如果报警规则持续 &lt;code>1m&lt;/code> 的时间则表示要真正去触发报警了。&lt;/p>
&lt;p>然后就是配置报警的条件，在 &lt;code>WHEN&lt;/code> 后面可以点击选择各种计算方式，我们这里选择 &lt;code>avg()&lt;/code> 表示平均值，&lt;code>OF&lt;/code> 后面的查询就是我们真正用于监控报警的语句，点击可以选择用于查询的语句，这里我们需要选择上面新建的语句 &lt;code>D&lt;/code>，&lt;code>query(D, 5m, now)&lt;/code> 就表示语句 D 从现在开始的前 5 分钟内平均值大于（IS ABOVE）1 这个阈值。&lt;/p>
&lt;p>在下方还可以配置用于报警通知的渠道：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/68cbb85c-974c-43b2-91df-cfb650f286aa/640" alt="">&lt;/p>
&lt;p>然后配置好过后 &lt;code>Apply&lt;/code> 该面板并保存 Dashboard，正常隔一会儿就可以收到报警通知了：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/68cbb85c-974c-43b2-91df-cfb650f286aa/640" alt="">&lt;/p>
&lt;p>但是通知里面的图形并没有渲染出来，这是因为我们没有安装 &lt;code>grafana-image-renderer&lt;/code> 插件，在 Grafana 安装节点上执行下面命令安装：&lt;/p>
&lt;p>`☸ ➜ grafana-cli plugins install grafana-image-renderer&lt;/p>
&lt;p>✔ Downloaded grafana-image-renderer v3.3.0 zip successfully&lt;/p>
&lt;p>Please restart Grafana after installing plugins. Refer to Grafana documentation for instructions if necessary.
☸ ➜ systemctl restart grafana-server&lt;/p>
&lt;p>`&lt;/p>
&lt;p>再一次触发报警的时候可能还是不会正常渲染图形，查看 &lt;code>Grafana&lt;/code> 的日志可以了解到相关错误信息：&lt;/p>
&lt;p>&lt;code>☸ ➜ journalctl -u grafana-server -f ...... Nov 30 18:19:01 node2 grafana-server[62536]: t=2021-11-30T18:19:01+0800 lvl=eror msg=&amp;quot;Render request failed&amp;quot; logger=plugins.backend pluginId=grafana-image-renderer url=&amp;quot;http://localhost:3000/d-solo/oq26nAFnz/nodejie-dian-jian-kong?orgId=1&amp;amp;panelId=2&amp;amp;render=1&amp;quot; error=&amp;quot;Error: Failed to launch the browser process!\n/var/lib/grafana/plugins/grafana-image-renderer/chrome-linux/chrome: error while loading shared libraries: libatk-1.0.so.0: cannot open shared object file: No such file or directory\n\n\nTROUBLESHOOTING: https://github.com/puppeteer/puppeteer/blob/main/docs/troubleshooting.md\n&amp;quot; ......&lt;/code>&lt;/p>
&lt;p>要解决这个问题我们需要安装几个 &lt;code>puppeteer&lt;/code> 的依赖包：&lt;/p>
&lt;p>&lt;code>☸ ➜ yum install atk at-spi2-atk libxkbcommon-x11-devel libXcomposite gtk3 -y&lt;/code>&lt;/p>
&lt;p>依赖安装完成后正常收到的告警消息通知就包含图形数据了：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/68cbb85c-974c-43b2-91df-cfb650f286aa/640" alt="">&lt;/p>
&lt;p>只是渲染的图形中文是乱码，这主要是 Linux 字体库对中文支持不好的原因，我们只需要给服务器的 Linux 系统安装支持的中文字体库即可，这里我们安装文泉驿字体库：&lt;/p>
&lt;p>`☸ ➜ yum search wqy
Loaded plugins: fastestmirror
Loading mirror speeds from cached hostfile
 * base: mirrors.aliyun.com
 * epel: mirrors.bfsu.edu.cn
 * extras: mirrors.aliyun.com
 * updates: mirrors.aliyun.com
================================================ N/S matched: wqy =================================================
wqy-microhei-fonts.noarch : Compact Chinese fonts derived from Droid
wqy-unibit-fonts.noarch : WenQuanYi Unibit Bitmap Font
wqy-zenhei-fonts.noarch : WenQuanYi Zen Hei CJK Font&lt;/p>
&lt;p>Name and summary matches only, use &amp;ldquo;search all&amp;rdquo; for everything.&lt;/p>
&lt;p>☸ ➜ yum install wqy-microhei-fonts.noarch wqy-unibit-fonts.noarch wqy-zenhei-fonts.noarch -y&lt;/p>
&lt;p>`&lt;/p>
&lt;p>这个时候渲染的图形就可以正常显示了：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/68cbb85c-974c-43b2-91df-cfb650f286aa/640" alt="">&lt;/p>
&lt;p>但是钉钉通知中没有将图形显示出来：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/68cbb85c-974c-43b2-91df-cfb650f286aa/640" alt="">&lt;/p>
&lt;p>这是因为在邮件告警通知中的图片是通过邮件服务器发送出去的，是一个图片附件，所以可以正常看到，但是对于钉钉、webhook 这些告警渠道则是直接显示的图片，所以需要设置 &lt;code>external storage&lt;/code> 才能进行显示，设置后图片变为一个指向 &lt;code>external_image_storage&lt;/code> 中图片地址的链接，如果本机无法访问 &lt;code>external_image_storage&lt;/code> 图片是无法显示的，所以如果设置成 local 的时候邮件中的图片可能也不能显示了，因为这个时候是直接一张图片链接。不过 &lt;code>external_image_storage&lt;/code> 可设置的 provider 包括 s3、webdav、gcs、azure_blob、local，如果是线上服务的话建议接入对象存储，比如 s3 服务，这里我们使用阿里云 OSS 来配置 s3 进行说明。&lt;/p>
&lt;p>在 Grafana 配置文件 &lt;code>/etc/grafana/grafana.ini&lt;/code> 中配置 &lt;code>external_image_storage&lt;/code>：&lt;/p>
&lt;p>`#################################### External image storage ##########################
[external_image_storage]
provider = s3  # 使用 s3 模式&lt;/p>
&lt;p>[external_image_storage.s3]
endpoint = oss-cn-beijing.aliyuncs.com
bucket =
region = oss-cn-beijing
access_key =   # 使用阿里云后台的 ak 和 sk 进行配置
secret_key =&lt;/p>
&lt;p>#################################### Server ####################################
[server]
domain = 192.168.31.46  # 设置 Grafana 访问地址为内网 IP&lt;/p>
&lt;p>`&lt;/p>
&lt;p>另外注意需要将 Grafana 的访问域名设置成内网 IP，否则在局域网其他节点上访问不到，配置完成后重启 Grafana 即可：&lt;/p>
&lt;p>&lt;code>☸ ➜ systemctl daemon-reload ☸ ➜ systemctl restart grafana-server&lt;/code>&lt;/p>
&lt;p>配置完成后我们重新去触发下报警，正常在邮件和钉钉中收到的图片都可以正常显示了：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/68cbb85c-974c-43b2-91df-cfb650f286aa/640" alt="">&lt;/p></description></item><item><title>Docs: Grafana 管理</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/grafana/grafana-%E7%AE%A1%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/grafana/grafana-%E7%AE%A1%E7%90%86/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://grafana.com/docs/grafana/latest/administration/">官方文档,管理&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="grafana-密码重置">Grafana 密码重置&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://grafana.com/docs/grafana/latest/administration/cli/#reset-admin-password">官方文档,管理-CLI-重置 admin 密码&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="sqlite3-重置">SQLite3 重置&lt;/h2>
&lt;p>首先需要安装 sqlite3 命令行工具，然后通过 &lt;code>sqlite3 /PATH/TO/grafana.db&lt;/code> 命令进入 Grafana 数据库&lt;/p>
&lt;p>通过 &lt;code>select login, password, salt from user where login = 'admin';&lt;/code> 语句可以查询到 admin 的当前密码信息&lt;/p>
&lt;p>使用下面的 SQL，可以更新 admin 用户的密码为 admin：&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-plsql" data-lang="plsql">sqlite&amp;gt; update user set password = &amp;#39;59acf18b94d7eb0694c61e60ce44c110c7a683ac6a8f09580d626f90f4a242000746579358d77dd9e570e83fa24faa88a8a6&amp;#39;, salt = &amp;#39;F3FAxVm33R&amp;#39; where login = &amp;#39;admin&amp;#39;;
&lt;/code>&lt;/pre>&lt;h2 id="api-修改密码">API 修改密码&lt;/h2>
&lt;p>前提是没有忘记密码&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl -X PUT -H &lt;span style="color:#e6db74">&amp;#34;Content-Type: application/json&amp;#34;&lt;/span> -d &lt;span style="color:#e6db74">&amp;#39;{
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;oldPassword&amp;#34;: &amp;#34;旧密码&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;newPassword&amp;#34;: &amp;#34;新密码&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;confirmNew&amp;#34;: &amp;#34;新密码&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">}&amp;#39;&lt;/span> http://账号:旧密码@IP:PORT/api/user/password
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="grafana-cli-密码重置">grafana-cli 密码重置&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>grafana-cli admin reset-admin-password 新密码
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Grafana 面板示例</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/loki/grafana-%E9%9D%A2%E6%9D%BF%E7%A4%BA%E4%BE%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/loki/grafana-%E9%9D%A2%E6%9D%BF%E7%A4%BA%E4%BE%8B/</guid><description>
&lt;h1 id="heading">&lt;/h1>
&lt;p>&lt;a href="https://mp.weixin.qq.com/s/zcY_8c_7eVcRpKh9IHasLg">如何用 Loki 来绘制 Ingress Nginx 监控大屏&lt;/a>&lt;/p></description></item><item><title>Docs: Grafana 配置详解</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/grafana/grafana-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/grafana-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/grafana/grafana-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/grafana-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://grafana.com/docs/grafana/latest/administration/configuration/">官方文档，管理-配置&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Grafna 可以通过 ini 格式的配置文件、命令行标志、环境变量来配置运行时行为。&lt;/p>
&lt;p>环境变量 与 配置文件 中的配置具有一一对应的关系。环境变量可以覆盖配置文件中的配置(即.环境变量的优先级更高，如果有相通配置，以环境变量的配置为主)。&lt;/p>
&lt;p>环境变量格式：&lt;code>GF_&amp;lt;SectionName&amp;gt;_&amp;lt;KeyName&amp;gt;&lt;/code>&lt;/p>
&lt;ul>
&lt;li>SectionName 对应配置文件中 &lt;code>[ ]&lt;/code> 中的内容&lt;/li>
&lt;li>KeyName 对应配置文件中的关键字。&lt;/li>
&lt;li>配置文件中的 &lt;code>.&lt;/code> 和 &lt;code>-&lt;/code> 两个符号，到环境变量中则变为 &lt;code>_&lt;/code> 符号。环境变量的文本全是大写的&lt;/li>
&lt;/ul>
&lt;p>假如现在的配置文件内容如下：&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-git" data-lang="git"># default section
instance_name = ${HOSTNAME}
[security]
admin_user = admin
[auth.google]
client_secret = 0ldS3cretKey
[plugin.grafana-image-renderer]
rendering_ignore_https_errors = true
&lt;/code>&lt;/pre>&lt;p>对应环境变量，则是：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>GF_DEFAULT_INSTANCE_NAME&lt;span style="color:#f92672">=&lt;/span>my-instance
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>GF_SECURITY_ADMIN_USER&lt;span style="color:#f92672">=&lt;/span>owner
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>GF_AUTH_GOOGLE_CLIENT_SECRET&lt;span style="color:#f92672">=&lt;/span>newS3cretKey
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>GF_PLUGIN_GRAFANA_IMAGE_RENDERER_RENDERING_IGNORE_HTTPS_ERRORS&lt;span style="color:#f92672">=&lt;/span>true
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到，Grafana 的配置具有层次感，配置文件中 &lt;code>[ ]&lt;/code> 表示一套配置环境，配置环境下方，有具体的配置关键字。&lt;/p>
&lt;h2 id="备注">备注&lt;/h2>
&lt;p>Grafana 容器镜像会默认配置一些环境变量，以指定一些基本的配置路径。&lt;a href="https://grafana.com/docs/grafana/latest/administration/configure-docker/">此处&lt;/a>是官方对镜像的解释&lt;/p>
&lt;h1 id="grafanaini-配置文件详解">grafana.ini 配置文件详解&lt;/h1>
&lt;blockquote>
&lt;p>Grafana 的配置文件开头 &lt;code>;&lt;/code> 表示注释&lt;/p>
&lt;/blockquote>
&lt;h2 id="paths">[paths]&lt;/h2>
&lt;p>&lt;strong>data = &lt;!-- raw HTML omitted -->&lt;/strong> # Grafana 数据存储路径。&lt;code>默认值：/var/lib/grafana/data&lt;/code>
&lt;strong>logs = &lt;!-- raw HTML omitted -->&lt;/strong> # Grafana 日志模式为 file 时，记录日志的路径。&lt;code>默认值：/var/log/grafana&lt;/code>
&lt;strong>plugins = &lt;!-- raw HTML omitted -->&lt;/strong> # Grafana 插件的安装路径。&lt;code>默认值：/var/lib/grafana/plugins&lt;/code>
&lt;strong>provisioning = &lt;!-- raw HTML omitted -->&lt;/strong> # Grafana 的 provisioning 功能加载配置文件的路径。&lt;code>默认值：/etc/grafana/provisioning&lt;/code>&lt;/p>
&lt;h2 id="server">[server]&lt;/h2>
&lt;p>&lt;strong>http_port = &lt;!-- raw HTML omitted -->&lt;/strong> # Grafana 监听的端口。&lt;code>默认值：3000&lt;/code>。
**root_url = &lt;!-- raw HTML omitted --> **# 通过 Web 浏览器访问 Grafana 的完整 URL。&lt;code>默认值：%(protocol)://%(domain)s:%(http_port)s/&lt;/code>&lt;/p>
&lt;ul>
&lt;li>%(protocol)、%(domain)、%(http_port) 对应配置文件中 [server] 部分的 protocol、domain、http_port 字段&lt;/li>
&lt;li>root_url 常用于重定向和发送电子邮件时填写 URL&lt;/li>
&lt;/ul>
&lt;h2 id="security">[security]&lt;/h2>
&lt;p>&lt;strong>admin_user = &lt;!-- raw HTML omitted -->&lt;/strong> # Grafana Web UI 的管理员账号的用户命。默认值：admin
&lt;strong>admin_password = &lt;!-- raw HTML omitted -->&lt;/strong> # Grafana Web UI 的管理员账号的密码。默认值：admin&lt;/p>
&lt;h2 id="auth">[auth]&lt;/h2>
&lt;h2 id="authanonymous">[auth.anonymous]&lt;/h2>
&lt;p>匿名访问的配置，配置匿名访问，可以使无需任何登录操作即可访问 Grafana
&lt;strong>enabled = &lt;!-- raw HTML omitted -->&lt;/strong> # 是否开启匿名访问，开启后，可以匿名访问指定的 Organization(组织) 的仪表盘。&lt;code>默认值：false&lt;/code>。
**org_name = &lt;!-- raw HTML omitted --> **# 匿名用户可以访问的组织名称。&lt;code>默认值：Main Org.&lt;/code>。
&lt;strong>org_role = &lt;!-- raw HTML omitted -->&lt;/strong> # 通过匿名访问的组织应该具有的权限。&lt;code>默认值：Viewer&lt;/code>。&lt;/p>
&lt;ul>
&lt;li>可用的值有 Editor 和 Admin。&lt;/li>
&lt;/ul>
&lt;h2 id="log">[log]&lt;/h2>
&lt;p>Grafana 日志配置
&lt;strong>mode = &amp;lt;console | file | syslog&amp;gt;&lt;/strong> # Grafana 记录日志的模式，多种模式以空格分隔。&lt;code>默认值： console file&lt;/code>
&lt;strong>level = &amp;lt;debug | info | warn | error | critical&amp;gt;&lt;/strong> # 日志级别。&lt;code>默认值：info&lt;/code>&lt;/p>
&lt;h2 id="smtphttpsgrafanacomdocsgrafanalatestadministrationconfigurationsmtp">&lt;a href="https://grafana.com/docs/grafana/latest/administration/configuration/#smtp">[smtp]&lt;/a>&lt;/h2>
&lt;p>Grafana 的 Email 服务端配置。通过 smtp 部分的配置，Grafana 可以通过邮件 发送告警、重置密码 等。&lt;/p>
&lt;p>注意，当我们使用邮箱重置密码时，会发现 Grafana 发送的重置连接的域名是 &lt;code>http://localhost:3000&lt;/code>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/shgqef/1639992484686-2a5d4b08-6d1e-412c-a557-a82ade2ea984.png" alt="image.png">
这个域名是从过配置文件中 &lt;code>[server]&lt;/code> 部分的 &lt;code>root_rul&lt;/code> 字段获取的。&lt;/p>
&lt;h3 id="配置示例">配置示例&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">smtp&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">enabled&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">host&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;smtp.263.net:25&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">user&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;lich_wb@ehualu.com&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">password&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;邮箱密码&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">from_address&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;lich_wb@ehualu.com&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">from_name&lt;/span>: &lt;span style="color:#ae81ff">Grafana&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">[smtp]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">enabled&lt;/span> = &lt;span style="color:#e6db74">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">from_address&lt;/span> = &lt;span style="color:#e6db74">lich_wb@ehualu.com&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">from_name&lt;/span> = &lt;span style="color:#e6db74">Grafana&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">host&lt;/span> = smtp.263.net:&lt;span style="color:#ae81ff">25&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">password&lt;/span> = &lt;span style="color:#e6db74">邮箱密码&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">user&lt;/span> = &lt;span style="color:#e6db74">lich_wb@ehualu.com&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="grafanaini-配置示例">grafana.ini 配置示例&lt;/h1>
&lt;pre tabindex="0">&lt;code class="language-git" data-lang="git">[server]
http_port = 3000
[analytics]
check_for_updates = true
[log]
mode = console
level = info
[paths]
data = /var/lib/grafana/data
logs = /var/log/grafana
plugins = /var/lib/grafana/plugins
provisioning = /etc/grafana/provisioning
&lt;/code>&lt;/pre></description></item><item><title>Docs: Grafna 数据模型</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/grafana/grafna-%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/grafana/grafna-%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://grafana.com/docs/grafana/latest/developers/plugins/data-frames/">官方文档，开发者-构建插件-数据框架&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="data-frames数据框架">Data Frames(数据框架)&lt;/h1>
&lt;p>Grafana 支持各种不同的数据源，每个数据源都有自己的数据模型。为了实现这一点，Grafana 将来自每个数据源的查询结果合并为一个统一的数据结构，称为 &lt;strong>Data Frames(数据框架)&lt;/strong>。
数据框架结构是从 R 编程语言和 Pandas 等数据分析工具中借用的概念。&lt;/p>
&lt;blockquote>
&lt;p>数据帧在 Grafana 7.0+中可用，并且用更通用的数据结构代替了时间序列和表结构，该数据结构可以支持更大范围的数据类型。&lt;/p>
&lt;/blockquote>
&lt;p>本文档概述了数据框架结构以及如何在 Grafana 中处理数据。&lt;/p>
&lt;h2 id="数据框">数据框&lt;/h2>
&lt;p>数据框是面向列的表结构，这意味着它按列而不是按行存储数据。要了解这意味着什么，让我们看一下 Grafana 使用的 TypeScript 定义：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">DataFrame&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">?&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// reference to query that create the frame
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">refId&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">?&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fields&lt;/span>: []&lt;span style="color:#a6e22e">Field&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>本质上，数据框是 &lt;strong>Fields(字段)&lt;/strong>_ _的集合，其中每个字段对应于一列。每个字段又由值的集合以及元信息（例如这些值的数据类型）组成。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">Field&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Prometheus like Labels / Tags
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">labels&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">?&lt;/span>: &lt;span style="color:#a6e22e">Record&lt;/span>&amp;lt;&lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#66d9ef">string&lt;/span>&amp;gt;;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// For example string, number, time (or more specific primitives in the backend)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span>: &lt;span style="color:#a6e22e">FieldType&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Array of values all of the same type
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">values&lt;/span>: &lt;span style="color:#a6e22e">Vector&lt;/span>&amp;lt;&lt;span style="color:#a6e22e">T&lt;/span>&amp;gt;;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Optional display data for the field (e.g. unit, name over-ride, etc)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">config&lt;/span>: &lt;span style="color:#a6e22e">FieldConfig&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>让我们来看一个例子。下表说明了一个具有两个字段（_时间_和_温度）_的数据框。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>时间&lt;/td>
&lt;td>温度&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2020-01-02 03:04:00&lt;/td>
&lt;td>45.0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2020-01-02 03:05:00&lt;/td>
&lt;td>47.0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2020-01-02 03:06:00&lt;/td>
&lt;td>48.0&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>每个字段具有三个值，并且字段中的每个值必须共享相同的类型。在这种情况下，时间字段中的所有值都是时间戳，而温度字段中的所有值都是数字。&lt;/p>
&lt;p>数据帧的一个限制是，帧中的所有字段必须具有相同的长度才能成为有效的数据帧。&lt;/p>
&lt;h3 id="现场配置">现场配置&lt;/h3>
&lt;p>数据帧中的每个字段都包含有关字段中值的可选信息，例如单位，缩放比例等。&lt;/p>
&lt;p>通过将字段配置添加到数据框，Grafana 可以自动配置可视化。例如，您可以将 Grafana 配置为自动设置数据源提供的单位。&lt;/p>
&lt;h2 id="转变">转变&lt;/h2>
&lt;p>除类型信息外，字段配置还支持在 Grafana 中进行_数据转换_。&lt;/p>
&lt;p>数据转换是任何接受一个数据帧作为输入并返回另一个数据帧作为输出的函数。通过在插件中使用数据框，您可以免费获得一系列转换。&lt;/p>
&lt;h2 id="数据帧作为时间序列">数据帧作为时间序列&lt;/h2>
&lt;p>具有至少一个时间字段的数据帧被视为_时间序列_。&lt;/p>
&lt;p>有关时间序列的更多信息，请参阅我们的时间序列简介。&lt;/p>
&lt;h3 id="宽幅">宽幅&lt;/h3>
&lt;p>当时间序列集合共享相同的_时间索引_时（每个时间序列中的时间字段都相同），它们可以以_宽_格式存储在一起。通过重用时间字段，我们可以减少发送到浏览器的数据量。&lt;/p>
&lt;p>在此示例中，&lt;code>cpu&lt;/code>每个主机的使用情况共享时间索引，因此我们可以将它们存储在同一数据帧中。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>Name: Wide
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Dimensions: &lt;span style="color:#ae81ff">3&lt;/span> fields by &lt;span style="color:#ae81ff">2&lt;/span> rows
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+---------------------+-----------------+-----------------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| Name: time | Name: cpu | Name: cpu |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| Labels: | Labels: host&lt;span style="color:#f92672">=&lt;/span>a | Labels: host&lt;span style="color:#f92672">=&lt;/span>b |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| Type: &lt;span style="color:#f92672">[]&lt;/span>time.Time | Type: &lt;span style="color:#f92672">[]&lt;/span>float64 | Type: &lt;span style="color:#f92672">[]&lt;/span>float64 |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+---------------------+-----------------+-----------------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| 2020-01-02 03:04:00 | &lt;span style="color:#ae81ff">3&lt;/span> | &lt;span style="color:#ae81ff">4&lt;/span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| 2020-01-02 03:05:00 | &lt;span style="color:#ae81ff">6&lt;/span> | &lt;span style="color:#ae81ff">7&lt;/span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+---------------------+-----------------+-----------------+
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>但是，如果两个时间序列不共享相同的时间值，则它们将表示为两个不同的数据帧。&lt;/p>
&lt;pre>&lt;code>Name: cpu
Dimensions: 2 fields by 2 rows
+---------------------+-----------------+
| Name: time | Name: cpu |
| Labels: | Labels: host=a |
| Type: []time.Time | Type: []float64 |
+---------------------+-----------------+
| 2020-01-02 03:04:00 | 3 |
| 2020-01-02 03:05:00 | 6 |
+---------------------+-----------------+
Name: cpu
Dimensions: 2 fields by 2 rows
+---------------------+-----------------+
| Name: time | Name: cpu |
| Labels: | Labels: host=b |
| Type: []time.Time | Type: []float64 |
+---------------------+-----------------+
| 2020-01-02 03:04:01 | 4 |
| 2020-01-02 03:05:01 | 7 |
+---------------------+-----------------+
&lt;/code>&lt;/pre>
&lt;p>当通过同一过程收集多个时间序列时，通常可以使用宽格式。在这种情况下，每次测量均以相同的间隔进行，因此将共享相同的时间值。&lt;/p>
&lt;h3 id="长格式">长格式&lt;/h3>
&lt;p>某些数据源以_长_格式（也称为_窄_格式）返回数据。这是 SQL 数据库返回的常见格式。&lt;/p>
&lt;p>在长格式中，字符串值表示为单独的字段，而不是标签。结果，长格式的数据形式可能具有重复的时间值。&lt;/p>
&lt;p>Grafana 可以检测长格式的数据帧并将其转换为宽格式。&lt;/p>
&lt;blockquote>
&lt;p>**注意：**当前仅在后端中支持长格式：。&lt;/p>
&lt;/blockquote>
&lt;p>例如，以下长格式的数据帧：&lt;/p>
&lt;pre>&lt;code>Name: Long
Dimensions: 4 fields by 4 rows
+---------------------+-----------------+-----------------+----------------+
| Name: time | Name: aMetric | Name: bMetric | Name: host |
| Labels: | Labels: | Labels: | Labels: |
| Type: []time.Time | Type: []float64 | Type: []float64 | Type: []string |
+---------------------+-----------------+-----------------+----------------+
| 2020-01-02 03:04:00 | 2 | 10 | foo |
| 2020-01-02 03:04:00 | 5 | 15 | bar |
| 2020-01-02 03:05:00 | 3 | 11 | foo |
| 2020-01-02 03:05:00 | 6 | 16 | bar |
+---------------------+-----------------+-----------------+----------------+
&lt;/code>&lt;/pre>
&lt;p>可以转换为宽格式的数据帧：&lt;/p>
&lt;pre>&lt;code>Name: Wide
Dimensions: 5 fields by 2 rows
+---------------------+------------------+------------------+------------------+------------------+
| Name: time | Name: aMetric | Name: bMetric | Name: aMetric | Name: bMetric |
| Labels: | Labels: host=foo | Labels: host=foo | Labels: host=bar | Labels: host=bar |
| Type: []time.Time | Type: []float64 | Type: []float64 | Type: []float64 | Type: []float64 |
+---------------------+------------------+------------------+------------------+------------------+
| 2020-01-02 03:04:00 | 2 | 10 | 5 | 15 |
| 2020-01-02 03:05:00 | 3 | 11 | 6 | 16 |
+---------------------+------------------+------------------+------------------+------------------+
&lt;/code>&lt;/pre>
&lt;h2 id="技术参考">技术参考&lt;/h2>
&lt;p>本节包含技术参考和数据帧实现的链接。&lt;/p>
&lt;h3 id="阿帕奇箭">阿帕奇箭&lt;/h3>
&lt;p>数据框架结构受 Apache Arrow Project 启发并使用。Javascript 数据框架使用箭头表作为基础结构，后端 Go 代码在箭头表中序列化其框架以进行传输。&lt;/p>
&lt;h3 id="java-脚本">Java 脚本&lt;/h3>
&lt;p>JavaScript 实现数据帧是在&lt;code>/src/dataframe&lt;/code>文件夹和&lt;code>/src/types/dataframe.ts&lt;/code>该的&lt;code>@grafana/data&lt;/code>包。&lt;/p>
&lt;h3 id="go">Go&lt;/h3>
&lt;p>有关数据帧的 Go 实现的文档，请参阅 github.com/grafana/grafana-plugin-sdk-go/data 软件包。&lt;/p></description></item><item><title>Docs: HTTP(新监控标准)</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/http%E6%96%B0%E7%9B%91%E6%8E%A7%E6%A0%87%E5%87%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/http%E6%96%B0%E7%9B%91%E6%8E%A7%E6%A0%87%E5%87%86/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;p>由于 SNMP 的种种不便，现在更多的是基于 HTTP 协议来实现监控指标的采集。&lt;/p>
&lt;p>同样，也是需要一个 Client 采集指标，需要一个 Server 端接收指标后存储指标。&lt;/p>
&lt;p>就像 SNMP 协议一样，光有协议还不行，基于 HTTP 协议的监控也需要一个数据模型的标准，就像 MIB 和 OID 类似。而现阶段，从 Prometheus 演化过来的 OpenMetrics 标准，就是这么一种东西。&lt;/p>
&lt;h1 id="openmetrics">OpenMetrics&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/OpenObservability/OpenMetrics">GitHub 项目，OpenObservability/OpenMetrics&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://openmetrics.io/">官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/OpenObservability/OpenMetrics/blob/main/specification/OpenMetrics.md">OpenMetrics 规范&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>OpenMetrics&lt;/strong> 是新时代的监控指标的标准，由 CNCF 主导，OpenMetrics 定义了大规模传输云原生指标的事实标准。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>OpenMetricsSpec&lt;/strong> 用来定义监控指标的标准&lt;/li>
&lt;/ul>
&lt;h1 id="data-model数据模型">Data Model(数据模型)&lt;/h1>
&lt;p>平时我们口语交流，一般将随时间变化的数据称为 &lt;strong>Metrics(指标)&lt;/strong>。这是监控数据的另一种叫法，与 OID 类似，可以代表一种监控数据、同时也是一种名词，比如我采集某个程序的监控数据，可以说采集这个程序的 Metrics。所以 Metrics 是一个抽象的叫法。&lt;/p>
&lt;p>This section MUST be read together with the ABNF section. In case of disagreements between the two, the ABNF&amp;rsquo;s restrictions MUST take precedence. This reduces repetition as the text wire format MUST be supported.&lt;/p>
&lt;h2 id="data-types">Data Types&lt;/h2>
&lt;h3 id="values">Values&lt;/h3>
&lt;p>Metric values in OpenMetrics MUST be either floating points or integers. Note that ingestors of the format MAY only support float64. The non-real values NaN, +Inf and -Inf MUST be supported. NaN MUST NOT be considered a missing value, but it MAY be used to signal a division by zero.&lt;/p>
&lt;h4 id="booleans">Booleans&lt;/h4>
&lt;p>Boolean values MUST follow 1==true, 0==false.&lt;/p>
&lt;h3 id="timestamps">Timestamps&lt;/h3>
&lt;p>Timestamps MUST be Unix Epoch in seconds. Negative timestamps MAY be used.&lt;/p>
&lt;h3 id="strings">Strings&lt;/h3>
&lt;p>Strings MUST only consist of valid UTF-8 characters and MAY be zero length. NULL (ASCII 0x0) MUST be supported.&lt;/p>
&lt;h3 id="label">Label&lt;/h3>
&lt;p>Labels are key-value pairs consisting of strings.
Label names beginning with underscores are RESERVED and MUST NOT be used unless specified by this standard. Label names MUST follow the restrictions in the ABNF section.
Empty label values SHOULD be treated as if the label was not present.&lt;/p>
&lt;h3 id="labelset">LabelSet&lt;/h3>
&lt;p>A LabelSet MUST consist of Labels and MAY be empty. Label names MUST be unique within a LabelSet.&lt;/p>
&lt;h3 id="metricpoint">MetricPoint&lt;/h3>
&lt;p>Each MetricPoint consists of a set of values, depending on the MetricFamily type.&lt;/p>
&lt;h3 id="exemplars">Exemplars&lt;/h3>
&lt;p>Exemplars are references to data outside of the MetricSet. A common use case are IDs of program traces.
Exemplars MUST consist of a LabelSet and a value, and MAY have a timestamp. They MAY each be different from the MetricPoints&amp;rsquo; LabelSet and timestamp.
The combined length of the label names and values of an Exemplar&amp;rsquo;s LabelSet MUST NOT exceed 128 UTF-8 characters. Other characters in the text rendering of an exemplar such as &amp;ldquo;,= are not included in this limit for implementation simplicity and for consistency between the text and proto formats.
Ingestors MAY discard exemplars.&lt;/p>
&lt;h3 id="metric">Metric&lt;/h3>
&lt;p>Metrics are defined by a unique LabelSet within a MetricFamily. Metrics MUST contain a list of one or more MetricPoints. Metrics with the same name for a given MetricFamily SHOULD have the same set of label names in their LabelSet.
MetricPoints SHOULD NOT have explicit timestamps.
If more than one MetricPoint is exposed for a Metric, then its MetricPoints MUST have monotonically increasing timestamps.&lt;/p>
&lt;h3 id="metricfamily">MetricFamily&lt;/h3>
&lt;p>A MetricFamily MAY have zero or more Metrics. A MetricFamily MUST have a name, HELP, TYPE, and UNIT metadata. Every Metric within a MetricFamily MUST have a unique LabelSet.&lt;/p>
&lt;h4 id="name">Name&lt;/h4>
&lt;p>MetricFamily names are a string and MUST be unique within a MetricSet. Names SHOULD be in snake_case. Metric names MUST follow the restrictions in the ABNF section.
Colons in MetricFamily names are RESERVED to signal that the MetricFamily is the result of a calculation or aggregation of a general purpose monitoring system.
MetricFamily names beginning with underscores are RESERVED and MUST NOT be used unless specified by this standard.&lt;/p>
&lt;h5 id="suffixes">Suffixes&lt;/h5>
&lt;p>The name of a MetricFamily MUST NOT result in a potential clash for sample metric names as per the ABNF with another MetricFamily in the Text Format within a MetricSet. An example would be a gauge called &amp;ldquo;foo_created&amp;rdquo; as a counter called &amp;ldquo;foo&amp;rdquo; could create a &amp;ldquo;foo_created&amp;rdquo; in the text format.
Exposers SHOULD avoid names that could be confused with the suffixes that text format sample metric names use.&lt;/p>
&lt;ul>
&lt;li>Suffixes for the respective types are:&lt;/li>
&lt;li>Counter: &amp;lsquo;_total&amp;rsquo;, &amp;lsquo;_created&amp;rsquo;&lt;/li>
&lt;li>Summary: &amp;lsquo;_count&amp;rsquo;, &amp;lsquo;_sum&amp;rsquo;, &amp;lsquo;_created&amp;rsquo;, &amp;rsquo;&amp;rsquo; (empty)&lt;/li>
&lt;li>Histogram: &amp;lsquo;_count&amp;rsquo;, &amp;lsquo;_sum&amp;rsquo;, &amp;lsquo;_bucket&amp;rsquo;, &amp;lsquo;_created&amp;rsquo;&lt;/li>
&lt;li>GaugeHistogram: &amp;lsquo;_gcount&amp;rsquo;, &amp;lsquo;_gsum&amp;rsquo;, &amp;lsquo;_bucket&amp;rsquo;&lt;/li>
&lt;li>Info: &amp;lsquo;_info&amp;rsquo;&lt;/li>
&lt;li>Gauge: &amp;rsquo;&amp;rsquo; (empty)&lt;/li>
&lt;li>StateSet: &amp;rsquo;&amp;rsquo; (empty)&lt;/li>
&lt;li>Unknown: &amp;rsquo;&amp;rsquo; (empty)&lt;/li>
&lt;/ul>
&lt;h4 id="type">Type&lt;/h4>
&lt;p>Type specifies the MetricFamily type. Valid values are &amp;ldquo;unknown&amp;rdquo;, &amp;ldquo;gauge&amp;rdquo;, &amp;ldquo;counter&amp;rdquo;, &amp;ldquo;stateset&amp;rdquo;, &amp;ldquo;info&amp;rdquo;, &amp;ldquo;histogram&amp;rdquo;, &amp;ldquo;gaugehistogram&amp;rdquo;, and &amp;ldquo;summary&amp;rdquo;.&lt;/p>
&lt;h4 id="unit">Unit&lt;/h4>
&lt;p>Unit specifies MetricFamily units. If non-empty, it MUST be a suffix of the MetricFamily name separated by an underscore. Be aware that further generation rules might make it an infix in the text format.&lt;/p>
&lt;h4 id="help">Help&lt;/h4>
&lt;p>Help is a string and SHOULD be non-empty. It is used to give a brief description of the MetricFamily for human consumption and SHOULD be short enough to be used as a tooltip.&lt;/p>
&lt;h4 id="metricset">MetricSet&lt;/h4>
&lt;p>A MetricSet is the top level object exposed by OpenMetrics. It MUST consist of MetricFamilies and MAY be empty.
Each MetricFamily name MUST be unique. The same label name and value SHOULD NOT appear on every Metric within a MetricSet.
There is no specific ordering of MetricFamilies required within a MetricSet. An exposer MAY make an exposition easier to read for humans, for example sort alphabetically if the performance tradeoff makes sense.
If present, an Info MetricFamily called &amp;ldquo;target&amp;rdquo; per the &amp;ldquo;Supporting target metadata in both push-based and pull-based systems&amp;rdquo; section below SHOULD be first.&lt;/p>
&lt;h2 id="metric-types">Metric Types&lt;/h2>
&lt;h3 id="gauge">Gauge&lt;/h3>
&lt;p>Gauges are current measurements, such as bytes of memory currently used or the number of items in a queue. For gauges the absolute value is what is of interest to a user.
A MetricPoint in a Metric with the type gauge MUST have a single value.
Gauges MAY increase, decrease, or stay constant over time. Even if they only ever go in one direction, they might still be gauges and not counters. The size of a log file would usually only increase, a resource might decrease, and the limit of a queue size may be constant.
A gauge MAY be used to encode an enum where the enum has many states and changes over time, it is the most efficient but least user friendly.&lt;/p>
&lt;h3 id="counter">Counter&lt;/h3>
&lt;p>Counters measure discrete events. Common examples are the number of HTTP requests received, CPU seconds spent, or bytes sent. For counters how quickly they are increasing over time is what is of interest to a user.
A MetricPoint in a Metric with the type Counter MUST have one value called Total. A Total is a non-NaN and MUST be monotonically non-decreasing over time, starting from 0.
A MetricPoint in a Metric with the type Counter SHOULD have a Timestamp value called Created. This can help ingestors discern between new metrics and long-running ones it did not see before.
A MetricPoint in a Metric&amp;rsquo;s Counter&amp;rsquo;s Total MAY reset to 0. If present, the corresponding Created time MUST also be set to the timestamp of the reset.
A MetricPoint in a Metric&amp;rsquo;s Counter&amp;rsquo;s Total MAY have an exemplar.&lt;/p>
&lt;h3 id="stateset">StateSet&lt;/h3>
&lt;p>StateSets represent a series of related boolean values, also called a bitset. If ENUMs need to be encoded this MAY be done via StateSet.
A point of a StateSet metric MAY contain multiple states and MUST contain one boolean per State. States have a name which are Strings.
A StateSet Metric&amp;rsquo;s LabelSet MUST NOT have a label name which is the same as the name of its MetricFamily.
If encoded as a StateSet, ENUMs MUST have exactly one Boolean which is true within a MetricPoint.
This is suitable where the enum value changes over time, and the number of States isn&amp;rsquo;t much more than a handful.
EDITOR’S NOTE: This might be better as Consideration
MetricFamilies of type StateSets MUST have an empty Unit string.&lt;/p>
&lt;h3 id="info">Info&lt;/h3>
&lt;p>Info metrics are used to expose textual information which SHOULD NOT change during process lifetime. Common examples are an application&amp;rsquo;s version, revision control commit, and the version of a compiler.
A MetricPoint of an Info Metric contains a LabelSet. An Info MetricPoint&amp;rsquo;s LabelSet MUST NOT have a label name which is the same as the name of a label of the LabelSet of its Metric.
Info MAY be used to encode ENUMs whose values do not change over time, such as the type of a network interface.
MetricFamilies of type Info MUST have an empty Unit string.&lt;/p>
&lt;h3 id="histogram">Histogram&lt;/h3>
&lt;p>Histograms measure distributions of discrete events. Common examples are the latency of HTTP requests, function runtimes, or I/O request sizes.
A Histogram MetricPoint MUST contain at least one bucket, and SHOULD contain Sum, and Created values. Every bucket MUST have a threshold and a value.
Histogram MetricPoints MUST have at least a bucket with an +Inf threshold. Buckets MUST be cumulative. As an example for a metric representing request latency in seconds its values for buckets with thresholds 1, 2, 3, and +Inf MUST follow value_1 &amp;lt;= value_2 &amp;lt;= value_3 &amp;lt;= value_+Inf. If ten requests took 1 second each, the values of the 1, 2, 3, and +Inf buckets MUST equal 10.
The +Inf bucket counts all requests. If present, the Sum value MUST equal the Sum of all the measured event values. Bucket thresholds within a MetricPoint MUST be unique.
Semantically, Sum, and buckets values are counters so MUST NOT be NaN or negative. Negative threshold buckets MAY be used, but then the Histogram MetricPoint MUST NOT contain a sum value as it would no longer be a counter semantically. Bucket thresholds MUST NOT equal NaN. Count and bucket values MUST be integers.
A Histogram MetricPoint SHOULD have a Timestamp value called Created. This can help ingestors discern between new metrics and long-running ones it did not see before.
A Histogram&amp;rsquo;s Metric&amp;rsquo;s LabelSet MUST NOT have a &amp;ldquo;le&amp;rdquo; label name.
Bucket values MAY have exemplars. Buckets are cumulative to allow monitoring systems to drop any non-+Inf bucket for performance/anti-denial-of-service reasons in a way that loses granularity but is still a valid Histogram.
EDITOR’S NOTE: The second sentence is a consideration, it can be moved if needed
Each bucket covers the values less and or equal to it, and the value of the exemplar MUST be within this range. Exemplars SHOULD be put into the bucket with the highest value. A bucket MUST NOT have more than one exemplar.&lt;/p>
&lt;h3 id="gaugehistogram">GaugeHistogram&lt;/h3>
&lt;p>GaugeHistograms measure current distributions. Common examples are how long items have been waiting in a queue, or size of the requests in a queue.
A GaugeHistogram MetricPoint MUST have at least one bucket with an +Inf threshold, and SHOULD contain a Gsum value. Every bucket MUST have a threshold and a value.
The buckets for a GaugeHistogram follow all the same rules as for a Histogram.
The bucket and Gsum of a GaugeHistogram are conceptually gauges, however bucket values MUST NOT be negative or NaN. If negative threshold buckets are present, then sum MAY be negative. Gsum MUST NOT be NaN. Bucket values MUST be integers.
A GaugeHistogram&amp;rsquo;s Metric&amp;rsquo;s LabelSet MUST NOT have a &amp;ldquo;le&amp;rdquo; label name.
Bucket values can have exemplars.
Each bucket covers the values less and or equal to it, and the value of the exemplar MUST be within this range. Exemplars SHOULD be put into the bucket with the highest value. A bucket MUST NOT have more than one exemplar.&lt;/p>
&lt;h3 id="summary">Summary&lt;/h3>
&lt;p>Summaries also measure distributions of discrete events and MAY be used when Histograms are too expensive and/or an average event size is sufficient.
They MAY also be used for backwards compatibility, because some existing instrumentation libraries expose precomputed quantiles and do not support Histograms. Precomputed quantiles SHOULD NOT be used, because quantiles are not aggregatable and the user often can not deduce what timeframe they cover.
A Summary MetricPoint MAY consist of a Count, Sum, Created, and a set of quantiles.
Semantically, Count and Sum values are counters so MUST NOT be NaN or negative. Count MUST be an integer.
A MetricPoint in a Metric with the type Summary which contains Count or Sum values SHOULD have a Timestamp value called Created. This can help ingestors discern between new metrics and long-running ones it did not see before. Created MUST NOT relate to the collection period of quantile values.
Quantiles are a map from a quantile to a value. An example is a quantile 0.95 with value 0.2 in a metric called myapp_http_request_duration_seconds which means that the 95th percentile latency is 200ms over an unknown timeframe. If there are no events in the relevant timeframe, the value for a quantile MUST be NaN. A Quantile&amp;rsquo;s Metric&amp;rsquo;s LabelSet MUST NOT have &amp;ldquo;quantile&amp;rdquo; label name. Quantiles MUST be between 0 and 1 inclusive. Quantile values MUST NOT be negative. Quantile values SHOULD represent the recent values. Commonly this would be over the last 5-10 minutes.&lt;/p>
&lt;h3 id="unknown">Unknown&lt;/h3>
&lt;p>Unknown SHOULD NOT be used. Unknown MAY be used when it is impossible to determine the types of individual metrics from 3rd party systems.
A point in a metric with the unknown type MUST have a single value.&lt;/p>
&lt;h2 id="基本示例">基本示例&lt;/h2>
&lt;p>Metrics 数据格式如下图所示
# HELP http_requests_total The total number of HTTP requests.
# TYPE http_requests_total counter
http_requests_total{method=&amp;ldquo;post&amp;rdquo;,code=&amp;ldquo;200&amp;rdquo;} 1027 1395066363000
http_requests_total{method=&amp;ldquo;post&amp;rdquo;,code=&amp;ldquo;400&amp;rdquo;} 3 1395066363000
# Escaping in label values:msdos_file_access_time_seconds{path=&amp;ldquo;C:\DIR\FILE.TXT&amp;rdquo;,error=&amp;ldquo;Cannot find file:\n&amp;quot;FILE.TXT&amp;rdquo;&amp;rdquo;} 1.458255915e9
# Minimalistic line:metric_without_timestamp_and_labels 12.47
# A weird metric from before the epoch:something_weird{problem=&amp;ldquo;division by zero&amp;rdquo;} +Inf -3982045&lt;/p>
&lt;p>默认有三行数据来表示&lt;/p>
&lt;ol>
&lt;li>#HELP MetricsName Metrics 的描述&lt;/li>
&lt;li>#TYPE MetricsName Metrics 的数据类型&lt;/li>
&lt;li>MetricsName 与 Metrics 的值&lt;/li>
&lt;li>如果有多个 Metrics 的项目，则会有多行&lt;/li>
&lt;/ol>
&lt;p>主要由三个部分组成：样本的一般注释信息（HELP），样本的类型注释信息（TYPE）和样本。Prometheus 会对 Exporter 响应的内容逐行解析：
如果当前行以# HELP 开始，Prometheus 将会按照以下规则对内容进行解析，得到当前的指标名称以及相应的说明信息：
# HELP&lt;/p>
&lt;p>如果当前行以# TYPE 开始，Prometheus 会按照以下规则对内容进行解析，得到当前的指标名称以及指标类型:
# TYPE&lt;/p>
&lt;p>TYPE 注释行必须出现在指标的第一个样本之前。如果没有明确的指标类型需要返回为 untyped。 除了# 开头的所有行都会被视为是监控样本数据。 每一行样本需要满足以下格式规范:
metric_name [
&amp;ldquo;{&amp;rdquo; label_name &amp;ldquo;=&amp;rdquo; &lt;code>&amp;quot;&lt;/code> label_value &lt;code>&amp;quot;&lt;/code> { &amp;ldquo;,&amp;rdquo; label_name &amp;ldquo;=&amp;rdquo; &lt;code>&amp;quot;&lt;/code> label_value &lt;code>&amp;quot;&lt;/code> } [ &amp;ldquo;,&amp;rdquo; ] &amp;ldquo;}&amp;rdquo;
] value [ timestamp ]&lt;/p>
&lt;p>其中 metric_name 和 label_name 必须遵循 PromQL 的格式规范要求。value 是一个 float 格式的数据，timestamp 的类型为 int64（从 1970-01-01 00:00:00 以来的毫秒数），timestamp 为可选默认为当前时间。具有相同 metric_name 的样本必须按照一个组的形式排列，并且每一行必须是唯一的指标名称和标签键值对组合。&lt;/p></description></item><item><title>Docs: HTTPS 和 Authentication(认证)</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/prometheus/https-%E5%92%8C-authentication%E8%AE%A4%E8%AF%81/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/prometheus/https-%E5%92%8C-authentication%E8%AE%A4%E8%AF%81/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://prometheus.io/docs/prometheus/latest/configuration/https/">官方文档,Prometheus-配置-HTTPS 和 认证&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://prometheus.io/docs/guides/basic-auth/">官方文档,指南-基础认证&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kubernetes.github.io/ingress-nginx/examples/auth/basic/">Ngxin Ingress Controller 官方文档,认证-基础认证&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.jianshu.com/p/4d5aa1995de3">知乎&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>认证功能的发展：&lt;/p>
&lt;ul>
&lt;li>Prometheus 从 2.24 版本开始，才支持基本认证，截止 2021 年 8 月 25 日官方已经提供了实验性的 HTTPS 与 认证配置，详见&lt;a href="https://prometheus.io/docs/prometheus/latest/configuration/https/">此处&lt;/a>。&lt;/li>
&lt;li>截止 2021 年 8 月 25 日，Thanos 的 Sidecar 还不支持向 Prometheus 发起请求是携带认证信息，但已经有 &lt;a href="https://github.com/thanos-io/thanos/issues/3975">issue #3975&lt;/a> 提出来该问题，并将在未来 &lt;a href="https://github.com/thanos-io/thanos/pull/4104">PR #4104&lt;/a> 实现&lt;/li>
&lt;/ul>
&lt;p>现阶段在 Prometheus 前面添加代理(比如 Nginx)，只暴露 Nginx 端口，所有访问 Prometheus 的请求都经过代理，并在代理上添加认证，这样可以为 Prometheus 的 web 端添加一个基本的基于用户名和密码的认证。&lt;/p>
&lt;p>在 kubernetes 中，可以通过 ingress 来实现。其他环境可以直接配置 ngxin 来实现。&lt;/p>
&lt;h1 id="通过-ingress-controller-配置认证普通的-nginx-同理">通过 ingress controller 配置认证，普通的 nginx 同理。&lt;/h1>
&lt;p>首先需要安装 htpasswd 二进制文件，通过 htpasswd 命令行工具生成保存用户名密码的文件，然后通过该文件创建一个 secret 对象，并在 ingress 引用该 secret 对象&lt;/p>
&lt;p>&lt;strong>通过 htpasswd 生成一个“auth”文件;用来存取我们创建的用户及加密之后的密码&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>root@lichenhao:~# htpasswd -c auth admin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>New password:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Re-type new password:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Adding password &lt;span style="color:#66d9ef">for&lt;/span> user admin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 查看这个文件，可以看到密码是加密之后的字符串&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root@lichenhao:~# cat auth
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>admin:$apr1$8NSwCSR3$s5G25cvkaUDAoxEFtaGZ11
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 密码：ehl1234&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>创建 kubernetes secret 来存储 auth 文件中的用户名和密码&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">root@lichenhao:~# kubectl create -n monitoring secret generic basic-auth --from-file=auth&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">secret &amp;#34;basic-auth&amp;#34; created&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">root@lichenhao:~# kubectl get secrets -n monitoring basic-auth -oyaml | neat&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">data&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">auth&lt;/span>: &lt;span style="color:#ae81ff">YWRtaW46JGFwcjEkOE5Td0NTUjMkczVHMjVjdmthVURBb3hFRnRhR1oxMQo=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Secret&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">annotations&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">meta.helm.sh/release-name&lt;/span>: &lt;span style="color:#ae81ff">monitor-bj-net&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">meta.helm.sh/release-namespace&lt;/span>: &lt;span style="color:#ae81ff">monitoring&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app.kubernetes.io/managed-by&lt;/span>: &lt;span style="color:#ae81ff">Helm&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">basic-auth&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">monitoring&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">Opaque&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>在 ingress 资源中添加注释&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">root@lichenhao:~# kubectl get ingress -n monitoring monitor-bj-net-k8s-prometheus -oyaml | neat&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">extensions/v1beta1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Ingress&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">annotations&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">meta.helm.sh/release-name&lt;/span>: &lt;span style="color:#ae81ff">monitor-bj-net&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">meta.helm.sh/release-namespace&lt;/span>: &lt;span style="color:#ae81ff">monitoring&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 添加如下三行注释内容，&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 指定认证类型&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">nginx.ingress.kubernetes.io/auth-type&lt;/span>: &lt;span style="color:#ae81ff">basic&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 指定包含用户名与密码的 secret 资源的名称&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">nginx.ingress.kubernetes.io/auth-secret&lt;/span>: &lt;span style="color:#ae81ff">basic-auth&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 消息，显示一个适当的上下文，说明为什么需要身份验证。最后 admin 就是指明应该要使用的用户名&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">nginx.ingress.kubernetes.io/auth-realm&lt;/span>: &lt;span style="color:#ae81ff">Authentication Required - admin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">k8s-prometheus&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app.kubernetes.io/managed-by&lt;/span>: &lt;span style="color:#ae81ff">Helm&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">chart&lt;/span>: &lt;span style="color:#ae81ff">kube-prometheus-stack-12.12.1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">heritage&lt;/span>: &lt;span style="color:#ae81ff">Helm&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">release&lt;/span>: &lt;span style="color:#ae81ff">monitor-bj-net&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">monitor-bj-net-k8s-prometheus&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">monitoring&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ingressClassName&lt;/span>: &lt;span style="color:#ae81ff">nginx&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">rules&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">host&lt;/span>: &lt;span style="color:#ae81ff">prometheus.desistdaydream.ltd&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">http&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">paths&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">backend&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">serviceName&lt;/span>: &lt;span style="color:#ae81ff">monitor-bj-net-k8s-prometheus&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">servicePort&lt;/span>: &lt;span style="color:#ae81ff">9090&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">path&lt;/span>: &lt;span style="color:#ae81ff">/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">pathType&lt;/span>: &lt;span style="color:#ae81ff">ImplementationSpecific&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="为-prometheus-添加基础认证">为 Prometheus 添加基础认证&lt;/h1>
&lt;p>Prometheus 通过 &lt;code>--web.config.file&lt;/code> 命令行标志来开启 &lt;strong>TLS&lt;/strong> 或者 &lt;strong>基本认证&lt;/strong> 功能。Prometheus 将会读取该标志指定的文件，通过该文件的配置来为 9090 端口添加 TLS 或者 基本认证。让人们在访问 9090 端口的 Web UI 或者使用 API 时，必须进行认证才可以操作。&lt;/p>
&lt;h2 id="web-config-文件详解">web-config 文件详解&lt;/h2>
&lt;p>该文件有 3 个主要字段&lt;/p>
&lt;ul>
&lt;li>tls_server_config&lt;/li>
&lt;li>http_server_config&lt;/li>
&lt;li>basic_auth_users&lt;/li>
&lt;/ul>
&lt;p>如果没有任何配置，则不开启任何 TLS 或 认证，只要配置了某个字段，就默认开启相关功能。&lt;/p>
&lt;h3 id="tls_server_config-object--为-prometheus-开启-tls">tls_server_config: &lt;!-- raw HTML omitted --> # 为 Prometheus 开启 TLS&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>cert_file: &lt;!-- raw HTML omitted -->&lt;/strong> # TLS 所需的证书文件&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>key_file: &lt;!-- raw HTML omitted -->&lt;/strong> # TLS 所需的私钥文件&lt;/p>
&lt;h1 id="x20-client_auth_type-string--默认值noclientcert">Server policy for client authentication. Maps to ClientAuth Policies.
# For more detail on clientAuth options:
# &lt;a href="https://golang.org/pkg/crypto/tls/#ClientAuthType">https://golang.org/pkg/crypto/tls/#ClientAuthType&lt;/a>
&lt;strong>client_auth_type: &lt;!-- raw HTML omitted -->&lt;/strong> # &lt;code>默认值：NoClientCert&lt;/code>&lt;/h1>
&lt;h1 id="x20--client_ca_file-filename-">CA certificate for client certificate authentication to the server.
[ client_ca_file: &lt;!-- raw HTML omitted --> ]&lt;/h1>
&lt;h1 id="x20--min_version-string--default--tls12-">Minimum TLS version that is acceptable.
[ min_version: &lt;!-- raw HTML omitted --> | default = &amp;ldquo;TLS12&amp;rdquo; ]&lt;/h1>
&lt;h1 id="x20--max_version-string--default--tls13-">Maximum TLS version that is acceptable.
[ max_version: &lt;!-- raw HTML omitted --> | default = &amp;ldquo;TLS13&amp;rdquo; ]&lt;/h1>
&lt;h1 id="x20----string--">List of supported cipher suites for TLS versions up to TLS 1.2. If empty,
# Go default cipher suites are used. Available cipher suites are documented
# in the go documentation:
# &lt;a href="https://golang.org/pkg/crypto/tls/#pkg-constants">https://golang.org/pkg/crypto/tls/#pkg-constants&lt;/a>
[ cipher_suites:
[ - &lt;!-- raw HTML omitted --> ] ]&lt;/h1>
&lt;h1 id="x20--prefer_server_cipher_suites-bool--default--true-">prefer_server_cipher_suites controls whether the server selects the
# client&amp;rsquo;s most preferred ciphersuite, or the server&amp;rsquo;s most preferred
# ciphersuite. If true then the server&amp;rsquo;s preference, as expressed in
# the order of elements in cipher_suites, is used.
[ prefer_server_cipher_suites: &lt;!-- raw HTML omitted --> | default = true ]&lt;/h1>
&lt;h1 id="x20----string---1">Elliptic curves that will be used in an ECDHE handshake, in preference
# order. Available curves are documented in the go documentation:
# &lt;a href="https://golang.org/pkg/crypto/tls/#CurveID">https://golang.org/pkg/crypto/tls/#CurveID&lt;/a>
[ curve_preferences:
[ - &lt;!-- raw HTML omitted --> ] ]&lt;/h1>
&lt;/li>
&lt;/ul>
&lt;h3 id="http_server_config-object--为-prometheus-开启-http2注意http2-仅支持-tls">http_server_config: &lt;!-- raw HTML omitted --> # 为 Prometheus 开启 HTTP/2。注意，HTTP/2 仅支持 TLS&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>http2: &lt;!-- raw HTML omitted -->&lt;/strong> # &lt;code>默认值：true&lt;/code>&lt;/li>
&lt;/ul>
&lt;h1 id="-required-passwords-are-hashed-with-bcrypt">Usernames and hashed passwords that have full access to the web
# server via basic authentication. If empty, no basic authentication is
# required. Passwords are hashed with bcrypt.&lt;/h1>
&lt;h3 id="basic_auth_users-mapstringstring--为-prometheus-server-开启基本认证">basic_auth_users: &amp;lt;map[STRING]STRING&amp;gt; # 为 Prometheus Server 开启基本认证&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>&lt;!-- raw HTML omitted -->: &lt;!-- raw HTML omitted -->&lt;/strong> # KEY 是用户名，VALUE 是密码
&lt;ul>
&lt;li>注意：密码必须是经过 hash 的字符串，可以通过&lt;a href="https://bcrypt-generator.com/">这个网站&lt;/a>在线获取 hash 过的字符串&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="配置示例">配置示例&lt;/h2>
&lt;p>在&lt;a href="https://bcrypt-generator.com/">这里&lt;/a>生成密码的 hash 值，比如我使用 &lt;code>Prometheus@lichenhao&lt;/code> 这个密码，生成的 hash 为 &lt;code>$2a$12$twJp6N9kL5aEf08Ja8XRAOImHOjCTBQvb485Uuz7hJLEX1XT4iVDm&lt;/code>&lt;/p>
&lt;p>在 /etc/prometheus/config_out/ 目录中创建一个 web-config.yml 文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>basic_auth_users:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Prometheus: $2a$12$twJp6N9kL5aEf08Ja8XRAOImHOjCTBQvb485Uuz7hJLEX1XT4iVDm
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>为 Promethues Server 添加命令行标志 &lt;code>--web.config.file=/etc/prometheus/config_out/web-config.yml&lt;/code>&lt;/p>
&lt;p>启动 Prometheus 后，将会需要认证信息，效果如下：
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/bx144g/1628063307526-21ac3e4b-150d-4e77-9a7c-5069ad006369.png" alt="image.png">&lt;/p></description></item><item><title>Docs: Instrumenting</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/instrumenting/instrumenting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/instrumenting/instrumenting/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://prometheus.io/docs/instrumenting/exporters/">官方文档,Instrumenting-Exporter&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://prometheus.io/docs/practices/instrumentation/">官方文档,最佳实践-Instrumentation&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Prometheus 可以通过 3 种方式从目标上 Scrape(抓取) 指标：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Instrumentation(检测仪)&lt;/strong> # 内部代码。将 Prometheus 的 Client Libraries(客户端库) 添加到程序代码中，以此暴露一个 endpoint，Prometheus Server 可以通过该 Endpoiint 抓取到指标。
&lt;ol>
&lt;li>可以理解为内嵌的 Exporter，比如 Prometheus Server 的 9090 端口的 &lt;code>/metrics&lt;/code> 就属于此类。&lt;/li>
&lt;li>说白了，就是被监控目标自己就可以吐出符合 Prometheus 格式的指标数据&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>**Exporters **# 外部程序。&lt;/li>
&lt;li>&lt;strong>Pushgateway&lt;/strong> # 针对需要推送指标的应用&lt;/li>
&lt;/ol>
&lt;h1 id="instrumentation">Instrumentation&lt;/h1>
&lt;h1 id="exporter">Exporter&lt;/h1>
&lt;p>在&lt;a href="https://github.com/prometheus/prometheus/wiki/Default-port-allocations">这里&lt;/a>可以看到经过 Prometheus 官方注册的各类 Exporter 所默认使用的端口号。&lt;/p>
&lt;h1 id="push-gateway">Push Gateway&lt;/h1></description></item><item><title>Docs: Instrumenting 原理解析</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/prometheus/prometheus-%E5%BC%80%E5%8F%91/instrumenting-%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/prometheus/prometheus-%E5%BC%80%E5%8F%91/instrumenting-%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>根据源码一步一步推到自学&lt;/li>
&lt;li>&lt;a href="https://github.com/prometheus/client_golang/blob/master/prometheus/go_collector.go">prometheus 默认自带的 Metrics 的实现方式&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://pkg.go.dev/github.com/prometheus/client_golang/prometheus">prometheus 库&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://pkg.go.dev/github.com/prometheus/client_golang/prometheus/promhttp">prometheus/promhttp 库&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Instrumenting 的实现主要依靠以下几种类型：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Desc(描述符)&lt;/strong> # 结构体。定义一个 Metric&lt;/li>
&lt;li>&lt;strong>Registerer(注册器)&lt;/strong> # 接口。根据 Metrics 注册一个 Collector(采集器)&lt;/li>
&lt;li>&lt;strong>Collector(采集器)&lt;/strong> # 接口。采集 Metrics 的具体实现&lt;/li>
&lt;li>&lt;strong>Gatherer(聚集器)&lt;/strong> # 接口。将采集到的 Metrics 聚集在一起&lt;/li>
&lt;/ul>
&lt;p>其中 Collector(采集器) 就像其名字一样，是定义采集 Metrics 的主要行为。在代码中，Collector(采集器) 表现为一个接口。这个接口有两个方法，&lt;code>Describe()&lt;/code> 与 &lt;code>Collect()&lt;/code>，其中在 &lt;code>**Collect()**&lt;/code>** 这个方法中，定义主要的采集 Metrics 行为**&lt;/p>
&lt;h1 id="deschttpspkggodevgithubcomprometheusclient_golangprometheusdesc描述符--用来描述-metric-的结构体">&lt;a href="https://pkg.go.dev/github.com/prometheus/client_golang/prometheus#Desc">Desc&lt;/a>(描述符) # 用来描述 Metric 的结构体&lt;/h1>
&lt;p>在 Prometheus 中，使用 **Desc 结构体 **来描述一个 Metric。Desc 是所有事物的基础，没有 Desc 也就无从采集 Metric，同时管理 Metric 也是通过 Desc&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Desc&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 完全限定名称。也就是 Metric 的名字，fqName 由 Namespace、Subsystem、Name 三部分组成
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">fqName&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Metric 的帮助信息
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">help&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// constLabelPairs(常量标签对) 包含基于常量标签的预先计算的 DTO标签对。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">constLabelPairs&lt;/span> []&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">dto&lt;/span>.&lt;span style="color:#a6e22e">LabelPair&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// variableLabels 包含 metrics 为其维护变量值的标签名称。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">variableLabels&lt;/span> []&lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// id 是 ConstLabels 与 fqName 两个值的 hash。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 它在所有已注册的 Desc(描述符) 中必须是唯一的，因此可以用作 Desc(描述符) 的 ID(标识符)。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span> &lt;span style="color:#66d9ef">uint64&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// dimHash 是标签名称(预设和变量) 和 Help 这两个值的 hash。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 具有相同 fqName 的每个 Desc 必须具有相同的 dimHash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">dimHash&lt;/span> &lt;span style="color:#66d9ef">uint64&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// err 是在每次构建过程中发生的错误。这个错误信息会报告注册 Desc 的时间
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Desc 是每个 &lt;strong>Metric 所使用的 Descriptor(描述符)&lt;/strong>。Desc 本质上是其对应的 Metric 的不可变的元数据。prometheus 包中那些常规 Metric 的实现，是用来在底层管理其对应的 Desc。只需要处理 Desc 即可使用诸 ExpvarCollector 或者 CustomCollectors 和 Metrics 之类的高级功能。&lt;/p>
&lt;blockquote>
&lt;p>这个描述符就类似于 Linux 中的 FD(文件描述符) 的作用。我打开一个文件，就可以通过该文件的 FD 对该文件进行读写。Prometheus 的 Desc 同理，实例化这个 Desc 结构体，就等于是打开了一个 Metric，可以通过 Metric 的 描述符 来对该 Metric 进行读写操作。&lt;/p>
&lt;/blockquote>
&lt;p>Descriptors registered with the same registry have to fulfill certain consistency and uniqueness criteria if they share the same fully-qualified name: They must have the same help string and the same label names (aka label dimensions) in each, constLabels and variableLabels, but they must differ in the values of the constLabels.&lt;/p>
&lt;p>Descriptors that share the same fully-qualified names and the same label values of their constLabels are considered equal.&lt;/p>
&lt;p>使用 &lt;code>NewDesc()&lt;/code> 函数来创建一个新的 Desc 实例。&lt;/p>
&lt;h2 id="desc-结构体中的属性也就是一个-metric-的元数据详解">Desc 结构体中的属性(也就是一个 Metric 的元数据)详解&lt;/h2>
&lt;p>参考：&lt;a href="https://github.com/prometheus/client_golang/blob/master/prometheus/desc.go#L46">源码注释&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>注意，源码注释参考是 GitHub 上的，不是 pkg.go 中的，GitHub 上代码所在的行很可能会变，可以通过 这里 直接点击 Desc 的连接跳转过去&lt;/p>
&lt;/blockquote>
&lt;p>在源码中，我们可以看到有如下 7 个属性&lt;/p>
&lt;ol>
&lt;li>fqName string&lt;/li>
&lt;li>help string&lt;/li>
&lt;li>constLabelPairs []*dto.LabelPair&lt;/li>
&lt;li>variableLabels []string&lt;/li>
&lt;li>id uint64&lt;/li>
&lt;li>dimHash uint64&lt;/li>
&lt;li>err error&lt;/li>
&lt;/ol>
&lt;p>假如现在有这么一个指标：&lt;/p>
&lt;pre>&lt;code># HELP go_info Information about the Go environment.
# TYPE go_info gauge
go_info{version=&amp;quot;go1.15.5&amp;quot;} 1
&lt;/code>&lt;/pre>
&lt;p>那么在 Prometheus 代码中 Metric 描述符对应的信息应该这么看：&lt;/p>
&lt;p>fqName、help、 constLabelPairs、variableLabels 这四个属性的值，将会响应给客户端&lt;/p>
&lt;p>**fqName **# 该 Metric 的名字&lt;/p>
&lt;blockquote>
&lt;p>就是上述指标中的 go_info&lt;/p>
&lt;/blockquote>
&lt;p>fqName 由 Namespace、Subsystem、Name 三部分组成&lt;/p>
&lt;p>&lt;strong>help string&lt;/strong> # 该 Metric 的帮助信息&lt;/p>
&lt;blockquote>
&lt;p>就是上述指标中的 Information about the Go environment&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>constLabelPairs []*dto.LabelPair&lt;/strong> # 该 Metric 中，标签值不可变的标签对列表&lt;/p>
&lt;blockquote>
&lt;p>在这个 Metirc 中没有 constLabelParis。常量标签对是在实例化 Desc 时设置的，标签值是不可变的。
LabelPair(标签对) 是一组键值对的组合。key 为 标签名称，value 为 标签值&lt;/p>
&lt;/blockquote>
&lt;p>constLabelPairs** **包含基于常量标签的预先计算的 DTO 标签对。&lt;/p>
&lt;p>constLabels 属性中的标签值是常量，不变的。因为可以在 Desc 中直接设置标签对的信息。&lt;/p>
&lt;p>这些不可变的指标由于是在代码中直接设置的，所以常出现在 histogram 类型的指标中，比如 etcd 中的 etcd_debugging_mvcc_db_compaction_total_duration_milliseconds 指标中的 le 标签的值就是一个常量，并不会随所在环境而改变。&lt;/p>
&lt;pre>&lt;code># HELP etcd_debugging_mvcc_db_compaction_total_duration_milliseconds Bucketed histogram of db compaction total duration.
# TYPE etcd_debugging_mvcc_db_compaction_total_duration_milliseconds histogram
etcd_debugging_mvcc_db_compaction_total_duration_milliseconds_bucket{le=&amp;quot;100&amp;quot;} 11331
etcd_debugging_mvcc_db_compaction_total_duration_milliseconds_bucket{le=&amp;quot;200&amp;quot;} 17071
....
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>variableLabels []string&lt;/strong> # 该 Metric 中，标签值可变的标签名称列表&lt;/p>
&lt;blockquote>
&lt;p>就是上述指标中的 version=&amp;ldquo;go1.15.5&amp;rdquo; 中的 version，表示该 Metric 的标签集的 key，这个标签的值是可变的。&lt;/p>
&lt;/blockquote>
&lt;p>variableLabels** **包含 &lt;a href="https://pkg.go.dev/github.com/prometheus/client_golang/prometheus?utm_source=gopls#Metric">Metric 接口&lt;/a> 所维护标签值的标签名称。&lt;/p>
&lt;p>variableLabels** **所定义的标签名称对应的标签值是可变的，因此这些值不是 Desc 中的一个属性(它们通过 &lt;a href="https://pkg.go.dev/github.com/prometheus/client_golang/prometheus?utm_source=gopls#Metric">Metric 接口&lt;/a> 管理)。&lt;/p>
&lt;p>比如 node_exporter 中采集到的 node_ipvs_backend_connections_active 这个指标，其中的的所有标签都是 variableLabels，标签值是采集器根据当前环境设定的。就像这个 Metric 中的 address、port 等等，都是可变的。&lt;/p>
&lt;pre>&lt;code># HELP node_ipvs_backend_connections_active The current active connections by local and remote address.
# TYPE node_ipvs_backend_connections_active gauge
node_ipvs_backend_connections_active{local_address=&amp;quot;10.100.121.107&amp;quot;,local_mark=&amp;quot;&amp;quot;,local_port=&amp;quot;9098&amp;quot;,proto=&amp;quot;TCP&amp;quot;,remote_address=&amp;quot;10.244.5.209&amp;quot;,remote_port=&amp;quot;9098&amp;quot;} 0
node_ipvs_backend_connections_active{local_address=&amp;quot;10.100.180.246&amp;quot;,local_mark=&amp;quot;&amp;quot;,local_port=&amp;quot;8500&amp;quot;,proto=&amp;quot;TCP&amp;quot;,remote_address=&amp;quot;10.244.3.23&amp;quot;,remote_port=&amp;quot;8500&amp;quot;} 0
...
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>id uint64&lt;/strong> # 不会响应给 scrape 请求&lt;/p>
&lt;p>&lt;strong>dimHash uint64&lt;/strong> # 不会响应给 scrape 请求&lt;/p>
&lt;p>&lt;strong>err error&lt;/strong> # 不会响应给 scrape 请求&lt;/p>
&lt;h2 id="newdeschttpspkggodevgithubcomprometheusclient_golangprometheusnewdesc">&lt;a href="https://pkg.go.dev/github.com/prometheus/client_golang/prometheus#NewDesc">NewDesc()&lt;/a>&lt;/h2>
&lt;p>参考：&lt;a href="https://pkg.go.dev/github.com/prometheus/client_golang/prometheus?utm_source=gopls#NewDesc">代码注释&lt;/a>
&lt;code>NewDesc()&lt;/code> 用来实例化 Desc 结构体，设置属性的值并初始化一个新的 Desc。&lt;/p>
&lt;p>实例化时产生的错误也会被记录在 Desc 中，并在注册该 Desc 时报告。&lt;/p>
&lt;p>在实例化时，variableLabels 和 constLabels 可以为 nil，fqName 不能为空，&lt;code>NewDesc()&lt;/code> 将会为其他未明确设置的属性设置默认值。&lt;/p>
&lt;h3 id="高级-newdesc">高级 NewDesc()&lt;/h3>
&lt;p>看完后面的章节再回来看这个，不理解 Collector、Registerer、Gatherer 的知识，无法理解这部分内容。参见&lt;a href="#HNvsE">后文&lt;/a>&lt;/p>
&lt;h2 id="exposed-metric暴露指标">Exposed Metric(暴露指标)&lt;/h2>
&lt;p>所谓 Exposed Metrics 就是让指标可以展示在 http 服务器上。也就是说通过 Exporter 监听的端口来获取 Metrics 的信息。&lt;/p>
&lt;p>想要暴露 Metrics，那么必须要先注册这些 Metrics，注册 Metrics 是通过 Collector 进行的。一般使用 prometheus.MustRegister() 注册一个 Metric。&lt;/p>
&lt;p>注册完成之后想要参见下文 Exposed Mestrics 来让 metrics 可访问&lt;/p>
&lt;h2 id="基本示例">基本示例&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Metrics 用来保存所有 Metrics
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Metrics&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">HelloWorldDesc&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">prometheus&lt;/span>.&lt;span style="color:#a6e22e">Desc&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">mutex&lt;/span> &lt;span style="color:#a6e22e">sync&lt;/span>.&lt;span style="color:#a6e22e">Mutex&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// NewMetrics 实例化所有的 Metrics,并为 Mestirs 设定一些基本信息
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">NewMetrics&lt;/span>() &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Metrics&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">Metrics&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">HelloWorldDesc&lt;/span>: &lt;span style="color:#a6e22e">prometheus&lt;/span>.&lt;span style="color:#a6e22e">NewDesc&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;exporter_hello_world&amp;#34;&lt;/span>, &lt;span style="color:#75715e">// Metric 名称
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Help Info for exporter hello world&amp;#34;&lt;/span>, &lt;span style="color:#75715e">// Metric 的帮助信息
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> []&lt;span style="color:#66d9ef">string&lt;/span>{&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>}, &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#75715e">// Metric 的可变标签值的标签 与 不可变标签值的标签
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> ),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="collectorhttpspkggodevgithubcomprometheusclient_golangprometheuscollector采集器">&lt;a href="https://pkg.go.dev/github.com/prometheus/client_golang/prometheus#Collector">Collector&lt;/a>(采集器)&lt;/h1>
&lt;p>在上文 Metric 部分，我们定义个了一个 Metric，下一步就是要为这个 Metric 采集值、设置标签值、设置值类型。此时就要使用一个名为 Collector 的接口，只要让这个 Metric 实现该接口，即可实现采集行为。&lt;/p>
&lt;p>&lt;strong>Collector(采集器&lt;/strong>) 是由 Prometheus 可以用来采集 Metrics 的任何东西实现的接口。 一个 Collector(采集器) 必须使用 &lt;a href="https://pkg.go.dev/github.com/prometheus/client_golang/prometheus?utm_source=gopls#Registerer">Registerer.Register()&lt;/a> 进行注册后，才可以进行采集 Metric 的工作。&lt;/p>
&lt;blockquote>
&lt;p>Registerer.Register() 指的是 &lt;a href="https://pkg.go.dev/github.com/prometheus/client_golang/prometheus?utm_source=gopls#Registerer">Registerer&lt;/a> 接口中的 Register() 方法&lt;/p>
&lt;/blockquote>
&lt;p>也就是说，任何实现了 Collector 接口的代码，都可以通过 Registerer 注册进来，并在监听的端口上暴露出采集到的 Metrics 数据。&lt;/p>
&lt;p>Collector 包含两个方法：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Describe()&lt;/strong> # Metric 的描述符&lt;/li>
&lt;li>&lt;strong>Collect()&lt;/strong> # 采集 Metric 的真正行为&lt;/li>
&lt;/ul>
&lt;p>可以看到，Collector 可以算包含了 Metrics，也就是说，注册了 Collector 也就等于相当于注册了 Metrics。&lt;/p>
&lt;h2 id="describe">Describe()&lt;/h2>
&lt;p>Describe sends the super-set of all possible descriptors of metrics collected by this Collector to the provided channel and returns once the last descriptor has been sent. The sent descriptors fulfill the consistency and uniqueness requirements described in the Desc documentation.&lt;/p>
&lt;p>It is valid if one and the same Collector sends duplicate descriptors. Those duplicates are simply ignored. However, two different Collectors must not send duplicate descriptors.&lt;/p>
&lt;p>Sending no descriptor at all marks the Collector as “unchecked”, i.e. no checks will be performed at registration time, and the Collector may yield any Metric it sees fit in its Collect method.&lt;/p>
&lt;p>This method idempotently sends the same descriptors throughout the lifetime of the Collector. It may be called concurrently and therefore must be implemented in a concurrency safe way.&lt;/p>
&lt;p>If a Collector encounters an error while executing this method, it must send an invalid descriptor (created with NewInvalidDesc) to signal the error to the registry.&lt;/p>
&lt;p>Describe 将此收集器收集的指标的所有可能描述符的超集发送到提供的通道，并在发送完最后一个描述符后返回。发送的描述符满足 Desc 文档中描述的一致性和唯一性要求。&lt;/p>
&lt;p>如果一个收集器和同一收集器发送重复的描述符，则该方法有效。这些重复项将被忽略。但是，两个不同的收集器不得发送重复的描述符。&lt;/p>
&lt;p>完全不发送任何描述符会将收集器标记为“未检查”，即在注册时将不执行任何检查，并且收集器可以在其 Collect 方法中产生它认为合适的任何度量标准。&lt;/p>
&lt;p>此方法在收集器的整个生命周期中均等地发送相同的描述符。它可以被同时调用，因此必须以并发安全的方式实现。&lt;/p>
&lt;p>如果收集器在执行此方法时遇到错误，则它必须发送一个无效的描述符（使用 NewInvalidDesc 创建）以向注册表发送错误信号&lt;/p>
&lt;h2 id="collect">Collect()&lt;/h2>
&lt;p>Collect is called by the Prometheus registry when collecting metrics. The implementation sends each collected metric via the provided channel and returns once the last metric has been sent. The descriptor of each sent metric is one of those returned by Describe (unless the Collector is unchecked, see above). Returned metrics that share the same descriptor must differ in their variable label values.&lt;/p>
&lt;p>This method may be called concurrently and must therefore be implemented in a concurrency safe way. Blocking occurs at the expense of total performance of rendering all registered metrics. Ideally, Collector implementations support concurrent readers.&lt;/p>
&lt;p>收集指标时，Prometheus 注册表会调用“收集”。 该实现通过提供的通道发送每个收集的度量，并在发送完最后一个度量后返回。 每个发送的指标的描述符都是 Describe 返回的指标之一（除非未选中收集器，请参见上文）。 共享相同描述符的返回指标必须在其变量标签值上有所不同。&lt;/p>
&lt;p>可以同时调用此方法，因此必须以并发安全的方式实现。 发生阻塞会以呈现所有已注册指标的总体性能为代价。 理想情况下，收集器实现支持并发读取器。&lt;/p>
&lt;h2 id="基本示例-1">基本示例&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">e&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Exporter&lt;/span>) &lt;span style="color:#a6e22e">Describe&lt;/span>(&lt;span style="color:#a6e22e">ch&lt;/span> &lt;span style="color:#66d9ef">chan&lt;/span>&lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">prometheus&lt;/span>.&lt;span style="color:#a6e22e">Desc&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">e&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Exporter&lt;/span>) &lt;span style="color:#a6e22e">Collect&lt;/span>(&lt;span style="color:#a6e22e">ch&lt;/span> &lt;span style="color:#66d9ef">chan&lt;/span>&lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#a6e22e">prometheus&lt;/span>.&lt;span style="color:#a6e22e">Metric&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="registererhttpspkggodevgithubcomprometheusclient_golangprometheusregisterer注册器">&lt;a href="https://pkg.go.dev/github.com/prometheus/client_golang/prometheus#Registerer">Registerer&lt;/a>(注册器)&lt;/h1>
&lt;p>Registerer is the interface for the part of a registry in charge of registering and unregistering. Users of custom registries should use Registerer as type for registration purposes (rather than the Registry type directly). In that way, they are free to use custom Registerer implementation(e.g. for testing purposes).&lt;/p>
&lt;h2 id="register">Register()&lt;/h2>
&lt;p>Register registers a new Collector to be included in metrics collection. It returns an error if the descriptors provided by the Collector are invalid or if they — in combination with descriptors of already registered Collectors — do not fulfill the consistency and uniqueness criteria described in the documentation of metric.Desc.&lt;/p>
&lt;p>If the provided Collector is equal to a Collector already registered (which includes the case of re-registering the same Collector), the returned error is an instance of AlreadyRegisteredError, which contains the previously registered Collector.&lt;/p>
&lt;p>A Collector whose Describe method does not yield any Desc is treated as unchecked. Registration will always succeed. No check for re-registering (see previous paragraph) is performed. Thus, the caller is responsible for not double-registering the same unchecked Collector, and for providing a Collector that will not cause inconsistent metrics on collection. (This would lead to scrape errors.)&lt;/p>
&lt;h2 id="mustregister">MustRegister()&lt;/h2>
&lt;p>&lt;code>MustRegister()&lt;/code> 的工作方式与 &lt;code>Register()&lt;/code> 相同，只不过可以注册&lt;strong>任意数量&lt;/strong>的&lt;strong>采集器&lt;/strong>，注册过程产生的任何错误都会直接 panic。代码逻辑非常简单，就是下面这样：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 其实就是一个循环，逐一为每个 Collector 执行 Register()
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Registry&lt;/span>) &lt;span style="color:#a6e22e">MustRegister&lt;/span>(&lt;span style="color:#a6e22e">cs&lt;/span> &lt;span style="color:#f92672">...&lt;/span>&lt;span style="color:#a6e22e">Collector&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">cs&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">Register&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> panic(&lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="unregister">Unregister()&lt;/h2>
&lt;p>Unregister unregisters the Collector that equals the Collector passed in as an argument. (Two Collectors are considered equal if their Describe method yields the same set of descriptors.) The function returns whether a Collector was unregistered. Note that an unchecked Collector cannot be unregistered (as its Describe method does not yield any descriptor).&lt;/p>
&lt;p>Note that even after unregistering, it will not be possible to register a new Collector that is inconsistent with the unregistered Collector, e.g. a Collector collecting metrics with the same name but a different help string. The rationale here is that the same registry instance must only collect consistent metrics throughout its lifetime.&lt;/p>
&lt;h1 id="gathererhttpspkggodevgithubcomprometheusclient_golangprometheusgatherer聚集器">&lt;a href="https://pkg.go.dev/github.com/prometheus/client_golang/prometheus#Gatherer">Gatherer&lt;/a>(聚集器)&lt;/h1>
&lt;p>参考：&lt;a href="https://pkg.go.dev/github.com/prometheus/client_golang/prometheus?utm_source=gopls#Gatherer">Gatherer 接口代码注释&lt;/a>
Gatherer is the interface for the part of a registry in charge of gathering the collected metrics into a number of MetricFamilies. The Gatherer interface comes with the same general implication as described for the Registerer interface.&lt;/p>
&lt;h2 id="gather">Gather()&lt;/h2>
&lt;p>Gather calls the Collect method of the registered Collectors and then gathers the collected metrics into a lexicographically sorted slice of uniquely named MetricFamily protobufs. Gather ensures that the returned slice is valid and self-consistent so that it can be used for valid exposition. As an exception to the strict consistency requirements described for metric.Desc, Gather will tolerate different sets of label names for metrics of the same metric family.&lt;/p>
&lt;p>Even if an error occurs, Gather attempts to gather as many metrics as possible. Hence, if a non-nil error is returned, the returned MetricFamily slice could be nil (in case of a fatal error that prevented any meaningful metric collection) or contain a number of MetricFamily protobufs, some of which might be incomplete, and some might be missing altogether. The returned error (which might be a MultiError) explains the details. Note that this is mostly useful for debugging purposes. If the gathered protobufs are to be used for exposition in actual monitoring, it is almost always better to not expose an incomplete result and instead disregard the returned MetricFamily protobufs in case the returned error is non-nil.&lt;/p>
&lt;h1 id="其他">其他&lt;/h1>
&lt;h2 id="exposed-metric暴露指标-1">Exposed Metric(暴露指标)&lt;/h2>
&lt;p>Prometheus 暴露指标是通过 &lt;a href="https://pkg.go.dev/github.com/prometheus/client_golang/prometheus/promhttp#HandlerFor">promhttp.HandleFor()&lt;/a> 函数实现的&lt;/p>
&lt;h2 id="高级版-newdesc">高级版 NewDesc()&lt;/h2>
&lt;p>除了 NewDesc() 这种基本实例化 Desc 的方式，还有更高级的，可以直接定义指定类型的 Metric，并且通过这种方式实例化的 Desc 可以直接被 prometheus.MustRegister() 函数注册，并且相关的 struct 都自带了一些采集行为相关的方法，只需要再自己实现具体逻辑即可。&lt;/p>
&lt;p>比如&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// gauge 结构体实现了 gauge 接口
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">gauge&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// valBits contains the bits of the represented float64 value. It has
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// to go first in the struct to guarantee alignment for atomic
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// operations. http://golang.org/pkg/sync/atomic/#pkg-note-BUG
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">valBits&lt;/span> &lt;span style="color:#66d9ef">uint64&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">selfCollector&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">desc&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Desc&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">labelPairs&lt;/span> []&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">dto&lt;/span>.&lt;span style="color:#a6e22e">LabelPair&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>gauge 类型的 Metric 结构体，包含了 *Desc 的属性。并且 NewGauge() 实例化就是调用的 NewDesc()&lt;/p>
&lt;blockquote>
&lt;p>NewGauge() 返回的是一个 Gauge 的接口&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">NewGauge&lt;/span>(&lt;span style="color:#a6e22e">opts&lt;/span> &lt;span style="color:#a6e22e">GaugeOpts&lt;/span>) &lt;span style="color:#a6e22e">Gauge&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">desc&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">NewDesc&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">BuildFQName&lt;/span>(&lt;span style="color:#a6e22e">opts&lt;/span>.&lt;span style="color:#a6e22e">Namespace&lt;/span>, &lt;span style="color:#a6e22e">opts&lt;/span>.&lt;span style="color:#a6e22e">Subsystem&lt;/span>, &lt;span style="color:#a6e22e">opts&lt;/span>.&lt;span style="color:#a6e22e">Name&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">opts&lt;/span>.&lt;span style="color:#a6e22e">Help&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">nil&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">opts&lt;/span>.&lt;span style="color:#a6e22e">ConstLabels&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">gauge&lt;/span>{&lt;span style="color:#a6e22e">desc&lt;/span>: &lt;span style="color:#a6e22e">desc&lt;/span>, &lt;span style="color:#a6e22e">labelPairs&lt;/span>: &lt;span style="color:#a6e22e">desc&lt;/span>.&lt;span style="color:#a6e22e">constLabelPairs&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">result&lt;/span>.&lt;span style="color:#a6e22e">init&lt;/span>(&lt;span style="color:#a6e22e">result&lt;/span>) &lt;span style="color:#75715e">// Init self-collection.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="应用示例">应用示例&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">cpuTemp&lt;/span> = &lt;span style="color:#a6e22e">prometheus&lt;/span>.&lt;span style="color:#a6e22e">NewGauge&lt;/span>(&lt;span style="color:#a6e22e">prometheus&lt;/span>.&lt;span style="color:#a6e22e">GaugeOpts&lt;/span>{&lt;span style="color:#a6e22e">Name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;a_cpu_temperature_celsius&amp;#34;&lt;/span>,&lt;span style="color:#a6e22e">Help&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Current temperature of the CPU.&amp;#34;&lt;/span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">prometheus&lt;/span>.&lt;span style="color:#a6e22e">MustRegister&lt;/span>(&lt;span style="color:#a6e22e">cpuTemp&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">cpuTemp&lt;/span>.&lt;span style="color:#a6e22e">Set&lt;/span>(&lt;span style="color:#ae81ff">65.3&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里通过 prometheus.NewGauge() 直接定义了一个 Metric，并通过 prometheus.MustRegister(cpuTemp) 注册这个 Metirc，并且可以通过现成的 Set() 方法为该 Metric 设定一个值。&lt;/p>
&lt;p>注意：prometheus.MustRegister() 可以同时注册多个 Metircs：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">MustRegister&lt;/span>(&lt;span style="color:#a6e22e">cs&lt;/span> &lt;span style="color:#f92672">...&lt;/span>&lt;span style="color:#a6e22e">Collector&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">DefaultRegisterer&lt;/span>.&lt;span style="color:#a6e22e">MustRegister&lt;/span>(&lt;span style="color:#a6e22e">cs&lt;/span>&lt;span style="color:#f92672">...&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 prometheus 包中，有如下几个高级的 NewDesc()(待补充)：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://pkg.go.dev/github.com/prometheus/client_golang/prometheus?utm_source=gopls#NewCounter">NewCounter()&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://pkg.go.dev/github.com/prometheus/client_golang/prometheus?utm_source=gopls#NewCounterVec">NewCounterVec()&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://pkg.go.dev/github.com/prometheus/client_golang/prometheus?utm_source=gopls#NewGauge">NewGauge()&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://pkg.go.dev/github.com/prometheus/client_golang/prometheus?utm_source=gopls#NewGaugeVec">NewGaugeVec()&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://pkg.go.dev/github.com/prometheus/client_golang/prometheus?utm_source=gopls#NewHistogram">NewHistogram()&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://pkg.go.dev/github.com/prometheus/client_golang/prometheus?utm_source=gopls#HistogramVec">NewHistogramVec()&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://pkg.go.dev/github.com/prometheus/client_golang/prometheus?utm_source=gopls#NewSummary">NewSummary()&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://pkg.go.dev/github.com/prometheus/client_golang/prometheus?utm_source=gopls#SummaryVec">NewSummaryVec()&lt;/a>&lt;/li>
&lt;li>。。。等等&lt;/li>
&lt;/ul>
&lt;p>带 Vec 的是可以为 Metric 设置标签的函数&lt;/p></description></item><item><title>Docs: Journal</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/journal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/journal/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://man7.org/linux/man-pages/man8/systemd-journald.service.8.html">Manual,systemd-journald.service(8)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>相关服务说明&lt;/p>
&lt;ul>
&lt;li>systemd-Journald.service # 日志功能通过该 Unit 来实现，是一个用于收集和存储日志数据的系统服务，是系统启动前要启动的第一个进程，Journald 会把所有收集到的信息保存在内存中。&lt;/li>
&lt;li>rsyslog.service # 另一种日志数据持久化，Journald 会把日志信息转发给 rsyslog.service 进行处理和保存，如果没有 Journald，rsyslog 也可以自动生成日志而不用从 journald 去获取&lt;/li>
&lt;li>logrotate # logrotate 会对日志文件进行轮替操作，i.e.把已经非常大的日志文件改名后，创建一个新的日志文件，新产生的日志会保存在新文件中，老文件保留一定时期后会自动清除&lt;/li>
&lt;/ul>
&lt;h1 id="journald-关联文件与配置">Journald 关联文件与配置&lt;/h1>
&lt;p>&lt;strong>/etc/systemd/journal.conf&lt;/strong>&lt;/p>
&lt;h2 id="日志存放路径">日志存放路径&lt;/h2>
&lt;p>&lt;strong>/run/log/journal/${MACHINE-ID}/*&lt;/strong>
&lt;strong>/var/log/journal/${MACHINE-ID}/*&lt;/strong>&lt;/p>
&lt;p>默认情况下，journald 的日志保存在 /run/log/journal 中，系统重启就会清除。通过新建 /var/log/journal 目录，日志会自动记录到这个目录中，并永久存储。&lt;/p>
&lt;p>路径中的 MACHINE-ID 的值，可以通过 &lt;code>cat /etc/machine-id&lt;/code> 命令获取&lt;/p>
&lt;pre>&lt;code>root@lichenhao:/var/log/journal# ls
c14766a3e9ae49a3872fb9b7e2583710
root@lichenhao:/var/log/journal# cat /etc/machine-id
c14766a3e9ae49a3872fb9b7e2583710
&lt;/code>&lt;/pre>
&lt;p>所有 journal 程序生成的日志，都会存在 MACHIN-ID 目录下&lt;/p>
&lt;pre>&lt;code>root@lichenhao:/var/log/journal/c14766a3e9ae49a3872fb9b7e2583710# ll -h
total 153M
drwxr-sr-x+ 2 root systemd-journal 4.0K Feb 21 23:15 ./
drwxr-sr-x+ 3 root systemd-journal 46 Dec 9 17:19 ../
-rw-r-----+ 1 root systemd-journal 40M Dec 28 16:23 'system@aa6b2b3f8f9d46fdb169f9d8aaab56c3-0000000000000001-0005b6048d0b7824.journal'
-rw-r-----+ 1 root systemd-journal 32M Jan 22 12:39 'system@aa6b2b3f8f9d46fdb169f9d8aaab56c3-00000000000080e9-0005b781fc8c48d9.journal'
-rw-r-----+ 1 root systemd-journal 32M Feb 21 23:10 'system@aa6b2b3f8f9d46fdb169f9d8aaab56c3-000000000000df93-0005b975c74c3caf.journal'
-rw-r-----+ 1 root systemd-journal 40M Mar 12 15:25 system.journal
-rw-r-----+ 1 root systemd-journal 8.0M Dec 28 16:23 'user-1000@571778ddc0db463990a85592631fa5e8-0000000000000496-0005b6049323448d.journal'
&lt;/code>&lt;/pre>
&lt;h1 id="journalctl-命令行工具">journalctl 命令行工具&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://man7.org/linux/man-pages/man1/journalctl.1.html">Manual(手册)，journalctl(1)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Systemd 统一管理所有 Unit 的启动日志。带来的好处就是，可以只用 journalctl 一个命令，查看所有日志（内核日志和应用日志）。日志的配置文件是/etc/systemd/journald.conf。journalctl 功能强大，用法非常多。&lt;/p>
&lt;h2 id="syntax语法">Syntax(语法)&lt;/h2>
&lt;p>&lt;strong>journalctl [OPTIONS] [MATCHES]&lt;/strong>&lt;/p>
&lt;h3 id="options">OPTIONS&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>&amp;ndash;disk-usage&lt;/strong> # 显示所有日志文件的磁盘使用情况，包括持久化和临时的日志。&lt;/li>
&lt;li>&lt;strong>-f, &amp;ndash;follow&lt;/strong> # 实时更新&lt;/li>
&lt;li>&lt;strong>&amp;ndash;file=FILE&lt;/strong> # 查看指定文件中的日志信息，FILE 可以使用&amp;quot;?&amp;ldquo;与&amp;rdquo;*&amp;ldquo;进行匹配。常用于查看从别的设备上拷贝过来的日志文件&lt;/li>
&lt;li>&lt;strong>-p UNM&lt;/strong> # 指定要显示的日志级别(NUM 为 0-7 级)&lt;/li>
&lt;li>&lt;strong>-u UNIT&lt;/strong> #显示指定的 unit 的日志信息&lt;/li>
&lt;/ul>
&lt;p>格式选项&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&amp;ndash;no-pager&lt;/strong> # 在单一页面显示信息，不分页。默认情况下，若日志过长，需要使用 → 方向键翻页才能查看后面的日志内容。&lt;/li>
&lt;li>&lt;strong>-o, &amp;ndash;output=&lt;!-- raw HTML omitted -->&lt;/strong> # 指定输出格式。&lt;code>默认值：short&lt;/code>
&lt;ul>
&lt;li>可用的格式有：json、json-pretty、verbose、export、with-unit 等等&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>过滤选项&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&amp;ndash;output-fields=FIELD&lt;/strong> # 显示指定字段的日志，多个字段以 &lt;code>,&lt;/code> 分割。
&lt;ul>
&lt;li>字段筛选仅对 -o 选项指定的 verbose、export、json、json-pretty、json-sse、json-seq 这几个输出格式有效&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>-S, &amp;ndash;since TIME&lt;/strong> 与** -U, &amp;ndash;unitl TIME** # 设置输出日志信息的开始与结束时间&lt;/li>
&lt;/ul>
&lt;h2 id="example">EXAMPLE&lt;/h2>
&lt;ul>
&lt;li>查看指定用户的日志
&lt;ul>
&lt;li>sudo journalctl _UID=33 &amp;ndash;since today&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>查看指定进程的日志
&lt;ul>
&lt;li>sudo journalctl _PID=1&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>以 JSON 格式仅输出 MESSAGE 与 _CMDLINE 字段的消息
&lt;ul>
&lt;li>journalctl -u docker -ojson-pretty &amp;ndash;output-fields=MESSAGE,_CMDLINE&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>查看指定时间的日志
&lt;ul>
&lt;li>sudo journalctl &amp;ndash;since=&amp;ldquo;2012-10-30 18:17:16&amp;rdquo;&lt;/li>
&lt;li>sudo journalctl &amp;ndash;since &amp;ldquo;20 min ago&amp;rdquo;&lt;/li>
&lt;li>sudo journalctl &amp;ndash;since yesterday&lt;/li>
&lt;li>sudo journalctl &amp;ndash;since 09:00 &amp;ndash;until &amp;ldquo;1 hour ago&amp;rdquo;&lt;/li>
&lt;li>journalctl &amp;ndash;since &amp;ldquo;2018-11-13&amp;rdquo; &amp;ndash;until &amp;ldquo;2018-11-14 03:00&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="查看所有日志默认情况下-只保存本次启动的日志">查看所有日志（默认情况下 ，只保存本次启动的日志）&lt;/h1>
&lt;p>$ sudo journalctl&lt;/p>
&lt;h1 id="查看内核日志不显示应用日志">查看内核日志（不显示应用日志）&lt;/h1>
&lt;p>$ sudo journalctl -k&lt;/p>
&lt;h1 id="查看系统本次启动的日志">查看系统本次启动的日志&lt;/h1>
&lt;p>$ sudo journalctl -b&lt;/p>
&lt;p>$ sudo journalctl -b -0&lt;/p>
&lt;h1 id="查看上一次启动的日志需更改设置">查看上一次启动的日志（需更改设置）&lt;/h1>
&lt;p>$ sudo journalctl -b -1&lt;/p>
&lt;h1 id="显示尾部的最新-10-行日志">显示尾部的最新 10 行日志&lt;/h1>
&lt;p>$ sudo journalctl -n&lt;/p>
&lt;h1 id="显示尾部指定行数的日志">显示尾部指定行数的日志&lt;/h1>
&lt;p>$ sudo journalctl -n 20&lt;/p>
&lt;h1 id="查看指定服务的日志">查看指定服务的日志&lt;/h1>
&lt;p>$ sudo journalctl /usr/lib/systemd/systemd&lt;/p>
&lt;h1 id="查看某个路径的脚本的日志">查看某个路径的脚本的日志&lt;/h1>
&lt;p>$ sudo journalctl /usr/bin/bash&lt;/p>
&lt;h1 id="查看某个-unit-的日志">查看某个 Unit 的日志&lt;/h1>
&lt;p>$ sudo journalctl -u nginx.service&lt;/p>
&lt;p>$ sudo journalctl -u nginx.service &amp;ndash;since today&lt;/p>
&lt;h1 id="实时滚动显示某个-unit-的最新日志">实时滚动显示某个 Unit 的最新日志&lt;/h1>
&lt;p>$ sudo journalctl -u nginx.service -f&lt;/p>
&lt;h1 id="合并显示多个-unit-的日志">合并显示多个 Unit 的日志&lt;/h1>
&lt;p>$ journalctl -u nginx.service -u php-fpm.service &amp;ndash;since today&lt;/p>
&lt;h1 id="查看指定优先级及其以上级别的日志共有-8-级">查看指定优先级（及其以上级别）的日志，共有 8 级&lt;/h1>
&lt;h1 id="0-emerg">0: emerg&lt;/h1>
&lt;h1 id="1-alert">1: alert&lt;/h1>
&lt;h1 id="2-crit">2: crit&lt;/h1>
&lt;h1 id="3-err">3: err&lt;/h1>
&lt;h1 id="4-warning">4: warning&lt;/h1>
&lt;h1 id="5-notice">5: notice&lt;/h1>
&lt;h1 id="6-info">6: info&lt;/h1>
&lt;h1 id="7-debug">7: debug&lt;/h1>
&lt;p>$ sudo journalctl -p err -b&lt;/p>
&lt;h1 id="指定日志文件占据的最大空间">指定日志文件占据的最大空间&lt;/h1>
&lt;p>$ sudo journalctl &amp;ndash;vacuum-size=1G&lt;/p>
&lt;h1 id="指定日志文件保存多久">指定日志文件保存多久&lt;/h1>
&lt;p>$ sudo journalctl &amp;ndash;vacuum-time=1years&lt;/p></description></item><item><title>Docs: kube-prometheus 项目</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/prometheus/prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/prometheus-operator/kube-prometheus-%E9%A1%B9%E7%9B%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/prometheus/prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/prometheus-operator/kube-prometheus-%E9%A1%B9%E7%9B%AE/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/prometheus-operator/kube-prometheus">GitHub 项目，prometheus-operator/kube-prometheus&lt;/a>
&lt;ul>
&lt;li>部署文件
&lt;ul>
&lt;li>&lt;a href="https://github.com/coreos/kube-prometheus/tree/master/manifests">https://github.com/coreos/kube-prometheus/tree/master/manifests&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/prometheus-operator/kube-prometheus/tree/main/manifests">https://github.com/prometheus-operator/kube-prometheus/tree/main/manifests&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://github.com/prometheus-community/helm-charts">GitHub 项目，prometheus-community/helm-charts&lt;/a>（kube-prometheus 项目的 Helm Chart）&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="背景">背景&lt;/h2>
&lt;p>该项目曾经属于 prometheus operator 项目的一部分，后来挪到 coreos 社区中，再后来又挪回 prometheus operator 社区中，并作为一个单独的 repo 存在。&lt;/p>
&lt;p>kube-prometheus 在 prometheus-operator 基础上，给用户提供了一套完整的 yaml 文件，这样就不用让用户在创建完 operator 之后，还要自己写一大堆 prometheus 相关的 yaml 才能把监控系统用起来。&lt;/p>
&lt;p>这套完整的 yaml 文件就在上面所写的‘部署文件’链接中,其中包括 prometheus 部署所用的各种 yaml 文件以及配置生成文件、RBAC、告警文件、grafana 还有 grafna 模板等等&lt;/p>
&lt;h2 id="兼容矩阵">兼容矩阵&lt;/h2>
&lt;h1 id="部署">部署&lt;/h1></description></item><item><title>Docs: Label 与 Relabeling</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/log-clients/promtail/label-%E4%B8%8E-relabeling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/log-clients/promtail/label-%E4%B8%8E-relabeling/</guid><description>
&lt;p>Promtail 的 Label 与 Relabeling 功能与 Prometheus 中的概念相同&lt;/p>
&lt;p>Promtail 具有一个嵌入式 Web 服务器，可以通过配置文件的 &lt;code>server&lt;/code> 字段配置监听的端口，默认监听 80 端口&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/mdqko5/1616129665346-dc2414b8-d71a-4d16-864a-019c0706ec01.png" alt="">&lt;/p>
&lt;p>这个 Web 页面与 Prometheus 的页面基本一样，只不过更简单，只有 Service Dicovery 和 Targets 两个页面。&lt;/p>
&lt;blockquote>
&lt;p>也确实只要两个页面就够了，在 Loki 套件中，Promtail 就是用来 发现目标、重新标记、采集日志、推送日志 的。&lt;/p>
&lt;/blockquote>
&lt;p>在服务发现页面里，也有 Discovered Labels 和 Target Labels 这两个&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/mdqko5/1616129665338-c95fc783-cbd1-4e6c-958f-6a8a78448899.png" alt="">&lt;/p>
&lt;p>只不过 Journal 这个目标发现程序命名发现了很多标签，但是却显示不出来，这个比较奇怪&lt;/p></description></item><item><title>Docs: logcli 命令行工具</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/loki/loki-%E7%AE%A1%E7%90%86/logcli-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/loki/loki-%E7%AE%A1%E7%90%86/logcli-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;h2 id="参考">参考：&lt;/h2>
&lt;/blockquote>
&lt;p>export LOKI_ADDR=http://localhost:3100&lt;/p>
&lt;p>在 &lt;a href="https://github.com/grafana/loki/releases">https://github.com/grafana/loki/releases&lt;/a> 该界面下载 logcli 工具的二进制文件，并放到系统 $PATH 下。&lt;/p>
&lt;p>二进制文件有了之后，配置一下 logcli 所需要的环境变量 export LOKI_ADDR=http://localhost:3100 然后就可以使用了&lt;/p>
&lt;p>下面是一些命令使用示例&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>[&lt;span style="color:#ae81ff">root@master-1 bin]# logcli labels job&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">http://172.38.40.212:31000/loki/api/v1/label/job/values?end=1600402177427090944&amp;amp;start=1600398577427090944&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">varlogs&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[&lt;span style="color:#ae81ff">root@master-1 bin]# logcli query &amp;#39;{job=&amp;#34;varlogs&amp;#34;}&amp;#39; | more&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">http://172.38.40.212:31000/loki/api/v1/query_range?direction=BACKWARD&amp;amp;end=1600402187037107678&amp;amp;limit=30&amp;amp;query=%7Bjob%3D%22varlogs%22%7D&amp;amp;start=1600398587037107678&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">Common labels&lt;/span>: {&lt;span style="color:#ae81ff">job=&amp;#34;varlogs&amp;#34;}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">2020-09-18T11:48:50&lt;/span>&lt;span style="color:#ae81ff">+08&lt;/span>:&lt;span style="color:#ae81ff">00&lt;/span> {&lt;span style="color:#ae81ff">filename=&amp;#34;/var/log/host/messages&amp;#34;} Sep 18 11:48:50 master-1 kubelet: W0918 11:48:50.468511 30889 container.go:526] Failed to update stats for container &amp;#34;/system&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">.slice/docker-f326688c0b9b38fb8190bba72eb12d55e2017a9624889948ac118e6b9eb1199b.scope&amp;#34;: unable to determine device info for dir: /var/lib/docker/overlay2/51f0b901d76af9efd801abb473d0b7d5b27a193ccb990&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">d3db1cac1799a2a0432/diff: stat failed on /var/lib/docker/overlay2/51f0b901d76af9efd801abb473d0b7d5b27a193ccb990d3db1cac1799a2a0432/diff with error&lt;/span>: &lt;span style="color:#66d9ef">no&lt;/span> &lt;span style="color:#ae81ff">such file or directory, continuing to push stat&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">s&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...&lt;span style="color:#ae81ff">...&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: LogQL</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/loki/logql/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/loki/logql/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/logql/">官方文档，LogQL&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/0dXT0fIreZk6_4ZL4S8lHg">公众号，Loki 查询语言 LogQL 使用&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Log Query Language(日志查询语言，简称 LogQL)&lt;/strong> 受 PromQL 启发，可以看作是分布式的 grep 命令，用来从汇总的日志源筛选日志。LogQL 通过 labels(标签) 和 operators(运算符) 进行过滤。&lt;/p>
&lt;p>&lt;strong>LogQL 查询有两种类型：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Log Queries(日志查询)&lt;/strong> # 根据查询语句返回日志条目，每行是一条日志。
&lt;ul>
&lt;li>基本的日志查询由两部分组成
&lt;ul>
&lt;li>log stream selector # 日志流选择器&lt;/li>
&lt;li>filter expression # 过滤表达式&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Metric Queries(指标查询)&lt;/strong> # 用于扩展日志查询并根据 Log Queries 中的日志计数计算值。通过这种查询语句，可以计算将日志数据量化成指标信息，并且，Promtail 可以通过这种查询语句将指标信息，填充到自己暴露的 Metrics 端点中。&lt;/li>
&lt;/ul>
&lt;p>注意：由于 Loki 的设计，所有 LogQL 查询都必须包含一个日志流选择器&lt;/p>
&lt;p>日志流选择器确定将搜索多少日志流（日志内容的唯一来源，例如文件）。然后，更细粒度的日志流选择器将搜索到的流的数量减少到可管理的数量。这意味着传递给日志流选择器的标签将影响查询执行的相对性能。然后使用过滤器表达式对来自匹配日志流的聚合日志进行分布式 grep。&lt;/p>
&lt;h1 id="log-queries日志查询">Log Queries(日志查询)&lt;/h1>
&lt;p>基本的日志查询由两部分组成：&lt;/p>
&lt;ul>
&lt;li>**Log Stream Selector(日志流选择器) **#&lt;/li>
&lt;li>**Log Pipeline(日志管道) **#&lt;/li>
&lt;/ul>
&lt;p>注意：由于 Loki 的设计原则，所有的 LogQL 查询必须包含 Log Stream Selector(日志流选择器)
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/xgx9x4/1621837564259-416660f0-81ef-4d14-9086-dbda268daf9f.png" alt="image.png">
&lt;strong>日志流选择器&lt;/strong>决定了有多少日志流将被搜索到，一个更细粒度的日志流选择器将搜索到流的数量减少到一个可管理的数量。所以传递给日志流选择器的标签将影响查询执行的性能。
而日志流选择器后面的&lt;strong>日志管道&lt;/strong>是可选的，日志管道是一组阶段表达式，它们被串联在一起应用于所过滤的日志流，每个表达式都可以过滤、解析和改变日志行内容以及各自的标签。
下面的例子显示了一个完整的日志查询的操作：&lt;/p>
&lt;pre>&lt;code>{container=&amp;quot;query-frontend&amp;quot;,namespace=&amp;quot;loki-dev&amp;quot;} |= &amp;quot;metrics.go&amp;quot; | logfmt | duration &amp;gt; 10s and throughput_mb &amp;lt; 500
&lt;/code>&lt;/pre>
&lt;p>该查询语句由以下几个部分组成：&lt;/p>
&lt;ul>
&lt;li>一个日志流选择器 &lt;code>{container=&amp;quot;query-frontend&amp;quot;,namespace=&amp;quot;loki-dev&amp;quot;}&lt;/code>，用于过滤 &lt;code>loki-dev&lt;/code> 命名空间下面的 &lt;code>query-frontend&lt;/code> 容器的日志&lt;/li>
&lt;li>然后后面跟着一个日志管道 &lt;code>|= &amp;quot;metrics.go&amp;quot; | logfmt | duration &amp;gt; 10s and throughput_mb &amp;lt; 500&lt;/code>，这管道表示将筛选出包含 &lt;code>metrics.go&lt;/code> 这个词的日志，然后解析每一行日志提取更多的表达并进行过滤&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>为了避免转义特色字符，你可以在引用字符串的时候使用单引号，而不是双引号，比如 &lt;code>\w+1&lt;/code> 与 &amp;ldquo;\w+&amp;rdquo; 是相同的。&lt;/p>
&lt;/blockquote>
&lt;h2 id="log-stream-selector日志流选择器">Log Stream Selector(日志流选择器)&lt;/h2>
&lt;p>Log Stream Selector 用于确定查询结果中应该包括哪些日志流。Log Stream Selector 由一个或多个 &lt;strong>Key/Value Paire(键/值对)&lt;/strong> 组成，其中每个键是一个日志标签，每个值是该标签的值。所谓的日志流就是一行一行的日志，组合在一起，形成的一种类似数据流的感觉，从上到下哗哗流水那种感觉~日志流说白了就是日志的集合。stream(流) 的概念如果在 Prometheus 中描述，那就是 series(序列) 的概念。&lt;/p>
&lt;p>Log Stream Selector 中的键值对应包装在一对花括号中，比如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#960050;background-color:#1e0010">job=&lt;/span>&lt;span style="color:#f92672">&amp;#34;kube-system/etcd&amp;#34;&lt;/span>,&lt;span style="color:#960050;background-color:#1e0010">container=&lt;/span>&lt;span style="color:#f92672">&amp;#34;etcd&amp;#34;&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在上面这个例子中，所有具有 job 标签，值为 kube-system/etcd 和 container 标签，值为 etcd 的日志流将被包含在查军结果中。&lt;/p>
&lt;p>这种语法与 Prometheus 标签选择器 的语法一样。参考 PromQL,prometheus 查询语言 文章中 即时向量 章节中的匹配说明&lt;/p>
&lt;p>上面 LogQL 的执行效果如下：
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/xgx9x4/1616129551117-ca616a54-c0f1-48e3-868b-9f43f2138f1a.jpeg" alt="">&lt;/p>
&lt;p>注意：如果想要获取所有日志，使用这种方式：&lt;/p>
&lt;pre>&lt;code>{job=~&amp;quot;..*&amp;quot;}
&lt;/code>&lt;/pre>
&lt;h2 id="log-pipeline日志管道">Log Pipeline(日志管道)&lt;/h2>
&lt;p>Log Pipeline(日志管道) 可以通过 &lt;code>|&lt;/code> 符号附加到 Log Stream Selector(日志流选择器) 语句后面，以便对日志流进一步处理和过滤。&lt;/p>
&lt;p>Log Pipeline 通常由一个或多个 &lt;strong>Expression(表达式)&lt;/strong> 组成，多个表达式以 &lt;code>|&lt;/code> 符号分割。这用法其实跟 Linux 中使用命令并通过管道传递结果给下一个命令的用法一模一样。&lt;/p>
&lt;p>可用的 Log Pipeline 有如下几种&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/logql/#line-filter-expression">&lt;strong>Line Filter Expression&lt;/strong>&lt;/a>&lt;strong>(行过滤表达式)&lt;/strong> # 最基本的过滤方式，通过关键字匹配每一行的日志内容&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/logql/#parser-expression">&lt;strong>Parser Expression&lt;/strong>&lt;/a>**(解析表达式) **# 以指定方式解析日志内容，并将解析结果提取为标签。&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/logql/#label-filter-expression">&lt;strong>Label Filter Expression&lt;/strong>&lt;/a>&lt;strong>(标签过滤表达式)&lt;/strong> #&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/logql/#line-format-expression">&lt;strong>Line Format Expression&lt;/strong>&lt;/a>&lt;strong>(行格式化表达式)&lt;/strong> #&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/logql/#labels-format-expression">&lt;strong>Labels Format Expression&lt;/strong>&lt;/a>&lt;strong>(标签格式化表达式)&lt;/strong> #&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/logql/#unwrapped-range-aggregations">&lt;strong>Unwrap Expression&lt;/strong>&lt;/a>** **#
&lt;ul>
&lt;li>这是一个特殊的表达式，只能在指标查询中使用。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>其中一些表达式可以改变日志内容和相应的标签，然后可用于进一步 过滤和处理表达式 或 指标查询。&lt;/p>
&lt;h3 id="line-filter-expression行过滤表达式">Line Filter Expression(行过滤表达式)&lt;/h3>
&lt;p>通过 日志流选择器 获取到想要的日志后，可以使用 Line Filter Expression(行过滤表达式) 对这些日志进行过滤。过滤表达式 可以只是文本或正则表达式，比如&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 过滤出日志内容中，包含 timeout 字符串的日志行。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>job&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;kube-system/etcd&amp;#34;&lt;/span>,container&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;etcd&amp;#34;&lt;/span>&lt;span style="color:#f92672">}&lt;/span> |&lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;timeout&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 匹配 {job=&amp;#34;nginx-promtail&amp;#34;} 日志流中所有日志行中，不包含 天津市 字符串的行&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>job&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;nginx-promtail&amp;#34;&lt;/span>&lt;span style="color:#f92672">}&lt;/span> !&lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;天津市&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意：过滤表达式不能单独使用，必须基于 日志流选择器 得出的结果，再进行过滤。示例 LogQL 执行效果如下
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/xgx9x4/1616129550979-719a6401-7dd8-4196-9f8a-78f7b14e80a8.jpeg" alt="">
在上面的示例中， |= 这个符号作为 filter operators(过滤运算符)，来定义过滤行为。可用的 filter operators 有以下几种：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>|=&lt;/strong> # 匹配包含指定字符串的日志行&lt;/li>
&lt;li>&lt;strong>!=&lt;/strong> # 匹配不包含指定字符串的日志行&lt;/li>
&lt;li>&lt;strong>|~&lt;/strong> # 匹配包含正则表达式的日志行&lt;/li>
&lt;li>**!~ **# 匹配不包含正则表达式的日志行&lt;/li>
&lt;/ol>
&lt;h3 id="parser-expression解析表达式">Parser Expression(解析表达式)&lt;/h3>
&lt;p>Parser Expression 可以将日志内容解析，并提取标签。然后这些被提取出来的标签，可以使用 Label Filter Expression&lt;/p>
&lt;p>解析器表达式可以解析和提取日志内容中的标签，这些提取的标签可以用于标签过滤表达式进行过滤，或者用于指标聚合。
提取的标签键将由解析器进行自动格式化，以遵循 Prometheus 指标名称的约定（它们只能包含 ASCII 字母和数字，以及下划线和冒号，不能以数字开头）。
例如下面的日志经过管道 &lt;code>| json&lt;/code> 将产生以下 Map 数据：&lt;/p>
&lt;pre>&lt;code>{ &amp;quot;a.b&amp;quot;: { &amp;quot;c&amp;quot;: &amp;quot;d&amp;quot; }, &amp;quot;e&amp;quot;: &amp;quot;f&amp;quot; }
&lt;/code>&lt;/pre>
&lt;p>-&amp;gt;&lt;/p>
&lt;pre>&lt;code>{a_b_c=&amp;quot;d&amp;quot;, e=&amp;quot;f&amp;quot;}
&lt;/code>&lt;/pre>
&lt;p>在出现错误的情况下，例如，如果该行不是预期的格式，该日志行不会被过滤，而是会被添加一个新的 &lt;code>__error__&lt;/code> 标签。
需要注意的是如果一个提取的标签键名已经存在于原始日志流中，那么提取的标签键将以 &lt;code>_extracted&lt;/code> 作为后缀，以区分两个标签，你可以使用一个标签格式化表达式来强行覆盖原始标签，但是如果一个提取的键出现了两次，那么只有最新的标签值会被保留。
目前支持 &lt;code>json&lt;/code>、&lt;code>logfmt&lt;/code>、&lt;code>regexp&lt;/code> 和 &lt;code>unpack&lt;/code> 这几种解析器。
我们应该尽可能使用 &lt;code>json&lt;/code> 和 &lt;code>logfmt&lt;/code> 等预定义的解析器，这会更加容易，而当日志行结构异常时，可以使用 &lt;code>regexp&lt;/code>，可以在同一日志管道中使用多个解析器，这在你解析复杂日志时很有用。&lt;/p>
&lt;h4 id="json">JSON&lt;/h4>
&lt;p>json 解析器有两种模式运行。&lt;/p>
&lt;ul>
&lt;li>
&lt;ol>
&lt;li>没有参数。如果日志行是一个有效的 json 文档，在你的管道中添加 &lt;code>| json&lt;/code> 将提取所有 json 属性作为标签，嵌套的属性会使用 &lt;code>_&lt;/code> 分隔符被平铺到标签键中。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>注意：数组会被忽略。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>例如，使用 json 解析器从以下文件内容中提取标签。&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;pre>&lt;code>{
&amp;quot;protocol&amp;quot;: &amp;quot;HTTP/2.0&amp;quot;,
&amp;quot;servers&amp;quot;: [&amp;quot;129.0.1.1&amp;quot;, &amp;quot;10.2.1.3&amp;quot;],
&amp;quot;request&amp;quot;: {
&amp;quot;time&amp;quot;: &amp;quot;6.032&amp;quot;,
&amp;quot;method&amp;quot;: &amp;quot;GET&amp;quot;,
&amp;quot;host&amp;quot;: &amp;quot;foo.grafana.net&amp;quot;,
&amp;quot;size&amp;quot;: &amp;quot;55&amp;quot;,
&amp;quot;headers&amp;quot;: {
&amp;quot;Accept&amp;quot;: &amp;quot;*/*&amp;quot;,
&amp;quot;User-Agent&amp;quot;: &amp;quot;curl/7.68.0&amp;quot;
}
},
&amp;quot;response&amp;quot;: {
&amp;quot;status&amp;quot;: 401,
&amp;quot;size&amp;quot;: &amp;quot;228&amp;quot;,
&amp;quot;latency_seconds&amp;quot;: &amp;quot;6.031&amp;quot;
}
}
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>可以得到如下所示的标签列表：&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;pre>&lt;code>&amp;quot;protocol&amp;quot; =&amp;gt; &amp;quot;HTTP/2.0&amp;quot;
&amp;quot;request_time&amp;quot; =&amp;gt; &amp;quot;6.032&amp;quot;
&amp;quot;request_method&amp;quot; =&amp;gt; &amp;quot;GET&amp;quot;
&amp;quot;request_host&amp;quot; =&amp;gt; &amp;quot;foo.grafana.net&amp;quot;
&amp;quot;request_size&amp;quot; =&amp;gt; &amp;quot;55&amp;quot;
&amp;quot;response_status&amp;quot; =&amp;gt; &amp;quot;401&amp;quot;
&amp;quot;response_size&amp;quot; =&amp;gt; &amp;quot;228&amp;quot;
&amp;quot;response_size&amp;quot; =&amp;gt; &amp;quot;228&amp;quot;
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>
&lt;ol start="2">
&lt;li>带有参数的。在你的管道中使用 &lt;code>|json label=&amp;quot;expression&amp;quot;, another=&amp;quot;expression&amp;quot;&lt;/code> 将只提取指定的 json 字段为标签，你可以用这种方式指定一个或多个表达式，与 &lt;code>label_format&lt;/code> 相同，所有表达式必须加引号。
当前仅支持字段访问（&lt;code>my.field&lt;/code>, &lt;code>my[&amp;quot;field&amp;quot;]&lt;/code>）和数组访问（&lt;code>list[0]&lt;/code>），以及任何级别嵌套中的这些组合（&lt;code>my.list[0][&amp;quot;field&amp;quot;]&lt;/code>）。
例如，&lt;code>|json first_server=&amp;quot;servers[0]&amp;quot;, ua=&amp;quot;request.headers[\&amp;quot;User-Agent\&amp;quot;]&lt;/code> 将从以下日志文件中提取标签：&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;pre>&lt;code>{
&amp;quot;protocol&amp;quot;: &amp;quot;HTTP/2.0&amp;quot;,
&amp;quot;servers&amp;quot;: [&amp;quot;129.0.1.1&amp;quot;, &amp;quot;10.2.1.3&amp;quot;],
&amp;quot;request&amp;quot;: {
&amp;quot;time&amp;quot;: &amp;quot;6.032&amp;quot;,
&amp;quot;method&amp;quot;: &amp;quot;GET&amp;quot;,
&amp;quot;host&amp;quot;: &amp;quot;foo.grafana.net&amp;quot;,
&amp;quot;size&amp;quot;: &amp;quot;55&amp;quot;,
&amp;quot;headers&amp;quot;: {
&amp;quot;Accept&amp;quot;: &amp;quot;*/*&amp;quot;,
&amp;quot;User-Agent&amp;quot;: &amp;quot;curl/7.68.0&amp;quot;
}
},
&amp;quot;response&amp;quot;: {
&amp;quot;status&amp;quot;: 401,
&amp;quot;size&amp;quot;: &amp;quot;228&amp;quot;,
&amp;quot;latency_seconds&amp;quot;: &amp;quot;6.031&amp;quot;
}
}
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>提取的标签列表为：&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;pre>&lt;code>&amp;quot;first_server&amp;quot; =&amp;gt; &amp;quot;129.0.1.1&amp;quot;
&amp;quot;ua&amp;quot; =&amp;gt; &amp;quot;curl/7.68.0&amp;quot;
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>如果表达式返回一个数组或对象，它将以 json 格式分配给标签。例如，&lt;code>|json server_list=&amp;quot;services&amp;quot;, headers=&amp;quot;request.headers&lt;/code> 将提取到如下标签：&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;pre>&lt;code>&amp;quot;server_list&amp;quot; =&amp;gt; `[&amp;quot;129.0.1.1&amp;quot;,&amp;quot;10.2.1.3&amp;quot;]`
&amp;quot;headers&amp;quot; =&amp;gt; `{&amp;quot;Accept&amp;quot;: &amp;quot;*/*&amp;quot;, &amp;quot;User-Agent&amp;quot;: &amp;quot;curl/7.68.0&amp;quot;}`
&lt;/code>&lt;/pre>
&lt;h4 id="logfmt">logfmt&lt;/h4>
&lt;p>&lt;code>logfmt&lt;/code> 解析器可以通过使用 &lt;code>|logfmt&lt;/code> 来添加，它将从 logfmt 格式的日志行中提前所有的键和值。
例如，下面的日志行数据：&lt;/p>
&lt;pre>&lt;code>at=info method=GET path=/ host=grafana.net fwd=&amp;quot;124.133.124.161&amp;quot; service=8ms status=200
&lt;/code>&lt;/pre>
&lt;p>将提取得到如下所示的标签：&lt;/p>
&lt;pre>&lt;code>&amp;quot;at&amp;quot; =&amp;gt; &amp;quot;info&amp;quot;
&amp;quot;method&amp;quot; =&amp;gt; &amp;quot;GET&amp;quot;
&amp;quot;path&amp;quot; =&amp;gt; &amp;quot;/&amp;quot;
&amp;quot;host&amp;quot; =&amp;gt; &amp;quot;grafana.net&amp;quot;
&amp;quot;fwd&amp;quot; =&amp;gt; &amp;quot;124.133.124.161&amp;quot;
&amp;quot;service&amp;quot; =&amp;gt; &amp;quot;8ms&amp;quot;
&amp;quot;status&amp;quot; =&amp;gt; &amp;quot;200&amp;quot;
&lt;/code>&lt;/pre>
&lt;h4 id="regexp">regexp&lt;/h4>
&lt;p>与 &lt;code>logfmt&lt;/code> 和 &lt;code>json&lt;/code>（它们隐式提取所有值且不需要参数）不同，&lt;code>regexp&lt;/code> 解析器采用单个参数 &lt;code>| regexp &amp;quot;&amp;lt;re&amp;gt;&amp;quot;&lt;/code> 的格式，其参数是使用 Golang RE2 语法的正则表达式。
正则表达式必须包含至少一个命名的子匹配（例如&lt;code>(?P&amp;lt;name&amp;gt;re)&lt;/code>），每个子匹配项都会提取一个不同的标签。
例如，解析器 &lt;code>| regexp &amp;quot;(?P&amp;lt;method&amp;gt;\\w+) (?P&amp;lt;path&amp;gt;[\\w|/]+) \\((?P&amp;lt;status&amp;gt;\\d+?)\\) (?P&amp;lt;duration&amp;gt;.*)&amp;quot;&lt;/code> 将从以下行中提取标签：&lt;/p>
&lt;pre>&lt;code>POST /api/prom/api/v1/query_range (200) 1.5s
&lt;/code>&lt;/pre>
&lt;p>提取的标签为：&lt;/p>
&lt;pre>&lt;code>&amp;quot;method&amp;quot; =&amp;gt; &amp;quot;POST&amp;quot;
&amp;quot;path&amp;quot; =&amp;gt; &amp;quot;/api/prom/api/v1/query_range&amp;quot;
&amp;quot;status&amp;quot; =&amp;gt; &amp;quot;200&amp;quot;
&amp;quot;duration&amp;quot; =&amp;gt; &amp;quot;1.5s&amp;quot;
&lt;/code>&lt;/pre>
&lt;h4 id="unpack">unpack&lt;/h4>
&lt;p>&lt;code>unpack&lt;/code> 解析器将解析 json 日志行，并通过打包阶段解开所有嵌入的标签，一个特殊的属性 &lt;code>_entry&lt;/code> 也将被用来替换原来的日志行。
例如，使用 &lt;code>| unpack&lt;/code> 解析器，可以得到如下所示的标签：&lt;/p>
&lt;pre>&lt;code>{
&amp;quot;container&amp;quot;: &amp;quot;myapp&amp;quot;,
&amp;quot;pod&amp;quot;: &amp;quot;pod-3223f&amp;quot;,
&amp;quot;_entry&amp;quot;: &amp;quot;original log message&amp;quot;
}
&lt;/code>&lt;/pre>
&lt;p>允许提取 &lt;code>container&lt;/code> 和 &lt;code>pod&lt;/code> 标签以及原始日志信息作为新的日志行。&lt;/p>
&lt;blockquote>
&lt;p>如果原始嵌入的日志行是特定的格式，你可以将 unpack 与 json 解析器（或其他解析器）相结合使用。&lt;/p>
&lt;/blockquote>
&lt;h3 id="label-filter-expressionhttpsgrafanacomdocslokilatestlogqllabel-filter-expression标签过滤表达式">&lt;a href="https://grafana.com/docs/loki/latest/logql/#label-filter-expression">Label Filter Expression&lt;/a>(标签过滤表达式)&lt;/h3>
&lt;p>标签过滤表达式允许使用其原始和提取的标签来过滤日志行，它可以包含多个谓词。
一个谓词包含一个标签标识符、操作符和用于比较标签的值。
例如 &lt;code>cluster=&amp;quot;namespace&amp;quot;&lt;/code> 其中的 &lt;code>cluster&lt;/code> 是标签标识符，操作符是 &lt;code>=&lt;/code>，值是&lt;code>&amp;quot;namespace&amp;quot;&lt;/code>。
LogQL 支持从查询输入中自动推断出的多种值类型：&lt;/p>
&lt;ul>
&lt;li>&lt;code>String（字符串）&lt;/code>用双引号或反引号引起来，例如&lt;code>&amp;quot;200&amp;quot;&lt;/code>或&lt;code>us-central1&lt;/code>。&lt;/li>
&lt;li>&lt;code>Duration（时间）&lt;/code>是一串十进制数字，每个数字都有可选的数和单位后缀，如 &lt;code>&amp;quot;300ms&amp;quot;&lt;/code>、&lt;code>&amp;quot;1.5h&amp;quot;&lt;/code> 或 &lt;code>&amp;quot;2h45m&amp;quot;&lt;/code>，有效的时间单位是 &lt;code>&amp;quot;ns&amp;quot;&lt;/code>、&lt;code>&amp;quot;us&amp;quot;&lt;/code>（或 &lt;code>&amp;quot;µs&amp;quot;&lt;/code>）、&lt;code>&amp;quot;ms&amp;quot;&lt;/code>、&lt;code>&amp;quot;s&amp;quot;&lt;/code>、&lt;code>&amp;quot;m&amp;quot;&lt;/code>、&lt;code>&amp;quot;h&amp;quot;&lt;/code>。&lt;/li>
&lt;li>&lt;code>Number（数字）&lt;/code>是浮点数（64 位），如 250、89.923。&lt;/li>
&lt;li>&lt;code>Bytes（字节）&lt;/code>是一串十进制数字，每个数字都有可选的数和单位后缀，如 &lt;code>&amp;quot;42MB&amp;quot;&lt;/code>、&lt;code>&amp;quot;1.5Kib&amp;quot;&lt;/code> 或 &lt;code>&amp;quot;20b&amp;quot;&lt;/code>，有效的字节单位是 &lt;code>&amp;quot;b&amp;quot;&lt;/code>、&lt;code>&amp;quot;kib&amp;quot;&lt;/code>、&lt;code>&amp;quot;kb&amp;quot;&lt;/code>、&lt;code>&amp;quot;mib&amp;quot;&lt;/code>、&lt;code>&amp;quot;mb&amp;quot;&lt;/code>、&lt;code>&amp;quot;gib&amp;quot;&lt;/code>、&lt;code>&amp;quot;gb&amp;quot;&lt;/code>、&lt;code>&amp;quot;tib&amp;quot;&lt;/code>、&lt;code>&amp;quot;tb&amp;quot;&lt;/code>、&lt;code>&amp;quot;pib&amp;quot;&lt;/code>、&lt;code>&amp;quot;bb&amp;quot;&lt;/code>、&lt;code>&amp;quot;eb&amp;quot;&lt;/code>。&lt;/li>
&lt;/ul>
&lt;p>字符串类型的工作方式与 Prometheus 标签匹配器在日志流选择器中使用的方式完全一样，这意味着你可以使用同样的操作符（&lt;code>=&lt;/code>、&lt;code>!=&lt;/code>、&lt;code>=~&lt;/code>、&lt;code>!~&lt;/code>）。
使用 Duration、Number 和 Bytes 将在比较前转换标签值，并支持以下比较器。&lt;/p>
&lt;ul>
&lt;li>&lt;code>==&lt;/code> 或 &lt;code>=&lt;/code> 相等比较&lt;/li>
&lt;li>&lt;code>!=&lt;/code> 不等于比较&lt;/li>
&lt;li>&lt;code>&amp;gt;&lt;/code> 和 &lt;code>&amp;gt;=&lt;/code> 用于大于或大于等于比较&lt;/li>
&lt;li>&lt;code>&amp;lt;&lt;/code> 和 &lt;code>&amp;lt;=&lt;/code> 用于小于或小于等于比较&lt;/li>
&lt;/ul>
&lt;p>例如 &lt;code>logfmt | duration &amp;gt; 1m and bytes_consumed &amp;gt; 20MB&lt;/code> 过滤表达式。
如果标签值的转换失败，日志行就不会被过滤，而会添加一个 &lt;code>__error__&lt;/code> 标签，要过滤这些错误，请看管道错误部分。
你可以使用 &lt;code>and&lt;/code>和 &lt;code>or&lt;/code> 来连接多个谓词，它们分别表示&lt;strong>且&lt;/strong>和&lt;strong>或&lt;/strong>的二进制操作，&lt;code>and&lt;/code> 可以用逗号、空格或其他管道来表示，标签过滤器可以放在日志管道的任何地方。
以下所有的表达式都是等价的:&lt;/p>
&lt;pre>&lt;code>| duration &amp;gt;= 20ms or size == 20kb and method!~&amp;quot;2..&amp;quot;
| duration &amp;gt;= 20ms or size == 20kb | method!~&amp;quot;2..&amp;quot;
| duration &amp;gt;= 20ms or size == 20kb,method!~&amp;quot;2..&amp;quot;
| duration &amp;gt;= 20ms or size == 20kb method!~&amp;quot;2..&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>默认情况下，多个谓词的优先级是从右到左，你可以用圆括号包装谓词，强制使用从左到右的不同优先级。
例如，以下内容是等价的：&lt;/p>
&lt;pre>&lt;code>| duration &amp;gt;= 20ms or method=&amp;quot;GET&amp;quot; and size &amp;lt;= 20KB
| ((duration &amp;gt;= 20ms or method=&amp;quot;GET&amp;quot;) and size &amp;lt;= 20KB)
&lt;/code>&lt;/pre>
&lt;p>它将首先评估 &lt;code>duration&amp;gt;=20ms or method=&amp;quot;GET&amp;quot;&lt;/code>，要首先评估 &lt;code>method=&amp;quot;GET&amp;quot; and size&amp;lt;=20KB&lt;/code>，请确保使用适当的括号，如下所示。&lt;/p>
&lt;pre>&lt;code>| duration &amp;gt;= 20ms or (method=&amp;quot;GET&amp;quot; and size &amp;lt;= 20KB)
&lt;/code>&lt;/pre>
&lt;h3 id="line-format-expressionhttpsgrafanacomdocslokilatestlogqlline-format-expression行格式化表达式">&lt;a href="https://grafana.com/docs/loki/latest/logql/#line-format-expression">Line Format Expression&lt;/a>(行格式化表达式)&lt;/h3>
&lt;p>日志行格式化表达式可以通过使用 Golang 的 &lt;code>text/template&lt;/code> 模板格式重写日志行的内容，它需要一个字符串参数 &lt;code>| line_format &amp;quot;{{.label_name}}&amp;quot;&lt;/code> 作为模板格式，所有的标签都是注入模板的变量，可以用 &lt;code>{{.label_name}}&lt;/code> 的符号来使用。
例如，下面的表达式：&lt;/p>
&lt;pre>&lt;code>{container=&amp;quot;frontend&amp;quot;} | logfmt | line_format &amp;quot;{{.query}} {{.duration}}&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>将提取并重写日志行，只包含 &lt;code>query&lt;/code> 和请求的 &lt;code>duration&lt;/code>。你可以为模板使用双引号字符串或反引号 &lt;code>{{.label_name}}&lt;/code> 来避免转义特殊字符。
此外 &lt;code>line_format&lt;/code> 也支持数学函数，例如：
如果我们有以下标签 &lt;code>ip=1.1.1.1&lt;/code>, &lt;code>status=200&lt;/code> 和 &lt;code>duration=3000(ms)&lt;/code>, 我们可以用 &lt;code>duration&lt;/code> 除以 1000 得到以秒为单位的值：&lt;/p>
&lt;pre>&lt;code>{container=&amp;quot;frontend&amp;quot;} | logfmt | line_format &amp;quot;{{.ip}} {{.status}} {{div .duration 1000}}&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>上面的查询将得到的日志行内容为&lt;code>1.1.1.1 200 3&lt;/code>。&lt;/p>
&lt;h3 id="labels-format-expressionhttpsgrafanacomdocslokilatestlogqllabels-format-expression标签格式化表达式">&lt;a href="https://grafana.com/docs/loki/latest/logql/#labels-format-expression">Labels Format Expression&lt;/a>(标签格式化表达式)&lt;/h3>
&lt;p>&lt;code>| label_format&lt;/code>表达式可以重命名、修改或添加标签，它以逗号分隔的操作列表作为参数，可以同时进行多个操作。
当两边都是标签标识符时，例如 &lt;code>dst=src&lt;/code>，该操作将把 &lt;code>src&lt;/code> 标签重命名为 &lt;code>dst&lt;/code>。
左边也可以是一个模板字符串，例如 &lt;code>dst=&amp;quot;{{.status}} {{.query}}&amp;quot;&lt;/code>，在这种情况下，&lt;code>dst&lt;/code> 标签值会被 Golang 模板执行结果所取代，这与 &lt;code>| line_format&lt;/code> 表达式是同一个模板引擎，这意味着标签可以作为变量使用，也可以使用同样的函数列表。
在上面两种情况下，如果目标标签不存在，那么就会创建一个新的标签。
重命名形式 &lt;code>dst=src&lt;/code> 会在将 &lt;code>src&lt;/code> 标签重新映射到 &lt;code>dst&lt;/code> 标签后将其删除，然而，模板形式将保留引用的标签，例如 &lt;code>dst=&amp;quot;{{.src}}&amp;quot;&lt;/code> 的结果是 &lt;code>dst&lt;/code> 和 &lt;code>src&lt;/code> 都有相同的值。&lt;/p>
&lt;blockquote>
&lt;p>一个标签名称在每个表达式中只能出现一次，这意味着 &lt;code>| label_format foo=bar,foo=&amp;quot;new&amp;quot;&lt;/code> 是不允许的，但你可以使用两个表达式来达到预期效果，比如 &lt;code>| label_format foo=bar | label_format foo=&amp;quot;new&amp;quot;&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;h2 id="查询示例">查询示例&lt;/h2>
&lt;p>&lt;strong>多重过滤&lt;/strong>
过滤应该首先使用标签匹配器，然后是行过滤器，最后使用标签过滤器：&lt;/p>
&lt;pre>&lt;code>{cluster=&amp;quot;ops-tools1&amp;quot;, namespace=&amp;quot;loki-dev&amp;quot;, job=&amp;quot;loki-dev/query-frontend&amp;quot;} |= &amp;quot;metrics.go&amp;quot; !=&amp;quot;out of order&amp;quot; | logfmt | duration &amp;gt; 30s or status_code!=&amp;quot;200&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>多解析器&lt;/strong>
比如要提取以下格式日志行的方法和路径：&lt;/p>
&lt;pre>&lt;code>level=debug ts=2020-10-02T10:10:42.092268913Z caller=logging.go:66 traceID=a9d4d8a928d8db1 msg=&amp;quot;POST /api/prom/api/v1/query_range (200) 1.5s&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>你可以像下面这样使用多个解析器：&lt;/p>
&lt;pre>&lt;code>{job=&amp;quot;cortex-ops/query-frontend&amp;quot;} | logfmt | line_format &amp;quot;{{.msg}}&amp;quot; | regexp &amp;quot;(?P&amp;lt;method&amp;gt;\\w+) (?P&amp;lt;path&amp;gt;[\\w|/]+) \\((?P&amp;lt;status&amp;gt;\\d+?)\\) (?P&amp;lt;duration&amp;gt;.*)&amp;quot;`
&lt;/code>&lt;/pre>
&lt;p>首先通过 &lt;code>logfmt&lt;/code> 解析器提取日志中的数据，然后使用 &lt;code>| line_format&lt;/code> 重新将日志格式化为 &lt;code>POST /api/prom/api/v1/query_range (200) 1.5s&lt;/code>，然后紧接着就是用 &lt;code>regexp&lt;/code> 解析器通过正则表达式来匹配提前标签了。
&lt;strong>格式化&lt;/strong>
下面的查询显示了如何重新格式化日志行，使其更容易阅读。&lt;/p>
&lt;pre>&lt;code>{cluster=&amp;quot;ops-tools1&amp;quot;, name=&amp;quot;querier&amp;quot;, namespace=&amp;quot;loki-dev&amp;quot;}
|= &amp;quot;metrics.go&amp;quot;
|!= &amp;quot;loki-canary&amp;quot;
| logfmt
| query != &amp;quot;&amp;quot;
| label_format query=&amp;quot;{{ Replace .query \&amp;quot;\\n\&amp;quot; \&amp;quot;\&amp;quot; -1 }}&amp;quot;
| line_format &amp;quot;{{ .ts}}\t{{.duration}}\ttraceID = {{.traceID}}\t{{ printf \&amp;quot;%-100.100s\&amp;quot; .query }} &amp;quot;
&lt;/code>&lt;/pre>
&lt;p>其中的 &lt;code>label_format&lt;/code> 用于格式化查询，而 &lt;code>line_format&lt;/code> 则用于减少信息量并创建一个表格化的输出。比如对于下面的日志行数据：&lt;/p>
&lt;pre>&lt;code>level=info ts=2020-10-23T20:32:18.094668233Z caller=metrics.go:81 org_id=29 traceID=1980d41501b57b68 latency=fast query=&amp;quot;{cluster=\&amp;quot;ops-tools1\&amp;quot;, job=\&amp;quot;cortex-ops/query-frontend\&amp;quot;} |= \&amp;quot;query_range\&amp;quot;&amp;quot; query_type=filter range_type=range length=15m0s step=7s duration=650.22401ms status=200 throughput_mb=1.529717 total_bytes_mb=0.994659
level=info ts=2020-10-23T20:32:18.068866235Z caller=metrics.go:81 org_id=29 traceID=1980d41501b57b68 latency=fast query=&amp;quot;{cluster=\&amp;quot;ops-tools1\&amp;quot;, job=\&amp;quot;cortex-ops/query-frontend\&amp;quot;} |= \&amp;quot;query_range\&amp;quot;&amp;quot; query_type=filter range_type=range length=15m0s step=7s duration=624.008132ms status=200 throughput_mb=0.693449 total_bytes_mb=0.432718
&lt;/code>&lt;/pre>
&lt;p>经过上面的查询过后可以得到如下所示的结果：&lt;/p>
&lt;pre>&lt;code>2020-10-23T20:32:18.094668233Z 650.22401ms traceID = 1980d41501b57b68 {cluster=&amp;quot;ops-tools1&amp;quot;, job=&amp;quot;cortex-ops/query-frontend&amp;quot;} |= &amp;quot;query_range&amp;quot;
2020-10-23T20:32:18.068866235Z 624.008132ms traceID = 1980d41501b57b68 {cluster=&amp;quot;ops-tool
&lt;/code>&lt;/pre>
&lt;h1 id="metric-queries指标查询">Metric Queries(指标查询)&lt;/h1>
&lt;p>LogQL 还可以通过 &lt;strong>Functions(函数)&lt;/strong> 来对每个日志流进行计算，就是将日志流中的日志计数，并根据技术进行一些查询，这种查询方式与 PromQL 的指标查询类似。&lt;/p>
&lt;p>指标查询可用于计算诸如错误消息率或最近 3 个小时内日志数量最多的 N 个日志源之类的信息。&lt;/p>
&lt;h2 id="范围向量聚合">范围向量聚合&lt;/h2>
&lt;p>LogQL 与 Prometheus 具有相同的范围向量概念，不同之处在于所选的样本范围包括每个日志&lt;/p>
&lt;p>常用函数主要是如下 4 个：&lt;/p>
&lt;ul>
&lt;li>&lt;code>rate&lt;/code>: 计算每秒的日志条目&lt;/li>
&lt;li>&lt;code>count_over_time&lt;/code>: 对指定范围内的每个日志流的条目进行计数&lt;/li>
&lt;li>&lt;code>bytes_rate&lt;/code>: 计算日志流每秒的字节数&lt;/li>
&lt;li>&lt;code>bytes_over_time&lt;/code>: 对指定范围内的每个日志流的使用的字节数&lt;/li>
&lt;/ul>
&lt;p>比如计算 nginx 的 qps：&lt;/p>
&lt;pre>&lt;code>rate({filename=&amp;quot;/var/log/nginx/access.log&amp;quot;}[5m]))
&lt;/code>&lt;/pre>
&lt;p>计算 kernel 过去 5 分钟发生 oom 的次数：&lt;/p>
&lt;pre>&lt;code>count_over_time({filename=&amp;quot;/var/log/message&amp;quot;} |~ &amp;quot;oom_kill_process&amp;quot; [5m]))
&lt;/code>&lt;/pre>
&lt;h2 id="聚合运算符">聚合运算符&lt;/h2>
&lt;p>与 PromQL 一样，LogQL 支持内置聚合运算符的一个子集，可用于聚合单个向量的元素，从而产生一个具有更少元素但具有集合值的新向量：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>sum: Calculate sum over labels&lt;/p>
&lt;/li>
&lt;li>
&lt;p>min: Select minimum over labels&lt;/p>
&lt;/li>
&lt;li>
&lt;p>max: Select maximum over labels&lt;/p>
&lt;/li>
&lt;li>
&lt;p>avg: Calculate the average over labels&lt;/p>
&lt;/li>
&lt;li>
&lt;p>stddev: Calculate the population standard deviation over labels&lt;/p>
&lt;/li>
&lt;li>
&lt;p>stdvar: Calculate the population standard variance over labels&lt;/p>
&lt;/li>
&lt;li>
&lt;p>count: Count number of elements in the vector&lt;/p>
&lt;/li>
&lt;li>
&lt;p>bottomk: Select smallest k elements by sample value&lt;/p>
&lt;/li>
&lt;li>
&lt;p>topk: Select largest k elements by sample value&lt;/p>
&lt;/li>
&lt;li>
&lt;p>sum：求和&lt;/p>
&lt;/li>
&lt;li>
&lt;p>min：最小值&lt;/p>
&lt;/li>
&lt;li>
&lt;p>max：最大值&lt;/p>
&lt;/li>
&lt;li>
&lt;p>avg：平均值&lt;/p>
&lt;/li>
&lt;li>
&lt;p>stddev：标准差&lt;/p>
&lt;/li>
&lt;li>
&lt;p>stdvar：标准方差&lt;/p>
&lt;/li>
&lt;li>
&lt;p>count：计数&lt;/p>
&lt;/li>
&lt;li>
&lt;p>bottomk：最小的 k 个元素&lt;/p>
&lt;/li>
&lt;li>
&lt;p>topk：最大的 k 个元素&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>聚合函数我们可以用如下表达式描述：&lt;/p>
&lt;pre>&lt;code>&amp;lt;aggr-op&amp;gt;([parameter,] &amp;lt;vector expression) [without|by (label list)]
&lt;/code>&lt;/pre>
&lt;p>对于需要对标签进行分组时，我们可以用 &lt;code>without&lt;/code> 或者 &lt;code>by&lt;/code> 来区分。比如计算 nginx 的 qps，并按照 pod 来分组：&lt;/p>
&lt;pre>&lt;code>sum(rate({filename=&amp;quot;/var/log/nginx/access.log&amp;quot;}[5m])) by (pod)
&lt;/code>&lt;/pre>
&lt;p>只有在使用 &lt;code>bottomk&lt;/code> 和 &lt;code>topk&lt;/code> 函数时，我们可以对函数输入相关的参数。比如计算 nginx 的 qps 最大的前 5 个，并按照 pod 来分组：&lt;/p>
&lt;pre>&lt;code>topk(5,sum(rate({filename=&amp;quot;/var/log/nginx/access.log&amp;quot;}[5m])) by (pod)))
&lt;/code>&lt;/pre>
&lt;h2 id="binary-operators二元运算符">Binary Operators(二元运算符)&lt;/h2>
&lt;h3 id="数学计算">数学计算&lt;/h3>
&lt;p>Loki 存的是日志，都是文本，怎么计算呢？显然 LogQL 中的数学运算是面向区间向量操作的，LogQL 中的支持的二进制运算符如下：&lt;/p>
&lt;ul>
&lt;li>&lt;code>+&lt;/code>：加法&lt;/li>
&lt;li>&lt;code>-&lt;/code>：减法&lt;/li>
&lt;li>&lt;code>*&lt;/code>：乘法&lt;/li>
&lt;li>&lt;code>/&lt;/code>：除法&lt;/li>
&lt;li>&lt;code>%&lt;/code>：求模&lt;/li>
&lt;li>&lt;code>^&lt;/code>：求幂&lt;/li>
&lt;/ul>
&lt;p>比如我们要找到某个业务日志里面的错误率，就可以按照如下方式计算：&lt;/p>
&lt;pre>&lt;code>sum(rate({app=&amp;quot;foo&amp;quot;, level=&amp;quot;error&amp;quot;}[1m])) / sum(rate({app=&amp;quot;foo&amp;quot;}[1m]))
&lt;/code>&lt;/pre>
&lt;h3 id="逻辑运算">逻辑运算&lt;/h3>
&lt;p>集合运算仅在区间向量范围内有效，当前支持&lt;/p>
&lt;ul>
&lt;li>&lt;code>and&lt;/code>：并且&lt;/li>
&lt;li>&lt;code>or&lt;/code>：或者&lt;/li>
&lt;li>&lt;code>unless&lt;/code>：排除&lt;/li>
&lt;/ul>
&lt;p>比如：&lt;/p>
&lt;pre>&lt;code>rate({app=~&amp;quot;foo|bar&amp;quot;}[1m]) and rate({app=&amp;quot;bar&amp;quot;}[1m])
&lt;/code>&lt;/pre>
&lt;h3 id="比较运算">比较运算&lt;/h3>
&lt;p>LogQL 支持的比较运算符和 PromQL 一样，包括：&lt;/p>
&lt;ul>
&lt;li>&lt;code>==&lt;/code>：等于&lt;/li>
&lt;li>&lt;code>!=&lt;/code>：不等于&lt;/li>
&lt;li>&lt;code>&amp;gt;&lt;/code>：大于&lt;/li>
&lt;li>&lt;code>&amp;gt;=&lt;/code>: 大于或等于&lt;/li>
&lt;li>&lt;code>&amp;lt;&lt;/code>：小于&lt;/li>
&lt;li>&lt;code>&amp;lt;=&lt;/code>: 小于或等于&lt;/li>
&lt;/ul>
&lt;p>通常我们使用区间向量计算后会做一个阈值的比较，这对应告警是非常有用的，比如统计 5 分钟内 error 级别日志条目大于 10 的情况：&lt;/p>
&lt;pre>&lt;code>count_over_time({app=&amp;quot;foo&amp;quot;, level=&amp;quot;error&amp;quot;}[5m]) &amp;gt; 10
&lt;/code>&lt;/pre>
&lt;p>我们也可以通过布尔计算来表达，比如统计 5 分钟内 error 级别日志条目大于 10 为真，反正则为假：&lt;/p>
&lt;pre>&lt;code>count_over_time({app=&amp;quot;foo&amp;quot;, level=&amp;quot;error&amp;quot;}[5m]) &amp;gt; bool 10
&lt;/code>&lt;/pre>
&lt;h2 id="注释">注释&lt;/h2>
&lt;p>LogQL 查询可以使用 &lt;code>#&lt;/code> 字符进行注释，例如：&lt;/p>
&lt;pre>&lt;code>{app=&amp;quot;foo&amp;quot;} # anything that comes after will not be interpreted in your query
&lt;/code>&lt;/pre>
&lt;p>对于多行 LogQL 查询，可以使用 &lt;code>#&lt;/code> 排除整个或部分行：&lt;/p>
&lt;pre>&lt;code>{app=&amp;quot;foo&amp;quot;}
| json
# this line will be ignored
| bar=&amp;quot;baz&amp;quot; # this checks if bar = &amp;quot;baz&amp;quot;
&lt;/code>&lt;/pre>
&lt;h2 id="pipeline-errors-管道错误">Pipeline Errors 管道错误&lt;/h2>
&lt;p>There are multiple reasons which cause pipeline processing errors, such as:有多种原因导致流水线处理错误，例如：&lt;/p>
&lt;ul>
&lt;li>A numeric label filter may fail to turn a label value into a number 数字标签过滤器可能无法将标签值转换为数字&lt;/li>
&lt;li>A metric conversion for a label may fail.标签的度量转换可能会失败。&lt;/li>
&lt;li>A log line is not a valid json document.日志行不是有效的 JSON 文档。&lt;/li>
&lt;li>etc…等等…&lt;/li>
&lt;/ul>
&lt;p>When those failures happen, Loki won’t filter out those log lines. Instead they are passed into the next stage of the pipeline with a new system label named &lt;code>__error__&lt;/code>. The only way to filter out errors is by using a label filter expressions. The &lt;code>__error__&lt;/code> label can’t be renamed via the language.当这些故障发生时，Loki 不会过滤掉这些日志线。相反，它们通过名为__Error__的新系统标签传递到管道的下一个阶段。过滤误差的唯一方法是使用标签过滤表达式。 __Err__标签无法通过语言重命名。
For example to remove json errors:例如要删除 JSON 错误：&lt;/p>
&lt;pre>&lt;code>{cluster=&amp;quot;ops-tools1&amp;quot;,container=&amp;quot;ingress-nginx&amp;quot;}
| json
| __error__ != &amp;quot;JSONParserErr&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>Logql
Alternatively you can remove all error using a catch all matcher such as &lt;code>__error__ = &amp;quot;&amp;quot;&lt;/code> or even show only errors using &lt;code>__error__ != &amp;quot;&amp;quot;&lt;/code>.或者，您可以使用捕获器删除所有匹配器，例如__Error__ =“”甚至仅显示使用__Error__！=“”。
The filter should be placed after the stage that generated this error. This means if you need to remove errors from an unwrap expression it needs to be placed after the unwrap.在生成此错误的阶段后应放置过滤器。这意味着如果您需要从未包装中删除从未包装表达式中删除错误，则需要放置在未包装之后。&lt;/p>
&lt;pre>&lt;code>quantile_over_time(
0.99,
{container=&amp;quot;ingress-nginx&amp;quot;,service=&amp;quot;hosted-grafana&amp;quot;}
| json
| unwrap response_latency_seconds
| __error__=&amp;quot;&amp;quot;[1m]
) by (cluster)
&lt;/code>&lt;/pre>
&lt;p>Logql&lt;/p>
&lt;blockquote>
&lt;p>Metric queries cannot contains errors, in case errors are found during execution, Loki will return an error and appropriate status code.度量标准查询不能包含错误，以便在执行期间找到错误，Loki 将返回错误和适当的状态代码。&lt;/p>
&lt;/blockquote></description></item><item><title>Docs: LogRotate(日志轮替)</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/logrotate%E6%97%A5%E5%BF%97%E8%BD%AE%E6%9B%BF/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/logrotate%E6%97%A5%E5%BF%97%E8%BD%AE%E6%9B%BF/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/b_CWt_ycvnbQG9TXPqRoCQ">公众号-马哥 Linux 运维，[译] 理解 logrotate 实用工具&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>为了防止日志文件持续被写入文件导致过于庞大，那么就需要对日志进行拆分，每隔一段时间就把日志文件保存(打包压缩)起来，然后再创建一个新的空文件继续接收日志，来回循环该过程直到通过配置规定的保留日期，来清除存在过久的日志。通过这种方式来进行日志的归档，分类，清理。这就是 LogRotate 所做的事情。是否进行轮替会有一系列的配置，比如文件的大小达到 N 会轮替一次，每隔多少天轮替一次等等。&lt;/p>
&lt;p>logrotate 只是一个命令行工具，不以守护进程的方式运行在后台，默认情况下，logrotate 命令作为放在 /etc/cron.daily 中的 cron 任务，每天运行一次，该任务会根据设置的策略进行日志文件的检查，其中达到设置中满足轮替配置的日志文件将被轮替。&lt;/p>
&lt;h1 id="关联文件与配置">关联文件与配置&lt;/h1>
&lt;p>/etc/logrotate.conf # logrotate 基本配置文件
/etc/logrotate.d/* # 对基本文件的扩展，该目录下的文件的配置会被包含在基本配置文件中。该目录下一般是一个程序一个文件，每个程序都有自己的日志轮替配置。
/etc/cron.daily/logrotate # 该文件定义了 cron 定时任务执行日志轮替工作的时间
/var/lib/logrotate.status # logrotate 的执行历史&lt;/p>
&lt;h2 id="logrotateconf-配置文件详解">logrotate.conf 配置文件详解&lt;/h2>
&lt;ul>
&lt;li>/PATH/TO/FILES {&amp;hellip;} #指定想要轮替的日志文件，可以通过＊通配指定多个文件名
&lt;ul>
&lt;li>&lt;strong>copytruncate&lt;/strong> # 把正在输出的日志拷(copy)一份出来，再清空(trucate)原来的日志。&lt;/li>
&lt;li>&lt;strong>compress&lt;/strong> # 压缩日志文件的所有非当前版本&lt;/li>
&lt;li>&lt;strong>dateext&lt;/strong> # 切换后的日志文件会附加上一个短横线和 YYYYMMDD 格式的日期,&lt;/li>
&lt;li>&lt;strong>daily&lt;/strong> # 日志文件将每天轮替一次。其它可用值为 monthly(每月)，weekly(每周)、yearly(每年)&lt;/li>
&lt;li>&lt;strong>delaycompress&lt;/strong> # 在轮替任务完成后，已轮替的归档将使用 gzip 进行压缩&lt;/li>
&lt;li>&lt;strong>errors &lt;!-- raw HTML omitted -->&lt;/strong> # 给指定邮箱发送错误通知&lt;/li>
&lt;li>&lt;strong>missingok&lt;/strong> # 如果日志文件丢失，不要显示错误&lt;/li>
&lt;li>&lt;strong>notifempty&lt;/strong> # 如果日志文件为空，则不轮换日志文件&lt;/li>
&lt;li>&lt;strong>olddir &lt;!-- raw HTML omitted -->&lt;/strong> # 指定日志文件的旧版本放在 “DIR”目录 中&lt;/li>
&lt;li>&lt;strong>postrotate 和 endscript&lt;/strong> # 在所有其它指令完成后，postrotate 和 endscript 里面指定的命令将被执行。在这种情况下，rsyslogd 进程将立即再次读取其配置并继续运行。&lt;/li>
&lt;li>&lt;strong>rotate N&lt;/strong> # 共存储 N 个轮替后日志。当产生第 N+1 个轮替后的日志，时间最久的日志将被删除&lt;/li>
&lt;li>&lt;strong>sharedscripts&lt;/strong> # 有多个日志需要轮替时，只执行一次脚本&lt;/li>
&lt;li>&lt;strong>size &lt;!-- raw HTML omitted -->&lt;/strong> # 在日志文件大小大于 LogSize（例如 100K，4M）时进行轮替&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>配置样例&lt;/p>
&lt;pre>&lt;code>/var/log/nginx/*log {
daily
rotate 10
missingok
notifempty
compress
dateext
sharedscripts
postrotate
/bin/kill -USR1 $(cat /var/run/ngnix/nginx.pid 2&amp;gt;/dev/null) 2&amp;gt;/dev/null
endscript
}
&lt;/code>&lt;/pre>
&lt;p>Note：关于 postrotate
postrotate 后面跟随的是一个命令行，一般是用来重新生成日志文件或者冲定义应用所指向的文件描述符（fd：file description），拿 nginx 和 uwsgi 为例：&lt;/p>
&lt;p>完成日志切割后创建新的 nginx 日志文件，此时该文件的 fd 发生改变&lt;/p>
&lt;p>nginx 中日志输出对应的文件 fd 未同步更新，nginx 会向原 fd 对应的日志文件写数据&lt;/p>
&lt;p>“/bin/kill -USR1 cat /var/run/nginx.pid || true”，更新 nginx 默认日志文件的 fd 到新建的日志文件（该效果等同于 reload）。&lt;/p>
&lt;p>关于/bin/kill -HUP&lt;/p>
&lt;p>&amp;ldquo;/bin/kill -USR1 &lt;code>cat /var/run/nginx.pid&lt;/code> || true&amp;rdquo;&lt;/p>
&lt;p>看到这条命令很容易想到：&lt;/p>
&lt;p>/bin/kill -HUP &lt;code>cat /var/run/nginx.pid 2&amp;gt; /dev/null&lt;/code> 2&amp;gt; /dev/null || true&lt;/p>
&lt;p>这两条命令的大概含义是重载 nginx 服务，目的是重新生成 nginx 的日志文件。&lt;/p>
&lt;h1 id="命令行工具">命令行工具&lt;/h1>
&lt;p>logrotate [OPTIONS&amp;hellip;]&lt;/p>
&lt;p>OPTIONS&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-f&lt;/strong> # 告诉 logrotate 强制执行轮替，即使这不是必要的(i.e.测试轮替的配置文件是否可以正常运行)。 有时，在向 logrotate 配置文件添加新条目之后，或者如果已经手动删除旧的日志文件，这将是有用的，因为将创建新文件，并且日志记录将正常继续。&lt;/li>
&lt;/ul>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>logrotate -f /etc/logrotate.d/keepalived #使用/etc/logrotate.d/keepalived 配置文件执行轮替&lt;/li>
&lt;/ul>
&lt;p>PS:&lt;/p>
&lt;ul>
&lt;li>遇到不能记录日志的情况：kill -USR1 pid 重发信号量&lt;/li>
&lt;/ul></description></item><item><title>Docs: Loki</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/loki/loki/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/loki/loki/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/grafana/loki">GitHub 项目，grafana/loki&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/fundamentals/overview/">官方文档，基础-概述&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.qikqiak.com/post/grafana-loki-usage/">阳明博客&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.zhihu.com/people/quchenyuan/posts">知乎文章&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://wsgzao.github.io/post/loki/">https://wsgzao.github.io/post/loki/&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Loki 是受 Prometheus 启发的水平可扩展，高度可用的多租户日志聚合系统。它的设计具有很高的成本效益，并且易于操作。它不索引日志的内容，而是为每个日志流设置一组标签。
与其他日志聚合系统相比，Loki 有以下特点：&lt;/p>
&lt;ul>
&lt;li>不对日志进行全文本索引。通过存储压缩的，非结构化的日志以及仅索引元数据，Loki 更加易于操作且运行成本更低。&lt;/li>
&lt;li>使用与 Prometheus 相同的标签对日志流进行索引和分组，从而使您能够使用与 Prometheus 相同的标签在指标和日志之间无缝切换。&lt;/li>
&lt;li>特别适合存储 Kubernetes Pod 日志。诸如 Pod 标签之类的元数据会自动被抓取并建立索引。&lt;/li>
&lt;li>在 Grafana 中具有本机支持（需要 Grafana v6.0）。&lt;/li>
&lt;/ul>
&lt;p>基于 Loki 的日志包含 3 个程序：&lt;/p>
&lt;ul>
&lt;li>Loki 是主服务器，负责存储日志和处理查询。&lt;/li>
&lt;li>Client Agent 客户端代理，负责收集日志并将其发送给 Loki。promtail 是其中一种 agent，是 loki 原配。&lt;/li>
&lt;li>Grafana 用于查询和显示日志。&lt;/li>
&lt;/ul>
&lt;p>Loki 像 Prometheus 一样，但是是用于处理日志的：我们更喜欢基于多维标签的索引方法，并且希望使用没有依赖关系的单一二进制，易于操作的系统。Loki 与 Prometheus 的不同之处在于，它侧重于日志而不是指标，并通过推送而不是拉取交付日志。&lt;/p>
&lt;blockquote>
&lt;p>Loki 与 Promtail 加一起才相当于 Prometheus，因为 Promtail 是发现目标，采集日志的程序。然后主动 Push 给 Loki，由 Loki 存储日志数据。
而 Promtheus，可以自己发现目标，采集指标，存储指标。&lt;/p>
&lt;/blockquote>
&lt;h2 id="loki-observability可观察性">Loki Observability(可观察性)&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/operations/observability/">官方文档，运维-可观测性&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Loki 和 Promtail 都在 &lt;code>/metrics&lt;/code> 端点上公开了指标，该端点暴露了 OpenMetrics 格式的指标。
Loki 存储库具有一个&lt;a href="https://github.com/grafana/loki/tree/main/production/loki-mixin">混合包&lt;/a>，其中包括一组仪表板，记录规则和警报。总之，mixin 为您提供了一个全面的软件包，用于监视生产中的 Loki。
有关 mixin 的更多信息，请参阅 &lt;a href="https://github.com/monitoring-mixins/docs">monitoring-mixins 项目&lt;/a> 的文档 。&lt;/p>
&lt;h2 id="multi-tenancy多租户">Multi Tenancy(多租户)&lt;/h2>
&lt;p>Loki 支持多租户，以使租户之间的数据完全分离。当 Loki 在多租户模式下运行时，所有数据（包括内存和长期存储中的数据）都由租户 ID 分区，该租户 ID 是从请求中的 &lt;code>X-Scope-OrgID&lt;/code> HTTP 头中提取的。当 Loki 不在多租户模式下时，将忽略 Header 头，并将租户 ID 设置为 &lt;code>fake&lt;/code>，这将显示在索引和存储的块中。&lt;/p>
&lt;h1 id="loki-架构概述">Loki 架构概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/fundamentals/architecture/">官方文档，基础-架构&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Loki 由多个组件组成，每个组件都可以实现特定的功能：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>写入日志数据&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>Distributor(分配器)&lt;/strong> # 对应 distributor 组件。负责处理客户端写入的日志，它是日志数据写入路径中的&lt;strong>第一站&lt;/strong>，一旦 Distributor 收到日志数据，会将其拆分为多个批次，然后并行发送给一个或多个 Ingester&lt;/li>
&lt;li>&lt;strong>Ingester(摄取器)&lt;/strong> # 对应 ingester 组件。负责将日志数据写入 本地文件系统 或 指定的存储后端(DynamoDB、S3、Cassandra 等)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>读取日志数据&lt;/strong>，处理 LogQL 请求
&lt;ul>
&lt;li>&lt;strong>Querier(查询器)&lt;/strong> # 对应 querier 组件。接收客户端发送的 LogQL 请求并从定的存储中查询日志数据并返回给客户端&lt;/li>
&lt;li>&lt;strong>Query Frontend(查询前端)&lt;/strong> # 对应 query-frontend 组件。为 Querier 组件提供负载均衡功能。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>其他&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>Table Manager 表管理器)&lt;/strong> # 对应 table-manager 组件。负责所有数据中，Table 的维护工作。根据配置文件中 schema_config.configs 字段中的相关配置，在指定时间开始之前创建周期表，并在根据 table_manager 字段中的相关配置，将数据时间范围超过保留期的数据删除。&lt;/li>
&lt;li>&lt;strong>Compactor(压缩器)&lt;/strong> # 2.6 版本时，Compactor 组件被设置为默认的用来实现数据保留功能的组件，暂时只支持 boltdb-shipper。准备要代替 table-manager 组件。&lt;/li>
&lt;li>&lt;strong>Ruler(规则管理器)&lt;/strong> # 对应 ruler 组件。从存储中读取数据，根据规则发送给告警处理程序。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>loki 二进制文件的设计方式与 thanos 非常类似，都是在单一二进制文件中，可以运行指定的一个或多个组件。
Loki 内部将组件称为 &lt;strong>Modules(模块)&lt;/strong>。如果想要运行指定的模块，有两种方式：&lt;/p>
&lt;ul>
&lt;li>命令行标志 # loki 二进制文件的 &lt;code>-target&lt;/code> 命令行标志&lt;/li>
&lt;li>配置文件 # 配置文件中的 &lt;code>target&lt;/code> 字段。&lt;/li>
&lt;/ul>
&lt;p>target 可用的值有：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>all&lt;/strong> # 表示 Loki 将以 Monolithic 架构运行，这也是默认的运行方式。Monolithic 模式非常适合测试或运行一个小规模的 Loki；而 Microservices 架构则提供了 Loki 的水平扩展性。&lt;/li>
&lt;li>&lt;strong>read&lt;/strong> # 运行 Ingestor 和 Distributor 组件&lt;/li>
&lt;li>&lt;strong>write&lt;/strong> # 运行 Querier、Query frontend、Ruler 组件&lt;/li>
&lt;li>&lt;strong>ingester&lt;/strong> # 只运行 Ingester 组件&lt;/li>
&lt;li>&lt;strong>distributor&lt;/strong> # 只运行 Distributor 组件&lt;/li>
&lt;li>&lt;strong>query-frontend&lt;/strong> # 只运行 Query Frontend 组件&lt;/li>
&lt;li>&lt;strong>query-scheduler&lt;/strong> # 只运行&lt;/li>
&lt;li>&lt;strong>querier&lt;/strong> # 只运行 Querier 组件&lt;/li>
&lt;li>&lt;strong>index-gateway&lt;/strong> # 只运行&lt;/li>
&lt;li>&lt;strong>ruler&lt;/strong> # 只运行 Ruler 组件&lt;/li>
&lt;li>&lt;strong>compactor&lt;/strong> # 只运行 Compactor 组件&lt;/li>
&lt;/ul>
&lt;h2 id="最基本的运行条件">最基本的运行条件&lt;/h2>
&lt;p>这些组件中，可以和存储直接交互的有 Ingester、Querier、Ruler。**最重要的组件是 Distributor、Ingester、Querier **这三个，这是 Loki 基本运行的最低要求。
Distributor 接收客户端(比如 Promtail) 推送的日志，处理后交给 Ingester 转存到本地或对象存储中，Querier 接收 LogQL 查询请求。&lt;/p>
&lt;h2 id="架构分类">架构分类&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/fundamentals/architecture/deployment-modes/">官方文档，基础-架构-部署模式&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>作为一个应用程序，Loki 由许多组件微服务构建而成，旨在作为一个可水平扩展的分布式系统运行。Loki 的独特设计将整个分布式系统的代码编译成单个二进制或 Docker 映像。该单个二进制文件的行为由-target 命令行标志控制，并定义了三种操作模式之一。
Loki 旨在根据需求变化轻松地在不同架构下重新部署集群，无需更改配置或进行最少的配置更改。&lt;/p>
&lt;ul>
&lt;li>Monolithic 架构对于快速开始试验 Loki 以及每天高达约 100GB 的小读/写量非常有用。&lt;/li>
&lt;li>Loki 的简单可扩展部署可以扩展到每天数 TB 甚至更多的日志。&lt;/li>
&lt;li>对于非常大的 Loki 集群或需要对扩展和集群操作进行更多控制的集群，建议使用微服务模式。&lt;/li>
&lt;/ul>
&lt;h3 id="monolithic统一-架构">Monolithic(统一) 架构&lt;/h3>
&lt;p>这种架构需要通过 loki 二进制文件只启动 1 个进程，使该进程用 &lt;code>-target=all&lt;/code> 以便在一个进程中运行所有组件。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gcp6zx/1660115619129-e6fa2017-8e05-46d7-ab56-207ee3cfc90b.png" alt="image.png">
这是最经典的模式，早期 Loki 通常都是以这种模式被大家部署。这种模式是 loki 以单个二进制文件运行 Loki 的所有组件，如上图，instance 可以看作一个单独的二进制文件。
Monolithic 模式非常适合于本地开发、小规模等场景，Monolithic 模式可以通过多个进程进行扩展，但有以下限制：&lt;/p>
&lt;ul>
&lt;li>当运行带有多个副本的单体模式时，当前无法使用本地索引和本地存储，因为每个副本必须能够访问相同的存储后端，但是本地存储对于并发访问并不安全。主要是因为 BoltDB 仅允许一个进程在同一时间锁定数据库。如果使用远程存储不受影响。&lt;/li>
&lt;li>各个组件无法独立缩放，因此读取组件的数量不能超过写入组件的数量。&lt;/li>
&lt;/ul>
&lt;p>这个进程产生一个 gRPC 监听(默认 9095 端口)和一个 HTTP 监听(默认 3100 端口)。各个组件内部在同一个进程的共享内存中进行数据交互。&lt;/p>
&lt;h3 id="simple-scalable简单可扩展-架构">Simple scalable(简单可扩展) 架构&lt;/h3>
&lt;p>这种架构需要通过 loki 二进制文件至少启动 2 个进程，保证两个进程分别具有 读 和 写 的功能&lt;/p>
&lt;ul>
&lt;li>其中一个进程使用 &lt;code>-target=write&lt;/code> 运行具有写功能的组件，包括 Ingestor 和 Distributor&lt;/li>
&lt;li>另一个进程使用 &lt;code>-target=read&lt;/code> 运行具有读功能的组件，包括 Querier、Query frontend、Ruler&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gcp6zx/1660120707493-6efe2870-f1a3-446f-b760-6f520236c358.png" alt="image.png">
这种架构将 Loki 的读/写分离。这个图里少了一点，通常来说，5 个 Loki 实例前面还有一个负载均衡设备，用来接收客户端的 读/写请求，以便将请求转发给对应的 Loki 实例。&lt;/p>
&lt;h3 id="microservices微服务-架构">Microservices(微服务)  架构&lt;/h3>
&lt;p>这种架构需要通过 loki 二进制文件至少启动 4 个进程，整套架构由多个单一功能的进程组成&lt;/p>
&lt;ul>
&lt;li>&lt;code>-target=distributor&lt;/code> # 运行分配器&lt;/li>
&lt;li>&lt;code>-target=ingester&lt;/code># 运行摄取器&lt;/li>
&lt;li>&lt;code>-target=querier&lt;/code># 运行查询器&lt;/li>
&lt;li>&lt;code>-target=query-frontend&lt;/code># 运行查询前端&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gcp6zx/1660115629058-db37e36d-3ed5-4bd9-86bc-3fbb05df38d0.png" alt="image.png">
这种微服务架构与 Thanos 类似，可以通过一个 Loki 的二进制文件，使用子命令来启动不同的功能。&lt;/p>
&lt;ul>
&lt;li>每个组件都产生一个 gRPC 监听(默认 9095 端口)和一个 HTTP 监听(默认 3100 端口)。
&lt;ul>
&lt;li>通常情况下，gRPC 端口用于组件间通信；HTTP 端口用于暴露一些管理 API(比如 指标、运行状态、就绪性)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>各个组件可以暴露的 HTTP API 详见 [Loki API 章节](✏IT 学习笔记/👀6.可观测性/日志系统/Loki/Loki%20API.md API.md)。通过 API，我们可以更清晰得了解到，每个组件可以实现的具体功能&lt;/li>
&lt;li>各个组件通过 memberlist 统一到一个哈希环上，以互相发现。当我们部署在 K8S 中时，将会配置 &lt;code>memberlist.join_members&lt;/code> 字段，并且需要创建对应的 service 资源，service 的 endpoint 将会关联到所有 Distributor、Ingester、Querier 组件。&lt;/li>
&lt;/ul>
&lt;h3 id="gateway网关">Gateway(网关)&lt;/h3>
&lt;p>在我们使用 Simple scalable 和 Microservices 这两种架构时，通常会使用一个 &lt;code>loki-gateway&lt;/code> ，这是一个 Nginx，配置很简单：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">http&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">server&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">listen&lt;/span> &lt;span style="color:#ae81ff">8080&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">location&lt;/span> = &lt;span style="color:#e6db74">/&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">return&lt;/span> &lt;span style="color:#ae81ff">200&lt;/span> &lt;span style="color:#e6db74">&amp;#39;OK&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">auth_basic&lt;/span> &lt;span style="color:#66d9ef">off&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">......略&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">location&lt;/span> = &lt;span style="color:#e6db74">/loki/api/v1/push&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">set&lt;/span> $loki_api_v1_push_backend &lt;span style="color:#e6db74">http://loki-loki-distributed-distributor.logging.svc.cluster.local&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">proxy_pass&lt;/span> $loki_api_v1_push_backend:3100$request_uri;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">location&lt;/span> ~ &lt;span style="color:#e6db74">/loki/api/.*&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">set&lt;/span> $loki_api_backend &lt;span style="color:#e6db74">http://loki-loki-distributed-query-frontend.logging.svc.cluster.local&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">proxy_pass&lt;/span> $loki_api_backend:3100$request_uri;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到，这个 &lt;code>loki-gateway&lt;/code> 用来为 Loki 进行读/写分离的。loki-gateway 会根据客户端发起请求的 URL 判断这个请求应该由哪个组件进行处理。
Nginx 的配置依据两种架构的不同而有细微区别，但是总归是需要一个 Gateway 的。不管是 Promtail 推送数据，还是客户端查询数据，都可以先经过 loki-gateway&lt;/p>
&lt;h2 id="数据写入路径">数据写入路径&lt;/h2>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gcp6zx/1660123438275-02b6febb-0f26-431b-9450-9b5f6f125305.png" alt="image.png">
整体的日志写入路径如下所示：&lt;/p>
&lt;ul>
&lt;li>&lt;code>Distributor&lt;/code> 收到一个 HTTP 请求，以存储流的数据。&lt;/li>
&lt;li>每个流都使用哈希环进行哈希操作。&lt;/li>
&lt;li>&lt;code>Distributor&lt;/code> 将每个流发送到合适的 &lt;code>Ingester&lt;/code> 和他们的副本（基于配置的复制因子）。&lt;/li>
&lt;li>每个 &lt;code>Ingester&lt;/code> 将为日志流数据创建一个块或附加到一个现有的块上。每个租户和每个标签集的块是唯一的。&lt;/li>
&lt;li>&lt;code>Distributor&lt;/code> 通过 HTTP 连接响应一个成功代码。&lt;/li>
&lt;/ul>
&lt;h2 id="数据读取路径">数据读取路径&lt;/h2>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gcp6zx/1660118903925-bca6ba6b-f991-4a28-a407-9c6febb38a36.png" alt="image.png">
日志读取路径的流程如下所示：&lt;/p>
&lt;ul>
&lt;li>&lt;code>Querier&lt;/code> 收到一个对数据的 HTTP 请求。&lt;/li>
&lt;li>&lt;code>Querier&lt;/code> 将查询传递给所有 &lt;code>Ingesters&lt;/code> 以获取内存数据。&lt;/li>
&lt;li>&lt;code>Ingesters&lt;/code> 收到读取请求，并返回与查询相匹配的数据（如果有的话）。&lt;/li>
&lt;li>如果没有 &lt;code>Ingesters&lt;/code> 返回数据，查询器会从后端存储(比如 S3)加载数据，并对其运行查询。&lt;/li>
&lt;li>查询器对所有收到的数据进行迭代和重复计算，通过 HTTP 连接返回最后一组数据。&lt;/li>
&lt;/ul>
&lt;h1 id="loki-主要组件概述">Loki 主要组件概述&lt;/h1>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gcp6zx/1621238613211-cedcd7da-602a-4c15-9b27-dbcb797317d8.png" alt="">&lt;/p>
&lt;h2 id="distributor分配器">Distributor(分配器)&lt;/h2>
&lt;p>Distributor 服务负责处理客户端写入的日志，它本质上是日志数据写入路径中的&lt;strong>第一站&lt;/strong>，一旦 Distributor 收到日志数据，会将其拆分为多个批次，然后并行发送给多个 Ingester。
Distributor 通过 gRPC 与 Ingester 通信，它们都是无状态的，可以根据需要扩大或缩小规模。&lt;/p>
&lt;h2 id="ingester摄取器">Ingester(摄取器)&lt;/h2>
&lt;p>Ingester 服务负责将日志数据写入长期存储后端（DynamoDB、S3、Cassandra 等）。此外 Ingester 会验证摄取的日志行是按照时间戳递增的顺序接收的（即每条日志的时间戳都比前面的日志晚一些），当 Ingester 收到不符合这个顺序的日志时，该日志行会被拒绝并返回一个错误。
注意：虽然 Ingester 支持 BoltDB 写入本地文件系统，但是这仅适用于[单进程模式](✏IT 学习笔记/👀6.可观测性/日志系统/Loki/Loki%20 部署.md 部署.md)，因为 Querier 也需要访问相同的存储，而 BoltDB 仅允许一个进程在同一时间锁定数据库。&lt;/p>
&lt;h2 id="querier查询器">Querier(查询器)&lt;/h2>
&lt;p>Querier(查询器) 使用 LogQL 处理查询，从 Ingesters 和长期存储中获取日志。&lt;/p>
&lt;h2 id="query-frontend查询前端">Query Frontend(查询前端)&lt;/h2>
&lt;p>Query Frontend(查询前端) 是一个可选的组件。当 Loki 以微服务架构运行时，且存在多个 Querier(查询器)，则查询前端可以平均得调度 LogQL 请求到查询器上，说白了就是实现负载均衡的效果。并且查询前端还可以并行处理请求、并缓存这些数据。&lt;/p>
&lt;h1 id="loki-关联文件与配置">Loki 关联文件与配置&lt;/h1>
&lt;p>/etc/loki/local-config.yaml # loki 程序运行时默认配置文件
/StorageConfig/PATH/TO/index # loki 的 BoltDB 中存储索引数据保存路径，无默认值，根据配置文件中 &lt;code>.strorage_confg.boltdb.directory&lt;/code> 字段指定。
/StorageConfig/PATH/TO/chunks # loki 的 chunks(块) 存储数据保存路径，无默认值，根据配置文件中 &lt;code>.strorage_confg.filesystem.directory&lt;/code> 字段指定。&lt;/p>
&lt;h1 id="loki-与其他日志系统相比">Loki 与其他日志系统相比&lt;/h1>
&lt;p>官方文档：&lt;a href="https://grafana.com/docs/loki/latest/fundamentals/overview/comparisons/">https://grafana.com/docs/loki/latest/fundamentals/overview/comparisons/&lt;/a>
Loki / Promtail / Grafana vs EFK
EFK（Elasticsearch，Fluentd，Kibana）堆栈用于从各种来源提取，可视化和查询日志。
Elasticsearch 中的数据作为非结构化 JSON 对象存储在磁盘上。每个对象的键和每个键的内容都被索引。然后可以使用 JSON 对象或定义为 Lucene 的查询语言来查询数据以定义查询（称为查询 DSL）。
相比之下，Loki 在单二进制模式下可以将数据存储在磁盘上，但是在水平可伸缩模式下，数据存储在诸如 S3，GCS 或 Cassandra 之类的云存储系统中。日志以纯文本格式存储，并带有一组标签名称和值，其中仅对标签对进行索引。这种折衷使得它比全索引更便宜，并且允许开发人员从其应用程序积极地进行日志记录。使用 LogQL 查询 Loki 中的日志。但是，由于这种设计上的折衷，基于内容（即日志行中的文本）进行过滤的 LogQL 查询需要加载搜索窗口中与查询中定义的标签匹配的所有块。
Fluentd 通常用于收集日志并将其转发到 Elasticsearch。Fluentd 被称为数据收集器，它可以从许多来源提取日志，对其进行处理，然后将其转发到一个或多个目标。
相比之下，Promtail 的用例专门针对 Loki 量身定制。它的主要操作模式是发现存储在磁盘上的日志文件，并将与一组标签关联的日志文件转发给 Loki。Promtail 可以为与 Promtail 在同一节点上运行的 Kubernetes Pod 进行服务发现，充当容器边车或 Docker 日志记录驱动程序，从指定的文件夹中读取日志并尾随系统日志。
Loki 用一组标签对表示日志的方式类似于 Prometheus 表示度量的方式。当与 Prometheus 一起部署在环境中时，由于使用相同的服务发现机制，Promtail 的日志通常具有与应用程序指标相同的标签。具有相同级别的日志和指标使用户可以在指标和日志之间无缝地进行上下文切换，从而有助于根本原因分析。
Kibana 用于可视化和搜索 Elasticsearch 数据，并且在对该数据进行分析时非常强大。Kibana 提供了许多可视化工具来进行数据分析，例如位置图，用于异常检测的机器学习以及用于发现数据关系的图形。可以将警报配置为在发生意外情况时通知用户。
相比之下，Grafana 专门针对来自 Prometheus 和 Loki 等来源的时间序列数据量身定制。可以设置仪表板以可视化指标（即将提供日志支持），并且可以使用浏览视图对数据进行临时查询。与 Kibana 一样，Grafana 支持根据您的指标进行警报。&lt;/p>
&lt;ul>
&lt;li>kibana 启动速度比 grafana 慢了 10 倍&lt;/li>
&lt;li>es 启动时，内存使用达到 1.5G，后续存储同样内容的情况下，es 内存使用率 1G 多，loki 内存使用率 200 多 M&lt;/li>
&lt;li>promtail 使用 yaml 作为 配置文件格式，与 prom 配置逻辑一致。fluentd 配置文件格式类似 html&lt;/li>
&lt;li>grafana 页面可以直接通过标签用鼠标点击过滤。kibana 则需要输入内容。&lt;/li>
&lt;/ul></description></item><item><title>Docs: Loki API</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/loki/loki-api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/loki/loki-api/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/">官方文档,HTTP API&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>每个组件都会暴露一些基本的 API&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#identify-ready-loki-instance">GET /ready&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#return-exposed-prometheus-metrics">GET /metrics&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#list-current-configuration">GET /config&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#list-running-services">GET /services&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#list-build-information">GET /loki/api/v1/status/buildinfo&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>除了这几个基本的 API 以外，每个组件都会暴露一些专用的 API，若是以 Monolithic 架构启动 Loki，则下面的所有 API 都会在这个进程暴露。&lt;/p>
&lt;h1 id="querier-api-与-query-frontend-api">Querier API 与 Query Frontend API&lt;/h1>
&lt;p>查询器与查询前端暴露的 API 是我们最常用的 API，用来处理客户端发来的 LogQL。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#query-loki">GET /loki/api/v1/query&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#query-loki-over-a-range-of-time">GET /loki/api/v1/query_range&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#step-vs-interval">Step vs Interval&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#list-labels-within-a-range-of-time">GET /loki/api/v1/labels&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#list-label-values-within-a-range-of-time">GET /loki/api/v1/label/&lt;!-- raw HTML omitted -->/values&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#list-series">GET /loki/api/v1/series&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#index-stats">GET /loki/api/v1/index/stats&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#stream-log-messages">GET /loki/api/v1/tail&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="distributor-api">Distributor API&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#post-flush">POST /flush&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#post-ingesterflush_shutdown">POST /ingester/flush_shutdown&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="ingester-api">Ingester API&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#flush-in-memory-chunks-to-backing-store">POST /flush&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#flush-in-memory-chunks-and-shut-down">POST /ingester/shutdown&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="ruler-api">Ruler API&lt;/h1>
&lt;p>以 /loki/ 开头的 API 与 &lt;a href="https://prometheus.io/docs/prometheus/latest/querying/api/">Prometheus API&lt;/a> 兼容，结果格式可以互换使用&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#ruler-ring-status">GET /ruler/ring&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#list-rule-groups">GET /loki/api/v1/rules&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#get-rule-groups-by-namespace">GET /loki/api/v1/rules/{namespace}&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#get-rule-group">GET /loki/api/v1/rules/{namespace}/{groupName}&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#set-rule-group">POST /loki/api/v1/rules/{namespace}&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#delete-rule-group">DELETE /loki/api/v1/rules/{namespace}/{groupName}&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#delete-namespace">DELETE /loki/api/v1/rules/{namespace}&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#list-rule-groups">GET /api/prom/rules&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#get-rule-groups-by-namespace">GET /api/prom/rules/{namespace}&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#get-rule-group">GET /api/prom/rules/{namespace}/{groupName}&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#set-rule-group">POST /api/prom/rules/{namespace}&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#delete-rule-group">DELETE /api/prom/rules/{namespace}/{groupName}&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#delete-namespace">DELETE /api/prom/rules/{namespace}&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#list-rules">GET /prometheus/api/v1/rules&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#list-alerts">GET /prometheus/api/v1/alerts&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="compactor-api">Compactor API&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#get-compactorring">GET /compactor/ring&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#post-lokiapiv1delete">POST /loki/api/v1/delete&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#get-lokiapiv1delete">GET /loki/api/v1/delete&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/api/#delete-lokiapiv1delete">DELETE /loki/api/v1/delete&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="series-api">Series API&lt;/h1>
&lt;ul>
&lt;li>GET /loki/api/v1/series&lt;/li>
&lt;li>POST /loki/api/v1/series&lt;/li>
&lt;li>GET /api/prom/series&lt;/li>
&lt;li>POST /api/prom/series&lt;/li>
&lt;/ul></description></item><item><title>Docs: Loki Rules 配置</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/loki/loki-rules-%E9%85%8D%E7%BD%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/loki/loki-rules-%E9%85%8D%E7%BD%AE/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/rules/">官方文档，告警规则和记录规则&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Loki Rules 文件的结构与 Promethues 的 Rules 文件结构一模一样。&lt;/p>
&lt;h1 id="loki-rules-配置详解">Loki Rules 配置详解&lt;/h1>
&lt;h2 id="alerting-rules告警规则">Alerting Rules(告警规则)&lt;/h2>
&lt;h2 id="recording-rules记录规则">Recording Rules(记录规则)&lt;/h2></description></item><item><title>Docs: Loki 部署</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/loki/loki-%E9%83%A8%E7%BD%B2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/loki/loki-%E9%83%A8%E7%BD%B2/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/installation/">官方文档，安装&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/fundamentals/architecture/deployment-modes">官方文档，基础知识-架构-部署模式&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="使用-docker-运行-loki">使用 docker 运行 Loki&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker run -d --rm --name loki &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --network host &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -v /opt/loki/config:/etc/loki &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -v /opt/loki/data:/loki &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -v /etc/localtime:/etc/localtime:ro &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> grafana/loki
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意：与 Prometheus 类似，需要修改 /opt/loki 目录权限为 777，否则 pod 内进程对该目录无操作权限&lt;/p>
&lt;h1 id="在-kubernets-集群中部署">在 Kubernets 集群中部署&lt;/h1>
&lt;p>添加 loki 的 helm chart 仓库&lt;/p>
&lt;ul>
&lt;li>&lt;strong>helm repo add grafana &lt;a href="https://grafana.github.io/helm-charts">https://grafana.github.io/helm-charts&lt;/a>&lt;/strong>&lt;/li>
&lt;li>&lt;strong>helm repo update&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h2 id="helm-部署-loki-套件">Helm 部署 Loki 套件&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://grafana.com/docs/loki/v2.4.x/installation/helm/">官方文档 2.4.x，安装-helm&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>部署 Loki 栈&lt;/p>
&lt;ul>
&lt;li>kubectl create ns loki # 创建名称空间&lt;/li>
&lt;li>helm pull grafana/loki-stack # 获取 loki-stack 的 charts 压缩包&lt;/li>
&lt;li>tar -zxvf loki-stack-X.XX.X.tgz # 解压 charts&lt;/li>
&lt;li>cd loki-stack # 进入目录，根据需求修改模板或 values.yaml 文件&lt;/li>
&lt;li>helm upgrade &amp;ndash;install loki &amp;ndash;namespace=loki . # 使用默认配置在 loki 名称空间中部署 loki 栈 。该方式会部署 loki 与 promtail&lt;/li>
&lt;/ul>
&lt;p>在 grafana 中添加 loki 数据源，如图所示
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/vg0v2e/1616129749320-bb4bc4c9-2acb-460f-a655-5ff76766eb24.jpeg" alt="">&lt;/p>
&lt;h2 id="helm-部署-simple-scalable-架构-loki">Helm 部署 Simple scalable 架构 Loki&lt;/h2>
&lt;p>部署 Loki&lt;/p>
&lt;ul>
&lt;li>&lt;strong>helm install -n logging loki &amp;ndash;create-namespace grafana/loki-simple-scalable&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>注意：可扩展模式会部署 &lt;code>loki-gateway&lt;/code> 用以接收请求，并分离 读/写 请求，所有 Promtail 用来向 Loki 发起写请求的采集客户端和 Grafana 这种用来向 Loki 发起读请求的展示客户端，指定 Loki 端点时，都要指定 &lt;code>loki-gateway&lt;/code>。&lt;/p>
&lt;p>这里为什么要自带 grafana-agent？这个 grafana-agent 是通过 grafana/agent-operator 拉起来的。&lt;/p>
&lt;h2 id="helm-部署-microservices-架构-loki">Helm 部署 Microservices 架构 Loki&lt;/h2>
&lt;p>部署 Loki&lt;/p>
&lt;ul>
&lt;li>&lt;strong>helm install -n logging loki &amp;ndash;create-namespace grafana/loki-distributed&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h1 id="日志测试容器">日志测试容器&lt;/h1>
&lt;p>这俩容器会频繁刷新各种类型日志&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">apps/v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Deployment&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">dummylogs&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">replicas&lt;/span>: &lt;span style="color:#ae81ff">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">selector&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">matchLabels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">dummylogs&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">template&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">dummylogs&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">logging&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;true&amp;#34;&lt;/span> &lt;span style="color:#75715e"># 要采集日志需要加上该标签&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">containers&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">dummy&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">cnych/dummylogs:latest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">args&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">msg-processor&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">apps/v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Deployment&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">dummylogs2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">replicas&lt;/span>: &lt;span style="color:#ae81ff">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">selector&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">matchLabels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">dummylogs2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">template&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">dummylogs2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">logging&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;true&amp;#34;&lt;/span> &lt;span style="color:#75715e"># 要采集日志需要加上该标签&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">containers&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">dummy&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">cnych/dummylogs:latest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">args&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">msg-receiver-api&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Loki 管理</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/loki/loki-%E7%AE%A1%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/loki/loki-%E7%AE%A1%E7%90%86/</guid><description/></item><item><title>Docs: Loki 开发</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/loki/loki-%E5%BC%80%E5%8F%91/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/loki/loki-%E5%BC%80%E5%8F%91/</guid><description/></item><item><title>Docs: Loki 配置</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/loki/loki-%E9%85%8D%E7%BD%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/loki/loki-%E9%85%8D%E7%BD%AE/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/configuration/">官方文档，配置&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/rules/">官方文档，告警规则和记录规则&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Loki 可以通过两种方式配置 Loki 的运行时行为&lt;/p>
&lt;ul>
&lt;li>命令行标志&lt;/li>
&lt;li>配置文件&lt;/li>
&lt;/ul>
&lt;p>配置文件的一部分字段的值，可以通过命令行标志设置。在官方文档中，我们可以查看到配置文件中，所有与命令行标志对应的字段，效果如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># HTTP server listen host&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># CLI flag: -server.http-listen-address&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[http_listen_address&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;string&amp;gt;]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>凡是注释中，有 &lt;code>CLI flag&lt;/code> 的字段，都可以通过命令行标签设置其值。&lt;/p>
&lt;h1 id="loki-命令行标志详解">Loki 命令行标志详解&lt;/h1>
&lt;p>&lt;strong>-target &lt;!-- raw HTML omitted -->&lt;/strong> # 指定要启用的模块&lt;/p>
&lt;ul>
&lt;li>可用的模块有 distributor、ingester、querier、query-frontend、table-manager。&lt;/li>
&lt;li>可以使用 read、write 来让 loki 运行在只读或只写的模式&lt;/li>
&lt;li>可以使用 all 表示启用所有模块&lt;/li>
&lt;/ul>
&lt;h1 id="lokiyaml-配置文件详解">loki.yaml 配置文件详解&lt;/h1>
&lt;p>文档中包含配置文件关键字与命令行 flag 的对应值，配置文件中的很多配置，都可以通过命令行 flag 来实现。
配置文件的基本结构：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 指定 loki 二进制文件要运行的组件列表。默认值：all，即运行所有组件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">target&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;STRING&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 通过 X-Scope-OrgID 标头启用身份验证，如果为 true，则必须存在。 如果为 false，则 OrgID 将始终设置为“ fake”。默认值：true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">auth_enabled&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;BOOLEAN&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 用于配置 loki 提供 http 和 gRPC 这两种服务的行为&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">server&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;OBJECT&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 通用配置。用于配置一些其他配置部分可以共享的配置，比如存储。优先级低，若其他部分指定了相同的配置，则该配置在对应的其他部分的配置将被忽略。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 从 2.4 版本开始，common 字段将会逐步代替其他描述不清晰的字段，比如 common.storage 将会代替 storage_cofig 字段&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">common&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;OBJECT&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">######## 存储架构配置 ########&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 配置储存 Chunk 与 Index 类型数据的模式，以及指定储存这些数据所用的存储类型。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">schema_config&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;schema_config&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 为 schema_config 字段指定的存储类型配置详细信息。比如 数据存储位置、连接存储的方式 等等。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 注意：该字段的配置会根据 schema_config 字段中指定的信息来选择可用的字段。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 未来将会逐步被 common.storage 字段代替&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">storage_config&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;storage_config&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">######## 组件配置 ########&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Distributor(分配器) 组件的配置&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">distributor&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;distributor_config&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Querier(查询器) 组件的配置.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">querier&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;querier_config&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Ingester(摄取器) 组件的配置。还可以配置摄取器如何将自己注册到哈希环上&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">ingester&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;ingester_config&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 配置 distributor 如何连接到 ingesters&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">ingester_client&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;OBJECT&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Query Frontend(查询前端) 组件的配置&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">frontend&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;query_frontend_config&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Ruler(规则器) 组件的配置&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">ruler&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;ruler_config&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Compactor(压缩器) 组件的配置&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">compactor&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;compactor_config&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Table Manager(表管理器) 组件的配置，以规定数据保留的行为&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">table_manager&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;OBJECT&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">######## 其他配置 ########&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># The queryrange_config configures the query splitting and caching in the Loki query-frontend.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">query_range&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;queryrange_config&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">chunk_store_config&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;chunk_store_config&amp;gt;&lt;/span> &lt;span style="color:#75715e"># 配置 Loki 如何将数据存放在指定的存储中&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 配置每个租户的限制或全局的限制&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">limits_config&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;limits_config&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># The frontend_worker_config configures the worker - running within the Loki&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># querier - picking up and executing queries enqueued by the query-frontend.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">frontend_worker&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;frontend_worker_config&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Configuration for &amp;#34;runtime config&amp;#34; module, responsible for reloading runtime configuration file.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">runtime_config&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;runtime_config&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Configuration for tracing&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">tracing&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;tracing_config&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="target-string--指定二进制文件要运行的组件列表">target: &lt;!-- raw HTML omitted --> # 指定二进制文件要运行的组件列表。&lt;/h2>
&lt;p>可用的值有：all、read、write、ingester、distributor、query-frontend、query-scheduler、querier、index-gateway、ruler、compactor。&lt;/p>
&lt;h2 id="auth_enabled-boolean">auth_enabled: &lt;!-- raw HTML omitted -->&lt;/h2>
&lt;h2 id="server-object">server: &lt;!-- raw HTML omitted -->&lt;/h2>
&lt;p>用于配置 loki 提供 http 和 gRPC 这两种服务的行为&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">server&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">http_listen_address&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;STRING&amp;gt;&lt;/span> &lt;span style="color:#75715e"># 指定 http 服务监听的端口&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="common-objecthttpsgrafanacomdocslokinextconfigurationcommon">&lt;a href="https://grafana.com/docs/loki/next/configuration/#common">common: &lt;!-- raw HTML omitted -->&lt;/a>&lt;/h2>
&lt;blockquote>
&lt;p>2.4 版本之前并没有这个字段，早期 Loki 的配置文件解读起来非常混乱。但是 2.4 版本之后，可以通过 common 字段统一定义一些之前带有歧义的字段，&lt;code>common.storage&lt;/code> 可以代替 &lt;code>storage_config&lt;/code> 用以配置后端存储的信息。&lt;/p>
&lt;/blockquote>
&lt;p>通用配置。&lt;strong>在配置 Loki 组件所使用的 哈希环、存储、等等 时，可以不在每个组件单独配置，而是直接使用这里定义的通用配置。&lt;/strong>&lt;/p>
&lt;h3 id="path_prefix-string">path_prefix: &lt;!-- raw HTML omitted -->&lt;/h3>
&lt;p>When defined, the given prefix will be present in front of the endpoint paths.&lt;/p>
&lt;h3 id="replication_factor-int--default--3">replication_factor: &lt;!-- raw HTML omitted --> | default = 3&lt;/h3>
&lt;p>How many times incoming data should be replicated to the ingester component.&lt;/p>
&lt;h3 id="ring-object">ring: &lt;!-- raw HTML omitted -->&lt;/h3>
&lt;p>所有使用哈希环的组件的通用哈希环配置。. If a common ring is given, its values are used to define any undefined ring values. For instance, you can expect the &lt;code>heartbeat_period&lt;/code> defined in the common section to be used by the distributor&amp;rsquo;s ring, but only if the distributor&amp;rsquo;s ring itself # doesn&amp;rsquo;t have a &lt;code>heartbeat_period&lt;/code> set.
&lt;strong>kvstore: &lt;!-- raw HTML omitted -->&lt;/strong> #&lt;/p>
&lt;ul>
&lt;li>&lt;strong>store: &lt;!-- raw HTML omitted -->&lt;/strong> # 用于保存哈希环的存储。&lt;code>默认值：memberlist&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="storage-object">storage: &lt;!-- raw HTML omitted -->&lt;/h3>
&lt;blockquote>
&lt;p>该字段可以代替 &lt;code>storage_config&lt;/code> 字段。比如 ruler.storage.type 的值为 s3 的话，就会使用这里的 s3 字段的配置；若值为 local，则会使用这里的 filesystem 字段的配置&lt;/p>
&lt;/blockquote>
&lt;p>Loki 不同组件共享使用的存储配置。该字段配置存储信息，用以告诉 Loki 如何使用各种类型的存储。
**s3: &lt;!-- raw HTML omitted --> **# S3 类型存储的信息。包括 连接方式、数据要保存的桶 等信息&lt;/p>
&lt;ul>
&lt;li>详见下文通用配置字段 &lt;a href="#J3m3x">s3: &lt;!-- raw HTML omitted -->&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>azure: &amp;lt;Azure_Store_Config&amp;gt;&lt;/strong> #
&lt;strong>gcs: &amp;lt;&amp;gt;&lt;/strong> #
&lt;strong>swift: &amp;lt;&amp;gt;&lt;/strong> #
**filesystem: **&lt;a href="https://grafana.com/docs/loki/next/configuration/#filesystem">&lt;strong>&lt;!-- raw HTML omitted -->&lt;/strong>&lt;/a> # 将本地文件系统作为 Loki 组件存储数据的地方&lt;/p>
&lt;ul>
&lt;li>**chunks_directory: &lt;!-- raw HTML omitted --> **# 存储 chunks 数据的目录&lt;/li>
&lt;li>&lt;strong>rules_directory: &lt;!-- raw HTML omitted -->&lt;/strong> # 存储 Loki Rules 文件的目录&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>bos: &lt;!-- raw HTML omitted -->&lt;/strong> # Baidu Object Storage(百度对象存储) 的信息。
**hedging: **&lt;a href="https://grafana.com/docs/loki/next/configuration/#hedging">&lt;strong>&lt;!-- raw HTML omitted -->&lt;/strong>&lt;/a> #&lt;/p>
&lt;h3 id="配置示例">配置示例&lt;/h3>
&lt;p>通用的 S3 存储配置&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">common&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">storage&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">s3&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">access_key_id&lt;/span>: &lt;span style="color:#ae81ff">minioadmin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">bucketnames&lt;/span>: &lt;span style="color:#ae81ff">chunks&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">endpoint&lt;/span>: &lt;span style="color:#ae81ff">172.19.42.215&lt;/span>:&lt;span style="color:#ae81ff">9000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">insecure&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">s3forcepathstyle&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">secret_access_key&lt;/span>: &lt;span style="color:#ae81ff">minioadmin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ring&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">kvstore&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">store&lt;/span>: &lt;span style="color:#ae81ff">memberlist&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="配置如何存储-chunk-与-index-数据">配置如何存储 chunk 与 index 数据&lt;/h2>
&lt;p>影响 chunk 与 index 两类数据如何存储的最重要配置只有两个字段：&lt;code>schema_config&lt;/code> 和 &lt;code>storage_config&lt;/code>。其他字段都是对存储方式的补充。不过随着版本的更迭，从 2.4 版本开始，&lt;code>storage_config&lt;/code> 字段会逐渐被 &lt;code>common.storage&lt;/code> 字段顶替。
简单描述的话：&lt;/p>
&lt;ul>
&lt;li>schema_config 用来定义使用什么储存数据&lt;/li>
&lt;li>strage_config 用来定义如何连接存储以及存储储存数据的路径。&lt;/li>
&lt;/ul>
&lt;h3 id="schema_config-object">schema_config: &lt;!-- raw HTML omitted -->&lt;/h3>
&lt;p>配置存储 chunk 与 index 两类数据的 schema(模式)。该字段用途详见 &lt;a href="https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/Loki/Storage(%E5%AD%98%E5%82%A8).md">Loki 存储&lt;/a>
schema_config 下只有一个单独的 &lt;code>configs&lt;/code> 字段，其实用 period_config 更准确~~~&lt;code>configs&lt;/code> 字段下这是一个数组，每个数组都可以用来定义&amp;quot;某一时间段 loki 存储所使用的 schema&amp;quot;。所以，&lt;code>configs&lt;/code> 字段用来定义从 哪个时间段开始使用哪种模式将 index 与 chunk 类型的数据存储到哪里去。&lt;/p>
&lt;h4 id="configs-object">configs: &amp;lt;[]Object&amp;gt;&lt;/h4>
&lt;p>&lt;strong>from: 2018-04-15&lt;/strong> # 该模式的起始时间
注意：store 与 object_store 字段的配置将会决定 Loki 使用 storage_config 中的哪个字段作为存储数据的地方
&lt;strong>schema: &lt;!-- raw HTML omitted -->&lt;/strong> # 模式的版本，当前推荐为 v11。
&lt;strong>store: &lt;!-- raw HTML omitted -->&lt;/strong> # 存放 Index 数据的存储类型。可用的值有：aws, aws-dynamo, gcp, bigtable, bigtable-hashed,cassandra, boltdb-shipper
&lt;strong>object_store: &lt;!-- raw HTML omitted -->&lt;/strong> # 存放 Chunks 数据的存储类型。可用的值有：s3、aws、azure、gcp、bigtable、gcs、cassandra、swift、filesystem。&lt;code>默认值：与 store 字段的值相同&lt;/code>。
&lt;strong>index: &lt;!-- raw HTML omitted -->&lt;/strong> # 指定储存 Index 数据的行为。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>prefix: &lt;!-- raw HTML omitted -->&lt;/strong> # 表的前缀，也就是 index 文件的前缀。&lt;/li>
&lt;li>&lt;strong>period: &lt;!-- raw HTML omitted -->&lt;/strong> # 表的周期(在当前期间中，每隔 DURATION 的时间创建一张表)。该值必须为 24h 的倍数。&lt;code>默认值：168h&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>chunks: &lt;!-- raw HTML omitted -->&lt;/strong> # 指定储存 Chunks 数据的行为。&lt;code>默认值：复制 index 字段的配置&lt;/code>。其内字段含义与 index 字段下的子字段功能一样。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>prefix: &lt;!-- raw HTML omitted -->&lt;/strong> #&lt;/li>
&lt;li>&lt;strong>period: &lt;!-- raw HTML omitted -->&lt;/strong> #&lt;/li>
&lt;/ul>
&lt;p>~~注意~~~~：&lt;del>&lt;code>~~store~~&lt;/code>&lt;/del> 与 &lt;del>&lt;code>~~object_store~~&lt;/code>&lt;/del> 字段的值，将会影响 &lt;del>&lt;code>~~storage_config~~&lt;/code>&lt;/del> 字段下可以使用的字段。比如 store 为 boltdb-shipper，则 storage_config 中只有 boltdb-shipper 字段可以配置，其他无法配置，配置了就会报错。~~Loki 2.4 版本之后，推荐使用 &lt;code>common.storage&lt;/code> 字段。&lt;/p>
&lt;h3 id="storage_config-objcet">storage_config: &lt;!-- raw HTML omitted -->&lt;/h3>
&lt;blockquote>
&lt;p>Loki 2.4 版本之后，推荐使用 &lt;code>common.storage&lt;/code> 字段。&lt;/p>
&lt;/blockquote>
&lt;p>对 &lt;code>schema_config&lt;/code> 字段配置的扩充。主要用来定义储存 index 和 chunks 类型数据的存储的行为。比如 连接存储的方式、存储储存数据的位置 等等信息。
有多种存储类型可用，该字段中的配置需要根据 &lt;code>schema_config.configs.store&lt;/code> 与 &lt;code>schema_config.configs.object_store&lt;/code> 字段的值来编写。&lt;/p>
&lt;blockquote>
&lt;p>比如，在 schema_config.configs.store 中使用 aws，那么 storage_config 中就可以使用 aws 配置&lt;/p>
&lt;/blockquote>
&lt;h4 id="boltdb-object--boltdb-存储类型的配置">boltdb: &lt;!-- raw HTML omitted --> # boltdb 存储类型的配置。&lt;/h4>
&lt;p>仅当 schema_config.configs.store 为 boltdb 时，才配置该字段&lt;/p>
&lt;ul>
&lt;li>&lt;strong>directory: &lt;!-- raw HTML omitted -->&lt;/strong> # 存放 BoltDB 索引数据的绝对路径&lt;/li>
&lt;/ul>
&lt;h4 id="boltdb_shipper-ojbect--boltdb_shipper-存储类型的配置">boltdb_shipper: &lt;!-- raw HTML omitted --> # boltdb_shipper 存储类型的配置。&lt;/h4>
&lt;p>仅当 schema_config.configs.store 为 boltdb_shipper 时，才配置该字段&lt;/p>
&lt;ul>
&lt;li>&lt;strong>active_index_directory: &lt;!-- raw HTML omitted -->&lt;/strong> #&lt;/li>
&lt;li>&lt;strong>cache_location: &lt;!-- raw HTML omitted -->&lt;/strong> #&lt;/li>
&lt;li>&lt;strong>cache_ttl: &lt;!-- raw HTML omitted -->&lt;/strong> # &lt;code>默认值：24h&lt;/code>&lt;/li>
&lt;li>&lt;strong>shared_store: &lt;!-- raw HTML omitted -->&lt;/strong> # 用于保存 BoltDB 文件的存储。
&lt;ul>
&lt;li>在 2.4 版本之后，若 &lt;code>common.storage&lt;/code> 定义了 s3，且 &lt;code>schema_config.object_storage&lt;/code> 定义为 s3，则这个字段的值也为 s3。也就是说，Index 数据也会存到 S3。这个说法待验证。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="filesystem-object--filesystem-存储类型的配置">filesystem: &lt;!-- raw HTML omitted --> # filesystem 存储类型的配置。&lt;/h4>
&lt;p>仅当 schema_config.configs.object_store 为 filesystem 时，才配置该字段&lt;/p>
&lt;ul>
&lt;li>&lt;strong>directory: &lt;!-- raw HTML omitted -->&lt;/strong> # 存放 chunks 数据的绝对路径&lt;/li>
&lt;/ul>
&lt;h4 id="aws-object--s3-配置">aws: &lt;!-- raw HTML omitted --> # S3 配置&lt;/h4>
&lt;p>仅当 schema_config.configs.object_store 为 aws 时，才配置该字段。该字段配置与通用存储配置中的 &lt;code>[s3](#zJRSQ)&lt;/code> 字段相同&lt;/p>
&lt;ul>
&lt;li>&lt;strong>bucketnames: &lt;!-- raw HTML omitted -->&lt;/strong> #&lt;/li>
&lt;li>&lt;strong>endpoint: localhost:9000&lt;/strong> #&lt;/li>
&lt;li>&lt;strong>access_key_id: minioadmin&lt;/strong> #&lt;/li>
&lt;li>&lt;strong>secret_access_key: minioadmin&lt;/strong> #&lt;/li>
&lt;li>&lt;strong>insecure: true&lt;/strong> #&lt;/li>
&lt;li>&lt;strong>s3forcepathstyle: true&lt;/strong> #&lt;/li>
&lt;/ul>
&lt;h2 id="distributor-组件配置">Distributor 组件配置&lt;/h2>
&lt;h3 id="distributor-object">distributor: &lt;!-- raw HTML omitted -->&lt;/h3>
&lt;p>Loki 的 distributor(分配器) 组件配置。&lt;/p>
&lt;h2 id="ingester-组件配置">Ingester 组件配置&lt;/h2>
&lt;h3 id="ingester_client-object">ingester_client: &lt;!-- raw HTML omitted -->&lt;/h3>
&lt;h3 id="ingester-object">ingester: &lt;!-- raw HTML omitted -->&lt;/h3>
&lt;p>Loki 的 Ingester(摄取器) 配置，以及配置采集器如何将自己注册到键值存储
&lt;strong>lifecycler:&lt;/strong> #&lt;/p>
&lt;ul>
&lt;li>**address: 127.0.0.1 **#&lt;/li>
&lt;li>&lt;strong>ring:&lt;/strong> #
&lt;ul>
&lt;li>&lt;strong>kvstore:&lt;/strong> #
&lt;ul>
&lt;li>&lt;strong>store: &lt;!-- raw HTML omitted -->&lt;/strong> # 用于 ring 的后端存储类型。值为 consul, etcd,inmemory, memberlist&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>replication_factor: 1&lt;/strong> #&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>final_sleep: 0s&lt;/strong> #&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>chunk_idle_period: 5m&lt;/strong> #
&lt;strong>chunk_retain_period: 30s&lt;/strong> #
&lt;strong>max_transfer_retries: 0&lt;/strong> #
&lt;strong>wal: &lt;!-- raw HTML omitted -->&lt;/strong> # Ingester 的 WAL 配置。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>enabled: &lt;!-- raw HTML omitted -->&lt;/strong>&lt;/li>
&lt;li>&lt;strong>dir: &amp;lt;/PATH/TO/DIR&amp;gt;&lt;/strong> # WAL 存放目录。&lt;code>默认值: wal&lt;/code>，即默认数据存储目录下的 /wal 目录。&lt;/li>
&lt;/ul>
&lt;h2 id="querier-组件配置">Querier 组件配置&lt;/h2>
&lt;h3 id="querier-objecthttpsgrafanacomdocslokilatestconfigurationquerier">querier: &amp;lt;&lt;a href="https://grafana.com/docs/loki/latest/configuration/#querier">OBJECT&lt;/a>&amp;gt;&lt;/h3>
&lt;h2 id="query-frontend-组件配置">Query frontend 组件配置&lt;/h2>
&lt;h3 id="frontend-objecthttpsgrafanacomdocslokilatestconfigurationfrontend">frontend: &amp;lt;&lt;a href="https://grafana.com/docs/loki/latest/configuration/#frontend">OBJECT&lt;/a>&amp;gt;&lt;/h3>
&lt;h2 id="ruler-组件配置">Ruler 组件配置&lt;/h2>
&lt;h3 id="ruler-object">ruler: &lt;!-- raw HTML omitted -->&lt;/h3>
&lt;p>Ruler 组件配置。
&lt;strong>storage: &lt;!-- raw HTML omitted -->&lt;/strong> # 根据 type 的值，则会优先默认选择&lt;a href="#SJMUR">通用存储&lt;/a>。可用的值有：azure, gcs, s3, swift, local, bos。若没有通用存储，则使用 storage 字段下对应的字段。&lt;/p>
&lt;ul>
&lt;li>**type: &lt;!-- raw HTML omitted --> **#&lt;/li>
&lt;li>&lt;strong>s3: &lt;!-- raw HTML omitted -->&lt;/strong> # 配置用于存储规则文件的存储信息
&lt;ul>
&lt;li>详见下文通用配置字段 &lt;a href="#J3m3x">s3: &lt;!-- raw HTML omitted -->&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>rule_path: /loki/tmprules&lt;/strong> #
&lt;strong>alertmanager_url: http://localhost&lt;/strong> #
&lt;strong>ring:&lt;/strong> #&lt;/p>
&lt;ul>
&lt;li>&lt;strong>kvstore:&lt;/strong> #
&lt;ul>
&lt;li>&lt;strong>store: inmemory&lt;/strong> #&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="配置示例-1">配置示例&lt;/h3>
&lt;p>将规则文件保存在本地文件系统&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">ruler&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">alertmanager_url&lt;/span>: &lt;span style="color:#ae81ff">http://monitor-hw-cloud-k8s-alertmanager.monitoring.svc.cluster.local.:9093&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">enable_alertmanager_v2&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">external_url&lt;/span>: &lt;span style="color:#ae81ff">https://alertmanager.xx&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ring&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">kvstore&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">store&lt;/span>: &lt;span style="color:#ae81ff">memberlist&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">rule_path&lt;/span>: &lt;span style="color:#ae81ff">/tmp/loki/scratch&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">storage&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">local&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">directory&lt;/span>: &lt;span style="color:#ae81ff">/etc/loki/rules&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">local&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="table-manager-组件配置">Table manager 组件配置&lt;/h2>
&lt;h3 id="table_manager-object">table_manager: &lt;!-- raw HTML omitted -->&lt;/h3>
&lt;p>Table Manager(表管理器) 组件配置，以规定数据保留的行为。该配置环境用途详见《&lt;a href="https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/Loki/Storage(%E5%AD%98%E5%82%A8).md">Loki 存储&lt;/a>》&lt;/p>
&lt;blockquote>
&lt;p>注意：&lt;/p>
&lt;ul>
&lt;li>Table Manager 无法管理存放在对象存储(比如 S3)中的数据，如果要使用对象存储来储存 Index 与 Chunks 数据，则应该自行设置 Bucket 的策略，以删除旧数据。&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>retention_deletes_enabled: &lt;!-- raw HTML omitted -->&lt;/strong> # 是否开启删除保留数据的行为。&lt;code>默认值：false&lt;/code>。
&lt;strong>retention_period: &lt;!-- raw HTML omitted -->&lt;/strong> # 指定要保留多长时间的表。&lt;/p>
&lt;ul>
&lt;li>DURATION 的值必须是 schema_config.configs.index(或 chunks).period 字段值的倍数。&lt;code>默认值：0s&lt;/code>，即保留所有时间的表，不删除&lt;/li>
&lt;li>注意，为了避免查询超出保留期限的数据，&lt;code>chunk_store_config.max_look_back_period&lt;/code> 字段的值必须小于或等于 retention_period 的值&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>creation_grace_period: &lt;!-- raw HTML omitted -->&lt;/strong> # 提前 DURATION 时间创建新表。&lt;code>默认值：10m&lt;/code>&lt;/p>
&lt;h2 id="limits_config-object--配置各个组件处理数据的最大值">limits_config: &lt;!-- raw HTML omitted --> # 配置各个组件处理数据的最大值&lt;/h2>
&lt;p>&lt;strong>ingestrion_rate_mb: &lt;!-- raw HTML omitted -->&lt;/strong> # 每秒可以摄取日志量的大小，单位 MB。&lt;code>默认值：4&lt;/code>
**enforce_metric_name: &lt;!-- raw HTML omitted --> **# 强制每个样本都有一个 metric 名称。&lt;code>默认值：true&lt;/code>&lt;/p>
&lt;ul>
&lt;li>通常设为 false&lt;/li>
&lt;/ul>
&lt;p>**reject_old_samples: &lt;!-- raw HTML omitted --> **# 旧样本是否会被拒绝。&lt;code>默认值：true&lt;/code>
&lt;strong>reject_old_samples_max_age: &lt;!-- raw HTML omitted -->&lt;/strong> # 拒绝前可以接收的最大样本年龄。&lt;code>默认值：168h&lt;/code>&lt;/p>
&lt;ul>
&lt;li>如果拒绝旧样本，那么旧样本不能早于 reject_old_samples_max_age 时间&lt;/li>
&lt;/ul>
&lt;h2 id="其他">其他&lt;/h2>
&lt;h3 id="chunk_store_config-object">chunk_store_config: &lt;!-- raw HTML omitted -->&lt;/h3>
&lt;p>配置 Loki 如何将数据存放在指定存储中。该配置环境用途详见《&lt;a href="https://desistdaydream.github.io/docs/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/Loki/Storage(%E5%AD%98%E5%82%A8).md">Loki 存储&lt;/a>》
&lt;strong>max_look_back_period: &lt;!-- raw HTML omitted -->&lt;/strong> # 限制可以查询多长时间的数据。&lt;code>默认值：0s&lt;/code>，即不做限制。DURATION 必须小于或等于 table_manager.retention_period 字段的值&lt;/p>
&lt;h1 id="lokiyaml-配置文件中的通用字段">loki.yaml 配置文件中的通用字段&lt;/h1>
&lt;p>这里面说明的通用字段会被配置文件中的某些字段共同使用。与 common 字段不同，这里指的字段是需要在配置文件中真实书写的；而 common 中定义的配置类似于默认值。&lt;/p>
&lt;h2 id="后端存储信息">后端存储信息&lt;/h2>
&lt;p>用来定义 如何连接存储、数据在存储中的路径 等等&lt;/p>
&lt;h3 id="s3-objecthttpsgrafanacomdocslokinextconfigurations3_storage_config--s3-存储配置">&lt;a href="https://grafana.com/docs/loki/next/configuration/#s3_storage_config">s3: &lt;!-- raw HTML omitted -->&lt;/a> # S3 存储配置&lt;/h3>
&lt;p>&lt;strong>endpoint: &lt;!-- raw HTML omitted -->&lt;/strong> # 连接 S3 的 endpoint。&lt;code>默认值：空&lt;/code>
&lt;strong>access_key_id: &lt;!-- raw HTML omitted -->&lt;/strong> # 连接 S3 的 AK。&lt;code>默认值：空&lt;/code>
&lt;strong>secret_access_key: &lt;!-- raw HTML omitted -->&lt;/strong> # 连接 S3 的 SK。&lt;code>默认值：空&lt;/code>
&lt;strong>bucketnames: &lt;!-- raw HTML omitted -->&lt;/strong> # 以逗号分割的桶名称列表。&lt;code>默认值：空&lt;/code>。多个桶可以均匀得分布 chunks
&lt;strong>insecure: &lt;!-- raw HTML omitted -->&lt;/strong> # 是否使用不安全的连接去连接 S3，i.e.是否使用 HTTP 连接 S3。&lt;code>默认值：false&lt;/code>
&lt;strong>s3forcepathstyle: &lt;!-- raw HTML omitted -->&lt;/strong> #
&lt;strong>http_config: &lt;!-- raw HTML omitted -->&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>insecure_skip_verify: &lt;!-- raw HTML omitted -->&lt;/strong> # 是否跳过证书验证。&lt;code>默认值：false&lt;/code>&lt;/li>
&lt;/ul>
&lt;h1 id="配置文件示例">配置文件示例&lt;/h1>
&lt;h2 id="loki-启动时的最小配置">loki 启动时的最小配置&lt;/h2>
&lt;h3 id="使用本地文件系统">使用本地文件系统&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">auth_enabled&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">server&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">http_listen_port&lt;/span>: &lt;span style="color:#ae81ff">3100&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">common&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">path_prefix&lt;/span>: &lt;span style="color:#ae81ff">/loki&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">storage&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">filesystem&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">chunks_directory&lt;/span>: &lt;span style="color:#ae81ff">/loki/chunks&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">rules_directory&lt;/span>: &lt;span style="color:#ae81ff">/loki/rules&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">replication_factor&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ring&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">instance_addr&lt;/span>: &lt;span style="color:#ae81ff">127.0.0.1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">kvstore&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">store&lt;/span>: &lt;span style="color:#ae81ff">inmemory&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">schema_config&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">configs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">from&lt;/span>: &lt;span style="color:#e6db74">2020-10-24&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">store&lt;/span>: &lt;span style="color:#ae81ff">boltdb-shipper&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">object_store&lt;/span>: &lt;span style="color:#ae81ff">filesystem&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">schema&lt;/span>: &lt;span style="color:#ae81ff">v11&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">index&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">prefix&lt;/span>: &lt;span style="color:#ae81ff">index_&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">period&lt;/span>: &lt;span style="color:#ae81ff">24h&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">ruler&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">alertmanager_url&lt;/span>: &lt;span style="color:#ae81ff">http://localhost:9093&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="使用-s3">使用 S3&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">auth_enabled&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">server&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">http_listen_port&lt;/span>: &lt;span style="color:#ae81ff">3100&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">common&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">path_prefix&lt;/span>: &lt;span style="color:#ae81ff">/loki&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">storage&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">s3&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">s3forcepathstyle&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">bucketnames&lt;/span>: &lt;span style="color:#ae81ff">loki-lch-test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">endpoint&lt;/span>: &lt;span style="color:#ae81ff">localhost:9000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">access_key_id&lt;/span>: &lt;span style="color:#ae81ff">minioadmin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">secret_access_key&lt;/span>: &lt;span style="color:#ae81ff">minioadmin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">insecure&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">replication_factor&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ring&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">instance_addr&lt;/span>: &lt;span style="color:#ae81ff">127.0.0.1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">kvstore&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">store&lt;/span>: &lt;span style="color:#ae81ff">inmemory&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">schema_config&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">configs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">from&lt;/span>: &lt;span style="color:#e6db74">2020-10-24&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">store&lt;/span>: &lt;span style="color:#ae81ff">boltdb-shipper&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">object_store&lt;/span>: &lt;span style="color:#ae81ff">s3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">schema&lt;/span>: &lt;span style="color:#ae81ff">v11&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">index&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">prefix&lt;/span>: &lt;span style="color:#ae81ff">index_&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">period&lt;/span>: &lt;span style="color:#ae81ff">24h&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">ruler&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">alertmanager_url&lt;/span>: &lt;span style="color:#ae81ff">http://localhost:9093&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="index-与-chunk-都使用-s3">Index 与 Chunk 都使用 S3&lt;/h2>
&lt;p>这里的 S3 使用 Mini&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">schema_config&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">configs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">from&lt;/span>: &lt;span style="color:#e6db74">2020-07-01&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">store&lt;/span>: &lt;span style="color:#ae81ff">boltdb-shipper&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">object_store&lt;/span>: &lt;span style="color:#ae81ff">aws&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">schema&lt;/span>: &lt;span style="color:#ae81ff">v11&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">index&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">prefix&lt;/span>: &lt;span style="color:#ae81ff">index_&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">period&lt;/span>: &lt;span style="color:#ae81ff">24h&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">common&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">storage&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">s3&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">access_key_id&lt;/span>: &lt;span style="color:#ae81ff">minioadmin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">bucketnames&lt;/span>: &lt;span style="color:#ae81ff">chunks&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">endpoint&lt;/span>: &lt;span style="color:#ae81ff">172.19.42.215&lt;/span>:&lt;span style="color:#ae81ff">9000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">insecure&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">s3forcepathstyle&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">secret_access_key&lt;/span>: &lt;span style="color:#ae81ff">minioadmin&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="简单完整配置">简单完整配置&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">auth_enabled&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">chunk_store_config&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">max_look_back_period&lt;/span>: &lt;span style="color:#ae81ff">0s&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">common&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ring&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">kvstore&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">store&lt;/span>: &lt;span style="color:#ae81ff">memberlist&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">storage&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">s3&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">access_key_id&lt;/span>: &lt;span style="color:#ae81ff">minioadmin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">bucketnames&lt;/span>: &lt;span style="color:#ae81ff">chunks&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">endpoint&lt;/span>: &lt;span style="color:#ae81ff">172.19.42.215&lt;/span>:&lt;span style="color:#ae81ff">9000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">insecure&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">s3forcepathstyle&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">secret_access_key&lt;/span>: &lt;span style="color:#ae81ff">minioadmin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">compactor&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">shared_store&lt;/span>: &lt;span style="color:#ae81ff">filesystem&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">distributor&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ring&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">kvstore&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">store&lt;/span>: &lt;span style="color:#ae81ff">memberlist&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">frontend&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">compress_responses&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">log_queries_longer_than&lt;/span>: &lt;span style="color:#ae81ff">5s&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">tail_proxy_url&lt;/span>: &lt;span style="color:#ae81ff">http://loki-loki-distributed-querier:3100&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">frontend_worker&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">frontend_address&lt;/span>: &lt;span style="color:#ae81ff">loki-loki-distributed-query-frontend:9095&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">ingester&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">chunk_block_size&lt;/span>: &lt;span style="color:#ae81ff">262144&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">chunk_encoding&lt;/span>: &lt;span style="color:#ae81ff">snappy&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">chunk_idle_period&lt;/span>: &lt;span style="color:#ae81ff">1h&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">chunk_retain_period&lt;/span>: &lt;span style="color:#ae81ff">1m&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">chunk_target_size&lt;/span>: &lt;span style="color:#ae81ff">1536000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">lifecycler&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ring&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">kvstore&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">store&lt;/span>: &lt;span style="color:#ae81ff">memberlist&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">replication_factor&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">max_chunk_age&lt;/span>: &lt;span style="color:#ae81ff">1h&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">max_transfer_retries&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">wal&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">dir&lt;/span>: &lt;span style="color:#ae81ff">/var/loki/wal&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">limits_config&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">enforce_metric_name&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">max_cache_freshness_per_query&lt;/span>: &lt;span style="color:#ae81ff">10m&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">reject_old_samples&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">reject_old_samples_max_age&lt;/span>: &lt;span style="color:#ae81ff">168h&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">split_queries_by_interval&lt;/span>: &lt;span style="color:#ae81ff">15m&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">memberlist&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">join_members&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">loki-loki-distributed-memberlist&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">query_range&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">align_queries_with_step&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">cache_results&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">max_retries&lt;/span>: &lt;span style="color:#ae81ff">5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">results_cache&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">cache&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">enable_fifocache&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">fifocache&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">max_size_items&lt;/span>: &lt;span style="color:#ae81ff">1024&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">validity&lt;/span>: &lt;span style="color:#ae81ff">24h&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">ruler&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">alertmanager_url&lt;/span>: &lt;span style="color:#ae81ff">https://alertmanager.xx:9093&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">enable_alertmanager_v2&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">external_url&lt;/span>: &lt;span style="color:#ae81ff">https://alertmanager.xx&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ring&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">kvstore&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">store&lt;/span>: &lt;span style="color:#ae81ff">memberlist&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">rule_path&lt;/span>: &lt;span style="color:#ae81ff">/tmp/loki/scratch&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">storage&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">local&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">directory&lt;/span>: &lt;span style="color:#ae81ff">/etc/loki/rules&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">local&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">schema_config&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">configs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">from&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2022-06-21&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">index&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">period&lt;/span>: &lt;span style="color:#ae81ff">24h&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">prefix&lt;/span>: &lt;span style="color:#ae81ff">loki_index_&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">object_store&lt;/span>: &lt;span style="color:#ae81ff">s3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">schema&lt;/span>: &lt;span style="color:#ae81ff">v12&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">store&lt;/span>: &lt;span style="color:#ae81ff">boltdb-shipper&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">server&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">http_listen_port&lt;/span>: &lt;span style="color:#ae81ff">3100&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">storage_config&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">boltdb_shipper&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">active_index_directory&lt;/span>: &lt;span style="color:#ae81ff">/var/loki/index&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">cache_location&lt;/span>: &lt;span style="color:#ae81ff">/var/loki/cache&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">cache_ttl&lt;/span>: &lt;span style="color:#ae81ff">168h&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">shared_store&lt;/span>: &lt;span style="color:#ae81ff">s3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">filesystem&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">directory&lt;/span>: &lt;span style="color:#ae81ff">/var/loki/chunks&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">table_manager&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">retention_deletes_enabled&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">retention_period&lt;/span>: &lt;span style="color:#ae81ff">0s&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Loki 衍生品</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/loki/loki-%E8%A1%8D%E7%94%9F%E5%93%81/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/loki/loki-%E8%A1%8D%E7%94%9F%E5%93%81/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/grafana/loki/tree/main/production">GitHub 项目,production&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/qnt7JUzHLUU6Qs_tv5V0Hw">公众号,Loki 生产环境集群方案&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>很多新入坑 Loki 的小伙伴当看到 distributor、ingester、querier 以及各种依赖的三方存储时，往往都比较懵逼，不知道从哪儿入手。此外再加上官方的文档里面对于集群部署的粗浅描述，更是让新手们大呼部署太难。其实，除了官方的 helm 外，藏在 Loki 仓库的 production 目录里面有一篇生产环境的集群部署模式。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/pwhqog/1621302640599-456c53ed-2d2f-445d-af56-43a28becb54f.webp" alt="">
原文里面，社区采用的是 docker-compose 的方式来快速拉起一套 Loki 集群。虽然我们正式在生产环境中实施时，不会傻到用 docker-compose 部署在一个 node 上（显然这里我们强行不考虑 docker-swarm）。不过里面关于 Loki 的架构和配置文件却值得我们学习。
那么，与纯分布式的 Loki 集群相比，这套方案有什么特别的呢？首先我们先来看看下面这张图：
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/pwhqog/1621302640583-228525ed-be05-4c2c-90ec-329fc40ed955.webp" alt="">
可以看到，最明显的有三大不同点：&lt;/p>
&lt;ol>
&lt;li>loki 核心服务 distributor、ingester、querier 没有分离，而是启动在一个实例当中；&lt;/li>
&lt;li>抛弃了 consul 和 etcd 外部的 kv 存储，而是直接用 memberlist 在内存中维护集群状态；&lt;/li>
&lt;li>使用 boltdb-shipper 替代其他日志索引方案&lt;/li>
&lt;/ol>
&lt;p>这样看起来，Loki 集群的整体架构就比较清晰，且更少的依赖外部系统。简单总结了下，除了用于存储 chunks 和 index 而绕不开的 S3 存储外，还需要一个缓存服务用于加速日志查询和写入。&lt;/p>
&lt;blockquote>
&lt;p>Loki2.0 版本之后，对于使用 boltdb 存储索引部分做了较大的重构，采用新的 boltdb-shipper 模式，可以让 Loki 的索引存储在 S3 上，而彻底摆脱 Cassandra 或者谷歌的 BigTable。此后服务的横向扩展将变得更加容易。关于 bolt-shipper 的更多细节，可以参考：&lt;a href="https://grafana.com/docs/loki/latest/operations/storage/boltdb-shipper/">https://grafana.com/docs/loki/latest/operations/storage/boltdb-shipper/&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>说得这么玄乎，那我们来看看这套方案的配置有哪些不一样呢？&lt;/p>
&lt;h2 id="原生部分">原生部分&lt;/h2>
&lt;h4 id="memberlist">memberlist&lt;/h4>
&lt;pre>&lt;code>memberlist:
join_members: [&amp;quot;loki-1&amp;quot;, &amp;quot;loki-2&amp;quot;, &amp;quot;loki-3&amp;quot;]
dead_node_reclaim_time: 30s
gossip_to_dead_nodes_time: 15s
left_ingesters_timeout: 30s
bind_addr: ['0.0.0.0']
bind_port: 7946
&lt;/code>&lt;/pre>
&lt;p>Loki 的 memberlist 使用的是 gossip 协议来让集群内的所有节点达到最终一致性的。此部分的配置几乎都是协议频率和超时的控制，保持默认的就好&lt;/p>
&lt;h4 id="ingester">ingester&lt;/h4>
&lt;pre>&lt;code>ingester:
lifecycler:
join_after: 60s
observe_period: 5s
ring:
replication_factor: 2
kvstore:
store: memberlist
final_sleep: 0s
&lt;/code>&lt;/pre>
&lt;p>ingester 的状态通过 gossip 协议同步到集群的所有 member 当中，同时让 ingester 的复制因子为 2。即一个日志流同时写入到两个 ingster 服务当中以保证数据的冗余。&lt;/p>
&lt;h2 id="扩展部分">扩展部分&lt;/h2>
&lt;p>社区的集群模式配置原生部分仍然显得不太够意思，除了 memberlist 的配置稍显诚意外，其它部分仍然不够我们对生产环境的要求。这里小白简单改造了一下，分享给大家。&lt;/p>
&lt;h4 id="storage">storage&lt;/h4>
&lt;p>将 index 和 chunks 的存储统一让 S3 对象存储纳管，让 Loki 彻底摆脱三方依赖。&lt;/p>
&lt;pre>&lt;code>schema_config:
configs:
- from: 2021-04-25
store: boltdb-shipper
object_store: aws
schema: v11
index:
prefix: index_
period: 24h
storage_config:
boltdb_shipper:
shared_store: aws
active_index_directory: /loki/index
cache_location: /loki/boltdb-cache
aws:
s3: s3://&amp;lt;S3_ACCESS_KEY&amp;gt;:&amp;lt;S3_SECRET_KEY&amp;gt;@&amp;lt;S3_URL&amp;gt;/&amp;lt;S3__BUCKET&amp;gt;
s3forcepathstyle: true
insecure: true
&lt;/code>&lt;/pre>
&lt;p>这里值得说明的就是用于存储日志流索引的是 bolt_shipper，它是可以通过共享存储方式写到 s3 当中的。那么&lt;code>active_index_directory&lt;/code>就是 S3 上的 Bucket 路径，&lt;code>cache_location&lt;/code>则为 Loki 本地 bolt 索引的缓存数据。&lt;/p>
&lt;blockquote>
&lt;p>事实上 ingester 上传到 s3 的 index 路径为&lt;code>&amp;lt;S3__BUCKET&amp;gt;/index/&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;h4 id="redis">redis&lt;/h4>
&lt;p>原生的方案里并不提供缓存，这里我们引入 redis 来做查询和写入的缓存。对于很多小伙伴纠结的是一个 redis 共用还是多个 redis 单独使用，这个看你集群规模，不大的情况下，一个 redis 实例足以满足需求。&lt;/p>
&lt;pre>&lt;code>query_range:
results_cache:
cache:
redis:
endpoint: redis:6379
expiration: 1h
cache_results: true
index_queries_cache_config:
redis:
endpoint: redis:6379
expiration: 1h
chunk_store_config:
chunk_cache_config:
redis:
endpoint: redis:6379
expiration: 1h
write_dedupe_cache_config:
redis:
endpoint: redis:6379
expiration: 1h
&lt;/code>&lt;/pre>
&lt;h4 id="ruler">ruler&lt;/h4>
&lt;p>既然 Loki 以及做了集群化部署，当然 ruler 这个服务也得跟在切分。难以接受的是，社区这部分的配置竟然是缺失的。所以我们得自己补充完整。我们知道日志的 ruler 可以写在 S3 对象存储上，同时每个 ruler 实例也是通过一致性哈希环来分配自己的 rules。所以这部分配置，我们可以如下参考：&lt;/p>
&lt;pre>&lt;code>ruler:
storage:
type: s3
s3:
s3: s3://&amp;lt;S3_ACCESS_KEY&amp;gt;:&amp;lt;S3_SECRET_KEY&amp;gt;@&amp;lt;S3_URL&amp;gt;/&amp;lt;S3_RULES_BUCKET&amp;gt;
s3forcepathstyle: true
insecure: true
http_config:
insecure_skip_verify: true
enable_api: true
enable_alertmanager_v2: true
alertmanager_url: &amp;quot;http://&amp;lt;alertmanager&amp;gt;&amp;quot;
ring:
kvstore:
store: memberlist
&lt;/code>&lt;/pre>
&lt;h4 id="支持-kubernetes">支持 kubernetes&lt;/h4>
&lt;p>最后，最最最重要的是要让官方的 Loki 集群方案支持在 Kubernetes 中部署，否则一切都是瞎扯。由于篇幅的限制，我将 manifest 提交到 github 上，大家直接 clone 到本地部署。
GitHub 地址：&lt;a href="https://github.com/CloudXiaobai/loki-cluster-deploy/tree/master/production/loki-system">https://github.com/CloudXiaobai/loki-cluster-deploy/tree/master/production/loki-system&lt;/a>
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/pwhqog/1621302640377-bc3f0b0d-6c1a-4d28-a2a3-9aa99aa34e4e.gif" alt="image.gif">
这个 manifest 只依赖一个 S3 对象存储，所以你在部署到生产环境时，请务必预先准备好对象存储的 AccessKey 和 SecretKey。将他们配置到 installation.sh 当中后，直接执行脚本就可以开始安装了。&lt;/p>
&lt;blockquote>
&lt;p>文件中的 ServiceMonitor 是为 Loki 做的 Prometheus Operator 的 Metrics 服务发现，你可以自己选择是否部署&lt;/p>
&lt;/blockquote>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>本文介绍了官方提供的一种 Loki 生产环境下的集群部署方案，并在此基础上加入了一些诸如缓存、S3 对象存储的扩展配置，并将官方的 docker-compose 部署方式适配到 Kubernetes 当中。官方提供的方案有效的精简了 Loki 分布式部署下复杂的结构，值得我们学习。&lt;/p>
&lt;p>&lt;strong>&lt;em>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/pwhqog/1621302640324-6122ec11-5c55-4805-b893-9b816cdaa09f.gif" alt="image.gif">&lt;/em>&lt;/strong>&lt;/p></description></item><item><title>Docs: Loki 源码分析之日志写入</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/loki/loki-%E5%BC%80%E5%8F%91/loki-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8B%E6%97%A5%E5%BF%97%E5%86%99%E5%85%A5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/loki/loki-%E5%BC%80%E5%8F%91/loki-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8B%E6%97%A5%E5%BF%97%E5%86%99%E5%85%A5/</guid><description>
&lt;p>原文链接：&lt;a href="https://mp.weixin.qq.com/s/9BKZvNANqGJwziygytJ1ag">https://mp.weixin.qq.com/s/9BKZvNANqGJwziygytJ1ag&lt;/a>
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/izup6m/1623123660971-d433fab4-3976-4037-bfd7-8b7b352557c7.webp" alt="">前面我们介绍了 Loki 的一些基本使用配置，但是对 Loki 还是了解不够深入，官方文档写得较为凌乱，而且没有跟上新版本，为了能够对 Loki 有一个更深入的认识，做到有的放矢，这里面我们尝试对 Loki 的源码进行一些简单的分析，由于有很多模块和实现细节，这里我们主要是对核心功能进行分析，希望对大家有所帮助。本文首先对日志的写入过程进行简单分析。&lt;/p>
&lt;h2 id="distributor-push-api">Distributor Push API&lt;/h2>
&lt;p>Promtail 通过 Loki 的 Push API 接口推送日志数据，该接口在初始化 &lt;code>Distributor&lt;/code> 的时候进行初始化，在控制器基础上包装了两个中间件，其中的 &lt;code>HTTPAuthMiddleware&lt;/code> 就是获取租户 ID，如果开启了认证配置，则从 &lt;code>X-Scope-OrgID&lt;/code> 这个请求 Header 头里面获取，如果没有配置则用默认的 &lt;code>fake&lt;/code> 代替。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// pkg/loki/modules.go
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Loki&lt;/span>) &lt;span style="color:#a6e22e">initDistributor&lt;/span>() (&lt;span style="color:#a6e22e">services&lt;/span>.&lt;span style="color:#a6e22e">Service&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">......&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">cfg&lt;/span>.&lt;span style="color:#a6e22e">Target&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#a6e22e">All&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">logproto&lt;/span>.&lt;span style="color:#a6e22e">RegisterPusherServer&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Server&lt;/span>.&lt;span style="color:#a6e22e">GRPC&lt;/span>, &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">distributor&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">pushHandler&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">middleware&lt;/span>.&lt;span style="color:#a6e22e">Merge&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">serverutil&lt;/span>.&lt;span style="color:#a6e22e">RecoveryHTTPMiddleware&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">HTTPAuthMiddleware&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ).&lt;span style="color:#a6e22e">Wrap&lt;/span>(&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">HandlerFunc&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">distributor&lt;/span>.&lt;span style="color:#a6e22e">PushHandler&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Server&lt;/span>.&lt;span style="color:#a6e22e">HTTP&lt;/span>.&lt;span style="color:#a6e22e">Handle&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/api/prom/push&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">pushHandler&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Server&lt;/span>.&lt;span style="color:#a6e22e">HTTP&lt;/span>.&lt;span style="color:#a6e22e">Handle&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/loki/api/v1/push&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">pushHandler&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">distributor&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Push API 处理器实现如下所示，首先通过 &lt;code>ParseRequest&lt;/code> 函数将 Http 请求转换成 &lt;code>logproto.PushRequest&lt;/code>，然后直接调用 Distributor 下面的 &lt;code>Push&lt;/code> 函数来推送日志数据：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// pkg/distributor/http.go
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// PushHandler 从 HTTP body 中读取一个 snappy 压缩的 proto
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">d&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Distributor&lt;/span>) &lt;span style="color:#a6e22e">PushHandler&lt;/span>(&lt;span style="color:#a6e22e">w&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">ResponseWriter&lt;/span>, &lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Request&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">logger&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">util_log&lt;/span>.&lt;span style="color:#a6e22e">WithContext&lt;/span>(&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>(), &lt;span style="color:#a6e22e">util_log&lt;/span>.&lt;span style="color:#a6e22e">Logger&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">userID&lt;/span>, &lt;span style="color:#a6e22e">_&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">user&lt;/span>.&lt;span style="color:#a6e22e">ExtractOrgID&lt;/span>(&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">req&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">ParseRequest&lt;/span>(&lt;span style="color:#a6e22e">logger&lt;/span>, &lt;span style="color:#a6e22e">userID&lt;/span>, &lt;span style="color:#a6e22e">r&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">......&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">d&lt;/span>.&lt;span style="color:#a6e22e">Push&lt;/span>(&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>(), &lt;span style="color:#a6e22e">req&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">......&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">ParseRequest&lt;/span>(&lt;span style="color:#a6e22e">logger&lt;/span> &lt;span style="color:#a6e22e">gokit&lt;/span>.&lt;span style="color:#a6e22e">Logger&lt;/span>, &lt;span style="color:#a6e22e">userID&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Request&lt;/span>) (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">logproto&lt;/span>.&lt;span style="color:#a6e22e">PushRequest&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">body&lt;/span> &lt;span style="color:#a6e22e">lokiutil&lt;/span>.&lt;span style="color:#a6e22e">SizeReader&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">contentEncoding&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">Header&lt;/span>.&lt;span style="color:#a6e22e">Get&lt;/span>(&lt;span style="color:#a6e22e">contentEnc&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">switch&lt;/span> &lt;span style="color:#a6e22e">contentEncoding&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">body&lt;/span> = &lt;span style="color:#a6e22e">lokiutil&lt;/span>.&lt;span style="color:#a6e22e">NewSizeReader&lt;/span>(&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">Body&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#34;snappy&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">body&lt;/span> = &lt;span style="color:#a6e22e">lokiutil&lt;/span>.&lt;span style="color:#a6e22e">NewSizeReader&lt;/span>(&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">Body&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#34;gzip&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">gzipReader&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">gzip&lt;/span>.&lt;span style="color:#a6e22e">NewReader&lt;/span>(&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">Body&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">gzipReader&lt;/span>.&lt;span style="color:#a6e22e">Close&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">body&lt;/span> = &lt;span style="color:#a6e22e">lokiutil&lt;/span>.&lt;span style="color:#a6e22e">NewSizeReader&lt;/span>(&lt;span style="color:#a6e22e">gzipReader&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">default&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Content-Encoding %q not supported&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">contentEncoding&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">contentType&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">Header&lt;/span>.&lt;span style="color:#a6e22e">Get&lt;/span>(&lt;span style="color:#a6e22e">contentType&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">req&lt;/span> &lt;span style="color:#a6e22e">logproto&lt;/span>.&lt;span style="color:#a6e22e">PushRequest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">......&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">switch&lt;/span> &lt;span style="color:#a6e22e">contentType&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">applicationJSON&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">loghttp&lt;/span>.&lt;span style="color:#a6e22e">GetVersion&lt;/span>(&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">RequestURI&lt;/span>) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">loghttp&lt;/span>.&lt;span style="color:#a6e22e">VersionV1&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">unmarshal&lt;/span>.&lt;span style="color:#a6e22e">DecodePushRequest&lt;/span>(&lt;span style="color:#a6e22e">body&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">req&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">unmarshal_legacy&lt;/span>.&lt;span style="color:#a6e22e">DecodePushRequest&lt;/span>(&lt;span style="color:#a6e22e">body&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">req&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">default&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// When no content-type header is set or when it is set to
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// `application/x-protobuf`: expect snappy compression.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">util&lt;/span>.&lt;span style="color:#a6e22e">ParseProtoReader&lt;/span>(&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>(), &lt;span style="color:#a6e22e">body&lt;/span>, int(&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">ContentLength&lt;/span>), &lt;span style="color:#a6e22e">math&lt;/span>.&lt;span style="color:#a6e22e">MaxInt32&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">req&lt;/span>, &lt;span style="color:#a6e22e">util&lt;/span>.&lt;span style="color:#a6e22e">RawSnappy&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">req&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>首先我们先了解下 &lt;code>PushRequest&lt;/code> 的结构，&lt;code>PushRequest&lt;/code> 就是一个 Stream 集合：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// pkg/logproto/logproto.pb.go
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">PushRequest&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Streams&lt;/span> []&lt;span style="color:#a6e22e">Stream&lt;/span> &lt;span style="color:#e6db74">`protobuf:&amp;#34;bytes,1,rep,name=streams,proto3,customtype=Stream&amp;#34; json:&amp;#34;streams&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// pkg/logproto/types.go
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Stream 流包含一个唯一的标签集，作为一个字符串，然后还包含一组日志条目
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Stream&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Labels&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#e6db74">`protobuf:&amp;#34;bytes,1,opt,name=labels,proto3&amp;#34; json:&amp;#34;labels&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Entries&lt;/span> []&lt;span style="color:#a6e22e">Entry&lt;/span> &lt;span style="color:#e6db74">`protobuf:&amp;#34;bytes,2,rep,name=entries,proto3,customtype=EntryAdapter&amp;#34; json:&amp;#34;entries&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Entry 是一个带有时间戳的日志条目
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Entry&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Timestamp&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Time&lt;/span> &lt;span style="color:#e6db74">`protobuf:&amp;#34;bytes,1,opt,name=timestamp,proto3,stdtime&amp;#34; json:&amp;#34;ts&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Line&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#e6db74">`protobuf:&amp;#34;bytes,2,opt,name=line,proto3&amp;#34; json:&amp;#34;line&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/izup6m/1623123848108-3b163096-243e-4dfa-80d7-362897dd111e.webp" alt="image.gif">
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/izup6m/1623123863717-2efd2f66-d6aa-4101-b7f4-cae02a8d65cb.webp" alt="">
然后查看 Distributor 下的 Push 函数实现：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// pkg/distributor/distributor.go
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Push 日志流集合
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">d&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Distributor&lt;/span>) &lt;span style="color:#a6e22e">Push&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>, &lt;span style="color:#a6e22e">req&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">logproto&lt;/span>.&lt;span style="color:#a6e22e">PushRequest&lt;/span>) (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">logproto&lt;/span>.&lt;span style="color:#a6e22e">PushResponse&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 获取租户ID
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">userID&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">user&lt;/span>.&lt;span style="color:#a6e22e">ExtractOrgID&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">......&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 首先把请求平铺成一个样本的列表
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">streams&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make([]&lt;span style="color:#a6e22e">streamTracker&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, len(&lt;span style="color:#a6e22e">req&lt;/span>.&lt;span style="color:#a6e22e">Streams&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">keys&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make([]&lt;span style="color:#66d9ef">uint32&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, len(&lt;span style="color:#a6e22e">req&lt;/span>.&lt;span style="color:#a6e22e">Streams&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">validationErr&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">validatedSamplesSize&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">validatedSamplesCount&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">validationContext&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">d&lt;/span>.&lt;span style="color:#a6e22e">validator&lt;/span>.&lt;span style="color:#a6e22e">getValidationContextFor&lt;/span>(&lt;span style="color:#a6e22e">userID&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">stream&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">req&lt;/span>.&lt;span style="color:#a6e22e">Streams&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 解析日志流标签
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">stream&lt;/span>.&lt;span style="color:#a6e22e">Labels&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">d&lt;/span>.&lt;span style="color:#a6e22e">parseStreamLabels&lt;/span>(&lt;span style="color:#a6e22e">validationContext&lt;/span>, &lt;span style="color:#a6e22e">stream&lt;/span>.&lt;span style="color:#a6e22e">Labels&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">stream&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">......&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">entry&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">stream&lt;/span>.&lt;span style="color:#a6e22e">Entries&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 校验一个日志Entry实体
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">d&lt;/span>.&lt;span style="color:#a6e22e">validator&lt;/span>.&lt;span style="color:#a6e22e">ValidateEntry&lt;/span>(&lt;span style="color:#a6e22e">validationContext&lt;/span>, &lt;span style="color:#a6e22e">stream&lt;/span>.&lt;span style="color:#a6e22e">Labels&lt;/span>, &lt;span style="color:#a6e22e">entry&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">validationErr&lt;/span> = &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">stream&lt;/span>.&lt;span style="color:#a6e22e">Entries&lt;/span>[&lt;span style="color:#a6e22e">n&lt;/span>] = &lt;span style="color:#a6e22e">entry&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">n&lt;/span>&lt;span style="color:#f92672">++&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 校验成功的样本大小和个数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">validatedSamplesSize&lt;/span> &lt;span style="color:#f92672">+=&lt;/span> len(&lt;span style="color:#a6e22e">entry&lt;/span>.&lt;span style="color:#a6e22e">Line&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">validatedSamplesCount&lt;/span>&lt;span style="color:#f92672">++&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 去掉校验失败的实体
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">stream&lt;/span>.&lt;span style="color:#a6e22e">Entries&lt;/span> = &lt;span style="color:#a6e22e">stream&lt;/span>.&lt;span style="color:#a6e22e">Entries&lt;/span>[:&lt;span style="color:#a6e22e">n&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> len(&lt;span style="color:#a6e22e">stream&lt;/span>.&lt;span style="color:#a6e22e">Entries&lt;/span>) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 为当前日志流生成用于hash换的token值
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">keys&lt;/span> = append(&lt;span style="color:#a6e22e">keys&lt;/span>, &lt;span style="color:#a6e22e">util&lt;/span>.&lt;span style="color:#a6e22e">TokenFor&lt;/span>(&lt;span style="color:#a6e22e">userID&lt;/span>, &lt;span style="color:#a6e22e">stream&lt;/span>.&lt;span style="color:#a6e22e">Labels&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">streams&lt;/span> = append(&lt;span style="color:#a6e22e">streams&lt;/span>, &lt;span style="color:#a6e22e">streamTracker&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">stream&lt;/span>: &lt;span style="color:#a6e22e">stream&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> len(&lt;span style="color:#a6e22e">streams&lt;/span>) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">logproto&lt;/span>.&lt;span style="color:#a6e22e">PushResponse&lt;/span>{}, &lt;span style="color:#a6e22e">validationErr&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">now&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Now&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 每个租户有一个限速器，判断可以正常传输的日志大小是否应该被限制
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">d&lt;/span>.&lt;span style="color:#a6e22e">ingestionRateLimiter&lt;/span>.&lt;span style="color:#a6e22e">AllowN&lt;/span>(&lt;span style="color:#a6e22e">now&lt;/span>, &lt;span style="color:#a6e22e">userID&lt;/span>, &lt;span style="color:#a6e22e">validatedSamplesSize&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 返回429表明客户端被限速了
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">......&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">httpgrpc&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">StatusTooManyRequests&lt;/span>, &lt;span style="color:#a6e22e">validation&lt;/span>.&lt;span style="color:#a6e22e">RateLimitedErrorMsg&lt;/span>, int(&lt;span style="color:#a6e22e">d&lt;/span>.&lt;span style="color:#a6e22e">ingestionRateLimiter&lt;/span>.&lt;span style="color:#a6e22e">Limit&lt;/span>(&lt;span style="color:#a6e22e">now&lt;/span>, &lt;span style="color:#a6e22e">userID&lt;/span>)), &lt;span style="color:#a6e22e">validatedSamplesCount&lt;/span>, &lt;span style="color:#a6e22e">validatedSamplesSize&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">maxExpectedReplicationSet&lt;/span> = &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#75715e">// typical replication factor 3 plus one for inactive plus one for luck
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">descs&lt;/span> [&lt;span style="color:#a6e22e">maxExpectedReplicationSet&lt;/span>]&lt;span style="color:#a6e22e">ring&lt;/span>.&lt;span style="color:#a6e22e">InstanceDesc&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">samplesByIngester&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>][]&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">streamTracker&lt;/span>{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ingesterDescs&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#a6e22e">ring&lt;/span>.&lt;span style="color:#a6e22e">InstanceDesc&lt;/span>{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span>, &lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">keys&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ReplicationSet 描述了一个指定的键与哪些 Ingesters 进行对话，以及可以容忍多少个错误
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 根据 label hash 到 hash 环上获取对应的 ingester 节点，一个节点可能有多个对等的 ingester 副本来做 HA
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">replicationSet&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">d&lt;/span>.&lt;span style="color:#a6e22e">ingestersRing&lt;/span>.&lt;span style="color:#a6e22e">Get&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span>, &lt;span style="color:#a6e22e">ring&lt;/span>.&lt;span style="color:#a6e22e">Write&lt;/span>, &lt;span style="color:#a6e22e">descs&lt;/span>[:&lt;span style="color:#ae81ff">0&lt;/span>], &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">......&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 最小成功的实例树
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">streams&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>].&lt;span style="color:#a6e22e">minSuccess&lt;/span> = len(&lt;span style="color:#a6e22e">replicationSet&lt;/span>.&lt;span style="color:#a6e22e">Ingesters&lt;/span>) &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#a6e22e">replicationSet&lt;/span>.&lt;span style="color:#a6e22e">MaxErrors&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 可容忍的最大故障实例数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">streams&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>].&lt;span style="color:#a6e22e">maxFailures&lt;/span> = &lt;span style="color:#a6e22e">replicationSet&lt;/span>.&lt;span style="color:#a6e22e">MaxErrors&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 将 Stream 按对应的 ingester 进行分组
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">ingester&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">replicationSet&lt;/span>.&lt;span style="color:#a6e22e">Ingesters&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 配置每个 ingester 副本对应的日志流数据
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">samplesByIngester&lt;/span>[&lt;span style="color:#a6e22e">ingester&lt;/span>.&lt;span style="color:#a6e22e">Addr&lt;/span>] = append(&lt;span style="color:#a6e22e">samplesByIngester&lt;/span>[&lt;span style="color:#a6e22e">ingester&lt;/span>.&lt;span style="color:#a6e22e">Addr&lt;/span>], &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">streams&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ingesterDescs&lt;/span>[&lt;span style="color:#a6e22e">ingester&lt;/span>.&lt;span style="color:#a6e22e">Addr&lt;/span>] = &lt;span style="color:#a6e22e">ingester&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">tracker&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">pushTracker&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">done&lt;/span>: make(&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span>{}),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">err&lt;/span>: make(&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">tracker&lt;/span>.&lt;span style="color:#a6e22e">samplesPending&lt;/span>.&lt;span style="color:#a6e22e">Store&lt;/span>(int32(len(&lt;span style="color:#a6e22e">streams&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 循环Ingesters
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">ingester&lt;/span>, &lt;span style="color:#a6e22e">samples&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">samplesByIngester&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 让ingester并行处理通过hash环对应的日志流列表
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">ingester&lt;/span> &lt;span style="color:#a6e22e">ring&lt;/span>.&lt;span style="color:#a6e22e">InstanceDesc&lt;/span>, &lt;span style="color:#a6e22e">samples&lt;/span> []&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">streamTracker&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">......&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 将日志流样本数据下发给对应的 ingester 节点
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">d&lt;/span>.&lt;span style="color:#a6e22e">sendSamples&lt;/span>(&lt;span style="color:#a6e22e">localCtx&lt;/span>, &lt;span style="color:#a6e22e">ingester&lt;/span>, &lt;span style="color:#a6e22e">samples&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">tracker&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }(&lt;span style="color:#a6e22e">ingesterDescs&lt;/span>[&lt;span style="color:#a6e22e">ingester&lt;/span>], &lt;span style="color:#a6e22e">samples&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">......&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>Push&lt;/code> 函数的核心就是根据日志流的标签来计算一个 Token 值，根据这个 Token 值去哈希环上获取对应的处理日志的 Ingester 实例，然后并行通过 Ingester 处理日志流数据，通过 &lt;code>sendSamples&lt;/code> 函数为单个 ingester 去发送日志样本数据：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// pkg/distributor/distributor.go
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">d&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Distributor&lt;/span>) &lt;span style="color:#a6e22e">sendSamples&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>, &lt;span style="color:#a6e22e">ingester&lt;/span> &lt;span style="color:#a6e22e">ring&lt;/span>.&lt;span style="color:#a6e22e">InstanceDesc&lt;/span>, &lt;span style="color:#a6e22e">streamTrackers&lt;/span> []&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">streamTracker&lt;/span>, &lt;span style="color:#a6e22e">pushTracker&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">pushTracker&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">d&lt;/span>.&lt;span style="color:#a6e22e">sendSamplesErr&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">ingester&lt;/span>, &lt;span style="color:#a6e22e">streamTrackers&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">......&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">d&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Distributor&lt;/span>) &lt;span style="color:#a6e22e">sendSamplesErr&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>, &lt;span style="color:#a6e22e">ingester&lt;/span> &lt;span style="color:#a6e22e">ring&lt;/span>.&lt;span style="color:#a6e22e">InstanceDesc&lt;/span>, &lt;span style="color:#a6e22e">streams&lt;/span> []&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">streamTracker&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 根据 ingester 地址获取 client
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">d&lt;/span>.&lt;span style="color:#a6e22e">pool&lt;/span>.&lt;span style="color:#a6e22e">GetClientFor&lt;/span>(&lt;span style="color:#a6e22e">ingester&lt;/span>.&lt;span style="color:#a6e22e">Addr&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">......&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 重新构造 PushRequest
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">req&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">logproto&lt;/span>.&lt;span style="color:#a6e22e">PushRequest&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Streams&lt;/span>: make([]&lt;span style="color:#a6e22e">logproto&lt;/span>.&lt;span style="color:#a6e22e">Stream&lt;/span>, len(&lt;span style="color:#a6e22e">streams&lt;/span>)),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span>, &lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">streams&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">req&lt;/span>.&lt;span style="color:#a6e22e">Streams&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>] = &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">stream&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 通过 Ingester 客户端请求数据
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">c&lt;/span>.(&lt;span style="color:#a6e22e">logproto&lt;/span>.&lt;span style="color:#a6e22e">PusherClient&lt;/span>).&lt;span style="color:#a6e22e">Push&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">req&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">......&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="ingester-写入日志">Ingester 写入日志&lt;/h2>
&lt;p>Ingester 客户端中的 Push 函数实际上就是一个 gRPC 服务的客户端：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// pkg/ingester/ingester.go
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Push 实现 logproto.Pusher.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Ingester&lt;/span>) &lt;span style="color:#a6e22e">Push&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>, &lt;span style="color:#a6e22e">req&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">logproto&lt;/span>.&lt;span style="color:#a6e22e">PushRequest&lt;/span>) (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">logproto&lt;/span>.&lt;span style="color:#a6e22e">PushResponse&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 获取租户ID
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">instanceID&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">user&lt;/span>.&lt;span style="color:#a6e22e">ExtractOrgID&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">......&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 根据租户ID获取 instance 对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">instance&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span>.&lt;span style="color:#a6e22e">getOrCreateInstance&lt;/span>(&lt;span style="color:#a6e22e">instanceID&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 直接调用 instance 对象 Push 数据
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">instance&lt;/span>.&lt;span style="color:#a6e22e">Push&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">req&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">logproto&lt;/span>.&lt;span style="color:#a6e22e">PushResponse&lt;/span>{}, &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>instance 下的 Push 函数：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// pkg/ingester/instance.go
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">instance&lt;/span>) &lt;span style="color:#a6e22e">Push&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>, &lt;span style="color:#a6e22e">req&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">logproto&lt;/span>.&lt;span style="color:#a6e22e">PushRequest&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">record&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">recordPool&lt;/span>.&lt;span style="color:#a6e22e">GetRecord&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">record&lt;/span>.&lt;span style="color:#a6e22e">UserID&lt;/span> = &lt;span style="color:#a6e22e">i&lt;/span>.&lt;span style="color:#a6e22e">instanceID&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">recordPool&lt;/span>.&lt;span style="color:#a6e22e">PutRecord&lt;/span>(&lt;span style="color:#a6e22e">record&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">i&lt;/span>.&lt;span style="color:#a6e22e">streamsMtx&lt;/span>.&lt;span style="color:#a6e22e">Lock&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span>.&lt;span style="color:#a6e22e">streamsMtx&lt;/span>.&lt;span style="color:#a6e22e">Unlock&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">appendErr&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">req&lt;/span>.&lt;span style="color:#a6e22e">Streams&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 获取一个 stream 对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">stream&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span>.&lt;span style="color:#a6e22e">getOrCreateStream&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>, &lt;span style="color:#66d9ef">false&lt;/span>, &lt;span style="color:#a6e22e">record&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">appendErr&lt;/span> = &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 真正用于数据处理的是 stream 对象中的 Push 函数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">stream&lt;/span>.&lt;span style="color:#a6e22e">Push&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">Entries&lt;/span>, &lt;span style="color:#a6e22e">record&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">appendErr&lt;/span> = &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">......&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">appendErr&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">instance&lt;/span>) &lt;span style="color:#a6e22e">getOrCreateStream&lt;/span>(&lt;span style="color:#a6e22e">pushReqStream&lt;/span> &lt;span style="color:#a6e22e">logproto&lt;/span>.&lt;span style="color:#a6e22e">Stream&lt;/span>, &lt;span style="color:#a6e22e">lock&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>, &lt;span style="color:#a6e22e">record&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">WALRecord&lt;/span>) (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">stream&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">lock&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">i&lt;/span>.&lt;span style="color:#a6e22e">streamsMtx&lt;/span>.&lt;span style="color:#a6e22e">Lock&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span>.&lt;span style="color:#a6e22e">streamsMtx&lt;/span>.&lt;span style="color:#a6e22e">Unlock&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 如果 streams 中包含当前标签列表对应的 stream 对象，则直接返回
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">stream&lt;/span>, &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span>.&lt;span style="color:#a6e22e">streams&lt;/span>[&lt;span style="color:#a6e22e">pushReqStream&lt;/span>.&lt;span style="color:#a6e22e">Labels&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">ok&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">stream&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// record 只在重放 WAL 时为 nil
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 我们不希望在重放 WAL 后丢掉数据
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 为 instance 降低 stream 流限制
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">record&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 限流器判断
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// AssertMaxStreamsPerUser 确保与当前输入的流数量没有达到限制
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">i&lt;/span>.&lt;span style="color:#a6e22e">limiter&lt;/span>.&lt;span style="color:#a6e22e">AssertMaxStreamsPerUser&lt;/span>(&lt;span style="color:#a6e22e">i&lt;/span>.&lt;span style="color:#a6e22e">instanceID&lt;/span>, len(&lt;span style="color:#a6e22e">i&lt;/span>.&lt;span style="color:#a6e22e">streams&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">......&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 解析日志流标签集
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">labels&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">logql&lt;/span>.&lt;span style="color:#a6e22e">ParseLabels&lt;/span>(&lt;span style="color:#a6e22e">pushReqStream&lt;/span>.&lt;span style="color:#a6e22e">Labels&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">......&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 获取对应标签集的指纹
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">fp&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span>.&lt;span style="color:#a6e22e">getHashForLabels&lt;/span>(&lt;span style="color:#a6e22e">labels&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 重新实例化一个 stream 对象，这里还会维护日志流的倒排索引
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">sortedLabels&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span>.&lt;span style="color:#a6e22e">index&lt;/span>.&lt;span style="color:#a6e22e">Add&lt;/span>(&lt;span style="color:#a6e22e">client&lt;/span>.&lt;span style="color:#a6e22e">FromLabelsToLabelAdapters&lt;/span>(&lt;span style="color:#a6e22e">labels&lt;/span>), &lt;span style="color:#a6e22e">fp&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">stream&lt;/span> = &lt;span style="color:#a6e22e">newStream&lt;/span>(&lt;span style="color:#a6e22e">i&lt;/span>.&lt;span style="color:#a6e22e">cfg&lt;/span>, &lt;span style="color:#a6e22e">fp&lt;/span>, &lt;span style="color:#a6e22e">sortedLabels&lt;/span>, &lt;span style="color:#a6e22e">i&lt;/span>.&lt;span style="color:#a6e22e">metrics&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 将stream设置到streams中去
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span>.&lt;span style="color:#a6e22e">streams&lt;/span>[&lt;span style="color:#a6e22e">pushReqStream&lt;/span>.&lt;span style="color:#a6e22e">Labels&lt;/span>] = &lt;span style="color:#a6e22e">stream&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">i&lt;/span>.&lt;span style="color:#a6e22e">streamsByFP&lt;/span>[&lt;span style="color:#a6e22e">fp&lt;/span>] = &lt;span style="color:#a6e22e">stream&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 当重放 wal 的时候 record 是 nil (我们不希望在重放时重写 wal entries).
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">record&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">record&lt;/span>.&lt;span style="color:#a6e22e">Series&lt;/span> = append(&lt;span style="color:#a6e22e">record&lt;/span>.&lt;span style="color:#a6e22e">Series&lt;/span>, &lt;span style="color:#a6e22e">tsdb_record&lt;/span>.&lt;span style="color:#a6e22e">RefSeries&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Ref&lt;/span>: uint64(&lt;span style="color:#a6e22e">fp&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Labels&lt;/span>: &lt;span style="color:#a6e22e">sortedLabels&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 如果 record 为 nil，这就是一个 WAL 恢复
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span>.&lt;span style="color:#a6e22e">metrics&lt;/span>.&lt;span style="color:#a6e22e">recoveredStreamsTotal&lt;/span>.&lt;span style="color:#a6e22e">Inc&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">......&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">i&lt;/span>.&lt;span style="color:#a6e22e">addTailersToNewStream&lt;/span>(&lt;span style="color:#a6e22e">stream&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">stream&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个里面涉及到 WAL 这一块的设计，比较复杂，我们可以先看 stream 下面的 Push 函数实现，主要就是将收到的 &lt;code>[]Entry&lt;/code> 先 Append 到内存中的 Chunk 流([]chunkDesc) 中：&lt;/p>
&lt;pre>&lt;code>// pkg/ingester/stream.go
func (s *stream) Push(ctx context.Context, entries []logproto.Entry, record *WALRecord) (int, error) {
s.chunkMtx.Lock()
defer s.chunkMtx.Unlock()
var bytesAdded int
prevNumChunks := len(s.chunks)
var lastChunkTimestamp time.Time
// 如果之前的 chunks 列表为空，则创建一个新的 chunk
if prevNumChunks == 0 {
s.chunks = append(s.chunks, chunkDesc{
chunk: s.NewChunk(),
})
chunksCreatedTotal.Inc()
} else {
// 获取最新一个chunk的日志时间戳
_, lastChunkTimestamp = s.chunks[len(s.chunks)-1].chunk.Bounds()
}
var storedEntries []logproto.Entry
failedEntriesWithError := []entryWithError{}
for i := range entries {
// 如果这个日志条目与我们最后 append 的一行的时间戳和内容相匹配，则忽略它
if entries[i].Timestamp.Equal(s.lastLine.ts) &amp;amp;&amp;amp; entries[i].Line == s.lastLine.content {
continue
}
// 最新的一个 chunk
chunk := &amp;amp;s.chunks[len(s.chunks)-1]
// 如果当前chunk已经关闭 或者 已经达到设置的最大 Chunk 大小
if chunk.closed || !chunk.chunk.SpaceFor(&amp;amp;entries[i]) || s.cutChunkForSynchronization(entries[i].Timestamp, lastChunkTimestamp, chunk, s.cfg.SyncPeriod, s.cfg.SyncMinUtilization) {
// 如果 chunk 没有更多的空间，则调用 Close 来以确保 head block 中的数据都被切割和压缩。
err := chunk.chunk.Close()
......
chunk.closed = true
......
// Append 一个新的 Chunk
s.chunks = append(s.chunks, chunkDesc{
chunk: s.NewChunk(),
})
chunk = &amp;amp;s.chunks[len(s.chunks)-1]
lastChunkTimestamp = time.Time{}
}
// 往 chunk 里面 Append 日志数据
if err := chunk.chunk.Append(&amp;amp;entries[i]); err != nil {
failedEntriesWithError = append(failedEntriesWithError, entryWithError{&amp;amp;entries[i], err})
} else {
// 存储添加到 chunk 中的日志数据
storedEntries = append(storedEntries, entries[i])
// 配置最后日志行的数据
lastChunkTimestamp = entries[i].Timestamp
s.lastLine.ts = lastChunkTimestamp
s.lastLine.content = entries[i].Line
// 累计大小
bytesAdded += len(entries[i].Line)
}
chunk.lastUpdated = time.Now()
}
if len(storedEntries) != 0 {
// 当重放 wal 的时候 record 将为 nil（我们不希望在重放的时候重写wal日志条目）
if record != nil {
record.AddEntries(uint64(s.fp), storedEntries...)
}
// 后续是用与tail日志的处理
......
}
......
// 如果新增了chunks
if len(s.chunks) != prevNumChunks {
memoryChunks.Add(float64(len(s.chunks) - prevNumChunks))
}
return bytesAdded, nil
}
&lt;/code>&lt;/pre>
&lt;p>Chunk 其实就是多条日志构成的压缩包，将日志压成 Chunk 的可以直接存入对象存储， 一个 Chunk 到达指定大小之前会不断 Append 新的日志到里面，而在达到大小之后, Chunk 就会关闭等待持久化（强制持久化也会关闭 Chunk, 比如关闭 ingester 实例时就会关闭所有的 Chunk 并持久化）。Chunk 的大小控制很重要：&lt;/p>
&lt;ul>
&lt;li>假如 Chunk 容量过小: 首先是导致压缩效率不高，同时也会增加整体的 Chunk 数量, 导致倒排索引过大，最后, 对象存储的操作次数也会变多, 带来额外的性能开销&lt;/li>
&lt;li>假如 Chunk 过大: 一个 Chunk 的 open 时间会更长, 占用额外的内存空间, 同时, 也增加了丢数据的风险，Chunk 过大也会导致查询读放大&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/izup6m/1623123795284-4ec07b53-1b63-4c24-897e-d4f718a68e42.webp" alt="image.gif">
(图片来源: &lt;a href="https://aleiwu.com/post/grafana-loki/">https://aleiwu.com/post/grafana-loki/)&lt;/a>)
在将日志流追加到 Chunk 中过后，在 Ingester 初始化时会启动两个循环去处理 Chunk 数据，分别从 chunks 数据取出存入优先级队列，另外一个循环定期检查从内存中删除已经持久化过后的数据。
首先是 Ingester 中定义了一个 &lt;code>flushQueues&lt;/code> 属性，是一个优先级队列数组，该队列中存放的是 &lt;code>flushOp&lt;/code>：&lt;/p>
&lt;pre>&lt;code>// pkg/ingester/ingester.go
type Ingester struct {
services.Service
......
// 每个 flush 线程一个队列，指纹用来选择队列
flushQueues []*util.PriorityQueue // 优先级队列数组
flushQueuesDone sync.WaitGroup
......
}
// pkg/ingester/flush.go
// 优先级队列中存放的数据
type flushOp struct {
from model.Time
userID string
fp model.Fingerprint
immediate bool
}
&lt;/code>&lt;/pre>
&lt;p>在初始化 Ingester 的时候会根据传递的 &lt;code>ConcurrentFlushes&lt;/code> 参数来实例化 &lt;code>flushQueues&lt;/code> 的大小：&lt;/p>
&lt;pre>&lt;code>// pkg/ingester/ingester.go
func New(cfg Config, clientConfig client.Config, store ChunkStore, limits *validation.Overrides, configs *runtime.TenantConfigs, registerer prometheus.Registerer) (*Ingester, error) {
......
i := &amp;amp;Ingester{
......
flushQueues: make([]*util.PriorityQueue, cfg.ConcurrentFlushes),
......
}
......
i.Service = services.NewBasicService(i.starting, i.running, i.stopping)
return i, nil
}
&lt;/code>&lt;/pre>
&lt;p>然后通过 &lt;code>services.NewBasicService&lt;/code> 实例化 Service 的时候指定了服务的 Starting、Running、Stopping 3 个状态，在其中的 staring 状态函数中会启动协程去消费优先级队列中的数据&lt;/p>
&lt;pre>&lt;code>// pkg/ingester/ingester.go
func (i *Ingester) starting(ctx context.Context) error {
// todo，如果开启了 WAL 的处理
......
// 初始化 flushQueues
i.InitFlushQueues()
......
// 启动循环检查chunk数据
i.loopDone.Add(1)
go i.loop()
return nil
}
&lt;/code>&lt;/pre>
&lt;p>初始化 flushQueues 实现如下所示，其中 &lt;code>flushQueuesDone&lt;/code> 是一个 WaitGroup，根据配置的并发数量并发执行 &lt;code>flushLoop&lt;/code> 操作：&lt;/p>
&lt;pre>&lt;code>// pkg/ingester/flush.go
func (i *Ingester) InitFlushQueues() {
i.flushQueuesDone.Add(i.cfg.ConcurrentFlushes)
for j := 0; j &amp;lt; i.cfg.ConcurrentFlushes; j++ {
// 为每个协程构造一个优先级队列
i.flushQueues[j] = util.NewPriorityQueue(flushQueueLength)
go i.flushLoop(j)
}
}
&lt;/code>&lt;/pre>
&lt;p>每一个优先级队列循环消费数据：&lt;/p>
&lt;pre>&lt;code>// pkg/ingester/flush.go
func (i *Ingester) flushLoop(j int) {
......
for {
// 从队列中根据优先级取出数据
o := i.flushQueues[j].Dequeue()
if o == nil {
return
}
op := o.(*flushOp)
// 执行真正的刷新用户序列数据
err := i.flushUserSeries(op.userID, op.fp, op.immediate)
......
// 如果退出时刷新失败了，把失败的操作放回到队列中去。
if op.immediate &amp;amp;&amp;amp; err != nil {
op.from = op.from.Add(flushBackoff)
i.flushQueues[j].Enqueue(op)
}
}
}
&lt;/code>&lt;/pre>
&lt;p>刷新用户的序列操作，也就是要保存到存储中去：&lt;/p>
&lt;pre>&lt;code>// pkg/ingester/flush.go
// 根据用户ID刷新用户日志序列
func (i *Ingester) flushUserSeries(userID string, fp model.Fingerprint, immediate bool) error {
instance, ok := i.getInstanceByID(userID)
......
// 根据instance和fp指纹数据获取需要刷新的chunks
chunks, labels, chunkMtx := i.collectChunksToFlush(instance, fp, immediate)
......
// 执行真正的刷新 chunks 操作
err := i.flushChunks(ctx, fp, labels, chunks, chunkMtx)
......
}
// 收集需要刷新的 chunks
func (i *Ingester) collectChunksToFlush(instance *instance, fp model.Fingerprint, immediate bool) ([]*chunkDesc, labels.Labels, *sync.RWMutex) {
instance.streamsMtx.Lock()
// 根据指纹数据获取 stream
stream, ok := instance.streamsByFP[fp]
instance.streamsMtx.Unlock()
if !ok {
return nil, nil, nil
}
var result []*chunkDesc
stream.chunkMtx.Lock()
defer stream.chunkMtx.Unlock()
// 循环所有chunks
for j := range stream.chunks {
// 判断是否应该刷新当前chunk
shouldFlush, reason := i.shouldFlushChunk(&amp;amp;stream.chunks[j])
if immediate || shouldFlush {
// 确保不再对该块进行写操作（如果没有关闭，则设置为关闭状态）
if !stream.chunks[j].closed {
stream.chunks[j].closed = true
}
// 如果该 chunk 还没有被成功刷新，则刷新这个块
if stream.chunks[j].flushed.IsZero() {
result = append(result, &amp;amp;stream.chunks[j])
......
}
}
}
return result, stream.labels, &amp;amp;stream.chunkMtx
}
&lt;/code>&lt;/pre>
&lt;p>下面是判断一个具体的 chunk 是否应该被刷新的逻辑：&lt;/p>
&lt;pre>&lt;code>// pkg/ingester/flush.go
func (i *Ingester) shouldFlushChunk(chunk *chunkDesc) (bool, string) {
// chunk关闭了也应该刷新了
if chunk.closed {
if chunk.synced {
return true, flushReasonSynced
}
return true, flushReasonFull
}
// chunk最后更新的时间超过了配置的 chunk 空闲时间 MaxChunkIdle
if time.Since(chunk.lastUpdated) &amp;gt; i.cfg.MaxChunkIdle {
return true, flushReasonIdle
}
// chunk的边界时间操过了配置的 chunk 最大时间 MaxChunkAge
if from, to := chunk.chunk.Bounds(); to.Sub(from) &amp;gt; i.cfg.MaxChunkAge {
return true, flushReasonMaxAge
}
return false, &amp;quot;&amp;quot;
}
&lt;/code>&lt;/pre>
&lt;p>真正将 chunks 数据刷新保存到存储中是 &lt;code>flushChunks&lt;/code> 函数实现的：&lt;/p>
&lt;pre>&lt;code>// pkg/ingester/flush.go
func (i *Ingester) flushChunks(ctx context.Context, fp model.Fingerprint, labelPairs labels.Labels, cs []*chunkDesc, chunkMtx sync.Locker) error {
......
wireChunks := make([]chunk.Chunk, len(cs))
// 下面的匿名函数用于生成保存到存储中的chunk数据
err = func() error {
chunkMtx.Lock()
defer chunkMtx.Unlock()
for j, c := range cs {
if err := c.chunk.Close(); err != nil {
return err
}
firstTime, lastTime := loki_util.RoundToMilliseconds(c.chunk.Bounds())
ch := chunk.NewChunk(
userID, fp, metric,
chunkenc.NewFacade(c.chunk, i.cfg.BlockSize, i.cfg.TargetChunkSize),
firstTime,
lastTime,
)
chunkSize := c.chunk.BytesSize() + 4*1024 // size + 4kB should be enough room for cortex header
start := time.Now()
if err := ch.EncodeTo(bytes.NewBuffer(make([]byte, 0, chunkSize))); err != nil {
return err
}
wireChunks[j] = ch
}
return nil
}()
// 通过 store 接口保存 chunk 数据
if err := i.store.Put(ctx, wireChunks); err != nil {
return err
}
......
chunkMtx.Lock()
defer chunkMtx.Unlock()
for i, wc := range wireChunks {
// flush 成功，写入刷新时间
cs[i].flushed = time.Now()
// 下是一些监控数据更新
......
}
return nil
}
&lt;/code>&lt;/pre>
&lt;p>chunk 数据被写入到存储后，还有有一个协程会去定时清理本地的这些 chunk 数据，在上面的 Ingester 的 &lt;code>staring&lt;/code> 函数中最后有一个 &lt;code>go i.loop()&lt;/code>，在这个 &lt;code>loop()&lt;/code> 函数中会每隔 &lt;code>FlushCheckPeriod&lt;/code>（默认 30s，可以通过 &lt;code>--ingester.flush-check-period&lt;/code> 进行配置）时间就会去去调用 &lt;code>sweepUsers&lt;/code> 函数进行垃圾回收：&lt;/p>
&lt;pre>&lt;code>// pkg/ingester/ingester.go
func (i *Ingester) loop() {
defer i.loopDone.Done()
flushTicker := time.NewTicker(i.cfg.FlushCheckPeriod)
defer flushTicker.Stop()
for {
select {
case &amp;lt;-flushTicker.C:
i.sweepUsers(false, true)
case &amp;lt;-i.loopQuit:
return
}
}
}
&lt;/code>&lt;/pre>
&lt;p>&lt;code>sweepUsers&lt;/code> 函数用于执行将日志流数据加入到优先级队列中，并对没有序列的用户进行垃圾回收：&lt;/p>
&lt;pre>&lt;code>// pkg/ingester/flush.go
// sweepUsers 定期执行 flush 操作，并对没有序列的用户进行垃圾回收
func (i *Ingester) sweepUsers(immediate, mayRemoveStreams bool) {
instances := i.getInstances()
for _, instance := range instances {
i.sweepInstance(instance, immediate, mayRemoveStreams)
}
}
func (i *Ingester) sweepInstance(instance *instance, immediate, mayRemoveStreams bool) {
instance.streamsMtx.Lock()
defer instance.streamsMtx.Unlock()
for _, stream := range instance.streams {
i.sweepStream(instance, stream, immediate)
i.removeFlushedChunks(instance, stream, mayRemoveStreams)
}
}
// must hold streamsMtx
func (i *Ingester) sweepStream(instance *instance, stream *stream, immediate bool) {
stream.chunkMtx.RLock()
defer stream.chunkMtx.RUnlock()
if len(stream.chunks) == 0 {
return
}
// 最新的chunk
lastChunk := stream.chunks[len(stream.chunks)-1]
// 判断是否应该被flush
shouldFlush, _ := i.shouldFlushChunk(&amp;amp;lastChunk)
// 如果只有一个chunk并且不是强制持久化切最新的chunk还不应该被flush，则直接返回
if len(stream.chunks) == 1 &amp;amp;&amp;amp; !immediate &amp;amp;&amp;amp; !shouldFlush {
return
}
// 根据指纹获取用与处理的优先级队列索引
flushQueueIndex := int(uint64(stream.fp) % uint64(i.cfg.ConcurrentFlushes))
firstTime, _ := stream.chunks[0].chunk.Bounds()
// 加入到优先级队列中去
i.flushQueues[flushQueueIndex].Enqueue(&amp;amp;flushOp{
model.TimeFromUnixNano(firstTime.UnixNano()), instance.instanceID,
stream.fp, immediate,
})
}
// 移除已经flush过后的chunks数据
func (i *Ingester) removeFlushedChunks(instance *instance, stream *stream, mayRemoveStream bool) {
now := time.Now()
stream.chunkMtx.Lock()
defer stream.chunkMtx.Unlock()
prevNumChunks := len(stream.chunks)
var subtracted int
for len(stream.chunks) &amp;gt; 0 {
// 如果chunk还没有被刷新到存储 或者 chunk被刷新到存储到现在的时间还没操过 RetainPeriod（默认15分钟，可以通过--ingester.chunks-retain-period 进行配置）则忽略
if stream.chunks[0].flushed.IsZero() || now.Sub(stream.chunks[0].flushed) &amp;lt; i.cfg.RetainPeriod {
break
}
subtracted += stream.chunks[0].chunk.UncompressedSize()
// 删除引用，以便该块可以被垃圾回收起来
stream.chunks[0].chunk = nil
// 移除chunk
stream.chunks = stream.chunks[1:]
}
......
// 如果stream中的所有chunk都被清空了，则清空该 stream 的相关数据
if mayRemoveStream &amp;amp;&amp;amp; len(stream.chunks) == 0 {
delete(instance.streamsByFP, stream.fp)
delete(instance.streams, stream.labelsString)
instance.index.Delete(stream.labels, stream.fp)
......
}
}
&lt;/code>&lt;/pre>
&lt;p>关于存储或者查询等模块的实现在后文再继续探索，包括 WAL 的实现也较为复杂。&lt;/p></description></item><item><title>Docs: Management API</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/prometheus/prometheus-api/management-api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/prometheus/prometheus-api/management-api/</guid><description>
&lt;p>参考：&lt;a href="https://prometheus.io/docs/prometheus/latest/management_api/">官方文档&lt;/a>&lt;/p></description></item><item><title>Docs: Mimir</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/prometheus/prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/mimir/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/prometheus/prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/mimir/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/grafana/mimir">GitHub 项目，grafana/mimir&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/oss/mimir/">官网&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Mimir 由 Grafana 团队开发，为 Prometheus 提供了水平可扩展的、高可用、多租户、长期存储 等功能&lt;/p></description></item></channel></rss>