<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – Thanos</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/prometheus/prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/thanos/</link><description>Recent content in Thanos on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/prometheus/prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/thanos/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Thanos 部署</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/prometheus/prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/thanos/thanos-%E9%83%A8%E7%BD%B2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/prometheus/prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/thanos/thanos-%E9%83%A8%E7%BD%B2/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://thanos.io/tip/thanos/quick-tutorial.md/#sidecar">官方文档,快速教程&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="通过-docker-启动-thanos">通过 docker 启动 Thanos&lt;/h1>
&lt;h2 id="sidecar">Sidecar&lt;/h2>
&lt;h2 id="query">Query&lt;/h2>
&lt;h1 id="store">Store&lt;/h1>
&lt;h1 id="在-kubernetes-集群中部署-thanos">在 Kubernetes 集群中部署 Thanos&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/thanos-io/kube-thanos/tree/main/examples">GitHub,examples(Manifests)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/thanos-io/kube-thanos/tree/main/manifests">通过 kubectl 插件 kube-thanos 部署 Store 与 Query 的 Manifests&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="sidecar-或-receiver">Sidecar 或 Receiver&lt;/h2>
&lt;p>由于 Sidecar 的工作性质，所以，Sidecar 组件最好作为 Prometheus 的 sidecar 容器，部署在同一个 Pod 中。&lt;/p>
&lt;h2 id="query-1">Query&lt;/h2>
&lt;h2 id="store-1">Store&lt;/h2>
&lt;h2 id="compact">Compact&lt;/h2>
&lt;h1 id="通过-prometheus-operator-部署-thanos">通过 prometheus-operator 部署 Thanos&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://prometheus-operator.dev/docs/operator/thanos/">官方文档,prometheus operator-thanos&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/prometheus-operator/prometheus-operator/blob/master/Documentation/thanos.md">GitHub 文档,prometheus-operator-文档-thanos&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>Docs: Thanos 管理</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/prometheus/prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/thanos/thanos-%E7%AE%A1%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/prometheus/prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/thanos/thanos-%E7%AE%A1%E7%90%86/</guid><description>
&lt;h1 id="thanos-store-可能产生的问题">Thanos Store 可能产生的问题&lt;/h1>
&lt;p>下面报警触发的原因未知，但是在 node-exporter 的面板中，打开系统明细，并查询 90 天数据，且 receive 只保留 30 天数据时，大概率会发生这个问题。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;status&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;success&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;data&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;resultType&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;matrix&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;result&amp;#34;&lt;/span>: []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;warnings&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;No StoreAPIs matched for this query&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;No StoreAPIs matched for this query&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Thanos 配置详解</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/prometheus/prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/thanos/thanos-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/prometheus/prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/thanos/thanos-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;h2 id="参考">参考：&lt;/h2>
&lt;/blockquote>
&lt;h1 id="sidecar-配置">Sidecar 配置&lt;/h1>
&lt;h2 id="命令行标志httpsthanosiotipcomponentssidecarmdflags">&lt;a href="https://thanos.io/tip/components/sidecar.md/#flags">命令行标志&lt;/a>&lt;/h2>
&lt;p>&lt;strong>&amp;ndash;grpc-addresss=&lt;!-- raw HTML omitted -->&lt;/strong> # 暴露的 StoreAPI 端点。默认值：&lt;code>0.0.0.0:10901&lt;/code>
&lt;strong>&amp;ndash;http-address=&lt;!-- raw HTML omitted -->&lt;/strong> # 监听的 HTTP 端点。/metrics 端点暴露指标。默认值：&lt;code>0.0.0.0:10902&lt;/code>
**&amp;ndash;objstore.config-file=&lt;!-- raw HTML omitted --> **# 对象存储的配置信息。Sidecar 根据该配置，将 Prometheus 自身保存的数据转存到配置的对象存储中。
**&amp;ndash;prometheus.url=&lt;!-- raw HTML omitted --> **# 与 Prometheus Server 交互的地址。默认值：&lt;code>http://localhost:9090&lt;/code>
&lt;strong>&amp;ndash;tsdb.path=&lt;!-- raw HTML omitted -->&lt;/strong> # Prometheus 存储时间序列数据的路径。默认值：&lt;code>./data&lt;/code>
&lt;strong>&amp;ndash;shipper.upload-compacted&lt;/strong> # 开启已压缩数据转存功能。该标志对迁移数据很有用。&lt;/p>
&lt;h2 id="配置文件">配置文件&lt;/h2>
&lt;h1 id="receiver-配置">Receiver 配置&lt;/h1>
&lt;h2 id="命令行标志httpsthanosiotipcomponentsreceivemdflags">&lt;a href="https://thanos.io/tip/components/receive.md/#flags">命令行标志&lt;/a>&lt;/h2>
&lt;p>&lt;strong>&amp;ndash;grpc-address=&lt;!-- raw HTML omitted -->&lt;/strong> # 暴露的 StoreAPI 端点。&lt;code>默认值：0.0.0.0:10901&lt;/code>
&lt;strong>&amp;ndash;http-address=&lt;!-- raw HTML omitted -->&lt;/strong> # 监听的 HTTP 端点。/metrics 端点暴露指标。&lt;code>默认值：0.0.0.0:10902&lt;/code>
&lt;strong>&amp;ndash;label=&amp;lt;KEY=&amp;ldquo;VALUE&amp;rdquo;&amp;gt;&lt;/strong> # 为所有序列创建的标签，多个标签指定多个 &amp;ndash;label 标志。与 prometheus 配置 external_labels 字段效果一样
**&amp;ndash;objstore.config-file=&lt;!-- raw HTML omitted --> **# 对象存储的配置信息。Receiver 根据该配置，将时序数据转存到对象存储中。
&lt;strong>&amp;ndash;receive.hashrings-file=/etc/thanos/receiver-hashring.json&lt;/strong> #
&lt;strong>&amp;ndash;receive.local-endpoint=127.0.0.1:10901&lt;/strong> #
&lt;strong>&amp;ndash;receive.replication-factor=1&lt;/strong> #
&lt;strong>&amp;ndash;remote-write.address=&lt;!-- raw HTML omitted -->&lt;/strong> # 处理 Prometheus 的 Remote Write 请求的地址和端口。&lt;code>默认值：0.0.0.0:19291&lt;/code>
&lt;strong>&amp;ndash;tsdb.path=&lt;!-- raw HTML omitted -->&lt;/strong> # Receiver 的 TSDB 存储数据的路径。&lt;code>默认值：./data&lt;/code>
&lt;strong>&amp;ndash;tsdb.retention=&lt;!-- raw HTML omitted -->&lt;/strong> # Receiver 的 TSDB 中存储数据的时长。&lt;code>默认值：15d&lt;/code>
&lt;strong>&amp;ndash;tsdb.wal-compression&lt;/strong> # 开启压缩 TSDB 的 WAL 功能。&lt;/p>
&lt;h2 id="配置文件-1">配置文件&lt;/h2>
&lt;h1 id="query-配置">Query 配置&lt;/h1>
&lt;h2 id="命令行标志httpsthanosiotipcomponentsquerymdflags">&lt;a href="https://thanos.io/tip/components/query.md/#flags">命令行标志&lt;/a>&lt;/h2>
&lt;p>&lt;strong>&amp;ndash;store=&lt;!-- raw HTML omitted -->&lt;/strong> # 发起 PromQL 查询请求时的目标，若有多个查询目标，可以配置多个该选项。通常用来指定某些组件暴露的 StoreAPI。
&lt;strong>&amp;ndash;query.lookback-delta=&lt;!-- raw HTML omitted -->&lt;/strong> # 评估 PromQL 表达式时最大的回溯时间。&lt;code>默认值：5m&lt;/code>&lt;/p>
&lt;ul>
&lt;li>比如，当采集目标的间隔时间为 10m 时，由于该设置，最大只能查询当前时间的前 5m 的数据，这是，即时向量表达式返回的结果将会为空。&lt;/li>
&lt;/ul>
&lt;h2 id="配置文件-2">配置文件&lt;/h2>
&lt;h1 id="store-配置">Store 配置&lt;/h1>
&lt;h2 id="命令行标志httpsthanosiotipcomponentsstoremdflags">&lt;a href="https://thanos.io/tip/components/store.md/#flags">命令行标志&lt;/a>&lt;/h2>
&lt;p>&lt;strong>&amp;ndash;grpc-address=&lt;!-- raw HTML omitted -->&lt;/strong> # 暴露的 StoreAPI 端点。&lt;code>默认值：0.0.0.0:10901&lt;/code>
&lt;strong>&amp;ndash;http-address=&lt;!-- raw HTML omitted -->&lt;/strong> # 监听的 HTTP 端点。/metrics 端点暴露指标。&lt;code>默认值：0.0.0.0:10902&lt;/code>
**&amp;ndash;objstore.config-file=&lt;!-- raw HTML omitted --> **# 对象存储的配置信息。Store 收到 PromQL 查询请求后，将会根据该配置文件的内容，去相应的对象存储中查询数据。&lt;/p>
&lt;h2 id="配置文件-3">配置文件&lt;/h2>
&lt;h1 id="compactor-配置">Compactor 配置&lt;/h1>
&lt;h2 id="命令行标志httpsthanosiotipcomponentscompactmdflags">&lt;a href="https://thanos.io/tip/components/compact.md/#flags">命令行标志&lt;/a>&lt;/h2>
&lt;p>&lt;strong>&amp;ndash;log.format=&lt;!-- raw HTML omitted -->&lt;/strong> # 输出的日志格式。&lt;code>默认值：logfmt&lt;/code>&lt;/p>
&lt;ul>
&lt;li>可用的格式有 logfmt、json&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>&amp;ndash;log.level=&lt;!-- raw HTML omitted -->&lt;/strong> # 输出日志的级别。&lt;code>默认值：info&lt;/code>
&lt;strong>&amp;ndash;retention.resolution-raw=&lt;!-- raw HTML omitted -->&lt;/strong> # 对象存储中，原始数据的保留时长。
&lt;strong>&amp;ndash;retention.resolution-5m=&lt;!-- raw HTML omitted -->&lt;/strong> # 对象存储中，降采样到样本间隔 5 分钟的数据的保留时长。
&lt;strong>&amp;ndash;retention.resolution-1h=&lt;!-- raw HTML omitted -->&lt;/strong> # 对象存储中，降采样到样本间隔 1 小时的数据的保留时长。&lt;/p>
&lt;ul>
&lt;li>通常建议它们的存放时间递增配置（一般只有比较新的数据才会放大看，久远的数据通常只会使用大时间范围查询来看个大致，所以建议将精细程度低的数据存放更长时间）。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>&amp;ndash;wait&lt;/strong> # 让 Compactor 持续运行，而不是压缩完成后结束进程
&lt;strong>&amp;ndash;wait-interval=&lt;!-- raw HTML omitted -->&lt;/strong> # 每次压缩任务的等待时间和桶刷新时间。仅在指定了 &amp;ndash;wait 标志后才起作用。&lt;/p>
&lt;h2 id="配置文件-4">配置文件&lt;/h2>
&lt;h1 id="ruler-配置">Ruler 配置&lt;/h1>
&lt;h2 id="命令行标志">命令行标志&lt;/h2>
&lt;h2 id="配置文件-5">配置文件&lt;/h2></description></item><item><title>Docs: Thanos 组件详解</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/prometheus/prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/thanos/thanos-%E7%BB%84%E4%BB%B6%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/prometheus/prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/thanos/thanos-%E7%BB%84%E4%BB%B6%E8%AF%A6%E8%A7%A3/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://thanos.io/tip/components/">官方文档，组件&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zhuanlan.zhihu.com/p/137248127">https://zhuanlan.zhihu.com/p/137248127&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="compactor压缩器">Compactor(压缩器)&lt;/h1>
&lt;p>&lt;strong>注意：Compactor 在持久运行状态，会对对象存储发起大量的 GET 请求。最好间隔一段时间，运行一次，压缩一次数据即可，不必持久运行&lt;/strong>
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/ilh4m6/1636990514133-53c917f1-6f57-4bb5-a59d-0776a5fef235.png" alt="image.png">&lt;/p>
&lt;h1 id="receiver接收器">Receiver(接收器)&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://thanos.io/tip/components/receive.md">官方文档,组件-接收器&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="querier查询器">Querier(查询器)&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://thanos.io/tip/components/query.md">官方文档,组件-查询器&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Querier 组件分为两部分&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Querier(查询器)&lt;/strong> # 实现了 Prometheus API，可以通过 Querier 发起 PromQL 查询请求，以获取数据；甚至可以从 Prometheus Server 的时序数据库中删除数据。每个从 Querier 发起的 PromQL 查询请求都会发送到可以暴露 StoreAPI 的组件上，并获取查询结果。&lt;/li>
&lt;li>&lt;strong>Query Fronted(查询前端)&lt;/strong> # 实现了 Prometheus API，可以将请求负载均衡到指定的多个 Querier 上，同时可以缓存响应数据、也可以按查询日拆分。有点像 Redis 的效果&lt;/li>
&lt;/ul>
&lt;p>Querier 组件向一个或多个暴露 StoreAPI 的组件发起查询请求，并将结果去重后，返回给查询客户端。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/ilh4m6/1627118034684-9a4e56ce-7593-4bca-bc38-7fd72bff563c.png" alt="image.png">&lt;/p>
&lt;h2 id="deduplication重复数据删除">Deduplication(重复数据删除)&lt;/h2>
&lt;p>The query layer can deduplicate series that were collected from high-availability pairs of data sources such as Prometheus. A fixed single or multiple replica labels must be chosen for the entire cluster and can then be passed to query nodes on startup.查询层可以从高可用性对数据源（如 Prometheus）收集的档案。必须为整个群集选择固定的单个或多个副本标签，然后可以通过启动时传递到查询节点。&lt;/p>
&lt;p>Two or more series that are only distinguished by the given replica label, will be merged into a single time series. This also hides gaps in collection of a single data source.仅通过给定的副本标签区分的两个或更多系列，将合并为单个时间序列。这也隐藏了收集单个数据源的间隙。&lt;/p>
&lt;h3 id="单副本标签示例">单副本标签示例&lt;/h3>
&lt;p>假如现在 Query 从不同的 StoreAPI 中获取了三条时序数据&lt;/p>
&lt;ul>
&lt;li>Prometheus + sidecar &amp;ldquo;A&amp;rdquo;: cluster=1,env=2,replica=A&lt;/li>
&lt;li>Prometheus + sidecar &amp;ldquo;B&amp;rdquo;: cluster=1,env=2,replica=B&lt;/li>
&lt;li>Prometheus + sidecar &amp;ldquo;A&amp;rdquo; in different cluster: cluster=2,env=2,replica=A&lt;/li>
&lt;/ul>
&lt;p>我们像下面这样配置 query&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>If we configure Querier like this:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>thanos query &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --http-address &lt;span style="color:#e6db74">&amp;#34;0.0.0.0:9090&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --query.replica-label &lt;span style="color:#e6db74">&amp;#34;replica&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --store &lt;span style="color:#e6db74">&amp;#34;&amp;lt;store-api&amp;gt;:&amp;lt;grpc-port&amp;gt;&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --store &lt;span style="color:#e6db74">&amp;#34;&amp;lt;store-api2&amp;gt;:&amp;lt;grpc-port&amp;gt;&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>当我们在运行 query 时指定了 &lt;code>--query.replica-label&lt;/code> 标志时，我们会将具有相同标签的时序去重只保留一个，此时我们将获得 2 个结果：&lt;/p>
&lt;ul>
&lt;li>up{job=&amp;ldquo;prometheus&amp;rdquo;,env=&amp;ldquo;2&amp;rdquo;,cluster=&amp;ldquo;1&amp;rdquo;} 1&lt;/li>
&lt;li>up{job=&amp;ldquo;prometheus&amp;rdquo;,env=&amp;ldquo;2&amp;rdquo;,cluster=&amp;ldquo;2&amp;rdquo;} 1&lt;/li>
&lt;/ul>
&lt;p>如果没有此副本标志（关闭数据删除），我们将获得 3 个结果：&lt;/p>
&lt;ul>
&lt;li>up{job=&amp;ldquo;prometheus&amp;rdquo;,env=&amp;ldquo;2&amp;rdquo;,cluster=&amp;ldquo;1&amp;rdquo;,replica=&amp;ldquo;A&amp;rdquo;} 1&lt;/li>
&lt;li>up{job=&amp;ldquo;prometheus&amp;rdquo;,env=&amp;ldquo;2&amp;rdquo;,cluster=&amp;ldquo;1&amp;rdquo;,replica=&amp;ldquo;B&amp;rdquo;} 1&lt;/li>
&lt;li>up{job=&amp;ldquo;prometheus&amp;rdquo;,env=&amp;ldquo;2&amp;rdquo;,cluster=&amp;ldquo;2&amp;rdquo;,replica=&amp;ldquo;A&amp;rdquo;} 1&lt;/li>
&lt;/ul>
&lt;h3 id="多副本标签示例">多副本标签示例&lt;/h3>
&lt;ul>
&lt;li>Prometheus + sidecar &amp;ldquo;A&amp;rdquo;: cluster=1,env=2,replica=A,replicaX=A&lt;/li>
&lt;li>Prometheus + sidecar &amp;ldquo;B&amp;rdquo;: cluster=1,env=2,replica=B,replicaX=B&lt;/li>
&lt;li>Prometheus + sidecar &amp;ldquo;A&amp;rdquo; in different cluster: cluster=2,env=2,replica=A,replicaX=A&lt;/li>
&lt;/ul>
&lt;p>上面的例子有两个需要去重的标签，那么就可以使用两次 &lt;code>--query.replica-label&lt;/code> 标志。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>thanos query &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --http-address &lt;span style="color:#e6db74">&amp;#34;0.0.0.0:9090&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --query.replica-label &lt;span style="color:#e6db74">&amp;#34;replica&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --query.replica-label &lt;span style="color:#e6db74">&amp;#34;replicaX&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --store &lt;span style="color:#e6db74">&amp;#34;&amp;lt;store-api&amp;gt;:&amp;lt;grpc-port&amp;gt;&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --store &lt;span style="color:#e6db74">&amp;#34;&amp;lt;store-api2&amp;gt;:&amp;lt;grpc-port&amp;gt;&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="query-frontend查询前端">Query Frontend(查询前端)&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://thanos.io/tip/components/query-frontend.md/">官方文档，组件-查询前端&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/W9diP0OKt_-ajAXM_wgogg">公众号-k8s 技术圈，使用 Thanos 查询前端优化查询性能&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="sidecar边车">Sidecar(边车)&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://thanos.io/tip/components/sidecar.md/">官方文档，组件-边车&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>Docs: Thanos 组件详解</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/prometheus/prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/thanos/thanos-%E7%BB%84%E4%BB%B6%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/prometheus/prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/thanos/thanos-%E7%BB%84%E4%BB%B6%E8%AF%A6%E8%A7%A3/</guid><description/></item></channel></rss>