<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – Thanos 组件详解</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/prometheus/prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/thanos/thanos-%E7%BB%84%E4%BB%B6%E8%AF%A6%E8%A7%A3/</link><description>Recent content in Thanos 组件详解 on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/prometheus/prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/thanos/thanos-%E7%BB%84%E4%BB%B6%E8%AF%A6%E8%A7%A3/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: 使用 Thanos 查询前端优化查询性能</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/prometheus/prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/thanos/thanos-%E7%BB%84%E4%BB%B6%E8%AF%A6%E8%A7%A3/%E4%BD%BF%E7%94%A8-thanos-%E6%9F%A5%E8%AF%A2%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96%E6%9F%A5%E8%AF%A2%E6%80%A7%E8%83%BD/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/prometheus/prometheus-%E8%A1%8D%E7%94%9F%E5%93%81/thanos/thanos-%E7%BB%84%E4%BB%B6%E8%AF%A6%E8%A7%A3/%E4%BD%BF%E7%94%A8-thanos-%E6%9F%A5%E8%AF%A2%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96%E6%9F%A5%E8%AF%A2%E6%80%A7%E8%83%BD/</guid><description>
&lt;p>Thanos 中的 Query 组件可以提供一个统一的查询入口，但是当查询的数据规模较大的时候，对 querier 组件也会有很大的压力，为此 Thanos 也提供了一个 &lt;code>Query Frontend&lt;/code> 的组件来提升性能。Thanos Query Frontend 是 Thanos Query 的前端，它的目标是将大型查询拆分为多个较小的查询，并缓存查询结果来提升性能。&lt;/p>
&lt;h2 id="概述">概述&lt;/h2>
&lt;p>Thanos Query Frontend 组件通过 &lt;code>thanos query-frontend&lt;/code> 命令实现了一个放在 querier 前面的服务，以改进读取路径。它基于 Cortex Query Frontend 组件，所以你可以找到一些 Cortex 常见的特性，如查询拆分和结果缓存。Thanos Query Frontend 是无状态和水平扩展的，可以使用下列命令来启动 Thanos Query Frontend：&lt;/p>
&lt;p>&lt;code>thanos query-frontend \     --http-address     &amp;quot;0.0.0.0:9090&amp;quot; \     --query-frontend.downstream-url=&amp;quot;&amp;lt;thanos-querier&amp;gt;:&amp;lt;querier-http-port&amp;gt;&amp;quot;&lt;/code>&lt;/p>
&lt;p>在接收到查询请求后 query frontend 不会立即响应，而是将查询请求放入一个查询队列中，querier 会连接到 query frontend 并消费这个队列，执行从队列中获取的查询请求并响应给 query frontend，query frontend 会对这些响应的结果进行聚合。&lt;/p>
&lt;h2 id="特性">特性&lt;/h2>
&lt;h3 id="查询队列">查询队列&lt;/h3>
&lt;p>query frontend 的队列机制有以下用途。&lt;/p>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul>
&lt;p>确保可能导致 OOM 的大型查询在发生错误时能够得到重试。&lt;/p>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul>
&lt;p>防止多个大的查询请求打在单个 querier 上。&lt;/p>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul>
&lt;p>可以分配租户所对应的 querier，避免单个租户使用 DOS 拒绝服务攻击其他租户。&lt;/p>
&lt;h3 id="查询拆分">查询拆分&lt;/h3>
&lt;p>query frontend 会将多天的的查询拆分为多个单天的查询，游下游的 querier 去并行处理这些已拆分的查询。返回的查询结果由 query frontend 进行汇聚。这样可以防止大时间跨度的查询导致 queier 发生 OOM，并且能够更快的执行查询以及更好的查询负载均衡。查询前端根据配置的 &lt;code>--query-range.split-interval&lt;/code> 标志将长查询拆分为多个短查询，&lt;code>--query-range.split-interval&lt;/code> 的默认值为 24 小时，启用缓存时，它应该大于 0。&lt;/p>
&lt;h3 id="重试机制">重试机制&lt;/h3>
&lt;p>query frontend 支持在 HTTP 请求失败时重试查询的重试机制，有一个 &lt;code>--query-range.max-retries-per-request&lt;/code> 标志来限制最大重试次数。&lt;/p>
&lt;h3 id="查询缓存">查询缓存&lt;/h3>
&lt;p>query frontend 支持将查询结果进行缓存用以加速后续的查询。当缓存的结果不够完整时，query frontend 会计算出所需要的子查询并分配给下游的 querier 并行执行，子查询的步长会对齐以提升查询结果的可缓存性。当前支持的缓存后端有：memcached，redis 和内存，下面是这些缓存后端的一些配置。&lt;/p>
&lt;p>&lt;strong>内存缓存&lt;/strong>&lt;/p>
&lt;p>&lt;code>type: IN-MEMORY config:   max_size: &amp;quot;&amp;quot;   max_size_items: 0   validity: 0s&lt;/code>&lt;/p>
&lt;p>max_size 表示在内存中缓存的最大尺寸，单位可以是 KB、MB、GB。如果 max_size 和 max_size_items 都没有设置，就不会创建缓存。如果只设置 max_size 或 max_size_items 中的任意一个，则对其他字段没有限制。&lt;/p>
&lt;p>&lt;strong>memcached&lt;/strong>&lt;/p>
&lt;p>&lt;code>type: MEMCACHED config:   addresses: [your-memcached-addresses]   timeout: 500ms   max_idle_connections: 100   max_item_size: 1MiB   max_async_concurrency: 10   max_async_buffer_size: 10000   max_get_multi_concurrency: 100   max_get_multi_batch_size: 0   dns_provider_update_interval: 10s   expiration: 24h&lt;/code>&lt;/p>
&lt;p>expiration 表示指定 memcached 缓存有效时间，如果设置为 0，则使用默认的 24 小时过期时间，上面的配置是默认的 memcached 配置。&lt;/p>
&lt;p>&lt;strong>Redis&lt;/strong>&lt;/p>
&lt;p>默认的 Redis 配置如下：&lt;/p>
&lt;p>&lt;code>type: REDIS config:   addr: &amp;quot;&amp;quot;   username: &amp;quot;&amp;quot;   password: &amp;quot;&amp;quot;   db: 0   dial_timeout: 5s   read_timeout: 3s   write_timeout: 3s   pool_size: 100   min_idle_conns: 10   idle_timeout: 5m0s   max_conn_age: 0s   max_get_multi_concurrency: 100   get_multi_batch_size: 100   max_set_multi_concurrency: 100   set_multi_batch_size: 100   expiration: 24h0m0s&lt;/code>&lt;/p>
&lt;p>expiration 表示指定 Redis 缓存有效时间，如果设置为 0，则使用默认的 24 小时过期时间。&lt;/p>
&lt;h3 id="慢查询日志">慢查询日志&lt;/h3>
&lt;p>query frontend 还支持通过配置 &lt;code>--query-frontend.log-queries-longer-than&lt;/code> 标志来记录运行时间超过某个持续时间的查询。&lt;/p>
&lt;h2 id="安装">安装&lt;/h2>
&lt;p>安装 query frontend 最重要的就是通过 &lt;code>-query-frontend.downstream-url&lt;/code> 指定下游的 querier，如下所示：&lt;/p>
&lt;p>`# thanos-query-frontend.yamlapiVersion: apps/v1
kind: Deployment
metadata:
  name: thanos-query-frontend
  namespace: kube-mon
  labels:
    app: thanos-query-frontend
spec:
  selector:
    matchLabels:
      app: thanos-query-frontend
  template:
    metadata:
      labels:
        app: thanos-query-frontend
    spec:
      containers:
        - name: thanos
          image: thanosio/thanos:v0.25.1
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 9090
              name: http
          args:
            - query-frontend
            - &amp;ndash;log.level=info
            - &amp;ndash;log.format=logfmt
            - &amp;ndash;query-frontend.compress-responses
            - &amp;ndash;http-address=0.0.0.0:9090
            - &amp;ndash;query-frontend.downstream-url=http://thanos-querier.kube-mon.svc.cluster.local:9090
            - &amp;ndash;query-range.split-interval=12h
            - &amp;ndash;query-range.max-retries-per-request=10
            - &amp;ndash;query-frontend.log-queries-longer-than=10s
            - &amp;ndash;labels.split-interval=12h
            - &amp;ndash;labels.max-retries-per-request=10
            - |-
              &amp;ndash;query-range.response-cache-config=&amp;ldquo;config&amp;rdquo;:
                max_size: &amp;ldquo;200MB&amp;rdquo;
                max_size_items: 0
                validity: 0s
              type: IN-MEMORY
            - |-
              &amp;ndash;labels.response-cache-config=&amp;ldquo;config&amp;rdquo;:
                max_size: &amp;ldquo;200MB&amp;rdquo;
                max_size_items: 0
                validity: 0s
              type: IN-MEMORY
          env:
            - name: HOST_IP_ADDRESS
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
          livenessProbe:
            failureThreshold: 4
            httpGet:
              path: /-/healthy
              port: 9090
              scheme: HTTP
            periodSeconds: 30
          readinessProbe:
            failureThreshold: 20
            httpGet:
              path: /-/ready
              port: 9090
              scheme: HTTP
            periodSeconds: 5
          resources:
            requests:
              memory: 512Mi
              cpu: 500m
            limits:
              memory: 512Mi
              cpu: 500m&lt;/p>
&lt;hr>
&lt;p>apiVersion: v1&lt;/p>
&lt;p>kind: Service&lt;/p>
&lt;p>metadata:&lt;/p>
&lt;p>name: thanos-query-frontend&lt;/p>
&lt;p>namespace: kube-mon&lt;/p>
&lt;p>labels:&lt;/p>
&lt;p>app: thanos-query-frontend&lt;/p>
&lt;p>spec:&lt;/p>
&lt;p>ports:&lt;/p>
&lt;p>- name: http&lt;/p>
&lt;p>port: 9090&lt;/p>
&lt;p>targetPort: 9090&lt;/p>
&lt;p>selector:&lt;/p>
&lt;p>app: thanos-query-frontend&lt;/p>
&lt;p>type: NodePort&lt;/p>
&lt;p>`&lt;/p>
&lt;p>这里我们开启了缓存，使用内存缓存，直接通过 &lt;code>-query-range.response-cache-config&lt;/code> 参数来配置缓存配置，也可以通过 &lt;code>-query-range.response-cache-config-file&lt;/code> 指定缓存配置文件，两种方式均可，为了验证结果，这里创建了一个 NodePort 类型的 Service，直接创建上面的资源对象即可：&lt;/p>
&lt;p>&lt;code>☸ ➜ kubectl apply -f https://p8s.io/docs/thanos/manifests/thanos-query-frontend.yaml ☸ ➜ kubectl get pods -n kube-mon -l app=thanos-query-frontend NAME                                     READY   STATUS    RESTARTS   AGE thanos-query-frontend-78954bc857-nkxkk   1/1     Running   0          151m ☸ ➜ kubectl get svc -n kube-mon -l app=thanos-query-frontend NAME                    TYPE       CLUSTER-IP      EXTERNAL-IP   PORT(S)          AGE thanos-query-frontend   NodePort   10.97.182.150   &amp;lt;none&amp;gt;        9090:30514/TCP   152m&lt;/code>&lt;/p>
&lt;p>然后可以通过任意节点的 30514 端口访问到查询前端：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/eb1b6218-460e-40ab-8fdc-0d2e104245d9/640" alt="">&lt;/p>
&lt;p>该前端页面和 Query 组件是一致的，但是在 Query 前面缓存包装了一层。&lt;/p></description></item></channel></rss>