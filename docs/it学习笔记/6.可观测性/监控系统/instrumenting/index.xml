<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – Instrumenting</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/instrumenting/</link><description>Recent content in Instrumenting on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/instrumenting/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Blackbox Exporter</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/instrumenting/blackbox-exporter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/instrumenting/blackbox-exporter/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/prometheus/blackbox_exporter">GitHub 项目，prometheus/blackbox_exporter&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://prometheus.io/docs/guides/multi-target-exporter/#configuring-modules">官方文档&lt;/a>&lt;/li>
&lt;li>个人文章参考：
&lt;ul>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/gBdOMob_GZ5t44evAHFVOA">https://mp.weixin.qq.com/s/gBdOMob_GZ5t44evAHFVOA&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>我们可以使用如下几种协议来对目标进行探测&lt;/p>
&lt;ul>
&lt;li>http&lt;/li>
&lt;li>tcp&lt;/li>
&lt;li>dns&lt;/li>
&lt;li>icmp&lt;/li>
&lt;/ul>
&lt;h2 id="使用方法">使用方法&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl &lt;span style="color:#e6db74">&amp;#39;http://10.244.1.26:19115/probe?module=http_2xx&amp;amp;target=www.baidu.com&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="prometheus-使用-blackbox-exporter-的配置示例">Prometheus 使用 Blackbox Exporter 的配置示例&lt;/h2>
&lt;p>与一般 Exporter 配置不同， Blackbox Exporter 的配置方式与 [SNMP Exporter](/docs/IT学习笔记/6.可观测性/监控系统/Instrumenting/SNMP%20Exporter.md Exporter.md) 更像，每一个待探测的目标将会作为 Blackbox Exporter 程序的参数。可以通过 Relabel 机制，设置目标的 instance 标签。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">scrape_configs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">job_name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;blackbox-http-get&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">metrics_path&lt;/span>: &lt;span style="color:#ae81ff">/probe&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">params&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">module&lt;/span>: [&lt;span style="color:#ae81ff">http_2xx]&lt;/span> &lt;span style="color:#75715e"># Look for a HTTP 200 response.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">static_configs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">targets&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">http://prometheus.io&lt;/span> &lt;span style="color:#75715e"># Target to probe with http.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">https://prometheus.io&lt;/span> &lt;span style="color:#75715e"># Target to probe with https.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">http://example.com:8080&lt;/span> &lt;span style="color:#75715e"># Target to probe with http on port 8080.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">relabel_configs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">source_labels&lt;/span>: [&lt;span style="color:#ae81ff">__address__]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">target_label&lt;/span>: &lt;span style="color:#ae81ff">__param_target&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">source_labels&lt;/span>: [&lt;span style="color:#ae81ff">__param_target]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">target_label&lt;/span>: &lt;span style="color:#ae81ff">instance&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">target_label&lt;/span>: &lt;span style="color:#ae81ff">__address__&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">replacement&lt;/span>: &lt;span style="color:#ae81ff">127.0.0.1&lt;/span>:&lt;span style="color:#ae81ff">9115&lt;/span> &lt;span style="color:#75715e"># The blackbox exporter&amp;#39;s real hostname:port.&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="配置详解">配置详解&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/prometheus/blackbox_exporter/blob/master/CONFIGURATION.md">GitHub,CONFIGURATION.md&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Blackbox Exporter 的配置以模块区分，每个模块都有其独立的配置字段。一个模块就代表了一种探针类型及其探测行为。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">modules&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 指定模块的名称,可以定义多个模块。一个模块就代表一种探针及其探测行为。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">NAME_1&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 该模块的探针要使用的探测协议，可用的值有 http、tcp、dns、icmp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">prober&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;STRING&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 探测时的超时时长&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">timeout&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;DURATION&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 探针的行为，ProberProtool 应为 prober 字段的值&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ProberProtocol&lt;/span>: &lt;span style="color:#ae81ff">......&lt;/span> &lt;span style="color:#75715e"># 不同的探测协议，可用的配置字段各不相同，假如使用 http，则 ProberProtocol 替换为 http。详见下文单独章节&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="http-协议探针">http 协议探针&lt;/h2>
&lt;p>&lt;strong>valid_status_codes: &amp;lt;[]INT&amp;gt;&lt;/strong> # 此探针可以接受的响应状态码。&lt;code>默认值：2xx&lt;/code>。注:2xx 表示所有 2xx 状态码，这个字段的值如果要手动指定，必须是 int 类型。&lt;/p>
&lt;ul>
&lt;li>若响应码不在该字段指定的范围内，则探测失败&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>valid_http_versions: &lt;!-- raw HTML omitted -->&lt;/strong> # 探针接受的 HTTP 版本。&lt;/p>
&lt;ul>
&lt;li>若 HTTP 版本不在字段指定的范围内，则探测失败&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>method: &lt;!-- raw HTML omitted -->&lt;/strong> # 探针探测是要使用的 HTTP Method。&lt;code>默认值：GET&lt;/code>
&lt;strong>headers: &amp;lt;map[STGRING]STRING&amp;gt;&lt;/strong> # 设置探测时要使用的 Header，每行都是一个请求头的键值对。
**compression: &lt;!-- raw HTML omitted --> **#
&lt;strong>follow_redirects: &lt;!-- raw HTML omitted -->&lt;/strong> #
&lt;strong>fail_if_ssl: &lt;!-- raw HTML omitted -->&lt;/strong> # 如果 SSL 存在，则探针失败。&lt;code>默认值：false&lt;/code>
&lt;strong>fail_if_not_ssl: &lt;!-- raw HTML omitted -->&lt;/strong> # 如果 SSL 不存在，则探针失败。&lt;code>默认值：false&lt;/code>
&lt;strong>fail_if_body_matches_regexp:&lt;/strong> # Probe fails if response body matches regex.
[ - &lt;!-- raw HTML omitted -->, &amp;hellip; ]
**fail_if_body_not_matches_regexp: **# Probe fails if response body does not match regex.
[ - &lt;!-- raw HTML omitted -->, &amp;hellip; ]
**fail_if_header_matches: **# Probe fails if response header matches regex. For headers with multiple values, fails if &lt;em>at least one&lt;/em> matches.
[ - &amp;lt;http&lt;em>header_match_spec&amp;gt;, &amp;hellip; ]
&lt;strong>fail_if_header_not_matches:&lt;/strong> # Probe fails if response header does not match regex. For headers with multiple values, fails if _none&lt;/em> match.
[ - &amp;lt;http_header_match_spec&amp;gt;, &amp;hellip; ]&lt;/p>
&lt;p>######## Prometheus &lt;a href="https://github.com/prometheus/common/blob/v0.30.0/config/http_config.go#L159">共享库中的通用 HTTP 客户端配置&lt;/a> ########
&lt;strong>basic_auth: &lt;!-- raw HTML omitted -->&lt;/strong> # 配置 HTTP 的基础认证信息。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>username: &lt;!-- raw HTML omitted -->&lt;/strong> #&lt;/li>
&lt;li>&lt;strong>password: &lt;!-- raw HTML omitted -->&lt;/strong> #&lt;/li>
&lt;li>&lt;strong>password_file: &lt;!-- raw HTML omitted -->&lt;/strong> #&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>bearer_token: &lt;!-- raw HTML omitted -->&lt;/strong> # 探测目标时要使用的 bearer 令牌
&lt;strong>bearer_token_file: &lt;!-- raw HTML omitted -->&lt;/strong> # 探测目标时要使用的 bearer 令牌文件
&lt;strong>oauth2: &lt;!-- raw HTML omitted -->&lt;/strong> # 配置 OAuth 2.0 的认证配置。与 basic_auth 和 authorization 两个字段互斥
&lt;strong>proxy_url: &lt;!-- raw HTML omitted -->&lt;/strong> # HTTP proxy server to use to connect to the targets.
&lt;strong>tls_config: &lt;!-- raw HTML omitted -->&lt;/strong> # 发起 HTTP 请求时的 TLS 配置，即发起 HTTPS 请求。
详见 &lt;a href="#b9c06c74">tls 配置段&lt;/a>
######## Prometheus &lt;a href="https://github.com/prometheus/common/blob/v0.30.0/config/http_config.go#L159">共享库中的通用 HTTP 客户端配置&lt;/a>结束 ########&lt;/p>
&lt;p>&lt;strong>preferred_ip_protocol: &lt;!-- raw HTML omitted -->&lt;/strong> # 探针首选的 IP 协议版本。&lt;code>默认值：ip6&lt;/code>
&lt;strong>ip_protocol_fallback: &lt;!-- raw HTML omitted -->&lt;/strong> # 。&lt;code>默认值：true&lt;/code>
&lt;strong>body: &lt;!-- raw HTML omitted -->&lt;/strong> # 探测时要携带的 HTTP Body&lt;/p>
&lt;h2 id="tcp-协议探针">tcp 协议探针&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># The IP protocol of the TCP probe (ip4, ip6).&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[ preferred_ip_protocol&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;string&amp;gt; | default = &amp;#34;ip6&amp;#34; ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[ ip_protocol_fallback&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;boolean | default = true&amp;gt; ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># The source IP address.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[ source_ip_address&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;string&amp;gt; ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># The query sent in the TCP probe and the expected associated response.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># starttls upgrades TCP connection to TLS.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">query_response&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[ - [ [ expect&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;string&amp;gt; ],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[ send&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;string&amp;gt; ],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[ starttls&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;boolean | default = false&amp;gt; ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ], &lt;span style="color:#ae81ff">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Whether or not TLS is used when the connection is initiated.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[ tls&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;boolean | default = false&amp;gt; ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Configuration for TLS protocol of TCP probe.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">tls_config&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [ &lt;span style="color:#ae81ff">&amp;lt;tls_config&amp;gt; ]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="dns-协议探针">dns 协议探针&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># The IP protocol of the DNS probe (ip4, ip6).&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[ preferred_ip_protocol&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;string&amp;gt; | default = &amp;#34;ip6&amp;#34; ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[ ip_protocol_fallback&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;boolean | default = true&amp;gt; ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># The source IP address.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[ source_ip_address&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;string&amp;gt; ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[ transport_protocol&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;string&amp;gt; | default = &amp;#34;udp&amp;#34; ]&lt;/span> &lt;span style="color:#75715e"># udp, tcp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Whether to use DNS over TLS. This only works with TCP.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[ dns_over_tls&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;boolean | default = false&amp;gt; ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Configuration for TLS protocol of DNS over TLS probe.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">tls_config&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [ &lt;span style="color:#ae81ff">&amp;lt;tls_config&amp;gt; ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">query_name&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;string&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[ query_type&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;string&amp;gt; | default = &amp;#34;ANY&amp;#34; ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[ query_class&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;string&amp;gt; | default = &amp;#34;IN&amp;#34; ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># List of valid response codes.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">valid_rcodes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [ - &lt;span style="color:#ae81ff">&amp;lt;string&amp;gt; ... | default = &amp;#34;NOERROR&amp;#34; ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">validate_answer_rrs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">fail_if_matches_regexp&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [ - &lt;span style="color:#ae81ff">&amp;lt;regex&amp;gt;, ... ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">fail_if_all_match_regexp&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [ - &lt;span style="color:#ae81ff">&amp;lt;regex&amp;gt;, ... ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">fail_if_not_matches_regexp&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [ - &lt;span style="color:#ae81ff">&amp;lt;regex&amp;gt;, ... ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">fail_if_none_matches_regexp&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [ - &lt;span style="color:#ae81ff">&amp;lt;regex&amp;gt;, ... ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">validate_authority_rrs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">fail_if_matches_regexp&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [ - &lt;span style="color:#ae81ff">&amp;lt;regex&amp;gt;, ... ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">fail_if_all_match_regexp&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [ - &lt;span style="color:#ae81ff">&amp;lt;regex&amp;gt;, ... ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">fail_if_not_matches_regexp&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [ - &lt;span style="color:#ae81ff">&amp;lt;regex&amp;gt;, ... ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">fail_if_none_matches_regexp&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [ - &lt;span style="color:#ae81ff">&amp;lt;regex&amp;gt;, ... ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">validate_additional_rrs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">fail_if_matches_regexp&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [ - &lt;span style="color:#ae81ff">&amp;lt;regex&amp;gt;, ... ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">fail_if_all_match_regexp&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [ - &lt;span style="color:#ae81ff">&amp;lt;regex&amp;gt;, ... ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">fail_if_not_matches_regexp&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [ - &lt;span style="color:#ae81ff">&amp;lt;regex&amp;gt;, ... ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">fail_if_none_matches_regexp&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [ - &lt;span style="color:#ae81ff">&amp;lt;regex&amp;gt;, ... ]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="icmp-协议探针">icmp 协议探针&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># The IP protocol of the ICMP probe (ip4, ip6).&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[ preferred_ip_protocol&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;string&amp;gt; | default = &amp;#34;ip6&amp;#34; ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[ ip_protocol_fallback&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;boolean | default = true&amp;gt; ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># The source IP address.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[ source_ip_address&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;string&amp;gt; ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Set the DF-bit in the IP-header. Only works with ip4, on *nix systems and&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># requires raw sockets (i.e. root or CAP_NET_RAW on Linux).&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[ dont_fragment&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;boolean&amp;gt; | default = false ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># The size of the payload.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[ payload_size&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;int&amp;gt; ]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="通用配置">通用配置&lt;/h2>
&lt;h2 id="tls-配置段">tls 配置段&lt;/h2>
&lt;p>可以为多种协议的探针配置，用来配置安全相关信息。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 禁用目标证书认证。默认值：false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">insecure_skip_verify&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;BOOLEAN&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># The CA cert to use for the targets.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[ ca_file&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;filename&amp;gt; ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># The client cert file for the targets.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[ cert_file&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;filename&amp;gt; ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># The client key file for the targets.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[ key_file&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;filename&amp;gt; ]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Used to verify the hostname for the targets.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[ server_name&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;string&amp;gt; ]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="配置示例">配置示例&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">modules&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">http_2xx&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">prober&lt;/span>: &lt;span style="color:#ae81ff">http&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">http&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># valid_http_versions: [&amp;#34;HTTP/1.1&amp;#34;, &amp;#34;HTTP/2&amp;#34;]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># valid_status_codes: [200]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">method&lt;/span>: &lt;span style="color:#ae81ff">GET&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">preferred_ip_protocol&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;ip4&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">tls_config&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">insecure_skip_verify&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">http_post_2xx&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">prober&lt;/span>: &lt;span style="color:#ae81ff">http&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">timeout&lt;/span>: &lt;span style="color:#ae81ff">10s&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">http&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">valid_http_versions&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;HTTP/1.1&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;HTTP/2&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">method&lt;/span>: &lt;span style="color:#ae81ff">POST&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">preferred_ip_protocol&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;ip4&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">tls_config&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">insecure_skip_verify&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">tcp_connect&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">prober&lt;/span>: &lt;span style="color:#ae81ff">tcp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">timeout&lt;/span>: &lt;span style="color:#ae81ff">10s&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">dns&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">prober&lt;/span>: &lt;span style="color:#ae81ff">dns&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">dns&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">transport_protocol&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;tcp&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">preferred_ip_protocol&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;ip4&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">query_name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;kubernetes.default.svc.cluster.local&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">icmp&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">prober&lt;/span>: &lt;span style="color:#ae81ff">icmp&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Instrumenting</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/instrumenting/instrumenting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/instrumenting/instrumenting/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://prometheus.io/docs/instrumenting/exporters/">官方文档,Instrumenting-Exporter&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://prometheus.io/docs/practices/instrumentation/">官方文档,最佳实践-Instrumentation&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Prometheus 可以通过 3 种方式从目标上 Scrape(抓取) 指标：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Instrumentation(检测仪)&lt;/strong> # 内部代码。将 Prometheus 的 Client Libraries(客户端库) 添加到程序代码中，以此暴露一个 endpoint，Prometheus Server 可以通过该 Endpoiint 抓取到指标。
&lt;ol>
&lt;li>可以理解为内嵌的 Exporter，比如 Prometheus Server 的 9090 端口的 &lt;code>/metrics&lt;/code> 就属于此类。&lt;/li>
&lt;li>说白了，就是被监控目标自己就可以吐出符合 Prometheus 格式的指标数据&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>**Exporters **# 外部程序。&lt;/li>
&lt;li>&lt;strong>Pushgateway&lt;/strong> # 针对需要推送指标的应用&lt;/li>
&lt;/ol>
&lt;h1 id="instrumentation">Instrumentation&lt;/h1>
&lt;h1 id="exporter">Exporter&lt;/h1>
&lt;p>在&lt;a href="https://github.com/prometheus/prometheus/wiki/Default-port-allocations">这里&lt;/a>可以看到经过 Prometheus 官方注册的各类 Exporter 所默认使用的端口号。&lt;/p>
&lt;h1 id="push-gateway">Push Gateway&lt;/h1></description></item><item><title>Docs: Node Exporter</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/instrumenting/node-exporter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/instrumenting/node-exporter/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/prometheus/node_exporter">GitHub 项目&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>node_exporter 用于收集服务器的 metrics，比如内存、cpu、磁盘、I/O、电源等&lt;/p>
&lt;p>node_exporter 默认监听在 9100 端口上。&lt;/p>
&lt;p>Prometheus Server 抓取 metrics 的位置 http://IP:9100/metrics # 获取 node_exporter 所在主机的 metrics 信息&lt;/p>
&lt;h1 id="node-exporter-部署">Node Exporter 部署&lt;/h1>
&lt;h2 id="二进制文件安装-node_exporter">二进制文件安装 node_exporter&lt;/h2>
&lt;p>为监控服务器 CPU、内存、磁盘、I/O 等信息，首先需要安装 node_exporter。node_exporter 的作用是服务器数据收集。&lt;/p>
&lt;ul>
&lt;li>下载 node_exporter，过程基本与使用 prometheus 程序一样。&lt;a href="https://github.com/prometheus/node_exporter/releases">下载页面在此&lt;/a>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>wget https://github.com/prometheus/node_exporter/releases/download/v1.1.2/node_exporter-1.1.2.linux-amd64.tar.gz
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 解压&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mkdir -p /usr/local/prometheus/node_exporter
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tar -zxvf node_exporter-1.1.2.linux-amd64.tar.gz -C /usr/local/prometheus/node_exporter --strip-components&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>创建 node_exporter 的 systemd 服务&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>cat &amp;gt; /usr/lib/systemd/system/node-exporter.service &lt;span style="color:#e6db74">&amp;lt;&amp;lt; EOF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">[Unit]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">Description=node_exporter
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">After=network.target
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">[Service]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">Type=simple
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">User=root
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">ExecStart=/usr/local/prometheus/node_exporter/node_exporter \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --collector.filesystem.ignored-mount-points=&amp;#39;^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/pods/.+)($|/)&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">Restart=on-failure
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">[Install]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">WantedBy=multi-user.target
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>启动 node_exporter 服务，该服务会默认监听在 9100 端口上，等待 prometheus 主程序来抓取监控数据&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>systemctl enable node-exporter --now
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意事项：&lt;/p>
&lt;ul>
&lt;li>报错 &lt;code>acpi: no handler for region [powr]&lt;/code>，需要添加参数&amp;ndash;no-collector.hwmon，原因应该是与 dell 的硬件信息采集程序冲突&lt;/li>
&lt;/ul>
&lt;h2 id="容器安装-node_exporter">容器安装 node_exporter&lt;/h2>
&lt;p>&lt;a href="https://github.com/prometheus/node_exporter#using-docker">https://github.com/prometheus/node_exporter#using-docker&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>nerdctl run -d --name node-exporter --restart&lt;span style="color:#f92672">=&lt;/span>always &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --net&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;host&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --pid&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;host&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -v &lt;span style="color:#e6db74">&amp;#34;/:/host:ro,rslave&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> prom/node-exporter &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --web.listen-address&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;:9100&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --path.rootfs&lt;span style="color:#f92672">=&lt;/span>/host &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --no-collector.hwmon &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --no-collector.wifi &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --collector.filesystem.ignored-mount-points&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/pods/.+)($|/)&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="node_exporter-可采集的数据种类">node_exporter 可采集的数据种类&lt;/h1>
&lt;p>&lt;a href="https://github.com/prometheus/node_exporter#enabled-by-default">该链接&lt;/a>有 node_exporter 默认采集的数据，name 就是要采集的数据名称
&lt;a href="https://github.com/prometheus/node_exporter#disabled-by-default">该链接&lt;/a>有 node_exporter 默认不采集的数据&lt;/p>
&lt;p>如果想要让 node_exporter 采集或者不采集某些数据，可以在启动 node_exporter 程序时，向该程序传递参数。参数中的 NAME 为上面两个连接中，表格中的 name 列&lt;/p>
&lt;ul>
&lt;li>--collector.&lt;!-- raw HTML omitted --> #标志来启用收集器。&lt;/li>
&lt;li>--no-collector.&lt;!-- raw HTML omitted --> # 标志来禁用。&lt;/li>
&lt;/ul>
&lt;h1 id="textfile-collector-文本文件采集器">Textfile Collector 文本文件采集器&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>官方文档：&lt;a href="https://github.com/prometheus/node_exporter#textfile-collector">https://github.com/prometheus/node_exporter#textfile-collector&lt;/a>&lt;/li>
&lt;li>脚本样例：&lt;a href="https://github.com/prometheus-community/node-exporter-textfile-collector-scripts">https://github.com/prometheus-community/node-exporter-textfile-collector-scripts&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/X73XRrhU_lYMvkJvF1z2uw">公众号,k8s 技术圈-使用 Node Exporter 自定义监控指标&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>文本采集器逻辑：&lt;/p>
&lt;ol>
&lt;li>在启动 node_exporter 的时候，使用 &amp;ndash;collector.textfile.directory=/PATH/TO/DIR 参数。&lt;/li>
&lt;li>我们可以将自己收集的数据按照 prometheus 文本格式类型的 metrics 存储到到指定目下的 *.prom 文件中
&lt;ol>
&lt;li>文本格式的 metrics 详见 2.1.Prometehus 时间序列数据介绍.note 文章末尾&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>每当 prometheus server 到 node_exporter 拉取数据时，node_exporter 会自动解析所有指定目录下的 *.prom 文件并提供给 prometheus&lt;/li>
&lt;/ol>
&lt;p>Note：&lt;/p>
&lt;ol>
&lt;li>采集到的数据没有时间戳&lt;/li>
&lt;li>必须使用后缀为 .prom 作为文件的名称&lt;/li>
&lt;li>文件中的格式必须符合 prometheus 文本格式的 metrics，否则无法识别会报错。文本格式样例详见：2.1.Prometehus 时间序列数据介绍.note&lt;/li>
&lt;li>若用 docker 启动的 node_exporter，则还需要使用 -v 参数，将 textfile 文件所在目录挂载进容器中。&lt;/li>
&lt;/ol>
&lt;h1 id="为-node-exporter-添加认证">为 Node Exporter 添加认证&lt;/h1>
&lt;p>注意：该功能为实验性的，笔记时间：2021 年 8 月 4 日
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/ck9bpv/1628068010926-2ae85ce6-13be-4dd3-8ed1-74538c5cf3da.png" alt="image.png">
与 Prometheus 添加认证的方式一样，详见：
[Authentication(认证)](/docs/IT学习笔记/6.可观测性/监控系统/Prometheus/HTTPS%20 和%20Authentication(认证).md 和 Authentication(认证).md)
node-exporter 程序使用 &lt;code>--web.config&lt;/code> 命令行标志来指定 web-config 文件，读取其中内容并开启 TLS 或 认证功能。&lt;/p></description></item><item><title>Docs: Other Exporter</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/instrumenting/other-exporter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/instrumenting/other-exporter/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;p>官方推荐的一些第三方 exporter：&lt;a href="https://prometheus.io/docs/instrumenting/exporters/">https://prometheus.io/docs/instrumenting/exporters/&lt;/a>&lt;/p>
&lt;h1 id="kubernetes-event-exporter">Kubernetes Event Exporter&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/opsgenie/kubernetes-event-exporter">GitHub 项目，opsgenie/kubernetes-event-exporter&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>将 Kubernetes 中 Event 资源的内容导出到多个目的地&lt;/p>
&lt;h1 id="nginx-exporter">Nginx Exporter&lt;/h1>
&lt;p>参考：&lt;a href="https://github.com/nginxinc/nginx-prometheus-exporter">GitHub 项目&lt;/a>&lt;/p>
&lt;p>端口默认 9113，Grafana 面板 ID：&lt;a href="https://raw.githubusercontent.com/nginxinc/nginx-prometheus-exporter/master/grafana/dashboard.json">GitHub&lt;/a>&lt;/p>
&lt;pre>&lt;code>docker run -d --name nginx-exporter\
--network host \
nginx/nginx-prometheus-exporter:0.8.0 \
-nginx.scrape-uri http://localhost:9123/metrics
&lt;/code>&lt;/pre>
&lt;h1 id="mysql-exporter">MySQL Exporter&lt;/h1>
&lt;p>参考：&lt;a href="https://github.com/prometheus/mysqld_exporter">GitHub 项目&lt;/a>
端口默认 9104，Grafana 面板 ID：7362&lt;/p>
&lt;pre>&lt;code>docker run -d --name mysql-exporter \
--network host \
-e DATA_SOURCE_NAME=&amp;quot;root:oc@2020@(localhost:3306)/&amp;quot; \
prom/mysqld-exporter
&lt;/code>&lt;/pre>
&lt;h1 id="redis-exporter">Redis Exporter&lt;/h1>
&lt;p>参考：&lt;a href="https://github.com/oliver006/redis_exporter">GitHub 项目&lt;/a>
端口默认 9121，Grafana 面板 ID：11835&lt;/p>
&lt;pre>&lt;code>docker run -d --name redis-exporter \
--network host \
oliver006/redis_exporter \
--redis.password='DesistDaydream' \
--redis.addr='redis://127.0.0.1:6379'
&lt;/code>&lt;/pre>
&lt;h1 id="dell-omsa-的-exporter">DELL OMSA 的 Exporter&lt;/h1>
&lt;p>项目地址：&lt;a href="https://github.com/galexrt/dellhw_exporter">https://github.com/galexrt/dellhw_exporter&lt;/a>&lt;/p>
&lt;p>运行方式：docker run -d &amp;ndash;name dellhw_exporter &amp;ndash;privileged -p 9137:9137 galexrt/dellhw_exporter&lt;/p>
&lt;p>如果 container 无法启动，一般都是因为 OMSA 的资源指标采集服务未安装导致。&lt;/p>
&lt;p>该 Exporter 会读取 OMSA 的 SNMP 信息转换成 Metrics 并在 9137 端口输出&lt;/p>
&lt;h1 id="ipmi-exporter">IPMI Exporter&lt;/h1>
&lt;p>项目地址：&lt;a href="https://github.com/prometheus-community/ipmi_exporter">https://github.com/prometheus-community/ipmi_exporter&lt;/a>
依赖于 FreeIPMI 套件中的工具来实现&lt;/p>
&lt;h1 id="haproxy-的-exporter">HAProxy 的 Exporter&lt;/h1>
&lt;p>项目地址：&lt;a href="https://github.com/prometheus/haproxy_exporter">https://github.com/prometheus/haproxy_exporter&lt;/a>&lt;/p></description></item><item><title>Docs: Push Gateway</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/instrumenting/push-gateway/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/instrumenting/push-gateway/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/prometheus/pushgateway">GitHub 项目&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://prometheus.io/docs/practices/pushing/#when-to-use-the-pushgateway">官方文档,最佳实践-合时使用 Pushgateway&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Pushgateway 是 Prometheus 生态中一个重要工具，使用它的原因主要是：&lt;/p>
&lt;ul>
&lt;li>Prometheus 采用 pull 模式，可能由于不在一个子网或者防火墙原因，导致 Prometheus 无法直接拉取各个 target 数据。&lt;/li>
&lt;li>在监控业务数据的时候，需要将不同数据汇总, 由 Prometheus 统一收集。&lt;/li>
&lt;/ul>
&lt;p>由于以上原因，不得不使用 pushgateway，但在使用之前，有必要了解一下它的一些弊端：&lt;/p>
&lt;ul>
&lt;li>将多个节点数据汇总到 pushgateway, 如果 pushgateway 挂了，受影响比多个 target 大。&lt;/li>
&lt;li>Prometheus 拉取状态 up 只针对 pushgateway, 无法做到对每个节点有效。&lt;/li>
&lt;li>Pushgateway 可以持久化推送给它的所有监控数据。&lt;/li>
&lt;/ul>
&lt;p>因此，即使你的监控已经下线，prometheus 还会拉取到旧的监控数据，需要手动清理 pushgateway 不要的数据。&lt;/p>
&lt;p>Note：
pushgateway 无法主动获取获取目标 metrics。目标需要通过脚本、daemon 程序、手动(e.g.通过 curl 获取 metrics 再发送给 pushgateway)等等方式，主动推送自己的 metrics 到 pushgateway 上。&lt;/p>
&lt;h1 id="pushgateway-部署">PushGateway 部署&lt;/h1>
&lt;pre>&lt;code>docker run -d -p 9091:9091 prom/pushgateway
&lt;/code>&lt;/pre>
&lt;p>在 Prometheus Server 的配置文件中加入配置以便让 Prometheus Server 获取 pushgateway 中的 metrics&lt;/p>
&lt;pre>&lt;code>- job_name: 'push_node'
static_configs:
- targets: ['10.10.100.110:9091']
labels:
env: 'pushgateway'
honor_labels: true
&lt;/code>&lt;/pre>
&lt;h1 id="pushgateway-的使用方式">PushGateway 的使用方式&lt;/h1>
&lt;p>METRICS | curl &amp;ndash;data-binary @- http://IP:PORT/metrics/job/JobName/TableName1/TableValue1/&amp;hellip;./TableNameN/TableValueN&lt;/p>
&lt;p>通过该命令来将 METRICS 中的内容推送到 PushGateway 中，其中 IP:PORT 就是 PushGateway 所在设备的 IP 及其监听的端口&lt;/p>
&lt;p>METRICS #想要推送给 PushGateway 的 metrics 信息。可以通过 curl 来获取指定对象的 metrics，也可以从文件中读取 metcis 格式的内容，等等。&lt;/p>
&lt;p>IP:PORT #PushGateway 程序所在设备的 IP，及 PushGateway 监听的端口&lt;/p>
&lt;p>JobName #指定本次推送 metrics 的 job 名称。&lt;/p>
&lt;p>TableXXX #JobName 后面的内容可以作为标签，附加在每个指标上&lt;/p>
&lt;p>每当使用该命令给 PushGateway 推送信息后，Prometheus 就会从 PushGateway 中获取该数据并存储在本地。&lt;/p>
&lt;h1 id="推送数据示例">推送数据示例：&lt;/h1>
&lt;p>curl &lt;a href="http://10.10.100.205:9137/metrics">http://10.10.100.205:9137/metrics&lt;/a> | curl &amp;ndash;data-binary @- &lt;a href="http://10.10.100.110:9091/metrics/job/get_vs_state/vs_info/dev_phone_vs">http://10.10.100.110:9091/metrics/job/get_vs_state/vs_info/dev_phone_vs&lt;/a>&lt;/p>
&lt;p>获取 10.10.100.205 设备上的样本，并推送给 PushGateway 。本次推送的 job 名为 get_vs_state。为每个样本中 metrics 添加标签 vs_info=&amp;ldquo;dev_phone_vs&amp;rdquo;。下图为本次推送示例图。&lt;/p>
&lt;p>示例中，job=get_vs_state 在 Prometheus 中，标签变为 exported_job=get_vs_state。vs_info=&amp;ldquo;dev_phone_vs&amp;quot;则原封不动附加到每个指标的标签后面。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/wvhciw/1616069386870-f7a4bef3-7a2a-4a3f-9b22-76a0e1010f52.jpeg" alt="">&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/wvhciw/1616069386943-043d33a2-dc2a-416b-af2e-75310c7d13d2.jpeg" alt="">&lt;/p></description></item><item><title>Docs: SNMP Exporter</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/instrumenting/snmp-exporter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/instrumenting/snmp-exporter/</guid><description/></item></channel></rss>