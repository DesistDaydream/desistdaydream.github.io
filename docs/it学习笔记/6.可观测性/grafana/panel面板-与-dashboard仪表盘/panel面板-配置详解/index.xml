<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – Panel(面板) 配置详解</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/grafana/panel%E9%9D%A2%E6%9D%BF-%E4%B8%8E-dashboard%E4%BB%AA%E8%A1%A8%E7%9B%98/panel%E9%9D%A2%E6%9D%BF-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</link><description>Recent content in Panel(面板) 配置详解 on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/grafana/panel%E9%9D%A2%E6%9D%BF-%E4%B8%8E-dashboard%E4%BB%AA%E8%A1%A8%E7%9B%98/panel%E9%9D%A2%E6%9D%BF-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Query(查询)</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/grafana/panel%E9%9D%A2%E6%9D%BF-%E4%B8%8E-dashboard%E4%BB%AA%E8%A1%A8%E7%9B%98/panel%E9%9D%A2%E6%9D%BF-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/query%E6%9F%A5%E8%AF%A2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/grafana/panel%E9%9D%A2%E6%9D%BF-%E4%B8%8E-dashboard%E4%BB%AA%E8%A1%A8%E7%9B%98/panel%E9%9D%A2%E6%9D%BF-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/query%E6%9F%A5%E8%AF%A2/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://grafana.com/docs/grafana/latest/panels/queries">官方文档,面板-查询&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Query 标签由如下几个元素组成&lt;/p>
&lt;ul>
&lt;li>Data source selector(数据源选择器)&lt;/li>
&lt;li>Query options(查询选项)&lt;/li>
&lt;li>Query inspector button()&lt;/li>
&lt;li>Query editor list&lt;/li>
&lt;li>Expressions&lt;/li>
&lt;/ul>
&lt;h1 id="data-source数据源--数据源选择器">Data source(数据源) # 数据源选择器&lt;/h1>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/yvp51u/1636275083307-1fa893ed-814b-434d-9e51-e2c6499c6f45.png" alt="image.png">
这部分是一个下拉列表，通过这里选择要使用的数据源，Query editor 中的查询语句，必须要是此数据源可以可以识别的。&lt;/p>
&lt;h1 id="query-options查询选项">Query options(查询选项)&lt;/h1>
&lt;h2 id="max-data-points最大数据点">Max data points(最大数据点)&lt;/h2>
&lt;h2 id="min-interval最小间隔">Min interval(最小间隔)&lt;/h2>
&lt;h2 id="interval间隔">Interval(间隔)&lt;/h2>
&lt;p>Interval 是一个，通过时间来聚合或分组的一些数据点时，使用的 &lt;strong>time span(时间跨度)&lt;/strong>。该选项也可以实现查询编辑器中的 Min step 和 Resolution 类似的效果。但是，更多的是用在 Prometheus 范围向量查询语句中，比如 &lt;code>rate(http_requests_total[$__interval])&lt;/code>。interval 选项可以为两个 Grafana 的内置变量提供值，&lt;code>$__interval&lt;/code> 与 &lt;code>$__interval_ms&lt;/code>。&lt;/p>
&lt;p>也就是说，Interval 常用来计算 总和、平均值、速率 等一段时间范围的变化量。&lt;/p>
&lt;p>除了在这里可以定义 Interval，还可以通过 [Grafana 的模板与变量](/docs/IT学习笔记/6.可观测性/Grafana/Panel(面板)%20 与%20Dashboard(仪表盘)/Panel(面板)%20 配置详解/Templates%20and%20Variables(模板与变量).md and Variables(模板与变量).md)定义。&lt;/p>
&lt;h2 id="relative-time相对时间">Relative time(相对时间)&lt;/h2>
&lt;h2 id="time-shift时移">Time shift(时移)&lt;/h2>
&lt;h1 id="query-inspector查询检查器">Query inspector(查询检查器)&lt;/h1>
&lt;p>用于调试查询编辑器中的查询语句，里面会显示 HTTP 的请求和响应的原始数据&lt;/p>
&lt;h1 id="query-editor查询编辑器">Query editor(查询编辑器)&lt;/h1>
&lt;p>查询编辑器可以编写查询语句，以便从数据源中获取数据，不同的数据源，其查询编辑器也各不相同。&lt;/p>
&lt;h3 id="legend图例--改变-series-的名称">Legend(图例) # 改变 series 的名称。&lt;/h3>
&lt;p>Legend 可以通过一种模式来改变 series 的名称。这个模式类似于 Go 模板的语法，使用 &lt;code>{{ }}&lt;/code> 符号，引用 series 名称中，标签的值。
例如，上图我在 Legend 框内填 &lt;code>设备：{{instance}}&lt;/code> 那么，将会出现这种效果。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/yvp51u/1636266519763-257b682f-43aa-42aa-ae64-4dc0dd9df523.png" alt="image.png">&lt;/p>
&lt;blockquote>
&lt;p>这里的&lt;code>{{instance}}&lt;/code> 符号会获取 instance 这个标签的值&lt;/p>
&lt;/blockquote>
&lt;h3 id="min-step-最小步长">Min step# 最小步长。&lt;/h3>
&lt;p>可以控制 Prometheus 查询数据时的最小步长(Step)，从而减少或增加从 Prometheus 返回的数据量。&lt;/p>
&lt;ul>
&lt;li>步长指起始时间与结束时间之间获取的所有数据的间隔时间。假如 step=10 则每隔 10 秒获取一次样本值。
&lt;ul>
&lt;li>就好像人走路，一步迈多长，这里就是返回样本值时，每隔多久返回一次。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>比如，我想要查询 14 点到 15 点之间的数据，假如 Min step 为 1m，则一共返回 60 个样本。假如 Min step 为 30m，则一共返回 2 个样本，效果如下&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/yvp51u/1636273461647-2dbebd5e-b5ca-47d8-a23e-07d4e0d72ebe.png" alt="image.png">
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/yvp51u/1636273507618-65072c3a-f3bd-46c9-aa79-979c6bf388b8.png" alt="image.png">&lt;/p>
&lt;h3 id="resolution--分辨率">Resolution # 分辨率。&lt;/h3>
&lt;p>则可以控制 Grafana 自身渲染的数据量。例如，如果&lt;strong>Resolution&lt;/strong>的值为&lt;strong>1/10&lt;/strong>，Grafana 会将 Prometeus 返回的 10 个样本数据合并成一个点。因此 **Resolution **越小可视化的精确性越高，反之，可视化的精度越低。&lt;/p>
&lt;h3 id="format--格式化获取到的样本数据">Format # 格式化获取到的样本数据&lt;/h3>
&lt;ul>
&lt;li>Time series # 时间序列格式。默认格式&lt;/li>
&lt;li>Table # 表格式。用于 Table 面板&lt;/li>
&lt;li>Heatmap # 热力图格式。用于 Heatmap 面板&lt;/li>
&lt;/ul>
&lt;h3 id="instant--瞬时控制是否获取指标的瞬时值">Instant # 瞬时。控制是否获取指标的瞬时值&lt;/h3>
&lt;p>开启后，只会显示最近一次的序列的值。常用于 Stat、Gauge 这种面板，以及 Graph 面板下 Series 模式的 X 轴。&lt;/p>
&lt;p>因为开启瞬时值，只会显示当前值，是没有时间的概念的。&lt;/p></description></item><item><title>Docs: Templates and Variables(模板与变量)</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/grafana/panel%E9%9D%A2%E6%9D%BF-%E4%B8%8E-dashboard%E4%BB%AA%E8%A1%A8%E7%9B%98/panel%E9%9D%A2%E6%9D%BF-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/templates-and-variables%E6%A8%A1%E6%9D%BF%E4%B8%8E%E5%8F%98%E9%87%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/grafana/panel%E9%9D%A2%E6%9D%BF-%E4%B8%8E-dashboard%E4%BB%AA%E8%A1%A8%E7%9B%98/panel%E9%9D%A2%E6%9D%BF-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/templates-and-variables%E6%A8%A1%E6%9D%BF%E4%B8%8E%E5%8F%98%E9%87%8F/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://grafana.com/docs/grafana/latest/variables/">官方文档,模板与变量&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://yunlzheng.gitbook.io/prometheus-book/part-ii-prometheus-jin-jie/grafana/templating">Prometheus 天降奇兵文章&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>在前面的小节中介绍了 Grafana 中 4 中常用的可视化面板的使用，通过在面板中使用 PromQL 表达式，Grafana 能够方便的将 Prometheus 返回的数据进行可视化展示。例如，在展示主机 CPU 使用率时，我们使用了如下表达式：&lt;/p>
&lt;pre>&lt;code>1 - (avg(irate(node_cpu{mode='idle'}[5m])) without (cpu))
&lt;/code>&lt;/pre>
&lt;p>该表达式会返回当前 Promthues 中存储的所有时间序列，每一台主机都会有一条单独的曲线用于体现其 CPU 使用率的变化情况：
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/kct3zl/1616067851128-b841ca2a-6a47-4d36-a92c-1b1b28f4000d.png" alt="">&lt;/p>
&lt;p>而当用户只想关注其中某些主机时，基于当前我们已经学习到的知识只有两种方式，要么每次手动修改 Panel 中的 PromQL 表达式，要么直接为这些主机创建单独的 Panel。但是无论如何，这些硬编码方式都会直接导致 Dashboard 配置的频繁修改。在这一小节中我们将学习使用 Dashboard 变量的方式解决以上问题。&lt;/p>
&lt;h1 id="变量">变量&lt;/h1>
&lt;p>在 Grafana 中用户可以为 Dashboard 定义一组变量（Variables），变量一般包含一个到多个可选值。如下所示，Grafana 通过将变量渲染为一个下拉框选项，从而使用户可以动态的改变变量的值：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/kct3zl/1616067851360-808effbf-a69f-4123-86d3-1a90d373fa18.png" alt="">&lt;/p>
&lt;p>Dashboard 变量&lt;/p>
&lt;p>例如，这里定义了一个名为 node 的变量，用户可以通过在 PromQL 表达式或者 Panel 的标题中通过以下形式使用该变量：&lt;/p>
&lt;pre>&lt;code>1 - (avg(irate(node_cpu{mode='idle', instance=~&amp;quot;$node&amp;quot;}[5m])) without (cpu))
&lt;/code>&lt;/pre>
&lt;p>变量的值可以支持单选或者多选，当对接 Prometheus 时，Grafana 会自动将$node 的值格式化为如“&lt;strong>host1|host2|host3&lt;/strong>”的形式。配合使用 PromQL 的标签正则匹配“&lt;strong>=~&lt;/strong>”，通过动态改变 PromQL 从而实现基于标签快速对时间序列进行过滤。&lt;/p>
&lt;h1 id="变量定义">变量定义&lt;/h1>
&lt;p>通过 Dashboard 页面的 Settings 选项，可以进入 Dashboard 的配置页面并且选择 Variables 子菜单:
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/kct3zl/1616067851069-bf8ea850-c067-42af-b078-7fa1bbd154e9.png" alt="">
为 Dashboard 添加变量&lt;/p>
&lt;p>用户需要指定变量的名称，后续用户就可以通过$variable_name 的形式引用该变量。Grafana 目前支持 6 种不同的变量类型，而能和 Prometheus 一起工作的主要包含以下 5 种类型：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>类型&lt;/td>
&lt;td>工作方式&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Query&lt;/td>
&lt;td>允许用户通过 Datasource 查询表达式的返回值动态生成变量的可选值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Interval&lt;/td>
&lt;td>该变量代表时间跨度，通过 Interval 类型的变量，可以动态改变 PromQL 区间向量表达式中的时间范围。如 rate(node_cpu[$interval])&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Datasource&lt;/td>
&lt;td>允许用户动态切换当前 Dashboard 的数据源，特别适用于同一个 Dashboard 展示多个数据源数据的情况&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Custom&lt;/td>
&lt;td>用户直接通过手动的方式，定义变量的可选值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Constant&lt;/td>
&lt;td>常量，在导入 Dashboard 时，会要求用户设置该常量的值&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Label 属性用于指定界面中变量的显示名称，Hide 属性则用于指定在渲染界面时是否隐藏该变量的下拉框。&lt;/p>
&lt;h1 id="使用变量过滤时间序列">使用变量过滤时间序列&lt;/h1>
&lt;p>当 Prometheus 同时采集了多个主机节点的监控样本数据时，用户希望能够手动选择并查看其中特定主机的监控数据。这时我们需要使用 Query 类型的变量。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/kct3zl/1616067851059-59709ed9-d567-4859-89ae-6344f4bf1f92.png" alt="">&lt;/p>
&lt;p>新建 Query 类型的变量&lt;/p>
&lt;p>如上所示，这里我们为 Dashboard 创建了一个名为 node 的变量，并且指定其类型为 Query。Query 类型的变量，允许用户指定数据源以及查询表达式，并通过正则匹配（Regex）的方式对查询结果进行处理，从而动态生成变量的可选值。在这里指定了数据源为 Prometheus，通过使用 node_load1 我们得到了两条时间序列：&lt;/p>
&lt;pre>&lt;code>node_load1{instance=&amp;quot;foo:9100&amp;quot;,job=&amp;quot;node&amp;quot;}
node_load1{instance=&amp;quot;localhost:9100&amp;quot;,job=&amp;quot;node&amp;quot;}
&lt;/code>&lt;/pre>
&lt;p>通过指定正则匹配表达式为&lt;code>/.*instance=&amp;quot;([^&amp;quot;]*).*/&lt;/code>从而匹配出标签 instance 的值作为 node 变量的所有可选项，即：&lt;/p>
&lt;pre>&lt;code>foo:9100
localhost:9100
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>Selection Options&lt;/strong>选项中可以指定该变量的下拉框是否支持多选，以及是否包含全选（All）选项。&lt;/p>
&lt;p>保存变量后，用户可以在 Panel 的 General 或者 Metrics 中通过$node 的方式使用该变量，如下所示：
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/kct3zl/1616067851042-b846b8f9-37c3-48b8-9e4b-127319beb2df.png" alt="">&lt;/p>
&lt;p>在 Metrics 中使用变量&lt;/p>
&lt;p>这里需要注意的是，如果允许用户多选在 PromQL 表达式中应该使用标签的正则匹配模式，因为 Grafana 会自动将多个选项格式化为如“foo:9100|localhost:9100”的形式。&lt;/p>
&lt;p>使用 Query 类型的变量能够根据允许用户能够根据时间序列的特征维度对数据进行过滤。在定义 Query 类型变量时，除了使用 PromQL 查询时间序列以过滤标签的方式以外，Grafana 还提供了几个有用的函数：&lt;/p>
&lt;ul>
&lt;li>label_values(LABEL) # 返回 Promthues 所有监控指标中，标签名为 LABEL 的所有可选值&lt;/li>
&lt;li>label_values(METRIC, LABEL) # 返回监控指标 METRIC 中，标签名为 LABEL 的所有可选值&lt;/li>
&lt;li>metrics(RegEx) # 返回所有满足 RegEx(正则表达式) 匹配到的指标名称&lt;/li>
&lt;li>query_result(PromQL) # 返回 PromQL 的查询结果&lt;/li>
&lt;/ul>
&lt;p>例如，当需要监控 Prometheus 所有采集任务的状态时，可以使用如下方式，获取当前所有采集任务的名称：&lt;/p>
&lt;pre>&lt;code>label_values(up, job)
&lt;/code>&lt;/pre>
&lt;p>例如，有时候我们想要动态修改变量查询结果。比如某一个节点绑定了多个 ip，一个用于内网访问，一个用于外网访问，此时 prometheus 采集到的指标是内网的 ip，但我们需要的是外网 ip。这里我们想要能在 Grafana 中动态改变标签值，进行 ip 段的替换，而避免从 prometheus 或 exporter 中修改采集指标。&lt;/p>
&lt;p>这时需要使用 grafana 的 query_result 函数&lt;/p>
&lt;pre>&lt;code># 将10.10.15.xxx段的ip地址替换为10.20.15.xxx段 注：替换端口同理
query_result(label_replace(kube_pod_info{pod=~&amp;quot;$pod&amp;quot;}, &amp;quot;node&amp;quot;, &amp;quot;10.20.15.$1&amp;quot;, &amp;quot;node&amp;quot;, &amp;quot;10.10.15.(.*)&amp;quot;))
&lt;/code>&lt;/pre>
&lt;!-- raw HTML omitted -->
&lt;pre>&lt;code># 通过正则从返回结果中匹配出所需要的ip地址
regex：/.*node=&amp;quot;(.*?)&amp;quot;.*/
&lt;/code>&lt;/pre>
&lt;p>在 grafana 中配置如图：
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/kct3zl/1616067851071-4ddd8696-d110-474a-8014-49824a3f7119.png" alt="">&lt;/p>
&lt;h1 id="使用变量动态创建-panel-和-row">使用变量动态创建 Panel 和 Row&lt;/h1>
&lt;p>当在一个 Panel 中展示多条时间序列数据时，通过使用变量可以轻松实现对时间序列的过滤，提高用户交互性。除此以外，我们还可以使用变量自动生成 Panel 或者 Row。 如下所示，当需要可视化当前系统中所有采集任务的监控任务运行状态时，由于 Prometheus 的采集任务配置可能随时发生变更，通过硬编码的形式实现，会导致 Dashboard 配置的频繁变更：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/kct3zl/1616067851119-aa1bcd6d-8e23-4cd9-95be-3db2e40ce360.png" alt="">
Prometheus 采集任务状态&lt;/p>
&lt;p>如下所示，这里为 Dashboard 定义了一遍名为 job 的变量：
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/kct3zl/1616067851059-05a9e06b-9215-4768-9126-542c61e9d70f.png" alt="">
使用变量获取当前所有可选任务&lt;/p>
&lt;p>通过使用 label_values 函数，获取到当前 Promthues 监控指标 up 中所有可选的 job 标签的值：&lt;/p>
&lt;pre>&lt;code>label_values(up, job)
&lt;/code>&lt;/pre>
&lt;p>如果变量启用了 Multi-value 或者 Include All Option 选项的变量，那么在 Panel 的 General 选项的 Repeat 中可以选择自动迭代的变量，这里使用了 Singlestat 展示所有监控采集任务的状态：
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/kct3zl/1616067851091-b6fcaadd-b2aa-41c1-957e-039bc878dbc6.png" alt="">
General 中的 Repeat 选项&lt;/p>
&lt;p>Repeat 选项设置完成后，Grafana 会根据当前用户的选择，自动创建一个到多个 Panel 实例。 为了能够使 Singlestat Panel 能够展示正确的数据，如下所示，在 Prometheus 中，我们依然使用了$job变量，不过此时的$job 反应的是当前迭代的值：
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/kct3zl/1616067851115-f60eb991-5dbb-4c33-8cd2-58639c7001c6.png" alt="">
在 Metric 中使用变量&lt;/p>
&lt;p>而如果还希望能够自动生成 Row，只需要在 Row 的设置中，选择需要 Repeat 的变量即可：
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/kct3zl/1616067851130-ac817567-fee3-40c3-b4e1-d5f07f86cf8d.png" alt="">
Repeat Row&lt;/p></description></item><item><title>Docs: Transformations(转换)</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/grafana/panel%E9%9D%A2%E6%9D%BF-%E4%B8%8E-dashboard%E4%BB%AA%E8%A1%A8%E7%9B%98/panel%E9%9D%A2%E6%9D%BF-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/transformations%E8%BD%AC%E6%8D%A2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/grafana/panel%E9%9D%A2%E6%9D%BF-%E4%B8%8E-dashboard%E4%BB%AA%E8%A1%A8%E7%9B%98/panel%E9%9D%A2%E6%9D%BF-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/transformations%E8%BD%AC%E6%8D%A2/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://grafana.com/docs/grafana/latest/panels/transformations/">官方文档,面板-转换&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://grafana.com/docs/grafana/latest/panels/transformations/types-options/">官方文档,面板-转换-转换类型和选项&lt;/a>(这里就是详解了每一种转换类型)&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Transformations(转换)&lt;/strong> 经常用在 Table 面板中，我先以一个 Table 作为基础例子来说明 Transformations 的功能
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gxof32/1616067878482-d907b3a2-1f60-4894-bc9c-75cc6ba232eb.png" alt="">&lt;/p>
&lt;h2 id="转换顺序">转换顺序&lt;/h2>
&lt;p>如果同时存在多个转换, 则从上往下一次执行它们，这就有点像 Linux 中的管道，每一个转换会产生一个新的结果，这个结果将会传递给下一个转换继续进行处理。直到所有转换执行完成，在面板展示最终数据。&lt;/p>
&lt;p>转换顺序的特性可以在这个例子中可以得到充分体现&lt;/p>
&lt;h1 id="add-field-from-calculation">Add field from calculation&lt;/h1>
&lt;p>Use the row values to calculate a new field&lt;/p>
&lt;h1 id="filter-by-name根据字段名称进行过滤">Filter by name(根据字段名称进行过滤)&lt;/h1>
&lt;p>使用 regex pattern(正则表达式模式) 删除部分查询结果，模式可以是包含或者排除。过滤的对象是 Field(字段)。&lt;/p>
&lt;p>下图经过过滤后，我们仅显示 instance、pod、Value 这几个字段&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gxof32/1616067878535-d9af4670-b2e2-4973-9b34-63ea43dafacb.png" alt="">&lt;/p>
&lt;h1 id="filter-data-by-query">Filter data by query&lt;/h1>
&lt;p>Filter data by query. This is useful if you are sharing the results from a different panel that has many queries and you want to only visualize a subset of that in this panel.&lt;/p>
&lt;h1 id="group-by">Group by&lt;/h1>
&lt;p>Group the data by a field values then process calculations for each group&lt;/p>
&lt;h1 id="join-by-field连接字段-outer-join">Join by field(连接字段) Outer join&lt;/h1>
&lt;p>Joins many time series/tables by a field. This can be used to outer join multiple time series on the &lt;em>time&lt;/em> field to show many time series in one table.&lt;/p>
&lt;h1 id="labels-to-fields">Labels to fields&lt;/h1>
&lt;p>Groups series by time and return labels or tags as fields. Useful for showing time series with labels in a table where each label key becomes a seperate column&lt;/p>
&lt;h1 id="merge合并">Merge(合并)&lt;/h1>
&lt;p>Merge many series/tables and return a single table where mergeable values will be combined into the same row. Useful for showing multiple series, tables or a combination of both visualized in a table.&lt;/p>
&lt;p>合并多个系列/表并返回一个表，其中可合并的值将被合并到同一行中。用于在一个表中显示多个序列、表或两者的组合。&lt;/p>
&lt;h1 id="organize-fields组织字段">Organize fields(组织字段)&lt;/h1>
&lt;p>重命名，重新排序或隐藏查询返回的字段。&lt;/p>
&lt;p>下图经过组织后，字段的名称得以改变&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gxof32/1616067878497-a4cf0af9-8b5b-4b90-b2a4-d2510cac5503.png" alt="">&lt;/p>
&lt;h1 id="reduce裁剪">Reduce(裁剪)&lt;/h1>
&lt;p>裁剪所有行或数据点，变为单个值。裁剪之后，可以通过 max、min、mean、last 之类的函数，显示对应的值。&lt;/p>
&lt;p>下图就是裁剪之后的样式，原先的多个 Field，被整合到一个 Field，作为整个 Fild 的元素，每个元素都可以有一个或多个值(在对话框中可以选择要显示的值类型)。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gxof32/1616067878475-55c70061-ae9d-4057-ad1e-62c82249897b.png" alt="">
我们使用 DeBug 模式可以看到这些数据在转换前后的样子：&lt;/p>
&lt;p>从下图可以看出来，转换前有 10 个 Fields(包括时间)。转换后，原 Fields 的 name 会作为新 Fields 的元素进行填充。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gxof32/1616067878506-6be06d38-2181-4238-bba5-d17711a6525b.png" alt="">&lt;/p>
&lt;h1 id="rename-by-regexhttpsgrafanacomdocsgrafanalatestpanelstransformationstypes-optionsrename-by-regex通过正则表达式重命名">&lt;a href="https://grafana.com/docs/grafana/latest/panels/transformations/types-options/#rename-by-regex">Rename by regex&lt;/a>(通过正则表达式重命名)&lt;/h1>
&lt;p>使用正则表达式和替换模式重命名查询结果。&lt;/p>
&lt;p>在下面的示例中，可以看到 instance 标签的值都带着 &lt;code>:9100&lt;/code>，实际情况下，我们并不需要显示端口，那么就可以通过 Rename by regex 将其去掉
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gxof32/1636270563979-9e684764-6cd5-435c-93c9-be126a8593f1.png" alt="image.png">
应用这个转换类型后，可以看到只剩下除了 9100 以外的字符串了。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gxof32/1636270580325-7250a179-2386-4cf9-8918-d372612715d4.png" alt="image.png">&lt;/p>
&lt;h1 id="series-to-rows">Series to rows&lt;/h1>
&lt;p>Merge many series and return a single series with time, metric and value as columns. Useful for showing multiple time series visualized in a table.&lt;/p>
&lt;p>合并多个系列，并以时间，度量和值作为列返回单个系列。 用于显示表格中可视化的多个时间序列。&lt;/p>
&lt;p>将来自多个时间序列数据查询的结果合并为一个结果。 使用表格面板可视化效果时，这很有帮助。&lt;/p></description></item></channel></rss>