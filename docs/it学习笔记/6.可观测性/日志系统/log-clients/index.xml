<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – Log Clients</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/log-clients/</link><description>Recent content in Log Clients on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/log-clients/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Promtail</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/log-clients/promtail/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/log-clients/promtail/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://grafana.com/docs/loki/latest/clients/promtail/">官方文档&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/grafana/loki/tree/main/docs/sources/clients/promtail">GitHub 官方文档&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/PPNa7CYk6aaYDcvH9eTw1w">公众号,Promtail Pipeline 日志处理配置&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Promtail 是将本地日志内容发送到私有 Loki 或 Grafana Cloud 的代理。通常将其部署到 有监控需求的应用程序 的每台机器上。&lt;/p>
&lt;p>promtail 通过类似于 &lt;code>tail&lt;/code> 命令的这种方式来采集日志文件内容，采集完成后，添加 label，然后 push 给 Loki 。&lt;/p>
&lt;p>Promtail 是 Loki 官方支持的日志采集端，在需要采集日志的节点上运行采集代理，再统一发送到 Loki 进行处理。除了使用 Promtail，社区还有很多采集日志的组件，比如 fluentd、fluent bit 等，都是比较优秀的。&lt;/p>
&lt;p>但是 Promtail 是运行 Kubernetes 时的首选客户端，因为你可以将其配置为自动从 Promtail 运行的同一节点上运行的 Pod 中抓取日志。Promtail 和 Prometheus 在 Kubernetes 中一起运行，还可以实现非常强大的调试功能，如果 Prometheus 和 Promtail 使用相同的标签，用户还可以使用 Grafana 根据标签集在指标和日志之间切换。&lt;/p>
&lt;p>此外如果你想从日志中提取指标，比如计算某个特定信息的出现次数，Promtail 效果也是非常友好的。在 Promtail 中一个 pipeline 管道被用来转换一个单一的日志行、标签和它的时间戳。&lt;/p>
&lt;p>当前，Promtail 可以从两个来源 tail 日志&lt;/p>
&lt;ol>
&lt;li>local log 本地日志文件&lt;/li>
&lt;li>systemd journal&lt;/li>
&lt;/ol>
&lt;p>Promtail 与 Filebeat 性能对比图
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/zl113s/1616129582749-70275c0e-893e-413b-b489-80092db526c9.png" alt="">&lt;/p>
&lt;h1 id="promtail-工作流程">Promtail 工作流程&lt;/h1>
&lt;h2 id="日志发现">日志发现&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>官方文档：&lt;a href="https://grafana.com/docs/loki/latest/clients/promtail/scraping/">https://grafana.com/docs/loki/latest/clients/promtail/scraping/&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Promtail 与 Prometheus 的服务发现机制相同，通过配置文件中 &lt;code>scrape_configs&lt;/code> 字段的内容，来发现需要采集日志的目标，同时发现标签，然后通过 Relabeling 行为对要抓取的内容，要丢弃的内容、以及要附加到日志行的标签进行细粒度的控制。&lt;/p>
&lt;h2 id="标签与-parse解析">标签与 parse(解析)&lt;/h2>
&lt;p>标签与解析步骤分为两部分&lt;/p>
&lt;ol>
&lt;li>根据元数据添加标签。发现日志流后，会确定元数据(pod 名称、文件名等等)，这些元数据可以作为标签附加到每行日志上。通过 relabel_configs，可以将发现的标签改变为所需的形式。&lt;/li>
&lt;li>解析日志内容并添加或更新标签。Promtail 会通过&lt;code>scrape_config.pipeline_stages&lt;/code>配置段的内容，解析每行日志内容。根据解析的内容，可以为日志添加新的标签或更新现有标签。这种行为称为 &lt;a href="https://grafana.com/docs/loki/latest/clients/promtail/pipelines/">Pipelines&lt;/a>
&lt;ol>
&lt;li>Pipeline 说明详见：&lt;a href="https://www.yuque.com/go/doc/33181065">Promtail Pipeline 详解&lt;/a>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h2 id="推送日志">推送日志&lt;/h2>
&lt;p>Promtail 具有一组目标（i.e.要读取的内容，如文件）并且正确设置了所有标签后，它将开始跟踪（连续读取）来自目标的日志。一旦将足够的数据读取到内存中或经过可配置的超时后，就将其作为单批数据推送到 Loki。&lt;/p>
&lt;p>当 Promtail 从源（文件和系统日志，如果已配置）读取数据时，它将跟踪在位置文件中读取的最后一个偏移量。默认情况下，头寸文件存储在/var/log/positions.yaml 中。位置文件可帮助 Promtail 在 Promtail 实例重新启动的情况下从中断处继续读取。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;h3 id="promtail-的工作流程实际上是一个循环">Promtail 的工作流程实际上是一个循环&lt;/h3>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/zl113s/1616129582786-d73bcd27-d899-46f7-beb3-8dc84d0a690c.jpeg" alt="">
promtail 的日志发现过程是逐行发现，每发现一行处理一行，直到一定的时间或处理了足够多的日志，则将这些日志发送。然后继续下一个循环。这个过程，就好像瀑布的水流一样，哗哗得从上不断往下流水。日志文件内容就是水流，经过 promtail 哗哗往下流，流到 Loki 中。这就是 Loki 中 Log Stream 的形象描述~&lt;/p>
&lt;p>经过上述处理后，在 Grafana 看到的日志最终效果就像下图一样：
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/zl113s/1616129582773-ccfea9e2-0ad0-4ca4-bee7-f3248542c7e7.jpeg" alt="">&lt;/p>
&lt;h1 id="promtail-关联文件与配置">Promtail 关联文件与配置&lt;/h1>
&lt;p>&lt;strong>/etc/promtail/config.yml&lt;/strong> # Promtail 程序运行时基本配置文件
**/run/promtail/positions.yaml **# 每个已发现的目标的日志文件路径，都会保存在该文件中。重新启动 Promtail 时需要使用该文件，以使其从日志文件中断处继续抓取日志。&lt;/p>
&lt;h2 id="promtail-启动时的最小配置文件">promtail 启动时的最小配置文件&lt;/h2>
&lt;ul>
&lt;li>*&lt;strong>*path&lt;/strong> 为必须存在的标签**，promtail 根据该标签值指定的路径 tail 日志文件。&lt;/li>
&lt;li>&lt;strong>path&lt;/strong> 标签就像时间序列中 &lt;strong>name&lt;/strong> 标签的作用一样。且 promtail 会自动将该标签名转换为 filename。&lt;/li>
&lt;li>promtail 无法抓取 &lt;strong>path&lt;/strong> 下指定路径的子路径下的文件~~~~暂时还没找到解决办法&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># server 配置 promtail 程序运行时行为。如指定监听的ip、port等信息。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">server&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">http_listen_port&lt;/span>: &lt;span style="color:#ae81ff">9080&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">grpc_listen_port&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># positions 指定 promtail 读取日志的路径&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">positions&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">filename&lt;/span>: &lt;span style="color:#ae81ff">/tmp/positions.yaml&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># clients 配置 Promtail 如何连接到 Loki 的多个实例，并向每个实例发送日志。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Note：如果其中一台远程Loki服务器无法响应或发生任何可重试的错误，这将影响将日志发送到任何其他已配置的远程Loki服务器。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 发送是在单个线程上完成的！ 如果要发送到多个远程Loki实例，通常建议并行运行多个Promtail客户端。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">clients&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">url&lt;/span>: &lt;span style="color:#ae81ff">http://localhost:3100/loki/api/v1/push&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># scrape_configs 指定要抓取日志的目标。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">scrape_configs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">job_name&lt;/span>: &lt;span style="color:#ae81ff">system&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">static_configs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">targets&lt;/span>: &lt;span style="color:#75715e"># 指定抓取目标，i.e.抓取哪台设备上的文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">localhost&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">labels&lt;/span>: &lt;span style="color:#75715e"># 指定该日志流的标签&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">__path__&lt;/span>: &lt;span style="color:#ae81ff">/var/log/host/*&lt;/span> &lt;span style="color:#75715e"># 指定抓取路径，该匹配标识抓取 /var/log/host 目录下的所有文件。注意：不包含子目录下的文件。&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Promtail</title><link>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/log-clients/promtail/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/it%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/log-clients/promtail/</guid><description/></item></channel></rss>