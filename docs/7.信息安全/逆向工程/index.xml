<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – 逆向工程</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/</link><description>Recent content in 逆向工程 on 断念梦</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: 逆向工程</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Reverse_engineering">Wiki，Reverse_engineering&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Software_cracking">Wiki，Software_cracking&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Reverse engineering(逆向工程)&lt;/strong>&lt;/p>
&lt;p>逆向工程的其他目的包括安全审核、消除复制保护（“破解”）、规避消费电子产品中常见的访问限制、定制嵌入式系统（例如引擎管理系统）、内部维修或改造、低成本“残缺”硬件（例如某些显卡芯片组）上的附加功能，甚至只是满足好奇心。&lt;/p>
&lt;p>&lt;strong>Software cracking(软件破解)&lt;/strong>&lt;/p>
&lt;h1 id="学习">学习&lt;/h1>
&lt;p>&lt;a href="https://www.52pojie.cn/">吾爱破解&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/97o3fX9AN_kl2GCLhHAfig">吾爱破解安卓逆向入门教程《安卓逆向这档事》十五、是时候学习一下Frida一把梭了(下)&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="http://www.lxspider.com/?p=194">lamda安卓逆向辅助框架&lt;/a>&lt;/p>
&lt;h1 id="待整理">待整理&lt;/h1>
&lt;p>逆向算法&lt;/p>
&lt;p>逆向混淆&lt;/p>
&lt;h1 id="web-逆向">Web 逆向&lt;/h1>
&lt;p>从 &lt;a href="docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Cryptography(%E5%AF%86%E7%A0%81%E5%AD%A6)/%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E7%9A%84%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5.md">加密解密的最佳实践&lt;/a> 中可以看到常见的加密/解密方式。&lt;/p>
&lt;p>很多时候我们无法用其他语言实现找到的 js 代码，但是又想要使用 Python 怎么办呢，可以使用一些第三方库，以便让 Python 可以执行 JS 代码（e.g. pyexecjs、js2py）&lt;/p>
&lt;h2 id="js-逆向的调试方法">JS 逆向的调试方法&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.bilibili.com/video/BV1ew411K7nB/?p=3">JS 逆向的调试方法&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;ul>
&lt;li>使用 &lt;code>Ctrl + Shift + C&lt;/code> 定位感兴趣的元素。&lt;/li>
&lt;li>在网络中使用 &lt;code>Ctrl + f&lt;/code> 打开搜索，并搜索关键字，找到被选中的请求&lt;/li>
&lt;li>从网络标签中找到被选中（深灰色北京）的请求，点击该请求的 &lt;code>启动器&lt;/code> 进入到代码位置&lt;/li>
&lt;li>使用左下角的&lt;em>美观输出&lt;/em>，随后在代码中寻找感兴趣的内容。比如 sign 之类的关键字，找到 sign 的生成逻辑。&lt;/li>
&lt;/ul>
&lt;h2 id="已加密的数据如何处理">已加密的数据如何处理&lt;/h2>
&lt;blockquote>
&lt;ul>
&lt;li>&lt;a href="https://www.bilibili.com/video/BV1ew411K7nB/?p=4">遇到数据加密如何处理（一）&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.bilibili.com/video/BV1ew411K7nB?p=6">遇到数据加密如何处理（二）&lt;/a>&lt;/li>
&lt;li>视频已上传到网盘&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>已加密的数据在上文调试方法中是搜索不到的。这种通常都是使用 &lt;a href="docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/ECMAScript%20%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/AJAX.md">AJAX&lt;/a> 获取的数据，也就是对响应体中的 json 加密，由客户端解密才能看到。&lt;/p>
&lt;p>此时通过保存加密数据的键（常见的为 key、encrypt 等等），找到代码位置，打上断点后，进行 &lt;em>单步调试&lt;/em> 直到找到生成逻辑。&lt;/p>
&lt;h2 id="js-混淆如何处理">JS 混淆如何处理&lt;/h2>
&lt;blockquote>
&lt;ul>
&lt;li>&lt;a href="https://www.bilibili.com/video/BV1ew411K7nB/?p=7">关于数据加密js混淆的处理方式&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>在 Fetch/XHR 的请求中，从开发者工具查看该请求的启动器，如果函数名、变量名都是 &lt;code>_0x5601f0&lt;/code> 这类以 &lt;code>_0x&lt;/code> 开头的，说明代码是经过混淆的&lt;/p>
&lt;h2 id="请求参数中的-sign-如何处理">请求参数中的 sign 如何处理&lt;/h2>
&lt;blockquote>
&lt;p>&lt;a href="https://www.bilibili.com/video/BV1ew411K7nB/?p=9">请求参数sign逆向&lt;/a>&lt;/p>
&lt;/blockquote></description></item></channel></rss>