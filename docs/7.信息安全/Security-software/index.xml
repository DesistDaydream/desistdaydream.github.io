<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Security software on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Security-software/</link><description>Recent content in Security software on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Security-software/index.xml" rel="self" type="application/rss+xml"/><item><title>Security software</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Security-software/Security-software/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Security-software/Security-software/</guid><description>概述 参考：
Snort
Yara
Suricata
Suricata 是由 OISF 和 Suricata 社区开发的网络入侵检测系统、入侵防御系统和网络安全监控引擎。 https://github.com/OISF/suricata 可以把 Snort 规则转成 Suricata 规则，把相同的流量交给 Suricata 和 Snort 分别处理看看结果 Yara 参考：
GitHub 项目，virustotal/yara 官网 Wiki, YARA YARA 是一款旨在（但不限于）帮助恶意软件研究人员识别和分类恶意软件样本的工具。使用 YARA，您可以根据 文本 或 二进制 模式创建恶意软件系列（或您想要描述的任何内容）的描述。每个描述（也称为规则）由一组字符串和一个决定其逻辑的布尔表达式组成。让我们看一个例子：
rule silent_banker : banker { meta: description = &amp;#34;This is just an example&amp;#34; threat_level = 3 in_the_wild = true strings: $a = {6A 40 68 00 30 00 00 6A 14 8D 91} $b = {8D 4D B0 2B C1 83 C0 27 99 6A 4E 59 F7 F9} $c = &amp;#34;UVODFRYSIHLNWPEJXQZAKCBGMT&amp;#34; condition: $a or $b or $c } 安全系统提供商 数美科技 https://www.</description></item><item><title>IDS/IPS</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Security-software/IDS_IPS/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Security-software/IDS_IPS/</guid><description>概述 参考：
Wiki, Intrusion detection system Intrusion detection/prevention system(入侵监测系统 与 入侵防御系统，简称 IDS/IPS) 是一种设备或软件应用程序，用于监视网络或系统是否存在恶意活动或策略违规行为。
这套系统通常包含如下几部分
规则 # 一种人类可读的过滤规则 规则库 # 特定于某种识别场景的一组规则，识别某些特定的恶意流量 引擎 # 将规则翻译成流量过滤的语句以定位某个或某些流量 用 Snort 举例，Snort 本身可以表示 一种规则格式、一个识别规则的引擎、一个由 N 个规则组合而成的规则库；这些东西组合在一起，可以称之为一套系统。那么当流量来了之后（实时的流量 或者 .pcap 文件），Snort 可以读取流量，根据 Snort 规则库中的 Snort 规则，利用 Snort 识别引擎，对流量进行匹配后，识别出哪些流量是被规则命中的。
所谓引擎，应该是一种把自己的定义的人类可读的规则翻译成流量过滤语句的技术。
同理，其他的比如 Suricate、Yara、自研 的都是类似的道理，我们可以把这些系统中的规则通过某种方式进行转换，比如把人类可读的 Snort 规则转换成 Suricata 的规则后，由 Suricata 引擎再对流量识别。</description></item><item><title>Snort</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Security-software/Snort/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Security-software/Snort/</guid><description>概述 参考：
GitHub 项目，snort3/snort3 官网 Wiki, Snort_(software) Snort 是世界上最重要的开源 Intrusion Prevention System(入侵防御系统，IPS)。 Snort IPS 使用一系列规则来帮助定义恶意网络活动，并使用这些规则来查找与其匹配的数据包并为用户生成警报。
Snort 也可以内联部署来阻止这些数据包。 Snort 有三个主要用途：作为数据包嗅探器（如 tcpdump）、作为数据包记录器 — 这对于网络流量调试很有用，或者可以用作成熟的网络入侵防御系统。 Snort 可以下载并配置用于个人和商业用途。
Snort 规则 参考：
官方文档，规则 Snort 规则主要由两部分组成
Rule header # 定义了流量的基础规则，协议、源/目 的 IP 和 PORT，最基本就是这 5-tuple。 Rule body # 类似于 7 层策略。定义了与指定规则关联的数据包的内容应该如何匹配。用 () 包裹起来。 Rule body 中包括很多可用的 OPTIONS，详见 https://docs.snort.org/rules/options/ ，比如 msg、flow、etc. 都是 OPTIONS。 以下是具有 Rule header 和 Rule body 定义的完整形式的 Snort 3 规则的示例：
alert tcp $EXTERNAL_NET 80 -&amp;gt; $HOME_NET any ( msg:&amp;#34;Attack attempt!</description></item><item><title>Snort Rule body</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Security-software/Snort-Rule-body/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Security-software/Snort-Rule-body/</guid><description>概述 参考：
官方文档，Rule Options Snort Rule body 由很多的 Options 组成，Options 是 Snort 规则的核心和灵魂，这些 Options 决定了被 Snort 规则影响的数据包是否应该通过并发往目的地，或是还是应该应该就此停止。
其中最关键的就是 Payload Detection(载荷监测) 选项，Payload 检测是对 Payload 进行匹配的核心规则，只要满足了匹配规则，就可以对匹配到的数据包进行一系列操作。
每个 Options 都有一个 name(名称)，关键字后面跟 :，冒号后面时 Options 的具体内容（也可以成为 Options 的条件），最后每个 Options 都要以 ; 结尾。有的选项带有 arguments(参数)，可以在 ; 之间用 , 分割 Options 和 Option arguments。
比如: content:&amp;quot; pizza&amp;quot;, within 6;
content 是 Option 的名称，表示这是一个名为 content 的选项。 &amp;quot;pizza&amp;quot; 是 Option 的内容 , within 6 是 Option 的参数 Rule Options 总共分为 4 类:</description></item><item><title>Utilities</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Security-software/Utilities/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Security-software/Utilities/</guid><description>概述 参考：
https://github.com/HotBoy-java/PotatoTool # 这款工具是一款功能强大的网络安全综合工具，旨在为安全从业者、红蓝对抗人员和网络安全爱好者提供全面的网络安全解决方案。它集成了多种实用功能，包括解密、分析、扫描、溯源等，为用户提供了便捷的操作界面和丰富的功能选择。</description></item><item><title>Vulnerable</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Security-software/Vulnerable/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Security-software/Vulnerable/</guid><description>概述 参考：
Vulnerable 在中文环境那种可以称为 靶场、靶站、etc. ，用来描述在安全测试过程中充当被攻击或者主动检测的目标。
英文中好像没有一个明确的词儿可以和 靶场、靶站 相对应，这个词是从 Vulhub 项目中找到的。
Vulhub 参考：
GitHub 项目，vulhub/vulhub</description></item></channel></rss>