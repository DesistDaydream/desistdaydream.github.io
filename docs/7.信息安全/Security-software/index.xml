<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦的站点 – Security software</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Security-software/</link><description>Recent content in Security software on 断念梦的站点</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Security-software/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Security software</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Security-software/Security-software/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Security-software/Security-software/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;a href="https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Security%20software/Snort.md">Snort&lt;/a>&lt;/p>
&lt;p>&lt;a href="#yara">Yara&lt;/a>&lt;/p>
&lt;h1 id="yara">Yara&lt;a class="td-heading-self-link" href="#yara" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/virustotal/yara">GitHub 项目，virustotal/yara&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://virustotal.github.io/yara/">官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/YARA">Wiki，YARA&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>YARA 是一款旨在（但不限于）帮助恶意软件研究人员识别和分类恶意软件样本的工具。使用 YARA，您可以根据 &lt;strong>文本&lt;/strong> 或 &lt;strong>二进制&lt;/strong> 模式创建恶意软件系列（或您想要描述的任何内容）的描述。每个描述（也称为规则）由一组字符串和一个决定其逻辑的布尔表达式组成。让我们看一个例子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">rule&lt;/span> &lt;span style="color:#a40000">silent_banker&lt;/span> &lt;span style="color:#a40000">:&lt;/span> &lt;span style="color:#a40000">banker&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">meta:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">description&lt;/span> &lt;span style="color:#a40000">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;This is just an example&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">threat_level&lt;/span> &lt;span style="color:#a40000">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">in_the_wild&lt;/span> &lt;span style="color:#a40000">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">strings&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">$a&lt;/span> &lt;span style="color:#a40000">=&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">6A&lt;/span> &lt;span style="color:#a40000">40&lt;/span> &lt;span style="color:#a40000">68&lt;/span> &lt;span style="color:#a40000">00&lt;/span> &lt;span style="color:#a40000">30&lt;/span> &lt;span style="color:#a40000">00&lt;/span> &lt;span style="color:#a40000">00&lt;/span> &lt;span style="color:#a40000">6A&lt;/span> &lt;span style="color:#a40000">14&lt;/span> &lt;span style="color:#a40000">8D&lt;/span> &lt;span style="color:#a40000">91&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">$b&lt;/span> &lt;span style="color:#a40000">=&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">8D&lt;/span> &lt;span style="color:#a40000">4D&lt;/span> &lt;span style="color:#a40000">B0&lt;/span> &lt;span style="color:#a40000">2B&lt;/span> &lt;span style="color:#a40000">C1&lt;/span> &lt;span style="color:#a40000">83&lt;/span> &lt;span style="color:#a40000">C0&lt;/span> &lt;span style="color:#a40000">27&lt;/span> &lt;span style="color:#a40000">99&lt;/span> &lt;span style="color:#a40000">6A&lt;/span> &lt;span style="color:#a40000">4E&lt;/span> &lt;span style="color:#a40000">59&lt;/span> &lt;span style="color:#a40000">F7&lt;/span> &lt;span style="color:#a40000">F9&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">$c&lt;/span> &lt;span style="color:#a40000">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;UVODFRYSIHLNWPEJXQZAKCBGMT&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">condition&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">$a&lt;/span> &lt;span style="color:#a40000">or&lt;/span> &lt;span style="color:#a40000">$b&lt;/span> &lt;span style="color:#a40000">or&lt;/span> &lt;span style="color:#a40000">$c&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="安全系统提供商">安全系统提供商&lt;a class="td-heading-self-link" href="#%e5%ae%89%e5%85%a8%e7%b3%bb%e7%bb%9f%e6%8f%90%e4%be%9b%e5%95%86" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>数美科技 &lt;a href="https://www.ishumei.com/">https://www.ishumei.com/&lt;/a> # 在线业务风控解决方案提供商&lt;/p></description></item><item><title>Docs: Snort</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Security-software/Snort/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Security-software/Snort/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/snort3/snort3">GitHub 项目，snort3/snort3&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.snort.org/">官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Snort_(software)">Wiki，Snort_(software)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Snort 是世界上最重要的开源 Intrusion Prevention System(入侵防御系统，IPS)。 Snort IPS 使用一系列规则来帮助定义恶意网络活动，并使用这些规则来查找与其匹配的数据包并为用户生成警报。&lt;/p>
&lt;p>Snort 也可以内联部署来阻止这些数据包。 Snort 有三个主要用途：作为数据包嗅探器（如 tcpdump）、作为数据包记录器 — 这对于网络流量调试很有用，或者可以用作成熟的网络入侵防御系统。 Snort 可以下载并配置用于个人和商业用途。&lt;/p>
&lt;h1 id="snort-规则">Snort 规则&lt;a class="td-heading-self-link" href="#snort-%e8%a7%84%e5%88%99" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.snort.org/rules/">官方文档，规则&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Snort 规则主要由两部分组成&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Rule header&lt;/strong> # 定义了流量的基础规则，协议、源/目 的 IP 和 PORT，最基本就是这 5-tuple。&lt;/li>
&lt;li>&lt;strong>Rule body&lt;/strong> # 类似于 7 层策略。定义了与指定规则关联的数据包的内容应该如何匹配。用 &lt;code>()&lt;/code> 包裹起来。
&lt;ul>
&lt;li>Rule body 中包括很多可用的 OPTIONS，详见 &lt;a href="https://docs.snort.org/rules/options/">https://docs.snort.org/rules/options/&lt;/a> ，比如 msg、flow、etc. 都是 OPTIONS。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>以下是具有 Rule header 和 Rule body 定义的完整形式的 Snort 3 规则的示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>alert tcp $EXTERNAL_NET 80 -&amp;gt; $HOME_NET any
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> msg:&amp;#34;Attack attempt!&amp;#34;;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flow:to_client,established;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> file_data;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> content:&amp;#34;1337 hackz 1337&amp;#34;,fast_pattern,nocase;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> service:http;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sid:1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">关键字&lt;/th>
&lt;th style="text-align:center">协议&lt;/th>
&lt;th style="text-align:center">源 IP&lt;/th>
&lt;th style="text-align:center">源 PORT&lt;/th>
&lt;th style="text-align:center">关键字&lt;/th>
&lt;th style="text-align:center">目的 IP&lt;/th>
&lt;th style="text-align:center">目的 PORT&lt;/th>
&lt;th style="text-align:center">规则主体&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">alert&lt;/td>
&lt;td style="text-align:center">tcp/udp&lt;/td>
&lt;td style="text-align:center">可以用 any 或具体 IP&lt;/td>
&lt;td style="text-align:center">可以用 any 或具体 PORT&lt;/td>
&lt;td style="text-align:center">-&amp;gt;&lt;/td>
&lt;td style="text-align:center">可以用 any 或具体 IP。需要使用 &lt;code>[]&lt;/code> 括起来&lt;/td>
&lt;td style="text-align:center">可以用 any 或具体 PORT。需要添加 &lt;code>[]&lt;/code> 括起来&lt;/td>
&lt;td style="text-align:center">除了 源/目 之外的匹配规则。使用 &lt;code>()&lt;/code> 括起来&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>匹配规则&lt;/strong> # 除了 源/目 IP 或 PORT 之外，还可以匹配数据包的 URL、数据内容 等进行过滤。只有完全匹配到的才会记录成安全事件。&lt;/p>
&lt;h2 id="rule-header">Rule header&lt;a class="td-heading-self-link" href="#rule-header" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="rule-body">Rule body&lt;a class="td-heading-self-link" href="#rule-body" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>详见 &lt;a href="https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Security%20software/Snort%20Rule%20body.md">Snort Rule body&lt;/a>&lt;/p>
&lt;h1 id="snort-规则最佳实践">Snort 规则最佳实践&lt;a class="td-heading-self-link" href="#snort-%e8%a7%84%e5%88%99%e6%9c%80%e4%bd%b3%e5%ae%9e%e8%b7%b5" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;code>alert udp 159.138.48.8 any -&amp;gt; [111.30.108.165] [53] (msg:\&amp;quot;ip test\&amp;quot;; pcre:\&amp;quot;/./\&amp;quot;; sid:99999999;)&lt;/code>&lt;/p></description></item><item><title>Docs: Snort Rule body</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Security-software/Snort-Rule-body/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Security-software/Snort-Rule-body/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.snort.org/rules/options/index.html">官方文档，Rule Options&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Snort Rule body 由很多的 Options 组成，&lt;font color="#ff0000">Options 是 Snort 规则的核心和灵魂&lt;/font>，这些 Options 决定了被 Snort 规则影响的数据包是否应该通过并发往目的地，或是还是应该应该就此停止。&lt;/p>
&lt;blockquote>
&lt;p>其中最关键的就是 Payload Detection(载荷监测) 选项，Payload 检测是对 Payload 进行匹配的核心规则，只要满足了匹配规则，就可以对匹配到的数据包进行一系列操作。&lt;/p>
&lt;/blockquote>
&lt;p>每个 Options 都有一个 &lt;strong>name(名称)&lt;/strong>，关键字后面跟 &lt;code>:&lt;/code>，冒号后面时 Options 的具体内容（也可以成为 Options 的&lt;strong>条件&lt;/strong>），最后每个 Options 都要以 &lt;code>;&lt;/code> 结尾。有的选项带有 &lt;strong>arguments(参数)&lt;/strong>，可以在 &lt;code>;&lt;/code> 之间用 &lt;code>,&lt;/code> 分割 Options 和 Option arguments。&lt;/p>
&lt;p>比如: &lt;code>content:&amp;quot; pizza&amp;quot;, within 6;&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;code>content&lt;/code> 是 Option 的名称，表示这是一个名为 content 的选项。&lt;/li>
&lt;li>&lt;code>&amp;quot;pizza&amp;quot;&lt;/code> 是 Option 的内容&lt;/li>
&lt;li>&lt;code>, within 6&lt;/code> 是 Option 的参数&lt;/li>
&lt;/ul>
&lt;p>Rule Options 总共分为 4 类:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>General(常规)&lt;/strong> # 添加一些自定义的信息，以便程序可以方便的集成 Snort 规则。&lt;/li>
&lt;li>&lt;strong>Payload Detection(Payload 检测)&lt;/strong> # 根据 Payload 的内容进行匹配&lt;/li>
&lt;li>&lt;strong>Non-Payload Detection(非 Payload 检测)&lt;/strong> # 根据非 Payload 的其他信息进行配置，e.g. 各种协议的 Header（TCP 的 Flags、etc.）、etc.&lt;/li>
&lt;li>&lt;strong>Post-Detection(监测后)&lt;/strong> # 指定的规则触发后要对数据包采取的操作&lt;/li>
&lt;/ul>
&lt;h1 id="常规">常规&lt;a class="td-heading-self-link" href="#%e5%b8%b8%e8%a7%84" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="sid">sid&lt;a class="td-heading-self-link" href="#sid" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Snort ID(简称 sid) 是 Snort 规则的唯一标识符&lt;/p>
&lt;h1 id="payload-检测">Payload 检测&lt;a class="td-heading-self-link" href="#payload-%e6%a3%80%e6%b5%8b" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;a href="https://docs.snort.org/rules/options/payload/">https://docs.snort.org/rules/options/payload/&lt;/a>&lt;/p>
&lt;h2 id="content">content&lt;a class="td-heading-self-link" href="#content" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://docs.snort.org/rules/options/payload/content">https://docs.snort.org/rules/options/payload/content&lt;/a>&lt;/p>
&lt;p>Syntax(语法): &lt;code>content:[!]&amp;quot;content_modifer&amp;quot;[,content_modifer_argument];&lt;/code>&lt;/p>
&lt;ul>
&lt;li>content_modifer 是要匹配的数据内容&lt;/li>
&lt;li>content_modifer_argument （可选的）修饰符，用来对要匹配的内容进行额外的评估要求。&lt;/li>
&lt;/ul>
&lt;p>content 用于执行 基本字符串 和/或 十六进制 模式匹配。十六进制表示法必须使用 &lt;code>| |&lt;/code> 包裹起来&lt;/p>
&lt;p>比如:&lt;/p>
&lt;ul>
&lt;li>&lt;code>content:&amp;quot;|61 62 63|&amp;quot;&lt;/code> 表示 Playload 中要包含 abc 这三个字符&lt;/li>
&lt;/ul>
&lt;h2 id="offset-depth-distance-within">offset, depth, distance, within&lt;a class="td-heading-self-link" href="#offset-depth-distance-within" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>这四个选项是对匹配内容的修饰符，用以指定如何对 Payload 进行查找，比如: 从 Payload 何处开始查找、查找 Payload 的前多少个字节、etc.&lt;/p>
&lt;p>depth 选项允许规则编写者指定在 Snort 数据包或缓冲区中查找指定模式的深度。例如，将 depth 设置为 5 将告诉 Snort 仅查找 Payload 的前 5 个字节内的模式。&lt;/p>
&lt;h2 id="pcre">pcre&lt;a class="td-heading-self-link" href="#pcre" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://docs.snort.org/rules/options/payload/pcre">https://docs.snort.org/rules/options/payload/pcre&lt;/a>&lt;/p>
&lt;p>pcre 选项可以根据 Perl 兼容的 &lt;a href="https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/Regular%20Expression(%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F).md">Regular Expression(正则表达式)&lt;/a> 对数据包进行匹配。&lt;/p>
&lt;blockquote>
&lt;p>Notes: 由于从性能角度来看，正则表达式的成本相对较高，因此使用 PCRE 的选项还应该至少有一个 &lt;a href="#content">content&lt;/a> 选项，以利用 Snort 的快速模式引擎。&lt;/p>
&lt;/blockquote>
&lt;h1 id="非-payload-检测">非 Payload 检测&lt;a class="td-heading-self-link" href="#%e9%9d%9e-payload-%e6%a3%80%e6%b5%8b" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="flags">flags&lt;a class="td-heading-self-link" href="#flags" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>flags 选项用于检查 &lt;a href="https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/TCP_IP/TCP/TCP%20Header.md">TCP Header&lt;/a> 中是否设置了指定的 Flag&lt;/p></description></item></channel></rss>