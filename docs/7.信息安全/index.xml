<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>🔐7.信息安全 on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/</link><description>Recent content in 🔐7.信息安全 on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/index.xml" rel="self" type="application/rss+xml"/><item><title>Glossary</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Glossary/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Glossary/</guid><description>概述 参考：
RFC 4949(互联网安全术语) Crypto(密码学) # 算是 Cryptographic 的前缀简写吧
Entity(实体) # 是任何存在的东西（anything that exists） —— 即使 只在逻辑或概念上存在（even if only exists logically or conceptually）。 例如，
你的计算机是一个 entity， 你写的代码也是一个 entity， 你自己也是一个 entity， 你吃的杂粮饼也是一个 entity， 你六岁时见过的幽灵也是一个 entity —— 即使你妈告诉你幽灵并不存在，这只是你的臆想。 所以 CA 也算一个实体 Identity(身份) # 每个 entity（实体）都有一个 identity（身份）。 要精确定义这个概念比较困难，这么来说吧：identity 是使你之所以为你 （what makes you you）的东西。
具体到计算机领域，identity 通常用一系列属性来表示，描述某个具体的 entity， 这里的属性包括 group、age、location、favorite color、shoe size 等等。 Identifier(身份标识符) # Identifier 跟 identity 还不是一个东西：每个 identifier 都是一个唯一标识符， 也唯一地关联到某个有 identity 的 entity。</description></item><item><title>信息安全</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/</guid><description>概述 参考：
Wiki, Information_security Information security(信息安全，简称 infosec) 是通过降低信息风险来保护信息的实践。
Data secruity
Network security
Reverse engineering(逆向工程) Reverse engineering
Software cracking(软件破解)
Wiki, Software cracking(软件破解) Penetration test(渗透测试)
Wiki, Penetration test(渗透测试) 待总结 要研究态势感知或安全运营中心，可以采用 OSSIM
要研究入侵防御技术，可以采用 Snort 或 Security Onion
要研究防火墙技术，可以采用 pfSense 或 OPNsense
要研究 Web 应用防火墙（WAF ），可以采用 ModSecurity
要研究威胁情报技术，可以采用 MISP 或 OpenCTI
要研究漏洞扫描技术，可以采用 OpenVAS 或 W3AF
要研究堡垒机技术，可以采用 JumpServer
要研究蜜罐技术，可以采用 T-Pot 或 Hfish
学习 B 站 - 沈奇教练，【黑客奇谈】第三期：0基础成为黑客有多难？15年网安经验倾囊相授，教你正确入门网络安全
历史漏洞 CVE-2022-0185 https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-0185 漏洞，通过如下操作，可以让普通用户直接重置 root 密码。主要利用的是 bind mount 功能，将 /etc/passwd 文件覆盖</description></item><item><title>Bastion Host</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Bastion-Host/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Bastion-Host/</guid><description>概述 参考：
Wiki, Bastion host Bastion Host(堡垒机)
JumpServer GitHub 项目，jumpserver/jumpserver
https://jumpserver.org/
OneTerm GitHub 项目，veops/oneterm
公众号 - Kubernetes技术栈，开源推荐｜简洁且强大的开源堡垒机OneTerm
公众号 - Kubernetes技术栈，用了两周开源堡垒机OneTerm，我有一些建议</description></item><item><title>Hacking</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Hacking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Hacking/</guid><description>概述 参考：
B 站合集，【黑客奇谈】现实黑客的世界是什么样的？ Flipper Zero 是一款玩具般的便携式多功能工具，适合渗透测试人员和极客。它喜欢破解数字内容，例如无线电协议、访问控制系统、硬件等。它是完全开源和可定制的，因此您可以按照自己喜欢的方式扩展它。
名词解释 补充一个小知识点，软件漏洞在英文里不是 Hole——孔洞，而是 Vulnerability(脆弱性)，因为软件里的漏洞往往不会是一个明晃晃的“洞”，而是一个不起眼的“脆弱性”。
Robo Hacking Game(机器人网络安全大赛，简称 RHG) 是中国版的 CGC 大赛。
Cyber Grand Challenge(网络空间超级挑战赛，简称 CGC) 是 Defense Advanced Research Projects Agency(国防高级研究计划局，简称 DARPA) 举办的比赛。
网络空间资产测绘搜索引擎 # 网络空间资产测绘引擎是一种通过技术手段对全球网络空间中的资产进行探测、识别和分析的工具对全球暴露在互联网上的服务器和设备进行资产探 测、端口探活、协议解析、应用识别通过网络空间测绘技术，将地理空间、社会空间、网络空间相互映射，绘制动态其自主研发的扫描引擎可全端口扫描
CMS 指纹识别 # Content Management System(内容管理系统) 旨在通过分析目标网站呈现出的各种特征信息，来准确判断指纹识别其是基于哪种 CMS 搭建的。比如是 WordPress、Drupal、Joomla 等常见的 CMS，以及具体使用的是哪个版本
0day 漏洞 # 是指在软件、硬件或操作系统等产品中被攻击者发现并利用。但软件供应商或开发者还未知晓，因而尚未发布补丁或其他修复程序的安全漏洞。
之所以被称为 “0day”，是因为从漏洞被发现并利用，到开发人员知晓并着手修复。这期间留给开发人员的时间几乎为零，意味着开发人员没有时间提前准备应对措施 GetShell # 通常是指在网络安全领域，攻击者通过各种手段获取目标服务器的命令执行权限或者可交互式的Shell环境
攻击者一旦获取Shell权限，便可肆意操作服务器资源 比如窃取敏感信息（如用户数据、数据库内容等）、篡改服务器上的网页文件、安装恶意程序进一步控制服务器，甚至利用该服务器作为跳板去攻击其他关联的网络目标等 WebShell # 是一种网页脚本木马，它通过网页脚本（如ASP、PHP、JSP等）形式存在。可以在被攻击的服务器上执行命令，攻击者利用Web应用程序的漏洞（如文件上传漏洞、SQL注入漏洞等）将Webshell脚本上传到目标服务器，从而获得对服务器的一定控制权
https://github.com/BeichenDream/Godzilla https://github.com/rebeyond/Behinder https://github.com/AntSwordProject/antSword Bobalt strike # 是一款以团队协作形式进行网络攻击模拟及渗透测试的平台。旨在帮助安全专业人员评估目标网络的安全性，发现潜在漏洞并验证防御机制的有效性。它集成了众多先进的功能模块涵盖了从信息收集、漏洞利用到权限维持等整个网络渗透流程中的多个环节
https://www.cobaltstrike.com/ 蜜罐 # 蜜罐是一种被设计用来吸引攻击者、捕获攻击行为信息的虚拟或真实的网络资源。它看似存在有价值的信息或系统漏洞，就像放置在网络环境中的“诱饵”，诱导攻击者对其发起攻击，进而收集攻击者的攻击手段、行为习惯、工具使用等相关信息，帮助安全人员更好地了解潜在的安全威胁，完善防御策略。</description></item><item><title>中间人攻击与HTTPS抓包</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB%E4%B8%8EHTTPS%E6%8A%93%E5%8C%85/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB%E4%B8%8EHTTPS%E6%8A%93%E5%8C%85/</guid><description>概述 参考：
公众号-小林 coding，字节一面：HTTPS 一定安全可靠吗？ HTTPS 一定安全可靠吗？
这个问题的场景是这样的：客户端通过浏览器向服务端发起 HTTPS 请求时，被「假基站」转发到了一个「中间人服务器」，于是客户端是和「中间人服务器」完成了 TLS 握手，然后这个「中间人服务器」再与真正的服务端完成 TLS 握手。
具体过程如下：
客户端向服务端发起 HTTPS 建立连接请求时，然后被「假基站」转发到了一个「中间人服务器」，接着中间人向服务端发起 HTTPS 建立连接请求，此时客户端与中间人进行 TLS 握手，中间人与服务端进行 TLS 握手； 在客户端与中间人进行 TLS 握手过程中，中间人会发送自己的公钥证书给客户端，客户端验证证书的真伪，然后从证书拿到公钥，并生成一个随机数，用公钥加密随机数发送给中间人，中间人使用私钥解密，得到随机数，此时双方都有随机数，然后通过算法生成对称加密密钥（A），后续客户端与中间人通信就用这个对称加密密钥来加密数据了。 在中间人与服务端进行 TLS 握手过程中，服务端会发送从 CA 机构签发的公钥证书给中间人，从证书拿到公钥，并生成一个随机数，用公钥加密随机数发送给服务端，服务端使用私钥解密，得到随机数，此时双方都有随机数，然后通过算法生成对称加密密钥（B），后续中间人与服务端通信就用这个对称加密密钥来加密数据了。 后续的通信过程中，中间人用对称加密密钥（A）解密客户端的 HTTPS 请求的数据，然后用对称加密密钥（B）加密 HTTPS 请求后，转发给服务端，接着服务端发送 HTTPS 响应数据给中间人，中间人用对称加密密钥（B）解密 HTTPS 响应数据，然后再用对称加密密钥（A）加密后，转发给客户端。 从客户端的角度看，其实并不知道网络中存在中间人服务器这个角色。
那么中间人就可以解开浏览器发起的 HTTPS 请求里的数据，也可以解开服务端响应给浏览器的 HTTPS 响应数据。相当于，中间人能够 “偷看” 浏览器与服务端之间的 HTTPS 请求和响应的数据。
但是要发生这种场景是有前提的，前提是用户点击接受了中间人服务器的证书。
中间人服务器与客户端在 TLS 握手过程中，实际上发送了自己伪造的证书给浏览器，而这个伪造的证书是能被浏览器（客户端）识别出是非法的，于是就会提醒用户该证书存在问题。
如果用户执意点击「继续浏览此网站」，相当于用户接受了中间人伪造的证书，那么后续整个 HTTPS 通信都能被中间人监听了。
所以，这其实并不能说 HTTPS 不够安全，毕竟浏览器都已经提示证书有问题了，如果用户坚决要访问，那不能怪 HTTPS ，得怪自己手贱。
客户端是如何验证证书的？ 接下来，详细说一下实际中数字证书签发和验证流程。
如下图图所示，为数字证书签发和验证流程：
当服务端向 CA 机构申请证书的时候，CA 签发证书的过程，如上图左边部分：</description></item></channel></rss>