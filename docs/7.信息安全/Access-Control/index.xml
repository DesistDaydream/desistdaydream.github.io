<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Access Control on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Access-Control/</link><description>Recent content in Access Control on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Access-Control/index.xml" rel="self" type="application/rss+xml"/><item><title>Access Control</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Access-Control/Access-Control/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Access-Control/Access-Control/</guid><description>概述 参考：
Access Control(访问控制)
Authorization 和 Delegation Authorization 名词。更多时候用来形容授权本身
Delegation 动词。更多时候用来形容授权的过程
AI 回答：
Authorization 与 Delegation 都有”授权“的含义
Authorization(授权) 是指验证和确定某个主体是否有权限执行特定操作或访问特定资源的过程。
特点：
基于身份和角色的权限控制 通常是静态的权限分配 权限由系统管理员或权限管理系统预先定义 权限检查发生在资源访问时 权限通常绑定到用户的身份或角色 例子：
用户A被授权可以读取文件X 管理员角色被授权可以删除用户账户 某个API key被授权可以访问特定的服务端点 Delegation(授权) 是指一个主体将自己的部分或全部权限临时赋予给另一个主体的机制。
特点：
权限的动态转移 通常是临时性的 原权限持有者主动发起 可以设置时间限制、范围限制等条件 委托者仍保留原始权限 例子：
OAuth中，用户委托第三方应用代表自己访问某些资源 经理将审批权限临时委托给副经理 系统管理员委托某个用户临时执行维护任务 关键区别 权限来源：Authorization 是系统分配的，Delegation 是用户主动转让的 持续性：Authorization 通常是持久的，Delegation 通常是临时的 控制权：Authorization 由管理员控制，Delegation 由权限拥有者控制 灵活性：Delegation 更加灵活和动态 在实际应用中，这两个概念经常结合使用，比如 OAuth 2.0 就同时涉及授权和委托机制。
基于角色的访问控制（RBAC）：演进历史、设计理念及简洁实现（Tailscale, 2021） https://arthurchiao.art/blog/rbac-as-it-meant-to-be-zh/
RBAC 的演进历史、设计理念及简洁实现
译者序 本文翻译自 2021 年的一篇英文博客： RBAC like it was meant to be 。</description></item><item><title>OAuth</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Access-Control/OAuth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Access-Control/OAuth/</guid><description>概述 参考：
RFC 6749, The OAuth 2.0 Authorization Framework Wiki, Oauth Open Authorization(简称 OAuth) 是一种用于 access delegation(访问授权) 的开放标准。通常作为互联网用户授权网站或应用程序访问其在其它网站上的信息的一种方式，而无需提供密码。亚马逊、谷歌、Meta Platforms、微软、推特、etc. 公司采用此机制，允许用户与第三方应用程序或网站共享其账户信息。
OAuth 的出现主要是解决这么一个问题：第三方应用程序，如何安全地获得用户授权，以访问该用户在另一个服务上的资源。
一个简单的场景是：我开发了一个照片打印程序（程序 A），用户想要打印自己存储在网盘中的照片，那么用户如何在不告诉 A 账号密码或者任何登录用 Token 等认证信息的情况下，让 A 访问到网盘中的照片呢？
程序 A 应该先找网盘要登录方式，提供给用户。网盘验证用户登录成功后，告诉 A 用户已登录并同意了 A 访问照片，同时提供一个 A 用的 Token。此时 A 可以使用这个 Token 来访问允许的内容。这中间，用户并不用把自己的认证信息提供给 A。
[!Note] 在上述场景中，为了避免将用户的敏感资源泄露给程序 A，这种程序一般都是本地部署，并不是通过互联网为多个用户提供服务的。比如 NAS，部署在本地，通过程序编写好的 OAuth 能力获取到权限，即可获取各种云盘中的资源
另外一个场景是非敏感信息的，比如 用户名、头像 之类的。这种就可以不用本地部署，而是第三方程序在互联网提供服务，比如各种网站在登陆时通过 Google 登录，本质也是使用了 Google 的 OAuth 能力获取 邮箱、头像 等非敏感信息。</description></item><item><title>RBAC</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Access-Control/RBAC/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Access-Control/RBAC/</guid><description>概述 参考：
Wiki, RBAC 基于角色的权限访问控制（Role-Based Access Control）作为传统访问控制（自主访问，强制访问）的有前景的代替受到广泛的关注。在 RBAC 中，权限与角色相关联，用户通过成为适当角色的成员而得到这些角色的权限。这就极大地简化了权限的管理。在一个组织中，角色是为了完成各种工作而创造，用户则依据它的责任和资格来被指派相应的角色，用户可以很容易地从一个角色被指派到另一个角色。角色可依新的需求和系统的合并而赋予新的权限，而权限也可根据需要而从某角色中回收。角色与角色的关系可以建立起来以囊括更广泛的客观情况。
RBAC 支持三个著名的安全原则：最小权限原则，责任分离原则和数据抽象原则。
最小权限原则之所以被 RBAC 所支持，是因为 RBAC 可以将其角色配置成其完成任务所需要的最小的权限集。 责任分离原则可以通过调用相互独立互斥的角色来共同完成敏感的任务而体现，比如要求一个计帐员和财务管理员共参与同一过帐。 数据抽象可以通过权限的抽象来体现，如财务操作用借款、存款等抽象权限，而不用操作系统提供的典型的读、写、执行权限。然而这些原则必须通过 RBAC 各部件的详细配置才能得以体现。 RBAC 有许多部件(BUCU)，这使得 RBAC 的管理多面化。尤其是，我们要分割这些问题来讨论：用户与角色的指派；角色与权限的指派；为定义角色的继承进行的角色与角色的指派。这些活动都要求把用户和权限联系起来。然而在很多情况下它们最好由不同的管理员或管理角色来做。对角色指派权限是典型的应用管理者的职责。银行应用中，把借款、存款操作权限指派给出纳角色，把批准贷款操作权限指派给经理角色。而将具体人员指派给相应的出纳角色和管理者角色是人事管理的范畴。角色与角色的指派包含用户与角色的指派、角色与权限的指派的一些特点。更一般来说，角色与角色的关系体现了更广泛的策略。
基本概念 RBAC 认为权限授权实际上是 Who、What、How 的问题。在 RBAC 模型中，who、what、how 构成了访问权限三元组,也就是“Who 对 What(Which)进行 How 的操作”。
Who：权限的拥用者或主体（如 Principal、User、Group、Role、Actor 等等）。
What：权限针对的对象或资源（Resource、Class）。
How：具体的权限（Privilege,正向授权与负向授权）。
Operator：操作。表明对 What 的 How 操作。也就是 Privilege+Resource
Role：角色，一定数量的权限的集合。权限分配的单位与载体,目的是隔离 User 与 Privilege 的逻辑关系.
Group：用户组，权限分配的单位与载体。权限不考虑分配给特定的用户而给组。组可以包括组(以实现权限的继承)，也可以包含用户，组内用户继承组的权限。User 与 Group 是多对多的关系。Group 可以层次化，以满足不同层级权限控制的要求。
RBAC 的关注点在于 Role 和 User, Permission（允许/权限）的关系。称为 User assignment(UA)和 Permission assignment(PA).关系的左右两边都是 Many-to-Many 关系。就是 user 可以有多个 role，role 可以包括多个 user。</description></item></channel></rss>