<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – OpenSSL</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/OpenSSL/</link><description>Recent content in OpenSSL on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/OpenSSL/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: OpenSSL</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/OpenSSL/OpenSSL/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/OpenSSL/OpenSSL/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.openssl.org/">官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/openssl/openssl">GitHub 项目,openssl/openssl&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>OpenSSL 是一个商业级且功能齐全的工具包，用于通用密码学和安全通信&lt;/p>
&lt;p>OpenSSL 可以实现 &lt;strong>TLS(传输层安全性)&lt;/strong> 和 &lt;strong>SSL(安全套接字层)&lt;/strong> 协议的预期功能，类似于 OpenSSH 是 ssh 协议的实现&lt;/p>
&lt;p>OpenSSL 主要包含两组东西：&lt;/p>
&lt;ul>
&lt;li>openssl # 多用途的命令行工具&lt;/li>
&lt;li>libraries # OpenSSL 库
&lt;ul>
&lt;li>libcrypto # 加密解密库&lt;/li>
&lt;li>libssl # ssl 库，实现了 ssl 及 tls 的功能&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="openssl-关联文件">OpenSSL 关联文件&lt;/h1>
&lt;p>&lt;strong>/etc/ssl/openssl.conf&lt;/strong> # OpenSSL 的“命令行工具”和 “库”默认使用的配置文件。&lt;/p>
&lt;p>如果想要使用 CA 功能，需要进行如下配置&lt;/p>
&lt;ul>
&lt;li>touch /etc/pki/CA/index.txt&lt;/li>
&lt;li>echo 01 &amp;gt; /etc/pki/CA/serial&lt;/li>
&lt;/ul>
&lt;h1 id="openssl-命令行工具">openssl 命令行工具&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.openssl.org/docs/manmaster/man1/openssl.html">Manual(手册),openssl&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>openssl 程序提供了丰富的子命令，以实现 TLS/SSL 网络协议以及它们所需要的相关加密标准。&lt;/p>
&lt;h2 id="syntax语法">Syntax(语法)&lt;/h2>
&lt;p>&lt;strong>openssl Command [ OPTIONS ] [ ARGUMENTS ]&lt;/strong>&lt;/p>
&lt;h3 id="command">Command&lt;/h3>
&lt;ul>
&lt;li>Standard commands # 标准命令
&lt;ul>
&lt;li>asn1parse，ca，ciphers，cms，crl，crl2pkcs7，dgst，dh，dhparam，dsa，dsaparam，ec，ecparam，enc，engine，errstr，gendh，gendsa，genpkey，genrsa，nseq，ocsp，passwd，pkcs12，pkcs7，pkcs8，pkey，pkeyparam，pkeyutl，prime，rand，req，rsa，rsautl，s_client，s_server，s_time，sess_id，smime，speed，spkac，ts，verify，version，x509&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Message Digest commands # 消息摘要命令，消息摘要算法的实现(用于单向加密)。使用 dgst 命令
&lt;ul>
&lt;li>md2，md4，md5，rmd160，sha，sha1&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Cipher commands # 密码命令（其中都是各种加密算法，用于对称加密）。使用 enc 命令
&lt;ul>
&lt;li>aes-128-cbc，aes-128-ecb，aes-192-cbc，aes-192-ecb，aes-256-cbc，aes-256-ecb，base64，bf，bf-cbc，bf-cfb，bf-ecb，bf-ofb，camellia-128-cbc，camellia-128-ecb，camellia-192-cbc，camellia-192-ecb，camellia-256-cbc，camellia-256-ecb，cast，cast-cbc，cast5-cbc，cast5-cfb，cast5-ecb，cast5-ofb，des，des-cbc，des-cfb，des-ecb，des-ede，des-ede-cbc，des-ede-cfb，des-ede-ofb，des-ede3，des-ede3-cbc，des-ede3-cfb，des-ede3-ofb，des-ofb，des3，desx，idea，idea-cbc，idea-cfb，idea-ecb，idea-ofb，rc2，rc2-40-cbc，rc2-64-cbc，rc2-cbc，rc2-cfb，rc2-ecb，rc2-ofb，rc4，rc4-40，rc5，rc5-cbc，rc5-cfb，rc5-ecb，rc5-ofb，seed，seed-cbc，seed-cfb，seed-ecb，seed-ofb，zlib&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="global-options">Global OPTIONS&lt;/h3>
&lt;ul>
&lt;li>-in FILE # 指明使用的文件&lt;/li>
&lt;li>-out FILE # 指明输出的文件&lt;/li>
&lt;/ul>
&lt;h2 id="standard-commands--标准命令">Standard commands # 标准命令&lt;/h2>
&lt;p>[Standard commands(标准命令)](/docs/IT学习笔记/7.信息安全/管理工具/OpenSSL/Standard%20commands(标准命令).md commands(标准命令).md)&lt;/p>
&lt;h2 id="message-digest-commands--消息摘要命令">Message Digest commands # 消息摘要命令&lt;/h2>
&lt;p>消息摘要算法的实现(用于单向加密)。使用 dgst 命令&lt;/p>
&lt;h2 id="cipher-commands--密码命令">Cipher commands # 密码命令&lt;/h2>
&lt;p>其中都是各种加密算法，用于对称加密。使用 enc 命令&lt;/p>
&lt;h3 id="openssl-enc--对称密钥程序用于创建管理对称密钥">openssl enc # 对称密钥程序，用于创建管理对称密钥&lt;/h3>
&lt;p>OPTIONS&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-e&lt;/strong> # 加密文件&lt;/li>
&lt;li>&lt;strong>-d&lt;/strong> # 解密文件&lt;/li>
&lt;li>&lt;strong>-des3&lt;/strong> # 使用 des3 算法进行加密或解密&lt;/li>
&lt;li>&lt;strong>-a&lt;/strong> # 基于文本进行编码&lt;/li>
&lt;li>&lt;strong>-salt&lt;/strong> # 加入一些盐&lt;/li>
&lt;/ul>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>openssl enc -e -des3 -a -salt -in fstab -out fstab.ciphertext # 加密 fstab 文件为 fstab.ciphertext，算法为 des3，基于文本进行编码，加入一些 salt&lt;/li>
&lt;li>openssl enc -d -des3 -a -salt -in fstab.ciphertext -out fstab # 解密 fstab.ciphertext 为 fstab 文件&lt;/li>
&lt;/ul>
&lt;h1 id="应用实例">应用实例：&lt;/h1>
&lt;h2 id="创建自签-ca-证书">创建自签 ca 证书&lt;/h2>
&lt;ul>
&lt;li>(umask 077; openssl genrsa -out ca.key 2048)&lt;/li>
&lt;li>openssl req -new -x509 -key ca.key -days 3650 -out ca.crt&lt;/li>
&lt;/ul>
&lt;h2 id="在-kubernetes-中生成个人证书">在 kubernetes 中生成个人证书&lt;/h2>
&lt;ul>
&lt;li>在当前目录下生成一个 2048 位的名为 lch.key 的私钥（括号的作用是创建子 shell 执行命令，这样 umask 命令对当前 shell 没影响）
&lt;ul>
&lt;li>(umask 077;openssl genrsa -out lch.key 2048)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>使用 lck.key 进行证书申请
&lt;ul>
&lt;li>openssl req -new -key lch.key -out lch.csr -subj &amp;ldquo;/CN=lch&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>使用 ca.key 来给 lch.crt 颁发证书，以生成 lch.crt 文件
&lt;ul>
&lt;li>openssl x509 -req -in lch.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out lch.crt -days 365&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>查看 ca.crt 证书的信息
&lt;ul>
&lt;li>openssl x509 -in lch.crt -text -noout&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>openssl x509 部分命令&lt;/p>
&lt;p>打印出证书的内容：&lt;/p>
&lt;p>openssl x509 -in cert.pem -noout -text&lt;/p>
&lt;p>打印出证书的系列号&lt;/p>
&lt;p>openssl x509 -in cert.pem -noout -serial&lt;/p>
&lt;p>打印出证书的拥有者名字&lt;/p>
&lt;p>openssl x509 -in cert.pem -noout -subject&lt;/p>
&lt;p>以 RFC2253 规定的格式打印出证书的拥有者名字&lt;/p>
&lt;p>openssl x509 -in cert.pem -noout -subject -nameopt RFC2253&lt;/p>
&lt;p>在支持 UTF8 的终端一行过打印出证书的拥有者名字&lt;/p>
&lt;p>openssl x509 -in cert.pem -noout -subject -nameopt oneline -nameopt -escmsb&lt;/p>
&lt;p>打印出证书的 MD5 特征参数&lt;/p>
&lt;p>openssl x509 -in cert.pem -noout -fingerprint&lt;/p>
&lt;p>打印出证书的 SHA 特征参数&lt;/p>
&lt;p>openssl x509 -sha1 -in cert.pem -noout -fingerprint&lt;/p>
&lt;p>把 PEM 格式的证书转化成 DER 格式&lt;/p>
&lt;p>openssl x509 -in cert.pem -inform PEM -out cert.der -outform DER&lt;/p>
&lt;p>把一个证书转化成 CSR&lt;/p>
&lt;p>openssl x509 -x509toreq -in cert.pem -out req.pem -signkey key.pem&lt;/p>
&lt;p>给一个 CSR 进行处理，颁发字签名证书，增加 CA 扩展项&lt;/p>
&lt;p>openssl x509 -req -in careq.pem -extfile openssl.cnf -extensions v3_ca -signkey key.pem -out cacert.pem&lt;/p>
&lt;p>给一个 CSR 签名，增加用户证书扩展项&lt;/p>
&lt;p>openssl x509 -req -in req.pem -extfile openssl.cnf -extensions v3_usr -CA cacert.pem -CAkey key.pem -CAcreateserial&lt;/p>
&lt;p>查看 csr 文件细节：&lt;/p>
&lt;p>openssl req -in my.csr -noout -text&lt;/p></description></item><item><title>Docs: OpenSSL 配置详解</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/OpenSSL/OpenSSL-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/OpenSSL/OpenSSL-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.openssl.org/docs/manmaster/man5/config.html">Manual(手册),config(5)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.openssl.org/docs/manmaster/man5/x509v3_config.html">Manual(手册),x509v3_config(5)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.openssl.org/docs/man3.0/man1/openssl-req.html">Manual(),openssl-req(1)&lt;/a>-CONFIGURATION FILE FORMAT 部分&lt;/li>
&lt;li>&lt;a href="https://www.cnblogs.com/f-ck-need-u/p/6091027.html">https://www.cnblogs.com/f-ck-need-u/p/6091027.html&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>OpenSSL 配置文件为 OpenSSL 库及其二进制程序提供运行时参数。这是一个 &lt;a href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E6%97%A0%E6%B3%95%E5%88%86%E7%B1%BB%E7%9A%84%E8%AF%AD%E8%A8%80/INI.md">INI&lt;/a> 格式的配置文件。&lt;/p>
&lt;p>配置文件一共有三类格式：&lt;/p>
&lt;ul>
&lt;li>config # OpenSSL 通用配置格式&lt;/li>
&lt;li>fips_config # OpenSSL FIPS 配置格式&lt;/li>
&lt;li>x509v3_config # X.509 V3 证书扩展配置格式&lt;/li>
&lt;/ul>
&lt;p>OpenSSL 配置文件为 INI 格式的配置扩展了很多功能，并规定了一些新的规则：&lt;/p>
&lt;ul>
&lt;li>Section 中除了 &lt;strong>key/value pair(键值对)&lt;/strong> 以外，还可以包括 &lt;strong>Directives(指令)&lt;/strong>&lt;/li>
&lt;li>Section 中的 &lt;strong>Key/Value Pair 可以进行变量定义&lt;/strong>，也可以引用变量。此时 Key 就是变量名，Value 就是变量的值。
&lt;ul>
&lt;li>引用方式有 &lt;code>$VAR&lt;/code> 或 &lt;code>${VAR}&lt;/code> 两种，要想引用其他 Section 中的变量，则使用 &lt;code>$SectionName::VAR&lt;/code> 或 &lt;code>${SectionName::VAR}&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 这是默认 Section&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HOME &lt;span style="color:#f92672">=&lt;/span> /temp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> configdir &lt;span style="color:#f92672">=&lt;/span> $ENV::HOME/config
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[&lt;/span> section_one &lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Quotes permit leading and trailing whitespace&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> any &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34; any variable name &amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> other &lt;span style="color:#f92672">=&lt;/span> A string that can &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> cover several lines &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> by including &lt;span style="color:#ae81ff">\\&lt;/span> characters
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> message &lt;span style="color:#f92672">=&lt;/span> Hello World&lt;span style="color:#ae81ff">\n&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[&lt;/span> section_two &lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> greeting &lt;span style="color:#f92672">=&lt;/span> $section_one::message
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>配置文件中的第一部分是一个 &lt;code>默认&lt;/code> Section。若要引用默认 Section 的变量，则使用 &lt;code>ENV&lt;/code> 作为 Section 名&lt;/li>
&lt;li>可以在 Section 中引用其他 Section。比如：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># These must be in the default section&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> config_diagnostics &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 引用 openssl_init 部分的配置&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> openssl_conf &lt;span style="color:#f92672">=&lt;/span> openssl_init
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[&lt;/span>openssl_init&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 引用 oids 部分的配置&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> oid_section &lt;span style="color:#f92672">=&lt;/span> oids
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 以此类推&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> providers &lt;span style="color:#f92672">=&lt;/span> providers
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> alg_section &lt;span style="color:#f92672">=&lt;/span> evp_properties
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ssl_conf &lt;span style="color:#f92672">=&lt;/span> ssl_configuration
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> engines &lt;span style="color:#f92672">=&lt;/span> engines
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> random &lt;span style="color:#f92672">=&lt;/span> random
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[&lt;/span>oids&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ... new oids here ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[&lt;/span>providers&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ... provider stuff here ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[&lt;/span>evp_properties&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ... EVP properties here ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[&lt;/span>ssl_configuration&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ... SSL/TLS configuration properties here ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[&lt;/span>engines&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ... engine properties here ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[&lt;/span>random&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ... random properties here ...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;strong>特定的 Section 的名字是有意义的&lt;/strong>，比如 &lt;code>[req]&lt;/code> Section 可以为 &lt;code>openssl req&lt;/code> 命令提供参数，当执行 &lt;code>openssl req&lt;/code> 命令时，会从默认配置文件的 &lt;code>[req]&lt;/code> Section 获取配置参数，若没有，则再从 &lt;code>默认&lt;/code> Section 获取参数&lt;/li>
&lt;/ul>
&lt;h1 id="默认">[默认]&lt;/h1>
&lt;h1 id="req">[req]&lt;/h1>
&lt;p>&lt;strong>distinguished_name = &lt;!-- raw HTML omitted -->&lt;/strong> # 生成证书或 CSR 时，如何配置 DN(专有名称)。
&lt;strong>req_extensions = &lt;!-- raw HTML omitted -->&lt;/strong> # 要添加到 CSR 的扩展信息。&lt;/p>
&lt;h2 id="distinguished_name">[Distinguished_Name]&lt;/h2>
&lt;h2 id="req_extensions-">[Req_Extensions ]&lt;/h2>
&lt;blockquote>
&lt;p>关于 CSR 的扩展信息的格式，详见 &lt;a href="https://www.openssl.org/docs/manmaster/man5/x509v3_config.html">Manual(手册),x509v3_config(5)&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>basicConstraints = CA:FALSE&lt;/strong> #
&lt;strong>keyUsage = nonRepudiation, digitalSignature, keyEncipherment&lt;/strong> #
&lt;strong>extendedKeyUsage = clientAuth, serverAuth&lt;/strong> #
&lt;strong>subjectAltName = &lt;!-- raw HTML omitted -->&lt;/strong>#&lt;/p>
&lt;h3 id="subjectaltname">[SubjectAltName]&lt;/h3>
&lt;p>DNS.1 = abc
IP.1 = 1.1.1.1&lt;/p>
&lt;h1 id="默认配置文件详解">默认配置文件详解&lt;/h1>
&lt;p>默认的配置路径在 /etc/pki/tls/openssl.cnf，该文件主要设置了 CSR、签名、crl 相关的配置。为 &lt;code>ca&lt;/code>、&lt;code>req&lt;/code> 子命令提供信息。&lt;/p>
&lt;p>该文件默认自带 4 个 Section：默认、ca、req、tsa&lt;/p>
&lt;h2 id="默认-section">默认 Section&lt;/h2>
&lt;h2 id="ca-section">ca Section&lt;/h2>
&lt;p>[ ca ]
default&lt;em>ca = CA_default /_The default ca section&lt;/em>/
####################################################################
[ CA&lt;em>default ]
dir = /etc/pki/CA /&lt;/em> Where everything is kept &lt;em>/
/&lt;/em> #### 这是第一个 openssl 目录结构中的目录 &lt;em>/
certs = $dir/certs /&lt;/em> Where the issued certs are kept(已颁发的证书路径，即 CA 或自签的) &lt;em>/
/&lt;/em> #### 这是第二个 openssl 目录结构中的目录，但非必须 &lt;em>/
crl_dir = $dir/crl /&lt;/em> Where the issued crl are kept(已颁发的 crl 存放目录) &lt;em>/
/&lt;/em> #### 这是第三个 openssl 目录结构中的目录*/
database = $dir/index.txt /* database index file &lt;em>/
#unique_subject = no /&lt;/em> 设置为 yes 则 database 文件中的 subject 列不能出现重复值 &lt;em>/
/&lt;/em> 即不能为 subject 相同的证书或证书请求签名*/
/* 建议设置为 no，但为了保持老版本的兼容性默认是 yes &lt;em>/
new_certs_dir = $dir/newcerts /&lt;/em> default place for new certs(将来颁发的证书存放路径) &lt;em>/
/&lt;/em> #### 这是第四个 openssl 目录结构中的目录 &lt;em>/
certificate = $dir/cacert.pem /&lt;/em> The A certificate(CA 自己的证书文件) &lt;em>/
serial = $dir/serial /&lt;/em> The current serial number(提供序列号的文件)&lt;em>/
crlnumber = $dir/crlnumber /&lt;/em> the current crl number(当前 crl 序列号) &lt;em>/
crl = $dir/crl.pem /&lt;/em> The current CRL(当前 CRL) &lt;em>/
private_key = $dir/private/cakey.pem /&lt;/em> The private key(签名时需要的私钥，即 CA 自己的私钥) &lt;em>/
RANDFILE = $dir/private/.rand /&lt;/em> private random number file(提供随机数种子的文件) &lt;em>/
x509_extensions = usr_cert /&lt;/em> The extentions to add to the cert(添加到证书中的扩展项) &lt;em>/
/&lt;/em> 以下两行是关于证书展示格式的，虽非必须项，但推荐设置。一般就如下格式不用修改 &lt;em>/
name_opt = ca_default /&lt;/em> Subject Name options*/
cert_opt = ca_default /* Certificate field options &lt;em>/
/&lt;/em> 以下是 copy&lt;em>extensions 扩展项，需谨慎使用&lt;/em>/
# copy&lt;em>extensions = copy /&lt;/em> 生成证书时扩展项的 copy 行为，可设置为 none/copy/copyall &lt;em>/
/&lt;/em> 不设置该 name 时默认为 none &lt;em>/
/&lt;/em> 建议简单使用时设置为 none 或不设置，且强烈建议不要设置为 copyall &lt;em>/
# crl_extensions = crl_ext
default_days = 365 /&lt;/em> how long to certify for(默认的证书有效期) &lt;em>/
default_crl_days= 30 /&lt;/em> how long before next CRL(CRL 的有效期) &lt;em>/
default_md = default /&lt;/em> use public key default MD(默认摘要算法) &lt;em>/
preserve = no /&lt;/em> keep passed DN ordering(Distinguished Name 顺序，一般设置为 no &lt;em>/
/&lt;/em> 设置为 yes 仅为了和老版本的 IE 兼容)&lt;em>/
policy = policy_match /&lt;/em> 证书匹配策略,此处表示引用[ policy&lt;em>match ]的策略&lt;/em>/
/&lt;em>证书匹配策略定义了证书请求的 DN 字段(field)被 CA 签署时和 CA 证书的匹配规则&lt;/em>/
/&lt;em>对于 CA 证书请求，这些匹配规则必须要和父 CA 完全相同&lt;/em>/
[ policy&lt;em>match ]
countryName = match /&lt;/em> match 表示请求中填写的该字段信息要和 CA 证书中的匹配 &lt;em>/
stateOrProvinceName = match
organizationName = match
organizationalUnitName = optional /&lt;/em> optional 表示该字段信息可提供可不提供 &lt;em>/
commonName = supplied /&lt;/em> supplied 表示该字段信息必须提供 &lt;em>/
emailAddress = optional
/&lt;/em> For the &amp;lsquo;anything&amp;rsquo; policy*/
/* At this point in time, you must list all acceptable &amp;lsquo;object&amp;rsquo; types. &lt;em>/
/&lt;/em> 以下是没被引用的策略扩展，只要是没被引用的都是被忽略的 &lt;em>/
[ policy_anything ]
countryName = optional
stateOrProvinceName = optional
localityName = optional
organizationName = optional
organizationalUnitName = optional
commonName = supplied
emailAddress = optional
/&lt;/em> 以下是添加的扩展项 usr&lt;em>cert 的内容&lt;/em>/
[ usr&lt;em>cert ]
basicConstraints=CA:FALSE /&lt;/em> 基本约束，CA:FALSE 表示该证书不能作为 CA 证书，即不能给其他人颁发证书*/
/* keyUsage = critical,keyCertSign,cRLSign # 指定证书的目的，也就是限制证书的用法*/
/* 除了上面两个扩展项可能会修改下，其余的扩展项别管了，如下面的 _/
nsComment = &amp;ldquo;OpenSSL Generated Certificate&amp;rdquo;
subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid,issuer&lt;/p>
&lt;h2 id="req-section">req Section&lt;/h2>
&lt;p>为 &lt;code>openssl req&lt;/code> 命令提供运行时参数
[ req ]
default&lt;em>bits = 2048 /&lt;/em> 生成证书请求时用到的私钥的密钥长度 &lt;em>/
default_md = sha1 /&lt;/em> 证书请求签名时的单向加密算法 &lt;em>/
default_keyfile = privkey.pem /&lt;/em> 默认新创建的私钥存放位置， &lt;em>/
/&lt;/em> 如-new 选项没指定-key 时会自动创建私钥 &lt;em>/
/&lt;/em> -newkey 选项也会自动创建私钥 &lt;em>/
distinguished_name = req_distinguished_name /&lt;/em> 可识别的字段名(常被简称为 DN) &lt;em>/
/&lt;/em> 引用 req&lt;em>distinguished_name 段的设置&lt;/em>/
x509&lt;em>extensions = v3_ca /&lt;/em> 加入到自签证书中的扩展项 &lt;em>/
# req_extensions = v3_req /&lt;/em> 加入到证书请求中的扩展项 &lt;em>/
attributes = req_attributes /&lt;/em> 证书请求的属性，引用 req&lt;em>attributes 段的设置，可以不设置它&lt;/em>/
# encrypt&lt;em>key = yes | no /&lt;/em> 自动生成的私钥文件要加密否？一般设置 no，和-nodes 选项等价 &lt;em>/
/&lt;/em> 输入和输出私钥文件的密码，如果该私钥文件有密码，不写该设置则会提示输入 &lt;em>/
/&lt;/em> input&lt;em>password = secret&lt;/em>/
/&lt;em>output_password = secret&lt;/em>/
# prompt = yes | no /&lt;em>设置为 no 将不提示输入 DN field，而是直接从配置文件中读取，需要同时设置 DN 默认值，否则创建证书请求时将出错。&lt;/em>/
string&lt;em>mask = utf8only
[ req_distinguished_name ]
/&lt;/em> 以下项均可指定可不指定，但 ca 段的 policy 中指定为 match 和 supplied 一定要指定。 &lt;em>/
/&lt;/em> 以下选项都可以自定义，如 countryName = C，commonName = CN &lt;em>/
countryName = Country Name (2 letter code) /&lt;/em> 国家名(C) &lt;em>/
countryName_default = XX /&lt;/em> 默认的国家名 &lt;em>/
countryName_min = 2 /&lt;/em> 填写的国家名的最小字符长度 &lt;em>/
countryName_max = 2 /&lt;/em> 填写的国家名的最大字符长度 &lt;em>/
stateOrProvinceName = State or Province Name (full name) /&lt;/em> 省份(S) &lt;em>/
/&lt;/em> stateOrProvinceName&lt;em>default = Default Province&lt;/em>/
localityName = Locality Name (eg, city) /&lt;em>城市(LT)&lt;/em>/
localityName&lt;em>default = Default City
0.organizationName = Organization Name (eg, company) /&lt;/em> 公司(ON) &lt;em>/
0.organizationName_default = Default Company Ltd
organizationalUnitName = Organizational Unit Name (eg, section) /&lt;/em> 部门(OU) &lt;em>/
/&lt;/em> organizationalUnitName&lt;em>default =&lt;/em>/
/&lt;em>以下的 commonName(CN)一般必须给,如果作为 CA，那么需要在 ca 的 policy 中定义 CN = supplied&lt;/em>/
/&lt;em>CN 定义的是将要申请 SSL 证书的域名或子域名或主机名。&lt;/em>/
/&lt;em>例如要为 zhonghua.com 申请 ssl 证书则填写 zhonghua.com，而不能填写www.zhonghua.com&lt;/em>/
/&lt;em>要为www.zhonghua.com申请SSL则填写www.zhonghua.com&lt;/em>/
/&lt;em>CN 必须和将要访问的网站地址一样，否则访问时就会给出警告&lt;/em>/
/&lt;em>该项要填写正确，否则该请求被签名后证书中的 CN 与实际环境中的 CN 不对应，将无法提供证书服务&lt;/em>/
commonName = Common Name (eg, your name or your server&amp;rsquo;s hostname) /&lt;em>主机名(CN)&lt;/em>/
commonName&lt;em>max = 64
emailAddress = Email Address /&lt;/em> Email 地址，很多时候不需要该项的 &lt;em>/
emailAddress_max = 64
[ req_attributes ] /&lt;/em> 该段是为了某些特定软件的运行需要而设定的， &lt;em>/
/&lt;/em> 现在一般都不需要提供 challengepassword &lt;em>/
/&lt;/em> 所以该段几乎用不上 &lt;em>/
/&lt;/em> 所以不用管这段 &lt;em>/
challengePassword = A challenge password
challengePassword_min = 4
challengePassword_max = 20
unstructuredName = An optional company name
[ v3_req ]
/&lt;/em> Extensions to add to a certificate request &lt;em>/
basicConstraints = CA:FALSE
keyUsage = nonRepudiation, digitalSignature, keyEncipherment
[ v3_ca ]
/&lt;/em> Extensions for a typical CA &lt;em>/
subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid:always,issuer
basicConstraints = CA:true
# keyUsage = cRLSign, keyCertSign /&lt;/em> 典型的 CA 证书的使用方法设置，由于测试使用所以注释了 _/
/*如果真的需要申请为 CA/*么该设置可以如此配置 */&lt;/p>
&lt;p>可以自定义 DN(Distinguished Name)段中的字段信息，注意 ca 段中的 policy 指定的匹配规则中如果指定了 match 或这 supplied 的则 DN 中必须定义。例如下面的示例：由于只有 countryName、organizationName 和 commonName 被设定为 match 和 supplied，其余的都是 optional，所以在 DN 中可以只定义这 3 个字段，而且在 DN 中定义了自定义的名称。
[policy_to_match]
countryName = match
stateOrProvinceName = optional
organizationName = match
organizationalUnitName = optional
commonName = supplied
emailAddress = optional
[DN]
countryName = &amp;ldquo;C&amp;rdquo;
organizationName = &amp;ldquo;O&amp;rdquo;
commonName = &amp;ldquo;Root CA&amp;rdquo;&lt;/p>
&lt;h2 id="tas-section">tas Section&lt;/h2>
&lt;p>[ tsa ]
default_tsa = tsa_config1 # the default TSA section
[ tsa_config1 ]
# These are used by the TSA reply generation only.
dir = ./demoCA # TSA root directory
serial = $dir/tsaserial # The current serial number (mandatory)
crypto_device = builtin # OpenSSL engine to use for signing
signer_cert = $dir/tsacert.pem # The TSA signing certificate
# (optional)
certs = $dir/cacert.pem # Certificate chain to include in reply
# (optional)
signer_key = $dir/private/tsakey.pem # The TSA private key (optional)
signer_digest = sha256 # Signing digest to use. (Optional)
default_policy = tsa_policy1 # Policy if request did not specify it
# (optional)
other_policies = tsa_policy2, tsa_policy3 # acceptable policies (optional)
digests = sha1, sha256, sha384, sha512 # Acceptable message digests (mandatory)
accuracy = secs:1, millisecs:500, microsecs:100 # (optional)
clock_precision_digits = 0 # number of digits after dot. (optional)
ordering = yes # Is ordering defined for timestamps?
# (optional, default: no)
tsa_name = yes # Must the TSA name be included in the reply?
# (optional, default: no)
ess_cert_id_chain = no # Must the ESS cert id chain be included?
# (optional, default: no)
ess_cert_id_alg = sha1 # algorithm to compute certificate
# identifier (optional, default: sha1)&lt;/p>
&lt;h1 id="配置示例">配置示例&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>req&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>req_extensions &lt;span style="color:#f92672">=&lt;/span> v3_req
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>distinguished_name &lt;span style="color:#f92672">=&lt;/span> req_distinguished_name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>req_distinguished_name&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span> v3_req &lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>basicConstraints &lt;span style="color:#f92672">=&lt;/span> CA:FALSE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>keyUsage &lt;span style="color:#f92672">=&lt;/span> nonRepudiation, digitalSignature, keyEncipherment
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>extendedKeyUsage &lt;span style="color:#f92672">=&lt;/span> clientAuth, serverAuth
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>subjectAltName &lt;span style="color:#f92672">=&lt;/span> @alt_names
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>alt_names&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>DNS.1 &lt;span style="color:#f92672">=&lt;/span> abc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>IP.1 &lt;span style="color:#f92672">=&lt;/span> 1.1.1.1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Standard commands(标准命令)</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/OpenSSL/Standard-commands%E6%A0%87%E5%87%86%E5%91%BD%E4%BB%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/OpenSSL/Standard-commands%E6%A0%87%E5%87%86%E5%91%BD%E4%BB%A4/</guid><description>
&lt;h1 id="其他标准命令">其他标准命令&lt;/h1>
&lt;h2 id="openssl-passwd--对指定的字符串生成-hash-过的密码">openssl passwd # 对指定的字符串生成 hash 过的密码&lt;/h2>
&lt;p>&lt;strong>openssl password [OPTIONS] [STRING]&lt;/strong>
MD5 算法加密后的格式为：$算法简称$SALT$XXXXXX，算法简称为 1 或者 apr1，SALT 为指定的盐的字符串，XXXX 为生成的加密的字符串&lt;/p>
&lt;p>OPTIONS&lt;/p>
&lt;ul>
&lt;li>-crypt # standard Unix password algorithm (default)&lt;/li>
&lt;li>-1 # -1 基于 MD5 的密码算法（注意：不指定 salt 的话，会使用随机的 slat）&lt;/li>
&lt;li>-salt # 在生成加密的密码中加盐(salt)。（为什么叫盐详见&lt;a href="https://zh.wikipedia.org/wiki/%25E7%259B%2590_(%25E5%25AF%2586%25E7%25A0%2581%25E5%25AD%25A6)">https://zh.wikipedia.org/wiki/%E7%9B%90_(%E5%AF%86%E7%A0%81%E5%AD%A6)&lt;/a>这是密码学的一个概念）,加盐与不加盐得出的结果是不一样的&lt;/li>
&lt;/ul>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>openssl passwd -1 123456
&lt;ul>
&lt;li>结果为：$1$ONQ8XSuX$Cv0wy2WbbbwOt/YkXuAlU/&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>openssl passwd -1 -salt 123 123456
&lt;ul>
&lt;li>结果为：$1$123$7mft0jKnzzvAdU4t0unTG1&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="openssl-rand--生成伪随机数字节">openssl rand # 生成伪随机数字节&lt;/h2>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>openssl rand -hex 6 # 生成随机数&lt;/li>
&lt;/ul>
&lt;h1 id="rsa-标准命令">RSA 标准命令&lt;/h1>
&lt;h2 id="openssl-genrsa--生成-rsa-密钥">openssl genrsa # 生成 RSA 密钥&lt;/h2>
&lt;h3 id="syntax语法">Syntax(语法)&lt;/h3>
&lt;p>&lt;strong>openssl genrsa [ OPTIONS ] [ ARGUMENTS ]&lt;/strong>&lt;/p>
&lt;p>OPTIONS&lt;/p>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>在当前目录下生成一个 2048 位的名为 lch.key 的私钥（括号的作用是创建子 shell 执行命令，这样 umask 命令对当前 shell 没影响）
&lt;ul>
&lt;li>&lt;strong>(umask 077; openssl genrsa -out ./lch.key 2048)&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="openssl-rsa--rsa-密钥管理">openssl rsa # RSA 密钥管理&lt;/h2>
&lt;p>openssl rsa [OPTIONS] [ARGUMENTS]&lt;/p>
&lt;p>OPTIONS&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-noout&lt;/strong> # 不输出密钥的编码格式&lt;/li>
&lt;li>&lt;strong>-text&lt;/strong> # 除了编码后的格式，还会输出纯文本格式的内容，这些内容有公钥和私钥组件&lt;/li>
&lt;/ul>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>从 lch.key 私钥中输出公钥信息，并将公钥信息写入到 lch.pub 文件中
&lt;ul>
&lt;li>&lt;strong>openssl rsa -in lch.key -pubout -out lch.pub&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>显示 ca.key 密钥的信息
&lt;ul>
&lt;li>&lt;strong>openssl rsa -noout -text -in ca.key&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="证书标准命令">证书标准命令&lt;/h1>
&lt;h2 id="openssl-ca--sample-minimal-ca-applicationca-程序">openssl ca # sample minimal CA application。CA 程序&lt;/h2>
&lt;p>&lt;strong>注意&lt;/strong>：使用 &lt;code>req&lt;/code> 和 &lt;code>x509&lt;/code> 命令是非常精简的生成证书的方式。&lt;/p>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>在 CA 所在服务器使用 httpd.csr 的请求文件签署证书生成证书文件 httpd.crt，然后再把该证书文件，发送给请求方，整套流程就完成了。
&lt;ul>
&lt;li>注意：如果想要执行该命令，需要注意为该服务器进行 CA 的配置，详见本章前面的&amp;quot;配置文件说明&amp;quot;&lt;/li>
&lt;li>openssl ca -in httpd.csr -out httpd.crt -days 365&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>openssl ca -revoke /etc/pki/CA/newcerts/SERIAL.pem # 吊销证书&lt;/li>
&lt;li>openssl ca -gencrl -out&lt;/li>
&lt;/ul>
&lt;h2 id="openssl-req--生成根证书或符合-pkcs-10-标准的证书请求">openssl req # 生成根证书或符合 PKCS #10 标准的证书请求&lt;/h2>
&lt;p>该命令主要以 PKCS#10 标准格式创建和处理 CSR。并且还可以创建自签名证书，以用作根 CA 证书。&lt;/p>
&lt;h3 id="syntax语法-1">Syntax(语法)&lt;/h3>
&lt;p>&lt;strong>openssl req [ OPTIONS ] [ ARGUMENTS ]&lt;/strong>
OPTIONS&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-config &amp;lt;FILENAME&amp;gt;&lt;/strong> #&lt;/li>
&lt;li>&lt;strong>-new&lt;/strong> # 生成新证书请求&lt;/li>
&lt;li>&lt;strong>-x509&lt;/strong> # 生成自签证书&lt;/li>
&lt;li>&lt;strong>-key /PATH/FILE&lt;/strong> # 指明用于生成请求时用到的私钥文件&lt;/li>
&lt;li>&lt;strong>-days NUM&lt;/strong> # 指明证书的有效期&lt;/li>
&lt;li>&lt;strong>-text&lt;/strong> # 以文本形式打印出证书&lt;/li>
&lt;li>&lt;strong>-noout&lt;/strong> # 不输出证书的编码格式内容&lt;/li>
&lt;/ul>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>创建一个 ca 自签证书。
&lt;ul>
&lt;li>openssl req -new -x509 -key /etc/pki/CA/private/cakey.pem -days 3650 -out /etc/pki/CA/cacert.pem&lt;/li>
&lt;li>这个命令之后还需要输入几个身份信息，如下。输入完成后，自动生成 CA 自签证书
&lt;ul>
&lt;li>Country Name (2 letter code) [XX]:CN # 指明国家名，两个英文缩写&lt;/li>
&lt;li>State or Province Name (full name) []:Tianjin # 指明省或州名&lt;/li>
&lt;li>Locality Name (eg, city) [Default City]:Tianjin # 指明地点名称，例如城市&lt;/li>
&lt;li>Organization Name (eg, company) [Default Company Ltd]:GuanDian # 指明组织名称。例如公司&lt;/li>
&lt;li>Organizational Unit Name (eg, section) []:Ops # 指明组织单位名称，例如部门&lt;/li>
&lt;li>Common Name (eg, your name or your server&amp;rsquo;s hostname) []:master0 # 指明通用名称，例如 CA 名或者服务器主机名。
&lt;ul>
&lt;li>Note：证书中的 CN 是很重要的标志，CN 可以使用主机名来表示，这样在使用证书来访问的时候，可以使用 CN 来验证域名是否可信。&lt;/li>
&lt;li>如果 CN 不使用主机名，则在签发证书的时候，需要 subjectAltName 字段来设定 DNS 别名，否则会报错提示证书对某些域名不可用。&lt;/li>
&lt;li>样例详见 harbor 使用私有证书部署：harbor 云原生注册中心.note&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Email Address []:373406000@qq.com # 指明邮箱地址&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>使用 httpd.key 这个密钥创建一个证书请求文件 httpd.csr
&lt;ul>
&lt;li>openssl req -new -key httpd.key -days 365 -out httpd.csr&lt;/li>
&lt;li>在输入完该命令后，同样需要输入几个身份信息以供 CA 进行验证。由于是私有 CA，所以所有信息应该保持跟 CA 的信息一样，具体信息详见上面那个命令，否则无法签署成功。后面还可以输入密码，当然密码也可以为空，密码主要是对改请求进行加密的。创建完请求后，把该请求文件 XXX.csr 发送给 CA 所在的服务器，然后由 CA 进行签署。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="openssl-x509--证书显示或签名工具">openssl x509 # 证书显示或签名工具&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.openssl.org/docs/manmaster/man1/openssl-x509.html">Manual(手册),openssl-x509(1)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>这是一个多用途的证书处理命令。&lt;/p>
&lt;ul>
&lt;li>可以用于打印证书信息&lt;/li>
&lt;li>将证书转换为各种形式&lt;/li>
&lt;li>编辑证书信息设置&lt;/li>
&lt;li>从头开始或从认证请求生成证书&lt;/li>
&lt;li>等等&lt;/li>
&lt;/ul>
&lt;h3 id="syntax语法-2">Syntax(语法)&lt;/h3>
&lt;p>&lt;strong>openssl x509 [ OPTIONS ] [ ARGUMENTS ]&lt;/strong>&lt;/p>
&lt;h4 id="input-output-and-general-purpose-options输入输出通用选项">Input, Output, and General Purpose OPTIONS(输入、输出、通用选项)&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>-noout&lt;/strong> # 禁止输出证书请求文件中的编码部分&lt;/li>
&lt;li>&lt;strong>-pubkey&lt;/strong># 输出证书中的公钥&lt;/li>
&lt;li>&lt;strong>-modulus&lt;/strong># 输出证书中公钥模块部分&lt;/li>
&lt;li>&lt;strong>-serial&lt;/strong> # 输出证书的序列号&lt;/li>
&lt;li>&lt;strong>-subject&lt;/strong># 输出证书中的 subject&lt;/li>
&lt;li>&lt;strong>-issuer&lt;/strong># 输出证书中的 issuer，即颁发者的 subject&lt;/li>
&lt;li>&lt;strong>-subject_hash&lt;/strong> # 输出证书中 subject 的 hash 码&lt;/li>
&lt;li>&lt;strong>-issuer_hash&lt;/strong> # 输出证书中 issuer(即颁发者的 subject)的 hash 码&lt;/li>
&lt;li>&lt;strong>-hash&lt;/strong> # 等价于&amp;quot;-subject_hash&amp;quot;，但此项是为了向后兼容才提供的选项&lt;/li>
&lt;li>&lt;strong>-email&lt;/strong># 输出证书中的 email 地址，如果有 email 的话&lt;/li>
&lt;li>&lt;strong>-startdate&lt;/strong> # 输出证书有效期的起始日期&lt;/li>
&lt;li>&lt;strong>-enddate&lt;/strong> # 输出证书有效期的终止日期&lt;/li>
&lt;li>&lt;strong>-dates&lt;/strong> # 输出证书有效期，等价于&amp;quot;startdate+enddate&amp;quot;&lt;/li>
&lt;li>&lt;strong>-fingerprint&lt;/strong> # 输出指纹摘要信息&lt;/li>
&lt;/ul>
&lt;h4 id="certificate-printing-options证书打印选项">Certificate Printing OPTIONS(证书打印选项)&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>-text&lt;/strong> # 以 text 格式输出证书内容，即以最全格式输出、包括 public key,signature algorithms,issuer 和 subject names,serial number 以及 any trust settings.&lt;/li>
&lt;/ul>
&lt;h4 id="certificate-checking-options证书检查选项">Certificate Checking OPTIONS(证书检查选项)&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>-days&lt;/strong> #&lt;/li>
&lt;li>&lt;strong>-extfile &lt;!-- raw HTML omitted -->&lt;/strong> #&lt;/li>
&lt;li>&lt;strong>-extensions &lt;!-- raw HTML omitted -->&lt;/strong> # 从 -extfile 选项指定的文件中指定 SectionName，该 Section 中的参数用来配置 X.509 证书的 &lt;code>X509v3 extensions&lt;/code> 字段。
&lt;ul>
&lt;li>若未指定本选项，则默认使用 “默认部分” 的 extensions 指令。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="certificate-output-options证书输出选项">Certificate Output OPTIONS(证书输出选项)&lt;/h4>
&lt;h4 id="micro-ca-options">Micro-CA OPTIONS&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>-CA &amp;lt;FileName|URI&amp;gt;&lt;/strong> # 指定用于签署证书的 CA 证书。&lt;/li>
&lt;li>&lt;strong>-CAkey &amp;lt;FileName|URI&amp;gt;&lt;/strong> # 指定用于签署证书的 CA 私钥。&lt;/li>
&lt;/ul></description></item></channel></rss>