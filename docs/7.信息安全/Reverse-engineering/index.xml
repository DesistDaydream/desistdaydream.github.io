<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦的站点 – Reverse engineering</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Reverse-engineering/</link><description>Recent content in Reverse engineering on 断念梦的站点</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Reverse-engineering/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Reverse engineering</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Reverse-engineering/Reverse-engineering/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Reverse-engineering/Reverse-engineering/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Reverse_engineering">Wiki，Reverse_engineering&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Software_cracking">Wiki，Software_cracking&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Reverse engineering(逆向工程)&lt;/strong>&lt;/p>
&lt;p>逆向工程的其他目的包括安全审核、消除复制保护（“破解”）、规避消费电子产品中常见的访问限制、定制嵌入式系统（例如引擎管理系统）、内部维修或改造、低成本“残缺”硬件（例如某些显卡芯片组）上的附加功能，甚至只是满足好奇心。&lt;/p>
&lt;p>&lt;strong>Software cracking(软件破解)&lt;/strong>&lt;/p>
&lt;h1 id="学习">学习&lt;a class="td-heading-self-link" href="#%e5%ad%a6%e4%b9%a0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;a href="https://www.52pojie.cn/">吾爱破解&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/97o3fX9AN_kl2GCLhHAfig">吾爱破解安卓逆向入门教程《安卓逆向这档事》十五、是时候学习一下Frida一把梭了(下)&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://www.tulingpyton.cn/">图灵 Python&lt;/a> 何老师相关课程&lt;/p>
&lt;p>&lt;a href="https://blog.csdn.net/weixin_43582101">李玺&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/lixi5338619">https://github.com/lixi5338619&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.lxspider.com/">http://www.lxspider.com/&lt;/a> 博客&lt;/li>
&lt;li>&lt;a href="https://github.com/lixi5338619/lxBook">https://github.com/lixi5338619/lxBook&lt;/a> 《爬虫逆向进阶实战》&lt;/li>
&lt;li>&lt;a href="https://space.bilibili.com/390499740/channel/collectiondetail?sid=468228&amp;amp;ctype=0">https://space.bilibili.com/390499740/channel/collectiondetail?sid=468228&amp;amp;ctype=0&lt;/a> 实战示例视频&lt;/li>
&lt;/ul>
&lt;h1 id="常见安全策略">常见安全策略&lt;a class="td-heading-self-link" href="#%e5%b8%b8%e8%a7%81%e5%ae%89%e5%85%a8%e7%ad%96%e7%95%a5" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>JS 混淆&lt;/p>
&lt;ul>
&lt;li>在 Fetch/XHR 的请求中，从开发者工具查看该请求的启动器，如果函数名、变量名都是 &lt;code>_0x5601f0&lt;/code> 这类以 &lt;code>_0x&lt;/code> 开头的，说明代码是经过混淆的&lt;/li>
&lt;/ul>
&lt;p>数据 RSA、AES、etc. 加密&lt;/p>
&lt;p>APP 加固&lt;/p>
&lt;p>APP 加壳&lt;/p>
&lt;h1 id="逆向常用工具">逆向常用工具&lt;a class="td-heading-self-link" href="#%e9%80%86%e5%90%91%e5%b8%b8%e7%94%a8%e5%b7%a5%e5%85%b7" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;strong>x64dbg&lt;/strong> # 适用于 Windows 的开源用户模式调试器。针对逆向工程和恶意软件分析进行了优化。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/x64dbg/x64dbg">GitHub 项目，x64dbg/x64dbg&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://x64dbg.com/">https://x64dbg.com/&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Cheat Engine&lt;/strong> # Cheat Engine 是一个专注于修改个人使用的游戏和应用程序的开发环境。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/cheat-engine/cheat-engine">GitHub 项目，cheat-engine/cheat-engine&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Packet%20analyzer/Packet%20analyzer.md">Packet analyzer&lt;/a>&lt;/p>
&lt;p>&lt;a href="http://www.cnlans.com/lx/tools">http://www.cnlans.com/lx/tools&lt;/a> 李玺的爬虫逆向工具&lt;/p>
&lt;h2 id="待整理工具">待整理工具&lt;a class="td-heading-self-link" href="#%e5%be%85%e6%95%b4%e7%90%86%e5%b7%a5%e5%85%b7" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="查壳反编译">查壳反编译&lt;a class="td-heading-self-link" href="#%e6%9f%a5%e5%a3%b3%e5%8f%8d%e7%bc%96%e8%af%91" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://pan.baidu.com/s/1s1BoElAyQCnPaxb2T3QpEw?pwd=tmbs">查壳小工具&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://down.52pojie.cn/Tools/Android_Tools/">AndroidKiller&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://pan.baidu.com/s/12qB4N_2Fg-IsTB2BcQuiDw?pwd=gjqs">Apktools2.5.0&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://pan.baidu.com/s/1SHsJGfnGJJmcPfgcC_lnYA?pwd=9999">超级Jadx&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://pan.baidu.com/s/1_-PorRCwHDMpmUI1t_cKcQ?pwd=t39m">IDAPro7.0 调试工具Windows版本&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://pan.baidu.com/s/1wdsZvTA-fAZ12o53Exw80A?pwd=wk3d">ddms&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://pan.baidu.com/s/1kCjw8dP9tq7kLBWkublHag?pwd=k2s4">JEB3.0中文版&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://pan.baidu.com/s/1HgyyEomL72jLWY1XMtHv8g?pwd=zpha">JEB2.3.7&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="脱壳工具">脱壳工具&lt;a class="td-heading-self-link" href="#%e8%84%b1%e5%a3%b3%e5%b7%a5%e5%85%b7" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://pan.baidu.com/s/1e0zcp1IzA-u7UC-A3gaj8g?pwd=yds2">FDex2&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://pan.baidu.com/s/170oS04qoFdd-Btu9DanHfg?pwd=an39">反射大师&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://pan.baidu.com/s/18gijmyy5dgUCbwi-hnqtpg?pwd=433u">BlackDex3.1.0&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/WrBug/dumpDex">DumpDex&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/hluwa/FRIDA-DEXDump">FRIDA-DEXDump&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="hook工具">HOOK工具&lt;a class="td-heading-self-link" href="#hook%e5%b7%a5%e5%85%b7" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://pan.baidu.com/s/15WnJD8qj9UzSss55DWLNfA?pwd=7sgb">Xposed&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://pan.baidu.com/s/1fd0r2fy4mm4jUArGE4MZvA?pwd=mu9q">VAExposed&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://pan.baidu.com/s/1WfnVM7hKE76jNpQc3FnKWg?pwd=pvcs">Inspeckage&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://pan.baidu.com/s/1EZuv-JK0a-TLHhw4v6SkvQ?pwd=dsfj">SSLUnpinning 20&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="抓包工具">抓包工具&lt;a class="td-heading-self-link" href="#%e6%8a%93%e5%8c%85%e5%b7%a5%e5%85%b7" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://pan.baidu.com/s/1mdHHaXulnsM6Zxf335yMHA?pwd=tfhx">httpCanary 安卓抓包工具&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://pan.baidu.com/s/1A-2kIVnYSxpgHqiDn4mqnw?pwd=1e5k">Postern安卓抓包工具&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://pan.baidu.com/s/14d6ezZXRWDQayL73d2E8gw?pwd=tyk7">Drony_113&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://pan.baidu.com/s/1p3ThL5yqqc5XwTrDdmmGCg?pwd=x9hg">HttpAnalyzerStd V7&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://pan.baidu.com/s/1u_P2P_kd_H2n2SYTaLB0hA?pwd=jovi">fridaManager&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://pan.baidu.com/s/1_j2QTVFD6qHP3FKp_FVeCw?pwd=6qmu">AppSignGet&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="chrome插件">chrome插件&lt;a class="td-heading-self-link" href="#chrome%e6%8f%92%e4%bb%b6" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://pan.baidu.com/s/1OmMiE4rJrTNwarw3EJbz0A?pwd=thyl">request-hook&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/L018/Trace">Trace-dist&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="微信小程序">微信小程序&lt;a class="td-heading-self-link" href="#%e5%be%ae%e4%bf%a1%e5%b0%8f%e7%a8%8b%e5%ba%8f" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://pan.baidu.com/s/1dwUehOAnPka9eHjXN6Y-Lg?pwd=unp7">UnpackMiniApp&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/Cherrison/CrackMinApp">CrackMinApp&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="其他常用工具">其他常用工具&lt;a class="td-heading-self-link" href="#%e5%85%b6%e4%bb%96%e5%b8%b8%e7%94%a8%e5%b7%a5%e5%85%b7" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://pan.baidu.com/s/1Ek34ePZpJYTkmiCuKsqIMQ?pwd=hnku">FontCreator英文版&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://pan.baidu.com/s/1hjdgx3DOTJMp0wtYGAa67A?pwd=1s67">鬼鬼JS调试工具&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://pan.baidu.com/s/1AfBDHVvini4bweDOD9GoIw?pwd=9999">MT 管理器&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://pan.baidu.com/s/1X5g8loORq_WS0HLqeasLbg?pwd=9jk7">NP 管理器&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://pan.baidu.com/s/1bbjFWMjFU5m2RupRyIZcGw?pwd=4ikp">Autojs&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="待整理">待整理&lt;a class="td-heading-self-link" href="#%e5%be%85%e6%95%b4%e7%90%86" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>验证码技术&lt;/p>
&lt;ul>
&lt;li>腾讯防水墙&lt;/li>
&lt;li>阿里无感 v3&lt;/li>
&lt;li>极验4代点选&lt;/li>
&lt;li>小红书 数美验证&lt;/li>
&lt;li>百度旋转验证&lt;/li>
&lt;li>易盾&lt;/li>
&lt;li>顶象&lt;/li>
&lt;li>瑞数&lt;/li>
&lt;/ul>
&lt;p>JSVMP 加密&lt;/p>
&lt;h1 id="小程序逆向">小程序逆向&lt;a class="td-heading-self-link" href="#%e5%b0%8f%e7%a8%8b%e5%ba%8f%e9%80%86%e5%90%91" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="调试小程序">调试小程序&lt;a class="td-heading-self-link" href="#%e8%b0%83%e8%af%95%e5%b0%8f%e7%a8%8b%e5%ba%8f" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://desistdaydream.github.io/docs/Mobile%20device/Mobile%20app.md">Mobile app&lt;/a>&lt;/p>
&lt;p>TODO: 其他待整理&lt;/p>
&lt;h2 id="反编译小程序">反编译小程序&lt;a class="td-heading-self-link" href="#%e5%8f%8d%e7%bc%96%e8%af%91%e5%b0%8f%e7%a8%8b%e5%ba%8f" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://www.bilibili.com/video/BV1ew411K7nB?p=40">https://www.bilibili.com/video/BV1ew411K7nB?p=40&lt;/a>&lt;/p>
&lt;p>微信小程序目录位置&lt;/p>
&lt;ul>
&lt;li>PC
&lt;ul>
&lt;li>&lt;code>WeChat Files\Applet\&lt;/code> # 该目录为小程序所在文件夹。每个小程序文件都是一个独立的文件夹，以 wx 开头，像 &lt;code>wx64479c83c7630409&lt;/code> 这样&lt;/li>
&lt;li>想要找到对应的小程序，可以把所有 wx 开头的文件夹都删除，然后打开小程序，就会生成一个信息的 wx 开头的文件夹。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>UnpackMiniApp # 解密 &lt;code>*.wxapkg&lt;/code> 文件获得 &lt;code>*.wxapkg&lt;/code> 文件。TODO: 为什么要先解密？这是加的什么密？&lt;/p>
&lt;ul>
&lt;li>找不到官方下载渠道&lt;/li>
&lt;/ul>
&lt;p>Unveilr # 反编译解密后的 &lt;code>*.wxapkg&lt;/code> 文件得到源码。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/r3x5ur/unveilr">https://github.com/r3x5ur/unveilr&lt;/a> # 好像是原始源码，但是 2.0 之后的版本作者收费了
&lt;ul>
&lt;li>只有个下载地址和 TG 号 &lt;a href="https://t.me/Qobg3fbwQM1hNTY1">https://t.me/Qobg3fbwQM1hNTY1&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://u.openal.lat/">https://u.openal.lat/&lt;/a> 提供下载和花钱买 token&lt;/li>
&lt;li>下面是一些 2.0.2 版本源码的备份
&lt;ul>
&lt;li>&lt;a href="https://github.com/AnkioTomas/unveilr">https://github.com/AnkioTomas/unveilr&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/CoderYiXin/unveilr">https://github.com/CoderYiXin/unveilr&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>使用微信开发者工具打开项目&lt;/p>
&lt;p>其他反编译小程序的项目&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/wux1an/wxapkg">https://github.com/wux1an/wxapkg&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/zgqwork/wxapkg-unpacker">https://github.com/zgqwork/wxapkg-unpacker&lt;/a>
&lt;ul>
&lt;li>基于 &lt;a href="https://github.com/qwerty472123/wxappUnpacker">https://github.com/qwerty472123/wxappUnpacker&lt;/a>, 该项目已于 2021 年删库归档&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="web-逆向">Web 逆向&lt;a class="td-heading-self-link" href="#web-%e9%80%86%e5%90%91" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>从 &lt;a href="https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Cryptography/%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E7%9A%84%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5.md">加密解密的最佳实践&lt;/a> 中可以看到常见的加密/解密方式。&lt;/p>
&lt;p>很多时候我们无法用其他语言实现找到的 js 代码，但是又想要使用 Python 怎么办呢，可以使用一些第三方库，以便让 Python 可以执行 JS 代码（e.g. pyexecjs、js2py）&lt;/p>
&lt;p>在 &lt;a href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF.md">编程技术&lt;/a> 可以知道网站的数据有动态和静态两种。&lt;/p>
&lt;ul>
&lt;li>若是静态的数据，在 “&lt;a href="https://desistdaydream.github.io/docs/Web/Browser/DevTools.md">DevTools&lt;/a> - 网络 - 文档” 中查看数据资源
&lt;ul>
&lt;li>静态数据通常是直接返回 HTML 页面，此时我们可以直接使用各种语言的 DOM 树管理库，通过 XPath 等方式定位元素，以获取其中的数据&lt;/li>
&lt;li>这类网站有的时候有个特点，一个页面有需要两次请求，第一次返回一段 js 代码，然后生成 cookie，第二次带着 cookie 发起请求再获取到静态 HTML 数据。
&lt;ul>
&lt;li>这两次请求需要在 开发者工具 - 网络 中打开 “保留日志” 功能才可以看到第一次。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://www.bilibili.com/video/BV1ew411K7nB?p=19">https://www.bilibili.com/video/BV1ew411K7nB?p=19&lt;/a> 这里有介绍。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>若是动态的数据，在 “&lt;a href="https://desistdaydream.github.io/docs/Web/Browser/DevTools.md">DevTools&lt;/a> - 网络 - Fetch/XHR” 中查看数据资源&lt;/li>
&lt;/ul>
&lt;p>扣 js 代码。主要是找到加密/解密相关的 JS 代码，找到后大段大段得放到本地，给定已加密的数据，可以正常解密就算成功。绝大部分都是扣的函数，然后传密文（密文响应体能直接看到）进去返回明文。而 JS 代码又可以被 Python 执行。&lt;/p>
&lt;ul>
&lt;li>第一步扣下来的代码通常都缺少函数、变量等，一步一步寻找并扣到缺失的函数或变量，形成完整的解密代码。&lt;/li>
&lt;li>&lt;a href="https://www.bilibili.com/video/BV1ew411K7nB?t=221.2&amp;amp;p=15">https://www.bilibili.com/video/BV1ew411K7nB?t=221.2&amp;amp;p=15&lt;/a>&lt;/li>
&lt;li>控制台输入内容的返回值若是函数，双击函数可以跳转到代码位置。&lt;/li>
&lt;li>使用 &lt;code>函数名.toString()&lt;/code> 的方式可以直接在控制台输出函数。此时从控制台直接拷贝即可。&lt;/li>
&lt;li>在源代码页面把鼠标放到函数上，可以看到 &lt;code>FunctionLacation&lt;/code> 标志，右侧有个连接，点击即可跳转到该函数。&lt;/li>
&lt;li>通过控制台的代码段重写 &lt;code>JSON.stringify&lt;/code>、&lt;code>JSON.parse&lt;/code> 等常见方法的逻辑，添加 debugger 关键字，以便在代码无法找到时，虽慢但准得找到解密相关代码。
&lt;ul>
&lt;li>&lt;a href="https://www.bilibili.com/video/BV1Cz4y1w78y">https://www.bilibili.com/video/BV1Cz4y1w78y&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>补环境。有的代码，可能会获取浏览器特定的一些属性，比如 &lt;a href="https://desistdaydream.github.io/docs/Web/WebAPIs/WebAPIs.md">WebAPIs&lt;/a> 中 document、window 等对象中的数据。此时如果使用代码编译器运行代码的场合是没有办法获取到这些信息的，需要在代码中手动造一些浏览器信息。&lt;/p>
&lt;h2 id="js-逆向的调试方法">JS 逆向的调试方法&lt;a class="td-heading-self-link" href="#js-%e9%80%86%e5%90%91%e7%9a%84%e8%b0%83%e8%af%95%e6%96%b9%e6%b3%95" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.bilibili.com/video/BV1ew411K7nB/?p=3">JS 逆向的调试方法&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;ul>
&lt;li>使用 &lt;code>Ctrl + Shift + C&lt;/code> 定位感兴趣的元素。&lt;/li>
&lt;li>在网络中使用 &lt;code>Ctrl + f&lt;/code> 打开搜索，并搜索关键字，找到被选中的请求&lt;/li>
&lt;li>从网络标签中找到被选中（深灰色北京）的请求，点击该请求的 &lt;code>Initiator(启动器)&lt;/code> 进入到代码位置&lt;/li>
&lt;li>如何查找代码有多种方式。首先使用左下角的 &lt;em>美观输出&lt;/em>，随后在代码中寻找感兴趣的内容。
&lt;ul>
&lt;li>比如查找 sign 之类的关键字，找到 sign 的生成逻辑。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="已加密的数据如何处理">已加密的数据如何处理&lt;a class="td-heading-self-link" href="#%e5%b7%b2%e5%8a%a0%e5%af%86%e7%9a%84%e6%95%b0%e6%8d%ae%e5%a6%82%e4%bd%95%e5%a4%84%e7%90%86" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;blockquote>
&lt;ul>
&lt;li>&lt;a href="https://www.bilibili.com/video/BV1ew411K7nB/?p=4">遇到数据加密如何处理（一）&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.bilibili.com/video/BV1ew411K7nB?p=6">遇到数据加密如何处理（二）&lt;/a>&lt;/li>
&lt;li>视频已上传到网盘&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>已加密的数据在上文调试方法中是搜索不到的。这种通常都是使用 &lt;a href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/ECMAScript%20%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/AJAX.md">AJAX&lt;/a> 获取的数据，也就是对响应体中的 json 加密，由客户端解密才能看到。&lt;/p>
&lt;p>此时通过保存加密数据的键（常见的为 key、encrypt 等等），找到代码位置，打上断点后，进行 &lt;em>单步调试&lt;/em> 直到找到生成逻辑。&lt;/p>
&lt;h2 id="js-混淆如何处理">JS 混淆如何处理&lt;a class="td-heading-self-link" href="#js-%e6%b7%b7%e6%b7%86%e5%a6%82%e4%bd%95%e5%a4%84%e7%90%86" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;blockquote>
&lt;ul>
&lt;li>&lt;a href="https://www.bilibili.com/video/BV1ew411K7nB/?p=7">关于数据加密js混淆的处理方式&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>可以参考下面复杂代码逻辑的查找部分。&lt;/p>
&lt;h2 id="复杂代码逻辑的查找">复杂代码逻辑的查找&lt;a class="td-heading-self-link" href="#%e5%a4%8d%e6%9d%82%e4%bb%a3%e7%a0%81%e9%80%bb%e8%be%91%e7%9a%84%e6%9f%a5%e6%89%be" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>假如一个接口需要填写 signature，而且直接搜索关键字无法找到，那么就需要通过通过接口进入代码，逐步调试，直到找到 加密/解密 的逻辑。&lt;/p>
&lt;p>首先从 Fetch/XHR 接口的 Initiator(启动器) 进入接口代码，在进来的位置打上断点，刷新数据。此时查看 &lt;strong>Call Stack(调用堆栈)&lt;/strong>。Call Stack 从上往下就是代码执行顺序的逆向，Call Stack 往下，就是上一步代码的执行位置。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/reverse/202401181743939.png" alt="image.png|300">&lt;/p>
&lt;p>比如当前在 &lt;code>(anonymous)&lt;/code> 的位置，通常某个 Fetch/XHR 接口通过启动器进来的地方都是 send() 方法，也就是发送请求的最后一步，在这里找到 sign 的值。&lt;/p>
&lt;p>然后我们在 Call Stack 中往下点击 e.exporter 进入上一步函数调用的位置，依次类推。然后若是到某个 Stack 处没有数据可显示，就在这里打上断点并取消上一个断点，重新刷新获取数据，这么循环查找下去。&lt;/p>
&lt;p>直到某个 Stack 中没有 sign 数据的地方为止。那么 sign 的生成逻辑就在这个调用附近。（通常还没到 sign 没数据的时候，一般也就找到了）&lt;/p>
&lt;blockquote>
&lt;p>可以从 Scope(作用域)、Console、鼠标移动到源码的变量或函数上，以查看 sign 的值。&lt;/p>
&lt;/blockquote>
&lt;h2 id="请求参数中的-sign-如何处理">请求参数中的 sign 如何处理&lt;a class="td-heading-self-link" href="#%e8%af%b7%e6%b1%82%e5%8f%82%e6%95%b0%e4%b8%ad%e7%9a%84-sign-%e5%a6%82%e4%bd%95%e5%a4%84%e7%90%86" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;blockquote>
&lt;p>&lt;a href="https://www.bilibili.com/video/BV1ew411K7nB/?p=9">请求参数sign逆向&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h2 id="hook-代码段">Hook 代码段&lt;a class="td-heading-self-link" href="#hook-%e4%bb%a3%e7%a0%81%e6%ae%b5" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>有些混淆代码无法查找，通过编写代码段后调试，可以快速定位。&lt;/p>
&lt;p>比如下面这个，可以通过 &lt;code>JSON.stringify = function (params) {}&lt;/code> 重新定义 &lt;code>JSON.stringify&lt;/code> 方法的逻辑，在其中加入文本输出和 debug 暂停能力。只需要在 &lt;a href="https://desistdaydream.github.io/docs/Web/Browser/DevTools.md">DevTools&lt;/a> - 源代码 - 代码段 中插入下面的代码后运行即可。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">function&lt;/span> &lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">my_stringify&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">JSON&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">stringify&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">JSON&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">stringify&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">function&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">params&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">console&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">log&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Hook 字符串化&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">params&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">debugger&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">my_stringify&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">params&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">my_parse&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">JSON&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">parse&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">JSON&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">parse&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">function&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">params&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">console&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">log&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Hook 解析&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">params&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">debugger&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">my_parse&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">params&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">})();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这时，凡是页面的 JS 代码中调用了 JSON.stringify 和 JSON.parse 这俩方法的地方，都会输出参数，并被 debugger 关键字暂停以进行断点检查。然后可以在右侧 &lt;em>调用堆栈&lt;/em> 中点击直接跳转到网页的代码中，对应的位置（堆栈是顺序执行的，查看下面几个即可）。&lt;/p>
&lt;p>上面的做法有一个文件，就是页面刷新时就失效了，只有在当前页面发起 Fetch/XHR 之类的请求时才会被拦截。若想拦截 Cookie.set 之类的请求，就需要用到代理，在代理中添加 Hook 逻辑，详见下面的 Cookie 处理。&lt;/p>
&lt;h2 id="cookie-处理">Cookie 处理&lt;a class="td-heading-self-link" href="#cookie-%e5%a4%84%e7%90%86" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>动态生成 cookie、时效性 cookie、需要登录网站&lt;/p>
&lt;p>&lt;a href="https://www.bilibili.com/video/BV1ew411K7nB/?p=17">https://www.bilibili.com/video/BV1ew411K7nB/?p=17&lt;/a> 及后面几 P&lt;/p>
&lt;p>想要 Hook Cookie，需要通过类似代理的方式进行，在 代理中添加如下代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">//当前版本hook工具只支持Content-Type为html的自动hook
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">//下面是一个示例:这个示例演示了hook全局的cookie设置点
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">function&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    &lt;span style="color:#8f5902;font-style:italic">//严谨模式 检查所有错误
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>    &lt;span style="color:#4e9a06">&amp;#39;use strict&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    &lt;span style="color:#8f5902;font-style:italic">//document 为要hook的对象   这里是hook的cookie
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">cookieTemp&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    &lt;span style="color:#204a87">Object&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">defineProperty&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87">document&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;cookie&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">//hook set方法也就是赋值的方法 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">set&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">function&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">val&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">//这样就可以快速给下面这个代码行下断点
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">//从而快速定位设置cookie的代码
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">val&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">indexOf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;w_tsfp&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">){&lt;/span>&lt;span style="color:#204a87;font-weight:bold">debugger&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">console&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">log&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;Hook捕获到cookie设置-&amp;gt;&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">val&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">cookieTemp&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">val&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">val&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">//hook get方法也就是取值的方法 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">get&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">function&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">cookieTemp&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    &lt;span style="color:#000;font-weight:bold">});&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">})();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="android-逆向">Android 逆向&lt;a class="td-heading-self-link" href="#android-%e9%80%86%e5%90%91" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;a href="https://github.com/rev1si0n/lamda">GitHub 项目，rev1si0n/lamda&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://www.lxspider.com/?p=194">lamda安卓逆向辅助框架&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://www.jianshu.com/p/040d54a57e33">简书，某App接口逆向过程&lt;/a>&lt;/p>
&lt;h3 id="jadx">Jadx&lt;a class="td-heading-self-link" href="#jadx" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/skylot/jadx">GitHub 项目，skylot/jadx&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.cnblogs.com/lsgxeva/p/13500813.html">博客园，jadx 使用&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Jadx 是一个 Dex 到 Java 反编译器。用于从 Android Dex 和 Apk 文件生成 Java 源代码的 CLI 和 GUI 工具&lt;/p>
&lt;blockquote>
&lt;p>注意：请注意，在大多数情况下，jadx 无法100% 地反编译所有代码，因此会出现错误。检查&lt;a href="https://github.com/skylot/jadx/wiki/Troubleshooting-Q&amp;amp;A#decompilation-issues">故障排除指南&lt;/a>以了解解决方法&lt;/p>
&lt;/blockquote></description></item></channel></rss>