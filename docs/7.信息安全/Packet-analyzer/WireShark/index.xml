<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>WireShark on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Packet-analyzer/WireShark/</link><description>Recent content in WireShark on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Packet-analyzer/WireShark/index.xml" rel="self" type="application/rss+xml"/><item><title>WireShark</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Packet-analyzer/WireShark/WireShark/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Packet-analyzer/WireShark/WireShark/</guid><description>概述 参考
官网 官方文档，用户指南 https://help.aliyun.com/document_detail/112990.html(Wireshark 常见提示) https://blog.csdn.net/qq_15437629/article/details/116565673 公众号-马哥 Linux 运维，8 个常用的 Wireshark 使用技巧 公众号-小林 coding，一文搞定 Wireshark 网络数据包分析（Notes: 一文搞不定） Wireshark 除了可以抓包外，还提供了可视化分析网络包的图形页面，同时，还内置了一系列的汇总分析工具。
TCPDump 和 Wireshark，这两大利器把我们“看不见”的数据包，呈现在我们眼前，一目了然。这两个工具就是最常用的网络抓包和分析工具，更是分析网络性能必不可少的利器。
tcpdump 仅支持命令行格式使用，常用在 Linux 服务器中抓取和分析网络包。 Wireshark 除了可以抓包外，还提供了可视化分析网络包的图形页面。 tcpdump 虽然功能强大，但是输出的格式并不直观。所以，在工作中 tcpdump 只是用来抓取数据包，不用来分析数据包，而是把 tcpdump 抓取的数据包保存成 pcap 后缀的文件，接着用 Wireshark 工具进行数据包的可视化分析。
Wireshark 工具如何分析数据包？ 我们使用 tcpdump -i eht1 icmp and host 183.232.231.174 -w ping.pcap 命令，把抓取的数据包保存到 ping.pcap 文件
接着把 ping.pcap 文件拖到电脑，再用 Wireshark 打开它。打开后，你就可以看到下面这个界面：
在 Wireshark 的页面里，可以更加直观的分析数据包，不仅展示各个网络包的头部信息，还会用不同的颜色来区分不同的协议，由于这次抓包只有 ICMP 协议，所以只有紫色的条目。
接着，在网络包列表中选择某一个网络包后，在其下面的网络包详情中，可以更清楚的看到，这个网络包在协议栈各层的详细信息。比如，以编号 1 的网络包为例子：
可以在数据链路层，看到 MAC 包头信息，如源 MAC 地址和目标 MAC 地址等字段； 可以在 IP 层，看到 IP 包头信息，如源 IP 地址和目标 IP 地址、TTL、IP 包长度、协议等 IP 协议各个字段的数值和含义； 可以在 ICMP 层，看到 ICMP 包头信息，比如 Type、Code 等 ICMP 协议各个字段的数值和含义； Wireshark 用了分层的方式，展示了各个层的包头信息，把“不可见”的数据包，清清楚楚的展示了给我们，还有理由学不好计算机网络吗？是不是相见恨晚？</description></item><item><title>CLI</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Packet-analyzer/WireShark/CLI/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Packet-analyzer/WireShark/CLI/</guid><description>概述 参考：
https://www.wireshark.org/docs/wsug_html_chunked/AppTools.html editcap 万能的 pcap 编辑器，可以过滤、分隔 pcap 文件
Syntax(语法) mergecap 可以将多个 pcap 文件合并为一个
tshark</description></item><item><title>Filter</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Packet-analyzer/WireShark/Filter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Packet-analyzer/WireShark/Filter/</guid><description>概述 参考：
官方文档，6.3 查看时过滤数据包 官方文档，6.3 构建显示过滤器表达式 在 WireShark GUI 过滤器工具栏中，可以通过 Filter Expressions(过滤器表达式) 隐藏不敢兴趣的数据包，仅显示某些特定的包，比如
特定协议的包 特定字段的包 满足某些字段的值进行比较后的包 等等等等 通过 文件 - 导出特定分组 菜单项将过滤的结果导出到一个新的文件中
在 视图 - 内部 - 支持的协议 菜单项中，可以查看当前 WireShark 支持的所有可用于编写过滤表达式的协议关键字和协议中的字段关键（比如 tcp、tcp.port、etc.）。
Syntax(语法) EXAMPLE https://gitlab.com/wireshark/wireshark/-/wikis/DisplayFilters
!tcp.analysis.flags # 去掉 Bad TCP 的包</description></item><item><title>Packet Reassembly</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Packet-analyzer/WireShark/Packet-Reassembly/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Packet-analyzer/WireShark/Packet-Reassembly/</guid><description>概述 参考：
https://www.wireshark.org/docs/wsug_html_chunked/ChAdvReassemblySection.html Packet Reassembly(数据包重组)</description></item><item><title>TCP Analysis</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Packet-analyzer/WireShark/TCP-Analysis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Packet-analyzer/WireShark/TCP-Analysis/</guid><description>概述 参考：
官方文档，TCP Analysis 公众号-小林 coding，一文搞定 Wireshark 网络数据包分析 使用 Wireshark 分析 TCP。
通过 WireShark 理解三次握手和四次挥手 通过 WireShark 分析网络包，并理解 TCP 三次握手和四次挥手的工作原理。
本次例子，我们将要访问的 http://192.168.3.200 服务端。在终端用 tcpdump 命令抓取数据包：
# 客户端执行 tcpdump 命令抓包 tcpdump -i any tcp and host 192.168.3.200 and port 80 -w http.pcap 接着，在终端二执行下面的 curl 命令 curl http://192.168.3.200
最后，回到终端一，按下 Ctrl+C 停止 tcpdump，并把得到的 http.pcap 取出到电脑。
使用 Wireshark 打开 http.pcap 后，你就可以在 Wireshark 中，看到如下的界面：
我们都知道 HTTP 是基于 TCP 协议进行传输的，那么：
最开始的 3 个包就是 TCP 三次握手建立连接的包 中间是 HTTP 请求和响应的包 而最后的 3 个包则是 TCP 断开连接的挥手包 Wireshark 可以用时序图的方式显示数据包交互的过程，从菜单栏中，点击 统计 (Statistics) -&amp;gt; 流量图 (Flow Graph)，然后，在弹出的界面中的 「流量类型」选择 「TCP Flows」，你可以更清晰的看到，整个过程中 TCP 流的执行过程：</description></item></channel></rss>