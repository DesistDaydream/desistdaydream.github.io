<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦的站点 – Packet analyzer</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Packet-analyzer/</link><description>Recent content in Packet analyzer on 断念梦的站点</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Packet-analyzer/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Packet analyzer</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Packet-analyzer/Packet-analyzer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Packet-analyzer/Packet-analyzer/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Packet_analyzer">Wiki，Packet analyzer(包分析器)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Packet analyzer(包分析器)&lt;/strong> 是一种计算器程序或计算机硬件，可以拦截和记录通过计算机网络的流量，有的地方也称之为 &lt;strong>Packet sniffer(包嗅探器)&lt;/strong>。数据包捕获是拦截和记录流量的过程。随着数据流跨网络流流，分析器捕获每个数据包，如果需要，可以解码分组的原始数据，显示分组中的各种字段的值，并根据适当的 &lt;a href="https://desistdaydream.github.io/docs/Standard/Internet/IETF.md">RFC&lt;/a> 或其他规范分析其内容。&lt;/p>
&lt;h2 id="packet-analyzer-的实现">Packet Analyzer 的实现&lt;a class="td-heading-self-link" href="#packet-analyzer-%e7%9a%84%e5%ae%9e%e7%8e%b0" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>各种实现的对比: &lt;a href="https://en.wikipedia.org/wiki/Comparison_of_packet_analyzers">https://en.wikipedia.org/wiki/Comparison_of_packet_analyzers&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Packet%20analyzer/TCPDump/TCPDump.md">TCPDump&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Packet%20analyzer/WireShark/WireShark.md">WireShark&lt;/a>&lt;/li>
&lt;li>&amp;hellip;&amp;hellip;等等&lt;/li>
&lt;/ul>
&lt;h1 id="抓包工具">抓包工具&lt;a class="td-heading-self-link" href="#%e6%8a%93%e5%8c%85%e5%b7%a5%e5%85%b7" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>Fiddler&lt;/p>
&lt;ul>
&lt;li>官网：&lt;a href="https://www.telerik.com/fiddler">https://www.telerik.com/fiddler&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Packet%20analyzer/Charles.md">Charles&lt;/a>&lt;/p>
&lt;p>HTTP Debugger&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.httpdebugger.com/">https://www.httpdebugger.com/&lt;/a>&lt;/li>
&lt;li>可以抓进程的包，而不是通过代理的方式抓包&lt;/li>
&lt;/ul>
&lt;p>openQPA&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/l7dpi/openQPA">https://github.com/l7dpi/openQPA&lt;/a>, &lt;a href="https://gitee.com/l7dpi/openQPA">https://gitee.com/l7dpi/openQPA&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.l7dpi.com/">http://www.l7dpi.com/&lt;/a>&lt;/li>
&lt;li>基于进程抓包&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://github.com/qtgolang/SunnyNetTools">SunnyNetTools&lt;/a>&lt;/p>
&lt;ul>
&lt;li>Sunny网络中间件-抓包工具&lt;/li>
&lt;/ul></description></item><item><title>Docs: TCPDump</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Packet-analyzer/TCPDump/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Packet-analyzer/TCPDump/</guid><description/></item><item><title>Docs: WireShark</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Packet-analyzer/WireShark/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Packet-analyzer/WireShark/</guid><description/></item><item><title>Docs: Charles</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Packet-analyzer/Charles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Packet-analyzer/Charles/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>官网：&lt;a href="https://www.charlesproxy.com/">https://www.charlesproxy.com/&lt;/a>&lt;/li>
&lt;li>小米手机安装 Charles 证书：&lt;a href="https://blog.csdn.net/yang450712123/article/details/112908643">https://blog.csdn.net/yang450712123/article/details/112908643&lt;/a>
&lt;ul>
&lt;li>安卓用不了 2022.9.19&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>IOS 安装 Charles 证书：&lt;a href="https://www.jianshu.com/p/08f602eabb54">https://www.jianshu.com/p/08f602eabb54&lt;/a>
&lt;ul>
&lt;li>苹果的能用 2022.9.19&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://www.charles.ren/">https://www.charles.ren/&lt;/a> 生成注册码
&lt;ul>
&lt;li>生成码之后直接使用即可&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/arzv8v/1671955685091-ae697c1c-96a5-4d8c-8b3c-e47da76fc75e.png" alt="image.png">&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/arzv8v/1671955755610-395fe14a-f08d-42a7-877c-7296c96e473f.png" alt="image.png">&lt;/p>
&lt;p>在手机、pad 上配置 WLAN 代理，访问 &lt;code>chls.pro/ssl&lt;/code> 下载证书。&lt;/p>
&lt;h1 id="ios-抓包">IOS 抓包&lt;a class="td-heading-self-link" href="#ios-%e6%8a%93%e5%8c%85" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="ios-安装证书">IOS 安装证书&lt;a class="td-heading-self-link" href="#ios-%e5%ae%89%e8%a3%85%e8%af%81%e4%b9%a6" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>为无线连接配置手动代理&lt;/p>
&lt;p>IOS 访问 chls.pro/ssl 下载证书并安装&lt;/p>
&lt;p>设置 —— 通用 —— 关于本机 —— 证书信任设置，开启信任证书&lt;/p>
&lt;h1 id="安卓抓包">安卓抓包&lt;a class="td-heading-self-link" href="#%e5%ae%89%e5%8d%93%e6%8a%93%e5%8c%85" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;a href="https://blog.xenori.com/2023/05/capture-android-https-network-packet-with-wsa/">bitxeno&amp;rsquo;s notes，通过 WSA 抓取 android 的 https 网络请求包&lt;/a>&lt;/p>
&lt;h2 id="安卓安装-charles-证书无效">安卓安装 Charles 证书无效&lt;a class="td-heading-self-link" href="#%e5%ae%89%e5%8d%93%e5%ae%89%e8%a3%85-charles-%e8%af%81%e4%b9%a6%e6%97%a0%e6%95%88" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>证书安装成功，但是抓到的包都是 unknow，可能的原因：&lt;/p>
&lt;ul>
&lt;li>Android7.0 之后默认不信任用户级别 CA 证书&lt;/li>
&lt;li>此时开启抓包后，很多 APP 都是无网络的情况；但是 chrome 打开网页是可以抓到 https 的包&lt;/li>
&lt;li>需要想办法安装在系统级别下的 CA 证书&lt;/li>
&lt;li>可能的方法
&lt;ul>
&lt;li>平行空间&lt;/li>
&lt;li>获取系统 Root 权限&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>HttpCanary 根证书安装(MIUI13 Android 12可用)&lt;/p>
&lt;ul>
&lt;li>还是没法抓集换社的包，微信小程序的包也抓不到&lt;/li>
&lt;li>主要是使用了 &lt;a href="https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Cryptography/%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86/%E8%AF%81%E4%B9%A6%20%E4%B8%8E%20PKI/SSL_TLS%20Pinning.md">SSL_TLS Pinning&lt;/a> 的 app 对非自身认可的证书排斥，但是为啥 IOS 可以，安卓不行？&lt;/li>
&lt;/ul>
&lt;h2 id="安装证书">安装证书&lt;a class="td-heading-self-link" href="#%e5%ae%89%e8%a3%85%e8%af%81%e4%b9%a6" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>打开手机设置，搜索：加密与凭据 =&amp;gt; 安装证书 =&amp;gt; 证书&lt;/p>
&lt;p>&lt;a href="https://www.jianshu.com/p/42bac7cda988">简书，Android 安装信赖证书 (有效)&lt;/a>&lt;/p>
&lt;p>方法一，将证书手动拷贝到 /system/etc/security/cacerts/ 目录下&lt;/p>
&lt;ul>
&lt;li>使用 &lt;code>openssl x509 -inform DER -subject_hash_old -in charles.cer -noout&lt;/code> 为 Charles 的 CA 证书生成 hash 值。
&lt;ul>
&lt;li>注意，要用 -subject_hash_old 选项，而不是 -subject_hash 这样才会得到 openssl 0.9 兼容的 hash 值&lt;/li>
&lt;li>假如 hash 值为: 17b11348&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>cat charles.cer &amp;gt; 17b11348.0&lt;/code> 将 Charles 证书写入到 17b11348.0 文件中，并拷贝到移动设备中&lt;/li>
&lt;li>&lt;code>adb shell&lt;/code> 进入移动设备 Shell，并使用 &lt;code>su&lt;/code> 切换到 root&lt;/li>
&lt;li>&lt;code>mount -o remount,rw /system&lt;/code>&lt;/li>
&lt;li>&lt;code>cp 17b11348.0 /system/etc/security/cacerts/&lt;/code>，注意保证文件权限为 644&lt;/li>
&lt;li>&lt;code>mount -o remount,ro /system&lt;/code> 恢复挂载&lt;/li>
&lt;li>&lt;code>reboot&lt;/code> 重启设备&lt;/li>
&lt;/ul>
&lt;p>TODO: 这里可能会有问题，执行 &lt;code>mount -o remount,rw /system&lt;/code> 可能会报错: &lt;code>mount: '/system' not in /proc/mounts&lt;/code>，/system 并没有自己的分区且独立挂载。暂时不知道如何解决&lt;/p>
&lt;p>方法二，使用 Magisk&lt;/p>
&lt;ul>
&lt;li>安装 Magisk&lt;/li>
&lt;li>安装证书&lt;/li>
&lt;li>安装 &lt;a href="https://github.com/NVISOsecurity/MagiskTrustUserCerts">NVISOsecurity/MagiskTrustUserCerts&lt;/a> 模块&lt;/li>
&lt;li>重启&lt;/li>
&lt;/ul>
&lt;h1 id="微信小程序抓包">微信小程序抓包&lt;a class="td-heading-self-link" href="#%e5%be%ae%e4%bf%a1%e5%b0%8f%e7%a8%8b%e5%ba%8f%e6%8a%93%e5%8c%85" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>到底怎么抓呢？~&lt;/p>
&lt;p>&lt;a href="https://www.zhihu.com/question/350183786/answer/2487803703">知乎上的一篇文章&lt;/a>中说删除 PC 小程序缓存在 2022 年 9 月 5 号之后也不管用了&lt;/p>
&lt;p>给微信降级后即可在 PC 上抓包：&lt;a href="https://blog.csdn.net/weixin_46552558/article/details/124037807">https://blog.csdn.net/weixin_46552558/article/details/124037807&lt;/a>&lt;/p>
&lt;p>小程序内嵌的 h5 调用如何抓到？&lt;/p></description></item><item><title>Docs: Fiddler</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Packet-analyzer/Fiddler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Packet-analyzer/Fiddler/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.telerik.com/fiddler">官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Telerik">Wiki，Telerik&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Fiddler 在 2012 年被 Telerik 收购&lt;/p>
&lt;h1 id="安装">安装&lt;a class="td-heading-self-link" href="#%e5%ae%89%e8%a3%85" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>Fiddler Classic 版本可免费使用&lt;/p>
&lt;h1 id="https-抓包">HTTPS 抓包&lt;a class="td-heading-self-link" href="#https-%e6%8a%93%e5%8c%85" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>打开 Tools - Options&lt;/p>
&lt;p>在 HTTPS 标签中，勾选 &lt;code>Capture HTTPS CONNECTs&lt;/code> 和 &lt;code>Decrypt HTTPS traffic&lt;/code>，Windows 会自动安装 Root 证书。&lt;/p>
&lt;blockquote>
&lt;p>在 Actions 中可以执行 重置证书、下载证书、等等 操作&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/fiddler/capture_https_1.png" alt="image.png">&lt;/p>
&lt;p>在 Connections 标签中，勾选 &lt;code>Allow remote computers to connect&lt;/code> 以便通过 PC 的 Fiddler 抓取移动设备的包。在这里还可以配置 Fiddler 的监听端口&lt;/p>
&lt;blockquote>
&lt;p>取消勾选 &lt;code>Act as system proxy on startup&lt;/code> 以便 Fiddler 启动时不要配置系统代理&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/fiddler/202401191101395.png" alt="image.png">&lt;/p>
&lt;h2 id="ios">IOS&lt;a class="td-heading-self-link" href="#ios" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="安装证书">安装证书&lt;a class="td-heading-self-link" href="#%e5%ae%89%e8%a3%85%e8%af%81%e4%b9%a6" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>为无线连接配置手动代理，Fiddler 默认监听在 :8888&lt;/p>
&lt;p>IOS 访问 &lt;code>IP:8888&lt;/code> ，点击 FiddlerRoot certificate 下载证书并安装&lt;/p>
&lt;p>设置 —— 通用 —— 关于本机 —— 证书信任设置，开启信任证书&lt;/p>
&lt;h1 id="fiddler-add-ons">Fiddler Add-ons&lt;a class="td-heading-self-link" href="#fiddler-add-ons" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;a href="https://www.telerik.com/fiddler/add-ons">https://www.telerik.com/fiddler/add-ons&lt;/a>&lt;/p></description></item><item><title>Docs: pcap</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Packet-analyzer/pcap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Packet-analyzer/pcap/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Pcap">Wiki，pcap(包捕获)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>在计算机网络管理领域，&lt;strong>Packet Capture(包捕获，简称 pcap)&lt;/strong> 是一个用于捕获网络流量的 &lt;strong>API&lt;/strong>。很多数据包分析器都依赖于 pcap 来运行。所以，pcap 准确来说，应该称为 &lt;strong>PCAP API&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>WinPcap # &lt;a href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Operating%20system/Microsoft%20OS/Microsoft%20OS.md">Microsoft OS&lt;/a> 下最早的 pcap
&lt;ul>
&lt;li>&lt;a href="https://nmap.org/npcap/">Npcap&lt;/a> # Windows 新的 pcap&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#libpcap">libpcap&lt;/a> # &lt;a href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Operating%20system/Unix-like%20OS/Unix-like%20OS.md">Unix-like OS&lt;/a> 下的 pcap&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Notes: 虽然该名称是 packet capture 的缩写，但这并不是 API 的正确名称。类 Unix 系统在 libpcap 库中实现 pcap；对于 Windows，有一个名为 WinPcap 的 libpcap 端口不再受支持或开发，而对于 Windows 7 及更高版本，仍支持一个名为 Npcap 的端口。&lt;/p>
&lt;/blockquote>
&lt;p>很多实现 pcap 能力的语言若想开发 PCAP 能力必须依赖 libpcap（e.g. go 语言需要开启 CGO_ENABLED=1，且保证系统中安装了 pcap）&lt;/p>
&lt;h1 id="pcap-安装">pcap 安装&lt;a class="td-heading-self-link" href="#pcap-%e5%ae%89%e8%a3%85" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="npcap">Npcap&lt;a class="td-heading-self-link" href="#npcap" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://npcap.com/#download">https://npcap.com/#download&lt;/a>&lt;/p>
&lt;p>无注意事项，直接安装即可。&lt;/p>
&lt;h2 id="libpcap">libpcap&lt;a class="td-heading-self-link" href="#libpcap" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;blockquote>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.tcpdump.org/manpages/pcap.3pcap.html">TCPDump 官方文档，pcap&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>libpcap 是 &lt;a href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Operating%20system/Unix-like%20OS/Unix-like%20OS.md">Unix-like OS&lt;/a> 下的 pcap C 库，若想基于 libpcap 进行开发，通常需要在系统中安装 &lt;a href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C/C.md">C&lt;/a> 语言的头文件（i.e. libpcap 的开发库）&lt;/p>
&lt;ul>
&lt;li>Ubuntu 系系统
&lt;ul>
&lt;li>&lt;code>apt install libpcap-dev&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>RedHat 系系统
&lt;ul>
&lt;li>&lt;code>yum install libpcap-devel&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>libpcap 与 &lt;a href="https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Packet%20analyzer/TCPDump/TCPDump.md">TCPDump&lt;/a> 项目一起进行维护&lt;/p>
&lt;h1 id="其它抓包工具">其它抓包工具&lt;a class="td-heading-self-link" href="#%e5%85%b6%e5%ae%83%e6%8a%93%e5%8c%85%e5%b7%a5%e5%85%b7" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;strong>netcap&lt;/strong> # 一个基于 &lt;a href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux%20%E7%AE%A1%E7%90%86/Linux%20%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/BCC%20%E5%B7%A5%E5%85%B7%E9%9B%86.md">BCC 工具集&lt;/a>，可对含skb作为参数的系统函数，或者基于 &lt;a href="https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/DPDK/DPDK.md">DPDK&lt;/a> 的mbuf抓包分析的工具。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/bytedance/netcap">https://github.com/bytedance/netcap&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/ezMEjx3mzHOaxvfMQwkn9g">公众号 - 深入浅出BPF，字节跳动开源Linux内核网络抓包工具netcap&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>