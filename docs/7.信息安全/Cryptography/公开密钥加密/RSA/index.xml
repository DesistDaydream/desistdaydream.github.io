<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>RSA on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Cryptography/%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86/RSA/</link><description>Recent content in RSA on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Cryptography/%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86/RSA/index.xml" rel="self" type="application/rss+xml"/><item><title>RSA</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Cryptography/%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86/RSA/RSA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Cryptography/%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86/RSA/RSA/</guid><description>概述 参考：
Wiki, RSA RSA 生成的密钥对，私钥用来签名，公钥用来加密。
举个例子，公钥公开出去，加密密码，交给服务端，服务端可以使用私钥解密从中获取密码，加密后续传输的消息后，使用私钥签名；客户端使用公钥验证收到的消息是否是真实客户端的消息，验证成功后，使用密码解密。
这个场景，需要如下几个东西 RSA 的公钥与私钥 用于加密密码的算法，比如 AES 随机生成的 XX 位密码，比如 16 位字符串密钥 想要发送的数据，称为 reqBody 接收到的数据，称为 respBody 首先客户端生成 XX 位的字符串作为密钥，使用公钥加密密码后，得到 key；同时使用密码通过 AES 的算法加密 reqBody。 这样，就保证了数据的隐私性 将 key 与 加密后的 reqBody 一起发送给服务端 服务端使用私钥解密 key 后得到密钥，再使用密码通过 AES 的算法解密接收到的 reqBody 服务端处理请求后，再次使用密码加密 respBody，之后使用私钥对 加密后的 respBody 进行签名 这样，保证了数据的真实性 将 签名后的已加密的 respBody 发送给客户端 客户端使用公钥验证签名以确保数据是服务端发来的没有被拦截篡改，之后使用 key 解密 respBody 后得到真实的响应数据。</description></item><item><title>RSA 密钥生成的步骤</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Cryptography/%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86/RSA/RSA-%E5%AF%86%E9%92%A5%E7%94%9F%E6%88%90%E7%9A%84%E6%AD%A5%E9%AA%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Cryptography/%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86/RSA/RSA-%E5%AF%86%E9%92%A5%E7%94%9F%E6%88%90%E7%9A%84%E6%AD%A5%E9%AA%A4/</guid><description>参考：阮一峰
六、密钥生成的步骤
我们通过一个例子，来理解 RSA 算法。假设爱丽丝要与鲍勃进行加密通信，她该怎么生成公钥和私钥呢？
第一步，随机选择两个不相等的质数 p 和 q。
爱丽丝选择了 61 和 53。（实际应用中，这两个质数越大，就越难破解。）
第二步，计算 p 和 q 的乘积 n。
爱丽丝就把 61 和 53 相乘。
n = 61×53 = 3233
n 的长度就是密钥长度。3233 写成二进制是 110010100001，一共有 12 位，所以这个密钥就是 12 位。实际应用中，RSA 密钥一般是 1024 位，重要场合则为 2048 位。
第三步，计算 n 的欧拉函数 φ(n)。
根据公式：
φ(n) = (p-1)(q-1)
爱丽丝算出 φ(3233)等于 60×52，即 3120。
第四步，随机选择一个整数 e，条件是 1&amp;lt; e &amp;lt; φ(n)，且 e 与 φ(n) 互质。
爱丽丝就在 1 到 3120 之间，随机选择了 17。（实际应用中，常常选择 65537。）</description></item></channel></rss>