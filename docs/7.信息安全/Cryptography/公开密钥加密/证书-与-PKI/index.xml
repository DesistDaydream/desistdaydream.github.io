<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>证书 与 PKI on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Cryptography/%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86/%E8%AF%81%E4%B9%A6-%E4%B8%8E-PKI/</link><description>Recent content in 证书 与 PKI on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Cryptography/%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86/%E8%AF%81%E4%B9%A6-%E4%B8%8E-PKI/index.xml" rel="self" type="application/rss+xml"/><item><title>X.509</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Cryptography/%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86/%E8%AF%81%E4%B9%A6-%E4%B8%8E-PKI/X.509/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Cryptography/%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86/%E8%AF%81%E4%B9%A6-%E4%B8%8E-PKI/X.509/</guid><description>概述 参考：
Wiki, X.509 RFC 5280, Internet X.509 PKI 证书和 CRL 配置文件 RFC 6125, 在 TLS 场景下，使用 PKIX(在 PKI 中使用 X.509)，对基于域的应用服务进行表示与验证 Arthurchiao 博客，[译] 写给工程师：关于证书（certificate）和公钥基础设施（PKI）的一切（SmallStep, 2018） X.509 是 Cryptography 里定义公钥证书格式的标准。X.509 格式的证书已应用在包括 TSL/SSL 在内的众多网络协议里，它是 HTTPS 的基础。
在大部分时候，人们提到证书而没有加额外的限定词时，通常都是指 X.509 v3 证书。
更准确的说，是 RFC 5280 中描述、 CA/Browser Forum Baseline Requirements中进一步完善的 PKIX 变种。 也可以说，指的是浏览器理解并用来做 HTTPS 的那些证书。 也是那些具有通过 HTTP + TLS 协议交互的程序们所使用的证书 当然，全世界并不是只有 X.509 这一种格式，SSH 和 PGP 都有其各自的格式。
X.509 在 1988 年作为 ITU(国际电信联盟) X.500 项目的一部分首次标准化。 这是 telecom(通信) 领域的标准，想通过它构建一个 global telephone book(全球电话簿)。 虽然这个项目没有成功，但却留下了一些遗产，X.</description></item><item><title>SSL/TLS Pinning</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Cryptography/%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86/%E8%AF%81%E4%B9%A6-%E4%B8%8E-PKI/SSL_TLS-Pinning/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Cryptography/%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86/%E8%AF%81%E4%B9%A6-%E4%B8%8E-PKI/SSL_TLS-Pinning/</guid><description>概述 参考：
Wiki, HTTP_Public_Key_Pinning OWASP，Certificate and Public Key Pinning 知乎，证书锁定SSL Pinning简介及用途 SSL/TLS Pinning 也可以称为 Public Key Pinning、Certificate Pinning。顾名思义，将服务器提供的 SSL/TLS 证书内置到移动端开发的 APP 客户端中，当客户端发起请求时，通过比对内置的证书和服务器端证书的内容，以确定这个连接的合法性。
在公共网络中通知我们使用安全的 SSL/TLS 通信协议来进行通信，并且使用数字证书来提供加密和认证，在《HTTPS入门, 图解SSL从回车到握手》过程中我们知道握手环节仍然面临（MIM中间人）攻击的可能性，因为CA证书签发机构也存在被黑客入侵的可能性，同时移动设备也面临内置证书被篡改的风险。
SSL/TLS Pinning 原理 证书锁定（SSL/TLS Pinning）提供了两种锁定方式： Certificate Pinning 和 Public Key Pinning，文头和概述描述的实际上是 Certificate Pinning（证书锁定）。
HTTP Public Key Pinning(简称 HPKP) 在 RFC 7469 中标准化。扩展了 Certificate Pinning，Certificate Pinning 对 Web 浏览器和应用程序中的知名网站或服务的公钥哈希进行硬编码。
证书锁定 我们需要将APP代码内置仅接受指定域名的证书，而不接受操作系统或浏览器内置的CA根证书对应的任何证书，通过这种授权方式，保障了APP与服务端通信的唯一性和安全性，因此我们移动端APP与服务端（例如API网关）之间的通信是可以保证绝对安全。但是CA签发证书都存在有效期问题，所以缺点是在证书续期后需要将证书重新内置到APP中。
公钥锁定 公钥锁定则是提取证书中的公钥并内置到移动端APP中，通过与服务器对比公钥值来验证连接的合法性，我们在制作证书密钥时，公钥在证书的续期前后都可以保持不变（即密钥对不变），所以可以避免证书有效期问题。
证书锁定指纹(Hash) 获取移动端所需证书 如果采用证书锁定方式，则获取证书的摘要hash，以 infinisign.com 为例
## 在线读取服务器端.cer格式证书 openssl s_client -connect infinisign.com:443 -showcerts &amp;lt; /dev/null | openssl x509 -outform DER &amp;gt; infinisign.</description></item><item><title>证书 与 PKI</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Cryptography/%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86/%E8%AF%81%E4%B9%A6-%E4%B8%8E-PKI/%E8%AF%81%E4%B9%A6-%E4%B8%8E-PKI/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Cryptography/%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86/%E8%AF%81%E4%B9%A6-%E4%B8%8E-PKI/%E8%AF%81%E4%B9%A6-%E4%B8%8E-PKI/</guid><description>概述 参考：
Wiki, Public Key Certificate Wiki, PKI Wiki, CSR Wiki, CA Wiki, Root Certificate RFC,5280 公众号,云原生生态圈-白话文说 CA 原理 Arthurchiao 博客,[译] 写给工程师：关于证书（certificate）和公钥基础设施（PKI）的一切（SmallStep, 2018） 公众号-云原生实验室，搬运了上面的文章 Certificate 与 PKI 的目标很简单：Bind names to Public Keys(将名字关联到公钥)。这是关于 Certificate 与 PKI 的最高抽象，其他都是属于实现细节
Certificate Certificate(证书) 在密码学中，是指 公开密钥加密 中完善其签名缺点的 Public Key Certificate(公钥证书)。在公开密钥加密的介绍中，我们看到了公钥加密的特点，并且也发现了缺点，公钥容易被劫持。那么为了解决这个问题，就需要一个东西可以验证公钥的真实性。公钥证书也就由此而来。
Public Key Certificate(公钥证书，简称 PKC) 也称为 Digital Certifacte(数字证书) 或 Identity Certificate(身份证书)，是一种用于证明公钥的所有权的电子文档。
假设有这么一种场景：公钥加密系统使我们能知道和谁在通信，但这个事情的前提是：我们必须要有对方的公钥
那么，如果我们不知道对方的公钥，那么该怎么办呢？这时候 Certificate 就出现了。
首先，我需要从对方手里拿到公钥和其拥有者的信息 那么我如何相信我拿到的信息是真实有效的呢？~可以请一个双方都信任的权威机构，对我拿到的信息做出证明 而这个权威机构用来证明信息有效的东西，就是 Certificate 公钥证书通常应该包含如下内容：
密钥的信息 有关其所有者的身份信息，称为 Subject(主体) 验证证书内容的实体的数字签名，这个实体称为 Issuer(发行人) 权威机构对证书的签名，签名的大概意思就是：Public key XXX 关联到了 name XXX，这就对应了文章开头的那句话：Certificate 与 PKI 的目标很简单：Bind names to Public Keys(将名字关联到公钥) 对证书的签名的实体称为 Certificate Authority(简称 CA)，也可以称为 Issuer(签发者)。 被签名的实体称为 Subject(主体)。 举个例子，如果某个 Issuer 为 Bob 签发了一张证书，其中的内容就可以解读如下：</description></item></channel></rss>