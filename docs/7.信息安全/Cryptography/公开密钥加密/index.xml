<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>公开密钥加密 on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Cryptography/%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86/</link><description>Recent content in 公开密钥加密 on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Cryptography/%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86/index.xml" rel="self" type="application/rss+xml"/><item><title>公开密钥加密</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Cryptography/%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86/%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Cryptography/%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86/%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86/</guid><description>概述 参考：
Wiki, PKC 英文 Wiki, 数字签名 阮一峰 知乎,RSA 的公钥和私钥到底那个才是用来加密和哪个用来解密 Wiki, 公开密钥加密 中文 https://arthurchiao.art/blog/everything-about-pki-zh 甲方选择某种加密规则，对信息进行加密 乙方使用同一种规则，对信息进行解密 由于加密和解密使用同样规则（简称&amp;quot;密钥&amp;quot;），这被称为 Symmetric-key algorithm(对称密钥算法)。这种加密模式有一个最大弱点：甲方必须把加密规则告诉乙方，否则无法解密。保存和传递密钥，就成了最头疼的问题。因为大多数情况下，其实两方之间的通信，只有一方是需要加密的，另一方只需要知道信息内容。
1976 年，两位美国计算机学家 Whitfield Diffie 和 Martin Hellman，提出了一种崭新构思，可以在不直接传递密钥的情况下，完成解密。这被称为&amp;quot;Diffie-Hellman 密钥交换算法&amp;quot;。这个算法启发了其他科学家。人们认识到，加密和解密可以使用不同的规则，只要这两种规则之间存在某种对应关系即可，这样就避免了直接传递密钥。
这种新的加密模式就被称为&amp;quot;非对称密钥算法&amp;quot;。
（1）乙方生成两把密钥（公钥和私钥）。公钥是公开的，任何人都可以获得，私钥则是保密的。 （2）甲方获取乙方的公钥，然后用它对信息加密。 （3）乙方得到加密后的信息，用私钥解密。
如果公钥加密的信息只有私钥解得开，那么只要私钥不泄漏，通信就是安全的。
1977 年，三位数学家 Rivest、Shamir 和 Adleman 设计了一种算法，可以实现非对称加密。这种算法用他们三个人的名字命名，叫做 RSA 算法。从那时直到现在，RSA 算法一直是最广为使用的&amp;quot;非对称加密算法&amp;quot;。毫不夸张地说，只要有计算机网络的地方，就有 RSA 算法。
这种算法非常可靠，密钥越长，它就越难破解。根据已经披露的文献，目前被破解的最长 RSA 密钥是 768 个二进制位。也就是说，长度超过 768 位的密钥，还无法破解（至少没人公开宣布）。因此可以认为，1024 位的 RSA 密钥基本安全，2048 位的密钥极其安全。
PKC 特点 这种加密方式，需要一对密钥。只有公钥可以加密，私钥不能用来加密数据。 Public key(公钥) # 公开给所有人。用来加密数据、验证签名。使用公钥把明文加密后所得的密文，只能使用对应的私钥才能解密并得到原本的密文。反之不行。 Secret key(私钥) # 自己留存，必须保证其私密性。用来解密数据、签名。使用私钥创建数字签名，只能使用公钥才能验证该数字签名的有效性。反之不行。 一般情况，密钥对是通过程序自动生成的。首先生成私钥后，公钥包含在私钥当中 Digital signature(数字签名)。签名提供的是真实性，而不是保密性。 所谓的数字签名，就像人们日常生活中在文件上签字一样，都是签名的一种。 而所谓的验证签名，其实就像日常生活中，看看签名的人的笔记与签名是否一致，等等类似的行为 总结一下：既然是加密，那肯定是不希望别人知道发送给我的消息，所以只有我才能解密，所以可得出公钥负责加密，私钥负责解密；同理，既然是签名，那肯定是不希望有人冒充我发消息，只有我才能发布这个签名，所以可得出私钥负责签名，公钥负责验证。</description></item><item><title>密钥/证书的编码</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Cryptography/%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86/%E5%AF%86%E9%92%A5_%E8%AF%81%E4%B9%A6%E7%9A%84%E7%BC%96%E7%A0%81/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Cryptography/%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86/%E5%AF%86%E9%92%A5_%E8%AF%81%E4%B9%A6%E7%9A%84%E7%BC%96%E7%A0%81/</guid><description>概述 参考：
当我们生成密钥后，是不易于保存的，比如我在 go 代码，使用 RSA 算法生成了这么一个密钥：
私钥中包含里 公钥、n、d、组件，公钥中包含 n、e。可以发现，这种数据是不便于保存与共享的。所以，一般情况是使用一种 Encoding(编码) 规则，对密钥进行处理后以生成某种格式的文件，以便保存。当需要使用密钥时，使用对应规则的来 Decoding(解码) 该文件以获得密钥，然后再开始使用。而现阶段最常用的文件就是，就是 PEM 文件格式。
除了可以对密钥编码，还可以对证书进行编码，证书由于其复杂的格式，也不利于传输。
如果用 openssl 命令查看私钥，则是下面这种格式
root@desistdaydream:~/projects/DesistDaydream/GoLearning# openssl rsa -text -noout -in cryptography/private.pem RSA Private-Key: (2048 bit, 2 primes) modulus: 00:d0:94:1c:6e:25:54:61:1d:34:23:1f:25:f7:a5: ...... publicExponent: 65537 (0x10001) privateExponent: 00:bb:fe:52:e5:9f:f5:be:96:30:d0:db:19:40:6d: ...... prime1: 00:f3:06:5f:c4:e6:27:d2:1d:ba:d1:35:40:34:b1: ...... prime2: 00:db:b6:ee:09:28:3c:53:f5:70:e7:9a:11:8b:55: ...... exponent1: 3b:17:1e:ac:22:86:26:29:c2:65:e1:fb:c5:94:3e: ...... exponent2: 00:a4:a5:5d:95:61:20:6c:2e:36:30:68:45:13:6b: ...... coefficient: 00:e3:ed:7a:4a:2d:4c:ec:e0:0d:77:e8:4e:df:9b: ...... PEM 文件格式 参考：
Wiki, PEM Privacy-Enhanced Mail(增强隐私的邮件，简称 PEM) 是一种文件的格式(虽然曾经不止代表文件格式)。这种格式的文件用于存储 加密的密钥、证书 等数据。
PEM 起源于 1993 年 IETF 定义“隐私增强邮件”的一组标准，尽管这个标准未得到广泛采用，并已被 PGP 和 S/MIME 取代，但其中定义的各种文本编码格式却变得非常流行。所以，PEM 这种文件编码格式最终由 IETF 在 RFC7468 中正式定义。</description></item></channel></rss>