<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦的站点 – 公开密钥加密</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Cryptography/%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86/</link><description>Recent content in 公开密钥加密 on 断念梦的站点</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Cryptography/%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: 公开密钥加密</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Cryptography/%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86/%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Cryptography/%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86/%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Public-key_cryptography">Wiki, PKC 英文&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Digital_signature">Wiki, 数字签名&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html">阮一峰&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.zhihu.com/question/25912483">知乎,RSA 的公钥和私钥到底那个才是用来加密和哪个用来解密&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zh.wikipedia.org/wiki/%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86">Wiki, 公开密钥加密 中文&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://arthurchiao.art/blog/everything-about-pki-zh">https://arthurchiao.art/blog/everything-about-pki-zh&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;ul>
&lt;li>甲方选择某种加密规则，对信息进行加密&lt;/li>
&lt;li>乙方使用同一种规则，对信息进行解密&lt;/li>
&lt;/ul>
&lt;p>由于加密和解密使用同样规则（简称&amp;quot;密钥&amp;quot;），这被称为 Symmetric-key algorithm(对称密钥算法)。这种加密模式有一个最大弱点：甲方必须把加密规则告诉乙方，否则无法解密。保存和传递密钥，就成了最头疼的问题。因为大多数情况下，其实两方之间的通信，只有一方是需要加密的，另一方只需要知道信息内容。&lt;/p>
&lt;p>1976 年，两位美国计算机学家 Whitfield Diffie 和 Martin Hellman，提出了一种崭新构思，可以在不直接传递密钥的情况下，完成解密。这被称为&amp;quot;Diffie-Hellman 密钥交换算法&amp;quot;。这个算法启发了其他科学家。人们认识到，加密和解密可以使用不同的规则，只要这两种规则之间存在某种对应关系即可，这样就避免了直接传递密钥。&lt;/p>
&lt;p>这种新的加密模式就被称为&amp;quot;非对称密钥算法&amp;quot;。&lt;/p>
&lt;blockquote>
&lt;p>（1）乙方生成两把密钥（公钥和私钥）。公钥是公开的，任何人都可以获得，私钥则是保密的。
（2）甲方获取乙方的公钥，然后用它对信息加密。
（3）乙方得到加密后的信息，用私钥解密。&lt;/p>
&lt;/blockquote>
&lt;p>如果公钥加密的信息只有私钥解得开，那么只要私钥不泄漏，通信就是安全的。&lt;/p>
&lt;p>1977 年，三位数学家 Rivest、Shamir 和 Adleman 设计了一种算法，可以实现非对称加密。这种算法用他们三个人的名字命名，叫做 RSA 算法。从那时直到现在，RSA 算法一直是最广为使用的&amp;quot;非对称加密算法&amp;quot;。毫不夸张地说，只要有计算机网络的地方，就有 RSA 算法。&lt;/p>
&lt;p>这种算法非常可靠，密钥越长，它就越难破解。根据已经披露的文献，目前被破解的最长 RSA 密钥是 768 个二进制位。也就是说，长度超过 768 位的密钥，还无法破解（至少没人公开宣布）。因此可以认为，1024 位的 RSA 密钥基本安全，2048 位的密钥极其安全。&lt;/p>
&lt;h2 id="pkc-特点">PKC 特点&lt;a class="td-heading-self-link" href="#pkc-%e7%89%b9%e7%82%b9" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>这种加密方式，需要一对密钥。只有公钥可以加密，私钥不能用来加密数据。&lt;/li>
&lt;li>&lt;strong>Public key(公钥)&lt;/strong> # 公开给所有人。用来&lt;strong>加密数据&lt;/strong>、&lt;strong>验证签名&lt;/strong>。使用公钥把明文加密后所得的密文，只能使用对应的私钥才能解密并得到原本的密文。反之不行。&lt;/li>
&lt;li>&lt;strong>Secret key(私钥)&lt;/strong> # 自己留存，必须保证其私密性。用来&lt;strong>解密数据&lt;/strong>、&lt;strong>签名&lt;/strong>。使用私钥创建数字签名，只能使用公钥才能验证该数字签名的有效性。反之不行。
&lt;ul>
&lt;li>一般情况，密钥对是通过程序自动生成的。首先生成私钥后，公钥包含在私钥当中&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Digital signature(数字签名)&lt;/strong>。签名提供的是真实性，而不是保密性。
&lt;ul>
&lt;li>所谓的数字签名，就像人们日常生活中在文件上签字一样，都是签名的一种。&lt;/li>
&lt;li>而所谓的验证签名，其实就像日常生活中，看看签名的人的笔记与签名是否一致，等等类似的行为&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>总结一下：既然是加密，那肯定是不希望别人知道发送给我的消息，所以只有我才能解密，所以可得出&lt;strong>公钥负责加密，私钥负责解密&lt;/strong>；同理，既然是签名，那肯定是不希望有人冒充我发消息，只有我才能发布这个签名，所以可得出&lt;strong>私钥负责签名，公钥负责验证&lt;/strong>。&lt;/p>
&lt;ul>
&lt;li>这种加密方式由于是单向加密、单向解密，所以如果双方都想要加密，则需要两对密钥，双方各自用对方的公钥加密信息发送给对方，然后双方再用自己的私钥解密阅读信息。&lt;/li>
&lt;/ul>
&lt;h2 id="signature签名">Signature(签名)&lt;a class="td-heading-self-link" href="#signature%e7%ad%be%e5%90%8d" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>Signature(签名)&lt;/strong> 的前身是 &lt;strong>Message Authentication Code(消息认证码，简称 MAC)&lt;/strong>，都是用来验证某个 Entity(实体) 发送的消息&lt;strong>没有被篡改&lt;/strong>。&lt;/p>
&lt;p>MAC 的原理：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/eq9he4/1634100917764-014705d7-d376-4fa1-ba43-e1811f54023a.png" alt="https://www.okta.com/sites/default/files/media/image/2021-04/HMAC.png">&lt;/p>
&lt;ul>
&lt;li>对 &lt;code>message(消息)&lt;/code> 和 &lt;code>shared secret，a password(双方都知道的一个密码)&lt;/code> 做哈希，得到的哈希值就是 MAC；&lt;/li>
&lt;li>发送方将消息连带 MAC 一起发给接收方；&lt;/li>
&lt;li>接收方收到消息之后，用同一个密码来计算 MAC，然后跟消息中提供的 MAC 对比。如果相同，就证明未被篡改。&lt;/li>
&lt;/ul>
&lt;p>关于哈希：&lt;/p>
&lt;ul>
&lt;li>哈希是单向的，因此无法从输出反推输入。这一点至关重要：否则截获消息的人就可以根据 MAC 和哈希函数反推出你的 secrets。&lt;/li>
&lt;li>此外，生成 MAC 的哈希算法选择也至关重要，本文不会展开，但 提醒一点：不要试图用自己设计的 MAC 算法。&lt;/li>
&lt;li>最常用的 MAC 算法是 &lt;a href="https://en.wikipedia.org/wiki/HMAC">HMAC&lt;/a>（hash-based message authentication code）。&lt;/li>
&lt;/ul>
&lt;p>但是 MAC 的缺点是：&lt;/p>
&lt;ul>
&lt;li>至少有两个 Entity 需要知道共享的密码，所以双方都可以生成 MAC，因此给定一个合法的 MAC，我们无法知道是谁生成的&lt;/li>
&lt;/ul>
&lt;p>为了解决这个问题，我们可以通过 PKC，使用私钥签名、公钥验签的方式避免 MAC 的缺点，这，就是 PKC 的 &lt;strong>Signature(签名)&lt;/strong> 功能。正因为对一个已经签名消息只能使用公钥验证，且只能使用对应的私钥生成。因此对于接收方来说，它只能验证签名是否合法，而无法生成同样的签名。&lt;/p>
&lt;p>如果只有一个 Entity 知道密钥，那么这种特性就称为 &lt;strong>non-repudiation(不可否认性)&lt;/strong>，即持有私钥的人无法否认数据是由他签名的这一事实。&lt;/p>
&lt;h3 id="总结">总结&lt;a class="td-heading-self-link" href="#%e6%80%bb%e7%bb%93" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>MAC 与 signature 都叫做签名，是因为它们和现实世界中的签名是很像的。例如，如果想让某人同意某事，并且事后还能证明他们当时的确同意了，就把问题写下来，然后让他们 手写签字（签名）。&lt;/p>
&lt;p>通常人们常说的 &lt;strong>Digital signature(数字签名)&lt;/strong>，其实就是基于 PKC 的公钥与私钥这种非对称特点而实现的签名行为。只不过是数字的签名，该签名是存在与计算机世界中的数字形态~~~&lt;/p>
&lt;h2 id="总结-1">总结&lt;a class="td-heading-self-link" href="#%e6%80%bb%e7%bb%93-1" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>公钥加密是数学给计算机科学的神秘礼物， &lt;a href="https://www.math.auckland.ac.nz/~sgal018/crypto-book/crypto-book.html">其数学基础&lt;/a> 显然很复杂，但如果只是使用，那并不理解它的每一步数学原理。 公钥加密使计算机能做一些之前无法做的事情：它们现在能看到对方是谁了。
这句话的意思是说，公钥加密使一台计算（或代码）能向其他计算机或程序证明， &lt;strong>不用直接分享某些信息，它也能知道该信息&lt;/strong>。更具体来说，&lt;/p>
&lt;ul>
&lt;li>以前要证明你有密码，就必须向别人展示这个密码。但展示之后，任何有这个密码的人就都能使用它了。&lt;/li>
&lt;li>私钥却与此不同。你能通过私钥对我的身份进行认证（authenticate my identity），但却无法假冒我。例如，你发给我一个大随机数，我对这个随机数进行签名，然后将再发送给你。 你能用公钥对这个签名进行认证，确认这个签名（消息）确实来自我。 这就是一种证明你在和我（而不是别的其他的人）通信的很好证据。这使得网络上的 计算机能有效地知道它们在和谁通信。这听起来是一件如此理所当然的事情，但仔细地想一下，网络上只有流动的 0 和 1， 你怎么知道消息来自谁，在和谁通信？因此公钥加密系统是一个非常伟大的发明。&lt;/li>
&lt;/ul>
&lt;h1 id="应用场景-与-缺点">应用场景 与 缺点&lt;a class="td-heading-self-link" href="#%e5%ba%94%e7%94%a8%e5%9c%ba%e6%99%af-%e4%b8%8e-%e7%bc%ba%e7%82%b9" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;ul>
&lt;li>如果 A 持有私钥，B 持有对应公钥。那么此时 B 用对方的公钥加密一个对称密钥并发送给 A，A 使用私钥解密，以获得 B 发送的对称密钥，这时再发送的数据可以使用对称加密。&lt;/li>
&lt;li>在互联网的 C/S 架构场景中。Server 公开公钥，Client 使用公钥加密信息发送给 Server(发送密码等敏感信息)，Server 使用私钥解密后响应时，使用私钥签名，以便 Client 可以用公钥验证 Server 的真实性(防止钓鱼网站)。&lt;/li>
&lt;li>如图所示，Alice 在一条消息的末尾签了名，消息内容是 &lt;code>Hello Bob!&lt;/code>，这段签署的内容一般是对消息内容进行 hash 计算后，使用 Alice 的私钥的出来的。鲍勃同时收到消息和签名。他使用 Alice 的公钥来验证消息的真实性，即，如果使用公钥计算得出来的消息与原始消息完全匹配，那就证明，这条消息确实是 Alice 发送的。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/crypto/1616125981836-028fe2ce-77f2-4929-91cc-559c4ce9cda1.png" alt="">
算法：&lt;/p>
&lt;ul>
&lt;li>RSA&lt;/li>
&lt;li>DSA&lt;/li>
&lt;li>ELGamal&lt;/li>
&lt;/ul>
&lt;h2 id="缺点">缺点&lt;a class="td-heading-self-link" href="#%e7%bc%ba%e7%82%b9" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>公钥加密可能出现的问题：当两者需要通信的时候，需要把公钥发送给对方，但是公钥是谁都可以获取的，那么在二者通信过程中，公钥就有可能被劫持，当公钥被劫持，劫持者把自己的公钥再发送给对方，那么双发再收到的信息，就是被劫持者篡改过的信息了。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Cryptography/%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86/%E8%AF%81%E4%B9%A6%20%E4%B8%8E%20PKI/%E8%AF%81%E4%B9%A6%20%E4%B8%8E%20PKI.md">证书 与 PKI&lt;/a> 可以解决以上问题&lt;/li>
&lt;/ul></description></item><item><title>Docs: RSA</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Cryptography/%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86/RSA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Cryptography/%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86/RSA/</guid><description/></item><item><title>Docs: 证书 与 PKI</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Cryptography/%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86/%E8%AF%81%E4%B9%A6-%E4%B8%8E-PKI/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Cryptography/%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86/%E8%AF%81%E4%B9%A6-%E4%B8%8E-PKI/</guid><description/></item><item><title>Docs: 密钥/证书的编码</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Cryptography/%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86/%E5%AF%86%E9%92%A5_%E8%AF%81%E4%B9%A6%E7%9A%84%E7%BC%96%E7%A0%81/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Cryptography/%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86/%E5%AF%86%E9%92%A5_%E8%AF%81%E4%B9%A6%E7%9A%84%E7%BC%96%E7%A0%81/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;/blockquote>
&lt;p>当我们生成密钥后，是不易于保存的，比如我在 go 代码，使用 RSA 算法生成了这么一个密钥：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/oxf9fa/1616125711062-22c30c47-afff-4ee4-a81a-d8a5225aad74.png" alt="">&lt;/p>
&lt;p>私钥中包含里 &lt;code>公钥、n、d、组件&lt;/code>，公钥中包含 &lt;code>n、e&lt;/code>。可以发现，这种数据是不便于保存与共享的。所以，一般情况是使用一种 &lt;strong>Encoding(编码)&lt;/strong> 规则，对密钥进行处理后以生成某种格式的文件，以便保存。当需要使用密钥时，使用对应规则的来 &lt;strong>Decoding(解码)&lt;/strong> 该文件以获得密钥，然后再开始使用。而现阶段最常用的文件就是，就是 &lt;strong>PEM 文件格式&lt;/strong>。&lt;/p>
&lt;p>除了可以对密钥编码，还可以对证书进行编码，证书由于其复杂的格式，也不利于传输。&lt;/p>
&lt;p>如果用 openssl 命令查看私钥，则是下面这种格式&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>root@desistdaydream:~/projects/DesistDaydream/GoLearning# openssl rsa -text -noout -in cryptography/private.pem
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>RSA Private-Key: &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2048&lt;/span> bit, &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> primes&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>modulus:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 00:d0:94:1c:6e:25:54:61:1d:34:23:1f:25:f7:a5:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ......
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>publicExponent: &lt;span style="color:#0000cf;font-weight:bold">65537&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>0x10001&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>privateExponent:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 00:bb:fe:52:e5:9f:f5:be:96:30:d0:db:19:40:6d:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ......
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>prime1:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 00:f3:06:5f:c4:e6:27:d2:1d:ba:d1:35:40:34:b1:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ......
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>prime2:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 00:db:b6:ee:09:28:3c:53:f5:70:e7:9a:11:8b:55:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ......
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>exponent1:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 3b:17:1e:ac:22:86:26:29:c2:65:e1:fb:c5:94:3e:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ......
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>exponent2:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 00:a4:a5:5d:95:61:20:6c:2e:36:30:68:45:13:6b:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ......
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>coefficient:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 00:e3:ed:7a:4a:2d:4c:ec:e0:0d:77:e8:4e:df:9b:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ......
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="pem-文件格式">PEM 文件格式&lt;a class="td-heading-self-link" href="#pem-%e6%96%87%e4%bb%b6%e6%a0%bc%e5%bc%8f" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Privacy-Enhanced_Mail">Wiki, PEM&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Privacy-Enhanced Mail(增强隐私的邮件，简称 PEM)&lt;/strong> 是一种&lt;strong>文件的格式&lt;/strong>(虽然曾经不止代表文件格式)。这种格式的文件用于存储 加密的密钥、证书 等数据。&lt;/p>
&lt;p>PEM 起源于 1993 年 IETF 定义“隐私增强邮件”的一组标准，尽管这个标准未得到广泛采用，并已被 PGP 和 S/MIME 取代，但其中定义的&lt;strong>各种文本编码格式&lt;/strong>却变得非常流行。所以，PEM 这种文件编码格式最终由 IETF 在 RFC7468 中正式定义。&lt;/p>
&lt;h2 id="pem-格式">PEM 格式&lt;a class="td-heading-self-link" href="#pem-%e6%a0%bc%e5%bc%8f" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>PEM 格式的内容由两部分组成&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Type(类型)&lt;/strong> # 用来表示 Contents(内容) 是什么，是 密钥 还是 证书 等等，同时也用来定位 Contents(内容) 在 PEM 格式文件中的位置。
&lt;ul>
&lt;li>类型以 &lt;code>-----BEGIN 标签-----&lt;/code>作为开头第一行，并以&lt;code>----- END 标签 -----&lt;/code>作为结尾最后一行。其中的&lt;code>标签&lt;/code>用来确定编码消息的类型，也就是说，标签用来表示该 PEM 格式的文件的作用是什么。标签包括以下几种：
&lt;ul>
&lt;li>CERTIFICATE # 证书&lt;/li>
&lt;li>CERTIFICATE REQUEST # 证书请求&lt;/li>
&lt;li>PRIVATE KEY# 私钥&lt;/li>
&lt;li>PUBLIC KEY # 公钥&lt;/li>
&lt;li>X509 CRL #&lt;/li>
&lt;li>等等等等，很多&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>标签中还可以添加其他标识符，只要保证标签中具有上述字符串即可。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Contents(内容)&lt;/strong> # 密钥或证书的具体内容。
&lt;ul>
&lt;li>Contents 是 密钥、证书等数据 转换为 Bytes(字节流) 后，使用 &lt;strong>Base64&lt;/strong> 对这些 &lt;strong>Bytes 进行编码&lt;/strong> 得到的结果。&lt;/li>
&lt;li>注意：现在这个时代(本文写于 2020 年)由于 &lt;strong>PKCS&lt;/strong> 这种规范标准。一般情况下，Contents 必须符合 PKCS 这种标准，所以 密钥证书 并不会直接转换为 Bytes。一般情况下，是先使用 &lt;strong>ASN.1 的 DER(或其他规则)&lt;/strong> 将 证书、密钥 等数据 &lt;strong>编码为 Bytes 类型数据&lt;/strong>。然后再使用 Base64 对这些 Bytes 数据 进行编码得到字符串类型数据。
&lt;ul>
&lt;li>也就是说 证书或密钥 转换为 PCKS#X 标准(&lt;em>X 是数字&lt;/em>)，然后使用 Base64 编码得到 Contents(内容)。而常用的 PCKS#X 标准一般都是用的 ASN.1 的 DER 规则进行编码。
&lt;ul>
&lt;li>再深入一些的话，可以这么描述，&lt;strong>Contents(内容) 可以是使用 Base64 对符合 PKCS#1 标准格式的数据进行编码后得到的字符串&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>而 PKCS#1 标准实际上指的是使用 ASN.1 的 DER 编码规则对公钥和私钥编码。由于编码后通常是 Bytes 类型的数据，所以需要再使用 Base64 编码得到便于传递的字符串类型的数据。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>一般写为 &lt;code>PCKS#1, ASN.1 DER&lt;/code>、&lt;code>PCKS#8, ASN.1 DER&lt;/code> 等等。逗号前面是标准名称，逗号后面是符合该标准的编码规则&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>PEM 格式的数据文件通常以 &lt;code>.pem&lt;/code>、&lt;code>.cer&lt;/code>、&lt;code>.crt&lt;/code>、&lt;code>.key&lt;/code> 结尾。其中 .ert 和 .crt 常用来表示证书、.key 常用来表示密钥(公钥或私钥)&lt;/p>
&lt;blockquote>
&lt;p>PEM 文件中的标签比文件后缀更准确地表示数据类型，因为可以将许多不同类型的数据保存在 .pem 文件中。&lt;/p>
&lt;/blockquote>
&lt;h2 id="pem-格式文件示例">PEM 格式文件示例&lt;a class="td-heading-self-link" href="#pem-%e6%a0%bc%e5%bc%8f%e6%96%87%e4%bb%b6%e7%a4%ba%e4%be%8b" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 私钥&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-----BEGIN RSA PRIVATE KEY-----
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kXxvLDA91VHVdTmRCYPWDOlNCbUi6S42KHmN2RukRM/Y0wMxHvlN7hnYCTrv8nEk
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>KcKJ9XNJAlWxETUe6hYQbvU6JtgIwPav38ZF2IqqdJF/v5EsQd1mg8PI3dqaGFNn
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wc2osmNP4FN4sz57P1ifsNWobVwvol0VLvuF5zfjvlNzr7YuNGxr/Uu/pQVukQFf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>8u0mmi7AZdzjdfsphW0Zi4fil3hI5m8HbTsbhfT53TofKt4nRZA/DUCCu6+/NHEW
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ntY5STMyU0DQW8hasD9DfF9RiSVKm4Unn8TQ6yMFNQXCX5Sg3vgduMz8TUkT1KM3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">WnwX9X5IO5WeA72dsVOXgQ&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-----END RSA PRIVATE KEY-----
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 公钥&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-----BEGIN RSA PUBLIC KEY-----
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0JUbBOzKiYp/0MXhux8XH0SxWBfnzCATH4oGvDj5SD6H2z1m97mkpRhRMul4l8vM
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Lhgf2rWHsVHq5FjMeRVigOIIlHyjOFurigZ7pcVqWzHYIck6cGsI4JtEBNuqQ9EM
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NyMYGpcV+TV0bw9nTUK//Fst++dueWVLmqlKTCbFQRmo2lxwKzXqKjJkSgxge/gh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>MvC4/xh1Keizzlm73pAnOVhTow+HW5Wgas+maPXMaNcpJ8RryFlG6ke3CBaNqrV8
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>iheO4riYPZQWQkl8NGLlJyXeq/awl6ovbshyZcO45faoDMxl/J93+sczW1ZlF/1B
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">QKUvQGEsNFsT7YAejZvh7w&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-----END RSA PUBLIC KEY-----
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="der-编码规则">DER 编码规则&lt;a class="td-heading-self-link" href="#der-%e7%bc%96%e7%a0%81%e8%a7%84%e5%88%99" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/X.690#DER_encoding">Wiki, DER&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Distinguished Encoding Rules(专用编码规则，简称 DER)&lt;/strong> 是 BER 的一种受限制变体，用于为 ASN.1 所描述的数据结构生成明确的传输语法。像 CER 一样，DER 编码是有效的 BER 编码。 DER 与 BER 相同，只是删除了一个发送者的所有选项。&lt;/p>
&lt;p>用白话说： DER 是一种以二进制形式编码 ASN.1 语法的方法&lt;/p>
&lt;p>&lt;strong>DER，是对 &lt;a href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E6%97%A0%E6%B3%95%E5%88%86%E7%B1%BB%E7%9A%84%E8%AF%AD%E8%A8%80/ASN.1.md">ASN.1&lt;/a> 这种语言进行编码的一种规则&lt;/strong>，也是最常用的一种。所谓对某种语言编码，就是类似编译器的效果。所以也可以称为 &lt;strong>ASN.1 的 DER 规则&lt;/strong>。&lt;/p>
&lt;h2 id="x690-标准">X.690 标准&lt;a class="td-heading-self-link" href="#x690-%e6%a0%87%e5%87%86" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>是 ITU-T 标准，指定了几种 ASN.1 编码格式&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/X.690#BER_encoding">Basic Encoding Rules&lt;/a>(基本编码规则，简称 BER)&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/X.690#CER_encoding">Canonical Encoding Rules&lt;/a>(规范编码规则，简称 CER)&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/X.690#DER_encoding">Distinguished Encoding Rules&lt;/a>(杰出编码规则，简称 DER)&lt;/li>
&lt;/ul>
&lt;h1 id="asn1-与-pem-的关系">ASN.1 与 PEM 的关系&lt;a class="td-heading-self-link" href="#asn1-%e4%b8%8e-pem-%e7%9a%84%e5%85%b3%e7%b3%bb" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/ASN.1#Relation_to_Privacy-Enhanced_Mail_(PEM)_Encoding">Wiki, ASN.1&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>PEM 编码 与 ASN.1 及其 编码/解码器 完全无关。但是由于编码后的 ASN.1 数据通常是二进制的，也就是 Bytes(字节流) 类型的数据，所以经常使用 PEM 对这些编码后的 ASN.1 数据再次进行编码，以获得人类可读的字符串类型数据。这可以帮助再文本编码敏感的媒体(比如 SMTP 服务)上进行传输以及复制和粘贴。&lt;/p>
&lt;h1 id="pkcs非对称加密标准">PKCS(非对称加密标准)&lt;a class="td-heading-self-link" href="#pkcs%e9%9d%9e%e5%af%b9%e7%a7%b0%e5%8a%a0%e5%af%86%e6%a0%87%e5%87%86" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/PKCS">Wiki, PKCS&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Public Key Cryptography Standards(非对称加密标准，简称 PKCS)&lt;/strong>。在密码学中，&lt;strong>PKCS&lt;/strong>代表“公钥密码学标准”。这些是 RSA Security LLC 从 1990 年代初开始设计和发布的一组 &lt;a href="https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Cryptography/%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86/%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86.md">公开密钥加密&lt;/a>密钥加密 &lt;strong>标准&lt;/strong>。该公司发布了这些标准，以促进他们拥有专利的加密技术的使用，例如 RSA 算法，Schnorr 签名算法以及其他几种。尽管不是行业标准（因为公司保留了对它们的控制权），但近年来有些标准[&lt;em>何时？&lt;/em>]已开始进入“标准轨道”相关标准组织的流程，例如 IETF 和 PKIX 工作组。&lt;/p>
&lt;blockquote>
&lt;p>注意:很多标准已经被废弃,所以下文看到的标准的编号不是连续的,比如 2、4、13、14 等等标准，就没有了，现在最常用的是 1、8 号标准&lt;/p>
&lt;/blockquote>
&lt;p>PKCS 的起源&lt;/p>
&lt;p>X.509 只是一种常用的证书格式，但有人觉得这种格式能装的信息不够多，因此 又定义了一些比 X.509 更大的数据结构（但仍然用 ASN.1）， 能将证书、秘钥以及其他东西封装（打包）到一起。因此，有时说我需要“一个证书”时，其 实真正说的是包（package）中包含的那个“证书”（a certificate in one of these envelopes），而不是这个包本身。&lt;/p>
&lt;h2 id="pkcs1---rsa-密码学标准">PKCS＃1 - RSA 密码学标准&lt;a class="td-heading-self-link" href="#pkcs1---rsa-%e5%af%86%e7%a0%81%e5%ad%a6%e6%a0%87%e5%87%86" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>参见 RFC 8017。该标准定义了 RSA 公钥和私钥的数学属性和格式(这个密钥对是使用 ASN.1 的编码规则编码后的结果)。此外，还定义了执行 RSA 加密、解密、签名、验签的基本算法。&lt;/p>
&lt;h2 id="pkcs3---diffie-hellman-密钥协商标准">PKCS＃3 - Diffie-Hellman 密钥协商标准&lt;a class="td-heading-self-link" href="#pkcs3---diffie-hellman-%e5%af%86%e9%92%a5%e5%8d%8f%e5%95%86%e6%a0%87%e5%87%86" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>一种加密协议，允许彼此不具有先验知识的两个方通过不安全的通信通道共同建立共享的秘密密钥。&lt;/p>
&lt;h2 id="pkcs5---基于密码的加密标准">PKCS＃5 - 基于密码的加密标准&lt;a class="td-heading-self-link" href="#pkcs5---%e5%9f%ba%e4%ba%8e%e5%af%86%e7%a0%81%e7%9a%84%e5%8a%a0%e5%af%86%e6%a0%87%e5%87%86" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>参见 RFC 8018 和 PBKDF2。&lt;/p>
&lt;h2 id="pkcs7---加密消息语法标准">PKCS＃7 - 加密消息语法标准&lt;a class="td-heading-self-link" href="#pkcs7---%e5%8a%a0%e5%af%86%e6%b6%88%e6%81%af%e8%af%ad%e6%b3%95%e6%a0%87%e5%87%86" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>参见 RFC 2315。用于在 PKI 下对消息进行签名和/或加密。也用于证书分发（例如，作为对 PKCS＃10 消息的响应）。形成了 S / MIME 的基础，S / MIME 于 2010 年基于 RFC 5652（一种更新的加密消息语法标准（CMS））建立。通常用于单点登录。&lt;/p>
&lt;h2 id="pkcs8---私钥内容的标准语法">PKCS＃8 - 私钥内容的标准语法&lt;a class="td-heading-self-link" href="#pkcs8---%e7%a7%81%e9%92%a5%e5%86%85%e5%ae%b9%e7%9a%84%e6%a0%87%e5%87%86%e8%af%ad%e6%b3%95" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;blockquote>
&lt;p>注意：&lt;/p>
&lt;ul>
&lt;li>该标准仅定义了私钥的标准，一般情况下，对应的公钥标准一般是 PKIX。&lt;/li>
&lt;li>该标准不仅定义了 RSA 算法的密钥的标准，还定义了其他算法的标准。而 PKCS#1 仅定义了 RSA 算法密钥的标准。&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>参见 RFC 5958。用于携带私有证书密钥对（加密或未加密）。&lt;/p>
&lt;h2 id="pkcs9---所选属性类型">PKCS＃9 - 所选属性类型&lt;a class="td-heading-self-link" href="#pkcs9---%e6%89%80%e9%80%89%e5%b1%9e%e6%80%a7%e7%b1%bb%e5%9e%8b" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>参见 RFC 2985。&lt;/p>
&lt;p>定义用于 PKCS＃6 扩展证书，PKCS＃7 数字签名消息，PKCS＃8 私钥信息和 PKCS＃10 证书签名请求中使用的所选属性类型。&lt;/p>
&lt;h2 id="pkcs10---认证请求标准证书请求-csr-的标准">PKCS＃10 - 认证请求标准(证书请求 CSR 的标准)&lt;a class="td-heading-self-link" href="#pkcs10---%e8%ae%a4%e8%af%81%e8%af%b7%e6%b1%82%e6%a0%87%e5%87%86%e8%af%81%e4%b9%a6%e8%af%b7%e6%b1%82-csr-%e7%9a%84%e6%a0%87%e5%87%86" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>参见 RFC 2986。发送到 CA 以请求公钥认证的消息格式。请参阅证书签名请求。&lt;/p>
&lt;h2 id="pkcs11---加密令牌接口">PKCS＃11 - 加密令牌接口&lt;a class="td-heading-self-link" href="#pkcs11---%e5%8a%a0%e5%af%86%e4%bb%a4%e7%89%8c%e6%8e%a5%e5%8f%a3" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>也称为“ Cryptoki”。一个 API，用于定义加密令牌的通用接口（另请参阅硬件安全模块）。常用于单点登录，公共密钥加密和磁盘加密[10]系统。&lt;/p>
&lt;p>RSA Security 已将 PKCS＃11 标准的进一步开发移交给了 OASIS PKCS 11 技术委员会。&lt;/p>
&lt;h2 id="pkcs12---个人信息交换语法标准">PKCS＃12 - 个人信息交换语法标准&lt;a class="td-heading-self-link" href="#pkcs12---%e4%b8%aa%e4%ba%ba%e4%bf%a1%e6%81%af%e4%ba%a4%e6%8d%a2%e8%af%ad%e6%b3%95%e6%a0%87%e5%87%86" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>参见 RFC 7292。定义一种文件格式，通常用于存储私有密钥以及随附的公共密钥证书，并使用基于密码的对称密钥进行保护。&lt;/p>
&lt;p>PFX 是 PKCS＃12 的前身。&lt;/p>
&lt;p>此容器格式可以包含多个嵌入式对象，例如多个证书。通常使用密码进行保护/加密。可用作 Java 密钥库的格式，并在 Mozilla Firefox 中建立客户端身份验证证书。可用于 Apache Tomcat。&lt;/p>
&lt;h2 id="pkcs15---密码令牌信息格式标准">PKCS＃15 - 密码令牌信息格式标准&lt;a class="td-heading-self-link" href="#pkcs15---%e5%af%86%e7%a0%81%e4%bb%a4%e7%89%8c%e4%bf%a1%e6%81%af%e6%a0%bc%e5%bc%8f%e6%a0%87%e5%87%86" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>定义一个标准，允许加密令牌的用户向应用程序标识自己，而与应用程序的 Cryptoki 实现（PKCS＃11）或其他 API 无关。RSA 放弃了本标准中与 IC 卡相关的部分，使其符合 ISO / IEC 7816-15。[14]&lt;/p></description></item></channel></rss>