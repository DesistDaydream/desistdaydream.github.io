<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – Cipher</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Cryptography/Cipher/</link><description>Recent content in Cipher on 断念梦</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Cryptography/Cipher/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Cipher</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Cryptography/Cipher/Cipher/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Cryptography/Cipher/Cipher/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Cipher">Wiki，Cipher&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Cipher&lt;/strong> 在密码学中表示一种用于执行加密或解密的 &lt;strong>algorithm(算法)&lt;/strong>。Cipher 不太好翻译中文，password 是密码，Cipher 可以理解为一套&lt;strong>密码系统&lt;/strong>，i.e. 一系列可以作为过程遵循的明确定义的步骤&lt;/p>
&lt;blockquote>
&lt;p>注意：cipher 和 cypher 是同一个意思，两种不同的拼写方法&lt;/p>
&lt;/blockquote>
&lt;h2 id="block-cipher-与-stream-cipher">Block cipher 与 Stream cipher&lt;/h2>
&lt;p>随着时代的发展，曾经对每个字节进行加密的方式不再显示，一个动辄几个 G 的文件，如果使用与明文相同的密钥进行加密，那么密钥也需要几个 G，这给密钥的分发造成了苦难，这时，可以将原始明文划分成多个长度相同的小块（也就是分组），然后使用和这些小块长度相同改的密钥依次和所有分组中的明文进行异或运算以进行加密，这就是早期的 &lt;a href="docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Cryptography/Cipher/Block%20cipher.md">Block cipher&lt;/a> 加密算法。解密时，先对密文进行同样大小的分组，然后用相同的密钥和所有的密文块异或，再合并得到明文。&lt;/p>
&lt;p>TODO: Stream cipher 算法是基于什么痛点出现的呢？&lt;/p>
&lt;h1 id="分类">分类&lt;/h1>
&lt;h1 id="密码学">密码学&lt;/h1></description></item><item><title>Docs: Block cipher</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Cryptography/Cipher/Block-cipher/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Cryptography/Cipher/Block-cipher/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Block_cipher">Wiki，Block_cipher&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation">WIki，Block_cipher_mode_of_operation&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.bilibili.com/video/BV1qW4y1L7tN">B 站，【计算机博物志】DES的生与死&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Block cipher(分组密码)&lt;/strong> 是一种确定性算法，对固定长度的 bits（也称为 blcok）进行操作。与 Block cipher 相关的另一种算法，是 &lt;a href="docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Cryptography/Cipher/Stream%20cipher.md">Stream cipher&lt;/a>。&lt;/p>
&lt;p>Block cipher 的基本逻辑：将待加密的明文，分为固定 bits 的块，比如 AES 的 128 bit block，然后使用相同长度的密钥（或指定倍数的长度），对每个 block 进行加密。&lt;/p>
&lt;p>Block cipher 算法设计了多种模式以适应各种加密需求：&lt;/p>
&lt;ul>
&lt;li>ECB # 最简单的模式，不需要 IV&lt;/li>
&lt;li>CBC&lt;/li>
&lt;li>CFB&lt;/li>
&lt;li>CTR&lt;/li>
&lt;li>等等&lt;/li>
&lt;/ul>
&lt;p>对于每个加密操作，大多数模式都需要唯一的二进制序列，通常称为初始化向量 (IV)。 IV 必须是非重复的，并且对于某些模式来说，也是随机的。初始化向量用于确保即使使用相同的密钥独立地对相同的明文进行多次加密，也会生成不同的密文。 分组密码可能能够对不止一种块大小进行操作，但在转换过程中块大小始终是固定的。分组密码模式对整个块进行操作，如果数据的最后部分小于当前块大小，则要求将其填充到整个块。然而，有些模式不需要填充，因为它们有效地使用分组密码作为 &lt;a href="docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Cryptography/Cipher/Stream%20cipher.md">Stream cipher&lt;/a>。&lt;/p>
&lt;p>在 Block cipher 算法中，首先要明确几个概念&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#padding">Padding(填充)&lt;/a>&lt;/li>
&lt;li>&lt;a href="#iv">Initialization vector((初始化向量，简称 IV)&lt;/a>
&lt;ul>
&lt;li>ECB 模式不需要 IV&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="padding">Padding&lt;/h2>
&lt;p>Block cipher 算法在加密时将明文分成固定长度的块（128 bit，i.e. 16 Bytes）进行加密。如果明文的长度不是16 Bytes 的整数倍，就需要进行 &lt;strong>Padding(填充)&lt;/strong> 来补齐。&lt;/p>
&lt;p>填充方式：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>NoPadding&lt;/strong> # 不填充，要求明文是 16 Bytes 的整数倍。&lt;/li>
&lt;li>&lt;strong>PKCS5Padding/PKCS7Padding&lt;/strong> # 按照 &lt;code>PKCS#5&lt;/code> 或 &lt;code>PKCS#7&lt;/code> 的标准进行填充，填充值为缺少的字节数，例如缺少 5 个字节，就填充 &lt;code>05 05 05 05 05&lt;/code>。这两种方式在 &lt;a href="docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Cryptography/%E5%AF%B9%E7%A7%B0%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86/AES.md">AES&lt;/a> 中没有区别。
&lt;ul>
&lt;li>与非对称加密标准中的 PKCS 好像不是一个概念？？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>ISO10126Padding&lt;/strong> # 除了最后一个字节表示缺少的字节数外，其他字节用随机数填充，例如缺少 5 个字节，就填充 &lt;code>XX XX XX XX 05&lt;/code>（XX 表示随机数）。&lt;/li>
&lt;li>&lt;strong>ZeroPadding&lt;/strong> # 用 0 填充，如果明文刚好是 16 字节的整数倍，就再添加一个分组的 0。&lt;/li>
&lt;li>&lt;strong>其他&lt;/strong> # 还有一些其他的填充方式，如 ISO7816-4Padding、X923Padding、TBCPadding 等，具体可以参考网上的资料。&lt;/li>
&lt;/ul>
&lt;p>不同的填充方式会影响加密和解密的效率和安全性，一般推荐使用 PKCS5Padding/PKCS7Padding。&lt;/p>
&lt;h2 id="iv">IV&lt;/h2>
&lt;p>&lt;strong>Initialization vector(初始化向量，简称 IV)&lt;/strong> 是一个 block of bits，除了 ECB 以外的很多模式都是用 IV 来随机化加密（就像 Hash 加盐似的），从而让相同的密码文可以生成不同的密文。&lt;/p>
&lt;h1 id="加密模式">加密模式&lt;/h1>
&lt;ul>
&lt;li>ECB # 最简单，不再推荐使用。Go 的标准库中，没有 ECB 模式的实现方式。&lt;/li>
&lt;li>CBC&lt;/li>
&lt;li>CFB&lt;/li>
&lt;li>等等&lt;/li>
&lt;/ul>
&lt;h2 id="ecb">ECB&lt;/h2>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Electronic_codebook_(ECB)">https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Electronic_codebook_(ECB)&lt;/a>&lt;/p>
&lt;p>&lt;strong>Electronic codebook(电子密码本，简称 ECB)&lt;/strong> 是最简单（不再使用）的加密模式是模式（以传统物理密码本命名）。消息被分成块，每个块都单独加密。&lt;/p>
&lt;h2 id="cbc">CBC&lt;/h2>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_block_chaining_(CBC)">https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_block_chaining_(CBC)&lt;/a>&lt;/p>
&lt;p>&lt;strong>Cipher block chaining(密码块链)&lt;/strong>&lt;/p>
&lt;h1 id="分类">分类&lt;/h1>
&lt;h1 id="密码学">密码学&lt;/h1></description></item><item><title>Docs: Stream cipher</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Cryptography/Cipher/Stream-cipher/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Cryptography/Cipher/Stream-cipher/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Stream_cipher">Wiki，Stream_cipher&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zhuanlan.zhihu.com/p/460544573">知乎，TRIVIUM:密码学 Stream Cipher&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item></channel></rss>