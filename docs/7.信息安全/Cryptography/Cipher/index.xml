<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Cipher on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Cryptography/Cipher/</link><description>Recent content in Cipher on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Cryptography/Cipher/index.xml" rel="self" type="application/rss+xml"/><item><title>Cipher</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Cryptography/Cipher/Cipher/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Cryptography/Cipher/Cipher/</guid><description>概述 参考：
Wiki, Cipher Cipher 在密码学中表示一种用于执行加密或解密的 algorithm(算法)。Cipher 不太好翻译中文，password 是密码，Cipher 可以理解为一套密码系统，i.e. 一系列可以作为过程遵循的明确定义的步骤
注意：cipher 和 cypher 是同一个意思，两种不同的拼写方法
Block cipher 与 Stream cipher 随着时代的发展，曾经对每个字节进行加密的方式不再显示，一个动辄几个 G 的文件，如果使用与明文相同的密钥进行加密，那么密钥也需要几个 G，这给密钥的分发造成了苦难，这时，可以将原始明文划分成多个长度相同的小块（也就是分组），然后使用和这些小块长度相同改的密钥依次和所有分组中的明文进行异或运算以进行加密，这就是早期的 Block cipher 加密算法。解密时，先对密文进行同样大小的分组，然后用相同的密钥和所有的密文块异或，再合并得到明文。
TODO: Stream cipher 算法是基于什么痛点出现的呢？</description></item><item><title>Block cipher</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Cryptography/Cipher/Block-cipher/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Cryptography/Cipher/Block-cipher/</guid><description>概述 参考：
Wiki, Block_cipher Wiki, Block_cipher_mode_of_operation B 站，【计算机博物志】DES的生与死 Block cipher(分组密码) 是一种确定性算法，对固定长度的 bits（也称为 blcok）进行操作。与 Block cipher 相关的另一种算法，是 Stream cipher。
Block cipher 的基本逻辑：将待加密的明文，分为固定 bits 的块，比如 AES 的 128 bit block，然后使用相同长度的密钥（或指定倍数的长度），对每个 block 进行加密。
Block cipher 算法设计了多种模式以适应各种加密需求：
ECB # 最简单的模式，不需要 IV CBC CFB CTR 等等 对于每个加密操作，大多数模式都需要唯一的二进制序列，通常称为初始化向量 (IV)。 IV 必须是非重复的，并且对于某些模式来说，也是随机的。初始化向量用于确保即使使用相同的密钥独立地对相同的明文进行多次加密，也会生成不同的密文。 分组密码可能能够对不止一种块大小进行操作，但在转换过程中块大小始终是固定的。分组密码模式对整个块进行操作，如果数据的最后部分小于当前块大小，则要求将其填充到整个块。然而，有些模式不需要填充，因为它们有效地使用分组密码作为 Stream cipher。
在 Block cipher 算法中，首先要明确几个概念
Padding(填充) Initialization vector((初始化向量，简称 IV) ECB 模式不需要 IV Padding Block cipher 算法在加密时将明文分成固定长度的块（128 bit，i.e. 16 Bytes）进行加密。如果明文的长度不是16 Bytes 的整数倍，就需要进行 Padding(填充) 来补齐。</description></item><item><title>Stream cipher</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Cryptography/Cipher/Stream-cipher/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Cryptography/Cipher/Stream-cipher/</guid><description>概述 参考：
Wiki, Stream_cipher 知乎，TRIVIUM:密码学 Stream Cipher</description></item></channel></rss>