<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Crypto mgmt on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Crypto-mgmt/</link><description>Recent content in Crypto mgmt on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Crypto-mgmt/index.xml" rel="self" type="application/rss+xml"/><item><title>ACME</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Crypto-mgmt/ACME/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Crypto-mgmt/ACME/</guid><description>概述 参考：
RFC 8555, Automatic Certificate Management Environment (ACME) RFC 8737, Automated Certificate Management Environment (ACME) TLS Application‑Layer Protocol Negotiation (ALPN) Challenge Extension RFC 8738, Automated Certificate Management Environment (ACME) IP Identifier Validation Extension Wiki, ACME Automatic Certificate Management Environment(自动证书管理环境，简称 ACME) 是一种通信协议，用于自动化证书颁发机构与其用户的 Web 服务器之间的交互，允许以非常低的成本自动部署 PKI。它是由 ISRG 为他们的 Let&amp;rsquo;s Encrypt 服务设计的。
ACME 服务提供商 支持免费或低成本基于 ACME 的证书服务的提供商包括 Let&amp;rsquo;s Encrypt、Buypass Go SSL、ZeroSSL 和 SSL.com。许多其他证书颁发机构和软件供应商提供 ACME 服务，作为 Entrust 和 DigiCert 等付费 PKI 解决方案的一部分。
ACME 的实现 想要实现自动签证书，要经过如下几个步骤</description></item><item><title>CFSSL</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Crypto-mgmt/CFSSL/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Crypto-mgmt/CFSSL/</guid><description>概述 参考：
GitHub 项目,cloudflare/cfssll 官网 公众号 cfssl 与 openssl 类似，不过是使用 go 编写，由 CloudFlare 开源的一款 PKI/TLS 工具。主要程序有 cfssl，是 CFSSL 的命令行工具，cfssljson 用来从 cfssl 程序获取 JSON 输出，并将证书，密钥，CSR 和 bundle 写入文件中。
使用 CFSSL 创建 CA 认证步骤 创建认证中心(CA) cfssl 可以创建一个获取和操作证书的内部认证中心。运行认证中心需要一个 CA 证书和相应的 CA 私钥。任何知道私钥的人都可以充当 CA 来颁发证书。因此，私钥的保护至关重要，这里我们以 k8s 所需的证书来实践一下：
cfssl print-defaults config &amp;gt; config.json # 默认证书策略配置模板 cfssl print-defaults csr &amp;gt; csr.json #默认csr请求模板 结合自身的要求，修改证书请求文件csr.json,证书 10 年
{ &amp;#34;CN&amp;#34;: &amp;#34;kubernetes&amp;#34;, &amp;#34;key&amp;#34;: { &amp;#34;algo&amp;#34;: &amp;#34;rsa&amp;#34;, &amp;#34;size&amp;#34;: 2048 }, &amp;#34;names&amp;#34;: [ { &amp;#34;C&amp;#34;: &amp;#34;CN&amp;#34;, &amp;#34;ST&amp;#34;: &amp;#34;BeiJing&amp;#34;, &amp;#34;L&amp;#34;: &amp;#34;BeiJing&amp;#34;, &amp;#34;O&amp;#34;: &amp;#34;k8s&amp;#34;, &amp;#34;OU&amp;#34;: &amp;#34;System&amp;#34; } ], &amp;#34;ca&amp;#34;: { &amp;#34;expiry&amp;#34;: &amp;#34;87600h&amp;#34; } } 知识点:</description></item><item><title>系统证书管理</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Crypto-mgmt/%E7%B3%BB%E7%BB%9F%E8%AF%81%E4%B9%A6%E7%AE%A1%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Crypto-mgmt/%E7%B3%BB%E7%BB%9F%E8%AF%81%E4%B9%A6%E7%AE%A1%E7%90%86/</guid><description>概述 参考：
SSL 证书缓存清理 Windows certutil -delstore my &amp;quot;${CertificateName}&amp;quot;
Linux update-ca-certificates --fresh</description></item><item><title>自建CA脚本</title><link>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Crypto-mgmt/%E8%87%AA%E5%BB%BACA%E8%84%9A%E6%9C%AC/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Crypto-mgmt/%E8%87%AA%E5%BB%BACA%E8%84%9A%E6%9C%AC/</guid><description>概述 参考：
参考: https://rancher2.docs.rancher.cn/docs/installation/options/self-signed-ssl/_index
#!/bin/bash -e help () { echo &amp;#39; ================================================================ &amp;#39; echo &amp;#39; --ssl-domain: 生成ssl证书需要的主域名，如不指定则默认为www.rancher.local，如果是ip访问服务，则可忽略；&amp;#39; echo &amp;#39; --ssl-trusted-ip: 一般ssl证书只信任域名的访问请求，有时候需要使用ip去访问server，那么需要给ssl证书添加扩展IP，多个IP用逗号隔开；&amp;#39; echo &amp;#39; --ssl-trusted-domain: 如果想多个域名访问，则添加扩展域名（SSL_TRUSTED_DOMAIN）,多个扩展域名用逗号隔开；&amp;#39; echo &amp;#39; --ssl-size: ssl加密位数，默认2048；&amp;#39; echo &amp;#39; --ssl-cn: 国家代码(2个字母的代号),默认CN;&amp;#39; echo &amp;#39; --ssl-date: 指定ca签署的证书有效期,默认10年;&amp;#39; echo &amp;#39; --ca-date: 指定ca证书有效期,默认10年;&amp;#39; echo &amp;#39; 使用示例:&amp;#39; echo &amp;#39; ./create_self-signed-cert.sh --ssl-domain=www.test.com --ssl-trusted-domain=www.test2.com \ &amp;#39; echo &amp;#39; --ssl-trusted-ip=1.1.1.1,2.2.2.2,3.3.3.3 --ssl-size=2048 --ssl-date=36500 --ca-date=36500&amp;#39; echo &amp;#39; ================================================================&amp;#39; } case &amp;#34;$1&amp;#34; in -h|--help) help; exit;; esac if [[ $1 == &amp;#39;&amp;#39; ]];then help; exit; fi CMDOPTS=&amp;#34;$*&amp;#34; for OPTS in $CMDOPTS; do key=$(echo ${OPTS} | awk -F&amp;#34;=&amp;#34; &amp;#39;{print $1}&amp;#39; ) value=$(echo ${OPTS} | awk -F&amp;#34;=&amp;#34; &amp;#39;{print $2}&amp;#39; ) case &amp;#34;$key&amp;#34; in --ssl-domain) SSL_DOMAIN=$value ;; --ssl-trusted-ip) SSL_TRUSTED_IP=$value ;; --ssl-trusted-domain) SSL_TRUSTED_DOMAIN=$value ;; --ssl-size) SSL_SIZE=$value ;; --ssl-date) SSL_DATE=$value ;; --ca-date) CA_DATE=$value ;; --ssl-cn) CN=$value ;; esac done # CA相关配置 CA_DATE=${CA_DATE:-3650} CA_KEY=${CA_KEY:-cakey.</description></item></channel></rss>