<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – 📚标准化</title><link>https://desistdaydream.github.io/docs/x_%E6%A0%87%E5%87%86%E5%8C%96/</link><description>Recent content in 📚标准化 on 断念梦</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/x_%E6%A0%87%E5%87%86%E5%8C%96/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: 常用英文</title><link>https://desistdaydream.github.io/docs/x_%E6%A0%87%E5%87%86%E5%8C%96/%E5%B8%B8%E7%94%A8%E8%8B%B1%E6%96%87/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/x_%E6%A0%87%E5%87%86%E5%8C%96/%E5%B8%B8%E7%94%A8%E8%8B%B1%E6%96%87/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;a href="https://www.bilibili.com/video/BV1uu4y1c7PY">B 站，TED中字：如何在3个月内学会任何外语并且永远不会忘记?&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.bilibili.com/read/cv7989082/">https://www.bilibili.com/read/cv7989082/&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/364365898">https://zhuanlan.zhihu.com/p/364365898&lt;/a>&lt;/p>
&lt;p>具有多个发音的字母:&lt;/p>
&lt;ul>
&lt;li>a、e&lt;/li>
&lt;li>c、g、x、y&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>c 在单词里总共存在四种可能的读音，包括 /k/、/s/、/ʃ/ 和 /tʃ/。&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>发 /k/ 音
&lt;ul>
&lt;li>当字母c位于词尾&lt;/li>
&lt;li>当字母c位于词首或词中时
&lt;ul>
&lt;li>如果后跟辅音字母或者元音字母 a, o, u 其中的一个，没有例外。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>发 /s/ 音
&lt;ul>
&lt;li>当字母c位于词首或词中时
&lt;ul>
&lt;li>如果后跟元音字母 y，没有例外&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>当字母c的后面只有一个元音字母，它或者是 e 或者是 i，再之后就是辅音字母或者什么都没有了（也就是单词结束了）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>tion, sion, cian 发 /ʃ(ə)n/&lt;/strong>&lt;/p>
&lt;p>I fear your lust for power could get the better of you. You are a hero, not a politician.&lt;/p>
&lt;h1 id="编程">编程&lt;/h1>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>英文&lt;/th>
&lt;th>中文&lt;/th>
&lt;th>缩写&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Implementation&lt;/td>
&lt;td>实现&lt;/td>
&lt;td>impl&lt;/td>
&lt;td>Go 编程语言中用于表示实现了某个接口的结构体。Implement, Implementing&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>SUITE&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>复数为 suites，在计算机领域翻译为程序组。通常用于描述一个程序的执行单元。suite 可能是一个函数或者一个脚本，它包含了一系列的语句，这些语句通常在一个缩进的代码块中，这个代码块的开始和结束都使用了相同的缩进级别&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Compile&lt;/td>
&lt;td>编译&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Compiler&lt;/td>
&lt;td>编译器&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Bundle&lt;/td>
&lt;td>打包&lt;/td>
&lt;td>&lt;/td>
&lt;td>常见于前端，与后端编译不同，前端通常是将多个文件打包成一个文件，所以使用 Bundle 而不是 Compile&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Bundler&lt;/td>
&lt;td>打包器&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="常见缩写">常见缩写&lt;/h1>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>英文&lt;/th>
&lt;th>中文&lt;/th>
&lt;th>缩写&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Business&lt;/td>
&lt;td>业务&lt;/td>
&lt;td>BIZ&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Management&lt;/td>
&lt;td>管理&lt;/td>
&lt;td>MGMT&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Protocol&lt;/td>
&lt;td>协议&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="符号的英语名称">符号的英语名称&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.ruanyifeng.com/blog/2007/07/english_punctuation.html">阮一峰，标点符号的英语名称&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;code> &lt;/code> space 空格
&lt;code>.&lt;/code> period or full stop 句号
&lt;code>,&lt;/code> comma 逗号
&lt;code>:&lt;/code> colon 冒号
&lt;code>;&lt;/code> semicolon 分号
&lt;code>!&lt;/code> exclamation mark 惊叹号
&lt;code>?&lt;/code> question mark 问号
&lt;code>-&lt;/code> hyphen 连字符&lt;/p>
&lt;p>&lt;code>*&lt;/code> asterisk 星号
&amp;rsquo; apostrophe 所有格符号，单词内部的省略
— dash 破折号
&lt;code>_&lt;/code> underscore 下划线
‘ ’ single quotation marks 单引号
“ ” double quotation marks 双引号
( ) parenthesis or round brackets 圆括号
[ ] square brackets 方括号
&amp;lt;&amp;gt; Angle brackets 尖括号
{} curly brackets or braces 大括号
《 》French quotes 法文引号；书名号
&amp;hellip; ellipsis 省略号
¨ tandem colon 双点号
&amp;quot; ditto 同上
‖ parallel 双线号
／ slash or virgule or diagonal mark 斜线号
＆ ampersand = AND
～ tilde or swung dash 代字号
§ section; division 分节号
→ arrow 箭号；参见号
&lt;code>|&lt;/code> vertical bar 竖线
&lt;code>\&lt;/code> backslash 反斜线&lt;/p>
&lt;h2 id="数学符号的英文名称">数学符号的英文名称&lt;/h2>
&lt;p>＋ plus 加号；正号
－ minus 减号；负号
± plus or minus 正负号
× is multiplied by 乘号
÷ is divided by 除号
＝ is equal to 等于号
≠ is not equal to 不等于号
≡ is equivalent to 全等于号
≌ is equal to or approximately equal to 等于或约等于号
≈ is approximately equal to 约等于号
＜ less than sign 小于号
＞ more than or greater than sign 大于号
≮ is not less than 不小于号
≯ is not more than 不大于号
≤ is less than or equal to 小于或等于号
≥ is more than or equal to 大于或等于号
％ per cent 百分之…
‰ per mill 千分之…
∞ infinity 无限大号
∝ varies as 与…成比例
√ (square) root 平方根
∵ since; because 因为
∴ hence 所以
∷ equals, as (proportion) 等于，成比例
∠ angle 角
⌒ semicircle 半圆
⊙ circle 圆
○ circumference 圆周
△ triangle 三角形
⊥ perpendicular to 垂直于
∪ union of 并，合集
∩ intersection of 交，通集
∫ the integral of …的积分
∑ (sigma) summation of 总和
° degree 度
′ minute 分
″ second 秒
＃ number …号
℃ Celsius system 摄氏度
＠ at 在&lt;/p>
&lt;h1 id="词性">词性&lt;/h1>
&lt;p>英语的词性大约有 10 种，名词 n. 副词 adv. 介词 prep，代词 pron，数词 num，动词 v，形容词 adj，冠词 art，连词 conj，感叹词 interj，及物动词 vt，不及物动词 vi，助动词 vaux，缩写 a bbr，动词不定式 inf.，单数 sing，复数 pl，情态动词 aux.。不同的词性代表着不同的意思，所以才有了英语语法不同的说法，下面就让小编为大家带来英语词性缩写，让大家了解一番。&lt;/p>
&lt;p>英语词性缩写：&lt;/p>
&lt;p>n = 名词，noun 的缩写&lt;/p>
&lt;p>u = 不可数名词，uncountable noun 的缩写&lt;/p>
&lt;p>c = 可数名词，countable noun 的缩写&lt;/p>
&lt;p>v = 动词， verb 的缩写&lt;/p>
&lt;p>vi = 不及物动词，intransitive verb 的缩写&lt;/p>
&lt;p>vt = 及物动词，transitive verb 的缩写&lt;/p>
&lt;p>aux.v = 助动词，auxiliary verb 的缩写&lt;/p>
&lt;p>model verb 情态动词&lt;/p>
&lt;p>conj = 连接词 ，conjunction 的缩写&lt;/p>
&lt;p>adj. = 形容词，adjective 的缩写&lt;/p>
&lt;p>adv.= 副词，adverb 的缩写&lt;/p>
&lt;p>art. = 冠词，article 的缩写&lt;/p>
&lt;p>prep = 介词;preposition 的缩写&lt;/p>
&lt;p>pron = 代名词，pronoun 的缩写&lt;/p>
&lt;p>num = 数词，numeral 的缩写&lt;/p>
&lt;p>int. = 感叹词，interjection 的缩写&lt;/p>
&lt;h1 id="中英文对比">中英文对比&lt;/h1>
&lt;p>想要描述 “当XX时YY” 这种事情时，中文先表述当 XX，然后再描述具体的行为 YY；而英文先表述具体的行为 YY，然后才说当 XX。&lt;/p>
&lt;h1 id="常用名词">常用名词&lt;/h1>
&lt;p>row 行&lt;/p>
&lt;p>column 列&lt;/p></description></item><item><title>Docs: Foundation</title><link>https://desistdaydream.github.io/docs/x_%E6%A0%87%E5%87%86%E5%8C%96/Foundation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/x_%E6%A0%87%E5%87%86%E5%8C%96/Foundation/</guid><description/></item><item><title>Docs: IT</title><link>https://desistdaydream.github.io/docs/x_%E6%A0%87%E5%87%86%E5%8C%96/IT/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/x_%E6%A0%87%E5%87%86%E5%8C%96/IT/</guid><description/></item><item><title>Docs: Internet</title><link>https://desistdaydream.github.io/docs/x_%E6%A0%87%E5%87%86%E5%8C%96/Internet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/x_%E6%A0%87%E5%87%86%E5%8C%96/Internet/</guid><description/></item><item><title>Docs: Glossary</title><link>https://desistdaydream.github.io/docs/x_%E6%A0%87%E5%87%86%E5%8C%96/Glossary/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/x_%E6%A0%87%E5%87%86%E5%8C%96/Glossary/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Glossary">Wiki，Glossary&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Standardized Glossary(标准化术语)&lt;/strong>&lt;/p>
&lt;p>学习某项技术时，有些名词，比如某某可以是技术、规范、标准、行为、协议(协议其实从广义角度看也是标准)、等。&lt;/p>
&lt;h1 id="idc">IDC&lt;/h1>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Data_center">https://en.wikipedia.org/wiki/Data_center&lt;/a>&lt;/p>
&lt;p>&lt;strong>Internet data center(互联网数据中心，简称 IDC)&lt;/strong>，也可以简称为 Data center(数据中心)，并不用只限制在互联网。IDC 是一座建筑物、建筑物内的专用空间或一组建筑物，用于容纳计算机系统和相关设备。通常用于对外或对内提供 计算、存储、通信 这最基本的三大能力。&lt;/p>
&lt;h1 id="isp">ISP&lt;/h1>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Internet_service_provider">https://en.wikipedia.org/wiki/Internet_service_provider&lt;/a>&lt;/p>
&lt;p>&lt;strong>Internet service provider(互联网服务提供商，简称 ISP)&lt;/strong> 是提供访问、使用、管理或参与 Internet 服务的组织。 ISP 可以以多种形式组织，例如商业、社区所有、非营利或其他私人所有。比如 中国移动、中国联通、中国电信、etc. 都属于 ISP&lt;/p>
&lt;h1 id="版本信息">版本信息&lt;/h1>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>英文&lt;/th>
&lt;th>中文&lt;/th>
&lt;th>缩写&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Portable&lt;/td>
&lt;td>便携式、可移植&lt;/td>
&lt;td>&lt;/td>
&lt;td>一个程序如果不需要安装，直接使用二进制文件运行，通常称为 Portable。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="全部">全部&lt;/h1>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>英文&lt;/th>
&lt;th>中文&lt;/th>
&lt;th>缩写与简称&lt;/th>
&lt;th>链接&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Advanced Telecommunications Computing Architecture&lt;/td>
&lt;td>高级电信计算架构&lt;/td>
&lt;td>ATCA&lt;/td>
&lt;td>&lt;a href="https://en.wikipedia.org/wiki/Advanced_Telecommunications_Computing_Architecture">Wiki&lt;/a>&lt;/td>
&lt;td>atca架构本身就是一组工业标准框架，只要是基于这个国际统一标准做的板卡都可以集成到一起&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5-tuple&lt;/td>
&lt;td>五元组&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;a href="https://datatracker.ietf.org/doc/html/rfc6146#section-2">RFC 6146&lt;/a>&lt;/td>
&lt;td>IP地址，源端口，目的IP地址，目的端口，和传输层协议这五个量组成的一个集合&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Deep packet inspection&lt;/td>
&lt;td>深度数据包检测&lt;/td>
&lt;td>DPI&lt;/td>
&lt;td>&lt;a href="https://desistdaydream.github.io/docs/7.%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Network%20analysis/DPI.md">DPI&lt;/a>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Call Detail Record&lt;/td>
&lt;td>通话详细记录&lt;/td>
&lt;td>CDR(话单)&lt;/td>
&lt;td>&lt;a href="https://en.wikipedia.org/wiki/Call_detail_record">CDR&lt;/a>&lt;/td>
&lt;td>后期随着发展该名词逐渐包含了 网络、等 通信之间的详细记录，而不是单指通话。可以写为 &lt;strong>xDR&lt;/strong>(wiki 上没有 xDR，自己造的)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Remote Authentication Dial-In User Service&lt;/td>
&lt;td>远程用户拨号认证&lt;/td>
&lt;td>RADIUS&lt;/td>
&lt;td>&lt;a href="https://en.wikipedia.org/wiki/RADIUS">Wiki&lt;/a>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Situational awareness&lt;/td>
&lt;td>态势感知&lt;/td>
&lt;td>SA&lt;/td>
&lt;td>&lt;a href="https://en.wikipedia.org/wiki/Situation_awareness">Wiki&lt;/a>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Cyberspace Situation Awareness&lt;/td>
&lt;td>网络态势感知&lt;/td>
&lt;td>CSA&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Transaction&lt;!-- raw HTML omitted -->&lt;/td>
&lt;td>事务&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;a href="#transaction">Transaction&lt;/a>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="transaction">Transaction&lt;/h2>
&lt;p>假设某个数据可能需要经过 A、B、C、D 几个步骤才能修改完毕，我们把这四个步骤打包放到事务中，那么事务就可以确保这四个步骤要么全部执行完毕，要么全部都不去执行。这样即使在任意一个步骤断电或者程序崩溃都不会影响到数据的一致性问题。&lt;/p></description></item><item><title>Docs: 中国行政区划及代码</title><link>https://desistdaydream.github.io/docs/x_%E6%A0%87%E5%87%86%E5%8C%96/%E4%B8%AD%E5%9B%BD%E8%A1%8C%E6%94%BF%E5%8C%BA%E5%88%92%E5%8F%8A%E4%BB%A3%E7%A0%81/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/x_%E6%A0%87%E5%87%86%E5%8C%96/%E4%B8%AD%E5%9B%BD%E8%A1%8C%E6%94%BF%E5%8C%BA%E5%88%92%E5%8F%8A%E4%BB%A3%E7%A0%81/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://www.stats.gov.cn/sj/tjbz/qhdm/">国家统计局，统计用区划代码和城乡划分代码&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.stats.gov.cn/sj/tjbz/gjtjbz/202302/t20230213_1902741.html">国家统计局，统计用区划代码和城乡划分代码编制规则&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/modood/Administrative-divisions-of-China">GitHub 项目，modood/Administrative-divisions-of-China&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>Docs: Agent 与 Proxy</title><link>https://desistdaydream.github.io/docs/x_%E6%A0%87%E5%87%86%E5%8C%96/Agent-%E4%B8%8E-Proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/x_%E6%A0%87%E5%87%86%E5%8C%96/Agent-%E4%B8%8E-Proxy/</guid><description>
&lt;p>今天，在阅读 Jolokia 文档的时候，看到其支持两种架构模式： Agent Mode 与 Proxy Mode。从字面上理解，agent 与 proxy 都有代理的意思，那么它们在内涵上到底有什么不同的，值得思考。&lt;/p>
&lt;p>Agent Mode&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gu5xfp/1621662188213-22f409de-8912-4cb1-8722-b96d628694b6.png" alt="">&lt;/p>
&lt;p>Proxy Mode&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gu5xfp/1621662192171-21f74acf-2333-4edd-859d-cc8aba728428.png" alt="">
从上面两张图可以看出，Proxy 与 Agent 所处的位置和目的有所不同，Agent 处在被代理对象的内部，而 Proxy 与被代理对象之间处于一种相对独立的状态。&lt;/p>
&lt;p>举个例子，Proxy 类似于会计事务所，而 Agent 类似于公司里做会计工作的员工，它们都是处理企业的财务问题，但是角色不同。&lt;/p>
&lt;blockquote>
&lt;p>Agent 代理 通常指与用户接口的客户端程序&lt;/p>
&lt;p>Proxy 代理 接收用户请求并将请求发给服务器,然后接收服务器回应并返回给用户 实际上 Proxy 的功能就是代替用户访问服务器,用户被隐藏.&lt;/p>
&lt;/blockquote>
&lt;h2 id="the-etymology-of-agent-and-proxy-in-computer-networking-discourse">The Etymology of &amp;ldquo;Agent&amp;rdquo; and &amp;ldquo;Proxy&amp;rdquo; in Computer Networking Discourse&lt;/h2>
&lt;p>原文: &lt;a href="https://cyber.harvard.edu/archived_content/people/reagle/etymology-agency-proxy-19981217.html">https://cyber.harvard.edu/archived_content/people/reagle/etymology-agency-proxy-19981217.html&lt;/a>&lt;/p>
&lt;p>&lt;em>September 18, 1998.&lt;/em> _&lt;a href="https://link.zhihu.com/?target=mailto%3A//reagle%40mit.edu">Joseph Reagle&lt;/a>
_
Revised: January 15, 1999 .&lt;/p>
&lt;p>Given that the topic of this paper addresses both computer and legal agency, we believe an examination of the usage of the terms &amp;ldquo;agent&amp;rdquo; and &amp;ldquo;proxy&amp;rdquo; within each field is instructive. The technical use of the term _&lt;a href="https://link.zhihu.com/?target=http%3A//ai.miningco.com/">agent&lt;/a>_can be characterized into three overlapping periods. During the &lt;a href="https://link.zhihu.com/?target=http%3A//ai.miningco.com/library/weekly/aa080397.htm">earliest period&lt;/a> (1960 onward) the term was used by the artificial intelligence community. During the same period, the community of Internet network designers used the term in a way similar to our own: a service that acted on the behalf of another. Finally, the 1990&amp;rsquo;s has been the decade of the agents: where the concept of potentially intelligent, autonomous computer programs that interact with each other within a networked community is hyped. It was also during this latter period that the term &lt;em>proxy&lt;/em> became widely used.&lt;/p>
&lt;p>The technical concept of an agent was apparently first used in the artificial intelligence community in 1959 to describe the constituents (agents or demons) of a larger self-organizing behavior. [RR, Self] However, within AI its usage did not always relate to computer programs, but to linguistic analysis, particularly in Fillmore&amp;rsquo;s case grammar [Fill]:&lt;/p>
&lt;p>An agent is one who performs a particular action and this can be reflected in &amp;gt; &lt;em>syntax&lt;/em>. In English, in an active sentence, the agent is usually referred to by the subject&amp;hellip;. A form used to indicate the agent is called &amp;lsquo;agentive.&amp;rsquo; In case grammar, agentive or agent is one of the specified sets of cases. [Bear]&lt;/p>
&lt;p>Agents were the subject of papers on intelligent information sharing systems and artificial intelligence throughout the 70 and 80s&amp;rsquo;. Occasionally, IT related papers used the term as any other discipline would, such as &amp;ldquo;Computers as an Agent of Change.&amp;rdquo; [Dieb]. Consequently, the use of the term to denote an initiator of action both within the AI/linguistic community and its typical English usage led the term to be used as a substitute of the term &amp;ldquo;program&amp;rdquo; when the connotation of autonomy and network interaction were required.&lt;/p>
&lt;p>&amp;lt;&amp;gt; &lt;a href="https://link.zhihu.com/?target=http%3A//wombat.doc.ic.ac.uk/foldoc/contents/networking.html">networking&lt;/a>&amp;gt; In the &amp;gt; &lt;a href="https://link.zhihu.com/?target=http%3A//wombat.doc.ic.ac.uk/foldoc/foldoc.cgi%3Fclient-server">client-server&lt;/a> model, the part of the system that performs information preparation and exchange on behalf of a &amp;gt; &lt;a href="https://link.zhihu.com/?target=http%3A//wombat.doc.ic.ac.uk/foldoc/foldoc.cgi%3Fclient">client&lt;/a> or &amp;gt; &lt;a href="https://link.zhihu.com/?target=http%3A//wombat.doc.ic.ac.uk/foldoc/foldoc.cgi%3Fserver">server&lt;/a>. Especially in the phrase &amp;ldquo;intelligent agent&amp;rdquo; it implies some kind of automatic process which can communicate with other agents to perform some collective task on behalf of one or more humans. [&amp;gt; &lt;a href="https://link.zhihu.com/?target=http%3A//wombat.doc.ic.ac.uk/foldoc/index.html">Free On-line Dictionary of Computing&lt;/a>]&lt;/p>
&lt;p>While computer agents were the subject of papers for nearly two decades, it was in the 1990&amp;rsquo;s that the term became worthy of appearing in the title. Previously, the key words of related publications were information sharing, computer mediation, collaboration, and cooperation. [Wood] Starting in 1994, specific venues for agent research and discussion, [EWMA, CIKM] as well as a special issue of the Communications of the ACM placed the term prominently in popular discourse. [Comm]&lt;/p>
&lt;p>One of the best sources of information on how the terms &lt;em>agents&lt;/em> and &lt;em>proxies&lt;/em> came to be used in the context of the Internet and Web is the IETF&amp;rsquo;s Request for Comments (RFC) archive. While the first occurrence of _agent*in an RFC was administrative, [RFC95] its technical debut was instructive in its use with respect to qualifying an agent as a program that resides on and communicates with other programs on a network.&lt;/p>
&lt;p>The above premise is that the program (or agent) is doing the communicating with an NCP and thus needs to be identified for message traffic routing from an NCP. [RFC129]&lt;/p>
&lt;p>During the 70&amp;rsquo;s at the IETF the only other time _agent* was used in a technical sense was to refer to refer to the sender of an email. [RFC733] However, in 1980, with the arrival of the Transmission Control Protocol (TCP) [RFC761, RFC793] its usage was firmly established as a keyword in network protocol vernacular.&lt;/p>
&lt;p>By 1987, the Internet TCP/IP protocol had matured sufficiently that the larger issue of network architecture and management became a focus of work at the IETF. Three critical RFCs related to this work include:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://link.zhihu.com/?target=http%3A//info.internet.isi.edu/in-notes/rfc/files/rfc1067.txt">RFC1067&lt;/a> &amp;ndash; Simple Network Management Protocol. [RFC1067]&lt;/li>
&lt;li>&lt;a href="https://link.zhihu.com/?target=http%3A//info.internet.isi.edu/in-notes/rfc/files/rfc1027.txt">RFC1027&lt;/a> &amp;ndash; Using ARP to implement transparent subnet gateways. [RFC1027]&lt;/li>
&lt;li>&lt;a href="https://link.zhihu.com/?target=http%3A//info.internet.isi.edu/in-notes/rfc/files/rfc1009.txt">RFC1009&lt;/a> &amp;ndash; Requirements for Internet gateways. [RFC1009]&lt;/li>
&lt;/ul>
&lt;p>A concept integral to &lt;em>proxy&lt;/em> was that of a &lt;em>gateway&lt;/em>. &lt;strong>Gateways&lt;/strong> often provide an interface between two networks &amp;ndash; each of which may use a different networking protocol. A &lt;em>proxy&lt;/em> is often run on the gateway and acts as a go between, representing requests or services on behalf of one party in terms the second party can understand. The term proxy was seemingly first used in the network context by Shapiro [Shap] in 1986 to designate one object as a local representative of a remote object. However, both of our terms, &lt;em>agent&lt;/em> and &lt;em>proxy&lt;/em>, received their fullest treatment in 1989 in RFC 1095. &lt;em>Proxy&lt;/em> is explicitly placed in a legal context.&lt;/p>
&lt;p>3.1. Architectural OverviewThe basic concepts underlying OSI network management are quite simple [16]. There reside application processes called &amp;ldquo;managers&amp;rdquo; on managing systems (or management stations). There reside application processes called &amp;ldquo;agents&amp;rdquo; on managed systems (or network elements being managed). Network management occurs when managers and agents conspire (via protocols and a shared conceptual schema) to exchange monitoring and control information useful to the management of a network and its components. The terms &amp;ldquo;manager&amp;rdquo; and &amp;ldquo;agent&amp;rdquo; are also used in a loose and popular sense to refer to the managing and managed system, respectively&amp;hellip;. The terms &amp;ldquo;manager&amp;rdquo; and &amp;ldquo;agent&amp;rdquo; are used to denote the asymmetric relationship between management application processes in which the manager plays the superior role and the agent plays the subordinate.4.3. Proxy ManagementProxy is a term that originated in the legal community to indicate an entity empowered to perform actions on behalf of another. In our context, a proxy is a manager empowered to perform actions on behalf of another manager. This may be necessary because the manager cannot communicate directly with the managed devices either for security or other administrative reasons or because of incompatible communication mechanisms or protocols. In either case, the proxy assumes the agent role with respect to the requesting manager and the manager role with respect to the managed device. [RFC1090]&lt;/p>
&lt;p>Subsequently, the terms agents and proxy have become integral to the nomenclature of networks and their applications. This includes email [ref], ftp [ref], the Web [HTTP], and firewalls [ref]. Professors [Maes, Mins, Negr] and students associated with the &lt;a href="https://link.zhihu.com/?target=http%3A//agents.www.media.mit.edu/groups/agents/">Agent Group&lt;/a> at the &lt;a href="https://link.zhihu.com/?target=http%3A//www.media.mit.edu/">MIT Media Lab&lt;/a> have significantly contributed to the advancement of software agents in the popular scientific press. Others &amp;ndash; beyond the authors of this paper &amp;ndash; have begin to think about the social implications of autonomous network agents [Fried1-3, Niss]&lt;/p>
&lt;h3 id="references">References&lt;/h3>
&lt;p>[Bear] Beardon C. (Editor) &lt;em>&lt;a href="https://link.zhihu.com/?target=http%3A//www.amazon.com/exec/obidos/ASIN/0130482994/qid%3D906405323/sr%3D1-8/002-1402323-9200248">Artificial Intelligence Terminology : A Reference Guide (Ellis Horwood Series in Artificial Intelligence Foundations and Concepts)&lt;/a>&lt;/em> (1989).
[CIKM] Third International Conference on Information and Knowledge Management (CIKM'94)
[Comm] Communications of the ACM. v.37 n.7, July1994.
[Dieb] Diebold, J. &lt;em>Man and the Computer; Technology as an Agent of Social Change.&lt;/em> F. A. Praeger, New York. (1969).
[EWMA] European Workshop on Modeling Autonomous Agents in a Multi-Agent World (7th : 1996 : Eindhoven, Netherlands)
[Fill] Fillmore, &amp;ldquo;&lt;em>The Case for Case&lt;/em>.&amp;rdquo; Universals in Linguistic Theory. (Bach, E. and Harms, R., eds.) Holt, Rinehart, and Winston, New York. (1968) pp. 1-90.
[Fried1] Friedman B., and Millett L. &lt;em>&amp;ldquo;It&amp;rsquo;s the computer&amp;rsquo;s fault&amp;rdquo; &amp;ndash; Reasoning about computers as moral agents&lt;/em>. Conference companion of the conference on Human Factors in Computing Systems, CHI &amp;lsquo;95. New York: Association for Computing Machinery. (May 1995) pp. 226- 227.
[Fried2] Friedman B, and Nissenbaum H. &lt;a href="https://link.zhihu.com/?target=http%3A//www.acm.org/pubs/citations/journals/tois/1996-14-3/p330-friedman/">Bias in computer systems &lt;/a>. ACM Trans. Inf. Syst. 14, 3 (Jul. 1996) pp. 330 - 347.
[Fried3] Friedman B, and Nissenbaum H &lt;a href="https://link.zhihu.com/?target=http%3A//www.acm.org/pubs/citations/proceedings/ai/267658/p466-friedman/">Software agents and user autonomy&lt;/a>. Autonomous agents. (1997) pp. 466 - 469.
[Maes] Maes, P. &lt;a href="https://link.zhihu.com/?target=http%3A//pattie.www.media.mit.edu/people/pattie/CACM-94/CACM-94.p1.html">Agents that Reduce Work and Information Overload.&lt;/a> Communications of the ACM. Vol. 37 No.7 (July 1994), pp. 31-40.
[Mins] Minsky, M, and D. Riecken. &lt;a href="https://link.zhihu.com/?target=http%3A//www.acm.org/pubs/citations/journals/cacm/1994-37-7/p22-minsky/">A Conversation with Marvin Minsky about Agents&lt;/a>. &lt;em>&lt;a href="https://link.zhihu.com/?target=http%3A//www.acm.org/cacm/">Communications of the ACM&lt;/a>&lt;/em> Vol. 37, No. 7 (July 1994) pp. 22-29.
[Negr] Nicholas Negroponte. &lt;em>Agents: From Direct Manipulation to Delegation&lt;/em>. Software Agents. (Jeffrey M. Bradshaw ed.), MIT Press 1997.
[Niss] Nissenbaum, H. &lt;a href="https://link.zhihu.com/?target=http%3A//www.acm.org/pubs/citations/journals/cacm/1994-37-1/p72-nissenbaum/">Computing and accountability&lt;/a>. Communications of the ACM. Vol. 37, No. 1 (Jan. 1994) pp. 72-80.
[RR] Rome, B. and Rome, S. &lt;em>Leviathan: A Simulation of Behavioral Systems, to Operate Dynamically on a Digital Computer&lt;/em>, System Development Corporation report no. SP-50, 6 (Nov. 1959), pp 15.
[RFC1095] &lt;em>&lt;a href="https://link.zhihu.com/?target=http%3A//info.internet.isi.edu/in-notes/rfc/files/rfc1095.txt">RFC1095&lt;/a>&lt;/em> &lt;em>&amp;ndash;&lt;/em> &lt;em>Common Management Information Services and Protocol over TCP/IP (CMOT).&lt;/em> U.S. Warrier, L. Besaw. Apr-01-1989. (Obsoleted by RFC1189)
[RFC1067] &lt;em>&lt;a href="https://link.zhihu.com/?target=http%3A//info.internet.isi.edu/in-notes/rfc/files/rfc1067.txt">RFC1067&lt;/a>&lt;/em> &lt;em>&amp;ndash;&lt;/em> &lt;em>Simple Network Management Protocol&lt;/em>. J.D. Case, M. Fedor, M.L. Schoffstall, J. Davin. Aug-01-1988. (Obsoleted by RFC1098)
[RFC1027] &lt;em>&lt;a href="https://link.zhihu.com/?target=http%3A//info.internet.isi.edu/in-notes/rfc/files/rfc1027.txt">RFC1027&lt;/a>&lt;/em> &lt;em>&amp;ndash;&lt;/em> Using ARP to implement transparent subnet gateways. S. Carl-Mitchell, J.S. Quarterman. Oct-01-1987.(Status: UNKNOWN)
[RFC1009] &lt;em>&lt;a href="https://link.zhihu.com/?target=http%3A//info.internet.isi.edu/in-notes/rfc/files/rfc1009.txt">RFC1009&lt;/a>&lt;/em> &lt;em>&amp;ndash; Requirements for Internet gateways&lt;/em>. R.T. Braden, J. Postel. Jun-01-1987. (Obsoletes RFC0985) (Obsoleted by RFC1812)
[RFC733] &lt;em>&lt;a href="https://link.zhihu.com/?target=http%3A//info.internet.isi.edu/in-notes/rfc/files/rfc733.txt">RFC733&lt;/a>&lt;/em> &lt;em>&amp;ndash; Standard for the format of ARPA network text messages&lt;/em>. D. Crocker, J. Vittal, K.T. Pogran, D.A. Henderson. Nov-21-1977. (Obsoletes RFC0724) (Obsoleted by RFC0822)
[RFC761] &lt;em>&lt;a href="https://link.zhihu.com/?target=http%3A//info.internet.isi.edu/in-notes/rfc/files/rfc761.txt">RFC761&lt;/a>&lt;/em> &lt;em>&amp;ndash; DoD standard Transmission Control Protocol&lt;/em>. J. Postel. Jan-01-1980.
[RFC95] &lt;a href="https://link.zhihu.com/?target=http%3A//info.internet.isi.edu/in-notes/rfc/files/rfc95.txt">RFC95&lt;/a> &amp;ndash; &lt;em>Distribution of NWG/RFC&amp;rsquo;s through the NIC&lt;/em>. S.D. Crocker. Feb-04-1971. (Obsoleted by RFC0155)
[Self] Selfridge, O. &amp;ldquo;Pandemonium: A Paradigm for Learning.&amp;rdquo; &lt;em>Mechanisation of Thought Processes&lt;/em>. London: H. M. Stationery Off., 1959, pp. 511-527.
[Shap] Shapiro, M. &lt;em>Structure and encapsulation in distributed systems: The proxy principle&lt;/em>. 6th International Conference on Distributed Computing Systems Proceedings (Cat. No. 86CH2293-9). (6th International Conference on Distributed Computing Systems Proceedings (Cat. No. 86CH2293-9), Cambridge, MA, USA, 19-23 May 1986). Washington, DC, USA: IEEE Comput. Soc. Press, 1986. pp. 198-204.
[Wood] &lt;a href="https://link.zhihu.com/?target=https%3A//cyber.harvard.edu/archived_content/people/reagle/amw%40cs.bham.ac.uk">Andy Wood&lt;/a>. &lt;a href="https://link.zhihu.com/?target=http%3A//www.cs.bham.ac.uk/~amw/agents/index.html">Agent Information and References&lt;/a>. Available at &lt;a href="https://link.zhihu.com/?target=http%3A//www.cs.bham.ac.uk/~amw/agents/index.html">http://www.cs.bham.ac.uk/~amw/agen&lt;/a>&lt;/p></description></item><item><title>Docs: Architecture(架构)</title><link>https://desistdaydream.github.io/docs/x_%E6%A0%87%E5%87%86%E5%8C%96/Architecture%E6%9E%B6%E6%9E%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/x_%E6%A0%87%E5%87%86%E5%8C%96/Architecture%E6%9E%B6%E6%9E%84/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Computer_architecture">Wiki，Computer Architecture&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="各行各业微服务技术架构图分享">各行各业微服务技术架构图分享&lt;/h1>
&lt;p>包含：智慧仓储#docker#部署图、通用微服务架构图、物联网终端微服务架构图、平台微服务技术架构、基于#SpringCloud#的微服务架构图、基于 SpringCloud 的微服务电商系统架构图、#k8s#云原生架构图、#云计算#总体架构和技术架构。&lt;/p>
&lt;p>微服务不是架构演变的终极目标。最近比较流行的方向还有 Serverless、FaaS 等方向。另一方面也有人再重新关注单体系统的开发，我们认为技术架构应该是服务业务的，根据不同的业务类型选择正确的技术栈是每个架构师应该具备的能力。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qqw80y/1617368744569-dcdb5790-f824-4e92-acf3-7418626145f1.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qqw80y/1617368744561-85ff1c5e-b8cb-47b5-a694-02c18c91f507.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qqw80y/1617368744564-b1293d93-92da-4485-9ca9-d506cc2852b3.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qqw80y/1617368744550-be650970-8462-4723-b1d9-f2295ba2c1b5.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qqw80y/1617368744560-7fe7fee6-28a5-40b5-9fbc-579dd72f33f5.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qqw80y/1617368744542-7f4f869a-a832-4747-b227-fa0b86cca182.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qqw80y/1617368744556-dc3f1543-3303-4d13-a5c0-45a295856e15.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qqw80y/1617368744546-db34bafc-8339-43e0-a6c1-f214c83b1f12.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qqw80y/1617368744551-e5e7434c-1b61-4aee-b687-7514633c2ca4.png" alt="">&lt;/p></description></item><item><title>Docs: B/S 和 C/S 架构</title><link>https://desistdaydream.github.io/docs/x_%E6%A0%87%E5%87%86%E5%8C%96/B_S-%E5%92%8C-C_S-%E6%9E%B6%E6%9E%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/x_%E6%A0%87%E5%87%86%E5%8C%96/B_S-%E5%92%8C-C_S-%E6%9E%B6%E6%9E%84/</guid><description>
&lt;h1 id="service-side-与-client-side">Service Side 与 Client Side&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Server-side">Wiki，Server Side&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Client-side">Wiki，Client Side&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Client/Server 结构(C/S 结构) 是大家熟知的 &lt;strong>Client Side(客户端) 与 Server Side(服务端)&lt;/strong> 结构。它是软件系统体系结构，通过它可以充分利用两端硬件环境的优势，将任务合理分配到 Client Side 和 Server Side 来实现，降低了系统的通讯开销。目前大多数应用软件系统都是 Client/Server 形式的两层结构，由于现在的软件应用系统正在向分布式的 Web 应用发展，Web 和 Client/Server 应用都可以进行同样的业务处理，应用不同的模块共享逻辑组件；因此，内部的和外部的用户都可以访问新的和现有的应用系统，通过现有应用系统中的逻辑可以扩展出新的应用系统。这也就是目前应用系统的发展方向。&lt;/p>
&lt;p>B/S 结构（Browser/Server，浏览器/服务器模式），是 WEB 兴起后的一种网络结构模式，WEB 浏览器是客户端最主要的应用软件。这种模式统一了客户端，将系统功能实现的核心部分集中到服务器上，简化了系统的开发、维护和使用。客户机上只要安装一个浏览器（Browser 英 [&amp;lsquo;braʊzə]美 [&amp;lsquo;braʊzɚ]），如 Netscape Navigator 或 Internet Explorer，服务器安装 SQL Server、Oracle、MYSQL 等数据库。浏览器通过 Web Server 同数据库进行数据交互。&lt;/p>
&lt;p>Apache 是普通服务器，本身只支持 html 即普通网页。不过可以通过插件支持 php,还可以与 Tomcat 连通(单向 Apache 连接 Tomcat,就是说通过 Apache 可以访问 Tomcat 资源。反之不然)。Apache 只支持静态网页，但像 php,cgi,jsp 等动态网页就需要 Tomcat 来处理。 Tomcat 是由 Apache 软件基金会下属的 Jakarta 项目开发的一个 Servlet 容器，按照 Sun Microsystems 提供的技术规范，实现了对 Servlet 和 JavaServer Page（JSP）的支持，并提供了作为 Web 服务器的一些特有功能，如 Tomcat 管理和控制平台、安全域管理和 Tomcat 阀等。由于 Tomcat 本身也内含了一个 HTTP 服务器，它也可以被视作一个单独的 Web 服务器。但是，不能将 Tomcat 和 Apache Web 服务器混淆，Apache Web Server 是一个用 C 语言实现的 HTTP web server；这两个 HTTP web server 不是捆绑在一起的。Apache Tomcat 包含了一个配置管理工具，也可以通过编辑 XML 格式的配置文件来进行配置。Apache，nginx，tomcat 并称为网页服务三剑客，可见其应用度之广泛。（说白了，tomcat 就是个底层设施软件服务，网页上所有的东西就要放在 tomcat 上，别人才能通过 tomcat 访问，tomcat 占用 80 端口）&lt;/p>
&lt;p>例子：当通过浏览器，访问一个网站的时候，这时候就是一个 B/S 的架构，因为网站肯定是运行在服务器上的，这个服务器的系统上又装了 tomcat 这个服务，并占用 80 端口，因此，人们通过浏览器访问网站，由于自动使用 80 端口，那么就直接访问到 comcat 服务，然后由 comcat 来调取网站的页面资源给客户展示出来。&lt;/p>
&lt;p>至于 C/S 就相当于通过 PC 端的一个软件，通过 URL 网址访问到服务器上的应用程序。&lt;/p></description></item><item><title>Docs: 南北流量和东西流量</title><link>https://desistdaydream.github.io/docs/x_%E6%A0%87%E5%87%86%E5%8C%96/%E5%8D%97%E5%8C%97%E6%B5%81%E9%87%8F%E5%92%8C%E4%B8%9C%E8%A5%BF%E6%B5%81%E9%87%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/x_%E6%A0%87%E5%87%86%E5%8C%96/%E5%8D%97%E5%8C%97%E6%B5%81%E9%87%8F%E5%92%8C%E4%B8%9C%E8%A5%BF%E6%B5%81%E9%87%8F/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;p>在 Service Mesh 微服务架构中，我们常常会听到东西流量和南北流量两个术语。&lt;/p>
&lt;p>南北流量（NORTH-SOUTH traffic）和东西流量（EAST-WEST traffic）是数据中心环境中的网络流量模式。下面我们通过一个例子来理解这两个术语。&lt;/p>
&lt;p>假设我们尝试通过浏览器访问某些 Web 应用。Web 应用部署在位于某个数据中心的应用服务器中。在多层体系结构中，典型的数据中心不仅包含应用服务器，还包含其他服务器，如负载均衡器、数据库等，以及路由器和交换机等网络组件。假设应用服务器是负载均衡器的前端。&lt;/p>
&lt;p>当我们访问 web 应用时，会发生以下类型的网络流量：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>客户端（位于数据中心一侧的浏览器）与负载均衡器（位于数据中心）之间的网络流量&lt;/p>
&lt;/li>
&lt;li>
&lt;p>负载均衡器、应用服务器、数据库等之间的网络流量，它们都位于数据中心。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>南北流量&lt;/p>
&lt;p>在这个例子中，前者即即客户端和服务器之间的流量被称为南北流量。简而言之，南北流量是 server-client 流量。&lt;/p>
&lt;p>东西流量&lt;/p>
&lt;p>第二种流量即不同服务器之间的流量与数据中心或不同数据中心之间的网络流被称为东西流量。简而言之，东西流量是 server-server 流量。&lt;/p>
&lt;p>当下，东西流量远超南北流量，尤其是在当今的大数据生态系统中，比如 Hadoop 生态系统（大量 server 驻留在数据中心中，用 map reduce 处理），server-server 流量远大于 server-client 流量。&lt;/p>
&lt;p>大家可能会好奇，东西南北，为什么这么命名。&lt;/p>
&lt;p>该命名来自于绘制典型 network diagrams 的习惯。在图表中，通常核心网络组件绘制在顶部（NORTH），客户端绘制在底部（SOUTH），而数据中心内的不同服务器水平（EAST-WEST）绘制。&lt;/p></description></item></channel></rss>