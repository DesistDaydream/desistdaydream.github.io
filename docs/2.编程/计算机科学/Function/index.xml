<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦的站点 – Function(函数)</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/Function/</link><description>Recent content in Function(函数) on 断念梦的站点</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/Function/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Function</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/Function/Function/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/Function/Function/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Subroutine">Wiki, Subroutine(子程序)&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Function_(computer_science)">Wiki, Function&lt;/a> 概念被合并到 Subroutine 中&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Parameter_(computer_programming)">Wiki, Parameter(参数)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Evaluation_strategy">Wiki, Evaluation strategy(评估策略)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/33__rGbvEHUB7nXWPSvz8Q">公众号，码农的荒岛求生-函数调用时底层发生了什么？&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>在计算机编程中，比 &lt;strong>Function(函数)&lt;/strong> 更官方（更早期）的称呼应该是 &lt;strong>Subroutine(子程序)&lt;/strong> 是执行特定任务的程序指令序列，打包为一个单元。然后，该单元可用于应执行特定任务的程序中。&lt;/p>
&lt;p>子程序可以在程序中定义，也可以在可以被许多程序使用的库中单独定义。在不同的编程语言中，子例程可以称为 &lt;strong>Routine(例程)&lt;/strong>、&lt;strong>Subprogram(子程序)&lt;/strong>、&lt;strong>Function(函数)&lt;/strong>、&lt;strong>Method(方法)&lt;/strong> 或 &lt;strong>Procedure(过程)&lt;/strong>。从技术上讲，这些术语都有不同的定义。有时会使用通用的总称 &lt;strong>Callable Unit(可调用单元)&lt;/strong>。&lt;/p>
&lt;h1 id="function-call函数调用">Function call(函数调用)&lt;a class="td-heading-self-link" href="#function-call%e5%87%bd%e6%95%b0%e8%b0%83%e7%94%a8" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="parameter参数">Parameter(参数)&lt;a class="td-heading-self-link" href="#parameter%e5%8f%82%e6%95%b0" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>在计算机编程中，&lt;strong>Parameter(参数)&lt;/strong> 是函数中使用的一种&lt;strong>特殊变量&lt;/strong>，用于在引用函数时，提供给函数的输入数据。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>actual parameter(实际参数，简称 实参)&lt;/strong> # 一般用 arguments 表示，在调用函数时使用实参&lt;/li>
&lt;li>&lt;strong>formal parameter(形式参数，简称 形参)&lt;/strong> # 一般用 parameter 表示，在定义函数时使用形参&lt;/li>
&lt;/ul>
&lt;p>如何将 Arguments 的值传递给子程序的 Parameters 是由编程语言的 &lt;strong>Evaluation strategy(评估策略)&lt;/strong> 决定的。每次调用子程序时，都会评估本次调用的 Arguments，并将评估结果分配给相应的 Parameters。这种分配机制，称为 &lt;strong>Argument passing(参数传递)&lt;/strong>。&lt;/p>
&lt;p>例如：现在定义一个名为 &lt;code>add&lt;/code> 的子程序：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">def&lt;/span> &lt;span style="color:#000">add&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">x&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">y&lt;/span>&lt;span style="color:#000;font-weight:bold">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">x&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#000">y&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里的 x 和 y 是 &lt;strong>形式参数&lt;/strong>&lt;/p>
&lt;p>如果要引用这个子程序：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">add&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里的 2 和 3 是&lt;strong>实际参数&lt;/strong>。&lt;/p>
&lt;p>所以，就跟参数的名字一样，形式参数就是形式上的，没有一个具体的数据，而实际参数之所以称为实际，就是因为这些参数有具体的数据。&lt;/p>
&lt;blockquote>
&lt;p>注意：根据评估策略的不同，所谓的实际参数和形式参数也是相对来说的，比如在很多时候，我们传递的实际参数还可以是 另一个 Function、Pointer(指针) 等等类型的数据。&lt;/p>
&lt;/blockquote>
&lt;h2 id="evaluation-strategy评估策略">Evaluation strategy(评估策略)&lt;a class="td-heading-self-link" href="#evaluation-strategy%e8%af%84%e4%bc%b0%e7%ad%96%e7%95%a5" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Convention&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Common use&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Call by value(值调用)值传递&lt;/td>
&lt;td>将参数的值的副本传递给子程序。(子程序内修改它们不会影响原始参数)&lt;/td>
&lt;td>Default in most Algol-like languages after &lt;a href="https://en.wikipedia.org/wiki/Algol_60">Algol 60&lt;/a>, such as Pascal, Delphi, Simula, CPL, PL/M, Modula, Oberon, Ada, and many others. C, C++, Java (References to objects and arrays are also passed by value)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Call by reference(引用调用)引用传递&lt;/td>
&lt;td>将参数的引用地址传递给子程序(子程序内修改它们会影响原始参数)&lt;/td>
&lt;td>Selectable in most Algol-like languages after &lt;a href="https://en.wikipedia.org/wiki/Algol_60">Algol 60&lt;/a>, such as Algol 68, Pascal, Delphi, Simula, CPL, PL/M, Modula, Oberon, Ada, and many others. C++, Fortran, &lt;a href="https://en.wikipedia.org/wiki/PL/I">PL/I&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Call by result&lt;/td>
&lt;td>Parameter value is copied back to argument on return from the subroutine&lt;/td>
&lt;td>Ada OUT parameters&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Call by value-result&lt;/td>
&lt;td>Parameter value is copied back on entry to the subroutine and again on return&lt;/td>
&lt;td>Algol, &lt;a href="https://en.wikipedia.org/wiki/Swift_(programming_language)">Swift&lt;/a>in-out parameters&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Call by name&lt;/td>
&lt;td>Like a macro – replace the parameters with the unevaluated argument expressions&lt;/td>
&lt;td>Algol, &lt;a href="https://en.wikipedia.org/wiki/Scala_(programming_language)">Scala&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Call by constant value&lt;/td>
&lt;td>Like call by value except that the parameter is treated as a constant&lt;/td>
&lt;td>PL/I NONASSIGNABLE parameters, Ada IN parameters&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="call-by-reference通过引用调用-与-call-by-value通过值调用">Call by Reference(通过引用调用) 与 Call by Value(通过值调用)&lt;a class="td-heading-self-link" href="#call-by-reference%e9%80%9a%e8%bf%87%e5%bc%95%e7%94%a8%e8%b0%83%e7%94%a8-%e4%b8%8e-call-by-value%e9%80%9a%e8%bf%87%e5%80%bc%e8%b0%83%e7%94%a8" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>通过值调用(Call by value) 意味着，在函数体内修改参数值，不会影响到函数外部。&lt;/li>
&lt;li>通过引用调用(Call by reference) 意味着，传入函数的原始值的地址，因此在函数内部修改参数，将会影响到原始值。&lt;/li>
&lt;/ul>
&lt;h1 id="函数调用时底层逻辑">函数调用时底层逻辑&lt;a class="td-heading-self-link" href="#%e5%87%bd%e6%95%b0%e8%b0%83%e7%94%a8%e6%97%b6%e5%ba%95%e5%b1%82%e9%80%bb%e8%be%91" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>有读者问题函数调用是如何实现的，今天就来聊聊这个比较简单的问题。&lt;/p>
&lt;p>大家都应该打包过东西吧，搬家之类的，通常都是找几个箱子一股脑装进去，为了不让箱子占地方，你通常会把它们摞好，就像这样：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qu324i/1648437687225-6414f1c8-2f44-4c24-978d-8a4cc6a65ba5.jpeg" alt="">&lt;/p>
&lt;p>注意看上面的箱子，最先被打包好的箱子被摞在最下方，刚打包好的箱子总是放在最上方，这就形成了一种 first in last out 的结构，也就是我们所说的栈，stack，上面的这些箱子就形成了栈。&lt;/p>
&lt;p>如果你懂得用箱子打包东西，你就能明白函数调用是怎么一回事。&lt;/p>
&lt;p>原来，在程序运行时每个被调用的函数都有自己的一个箱子，假设这段代码是这样写的：&lt;/p>
&lt;p>void D() {}
void C() {
  D();
}
void B() {
    C();
}
void A() {
  B();
}&lt;/p>
&lt;p>函数 A 调用函数 B、B 调用 C、C 调用 D，那么当函数 D 在运行时内存中就会有四个箱子，每个函数一个：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qu324i/1648437687180-74941560-51a7-421b-8cc8-793c48703b11.png" alt="">&lt;/p>
&lt;p>每个函数占据的这个箱子——也就是这块内存，就被称为栈帧，stack frame，只不过由于引力的作用，我们摞箱子时是从下往上增长，而出于内存布局的需要，函数调用时的栈是从高地址向低地址增长。&lt;/p>
&lt;p>这些箱子中都装有什么呢？你在函数中定义的局部变量就装在这里，关于栈帧内容更详细的讲解你可以参考这里《&lt;a href="http://mp.weixin.qq.com/s?__biz=Mzg4OTYzODM4Mw==&amp;amp;mid=2247485714&amp;amp;idx=1&amp;amp;sn=1a315fe4da87fde2758fc9dd5366ba01&amp;amp;chksm=cfe99592f89e1c84b87ebfbfbbbd9868ddf3e945666168122f57aa793e87787528b513e46e5d&amp;amp;scene=21#wechat_redirect">函数调用是在内存中是什么样子&lt;/a>》，这些不是本文的重点，这里更关心的是这些栈帧是怎样增长以及减少的。&lt;/p>
&lt;p>仔细观察上面这张图，每个箱子最重要的信息有两个，&lt;strong>你至少需要知道箱子的底部以及箱子的顶部在哪里&lt;/strong>！&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qu324i/1648437687271-bdc684c3-a08f-4654-be59-0bd20b8a9630.png" alt="">&lt;/p>
&lt;p>在计算机中，每个函数栈帧的“底部”和“顶部”的信息——也就是内存地址，分别存放在两个寄存器中：BasePointer(BP)寄存器以及 StackPointer(SP)寄存器，即我们熟悉的 rbp 以及 rsp，32 位下为 ebp 以及 esp，注意本文以 x86_64 为例。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qu324i/1648437687166-7105bbca-8df4-4044-894f-11e5b13fa005.png" alt="">&lt;/p>
&lt;p>只要确定了 rbp 和 rsp 你就能得到一块栈区，在这块栈区上就可以进行函数调用：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qu324i/1648437687303-279472cc-ed4a-4525-b4f5-6994ef566265.png" alt="">&lt;/p>
&lt;p>读到这里肯定有的同学可能会问，CPU 中的寄存器不是有限的吗？从这里的讲解看每个栈帧都需要维护一个“栈顶”与“栈底”的信息，每个核心中的 rbp 以及 rsp 寄存器就一个，我们该怎样确保函数运行时相应栈帧使用的 rbp 以及 rsp 是正确的呢？&lt;/p>
&lt;p>方法非常简单，调用函数时会创建新的栈帧，此时需要将原有 rbp 寄存器中的值保存在新的栈帧上，就像这样：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qu324i/1648437687582-ed1046b1-c111-4c30-bf2e-310c2bc3c6ac.png" alt="">&lt;/p>
&lt;p>上图就是函数调用时第一件要完成的事情，把 rbp 的值 push 到栈上，rsp 下移，然后呢？然后也很简单，只需要把 rsp 指向的地址也赋值给 rbp 即可，这样就开启了一个新的栈帧：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qu324i/1648437687685-0e112e19-781f-48d1-8afb-fe172ce5f2a8.png" alt="">&lt;/p>
&lt;p>完成上述操作的有两条机器指令(gcc 编译器)：&lt;/p>
&lt;p>push   %rbp
mov    %rsp,%rbp&lt;/p>
&lt;p>如果你去看编译器为每个函数生成的机器指令，那么开头几乎都是这两条指令，现在你应该明白这两条指令的作用了吧。&lt;/p>
&lt;p>这两条指令就把上一个栈帧的 rbp 的保存到了新的栈帧，由于此时 rsp 已经指向了新的栈帧栈顶，由于此时栈为空，因此栈顶和栈底的地址是一样的，可以直接把 rsp 赋给 rbp，这样一个全新的栈帧就创建出来了。&lt;/p>
&lt;p>如果我们在被调函数内部创建一些局部变量：&lt;/p>
&lt;p>void funcB() {
    int a = 1;
    int b = 2;
    int c = 3;
    &amp;hellip;
}&lt;/p>
&lt;p>那么此时栈会进一步扩大，并把局部变量存放在该函数的栈帧中：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qu324i/1648437687701-456ca282-1ecb-420c-b487-4702fbb25770.png" alt="">&lt;/p>
&lt;p>现在我们的栈可以随着函数调用而增长，可以看到，栈帧和你搬家时用的纸箱子还是不太一样的，函数栈帧不会一开始就大小固定好，而是随着指令的执行动态增加，也就是如果你往栈上 push 一些数据，栈帧就会相应的增大一点。&lt;/p>
&lt;p>那么函数调用完成时该怎么办呢？这也非常简单，只需要一条机器指令：&lt;/p>
&lt;p>leave&lt;/p>
&lt;p>我们在上一篇《&lt;a href="http://mp.weixin.qq.com/s?__biz=Mzg4OTYzODM4Mw==&amp;amp;mid=2247486951&amp;amp;idx=1&amp;amp;sn=9ed9294b2248b3287e60d38ac0b7fca4&amp;amp;chksm=cfe99167f89e1871915861369c3f39bf1850754e974da1f9f7367fdb37c64d22fc3425a65c9e&amp;amp;scene=21#wechat_redirect">栈区分配内存快还是堆区分配内存快&lt;/a>》中讲解了一部分，leave 指令的作用是将栈基址赋值给 rsp，这样栈指针指向上一个栈帧的栈顶，然后 pop 出 rbp，这样 rbp 就指向上一个栈帧的栈底：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qu324i/1648437687723-01062541-9dd2-493f-aaaa-3fe4811c3212.png" alt="">&lt;/p>
&lt;p>看到了吧，执行完 leave 指令后 rbp 以及 rsp 就指向了上一个栈帧，这就相当于栈帧的弹出，这样 stack 1 占用的内存就无效了，没有任何用处了，显然这就是我们常说的内存回收，因此简单的一条 leave 指令即可把栈区中的内存回收掉。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qu324i/1648437687846-701d7bbb-5cb3-429c-a9b2-72441062dea5.png" alt="">&lt;/p>
&lt;p>而在 x86 平台，leave 指令后往往跟上一条 ret 指令：&lt;/p>
&lt;p>leave
ret&lt;/p>
&lt;p>我们已经了解了 leave 指令的作用，这条指令让 rbp 以及 rsp 指向上一个栈帧，然后呢？显然 CPU 应该从 funcA 调用函数 funcB 之后的一行代码处继续运行，那么这行代码的地址在哪里呢？显然就在 funcA 栈帧的栈顶：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qu324i/1648437688059-b40c97fe-0a35-4cee-8590-f072fad8be69.png" alt="">&lt;/p>
&lt;p>当 CPU 执行 call 指令时会把该函数的返回地址 push 到栈中，而 ret 指令的作用正是将栈顶弹出(pop)到 rip 寄存器，rip 寄存器告诉 CPU 接下来该从哪里执行机器指令，这个返回地址是 funcA 调用 funcB 时 push 到栈上的，这样当从函数 funcB()返回后我们就知道该从哪里继续执行机器指令了，这就是 ret 指令的作用，当然这里也是函数调用实现的基本原理。&lt;/p>
&lt;p>关于栈帧更详细的讲解可以参考我写的这篇《&lt;a href="http://mp.weixin.qq.com/s?__biz=Mzg4OTYzODM4Mw==&amp;amp;mid=2247485714&amp;amp;idx=1&amp;amp;sn=1a315fe4da87fde2758fc9dd5366ba01&amp;amp;chksm=cfe99592f89e1c84b87ebfbfbbbd9868ddf3e945666168122f57aa793e87787528b513e46e5d&amp;amp;scene=21#wechat_redirect">函数调用在内存中是什么样子&lt;/a>》。&lt;/p></description></item><item><title>Docs: Callback</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/Function/Callback/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/Function/Callback/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Callback_(computer_programming)">Wiki, Callback_(computer_programming)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.cnblogs.com/ArsenalfanInECNU/p/14650501.html">博客园，究竟什么是callback function(回调函数)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/zS7URRO5sNzobUNIqSJHIg">公众号-码农的荒岛求生，回调函数 callback 的实现原理是什么？&lt;/a>
&lt;ul>
&lt;li>原文非简化版：《&lt;a href="http://mp.weixin.qq.com/s?__biz=Mzg4OTYzODM4Mw==&amp;amp;mid=2247485712&amp;amp;idx=1&amp;amp;sn=3d2750dfb693f41b2483b51b60a4f44c&amp;amp;chksm=cfe99590f89e1c860277fe1b22c3731ec4e3b61dbb5cd2a6d9548efbc709104a38d6da812517&amp;amp;scene=21#wechat_redirect">10 张图让你彻底理解回调函数&lt;/a>》&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Callback function(回调函数)&lt;/strong> 也是函数，只不过函数的参数不是变量，而是另一个函数。这种调用函数的方式有多种好处&lt;/p>
&lt;ul>
&lt;li>异步调用。调用 A 时，只要传递的参数中的函数没有阻塞逻辑，那就不用等待 A 函数全部执行完成，即可继续处理后续代码。&lt;/li>
&lt;li>不同实体调用函数 A 时，想要执行一些不同的特定的代码，不用在函数 A 里加很多 if else 的判断&lt;/li>
&lt;li>等等&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>其实回调函数和普通函数没有本质的区别。&lt;/strong>&lt;/p>
&lt;p>首先让我们来看看普通的函数调用，假设我们在 A 函数中调用函数 func：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">void&lt;/span> &lt;span style="color:#000">A&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">func&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>想一想，你怎么知道可以调用 func 呢？哦，原来 func 是你自己定义的：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">void&lt;/span> &lt;span style="color:#204a87;font-weight:bold">func&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">blablabla&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这很简单吧，现在假设你编写的这段代码无比之牛逼，全世界的程序员都无比疯狂的想引入到自己的项目中，这时你会把 A 函数编写成一个库供全世界的码农使用。&lt;/p>
&lt;p>但此时所有人都发现一个问题，&lt;strong>那就是他们都想在 A 函数中的某个特定点上执行一段自己的代码&lt;/strong>，作为这个库的创作者你可能会这样实现：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">A&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#a40000">张三&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">funcA&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#204a87;font-weight:bold">else&lt;/span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#a40000">李四&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">funcB&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>假设全世界有一千万码农，那你是不是要有&lt;strong>一千万个 if else&lt;/strong>。。。想想这样的代码就很刺激有没有！&lt;/p>
&lt;p>更好的办法是什么呢？&lt;strong>把函数也当做变量&lt;/strong>！你可以这样定义 A 函数：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">A&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">func&lt;/span> &lt;span style="color:#000">f&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">f&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>任何一个码农在调用你的 A 函数时传入一个函数变量，A 函数在合适的时机调用你传入的函数变量，&lt;strong>从而节省了一千万行代码&lt;/strong>。&lt;/p>
&lt;p>&lt;strong>为了让这个过程更加难懂一些，这个函数变量起了一个无比难懂的称呼：回调函数。&lt;/strong>&lt;/p>
&lt;p>现在你应该明白了回调函数是怎么一回事了吧，相比回调函数来说我更愿意将其看做&lt;strong>函数变量&lt;/strong>。&lt;/p>
&lt;p>以上就是回调函数的基本原理，有想看更详细版本的请参考&lt;a href="http://mp.weixin.qq.com/s?__biz=Mzg4OTYzODM4Mw==&amp;amp;mid=2247485712&amp;amp;idx=1&amp;amp;sn=3d2750dfb693f41b2483b51b60a4f44c&amp;amp;chksm=cfe99590f89e1c860277fe1b22c3731ec4e3b61dbb5cd2a6d9548efbc709104a38d6da812517&amp;amp;scene=21#wechat_redirect">这里&lt;/a>。&lt;/p>
&lt;p>以上仅仅是回调函数的一种用途，回调函数在基于事件驱动编程以及异步编程时更是必备的，关于事件驱动编程你可以参考&lt;a href="http://mp.weixin.qq.com/s?__biz=Mzg4OTYzODM4Mw==&amp;amp;mid=2247485713&amp;amp;idx=1&amp;amp;sn=369203957fb922371535df891920dbc1&amp;amp;chksm=cfe99591f89e1c87c68a4e931492d86c1d31e9d83a9b500893106c1d0d5959a56d59f11de7d2&amp;amp;scene=21#wechat_redirect">这里&lt;/a>，GUI 编程的同学对此肯定很熟悉。&lt;/p></description></item></channel></rss>