<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Function(函数) on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/Function/</link><description>Recent content in Function(函数) on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/Function/index.xml" rel="self" type="application/rss+xml"/><item><title>Function</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/Function/Function/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/Function/Function/</guid><description>概述 参考：
Wiki, Subroutine(子程序) Wiki, Function 概念被合并到 Subroutine 中 Wiki, Parameter(参数) Wiki, Evaluation strategy(评估策略) 公众号，码农的荒岛求生-函数调用时底层发生了什么？ 在计算机编程中，比 Function(函数) 更官方（更早期）的称呼应该是 Subroutine(子程序) 是执行特定任务的程序指令序列，打包为一个单元。然后，该单元可用于应执行特定任务的程序中。
子程序可以在程序中定义，也可以在可以被许多程序使用的库中单独定义。在不同的编程语言中，子例程可以称为 Routine(例程)、Subprogram(子程序)、Function(函数)、Method(方法) 或 Procedure(过程)。从技术上讲，这些术语都有不同的定义。有时会使用通用的总称 Callable Unit(可调用单元)。
Function call(函数调用) Parameter(参数) 在计算机编程中，Parameter(参数) 是函数中使用的一种特殊变量，用于在引用函数时，提供给函数的输入数据。
actual parameter(实际参数，简称 实参) # 一般用 arguments 表示，在调用函数时使用实参 formal parameter(形式参数，简称 形参) # 一般用 parameter 表示，在定义函数时使用形参 如何将 Arguments 的值传递给子程序的 Parameters 是由编程语言的 Evaluation strategy(评估策略) 决定的。每次调用子程序时，都会评估本次调用的 Arguments，并将评估结果分配给相应的 Parameters。这种分配机制，称为 Argument passing(参数传递)。
例如：现在定义一个名为 add 的子程序：
def add(x, y){ return x + y } 这里的 x 和 y 是 形式参数</description></item><item><title>Callback</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/Function/Callback/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/Function/Callback/</guid><description>概述 参考：
Wiki, Callback_(computer_programming) 博客园，究竟什么是callback function(回调函数) 公众号-码农的荒岛求生，回调函数 callback 的实现原理是什么？ 原文非简化版：《10 张图让你彻底理解回调函数》 Callback function(回调函数) 也是函数，只不过函数的参数不是变量，而是另一个函数。这种调用函数的方式有多种好处
异步调用。调用 A 时，只要传递的参数中的函数没有阻塞逻辑，那就不用等待 A 函数全部执行完成，即可继续处理后续代码。 不同实体调用函数 A 时，想要执行一些不同的特定的代码，不用在函数 A 里加很多 if else 的判断 等等 其实回调函数和普通函数没有本质的区别。
首先让我们来看看普通的函数调用，假设我们在 A 函数中调用函数 func：
void A() { ... func(); ... } 想一想，你怎么知道可以调用 func 呢？哦，原来 func 是你自己定义的：
void func() { blablabla; } 这很简单吧，现在假设你编写的这段代码无比之牛逼，全世界的程序员都无比疯狂的想引入到自己的项目中，这时你会把 A 函数编写成一个库供全世界的码农使用。
但此时所有人都发现一个问题，那就是他们都想在 A 函数中的某个特定点上执行一段自己的代码，作为这个库的创作者你可能会这样实现：
void A() { ... if (张三) { funcA(); } else if (李四) { funcB(); } .</description></item></channel></rss>