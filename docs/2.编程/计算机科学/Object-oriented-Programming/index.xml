<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>面向对象编程 on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/Object-oriented-Programming/</link><description>Recent content in 面向对象编程 on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/Object-oriented-Programming/index.xml" rel="self" type="application/rss+xml"/><item><title>OOP</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/Object-oriented-Programming/OOP/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/Object-oriented-Programming/OOP/</guid><description>概述 参考
公众号，码农的荒岛求生-为什么抽象在计算机科学中如此重要 喜马拉雅,10-万物介对象，编程的关键就是找对象(对建模的理解) 喜马拉雅,13-从程序员到产品经理，产品经理是干什么的？(对建模的理解) Wiki, Object-oriented programming(面向对象编程) Wiki, Object(对象) Wiki, Instance 与 Instantiate(实例 and 实例化) Object-oriented Programming(面向对象编程，简称 OOP)
抽象 与 建模 计算科学中的所有问题都可以通过增加一层抽象来解决。
All problems in computer science can be solved by another level of indirection.
没有抽象的世界
想象这样一种场景，如果我们的语言中没有代词这种形式，那么我们想表达“张三是个好人“该怎么说呢？可能是这样的：
”你还记得我说过的人吧，穿着邋邋遢遢的，公司在中关村，整天背着个双肩包，写代码的，天天 996，这个人是个好人“，看到了吧，在没有代词的情况下我们想表达一件事是非常困难的，因为我们需要具体的描述清楚所有细节，但是有了”张三“这种抽象后，一切都简单了，我们只需要针对张三这种抽象进行交流，再也不需要针对一堆细节进行交流了，抽象大大增强了表现力，这就是抽象的力量。
接下来回到计算机世界。
计算机使用层面
我们在使用计算机时其实抽象就在发挥作用，在 Word 中编辑文档时我们不会去考虑 CPU 是如何处理这些字符的，这些字符是如何被保存到磁盘的。在浏览网页时我们不需要关心网页中的数据是如何在网络中传输的、浏览器是怎样把这些数据适当的渲染出来的，我们需要做的仅仅就是在 Word 中简单的输入字符，用鼠标或者手指滑动网页。
因此只要在使用计算机，那么抽象就在发挥作用，只不过是我们没有意识到而已，而之所以我们没有意识到是因为抽象工作的太好了。
编程语言层面
程序员也可以从抽象中获得极大好处，因为软件是复杂的，但程序员可以通过抽象来控制复杂度，方法就是抽象。
比如一个好的设计就是对某项功能抽象出一组简单的 API，这样其它程序员在使用这个模块时只需要关注这几个简单的 API 而不是一堆内部实现细节。
不同的编程语言提供了不同的机制来让程序员实现这种抽象。
比如面向对象语言(OOP)的一大优势就是让程序员方便进行抽象，这样类的使用者就无需关心类的实现了，更不用提 OOP 中的多态、抽象类等，有了这些程序员可以只针对抽象而不是具体实现进行编程，这样的程序会有更好的可扩展性，也能更好的应对需求的变化。
系统设计层面
计算机从本质上将就是在抽象的基础上建立起来的。计算机科学中的一大主题其实就是在不同层面提供抽象表示从而对外屏蔽实现细节。
对于 CPU 来说，其对外提供的是一堆指令集，程序员只需要使用这些指令就可以指挥 CPU 工作了，这样就无需从细节上知道 CPU 是如何取出指令、执行指令的。
在操作系统层面，我们将 I/O 设备抽象成了文件、把程序的运行抽象成了进程、把程序运行时占用的内存抽象成了虚拟内存、又把进程和进程运行以来的环境抽象成了容器、最后把所有的一切包括操作系统、进程、CPU、内存、磁盘、网络抽象成了虚拟机。现在虚拟机技术是云计算的基石，实际上这种技术在上世纪 60 年代就出现了，并在当前火热的云计算中大放异彩。</description></item></channel></rss>