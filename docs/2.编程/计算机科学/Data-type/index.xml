<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Data type on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/Data-type/</link><description>Recent content in Data type on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/Data-type/index.xml" rel="self" type="application/rss+xml"/><item><title>Data type</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/Data-type/Data-type/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/Data-type/Data-type/</guid><description>概述 参考：
Wiki, DataType 在计算机科学和计算机编程中，Data Type(数据类型，有时也简称 Type) 是数据的一个属性，这些属性将会让编译器知道程序员想要如何使用数据。
Literal(字面量) 与 Variable(变量) 相关，是用于初始化变量时指定的一个值。
数据类型的分类 原始数据类型 复合数据类型 抽象数据类型 其他类型 TODO Primitive Data Types(原始数据类型) 原始数据类型通常是语言实现的内置或基础类型。
Machine Data Type(机器数据类型) 基于数字电子的计算机中的所有数据都表示为最低级别的 bit(位)（替代 0 和 1）。数据的最小可寻址单元通常是一组称为Byte(字节)的位（通常是一个八位组，即 8 bit）。由机器代码指令处理的单元称为字（截至 2011 年，通常为 32 或 64 位）。大多数指令将字解释为二进制数，因此 32 位字可以表示从 0 到 232 - 1 或有符号整数值来自 -231 到 231 - 1 由于二进制补码，机器语言和机器在大多数情况下不需要区分这些无符号和有符号数据类型。
用于浮点算术的浮点数对字中的位使用不同的解释。有关详细信息，请参阅浮点运算。
机器数据类型需要在系统或低级编程语言中公开或可用，允许对硬件进行细粒度控制的C 编程语言，例如，建筑材料整数类型不同的宽度，如和。如果目标平台上不存在相应的本机类型，编译器将使用确实存在的类型将它们分解为代码。例如，如果在 16 位平台上请求一个 32 位整数，编译器会默认将其视为两个 16 位整数的数组。 shortlong
在更高级别的编程中，机器数据类型通常被隐藏或_抽象_为一个实现细节，如果暴露，会使代码的可移植性降低。例如，numeric 可以提供泛型类型而不是某些特定位宽的整数。
Boolean Type(布尔类型) Boolean(布尔) 类型表示值 true(真) 和 false(假)。尽管只有两个值是可能的，但出于效率原因，它们很少被实现为单个二进制数字。许多编程语言没有明确的布尔类型，而是将 0 解释为 false，将其他值解释为 true。布尔数据是指如何将语言解释为机器语言的逻辑结构。在这种情况下，布尔值 0 指的是逻辑 False。True 总是非零，尤其是被称为布尔值 1 的一。</description></item><item><title>进制表示法</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/Data-type/%E8%BF%9B%E5%88%B6%E8%A1%A8%E7%A4%BA%E6%B3%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/Data-type/%E8%BF%9B%E5%88%B6%E8%A1%A8%E7%A4%BA%E6%B3%95/</guid><description>概述 参考：
Bytes 以 十进制、十六进制、etc. 表示
e.g. WireShark 可以看到传输的 Bytes 的十六进制表示法，及这些 Bytes 对应的 ASCII、etc.
为什么十六进制数字以 0x 开头？ https://qastack.cn/programming/2670639/why-are-hexadecimal-numbers-prefixed-with-0x
为什么十六进制数字以前缀0x？我了解前缀的用法，但不了解0x选择为什么的意义。
现在，我意识到标题和文本提出了两个完全不同的问题。大多数答复都集中在标题中的问题上。文本中问题的答案很简单：“它没有任何意义，它只是一个前缀，告诉编译器整数以十六进制表示”。— Andreas Rejbrand
为了学究，可能还会以两种不同的方式解释标题中的问题：1）“为什么十六进制数字以 0x 为前缀，而不是其他任何前缀或指示符？” 2）“为什么在输入十六进制数字时需要使用前缀？即使没有前缀，编译器肯定会识别 58A 为十六进制数字吗？” 对问题的第二种解释的答案很简单。“ 123”也是十六进制数。— Andreas Rejbrand
Answers 简单地说：在0告诉它在处理一个恒定的（而不是一个标识符/保留字）的解析器。仍然需要指定数字基数：x是任意选择。
长话短说：在 60 年代，流行的编程数字系统是十进制和_八进制_ -大型机每字节有 12、24 或 36 位，可以很好地将其除以 3 = log2（8）。
BCPL 语言将语法8 1234用于八进制数字。当 Ken Thompson 从 BCPL 创建 B 时，他改用了0前缀。这很好，因为
现在，整数常量始终由单个标记组成， 解析器仍然可以立即告诉它有一个常数， 解析器可以立即告诉基准（0两个基准都相同）， 从数学上讲是理智的（00005 == 05）， 不需要珍贵的特殊字符（如中的#123）。 从 B 创建 C 时，就需要使用十六进制数字（PDP-11 具有 16 位字），并且以上所有点仍然有效。由于其他机器仍需要八进制数，0x因此可以任意选择八进制数（00可能被排除在尴尬之外）。</description></item></channel></rss>