<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Data type on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/Data-type/</link><description>Recent content in Data type on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/Data-type/index.xml" rel="self" type="application/rss+xml"/><item><title>Literal</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/Data-type/Literal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/Data-type/Literal/</guid><description>概述 参考：
Wiki, Literal(字面量) 在计算机科学中，Literal(字面量) 是表示源代码中固定值的 snotation(表示法)。几乎所有计算机编程语言都具有对基本值的字面量表示，诸如：整数、浮点数以及字符串；而有很多也对布尔类型和字符类型的值也支持字面量表示；还有一些甚至对枚举类型的元素以及像数组、记录和对象等复合类型的值也支持字面量表示法。
// b 为常量，10为字面量,数据类型为整数 const int b = 10 // str 为变量，hello world！为字面量，数据类型为字符串 string str = &amp;#34;hello world！&amp;#34;</description></item><item><title>Data type</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/Data-type/Data-type/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/Data-type/Data-type/</guid><description>概述 参考：
Wiki, DataType 在计算机科学和计算机编程中，Data Type(数据类型，有时也简称 Type) 是数据的一个属性，这些属性将会让编译器知道程序员想要如何使用数据。
Literal(字面量) 与 Variable(变量) 相关，是用于初始化变量时指定的一个值。
数据类型的分类 原始数据类型 复合数据类型 抽象数据类型 其他类型 TODO Primitive Data Types(原始数据类型) 原始数据类型通常是语言实现的内置或基础类型。
Machine Data Type(机器数据类型) 基于数字电子的计算机中的所有数据都表示为最低级别的位（替代 0 和 1）。数据的最小可寻址单元通常是一组称为字节的位（通常是一个八位组，即 8 位）。由机器代码指令处理的单元称为字（截至 2011 年，通常为 32 或 64 位）。大多数指令将字解释为二进制数，因此 32 位字可以表示从 0 到 232 - 1 或有符号整数值来自 -231 到 231 - 1 由于二进制补码，机器语言和机器在大多数情况下不需要区分这些无符号和有符号数据类型。
用于浮点算术的浮点数对字中的位使用不同的解释。有关详细信息，请参阅浮点运算。
机器数据类型需要在系统或低级编程语言中公开或可用，允许对硬件进行细粒度控制。的C 编程语言，例如，建筑材料整数类型不同的宽度，如和。如果目标平台上不存在相应的本机类型，编译器将使用确实存在的类型将它们分解为代码。例如，如果在 16 位平台上请求一个 32 位整数，编译器会默认将其视为两个 16 位整数的数组。 shortlong
在更高级别的编程中，机器数据类型通常被隐藏或_抽象_为一个实现细节，如果暴露，会使代码的可移植性降低。例如，numeric 可以提供泛型类型而不是某些特定位宽的整数。
Boolean Type(布尔类型) Boolean(布尔) 类型表示值 true(真) 和 false(假)。尽管只有两个值是可能的，但出于效率原因，它们很少被实现为单个二进制数字。许多编程语言没有明确的布尔类型，而是将 0 解释为 false，将其他值解释为 true。布尔数据是指如何将语言解释为机器语言的逻辑结构。在这种情况下，布尔值 0 指的是逻辑 False。True 总是非零，尤其是被称为布尔值 1 的一。</description></item><item><title>进制表示法</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/Data-type/%E8%BF%9B%E5%88%B6%E8%A1%A8%E7%A4%BA%E6%B3%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/Data-type/%E8%BF%9B%E5%88%B6%E8%A1%A8%E7%A4%BA%E6%B3%95/</guid><description>概述 参考：
https://blog.51cto.com/ciyorecord/1930808 https://qastack.cn/programming/2670639/why-are-hexadecimal-numbers-prefixed-with-0x 对于整数，有四种表示方式： 二进制：0,1 ，满 2 进 1.以 0b 或 0B 开头。 十进制：0-9 ，满 10 进 1. 八进制：0-7 ，满 8 进 1. 以数字 0 开头表示。 十六进制：0-9 及 A-F，满 16 进 1. 以 0x 或 0X 开头表示。此处的 A-F 不区分大小写。 如：0x21AF +1= 0X21B0
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 0 1 2 3 4 5 6 7 8 9 A B C D E F 1.</description></item></channel></rss>