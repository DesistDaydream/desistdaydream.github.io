<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – 低级编程语言</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E4%BD%8E%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/</link><description>Recent content in 低级编程语言 on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E4%BD%8E%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: 低级编程语言</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E4%BD%8E%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/%E4%BD%8E%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E4%BD%8E%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/%E4%BD%8E%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Low-level_programming_language">Wiki,Low-level programming language&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>Docs: 堆 与 栈</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E4%BD%8E%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/%E5%A0%86-%E4%B8%8E-%E6%A0%88/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E4%BD%8E%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/%E5%A0%86-%E4%B8%8E-%E6%A0%88/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;a href="https://stackoverflow.com/questions/79923/what-and-where-are-the-stack-and-heap">StackOverflow&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>Heap(堆) 与 Stack(栈)&lt;/strong>
[https://www.yuque.com/desistdaydream/learning/f3d22e4e-0b4d-4787-9050-29da7e23160e](/docs/2.编程/低级编程语言/汇编语言入门教程%20-%20 阮一峰的网络日志.md - 阮一峰的网络日志.md) 这里有一些 堆栈 的通俗解释，非常好理解，想 copy 过来，但是语雀没法复制图片，等可以复制图片了，整理一下&lt;/p></description></item><item><title>Docs: 汇编语言入门教程 - 阮一峰的网络日志</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E4%BD%8E%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B-%E9%98%AE%E4%B8%80%E5%B3%B0%E7%9A%84%E7%BD%91%E7%BB%9C%E6%97%A5%E5%BF%97/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E4%BD%8E%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B-%E9%98%AE%E4%B8%80%E5%B3%B0%E7%9A%84%E7%BD%91%E7%BB%9C%E6%97%A5%E5%BF%97/</guid><description>
&lt;p>&lt;a href="https://www.ruanyifeng.com/blog/2018/01/assembly-language-primer.html">汇编语言入门教程 - 阮一峰的网络日志&lt;/a>&lt;/p>
&lt;p>学习编程其实就是学高级语言，即那些为人类设计的计算机语言。&lt;/p>
&lt;p>但是，计算机不理解高级语言，必须通过编译器转成二进制代码，才能运行。学会高级语言，并不等于理解计算机实际的运行步骤。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/f3d22e4e-0b4d-4787-9050-29da7e23160e/bg2018012204.png" alt="">&lt;/p>
&lt;p>计算机真正能够理解的是低级语言，它专门用来控制硬件。汇编语言就是低级语言，直接描述 / 控制 CPU 的运行。如果你想了解 CPU 到底干了些什么，以及代码的运行步骤，就一定要学习汇编语言。&lt;/p>
&lt;p>汇编语言不容易学习，就连简明扼要的介绍都很难找到。下面我尝试写一篇最好懂的汇编语言教程，解释 CPU 如何执行代码。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/f3d22e4e-0b4d-4787-9050-29da7e23160e/bg2018012202.jpg" alt="">&lt;/p>
&lt;h2 id="一汇编语言是什么">一、汇编语言是什么？&lt;/h2>
&lt;p>我们知道，CPU 只负责计算，本身不具备智能。你输入一条指令（instruction），它就运行一次，然后停下来，等待下一条指令。&lt;/p>
&lt;p>这些指令都是二进制的，称为操作码（opcode），比如加法指令就是&lt;code>00000011&lt;/code>。&lt;a href="https://www.ruanyifeng.com/blog/2014/11/compiler.html">编译器&lt;/a>的作用，就是将高级语言写好的程序，翻译成一条条操作码。&lt;/p>
&lt;p>对于人类来说，二进制程序是不可读的，根本看不出来机器干了什么。为了解决可读性的问题，以及偶尔的编辑需求，就诞生了汇编语言。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/f3d22e4e-0b4d-4787-9050-29da7e23160e/bg2018012203.jpg" alt="">&lt;/p>
&lt;p>&lt;strong>汇编语言是二进制指令的文本形式&lt;/strong>，与指令是一一对应的关系。比如，加法指令&lt;code>00000011&lt;/code>写成汇编语言就是 ADD。只要还原成二进制，汇编语言就可以被 CPU 直接执行，所以它是最底层的低级语言。&lt;/p>
&lt;h2 id="二来历">二、来历&lt;/h2>
&lt;p>最早的时候，编写程序就是手写二进制指令，然后通过各种开关输入计算机，比如要做加法了，就按一下加法开关。后来，发明了纸带打孔机，通过在纸带上打孔，将二进制指令自动输入计算机。&lt;/p>
&lt;p>为了解决二进制指令的可读性问题，工程师将那些指令写成了八进制。二进制转八进制是轻而易举的，但是八进制的可读性也不行。很自然地，最后还是用文字表达，加法指令写成 ADD。内存地址也不再直接引用，而是用标签表示。&lt;/p>
&lt;p>这样的话，就多出一个步骤，要把这些文字指令翻译成二进制，这个步骤就称为 assembling，完成这个步骤的程序就叫做 assembler。它处理的文本，自然就叫做 aseembly code。标准化以后，称为 assembly language，缩写为 asm，中文译为汇编语言。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/f3d22e4e-0b4d-4787-9050-29da7e23160e/bg2018012205.jpg" alt="">&lt;/p>
&lt;p>每一种 CPU 的机器指令都是不一样的，因此对应的汇编语言也不一样。本文介绍的是目前最常见的 x86 汇编语言，即 Intel 公司的 CPU 使用的那一种。&lt;/p>
&lt;h2 id="三寄存器">三、寄存器&lt;/h2>
&lt;p>学习汇编语言，首先必须了解两个知识点：寄存器和内存模型。&lt;/p>
&lt;p>先来看寄存器。CPU 本身只负责运算，不负责储存数据。数据一般都储存在内存之中，CPU 要用的时候就去内存读写数据。但是，CPU 的运算速度远高于内存的读写速度，为了避免被拖慢，CPU 都自带一级缓存和二级缓存。基本上，CPU 缓存可以看作是读写速度较快的内存。&lt;/p>
&lt;p>但是，CPU 缓存还是不够快，另外数据在缓存里面的地址是不固定的，CPU 每次读写都要寻址也会拖慢速度。因此，除了缓存之外，CPU 还自带了寄存器（register），用来储存最常用的数据。也就是说，那些最频繁读写的数据（比如循环变量），都会放在寄存器里面，CPU 优先读写寄存器，再由寄存器跟内存交换数据。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/f3d22e4e-0b4d-4787-9050-29da7e23160e/bg2018012206.png" alt="">&lt;/p>
&lt;p>寄存器不依靠地址区分数据，而依靠名称。每一个寄存器都有自己的名称，我们告诉 CPU 去具体的哪一个寄存器拿数据，这样的速度是最快的。有人比喻寄存器是 CPU 的零级缓存。&lt;/p>
&lt;h2 id="四寄存器的种类">四、寄存器的种类&lt;/h2>
&lt;p>早期的 x86 CPU 只有 8 个寄存器，而且每个都有不同的用途。现在的寄存器已经有 100 多个了，都变成通用寄存器，不特别指定用途了，但是早期寄存器的名字都被保存了下来。&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>EAX&lt;/li>
&lt;li>EBX&lt;/li>
&lt;li>ECX&lt;/li>
&lt;li>EDX&lt;/li>
&lt;li>EDI&lt;/li>
&lt;li>ESI&lt;/li>
&lt;li>EBP&lt;/li>
&lt;li>ESP&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>上面这 8 个寄存器之中，前面七个都是通用的。ESP 寄存器有特定用途，保存当前 Stack 的地址（详见下一节）。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/f3d22e4e-0b4d-4787-9050-29da7e23160e/bg2018012207.png" alt="">&lt;/p>
&lt;p>我们常常看到 32 位 CPU、64 位 CPU 这样的名称，其实指的就是寄存器的大小。32 位 CPU 的寄存器大小就是 4 个字节。&lt;/p>
&lt;h2 id="五内存模型heap">五、内存模型：Heap&lt;/h2>
&lt;p>寄存器只能存放很少量的数据，大多数时候，CPU 要指挥寄存器，直接跟内存交换数据。所以，除了寄存器，还必须了解内存怎么储存数据。&lt;/p>
&lt;p>程序运行的时候，操作系统会给它分配一段内存，用来储存程序和运行产生的数据。这段内存有起始地址和结束地址，比如从&lt;code>0x1000&lt;/code>到&lt;code>0x8000&lt;/code>，起始地址是较小的那个地址，结束地址是较大的那个地址。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/f3d22e4e-0b4d-4787-9050-29da7e23160e/bg2018012208.png" alt="">&lt;/p>
&lt;p>程序运行过程中，对于动态的内存占用请求（比如新建对象，或者使用&lt;code>malloc&lt;/code>命令），系统就会从预先分配好的那段内存之中，划出一部分给用户，具体规则是从起始地址开始划分（实际上，起始地址会有一段静态数据，这里忽略）。举例来说，用户要求得到 10 个字节内存，那么从起始地址&lt;code>0x1000&lt;/code>开始给他分配，一直分配到地址&lt;code>0x100A&lt;/code>，如果再要求得到 22 个字节，那么就分配到&lt;code>0x1020&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/f3d22e4e-0b4d-4787-9050-29da7e23160e/bg2018012209.png" alt="">&lt;/p>
&lt;p>这种因为用户主动请求而划分出来的内存区域，叫做 Heap（堆）。它由起始地址开始，从低位（地址）向高位（地址）增长。Heap 的一个重要特点就是不会自动消失，必须手动释放，或者由垃圾回收机制来回收。&lt;/p>
&lt;h2 id="六内存模型stack">六、内存模型：Stack&lt;/h2>
&lt;p>除了 Heap 以外，其他的内存占用叫做 Stack（栈）。简单说，Stack 是由于函数运行而临时占用的内存区域。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/f3d22e4e-0b4d-4787-9050-29da7e23160e/bg2018012210.png" alt="">&lt;/p>
&lt;p>请看下面的例子。&lt;/p>
&lt;blockquote>
&lt;/blockquote>
&lt;pre>&lt;code> int main() {
int a = 2;
int b = 3;
}
&lt;/code>&lt;/pre>
&lt;p>上面代码中，系统开始执行&lt;code>main&lt;/code>函数时，会为它在内存里面建立一个帧（frame），所有&lt;code>main&lt;/code>的内部变量（比如&lt;code>a&lt;/code>和&lt;code>b&lt;/code>）都保存在这个帧里面。&lt;code>main&lt;/code>函数执行结束后，该帧就会被回收，释放所有的内部变量，不再占用空间。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/f3d22e4e-0b4d-4787-9050-29da7e23160e/bg2018012211.png" alt="">&lt;/p>
&lt;p>如果函数内部调用了其他函数，会发生什么情况？&lt;/p>
&lt;blockquote>
&lt;/blockquote>
&lt;pre>&lt;code> int main() {
int a = 2;
int b = 3;
return add_a_and_b(a, b);
}
&lt;/code>&lt;/pre>
&lt;p>上面代码中，&lt;code>main&lt;/code>函数内部调用了&lt;code>add_a_and_b&lt;/code>函数。执行到这一行的时候，系统也会为&lt;code>add_a_and_b&lt;/code>新建一个帧，用来储存它的内部变量。也就是说，此时同时存在两个帧：&lt;code>main&lt;/code>和&lt;code>add_a_and_b&lt;/code>。一般来说，调用栈有多少层，就有多少帧。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/f3d22e4e-0b4d-4787-9050-29da7e23160e/bg2018012212.png" alt="">&lt;/p>
&lt;p>等到&lt;code>add_a_and_b&lt;/code>运行结束，它的帧就会被回收，系统会回到函数&lt;code>main&lt;/code>刚才中断执行的地方，继续往下执行。通过这种机制，就实现了函数的层层调用，并且每一层都能使用自己的本地变量。&lt;/p>
&lt;p>所有的帧都存放在 Stack，由于帧是一层层叠加的，所以 Stack 叫做栈。生成新的帧，叫做 &amp;ldquo;入栈&amp;rdquo;，英文是 push；栈的回收叫做 &amp;ldquo;出栈&amp;rdquo;，英文是 pop。Stack 的特点就是，最晚入栈的帧最早出栈（因为最内层的函数调用，最先结束运行），这就叫做 &amp;ldquo;后进先出&amp;rdquo; 的数据结构。每一次函数执行结束，就自动释放一个帧，所有函数执行结束，整个 Stack 就都释放了。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/f3d22e4e-0b4d-4787-9050-29da7e23160e/bg2018012213.jpg" alt="">&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/f3d22e4e-0b4d-4787-9050-29da7e23160e/bg2018012214.jpg" alt="">&lt;/p>
&lt;p>Stack 是由内存区域的结束地址开始，从高位（地址）向低位（地址）分配。比如，内存区域的结束地址是&lt;code>0x8000&lt;/code>，第一帧假定是 16 字节，那么下一次分配的地址就会从&lt;code>0x7FF0&lt;/code>开始；第二帧假定需要 64 字节，那么地址就会移动到&lt;code>0x7FB0&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/f3d22e4e-0b4d-4787-9050-29da7e23160e/bg2018012215.png" alt="">&lt;/p>
&lt;h2 id="七cpu-指令">七、CPU 指令&lt;/h2>
&lt;h3 id="71-一个实例">7.1 一个实例&lt;/h3>
&lt;p>了解寄存器和内存模型以后，就可以来看汇编语言到底是什么了。下面是一个简单的程序&lt;code>example.c&lt;/code>。&lt;/p>
&lt;pre>&lt;code> int add_a_and_b(int a, int b) {
return a + b;
}
int main() {
return add_a_and_b(2, 3);
}
&lt;/code>&lt;/pre>
&lt;p>gcc 将这个程序转成汇编语言。&lt;/p>
&lt;pre>&lt;code> $ gcc -S example.c
&lt;/code>&lt;/pre>
&lt;p>上面的命令执行以后，会生成一个文本文件&lt;code>example.s&lt;/code>，里面就是汇编语言，包含了几十行指令。这么说吧，一个高级语言的简单操作，底层可能由几个，甚至几十个 CPU 指令构成。CPU 依次执行这些指令，完成这一步操作。&lt;/p>
&lt;p>&lt;code>example.s&lt;/code>经过简化以后，大概是下面的样子。&lt;/p>
&lt;blockquote>
&lt;/blockquote>
&lt;pre>&lt;code> _add_a_and_b:
push %ebx
mov %eax, [%esp+8]
mov %ebx, [%esp+12]
add %eax, %ebx
pop %ebx
ret
_main:
push 3
push 2
call _add_a_and_b
add %esp, 8
ret
&lt;/code>&lt;/pre>
&lt;p>可以看到，原程序的两个函数&lt;code>add_a_and_b&lt;/code>和&lt;code>main&lt;/code>，对应两个标签&lt;code>_add_a_and_b&lt;/code>和&lt;code>_main&lt;/code>。每个标签里面是该函数所转成的 CPU 运行流程。&lt;/p>
&lt;p>每一行就是 CPU 执行的一次操作。它又分成两部分，就以其中一行为例。&lt;/p>
&lt;blockquote>
&lt;/blockquote>
&lt;pre>&lt;code> push %ebx
&lt;/code>&lt;/pre>
&lt;p>这一行里面，&lt;code>push&lt;/code>是 CPU 指令，&lt;code>%ebx&lt;/code>是该指令要用到的运算子。一个 CPU 指令可以有零个到多个运算子。&lt;/p>
&lt;p>下面我就一行一行讲解这个汇编程序，建议读者最好把这个程序，在另一个窗口拷贝一份，省得阅读的时候再把页面滚动上来。&lt;/p>
&lt;h3 id="72-push-指令">7.2 push 指令&lt;/h3>
&lt;p>根据约定，程序从&lt;code>_main&lt;/code>标签开始执行，这时会在 Stack 上为&lt;code>main&lt;/code>建立一个帧，并将 Stack 所指向的地址，写入 ESP 寄存器。后面如果有数据要写入&lt;code>main&lt;/code>这个帧，就会写在 ESP 寄存器所保存的地址。&lt;/p>
&lt;p>然后，开始执行第一行代码。&lt;/p>
&lt;blockquote>
&lt;/blockquote>
&lt;pre>&lt;code> push 3
&lt;/code>&lt;/pre>
&lt;p>&lt;code>push&lt;/code>指令用于将运算子放入 Stack，这里就是将&lt;code>3&lt;/code>写入&lt;code>main&lt;/code>这个帧。&lt;/p>
&lt;p>虽然看上去很简单，&lt;code>push&lt;/code>指令其实有一个前置操作。它会先取出 ESP 寄存器里面的地址，将其减去 4 个字节，然后将新地址写入 ESP 寄存器。使用减法是因为 Stack 从高位向低位发展，4 个字节则是因为&lt;code>3&lt;/code>的类型是&lt;code>int&lt;/code>，占用 4 个字节。得到新地址以后， 3 就会写入这个地址开始的四个字节。&lt;/p>
&lt;blockquote>
&lt;/blockquote>
&lt;pre>&lt;code> push 2
&lt;/code>&lt;/pre>
&lt;p>第二行也是一样，&lt;code>push&lt;/code>指令将&lt;code>2&lt;/code>写入&lt;code>main&lt;/code>这个帧，位置紧贴着前面写入的&lt;code>3&lt;/code>。这时，ESP 寄存器会再减去 4 个字节（累计减去 8）。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/f3d22e4e-0b4d-4787-9050-29da7e23160e/bg2018012216.png" alt="">&lt;/p>
&lt;h3 id="73-call-指令">7.3 call 指令&lt;/h3>
&lt;p>第三行的&lt;code>call&lt;/code>指令用来调用函数。&lt;/p>
&lt;blockquote>
&lt;/blockquote>
&lt;pre>&lt;code> call _add_a_and_b
&lt;/code>&lt;/pre>
&lt;p>上面的代码表示调用&lt;code>add_a_and_b&lt;/code>函数。这时，程序就会去找&lt;code>_add_a_and_b&lt;/code>标签，并为该函数建立一个新的帧。&lt;/p>
&lt;p>下面就开始执行&lt;code>_add_a_and_b&lt;/code>的代码。&lt;/p>
&lt;blockquote>
&lt;/blockquote>
&lt;pre>&lt;code> push %ebx
&lt;/code>&lt;/pre>
&lt;p>这一行表示将 EBX 寄存器里面的值，写入&lt;code>_add_a_and_b&lt;/code>这个帧。这是因为后面要用到这个寄存器，就先把里面的值取出来，用完后再写回去。&lt;/p>
&lt;p>这时，&lt;code>push&lt;/code>指令会再将 ESP 寄存器里面的地址减去 4 个字节（累计减去 12）。&lt;/p>
&lt;h3 id="74-mov-指令">7.4 mov 指令&lt;/h3>
&lt;p>&lt;code>mov&lt;/code>指令用于将一个值写入某个寄存器。&lt;/p>
&lt;blockquote>
&lt;/blockquote>
&lt;pre>&lt;code> mov %eax, [%esp+8]
&lt;/code>&lt;/pre>
&lt;p>这一行代码表示，先将 ESP 寄存器里面的地址加上 8 个字节，得到一个新的地址，然后按照这个地址在 Stack 取出数据。根据前面的步骤，可以推算出这里取出的是&lt;code>2&lt;/code>，再将&lt;code>2&lt;/code>写入 EAX 寄存器。&lt;/p>
&lt;p>下一行代码也是干同样的事情。&lt;/p>
&lt;blockquote>
&lt;/blockquote>
&lt;pre>&lt;code> mov %ebx, [%esp+12]
&lt;/code>&lt;/pre>
&lt;p>上面的代码将 ESP 寄存器的值加 12 个字节，再按照这个地址在 Stack 取出数据，这次取出的是&lt;code>3&lt;/code>，将其写入 EBX 寄存器。&lt;/p>
&lt;h3 id="75-add-指令">7.5 add 指令&lt;/h3>
&lt;p>&lt;code>add&lt;/code>指令用于将两个运算子相加，并将结果写入第一个运算子。&lt;/p>
&lt;blockquote>
&lt;/blockquote>
&lt;pre>&lt;code> add %eax, %ebx
&lt;/code>&lt;/pre>
&lt;p>上面的代码将 EAX 寄存器的值（即 2）加上 EBX 寄存器的值（即 3），得到结果 5，再将这个结果写入第一个运算子 EAX 寄存器。&lt;/p>
&lt;h3 id="76-pop-指令">7.6 pop 指令&lt;/h3>
&lt;p>&lt;code>pop&lt;/code>指令用于取出 Stack 最近一个写入的值（即最低位地址的值），并将这个值写入运算子指定的位置。&lt;/p>
&lt;blockquote>
&lt;/blockquote>
&lt;pre>&lt;code> pop %ebx
&lt;/code>&lt;/pre>
&lt;p>上面的代码表示，取出 Stack 最近写入的值（即 EBX 寄存器的原始值），再将这个值写回 EBX 寄存器（因为加法已经做完了，EBX 寄存器用不到了）。&lt;/p>
&lt;p>注意，&lt;code>pop&lt;/code>指令还会将 ESP 寄存器里面的地址加 4，即回收 4 个字节。&lt;/p>
&lt;h3 id="77-ret-指令">7.7 ret 指令&lt;/h3>
&lt;p>&lt;code>ret&lt;/code>指令用于终止当前函数的执行，将运行权交还给上层函数。也就是，当前函数的帧将被回收。&lt;/p>
&lt;blockquote>
&lt;/blockquote>
&lt;pre>&lt;code> ret
&lt;/code>&lt;/pre>
&lt;p>可以看到，该指令没有运算子。&lt;/p>
&lt;p>随着&lt;code>add_a_and_b&lt;/code>函数终止执行，系统就回到刚才&lt;code>main&lt;/code>函数中断的地方，继续往下执行。&lt;/p>
&lt;blockquote>
&lt;/blockquote>
&lt;pre>&lt;code> add %esp, 8
&lt;/code>&lt;/pre>
&lt;p>上面的代码表示，将 ESP 寄存器里面的地址，手动加上 8 个字节，再写回 ESP 寄存器。这是因为 ESP 寄存器的是 Stack 的写入开始地址，前面的&lt;code>pop&lt;/code>操作已经回收了 4 个字节，这里再回收 8 个字节，等于全部回收。&lt;/p>
&lt;blockquote>
&lt;/blockquote>
&lt;pre>&lt;code> ret
&lt;/code>&lt;/pre>
&lt;p>最后，&lt;code>main&lt;/code>函数运行结束，&lt;code>ret&lt;/code>指令退出程序执行。&lt;/p>
&lt;h2 id="八参考链接">八、参考链接&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="http://kakaroto.homelinux.net/2017/11/introduction-to-reverse-engineering-and-assembly/">Introduction to reverse engineering and Assembly&lt;/a>, by Youness Alaoui&lt;/li>
&lt;li>&lt;a href="https://www.cs.virginia.edu/~evans/cs216/guides/x86.html">x86 Assembly Guide&lt;/a>, by University of Virginia Computer Science&lt;/li>
&lt;/ul>
&lt;p>（完）&lt;/p></description></item></channel></rss>