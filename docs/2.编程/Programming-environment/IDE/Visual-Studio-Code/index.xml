<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Visual Studio Code on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-environment/IDE/Visual-Studio-Code/</link><description>Recent content in Visual Studio Code on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-environment/IDE/Visual-Studio-Code/index.xml" rel="self" type="application/rss+xml"/><item><title>Visual Studio Code</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-environment/IDE/Visual-Studio-Code/Visual-Studio-Code/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-environment/IDE/Visual-Studio-Code/Visual-Studio-Code/</guid><description>概述 参考：
GitHub 项目，microsoft/vscode 官网 官方文档 VS Code 关联文件与配置 ${UserDataDir} # 用户数据目录。
Windows 默认在 %APPDATA%/Code/ Linux 默认在 ${HOME}/.vscode-server/data/ VS Code 运行时生成的持久化数据通常都在同一个目录中。之所以称为用户数据目录，是因为需要以用户为基础来运行一个进程，不同的用户运行的 VS Code，读取的数据应该是不同的。所以这些数据一般就保存在用户的家目录中。
./User/ # ./workspaceStorage/ # 工作空间的配置与持久化数据 ./keybindings.json # 快捷键 ./settings.json # 用户自定义的配置。默认配置在代码内部。 ${ExtensionsDir} # 扩展目录。
Windows 默认在 %USERPROFILE%/.vscode/extensions/ Linux 默认在 %{HOME}/.vscode-server/extensions/ 配置 使用快捷键 Ctrl+Shift+p ，然后搜索 setting，即可看到如下图所示的一些可用的配置。这个编辑的就是 ${UserDataDir}/User/setting.json 文件
首选项：打开默认设置(JSON) # 打开 defaultSettings.json 文件。这个文件是 VS Code 的默认配置，其中还有每个字段的注释 首选项：打开设置(JSON) # 打开 settings.json 文件。一般用户配置都在这个文件中编写。 首选项：打开工作区设置(JSON) # 打开 .vscode/setting 文件。 defaultSettings.json # VS Code 默认配置文件。其中还有每个字段的注释</description></item><item><title>code-server</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-environment/IDE/Visual-Studio-Code/code-server/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-environment/IDE/Visual-Studio-Code/code-server/</guid><description>概述 参考：
GitHub 项目，coder/code-server 官网 code-server 可以让 VS Code 运行在任何机器上，并在浏览器中访问。
code-server 是一个免费的基于浏览器的 IDE，而 Coder 是该企业提供的收费版本。
部署 mkdir -p /opt/code-server/user-data-dir nerdctl run --name code-server --network host -d \ -v &amp;#34;/opt/code-server/user-data-dir:/root&amp;#34; \ -u &amp;#34;$(id -u):$(id -g)&amp;#34; \ -e &amp;#34;DOCKER_USER=$USER&amp;#34; \ codercom/code-server:latest 个性部署 nerdctl run --name code-server --network host -d \ -v &amp;#34;/opt/code-server/user-data-dir:/root&amp;#34; \ -v &amp;#34;/usr/local/go:/usr/local/go&amp;#34; \ -v &amp;#34;/root/go:/root/go&amp;#34; \ -v &amp;#34;/root/projects:/root/projects&amp;#34; \ -u &amp;#34;$(id -u):$(id -g)&amp;#34; \ -e &amp;#34;DOCKER_USER=$USER&amp;#34; \ -e &amp;#34;GOPROXY=https://goproxy.cn,https://goproxy.io,https://mirrors.aliyun.com/goproxy/,direct&amp;#34; \ codercom/code-server:latest \ --bind-addr 0.</description></item><item><title>Plugins</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-environment/IDE/Visual-Studio-Code/Plugins/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-environment/IDE/Visual-Studio-Code/Plugins/</guid><description>概述 参考：
关联文件与配置 在每个项目的根目录下有这么一个目录： ${Project}/.vscode/，所有适用于本项目的插件配置通常都会保存在该目录中。
Debug 插件 参考：
官方文档，用户指南 - Debugging https://www.barretlee.com/blog/2019/03/18/debugging-in-vscode-tutorial/ Debug 插件的默认配置文件名为 launch.json
launch.json https://code.visualstudio.com/docs/editor/debugging#_launchjson-attributes
cwd # 运行程序的工作路径
program # 启动调试器时要运行的可执行文件或文件
args # 运行程序的参数
简单示例 { // 使用 IntelliSense 了解相关属性。 // 悬停以查看现有属性的描述。 // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387 &amp;#34;version&amp;#34;: &amp;#34;0.2.0&amp;#34;, &amp;#34;configurations&amp;#34;: [ { &amp;#34;name&amp;#34;: &amp;#34;Launch Package&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;go&amp;#34;, &amp;#34;request&amp;#34;: &amp;#34;launch&amp;#34;, &amp;#34;mode&amp;#34;: &amp;#34;auto&amp;#34;, &amp;#34;cwd&amp;#34;: &amp;#34;${workspaceRoot}&amp;#34;, &amp;#34;program&amp;#34;: &amp;#34;cmd/statistics/main.go&amp;#34;, &amp;#34;args&amp;#34;: [&amp;#34;-s&amp;#34;, &amp;#34;dp&amp;#34;] } ] } SFTP 插件 https://github.com/liximomo/vscode-sftp#connection-hopping
新的 SFTP 插件，上面的已不更新。 https://github.com/Natizyskunk/vscode-sftp { &amp;#34;name&amp;#34;: &amp;#34;ansible&amp;#34;, &amp;#34;host&amp;#34;: &amp;#34;172.</description></item><item><title>VS Code 快捷键</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-environment/IDE/Visual-Studio-Code/VS-Code-%E5%BF%AB%E6%8D%B7%E9%94%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-environment/IDE/Visual-Studio-Code/VS-Code-%E5%BF%AB%E6%8D%B7%E9%94%AE/</guid><description>概述 参考：
官方文档,pdf 官方文档 https://docs.microsoft.com/zh-cn/visualstudio/ide/productivity-shortcuts 多个组合按键表示需要连续按
全局快捷键 Ctrl+q 搜索 Visual Studio。主要用于快速切换 VS Code 本身的功能
Ctrl+k,Ctrl+s 打开键盘快捷方式列表
视图 Ctrl+Shift+e # 显示资源管理器
Ctrl+Shift+g # 显示源代码管理
Ctrl+k,Ctrl+F5 # (自定义)Git 刷新
Ctrl+Shift+f # 显示搜索
Ctrl+Alt+→ 将编辑器拆分到新组
Ctrl+Alt+→ 将编辑器合并到前一个组
Ctrl+PageUp 选中上一个编辑器
Ctrl+PageDown 选中下一个编辑器
Ctrl+k,Ctrl+→ 选中右侧编辑器组
Ctrl+k,Ctrl+← 选中左侧编辑器组
组内操作 Alt+NUM 选中组中第 NUM 号编辑器
编辑时操作 操作光标所在代码
折叠 Ctrl+k,Ctrl+[ 递归折叠光标所在代码块所有层 Ctrl+Shift+[ 折叠光标所在代码代码 1 层 展开 Ctrl+k,Ctrl+] 递归展开光标所在代码块所有层 Ctrl+Shift+] 展开光标所在代码代码 1 层 操作文件所有代码
折叠 Ctrl+k,Ctrl+0 折叠所有代码全部层 Ctrl+k,Ctrl+${NUM} 折叠所有代码的 NUM 层 Ctrl+k,Ctrl+/ 折叠所有代码的注释 展开 Ctrl+k,Ctrl+j 展开所有代码的全部层 Alt+Shift+a 添加代码块注释</description></item><item><title>VS Code 配置详解</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-environment/IDE/Visual-Studio-Code/VS-Code-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-environment/IDE/Visual-Studio-Code/VS-Code-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</guid><description>概述 配置详解 { // 通用配置 // 资源管理器自动展开功能。即.追踪代码时，是否自动展开资源管理器中的目录。 // 该配置在前端代码中，最好关闭，因为前端的依赖都在本地目录中，展开之后太乱了 &amp;#34;explorer.autoReveal&amp;#34;: true, // 启用后，将不会显示扩展建议的通知。 &amp;#34;extensions.ignoreRecommendations&amp;#34;: true, // 终端在 Windows 上使用的 shell 的路径(默认: C:\WINDOWS\System32\WindowsPowerShell\v1.0\powershell.exe)。 // [详细了解如何配置 shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration)。 // &amp;#34;terminal.integrated.shell.windows&amp;#34;: &amp;#34;D:\\Tools\\Git\\bin\\bash.exe&amp;#34;, // 上面的指令已弃用，使用下面的方式来配置 shell &amp;#34;terminal.integrated.profiles.windows&amp;#34;: { &amp;#34;PowerShell&amp;#34;: { &amp;#34;source&amp;#34;: &amp;#34;PowerShell&amp;#34;, &amp;#34;icon&amp;#34;: &amp;#34;terminal-powershell&amp;#34; }, &amp;#34;bash&amp;#34;: { &amp;#34;path&amp;#34;: &amp;#34;D:\\Tools\\Git\\bin\\bash.exe&amp;#34; } }, &amp;#34;terminal.integrated.defaultProfile.windows&amp;#34;: &amp;#34;Ubuntu-20.04 (WSL)&amp;#34;, &amp;#34;terminal.integrated.automationShell.linux&amp;#34;: &amp;#34;&amp;#34;, // 控制侧边栏和活动栏的位置。它们可以显示在工作台的左侧或右侧。 &amp;#34;workbench.sideBar.location&amp;#34;: &amp;#34;left&amp;#34;, // 默认行尾字符，可用的值有如下几个： // \n # 表示 LF // \r\n # 表示 CRLF // auto # 表示 使用具体操作系统规定的行末字符。 &amp;#34;files.</description></item><item><title>VS Code 中的 WSL</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-environment/IDE/Visual-Studio-Code/VS-Code-%E4%B8%AD%E7%9A%84-WSL/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-environment/IDE/Visual-Studio-Code/VS-Code-%E4%B8%AD%E7%9A%84-WSL/</guid><description>概述 参考：
官方文档,远程-WSL 使用指定发行版的 WSL
使用第一个的话，go 环境始终无法获取环境变量
WSL 代理 VS Code 中的 WSL 将会继承 VS Code 的代理配置。
若启动 VS Code 之前，已启动系统代理(比如 Clash for windows)，则 VS Code 中的 WSL 也会使用代理，而此时 VS Code 的默认代理是 127.0.0.1:7890，此时 WSL 继承了这个配置，那么访问 WSL 中的这个地址是有问题的（此时 Ubuntu 中可并没有运行 Clash，也自然不会监听本地 7890 端口）
所以，若想让插件使用本地连接，启动 VS Code 之前不要开启系统代理。
VS Code 部分扩展联网失败的问题 https://kawnnor.com/wsl-vscode-proxy
在 VS Code 中，通过 Remote - WSL 打开 Ubuntu 子系统中的项目
IntelliCode 扩展无法下载模型，WakaTime 扩展无法上传统计数据 ChatGPT 无法访问 猜测原因 Clash for Windows + TUN Mode 对 Ubuntu 子系统中的 vscode-server 没有起到代理的作用，但是 IntelliCode 和 WakaTime 在没有代理的情况下应该也可以正常工作，所以怀疑 vscode-server 被配置了错误的代理。</description></item></channel></rss>