<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – 编程技术</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/</link><description>Recent content in 编程技术 on 断念梦</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: 编程技术</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="crud增删改查">CRUD(增删改查)&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete">Wiki，CRUD&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>在计算机编程中，&lt;strong>Create、Read、Update、Delete(创建、读取、更新、删除，简称 增删改查(CRUD))&lt;/strong> 是持久性存储的四个基本操作。CRUD 有时也用于描述用户界面约定，这些约定便于使用基于计算机的表单和报告查看、搜索和更改信息。这个词很可能是詹姆斯·马丁 (James Martin) 在他的 1983 著作《管理数据库环境》中首次推广的。&lt;/p>
&lt;h1 id="projects项目">Projects(项目)&lt;/h1>
&lt;p>项目一般就是指开发一个程序。&lt;/p>
&lt;p>从写代码的角度看，一个项目就是一个文件夹，该文件夹中包含该项目所需要依赖的第三方库，项目主体的代码，可执行文件等。&lt;/p>
&lt;h1 id="前端与后端">前端与后端&lt;/h1>
&lt;p>后端：一般是用来处理客户端发送的请求，并将前端写的 页面代码 文件，发送给客户端；或者从数据库获取数据，并填充到前端页面中；等等&lt;/p>
&lt;p>前端：一般用来展示的，客户端收到的页面文件(比如输入用户名和密码的框，下拉框等等)，都是由前端工程师来写的，一般是 html 等。&lt;/p>
&lt;h2 id="前后端交互">前后端交互&lt;/h2>
&lt;p>前端与后端之间的交互取决于是前后端分离还不分离&lt;/p>
&lt;ul>
&lt;li>前后端不分离时，通常由后端代码渲染 html 等静态资源文件，&lt;strong>此时客户端访问的是由后端代码监听的端口&lt;/strong>&lt;/li>
&lt;li>前后端分离时，又分多种情况
&lt;ul>
&lt;li>将 html 等静态资源放在 Nginx 等可以提供 HTTP 服务的程序中，然后通过后端提供的 API 进行交互，&lt;strong>此时客户端访问的是由提供 HTTP 服务程序监听的端口&lt;/strong>&lt;/li>
&lt;li>将 html 等静态资源与后端代码放在一起，这种行为通常称为“XX 语言嵌入静态资源”，&lt;strong>此时客户端访问的是由后端程序监听的端口&lt;/strong>
&lt;ul>
&lt;li>比如 Go 语言在 1.16 版本中推出的 embed 库即可实现该效果&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="前后端数据交互">前后端数据交互&lt;/h2>
&lt;p>通常来说，&lt;a href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80/HTML.md">HTML&lt;/a> 展示出的页面内容中的数据通常分为两大类&lt;/p>
&lt;ul>
&lt;li>静态&lt;/li>
&lt;li>动态&lt;/li>
&lt;/ul>
&lt;p>在早期互联网不发达的时候，页面内容是不变的，数据也是静态的，但是随着互联网的发展，信息增多，一个页面的数据需要在用户操作时可以变化，此时就需要用到 &lt;a href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/ECMAScript%20%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/AJAX.md">AJAX&lt;/a> 以动态的方式进行数据展示。&lt;/p>
&lt;p>现在静态数据的网站已经很少见了，比如 &lt;a href="https://world.digimoncard.com/cardlist/?search=true&amp;amp;category=522018">DTCG 卡牌列表&lt;/a>（截至 2023.12.19），这种就属于静态数据。静态数据有个弊端，就是哪怕不展示，也是全量加载，比如这个 卡牌列表 网站，虽然也分成了 4 页，但是在访问的时候，实际上是加载了所有页中的所有数据到前端，然后前端通过分页隐藏了其他页的数据。这种做法无形中增加了每次访问的流量，一共 4 页数据全加载了，但是真实情况却并不需要看到。&lt;/p>
&lt;p>而动态数据，则并不需要在访问网站时加载所有页的数据，只需要在访问其他页的数据的时候，通过 XHR/Fetch 等 AJAX 手段，向后端再发起请求即可。&lt;/p>
&lt;h1 id="打包与编译">打包与编译&lt;/h1>
&lt;p>&lt;strong>Bundle(打包)&lt;/strong> 与 &lt;strong>Compile(编译)&lt;/strong> 是两种常见的构建代码的手段。&lt;/p>
&lt;p>后端构建代码常用 Compile，前端常用 Bundle。&lt;/p>
&lt;ul>
&lt;li>对于后端来说，是把代码直接 Compile 成一个二进制文件在系统中运行&lt;/li>
&lt;li>对于前端来说，是把代码打包成一个或多个 JS、HTML 等文件，在浏览器中运行
&lt;ul>
&lt;li>在 &lt;a href="docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/ECMAScript%20%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/ECMAScript%20%E6%A8%A1%E5%9D%97%E4%B8%8E%E5%8C%85.md">ECMAScript 模块与包&lt;/a> 中的 “浏览器中使用 ESM 的常见问题” 可以看到，浏览器自身是没法自动导入某个依赖库的，所以想要在浏览器中运行 JS 代码，就需要吧依赖库与本身的 JS 文件打包起来，形成一个或一组 JS 文件，这时，浏览器再执行 import 时，就从这些已打包的文件中查找，就可以找到相关依赖了。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="库标准库第三方库与框架">库、标准库、第三方库与框架&lt;/h1>
&lt;p>每种编程语言都具有最基本的功能，比如输入、输出等，这些都属于基本库。比如我使用 print 想输出一些内容，则是调用输出所用的库来实现这个效果。这些基本库都是内置在各个编程语言当中的，可以直接调用。&lt;/p>
&lt;p>但是有时候会有很复杂的需求， 比如对系统的某些程序进行操作、对数据库进行操作、写出来的程序如何设置子命令和参数等等等。这些复杂的需求，如果使用基本的编程语言来实现，是非常麻烦的，这时候如果有人可以提前使用编程语言的基本功能来创作一个可以实现某个具体功能的程序就好了。&lt;/p>
&lt;p>这个创作出来的基本程序就可以称之为“库或者框架”&lt;/p>
&lt;p>至于库和框架的区别：库的英语为 Library ( 简写 Lib )，框架的英语为 Framework。库和框架都是一种有别于软件、面向程序开发者的产品形式。正因为如此，也有很多人误以为库就是框架，或者认为指定语言的库就是框架。&lt;/p>
&lt;ul>
&lt;li>库：库是将代码集合成的一个产品，供程序员调用。面向对象的代码组织形式而成的库也叫类库。面向过程的代码组织形式而成的库也叫函数库。在函数库中的可直接使用的函数叫库函数。开发者在使用库的时候，只需要使用库的一部分类或函数，然后继续实现自己的功能。
&lt;ul>
&lt;li>标准库：就是各种语言自带的库，比如 go 里的 fmt 库，用来输出。这些标准库与语言的关键字构成了编程语言的基本功能。&lt;/li>
&lt;li>第三方库：是对编程语言的扩展，比如一种语言需要更多丰富的功能，而不仅有标准库的功能的时候，可以导入第三方库并使用它们。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>框架：框架则是为解决一个(一类)问题而开发的产品，框架用户一般只需要使用框架提供的类或函数，即可实现全部功能。可以说，框架是库的升级版。开发者在使用框架的时候，必须使用这个框架的全部代码。&lt;/li>
&lt;/ul>
&lt;p>库更像一个一个小的功能，比如使代码可以操作数据库这个功能，使代码可以监听在设备的某个端口上等等。&lt;/p>
&lt;p>而框架则更像一个还没完成的程序，只有一些大体框架，其中具体的内容，可以根据自己的喜好去填充，说白了，就是一种规范，只要根据这个规范，就可以实现自己的某个程序。比如想开发一个 web 程序，就可以使用一个 web 框架，这个框架会给开发者直接提供一个基本的后端，至于其中的内容，开发者再去详细填写就好了&lt;/p>
&lt;p>框架和库的比较可以想像为：假如我们要买一台电脑：电脑内的每个部件就是编程语言的一个个关键字&lt;/p>
&lt;ol>
&lt;li>框架为我们提供了已经装好的电脑，我们只要买回来就能用，但你必须把整个电脑买回来。这样用户自然轻松许多，但会导致很多人用一样的电脑，或你想自定义某个部件将需要修改这个框架。&lt;/li>
&lt;li>库就如自己组装的电脑。库为我们提供了很多部件，我们需要自己组装，如果某个部件库未提供，我们也可以自己做。库的使用非常灵活，但没有框架方便。&lt;/li>
&lt;/ol>
&lt;p>然后通过对库和框架的使用，可以使该电脑实现我们自己想要的功能，比如玩游戏、办公、看电影等等。&lt;/p>
&lt;p>程序开发中的框架(例如 1000 万+行的 Qt)往往是对常见功能的封装(类似于成语对常用含义的代指，不同点在于应用框架最终对 CPU 表达含义时候会把成语替换为原本含义-通过函数调用),抛开框架，程序会变得因缺少一些&amp;rsquo;固定成语&amp;rsquo;(函数)的&amp;rsquo;释义&amp;rsquo;(函数实现)而变得无法执行。&lt;/p>
&lt;p>所以，程序框架理解为基础或者机械标准件(例如螺丝螺母这些有明确标准的机械部件)更为贴切。&lt;/p>
&lt;p>这样理解，假如你要造一辆马车，在没有框架的情况下，你需要自己去伐木，去把木头做成木板，木棍，然后组成轮子，门，等部件，然后组装起来，但如果你用了框架，就相当于你有现成的轮子，门等部件，你只需要组装一下就可以了。&lt;/p>
&lt;p>可以说，一个框架是一个可复用的设计构件，它规定了应用的体系结构，阐明了整个设计、协作构件之间的依赖关系、责任分配和控制流程，表现为一组抽象类以及其实例之间协作的方法，它为构件复用提供了上下文(Context)关系。因此构件库的大规模重用也需要框架。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/cr7gm9/1616163790618-a4887423-a11b-4cfa-be93-a852be8c838f.jpeg" alt="">&lt;/p>
&lt;p>拓展资料：&lt;/p>
&lt;p>框架（Framework）是整个或部分系统的可重用设计，表现为一组抽象构件及构件实例间交互的方法;另一种定义认为，框架是可被应用开发者定制的应用骨架。前者是从应用方面而后者是从目的方面给出的定义。&lt;/p>
&lt;h2 id="例子">例子&lt;/h2>
&lt;p>拿 go 语言举例，当获取完一个第三方库之后(比如通过 go get 命令安装)，有时候会有一个命令行工具，比如 cobra，所以，也可以把库当做一个应用程序。而大部分时候，是不会出现一个命令行工具的，在获取完库之后，需要在 import 代码中进行引用，即可使用库中的相关函数。&lt;/p></description></item><item><title>Docs: 编程范式</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Category:Programming_paradigms">Wiki 分类，Programming paradigms(编程范式)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>下面这种你属于什么分类？&lt;/p>
&lt;ul>
&lt;li>Scripting language(脚本语言)
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Scripting_language">https://en.wikipedia.org/wiki/Scripting_language&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Compiled language(编译语言)
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Compiled_language">https://en.wikipedia.org/wiki/Compiled_language&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: 排序</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/%E6%8E%92%E5%BA%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/%E6%8E%92%E5%BA%8F/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>各种排序方法演示： &lt;a href="https://www.bilibili.com/video/BV1Tk4y1v7SJ">https://www.bilibili.com/video/BV1Tk4y1v7SJ&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Selection Sort(选择排序)&lt;/p>
&lt;p>Insertion Sort(插入排序)&lt;/p>
&lt;p>Quick Sort(LR prts)(快速排序)&lt;/p>
&lt;p>Merge Sort(归并排序)&lt;/p>
&lt;p>Heap Sort(堆排序)&lt;/p>
&lt;p>Radlx Sort(MSD 基数排序)&lt;/p>
&lt;p>std::sort()&lt;/p>
&lt;p>std::stable_sort()&lt;/p>
&lt;p>Shell Sort(希尔排序)&lt;/p>
&lt;p>Bubble Sort(冒泡排序)&lt;/p>
&lt;p>Gnome Sort()&lt;/p>
&lt;p>Bitnoic Sort&lt;/p>
&lt;p>Bogo Sort&lt;/p></description></item><item><title>Docs: MIT 开源许可证</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/MIT-%E5%BC%80%E6%BA%90%E8%AE%B8%E5%8F%AF%E8%AF%81/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/MIT-%E5%BC%80%E6%BA%90%E8%AE%B8%E5%8F%AF%E8%AF%81/</guid><description>
&lt;p>这一回终于把 MIT 协议讲明白了&lt;/p>
&lt;p>以下文章来源于微月人话 ，作者卫 sir&lt;/p>
&lt;p>微月人话&lt;/p>
&lt;p>简单而深入&lt;/p>
&lt;p>以前看到过李笑来讲的发生在他身上的故事，说他当年 ( 2001 年 ) 住在双榆树，经常去双安商场的地下超市买东西，有一次买了个什么东西觉得不好，要退，超市服务员说按规定，该类商品售出一概不能退，李笑来大怒，说你把书面规定拿出来，有的话我就不退了，如果没有，那我就一定要退，最后叫来了超市经理，经理一看这来者不善啊，也吵不过李笑来，就给退了。&lt;/p>
&lt;p>讲这个故事想说明什么呢，其实我们都明白，20 多年前的中国超市，很多管理规定都是口头上的，怎么会写成白纸黑字呢。&lt;/p>
&lt;p>从超市服务员的角度看，李笑来这行为就是捣乱，是胡搅蛮缠；李笑来则肯定觉得是在维护自己正当的消费者权益；最受震动的应该是超市管理层，如果是我，我会立刻要求起草一个关于退换货的规定，我可真不想再遇到下一个这样的人。&lt;/p>
&lt;p>这就是契约精神，说好的，都写下来，写下来的，我都认。&lt;/p>
&lt;p>现在说 MIT 协议。&lt;/p>
&lt;p>MIT 协议就是大名鼎鼎的开源软件许可协议 The MIT License，又称 MIT 许可证。&lt;/p>
&lt;p>有人在两年前专门做过分析 1，MIT 是 Github 上使用率最高的许可证，第二名到第五名是 Apache 2.0、GPL 2.0、GPL 3.0 和 bsd-3-clause。&lt;/p>
&lt;p>注：本文中，“MIT 协议”和“MIT 许可证”等同。&lt;/p>
&lt;p>什么是开源许可证？&lt;/p>
&lt;p>开源许可证是这样的，我把源码放网上了，如果还不错，就有很多人问我了，说你那个代码能不能让我用用？你那个代码我能不能放在我的产品里啊？你那个代码我用了，怎么那么多 Bug 啊？你那个代码我想当作教学案例使用，请问是不是可以啊？还有，你那个代码我用了，感觉不错，而且我还改了很多地方，我也把它放网上了，而且我还改了个名，你没有意见吧？你有意见我也准备改名了，因为现在这个软件中，我写的代码，比你写的多多了！&lt;/p>
&lt;p>（这都是比较有版权意识的，怕不问你就用以后惹上官司。）&lt;/p>
&lt;p>我可懒得回答这么多问题，我把这些可能问到的问题，都写成一段话，放在我的代码里，意思就是说：&lt;/p>
&lt;p>我允许你们 XXX，我许可你们 XXXX，你们可以 XXXX，但是，你们必须 XXXX，如果你们 XXXX 了，你们就必须 XXXX，对了，对于 XXXX 这些情况，我可不负责。&lt;/p>
&lt;p>你要同意，就用，不同意就别用。如果你用了，但违反了许可证的要求，我可能会告你啊！&lt;/p>
&lt;p>这就是许可证。&lt;/p>
&lt;p>你可以自己写一个许可证，但是如果你很懒的话 ( 一般人都很懒 ) ，你可以用别人写的比较好的许可证。&lt;/p>
&lt;p>写的比较好的开源许可证有很多种，比如 GPL、BSD、MIT、Apache 等等，MIT 只是其中的一个。&lt;/p>
&lt;p>你可以挑一个合你胃口的，这些许可证模版都是免费的，毕竟也没人指望这个卖钱。&lt;/p>
&lt;p>至于它们的区别，可以看看下面这张图接受一下科普。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/tamq2d/1616161654522-76d7d7b6-c4cd-4bbc-87b4-835c7eb24fcb.jpeg" alt="">&lt;/p>
&lt;p>“新蜂商城”事件&lt;/p>
&lt;p>前段时间有一个叫做“新蜂商城”（简称“新蜂”）的开源项目有点新闻，它使用了 MIT 许可证，其作者被人告知说，哎，你的开源软件被人在网上卖哎，你不管管吗？&lt;/p>
&lt;p>作者一看，还真是，有 up 主在 b 站上卖，有人在闲鱼上卖，虽然卖的也不贵，有卖 300 的，有卖几十的，但一眼望过去，很显然卖的就是自己的“新蜂”嘛！&lt;/p>
&lt;p>具体可以戳这里 -&amp;gt; ……这是什么骚操作&lt;/p>
&lt;p>然后就有点热闹，有人说这是侵权，要声援作者，控诉有人如此无耻；有人说这不算侵权，MIT 是很宽松的协议，基本上你什么都可以干，只要保留作者版权即可。&lt;/p>
&lt;p>作者倒是没有想去怎么处理，作者只是觉得“我抽出下班时间，断断续续写了半年的项目，不是心血也算是我的小作品吧，开源出去就是给你这么玩的？佩服。”&lt;/p>
&lt;p>大概作者还是比较年轻，不懂人世间的险恶吧！&lt;/p>
&lt;p>其实这应该是预料中的事。&lt;/p>
&lt;p>不应该有任何心理波澜。&lt;/p>
&lt;p>更何况，MIT 许可证，允许别人卖你的源码！&lt;/p>
&lt;p>从契约精神讲，说好允许别人做，就让别人做吧。&lt;/p>
&lt;p>这里面有个新手不太能想明白的问题，为啥有许可证允许别人卖自己的开源软件？&lt;/p>
&lt;p>这要谈到开源的精神了，还没有一点概念的读者可以先看看这篇：开源的 7 大理念&lt;/p>
&lt;p>早期玩开源的人，开源自己的代码，大多不是为了卖软件，大多都有着开放、共享、自由、打破垄断等等比较理想化的情结，唯一可图的大概也就是个“名”，所以几乎所有许可证都要求保留作者名字。&lt;/p>
&lt;p>为了更好地传播自己的代码，开源作者通常允许别人卖自己的源码。初期会考虑这样的情况：如果有人把 Linux 源码刻录成光盘发放，是不是应该收点成本费呢，再或者服务费？&lt;/p>
&lt;p>那如果有人以此牟取暴利呢，岂不是很亏？通常不会。因为既然能在网上免费下载源码，明白人就不会再去花大价钱去买。&lt;/p>
&lt;p>而且，如果作者发现真有人能使用自己的源码牟取暴利，完全可以不授权让他从中牟利，改许可证就可以了。这种事也不是没有发生过，而且还不是个例。参见开源公司被云厂商“寄生”，咋整？&lt;/p>
&lt;p>比如开源云原生 SQL 数据库 CockroachDB 宣布修改开源协议，从原本的 Apache-2.0 协议修改为 BSL ( Business Source License ) ，该协议要求用户唯一不能做的是在没有取得授权的情况下以商业形式用 CockroachDB 提供数据库即服务 ( DBaaS ) 。&lt;/p>
&lt;p>BSL 由 MySQL 的开发者迈克尔·蒙蒂·维德纽斯 ( Michael &amp;ldquo;Monty&amp;rdquo; Widenius ) 在 2013 年设计。它有三个主要特点，一是非商业性使用没有限制，商业性使用有限制；二是许可证中可以附加使用者自己的要求；三是有一个 change date，自此时间开始，源码将会由 BSL 转变为作者指定的其他许可证，如 GPL 等开源许可证。&lt;/p>
&lt;p>依我看，闲鱼上把“新蜂”卖个几十块钱，还搭上售后服务，也算正常吧。&lt;/p>
&lt;p>MIT 到底说了什么 ( 学英语！)&lt;/p>
&lt;p>先看原文：&lt;/p>
&lt;p>Copyright ( C )&lt;/p>
&lt;p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files ( the &amp;ldquo;Software&amp;rdquo; ) , to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p>
&lt;p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p>
&lt;p>THE SOFTWARE IS PROVIDED &amp;ldquo;AS IS&amp;rdquo;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p>
&lt;p>英语不好的直接晕倒！&lt;/p>
&lt;p>英语就算还可以的，想弄明白，也得看好一阵！&lt;/p>
&lt;p>剖析其句子结构，其实就是下面这样的，注意放在括号里面的，都不是句子的主干成分：&lt;/p>
&lt;p>第一段：&lt;/p>
&lt;p>Permission is ( hereby ) granted ( , free of charge, ) to any person ( obtaining a copy of ( this software and associated documentation files ( the &amp;ldquo;Software” ) ) ) , to deal in the Software without restriction, ( including without limitation the rights ( to use, copy, modify, merge, publish, distribute, sublicense, ( and/or ) sell copies of the Software, and to permit persons ( to whom the Software is furnished ) to do so ) ) , subject to the following conditions:&lt;/p>
&lt;p>其大致意思就是：只要满足以下条件，许可被赋予任何 ( 获得本软件拷贝及相关文档的 ) 人 ，这些人可以免费地、没有限制地处理本软件 ( 包括随意地使用、拷贝、合并、发布、分发、再许可、卖拷贝，以及再授权其他人 ( 那些被装配了本软件的 ) 做上面说的这些事 ) 。&lt;/p>
&lt;p>注意，and to permit persons 这里的 to permit，是和 to use，to copy 并列的，后面那个 to do so，则是指代前面的的一系列权利，to whom the Software is furnished 是修饰 persons 的，指的是被装配、被配发本软件的人。&lt;/p>
&lt;p>再有一点比较有趣的是，这一长段被许可的选项中，后面出现了个 and/or。&lt;/p>
&lt;p>and/or 一般用于连接两个选项，比如 A and/or B，意思就是说 A or B or both。这段文字中，虽然 and/or 只连接最后两个选项，但其用意似乎却是连接所有。比如：A, B, C, D and/or E，想表达的是：A and/or B and/or C and/or D and/or E，意思就是 A、B、C、D、E 这些选项可以任意组合选用。这个写法貌似严谨，实则多余。因为没有它完全不影响对文本意思的理解，有了它反而还增加了疑惑。（在文学上或是法律用语上，对 and/or 用法的批评都比较多 2。）&lt;/p>
&lt;p>第二段：&lt;/p>
&lt;p>The above copyright notice and this permission notice shall be included ( in all ( copies or substantial portions ) of the Software ) .&lt;/p>
&lt;p>上面这句翻译过来就是：以上版权声明和许可声明都必须包含 ( 在所有的本软件的完整拷贝或者实质性成分中 ) 。所谓实质性成分，可以这样理解，比如你对这个软件做了修改，但只改了 5%，那么版权声明和许可证声明都必须包含，如果你改了 95%，那就未必需要了，具体多少需要，要看是不是实质上 ( substantially ) 仍然是人家的。&lt;/p>
&lt;p>第三段：&lt;/p>
&lt;p>THE SOFTWARE IS PROVIDED &amp;ldquo;AS IS”, ( WITHOUT WARRANTY OF ANY KIND ( , EXPRESS OR IMPLIED, ) ( INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. ) ） IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE ( FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, ( WHETHER ( IN AN ACTION OF CONTRACT, TORT ) OR OTHERWISE ( , ARISING FROM, OUT OF OR IN CONNECTION WITH ( THE SOFTWARE OR ( ( THE USE OR OTHER DEALINGS ) IN THE SOFTWARE. ) ) ) ) )&lt;/p>
&lt;p>这段话，主要是说本软件是“AS IS”的，“AS IS”的意思就是“就这样的”，售出 ( 或免费提供 ) 后一概不负任何责任，“别再找我，就这样了”。有任何问题你就接受或者自己想办法处理吧，反正我这里不再管了，就是这个意思。有时候我在“闲鱼”上卖二手东西的时候，也真的想加一个标识“AS IS”，但是考虑到很多人不知道这个词，也就算了。&lt;/p>
&lt;p>上面这段全大写的英文很长，但还好，不算很难，基本上就是：本软件是 AS IS 的 ( 不提供任何保证， ( 不管是显式的还是隐式的，包括但不限于适销性保证、适用性保证、非侵权性保证 ) ) ，在任何情况下， ( 对于任何的权益追索、损失赔偿或者任何追责 ) ，作者或者版权所有人都不会负责。( 无论这些追责产生自合同、侵权，还是直接或间接来自于本软件以及与本软件使用或经营有关的情形 )&lt;/p>
&lt;p>适销性 ( MERCHANTABILITY ) 就是说商品一旦售出 ( 虽然可能是免费的 ) ，如果确有问题，就可以退换货，一般来说适销性是缺省的保证 ( 即便没有明示 ) ，法律会支持消费者对不合格产品的退换货权利 3。但对于 AS IS 这类商品而言，就是说你觉得不好使也别找我。你觉得根本没法用 ( FITNESS FOR A PARTICULAR PURPOSE ) 也别找我，而且我也不保证我这软件是不是侵权了。&lt;/p>
&lt;p>MIT 协议用了几乎一半的篇幅来说这个，足以见其重要性，这是西方人很强的商品经济意识和法律意识导致的。&lt;/p>
&lt;p>这是一种撇清关系的态度，就是说，出了什么事都别找我，更别去法院告我。我给你们贡献源码，可不是想给自己找麻烦的，我又不挣你们的钱。&lt;/p>
&lt;p>试想一下，如果在一个医疗设备的软件中，使用了“本软件”，结果由于 bug 导致医疗事故，结果追查下来，还要找我麻烦，那我怎么受得了！&lt;/p>
&lt;p>把这个 license 里所有的主干挑出来，其实就是：&lt;/p>
&lt;p>Permission is granted to any person to deal in the Software without restriction，subject to the following conditions:&lt;/p>
&lt;p>The above copyright notice and this permission notice shall be included.&lt;/p>
&lt;p>THE SOFTWARE IS PROVIDED &amp;ldquo;AS IS&amp;rdquo;, IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE.&lt;/p>
&lt;p>全文翻译过来，大约是这样，下面译版的版权归我哦：&lt;/p>
&lt;p>MIT 开源许可协议 ( 中文版翻译：卫 sir，遵循：CC-BY 协议 )&lt;/p>
&lt;p>版权 ( C ) &amp;lt;这里填年份&amp;gt; &amp;lt;这里填版权者姓名&amp;gt;&lt;/p>
&lt;p>特此向任何得到本软件拷贝及相关文档 ( 以下统称“本软件” ) 的人授权：被授权人有权使用、复制、修改、合并、发布、发行、再许可、售卖本软件拷贝、并有权向被供应人授予同等的权利，但必须满足以下条件：&lt;/p>
&lt;p>在本软件的所有副本或实质性使用中，都必须包含以上版权声明和本授权声明。&lt;/p>
&lt;p>本软件是“按原样“提供的，不附带任何明示或暗示的保证，包括没有任何有关适销性、适用性、非侵权性保证以及其他保证。在任何情况下，作者或版权持有人，对任何权益追索、损害赔偿以及其他追责，都不负任何责任。无论这些追责产生自合同、侵权，还是直接或间接来自于本软件以及与本软件使用或经营有关的情形。&lt;/p>
&lt;p>翻译成大白话缩略版，大约是下面这样的：&lt;/p>
&lt;p>版权是我 XXX 的，源自 XXXX 这一年！&lt;/p>
&lt;p>我授权任何人，可以干任何事，包括卖拷贝！&lt;/p>
&lt;p>但是，你必须：&lt;/p>
&lt;p>保留我的版权和许可！&lt;/p>
&lt;p>这软件就这样的！爱用不用，出了事别找我！&lt;/p>
&lt;p>我怎么用人家代码才算合规？&lt;/p>
&lt;p>使用一个用了 MIT 协议的源代码，你只需要保留人家的版权和许可证信息即可。&lt;/p>
&lt;p>也就是说要包含 LICENSE 文件，这个文件有完整的 MIT 许可证，其中也会有作者的版权信息。&lt;/p>
&lt;p>人家源码里面的版权和许可信息头，你也得保留。&lt;/p>
&lt;p>由于 MIT 协议并不要求使用者公开源码，如果你发行的仅仅是可执行软件（不带源码），那就要在软件的某个界面上说明。&lt;/p>
&lt;p>比如 Google Chrome 浏览器使用很多开源软件，在其界面中都予以了明示。&lt;/p>
&lt;p>在 Chrome 浏览器的“关于”中，有一句话：“Google Chrome 的诞生离不开 Chromium 开源项目以及其他开源软件。”&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/tamq2d/1616161654514-af86080c-b38d-410b-87da-382264e29ef2.jpeg" alt="">&lt;/p>
&lt;p>点击“开源软件”，会打开一个页面，列出了一长串的开源软件、其 LICENSE 和主页（或代码托管地）。&lt;/p>
&lt;p>下面是部分截图：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/tamq2d/1616161654516-35908e7c-5b5c-4806-8bc9-0563ea70d0e9.jpeg" alt="">&lt;/p>
&lt;p>这就很规范了。&lt;/p>
&lt;p>我在里面随便找个一个使用 MIT 协议的软件：brotli&lt;/p>
&lt;p>进入其代码仓库后，可以看到其源码头部是这么写的。&lt;/p>
&lt;p>/* Copyright 2013 Google Inc. All Rights Reserved.&lt;/p>
&lt;p>Distributed under MIT license.&lt;/p>
&lt;p>See file LICENSE for detail or copy at &lt;a href="https://opensource.org/licenses/MIT">https://opensource.org/licenses/MIT&lt;/a>&lt;/p>
&lt;p>*/&lt;/p>
&lt;p>截图如下：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/tamq2d/1616161654546-2a9951cc-1854-40fc-ab21-8a040710fcfa.jpeg" alt="">&lt;/p>
&lt;p>注意这个用法，第一行是写明了版权，下面则是对 MIT 许可证的一个引用。这样显得比较简洁。&lt;/p>
&lt;p>毕竟 MIT 许可证中唯一需要填写的就是版权。所以把第一句的信息放这里就可以了，MIT 许可证就不用动了。&lt;/p>
&lt;p>注意版权是指这个软件的著作权是谁的，许可证是指版权所有者允许别人怎么用这个软件。&lt;/p>
&lt;p>版权后面那句“All Rights Reserved”写不写都可以，这只是一个形式。真打到法院去，所有的权利都遵循著作权相关法律。&lt;/p>
&lt;p>顺便解释一下版权中的年份概念：&lt;/p>
&lt;p>软件在发布时都会声明版权，其中会包含年份，比如 Copyright 2012， Copyright 2008-2012 等。如果只包含一个年份，说明这是首次发布的年份。如果包含时间段，则第一个年份为第一次发布的年份，第二个是当前版本发布的年份。&lt;/p>
&lt;p>比如微软的 Windows XP 版权声明：Copyright© 1985-2001 Microsoft Corp。说明 Windows 第一个版本发布在 1985 年，Windows XP 版本发布年份为 2001 年。&lt;/p>
&lt;p>我是作者，我如何使用 MIT 协议&lt;/p>
&lt;p>如果我的开源软件要使用 MIT 协议，我应该怎么做？&lt;/p>
&lt;p>通常应该这么做：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>在一级目录下，给出一个 LICENSE（或 COPYING）文件，里面就是这个许可证的全文。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在所有的源码头部，说明版权，说明许可。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>注：有的项目使用了多个许可证，会建一个 licenses 目录放这些许可证。（比如 cockroachdb）&lt;/p>
&lt;p>版权那一行，你还可以写上你软件的主页或者代码存放地，一般来说，使用者都不应该删除这行内容的。&lt;/p>
&lt;p>举个例子，“木兰许可证”是这样指导人们使用的：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/tamq2d/1616161654557-38671027-cd5b-405c-8ac4-7daac1cc0b96.jpeg" alt="">&lt;/p>
&lt;p>那么，“新蜂”是怎么做的？&lt;/p>
&lt;p>我专门去“新蜂”的 github 仓库看了一眼，没错，作者在一级目录下放了 LICENSE 文件。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/tamq2d/1616161654543-b5460bf5-e188-422f-ac69-9e867e9216bb.jpeg" alt="">&lt;/p>
&lt;p>打开 LICENSE 文件，可以看到：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/tamq2d/1616161654557-3d9aa8cf-b207-4ac5-a2fd-fd8a04c0fd9c.jpeg" alt="">&lt;/p>
&lt;p>年份写成了 2019-2029，版权所有人写成了 newbee-mall。&lt;/p>
&lt;p>这是需要改进的，年份不应该写到 2029 去，应该写到当前版本发布的年份。&lt;/p>
&lt;p>版权所有人应该写作者“十三”（或“13”）而不是软件的名字。&lt;/p>
&lt;p>看看源码里面是怎么写的：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/tamq2d/1616161654547-b5472820-8f0a-431b-ac22-f5dec273610f.jpeg" alt="">&lt;/p>
&lt;p>翻了一遍，没有发现在任何源码的头部有版权和许可信息，这个做法也不规范。&lt;/p>
&lt;p>可见，作者十三对开源许可证并没有研究过。&lt;/p>
&lt;p>一些问题解答&lt;/p>
&lt;p>我能改许可证吗？ 当然可以。（MIT 允许你干任何事）&lt;/p>
&lt;p>所以说，MIT 协议和其他协议的兼容性很强（其实是单向兼容），比如，完全可以把一个 MIT 协议的软件改为 GPL 的，但一个 GPL 的可改不回 MIT 的。&lt;/p>
&lt;p>我能自己写一个许可证吗？ 当然可以。&lt;/p>
&lt;p>我能不写任何许可吗？ 当然可以，不写许可，就是“保留所有权利”。你可以让他们打电话问你，写邮件问你，发微信问你，你再告诉他们可以干什么。&lt;/p>
&lt;p>保留许可的意思基本上就是说，他们除了可以看你的源码 ( 因为你自己把它开源了 ) ，除了著作权法里面说的权利，基本上啥也不能干。&lt;/p>
&lt;p>如果我保留所有权利，那他有运行的权利吗？ 如果他是为了学习、研究或者欣赏，是可以运行的。&lt;/p>
&lt;p>他还可以评论您的软件。&lt;/p>
&lt;p>因为我国著作权法赋予了他这样的权利：&lt;/p>
&lt;p>现行的中华人民共和国著作权法 ( 2010 修正 ) 第二十二条中规定：&lt;/p>
&lt;p>在下列情况下使用作品，可以不经著作权人许可，不向其支付报酬，但应当指明作者姓名、作品名称，并且不得侵犯著作权人依照本法享有的其他权利：&lt;/p>
&lt;p>( 一 ) 为个人学习、研究或者欣赏，使用他人已经发表的作品；&lt;/p>
&lt;p>( 二 ) 为介绍、评论某一作品或者说明某一问题，在作品中适当引用他人已经发表的作品；&lt;/p>
&lt;p>……&lt;/p>
&lt;p>如果有人没有按照我的许可做，怎么办？ 你可以告他。&lt;/p>
&lt;p>不过，能不能打赢官司又是另一个话题了！&lt;/p>
&lt;hr>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="https://www.kaggle.com/mrisdal/safely-analyzing-github-projects-popular-licenses">https://www.kaggle.com/mrisdal/safely-analyzing-github-projects-popular-licenses&lt;/a> ↩&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/And/or">https://en.wikipedia.org/wiki/And/or&lt;/a> ↩&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://consumer.findlaw.com/consumer-transactions/what-is-the-warranty-of-merchantability.html">https://consumer.findlaw.com/consumer-transactions/what-is-the-warranty-of-merchantability.html&lt;/a> ↩&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>推荐阅读&lt;/p>
&lt;p>树莓派销量突然猛增&lt;/p>
&lt;p>80%的代码曾由一人提交，这项目何以从 ASF 毕业&lt;/p>
&lt;p>红帽借“订阅”模式成开源一哥，首创者升任总裁&lt;/p>
&lt;p>Git 15 周年：当年的分道扬镳，成就了今天的开源传奇&lt;/p>
&lt;p>Windows 中现在有独立的 Linux 文件夹系统&lt;/p></description></item><item><title>Docs: ORM</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/ORM/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/ORM/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Object%E2%80%93relational_mapping">Wiki，Object–relational mapping&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://c.biancheng.net/hibernate/orm.html">C 语言中文网，ORM 是什么&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.bilibili.com/read/cv21943763">B 站-哔哩哔哩技术，如何用 go 实现一个 ORM（为什么需要 ORM）&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Object Relational Mapping(对象关系映射，简称 ORM)&lt;/strong> 是一种用于在关系数据库和面向对象变成语言之间转换数据的编程技术。解决了代码和关系型数据库之间的数据交互问题。这实际上创建了一个可以在编程语言中使用的虚拟对象数据库。&lt;/p>
&lt;h2 id="为什么需要-orm">为什么需要 ORM&lt;/h2>
&lt;p>&lt;strong>直接使用 database/sql 的痛点：&lt;/strong>&lt;/p>
&lt;p>首先看看用 database/sql 如何查询数据库。&lt;/p>
&lt;p>我们用 user 表来做例子，一般的工作流程是先做技术方案，其中排在比较前面的是数据库表的设计，大部分公司应该有严格的数据库权限控制，不会给线上程序使用比较危险的操作权限，比如创建删除数据库，表，删除数据等。
表结构如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">CREATE&lt;/span> &lt;span style="color:#66d9ef">TABLE&lt;/span> &lt;span style="color:#f92672">`&lt;/span>&lt;span style="color:#66d9ef">user&lt;/span>&lt;span style="color:#f92672">`&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">`&lt;/span>id&lt;span style="color:#f92672">`&lt;/span> int(&lt;span style="color:#ae81ff">10&lt;/span>) unsigned &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span> AUTO_INCREMENT &lt;span style="color:#66d9ef">COMMENT&lt;/span> &lt;span style="color:#e6db74">&amp;#39;id&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">`&lt;/span>name&lt;span style="color:#f92672">`&lt;/span> varchar(&lt;span style="color:#ae81ff">100&lt;/span>) &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span> &lt;span style="color:#66d9ef">COMMENT&lt;/span> &lt;span style="color:#e6db74">&amp;#39;名称&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">`&lt;/span>age&lt;span style="color:#f92672">`&lt;/span> int(&lt;span style="color:#ae81ff">11&lt;/span>) &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span> &lt;span style="color:#66d9ef">DEFAULT&lt;/span> &lt;span style="color:#e6db74">&amp;#39;0&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">COMMENT&lt;/span> &lt;span style="color:#e6db74">&amp;#39;年龄&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">`&lt;/span>ctime&lt;span style="color:#f92672">`&lt;/span> datetime &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span> &lt;span style="color:#66d9ef">DEFAULT&lt;/span> &lt;span style="color:#66d9ef">CURRENT_TIMESTAMP&lt;/span> &lt;span style="color:#66d9ef">COMMENT&lt;/span> &lt;span style="color:#e6db74">&amp;#39;创建时间&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">`&lt;/span>mtime&lt;span style="color:#f92672">`&lt;/span> datetime &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span> &lt;span style="color:#66d9ef">DEFAULT&lt;/span> &lt;span style="color:#66d9ef">CURRENT_TIMESTAMP&lt;/span> &lt;span style="color:#66d9ef">COMMENT&lt;/span> &lt;span style="color:#e6db74">&amp;#39;更新时间&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">PRIMARY&lt;/span> &lt;span style="color:#66d9ef">KEY&lt;/span> (&lt;span style="color:#f92672">`&lt;/span>id&lt;span style="color:#f92672">`&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>) ENGINE&lt;span style="color:#f92672">=&lt;/span>InnoDB &lt;span style="color:#66d9ef">DEFAULT&lt;/span> CHARSET&lt;span style="color:#f92672">=&lt;/span>utf8mb4
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>首先我们要写出和表结构对应的结构体 User，如果你足够勤奋和努力，相应的 json tag 和注释都可以写上，这个过程无聊且重复，因为在设计表结构的时候你已经写过一遍了。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">User&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Id&lt;/span> &lt;span style="color:#66d9ef">int64&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;id&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Name&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;name&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Age&lt;/span> &lt;span style="color:#66d9ef">int64&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Ctime&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Time&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Mtime&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Time&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>定义好结构体，我们写一个查询年龄在 20 以下且按照 id 字段顺序排序的前 20 名用户的 go 代码&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">FindUsers&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>) ([]&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">User&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">rows&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">QueryContext&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;SELECT `id`,`name`,`age`,`ctime`,`mtime` FROM user WHERE `age`&amp;lt;? ORDER BY `id` LIMIT 20 &amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">20&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">rows&lt;/span>.&lt;span style="color:#a6e22e">Close&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> []&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">User&lt;/span>{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">rows&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">User&lt;/span>{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">rows&lt;/span>.&lt;span style="color:#a6e22e">Scan&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">a&lt;/span>.&lt;span style="color:#a6e22e">Id&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">a&lt;/span>.&lt;span style="color:#a6e22e">Name&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">a&lt;/span>.&lt;span style="color:#a6e22e">Age&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">a&lt;/span>.&lt;span style="color:#a6e22e">Ctime&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">a&lt;/span>.&lt;span style="color:#a6e22e">Mtime&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">result&lt;/span> = append(&lt;span style="color:#a6e22e">result&lt;/span>, &lt;span style="color:#a6e22e">a&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">rows&lt;/span>.&lt;span style="color:#a6e22e">Err&lt;/span>() &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">rows&lt;/span>.&lt;span style="color:#a6e22e">Err&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>当我们写少量这样的代码的时候我们可能还觉得轻松，但是当你业务工期排的很紧，并且要写大量的定制化查询的时候，这样的重复代码会越来越多。
上面的的代码我们发现有这么几个问题：&lt;/p>
&lt;ol>
&lt;li>SQL 语句是硬编码在程序里面的，当我需要增加查询条件的时候我需要另外再写一个方法，整个方法需要拷贝一份，很不灵活。&lt;/li>
&lt;li>在查询表所有字段的情况下，第 2 行下面的代码都是一样重复的，不管 sql 语句后面的条件是怎么样的。&lt;/li>
&lt;li>我们发现第 1 行 SQL 语句编写和 rows.Scan()那行，写的枯燥层度是和表字段的数量成正比的，如果一个表有 50 个字段或者 100 个字段，手写是非常乏味的。&lt;/li>
&lt;li>在开发过程中 rows.Close()  和 rows.Err()忘记写是常见的错误。&lt;/li>
&lt;/ol>
&lt;p>我们总结出来用 database/sql 标准库开发的痛点：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>开发效率很低&lt;/strong>
&lt;ul>
&lt;li>很显然写上面的那种代码是很耗费时间的，因为手误容易写错，无可避免要增加自测的时间。如果上面的结构体 User、 查询方法 FindUsers()  代码能够自动生成，那么那将会极大的提高开发效率并且减少 human error 的发生从而提高开发质量。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>心智负担很重&lt;/strong>
&lt;ul>
&lt;li>如果一个开发人员把大量的时间花在这些代码上，那么他其实是在浪费自己的时间，不管在工作中还是在个人项目中，应该把重点花在架构设计，业务逻辑设计，困难点攻坚上面，去探索和开拓自己没有经验的领域，这块 Dao 层的代码最好在 10 分钟内完成。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="orm-实例教程">ORM 实例教程&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://www.ruanyifeng.com/blog/2019/02/orm-tutorial.html">阮一峰，ORM 实例教程&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="一概述">一、概述&lt;/h2>
&lt;p>面向对象编程和关系型数据库，都是目前最流行的技术，但是它们的模型是不一样的。&lt;/p>
&lt;p>面向对象编程把所有实体看成对象（object），关系型数据库则是采用实体之间的关系（relation）连接数据。很早就有人提出，关系也可以用对象表达，这样的话，就能使用面向对象编程，来操作关系型数据库。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/d1eab7a7-0bbc-41e6-bde2-aa8c6027347f/bg2019021802.png" alt="">
&lt;strong>简单说，ORM 就是通过实例对象的语法，完成关系型数据库的操作的技术，是&amp;quot;对象-关系映射&amp;quot;（Object/Relational Mapping） 的缩写。&lt;/strong>&lt;/p>
&lt;p>ORM 把数据库映射成对象：&lt;/p>
&lt;ul>
&lt;li>数据库的表（table） &amp;ndash;&amp;gt; 类（class）&lt;/li>
&lt;li>记录（record，行数据）&amp;ndash;&amp;gt; 对象（object）&lt;/li>
&lt;li>字段（field）&amp;ndash;&amp;gt; 对象的属性（attribute）&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/d1eab7a7-0bbc-41e6-bde2-aa8c6027347f/bg2019021803.png" alt="">&lt;/p>
&lt;p>举例来说，下面是一行 SQL 语句。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">SELECT&lt;/span> id, first_name, last_name, phone, birth_date, sex
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">FROM&lt;/span> persons
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">WHERE&lt;/span> id &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>程序直接运行 SQL，操作数据库的写法如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">res&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">execSql&lt;/span>(&lt;span style="color:#a6e22e">sql&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">res&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>][&lt;span style="color:#e6db74">&amp;#34;FIRST_NAME&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>改成 ORM 的写法如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">Person&lt;/span>.&lt;span style="color:#a6e22e">get&lt;/span>(&lt;span style="color:#ae81ff">10&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">first_name&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>一比较就可以发现，ORM 使用对象，封装了数据库操作，因此可以不碰 SQL 语言。开发者只使用面向对象编程，与数据对象直接交互，不用关心底层数据库。&lt;/p>
&lt;p>总结起来，ORM 有下面这些优点。&lt;/p>
&lt;ul>
&lt;li>数据模型都在一个地方定义，更容易更新和维护，也利于重用代码。&lt;/li>
&lt;li>ORM 有现成的工具，很多功能都可以自动完成，比如数据消毒、预处理、事务等等。&lt;/li>
&lt;li>它迫使你使用 MVC 架构，ORM 就是天然的 Model，最终使代码更清晰。&lt;/li>
&lt;li>基于 ORM 的业务代码比较简单，代码量少，语义性好，容易理解。&lt;/li>
&lt;li>你不必编写性能不佳的 SQL。&lt;/li>
&lt;/ul>
&lt;p>但是，ORM 也有很突出的缺点。&lt;/p>
&lt;ul>
&lt;li>ORM 库不是轻量级工具，需要花很多精力学习和设置。&lt;/li>
&lt;li>对于复杂的查询，ORM 要么是无法表达，要么是性能不如原生的 SQL。&lt;/li>
&lt;li>ORM 抽象掉了数据库层，开发者无法了解底层的数据库操作，也无法定制一些特殊的 SQL。&lt;/li>
&lt;/ul>
&lt;h2 id="二命名规定">二、命名规定&lt;/h2>
&lt;p>许多语言都有自己的 ORM 库，最典型、最规范的实现公认是 Ruby 语言的 &lt;a href="https://guides.rubyonrails.org/active_record_basics.html">Active Record&lt;/a>。Active Record 对于对象和数据库表的映射，有一些命名限制。&lt;/p>
&lt;p>（1）一个类对应一张表。类名是单数，且首字母大写；表名是复数，且全部是小写。比如，表&lt;code>books&lt;/code>对应类&lt;code>Book&lt;/code>。&lt;/p>
&lt;p>（2）如果名字是不规则复数，则类名依照英语习惯命名，比如，表&lt;code>mice&lt;/code>对应类&lt;code>Mouse&lt;/code>，表&lt;code>people&lt;/code>对应类&lt;code>Person&lt;/code>。&lt;/p>
&lt;p>（3）如果名字包含多个单词，那么类名使用首字母全部大写的骆驼拼写法，而表名使用下划线分隔的小写单词。比如，表&lt;code>book_clubs&lt;/code>对应类&lt;code>BookClub&lt;/code>，表&lt;code>line_items&lt;/code>对应类&lt;code>LineItem&lt;/code>。&lt;/p>
&lt;p>（4）每个表都必须有一个主键字段，通常是叫做&lt;code>id&lt;/code>的整数字段。外键字段名约定为单数的表名 + 下划线 + id，比如&lt;code>item_id&lt;/code>表示该字段对应&lt;code>items&lt;/code>表的&lt;code>id&lt;/code>字段。&lt;/p>
&lt;h2 id="三示例库">三、示例库&lt;/h2>
&lt;p>下面使用 &lt;a href="https://github.com/PhilWaldmann/openrecord">OpenRecord&lt;/a> 这个库，演示如何使用 ORM。&lt;/p>
&lt;p>OpenRecord 是仿 Active Record 的，将其移植到了 JavaScript，而且实现得很轻量级，学习成本较低。我写了一个&lt;a href="https://github.com/ruanyf/openrecord-demos">示例库&lt;/a>，请将它克隆到本地。&lt;/p>
&lt;p>git clone &lt;a href="https://github.com/ruanyf/openrecord-demos.git">https://github.com/ruanyf/openrecord-demos.git&lt;/a>&lt;/p>
&lt;p>然后，安装依赖。&lt;/p>
&lt;p>cd openrecord-demos
npm install&lt;/p>
&lt;p>示例库里面的数据库，是从&lt;a href="http://www.sqlitetutorial.net/sqlite-sample-database/">网上拷贝&lt;/a>的 Sqlite 数据库。它的 Schema 图如下（&lt;a href="http://www.sqlitetutorial.net/wp-content/uploads/2018/03/sqlite-sample-database-diagram-color.pdf">PDF&lt;/a> 大图下载）。&lt;/p>
&lt;p>&lt;a href="https://notes-learning.oss-cn-beijing.aliyuncs.com/d1eab7a7-0bbc-41e6-bde2-aa8c6027347f/bg2019021804.jpg">
&lt;/a>&lt;/p>
&lt;h2 id="四连接数据库">四、连接数据库&lt;/h2>
&lt;p>使用 ORM 的第一步，就是你必须告诉它，怎么连接数据库（&lt;a href="https://github.com/ruanyf/openrecord-demos/blob/master/demos/demo01.js">完整代码&lt;/a>看这里）。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// demo01.js
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">Store&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">require&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;openrecord/store/sqlite3&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">store&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Store&lt;/span>({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;sqlite3&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">file&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./db/sample.db&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">autoLoad&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">store&lt;/span>.&lt;span style="color:#a6e22e">connect&lt;/span>();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>连接成功以后，就可以操作数据库了。&lt;/p>
&lt;h2 id="五model">五、Model&lt;/h2>
&lt;h3 id="51-创建-model">5.1 创建 Model&lt;/h3>
&lt;p>连接数据库以后，下一步就要把数据库的表，转成一个类，叫做数据模型（Model）。下面就是一个最简单的 Model（&lt;a href="https://github.com/ruanyf/openrecord-demos/blob/master/demos/demo02.js">完整代码&lt;/a>看这里）。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// demo02.js
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Customer&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> &lt;span style="color:#a6e22e">Store&lt;/span>.&lt;span style="color:#a6e22e">BaseModel&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">store&lt;/span>.&lt;span style="color:#a6e22e">Model&lt;/span>(&lt;span style="color:#a6e22e">Customer&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面代码新建了一个&lt;code>Customer&lt;/code>类，ORM（OpenRecord）会自动将它映射到&lt;code>customers&lt;/code>表。使用这个类就很简单。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// demo02.js
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">customer&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">Customer&lt;/span>.&lt;span style="color:#a6e22e">find&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">customer&lt;/span>.&lt;span style="color:#a6e22e">FirstName&lt;/span>, &lt;span style="color:#a6e22e">customer&lt;/span>.&lt;span style="color:#a6e22e">LastName&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面代码中，查询数据使用的是 ORM 提供的&lt;code>find()&lt;/code>方法，而不是直接操作 SQL。&lt;code>Customer.find(1)&lt;/code>表示返回&lt;code>id&lt;/code>为&lt;code>1&lt;/code>的记录，该记录会自动转成对象，&lt;code>customer.FirstName&lt;/code>属性就对应&lt;code>FirstName&lt;/code>字段。&lt;/p>
&lt;h3 id="52-model-的描述">5.2 Model 的描述&lt;/h3>
&lt;p>Model 里面可以详细描述数据库表的定义，并且定义自己的方法（&lt;a href="https://github.com/ruanyf/openrecord-demos/blob/master/demos/demo03.js">完整代码&lt;/a>看这里）。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Customer&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> &lt;span style="color:#a6e22e">Store&lt;/span>.&lt;span style="color:#a6e22e">BaseModel&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#a6e22e">definition&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">attribute&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;CustomerId&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;integer&amp;#39;&lt;/span>, { &lt;span style="color:#a6e22e">primary&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">attribute&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;FirstName&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;string&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">attribute&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;LastName&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;string&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">validatesPresenceOf&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;FirstName&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;LastName&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">getFullName&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">FirstName&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#39; &amp;#39;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">LastName&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面代码告诉 Model，&lt;code>CustomerId&lt;/code>是主键，&lt;code>FirstName&lt;/code>和&lt;code>LastName&lt;/code>是字符串，并且不得为&lt;code>null&lt;/code>，还定义了一个&lt;code>getFullName()&lt;/code>方法。&lt;/p>
&lt;p>实例对象可以直接调用&lt;code>getFullName()&lt;/code>方法。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">customer&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">Customer&lt;/span>.&lt;span style="color:#a6e22e">find&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">customer&lt;/span>.&lt;span style="color:#a6e22e">getFullName&lt;/span>());
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="六crud-操作">六、CRUD 操作&lt;/h2>
&lt;p>数据库的基本操作有四种：&lt;code>create&lt;/code>（新建）、&lt;code>read&lt;/code>（读取）、&lt;code>update&lt;/code>（更新）和&lt;code>delete&lt;/code>（删除），简称 CRUD。&lt;/p>
&lt;p>ORM 将这四类操作，都变成了对象的方法。&lt;/p>
&lt;h3 id="61-查询">6.1 查询&lt;/h3>
&lt;p>前面已经说过，&lt;code>find()&lt;/code>方法用于根据主键，获取单条记录（&lt;a href="https://github.com/ruanyf/openrecord-demos/blob/master/demos/demo02.js">完整代码&lt;/a>看这里）或多条记录（&lt;a href="https://github.com/ruanyf/openrecord-demos/blob/master/demos/demo04.js">完整代码&lt;/a>看这里）。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">Customer&lt;/span>.&lt;span style="color:#a6e22e">find&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">Customer&lt;/span>.&lt;span style="color:#a6e22e">find&lt;/span>([&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>where()&lt;/code>方法用于指定查询条件（&lt;a href="https://github.com/ruanyf/openrecord-demos/blob/master/demos/demo04.js">完整代码&lt;/a>看这里）。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">Customer&lt;/span>.&lt;span style="color:#a6e22e">where&lt;/span>({&lt;span style="color:#a6e22e">Company&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Apple Inc.&amp;#39;&lt;/span>}).&lt;span style="color:#a6e22e">first&lt;/span>()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果直接读取类，将返回所有记录。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">customers&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">Customer&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>但是，通常不需要返回所有记录，而是使用&lt;code>limit(limit[, offset])&lt;/code>方法指定返回记录的位置和数量（&lt;a href="https://github.com/ruanyf/openrecord-demos/blob/master/demos/demo06.js">完整代码&lt;/a>看这里）。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">customers&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">Customer&lt;/span>.&lt;span style="color:#a6e22e">limit&lt;/span>(&lt;span style="color:#ae81ff">5&lt;/span>, &lt;span style="color:#ae81ff">10&lt;/span>);)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面的代码制定从第10条记录开始，返回5条记录。&lt;/p>
&lt;h3 id="62-新建记录">6.2 新建记录&lt;/h3>
&lt;p>&lt;code>create()&lt;/code>方法用于新建记录（&lt;a href="https://github.com/ruanyf/openrecord-demos/blob/master/demos/demo12.js">完整代码&lt;/a>看这里）。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">Customer&lt;/span>.&lt;span style="color:#a6e22e">create&lt;/span>({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Email&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;[president@whitehouse.gov](mailto:president@whitehouse.gov)&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">FirstName&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Donald&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">LastName&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Trump&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Address&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Whitehouse, Washington&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>})
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="63-更新记录">6.3 更新记录&lt;/h3>
&lt;p>&lt;code>update()&lt;/code>方法用于更新记录（&lt;a href="https://github.com/ruanyf/openrecord-demos/blob/master/demos/demo13.js">完整代码&lt;/a>看这里）。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">customer&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">Customer&lt;/span>.&lt;span style="color:#a6e22e">find&lt;/span>(&lt;span style="color:#ae81ff">60&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">customer&lt;/span>.&lt;span style="color:#a6e22e">update&lt;/span>({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Address&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Whitehouse&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="64-删除记录">6.4 删除记录&lt;/h3>
&lt;p>&lt;code>destroy()&lt;/code>方法用于删除记录（&lt;a href="https://github.com/ruanyf/openrecord-demos/blob/master/demos/demo14.js">完整代码&lt;/a>看这里）。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">customer&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">Customer&lt;/span>.&lt;span style="color:#a6e22e">find&lt;/span>(&lt;span style="color:#ae81ff">60&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">customer&lt;/span>.&lt;span style="color:#a6e22e">destroy&lt;/span>();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="七关系">七、关系&lt;/h2>
&lt;h3 id="71-关系类型">7.1 关系类型&lt;/h3>
&lt;p>表与表之间的关系（relation），分成三种。&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>&lt;strong>一对一&lt;/strong>（one-to-one）：一种对象与另一种对象是一一对应关系，比如一个学生只能在一个班级。&lt;/li>
&lt;li>&lt;strong>一对多&lt;/strong>（one-to-many）： 一种对象可以属于另一种对象的多个实例，比如一张唱片包含多首歌。&lt;/li>
&lt;li>&lt;strong>多对多&lt;/strong>（many-to-many）：两种对象彼此都是&amp;quot;一对多&amp;quot;关系，比如一张唱片包含多首歌，同时一首歌可以属于多张唱片。&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h3 id="72-一对一关系">7.2 一对一关系&lt;/h3>
&lt;p>设置&amp;quot;一对一关系&amp;quot;，需要设置两个 Model。举例来说，假定顾客（&lt;code>Customer&lt;/code>）和发票（&lt;code>Invoice&lt;/code>）是一对一关系，一个顾客对应一张发票，那么需要设置&lt;code>Customer&lt;/code>和&lt;code>Invoice&lt;/code>这两个 Model。&lt;/p>
&lt;p>&lt;code>Customer&lt;/code>内部使用&lt;code>this.hasOne()&lt;/code>方法，指定每个实例对应另一个 Model 的一个实例。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Customer&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> &lt;span style="color:#a6e22e">Store&lt;/span>.&lt;span style="color:#a6e22e">BaseModel&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#a6e22e">definition&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">hasOne&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;invoices&amp;#39;&lt;/span>, {&lt;span style="color:#a6e22e">model&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Invoice&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">from&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;CustomerId&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">to&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;CustomerId&amp;#39;&lt;/span>});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面代码中，&lt;code>this.hasOne(name, option)&lt;/code>的第一个参数是该关系的名称，可以随便起，只要引用的时候保持一致就可以了。第二个参数是关系的配置，这里只用了三个属性。&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>model：对方的 Model 名&lt;/li>
&lt;li>from：当前 Model 对外连接的字段，一般是当前表的主键。&lt;/li>
&lt;li>to：对方 Model 对应的字段，一般是那个表的外键。上面代码是&lt;code>Customer&lt;/code>的&lt;code>CustomerId&lt;/code>字段，对应&lt;code>Invoice&lt;/code>的&lt;code>CustomerId&lt;/code>字段。&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>然后，&lt;code>Invoice&lt;/code>内部使用&lt;code>this.belongsTo()&lt;/code>方法，回应&lt;code>Customer.hasOne()&lt;/code>方法。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Invoice&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> &lt;span style="color:#a6e22e">Store&lt;/span>.&lt;span style="color:#a6e22e">BaseModel&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#a6e22e">definition&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">belongsTo&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;customer&amp;#39;&lt;/span>, {&lt;span style="color:#a6e22e">model&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Customer&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">from&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;CustomerId&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">to&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;CustomerId&amp;#39;&lt;/span>});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>接下来，查询的时候，要用&lt;code>include(name)&lt;/code>方法，将对应的 Model 包括进来。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">invoice&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">Invoice&lt;/span>.&lt;span style="color:#a6e22e">find&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>).&lt;span style="color:#a6e22e">include&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;customer&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">customer&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">invoice&lt;/span>.&lt;span style="color:#a6e22e">customer&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">customer&lt;/span>.&lt;span style="color:#a6e22e">getFullName&lt;/span>());
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面代码中，&lt;code>Invoice.find(1).include('customer')&lt;/code>表示&lt;code>Invoice&lt;/code>的第一条记录要用&lt;code>customer&lt;/code>关系，将&lt;code>Customer&lt;/code>这个 Model 包括进来。也就是说，可以从&lt;code>invoice.customer&lt;/code>属性上，读到对应的那一条 Customer 的记录。&lt;/p>
&lt;h3 id="73-一对多关系">7.3 一对多关系&lt;/h3>
&lt;p>上一小节假定 Customer 和 Invoice 是一对一关系，但是实际上，它们是一对多关系，因为一个顾客可以有多张发票。&lt;/p>
&lt;p>一对多关系的处理，跟一对一关系很像，唯一的区别就是把&lt;code>this.hasOne()&lt;/code>换成&lt;code>this.hasMany()&lt;/code>方法。从名字上就能看出，这个方法指定了 Customer 的一条记录，对应多个 Invoice（&lt;a href="https://github.com/ruanyf/openrecord-demos/blob/master/demos/demo08.js">完整代码&lt;/a>看这里）。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Customer&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> &lt;span style="color:#a6e22e">Store&lt;/span>.&lt;span style="color:#a6e22e">BaseModel&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#a6e22e">definition&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">hasMany&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;invoices&amp;#39;&lt;/span>, {&lt;span style="color:#a6e22e">model&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Invoice&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">from&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;CustomerId&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">to&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;CustomerId&amp;#39;&lt;/span>});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Invoice&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> &lt;span style="color:#a6e22e">Store&lt;/span>.&lt;span style="color:#a6e22e">BaseModel&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#a6e22e">definition&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">belongsTo&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;customer&amp;#39;&lt;/span>, {&lt;span style="color:#a6e22e">model&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Customer&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">from&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;CustomerId&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">to&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;CustomerId&amp;#39;&lt;/span>});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面代码中，除了&lt;code>this.hasMany()&lt;/code>那一行，其他都跟上一小节完全一样。&lt;/p>
&lt;h3 id="74-多对多关系">7.4 多对多关系&lt;/h3>
&lt;p>通常来说，&amp;ldquo;多对多关系&amp;quot;需要有一张中间表，记录另外两张表之间的对应关系。比如，单曲&lt;code>Track&lt;/code>和歌单&lt;code>Playlist&lt;/code>之间，就是多对多关系：一首单曲可以包括在多个歌单，一个歌单可以包括多首单曲。数据库实现的时候，就需要一张&lt;code>playlist_track&lt;/code>表来记录单曲和歌单的对应关系。&lt;/p>
&lt;p>因此，定义 Model 就需要定义三个 Model（&lt;a href="https://github.com/ruanyf/openrecord-demos/blob/master/demos/demo10.js">完整代码&lt;/a>看这里）。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Track&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> &lt;span style="color:#a6e22e">Store&lt;/span>.&lt;span style="color:#a6e22e">BaseModel&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#a6e22e">definition&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">hasMany&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;track_playlists&amp;#39;&lt;/span>, { &lt;span style="color:#a6e22e">model&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;PlaylistTrack&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">from&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;TrackId&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">to&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;TrackId&amp;#39;&lt;/span>});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">hasMany&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;playlists&amp;#39;&lt;/span>, { &lt;span style="color:#a6e22e">model&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Playlist&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">through&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;track_playlists&amp;#39;&lt;/span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Playlist&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> &lt;span style="color:#a6e22e">Store&lt;/span>.&lt;span style="color:#a6e22e">BaseModel&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#a6e22e">definition&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">hasMany&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;playlist_tracks&amp;#39;&lt;/span>, { &lt;span style="color:#a6e22e">model&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;PlaylistTrack&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">from&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;PlaylistId&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">to&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;PlaylistId&amp;#39;&lt;/span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">hasMany&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;tracks&amp;#39;&lt;/span>, { &lt;span style="color:#a6e22e">model&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Track&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">through&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;playlist_tracks&amp;#39;&lt;/span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">PlaylistTrack&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> &lt;span style="color:#a6e22e">Store&lt;/span>.&lt;span style="color:#a6e22e">BaseModel&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#a6e22e">definition&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">tableName&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;playlist_track&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">belongsTo&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;playlists&amp;#39;&lt;/span>, { &lt;span style="color:#a6e22e">model&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Playlist&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">from&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;PlaylistId&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">to&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;PlaylistId&amp;#39;&lt;/span>});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">belongsTo&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;tracks&amp;#39;&lt;/span>, { &lt;span style="color:#a6e22e">model&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Track&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">from&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;TrackId&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">to&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;TrackId&amp;#39;&lt;/span>});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面代码中，&lt;code>Track&lt;/code>这个 Model 里面，通过&lt;code>this.hasMany('playlists')&lt;/code>指定对应多个歌单。但不是直接关联，而是通过&lt;code>through&lt;/code>属性，指定中间关系&lt;code>track_playlists&lt;/code>进行关联。所以，Track 也要通过&lt;code>this.hasMany('track_playlists')&lt;/code>，指定跟中间表的一对多关系。相应地，&lt;code>PlaylistTrack&lt;/code>这个 Model 里面，要用两个&lt;code>this.belongsTo()&lt;/code>方法，分别跟另外两个 Model 进行连接。&lt;/p>
&lt;p>查询的时候，不用考虑中间关系，就好像中间表不存在一样。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">track&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">Track&lt;/span>.&lt;span style="color:#a6e22e">find&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>).&lt;span style="color:#a6e22e">include&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;playlists&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">playlists&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">track&lt;/span>.&lt;span style="color:#a6e22e">playlists&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">playlists&lt;/span>.&lt;span style="color:#a6e22e">forEach&lt;/span>(&lt;span style="color:#a6e22e">l&lt;/span> =&amp;gt; &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">l&lt;/span>.&lt;span style="color:#a6e22e">PlaylistId&lt;/span>));
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面代码中，一首单曲对应多张歌单，所以&lt;code>track.playlists&lt;/code>返回的是一个数组。&lt;/p>
&lt;p>（完）&lt;/p></description></item><item><title>Docs: SDK 开发</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/SDK-%E5%BC%80%E5%8F%91/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/SDK-%E5%BC%80%E5%8F%91/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;/blockquote>
&lt;h1 id="经典的-sdk-设计方式">经典的 SDK 设计方式&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://github.com/huaweicloud/huaweicloud-sdk-go-v3">https://github.com/huaweicloud/huaweicloud-sdk-go-v3&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/wujiyu115/yuqueg">https://github.com/wujiyu115/yuqueg&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>目录结构示例&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>pkg/yuquesdk/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── README.md
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── core
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── v1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ │ └── client.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── v2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── client.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── log.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── index.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── services
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── v1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ │ ├── book.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ │ └── models
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ │ ├── model_request.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ │ └── model_response.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── v2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── doc.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── group.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── models
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ │ ├── model_request.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ │ └── model_response.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── repo.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── user.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── utils.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── yuque.log
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面的示例每个服务还可以放在单独的目录中，models 中也可以将文件分开，为每个服务创建一个单独的 model 文件。&lt;/p>
&lt;h2 id="核心客户端">核心客户端&lt;/h2>
&lt;p>里面包含向目标建立 HTTP 的逻辑&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Client&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">token&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">RequestOption&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Method&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Data&lt;/span> &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#a6e22e">Client&lt;/span>) &lt;span style="color:#a6e22e">Request&lt;/span>(&lt;span style="color:#a6e22e">api&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">options&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">RequestOption&lt;/span>) ([]&lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#a6e22e">Client&lt;/span>) &lt;span style="color:#a6e22e">RequestObj&lt;/span>(&lt;span style="color:#a6e22e">api&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">container&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span>{}, &lt;span style="color:#a6e22e">options&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">RequestOption&lt;/span>) (&lt;span style="color:#66d9ef">interface&lt;/span>{}, &lt;span style="color:#66d9ef">error&lt;/span>) {}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里面的示例，是把将要响应的数据当做 container，作为参数传入，然后通过 HTTP 请求获取到的返回值填到 container，最后返回 container。
在华为云的 SDK 中，是另一种用法&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">ElbClient&lt;/span>) &lt;span style="color:#a6e22e">ListIpGroups&lt;/span>(&lt;span style="color:#a6e22e">request&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">model&lt;/span>.&lt;span style="color:#a6e22e">ListIpGroupsRequest&lt;/span>) (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">model&lt;/span>.&lt;span style="color:#a6e22e">ListIpGroupsResponse&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">requestDef&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">GenReqDefForListIpGroups&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">resp&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">HcClient&lt;/span>.&lt;span style="color:#a6e22e">Sync&lt;/span>(&lt;span style="color:#a6e22e">request&lt;/span>, &lt;span style="color:#a6e22e">requestDef&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">resp&lt;/span>.(&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">model&lt;/span>.&lt;span style="color:#a6e22e">ListIpGroupsResponse&lt;/span>), &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用类型断言，将返回的 interface 类型的数据固定下来后再返回&lt;/p>
&lt;h2 id="各个服务客户端">各个服务客户端&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">UserService&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">client&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Client&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#a6e22e">UserService&lt;/span>) &lt;span style="color:#a6e22e">Get&lt;/span>(&lt;span style="color:#a6e22e">login&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">UserInfo&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">client&lt;/span>.&lt;span style="color:#a6e22e">RequestObj&lt;/span>(&lt;span style="color:#a6e22e">url&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">user&lt;/span>, &lt;span style="color:#a6e22e">EmptyRO&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="响应体与请求体">响应体与请求体&lt;/h3>
&lt;p>响应体与请求体的通常定义为一个 Struct，这些 Struct 通常放在服务目录下的 models 目录中&lt;/p></description></item></channel></rss>