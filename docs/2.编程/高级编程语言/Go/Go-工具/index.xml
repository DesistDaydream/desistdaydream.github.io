<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – Go 工具</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E5%B7%A5%E5%85%B7/</link><description>Recent content in Go 工具 on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E5%B7%A5%E5%85%B7/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Go 工具</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E5%B7%A5%E5%85%B7/Go-%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E5%B7%A5%E5%85%B7/Go-%E5%B7%A5%E5%85%B7/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://go.dev/doc/cmd">官方文档，命令文档&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>go 是用来管理 Go 编程语言源代码的工具&lt;/p>
&lt;h1 id="go">go&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://pkg.go.dev/cmd/go">Go 包，标准库-cmd-go&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>go 是一个工具，用来管理 Go 语言编写的代码。该工具由多个子命令组成。每个子命令可以实现不同类型的功能。&lt;/p>
&lt;h2 id="bug--start-a-bug-report">bug # start a bug report&lt;/h2>
&lt;h2 id="build--编译-package-及其依赖">build # 编译 package 及其依赖&lt;/h2>
&lt;p>&lt;a href="https://pkg.go.dev/cmd/go#hdr-Compile_packages_and_dependencies">https://pkg.go.dev/cmd/go#hdr-Compile_packages_and_dependencies&lt;/a>&lt;/p>
&lt;p>默认编译当前路径下的代码包及其依赖，生成一个可执行文件&lt;/p>
&lt;p>OPTIONS&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-ldflags &amp;lt;[PATTERN=]ARG&amp;gt;&lt;/strong> # 向链接器传递一些参数。这些参数可用于指定编译时需要使用的一些信息，例如项目版本号、Git 提交 ID、构建时间、构建平台和架构等元数据信息
&lt;ul>
&lt;li>比如：
&lt;ul>
&lt;li>-ldflags &amp;ldquo;-X main.version=1.0.0 -X &amp;lsquo;main.buildTime=&lt;code>date&lt;/code>&amp;rsquo;&amp;rdquo;&lt;/li>
&lt;li>-ldflags &amp;ldquo;-s -w&amp;rdquo; # 告诉链接器在生成可执行文件时忽略调试信息和符号表，从而使得你的二进制文件更加紧凑而且不再可读。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>-o &amp;lt;NAME&amp;gt;&lt;/strong> # 指定构建完成后生成的文件名为 NAME&lt;/li>
&lt;li>&lt;strong>-x&lt;/strong> # 输出 Go 程序编译、链接、打包的全过程。包括都使用了哪些库、执行了什么命令、等等&lt;/li>
&lt;/ul>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>指定构建名称
&lt;ul>
&lt;li>go build -o jhs_cli cmd/jhs_cli/main.go&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="clean--remove-object-files-and-cached-files">clean # remove object files and cached files&lt;/h2>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>go clean -i github.com/spf13/cobra/cobra #&lt;/li>
&lt;/ul>
&lt;p>doc show documentation for package or symbol&lt;/p>
&lt;p>env print Go environment information&lt;/p>
&lt;p>fix update packages to use new APIs&lt;/p>
&lt;p>fmt gofmt (reformat) package sources&lt;/p>
&lt;p>generate generate Go files by processing source&lt;/p>
&lt;h2 id="get--下载并安装-package-及其依赖">get # 下载并安装 package 及其依赖&lt;/h2>
&lt;p>OPTIONS&lt;/p>
&lt;ul>
&lt;li>-u # 更新现有依赖，强制更新它所依赖的其他全部模块，不包括自身&lt;/li>
&lt;li>-t # 更新所有直接依赖和间接依赖的模块版本，包括单元测试中用到的。&lt;/li>
&lt;/ul>
&lt;p>install compile and install packages and dependencies&lt;/p>
&lt;p>list list packages or modules&lt;/p>
&lt;h2 id="mod--go-模块维护与管理命令">mod # go 模块维护与管理命令&lt;/h2>
&lt;p>详见《&lt;a href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go%20%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/Go%20Module.md">Go Module&lt;/a>》章节&lt;/p>
&lt;h2 id="run--编译并运行-go-程序">run # 编译并运行 Go 程序&lt;/h2>
&lt;h2 id="test--test-packages">test # test packages&lt;/h2>
&lt;p>详见 《&lt;a href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go%20%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95.md">Go 单元测试&lt;/a>》 章节&lt;/p>
&lt;h2 id="tool--run-specified-go-tool">tool # run specified go tool&lt;/h2>
&lt;h2 id="vet--report-likely-mistakes-in-packages">vet # report likely mistakes in packages&lt;/h2>
&lt;h1 id="其他工具">其他工具&lt;/h1>
&lt;p>很多 Go 语言生态的工具为我们编写代码提供了强大的支持，这些工具通常会作为 IDE 的插件被安装
比如 VSCode 中，当我们安装完 Go 的所有工具后，右键点击代码会出现如下提示：
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gy06h4/1654832963071-167da116-2e44-4818-a22c-37dc041ebafc.png" alt="image.png">
通过这些工具，我们可以&lt;/p>
&lt;ul>
&lt;li>检查代码问题&lt;/li>
&lt;li>自动创建测试代码&lt;/li>
&lt;li>自动格式化代码&lt;/li>
&lt;li>等等&lt;/li>
&lt;/ul>
&lt;h2 id="gopls">gopls&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/golang/tools">GitHub 项目，golang/tools&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.modb.pro/db/87143">VSCode 建议你启用 gopls，它到底是个什么东东&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>gopls 是一个用以实现 &lt;a href="https://en.wikipedia.org/wiki/Language_Server_Protocol">LSP&lt;/a> 的官方工具。&lt;/p>
&lt;h2 id="gotests">gotests&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/cweill/gotests">GitHub 项目，cweill/gotests&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>gotests 工具可以让我们更容易得编写 Go 单元测试。该工具可以根据目标源文件的 函数 和 方法 自动生成测试用例。测试文件中的任何新依赖项都会自动导入。
gotests 可以作为 IDE 的插件提供更方便的使用，下面是一个 Sublime Text3 插件的示例
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gy06h4/1654843875110-6dbf3a8d-1512-4022-bb7d-210084311509.gif" alt="">
在 &lt;a href="https://github.com/damienlevin/GoTests-Emacs">Emacs&lt;/a>, also &lt;a href="https://github.com/s-kostyaev/go-gen-test">Emacs&lt;/a>, &lt;a href="https://github.com/buoto/gotests-vim">Vim&lt;/a>, &lt;a href="https://atom.io/packages/gotests">Atom Editor&lt;/a>, &lt;a href="https://github.com/Microsoft/vscode-go">Visual Studio Code&lt;/a>, and &lt;a href="https://www.jetbrains.com/help/go/run-debug-configuration-for-go-test.html">IntelliJ Goland&lt;/a> 等 IDE 中也有这个插件。当然，如果不想在 IDE 中使用，也可以在命令行直接使用 gotests。、、、、、、&lt;/p>
&lt;h3 id="简单示例">简单示例&lt;/h3>
&lt;p>假如有一个文件 unit_tests.go 如下代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">UnitTests&lt;/span>(&lt;span style="color:#a6e22e">needArgs&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">needArgs&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;unittests&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>gotests 将会创建一个 unit_tests_test.go 文件，并为 UnitTests() 函数生成测试用例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">TestUnitTests&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">testing&lt;/span>.&lt;span style="color:#a6e22e">T&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 这是是测试时需要传递给 UnitTests() 的参数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">args&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">needArgs&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 可以创建多个测试
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">tests&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> []&lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 测试名称
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 需要传递给 UnitTests() 的参数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">args&lt;/span> &lt;span style="color:#a6e22e">args&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 需要判断 UnitTests() 的返回值
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">want&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// TODO: 在这里写具体的测试用例，也就是执行 UnitTests() 时想要传递的参数和想要获取到的返回值
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 这是一个 struct 类型的数组，注意书写格式。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;这是第一条测试在下面填写测试想要传递的参数以及想要获取到的返回值&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">args&lt;/span>: &lt;span style="color:#a6e22e">args&lt;/span>{&lt;span style="color:#e6db74">&amp;#34;unittests&amp;#34;&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">want&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;这里是第二条测试用例中需要用到的信息&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">args&lt;/span>: &lt;span style="color:#a6e22e">args&lt;/span>{&lt;span style="color:#e6db74">&amp;#34;这里的参数会导致返回值为 false,进而会导致本次测试失败&amp;#34;&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">want&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 执行我们提供的每一条测试用例
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">tt&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">tests&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Run&lt;/span>(&lt;span style="color:#a6e22e">tt&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">testing&lt;/span>.&lt;span style="color:#a6e22e">T&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">got&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">UnitTests&lt;/span>(&lt;span style="color:#a6e22e">tt&lt;/span>.&lt;span style="color:#a6e22e">args&lt;/span>.&lt;span style="color:#a6e22e">needArgs&lt;/span>); &lt;span style="color:#a6e22e">got&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#a6e22e">tt&lt;/span>.&lt;span style="color:#a6e22e">want&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 如果 UnitTests() 的返回值与我们填写的 want(即想要获得的返回值) 不一致，那么将会报错
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;UnitTests() = %v, want %v&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">got&lt;/span>, &lt;span style="color:#a6e22e">tt&lt;/span>.&lt;span style="color:#a6e22e">want&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行测试后效果如下：
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gy06h4/1654845554292-4eb67713-5aac-400a-894f-55242b3fe799.png" alt="image.png">&lt;/p>
&lt;h3 id="syntax语法">Syntax(语法)&lt;/h3>
&lt;p>&lt;strong>gotests [OPTIONS] PATH&amp;hellip;&lt;/strong>&lt;/p>
&lt;h2 id="dlv">dlv&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/go-delve/delve">GitHub 项目，go-delve/delve&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Delve 是 Go 编程语言的调试器。该项目的目标是为 Go 提供一个简单、功能齐全的调试工具。 Delve 应该易于调用和使用。如果您使用的是调试器，那么事情可能不会如您所愿。考虑到这一点，Delve 应该尽可能地远离你。&lt;/p>
&lt;h2 id="impl">impl&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/josharian/impl">GitHub 项目，josharian/impl&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>impl 用于生成实现接口的 [Method stub](&amp;lt;/docs/2.编程/Programming(编程)/Programming(编程).md&amp;raquo;)&lt;/p>
&lt;h3 id="简单示例-1">简单示例&lt;/h3>
&lt;p>通过 Go: Generate Interface Stubs 可以快速生成某个接口下的方法
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gy06h4/1642038271876-e8806fd8-1531-4c24-b1f4-a7f4d9ae306a.png" alt="image.png">
语法：&lt;code>VAR *STRUCT INTERFACE&lt;/code>
比如，我想让 &lt;code>File&lt;/code> 结构体实现 &lt;code>io.Closer&lt;/code> 接口，则输入:&lt;code>f *File io.Closer&lt;/code>，将会生成如下方法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">f&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">File&lt;/span>) &lt;span style="color:#a6e22e">Close&lt;/span>() &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> panic(&lt;span style="color:#e6db74">&amp;#34;not implemented&amp;#34;&lt;/span>) &lt;span style="color:#75715e">// TODO: Implement
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>也可以通过命令行，使用 &lt;code>impl 'f *File' io.Closer&lt;/code> 命令生成方法。&lt;/p>
&lt;/blockquote>
&lt;p>若提示 &lt;code>Cannot stub interface: unrecognized interface: handler.YuqeData&lt;/code>导致无法生成方法，则对接口使用一下 &lt;code>Find All Implementations&lt;/code>
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gy06h4/1642045391841-a1d01b46-deda-4561-b9b6-de714d8ee672.png" alt="image.png">&lt;/p>
&lt;h2 id="gomodifytags">gomodifytags&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/fatih/gomodifytags">GitHub 项目，fatih/gomodifytags&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="staticcheck">staticcheck&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/dominikh/go-tools">GitHub 项目，dominikh/go-tools&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://staticcheck.io/">官网&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Staticcheck 是一个高级 Go Linter，即用于 Go 的代码检查工具，使用静态分析，可以发现错误和性能问题，提供简化，并强制执行样式规则&lt;/p>
&lt;h2 id="goplay">goplay&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/haya14busa/goplay">GitHub 项目，haya14busa/goplay&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>goplay 可以让代码通过 &lt;a href="https://play.golang.org/">https://play.golang.org/&lt;/a> 打开（这是一个在线运行 Go 代码的网站）。&lt;/p></description></item><item><title>Docs: pprof(go程序的性能分析器)</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E5%B7%A5%E5%85%B7/pprofgo%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%99%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E5%B7%A5%E5%85%B7/pprofgo%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%99%A8/</guid><description/></item></channel></rss>