<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – Go</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/</link><description>Recent content in Go on 断念梦</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Go</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/golang/go">GitHub 项目，golang/go&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://golang.org/">官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cs.opensource.google/go">Google 开放源代码&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/avelino/awesome-go">GitHub 项目，avelino/awesome-go&lt;/a>(收录了优秀的 Go 框架、库、软件)
&lt;ul>
&lt;li>&lt;a href="https://github.com/yinggaozhen/awesome-go-cn">中文版，GitHub 项目，yinggaozhen/awesome-go-cn&lt;/a>&lt;/li>
&lt;li>另一个 go awesome: &lt;a href="https://github.com/shockerli/go-awesome">https://github.com/shockerli/go-awesome&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Go 是一种开源编程语言，可以轻松构建 &lt;strong>simple(简单)&lt;/strong>、&lt;strong>reliable(可靠)&lt;/strong> 和 &lt;strong>efficient(高效)&lt;/strong> 的软件。&lt;/p>
&lt;h2 id="学习资料">学习资料&lt;/h2>
&lt;p>&lt;a href="https://go.dev/tour">Go 语言之旅&lt;/a>(官方在线教程)&lt;/p>
&lt;p>&lt;a href="https://go.dev/doc/faq">Go 官方 FAQ&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://gobyexample.com/?tdsourcetag=s_pctim_aiomsg">Go by Example&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://gobyexample-cn.github.io/">中文 Go by Example&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://github.com/golang-china">GitHub 组织，golang-china&lt;/a>(Go 语言中国)&lt;/p>
&lt;p>&lt;a href="https://mp.weixin.qq.com/s/pAkjxK6N4shTEtHXQbxChg">公众号-HelloGitHub，适合 Go 新手学习的开源项目&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.topgoer.cn/">地鼠文档&lt;/a>系列文章&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://coolshell.cn/articles/series/go%e7%bc%96%e7%a8%8b%e6%a8%a1%e5%bc%8f">Go 编程模式&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>电子书&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/unknwon/the-way-to-go_ZH_CN">GitHub 项目，unknowon/the-way-to-go&lt;/a>(Go 入门指南)&lt;/li>
&lt;li>&lt;a href="https://github.com/gopl-zh/gopl-zh.github.com">GitHub 项目，gopl-zh/gopl-zh.github.com&lt;/a>(Go 语言圣经)
&lt;ul>
&lt;li>&lt;a href="https://www.k8stech.net/gopl/chapter0/">The Go Programming Language&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>视频&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.bilibili.com/video/BV1hv411x7we?spm_id_from=333.999.0.0&amp;amp;vd_source=708696360de7266de8f3911eef0f7448">B 站-幼麟实验室-Golang 合辑&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://github.com/avelino/awesome-go">https://github.com/avelino/awesome-go&lt;/a>&lt;/p>
&lt;h1 id="hello-world">Hello World&lt;/h1>
&lt;p>代码：&lt;code>hello_world.go&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#e6db74">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Hello World&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># go run hello_world.go&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Hello World
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="go-范儿">Go 范儿&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/golang/go/wiki/CodeReviewComments">GitHub 项目 Wiki，golang/go-Wiki-Go 代码审查&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://go.dev/doc/effective_go#names">官方文档，有效的 Go-名称&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://makeoptim.com/golang/effective-go">MakeOptim 博客，Effective Go 中文&lt;/a>(官方文档的中文翻译)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://go.dev/blog/package-names">Go 博客，Package names&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.cnblogs.com/laud/p/gopher.html">博客园，不一样的 go 语言-gopher&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>gopher 原意地鼠，在 go 语言的世界里解释为地道的 go 程序员。在其他语言的世界里也有 PHPer，Pythonic 的说法，反而 Java 是个例外。虽然也有 Javaer 之类的说法，但似乎并不被认可。而地道或者说道地，说的是 gopher 写的代码无不透露出 go 的独特气息，比如项目结构、命名方式、代码格式、编码风格、构建方式等等。用 gopher 的话说，用 go 编写代码就像是在画一幅中国山水画，成品美不胜收，心旷神怡。&lt;/p>
&lt;h2 id="环境变量">环境变量&lt;/h2>
&lt;p>gopher 第一条：把东西放对地方。&lt;/p>
&lt;p>go 程序的运行，需要依赖于两个基础的环境变量，GOROOT 与 GOPATH。环境变量几乎在各类编程语言中都存在，比如 java 的 JAVA_HOME，其实也就是编译器及相关工具或标准库所在目录。但 go 除了 GOROOT 之外，还增加了 GOPATH，它指的是 go 程序依赖的第三方库或自有库所在目录，以指示编译器从这些地方找到依赖。GOPATH 支持多个目录，通常一个目录就是一个项目，并且 GOPATH 目录按约定由 src、pkg、bin 三个目录组成。gopher 们的做法是定义 Global GOPATH、Project GOPATH，而更大的项目还会定义 Module GOPATH。当使用 go get 下载依赖时，会选择 GOPATH 环境变量中的第一个目录存放依赖包。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>变量&lt;/th>
&lt;th>含义&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>GOROOT&lt;/td>
&lt;td>go 运行环境根目录&lt;/td>
&lt;td>通常指 go sdk 安装目录，包含编译器、官方工具及标准库&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>GOPATH&lt;/td>
&lt;td>工作环境目录列表&lt;/td>
&lt;td>通常指第三方库&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="项目结构">项目结构&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/golang-standards/project-layout">GitHub 项目，golang-standards/project-layout&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://makeoptim.com/golang/standards/project-layout">MakeOptim 博客，golang 编程规范-项目目录结构&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://zhuanlan.zhihu.com/p/346573562">知乎，该如何组织 Go 项目结构？&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://www.ardanlabs.com/blog/2017/02/package-oriented-design.html">Package Oriented Design&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>gopher 第二条：按东西放在约定的地方。&lt;/p>
&lt;p>不论采用何种编程语言，良好的项目组织结构都至关重要，因为这将直接影响项目内部依赖的复杂程度以及项目对外提供 API 等服务的灵活性等。最好在项目初期便制定好项目结构约定，甚至可以为其开发脚手架之类的工具来生成项目模板，让开发者尽量按照统一的规范参与项目。&lt;/p>
&lt;p>一个常见的 Go 应用项目布局，通常有如下结构：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-latex" data-lang="latex">&lt;span style="display:flex;">&lt;span>- my-go-project
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - cmd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - pkg
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - internal
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - go.mod &amp;amp;&amp;amp; go.sum
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - Makefile
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中 cmd 与 pkg 目录是最常见的。一个项目如果具有多个功能，比如 &lt;a href="https://github.com/kubernetes/kubernetes">kubernetes&lt;/a> 项目，具有多个组件，所有组件的入口都在 cmd 目录中，并以组件名命名其下的目录名。而每个组件所调用的各种功能，通常都是放在 pkg 目录下，一个功能一个目录，通常来说，pkg 目录是一个项目中代码量最多的地方。&lt;/p>
&lt;h3 id="cmd">cmd&lt;/h3>
&lt;p>cmd 包是项目的主干，是编译构建的入口，&lt;code>main()&lt;/code> 所在文件通常放置在此处。一个典型的 cmd 包的目录结构如下所示：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-latex" data-lang="latex">&lt;span style="display:flex;">&lt;span>- cmd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - app1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - main.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - app2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - main.go
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>从上述例子可以看出，cmd 下可以允许挂载多个需要编译的应用，只需要在不同的包下编写 main 文件即可。需要注意的是，cmd 中的代码应该尽量「保持简洁」，&lt;code>main()&lt;/code> 函数中可能仅仅是参数初始化、配置加载、服务启动的操作。&lt;/p>
&lt;h3 id="pkg">pkg&lt;/h3>
&lt;p>pkg 中存放的是可供项目内部/外部所使用的公共性代码，例如：用来连接第三方服务的 client 代码等。也有部分项目将该包命名为 lib，例如：&lt;a href="https://link.zhihu.com/?target=https%3A//github.com/hashicorp/consul">consul 项目&lt;/a> ，所表示的含义其实相同。&lt;/p>
&lt;h3 id="internal">internal&lt;/h3>
&lt;p>internal 包主要用处在于提供一个项目级别的代码保护方式，存放在其中的代码仅供项目内部使用。具体使用的规则是：&amp;hellip;/a/b/c/internal/d/e/f 仅仅可以被&amp;hellip;/a/b/c 下的目录导入，&amp;hellip;/a/b/g 则不允许。internal 是 Go 1.4 版本中引入的特性，更多信息可以参考&lt;a href="https://link.zhihu.com/?target=https%3A//golang.org/doc/go1.4%23internalpackages">这里&lt;/a>。
在 internal 内部可以继续通过命名对目录的共享范围做区分，例如 internal/myapp 表示该目录下的代码是供 myapp 应用使用的；internal/pkg 表示该目录下的代码是可以供项目内多个应用使用的。&lt;/p>
&lt;h3 id="gomod--gosum">go.mod &amp;amp;&amp;amp; go.sum&lt;/h3>
&lt;p>go.mod 与 go.sum 是采用 go modules 进行依赖管理所生成的配置文件。go modules 是 Go 1.11 版本中引入的版本管理功能，目前已经是 go 依赖管理的主流方式，所以此处不再讨论 vendor，dep 等依赖管理方式所生成的目录。&lt;/p>
&lt;h3 id="makefile">Makefile&lt;/h3>
&lt;p>Makefile 文件通常存放项目的编译部署脚本。Go 的编译命令虽然简单，但总是手写命令还是效率低下，因此使用 Makefile 写编译部署脚本是工程实践中常见的方式。&lt;/p>
&lt;h3 id="服务端应用程序目录">服务端应用程序目录&lt;/h3>
&lt;h4 id="api">api&lt;/h4>
&lt;p>项目对外提供和依赖的 API 文件。比如：OpenAPI/Swagger specs, JSON schema 文件, protocol 定义文件等。
比如，&lt;a href="https://github.com/kubernetes/kubernetes/tree/master/api">Kubernetes&lt;/a> 项目的 api 目录结构如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>api
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── api-rules
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └── xxx.plist
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── openapi-spec
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └── swagger.json
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>因此，在 go 中用的比较多的 gRPC proto 文件，也比较适合放在 api 目录下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>api
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── protobuf-spec
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └── test
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├── test.pb.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └── test.proto
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="web-应用程序目录">Web 应用程序目录&lt;/h3>
&lt;h4 id="web">web&lt;/h4>
&lt;p>Web 应用程序特定的组件，比如 静态资源、服务器端模板和单页应用&lt;/p>
&lt;h3 id="通用应用程序目录">通用应用程序目录&lt;/h3>
&lt;h4 id="build">build&lt;/h4>
&lt;p>打包和持续集成所需的文件。&lt;/p>
&lt;ul>
&lt;li>build/ci：存放持续集成的配置和脚本，如果持续集成平台对配置文件有路径要求，则可将其 link 到指定位置。&lt;/li>
&lt;li>build/package：存放 AMI、Docker、系统包（deb、rpm、pkg）的配置和脚本等。&lt;/li>
&lt;/ul>
&lt;p>例子：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/cockroachdb/cockroach/tree/master/build">https://github.com/cockroachdb/cockroach/tree/master/build&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="configs">configs&lt;/h4>
&lt;p>配置文件模板或默认配置。&lt;/p>
&lt;h4 id="deployments">deployments&lt;/h4>
&lt;p>IaaS，PaaS，系统和容器编排部署配置和模板（docker-compose，kubernetes/helm，mesos，terraform，bosh）。请注意，在某些存储库中（尤其是使用 kubernetes 部署的应用程序），该目录的名字是 /deploy。&lt;/p>
&lt;h4 id="init">init&lt;/h4>
&lt;p>系统初始化（systemd、upstart、sysv）和进程管理（runit、supervisord）配置。&lt;/p>
&lt;h4 id="scripts">scripts&lt;/h4>
&lt;p>用于执行各种构建，安装，分析等操作的脚本。
这些脚本使根级别的 Makefile 变得更小更简单，例如：&lt;a href="https://github.com/hashicorp/terraform/blob/master/Makefile">https://github.com/hashicorp/terraform/blob/master/Makefile&lt;/a>。&lt;/p>
&lt;h4 id="test">test&lt;/h4>
&lt;p>外部测试应用程序和测试数据。随时根据需要构建 /test 目录。对于较大的项目，有一个数据子目录更好一些。例如，如果需要 Go 忽略目录中的内容，则可以使用 /test/data 或 /test/testdata 这样的目录名字。请注意，Go 还将忽略以“.”或“_”开头的目录或文件，因此可以更具灵活性的来命名测试数据目录。&lt;/p>
&lt;h3 id="其他目录">其他目录&lt;/h3>
&lt;h4 id="assets">assets&lt;/h4>
&lt;p>项目中使用的其他资源（图像、logo 等）。&lt;/p>
&lt;h4 id="docs">docs&lt;/h4>
&lt;p>设计和用户文档（除了 godoc 生成的文档）。&lt;/p>
&lt;h4 id="examples">examples&lt;/h4>
&lt;p>应用程序或公共库的示例程序。&lt;/p>
&lt;h4 id="githooks">githooks&lt;/h4>
&lt;p>Git 钩子。&lt;/p>
&lt;h4 id="third_party">third_party&lt;/h4>
&lt;p>外部辅助工具，fork 的代码和其他第三方工具（例如：Swagger UI）。&lt;/p>
&lt;h4 id="tools">tools&lt;/h4>
&lt;p>此项目的支持工具。请注意，这些工具可以从 /pkg 和 /internal 目录导入代码。
例子：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/istio/istio/tree/master/tools">https://github.com/istio/istio/tree/master/tools&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/openshift/origin/tree/master/tools">https://github.com/openshift/origin/tree/master/tools&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/dapr/dapr/tree/master/tools">https://github.com/dapr/dapr/tree/master/tools&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="website">website&lt;/h4>
&lt;p>如果不使用 Github pages，则在这里放置项目的网站数据。
例子：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/hashicorp/vault/tree/master/website">https://github.com/hashicorp/vault/tree/master/website&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/perkeep/perkeep/tree/master/website">https://github.com/perkeep/perkeep/tree/master/website&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="不应该包含的目录">不应该包含的目录&lt;/h3>
&lt;p>项目中不应该包含 src 目录&lt;/p>
&lt;p>在 Java 项目中，会常见 src 目录，但在 Go 项目中，并不推荐这么做。在 Go 1.11 之前，Go 项目是放在 $GOPATH/src 下，如果项目中再包含 src 目录，那么代码结构就会类似： &lt;code>$GOPATH/src/my-project/src/app.go&lt;/code>的结构，容易造成混淆。在 Go 引入 modules 之后，项目可以不用写在 $GOPATH 下，但是依然不推荐项目中采用&lt;code>src&lt;/code> 来命名目录。&lt;/p>
&lt;h2 id="命名规范">命名规范&lt;/h2>
&lt;p>gopher 第三条：把名字起得 go 一点。&lt;/p>
&lt;p>go 语言的命名与其他语言最大的不同在于首字母的大小写。&lt;/p>
&lt;ul>
&lt;li>大写代表公开（导出，可以在其他包内访问）&lt;/li>
&lt;li>小写代表私有（不导出，只能在包内访问）。&lt;/li>
&lt;/ul>
&lt;p>除此之外，与其他语言并无二致，比如不能以数字开头。而由于关键字、保留字的减少，因而减少了一些命名上的忌讳。更为突出的是，go 语言有一些建议性的命名规范，这也是 gophers 的圣经，理应严格遵守。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>约定&lt;/th>
&lt;th>范围&lt;/th>
&lt;th>说明&lt;/th>
&lt;th>示例&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>驼峰命名法&lt;/td>
&lt;td>全局&lt;/td>
&lt;td>统一使用驼峰命名法&lt;/td>
&lt;td>var isLive = false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>大小写一致&lt;/td>
&lt;td>缩写短语，惯用词&lt;/td>
&lt;td>如 HTML，CSS, HTTP 等&lt;/td>
&lt;td>htmlEscape，HTMLEscape&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>简短命名法&lt;/td>
&lt;td>局部变量&lt;/td>
&lt;td>方法内、循环等使用的局部变量可以使用简短命名&lt;/td>
&lt;td>比如 for 循环中的 i，buf 代表 buffer 等&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>参数命名法&lt;/td>
&lt;td>函数参数、返回值、方法接收者&lt;/td>
&lt;td>如果参数类型能说明含义，则参数名可以简短，否则应该采用有文档说明能力的命名&lt;/td>
&lt;td>比如 d Duration，t Time&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>通用命名法&lt;/td>
&lt;td>作用域越大或者使用的地方离声明的地方太远，则应采用清晰有意义的命名&lt;/td>
&lt;td>-&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>导出命名法&lt;/td>
&lt;td>导出变量、函数、结构等&lt;/td>
&lt;td>包名与导出名意义不要重复，同时包的命名要与导出的内容相关，不要使用宽泛的名字，如 common，util&lt;/td>
&lt;td>bytes.Buffer 比 bytes.ByteBuffer 要好&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>文件命名&lt;/td>
&lt;td>go 文件，单元测试文件&lt;/td>
&lt;td>go 文件名尽量以一个单词来命名，多个单词使用下线划分隔，单元测试文件以对应 go 文件名加_test 结尾&lt;/td>
&lt;td>proto_test&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>包命名&lt;/td>
&lt;td>包&lt;/td>
&lt;td>包的一级名称应是顶级域名，二级名称则应是项目名称，项目名称单词间以-分隔&lt;/td>
&lt;td>github.com/mysql&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="代码格式">代码格式&lt;/h2>
&lt;p>gopher 第四条：按统一的格式来。&lt;/p>
&lt;p>在多人协作团队中，统一的代码格式化模板是第一要义。在 Java 语言中，检验新人经验的一大法宝就是他有没有主动索要代码模板。而在 go 语言中，则没有这个必要了。因为 go 已经有默认的代码格式化工具了，而且代码格式化在 go 语言中是强制规范。所以这使得所有 go 程序员写出来的代码格式都是一样的。&lt;/p>
&lt;p>go 默认的代码格式化工具是 gofmt。另外还有一个增强工具 goimport，在 gofmt 的基础上增加了自动删除和引入依赖包。而行长则以不超过 80 个字符为佳，超过请主动以多行展示。&lt;/p>
&lt;h2 id="编码风格">编码风格&lt;/h2>
&lt;p>gopher 第五条：请学会约定&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>项&lt;/th>
&lt;th>约定&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>import&lt;/td>
&lt;td>按标准库、内部包、第三方包的顺序导入包&lt;/td>
&lt;td>只引一个包时使用单行模式，否则使用多行模式&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>变量声明&lt;/td>
&lt;td>如果连续声明多个变量，应放在一起&lt;/td>
&lt;td>参见例子&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>错误处理&lt;/td>
&lt;td>不要忽略每一个 error，即使只是打一行日志&lt;/td>
&lt;td>go 的 error 处理方式与 C 同出一辙，通过返回值来标明错误或异常，引来的争议也很多，甚至官方已经开始酝酿在 go2 解决这个问题&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>长语句打印&lt;/td>
&lt;td>使用格式化方式打印&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>注释规范&lt;/td>
&lt;td>变量、方法、结构等的注释直接加上声明前，并且不要加空行。废弃方法加 Deprecated:即可&lt;/td>
&lt;td>其中的第一行注释会被 godoc 识别为简短介绍，第二行开始则被认为是注释详情。注释对 godoc 的生成至关重要，因此关于注释会有一些技巧，我将在后面用专门的章节探讨&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>多变量声明&lt;/p>
&lt;pre>&lt;code>var (
name string
age int
)
&lt;/code>&lt;/pre>
&lt;p>注释规范&lt;/p>
&lt;pre>&lt;code>// Add 两数相加
// 两个整数相加，并返回和。
func Add(n1, n2 int)int{
return n1 + n2
}
&lt;/code>&lt;/pre>
&lt;h2 id="依赖管理">依赖管理&lt;/h2>
&lt;p>gopher 第六条：使用依赖管理工具管理自有依赖与第三方依赖&lt;/p>
&lt;p>一个语言的生态是否完善甚至是否强大，除了 github 上面的开源项目数量之外，还有一大特征就是是否有优秀的依赖管理工具。依赖管理工具在业界已经是无处不在，yum、maven、gradle、pip、npm、cargo 这些工具的大名如雷贯耳。那么 go 有什么呢？&lt;/p>
&lt;p>早期 go 的依赖是混乱的，因为没有一个工具能得到普遍认可，而官方又迟迟不出来解决问题。历数存在的工具包括 godep、glide、govender 等等。甚至早期还需要使用 GOPATH 来管理依赖，即项目的所有依赖都通过 go get 下载到指定的 GOPATH 中去。当然这种方案还可以撑大多数时间，但随着时间的流逝，随着开发人员的变动，这种管理依赖的弊端就慢慢显现出来。其实这些老路早期的 java 也走过，曾几何时，每个 java 项目里面都会有一个叫 lib 或 libs 的目录，这里放的就是当前项目依赖的包。当 GO 采用 GOPATH 来管理依赖时，开发人员只能被倒逼着用 java 的方式在源码库中自行管理依赖。这样相当于给依赖包做了隔离，同时又具备了版本管理（因为放在源码库）。&lt;/p>
&lt;p>后来在 go1.5 的时候，官方引入了 vender 的概念，其实这也没改变多少，只是官方让大家存放依赖包的目录名称不要乱起了，统一叫 vender 吧。这个方案我觉得比依赖 GOPATH 还糟糕，因为 vendor 目录脱离了版本管理，导致更换依赖包版本很困难，在当前项目对依赖包的版本更新可能会影响其他项目的使用（如果新版本的依赖包有较大变动的话），同时如何将依赖包放到 vendor 下呢？等等。当然官方做出的这些变动可能是想像 maven 那样，推动社区来完成这件事，因而直接推动了上文提到的基于 vendor 的依赖管理工具的诞生。直至后来官方默认的社区做出来 dep，这下安静了，尽管刚开始时也不怎么好用，但有总比没有好。&lt;/p>
&lt;p>go1.11 在 vgo 的基础上，官方推出了 go module。在发布前，官方与社区的大神们还为此开吵，认为官方太不厚道且独断专行。完全忽视 dep 社区的存在，无视 dep 在 go 语言中的地位与贡献。喜欢八卦的朋友们，可搜索《关于 Go Module 的争吵》一览大神是怎么吵架的，也可从中学习他们的思想。&lt;/p>
&lt;p>相对于 java 的依赖管理工具 maven 或 gradle 来说，gradle 是 maven 的升级版，同时带来了 DSL 与元编程的特性，这无疑使得 gradle 异常地强大。但 gradle.io 在国内的可达情况也不尽如人意，好就好在其与 maven 仓库标准的兼容，使得从 maven 转到 gradle 几乎没有额外的成本及阻力。&lt;/p>
&lt;p>扯了这么多，依赖管理对于一门语言是必不可少的。c 有 cmake，java 有 maven、gradle，rust 有 cargo，那么 go 的 dep 或者 module 就用起来吧，看完大神吵架之后，喜欢哪个就选哪个。是不可能产生一个能满足所有人要求的依赖管理工具的，就连号称最牛逼的 cargo 也不例外。在一般的项目中，能用到的依赖管理功能也就那常用的几个而已，对大多数项目来说，适用好用就行。&lt;/p>
&lt;h2 id="构建方式">构建方式&lt;/h2>
&lt;p>gopher 第七条：按需构建&lt;/p>
&lt;p>构建的目标是让代码成为可运行程序。构建的过程应该是低成本并且让人愉悦的，显然 C 在这一方面让人抓狂，而 go 确实做得不错。并且能在任何平台下编译出另外一个平台的可执行程序。不管你的 go 程序是 CLI、GUI、WEB 或者其他形式的网络通讯程序，在 go 的世界里都只需要一个命令构建成可执行程序（依赖也一并被打包），即可在目标系统上运行。在这一点上，java 是望尘莫及了。
下面是用来构建 go 程序常用的参数，其他参数可通过 go help environment 命令查看。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>参数&lt;/th>
&lt;th>值&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>CGO_ENABLED&lt;/td>
&lt;td>0 or 1&lt;/td>
&lt;td>是否支持 cgo 命令，如果 go 代码中有 c 代码，需要设置为 1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>GOOS&lt;/td>
&lt;td>darwin, freebsd, linux, windows&lt;/td>
&lt;td>可执行程序运行的目标操作系统&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>GOARCH&lt;/td>
&lt;td>386, amd64, arm&lt;/td>
&lt;td>可执行程序运行的目标操作系统架构&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Linux下编译Mac 64位可执行程序&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CGO_ENABLED&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span> GOOS&lt;span style="color:#f92672">=&lt;/span>darwin GOARCH&lt;span style="color:#f92672">=&lt;/span>amd64 go build main.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Linux下编译windows 64位可执行程序&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CGO_ENABLED&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span> GOOS&lt;span style="color:#f92672">=&lt;/span>windows GOARCH&lt;span style="color:#f92672">=&lt;/span>amd64 go build main.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 如果想减少二进制程序的大小，可以加上-ldflags &amp;#34;-s -w&amp;#34;，但同时会丢掉调试信息，即不能用gdb调试了。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 如果想更进一步减少程序大小，可以使用加壳工具，比如upx&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="版本变化">版本变化&lt;/h1>
&lt;p>Go 1.16 将会弃用 io/ioutil 包，ioutil 包中的功能将会由 io 及 os 包所替代。详见：&lt;a href="https://github.com/golang/go/issues/40025">#40025&lt;/a>、&lt;a href="https://golang.org/doc/go1.16#ioutil">Go 1.16 Release Notes&lt;/a>&lt;/p></description></item><item><title>Docs: Go 环境安装与使用</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</guid><description/></item><item><title>Docs: Go 规范与标准库</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E8%A7%84%E8%8C%83%E4%B8%8E%E6%A0%87%E5%87%86%E5%BA%93/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E8%A7%84%E8%8C%83%E4%B8%8E%E6%A0%87%E5%87%86%E5%BA%93/</guid><description/></item><item><title>Docs: Go 网络编程</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</guid><description/></item><item><title>Docs: Go 第三方库</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/</guid><description/></item><item><title>Docs: Go 工具</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E5%B7%A5%E5%85%B7/</guid><description/></item><item><title>Docs: Go 单元测试</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;/blockquote>
&lt;h2 id="1-如何写好单元测试">1 如何写好单元测试&lt;/h2>
&lt;p>单元测试(Unit Tests, UT) 是一个优秀项目不可或缺的一部分，特别是在一些频繁变动和多人合作开发的项目中尤为重要。你或多或少都会有因为自己的提交，导致应用挂掉或服务宕机的经历。如果这个时候你的修改导致测试用例失败，你再重新审视自己的修改，发现之前的修改还有一些特殊场景没有包含，恭喜你减少了一次上库失误。也会有这样的情况，项目很大，启动环境很复杂，你优化了一个函数的性能，或是添加了某个新的特性，如果部署在正式环境上之后再进行测试，成本太高。对于这种场景，几个小小的测试用例或许就能够覆盖大部分的测试场景。而且在开发过程中，效率最高的莫过于所见即所得了，单元测试也能够帮助你做到这一点，试想一下，假如你一口气写完一千行代码，debug 的过程也不会轻松，如果在这个过程中，对于一些逻辑较为复杂的函数，同时添加一些测试用例，即时确保正确性，最后集成的时候，会是另外一番体验。&lt;/p>
&lt;p>如何写好单元测试呢？&lt;/p>
&lt;p>首先，学会写测试用例。比如如何测试单个函数/方法；比如如何做基准测试；比如如何写出简洁精炼的测试代码；再比如遇到数据库访问等的方法调用时，如何 &lt;code>mock&lt;/code>。&lt;/p>
&lt;p>然后，写可测试的代码。&lt;code>高内聚，低耦合&lt;/code>是软件工程的原则，同样，对测试而言，函数/方法写法不同，测试难度也是不一样的。职责单一，参数类型简单，与其他函数耦合度低的函数往往更容易测试。我们经常会说，“这种代码没法测试”，这种时候，就得思考函数的写法可不可以改得更好一些。为了代码可测试而重构是值得的。&lt;/p>
&lt;p>接下来将介绍如何使用 Go 语言的标准库 &lt;code>testing&lt;/code> 进行单元测试。&lt;/p>
&lt;h2 id="2-一个简单例子">2 一个简单例子&lt;/h2>
&lt;p>Go 语言推荐测试文件和源代码文件放在一块，测试文件以 &lt;code>_test.go&lt;/code> 结尾。比如，当前 package 有 &lt;code>calc.go&lt;/code> 一个文件，我们想测试 &lt;code>calc.go&lt;/code> 中的 &lt;code>Add&lt;/code> 和 &lt;code>Mul&lt;/code> 函数，那么应该新建 &lt;code>calc_test.go&lt;/code> 作为测试文件。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>example/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |--calc.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |--calc_test.go
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>假如 &lt;code>calc.go&lt;/code> 的代码如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Add&lt;/span>(&lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#66d9ef">int&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">b&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Mul&lt;/span>(&lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#66d9ef">int&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">b&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>那么 &lt;code>calc_test.go&lt;/code> 中的测试用例可以这么写：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#e6db74">&amp;#34;testing&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">TestAdd&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">testing&lt;/span>.&lt;span style="color:#a6e22e">T&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">ans&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">Add&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>); &lt;span style="color:#a6e22e">ans&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;1 + 2 expected be 3, but %d got&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">ans&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">ans&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">Add&lt;/span>(&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">10&lt;/span>, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">20&lt;/span>); &lt;span style="color:#a6e22e">ans&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">30&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;-10 + -20 expected be -30, but %d got&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">ans&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>测试用例名称一般命名为 &lt;code>Test&lt;/code> 加上待测试的方法名。&lt;/li>
&lt;li>测试用的参数有且只有一个，在这里是 &lt;code>t *testing.T&lt;/code>。&lt;/li>
&lt;li>基准测试(benchmark)的参数是 &lt;code>*testing.B&lt;/code>，TestMain 的参数是 &lt;code>*testing.M&lt;/code> 类型。&lt;/li>
&lt;/ul>
&lt;p>运行 &lt;code>go test&lt;/code>，该 package 下所有的测试用例都会被执行。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ go test
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ok example 0.009s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>或 &lt;code>go test -v&lt;/code>，&lt;code>-v&lt;/code> 参数会显示每个用例的测试结果，另外 &lt;code>-cover&lt;/code> 参数可以查看覆盖率。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ go test -v
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">===&lt;/span> RUN TestAdd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--- PASS: TestAdd &lt;span style="color:#f92672">(&lt;/span>0.00s&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">===&lt;/span> RUN TestMul
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--- PASS: TestMul &lt;span style="color:#f92672">(&lt;/span>0.00s&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PASS
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ok example 0.007s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果只想运行其中的一个用例，例如 &lt;code>TestAdd&lt;/code>，可以用 &lt;code>-run&lt;/code> 参数指定，该参数支持通配符 &lt;code>*&lt;/code>，和部分正则表达式，例如 &lt;code>^&lt;/code>、&lt;code>$&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ go test -run TestAdd -v
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">===&lt;/span> RUN TestAdd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--- PASS: TestAdd &lt;span style="color:#f92672">(&lt;/span>0.00s&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PASS
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ok example 0.007s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="3-子测试subtests">3 子测试(Subtests)&lt;/h2>
&lt;p>子测试是 Go 语言内置支持的，可以在某个测试用例中，根据测试场景使用 &lt;code>t.Run&lt;/code>创建不同的子测试用例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">TestMul&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">testing&lt;/span>.&lt;span style="color:#a6e22e">T&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Run&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;pos&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">testing&lt;/span>.&lt;span style="color:#a6e22e">T&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">Mul&lt;/span>(&lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>) &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Fatal&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;fail&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Run&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;neg&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">testing&lt;/span>.&lt;span style="color:#a6e22e">T&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">Mul&lt;/span>(&lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>) &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">6&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Fatal&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;fail&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>之前的例子测试失败时使用 &lt;code>t.Error/t.Errorf&lt;/code>，这个例子中使用 &lt;code>t.Fatal/t.Fatalf&lt;/code>，区别在于前者遇错不停，还会继续执行其他的测试用例，后者遇错即停。&lt;/li>
&lt;/ul>
&lt;p>运行某个测试用例的子测试：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ go test -run TestMul/pos -v
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">===&lt;/span> RUN TestMul
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">===&lt;/span> RUN TestMul/pos
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--- PASS: TestMul &lt;span style="color:#f92672">(&lt;/span>0.00s&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --- PASS: TestMul/pos &lt;span style="color:#f92672">(&lt;/span>0.00s&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PASS
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ok example 0.008s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>对于多个子测试的场景，更推荐如下的写法(table-driven tests)：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">TestMul&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">testing&lt;/span>.&lt;span style="color:#a6e22e">T&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">cases&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> []&lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Name&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">A&lt;/span>, &lt;span style="color:#a6e22e">B&lt;/span>, &lt;span style="color:#a6e22e">Expected&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">&amp;#34;pos&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>, &lt;span style="color:#ae81ff">6&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">&amp;#34;neg&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">6&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">&amp;#34;zero&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">cases&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Run&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">Name&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">testing&lt;/span>.&lt;span style="color:#a6e22e">T&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">ans&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">Mul&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">A&lt;/span>, &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">B&lt;/span>); &lt;span style="color:#a6e22e">ans&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">Expected&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Fatalf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;%d * %d expected %d, but %d got&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">A&lt;/span>, &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">B&lt;/span>, &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">Expected&lt;/span>, &lt;span style="color:#a6e22e">ans&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>所有用例的数据组织在切片 &lt;code>cases&lt;/code> 中，看起来就像一张表，借助循环创建子测试。这样写的好处有：&lt;/p>
&lt;ul>
&lt;li>新增用例非常简单，只需给 cases 新增一条测试数据即可。&lt;/li>
&lt;li>测试代码可读性好，直观地能够看到每个子测试的参数和期待的返回值。&lt;/li>
&lt;li>用例失败时，报错信息的格式比较统一，测试报告易于阅读。&lt;/li>
&lt;/ul>
&lt;p>如果数据量较大，或是一些二进制数据，推荐使用相对路径从文件中读取。&lt;/p>
&lt;h2 id="4-帮助函数helpers">4 帮助函数(helpers)&lt;/h2>
&lt;p>对一些重复的逻辑，抽取出来作为公共的帮助函数(helpers)，可以增加测试代码的可读性和可维护性。 借助帮助函数，可以让测试用例的主逻辑看起来更清晰。&lt;/p>
&lt;p>例如，我们可以将创建子测试的逻辑抽取出来：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#e6db74">&amp;#34;testing&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">calcCase&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span>{ &lt;span style="color:#a6e22e">A&lt;/span>, &lt;span style="color:#a6e22e">B&lt;/span>, &lt;span style="color:#a6e22e">Expected&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">createMulTestCase&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">testing&lt;/span>.&lt;span style="color:#a6e22e">T&lt;/span>, &lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">calcCase&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">ans&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">Mul&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">A&lt;/span>, &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">B&lt;/span>); &lt;span style="color:#a6e22e">ans&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">Expected&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Fatalf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;%d * %d expected %d, but %d got&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">A&lt;/span>, &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">B&lt;/span>, &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">Expected&lt;/span>, &lt;span style="color:#a6e22e">ans&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">TestMul&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">testing&lt;/span>.&lt;span style="color:#a6e22e">T&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">createMulTestCase&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">calcCase&lt;/span>{&lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>, &lt;span style="color:#ae81ff">6&lt;/span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">createMulTestCase&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">calcCase&lt;/span>{&lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">6&lt;/span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">createMulTestCase&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">calcCase&lt;/span>{&lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在这里，我们故意创建了一个错误的测试用例，运行 &lt;code>go test&lt;/code>，用例失败，会报告错误发生的文件和行号信息：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ go test
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--- FAIL: TestMul &lt;span style="color:#f92672">(&lt;/span>0.00s&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> calc_test.go:11: &lt;span style="color:#ae81ff">2&lt;/span> * &lt;span style="color:#ae81ff">0&lt;/span> expected 1, but &lt;span style="color:#ae81ff">0&lt;/span> got
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>FAIL
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>exit status &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>FAIL example 0.007s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到，错误发生在第 11 行，也就是帮助函数 &lt;code>createMulTestCase&lt;/code> 内部。18, 19, 20 行都调用了该方法，我们第一时间并不能够确定是哪一行发生了错误。有些帮助函数还可能在不同的函数中被调用，报错信息都在同一处，不方便问题定位。因此，Go 语言在 1.9 版本中引入了 &lt;code>t.Helper()&lt;/code>，用于标注该函数是帮助函数，报错时将输出帮助函数调用者的信息，而不是帮助函数的内部信息。&lt;/p>
&lt;p>修改 &lt;code>createMulTestCase&lt;/code>，调用 &lt;code>t.Helper()&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">createMulTestCase&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">calcCase&lt;/span>, &lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">testing&lt;/span>.&lt;span style="color:#a6e22e">T&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Helper&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Run&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">Name&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">testing&lt;/span>.&lt;span style="color:#a6e22e">T&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">ans&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">Mul&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">A&lt;/span>, &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">B&lt;/span>); &lt;span style="color:#a6e22e">ans&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">Expected&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Fatalf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;%d * %d expected %d, but %d got&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">A&lt;/span>, &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">B&lt;/span>, &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">Expected&lt;/span>, &lt;span style="color:#a6e22e">ans&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行 &lt;code>go test&lt;/code>，报错信息如下，可以非常清晰地知道，错误发生在第 20 行。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ go test
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--- FAIL: TestMul &lt;span style="color:#f92672">(&lt;/span>0.00s&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> calc_test.go:20: &lt;span style="color:#ae81ff">2&lt;/span> * &lt;span style="color:#ae81ff">0&lt;/span> expected 1, but &lt;span style="color:#ae81ff">0&lt;/span> got
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>FAIL
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>exit status &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>FAIL example 0.006s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>关于 &lt;code>helper&lt;/code> 函数的 2 个建议：&lt;/p>
&lt;ul>
&lt;li>不要返回错误， 帮助函数内部直接使用 &lt;code>t.Error&lt;/code> 或 &lt;code>t.Fatal&lt;/code> 即可，在用例主逻辑中不会因为太多的错误处理代码，影响可读性。&lt;/li>
&lt;li>调用 &lt;code>t.Helper()&lt;/code> 让报错信息更准确，有助于定位。&lt;/li>
&lt;/ul>
&lt;h2 id="5-setup-和-teardown">5 setup 和 teardown&lt;/h2>
&lt;p>如果在同一个测试文件中，每一个测试用例运行前后的逻辑是相同的，一般会写在 setup 和 teardown 函数中。例如执行前需要实例化待测试的对象，如果这个对象比较复杂，很适合将这一部分逻辑提取出来；执行后，可能会做一些资源回收类的工作，例如关闭网络连接，释放文件等。标准库 &lt;code>testing&lt;/code> 提供了这样的机制：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">setup&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Before all tests&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">teardown&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;After all tests&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Test1&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">testing&lt;/span>.&lt;span style="color:#a6e22e">T&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;I&amp;#39;m test1&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Test2&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">testing&lt;/span>.&lt;span style="color:#a6e22e">T&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;I&amp;#39;m test2&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">TestMain&lt;/span>(&lt;span style="color:#a6e22e">m&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">testing&lt;/span>.&lt;span style="color:#a6e22e">M&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">setup&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">code&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">Run&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">teardown&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">Exit&lt;/span>(&lt;span style="color:#a6e22e">code&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>在这个测试文件中，包含有 2 个测试用例，&lt;code>Test1&lt;/code> 和 &lt;code>Test2&lt;/code>。&lt;/li>
&lt;li>如果测试文件中包含函数 &lt;code>TestMain&lt;/code>，那么生成的测试将调用 TestMain(m)，而不是直接运行测试。&lt;/li>
&lt;li>调用 &lt;code>m.Run()&lt;/code> 触发所有测试用例的执行，并使用 &lt;code>os.Exit()&lt;/code> 处理返回的状态码，如果不为 0，说明有用例失败。&lt;/li>
&lt;li>因此可以在调用 &lt;code>m.Run()&lt;/code> 前后做一些额外的准备(setup)和回收(teardown)工作。&lt;/li>
&lt;/ul>
&lt;p>执行 &lt;code>go test&lt;/code>，将会输出&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ go test
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Before all tests
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>I&lt;span style="color:#e6db74">&amp;#39;m test1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">I&amp;#39;&lt;/span>m test2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PASS
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>After all tests
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ok example 0.006s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="6-网络测试network">6 网络测试(Network)&lt;/h2>
&lt;h3 id="61-tcphttp">6.1 TCP/HTTP&lt;/h3>
&lt;p>假设需要测试某个 API 接口的 handler 能够正常工作，例如 helloHandler&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">helloHandler&lt;/span>(&lt;span style="color:#a6e22e">w&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">ResponseWriter&lt;/span>, &lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Request&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">w&lt;/span>.&lt;span style="color:#a6e22e">Write&lt;/span>([]byte(&lt;span style="color:#e6db74">&amp;#34;hello world&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>那我们可以创建真实的网络连接进行测试：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;io/ioutil&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;net&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;net/http&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;testing&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">handleError&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">testing&lt;/span>.&lt;span style="color:#a6e22e">T&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Helper&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Fatal&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;failed&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">TestConn&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">testing&lt;/span>.&lt;span style="color:#a6e22e">T&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ln&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">net&lt;/span>.&lt;span style="color:#a6e22e">Listen&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;tcp&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;127.0.0.1:0&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">handleError&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">ln&lt;/span>.&lt;span style="color:#a6e22e">Close&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">HandleFunc&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/hello&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">helloHandler&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Serve&lt;/span>(&lt;span style="color:#a6e22e">ln&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">resp&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Get&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;http://&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">ln&lt;/span>.&lt;span style="color:#a6e22e">Addr&lt;/span>().&lt;span style="color:#a6e22e">String&lt;/span>() &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;/hello&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">handleError&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">resp&lt;/span>.&lt;span style="color:#a6e22e">Body&lt;/span>.&lt;span style="color:#a6e22e">Close&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">body&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">ioutil&lt;/span>.&lt;span style="color:#a6e22e">ReadAll&lt;/span>(&lt;span style="color:#a6e22e">resp&lt;/span>.&lt;span style="color:#a6e22e">Body&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">handleError&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> string(&lt;span style="color:#a6e22e">body&lt;/span>) &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;hello world&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Fatal&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;expected hello world, but got&amp;#34;&lt;/span>, string(&lt;span style="color:#a6e22e">body&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>net.Listen(&amp;quot;tcp&amp;quot;, &amp;quot;127.0.0.1:0&amp;quot;)&lt;/code>：监听一个未被占用的端口，并返回 Listener。&lt;/li>
&lt;li>调用 &lt;code>http.Serve(ln, nil)&lt;/code> 启动 http 服务。&lt;/li>
&lt;li>使用 &lt;code>http.Get&lt;/code> 发起一个 Get 请求，检查返回值是否正确。&lt;/li>
&lt;li>尽量不对 &lt;code>http&lt;/code> 和 &lt;code>net&lt;/code> 库使用 mock，这样可以覆盖较为真实的场景。&lt;/li>
&lt;/ul>
&lt;h3 id="62-httptest">6.2 httptest&lt;/h3>
&lt;p>针对 http 开发的场景，使用标准库 &lt;code>net/http/httptest&lt;/code> 进行测试更为高效。&lt;/p>
&lt;p>上述的测试用例改写如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;io/ioutil&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;net/http&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;net/http/httptest&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;testing&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">TestConn&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">testing&lt;/span>.&lt;span style="color:#a6e22e">T&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">req&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">httptest&lt;/span>.&lt;span style="color:#a6e22e">NewRequest&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;GET&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;http://example.com/foo&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">w&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">httptest&lt;/span>.&lt;span style="color:#a6e22e">NewRecorder&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">helloHandler&lt;/span>(&lt;span style="color:#a6e22e">w&lt;/span>, &lt;span style="color:#a6e22e">req&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">bytes&lt;/span>, &lt;span style="color:#a6e22e">_&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">ioutil&lt;/span>.&lt;span style="color:#a6e22e">ReadAll&lt;/span>(&lt;span style="color:#a6e22e">w&lt;/span>.&lt;span style="color:#a6e22e">Result&lt;/span>().&lt;span style="color:#a6e22e">Body&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> string(&lt;span style="color:#a6e22e">bytes&lt;/span>) &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;hello world&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Fatal&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;expected hello world, but got&amp;#34;&lt;/span>, string(&lt;span style="color:#a6e22e">bytes&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用 httptest 模拟请求对象(req)和响应对象(w)，达到了相同的目的。&lt;/p>
&lt;h2 id="7-benchmark-基准测试">7 Benchmark 基准测试&lt;/h2>
&lt;p>基准测试用例的定义如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">BenchmarkName&lt;/span>(&lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">testing&lt;/span>.&lt;span style="color:#a6e22e">B&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>函数名必须以 &lt;code>Benchmark&lt;/code> 开头，后面一般跟待测试的函数名&lt;/li>
&lt;li>参数为 &lt;code>b *testing.B&lt;/code>。&lt;/li>
&lt;li>执行基准测试时，需要添加 &lt;code>-bench&lt;/code> 参数。&lt;/li>
&lt;/ul>
&lt;p>例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">BenchmarkHello&lt;/span>(&lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">testing&lt;/span>.&lt;span style="color:#a6e22e">B&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &amp;lt; &lt;span style="color:#a6e22e">b&lt;/span>.&lt;span style="color:#a6e22e">N&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Sprintf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;hello&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ go test -benchmem -bench .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>BenchmarkHello-16 &lt;span style="color:#ae81ff">15991854&lt;/span> 71.6 ns/op &lt;span style="color:#ae81ff">5&lt;/span> B/op &lt;span style="color:#ae81ff">1&lt;/span> allocs/op
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>基准测试报告每一列值对应的含义如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">BenchmarkResult&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">N&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">T&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Duration&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Bytes&lt;/span> &lt;span style="color:#66d9ef">int64&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">MemAllocs&lt;/span> &lt;span style="color:#66d9ef">uint64&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">MemBytes&lt;/span> &lt;span style="color:#66d9ef">uint64&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果在运行前基准测试需要一些耗时的配置，则可以使用 &lt;code>b.ResetTimer()&lt;/code> 先重置定时器，例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">BenchmarkHello&lt;/span>(&lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">testing&lt;/span>.&lt;span style="color:#a6e22e">B&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">b&lt;/span>.&lt;span style="color:#a6e22e">ResetTimer&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &amp;lt; &lt;span style="color:#a6e22e">b&lt;/span>.&lt;span style="color:#a6e22e">N&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Sprintf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;hello&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用 &lt;code>RunParallel&lt;/code> 测试并发性能&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">BenchmarkParallel&lt;/span>(&lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">testing&lt;/span>.&lt;span style="color:#a6e22e">B&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">templ&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">template&lt;/span>.&lt;span style="color:#a6e22e">Must&lt;/span>(&lt;span style="color:#a6e22e">template&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;test&amp;#34;&lt;/span>).&lt;span style="color:#a6e22e">Parse&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Hello, {{.}}!&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">b&lt;/span>.&lt;span style="color:#a6e22e">RunParallel&lt;/span>(&lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">pb&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">testing&lt;/span>.&lt;span style="color:#a6e22e">PB&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">buf&lt;/span> &lt;span style="color:#a6e22e">bytes&lt;/span>.&lt;span style="color:#a6e22e">Buffer&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">pb&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">buf&lt;/span>.&lt;span style="color:#a6e22e">Reset&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">templ&lt;/span>.&lt;span style="color:#a6e22e">Execute&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">buf&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;World&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ go test -benchmem -bench .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>BenchmarkParallel-16 &lt;span style="color:#ae81ff">3325430&lt;/span> &lt;span style="color:#ae81ff">375&lt;/span> ns/op &lt;span style="color:#ae81ff">272&lt;/span> B/op &lt;span style="color:#ae81ff">8&lt;/span> allocs/op
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="附-参考">附 参考&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://geektutu.com/post/quick-gomock.html">Go Mock (gomock) 简明教程&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://golang.org/pkg/testing/">testing - golang.org&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://about.sourcegraph.com/go/advanced-testing-in-go">Advanced Testing in Go - sourcegraph.com&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="go-test-命令行工具">go test 命令行工具&lt;/h1>
&lt;h2 id="syntax语法">Syntax(语法)&lt;/h2>
&lt;p>&lt;strong>go test [build/test FLAGS] [PACKAGES] [build/test FLAGS &amp;amp; test binary FLAGS]&lt;/strong>&lt;/p>
&lt;h3 id="flags">FLAGS&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>-v&lt;/strong> # 打印完整的输出，要不只能看到一个运行是否成功的提示和消耗时间&lt;/li>
&lt;li>&lt;strong>-run&lt;/strong> # 指定要运行的测试函数&lt;/li>
&lt;/ul>
&lt;h2 id="example">Example&lt;/h2>
&lt;p>运行文件夹下 *.go 的所有测试函数&lt;/p>
&lt;ul>
&lt;li>&lt;code>go test -v pkg/4_arrays_and_slices/array/*.go&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>运行文件夹下 *.go 文件中名为 TestArrays 这个测试函数&lt;/p>
&lt;ul>
&lt;li>&lt;code>go test -run ^TestArrays$ -v pkg/4_arrays_and_slices/array/*.go&lt;/code>&lt;/li>
&lt;/ul></description></item><item><title>Docs: Go 常见问题</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</guid><description/></item><item><title>Docs: Go 扩展</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E6%89%A9%E5%B1%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E6%89%A9%E5%B1%95/</guid><description/></item><item><title>Docs: Go 源码解析</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</guid><description>
&lt;p>原文链接：&lt;a href="https://mp.weixin.qq.com/s/5GabUkkgIyz7nJ33OjfBkw">https://mp.weixin.qq.com/s/5GabUkkgIyz7nJ33OjfBkw&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>本文使用 golang 1.17 代码，如有任何问题，还望指出。&lt;/p>
&lt;/blockquote>
&lt;h3 id="golang-代码被操作系统运行起来的流程">Golang 代码被操作系统运行起来的流程&lt;/h3>
&lt;h4 id="一编译">一、编译&lt;/h4>
&lt;p>go 源代码首先要通过 go build 编译为可执行文件，在 linux 平台上为 ELF 格式的可执行文件，编译阶段会经过编译器、汇编器、链接器三个过程最终生成可执行文件。&lt;/p>
&lt;ul>
&lt;li>1、编译器：_.go 源码通过 go 编译器生成为 _.s 的 plan9 汇编代码，Go 编译器入口是 compile/internal/gc/main.go 文件的 main 函数；&lt;/li>
&lt;li>2、汇编器：通过 go 汇编器将编译器生成的 _.s 汇编语言转换为机器代码，并写出最终的目标程序 _.o 文件，src/cmd/internal/obj 包实现了 go 汇编器；&lt;/li>
&lt;li>3、链接器：汇编器生成的一个个 *.o 目标文件通过链接处理得到最终的可执行程序，src/cmd/link/internal/ld 包实现了链接器；&lt;/li>
&lt;/ul>
&lt;h4 id="二运行">二、运行&lt;/h4>
&lt;p>go 源码通过上述几个步骤生成可执行文件后，二进制文件在被操作系统加载起来运行时会经过如下几个阶段：&lt;/p>
&lt;ul>
&lt;li>1、从磁盘上把可执行程序读入内存；&lt;/li>
&lt;li>2、创建进程和主线程；&lt;/li>
&lt;li>3、为主线程分配栈空间；&lt;/li>
&lt;li>4、把由用户在命令行输入的参数拷贝到主线程的栈；&lt;/li>
&lt;li>5、把主线程放入操作系统的运行队列等待被调度执起来运行；&lt;/li>
&lt;/ul>
&lt;h3 id="golang-程序启动流程分析">Golang 程序启动流程分析&lt;/h3>
&lt;h4 id="1通过-gdb-调试分析程序启动流程">1、通过 gdb 调试分析程序启动流程&lt;/h4>
&lt;p>此处以一个简单的 go 程序通过单步调试来分析其启动过程的流程：&lt;/p>
&lt;p>&lt;code>main.go&lt;/code>&lt;/p>
&lt;pre tabindex="0">&lt;code>package main
import &amp;#34;fmt&amp;#34;
func main() {
    fmt.Println(&amp;#34;hello world&amp;#34;)
}
&lt;/code>&lt;/pre>&lt;p>编译该程序并使用 gdb 进行调试。使用 gdb 调试时首先在程序入口处设置一个断点，然后进行单步调试即可看到该程序启动过程中的代码执行流程。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ go build -gcflags &amp;#34;-N -l&amp;#34; -o main main.go
$ gdb ./main
(gdb) info files
Symbols from &amp;#34;/home/gosoon/main&amp;#34;.
Local exec file:
    `/home/gosoon/main&amp;#39;, file type elf64-x86-64.
    Entry point: 0x465860
    0x0000000000401000 - 0x0000000000497893 is .text
    0x0000000000498000 - 0x00000000004dbb65 is .rodata
    0x00000000004dbd00 - 0x00000000004dc42c is .typelink
    0x00000000004dc440 - 0x00000000004dc490 is .itablink
    0x00000000004dc490 - 0x00000000004dc490 is .gosymtab
    0x00000000004dc4a0 - 0x0000000000534b90 is .gopclntab
    0x0000000000535000 - 0x0000000000535020 is .go.buildinfo
    0x0000000000535020 - 0x00000000005432e4 is .noptrdata
    0x0000000000543300 - 0x000000000054aa70 is .data
    0x000000000054aa80 - 0x00000000005781f0 is .bss
    0x0000000000578200 - 0x000000000057d510 is .noptrbss
    0x0000000000400f9c - 0x0000000000401000 is .note.go.buildid
(gdb) b *0x465860
Breakpoint 1 at 0x465860: file /home/gosoon/golang/go/src/runtime/rt0_linux_amd64.s, line 8.
(gdb) r
Starting program: /home/gaofeilei/./main
Breakpoint 1, _rt0_amd64_linux () at /home/gaofeilei/golang/go/src/runtime/rt0_linux_amd64.s:8
8        JMP _rt0_amd64(SB)
(gdb) n
_rt0_amd64 () at /home/gaofeilei/golang/go/src/runtime/asm_amd64.s:15
15        MOVQ    0(SP), DI   // argc
(gdb) n
16        LEAQ    8(SP), SI   // argv
(gdb) n
17        JMP runtime·rt0_go(SB)
(gdb) n
runtime.rt0_go () at /home/gaofeilei/golang/go/src/runtime/asm_amd64.s:91
91        MOVQ    DI, AX      // argc
......
231        CALL    runtime·mstart(SB)
(gdb) n
hello world
[Inferior 1 (process 39563) exited normally]
&lt;/code>&lt;/pre>&lt;p>通过单步调试可以看到程序入口函数在 &lt;code>runtime/rt0_linux_amd64.s&lt;/code> 文件中的第 8 行，最终会执行 &lt;code>CALL runtime·mstart(SB)&lt;/code> 指令后输出 “hello world” 然后程序就退出了。&lt;/p>
&lt;p>启动流程流程中的函数调用如下所示：&lt;/p>
&lt;pre>&lt;code>rt0_linux_amd64.s --&amp;gt;_rt0_amd64 --&amp;gt; rt0_go--&amp;gt;runtime·settls --&amp;gt;runtime·check--&amp;gt;runtime·args--&amp;gt;runtime·osinit--&amp;gt;runtime·schedinit--&amp;gt;runtime·newproc--&amp;gt;runtime·mstart
&lt;/code>&lt;/pre>
&lt;h4 id="2golang-启动流程分析">2、golang 启动流程分析&lt;/h4>
&lt;p>上节通过 gdb 调试已经看到了 golang 程序在启动过程中会执行一系列的汇编指令，本节会具体分析启动程序过程中每条指令的含义，了解了这些才能明白 golang 程序在启动过程中所执行的操作。&lt;/p>
&lt;p>&lt;code>src/runtime/rt0_linux_amd64.s&lt;/code>&lt;/p>
&lt;pre>&lt;code>#include &amp;quot;textflag.h&amp;quot;TEXT _rt0_amd64_linux(SB),NOSPLIT,$-8    JMP _rt0_amd64(SB)TEXT _rt0_amd64_linux_lib(SB),NOSPLIT,$0    JMP _rt0_amd64_lib(SB)
&lt;/code>&lt;/pre>
&lt;p>首先执行的第 8 行即 &lt;code>JMP _rt0_amd64&lt;/code>，此处在 amd64 平台下运行，&lt;code>_rt0_amd64&lt;/code> 函数所在的文件为 &lt;code>src/runtime/asm_amd64.s&lt;/code>。&lt;/p>
&lt;pre>&lt;code>TEXT _rt0_amd64(SB),NOSPLIT,$-8    // 处理 argc 和 argv 参数，argc 是指命令行输入参数的个数，argv 存储了所有的命令行参数    MOVQ    0(SP), DI   // argc    // argv 为指针类型    LEAQ    8(SP), SI   // argv    JMP runtime·rt0_go(SB)
&lt;/code>&lt;/pre>
&lt;p>&lt;code>_rt0_amd64&lt;/code> 函数中将 argc 和 argv 两个参数保存到 DI 和 SI 寄存器后跳转到了 &lt;code>rt0_go&lt;/code> 函数，&lt;code>rt0_go&lt;/code> 函数的主要作用：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>1、将 argc、argv 参数拷贝到主线程栈上；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>2、初始化全局变量 g0，为 g0 在主线程栈上分配大约 64K 栈空间，并设置 g0 的 stackguard0，stackguard1，stack 三个字段；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>3、执行 CPUID 指令，探测 CPU 信息；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>4、执行 nocpuinfo 代码块判断是否需要初始化 cgo；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>5、执行 needtls 代码块，初始化 tls 和 m0；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>6、执行 ok 代码块，首先将 m0 和 g0 绑定，然后调用 &lt;code>runtime·args&lt;/code> 函数处理进程参数和环境变量，调用 &lt;code>runtime·osinit&lt;/code> 函数初始化 cpu 数量，调用 &lt;code>runtime·schedinit&lt;/code> 初始化调度器，调用 &lt;code>runtime·newproc&lt;/code> 创建第一个 goroutine 执行 main 函数，调用 &lt;code>runtime·mstart&lt;/code> 启动主线程，主线程会执行第一个 goroutine 来运行 main 函数，此处会阻塞住直到进程退出；&lt;/p>
&lt;p>TEXT runtime·rt0_go(SB),NOSPLIT|TOPFRAME,$0    // 处理命令行参数的代码    MOVQ    DI, AX      // AX = argc    MOVQ    SI, BX      // BX = argv    // 将栈扩大39字节，此处为什么扩大39字节暂时还没有搞清楚    SUBQ    $(4&lt;em>8+7), SP    ANDQ    $~15, SP    // 调整为 16 字节对齐    MOVQ    AX, 16(SP)  //argc放在SP + 16字节处    MOVQ    BX, 24(SP)  //argv放在SP + 24字节处    // 开始初始化 g0，runtime·g0 是一个全局变量，变量在 src/runtime/proc.go 中定义，全局变量会保存在进程内存空间的数据区，下文会介绍查看 elf 二进制文件中的代码数据和全局变量的方法    // g0 的栈是从进程栈内存区进行分配的，g0 占用了大约 64k 大小。    MOVQ    $runtime·g0(SB), DI    // g0 的地址放入 DI 寄存器    LEAQ    (-64&lt;/em>1024+104)(SP), BX // BX = SP - 64&lt;em>1024 + 104    // 开始初始化 g0 对象的 stackguard0,stackguard1,stack 这三个字段    MOVQ    BX, g_stackguard0(DI) // g0.stackguard0 = SP - 64&lt;/em>1024 + 104    MOVQ    BX, g_stackguard1(DI) // g0.stackguard1 = SP - 64&lt;em>1024 + 104    MOVQ    BX, (g_stack+stack_lo)(DI) // g0.stack.lo = SP - 64&lt;/em>1024 + 104    MOVQ    SP, (g_stack+stack_hi)(DI) // g0.stack.hi = SP&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>执行完以上指令后，进程内存空间布局如下所示：&lt;/p>
&lt;p>然后开始执行获取 cpu 信息的指令以及与 cgo 初始化相关的，此段代码暂时可以不用关注。&lt;/p>
&lt;pre>&lt;code>    // 执行CPUID指令，尝试获取CPU信息，探测 CPU 和 指令集的代码    MOVL    $0, AX    CPUID    MOVL    AX, SI    CMPL    AX, $0    JE  nocpuinfo    // Figure out how to serialize RDTSC.    // On Intel processors LFENCE is enough. AMD requires MFENCE.    // Don't know about the rest, so let's do MFENCE.    CMPL    BX, $0x756E6547  // &amp;quot;Genu&amp;quot;    JNE notintel    CMPL    DX, $0x49656E69  // &amp;quot;ineI&amp;quot;    JNE notintel    CMPL    CX, $0x6C65746E  // &amp;quot;ntel&amp;quot;    JNE notintel    MOVB    $1, runtime·isIntel(SB)    MOVB    $1, runtime·lfenceBeforeRdtsc(SB)notintel:    // Load EAX=1 cpuid flags    MOVL    $1, AX    CPUID    MOVL    AX, runtime·processorVersionInfo(SB)nocpuinfo:    // cgo 初始化相关，_cgo_init 为全局变量    MOVQ    _cgo_init(SB), AX    // 检查 AX 是否为 0    TESTQ   AX, AX    // 跳转到 needtls    JZ  needtls    // arg 1: g0, already in DI    MOVQ    $setg_gcc&amp;lt;&amp;gt;(SB), SI // arg 2: setg_gcc    CALL    AX    // 如果开启了 CGO 特性，则会修改 g0 的部分字段    MOVQ    $runtime·g0(SB), CX    MOVQ    (g_stack+stack_lo)(CX), AX    ADDQ    $const__StackGuard, AX    MOVQ    AX, g_stackguard0(CX)    MOVQ    AX, g_stackguard1(CX)
&lt;/code>&lt;/pre>
&lt;p>下面开始执行 &lt;code>needtls&lt;/code> 代码块，初始化 tls 和 m0，tls 为线程本地存储，在 golang 程序运行过程中，每个 m 都需要和一个工作线程关联，那么工作线程如何知道其关联的 m，此时就会用到线程本地存储，线程本地存储就是线程私有的全局变量，通过线程本地存储可以为每个线程初始化一个私有的全局变量 m，然后就可以在每个工作线程中都使用相同的全局变量名来访问不同的 m 结构体对象。后面会分析到其实每个工作线程 m 在刚刚被创建出来进入调度循环之前就利用线程本地存储机制为该工作线程实现了一个指向 m 结构体实例对象的私有全局变量。&lt;/p>
&lt;p>在后面代码分析中，会经常看到调用 &lt;code>getg&lt;/code> 函数，&lt;code>getg&lt;/code> 函数会从线程本地存储中获取当前正在运行的 g，这里获取出来的 m 关联的 g0。&lt;/p>
&lt;p>tls 地址会写到 m0 中，而 m0 会和 g0 绑定，所以可以直接从 tls 中获取到 g0。&lt;/p>
&lt;pre>&lt;code>// 下面开始初始化tls(thread local storage，线程本地存储)，设置 m0 为线程私有变量，将 m0 绑定到主线程needtls:    LEAQ    runtime·m0+m_tls(SB), DI  //DI = &amp;amp;m0.tls，取m0的tls成员的地址到DI寄存器    // 调用 runtime·settls 函数设置线程本地存储，runtime·settls 函数的参数在 DI 寄存器中    // 在 runtime·settls 函数中将 m0.tls[1] 的地址设置为 tls 的地址    // runtime·settls 函数在 runtime/sys_linux_amd64.s#599    CALL    runtime·settls(SB)    // 此处是在验证本地存储是否可以正常工作，确保值正确写入了 m0.tls，    // 如果有问题则 abort 退出程序    // get_tls 是宏，位于 runtime/go_tls.h    get_tls(BX)                      // 将 tls 的地址放入 BX 中,即 BX = &amp;amp;m0.tls[1]    MOVQ    $0x123, g(BX)  // BX = 0x123，即 m0.tls[0] = 0x123    MOVQ    runtime·m0+m_tls(SB), AX    // AX = m0.tls[0]    CMPQ    AX, $0x123    JEQ 2(PC)                                   // 如果相等则向后跳转两条指令即到 ok 代码块    CALL    runtime·abort(SB)   // 使用 INT 指令执行中断
&lt;/code>&lt;/pre>
&lt;p>继续执行 ok 代码块，主要逻辑为：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>将 m0 和 g0 进行绑定，启动主线程；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>调用 &lt;code>runtime·osinit&lt;/code> 函数用来初始化 cpu 数量，调度器初始化时需要知道当前系统有多少个 CPU 核；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>调用 &lt;code>runtime·schedinit&lt;/code> 函数会初始化 m0 和 p 对象，还设置了全局变量 sched 的 maxmcount 成员为 10000，限制最多可以创建 10000 个操作系统线程出来工作；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>调用 &lt;code>runtime·newproc&lt;/code> 为 main 函数创建 goroutine；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>调用 &lt;code>runtime·mstart&lt;/code> 启动主线程，执行 main 函数；&lt;/p>
&lt;p>// 首先将 g0 地址保存在 tls 中，即 m0.tls[0] = &amp;amp;g0，然后将 m0 和 g0 绑定// 即 m0.g0 = g0, g0.m = m0ok:    get_tls(BX)                                // 获取tls地址到BX寄存器，即 BX = m0.tls[0]    LEAQ    runtime·g0(SB), CX  // CX = &amp;amp;g0    MOVQ    CX, g(BX)                   // m0.tls[0]=&amp;amp;g0    LEAQ    runtime·m0(SB), AX  // AX = &amp;amp;m0    MOVQ    CX, m_g0(AX)  // m0.g0 = g0    MOVQ    AX, g_m(CX)   // g0.m = m0    CLD             // convention is D is always left cleared    // check 函数检查了各种类型以及类型转换是否有问题，位于 runtime/runtime1.go#137 中    CALL    runtime·check(SB)    // 将 argc 和 argv 移动到 SP+0 和 SP+8 的位置    // 此处是为了将 argc 和 argv 作为 runtime·args 函数的参数    MOVL    16(SP), AX    MOVL    AX, 0(SP)    MOVQ    24(SP), AX    MOVQ    AX, 8(SP)    // args 函数会从栈中读取参数和环境变量等进行处理    // args 函数位于 runtime/runtime1.go#61    CALL    runtime·args(SB)    // osinit 函数用来初始化 cpu 数量，函数位于 runtime/os_linux.go#301    CALL    runtime·osinit(SB)    // schedinit 函数用来初始化调度器，函数位于 runtime/proc.go#654    CALL    runtime·schedinit(SB)    // 创建第一个 goroutine 执行 runtime.main 函数。获取 runtime.main 的地址，调用 newproc 创建 g    MOVQ    $runtime·mainPC(SB), AX    PUSHQ   AX            // runtime.main 作为 newproc 的第二个参数入栈    PUSHQ   $0            // newproc 的第一个参数入栈，该参数表示runtime.main函数需要的参数大小，runtime.main没有参数，所以这里是0    // newproc 创建一个新的 goroutine 并放置到等待队列里，该 goroutine 会执行runtime.main 函数， 函数位于 runtime/proc.go#4250    CALL    runtime·newproc(SB)    // 弹出栈顶的数据    POPQ    AX    POPQ    AX    // mstart 函数会启动主线程进入调度循环，然后运行刚刚创建的 goroutine，mstart 会阻塞住，除非函数退出，mstart 函数位于 runtime/proc.go#1328    CALL    runtime·mstart(SB)    CALL    runtime·abort(SB)   // mstart should never return    RET    // Prevent dead-code elimination of debugCallV2, which is    // intended to be called by debuggers.    MOVQ    $runtime·debugCallV2&lt;!-- raw HTML omitted -->(SB), AX    RET&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>此时进程内存空间布局如下所示：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/64702256-7b44-4118-a751-c1856ee08205/640" alt="">&lt;/p>
&lt;h4 id="查看-elf-二进制文件结构">查看 ELF 二进制文件结构&lt;/h4>
&lt;p>可以通过 readelf 命令查看 ELF 二进制文件的结构，可以看到二进制文件中代码区和数据区的内容，全局变量保存在数据区，函数保存在代码区。&lt;/p>
&lt;pre>&lt;code>$ readelf -s main | grep runtime.g0  1765: 000000000054b3a0   376 OBJECT  GLOBAL DEFAULT   11 runtime.g0// _cgo_init 为全局变量$ readelf -s main | grep -i _cgo_init  2159: 000000000054aa88     8 OBJECT  GLOBAL DEFAULT   11 _cgo_init
&lt;/code>&lt;/pre>
&lt;h3 id="总结">总结&lt;/h3>
&lt;p>本文主要介绍 Golang 程序启动流程中的关键代码，启动过程的主要代码是通过 Plan9 汇编编写的，如果没有做过底层相关的东西看起来还是非常吃力的，笔者对其中的一些细节也未完全搞懂，如果有兴趣可以私下讨论一些详细的实现细节，其中有一些硬编码的数字以及操作系统和硬件相关的规范理解起来相对比较困难。针对 Golang runtime 中的几大组件也会陆续写出相关的分析文章。&lt;/p>
&lt;p>参考：
&lt;a href="https://loulan.me/post/golang-boot/">https://loulan.me/post/golang-boot/&lt;/a>
&lt;a href="https://mp.weixin.qq.com/s/W9D4Sl-6jYfcpczzdPfByQ">https://mp.weixin.qq.com/s/W9D4Sl-6jYfcpczzdPfByQ&lt;/a>
&lt;a href="https://programmerall.com/article/6411655977/">https://programmerall.com/article/6411655977/&lt;/a>
&lt;a href="https://ld246.com/article/1547651846124">https://ld246.com/article/1547651846124&lt;/a>
&lt;a href="https://zboya.github.io/post/go_scheduler/#mstartfn">https://zboya.github.io/post/go_scheduler/#mstartfn&lt;/a>
&lt;a href="https://blog.csdn.net/yockie/article/details/79166713">https://blog.csdn.net/yockie/article/details/79166713&lt;/a>
&lt;a href="https://blog.csdn.net/ocean_1996/article/details/107088530">https://blog.csdn.net/ocean_1996/article/details/107088530&lt;/a>
&lt;a href="https://chao-tic.github.io/blog/2018/12/25/tls#the-assembly">https://chao-tic.github.io/blog/2018/12/25/tls#the-assembly&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/64702256-7b44-4118-a751-c1856ee08205/640" alt="">&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/64702256-7b44-4118-a751-c1856ee08205/640" alt="">&lt;/p></description></item></channel></rss>