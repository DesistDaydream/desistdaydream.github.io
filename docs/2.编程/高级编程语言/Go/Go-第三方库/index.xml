<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go 第三方库 on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/</link><description>Recent content in Go 第三方库 on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/index.xml" rel="self" type="application/rss+xml"/><item><title>配置文件管理</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/</guid><description>概述 参考：
golang 常用库：配置文件解析库/管理工具-viper 使用 Viper golang 常用库：gorilla/mux-http 路由库使用 golang 常用库：配置文件解析库/管理工具-viper 使用 golang 常用库：操作数据库的 orm 框架-gorm 基本使用 golang 常用库：字段参数验证库-validator 使用 一、viper 简介 viper 配置管理解析库，是由大神 Steve Francia 开发，他在 google 领导着 golang 的产品开发，他也是 gohugo.io 的创始人之一，命令行解析库 cobra 开发者。总之，他在 golang 领域是专家，很牛的一个人。
他的 github 地址：https://github.com/spf13
viper 是一个配置管理的解决方案，它能够从 json，toml，ini，yaml，hcl，env 等多种格式文件中，读取配置内容，它还能从一些远程配置中心读取配置文件，如 consul，etcd 等；它还能够监听文件的内容变化。
二、viper 功能介绍 读取 json，toml，ini，yaml，hcl，env 等格式的文件内容 读取远程配置文件，如 consul，etcd 等和监控配置文件变化 读取命令行 flag 的值 从 buffer 中读取值 配置文件又可以分为不同的环境，比如 dev，test，prod 等。
viper 可以帮助你专注配置文件管理。
viper 读取配置文件的优先顺序，从高到低，如下：
显式设置的 Set 函数 命令行参数 环境变量 配置文件 远程 k-v 存储系统，如 consul，etcd 等 默认值 Viper 配置 key 是不区分大小写的。</description></item><item><title>前端管理</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/%E5%89%8D%E7%AB%AF%E7%AE%A1%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/%E5%89%8D%E7%AB%AF%E7%AE%A1%E7%90%86/</guid><description>概述 参考：
Go 语言也可以处理前端页面，比如使用 DOM、等等。
暂时没发现可以使用 BOM 的方式，毕竟没法在浏览器内嵌入 Go 代码，但是却可以在本地处理 HTML 页面(使用 DOM)。
goquery 参考：
GitHub 项目，PuerkitoBio/goquery goquery 为 Go 语言带来了类似于 jQuery 的语法和一组特性。它基于 Go 的 net/html 包和 CSS 选择器库 cascadia。由于 net/html 解析器返回节点，而不是功能齐全的 DOM 树，jQuery 的状态操作函数（如 height()、css()、detach()）已被取消。
说白了，这是一个操作 DOM 树的库。</description></item><item><title>Go 第三方库</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/Go-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/Go-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/</guid><description>概述 参考：
第三方库一般属于由个人开发，实现更多丰富功能的库。在 Go.dev 可以搜索自己想要使用的所有库。
日志 logrus 参考：
GitHub 项目，sirupsen/logrus https://pkg.go.dev/github.com/sirupsen/logrus Logrus 是一种结构化得用于 Go 语言的日志处理器，完全与 Go 标准库中的 log 库。这名字来源于吉祥物 Walrus(海象)，所以在官方文档中，所有示例都与 Walrus 相关。
package main import ( &amp;#34;github.com/sirupsen/logrus&amp;#34; ) func main() { // Logrus 共有七个日志级别，由高到底分别为：Trace、Debug、Info、Warning、Error、Fatal、Panic // 默认情况下，只有 Info 及以下级别可以正常输出。如果想要输出高级别日志，通过 SetLevel() 函数设置日志级别即可 // SetLevel() 函数的实参可以通过 ParseLevel() 函数将字符串解析为对应级别 // logrus.SetLevel(logrus.InfoLevel) // 输出 Info 级别的日志内容 logrus.Info(&amp;#34;Hello World&amp;#34;) } // 输出内容如下： // time=&amp;#34;2021-09-20T11:58:36+08:00&amp;#34; level=info msg=&amp;#34;Hello World&amp;#34; 文件处理 Excel 文件处理 Excelize 参考：
GitHub 项目，xuri/excelize 官方文档 网络相关 https://pkg.</description></item><item><title>数据库</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93/</guid><description>概述 想要通过代码来控制数据库，那么在代码中，首先需要连接到数据库，只有打开了一个连接（socket），才可以通过代码来对数据库进行操作
而一般情况下，数据库并不是通过 go 语言写的，那么如何连接呢，就需要调用数据库的 API 接口，而想要调用该接口，则需要使用第三方库才可以，这个第三方库，这个库会提供几种&amp;quot;method&amp;quot;，包括连接数据库，对数据库执行操作等。
GORM 参考：
GitHub 项目，jinzhu/gorm 该项目迁移到 go-gorm/gorm gorm模糊查询和分页查询同时查总条数 GORM 是一个出色的 ORM 库，旨在对开发人员友好。
全功能ORM（几乎） 关联（包含一个，包含多个，属于，多对多，多种包含） Callbacks（创建/保存/更新/删除/查找之前/之后） 预加载（急加载） 事务 复合主键 SQL Builder 自动迁移 日志 可扩展，编写基于GORM回调的插件 每个功能都有测试 开发人员友好 常用示例 gorm模糊查询和分页查询同时查总条数
func (u *userService) GetuserList(offset, limit int, search User) (users []User, count int, err error) { if search.Name != &amp;#34;&amp;#34; { u.mysql = u.mysql.Where(&amp;#34;name LIKE ?&amp;#34;, search.Name+&amp;#34;%&amp;#34;) } if search.Category != &amp;#34;&amp;#34; { u.mysql = u.mysql.Where(&amp;#34;age =?&amp;#34;, search.Age) } err = u.</description></item></channel></rss>