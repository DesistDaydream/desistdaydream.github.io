<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – Go 第三方库</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/</link><description>Recent content in Go 第三方库 on 断念梦</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: CLI</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/CLI/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/CLI/</guid><description/></item><item><title>Docs: Go 第三方库</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/Go-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/Go-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;/blockquote>
&lt;h1 id="日志">日志&lt;/h1>
&lt;h2 id="logrus">logrus&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/sirupsen/logrus">GitHub 项目，sirupsen/logrus&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://pkg.go.dev/github.com/sirupsen/logrus">https://pkg.go.dev/github.com/sirupsen/logrus&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Logrus 是一种结构化得用于 Go 语言的日志处理器，完全与 Go 标准库中的 log 库。这名字来源于吉祥物 Walrus(海象)，所以在官方文档中，所有示例都与 Walrus 相关。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;github.com/sirupsen/logrus&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Logrus 共有七个日志级别，由高到底分别为：Trace、Debug、Info、Warning、Error、Fatal、Panic
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 默认情况下，只有 Info 及以下级别可以正常输出。如果想要输出高级别日志，通过 SetLevel() 函数设置日志级别即可
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// SetLevel() 函数的实参可以通过 ParseLevel() 函数将字符串解析为对应级别
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// logrus.SetLevel(logrus.InfoLevel)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 输出 Info 级别的日志内容
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">logrus&lt;/span>.&lt;span style="color:#a6e22e">Info&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Hello World&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 输出内容如下：
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// time=&amp;#34;2021-09-20T11:58:36+08:00&amp;#34; level=info msg=&amp;#34;Hello World&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="文件处理">文件处理&lt;/h1>
&lt;h2 id="excel-文件处理">Excel 文件处理&lt;/h2>
&lt;h3 id="excelize">Excelize&lt;/h3>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/xuri/excelize">GitHub 项目，xuri/excelize&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://xuri.me/excelize/zh-hans/">官方文档&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>Docs: GUI</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/GUI/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/GUI/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;/blockquote>
&lt;h1 id="go-opencv">Go OpenCV&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://www.codebaoku.com/it-go/it-go-146781.html">http://www.codebaoku.com/it-go/it-go-146781.html&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;a href="https://github.com/go-opencv/go-opencv">https://github.com/go-opencv/go-opencv&lt;/a>
&lt;a href="https://github.com/hybridgroup/gocv">https://github.com/hybridgroup/gocv&lt;/a>&lt;/p>
&lt;h1 id="fyne">Fyne&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/fyne-io/fyne">GitHub 项目，fyne-io/fyne&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://fyne.io/">官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.jianshu.com/p/be97c0668252">简书，go fyne 开发桌面应用&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://juejin.cn/post/7091103604492206087">稀土掘金，Fyne（go 跨平台 GUI）中文文档-小部件（五）&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Fyne 是一个易于学习、免费、开源的工具包，用于构建适用于桌面、移动设备及其他设备的图形应用程序。&lt;/p>
&lt;p>注意：使用 Fyne 需要安装 &lt;a href="https://sourceforge.net/projects/mingw-w64/">MinGW-w64&lt;/a>&lt;/p>
&lt;h2 id="hello-world">Hello World&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;fyne.io/fyne/v2/app&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;fyne.io/fyne/v2/container&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;fyne.io/fyne/v2/widget&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">app&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">w&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">a&lt;/span>.&lt;span style="color:#a6e22e">NewWindow&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Hello&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">hello&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">widget&lt;/span>.&lt;span style="color:#a6e22e">NewLabel&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Hello Fyne!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">w&lt;/span>.&lt;span style="color:#a6e22e">SetContent&lt;/span>(&lt;span style="color:#a6e22e">container&lt;/span>.&lt;span style="color:#a6e22e">NewVBox&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">hello&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">widget&lt;/span>.&lt;span style="color:#a6e22e">NewButton&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Hi!&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">hello&lt;/span>.&lt;span style="color:#a6e22e">SetText&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Welcome :)&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">w&lt;/span>.&lt;span style="color:#a6e22e">ShowAndRun&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: 配置文件解析库/管理工具</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E5%BA%93_%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E5%BA%93_%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.cnblogs.com/jiujuan/p/13799976.html">golang 常用库：配置文件解析库/管理工具-viper 使用&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="viper">Viper&lt;/h1>
&lt;p>&lt;a href="https://www.cnblogs.com/jiujuan/p/12768907.html">golang 常用库：gorilla/mux-http 路由库使用&lt;/a>
&lt;a href="https://www.cnblogs.com/jiujuan/p/13799976.html">golang 常用库：配置文件解析库/管理工具-viper 使用&lt;/a>
&lt;a href="https://www.cnblogs.com/jiujuan/p/12676195.html">golang 常用库：操作数据库的 orm 框架-gorm 基本使用&lt;/a>
&lt;a href="https://www.cnblogs.com/jiujuan/p/13823864.html">golang 常用库：字段参数验证库-validator 使用&lt;/a>&lt;/p>
&lt;h2 id="一viper-简介4077122348">一、viper 简介&lt;a href="#4077122348">#&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/spf13/viper">viper&lt;/a> 配置管理解析库，是由大神 &lt;a href="https://github.com/spf13">Steve Francia&lt;/a> 开发，他在 google 领导着 &lt;a href="https://github.com/golang">golang&lt;/a> 的产品开发，他也是 &lt;a href="https://github.com/gohugoio">gohugo.io&lt;/a> 的创始人之一，命令行解析库 &lt;a href="https://github.com/spf13/cobra">cobra&lt;/a> 开发者。总之，他在 golang 领域是专家，很牛的一个人。&lt;/p>
&lt;p>他的 github 地址：&lt;a href="https://github.com/spf13">https://github.com/spf13&lt;/a>&lt;/p>
&lt;p>viper 是一个配置管理的解决方案，它能够从 json，toml，ini，yaml，hcl，env 等多种格式文件中，读取配置内容，它还能从一些远程配置中心读取配置文件，如 consul，etcd 等；它还能够监听文件的内容变化。&lt;/p>
&lt;p>viper 的 logo：
&lt;a href="https://notes-learning.oss-cn-beijing.aliyuncs.com/8bd079e6-95f4-4e49-88dd-56fda3a097b8/650581-20201011224724478-1312624445.png">
&lt;/a>&lt;/p>
&lt;h2 id="二viper-功能介绍3907931073">二、viper 功能介绍&lt;a href="#3907931073">#&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>读取 json，toml，ini，yaml，hcl，env 等格式的文件内容&lt;/li>
&lt;li>读取远程配置文件，如 consul，etcd 等和监控配置文件变化&lt;/li>
&lt;li>读取命令行 flag 的值&lt;/li>
&lt;li>从 buffer 中读取值&lt;/li>
&lt;/ul>
&lt;p>配置文件又可以分为不同的环境，比如 dev，test，prod 等。&lt;/p>
&lt;p>&lt;a href="https://github.com/spf13/viper">viper&lt;/a> 可以帮助你专注配置文件管理。&lt;/p>
&lt;p>&lt;a href="https://github.com/spf13/viper">viper&lt;/a> 读取配置文件的优先顺序，从高到低，如下：&lt;/p>
&lt;ul>
&lt;li>显式设置的 Set 函数&lt;/li>
&lt;li>命令行参数&lt;/li>
&lt;li>环境变量&lt;/li>
&lt;li>配置文件&lt;/li>
&lt;li>远程 k-v 存储系统，如 consul，etcd 等&lt;/li>
&lt;li>默认值&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Viper 配置 key 是不区分大小写的。&lt;/p>
&lt;/blockquote>
&lt;p>其实，上面的每一种文件格式，都有一些比较有名的解析库，如：&lt;/p>
&lt;ul>
&lt;li>toml ：&lt;a href="https://github.com/BurntSushi/toml">https://github.com/BurntSushi/toml&lt;/a>&lt;/li>
&lt;li>json ：json 的解析库比较多，下面列出几个常用的
&lt;ul>
&lt;li>&lt;a href="https://www.cnblogs.com/jiujuan/p/github.com/json-iterator/go">https://github.com/json-iterator/go&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/mailru/easyjson">https://github.com/mailru/easyjson&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/bitly/go-simplejson">https://github.com/bitly/go-simplejson&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/tidwall/gjson">https://github.com/tidwall/gjson&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ini : &lt;a href="https://github.com/go-ini/ini">https://github.com/go-ini/ini&lt;/a>
等等单独文件格式解析库。&lt;/li>
&lt;/ul>
&lt;p>但是为啥子要用 viper，因为它是一个综合文件解析库，包含了上面所有的文件格式解析，是一个集合体，少了配置多个库的烦恼。&lt;/p>
&lt;h2 id="三viper-使用1121971021">三、viper 使用&lt;a href="#1121971021">#&lt;/a>&lt;/h2>
&lt;p>安装 viper 命令：
&lt;code>go get github.com/spf13/viper&lt;/code>&lt;/p>
&lt;blockquote>
&lt;p>文档: &lt;a href="https://github.com/spf13/viper/blob/master/README.md#putting-values-into-viper">https://github.com/spf13/viper/blob/master/README.md#putting-values-into-viper&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h3 id="通过-viperset-设置值3253932725">通过 viper.Set 设置值&lt;a href="#3253932725">#&lt;/a>&lt;/h3>
&lt;p>如果某个键通过 viper.Set 设置了值，那么这个值读取的优先级最高&lt;/p>
&lt;pre tabindex="0">&lt;code>
Copy
`viper.Set(&amp;#34;mysql.info&amp;#34;, &amp;#34;this is mysql info&amp;#34;)`
&lt;/code>&lt;/pre>&lt;h3 id="设置默认值3993553561">设置默认值&lt;a href="#3993553561">#&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;a href="https://github.com/spf13/viper/blob/master/README.md#establishing-defaults">https://github.com/spf13/viper/blob/master/README.md#establishing-defaults&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>viper 支持默认值的设置。如果配置文件、环境变量、远程配置中没有设置键值，就可以通过 viper 设置一些默认值。&lt;/p>
&lt;p>Examples：&lt;/p>
&lt;pre tabindex="0">&lt;code>
Copy
`viper.SetDefault(&amp;#34;ContentDir&amp;#34;, &amp;#34;content&amp;#34;)
viper.SetDefault(&amp;#34;LayoutDir&amp;#34;, &amp;#34;layouts&amp;#34;)
viper.SetDefault(&amp;#34;Taxonomies&amp;#34;, map[string]string{&amp;#34;tag&amp;#34;: &amp;#34;tags&amp;#34;, &amp;#34;category&amp;#34;: &amp;#34;categories&amp;#34;})`
&lt;/code>&lt;/pre>&lt;h3 id="读取配置文件207672104">读取配置文件&lt;a href="#207672104">#&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;a href="https://github.com/spf13/viper/blob/master/README.md#reading-config-files">https://github.com/spf13/viper/blob/master/README.md#reading-config-files&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h4 id="读取配置文件说明1210123030">读取配置文件说明&lt;a href="#1210123030">#&lt;/a>&lt;/h4>
&lt;p>&lt;strong>读取配置文件要求&lt;/strong>：最少要知道从哪个位置查找配置文件。用户一定要设置这个路径。&lt;/p>
&lt;p>viper 可以从多个路径搜索配置文件，单个 viper 实例只支持单个配置文件。
viper 本身没有设置默认的搜索路径，需要用户自己设置默认路径。&lt;/p>
&lt;p>&lt;strong>viper 搜索和读取配置文件例子片段&lt;/strong>：&lt;/p>
&lt;pre tabindex="0">&lt;code>
Copy
`viper.SetConfigName(&amp;#34;config&amp;#34;)
viper.SetConfigType(&amp;#34;yaml&amp;#34;)
viper.AddConfigPath(&amp;#34;/etc/appname/&amp;#34;)
viper.AddConfigPath(&amp;#34;$HOME/.appname&amp;#34;)
viper.AddConfigPath(&amp;#34;.&amp;#34;)
err := viper.ReadInConfig()
if err != nil {
panic(fmt.Errorf(&amp;#34;Fatal error config file: %s \n&amp;#34;, err))
}`
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>说明：
这里执行 viper.ReadInConfig()之后，viper 才能确定到底用哪个文件，viper 按照上面的 AddConfigPath() 进行搜索，找到第一个名为 config.&lt;strong>ext&lt;/strong> (&lt;strong>这里的 ext 代表扩展名&lt;/strong>： 如 json,toml,yaml,yml,ini,prop 等扩展名) 的文件后即停止搜索。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>如果有多个名称为 config 的配置文件，viper 怎么搜索呢？它会按照如下顺序搜索&lt;/p>
&lt;ul>
&lt;li>config.json&lt;/li>
&lt;li>config.toml&lt;/li>
&lt;li>config.yaml&lt;/li>
&lt;li>config.yml&lt;/li>
&lt;li>config.properties (这种一般是 java 中的配置文件名)&lt;/li>
&lt;li>config.props (这种一般是 java 中的配置文件名)&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>你还可以处理一些特殊情况：&lt;/p>
&lt;pre tabindex="0">&lt;code>
Copy
`if err := viper.ReadInConfig(); err != nil {
if _, ok := err.(viper.ConfigFileNotFoundError); ok {
} else {
}
}`
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>&lt;strong>注意[自 1.6 起]&lt;/strong>：  你也可以有不带扩展名的文件，并以编程方式指定其格式。对于位于用户$HOME 目录中的配置文件没有任何扩展名，如.bashrc。&lt;/p>
&lt;/blockquote>
&lt;h3 id="例子-1-读取配置文件1754466272">例子 1. 读取配置文件&lt;a href="#1754466272">#&lt;/a>&lt;/h3>
&lt;p>config.toml 配置文件：&lt;/p>
&lt;pre tabindex="0">&lt;code>
Copy
`title = &amp;#34;toml exaples&amp;#34;
redis = &amp;#34;127.0.0.1:3300&amp;#34;
[mysql]
host = &amp;#34;192.168.1.1&amp;#34;
ports = 3306
username = &amp;#34;root&amp;#34;
password = &amp;#34;root123456&amp;#34;`
&lt;/code>&lt;/pre>&lt;p>viper_toml.go:&lt;/p>
&lt;pre tabindex="0">&lt;code>
Copy
`package main
import(
&amp;#34;fmt&amp;#34;
&amp;#34;github.com/spf13/viper&amp;#34;
)
type Config struct {
Redis string
MySQL MySQLConfig
}
type MySQLConfig struct {
Port int
Host string
Username string
Password string
}
func main() {
var config Config
viper.SetConfigName(&amp;#34;config&amp;#34;)
viper.AddConfigPath(&amp;#34;.&amp;#34;)
err := viper.ReadInConfig()
if err != nil {
fmt.Println(err)
return
}
viper.Unmarshal(&amp;amp;config)
fmt.Println(&amp;#34;config: &amp;#34;, config, &amp;#34;redis: &amp;#34;, config.Redis)
}`
&lt;/code>&lt;/pre>&lt;h3 id="例子-2-读取多个配置文件2922297707">例子 2. 读取多个配置文件&lt;a href="#2922297707">#&lt;/a>&lt;/h3>
&lt;p>在例子 1 基础上多增加一个 json 的配置文件，config3.json 配置文件：&lt;/p>
&lt;pre tabindex="0">&lt;code>
Copy
`{
&amp;#34;redis&amp;#34;: &amp;#34;127.0.0.1:33000&amp;#34;,
&amp;#34;mysql&amp;#34;: {
&amp;#34;port&amp;#34;: 3306,
&amp;#34;host&amp;#34;: &amp;#34;127.0.0.1&amp;#34;,
&amp;#34;username&amp;#34;: &amp;#34;root&amp;#34;,
&amp;#34;password&amp;#34;: &amp;#34;123456&amp;#34;
}
}`
&lt;/code>&lt;/pre>&lt;p>viper_multi.go&lt;/p>
&lt;pre tabindex="0">&lt;code>
Copy
`package main
import (
&amp;#34;fmt&amp;#34;
&amp;#34;github.com/spf13/viper&amp;#34;
)
type Config struct {
Redis string
MySQL MySQLConfig
}
type MySQLConfig struct {
Port int
Host string
Username string
Password string
}
func main() {
var config1 Config
vtoml := viper.New()
vtoml.SetConfigName(&amp;#34;config&amp;#34;)
vtoml.SetConfigType(&amp;#34;toml&amp;#34;)
vtoml.AddConfigPath(&amp;#34;.&amp;#34;)
if err := vtoml.ReadInConfig(); err != nil {
fmt.Println(err)
return
}
vtoml.Unmarshal(&amp;amp;config1)
fmt.Println(&amp;#34;read config.toml&amp;#34;)
fmt.Println(&amp;#34;config: &amp;#34;, config1, &amp;#34;redis: &amp;#34;, config1.Redis)
var config2 Config
vjson := viper.New()
vjson.SetConfigName(&amp;#34;config3&amp;#34;)
vjson.SetConfigType(&amp;#34;json&amp;#34;)
vjson.AddConfigPath(&amp;#34;.&amp;#34;)
if err := vjson.ReadInConfig(); err != nil {
fmt.Println(err)
return
}
vjson.Unmarshal(&amp;amp;config2)
fmt.Println(&amp;#34;read config3.json&amp;#34;)
fmt.Println(&amp;#34;config: &amp;#34;, config1, &amp;#34;redis: &amp;#34;, config1.Redis)
}`
&lt;/code>&lt;/pre>&lt;p>运行：&lt;/p>
&lt;blockquote>
&lt;p>$ go run viper_multi.go&lt;/p>
&lt;p>read config.toml
config:  {127.0.0.1:33000 {0 192.168.1.1 root 123456}} redis:  127.0.0.1:33000
read config3.json
config:  {127.0.0.1:33000 {0 192.168.1.1 root 123456}} redis:  127.0.0.1:33000&lt;/p>
&lt;/blockquote>
&lt;h3 id="例子-3-读取配置项的值3619765688">例子 3. 读取配置项的值&lt;a href="#3619765688">#&lt;/a>&lt;/h3>
&lt;p>新建文件夹 item， 在里面创建文件 config.json，内容如下：&lt;/p>
&lt;pre tabindex="0">&lt;code>
Copy
`{
&amp;#34;redis&amp;#34;: &amp;#34;127.0.0.1:33000&amp;#34;,
&amp;#34;mysql&amp;#34;: {
&amp;#34;port&amp;#34;: 3306,
&amp;#34;host&amp;#34;: &amp;#34;127.0.0.1&amp;#34;,
&amp;#34;username&amp;#34;: &amp;#34;root&amp;#34;,
&amp;#34;password&amp;#34;: &amp;#34;123456&amp;#34;,
&amp;#34;ports&amp;#34;: [
5799,
6029
],
&amp;#34;metric&amp;#34;: {
&amp;#34;host&amp;#34;: &amp;#34;127.0.0.1&amp;#34;,
&amp;#34;port&amp;#34;: 2112
}
}
}`
&lt;/code>&lt;/pre>&lt;p>item/viper_get_item.go 读取配置项的值&lt;/p>
&lt;pre tabindex="0">&lt;code>
Copy
`package main
import (
&amp;#34;fmt&amp;#34;
&amp;#34;github.com/spf13/viper&amp;#34;
)
func main() {
viper.SetConfigName(&amp;#34;config&amp;#34;)
viper.SetConfigType(&amp;#34;json&amp;#34;)
viper.AddConfigPath(&amp;#34;.&amp;#34;)
err := viper.ReadInConfig()
if err != nil {
fmt.Println(err)
return
}
host := viper.Get(&amp;#34;mysql.host&amp;#34;)
username := viper.GetString(&amp;#34;mysql.username&amp;#34;)
port := viper.GetInt(&amp;#34;mysql.port&amp;#34;)
portsSlice := viper.GetIntSlice(&amp;#34;mysql.ports&amp;#34;)
metricPort := viper.GetInt(&amp;#34;mysql.metric.port&amp;#34;)
redis := viper.Get(&amp;#34;redis&amp;#34;)
mysqlMap := viper.GetStringMapString(&amp;#34;mysql&amp;#34;)
if viper.IsSet(&amp;#34;mysql.host&amp;#34;) {
fmt.Println(&amp;#34;[IsSet()]mysql.host is set&amp;#34;)
} else {
fmt.Println(&amp;#34;[IsSet()]mysql.host is not set&amp;#34;)
}
fmt.Println(&amp;#34;mysql - host: &amp;#34;, host, &amp;#34;, username: &amp;#34;, username, &amp;#34;, port: &amp;#34;, port)
fmt.Println(&amp;#34;mysql ports :&amp;#34;, portsSlice)
fmt.Println(&amp;#34;metric port: &amp;#34;, metricPort)
fmt.Println(&amp;#34;redis - &amp;#34;, redis)
fmt.Println(&amp;#34;mysqlmap - &amp;#34;, mysqlMap, &amp;#34;, username: &amp;#34;, mysqlMap[&amp;#34;username&amp;#34;])
}`
&lt;/code>&lt;/pre>&lt;p>运行：&lt;/p>
&lt;blockquote>
&lt;p>$ go run viper_get_item.go&lt;/p>
&lt;p>[IsSet()]mysql.host is set
mysql - host:  127.0.0.1 , username:  root , port:  3306
mysql ports : [5799 6029]
metric port:  2112
redis -  127.0.0.1:33000
mysqlmap -  map[host:127.0.0.1 metric: password:123456 port:3306 ports: username:root] , username:  root&lt;/p>
&lt;/blockquote>
&lt;p>如果把上面的文件 config.json 写成 toml 格式，怎么解析？ 改成 config1.toml:&lt;/p>
&lt;pre tabindex="0">&lt;code>
Copy
`toml = &amp;#34;toml example&amp;#34;
redis = &amp;#34;127.0.0.1:33000&amp;#34;
[mysql]
port = 3306
host = &amp;#34;127.0.0.1&amp;#34;
username = &amp;#34;root&amp;#34;
password = &amp;#34;123456&amp;#34;
ports = [5799,6029]
[mysql.metric]
host = &amp;#34;127.0.0.1&amp;#34;
port = 2112`
&lt;/code>&lt;/pre>&lt;p>其实解析代码差不多，只需修改 2 处，&lt;/p>
&lt;blockquote>
&lt;p>viper.SetConfigName(&amp;ldquo;config&amp;rdquo;) 里的 config 改成 config1 ，
viper.SetConfigType(&amp;ldquo;json&amp;rdquo;)里的 json 改成 toml，其余代码都一样。解析的效果也一样。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>viper 获取值的方法：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Get(key string) : interface{}&lt;/li>
&lt;li>GetBool(key string) : bool&lt;/li>
&lt;li>GetFloat64(key string) : float64&lt;/li>
&lt;li>GetInt(key string) : int&lt;/li>
&lt;li>GetIntSlice(key string) : []int&lt;/li>
&lt;li>GetString(key string) : string&lt;/li>
&lt;li>GetStringMap(key string) : map[string]interface{}&lt;/li>
&lt;li>GetStringMapString(key string) : map[string]string&lt;/li>
&lt;li>GetStringSlice(key string) : []string&lt;/li>
&lt;li>GetTime(key string) : time.Time&lt;/li>
&lt;li>GetDuration(key string) : time.Duration&lt;/li>
&lt;li>IsSet(key string) : bool&lt;/li>
&lt;li>AllSettings() : map[string]interface{}&lt;/li>
&lt;/ul>
&lt;h3 id="例子-4-读取命令行的值1999895528">例子 4. 读取命令行的值&lt;a href="#1999895528">#&lt;/a>&lt;/h3>
&lt;p>新建文件夹 cmd，然后 cmd 文件夹里新建 config.json 文件：&lt;/p>
&lt;pre tabindex="0">&lt;code>
Copy
`{
&amp;#34;redis&amp;#34;:{
&amp;#34;port&amp;#34;: 3301,
&amp;#34;host&amp;#34;: &amp;#34;127.0.0.1&amp;#34;
},
&amp;#34;mysql&amp;#34;: {
&amp;#34;port&amp;#34;: 3306,
&amp;#34;host&amp;#34;: &amp;#34;127.0.0.1&amp;#34;,
&amp;#34;username&amp;#34;: &amp;#34;root&amp;#34;,
&amp;#34;password&amp;#34;: &amp;#34;123456&amp;#34;
}
}`
&lt;/code>&lt;/pre>&lt;p>go 解析文件，cmd/viper_pflag.go：&lt;/p>
&lt;pre tabindex="0">&lt;code>
Copy
`package main
import (
&amp;#34;fmt&amp;#34;
&amp;#34;github.com/spf13/pflag&amp;#34;
&amp;#34;github.com/spf13/viper&amp;#34;
)
func main() {
pflag.Int(&amp;#34;redis.port&amp;#34;, 3302, &amp;#34;redis port&amp;#34;)
viper.BindPFlags(pflag.CommandLine)
pflag.Parse()
viper.SetConfigName(&amp;#34;config&amp;#34;)
viper.SetConfigType(&amp;#34;json&amp;#34;)
viper.AddConfigPath(&amp;#34;.&amp;#34;)
err := viper.ReadInConfig()
if err != nil {
fmt.Println(err)
return
}
host := viper.Get(&amp;#34;mysql.host&amp;#34;)
username := viper.GetString(&amp;#34;mysql.username&amp;#34;)
port := viper.GetInt(&amp;#34;mysql.port&amp;#34;)
redisHost := viper.GetString(&amp;#34;redis.host&amp;#34;)
redisPort := viper.GetInt(&amp;#34;redis.port&amp;#34;)
fmt.Println(&amp;#34;mysql - host: &amp;#34;, host, &amp;#34;, username: &amp;#34;, username, &amp;#34;, port: &amp;#34;, port)
fmt.Println(&amp;#34;redis - host: &amp;#34;, redisHost, &amp;#34;, port: &amp;#34;, redisPort)
}`
&lt;/code>&lt;/pre>&lt;p>&lt;strong>1.不加命令行参数运行：&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>$ go run viper_pflag.go&lt;/p>
&lt;p>mysql - host:  127.0.0.1 , username:  root , port:  3306
redis - host:  127.0.0.1 , port:  3301&lt;/p>
&lt;/blockquote>
&lt;p>说明：redis.port 的值是 3301，是 config.json 配置文件里的值。&lt;/p>
&lt;p>&lt;strong>2.加命令行参数运行&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>$ go run viper_pflag.go &amp;ndash;redis.port 6666&lt;/p>
&lt;p>mysql - host:  127.0.0.1 , username:  root , port:  3306
redis - host:  127.0.0.1 , port:  6666&lt;/p>
&lt;/blockquote>
&lt;p>说明：加了命令行参数 &lt;code>--redis.port 6666&lt;/code>，这时候 redis.port 输出的值为 &lt;code>6666&lt;/code>，读取的是 cmd 命令行的值&lt;/p>
&lt;h3 id="例子-5ioreader-中读取值2003693084">例子 5：io.Reader 中读取值&lt;a href="#2003693084">#&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;a href="https://github.com/spf13/viper#reading-config-from-ioreader">https://github.com/spf13/viper#reading-config-from-ioreader&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>viper_ioreader.go&lt;/p>
&lt;pre tabindex="0">&lt;code>
Copy
``package main
import (
&amp;#34;bytes&amp;#34;
&amp;#34;fmt&amp;#34;
&amp;#34;github.com/spf13/viper&amp;#34;
)
func main() {
viper.SetConfigType(&amp;#34;yaml&amp;#34;)
var yaml = []byte(`
Hacker: true
name: steve
hobbies:
- skateboarding
- snowboarding
- go
clothing:
jacket: leather
trousers: denim
age: 35
eyes : brown
beard: true
`)
err := viper.ReadConfig(bytes.NewBuffer(yaml))
if err != nil {
fmt.Println(err)
return
}
hacker := viper.GetBool(&amp;#34;Hacker&amp;#34;)
hobbies := viper.GetStringSlice(&amp;#34;hobbies&amp;#34;)
jacket := viper.Get(&amp;#34;clothing.jacket&amp;#34;)
age := viper.GetInt(&amp;#34;age&amp;#34;)
fmt.Println(&amp;#34;Hacker: &amp;#34;, hacker, &amp;#34;,hobbies: &amp;#34;, hobbies, &amp;#34;,jacket: &amp;#34;, jacket, &amp;#34;,age: &amp;#34;, age)
}``
&lt;/code>&lt;/pre>&lt;h3 id="例子-6写配置文件1185343853">例子 6：写配置文件&lt;a href="#1185343853">#&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;a href="https://github.com/spf13/viper#writing-config-files">https://github.com/spf13/viper#writing-config-files&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>新建文件 writer/viper_write_config.go:&lt;/p>
&lt;pre tabindex="0">&lt;code>
Copy
`package main
import (
&amp;#34;fmt&amp;#34;
&amp;#34;github.com/spf13/viper&amp;#34;
)
func main() {
viper.SetConfigName(&amp;#34;config&amp;#34;)
viper.SetConfigType(&amp;#34;yaml&amp;#34;)
viper.AddConfigPath(&amp;#34;.&amp;#34;)
viper.Set(&amp;#34;yaml&amp;#34;, &amp;#34;this is a example of yaml&amp;#34;)
viper.Set(&amp;#34;redis.port&amp;#34;, 4405)
viper.Set(&amp;#34;redis.host&amp;#34;, &amp;#34;127.0.0.1&amp;#34;)
viper.Set(&amp;#34;mysql.port&amp;#34;, 3306)
viper.Set(&amp;#34;mysql.host&amp;#34;, &amp;#34;192.168.1.0&amp;#34;)
viper.Set(&amp;#34;mysql.username&amp;#34;, &amp;#34;root123&amp;#34;)
viper.Set(&amp;#34;mysql.password&amp;#34;, &amp;#34;root123&amp;#34;)
if err := viper.WriteConfig(); err != nil {
fmt.Println(err)
}
}`
&lt;/code>&lt;/pre>&lt;p>运行：&lt;/p>
&lt;blockquote>
&lt;p>$ go run viper_write_config.go&lt;/p>
&lt;/blockquote>
&lt;p>没有任何输出表示生成配置文件成功&lt;/p>
&lt;pre tabindex="0">&lt;code>
Copy
`mysql:
host: 192.168.1.0
password: root123
port: 3306
username: root123
redis:
host: 127.0.0.1
port: 4405
yaml: this is a example of yaml`
&lt;/code>&lt;/pre>&lt;h4 id="writeconfig-和-safewriteconfig-区别1355875678">WriteConfig() 和 SafeWriteConfig() 区别:&lt;a href="#1355875678">#&lt;/a>&lt;/h4>
&lt;blockquote>
&lt;p>如果待生成的文件已经存在，那么 SafeWriteConfig()就会报错，&lt;code>Config File &amp;quot;config.yaml&amp;quot; Already Exists&lt;/code>， 而 WriteConfig()则会直接覆盖同名文件。&lt;/p>
&lt;/blockquote>
&lt;h2 id="四参考3058190317">四、参考&lt;a href="#3058190317">#&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/spf13/viper/blob/master/README.md">viper 文档&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.jianshu.com/p/623f8ca5ec12">golang json 库 gjson 的使用&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Docs: 数据库</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;p>想要通过代码来控制数据库，那么在代码中，首先需要连接到数据库，只有打开了一个连接（socket），才可以通过代码来对数据库进行操作&lt;/p>
&lt;p>而一般情况下，数据库并不是通过 go 语言写的，那么如何连接呢，就需要调用数据库的 API 接口，而想要调用该接口，则需要使用第三方库才可以，这个第三方库，这个库会提供几种&amp;quot;method&amp;quot;，包括连接数据库，对数据库执行操作等。&lt;/p>
&lt;h1 id="gorm">GORM&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/jinzhu/gorm">GitHub 项目，jinzhu/gorm&lt;/a>
&lt;ul>
&lt;li>该项目迁移到 &lt;a href="https://github.com/go-gorm/gorm">go-gorm/gorm&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://www.yuedun.wang/blogdetail/5e815979c9109f0f909b4cdd/">gorm模糊查询和分页查询同时查总条数&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>GORM 是一个出色的 &lt;a href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/ORM.md">ORM&lt;/a> 库，旨在对开发人员友好。&lt;/p>
&lt;ul>
&lt;li>全功能ORM（几乎）&lt;/li>
&lt;li>关联（包含一个，包含多个，属于，多对多，多种包含）&lt;/li>
&lt;li>Callbacks（创建/保存/更新/删除/查找之前/之后）&lt;/li>
&lt;li>预加载（急加载）&lt;/li>
&lt;li>事务&lt;/li>
&lt;li>复合主键&lt;/li>
&lt;li>SQL Builder&lt;/li>
&lt;li>自动迁移&lt;/li>
&lt;li>日志&lt;/li>
&lt;li>可扩展，编写基于GORM回调的插件&lt;/li>
&lt;li>每个功能都有测试&lt;/li>
&lt;li>开发人员友好&lt;/li>
&lt;/ul>
&lt;h2 id="常用示例">常用示例&lt;/h2>
&lt;p>gorm模糊查询和分页查询同时查总条数&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">u&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">userService&lt;/span>) &lt;span style="color:#a6e22e">GetuserList&lt;/span>(&lt;span style="color:#a6e22e">offset&lt;/span>, &lt;span style="color:#a6e22e">limit&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">search&lt;/span> &lt;span style="color:#a6e22e">User&lt;/span>) (&lt;span style="color:#a6e22e">users&lt;/span> []&lt;span style="color:#a6e22e">User&lt;/span>, &lt;span style="color:#a6e22e">count&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">search&lt;/span>.&lt;span style="color:#a6e22e">Name&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">u&lt;/span>.&lt;span style="color:#a6e22e">mysql&lt;/span> = &lt;span style="color:#a6e22e">u&lt;/span>.&lt;span style="color:#a6e22e">mysql&lt;/span>.&lt;span style="color:#a6e22e">Where&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;name LIKE ?&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">search&lt;/span>.&lt;span style="color:#a6e22e">Name&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#34;%&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">search&lt;/span>.&lt;span style="color:#a6e22e">Category&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">u&lt;/span>.&lt;span style="color:#a6e22e">mysql&lt;/span> = &lt;span style="color:#a6e22e">u&lt;/span>.&lt;span style="color:#a6e22e">mysql&lt;/span>.&lt;span style="color:#a6e22e">Where&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;age =?&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">search&lt;/span>.&lt;span style="color:#a6e22e">Age&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">u&lt;/span>.&lt;span style="color:#a6e22e">mysql&lt;/span>.&lt;span style="color:#a6e22e">Offset&lt;/span>(&lt;span style="color:#a6e22e">offset&lt;/span>).&lt;span style="color:#a6e22e">Limit&lt;/span>(&lt;span style="color:#a6e22e">limit&lt;/span>).&lt;span style="color:#a6e22e">Find&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">users&lt;/span>).&lt;span style="color:#a6e22e">Offset&lt;/span>(&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>).&lt;span style="color:#a6e22e">Limit&lt;/span>(&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>).&lt;span style="color:#a6e22e">Count&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">count&lt;/span>).&lt;span style="color:#a6e22e">Error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">users&lt;/span>, &lt;span style="color:#a6e22e">count&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这简单的一小段已经包含了gorm的&lt;strong>模糊查询&lt;/strong>，&lt;strong>动态条件&lt;/strong>，&lt;strong>分页查询&lt;/strong>，&lt;strong>数据条数&lt;/strong>。 这就是一个最常见的列表查询，列表需要支持条件查询，模糊查询，分页，从代码可以直接看到。&lt;/p>
&lt;ol>
&lt;li>&lt;code>if&lt;/code>代码是动态组装条件。&lt;/li>
&lt;li>&lt;code>err = u.mysql.Offset(offset).Limit(limit).Find(&amp;amp;users).Offset(-1).Limit(-1).Count(&amp;amp;count).Error&lt;/code> 这行代码包含了数据列表查询和数据条数。&lt;/li>
&lt;li>有些需要注意的地方是&lt;code>u.mysql.Offset(offset).Limit(limit).Find(&amp;amp;users)&lt;/code> 用于查询数据列表，&lt;/li>
&lt;li>&lt;code>.Offset(-1).Limit(-1).Count(&amp;amp;count)&lt;/code>用户查询条数，Offset(-1)和Limit(-1)很重要，不加的话会在统计条数后也加上offset和limit，导致查不到条数。 查询结果：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">SELECT&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#66d9ef">FROM&lt;/span> &lt;span style="color:#f92672">`&lt;/span>&lt;span style="color:#66d9ef">user&lt;/span>&lt;span style="color:#f92672">`&lt;/span> &lt;span style="color:#66d9ef">LIMIT&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span> &lt;span style="color:#66d9ef">OFFSET&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">SELECT&lt;/span> &lt;span style="color:#66d9ef">count&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>) &lt;span style="color:#66d9ef">FROM&lt;/span> &lt;span style="color:#f92672">`&lt;/span>&lt;span style="color:#66d9ef">user&lt;/span>&lt;span style="color:#f92672">`&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="常见问题">常见问题&lt;/h2>
&lt;h3 id="为-for-循环中的多个-or-创建分组">为 For 循环中的多个 Or 创建分组&lt;/h3>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/go-gorm/gorm/issues/5052">go-gorm/gorm issue 5052&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">field&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">queryCardDesc&lt;/span>.&lt;span style="color:#a6e22e">QField&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">result&lt;/span> = &lt;span style="color:#a6e22e">result&lt;/span>.&lt;span style="color:#a6e22e">Or&lt;/span>(&lt;span style="color:#a6e22e">field&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#34; LIKE ?&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;%&amp;#34;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">queryCardDesc&lt;/span>.&lt;span style="color:#a6e22e">Keyword&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#34;%&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面的例子通过 &lt;code>result=result.Where(result)&lt;/code> 分组将会异常，产生多次 SQL，就像这样：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">SELECT&lt;/span> &lt;span style="color:#66d9ef">count&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>) &lt;span style="color:#66d9ef">FROM&lt;/span> &lt;span style="color:#f92672">`&lt;/span>card_descs&lt;span style="color:#f92672">`&lt;/span> &lt;span style="color:#66d9ef">WHERE&lt;/span> (effect &lt;span style="color:#66d9ef">LIKE&lt;/span> &lt;span style="color:#e6db74">&amp;#39;%奥米加%&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">OR&lt;/span> sc_name &lt;span style="color:#66d9ef">LIKE&lt;/span> &lt;span style="color:#e6db74">&amp;#39;%奥米加%&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">OR&lt;/span> evo_cover_effect &lt;span style="color:#66d9ef">LIKE&lt;/span> &lt;span style="color:#e6db74">&amp;#39;%奥米加%&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">OR&lt;/span> sc_name &lt;span style="color:#66d9ef">LIKE&lt;/span> &lt;span style="color:#e6db74">&amp;#39;%奥米加%&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">OR&lt;/span> evo_cover_effect &lt;span style="color:#66d9ef">LIKE&lt;/span> &lt;span style="color:#e6db74">&amp;#39;%奥米加%&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">OR&lt;/span> effect &lt;span style="color:#66d9ef">LIKE&lt;/span> &lt;span style="color:#e6db74">&amp;#39;%奥米加%&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">AND&lt;/span> color &lt;span style="color:#66d9ef">LIKE&lt;/span> &lt;span style="color:#e6db74">&amp;#39;%红%&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以通过如此方式解决：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">f&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">queryCardDesc&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">models&lt;/span>.&lt;span style="color:#a6e22e">CardDescQuery&lt;/span>, &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">gorm&lt;/span>.&lt;span style="color:#a6e22e">DB&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">gorm&lt;/span>.&lt;span style="color:#a6e22e">DB&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 通过 Session() 创建一个新的 DB 实例，避免影响原来的 DB 实例。用以实现为多个 Or 分组的功能
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">newResult&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span>.&lt;span style="color:#a6e22e">Session&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">gorm&lt;/span>.&lt;span style="color:#a6e22e">Session&lt;/span>{&lt;span style="color:#a6e22e">NewDB&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">field&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">queryCardDesc&lt;/span>.&lt;span style="color:#a6e22e">QField&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">newResult&lt;/span> = &lt;span style="color:#a6e22e">newResult&lt;/span>.&lt;span style="color:#a6e22e">Or&lt;/span>(&lt;span style="color:#a6e22e">field&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#34; LIKE ?&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;%&amp;#34;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">queryCardDesc&lt;/span>.&lt;span style="color:#a6e22e">Keyword&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#34;%&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">newResult&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }(&lt;span style="color:#a6e22e">queryCardDesc&lt;/span>, &lt;span style="color:#a6e22e">result&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="redis">Redis&lt;/h1>
&lt;p>&lt;code>go get -u -v github.com/garyburd/redigo/redis&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;github.com/garyburd/redigo/redis&amp;#34;&lt;/span> &lt;span style="color:#75715e">// 引入redis第三方库
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 连接到redis
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">redis&lt;/span>.&lt;span style="color:#a6e22e">Dial&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;tcp&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;127.0.0.1:6379&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Connect to redis error&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 注意关闭连接
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">Close&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 通过go代码向redis写入数据
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">Do&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;SET&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;mykey&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;superWang&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;redis set failed:&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 通过go代码读取redis中的数据，由于返回的值为 interface{} ，所以需要转换成字符串，才能正常显示
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">username&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">redis&lt;/span>.&lt;span style="color:#a6e22e">String&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">Do&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;GET&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;mykey&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;redis get failed:&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Get mykey: %v \n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">username&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: 网络栈控制</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/%E7%BD%91%E7%BB%9C%E6%A0%88%E6%8E%A7%E5%88%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/%E7%BD%91%E7%BB%9C%E6%A0%88%E6%8E%A7%E5%88%B6/</guid><description/></item></channel></rss>