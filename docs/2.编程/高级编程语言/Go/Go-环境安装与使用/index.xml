<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go 环境安装与使用 on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</link><description>Recent content in Go 环境安装与使用 on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/index.xml" rel="self" type="application/rss+xml"/><item><title>Go 环境安装与使用</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/Go-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/Go-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</guid><description>概述 参考：
官方文档，下载并安装 Go 官方文档，安装多个版本的 Go Go 包，标准库 - cmd - go 我们可以通过一个名为 go 的二进制文件实现绝大部分日常的 编码、编译 等工作，只要安装好 Go 的环境即可。
安装 Go Linux 安装 从官网下载 linux 版的 .tar.gz 包
export GoVersion=1.20.2 wget https://go.dev/dl/go${GoVersion}.linux-amd64.tar.gz sudo tar -C /usr/local -xvzf go${GoVersion}.linux-amd64.tar.gz 配置环境变量，以便让 shell 可以执行 go 命令并立刻生效
sudo tee /etc/profile.d/go.sh &amp;gt; /dev/null &amp;lt;&amp;lt;-&amp;#34;EOF&amp;#34; # export GOPATH=/opt/gopath # export PATH=$PATH:\$GOPATH/bin:/usr/local/go/bin export PATH=$PATH:/usr/local/go/bin export GO111MODULE=on export GOPROXY=https://goproxy.cn,https://goproxy.io,direct export CGO_ENABLED=0 EOF source /etc/profile.d/go.sh CGO_ENABLED 开启后 Go 代码最终编译的可执行文件都是要有外部依赖的。不过我们依然可以通过 disable CGO_ENABLED 来编译出纯静态的 Go 程序，常用于交叉编译</description></item><item><title>Go Module</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/Go-Module/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/Go-Module/</guid><description>概述 参考：
官方文档，参考 - Go Modules 参考 公众号，Go Modules 终极入门 Go Module(Go 模块) 是实现 Modular Programming(模块化编程) 的工具。是 Go 语言中正式官宣的项目依赖解决方案，Go modules（前身为 vgo）发布于 Go1.11，成长于 Go1.12，丰富于 Go1.13，正式于 Go1.14 已经准备好，并且可以用在生产上（ready for production）了，Go 官方也鼓励所有用户从其他依赖项管理工具迁移到 Go modules。
module 是一个相关 Go 包的集合，它是源代码更替和版本控制的单元。模块由源文件形成的 go.mod 文件的根目录定义，包含 go.mod 文件的目录也被称为模块根。moudles 取代旧的的基于 GOPATH 方法来指定在工程中使用哪些源文件或导入包。模块路径是导入包的路径前缀，go.mod 文件定义模块路径，并且列出了在项目构建过程中使用的特定版本。
使用 Go Module 时，GOPATH 不再用于解析导入。但是，它仍然用于存储下载的源代码（在$GOPATH/pkg/mod 中）和编译的命令（在 GOPATH / bin 中）。
当程序编译时，会读取 go.mod 文件中的路径，来加载其编译所需的各种库
Go moudles 目前集成在 Go 的工具链中，只要安装了 Go，自然而然也就可以使用 Go moudles 了，而 Go modules 的出现也解决了在 Go1.11 前的几个常见争议问题：</description></item><item><title>重大变化</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/%E9%87%8D%E5%A4%A7%E5%8F%98%E5%8C%96/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/%E9%87%8D%E5%A4%A7%E5%8F%98%E5%8C%96/</guid><description>概述 参考：
曾领导六大开源项目，Go 语言负责人从 Google 离职 原文：https://mp.weixin.qq.com/s/PbTs1_W1r7bnABVIAtTjCw
Steve Francia 于 6 年前加入 Google，是 Go 语言的产品负责人，今天他在个人社交平台宣布将离开 Google。
6 年后，我将离开 Google。我为 Go 团队在过去六年里所取得的成就感到非常自豪，我也从未像现在这样对 Go 的未来充满期待。
你可能不熟悉 Steve Francia 这个名字，但你一定会对他的履历刮目相看。Steve Francia 在开源领域拥有超过 25 年的工作经验，领导了六大开源项目（Go、Docker、Hugo、MongoDB、Drupal、Cobra；其中他更是 Hugo、Cobra、Viper 和 spf13-vim 的作者），他还帮助 Google 定义了开源战略，也是 Github 上最受欢迎的前 50 名工程师。
Steve Francia 在 6 年前加入了 Go 团队，目标是将 Go 从一种小众的语言变成一种主流的、企业级的语言。现在回过头来看，Steve Francia 已经完成，甚至可以说是超额完成了这个目标。
在这段时间里，Go 团队交付了 VS Code Go 和 Gopls、大大改善了 Go 的开发体验、改进了 Go 的文档，以及改进了开发者安装 Go 的方式。Go 语言也从主要由 Googlers 编写，发展到如今主要由社区贡献者编写。
Go 的用户数量在这段时期也增长了 10 倍，Go 用户的使用频率也从偶尔使用增加到每天都使用。如今超过 75% 的 CNCF 项目都是用 Go 编写的。</description></item></channel></rss>