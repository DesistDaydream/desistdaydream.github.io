<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>JSON 数据格式处理 on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E8%A7%84%E8%8C%83%E4%B8%8E%E6%A0%87%E5%87%86%E5%BA%93/%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/JSON/</link><description>Recent content in JSON 数据格式处理 on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E8%A7%84%E8%8C%83%E4%B8%8E%E6%A0%87%E5%87%86%E5%BA%93/%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/JSON/index.xml" rel="self" type="application/rss+xml"/><item><title>JSON</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E8%A7%84%E8%8C%83%E4%B8%8E%E6%A0%87%E5%87%86%E5%BA%93/%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/JSON/JSON/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E8%A7%84%E8%8C%83%E4%B8%8E%E6%A0%87%E5%87%86%E5%BA%93/%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/JSON/JSON/</guid><description>概述 参考：
Go 包，标准库 - encoding/json Go 官方博客《JSON and Go》 骏马金龙 在线 JSON 转 Go Struct Go 语言内置了 encoding 标准库，并使用其中的 json 包来实现 JSON 的 Encoding(编码) 和 Decoding(解码) 逻辑，这里面的 JSON 符合 RFC 7159 标准。
这里面说的编码则是指将 Go 自身可以识别的数据类型编码为 JSON 格式的数据；解码主要是指解码后数据编程 Go 可以理解的数据格式，比如 struct、slice、map 等。
说白了，Go 编完的码，是编成人类可读的，自己不认识；解码才是将数据解成 Go 自己认识的。
JSON类型 与 Go类型 对应关系
boolean &amp;gt;&amp;gt; bool number &amp;gt;&amp;gt; float32,float64,int, int64, uint64 string &amp;gt;&amp;gt; string null &amp;gt;&amp;gt; nil array &amp;gt;&amp;gt; []interface{} object &amp;gt;&amp;gt; map[string]interface{} 使用 json 包，可以轻松地从 Go 程序中读取和写入 JSON 数据。</description></item><item><title>go-simplejson 库</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E8%A7%84%E8%8C%83%E4%B8%8E%E6%A0%87%E5%87%86%E5%BA%93/%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/JSON/go-simplejson-%E5%BA%93/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go-%E8%A7%84%E8%8C%83%E4%B8%8E%E6%A0%87%E5%87%86%E5%BA%93/%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/JSON/go-simplejson-%E5%BA%93/</guid><description>概述 参考：
GitHub 项目，bitly/go-simplejson 笔记文档
simplejson 是一个 golang 包， 提供快速和简单的方法来从 JSON 文件中获取值、设置值、删除值。
1. Json 解码编码? // json解码 j, err := simplejson.NewJson([]byte(jsonStr)) // json漂亮编码 s, err := j.EncodeJsonPretty() // json编码 s, err1 := j.EncodeJSON() 2. Json 获取值? // 初始化 j, err := simplejson.NewJson([]byte(jsonStr)) // 获取json object对象值 j.Get(key string).String() // 获取json 多级object对象值 j.Get(key string).Get(key string).Int() // 获取json array数组索引值 j.GetIndex(index int).String() // 获取json 多级array数组索引值 j.GetIndex(index int).GetIndex(index int).Int() // 获取json 多级数组对象组合键索引值 j.GetIndex(index int).Get(key string).GetIndex(index int).</description></item></channel></rss>