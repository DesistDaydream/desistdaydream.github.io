<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – ECMAScript 工具</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/ECMAScript-%E5%B7%A5%E5%85%B7/</link><description>Recent content in ECMAScript 工具 on 断念梦</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/ECMAScript-%E5%B7%A5%E5%85%B7/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Deno 工具</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/ECMAScript-%E5%B7%A5%E5%85%B7/Deno-%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/ECMAScript-%E5%B7%A5%E5%85%B7/Deno-%E5%B7%A5%E5%85%B7/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.deno.com/runtime/manual/tools/">官方文档，运行时-手册-CLI 命令参考&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="compile">compile&lt;/h2>
&lt;p>&lt;a href="https://docs.deno.com/runtime/manual/tools/compiler">https://docs.deno.com/runtime/manual/tools/compiler&lt;/a>&lt;/p>
&lt;p>把脚本编译成独立的可执行文件。&lt;/p>
&lt;h2 id="info">info&lt;/h2>
&lt;p>&lt;a href="https://docs.deno.com/runtime/manual/tools/dependency_inspector">https://docs.deno.com/runtime/manual/tools/dependency_inspector&lt;/a>&lt;/p>
&lt;p>可用于显示有关缓存位置的信息，若指定了具体模块则可检查 ES 模块及其所有依赖项。&lt;/p>
&lt;p>可以显示下面这些缓存信息&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>DENO_DIR location: C:\Users\DesistDaydream\AppData\Local\deno
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Remote modules cache: C:\Users\DesistDaydream\AppData\Local\deno\deps
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm modules cache: C:\Users\DesistDaydream\AppData\Local\deno\npm
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Emitted modules cache: C:\Users\DesistDaydream\AppData\Local\deno\gen
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Language server registries cache: C:\Users\DesistDaydream\AppData\Local\deno\registries
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Origin storage: C:\Users\DesistDaydream\AppData\Local\deno\location_data
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="其他工具">其他工具&lt;/h1></description></item><item><title>Docs: NPM</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/ECMAScript-%E5%B7%A5%E5%85%B7/NPM/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/ECMAScript-%E5%B7%A5%E5%85%B7/NPM/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.npmjs.com/">官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.npmjs.com/cli/v8/using-npm/config">官方文档，cli-使用 npm-配置&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Node.js Package Manager(简称 NPM)&lt;/strong> 是 Node.js 自带的包管理工具，通常与 Node.js 一同安装，最初版本于 2010 年 1 月发行。NPM 本质是一个第三方模块，可以在 NodeJS 安装目录下的 &lt;strong>lib/node_modules/npm/&lt;/strong>* 目录下找到 npm 的所有文件。&lt;/p>
&lt;p>配置镜像源为淘宝的： &lt;code>npm config -g set registry=&amp;quot;https://registry.npmmirror.com&amp;quot;&lt;/code>&lt;/p>
&lt;h2 id="npm-关联文件与配置">npm 关联文件与配置&lt;/h2>
&lt;p>npm 从 命令行、环境变量、npmrc 文件 这些地方获取其配置信息：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>命令行标志&lt;/strong>&lt;/li>
&lt;li>&lt;strong>环境变量&lt;/strong>&lt;/li>
&lt;li>&lt;strong>npmrc 文件&lt;/strong> # npm 从以下几个地方依次读取 npmrc 文件
&lt;ul>
&lt;li>&lt;strong>/PATH/TO/NPM/npmrc&lt;/strong> # npm 内置的配置文件。这内置的文件是不是不可见的？o(╯□╰)o&lt;/li>
&lt;li>&lt;strong>&lt;code>${PREFIX}/etc/npmrc&lt;/code>&lt;/strong> # 全局配置文件，可以通过 &lt;code>--globalconfig&lt;/code> 命令行选项或 &lt;code>${NPM_CONFIG_GLOBALCONFIG}&lt;/code> 环境变量改变其值&lt;/li>
&lt;li>&lt;strong>~/.npmrc&lt;/strong> # 用户配置文件，可以通过 &lt;code>--userconfig&lt;/code> 命令行选项或 &lt;code>${NPM_CONFIG_USERCONFIG}&lt;/code> 环境变量改变其值&lt;/li>
&lt;li>&lt;strong>/PATH/TO/MY/PROJECT/.npmrc&lt;/strong> # 每个项目自己的配置&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>&lt;code>${PREFIX}/bin/&lt;/code>&lt;/strong> # npm 安装的各种依赖包中若包含命令行工具，则会在此目录创建软链接。该目录通常都会加入到 &lt;code>${PATH}&lt;/code> 变量中。&lt;/p>
&lt;h2 id="配置文件详解">配置文件详解&lt;/h2>
&lt;p>所有可供配置的信息可从 &lt;a href="https://docs.npmjs.com/cli/v8/using-npm/config#config-settings">https://docs.npmjs.com/cli/v8/using-npm/config#config-settings&lt;/a> 查看&lt;/p>
&lt;h1 id="pnpm">PNPM&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/pnpm/pnpm">GitHub 项目，pnpm/pnpm&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://pnpm.io/">官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://juejin.cn/post/7047556067877716004">稀土掘金，pnpm 对比 npm/yarn 好在哪里&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>当使用 npm 或 Yarn 时，如果你有 100 个项目使用了某个依赖（dependency），就会有 100 份该依赖的副本保存在硬盘上。 而在使用 pnpm 时，依赖会被存储在内容可寻址的存储中，所以：&lt;/p>
&lt;ul>
&lt;li>如果你用到了某依赖项的不同版本，只会将不同版本间有差异的文件添加到仓库。 例如，如果某个包有 100 个文件，而它的新版本只改变了其中 1 个文件。那么 pnpm update 时只会向存储中心额外添加 1 个新文件，而不会因为仅仅一个文件的改变复制整新版本包的内容。&lt;/li>
&lt;li>所有文件都会存储在硬盘上的某一位置。 当软件包被被安装时，包里的文件会硬链接到这一位置，而不会占用额外的磁盘空间。 这允许你跨项目地共享同一版本的依赖。&lt;/li>
&lt;/ul>
&lt;p>因此，您在磁盘上节省了大量空间，这与项目和依赖项的数量成正比，并且安装速度要快得多！&lt;/p>
&lt;p>store-dir 说明：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>项目中的 &lt;code>node_models/&lt;/code> 目录应该使用与 store-dir 目录在同一个分区中&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h2 id="安装-pnpm">安装 pnpm&lt;/h2>
&lt;p>使用 &lt;code>corepack enable&lt;/code> 指令启用 pnpm&lt;/p>
&lt;p>设置包的存储路径：&lt;/p>
&lt;ul>
&lt;li>Windows：&lt;code>pnpm config -g set store-dir D:\Projects\.pnpm-store&lt;/code>&lt;/li>
&lt;li>Linux：&lt;code>pnpm config -g set store-dir /mnt/d/Projects/.pnpm-store&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>配置镜像源：&lt;/p>
&lt;ul>
&lt;li>&lt;code>pnpm config -g set registry=&amp;quot;https://registry.npmmirror.com&amp;quot;&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>若 Windows 无法执行 pnpm，报错：&lt;code>pnpm : 无法加载文件 D:\Tools\nodejs\pnpm.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参阅 https:/go.microsoft.com/fwlink/?LinkID=135170 中的 about_Execution_Policies。&lt;/code>&lt;/p>
&lt;ul>
&lt;li>此时需要在 PowerShell 中执行 &lt;code>Set-ExecutionPolicy -Scope CurrentUser RemoteSigned&lt;/code> 指令。详见&lt;a href="https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.core/about/about_execution_policies?view=powershell-7.2">微软官网解释&lt;/a>。
&lt;ul>
&lt;li>其中 &lt;code>-Scope CurrentUser&lt;/code> 是指针对当前用户的操作，若使用管理员运行 VSCode 或 PowerShell，则不用加这个选项。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>更新 pnpm&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>export PNPM_VERSION&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;XXXX&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>corepack prepare pnpm@&lt;span style="color:#e6db74">${&lt;/span>PNPM_VERSION&lt;span style="color:#e6db74">}&lt;/span> --activate
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="pnpm-关联文件与配置">pnpm 关联文件与配置&lt;/h2>
&lt;blockquote>
&lt;p>Notes: pnpm 的官方文档中依然使用 .npmrc 这个单词作为自己得配置文件，但是实际上，配置文件的名称只是 rc。&lt;/p>
&lt;/blockquote>
&lt;p>pnpm 使用 &lt;a href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E6%97%A0%E6%B3%95%E5%88%86%E7%B1%BB%E7%9A%84%E8%AF%AD%E8%A8%80/INI.md">INI&lt;/a> 格式的配置文件。若想使用独立于本地项目的配置文件，可以建立一个名为 &lt;code>.npmrc&lt;/code> 的文件在项目的根目录。&lt;/p>
&lt;p>&lt;strong>/PATH/TO/rc&lt;/strong> # pnpm 配置文件。&lt;code>pnpm config&lt;/code> 命令控制的配置即是控制该文件。在&lt;a href="https://pnpm.io/next/cli/config">官方文档，CLI 命令-其他-pnpm config&lt;/a>中可以看到 pnpm 配置文件的保存路径：&lt;/p>
&lt;ul>
&lt;li>如果设置了 &lt;code>$XDG_CONFIG_HOME&lt;/code> 环境变量，则为 &lt;code>$XDG_CONFIG_HOME/pnpm/rc&lt;/code>&lt;/li>
&lt;li>在 Windows 上：&lt;strong>%LOCALAPPDATA%/pnpm/config/rc&lt;/strong>&lt;/li>
&lt;li>在 macOS 上：&lt;strong>~/Library/Preferences/pnpm/rc&lt;/strong>&lt;/li>
&lt;li>在 Linux 上：&lt;strong>~/.config/pnpm/rc&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>/PATH/TO/.pnpm-store/&lt;/strong> # pnpm 管理的依赖保存路径。可以通过 &lt;code>pnpm config -g set store-dir &amp;lt;DIR&amp;gt;&lt;/code> 修改。&lt;code>pnpm store path&lt;/code> 命令会显示当前 .pnpm-store 的完整路径。在 &lt;a href="https://pnpm.io/next/npmrc#store-dir">官方文档，配置-.npmrc&lt;/a> 中可以看到 pnpm 存储目录的默认值位置：&lt;/p>
&lt;ul>
&lt;li>如果存在 &lt;code>$PNPM_HOME&lt;/code> 环境变量，则为 &lt;code>$PNPM_HOME/pnpm/store&lt;/code>&lt;/li>
&lt;li>如果设置了 &lt;code>$XDG_DATA_HOME&lt;/code> 环境变量，则为 &lt;code>$XDG_DATA_HOME/pnpm/store&lt;/code>&lt;/li>
&lt;li>在 Windows 上: &lt;strong>~/AppData/Local/pnpm/store&lt;/strong>&lt;/li>
&lt;li>在 macOS 上: &lt;strong>~/Library/pnpm/store&lt;/strong>&lt;/li>
&lt;li>在 Linux 上: &lt;strong>~/.local/share/pnpm/store&lt;/strong>&lt;/li>
&lt;li>特殊默认值规则：pnpm 的管理的包的存储位置应始终与项目目录保持在同一磁盘上，因此每个磁盘将有一个存储。 如果在使用磁盘中具有主目录，存储目录就会创建在这里。 如果磁盘上没有主目录，那么将在文件系统的根目录中创建该存储。 例如，如果安装发生在挂载在 &lt;code>/mnt&lt;/code> 的文件系统上，那么存储将在 &lt;code>/mnt/.pnpm-store/&lt;/code> 目录中创建。 Windows 系统上也是如此。
&lt;ul>
&lt;li>用人话说是：假如我的项目在 &lt;code>D:/Projects/DesistDaydream/javascript-learning/&lt;/code>，那模块将会默认下载到 &lt;code>D:/.pnpm-store/&lt;/code> 目录中。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>注意：可以从不同的磁盘设置同一个存储，但在这种情况下，pnpm 将复制包而&lt;strong>不是硬链接&lt;/strong>它们，因为&lt;strong>硬链接只能发生在同一文件系统上&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;h1 id="npm-与-pnpm-语法">npm 与 pnpm 语法&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.npmjs.com/cli">官方文档，cli&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>通常，适用于 npm 的选项，也适用于 pnpm。不过也有部分命令是独属于 npm 或 pnpm 的&lt;/p>
&lt;p>&lt;strong>npm [OPTIONS] COMMAND [OPTIONS]&lt;/strong>&lt;/p>
&lt;p>&lt;strong>OPTIONS&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-g, &amp;ndash;global&lt;/strong> # 指定命令作用范围为全局。默认情况下 npm 的所有子命令作用范围是当前目录&lt;/li>
&lt;/ul>
&lt;h2 id="npm-config">npm config&lt;/h2>
&lt;p>npm config 用来管理 npm 的配置文件，i.e.npmrc 文件。&lt;/p>
&lt;h3 id="syntax语法">Syntax(语法)&lt;/h3>
&lt;p>&lt;strong>npm config COMMAND [KEY=VALUE]&lt;/strong>&lt;/p>
&lt;p>&lt;strong>COMMAND&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>set&lt;/li>
&lt;li>get&lt;/li>
&lt;li>delete&lt;/li>
&lt;li>list&lt;/li>
&lt;li>edit&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>OPTIONS&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-g, &amp;ndash;global&lt;/strong> # 对全局配置文件(${PREFIX}/etc/npmrc) 执行操作&lt;/li>
&lt;/ul>
&lt;h3 id="example">EXAMPLE&lt;/h3>
&lt;p>列出所有已知配置&lt;/p>
&lt;ul>
&lt;li>npm config ls -l&lt;/li>
&lt;/ul>
&lt;p>获取 prefix 配置的值&lt;/p>
&lt;ul>
&lt;li>npm config get prefix&lt;/li>
&lt;/ul>
&lt;h2 id="npm-exec">npm exec&lt;/h2>
&lt;p>从本地或远程 npm 包运行命令&lt;/p>
&lt;h3 id="syntax语法-1">Syntax(语法)&lt;/h3>
&lt;p>&lt;strong>npm exec &amp;ndash; &amp;lt;pkg&amp;gt;[@&amp;lt;version&amp;gt;] [args&amp;hellip;]&lt;/strong>
&lt;strong>npm exec &amp;ndash;package=&amp;lt;pkg&amp;gt;[@&amp;lt;version&amp;gt;] &amp;ndash; &amp;lt;cmd&amp;gt; [args&amp;hellip;]&lt;/strong>
&lt;strong>npm exec -c &amp;lsquo;&amp;lt;cmd&amp;gt; [args&amp;hellip;]&amp;rsquo;&lt;/strong>
&lt;strong>npm exec &amp;ndash;package=foo -c &amp;lsquo;&amp;lt;cmd&amp;gt; [args&amp;hellip;]&amp;rsquo;&lt;/strong>&lt;/p>
&lt;p>&lt;strong>OPTIONS&lt;/strong>&lt;/p>
&lt;h2 id="npm-install">npm install&lt;/h2>
&lt;p>安装项目的所有依赖&lt;/p>
&lt;p>install 可以简写为 i。&lt;/p>
&lt;h3 id="syntax语法-2">Syntax(语法)&lt;/h3>
&lt;p>&lt;strong>OPTIONS&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-D, &amp;ndash;save-dev&lt;/strong> # 安装的包将会出现在 &lt;code>devDependencies&lt;/code> 中&lt;/li>
&lt;/ul>
&lt;h2 id="npm-init">npm init&lt;/h2>
&lt;blockquote>
&lt;p>别名：create、innit&lt;/p>
&lt;/blockquote>
&lt;p>创建一个 package.json 文件。用来初始化一个项目。&lt;/p>
&lt;p>可以指定一个 &lt;strong>Initializer(初始化程序)&lt;/strong> 并执行其 bin/ 下的 js/ts 文件以运行其他与初始化相关的操作。&lt;/p>
&lt;h3 id="syntax语法-3">Syntax(语法)&lt;/h3>
&lt;p>npm init [INITIALIZER]&lt;/p>
&lt;p>&lt;strong>OPTIONS&lt;/strong>&lt;/p>
&lt;h2 id="npm-list">npm list&lt;/h2>
&lt;p>列出所有已经安装的包。默认列出当前项目中已安装的包，通常检查如下目录：&lt;code>node_modules/&lt;/code>&lt;/p>
&lt;h2 id="npm-outdated">npm outdated&lt;/h2>
&lt;p>此命令将检查注册表，查看是否有任何（或指定的）已安装包目前已过时。&lt;/p>
&lt;p>默认情况下，只显示根项目的直接依赖项和已配置的工作区的直接依赖项。使用&amp;ndash;all查找所有过时的元依赖项。&lt;/p>
&lt;p>在输出中:&lt;/p>
&lt;ul>
&lt;li>wanted # 是满足package.json中指定的semver范围的软件包的最大版本。如果没有可用的semver范围（即您在运行npm outdated &amp;ndash;global或包未包含在package.json中），则wanted显示当前安装的版本。&lt;/li>
&lt;li>latest # 是注册表中标记为当前版本的软件包的版本。在没有特殊配置的情况下运行npm publish将使用最新的dist-tag发布该软件包。这可能是软件包的最大版本，也可能是软件包的最近发布版本，这取决于包开发人员如何管理最新npm help dist-tag。&lt;/li>
&lt;li>location 是软件包在物理树中的位置。&lt;/li>
&lt;li>depended by # 显示依赖于显示依赖项的软件包&lt;/li>
&lt;li>package type # （使用&amp;ndash;long / -l时）告诉您此软件包是依赖项还是开发/同行/可选依赖项。始终标记未包含在package.json中的软件包的依赖项。&lt;/li>
&lt;li>homepage # （使用&amp;ndash;long / -l时）是包的packument中包含的主页值&lt;/li>
&lt;li>红色表示存在符合您的 semver 要求的更新版本，因此您应立即更新。&lt;/li>
&lt;li>黄色表示有一个新的版本超出了您的 semver 要求（通常是新主要版本或新的0.x次要版本），因此请小心进行。&lt;/li>
&lt;/ul>
&lt;h2 id="npm-update">npm update&lt;/h2>
&lt;p>更新已安装的包&lt;/p>
&lt;h2 id="pnpm-stroe">pnpm stroe&lt;/h2>
&lt;p>&lt;a href="https://pnpm.io/cli/store">https://pnpm.io/cli/store&lt;/a>&lt;/p>
&lt;p>管理包的存储&lt;/p>
&lt;h2 id="最佳实践">最佳实践&lt;/h2>
&lt;p>一个全局模块的声明周期&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 安装&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm install -g vite
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 列出&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm list -g
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 更新&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm update -g vite
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 卸载&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm uninstall -g vite
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="实用工具">实用工具&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.ruanyifeng.com/blog/2019/02/npx.html">https://www.ruanyifeng.com/blog/2019/02/npx.html&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>npx 是 NPM 中自带的工具&lt;/p>
&lt;p>通过 &lt;code>npx serve&lt;/code> 命令(与 &lt;code>npm exec serve&lt;/code> 命令类似)可以启动一个 HTTP 服务，以访问当前目录下的所有静态资源文件。便于本地开发调试。&lt;/p></description></item><item><title>Docs: rc 配置文件</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/ECMAScript-%E5%B7%A5%E5%85%B7/npmrc-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/ECMAScript-%E5%B7%A5%E5%85%B7/npmrc-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://pnpm.io/npmrc">pnpm 官方文档，配置 - .npmrc&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>这里面的笔记都以 pnpm 为主。&lt;/p>
&lt;p>“rc” 是 “run commands” 的缩写。它的起源可以追溯到 Unix 的祖父母 CTSS。早期的 Unix 使用 “rc” 作为操作系统启动脚本的名称，作为对 CTSS runcom 的致敬。在一些项目中，以 “rc” 结尾的文件通常是配置文件，如 “.eslintrc”、“.npmrc” 等。这些文件包含了程序的运行时配置，如资源配置、运行控制等。&lt;/p>
&lt;h1 id="node-模块设定">Node 模块设定&lt;/h1>
&lt;p>&lt;strong>store-dir&lt;/strong> # 指定存储模块的路径。&lt;/p></description></item><item><title>Docs: 更多包管理工具</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/ECMAScript-%E5%B7%A5%E5%85%B7/%E6%9B%B4%E5%A4%9A%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/ECMAScript-%E5%B7%A5%E5%85%B7/%E6%9B%B4%E5%A4%9A%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="yarn">Yarn&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://yarnpkg.com/">官网&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>管理 Yarn 的首选方式是通过 &lt;a href="https://nodejs.org/dist/latest/docs/api/corepack.html">Corepack&lt;/a>，这是从 16.10 开始随所有 Node.js 版本一起提供的新二进制文件。它充当我们和 Yarn 之间的中介，让我们在多个项目中使用不同的包管理器版本，而无需再签入 Yarn 二进制文件。&lt;/p>
&lt;p>Node.js &amp;gt;=16.10
Corepack 默认包含在所有 Node.js 安装中，但目前是可选的。要启用它，请运行以下命令：
&lt;code>corepack enable&lt;/code>&lt;/p>
&lt;p>Node.js &amp;lt;16.10
在 16.10 之前的版本中，Node.js 不包含 Corepack；为了解决这个问题，运行：
&lt;code>npm i -g corepack&lt;/code>&lt;/p>
&lt;p>配置镜像源以加速下载各种依赖包&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>yarn config set registry https://registry.npmmirror.com -g
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>配置 $PATH 以便可以直接执行通过 yarn 安装的各种工具&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>export PATH&lt;span style="color:#f92672">=&lt;/span>$PATH:~/.config/yarn/global/node_modules/.bin
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="yarn-关联文件与配置">Yarn 关联文件与配置&lt;/h2>
&lt;p>&lt;strong>~/.yarnrc&lt;/strong> # 配置文件&lt;/p>
&lt;p>&lt;strong>~/.config/yarn/&lt;/strong>* #&lt;/p>
&lt;h1 id="yarn-syntax语法">yarn Syntax(语法)&lt;/h1></description></item><item><title>Docs: Vite</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/ECMAScript-%E5%B7%A5%E5%85%B7/Vite/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/ECMAScript-%E5%B7%A5%E5%85%B7/Vite/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/vitejs">GitHub 组织，vite&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/vitejs/vite">GitHub 项目，vitejs/vite&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Vue 作者主导的打包与编译工具，启动项目开发模式速度非常快、下载依赖非常快、编译非常快。&lt;/p>
&lt;p>在 &lt;a href="https://github.com/vitejs/awesome-vite">GitHub 项目，vitejs/awesom-vite&lt;/a> 这里有很多使用 Vite 打包的很棒的项目示例&lt;/p>
&lt;h1 id="安装-vite">安装 Vite&lt;/h1>
&lt;h1 id="vite-关联文件与配置">Vite 关联文件与配置&lt;/h1>
&lt;p>&lt;strong>vite.config.js&lt;/strong> # 每个项目的根目录通常都会有一个 vite.config.js 文件，以定义打包项目代码时的行为&lt;/p>
&lt;h3 id="vite-配置详解">Vite 配置详解&lt;/h3>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://cn.vitejs.dev/config/">官方文档，配置&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="常见问题">常见问题&lt;/h1>
&lt;h2 id="解决-vite-打包项目代码后使用的是绝对路径">解决 Vite 打包项目代码后，使用的是绝对路径&lt;/h2>
&lt;p>在 vite.config.js 文件中设置 base&lt;/p>
&lt;h2 id="解决-vite-在-wsl-环境下热更新失效问题">解决 vite 在 WSL 环境下热更新失效问题&lt;/h2>
&lt;p>使用 vite 的好处很多，最明显的就是热更新很快。但是在 wsl 环境的时候，由于&lt;a href="https://github.com/microsoft/WSL/issues/4739">WSL2 的限制&lt;/a>，vite 默认配置是无法监控 windows 文件系统中文件的变化的。这就导致了 vite 的热更新失效。
解决热更新失效的方法主要有两种： 1.文件存储到 WSL 系统环境中 2.配置 vite.config.js 的 &lt;a href="https://cn.vitejs.dev/config/#server-watch">server.watch&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">default&lt;/span> &lt;span style="color:#a6e22e">defineConfig&lt;/span>({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">server&lt;/span>&lt;span style="color:#f92672">:&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">watch&lt;/span>&lt;span style="color:#f92672">:&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#a6e22e">usePolling&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>})
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="vite-syntax语法">vite Syntax(语法)&lt;/h1>
&lt;p>vite 将会启动一个开发服务器，默认响应当前目录的 index.html 文件。&lt;/p>
&lt;p>COMMAND:&lt;/p>
&lt;ul>
&lt;li>build [root] # 构建项目(生产可用)&lt;/li>
&lt;li>optimize [root] # pre-bundle dependencies&lt;/li>
&lt;li>preview [root] # locally preview production build&lt;/li>
&lt;/ul>
&lt;h2 id="build">build&lt;/h2>
&lt;h2 id="preview">preview&lt;/h2>
&lt;p>在本地预览已经通过 &lt;code>vite build&lt;/code> 构建后的项目。注意：执行该命令前，需要先通过 &lt;code>vite build&lt;/code> 打包项目，以便生成 &lt;code>dist/&lt;/code> 目录
启动监听当前目录下的 &lt;code>dist/&lt;/code> 目录。&lt;/p></description></item><item><title>Docs: 代码格式化</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/ECMAScript-%E5%B7%A5%E5%85%B7/%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F%E5%8C%96/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/ECMAScript-%E5%B7%A5%E5%85%B7/%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F%E5%8C%96/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;/blockquote>
&lt;h1 id="prettier">Prettier&lt;/h1>
&lt;h2 id="关联文件与配置">关联文件与配置&lt;/h2>
&lt;p>&lt;strong>.prettierrc.json&lt;/strong> # 通常保存在项目根目录下&lt;/p>
&lt;h2 id="配置详解">配置详解&lt;/h2>
&lt;p>&lt;strong>tabWidth(INT)&lt;/strong> # 一个制表符相当于几个空格&lt;/p>
&lt;p>&lt;strong>semi(BOOLEAN)&lt;/strong> # 行尾是否添加分号&lt;/p>
&lt;p>&lt;strong>htmlWhitespaceSensitivity(STRING)&lt;/strong> # 使用 ignore 解决尖括号右侧被换行问题&lt;/p>
&lt;p>&lt;strong>bracketSameLine(BOOLEAN&amp;gt;&lt;/strong> # 不要给 &lt;code>)&lt;/code> 另起一行&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;prettier.printWidth&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span> &lt;span style="color:#75715e">// 超过最大值换行
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;prettier.tabWidth&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span> &lt;span style="color:#75715e">// 缩进字节数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;prettier.useTabs&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span> &lt;span style="color:#75715e">// 缩进不使用tab，使用空格
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;prettier.semi&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span> &lt;span style="color:#75715e">// 句尾添加分号
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;prettier.singleQuote&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span> &lt;span style="color:#75715e">// 使用单引号代替双引号
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;prettier.proseWrap&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;preserve&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span> &lt;span style="color:#75715e">// 默认值。因为使用了一些折行敏感型的渲染器（如GitHub comment）而按照markdown文本样式进行折行
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;prettier.arrowParens&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;avoid&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span> &lt;span style="color:#75715e">//  (x) =&amp;gt; {} 箭头函数参数只有一个时是否要有小括号。avoid：省略括号
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;prettier.bracketSpacing&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span> &lt;span style="color:#75715e">// 在对象，数组括号与文字之间加空格 &amp;#34;{ foo: bar }&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;prettier.disableLanguages&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> [&lt;span style="color:#e6db74">&amp;#34;vue&amp;#34;&lt;/span>]&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span> &lt;span style="color:#75715e">// 不格式化vue文件，vue文件的格式化单独设置
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;prettier.endOfLine&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;auto&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span> &lt;span style="color:#75715e">// 结尾是 \n \r \n\r auto
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;prettier.eslintIntegration&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span> &lt;span style="color:#75715e">//不让prettier使用eslint的代码格式进行校验
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;prettier.htmlWhitespaceSensitivity&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;ignore&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span>&lt;span style="color:#75715e">//包裹文字时候结束标签的结尾尖括号掉到了下一行
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;prettier.ignorePath&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;.prettierignore&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span> &lt;span style="color:#75715e">// 不使用prettier格式化的文件填写在项目的.prettierignore文件中
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;prettier.jsxBracketSameLine&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span> &lt;span style="color:#75715e">// 在jsx中把&amp;#39;&amp;gt;&amp;#39; 是否单独放一行
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;prettier.jsxSingleQuote&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span> &lt;span style="color:#75715e">// 在jsx中使用单引号代替双引号
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;prettier.parser&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;babylon&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span> &lt;span style="color:#75715e">// 格式化的解析器，默认是babylon
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;prettier.requireConfig&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span> &lt;span style="color:#75715e">// Require a &amp;#39;prettierconfig&amp;#39; to format prettier
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;prettier.stylelintIntegration&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span> &lt;span style="color:#75715e">//不让prettier使用stylelint的代码格式进行校验
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;prettier.trailingComma&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;es5&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span> &lt;span style="color:#75715e">// 在对象或数组最后一个元素后面是否加逗号（在ES5中加尾逗号）
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;prettier.tslintIntegration&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>&lt;span style="color:#75715e">// 不让prettier使用tslint的代码格式进行校验
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="eslint">ESLint&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://eslint.bootcss.com/">官网&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item></channel></rss>