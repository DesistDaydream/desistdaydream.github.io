<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ECMAScript 工具 on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/ECMAScript-%E5%B7%A5%E5%85%B7/</link><description>Recent content in ECMAScript 工具 on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/ECMAScript-%E5%B7%A5%E5%85%B7/index.xml" rel="self" type="application/rss+xml"/><item><title>NPM</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/ECMAScript-%E5%B7%A5%E5%85%B7/NPM/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/ECMAScript-%E5%B7%A5%E5%85%B7/NPM/</guid><description>概述 参考：
官网 官方文档，cli-使用 npm-配置 Node.js Package Manager(简称 NPM) 是 Node.js 自带的包管理工具，通常与 Node.js 一同安装，最初版本于 2010 年 1 月发行。NPM 本质是一个第三方模块，可以在 NodeJS 安装目录下的 lib/node_modules/npm/* 目录下找到 npm 的所有文件。
配置镜像源为淘宝的： npm config -g set registry=&amp;quot;https://registry.npmmirror.com&amp;quot;
npm 关联文件与配置 npm 从 命令行、环境变量、npmrc 文件 这些地方获取其配置信息：
命令行标志 环境变量 npmrc 文件 # npm 从以下几个地方依次读取 npmrc 文件 /PATH/TO/NPM/npmrc # npm 内置的配置文件。这内置的文件是不是不可见的？o(╯□╰)o ${PREFIX}/etc/npmrc # 全局配置文件，可以通过 --globalconfig 命令行选项或 ${NPM_CONFIG_GLOBALCONFIG} 环境变量改变其值 ~/.npmrc # 用户配置文件，可以通过 --userconfig 命令行选项或 ${NPM_CONFIG_USERCONFIG} 环境变量改变其值 /PATH/TO/MY/PROJECT/.npmrc # 每个项目自己的配置 ${PREFIX}/bin/ # npm 安装的各种依赖包中若包含命令行工具，则会在此目录创建软链接。该目录通常都会加入到 ${PATH} 变量中。</description></item><item><title>rc 配置文件</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/ECMAScript-%E5%B7%A5%E5%85%B7/npmrc-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/ECMAScript-%E5%B7%A5%E5%85%B7/npmrc-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</guid><description>概述 参考：
pnpm 官方文档，配置 - .npmrc 这里面的笔记都以 pnpm 为主。
“rc” 是 “run commands” 的缩写。它的起源可以追溯到 Unix 的祖父母 CTSS。早期的 Unix 使用 “rc” 作为操作系统启动脚本的名称，作为对 CTSS runcom 的致敬。在一些项目中，以 “rc” 结尾的文件通常是配置文件，如 “.eslintrc”、“.npmrc” 等。这些文件包含了程序的运行时配置，如资源配置、运行控制等。
Node 模块设定 store-dir # 指定存储模块的路径。</description></item><item><title>更多包管理工具</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/ECMAScript-%E5%B7%A5%E5%85%B7/%E6%9B%B4%E5%A4%9A%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/ECMAScript-%E5%B7%A5%E5%85%B7/%E6%9B%B4%E5%A4%9A%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</guid><description>概述 参考：
Yarn 参考：
官网 管理 Yarn 的首选方式是通过 Corepack，这是从 16.10 开始随所有 Node.js 版本一起提供的新二进制文件。它充当我们和 Yarn 之间的中介，让我们在多个项目中使用不同的包管理器版本，而无需再签入 Yarn 二进制文件。
Node.js &amp;gt;=16.10 Corepack 默认包含在所有 Node.js 安装中，但目前是可选的。要启用它，请运行以下命令： corepack enable
Node.js &amp;lt;16.10 在 16.10 之前的版本中，Node.js 不包含 Corepack；为了解决这个问题，运行： npm i -g corepack
配置镜像源以加速下载各种依赖包
yarn config set registry https://registry.npmmirror.com -g 配置 $PATH 以便可以直接执行通过 yarn 安装的各种工具
export PATH=$PATH:~/.config/yarn/global/node_modules/.bin Yarn 关联文件与配置 ~/.yarnrc # 配置文件
~/.config/yarn/* #
yarn Syntax(语法)</description></item><item><title>Vite</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/ECMAScript-%E5%B7%A5%E5%85%B7/Vite/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/ECMAScript-%E5%B7%A5%E5%85%B7/Vite/</guid><description>概述 参考：
GitHub 组织，vite GitHub 项目，vitejs/vite Vue 作者主导的打包与编译工具，启动项目开发模式速度非常快、下载依赖非常快、编译非常快。
在 GitHub 项目，vitejs/awesom-vite 这里有很多使用 Vite 打包的很棒的项目示例
安装 Vite Vite 关联文件与配置 vite.config.js # 每个项目的根目录通常都会有一个 vite.config.js 文件，以定义打包项目代码时的行为
Vite 配置详解 参考：
官方文档，配置 常见问题 解决 Vite 打包项目代码后，使用的是绝对路径 在 vite.config.js 文件中设置 base
解决 vite 在 WSL 环境下热更新失效问题 使用 vite 的好处很多，最明显的就是热更新很快。但是在 wsl 环境的时候，由于WSL2 的限制，vite 默认配置是无法监控 windows 文件系统中文件的变化的。这就导致了 vite 的热更新失效。 解决热更新失效的方法主要有两种： 1.文件存储到 WSL 系统环境中 2.配置 vite.config.js 的 server.watch
export default defineConfig({ server: { watch: { { usePolling: true } } } }) vite Syntax(语法) vite 将会启动一个开发服务器，默认响应当前目录的 index.</description></item><item><title>代码格式化</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/ECMAScript-%E5%B7%A5%E5%85%B7/%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F%E5%8C%96/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/ECMAScript-%E5%B7%A5%E5%85%B7/%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F%E5%8C%96/</guid><description>概述 参考：
Prettier 关联文件与配置 .prettierrc.json # 通常保存在项目根目录下
配置详解 tabWidth(INT) # 一个制表符相当于几个空格
semi(BOOLEAN) # 行尾是否添加分号
htmlWhitespaceSensitivity(STRING) # 使用 ignore 解决尖括号右侧被换行问题
bracketSameLine(BOOLEAN&amp;gt; # 不要给 ) 另起一行
&amp;#34;prettier.printWidth&amp;#34;: 100, // 超过最大值换行 &amp;#34;prettier.tabWidth&amp;#34;: 4, // 缩进字节数 &amp;#34;prettier.useTabs&amp;#34;: false, // 缩进不使用tab，使用空格 &amp;#34;prettier.semi&amp;#34;: true, // 句尾添加分号 &amp;#34;prettier.singleQuote&amp;#34;: true, // 使用单引号代替双引号 &amp;#34;prettier.proseWrap&amp;#34;: &amp;#34;preserve&amp;#34;, // 默认值。因为使用了一些折行敏感型的渲染器（如GitHub comment）而按照markdown文本样式进行折行 &amp;#34;prettier.arrowParens&amp;#34;: &amp;#34;avoid&amp;#34;, // (x) =&amp;gt; {} 箭头函数参数只有一个时是否要有小括号。avoid：省略括号 &amp;#34;prettier.bracketSpacing&amp;#34;: true, // 在对象，数组括号与文字之间加空格 &amp;#34;{ foo: bar }&amp;#34; &amp;#34;prettier.disableLanguages&amp;#34;: [&amp;#34;vue&amp;#34;], // 不格式化vue文件，vue文件的格式化单独设置 &amp;#34;prettier.endOfLine&amp;#34;: &amp;#34;auto&amp;#34;, // 结尾是 \n \r \n\r auto &amp;#34;prettier.</description></item></channel></rss>