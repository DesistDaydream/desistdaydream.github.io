<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – ECMAScript 工具</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/ECMAScript-%E5%B7%A5%E5%85%B7/</link><description>Recent content in ECMAScript 工具 on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/ECMAScript-%E5%B7%A5%E5%85%B7/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Vite</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/ECMAScript-%E5%B7%A5%E5%85%B7/Vite/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/ECMAScript-%E5%B7%A5%E5%85%B7/Vite/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/vitejs">GitHub 组织，vite&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/vitejs/vite">GitHub 项目，vitejs/vite&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Vue 作者主导的打包与编译工具，启动项目开发模式速度非常快、下载依赖非常快、编译非常快。&lt;/p>
&lt;p>在 &lt;a href="https://github.com/vitejs/awesome-vite">GitHub 项目，vitejs/awesom-vite&lt;/a> 这里有很多使用 Vite 打包的很棒的项目示例&lt;/p>
&lt;h1 id="安装-vite">安装 Vite&lt;/h1>
&lt;h1 id="vite-关联文件与配置">Vite 关联文件与配置&lt;/h1>
&lt;p>&lt;strong>vite.config.js&lt;/strong> # 每个项目的根目录通常都会有一个 vite.config.js 文件，以定义打包项目代码时的行为&lt;/p>
&lt;h3 id="vite-配置详解">Vite 配置详解&lt;/h3>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://cn.vitejs.dev/config/">官方文档，配置&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="常见问题">常见问题&lt;/h1>
&lt;h2 id="解决-vite-打包项目代码后使用的是绝对路径">解决 Vite 打包项目代码后，使用的是绝对路径&lt;/h2>
&lt;p>在 vite.config.js 文件中设置 base&lt;/p>
&lt;h2 id="解决-vite-在-wsl-环境下热更新失效问题">解决 vite 在 WSL 环境下热更新失效问题&lt;/h2>
&lt;p>使用 vite 的好处很多，最明显的就是热更新很快。但是在 wsl 环境的时候，由于&lt;a href="https://github.com/microsoft/WSL/issues/4739">WSL2 的限制&lt;/a>，vite 默认配置是无法监控 windows 文件系统中文件的变化的。这就导致了 vite 的热更新失效。
解决热更新失效的方法主要有两种： 1.文件存储到 WSL 系统环境中 2.配置 vite.config.js 的 &lt;a href="https://cn.vitejs.dev/config/#server-watch">server.watch&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">default&lt;/span> &lt;span style="color:#a6e22e">defineConfig&lt;/span>({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">server&lt;/span>&lt;span style="color:#f92672">:&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">watch&lt;/span>&lt;span style="color:#f92672">:&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#a6e22e">usePolling&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>})
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="vite-syntax语法">vite Syntax(语法)&lt;/h1>
&lt;p>vite 将会启动一个开发服务器，默认响应当前目录的 index.html 文件。&lt;/p>
&lt;p>COMMAND:&lt;/p>
&lt;ul>
&lt;li>build [root] # 构建项目(生产可用)&lt;/li>
&lt;li>optimize [root] # pre-bundle dependencies&lt;/li>
&lt;li>preview [root] # locally preview production build&lt;/li>
&lt;/ul>
&lt;h2 id="build">build&lt;/h2>
&lt;h2 id="preview">preview&lt;/h2>
&lt;p>在本地预览已经通过 &lt;code>vite build&lt;/code> 构建后的项目。注意：执行该命令前，需要先通过 &lt;code>vite build&lt;/code> 打包项目，以便生成 &lt;code>dist/&lt;/code> 目录
启动监听当前目录下的 &lt;code>dist/&lt;/code> 目录。&lt;/p></description></item><item><title>Docs: 代码格式化</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/ECMAScript-%E5%B7%A5%E5%85%B7/%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F%E5%8C%96/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/ECMAScript-%E5%B7%A5%E5%85%B7/%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F%E5%8C%96/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;/blockquote>
&lt;h1 id="prettier">Prettier&lt;/h1>
&lt;h2 id="关联文件与配置">关联文件与配置&lt;/h2>
&lt;p>&lt;strong>.prettierrc.json&lt;/strong> # 通常保存在项目根目录下&lt;/p>
&lt;h2 id="配置详解">配置详解&lt;/h2>
&lt;p>&lt;strong>tabWidth: &amp;lt;INT&amp;gt;&lt;/strong> # 一个制表符相当于几个空格
&lt;strong>semi: &amp;lt;BOOLEAN&amp;gt;&lt;/strong> # 行尾是否添加分号
&lt;strong>htmlWhitespaceSensitivity: &amp;lt;STRING&amp;gt;&lt;/strong> # 使用 ignore 解决尖括号右侧被换行问题
&lt;strong>bracketSameLine: &amp;lt;BOOLEAN&amp;gt;&lt;/strong> # 不要给 &lt;code>&amp;gt;&lt;/code> 另起一行&lt;/p>
&lt;pre>&lt;code>&amp;quot;prettier.printWidth&amp;quot;: 100, // 超过最大值换行
&amp;quot;prettier.tabWidth&amp;quot;: 4, // 缩进字节数
&amp;quot;prettier.useTabs&amp;quot;: false, // 缩进不使用tab，使用空格
&amp;quot;prettier.semi&amp;quot;: true, // 句尾添加分号
&amp;quot;prettier.singleQuote&amp;quot;: true, // 使用单引号代替双引号
&amp;quot;prettier.proseWrap&amp;quot;: &amp;quot;preserve&amp;quot;, // 默认值。因为使用了一些折行敏感型的渲染器（如GitHub comment）而按照markdown文本样式进行折行
&amp;quot;prettier.arrowParens&amp;quot;: &amp;quot;avoid&amp;quot;, //  (x) =&amp;gt; {} 箭头函数参数只有一个时是否要有小括号。avoid：省略括号
&amp;quot;prettier.bracketSpacing&amp;quot;: true, // 在对象，数组括号与文字之间加空格 &amp;quot;{ foo: bar }&amp;quot;
&amp;quot;prettier.disableLanguages&amp;quot;: [&amp;quot;vue&amp;quot;], // 不格式化vue文件，vue文件的格式化单独设置
&amp;quot;prettier.endOfLine&amp;quot;: &amp;quot;auto&amp;quot;, // 结尾是 \n \r \n\r auto
&amp;quot;prettier.eslintIntegration&amp;quot;: false, //不让prettier使用eslint的代码格式进行校验
&amp;quot;prettier.htmlWhitespaceSensitivity&amp;quot;: &amp;quot;ignore&amp;quot;,//包裹文字时候结束标签的结尾尖括号掉到了下一行
&amp;quot;prettier.ignorePath&amp;quot;: &amp;quot;.prettierignore&amp;quot;, // 不使用prettier格式化的文件填写在项目的.prettierignore文件中
&amp;quot;prettier.jsxBracketSameLine&amp;quot;: false, // 在jsx中把'&amp;gt;' 是否单独放一行
&amp;quot;prettier.jsxSingleQuote&amp;quot;: false, // 在jsx中使用单引号代替双引号
&amp;quot;prettier.parser&amp;quot;: &amp;quot;babylon&amp;quot;, // 格式化的解析器，默认是babylon
&amp;quot;prettier.requireConfig&amp;quot;: false, // Require a 'prettierconfig' to format prettier
&amp;quot;prettier.stylelintIntegration&amp;quot;: false, //不让prettier使用stylelint的代码格式进行校验
&amp;quot;prettier.trailingComma&amp;quot;: &amp;quot;es5&amp;quot;, // 在对象或数组最后一个元素后面是否加逗号（在ES5中加尾逗号）
&amp;quot;prettier.tslintIntegration&amp;quot;: false// 不让prettier使用tslint的代码格式进行校验
&lt;/code>&lt;/pre>
&lt;h1 id="eslint">ESLint&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://eslint.bootcss.com/">官网&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item></channel></rss>