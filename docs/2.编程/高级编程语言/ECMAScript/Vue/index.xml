<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – Vue</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/Vue/</link><description>Recent content in Vue on 断念梦</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/Vue/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Vue</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/Vue/Vue/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/Vue/Vue/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/vuejs/">GitHub 组织，vuejs&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://vuejs.org/">官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://staging-cn.vuejs.org/">官网-中文&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cn.vuejs.org/tutorial/">Vue 互动教程&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Vue.js">Wiki,Vue.js&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Vue 是一套用于构建用户界面的渐进式 ECMAScript 框架。Vue3 于 2020 年 9 月发布，已全面采用 TypeScript 编写；在 2022 年 2 月份成为默认版本&lt;/p>
&lt;h2 id="组件化">组件化&lt;/h2>
&lt;p>Vue 是“组件化”模式，一个页面的各个部分，可以拆分成一个一个的组件：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/cye267/1651220067462-1822075c-2b85-4cf4-abd8-eebfa658e531.png" alt="image.png">&lt;/p>
&lt;p>&lt;strong>Single-File Component(单文件组件，简称 SFC)&lt;/strong>。顾名思义，Vue 的单文件组件会将一个组件的逻辑 (JavaScript)，模板 (HTML) 和样式 (CSS) 封装在同一个文件里。&lt;/p>
&lt;p>&lt;strong>同时，多个组件可以自由组合拼接，形成一个完整的页面。&lt;/strong>&lt;/p>
&lt;p>单文件组件是 Vue 的标志性功能。如果你的用例需要进行构建，我们推荐用它来编写 Vue 组件。你可以在后续相关章节里了解更多关于&lt;a href="https://cn.vuejs.org/guide/scaling-up/sfc.html">单文件组件的用法及用途&lt;/a>。但你暂时只需要知道 Vue 会帮忙处理所有这些构建工具的配置就好。&lt;/p>
&lt;p>这些组件通常被组织在 &lt;strong>XXX.vue&lt;/strong> 文件中，通常保存在项目根目录的 &lt;code>components/&lt;/code> 目录下。&lt;/p>
&lt;p>组件化开发是一个树状结构，从一个“根组件”开始：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>App &lt;span style="color:#f92672">(&lt;/span>root component&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├─ TodoList
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └─ TodoItem
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├─ TodoDeleteButton
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └─ TodoEditButton
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└─ TodoFooter
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├─ TodoClearButton
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └─ TodoStatistics
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>就像下面这样：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/cye267/1666837624381-ce56eb28-5092-4e8a-a1c8-de01ed1e1f7f.png" alt="image.png">&lt;/p>
&lt;h2 id="声明式">声明式&lt;/h2>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/cye267/1651220139947-ac46307c-fa52-4370-b7ed-16e2ad92629a.png" alt="image.png">
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/cye267/1666836325564-89bbb0d6-be23-45ea-aa56-bc7183a2eb46.png" alt="image.png">&lt;/p>
&lt;p>有了 VUE 就不用手动操作 DOM 了？&lt;/p>
&lt;h2 id="api-风格">API 风格&lt;/h2>
&lt;p>&lt;strong>选项式 API&lt;/strong> 与 &lt;strong>组合式 API&lt;/strong>。推荐组合式。&lt;/p>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.bilibili.com/video/BV1mK411f7Kt/?p=51">https://www.bilibili.com/video/BV1mK411f7Kt/?p=51&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>选项式：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">default&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">data() {&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">count&lt;/span>: &lt;span style="color:#66d9ef">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// `mounted` 是生命周期钩子，之后我们会讲到
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">mounted() {&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// `this` 指向当前组件实例
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">count&lt;/span>) &lt;span style="color:#75715e">// =&amp;gt; 1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 数据属性也可以被更改
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">count&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>组合式：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">reactive&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#34;vue&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">default&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// `setup` 是一个专门用于组合式 API 的特殊钩子函数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">setup() {&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">state&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">reactive&lt;/span>({ &lt;span style="color:#a6e22e">count&lt;/span>: &lt;span style="color:#66d9ef">0&lt;/span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 暴露 state 到模板
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">state&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>选项式 API 将需要处理的数据放在 &lt;code>data()&lt;/code> 中 ，关于处理数据的逻辑写在 &lt;code>methods:&lt;/code>、&lt;code>computed:&lt;/code>、&lt;code>watch:&lt;/code> 等等地方，如果数据很多，那么处理数据的逻辑在编辑器中将会非常跳跃，就像下图左侧一样，同样颜色的逻辑，不够集中，那么将会形成非常乱的代码结构。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/cye267/1667871595181-70833fc5-41d3-48f1-954f-16c912da8749.png" alt="image.png">
所以说，组合式，主要组合的是对于数据处理的逻辑，将处理同一个数据的逻辑组合在一起，以便编写出更易读的代码。&lt;/p>
&lt;h1 id="vue-指令">Vue 指令&lt;/h1>
&lt;p>指令是带有 &lt;code>v-&lt;/code> 前缀的特殊 attribute。Vue 提供了许多&lt;a href="https://cn.vuejs.org/api/built-in-directives.html">内置指令&lt;/a>。&lt;/p>
&lt;h1 id="vue-规范">Vue 规范&lt;/h1>
&lt;h2 id="项目结构">项目结构&lt;/h2>
&lt;p>使用 Vite 创建的 Vue 项目&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── README.md
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── index.html
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── node_modules
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── package.json
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── pnpm-lock.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── public
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── favicon.ico
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── src
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── App.vue
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── assets/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── components/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── main.js
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── vite.config.js
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>public/ 目录存放公共资源&lt;/li>
&lt;li>所有代码都在 src/ 目录下
&lt;ul>
&lt;li>index.html 指向 main.js，main.js 中创建应用的根组件&lt;/li>
&lt;li>根组件的代码在 App.vue 文件中&lt;/li>
&lt;li>所有根组件下的组件的代码都放在 components/ 目录下&lt;/li>
&lt;li>assets 存放静态资源，图片、css 样式 等等&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>.eslintrc.cjs&lt;/strong> # ESLint 程序配置&lt;/li>
&lt;li>&lt;strong>.prettierc.json&lt;/strong> # Prettier 插件的配置&lt;/li>
&lt;li>&lt;strong>env.d.ts&lt;/strong> #&lt;/li>
&lt;li>&lt;strong>index.html&lt;/strong> # 程序入口&lt;/li>
&lt;li>&lt;strong>package.json&lt;/strong> # 包管理器配置文件，比如 npm、pnpm 等&lt;/li>
&lt;li>&lt;strong>vite.config.ts&lt;/strong> # Vite 程序给项目打包时使用的配置&lt;/li>
&lt;li>&lt;strong>tsconfig.json&lt;/strong> #&lt;/li>
&lt;li>&lt;strong>tsconfig.config.json&lt;/strong> #&lt;/li>
&lt;/ul>
&lt;h1 id="学习资料">学习资料&lt;/h1>
&lt;p>&lt;a href="https://swiperjs.com/vue">Swiperjs-Vue&lt;/a>&lt;/p>
&lt;h2 id="待学习">待学习&lt;/h2>
&lt;p>&lt;a href="https://www.bilibili.com/video/BV1yV4y177jC">B 站，Vue3.2 + Vite + Element-Plus 实现最基础的 CRUD&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.bilibili.com/video/BV1sP4y127Re">B 站，Vue3 项目实战、Vue3+Element-plus 项目实战系列课程（数据管理平台）&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.bilibili.com/video/BV1pq4y1c7oy">B 站，Vue3.2 后台管理系统&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.bilibili.com/video/BV1md4y1C7wS">B 站，一天之内快速搭建 vue 后台管理系统-代码写到起飞,接单接到手软&lt;/a>&lt;/p>
&lt;h2 id="可以学习的项目">可以学习的项目&lt;/h2>
&lt;p>&lt;a href="https://github.com/HalseySpicy/Geeker-Admin">https://github.com/HalseySpicy/Geeker-Admin&lt;/a> # Geeker Admin，基于 Vue3.2、TypeScript、Vite2、Pinia、Element-Plus 开源的一套后台管理框架。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/cye267/1667712440759-38351016-d3de-4246-96ce-f139fb24099c.png" alt="image.png">&lt;/p>
&lt;p>&lt;a href="https://github.com/flipped-aurora/gin-vue-admin">https://github.com/flipped-aurora/gin-vue-admin&lt;/a> # 基于 vite+vue3+gin 搭建的开发基础平台（支持 TS,JS 混用），集成 jwt 鉴权，权限管理，动态路由，显隐可控组件，分页封装，多点登录拦截，资源权限，上传下载，代码生成器，表单生成器等开发必备功能。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/cye267/1667712396903-5c478114-4b5d-42c8-9caf-e301ac58f2fc.png" alt="image.png">&lt;/p>
&lt;p>&lt;a href="https://github.com/go-admin-team/go-admin">https://github.com/go-admin-team/go-admin&lt;/a> # 基于 Gin + Vue + Element UI 的前后端分离权限管理系统脚手架（包含了：多租户的支持，基础用户管理功能，jwt 鉴权，代码生成器，RBAC 资源控制，表单构建，定时任务等）3 分钟构建自己的中后台项目；&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/cye267/1667712379792-273c7485-92f4-46ed-9a98-65e745b1c8df.png" alt="image.png">&lt;/p></description></item><item><title>Docs: Vue 第三方库</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/Vue/Vue-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/Vue/Vue-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/vuejs/awesome-vue">GitHub 项目，vuejs/awesome-vue&lt;/a> # 一些常用的第三方库&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="element-plus">Element Plus&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/element-plus/element-plus">GitHub 项目，element-plus/element-plus&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://element-plus.org/">官网&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Element Plus 是一个基于 Vue3 的 UI 框架。它是 Element UI 基于 Vue3 的重构版本。&lt;/p>
&lt;p>&lt;a href="https://github.com/nmxiaowei/avue">nmxiaowei/avue &lt;/a># 基于现有的 element-ui 库进行的二次封装，简化一些繁琐的操作&lt;/p>
&lt;h1 id="ant-design-vue">Ant Design Vue&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/vueComponent/ant-design-vue">GitHub 项目，vueComponent/ant-design-vue&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://antdv.com/">官网&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>一个基于Ant Design和Vue的企业级UI组件。&lt;/p>
&lt;h1 id="其他">其他&lt;/h1>
&lt;p>&lt;a href="https://github.com/HC200ok/vue3-easy-data-table/">vue3-easy-data-table&lt;/a> # 数据表组件&lt;/p>
&lt;p>&lt;a href="https://github.com/x-extends/vxe-table">x-extends/vxe-table&lt;/a> # vue 表格解决方案&lt;/p>
&lt;p>&lt;a href="https://github.com/mirari/v-viewer">mirari/v-viewer&lt;/a> # vue 的图片查看器组件，支持旋转、缩放、缩放等&lt;/p>
&lt;h3 id="小组件">小组件&lt;/h3>
&lt;p>&lt;a href="https://github.com/yanmiao99/vue3-go-crud-project">yanmiao99/vue3-go-crud-project&lt;/a>&lt;/p></description></item><item><title>Docs: Vue 环境安装与使用</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/Vue/Vue-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/Vue/Vue-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://cn.vuejs.org/guide/scaling-up/tooling.html">官方文档，应用规模化-工具链&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Vue3 早期使用 &lt;a href="https://cli.vuejs.org/">Vue CLI&lt;/a>，创建 Vue 项目，后来 Vue 作者尤雨溪开了一个新的工具 Vite，Vite 通过 &lt;a href="https://github.com/vuejs/create-vue">vuejs/create-vue&lt;/a> 项目，基于 Vite 创建 Vue 项目。&lt;/p>
&lt;h1 id="vite">Vite&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/vitejs/vite">GitHub 项目，vitejs/vite&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://vitejs.dev/">官网&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Vite 是一种新型前端构建工具，可显着改善前端开发体验。它由两个主要部分组成：&lt;/p>
&lt;ul>
&lt;li>一个开发服务器，通过&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules">原生 ES 模块&lt;/a>为您的源文件提供服务，具有&lt;a href="https://vitejs.dev/guide/features.html">丰富的内置功能&lt;/a>和惊人的快速&lt;a href="https://vitejs.dev/guide/features.html#hot-module-replacement">热模块替换 (HMR)&lt;/a>。&lt;/li>
&lt;li>一个&lt;a href="https://vitejs.dev/guide/build.html">构建命令&lt;/a>，将你的代码与&lt;a href="https://rollupjs.org/">Rollup&lt;/a>捆绑在一起，预先配置为输出高度优化的生产静态资产。&lt;/li>
&lt;/ul>
&lt;p>此外，Vite 通过其&lt;a href="https://vitejs.dev/guide/api-plugin.html">插件 API&lt;/a>和&lt;a href="https://vitejs.dev/guide/api-javascript.html">JavaScript API&lt;/a>具有高度的可扩展性，具有完整的类型支持。&lt;/p>
&lt;h2 id="基于-vite-创建-vue-项目">基于 Vite 创建 Vue 项目&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://cn.vuejs.org/guide/quick-start.html#creating-a-vue-application">官方文档，快速上手-创建一个 Vue 应用&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/vitejs/awesome-vite">GitHub 项目，vitejs/awesome-vite&lt;/a>（一些使用 vite 创建的应用模板，可以直接拿来用）
&lt;ul>
&lt;li>&lt;a href="https://github.com/zclzone/vue-naive-admin">Vue Naive&lt;/a> - 管理模板，基于 Vue 3 + Pinia + Naive UI。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>npm init vue@latest
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>注意：通过 npm 将 vite 作为模块安装到 node_modules/ 目录下，然后执行 npm run dev、npm build 等命令时，可以直接调用。但是想在 CLI 直接调用 vite 命令是需要通过 &lt;code>npm install -g vite&lt;/code> 单独安装 vite 命令行工具的
注意：如果不在全局安装 vite，那也可以直接使用 &lt;code>node ./node_moduels/vite/bin/vite.js&lt;/code> 运行在本项目依赖中安装的 vite。&lt;/p>
&lt;/blockquote>
&lt;p>该指令会安装并执行 &lt;a href="https://github.com/vuejs/create-vue">create-vue&lt;/a>(这是 Vue 官方的项目脚手架工具)。我们会看到如下的可选功能：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>✔ Project name: … &amp;lt;your-project-name&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>✔ Add TypeScript? … No / Yes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>✔ Add JSX Support? … No / Yes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>✔ Add Vue Router &lt;span style="color:#66d9ef">for&lt;/span> Single Page Application development? … No / Yes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>✔ Add Pinia &lt;span style="color:#66d9ef">for&lt;/span> state management? … No / Yes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>✔ Add Vitest &lt;span style="color:#66d9ef">for&lt;/span> Unit testing? … No / Yes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>✔ Add Cypress &lt;span style="color:#66d9ef">for&lt;/span> both Unit and End-to-End testing? … No / Yes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>✔ Add ESLint &lt;span style="color:#66d9ef">for&lt;/span> code quality? … No / Yes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>✔ Add Prettier &lt;span style="color:#66d9ef">for&lt;/span> code formatting? … No / Yes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Scaffolding project in ./&amp;lt;your-project-name&amp;gt;...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Done.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果不确定是否要开启某个功能，你可以直接按下回车键选择 No。在项目被创建后，通过以下步骤安装依赖并启动开发服务器：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&amp;gt; cd &amp;lt;your-project-name&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt; npm install
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt; npm run dev
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>npm install&lt;/code> 用以安装本项目的依赖，&lt;code>npm run dev&lt;/code> 则是执行 &lt;code>vite&lt;/code> 命令，此时 Vite 将会启动一个监听程序用以响应 html 文件。&lt;/p>
&lt;h1 id="ide-插件">IDE 插件&lt;/h1>
&lt;h2 id="volar">Volar&lt;/h2>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/bvqpem/1667541398977-a8c81df3-0834-4a86-9179-c50e3c9c9c20.png" alt="image.png">&lt;/p></description></item><item><title>Docs: Vue 响应式</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/Vue/Vue-%E5%93%8D%E5%BA%94%E5%BC%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/Vue/Vue-%E5%93%8D%E5%BA%94%E5%BC%8F/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://cn.vuejs.org/api/">官方文档，API 参考&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cn.vuejs.org/api/reactivity-core.html">官方文档，API 参考-组合式 API-响应式：核心&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>ref 与 reactive 是响应式的基础&lt;/p>
&lt;h1 id="响应式-核心">响应式: 核心&lt;/h1>
&lt;h2 id="ref">ref()&lt;/h2>
&lt;p>&lt;a href="https://cn.vuejs.org/api/reactivity-core.html#ref">https://cn.vuejs.org/api/reactivity-core.html#ref&lt;/a>&lt;/p>
&lt;p>&lt;code>ref()&lt;/code> 函数返回一个 &lt;code>Ref&amp;lt;T = any&amp;gt;&lt;/code> 接口类型的对象，该接口中只有一个名为 &lt;code>value&lt;/code> 的属性，用以指向该对象的值。
&lt;code>Ref&amp;lt;T&amp;gt;&lt;/code> 接口对象是 &lt;strong>响应式&lt;/strong>、&lt;strong>可更改&lt;/strong> 的。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">number&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">ref&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#a6e22e">number&lt;/span> &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>number 是 &lt;code>Ref&amp;lt;number&amp;gt;&lt;/code> 类型的实例，Ref.value 则是该实例的值，即 &lt;code>0&lt;/code>。
Ref 对象是可更改的，也就是说你可以为 .value 赋予新的值。它也是响应式的，即所有对 .value 的操作都将被追踪，并且写操作会触发与之相关的副作用。
如果将一个对象赋值给 ref，那么这个对象将通过 &lt;a href="https://cn.vuejs.org/api/reactivity-core.html#reactive">reactive()&lt;/a> 转为具有深层次响应式的对象。这也意味着如果对象中包含了嵌套的 ref，它们将被深层地解包。
若要避免这种深层次的转换，使用 &lt;a href="https://cn.vuejs.org/api/reactivity-advanced.html#shallowref">shallowRef()&lt;/a> 来替代。&lt;/p>
&lt;h2 id="computed-">computed ()&lt;/h2>
&lt;p>&lt;a href="https://cn.vuejs.org/api/reactivity-core.html#computed">https://cn.vuejs.org/api/reactivity-core.html#computed&lt;/a>&lt;/p>
&lt;h2 id="reactive">reactive()&lt;/h2>
&lt;p>&lt;a href="https://cn.vuejs.org/api/reactivity-core.html#reactive">https://cn.vuejs.org/api/reactivity-core.html#reactive&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://cn.vuejs.org/api/reactivity-core.html#readonly">readonly()&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cn.vuejs.org/api/reactivity-core.html#watcheffect">watchEffect()&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cn.vuejs.org/api/reactivity-core.html#watchposteffect">watchPostEffect()&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cn.vuejs.org/api/reactivity-core.html#watchsynceffect">watchSyncEffect()&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cn.vuejs.org/api/reactivity-core.html#watch">watch()&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="响应式-工具">响应式: 工具&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://cn.vuejs.org/api/reactivity-utilities.html#isref">isRef()&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cn.vuejs.org/api/reactivity-utilities.html#unref">unref()&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cn.vuejs.org/api/reactivity-utilities.html#toref">toRef()&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cn.vuejs.org/api/reactivity-utilities.html#torefs">toRefs()&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cn.vuejs.org/api/reactivity-utilities.html#isproxy">isProxy()&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cn.vuejs.org/api/reactivity-utilities.html#isreactive">isReactive()&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cn.vuejs.org/api/reactivity-utilities.html#isreadonly">isReadonly()&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="响应式-进阶">响应式: 进阶&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://cn.vuejs.org/api/reactivity-advanced.html#shallowref">shallowRef()&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cn.vuejs.org/api/reactivity-advanced.html#triggerref">triggerRef()&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cn.vuejs.org/api/reactivity-advanced.html#customref">customRef()&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cn.vuejs.org/api/reactivity-advanced.html#shallowreactive">shallowReactive()&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cn.vuejs.org/api/reactivity-advanced.html#shallowreadonly">shallowReadonly()&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cn.vuejs.org/api/reactivity-advanced.html#toraw">toRaw()&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cn.vuejs.org/api/reactivity-advanced.html#markraw">markRaw()&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cn.vuejs.org/api/reactivity-advanced.html#effectscope">effectScope()&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cn.vuejs.org/api/reactivity-advanced.html#getcurrentscope">getCurrentScope()&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cn.vuejs.org/api/reactivity-advanced.html#onscopedispose">onScopeDispose()&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="生命周期钩子">生命周期钩子&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://cn.vuejs.org/api/composition-api-lifecycle.html#onmounted">onMounted()&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cn.vuejs.org/api/composition-api-lifecycle.html#onupdated">onUpdated()&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cn.vuejs.org/api/composition-api-lifecycle.html#onunmounted">onUnmounted()&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cn.vuejs.org/api/composition-api-lifecycle.html#onbeforemount">onBeforeMount()&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cn.vuejs.org/api/composition-api-lifecycle.html#onbeforeupdate">onBeforeUpdate()&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cn.vuejs.org/api/composition-api-lifecycle.html#onbeforeunmount">onBeforeUnmount()&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cn.vuejs.org/api/composition-api-lifecycle.html#onerrorcaptured">onErrorCaptured()&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cn.vuejs.org/api/composition-api-lifecycle.html#onrendertracked">onRenderTracked()&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cn.vuejs.org/api/composition-api-lifecycle.html#onrendertriggered">onRenderTriggered()&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cn.vuejs.org/api/composition-api-lifecycle.html#onactivated">onActivated()&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cn.vuejs.org/api/composition-api-lifecycle.html#ondeactivated">onDeactivated()&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cn.vuejs.org/api/composition-api-lifecycle.html#onserverprefetch">onServerPrefetch()&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Docs: Vue 组件</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/Vue/Vue-%E7%BB%84%E4%BB%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/Vue/Vue-%E7%BB%84%E4%BB%B6/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://cn.vuejs.org/guide/essentials/component-basics.html">官方文档，基础-组件基础&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="组件间数据传递">组件间数据传递&lt;/h1>
&lt;p>在 Vue 中，组件之间可以传递多种类型的数据&lt;/p>
&lt;ul>
&lt;li>变量，通过 Props。
&lt;ul>
&lt;li>关键字：v-bind&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>模板，通过 Slots
&lt;ul>
&lt;li>关键字：&amp;lt;template&amp;gt;、v-slot&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>事件，通过 Event
&lt;ul>
&lt;li>关键字：v-model、v-on、emit&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="props">Props&lt;/h2>
&lt;h2 id="slots">Slots&lt;/h2>
&lt;p>&lt;strong>Slot Content(插槽内容)&lt;/strong> 与 &lt;strong>Slot Outlet(插槽出口)&lt;/strong>&lt;/p>
&lt;p>&lt;code>&amp;lt;slot&amp;gt;&lt;/code> 元素是一个 &lt;strong>Slot Outlet(插槽出口)&lt;/strong>，标示了父元素提供的 &lt;strong>Slot Content(插槽内容)&lt;/strong> 将在哪里被渲染。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/bigg4rx374wdctrg/1669263120268-c5d8e233-599c-4779-b9b0-3bcb15e9ff2a.png" alt="image.png">&lt;/p>
&lt;h2 id="event">Event&lt;/h2>
&lt;p>&lt;strong>Event(事件)&lt;/strong>&lt;/p></description></item></channel></rss>