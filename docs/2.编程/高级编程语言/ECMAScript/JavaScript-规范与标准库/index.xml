<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>JavaScript 规范与标准库 on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/JavaScript-%E8%A7%84%E8%8C%83%E4%B8%8E%E6%A0%87%E5%87%86%E5%BA%93/</link><description>Recent content in JavaScript 规范与标准库 on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/JavaScript-%E8%A7%84%E8%8C%83%E4%B8%8E%E6%A0%87%E5%87%86%E5%BA%93/index.xml" rel="self" type="application/rss+xml"/><item><title>JavaScript 规范与标准库</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/JavaScript-%E8%A7%84%E8%8C%83%E4%B8%8E%E6%A0%87%E5%87%86%E5%BA%93/JavaScript-%E8%A7%84%E8%8C%83%E4%B8%8E%E6%A0%87%E5%87%86%E5%BA%93/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/JavaScript-%E8%A7%84%E8%8C%83%E4%B8%8E%E6%A0%87%E5%87%86%E5%BA%93/JavaScript-%E8%A7%84%E8%8C%83%E4%B8%8E%E6%A0%87%E5%87%86%E5%BA%93/</guid><description>概述 参考：
GitHub,DesistDaydream/javascript-learning(个人学习代码) MDN 官方文档，Web 开发技术-Web APIs JavaScript 语言参考描述了 JavaScript 语言的具体语法和语义 JavaScript 标准库则是与 JavaScript 语言一起发行的一些可选功能，以便人们可以从一开始就轻松得使用 JavaScript 进行编程。 JavaScript 语言的标准库不像其他语言似的，由于运行时只有一个，所以也只有一个标准库，JavaScript 可以通过 Node.JS 在系统中运行，也可以通过浏览器运行，后来出的 Deno 运行时与 Node.js 还不一样。
所以，JavaScript 的标准库根据运行时环境的不同而不同。但是 JavaScripts 代码本身的关键字还是通用的。
JavaScript 的基本语法 参考：
网道，JavaScript-JavaScript 的基本语法 语句 JavaScript 程序的执行单位为行（line），也就是一行一行地执行。一般情况下，每一行就是一个语句。
语句（statement）是为了完成某种任务而进行的操作，比如下面就是一行赋值语句。
var a = 1 + 3; 这条语句先用var命令，声明了变量a，然后将1 + 3的运算结果赋值给变量a。
1 + 3叫做表达式（expression），指一个为了得到返回值的计算式。语句和表达式的区别在于，前者主要为了进行某种操作，一般情况下不需要返回值；后者则是为了得到返回值，一定会返回一个值。凡是 JavaScript 语言中预期为值的地方，都可以使用表达式。比如，赋值语句的等号右边，预期是一个值，因此可以放置各种表达式。
语句以分号结尾，一个分号就表示一个语句结束。多个语句可以写在一行内。
var a = 1 + 3 ; var b = &amp;#39;abc&amp;#39;; 分号前面可以没有任何内容，JavaScript 引擎将其视为空语句。
;;; 上面的代码就表示 3 个空语句。</description></item><item><title>Data type</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/JavaScript-%E8%A7%84%E8%8C%83%E4%B8%8E%E6%A0%87%E5%87%86%E5%BA%93/Data-type/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/JavaScript-%E8%A7%84%E8%8C%83%E4%B8%8E%E6%A0%87%E5%87%86%E5%BA%93/Data-type/</guid><description>概述 参考：
MDN 官方文档，JavaScript-JavaScript 数据类型和数据结构 MDN 官方文档，Javascript 标准内置对象(所有类型的对象的列表) 网道，JavaScript 教程-面向对象编程-实例对象与 new 命令 https://www.bilibili.com/video/BV1W54y1J7Ed?p=50 Primitive Type(原始类型，有的地方也称为基本数据类型)
Number(数值) # 十进制数字、科学计数法、其他进程表示方式的数字 String(字符串) # 单引号或双引号内的一切内容 Boolean(布尔) # ture 和 false Null(空) # Undefined Null # Null 类型是 Object，这是由于历史原因造成的。1995 年的 JavaScript 语言第一版，只设计了五种数据类型（对象、整数、浮点数、字符串和布尔值），没考虑 null，只把它当作 object 的一种特殊值。后来 null 独立出来，作为一种单独的数据类型，为了兼容以前的代码，typeof null 返回 object 就没法改变了。 Complex Type(合成类型，有的地方也称为引用数据类型)
object(对象) # 各种值组成的集合，也就是下文提到的 标准内置对象。在很多场景下，第一个 O 是小写的。 object 又划分为很多子类型： Ojbect(对象) # 与 字典、映射 等同义的那个对象。 Array(数组) # Functiom(函数) # JavaScript 中将 Function 当做一种类型来处理 其他 # 通常我们这么描述： Object 类型的 object、Array 类型的 object、String 类型的 object、等等。简化一点就是 Object 对象、Array 对象、String 对象、等等。 数据类型检测</description></item><item><title>Event</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/JavaScript-%E8%A7%84%E8%8C%83%E4%B8%8E%E6%A0%87%E5%87%86%E5%BA%93/Event/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/JavaScript-%E8%A7%84%E8%8C%83%E4%B8%8E%E6%A0%87%E5%87%86%E5%BA%93/Event/</guid><description>概述 参考：
网道，Javascript 教程-事件 Event(事件) 的本质是程序各个组成部分之间的一种通信方式，也是异步编程的一种实现。DOM 支持大量的事件，
事件语法：
elementObject.onEventType=Function(){} elementObject # 元素对象，也就是事件源，通常是通过类似 getElementByID()之类的方法获取到的 HTML 中的元素 onEventType # 以on开头，后面跟一个事件名称 Function(){} # elementObject 触发 onEventType 时要执行的代码，也就是 HTML 中某一元素触发事件时要执行的操作 比如：
var divElement = document.getElementById(&amp;#34;event&amp;#34;) // click 点击事件 divElement.onclick = function () { console.log(divElement, &amp;#34;元素，被点击了一下&amp;#34;) } 事件类型 鼠标事件 click # 鼠标单击 dblclick # 鼠标双击 contextmenu # 左键单击 mousedown # 鼠标按下 mouseup # 鼠标抬起 mousemove # 鼠标移动 mouseenter # 鼠标移入 mouseleave # 鼠标移出 &amp;hellip;&amp;hellip; 等等 键盘事件 keydown # 键盘按下 keyup # 键盘抬起 keypress # 键盘输入 &amp;hellip;&amp;hellip; 等等 浏览器事件 load # 加载完毕 scroll # 滚动 resize # 尺寸改变 &amp;hellip;&amp;hellip; 等等 触摸事件 touchstart # 触摸开始 touchmove # 触摸移动 touchend # 触摸结束 &amp;hellip;&amp;hellip; 等等 表单事件 focus # 聚焦 blue # 失焦 change # 改变 input # 输入 submit # 提交 reset # 重置 &amp;hellip;&amp;hellip; 等等 事件对象 每个事件触发时，都会记录一组数据，这组数据是事件类型对象，事件对象数据中的数据包括该时间一系列属性信息，比如：</description></item><item><title>object</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/JavaScript-%E8%A7%84%E8%8C%83%E4%B8%8E%E6%A0%87%E5%87%86%E5%BA%93/object/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/JavaScript-%E8%A7%84%E8%8C%83%E4%B8%8E%E6%A0%87%E5%87%86%E5%BA%93/object/</guid><description>概述 参考：
MDN，使用对象 object(对象) 是 Javascript 语言的核心概念。所有的数据类型都可以称之为 object。
JS 中的 object 可以简单理解为面向对象编程语言中的“对象”，只不过并不用 class 这种关键字进行声明（不过，在 ES6 标注后，可以使用 class 关键字声明一个 object）
JS 的 object 也是一系列 Property(属性) 的集合。属性包含一个名和一个值，若属性的值是一个函数，则该属性也称为 Method(方法)
var myObject = { // 其他属性... propertyOne: &amp;#34;Hello&amp;#34;, // 创建 myObject 对象的方法，方法名为 methodOne // 这个其实就类似于一个名为 methodOne 的函数，就像 `function methodOne(t)` methodOne: function (a) { // 实际的方法体代码 console.log(&amp;#34;调用了 myObject 对象的方法，参数为:&amp;#34; + a); }, methodTwo(a) { console.log(&amp;#34;调用了 myObject 对象的方法，参数为:&amp;#34;, a) } // 其他方法或属性... }; 注意：Javascript 还有一个 Object 类型的的数据也可以称为 object。。。挺绕的。。。0.</description></item><item><title>Promise</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/JavaScript-%E8%A7%84%E8%8C%83%E4%B8%8E%E6%A0%87%E5%87%86%E5%BA%93/Promise/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/JavaScript-%E8%A7%84%E8%8C%83%E4%B8%8E%E6%A0%87%E5%87%86%E5%BA%93/Promise/</guid><description>概述 参考：
B 站 up-思学堂，5 分钟彻底学会使用 Promise，你真的懂 Promise 吗？ https://www.runoob.com/w3cnote/javascript-promise-object.html Promise 是一个对象，它代表了一个异步操作的最终完成或者失败。
一个 Promise 必然处于以下几种状态之一：
pending(待定) # 初始状态，既没有被兑现，也没有被拒绝。 fulfilled(已兑现) # 意味着操作成功完成。 rejected(已拒绝) # 意味着操作失败。 Promise 的链式调用 Promise.prototype.then()、Promise.prototype.catch() 和 Promise.prototype.finally() 方法用于将进一步的操作与已敲定的 Promise 相关联。由于这些方法返回 Promise，因此它们可以被链式调用。
.then() 方法最多接受两个参数；第一个参数是 Promise 兑现时的回调函数，第二个参数是 Promise 拒绝时的回调函数。每个 .then() 返回一个新生成的 Promise 对象，这个对象可被用于链式调用，例如：
const myPromise = new Promise((resolve, reject) =&amp;gt; { setTimeout(() =&amp;gt; { resolve(&amp;#34;foo&amp;#34;); }, 300); }); myPromise .then(handleFulfilledA, handleRejectedA) .then(handleFulfilledB, handleRejectedB) .then(handleFulfilledC, handleRejectedC); 方法 Promise.resolve() 方法
Promise.reject() 方法</description></item><item><title>各种类型的 object(对象) 的常见方法</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/JavaScript-%E8%A7%84%E8%8C%83%E4%B8%8E%E6%A0%87%E5%87%86%E5%BA%93/%E5%90%84%E7%A7%8D%E7%B1%BB%E5%9E%8B%E7%9A%84-object%E5%AF%B9%E8%B1%A1-%E7%9A%84%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/JavaScript-%E8%A7%84%E8%8C%83%E4%B8%8E%E6%A0%87%E5%87%86%E5%BA%93/%E5%90%84%E7%A7%8D%E7%B1%BB%E5%9E%8B%E7%9A%84-object%E5%AF%B9%E8%B1%A1-%E7%9A%84%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95/</guid><description>概述 参考：
MDN 官方文档，参考-JavaScript-JavaScript-标准内置对象 MDN 官方文档，参考-WebAPIs String 对象 常用 String 对象的方法
toLowerCase() # 将字符串内的字母全部转换成小写 toUpperCase() 将字符串内的字母全部转换成大写 replace(&amp;ldquo;D&amp;rdquo;, 1) # replace(searchValue,replaceValue) 将字符串内第一个满足 searchValue 条件的字符替换为 replaceValue。注意：只能替换第一个 trim() # 去除首尾所有空白字符 split(&amp;quot; &amp;ldquo;) # 按照分隔符将字符串切割为一个数组。注意：只有字符串中有指定的分隔符，才会生效。否则切割后的元素只有一个。 截取字符串 substr(5, 8) # 第一个参数是开始截取的索引号，第二个参数是截取数量 substring(5, 8) # 第一个参数是开始截取的索引号，第二个参数是结束截取的索引号 slice(5, 8) # 第一个参数是开始截取的索引号，第二个参数是结束截取的索引号 Array 对象 常用 Array 对象的方法
会改变原始数组的内容 push() # 从后面追加 pop() # 从后面删除 unshift() # 从前面添加 shift() # 从前面删除 reverse() # 反转数组 splice() # 截取并添加 sort() # 数组排序 不会改变原始数组的内容 join() # 数组连接为字符串 concat() # 拼接数组 slice() # 截取数组 indexOf() # 查找元素在数组中的索引 forEach() # 遍历数组 map() # 映射数组 filter() # 过滤数组 every() # 判断是否全部满足条件 some() # 判断是否有满足条件的项</description></item><item><title>回调函数与异步编程</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/JavaScript-%E8%A7%84%E8%8C%83%E4%B8%8E%E6%A0%87%E5%87%86%E5%BA%93/%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E4%B8%8E%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/JavaScript-%E8%A7%84%E8%8C%83%E4%B8%8E%E6%A0%87%E5%87%86%E5%BA%93/%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E4%B8%8E%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/</guid><description>概述 参考：
https://www.runoob.com/js/js-async.html Promise</description></item></channel></rss>