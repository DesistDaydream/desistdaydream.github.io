<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C/</link><description>Recent content in C on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C/index.xml" rel="self" type="application/rss+xml"/><item><title>C</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C/C/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C/C/</guid><description>概述 参考：
ISO C 工作组官网 https://www.learn-c.org/ Wiki, C Programming Language 网道，C Hello World 代码：hello_world.c
#include &amp;lt;stdio.h&amp;gt; int main(void) { printf(&amp;#34;Hello World\n&amp;#34;); return 0; } 编译
gcc hello_world.c 运行
$ ./a.out Hello World</description></item><item><title>C 规范与标准库</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C/C-%E8%A7%84%E8%8C%83%E4%B8%8E%E6%A0%87%E5%87%86%E5%BA%93/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C/C-%E8%A7%84%E8%8C%83%E4%B8%8E%E6%A0%87%E5%87%86%E5%BA%93/</guid><description>概述 参考：
位移运算符 可以在 Linux 网络设备 中对 /sys/class/net/${NetDeviceName}/flags 文件含义的解释，找到位移运算的典型示例
1&amp;lt;&amp;lt;0、1&amp;lt;&amp;lt;1 等是位移运算符的表达方式，在许多编程语言（如 C、C++、Go、Python 等）中都有使用。它们表示“位移”操作，这个位移操作需要先将 1 转为 二进制，然后让所有数字向左移动指定的位数，移动后空的位置用 0 补齐。
1&amp;lt;&amp;lt;0 表示将 1 （i.e. 二进制 1）向左移动 0 位，仍然是 1。 1&amp;lt;&amp;lt;1 表示将 1 （i.e. 二进制 1）向左移动 1 位，结果是 10，值为 2。 1&amp;lt;&amp;lt;2 表示将 1 （i.e. 二进制 1）向左移动 2 位，结果是 100，值为 4。 3&amp;lt;&amp;lt;2 表示将 3 （i.e. 二进制 11）向左移动 2 位，结果是 1100，值为 12 位移的用途 利用数字 1 进行位移运算的这种位移操作，通常用于设置标志位。通过将特定位设置为 1 或 0，可以高效地表示多个布尔值（true/false）信息，i.e. 高效设置、存储和处理多个状态标志，尤其是在底层代码和系统编程中广泛使用。它在提高代码效率、节省存储空间、简化状态管理方面非常有用。
位掩码（Bitmask）操作：可以用来对一组位进行操作，常见于标志位的组合使用。通过设置、清除或检测某些位，代码可以很高效地处理多个状态。 高效存储：用一组位来表示多个布尔值时，比使用单独的变量更节省内存。一个整数可以用 32 位或 64 位来存储多种状态。 按位操作：可以方便地进行某些特定的操作，比如对位进行取反、与、或等运算，从而控制状态位或进行权限管理等。 例如：</description></item></channel></rss>