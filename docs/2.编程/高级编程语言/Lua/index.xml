<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦的站点 – Lua</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Lua/</link><description>Recent content in Lua on 断念梦的站点</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Lua/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Lua</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Lua/Lua/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Lua/Lua/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/lua/lua">GitHub 项目，lua/lua&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.lua.org/about.html">官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Lua_(programming_language)">Wiki，Lua&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.zhihu.com/question/19841006">知乎，Lua 是怎样一门语言？&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Lua 是一种强大、高效、轻量级、可嵌入的脚本语言。它支持过程式编程、面向对象编程、函数式编程、数据驱动编程和数据描述。&lt;/p>
&lt;blockquote>
&lt;p>tips: “Lua”（发音为 LOO-ah）在葡萄牙语中的意思是“月亮”。因此，它既不是首字母缩略词也不是缩写词，而是一个名词。更具体地说，“Lua”是一个名字，是地球月球的名字，也是语言的名字。与大多数名称一样，它应该以小写字母开头，即“Lua”。请不要将其写为“LUA”，这样既难看又令人困惑，因为这样它就变成了一个缩写词，对不同的人有不同的含义。所以，请把“Lua”写对！&lt;/p>
&lt;/blockquote>
&lt;h2 id="学习资料">学习资料&lt;a class="td-heading-self-link" href="#%e5%ad%a6%e4%b9%a0%e8%b5%84%e6%96%99" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://www.runoob.com/lua/lua-tutorial.html">菜鸟教程，Lua&lt;/a>&lt;/p>
&lt;p>安装完 &lt;a href="https://github.com/rjpcomputing/luaforwindows">rjpcomputing/luaforwindows&lt;/a> 编译器后，可以在 &lt;code>安装目录/examples/quickluatour.lua&lt;/code> 文件中看到非常全面的 Lua 使用示例，直接运行就可体验基本的 Lua 语法。&lt;/p>
&lt;h1 id="hello-world">Hello World&lt;a class="td-heading-self-link" href="#hello-world" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-lua" data-lang="lua">&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">&amp;#34;Hello World!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Lua可以在交互模式下输入代码直接查看效果，也可以将lua代码写入以.lua结尾的文件，然后使用&lt;code>lua FILE.lua&lt;/code>命令查看代码效果，效果如下：&lt;/p>
&lt;p>交互式：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-lua" data-lang="lua">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">~&lt;/span>]&lt;span style="color:#f92672">#&lt;/span> lua
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Lua &lt;span style="color:#ae81ff">5.1.4&lt;/span> Copyright (C) &lt;span style="color:#ae81ff">1994&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">2008&lt;/span> Lua.org, PUC&lt;span style="color:#f92672">-&lt;/span>Rio
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> print(&lt;span style="color:#e6db74">&amp;#34;hello world!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hello world&lt;span style="color:#960050;background-color:#1e0010">!&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>脚本式：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-lua" data-lang="lua">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">~&lt;/span>]&lt;span style="color:#f92672">#&lt;/span> cat hello_world.lua
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">&amp;#34;hello world!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">~&lt;/span>]&lt;span style="color:#f92672">#&lt;/span> lua hello_world.lua
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hello world&lt;span style="color:#960050;background-color:#1e0010">!&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="lua-环境安装与使用">Lua 环境安装与使用&lt;a class="td-heading-self-link" href="#lua-%e7%8e%af%e5%a2%83%e5%ae%89%e8%a3%85%e4%b8%8e%e4%bd%bf%e7%94%a8" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;strong>LuaJIT&lt;/strong>(Just-In-Time) 是 Lua 编程语言的跟踪即时编译器。&lt;/p>
&lt;p>window 下你可以使用一个叫 &amp;ldquo;SciTE&amp;rdquo; 的 IDE环 境来执行 lua 程序，下载地址为：&lt;/p>
&lt;ul>
&lt;li>Github 下载地址：&lt;a href="https://github.com/rjpcomputing/luaforwindows/releases">https://github.com/rjpcomputing/luaforwindows/releases&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Docs: Lua 规范与标准库</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Lua/Lua-%E8%A7%84%E8%8C%83%E4%B8%8E%E6%A0%87%E5%87%86%E5%BA%93/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Lua/Lua-%E8%A7%84%E8%8C%83%E4%B8%8E%E6%A0%87%E5%87%86%E5%BA%93/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;/blockquote>
&lt;h1 id="lua-语言关键字">Lua 语言关键字&lt;a class="td-heading-self-link" href="#lua-%e8%af%ad%e8%a8%80%e5%85%b3%e9%94%ae%e5%ad%97" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;/blockquote>
&lt;p>Lua的关键字有下面几个，这些关键字不能作为常量或者变量或其他用户自定义标识符&lt;/p>
&lt;ol>
&lt;li>and&lt;/li>
&lt;li>break&lt;/li>
&lt;li>do&lt;/li>
&lt;li>else&lt;/li>
&lt;li>elseif&lt;/li>
&lt;li>end&lt;/li>
&lt;li>false&lt;/li>
&lt;li>for&lt;/li>
&lt;li>function&lt;/li>
&lt;li>if&lt;/li>
&lt;li>in&lt;/li>
&lt;li>local&lt;/li>
&lt;li>nil&lt;/li>
&lt;li>not&lt;/li>
&lt;li>or&lt;/li>
&lt;li>repeat&lt;/li>
&lt;li>return&lt;/li>
&lt;li>then&lt;/li>
&lt;li>true&lt;/li>
&lt;li>until&lt;/li>
&lt;li>while&lt;/li>
&lt;li>goto&lt;/li>
&lt;/ol>
&lt;h1 id="lua-语言规范">Lua 语言规范&lt;a class="td-heading-self-link" href="#lua-%e8%af%ad%e8%a8%80%e8%a7%84%e8%8c%83" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;/blockquote>
&lt;p>一般来说，以下划线开头连接一串大写字母的名字（比如_VERSION）被保留用于Lua内部全局变量,效果如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-lua" data-lang="lua">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">~&lt;/span>]&lt;span style="color:#f92672">#&lt;/span> lua
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Lua &lt;span style="color:#ae81ff">5.1.4&lt;/span> Copyright (C) &lt;span style="color:#ae81ff">1994&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">2008&lt;/span> Lua.org, PUC&lt;span style="color:#f92672">-&lt;/span>Rio
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> print(_VERSION)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Lua &lt;span style="color:#ae81ff">5.1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="lua-标准库">Lua 标准库&lt;a class="td-heading-self-link" href="#lua-%e6%a0%87%e5%87%86%e5%ba%93" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.lua.org/manual/5.4/manual.html#6">lua 参考手册，6 - 标准库&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="数据类型">数据类型&lt;a class="td-heading-self-link" href="#%e6%95%b0%e6%8d%ae%e7%b1%bb%e5%9e%8b" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>number&lt;/li>
&lt;li>string&lt;/li>
&lt;li>table&lt;/li>
&lt;li>function&lt;/li>
&lt;/ul>
&lt;h2 id="变量">变量&lt;a class="td-heading-self-link" href="#%e5%8f%98%e9%87%8f" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>lua的变量有三种类型：&lt;/p>
&lt;ol>
&lt;li>全局变量。&lt;/li>
&lt;li>局部变量。&lt;/li>
&lt;li>表中的域。&lt;/li>
&lt;/ol>
&lt;p>默认情况下，lua定义的变量为全局变量。全局变量不需要声明，给一个变量赋值后即创建了这个变量，访问一个没有初始化的变量并不会报错，只不过得到的结果是&lt;code>nil&lt;/code>,效果如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-lua" data-lang="lua">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> print(b)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> b&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> print(b)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note：如果想要删除一个变量，只需要将&lt;code>nil&lt;/code>赋值给变量即可&lt;/p>
&lt;p>也就是说，当且当一个变量不等于&lt;code>nil&lt;/code>时，这个变量即存在&lt;/p>
&lt;p>使用&lt;code>local&lt;/code>关键字即可将变量声明为局部变量，效果如下:&lt;code>local b = 5 &lt;/code>&lt;/p>
&lt;h2 id="table">table&lt;a class="td-heading-self-link" href="#table" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>table 是 Lua 语言中的一种数据结构，可以通过 table 这种数据结构实现 数组、字典 等等常见的数据类型。同时，Lua 也是通过 table 来解决 模块、包、对象 等面向对象相关的问题。&lt;/p>
&lt;ul>
&lt;li>Lua 本身没有专门的数组类型，而是使用 table 的数据结构来实现数组的功能&lt;/li>
&lt;li>Lua 的面向对象功能也通过 table 来实现。&lt;/li>
&lt;/ul>
&lt;p>table 使用 &lt;code>{}&lt;/code> 符号声明&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-lua" data-lang="lua">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">-- 初始化表&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mytable &lt;span style="color:#f92672">=&lt;/span> {}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>表可以用通过 &lt;code>.&lt;/code> 和 &lt;code>[]&lt;/code> 这两种符号调用 table 中的元素&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-lua" data-lang="lua">&lt;span style="display:flex;">&lt;span>address&lt;span style="color:#f92672">=&lt;/span>{} &lt;span style="color:#75715e">-- empty address&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>address.Street&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Wyman Street&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>address.StreetNumber&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">360&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>address.AptNumber&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;2a&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>address.City&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Watertown&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>address.State&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Vermont&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>address.Country&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;USA&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(address.StreetNumber, address[&lt;span style="color:#e6db74">&amp;#34;AptNumber&amp;#34;&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">-------- Output ------&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">360&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>a
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="面向对象">面向对象&lt;a class="td-heading-self-link" href="#%e9%9d%a2%e5%90%91%e5%af%b9%e8%b1%a1" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Lua 中最基本的结构是 table，所以需要用 table 这个数据结构来描述对象的属性。&lt;/p>
&lt;ul>
&lt;li>lua 中的 function 可以用来表示方法。那么LUA中的类可以通过 table + function 模拟出来。&lt;/li>
&lt;li>至于继承，可以通过 metetable 模拟出来（不推荐用，只模拟最基本的对象大部分实现够用了）。&lt;/li>
&lt;/ul>
&lt;p>Lua 中的表不仅在某种意义上是一种对象。像对象一样，表也有状态（成员变量）；也有与对象的值独立的本性，特别是拥有两个不同值的对象（table）代表两个不同的对象；一个对象在不同的时候也可以有不同的值，但他始终是一个对象；与对象类似，表的生命周期与其由什么创建、在哪创建没有关系。表也可以有自己的 Method(方法)（用 C++ 的叫法就叫：成员函数）：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-lua" data-lang="lua">&lt;span style="display:flex;">&lt;span>Account &lt;span style="color:#f92672">=&lt;/span> {balance &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">Account&lt;/span>.&lt;span style="color:#a6e22e">withdraw&lt;/span> (v)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    Account.balance &lt;span style="color:#f92672">=&lt;/span> Account.balance &lt;span style="color:#f92672">-&lt;/span> v
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">-- 然后可以像这样调用 Account 的 withdraw 方法&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Account.withdraw(&lt;span style="color:#ae81ff">100.00&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>以下简单的类包含了三个属性： area, length 和 breadth，和一个 printArea 成员函数用于打印计算结果：&lt;/p>
&lt;blockquote>
&lt;p>Lua 使用冒号 &lt;code>:&lt;/code> &lt;strong>定义和调用对象的方法&lt;/strong>。使用冒号可以隐式地传递一个名为 self 的参数，该参数指向调用方法的对象自身。这样，在方法内部就可以通过 self 来访问对象的属性和调用其他方法。而在方法调用时，使用冒号可以简化语法，不需要显式地传递 self 参数，Lua会自动将调用者作为 self 参数传入方法。这种语法糖的使用可以使代码更加简洁易读。&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-lua" data-lang="lua">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">-- 元类&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Rectangle &lt;span style="color:#f92672">=&lt;/span> {area &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>, length &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>, breadth &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">-- 派生类的方法 new&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">Rectangle&lt;/span>:&lt;span style="color:#a6e22e">new&lt;/span> (o,length,breadth)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> o &lt;span style="color:#f92672">=&lt;/span> o &lt;span style="color:#f92672">or&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> setmetatable(o, self)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self.__index &lt;span style="color:#f92672">=&lt;/span> self
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self.length &lt;span style="color:#f92672">=&lt;/span> length &lt;span style="color:#f92672">or&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self.breadth &lt;span style="color:#f92672">=&lt;/span> breadth &lt;span style="color:#f92672">or&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self.area &lt;span style="color:#f92672">=&lt;/span> length&lt;span style="color:#f92672">*&lt;/span>breadth
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> o
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">-- 派生类的方法 printArea&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">Rectangle&lt;/span>:&lt;span style="color:#a6e22e">printArea&lt;/span> ()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;矩形面积为 &amp;#34;&lt;/span>,self.area)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>创建对象&lt;/strong>&lt;/p>
&lt;p>创建对象是为类的实例分配内存的过程。每个类都有属于自己的内存并共享公共数据。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-lua" data-lang="lua">&lt;span style="display:flex;">&lt;span>r &lt;span style="color:#f92672">=&lt;/span> Rectangle:new(&lt;span style="color:#ae81ff">1&lt;/span>,&lt;span style="color:#ae81ff">10&lt;/span>,&lt;span style="color:#ae81ff">20&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>访问属性&lt;/strong>&lt;/p>
&lt;p>使用点号 &lt;code>.&lt;/code> 来访问类的属性：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-lua" data-lang="lua">&lt;span style="display:flex;">&lt;span>print(r.length)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>访问成员函数&lt;/strong>&lt;/p>
&lt;p>使用冒号 &lt;code>:&lt;/code> 来访问类的成员函数：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-lua" data-lang="lua">&lt;span style="display:flex;">&lt;span>r:printArea()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>内存在对象初始化时分配。&lt;/p></description></item></channel></rss>