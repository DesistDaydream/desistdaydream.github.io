<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – Python 规范与标准库</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/Python-%E8%A7%84%E8%8C%83%E4%B8%8E%E6%A0%87%E5%87%86%E5%BA%93/</link><description>Recent content in Python 规范与标准库 on 断念梦</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/Python-%E8%A7%84%E8%8C%83%E4%B8%8E%E6%A0%87%E5%87%86%E5%BA%93/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Python 规范与标准库</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/Python-%E8%A7%84%E8%8C%83%E4%B8%8E%E6%A0%87%E5%87%86%E5%BA%93/Python-%E8%A7%84%E8%8C%83%E4%B8%8E%E6%A0%87%E5%87%86%E5%BA%93/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/Python-%E8%A7%84%E8%8C%83%E4%B8%8E%E6%A0%87%E5%87%86%E5%BA%93/Python-%E8%A7%84%E8%8C%83%E4%B8%8E%E6%A0%87%E5%87%86%E5%BA%93/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.python.org/3/library/index.html">官方文档-3，标准库&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;strong>Python 语言参考&lt;/strong>描述了 Python 语言的具体语法和语义&lt;/li>
&lt;li>&lt;strong>Python 标准库则&lt;/strong>是与 Python 语言一起发行的一些可选功能，以便人们可以从一开始就轻松得使用 Python 进行编程。&lt;/li>
&lt;/ul>
&lt;h2 id="内置模块">内置模块&lt;/h2>
&lt;p>内置模块属于&lt;a href="#%E6%A6%82%E8%BF%B0">Python 规范与标准库&lt;/a>的一部分。这部分内置模块内嵌到解释器里面（也就是说无法在文件系统中找到与模块名相同的同名文件），它们给一些虽并非语言核心但却内嵌的操作提供接口，要么是为了效率，要么是给操作系统基础操作例如系统调入提供接口。 这些模块集是一个配置选项， 并且还依赖于底层的操作系统。 例如，&lt;a href="https://docs.python.org/zh-cn/3/library/winreg.html#module-winreg" title="winreg: Routines and objects for manipulating the Windows registry. (Windows)">&lt;code>winreg&lt;/code>&lt;/a> 模块只在 Windows 系统上提供。一个特别值得注意的模块 &lt;a href="https://docs.python.org/zh-cn/3/library/sys.html#module-sys" title="sys: Access system-specific parameters and functions.">&lt;code>sys&lt;/code>&lt;/a>，它被内嵌到每一个 Python 编译器中，&lt;strong>sys 模块是 CPython 非常重要的内置模块，也是很多功能的基础模块&lt;/strong>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#f92672">import&lt;/span> sys
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;gt;&amp;gt;&amp;gt;&lt;/span> sys&lt;span style="color:#f92672">.&lt;/span>builtin_module_names
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#e6db74">&amp;#39;_abc&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;_ast&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;_bisect&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;_blake2&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;_codecs&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;_codecs_cn&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;_codecs_hk&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;_codecs_iso2022&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;_codecs_jp&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;_codecs_kr&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;_codecs_tw&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;_collections&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;_contextvars&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;_csv&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;_datetime&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;_functools&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;_heapq&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;_imp&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;_io&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;_json&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;_locale&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;_lsprof&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;_md5&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;_multibytecodec&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;_opcode&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;_operator&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;_pickle&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;_random&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;_sha1&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;_sha256&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;_sha3&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;_sha512&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;_signal&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;_sre&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;_stat&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;_statistics&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;_string&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;_struct&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;_symtable&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;_thread&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;_tracemalloc&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;_warnings&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;_weakref&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;_winapi&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;_xxsubinterpreters&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;array&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;atexit&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;audioop&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;binascii&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;builtins&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;cmath&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;errno&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;faulthandler&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;gc&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;itertools&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;marshal&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;math&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;mmap&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;msvcrt&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;nt&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;sys&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;time&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;winreg&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;xxsubtype&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;zlib&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="python-标识符与关键字">Python 标识符与关键字&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.python.org/3/reference/lexical_analysis.html#identifiers">官方文档，参考-2.3.标识符和关键字&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;strong>and&lt;/strong>&lt;/li>
&lt;li>&lt;strong>as&lt;/strong>&lt;/li>
&lt;li>&lt;strong>assert&lt;/strong>&lt;/li>
&lt;li>&lt;strong>async&lt;/strong>&lt;/li>
&lt;li>&lt;strong>await&lt;/strong>&lt;/li>
&lt;li>&lt;strong>break&lt;/strong>&lt;/li>
&lt;li>&lt;strong>class&lt;/strong>&lt;/li>
&lt;li>&lt;strong>continue&lt;/strong>&lt;/li>
&lt;li>&lt;strong>def&lt;/strong>&lt;/li>
&lt;li>&lt;strong>del&lt;/strong>&lt;/li>
&lt;li>&lt;strong>elif&lt;/strong>&lt;/li>
&lt;li>&lt;strong>else&lt;/strong>&lt;/li>
&lt;li>&lt;strong>except&lt;/strong>&lt;/li>
&lt;li>&lt;strong>False&lt;/strong>&lt;/li>
&lt;li>&lt;strong>finally&lt;/strong>&lt;/li>
&lt;li>&lt;strong>from&lt;/strong>&lt;/li>
&lt;li>&lt;strong>global&lt;/strong>&lt;/li>
&lt;li>&lt;strong>import&lt;/strong>&lt;/li>
&lt;li>&lt;strong>in&lt;/strong>&lt;/li>
&lt;li>&lt;strong>is&lt;/strong>&lt;/li>
&lt;li>&lt;strong>lambda&lt;/strong>&lt;/li>
&lt;li>&lt;strong>None&lt;/strong>&lt;/li>
&lt;li>&lt;strong>nonlocal&lt;/strong>&lt;/li>
&lt;li>&lt;strong>not&lt;/strong>&lt;/li>
&lt;li>&lt;strong>or&lt;/strong>&lt;/li>
&lt;li>&lt;strong>pass&lt;/strong>&lt;/li>
&lt;li>&lt;strong>raise&lt;/strong>&lt;/li>
&lt;li>&lt;strong>return&lt;/strong>&lt;/li>
&lt;li>&lt;strong>True&lt;/strong>&lt;/li>
&lt;li>&lt;strong>yield&lt;/strong>&lt;/li>
&lt;li>复合语句
&lt;ul>
&lt;li>&lt;strong>if&lt;/strong>&lt;/li>
&lt;li>&lt;strong>while&lt;/strong>&lt;/li>
&lt;li>&lt;strong>for&lt;/strong>&lt;/li>
&lt;li>&lt;strong>try&lt;/strong>&lt;/li>
&lt;li>&lt;strong>with&lt;/strong> # &lt;a href="docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/Python%20%E8%A7%84%E8%8C%83%E4%B8%8E%E6%A0%87%E5%87%86%E5%BA%93/Control%20structure.md#with">with&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="python-语言规范">Python 语言规范&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.python.org/3/reference/index.html">官方文档-3，参考&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="python-标准库">Python 标准库&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.python.org/3/library/index.html">官方文档-3，标准库&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/3/library/functions.html">官方文档-3，标准库参考-内置函数&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/3/library/constants.html">官方文档-3，标准库参考-内置常量&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Python Standard Library(Python 标准库)&lt;/strong> 是所有 Python 内置 &lt;strong>Package(包)&lt;/strong> 或 &lt;strong>Module(模块)&lt;/strong> 的集合，每个 package 都可以实现一类功能。&lt;/p>
&lt;p>&lt;a href="https://pypi.org/">pypi.org&lt;/a> 是 Python 的配套网站，可以查找所有可以通过 pip 命令安装内置的或第三方的的 Package&lt;/p>
&lt;p>Python 标准库非常庞大，所提供的组件涉及范围十分广泛，正如以下内容目录所显示的。这个库包含了多个内置模块 (以 C 编写)，Python 程序员必须依靠它们来实现系统级功能，例如文件 I/O，此外还有大量以 Python 编写的模块，提供了日常编程中许多问题的标准解决方案。其中有些模块经过专门设计，通过将特定平台功能抽象化为平台中立的 API 来鼓励和加强 Python 程序的可移植性。&lt;/p>
&lt;h2 id="互联网数据处理">互联网数据处理&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://docs.python.org/zh-cn/3/library/email.html">&lt;code>email&lt;/code> &amp;mdash; 电子邮件与 MIME 处理包&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/zh-cn/3/library/json.html">&lt;code>json&lt;/code> &amp;mdash; JSON 编码和解码器&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/zh-cn/3/library/mailbox.html">&lt;code>mailbox&lt;/code> &amp;mdash; 操作多种格式的邮箱&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/zh-cn/3/library/mimetypes.html">&lt;code>mimetypes&lt;/code> &amp;mdash; 映射文件名到 MIME 类型&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/zh-cn/3/library/base64.html">&lt;code>base64&lt;/code> &amp;mdash; Base16, Base32, Base64, Base85 数据编码&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/zh-cn/3/library/binascii.html">&lt;code>binascii&lt;/code> &amp;mdash; 二进制和 ASCII 码互转&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/zh-cn/3/library/quopri.html">&lt;code>quopri&lt;/code> &amp;mdash; 编码与解码经过 MIME 转码的可打印数据&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="互联网协议和支持">互联网协议和支持&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://docs.python.org/zh-cn/3/library/webbrowser.html">webbrowser&amp;mdash; 方便的 Web 浏览器控制工具&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/zh-cn/3/library/wsgiref.html">wsgiref&amp;mdash; WSGI 工具和参考实现&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/zh-cn/3/library/urllib.html">urllib&amp;mdash; URL 处理模块&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/zh-cn/3/library/urllib.request.html">urllib.request&amp;mdash; 用于打开 URL 的可扩展库&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/zh-cn/3/library/urllib.request.html#module-urllib.response">urllib.response&amp;mdash; urllib 使用的 Response 类&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/zh-cn/3/library/urllib.parse.html">urllib.parse 用于解析 URL&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/zh-cn/3/library/urllib.error.html">urllib.error&amp;mdash; urllib.request 引发的异常类&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/zh-cn/3/library/urllib.robotparser.html">urllib.robotparser&amp;mdash; robots.txt 语法分析程序&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/zh-cn/3/library/http.html">http&amp;mdash; HTTP 模块&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/zh-cn/3/library/http.client.html">http.client&amp;mdash; HTTP 协议客户端&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/zh-cn/3/library/ftplib.html">ftplib&amp;mdash; FTP 协议客户端&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/zh-cn/3/library/poplib.html">poplib&amp;mdash; POP3 协议客户端&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/zh-cn/3/library/imaplib.html">imaplib&amp;mdash; IMAP4 协议客户端&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/zh-cn/3/library/smtplib.html">smtplib&amp;mdash; SMTP 协议客户端&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/zh-cn/3/library/uuid.html">uuid&amp;mdash;RFC 4122 定义的 UUID 对象&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/zh-cn/3/library/socketserver.html">socketserver&amp;mdash; 用于网络服务器的框架&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/zh-cn/3/library/http.server.html">http.server&amp;mdash; HTTP 服务器&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/zh-cn/3/library/http.cookies.html">http.cookies&amp;mdash; HTTP 状态管理&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/zh-cn/3/library/http.cookiejar.html">http.cookiejar—— HTTP 客户端的 Cookie 处理&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/zh-cn/3/library/xmlrpc.html">xmlrpc&amp;mdash; XMLRPC 服务端与客户端模块&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/zh-cn/3/library/xmlrpc.client.html">xmlrpc.client&amp;mdash; XML-RPC 客户端访问&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/zh-cn/3/library/xmlrpc.server.html">xmlrpc.server&amp;mdash; 基本 XML-RPC 服务器&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/zh-cn/3/library/ipaddress.html">ipaddress&amp;mdash; IPv4/IPv6 操作库&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="python-运行时服务">Python 运行时服务&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.python.org/3/library/python.html">官方文档-3，Python 标准库-Python 运行时服务&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Python 运行时服务类型的模块提供了 Python 解释器及其环境交互有关的各种服务。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.python.org/zh-cn/3/library/dataclasses.html">&lt;code>dataclasses&lt;/code> &amp;mdash; 数据类&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/zh-cn/3/library/site.html">&lt;code>site&lt;/code> —— 定义存放第三方包的路径&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="内嵌模块">内嵌模块&lt;/h3>
&lt;p>&lt;a href="https://docs.python.org/3/library/sys.html">&lt;code>sys&lt;/code>&lt;/a> # System-specific parameters and functions&lt;/p></description></item><item><title>Docs: Control structure</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/Python-%E8%A7%84%E8%8C%83%E4%B8%8E%E6%A0%87%E5%87%86%E5%BA%93/Control-structure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/Python-%E8%A7%84%E8%8C%83%E4%B8%8E%E6%A0%87%E5%87%86%E5%BA%93/Control-structure/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Python 语言提供了多种条件结构和分支结构用作 &lt;a href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E8%A7%A3%E8%B0%9C%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/Control%20structure.md">Control structure(控制结构)&lt;/a>&lt;/p>
&lt;h1 id="with">with&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.python.org/3/reference/compound_stmts.html#the-with-statement">官方文档，参考 - 8.复合语句 - 8.5 with 语句&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;a href="https://docs.python.org/zh-cn/3/reference/compound_stmts.html#with">&lt;code>with&lt;/code>&lt;/a> 语句用于包装带有使用上下文管理器 (参见 &lt;a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#context-managers">with 语句上下文管理器&lt;/a> 一节) 定义的方法的代码块的执行。 这允许对普通的 &lt;a href="https://docs.python.org/zh-cn/3/reference/compound_stmts.html#try">&lt;code>try&lt;/code>&lt;/a>&amp;hellip;&lt;a href="https://docs.python.org/zh-cn/3/reference/compound_stmts.html#except">&lt;code>except&lt;/code>&lt;/a>&amp;hellip;&lt;a href="https://docs.python.org/zh-cn/3/reference/compound_stmts.html#finally">&lt;code>finally&lt;/code>&lt;/a> 使用模式进行封装以方便地重用。语法如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">with&lt;/span> EXPRESSION &lt;span style="color:#66d9ef">as&lt;/span> TARGET:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SUITE
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>EXPRESSION 的返回值赋值给 TARGET 变量，在 SUITE 中可以处理 TARGET。&lt;/p>
&lt;p>用&lt;a href="https://www.runoob.com/python3/python-with.html">白话解释&lt;/a>：Python 中的 with 语句用于异常处理，封装了 try…except…finally 编码范式，提高了易用性。&lt;strong>with&lt;/strong> 语句使代码更清晰、更具可读性， 它简化了文件流等公共资源的管理。在处理文件时使用 with 关键字是一种很好的做法。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>file &lt;span style="color:#f92672">=&lt;/span> open(&lt;span style="color:#e6db74">&amp;#39;./test_runoob.txt&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;w&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>file&lt;span style="color:#f92672">.&lt;/span>write(&lt;span style="color:#e6db74">&amp;#39;hello world !&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>file&lt;span style="color:#f92672">.&lt;/span>close()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 使用 try 的话&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>file &lt;span style="color:#f92672">=&lt;/span> open(&lt;span style="color:#e6db74">&amp;#39;./test_runoob.txt&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;w&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">try&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    file&lt;span style="color:#f92672">.&lt;/span>write(&lt;span style="color:#e6db74">&amp;#39;hello world&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">finally&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    file&lt;span style="color:#f92672">.&lt;/span>close()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>以上代码我们对可能发生异常的代码处进行 try 捕获，发生异常时执行 except 代码块，finally 代码块是无论什么情况都会执行，所以文件会被关闭，不会因为执行异常而占用资源。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>filename &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;./testFile.txt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">with&lt;/span> open(filename, &lt;span style="color:#e6db74">&amp;#39;r&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> f:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> output &lt;span style="color:#f92672">=&lt;/span> f&lt;span style="color:#f92672">.&lt;/span>read()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用 &lt;strong>with&lt;/strong> 关键字系统会自动调用 f.close() 方法， with 的作用等效于 try/finally 语句是一样的。&lt;/p></description></item><item><title>Docs: Data type</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/Python-%E8%A7%84%E8%8C%83%E4%B8%8E%E6%A0%87%E5%87%86%E5%BA%93/Data-type/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/Python-%E8%A7%84%E8%8C%83%E4%B8%8E%E6%A0%87%E5%87%86%E5%BA%93/Data-type/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.python.org/3/reference/datamodel.html">官方文档，语言参考-数据模型&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>object(对象)&lt;/strong> 是 Python 中对数据的抽象。Python 程序中的所有数据都是由对象或对象间关系来表示的。 （从某种意义上说，按照冯·诺依曼的“存储程序计算机”模型，代码本身也是由对象来表示的。）&lt;/p>
&lt;blockquote>
&lt;p>Python 中的 object 概念类似于 JS 中的 &lt;a href="docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/ECMAScript/JavaScript%20%E8%A7%84%E8%8C%83%E4%B8%8E%E6%A0%87%E5%87%86%E5%BA%93/Data%20type.md#object(%E5%AF%B9%E8%B1%A1)">object&lt;/a> 概念。但是又不完全一样。&lt;/p>
&lt;p>Python 变量的本质是对对象的引用&lt;/p>
&lt;/blockquote>
&lt;p>每个 object 都有一个 &lt;strong>Identity(标识符)&lt;/strong>、&lt;strong>Type(类型)&lt;/strong>、&lt;strong>Value(值)&lt;/strong>。一个对象被创建后，它的 Identity 就绝不会改变；你可以将其理解为该对象在内存中的地址。 &amp;lsquo;&lt;a href="https://docs.python.org/zh-cn/3/reference/expressions.html#is">&lt;code>is&lt;/code>&lt;/a>&amp;rsquo; 运算符可以比较两个对象的标识号是否相同；&lt;a href="https://docs.python.org/zh-cn/3/library/functions.html#id" title="id">&lt;code>id()&lt;/code>&lt;/a> 函数能返回一个代表其标识号的整数。&lt;/p>
&lt;p>&lt;strong>CPython 实现细节：&lt;/strong> 在 CPython 中，&lt;code>id(x)&lt;/code> 就是存放 &lt;code>x&lt;/code> 的内存的地址。从某个角度来看，获取变量的值，就是获取变量所引用的对象的值。&lt;/p>
&lt;blockquote>
&lt;p>对于 Python 和 JS 中的 object 来说，这个 object 就像全能的超人一样。。。。o(╯□╰)o。。。而 Go 语言中的全能超人则是 struct&lt;/p>
&lt;/blockquote>
&lt;p>对象的 Type 决定该对象所支持的操作 (例如 &amp;ldquo;对象是否有长度属性？&amp;rdquo; 比如数组类型的长度) 并且定义了该类型的对象可能的取值。&lt;a href="https://docs.python.org/zh-cn/3/library/functions.html#type" title="type">&lt;code>type()&lt;/code>&lt;/a> 函数能返回一个对象的类型 (类型本身也是对象)。与 Identity 一样，一个对象的 Type 也是不可改变的。&lt;/p>
&lt;p>下面的代码可以让我们对 Python 对象有更形象的感受：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>s &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Hello, World!&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 变量的本质是对象的引用&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 在 Python 中有一个与 ESMAScript 中类似的 object(对象) 概念。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 在 Python 中，所有的数据都是对象，每一个对象都有唯一的标识符、类型和值。与 JavaScript 不同的是，在 Python 中，变量本身并不拥有内存空间，它只是指向一个对象的引用。因此，我们在 Python 中声明变量时，并不需要显式地指定它的类型。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">&amp;#34;对象标识符: &amp;#34;&lt;/span>, id(s))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">&amp;#34;对象的类型: &amp;#34;&lt;/span>, type(s))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">&amp;#34;对象的值: &amp;#34;&lt;/span>, s)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 由于变量就是对对象的引用，那么就可以调用这个对象的属性和方法。例如：&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(s&lt;span style="color:#f92672">.&lt;/span>upper()) &lt;span style="color:#75715e"># 输出 &amp;#34;HELLO, WORLD!&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(s&lt;span style="color:#f92672">.&lt;/span>lower()) &lt;span style="color:#75715e"># 输出 &amp;#34;hello, world!&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(s&lt;span style="color:#f92672">.&lt;/span>capitalize()) &lt;span style="color:#75715e"># 输出 &amp;#34;Hello, world!&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="特殊方法名">特殊方法名&lt;/h1>
&lt;p>&lt;code>__init__&lt;/code>、等&lt;/p>
&lt;h1 id="类型提示">类型提示&lt;/h1>
&lt;p>痛点：Python 是动态类型语言，可以在运行时修改变量的类型，若不为函数的参数、变量指定类型，阅读代码会造成障碍，IDE 也无法给出正确的提示。&lt;/p>
&lt;p>所以，从 Python 3.5 版本开始，Python 添加了 &lt;a href="https://docs.python.org/3/library/typing.html">typing&lt;/a> 库以支持在 &lt;strong>Type hints(类型提示)&lt;/strong>。&lt;/p>
&lt;p>Python 的 Type hints 使用 &lt;code>:&lt;/code> 作为关键字。比如&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># greeting 函数，参数 name 的类型应是 str，返回类型是 str。子类型也可以作为参数。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">greeting&lt;/span>(name: str) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> str:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Hello &amp;#39;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 变量 stringType 的类型是 str&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>stringType: str &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Hello World!&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>greeting(stringType)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;!-- raw HTML omitted -->注意：虽然我们可以在为变量、函数添加类型，但 Python 依然是动态语言，类型提示的功能就如其名，仅仅作为提示，哪怕函数参数的形参和实参类型不一样，也只是 IDE 会有错误提示，但是程序还是可以正常运行的。比如：&lt;!-- raw HTML omitted -->&lt;/p>
&lt;pre tabindex="0">&lt;code>stringType: int = &amp;#34;Hello World!&amp;#34;
print(&amp;#34;字符串类型: &amp;#34;, type(stringType))
&lt;/code>&lt;/pre>&lt;p>输出结果为：&lt;code>字符串类型: &amp;lt;class 'str'&amp;gt;&lt;/code>&lt;/p></description></item><item><title>Docs: Python 类</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/Python-%E8%A7%84%E8%8C%83%E4%B8%8E%E6%A0%87%E5%87%86%E5%BA%93/Class/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/Python-%E8%A7%84%E8%8C%83%E4%B8%8E%E6%A0%87%E5%87%86%E5%BA%93/Class/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.python.org/3/tutorial/classes.html">官方文档，教程-9.类&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017495723838528">廖雪峰 Python 教程，面向对象编程&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Classes(类) 提供了一种将数据与功能捆绑到一起的手段。创建一个新的 &lt;strong>class(类)&lt;/strong> 就意味着创造了一个新的 &lt;strong>object 的类型&lt;/strong>，进而可以使用这个新的类型创建多个 &lt;strong>instances(实例)&lt;/strong>。每个类实例都可以添加 &lt;strong>attributes(属性)&lt;/strong> 以维护其自身的状态，同时还可以有 &lt;strong>methods(方法)&lt;/strong> 用于修改其状态(方法在类中定义)。&lt;/p>
&lt;p>与其他编程语言相比，Python 的类机制增加了包含最少新语法和语义的类。它是 C ++和 Modula-3 中发现的类机制的混合物。 Python 类提供面向对象编程的所有标准功能：类继承机制允许多个基类，派生类可以覆盖其基类或类的任何方法，方法可以调用具有相同名称的基类的方法。对象可以包含任意数量和类型的数据。正如模块所面临的那样，类 Python 的动态性质的课程：它们是在运行时创建的，并且可以在创建后进一步修改。&lt;/p>
&lt;h1 id="struct-格式的-class">struct 格式的 class&lt;/h1>
&lt;p>从 3.7 版本开始，可以使用 dataclass 装饰器让 class 声明中不再写 &lt;code>__init__&lt;/code> 方法，就像这样&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> dataclasses &lt;span style="color:#f92672">import&lt;/span> dataclass
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@dataclass&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Employee&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: str
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dept: str
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> salary: int
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>john &lt;span style="color:#f92672">=&lt;/span> Employee(&lt;span style="color:#e6db74">&amp;#39;john&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;computer lab&amp;#39;&lt;/span>, &lt;span style="color:#ae81ff">1000&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(john&lt;span style="color:#f92672">.&lt;/span>dept)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(john&lt;span style="color:#f92672">.&lt;/span>salary)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行结果：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#39;computer lab&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">1000&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>