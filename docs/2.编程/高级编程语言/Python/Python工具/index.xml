<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – Python 工具</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/Python%E5%B7%A5%E5%85%B7/</link><description>Recent content in Python 工具 on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/Python%E5%B7%A5%E5%85%B7/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Python 工具</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/Python%E5%B7%A5%E5%85%B7/Python-%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/Python%E5%B7%A5%E5%85%B7/Python-%E5%B7%A5%E5%85%B7/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;/blockquote>
&lt;h1 id="python">python&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.python.org/3/using/cmdline.html">官方文档，Python 安装与使用-命令行和环境&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>python 是一个工具，用来管理 Python 语言编写的代码。&lt;/p>
&lt;h2 id="syntax语法">Syntax(语法)&lt;/h2>
&lt;p>&lt;strong>python [-bBdEhiIOqsSuvVWx?] [-c command | -m module-name | script | - ] [args]&lt;/strong>
OPTIONS&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-S&lt;/strong> # Python 启动初始化时，不要导入 site 包&lt;/li>
&lt;li>&lt;strong>-m &amp;lt;ModuleName&amp;gt;&lt;/strong> # 在 &lt;code>sys.path&lt;/code> 中搜索指定模块，并默认执行模块中 &lt;code>__name__&lt;/code> 为 &lt;code>__main__&lt;/code> 的代码
&lt;ul>
&lt;li>&lt;code>python3 -m site&lt;/code> 等效于 &lt;code>python3 /usr/lib/python3.8/site.py&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="example">EXAMPLE&lt;/h2></description></item><item><title>Docs: PIP</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/Python%E5%B7%A5%E5%85%B7/PIP/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/Python%E5%B7%A5%E5%85%B7/PIP/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/pypa/pip">GitHub 项目，pypa/pip&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://pip.pypa.io/">官网&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Package Installer for Python(Python 的包安装器，简称 PIP)&lt;/strong> 是 Python 的包管理程序。可以使用它来安装来自 Python 包索引和其他索引的包。从 Python 3.4 开始，它默认包含在 Python 二进制安装程序中。&lt;/p>
&lt;h1 id="pip-安装包逻辑">pip 安装包逻辑&lt;/h1>
&lt;p>pip 默认从 &lt;a href="https://pypi.org/">PyPI&lt;/a> 搜索包。&lt;/p>
&lt;p>先下载到 /tmp/pip-unpack-随机数/包名-XXX.whl，然后默认情况下，将这些文件安装到 site-packages 目录。&lt;/p>
&lt;h2 id="有关---taget-选项的说明">有关 &amp;ndash;taget 选项的说明&lt;/h2>
&lt;p>当我们使用 &lt;code>--target TARGET_DIR&lt;/code> 选项指定包的安装路径时，则会将随包带的可执行文件安装到 &lt;code>TARGET_DIR/bin/&lt;/code> 目录下，若两个具有可执行文件的包被同事安装到同一个 TARGET_DIR 中，则后安装的包的二进制文件将不会成功，并且有警告信息：&lt;/p>
&lt;pre tabindex="0">&lt;code>WARNING: Target directory /root/pythonpath/bin already exists. Specify --upgrade to force replacement.
&lt;/code>&lt;/pre>&lt;p>假如现在想要安装 black 和 pipreqs 两个包，先安装 black，那么 pipreqs 可执行文件将不会安装成功，除非使用 &amp;ndash;upgrade 选项，此时，bin/ 目录下的 black 可执行文件将被删除，并替换为 pipreqs 可执行文件。&lt;/p>
&lt;p>综上所述：&amp;ndash;target 选项不适合指定为 PYTHONPATH，而是为每个包指定一个独立的目录，并且每个目录下的 bin 目录都要添加到 $PATH 才可以，这是一个很鸡肋的选项。&lt;/p>
&lt;p>详见 &lt;a href="https://github.com/pypa/pip/issues/8063">pip issue 8063&lt;/a>&lt;/p>
&lt;h1 id="安装-pip">安装 PIP&lt;/h1>
&lt;p>通常来说，安装 Python 时，会自动安装 PIP&lt;/p>
&lt;p>pip 包通常包含两个目录&lt;/p>
&lt;ul>
&lt;li>pip&lt;/li>
&lt;li>pip-${VERSION}.dist-info&lt;/li>
&lt;/ul>
&lt;h1 id="关联文件与配置">关联文件与配置&lt;/h1>
&lt;h2 id="windows">Windows&lt;/h2>
&lt;p>全局配置&lt;/p>
&lt;ul>
&lt;li>&lt;strong>C:/ProgramData/pip/pip.ini&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>用户配置&lt;/p>
&lt;ul>
&lt;li>&lt;strong>%APPDATA%/pip/pip.ini&lt;/strong>&lt;/li>
&lt;li>&lt;strong>%USERPROFILE%/pip/pip.ini&lt;/strong> # 传统的用户配置如果存在的话也会被加载&lt;/li>
&lt;/ul>
&lt;p>Site 配置&lt;/p>
&lt;ul>
&lt;li>&lt;strong>%VIRTUAL_ENV%\pip.ini&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h2 id="unix">Unix&lt;/h2>
&lt;p>全局配置&lt;/p>
&lt;ul>
&lt;li>In a “pip” subdirectory of any of the paths set in the environment variable &lt;code>XDG_CONFIG_DIRS&lt;/code> (if it exists), for example &lt;code>/etc/xdg/pip/pip.conf&lt;/code>.&lt;/li>
&lt;li>This will be followed by loading &lt;code>/etc/pip.conf&lt;/code>.&lt;/li>
&lt;/ul>
&lt;p>用户配置&lt;/p>
&lt;ul>
&lt;li>&lt;strong>~/.config/pip/pip.conf&lt;/strong> # which respects the &lt;code>XDG_CONFIG_HOME&lt;/code> environment variable.&lt;/li>
&lt;li>&lt;strong>~/.pip/pip.conf&lt;/strong> # 传统的用户配置如果存在的话也会被加载&lt;/li>
&lt;/ul>
&lt;p>Site 配置&lt;/p>
&lt;ul>
&lt;li>&lt;strong>$VIRTUAL_ENV/pip.conf&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h2 id="其他">其他&lt;/h2>
&lt;p>pip 安装的模块我们可以从如下目录中找到，该目录下的目录名或文件名通常来说即是包名&lt;/p>
&lt;ul>
&lt;li>Windows
&lt;ul>
&lt;li>&lt;strong>%USERPROFILE%/AppData/Local/Programs/Python/Python${版本号}/Lib/site-packages/&lt;/strong>*&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Linux
&lt;ul>
&lt;li>root 用户：&lt;strong>/usr/local/lib/python${VERSION}/dist-packages/*&lt;/strong>&lt;/li>
&lt;li>普通 用户：&lt;strong>~/.local/lib/python${PythonVersion}/site-packages/*&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>有些包会生成一些可以执行程序，这些二进制文件则默认保存在如下目录&lt;/p>
&lt;ul>
&lt;li>Windows
&lt;ul>
&lt;li>&lt;strong>%USERPROFILE%/AppData/Local/Programs/Python/Python310/Scripts/&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Linux
&lt;ul>
&lt;li>root 用户：&lt;strong>/usr/local/bin/&lt;/strong>&lt;/li>
&lt;li>普通 用户：&lt;strong>~/.local/bin/&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="syntax语法">Syntax(语法)&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://pip.pypa.io/en/stable/cli/pip/">官方文档，cli-pip&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>pip COMMAND [OPTIONS] COMMAND&lt;/strong>&lt;/p>
&lt;p>Commands:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>install&lt;/strong> # 安装包&lt;/li>
&lt;li>&lt;strong>download&lt;/strong> # 下载包&lt;/li>
&lt;li>uninstall Uninstall packages.&lt;/li>
&lt;li>&lt;strong>freeze&lt;/strong> # 以 requirements 格式输出已安装的软件包&lt;/li>
&lt;li>inspect Inspect the python environment.&lt;/li>
&lt;li>list List installed packages.&lt;/li>
&lt;li>show Show information about installed packages.&lt;/li>
&lt;li>check Verify installed packages have compatible dependencies.&lt;/li>
&lt;li>&lt;strong>config&lt;/strong> # 管理本地或全局配置&lt;/li>
&lt;li>search Search PyPI for packages.&lt;/li>
&lt;li>cache Inspect and manage pip&amp;rsquo;s wheel cache.&lt;/li>
&lt;li>index Inspect information available from package indexes.&lt;/li>
&lt;li>wheel Build wheels from your requirements.&lt;/li>
&lt;li>hash Compute hashes of package archives.&lt;/li>
&lt;li>completion A helper command used for command completion.&lt;/li>
&lt;li>debug Show information useful for debugging.&lt;/li>
&lt;li>help Show help for commands.&lt;/li>
&lt;/ul>
&lt;h2 id="pip-config">pip config&lt;/h2>
&lt;p>管理本地或全局配置&lt;/p>
&lt;p>pip config list # 列出&lt;/p>
&lt;p>pip config edit &amp;ndash;editor code # 使用 vscode 打开 pip 配置文件&lt;/p>
&lt;h2 id="pip-download">pip download&lt;/h2>
&lt;p>&lt;strong>OPTIONS&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-d, &amp;ndash;dest &amp;lt;DIR&amp;gt;&lt;/strong> # 将 Python 包下载到 DIR 目录中。&lt;/li>
&lt;li>&lt;strong>-r, &amp;ndash;requirement &amp;lt;FILE&amp;gt;&lt;/strong> # 从指定的 requirement 文件中下载 Python 包。&lt;/li>
&lt;/ul>
&lt;h2 id="pip-freeeze">pip freeeze&lt;/h2>
&lt;p>以 requirements 格式输出安装的软件包列表。软件包以不区分大小写的排序方式列出。&lt;/p>
&lt;h2 id="pip-install">pip install&lt;/h2>
&lt;p>&lt;a href="https://pip.pypa.io/en/stable/cli/pip_install/">https://pip.pypa.io/en/stable/cli/pip_install/&lt;/a>&lt;/p>
&lt;p>&lt;strong>OPTIONS&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-i, &amp;ndash;index-url &amp;lt;URL&amp;gt;&lt;/strong> # Python 包索引的 URL。&lt;code>默认值：https://pypi.org/simple&lt;/code>
&lt;ul>
&lt;li>可以通过 -i 配置 pip 安装包时使用国内的源，避免国从国外下载速度太慢&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>-r, &amp;ndash;requirement &amp;lt;FILE&amp;gt;&lt;/strong> # 安装指定 requirement 文件中的 Python 包。&lt;/li>
&lt;li>&lt;strong>-t, &amp;ndash;target &amp;lt;DIR&amp;gt;&lt;/strong> # 将 Python 包安装到 DIR 目录中。可以添加 &amp;ndash;upgrade 选项将现有包替换为 DIR 目录中的新版本。&lt;/li>
&lt;li>&lt;strong>-U, &amp;ndash;upgrade&lt;/strong> # 将指定的所有 Python 包升级到最新的可用版本。&lt;/li>
&lt;li>&lt;strong>&amp;ndash;user&lt;/strong> # 将包安装到 user 的 site-packages 目录下。&lt;/li>
&lt;/ul>
&lt;h1 id="最佳实践">最佳实践&lt;/h1>
&lt;p>安装、下载包时，指定包源&lt;/p>
&lt;p>&lt;code>pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pyspider&lt;/code>，这样就会从清华这边的包镜像安装 pyspider 库。&lt;/p>
&lt;h2 id="离线安装-python-包">离线安装 Python 包&lt;/h2>
&lt;p>下载 Python 包文件&lt;/p>
&lt;p>&lt;code>pip download black&lt;/code>&lt;/p>
&lt;p>安装 Python 包文件&lt;/p>
&lt;p>&lt;code>pip install *.whl&lt;/code>&lt;/p>
&lt;h2 id="配置镜像源加速">配置镜像源加速&lt;/h2>
&lt;p>对于 Python 开发用户来讲，PIP 安装软件包是家常便饭。但国外的源下载速度实在太慢，浪费时间。而且经常出现下载后安装出错问题。所以把 PIP 安装源替换成国内镜像，可以大幅提升下载速度，还可以提高安装成功率。&lt;/p>
&lt;p>国内源：&lt;/p>
&lt;ul>
&lt;li>阿里云：https://mirrors.aliyun.com/pypi/simple/&lt;/li>
&lt;li>清华：&lt;a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple&lt;/a>&lt;/li>
&lt;li>中国科技大学 &lt;a href="https://pypi.mirrors.ustc.edu.cn/simple/">https://pypi.mirrors.ustc.edu.cn/simple/&lt;/a>&lt;/li>
&lt;li>华中理工大学：&lt;a href="http://pypi.hustunique.com/">http://pypi.hustunique.com/&lt;/a>&lt;/li>
&lt;li>山东理工大学：&lt;a href="http://pypi.sdutlinux.org/">http://pypi.sdutlinux.org/&lt;/a>&lt;/li>
&lt;li>豆瓣：&lt;a href="http://pypi.douban.com/simple/">http://pypi.douban.com/simple/&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Linux 下，修改 ~/.pip/pip.conf (没有就创建一个文件夹及文件。文件夹要加“.”，表示是隐藏文件夹)，内容如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>mkdir -p ~/.pip
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tee ~/.pip/pip.conf &amp;gt; /dev/null &lt;span style="color:#e6db74">&amp;lt;&amp;lt;EOF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">[global]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">index-url = https://mirrors.aliyun.com/pypi/simple/
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">trusted-host = mirrors.aliyun.com
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>windows 下，直接在 user 目录中创建一个 pip 目录，如：C:/Users/xx/pip，新建文件 pip.ini。内容同上。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>New-Item -ItemType File $env:APPDATA\pip\pip.ini -Force
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Add-Content $env:APPDATA\pip\pip.ini &lt;span style="color:#e6db74">&amp;#34;[global]&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Add-Content $env:APPDATA\pip\pip.ini &lt;span style="color:#e6db74">&amp;#34;index-url = https://mirrors.aliyun.com/pypi/simple/&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="配置默认安装路径">配置默认安装路径&lt;/h2>
&lt;p>TODO: &amp;ndash;target 没效果，修改 user 的 site-packages 没效果。。。。o(╯□╰)o&lt;/p>
&lt;p>先用 &lt;a href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/Python%20%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/Python%20%E6%A8%A1%E5%9D%97%E4%B8%8E%E5%8C%85.md#Python%20%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83">Python 虚拟环境&lt;/a>吧&lt;/p></description></item></channel></rss>