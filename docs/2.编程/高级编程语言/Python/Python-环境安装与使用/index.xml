<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – Python 环境安装与使用</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/Python-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</link><description>Recent content in Python 环境安装与使用 on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/Python-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Python 环境安装与使用</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/Python-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/Python-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/Python-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/Python-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.python.org/3/using/index.html">官方文档，Python 的安装与使用&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="安装-python">安装 Python&lt;/h1>
&lt;h2 id="linux">Linux&lt;/h2>
&lt;p>各 Linux 发行版通常都会自带 Python&lt;/p>
&lt;h2 id="windows">Windows&lt;/h2>
&lt;p>从官网下载 Windows 版的 exe 安装包，勾选 &lt;code>Add Python ${版本号} to PATH&lt;/code>。安装包中包括 IDLE、pip、Python 文档。&lt;/p>
&lt;p>安装完成后会提示关闭 Path 变量值的长度限制
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gzv1ih/1659885506889-188054a3-8a67-4039-ab87-16f8ff3a3e38.png" alt="image.png">&lt;/p>
&lt;h3 id="安装完成后自动设置的内容">安装完成后自动设置的内容&lt;/h3>
&lt;p>默认安装到 &lt;code>%USERPROFILE%\AppData\Local\Programs\Python\Python${版本号}&lt;/code> 目录下&lt;/p>
&lt;ul>
&lt;li>比如我安装 Python 3.10 版本，则会安装到 &lt;code>%USERPROFILE%\AppData\Local\Programs\Python\Python310&lt;/code> 目录下&lt;/li>
&lt;/ul>
&lt;p>同时将会在用户变量中的 Path 环境变量中添加如下值：&lt;/p>
&lt;ul>
&lt;li>%USERPROFILE%/AppData/Local/Programs/Python/Python310/Scripts/&lt;/li>
&lt;li>%USERPROFILE%/AppData/Local/Programs/Python/Python310/&lt;/li>
&lt;/ul>
&lt;p>在 &lt;code>%USERPROFILE%\AppData\Local\Programs\Python\Python310\Scripts\&lt;/code> 目录中将会添加 pip 二进制命令。&lt;/p>
&lt;h2 id="windows-可嵌入的包">Windows 可嵌入的包&lt;/h2>
&lt;p>嵌入式分发是一个包含最小 Python 环境的 ZIP 文件。它旨在充当另一个应用程序的一部分，而不是由最终用户直接访问。&lt;/p>
&lt;h2 id="安装多个版本的-python">安装多个版本的 Python&lt;/h2>
&lt;h1 id="编译-python">编译 Python&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/pyinstaller/pyinstaller">GitHub 项目，pyinstaller/pyinstaller&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Python 官方并未提供可以将代码编译成一个独立的可执行文件的工具。如果想要运行 Python 代码，通常来说都要先在目标机器上安装 Python 环境以及所需的依赖库。&lt;/p>
&lt;p>但是，我们可以使用第三方工具，如 PyInstaller、cx_Freeze 等将 Python 代码编译成独立的可执行文件。这些工具会将 Python 解释器和所需的所有库打包到单个文件中，因此在未安装 Python 环境的计算机上也可以运行它。&lt;/p>
&lt;p>使用方法：&lt;/p>
&lt;p>安装&lt;/p>
&lt;p>&lt;code>pip install pyinstaller&lt;/code>&lt;/p>
&lt;p>使用命令行将 Python 文件编译为可执行文件：&lt;/p>
&lt;p>&lt;code>pyinstaller --onefile myscript.py&lt;/code>&lt;/p>
&lt;p>这样，您就可以在任何没有 Python 环境的计算机上运行生成的可执行文件了。&lt;/p>
&lt;h1 id="python-关联文件与配置">Python 关联文件与配置&lt;/h1>
&lt;p>&lt;strong>XXXX&lt;/strong> # 寻找 Python 代码的位置，也就是 python 编译或运行代码时，import 指令导入的包的保存路径。这是多个文件的组合，也就是&lt;a href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/Python%20%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/Python%20%E6%A8%A1%E5%9D%97%E4%B8%8E%E5%8C%85.md#Python%20%E6%A8%A1%E5%9D%97%E7%AE%A1%E7%90%86">搜索模块的路径&lt;/a>&lt;/p>
&lt;ul>
&lt;li>注意：Python 与其他语言不太一样，可以搜索包或者模块的路径非常多。这些模块或者包不一定只存放在一个单一的目录里。&lt;/li>
&lt;/ul></description></item><item><title>Docs: Python 模块与包</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/Python-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/Python-%E6%A8%A1%E5%9D%97%E4%B8%8E%E5%8C%85/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/Python-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/Python-%E6%A8%A1%E5%9D%97%E4%B8%8E%E5%8C%85/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.python.org/3/tutorial/modules.html">官方文档，教程-6.模块&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017454145014176">廖雪峰 Python 教程，模块&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>在计算机程序的开发过程中，随着程序代码越写越多，在一个文件里代码就会越来越长，越来越不容易维护。&lt;/p>
&lt;p>为了编写可维护的代码，我们把很多函数分组，分别放到不同的文件里，这样，每个文件包含的代码就相对较少，很多编程语言都采用这种组织代码的方式。在 Python 中，&lt;strong>一个 &lt;strong>&lt;code>.py&lt;/code>&lt;/strong> 文件&lt;/strong>就&lt;strong>称之为一个&lt;/strong>Module(模块)**。&lt;/p>
&lt;p>使用模块有什么好处？&lt;/p>
&lt;p>最大的好处是大大提高了代码的可维护性。其次，编写代码不必从零开始。当一个模块编写完毕，就可以被其他地方引用。我们在编写程序的时候，也经常引用其他模块，包括 Python 内置的模块和来自第三方的模块。&lt;/p>
&lt;p>使用模块还可以避免函数名和变量名冲突。相同名字的函数和变量完全可以分别存在不同的模块中，因此，我们自己在编写模块时，不必考虑名字会与其他模块冲突。但是也要注意，尽量不要与内置函数名字冲突。&lt;a href="http://docs.python.org/3/library/functions.html">这里&lt;/a>可以查看 Python 的所有内置函数。&lt;/p>
&lt;p>你也许还想到，如果不同的人编写的模块名相同怎么办？为了避免模块名冲突，Python 又引入了按目录来组织模块的方法，称为 &lt;strong>Package(包)&lt;/strong>。&lt;/p>
&lt;p>举个例子，一个&lt;code>abc.py&lt;/code>的文件就是一个名字叫&lt;code>abc&lt;/code>的模块，一个&lt;code>xyz.py&lt;/code>的文件就是一个名字叫&lt;code>xyz&lt;/code>的模块。&lt;/p>
&lt;p>现在，假设我们的&lt;code>abc&lt;/code>和&lt;code>xyz&lt;/code>这两个模块名字与其他模块冲突了，于是我们可以通过包来组织模块，避免冲突。方法是选择一个顶层包名，比如&lt;code>mycompany&lt;/code>，按照如下目录存放：&lt;/p>
&lt;pre>&lt;code>mycompany
├─ __init__.py
├─ abc.py
└─ xyz.py
&lt;/code>&lt;/pre>
&lt;p>引入了包以后，只要顶层的包名不与别人冲突，那所有模块都不会与别人冲突。现在，&lt;code>abc.py&lt;/code>模块的名字就变成了&lt;code>mycompany.abc&lt;/code>，类似的，&lt;code>xyz.py&lt;/code>的模块名变成了&lt;code>mycompany.xyz&lt;/code>。&lt;/p>
&lt;p>请注意，每一个包目录下面都会有一个&lt;code>__init__.py&lt;/code>的文件，这个文件是必须存在的，否则，Python 就把这个目录当成普通目录，而不是一个包。&lt;code>__init__.py&lt;/code>可以是空文件，也可以有 Python 代码，因为&lt;code>__init__.py&lt;/code>本身就是一个模块，而它的模块名就是&lt;code>mycompany&lt;/code>。&lt;/p>
&lt;p>类似的，可以有多级目录，组成多级层次的包结构。比如如下的目录结构：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>mycompany
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├─ web
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ ├─ __init__.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ ├─ utils.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ └─ www.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├─ __init__.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├─ abc.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └─ utils.py
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>文件&lt;code>www.py&lt;/code>的模块名就是&lt;code>mycompany.web.www&lt;/code>，两个文件&lt;code>utils.py&lt;/code>的模块名分别是&lt;code>mycompany.utils&lt;/code>和&lt;code>mycompany.web.utils&lt;/code>。&lt;/p>
&lt;p>自己创建模块时要注意命名，不能和 Python 自带的模块名称冲突。例如，系统自带了 sys 模块，自己的模块就不可命名为 sys.py，否则将无法导入系统自带的 sys 模块。&lt;/p>
&lt;p>&lt;code>mycompany.web&lt;/code>也是一个模块，该模块对应的 .py 文件是 &lt;strong>init&lt;/strong>.py。&lt;/p>
&lt;h2 id="package包">Package(包)&lt;/h2>
&lt;p>包是一种通过使用“带点的模块名称”来构建 Python 模块命名空间的方式。例如，模块名称 AB 指定了一个名为 A 的包中的一个名为 B 的子模块。就像使用模块使不同模块的作者不必担心彼此的全局变量名称一样，使用点分模块名称可以节省作者多模块包，如 NumPy 或 Pillow，不必担心彼此的模块名称。&lt;/p>
&lt;p>假设您要设计一组模块（“包”）来统一处理声音文件和声音数据。有许多不同的声音文件格式（通常通过它们的扩展名识别，例如：.wav、.aiff、.au），因此您可能需要创建和维护不断增长的模块集合，以便在各种文件格式之间进行转换。您可能还想对声音数据执行许多不同的操作（例如混合、添加回声、应用均衡器功能、创建人工立体声效果），因此您将编写一个永无止境的模块流来执行这些操作。这是您的包的可能结构（以分层文件系统表示）：&lt;/p>
&lt;p>导入包时，Python 会在 sys.path 上的目录中搜索包子目录。&lt;/p>
&lt;p>需要 &lt;code>__init__.py&lt;/code> 文件才能使 Python 将包含该文件的目录视为包。这可以防止具有通用名称（例如字符串）的目录无意中隐藏了稍后出现在模块搜索路径上的有效模块。在最简单的情况下，&lt;code>__init__.py&lt;/code> 可以只是一个空文件，但它也可以执行包的初始化代码或设置 &lt;code>__all__&lt;/code> 变量，稍后将介绍。&lt;/p>
&lt;p>注意：&lt;/p>
&lt;ul>
&lt;li>import 指令导入模块时是否成功，取决于执行 Python 代码时的所在位置。反正设计的挺恶心的。。。o(╯□╰)o&lt;/li>
&lt;li>说白了：Package 就是 Module，只不过是对 Module 进行了分类~&lt;del>导入模块时，模块名称中有 &lt;code>.&lt;/code> 就是包了&lt;/del>其实还是模块。也可以这么理解：一个目录就是一个包，一个文件就是一个模块。&lt;/li>
&lt;li>若没有 &lt;code>__init__.py&lt;/code> 文件，我们使用 IDE 追踪代码时，如果想要从 import 指令中的导入的包进行追踪，会提示找不到该文件，无法追踪到。&lt;/li>
&lt;/ul>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>模块是一组 Python 代码的集合，可以使用其他模块，也可以被其他模块使用。&lt;/p>
&lt;p>创建自己的模块时，要注意：&lt;/p>
&lt;ul>
&lt;li>模块名要遵循 Python 变量命名规范，不要使用中文、特殊字符；&lt;/li>
&lt;li>模块名不要和系统模块名冲突，最好先查看系统是否已存在该模块，检查方法是在 Python 交互环境执行&lt;code>import abc&lt;/code>，若成功则说明系统存在此模块。&lt;/li>
&lt;/ul>
&lt;h1 id="python-模块使用">Python 模块使用&lt;/h1>
&lt;p>Python 本身就内置了很多非常有用的模块，只要安装完毕，这些模块就可以立刻使用。&lt;/p>
&lt;p>我们以内建的&lt;code>sys&lt;/code>模块为例，编写一个&lt;code>hello&lt;/code>的模块：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/usr/bin/env python3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># -*- coding: utf-8 -*-&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#39; a test module &amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>__author__ &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Michael Liao&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> sys
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">test&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> args &lt;span style="color:#f92672">=&lt;/span> sys&lt;span style="color:#f92672">.&lt;/span>argv
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> len(args)&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#39;Hello, world!&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> len(args)&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#39;Hello, &lt;/span>&lt;span style="color:#e6db74">%s&lt;/span>&lt;span style="color:#e6db74">!&amp;#39;&lt;/span> &lt;span style="color:#f92672">%&lt;/span> args[&lt;span style="color:#ae81ff">1&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#39;Too many arguments!&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> __name__&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#e6db74">&amp;#39;__main__&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> test()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>第 1 行和第 2 行是标准注释，第 1 行注释可以让这个&lt;code>hello.py&lt;/code>文件直接在 Unix/Linux/Mac 上运行，第 2 行注释表示.py 文件本身使用标准 UTF-8 编码；&lt;/p>
&lt;p>第 4 行是一个字符串，表示模块的文档注释，任何模块代码的第一个字符串都被视为模块的文档注释；&lt;/p>
&lt;p>第 6 行使用&lt;code>__author__&lt;/code>变量把作者写进去，这样当你公开源代码后别人就可以瞻仰你的大名；&lt;/p>
&lt;p>以上就是 Python 模块的标准文件模板，当然也可以全部删掉不写，但是，按标准办事肯定没错。&lt;/p>
&lt;p>后面开始就是真正的代码部分。&lt;/p>
&lt;p>你可能注意到了，使用&lt;code>sys&lt;/code>模块的第一步，就是导入该模块：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> sys
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>导入&lt;code>sys&lt;/code>模块后，我们就有了变量&lt;code>sys&lt;/code>指向该模块，利用&lt;code>sys&lt;/code>这个变量，就可以访问&lt;code>sys&lt;/code>模块的所有功能。&lt;/p>
&lt;p>&lt;code>sys&lt;/code>模块有一个&lt;code>argv&lt;/code>变量，用 list 存储了命令行的所有参数。&lt;code>argv&lt;/code>至少有一个元素，因为第一个参数永远是该.py 文件的名称，例如：&lt;/p>
&lt;p>运行&lt;code>python3 hello.py&lt;/code>获得的&lt;code>sys.argv&lt;/code>就是&lt;code>['hello.py']&lt;/code>；&lt;/p>
&lt;p>运行&lt;code>python3 hello.py Michael&lt;/code>获得的&lt;code>sys.argv&lt;/code>就是&lt;code>['hello.py', 'Michael']&lt;/code>。&lt;/p>
&lt;p>最后，注意到这两行代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> __name__&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#e6db74">&amp;#39;__main__&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> test()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>当我们在命令行直接使用 &lt;code>python3 hello.py&lt;/code> 运行模块文件时，Python 解释器把 &lt;code>__name__&lt;/code> 这个特殊变量的值设为 &lt;code>__main__&lt;/code>，而如果在其他地方导入&lt;code>hello&lt;/code>模块时 &lt;code>__name__&lt;/code> 变量的值则是本模块的名称(i.e.hello)，因此，这种 &lt;code>if&lt;/code> 测试可以让一个模块通过命令行运行时执行一些额外的代码，最常见的就是运行单元测试。&lt;/p>
&lt;p>我们可以用命令行运行&lt;code>hello.py&lt;/code>看看效果：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ python3 hello.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Hello, world!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ python3 hello.py Michael
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Hello, Michael!
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果启动 Python 交互环境，再导入&lt;code>hello&lt;/code>模块：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span> python3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Python &lt;span style="color:#ae81ff">3.4.3&lt;/span> (v3&lt;span style="color:#ae81ff">.4.3&lt;/span>:&lt;span style="color:#ae81ff">9&lt;/span>b73f1c3e601, Feb &lt;span style="color:#ae81ff">23&lt;/span> &lt;span style="color:#ae81ff">2015&lt;/span>, &lt;span style="color:#ae81ff">02&lt;/span>:&lt;span style="color:#ae81ff">52&lt;/span>:&lt;span style="color:#ae81ff">03&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[GCC &lt;span style="color:#ae81ff">4.2.1&lt;/span> (Apple Inc&lt;span style="color:#f92672">.&lt;/span> build &lt;span style="color:#ae81ff">5666&lt;/span>) (dot &lt;span style="color:#ae81ff">3&lt;/span>)] on darwin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Type &lt;span style="color:#e6db74">&amp;#34;help&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;copyright&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;credits&amp;#34;&lt;/span> &lt;span style="color:#f92672">or&lt;/span> &lt;span style="color:#e6db74">&amp;#34;license&amp;#34;&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> more information&lt;span style="color:#f92672">.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#f92672">import&lt;/span> hello
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;gt;&amp;gt;&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>导入时，没有打印&lt;code>Hello, word!&lt;/code>，因为没有执行&lt;code>test()&lt;/code>函数。&lt;/p>
&lt;p>调用&lt;code>hello.test()&lt;/code>时，才能打印出&lt;code>Hello, word!&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;gt;&amp;gt;&amp;gt;&lt;/span> hello&lt;span style="color:#f92672">.&lt;/span>test()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Hello, world&lt;span style="color:#960050;background-color:#1e0010">!&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="compiled已编译-的-python-文件">Compiled(已编译) 的 Python 文件&lt;/h2>
&lt;p>为了加快加载模块的速度，Python 将每个模块的编译版本缓存在名为 module.version.pyc 的 &lt;strong>pycache&lt;/strong> 目录下，其中版本编码了编译文件的格式；它通常包含 Python 版本号。例如，在 CPython 3.3 版中，spam.py 的编译版本将被缓存为 &lt;strong>pycache&lt;/strong>/spam.cpython-33.pyc。这种命名约定允许来自不同版本和不同 Python 版本的编译模块共存。&lt;/p>
&lt;p>Python 会根据编译后的版本检查源代码的修改日期，以查看它是否已过时并需要重新编译。这是一个完全自动的过程。此外，编译后的模块与平台无关，因此可以在不同架构的系统之间共享同一个库。&lt;/p>
&lt;p>Python 在两种情况下不检查缓存。首先，它总是重新编译并且不存储直接从命令行加载的模块的结果。其次，如果没有源模块，它不会检查缓存。要支持非源（仅编译）分发，编译模块必须在源目录中，并且不能有源模块。&lt;/p>
&lt;h2 id="作用域">作用域&lt;/h2>
&lt;p>在一个模块中，我们可能会定义很多函数和变量，但有的函数和变量我们希望给别人使用，有的函数和变量我们希望仅仅在模块内部使用。在 Python 中，是通过&lt;code>_&lt;/code>前缀来实现的。&lt;/p>
&lt;p>正常的函数和变量名是公开的（public），可以被直接引用，比如：&lt;code>abc&lt;/code>，&lt;code>x123&lt;/code>，&lt;code>PI&lt;/code>等；&lt;/p>
&lt;p>类似&lt;code>__xxx__&lt;/code>这样的变量是特殊变量，可以被直接引用，但是有特殊用途，比如上面的&lt;code>__author__&lt;/code>，&lt;code>__name__&lt;/code>就是特殊变量，&lt;code>hello&lt;/code>模块定义的文档注释也可以用特殊变量&lt;code>__doc__&lt;/code>访问，我们自己的变量一般不要用这种变量名；&lt;/p>
&lt;p>类似&lt;code>_xxx&lt;/code>和&lt;code>__xxx&lt;/code>这样的函数或变量就是非公开的（private），不应该被直接引用，比如&lt;code>_abc&lt;/code>，&lt;code>__abc&lt;/code>等；&lt;/p>
&lt;p>之所以我们说，private 函数和变量“不应该”被直接引用，而不是“不能”被直接引用，是因为 Python 并没有一种方法可以完全限制访问 private 函数或变量，但是，从编程习惯上不应该引用 private 函数或变量。&lt;/p>
&lt;p>private 函数或变量不应该被别人引用，那它们有什么用呢？请看例子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">_private_1&lt;/span>(name):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Hello, &lt;/span>&lt;span style="color:#e6db74">%s&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span> &lt;span style="color:#f92672">%&lt;/span> name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">_private_2&lt;/span>(name):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Hi, &lt;/span>&lt;span style="color:#e6db74">%s&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span> &lt;span style="color:#f92672">%&lt;/span> name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">greeting&lt;/span>(name):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> len(name) &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> _private_1(name)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> _private_2(name)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们在模块里公开&lt;code>greeting()&lt;/code>函数，而把内部逻辑用 private 函数隐藏起来了，这样，调用&lt;code>greeting()&lt;/code>函数不用关心内部的 private 函数细节，这也是一种非常有用的代码封装和抽象的方法，即：&lt;/p>
&lt;p>外部不需要引用的函数全部定义成 private，只有外部需要引用的函数才定义为 public。&lt;/p>
&lt;h1 id="python-模块管理">Python 模块管理&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://frostming.com/2019/03-13/where-do-your-packages-go/">https://frostming.com/2019/03-13/where-do-your-packages-go/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/3/tutorial/modules.html#the-module-search-path">官方文档，Python 教程-6.模块-模块搜索路径&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/3/using/cmdline.html">官方文档，Python 的安装和使用-命令行工具和环境&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPATH">PYTHONPATH&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONHOME">PYTHONHOME&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>我们通过 &lt;strong>Python 模块的搜索路径&lt;/strong>来管理 Python 模块，或者称为管理 Python 包。Python 模块(Python 包) 的路径通常保存在 Python 的 &lt;code>sys.path&lt;/code> 变量中(就好像 Go 包的路径保存在 GOPATH 变量中似的)。&lt;/p>
&lt;p>当导入一个名为 spam 的模块时，Python 解释器首先搜索具有该名称的“内置模块”(内置模块可以用过 &lt;code>sys.builtin_module_names&lt;/code> 获取)，若没找到，则会在 sys 包中的 path 变量(i.e.&lt;code>sys.path&lt;/code>)中给出的目录列表中搜索名为 &lt;code>spam.py&lt;/code> 的文件。&lt;/p>
&lt;p>Python 程序启动后，通过如下几个步骤生成 &lt;code>sys.path&lt;/code> 变量的值：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>添加执行 Python 代码文件所在的绝对路径&lt;/strong>&lt;/li>
&lt;li>&lt;strong>添加 ${PYTHONPATH} 环境变量指定的路径&lt;/strong>
&lt;ul>
&lt;li>这是一个目录列表，类似于类 Unix 中的 &lt;code>$PATH&lt;/code> 变量，可以通过 &lt;code>os.path&lt;/code> 获取其值。&lt;/li>
&lt;li>可以使用 &lt;code>os.path.append()&lt;/code> 为 &lt;code>$PYTHONPATH&lt;/code> 变量添加新的目录条目以便导入想要的模块。也可以直接设置 Linux 系统中的 &lt;code>$PYTHONPATH&lt;/code> 变量。当项目大，需要对文件进行分类时，非常有用。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>添加保存 Python 标准库和第三方库的路径&lt;/strong>
&lt;ul>
&lt;li>这是根据 Python 安装路径决定的默认值。这些是 sys.path 中的绝大部分目录。&lt;/li>
&lt;li>按照惯例，通常包含：
&lt;ul>
&lt;li>与平台相关的 Python 基本库保存路径。&lt;/li>
&lt;li>由&lt;a href="https://docs.python.org/3/library/site.html#module-site">站点模块&lt;/a>处理的 site-packages 目录。使用 pip 安装的第三方库通常来说会存在 site-packages 目录中。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>上述三个路径在 Python 启动时被初始化。我们可以通过 Python 中的 &lt;code>sys.path&lt;/code> 数组变量查看这些路径。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ cat test/test.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>import sys
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print&lt;span style="color:#f92672">(&lt;/span>sys.path&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ python3 test/test.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#e6db74">&amp;#39;/mnt/d/Projects/DesistDaydream/python-learning&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;/usr/lib/python38.zip&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;/usr/lib/python3.8&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;/usr/lib/python3.8/lib-dynload&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;/home/lichenhao/.local/lib/python3.8/site-packages&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;/usr/local/lib/python3.8/dist-packages&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;/usr/lib/python3/dist-packages&amp;#39;&lt;/span>&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#f92672">import&lt;/span> sys
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;gt;&amp;gt;&amp;gt;&lt;/span> sys&lt;span style="color:#f92672">.&lt;/span>path
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[&lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;/usr/lib/python38.zip&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;/usr/lib/python3.8&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;/usr/lib/python3.8/lib-dynload&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;/home/lichenhao/.local/lib/python3.8/site-packages&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;/usr/local/lib/python3.8/dist-packages&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;/usr/lib/python3/dist-packages&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>模块的路径通常由 Python 中的 &lt;code>${sys.prefix}&lt;/code> 变量的值作为前缀，并在 Python 启动后推导出完整路径：&lt;/p>
&lt;blockquote>
&lt;p>${} 中的 X 和 Y 分别是 Python 的大版本号和小版本号，比如 Python3.10、Python310&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;strong>${PWD}&lt;/strong> # 当前工作目录&lt;/li>
&lt;li>&lt;strong>${sys.prefix}/lib/&lt;/strong>
&lt;ul>
&lt;li>**./python${XY}.zip **#&lt;/li>
&lt;li>&lt;strong>./python${X.Y}/&lt;/strong> # ** **标准库路径&lt;/li>
&lt;li>&lt;strong>./python${X.Y}/lib-dynload/&lt;/strong> #&lt;/li>
&lt;li>&lt;strong>./python${X.Y}/sist-packages/&lt;/strong> # 第三方库路径。该目录在 Ubuntu 系统中名称为 dist-packages&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>${site.USER_SITE}&lt;/strong> # 启动用户 site 后，保存第三方库的路径。&lt;/li>
&lt;/ul>
&lt;p>注意：从这里可以看到，不同 Python 版本的三方库路径不同，如果把 Python 从 3.8 升级到 3.9 那么之前装的三方库都没法用了。当然你可以整个文件夹都拷贝过去，大部分情况不会出问题。&lt;/p>
&lt;h2 id="syspath-列表生成逻辑">sys.path 列表生成逻辑&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.python.org/3/library/sys_path_init.html">官方文档，Python 标准库-导入模块-sys.path 模块搜索路径初始化&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/3/library/site.html">官方文档，Python 标准库-Python 运行时服务-site—特定于 site 的配置&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>在上面的示例中，&lt;code>sys.path&lt;/code> 的第一个元素（&lt;code>/mnt/e/Projects/DesistDaydream/python-learning/test&lt;/code>）是 test.py 文件所在路径，即执行的 Python 代码文件所在路径，如果不是执行的 Python 代码文件，则第一个元素为空。每当执行一个 Python 文件时，就相当于默认执行了 &lt;code>sys.path.append(&amp;quot;文件所在绝对路径&amp;quot;)&lt;/code> 代码。&lt;/p>
&lt;p>&lt;code>sys.path&lt;/code> 变量中除了第一个元素之外，其他的元素是&lt;strong>通过 Python 解释器(i.e.python 可执行文件)推导出来&lt;/strong>的。启动 Python 交互环境或者用解释器运行脚本时，将会为如下几个变量生成值&lt;/p>
&lt;ul>
&lt;li>&lt;code>sys.prefix&lt;/code> # Python 标准模块(标准库)目录前缀。默认通过运行的 python 解释器推导出来。可以用过 &lt;code>${PYTHONHOME}&lt;/code> 变量覆盖初始值&lt;/li>
&lt;li>&lt;code>sys.exec_prefix&lt;/code> # Python 扩展模块(第三方库)目录前缀。可以用过 &lt;code>${PYTHONHOME}&lt;/code> 变量覆盖初始值&lt;/li>
&lt;li>&lt;code>sys.executable&lt;/code> # Python 解释器的路径。&lt;/li>
&lt;/ul>
&lt;h3 id="推导-sysprefix-变量">推导 sys.prefix 变量&lt;/h3>
&lt;p>假如 Python 解释器的路径&lt;/p>
&lt;ul>
&lt;li>在 Linux 中是 &lt;code>/usr/bin/python3&lt;/code>&lt;/li>
&lt;li>在 Windows 中是 &lt;code>C:\Users\DesistDaydream\AppData\Local\Programs\Python\Python310\python.exe&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>生成的值如下：&lt;/p>
&lt;p>Linux 上的默认 Python，&lt;code>${sys.prefix}&lt;/code> 是：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#f92672">import&lt;/span> sys
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;gt;&amp;gt;&amp;gt;&lt;/span> sys&lt;span style="color:#f92672">.&lt;/span>prefix
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#39;/usr&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;gt;&amp;gt;&amp;gt;&lt;/span> sys&lt;span style="color:#f92672">.&lt;/span>exec_prefix
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#39;/usr&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;gt;&amp;gt;&amp;gt;&lt;/span> sys&lt;span style="color:#f92672">.&lt;/span>executable
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#39;/usr/bin/python3&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Windows 上默认安装路径的 Python，&lt;code>${sys.prefix}&lt;/code> 是：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#f92672">import&lt;/span> sys
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;gt;&amp;gt;&amp;gt;&lt;/span> sys&lt;span style="color:#f92672">.&lt;/span>prefix
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#39;C:&lt;/span>&lt;span style="color:#ae81ff">\\&lt;/span>&lt;span style="color:#e6db74">Users&lt;/span>&lt;span style="color:#ae81ff">\\&lt;/span>&lt;span style="color:#e6db74">DesistDaydream&lt;/span>&lt;span style="color:#ae81ff">\\&lt;/span>&lt;span style="color:#e6db74">AppData&lt;/span>&lt;span style="color:#ae81ff">\\&lt;/span>&lt;span style="color:#e6db74">Local&lt;/span>&lt;span style="color:#ae81ff">\\&lt;/span>&lt;span style="color:#e6db74">Programs&lt;/span>&lt;span style="color:#ae81ff">\\&lt;/span>&lt;span style="color:#e6db74">Python&lt;/span>&lt;span style="color:#ae81ff">\\&lt;/span>&lt;span style="color:#e6db74">Python310&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;gt;&amp;gt;&amp;gt;&lt;/span> sys&lt;span style="color:#f92672">.&lt;/span>exec_prefix
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#39;C:&lt;/span>&lt;span style="color:#ae81ff">\\&lt;/span>&lt;span style="color:#e6db74">Users&lt;/span>&lt;span style="color:#ae81ff">\\&lt;/span>&lt;span style="color:#e6db74">DesistDaydream&lt;/span>&lt;span style="color:#ae81ff">\\&lt;/span>&lt;span style="color:#e6db74">AppData&lt;/span>&lt;span style="color:#ae81ff">\\&lt;/span>&lt;span style="color:#e6db74">Local&lt;/span>&lt;span style="color:#ae81ff">\\&lt;/span>&lt;span style="color:#e6db74">Programs&lt;/span>&lt;span style="color:#ae81ff">\\&lt;/span>&lt;span style="color:#e6db74">Python&lt;/span>&lt;span style="color:#ae81ff">\\&lt;/span>&lt;span style="color:#e6db74">Python310&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;gt;&amp;gt;&amp;gt;&lt;/span> sys&lt;span style="color:#f92672">.&lt;/span>executable
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#39;C:&lt;/span>&lt;span style="color:#ae81ff">\\&lt;/span>&lt;span style="color:#e6db74">Users&lt;/span>&lt;span style="color:#ae81ff">\\&lt;/span>&lt;span style="color:#e6db74">DesistDaydream&lt;/span>&lt;span style="color:#ae81ff">\\&lt;/span>&lt;span style="color:#e6db74">AppData&lt;/span>&lt;span style="color:#ae81ff">\\&lt;/span>&lt;span style="color:#e6db74">Local&lt;/span>&lt;span style="color:#ae81ff">\\&lt;/span>&lt;span style="color:#e6db74">Programs&lt;/span>&lt;span style="color:#ae81ff">\\&lt;/span>&lt;span style="color:#e6db74">Python&lt;/span>&lt;span style="color:#ae81ff">\\&lt;/span>&lt;span style="color:#e6db74">Python310&lt;/span>&lt;span style="color:#ae81ff">\\&lt;/span>&lt;span style="color:#e6db74">python.exe&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>推导出 &lt;code>sys.prefix&lt;/code> 之后&lt;/p>
&lt;ul>
&lt;li>Linux 通常会在 &lt;code>${sys.prefix}/lib/&lt;/code> 目录下查找其他的路径。
&lt;ul>
&lt;li>有的发行版则通常会在 ${sys.prefix}/lib64/ 目录下查找其他路径，比如 CentOS。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Windows 则是直接在 &lt;code>${sys.prefix}/&lt;/code> 目录下查找其他路径&lt;/li>
&lt;/ul>
&lt;h3 id="生成基本路径">生成基本路径&lt;/h3>
&lt;p>首先，查找 &lt;code>python${XY}.zip&lt;/code> 文件，通常为默认为 &lt;code>${sys.prefix}/lib/python${XY}.zip&lt;/code>。注意：即使该文件不存在，通常也会添加默认值。该文件的大小版本号之间没有点。&lt;/p>
&lt;p>然后，添加 &lt;code>{sys.prefix}/lib/python${X.Y}&lt;/code>路径和 &lt;code>${sys.prefix}/lib/python${X.Y}/lib-dynload&lt;/code> 路径。此时如果通过 &lt;code>python -S&lt;/code> 选项关闭 site 模块，则会看到如下路径：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>python3 &lt;span style="color:#f92672">-&lt;/span>S
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Python &lt;span style="color:#ae81ff">3.8.10&lt;/span> (default, Jun &lt;span style="color:#ae81ff">22&lt;/span> &lt;span style="color:#ae81ff">2022&lt;/span>, &lt;span style="color:#ae81ff">20&lt;/span>:&lt;span style="color:#ae81ff">18&lt;/span>:&lt;span style="color:#ae81ff">18&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[GCC &lt;span style="color:#ae81ff">9.4.0&lt;/span>] on linux
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#f92672">import&lt;/span> sys
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;gt;&amp;gt;&amp;gt;&lt;/span> sys&lt;span style="color:#f92672">.&lt;/span>path
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[&lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;/usr/lib/python38.zip&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;/usr/lib/python3.8&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;/usr/lib/python3.8/lib-dynload&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="生成-site-模块路径生成的路径乱七八糟千奇百怪">生成 site 模块路径（生成的路径乱七八糟，千奇百怪）&lt;/h3>
&lt;p>site 模块将会剩下的模块搜索路径添加到 sys.path 变量中。site 模块添加的路径也是最混乱的部分。不同的发行版，生成的路径也千奇百怪。&lt;/p>
&lt;p>Python 默认的基本路径是 &lt;code>${sys.prefix}/lib/python${X.Y}/site-packages/&lt;/code> 目录。&lt;/p>
&lt;ul>
&lt;li>如果是 Ubuntu，则会将 site-packages 改为 dist-package，搞不懂为啥。。。o(╯□╰)o&lt;/li>
&lt;li>对于 CentOS，则除了 lib，还会有一个 lib64，也是搞不懂为啥。。。o(╯□╰)o&lt;/li>
&lt;li>真 TM 乱&lt;/li>
&lt;/ul>
&lt;p>除了基础路径，site 模块还会尝试导入 usercustomize 模块，以添加与用户相关的模块搜索路径。如果 site 模块中的 &lt;a href="https://docs.python.org/3/library/site.html#site.ENABLE_USER_SITE">ENABLE_USER_SITE&lt;/a> 变量为真，且 USER_SITE 定义的文件存在，则会将 USER_SITE 添加到 sys.path 中。&lt;/p>
&lt;p>对于 usercustomize 模块，&lt;code>sys.prefix&lt;/code> 不再使用，取而代之的是 &lt;code>site.USER_BASE&lt;/code>，&lt;code>site.USER_BASE&lt;/code> 的值通常为 &lt;code>~/.local/&lt;/code>，生成的 &lt;code>site.USER_SITE&lt;/code> 的值通常是 &lt;code>site.USER_BASE/lib/python${X.Y}/site-packages&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;gt;&amp;gt;&amp;gt;&lt;/span> site&lt;span style="color:#f92672">.&lt;/span>USER_SITE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#39;/root/.local/lib/python3.6/site-packages&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;gt;&amp;gt;&amp;gt;&lt;/span> site&lt;span style="color:#f92672">.&lt;/span>USER_BASE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#39;/root/.local&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>下面的示例是 CentOS7 中的 Python&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># python3 -m site&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;/root&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;/usr/lib64/python36.zip&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;/usr/lib64/python3.6&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;/usr/lib64/python3.6/lib-dynload&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;/usr/lib64/python3.6/site-packages&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;/usr/lib/python3.6/site-packages&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>USER_BASE: &lt;span style="color:#e6db74">&amp;#39;/root/.local&amp;#39;&lt;/span> &lt;span style="color:#f92672">(&lt;/span>doesn&lt;span style="color:#e6db74">&amp;#39;t exist)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">USER_SITE: &amp;#39;&lt;/span>/root/.local/lib/python3.6/site-packages&lt;span style="color:#e6db74">&amp;#39; (doesn&amp;#39;&lt;/span>t exist&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ENABLE_USER_SITE: True
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># mkdir -p /root/.local/lib/python3.6/site-packages&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># python3 -m site&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sys.path &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">[&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;/root&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;/usr/lib64/python36.zip&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;/usr/lib64/python3.6&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;/usr/lib64/python3.6/lib-dynload&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;/root/.local/lib/python3.6/site-packages&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;/usr/lib64/python3.6/site-packages&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;/usr/lib/python3.6/site-packages&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>USER_BASE: &lt;span style="color:#e6db74">&amp;#39;/root/.local&amp;#39;&lt;/span> &lt;span style="color:#f92672">(&lt;/span>exists&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>USER_SITE: &lt;span style="color:#e6db74">&amp;#39;/root/.local/lib/python3.6/site-packages&amp;#39;&lt;/span> &lt;span style="color:#f92672">(&lt;/span>exists&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ENABLE_USER_SITE: True
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们可以使用 -s 选项禁用&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># python3 -s -m site&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sys.path &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">[&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;/root&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;/usr/lib64/python36.zip&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;/usr/lib64/python3.6&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;/usr/lib64/python3.6/lib-dynload&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;/usr/lib64/python3.6/site-packages&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;/usr/lib/python3.6/site-packages&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>USER_BASE: &lt;span style="color:#e6db74">&amp;#39;/root/.local&amp;#39;&lt;/span> &lt;span style="color:#f92672">(&lt;/span>exists&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>USER_SITE: &lt;span style="color:#e6db74">&amp;#39;/root/.local/lib/python3.6/site-packages&amp;#39;&lt;/span> &lt;span style="color:#f92672">(&lt;/span>exists&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ENABLE_USER_SITE: False
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="总结-1">总结&lt;/h3>
&lt;p>最后生成的 &lt;code>sys.path&lt;/code> 具有类似如下的值：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#f92672">import&lt;/span> sys
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;gt;&amp;gt;&amp;gt;&lt;/span> sys&lt;span style="color:#f92672">.&lt;/span>path
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[&lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;/usr/lib/python38.zip&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;/usr/lib/python3.8&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;/usr/lib/python3.8/lib-dynload&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;/home/lichenhao/.local/lib/python3.8/site-packages&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;/usr/local/lib/python3.8/dist-packages&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;/usr/lib/python3/dist-packages&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>到这里可以发现，&lt;strong>关于包路径搜索最重要的就是这个 &lt;code>${sys.prefix}&lt;/code> 路径前缀&lt;/strong>，而这个值又是从使用的 Python 解释器路径推导出来的。所以要找到包的路径，只需要知道解释器的路径就可以了，如果遇到改变包的路径，只需要通过正确的 PATH 设置，指定你想要的 Python 解释器即可。&lt;/p>
&lt;p>若 &lt;code>sys.path&lt;/code> 中的所有目录都无法找到想要导入的模块，将会出现如下报错：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>ModuleNotFoundError: No module named &lt;span style="color:#e6db74">&amp;#39;XXXXX&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="安装-python-模块">安装 Python 模块&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.python.org/3.10/installing/index.html">官方文档，安装 Python 模块&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://frostming.com/2019/03-13/where-do-your-packages-go/">https://frostming.com/2019/03-13/where-do-your-packages-go/&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>管理 Python 的模块和包所在路径非常乱，不知道是何原因。&lt;/p>
&lt;p>&lt;a href="#pip">pip&lt;/a> 是首选的安装程序。从 Python 3.4 开始，它默认包含在 Python 二进制安装程序中。就算你是用 pipenv，poetry，底层依然是 pip，一律适用。&lt;/p>
&lt;p>运行 pip 有两种方式：&lt;/p>
&lt;ul>
&lt;li>pip &amp;hellip;&lt;/li>
&lt;li>python -m pip &amp;hellip;&lt;/li>
&lt;/ul>
&lt;p>第一种方式和第二种方式大同小异，区别是第一种方式使用的 Python 解释器是写在 pip 文件的 shebang 里的，一般情况下，如果你的 pip 路径是 $path_prefix/bin/pip，那么 Python 路径对应的就是 $path_prefix/bin/python。如果你用的是 Unix 系统则 cat $(which pip) 第一行就包含了 Python 解释器的路径。第二种方式则显式地指定了 Python 的位置。这条规则，对于所有 Python 的可执行程序都是适用的。流程如下图所示。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/loffuc/1669286382022-472bf4de-24cf-4652-bc94-3d52d01f7df1.png" alt="image.png">
那么，不加任何自定义配置时，使用 pip 安装包就会自动安装到 $path_prefix/lib/pythonX.Y/site-packages 下（$path_prefix 是从上一段里得到的），可执行程序安装到 $path_prefix/bin 下，如果需要在命令行直接使用 my_cmd 运行，记得加到 PATH。&lt;/p>
&lt;h2 id="requirementstxt-文件">requirements.txt 文件&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://pip.pypa.io/en/latest/user_guide/#requirements-files">pip 官方文档，用户指南-Requirements 文件&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zhuanlan.zhihu.com/p/69058584">知乎，Python 中的 requirement.txt&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Python 也需要维护项目相关的依赖包。通常我们会在项目的根目录下放置一个 requirement.txt 文件，用于记录所有依赖包和它的确切版本号。
requirement.txt 的内容长这样：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>alembic&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">1.0.10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>appnope&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">0.1.0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>astroid&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">2.2.5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>attrs&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">19.1.0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>backcall&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">0.1.0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>bcrypt&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">3.1.6&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>bleach&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">3.1.0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cffi&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">1.12.3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Click&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">7.0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>decorator&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">4.4.0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>defusedxml&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">0.6.0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>entrypoints&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">0.3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="如何使用">如何使用？&lt;/h3>
&lt;p>那么 requirement.txt 究竟如何使用呢？
当我们拿到一个项目时，首先要在项目运行环境安装 requirement.txt 所包含的依赖：
&lt;code>pip install -r requirement.txt&lt;/code>
当我们要把环境中的依赖写入 requirement.txt 中时，可以借助 freeze 命令：
&lt;code>pip freeze &amp;gt;requirements.txt&lt;/code>&lt;/p>
&lt;h3 id="环境混用怎么办">环境混用怎么办？&lt;/h3>
&lt;p>在导出依赖到 requirement.txt 文件时会有一种尴尬的情况。
你的本地环境不仅包含项目 A 所需要的依赖，也包含着项目 B 所需要的依赖。此时我们要如何做到只把项目 A 的依赖导出呢？
&lt;a href="https://github.com/bndr/pipreqs">pipreqs&lt;/a> 可以通过扫描项目目录，帮助我们仅生成当前项目的依赖清单。
通过以下命令安装：
&lt;code>pip install pipreqs&lt;/code>
运行：
&lt;code>pipreqs ./ --encoding utf8&lt;/code>&lt;/p>
&lt;h1 id="pip">pip&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/pypa/pip">GitHub 项目，pypa/pip&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://pip.pypa.io/">官网&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>pip 是 Python 的包管理程序。可以使用它来安装来自 Python 包索引和其他索引的包。从 Python 3.4 开始，它默认包含在 Python 二进制安装程序中。&lt;/p>
&lt;h2 id="关联文件与配置">关联文件与配置&lt;/h2>
&lt;p>&lt;strong>~/.pip/pip.conf&lt;/strong> # Linux 配置文件
&lt;strong>%USERPROFILE%/pip/pip.ini&lt;/strong> # Windows 配置文件&lt;/p>
&lt;p>pip 安装的模块我们可以从如下目录中找到，该目录下的目录名或文件名通常来说即是包名&lt;/p>
&lt;ul>
&lt;li>Windows
&lt;ul>
&lt;li>&lt;strong>%USERPROFILE%\AppData\Local\Programs\Python\Python${版本号}\Lib\site-packages*&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Linux
&lt;ul>
&lt;li>root 用户：&lt;strong>/usr/local/lib/python${VERSION}/dist-packages/*&lt;/strong>&lt;/li>
&lt;li>普通 用户：&lt;strong>~/.local/lib/python${PythonVersion}/site-packages/*&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>有些包会生成一些可以执行程序，这些二进制文件则默认保存在如下目录&lt;/p>
&lt;ul>
&lt;li>Windows
&lt;ul>
&lt;li>&lt;strong>%USERPROFILE%\AppData\Local\Programs\Python\Python310\Scripts*&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Linux
&lt;ul>
&lt;li>root 用户：&lt;strong>/usr/local/bin/*&lt;/strong>&lt;/li>
&lt;li>普通 用户：&lt;strong>~/.local/bin/*&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="syntax语法">Syntax(语法)&lt;/h2>
&lt;p>pip &lt;!-- raw HTML omitted --> [OPTIONS] COMMAND&lt;/p>
&lt;p>Commands:
install Install packages.
download Download packages.
uninstall Uninstall packages.
freeze Output installed packages in requirements format.
inspect Inspect the python environment.
list List installed packages.
show Show information about installed packages.
check Verify installed packages have compatible dependencies.
config Manage local and global configuration.
search Search PyPI for packages.
cache Inspect and manage pip&amp;rsquo;s wheel cache.
index Inspect information available from package indexes.
wheel Build wheels from your requirements.
hash Compute hashes of package archives.
completion A helper command used for command completion.
debug Show information useful for debugging.
help Show help for commands.&lt;/p>
&lt;h3 id="应用示例">应用示例&lt;/h3>
&lt;p>更新 pip：&lt;code>pip install --upgrade pip&lt;/code>&lt;/p>
&lt;p>对于 Python 开发用户来讲，PIP 安装软件包是家常便饭。但国外的源下载速度实在太慢，浪费时间。而且经常出现下载后安装出错问题。所以把 PIP 安装源替换成国内镜像，可以大幅提升下载速度，还可以提高安装成功率。&lt;/p>
&lt;p>国内源：
新版 ubuntu 要求使用 https 源，要注意。&lt;/p>
&lt;ul>
&lt;li>清华：&lt;a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple&lt;/a>&lt;/li>
&lt;li>阿里云：&lt;a href="http://mirrors.aliyun.com/pypi/simple/">http://mirrors.aliyun.com/pypi/simple/&lt;/a>&lt;/li>
&lt;li>中国科技大学 &lt;a href="https://pypi.mirrors.ustc.edu.cn/simple/">https://pypi.mirrors.ustc.edu.cn/simple/&lt;/a>&lt;/li>
&lt;li>华中理工大学：&lt;a href="http://pypi.hustunique.com/">http://pypi.hustunique.com/&lt;/a>&lt;/li>
&lt;li>山东理工大学：&lt;a href="http://pypi.sdutlinux.org/">http://pypi.sdutlinux.org/&lt;/a>&lt;/li>
&lt;li>豆瓣：&lt;a href="http://pypi.douban.com/simple/">http://pypi.douban.com/simple/&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>临时使用：
可以在使用 pip 的时候加参数 &lt;code>-i https://pypi.tuna.tsinghua.edu.cn/simple&lt;/code>&lt;/p>
&lt;p>例如：&lt;code>pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pyspider&lt;/code>，这样就会从清华这边的镜像去安装 pyspider 库。&lt;/p>
&lt;p>永久修改，一劳永逸：
Linux 下，修改 ~/.pip/pip.conf (没有就创建一个文件夹及文件。文件夹要加“.”，表示是隐藏文件夹)，内容如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-properties" data-lang="properties">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">[global]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">index-url&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">https://pypi.tuna.tsinghua.edu.cn/simple&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">[install]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">trusted-host&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">mirrors.aliyun.com&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>windows 下，直接在 user 目录中创建一个 pip 目录，如：C:/Users/xx/pip，新建文件 pip.ini。内容同上。&lt;/p></description></item></channel></rss>