<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦的站点 – Python 环境安装与使用</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/Python-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</link><description>Recent content in Python 环境安装与使用 on 断念梦的站点</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/Python-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Python 环境安装与使用</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/Python-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/Python-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/Python-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/Python-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.python.org/3/using/index.html">官方文档，Python 的安装与使用&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="安装-python">安装 Python&lt;a class="td-heading-self-link" href="#%e5%ae%89%e8%a3%85-python" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="linux">Linux&lt;a class="td-heading-self-link" href="#linux" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>各 Linux 发行版通常都会自带 Python&lt;/p>
&lt;h3 id="自定义-python">自定义 Python&lt;a class="td-heading-self-link" href="#%e8%87%aa%e5%ae%9a%e4%b9%89-python" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>由于 &lt;a href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/Python%20%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/Python%20%E6%A8%A1%E5%9D%97%E4%B8%8E%E5%8C%85.md">Python 模块与包&lt;/a> 的管理非常混乱，我们有没有办法像 Go 一样，依靠一个 GOPATH 即可统一管理呢？可以，当我们&lt;strong>了解了模块搜索路径的底层原理之后&lt;/strong>，即可开始着手将 Python 的依赖都移动到指定的目录&lt;/p>
&lt;p>对于 root 用户来说，GOPATH 默认在 /root/go，那我们就将 PYTHONHOME 设为 /root/python，开始吧(注意这里要用绝对路径，不要使用 &lt;code>~&lt;/code>)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">PYTHON_VERSION&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;3.10&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mkdir -p /root/python/lib
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cp /usr/bin/python&lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">PYTHON_VERSION&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span> /root/python
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cp -ax -r /usr/lib/python&lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">PYTHON_VERSION&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span> /root/python/lib
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>准备工作完成了，此时我们只需要修改 &lt;code>${PYTHONHOME}&lt;/code> 或者将 &lt;code>/root/python&lt;/code> 加入 &lt;code>${PATH}&lt;/code> 变量中即可&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">PATH&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>/root/python:&lt;span style="color:#000">$PATH&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># python${PYTHON_VERSION}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Python 3.10.6 &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>main, Nov &lt;span style="color:#0000cf;font-weight:bold">14&lt;/span> 2022, 16:10:14&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; import sys
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; sys.prefix
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&amp;#39;/root/python&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; sys.exec_prefix
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&amp;#39;/root/python&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="windows">Windows&lt;a class="td-heading-self-link" href="#windows" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>从官网下载 Windows 版的 exe 安装包，勾选 &lt;code>Add Python ${版本号} to PATH&lt;/code>。安装包中包括 IDLE、pip、Python 文档。&lt;/p>
&lt;p>安装完成后会提示关闭 Path 变量值的长度限制&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gzv1ih/1659885506889-188054a3-8a67-4039-ab87-16f8ff3a3e38.png" alt="image.png">&lt;/p>
&lt;h3 id="安装完成后自动设置的内容">安装完成后自动设置的内容&lt;a class="td-heading-self-link" href="#%e5%ae%89%e8%a3%85%e5%ae%8c%e6%88%90%e5%90%8e%e8%87%aa%e5%8a%a8%e8%ae%be%e7%bd%ae%e7%9a%84%e5%86%85%e5%ae%b9" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>修改安装路径到 &lt;code>D:\Tools\Python\Python${版本号}&lt;/code> 目录下&lt;/p>
&lt;ul>
&lt;li>比如我安装 Python 3.10 版本，则会安装到 &lt;code>D:\Tools\Python\Python310&lt;/code> 目录下&lt;/li>
&lt;/ul>
&lt;p>同时将会在用户变量中的 Path 环境变量中添加如下值：&lt;/p>
&lt;ul>
&lt;li>&lt;code>D:\Tools\Python\Python310\Scripts\&lt;/code>&lt;/li>
&lt;li>&lt;code>D:\Tools\Python\Python310&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>在 &lt;code>%USERPROFILE%\AppData\Local\Programs\Python\Python310\Scripts\&lt;/code> 目录中将会添加 pip 二进制命令。&lt;/p>
&lt;h3 id="安装完成后基本目录结构">安装完成后基本目录结构&lt;a class="td-heading-self-link" href="#%e5%ae%89%e8%a3%85%e5%ae%8c%e6%88%90%e5%90%8e%e5%9f%ba%e6%9c%ac%e7%9b%ae%e5%bd%95%e7%bb%93%e6%9e%84" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>Python 自动安装 pip 和 setuptools 两个包，这两个包在 site-packages 目录中生成如下目录&lt;/p>
&lt;ul>
&lt;li>pip 包包含目录
&lt;ul>
&lt;li>pip&lt;/li>
&lt;li>pip-22.3.1.dist-info&lt;/li>
&lt;li>另外还会在 Scripts 目录生成 3 个可执行文件。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>setuptools 包包含目录
&lt;ul>
&lt;li>_distutils_hack&lt;/li>
&lt;li>distutils-precedence.pth&lt;/li>
&lt;li>pkg_resources&lt;/li>
&lt;li>setuptools-65.5.0.dist-info&lt;/li>
&lt;li>setuptools&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="windows-可嵌入的包">Windows 可嵌入的包&lt;a class="td-heading-self-link" href="#windows-%e5%8f%af%e5%b5%8c%e5%85%a5%e7%9a%84%e5%8c%85" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>嵌入式分发是一个包含最小 Python 环境的 ZIP 文件。它旨在充当另一个应用程序的一部分，而不是由最终用户直接访问。&lt;/p>
&lt;h2 id="安装多个版本的-python">安装多个版本的 Python&lt;a class="td-heading-self-link" href="#%e5%ae%89%e8%a3%85%e5%a4%9a%e4%b8%aa%e7%89%88%e6%9c%ac%e7%9a%84-python" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h1 id="初始化项目">初始化项目&lt;a class="td-heading-self-link" href="#%e5%88%9d%e5%a7%8b%e5%8c%96%e9%a1%b9%e7%9b%ae" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>无&lt;/p>
&lt;h1 id="编译-python">编译 Python&lt;a class="td-heading-self-link" href="#%e7%bc%96%e8%af%91-python" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/pyinstaller/pyinstaller">GitHub 项目，pyinstaller/pyinstaller&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Python 官方并未提供可以将代码编译成一个独立的可执行文件的工具。如果想要运行 Python 代码，通常来说都要先在目标机器上安装 Python 环境以及所需的依赖库。&lt;/p>
&lt;p>但是，我们可以使用第三方工具，如 PyInstaller、cx_Freeze 等将 Python 代码编译成独立的可执行文件。这些工具会将 Python 解释器和所需的所有库打包到单个文件中，因此在未安装 Python 环境的计算机上也可以运行它。&lt;/p>
&lt;p>使用方法：&lt;/p>
&lt;p>安装&lt;/p>
&lt;p>&lt;code>pip install pyinstaller&lt;/code>&lt;/p>
&lt;p>使用命令行将 Python 文件编译为可执行文件：&lt;/p>
&lt;p>&lt;code>pyinstaller --onefile myscript.py&lt;/code>&lt;/p>
&lt;p>这样，您就可以在任何没有 Python 环境的计算机上运行生成的可执行文件了。&lt;/p>
&lt;h1 id="python-关联文件与配置">Python 关联文件与配置&lt;a class="td-heading-self-link" href="#python-%e5%85%b3%e8%81%94%e6%96%87%e4%bb%b6%e4%b8%8e%e9%85%8d%e7%bd%ae" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;strong>${sys.path}&lt;/strong> # 模块的存储目录列表，以及加载模块时读取的目录列表。为 Python 提供寻找模块位置，也就是 python 运行代码时，import 指令导入的包的保存路径。这是多个文件的组合，也就是&lt;a href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/Python%20%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/Python%20%E6%A8%A1%E5%9D%97%E4%B8%8E%E5%8C%85.md#Python%20%E6%A8%A1%E5%9D%97%E7%AE%A1%E7%90%86">搜索模块的路径&lt;/a>&lt;/p>
&lt;p>Python 模块与包的关联文件通常都是在编译 Python 解释器时设置的，各个平台的默认值不太一样，这些值都会以变量的形式，存储在 Python 解释器中，当我们使用的时候，直接读取 Python 中的某些变量即可。通常都在 sys、site 模块中变量。&lt;/p>
&lt;p>注意：Python 与其他语言不太一样，可以搜索包或者模块的路径非常多。这些模块或者包不一定只存放在一个单一的目录里。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>${PYTHONPATH}&lt;/strong> # 手动设置的目录列表&lt;/li>
&lt;li>&lt;strong>site.getsitepackages()&lt;/strong> # 这个函数可以列出所有 site 模块生成的存放模块的目录列表&lt;/li>
&lt;/ul>
&lt;h2 id="pyprojecttoml">pyproject.toml&lt;a class="td-heading-self-link" href="#pyprojecttoml" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://peps.python.org/pep-0518/">PEP-518&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://packaging.python.org/en/latest/guides/writing-pyproject-toml/">Python 包管理指南，编写 pyproject.toml&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>根据 &lt;a href="https://peps.python.org/pep-0518/">PEP-518&lt;/a>，Python 项目的配置推荐放到项目根目录 pyproject.toml 文件中，这是一个 &lt;a href="docs/2.%E7%BC%96%E7%A8%8B/%E6%97%A0%E6%B3%95%E5%88%86%E7%B1%BB%E7%9A%84%E8%AF%AD%E8%A8%80/TOML.md">TOML&lt;/a> 格式的配置文件&lt;/p>
&lt;p>该文件通常有 3 个 Table&lt;/p>
&lt;ul>
&lt;li>&lt;strong>build-system&lt;/strong> # &lt;strong>强烈推荐使用&lt;/strong>。它允许您声明您使用哪个&lt;a href="https://packaging.python.org/en/latest/glossary/#term-Build-Backend">构建后端&lt;/a>以及构建项目所需的其他依赖项。&lt;/li>
&lt;li>&lt;strong>project&lt;/strong> # 大多数构建后端用来指定项目的基本元数据的格式，例如依赖项、您的姓名、etc. 。&lt;/li>
&lt;li>&lt;strong>tool&lt;/strong> # 具有特定于工具的子表，例如 &lt;code>[tool.hatch]&lt;/code>、&lt;code>[tool.black]&lt;/code>、&lt;code>[tool.mypy]&lt;/code>。它的内容是由每个工具定义的。请查阅特定工具的文档以了解它可以包含什么。&lt;/li>
&lt;/ul>
&lt;h3 id="project">project&lt;a class="td-heading-self-link" href="#project" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>&lt;strong>name&lt;/strong>(STRING)&lt;/p>
&lt;p>&lt;strong>dynamic&lt;/strong>([]STRING)&lt;/p>
&lt;p>&lt;strong>dependencies&lt;/strong>([]STRING)&lt;/p>
&lt;h2 id="requirementstxt-文件弃用">requirements.txt 文件（弃用）&lt;a class="td-heading-self-link" href="#requirementstxt-%e6%96%87%e4%bb%b6%e5%bc%83%e7%94%a8" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://pip.pypa.io/en/latest/user_guide/#requirements-files">pip 官方文档，用户指南-Requirements 文件&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zhuanlan.zhihu.com/p/69058584">知乎，Python 中的 requirement.txt&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Python 也需要维护项目相关的依赖包。通常我们会在项目的根目录下放置一个 requirement.txt 文件，用于记录所有依赖包和它的确切版本号。&lt;/p>
&lt;p>requirement.txt 的内容长这样：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">alembic&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1.0.10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">appnope&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.1.0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">astroid&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2.2.5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">attrs&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">19.1.0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">backcall&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.1.0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">bcrypt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3.1.6&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">bleach&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3.1.0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">cffi&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1.12.3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Click&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">7.0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">decorator&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">4.4.0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">defusedxml&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.6.0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">entrypoints&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="如何使用">如何使用？&lt;a class="td-heading-self-link" href="#%e5%a6%82%e4%bd%95%e4%bd%bf%e7%94%a8" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>那么 requirement.txt 究竟如何使用呢？&lt;/p>
&lt;p>当我们拿到一个项目时，首先要在项目运行环境安装 requirement.txt 所包含的依赖：&lt;/p>
&lt;p>&lt;code>pip install -r requirement.txt&lt;/code>&lt;/p>
&lt;p>当我们要把环境中的依赖写入 requirement.txt 中时，可以借助 freeze 命令：&lt;/p>
&lt;p>&lt;code>pip freeze &amp;gt; requirements.txt&lt;/code>&lt;/p>
&lt;h3 id="环境混用怎么办">环境混用怎么办？&lt;a class="td-heading-self-link" href="#%e7%8e%af%e5%a2%83%e6%b7%b7%e7%94%a8%e6%80%8e%e4%b9%88%e5%8a%9e" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>在导出依赖到 requirement.txt 文件时会有一种尴尬的情况。你的本地环境不仅包含项目 A 所需要的依赖，也包含着项目 B 所需要的依赖。此时我们要如何做到只把项目 A 的依赖导出呢？&lt;/p>
&lt;p>&lt;a href="https://github.com/bndr/pipreqs">pipreqs&lt;/a> 可以通过扫描项目目录，帮助我们仅生成当前项目的依赖清单。&lt;/p>
&lt;p>通过以下命令安装：&lt;/p>
&lt;p>&lt;code>pip install pipreqs&lt;/code>&lt;/p>
&lt;p>运行：&lt;/p>
&lt;p>&lt;code>pipreqs ./ --encoding utf8&lt;/code>&lt;/p></description></item><item><title>Docs: Python 模块与包</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/Python-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/Python-%E6%A8%A1%E5%9D%97%E4%B8%8E%E5%8C%85/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/Python-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/Python-%E6%A8%A1%E5%9D%97%E4%B8%8E%E5%8C%85/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.python.org/3/tutorial/modules.html">官方文档，教程 - 6.模块&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/pypa/packaging.python.org">GitHub 项目，pypa/packaging.python.org&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://packaging.python.org">Python 包管理指南&lt;/a> “Python Packaging User Guide”(PyPUG) 旨在成为有关如何使用当前工具在 Python 中打包和安装发行版的权威资源。&lt;/li>
&lt;li>&lt;a href="https://www.pypa.io/en/latest/">Python Packaging Authority&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017454145014176">廖雪峰 Python 教程，模块&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>在计算机程序的开发过程中，随着程序代码越写越多，在一个文件里代码就会越来越长，越来越不容易维护。&lt;/p>
&lt;p>为了编写可维护的代码，我们把很多函数分组，分别放到不同的文件里，这样，每个文件包含的代码就相对较少，很多编程语言都采用这种组织代码的方式。在 Python 中，&lt;strong>一个 &lt;code>.py&lt;/code> 文件&lt;/strong>就称之为一个 &lt;strong>Module(模块)&lt;/strong>。&lt;/p>
&lt;p>假如现在有 a.py 和 b.py，b.py 中有定义了名为 bFun 的函数，现在想要在 a.py 中使用 bFun 函数，则只需要在开始使用 &lt;code>from b import bFun&lt;/code> 即可。&lt;/p>
&lt;p>&lt;strong>使用模块有什么好处？&lt;/strong>&lt;/p>
&lt;p>最大的好处是大大提高了代码的可维护性。其次，编写代码不必从零开始。当一个模块编写完毕，就可以被其他地方引用。我们在编写程序的时候，也经常引用其他模块，包括 Python 内置的模块和来自第三方的模块。&lt;/p>
&lt;p>使用模块还可以避免函数名和变量名冲突。相同名字的函数和变量完全可以分别存在不同的模块中，因此，我们自己在编写模块时，不必考虑名字会与其他模块冲突。但是也要注意，尽量不要与内置函数名字冲突。&lt;a href="http://docs.python.org/3/library/functions.html">这里&lt;/a>可以查看 Python 的所有内置函数。&lt;/p>
&lt;p>&lt;strong>如果不同的人编写的模块名相同怎么办？&lt;/strong>&lt;/p>
&lt;p>为了避免模块名冲突，Python 又引入了按目录来组织模块的方法，称为 &lt;strong>Package(包)&lt;/strong>。&lt;/p>
&lt;p>举个例子，一个 &lt;code>abc.py&lt;/code> 的文件就是一个名字叫 &lt;code>abc&lt;/code> 的模块，一个 &lt;code>xyz.py&lt;/code> 的文件就是一个名字叫&lt;code>xyz&lt;/code>的模块。&lt;/p>
&lt;p>现在，假设我们的&lt;code>abc&lt;/code>和&lt;code>xyz&lt;/code>这两个模块名字与其他模块冲突了，于是我们可以通过包来组织模块，避免冲突。方法是选择一个顶层包名，比如&lt;code>mycompany&lt;/code>，按照如下目录存放：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>mycompany
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├─ __init__.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├─ abc.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└─ xyz.py
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>引入了包以后，只要顶层的包名不与别人冲突，那所有模块都不会与别人冲突。现在，&lt;code>abc.py&lt;/code>模块的名字就变成了&lt;code>mycompany.abc&lt;/code>，类似的，&lt;code>xyz.py&lt;/code>的模块名变成了&lt;code>mycompany.xyz&lt;/code>。&lt;/p>
&lt;p>请注意，每一个包目录下面都会有一个&lt;code>__init__.py&lt;/code>的文件，这个文件是必须存在的，否则，Python 就把这个目录当成普通目录，而不是一个包。&lt;code>__init__.py&lt;/code>可以是空文件，也可以有 Python 代码，因为&lt;code>__init__.py&lt;/code>本身就是一个模块，而它的模块名就是&lt;code>mycompany&lt;/code>。&lt;/p>
&lt;p>类似的，可以有多级目录，组成多级层次的包结构。比如如下的目录结构：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>mycompany
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├─ web
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ ├─ __init__.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ ├─ utils.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ └─ www.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├─ __init__.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├─ abc.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └─ utils.py
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>文件 &lt;code>www.py&lt;/code> 的模块名就是 &lt;code>mycompany.web.www&lt;/code>，两个文件 &lt;code>utils.py&lt;/code> 的模块名分别是 &lt;code>mycompany.utils&lt;/code> 和 &lt;code>mycompany.web.utils&lt;/code>。&lt;/p>
&lt;p>自己创建模块时要注意命名，不能和 Python 自带的模块名称冲突。例如，系统自带了 sys 模块，自己的模块就不可命名为 sys.py，否则将无法导入系统自带的 sys 模块。&lt;/p>
&lt;p>&lt;code>mycompany.web&lt;/code>也是一个模块，该模块对应的 .py 文件是 &lt;code>__init__.py&lt;/code>。&lt;/p>
&lt;h2 id="package包">Package(包)&lt;a class="td-heading-self-link" href="#package%e5%8c%85" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>包是一种通过使用“带点的模块名称”来构建 Python 模块命名空间的方式。例如，模块名称 &lt;code>A.B&lt;/code> 指定了一个名为 &lt;code>A&lt;/code> 的包中的一个名为 &lt;code>B&lt;/code> 的子模块。就像使用模块使不同模块的作者不必担心彼此的全局变量名称一样，使用点分模块名称可以节省作者多模块包，如 NumPy 或 Pillow 包，不必担心彼此的模块名称相同会影响到对方。&lt;/p>
&lt;p>假设您要设计一组模块集（“包”）来统一处理声音文件和声音数据。有许多不同的声音文件格式（通常通过它们的扩展名识别，例如：.wav、.aiff、.au），因此您可能需要创建和维护不断增长的模块集合，以便在各种文件格式之间进行转换。您可能还想对声音数据执行许多不同的操作（例如混合、添加回声、应用均衡器功能、创建人工立体声效果），因此您将编写一个永无止境的模块流来执行这些操作。这是您的包的可能结构（以分层文件系统表示）：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sound/ 顶级包
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> __init__.py 初始化名为 sound 的包，有这个文件的存在，Python 才可以将 sound/ 目录识别为包
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> formats/ 用于格式转换的 Subpackage&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>子包，子包也可以称为 Module&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>模块&lt;span style="color:#ce5c00;font-weight:bold">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> __init__.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> wavread.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> wavwrite.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> aiffread.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> aiffwrite.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> auread.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> auwrite.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> effects/ 用于声音效果的 Subpackage&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>子包&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> __init__.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echo.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> surround.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reverse.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> filters/ 用于过滤的 Subpackage
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> __init__.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> equalizer.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vocoder.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> karaoke.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>导入包时，Python 会在 &lt;code>${sys.path}&lt;/code> 上的目录中搜索包子目录。&lt;/p>
&lt;p>需要 &lt;code>__init__.py&lt;/code> 文件才能使 Python 将包含该文件的目录视为包。这可以防止具有通用名称（例如字符串）的目录无意中隐藏了稍后出现在模块搜索路径上的有效模块。在最简单的情况下，&lt;code>__init__.py&lt;/code> 可以只是一个空文件，但它也可以执行包的初始化代码或设置 &lt;code>__all__&lt;/code> 变量，稍后将介绍。&lt;/p>
&lt;p>注意：&lt;/p>
&lt;ul>
&lt;li>import 指令导入模块时是否成功，取决于执行 Python 代码时的所在位置。反正设计的挺恶心的。。。o(╯□╰)o&lt;/li>
&lt;li>说白了：Package 就是 Module，只不过是对 Module 进行了分类。。。导入模块时，模块名称中有 &lt;code>.&lt;/code> 就是包了。。其实还是模块。也可以这么理解：一个目录就是一个包，一个文件就是一个模块。&lt;/li>
&lt;li>若没有 &lt;code>__init__.py&lt;/code> 文件，我们使用 IDE 追踪代码时，如果想要从 import 指令中的导入的包进行追踪，会提示找不到该文件，无法追踪到。&lt;/li>
&lt;/ul>
&lt;h2 id="总结">总结&lt;a class="td-heading-self-link" href="#%e6%80%bb%e7%bb%93" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>模块是一组 Python 代码的集合，可以使用其他模块，也可以被其他模块使用。&lt;/p>
&lt;p>创建自己的模块时，要注意：&lt;/p>
&lt;ul>
&lt;li>模块名要遵循 Python 变量命名规范，不要使用中文、特殊字符；&lt;/li>
&lt;li>模块名不要和系统模块名冲突，最好先查看系统是否已存在该模块，检查方法是在 Python 交互环境执行&lt;code>import abc&lt;/code>，若成功则说明系统存在此模块。&lt;/li>
&lt;/ul>
&lt;p>不管是 Package 还是 Module，都可以统一称为我们常说的 &lt;strong>Library(库)&lt;/strong>，毕竟在下面的模块管理章节，也能看到 Python 保存&lt;strong>包和模块的目录通常都是 &lt;code>lib/&lt;/code> 目录&lt;/strong>。并且，Python 官方也有一个专门的页面列出了所有的&lt;a href="https://docs.python.org/3/library/index.html">标准库&lt;/a>&lt;/p>
&lt;p>&lt;strong>Python Package Index(简称 PyPI)&lt;/strong> 是 Python 编程语言官方的的软件存储库。&lt;a href="https://pypi.org/">https://pypi.org/&lt;/a>&lt;/p>
&lt;h1 id="python-模块使用">Python 模块使用&lt;a class="td-heading-self-link" href="#python-%e6%a8%a1%e5%9d%97%e4%bd%bf%e7%94%a8" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>Python 本身就内置了很多非常有用的模块，只要安装完毕，这些模块就可以立刻使用。&lt;/p>
&lt;p>我们以内建的 &lt;code>sys&lt;/code> 模块为例，编写一个 &lt;code>hello&lt;/code> 的模块：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#!/usr/bin/env python3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># -*- coding: utf-8 -*-&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&amp;#39; a test module &amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">__author__&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;DesistDaydream&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">sys&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">test&lt;/span>&lt;span style="color:#000;font-weight:bold">():&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">args&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">sys&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">argv&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#204a87">len&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">args&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;Hello, world!&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">elif&lt;/span> &lt;span style="color:#204a87">len&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">args&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;Hello, &lt;/span>&lt;span style="color:#4e9a06">%s&lt;/span>&lt;span style="color:#4e9a06">!&amp;#39;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">%&lt;/span> &lt;span style="color:#000">args&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">else&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;Too many arguments!&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">__name__&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;__main__&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">test&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>第 1 行和第 2 行是标准注释，第 1 行注释可以让这个&lt;code>hello.py&lt;/code>文件直接在 Unix/Linux/Mac 上运行，第 2 行注释表示 .py 文件本身使用标准 UTF-8 编码；&lt;/p>
&lt;p>第 4 行是一个字符串，表示模块的文档注释，任何模块代码的第一个字符串都被视为模块的文档注释；&lt;/p>
&lt;p>第 6 行使用&lt;code>__author__&lt;/code>变量把作者写进去，这样当你公开源代码后别人就可以瞻仰你的大名；&lt;/p>
&lt;p>以上就是 Python 模块的标准文件模板，当然也可以全部删掉不写，但是，按标准办事肯定没错。&lt;/p>
&lt;p>后面开始就是真正的代码部分。&lt;/p>
&lt;p>你可能注意到了，使用&lt;code>sys&lt;/code>模块的第一步，就是导入该模块：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">sys&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>导入 &lt;code>sys&lt;/code> 模块后，我们就有了变量 &lt;code>sys&lt;/code> 指向该模块，利用 &lt;code>sys&lt;/code> 这个变量，就可以访问 &lt;code>sys&lt;/code> 模块的所有功能。&lt;/p>
&lt;p>&lt;code>sys&lt;/code> 模块有一个 &lt;code>argv&lt;/code> 变量，用 list 存储了命令行的所有参数。&lt;code>argv&lt;/code> 至少有一个元素，因为第一个参数永远是该 .py 文件的名称，例如：&lt;/p>
&lt;p>运行&lt;code>python3 hello.py&lt;/code>获得的&lt;code>sys.argv&lt;/code>就是&lt;code>['hello.py']&lt;/code>；&lt;/p>
&lt;p>运行&lt;code>python3 hello.py Michael&lt;/code>获得的&lt;code>sys.argv&lt;/code>就是&lt;code>['hello.py', 'Michael']&lt;/code>。&lt;/p>
&lt;p>最后，注意到这两行代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">__name__&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;__main__&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">test&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>当我们在命令行直接使用 &lt;code>python3 hello.py&lt;/code> 运行模块文件时，Python 解释器把 &lt;code>__name__&lt;/code> 这个特殊变量的值设为 &lt;code>__main__&lt;/code>，而如果在其他地方导入&lt;code>hello&lt;/code>模块时 &lt;code>__name__&lt;/code> 变量的值则是本模块的名称(i.e. hello)，因此，这种 &lt;code>if&lt;/code> 测试可以让一个模块通过命令行运行时执行一些额外的代码，最常见的就是运行单元测试。&lt;/p>
&lt;p>我们可以用命令行运行&lt;code>hello.py&lt;/code>看看效果：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ python3 hello.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Hello, world!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ python3 hello.py Michael
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Hello, Michael!
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果启动 Python 交互环境，再导入&lt;code>hello&lt;/code>模块：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">$&lt;/span> &lt;span style="color:#000">python3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Python&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3.10.6&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">main&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">Nov&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">14&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2022&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">16&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">14&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">hello&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>导入时，没有打印&lt;code>Hello, word!&lt;/code>，因为没有执行&lt;code>test()&lt;/code>函数。&lt;/p>
&lt;p>调用&lt;code>hello.test()&lt;/code>时，才能打印出&lt;code>Hello, word!&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">hello&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">test&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Hello&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">world&lt;/span>&lt;span style="color:#a40000">!&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="__name__-变量说明">__name__ 变量说明&lt;a class="td-heading-self-link" href="#__name__-%e5%8f%98%e9%87%8f%e8%af%b4%e6%98%8e" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>一个 .py 文件可以作为一个单独的脚本运行，也可以作为模块被其他代码引用，这个 &lt;code>__name__&lt;/code> 变量，就是用来判断当前是哪一种情况的。&lt;/p>
&lt;p>常用来在多文件的项目中，测试独立文件中的代码。&lt;/p>
&lt;h2 id="compiled已编译-的-python-文件">Compiled(已编译) 的 Python 文件&lt;a class="td-heading-self-link" href="#compiled%e5%b7%b2%e7%bc%96%e8%af%91-%e7%9a%84-python-%e6%96%87%e4%bb%b6" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>为了加快加载模块的速度，Python 将每个模块的编译版本缓存在名为 module.version.pyc 的 &lt;strong>pycache&lt;/strong> 目录下，其中版本编码了编译文件的格式；它通常包含 Python 版本号。例如，在 CPython 3.3 版中，spam.py 的编译版本将被缓存为 &lt;strong>pycache&lt;/strong>/spam.cpython-33.pyc。这种命名约定允许来自不同版本和不同 Python 版本的编译模块共存。&lt;/p>
&lt;p>Python 会根据编译后的版本检查源代码的修改日期，以查看它是否已过时并需要重新编译。这是一个完全自动的过程。此外，编译后的模块与平台无关，因此可以在不同架构的系统之间共享同一个库。&lt;/p>
&lt;p>Python 在两种情况下不检查缓存。首先，它总是重新编译并且不存储直接从命令行加载的模块的结果。其次，如果没有源模块，它不会检查缓存。要支持非源（仅编译）分发，编译模块必须在源目录中，并且不能有源模块。&lt;/p>
&lt;h2 id="作用域">作用域&lt;a class="td-heading-self-link" href="#%e4%bd%9c%e7%94%a8%e5%9f%9f" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>在一个模块中，我们可能会定义很多函数和变量，但有的函数和变量我们希望给别人使用，有的函数和变量我们希望仅仅在模块内部使用。在 Python 中，是通过&lt;code>_&lt;/code>前缀来实现的。&lt;/p>
&lt;p>正常的函数和变量名是公开的（public），可以被直接引用，比如：&lt;code>abc&lt;/code>，&lt;code>x123&lt;/code>，&lt;code>PI&lt;/code>等；&lt;/p>
&lt;p>类似&lt;code>__xxx__&lt;/code>这样的变量是特殊变量，可以被直接引用，但是有特殊用途，比如上面的 &lt;code>__author__&lt;/code>，&lt;code>__name__&lt;/code> 就是特殊变量，&lt;code>hello&lt;/code>模块定义的文档注释也可以用特殊变量&lt;code>__doc__&lt;/code>访问，我们自己的变量一般不要用这种变量名；&lt;/p>
&lt;p>类似 &lt;code>_xxx&lt;/code> 和 &lt;code>__xxx&lt;/code> 这样的函数或变量就是非公开的（private），不应该被直接引用，比如 &lt;code>_abc&lt;/code>，&lt;code>__abc&lt;/code> 等；&lt;/p>
&lt;p>之所以我们说，private 函数和变量“不应该”被直接引用，而不是“不能”被直接引用，是因为 Python 并没有一种方法可以完全限制访问 private 函数或变量，但是，从编程习惯上不应该引用 private 函数或变量。&lt;/p>
&lt;p>private 函数或变量不应该被别人引用，那它们有什么用呢？请看例子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">_private_1&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">name&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;Hello, &lt;/span>&lt;span style="color:#4e9a06">%s&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">%&lt;/span> &lt;span style="color:#000">name&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">_private_2&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">name&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;Hi, &lt;/span>&lt;span style="color:#4e9a06">%s&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">%&lt;/span> &lt;span style="color:#000">name&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">greeting&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">name&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#204a87">len&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">name&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">_private_1&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">name&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">else&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">_private_2&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">name&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们在模块里公开&lt;code>greeting()&lt;/code>函数，而把内部逻辑用 private 函数隐藏起来了，这样，调用&lt;code>greeting()&lt;/code>函数不用关心内部的 private 函数细节，这也是一种非常有用的代码封装和抽象的方法，即：&lt;/p>
&lt;p>外部不需要引用的函数全部定义成 private，只有外部需要引用的函数才定义为 public。&lt;/p>
&lt;h1 id="python-模块管理">Python 模块管理&lt;a class="td-heading-self-link" href="#python-%e6%a8%a1%e5%9d%97%e7%ae%a1%e7%90%86" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.python.org/3/tutorial/modules.html#the-module-search-path">官方文档，Python 教程 - 6.模块 - 模块搜索路径&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/3/using/cmdline.html">官方文档，Python 的安装和使用 - 命令行工具和环境&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPATH">PYTHONPATH&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONHOME">PYTHONHOME&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://stackoverflow.com/questions/59104100/what-is-the-idea-behind-the-installation-dependent-default-directory-layout">https://stackoverflow.com/questions/59104100/what-is-the-idea-behind-the-installation-dependent-default-directory-layout&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://stackoverflow.com/questions/897792/where-is-pythons-sys-path-initialized-from">https://stackoverflow.com/questions/897792/where-is-pythons-sys-path-initialized-from&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>我们通过 &lt;strong>Python 模块的搜索路径&lt;/strong>来管理 Python 模块，或者称为管理 Python 包。Python 模块的搜索路径在 &lt;strong>Python 解释器(i.e.python 可执行文件)启动时初始化&lt;/strong>，并将路径字符串保存在 &lt;strong>&lt;code>${sys.path}&lt;/code>&lt;/strong> 这个数组类型的变量中。&lt;/p>
&lt;p>Python 模块通常分两大类&lt;/p>
&lt;ul>
&lt;li>&lt;strong>内置模块&lt;/strong> # 可以当做 &lt;a href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/Python%20%E8%A7%84%E8%8C%83%E4%B8%8E%E6%A0%87%E5%87%86%E5%BA%93/Python%20%E8%A7%84%E8%8C%83%E4%B8%8E%E6%A0%87%E5%87%86%E5%BA%93.md#Python%20%E6%A0%87%E5%87%86%E5%BA%93">Python 标准库&lt;/a>。&lt;/li>
&lt;li>&lt;strong>第三方模块&lt;/strong> # 一般由 &lt;a href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/Python%E5%B7%A5%E5%85%B7/PIP.md">PIP&lt;/a> 程序管理&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>tips: 一般情况，模块默认都保存在 lib/ 目录下，这目录包含了了标准库的模块和第三方模块。而第三方模块是保存在 lib/site-pacages/ 目录下。至于目录的前缀，在不同环境一般各不相同。这个说法仅供参考并没有官方文档说明，仅是个人总结。&lt;/p>
&lt;/blockquote>
&lt;p>当导入一个名为 spam 的模块时，Python 解释器首先搜索具有该名称的 &lt;strong>Built-in module(内置模块)&lt;/strong>(内置模块可以用过 &lt;code>sys.builtin_module_names&lt;/code> 获取)，若没找到，则会在 &lt;strong>sys 内置模块中的 &lt;code>${path}&lt;/code> 数组变量&lt;/strong>下的目录列表中搜索名为 &lt;code>spam.py&lt;/code> 的文件（从第一个元素开始逐一搜索，找到后就不再找了）。&lt;/p>
&lt;blockquote>
&lt;p>这里面说的内置模块，属于&lt;a href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/Python%20%E8%A7%84%E8%8C%83%E4%B8%8E%E6%A0%87%E5%87%86%E5%BA%93/Python%20%E8%A7%84%E8%8C%83%E4%B8%8E%E6%A0%87%E5%87%86%E5%BA%93.md">Python 规范与标准库&lt;/a> 的一部分。这部分内置模块内嵌到解释器里面（也就是说无法在文件系统中找到与模块名相同的同名文件），它们给一些虽并非语言核心但却内嵌的操作提供接口，要么是为了效率，要么是给操作系统基础操作例如系统调入提供接口。 这些模块集是一个配置选项， 并且还依赖于底层的操作系统。 例如，&lt;a href="https://docs.python.org/zh-cn/3/library/winreg.html#module-winreg" title="winreg: Routines and objects for manipulating the Windows registry. (Windows)">&lt;code>winreg&lt;/code>&lt;/a> 模块只在 Windows 系统上提供。一个特别值得注意的模块 &lt;a href="https://docs.python.org/zh-cn/3/library/sys.html#module-sys" title="sys: Access system-specific parameters and functions.">&lt;code>sys&lt;/code>&lt;/a>，它被内嵌到每一个 Python 编译器中，&lt;strong>sys 模块是 CPython 非常重要的内置模块，也是很多功能的基础模块&lt;/strong>。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>&lt;code>${sys.path}&lt;/code> 变量是我们使用 Python 模块的最重要一环&lt;/strong>。通常来说，该变量的值来源于以下位置：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>运行 Python 代码文件所在的绝对路径&lt;/strong>&lt;/li>
&lt;li>&lt;strong>${PYTHONPATH} 环境变量指定的路径&lt;/strong>
&lt;ul>
&lt;li>这是一个手动指定的目录列表，类似于类 Unix 中的 &lt;code>$PATH&lt;/code> 变量，可以通过 &lt;code>os.path&lt;/code> 获取其值。&lt;/li>
&lt;li>可以使用 &lt;code>os.path.append()&lt;/code> 为 &lt;code>$PYTHONPATH&lt;/code> 变量添加新的目录条目以便导入想要的模块。也可以直接设置 Linux 系统中的 &lt;code>$PYTHONPATH&lt;/code> 变量。当项目大，需要对文件进行分类时，非常有用。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>编译、安装 Python 时设置的默认路径&lt;/strong>
&lt;ul>
&lt;li>官方文档的这个说法挺模糊的，详见下面 sys.path 列表生成逻辑中的详解。这些路径主要取决于 &lt;a href="#1.%E7%A1%AE%E8%AE%A4%E5%B9%B6%E7%94%9F%E6%88%90%20prefix">prefix&lt;/a> 的设置。&lt;/li>
&lt;li>按照惯例，通常包含：
&lt;ul>
&lt;li>Python 标准库保存路径。&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/3/library/site.html#module-site">site 模块&lt;/a>处理的第三方库保存路径。使用各种方式安装(比如 pip)的第三方库通常来说会存在 site-packages 目录中。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>上述三种路径在 Python 启动时被初始化。我们可以通过 Python 中的 &lt;code>${sys.path}&lt;/code> 数组变量查看这些路径。&lt;/p>
&lt;p>&lt;strong>注意：各个平台生成的 sys.path 的列表并不统一&lt;/strong>，具体原因详见 &lt;a href="#%E6%A8%A1%E5%9D%97%E7%AE%A1%E7%90%86%E6%B7%B7%E4%B9%B1%E8%AF%B4%E6%98%8E">模块管理混乱说明&lt;/a>&lt;/p>
&lt;h2 id="syspath-列表生成逻辑">sys.path 列表生成逻辑&lt;a class="td-heading-self-link" href="#syspath-%e5%88%97%e8%a1%a8%e7%94%9f%e6%88%90%e9%80%bb%e8%be%91" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.python.org/3/library/sys_path_init.html">官方文档，Python 标准库 - 导入模块 - sys.path 模块搜索路径初始化&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/3/library/site.html">官方文档，Python 标准库 - Python 运行时服务 - site—特定于 site 的配置&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/python/cpython/blob/3.11/Modules/getpath.py">源码，Moduels/getpath.py&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>如果说 &lt;code>${sys.path}&lt;/code> 是我们使用 Python 模块最重要的东西，那 &lt;strong>prefix(路径的前缀)&lt;/strong> 就是 &lt;code>${sys.path}&lt;/code> 这个变量最重要的东西。prefix 通常表示 &lt;code>${sys.prefix}&lt;/code> 与 &lt;code>${sys.exec_prefix}&lt;/code> 这两个变量。&lt;strong>prefix&lt;/strong> 的值来源于 &lt;strong>Python 解释器自身&lt;/strong>。&lt;/p>
&lt;p>我们可以在 CPyhon 源码 &lt;a href="https://github.com/python/cpython/blob/3.11/Modules/getpath.py">Modules/getpath.py&lt;/a> 查看在 Python 解释器启后生成 sys.path 的整体逻辑。这段代码会利用 &lt;a href="https://github.com/python/cpython/blob/3.11/configure#L571">configure&lt;/a> 与 &lt;a href="https://github.com/python/cpython/blob/3.11/Include/cpython/initconfig.h#L188">Include/cpython/initconfig.h&lt;/a>。经过如下几个步骤：&lt;/p>
&lt;ul>
&lt;li>PLATFORM CONSTANTS&lt;/li>
&lt;li>HELPER FUNCTIONS (note that we prefer C functions for performance)&lt;/li>
&lt;li>READ VARIABLES FROM config&lt;/li>
&lt;li>CALCULATE program_name&lt;/li>
&lt;li>&lt;strong>CALCULATE executable&lt;/strong> # 计算 executable 变量的值&lt;/li>
&lt;li>CALCULATE (default) home&lt;/li>
&lt;li>&lt;strong>READ pyvenv.cfg&lt;/strong> # 读取 pyvenv.cfg 文件，若读取到则说明这是一个 Python 虚拟环境&lt;/li>
&lt;li>CALCULATE base_executable, real_executable AND executable_dir&lt;/li>
&lt;li>DETECT _pth FILE&lt;/li>
&lt;li>CHECK FOR BUILD DIRECTORY&lt;/li>
&lt;li>&lt;strong>CALCULATE prefix AND exec_prefix&lt;/strong> # 计算 prefix 和 exec_prefix 变量的值。&lt;/li>
&lt;li>&lt;strong>UPDATE pythonpath (sys.path)&lt;/strong> #&lt;/li>
&lt;li>&lt;strong>POSIX prefix/exec_prefix QUIRKS&lt;/strong> #&lt;/li>
&lt;li>&lt;strong>SET pythonpath FROM _PTH FILE&lt;/strong> #&lt;/li>
&lt;li>&lt;strong>UPDATE config FROM CALCULATED VALUES&lt;/strong> # 将计算后的值赋值给相关变量&lt;/li>
&lt;/ul>
&lt;p>最终，Python 解释器启动后，将为如下几个变量赋值&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&lt;code>sys.executable&lt;/code>&lt;/strong> # Python 解释器的路径。&lt;/li>
&lt;li>&lt;strong>&lt;code>sys.prefix&lt;/code>&lt;/strong> # Python 标准模块(标准库)目录前缀。默认通过运行的 python 解释器生成出来。可以用过 &lt;code>${PYTHONHOME}&lt;/code> 变量覆盖初始值&lt;/li>
&lt;li>&lt;strong>&lt;code>sys.exec_prefix&lt;/code>&lt;/strong> # Python 扩展模块目录前缀。可以用过 &lt;code>${PYTHONHOME}&lt;/code> 变量覆盖初始值&lt;/li>
&lt;li>等等&amp;hellip;&amp;hellip;&lt;/li>
&lt;li>&lt;strong>&lt;code>sys.path&lt;/code>&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>下面我笔记中关于 sys.path 的生成逻辑中，只做简单描述，详细生成逻辑就像&lt;a href="https://stackoverflow.com/questions/897792/where-is-pythons-sys-path-initialized-from">这里&lt;/a>说的，跟论文一样，而且每个平台编译出来的 Python 解释器的设置也不一样，所以最后路径也不一样，由于 Python 复杂的自推导逻辑导致也不好总结普适性，所以，可以直接参考下文&lt;a href="#sys.path%20%E6%80%BB%E7%BB%93">sys.path 总结&lt;/a>中的各平台示例&lt;/p>
&lt;h3 id="1确认并生成-prefix">1.确认并生成 prefix&lt;a class="td-heading-self-link" href="#1%e7%a1%ae%e8%ae%a4%e5%b9%b6%e7%94%9f%e6%88%90-prefix" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>这个行为准确描述应该是确认 prefix 的值之后，生成 &lt;code>${sys.prefix}&lt;/code> 和 &lt;code>${sys.exec_prefix}&lt;/code> 变量的值，这两个变量，通常用在标准库和第三方库的保存路径中，作为路径的前缀。&lt;/p>
&lt;/blockquote>
&lt;p>在我们运行 Python 解释器时，prefix 的值可以通过如下两种方式被设置：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>一、若 &lt;code>${PYTHONHOME}&lt;/code> 环境变量不为空，则使用该变量的值&lt;/strong>&lt;/li>
&lt;li>&lt;strong>二、若 &lt;code>${PYTHONHOME}&lt;/code> 环境变量为空，则使用在构建 Python 解释器时设定的默认值。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>！！！重点来了！！！&lt;/strong> 设置好 prefix 之后，需要通过 &lt;strong>Landmark(地标)&lt;/strong> 文件确认 prefix 的值是否可用。Python 在 prefix 下找到某些 landmark，才说明 prefix 是可用的。因为这些 Landmark 所在的目录中包含了正常运行 Python 所需的条件（比如标准库等）。如果没找到这些，那么 Python 不应该正常启动，否则就算运行起来也会因为缺少各种依赖库导致无法使用。&lt;/p>
&lt;p>下面将会对 prefix 的确认进行简单的分布概述。参考 Python 解释器运行后的路径生成&lt;a href="https://github.com/python/cpython/blob/3.11/Modules/getpath.py#L176">源码&lt;/a>&lt;/p>
&lt;p>第一步，声明下列几个 landmark 的：（下面 &lt;code>{VERSION_MAJOR}&lt;/code> 和 &lt;code>{VERSION_MINOR}&lt;/code> 分别是 Python 的大版本号和小版本号，比如 Python3.10、Python310）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">os_name&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;posix&amp;#39;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">or&lt;/span> &lt;span style="color:#000">os_name&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;darwin&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">BUILD_LANDMARK&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;Modules/Setup.local&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">STDLIB_LANDMARKS&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">f&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;&lt;/span>&lt;span style="color:#4e9a06">{&lt;/span>&lt;span style="color:#000">STDLIB_SUBDIR&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06">/os.py&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">f&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;&lt;/span>&lt;span style="color:#4e9a06">{&lt;/span>&lt;span style="color:#000">STDLIB_SUBDIR&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06">/os.pyc&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">PLATSTDLIB_LANDMARK&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">f&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;&lt;/span>&lt;span style="color:#4e9a06">{&lt;/span>&lt;span style="color:#000">platlibdir&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06">/python&lt;/span>&lt;span style="color:#4e9a06">{&lt;/span>&lt;span style="color:#000">VERSION_MAJOR&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06">.&lt;/span>&lt;span style="color:#4e9a06">{&lt;/span>&lt;span style="color:#000">VERSION_MINOR&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06">/lib-dynload&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">BUILDSTDLIB_LANDMARKS&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;Lib/os.py&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">VENV_LANDMARK&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;pyvenv.cfg&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">ZIP_LANDMARK&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">f&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;&lt;/span>&lt;span style="color:#4e9a06">{&lt;/span>&lt;span style="color:#000">platlibdir&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06">/python&lt;/span>&lt;span style="color:#4e9a06">{&lt;/span>&lt;span style="color:#000">VERSION_MAJOR&lt;/span>&lt;span style="color:#4e9a06">}{&lt;/span>&lt;span style="color:#000">VERSION_MINOR&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06">.zip&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">elif&lt;/span> &lt;span style="color:#000">os_name&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;nt&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">BUILD_LANDMARK&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">f&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;&lt;/span>&lt;span style="color:#4e9a06">{&lt;/span>&lt;span style="color:#000">VPATH&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06">\\&lt;/span>&lt;span style="color:#4e9a06">Modules&lt;/span>&lt;span style="color:#4e9a06">\\&lt;/span>&lt;span style="color:#4e9a06">Setup.local&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">STDLIB_LANDMARKS&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">f&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;&lt;/span>&lt;span style="color:#4e9a06">{&lt;/span>&lt;span style="color:#000">STDLIB_SUBDIR&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06">\\&lt;/span>&lt;span style="color:#4e9a06">os.py&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">f&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;&lt;/span>&lt;span style="color:#4e9a06">{&lt;/span>&lt;span style="color:#000">STDLIB_SUBDIR&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06">\\&lt;/span>&lt;span style="color:#4e9a06">os.pyc&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">PLATSTDLIB_LANDMARK&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">f&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;&lt;/span>&lt;span style="color:#4e9a06">{&lt;/span>&lt;span style="color:#000">platlibdir&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">BUILDSTDLIB_LANDMARKS&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;Lib&lt;/span>&lt;span style="color:#4e9a06">\\&lt;/span>&lt;span style="color:#4e9a06">os.py&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">VENV_LANDMARK&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;pyvenv.cfg&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">ZIP_LANDMARK&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">f&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;python&lt;/span>&lt;span style="color:#4e9a06">{&lt;/span>&lt;span style="color:#000">VERSION_MAJOR&lt;/span>&lt;span style="color:#4e9a06">}{&lt;/span>&lt;span style="color:#000">VERSION_MINOR&lt;/span>&lt;span style="color:#4e9a06">}{&lt;/span>&lt;span style="color:#000">PYDEBUGEXT&lt;/span> &lt;span style="color:#204a87;font-weight:bold">or&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06">.zip&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>第二步，将 prefix 与声明的 landmark 的路径拼接得出 landmark 的绝对路径。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>os.py 文件&lt;/strong> # 标准库 landmark，os.py 文件所在目录就是标准库目录。
&lt;ul>
&lt;li>Windows 中，默认在 &lt;code>${prefix}/Lib/os.py&lt;/code>&lt;/li>
&lt;li>Linux 中，默认在 &lt;code>${prefix}/lib/python${VERSION_MAJOR}.${VERSION_MINOR}/os.py&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>lib-dynload/ 目录&lt;/strong> # 未知
&lt;ul>
&lt;li>Windows 中，没找到该目录&lt;/li>
&lt;li>Ubuntu 中，默认在 &lt;code>${prefix}/lib/python${VERSION_MAJOR}.${VERSION_MINOR}/lib-dynload/&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>python${XY}.zip 文件&lt;/strong> # ZIP landmark，zip 文件所在目录就是 prefix 目录
&lt;ul>
&lt;li>Windows 中，默认在&lt;code>${prefix}/python${VERSION_MAJOR}${VERSION_MINOR}.zip&lt;/code>&lt;/li>
&lt;li>Ubunut 中，默认在 &lt;code>${prefix}/python${VERSION_MAJOR}${VERSION_MINOR}.zip&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>等等&amp;hellip;&amp;hellip;&lt;/li>
&lt;/ul>
&lt;p>第三步，Python 解释器将会逐一检查这些 landmark 的绝对路径。&lt;/p>
&lt;ul>
&lt;li>这里有点要注意：若设置了 PYTHONHOME 的话，则先寻找由 PYTHONHOME 拼接的 landmark 绝对路径，若找不到 landmark 文件的话，还会去安装 Python 时设定的 prefix 默认值中再寻找一遍 landmark 文件。&lt;/li>
&lt;li>若某些必须的 landmark 未找到的话，Python 解释器将会启动失败并报错。&lt;/li>
&lt;li>假如我们将 os.py 文件移动走，或者设置一个没有 os.py 存在的 &lt;code>${PYTHONHOME}&lt;/code>，那么 Python 解释器都是启动不起来的，假如现在设置 &lt;code>export PYTHONHOME=&amp;quot;/error_python_home&amp;quot;&lt;/code>，Python 将会报错：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># export PYTHONHOME=&amp;#34;/error_python_home&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># python3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Python path configuration:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ......
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Fatal Python error: init_fs_encoding: failed to get the Python codec of the filesystem encoding
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Python runtime state: core initialized
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ModuleNotFoundError: No module named &lt;span style="color:#4e9a06">&amp;#39;encodings&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Current thread 0x00007fe5a7de31c0 &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>most recent call first&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;no Python frame&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>第四步，这些 landmark 定位后，prefix 即表示可用，此时为 sys.prefix 和 sys.exec_prefix 两个变量赋值。&lt;/p>
&lt;blockquote>
&lt;p>到这里就有很大的疑惑，为什么 Ubuntu、CentOS 的 Python 的可执行文件，即.Python 解释器在 /usr/bin/ 目录下，但是生成的 prefix 却是 /usr 呢？&lt;/p>
&lt;p>在使用源码构建 Python 解释器之前，会执行 `./configure &amp;ndash;prefix=/usr 命令，其中 &amp;ndash;prefix 就是设置 prefix 的默认值。其实 CPython 官方在 configure 文件中为 prefix 设置了 /usr/local 这个默认值。。。但是。。。&lt;/p>
&lt;p>各种 Linux 发行版的 Python 都在生成自己的路径，所以 Python 的 prefix 混乱根源也在这。这时 Python 的官方文档和各个发行版实际就对不上，给初学者造成很大困扰。。o(╯□╰)o。。&lt;/p>
&lt;p>所以，就算 Python 解释器在 /usr/bin 目录下，只要 prefix 为 /usr，那么根据 prefix 拼接出的各种 sys.path 路径，也会在 /usr/lib/PythonX.Y 目录下，这从&lt;a href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/Python%20%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/Python%20%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8.md">Python 环境安装与使用&lt;/a> 中的自定义 python 部分可以看到实际改变情况。&lt;/p>
&lt;p>也许是出于复用 /usr/lib 目录的目的把，毕竟 python 属于系统级别依赖的程序，并且 Python 的模块大多是 ${prefxi}/lib/ 目录的，把 /usr 当做 prefix 的话，可以统一管理所有 lib。&lt;/p>
&lt;p>而 Windows 中，Python 并不是系统自带的，可以手动安装，并且安装时可以指定安装目录，这时，这个安装目录就是 prefix。&lt;/p>
&lt;/blockquote>
&lt;h4 id="prefix-结果示例">prefix 结果示例&lt;a class="td-heading-self-link" href="#prefix-%e7%bb%93%e6%9e%9c%e7%a4%ba%e4%be%8b" aria-label="Heading self-link">&lt;/a>&lt;/h4>
&lt;p>假如 Python 解释器的路径&lt;/p>
&lt;ul>
&lt;li>在 Ubuntu 中是 &lt;code>/usr/bin/python3&lt;/code>&lt;/li>
&lt;li>在 Windows 中是 &lt;code>D:\Tools\Python\Python310\python.exe&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Ubuntu 生成的值为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">sys&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">executable&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&amp;#39;/usr/bin/python3&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">sys&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">prefix&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&amp;#39;/usr&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">sys&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">exec_prefix&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&amp;#39;/usr&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">sys&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">platlibdir&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&amp;#39;lib&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Windows 生成的值为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">sys&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">executable&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&amp;#39;D:&lt;/span>&lt;span style="color:#4e9a06">\\&lt;/span>&lt;span style="color:#4e9a06">Tools&lt;/span>&lt;span style="color:#4e9a06">\\&lt;/span>&lt;span style="color:#4e9a06">Python&lt;/span>&lt;span style="color:#4e9a06">\\&lt;/span>&lt;span style="color:#4e9a06">Python310&lt;/span>&lt;span style="color:#4e9a06">\\&lt;/span>&lt;span style="color:#4e9a06">python.exe&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">sys&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">prefix&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&amp;#39;D:&lt;/span>&lt;span style="color:#4e9a06">\\&lt;/span>&lt;span style="color:#4e9a06">Tools&lt;/span>&lt;span style="color:#4e9a06">\\&lt;/span>&lt;span style="color:#4e9a06">Python&lt;/span>&lt;span style="color:#4e9a06">\\&lt;/span>&lt;span style="color:#4e9a06">Python310&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">sys&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">exec_prefix&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&amp;#39;D:&lt;/span>&lt;span style="color:#4e9a06">\\&lt;/span>&lt;span style="color:#4e9a06">Tools&lt;/span>&lt;span style="color:#4e9a06">\\&lt;/span>&lt;span style="color:#4e9a06">Python&lt;/span>&lt;span style="color:#4e9a06">\\&lt;/span>&lt;span style="color:#4e9a06">Python310&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">sys&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">platlibdir&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&amp;#39;DLLs&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="2添加要运行的-python-文件所在的路径">2.添加要运行的 Python 文件所在的路径&lt;a class="td-heading-self-link" href="#2%e6%b7%bb%e5%8a%a0%e8%a6%81%e8%bf%90%e8%a1%8c%e7%9a%84-python-%e6%96%87%e4%bb%b6%e6%89%80%e5%9c%a8%e7%9a%84%e8%b7%af%e5%be%84" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>添加运行 Python 代码文件所在的绝对路径，若直接运行的 Python 解释器，则 &lt;code>$sys.path&lt;/code> 的第一个元素为空&lt;/p>
&lt;ul>
&lt;li>在下面的 &lt;a href="#Ubuntu%20%E7%A4%BA%E4%BE%8B">Ubuntu 示例&lt;/a>中，&lt;code>sys.path&lt;/code> 的第一个元素（&lt;code>/root/scripts&lt;/code>）是 module-path-demo.py 文件所在路径，即执行的 Python 代码文件所在路径，如果不是运行的 Python 代码文件，则第一个元素为空。每当运行一个 Python 文件时，就相当于默认执行了 &lt;code>sys.path.append(&amp;quot;文件所在绝对路径&amp;quot;)&lt;/code> 代码。&lt;/li>
&lt;/ul>
&lt;h3 id="3添加-pythonpath-环境变量设置的路径">3.添加 PYTHONPATH 环境变量设置的路径&lt;a class="td-heading-self-link" href="#3%e6%b7%bb%e5%8a%a0-pythonpath-%e7%8e%af%e5%a2%83%e5%8f%98%e9%87%8f%e8%ae%be%e7%bd%ae%e7%9a%84%e8%b7%af%e5%be%84" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>添加 &lt;code>${PYTHONPATH}&lt;/code> 变量中的值&lt;/p>
&lt;h3 id="4添加标准库的存放路径">4.添加标准库的存放路径&lt;a class="td-heading-self-link" href="#4%e6%b7%bb%e5%8a%a0%e6%a0%87%e5%87%86%e5%ba%93%e7%9a%84%e5%ad%98%e6%94%be%e8%b7%af%e5%be%84" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>添加包含 Python 标准模块以及这些模块所依赖的任何扩展模块的文件和目录，&lt;strong>这些路径是很重要的，包含了 Python 解释器启动成功所依赖的模块&lt;/strong>。通常包含如下文件和目录：&lt;/p>
&lt;ul>
&lt;li>&lt;code>${sys.prefix}/lib/python${VERSION_MAJOR}${VERSION_MINOR}.zip&lt;/code> # Python 库文件的归档文件，其中包含了许多 Python 标准库和已安装的第三方库的模块。注意：即使该文件不存在，通常也会添加默认值。该文件的大小版本号之间没有点。&lt;/li>
&lt;li>&lt;code>${sys.prefix}/lib/python${VERSION_MAJOR}.${VERSION_MINOR}/&lt;/code> # 标准库保存路径&lt;/li>
&lt;li>&lt;code>${sys.prefix}/lib/python${VERSION_MAJOR}.${VERSION_MINOR}/lib-dynload/&lt;/code> # 使用 C 语言编写的模块的存放路径。&lt;/li>
&lt;/ul>
&lt;p>这里的扩展模块是指用 C 或 C++ 编写的模块，使用 Python 的 C API 与核心和用户代码交互。并不是指 Python 的第三方模块&lt;/p>
&lt;ul>
&lt;li>Windows 上的扩展模块是后缀名为 &lt;code>.pyd&lt;/code> 的文件&lt;/li>
&lt;li>Linux 上的扩展模块是后缀名为 &lt;code>.so&lt;/code> 的文件&lt;/li>
&lt;/ul>
&lt;p>此时通过 &lt;code>python -S&lt;/code> 命令在运行解释器时不自动加载 site 模块，则会看到如下路径：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">export&lt;/span> &lt;span style="color:#000">PYTHONPATH&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;/pythonpath-demo&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">~&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># python3 -S&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Python&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3.10.6&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">main&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">Nov&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">14&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2022&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">16&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">14&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">sys&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">sys&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">path&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;/pythonpath-demo&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;/usr/lib/python310.zip&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;/usr/lib/python3.10&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;/usr/lib/python3.10/lib-dynload&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中前两个元素是基本路径，后面三个元素是 prefix 相关的路径。&lt;/p>
&lt;h3 id="5添加第三方库的存放路径">5.添加第三方库的存放路径&lt;a class="td-heading-self-link" href="#5%e6%b7%bb%e5%8a%a0%e7%ac%ac%e4%b8%89%e6%96%b9%e5%ba%93%e7%9a%84%e5%ad%98%e6%94%be%e8%b7%af%e5%be%84" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>Python 的第三方模块通常保存在由 site 模块生成的目录中，该目录名称通常为 site-packages。但是有的系统，比如 Ubuntu，会将 site-packages 目录的名称改为 dist-packages。site 模块在 Python 解释器启动时自动调用，并将生成目录添加到 sys.path 列表中。&lt;/p>
&lt;p>&lt;strong>第一、调用 site 模块的 &lt;code>main()&lt;/code> 函数将 &lt;code>${sys.prefix}/lib/site-package/&lt;/code> 目录添加到 &lt;code>sys.path&lt;/code> 变量中&lt;/strong>。&lt;code>site.main()&lt;/code> 函数从 Python3.3 版本开始被自动调用，除非运行 Python 解释器时添加 -S 标志。&lt;/p>
&lt;p>Ubuntu 效果如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">~&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># python3 -S&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Python&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3.10.6&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">main&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">Nov&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">14&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2022&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">16&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">14&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">sys&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span>&lt;span style="color:#000">site&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">sys&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">path&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;/usr/lib/python310.zip&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;/usr/lib/python3.10&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;/usr/lib/python3.10/lib-dynload&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">site&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">main&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">sys&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">path&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;/root&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;/usr/lib/python310.zip&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;/usr/lib/python3.10&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;/usr/lib/python3.10/lib-dynload&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;/usr/local/lib/python3.10/dist-packages&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;/usr/lib/python3/dist-packages&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在这个示例中，我们可以看到 site-packages 目录跟官方文档的说明并不一样是吧？在 &lt;a href="#%E6%A8%A1%E5%9D%97%E7%AE%A1%E7%90%86%E6%B7%B7%E4%B9%B1%E8%AF%B4%E6%98%8E">模块管理混乱说明&lt;/a> 中详细说明&lt;/p>
&lt;p>&lt;strong>第二、site 模块在将全局的 site 目录添加前，会先添加用户 site 相关的模块搜索路径&lt;/strong>。如果 site 模块中的 &lt;a href="https://docs.python.org/3/library/site.html#site.ENABLE_USER_SITE">ENABLE_USER_SITE&lt;/a> 变量为真，且 USER_SITE 定义的文件存在，则会将 USER_SITE 添加到 sys.path 中，用户 site 不再依赖 prefix，取而代之的是 &lt;code>site.USER_BASE&lt;/code>，&lt;code>site.USER_BASE&lt;/code> 的值通常为 &lt;code>~/.local/&lt;/code>，生成的 &lt;code>site.USER_SITE&lt;/code> 的值通常是 &lt;code>site.USER_BASE/lib/python${X.Y}/site-packages&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">site&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">USER_SITE&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&amp;#39;/root/.local/lib/python3.6/site-packages&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">site&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">USER_BASE&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&amp;#39;/root/.local&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># python3 -m site&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sys.path &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#39;/root&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#39;/usr/lib/python310.zip&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#39;/usr/lib/python3.10&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#39;/usr/lib/python3.10/lib-dynload&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#39;/usr/local/lib/python3.10/dist-packages&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#39;/usr/lib/python3/dist-packages&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>USER_BASE: &lt;span style="color:#4e9a06">&amp;#39;/root/.local&amp;#39;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>doesn&lt;span style="color:#4e9a06">&amp;#39;t exist)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">USER_SITE: &amp;#39;&lt;/span>/root/.local/lib/python3.10/site-packages&lt;span style="color:#4e9a06">&amp;#39; (doesn&amp;#39;&lt;/span>t exist&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ENABLE_USER_SITE: True
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># mkdir -p /root/.local/lib/python3.10/site-packages&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># python3 -m site&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sys.path &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#39;/root&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#39;/usr/lib/python310.zip&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#39;/usr/lib/python3.10&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#39;/usr/lib/python3.10/lib-dynload&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#39;/root/.local/lib/python3.10/site-packages&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#39;/usr/local/lib/python3.10/dist-packages&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#39;/usr/lib/python3/dist-packages&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>USER_BASE: &lt;span style="color:#4e9a06">&amp;#39;/root/.local&amp;#39;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>exists&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>USER_SITE: &lt;span style="color:#4e9a06">&amp;#39;/root/.local/lib/python3.10/site-packages&amp;#39;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>exists&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ENABLE_USER_SITE: True
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>最后，尝试导入名为 usercustomize 与 sitecustomize 模块&lt;/strong>。该模块由用户自行编写代码实现，以添加自己的路径。&lt;/p>
&lt;h2 id="syspath-总结">sys.path 总结&lt;a class="td-heading-self-link" href="#syspath-%e6%80%bb%e7%bb%93" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>总的来说，与 prefix 相关的路径还是有一定规律的，通常都是在 &lt;code>${prefix}/lib/&lt;/code> 目录下，官方文档通常都会省略 prefix，直接用 lib/、Lib/ 等作为开头来描述特定文件的位置。&lt;/p>
&lt;blockquote>
&lt;p>注意：下面 &lt;code>{VERSION_MAJOR}&lt;/code> 和 &lt;code>{VERSION_MINOR}&lt;/code> 分别是 Python 的大版本号和小版本号，比如 Python3.10、Python310&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;strong>&lt;code>${PWD}&lt;/code>&lt;/strong> # 当前工作目录&lt;/li>
&lt;li>${PYTHONPATH} # 手动添加的目录。&lt;/li>
&lt;li>&lt;strong>&lt;code>${sys.prefix}/lib/python${VERSION_MAJOR}${VERSION_MINOR}.zip&lt;/code>&lt;/strong> # Python 库文件的归档文件，其中包含了许多 Python 标准库和已安装的第三方库的模块。&lt;/li>
&lt;li>&lt;strong>&lt;code>${sys.prefix}/lib/python${VERSION_MAJOR}.${VERSION_MINOR}/&lt;/code>&lt;/strong> # 标准库保存路径。没有这个的话 Python 解释器无法正常运行&lt;/li>
&lt;li>&lt;strong>&lt;code>${sys.prefix}/lib/python${VERSION_MAJOR}.${VERSION_MINOR}/lib-dynload/&lt;/code>&lt;/strong> # 使用 C 语言编写的模块的存放路径。&lt;/li>
&lt;li>&lt;strong>&lt;code>${sys.prefix}/lib/python${VERSION_MAJOR}.${VERSION_MINOR}/sist-packages/&lt;/code>&lt;/strong> # 第三方库保存路径。该目录在 Ubuntu 系统中名称为 dist-packages&lt;/li>
&lt;li>&lt;strong>&lt;code>${site.USER_SITE}&lt;/code>&lt;/strong> # 启动用户 site 后，保存第三方库的路径。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>注意：从这里可以看到，不同 Python 版本的三方库路径不同，如果把 Python 从 3.8 升级到 3.9，那么之前装的三方库都没法用了。当然可以整个文件夹都拷贝过去，或者添加统一的 PYTHONPATH 路径大部分情况不会出问题。&lt;/p>
&lt;/blockquote>
&lt;p>最后生成的 &lt;code>sys.path&lt;/code> 具有类似如下的值：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">sys&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">sys&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">path&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;/usr/lib/python310.zip&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;/usr/lib/python3.10&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;/usr/lib/python3.10/lib-dynload&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;/usr/local/lib/python3.10/dist-packages&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;/usr/lib/python3/dist-packages&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>到这里可以发现，&lt;strong>关于包路径搜索最重要的就是这个 &lt;code>${sys.prefix}&lt;/code> 路径前缀&lt;/strong>，而这个值是由 Python 解释器生成出来的。&lt;/p>
&lt;p>若 &lt;code>sys.path&lt;/code> 中的所有目录都无法找到想要导入的模块，将会出现如下报错：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>ModuleNotFoundError: No module named &lt;span style="color:#4e9a06">&amp;#39;XXXXX&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="ubuntu-示例">Ubuntu 示例&lt;a class="td-heading-self-link" href="#ubuntu-%e7%a4%ba%e4%be%8b" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>&lt;code>${sys.prefix}/lib/python${X.Y}/site-packages/&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># cat module-path-demo.py&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>import sys
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>sys.path&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>sys.prefix&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>sys.exec_prefix&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>sys.executable&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># python3 module-path-demo.py&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;/root/scripts&amp;#39;&lt;/span>, &lt;span style="color:#4e9a06">&amp;#39;/usr/lib/python310.zip&amp;#39;&lt;/span>, &lt;span style="color:#4e9a06">&amp;#39;/usr/lib/python3.10&amp;#39;&lt;/span>, &lt;span style="color:#4e9a06">&amp;#39;/usr/lib/python3.10/lib-dynload&amp;#39;&lt;/span>, &lt;span style="color:#4e9a06">&amp;#39;/usr/local/lib/python3.10/dist-packages&amp;#39;&lt;/span>, &lt;span style="color:#4e9a06">&amp;#39;/usr/lib/python3/dist-packages&amp;#39;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/usr
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/usr
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/usr/bin/python3
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="centos-示例">CentOS 示例&lt;a class="td-heading-self-link" href="#centos-%e7%a4%ba%e4%be%8b" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>TODO&lt;/p>
&lt;h2 id="模块关联的可执行文件">模块关联的可执行文件&lt;a class="td-heading-self-link" href="#%e6%a8%a1%e5%9d%97%e5%85%b3%e8%81%94%e7%9a%84%e5%8f%af%e6%89%a7%e8%a1%8c%e6%96%87%e4%bb%b6" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>部分模块具有可执行文件，可以当做命令使用，在不同平台上，会在不同位置生成可执行文件&lt;/p>
&lt;p>Windows&lt;/p>
&lt;ul>
&lt;li>&lt;strong>${sys.prefix}/Scripts/&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>Ubuntu&lt;/p>
&lt;ul>
&lt;li>&lt;strong>/usr/local/bin/&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h1 id="模块管理混乱说明">模块管理混乱说明&lt;a class="td-heading-self-link" href="#%e6%a8%a1%e5%9d%97%e7%ae%a1%e7%90%86%e6%b7%b7%e4%b9%b1%e8%af%b4%e6%98%8e" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>在 &lt;a href="https://mp.weixin.qq.com/s/i5fWKWs-D9ZphDqhtYoj9Q">公众号-OSC开源社区，Flask之父凭一己之力击败各种GPT，称Python包管理比LLM更火热&lt;/a> 这篇文件中描述了 Flask 框架作者 Armin 画了一张图来描述他对 Python 包管理现状的感受，意思就是由于缺乏统一的标准，因此诞生了满足不同需求和场景的许多不同工具——不过每个抱着“统一”初心的标准最后都是适得其反。&lt;/p>
&lt;p>Python 的模块管理非常混乱和复杂，不像 Go 只需要指定 GOPATH 变量之后，所有安装的依赖库都会存放到 GOPATH 目录下。上述三种路径如果说最像 GOPATH 的，那应该是安装 Python 是默认值中的 PYTHONPATH 或者 prefix 变量了。&lt;/p>
&lt;p>并且，&lt;strong>各个发行版会修改 Python 的代码，这就导致编译后的很多默认值并不统一&lt;/strong>，下面我举几个例子来说明&lt;/p>
&lt;h2 id="内置模块的差异">内置模块的差异&lt;a class="td-heading-self-link" href="#%e5%86%85%e7%bd%ae%e6%a8%a1%e5%9d%97%e7%9a%84%e5%b7%ae%e5%bc%82" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>site 模块向 sys.path 添加的路径是非常混乱。不同的发行版，生成的路径也千奇百怪。而且不一定只生成一个 site-packages 目录&lt;/p>
&lt;p>主要差异可以在 site.py 文件中关于 &lt;code>def getsitepackages(prefixes=None)&lt;/code> 函数看到&lt;/p>
&lt;p>3.10 版本 CPython 的原始 &lt;a href="https://github.com/python/cpython/blob/3.10/Lib/site.py">site.py&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">os&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">sep&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;/&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">libdir&lt;/span> &lt;span style="color:#204a87;font-weight:bold">in&lt;/span> &lt;span style="color:#000">libdirs&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">path&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">os&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">path&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">join&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">prefix&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">libdir&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;python&lt;/span>&lt;span style="color:#4e9a06">%d&lt;/span>&lt;span style="color:#4e9a06">.&lt;/span>&lt;span style="color:#4e9a06">%d&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">%&lt;/span> &lt;span style="color:#000">sys&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">version_info&lt;/span>&lt;span style="color:#000;font-weight:bold">[:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;site-packages&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">sitepackages&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">append&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">path&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">else&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">sitepackages&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">append&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">prefix&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">libdir&lt;/span> &lt;span style="color:#204a87;font-weight:bold">in&lt;/span> &lt;span style="color:#000">libdirs&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">path&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">os&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">path&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">join&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">prefix&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">libdir&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;site-packages&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">sitepackages&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">append&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">path&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Ubuntu 中的 site.py&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">os&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">sep&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;/&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">is_virtual_environment&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">sitepackages&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">append&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">os&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">path&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">join&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">prefix&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;lib&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;python&lt;/span>&lt;span style="color:#4e9a06">%d&lt;/span>&lt;span style="color:#4e9a06">.&lt;/span>&lt;span style="color:#4e9a06">%d&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">%&lt;/span> &lt;span style="color:#000">sys&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">version_info&lt;/span>&lt;span style="color:#000;font-weight:bold">[:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;site-packages&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">sitepackages&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">append&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">os&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">path&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">join&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">prefix&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;local/lib&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;python&lt;/span>&lt;span style="color:#4e9a06">%d&lt;/span>&lt;span style="color:#4e9a06">.&lt;/span>&lt;span style="color:#4e9a06">%d&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">%&lt;/span> &lt;span style="color:#000">sys&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">version_info&lt;/span>&lt;span style="color:#000;font-weight:bold">[:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;dist-packages&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">sitepackages&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">append&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">os&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">path&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">join&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">prefix&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;lib&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;python3&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;dist-packages&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic"># this one is deprecated for Debian&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">libdir&lt;/span> &lt;span style="color:#204a87;font-weight:bold">in&lt;/span> &lt;span style="color:#000">libdirs&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">path&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">os&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">path&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">join&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">prefix&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">libdir&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;python&lt;/span>&lt;span style="color:#4e9a06">%d&lt;/span>&lt;span style="color:#4e9a06">.&lt;/span>&lt;span style="color:#4e9a06">%d&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">%&lt;/span> &lt;span style="color:#000">sys&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">version_info&lt;/span>&lt;span style="color:#000;font-weight:bold">[:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;dist-packages&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">sitepackages&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">append&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">path&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">else&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">sitepackages&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">append&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">prefix&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">libdir&lt;/span> &lt;span style="color:#204a87;font-weight:bold">in&lt;/span> &lt;span style="color:#000">libdirs&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">path&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">os&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">path&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">join&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">prefix&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">libdir&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;site-packages&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">sitepackages&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">append&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">path&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Rocky 的 site.py&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">os&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">sep&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;/&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">sitepackages&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">append&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">os&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">path&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">join&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">prefix&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;lib64&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;python&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#000">sys&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">version&lt;/span>&lt;span style="color:#000;font-weight:bold">[:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;site-packages&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">sitepackages&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">append&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">os&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">path&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">join&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">prefix&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;lib&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;python&lt;/span>&lt;span style="color:#4e9a06">%d&lt;/span>&lt;span style="color:#4e9a06">.&lt;/span>&lt;span style="color:#4e9a06">%d&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">%&lt;/span> &lt;span style="color:#000">sys&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">version_info&lt;/span>&lt;span style="color:#000;font-weight:bold">[:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;site-packages&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">else&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">sitepackages&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">append&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">prefix&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">sitepackages&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">append&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">os&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">path&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">join&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">prefix&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;lib64&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;site-packages&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">sitepackages&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">append&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">os&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">path&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">join&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">prefix&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;lib&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;site-packages&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Windows 的 site.py&lt;/p>
&lt;p>与 CPython 的原始 &lt;a href="https://github.com/python/cpython/blob/3.10/Lib/site.py">site.py&lt;/a> 代码保持一致&lt;/p>
&lt;p>上面的例子中，Ubuntu 的 dist-packages 应该是 site-packages 才对，为啥这么改搞不懂为啥。。。o(╯□╰)o。。。对于 CentOS，则除了 lib，还会有一个 lib64，也是搞不懂为啥。。。o(╯□╰)o。。。&lt;/p>
&lt;h2 id="关于-python-包的在线浏览网站">关于 Python 包的在线浏览网站&lt;a class="td-heading-self-link" href="#%e5%85%b3%e4%ba%8e-python-%e5%8c%85%e7%9a%84%e5%9c%a8%e7%ba%bf%e6%b5%8f%e8%a7%88%e7%bd%91%e7%ab%99" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Python 好像没有像 &lt;a href="https://pkg.go.dev/">Go Package&lt;/a> 类似的网站&lt;/p>
&lt;p>&lt;strong>Python Package Index(PyPI)&lt;/strong> 是 Python 编程语言的软件存储库。但是内容非常少，只是提供了包的简介、版本、网站连接等信息。&lt;/p>
&lt;p>问了问 NewBing 之后， &lt;a href="https://readthedocs.org/search/?q=python+package">Read the Docs&lt;/a> 这个网站可能还有点好内容，下面是完整的回答：&lt;/p>
&lt;p>Python 有很多不同的网站可以查看各种包的信息，比如：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://pypi.org/">PyPI&lt;/a>：Python 包索引，可以搜索、安装和发布 Python 软件包。&lt;/li>
&lt;li>&lt;a href="https://packaging.python.org/en/latest/tutorials/packaging-projects/">Python Package Index&lt;/a>：Python 打包用户指南，可以教您如何打包和分发 Python 项目。&lt;/li>
&lt;li>&lt;a href="https://stackoverflow.com/questions/tagged/python">Stack Overflow&lt;/a>：一个编程问答网站，可以找到关于 Python 包的问题和答案。&lt;/li>
&lt;li>&lt;a href="https://github.com/search?q=python+package">GitHub&lt;/a>：一个代码托管平台，可以浏览和下载 Python 包的源代码。&lt;/li>
&lt;/ul>
&lt;p>如果您想要像 go package 网站那样，可以直接在网页上看到 Python 包的类型、函数等文档，您可以试试以下几个网站：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://readthedocs.org/search/?q=python+package">Read the Docs&lt;/a>：一个文档托管平台，可以查看很多 Python 包的在线文档。&lt;/li>
&lt;li>&lt;a href="https://pymotw.com/3/">Python Module of the Week&lt;/a>：一个网站，可以学习 Python 标准库中的模块的用法和示例。&lt;/li>
&lt;li>&lt;a href="https://awesome-python.com/">Awesome Python&lt;/a>：一个网站，可以发现一些优秀的 Python 包和资源。&lt;/li>
&lt;/ul>
&lt;p>[1]: &lt;a href="https://stackoverflow.com/questions/122327/how-do-i-find-the-location-of-my-python-site-packages-directory/">How do I find the location of my Python site-packages directory?&lt;/a>
[2]: &lt;a href="https://stackoverflow.com/questions/31384639/what-is-pythons-site-packages-directory">What is python&amp;rsquo;s site-packages directory? - Stack Overflow&lt;/a>
[3]: &lt;a href="https://github.com/go-python/gopy">go-python/gopy - GitHub&lt;/a>
[4]: &lt;a href="https://pypi.org/">PyPI · The Python Package Index&lt;/a>
[5]: &lt;a href="https://packaging.python.org/en/latest/tutorials/packaging-projects/">Packaging Python Projects — Python Packaging User Guide&lt;/a>
[6]: &lt;a href="https://www.digitalocean.com/community/tutorials/how-to-package-and-distribute-python-applications">How To Package And Distribute Python Applications&lt;/a>&lt;/p>
&lt;h1 id="安装-python-模块包">安装 Python 模块/包&lt;a class="td-heading-self-link" href="#%e5%ae%89%e8%a3%85-python-%e6%a8%a1%e5%9d%97%e5%8c%85" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>详见 &lt;a href="docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/Python%E5%B7%A5%E5%85%B7/Python%20%E5%B7%A5%E5%85%B7.md#%E5%AE%89%E8%A3%85%20Python%20%E5%8C%85/%E6%A8%A1%E5%9D%97">Python 工具&lt;/a>&lt;/p></description></item><item><title>Docs: Python 虚拟环境</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/Python-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/Python-%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/Python-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/Python-%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.python.org/3/tutorial/venv.html">官方文档，Python 教程 - 虚拟环境和包&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Python 没有 go.mod 与 go.sum 这种文件来管理第三方依赖模块的版本。假如现在只有一个 3.10 版本的 Python，那么所有项目的依赖模块都会被安装到 site-packages 目录中，且 site-packages 目录中保存只能保存唯一一个版本的依赖。若项目 A 需要 模块 C 的 1.0 版本，项目 B 需要 模块 C 的 2.0 的版本，这时候就会产生冲突，若同时运行这两个项目，将有其中一个无法正常运行。因为只要安装 C 1.0，当前环境的 C 2.0 就会被覆盖。&lt;/p>
&lt;p>为了解决上述&lt;strong>第三方模块的多版本管理问题&lt;/strong>，Python 想了一个类似 JS 的 node_modules 方案。。称为 &lt;a href="https://docs.python.org/zh-cn/3/glossary.html#term-virtual-environment">virtual environment(虚拟环境，简称 venv)&lt;/a>。就相当于为每个项目建立一个独立的 Python 环境。。。。&lt;/p>
&lt;blockquote>
&lt;p>但是。。。另一个可怕的问题就是。。。。如果多个项目依赖相同版本的模块。。那么。。就要安装很多遍。。。。。唉。。。。。。&lt;/p>
&lt;p>TODO: 如何解决这个问题？&lt;/p>
&lt;/blockquote>
&lt;p>想要使用 Python 虚拟环境，需要先安装一个名为 &lt;a href="https://docs.python.org/3/library/venv.html#module-venv">venv&lt;/a> 的内置模块（这个模块是在 CPyhon 的源码中的，在 sys 库或用pip命令里看不到），但是有的发行版并没有随着 Python 一起安装，比如 Ubuntu，需要手动安装 &lt;code>apt install python3.10-venv&lt;/code>&lt;/p>
&lt;h2 id="创建虚拟环境">创建虚拟环境&lt;a class="td-heading-self-link" href="#%e5%88%9b%e5%bb%ba%e8%99%9a%e6%8b%9f%e7%8e%af%e5%a2%83" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>假设我们现在有一个项目，放在单独的目录中，project-venv-demo，想要让这个项目有独立的依赖环境，那就执行如下命令即可&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 创建一个虚拟环境目录&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># python3 -m venv /root/tmp/project-venv-demo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># ls /root/tmp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>project-venv-demo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 激活虚拟环境&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># source /root/tmp/project-venv-demo/bin/activate&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>project-venv-demo&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> ~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>此时的 Shell 中的提示符前面出现了 &lt;code>(project-venv-demo)&lt;/code>，这就说明当前已在 Python 的虚拟环境那种了。此时的虚拟环境中将是已安装的特定 Python 版本&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>project-venv-demo&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> ~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># python -m site&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sys.path &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#39;/root/tmp&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#39;/usr/lib/python310.zip&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#39;/usr/lib/python3.10&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#39;/usr/lib/python3.10/lib-dynload&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#39;/root/tmp/project-venv-demo/lib/python3.10/site-packages&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>USER_BASE: &lt;span style="color:#4e9a06">&amp;#39;/root/.local&amp;#39;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>doesn&lt;span style="color:#4e9a06">&amp;#39;t exist)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">USER_SITE: &amp;#39;&lt;/span>/root/.local/lib/python3.10/site-packages&lt;span style="color:#4e9a06">&amp;#39; (doesn&amp;#39;&lt;/span>t exist&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ENABLE_USER_SITE: False
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在任意位置执行 &lt;code>deactivate&lt;/code> 命令将会退出当前虚拟环境。&lt;/p>
&lt;h2 id="虚拟环境关联文件与配置">虚拟环境关联文件与配置&lt;a class="td-heading-self-link" href="#%e8%99%9a%e6%8b%9f%e7%8e%af%e5%a2%83%e5%85%b3%e8%81%94%e6%96%87%e4%bb%b6%e4%b8%8e%e9%85%8d%e7%bd%ae" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>${VENV}&lt;/strong> # 虚拟化境创建时指定的目录。如果是 VSCode 创建的一般都是当前目录下的 &lt;code>.venv/&lt;/code> 目录&lt;/p>
&lt;ul>
&lt;li>&lt;strong>./pyvenv.cfg&lt;/strong> #&lt;/li>
&lt;li>&lt;strong>./Lib/site-packages/&lt;/strong> # 第三方库保存路径&lt;/li>
&lt;li>&lt;strong>./Lib/Scripts/&lt;/strong> # 部分库所需要的可执行文件的保存路径&lt;/li>
&lt;/ul></description></item></channel></rss>