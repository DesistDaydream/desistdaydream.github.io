<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/</link><description>Recent content in Python on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/index.xml" rel="self" type="application/rss+xml"/><item><title>Python</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/Python/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/Python/</guid><description>概述 参考：
官网 GitHub 组织，Python GitHub 项目，python/cpython CPython 源码解析 Python 编程语言最早由 C 语言实现，称为 CPython。还有其它的实现版本，不怎么用就不记了
学习资料 Hello World Python 范儿 Pythonic(Python 范儿)
Python 增强建议 参考：
官网 Python Enhancement Proposals(Python 增强建议，简称 PEP) 是 Python 社区用于提出新特性、改进和决策的标准化文档。每个 PEP 都有一个唯一的编号，通过提交和讨论的过程，最终由 Python 社区接受或拒绝。
PEP 的结构类似于 RFC（Request for Comments）文档，它们提供了一种标准化的方式来描述新功能的设计、实现和其他相关信息。PEP 中包含了详细的说明、背景、动机、语法示例等，以便开发者能够理解和评估提案。
项目结构 在 PEP518 中指定了 Python 项目的最低构建系统要求。
命名规范 代码格式 格式化工具(参考: https://zhuanlan.zhihu.com/p/203307235)：
black # 很好用 autopep8 yapf 知乎，代码规范与美观: Python Linter (Ruff) 和 Formatter (Black)
而 Black 和 Ruff 都支持从 pyproject.</description></item><item><title>Jinja</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/Jinja/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/Jinja/</guid><description>概述 参考：
GitHub 项目，pallets/jinja 官网 国人翻译官网 Wiki, Jinja 骏马金龙博客，9. 如虎添翼的力量：解锁强大的 Jinja2 模板 Jinja 是一个用于 Python 变成语言中的 Template Engine(模板引擎)。Jinja 通常被用来作为 Python 的 Web 框架(e.g.Flask、Django)的数据渲染的底层调用。
Django 其实自带模板引擎(DTL)，只不过由于 Jinja 的流行，通常都让 Django 的模板引擎使用 Jinja2
Jinja 模板引擎允许定制标签、过滤器、测试和全局变量。此外，与 Django 模板引擎不同，Jinja 允许模板设计器调用带有对象参数的函数。Jinja 是 Flask 的默认模板引擎，同时，也被 Ansible、Trac、Salt 使用。
Jinja 是什么？模板是什么？ 何为模板？举个例子就知道了。
假设要发送一个文件给一个或多个目标节点，要发送的文件内容如下：
hello, __NAME__ 其中 __NAME__ 部分想要根据目标节点的主机名来确定，比如发送给 www 节点时内容应该为 hello, www，发送给 wwww 节点时，内容应该为hello, wwww。换句话说，__NAME__ 是一个能够根据不同场景动态生成不同字符串的代码小片段。而根据特殊的代码片段动态生成字符串便是模板要实现的功能。
现在解释模板便容易了：所谓 Template(模板)，只是文本文件，可以在文本字符串中嵌入一些 Expressions(表达式)，然后使用模板引擎去解析整个模板，将其中嵌入的表达式替换成对应的结果。其中，解析并替换模板表达式的过程，称为渲染。从编程语言的角度说，表达式就是代码中的 function。
当模板引擎解析表达式时，每个表达式都有返回值。
为了让模板引擎只替换表达式而不操作普通字符串，所以模板引擎需要能够区分模板表达式和普通字符串，所以模板表达式通常会使用 Delimiters(分隔符) 包围起来。例如上面示例中，__NAME__使用了前后两个下划线包围，表示这部分是模板表达式，它是需要进行替换的，而”hello” 是普通字符串，模板引擎不会去管它。
Jinja 模板引擎提供了三种** Delimiters(分隔符) **来包围 模板表达式：</description></item></channel></rss>