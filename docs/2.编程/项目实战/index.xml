<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – 项目实战</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/</link><description>Recent content in 项目实战 on 断念梦</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Web SSH</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/Web-SSH/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/Web-SSH/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/GKK6JHohFNRVPke7zn1apQ">公众号-云原生运维圈，Gin+Xterm.js实现WebSSH远程Kubernetes Pod&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>一&lt;/strong>&lt;/p>
&lt;p>&lt;strong>Xterm.js简介&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://mmbiz.qpic.cn/sz_mmbiz_png/vNHkZdwXUGPicU8ALTCgMicSnVTvm1Jjf0kYaWIeHjdfQB1qRES4icz0WibNgKq64IB2nxERlpAU28OQXdSpjU6ictw/640?wx_fmt=png" alt="">&lt;/p>
&lt;p>xterm.js （https://xtermjs.org/）是一个开源的 JavaScript 库，它模拟了一个终端接口，可以在网页中嵌入一个完全功能的终端。这个库非常灵活，并且具有很多定制选项和插件系统。&lt;/p>
&lt;p>下面是一些使用 xterm.js 的基本步骤：&lt;/p>
&lt;ul>
&lt;li>首先，需要在项目中安装 xterm.js。你可以直接从 npm 安装：&lt;/li>
&lt;/ul>
&lt;p>npm install xterm&lt;/p>
&lt;ul>
&lt;li>然后在 HTML 中创建一个容器来承载终端&lt;/li>
&lt;/ul>
&lt;p>&lt;code>&amp;lt;div id=&amp;quot;terminal&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; &lt;/code>&lt;/p>
&lt;ul>
&lt;li>在你的 JavaScript 文件中，导入 Terminal 类并创建一个新的实例&lt;/li>
&lt;/ul>
&lt;p>`import { Terminal } from &amp;lsquo;xterm&amp;rsquo;;&lt;/p>
&lt;p>const term = new Terminal();&lt;/p>
&lt;ul>
&lt;li>把这个终端附加到 HTML 元素上&lt;/li>
&lt;/ul>
&lt;p>&lt;code>term.open(document.getElementById('terminal')); &lt;/code>&lt;/p>
&lt;ul>
&lt;li>现在你就可以向终端写入数据了&lt;/li>
&lt;/ul>
&lt;p>`term.write(&amp;lsquo;Hello, World!&amp;rsquo;);&lt;/p>
&lt;ul>
&lt;li>如果你想读取用户在终端中的输入，可以监听 onData 事件&lt;/li>
&lt;/ul>
&lt;p>`term.onData(data =&amp;gt; {&lt;br>
  console.log(data);&lt;br>
});&lt;/p>
&lt;p>以上只是最基础的使用方法。xterm.js 提供了许多其他功能，如主题定制、附加插件（例如 FitAddon 可以自动调整终端大小，WebLinksAddon 可以捕获 URL 并将其变为可点击链接）、设置光标样式、更改字体大小等等。你可以访问 xterm.js 的 GitHub （https://github.com/xtermjs/xterm.js）仓库 或者 文档 来获取更详细的信息。&lt;/p>
&lt;p>&lt;strong>二&lt;/strong>&lt;/p>
&lt;p>&lt;strong>使用Gin、client-go的SPDYExecutor来执行远程命令&lt;/strong>&lt;/p>
&lt;p>``package main&lt;/p>
&lt;p>import (&lt;br>
 &amp;ldquo;context&amp;rdquo;&lt;br>
 &amp;ldquo;encoding/json&amp;rdquo;&lt;br>
 &amp;ldquo;github.com/gin-gonic/gin&amp;rdquo;&lt;br>
 &amp;ldquo;github.com/gorilla/websocket&amp;rdquo;&lt;br>
 corev1 &amp;ldquo;k8s.io/api/core/v1&amp;rdquo;&lt;br>
 &amp;ldquo;k8s.io/client-go/kubernetes&amp;rdquo;&lt;br>
 &amp;ldquo;k8s.io/client-go/kubernetes/scheme&amp;rdquo;&lt;br>
 &amp;ldquo;k8s.io/client-go/tools/clientcmd&amp;rdquo;&lt;br>
 &amp;ldquo;k8s.io/client-go/tools/remotecommand&amp;rdquo;&lt;br>
 &amp;ldquo;log&amp;rdquo;&lt;br>
 &amp;ldquo;net/http&amp;rdquo;&lt;br>
)&lt;/p>
&lt;p>// websocket 升级器配置&lt;br>
var upgrader = websocket.Upgrader{&lt;br>
 CheckOrigin: func(r *http.Request) bool {&lt;br>
  return true&lt;br>
 },&lt;br>
}&lt;/p>
&lt;p>// WSClient 结构体，封装了 WebSocket 连接和 resize 通道，用于在 WebSocket 和 remotecommand 之间进行数据交换。&lt;br>
type WSClient struct {&lt;br>
 // WebSocket 连接对象&lt;br>
 ws *websocket.Conn&lt;br>
 // TerminalSize 类型的通道，用于传输窗口大小调整事件&lt;br>
 resize chan remotecommand.TerminalSize&lt;br>
}&lt;/p>
&lt;p>// MSG 结构体，用于解析从 WebSocket 接收到的消息。&lt;br>
type MSG struct {&lt;br>
 // 消息类型字段&lt;br>
 MsgType string &lt;code>json:&amp;quot;msg_type&amp;quot;&lt;/code>&lt;br>
 Rows uint16 &lt;code>json:&amp;quot;rows&amp;quot;&lt;/code>&lt;br>
 Cols uint16 &lt;code>json:&amp;quot;cols&amp;quot;&lt;/code>&lt;br>
 // 输入消息的数据字段&lt;br>
 Data string &lt;code>json:&amp;quot;data&amp;quot;&lt;/code>&lt;br>
}&lt;/p>
&lt;p>// WSClient 的 Read 方法，实现了 io.Reader 接口，从 websocket 中读取数据。&lt;br>
func (c *WSClient) Read(p []byte) (n int, err error) {&lt;br>
 // 从 WebSocket 中读取消息&lt;br>
 _, message, err := c.ws.ReadMessage()&lt;br>
 if err != nil {&lt;br>
  return 0, err&lt;br>
 }&lt;br>
 var msg MSG&lt;br>
 if err := json.Unmarshal(message, &amp;amp;msg); err != nil {&lt;br>
  return 0, err&lt;br>
 }&lt;/p>
&lt;p> // 根据消息类型进行不同的处理&lt;br>
 switch msg.MsgType {&lt;br>
 // 如果是窗口调整消息&lt;br>
 case &amp;ldquo;resize&amp;rdquo;:&lt;br>
  winSize := remotecommand.TerminalSize{&lt;br>
   Width: msg.Cols,&lt;br>
   Height: msg.Rows,&lt;br>
  }&lt;br>
  // 将 TerminalSize 对象发送到 resize 通道&lt;br>
  c.resize &amp;lt;- winSize&lt;br>
  return 0, nil&lt;br>
 // 如果是输入消息&lt;br>
 case &amp;ldquo;input&amp;rdquo;:&lt;br>
  copy(p, msg.Data)&lt;br>
  return len(msg.Data), err&lt;br>
 }&lt;br>
 return 0, nil&lt;br>
}&lt;/p>
&lt;p>// WSClient 的 Write 方法，实现了 io.Writer 接口，将数据写入 websocket。&lt;br>
func (c *WSClient) Write(p []byte) (n int, err error) {&lt;br>
 // 将数据作为文本消息写入 WebSocket&lt;br>
 err = c.ws.WriteMessage(websocket.TextMessage, p)&lt;br>
 return len(p), err&lt;br>
}&lt;/p>
&lt;p>// Next WSClient 的 Next 方法，用于从 resize 通道获取下一个 TerminalSize 事件。&lt;br>
func (c *WSClient) Next() *remotecommand.TerminalSize {&lt;br>
 // 从 resize 通道读取 TerminalSize 对象&lt;br>
 size := &amp;lt;-c.resize&lt;br>
 return &amp;amp;size&lt;br>
}&lt;/p>
&lt;p>// podSSH 函数，这是主要的 SSH 功能逻辑，使用 kubernetes client-go 的 SPDY executor 来执行远程命令。&lt;br>
func podSSH(wsClient *WSClient, q query) {&lt;br>
 // 使用 kubeconfig 文件初始化 kubernetes 客户端配置&lt;br>
 // 请注意，你应该替换 ./config 为你的 kubeconfig 文件路径&lt;br>
 restClientConfig, err := clientcmd.BuildConfigFromFlags(&amp;quot;&amp;quot;, &amp;ldquo;./config&amp;rdquo;)&lt;br>
 if err != nil {&lt;br>
  log.Fatalf(&amp;ldquo;Failed to build config: %v&amp;rdquo;, err)&lt;br>
 }&lt;/p>
&lt;p> // 根据配置创建 kubernetes 客户端&lt;br>
 clientSet, err := kubernetes.NewForConfig(restClientConfig)&lt;br>
 if err != nil {&lt;br>
  log.Fatalf(&amp;ldquo;Failed to create client: %v&amp;rdquo;, err)&lt;br>
 }&lt;br>
 // 构造一个用于执行远程命令的请求&lt;br>
 request := clientSet.CoreV1().RESTClient().Post().&lt;br>
  Resource(&amp;ldquo;pods&amp;rdquo;).&lt;br>
  Namespace(q.Namespace).&lt;br>
  Name(q.PodName).&lt;br>
  SubResource(&amp;ldquo;exec&amp;rdquo;).&lt;br>
  VersionedParams(&amp;amp;corev1.PodExecOptions{&lt;br>
   Container: q.ContainerName,&lt;br>
   Command: []string{&lt;br>
    q.Command,&lt;br>
   },&lt;br>
   Stdout: true,&lt;br>
   Stdin:  true,&lt;br>
   Stderr: true,&lt;br>
   TTY:    true,&lt;br>
  }, scheme.ParameterCodec)&lt;br>
 // 创建 SPDY executor，用于后续的 Stream 操作&lt;br>
 exec, err := remotecommand.NewSPDYExecutor(restClientConfig, &amp;ldquo;POST&amp;rdquo;, request.URL())&lt;br>
 if err != nil {&lt;br>
  log.Fatalf(&amp;ldquo;Failed to initialize executor: %v&amp;rdquo;, err)&lt;br>
 }&lt;/p>
&lt;p> // 开始进行 Stream 操作，即通过 websocket 执行命令&lt;br>
 err = exec.StreamWithContext(context.Background(), remotecommand.StreamOptions{&lt;br>
  Stderr:            wsClient,&lt;br>
  Stdout:            wsClient,&lt;br>
  Stdin:             wsClient,&lt;br>
  Tty:               true,&lt;br>
  TerminalSizeQueue: wsClient,&lt;br>
 })&lt;br>
 if err != nil {&lt;br>
  log.Fatalf(&amp;ldquo;Failed to start stream: %v&amp;rdquo;, err)&lt;br>
 }&lt;br>
}&lt;/p>
&lt;p>// query 结构体，用于解析和验证查询参数&lt;br>
type query struct {&lt;br>
 Namespace     string &lt;code>form:&amp;quot;namespace&amp;quot; binding:&amp;quot;required&amp;quot;&lt;/code>&lt;br>
 PodName       string &lt;code>form:&amp;quot;pod_name&amp;quot; binding:&amp;quot;required&amp;quot;&lt;/code>&lt;br>
 ContainerName string &lt;code>form:&amp;quot;container_name&amp;quot; binding:&amp;quot;required&amp;quot;&lt;/code>&lt;br>
 Command       string &lt;code>form:&amp;quot;command&amp;quot; binding:&amp;quot;required&amp;quot;&lt;/code>&lt;br>
}&lt;/p>
&lt;p>func main() {&lt;br>
 router := gin.Default()&lt;br>
 router.LoadHTMLGlob(&amp;ldquo;templates/*&amp;rdquo;)&lt;br>
 router.GET(&amp;quot;/&amp;quot;, func(ctx *gin.Context) {&lt;br>
  ctx.HTML(http.StatusOK, &amp;ldquo;ssh.html&amp;rdquo;, nil)&lt;br>
 })&lt;/p>
&lt;p> // 设置 /ssh 路由&lt;br>
 router.GET(&amp;quot;/ssh&amp;quot;, func(ctx *gin.Context) {&lt;br>
  var r query&lt;br>
  if err := ctx.ShouldBindQuery(&amp;amp;r); err != nil {&lt;br>
   ctx.JSON(http.StatusBadRequest, gin.H{&lt;br>
    &amp;ldquo;err&amp;rdquo;: err.Error(),&lt;br>
   })&lt;br>
   return&lt;br>
  }&lt;br>
  // 将 HTTP 连接升级为 websocket 连接&lt;br>
  ws, err := upgrader.Upgrade(ctx.Writer, ctx.Request, nil)&lt;br>
  if err != nil {&lt;br>
   log.Printf(&amp;ldquo;Failed to upgrade connection: %v&amp;rdquo;, err)&lt;br>
   return&lt;br>
  }&lt;br>
  // 使用 podSSH 函数处理 websocket 连接&lt;br>
  podSSH(&amp;amp;WSClient{&lt;br>
   ws:     ws,&lt;br>
   resize: make(chan remotecommand.TerminalSize),&lt;br>
  }, r)&lt;br>
 })&lt;br>
 router.Run(&amp;quot;:9191&amp;quot;)&lt;br>
}&lt;/p>
&lt;p>``&lt;/p>
&lt;ul>
&lt;li>后端全部代码&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://gitee.com/KubeSec/pod-webssh/tree/master/pod-ssh">https://gitee.com/KubeSec/pod-webssh/tree/master/pod-ssh&lt;/a>&lt;/p>
&lt;p>&lt;strong>三&lt;/strong>&lt;/p>
&lt;p>&lt;strong>使用vue-admin-template和Xterm.js实现Web终端&lt;/strong>&lt;/p>
&lt;p>&lt;a href="https://github.com/PanJiaChen/vue-admin-template">https://github.com/PanJiaChen/vue-admin-template&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/xtermjs/xterm.js">https://github.com/xtermjs/xterm.js&lt;/a>&lt;/p>
&lt;ul>
&lt;li>下载vue-admin-template项目&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://github.com/PanJiaChen/vue-admin-template.git">https://github.com/PanJiaChen/vue-admin-template.git&lt;/a>&lt;/p>
&lt;ul>
&lt;li>安装xterm.js及插件&lt;/li>
&lt;/ul>
&lt;p>&lt;code>npm install npm install xterm npm install --save xterm-addon-web-links npm install --save xterm-addon-fit npm install -S xterm-style&lt;/code>&lt;/p>
&lt;ul>
&lt;li>打开vue-admin-template项目，在src/views目录下新建目录pod-ssh，在pod-ssh目录下新建index.vue代码如下&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>&amp;lt;template&amp;gt;
  &amp;lt;div class=&amp;#34;app-container&amp;#34;&amp;gt;
    &amp;lt;!-- 使用 Element UI 的表单组件创建一个带有标签和输入框的表单 --&amp;gt;
    &amp;lt;el-form ref=&amp;#34;form&amp;#34; :model=&amp;#34;form&amp;#34; :inline=&amp;#34;true&amp;#34; label-width=&amp;#34;120px&amp;#34;&amp;gt;
      &amp;lt;el-form-item label=&amp;#34;namespace&amp;#34;&amp;gt; &amp;lt;!-- namespace 输入框 --&amp;gt;
        &amp;lt;el-input v-model=&amp;#34;form.namespace&amp;#34; /&amp;gt;
      &amp;lt;/el-form-item&amp;gt;
      &amp;lt;el-form-item label=&amp;#34;pod name&amp;#34;&amp;gt; &amp;lt;!-- pod 名称输入框 --&amp;gt;
        &amp;lt;el-input v-model=&amp;#34;form.pod_name&amp;#34; /&amp;gt;
      &amp;lt;/el-form-item&amp;gt;
      &amp;lt;el-form-item label=&amp;#34;container name&amp;#34;&amp;gt; &amp;lt;!-- 容器名称输入框 --&amp;gt;
        &amp;lt;el-input v-model=&amp;#34;form.container_name&amp;#34; /&amp;gt;
      &amp;lt;/el-form-item&amp;gt;
      &amp;lt;el-form-item label=&amp;#34;Command&amp;#34;&amp;gt; &amp;lt;!-- 命令选择框 --&amp;gt;
        &amp;lt;el-select v-model=&amp;#34;form.command&amp;#34; placeholder=&amp;#34;bash&amp;#34;&amp;gt;
          &amp;lt;el-option label=&amp;#34;bash&amp;#34; value=&amp;#34;bash&amp;#34; /&amp;gt;
          &amp;lt;el-option label=&amp;#34;sh&amp;#34; value=&amp;#34;sh&amp;#34; /&amp;gt;
        &amp;lt;/el-select&amp;gt;
      &amp;lt;/el-form-item&amp;gt;
      &amp;lt;el-form-item&amp;gt; &amp;lt;!-- 提交按钮 --&amp;gt;
        &amp;lt;el-button type=&amp;#34;primary&amp;#34; @click=&amp;#34;onSubmit&amp;#34;&amp;gt;Create&amp;lt;/el-button&amp;gt;
      &amp;lt;/el-form-item&amp;gt;
      &amp;lt;div id=&amp;#34;terminal&amp;#34; /&amp;gt; &amp;lt;!-- 终端视图容器 --&amp;gt;
    &amp;lt;/el-form&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&amp;lt;script&amp;gt;
import { Terminal } from &amp;#39;xterm&amp;#39; // 导入 xterm 包，用于创建和操作终端对象
import { common as xtermTheme } from &amp;#39;xterm-style&amp;#39; // 导入 xterm 样式主题
import &amp;#39;xterm/css/xterm.css&amp;#39; // 导入 xterm CSS 样式
import { FitAddon } from &amp;#39;xterm-addon-fit&amp;#39; // 导入 xterm fit 插件，用于调整终端大小
import { WebLinksAddon } from &amp;#39;xterm-addon-web-links&amp;#39; // 导入 xterm web-links 插件，可以捕获 URL 并将其转换为可点击链接
import &amp;#39;xterm/lib/xterm.js&amp;#39; // 导入 xterm 库
export default {
  data() {
    return {
      form: {
        namespace: &amp;#39;default&amp;#39;, // 默认命名空间为 &amp;#34;default&amp;#34;
        command: &amp;#39;bash&amp;#39;, // 默认 shell 命令为 &amp;#34;bash&amp;#34;
        pod_name: &amp;#39;nginx&amp;#39;, // 默认 Pod 名称为 &amp;#34;nginx&amp;#34;
        container_name: &amp;#39;nginx&amp;#39; // 默认容器名称为 &amp;#34;nginx&amp;#34;
      },
    }
  },
  methods: {
    onSubmit() {
      // 创建一个新的 Terminal 对象
      const xterm = new Terminal({
        theme: xtermTheme,
        rendererType: &amp;#39;canvas&amp;#39;,
        convertEol: true,
        cursorBlink: true
      })
      // 创建并加载 FitAddon 和 WebLinksAddon
      const fitAddon = new FitAddon()
      xterm.loadAddon(fitAddon)
      xterm.loadAddon(new WebLinksAddon())
      // 打开这个终端，并附加到 HTML 元素上
      xterm.open(document.getElementById(&amp;#39;terminal&amp;#39;))
      // 调整终端的大小以适应其父元素
      fitAddon.fit()
      // 创建一个新的 WebSocket 连接，并通过 URL 参数传递 pod, namespace, container 和 command 信息
      const ws = new WebSocket(&amp;#39;ws://127.0.0.1:9191/ssh?namespace=&amp;#39; + this.form.namespace + &amp;#39;&amp;amp;pod_name=&amp;#39; + this.form.pod_name + &amp;#39;&amp;amp;container_name=&amp;#39; + this.form.container_name + &amp;#39;&amp;amp;command=&amp;#39; + this.form.command)
      // 当 WebSocket 连接打开时，发送一个 resize 消息给服务器，告诉它终端的尺寸
      ws.onopen = function() {
        ws.send(JSON.stringify({
          msg_type: &amp;#39;resize&amp;#39;,
          rows: xterm.rows,
          cols: xterm.cols
        }))
      }
      // 当从服务器收到消息时，写入终端显示
      ws.onmessage = function(evt) {
        xterm.write(evt.data)
      }
      // 当发生错误时，也写入终端显示
      ws.onerror = function(evt) {
        xterm.write(evt.data)
      }
      // 当窗口尺寸变化时，重新调整终端的尺寸，并发送一个新的 resize 消息给服务器
      window.addEventListener(&amp;#39;resize&amp;#39;, function() {
        fitAddon.fit()
        ws.send(JSON.stringify({
          msg_type: &amp;#39;resize&amp;#39;,
          rows: xterm.rows,
          cols: xterm.cols
        }))
      })
      // 当在终端中键入字符时，发送一个 input 消息给服务器
      xterm.onData((b) =&amp;gt; {
        ws.send(JSON.stringify({
          msg_type: &amp;#39;input&amp;#39;,
          data: b
        }))
      })
    }
  }
}
&amp;lt;/script&amp;gt;
&amp;lt;style scoped&amp;gt;
.line{
  text-align: center;
}
&amp;lt;/style&amp;gt;
&lt;/code>&lt;/pre>&lt;p>在src/router/index.js文件中增加路由&lt;/p>
&lt;pre tabindex="0">&lt;code>{
    path: &amp;#39;/pod-ssh&amp;#39;,
    component: Layout,
    children: [
      {
        path: &amp;#39;pod-ssh&amp;#39;,
        name: &amp;#39;SSH&amp;#39;,
        component: () =&amp;gt; import(&amp;#39;@/views/pod-ssh/index&amp;#39;),
        meta: { title: &amp;#39;SSH&amp;#39;, icon: &amp;#39;form&amp;#39; }
      }
    ]
  },
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>启动项目&lt;/li>
&lt;/ul>
&lt;p>&lt;code>npm install npm install &lt;/code>&lt;/p>
&lt;ul>
&lt;li>前端全部代码&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://gitee.com/KubeSec/pod-webssh/tree/master/pod-webssh">https://gitee.com/KubeSec/pod-webssh/tree/master/pod-webssh&lt;/a>&lt;/p>
&lt;p>&lt;strong>四&lt;/strong>&lt;/p>
&lt;p>测试&lt;/p>
&lt;ul>
&lt;li>在kubernetes中创建测试的Pod&lt;/li>
&lt;/ul>
&lt;p>&lt;code>apiVersion: v1 kind: Pod metadata:   name: nginx spec:   containers:   - name: nginx     image: nginx:1.14.2     ports:     - containerPort: 80&lt;/code>&lt;/p>
&lt;p>访问http://localhost:9528/#/pod-ssh/pod-ssh&lt;/p>
&lt;p>&lt;img src="https://mmbiz.qpic.cn/sz_mmbiz_png/vNHkZdwXUGPicU8ALTCgMicSnVTvm1Jjf0kYaWIeHjdfQB1qRES4icz0WibNgKq64IB2nxERlpAU28OQXdSpjU6ictw/640?wx_fmt=png" alt="">&lt;/p></description></item></channel></rss>