<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Vue on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Framework/Vue/</link><description>Recent content in Vue on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Framework/Vue/index.xml" rel="self" type="application/rss+xml"/><item><title>Vue</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Framework/Vue/Vue/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Framework/Vue/Vue/</guid><description>概述 参考：
GitHub 组织，vuejs 官网 官网-中文 Vue 互动教程 Wiki, Vue.js Vue 是一套用于构建用户界面的渐进式 ECMAScript 框架。Vue3 于 2020 年 9 月发布，已全面采用 TypeScript 编写；在 2022 年 2 月份成为默认版本
组件化 Vue 是“组件化”模式，一个页面的各个部分，可以拆分成一个一个的组件：
Single-File Component(单文件组件，简称 SFC)。顾名思义，Vue 的单文件组件会将一个组件的逻辑 (JavaScript)，模板 (HTML) 和样式 (CSS) 封装在同一个文件里。
同时，多个组件可以自由组合拼接，形成一个完整的页面。
单文件组件是 Vue 的标志性功能。如果你的用例需要进行构建，我们推荐用它来编写 Vue 组件。你可以在后续相关章节里了解更多关于单文件组件的用法及用途。但你暂时只需要知道 Vue 会帮忙处理所有这些构建工具的配置就好。
这些组件通常被组织在 XXX.vue 文件中，通常保存在项目根目录的 components/ 目录下。
组件化开发是一个树状结构，从一个“根组件”开始：
App (root component) ├─ TodoList │ └─ TodoItem │ ├─ TodoDeleteButton │ └─ TodoEditButton └─ TodoFooter ├─ TodoClearButton └─ TodoStatistics 就像下面这样：</description></item><item><title>Vue 第三方库</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Framework/Vue/Vue-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Framework/Vue/Vue-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/</guid><description>概述 参考：
GitHub 项目，vuejs/awesome-vue # 一些常用的第三方库 Element Plus 参考：
GitHub 项目，element-plus/element-plus 官网 Element Plus 是一个基于 Vue3 的 UI 框架。它是 Element UI 基于 Vue3 的重构版本。
nmxiaowei/avue # 基于现有的 element-ui 库进行的二次封装，简化一些繁琐的操作
Ant Design Vue 参考：
GitHub 项目，vueComponent/ant-design-vue 官网 一个基于Ant Design和Vue的企业级UI组件。
其他 vue3-easy-data-table # 数据表组件
x-extends/vxe-table # vue 表格解决方案
mirari/v-viewer # vue 的图片查看器组件，支持旋转、缩放、缩放等
小组件 yanmiao99/vue3-go-crud-project</description></item><item><title>Vue 指令</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Framework/Vue/Vue-%E6%8C%87%E4%BB%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Framework/Vue/Vue-%E6%8C%87%E4%BB%A4/</guid><description>概述 参考：
官方文档，基础-模板语法-指令 官方文档-API，内置指令 Directives(指令) 是带有 v- 前缀的特殊 Attribute。Vue 提供了许多内置指令，包括 Template 组件中学习的 v-bind 和 v-html。 如果把 Vue 当做一种新的编程语言，那指令，就是 Vue 语言的部分 Keyword(关键字)</description></item><item><title>Vue 环境安装与使用</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Framework/Vue/Vue-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Framework/Vue/Vue-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</guid><description>概述 参考：
官方文档，应用规模化-工具链 Vue3 早期使用 Vue CLI，创建 Vue 项目，后来 Vue 作者尤雨溪开了一个新的工具 Vite，Vite 通过 vuejs/create-vue 项目，基于 Vite 创建 Vue 项目。
Vite 参考：
GitHub 项目，vitejs/vite 官网 Vite 是一种新型前端构建工具，可显着改善前端开发体验。它由两个主要部分组成：
一个开发服务器，通过原生 ES 模块为您的源文件提供服务，具有丰富的内置功能和惊人的快速热模块替换 (HMR)。 一个构建命令，将你的代码与Rollup捆绑在一起，预先配置为输出高度优化的生产静态资产。 此外，Vite 通过其插件 API和JavaScript API具有高度的可扩展性，具有完整的类型支持。
基于 Vite 创建 Vue 项目 参考：
官方文档，快速上手-创建一个 Vue 应用 GitHub 项目，vitejs/awesome-vite（一些使用 vite 创建的应用模板，可以直接拿来用） Vue Naive - 管理模板，基于 Vue 3 + Pinia + Naive UI。 npm init vue@latest 注意：通过 npm 将 vite 作为模块安装到 node_modules/ 目录下，然后执行 npm run dev、npm build 等命令时，可以直接调用。但是想在 CLI 直接调用 vite 命令是需要通过 npm install -g vite 单独安装 vite 命令行工具的 注意：如果不在全局安装 vite，那也可以直接使用 node .</description></item><item><title>Vue 响应式</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Framework/Vue/Vue-%E5%93%8D%E5%BA%94%E5%BC%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Framework/Vue/Vue-%E5%93%8D%E5%BA%94%E5%BC%8F/</guid><description>概述 参考：
官方文档，API 参考 官方文档，API 参考-组合式 API-响应式：核心 ref 与 reactive 是响应式的基础
响应式: 核心 ref() https://cn.vuejs.org/api/reactivity-core.html#ref
ref() 函数返回一个 Ref&amp;lt;T = any&amp;gt; 接口类型的对象，该接口中只有一个名为 value 的属性，用以指向该对象的值。 Ref&amp;lt;T&amp;gt; 接口对象是 响应式、可更改 的。
let number = ref &amp;lt; number &amp;gt; 0 number 是 Ref&amp;lt;number&amp;gt; 类型的实例，Ref.value 则是该实例的值，即 0。 Ref 对象是可更改的，也就是说你可以为 .value 赋予新的值。它也是响应式的，即所有对 .value 的操作都将被追踪，并且写操作会触发与之相关的副作用。 如果将一个对象赋值给 ref，那么这个对象将通过 reactive() 转为具有深层次响应式的对象。这也意味着如果对象中包含了嵌套的 ref，它们将被深层地解包。 若要避免这种深层次的转换，使用 shallowRef() 来替代。
computed () https://cn.vuejs.org/api/reactivity-core.html#computed
reactive() https://cn.vuejs.org/api/reactivity-core.html#reactive
readonly() watchEffect() watchPostEffect() watchSyncEffect() watch() 响应式: 工具 isRef() unref() toRef() toRefs() isProxy() isReactive() isReadonly() 响应式: 进阶 shallowRef() triggerRef() customRef() shallowReactive() shallowReadonly() toRaw() markRaw() effectScope() getCurrentScope() onScopeDispose() 生命周期钩子 onMounted() onUpdated() onUnmounted() onBeforeMount() onBeforeUpdate() onBeforeUnmount() onErrorCaptured() onRenderTracked() onRenderTriggered() onActivated() onDeactivated() onServerPrefetch()</description></item><item><title>Vue 组件</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Framework/Vue/Vue-%E7%BB%84%E4%BB%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Framework/Vue/Vue-%E7%BB%84%E4%BB%B6/</guid><description>概述 参考：
官方文档，基础-组件基础 组件间数据传递 在 Vue 中，组件之间可以传递多种类型的数据
变量，通过 Props。 关键字：v-bind 模板，通过 Slots 关键字：&amp;lt;template&amp;gt;、v-slot 事件，通过 Event 关键字：v-model、v-on、emit Props Slots Slot Content(插槽内容) 与 Slot Outlet(插槽出口)
&amp;lt;slot&amp;gt; 元素是一个 Slot Outlet(插槽出口)，标示了父元素提供的 Slot Content(插槽内容) 将在哪里被渲染。
Event Event(事件)</description></item></channel></rss>