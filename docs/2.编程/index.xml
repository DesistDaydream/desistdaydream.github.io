<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦的站点 – 👨‍💻2.编程</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/</link><description>Recent content in 👨‍💻2.编程 on 断念梦的站点</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: 编程</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E7%BC%96%E7%A8%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E7%BC%96%E7%A8%8B/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Computer_programming">Wiki，Computer Programming&lt;/a>(计算机编程)&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Programming_language">Wiki，Programmig Language&lt;/a>(编程语言)&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Programming(编程)&lt;/strong> 是编写程序的行为。&lt;/p>
&lt;p>无论处于上层的软件多么的高级, 想要在 CPU 执行, 就必须被翻译成“机器码”， 翻译这个工作由编译器来执行. 编译器在这个过程中, 要经过“编译”，“汇编”，“链接”几个步骤, 最后生成“可执行文件”。可执行文件中保存的是二进制机器码， 这串机器码可以直接被 CPU 读取和执行。&lt;/p>
&lt;h1 id="编程学习资料">编程学习资料&lt;a class="td-heading-self-link" href="#%e7%bc%96%e7%a8%8b%e5%ad%a6%e4%b9%a0%e8%b5%84%e6%96%99" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/WdTRq31CRjy90KiN88dwtw">公众号，微软带头打了 30 年，这场屏幕的大乱斗，终于要结束了&lt;/a>(前端浏览器的历史)&lt;/li>
&lt;li>&lt;a href="http://www.manongjc.com/">码农教程&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="菜鸟教程">菜鸟教程&lt;a class="td-heading-self-link" href="#%e8%8f%9c%e9%b8%9f%e6%95%99%e7%a8%8b" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.runoob.com/">官网&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;a href="https://www.runoob.com/">菜鸟教程&lt;/a>提供了基础编程技术教程。&lt;/p>
&lt;p>菜鸟教程的 Slogan 为：学的不仅是技术，更是梦想！&lt;/p>
&lt;p>记住：再牛逼的梦想也抵不住傻逼似的坚持！&lt;/p>
&lt;p>本站域名为 runoob.com, runoob 为 Running Noob 的缩写，意为：奔跑吧！菜鸟。&lt;/p>
&lt;p>本站包括了 HTML、CSS、Javascript、PHP、C、Python 等各种基础编程教程。&lt;/p>
&lt;p>同时本站中也提供了大量的在线实例，通过实例，您可以更好地学习如何建站。&lt;/p>
&lt;p>本站致力于推广各种编程语言技术，所有资源是完全免费的，并且会根据当前互联网的变化实时更新本站内容。&lt;/p>
&lt;p>同时本站内容如果有不足的地方，也欢迎广大编程爱好者在本站留言提供意见。&lt;/p>
&lt;h2 id="w3school">W3school&lt;a class="td-heading-self-link" href="#w3school" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.w3schools.com/">官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.w3school.com.cn/about/about_us.asp">W3school 中文&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>开发者资源网站(各种语言的教程、各种参考手册等等)&lt;/p>
&lt;h2 id="mdn">MDN&lt;a class="td-heading-self-link" href="#mdn" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/MDN_Web_Docs">Wiki，MDN&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/mdn/">GitHub MDN 组织&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;a href="https://developer.mozilla.org">Mozilla Developer Network(Mozilla 开发者网络，简称 MDN) 官网&lt;/a>，这是一个汇集了众多 Mozilla 基金会产品和网络技术开发文档的网站。&lt;/p>
&lt;p>该网站都是前端所需要的东西&lt;/p>
&lt;h1 id="代码类型">代码类型&lt;a class="td-heading-self-link" href="#%e4%bb%a3%e7%a0%81%e7%b1%bb%e5%9e%8b" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Source_code">Wiki，Source code&lt;/a>(源码)&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Assembly_language">Wiki，Assembly code&lt;/a>(汇编码)，也可以称为 Assembly language(汇编语言)&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Machine_code">Wiki，Machine code&lt;/a>(机器码)
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Opcode">Wiki，Operation code&lt;/a>(操作码)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Bytecode">Wiki，Bytecode&lt;/a>(字节码)&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Microcode">Wiki，Microcode&lt;/a>(微码)&lt;/li>
&lt;li>&lt;a href="https://juejin.cn/post/6946382168641765412">掘金，机器码和计算机指令到底是怎么回事&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>所有的 &lt;strong>Code(代码)&lt;/strong>，都可以看作是 &lt;strong>Instructions(指令)&lt;/strong> 的&lt;strong>集合&lt;/strong>。&lt;/p>
&lt;ul>
&lt;li>C、Go 等高级语言编写的代码是源码，源码通过编译器，将源码转换为汇编码&lt;/li>
&lt;li>各种类型的汇编语言编写的代码是汇编码，汇编码通过汇编器，将汇编码转换为机器码&lt;/li>
&lt;/ul>
&lt;h2 id="source-code源码">Source Code(源码)&lt;a class="td-heading-self-link" href="#source-code%e6%ba%90%e7%a0%81" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>在计算机编程中，&lt;strong>Soure Code(源码)&lt;/strong> 是使用人类可读的编程语言编写的任何&lt;strong>代码指令的集合&lt;/strong>。程序的源代码是专门为方便计算机程序员的工作而设计的，他们主要通过编写源代码来指定计算机要执行的操作。源代码通常由汇编器或编译器转换为可由计算机执行的二进制机器代码。然后可能会存储机器代码以供稍后执行。或者，源代码可以被解释并因此立即执行。&lt;/p>
&lt;h2 id="machine-code机器码">Machine Code(机器码)&lt;a class="td-heading-self-link" href="#machine-code%e6%9c%ba%e5%99%a8%e7%a0%81" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>在计算机编程中，&lt;strong>Machine Code(机器码)&lt;/strong> 是任何符合 &lt;a href="#%E6%8C%87%E4%BB%A4%20&amp;amp;%20%E6%8C%87%E4%BB%A4%E9%9B%86%20&amp;amp;%20%E6%8C%87%E4%BB%A4%E9%9B%86%E6%9E%B6%E6%9E%84">ISA&lt;/a>(指令集架构) 的 &lt;strong>Machine Instruction(机器指令)&lt;/strong> 的&lt;strong>集合&lt;/strong>，用于控制对应 ISA 标准下的 CPU。其中的每条指令都会使 CPU 执行一项具体的任务。例如对 CPU 寄存器中的一个或多个数据单元进行 加载、存储、调准、算数逻辑单元 等操作。&lt;/p>
&lt;blockquote>
&lt;p>Machhine Code(机器码) 也可以称为 Machine Instruction(机器指令)&lt;/p>
&lt;/blockquote>
&lt;p>比如，MIPS 架构为每条机器指令始终是 32 bit 长的机器码提供了一个特定的示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0000cf;font-weight:bold">6&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">5&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">5&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">5&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">5&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">6&lt;/span> bits
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> op &lt;span style="color:#000;font-weight:bold">|&lt;/span> rs &lt;span style="color:#000;font-weight:bold">|&lt;/span> rt &lt;span style="color:#000;font-weight:bold">|&lt;/span> rd &lt;span style="color:#000;font-weight:bold">|&lt;/span>shamt&lt;span style="color:#000;font-weight:bold">|&lt;/span> funct&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> R-type
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> op &lt;span style="color:#000;font-weight:bold">|&lt;/span> rs &lt;span style="color:#000;font-weight:bold">|&lt;/span> rt &lt;span style="color:#000;font-weight:bold">|&lt;/span> address/immediate&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> I-type
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> op &lt;span style="color:#000;font-weight:bold">|&lt;/span> target address &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> J-type
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>MIPS 架构中将所有机器指令分为 3 类：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>R-type(Register 寄存器)&lt;/strong> # 一般用来执行算术逻辑操作，里面有读取和写入数据寄存器的地址，如果是逻辑位移操作，还有位移量，最后的 funct 是功能码，用以补充操作码&lt;/li>
&lt;li>&lt;strong>I-type(Immediate 立即)&lt;/strong> # 通常用来执行数据传输、条件分支、立即数操作。&lt;/li>
&lt;li>&lt;strong>J-type(Jump 跳转)&lt;/strong> # 通常用来执行无条件跳转操作。每条指令后面通常都会接一条跳转指令以便 CPU 可以跳转到下一个位置执行后面的指令。&lt;/li>
&lt;/ul>
&lt;p>每种类型的机器指令最高由 32 bit 表示，不同类型的指令中每个 bit 所表示的含义是不一样的，通常前 6 bit 都是 op，用以表示这条指令具体需要执行的行为是什么。后面的 bits 则根据指令的不同而有所区别&lt;/p>
&lt;ul>
&lt;li>&lt;strong>op&lt;/strong> # &lt;strong>Operation Code(操作码，简称 opcode)&lt;/strong> 也称为 Instruction machine code(指令机器码)、Instruction code(指令码)、Instruction syllable()、Instruction parcel、opstring。op 代表这条指令具体是一条什么样的指令。
&lt;ul>
&lt;li>op 码 与 实际行为 的对应关系，需要参考各个 ISA 规范&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>rs、rt、rd&lt;/strong> # 寄存器 XX
&lt;ul>
&lt;li>R 指令中 rd 是存放结果的目的寄存器&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>immediate&lt;/strong> 或 &lt;strong>address&lt;/strong> # 需要操作的“数”。
&lt;ul>
&lt;li>可以是一个“具体的可以直接操作的数”或“存放数的地址”&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>target address&lt;/strong> # 目标地址&lt;/li>
&lt;/ul>
&lt;p>若一个 CPU 是 32 位 或 64 位，那寄存器中可以存储的 bit 数即为 32 bit 或 64 bit&lt;/p>
&lt;p>比如我们可以通过 I-type 指令将数据存储到指定的寄存器中，然后通过 R-type 指令计算指定寄存器中的数据，并将结果放到另一个寄存器中，最后通过 J-type 指令跳转到下一个位置继续执行后续的指令。&lt;/p>
&lt;p>简单示例：&lt;/p>
&lt;p>将寄存器 1 和 2 相加并将结果放入寄存器 6 的编码如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> op &lt;span style="color:#000;font-weight:bold">|&lt;/span> rs &lt;span style="color:#000;font-weight:bold">|&lt;/span> rt &lt;span style="color:#000;font-weight:bold">|&lt;/span> rd &lt;span style="color:#000;font-weight:bold">|&lt;/span>shamt&lt;span style="color:#000;font-weight:bold">|&lt;/span> funct&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">6&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">32&lt;/span> 十进制表示
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0000cf;font-weight:bold">000000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00001&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00010&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00110&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">100000&lt;/span> 二进制表示
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 0X???? 十六进制表示。怎么转换还没找到资料
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>将一个值加载到寄存器 8 中，该值取自寄存器 3 中列出的位置之后的存储单元 68 个单元：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> op &lt;span style="color:#000;font-weight:bold">|&lt;/span> rs &lt;span style="color:#000;font-weight:bold">|&lt;/span> rt &lt;span style="color:#000;font-weight:bold">|&lt;/span> address/immediate&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0000cf;font-weight:bold">35&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">8&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">68&lt;/span> 十进制表示
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0000cf;font-weight:bold">100011&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00011&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">01000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00001&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">000100&lt;/span> 二进制表示
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 0X???? 十六进制表示。怎么转换还没找到资料
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>跳转到地址 1024：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> op &lt;span style="color:#000;font-weight:bold">|&lt;/span> target address &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1024&lt;/span> 十进制表示
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0000cf;font-weight:bold">000010&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">000000&lt;/span> 二进制表示
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 0X???? 十六进制表示。怎么转换还没找到资料
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="总结">总结&lt;a class="td-heading-self-link" href="#%e6%80%bb%e7%bb%93" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>机器码的结构其实和各种协议的封装结构非常类似，都是通过某些规范，将 bits 划分为几块，每块 bits 数表示的含义是不一样的&lt;/p>
&lt;p>而决定机器码结构的，就是 &lt;a href="#NKiSr">ISA(指令集架构)&lt;/a> 了，根据 ISA 生产的 CPU 在处理机器码时，会根据自身的 ISA 来解析这些机器码，隔几 bit 识别一次，然后执行识别到的结果，若是 CPU 在识别机器码时发现是在自己的 ISA 规范中，那么这条机器码将会被转成微码并在 CPU 内流动，若机器码错了，那么是没法通过 CPU 的译码阶段，控制点路将会报错。这时如果是 windows 系统往往就会蓝屏，因为 CPU 无法识别机器码中的指令，不知道自己应该执行什么。&lt;/p>
&lt;p>机器码与源码最大的区别在于&lt;/p>
&lt;ul>
&lt;li>源码可以用多种高级语言编写；而每条机器码是与每行汇编码是一一对应的&lt;/li>
&lt;li>源码是人类可读的；机器码人类读不懂&lt;/li>
&lt;li>源码通常都是文本；机器码是 0 和 1 数字的集合(当然，二进制也可以通过某些规则，编码为 10 进制、16 进制等，用于传播与存储)&lt;/li>
&lt;/ul>
&lt;p>最后说一点：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>源码是与人交互的，需要符合人的规矩，也就是各种高级编程语言的格式&lt;/strong>&lt;/li>
&lt;li>&lt;strong>机器码是与机器交互的，需要符合机器的规矩，也就是各种指令集架构&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>所以，就算是好多好多 0 和 1 的数字，也需要符合某些规范，才可以被 CPU 识别。当 CPU 识别时，假如现在我规定，每隔 10 bit 识别一次，然后发现 10 个 01 组成的数字，在自己的规范中没有任何描述，那么这 CPU 也就执行不下去了。这也是一个程序无法在多种架构的 CPU 上执行的原因。因为当一个程序经过汇编之后，01 的排列是以一种架构实现的，这种排列方式在其他架构上是识别不出来的~~~~&lt;/p>
&lt;h3 id="机器码与汇编码">机器码与汇编码&lt;a class="td-heading-self-link" href="#%e6%9c%ba%e5%99%a8%e7%a0%81%e4%b8%8e%e6%b1%87%e7%bc%96%e7%a0%81" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>由于机器码对人类来说非常不可读，所以早期人们创造了汇编语言，汇编语言的作用就是使用人类可读的汇编码与机器码建立一一对应的关系，这样，人们在编写程序时，就不用一直编写 01 了，而是使用单词来描述一条指令。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/cr7gm9/1653022184400-445fedc6-a6d6-4b0a-9e61-269ae5aff029.webp" alt="">&lt;/p>
&lt;p>以上 C 语言编译成汇编语言，再由汇编语言翻译成机器码，也就是 0 和 1 的机器语言。一条条的 16 进制数字，就是机器能读懂的计算机指令&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/cr7gm9/1653020400830-d392e057-dc98-4605-bf86-043f243c7779.webp" alt="">&lt;/p>
&lt;p>linux 系统上可以使用 gcc 和 objdump，把汇编码和机器码都打印出来。汇编代码和机器码是一一对应的，一条汇编对应一条机器码。&lt;/p>
&lt;p>可以说，汇编码就是给“给人看的机器码”&lt;/p>
&lt;p>通常，同一个 ISA 规范下，每条机器码，通常都对应一行汇编代码~~&lt;/p>
&lt;h2 id="bytecode字节码">Bytecode(字节码)&lt;a class="td-heading-self-link" href="#bytecode%e5%ad%97%e8%8a%82%e7%a0%81" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>Bytecode(字节码)&lt;/strong> 也称为 &lt;strong>p-code(p 码)&lt;/strong>，是一种特殊的可以被执行的机器码，只不过被 “虚拟机”（i.e. &lt;a href="https://en.wikipedia.org/wiki/P-code_machine">p-code machine&lt;/a>，是一种解释器，portable code machine）执行。之所以称之为字节码，是指这里面的操作码(opcode)是—个字节长。一般机器指令由操作码和操作数组成，字节码(虚拟的机器码)也是由操作码(opcode)和操作数(op)组成。对于字节码，它是按照一套虚机指令集格式来组织。&lt;/p>
&lt;blockquote>
&lt;p>这里提到的虚拟机，对于不用使用场景来说有不同的代指，比如 Java 中执行字节码的是 JVM；在内核中执行 BPF 字节码的是 BPF 虚拟机；等等。&lt;/p>
&lt;/blockquote>
&lt;h1 id="指令--指令集--指令集架构">指令 &amp;amp; 指令集 &amp;amp; 指令集架构&lt;a class="td-heading-self-link" href="#%e6%8c%87%e4%bb%a4--%e6%8c%87%e4%bb%a4%e9%9b%86--%e6%8c%87%e4%bb%a4%e9%9b%86%e6%9e%b6%e6%9e%84" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>详见：&lt;a href="https://desistdaydream.github.io/docs/0.%E8%AE%A1%E7%AE%97%E6%9C%BA/CPU/%E6%8C%87%E4%BB%A4%E9%9B%86%E6%9E%B6%E6%9E%84.md">指令集架构&lt;/a>&lt;/p>
&lt;h1 id="模块--包--库">模块 &amp;amp; 包 &amp;amp; 库&lt;a class="td-heading-self-link" href="#%e6%a8%a1%e5%9d%97--%e5%8c%85--%e5%ba%93" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>Module(模块)、Package(包)、Library(库) 常用来描述一个项目的组成。模块与包之间的包含关系在不同的编程语言中有不同的理解&lt;/p>
&lt;ul>
&lt;li>比如 Go 中一个目录就是一个包，多个包的项目是模块&lt;/li>
&lt;li>而 Python 则是一个文件就是模块，多个文件就是一个包。&lt;/li>
&lt;/ul>
&lt;p>但是不管如何规定，总得来说，都是编程语言们为了复用代码而抽象出来的概念。不管是包还是模块，这些东西组合在一起总要有一个地方保存，这个地方就称为 Library(库)，具有图书馆之意。&lt;/p>
&lt;p>&lt;strong>标准库&lt;/strong>一般用来表示编程语言自身的一些基本功能的集合。比如输入输出控制、系统调用、时间、路径、数学、等等功能。&lt;/p>
&lt;p>&lt;strong>第三方库&lt;/strong>一般用来表示由编程语言编写的扩展功能的集合。这些功能往往比官方提供的基础功能强大，比如高级的数学计算能力等等。&lt;/p>
&lt;h1 id="编程规范">编程规范&lt;a class="td-heading-self-link" href="#%e7%bc%96%e7%a8%8b%e8%a7%84%e8%8c%83" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/EFMhFazZGVAoKkfwegm_TQ">无法忍受不做单元测试和内卷，我离开了这家在美中国企业&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="method-stub">Method Stub&lt;a class="td-heading-self-link" href="#method-stub" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Method_stub">Wiki，Method stub&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>在软件开发中，&lt;strong>Method stub(方法存根)&lt;/strong> 是一段代码，用于代替某些其他编程功能&lt;/p></description></item><item><title>Docs: Program</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Program/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Program/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Computer_program">Wiki，Program&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Program(程序)&lt;/strong> 通常是指计算机程序，是供 &lt;a href="https://desistdaydream.github.io/docs/0.%E8%AE%A1%E7%AE%97%E6%9C%BA/Computer.md">Computer&lt;/a> 执行的编程语言的指令序列或指令集。&lt;/p>
&lt;p>人类可读形式的计算机程序称为源代码。源代码需要另一个计算机程序来执行，因为计算机只能执行其本机机器指令。因此，可以使用为该语言编写的编译器将源代码翻译成机器指令。 （汇编语言程序是使用汇编器翻译的。）生成的文件称为可执行文件。或者，源代码可以在为该语言编写的解释器中执行。&lt;/p>
&lt;h1 id="command">Command&lt;a class="td-heading-self-link" href="#command" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Command_(computing)">Wiki，Command&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Command(命令)&lt;/strong> 是 &lt;a href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Program.md">Program&lt;/a> 执行特定任务的指令，是一种抽象的概念。程序本身可以执行多种行为，通过不同的选项控制该程序所执行的行为，由程序和参数组合成的整体，可以看做是命令。若不指定参数，就相当于该命令执行程序默认的行为。&lt;/p></description></item><item><title>Docs: 计算机科学</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/</guid><description/></item><item><title>Docs: API</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/API/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/API/</guid><description/></item><item><title>Docs: 低级编程语言</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E4%BD%8E%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E4%BD%8E%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/</guid><description/></item><item><title>Docs: 高级编程语言</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/</guid><description/></item><item><title>Docs: 标记语言</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80/</guid><description/></item><item><title>Docs: 无法分类的语言</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E6%97%A0%E6%B3%95%E5%88%86%E7%B1%BB%E7%9A%84%E8%AF%AD%E8%A8%80/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E6%97%A0%E6%B3%95%E5%88%86%E7%B1%BB%E7%9A%84%E8%AF%AD%E8%A8%80/</guid><description/></item><item><title>Docs: 开发框架</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Framework/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Framework/</guid><description/></item><item><title>Docs: 编程技术</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/</guid><description/></item><item><title>Docs: 编程工具</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/</guid><description/></item><item><title>Docs: Programming environment</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-environment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-environment/</guid><description/></item><item><title>Docs: 项目实战</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/</guid><description/></item></channel></rss>