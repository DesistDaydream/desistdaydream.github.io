<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SCM on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/SCM/</link><description>Recent content in SCM on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/SCM/index.xml" rel="self" type="application/rss+xml"/><item><title>SCM</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/SCM/SCM/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/SCM/SCM/</guid><description>概述 参考：
SCM(Software Configuration Management，软件配置管理系统)。
SCM(Source Control Management，源代码控制管理系统)。
Git、Subversion(SVN)、CVS、Perforce、ClearCase 等都可以称为 SCM。
可以称为 SCM 的在线网站：
GitLab GitHub SourceForge GNU/git SCM 可以算是源码管理相关工具的统称。</description></item><item><title>GitHub 上的 PR 全过程</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/SCM/GitHub-%E4%B8%8A%E7%9A%84-PR-%E5%85%A8%E8%BF%87%E7%A8%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/SCM/GitHub-%E4%B8%8A%E7%9A%84-PR-%E5%85%A8%E8%BF%87%E7%A8%8B/</guid><description>概述 参考：
原文链接 今天我准备和你详细介绍如何开始参与开源项目，帮助你在 GitHub 上完成第一个 PR 的合入。
当然，除了正常的 PR 合入流程之外，我还准备详细介绍一下如果一个 PR 提交后遇到了冲突、需要追加 commits、需要合并 commits 等等相对复杂问题该如何解决。
总的来说，本文计划分为 4 个部分：
谈谈为什么要参与开源项目以及我为什么要介绍如何 PR 谈谈怎么开始参与开源项目，也就是如何寻找合适的开源项目、如何寻找贡献点 介绍怎么上手 PR 流程，即从 fork 到 push 全流程 介绍提交了 PR 之后遇到各种常见问题如何解决 Ok, let&amp;rsquo;s get started!
二、为什么要参与开源项目 本文我不打算长篇大论 “为什么要参与开源”，详细介绍参与开源项目的收获，我想仅从“提升编码能力” 角度谈一谈“为什么要参与开源项目”。
在面试的时候我有个习惯，如果候选人在自己的简历里说到自己熟悉某一门语言，我就会习惯性问他一个问题：
你有没有阅读过某个开源项目的源码？或者更进一步，有没有参与过某个开源社区，或者说给开源项目提过 PR？
如果答案是肯定的，比如候选人说自己读过部分 Kubernetes 模块的源码，再进一步我确认他真的读过并且读懂了或者说真的提交过 bugfix/feature 类型的 PR，那我就不再问编程语言层面的问题了，因为我相信能看懂一个成熟的开源项目部分模块源码或者能够提交 bugfix/feature 类型的 PR 已经说明了一切。
我自己在学习 Golang 的时候，大致分为两个阶段：
学习基础语法，开始写项目，直到能够熟练完成各种业务功能的开发； 看了一些开源项目的源码，深感受益颇多，编码水平再上一个台阶。 差不多也就是在看 Kubernetes 项目源码的时候，我深刻认识到一般的企业内部项目和汇集全世界最优秀的程序员智慧结晶的开源项目之间的巨大差距，也意识到学习优秀开源项目源码对于一个程序员编码水平提升的重要性（当然，你可以说 Google 内部也存在非开源的非常优秀的代码，这毫无疑问，但是我想今天我们没有必要讨论特例）。
认真阅读开源项目源码，你总会发现一些小瑕疵，这时候提一个 PR(Pull Request)，让你的代码合入开源项目，运行在 “世界每一个角落”，那是多么有趣的事情！而成功合入第一个 PR 往往就像打开潘多拉魔盒一样，你会进入到另外一个世界，开始接触到开源社区，感受开源的魅力！</description></item><item><title>定时同步 GitHub 的代码仓库到 Gitee</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/SCM/%E5%AE%9A%E6%97%B6%E5%90%8C%E6%AD%A5-GitHub-%E7%9A%84%E4%BB%A3%E7%A0%81%E4%BB%93%E5%BA%93%E5%88%B0-Gitee/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/SCM/%E5%AE%9A%E6%97%B6%E5%90%8C%E6%AD%A5-GitHub-%E7%9A%84%E4%BB%A3%E7%A0%81%E4%BB%93%E5%BA%93%E5%88%B0-Gitee/</guid><description>概述 参考：
利用 GitHub Action 同步 该功能已经有很多实现了，这篇文章以 https://github.com/Yikun/hub-mirror-action 项目为例。这个项目的基本逻辑是这样的：
通过 GitHub Actions 构建一个 Docker 容器，在 Docker 容器中，引入 Gitee 的私钥，这样可以在容器中使用 git 命令向 Gitee push 代码而不用输入密码了 容器启动后，在容器内 pull github 上的代码，并 push 到 gitee 上。 首先先来一个最基本的 Action 的 workflow 文件示例
name: Gitee repos mirror periodic job on: # 取消 push 的注释后，向本仓库推送代码即可开始 Gitee 同步 # push: schedule: # 每天北京时间9点跑 - cron: &amp;#34;0 1 * * *&amp;#34; jobs: build: runs-on: ubuntu-latest steps: - name: Cache phpdragon src repos # 使用 github 官方提供的 action 来引用发行版的主要版本 uses: actions/cache@v1 with: path: /home/runner/work/phpdragon/phpdragon-cache key: ${{ runner.</description></item></channel></rss>