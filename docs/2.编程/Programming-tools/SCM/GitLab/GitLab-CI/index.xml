<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>GitLab CI on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/SCM/GitLab/GitLab-CI/</link><description>Recent content in GitLab CI on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/SCM/GitLab/GitLab-CI/index.xml" rel="self" type="application/rss+xml"/><item><title>GitLab CI</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/SCM/GitLab/GitLab-CI/GitLab-CI/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/SCM/GitLab/GitLab-CI/GitLab-CI/</guid><description>概述 参考:
官方文档，主题 - 使用 CI/CD 构建你的应用 在 WebUI 左侧导航栏 Build 标签中可以看到下面几个标签
Pipelines # 查看根据 .gitlab-ci.yml 生成的流水线 Jobs # 查看 Pipelines 中的所有 Jobs Pipeline editor # 在线编辑 gitlab-ci.yml 文件 Pipeline schedules Artifacts # 查看 Artifacts</description></item><item><title>gitlab-ci.yml</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/SCM/GitLab/GitLab-CI/gitlab-ci.yml/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/SCM/GitLab/GitLab-CI/gitlab-ci.yml/</guid><description>概述 参考:
官方文档，CI/CD YAML 语法参考 GitLab 默认使用 .gitlab-ci.yml 作为 Pipeline 的配置文件。
顶层字段
default(OBJECT) # 有些字段可以作为全局定义，以便让其效果作用在该 Pipeline 的所有 Jobs 中。 workflow(workflow) # 控制运行 Pipeline 的时机 include([]include) # 使用 include 在 CI/CD 配置中包含外部 YAML 文件。将文件 gitlab-ci.yml 成多个文件以提高可读性，或减少在多个位置重复相同的配置。 stages([]STRING) # 定义要执行哪些阶段，也就是说要执行哪些 Job。${JOB_NAME}.stage 字段的值，就是被 stages 识别 JOB 的唯一标识符。 variables(map[STRING]STRING) # 定义全局变量，可以被所有 Job 使用。 ${JOB_NAME}(Jobs) # workflow include Jobs https://docs.gitlab.com/ee/ci/yaml/#job-keywords
定义 Pipeline 中每个 Job 如何运行的
与 Job 是否运行以及如何运行的前置条件相关字段
image(STRING) # 运行 Job 要使用的容器镜像。TODO: 若不指定默认使用的时什么？好像是创建 runner 时可以指定默认使用的 image？</description></item><item><title>Artifacts</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/SCM/GitLab/GitLab-CI/Artifacts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/SCM/GitLab/GitLab-CI/Artifacts/</guid><description>概述 参考:
官方文档，CI - jobs - job 工件 每个 Job 可以输出一些 包含文件和目录的 Archive File(归档文件)、元数据、etc. ，这些输出称为 Artifacts(工件)。
[!Warning] Artifacts 通常指我们构建的二进制文件、打包好的归档文件、etc. 。这些文件对项目来说，通常都是提供给使用者的，比如像 GitHub 的 Release 中的 Assets。
但是 GitLab 不建议将 Artifacts 的作为 Release Assets，因为 Artfacts 通常来说是短暂的，很有可能被轻易删除。因为对于 GitLab 来说，Release 中的 Assets 并不是被上传的文件，仅仅是一个名称和 URL 连接，指向其他地方。
更常见的作法是将 Artifacts 作为 Package 上传到 Package Registry，让 Release Assets 设置为指向 Package 的 URL。参考: https://docs.gitlab.com/ee/user/packages/generic_packages/#publish-a-generic-package-by-using-cicd
创建 Artifact 的最简单示例:
pdf: script: xelatex mycv.tex artifacts: paths: - mycv.pdf 在这个示例中，一个名为 pdf 的 JOB 调用 xelatex 命令从 LaTeX 源文件 mycv.</description></item></channel></rss>