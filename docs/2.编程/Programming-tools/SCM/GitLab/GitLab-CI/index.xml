<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦的站点 – GitLab CI</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/SCM/GitLab/GitLab-CI/</link><description>Recent content in GitLab CI on 断念梦的站点</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/SCM/GitLab/GitLab-CI/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: GitLab CI</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/SCM/GitLab/GitLab-CI/GitLab-CI/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/SCM/GitLab/GitLab-CI/GitLab-CI/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.gitlab.com/ee/topics/build_your_application.html">官方文档，主题 - 使用 CI/CD 构建你的应用&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>在 WebUI 左侧导航栏 &lt;strong>Build&lt;/strong> 标签中可以看到下面几个标签&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Pipelines&lt;/strong> # 查看根据 .gitlab-ci.yml 生成的流水线&lt;/li>
&lt;li>&lt;strong>Jobs&lt;/strong> # 查看 Pipelines 中的所有 Jobs&lt;/li>
&lt;li>&lt;strong>Pipeline editor&lt;/strong> # 在线编辑 &lt;a href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming%20tools/SCM/GitLab/GitLab%20CI/gitlab-ci.yml.md">gitlab-ci.yml&lt;/a> 文件&lt;/li>
&lt;li>&lt;strong>Pipeline schedules&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Artifacts&lt;/strong> # 查看 &lt;a href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming%20tools/SCM/GitLab/GitLab%20CI/Artifacts.md">Artifacts&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Docs: gitlab-ci.yml</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/SCM/GitLab/GitLab-CI/gitlab-ci.yml/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/SCM/GitLab/GitLab-CI/gitlab-ci.yml/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.gitlab.com/ee/ci/yaml/">官方文档，CI/CD YAML 语法参考&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>GitLab 默认使用 .gitlab-ci.yml 作为 Pipeline 的配置文件。&lt;/p>
&lt;p>顶层字段&lt;/p>
&lt;ul>
&lt;li>&lt;strong>default&lt;/strong>(OBJECT) # 有些字段可以作为全局定义，以便让其效果作用在该 Pipeline 的所有 Jobs 中。&lt;/li>
&lt;li>&lt;strong>workflow&lt;/strong>(&lt;a href="#workflow">workflow&lt;/a>) # 控制运行 Pipeline 的时机&lt;/li>
&lt;li>&lt;strong>include&lt;/strong>([]&lt;a href="#include">include&lt;/a>) # 使用 include 在 CI/CD 配置中包含外部 YAML 文件。将文件 gitlab-ci.yml 成多个文件以提高可读性，或减少在多个位置重复相同的配置。&lt;/li>
&lt;li>&lt;strong>stages&lt;/strong>([]STRING) # 定义要执行哪些阶段，也就是说要执行哪些 Job。&lt;code>${JOB_NAME}.stage&lt;/code> 字段的值，就是被 stages 识别 JOB 的唯一标识符。&lt;/li>
&lt;li>&lt;strong>variables&lt;/strong>(map[STRING]STRING) # 定义全局变量，可以被所有 Job 使用。&lt;/li>
&lt;li>&lt;strong>${JOB_NAME}&lt;/strong>(&lt;a href="#jobs">Jobs&lt;/a>) #&lt;/li>
&lt;/ul>
&lt;h1 id="workflow">workflow&lt;a class="td-heading-self-link" href="#workflow" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h1 id="include">include&lt;a class="td-heading-self-link" href="#include" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h1 id="jobs">Jobs&lt;a class="td-heading-self-link" href="#jobs" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;a href="https://docs.gitlab.com/ee/ci/yaml/#job-keywords">https://docs.gitlab.com/ee/ci/yaml/#job-keywords&lt;/a>&lt;/p>
&lt;p>定义 Pipeline 中每个 Job 如何运行的&lt;/p>
&lt;hr>
&lt;p>与 Job 是否运行以及如何运行的前置条件相关字段&lt;/p>
&lt;p>&lt;strong>image&lt;/strong>(STRING) # 运行 Job 要使用的容器镜像。TODO: 若不指定默认使用的时什么？好像是创建 runner 时可以指定默认使用的 image？&lt;/p>
&lt;p>&lt;strong>stage&lt;/strong>(STRING) # Job 的阶段。顶层字段 stages 所使用的就是该字段定义的值。&lt;code>默认值: test&lt;/code>&lt;/p>
&lt;p>&lt;strong>tags&lt;/strong>([]STRING) # 运行 Job 要使用的 runner。只有具有相同 Tag 的 runner 才会被调度执行该 Job&lt;/p>
&lt;p>&lt;strong>needs&lt;/strong>([]OBJECT) # 指定运行 Job 需要满足的条件。&lt;/p>
&lt;hr>
&lt;p>Job 要执行的具体内容的相关字段&lt;/p>
&lt;p>&lt;strong>befor_script&lt;/strong>([]STRING) # 运行 script 字段指定的脚本之前要运行的脚本&lt;/p>
&lt;p>&lt;strong>script&lt;/strong>([]STRING) # 执行 Job 时要运行的脚本&lt;/p>
&lt;p>&lt;strong>release&lt;/strong>(&lt;a href="#release">release&lt;/a>) # 与 Release 相关的配置。可以创建 Release&lt;/p>
&lt;hr>
&lt;p>其他&lt;/p>
&lt;p>&lt;strong>artifacts&lt;/strong>(&lt;a href="#artifacts">artifacts&lt;/a>) # 定义如何处理在 Job 运行中产生的 &lt;a href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming%20tools/SCM/GitLab/GitLab%20CI/Artifacts.md">Artifacts(工件)&lt;/a>&lt;/p>
&lt;h2 id="artifacts">artifacts&lt;a class="td-heading-self-link" href="#artifacts" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>与 &lt;a href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming%20tools/SCM/GitLab/GitLab%20CI/Artifacts.md">Artifacts(工件)&lt;/a> 相关的配置，用以指定在 Job 中要将哪些文件保存为 Artifact，以及如何管理这些 Artifacts。&lt;/p>
&lt;p>&lt;strong>paths&lt;/strong>([]STRING) # 指定要作为 Artifact 的文件或目录的路径。该字段是生成 Artifacts 的最基本配置。指定路径下的文件将会被打包成归档文件，归档文件名称使用 name 字段指定的值。&lt;/p>
&lt;p>&lt;strong>expire_in&lt;/strong>(STRING) # Artifacts 的过期时间。过期的 Artifacts 将会被删除。可用的格式有: &lt;code>never、42、42 seconds、3 mins 4 sec、2 hrs 20 min、2h20min、6 mos 1 day、47 yrs 6 mos and 4d、3 weeks and 2 days&lt;/code>。&lt;code>默认值: never&lt;/code>。若不指定单位只使用数字，则默认单位: 秒。&lt;/p>
&lt;p>&lt;strong>name&lt;/strong>(STRING) # 指定 &lt;a href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Filesystem/Archive%20File(%E5%BD%92%E6%A1%A3%E6%96%87%E4%BB%B6).md">Archive File(归档文件)&lt;/a> 类型的 Artifacts 的名字。&lt;code>默认值: artifacts&lt;/code>，默认生成 artifacts.zip 文件。&lt;/p>
&lt;p>&lt;strong>reports&lt;/strong>(&lt;a href="#reports">reports&lt;/a>) # 处理 &lt;a href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming%20tools/SCM/GitLab/GitLab%20CI/Artifacts.md#Report%20Artifacts">Report&lt;/a> 类型的 Artifacts。用以指定一些额外的内容作为 Artifacts。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>dotenv&lt;/strong>(STRING) # 收集指定的环境变量文件作为 Artifact，该文件中定义的变量可以作为下游 JOB 的环境变量。文件格式为 &lt;code>VAR_NAME=VAR_VALUE&lt;/code>，其中 VAR_NAME 可以在下游 JOB 的环境变量。&lt;/li>
&lt;/ul>
&lt;h2 id="release">release&lt;a class="td-heading-self-link" href="#release" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>创建 Release 时，需要使用 GitLab 研发的 release-cli 程序。可以使用 registry.gitlab.com/gitlab-org/release-cli:latest 容器，内部包含 release-cli 程序；也可以使用任意镜像手动安装 release-cli。&lt;/p>
&lt;h1 id="variables变量">Variables(变量)&lt;a class="td-heading-self-link" href="#variables%e5%8f%98%e9%87%8f" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.gitlab.com/ee/ci/variables/">官方文档，CI - 变量&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>在&lt;a href="https://docs.gitlab.com/ee/ci/variables/predefined_variables.html">这里&lt;/a>可以看到 GitLab 内部预定义的所有变量列表，都是以 CI 开都的，比如 CI_SERVER_HOST、CI_COMMIT_TAG、etc. 。&lt;/p>
&lt;h1 id="release发布的版本">Release(发布的版本)&lt;a class="td-heading-self-link" href="#release%e5%8f%91%e5%b8%83%e7%9a%84%e7%89%88%e6%9c%ac" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>最佳实践&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.gitlab.com/ee/user/project/releases/release_fields.html#use-a-generic-package-for-attaching-binaries">将 Artifacts 上传到 Package registry，并在 Release Asset 中使用 Package 的 URL&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="简单示例">简单示例&lt;a class="td-heading-self-link" href="#%e7%ae%80%e5%8d%95%e7%a4%ba%e4%be%8b" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">stages&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">build&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">release&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">build-job&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">tags&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">instance-runner-tc&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">stage&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">build&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">script&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">bash observability/monitoring/packaging_server.sh&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">artifacts&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">paths&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">server.tar.gz&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">release-job&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">tags&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">instance-runner-tc&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">stage&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">release&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">image&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">registry.gitlab.com/gitlab-org/release-cli:latest&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># 解决 release-cli 无法信任自建 CA 问题。https://gitlab.com/gitlab-org/release-cli/-/issues/47&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">before_script&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">sed -i &amp;#39;s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g&amp;#39; /etc/apk/repositories&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">apk --no-cache add openssl ca-certificates&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">mkdir -p /usr/local/share/ca-certificates/extra&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">openssl s_client -connect ${CI_SERVER_HOST}:${CI_SERVER_PORT} -servername ${CI_SERVER_HOST} -showcerts &amp;lt;/dev/null 2&amp;gt;/dev/null | sed -e &amp;#39;/-----BEGIN/,/-----END/!d&amp;#39; | tee &amp;#34;/usr/local/share/ca-certificates/${CI_SERVER_HOST}.crt&amp;#34; &amp;gt;/dev/null&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">update-ca-certificates&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">script&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">echo &amp;#34;检查 CI_COMMIT_TAG ${CI_COMMIT_TAG}&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">ls -l&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">test -f server.tar.gz &amp;amp;&amp;amp; echo &amp;#34;server.tar.gz exists&amp;#34; || echo &amp;#34;server.tar.gz does not exist&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">release&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Release $CI_COMMIT_TAG&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># tag_name: $CI_COMMIT_TAG&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">tag_name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;v1.0.0&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">description&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Release created by GitLab CI&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">assets&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">links&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;server.tar.gz&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">url&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;${CI_PROJECT_URL}/-/jobs/artifacts/${CI_COMMIT_REF_NAME}/raw/server.tar.gz?job=build-job&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">link_type&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;package&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">needs&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">job&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">build-job&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">artifacts&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Artifacts</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/SCM/GitLab/GitLab-CI/Artifacts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/SCM/GitLab/GitLab-CI/Artifacts/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.gitlab.com/ee/ci/jobs/job_artifacts.html">官方文档，CI - jobs - job 工件&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>每个 Job 可以输出一些 包含文件和目录的 &lt;a href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Filesystem/Archive%20File(%E5%BD%92%E6%A1%A3%E6%96%87%E4%BB%B6).md">Archive File(归档文件)&lt;/a>、元数据、etc. ，这些输出称为 &lt;strong>Artifacts(工件)&lt;/strong>。&lt;/p>
&lt;blockquote>
&lt;p>[!Warning]
Artifacts 通常指我们构建的二进制文件、打包好的归档文件、etc. 。这些文件对项目来说，通常都是提供给使用者的，比如像 &lt;a href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming%20tools/SCM/GitHub/GitHub.md">GitHub&lt;/a> 的 Release 中的 Assets。&lt;/p>
&lt;p>但是 &lt;a href="https://docs.gitlab.com/ee/user/project/releases/release_fields.html#use-a-generic-package-for-attaching-binaries">&lt;font color="#ff0000">GitLab 不建议将 Artifacts 的作为 Release Assets，因为 Artfacts 通常来说是短暂的，很有可能被轻易删除&lt;/font>&lt;/a>。因为对于 GitLab 来说，Release 中的 Assets 并不是被上传的文件，仅仅是一个名称和 URL 连接，指向其他地方。&lt;/p>
&lt;p>更常见的作法是将 Artifacts 作为 Package 上传到 &lt;strong>&lt;a href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming%20tools/SCM/GitLab/Packages%20AND%20Registries.md">Package Registry&lt;/a>&lt;/strong>，让 Release Assets 设置为指向 Package 的 URL。参考: &lt;a href="https://docs.gitlab.com/ee/user/packages/generic_packages/#publish-a-generic-package-by-using-cicd">https://docs.gitlab.com/ee/user/packages/generic_packages/#publish-a-generic-package-by-using-cicd&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>创建 Artifact 的最简单示例:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">pdf&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">script&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">xelatex mycv.tex&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">artifacts&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">paths&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">mycv.pdf&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在这个示例中，一个名为 pdf 的 JOB 调用 xelatex 命令从 LaTeX 源文件 mycv.tex 构建 PDF 文件，生成了名为 mycv.pdf 的文件，通过 paths 关键字指定了 mycv.pdf 文件作为 Artifact。&lt;/p>
&lt;p>可以通过 WebUI 或者 &lt;a href="https://docs.gitlab.com/ee/api/job_artifacts.html#get-job-artifacts">API&lt;/a> 管理（查看、下载、删除、etch.）这些 Artifacts。&lt;/p>
&lt;p>在 WebUI 中，点击项目左侧导航栏中 &lt;strong>Build &amp;gt; Arifacts&lt;/strong>，查看该项目中所有 Job 产生的 Artifacts。包括如下几类：&lt;/p>
&lt;ul>
&lt;li>在 &lt;a href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming%20tools/SCM/GitLab/GitLab%20CI/gitlab-ci.yml.md">gitlab-ci.yml&lt;/a> 文件中通过 &lt;code>artifacts&lt;/code> 关键字创建的 Artifacts&lt;/li>
&lt;li>&lt;a href="#Report%20artifacts">Report artifacts&lt;/a>&lt;/li>
&lt;li>Job 的日志和元数据作为单独的 Artifacts&lt;/li>
&lt;/ul>
&lt;h1 id="report-artifacts">Report Artifacts&lt;a class="td-heading-self-link" href="#report-artifacts" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.gitlab.com/ee/ci/yaml/artifacts_reports.html">官方文档，artifacts reports&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>reports 功能可以收集一些复合 GitLab 内置标准模板的文件作为 Artifaces，比如 测试报告、代码质量报告、环境变量、etc.&lt;/p></description></item></channel></rss>