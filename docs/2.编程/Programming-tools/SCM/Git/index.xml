<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦的站点 – Git</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/SCM/Git/</link><description>Recent content in Git on 断念梦的站点</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/SCM/Git/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Git 配置详解</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/SCM/Git/Git-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/SCM/Git/Git-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration">官方 Book，自定义 Git-Git 配置&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://git-scm.com/docs/git-config">官方文档，git-config&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Git 使用一系列&lt;/p>
&lt;h1 id="gitconfig-文件配置详解">~/.gitconfig 文件配置详解&lt;a class="td-heading-self-link" href="#gitconfig-%e6%96%87%e4%bb%b6%e9%85%8d%e7%bd%ae%e8%af%a6%e8%a7%a3" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>该配置文件可以手动修改，也可以通过 git config &amp;ndash;global XXX 命令修改。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ini" data-lang="ini">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">[filter &amp;#34;lfs&amp;#34;]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">required&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">clean&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">git-lfs clean -- %f&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">smudge&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">git-lfs smudge -- %f&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">process&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">git-lfs filter-process&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">[user]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">name&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">DesistDaydream&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">email&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">XXXXXXXX@qq.com&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">[core]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">autocrlf&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">input&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">[credential]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">helper&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">store&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>git config &amp;ndash;global credential.helper store&lt;/strong>&lt;/p>
&lt;h1 id="core-部分">core 部分&lt;a class="td-heading-self-link" href="#core-%e9%83%a8%e5%88%86" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;strong>autocrlf&lt;/strong>(STRING) # 使用 git 时如何处理文件的换行符&lt;/p>
&lt;ul>
&lt;li>input # 如果您使用的是使用 LF 行结尾的 Linux 或 macOS 系统，那么您不希望 Git 在您签出文件时自动转换它们；但是，如果意外引入了以 CRLF 结尾的文件，那么您可能需要 Git 来修复它。您可以通过将 core.autocrlf 设置为 input 来告诉 Git 在提交时将 CRLF 转换为 LF，但反之则不然：&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>quotePath&lt;/strong>(BOOLEAN) # 决定了 git 在控制台中如何显示非 ASCII 的文件名。&lt;code>默认值：true&lt;/code>&lt;/p>
&lt;ul>
&lt;li>如果 core.quotePath 为 true，那么 git 会用八进制的引号表示法来显示文件名，例如 &amp;ldquo;\344\270\255\345\233\276.txt&amp;rdquo;。如果 core.quotePath 为 false，那么 git 会直接显示文件名的 UTF-8 编码，例如 &amp;ldquo;中文.txt&amp;rdquo;。&lt;/li>
&lt;li>core.quotePath 的设置会影响一些 git 命令的输出，例如 git status, git diff, git log 等。&lt;/li>
&lt;/ul>
&lt;h1 id="http-部分">http 部分&lt;a class="td-heading-self-link" href="#http-%e9%83%a8%e5%88%86" aria-label="Heading self-link">&lt;/a>&lt;/h1></description></item><item><title>Docs: Git</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/SCM/Git/Git/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/SCM/Git/Git/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://git-scm.com/">官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/YBRdyyxkv3lpNDyqrBiLCA">公众号，Git 各指令的本质&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Git 是一个免费的开源分布式版本控制系统，旨在快速高效地处理从小型到大型项目的所有内容。&lt;/p>
&lt;p>Git 易于学习，占地面积小，具有闪电般的快速性能。它具有廉价的本地分支，方便的暂存区域和多个工作流等功能，其性能优于 Subversion，CVS，Perforce 和 ClearCase 等 SCM 工具。&lt;/p>
&lt;h2 id="git-优势">Git 优势&lt;a class="td-heading-self-link" href="#git-%e4%bc%98%e5%8a%bf" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Git 是一个分布式代码管理工具，在讨论分布式之前避免不了提及一下什么是中央式代码管理仓库：&lt;/p>
&lt;ul>
&lt;li>中央式：所有的代码保存在中央服务器，所以提交必须依赖网络，并且每次提交都会带入到中央仓库，如果是协同开发可能频繁触发代码合并，进而增加提交的成本和代价。最典型的就是 SVN。&lt;/li>
&lt;li>分布式：可以在本地提交，不需要依赖网络，并且会将每次提交自动备份到本地。每个开发者都可以把远程仓库 clone 一份到本地，并会把提交历史一并拿过来。代表就是 Git。&lt;/li>
&lt;/ul>
&lt;p>那 Git 相比于 SVN 有什么优势呢？打个比方：“巴拉巴拉写了一大堆代码，突然发现写的有问题，我想回到一个小时之前”，对于这种情况 Git 的优势就很明显了，因为 commit 的成本比较小并且本地会保存所有的提交记录，随时随刻可以进行回退。在这并不是说 SVN 的不能完成这种操作，只是 Git 的回退会显得更加的优雅。Git 相比于中央式工具还有很多优点，就不一一列举了&lt;/p>
&lt;h2 id="git-文件状态">Git 文件状态&lt;a class="td-heading-self-link" href="#git-%e6%96%87%e4%bb%b6%e7%8a%b6%e6%80%81" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>在 Git 中文件大概分为三种状态：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>modified(修改)&lt;/strong> # Git 可以感知到工作目录中哪些文件被修改了，然后把修改的文件加入到 modified 区域&lt;/li>
&lt;li>&lt;strong>staged(暂存)&lt;/strong> # 通过 add 命令将工作目录中修改的文件提交到暂存区，等候被 commit&lt;/li>
&lt;li>&lt;strong>committed(提交)&lt;/strong> # 将暂存区文件 commit 至 Git 目录中永久保存&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>commit 节点&lt;/strong>
为了便于表述，本篇文章我会通过节点代称 commit 提交。
在 Git 中每次提交都会生成一个节点，而每个节点都会有一个哈希值作为唯一标示，多次提交会形成一个线性节点链（不考虑 merge 的情况），如图。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/sq07re/1622380398088-7ac43710-9863-46af-b3f4-6b30c76a3558.webp" alt="">&lt;/p>
&lt;p>节点上方是通过 SHA1 计算的哈希值。&lt;/p>
&lt;p>C2 节点包含 C1 提交内容,同样 C3 节点包含 C1、C2 提交内容。&lt;/p>
&lt;p>&lt;strong>HEAD&lt;/strong>&lt;/p>
&lt;p>HEAD 是 Git 中非常重要的一个概念，你可以称它为指针或者引用，它可以指向任意一个节点，并且指向的节点始终为当前工作目录，换句话说就是当前工作目录(也就是你所看到的代码)就是 HEAD 指向的节点。&lt;/p>
&lt;p>还以图 1 举例，如果 HEAD 指向 C2 那工作目录对应的就是 C2 节点。具体如何移动 HEAD 指向后面会讲到，此处不要纠结。&lt;/p>
&lt;p>同时 HEAD 也可以指向一个分支，间接指向分支所指向的节点。&lt;/p>
&lt;p>&lt;strong>远程仓库&lt;/strong>&lt;/p>
&lt;p>虽然 Git 会把代码以及历史保存在本地，但最终还是要提交到服务器上的远程仓库。通过 clone 命令可以把远程仓库的代码下载到本地，同时也会将提交历史、分支、HEAD 等状态一并同步到本地，但这些状态并不会实时更新，需要手动从远程仓库去拉取，至于何时拉、怎么拉后面章节会讲到。&lt;/p>
&lt;p>通过远程仓库为中介，你可以和你的同事进行协同开发，开发完新功能后可以申请提交至远程仓库，同时也可以从远程仓库拉取你同事的代码。&lt;/p>
&lt;p>注意点：因为你和你的同事都会以远程仓库的代码为基准，所以要时刻保证远程仓库的代码质量，切记不要将未经检验测试的代码提交至远程仓库。&lt;/p>
&lt;h2 id="分支">分支&lt;a class="td-heading-self-link" href="#%e5%88%86%e6%94%af" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>什么是分支？&lt;/strong>&lt;/p>
&lt;p>分支也是 Git 中相当重要的一个概念，当一个分支指向一个节点时，当前节点的内容即是该分支的内容，它的概念和 HEAD 非常接近同样也可以视为指针或引用，不同的是分支可以存在多个，而 HEAD 只有一个。通常会根据功能或版本建立不同的分支。&lt;/p>
&lt;p>&lt;strong>那分支有什么用呢？&lt;/strong>&lt;/p>
&lt;p>举个例子：你们的 App 经历了千辛万苦终于发布了 v1.0 版本，由于需求紧急 v1.0 上线之后便马不停蹄的开始 v1.1，正当你开发的兴起时，QA 同学说用户反馈了一些 bug，需要修复然后重新发版，修复 v1.0 肯定要基于 v1.0 的代码，可是你已经开发了一部分 v1.1 了，此时怎么搞？&lt;/p>
&lt;p>面对上面的问题通过引入分支概念便可优雅的解决，如图 ：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/sq07re/1622380397995-e668f4eb-8196-48d8-827e-38b63bb28ad1.webp" alt="">&lt;/p>
&lt;ul>
&lt;li>先看左边示意图，假设 C2 节点既是 v1.0 版本代码，上线后在 C2 的基础上新建一个分支 ft-1.0&lt;/li>
&lt;li>再看右边示意图，在 v1.0 上线后可在 master 分支开发 v1.1 内容，收到 QA 同学反馈后提交 v1.1 代码生成节点 C3，随后切换到 ft-1.0 分支做 bug 修复，修复完成后提交代码生成节点 C4，然后再切换到 master 分支并合并 ft-1.0 分支，到此我们就解决了上面提出的问题&lt;/li>
&lt;/ul>
&lt;p>除此之外利用分支还可以做很多事情，比如现在有一个需求不确定要不要上线，但是得先做，此时可以单独创建一个分支开发该功能，等到啥时候需要上线直接合并到主分支即可。分支适用的场景很多就不一一列举了。&lt;/p>
&lt;p>注意点：当在某个节点创建一个分支后，并不会把该节点对应的代码复制一份出来，只是将新分支指向该节点，因此可以很大程度减少空间上的开销。一定要记着不管是 HEAD 还是分支它们都只是引用而已，量级非常轻。&lt;/p>
&lt;h1 id="git-安装">Git 安装&lt;a class="td-heading-self-link" href="#git-%e5%ae%89%e8%a3%85" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>windows 版 git 安装完成后，git config &amp;ndash;global core.autocrlf input 执行该命令让，git 在 pull 时不转换换行符为 CRLF，而在 push 时，所有 CRLF 转换为 LF。&lt;/p>
&lt;p>也可通过 .gitconfig 配置文件进行修改 ，修改其中的 autocrlf = input 即可。&lt;/p>
&lt;p>&lt;a href="https://github.com/cssmagic/blog/issues/22">https://github.com/cssmagic/blog/issues/22&lt;/a>&lt;/p>
&lt;p>配置换行符官方文档：&lt;a href="https://docs.github.com/cn/github/using-git/configuring-git-to-handle-line-endings">https://docs.github.com/cn/github/using-git/configuring-git-to-handle-line-endings&lt;/a>&lt;/p>
&lt;h1 id="git-关联文件与配置">Git 关联文件与配置&lt;a class="td-heading-self-link" href="#git-%e5%85%b3%e8%81%94%e6%96%87%e4%bb%b6%e4%b8%8e%e9%85%8d%e7%bd%ae" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;strong>~/.gitconfig&lt;/strong> # git 通用配置文件&lt;/p>
&lt;p>&lt;strong>~/.git-credentials&lt;/strong> # 登录后凭据的保存路径&lt;/p>
&lt;p>gitconfig 配置内容与 git config &amp;ndash;global 命令一一对应&lt;/p>
&lt;p>比如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 执行如下命令&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git config --global user.name &lt;span style="color:#4e9a06">&amp;#34;DesistDaydream&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># gitconfig 文件中生成如下内容&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>user&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">name&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> DesistDaydream
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中 user 配置环境标识，name 为该配置环境中的关键字。&lt;/p>
&lt;p>&lt;strong>${Project}/.git/&lt;/strong> # 通过 Git 管理的项目的根目录下通常都有一个 .git/ 目录。&lt;/p></description></item><item><title>Docs: git CLI</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/SCM/Git/git-CLI/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/SCM/Git/git-CLI/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://git-scm.com/docs/git">https://git-scm.com/docs/git&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>git 工具通过多个子命令来使用，可以按照功能对这些命令进行划分&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#%E8%AE%BE%E7%BD%AE%E4%B8%8E%E9%85%8D%E7%BD%AE">设置与配置 Git&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E8%8E%B7%E5%8F%96%E5%92%8C%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE">获取和创建项目&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%88%86%E6%94%AF%E4%B8%8E%E5%90%88%E5%B9%B6">分支与合并&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%88%86%E4%BA%AB%E5%92%8C%E6%9B%B4%E6%96%B0%E9%A1%B9%E7%9B%AE">分享和更新项目&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="设置与配置">设置与配置&lt;a class="td-heading-self-link" href="#%e8%ae%be%e7%bd%ae%e4%b8%8e%e9%85%8d%e7%bd%ae" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="config---配置-git">config - 配置 git&lt;a class="td-heading-self-link" href="#config---%e9%85%8d%e7%bd%ae-git" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>获取和设置存储库或全局选项&lt;/p>
&lt;h3 id="syntax语法">Syntax(语法)&lt;a class="td-heading-self-link" href="#syntax%e8%af%ad%e6%b3%95" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git config &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&amp;lt;file-option&amp;gt;&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>--type&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&amp;lt;type&amp;gt;&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>--fixed-value&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>--show-origin&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>--show-scope&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>-z&lt;span style="color:#000;font-weight:bold">|&lt;/span>--null&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &amp;lt;name&amp;gt; &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&amp;lt;value&amp;gt; &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&amp;lt;value-pattern&amp;gt;&lt;span style="color:#ce5c00;font-weight:bold">]]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git config &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&amp;lt;file-option&amp;gt;&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>--type&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&amp;lt;type&amp;gt;&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> --add &amp;lt;name&amp;gt; &amp;lt;value&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git config &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&amp;lt;file-option&amp;gt;&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>--type&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&amp;lt;type&amp;gt;&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>--fixed-value&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> --replace-all &amp;lt;name&amp;gt; &amp;lt;value&amp;gt; &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&amp;lt;value-pattern&amp;gt;&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git config &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&amp;lt;file-option&amp;gt;&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>--type&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&amp;lt;type&amp;gt;&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>--show-origin&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>--show-scope&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>-z&lt;span style="color:#000;font-weight:bold">|&lt;/span>--null&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>--fixed-value&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> --get &amp;lt;name&amp;gt; &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&amp;lt;value-pattern&amp;gt;&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git config &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&amp;lt;file-option&amp;gt;&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>--type&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&amp;lt;type&amp;gt;&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>--show-origin&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>--show-scope&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>-z&lt;span style="color:#000;font-weight:bold">|&lt;/span>--null&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>--fixed-value&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> --get-all &amp;lt;name&amp;gt; &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&amp;lt;value-pattern&amp;gt;&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git config &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&amp;lt;file-option&amp;gt;&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>--type&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&amp;lt;type&amp;gt;&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>--show-origin&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>--show-scope&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>-z&lt;span style="color:#000;font-weight:bold">|&lt;/span>--null&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>--fixed-value&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>--name-only&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> --get-regexp &amp;lt;name-regex&amp;gt; &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&amp;lt;value-pattern&amp;gt;&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git config &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&amp;lt;file-option&amp;gt;&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>--type&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&amp;lt;type&amp;gt;&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>-z&lt;span style="color:#000;font-weight:bold">|&lt;/span>--null&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> --get-urlmatch &amp;lt;name&amp;gt; &amp;lt;URL&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git config &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&amp;lt;file-option&amp;gt;&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>--fixed-value&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> --unset &amp;lt;name&amp;gt; &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&amp;lt;value-pattern&amp;gt;&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git config &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&amp;lt;file-option&amp;gt;&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>--fixed-value&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> --unset-all &amp;lt;name&amp;gt; &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&amp;lt;value-pattern&amp;gt;&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git config &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&amp;lt;file-option&amp;gt;&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> --rename-section &amp;lt;old-name&amp;gt; &amp;lt;new-name&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git config &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&amp;lt;file-option&amp;gt;&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> --remove-section &amp;lt;name&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git config &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&amp;lt;file-option&amp;gt;&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>--show-origin&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>--show-scope&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>-z&lt;span style="color:#000;font-weight:bold">|&lt;/span>--null&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>--name-only&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> -l &lt;span style="color:#000;font-weight:bold">|&lt;/span> --list
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git config &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&amp;lt;file-option&amp;gt;&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> --get-color &amp;lt;name&amp;gt; &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&amp;lt;default&amp;gt;&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git config &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&amp;lt;file-option&amp;gt;&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> --get-colorbool &amp;lt;name&amp;gt; &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&amp;lt;stdout-is-tty&amp;gt;&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git config &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&amp;lt;file-option&amp;gt;&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> -e &lt;span style="color:#000;font-weight:bold">|&lt;/span> --edit
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>OPTIONS&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-l, &amp;ndash;list&lt;/strong> # 列出配置文件中设置的所有变量及其值。&lt;/li>
&lt;/ul>
&lt;h3 id="example">EXAMPLE&lt;a class="td-heading-self-link" href="#example" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>diff Show changes between commits, commit and working tree, etc&lt;/p>
&lt;p>fetch Download objects and refs from another repository&lt;/p>
&lt;p>grep Print lines matching a pattern&lt;/p>
&lt;p>init - 创建一个空的 Git 存储库或重新初始化现有的存储库&lt;/p>
&lt;h1 id="获取和创建项目">获取和创建项目&lt;a class="td-heading-self-link" href="#%e8%8e%b7%e5%8f%96%e5%92%8c%e5%88%9b%e5%bb%ba%e9%a1%b9%e7%9b%ae" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="clone---将一个存储库克隆到一个新的目录">clone - 将一个存储库克隆到一个新的目录&lt;a class="td-heading-self-link" href="#clone---%e5%b0%86%e4%b8%80%e4%b8%aa%e5%ad%98%e5%82%a8%e5%ba%93%e5%85%8b%e9%9a%86%e5%88%b0%e4%b8%80%e4%b8%aa%e6%96%b0%e7%9a%84%e7%9b%ae%e5%bd%95" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>OPTIONS&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&amp;ndash;branch,-b&lt;/strong> # 指定名为 NAME 的分支&lt;/li>
&lt;/ul>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>git clone -b v1.0 XXXX # 克隆 v1.0 分支的代码&lt;/li>
&lt;/ul>
&lt;p>commit Record changes to the repository&lt;/p>
&lt;h1 id="分支与合并">分支与合并&lt;a class="td-heading-self-link" href="#%e5%88%86%e6%94%af%e4%b8%8e%e5%90%88%e5%b9%b6" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="log---展示所有-commit-的记录默认展示当前分支">log - 展示所有 commit 的记录。默认展示当前分支&lt;a class="td-heading-self-link" href="#log---%e5%b1%95%e7%a4%ba%e6%89%80%e6%9c%89-commit-%e7%9a%84%e8%ae%b0%e5%bd%95%e9%bb%98%e8%ae%a4%e5%b1%95%e7%a4%ba%e5%bd%93%e5%89%8d%e5%88%86%e6%94%af" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>git log -p -2 prometheus-rules.yaml # 查看 prometheus-rules.yaml 文件最近两次的修改记录&lt;/li>
&lt;/ul>
&lt;p>merge Join two or more development histories together&lt;/p>
&lt;p>mv Move or rename a file, a directory, or a symlink&lt;/p>
&lt;p>pull Fetch from and merge with another repository or a local branch&lt;/p>
&lt;p>push Update remote refs along with associated objects&lt;/p>
&lt;p>rebase Forward-port local commits to the updated upstream head&lt;/p>
&lt;p>reset Reset current HEAD to the specified state&lt;/p>
&lt;p>rm Remove files from the working tree and from the index&lt;/p>
&lt;p>show Show various types of objects&lt;/p>
&lt;p>status Show the working tree status&lt;/p>
&lt;p>tag Create, list, delete or verify a tag object signed with GPG&lt;/p>
&lt;h2 id="tag---管理仓库的-tag-信息">tag - 管理仓库的 Tag 信息&lt;a class="td-heading-self-link" href="#tag---%e7%ae%a1%e7%90%86%e4%bb%93%e5%ba%93%e7%9a%84-tag-%e4%bf%a1%e6%81%af" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>git tag -d v0.7.0 删除 v0.7.0 这个 Tag&lt;/p>
&lt;h1 id="分享和更新项目">分享和更新项目&lt;a class="td-heading-self-link" href="#%e5%88%86%e4%ba%ab%e5%92%8c%e6%9b%b4%e6%96%b0%e9%a1%b9%e7%9b%ae" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="fetch">fetch&lt;a class="td-heading-self-link" href="#fetch" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://git-scm.com/docs/git-fetch">https://git-scm.com/docs/git-fetch&lt;/a>&lt;/p>
&lt;p>从仓库中下载对象和引用&lt;/p>
&lt;h2 id="pull">pull&lt;a class="td-heading-self-link" href="#pull" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://git-scm.com/docs/git-pull">https://git-scm.com/docs/git-pull&lt;/a>&lt;/p>
&lt;h2 id="push">push&lt;a class="td-heading-self-link" href="#push" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://git-scm.com/docs/git-push">https://git-scm.com/docs/git-push&lt;/a>&lt;/p>
&lt;h3 id="syntax语法-1">Syntax(语法)&lt;a class="td-heading-self-link" href="#syntax%e8%af%ad%e6%b3%95-1" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>&lt;strong>git push REPOSITORY&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>REPOSITORY #&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>OPTIONS&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-f, &amp;ndash;force&lt;/strong> # 强制覆盖远程仓库的代码，即使本地代码与仓库代码冲突。
&lt;ul>
&lt;li>Notes: 有的远程仓库具有保护分支功能，会阻止接收通过 &amp;ndash;force 传过来的强制覆盖请求，比如 &lt;a href="https://docs.gitlab.com/ee/user/project/protected_branches.html">GitLab 的受保护的分支&lt;/a>、etc.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="remote">remote&lt;a class="td-heading-self-link" href="#remote" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://git-scm.com/docs/git-remote/en">https://git-scm.com/docs/git-remote/en&lt;/a>&lt;/p>
&lt;p>可以在一个项目中添加多个远程仓库，将代码推送到多个远程仓库中。&lt;/p></description></item><item><title>Docs: Git 最佳实践</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/SCM/Git/Git-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/SCM/Git/Git-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>git 放弃本地修改，强制拉取更新&lt;/p>
&lt;ul>
&lt;li>git fetch &amp;ndash;all # 指令是下载远程仓库最新内容，不做合并&lt;/li>
&lt;li>git reset &amp;ndash;hard origin/master # 指令把 HEAD 指向 master 最新版本&lt;/li>
&lt;li>git pull # 可以省略&lt;/li>
&lt;/ul>
&lt;p>本地所有修改，没有提交的文件，都返回到原来的状态&lt;/p>
&lt;ul>
&lt;li>git checkout . #&lt;/li>
&lt;/ul>
&lt;p>提交修改并上传代码&lt;/p>
&lt;ul>
&lt;li>git add . #&lt;/li>
&lt;li>git commit -a -m &amp;lsquo;XXXX 修改&amp;rsquo; #&lt;/li>
&lt;li>git push #&lt;/li>
&lt;/ul>
&lt;p>git 回滚到之前某一 commit&lt;/p>
&lt;ul>
&lt;li>git log # 查看所有 commit 记录，记录其中的 commit 号，比如 commit 号为：d07466766d46710e54a627f913eea5661382331a&lt;/li>
&lt;li>git reset &amp;ndash;hard d07466766d46710e54a627f913eea5661382331a # 恢复到这次 commit 的状态&lt;/li>
&lt;/ul>
&lt;h2 id="修改-git-commit-信息">修改 git commit 信息&lt;a class="td-heading-self-link" href="#%e4%bf%ae%e6%94%b9-git-commit-%e4%bf%a1%e6%81%af" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>对自己的提交进行修改&lt;/p>
&lt;ul>
&lt;li>git commit &amp;ndash;amend&lt;/li>
&lt;/ul>
&lt;p>将修改强制提交，覆盖原先的提交内容&lt;/p>
&lt;ul>
&lt;li>git push -f&lt;/li>
&lt;/ul>
&lt;h2 id="撤销已-push-的-commit">撤销已 push 的 commit&lt;a class="td-heading-self-link" href="#%e6%92%a4%e9%94%80%e5%b7%b2-push-%e7%9a%84-commit" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>查看所有 commit 记录&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># git log&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>commit 3c15aad50ed125938bbedbedffed05a7b9d600da &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>HEAD -&amp;gt; main, origin/main&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Author: DesistDaydream &amp;lt;373406000@qq.com&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Date: Tue May &lt;span style="color:#0000cf;font-weight:bold">17&lt;/span> 14:52:27 &lt;span style="color:#0000cf;font-weight:bold">2022&lt;/span> +0800
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Update e37-exporter-workflows.yml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>commit 8251ddbbbffe59e5ddb25bb70874425012aa035e
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Author: DesistDaydream &amp;lt;373406000@qq.com&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Date: Mon May &lt;span style="color:#0000cf;font-weight:bold">16&lt;/span> 17:15:07 &lt;span style="color:#0000cf;font-weight:bold">2022&lt;/span> +0800
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>回退到指定的版本&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># git reset --hard 8251ddbbbffe59e5ddb25bb70874425012aa035e&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>HEAD is now at 8251ddb Update e37-exporter-workflows.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>强制推送，覆盖远端的版本信息&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># export REMOTE=&amp;#34;origin&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># export BRANCH=&amp;#34;main&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># git push ${REMOTE} ${BRANCH} --force&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Total &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>delta 0&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>, reused &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>delta 0&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>To https://github.com/DesistDaydream/e37-exporter.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> + 3c15aad...8251ddb main -&amp;gt; main &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>forced update&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="命令详解">命令详解&lt;a class="td-heading-self-link" href="#%e5%91%bd%e4%bb%a4%e8%af%a6%e8%a7%a3" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;strong>提交相关&lt;/strong>&lt;/p>
&lt;p>前面我们提到过，想要对代码进行提交必须得先加入到暂存区，Git 中是通过命令 add 实现。&lt;/p>
&lt;p>添加某个文件到暂存区：&lt;/p>
&lt;p>git add  文件路径&lt;/p>
&lt;p>添加所有文件到暂存区：&lt;/p>
&lt;p>git add .&lt;/p>
&lt;p>同时 Git 也提供了撤销工作区和暂存区命令。&lt;/p>
&lt;p>撤销工作区改动：&lt;/p>
&lt;p>git checkout &amp;ndash;  文件名&lt;/p>
&lt;p>清空暂存区：&lt;/p>
&lt;p>git reset HEAD  文件名&lt;/p>
&lt;p>提交：&lt;/p>
&lt;p>将改动文件加入到暂存区后就可以进行提交了，提交后会生成一个新的提交节点，具体命令如下：&lt;/p>
&lt;p>git commit -m &amp;ldquo;该节点的描述信息&amp;rdquo;&lt;/p>
&lt;p>&lt;strong>分支相关&lt;/strong>&lt;/p>
&lt;p>创建分支：&lt;/p>
&lt;p>创建一个分支后该分支会与 HEAD 指向同一节点，说通俗点就是 HEAD 指向哪创建的新分支就指向哪，命令如下：&lt;/p>
&lt;p>git branch  分支名&lt;/p>
&lt;p>切换分支：&lt;/p>
&lt;p>当切换分支后，默认情况下 HEAD 会指向当前分支，即 HEAD 间接指向当前分支指向的节点。&lt;/p>
&lt;p>git checkout  分支名&lt;/p>
&lt;p>同时也可以创建一个分支后立即切换，命令如下：&lt;/p>
&lt;p>git checkout -b  分支名&lt;/p>
&lt;p>删除分支：&lt;/p>
&lt;p>为了保证仓库分支的简洁，当某个分支完成了它的使命后应该被删除。比如前面所说的单独开一个分支完成某个功能，当这个功能被合并到主分支后应该将这个分支及时删除。&lt;/p>
&lt;p>删除命令如下：&lt;/p>
&lt;p>git branch -d  分支名&lt;/p>
&lt;p>&lt;strong>合并相关&lt;/strong>&lt;/p>
&lt;p>关于合并的命令是最难掌握同时也是最重要的。我们常用的合并命令大概有三个 merge、rebase、cherry-pick。&lt;/p>
&lt;p>merge：&lt;/p>
&lt;p>merge 是最常用的合并命令，它可以将某个分支或者某个节点的代码合并至当前分支。具体命令如下：&lt;/p>
&lt;p>git merge  分支名/节点哈希值&lt;/p>
&lt;p>如果需要合并的分支完全领先于当前分支，如图 3 所示：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/yc1he6/1622380437243-d5cc7b99-b228-4972-a253-f048e1378e68.webp" alt="">&lt;/p>
&lt;p>由于分支 ft-1 完全领先分支 ft-2 即 ft-1 完全包含 ft-2，所以 ft-2 执行了“git merge ft-1”后会触发 fast forward(快速合并)，此时两个分支指向同一节点，这是最理想的状态。但是实际开发中我们往往碰到的是下面这种情况：如图 4（左）。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/yc1he6/1622380437303-d391e621-2e78-48d4-8500-77e2a09964b3.webp" alt="">
图 4&lt;/p>
&lt;p>这种情况就不能直接合了，当 ft-2 执行了“git merge ft-1”后 Git 会将节点 C3、C4 合并随后生成一个新节点 C5，最后将 ft-2 指向 C5 如图 4（右）。&lt;/p>
&lt;p>注意点：如果 C3、C4 同时修改了同一个文件中的同一句代码，这个时候合并会出错，因为 Git 不知道该以哪个节点为标准，所以这个时候需要我们自己手动合并代码。&lt;/p>
&lt;p>rebase：&lt;/p>
&lt;p>rebase 也是一种合并指令，命令行如下：&lt;/p>
&lt;p>git rebase  分支名/节点哈希值&lt;/p>
&lt;p>与 merge 不同的是 rebase 合并看起来不会产生新的节点（实际上是会产生的，只是做了一次复制），而是将需要合并的节点直接累加，如图 5。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/yc1he6/1622380437264-b4959853-9005-408b-b49b-10745896aca3.webp" alt="">
图 5&lt;/p>
&lt;p>当左边示意图的 ft-1.0 执行了 git rebase master 后会将 C4 节点复制一份到 C3 后面，也就是 C4&amp;rsquo;，C4 与 C4&amp;rsquo;相对应，但是哈希值却不一样。&lt;/p>
&lt;p>rebase 相比于 merge 提交历史更加线性、干净，使并行的开发流程看起来像串行，更符合我们的直觉。既然 rebase 这么好用是不是可以抛弃 merge 了？其实也不是了，下面我罗列一些 merge 和 rebase 的优缺点：&lt;/p>
&lt;p>merge 优缺点：&lt;/p>
&lt;ul>
&lt;li>优点：每个节点都是严格按照时间排列。当合并发生冲突时，只需要解决两个分支所指向的节点的冲突即可&lt;/li>
&lt;li>缺点：合并两个分支时大概率会生成新的节点并分叉，久而久之提交历史会变成一团乱麻&lt;/li>
&lt;/ul>
&lt;p>rebase 优缺点：&lt;/p>
&lt;ul>
&lt;li>优点：会使提交历史看起来更加线性、干净&lt;/li>
&lt;li>缺点：虽然提交看起来像是线性的，但并不是真正的按时间排序，比如图 3-3 中，不管 C4 早于或者晚于 C3 提交它最终都会放在 C3 后面。并且当合并发生冲突时，理论上来讲有几个节点 rebase 到目标分支就可能处理几次冲突&lt;/li>
&lt;/ul>
&lt;p>对于网络上一些只用 rebase 的观点，作者表示不太认同，如果不同分支的合并使用 rebase 可能需要重复解决冲突，这样就得不偿失了。但如果是本地推到远程并对应的是同一条分支可以优先考虑 rebase。所以我的观点是 根据不同场景合理搭配使用 merge 和 rebase，如果觉得都行那优先使用 rebase。&lt;/p>
&lt;p>cherry-pick：&lt;/p>
&lt;p>cherry-pick 的合并不同于 merge 和 rebase，它可以选择某几个节点进行合并，如图 6。&lt;/p>
&lt;p>命令行：&lt;/p>
&lt;p>git cherry-pick  节点哈希值&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/yc1he6/1622380437213-1e90e77b-8877-4449-a6b7-1dfe7d760ddb.webp" alt="">
图 6&lt;/p>
&lt;p>假设当前分支是 master，执行了 git cherry-pick C3(哈希值)，C4(哈希值)命令后会直接将 C3、C4 节点抓过来放在后面，对应 C3&amp;rsquo;和 C4&amp;rsquo;。&lt;/p>
&lt;p>&lt;strong>回退相关&lt;/strong>&lt;/p>
&lt;p>分离 HEAD：&lt;/p>
&lt;p>在默认情况下 HEAD 是指向分支的，但也可以将 HEAD 从分支上取下来直接指向某个节点，此过程就是分离 HEAD，具体命令如下：&lt;/p>
&lt;p>git checkout  节点哈希值&lt;/p>
&lt;p>//也可以直接脱离分支指向当前节点&lt;/p>
&lt;p>git checkout &amp;ndash;detach&lt;/p>
&lt;p>由于哈希值是一串很长很长的乱码，在实际操作中使用哈希值分离 HEAD 很麻烦，所以 Git 也提供了 HEAD 基于某一特殊位置（分支/HEAD）直接指向前一个或前 N 个节点的命令，也即相对引用，如下：&lt;/p>
&lt;p>//HEAD 分离并指向前一个节点&lt;/p>
&lt;p>git checkout  分支名/HEAD^&lt;/p>
&lt;p>//HEAD 分离并指向前 N 个节点&lt;/p>
&lt;p>git checkout  分支名～ N&lt;/p>
&lt;p>将 HEAD 分离出来指向节点有什么用呢？举个例子：如果开发过程发现之前的提交有问题，此时可以将 HEAD 指向对应的节点，修改完毕后再提交，此时你肯定不希望再生成一个新的节点，而你只需在提交时加上&amp;ndash;amend 即可，具体命令如下：&lt;/p>
&lt;p>git commit &amp;ndash;amend&lt;/p>
&lt;p>回退：&lt;/p>
&lt;p>回退场景在平时开发中还是比较常见的，比如你巴拉巴拉写了一大堆代码然后提交，后面发现写的有问题，于是你想将代码回到前一个提交，这种场景可以通过 reset 解决，具体命令如下：&lt;/p>
&lt;p>//回退 N 个提交&lt;/p>
&lt;p>git reset HEAD~N&lt;/p>
&lt;p>reset 和相对引用很像，区别是 reset 会使分支和 HEAD 一并回退。&lt;/p>
&lt;p>&lt;strong>远程相关&lt;/strong>&lt;/p>
&lt;p>当我们接触一个新项目时，第一件事情肯定是要把它的代码拿下来，在 Git 中可以通过 clone 从远程仓库复制一份代码到本地，具体命令如下：&lt;/p>
&lt;p>git clone 仓库地址&lt;/p>
&lt;p>前面的章节我也有提到过，clone 不仅仅是复制代码，它还会把远程仓库的引用（分支/HEAD）一并取下保存在本地，如图 7 所示：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/yc1he6/1622380437328-fac36536-b8d8-4ee2-b0cc-9e52d5828b2f.webp" alt="">
图 7&lt;/p>
&lt;p>其中 origin/master 和 origin/ft-1 为远程仓库的分支，而远程的这些引用状态是不会实时更新到本地的，比如远程仓库 origin/master 分支增加了一次提交，此时本地是感知不到的，所以本地的 origin/master 分支依旧指向 C4 节点。我们可以通过 fetch 命令来手动更新远程仓库状态。&lt;/p>
&lt;p>小提示：并不是存在服务器上的才能称作是远程仓库，你也可以 clone 本地仓库作为远程，当然实际开发中我们不可能把本地仓库当作公有仓库，说这个只是单纯的帮助你更清晰的理解分布式。&lt;/p>
&lt;p>fetch：&lt;/p>
&lt;p>说的通俗一点，fetch 命令就是一次下载操作，它会将远程新增加的节点以及引用(分支/HEAD)的状态下载到本地，具体命令如下：&lt;/p>
&lt;p>git fetch  远程仓库地址/分支名&lt;/p>
&lt;p>pull：&lt;/p>
&lt;p>pull 命令可以从远程仓库的某个引用拉取代码，具体命令如下：&lt;/p>
&lt;p>git pull  远程分支名&lt;/p>
&lt;p>其实 pull 的本质就是 fetch+merge，首先更新远程仓库所有状态到本地，随后再进行合并。合并完成后本地分支会指向最新节点。&lt;/p>
&lt;p>另外 pull 命令也可以通过 rebase 进行合并，具体命令如下：&lt;/p>
&lt;p>git pull &amp;ndash;rebase  远程分支名&lt;/p>
&lt;p>push：&lt;/p>
&lt;p>push 命令可以将本地提交推送至远程，具体命令如下：&lt;/p>
&lt;p>git push  远程分支名&lt;/p>
&lt;p>如果直接 push 可能会失败，因为可能存在冲突，所以在 push 之前往往会先 pull 一下，如果存在冲突本地解决。push 成功后本地的远程分支引用会更新，与本地分支指向同一节点。&lt;/p>
&lt;p>综上所述&lt;/p>
&lt;ul>
&lt;li>不管是 HEAD 还是分支，它们都只是引用而已，引用+节点是 Git 构成分布式的关键&lt;/li>
&lt;li>merge 相比于 rebase 有更明确的时间历史，而 rebase 会使提交更加线性应当优先使用&lt;/li>
&lt;li>通过移动 HEAD 可以查看每个提交对应的代码&lt;/li>
&lt;li>clone 或 fetch 都会将远程仓库的所有提交、引用保存在本地一份&lt;/li>
&lt;li>pull 的本质其实就是 fetch+merge，也可以加入&amp;ndash;rebase 通过 rebase 方式合并&lt;/li>
&lt;/ul></description></item><item><title>Docs: Git常见问题</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/SCM/Git/Git-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/SCM/Git/Git-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</guid><description>
&lt;h1 id="warning-lf-will-be-replaced-by-crlf">warning LF will be replaced by CRLF&lt;a class="td-heading-self-link" href="#warning-lf-will-be-replaced-by-crlf" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="发现问题">发现问题&lt;a class="td-heading-self-link" href="#%e5%8f%91%e7%8e%b0%e9%97%ae%e9%a2%98" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>windows 平台下使用 git add，git deploy 文件时经常出现“warning: LF will be replaced by CRLF” 的提示。&lt;/p>
&lt;p>网上很多解决办法提到：&lt;/p>
&lt;p>设置 core.autocrlf=false，windows 也用 LF 换行。&lt;/p>
&lt;p>除了记事本，其他编辑器都可以正常编辑。&lt;/p>
&lt;p>而没有给出具体原因和分析，现在加以补充。&lt;/p>
&lt;h2 id="分析问题">分析问题&lt;a class="td-heading-self-link" href="#%e5%88%86%e6%9e%90%e9%97%ae%e9%a2%98" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>格式化与多余的空白字符，特别是在跨平台情况下，有时候是一个令人发指的问题。由于编辑器的不同或者文件行尾的换行符在 Windows 下被替换了，一些细微的空格变化会不经意地混入提交，造成麻烦。虽然这是小问题，但它会极大地扰乱跨平台协作。&lt;/p>
&lt;p>其实，这是因为在文本处理中，CR（CarriageReturn），LF（LineFeed），CR/LF 是不同操作系统上使用的换行符，具体如下：&lt;/p>
&lt;p>换行符‘\n’和回车符‘\r’&lt;/p>
&lt;ul>
&lt;li>
&lt;p>回车符就是回到一行的开头，用符号 r 表示，十进制 ASCII 代码是 13，十六进制代码为 0x0D，回车（return）；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>换行符就是另起一行，用 n 符号表示，ASCII 代码是 10，十六制为 0x0A， 换行（newline）。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>所以我们平时编写文件的回车符应该确切来说叫做回车换行符。&lt;/p>
&lt;h2 id="应用情况">应用情况&lt;a class="td-heading-self-link" href="#%e5%ba%94%e7%94%a8%e6%83%85%e5%86%b5" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Dos 和 Windows 平台： 使用回车（CR）和换行（LF）两个字符来结束一行，回车+换行(CR+LF)，即“\r\n”；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Mac 和 Linux 平台：只使用换行（LF）一个字符来结束一行，即“\n”；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>最早 Mac 每行结尾是回车 CR 即&amp;rsquo;\r&amp;rsquo;，后 mac os x 也投奔了 unix。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>许多 Windows 上的编辑器会悄悄把行尾的换行（LF）字符转换成回车（CR）和换行（LF），或在用户按下 Enter 键时，插入回车（CR）和换行（LF）两个字符。&lt;/p>
&lt;h2 id="影响">影响&lt;a class="td-heading-self-link" href="#%e5%bd%b1%e5%93%8d" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>一个直接后果是，Unix/Mac 系统下的文件在 Windows 里打开的话，所有文字会变成一行；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>而 Windows 里的文件在 Unix/Mac 下打开的话，在每行的结尾可能会多出一个^M 符号。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Linux 保存的文件在 windows 上用记事本看的话会出现黑点。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>这些问题都可以通过一定方式进行转换统一，例如，在 linux 下，命令 unix2dos 是把 linux 文件格式转换成 windows 文件格式，命令 dos2unix 是把 windows 格式转换成 linux 文件格式。&lt;/p>
&lt;h2 id="解决问题">解决问题&lt;a class="td-heading-self-link" href="#%e8%a7%a3%e5%86%b3%e9%97%ae%e9%a2%98" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Git 默认行为会在提交时自动地把 CRLF(回车换行) 转换成 LF(换行)，而在检出代码时把 LF(换行) 转换成 CRLF(回车换行) .&lt;/p>
&lt;p>情况一：&lt;/p>
&lt;p>你可以用 git config &amp;ndash;global core.autocrlf true 来打开此项功能。 如果是在 Windows 系统上，把它设置成 true，这样在检出代码时，换行会被转换成回车和换行：&lt;/p>
&lt;pre>&lt;code>#提交时转换为LF，检出时转换为CRLF
$ git config --global core.autocrlf true
&lt;/code>&lt;/pre>
&lt;p>情况二：&lt;/p>
&lt;p>如果使用以换行（LF）作为行结束符的 Linux 或 Mac，你不需要 Git 在检出文件时进行自动的转换。然而当一个以回车（CR）和换行（LF）作为行结束符的文件不小心被引入时，你肯定想让 Git 修正。 所以，你可以把 core.autocrlf 设置成 input 来告诉 Git 在提交时把回车和换行转换成换行，检出时不转换：（这样在 Windows 上的检出文件中会保留回车和换行，而在 Mac 和 Linux 上，以及版本库中会保留换行。）&lt;/p>
&lt;pre>&lt;code>#提交时转换为LF，检出时不转换
$ git config --global core.autocrlf input
&lt;/code>&lt;/pre>
&lt;p>情况三：&lt;/p>
&lt;p>如果你是 Windows 程序员，且正在开发仅运行在 Windows 上的项目，可以设置 false 取消此功能，把回车保留在版本库中：&lt;/p>
&lt;pre>&lt;code>#提交检出均不转换
$ git config --global core.autocrlf false
&lt;/code>&lt;/pre>
&lt;p>你也可以在文件提交时进行 safecrlf 检查&lt;/p>
&lt;pre>&lt;code>#拒绝提交包含混合换行符的文件
git config --global core.safecrlf true
# 允许提交包含混合换行符的文件
git config --global core.safecrlf false
#提交包含混合换行符的文件时给出警告
git config --global core.safecrlf warn
&lt;/code>&lt;/pre>
&lt;h2 id="通俗解释">通俗解释&lt;a class="td-heading-self-link" href="#%e9%80%9a%e4%bf%97%e8%a7%a3%e9%87%8a" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>git 的 Windows 客户端基本都会默认设置 core.autocrlf=true，设置 core.autocrlf=true, 只要保持工作区都是纯 CRLF 文件，编辑器用 CRLF 换行，就不会出现警告了；&lt;/li>
&lt;li>Linux 最好不要设置 core.autocrlf，因为这个配置算是为 Windows 平台定制；&lt;/li>
&lt;li>Windows 上设置 core.autocrlf=false，仓库里也没有配置 .gitattributes，很容易引入 CRLF 或者混合换行符（Mixed Line Endings，一个文件里既有 LF 又有 CRLF）到版本库，这样就可能产生各种奇怪的问题。&lt;/li>
&lt;/ul></description></item></channel></rss>