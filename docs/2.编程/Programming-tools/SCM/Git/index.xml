<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Git on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/SCM/Git/</link><description>Recent content in Git on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/SCM/Git/index.xml" rel="self" type="application/rss+xml"/><item><title>Git 配置详解</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/SCM/Git/Git-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/SCM/Git/Git-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</guid><description>概述 参考：
官方 Book，自定义 Git-Git 配置 官方文档，git-config Git 使用一系列
~/.gitconfig 文件配置详解 该配置文件可以手动修改，也可以通过 git config &amp;ndash;global XXX 命令修改。
[filter &amp;#34;lfs&amp;#34;] required = true clean = git-lfs clean -- %f smudge = git-lfs smudge -- %f process = git-lfs filter-process [user] name = DesistDaydream email = XXXXXXXX@qq.com [core] autocrlf = input [credential] helper = store git config &amp;ndash;global credential.helper store
core 部分 autocrlf(STRING) # 使用 git 时如何处理文件的换行符
input # 如果您使用的是使用 LF 行结尾的 Linux 或 macOS 系统，那么您不希望 Git 在您签出文件时自动转换它们；但是，如果意外引入了以 CRLF 结尾的文件，那么您可能需要 Git 来修复它。您可以通过将 core.</description></item><item><title>Git</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/SCM/Git/Git/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/SCM/Git/Git/</guid><description>概述 参考：
官网 公众号，Git 各指令的本质 Git 是一个免费的开源分布式版本控制系统，旨在快速高效地处理从小型到大型项目的所有内容。
Git 易于学习，占地面积小，具有闪电般的快速性能。它具有廉价的本地分支，方便的暂存区域和多个工作流等功能，其性能优于 Subversion，CVS，Perforce 和 ClearCase 等 SCM 工具。
Git 优势 Git 是一个分布式代码管理工具，在讨论分布式之前避免不了提及一下什么是中央式代码管理仓库：
中央式：所有的代码保存在中央服务器，所以提交必须依赖网络，并且每次提交都会带入到中央仓库，如果是协同开发可能频繁触发代码合并，进而增加提交的成本和代价。最典型的就是 SVN。 分布式：可以在本地提交，不需要依赖网络，并且会将每次提交自动备份到本地。每个开发者都可以把远程仓库 clone 一份到本地，并会把提交历史一并拿过来。代表就是 Git。 [!Tip] 我们可以使用 git CLI 的 remote 命令创建多个中央仓库（也称为远程仓库），以便将项目代码在多个仓库之间同步
那 Git 相比于 SVN 有什么优势呢？打个比方：“巴拉巴拉写了一大堆代码，突然发现写的有问题，我想回到一个小时之前”，对于这种情况 Git 的优势就很明显了，因为 commit 的成本比较小并且本地会保存所有的提交记录，随时随刻可以进行回退。在这并不是说 SVN 的不能完成这种操作，只是 Git 的回退会显得更加的优雅。Git 相比于中央式工具还有很多优点，就不一一列举了
Git 文件状态 在 Git 中文件大概分为三种状态：
modified(修改) # Git 可以感知到工作目录中哪些文件被修改了，然后把修改的文件加入到 modified 区域 staged(暂存) # 通过 add 命令将工作目录中修改的文件提交到暂存区，等候被 commit committed(提交) # 将暂存区文件 commit 至 Git 目录中永久保存 commit 节点</description></item><item><title>git CLI</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/SCM/Git/git-CLI/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/SCM/Git/git-CLI/</guid><description>概述 参考：
https://git-scm.com/docs/git git 工具通过多个子命令来使用，可以按照功能对这些命令进行划分
设置与配置 Git 获取和创建项目 分支与合并 分享和更新项目 设置与配置 config - 配置 git 获取和设置存储库或全局选项
Syntax(语法) git config [&amp;lt;file-option&amp;gt;] [--type=&amp;lt;type&amp;gt;] [--fixed-value] [--show-origin] [--show-scope] [-z|--null] &amp;lt;name&amp;gt; [&amp;lt;value&amp;gt; [&amp;lt;value-pattern&amp;gt;]] git config [&amp;lt;file-option&amp;gt;] [--type=&amp;lt;type&amp;gt;] --add &amp;lt;name&amp;gt; &amp;lt;value&amp;gt; git config [&amp;lt;file-option&amp;gt;] [--type=&amp;lt;type&amp;gt;] [--fixed-value] --replace-all &amp;lt;name&amp;gt; &amp;lt;value&amp;gt; [&amp;lt;value-pattern&amp;gt;] git config [&amp;lt;file-option&amp;gt;] [--type=&amp;lt;type&amp;gt;] [--show-origin] [--show-scope] [-z|--null] [--fixed-value] --get &amp;lt;name&amp;gt; [&amp;lt;value-pattern&amp;gt;] git config [&amp;lt;file-option&amp;gt;] [--type=&amp;lt;type&amp;gt;] [--show-origin] [--show-scope] [-z|--null] [--fixed-value] --get-all &amp;lt;name&amp;gt; [&amp;lt;value-pattern&amp;gt;] git config [&amp;lt;file-option&amp;gt;] [--type=&amp;lt;type&amp;gt;] [--show-origin] [--show-scope] [-z|--null] [--fixed-value] [--name-only] --get-regexp &amp;lt;name-regex&amp;gt; [&amp;lt;value-pattern&amp;gt;] git config [&amp;lt;file-option&amp;gt;] [--type=&amp;lt;type&amp;gt;] [-z|--null] --get-urlmatch &amp;lt;name&amp;gt; &amp;lt;URL&amp;gt; git config [&amp;lt;file-option&amp;gt;] [--fixed-value] --unset &amp;lt;name&amp;gt; [&amp;lt;value-pattern&amp;gt;] git config [&amp;lt;file-option&amp;gt;] [--fixed-value] --unset-all &amp;lt;name&amp;gt; [&amp;lt;value-pattern&amp;gt;] git config [&amp;lt;file-option&amp;gt;] --rename-section &amp;lt;old-name&amp;gt; &amp;lt;new-name&amp;gt; git config [&amp;lt;file-option&amp;gt;] --remove-section &amp;lt;name&amp;gt; git config [&amp;lt;file-option&amp;gt;] [--show-origin] [--show-scope] [-z|--null] [--name-only] -l | --list git config [&amp;lt;file-option&amp;gt;] --get-color &amp;lt;name&amp;gt; [&amp;lt;default&amp;gt;] git config [&amp;lt;file-option&amp;gt;] --get-colorbool &amp;lt;name&amp;gt; [&amp;lt;stdout-is-tty&amp;gt;] git config [&amp;lt;file-option&amp;gt;] -e | --edit OPTIONS</description></item><item><title>Git 最佳实践</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/SCM/Git/Git-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/SCM/Git/Git-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</guid><description>概述 参考：
git 放弃本地修改，强制拉取更新
git fetch &amp;ndash;all # 指令是下载远程仓库最新内容，不做合并 git reset &amp;ndash;hard origin/master # 指令把 HEAD 指向 master 最新版本 git pull # 可以省略 本地所有修改，没有提交的文件，都返回到原来的状态
git checkout . # 提交修改并上传代码
git add . # git commit -a -m &amp;lsquo;XXXX 修改&amp;rsquo; # git push # git 回滚到之前某一 commit
git log # 查看所有 commit 记录，记录其中的 commit 号，比如 commit 号为：d07466766d46710e54a627f913eea5661382331a git reset &amp;ndash;hard d07466766d46710e54a627f913eea5661382331a # 恢复到这次 commit 的状态 修改 git commit 信息 对自己的提交进行修改
git commit &amp;ndash;amend 将修改强制提交，覆盖原先的提交内容</description></item><item><title>Git常见问题</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/SCM/Git/Git-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/SCM/Git/Git-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</guid><description>warning LF will be replaced by CRLF 发现问题 windows 平台下使用 git add，git deploy 文件时经常出现“warning: LF will be replaced by CRLF” 的提示。
网上很多解决办法提到：
设置 core.autocrlf=false，windows 也用 LF 换行。
除了记事本，其他编辑器都可以正常编辑。
而没有给出具体原因和分析，现在加以补充。
分析问题 格式化与多余的空白字符，特别是在跨平台情况下，有时候是一个令人发指的问题。由于编辑器的不同或者文件行尾的换行符在 Windows 下被替换了，一些细微的空格变化会不经意地混入提交，造成麻烦。虽然这是小问题，但它会极大地扰乱跨平台协作。
其实，这是因为在文本处理中，CR（CarriageReturn），LF（LineFeed），CR/LF 是不同操作系统上使用的换行符，具体如下：
换行符‘\n’和回车符‘\r’
回车符就是回到一行的开头，用符号 r 表示，十进制 ASCII 代码是 13，十六进制代码为 0x0D，回车（return）；
换行符就是另起一行，用 n 符号表示，ASCII 代码是 10，十六制为 0x0A， 换行（newline）。
所以我们平时编写文件的回车符应该确切来说叫做回车换行符。
应用情况 Dos 和 Windows 平台： 使用回车（CR）和换行（LF）两个字符来结束一行，回车+换行(CR+LF)，即“\r\n”；
Mac 和 Linux 平台：只使用换行（LF）一个字符来结束一行，即“\n”；
最早 Mac 每行结尾是回车 CR 即&amp;rsquo;\r&amp;rsquo;，后 mac os x 也投奔了 unix。</description></item></channel></rss>