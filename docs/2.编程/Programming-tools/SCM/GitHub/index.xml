<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦的站点 – GitHub</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/SCM/GitHub/</link><description>Recent content in GitHub on 断念梦的站点</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/SCM/GitHub/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: GitHub</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/SCM/GitHub/GitHub/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/SCM/GitHub/GitHub/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>官方文档：&lt;a href="https://docs.github.com/cn">https://docs.github.com/cn&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>在代码仓库中，点击 &lt;code>.&lt;/code> 即可进入 Web 版的 VS Code，在线编辑当前仓库的代码。&lt;/p>
&lt;h1 id="github-desktop">GitHub Desktop&lt;a class="td-heading-self-link" href="#github-desktop" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;a href="https://desktop.github.com/">https://desktop.github.com/&lt;/a>&lt;/p>
&lt;p>专注于重要的事情，而不是与 Git 对抗。无论您是 Git 新手还是经验丰富的用户，GitHub Desktop 都能简化您的开发工作流程。&lt;/p></description></item><item><title>Docs: GitHub Actions</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/SCM/GitHub/GitHub-Actions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/SCM/GitHub/GitHub-Actions/</guid><description/></item><item><title>Docs: GitHub 管理</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/SCM/GitHub/GitHub-%E7%AE%A1%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/SCM/GitHub/GitHub-%E7%AE%A1%E7%90%86/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="git-clone克隆或下载一个仓库单个文件夹">git clone克隆或下载一个仓库单个文件夹&lt;a class="td-heading-self-link" href="#git-clone%e5%85%8b%e9%9a%86%e6%88%96%e4%b8%8b%e8%bd%bd%e4%b8%80%e4%b8%aa%e4%bb%93%e5%ba%93%e5%8d%95%e4%b8%aa%e6%96%87%e4%bb%b6%e5%a4%b9" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="1如果是想克隆别人的项目或者自己的">1、如果是想克隆别人的项目或者自己的&lt;a class="td-heading-self-link" href="#1%e5%a6%82%e6%9e%9c%e6%98%af%e6%83%b3%e5%85%8b%e9%9a%86%e5%88%ab%e4%ba%ba%e7%9a%84%e9%a1%b9%e7%9b%ae%e6%88%96%e8%80%85%e8%87%aa%e5%b7%b1%e7%9a%84" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>很简单的一个网站就解决了。&lt;a href="http://downgit.zhoudaxiaa.com">DownGit&lt;/a>： 只需要找到仓库中对应文件夹的 url,输入之后,点击 download 自动打包下载:&lt;/p>
&lt;p>（这里说明一下，因为原作者的项目无法使用，这是我修改过的新项目吧，把资源链接改到了国内 CDN，所以访问速度很快！）&lt;/p>
&lt;h2 id="2克隆自己的项目">2、克隆自己的项目&lt;a class="td-heading-self-link" href="#2%e5%85%8b%e9%9a%86%e8%87%aa%e5%b7%b1%e7%9a%84%e9%a1%b9%e7%9b%ae" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>注意：本方法会下载整个项目，但是，最后出现在本地项目文件下里只有需要的那个文件夹存在。类似先下载，再过滤。&lt;/strong>&lt;/p>
&lt;p>&lt;strong>有时候因为需要我们只想 gitclone 下仓库的单个或多个文件夹，而不是全部的仓库内容，这样就很省事，所以下面就开始教程啦&lt;/strong>&lt;/p>
&lt;p>在 Git1.7.0 以前，这无法实现，但是幸运的是在 Git1.7.0 以后加入了 Sparse Checkout 模式，这使得 Check Out 指定文件或者文件夹成为可能。&lt;/p>
&lt;p>&lt;strong>举个例子：&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>现在有一个 &lt;strong>test&lt;/strong> 仓库&lt;a href="https://github.com/mygithub/test">https://github.com/mygithub/test&lt;/a>你要 gitclone 里面的&lt;strong>tt&lt;/strong>子目录：在本地的硬盘位置打开&lt;strong>Git Bash&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git init &lt;span style="color:#204a87">test&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#204a87">cd&lt;/span> &lt;span style="color:#204a87">test&lt;/span> //新建仓库并进入文件夹
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git config core.sparsecheckout &lt;span style="color:#204a87">true&lt;/span> //设置允许克隆子目录
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;tt*&amp;#39;&lt;/span> &amp;gt;&amp;gt; .git/info/sparse-checkout //设置要克隆的仓库的子目录路径 //空格别漏
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git remote add origin git@github.com:mygithub/test.git //这里换成你要克隆的项目和库
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git pull origin master //下载
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>ok，大功告成！！！&lt;/strong>&lt;/p>
&lt;h1 id="管理所有通知">管理所有通知&lt;a class="td-heading-self-link" href="#%e7%ae%a1%e7%90%86%e6%89%80%e6%9c%89%e9%80%9a%e7%9f%a5" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/cplu4a/1662610871922-964b6726-be46-4fc9-b450-f3705aed8174.png" alt="image.png">&lt;/p>
&lt;h1 id="管理所有已经订阅的-issue">管理所有已经订阅的 issue&lt;a class="td-heading-self-link" href="#%e7%ae%a1%e7%90%86%e6%89%80%e6%9c%89%e5%b7%b2%e7%bb%8f%e8%ae%a2%e9%98%85%e7%9a%84-issue" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;a href="https://github.com/notifications/subscriptions">https://github.com/notifications/subscriptions&lt;/a>&lt;/p>
&lt;h1 id="github上fork了别人的项目后再同步更新别人的提交">github上fork了别人的项目后，再同步更新别人的提交&lt;a class="td-heading-self-link" href="#github%e4%b8%8afork%e4%ba%86%e5%88%ab%e4%ba%ba%e7%9a%84%e9%a1%b9%e7%9b%ae%e5%90%8e%e5%86%8d%e5%90%8c%e6%ad%a5%e6%9b%b4%e6%96%b0%e5%88%ab%e4%ba%ba%e7%9a%84%e6%8f%90%e4%ba%a4" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>我从 github 网站和用 git 命令两种方式说一下。&lt;/p>
&lt;p>github 网站上操作&lt;/p>
&lt;ol>
&lt;li>
&lt;p>打开自己的仓库，进入 code 下面。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>点击 new pull request 创建。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/np6g3g/1616903559723-76f8c4f1-6c02-4145-829f-4b8ddb92de72.jpeg" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>选择 base fork&lt;/p>
&lt;/li>
&lt;li>
&lt;p>选择 head fork&lt;/p>
&lt;/li>
&lt;li>
&lt;p>点击 Create pull request，并填写创建信息。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/np6g3g/1616903559704-28a10f3c-1397-40f9-9c67-0d9bc61da316.jpeg" alt="">&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/np6g3g/1616903559698-ff01b1e5-f9b9-406a-938b-3fca1309a5c0.jpeg" alt="">&lt;/p>
&lt;ol start="6">
&lt;li>点击 Merge pull request 合并从源 fork 来的代码。&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/np6g3g/1616903559689-63e77098-f4a1-4ea4-84c4-f514f4642fec.jpeg" alt="">&lt;/p>
&lt;ol start="7">
&lt;li>完成。&lt;/li>
&lt;/ol>
&lt;p>用 git 命令操作&lt;/p>
&lt;ol>
&lt;li>用 git remote 查看远程主机状态&lt;/li>
&lt;/ol>
&lt;p>git remote -v git remote add upstream &lt;a href="mailto:git@github.com">git@github.com&lt;/a>:xxx/xxx.gitgit fetch upstreamgit merge upstream/mastergit push&lt;/p></description></item><item><title>Docs: GitHub 搜索</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/SCM/GitHub/GitHub-%E6%90%9C%E7%B4%A2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/SCM/GitHub/GitHub-%E6%90%9C%E7%B4%A2/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.github.com/search-github">官方文档，在 GitHub 上搜索&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>GitHub 的集成搜索涵盖了 GitHub 上的许多存储库、用户和代码行。&lt;/p>
&lt;h2 id="查找-github-仓库所有者的联系方式">查找 Github 仓库所有者的联系方式&lt;a class="td-heading-self-link" href="#%e6%9f%a5%e6%89%be-github-%e4%bb%93%e5%ba%93%e6%89%80%e6%9c%89%e8%80%85%e7%9a%84%e8%81%94%e7%b3%bb%e6%96%b9%e5%bc%8f" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://juejin.cn/post/6951642072935825439">https://juejin.cn/post/6951642072935825439&lt;/a>&lt;/p>
&lt;p>通过提交记录&lt;/p>
&lt;h1 id="查看项目第一次-commit-时间">查看项目第一次 commit 时间&lt;a class="td-heading-self-link" href="#%e6%9f%a5%e7%9c%8b%e9%a1%b9%e7%9b%ae%e7%ac%ac%e4%b8%80%e6%ac%a1-commit-%e6%97%b6%e9%97%b4" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;a href="https://www.cnblogs.com/saysmy/p/7292177.html">https://www.cnblogs.com/saysmy/p/7292177.html&lt;/a>&lt;/p>
&lt;p>这个代码库 commits7855 次，点击进入 commits 发现翻页只有两个按钮不能直接点击翻页到最后一页，那如何查看第一条记录呢？&lt;/p>
&lt;p>&lt;img src="https://images2017.cnblogs.com/blog/979473/201708/979473-20170806014238178-1770579061.png" alt="">&lt;/p>
&lt;p>原来 github为每个commit版本都生成了一个SHA hash值，我们可以通过SHA值来直接搜索到第N次的提交&lt;/p>
&lt;p>点击一次 older 发现 url 格式为：&lt;/p>
&lt;p>&lt;a href="https://github.com/lodash/lodash/commits/master?after=c2616dd4f3ab267d000a2b4f564e1c76fc8b8378+34">https://github.com/lodash/lodash/commits/master?after=c2616dd4f3ab267d000a2b4f564e1c76fc8b8378+34&lt;/a>&lt;/p>
&lt;p>后面的 after 即代表展示 SHA 为c2616dd4f3ab267d000a2b4f564e1c76fc8b8378 的后面第35条commit。&lt;/p>
&lt;p>那c2616dd4f3ab267d000a2b4f564e1c76fc8b8378 这一串是怎么得到的呢？&lt;/p>
&lt;p>&lt;img src="https://images2017.cnblogs.com/blog/979473/201708/979473-20170806014419709-1997461420.png" alt="">&lt;/p>
&lt;p>在commits列表内的每一条记录后面都有一个copy图标，这里点击即会成功复制此条commit的SHA&lt;/p>
&lt;p>c2616dd4f3ab267d000a2b4f564e1c76fc8b8378正式此代码库的最新一条commit的SHA。&lt;/p>
&lt;p>于是如果我们想找到第一条记录，总commits记录是7855次，那么搜索url为：&lt;/p>
&lt;p>&lt;a href="https://github.com/lodash/lodash/commits/master?after=c2616dd4f3ab267d000a2b4f564e1c76fc8b8378+7853">https://github.com/lodash/lodash/commits/master?after=c2616dd4f3ab267d000a2b4f564e1c76fc8b8378+7853&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://images2017.cnblogs.com/blog/979473/201708/979473-20170806014320772-192431232.png" alt="">&lt;/p>
&lt;p>成功搜索到想要的结果。&lt;/p>
&lt;h1 id="搜索-issue-和-pr">搜索 Issue 和 PR&lt;a class="td-heading-self-link" href="#%e6%90%9c%e7%b4%a2-issue-%e5%92%8c-pr" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="纯粹与用户相关的搜索">纯粹与用户相关的搜索&lt;a class="td-heading-self-link" href="#%e7%ba%af%e7%b2%b9%e4%b8%8e%e7%94%a8%e6%88%b7%e7%9b%b8%e5%85%b3%e7%9a%84%e6%90%9c%e7%b4%a2" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>involves:USERNAME&lt;/strong> # 搜索所有涉及 USERNAME 的内容。可以用户的东西包括: author(作者)、assignee(分配)、mentions(提及)、commenter(评论者)&lt;/p>
&lt;p>&lt;strong>author:USERNAME&lt;/strong> # 搜索由 USERNAME 创建的 ISSUE 和 PR&lt;/p>
&lt;p>&lt;strong>commenter:USERNAME&lt;/strong> # 搜索 USERNAME 用户评论过的内容&lt;/p>
&lt;p>&lt;strong>mentions:USERNAME&lt;/strong> # 搜索提及 USERNAME 的内容。i.e. &lt;code>@&lt;/code> 某人就称为 mentions(提及)&lt;/p>
&lt;p>&lt;strong>assignee:USERNAME&lt;/strong> # 搜索分配给 USERNAME 的 ISSUE 和 PR。&lt;/p>
&lt;h1 id="搜索仓库标题仓库描述readme">搜索仓库标题、仓库描述、README&lt;a class="td-heading-self-link" href="#%e6%90%9c%e7%b4%a2%e4%bb%93%e5%ba%93%e6%a0%87%e9%a2%98%e4%bb%93%e5%ba%93%e6%8f%8f%e8%bf%b0readme" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>GitHub 提供了便捷的搜索方式，可以限定只搜索仓库的标题、或者描述、README 等。&lt;/p>
&lt;p>以 Spring Cloud 为例，一般一个仓库，大概是这样的&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/cplu4a/1616903574584-c6483e74-4756-4303-96d8-53ff32e333c1.jpeg" alt="">&lt;/p>
&lt;p>其中，红色箭头指的两个地方，分别是仓库的名称和描述。咱们可以直接限定关键字只查特定的地方。比如咱们只想查找仓库名称包含 spring cloud 的仓库，可以使用语法&lt;/p>
&lt;p>in:name 关键词&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/cplu4a/1616903574564-8f67c6a5-a719-4880-8e05-5467aada9b7c.jpeg" alt="">&lt;/p>
&lt;p>如果想查找描述的内容，可以使用这样的方式：&lt;/p>
&lt;p>in:descripton 关键词&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/cplu4a/1616903574564-ac24da6d-574a-456b-87fb-507bbe8fc444.jpeg" alt="">&lt;/p>
&lt;p>这里就是搜索上面项目描述的内容。&lt;/p>
&lt;p>一般项目，都会有个 README 文件，如果要查该文件包含特定关键词的话，我想你猜到了&lt;/p>
&lt;p>in:readme 关键词&lt;/p>
&lt;h1 id="搜索-starfork-数大于或小于多少的">搜索 star、fork 数大于或小于多少的&lt;a class="td-heading-self-link" href="#%e6%90%9c%e7%b4%a2-starfork-%e6%95%b0%e5%a4%a7%e4%ba%8e%e6%88%96%e5%b0%8f%e4%ba%8e%e5%a4%9a%e5%b0%91%e7%9a%84" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>一个项目 star 数的多少，一般代表该项目有受欢迎程度。虽然现在也有垃圾项目刷 star ，但毕竟是少数， star 依然是个不错的衡量标准。&lt;/p>
&lt;p>stars: &amp;gt; 数字 关键字。&lt;/p>
&lt;p>比如咱们要找 star 数大于 3000 的 Spring Cloud 仓库，就可以这样&lt;/p>
&lt;p>stars:&amp;gt;3000 spring cloud&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/cplu4a/1616903574567-e0f24105-b02a-46d7-b633-5070170810e8.jpeg" alt="">&lt;/p>
&lt;p>如果不加 &amp;gt;= 的话，是要精确找 star 数等于具体数字的，这个一般有点困难。&lt;/p>
&lt;p>如果要找在指定数字区间的话，使用&lt;/p>
&lt;p>stars: 10..20 关键词&lt;/p>
&lt;p>fork 数同理，将上面的 stars 换成 fork，其它语法相同&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/cplu4a/1616903574573-42bb52aa-c87d-454b-bac7-68525db88957.jpeg" alt="">&lt;/p>
&lt;ol start="3">
&lt;li>明确搜索仓库大小的&lt;/li>
&lt;/ol>
&lt;p>比如你只想看个简单的 Demo，不想找特别复杂的且占用磁盘空间较多的，可以在搜索的时候直接限定仓库的 size 。&lt;/p>
&lt;p>使用方式：&lt;/p>
&lt;p>size:&amp;gt;=5000 关键词&lt;/p>
&lt;p>这里注意下，这个数字代表 K, 5000 代表着 5M。&lt;/p>
&lt;h1 id="搜索仓库是否还在更新维护">搜索仓库是否还在更新维护&lt;a class="td-heading-self-link" href="#%e6%90%9c%e7%b4%a2%e4%bb%93%e5%ba%93%e6%98%af%e5%90%a6%e8%bf%98%e5%9c%a8%e6%9b%b4%e6%96%b0%e7%bb%b4%e6%8a%a4" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>我们在确认是否要使用一些开源产品，框架的时候，是否继续维护是很重要的一点。如果已经过时没人维护的东西，踩了坑就不好办了。而在 GitHub 上找项目的时候，不再需要每个都点到项目里看看最近 push 的时间，直接在搜索框即可完成。&lt;/p>
&lt;p>元旦刚过，比如咱们要找临近年底依然在勤快更新的项目，就可以直接指定更新时间在哪个时间前或后的&lt;/p>
&lt;p>通过这样一条搜索 pushed:&amp;gt;2019-01-03 spring cloud&lt;/p>
&lt;p>咱们就找到了 1 月 3 号之后，还在更新的项目。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/cplu4a/1616903574580-8fddcda2-950e-41a8-9a31-6601402757d4.jpeg" alt="">&lt;/p>
&lt;p>你是想找指定时间之前或之后创建的仓库也是可以的，把 pushed 改成 created 就行。&lt;/p>
&lt;h1 id="搜索仓库的-license">搜索仓库的 LICENSE&lt;a class="td-heading-self-link" href="#%e6%90%9c%e7%b4%a2%e4%bb%93%e5%ba%93%e7%9a%84-license" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>咱们经常使用开源软件，一定都知道，开源软件也是分不同的「门派」不同的 LICENSE。开源不等于一切免费，不同的许可证要求也大不相同。 2018 年就出现了 Facebook 修改 React 的许可协议导致各个公司纷纷修改自己的代码，寻找替换的框架。&lt;/p>
&lt;p>例如咱们要找协议是最为宽松的 Apache License 2 的代码，可以这样&lt;/p>
&lt;p>license:apache-2.0 spring cloud&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/cplu4a/1616903574564-632dcc34-2b27-41e6-886a-5530636a94ee.jpeg" alt="">&lt;/p>
&lt;p>其它协议就把 apache-2.0 替换一下即可，比如换成 mit 之类的。&lt;/p>
&lt;h1 id="搜索仓库的语言">搜索仓库的语言&lt;a class="td-heading-self-link" href="#%e6%90%9c%e7%b4%a2%e4%bb%93%e5%ba%93%e7%9a%84%e8%af%ad%e8%a8%80" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>比如咱们就找 Java 的库， 除了像上面在左侧点击选择之外，还可以在搜索中过滤。像这样：&lt;/p>
&lt;p>language:java 关键词&lt;/p>
&lt;p>7.明确搜索某个人或组织的仓库&lt;/p>
&lt;p>比如咱们想在 GitHub 上找一下某个大神是不是提交了新的功能，就可以指定其名称后搜索，例如咱们看下 Josh Long 有没有提交新的 Spring Cloud 的代码，可以这样使用&lt;/p>
&lt;p>user:joshlong&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/cplu4a/1616903574568-a117b1af-b67c-40c2-869f-7fdaf3b9edb9.jpeg" alt="">&lt;/p>
&lt;p>组合使用一下，把 Java 项目过滤出来，多个查询之间「空格」分隔即可。&lt;/p>
&lt;p>user:joshlong language:java&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/cplu4a/1616903574577-960173b0-ec57-4b82-9d35-cb69e28bb633.jpeg" alt="">&lt;/p>
&lt;p>找某个组织的代码话，可以这样：&lt;/p>
&lt;p>org:spring-cloud 就可以列出具体 org 的仓库。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/cplu4a/1616903574593-1a151f42-a735-49ae-8372-5e17bfd2a519.jpeg" alt="">&lt;/p>
&lt;h1 id="搜索文件">搜索文件&lt;a class="td-heading-self-link" href="#%e6%90%9c%e7%b4%a2%e6%96%87%e4%bb%b6" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;a href="https://docs.github.com/en/search-github/searching-on-github/finding-files-on-github">https://docs.github.com/en/search-github/searching-on-github/finding-files-on-github&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://docs.github.com/en/search-github/github-code-search/understanding-github-code-search-syntax#path-qualifier">https://docs.github.com/en/search-github/github-code-search/understanding-github-code-search-syntax#path-qualifier&lt;/a>&lt;/p>
&lt;p>使用 path 关键字&lt;/p>
&lt;p>&lt;code>repo:torvalds/linux path:Documentation/**/*sysfs*&lt;/code> 搜索 torvalds/linux 仓库中，所有 Documentation/ 目录下所有递归子目录中，包含 sysfs 的文件。&lt;/p></description></item></channel></rss>