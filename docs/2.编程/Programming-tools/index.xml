<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>编程工具 on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/</link><description>Recent content in 编程工具 on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/index.xml" rel="self" type="application/rss+xml"/><item><title>Programming tools</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/Programming-tools/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/Programming-tools/</guid><description>概述 参考：
Programming tools(编程工具)
构建系统 Make
Meson # Python 实现的构建系统
https://github.com/mesonbuild/meson https://www.techgrow.cn/posts/68d93948.html Ninja # C++ 编写的小型构件系统
https://github.com/ninja-build/ninja https://www.cnblogs.com/sandeepin/p/ninja.html 辅助 Lint 参考：
Wiki, Lint Lint 或 Linter 是一种静态代码分析工具，用于标记 编程错误、Bug、风格错误、可疑结构 等。该术语源自一个检查 C 语言代码的 Unix 程序。
现在泛指所有可以实现这种功能的程序，通常，每种编程语言都会开发出一个对应的 Linter，比如 Go 语言的 Staticcheck 就是 gopls。
AI 代码补全 https://github.com/getcursor/cursor # 一种基于 VSCode 的 IDE
https://github.com/cline/cline # IDE 插件+命令行工具
https://github.com/codota/TabNine
https://code.fittentech.com/
Copilot 现在网上卖的 Github Copilot 授权程序是什么原理？
cocopilot https://zhile.io/2023/09/09/github-got-banned.html
https://gitee.com/Tzeao/share-copilot
CodeGeeX GitHub 项目，THUDM/CodeGeeX2
介绍: https://www.bilibili.com/video/BV1Mj411676S
清华开源的更强大的多语言代码生成模型
CodeWhisperer https://github.com/aws/aws-toolkit-vscode</description></item><item><title>Clang</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/Clang/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/Clang/</guid><description>概述 参考：
Wiki, Clang Clang (/ˈklæŋ/) 是 C、C++、Objective-C 和 Objective-C++ 编程语言以及 OpenMP、OpenCL、RenderScript、CUDA、SYCL 和 HIP 的 Compiler(编译器) 前端框架。它充当 GNU 编译器集合 (GCC) 的直接替代品，支持其大部分编译标志和非官方语言扩展。它包括一个静态分析器和几个代码分析工具。</description></item><item><title>Compiler</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/Compiler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/Compiler/</guid><description>概述 参考：
Wiki, Compiler 在计算机中，Compiler(编译器) 是一个计算机程序，它将用一种编程语言（源语言）编写的计算机代码翻译成另一种语言（目标语言）。术语 “编译器” 主要用于指将源代码从高级编程语言翻译成低级编程语言（例如汇编语言、目标代码或机器代码）以创建可执行程序。</description></item><item><title>LLVM</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/LLVM/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/LLVM/</guid><description>概述 参考：
GitHub 项目，llvm/llvm-project Wiki, LLVM LLVM 是一组 Compiler(编译器) 和 工具链技术，可以用于为任何编程语言开发前端（Notes: 不是 Web 开发中的前端），为任何指令集架构开发后端。LLVM 围绕一种与语言无关的中间表示（IR）设计，这种表示作为一种可移植的高级汇编语言，可以通过多次转换进行优化。
[!Tip] 然而，LLVM 项目逐渐演变为一个涵盖多个子项目的综合性项目，这与大多数当前开发者所理解的虚拟机关系不大。这使得该首字母缩略词变得“令人困惑”和“不合适”，因此自2011年以来，LLVM 官方不再是一个缩略词，而是一个适用于 LLVM 综合项目的品牌。该项目包括 LLVM intermediate representation(中间表示，简称 IR)、LLVM 调试器、LLVM 对 C++ 标准库的实现（完全支持 C++ 11 和C++ 14）等。LLVM 由 LLVM 基金会管理。编译工程师 Tanya Lattner 于 2014 年成为其主席。</description></item><item><title>Utility</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/Utility/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/Utility/</guid><description>概述 参考：
MGit # 在 Android 上使用 git 管理代码仓库
https://f-droid.org/packages/com.manichord.mgit/</description></item><item><title>Make 命令教程</title><link>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/Make/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Programming-tools/Make/</guid><description>概述 参考：
Manual(手册)，make(1) Wiki, Make(software) 阮一峰博客，Make 命令教程 Make 代码变成可执行文件，叫做编译（compile）；先编译这个，还是先编译那个（即编译的安排），叫做构建（build）。
Make是最常用的构建工具，诞生于 1977 年，主要用于 C 语言的项目。但是实际上 ，任何只要某个文件有变化，就要重新构建的项目，都可以用 Make 构建。
本文介绍 Make 命令的用法，从简单的讲起，不需要任何基础，只要会使用命令行，就能看懂。我的参考资料主要是 Isaac Schlueter 的《Makefile 文件教程》和《GNU Make 手册》。
一、Make 的概念 Make 这个词，英语的意思是&amp;quot;制作&amp;quot;。Make 命令直接用了这个意思，就是要做出某个文件。比如，要做出文件 a.txt，就可以执行下面的命令。
$ make a.txt 但是，如果你真的输入这条命令，它并不会起作用。因为 Make 命令本身并不知道，如何做出 a.txt，需要有人告诉它，如何调用其他命令完成这个目标。
比如，假设文件 a.txt 依赖于 b.txt 和 c.txt ，是后面两个文件连接（cat 命令）的产物。那么，make 需要知道下面的规则。
a.txt: b.txt c.txt cat b.txt c.txt &amp;gt; a.txt 也就是说，make a.txt 这条命令的背后，实际上分成两步：第一步，确认 b.txt 和 c.txt 必须已经存在，第二步使用 cat 命令 将这个两个文件合并，输出为新文件。
像这样的规则，都写在一个叫做 Makefile 的文件中，Make 命令依赖这个文件进行构建。Makefile 文件也可以写为 makefile， 或者用命令行参数指定为其他文件名。</description></item></channel></rss>