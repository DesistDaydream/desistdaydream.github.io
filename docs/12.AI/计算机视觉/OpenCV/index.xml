<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>OpenCV on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/12.AI/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/OpenCV/</link><description>Recent content in OpenCV on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/12.AI/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/OpenCV/index.xml" rel="self" type="application/rss+xml"/><item><title>OpenCV</title><link>https://desistdaydream.github.io/docs/12.AI/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/OpenCV/OpenCV/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/12.AI/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/OpenCV/OpenCV/</guid><description>概述 参考：
GitHub 项目，opencv/opencv 官网 官方文档，从左侧 Nightly 中选择想要查看的版本 https://zhuanlan.zhihu.com/p/115321759 手把手教你使用OpenCV库（附实例、Python代码解析） Open Source Computer Vision Library(开源计算机视觉库，简称 OpenCV) 是一个包含数百种计算机视觉算法的开源库。
各语言的库 官方提供了 Python、C++ 的 OpenCV 库
go https://github.com/hybridgroup/gocv
Modules(模块) 参考：
4.x 官网文档，主页 4.x 官方文档，介绍 4.x 官方文档，模块 4.x 官方文档，Class 列表 https://zhuanlan.zhihu.com/p/19988205 OpenCV 具有模块化的结构，整个 OpenCV 的功能由一个个模块提供，每个模块具有自己的类、函数、方法，并且可以多个模块共享使用。这种模块化的结构可以让 OpenCV 像一门编程语言一样，具有自己的标准库和第三方库，标准库中的标准模块可以实现自身的核心功能，第三方库的模块可以基于核心功能扩展其他功能。就像 https://pkg.go.dev/ 中的各种包，可以看到类型、方法、函数等等的描述。
所有 OpenCV 的类和函数都放在 cv Namespace 中(Namespace 是 C++ 编程语言的基本概念)，如果我们要使用 C++ 代码调用 OpenCV 的模块，需要使用 cv:: 或在头部添加 using namespace cv; 指令。
模块分为两类：
Main Modules(主模块) Extra Modules(额外模块) Main Modules(主模块) core # 核心功能模块，全称 Core functionality 。定义了基本的数据结构，包括最重要的 Mat 类、XML 读写、opengl三维渲染等。 imgproc # 图像处理模块，全称 Image processing。包括图像滤波、集合图像变换、直方图计算、形状描述、物体检测、等等。图像处理是计算机视觉的重要工具。 imgcodecs # 图像文件读写模块，全称 Image file reading and writing。 videoio # 视频文件读写模块，全称 Video I/O。也包括摄像头、Kinect 等的输入。 highgui # 高级图形界面及与 QT 框架的整合。 High-level GUI video # 视频分析模块。包括背景提取、光流跟踪、卡尔曼滤波等，做视频监控的读者会经常使用这个模块。 Video Analysis calib3d.</description></item><item><title>图像处理模块</title><link>https://desistdaydream.github.io/docs/12.AI/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/OpenCV/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E6%A8%A1%E5%9D%97/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/12.AI/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/OpenCV/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E6%A8%A1%E5%9D%97/</guid><description>概述 参考：
官方文档，模块 - 图像处理 图像处理模块下还有很多分类
Image Filtering(图像过滤) Geometric Image Transformations(几何图像变换) Miscellaneous Image Transformations(各种图像转换) Drawing Functions(绘图功能) Color Space Conversions(色彩空间转换) ColorMaps in OpenCV(OpenCV 中的颜色图) Planar Subdivision(平面细分) Histograms(直方图) Structural Analysis and Shape Descriptors(结构分析和形状描述符) Motion Analysis and Object Tracking(运动分析和对象跟踪) Feature Detection(特征检测) Object Detection(物体检测) Image Segmentation(图像分割) C API Hardware Acceleration Layer(硬件加速层) Object Detection(对象检测) 参考：
官方文档，主模块 - 对象监测 官方文档，模块 - 图像处理 - 对象检测 官方文档，教程 - 图像处理 - 模板匹配 OpenCV 实现 Object detection(对象检测) 的能力，是通过模板匹配技术查找与模板图像（补丁）匹配（相似）的图像区域。
Source image(源图像) (I) # 我们期望在其中找到与模板图像匹配的图像。一般就是大图、或者说背景图。 Template image(模板图像)（T） # 将与源图像进行比较的补丁图像。一般是较小的图片。 我们的目标是在源图像中检测到与模板图像的最佳匹配区域。比如这样：</description></item></channel></rss>