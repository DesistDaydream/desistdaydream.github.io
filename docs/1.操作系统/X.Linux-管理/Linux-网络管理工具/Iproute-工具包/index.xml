<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – Iproute 工具包</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/X.Linux-%E7%AE%A1%E7%90%86/Linux-%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/Iproute-%E5%B7%A5%E5%85%B7%E5%8C%85/</link><description>Recent content in Iproute 工具包 on 断念梦</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/X.Linux-%E7%AE%A1%E7%90%86/Linux-%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/Iproute-%E5%B7%A5%E5%85%B7%E5%8C%85/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Iproute 工具包</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/X.Linux-%E7%AE%A1%E7%90%86/Linux-%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/Iproute-%E5%B7%A5%E5%85%B7%E5%8C%85/Iproute-%E5%B7%A5%E5%85%B7%E5%8C%85/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/X.Linux-%E7%AE%A1%E7%90%86/Linux-%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/Iproute-%E5%B7%A5%E5%85%B7%E5%8C%85/Iproute-%E5%B7%A5%E5%85%B7%E5%8C%85/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://wiki.linuxfoundation.org/networking/iproute2">官方文档&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Iproute2">Wiki，Iproute2&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Iprtoue2 是一组应用程序的集合，用于管理 Linux 网络栈。可以控制、监控 LInux 内核中网络栈的各个方面，包括路由、网络接口、隧道、流量控制、与网络相关的设备驱动程序。&lt;/p>
&lt;p>Iproute2 基于 Linux 的 &lt;a href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/Go%20%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/%E7%BD%91%E7%BB%9C%E6%A0%88%E6%8E%A7%E5%88%B6/Netlink/Netlink.md">Netlink&lt;/a> 接口与 LInux 内核通信，以实现网络栈管理功能。Iproute2 的发展与内核网络组件的发展密切相关，原作者 Alexey Kuznetsov 负责 Linux 内核中的 QoS 实现，并且各种文档由 &lt;a href="https://wiki.linuxfoundation.org/">Linux 基金会 Wiki&lt;/a> 维护，且代码也存在于 &lt;a href="https://git.kernel.org/pub/scm/network/iproute2/iproute2.git">Linux 内核代码&lt;/a>中&lt;/p>
&lt;h2 id="该工具包包含如下工具">该工具包包含如下工具&lt;/h2>
&lt;ol>
&lt;li>arpd&lt;/li>
&lt;li>bridge # 显示或操纵 Linux 网桥 地址和设备&lt;/li>
&lt;li>cbq&lt;/li>
&lt;li>ctstat&lt;/li>
&lt;li>devlink&lt;/li>
&lt;li>genl&lt;/li>
&lt;li>ifcfg&lt;/li>
&lt;li>ifstat&lt;/li>
&lt;li>&lt;a href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/X.Linux%20%E7%AE%A1%E7%90%86/Linux%20%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/Iproute%20%E5%B7%A5%E5%85%B7%E5%8C%85/ip%20%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/ip%20%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7.md">ip&lt;/a> # 显示或操纵 routing, devices, policy routing and tunnels&lt;/li>
&lt;li>lnstat&lt;/li>
&lt;li>nstat&lt;/li>
&lt;li>rdma&lt;/li>
&lt;li>routef&lt;/li>
&lt;li>routel&lt;/li>
&lt;li>rtacct&lt;/li>
&lt;li>rtmon&lt;/li>
&lt;li>rtpr&lt;/li>
&lt;li>rtstat&lt;/li>
&lt;li>&lt;a href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/X.Linux%20%E7%AE%A1%E7%90%86/Linux%20%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/Iproute%20%E5%B7%A5%E5%85%B7%E5%8C%85/ss%20%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7.md">ss&lt;/a> # 转存 Socket 信息&lt;/li>
&lt;li>tipc #&lt;/li>
&lt;li>tc # 实现 &lt;a href="docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.Kernel/8.Network/Linux%20%E7%BD%91%E7%BB%9C%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/TC%20%E6%A8%A1%E5%9D%97/TC%20%E6%A8%A1%E5%9D%97.md">TC 模块&lt;/a> 进行流量控制的程序&lt;/li>
&lt;/ol>
&lt;h1 id="配置">配置&lt;/h1>
&lt;p>&lt;strong>/etc/iproute2/&lt;/strong>#&lt;/p></description></item><item><title>Docs: ip 命令行工具</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/X.Linux-%E7%AE%A1%E7%90%86/Linux-%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/Iproute-%E5%B7%A5%E5%85%B7%E5%8C%85/ip-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/X.Linux-%E7%AE%A1%E7%90%86/Linux-%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/Iproute-%E5%B7%A5%E5%85%B7%E5%8C%85/ip-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</guid><description/></item><item><title>Docs: ss 命令行工具</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/X.Linux-%E7%AE%A1%E7%90%86/Linux-%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/Iproute-%E5%B7%A5%E5%85%B7%E5%8C%85/ss-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/X.Linux-%E7%AE%A1%E7%90%86/Linux-%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/Iproute-%E5%B7%A5%E5%85%B7%E5%8C%85/ss-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://man.cx/ss">manual&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>ss 用于转储 socket 统计信息。 它允许显示类似于 netstat 工具的信息。 它可以显示比其他工具更多的 TCP 和状态信息&lt;/p>
&lt;h1 id="syntax语法">Syntax(语法)&lt;/h1>
&lt;p>&lt;strong>ss [OPTIONS] [FILTER]&lt;/strong>&lt;/p>
&lt;h2 id="options">OPTIONS&lt;/h2>
&lt;p>如果不使用任何选项，则 ss 命令将显示已建立连接的打开的非监听套接字（例如 TCP / UNIX / UDP）的列表。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># ss&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Netid State Recv-Q Send-Q Local Address:Port Peer Address:Port
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>......
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>u_str ESTAB &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> * &lt;span style="color:#ae81ff">22170&lt;/span> * &lt;span style="color:#ae81ff">22171&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>u_str ESTAB &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> /run/systemd/journal/stdout &lt;span style="color:#ae81ff">23554&lt;/span> * &lt;span style="color:#ae81ff">23347&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>u_str ESTAB &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> /var/lib/sss/pipes/private/sbus-dp_implicit_files.850 &lt;span style="color:#ae81ff">22246&lt;/span> * &lt;span style="color:#ae81ff">22240&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tcp ESTAB &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 172.19.42.248:ssh 172.19.42.203:63482
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;strong>-A QUERY, &amp;ndash;query=QUERY, &amp;ndash;socket=QUERY&lt;/strong> # 要转储的套接字表的列表，用逗号分隔。可以理解以下标识符：all，inet，tcp，udp，raw，unix，packet，netlink，unix_dgram，unix_stream，unix_seqpacket，packet_raw，packet_dgram，dccp，sctp，vsock_stream，vsock_dgram，xdp 列表中的任何项目都可以选择添加前缀带有感叹号&lt;code>!&lt;/code>，以防止该套接字表被转储。&lt;/li>
&lt;li>&lt;strong>-a, &amp;ndash;all&lt;/strong> # 显示所有已监听和未监听的 Sockets。&lt;/li>
&lt;li>&lt;strong>-e, &amp;ndash;extended&lt;/strong> # 显示详细的 Socket 信息。对于 TCP 连接来说，相当于 -o 选项。
&lt;ul>
&lt;li>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/olkcwd/1626247848384-bfa595e0-6f72-49f3-b73c-665c07b5dfa1.png" alt="image.png">&lt;/li>
&lt;li>timer # TCP 连接的 keepalive 计时器&lt;/li>
&lt;li>uid # 该 Socket 所属的用户 ID&lt;/li>
&lt;li>ino # 该 Socket 的 inode 编号&lt;/li>
&lt;li>sk # 该 Socket 的 UUID&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>-n, &amp;ndash;numeric&lt;/strong> # 直接使用 ip 地址，而不通过域名服务器(常用，节省资源，界面明确）&lt;/li>
&lt;li>&lt;strong>-o, &amp;ndash;options&lt;/strong> # 显示定时器信息。格式为：&lt;code>timer:(timer_name&amp;gt;,&amp;lt;expire_time&amp;gt;,&amp;lt;retrans)&lt;/code>
&lt;ul>
&lt;li>timer_name # 计时器的名称。一共有 5 种：
&lt;ul>
&lt;li>on # 以下三种计时器之一: TCP retrans timer,TCP early retrans timer and tail loss probe timer&lt;/li>
&lt;li>keepalive # TCP 的保持活动计时器。Linux Kernel 默认 7200 秒。&lt;/li>
&lt;li>timewait # 当 TCP 连接进入 TIME-WAIT 状态时，将会触发该计时器。&lt;/li>
&lt;li>persist # zero window probe timer&lt;/li>
&lt;li>unknown # 未知计时器&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>expire_time # 计时器的过期时间&lt;/li>
&lt;li>retrans # 重新传输的次数。即 TCP keepalive 探测是重试的次数。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>-s, &amp;ndash;summary&lt;/strong># 输出摘要统计信息. 此选项不解析套接字列表，以从各种来源获取摘要。 常用于套接字数量太大以至于无法解析 /proc/net/tcp 时。输出信息如下：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># ss -s&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Total: &lt;span style="color:#ae81ff">170&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TCP: &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#f92672">(&lt;/span>estab 1, closed 0, orphaned 0, timewait 0&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Transport Total IP IPv6
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>RAW &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>UDP &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TCP &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>INET &lt;span style="color:#ae81ff">10&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>FRAG &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="filter">FILTER&lt;/h2>
&lt;p>&lt;strong>FILTER = [ state STATE-FILTER ] [ EXPRESSION ]&lt;/strong>
&lt;strong>STATE-FILTER(状态过滤)&lt;/strong> # 指定要过滤的连接状态，可用的状态有 established, syn-sent, syn-recv, fin-wait-1, fin-wait-2, time-wait, closed, close-wait, last-ack, listen 和 closing.&lt;/p>
&lt;ul>
&lt;li>除了以上状态，还可以用其他描述方式代替一个或多个状态&lt;/li>
&lt;li>&lt;strong>all&lt;/strong> # for all the states&lt;/li>
&lt;li>&lt;strong>connected&lt;/strong> # all the states except for &lt;strong>listening&lt;/strong> and &lt;strong>closed&lt;/strong>&lt;/li>
&lt;li>&lt;strong>synchronized&lt;/strong> # &lt;strong>syn-sent&lt;/strong> 状态之外的所有&lt;strong>已经连接&lt;/strong>的状态&lt;/li>
&lt;li>&lt;strong>bucket&lt;/strong> # states, which are maintained as minisockets, i.e. &lt;strong>time-wait&lt;/strong> and &lt;strong>syn-recv&lt;/strong>&lt;/li>
&lt;li>&lt;strong>big&lt;/strong> # opposite to &lt;strong>bucket&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>EXPRESSION(表达式)&lt;/strong>#&lt;/p>
&lt;h3 id="ip-地址筛选">IP 地址筛选&lt;/h3>
&lt;p>ss src ADDRESS_PATTERN&lt;/p>
&lt;ul>
&lt;li>src：表示来源&lt;/li>
&lt;li>ADDRESS_PATTERN：表示地址规则&lt;/li>
&lt;/ul>
&lt;p>如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>ss src 120.33.31.1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 列出来之20.33.31.1的连接&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>＃ 列出来至120.33.31.1,80端口的连接
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ss src 120.33.31.1:http
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ss src 120.33.31.1:8
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="端口筛选">端口筛选&lt;/h3>
&lt;p>ss dport OP PORT&lt;/p>
&lt;ul>
&lt;li>OP # 运算符&lt;/li>
&lt;li>PORT # 表示端口&lt;/li>
&lt;li>dport # 表示过滤目标端口、相反的有 sport&lt;/li>
&lt;/ul>
&lt;p>OP 运算符如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">=&lt;/span> 或 le : 小于等于 &amp;gt;&lt;span style="color:#f92672">=&lt;/span> or ge : 大于等于
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span> 或 eq : 等于
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>!&lt;span style="color:#f92672">=&lt;/span> 或 ne : 不等于端口
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt; 或 lt : 小于这个端口 &amp;gt; or gt : 大于端口
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>OP 实例&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>ss sport &lt;span style="color:#f92672">=&lt;/span> :http 也可以是 ss sport &lt;span style="color:#f92672">=&lt;/span> :80
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ss dport &lt;span style="color:#f92672">=&lt;/span> :http
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ss dport &lt;span style="color:#ae81ff">\&amp;gt;&lt;/span> :1024
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ss sport &lt;span style="color:#ae81ff">\&amp;gt;&lt;/span> :1024
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ss sport &lt;span style="color:#ae81ff">\&amp;lt;&lt;/span> :32000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ss sport eq :22
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ss dport !&lt;span style="color:#f92672">=&lt;/span> :22
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ss state connected sport &lt;span style="color:#f92672">=&lt;/span> :http
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ss &lt;span style="color:#ae81ff">\(&lt;/span> sport &lt;span style="color:#f92672">=&lt;/span> :http or sport &lt;span style="color:#f92672">=&lt;/span> :https &lt;span style="color:#ae81ff">\)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ss -o state fin-wait-1 &lt;span style="color:#ae81ff">\(&lt;/span> sport &lt;span style="color:#f92672">=&lt;/span> :http or sport &lt;span style="color:#f92672">=&lt;/span> :https &lt;span style="color:#ae81ff">\)&lt;/span> dst 192.168.1/24
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="example">EXAMPLE&lt;/h1>
&lt;p>显示状态是 established 的所有 tcp 连接&lt;/p>
&lt;p>&lt;code>ss -nta state established&lt;/code>&lt;/p>
&lt;p>显示所有已建立的 SMTP 连接&lt;/p>
&lt;p>&lt;code>ss -o state established '( dport = :smtp or sport = :smtp )'&lt;/code>&lt;/p>
&lt;p>显示所有已建立的 HTTP 连接&lt;/p>
&lt;p>&lt;code>ss -o state established '( dport = :http or sport = :http )'&lt;/code>&lt;/p>
&lt;p>为我们的网络 193.233.7/24 列出所有处于状态 FIN-WAIT-1 的 tcp socket，并查看它们的计时器。&lt;/p>
&lt;p>&lt;code>ss -o state fin-wait-1 '( sport = :http or sport = :https )' dst 193.233.7/24&lt;/code>&lt;/p>
&lt;p>列出所有 socket(TCP 除外) 中所有状态的套接字。&lt;/p>
&lt;p>&lt;code>ss -a -A 'all,!tcp'&lt;/code>&lt;/p>
&lt;h1 id="netstat-命令行工具">netstat 命令行工具&lt;/h1>
&lt;p>与 ss 命令类似，OPTIONS 都差不多，就是显示的信息格式还有内容有细微差别&lt;/p>
&lt;p>OPTIONS&lt;/p>
&lt;ul>
&lt;li>-a 或&amp;ndash;all：显示所有状态的连线中的端口&lt;/li>
&lt;li>-p 或&amp;ndash;programs：显示正在使用端口的程序识别码和程序名称；&lt;/li>
&lt;li>-t 或&amp;ndash;tcp：显示 TCP 传输协议的连线状况&lt;/li>
&lt;li>-u 或&amp;ndash;udp：显示 UDP 传输协议的连线状况&lt;/li>
&lt;li>-x 或&amp;ndash;unix：显示 Unix 相关选项&lt;/li>
&lt;li>-e 或&amp;ndash;extend：显示网络其他相关信息；&lt;/li>
&lt;li>-l 或&amp;ndash;listening：显示监听中的服务端口&lt;/li>
&lt;li>-r 或&amp;ndash;route：显示 Routing Table；（与 route 命令显示信息相同）&lt;/li>
&lt;li>-s 或&amp;ndash;statistice：显示网络工作信息统计表；&lt;/li>
&lt;li>-c 或&amp;ndash;continuous：持续列出网络状态；&lt;/li>
&lt;/ul>
&lt;p>输出列表内容解析：分为两部分&lt;/p>
&lt;p>第一部分：Active Internet connections 活跃的互联网连接&lt;/p>
&lt;p>Proto 显示 socket 使用的协议(tcp,udp,raw)&lt;/p>
&lt;p>Recv-Q 和 Send-Q 指的是接收队列和发送队列(这些数字一般都应该是 0,如果不是则表示软件包正在队列&lt;/p>
&lt;p>中堆)&lt;/p>
&lt;p>Local Address 显示在本地哪个地址和端口上监听&lt;/p>
&lt;p>Foreign Address 显示接收外部哪些地址哪个端口的请求&lt;/p>
&lt;p>State 显示 socket 的状态(通常只有 tcp 有状态信息)&lt;/p>
&lt;p>PID/Program name 显示 socket 进程 id 和进程名&lt;/p>
&lt;p>第二部分：Active UNIX domain sockets 活跃的 UNIX 域套接口，只能用于本机通信的，性能可以提高一倍&lt;/p>
&lt;p>RefCnt 表示连接到本套接口上的进程号&lt;/p>
&lt;p>Types 显示套接口的类型&lt;/p>
&lt;p>Path 表示连接到套接口的其它进程使用的路径名&lt;/p>
&lt;p>常用例子：&lt;/p>
&lt;p>不进行域名解析的查看所有状态的端口协议为 tcp 且显示该端口的进程号和进程名的相关网络信息&lt;/p>
&lt;p>&lt;code>netstat -atnp&lt;/code>&lt;/p>
&lt;ul>
&lt;li>netstat -n | awk &amp;lsquo;/^tcp/ {print $5}&amp;rsquo; | awk -F: &amp;lsquo;{print $1}&amp;rsquo;| sort | uniq -c | sort -rn # 统计当前系统中所有 tcp 和 udp 的连接，根据状态统计&lt;/li>
&lt;li>netstat -n | awk &amp;lsquo;/^tcp/ {++S[$NF]} END {for(a in S) print a, S[a]}&amp;rsquo; # 统计当前系统中所有 tcp 和 udp 的连接，根据状态统计&lt;/li>
&lt;/ul></description></item></channel></rss>