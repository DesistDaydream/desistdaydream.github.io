<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – CPU 性能优化</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/X.Linux-%E7%AE%A1%E7%90%86/%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0%E4%B8%8E%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/CPU-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</link><description>Recent content in CPU 性能优化 on 断念梦</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/X.Linux-%E7%AE%A1%E7%90%86/%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0%E4%B8%8E%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/CPU-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: CPU 性能优化</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/X.Linux-%E7%AE%A1%E7%90%86/%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0%E4%B8%8E%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/CPU-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/CPU-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/X.Linux-%E7%AE%A1%E7%90%86/%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0%E4%B8%8E%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/CPU-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/CPU-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</guid><description>
&lt;h1 id="系统性能调优之绑定-cpu">系统性能调优之绑定 cpu&lt;/h1>
&lt;p>原文链接：https://mp.weixin.qq.com/s/jiQz01hg8DiA1zucqjMZkQ&lt;/p>
&lt;h2 id="支持超线程的numa架构">支持超线程的numa架构&lt;/h2>
&lt;p>物理硬件视角，&lt;/p>
&lt;ul>
&lt;li>将多个CPU封装在一起，这个封装被称为插槽Socket；&lt;/li>
&lt;li>Core是socket上独立的硬件单元；&lt;/li>
&lt;li>通过intel的超线程HT技术进一步提升CPU的处理能力，OS看到的逻辑上的核Processor的数量。&lt;/li>
&lt;/ul>
&lt;p>每个硬件线程都可以按逻辑cpu寻址，因此这个处理器看上去有八块cpu。&lt;/p>
&lt;p>&lt;img src="https://mmbiz.qpic.cn/mmbiz_png/ibD9iaaPDn99gtSUiaaFg901xOL7aeib35k3l1cnIaQCeOuYLaOO6jkpcjlibwMn7H99ia4pY6ic7veFZwdkzuUblC9SQ/640?wx_fmt=png" alt="">&lt;/p>
&lt;p>对于操作系统的视角：&lt;/p>
&lt;ul>
&lt;li>CPU(s)：8&lt;/li>
&lt;li>NUMA node0 CPU(s)：0，4&lt;/li>
&lt;li>NUMA node1  CPU(s)：1，5&lt;/li>
&lt;li>NUMA node2 CPU(s)：2，6&lt;/li>
&lt;li>NUMA node3 CPU(s)：3，7&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://mmbiz.qpic.cn/mmbiz_png/ibD9iaaPDn99gtSUiaaFg901xOL7aeib35k3Go5f7Q3n45NiaGYcUFCFaPicPnGEU4tiboXy3ljpYS7GrlwIAzrpOu55A/640?wx_fmt=png" alt="">&lt;/p>
&lt;p>操作系统视角.png&lt;/p>
&lt;p>L1缓分成两种，一种是指令缓存，一种是数据缓存。L2缓存和L3缓存不分指令和数据。L1和L2缓存在第一个CPU核中，L3则是所有CPU核心共享的内存。L1、L2、L3的越离CPU近就越小，速度也越快，越离CPU远，速度也越慢。再往后面就是内存，内存的后面就是硬盘。我们来看一些他们的速度：&lt;/p>
&lt;ul>
&lt;li>L1 的存取速度：4 个CPU时钟周期&lt;/li>
&lt;li>L2 的存取速度：11 个CPU时钟周期&lt;/li>
&lt;li>L3 的存取速度：39 个CPU时钟周期&lt;/li>
&lt;li>RAM内存的存取速度 ：107 个CPU时钟周期&lt;/li>
&lt;/ul>
&lt;p>如果 CPU 所要操作的数据在缓存中，则直接读取，这称为缓存命中。命中缓存会带来很大的性能提升，因此，我们的代码优化目标是提升 CPU 缓存的命中率。&lt;/p>
&lt;p>&lt;img src="https://mmbiz.qpic.cn/mmbiz_png/ibD9iaaPDn99gtSUiaaFg901xOL7aeib35k3MDcGSMaDov6SEc811uibXAQB5FhfarrlSNgWrNzUicUzWfTjCbibaq2dw/640?wx_fmt=png" alt="">&lt;/p>
&lt;p>在主流的服务器上，一个 CPU 处理器会有 10 到 20 多个物理核。同时，为了提升服务器的处理能力，服务器上通常还会有多个 CPU 处理器（也称为多 CPU Socket），每个处理器有自己的物理核（包括 L1、L2 缓存），L3 缓存，以及连接的内存，同时，不同处理器间通过总线连接。通过lscpu来看：&lt;/p>
&lt;p>&lt;code>root@ubuntu:~# lscpu Architecture:          x86_64 CPU(s):                32 Thread(s) per core:    1 Core(s) per socket:    8 Socket(s):             4 L1d cache:             32K L1i cache:             32K L2 cache:              256K L3 cache:              20480K NUMA node0 CPU(s):     0-7 NUMA node1 CPU(s):     8-15 NUMA node2 CPU(s):     16-23 NUMA node3 CPU(s):     24-31 &lt;/code>&lt;/p>
&lt;p>你可能注意到，三级缓存要比一、二级缓存大许多倍，这是因为当下的 CPU 都是多核心的，每个核心都有自己的一、二级缓存，但三级缓存却是一颗 CPU 上所有核心共享的。&lt;img src="https://mmbiz.qpic.cn/mmbiz_png/ibD9iaaPDn99gtSUiaaFg901xOL7aeib35k3AZ3lZlxEz64mnaUTticqnOgVKRoC7NcmZyiaACsneOu3LREqIFjlJZgQ/640?wx_fmt=png" alt="">
但是，有个地方需要你注意一下：如果应用程序先在一个 Socket 上运行，并且把数据保存到了内存，然后被调度到另一个 Socket 上运行，此时，应用程序再进行内存访问时，就需要访问之前 Socket 上连接的内存，这种访问属于远端内存访问。和访问 Socket 直接连接的内存相比，远端内存访问会增加应用程序的延迟。&lt;/p>
&lt;h3 id="常用性能监测工具">常用性能监测工具&lt;/h3>
&lt;p>Linux系统下，CPU与内存子系统性能调优的常用性能监测工具有top、perf、numactl这3个工具。1） top工具 top工具是最常用的Linux性能监测工具之一。通过top工具可以监视进程和系统整体性能。&lt;/p>
&lt;ul>
&lt;li>top                                         查看系统整体的资源使用情况&lt;/li>
&lt;li>top后输入1                            查看看每一个逻辑核cpu的资源使用情况&lt;/li>
&lt;li>top -p $PID -H                      查看某个进程内所有检查的CPU资源使用情况&lt;/li>
&lt;li>top后输入F，并选择P选项    查看线程执行过程中是否调度到其他cpu上执行，上下文切换过多时，需要注意。&lt;/li>
&lt;/ul>
&lt;p>2） perf工具 perf工具是非常强大的Linux性能分析工具，可以通过该工具获得进程内的调用情况、资源消耗情况并查找分析热点函数。以CentOS为例，使用如下命令安装perf工具：&lt;/p>
&lt;ul>
&lt;li>perf top                                        查看占用 CPU 时钟最多的函数或者指令，因此可以用来查找热点函数。&lt;/li>
&lt;li>perf -g record &amp;ndash; sleep 1 -p $PID  记录进程在1s内的系统调用。&lt;/li>
&lt;li>perf -g latency &amp;ndash;sort max             查看上一步记录的结果，以调度延迟排序。&lt;/li>
&lt;li>perf report                                   查看记录&lt;/li>
&lt;/ul>
&lt;p>3） numactl工具 numactl工具可用于查看当前服务器的NUMA节点配置、状态，可通过该工具将进程绑定到指定CPU核上，由指定CPU核来运行对应进程。以CentOS为例，使用如下命令安装numactl工具：&lt;/p>
&lt;ul>
&lt;li>numactl -H                      查看当前服务器的NUMA配置。&lt;/li>
&lt;li>numastat                          查看当前的NUMA运行状态。&lt;/li>
&lt;/ul>
&lt;h3 id="优化方法">优化方法&lt;/h3>
&lt;p>1） NUMA优化，减少跨NUMA访问内存 不同NUMA内的CPU核访问同一个位置的内存，性能不同。内存访问延时从高到低为：跨CPU&amp;gt;跨NUMA，不跨CPU&amp;gt;NUMA内。因此在应用程序运行时要尽可能地避免跨NUMA访问内存，这可以通过设置线程的CPU亲和性来实现。常用的修改方式有如下：（1）将设备中断绑定到特定CPU核上。可以通过如下命令绑定：&lt;/p>
&lt;p>&lt;code>echo $cpuNumber &amp;gt; /proc/irq/$irq/smp_affinity_list  例子：echo 0-4 &amp;gt; /proc/irq/78/smp_affinity_list       echo 3,8 &amp;gt; /proc/irq/78/smp_affinity_list &lt;/code>&lt;/p>
&lt;p>（2）通过numactl启动程序，如下面的启动命令表示启动程序./mongod，mongo就只能在CPU core 0到core7运行(-C控制)。&lt;/p>
&lt;p>&lt;code>numactl -C 0-7 ./mongod &lt;/code>&lt;/p>
&lt;p>（3）可以使用 taskset 命令把一个程序绑定在一个核上运行。&lt;/p>
&lt;p>&lt;code>taskset -c 0 ./redis-server &lt;/code>&lt;/p>
&lt;p>（4）在C/C++代码中通过sched_setaffinity函数来设置线程亲和性。（5）很多开源软件已经支持在自带的配置文件中修改线程的亲和性，例如Nginx可以修改nginx.conf文件中worker_cpu_affinity参数来设置Nginx线程亲和性。&lt;/p>
&lt;h2 id="2绑核注意事项">2绑核注意事项&lt;/h2>
&lt;p>在 CPU 的 NUMA 架构下，对 CPU 核的编号规则，并不是先把一个 CPU Socket 中的所有逻辑核编完，再对下一个 CPU Socket 中的逻辑核编码，而是先给每个 CPU Socket 中每个物理核的第一个逻辑核依次编号，再给每个 CPU Socket 中的物理核的第二个逻辑核依次编号。&lt;img src="https://mmbiz.qpic.cn/mmbiz_png/ibD9iaaPDn99gtSUiaaFg901xOL7aeib35k3Go5f7Q3n45NiaGYcUFCFaPicPnGEU4tiboXy3ljpYS7GrlwIAzrpOu55A/640?wx_fmt=png" alt="">
注意的是在多个进程要进行亲和性绑核的，你一定要注意 NUMA 架构下 CPU 核的编号方法，这样才不会绑错核。&lt;/p>
&lt;h3 id="预告">预告&lt;/h3>
&lt;p>下一节，我们将聊聊如何通过提L1与L2缓存命中率来提高应用程序性能。&lt;/p></description></item><item><title>Docs: Load 高/CPU 使用率 问题及实用脚本</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/X.Linux-%E7%AE%A1%E7%90%86/%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0%E4%B8%8E%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/CPU-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/Load-%E9%AB%98_CPU-%E4%BD%BF%E7%94%A8%E7%8E%87-%E9%97%AE%E9%A2%98%E5%8F%8A%E5%AE%9E%E7%94%A8%E8%84%9A%E6%9C%AC/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/X.Linux-%E7%AE%A1%E7%90%86/%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0%E4%B8%8E%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/CPU-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/Load-%E9%AB%98_CPU-%E4%BD%BF%E7%94%A8%E7%8E%87-%E9%97%AE%E9%A2%98%E5%8F%8A%E5%AE%9E%E7%94%A8%E8%84%9A%E6%9C%AC/</guid><description>
&lt;h1 id="linux-资源瓶颈分析概述">Linux 资源&amp;amp;瓶颈分析概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/fzLcAkYwKhj-9hgoVkTzaw">公众号,CPU 飙高，系统性能问题如何排查？&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://developer.aliyun.com/topic/download?id=143">阿里云,ECS 运维指南之 LInux 系统诊断-找到 Linux 虚机 Load 高的元凶&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Load Average 和 CPU 使用率 可被细分为不同的子域指标，指向不同的资源瓶颈。总体来说，指标与资源瓶颈的对应关系基本如下图所示。&lt;/p>
&lt;p>注意：Load 与 CPU 使用率 之间没有必然的联系。有可能 Load 很高，而 CPU 使用率很低；也有可能 Load 很低而 CPU 使用率很高。具体原因详见 CPU 管理 与 Process 进程管理 章节中关于 Load 与 CPU 使用率的概念。简单说就是因为 Load Average 在计算时，包含了对 I/O 的统计&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/go9krg/1616164005685-f19dcd0b-9837-42cb-aeaa-a48586cf1cca.jpeg" alt="">&lt;/p>
&lt;h2 id="load-高--cpu-高">Load 高 &amp;amp; CPU 高&lt;/h2>
&lt;p>这是我们最常遇到的一类情况，即 load 上涨是 CPU 负载上升导致。根据 CPU 具体资源分配表现，可分为以下几类：&lt;/p>
&lt;p>&lt;strong>CPU sys 高&lt;/strong>&lt;/p>
&lt;p>这种情况 CPU 主要开销在于系统内核，可进一步查看上下文切换情况。&lt;/p>
&lt;ul>
&lt;li>如果非自愿上下文切换较多，说明 CPU 抢占较为激烈，大量进程由于时间片已到等原因，被系统强制调度，进而发生的上下文切换。&lt;/li>
&lt;li>如果自愿上下文切换较多，说明可能存在 I/O、内存等系统资源瓶颈，大量进程无法获取所需资源，导致的上下文切换。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>CPU si 高&lt;/strong>&lt;/p>
&lt;p>这种情况 CPU 大量消耗在软中断，可进一步查看软中断类型。一般而言，网络 I/O 或者线程调度引起软中断最为常见：&lt;/p>
&lt;ul>
&lt;li>NET_TX &amp;amp; NET_RX。NET_TX 是发送网络数据包的软中断，NET_RX 是接收网络数据包的软中断，这两种类型的软中断较高时，系统存在网络 I/O 瓶颈可能性较大。&lt;/li>
&lt;li>SCHED。SCHED 为进程调度以及负载均衡引起的中断，这种中断出现较多时，系统存在较多进程切换，一般与非自愿上下文切换高同时出现，可能存在 CPU 瓶颈。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>CPU us 高&lt;/strong>&lt;/p>
&lt;p>这种情况说明资源主要消耗在应用进程，可能引发的原因有以下几类：&lt;/p>
&lt;ul>
&lt;li>死循环或代码中存在 CPU 密集计算。这种情况多核 CPU us 会同时上涨。&lt;/li>
&lt;li>内存问题，导致大量 FULLGC，阻塞线程。这种情况一般只有一核 CPU us 上涨。&lt;/li>
&lt;li>资源等待造成线程池满，连带引发 CPU 上涨。这种情况下，线程池满等异常会同时出现。&lt;/li>
&lt;/ul>
&lt;h2 id="load-高--cpu-低">Load 高 &amp;amp; CPU 低&lt;/h2>
&lt;p>这种情况出现的根本原因在于不可中断睡眠态(TASK_UNINTERRUPTIBLE)进程数较多，即 CPU 负载不高，但 I/O 负载较高。可进一步定位是磁盘 I/O 还是网络 I/O 导致。&lt;/p>
&lt;h1 id="排查策略">排查策略&lt;/h1>
&lt;p>利用现有常用的工具，我们常用的排查策略基本如下图所示：
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/go9krg/1616164005644-f386b76a-e4ac-447e-b4fc-185c5393c19f.jpeg" alt="">&lt;/p>
&lt;p>从问题发现到最终定位，基本可分为四个阶段：&lt;/p>
&lt;h2 id="资源瓶颈定位">资源瓶颈定位&lt;/h2>
&lt;p>这一阶段通过全局性能检测工具，初步定位资源消耗异常位点。&lt;/p>
&lt;p>常用的工具有：&lt;/p>
&lt;ul>
&lt;li>top、vmstat、tsar(历史)&lt;/li>
&lt;li>中断：/proc/softirqs、/proc/interrupts&lt;/li>
&lt;li>I/O：iostat、dstat&lt;/li>
&lt;/ul>
&lt;h2 id="热点进程定位">热点进程定位&lt;/h2>
&lt;p>定位到资源瓶颈后，可进一步分析具体进程资源消耗情况，找到热点进程。&lt;/p>
&lt;p>常用工具有：&lt;/p>
&lt;ul>
&lt;li>上下文切换：pidstat -w&lt;/li>
&lt;li>CPU：pidstat -u&lt;/li>
&lt;li>I/O：iotop、pidstat -d&lt;/li>
&lt;li>僵尸进程：ps&lt;/li>
&lt;/ul>
&lt;h2 id="线程进程内部资源定位">线程&amp;amp;进程内部资源定位&lt;/h2>
&lt;p>找到具体进程后，可细化分析进程内部资源开销情况。&lt;/p>
&lt;p>常用工具有：&lt;/p>
&lt;ul>
&lt;li>上下文切换：pidstat -w -p [pid]&lt;/li>
&lt;li>CPU：pidstat -u -p [pid]&lt;/li>
&lt;li>I/O: lsof&lt;/li>
&lt;/ul>
&lt;h2 id="热点事件方法分析">热点事件&amp;amp;方法分析&lt;/h2>
&lt;p>获取到热点线程后，我们可用 trace 或者 dump 工具，将线程反向关联，将问题范围定位到具体方法&amp;amp;堆栈。&lt;/p>
&lt;p>常用的工具有：&lt;/p>
&lt;ul>
&lt;li>perf：Linux 自带性能分析工具，功能类似 hotmethod，基于事件采样原理，以性能事件为基础，支持针对处理器相关性能指标与操作系统相关性能指标的性能剖析。&lt;/li>
&lt;li>jstack
&lt;ul>
&lt;li>结合 ps -Lp 或者 pidstat -p 一起使用，可初步定位热点线程。&lt;/li>
&lt;li>结合 zprofile-threaddump 一起使用，可统计线程分布、等锁情况，常用与线程数增加分析。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>strace：跟踪进程执行时的系统调用和所接收的信号。&lt;/li>
&lt;li>tcpdump：抓包分析，常用于网络 I/O 瓶颈定位。&lt;/li>
&lt;/ul>
&lt;h1 id="实用脚本">实用脚本&lt;/h1>
&lt;h2 id="找出系统中-load-高时处于运行队列的进程">找出系统中 Load 高时处于运行队列的进程&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>LANG&lt;span style="color:#f92672">=&lt;/span>C
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PATH&lt;span style="color:#f92672">=&lt;/span>/sbin:/usr/sbin:/bin:/usr/bin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>interval&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>length&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">86400&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> i in &lt;span style="color:#66d9ef">$(&lt;/span>seq &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>expr &lt;span style="color:#e6db74">${&lt;/span>length&lt;span style="color:#e6db74">}&lt;/span> / &lt;span style="color:#e6db74">${&lt;/span>interval&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#66d9ef">))&lt;/span>;&lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>date
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LANG&lt;span style="color:#f92672">=&lt;/span>C ps -eTo stat,pid,tid,ppid,comm --no-header | sed -e &lt;span style="color:#e6db74">&amp;#39;s/^ *//&amp;#39;&lt;/span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>perl -nE &lt;span style="color:#e6db74">&amp;#39;chomp;say if (m!^\S*[RD]+\S*!)&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>date
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cat /proc/loadavg
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo -e &lt;span style="color:#e6db74">&amp;#34;\n&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sleep &lt;span style="color:#e6db74">${&lt;/span>interval&lt;span style="color:#e6db74">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="查-cpu-使用率高的线程">查 CPU 使用率高的线程&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>LANG&lt;span style="color:#f92672">=&lt;/span>C
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PATH&lt;span style="color:#f92672">=&lt;/span>/sbin:/usr/sbin:/bin:/usr/bin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>interval&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>length&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">86400&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> i in &lt;span style="color:#66d9ef">$(&lt;/span>seq &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>expr &lt;span style="color:#e6db74">${&lt;/span>length&lt;span style="color:#e6db74">}&lt;/span> / &lt;span style="color:#e6db74">${&lt;/span>interval&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#66d9ef">))&lt;/span>;&lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>date
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LANG&lt;span style="color:#f92672">=&lt;/span>C ps -eT -o%cpu,pid,tid,ppid,comm | grep -v CPU | sort -n -r | head -20
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>date
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LANG&lt;span style="color:#f92672">=&lt;/span>C cat /proc/loadavg
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span> LANG&lt;span style="color:#f92672">=&lt;/span>C ps -eT -o%cpu,pid,tid,ppid,comm | sed -e &lt;span style="color:#e6db74">&amp;#39;s/^ *//&amp;#39;&lt;/span> | tr -s &lt;span style="color:#e6db74">&amp;#39; &amp;#39;&lt;/span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>grep -v CPU | sort -n -r | cut -d &lt;span style="color:#e6db74">&amp;#39; &amp;#39;&lt;/span> -f &lt;span style="color:#ae81ff">1&lt;/span> | xargs -I&lt;span style="color:#f92672">{}&lt;/span> echo -n &lt;span style="color:#e6db74">&amp;#34;{} + &amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#e6db74">&amp;#39;0&amp;#39;&lt;/span>; &lt;span style="color:#f92672">}&lt;/span> | bc -l
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sleep &lt;span style="color:#e6db74">${&lt;/span>interval&lt;span style="color:#e6db74">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">done&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fuser -k $0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>