<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – Linux 管理案例</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/X.Linux-%E7%AE%A1%E7%90%86/Linux-%E7%AE%A1%E7%90%86%E6%A1%88%E4%BE%8B/</link><description>Recent content in Linux 管理案例 on 断念梦</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/X.Linux-%E7%AE%A1%E7%90%86/Linux-%E7%AE%A1%E7%90%86%E6%A1%88%E4%BE%8B/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Linux 管理案例</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/X.Linux-%E7%AE%A1%E7%90%86/Linux-%E7%AE%A1%E7%90%86%E6%A1%88%E4%BE%8B/Linux-%E7%AE%A1%E7%90%86%E6%A1%88%E4%BE%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/X.Linux-%E7%AE%A1%E7%90%86/Linux-%E7%AE%A1%E7%90%86%E6%A1%88%E4%BE%8B/Linux-%E7%AE%A1%E7%90%86%E6%A1%88%E4%BE%8B/</guid><description>
&lt;h1 id="重置-linux-的-root-密码">重置 Linux 的 root 密码&lt;/h1>
&lt;h2 id="进入紧急模式">进入紧急模式&lt;/h2>
&lt;p>详见《[Linux 的紧急模式或救援模式](/docs/1.操作系统/X.Linux%20 管理/性能优化%20 与%20 故障处理/Linux%20 的紧急模式或救援模式.md 与 故障处理/Linux 的紧急模式或救援模式.md)》&lt;/p>
&lt;h2 id="修改密码">修改密码&lt;/h2>
&lt;ul>
&lt;li>切换到原系统执行：&lt;code>chroot /sysroot/&lt;/code>&lt;/li>
&lt;li>更改 root 密码：&lt;code>passwd root&lt;/code>&lt;/li>
&lt;li>在/目录下创建一个.autorelabel 文件，而有这个文件存在，系统在重启时就会对整个文件系统进行 relabeling
&lt;ul>
&lt;li>&lt;code>touch /.autorelabel&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>exit&lt;/code>&lt;/li>
&lt;li>&lt;code>reboot&lt;/code>&lt;/li>
&lt;/ul>
&lt;h1 id="修改网卡名">修改网卡名&lt;/h1>
&lt;p>centos 系统&lt;/p>
&lt;ul>
&lt;li>vi /etc/default/grub
&lt;ul>
&lt;li>GRUB_CMDLINE_LINUX=&amp;ldquo;net.ifnames=0 biosdevname=0 crashkernel=auto rd.lvm.lv=myvg/root rd.lvm.lv=myvg/swap rhgb quiet&amp;rdquo;&lt;/li>
&lt;li>注意，标红位置改为自己的 lvm 中 volume group 的名字&lt;/li>
&lt;li>主要就是添加紫色内容的字符串&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>grub2-mkconfig -o /boot/grub2/grub.cfg&lt;/li>
&lt;li>mv /etc/sysconfig/network-scripts/ifcfg-ens33 /etc/sysconfig/network-scripts/ifcfg-eth0&lt;/li>
&lt;li>sed -i &amp;ldquo;s/ens33/eth0/g&amp;rdquo; /etc/sysconfig/network-scripts/ifcfg-eth0&lt;/li>
&lt;/ul>
&lt;p>ubuntu 系统&lt;/p>
&lt;ul>
&lt;li>修改 grub 文件
&lt;ul>
&lt;li>vim /etc/default/grub&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>查找
&lt;ul>
&lt;li>GRUB_CMDLINE_LINUX=&amp;quot;&amp;quot;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>修改为
&lt;ul>
&lt;li>GRUB_CMDLINE_LINUX=&amp;ldquo;net.ifnames=0 biosdevname=0&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>重新生成 grub 引导配置文件
&lt;ul>
&lt;li>grub-mkconfig -o /boot/grub/grub.cfg&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>修改网络配置 ens32 为 eth0
&lt;ul>
&lt;li>vim /etc/netplan/01-netcfg.yaml&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gvagsg/1616163849544-f4eac668-9a60-40ef-b291-c28f82e1e661.jpeg" alt="">&lt;/p></description></item><item><title>Docs: Linux 代理配置</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/X.Linux-%E7%AE%A1%E7%90%86/Linux-%E7%AE%A1%E7%90%86%E6%A1%88%E4%BE%8B/Linux-%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/X.Linux-%E7%AE%A1%E7%90%86/Linux-%E7%AE%A1%E7%90%86%E6%A1%88%E4%BE%8B/Linux-%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;p>在 Linux 中，很多程序都会读取某些变量来读取代理信息&lt;/p>
&lt;ul>
&lt;li>http_proxy | https_proxy | ftp_proxy | all_proxy # 此变量值用于所有 http、https、ftp 或者所有流量&lt;/li>
&lt;li>socks_proxy # 在大多数情况下，它用于 TCP 和 UDP 流量。其值通常采用 socks：// address：port 格式。&lt;/li>
&lt;li>rsync_proxy # 这用于 rsync 流量，尤其是在 Gentoo 和 Arch 等发行版中。&lt;/li>
&lt;li>no_proxy # 以逗号分隔的域名或 IP 列表，应绕过代理。该本地主机就是一个很好的例子。一个例子是 localhost，127.0.0.1。&lt;/li>
&lt;/ul>
&lt;p>TODO: 但是这些变量却不是 Bash 的自带变量，但是这些程序却无一例外得统一使用这些变量，具体为什么暂时不知道&lt;/p>
&lt;p>语法格式&lt;/p>
&lt;p>XXXX_proxy=&amp;ldquo;http://[USER:PASSWORD@]ServerIP:PORT/&amp;rdquo; # 需要设置用户名，密码，代理服务器的 IP 和端口，用户名和密码可省&lt;/p>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>
&lt;p>http_proxy=&amp;ldquo;http://tom:secret@10.23.42.11:8080/&amp;rdquo; # 设置本机的 http 代理服务器为 10.23.42.11:8080，用户名是 tom，密码是 secret&lt;/p>
&lt;/li>
&lt;li>
&lt;p>同时设置 3 种类型代理，没有用户名和密码，代理服务器是 192.168.19.79:1080&lt;/p>
&lt;ul>
&lt;li>export {https,ftp,http}_proxy=&amp;ldquo;127.0.0.1:8889&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>all_proxy=&amp;ldquo;socks5://localhost:10808&amp;rdquo; # 使用本地 10808 端口的 socks 协议代理所有流量(e.g.安装完 v2ray 客户端并配置好启动后，即可使用该变量来让设备使用代理进行翻墙)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>no_proxy=&amp;ldquo;10.&lt;em>.&lt;/em>.&lt;em>,192.168.&lt;/em>.&lt;em>,&lt;/em>.local,localhost,127.0.0.1&amp;rdquo; # 忽略指定 ip 的代理&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>注意：通过 Systemd 启动的进程，无法识别这些环境变量，只能通过 Unit File 中的 [Service] 部分的 Environment 指令指定代理信息。&lt;/strong>&lt;/p>
&lt;h1 id="每种变量详解">每种变量详解&lt;/h1>
&lt;p>TODO: 这些变量到底应该大写还是小写？wget 命令无法识别到大写的变量。&lt;/p>
&lt;h2 id="http_proxy">http_proxy&lt;/h2>
&lt;p>为 http 网站设置代理&lt;/p>
&lt;p>示例值：&lt;/p>
&lt;ul>
&lt;li>10.0.0.51:8080&lt;/li>
&lt;li>user:pass@10.0.0.10:8080&lt;/li>
&lt;li>socks4://10.0.0.51:1080&lt;/li>
&lt;li>socks5://192.168.1.1:1080&lt;/li>
&lt;/ul>
&lt;h2 id="https_proxy">https_proxy&lt;/h2>
&lt;p>为 https 网站设置代理&lt;/p>
&lt;p>示例值：&lt;/p>
&lt;ul>
&lt;li>与 http_proxy 相同&lt;/li>
&lt;/ul>
&lt;h2 id="ftp_proxy">ftp_proxy&lt;/h2>
&lt;p>为 ftp 协议设置代理&lt;/p>
&lt;p>示例值：&lt;/p>
&lt;ul>
&lt;li>socks5://192.168.1.1:1080&lt;/li>
&lt;/ul>
&lt;h2 id="no_proxy">no_proxy&lt;/h2>
&lt;p>无需代理的主机或域名，可以使用通配符；多个时使用 &lt;code>,&lt;/code> 号分隔&lt;/p>
&lt;p>示例值：&lt;/p>
&lt;ul>
&lt;li>&lt;code>*.aiezu.com,10.*.*.*,192.168.*.*&lt;/code>&lt;/li>
&lt;li>&lt;code>*.local,localhost,127.0.0.1&lt;/code>&lt;/li>
&lt;/ul>
&lt;h1 id="最佳实践">最佳实践&lt;/h1>
&lt;h2 id="为-wsl2-设置代理">为 WSL2 设置代理&lt;/h2>
&lt;p>设置为本地计算机的 Clash&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>export hostip&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>cat /etc/resolv.conf |grep -oP &lt;span style="color:#e6db74">&amp;#39;(?&amp;lt;=nameserver\ ).*&amp;#39;&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>export http_proxy&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>hostip&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">:7890&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>export https_proxy&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>hostip&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">:7890&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>export all_proxy&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;sock5://&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>hostip&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">:7890&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>export ALL_PROXY&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;sock5://&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>hostip&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">:7890&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="proxychains">proxychains&lt;/h1>
&lt;p>项目地址：&lt;a href="https://github.com/haad/proxychains">https://github.com/haad/proxychains&lt;/a>&lt;/p>
&lt;p>凡是通过 proxychains 程序运行的程序都会通过 proxychains 配置文件中设置的代理配置来发送数据包。&lt;/p>
&lt;p>apt install proxychains 即可&lt;/p>
&lt;p>修改配置文件&lt;/p>
&lt;p>sock5 127.0.0.1 10808 # 指定本地代理服务所监听的地址&lt;/p>
&lt;p>proxychains /opt/google/chrome/chrome # 即可通过代理打开 chrome 浏览器&lt;/p>
&lt;p>&lt;code>proxychains curl -I https://www.google.com&lt;/code> 会成功&lt;/p></description></item><item><title>Docs: 通过 Socket 文件找到 TCP 连接信息</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/X.Linux-%E7%AE%A1%E7%90%86/Linux-%E7%AE%A1%E7%90%86%E6%A1%88%E4%BE%8B/%E9%80%9A%E8%BF%87-Socket-%E6%96%87%E4%BB%B6%E6%89%BE%E5%88%B0-TCP-%E8%BF%9E%E6%8E%A5%E4%BF%A1%E6%81%AF/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/X.Linux-%E7%AE%A1%E7%90%86/Linux-%E7%AE%A1%E7%90%86%E6%A1%88%E4%BE%8B/%E9%80%9A%E8%BF%87-Socket-%E6%96%87%E4%BB%B6%E6%89%BE%E5%88%B0-TCP-%E8%BF%9E%E6%8E%A5%E4%BF%A1%E6%81%AF/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;a href="https://www.cnblogs.com/web21/p/6520164.html">原文链接&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h1 id="进程的打开文件描述符表">进程的打开文件描述符表&lt;/h1>
&lt;p>&lt;a href="http://lib.csdn.net/base/linux">Linux&lt;/a> 的三个系统调用：open，socket，pipe 返回的都是一个描述符。不同的进程中，他们返回的描述符可以相同。那么，在同一个进程中，他们可以相同吗？或者说，普通文件、套接字和管道，这三者的描述符属于同一个集合吗？
在内核源码中，三个系统调用声明如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">SYSCALL_DEFINE3&lt;/span>(open, &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> __user &lt;span style="color:#f92672">*&lt;/span>, filename, &lt;span style="color:#66d9ef">int&lt;/span>, flags, &lt;span style="color:#66d9ef">umode_t&lt;/span>, mode);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">SYSCALL_DEFINE3&lt;/span>(socket, &lt;span style="color:#66d9ef">int&lt;/span>, family, &lt;span style="color:#66d9ef">int&lt;/span>, type, &lt;span style="color:#66d9ef">int&lt;/span>, protocol);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">SYSCALL_DEFINE1&lt;/span>(pipe, &lt;span style="color:#66d9ef">int&lt;/span> __user &lt;span style="color:#f92672">*&lt;/span>, fildes);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>他们都会先后调用函数&lt;/p>
&lt;ul>
&lt;li>get_unused_fd_flags：获取当前进程打开文件描述符表中的空闲描述符；&lt;/li>
&lt;li>fd_install：安装新描述符到当前进程打开文件描述符表。&lt;/li>
&lt;/ul>
&lt;p>内核为每个进程维护了一个结构体 struct task_struct，可称为进程表项、进程控制块（PCB: Process Control Block）或者进程描述符，定义如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> task_struct {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">volatile&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> state; &lt;span style="color:#75715e">/* -1 unrunnable, 0 runnable,&amp;gt;0 stopped */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">…&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">pid_t&lt;/span> pid;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">…&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> files_struct &lt;span style="color:#f92672">*&lt;/span>files;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">…&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中 files 成员成为打开文件描述符表，定义如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> files_struct {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">…&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> fdtable fdtab;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">…&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> file __rcu &lt;span style="color:#f92672">*&lt;/span> fd_array[NR_OPEN_DEFAULT];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其成员 fdtab 为关键数据成员，定义如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> fdtable {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> max_fds;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> file __rcu &lt;span style="color:#f92672">**&lt;/span>fd; &lt;span style="color:#75715e">/* current fd array */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#f92672">*&lt;/span>close_on_exec;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#f92672">*&lt;/span>open_fds;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> rcu_head rcu;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这说明普通的文件、套接字、管道等，都被抽象为文件，共同占用进程的打开文件描述符。
　　　　&lt;a href="http://blog.csdn.net/aprilweet/article/details/53482930">http://blog.csdn.net/aprilweet/article/details/53482930&lt;/a>
========================另外一篇=============================&lt;/p>
&lt;p>/Proc 目录下面有许多数字命名的子目录，这些数字表示系统当前运行的进程号；
其中/proc/N/fd 目录下面保存了打开的文件描述符，指向实际文件的一个链接。如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>root@yang-ubuntu:/proc/4810/fd# ll
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>总用量 &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dr-x------ &lt;span style="color:#ae81ff">2&lt;/span> root root &lt;span style="color:#ae81ff">0&lt;/span> 3月 &lt;span style="color:#ae81ff">8&lt;/span> 16:07 ./
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dr-xr-xr-x &lt;span style="color:#ae81ff">8&lt;/span> root root &lt;span style="color:#ae81ff">0&lt;/span> 3月 &lt;span style="color:#ae81ff">8&lt;/span> 16:07 ../
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lrwx------ &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">64&lt;/span> 3月 &lt;span style="color:#ae81ff">8&lt;/span> 16:08 &lt;span style="color:#ae81ff">0&lt;/span> -&amp;gt; /dev/pts/1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lrwx------ &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">64&lt;/span> 3月 &lt;span style="color:#ae81ff">8&lt;/span> 16:08 &lt;span style="color:#ae81ff">1&lt;/span> -&amp;gt; /dev/pts/1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lrwx------ &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">64&lt;/span> 3月 &lt;span style="color:#ae81ff">8&lt;/span> 16:09 &lt;span style="color:#ae81ff">10&lt;/span> -&amp;gt; socket:&lt;span style="color:#f92672">[&lt;/span>21190&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lrwx------ &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">64&lt;/span> 3月 &lt;span style="color:#ae81ff">8&lt;/span> 16:07 &lt;span style="color:#ae81ff">2&lt;/span> -&amp;gt; /dev/pts/1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lrwx------ &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">64&lt;/span> 3月 &lt;span style="color:#ae81ff">8&lt;/span> 16:08 &lt;span style="color:#ae81ff">3&lt;/span> -&amp;gt; /tmp/ZCUDY7QsPB &lt;span style="color:#f92672">(&lt;/span>deleted&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lrwx------ &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">64&lt;/span> 3月 &lt;span style="color:#ae81ff">8&lt;/span> 16:08 &lt;span style="color:#ae81ff">4&lt;/span> -&amp;gt; /tmp/sess_0fpvhvcpftcme834e1l4beo2i6
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lrwx------ &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">64&lt;/span> 3月 &lt;span style="color:#ae81ff">8&lt;/span> 16:08 &lt;span style="color:#ae81ff">5&lt;/span> -&amp;gt; socket:&lt;span style="color:#f92672">[&lt;/span>20625&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lrwx------ &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">64&lt;/span> 3月 &lt;span style="color:#ae81ff">8&lt;/span> 16:08 &lt;span style="color:#ae81ff">6&lt;/span> -&amp;gt; anon_inode:&lt;span style="color:#f92672">[&lt;/span>eventpoll&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lrwx------ &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">64&lt;/span> 3月 &lt;span style="color:#ae81ff">8&lt;/span> 16:08 &lt;span style="color:#ae81ff">7&lt;/span> -&amp;gt; socket:&lt;span style="color:#f92672">[&lt;/span>20626&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lrwx------ &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">64&lt;/span> 3月 &lt;span style="color:#ae81ff">8&lt;/span> 16:08 &lt;span style="color:#ae81ff">8&lt;/span> -&amp;gt; socket:&lt;span style="color:#f92672">[&lt;/span>20627&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lrwx------ &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">64&lt;/span> 3月 &lt;span style="color:#ae81ff">8&lt;/span> 16:09 &lt;span style="color:#ae81ff">9&lt;/span> -&amp;gt; socket:&lt;span style="color:#f92672">[&lt;/span>21189&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们想查看 9 -&amp;gt; Socket 文件描述符的链接状态该怎么看呢？聪明的注意到后面有个数字[21189]，这个数字又是哪儿来的呢？请往下看。&lt;/p>
&lt;p>在/proc/net/tcp 目录下面保存了所有 TCP 链接的状态信息。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>root@yang-ubuntu:/proc/net# vim /proc/net/tcp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sl local_address rem_address st tx_queue rx_queue tr tm-&amp;gt;when retrnsmt uid timeout inode
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0: 00000000:0CEA 00000000:0000 0A 00000000:00000000 00:00000000 &lt;span style="color:#ae81ff">00000000&lt;/span> &lt;span style="color:#ae81ff">1001&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">9482&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> ffff88001a501a00 &lt;span style="color:#ae81ff">100&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span> -1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>1: 00000000:008B 00000000:0000 0A 00000000:00000000 00:00000000 &lt;span style="color:#ae81ff">00000000&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">8916&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> ffff88001a501380 &lt;span style="color:#ae81ff">100&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span> -1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2: 00000000:0050 00000000:0000 0A 00000000:00000000 00:00000000 &lt;span style="color:#ae81ff">00000000&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">11440&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> ffff88001a502080 &lt;span style="color:#ae81ff">100&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span> -1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>3: 0100007F:0035 00000000:0000 0A 00000000:00000000 00:00000000 &lt;span style="color:#ae81ff">00000000&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">12333&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> ffff88001a502700 &lt;span style="color:#ae81ff">100&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span> -1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>4: 00000000:0016 00000000:0000 0A 00000000:00000000 00:00000000 &lt;span style="color:#ae81ff">00000000&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">7922&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> ffff88001a500000 &lt;span style="color:#ae81ff">100&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span> -1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>5: 0100007F:0277 00000000:0000 0A 00000000:00000000 00:00000000 &lt;span style="color:#ae81ff">00000000&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">13302&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> ffff88001a500680 &lt;span style="color:#ae81ff">100&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span> -1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>6: 00000000:01BD 00000000:0000 0A 00000000:00000000 00:00000000 &lt;span style="color:#ae81ff">00000000&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">8914&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> ffff88001a500d00 &lt;span style="color:#ae81ff">100&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span> -1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>7: 00000000:0929 00000000:0000 0A 00000000:00000000 00:00000000 &lt;span style="color:#ae81ff">00000000&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">20625&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> ffff88001a504100 &lt;span style="color:#ae81ff">100&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span> -1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>8: 8064A8C0:01BD 0164A8C0:C26A &lt;span style="color:#ae81ff">01&lt;/span> 00000000:00000000 02:00030E57 &lt;span style="color:#ae81ff">00000000&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">13216&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> ffff88001a503a80 &lt;span style="color:#ae81ff">22&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span> &lt;span style="color:#ae81ff">18&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>9: 8064A8C0:0929 0164A8C0:F4B5 &lt;span style="color:#ae81ff">01&lt;/span> 00000000:00000000 02:00097B3E &lt;span style="color:#ae81ff">00000000&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">21189&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> ffff88001a505b00 &lt;span style="color:#ae81ff">24&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span> &lt;span style="color:#ae81ff">28&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span> -1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>10: 8064A8C0:0016 0164A8C0:CD9C &lt;span style="color:#ae81ff">01&lt;/span> 00000000:00000000 02:0000B4B4 &lt;span style="color:#ae81ff">00000000&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">17721&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> ffff88001a503400 &lt;span style="color:#ae81ff">22&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span> &lt;span style="color:#ae81ff">20&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span> -1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>11: 8064A8C0:0016 0164A8C0:CDAE &lt;span style="color:#ae81ff">01&lt;/span> 00000000:00000000 02:0000DB1B &lt;span style="color:#ae81ff">00000000&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">18130&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> ffff88001a504e00 &lt;span style="color:#ae81ff">24&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span> &lt;span style="color:#ae81ff">31&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span> -1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>12: 8064A8C0:0929 0164A8C0:F4B6 &lt;span style="color:#ae81ff">01&lt;/span> 00000000:00000000 02:00097B3E &lt;span style="color:#ae81ff">00000000&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">21190&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> ffff88001a506800 &lt;span style="color:#ae81ff">24&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span> &lt;span style="color:#ae81ff">24&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span> -1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>13: 8064A8C0:0016 0164A8C0:CDAC &lt;span style="color:#ae81ff">01&lt;/span> 00000000:00000000 02:0000DB1B &lt;span style="color:#ae81ff">00000000&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">18074&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> ffff88001a502d80 &lt;span style="color:#ae81ff">21&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span> &lt;span style="color:#ae81ff">24&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span> -1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>14: 8064A8C0:0016 0164A8C0:F3FC &lt;span style="color:#ae81ff">01&lt;/span> 00000000:00000000 02:00089B3B &lt;span style="color:#ae81ff">00000000&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">20675&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> ffff88001a506180 &lt;span style="color:#ae81ff">24&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span> &lt;span style="color:#ae81ff">25&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span> -1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>15: 8064A8C0:0016 0164A8C0:CDAD &lt;span style="color:#ae81ff">01&lt;/span> 00000080:00000000 01:00000018 &lt;span style="color:#ae81ff">00000000&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">18102&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span> ffff88001a504780 &lt;span style="color:#ae81ff">24&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span> &lt;span style="color:#ae81ff">21&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span> -1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>看上数字【21189 】没有，就是这儿来的，到此我们可以找出链接的 IP、PORT 链接四元组【8064A8C0:0929 0164A8C0:F4B5】这个地方是用十六进制保存的，换算成十进制方式【192.168.100.128:2345            192.168.100.1:62645】；
去网络连接状态里面看一下：&lt;/p>
&lt;p>root@yang-ubuntu:/proc/4275/fd# netstat -antp
激活 Internet 连接 (服务器和已建立连接的)
Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program name
tcp 0 0 0.0.0.0:3306 0.0.0.0:_ LISTEN 1710/mysqld
tcp 0 0 0.0.0.0:139 0.0.0.0:_ LISTEN 1062/smbd
tcp 0 0 0.0.0.0:80 0.0.0.0:_ LISTEN 1736/nginx.conf
tcp 0 0 127.0.0.1:53 0.0.0.0:_ LISTEN 1925/dnsmasq
tcp 0 0 0.0.0.0:22 0.0.0.0:_ LISTEN 628/sshd
tcp 0 0 127.0.0.1:631 0.0.0.0:_ LISTEN 709/cupsd
tcp 0 0 0.0.0.0:445 0.0.0.0:_ LISTEN 1062/smbd
tcp 0 0 0.0.0.0:2345 0.0.0.0:_ LISTEN 4809/start.php
tcp 0 0 192.168.100.128:445 192.168.100.1:49770 ESTABLISHED 2514/smbd
tcp 0 0 192.168.100.128:2345 192.168.100.1:62645 ESTABLISHED 4810/0.0.0.0:2345
tcp 0 0 192.168.100.128:22 192.168.100.1:52636 ESTABLISHED 3565/sshd: root@not
tcp 0 0 192.168.100.128:22 192.168.100.1:52654 ESTABLISHED 3718/3
tcp 0 0 192.168.100.128:22 192.168.100.1:52652 ESTABLISHED 3714/1
tcp 0 0 192.168.100.128:22 192.168.100.1:62460 ESTABLISHED 4817/4
tcp 0 0 192.168.100.128:22 192.168.100.1:52653 ESTABLISHED 3716/2
tcp6 0 0 :::139 :::_ LISTEN 1062/smbd
tcp6 0 0 :::22 :::_ LISTEN 628/sshd
tcp6 0 0 ::1:631 :::_ LISTEN 709/cupsd
tcp6 0 0 :::445 :::_ LISTEN 1062/smbd
回到开始的问题：9 Socket 文件描述符代表的是本地【192.168.100.128:2345】到【192.168.100.1:62645】的一条 TCP 连接！&lt;/p>
&lt;p>为什么往 socket 中写数据，就会发送到对端(只针对 tcp 协议的研究)?  举例：浏览器请求服务器？
客户端首先发起建立与服务器 TCP 连接。一旦建立连接，浏览器进程和服务器进程就可以通过各自的套接字来访问 TCP。
客户端套接字是客户进程和 TCP 连接之间的“门”，服务器端套接字是服务器进程和同一 TCP 连接之间的“门”。
客户往自己的套接字发送 HTTP 请求消息，也从自己的套接字接收 HTTP 响应消息。
类似地，服务器从自己的套接字接收 HTTP 请求消息，也往自己的套接字发送 HTTP 响应消息。
客户端或服务器一旦把某个消息送入各自的套接字，这个消息就完全落入 TCP 的控制之中。//所以说底层是基于 tcp 提供的可靠的消息传输机制
TCP 给 HTTP 提供一个可靠的数据传输服务;这意味着由客户发出的每个 HTTP 请求消息最终将无损地到达服务器，由服务器发出的每个 HTTP 响应消息最终也将无损地到达客户。&lt;/p></description></item></channel></rss>