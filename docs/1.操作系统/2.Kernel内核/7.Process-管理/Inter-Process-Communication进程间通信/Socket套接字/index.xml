<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – Socket(套接字)</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.Kernel%E5%86%85%E6%A0%B8/7.Process-%E7%AE%A1%E7%90%86/Inter-Process-Communication%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/Socket%E5%A5%97%E6%8E%A5%E5%AD%97/</link><description>Recent content in Socket(套接字) on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.Kernel%E5%86%85%E6%A0%B8/7.Process-%E7%AE%A1%E7%90%86/Inter-Process-Communication%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/Socket%E5%A5%97%E6%8E%A5%E5%AD%97/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Socket(套接字)</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.Kernel%E5%86%85%E6%A0%B8/7.Process-%E7%AE%A1%E7%90%86/Inter-Process-Communication%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/Socket%E5%A5%97%E6%8E%A5%E5%AD%97/Socket%E5%A5%97%E6%8E%A5%E5%AD%97/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.Kernel%E5%86%85%E6%A0%B8/7.Process-%E7%AE%A1%E7%90%86/Inter-Process-Communication%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/Socket%E5%A5%97%E6%8E%A5%E5%AD%97/Socket%E5%A5%97%E6%8E%A5%E5%AD%97/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Socket">Wiki,Socket&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Unix_domain_socket">Wiki,Unix domain Socket&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Network_socket">Wiki,Network Scoket&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Socket(套接字)&lt;/strong> &lt;strong>是数据通信的基石&lt;/strong>。是计算机领域中数据通信的一种约定，或者说是一种方法。通过 Socket 这种方法，计算机内的进程可以互相交互数据，不同计算机之间也可以互相交互数据。&lt;/p>
&lt;p>Socket(套接字) 原意是&lt;code>插座&lt;/code>，所以 Socket 就像插座的作用一样，只要把插头插上，就能让设备获得电力。同理，只要两个程序通过 Socket 互相套接，也就是说两个程序都插在同一个 Socket 上，那么这两个程序就能交互数据。&lt;/p>
&lt;p>在计算机领域，Socket 有多种类型&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Unix Domain Socket(简称 UDS)&lt;/strong> # 用于同一台设备的不同进程间互相通信&lt;/li>
&lt;li>&lt;strong>Network Socket&lt;/strong> # 用于进程在网络间互相通信&lt;/li>
&lt;li>&lt;strong>Berkeley Sockets API&lt;/strong> # Unix Domain Socket 与 Network Socket 的 API&lt;/li>
&lt;/ul>
&lt;p>在软件上，Socket 负责套接计算机中的数据(可以想象成套接管，套接管即为套管，是用来把两个管连接起来的东西，套接字就是把计算机中的字(即最小数据)连接起来，且只把头部连接起来，套管也是，只把两根很长的管的头端套起来接上)&lt;/p>
&lt;ol>
&lt;li>在系统层面，socket 可以连接系统中的两个进程，进程与进程本身是互相独立的，如果需要传递消息，那么就需要两个进程各自打开一个接口(API)，socket 把两个进程的 api 套住使之连接起来，即可实现进程间的通信。该 socket 是抽象的，虚拟的，只是通过编程函数来实现进程的 API 功能，如果进程没有 API，那么就无法通过 socket 与其余进程通信。&lt;/li>
&lt;li>当然，一个进程也可以监听一个名为 &lt;em>.scok 的文件，这个文件就像 API 一样，其他程序想与该进程交互，只要指定该&lt;/em>.sock 文件，然后对这个 sock 文件进行读写即可。&lt;/li>
&lt;li>在网络层面，socket 负责把不在同一主机上的进程(比如主机 A 的进程 C 和主机 B 的进程 D)连接起来，而两个不同主机上的进程如何被套接起来呢，套接至少需要提供一个头端来让套接管(字)包裹住才行。这时候(协议，IP，端口,例如：ftp://192.168.0.1:22)共同组成了网络上的进程标示，该进程逻辑上的头端即为紫色部分的端口号，不同主机的两个进程可以通过套接字把端口号套起来连接，来使两个网络上不同主机的进程进行通信，该同能同样是在程序编程的时候用函数写好的，程序启动为进程的时候，则该接口会被拿出来监听。&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/nlg3b5/1619421243110-2db70bc6-f358-459c-b9a9-e199658b151a.png" alt="">
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/nlg3b5/1619421247179-b40abf99-2621-4f4e-aa6e-1d68bfe9e74b.png" alt="">&lt;/p>
&lt;h2 id="unix-domain-socket">Unix Domain Socket&lt;/h2>
&lt;p>&lt;strong>Unix Domain Socket&lt;/strong> 是 &lt;strong>IPC&lt;/strong> 的一种实现方式。Socket 原本是为了网络通信设计的，但后来在 Socket 的框架上发展出一种 IPC 机制，就是 Unix Domain Socket。虽然 Netork Socket 也可用于统一台主机的进程间通信(通过 loopback 地址 127.0.0.1)，但是 Unix Domain Socket 用于 IPC 更有效率，因为不需要经过网络协议栈，不需要打包拆包、计算校验和、维护序号和应答等，只是将应用层数据从一个进程拷贝到另一个进程。这是因为 IPC 机制本质上是可靠的通讯，而网络协议是为不可靠通讯设计的。&lt;/p>
&lt;p>Unix Domain Socket 是全双工的，API 接口语义丰富，相比其它 IPC 机制有明显的优越性，目前已成为使用最广泛的 IPC 机制，比如 X Window 服务器和 GUI 程序之间就是通过 UNIX domain socket 通讯的。&lt;/p>
&lt;p>Unix domain socket 是 POSIX 标准中的一个组件，所以不要被名字迷惑，linux 系统也是支持它的。&lt;/p>
&lt;h2 id="network-socket">Network Socket&lt;/h2>
&lt;p>详见 [Network Socket](/docs/4.数据通信/数据通信/Network%20Socket.md Socket.md)&lt;/p>
&lt;h2 id="berkeley-sockets-api">Berkeley Sockets API&lt;/h2>
&lt;p>&lt;strong>Berkeley Sockets&lt;/strong>是 Network Socket 和 Unix Domain Sockets 的 应用程序编程接口（API），用于进程间通信（IPC）。通常将其实现为可链接模块的库。它起源于 1983 年发布的 4.2BSD Unix 操作系统。&lt;/p>
&lt;p>套接字是网络通信路径的本地终结点的抽象表示（句柄）。Berkeley 套接字 API 将其表示为 Unix 哲学中的文件描述符（文件句柄），该描述符为输入和输出到数据流提供通用接口。&lt;/p>
&lt;p>伯克利套接字几乎没有任何改动，从_事实上的_标准演变为 POSIX 规范的组件。术语 &lt;strong>POSIX 套接字&lt;/strong>在本质上是_Berkeley 套接字的_同义词，但是它们也称为_BSD 套接字_，这是对 Berkeley Software Distribution 中的第一个实现的认可。&lt;/p></description></item><item><title>Docs: Unix Domain Socket 与 Network Socket 对比</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.Kernel%E5%86%85%E6%A0%B8/7.Process-%E7%AE%A1%E7%90%86/Inter-Process-Communication%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/Socket%E5%A5%97%E6%8E%A5%E5%AD%97/Unix-Domain-Socket-%E4%B8%8E-Network-Socket-%E5%AF%B9%E6%AF%94/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.Kernel%E5%86%85%E6%A0%B8/7.Process-%E7%AE%A1%E7%90%86/Inter-Process-Communication%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/Socket%E5%A5%97%E6%8E%A5%E5%AD%97/Unix-Domain-Socket-%E4%B8%8E-Network-Socket-%E5%AF%B9%E6%AF%94/</guid><description>
&lt;p>原文链接：&lt;a href="https://mp.weixin.qq.com/s/fHzKYlW0WMhP2jxh2H_59A">https://mp.weixin.qq.com/s/fHzKYlW0WMhP2jxh2H_59A&lt;/a>&lt;/p>
&lt;p>大家好，我是飞哥！&lt;/p>
&lt;p>很多读者在看完&lt;a href="https://mp.weixin.qq.com/s?__biz=MjM5Njg5NDgwNA==&amp;amp;mid=2247485270&amp;amp;idx=1&amp;amp;sn=503534e9f0560bfcfbd4539e028e0d57&amp;amp;scene=21#wechat_redirect">《127.0.0.1 之本机网络通信过程知多少 ?》&lt;/a>这一篇后，让我讲讲 Unix Domain Socket。好了，今天就安排！&lt;/p>
&lt;p>在本机网络 IO 中，我们讲到过基于普通 socket 的本机网络通信过程中，其实在内核工作流上并没有节约太多的开销。该走的系统调用、协议栈、邻居系统、设备驱动（虽然说对于本机网络 loopback 设备来说只是一个软件虚拟的东东）全都走了一遍。其工作过程如下图&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/44128591-f23c-4d0b-83f5-5a87293b7df9/640" alt="">&lt;/p>
&lt;p>那么我们今天来看另外一种本机网络 IO 通信方式 &amp;ndash; Unix Domain Socket。看看这种方式在性能开销上和基于 127.0.0.1 的本机网络 IO 有没有啥差异呢。&lt;/p>
&lt;p>本文中，我们将分析 Unix Domain Socket 的内部工作原理。你将理解为什么这种方式的性能比 127.0.0.1 要好很多。最后我们还给出了实际的性能测试对比数据。&lt;/p>
&lt;p>相信你已经迫不及待了，别着急，让我们一一展开细说！&lt;/p>
&lt;h2 id="一使用方法">一、使用方法&lt;/h2>
&lt;p>Unix Domain Socket（后面统一简称 UDS） 使用起来和传统的 socket 非常的相似。区别点主要有两个地方需要关注。&lt;/p>
&lt;p>第一，在创建 socket 的时候，普通的 socket 第一个参数 family 为 AF_INET， 而 UDS 指定为 AF_UNIX 即可。&lt;/p>
&lt;p>第二，Server 的标识不再是 ip 和 端口，而是一个路径，例如 /dev/shm/fpm-cgi.sock。&lt;/p>
&lt;p>其实在平时我们使用 UDS 并不一定需要去写一段代码，很多应用程序都支持在本机网络 IO 的时候配置。例如在 Nginx 中，如果要访问的本机 fastcgi 服务是以 UDS 方式提供服务的话，只需要在配置文件中配置这么一行就搞定了。&lt;/p>
&lt;p>&lt;code>fastcgi_pass unix:/dev/shm/fpm-cgi.sock;&lt;/code>&lt;/p>
&lt;p>如果 对于一个 UDS 的 server 来说，它的代码示例大概结构如下，大家简单了解一下。只是个示例不一定可运行。&lt;/p>
&lt;p>`int main()
{
 //  创建  unix domain socket
 int fd = socket(AF_UNIX, SOCK_STREAM, 0);&lt;/p>
&lt;p>//  绑定监听
 char *socket_path = &amp;ldquo;./server.sock&amp;rdquo;;
 strcpy(serun.sun_path, socket_path); 
 bind(fd, serun, &amp;hellip;);
 listen(fd, 128);&lt;/p>
&lt;p>while(1){
  //接收新连接
  conn = accept(fd, &amp;hellip;);&lt;/p>
&lt;p>//收发数据
  read(conn, &amp;hellip;);
  write(conn, &amp;hellip;);
 }
}&lt;/p>
&lt;p>`&lt;/p>
&lt;p>基于 UDS 的 client 也是和普通 socket 使用方式差不太多，创建一个 socket，然后 connect 即可。&lt;/p>
&lt;p>&lt;code>int main(){  sock = socket(AF_UNIX, SOCK_STREAM, 0);  connect(sockfd, ...) }&lt;/code>&lt;/p>
&lt;h2 id="二连接过程">二、连接过程&lt;/h2>
&lt;p>总的来说，基于 UDS 的连接过程比 inet 的 socket 连接过程要简单多了。客户端先创建一个自己用的 socket，然后调用 connect 来和服务器建立连接。&lt;/p>
&lt;p>在 connect 的时候，会申请一个新 socket 给 server 端将来使用，和自己的 socket 建立好连接关系以后，就放到服务器正在监听的 socket 的接收队列中。这个时候，服务器端通过 accept 就能获取到和客户端配好对的新 socket 了。&lt;/p>
&lt;p>总的 UDS 的连接建立流程如下图。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/44128591-f23c-4d0b-83f5-5a87293b7df9/640" alt="">&lt;/p>
&lt;p>内核源码中最重要的逻辑在 connect 函数中，我们来简单展开看一下。unix 协议族中定义了这类 socket 的所有方法，它位于 net/unix/af_unix.c 中。&lt;/p>
&lt;p>&lt;code>//file: net/unix/af_unix.c static const struct proto_ops unix_stream_ops = {  .family = PF_UNIX,  .owner = THIS_MODULE,  .bind =  unix_bind,  .connect = unix_stream_connect,  .socketpair = unix_socketpair,  .listen = unix_listen,  ... };&lt;/code>&lt;/p>
&lt;p>我们找到 connect 函数的具体实现，unix_stream_connect。&lt;/p>
&lt;p>`//file: net/unix/af_unix.c
static int unix_stream_connect(struct socket _sock, struct sockaddr _uaddr,
          int addr_len, int flags)
{
 struct sockaddr_un _sunaddr = (struct sockaddr_un _)uaddr;&lt;/p>
&lt;p>&amp;hellip;&lt;/p>
&lt;p>// 1.  为服务器侧申请一个新的  socket  对象
 newsk = unix_create1(sock_net(sk), NULL);&lt;/p>
&lt;p>// 2.  申请一个  skb，并关联上  newsk
 skb = sock_wmalloc(newsk, 1, 0, GFP_KERNEL);
 &amp;hellip;&lt;/p>
&lt;p>// 3.  建立两个  sock  对象之间的连接
 unix_peer(newsk) = sk;
 newsk-&amp;gt;sk_state  = TCP_ESTABLISHED;
 newsk-&amp;gt;sk_type  = sk-&amp;gt;sk_type;
 &amp;hellip;
 sk-&amp;gt;sk_state = TCP_ESTABLISHED;
 unix_peer(sk) = newsk;&lt;/p>
&lt;p>// 4.  把连接中的一头（新  socket）放到服务器接收队列中
 __skb_queue_tail(&amp;amp;other-&amp;gt;sk_receive_queue, skb);
}&lt;/p>
&lt;p>`&lt;/p>
&lt;p>主要的连接操作都是在这个函数中完成的。和我们平常所见的 TCP 连接建立过程，这个连接过程简直是太简单了。没有三次握手，也没有全连接队列、半连接队列，更没有啥超时重传。&lt;/p>
&lt;p>直接就是将两个 socket 结构体中的指针互相指向对方就行了。就是 unix_peer(newsk) = sk 和  unix_peer(sk)= newsk 这两句。&lt;/p>
&lt;p>&lt;code>//file: net/unix/af_unix.c #define unix_peer(sk) (unix_sk(sk)-&amp;gt;peer)&lt;/code>&lt;/p>
&lt;p>当关联关系建立好之后，通过 __skb_queue_tail 将 skb 放到服务器的接收队列中。注意这里的 skb 里保存着新 socket 的指针，因为服务进程通过 accept 取出这个 skb 的时候，就能获取到和客户进程中 socket 建立好连接关系的另一个 socket。&lt;/p>
&lt;p>怎么样，UDS 的连接建立过程是不是很简单！？&lt;/p>
&lt;h2 id="三发送过程">三、发送过程&lt;/h2>
&lt;p>看完了连接建立过程，我们再来看看基于 UDS 的数据的收发。这个收发过程一样也是非常的简单。发送方是直接将数据写到接收方的接收队列里的。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/44128591-f23c-4d0b-83f5-5a87293b7df9/640" alt="">&lt;/p>
&lt;p>我们从 send 函数来看起。send 系统调用的源码位于文件 net/socket.c 中。在这个系统调用里，内部其实真正使用的是 sendto 系统调用。它只干了两件简单的事情，&lt;/p>
&lt;p>第一是在内核中把真正的 socket 找出来，在这个对象里记录着各种协议栈的函数地址。第二是构造一个 struct msghdr 对象，把用户传入的数据，比如 buffer 地址、数据长度啥的，统统都装进去. 剩下的事情就交给下一层，协议栈里的函数 inet_sendmsg 了，其中 inet_sendmsg 函数的地址是通过 socket 内核对象里的 ops 成员找到的。大致流程如图。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/44128591-f23c-4d0b-83f5-5a87293b7df9/640" alt="">&lt;/p>
&lt;p>在进入到协议栈 inet_sendmsg 以后，内核接着会找到 socket 上的具体协议发送函数。对于 Unix Domain Socket 来说，那就是 unix_stream_sendmsg。我们来看一下这个函数&lt;/p>
&lt;p>`//file:
static int unix_stream_sendmsg(struct kiocb _kiocb, struct socket _sock,
          struct msghdr *msg, size_t len)
{
 // 1.申请一块缓存区
 skb = sock_alloc_send_skb(sk, size, msg-&amp;gt;msg_flags&amp;amp;MSG_DONTWAIT,
      &amp;amp;err);&lt;/p>
&lt;p>// 2.拷贝用户数据到内核缓存区
 err = memcpy_fromiovec(skb_put(skb, size), msg-&amp;gt;msg_iov, size);&lt;/p>
&lt;p>// 3.  查找 socket peer
 struct sock *other = NULL;
 other = unix_peer(sk);&lt;/p>
&lt;p>// 4.直接把  skb 放到对端的接收队列中
 skb_queue_tail(&amp;amp;other-&amp;gt;sk_receive_queue, skb);&lt;/p>
&lt;p>// 5.发送完毕回调
 other-&amp;gt;sk_data_ready(other, size);
}&lt;/p>
&lt;p>`&lt;/p>
&lt;p>和复杂的 TCP 发送接收过程相比，这里的发送逻辑简单简单到令人发指。申请一块内存（skb），把数据拷贝进去。根据 socket 对象找到另一端，&lt;strong>直接把 skb 给放到对端的接收队列里了&lt;/strong>&lt;/p>
&lt;p>接收函数主题是 unix_stream_recvmsg，这个函数中只需要访问它自己的接收队列就行了，源码就不展示了。所以在本机网络 IO 场景里，基于 Unix Domain Socket 的服务性能上肯定要好一些的。&lt;/p>
&lt;h2 id="四性能对比">四、性能对比&lt;/h2>
&lt;p>为了验证 Unix Domain Socket 到底比基于 127.0.0.1 的性能好多少，我做了一个性能测试。在网络性能对比测试，最重要的两个指标是延迟和吞吐。我从 Github 上找了个好用的测试源码：https://github.com/rigtorp/ipc-bench。我的测试环境是一台 4 核 CPU，8G 内存的 KVM 虚机。&lt;/p>
&lt;p>在延迟指标上，对比结果如下图。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/44128591-f23c-4d0b-83f5-5a87293b7df9/640" alt="">&lt;/p>
&lt;p>可见在小包（100 字节）的情况下，UDS 方法的“网络” IO 平均延迟只有 2707 纳秒，而基于 TCP（访问 127.0.0.1）的方式下延迟高达 5690 纳秒。耗时整整是前者的两倍。&lt;/p>
&lt;p>在包体达到 100 KB 以后，UDS 方法延迟 24 微秒左右（1 微秒等于 1000 纳秒），TCP 是 32 微秒，仍然高一截。这里低于 2 倍的关系了，是因为当包足够大的时候，网络协议栈上的开销就显得没那么明显了。&lt;/p>
&lt;p>再来看看吞吐效果对比。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/44128591-f23c-4d0b-83f5-5a87293b7df9/640" alt="">&lt;/p>
&lt;p>在小包的情况下，带宽指标可以达到 854 M，而基于 TCP 的 IO 方式下只有 386 M。数据就解读到这里。&lt;/p>
&lt;h2 id="五总结">五、总结&lt;/h2>
&lt;p>本文分析了基于 Unix Domain Socket 的连接创建、以及数据收发过程。其中数据收发的工作过程如下图。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/44128591-f23c-4d0b-83f5-5a87293b7df9/640" alt="">&lt;/p>
&lt;p>相对比本机网络 IO 通信过程上，它的工作过程要清爽许多。其中 127.0.0.1 工作过程如下图。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/44128591-f23c-4d0b-83f5-5a87293b7df9/640" alt="">&lt;/p>
&lt;p>我们也对比了 UDP 和 TCP 两种方式下的延迟和性能指标。在包体不大于 1KB 的时候，UDS 的性能大约是 TCP 的两倍多。&lt;strong>所以，在本机网络 IO 的场景下，如果对性能敏感，飞哥建议你使用 Unix Domain Socket。&lt;/strong>&lt;/p></description></item></channel></rss>