<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦的站点 – Linux 文本处理</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/Linux-%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/</link><description>Recent content in Linux 文本处理 on 断念梦的站点</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/Linux-%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Linux 文本处理</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/Linux-%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/Linux-%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/Linux-%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/Linux-%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;/blockquote>
&lt;p>文本处理三剑客：&lt;/p>
&lt;ul>
&lt;li>grep&lt;/li>
&lt;li>sed&lt;/li>
&lt;li>awk&lt;/li>
&lt;/ul>
&lt;h1 id="cat---用于把标准输入的内容输出到屏幕上">cat - 用于把标准输入的内容输出到屏幕上&lt;a class="td-heading-self-link" href="#cat---%e7%94%a8%e4%ba%8e%e6%8a%8a%e6%a0%87%e5%87%86%e8%be%93%e5%85%a5%e7%9a%84%e5%86%85%e5%ae%b9%e8%be%93%e5%87%ba%e5%88%b0%e5%b1%8f%e5%b9%95%e4%b8%8a" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>Note:如果标准输入的内容是一个文件，那么就把文件中的内容当作标准输入发送给 cat 命令，然后再输出到屏幕上&lt;/p>
&lt;p>执行完 cat 命令后，屏幕上会等待我输入内容，当我输入完成按回车后，会在屏幕上输出同样的内容，这就是 cat 最基本的作用，效果如下图，第一行是我主动输入的，按下回车后，自动输出内容&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gi5hfh/1616166386092-a6649d83-8e1d-4878-b609-cd9c6c5f90de.jpeg" alt="">&lt;/p>
&lt;h2 id="syntax语法">Syntax(语法)&lt;a class="td-heading-self-link" href="#syntax%e8%af%ad%e6%b3%95" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>cat [OPTIONS] [FILE]&lt;/strong>&lt;/p>
&lt;p>OPTIONS&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-A, &amp;ndash;show-all&lt;/strong> # 与 -vET 选项的效果相同&lt;/li>
&lt;li>-b, &amp;ndash;number-nonblank # number nonempty output lines, overrides -n&lt;/li>
&lt;li>&lt;strong>-e&lt;/strong> # 与 -vE 选项的效果相同&lt;/li>
&lt;li>&lt;strong>-E, &amp;ndash;show-ends&lt;/strong> # 在每行末尾显示 &lt;code>$&lt;/code>。&lt;/li>
&lt;li>&lt;strong>-n, &amp;ndash;number&lt;/strong> # 显示行号。&lt;/li>
&lt;li>-&lt;strong>s, &amp;ndash;squeeze-blank&lt;/strong> # suppress repeated empty output lines&lt;/li>
&lt;li>&lt;strong>-t&lt;/strong> # 等价于 -vT&lt;/li>
&lt;li>&lt;strong>-T, &amp;ndash;show-tabs&lt;/strong> # 将 TAB 字符显示为 &lt;code>^|&lt;/code>。TAB 字符就是按下键盘 TAB 键产生的内容，是一个制表符。也就是说将空白的制表符以 &lt;code>^|&lt;/code> 形式显示&lt;/li>
&lt;li>-u (ignored)&lt;/li>
&lt;li>&lt;strong>-v, &amp;ndash;show-nonprinting&lt;/strong> # 常用于查看该文件的换行符是否是 windows 下的 &lt;code>^M&lt;/code>。use ^ and M- notation, except for LFD and TAB&lt;/li>
&lt;/ul>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>cat -T tab&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># cat tab&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#0000cf;font-weight:bold">123&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">123&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># cat -T tab&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>123^I123
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>将多个文件的内容合并到一个文件
&lt;ul>
&lt;li>cat /data/users_* &amp;gt; users.sql&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>cat 命令可以与输入输出重定向配合向文件中写入内容，效果如下&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># cat test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#0000cf;font-weight:bold">123&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># cat &amp;gt;&amp;gt; test &amp;lt;&amp;lt; EOF&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt; &lt;span style="color:#0000cf;font-weight:bold">234&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt; &lt;span style="color:#000">$456&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt; &lt;span style="color:#4e9a06">\$&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>456&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt; EOF
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># cat test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#0000cf;font-weight:bold">123&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#0000cf;font-weight:bold">234&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#0000cf;font-weight:bold">56&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">456&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note：如果想要写入变量，则需要加上转义符号\，否则会出现引用变量效果，而如果变量没定义，则引用位置为空&lt;/p>
&lt;h1 id="tail---输出文件的最后一部分内容">tail - 输出文件的最后一部分内容&lt;a class="td-heading-self-link" href="#tail---%e8%be%93%e5%87%ba%e6%96%87%e4%bb%b6%e7%9a%84%e6%9c%80%e5%90%8e%e4%b8%80%e9%83%a8%e5%88%86%e5%86%85%e5%ae%b9" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>属于 Coreutils 包中的工具&lt;/p>
&lt;h2 id="syntax语法-1">Syntax(语法)&lt;a class="td-heading-self-link" href="#syntax%e8%af%ad%e6%b3%95-1" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>tail [OPTIONS]&lt;/strong>&lt;/p>
&lt;p>&lt;strong>OPTIONS&lt;/strong>&lt;/p>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>tail -f # 实时查看文件尾部的行，有新增的也显示出来，用于监控日志的新增内容&lt;/li>
&lt;/ul>
&lt;h1 id="column---将标准输出格式化为多个列">column - 将标准输出格式化为多个列&lt;a class="td-heading-self-link" href="#column---%e5%b0%86%e6%a0%87%e5%87%86%e8%be%93%e5%87%ba%e6%a0%bc%e5%bc%8f%e5%8c%96%e4%b8%ba%e5%a4%9a%e4%b8%aa%e5%88%97" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>column 工具将其输入格式化为多个列。 行在列之前填充。 输入来自文件，或者默认情况下来自标准输入。 空行将被忽略。&lt;/p>
&lt;h2 id="syntax语法-2">Syntax(语法)&lt;a class="td-heading-self-link" href="#syntax%e8%af%ad%e6%b3%95-2" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>column [OPTIONS] FILE&amp;hellip;&lt;/strong>&lt;/p>
&lt;p>OPTIONS&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-c, &amp;ndash;columns width&lt;/strong> # Output is formatted to a width specified as number of characters.&lt;/li>
&lt;li>&lt;strong>-t, &amp;ndash;table&lt;/strong> # Determine the number of columns the input contains and create a table. Columns are delimited with whitespace, by default, or with the characters supplied using the separator. Table output is useful pretty-printing.&lt;/li>
&lt;li>&lt;strong>-s, &amp;ndash;separator separators&lt;/strong> # Specify possible table delimiters (default is whitespace).&lt;/li>
&lt;li>&lt;strong>-o, &amp;ndash;output-separator separators&lt;/strong> # Specify table output delimiter (default is two whitespaces).&lt;/li>
&lt;li>&lt;strong>-x, &amp;ndash;fillrows&lt;/strong> # Fill columns before filling rows.&lt;/li>
&lt;/ul>
&lt;h2 id="example">EXAMPLE&lt;a class="td-heading-self-link" href="#example" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># docker ps --format {{.Image}}\\t{{.Names}}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>goharbor/harbor-jobservice:v1.9.3 harbor-jobservice
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>goharbor/nginx-photon:v1.9.3 nginx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>goharbor/harbor-core:v1.9.3 harbor-core
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>goharbor/harbor-registryctl:v1.9.3 registryctl
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>goharbor/registry-photon:v2.7.1-patch-2819-2553-v1.9.3 registry
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># docker ps --format {{.Image}}\\t{{.Names}} | column -t&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>goharbor/harbor-jobservice:v1.9.3 harbor-jobservice
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>goharbor/nginx-photon:v1.9.3 nginx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>goharbor/harbor-core:v1.9.3 harbor-core
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>goharbor/harbor-registryctl:v1.9.3 registryctl
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>goharbor/registry-photon:v2.7.1-patch-2819-2553-v1.9.3 registry
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="wc---行数统计">wc - 行数统计&lt;a class="td-heading-self-link" href="#wc---%e8%a1%8c%e6%95%b0%e7%bb%9f%e8%ae%a1" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;strong>wc[OPTIONS] FILE&lt;/strong>
OPTIONS&lt;/p>
&lt;ul>
&lt;li>-l # 统计行数&lt;/li>
&lt;li>-L # 统计字符数&lt;/li>
&lt;li>-w # 统计单词数&lt;/li>
&lt;li>-c # 统计字节&lt;/li>
&lt;/ul>
&lt;h1 id="tr---转换或删除字符">tr - 转换或删除字符&lt;a class="td-heading-self-link" href="#tr---%e8%bd%ac%e6%8d%a2%e6%88%96%e5%88%a0%e9%99%a4%e5%ad%97%e7%ac%a6" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>转换，压缩和/或删除标准输入中的字符，写入标准输出。&lt;/p>
&lt;h2 id="syntax语法-3">Syntax(语法)&lt;a class="td-heading-self-link" href="#syntax%e8%af%ad%e6%b3%95-3" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>tr [OPTION]&amp;hellip; SET1 [SET2]&lt;/strong>
默认情况，不加任何参数的话，tr 命令会把 SET1 转换为 SET2&lt;/p>
&lt;p>OPTIONS&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-d,&amp;ndash;delete&lt;/strong> # 删除 SET1 中的字符，不转换他们&lt;/li>
&lt;/ul>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>
&lt;p>把 echo 输出内容的所有大写字母转换成小写字母&lt;/p>
&lt;ul>
&lt;li>&lt;code>echo &amp;quot;HELLO WORLD&amp;quot; | tr 'A-Z' 'a-z'&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>删除 JoinNodeCMD 变量中的 \r 的换行符。&lt;/p>
&lt;ul>
&lt;li>&lt;code>echo ${JoinNodeCMD} | tr -d &amp;quot;\r&amp;quot;&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>删除结果中的 &lt;code>&amp;quot;&lt;/code> 双引号&lt;/p>
&lt;ul>
&lt;li>&lt;code>docker inspect snmp-exporter | jq .[0].GraphDriver.Data.MergedDir | tr -d &amp;quot;&amp;quot;&amp;quot; &lt;/code>
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gi5hfh/1616166386079-058c4b7f-d68f-4896-9f61-307cc928833b.jpeg" alt="">&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>以默认分隔符展示每 3 个 ARGS 为一行，替换空格符为冒号&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="cut---根据制定的分隔符切片并显示出需要显示的片">cut - 根据制定的分隔符切片，并显示出需要显示的片&lt;a class="td-heading-self-link" href="#cut---%e6%a0%b9%e6%8d%ae%e5%88%b6%e5%ae%9a%e7%9a%84%e5%88%86%e9%9a%94%e7%ac%a6%e5%88%87%e7%89%87%e5%b9%b6%e6%98%be%e7%a4%ba%e5%87%ba%e9%9c%80%e8%a6%81%e6%98%be%e7%a4%ba%e7%9a%84%e7%89%87" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="syntax语法-4">Syntax(语法)&lt;a class="td-heading-self-link" href="#syntax%e8%af%ad%e6%b3%95-4" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>OPTIONS&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-d&amp;lt;分隔符&amp;gt;&lt;/strong> # 指定分隔符是什么&lt;/li>
&lt;li>&lt;strong>-f&amp;lt;数字&amp;gt;&lt;/strong> # 指定要显示的字段是分隔符分割成的第几个字段&lt;/li>
&lt;li>单个数字 # 一个字段&lt;/li>
&lt;li>多个离散字段 # 逗号分隔&lt;/li>
&lt;li>多个连续字段 # -分隔&lt;/li>
&lt;/ul>
&lt;h2 id="example-1">EXAMPLE&lt;a class="td-heading-self-link" href="#example-1" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>显示 passwd 文件中，以冒号为分隔符的第一个字段的内容
&lt;ul>
&lt;li>cut -d: -f1 /etc/passwd&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="sort---按字符进行比较">sort - 按字符进行比较&lt;a class="td-heading-self-link" href="#sort---%e6%8c%89%e5%ad%97%e7%ac%a6%e8%bf%9b%e8%a1%8c%e6%af%94%e8%be%83" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://man7.org/linux/man-pages/man1/sort.1.html">Manual(手册),sort(1)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="syntax语法-5">Syntax(语法)&lt;a class="td-heading-self-link" href="#syntax%e8%af%ad%e6%b3%95-5" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>sort[OPTIONS] FILE&lt;/strong>
OPTIONS:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-f, &amp;ndash;ignore-case&lt;/strong> # 忽略大小写&lt;/li>
&lt;li>&lt;strong>-h, &amp;ndash;human-numeric-sort&lt;/strong> # 带单位进行比较，比如 2K、1G 等等&lt;/li>
&lt;li>&lt;strong>-n, &amp;ndash;numeric-sort&lt;/strong> # 对数字进行排序（如果没有数字则需要后面的选项指定出来数字，按照以分隔符分割的行中的第几个字段比较）&lt;/li>
&lt;li>&lt;strong>-r, &amp;ndash;reverse&lt;/strong> # 以相反的顺序排序&lt;/li>
&lt;li>&lt;strong>-t, &amp;ndash;field-separator &amp;lt;SEQ&amp;gt;&lt;/strong> # 指定分隔符为 SEQ。&lt;code>默认值：空白字符&lt;/code>&lt;/li>
&lt;li>&lt;strong>-k, &amp;ndash;key &amp;lt;开始字段数[.该段第几字符,结束字段数，该段第几字符]&amp;gt;&lt;/strong> # 指定分隔后进行比较的第几字段,默认根据第一个字段的第一个字符(即行首)进行排序
&lt;ul>
&lt;li>用法如下图，蓝色框是第一字段，红色框是第一字段的第二个字符,以：作为分隔符&lt;/li>
&lt;li>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gi5hfh/1616166387159-12db238c-77dd-4d89-823d-fdd075b49b9a.jpeg" alt="">&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>-u, &amp;ndash;unique&lt;/strong> # 重复的行，只显示一行&lt;/li>
&lt;/ul>
&lt;h1 id="uniq---移除重复的行">uniq - 移除重复的行&lt;a class="td-heading-self-link" href="#uniq---%e7%a7%bb%e9%99%a4%e9%87%8d%e5%a4%8d%e7%9a%84%e8%a1%8c" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>OPTIONS&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-c&lt;/strong> # 统计每一行出现的次数（靠着的行）&lt;/li>
&lt;li>&lt;strong>-d&lt;/strong> # 仅显示出现最少两次的行&lt;/li>
&lt;li>&lt;strong>-u&lt;/strong> # 仅显示不重复的行&lt;/li>
&lt;/ul>
&lt;h1 id="split---文件切割">split - 文件切割&lt;a class="td-heading-self-link" href="#split---%e6%96%87%e4%bb%b6%e5%88%87%e5%89%b2" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="syntax语法-6">Syntax(语法)&lt;a class="td-heading-self-link" href="#syntax%e8%af%ad%e6%b3%95-6" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>split [-a] [-d] [-l &amp;lt;行数&amp;gt;] [-b &amp;lt;字节&amp;gt;] [-C &amp;lt;字节&amp;gt;] [要切割的文件] [输出文件名]&lt;/strong>&lt;/p>
&lt;p>&lt;strong>OPTIONS&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-a&lt;/strong># 指定输出文件名的后缀长度(默认为 2 个:aa,ab&amp;hellip;)&lt;/li>
&lt;li>&lt;strong>-d&lt;/strong> # 指定输出文件名的后缀用数字代替&lt;/li>
&lt;li>&lt;strong>-l&lt;/strong> # 行数分割模式(指定每多少行切成一个小文件;默认行数是 1000 行)&lt;/li>
&lt;li>&lt;strong>-b&lt;/strong> # 二进制分割模式(支持单位:k/m)&lt;/li>
&lt;li>&lt;strong>-C&lt;/strong># 文件大小分割模式(切割时尽量维持每行的完整性)&lt;/li>
&lt;/ul>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>行切割文件
&lt;ul>
&lt;li>split -l 300000 users.sql /data/users_&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>使用数字后缀
&lt;ul>
&lt;li>split -d -l 300000 users.sql /data/users_&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>按字节大小分割
&lt;ul>
&lt;li>split -d -b 100m users.sql /data/users_&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>如果你有一个很大的文件，你想把其分割成一些小的文件，那么这个命令就是干这件事的了。&lt;/p>
&lt;p>[hchen@RHELSVR5 applebak]# ls -l largefile.tar.gz-rw-r&amp;ndash;r&amp;ndash; 1 hchen hchen 436774774 04-17 02:00 largefile.tar.gz&lt;/p>
&lt;p>[hchen@RHELSVR5 applebak]# split -b 50m largefile.tar.gz LF_&lt;/p>
&lt;p>[hchen@RHELSVR5]# ls -l LF_*-rw-r&amp;ndash;r&amp;ndash; 1 hchen hchen 52428800 05-10 18:34 LF_aa-rw-r&amp;ndash;r&amp;ndash; 1 hchen hchen 52428800 05-10 18:34 LF_ab-rw-r&amp;ndash;r&amp;ndash; 1 hchen hchen 52428800 05-10 18:34 LF_ac-rw-r&amp;ndash;r&amp;ndash; 1 hchen hchen 52428800 05-10 18:34 LF_ad-rw-r&amp;ndash;r&amp;ndash; 1 hchen hchen 52428800 05-10 18:34 LF_ae-rw-r&amp;ndash;r&amp;ndash; 1 hchen hchen 52428800 05-10 18:35 LF_af-rw-r&amp;ndash;r&amp;ndash; 1 hchen hchen 52428800 05-10 18:35 LF_ag-rw-r&amp;ndash;r&amp;ndash; 1 hchen hchen 52428800 05-10 18:35 LF_ah-rw-r&amp;ndash;r&amp;ndash; 1 hchen hchen 17344374 05-10 18:35 LF_ai&lt;/p>
&lt;p>文件合并只需要使用简单的合并就行了，如：&lt;/p>
&lt;p>[hchen@RHELSVR5]# cat LF_* &amp;gt;largefile.tar.gz&lt;/p>
&lt;h1 id="windows-文件换行符转换为-linux-换行符">Windows 文件换行符转换为 Linux 换行符&lt;a class="td-heading-self-link" href="#windows-%e6%96%87%e4%bb%b6%e6%8d%a2%e8%a1%8c%e7%ac%a6%e8%bd%ac%e6%8d%a2%e4%b8%ba-linux-%e6%8d%a2%e8%a1%8c%e7%ac%a6" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>由于 Windows 的换行符和 Linux 换行符不一样，导致程序编译不通过。&lt;/p>
&lt;p>首先介绍下，在 ASCII 中存在这样两个字符 CR（编码为 13）和 LF（编码为 10），在编程中我们一般称其分别为 &lt;code>\r&lt;/code> 和 &lt;code>\n&lt;/code>。他们被用来作为换行标志，但在不同系统中换行标志又不一样。下面是不同操作系统采用不同的换行符：&lt;/p>
&lt;ul>
&lt;li>Unix 和类 Unix（如 Linux）：换行符采用 &lt;code>\n&lt;/code>&lt;/li>
&lt;li>Windows 和 MS-DOS：换行符采用 &lt;code>\r\n&lt;/code>&lt;/li>
&lt;li>Mac OS X 之前的系统：换行符采用 &lt;code>\r&lt;/code>&lt;/li>
&lt;li>Mac OS X：换行符采用 &lt;code>\n&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Linux 中查看换行符&lt;/p>
&lt;p>第一种使用 &lt;code>cat -A FILE&lt;/code> 查看，如下图所示，看到的为一个 Windows 形式的换行符，&lt;code>\r&lt;/code> 对应符号 &lt;code>^M&lt;/code>，&lt;code>\n&lt;/code>对应符号 &lt;code>$&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/dpdq7l/1616166269671-c8b5ded5-c271-40cf-b020-da3982fe0e6a.jpeg" alt="">&lt;/p>
&lt;p>第二种使用vi编辑器查看，然后使用 &lt;code>set list&lt;/code> 命令显示特殊字符&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/dpdq7l/1616166269630-cb766b5e-f716-47f5-b059-38316b6a2b15.jpeg" alt="">&lt;/p>
&lt;p>怎么^M还是没显示出来，用VI的二进制模式 &lt;code>vi -b FILE&lt;/code> 打开，才能够显示出 &lt;code>^M&lt;/code>：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/dpdq7l/1616166269631-a080ab28-bbae-4f16-b8fc-4bf5f96c470b.jpeg" alt="">&lt;/p>
&lt;h2 id="替换方法">替换方法&lt;a class="td-heading-self-link" href="#%e6%9b%bf%e6%8d%a2%e6%96%b9%e6%b3%95" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>方法一：使用 VI 普通模式打开文件，然后运行命令&amp;quot;set ff=unix&amp;quot; 则可以将 Windows 换行符转换为 Linux 换行符，简单吧！命令中 ff 的全称为 file encoding。&lt;/p>
&lt;p>方法二：使用命令&amp;quot;dos2unix&amp;quot;，如下所示&lt;/p>
&lt;ul>
&lt;li>&lt;code>dos2unix 123.txt&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>方法三：使用 sed 命令删除\r 字符:&lt;/p>
&lt;ul>
&lt;li>&lt;code>sed -i 's/\r//g' gggggggg.txt&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>方法四：使用 windows 版 git 里提供的命令来进行替换，在 git 命令行中进入到要替换文件的目录，执行下面的命令。Node：一定要进入指定目录再执行命令&lt;/p>
&lt;ul>
&lt;li>&lt;code>find . -type f -exec dos2unix {} ;&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>多文件处理换行符转换&lt;/p>
&lt;p>通常我们都会有一批文件需要替换，比如一个目录的都要替换，我自己写了一个简单的脚本去遍历目录和子目录下的所有文件，并且将其转换为Linux换行格式。代码如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#!/bin/sh
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#CheckInput&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#Check Whether the input is valid&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#0 means not valid&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CheckInput&lt;span style="color:#ce5c00;font-weight:bold">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">ret&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>1&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">#Check the number of parameter&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic"># And Check whether the argument is a folder&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> &lt;span style="color:#000">$#&lt;/span> -lt &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Please use the command like ./dos2u.sh [Folder]&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">ret&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">elif&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> ! -d &lt;span style="color:#000">$1&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Please use an invalid Folder as the shell argument&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">ret&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">$ret&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#TraverseFolder&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#Traser all the files under the folder&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TraverseFolder&lt;span style="color:#ce5c00;font-weight:bold">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">oldPath&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">`&lt;/span>&lt;span style="color:#204a87">pwd&lt;/span>&lt;span style="color:#4e9a06">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">cd&lt;/span> &lt;span style="color:#000">$1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> file in &lt;span style="color:#4e9a06">`&lt;/span>ls&lt;span style="color:#4e9a06">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> -d &lt;span style="color:#000">$file&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> TraverseFolder &lt;span style="color:#000">$file&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">#echo $file;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">#sed -i &amp;#39;s/\r//g&amp;#39; $file&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dos2unix &lt;span style="color:#000">$file&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">done&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">cd&lt;/span> &lt;span style="color:#000">$oldPath&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CheckInput &lt;span style="color:#000">$*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> &lt;span style="color:#000">$ret&lt;/span> -ne &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">exit&lt;/span> -1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TraverseFolder &lt;span style="color:#000">$1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: gettext</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/Linux-%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/gettext/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/Linux-%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/gettext/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.gnu.org/software/gettext/">官网&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>gettext 是 GNU 旗下的一组工具集合，提供了一个框架以帮助其他 GNU 包生成多语言消息。&lt;/p>
&lt;p>通常包含如下几个工具：&lt;/p>
&lt;ul>
&lt;li>envsubst&lt;/li>
&lt;li>gettext&lt;/li>
&lt;li>gettext.sh&lt;/li>
&lt;li>ngettext&lt;/li>
&lt;/ul>
&lt;h1 id="安装-gettext">安装 gettext&lt;a class="td-heading-self-link" href="#%e5%ae%89%e8%a3%85-gettext" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>一般的发行版都默认自带 gettext 工具集，如果没有，使用包管理器安装 gettext 包即可&lt;/p>
&lt;p>Ubuntu&lt;/p>
&lt;ul>
&lt;li>apt install gettext-base&lt;/li>
&lt;/ul>
&lt;h1 id="envsubst">envsubst&lt;a class="td-heading-self-link" href="#envsubst" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.gnu.org/software/gettext/manual/html_node/envsubst-Invocation.html">官方手册，envsubst&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>envsubst 程序可以用来替换环境变量的值。正常情况下，与 cat 命令类似，所有的标准输入都会复制到标准输出，但是不同的地方在于，如果标准输入中包含变量引用，比如 &lt;code>$VARIABLE&lt;/code> 或 &lt;code>${VARIABLE}&lt;/code> 这种形式，则这些引用将会被替换为变量的值：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># envsubst&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>HOME
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>HOME
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">$HOME&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/root
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">HOME&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/root
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>若我们将标准输入改为由文件提供，那么我们就可以将文件中的所有变量引用的地方都替换为对应的值。比如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo tee ~/tmp/test.txt &amp;lt;&amp;lt;-&lt;span style="color:#4e9a06">&amp;#34;EOF&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">HOME&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">HOME&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">PATH&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">PATH&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">API_URL&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">API_URL&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>EOF
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行 &lt;code>envsubst &amp;lt; test.txt &amp;gt; test2.txt&lt;/code> 命令以替换文件中的环境变量，生成的 test.txt 内容如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># cat test2.txt &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">HOME&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> /root
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">PATH&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/usr/local/go/bin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">API_URL&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>也可以使用 &lt;code>envsubst '${HOME}' &amp;lt; test.txt &amp;gt; test1.txt&lt;/code> 这种方式只替换 &lt;code>${HOME}&lt;/code> 变量，多个变量以 &lt;code>,&lt;/code> 分隔。&lt;/p>
&lt;h2 id="syntax语法">Syntax(语法)&lt;a class="td-heading-self-link" href="#syntax%e8%af%ad%e6%b3%95" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>envsubst [OPTIONS] [ShellFormat]&lt;/strong>&lt;/p></description></item><item><title>Docs: grep</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/Linux-%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/grep/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/Linux-%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/grep/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://man7.org/linux/man-pages/man1/grep.1.html">Manual(手册)，grep(1)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>grep 是文本搜索工具，可以使用正则表达式在文件内查找符合条件的字串行&lt;/p>
&lt;h1 id="syntax语法">Syntax(语法)&lt;a class="td-heading-self-link" href="#syntax%e8%af%ad%e6%b3%95" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;strong>grep [OPTIONS] PATTERNS [FILE&amp;hellip;]&lt;/strong>&lt;/p>
&lt;p>grep 根据 PATTERNS(模式) 过滤给定的内容。其实就是使用正则表达式，过滤内容。&lt;/p>
&lt;h2 id="options">OPTIONS&lt;a class="td-heading-self-link" href="#options" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="pattern-syntaz模式语法">Pattern Syntaz(模式语法)&lt;a class="td-heading-self-link" href="#pattern-syntaz%e6%a8%a1%e5%bc%8f%e8%af%ad%e6%b3%95" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>用于定义过滤时所解析的正则表达式语法&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-E, &amp;ndash;extended-regexp&lt;/strong> # 将 PATTERNS 解释为扩展的正则表达式（ERE，请参见下文）。&lt;/li>
&lt;li>&lt;strong>-P,&amp;ndash;perl-regexp&lt;/strong> # 将 PATTERNS 解释为与 Perl 兼容的正则表达式(PCREs)。与-z（&amp;ndash;null-data）选项结合使用时，此选项是实验性的，并且 grep -P 可能会警告未实现的功能。&lt;/li>
&lt;/ul>
&lt;h3 id="matching-control配置控制">Matching Control(配置控制)&lt;a class="td-heading-self-link" href="#matching-control%e9%85%8d%e7%bd%ae%e6%8e%a7%e5%88%b6" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>-i&lt;/strong> # 忽略大小写&lt;/li>
&lt;li>&lt;strong>-v, &amp;ndash;invert-match&lt;/strong> # 反向选择，选择没有要匹配的字符串的行&lt;/li>
&lt;/ul>
&lt;h3 id="general-output-control通用输出控制-选项">General Output Control(通用输出控制) 选项&lt;a class="td-heading-self-link" href="#general-output-control%e9%80%9a%e7%94%a8%e8%be%93%e5%87%ba%e6%8e%a7%e5%88%b6-%e9%80%89%e9%a1%b9" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>-c, &amp;ndash;count&lt;/strong> # 计算找到的符合行的次数&lt;/li>
&lt;li>&lt;strong>&amp;ndash;color=auto&lt;/strong> # 把查找到内容自动表上默认颜色，auto 可改成别的颜色英文&lt;/li>
&lt;li>&lt;strong>-l,&amp;ndash;files-with-matches&lt;/strong> # 在筛选时，只输出文件名。常用来在一堆文件中，筛选指定内容，只查看哪些文件有指定的内容。&lt;/li>
&lt;li>&lt;strong>-m, &amp;ndash;max-count=NUM&lt;/strong> # 在 NUM 个匹配行后停止读取文件。i.e.&lt;/li>
&lt;li>&lt;strong>-o, &amp;ndash;only-matching&lt;/strong> # 仅显示被匹配到的字符串，不显示整行&lt;/li>
&lt;li>&lt;strong>-s, &amp;ndash;no-messages&lt;/strong> # 不显示错误信息&lt;/li>
&lt;/ul>
&lt;h3 id="output-line-prefix-control控制输出行的前缀">Output Line Prefix Control(控制输出行的前缀)&lt;a class="td-heading-self-link" href="#output-line-prefix-control%e6%8e%a7%e5%88%b6%e8%be%93%e5%87%ba%e8%a1%8c%e7%9a%84%e5%89%8d%e7%bc%80" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>-n&lt;/strong> # 顺便输出行号&lt;/li>
&lt;/ul>
&lt;h3 id="context-line-control控制输出内容的上下行">Context Line Control(控制输出内容的上下行)&lt;a class="td-heading-self-link" href="#context-line-control%e6%8e%a7%e5%88%b6%e8%be%93%e5%87%ba%e5%86%85%e5%ae%b9%e7%9a%84%e4%b8%8a%e4%b8%8b%e8%a1%8c" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>-A NUM, &amp;ndash;after-context=NUM&lt;/strong> # 打印出查找到的行的下面 NUM 行&lt;/li>
&lt;li>&lt;strong>-B NUM, &amp;ndash;before-context=NUM&lt;/strong> # 打印出查找到的行的上面 NUM 行&lt;/li>
&lt;li>&lt;strong>-C NUM, &amp;ndash;context=NUM&lt;/strong> # -A 与 -B 选项的结合体，控制输出内容的 上面 和下面 NUM 行&lt;/li>
&lt;/ul>
&lt;h3 id="file-and-directory-selection文件和目录选择">File and Directory Selection(文件和目录选择)&lt;a class="td-heading-self-link" href="#file-and-directory-selection%e6%96%87%e4%bb%b6%e5%92%8c%e7%9b%ae%e5%bd%95%e9%80%89%e6%8b%a9" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>-a, &amp;ndash;text&lt;/strong> # 像对待文本一样处理二进制文件；这等效于&amp;ndash;binary-files = text 选项。&lt;/li>
&lt;li>&lt;strong>&amp;ndash;exclude FILE&lt;/strong> # 跳过指定文件，不让 grep 处理跳过的文件。可以使用通配符。&lt;/li>
&lt;li>&lt;strong>&amp;ndash;exclude-dir=DIR&lt;/strong> # 跳过指定目录，不让 grep 处理跳过的目录。可以使用通配符。&lt;/li>
&lt;li>&lt;strong>-R, &amp;ndash;dereference-recursive&lt;/strong> # 递归地阅读每个目录下的所有文件并进行 grep 操作;该选项相当于-d recurse&lt;/li>
&lt;/ul>
&lt;h2 id="example">EXAMPLE&lt;a class="td-heading-self-link" href="#example" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>查看 accesslog 文件的实时更新，并筛选出不包含两个字符串的行
&lt;ul>
&lt;li>tailf accesslog | grep -vE &amp;lsquo;(miguvideo|mgtv)&amp;rsquo;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>grep &amp;ndash;color=auto -i R.*h ./boot.log | grep -Evi &amp;ldquo;star|net&amp;rdquo; # 不区分大小写搜索 boot.log 文件中包含 Rh 中间含有任意字符的，并且不包含 Star 或 net 的所有行，并以高亮颜色显示搜索的字符串，|表示或的关系，正则表达式扩展内容，选项必须有 E 才能生效。&lt;/li>
&lt;li>grep -i &amp;lsquo;/bin/bash&amp;rsquo; /etc/passwd | sort -n -t: -k3 | tail -1|cut -d: -f1 # 取出默认 shell 为 bash 且其 ID 号最大的用户&lt;/li>
&lt;li>grep &amp;ldquo;^#[[:space:]]{1,}[^[:space:]]{1,}&amp;rdquo; /etc/X # 取出/etc/x 文件中井号开头后最少一个空白字符后最少一个非空白字符的行&lt;/li>
&lt;li>ifconfig | egrep &amp;ndash;color=auto -n &amp;lsquo;[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}&amp;rsquo;&lt;/li>
&lt;li>egrep &amp;ndash;color=auto -n &amp;lsquo;[0-9]+.[0-9]+.[0-9]+.[0-9]+&amp;rsquo; # 匹配 ifconfig 中的所有 IP 地址，带匹配高亮，带行号（egrep 就是 grep -E）&lt;/li>
&lt;li>egrep &amp;ndash;color=auto -n &amp;lsquo;&amp;lt;[0-9]{2}&amp;gt;.[0-9]+.[0-9]+.[0-9]+&amp;rsquo; # 可以搜索第一段是两位数的 IP，比如 10.0.0.0 网段&lt;/li>
&lt;li>grep -i &amp;ndash;color=auto &amp;lsquo;[0-9]+.[0-9]+.[0-9]+.[0-9]+&amp;rsquo; ./interfaces # 不适用 egrep 的方法&lt;/li>
&lt;/ul>
&lt;h1 id="应用示例">应用示例&lt;a class="td-heading-self-link" href="#%e5%ba%94%e7%94%a8%e7%a4%ba%e4%be%8b" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="多个字符串逐一匹配多个文件匹配到的话输出字符串与所在文件">多个字符串逐一匹配多个文件，匹配到的话，输出字符串与所在文件&lt;a class="td-heading-self-link" href="#%e5%a4%9a%e4%b8%aa%e5%ad%97%e7%ac%a6%e4%b8%b2%e9%80%90%e4%b8%80%e5%8c%b9%e9%85%8d%e5%a4%9a%e4%b8%aa%e6%96%87%e4%bb%b6%e5%8c%b9%e9%85%8d%e5%88%b0%e7%9a%84%e8%af%9d%e8%be%93%e5%87%ba%e5%ad%97%e7%ac%a6%e4%b8%b2%e4%b8%8e%e6%89%80%e5%9c%a8%e6%96%87%e4%bb%b6" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">CMD_ID&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;10385455 10385631 10385269 10385176 10385362 10385734 10385920 10385083 10384897 10384764 10384618 10384153 10384339 10384246 10384525 10383781 10383967 10383595 10383315&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> id in &lt;span style="color:#000">$CMD_ID&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">matched_files&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>grep -l -r --exclude&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>test.sh --exclude-dir&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>scripts &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000">$id&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span> /PATH/TO/DIR/*&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> -n &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000">$matched_files&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;ID &lt;/span>&lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">id&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06"> matched in: &lt;/span>&lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">matched_files&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;ID &lt;/span>&lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">id&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06"> not found&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="筛选---之间的内容">筛选 &lt;code>{{ }}&lt;/code> 之间的内容&lt;a class="td-heading-self-link" href="#%e7%ad%9b%e9%80%89---%e4%b9%8b%e9%97%b4%e7%9a%84%e5%86%85%e5%ae%b9" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;pre tabindex="0">&lt;code>hi,hello {{A1}}
{{B0B}}test{{CC_CC}}
@{{D-DD}}
{{E#@EEE}}
&lt;/code>&lt;/pre>&lt;h3 id="筛选后文本">筛选后文本&lt;a class="td-heading-self-link" href="#%e7%ad%9b%e9%80%89%e5%90%8e%e6%96%87%e6%9c%ac" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;pre tabindex="0">&lt;code>cat content.txt | grep -oP &amp;#34;(?&amp;lt;={{)(\w|-|#|@)+(?=}})&amp;#34;
A1
B0B
CC_CC
D-DD
E#@EEE
&lt;/code>&lt;/pre>&lt;p>&lt;strong>cat content.txt | grep -oE &amp;ldquo;{{(\w|-|#|@)+}}&amp;rdquo;&lt;/strong>&lt;/p>
&lt;p>&lt;strong>cat content.txt | grep -oP &amp;ldquo;{{(\w|-|#|@)+}}&amp;rdquo;&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>{{A1}}
{{B0B}}
{{CC_CC}}
{{D-DD}}
{{E#@EEE}}
&lt;/code>&lt;/pre></description></item><item><title>Docs: jq</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/Linux-%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/jq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/Linux-%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/jq/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://stedolan.github.io/jq/">官方文档&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>jq 是轻量级且灵活的处理 JSON 数据的 shell 命令行工具&lt;/p>
&lt;p>&lt;a href="https://jqplay.org/">这里是官方提供的 jq 命令在线测试工具&lt;/a>，提供原始 JSON 内容，会自动根据 表达式 输出结果。&lt;/p>
&lt;h1 id="jq-用法详解">jq 用法详解&lt;a class="td-heading-self-link" href="#jq-%e7%94%a8%e6%b3%95%e8%af%a6%e8%a7%a3" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>官方文档：&lt;a href="https://stedolan.github.io/jq/manual/">https://stedolan.github.io/jq/manual/&lt;/a>&lt;/p>
&lt;p>jq 程序是一个&lt;code>过滤器&lt;/code>，接收一个输入，并产生一个输出。&lt;/p>
&lt;h1 id="基础过滤">基础过滤&lt;a class="td-heading-self-link" href="#%e5%9f%ba%e7%a1%80%e8%bf%87%e6%bb%a4" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>官方文档：&lt;a href="https://stedolan.github.io/jq/manual/#Basicfilters">https://stedolan.github.io/jq/manual/#Basicfilters&lt;/a>&lt;/p>
&lt;p>下面的 jq 用法，都是用下面这个 json 文件作为演示&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;favorite&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:{&lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;drink&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;water&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;food&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;sushi&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;game&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;WOW &amp;amp; PAL&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">},&lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;sushiKinds&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;sashimi&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,{&lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;name&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;hot&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">},{&lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;name&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;handRoll&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;rice&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;more&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">},{&lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;name&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#204a87;font-weight:bold">null&lt;/span>&lt;span style="color:#000;font-weight:bold">}],&lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;arrayBrowser&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:[{&lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;name&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;360&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;url&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;http://www.so.com&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">},{&lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;name&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;bing&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;url&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;http://www.bing.com&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">}]}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>格式化后的内容如下，格式化内容仅作参考对照，因为 jq 命令本身就可以实现格式化的 json 的作用。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;favorite&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;drink&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;water&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;food&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;sushi&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;game&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;WOW &amp;amp; PAL&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;sushiKinds&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;sashimi&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;name&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;hot&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;name&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;handRoll&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;rice&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;more&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;name&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">null&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;arrayBrowser&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;name&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;360&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;url&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;http://www.so.com&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;name&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;bing&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;url&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;http://www.bing.com&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="-符号">&lt;code>.&lt;/code> 符号&lt;a class="td-heading-self-link" href="#-%e7%ac%a6%e5%8f%b7" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>点&lt;code>.&lt;/code>符号与 go 模板中的点作用一样，表示&lt;strong>当前作用域&lt;/strong>的&lt;strong>对象&lt;/strong>。对于 jq 来说，所有给 jq 输入的内容，都是当前作用域的对象。比如&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">~]#&lt;/span> &lt;span style="color:#a40000">cat&lt;/span> &lt;span style="color:#a40000">demo.json&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;favorite&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:{&lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;drink&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;water&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;food&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;sushi&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;game&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;WOW &amp;amp; PAL&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">},&lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;sushiKinds&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;sashimi&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,{&lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;name&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;hot&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">},{&lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;name&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;handRoll&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;rice&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;more&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">},{&lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;name&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#204a87;font-weight:bold">null&lt;/span>&lt;span style="color:#000;font-weight:bold">}],&lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;arrayBrowser&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:[{&lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;name&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;360&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;url&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;http://www.so.com&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">},{&lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;name&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;bing&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;url&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;http://www.bing.com&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">}]}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">~]#&lt;/span> &lt;span style="color:#a40000">cat&lt;/span> &lt;span style="color:#a40000">demo.json&lt;/span> &lt;span style="color:#a40000">|&lt;/span> &lt;span style="color:#a40000">jq&lt;/span> &lt;span style="color:#a40000">.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;favorite&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;drink&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;water&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;food&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;sushi&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;game&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;WOW &amp;amp; PAL&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;sushiKinds&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;sashimi&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;name&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;hot&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;name&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;handRoll&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;rice&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;more&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;name&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">null&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;arrayBrowser&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;name&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;360&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;url&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;http://www.so.com&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;name&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;bing&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;url&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;http://www.bing.com&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="获取-map-的值">获取 map 的值&lt;a class="td-heading-self-link" href="#%e8%8e%b7%e5%8f%96-map-%e7%9a%84%e5%80%bc" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>给定 map 的名称，获取其值。&lt;code>.foo.bar&lt;/code>与&lt;code>.foo|.bar&lt;/code>作用相同。如果 map 名称中包含特殊字符或以数字开头，则需要适用双引号将其括起来，例如&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># cat demo.json | jq &amp;#39;.favorite.food&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&amp;#34;sushi&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="获取-array-的值">获取 array 的值&lt;a class="td-heading-self-link" href="#%e8%8e%b7%e5%8f%96-array-%e7%9a%84%e5%80%bc" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">~]#&lt;/span> &lt;span style="color:#a40000">cat&lt;/span> &lt;span style="color:#a40000">demo.json&lt;/span> &lt;span style="color:#a40000">|&lt;/span> &lt;span style="color:#a40000">jq&lt;/span> &lt;span style="color:#a40000">.arrayBrowser&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;name&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;360&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;url&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;http://www.so.com&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;name&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;bing&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;url&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;http://www.bing.com&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">~]#&lt;/span> &lt;span style="color:#a40000">cat&lt;/span> &lt;span style="color:#a40000">demo.json&lt;/span> &lt;span style="color:#a40000">|&lt;/span> &lt;span style="color:#a40000">jq&lt;/span> &lt;span style="color:#a40000">.arrayBrowser&lt;/span>&lt;span style="color:#000;font-weight:bold">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;name&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;360&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;url&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;http://www.so.com&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;name&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;bing&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;url&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;http://www.bing.com&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">~]#&lt;/span> &lt;span style="color:#a40000">cat&lt;/span> &lt;span style="color:#a40000">demo.json&lt;/span> &lt;span style="color:#a40000">|&lt;/span> &lt;span style="color:#a40000">jq&lt;/span> &lt;span style="color:#a40000">.arrayBrowser&lt;/span>&lt;span style="color:#000;font-weight:bold">[]&lt;/span>&lt;span style="color:#a40000">.name&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&amp;#34;360&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&amp;#34;bing&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">~]#&lt;/span> &lt;span style="color:#a40000">cat&lt;/span> &lt;span style="color:#a40000">demo.json&lt;/span> &lt;span style="color:#a40000">|&lt;/span> &lt;span style="color:#a40000">jq&lt;/span> &lt;span style="color:#a40000">.arrayBrowser&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;name&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;bing&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;url&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;http://www.bing.com&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="最佳实践">最佳实践&lt;a class="td-heading-self-link" href="#%e6%9c%80%e4%bd%b3%e5%ae%9e%e8%b7%b5" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="修改文件内容">修改文件内容&lt;a class="td-heading-self-link" href="#%e4%bf%ae%e6%94%b9%e6%96%87%e4%bb%b6%e5%86%85%e5%ae%b9" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;pre tabindex="0">&lt;code>$ jq &amp;#39;.foo.bar&amp;#39; file.json
&lt;/code>&lt;/pre>&lt;p>这会定位JSON文件中名为“foo”的对象的“bar”字段。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ jq &amp;#39;.foo.bar = &amp;#34;new value&amp;#34;&amp;#39; file.json
&lt;/code>&lt;/pre>&lt;p>这会将名为“foo”的对象中的“bar”字段的值替换为“new value”。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ jq &amp;#39;.foo.bar = &amp;#34;new value&amp;#34;&amp;#39; &amp;gt; /tmp/jq_result.json &amp;amp;&amp;amp; /usr/bin/cp /tmp/js_result.json file.json
&lt;/code>&lt;/pre>&lt;p>这将在原始JSON文件中直接替换“foo”对象的“bar”字段的值为“new value”。&lt;/p></description></item><item><title>Docs: awk</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/Linux-%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/awk/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/Linux-%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/awk/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.gnu.org/software/gawk/">官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.gnu.org/software/gawk/manual/gawkinet/">官方文档&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>awk 以字段为单位进行处理&lt;/p>
&lt;p>其实就是把一行的数据分割,然后对每个字段进行处理,包含 cut 等命令)，支持变量，条件判断，循环，数组等编程基本语言&lt;/p>
&lt;h1 id="syntax语法">Syntax(语法)&lt;a class="td-heading-self-link" href="#syntax%e8%af%ad%e6%b3%95" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;strong>awk [OPTIONS] &amp;lsquo;COMMAND&amp;rsquo; FILE&lt;/strong>&lt;/p>
&lt;p>&lt;strong>awk [OPTIONS] &amp;lsquo;PATTERN1{ACTION1} PATTERN2{ACTION2}&amp;hellip;.&amp;rsquo; FILE&lt;/strong>&lt;/p>
&lt;p>&lt;strong>OPTIONS&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-f FILE&lt;/strong> # 指定要使用的 awk 代码文件。&lt;/li>
&lt;li>&lt;strong>-F [“[分隔符]”]&lt;/strong> # 指定分隔符，默认分隔符为一个或多个的“空格键”或者“tab 键”，也可以具体指定一个或多个
&lt;ul>
&lt;li>e.g.当使用-F “ [/:]”的时候即是空格、/、:这三个符号出现任意一个都算作一个分隔符&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="awk-语言">AWK 语言&lt;a class="td-heading-self-link" href="#awk-%e8%af%ad%e8%a8%80" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>awk 其实本质上可以看作编程语言，只不过这个语言只是用来处理文本的而已。在使用命令时，可以使用 &lt;code>-f&lt;/code> 选项指定要使用的代码文件。&lt;/p>
&lt;h2 id="awk-语言的基本结构">awk 语言的基本结构&lt;a class="td-heading-self-link" href="#awk-%e8%af%ad%e8%a8%80%e7%9a%84%e5%9f%ba%e6%9c%ac%e7%bb%93%e6%9e%84" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>awk 代码由 &lt;code>PATTERN {ACTION}&lt;/code> 组成，PATTERN 是可省略的。&lt;/p>
&lt;ul>
&lt;li>PATTERN 用来进行匹配的模式，匹配到的内容将会执行 ACTION 中定义的操作
&lt;ul>
&lt;li>/搜索模式/&lt;/li>
&lt;li>判断模式&lt;/li>
&lt;li>BEGIN 执行 ACTION 前的准备工作，比如给 awk 中的自带变量赋值,在 print 前在屏幕输出点内容&lt;/li>
&lt;li>END 执行 ACTION 后的收尾工作&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ACTION 用来执行具体的动作
&lt;ul>
&lt;li>print $NUM &amp;ldquo;输出内容&amp;rdquo; $NUM&amp;hellip;&amp;hellip; # 在屏幕输出哪几个字段以及哪些内容，内容可以是各种分隔符&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>一个最简单的 awk 代码如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>print &lt;span style="color:#000">$0&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里省略的匹配模式，也就是说匹配所有内容。直接使用一个 ACTION，输出文件中的所有内容了。&lt;/p>
&lt;h3 id="特殊的-begin-与-end-模式">特殊的 BEGIN 与 END 模式&lt;a class="td-heading-self-link" href="#%e7%89%b9%e6%ae%8a%e7%9a%84-begin-%e4%b8%8e-end-%e6%a8%a1%e5%bc%8f" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>BEGIN 与 END 与正常的模式不同，不用于匹配输入记录。通常用来为本次 awk 的运行提供启动和清理操作。&lt;/p>
&lt;blockquote>
&lt;p>BEGIN 模式通常用来进行变量复制。END 模式通常用来清理数据&lt;/p>
&lt;/blockquote>
&lt;h2 id="hello-world">Hello World&lt;a class="td-heading-self-link" href="#hello-world" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>假设现在有如下文件：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>Hello World Text
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>awk 代码如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>BEGIN &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">string&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Hello World&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;%s%s&amp;#34;&lt;/span>,string,RS&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;%s%s&amp;#34;&lt;/span>,&lt;span style="color:#000">$0&lt;/span>,RS&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>输出结果：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 可以直接执行 BEGIN 模式中的动作&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># awk -f helloworld.awk&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Hello World
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>^C
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 需要指定待处理文件，才可以执行匹配模式中的动作&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># awk -f helloworld.awk text&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Hello World
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Hello World Text
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="awk-中的变量">awk 中的变量&lt;a class="td-heading-self-link" href="#awk-%e4%b8%ad%e7%9a%84%e5%8f%98%e9%87%8f" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>引用 awd 中的内置变量时不用 &lt;code>$&lt;/code> 符号&lt;/p>
&lt;ul>
&lt;li>&lt;strong>$0&lt;/strong> # 全部输入&lt;/li>
&lt;li>&lt;strong>ARGC&lt;/strong> #&lt;/li>
&lt;li>&lt;strong>FS&lt;/strong> # 字段分隔字符，&lt;code>默认值：空格&lt;/code>&lt;/li>
&lt;li>&lt;strong>NF&lt;/strong> # 每一行拥有的字段总数(当每行字段数不一样，可以 print NF 来打印每行的最后一个字段)&lt;/li>
&lt;li>&lt;strong>NR&lt;/strong> # 目前 awk 所处理的是第几行的数据&lt;/li>
&lt;li>&lt;strong>OFS&lt;/strong> # 当前输出内容 print 的时候使用的分隔符，默认为空白，print 中以逗号分隔每个字段&lt;/li>
&lt;li>&lt;strong>RS&lt;/strong> # 分隔符。&lt;code>默认值：\n&lt;/code>，即换行符&lt;/li>
&lt;/ul>
&lt;h1 id="应用示例">应用示例&lt;a class="td-heading-self-link" href="#%e5%ba%94%e7%94%a8%e7%a4%ba%e4%be%8b" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>去除相同的行&lt;/p>
&lt;ul>
&lt;li>&lt;code>awk '!seen[$0]++' test.log&lt;/code>
&lt;ul>
&lt;li>&lt;code>!seen[$0]++&lt;/code> 的含义是，如果某一行第一次出现， &lt;code>seen[$0]&lt;/code> 的值为 0，使用 ! 取反的话，值为 1，i.e. 结果为真，所以 awk 会输出该行。然后 &lt;code>seen[$0]&lt;/code> 会自增 1，对于后续该行的重复，&lt;code>!seen[$0]&lt;/code> 为假，因此 awk 不会再次输出该行。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>输出文本最后一行&lt;/p>
&lt;ul>
&lt;li>awk &amp;lsquo;END {print}&amp;rsquo;&lt;/li>
&lt;/ul>
&lt;p>从 FILE 文件中，删除每行第一列，输出剩余的&lt;/p>
&lt;ul>
&lt;li>awk &amp;lsquo;{ $1=&amp;quot;&amp;quot;; print $0 }&amp;rsquo; FILE&lt;/li>
&lt;/ul>
&lt;p>查找 hcs 的 access 实时日志的带 HIT 字符的行，取出第五段内容然后排序总结，该日志可以实时查看用户的命中情况以及访问的资源&lt;/p>
&lt;ul>
&lt;li>&lt;code>cat accesslog | grep 'HIT' | awk '{print $5}' | sort | uniq -c&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>在/etc/passwd 文件中，每行以:为分隔符，打印 username:这几个字符，后面跟以:分割的第一个字段内容，后面跟换行(\n)然后 uid:这几个字符，再跟第三个字段内容,效果如右图所示&lt;/p>
&lt;ul>
&lt;li>&lt;code>awk -F&amp;quot;:&amp;quot; '{ print &amp;quot;username:&amp;quot; $1 &amp;quot;\nuid:&amp;quot; $3 }' /etc/passwd&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>搜索模式以冒号为分隔符,找到第七个字段以 bash 结尾的所有行,输出每行的第一个和第三个字段(注意：这里面的~在 shell 环境中是用=~表示的)&lt;/p>
&lt;ul>
&lt;li>&lt;code>cat /etc/passwd | awk -F : '$7~/bash$/{print $1,$3}'&lt;/code>
&lt;ul>
&lt;li>还可以写成判断模式，判断第七字段的字符是否等于/bin/bash，&lt;/li>
&lt;li>&lt;code>cat /etc/passwd | awk -F : '$7==&amp;quot;/bin/bash&amp;quot;/{print $1,$3}'&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>以冒号为分隔符的第三个字段数小于 10 的那些行，输出其中的第一和第三个字段&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>cat /etc/passwd | awk -F : '$3&amp;lt;10{print $1,$3}'&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>cat /etc/passwd | awk 'BEGIN{FS=&amp;quot;:&amp;quot;}{print &amp;quot;UserName\n-----------&amp;quot;}$3&amp;lt;10{print $1,$3}'&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>以=号为分隔符，不包含开头带#或者空白行的所有行，显示这些行的第一个字段,判断模式与搜索模式并用&lt;/p>
&lt;ul>
&lt;li>&lt;code>awk -F = '!/^#|^$/{print $1}' /etc/sysctl.conf&lt;/code>
&lt;ul>
&lt;li>&lt;code>awk -F = '/^[^#]/{print $1}' /etc/sysctl.conf&lt;/code> # 不含 # 的行&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>查看当前的普通用户个数&lt;/p>
&lt;ul>
&lt;li>&lt;code>cat /etc/passwd | awk -F : '$3&amp;gt;1000 &amp;amp;&amp;amp; $7==&amp;quot;/bin/bash&amp;quot;{print $1,$3}'&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>其他&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/aokdnm/1616166312890-e4478d40-8a1b-4f08-a348-81ee7c69c9e0.jpeg" alt="">&lt;/p>
&lt;h2 id="procsoftirqs-文件处理示例">/proc/softirqs 文件处理示例&lt;a class="td-heading-self-link" href="#procsoftirqs-%e6%96%87%e4%bb%b6%e5%a4%84%e7%90%86%e7%a4%ba%e4%be%8b" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>由于 /proc/softirqs 文件中第一行与其他行，前面少了一些内容，所有第一行系列要多空出来一些字符&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>BEGIN&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">cpucount&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">6&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 处理第一行&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">NR&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> 1&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">num&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> 5&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic"># 由于第一行少了一列，所以让第一列与第二行的第二列对其&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;%30s&amp;#34;&lt;/span>,&lt;span style="color:#000">$1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic"># 从第二列开始循环，每隔15个字符便输出一列&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">i&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>2&lt;span style="color:#000;font-weight:bold">;&lt;/span>i&amp;lt;&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>cpucount&lt;span style="color:#000;font-weight:bold">;&lt;/span>i++&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;%15s\t&amp;#34;&lt;/span>,&lt;span style="color:#000">$i&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>RS&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 处理第二行及以后的行&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NR &amp;gt; 1&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic"># 通过循环，每隔15个字符便输出一列。输出完成后换行。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">i&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>1&lt;span style="color:#000;font-weight:bold">;&lt;/span>i&amp;lt;&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>cpucount+1&lt;span style="color:#000;font-weight:bold">;&lt;/span>i++&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;%15s\t&amp;#34;&lt;/span>,&lt;span style="color:#000">$i&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>RS&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="聚合一个文件中指定字段的数字求和">聚合一个文件中指定字段的数字，求和&lt;a class="td-heading-self-link" href="#%e8%81%9a%e5%90%88%e4%b8%80%e4%b8%aa%e6%96%87%e4%bb%b6%e4%b8%ad%e6%8c%87%e5%ae%9a%e5%ad%97%e6%ae%b5%e7%9a%84%e6%95%b0%e5%ad%97%e6%b1%82%e5%92%8c" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>文件中的内容如下&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>root@dengrui test_dir&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># cat strace.file&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#0000cf;font-weight:bold">31090&lt;/span> pread64&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>227, &lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&lt;/span>..., 16384, 81920&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">16384&lt;/span> &amp;lt;0.000991&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#0000cf;font-weight:bold">31090&lt;/span> pread64&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>227, &lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&lt;/span>..., 16384, 65536&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">16384&lt;/span> &amp;lt;0.001292&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#0000cf;font-weight:bold">31090&lt;/span> pread64&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>227, &lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&lt;/span>..., 16384, 98304&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">16384&lt;/span> &amp;lt;0.000176&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#0000cf;font-weight:bold">31090&lt;/span> pread64&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>129, &lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&lt;/span>..., 16384, 131072&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">16384&lt;/span> &amp;lt;0.002121&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#0000cf;font-weight:bold">31090&lt;/span> pread64&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>129, &lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&lt;/span>..., 16384, 16384&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">16384&lt;/span> &amp;lt;0.000932&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#0000cf;font-weight:bold">31090&lt;/span> pread64&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>128, &lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&lt;/span>..., 16384, 49152&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">16384&lt;/span> &amp;lt;0.001072&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#0000cf;font-weight:bold">31090&lt;/span> pread64&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>128, &lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&lt;/span>..., 16384, 16384&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">16384&lt;/span> &amp;lt;0.000820&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>通过 awk 命令，聚合系统调用中的第三个参数&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>awk -F, &lt;span style="color:#4e9a06">&amp;#39;{print $3}&amp;#39;&lt;/span> test.file &lt;span style="color:#000;font-weight:bold">|&lt;/span> awk &lt;span style="color:#4e9a06">&amp;#39;{sum += $1} END {print sum}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: printf 与 echo 文本输出命令</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/Linux-%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/printf-%E4%B8%8E-echo-%E6%96%87%E6%9C%AC%E8%BE%93%E5%87%BA%E5%91%BD%E4%BB%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/Linux-%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/printf-%E4%B8%8E-echo-%E6%96%87%E6%9C%AC%E8%BE%93%E5%87%BA%E5%91%BD%E4%BB%A4/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>printf, fprintf, sprintf, snprintf, vprintf, vfprintf, vsprintf, vsnprintf - 格式化输出转换&lt;/p>
&lt;h1 id="printf-命令格式化并且打印数据-format-and-print-data">printf 命令：格式化并且打印数据 format and print data&lt;a class="td-heading-self-link" href="#printf-%e5%91%bd%e4%bb%a4%e6%a0%bc%e5%bc%8f%e5%8c%96%e5%b9%b6%e4%b8%94%e6%89%93%e5%8d%b0%e6%95%b0%e6%8d%ae-format-and-print-data" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>主要用于对 ARGUMENTs 进行格式化输出，ARGUMENTs 可以是字符串、数值等等，甚至可以通过变量引用；FORMAT 主要是对 ARGUMENTs 里的各种数据进行格式化输出，e.g.每个 ARGUMENT 是什么类型的(字符、整数、2 进制、16 进制等等)，各个 ARGUMENT 中间使用什么分隔符、是否换行等等。&lt;/p>
&lt;h2 id="语法格式printf-format-argument">语法格式：printf FORMAT [ARGUMENT&amp;hellip;]&lt;a class="td-heading-self-link" href="#%e8%af%ad%e6%b3%95%e6%a0%bc%e5%bc%8fprintf-format-argument" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>主要用于按照 FORMAT 定义的格式来输出 ARGUMENT&amp;hellip;给出的内容&lt;/p>
&lt;h3 id="format-包括格式替代符自定义内容格式控制符这-3-个在使用的时候没有先后顺序">FORMAT 包括：格式替代符，自定义内容，格式控制符，这 3 个在使用的时候没有先后顺序&lt;a class="td-heading-self-link" href="#format-%e5%8c%85%e6%8b%ac%e6%a0%bc%e5%bc%8f%e6%9b%bf%e4%bb%a3%e7%ac%a6%e8%87%aa%e5%ae%9a%e4%b9%89%e5%86%85%e5%ae%b9%e6%a0%bc%e5%bc%8f%e6%8e%a7%e5%88%b6%e7%ac%a6%e8%bf%99-3-%e4%b8%aa%e5%9c%a8%e4%bd%bf%e7%94%a8%e7%9a%84%e6%97%b6%e5%80%99%e6%b2%a1%e6%9c%89%e5%85%88%e5%90%8e%e9%a1%ba%e5%ba%8f" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>格式替代符 # 用于控制输出的每个 Argument 的类型。一个“格式替代符”对应后面一个 Argument，如果想要输出的类型与 Argument 给定的类型不符，则进行类型转换后输出 e.g.Argument 给了一个整数 100，而格式替代符使用的是%X,则会输出 64；若 Argument 不够 FORMAT 的个数，则以空白补充。一般情况格式替代符使用双引号引起来&lt;/p>
&lt;ul>
&lt;li>%b # 相对应的参数被视为含有要被处理的转义序列之字符串。&lt;/li>
&lt;li>%c # ASCII 字符。显示相对应参数的第一个字符&lt;/li>
&lt;li>%d, %i # 十进制整数&lt;/li>
&lt;li>%e, %E, %f # 浮点格式&lt;/li>
&lt;li>%g #%e 或%f 转换，看哪一个较短，则删除结尾的零&lt;/li>
&lt;li>%G #%E 或%f 转换，看哪一个较短，则删除结尾的零&lt;/li>
&lt;li>%o # 不带正负号的八进制值&lt;/li>
&lt;li>%s # 字符串&lt;/li>
&lt;li>%u # 不带正负号的十进制值&lt;/li>
&lt;li>%x # 不带正负号的十六进制值，使用 a 至 f 表示 10 至 15&lt;/li>
&lt;li>%X # 不带正负号的十六进制值，使用 A 至 F 表示 10 至 15&lt;/li>
&lt;li>&lt;code>%%&lt;/code> # 字面意义的%&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/nfqmgm/1616166371965-2e43b313-e44b-4fbe-a44b-254e0e0b37fb.jpeg" alt="">&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/nfqmgm/1616166371962-7d50c11b-356a-4098-acab-15272005b08a.jpeg" alt="">&lt;/p>
&lt;p>自定义内容 # 在输出内容的格式中，可以自己添加任务字符串&lt;/p>
&lt;p>格式控制符 # 用于控制输出内容整体的格式。i.e.每个参数有之间有多少空白符，在哪里换行等等&lt;/p>
&lt;ul>
&lt;li>\a # 警告字符，通常为 ASCII 的 BEL 字符&lt;/li>
&lt;li>\b # 后退&lt;/li>
&lt;li>\c # 抑制（不显示）输出结果中任何结尾的换行字符（只在%b 格式指示符控制下的参数字符串中有效），而且，任何留在参数里的字符、任何接下来的参数以及何留在格式字符串中的字符，都被忽略&lt;/li>
&lt;li>\f # 换页（formfeed)&lt;/li>
&lt;li>\n # 换行&lt;/li>
&lt;li>\r # 回车（Carriage return）&lt;/li>
&lt;li>\t # 水平制表符 i.e.tab&lt;/li>
&lt;li>\v # 垂直制表符&lt;/li>
&lt;li>. \ # 一个字面上的反斜杠字符&lt;/li>
&lt;li>\ddd # 表示 1 到 3 位数八进制值的字符。仅在格式字符串中有效&lt;/li>
&lt;li>\0ddd # 表示 1 到 3 位的八进制值字符&lt;/li>
&lt;/ul>
&lt;h3 id="arguments-包括各种想要输出的具体内容可以是字符串整数等甚至可以引用变量">ARGUMENTs 包括各种想要输出的具体内容，可以是字符串、整数等、甚至可以引用变量&lt;a class="td-heading-self-link" href="#arguments-%e5%8c%85%e6%8b%ac%e5%90%84%e7%a7%8d%e6%83%b3%e8%a6%81%e8%be%93%e5%87%ba%e7%9a%84%e5%85%b7%e4%bd%93%e5%86%85%e5%ae%b9%e5%8f%af%e4%bb%a5%e6%98%af%e5%ad%97%e7%ac%a6%e4%b8%b2%e6%95%b4%e6%95%b0%e7%ad%89%e7%94%9a%e8%87%b3%e5%8f%af%e4%bb%a5%e5%bc%95%e7%94%a8%e5%8f%98%e9%87%8f" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>每个 Argument 使用空格进行分割，一个 Argument 中的内容传递给 FORMAT 中的“格式替代符”&lt;/p>
&lt;p>EXAMPLE&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># printf &amp;#34;%-10s %-8s %-4s\n&amp;#34; 姓名 性别 体重kg; printf &amp;#34;%-10s %-8s %-4.2f\n&amp;#34; 郭靖 男 66.1234;printf &amp;#34;%-10s %-8s %-4.2f\n&amp;#34; 杨过 男 48.6543;printf &amp;#34;%-10s %-8s %-4.2f\n&amp;#34; 郭芙 女 47.9876&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>姓名 性别 体重kg
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>郭靖 男 66.12
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>杨过 男 48.65
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>郭芙 女 47.99
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>%s %c %d %f 都是格式替代符&lt;/p>
&lt;p>%-10s 指一个宽度为 10 个字符（-表示左对齐，没有则表示右对齐），任何字符都会被显示在 10 个字符宽的字符内，如果不足则自动以空格填充，超过也会将内容全部显示出来。&lt;/p>
&lt;p>%-4.2f 指格式化为小数，其中.2 指保留 2 位小数。&lt;/p>
&lt;p>\n 表示“换行符”，i.e.输出完这一段就换行，否则每个 printf 输出的内容都在一行了&lt;/p>
&lt;p>hi 是自定义内容，可以随便写&lt;/p>
&lt;h1 id="echo--显示文本">Echo # 显示文本&lt;a class="td-heading-self-link" href="#echo--%e6%98%be%e7%a4%ba%e6%96%87%e6%9c%ac" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>Bash 脚本是非常流行的最简单的脚本语言。 与任何编程或脚本语言一样，您会在终端上遇到打印文本。 这可能发生在许多场景中，例如当您想要输出文件的内容或检查变量的值时。 程序员还可以通过在控制台上打印变量值来调试应用程序。 因此，在我们深入研究另一个教程的 bash 脚本之前，让我们看一下在终端中输出文本的不同方式。&lt;/p>
&lt;p>为了在终端上输出文本，Echo 是您需要知道的最重要的命令。 正如名称本身所示，echo 在终端的标准输出上显示数字或字符串。 它还有许多选项，如下表所示。&lt;/p>
&lt;p>根据 Linux 文档，以下是 echo 命令的语法。&lt;/p>
&lt;p>echo [OPTIONS] [ARG&amp;hellip;.]&lt;/p>
&lt;p>OPTIONS&lt;/p>
&lt;ul>
&lt;li>-n # 不打印后面的换行符&lt;/li>
&lt;li>-E # 禁用反斜杠转义字符的解释，默认自带选项。&lt;/li>
&lt;li>-e # 启用反斜杠转义的解释
&lt;ul>
&lt;li>输出 args，以空格分隔，后跟换行符。返回状态始终为 0。 -E 选项禁用这些转义符的解释，即使在默认情况下已解释它们的系统上也是如此。 xpg_echo shell 选项可用于动态确定 echo 默认情况下是否扩展这些转义字符。回声并不意味着选项的结束。 echo 解释以下转义序列&lt;/li>
&lt;li>如果给出-e 选项，则启用对以下反斜杠转义字符的解释：&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>\a 显示警告字符&lt;/li>
&lt;li>\b 退格符。&lt;/li>
&lt;li>\c 在输出中禁止另外跟在最终参数后面的换行字符。所有跟在 \c 序列后的字符都被忽略。&lt;/li>
&lt;li>\e Escape&lt;/li>
&lt;li>\E&lt;/li>
&lt;li>\f 换页&lt;/li>
&lt;li>\n 新行&lt;/li>
&lt;li>\r 回车&lt;/li>
&lt;li>\t 水平选项卡&lt;/li>
&lt;li>\v 垂直制表符&lt;/li>
&lt;li>\ backslash&lt;/li>
&lt;/ul>
&lt;p>发送文本到标准输出&lt;/p>
&lt;p>要输出终端上的任何字符串、数字或文本，请键入以下命令并按 enter。&lt;/p>
&lt;p>echo &amp;ldquo;Hello World Linux 公社www.linuxidc.com&amp;rdquo;&lt;/p>
&lt;p>以下输出将显示在终端上&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/nfqmgm/1616166371980-9a7c412a-4bdc-4673-a511-ed9283a06d8b.jpeg" alt="">&lt;/p>
&lt;p>打印一个变量&lt;/p>
&lt;p>让我们声明一个变量并在终端上打印它的值。假设 x 是我们在 160 处初始化的一个变量。&lt;/p>
&lt;p>x=160&lt;/p>
&lt;p>现在，我们将在终端上输出变量的值。&lt;/p>
&lt;p>echo $x&lt;/p>
&lt;p>终端将打印 160。同样，您也可以将字符串存储在变量中并将其输出到终端。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/nfqmgm/1616166371967-852dae9b-770e-40c9-b132-2ca2788f3e60.jpeg" alt="">&lt;/p>
&lt;p>试一试，让我们知道这对你来说是否容易。&lt;/p>
&lt;p>删除单词之间的空格&lt;/p>
&lt;p>这是我最喜欢的 echo 选项之一，因为它消除了句子中不同单词之间的所有空格，并将它们混在一起。在这个特性中，我们将使用表 1 中提到的两个选项。&lt;/p>
&lt;p>echo -e &amp;ldquo;欢迎来到 \bLinux \b 公社 \bwww \b.linuxidc \b.com&amp;rdquo;&lt;/p>
&lt;p>显示：欢迎来到 Linux 公社www.linuxidc.com&lt;/p>
&lt;p>从上面的示例中可以看到，我们正在启用反斜杠转义的解释以及添加退格。输出如下所示。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/nfqmgm/1616166372007-65bfcc66-1d0b-4927-b69e-7f065e1cb924.jpeg" alt="">&lt;/p>
&lt;p>以新行输出单词&lt;/p>
&lt;p>在使用 bash 脚本时，echo 的这个选项非常方便。大多数情况下，你需要在完成后移动到下一行。因此，这是最好的选择。&lt;/p>
&lt;p>echo -e &amp;ldquo;欢迎来到 \nLinux \n 公社 \nwww \n.linuxidc \n.com&amp;rdquo;&lt;/p>
&lt;p>输出将在单独的一行中显示每个单词，如下面的屏幕截图所示。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/nfqmgm/1616166371988-02f5d8d5-7ae2-4475-8cdd-659b85c73f30.jpeg" alt="">&lt;/p>
&lt;p>输出带声音的文本&lt;/p>
&lt;p>这是一个使用 bell 或 alert 输出文本的简单选项。为此，键入以下命令。&lt;/p>
&lt;p>echo -e &amp;ldquo;hello \a 欢迎来到 Linux 公社www.linuxidc.com&amp;rdquo;&lt;/p>
&lt;p>确保系统的音量足够大，以便在终端输出文本时能够听到微小的铃声。&lt;/p>
&lt;p>删除后面新行&lt;/p>
&lt;p>echo 的另一个选项是删除后面的换行符，以便在同一行输出所有内容。为此，我们使用“\c”选项，如下图所示。&lt;/p>
&lt;p>echo -e &amp;ldquo;欢迎来到 Linux 公社www.linuxidc.com \c 你是谁你是谁&amp;rdquo;&lt;/p>
&lt;p>显示以下输出&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/nfqmgm/1616166371985-a27b4bd3-aca2-4074-992f-721954070d00.jpeg" alt="">&lt;/p>
&lt;p>将回车符添加到输出中&lt;/p>
&lt;p>要在输出中添加特定的回车符，我们有“\r”选项。&lt;/p>
&lt;p>echo -e &amp;ldquo;Linux 公社www.linuxidc.com \r 欢迎您的来到&amp;rdquo;&lt;/p>
&lt;p>在终端上显示以下输出。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/nfqmgm/1616166372027-a7366654-9e20-413e-bfae-f13e15fc6616.jpeg" alt="">&lt;/p>
&lt;p>在输出中使用选项卡&lt;/p>
&lt;p>在终端上打印输出时，您也可以添加水平和垂直标签。 这些产品可以用于更清洁的产品。 要添加水平制表符，您必须添加“\t”，对于垂直制表符，请添加“\v”。 我们将为这些中的每一个做一个样本，然后组合一个。&lt;/p>
&lt;p>echo -e &amp;ldquo;&lt;a href="https://www.linuxidc.com">www.linuxidc.com&lt;/a> \t 欢迎来到 Linux 公社&amp;rdquo;&lt;/p>
&lt;p>这个命令的输出如下所示&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/nfqmgm/1616166372029-9dcd1465-f711-418d-9414-46e2511d9b37.jpeg" alt="">&lt;/p>
&lt;p>echo -e &amp;ldquo;&lt;a href="https://www.linuxidc.com">www.linuxidc.com&lt;/a> \v 欢迎来到 Linux 公社&amp;rdquo;&lt;/p>
&lt;p>这个命令的输出如下所示&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/nfqmgm/1616166372005-1aca898b-377c-4bd4-82d2-70fd41a3985a.jpeg" alt="">&lt;/p>
&lt;p>这就是在终端上打印文本的所有选项。这是一个需要学习的重要特性，因为当您开始使用 bash 脚本时，它将进一步帮助您。确保你实现了每一个选项并努力练习。如果本教程帮助您解决了问题，请告诉我们。&lt;/p></description></item><item><title>Docs: sed</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/Linux-%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/sed/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/Linux-%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/sed/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>官方文档：&lt;a href="https://www.gnu.org/software/sed/">https://www.gnu.org/software/sed/&lt;/a>&lt;/li>
&lt;li>官方手册：&lt;a href="https://www.gnu.org/software/sed/manual/sed.html">https://www.gnu.org/software/sed/manual/sed.html&lt;/a>&lt;/li>
&lt;li>官方文档：&lt;a href="https://www.gnu.org/software/sed/manual/sed.html#Execution-Cycle">https://www.gnu.org/software/sed/manual/sed.html#Execution-Cycle&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://opus.konghy.cn/sed-refer/">https://opus.konghy.cn/sed-refer/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/liquanzhou/ops_doc/blob/master/shell%25E5%25AE%259E%25E4%25BE%258B%25E6%2589%258B%25E5%2586%258C.sh#L2925">https://github.com/liquanzhou/ops_doc/blob/master/shell%E5%AE%9E%E4%BE%8B%E6%89%8B%E5%86%8C.sh#L2925&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/tKvg69WvAFLJSfHsgRe1Yw">https://mp.weixin.qq.com/s/tKvg69WvAFLJSfHsgRe1Yw&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>sed 是一种新型的，非交互式的编辑器。它能执行与编辑器 vi 相同的编辑任务。&lt;/p>
&lt;p>sed 是一种 &lt;strong>stream editor(流编辑器)&lt;/strong>，逐行处理文件(或输入)，并将结果发送到标准输出。处理时，把当前处理的行存储在临时缓冲区中，称为 &lt;strong>pattern space( 模式空间)&lt;/strong>，接着用 sed 命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。然后读入下行，执行下一个循环。如果没有使诸如‘D’的特殊命令，那会在两个循环之间清空模式空间，但不会清空保留空间。这样不断重复，直到文件末尾。文件内容并没有改变，除非你使用重定向存储输出。&lt;/p>
&lt;p>功能：主要用来自动编辑一个或多个文件,简化对文件的反复操作,编写转换程序等。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/ec3zxx/1639446629207-32f3f321-c8c9-429d-880d-7098bc7ceed1.png" alt="image.png">&lt;/p>
&lt;h2 id="sed-工作原理">sed 工作原理&lt;a class="td-heading-self-link" href="#sed-%e5%b7%a5%e4%bd%9c%e5%8e%9f%e7%90%86" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>sed 实际上是一个循环结构，该循环用来对输入给 sed 文本的每一行执行下列操作：&lt;/p>
&lt;ol>
&lt;li>sed 从输入内容中读取一行，删除任何尾随的换行符，并将该行保存到 模式空间 中。&lt;/li>
&lt;li>对模式空间中的内容，执行 COMMAND。执行之前需要根据 ADDR(行定位)，验证模式空间中的行是否符合 ADDR 中给定的条件。
&lt;ol>
&lt;li>只有符合条件的，COMMAND 才会执行&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>上一步完成后，模式空间中的内容会打印到标准输出中。如果删除了末尾的换行符，则会添加回去。(如果使用了 -n 选项，则不会将模式空间中的行输出)&lt;/li>
&lt;li>然后回到循环体的开头，继续处理输入内容的下一行&lt;/li>
&lt;/ol>
&lt;p>除非有特殊命令（例如“d 使用&amp;rsquo;），则在两个循环之间删除模式空间。另一方面，保持空间可在周期之间保持其数据（请参见命令&amp;rsquo;H&amp;rsquo;，&amp;lsquo;H&amp;rsquo;，&amp;lsquo;X&amp;rsquo;，&amp;lsquo;G&amp;rsquo;，&amp;lsquo;G&amp;rsquo;在两个缓冲区之间移动数据）&lt;/p>
&lt;h1 id="syntax语法">Syntax(语法)&lt;a class="td-heading-self-link" href="#syntax%e8%af%ad%e6%b3%95" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;strong>sed [OPTIONS] SCRIPT FILE(s)&lt;/strong>&lt;/p>
&lt;h2 id="options">OPTIONS&lt;a class="td-heading-self-link" href="#options" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>-e, &amp;ndash;expression=&amp;lt;SCRIPT&amp;gt;&lt;/strong> # 以选项中的指定的 SCRIPT 来处理输入的文本文件，常用来在一行命令中，执行两个 sed SCRIPT&lt;/li>
&lt;li>&lt;strong>-f, &amp;ndash;file=&amp;lt;SCRIPT&amp;gt;&lt;/strong> # 以选项中指定的 SCRIPT 文件来处理输入的文本文件,把 sed 相关命令写进文件里，直接引用该文件中的命令进行操作&lt;/li>
&lt;li>&lt;strong>-i&lt;/strong> # 直接编辑原文件，sed 操作的内容不输出到屏幕，直接更改文件内容&lt;/li>
&lt;li>&lt;strong>-n, &amp;ndash;quiet, -silent&lt;/strong> # 禁止模式空间中的内容在标准输出中打印
&lt;ul>
&lt;li>通常与 p 命令一同使用，用来仅显示 sed 操作的行。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>-r, &amp;ndash;regexp-extended&lt;/strong> # 允许在 SCRIPT 中使用扩展的正则表达式。如果在 SCRIPT 中使用正则，且不使用该选项，运行就会报错&lt;/li>
&lt;/ul>
&lt;h2 id="script">SCRIPT&lt;a class="td-heading-self-link" href="#script" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>SCRIPT 是 sed 在处理文本时主要依赖的部分，脚本包含多个部分，至少要具有一个 COMMAND&lt;/p>
&lt;p>SCRIPT 语法：&lt;strong>[ADDR]COMMAND[OPTIONS]&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>**ADDR **# 行定位，&lt;strong>全称 Addresses&lt;/strong>。用于确定 sed 当前操作的文本需要处理哪些行。
&lt;ul>
&lt;li>如果指定了 ADDR ，则 COMMAND 仅对被定位的行执行操作。&lt;/li>
&lt;li>ADDR 可以是单个行号、通过 pattern(正则表达式) 来匹配指定的行、通过 X,Y 来匹配一个范围内的行&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>COMMAND&lt;/strong> # 用于执行通过 行定位 匹配到的行的操作。是添加内容、还是替换内容、还是删除内容等等&lt;/li>
&lt;li>&lt;strong>OPTIONS&lt;/strong> # 选项仅在 COMMAND 有可用的 OPTIONS 时才有用。比如 s 命令具有多个 OPTIONS&lt;/li>
&lt;/ul>
&lt;p>Note：行定位与 COMMAND 不分先后，不分左右，不同的 COMMAND，会出现在 SCRIPT 不同的位置&lt;/p>
&lt;h3 id="定界符">定界符&lt;a class="td-heading-self-link" href="#%e5%ae%9a%e7%95%8c%e7%ac%a6" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>一个复杂的 SCRIPT，需要定界符来区分语法格式中每一部分。在 sed 中可以用任意字符作为定界符。sed 会自动将第一个出现的非命令字符作为定界符。一般情况定界符使用 / 。示例如下：&lt;/p>
&lt;ul>
&lt;li>sed &amp;rsquo;s:test:TEXT:g&amp;rsquo; file&lt;/li>
&lt;li>sed &amp;rsquo;s|test|TEXT|g&amp;rsquo; file&lt;/li>
&lt;/ul>
&lt;p>上面的示例通过定界符，区分了 COMMAND、正则表达式、要替换的内容、COMMAND 对应的 flag
定界符出现在样式内部时，需要进行转义：&lt;/p>
&lt;ol>
&lt;li>sed &amp;rsquo;s//bin//usr/local/bin/g&amp;rsquo; file&lt;/li>
&lt;/ol>
&lt;h3 id="addr行定位httpswwwgnuorgsoftwaresedmanualsedhtmlsed-addresses">&lt;a href="https://www.gnu.org/software/sed/manual/sed.html#sed-addresses">ADDR(行定位)&lt;/a>&lt;a class="td-heading-self-link" href="#addr%e8%a1%8c%e5%ae%9a%e4%bd%8dhttpswwwgnuorgsoftwaresedmanualsedhtmlsed-addresses" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>sed 工具将会更具 ADDR 来决定在哪一行或哪些行执行命令，比如下面的示例表示：仅在第 144 行将字符串 hello 替换为 world&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sed &lt;span style="color:#4e9a06">&amp;#39;144s/hello/world/&amp;#39;&lt;/span> input.txt &amp;gt; output.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ADDR 可以通过多种方式进行行定位：
一、使用数值定位行&lt;/p>
&lt;ul>
&lt;li>&lt;strong>NUMBER&lt;/strong> # 使用行号 NUMBER，来定位指定的行&lt;/li>
&lt;li>&lt;strong>$&lt;/strong> # 这个符号与输入的最后一个文件的最后一行匹配，或者在指定-i 或-s 选项时与每个文件的最后一行匹配。&lt;/li>
&lt;li>&lt;strong>first~step&lt;/strong> # 从 first 行开始，每隔 step 的行，被定位&lt;/li>
&lt;/ul>
&lt;p>EXAMPLE：&lt;/p>
&lt;ul>
&lt;li>sed -n 10p passwd # 输出 passwd 文件中的第 10 行&lt;/li>
&lt;li>sed -n $p passwd # 输出 passwd 文件中最后一行&lt;/li>
&lt;li>sed -n 1~5p passwd # 输出 passwd 文件中第一行、第六行、第十一行&amp;hellip;.以此类推&lt;/li>
&lt;/ul>
&lt;p>二、使用 RegExp(正则表达式) 定位行
Note：通过正则表达式来匹配指定的行，正则表达式两边需要添加定界符&lt;/p>
&lt;ul>
&lt;li>&lt;strong>/RegExp/&lt;/strong> # 根据 RegExp 匹配到内容，来定位包含这些内容的行&lt;/li>
&lt;li>&lt;strong>/RegExp/I&lt;/strong> # 进行正则匹配时，不区分大小写&lt;/li>
&lt;li>&lt;strong>/RegExp/M&lt;/strong> # 正则表达式匹配的 M 修饰符是 GNU sed 扩展，它指示 GNU sed 在多行模式下匹配正则表达式&lt;/li>
&lt;/ul>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>sed -n /root/p passwd # 输出 passwd 文件中所有带 root 字符的行&lt;/li>
&lt;/ul>
&lt;p>三、定位一个范围内的行&lt;/p>
&lt;ul>
&lt;li>&lt;strong>NUM1,NUM2&lt;/strong> # 使用行号定位 NUM1 到 NUM2 的所有行&lt;/li>
&lt;li>&lt;strong>NUM,+N&lt;/strong> # 定位 NUM1 行及其后两行&lt;/li>
&lt;li>&lt;strong>NUM,~N&lt;/strong> # 匹配 NUM1 和 NUM1 之后的行，直到行号是 N 的倍数的下一行为止。以下命令从第 6 行开始打印，直到下一行是 4 的倍数（即第 8 行）：
&lt;ul>
&lt;li>seq 10 | sed -n &amp;lsquo;6,~4p&amp;rsquo; # 输出 6 7 8 行&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>注意：任意 NUM 可以 使用 RegExp 代替，i.e.通过正则来匹配开始行或结束行
&lt;ul>
&lt;li>&lt;strong>/RegExp1/,/RegExp2/&lt;/strong> # 使用正则，定位 pattern1 匹配到的行，到 pattern2 匹配到的行，这两行中间的所有行&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>sed -n 1,5p passwd # 输出 passwd 文件中的第一行到第五行&lt;/li>
&lt;li>sed -n /root/,/sshd/p passwd # 输出带有 root 的行，到 带有 sshd 的行，中间的所有行&lt;/li>
&lt;li>sed -n /root/,+2p /etc/passwd # 输出带有 root 的行，以及带有 root 行下面的 2 行&lt;/li>
&lt;/ul>
&lt;h3 id="command操作行为">COMMAND(操作行为)&lt;a class="td-heading-self-link" href="#command%e6%93%8d%e4%bd%9c%e8%a1%8c%e4%b8%ba" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>a &amp;lt;TEXT&amp;gt;&lt;/strong> # 在匹配行的下一行插入 TEXT&lt;/li>
&lt;li>&lt;strong>i &amp;lt;TEXT&amp;gt;&lt;/strong> # 在匹配行的上一行插入 TEXT&lt;/li>
&lt;li>&lt;strong>a\ &amp;lt;TEXT&amp;gt;&lt;/strong> # 在当前行下面插入 TEXT。&lt;/li>
&lt;li>&lt;strong>i\ &amp;lt;TEXT&amp;gt;&lt;/strong> # 在当前行上面插入 TEXT。&lt;/li>
&lt;li>&lt;strong>c\ &amp;lt;TEXT&amp;gt;&lt;/strong> # 把选定的行改为新的 TEXT。&lt;/li>
&lt;li>&lt;strong>d&lt;/strong> # 删除，删除选择的行。&lt;/li>
&lt;li>&lt;strong>D&lt;/strong> # 删除模板块的第一行。
&lt;ul>
&lt;li>删除命令用于删除匹配的行，而且删除命令还会改变 sed 脚本中命令的执行操作顺序，因为匹配的行一旦被删除，模式空间将变为“空”，自然不会再执行哪个 sed 脚本后续的命令。删除命令会导致读取新的输入行（下一行），而 sed 脚本中的命令则从头开始执行。需要注意的是删除时是删除整行，而不是删除匹配的内容（如要删除匹配的内容，可以使用替换）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>s/RegExp/REPLACEMENT/FLAGS&lt;/strong> # 在已经定位的每行中，将 RegExp 匹配到的内容，替换成 REPLACEMENT&lt;/li>
&lt;li>&lt;strong>h&lt;/strong> # 拷贝模板块的内容到内存中的缓冲区。&lt;/li>
&lt;li>&lt;strong>H&lt;/strong> # 追加模板块的内容到内存中的缓冲区。&lt;/li>
&lt;li>&lt;strong>g&lt;/strong> # 获得内存缓冲区的内容，并替代当前模板块中的文本。&lt;/li>
&lt;li>&lt;strong>G&lt;/strong> # 获得内存缓冲区的内容，并追加到当前模板块文本的后面。&lt;/li>
&lt;li>&lt;strong>l&lt;/strong> # 列表不能打印字符的清单。&lt;/li>
&lt;li>&lt;strong>L&lt;/strong> # 同 l，不显示非打印字符&lt;/li>
&lt;li>&lt;strong>n&lt;/strong> # 读取下一个输入行，用下一个命令处理新的行而不是用第一个命令。&lt;/li>
&lt;li>&lt;strong>N&lt;/strong> # 追加下一个输入行到模式空间中，并在二行间嵌入一个新行，改变当前行号码。&lt;/li>
&lt;li>**p **# 打印模式空间中执行了 COMMAND 的内容&lt;/li>
&lt;li>&lt;strong>P&lt;/strong> # 打印模板块的第一行。&lt;/li>
&lt;li>&lt;strong>q&lt;/strong> # 退出 Sed。&lt;/li>
&lt;li>b lable 分支到脚本中带有标记的地方，如果分支不存在则分支到脚本的末尾。&lt;/li>
&lt;li>r file 从 file 中读行。&lt;/li>
&lt;li>t label if 分支，从最后一行开始，条件一旦满足或者 T，t 命令，将导致分支到带有标号的命令处，或者到脚本的末尾。&lt;/li>
&lt;li>T label 错误分支，从最后一行开始，一旦发生错误或者 T，t 命令，将导致分支到带有标号的命令处，或者到脚本的末尾。&lt;/li>
&lt;li>w file 写并追加模板块到 file 末尾。&lt;/li>
&lt;li>W file 写并追加模板块的第一行到 file 末尾。&lt;/li>
&lt;li>! # 表示后面的命令对所有没有被定位到的行发生作用。i.e.对行定位操作匹配到的行取反。&lt;/li>
&lt;li>= 打印当前行号码。&lt;/li>
&lt;li>
&lt;h1 id="把注释扩展到下一个换行符以前">把注释扩展到下一个换行符以前。&lt;a class="td-heading-self-link" href="#%e6%8a%8a%e6%b3%a8%e9%87%8a%e6%89%a9%e5%b1%95%e5%88%b0%e4%b8%8b%e4%b8%80%e4%b8%aa%e6%8d%a2%e8%a1%8c%e7%ac%a6%e4%bb%a5%e5%89%8d" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;/li>
&lt;/ul>
&lt;h1 id="特殊-command">特殊 COMMAND&lt;a class="td-heading-self-link" href="#%e7%89%b9%e6%ae%8a-command" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="替换指令s-substitution">替换指令(S, SUBSTITUTION)&lt;a class="td-heading-self-link" href="#%e6%9b%bf%e6%8d%a2%e6%8c%87%e4%bb%a4s-substitution" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>指令格式：[address]s/pattern/replacement/flags&lt;/p>
&lt;ul>
&lt;li>address # 操作地址&lt;/li>
&lt;li>s # 替换指令&lt;/li>
&lt;li>pattern # 匹配需要替换的内容&lt;/li>
&lt;li>replacement # 为替换的内容&lt;/li>
&lt;li>flags # 标记可以是如下内容：
&lt;ul>
&lt;li>n # 1 - 512 之间的数字，表示对模式空间中指定模式的第 n 次出现进行替换。如一行中有 3 个 A，而只想替换第二个 A。&lt;/li>
&lt;li>g # 对模式空间的所有匹配进行全局更改。没有 g 则只有第一次匹配被替换。如一行中有 3 个 A，则仅替换第一个 A。&lt;/li>
&lt;li>p # 打印模式空间的内容，即表示打印行。与-n 选项一起使用可以只打印匹配的行。&lt;/li>
&lt;li>w file # 将模式空间的内容写到文件 file 中。 即表示把行写入一个文件。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>replacement 为字符串，用来替换这则表达式匹配的内容。在 replacement 部分，下列字符有特殊含义：&lt;/p>
&lt;ul>
&lt;li>&amp;amp; 用正则表达式匹配的内容进行替换&lt;/li>
&lt;li>\n 匹配第 n 个子串，该子串之前在 pattern 中用 &lt;code>\(\)&lt;/code>指定，即正则表达式分组。&lt;/li>
&lt;li>\ 转义（转义替换部分包含：&amp;amp;、\等）&lt;/li>
&lt;/ul>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>set -n &amp;rsquo;s/123/234/&amp;lsquo;p test # 把 test 文件中的 123 替换为 234，并显示所有完成替换的行&lt;/li>
&lt;li>sed &amp;rsquo;s/|/\n/&amp;rsquo; FILE # 把 FILE 文件中的每个|符号变成换行符，即让一行的内容变成多行&lt;/li>
&lt;li>sed &amp;lsquo;:t;N;s/\n//;b t&amp;rsquo; FILE # 把 FILE 问文件中的换行符清空，即然多行内容变为一行&lt;/li>
&lt;li>sed &amp;rsquo;s/^[ \t]*//&amp;rsquo; FILE # 删除行首 tab 键&lt;/li>
&lt;li>echo this is a test line | sed &amp;rsquo;s/\w+/[&amp;amp;]/g&amp;rsquo; # 将所有的单词用中括号 [] 包裹起来：&lt;/li>
&lt;/ul>
&lt;h2 id="转换指令y">转换指令（Y）&lt;a class="td-heading-self-link" href="#%e8%bd%ac%e6%8d%a2%e6%8c%87%e4%bb%a4y" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>按字符转换（Transform）的语法格式为：[address]y/yousource-chars/dest-chars/&lt;/p>
&lt;ul>
&lt;li>address 用于定位需要修改的行&lt;/li>
&lt;li>source-chars 为需要修改的字符&lt;/li>
&lt;li>dest-chars 为准备替换的字符。&lt;/li>
&lt;/ul>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>就文件中的 china 转换为大写：
&lt;ul>
&lt;li>sed &amp;lsquo;/china/y/abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKNOPQRSTUVWXYZ/&amp;rsquo; file&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="其他">其他&lt;a class="td-heading-self-link" href="#%e5%85%b6%e4%bb%96" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="命令组合">命令组合&lt;a class="td-heading-self-link" href="#%e5%91%bd%e4%bb%a4%e7%bb%84%e5%90%88" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>用时候我们可能会对一个文件或者输入做连续的 sed 处理，例如：&lt;/p>
&lt;p>sed &amp;lsquo;表达式&amp;rsquo; | sed &amp;lsquo;表达式&amp;rsquo; | sed &amp;lsquo;表达式&amp;rsquo;&lt;/p>
&lt;p>其实，我们可以将所有的表达式用分号(;)组合起来，即：&lt;/p>
&lt;p>sed &amp;lsquo;表达式; 表达式;表达式&amp;rsquo;&lt;/p>
&lt;p>分号的含义就是将前面的处理完结果传给后边的表达式继续处理。&lt;/p>
&lt;p>我们也可以对多个命令用大括号 {} 进行组合，然后作用于同一匹配地址，即：&lt;/p>
&lt;p>address{commad1; command2; command3}&lt;/p>
&lt;p>也可以放在多行：&lt;/p>
&lt;p>address{ commad1 command2 command3}&lt;/p>
&lt;p>示例，如果文件中含 test 的行，则将其下一行的 aa 替换为 bb：&lt;/p>
&lt;p>sed &amp;lsquo;/test/{ n; s/aa/bb/; }&amp;rsquo; file&lt;/p>
&lt;p>选定行的范围&lt;/p>
&lt;p>选择要处理行的范围，可以用逗号(,)来分割。例如选定所有在模板 test 和 check 所确定的范围内的行：&lt;/p>
&lt;p>sed -n &amp;lsquo;/test/,/check/p&amp;rsquo; file&lt;/p>
&lt;p>打印从第 5 行开始到第一个包含以 test 开始的行之间的所有行：&lt;/p>
&lt;p>sed -n &amp;lsquo;5,/^test/p&amp;rsquo; file&lt;/p>
&lt;p>对于模板 test 和 west 之间的行，每行的末尾用字符串 aaa bbb 替换：&lt;/p>
&lt;p>sed &amp;lsquo;/test/,/west/s/$/aaa bbb/&amp;rsquo; file&lt;/p>
&lt;h2 id="sed-常用格式">Sed 常用格式&lt;a class="td-heading-self-link" href="#sed-%e5%b8%b8%e7%94%a8%e6%a0%bc%e5%bc%8f" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>sed 命令行常用的基本格式大致有一下三种形式：&lt;/p>
&lt;p>（1）Sed [options] &amp;lsquo;script&amp;rsquo; file1 file2 &amp;hellip;&lt;/p>
&lt;p>script 结构为 /PATTERN/action，PATTERN 为正则表达式，action 为要执行的动作。例如：sed ‘/[[:upper:]]/d’ binary.sh 表示删除所有的大写字母的行。script 的结构还可以是 /PATTERN1/,/PATTERN2/action，这表示从第一次被 PATTERN1 匹配到的行到第一次被 PATTERN2 匹配到的中间的所有行执行 action 动作。&lt;/p>
&lt;p>这里需要注意的是，当进行字符串替换时，需要在 PATTERN 前加上 s 动作，并在末尾加上替换的范围，例如： sed &amp;rsquo;s/abc/123/g&amp;rsquo; 表示将匹配到的字符串 abc 替换成 123，g 表示替换所有的行。&lt;/p>
&lt;p>（2）Sed [options] –f scriptfile file1 file2 &amp;hellip;&lt;/p>
&lt;p>scriptfile 表示脚本文件，即 sed 支持将要执行的操作写在文件里边，然后通过使用 -f 参数来加载文件。&lt;/p>
&lt;p>（3）Sed [options] &amp;lsquo;ADDR1,ADDR2command&amp;rsquo; file1 file2 &amp;hellip;&lt;/p>
&lt;p>该格式应用于以行为单位的操作，例如：&lt;/p>
&lt;p>sed ’1,2d’ file&lt;/p>
&lt;p>就可以将 file 的前两行删除并显示出来，但是它不会改变源文件。&lt;/p>
&lt;p>Sed ‘1,2!d’ file&lt;/p>
&lt;p>表示删除除第一行和第二行之外的所有行。&lt;/p>
&lt;p>注： 在这种格式中的 &amp;amp; 表示引用前面匹配到的所有字符。并且在该种格式中可以引入分组。&lt;/p>
&lt;p>示例：&lt;/p>
&lt;p>$ sed &amp;rsquo;s/bc/-&amp;amp;-/&amp;rsquo; testfile&lt;/p>
&lt;p>这里表示在匹配到 bc 字符两端加上字符&amp;rsquo;-&amp;rsquo;&lt;/p>
&lt;p>$ sed &amp;rsquo;s/ /-\1-~\2~/&amp;rsquo; testfile&lt;/p>
&lt;p>这里的 \1 和 \2 表示正则表达式的分组 1 和分组二所匹配的内容。&lt;/p>
&lt;h2 id="sed-高级应用">Sed 高级应用&lt;a class="td-heading-self-link" href="#sed-%e9%ab%98%e7%ba%a7%e5%ba%94%e7%94%a8" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>正常的 Sed 数据处理流程是读取文档的一行至模式空间，然后对该行应用相应的 Sed 指令。当指令完成后输出该行并清空模式空间，一次循环读入文档的下一行数据，直至文档数据结尾。然而在真实环境中的数据可能并不会那么有规律，有时我们会把数据分多行写入文档，如：&lt;/p>
&lt;p>姓名：张三邮箱：zhangsan@gmail.com姓名：李四邮箱：lisi@gmail.com&lt;/p>
&lt;p>从上面的模板文件中可以看出，实际每两行位一条完整的记录，而此时如果需要用 Sed 对文档进行处理，就需要对 Sed 工作流程进行人工干预。&lt;/p>
&lt;p>多行操作 Next&lt;/p>
&lt;p>Next（N）指令通过读取新的输入行，并将它追加至模式空间的现有内容之后，来创建多行模式空间。模式空间的最初内容与新的输入含之间用换行符分隔。在模式空间中插入的换行符可以用 \n 匹配。&lt;/p>
&lt;p>列举一个范例，范例所用样本文件如下（test.txt）：&lt;/p>
&lt;p>Name:HuotyMail:huoty@gmail.comName:KonghyMail:konghy@163.com&lt;/p>
&lt;p>我们要做的处理是，当读入的内容与 Name 匹配时，立刻读取下一行，再输入模式空间中的内容。处理脚本如下所示（sed.sh）:&lt;/p>
&lt;p>#n/Name/{NL}&lt;/p>
&lt;p>其中，#n 放在脚本文件中表示屏蔽自动输出，L 表示不打印非打印字符（小写 l 标识打印非打印字符），即行尾的 \n。用 sed 执行操作如下：&lt;/p>
&lt;p>sed -f sed.sh test.txt&lt;/p>
&lt;p>多行操作 Print&lt;/p>
&lt;p>Print（p）表示仅输出多行模式空间中的第一部分直到第一个插入的 \n 换行符为止。如模式空间中的内容为 “aaa\nbbb”，则 P 只输出 aaa。&lt;/p>
&lt;p>多行删除 Delete（D）&lt;/p>
&lt;p>Delete 删除模式空间中直到第一个插入的换行符（\n）前的内容。由于 d 命令的作用是删除模式空间中的内容并读取新的输入行，而如果 sed 在 d 指令后还有多条命令，则余下的指令将不再执行。而返回第一条指令对新度入行进行处理。多行指令 D 则不会读入因的行，而是放回 sed 脚本的顶端，使得剩余指令继续应用于模式空间中的剩余部分内容。&lt;/p>
&lt;p>Hold（h,H）, Get（g,G）&lt;/p>
&lt;p>Sed 还有一个称为保持空间（hold space）的缓冲区。模式空间的内容可以复制到保持空间，保持空间同样可以复制到模式空间。由一组 Sed 命令用于两者之间移动数据：&lt;/p>
&lt;p>Hold（h|H） 将模式空间的内容复制或者追加到保持空间 Get（g|G） 将保持空间的内容复制或者追加到模式空间 Exchange（x） 交换保持空间与模式空间中的内容&lt;/p>
&lt;p>举一个使用范例，样本文件如下（test.txt）：&lt;/p>
&lt;p>aaabbbcccddd&lt;/p>
&lt;p>Sed 教程文件如下（sed.sh）：&lt;/p>
&lt;p>/aaa/{hd}/ccc/{G}&lt;/p>
&lt;p>执行处理命令：&lt;/p>
&lt;p>sed -f sed.sh test.txt&lt;/p>
&lt;p>结果如下所示：&lt;/p>
&lt;p>bbbcccaaaddd&lt;/p>
&lt;p>sed{&lt;/p>
&lt;h1 id="先读取资料存入模式空间对其进行编辑再输出再用下一行替换模式空间内容">先读取资料、存入模式空间、对其进行编辑、再输出、再用下一行替换模式空间内容&lt;a class="td-heading-self-link" href="#%e5%85%88%e8%af%bb%e5%8f%96%e8%b5%84%e6%96%99%e5%ad%98%e5%85%a5%e6%a8%a1%e5%bc%8f%e7%a9%ba%e9%97%b4%e5%af%b9%e5%85%b6%e8%bf%9b%e8%a1%8c%e7%bc%96%e8%be%91%e5%86%8d%e8%be%93%e5%87%ba%e5%86%8d%e7%94%a8%e4%b8%8b%e4%b8%80%e8%a1%8c%e6%9b%bf%e6%8d%a2%e6%a8%a1%e5%bc%8f%e7%a9%ba%e9%97%b4%e5%86%85%e5%ae%b9" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h1 id="调试工具-sedsed-参数--d-httpaurelionetsedsedsedsed-10">调试工具 sedsed (参数 -d) &lt;a href="http://aurelio.net/sedsed/sedsed-1.0">http://aurelio.net/sedsed/sedsed-1.0&lt;/a>&lt;a class="td-heading-self-link" href="#%e8%b0%83%e8%af%95%e5%b7%a5%e5%85%b7-sedsed-%e5%8f%82%e6%95%b0--d-httpaurelionetsedsedsedsed-10" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>-n # 输出由编辑指令控制(取消默认的输出,必须与编辑指令一起配合)&lt;/p>
&lt;p>-i # 直接对文件操作&lt;/p>
&lt;p>-e # 多重编辑&lt;/p>
&lt;p>-r # 正则可不转移特殊字符&lt;/p>
&lt;p>b # 跳过匹配的行&lt;/p>
&lt;p>p # 打印&lt;/p>
&lt;p>d # 删除&lt;/p>
&lt;p>s # 替换&lt;/p>
&lt;p>g # 配合 s 全部替换&lt;/p>
&lt;p>i # 行前插入&lt;/p>
&lt;p>a # 行后插入&lt;/p>
&lt;p>r # 读&lt;/p>
&lt;p>y # 转换&lt;/p>
&lt;p>q # 退出&lt;/p>
&lt;p>&amp;amp; # 代表查找的串内容&lt;/p>
&lt;ul>
&lt;li>
&lt;h1 id="任意多个-前驱字符前导符">任意多个 前驱字符(前导符)&lt;a class="td-heading-self-link" href="#%e4%bb%bb%e6%84%8f%e5%a4%9a%e4%b8%aa-%e5%89%8d%e9%a9%b1%e5%ad%97%e7%ac%a6%e5%89%8d%e5%af%bc%e7%ac%a6" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;/li>
&lt;/ul>
&lt;p>? # 0 或 1 个 最小匹配 没加-r 参数需转义 ?&lt;/p>
&lt;p>$ # 最后一行&lt;/p>
&lt;p>.* # 匹配任意多个字符&lt;/p>
&lt;p>(a) # 保存 a 作为标签 1(\1)&lt;/p>
&lt;p>模式空间{&lt;/p>
&lt;pre>&lt;code># 模式空间(两行两行处理) 模式匹配的范围，一般而言，模式空间是输入文本中某一行，但是可以通过使用N函数把多于一行读入模式空间
# 暂存空间里默认存储一个空行
n # 读入下一行(覆盖上一行)
h # 把模式空间里的行拷贝到暂存空间
H # 把模式空间里的行追加到暂存空间
g # 用暂存空间的内容替换模式空间的行
G # 把暂存空间的内容追加到模式空间的行后
x # 将暂存空间的内容于模式空间里的当前行互换
！ # 对其前面的要匹配的范围取反
D # 删除当前模式空间中直到并包含第一个换行符的所有字符(/.*/匹配模式空间中所有内容，匹配到就执行D,没匹配到就结束D)
N # 追加下一个输入行到模式空间后面并在第二者间嵌入一个换行符，改变当前行号码,模式匹配可以延伸跨域这个内嵌换行
p # 打印模式空间中的直到并包含第一个换行的所有字符
&lt;/code>&lt;/pre>
&lt;p>}&lt;/p>
&lt;p>标签函数{&lt;/p>
&lt;pre>&lt;code>: lable # 建立命令标记，配合b，t函数使用跳转
b lable # 分支到脚本中带有标记的地方，如果分支不存在则分支到脚本的末尾。
t labe # 判断分支，从最后一行开始，条件一旦满足或者T,t命令，将导致分支到带有标号的命令出，或者到脚本末尾。与b函数不同在于t在执行跳转前会先检查其前一个替换命令是否成功，如成功，则执行跳转。
sed -e '{:p1;/A/s/A/AA/;/B/s/B/BB/;/[AB]\{10\}/b;b p1;}' # 文件内容第一行A第二行B:建立标签p1;两个替换函数(A替换成AA,B替换成BB)当A或者B达到10个以后调用b,返回
echo 'sd f f [a b c cddd eee]' | sed ':n;s#\(\[[^ ]*\) *#\1#;tn' # 标签函数t使用方法,替换[]里的空格
echo &amp;quot;198723124.03&amp;quot;|sed -r ':a;s/([0-9]+)([0-9]{3})/\1,\2/;ta' # 每三个字符加一个逗号
&lt;/code>&lt;/pre>
&lt;p>}&lt;/p>
&lt;p>引用外部变量{&lt;/p>
&lt;pre>&lt;code>sed -n ''$a',10p'
sed -n &amp;quot;&amp;quot;$a&amp;quot;,10p&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>}&lt;/p>
&lt;p>sed 10q # 显示文件中的前 10 行 (模拟&amp;quot;head&amp;quot;)&lt;/p>
&lt;p>sed -n &amp;lsquo;$=&amp;rsquo; # 计算行数(模拟 &amp;ldquo;wc -l&amp;rdquo;)&lt;/p>
&lt;p>sed -n &amp;lsquo;5,/^no/p&amp;rsquo; # 打印从第 5 行到以 no 开头行之间的所有行&lt;/p>
&lt;p>sed -i &amp;ldquo;/^$f/d&amp;rdquo; a 　　 　 # 删除匹配行&lt;/p>
&lt;p>sed -i &amp;lsquo;/aaa/,$d&amp;rsquo; # 删除匹配行到末尾&lt;/p>
&lt;p>sed -i &amp;ldquo;s/=/:/&amp;rdquo; c # 直接对文本替换&lt;/p>
&lt;p>sed -i &amp;ldquo;/^pearls/s/$/j/&amp;rdquo; # 找到 pearls 开头在行尾加 j&lt;/p>
&lt;p>sed &amp;lsquo;/1/,/3/p&amp;rsquo; file # 打印 1 和 3 之间的行&lt;/p>
&lt;p>sed -n &amp;lsquo;1p&amp;rsquo; file # 取出指定行&lt;/p>
&lt;p>sed &amp;lsquo;5i\aaa&amp;rsquo; file # 在第 5 行之前插入行&lt;/p>
&lt;p>sed &amp;lsquo;5a\aaa&amp;rsquo; file # 在第 5 行之后抽入行&lt;/p>
&lt;p>echo a|sed -e &amp;lsquo;/a/i\b&amp;rsquo; # 在匹配行前插入一行&lt;/p>
&lt;p>echo a|sed -e &amp;lsquo;/a/a\b&amp;rsquo; # 在匹配行后插入一行&lt;/p>
&lt;p>echo a|sed &amp;rsquo;s/a/&amp;amp;\nb/g&amp;rsquo; # 在匹配行后插入一行&lt;/p>
&lt;p>seq 10| sed -e{1,3}&amp;rsquo;s/./a/&amp;rsquo; # 匹配 1 和 3 行替换&lt;/p>
&lt;p>sed -n &amp;lsquo;/regexp/!p&amp;rsquo; # 只显示不匹配正则表达式的行&lt;/p>
&lt;p>sed &amp;lsquo;/regexp/d&amp;rsquo; # 只显示不匹配正则表达式的行&lt;/p>
&lt;p>sed &amp;lsquo;$!N;s/\n//&amp;rsquo; # 将每两行连接成一行&lt;/p>
&lt;p>sed &amp;lsquo;/baz/s/foo/bar/g&amp;rsquo; # 只在行中出现字串&amp;quot;baz&amp;quot;的情况下将&amp;quot;foo&amp;quot;替换成&amp;quot;bar&amp;quot;&lt;/p>
&lt;p>sed &amp;lsquo;/baz/!s/foo/bar/g&amp;rsquo; # 将&amp;quot;foo&amp;quot;替换成&amp;quot;bar&amp;quot;，并且只在行中未出现字串&amp;quot;baz&amp;quot;的情况下替换&lt;/p>
&lt;p>echo a|sed -e &amp;rsquo;s/a/#&amp;amp;/g&amp;rsquo; # 在 a 前面加#号&lt;/p>
&lt;p>sed &amp;rsquo;s/foo/bar/4&amp;rsquo; # 只替换每一行中的第四个字串&lt;/p>
&lt;p>sed &amp;rsquo;s/(.*)foo/\1bar/&amp;rsquo; # 替换每行最后一个字符串&lt;/p>
&lt;p>sed &amp;rsquo;s/(.*)foo(.*foo)/\1bar\2/&amp;rsquo; # 替换倒数第二个字符串&lt;/p>
&lt;p>sed &amp;rsquo;s/[0-9][0-9]$/&amp;amp;5&amp;rsquo; # 在以[0-9][0-9]结尾的行后加 5&lt;/p>
&lt;p>sed -n &amp;rsquo; /^eth|em[01][^:]/{n;p;}&amp;rsquo; # 匹配多个关键字&lt;/p>
&lt;p>sed -n -r &amp;rsquo; /eth|em[01][^:]/{n;p;}&amp;rsquo; # 匹配多个关键字&lt;/p>
&lt;p>echo -e &amp;ldquo;1\n2&amp;rdquo;|xargs -i -t sed &amp;rsquo;s/^/1/&amp;rsquo; {} # 同时处理多个文件&lt;/p>
&lt;p>sed &amp;lsquo;/west/,/east/s/$/&lt;em>VACA&lt;/em>/&amp;rsquo; # 修改 west 和 east 之间的所有行，在结尾处加&lt;em>VACA&lt;/em>&lt;/p>
&lt;p>sed &amp;rsquo;s/[^1-9]&lt;em>([0-9]+).&lt;/em>/\1/&amp;rsquo; # 取出第一组数字，并且忽略掉开头的 0&lt;/p>
&lt;p>sed -n &amp;lsquo;/regexp/{g;1!p;};h&amp;rsquo; # 查找字符串并将匹配行的上一行显示出来，但并不显示匹配行&lt;/p>
&lt;p>sed -n &amp;rsquo; /regexp/{n;p;}&amp;rsquo; # 查找字符串并将匹配行的下一行显示出来，但并不显示匹配行&lt;/p>
&lt;p>sed -n &amp;rsquo;s/(mar)got/\1ianne/p&amp;rsquo; # 保存(mar)作为标签 1&lt;/p>
&lt;p>sed -n &amp;rsquo;s/([0-9]+).*(t)/\2\1/p&amp;rsquo; # 保存多个标签&lt;/p>
&lt;p>sed -i -e &amp;lsquo;1,3d&amp;rsquo; -e &amp;rsquo;s/1/2/&amp;rsquo; # 多重编辑(先删除 1-3 行，在将 1 替换成 2)&lt;/p>
&lt;p>sed -e &amp;rsquo;s/@.*//g&amp;rsquo; -e &amp;lsquo;/^$/d&amp;rsquo; # 删除掉@后面所有字符，和空行&lt;/p>
&lt;p>sed -n -e &amp;ldquo;{s/^ &lt;em>[0-9]&lt;/em>//p}&amp;rdquo; # 打印并删除正则表达式的那部分内容&lt;/p>
&lt;p>echo abcd|sed &amp;lsquo;y/bd/BE/&amp;rsquo; # 匹配字符替换&lt;/p>
&lt;p>sed &amp;lsquo;/^#/b;y/y/P/&amp;rsquo; 2 # 非#号开头的行替换字符&lt;/p>
&lt;p>sed &amp;lsquo;/suan/r readfile&amp;rsquo; # 找到含 suan 的行，在后面加上读入的文件内容&lt;/p>
&lt;p>sed -n &amp;lsquo;/no/w writefile&amp;rsquo; # 找到含 no 的行，写入到指定文件中&lt;/p>
&lt;p>sed &amp;lsquo;/regex/G&amp;rsquo; # 在匹配式样行之后插入一空行&lt;/p>
&lt;p>sed &amp;lsquo;/regex/{x;p;x;G;}&amp;rsquo; # 在匹配式样行之前和之后各插入一空行&lt;/p>
&lt;p>sed &amp;rsquo;n;d&amp;rsquo; # 删除所有偶数行&lt;/p>
&lt;p>sed &amp;lsquo;G;G&amp;rsquo; # 在每一行后面增加两空行&lt;/p>
&lt;p>sed &amp;lsquo;/^$/d;G&amp;rsquo; # 在输出的文本中每一行后面将有且只有一空行&lt;/p>
&lt;p>sed &amp;rsquo;n;n;n;n;G;&amp;rsquo; # 在每 5 行后增加一空白行&lt;/p>
&lt;p>sed -n &amp;lsquo;5~5p&amp;rsquo; # 只打印行号为 5 的倍数&lt;/p>
&lt;p>seq 1 30|sed &amp;lsquo;5~5s/.*/a/&amp;rsquo; # 倍数行执行替换&lt;/p>
&lt;p>sed -n &amp;lsquo;3,${p;n;n;n;n;n;n;}&amp;rsquo; # 从第 3 行开始，每 7 行显示一次&lt;/p>
&lt;p>sed -n &amp;lsquo;h;n;G;p&amp;rsquo; # 奇偶调换&lt;/p>
&lt;p>seq 1 10|sed &amp;lsquo;1!G;h;$!d&amp;rsquo; # 倒叙排列&lt;/p>
&lt;p>ls -l|sed -n &amp;lsquo;/^.rwx.*/p&amp;rsquo; # 查找属主权限为 7 的文件&lt;/p>
&lt;p>sed = filename | sed &amp;lsquo;N;s/\n/\t/&amp;rsquo; # 为文件中的每一行进行编号(简单的左对齐方式)&lt;/p>
&lt;p>sed &amp;rsquo;s/^[ \t]*//&amp;rsquo; # 将每一行前导的&amp;quot;空白字符&amp;quot;(空格，制表符)删除,使之左对齐&lt;/p>
&lt;p>sed &amp;rsquo;s/^[ \t]&lt;em>//;s/[ \t]&lt;/em>$//&amp;rsquo; # 将每一行中的前导和拖尾的空白字符删除&lt;/p>
&lt;p>sed &amp;lsquo;/{abc,def}/[111,222]/s/^/00000/&amp;rsquo; # 匹配需要转行的字符: } / [&lt;/p>
&lt;p>echo abcd\nabcde |sed &amp;rsquo;s/\n/@/g&amp;rsquo; |tr &amp;lsquo;@&amp;rsquo; &amp;lsquo;\n&amp;rsquo; # 将换行符转换为换行&lt;/p>
&lt;p>cat tmp|awk &amp;lsquo;{print $1}&amp;rsquo;|sort -n|sed -n &amp;lsquo;$p&amp;rsquo; # 取一列最大值&lt;/p>
&lt;p>sed -n &amp;lsquo;{s/^[^/]&lt;em>//;s/:.&lt;/em>//;p}&amp;rsquo; /etc/passwd # 取用户家目录(匹配不为/的字符和匹配:到结尾的字符全部删除)&lt;/p>
&lt;p>sed = filename | sed &amp;lsquo;N;s/^/ /; s/ *(.{6,})\n/\1 /&amp;rsquo; # 对文件中的所有行编号(行号在左，文字右端对齐)&lt;/p>
&lt;p>/sbin/ifconfig |sed &amp;rsquo;s/.&lt;em>inet addr:(.&lt;/em>) Bca.*/\1/g&amp;rsquo; |sed -n &amp;lsquo;/eth/{n;p}&amp;rsquo; # 取所有 IP&lt;/p>
&lt;p>修改 keepalive 配置剔除后端服务器{&lt;/p>
&lt;pre>&lt;code>sed -i '/real_server.*10.0.1.158.*8888/,+8 s/^/#/' keepalived.conf
sed -i '/real_server.*10.0.1.158.*8888/,+8 s/^#//' keepalived.conf
&lt;/code>&lt;/pre>
&lt;p>}&lt;/p>
&lt;p>模仿 rev 功能{&lt;/p>
&lt;pre>&lt;code>echo 123 |sed '/\n/!G;s/\(.\)\(.*\n\)/&amp;amp;\2\1/;//D;s/.//;'
/\n/!G; 　　　　　　# 没有\n换行符，要执行G,因为保留空间中为空，所以在模式空间追加一空行
s/\(.\)\(.*\n\)/&amp;amp;\2\1/; # 标签替换 &amp;amp;\n23\n1$ (关键在于&amp;amp; ,可以让后面//匹配到空行)
//D; 　　　　　　# D 命令会引起循环删除模式空间中的第一部分，如果删除后，模式空间中还有剩余行，则返回 D 之前的命令，重新执行，如果 D 后，模式空间中没有任何内容，则将退出。 //D 匹配空行执行D,如果上句s没有匹配到,//也无法匹配到空行, &amp;quot;//D;&amp;quot;命令结束
s/.//; 　　　　　　# D结束后,删除开头的 \n
&lt;/code>&lt;/pre>
&lt;p>}&lt;/p>
&lt;p>}&lt;/p>
&lt;h1 id="应用示例">应用示例&lt;a class="td-heading-self-link" href="#%e5%ba%94%e7%94%a8%e7%a4%ba%e4%be%8b" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>获取双引号之间的字符。假如 sed.txt 中的内容为 &lt;code>&amp;quot;bitnami &amp;quot;&lt;/code> 。那么下面命令会输出 &lt;code>bitnami&lt;/code>&lt;/p>
&lt;ul>
&lt;li>**sed &amp;rsquo;s/^&amp;quot;(.&lt;em>)&amp;quot;.&lt;/em>/\1/&amp;rsquo; sed.txt **&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>打印 passwd 文件的内容，等效于 cat passwd 命令。&lt;/p>
&lt;ul>
&lt;li>sed -n p passwd&lt;/li>
&lt;li>注意： 如果不加 -n，则 passwd 每行内容输出两次，因为 sed 本身的逻辑在从模式空间到标准输出一行，然后 p 命令还会再将该行输出一遍。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>删除开头带#的行&lt;/p>
&lt;ul>
&lt;li>sed &amp;lsquo;/^#/d&amp;rsquo; FILE&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>删掉空白行：&lt;/p>
&lt;ul>
&lt;li>sed &amp;lsquo;/^$/d&amp;rsquo; file&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>搜索 resolv.conf 文件中，开头带有 nameserver 字符串的行，并在行首添加#&lt;/p>
&lt;ul>
&lt;li>sed &amp;lsquo;/^nameserver/s/^/#/&amp;rsquo; /etc/resolv.conf&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>将 resolv.conf 文件中，具有 nameserver 关键字的行开头的 # 符号去掉。&lt;/p>
&lt;ul>
&lt;li>sed &amp;rsquo;s/#(nameserver.*)/\1/&amp;rsquo; /etc/resolv.conf&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>在 hostname 行的前一行添加 ${STRING} 变量中的内容。其中 &lt;code>STRING=&amp;quot;\ \ \ \ \ \ labels:&amp;quot;&lt;/code>&lt;/p>
&lt;ul>
&lt;li>sed -i &amp;ldquo;/hostname/i${STRING}&amp;rdquo; prometheus.yml #&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>在 hostname 行的行首添加两个空格&lt;/p>
&lt;ul>
&lt;li>sed &amp;ldquo;s/hostname/ &amp;amp;/&amp;rdquo; prometheus.yml&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>在文件最后一行添加变量中的内容，注意 $a 前加 &lt;code>\&lt;/code> 符号以便让 sed 认出 $a 表示最后一行&lt;/p>
&lt;ul>
&lt;li>sed -i &amp;ldquo;$a${Masters[${i}]%%=*} ${Masters[${i}]##*=}&amp;rdquo; /tmp/hosts #&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>在开头是 kind: Deployment 这行的下一行的下一行，添加 namespace: redis 行&lt;/p>
&lt;p>sed -n &amp;lsquo;/^kind: Deployment/{N;a\ namespace: redis
p}&amp;rsquo; all-redis-operator-resources.yaml&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/ec3zxx/1616166346275-89fa46ea-529e-45ab-b8c9-501e0d4f8b43.jpeg" alt="">&lt;/p>
&lt;h2 id="匹配行的下-n-行替换内容">匹配行的下 N 行替换内容&lt;a class="td-heading-self-link" href="#%e5%8c%b9%e9%85%8d%e8%a1%8c%e7%9a%84%e4%b8%8b-n-%e8%a1%8c%e6%9b%bf%e6%8d%a2%e5%86%85%e5%ae%b9" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>定位到包含字符串 console-agent-exporter 的行下的第 1 行，将 scrape_interval.* 替换为 scrape_interval: 180s&lt;/p>
&lt;ul>
&lt;li>sed &amp;lsquo;/console-agent-exporter/{n;s/scrape_interval.*/scrape_interval: 180s/;}&amp;rsquo; prometheus.yml&lt;/li>
&lt;/ul>
&lt;p>定位到包含字符串 console-agent-exporter 的行下的第 2 行，将 scrape_timeout:.* 替换为 scrape_timeout: 180s&lt;/p>
&lt;ul>
&lt;li>sed &amp;lsquo;/console-agent-exporter/{n;n;s/scrape_timeout.*/scrape_timeout: 180s/;}&amp;rsquo; prometheus.yml&lt;/li>
&lt;/ul>
&lt;h2 id="其他-1">其他&lt;a class="td-heading-self-link" href="#%e5%85%b6%e4%bb%96-1" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>if [[ ! &lt;code>grep 'web.config=' /opt/monitoring/client/docker-compose.yml&lt;/code> ]]; then sed -i &amp;lsquo;/web.listen-address=:9100/i\ \ \ \ - &amp;ndash;web.config=/etc/prometheus/config_out/web-config.yml&amp;rsquo; /opt/monitoring/client/docker-compose.yml; fi&lt;/li>
&lt;/ul></description></item><item><title>Docs: Vim</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/Linux-%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/Vim/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/Linux-%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/Vim/</guid><description/></item></channel></rss>