<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Linux 网络管理工具 on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/Linux-%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</link><description>Recent content in Linux 网络管理工具 on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/Linux-%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/index.xml" rel="self" type="application/rss+xml"/><item><title>cURL</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/Linux-%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/cURL/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/Linux-%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/cURL/</guid><description>概述 参考：
GitHub 项目，curl/curl 官网 Manual(手册) cURL 是一个用于 URL 与 URIs 传输的命令行工具和库，始于 1998 年。
早在 20 世纪 90 年代中期，当时互联网还处于萌芽阶段，瑞典程序员 Daniel Stenberg 开始了一个项目，这个项目最终发展成了我们今天所知道的 curl 程序。
最初，他的目标是开发一种机器人，可以定期从网页上下载货币汇率，并向 IRC 用户提供等值的瑞典克朗美元。这个项目蓬勃发展，在这个过程中添加了几个协议和特性——剩下的就是历史了。
curl 是常用的命令行工具，用来请求 Web 服务器。它的名字就是“客户端(client)的 URL ”工具的意思。
注意：curl 最常见是通过网络 URL 来传输数据。但是，curl 还可以通过 Socket 的 URL 来传输数据，只需要使用 &amp;ndash;unix-socket 选项指定 Socket 路径即可。
Syntax(语法) curl [OPTIONS] URL&amp;hellip;.
如果没有另外说明，curl 将接收到的数据写入标准输出。可以使用 -o、&amp;ndash;output 或 -O、&amp;ndash;remote-name 选项将该数据保存到本地文件中。如果 curl 被赋予多个 URL 以在命令行上传输，它同样需要多个选项来保存它们。curl 不会解析或以其他方式“理解”它作为输出获取或写入的内容。它不进行编码或解码，除非使用专用命令行选项明确要求。
OPTIONS 由于 curl 程序支持多种协议，可以使用各种不同的协议向指定的 URL 发起请求，所以，并不是所有选项都适用于所有协议。在下面的笔记中，每个选项后面会添加一个 ()，括号中说明此选项支持的协议，多个协议以空格分割；没有 () 的表示该选项适用于所有协议。若括号内为 TLS 则表示使用安全的各种协议，比如 https、ftps、imaps 等等</description></item><item><title>ethtool</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/Linux-%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/ethtool/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/Linux-%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/ethtool/</guid><description>概述 参考：
Manual(手册)，ethtool(8) ethtool 是一个工具，用来查询或控制网络驱动程序和硬件设备。
Notes: ethtool 无法查看到 DPDK 等程序接管的网卡的网络设备。因为已经绕过了内核，ethtool 只能查询或控制直接由内核管理的网卡。
~]# ethtool em1 Settings for em1: Supported ports: [ TP ] Supported link modes: 10baseT/Half 10baseT/Full 100baseT/Half 100baseT/Full 1000baseT/Half 1000baseT/Full Supported pause frame use: No Supports auto-negotiation: Yes Supported FEC modes: Not reported Advertised link modes: 10baseT/Half 10baseT/Full 100baseT/Half 100baseT/Full 1000baseT/Half 1000baseT/Full Advertised pause frame use: Symmetric Advertised auto-negotiation: Yes Advertised FEC modes: Not reported Link partner advertised link modes: 10baseT/Full 100baseT/Full 1000baseT/Full Link partner advertised pause frame use: No Link partner advertised auto-negotiation: Yes Link partner advertised FEC modes: Not reported Speed: 1000Mb/s Duplex: Full Port: Twisted Pair PHYAD: 1 Transceiver: internal Auto-negotiation: on MDI-X: on Supports Wake-on: g Wake-on: d Current message level: 0x000000ff (255) drv probe link timer ifdown ifup rx_err tx_err Link detected: yes Syntax(语法) ethtool [OPTIONS] DeviceName</description></item><item><title>Socat</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/Linux-%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/Socat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/Linux-%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/Socat/</guid><description>概述 参考：
官网：http://www.dest-unreach.org/socat/ 官方文档：http://www.dest-unreach.org/socat/doc/socat.html Socat 是一个多功能的网络工具，名字来由是” Socket CAT”，可以看作是 Netcat 的 N 倍加强版。
Socat 是一个两个独立数据通道之间的双向数据传输的继电器。这些数据通道包含文件、管道、设备（终端或调制解调器等）、socket（Unix，IP4，IP6 - raw，UDP，TCP）、SSL、SOCKS4 客户端或代理 CONNECT。
Socat 支持广播和多播、抽象 Unix sockets、Linux tun/tap、GNU readline 和 PTY。它提供了分叉、记录和进程间通信的不同模式。多个选项可用于调整 socat 和其渠道，Socat 可以作为 TCP 中继（一次性或守护进程），作为一个守护进程基于 socksifier，作为一个 shell Unix 套接字接口，作为 IP6 的继电器，或面向 TCP 的程序重定向到一个串行线。
socat 的主要特点就是在两个数据流之间建立通道；且支持众多协议和链接方式：ip, tcp, udp, ipv6, pipe,exec,system,open,proxy,openssl,socket 等。
工作原理
socat 的运行有 4 个阶段:
初始化 解析命令行以及初始化日志系统。 打开连接 先打开第一个连接，再打开第二个连接。这个单步执行的。 如果第一个连接失败，则会直接退出。 数据转发 谁有数据就转发到另外一个连接上, read/write 互换。 关闭 其中一个连接掉开，执行处理另外一个连接。 地址类型 参数由 2 部分组成，第一个连接和第二个连接，最简单的用法就是 socat - - 其效果就是输入什么，回显什么其用法主要在于地址如何描述, 下面介绍几个常用的。 TCP TCP:&amp;lt;host&amp;gt;:&amp;lt;port&amp;gt; 目标机器 IP 对应端口 portTCP-LISTEN:&amp;lt;port&amp;gt; 本机监听端口。</description></item><item><title>wget</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/Linux-%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/wget/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/Linux-%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/wget/</guid><description>概述 参考：
Syntax(语法) OPTIONS
-O NAME # 下载后重命名为指定的 NAME EXAMPLE
wget -q -O - http://www.baidu.com/ # 不下载，将 URL 为http://www.baidu.com/的内容输出到标准输出上</description></item><item><title>流量监控与处理工具</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/Linux-%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/%E6%B5%81%E9%87%8F%E7%9B%91%E6%8E%A7%E4%B8%8E%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/Linux-%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/%E6%B5%81%E9%87%8F%E7%9B%91%E6%8E%A7%E4%B8%8E%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7/</guid><description>概述 参考：
iftop iftop 是一个类似 top 的命令，只不过是监控系统网络中数据传输情况的，使用该命令默认打开如下的界面
界面上面显示的是类似刻度尺的刻度范围，为显示流量图形的长条作标尺用的。
中间的 &amp;lt;= 和 =&amp;gt; 这两个左右箭头，表示的是流量的方向。
TX：发送流量 RX：接收流量 TOTAL：总流量 Cumm：运行 iftop 到目前时间的总流量 peak：流量峰值 rates：分别表示过去 2s 10s 40s 的平均流量 OPTIONS：
其中有一些选项，可以用在打开 iftop 程序之后，这些选项使用 黄色背景 来表示在 iftop 程序中使用的字母
-F # 显示特定网段的进出流量，如# iftop -F 10.10.1.0/24 或# iftop -F 10.10.1.0/255.255.255.0 -i &amp;lt;DEV&amp;gt; # 指定要监测的网卡 -n # 不进行主机名的查找，e.g.显示 ip 而不显示主机名 -N # 显示端口号时，直接显示端口号，而不显示使用端口的进程名。 -P # 在展示界面显示每个连接的端口。也就是说显示当前连接的流量是哪个进程的。 EXAMPLE
iftop -P Nethogs - 网络流量监控工具 nethogs 可以根据进程来查看网络带宽利用率。nethogs 类似于网络版的 top 命令，如果有突发的网络流量增大，可以使用 nethogs 去定位是哪一个 PID 造成的。</description></item><item><title>网络链路追踪工具</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/Linux-%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/%E7%BD%91%E7%BB%9C%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/Linux-%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/%E7%BD%91%E7%BB%9C%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA%E5%B7%A5%E5%85%B7/</guid><description>概述 参考：
trace 路由追踪 参考：
Linux 中有两个工具可以用来追踪路由，tracepath 与 traceroute。tracepath 工具包含在 iputils 包中，安装完系统可以直接使用。traceroute 是单独的一个包，需要手动安装。
默认使用 UDP 来进行追踪。
下面是 tracepath 工具输出的信息
~]# tracepath qq.com -n 1?: [LOCALHOST] pmtu 1500 1: no reply 2: 10.20.1.1 1.205ms ..... 6: 111.33.170.185 3.582ms 7: 117.131.130.137 6.999ms 8: 221.183.13.45 6.017ms asymm 9 9: 221.183.38.61 7.326ms asymm 8 第一列为 TTL 的值。TTL(Time To Live)存活时间，指一个数据包到达目的地时，可传递的最长距离(Hop)。每当数据包经过一个路由器时，其存活次数就会减一，当存货次数为 0 时，路由器会丢弃该数据包。TTL 的设计目的时为了防止数据包因为不正确的路由表等原因造成的无限循环而无法送达目的地。
第二列为每个 hop (i.e.每跳)的信息(就是路由吓一跳的地址)。注意，如果当前 hop 的设备禁止 icmp 报文，那么该 hop 无法显示地址。
剩下的信息为当前 hop 路径点的信息。这些信息包含如下内容</description></item></channel></rss>