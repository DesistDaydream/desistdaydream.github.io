<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦的站点 – ip</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/Linux-%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/Iproute-%E5%B7%A5%E5%85%B7%E5%8C%85/ip/</link><description>Recent content in ip on 断念梦的站点</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/Linux-%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/Iproute-%E5%B7%A5%E5%85%B7%E5%8C%85/ip/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: ip</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/Linux-%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/Iproute-%E5%B7%A5%E5%85%B7%E5%8C%85/ip/ip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/Linux-%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/Iproute-%E5%B7%A5%E5%85%B7%E5%8C%85/ip/ip/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://man7.org/linux/man-pages/man8/ip.8.html">Manual(手册)，ip(8)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>ip 命令行工具可以控制各种 &lt;strong>Object(对象)&lt;/strong>，这些对象包括：路由、网络设备、接口、隧道 等&lt;/p>
&lt;h1 id="syntax语法">Syntax(语法)&lt;a class="td-heading-self-link" href="#syntax%e8%af%ad%e6%b3%95" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;strong>ip [Global OPTIONS] OBJECT [COMMAND]&lt;/strong>&lt;/p>
&lt;p>ip 程序的语法有点复杂，对 Object 控制的命令中，有非常多的参数，不像普通命令一样，把参数称为 FLAGS 或 OPTIONS，且都是以 &lt;code>-&lt;/code> 或者 &lt;code>--&lt;/code> 符号开头的。&lt;/p>
&lt;p>这里我们使用 &lt;strong>大写字母&lt;/strong> 来描述 &lt;strong>一个参数&lt;/strong> 或 &lt;strong>一个具体的值&lt;/strong>。参数中还可以包含一个或多个其他参数，每个参数的值，同样使用大写字母表示。&lt;/p>
&lt;p>在后面的文章中，凡是这种复杂的参数，都使用这类格式表示：&lt;code>参数 := 参数 | 值&lt;/code>，这就有点像编程中初始化&lt;strong>变量&lt;/strong>一样。在这里就是等于是定义一个参数，并为参数赋值。比如 &lt;code>ip link&lt;/code> 命令中，就有这种样子的写法：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/iproute/ip_1.png" alt="image.png">&lt;/p>
&lt;p>这里面有一个 IFADDR 表示一个参数，IFADDR 参数又是由 PREFIX、SCOPE-ID 等参数组成，而 SCOPE-ID 则表示有具体含义的值。其实，本质上，命令行工具的参数，就是要传入代码的 Function 中的的实际参数。&lt;/p>
&lt;h2 id="global-opitons">Global OPITONS&lt;a class="td-heading-self-link" href="#global-opitons" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>注意：这里的 OPTIONS 是全局选项，要用在 ip 与 OBJECT 之间，比如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># ip -c route&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>default via 172.19.42.1 dev ens3 proto static metric &lt;span style="color:#0000cf;font-weight:bold">100&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>10.19.0.0/24 dev docker0 proto kernel scope link src 10.19.0.1 linkdown
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>172.19.42.0/24 dev ens3 proto kernel scope link src 172.19.42.248 metric &lt;span style="color:#0000cf;font-weight:bold">100&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># ip route -c&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Command &lt;span style="color:#4e9a06">&amp;#34;-c&amp;#34;&lt;/span> is unknown, try &lt;span style="color:#4e9a06">&amp;#34;ip route help&amp;#34;&lt;/span>.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到，-c 选项用在 OBJECT 后面是无效的。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-d, -details&lt;/strong> # 输出更详细的信息,主要显示该网络设备的类型等&lt;/li>
&lt;li>&lt;strong>-f, -family &amp;lt;FAMILY&amp;gt;&lt;/strong> # 指定要使用的协议族。协议族标识符可以是 inet、inet6、bridge、mpls、link 中的一种。如果不存在此选项，则从其他参数中猜测协议族。如果命令行的其余部分没有提供足够的信息来猜测该系列，则 ip 会退回到默认值，通常是 inet 或任何其他值。链接是一个特殊的系列标识符，表示不涉及网络协议。
&lt;ul>
&lt;li>&lt;strong>-4&lt;/strong> # &lt;code>-family inet&lt;/code> 的简写&lt;/li>
&lt;li>&lt;strong>-6&lt;/strong> # &lt;code>-family inet6&lt;/code> 的简写&lt;/li>
&lt;li>&lt;strong>-B&lt;/strong> # &lt;code>-family bridge&lt;/code> 的简写&lt;/li>
&lt;li>&lt;strong>-M&lt;/strong> # &lt;code>-family mpls&lt;/code> 的简写&lt;/li>
&lt;li>&lt;strong>-0&lt;/strong> # &lt;code>-family link&lt;/code> 的简写&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>-o, -oneline&lt;/strong> # 在一行中输出每条记录，并用&amp;rsquo;&amp;lsquo;字符替换换行符。在使用 wc(1) 对记录进行计数 或 对输出进行 &lt;a href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux%20%E7%AE%A1%E7%90%86/Linux%20%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/grep.md">grep&lt;/a> 时，这非常方便。
&lt;ul>
&lt;li>注意，使用 -o 选项时，不会打印没有 IP 地址的网络设备&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>-s, -stats&lt;/strong> # 显示更详细的信息,主要显示该网络设备的接收、发送、错误、丢弃的数据包信息&lt;/li>
&lt;/ul>
&lt;h2 id="arguments">ARGUMENTS&lt;a class="td-heading-self-link" href="#arguments" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>OBJECT := { link | address | addrlabel | route | rule | neigh | ntable | tunnel | tuntap | maddress | mroute | mrule | monitor | xfrm | netns | l2tp | tcp_metrics | token | macsec | vrf | mptcp }&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>注意：OBJECT(对象)选项用来指定 ip 程序想要控制的网络栈中的实体。&lt;/li>
&lt;li>比如：
&lt;ul>
&lt;li>link(链路)&lt;/li>
&lt;li>address(地址)&lt;/li>
&lt;li>route(路由条目)&lt;/li>
&lt;li>等&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ip 命令可以对这些网络对象进行相关操作，选定 object 后，后面执行相关 command 进行操作&lt;/li>
&lt;/ul>
&lt;h2 id="command">COMMAND&lt;a class="td-heading-self-link" href="#command" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>主要都是对各个 Object 的 add | delete | set | show | list 等类似增删改查的命令，还有各个 Object 独自的子命令&lt;/p>
&lt;h1 id="object-命令详解">OBJECT 命令详解&lt;a class="td-heading-self-link" href="#object-%e5%91%bd%e4%bb%a4%e8%af%a6%e8%a7%a3" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="link---网络设备配置">link - 网络设备配置&lt;a class="td-heading-self-link" href="#link---%e7%bd%91%e7%bb%9c%e8%ae%be%e5%a4%87%e9%85%8d%e7%bd%ae" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>详见：&lt;a href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux%20%E7%AE%A1%E7%90%86/Linux%20%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/Iproute%20%E5%B7%A5%E5%85%B7%E5%8C%85/ip/link.md">link&lt;/a>&lt;/p>
&lt;h2 id="address---ipv4-或-ipv6-地址管理">address - IPv4 或 IPv6 地址管理&lt;a class="td-heading-self-link" href="#address---ipv4-%e6%88%96-ipv6-%e5%9c%b0%e5%9d%80%e7%ae%a1%e7%90%86" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://man7.org/linux/man-pages/man8/ip-address.8.html">https://man7.org/linux/man-pages/man8/ip-address.8.html&lt;/a>&lt;/p>
&lt;h3 id="syntax语法-1">Syntax(语法)&lt;a class="td-heading-self-link" href="#syntax%e8%af%ad%e6%b3%95-1" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>&lt;strong>ip [OPTIONS] address [COMMAND]&lt;/strong>&lt;/p>
&lt;p>&lt;strong>COMMAND：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>add | del | change | replace | show&lt;/li>
&lt;li>save | flush&lt;/li>
&lt;li>showdump | restore&lt;/li>
&lt;/ul>
&lt;h3 id="example">EXAMPLE&lt;a class="td-heading-self-link" href="#example" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>简略显示网络设备信息&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># ip -4 -o a s&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>1: lo inet 127.0.0.1/8 scope host lo&lt;span style="color:#4e9a06">\ &lt;/span> valid_lft forever preferred_lft forever
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2: ens3 inet 172.19.42.248/24 brd 172.19.42.255 scope global ens3&lt;span style="color:#4e9a06">\ &lt;/span> valid_lft forever preferred_lft forever
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>3: docker0 inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0&lt;span style="color:#4e9a06">\ &lt;/span> valid_lft forever preferred_lft forever
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>筛选满足 IP 地址格式的网卡信息&lt;/p>
&lt;ul>
&lt;li>&lt;code>ip a s up | egrep --color=auto -n '\[0-9]+.\[0-9]+.\[0-9]+.\[0-9]+'&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>显示[已经启动的]网卡 ip 信息,类似于 ifconfig 命令,可简写为 ip a s up&lt;/p>
&lt;ul>
&lt;li>ip address show [up]&lt;/li>
&lt;/ul>
&lt;p>以详细信息显示 ens33 的网卡关于地址的信息，包括收发包的状态等&lt;/p>
&lt;ul>
&lt;li>ip -s addr show ens33&lt;/li>
&lt;/ul>
&lt;p>给 eth0 网卡添加一个临时的 IP 地址&lt;/p>
&lt;ul>
&lt;li>ip addr add 192.168.0.1/24 dev eth0&lt;/li>
&lt;/ul>
&lt;p>ip addr add 10.0.0.101/24 broadcast 10.0.0.255 dev eth0 label eth0:0&lt;/p>
&lt;h2 id="route---路由条目管理">route - 路由条目管理&lt;a class="td-heading-self-link" href="#route---%e8%b7%af%e7%94%b1%e6%9d%a1%e7%9b%ae%e7%ae%a1%e7%90%86" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>详见：&lt;/p>
&lt;p>&lt;a href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux%20%E7%AE%A1%E7%90%86/Linux%20%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/Iproute%20%E5%B7%A5%E5%85%B7%E5%8C%85/ip/rule%20%E4%B8%8E%20route.md">rule 与 route&lt;/a>&lt;/p>
&lt;h2 id="rule---路由策略数据库管理">rule - 路由策略数据库管理&lt;a class="td-heading-self-link" href="#rule---%e8%b7%af%e7%94%b1%e7%ad%96%e7%95%a5%e6%95%b0%e6%8d%ae%e5%ba%93%e7%ae%a1%e7%90%86" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>详见：&lt;/p>
&lt;p>&lt;a href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux%20%E7%AE%A1%E7%90%86/Linux%20%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/Iproute%20%E5%B7%A5%E5%85%B7%E5%8C%85/ip/rule%20%E4%B8%8E%20route.md">rule 与 route&lt;/a>&lt;/p>
&lt;h2 id="neighbor---管理-arp-或-ndisc-缓存条目">neighbor - 管理 ARP 或 NDISC 缓存条目&lt;a class="td-heading-self-link" href="#neighbor---%e7%ae%a1%e7%90%86-arp-%e6%88%96-ndisc-%e7%bc%93%e5%ad%98%e6%9d%a1%e7%9b%ae" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>ip [OPTIONS] neighbor [COMMAND]&lt;/strong>&lt;/p>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>ip neighbor list # 显示邻居和 arp 表，即学到的 IP 地址，可显示该 IP 是否可达等状态，以及是从哪个端口学到的&lt;/li>
&lt;li>ip neigh flush dev eth0 # 移除 eth0 设备上的邻居条目（i.e.清空 arp）&lt;/li>
&lt;/ul>
&lt;h2 id="tuntap---tuntap-网络设备的管理">tuntap - tun/tap 网络设备的管理&lt;a class="td-heading-self-link" href="#tuntap---tuntap-%e7%bd%91%e7%bb%9c%e8%ae%be%e5%a4%87%e7%9a%84%e7%ae%a1%e7%90%86" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>ip tuntap COMMAND mode { tun | tap } [ dev PHYS_DEV ] [ user USER ] [ group GROUP ] [ one_queue ] [ pi ] [ vnet_hdr ] [ multi_queue ] [ name NAME ]&lt;/strong>&lt;/p>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>ip tuntap add dev vnet3 mode tun # 创建一个 tun 类型，名为 vnet3 的网络设备&lt;/li>
&lt;/ul>
&lt;h2 id="netns---进程网络命名空间管理">netns - 进程网络命名空间管理&lt;a class="td-heading-self-link" href="#netns---%e8%bf%9b%e7%a8%8b%e7%bd%91%e7%bb%9c%e5%91%bd%e5%90%8d%e7%a9%ba%e9%97%b4%e7%ae%a1%e7%90%86" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>ip [OPTIONS] netns [COMMAND]&lt;/strong>
是在 linux 中提供网络虚拟化的一个项目，使用 netns 网络空间虚拟化可以在本地虚拟化出多个网络环境，目前 netns 在 lxc 容器中被用来为容器提供网络(注意:可以查看 openstack、docker 各个节点上的虚拟网络设备并进行操作)。&lt;/p>
&lt;p>COMMAND
add、delete、set、list 增删改查通用命令&lt;/p>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>ip netns add r1 # 创建名字为 r1 的 namespace&lt;/li>
&lt;li>ip netns list # 列出 net namespace，显示名称&lt;/li>
&lt;/ul>
&lt;p>identify&lt;/p>
&lt;p>pids&lt;/p>
&lt;p>exec&lt;/p>
&lt;p>&lt;strong>ip netns exec NAME COMMAND&amp;hellip;.&lt;/strong># 对 NAME 这个 namesapce 执行 COMMAND 命令&lt;/p>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>ip netns exec r1 bash # 进入 r1 这个 namesapce 的空间中，相当于启动了一个单独的关于该 namespace 的 shell，可以使用 exit 退出&lt;/li>
&lt;li>ip netns exec r1 ip a s # 显示 r1 这个 namespace 的网路信息&lt;/li>
&lt;li>ip netns exec r1 ip link set veth1.1 name eth0 # 设定 r1 这个 namespace 中的 veth1.1 网卡的名字为 eth0&lt;/li>
&lt;/ul>
&lt;p>monitor&lt;/p>
&lt;h1 id="网络设备信息">网络设备信息&lt;a class="td-heading-self-link" href="#%e7%bd%91%e7%bb%9c%e8%ae%be%e5%a4%87%e4%bf%a1%e6%81%af" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://man7.org/linux/man-pages/man7/netdevice.7.html">Manual(手册)，netdevice(7)&lt;/a> - Ioctls - SIOCGIFFLAGS, SIOCSIFFLAGS&lt;/li>
&lt;li>&lt;a href="https://github.com/iproute2/iproute2/blob/main/include/uapi/linux/if.h">GitHub 项目，iproute2/iproute2 - include/uapi/linux/if.h&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://stackoverflow.com/questions/36715664/using-ip-what-does-lower-up-mean">https://stackoverflow.com/questions/36715664/using-ip-what-does-lower-up-mean&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>通过 ip link、ip address 等命令通过 show 子命令获取的网络信息的大体结构如下:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu &lt;span style="color:#0000cf;font-weight:bold">65536&lt;/span> qdisc noqueue state UNKNOWN group default qlen &lt;span style="color:#0000cf;font-weight:bold">1000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> inet 127.0.0.1/8 scope host lo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> valid_lft forever preferred_lft forever
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> inet6 ::1/128 scope host
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> valid_lft forever preferred_lft forever
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>4: eno1: &amp;lt;BROADCAST,MULTICAST,SLAVE,UP,LOWER_UP&amp;gt; mtu &lt;span style="color:#0000cf;font-weight:bold">1500&lt;/span> qdisc mq master bond0 state UP group default qlen &lt;span style="color:#0000cf;font-weight:bold">1000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> link/ether ac:1f:6b:e9:62:da brd ff:ff:ff:ff:ff:ff
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>6: eno2: &amp;lt;NO-CARRIER,BROADCAST,MULTICAST,SLAVE,UP&amp;gt; mtu &lt;span style="color:#0000cf;font-weight:bold">1500&lt;/span> qdisc mq master bond0 state DOWN group default qlen &lt;span style="color:#0000cf;font-weight:bold">1000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> link/ether ac:1f:6b:e9:62:da brd ff:ff:ff:ff:ff:ff permaddr ac:1f:6b:e9:62:db
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>8: enp67s0f0: &amp;lt;NO-CARRIER,BROADCAST,MULTICAST,UP&amp;gt; mtu &lt;span style="color:#0000cf;font-weight:bold">1500&lt;/span> qdisc mq state DOWN group default qlen &lt;span style="color:#0000cf;font-weight:bold">1000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> link/ether 68:91:d0:6c:2e:86 brd ff:ff:ff:ff:ff:ff
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>20: bond0: &amp;lt;BROADCAST,MULTICAST,MASTER,UP,LOWER_UP&amp;gt; mtu &lt;span style="color:#0000cf;font-weight:bold">1500&lt;/span> qdisc noqueue state UP group default qlen &lt;span style="color:#0000cf;font-weight:bold">1000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> link/ether ac:1f:6b:e9:62:da brd ff:ff:ff:ff:ff:ff
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> inet 111.32.26.178/27 brd 111.32.26.191 scope global noprefixroute bond0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> valid_lft forever preferred_lft forever
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> inet6 fe80::7128:83cd:3cc7:9074/64 scope link noprefixroute
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> valid_lft forever preferred_lft forever
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="第一部分">第一部分&lt;a class="td-heading-self-link" href="#%e7%ac%ac%e4%b8%80%e9%83%a8%e5%88%86" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="第二部分">第二部分&lt;a class="td-heading-self-link" href="#%e7%ac%ac%e4%ba%8c%e9%83%a8%e5%88%86" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>在 ip address show 命令中列出的网络设备，可能包含这样的名称 eth0.2@eth0 。其实设备名就是 eth0.2(其中 2 表示 vlan 号)，至于后面的&lt;code>@&lt;/code>则是一个关联同等级网络设备的符号，表示 eth0.2 这个设备是与 eth0 关联的。如果是 bridge 和 bond 之类的网络设备，则没有&lt;code>@&lt;/code>符号，因为和 bridge 或者 bond 关联的设备都是属于下级设备。&lt;/p>
&lt;h2 id="第三部分">第三部分&lt;a class="td-heading-self-link" href="#%e7%ac%ac%e4%b8%89%e9%83%a8%e5%88%86" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;code>&amp;lt; &amp;gt;&lt;/code> 中的信息描述了网路设备的状态，这些状态的的含义可以从 &lt;a href="https://github.com/iproute2/iproute2/blob/main/include/uapi/linux/if.h">iproute2 的源码 include/uapi/linux/if.h&lt;/a> 出查到（这部分源码与 Linux 的 &lt;a href="https://github.com/torvalds/linux/blob/master/include/uapi/linux/if.h">if.h&lt;/a> 源码相同，从 &lt;a href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Network/Linux%20%E7%BD%91%E7%BB%9C%E6%A0%88%E7%AE%A1%E7%90%86/Linux%20%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87%E8%AF%A6%E8%A7%A3/Linux%20%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87%E8%AF%A6%E8%A7%A3.md">Linux 网络设备详解&lt;/a> 中可以看到相关介绍）。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>BROADCAST&lt;/strong> # 表示该网络接口支持广播通信，也就是可以向同一网络中的所有设备广播信息。&lt;/li>
&lt;li>&lt;strong>MULTICAST&lt;/strong> # 表示该网络接口支持多播通信，也就是可以向同一网络中的一组设备广播信息。&lt;/li>
&lt;li>&lt;strong>NO-CARRIER&lt;/strong> # 表示该网络接口当前没有连接到任何物理设备，或者该连接已经断开。例如，当网线未连接到网卡时，该属性会显示为NO-CARRIER&lt;/li>
&lt;li>&lt;strong>LOWER_UP&lt;/strong> # 物理层连接是活跃的，通常表示网线已连接且对端设备工作正常。&lt;/li>
&lt;li>&lt;strong>UP&lt;/strong> # 表示该网络接口已经启用并正在工作
&lt;ul>
&lt;li>LOWER_UP 与 UP 的区别：LOWER_UP 仅仅是表示物理层插了网线，UP 是网络层准备好了可以开始传输数据了。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="第四部分">第四部分&lt;a class="td-heading-self-link" href="#%e7%ac%ac%e5%9b%9b%e9%83%a8%e5%88%86" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>TODO:&lt;/p>
&lt;ul>
&lt;li>qdisc # 队列管理机制？&lt;/li>
&lt;li>noqueue&lt;/li>
&lt;li>qlen # 队列的长度？&lt;/li>
&lt;/ul></description></item><item><title>Docs: link</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/Linux-%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/Iproute-%E5%B7%A5%E5%85%B7%E5%8C%85/ip/link/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/Linux-%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/Iproute-%E5%B7%A5%E5%85%B7%E5%8C%85/ip/link/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://man7.org/linux/man-pages/man8/ip-link.8.html">Manual(手册)，ip-link(8)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>一个 &lt;strong>link&lt;/strong> 代表一个 &lt;strong>network device(网络设备)&lt;/strong>。link 对象及其相应的命令集，可以查看和操纵网络设备(增删改查等)。主要通过其自身的子命令来实现本身的功能。&lt;/p>
&lt;p>网络设备配置&lt;/p>
&lt;h1 id="syntax语法">Syntax(语法)&lt;a class="td-heading-self-link" href="#syntax%e8%af%ad%e6%b3%95" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;strong>ip [OPTIONS] link [COMMAND]&lt;/strong>&lt;/p>
&lt;p>&lt;strong>COMMAND：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>add|delete|set|show&lt;/strong> # 增|删|改|查 一个虚拟 link&lt;/li>
&lt;li>&lt;strong>xstats&lt;/strong> #&lt;/li>
&lt;li>&lt;strong>afstats&lt;/strong> #&lt;/li>
&lt;li>&lt;strong>property&lt;/strong> #&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>OPTIONS：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-4&lt;/strong> # 指定使用的网络层协议是 IPV4&lt;/li>
&lt;li>&lt;strong>-r&lt;/strong> # 显示主机时，不使用 IP，而是使用主机的域名&lt;/li>
&lt;/ul>
&lt;h1 id="add---添加网络设备的虚拟链接">add - 添加网络设备的虚拟链接&lt;a class="td-heading-self-link" href="#add---%e6%b7%bb%e5%8a%a0%e7%bd%91%e7%bb%9c%e8%ae%be%e5%a4%87%e7%9a%84%e8%99%9a%e6%8b%9f%e9%93%be%e6%8e%a5" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>Notes: 真实物理网卡对应的网络设备无法通过 ip link add 命令添加&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>ip link add [link DEVICE] [ name ] NAME [ARGS] type TYPE [ ARGS ]&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>DEVICE&lt;/strong> # 要操作的物理设备&lt;/li>
&lt;li>&lt;strong>NAME&lt;/strong> # 要操作的设备的名称&lt;/li>
&lt;li>&lt;strong>ARGS&lt;/strong> # 这个参数可以设定设备的 IP 地址、网络地址、MTU 等&lt;/li>
&lt;li>&lt;strong>TYPE&lt;/strong> # 设备类型
&lt;ul>
&lt;li>&lt;strong>bridge&lt;/strong> # 以太网网桥设备&lt;/li>
&lt;li>&lt;strong>bond&lt;/strong> # Bonding(绑定)设备&lt;/li>
&lt;li>&lt;strong>dummy&lt;/strong> # 虚拟网络接口&lt;/li>
&lt;li>&lt;strong>veth&lt;/strong> # Virtual ethernet interface(虚拟以太网接口)设备&lt;/li>
&lt;li>&lt;strong>vlan&lt;/strong> # 802.1q tagged virtual LAN interface&lt;/li>
&lt;li>&lt;strong>vxlan&lt;/strong> # Virtual eXtended LAN&lt;/li>
&lt;li>&lt;strong>ipip&lt;/strong> # Virtual tunnel interface IPv4 over IPv4&lt;/li>
&lt;li>等等&amp;hellip;&amp;hellip; 所有可用的设备类型详见 Man 手册的 &lt;a href="https://man7.org/linux/man-pages/man8/ip-link.8.html#DESCRIPTION">Description 部分&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="set---改变设备属性">set - 改变设备属性&lt;a class="td-heading-self-link" href="#set---%e6%94%b9%e5%8f%98%e8%ae%be%e5%a4%87%e5%b1%9e%e6%80%a7" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>注意: 如果请求多个参数更改，则在任何更改失败后，ip 立即中止。当 ip 可以将系统移动到不可预测的状态时，这是唯一的情况。解决方案是避免使用一个 ip 链路集调用更改几个参数。修饰符更改等效于 set。&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>ip link &lt;span style="color:#204a87">set&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span> DEVICE &lt;span style="color:#000;font-weight:bold">|&lt;/span> group GROUP &lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span> up &lt;span style="color:#000;font-weight:bold">|&lt;/span> down &lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> &lt;span style="color:#204a87">type&lt;/span> ETYPE TYPE_ARGS &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> arp &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span> on &lt;span style="color:#000;font-weight:bold">|&lt;/span> off &lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> dynamic &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span> on &lt;span style="color:#000;font-weight:bold">|&lt;/span> off &lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> multicast &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span> on &lt;span style="color:#000;font-weight:bold">|&lt;/span> off &lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> allmulticast &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span> on &lt;span style="color:#000;font-weight:bold">|&lt;/span> off &lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> promisc &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span> on &lt;span style="color:#000;font-weight:bold">|&lt;/span> off &lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> protodown &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span> on &lt;span style="color:#000;font-weight:bold">|&lt;/span> off &lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> trailers &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span> on &lt;span style="color:#000;font-weight:bold">|&lt;/span> off &lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> txqueuelen PACKETS &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> name NEWNAME &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> address LLADDR &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> broadcast LLADDR &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> mtu MTU &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> netns &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span> PID &lt;span style="color:#000;font-weight:bold">|&lt;/span> NETNSNAME &lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> link-netnsid ID &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> &lt;span style="color:#204a87">alias&lt;/span> NAME &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> vf NUM &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> mac LLADDR &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> VFVLAN-LIST &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> rate TXRATE &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> max_tx_rate TXRATE &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> min_tx_rate TXRATE &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> spoofchk &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span> on &lt;span style="color:#000;font-weight:bold">|&lt;/span> off &lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> query_rss &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span> on &lt;span style="color:#000;font-weight:bold">|&lt;/span> off &lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> state &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span> auto &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#204a87">enable&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> disable &lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> trust &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span> on &lt;span style="color:#000;font-weight:bold">|&lt;/span> off &lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> node_guid eui64 &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> port_guid eui64 &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span> xdp &lt;span style="color:#000;font-weight:bold">|&lt;/span> xdpgeneric &lt;span style="color:#000;font-weight:bold">|&lt;/span> xdpdrv &lt;span style="color:#000;font-weight:bold">|&lt;/span> xdpoffload &lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span> off &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>object FILE &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> section NAME &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> verbose &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pinned FILE &lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> master DEVICE &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> nomaster &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> vrf NAME &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> addrgenmode &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span> eui64 &lt;span style="color:#000;font-weight:bold">|&lt;/span> none &lt;span style="color:#000;font-weight:bold">|&lt;/span> stable_secret &lt;span style="color:#000;font-weight:bold">|&lt;/span> random &lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> macaddr &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> MACADDR &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span> flush &lt;span style="color:#000;font-weight:bold">|&lt;/span> add &lt;span style="color:#000;font-weight:bold">|&lt;/span> del &lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span> MACADDR &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> &lt;span style="color:#204a87">set&lt;/span> MACADDR &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="show---显示设备属性">show - 显示设备属性&lt;a class="td-heading-self-link" href="#show---%e6%98%be%e7%a4%ba%e8%ae%be%e5%a4%87%e5%b1%9e%e6%80%a7" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>[!Notes]
show 命令无法显示网络设备的类型。想要查看网络设备的类型，可以通过与 &lt;a href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux%20%E7%AE%A1%E7%90%86/Linux%20%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/ethtool.md">ethtool&lt;/a> 工具配置实现&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> i in &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>ip link show &lt;span style="color:#000;font-weight:bold">|&lt;/span> awk -F: &lt;span style="color:#4e9a06">&amp;#39;$0 !~ &amp;#34;lo|vir|wl|^[^0-9]&amp;#34;{print $2;getline}&amp;#39;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">printf&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;%s\t%s\n&amp;#34;&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">i&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>ethtool -i &lt;span style="color:#000">$i&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> grep driver&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">done&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> column -t
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>ip link show [ DEVICE | group GROUP ] [ up ] [ master DEVICE ] [ type ETYPE ] [ vrf NAME ]&lt;/strong>&lt;/p>
&lt;h1 id="应用示例">应用示例&lt;a class="td-heading-self-link" href="#%e5%ba%94%e7%94%a8%e7%a4%ba%e4%be%8b" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;ul>
&lt;li>显示链路详细信息，包括接收与发送的数据包数以及错误数，丢弃数等
&lt;ul>
&lt;li>ip -s link show&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>查看所有 bridge 类型的网络设备
&lt;ul>
&lt;li>ip link show type bridge&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>启动或者停止 eth0 网卡，可以简写为 &lt;code>ip l s eth0 up&lt;/code>
&lt;ul>
&lt;li>ip link set dev eth0 up|down&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>添加名字为 veth1.1 的链路，类型为 veth，veth 的另一半名字为 veth1.2
&lt;ul>
&lt;li>ip link add veth1.1 type veth peer name veth1.2&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>把 veth1.1 这个设备绑定到名为 r1 的 namespace 上(注意：一个网络设备只能绑定到一个 namespace 上，一个 namesapce 可以绑定多个网络设备)
&lt;ul>
&lt;li>ip link set veth1.1 netns r1&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>将 vnet0 设备绑定到 br0 桥上
&lt;ul>
&lt;li>ip link set dev vnet0 master br0&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>创建 Bond 类型网络设备
&lt;ul>
&lt;li>创建 802.3ad 模式的 Bond 类型网络设备
&lt;ul>
&lt;li>ip link add bond1 type bond mod 802.3ad&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>将物理网卡关联到的网络设备先关掉，再添加到 Bond 网络设备中
&lt;ul>
&lt;li>ip link set enp6s0f0 master down&lt;/li>
&lt;li>ip link set enp6s0f0 down&lt;/li>
&lt;li>ip link set enp6s0f0 master bond1&lt;/li>
&lt;li>ip link set enp6s0f1 down&lt;/li>
&lt;li>ip link set enp6s0f1 master bond1&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: rule 与 route</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/Linux-%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/Iproute-%E5%B7%A5%E5%85%B7%E5%8C%85/ip/rule-%E4%B8%8E-route/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/Linux-%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/Iproute-%E5%B7%A5%E5%85%B7%E5%8C%85/ip/rule-%E4%B8%8E-route/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://man7.org/linux/man-pages/man8/ip-route.8.html">Manual(手册)，ip-route(8)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://man7.org/linux/man-pages/man8/ip-rule.8.html">Manual(手册)，ip-rule(8)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="route---路由条目管理">route - 路由条目管理&lt;a class="td-heading-self-link" href="#route---%e8%b7%af%e7%94%b1%e6%9d%a1%e7%9b%ae%e7%ae%a1%e7%90%86" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>route 可以操作内核路由表中的&lt;strong>条目&lt;/strong>。直接使用命令可以列出 main 路由表中的条目：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># ip route&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>default via 172.19.42.1 dev ens3 proto static
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>172.19.42.0/24 dev ens3 proto kernel scope link src 172.19.42.248
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>注意：如果默认网关已由 DHCP 分配，并且配置文件中指定了具有相同度量的同一网关，则在启动或启动接口时将发生错误。可能会显示以下错误消息：&lt;code>RTNETLINK answers:File exists&lt;/code>。可以忽略此错误。&lt;/p>
&lt;/blockquote>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>目的地址&lt;/th>
&lt;th>via&lt;br>下一跳&lt;/th>
&lt;th>dev&lt;br>网络设备&lt;/th>
&lt;th>proto&lt;br>生成路由条目的方式&lt;/th>
&lt;th>scope&lt;br>覆盖范围&lt;/th>
&lt;th>源地址&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>default&lt;/td>
&lt;td>172.19.42.1&lt;/td>
&lt;td>ens3&lt;/td>
&lt;td>static&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>172.19.42.0/24&lt;/td>
&lt;td>&lt;/td>
&lt;td>ens3&lt;/td>
&lt;td>kernel&lt;/td>
&lt;td>link&lt;/td>
&lt;td>172.19.42.248&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>Route Type(路由类型)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>unicast&lt;/li>
&lt;li>unreachable&lt;/li>
&lt;li>blackhole&lt;/li>
&lt;li>prohibit&lt;/li>
&lt;li>local&lt;/li>
&lt;li>broadcast&lt;/li>
&lt;li>throw&lt;/li>
&lt;li>nat&lt;/li>
&lt;li>anycast&lt;/li>
&lt;li>multicast&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Route Tables(路由表)&lt;/strong>&lt;/p>
&lt;p>Linux-2.x 版本内核以后，可以根据 &lt;strong>SELECTOR(选择器)&lt;/strong> 将数据包交给不同的路由表进行路由处理。这些路由表由 1 到 232 范围内的数字表示(/etc/iproute2/rt_tables 文件中可以为数字起一个别名)。默认情况下，所有普通路由规则都会插入名为 main 的路由表中(main 路由表的 ID 为 254)。ip rule 命令可以对路由表进行控制。&lt;/p>
&lt;h2 id="syntax语法">Syntax(语法)&lt;a class="td-heading-self-link" href="#syntax%e8%af%ad%e6%b3%95" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>ip [Global OPTIONS] route [COMMAND]&lt;/strong>&lt;/p>
&lt;p>&lt;strong>ip [Global OPTIONS] route { show | flush } [to] SELECTOR&lt;/strong>&lt;/p>
&lt;p>&lt;strong>ip [Global OPTIONS] route get ROUTE_GET_FLAGS ADDRESS [ from ADDRESS iif STRING ] [ oif STRING ] [ mark MARK ] [ tos TOS ] [ vrf NAME ] [ ipproto PROTOCOL ] [ sport NUMBER ] [ dport NUMBER ]&lt;/strong>&lt;/p>
&lt;p>&lt;strong>ip [Global OPTIONS] route {add|del|change|append|replace} ROUTE&lt;/strong>&lt;/p>
&lt;h3 id="arguments">ARGUMENTS&lt;a class="td-heading-self-link" href="#arguments" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>&lt;strong>SELECTOR = [ root PREFIX ] [ match PREFIX ] [ exact PREFIX ] [ table TABLE_ID ] [ vrf NAME ] [ proto RTPROTO ] [ type TYPE ] [ scope SCOPE ]&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>table &amp;lt;TABLE_ID&amp;gt;&lt;/strong> # 指定路由表的标识符&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>ROUTE = NODE_SPEC [ INFO_SPEC ]&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>NODE_SPEC = [ TYPE ] PREFIX [ tos TOS ] [ table TABLE_ID ] [ proto RTPROTO ] [ scope SCOPE ] [ metric METRIC ] [ ttl-propagate { enabled | disabled } ]&lt;/li>
&lt;li>INFO_SPEC = { NH | nhid ID } OPTIONS FLAGS [ nexthop NH ] &amp;hellip;
&lt;ul>
&lt;li>NH := [ encap ENCAP ] [ via [ FAMILY ] ADDRESS ] [ dev STRING ] [weight NUMBER ] NHFLAGS&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>FAMILY := [ inet | inet6 | mpls | bridge | link ]&lt;/strong>&lt;/p>
&lt;p>&lt;strong>RTPROTO = [ STRING | NUMBER ]&lt;/strong> # 生成本路由条目时所使用的 Routing Protocol(路由协议，简称 RTPROTO) 的标识符。RTPROTO 的值来自于 /etc/iproute2/rt_protos 文件中数字或字符串。&lt;/p>
&lt;blockquote>
&lt;p>注意：此协议不是指传统意义上的 http、tcp 这种协议，而是指，生成路由条目的方式、或者说生成路由条目的实体。比如我们可以说内核自己生成了一个路由条目；也可以说通过 dhcp 获取 IP 时生成了路由条目；还可以说通过人为手动创建了一个路由条目；等等。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>boot # 默认 RTPROTO。该路由条目在 bootup sequence 期间生成的。且路由守护进程启动时，这些条目将被删除
&lt;ul>
&lt;li>不太理解这个官方的解释？？用人话说，就是 ip 命令默认添加的路由条目在机器重启后会被删除。但是这个类型兜底是啥子意思哦？~&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>kernel # 该路由条目在内核自动配置期间生成。&lt;/li>
&lt;li>dhcp #&lt;/li>
&lt;li>static # 该路由条目由管理员手动添加以覆盖动态路由。路由守护进程会尊重它们，甚至可能将它们通告给它的 peers。&lt;/li>
&lt;li>ra # 该路由条目由 Router Discovery Protocol(路由发现协议) 生成。通常只出现在 IPv6 中&lt;/li>
&lt;li>等等&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>TABLE_ID := [ local| main | default | all | NUMBER ]&lt;/strong> #&lt;/p>
&lt;p>&lt;strong>SCOPE := [ STRING | NUMBER ]&lt;/strong> # 目的地址覆盖的范围。即路由数据包之前，从哪些地方找目的地址。SCOPE 的值来自于 /etc/iproute2/rt_scopes 文件中的数字或字符串。如果省略此参数，则 ip 程序默认 unicast(单播) 类型的路由范围为 global、local 类型的路由范围为 host、unicast 和 broadcst 类型的路由范围为 link。&lt;/p>
&lt;p>用人话说：为数据包选择路由条目前，还需要判断目的地址的有效性。也就是说，目的地址在哪里才是可以被路由的。&lt;/p>
&lt;ul>
&lt;li>host # 目的地址仅在本主机上有效&lt;/li>
&lt;li>link # 目的地址仅在本网络设备上有效&lt;/li>
&lt;li>global # 目的地址全局有效&lt;/li>
&lt;/ul>
&lt;h2 id="ip-route-show">ip route show&lt;a class="td-heading-self-link" href="#ip-route-show" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>显示路由表的内容或按某些标准选择的路由。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>to &amp;lt;SELECTOR&amp;gt;&lt;/strong> #&lt;/li>
&lt;li>&lt;strong>protocol &amp;lt;RTPROTO&amp;gt;&lt;/strong> # 显示指定协议标识符的路由条目&lt;/li>
&lt;/ul>
&lt;h2 id="example">EXAMPLE&lt;a class="td-heading-self-link" href="#example" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>查看名为 local 的路由表的条目
&lt;ul>
&lt;li>ip route show table local&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>查看该 IP 从哪里过来
&lt;ul>
&lt;li>ip route get 192.168.0.1&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>添加默认路由条目，经过 ens3 网络设备，下一跳是 172.19.42.1
&lt;ul>
&lt;li>ip route add default via 172.19.42.1 dev ens3&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>添加路由条目，目的地址是 10.10.10.0/24 网段的数据包的下一跳地址是 192.168.0.2 使用 eth0 网络设备
&lt;ul>
&lt;li>ip route add 10.10.10.0/24 via 192.168.0.2 dev eth0&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="rule---路由策略数据库管理">rule - 路由策略数据库管理&lt;a class="td-heading-self-link" href="#rule---%e8%b7%af%e7%94%b1%e7%ad%96%e7%95%a5%e6%95%b0%e6%8d%ae%e5%ba%93%e7%ae%a1%e7%90%86" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>rule 可以操作路由策略数据库中的规则，控制路由选择算法。说白了就是可以&lt;strong>控制路由表&lt;/strong>，而 ip route 则是&lt;strong>控制路由表的条目&lt;/strong>。&lt;/p>
&lt;p>在互联网上，传统的路由算法仅基于数据包的目标地址做出路由选择。但是在某些情况下，我们希望路由数据包的策略，而不仅仅取决于目标地址，还可以通过源地址、IP 协议、传输协议、端口、甚至数据包的 payload 等等信息来对数据包的路由进行选择。这种方式，称为 &lt;strong>Policy Routing(策略路由)&lt;/strong>。&lt;/p>
&lt;p>为了解决上面的问题，传统的基于目的地址的 &lt;strong>Routing table(路由表)&lt;/strong> 被替换为 &lt;strong>Routing policy database(路由策略数据库，简称 RPDB)&lt;/strong>。RPDB 通过执行一些 &lt;strong>Rule(规则)&lt;/strong> 来选择路由表。&lt;/p>
&lt;p>每个路由策略规则由以下两部分组成：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Selector(选择器)&lt;/strong> # 通过一些规则，对数据包进行匹配，匹配到的数据包，将会执行 Action 定义的动作。&lt;/li>
&lt;li>&lt;strong>Action(动作)&lt;/strong> # 匹配到的数据包将要执行的动作。
&lt;ul>
&lt;li>比如有一个动作叫 lookup，用来指定要查找路由条目的路由表 ID。意思就是指，根据指定路由表中的路由条目，来决定 Selector 匹配到的数据包应该被路由到哪里&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>RPDB 按照优先级递减的顺序注意扫描这些规则(数字越小，优先级越高)。&lt;/p>
&lt;p>在启动时，内核将会配置三个规则组成默认的 RPDB 条目：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>root@desistdaydream:~# ip rule
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0: from all lookup &lt;span style="color:#204a87">local&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>32766: from all lookup main
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>32767: from all lookup default
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>0: from all lookup local
&lt;ul>
&lt;li>&lt;strong>local 路由表(ID 255)&lt;/strong> # 是包含用于本地和广播地址的高优先级控制路由的特殊路由表。&lt;/li>
&lt;li>Priority(优先级) # 0&lt;/li>
&lt;li>Selector(选择器) # 匹配所有&lt;/li>
&lt;li>Action(动作) # 查找名为 local 的路由表。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>32766: from all lookup main
&lt;ul>
&lt;li>&lt;strong>main 路由表(ID 254)&lt;/strong> # 是包含所有非策略路由的正常路由表。可以通过管理员删除和/或覆盖此规则。我们平时配置的路由条目都是在这个表中配置的。&lt;/li>
&lt;li>Priority(优先级) # 32766&lt;/li>
&lt;li>Selector(选择器) # 匹配所有&lt;/li>
&lt;li>Action(动作) # 查找名为 local 的路由表。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>32767: from all lookup default
&lt;ul>
&lt;li>&lt;strong>default 路由表(ID 253)&lt;/strong> # 为空。如果未选择先前的默认规则，则保留某些后处理。也可以删除此规则。&lt;/li>
&lt;li>Priority(优先级) # 327667&lt;/li>
&lt;li>Selector(选择器) # 匹配所有&lt;/li>
&lt;li>Action(动作) # 查找名为 local 的路由表。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>每个 RPDB 条目都有附加属性。每个规则都有一个指向某个路由表的指针。 NAT 和伪装规则有一个属性来选择要转换/伪装的新 IP 地址。除此之外，规则还有一些可选属性，路由也有，即领域。这些值不会覆盖路由表中包含的值。它们仅在路由未选择任何属性时使用。&lt;/p>
&lt;h2 id="syntax语法-1">Syntax(语法)&lt;a class="td-heading-self-link" href="#syntax%e8%af%ad%e6%b3%95-1" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>ip [OPTIONS] rule { COMMAND | help }&lt;/strong>&lt;/p>
&lt;p>&lt;strong>ip [OPTIONS] rule [ list [ SELECTOR ]]&lt;/strong>&lt;/p>
&lt;p>&lt;strong>ip [OPTIONS] rule { add | del } SELECTOR ACTION&lt;/strong>&lt;/p>
&lt;p>&lt;strong>SELECTOR&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>from PREFIX&lt;/strong> # 选择要匹配的源地址。&lt;code>默认值：all&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>to PREFIX&lt;/strong> # 选择要匹配的目的地址。&lt;code>默认值：all&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>priority NUM&lt;/strong> # 策略规则的优先级。&lt;code>默认值:当前数字最大的优先级逐一减 1&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>ACTION&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>lookup TABLEID&lt;/strong> # 根据 SELECTOR 匹配到的查找路由表，根据指定的 TABLEID 路由表来处理数据包的路由。&lt;code>默认值：254&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="example-1">EXAMPLE&lt;a class="td-heading-self-link" href="#example-1" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>添加优先级为 1，ID 为 2 的路由表，所有源地址是 192.168.0.0/24 网段的数据包都根据该路由表的规则进行路由。
&lt;ul>
&lt;li>&lt;strong>ip rule add priority 1  from 192.168.0.0/24 table 2&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item></channel></rss>