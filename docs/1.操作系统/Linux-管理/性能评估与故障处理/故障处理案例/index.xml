<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>故障处理案例 on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0%E4%B8%8E%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86%E6%A1%88%E4%BE%8B/</link><description>Recent content in 故障处理案例 on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0%E4%B8%8E%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86%E6%A1%88%E4%BE%8B/index.xml" rel="self" type="application/rss+xml"/><item><title>boot目录被清空下物理机无法开机的一次救援</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0%E4%B8%8E%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86%E6%A1%88%E4%BE%8B/boot%E7%9B%AE%E5%BD%95%E8%A2%AB%E6%B8%85%E7%A9%BA%E4%B8%8B%E7%89%A9%E7%90%86%E6%9C%BA%E6%97%A0%E6%B3%95%E5%BC%80%E6%9C%BA%E7%9A%84%E4%B8%80%E6%AC%A1%E6%95%91%E6%8F%B4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0%E4%B8%8E%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86%E6%A1%88%E4%BE%8B/boot%E7%9B%AE%E5%BD%95%E8%A2%AB%E6%B8%85%E7%A9%BA%E4%B8%8B%E7%89%A9%E7%90%86%E6%9C%BA%E6%97%A0%E6%B3%95%E5%BC%80%E6%9C%BA%E7%9A%84%E4%B8%80%E6%AC%A1%E6%95%91%E6%8F%B4/</guid><description>概述 参考：
今天下午到公司被通知苏州一个节点的客户的裸金属无法开机，14:00 上去到 16:50 终于给整好了，这里记录下笔记分享下
故障现象 物理机裸金属，连上跳板机通过带外连上去 (等同于现场接了一个显示屏 + 键盘一样) 错误为
errorL file `/grub2/i386-pc/normal.mod&amp;#39; not found. Entering rescue mode... grub rescue&amp;gt; 这个物理机是 grub2，这个错误和类似的/grub/i386-pc/normal.mod本质上都是文件丢失，但是也分情况，网上的一些恢复步骤都是在丢失部分文件的情况下恢复的 查看分区
grub rescue&amp;gt;ls (hd0) (hd0,msdos2) (hd0,msdos1) grub rescue&amp;gt;ls (hd0,msdos1)/ ./ ../ grub rescue&amp;gt;ls (hd0,msdos2)/ error: unknown filesystem 这里是等同于你实际的分区，我们这基本是一个 / boot 和一个根，看到(hd0,msdos1)是 / boot 分区，文件是完全丢失的，(hd0,msdos2)/报错未知文件系统是因为这个是 lvm，正常乐观下来讲只是丢失部分文件的话，可以参考下面步骤去恢复
https://www.youtube.com/watch?v=RqRm1bEXO9M https://blog.csdn.net/qq_20545159/article/details/50810089 救援 livecd 进入 rescue 救援 这里我是完全丢失，我利用带外远程挂载了一个 centos7.6 的 iso(最好和目标系统版本一样)，重启物理机进入 cdrom，选择Troubleshooting –&amp;gt; Rescue a CentOS Linux system
下面我引用下别人的图，如果图被拦截了请看文字吧
选择 1 后然后回车会得到一个交互式 shell，查看下分区信息</description></item><item><title>CPU 架构引起的问题</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0%E4%B8%8E%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86%E6%A1%88%E4%BE%8B/CPU-%E6%9E%B6%E6%9E%84%E5%BC%95%E8%B5%B7%E7%9A%84%E9%97%AE%E9%A2%98/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0%E4%B8%8E%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86%E6%A1%88%E4%BE%8B/CPU-%E6%9E%B6%E6%9E%84%E5%BC%95%E8%B5%B7%E7%9A%84%E9%97%AE%E9%A2%98/</guid><description>概述 参考：
利用 qemu user 模式和 binfmt_misc 构建其他架构的 docker 镜像 https://zhangguanzhang.github.io/2023/03/07/qemu-binfmt_misc/
qemu-user-static 下 cgo go build 卡住的一次解决 https://zhangguanzhang.github.io/2023/08/08/qemu-cgo-build-hang</description></item><item><title>ecs 中毒的一次处理过程</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0%E4%B8%8E%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86%E6%A1%88%E4%BE%8B/ecs-%E4%B8%AD%E6%AF%92%E7%9A%84%E4%B8%80%E6%AC%A1%E5%A4%84%E7%90%86%E8%BF%87%E7%A8%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0%E4%B8%8E%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86%E6%A1%88%E4%BE%8B/ecs-%E4%B8%AD%E6%AF%92%E7%9A%84%E4%B8%80%E6%AC%A1%E5%A4%84%E7%90%86%E8%BF%87%E7%A8%8B/</guid><description>概述 参考：
一次客户 ecs 中毒的处理过程，可以给读者参考下中毒的处理过程。
由来 客户机器中毒了，pm 找我来让处理下，记录下，给其他人做个处理过程的参考。
处理过程 机器是 centos ，先利用 rpm -V &amp;lt;pkg_name&amp;gt; 确认基础的排查命令没被修改过：
$ rpm -qf `which ps` procps-ng-3.3.10-23.el7.x86_64 $ rpm -V procps-ng $ rpm -qf `which top` procps-ng-3.3.10-23.el7.x86_64 top 看到异常 cpu 的进程占用 cpu 很高：
$ top top - 19:44:29 up 34 days, 5:08, 4 users, load average: 612.03, 617.15, 482.75 Tasks: 2014 total, 66 running, 1946 sleeping, 0 stopped, 2 zombie %Cpu(s): 96.6 us, 3.1 sy, 0.</description></item><item><title>inode 已满解决方法</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0%E4%B8%8E%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86%E6%A1%88%E4%BE%8B/inode-%E5%B7%B2%E6%BB%A1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0%E4%B8%8E%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86%E6%A1%88%E4%BE%8B/inode-%E5%B7%B2%E6%BB%A1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</guid><description>概述 参考：
问题描述 在 Linux 系统的云服务器 ECS 实例内创建文件时，出现类似如下空间不足的提示。
No space left on device … 问题原因 导致该问题的可能原因如下所示：
磁盘分区空间使用率达到百分之百。 磁盘分区 inode 使用率达到百分之百。 存在僵尸文件。 挂载点覆盖。 解决方案 阿里云提醒您：
要解决该问题，请根据不同的问题原因，通过以下方式进行处理：
分区容量满 inode 容量满 修改 inode 数量 僵尸文件分析删除 挂载点覆盖 分区容量满的处理 登录服务器，使用df -h命令查看磁盘使用率，其中的Mounted on指挂载的目录。 进入根目录，执行 du -sh * 指令，逐级查看哪个目录占用磁盘空间较大，进入相应的目录，直到找到最精确的文件或目录。 最后，结合业务情况等判断对相关文件或目录进行删除，或者购买更大的数据盘分担处理。 inode 容量满的处理 通过如下操作，解决 inode 容量满的问题。
查询 inode 使用情况
Linux 的 inode 节点中，记录了文件的类型、大小、权限、所有者、文件连接的数目、创建时间与更新时间等重要的信息，还有一个比较重要的内容就是指向数据块的指针。一般情况不需要特殊配置，如果存放文件很多，则需要配置。有时磁盘空间有剩余但是不能存放文件，可能是由于 inode 耗尽所致。
执行df -i命令，可以查询 inode 的使用情况。 如果 inode 使用率达到或者接近 100%，可以通过以下两种方式进行处理： 清除 inode 占用高的文件或者目录。 修改 inode 数量。 清除 inode 占用高的文件或者目录</description></item><item><title>opensuse的一次救援</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0%E4%B8%8E%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86%E6%A1%88%E4%BE%8B/opensuse%E7%9A%84%E4%B8%80%E6%AC%A1%E6%95%91%E6%8F%B4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0%E4%B8%8E%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86%E6%A1%88%E4%BE%8B/opensuse%E7%9A%84%E4%B8%80%E6%AC%A1%E6%95%91%E6%8F%B4/</guid><description>概述 参考：
昨晚吃完晚饭回到办公室，右边同事在控制台看着一个suse起不来一直启动的时候卡在suse的蜥蜴logo背景图那。见我来了叫我看下，他们已经尝试过恢复快照，但是还不行，应该是很久之前损坏的，只不过因为没重启没发现，我叫他重启下看看卡在哪，重启后进入内核后显示背景图那按下esc然后看卡在/sysroot挂载那。目测分区损坏了，经历了ubuntu的安装iso的rescue mode就是渣渣后，我还是信任centos的iso。
处理 先备份和准备工作 关闭虚机，后台拷贝下系统盘的卷先备份下。然后给虚机的IDE光驱挂载了个centos 7.5 DVD的iso，修改虚机启动顺序到ISO，进 Troubleshooting –&amp;gt; Rescue a CentOS Linux system
一般损坏的都不建议选1，因为挂载不上，所以是选3手动处理
Device or resource busy 1) Continue 2) Read-only mount 3) Skip to shell 4) Quit (Reboot) Please make a selection from the above: 3 最开始我lsblk和看了下硬盘的分区表，最后 vgchange -a y 激活lvm后 xfs_repair /dev/mapper/suse-lv_root 的时候提示该设备繁忙，遂查看了下
sh-4.2# lsof /dev/mapper/suse-lv_root sh-4.2# ps aux | less lsof和fuser都是返回空的，最后就 ps aux 一个个看，发现了个mount进程一直hung在那
sh-4.2# ps aux | grep moun[t] root 6126 0.0 0.</description></item><item><title>从PTTYPE="dos"到TYPE="LVM2_member"的救援</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0%E4%B8%8E%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86%E6%A1%88%E4%BE%8B/%E4%BB%8EPTTYPEdos%E5%88%B0TYPELVM2_member%E7%9A%84%E6%95%91%E6%8F%B4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0%E4%B8%8E%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86%E6%A1%88%E4%BE%8B/%E4%BB%8EPTTYPEdos%E5%88%B0TYPELVM2_member%E7%9A%84%E6%95%91%E6%8F%B4/</guid><description>概述 参考：
同事叫我救援一台云主机，虽说是虚拟机，但是类比到硬件服务器还是一样的操作，这里记录下给后来者查阅
故障信息 控制台进去看到 centos7 的背景虚化的数字 7 + 转圈，重启下看下完整的错误，重启选了内核然后进到图形界面的时候按下 ecs 取消，观察终端
[ OK ] Started Show Plymouth Boot Screen. [ OK ] Reached target Paths. [ OK ] Reached target Basic System. [ 124.522110] dracut-initqueue[240]: Warning: dracut-initqueue timeout - starting timeout scripts [ 125.034736] dracut-initqueue[240]: Warning: dracut-initqueue timeout - starting timeout scripts [ 125.542788] dracut-initqueue[240]: Warning: dracut-initqueue timeout - starting timeout scripts [ 126.522110] dracut-initqueue[240]: Warning: dracut-initqueue timeout - starting timeout scripts [ 127.</description></item><item><title>故障处理案例</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0%E4%B8%8E%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86%E6%A1%88%E4%BE%8B/%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86%E6%A1%88%E4%BE%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0%E4%B8%8E%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86%E6%A1%88%E4%BE%8B/%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86%E6%A1%88%E4%BE%8B/</guid><description>概述 参考：
公众号，0.2 秒复制了 100G 的文件？ 主要描述了文件系统与磁盘空间管理问题，导致一个文件占据了跳跃性的空间，让文件变成虚假的无限大。
Welcome to emergency 系统可以启动，直接进入 emergency 模式，输入密码后按 Ctrl+D 可以进入系统，多半是挂载问题，除了检查 /etc/fstab 的挂载外，还需要看如下几个目录有没有关于文件系统的模块参数：
/etc/modprobe.d/*.conf /run/modprobe.d/*.conf /usr/lib/modprobe.d/*.conf 找到被删除但是还被占用的文件 日常运维过程中，我们经常需要处理磁盘空间问题，当接到告警后，第一时间会去找那些大文件，一般比如 Centos，可能大文件就是 /var/log/messages。但有的时候，会出现怎么也查不到大文件的情况，通过 du 查找的时候，统计出来的大小，跟 df 显示的占用空间对应不上。如果通过 df -i 查看 inode 没有满的话，那么极有可能，是有大文件被直接 rm 了，但是仍然有进程打开了这个文件。
这种情况，由于进程没有退出，因此文件占用的空间并不会释放；直到进程退出，磁盘空间才会真正释放。
如何找到是哪个进程打开了该文件 Linux 上，由于进程仍然存活，因此可以通过查看所有进程打开的 fd，如果该文件已经被删除，则查看时，会显示(deleted)。
示例如下：
$ sudo find /proc/*/fd -ls | grep &amp;#39;(deleted)&amp;#39; 388609 0 lrwx------ 1 zerotier-one zerotier-one 64 Aug 21 00:19 /proc/29400/fd/4 -&amp;gt; /tmp/ibpX85Vd\ (deleted) 388610 0 lrwx------ 1 zerotier-one zerotier-one 64 Aug 21 00:19 /proc/29400/fd/5 -&amp;gt; /tmp/ibCwAgAj\ (deleted) 388611 0 lrwx------ 1 zerotier-one zerotier-one 64 Aug 21 00:19 /proc/29400/fd/6 -&amp;gt; /tmp/ibRZ5rep\ (deleted) 388612 0 lrwx------ 1 zerotier-one zerotier-one 64 Aug 21 00:19 /proc/29400/fd/7 -&amp;gt; /tmp/ibBuNEzA\ (deleted) 388616 0 lrwx------ 1 zerotier-one zerotier-one 64 Aug 21 00:19 /proc/29400/fd/11 -&amp;gt; /tmp/ibG68kpG\ (deleted) 如何避免这种情况</description></item><item><title>查找隐藏进程(设备中病毒)</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0%E4%B8%8E%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86%E6%A1%88%E4%BE%8B/%E6%9F%A5%E6%89%BE%E9%9A%90%E8%97%8F%E8%BF%9B%E7%A8%8B%E8%AE%BE%E5%A4%87%E4%B8%AD%E7%97%85%E6%AF%92/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0%E4%B8%8E%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86%E6%A1%88%E4%BE%8B/%E6%9F%A5%E6%89%BE%E9%9A%90%E8%97%8F%E8%BF%9B%E7%A8%8B%E8%AE%BE%E5%A4%87%E4%B8%AD%E7%97%85%E6%AF%92/</guid><description>上个星期，群里出现一个神秘的案例，他的服务器 CPU 使用率飙的老高，但是无论使用 top 命令，还是 pidstate 等其他命令都查不出是哪个进程占用的，感觉这个进程「神秘消失」了一样。
奈何，小林功力不够，我对自己认知也很明确，我承认案例我破不了。不过没关系，好在我朋友多，立马@出了轩辕，轩辕（公众号：编程技术宇宙）是专门搞网络安全的，果然他一进场，就在偷笑，因为我给他送素材来了。。。
来，接下来我们就把这个「病毒式」的进程给扒出来。
CPU 起飞了 服务器的 CPU 一直处于高占用状态，但用top、ps等命令却一直找不到是哪个进程在占用，怀疑中了挖矿病毒，急的团团转。 根据经验，我赶紧让他看一下当前服务器的网络连接，看看有没有可疑连接，果然发现了有点东西：
上Shodan查一下这 IP 地址：
反向查找，发现有诸多域名曾经解析到这个 IP 地址：
这是一个位于德国的 IP 地址，开放了4444,5555,7777等数个特殊的服务端口：
其中这位朋友服务器上发现的连接到的是 7777 端口，钟馗之眼显示，这是一个 HTTP 服务的端口，直接访问返回的信息如下：
mining pool!，服务器正在挖矿实锤了！
但神奇的是，这个进程像是隐身了一般，找不到存在的任何痕迹。
进程如何隐藏 现在说回到本文的正题：Linux 操作系统上，进程要隐藏起来，有哪些招数？
要回答这个问题，先来知道 ps、top 等命令枚举系统的进程列表的原理。
Linux 的设计哲学是：一切皆文件！
进程也不例外， Linux 系统中有一个特殊的目录：/proc/，这个目录下的内容，不是硬盘上的文件系统，而是操作系统内核暴露出的内核中进程、线程相关的数据接口，也就是procfs，里面记录了系统上正在运行的进程和线程信息，来查看一下：
这些以数字命名的目录，就是一个进程的 PID，里面记录了该进程的详细信息。
而 ps、top 等命令的工作原理，实质上就是遍历这个目录。
知道了原理，想实现隐藏就有以下几个思路：
命令替换 直接替换系统中的 ps、top 命令工具。可以从 GitHub 上下载它们的源码，加入对应的过滤逻辑，在遍历进程的时候，剔除挖矿进程，实现隐藏的目的。
模块注入 编写一个动态链接库 so 文件，在 so 中，HOOK 遍历相关的函数（readdir/readdir64），遍历的时候，过滤挖矿进程。
通过修改LD_PRELOAD环境变量或/etc/ld.so.preload 文件，配置动态链接库，实现将其注入到目标进程中。
内核级隐藏 模块注入的方式是在应用层执行函数 HOOK，隐藏挖矿进程，更进一步，可以通过加载驱动程序的方式在内核空间 HOOK 相应的系统调用来实现隐藏。不过这对攻击者的技术要求也更高，遇到这样的病毒清理起来挑战也更大了。
揪出挖矿进程 通过上面的进程隐藏原理看得住来，都是想尽办法隐藏/proc 目录下的内容，类似于“障眼法”，所以包含ps、top、ls等等在内的命令，都没办法看到挖矿进程的存在。</description></item><item><title>系统 UDP 丢包问题分析思路</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0%E4%B8%8E%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86%E6%A1%88%E4%BE%8B/%E7%B3%BB%E7%BB%9F-UDP-%E4%B8%A2%E5%8C%85%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90%E6%80%9D%E8%B7%AF/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0%E4%B8%8E%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86%E6%A1%88%E4%BE%8B/%E7%B3%BB%E7%BB%9F-UDP-%E4%B8%A2%E5%8C%85%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90%E6%80%9D%E8%B7%AF/</guid><description>最近工作中遇到某个服务器应用程序 UDP 丢包，在排查过程中查阅了很多资料，总结出来这篇文章，供更多人参考。
在开始之前，我们先用一张图解释 linux 系统接收网络报文的过程。
首先网络报文通过物理网线发送到网卡 网络驱动程序会把网络中的报文读出来放到 ring buffer 中，这个过程使用 DMA（Direct Memory Access），不需要 CPU 参与 内核从 ring buffer 中读取报文进行处理，执行 IP 和 TCP/UDP 层的逻辑，最后把报文放到应用程序的 socket buffer 中 应用程序从 socket buffer 中读取报文进行处理 在接收 UDP 报文的过程中，图中任何一个过程都可能会主动或者被动地把报文丢弃，因此丢包可能发生在网卡和驱动，也可能发生在系统和应用。
之所以没有分析发送数据流程，一是因为发送流程和接收类似，只是方向相反；另外发送流程报文丢失的概率比接收小，只有在应用程序发送的报文速率大于内核和网卡处理速率时才会发生。
本篇文章假定机器只有一个名字为 eth0 的 interface，如果有多个 interface 或者 interface 的名字不是 eth0，请按照实际情况进行分析。NOTE：文中出现的 RX（receive） 表示接收报文，TX（transmit） 表示发送报文。
确认有 UDP 丢包发生 要查看网卡是否有丢包，可以使用 ethtool -S eth0 查看，在输出中查找 bad 或者 drop 对应的字段是否有数据，在正常情况下，这些字段对应的数字应该都是 0。如果看到对应的数字在不断增长，就说明网卡有丢包。另外一个查看网卡丢包数据的命令是 ifconfig，它的输出中会有 RX(receive 接收报文)和 TX（transmit 发送报文）的统计数据：
~# ifconfig eth0 ... RX packets 3553389376 bytes 2599862532475 (2.</description></item></channel></rss>