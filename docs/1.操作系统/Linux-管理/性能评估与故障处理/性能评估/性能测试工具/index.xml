<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>性能测试工具 on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0%E4%B8%8E%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/</link><description>Recent content in 性能测试工具 on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0%E4%B8%8E%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/index.xml" rel="self" type="application/rss+xml"/><item><title>iperf 网络性能测量和调整工具</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0%E4%B8%8E%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/iperf-%E7%BD%91%E7%BB%9C%E6%80%A7%E8%83%BD%E6%B5%8B%E9%87%8F%E5%92%8C%E8%B0%83%E6%95%B4%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0%E4%B8%8E%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/iperf-%E7%BD%91%E7%BB%9C%E6%80%A7%E8%83%BD%E6%B5%8B%E9%87%8F%E5%92%8C%E8%B0%83%E6%95%B4%E5%B7%A5%E5%85%B7/</guid><description>概述 参考：
官网 在 server 端监听某个端口，然后 client 用同样的 iperf 访问服务端，来进行性能测试
所以该工具需要在两台设备之间一同使用，其中一台作为服务端，另外一台作为客户端，两端互相通信，才可测试网络性能。而命令行的 OPTIONS 也是分为全局、服务端特定、客户端特定 这三类
Syntax(语法) iperf3 &amp;lt;-s | -c HOST&amp;gt; [OPTIONS]
通用选项
-p, &amp;ndash;port # 指定服务端监听的端口或者客户端要连接的端口 -f, &amp;ndash;format [kmgKMG] # 指定输出格式。可以是：Kbits, Mbits, KBytes, MBytes -i, &amp;ndash;interval # 指定每次带宽报告间隔的秒数。i.e.每隔几秒输出一次数据。默认每 1 秒报告一次 -F, &amp;ndash;file name # xmit/recv the specified file -A, &amp;ndash;affinity n/n,m # set CPU affinity -B, &amp;ndash;bind &amp;lt;host&amp;gt; # bind to a specific interface -V, &amp;ndash;verbose # more detailed output -J, &amp;ndash;json # output in JSON format &amp;ndash;logfile f # send output to a log file &amp;ndash;forceflush # force flushing output at every interval -d, &amp;ndash;debug # emit debugging output 服务端的特定选项</description></item><item><title>ApacheBench</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0%E4%B8%8E%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/ApacheBench/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0%E4%B8%8E%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/ApacheBench/</guid><description>概述 Apache HTTP服务器基准测试工具
ApacheBench 介绍 ApacheBench，简称 ab。ab 是用于对 Apache 超文本传输协议（HTTP）服务器进行基准测试的工具。它旨在使您对当前的 Apache 安装方式有一个印象。这尤其向您显示 Apache 安装每秒能够处理多少个请求。
ApacheBench 的安装与使用 ab 工具包含在 httpd-tools 软件包中，直接安装 httpd-tools 即可
ApacheBench 测试结果参数解析</description></item><item><title>Httperf</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0%E4%B8%8E%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/Httperf/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0%E4%B8%8E%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/Httperf/</guid><description>概述 Web 压力测试 - Httperf
Httperf 比 ab 更强大，能测试出 web 服务能承载的最大服务量及发现潜在问题；比如：内存使用、稳定性。最大优势：可以指定规律进行压力测试，模拟真实环境。
下载：http://code.google.com/p/httperf/downloads/list
[root@localhost ~]# tar zxvf httperf-0.9.0.tar.gz [root@localhost ~]# cd httperf-0.9.0 [root@localhost httperf-0.9.0]# ./configure [root@localhost httperf-0.9.0]# make &amp;amp;&amp;amp; make install [root@localhost ~]# httperf &amp;ndash;hog &amp;ndash;server=192.168.0.202 &amp;ndash;uri=/index.html &amp;ndash;num-conns=10000 &amp;ndash;wsess=10,10,0.1 参数说明：
&amp;ndash;hog：让 httperf 尽可能多产生连接，httperf 会根据硬件配置，有规律的产生访问连接 &amp;ndash;num-conns：连接数量，总发起 10000 请求 &amp;ndash;wsess：用户打开网页时间规律模拟，第一个 10 表示产生 10 个会话连接，第二个 10 表示每个会话连接进行 10 次请求，0.1 表示每个会话连接请求之间的间隔时间 / s</description></item><item><title>K6</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0%E4%B8%8E%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/K6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0%E4%B8%8E%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/K6/</guid><description>概述 参考：
GitHub 项目，grafana/k6 官网 公众号，MoeLove-Grafana k6 的上手实践 使用 Go 和 JavaScript 语言实现的现代负载测试工具。
背景 2016 年 8 月，k6 在 GitHub 上发布了第一个版本，至此，一个出色的开源负载压测工具进入了人们的视野。
2021 年的 6 月，对于 Grafana 和 k6 来讲是个大日子，Grafana Labs 收购了 k6 。
而事实上， Grafana 与 k6 的缘分还要追溯到更早的 2 年前。
2019 年，在进行 Grafana 6.0 的短期令牌刷新行为的压测时，Grafana Labs 进行了一系列的技术选型。
由于 Grafana Labs 的大部分后端软件是使用 Go 来实现的，恰巧 k6 满足 OSS 和 Go 需求，并且负载测试是使用 JS 编写（Grafana 前端框架及 UI 都在使用）。这使得 k6 自 Grafana 6.0 版本开始，不断地为 Grafana 开发者及测试者完成追踪 bug 的使命。</description></item><item><title>pktgen 内核自带的高性能网络测试工具</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0%E4%B8%8E%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/pktgen-%E5%86%85%E6%A0%B8%E8%87%AA%E5%B8%A6%E7%9A%84%E9%AB%98%E6%80%A7%E8%83%BD%E7%BD%91%E7%BB%9C%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0%E4%B8%8E%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/pktgen-%E5%86%85%E6%A0%B8%E8%87%AA%E5%B8%A6%E7%9A%84%E9%AB%98%E6%80%A7%E8%83%BD%E7%BD%91%E7%BB%9C%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/</guid><description>pktgen 内核自带的高性能网络测试工具 modprobe pktgen cat &amp;gt; /usr/local/bin/pgset &amp;lt;&amp;lt;EOF local result echo $1 &amp;gt; $PGDEV result=`cat $PGDEV | fgrep &amp;#34;Result: OK:&amp;#34;` if [ &amp;#34;$result&amp;#34; = &amp;#34;&amp;#34; ]; then cat $PGDEV | fgrep Result: fi EOF chmod 755 /usr/local/bin/pgset # 为0号线程绑定 eth0 网卡 export PGDEV=/proc/net/pktgen/kpktgend_0 pgset &amp;#34;rem_device_all&amp;#34; # 清空网卡绑定 pgset &amp;#34;add_device eth0&amp;#34; # 添加 eth0 网卡 # 配置 eth0 网卡的测试选项 export PGDEV=/proc/net/pktgen/eth0 pgset &amp;#34;count 1000000&amp;#34; # 总发包数量 pgset &amp;#34;delay 5000&amp;#34; # 不同包之间的发送延迟 (单位纳秒) pgset &amp;#34;clone_skb 0&amp;#34; # SKB 包复制 pgset &amp;#34;pkt_size 64&amp;#34; # 网络包大小 pgset &amp;#34;dst 192.</description></item><item><title>stress-ng 系统压力测试工具</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0%E4%B8%8E%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/stress-ng-%E7%B3%BB%E7%BB%9F%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0%E4%B8%8E%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/stress-ng-%E7%B3%BB%E7%BB%9F%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/</guid><description>概述 Syntax(语法) OPTIONS
-c, &amp;ndash;cpu # 指定要测试的 CPU 数量，测几个就起几个进程。 -i , &amp;ndash;io # 启动 N 个工作程序，连续调用 sync(2) 将缓冲区高速缓存提交到磁盘。 可以与 &amp;ndash;hdd 选项结合使用。 -d &amp;lt;&amp;gt;N, &amp;ndash;hdd # 开始 N 个工作人员不断写入，读取和删除临时文件。 默认模式是对顺序写入和读取进行压力测试。 如果启用了&amp;ndash;ggressive 选项，而没有任何&amp;ndash;hdd-opts 选项，则 hdd Stressor 将一个接一个地处理所有&amp;ndash;hdd-opt 选项，以涵盖一系列 I / O 选项。 &amp;ndash;timeout # 指定程序运行时间 EXAMPLE
stress-ng -c 1 &amp;ndash;timeout 600 # 模拟 CPU 使用，导致 us 升高 stress-ng -i 1 &amp;ndash;hdd 1 &amp;ndash;timeout 600 # 模拟磁盘 io，会导致 wa 升高</description></item><item><title>sysbench</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0%E4%B8%8E%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/sysbench/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0%E4%B8%8E%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/sysbench/</guid><description>概述 参考
Github,akopytov/sysbench 脚本数据库和系统性能基准
Syntax(语法) sysbench [OPTIONS] [TestName] [COMMAND]
TestName
**fileio **# 文件 I/O 测试 cpu # CPU 性能测试 memory # 内存功能速度测试 threads # 线程子系统性能测试 mutex # 互斥体性能测试 General OPTIONS &amp;ndash;threads &amp;lt;INT&amp;gt; # 要创建的工作线程总数 &amp;ndash;time &amp;lt;DURATION&amp;gt; # 运行持续时间。单位：秒。默认值：0。0 表示没有限制。 Example 以 10 个线程运行 5 分钟的线程子系统性能测试。常用来模拟多线程切换的问题 sysbench &amp;ndash;threads=10 &amp;ndash;time=300 threads run</description></item><item><title>wrk</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0%E4%B8%8E%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/wrk/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0%E4%B8%8E%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/wrk/</guid><description>概述 参考：
GitHub 项目,wrk wrk 是一种现代 HTTP 基准测试小型工具，当在单个多核 CPU 上运行时，能够产生大量负载。它结合了多线程设计和可扩展的事件通知系统，例如 epoll 和 kqueue。
可选的 LuaJIT 脚本可以执行 HTTP 请求生成，响应处理和自定义报告。详细信息可在 SCRIPTING 中找到，几个示例位于 scripts /中
Wrk2 参考
GitHub 项目,wrk2 https://www.wangbo.im/posts/usage-of-benchmarking-tool-wrk-and-wrk2/ Wrk 的安装 安装 wrk 需要从项目上 clone 项目然后编译获取二进制文件
yum groupinstall &amp;lsquo;Development Tools&amp;rsquo; -y yum install openssl-devel git -y git clone https://github.com/wg/wrk cd wrk make cp wrk /usr/local/bin clone 和编译时间较长，这里给一个编译好的文件
Wrk 命令行工具使用方法 wrk [OPTIONS] URL OPTIONS
-c,&amp;ndash;connections NUM # 指定总的 http 并发数。默认 10 个并发连接 -d,&amp;ndash;duration NUM # 指定压测的持续时间。默认 10s -H,&amp;ndash;header STRING # 使用指定的头信息作为请求 header -t,&amp;ndash;threads NUM # 指定总线程数。默认 2 个线程 &amp;ndash;latency # 输出延迟统计情况 EXAMPLE</description></item></channel></rss>