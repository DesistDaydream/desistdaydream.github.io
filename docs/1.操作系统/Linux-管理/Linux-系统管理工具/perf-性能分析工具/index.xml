<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>perf 性能分析工具 on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/Linux-%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/perf-%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/</link><description>Recent content in perf 性能分析工具 on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/Linux-%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/perf-%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/index.xml" rel="self" type="application/rss+xml"/><item><title>perf 性能分析工具</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/Linux-%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/perf-%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/perf-%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/Linux-%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/perf-%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/perf-%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/</guid><description>概述 参考：
GitHub 项目，torvalds/linux - /tools/perf Kernel Wiki, perf perf 事件列表中的内核 pmu 事件是什么 https://unix.stackexchange.com/questions/326621/what-are-kernel-pmu-event-s-in-perf-events-list https://qastack.cn/unix/326621/what-are-kernel-pmu-event-s-in-perf-events-list brendangregg 博客，perf Linux Performance Events(Linux 性能事件，简称 LPE) 是用来分析 Linux Kernel 性能的工具，通常称为 perf。perf 随 Kernel 2.6+ 一同发布。通过它，应用程序可以利用 PMU，tracepoint 和内核中的特殊计数器来进行性能统计。它不但可以分析指定应用程序的性能问题 (per thread)，也可以用来分析内核的性能问题，当然也可以同时分析应用代码和内核，从而全面理解应用程序中的性能瓶颈。
perf 主要是通过 Tracing(追踪) 的方式来实现性能数据的采集。
perf 和其他调试工具一样，需要 symbol(符号信息)。它们用于将内存地址转换为函数和变量名称，以便我们人类可以读取它们。如果没有符号，您将看到代表所分析的内存地址的十六进制数字。
[!Note] perf 命令甚至有时候可以跟 strace 工具 实现类似的效果，比如 perf stat -e syscalls:* 统计系统调用的计数，就很像 strace -c XX
Events 使用 perf list 命令可以列出可以分析的所有事件。
TODO: perf 可用的 Events 列表是从如何获取到的？
perf_event_open() 系统调用？ /sys/kernel/debug/tracing/events/ 目录？是特定于 tracepoint 类型事件的？ 由于 perf 本身就是与 Linux 内核强耦合的工具，所以获取 Events 应该也是通过某种方式动态获取的？ perf_event_open 系统调用用以设置性能监控，其中 perf_event_attr 参数（源码: include/uapi/linux/perf_event.</description></item><item><title>trace 子命令</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/Linux-%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/perf-%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/trace-%E5%AD%90%E5%91%BD%E4%BB%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/Linux-%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/perf-%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/trace-%E5%AD%90%E5%91%BD%E4%BB%A4/</guid><description>概述 参考：
Manual(手册)，perf-trace(1) perf trace 是类似 strace 的追踪工具，可以追踪系统调用。
Syntax(语法) perf trace [OPTIONS]
OPTIONS
-e, &amp;ndash;expr, &amp;ndash;event &amp;lt;SYSCALL&amp;gt; # 显示指定的系统调用 -s # 统计每一次系统调用的执行时间、次数、错误次数 -F,&amp;ndash;pf={all | min | maj} #</description></item></channel></rss>