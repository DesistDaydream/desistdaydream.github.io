<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦的站点 – perf 性能分析工具</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/Linux-%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/perf-%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/</link><description>Recent content in perf 性能分析工具 on 断念梦的站点</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/Linux-%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/perf-%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: perf 性能分析工具</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/Linux-%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/perf-%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/perf-%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/Linux-%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/perf-%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/perf-%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/torvalds/linux/tree/master/tools/perf">GitHub 项目，torvalds/linux - /tools/perf&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://perf.wiki.kernel.org/index.php/Main_Page">Kernel Wiki，perf&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://qastack.cn/unix/326621/what-are-kernel-pmu-event-s-in-perf-events-list">PMU 是什么？&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Linux Performance Events(Linux 性能事件，简称 LPE)&lt;/strong> 是用来分析 Linux 性能的工具，通常称为 &lt;strong>perf&lt;/strong>。perf 随 Kernel 2.6+ 一同发布。通过它，应用程序可以利用 PMU，tracepoint 和内核中的特殊计数器来进行性能统计。它不但可以分析指定应用程序的性能问题 (per thread)，也可以用来分析内核的性能问题，当然也可以同时分析应用代码和内核，从而全面理解应用程序中的性能瓶颈。&lt;/p>
&lt;p>perf 主要是通过 &lt;strong>Tracing(追踪)&lt;/strong> 的方式来实现性能数据的采集。&lt;/p>
&lt;h1 id="perf-安装">perf 安装&lt;a class="td-heading-self-link" href="#perf-%e5%ae%89%e8%a3%85" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;strong>Ubuntu&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo apt install -y linux-tools-generic linux-tools-&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>uname -r&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>注意：linux-tools-generic 会安装 linux-tools-common 包，perf 二进制文件在这个包中。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>CentOS&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>yum install -y perf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="perf-工具使用详解">perf 工具使用详解&lt;a class="td-heading-self-link" href="#perf-%e5%b7%a5%e5%85%b7%e4%bd%bf%e7%94%a8%e8%af%a6%e8%a7%a3" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;strong>perf [OPTIONS] COMMAND [ARGS]&lt;/strong>&lt;/p>
&lt;p>perf 主要由多个子命令来提供常用功能&lt;/p>
&lt;h2 id="record---追踪指定的进程并记录它的-profile-到-perfdata-文件中">record - 追踪指定的进程，并记录它的 profile 到 perf.data 文件中&lt;a class="td-heading-self-link" href="#record---%e8%bf%bd%e8%b8%aa%e6%8c%87%e5%ae%9a%e7%9a%84%e8%bf%9b%e7%a8%8b%e5%b9%b6%e8%ae%b0%e5%bd%95%e5%ae%83%e7%9a%84-profile-%e5%88%b0-perfdata-%e6%96%87%e4%bb%b6%e4%b8%ad" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://man7.org/linux/man-pages/man1/perf-record.1.html">Manual(手册)，perf-record(1)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>record 子命令将会跟踪指定命令或进程，并采集运行期间的 profile，然后默认将这些数据写入到 perf.data 文件中。&lt;strong>profile&lt;/strong> 这个词在这个语境中，可以理解为 &lt;strong>性能分析&lt;/strong>，详见 &lt;a href="https://desistdaydream.github.io/docs/6.%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/Flame%20Graphs(%E7%81%AB%E7%84%B0%E5%9B%BE).md">Flame Graphs(火焰图)&lt;/a>&lt;/p>
&lt;p>&lt;strong>perf record [OPTIONS] [COMMAND]&lt;/strong>&lt;/p>
&lt;p>&lt;strong>COMMAND&lt;/strong> # 可以指定一个命令，以便采集指定命令运行时的性能数据。或者省略 COMMAND，则采集当前系统下的所有进程。&lt;/p>
&lt;p>&lt;strong>OPTIONS&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-a, &amp;ndash;all-cpus&lt;/strong> # 从所有 CPU 采集数据&lt;/li>
&lt;li>&lt;strong>-g&lt;/strong> # 启动调用关系分析&lt;/li>
&lt;li>&lt;strong>-p, &amp;ndash;pid &amp;lt;PID&amp;gt;&lt;/strong> # 指定要采集数据的进程的 PID&lt;/li>
&lt;/ul>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>&lt;strong>perf record -a -g -p 5958 &amp;ndash; sleep 30&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h2 id="report---读取-perfdata-文件中记录的内容并展示">report - 读取 perf.data 文件中记录的内容并展示&lt;a class="td-heading-self-link" href="#report---%e8%af%bb%e5%8f%96-perfdata-%e6%96%87%e4%bb%b6%e4%b8%ad%e8%ae%b0%e5%bd%95%e7%9a%84%e5%86%85%e5%ae%b9%e5%b9%b6%e5%b1%95%e7%a4%ba" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="script---读取-perfdata-文件中记录的内容并展示追踪效果的数据">script - 读取 perf.data 文件中记录的内容，并展示追踪效果的数据&lt;a class="td-heading-self-link" href="#script---%e8%af%bb%e5%8f%96-perfdata-%e6%96%87%e4%bb%b6%e4%b8%ad%e8%ae%b0%e5%bd%95%e7%9a%84%e5%86%85%e5%ae%b9%e5%b9%b6%e5%b1%95%e7%a4%ba%e8%bf%bd%e8%b8%aa%e6%95%88%e6%9e%9c%e7%9a%84%e6%95%b0%e6%8d%ae" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="top---系统分析工具">top - 系统分析工具&lt;a class="td-heading-self-link" href="#top---%e7%b3%bb%e7%bb%9f%e5%88%86%e6%9e%90%e5%b7%a5%e5%85%b7" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>可以实时显示占用 CPU 时钟最多得函数或进程。以 Symbol 为中心，显示指定 Symbol 的相关信息&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>Samples: 2K of event &lt;span style="color:#4e9a06">&amp;#39;cpu-clock:pppH&amp;#39;&lt;/span>, &lt;span style="color:#0000cf;font-weight:bold">4000&lt;/span> Hz, Event count &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>approx.&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>: &lt;span style="color:#0000cf;font-weight:bold">317933941&lt;/span> lost: 0/0 drop: 0/0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Overhead Shared Object Symbol
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>16.96% perf &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>.&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> __symbols__insert
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>7.12% perf &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>.&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> rb_next
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>3.92% &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>kernel&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>k&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> kallsyms_expand_symbol.constprop.1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>第一行：&lt;/p>
&lt;ul>
&lt;li>Samples # 样本数&lt;/li>
&lt;li>event # 事件类型&lt;/li>
&lt;li>event count # 事件总数&lt;/li>
&lt;/ul>
&lt;p>第二行&lt;/p>
&lt;ul>
&lt;li>Overhead # Symbol 的性能事件在所有样本中的百分比&lt;/li>
&lt;li>Shared # Symbol 所在的动态共享对象(Dynamic Shared Object)。如 内核、进程名、动态链接库名、内核模块等等&lt;/li>
&lt;li>Object # 动态共享对象的类型。比如 [.] 表示用户空间的可执行程序、或动态链接库，而 [k] 则表示内核空间&lt;/li>
&lt;li>Symbol # 符号名。即函数名。当函数名未知时，用十六进制的地址来表示。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>perf top [OPTIONS]&lt;/strong>&lt;/p>
&lt;p>OPTIONS&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-g&lt;/strong> # 开启调用关系分析&lt;/li>
&lt;li>&lt;strong>-p &amp;lt;PID&amp;gt;&lt;/strong> # 分析指定进程的事件，PID 可以是使用 逗号 分隔的多个 PID&lt;/li>
&lt;/ul>
&lt;p>EXAMPLE&lt;/p>
&lt;h1 id="生成火焰图">生成火焰图&lt;a class="td-heading-self-link" href="#%e7%94%9f%e6%88%90%e7%81%ab%e7%84%b0%e5%9b%be" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>获取火焰图生成工具&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git clone https://github.com/brendangregg/FlameGraph
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">cd&lt;/span> FlameGraph
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>将 perf record 抓到的记录转换成可读的采样记录&lt;/p>
&lt;p>&lt;code>perf script -i /root/tmp/perf.data&lt;/code>&lt;/p>
&lt;p>合并调用栈信息&lt;/p>
&lt;p>&lt;code>./stackcollapse-perf.pl&lt;/code>&lt;/p>
&lt;p>生成火焰图&lt;/p>
&lt;p>&lt;code>./flamegraph.pl&lt;/code>&lt;/p>
&lt;p>上述命令合并一下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>perf script -i /root/tmp/perf.data &lt;span style="color:#000;font-weight:bold">|&lt;/span> ./stackcollapse-perf.pl --all &lt;span style="color:#000;font-weight:bold">|&lt;/span> ./flamegraph.pl &amp;gt; /root/tmp/flame.svg
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: trace 子命令</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/Linux-%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/perf-%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/trace-%E5%AD%90%E5%91%BD%E4%BB%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E7%AE%A1%E7%90%86/Linux-%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/perf-%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/trace-%E5%AD%90%E5%91%BD%E4%BB%A4/</guid><description>
&lt;h2 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://man7.org/linux/man-pages/man1/perf-trace.1.html">Manual(手册)，perf-trace(1)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>perf trace 是类似 strace 的追踪工具，可以追踪系统调用。&lt;/p>
&lt;h1 id="syntax语法">Syntax(语法)&lt;a class="td-heading-self-link" href="#syntax%e8%af%ad%e6%b3%95" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>perf trace [OPTIONS]&lt;/p>
&lt;p>OPTIONS&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-e, &amp;ndash;expr, &amp;ndash;event &amp;lt;SYSCALL&amp;gt;&lt;/strong> # 显示指定的系统调用&lt;/li>
&lt;li>&lt;strong>-s&lt;/strong> # 统计每一次系统调用的执行时间、次数、错误次数&lt;/li>
&lt;li>&lt;strong>-F,&amp;ndash;pf={all | min | maj}&lt;/strong> #&lt;/li>
&lt;/ul></description></item></channel></rss>