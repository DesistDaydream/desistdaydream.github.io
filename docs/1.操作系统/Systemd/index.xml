<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Systemd on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Systemd/</link><description>Recent content in Systemd on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Systemd/index.xml" rel="self" type="application/rss+xml"/><item><title>Systemd</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Systemd/Systemd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Systemd/Systemd/</guid><description>概述 参考：
GitHub 项目，systemd/systemd 官网 Systemd 中文手册, 金步国 Manual(手册)，systemd System daemon(系统守护进程，简称 systemd) 实质上：启动一个服务，就是启动一个程序，可以给该程序添加一些参数，也可以不添加，该程序的可执行文件一般是放在 /usr/lib/systemd/system/ 目录下的
历史上，Linux 的启动一直采用 init 进程。这种命令 /etc/init.d/apache2 start 或者 service apache2 start，就是用来启动服务。
这种方法有两个缺点。
启动时间长。init 进程是串行启动，只有前一个进程启动完，才会启动下一个进程。 启动脚本复杂。init 进程只是执行启动脚本，不管其他事情。脚本需要自己处理各种情况，这往往使得脚本变得很长。 Systemd 就是为了解决这些问题而诞生的。它的设计目标是，为系统的启动和管理提供一套完整的解决方案。
根据 Linux 惯例，字母 d 是 daemon(守护进程) 的缩写。 Systemd 这个名字的含义，就是它要守护整个系统。
使用了 Systemd，就不需要再用 init 了。Systemd 取代了 initd，成为系统的第一个进程(PID 等于 1)，其他进程都是它的子进程。
Systemd 的优点是功能强大，使用方便，缺点是体系庞大，非常复杂。事实上，现在还有很多人反对使用 Systemd，理由就是它过于复杂，与操作系统的其他部分强耦合，违反&amp;quot;keep simple, keep stupid&amp;quot;的 Unix 哲学。
注意：Systemd 启动的程序无法获取 shell 中的变量，需要通过在 Unit 的配置文件中设置环境变量。
Unit(单元) Systemd 将各种操作系统启动和运行的相关对象，抽象多种类型的 Units(单元)，并且提供了 Units 之间的依赖关系。大多数 Units 是通过 Unit File(单元文件) 创建的，没有 Unit File，也就不会存在所谓的 Units。可以这么说，在特定目录创建了一个符合 Unit File 格式的文件，也就创建了一个 Unit。</description></item><item><title>systemctl 命令行工具</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Systemd/systemctl-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Systemd/systemctl-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</guid><description>概述 参考：
Manual(手册)，systemctl(1) systemctl 命令用来对整个“systemd”的系统和服务进行管理
Syntax(语法) systemctl [OPTIONS] COMMAND [UNIT&amp;hellip;]
UNIT 为 Unit 名称，如果指定了 UNIT 则只对这个 Unit 执行 COMMAND，如果不指定则对全局 Unit 进行操作
OPTIONS -t # 对指定类型的 unit 进行操作 &amp;ndash;all # &amp;ndash;now # 该选项可以与 enable、disable、mask 命令一起使用。 与 enable 命令一起使用时，将同时启动该 Unit 与 disable 和 mask 命令一起使用时，将同时停止该 Unit、 注意：只有当 enable 或 disable 命令成功时，才会执行启动或停止操作。加了该选项就类似于执行了 systemctl enable UNIT &amp;amp;&amp;amp; systemctl start UNIT 命令 COMMAND 分类 Unit Command # 对 unit 执行操作的命令 Unit File Commands # 对 Unit 文件执行操作的命令 Machine Commands Job Commands Snapshot Commands Environment Commands Manager Lifecycle Commands # 生命周期管理器的命令 System Commands 注意：OBJECT 可以使用 PATTERN(模式)来进行匹配，i.</description></item><item><title>Systemd 运行流程</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Systemd/Systemd-%E8%BF%90%E8%A1%8C%E6%B5%81%E7%A8%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Systemd/Systemd-%E8%BF%90%E8%A1%8C%E6%B5%81%E7%A8%8B/</guid><description>概述 参考：
Systemd 运行 这里以 CentOS 7 版本为例
确认系统运行级别 systemd 执行的第一个目标是 /etc/systemd/system/default.target，是一个软链接，该文件决定了老版本称为 “运行级别” 的一种行为
~]# ll /etc/systemd/system/default.target lrwxrwxrwx. 1 root root 37 Oct 10 2020 /etc/systemd/system/default.target -&amp;gt; /lib/systemd/system/multi-user.target 如果想要更改系统启动级别，可以使用 systemctl set-defult XXXXX 命令来修改默认启动级别
启动 multi-user.taget multi-user.target 文件内容如下：
~]# cat /usr/lib/systemd/system/multi-user.target [Unit] Description=Multi-User System Documentation=man:systemd.special(7) Requires=basic.target Conflicts=rescue.service rescue.target After=basic.target rescue.service rescue.target AllowIsolate=yes 从 multi-user.target 中获取到下一步需要启动的服务。
根据 Requires 指令，需要先启动 basic.target 关联的服务 启动 /usr/lib/systemd/system/multi-user.target.wants/ 和 /etc/systemd/system/multi-user.target.wants/ 目录中的服务 ~]# ls /usr/lib/systemd/system/multi-user.target.wants/ dbus.service getty.target plymouth-quit.service plymouth-quit-wait.</description></item></channel></rss>