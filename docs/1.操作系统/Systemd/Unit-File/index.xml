<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Unit File on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Systemd/Unit-File/</link><description>Recent content in Unit File on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Systemd/Unit-File/index.xml" rel="self" type="application/rss+xml"/><item><title>systemd.exec 类指令</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Systemd/Unit-File/systemd.exec-%E7%B1%BB%E6%8C%87%E4%BB%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Systemd/Unit-File/systemd.exec-%E7%B1%BB%E6%8C%87%E4%BB%A4/</guid><description>概述 参考：
Manual(手册)，systemd.exec(5) systemd.exec 类的指令是 Unit File 指令中特殊部分的指令中的通用指令 的一种，可以配置进程执行时的环境，主要用于 service、socket、mount、swap 部分。
systemd.exec 包含很多很多指令，我们可以将其分为如下几大类：
PATHS # 路径相关指令 USER/GROUP IDENTITY # 用户/组标识相关指令 CAPABILITIES SECURITY MANDATORY ACCESS CONTROL PROCESS PROPERTIES SCHEDULING SANDBOXING SYSTEM CALL FILTERING ENVIRONMENT # 环境变量相关指令 LOGGING AND STANDARD INPUT/OUTPUT CREDENTIALS SYSTEM V COMPATIBILITY 比如 环境变量、运行程序的用户和组、运行路径 等等
Paths https://man7.org/linux/man-pages/man5/systemd.exec.5.html#PATHS
Paths(路径) 相关的指令可用于更改文件系统的服务视图。请注意，路径必须是绝对路径，并且不得包含 .. 路径组件。
WorkingDirectory=&amp;lt;STRING&amp;gt; # 采用相对于由 RootDirectory 指令 或特殊值 ~ 指定的服务根目录的目录路径。
User/Group Identity https://man7.org/linux/man-pages/man5/systemd.exec.5.html#USER/GROUP_IDENTITY
User=&amp;lt;STRING&amp;gt; # 指定运行该 Unit 使用的用户。 CAPABILITIES(能力)相关指令 https://man7.org/linux/man-pages/man5/systemd.exec.5.html#CAPABILITIES</description></item><item><title>应用示例</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Systemd/Unit-File/%E5%BA%94%E7%94%A8%E7%A4%BA%E4%BE%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Systemd/Unit-File/%E5%BA%94%E7%94%A8%E7%A4%BA%E4%BE%8B/</guid><description>概述 参考：
Manual(手册)，systemd.unit(5) - EXAMPLE 开机建立远程隧道 [Unit] Description=Remote SSH [Service] ExecStart=/bin/ssh -N -R 20001:localhost:22 root@10.253.26.241 Restart=on-failure RestartSec=10 [Install] WantedBy=network.target 让 Service 使用环境变量 [Unit] Description=UnitDemo [Service] EnvironmentFile=/etc/default/demo ExecStart=/usr/local/bin/unit-demo.sh [Install] WantedBy=multi-user.target ~]# cat /etc/default/demo DEMO=DesistDaydream ~]# cat /usr/local/bin/unit-demo.sh #!/bin/bash # while : do echo $DEMO sleep 5 done 启动 Service 后，可以看到如下输出
Aug 01 14:14:45 centos7-2009 systemd[1]: Started Foo. Aug 01 14:14:45 centos7-2009 unit-demo.sh[8901]: DesistDaydream Aug 01 14:14:50 centos7-2009 unit-demo.sh[8901]: DesistDaydream Aug 01 14:14:55 centos7-2009 unit-demo.</description></item><item><title>mount Unit</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Systemd/Unit-File/mount-Unit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Systemd/Unit-File/mount-Unit/</guid><description>概述 参考：
Manual(手册)，systemd-mount(5) 张馆长博客,fstab 与 systemd.mount 自动挂载的一点研究和见解 所有以 .mount 结尾的 Unit 都是由 Systemd 控制和监督的文件系统挂载功能。该功能可以代替传统的 /etc/fstab 文件。
张馆长文章 x-systemd.automount 属于 systemd.mount，systemd 造了好多轮子，什么 crontab、网络管理器、日志服务 它都想给接替了。fstab 也是这样，systemd 引入了 .mount 单元这么个东西，用于控制文件系统挂载。
defaults下有auto会被开机挂载，noauto一般是和x-systemd.automount配合使用。而x-systemd.automount属于 systemd.mount，systemd 造了好多轮子，什么 crontab、网络管理器、日志服务 它都想给接替了。fstab 也是这样，systemd 引入了 .mount 单元这么个东西，用于控制文件系统挂载。
其实现在很多发行版都开始慢慢抛弃 fstab 了，先看一个 centos6 在 init 下的 fstab
[root@APP-SRV-001 ~]# cat /etc/fstab # # /etc/fstab # Created by anaconda on Mon Nov 26 22:13:02 2018 # # Accessible filesystems, by reference, are maintained under &amp;#39;/dev/disk&amp;#39; # See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info # UUID=19698973-561a-4b5b-aded-f6092bd1f341 / ext4 defaults 1 1 UUID=1f808272-972d-416a-af7f-d3c88b16f434 /boot ext4 defaults 1 2 UUID=C6D4-B036 /boot/efi vfat umask=0077,shortname=winnt 0 0 UUID=7877eff3-a174-4cb5-9024-43be4fab35b2 swap swap defaults 0 0 tmpfs /dev/shm tmpfs defaults 0 0 devpts /dev/pts devpts gid=5,mode=620 0 0 sysfs /sys sysfs defaults 0 0 proc /proc proc defaults 0 0 下面是 centos7 在 systemd 下的 fstab</description></item><item><title>service Unit</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Systemd/Unit-File/service-Unit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Systemd/Unit-File/service-Unit/</guid><description>概述 参考：
Manual(手册)，systemd.service(5) 金步国 systemd.unit 中文手册，systemd.service 中文手册 所有名称以 .service 结尾的 Unit 都是由 Systemd 控制和监督的进程。说白了，就是一个一个的“服务”，这些“服务”就是一个一个的进程。
service Unit 是 systemd 使用数量最多，使用频率最高的单元。
service 指令 ExecStart=STRING # 启动 Unit 所使用的命令。可以使用 ${VarName} 引用环境变量
ExecStartPre=STRING # 启动 Unit 之前执行的命令
ExecStartPost=STRING # 启动 Unit 之后执行的命令
ExecReload=STRING # 重启 Unit 时执行的命令
ExecStop=STRING # 停止 Unit 时执行的命令
ExecStopPost=STRING # 停止 Unit 之后执行的命令
RemainAfterExit= # 即是 Service 启动的所有进程都退出了，该 Service 是否应该被视为活动状态。默认值：no
RestartSec=INT # 自动重启当前服务间隔的时间，单位为秒（也可以用 5min 20s 这种写法）。默认值：100ms
Restart=STRING # 定义何种情况 Systemd 会自动重启当前服务。默认值：no</description></item><item><title>timer Unit</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Systemd/Unit-File/timer-Unit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Systemd/Unit-File/timer-Unit/</guid><description>概述 参考：
Manual(手册),systemd.timer(5) 阮一峰博客,Systemd 定时器教程 所有以 .timer 结尾的 Unit 都是由 Systemd 控制和监督的定时器任务。这是一个替代 Linux 中的 Crontab 程序的功能。通过 timer 单元，可以通过 systemd 来管理所有定时任务。
timer 指令 阮一峰文章 一、定时任务 所谓定时任务，就是未来的某个或多个时点，预定要执行的任务，比如每五分钟收一次邮件、每天半夜两点分析一下日志等等。
Linux 系统通常都使用 cron 设置定时任务，但是 Systemd 也有这个功能，而且优点显著。
自动生成日志，配合 Systemd 的日志工具，很方便除错 可以设置内存和 CPU 的使用额度，比如最多使用 50% 的 CPU 任务可以拆分，依赖其他 Systemd 单元，完成非常复杂的任务 下面，我就来演示一个 Systemd 定时任务：每小时发送一封电子邮件。
二、邮件脚本 先写一个发邮件的脚本mail.sh。
echo &amp;quot;This is the body&amp;quot; | /usr/bin/mail -s &amp;quot;Subject&amp;quot; [someone@example](mailto:someone@example).com 上面代码的someone@example.com，请替换成你的邮箱地址。
然后，执行这个脚本。
bash mail.sh 执行后，你应该就会收到一封邮件，标题为Subject。
如果你的 Linux 系统不能发邮件，建议安装 ssmtp 或者 msmtp。另外，mail命令的用法，可以参考这里。
三、Systemd 单元 学习 Systemd 的第一步，就是搞懂 &amp;ldquo;单元&amp;rdquo;（unit）是什么。</description></item><item><title>Unit File</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Systemd/Unit-File/Unit-File/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Systemd/Unit-File/Unit-File/</guid><description>概述 参考：
Manual(手册)，systemd.unit(5) # Unit 的介绍 Manual(手册)，systemd.syntax(7) # Unit 的配置语法 金步国 systemd.unit 中文手册 Unit File，是 INI 格式的纯文本文件。在这个文件中，由 Directives(指令) 和 Sections(部分) 组成，这里的 Directve 就是 INI 格式中的 键/值对。
Directives(指令) # 指令由 名称 与 值 组成，以 = 分割 Sections(部分) # 与 INI 中的 Sections 概念一样。是一组 Directives 的集合 Unit File 与 INI 格式文件不同的地方是关于注释，Unit File 使用 # 作为注释行的开头。
Unit File 最简单示例 [Unit] # Unit 的描述 Description=Foo [Service] # 如何启动该 Unit ExecStart=/usr/sbin/foo-daemon [Install] # 当 enable 该 Unit 时，应该在 multi-user.</description></item><item><title>Unit File 指令</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Systemd/Unit-File/Unit-File-%E6%8C%87%E4%BB%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Systemd/Unit-File/Unit-File-%E6%8C%87%E4%BB%A4/</guid><description>概述 参考：
Manual(手册)，systemd.unit(5) # Unit 的介绍 Manual(手册)，systemd.directives(7) # Unit File 中全部的指令列表 一个 Unit File 具有多个 Sections(部分)，大体可以分为 2 类
通用 Sections # 与 Unit 类型无关的部分 [Unit] 与 [Install] 特殊 Sections # 特定于 Unit 类型的部分 [Service]、[Socket]、[Timer]、[Mount]、[Path] 等等 除了 Unit 和 Install 以外的其余每个 Sections(部分) 都有其特定的 Directives(指令)，同时，也有一些通用的 Directives(指令) 可以用在多个 Sections(部分) 中。
通用部分的指令 [Unit] 部分的指令 https://man7.org/linux/man-pages/man5/systemd.unit.5.html#[UNIT]_SECTIONOPTIONS
unit 本身的说明，以及与其他相依赖的 daemon 的设置，包括在什么服务之前或之后启动等设置
Description=&amp;lt;STRING&amp;gt; # Unit 描述，用 systemctl list-units 和 systemctl status 查看服务时候的描述内容就是这里定义的
Documentation=&amp;lt;STRING&amp;gt; # 提供该 Unit 可以进一步文件查询的地址或者位置</description></item></channel></rss>