<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Unix-like OS on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Operating-system/Unix-like-OS/</link><description>Recent content in Unix-like OS on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Operating-system/Unix-like-OS/index.xml" rel="self" type="application/rss+xml"/><item><title>Unix-like OS</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Operating-system/Unix-like-OS/Unix-like-OS/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Operating-system/Unix-like-OS/Unix-like-OS/</guid><description>概述 参考：
Wiki, Unix Manual(手册)，os-release DistroWatch(类 UNIX 系统的资讯网站) Unix 是一系列多任务、多用户 Operating system(操作系统) 的统称。
最初打算在贝尔系统内部使用，AT&amp;amp;T 在 1970 年代后期将Unix授权给外部各方，导致来自加利福尼亚大学伯克利分校( BSD )、微软( Xenix )、Sun Microsystems 等供应商的各种学术和商业 Unix 变体( SunOS / Solaris )、HP / HPE ( HP-UX ) 和IBM ( AIX )。在 1990 年代初期，AT&amp;amp;T 将其在 Unix 中的权利出售给了Novell，Novell随后将其 Unix 业务出售给了Santa Cruz Operation (SCO) 于 1995 年。[4] UNIX 商标转让给了The Open Group，这是一个成立于 1996 年的行业联盟，允许将该标志用于符合单一 UNIX 规范(SUS) 的认证操作系统。但是，Novell 继续拥有 Unix 版权，SCO Group, Inc. 诉 Novell, Inc.法庭案件 (2010) 证实了这一点。</description></item><item><title>EulerOS 与 OpenEuler</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Operating-system/Unix-like-OS/EulerOS-%E4%B8%8E-OpenEuler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Operating-system/Unix-like-OS/EulerOS-%E4%B8%8E-OpenEuler/</guid><description>概述 参考：
EulerOS 官网 OpenEuler 官网 OpenEuler 官方文档 华为真是把造词玩明白了，乱七八糟的，本家私有化的产品就一堆重复造轮子的名字，连开源系统都整俩名字
EulerOS 与 OpenEuler
EulerOS # 企业 OpenEuler # 开源 关联文件与配置</description></item><item><title>OpenWrt</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Operating-system/Unix-like-OS/OpenWrt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Operating-system/Unix-like-OS/OpenWrt/</guid><description>概述 参考：
GitHub 项目，openwrt/openwrt 官网 OpenWrt 项目是一个针对嵌入式设备的 Linux 操作系统。与尝试创建单一、静态固件不同，OpenWrt 提供了一个完全可写的文件系统，并配备了软件包管理。这使您摆脱了供应商提供的应用程序选择和配置，并允许您通过使用软件包来定制设备，以适应任何应用程序。对于开发人员来说，OpenWrt 是构建应用程序的框架，无需在其周围构建完整固件；对于用户来说，这意味着完全定制的能力，可以以前所未想象的方式使用设备。
OpenWrt 的包管理器是 OPKG。
据说，爱快(ikuai) 是基于 OpenWrt 的二次封装系统。
ikuai 与 OpenWrt 大部分出现在软路由场景。
iStoreOS 是 koolshare 团队基于OpenWrt定制的软路由系统
关联文件与配置</description></item><item><title>系统启动流程</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Operating-system/Unix-like-OS/%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Operating-system/Unix-like-OS/%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</guid><description>概述 参考：
公众号 - 马哥 Linux 运维，Linux 系统开机加电后发生了什么？ 公众号 - 码农的荒岛求生，操作系统是如何启动起来的？ 公众号 - 码农的荒岛求生，操作系统是怎么一步步启动起来的？ 操作系统被称为 The first programme(第一个程序)，原因很简单，只有当操作系统启动起来后才能运行我们编写的程序，那么操作系统是怎样启动起来的呢？实际上这个过程就像发射火箭一样有趣
操作系统也是普通程序 首先我们必须意识到这样两点：
CPU 执行的是机器指令，编译器将程序翻译后成了机器指令 操作系统本身也是一个程序，这个程序被编译后也会生成一大堆机器指令 现在我们知道了，操作系统本身其实也是一大堆机器指令，既然是机器指令那么它必须得存放在什么地方。
存放在哪里呢？
想想我们编写的程序，编译后生成的是可执行文件，也就是说是以“文件”的形式存放的，并且存放在硬盘上，而操作系统也没什么不同，编译后生成的机器指令同样是以文件的形式存放的，存放在哪里呢？可以存放在任何能存储数据的介质，像 CD、磁盘之类都可以。
我们编写的程序在启动时被加载器——也就是 loader，加载到内存，加载器也是一个程序，这是一个加载其它程序的程序；这么说可能有点拗口，但计算机系统中有大量类似的程序，编译器是一个翻译程序的程序、操作系统是一个运行其它程序的程序、链接器是一个链接程序的程序、解释器是一个执行脚本程序的程序等等。
鸡生蛋蛋生鸡的问题
回到我们的主题，我们写的代码是 loader 加载到内存后运行的，那么操作系统这个程序是也同样的道理，必须得有个什么东西也要把操作系统加载到内存中运行才可以，这个东西不叫 loader，而是叫 boot loader，其本身也是一个程序，它的任务就是加载一个更大的程序，就像这里的操作系统。
此时这里会出现一个鸡生蛋蛋生鸡的，既然我们的程序是被加载器 loader(操作系统的一部分)加载到内存中，而操作系统又是被 boot loader 这个加载程序加载到内存中的，那么又是什么加载器把 boot loader 这个加载程序加载到内存中呢？而又又是什么加载器把上一句中的什么加载器加载内存中呢？而又又又是什么。。？
你会发现这个一个没有出口的无穷递归啊有没有，总得有个什么把前一个程序加载到内存，就好比今天的前一天是昨天、昨天的前一天是前天、前天的前一天是大前天，如果一直这样思考下去那么时间到底在哪里开始的呢？时间到底有没有开始(参考时间简史或相对论)？
时间有没有开始这个问题我不清楚，但操作系统启动的这个问题我知道。
上述关于加载器以及加载加载器等问题全部指向了内存，让我们好好想一想内存有什么特殊性？
内存断电后是无法保存数据 程序员都知道内存只有在加电的情况下才可以保存数据(关于内存的实现原理你可以参考这篇《你管这破玩意叫 CPU？》)，那么很显然，当断电后内存中的内容就丢失了，那么又很显然的，当你在按下计算机开关通电时，内存中的内容是未被初始化的，也就是说内存中的内容是无效的，此时的内存里还是一片荒芜，这里没有任何东西可供 CPU 来执行，这就好比大爆炸之前的宇宙。
但我们的计算机总是能启动起来，CPU 必须得执行“一段什么程序”把第一个 boot loader 加载到内存中，由于此时内存中还什么都没有，那么这段程序一定被保存在了其它地方。
保存在了哪里呢？
没错，这段程序就被保存在了 BIOS 的非易失性存储 ROM 或者 flash 存储中了，这里的代码在即使断电后也会保存下来，加电后 CPU 开始执行这里代码，把 boot loader 加载到内存中，现在你应该明白第一个 boot loader 是怎样被加载到内存的了吧。</description></item><item><title>Alpine</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Operating-system/Unix-like-OS/Alpine/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Operating-system/Unix-like-OS/Alpine/</guid><description>概述 参考：
官网 GitHub 项目,docker-alpine DockerHub https://mp.weixin.qq.com/s/Qt8ASPefVG-9bZe6FO_YQw APK # 包管理器 参考：
官方文档 Alpine Package Keeper(Alpine 包管理圆，简称 APK) 是 Alpine 发行版的包管理工具。
关联文件 /etc/apk/repositories # 包仓库的配置文件
阿里仓库 sed -i &amp;rsquo;s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g&amp;rsquo; /etc/apk/repositories 中科大仓库 sed -i &amp;rsquo;s/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g&amp;rsquo; /etc/apk/repositories /var/cache/apk/ # APK 程序运行时产生的缓存文件保存路径
apk 命令行工具 Syntax(语法) apk [Global OPTIONS] COMMAND [COMMAND OPTIONS]
Global OPTIONS
&amp;ndash;no-cache # 不在 /var/cache/apk/ 目录下生成缓存，并且也不使用该目录下的缓存。 COMMAND
安装和移除包命令
add # 为正在运行的系统添加新包或升级包 del # 从正在运行的系统中删除包 系统维护命令(管理包的元数据)
cache Maintenance operations for locally cached package repository fix # 尝试修复或升级已安装的包 update Update the index of available packages upgrade Upgrade the currently installed packages 查询包的信息</description></item><item><title>Debian 与 Ubuntu</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Operating-system/Unix-like-OS/Debian-%E4%B8%8E-Ubuntu/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Operating-system/Unix-like-OS/Debian-%E4%B8%8E-Ubuntu/</guid><description>概述 参考：
Debian 官方 Manual(手册) groupadd wheel usermod -G wheel desistdaydream tee /etc/sudoers.d/desistdaydream &amp;gt; /dev/null &amp;lt;&amp;lt;EOF %wheel ALL=(ALL) NOPASSWD: ALL EOF ~/.bashrc
if [ &amp;#34;$color_prompt&amp;#34; = yes ]; then # PS1=&amp;#39;${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ &amp;#39; PS1=&amp;#39;${debian_chroot:+($debian_chroot)}[\[\e[34;1m\]\u@\[\e[0m\]\[\e[32;1m\]\H\[\e[0m\] \[\e[31;1m\]\w\[\e[0m\]]\\$ &amp;#39; else # PS1=&amp;#39;${debian_chroot:+($debian_chroot)}\u@\h:\w\$ &amp;#39; PS1=&amp;#39;${debian_chroot:+($debian_chroot)}[\[\e[34;1m\]\u@\[\e[0m\]\[\e[32;1m\]\H\[\e[0m\] \[\e[31;1m\]\w\[\e[0m\]]\\$ &amp;#39; fi Ubuntu 参考：
官网 Wiki, Ubuntu Ubuntu Manual(手册) Ubuntu 是一个基于 Debian 的 Linux 发行版，主要由 FOSS 组成。
Ubuntu 由英国公司 Canonical 和其他开发者社区共同开发的，采用了一种精英治理模式。Canonical为每个Ubuntu版本提供安全更新和支持，从发布日期开始，直到该版本达到其指定的寿命终点(EOL)日期为止。Canonical 通过销售与 Ubuntu 相关的高级服务以及下载 Ubuntu 软件的人的捐赠来获得收入。
其他 Ubuntu Server 安装完成后，通常需要关闭自动更新，详见 Debian 包管理</description></item><item><title>RedHat 与 CentOS</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Operating-system/Unix-like-OS/RedHat-%E4%B8%8E-CentOS/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Operating-system/Unix-like-OS/RedHat-%E4%B8%8E-CentOS/</guid><description>概述 参考：
RedHat 官方文档(在这里点击 Product Documentation) RedHat7 生产环境文档 RedHat8 生产环境文档 CentOS 官方，法律 CentOS: 永远有多远就离它多远 CentOS7 好日子到头了，如何优雅的抛弃 CentOS7？ CentOS 8 退役倒计时，开发者们又吵起来了
CentOS 居然还用 python2
装 Python3 很费劲
装 python-libvirt 很费劲
安装 CentOS 参考：
GitHub 项目，rhinstaller/anaconda(RedHat 相关发行版的操作系统安装器) RedHat 系列的 .iso 安装文件中包含了 Anaconda 安装器。
注意事项 /bin,/dev,/sbin,/etc,/lib,/root, /mnt, lost+found, /proc 这些目录不能创建单独的分区并挂载，只能创建一个 / 以包含这些目录
https://unix.stackexchange.com/questions/121318/this-mount-point-is-invalid-the-root-directory-must-be-on-file-system 代码：https://github.com/rhinstaller/anaconda/blob/rhel6-branch/storage/init.py#L1084 高于 6 版本的分之代码将这个行为封装了 https://github.com/rhinstaller/anaconda/blob/rhel-9/pyanaconda/modules/storage/checker/utils.py#L31 关联文件与配置 /etc/sysconfig/ # Red Hat Linux 发行版的各种系统配置文件
CentOS 史 CentOS 法律 Centos 变为上游项目 Centos 的创始人新建了一个 Rocky 项目，旨在作为 RedHat 下游 Linux 发行版</description></item></channel></rss>