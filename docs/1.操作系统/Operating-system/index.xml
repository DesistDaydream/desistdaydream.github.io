<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦的站点 – Operating system</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Operating-system/</link><description>Recent content in Operating system on 断念梦的站点</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Operating-system/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Operating system</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Operating-system/Operating-system/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Operating-system/Operating-system/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Operating_system">Wiki，Operating_system&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Operating system(操作系统，简称 OS)&lt;/strong> 也是一种软件，用来管理计算机硬件和其他以及自身软件资源的。&lt;/p>
&lt;h1 id="time-sharing-system分时系统">Time Sharing System(分时系统)&lt;a class="td-heading-self-link" href="#time-sharing-system%e5%88%86%e6%97%b6%e7%b3%bb%e7%bb%9f" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="概述-1">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0-1" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>Time Sharing Operating System(分时操作系统，简称 TSOS)&lt;/strong> 的出现是为了弥补批处理方式不能向用户提供交互式快速服务的缺点而发展起来的，并且成为了当今(2021 年) 的主流操作系统。&lt;/p>
&lt;p>在分时系统中，一台计算机主机连接了多个终端，每个终端可由一个用户使用。用户通过终端交互式地向系统发出命令请求，系统接受用户的命令之后，采用时间片轮转方式处理服务请求，并通过交互方式在终端上向用户显示结果。&lt;/p>
&lt;p>这样的系统现在(2021 年)仍然占据着大量的市场，Windos、MacOS，Linux 都属于分时操作系统。分时系统的典型代表就是 UNIX，它对后续操作系统的设计产生了重大影响。&lt;/p>
&lt;p>分时共享是出于这样的认识而开发的：即尽管任何单个用户都会低效地使用计算机，但一大群用户在一起却不会。这是由于交互模式所致: 通常，单个用户会输入大量信息，然后进行长时间的暂停，但是一组用户同时工作将意味着一个用户的暂停将被其他用户的活动所填补。给定最佳的群体规模，整个过程可能非常有效。同样，可以将等待磁盘，磁带或网络输入所花费的一小部分时间授予其他用户。&lt;/p>
&lt;h2 id="分时的概念与实现">分时的概念与实现&lt;a class="td-heading-self-link" href="#%e5%88%86%e6%97%b6%e7%9a%84%e6%a6%82%e5%bf%b5%e4%b8%8e%e5%ae%9e%e7%8e%b0" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>分时操作系统将 CPU 的运行时间划分为若干个小片段，称为 &lt;strong>Time slice(时间片)。Time slice(时间片)&lt;/strong> 是系统规定进程一次使用 CPU 的最长时间(时间片的长短可以因不同系统而异)。&lt;/p>
&lt;p>最开始，时间片通常是 100ms 左右，这是一个实验统计值(不能太大也不能太小)。另外，在硬件方面设立一个中断时钟，它每过时间片便向 CPU 发一次中断信号。于是，假设现在有多个用户程序 A、B、C，CPU 在一个 A 执行完一个时间片后便被中断，然后去执行 B 一个时间片，再执行 C 一个时间片，一次循环，直到 A、B、C 三个程序全部执行完成。操作系统会保护被中断程序的运行现场，转去执行另一个用户程序。&lt;/p>
&lt;p>就这样，操作系统可以把 CPU 按时间片依次分配给系统中的各个用户程序。由于系统中用户程序的数目是有限的，所以，只要时间片大小选取合适，就能给用户以独占系统资源的感觉，可以使每个用户能及时与自己的作业交互，使用户的请求得到及时响应。其实，为了实现人机交互，分时操作系统对早起批处理系统的运行方式进行了两大改进：一是作业直接进内存；二是作业不能长期占用 CPU，而是以时间片为单位交替使用 CPU。&lt;/p>
&lt;p>分时系统的原理，同样也适用于多任务上，当系统中 1 个用户同时运行了多个程序时，也可以使用时间片的概念，让多个程序形成逻辑上的“并行”执行。&lt;/p>
&lt;p>UNIX 就是典型的通用的分时操作系统。&lt;/p>
&lt;h1 id="real-time-system实时操作系统">Real Time System(实时操作系统)&lt;a class="td-heading-self-link" href="#real-time-system%e5%ae%9e%e6%97%b6%e6%93%8d%e4%bd%9c%e7%b3%bb%e7%bb%9f" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="概述-2">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0-2" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;a href="https://en.wikipedia.org/wiki/Real-time_operating_system">Wiki，Real-time OS&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>Real Time Operating System(实时操作系统，简称 RTOS)&lt;/strong> 是一种操作系统 (OS)，旨在为实时应用程序提供服务，这些应用程序通常在没有缓冲区延迟的情况下处理数据。处理时间要求 (包括任何 OS 延迟) 以十分之一秒或更短的时间增量来衡量。实时系统是具有明确定义的固定时间约束的有时限的系统。处理必须在定义的约束条件下完成，否则系统将失败。它们要么是事件驱动的，要么是分时的。事件驱动系统根据任务的优先级在任务之间切换，而分时系统根据时钟中断切换任务。大多数 RTOS 使用先发制人的调度算法。&lt;/p>
&lt;p>实时操作系统主要有两类：&lt;/p>
&lt;ul>
&lt;li>硬实时系统 # 对关键外部时间的响应和处理时间有这极其严格的要求，系统必须满足这种严格的时间要求，否则会产生严重的不良后果。
&lt;ul>
&lt;li>火箭和导弹控制、机器人控制、核反应堆控制等都是硬实时系统应用的典型领域。飞行控制系统就是硬实时的。这种时间精确度通常会要求在微秒以下。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>软实时系统 # 对时间的响应和处理时间有一定的时间范围要求，不能满足相关的要求会影响系统的服务质量，但是通常不会引发灾难性的后果。如视频信息处理、电信、银行、飞机订票等领域的信息处理。&lt;/li>
&lt;/ul>
&lt;h1 id="总结">总结&lt;a class="td-heading-self-link" href="#%e6%80%bb%e7%bb%93" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>实际上，Time Sharing 与 Real Time 都是一种任务处理的方式，只要一个操作系统实现了这种方式，就可以称为 TSOS 或 RTOS，LInux 的进程调度系统，随着时间的发展，也逐渐具备了两种方式。&lt;/p></description></item><item><title>Docs: Microsoft OS</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Operating-system/Microsoft-OS/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Operating-system/Microsoft-OS/</guid><description/></item><item><title>Docs: Unix-like OS</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Operating-system/Unix-like-OS/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Operating-system/Unix-like-OS/</guid><description/></item><item><title>Docs: 环境变量</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Operating-system/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Operating-system/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Environment_variable">Wiki，Environment_variable&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Environment variable(环境变量)&lt;/strong> 是一种特殊的&lt;a href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/Variable.md">Variable&lt;/a>（本质也是变量，只不过是一个抽象的概念，将特定用途的变量抽象为环境变量）。环境变量可以影响计算机上运行中的进程的行为方式。环境变量是进程运行所在环境的一部分。例如，正在运行的进程可以查询 &lt;code>TEMP&lt;/code> 环境变量的值，以发现一个合适的位置来存储临时文件；或者查询 &lt;code>HOME&lt;/code> 变量以查找由运行进程的用户拥有的目录结构。&lt;/p>
&lt;p>环境变量于 1979 年与 Unix 7 版本一起引入，因此从那时起包括在所有&lt;a href="docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Operating%20system/Unix-like%20OS/Unix-like%20OS.md">Unix-like OS&lt;/a>中（包括 Linux、macOS）。从 1982 年的 PC DOS 2.0 开始，所有后续的 &lt;a href="docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Operating%20system/Microsoft%20OS/Microsoft%20OS.md">Microsoft OS&lt;/a>也都将环境变量作为一项功能包含在其中。&lt;/p>
&lt;p>尽管各种操作系统中对于环境变量在使用时的语法、标准各有不同，但所有系统都统一将环境变量作为操作系统的基本功能之一。&lt;/p>
&lt;h1 id="分类">分类&lt;a class="td-heading-self-link" href="#%e5%88%86%e7%b1%bb" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h1 id="操作系统技术">操作系统技术&lt;a class="td-heading-self-link" href="#%e6%93%8d%e4%bd%9c%e7%b3%bb%e7%bb%9f%e6%8a%80%e6%9c%af" aria-label="Heading self-link">&lt;/a>&lt;/h1></description></item><item><title>Docs: POSIX</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Operating-system/POSIX/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Operating-system/POSIX/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/POSIX">Wiki，POSIX&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cloud.tencent.com/developer/ask/26856">腾讯云，什么是 POSIX&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Portable Operating System Interface(便携式操作系统接口，POSIX)&lt;/strong> 是 &lt;a href="https://desistdaydream.github.io/docs/x_%E6%A0%87%E5%87%86%E5%8C%96/IT/IEEE.md">IEEE&lt;/a> 的计算机协会指定的一系列标准，用于维护操作系统之间的兼容性。 POSIX 定义了应用程序编程接口 (API)，以及命令行 shell 和实用程序接口，以实现与 类 Unix 操作系统 和 其他操作系统的软件兼容性。&lt;/p>
&lt;p>一般情况下，应用程序通过应用编程接口(API)而不是直接通过系统调用来编程。这点很重要，因为应用程序使用的这种编程接口实际上并不需要和内核 提供的系统调用对应。一个 API 定义了一组应用程序使用的编程接口。它们可以实现成一个系统调用，也可以通过调用多个系统调用来实现，而完全不使用任何系 统调用也不存在问题。实际上，API 可以在各种不同的操作系统上实现，给应用程序提供完全相同的接口，而它们本身在这些系统上的实现却可能迥异。&lt;/p>
&lt;p>在 Unix 世界中，最流行的应用编程接口是基于 POSIX 标准的。从纯技术的角度看，POSIX 是由 IEEE 的一组标准组成，其目标是提供一套大体上基于 Unix 的可移植操作系统标准。Linux 是与 POSIX 兼容的。&lt;/p>
&lt;p>POSIX 是说明 API 和系统调用之间关系的一个极好例子。在大多数 Unix 系统上，根据 POSIX 而定义的 API 函数和系统调用之间有着直接关 系。实际上，POSIX 标准就是仿照早期 Unix 系统的界面建立的。另一方面，许多操作系统，像 Windows NT，尽管和 Unix 没有什么关系，也提供了与 POSIX 兼容的库。&lt;/p>
&lt;p>Linux 的系统调用像大多数 Unix 系统一样，作为 C 库的一部分提供如图 5-1 所示。如图 5-1 所示 C 库实现了 Unix 系统的主要 API，包括标 准 C 库函数和系统调用。所有的 C 程序都可以使用 C 库，而由于 C 语言本身的特点，其他语言也可以很方便地把它们封装起来使用。此外，C 库提供了 POSIX 的绝大部分 API。&lt;/p>
&lt;p>从程序员的角度看，系统调用无关紧要；他们只需要跟 API 打交道就可以了。相反，内核只跟系统调用打交道；库函数及应用程序是怎么使用系统调用不是内核所关心的。&lt;/p>
&lt;p>简单总结：&lt;/p>
&lt;p>完成同一功能，不同内核提供的系统调用（也就是一个函数）是不同的，例如创建进程，linux 下是 fork 函数，windows 下是 creatprocess 函数。好，我现在在 linux 下写一个程序，用到 fork 函数，那么这个程序该怎么往 windows 上移植？我需要把源代码里的 fork 通通改成 creatprocess，然后重新编译&amp;hellip;&lt;/p>
&lt;p>POSIX 标准的出现就是为了解决这个问题。linux 和 windows 都要实现基本的 POSIX 标准，Linux 把 fork 函数封装成 posix_fork（随便说的），windows 把 creatprocess 函数也封装成 posix_fork，都声明在 unistd.h 里。这样，程序员编写普通应用时候，只用包含 unistd.h，调用 posix_fork 函数，程序就在源代码级别可移植了&lt;/p></description></item></channel></rss>