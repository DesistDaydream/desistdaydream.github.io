<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – 📄1.操作系统</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</link><description>Recent content in 📄1.操作系统 on 断念梦</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: 0_操作系统</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/0.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/0.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Operating_system">Wiki.Operating System&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://ebook.hep.com.cn/ebooks/index.html#/read?id=693031822086377472">高教书苑,操作系统原理(2020 年版)-全国计算机等级考试四级教程&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://ebook.hep.com.cn/ebooks/index.html#/read?id=685438574224478208">高教书苑,操作系统原理与实训教程(第 3 版)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/sEv8_o2FABGVtULOGUv3ZQ">公众号-码农的荒岛求生，没有操作系统，程序可以运行起来吗？&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Operating System(操作系统，简称 OS)&lt;/strong> 是一个&lt;a href="https://en.wikipedia.org/wiki/System_software">系统软件&lt;/a>，由很多程序模块组成，用以组织计算机的工作流程、有效得控制和管理计算机系统的各类(软件/硬件)资源，并向用户提供各种服务功能(操作接口)，使用户能够灵活、方便、有效地使用计算机。&lt;/p>
&lt;p>白话说，&lt;strong>OS 是计算机系统的&lt;code>管家&lt;/code>，是硬件最亲密的&lt;code>伙伴&lt;/code>，是人机之间的&lt;code>桥梁&lt;/code>，是其他应用软件的&lt;code>基石&lt;/code>。&lt;/strong>&lt;/p>
&lt;p>计算机起初是为了代替人类计算产生的，一台设备只能执行一个程序。如果一台计算机上需要同时运行三个程序，那么会有如下问题产生：&lt;/p>
&lt;ol>
&lt;li>三道程序在内存中如何存放？&lt;/li>
&lt;li>什么时候让某个程序占用 CPU？&lt;/li>
&lt;li>怎样有序地输出各个程序的运算结果？&lt;/li>
&lt;/ol>
&lt;p>对这些问题的解决都必须求助于操作系统。也就是说操作系统必须对内存进行管理，对 CPU 进行管理，对外设机型管理，对存放在磁盘上的文件更是要精心组织和管理。不仅如此，操作系统对这些资源进行管理的基础上，还要给用户提供良好的接口，以便用户可能在某种程度上使用或者操纵这些资源。因此，从操作系统设计者的角度考虑，一个操作系统必须包含以下几个部分&lt;/p>
&lt;ol>
&lt;li>操作系统接口&lt;/li>
&lt;li>CPU 管理&lt;/li>
&lt;li>内存管理&lt;/li>
&lt;li>设备管理&lt;/li>
&lt;li>文件管理&lt;/li>
&lt;/ol>
&lt;p>操作系统就是一个大型的软件而已，与运行在操作系统之上的各种程序基本一样。&lt;/p>
&lt;ol>
&lt;li>操作系统=内核+系统程序&lt;/li>
&lt;li>系统程序=编译环境+API(应用程序接口)+AUI(用户接口)&lt;/li>
&lt;li>编译环境=编译程序+连接程序+装载程序&lt;/li>
&lt;li>API=系统调用+语言库函数(C、C++、Java 等)&lt;/li>
&lt;li>AUI=shell+系统服务例程+应用程序(浏览器、字处理、编辑器等)&lt;/li>
&lt;/ol>
&lt;p>一个名为 test 程序执行的简单过程：&lt;/p>
&lt;ol>
&lt;li>用户通过交互界面(shell)告诉操作系统执行 test 程序&lt;/li>
&lt;li>操作系统通过文件名在磁盘找到该程序&lt;/li>
&lt;li>检查可执行代码首部，找出代码和数据存放的地址&lt;/li>
&lt;li>文件系统找到第一个磁盘块&lt;/li>
&lt;li>操作系统建立程序的执行环境&lt;/li>
&lt;li>操作系统把程序从磁盘装入内存，并跳到程序开始出执行&lt;/li>
&lt;li>操作系统检查字符串的位置是否正确&lt;/li>
&lt;li>操作系统找到字符串被送往的设备&lt;/li>
&lt;li>操作系统将字符串送往输出设备窗口系统确定这是一个合法的操作，然后将字符串转换成像素&lt;/li>
&lt;li>窗口系统将像素写入存储映像区&lt;/li>
&lt;li>视频硬件将像素表示转换成一组模拟信号控制显示器&lt;/li>
&lt;li>显示器发射电子束，最后在屏幕上看到程序执行的结果。&lt;/li>
&lt;/ol>
&lt;p>Linux 系统结构详解
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/nm71yz/1616168594662-a90f0c59-7c9b-49ee-ba91-d7065227bfcd.png" alt="">&lt;/p>
&lt;p>Linux 系统一般有 4 个主要部分：&lt;/p>
&lt;ol>
&lt;li>内核&lt;/li>
&lt;li>shell、进程&lt;/li>
&lt;li>文件系统&lt;/li>
&lt;li>应用程序。&lt;/li>
&lt;/ol>
&lt;p>内核、shell 和文件系统一起形成了基本的操作系统结构，它们使得用户可以运行程序、管理文件并使用系统。部分层次结构&lt;/p>
&lt;h1 id="操作系统分类">操作系统分类&lt;/h1>
&lt;p>对 OS 进行分类的方法有很多，从不同的角度可以得到不同的划分。&lt;/p>
&lt;h2 id="按照计算机硬件和结构与规模分类">按照计算机硬件和结构与规模分类&lt;/h2>
&lt;ul>
&lt;li>大型机操作系统&lt;/li>
&lt;li>中型机操作系统&lt;/li>
&lt;li>小型机操作系统&lt;/li>
&lt;li>微型机操作系统&lt;/li>
&lt;li>&lt;strong>(Networking)网络&lt;/strong> 操作系统&lt;/li>
&lt;li>&lt;strong>(Embedded)嵌入式&lt;/strong> 操作系统&lt;/li>
&lt;li>等等&lt;/li>
&lt;/ul>
&lt;h2 id="按照系统所能同时响应的用户与任务分类">按照系统所能同时响应的用户与任务分类&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>(Single-user/Multi-user)单用户 或 多用户&lt;/strong> 操作系统
&lt;ul>
&lt;li>单用户操作系统不具有区分用户的功能，但可以允许多个程序串联运行。&lt;a href="https://en.wikipedia.org/wiki/Operating_system#cite_note-8">[8]&lt;/a>阿&lt;a href="https://en.wikipedia.org/wiki/Multi-user">多用户&lt;/a>操作系统延伸的与设施识别过程和资源，例如磁盘空间，属于多个用户的多任务处理的基本概念，并且该系统允许多个用户在同一时间与系统进行交互。分时操作系统调度任务以有效使用系统，并且还可以包括用于将处理器时间，大容量存储，打印和其他资源的成本分配给多个用户的计费软件。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>(Single-tasking/Multi-tasking)单任务 或 多任务&lt;/strong> 操作系统
&lt;ul>
&lt;li>单任务系统一次只能运行一个程序，而&lt;a href="https://en.wikipedia.org/wiki/Computer_multitasking">多任务&lt;/a>操作系统允许&lt;a href="https://en.wikipedia.org/wiki/Concurrent_computing">并发&lt;/a>运行多个程序。这是通过 &lt;strong>Time-shring(&lt;/strong>&lt;a href="https://en.wikipedia.org/wiki/Time-sharing">&lt;strong>分时&lt;/strong>&lt;/a>&lt;strong>) &lt;strong>实现的，其中可用的处理器时间在多个进程之间分配。这些进程每个都在一个 &lt;strong>time slices(&lt;/strong>&lt;a href="https://en.wikipedia.org/wiki/Time_slice">&lt;strong>时间片&lt;/strong>&lt;/a>&lt;/strong>)&lt;/strong> 中被操作系统的任务计划子系统反复中断。多任务可以以抢占式和合作式为特征。在&lt;a href="https://en.wikipedia.org/wiki/Preemption_(computing)">抢占式&lt;/a>多任务处理中，操作系统会减少&lt;a href="https://en.wikipedia.org/wiki/Central_processing_unit">CPU&lt;/a>时间，并为每个程序分配一个插槽。&lt;a href="https://en.wikipedia.org/wiki/Unix-like">类似于 Unix 的&lt;/a> 操作系统，例如 &lt;a href="https://en.wikipedia.org/wiki/Solaris_(operating_system)">Solaris&lt;/a> 和&lt;a href="https://en.wikipedia.org/wiki/Linux">Linux&lt;/a> 以及非 Unix 操作系统(例如&lt;a href="https://en.wikipedia.org/wiki/AmigaOS">AmigaOS)均&lt;/a>支持抢占式多任务处理。通过依靠每个过程以定义的方式向其他过程提供时间来实现协作式多任务处理。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>通过 用户 和 任务 的组合，可以组合出三种：单用户单任务、单用户多任务、多用户多任务。&lt;/p>
&lt;h2 id="按照系统处理任务的方式分类更加广泛的分类">按照系统处理任务的方式分类(更加广泛的分类)&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>多道批处理&lt;/strong>操作系统 #&lt;/li>
&lt;li>**(Time-shring)分时 **操作系统 #
&lt;ul>
&lt;li>UNIX&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>**(Real-time)实时 **操作系统 #&lt;/li>
&lt;li>**(Distributed)分布式 **操作系统 #&lt;/li>
&lt;li>等等&lt;/li>
&lt;/ul>
&lt;h2 id="其他分类">其他分类&lt;/h2>
&lt;ul>
&lt;li>个人操作系统&lt;/li>
&lt;li>等等&lt;/li>
&lt;/ul>
&lt;h1 id="发展史">发展史&lt;/h1>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/CP/M">CP/M&lt;/a> 第一个微型机的操作系统&lt;/p>
&lt;h1 id="查看操作系统信息">查看操作系统信息&lt;/h1>
&lt;p>&lt;strong>/etc/os-release&lt;/strong>
&lt;strong>/etc/issue&lt;/strong>&lt;/p></description></item><item><title>Docs: 1.Bootloader</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/1.Bootloader/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/1.Bootloader/</guid><description/></item><item><title>Docs: 2.Kernel(内核)</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.Kernel%E5%86%85%E6%A0%B8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.Kernel%E5%86%85%E6%A0%B8/</guid><description/></item><item><title>Docs: 3.Systemd 系统守护程序</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/3.Systemd-%E7%B3%BB%E7%BB%9F%E5%AE%88%E6%8A%A4%E7%A8%8B%E5%BA%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/3.Systemd-%E7%B3%BB%E7%BB%9F%E5%AE%88%E6%8A%A4%E7%A8%8B%E5%BA%8F/</guid><description/></item><item><title>Docs: 4.Terminal 与 Shell</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.Terminal-%E4%B8%8E-Shell/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.Terminal-%E4%B8%8E-Shell/</guid><description/></item><item><title>Docs: 5.登录 Linux 与 访问控制</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E7%99%BB%E5%BD%95-Linux-%E4%B8%8E-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E7%99%BB%E5%BD%95-Linux-%E4%B8%8E-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/</guid><description/></item><item><title>Docs: 6.Package 管理</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/6.Package-%E7%AE%A1%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/6.Package-%E7%AE%A1%E7%90%86/</guid><description/></item><item><title>Docs: 7.时间管理</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/7.%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/7.%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86/</guid><description/></item><item><title>Docs: 系统审计</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E5%AE%A1%E8%AE%A1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E5%AE%A1%E8%AE%A1/</guid><description/></item><item><title>Docs: X.Linux 管理</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/X.Linux-%E7%AE%A1%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/X.Linux-%E7%AE%A1%E7%90%86/</guid><description/></item><item><title>Docs: Y.Windows 管理</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Y.Windows-%E7%AE%A1%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Y.Windows-%E7%AE%A1%E7%90%86/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;/blockquote>
&lt;h1 id="查看崩溃信息">查看崩溃信息&lt;/h1>
&lt;p>&lt;a href="https://its401.com/article/CRJ297486/120602345">https://its401.com/article/CRJ297486/120602345&lt;/a>
特别生气！！！！某一天突然发现拖拽文件拖拽到其他文件夹就会导致资源管理器卡死，然后还以为是自己拖错了，然后越来越频繁。
然后疯狂百度 1.打开控制面板
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qnpbng/1654348939190-57e80915-99a7-4521-992f-683029eff444.png" alt="image.png"> 2.再进入安全和维护
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qnpbng/1654348939189-d155d75e-ee86-4dce-8ddf-66eb077b7138.png" alt="image.png"> 3.点击维护查看可靠性历史记录
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qnpbng/1654348939189-f0bf328c-11eb-449c-91d7-a67f2d7c6e84.png" alt="image.png"> 4.点击关键信息随便个事件进去可以看见因为啥文件导致卡死的。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qnpbng/1654348939160-131bfda2-8f0e-466b-b0d9-941a4542d9c0.png" alt="image.png">
我是因为 wps 的某个文件，把 wps 卸了就好了。 5.如果还没解决的话，可以试试利用 Dism 修复系统
管理员打开 cmd 命令行。
直接输入这两条就好了
DISM /Online /Cleanup-image /ScanHealth //这一条指令用来扫描全部系统文件，并扫描计算机中映像文件与官方系统不一致的情况。 DISM /Online /Cleanup-image /RestoreHealth //计算机必须联网，这种命令的好处在于可以在修复时，系统未损坏部分可以继续运行&lt;/p></description></item><item><title>Docs: 安装操作系统</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%AE%89%E8%A3%85%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%AE%89%E8%A3%85%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</guid><description/></item><item><title>Docs: Linux 源码解析</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://elixir.bootlin.com/linux/latest/C/ident/disasm_state">源码快查网站&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item></channel></rss>