<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – 📄1.操作系统</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</link><description>Recent content in 📄1.操作系统 on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: 0_操作系统</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/0.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/0.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Operating_system">Wiki.Operating System&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://ebook.hep.com.cn/ebooks/index.html#/read?id=693031822086377472">高教书苑,操作系统原理(2020 年版)-全国计算机等级考试四级教程&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://ebook.hep.com.cn/ebooks/index.html#/read?id=685438574224478208">高教书苑,操作系统原理与实训教程(第 3 版)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/sEv8_o2FABGVtULOGUv3ZQ">公众号-码农的荒岛求生，没有操作系统，程序可以运行起来吗？&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Operating System(操作系统，简称 OS)&lt;/strong> 是一个&lt;a href="https://en.wikipedia.org/wiki/System_software">系统软件&lt;/a>，由很多程序模块组成，用以组织计算机的工作流程、有效得控制和管理计算机系统的各类(软件/硬件)资源，并向用户提供各种服务功能(操作接口)，使用户能够灵活、方便、有效地使用计算机。&lt;/p>
&lt;p>白话说，&lt;strong>OS 是计算机系统的&lt;code>管家&lt;/code>，是硬件最亲密的&lt;code>伙伴&lt;/code>，是人机之间的&lt;code>桥梁&lt;/code>，是其他应用软件的&lt;code>基石&lt;/code>。&lt;/strong>&lt;/p>
&lt;p>计算机起初是为了代替人类计算产生的，一台设备只能执行一个程序。如果一台计算机上需要同时运行三个程序，那么会有如下问题产生：&lt;/p>
&lt;ol>
&lt;li>三道程序在内存中如何存放？&lt;/li>
&lt;li>什么时候让某个程序占用 CPU？&lt;/li>
&lt;li>怎样有序地输出各个程序的运算结果？&lt;/li>
&lt;/ol>
&lt;p>对这些问题的解决都必须求助于操作系统。也就是说操作系统必须对内存进行管理，对 CPU 进行管理，对外设机型管理，对存放在磁盘上的文件更是要精心组织和管理。不仅如此，操作系统对这些资源进行管理的基础上，还要给用户提供良好的接口，以便用户可能在某种程度上使用或者操纵这些资源。因此，从操作系统设计者的角度考虑，一个操作系统必须包含以下几个部分&lt;/p>
&lt;ol>
&lt;li>操作系统接口&lt;/li>
&lt;li>CPU 管理&lt;/li>
&lt;li>内存管理&lt;/li>
&lt;li>设备管理&lt;/li>
&lt;li>文件管理&lt;/li>
&lt;/ol>
&lt;p>操作系统就是一个大型的软件而已，与运行在操作系统之上的各种程序基本一样。&lt;/p>
&lt;ol>
&lt;li>操作系统=内核+系统程序&lt;/li>
&lt;li>系统程序=编译环境+API(应用程序接口)+AUI(用户接口)&lt;/li>
&lt;li>编译环境=编译程序+连接程序+装载程序&lt;/li>
&lt;li>API=系统调用+语言库函数(C、C++、Java 等)&lt;/li>
&lt;li>AUI=shell+系统服务例程+应用程序(浏览器、字处理、编辑器等)&lt;/li>
&lt;/ol>
&lt;p>一个名为 test 程序执行的简单过程：&lt;/p>
&lt;ol>
&lt;li>用户通过交互界面(shell)告诉操作系统执行 test 程序&lt;/li>
&lt;li>操作系统通过文件名在磁盘找到该程序&lt;/li>
&lt;li>检查可执行代码首部，找出代码和数据存放的地址&lt;/li>
&lt;li>文件系统找到第一个磁盘块&lt;/li>
&lt;li>操作系统建立程序的执行环境&lt;/li>
&lt;li>操作系统把程序从磁盘装入内存，并跳到程序开始出执行&lt;/li>
&lt;li>操作系统检查字符串的位置是否正确&lt;/li>
&lt;li>操作系统找到字符串被送往的设备&lt;/li>
&lt;li>操作系统将字符串送往输出设备窗口系统确定这是一个合法的操作，然后将字符串转换成像素&lt;/li>
&lt;li>窗口系统将像素写入存储映像区&lt;/li>
&lt;li>视频硬件将像素表示转换成一组模拟信号控制显示器&lt;/li>
&lt;li>显示器发射电子束，最后在屏幕上看到程序执行的结果。&lt;/li>
&lt;/ol>
&lt;p>Linux 系统结构详解
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/nm71yz/1616168594662-a90f0c59-7c9b-49ee-ba91-d7065227bfcd.png" alt="">&lt;/p>
&lt;p>Linux 系统一般有 4 个主要部分：&lt;/p>
&lt;ol>
&lt;li>内核&lt;/li>
&lt;li>shell、进程&lt;/li>
&lt;li>文件系统&lt;/li>
&lt;li>应用程序。&lt;/li>
&lt;/ol>
&lt;p>内核、shell 和文件系统一起形成了基本的操作系统结构，它们使得用户可以运行程序、管理文件并使用系统。部分层次结构&lt;/p>
&lt;h1 id="操作系统分类">操作系统分类&lt;/h1>
&lt;p>对 OS 进行分类的方法有很多，从不同的角度可以得到不同的划分。&lt;/p>
&lt;h2 id="按照计算机硬件和结构与规模分类">按照计算机硬件和结构与规模分类&lt;/h2>
&lt;ul>
&lt;li>大型机操作系统&lt;/li>
&lt;li>中型机操作系统&lt;/li>
&lt;li>小型机操作系统&lt;/li>
&lt;li>微型机操作系统&lt;/li>
&lt;li>&lt;strong>(Networking)网络&lt;/strong> 操作系统&lt;/li>
&lt;li>&lt;strong>(Embedded)嵌入式&lt;/strong> 操作系统&lt;/li>
&lt;li>等等&lt;/li>
&lt;/ul>
&lt;h2 id="按照系统所能同时响应的用户与任务分类">按照系统所能同时响应的用户与任务分类&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>(Single-user/Multi-user)单用户 或 多用户&lt;/strong> 操作系统
&lt;ul>
&lt;li>单用户操作系统不具有区分用户的功能，但可以允许多个程序串联运行。&lt;a href="https://en.wikipedia.org/wiki/Operating_system#cite_note-8">[8]&lt;/a>阿&lt;a href="https://en.wikipedia.org/wiki/Multi-user">多用户&lt;/a>操作系统延伸的与设施识别过程和资源，例如磁盘空间，属于多个用户的多任务处理的基本概念，并且该系统允许多个用户在同一时间与系统进行交互。分时操作系统调度任务以有效使用系统，并且还可以包括用于将处理器时间，大容量存储，打印和其他资源的成本分配给多个用户的计费软件。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>(Single-tasking/Multi-tasking)单任务 或 多任务&lt;/strong> 操作系统
&lt;ul>
&lt;li>单任务系统一次只能运行一个程序，而&lt;a href="https://en.wikipedia.org/wiki/Computer_multitasking">多任务&lt;/a>操作系统允许&lt;a href="https://en.wikipedia.org/wiki/Concurrent_computing">并发&lt;/a>运行多个程序。这是通过 &lt;strong>Time-shring(&lt;/strong>&lt;a href="https://en.wikipedia.org/wiki/Time-sharing">&lt;strong>分时&lt;/strong>&lt;/a>&lt;strong>) &lt;strong>实现的，其中可用的处理器时间在多个进程之间分配。这些进程每个都在一个 &lt;strong>time slices(&lt;/strong>&lt;a href="https://en.wikipedia.org/wiki/Time_slice">&lt;strong>时间片&lt;/strong>&lt;/a>&lt;/strong>)&lt;/strong> 中被操作系统的任务计划子系统反复中断。多任务可以以抢占式和合作式为特征。在&lt;a href="https://en.wikipedia.org/wiki/Preemption_(computing)">抢占式&lt;/a>多任务处理中，操作系统会减少&lt;a href="https://en.wikipedia.org/wiki/Central_processing_unit">CPU&lt;/a>时间，并为每个程序分配一个插槽。&lt;a href="https://en.wikipedia.org/wiki/Unix-like">类似于 Unix 的&lt;/a> 操作系统，例如 &lt;a href="https://en.wikipedia.org/wiki/Solaris_(operating_system)">Solaris&lt;/a> 和&lt;a href="https://en.wikipedia.org/wiki/Linux">Linux&lt;/a> 以及非 Unix 操作系统(例如&lt;a href="https://en.wikipedia.org/wiki/AmigaOS">AmigaOS)均&lt;/a>支持抢占式多任务处理。通过依靠每个过程以定义的方式向其他过程提供时间来实现协作式多任务处理。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>通过 用户 和 任务 的组合，可以组合出三种：单用户单任务、单用户多任务、多用户多任务。&lt;/p>
&lt;h2 id="按照系统处理任务的方式分类更加广泛的分类">按照系统处理任务的方式分类(更加广泛的分类)&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>多道批处理&lt;/strong>操作系统 #&lt;/li>
&lt;li>**(Time-shring)分时 **操作系统 #
&lt;ul>
&lt;li>UNIX&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>**(Real-time)实时 **操作系统 #&lt;/li>
&lt;li>**(Distributed)分布式 **操作系统 #&lt;/li>
&lt;li>等等&lt;/li>
&lt;/ul>
&lt;h2 id="其他分类">其他分类&lt;/h2>
&lt;ul>
&lt;li>个人操作系统&lt;/li>
&lt;li>等等&lt;/li>
&lt;/ul>
&lt;h1 id="发展史">发展史&lt;/h1>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/CP/M">CP/M&lt;/a> 第一个微型机的操作系统&lt;/p>
&lt;h1 id="查看操作系统信息">查看操作系统信息&lt;/h1>
&lt;p>&lt;strong>/etc/os-release&lt;/strong>
&lt;strong>/etc/issue&lt;/strong>&lt;/p></description></item><item><title>Docs: 1.Bootloader</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/1.Bootloader/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/1.Bootloader/</guid><description/></item><item><title>Docs: 2.Kernel(内核)</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.Kernel%E5%86%85%E6%A0%B8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.Kernel%E5%86%85%E6%A0%B8/</guid><description/></item><item><title>Docs: 3.Systemd 系统守护程序</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/3.Systemd-%E7%B3%BB%E7%BB%9F%E5%AE%88%E6%8A%A4%E7%A8%8B%E5%BA%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/3.Systemd-%E7%B3%BB%E7%BB%9F%E5%AE%88%E6%8A%A4%E7%A8%8B%E5%BA%8F/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/systemd/systemd">GitHub 项目&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.jinbuguo.com/systemd/systemd.index.html">Systemd 中文手册,金步国&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://man.cx/systemd">Manual(手册),systemd&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>System daemon(系统守护进程，简称 systemd)&lt;/strong> 实质上：启动一个服务，就是启动一个程序，可以给该程序添加一些参数，也可以不添加，该程序的可执行文件一般是放在 /usr/lib/systemd/system/ 目录下的&lt;/p>
&lt;p>历史上，Linux 的启动一直采用 init 进程。这种命令 &lt;code>/etc/init.d/apache2 start 或者 service apache2 start&lt;/code>，就是用来启动服务。&lt;/p>
&lt;p>这种方法有两个缺点。&lt;/p>
&lt;ol>
&lt;li>启动时间长。init 进程是串行启动，只有前一个进程启动完，才会启动下一个进程。&lt;/li>
&lt;li>启动脚本复杂。init 进程只是执行启动脚本，不管其他事情。脚本需要自己处理各种情况，这往往使得脚本变得很长。&lt;/li>
&lt;/ol>
&lt;p>Systemd 就是为了解决这些问题而诞生的。它的设计目标是，为系统的启动和管理提供一套完整的解决方案。&lt;/p>
&lt;p>根据 Linux 惯例，字母 d 是 daemon(守护进程) 的缩写。 Systemd 这个名字的含义，就是它要守护整个系统。&lt;/p>
&lt;p>使用了 Systemd，就不需要再用 init 了。Systemd 取代了 initd，成为系统的第一个进程(PID 等于 1)，其他进程都是它的子进程。&lt;/p>
&lt;p>Systemd 的优点是功能强大，使用方便，缺点是体系庞大，非常复杂。事实上，现在还有很多人反对使用 Systemd，理由就是它过于复杂，与操作系统的其他部分强耦合，违反&amp;quot;keep simple, keep stupid&amp;quot;的 Unix 哲学。&lt;/p>
&lt;p>注意：Systemd 启动的程序无法获取 shell 中的变量，需要通过在 Unit 的配置文件中设置环境变量。&lt;/p>
&lt;h2 id="unit单元">Unit(单元)&lt;/h2>
&lt;p>Systemd 将各种操作系统启动和运行的相关对象，抽象多种类型的 &lt;strong>Units(单元)&lt;/strong>，并且提供了 Units 之间的依赖关系。&lt;strong>大多数 Units 是通过 Unit File(单元文件) 创建的&lt;/strong>，没有 Unit File，也就不会存在所谓的 Units。&lt;strong>可以这么说，在特定目录创建了一个符合 Unit File 格式的文件，也就创建了一个 Unit&lt;/strong>。&lt;/p>
&lt;blockquote>
&lt;p>单元：比如以前上学总说：第一单元、第二单元，这种理解&lt;/p>
&lt;/blockquote>
&lt;p>现阶段有如下几种 Units：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Automoount unit&lt;/strong> # 自动挂载点&lt;/li>
&lt;li>&lt;strong>Device unit&lt;/strong> # 硬件设备&lt;/li>
&lt;li>&lt;strong>Mount unit&lt;/strong> # 文件系统挂载点&lt;/li>
&lt;li>&lt;strong>Path unit&lt;/strong> # 文件或路径&lt;/li>
&lt;li>&lt;strong>Scope unit&lt;/strong> # 与 Service unit 类似，但是由 systemd 根据 D-bus 接口接收到的信息自动创建， 可用于管理外部创建的进程。&lt;/li>
&lt;li>&lt;strong>Service unit&lt;/strong> # 用于启动和控制守护进程以及他们所包含的进程&lt;/li>
&lt;li>&lt;strong>Slice unit&lt;/strong> # 用于控制特定 CGroup 内(例如一组 service 与 scope 单元)所有进程的总体资源占用。&lt;/li>
&lt;li>&lt;strong>Socket nuit&lt;/strong> # 进程间通信的 socket&lt;/li>
&lt;li>&lt;strong>Swap unit&lt;/strong> # 关于 swap 文件&lt;/li>
&lt;li>&lt;strong>Target nuit&lt;/strong> # 是一群 Unit 的集合&lt;/li>
&lt;li>&lt;strong>Timer unit&lt;/strong> # 定时器&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>Unit 的名称&lt;/strong>。Unit 的名称由 Unit File 的名称决定。比如一个 crond.service 文件，将会创建出来一个类型为 Service，名为 crond.service 的 Unit。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/glcff3/1616167393721-79076d3b-2c04-48e9-a4a0-8ee4bfb69284.jpeg" alt="">
&lt;strong>Unit 的依赖&lt;/strong>。Systemd 能够处理 Units 之间的依赖关系，通过依赖关系，我们可以确定 Unit 之间启动的先后顺序、以及 Unit 之间是否可以同时运行。
&lt;strong>Unit 的状态&lt;/strong>。 Unit 既可以处于活动(active)状态也可以处于停止(inactive)状态， 当然也可以处于启动中(activating)或停止中(deactivating)的状态。 还有一个特殊的失败(failed)状态， 意思是单元以某种方式失败了 (退出时返回了错误代码、进程崩溃、操作超时、触碰启动频率限制)。 当进入失败(failed)状态时， 导致故障的原因 将被记录到日志中以方便日后排查。 需要注意的是， 不同的单元可能还会有各自不同的&amp;quot;子状态&amp;quot;， 但它们都被映射到上述五种状态之一。通过 &lt;code>systemctl list-units --all&lt;/code> 命令可以查看每个 Unit 的状态。&lt;/p>
&lt;h1 id="systemd-配置">Systemd 配置&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>man 手册：&lt;a href="https://man7.org/linux/man-pages/man5/systemd-system.conf.5.html">https://man7.org/linux/man-pages/man5/systemd-system.conf.5.html&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>/etc/systemd/*&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>**./system.conf **# Systemd 程序运行时配置文件&lt;/li>
&lt;li>**./system.conf.d/*.conf **# Systemd 程序运行时配置文件&lt;/li>
&lt;li>&lt;strong>./user.conf&lt;/strong> # Systemd 以普通用户身份运行时的配置文件&lt;/li>
&lt;li>&lt;strong>./user.conf.d/*.conf&lt;/strong> # Systemd 以普通用户身份运行时的配置文件&lt;/li>
&lt;/ul>
&lt;p>**/run/systemd/* **#&lt;/p>
&lt;ul>
&lt;li>&lt;strong>./system.conf.d/*.conf&lt;/strong> # Systemd 程序运行时配置文件&lt;/li>
&lt;li>&lt;strong>./user.conf.d/*.conf&lt;/strong> # Systemd 以普通用户身份运行时的配置文件&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>/usr/lib/systemd/*&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>./system.conf.d/*.conf&lt;/strong> # Systemd 程序运行时配置文件&lt;/li>
&lt;li>&lt;strong>./user.conf.d/*.conf&lt;/strong> # Systemd 以普通用户身份运行时的配置文件&lt;/li>
&lt;/ul>
&lt;p>/etc、/run、/usr/lib 这三个目录的优先级从左至右由高到低。Systemd 会从最低优先级的目录 /usr/lib/_ 下开始加载配置，注意加载其中的文件，直到最高优先级的目录 /etc/systemd/_ 为止。&lt;/p>
&lt;h2 id="units-配置">Units 配置&lt;/h2>
&lt;p>Units 配置就是指 Unit File。Systemd 会从多个目录中加载 Unit File，以生成 Unit。下面列出的路径，优先级从上往下越来越低。也就是说，高优先级目录中的文件，将会覆盖低优先级目录中的同名文件。不同的 Systemd 运行方式，加载 Unit File 的路径不同。&lt;/p>
&lt;h3 id="使用---system-参数以系统实例运行-systemd">使用 &amp;ndash;system 参数，以系统实例运行 systemd&lt;/h3>
&lt;p>通过 pkg-config systemd &amp;ndash;variable=systemdsystemunitdir** &lt;strong>命令可以查看包管理器安装完程序后，生成 Unit File 的目录
通过 pkg-config systemd &amp;ndash;variable=systemdsystemconfdir&lt;/strong> **命令可以查看优先级最高的存放 Unit File 的目录&lt;/p>
&lt;ul>
&lt;li>&lt;strong>/etc/systemd/system.control&lt;/strong> # 通过 dbus API 创建的永久系统单元&lt;/li>
&lt;li>&lt;strong>/run/systemd/system.control&lt;/strong> # 通过 dbus API 创建的临时系统单元&lt;/li>
&lt;li>&lt;strong>/run/systemd/transient&lt;/strong> # 动态配置的临时单元(系统与全局用户共用)&lt;/li>
&lt;li>&lt;strong>/run/systemd/generator.early&lt;/strong> # 生成的高优先级单元(系统与全局用户共用)(参见 systemd.generator(7) 手册中对 early-dir 的说明)&lt;/li>
&lt;li>&lt;strong>/etc/systemd/system/*&lt;/strong> # 人类根据需求，手动创建的 Unit File 所在路径。且当使用 systemctl enable UNIT 命令的时候，会自动在该目录中创建软连接到 /usr/lib/systemd/system/ 目录中的 Unit File
&lt;ul>
&lt;li>./UnitFileName.d/*.conf # 嵌入式单元文件 存放路径&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>/run/systemd/system/*&lt;/strong> # 程序运行时自动生成的 Unit File 所在路径。
&lt;ul>
&lt;li>./UnitFileName.d/*.conf # 嵌入式单元文件 存放路径&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>/run/systemd/generator&lt;/strong> # 生成的中优先级系统单元(参见 systemd.generator(7) 手册中对 normal-dir 的说明)&lt;/li>
&lt;li>&lt;strong>/usr/local/lib/systemd/system&lt;/strong> # 本地软件包安装的系统单元&lt;/li>
&lt;li>&lt;strong>/usr/lib/systemd/system/*&lt;/strong> # 通过系统的包管理器安装程序时，生成的 Unit File 所在路径。
&lt;ul>
&lt;li>./UnitFileName.d/*.conf # 嵌入式单元文件 存放路径&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>/run/systemd/generator.late&lt;/strong> # 生成的低优先级系统单元(参见 systemd.generator(7) 手册中对 late-dir 的说明)&lt;/li>
&lt;/ul>
&lt;h3 id="使用---user-参数以用户实例运行-systemd">使用 &amp;ndash;user 参数，以用户实例运行 systemd&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>$XDG_CONFIG_HOME/systemd/user.control 或 ~/.config/systemd/user.control&lt;/strong> # 通过 dbus API 创建的永久私有用户单元(仅在未设置 $XDG_CONFIG_HOME 时才使用 ~/.config 来替代)&lt;/li>
&lt;li>$XDG_RUNTIME_DIR/systemd/user.control # 通过 dbus API 创建的临时私有用户单元&lt;/li>
&lt;li>/run/systemd/transient 动态配置的临时单元(系统与全局用户共用)&lt;/li>
&lt;li>/run/systemd/generator.early 生成的高优先级单元(系统与全局用户共用)(参见 systemd.generator(7) 手册中对 early-dir 的说明)&lt;/li>
&lt;li>$XDG_CONFIG_HOME/systemd/user 或 $HOME/.config/systemd/user 用户配置的私有用户单元(仅在未设置 $XDG_CONFIG_HOME 时才使用 ~/.config 来替代)&lt;/li>
&lt;li>/etc/systemd/user 本地配置的全局用户单元&lt;/li>
&lt;li>$XDG_RUNTIME_DIR/systemd/user 运行时配置的私有用户单元(仅当 $XDG_RUNTIME_DIR 已被设置时有效)&lt;/li>
&lt;li>/run/systemd/user 运行时配置的全局用户单元&lt;/li>
&lt;li>$XDG_RUNTIME_DIR/systemd/generator 生成的中优先级私有用户单元(参见 systemd.generator(7) 手册中对 normal-dir 的说明)&lt;/li>
&lt;li>$XDG_DATA_HOME/systemd/user 或 $HOME/.local/share/systemd/user 软件包安装在用户家目录中的私有用户单元(仅在未设置 $XDG_DATA_HOME 时才使用 ~/.local/share 来替代)&lt;/li>
&lt;li>$dir/systemd/user(对应 $XDG_DATA_DIRS 中的每一个目录($dir)) 额外安装的全局用户单元，对应 $XDG_DATA_DIRS(默认值=&amp;quot;/usr/local/share/:/usr/share/&amp;quot;) 中的每一个目录。&lt;/li>
&lt;li>/usr/local/lib/systemd/user 本地软件包安装的全局用户单元&lt;/li>
&lt;li>/usr/lib/systemd/user 发行版软件包安装的全局用户单元&lt;/li>
&lt;li>$XDG_RUNTIME_DIR/systemd/generator.late 生成的低优先级私有用户单元(参见 systemd.generator(7) 手册中对 late-dir 的说明)&lt;/li>
&lt;/ul>
&lt;p>可以使用环境变量来 扩充或更改 systemd 用户实例(&lt;code>--user&lt;/code>)的单元文件加载路径。 环境变量可以通过环境变量生成器(详见 &lt;a href="http://www.jinbuguo.com/systemd/systemd.environment-generator.html#">systemd.environment-generator(7)&lt;/a> 手册)来设置。特别地， &lt;code>$XDG_DATA_HOME&lt;/code> 与 &lt;code>$XDG_DATA_DIRS&lt;/code> 可以方便的通过 &lt;a href="http://www.jinbuguo.com/systemd/systemd-environment-d-generator.html#">systemd-environment-d-generator(8)&lt;/a> 来设置。这样，上表中列出的单元目录正好就是默认值。 要查看实际使用的、基于编译选项与当前环境变量的单元目录列表，可以使用 &lt;code>systemd-analyze --user unit-paths&lt;/code>&lt;/p>
&lt;p>此外，还可以通过 &lt;a href="http://www.jinbuguo.com/systemd/systemctl.html#">systemctl(1)&lt;/a> 的 &lt;strong>link&lt;/strong> 命令 向上述单元目录中添加额外的单元(不在上述常规单元目录中的单元)。&lt;/p></description></item><item><title>Docs: 4.Terminal 与 Shell</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.Terminal-%E4%B8%8E-Shell/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.Terminal-%E4%B8%8E-Shell/</guid><description/></item><item><title>Docs: 5.登录 Linux 与 访问控制</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E7%99%BB%E5%BD%95-Linux-%E4%B8%8E-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E7%99%BB%E5%BD%95-Linux-%E4%B8%8E-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/</guid><description/></item><item><title>Docs: 6.Package 管理</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/6.Package-%E7%AE%A1%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/6.Package-%E7%AE%A1%E7%90%86/</guid><description/></item><item><title>Docs: 7.时间管理</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/7.%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/7.%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86/</guid><description/></item><item><title>Docs: 系统审计</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E5%AE%A1%E8%AE%A1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E5%AE%A1%E8%AE%A1/</guid><description/></item><item><title>Docs: X.Linux 管理</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/X.Linux-%E7%AE%A1%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/X.Linux-%E7%AE%A1%E7%90%86/</guid><description/></item><item><title>Docs: Y.Windows 管理</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Y.Windows-%E7%AE%A1%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Y.Windows-%E7%AE%A1%E7%90%86/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;/blockquote>
&lt;h1 id="查看崩溃信息">查看崩溃信息&lt;/h1>
&lt;p>&lt;a href="https://its401.com/article/CRJ297486/120602345">https://its401.com/article/CRJ297486/120602345&lt;/a>
特别生气！！！！某一天突然发现拖拽文件拖拽到其他文件夹就会导致资源管理器卡死，然后还以为是自己拖错了，然后越来越频繁。
然后疯狂百度 1.打开控制面板
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qnpbng/1654348939190-57e80915-99a7-4521-992f-683029eff444.png" alt="image.png"> 2.再进入安全和维护
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qnpbng/1654348939189-d155d75e-ee86-4dce-8ddf-66eb077b7138.png" alt="image.png"> 3.点击维护查看可靠性历史记录
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qnpbng/1654348939189-f0bf328c-11eb-449c-91d7-a67f2d7c6e84.png" alt="image.png"> 4.点击关键信息随便个事件进去可以看见因为啥文件导致卡死的。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qnpbng/1654348939160-131bfda2-8f0e-466b-b0d9-941a4542d9c0.png" alt="image.png">
我是因为 wps 的某个文件，把 wps 卸了就好了。 5.如果还没解决的话，可以试试利用 Dism 修复系统
管理员打开 cmd 命令行。
直接输入这两条就好了
DISM /Online /Cleanup-image /ScanHealth //这一条指令用来扫描全部系统文件，并扫描计算机中映像文件与官方系统不一致的情况。 DISM /Online /Cleanup-image /RestoreHealth //计算机必须联网，这种命令的好处在于可以在修复时，系统未损坏部分可以继续运行&lt;/p></description></item><item><title>Docs: Linux 源码解析</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://elixir.bootlin.com/linux/latest/C/ident/disasm_state">源码快查网站&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>Docs: 公众号,码农的荒岛求生-操作系统话题系列文章</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%85%AC%E4%BC%97%E5%8F%B7%E7%A0%81%E5%86%9C%E7%9A%84%E8%8D%92%E5%B2%9B%E6%B1%82%E7%94%9F-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E8%AF%9D%E9%A2%98%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%85%AC%E4%BC%97%E5%8F%B7%E7%A0%81%E5%86%9C%E7%9A%84%E8%8D%92%E5%B2%9B%E6%B1%82%E7%94%9F-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E8%AF%9D%E9%A2%98%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0/</guid><description/></item></channel></rss>