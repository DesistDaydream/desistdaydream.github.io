<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>特殊文件系统 on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Filesystem/%E7%89%B9%E6%AE%8A%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</link><description>Recent content in 特殊文件系统 on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Filesystem/%E7%89%B9%E6%AE%8A%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/index.xml" rel="self" type="application/rss+xml"/><item><title>devfs</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Filesystem/%E7%89%B9%E6%AE%8A%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/devfs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Filesystem/%E7%89%B9%E6%AE%8A%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/devfs/</guid><description>概述 参考：
非官方 Manual(手册)，devfs(5) Device File System(设备文件系统，简称 devfs)，提供对全局文件系统名称空间中内核设备名称空间的访问。一般挂载到 /dev 目录。
[!Notes] 现在设备文件系统称为 devtmpfs 。devfs 的发展过程中有很多名字，udev、devtmpfs。参考 Linux设备节点创建方式的演变历史 文章。
这个文件系统包含一些目录、链接、符号链接和设备，其中一些是可写的。在 Chroot 环境中，可以使用 devfs 创建一个新的 /dev 挂载点。
The mknod(8) 工具可用于恢复 devfs 下已删除的设备。
/dev/dm-* 参考：
Wiki, Device mapper Device Mapper(设备映射，简称 dm)，是一个由 Linux 内核提供的框架，用于将物理块设备映射到更高级别的虚拟块设备。dm 是 LVM、软 Raid、dm-crypt 磁盘加密的基础。
dm 通过将将数据从虚拟块设备传递到另一个块设备来工作。数据也可以再过渡中进行修改，例如，在设备映射器提供磁盘加密或模拟不可靠硬件行为的情况下，可以执行此操作。
dmsetup 命令行工具 dmsetup ls # 列出 dm 设备
~]# dmsetup ls vg1-swap (253:1) vg1-root (253:0) 其中 253 后面的数字，就是 dm-X 那个 X。所以 dm-0 对应 vg1-root 这个设备。使用 lsblk 命令可以看到 dm 与 块设备的关联关系。</description></item><item><title>OverlayFS</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Filesystem/%E7%89%B9%E6%AE%8A%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/OverlayFS/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Filesystem/%E7%89%B9%E6%AE%8A%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/OverlayFS/</guid><description>概述 参考：
公众号-MoeLove，聊聊 Docker 的存储驱动 Overlay2 大家好，我是张晋涛。
上周在我的交流群里有个小伙伴问到了 Overlay2 相关的问题，这篇就来介绍一下。(想进群的可以留言）
本节，我将为你介绍 Docker 现在推荐使用的存储驱动 Overlay2，在开始之前，你可以执行以下命令来查看 Docker 正在使用的存储驱动：
(MoeLove) ➜ ~ docker info --format '{{.Driver}}' overlay2
如果你看到的结果也是 overlay2 说明你的 Docker 已经在使用 overlay2 存储驱动了。我在个人工作站上用的是 btrfs，这是因为自从 Fedora 33 开始，btrfs 就成为了 Fedora 默认的文件系统。不过服务器上就都是 overlay2 了。
你也可能会看到其他不同的结果，可以在启动 docker daemon 的时候，通过 --storage-driver 参数进行指定，也可以在 /etc/docker/daemon.json 文件中通过 storage-driver 字段进行配置。
目前对于 Docker 最新版本而言，你有以下几种存储驱动可供选择：
overlay2 fuse-overlayfs btrfs zfs aufs overlay devicemapper vfs 但它们对于你使用的文件系统之类的都有不同的要求，且实现方式也不尽相同。我以本节的重点 overlay2 存储驱动为例，它需要你使用 Linux 4.x 以上版本的内核，或者是对于 RHEL/CentOS 等需要使用 3.10.0-514 以上的内核（旧版本中存在一些兼容性问题，我在之前的文章中有提到过）。</description></item><item><title>proc</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Filesystem/%E7%89%B9%E6%AE%8A%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/proc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Filesystem/%E7%89%B9%E6%AE%8A%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/proc/</guid><description>概述 参考：
Manual(手册)，proc(5) GitHub 项目，torvalds/linux - Documentation/filesystems/proc.rst https://www.kernel.org/doc/html/latest/filesystems/proc.html process information pseudo-filesystem(进程信息伪文件系统，简称 proc)， 提供了内核数据结构的接口。一般挂载到 /proc 目录。一般情况是由操作系统自动挂载的，也可以通过mount -t proc proc /proc命令手动挂载。proc 文件系统中的大多数文件都是只读的，但是有些文件是可写的，用于改变内核参数。
proc 文件系统不用于存储。其主要目的是为硬件，内存，运行的进程和其他系统组件提供基于文件的接口。通过查看相应的 /proc 文件，可以检索许多系统组件上的实时信息。/proc 中的某些文件也可以（由用户和应用程序）操纵以配置内核。
/proc/PID/ - 每个进程自己的独立信息 每个进程在 /proc 下有一个名为自己进程号的目录，该目录记载了该进程相关的 proc 信息。
这些目录的详细用处详见 Process info
/proc/cmdline - 引导系统时，传递给内核的参数 通常通过引导管理器（如 lilo（8）或 grub（8））完成。
/proc/cpuinfo - CPU 信息 如 cpu 的类型、制造商、 型号和性能等。
/proc/devices - 当前运行的核心配置的设备驱动的列表 /proc/dma - 显示当前使用的 dma 通道 /proc/filesystems - 内核可以支持的文件系统列表 /proc/interrupts - 系统中断统计信息 详见：Interrupts(中断)
这用于记录每个 IO 设备每个 CPU 的中断数。从 Linux 2.</description></item><item><title>sysfs</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Filesystem/%E7%89%B9%E6%AE%8A%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/sysfs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Filesystem/%E7%89%B9%E6%AE%8A%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/sysfs/</guid><description>概述 参考：
Manual(手册)，sysfs(5) 在 Man 中最后的 See Also 中提到了下面几个文档 https://github.com/torvalds/linux/blob/master/Documentation/filesystems/sysfs.rst Documentation/ABI Documentation/*/sysfs.txt 基于此，可以通过在 Linux 仓库的 go to file 搜索框中，输入 Documentation/sysfs 这种关键字，找到很多与 sysfs 相关的文件。TODO: 如何利用 path 关键字使用统配或正则在 github 全局搜索文件？ Kernel 文档，管理员指南 - 关于如何访问 sysfs 中信息的规则 Kernel 文档，管理员指南 - Linux ABI 描述 Wiki, Sysfs 用于导出 kernel objects(内核对象，简称 kobject) 的文件系统。对于在系统中注册的每个 kobject，都会在 sysfs 中为其创建一个目录。该目录被创建为 kobject 父目录的子目录，向用户空间表达内部对象层次结构。 sysfs 中的顶级目录代表对象层次结构的共同祖先；即对象所属的子系统。
Sys File System(sys 文件系统，简称 sysfs) 是一个 pseudo-filesystem(伪文件系统)，提供内核数据结构的接口(更准确地说，sysfs 中的文件和目录提供了内核内部定义的 kobject 结构的视图)。sysfs 下的文件提供关于设备、内核模块、文件系统和其他内核组件的信息。sysfs 一般挂载到 /sys 目录。通常情况下，系统会自动挂载它，但也可以使用 mount -t sysfs sysfs /sys 命令手动挂载</description></item><item><title>tmpfs</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Filesystem/%E7%89%B9%E6%AE%8A%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/tmpfs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Filesystem/%E7%89%B9%E6%AE%8A%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/tmpfs/</guid><description>概述 参考：
GitHub 项目，torvalds/linux - Documentation/filesystems/tmpfs.rst Kernel 文档，文件系统 - tmpfs Tmpfs 是一个将所有文件保存在虚拟内存中的文件系统。tmpfs 中的所有内容都是 temporary(临时) 的，因为不会在硬盘上创建任何文件。如果卸载 tmpfs 实例，其中存储的所有内容都会丢失。
tmpfs 将所有内容放入内核内部缓存中，并增长和收缩以容纳其包含的文件，并且如果为 tmpfs 挂载启用了 swap，则能够将不需要的页面交换到交换空间。 tmpfs 还支持 THP。
tmpfs 有 3 个用于调整大小的挂载选项
size # 为此 tmpfs 分配的 Bytes 。默认值: 物理内存的一半 nr_blocks # 与 size 相同，但是以 PAGE_SIZE 为单位。 nr_inodes # 为此 tmpfs 分配的最大 inodes 数。默认值: 物理内存 pages 的一半</description></item></channel></rss>