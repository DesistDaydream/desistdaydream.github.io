<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>文件管理 on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Filesystem/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/</link><description>Recent content in 文件管理 on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Filesystem/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/index.xml" rel="self" type="application/rss+xml"/><item><title>文件管理</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Filesystem/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Filesystem/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/</guid><description>概述 参考：
Wiki, Computer file Wiki-Category,Computer files Wiki, End of file 公众号，小林 coding-一口气搞懂「文件系统」，就靠这 25 张图了 另一个公众号 从文件系统文章可以看出来，File(文件) 是一个组织存储在计算机中数据的逻辑概念，以便让人们可以清楚得知道每一段数据的起始位置、结束位置，甚至可以通过为文件命名来立刻反应过来这段数据的作用。
所谓的查看文件，其实是指找到一段数据的开头和结尾，并查看这段数据。对于程序员来说文件是一个很简单的概念，我们只需要将其理解为一个 N byte 的序列就可以了：**b1, b2, b3, b4, &amp;hellip;&amp;hellip;. bN。**程序员使用 I/O 最终都逃不过文件。
所有的 I/O 设备都被抽象为了文件这个概念，Everything is File(一切皆文件)，磁盘、网络数据、终端，甚至进程间通信工具管道等都被当做文件对待。
所有的 I/O 操作也都是通过文件读写来实现的，这一非常优雅的抽象可以让程序员使用一套接口就能实现所有 I/O 操作。
常用的 I/O 操作接口一般有以下几类：
打开文件，open 改变读写位置，seek 文件读写，read、write 关闭文件，close 程序员通过这几个接口几乎可以实现所有 I/O 操作，这就是文件这个概念的强大之处。
在 Linux 中一切皆文件，目录也是文件的一种类型，就连块设备、套接字、终端、管道等等，都被当做 File(文件)来对待。
下面是一个在 Linux 中最常见的列出文件的命令 ls -l 所能查看的文件基本信息
~]# ls -lh total 20K lrwxrwxrwx. 1 root root 7 May 24 2019 bin -&amp;gt; usr/bin dr-xr-xr-x.</description></item><item><title>Inode</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Filesystem/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/Inode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Filesystem/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/Inode/</guid><description>概述 参考：
Wiki, Inode 知乎，本地文件系统小计（二）：inode Index node(索引节点，简称 inode) 是 Unix 风格的文件系统中的一种数据结构。每个索引节点保存了文件系统中的一个文件系统对象(i.e.文件、目录等)的元信息数据，但不包括数据内容或者文件名。
注：数据的内容存放在硬盘的一个 block(区域块) 中，通过 inode(索引节点) 来访问 block，每个索引节点都会命名一个文件名。文件的索引节点通过 ls -i 命令查看
~]# ls -i / 12 bin 1 dev 6029313 home 14 lib32 16 libx32 2097153 media 1572865 opt 1048577 root 17 sbin 1966081 srv 1 sys 4325377 usr 2 boot 1835009 etc 13 lib 15 lib64 11 lost+found 4063233 mnt 1 proc 1 run 4980737 snap 18 swap.img 3801089 tmp 1179649 var 所以，linux 里的所有文件，都相当于一个 Hard link(硬连接)，链接到 inode 号上，展现在屏幕上的只是该文件内容的文件名。就算几个文件名字不一样的文件只要节点号相同，那么这几个文件的内容是就是相同的。想查看文件内容，就要找到该文件名对应的 inode 然后通过 inode 找到 block，找到 block 就能看到其中的内容了。</description></item><item><title>Symbolic link</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Filesystem/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/Symbolic-link/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Filesystem/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/Symbolic-link/</guid><description>概述 参考：
Wiki, Symbolic link Symbolic link(符号链接，也称为 symlink 或 soft link(软链接)) 是一种文件，其目的是通过指定路径来指向文件或目录（称为“目标”），这也是一种 文件管理 的方式。
Symbolic link 与目标文件本质上是两个文件，两者的 Inode 不一样。</description></item><item><title>File Descriptor(文件描述符)</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Filesystem/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/File-Descriptor%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Filesystem/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/File-Descriptor%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6/</guid><description>概述 参考
Wiki, FileDescriptor CSDN，Linux 中的文件描述符与打开文件之间的关系 File Descriptor(文件描述符，简称 FD，有的地方也称为Handle(句柄)) 是一个抽象的指示符(也可以称为索引)，用于应用程序便捷得访问文件或其他 I/O 资源。
在 Linux 系统中一切皆可以看成是文件，文件又可分为：普通文件、目录文件、链接文件、设备文件等等。File Descriptor(文件描述符) 是内核为了高效管理已被打开的文件所创建的索引值，其是一个非负整数（通常是小整数），用于指代被打开的文件，所有执行 I/O 操作的系统调用都通过文件描述符。
每个进程(除了 Daemon 进程)，一般总是会打开三个文件(/dev/null 或 /dev/pts/0 或其他等等)，并占用前三个文件描述符，0 是标准输入，1 是标准输出，2 是标准错误。比如现在有这么一个程序，我们打开它:
cat &amp;gt; test-fd.sh &amp;lt;&amp;lt;EOF #!/bin/bash while true; do date sleep 10 done EOF chmod 755 test-fd.sh bash test-fd.sh # 查看该进程的 fd 目录可以看到有如下几个文件 ~]# ll /proc/4082/fd total 0 lrwx------ 1 root root 64 Nov 22 18:27 0 -&amp;gt; /dev/pts/0 lrwx------ 1 root root 64 Nov 22 18:27 1 -&amp;gt; /dev/pts/0 lrwx------ 1 root root 64 Nov 22 18:27 2 -&amp;gt; /dev/pts/0 lr-x------ 1 root root 64 Nov 22 18:27 255 -&amp;gt; /root/test-fd.</description></item></channel></rss>