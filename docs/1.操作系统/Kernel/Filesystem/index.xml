<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Filesystem on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Filesystem/</link><description>Recent content in Filesystem on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Filesystem/index.xml" rel="self" type="application/rss+xml"/><item><title>Filesystem</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Filesystem/Filesystem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Filesystem/Filesystem/</guid><description>概述 参考：
Wiki - Category，Computer file systems Linux 性能优化实践 - 文件系统 公众号，小林 coding - 一口气搞懂「文件系统」，就靠这 25 张图了 图片来源: https://www.thomas-krenn.com/en/wiki/Linux_Storage_Stack_Diagram
从上面的结构可以看到，文件系统的作用就是用来接收用户的操作，并将数据保存到物理硬盘的。可以想见，如果没有文件系统帮助用户操作，那么人们又怎么能将数据保存到存储设备上呢~
File System(文件系统，简称 FS) 是一种对存储设备上的数据，进行组织管理的机制。组织方式的不同，就会形成不同的文件系统。
如果没有文件系统，放置在存储介质中的数据将是一个庞大的数据主体，无法分辨一个数据在哪里停止以及下一个数据在哪里开始。通过将数据分成多个部分并给每个部分命名，可以轻松地隔离和识别数据。每组数据称为 File(文件)。所以，用于管理这些文件及其名称的结构和逻辑规则，称为 File System(文件系统)。
什么是 File(文件) 详见《文件管理》章节
文件组织结构 文件管理详解见 文件管理
为了方便管理，Linux 的文件系统为每个文件都分配了两个数据结构。
index node(索引节点，简称 inode) # 记录文件的元数据。inode 编号、文件大小、访问权限、修改日期、数据的位置等。 inode 和文件一一对应，它跟文件内容一样，都会被持久化到存储的磁盘中。所以inode 同样占用磁盘空间。 inode 包含文件的元数据，具体来说有以下内容： 文件的字节数 文件拥有者的 User ID 文件的 Group ID 文件的读、写、执行权限 文件的时间戳，共有三个：ctime 指 inode 上一次变动的时间，mtime 指文件内容上一次变动的时间，atime 指文件上一次打开的时间。 链接数，即有多少文件名指向这个 inode 文件数据 block 的位置 directory entry(目录项，简称 dentry) # 记录文件的名字、inode 指针、与其他目录项的关联关系。 多个关联的目录项，就构成了文件系统的目录结构(一个层次化的树形结构)。不过，不同于 inode，目录项是由内核维护的一个内存数据结构，所以通常也被叫做 dentries(目录项缓存)。 这个层次化的树形结构就像下图一样：</description></item><item><title>Mount(挂载)</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Filesystem/Mount%E6%8C%82%E8%BD%BD/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Filesystem/Mount%E6%8C%82%E8%BD%BD/</guid><description>概述 参考：
Manual(手册),fstab(5) Manual(手册),mount(8) 注意：
mount 命令无法列出 bind 类型的挂载(比如 Docker 和 Containerd 的 bind 类型挂载，不知道如何列出)。
不过 findmnt 命令可以列出使用 mount --bind XX XX 挂载的目录，效果如下
~]# findmnt TARGET SOURCE FSTYPE OPTIONS / /dev/vda3 ext4 rw,relatime ...... └─/mnt/cdrom /dev/vda3[/root/downloads/webvirtcloud] ext4 rw,relatime 关联文件与配置 /etc/fstab # 包含各种 file systems 的描述性信息。系统启动时，根据该文件配置挂载分区到指定路径。
/etc/mtab # 是一个软连接，连接到 /proc/self/mounts
XXX.mount # 以 .mount 为后缀的 unit 文件，是由 systemd 管理的文件系统描述信息。systemd 将根据这些 unit 文件，将指定的文件系统挂载到系统中。
fstab 文件详解 File System Table(文件系统表，简称 fstab) 是一个关于文件系统的静态信息文件。默认路径为 /etc/fstab
fstab 包含操作系统中可以挂载的文件系统的描述性信息。每个描述信息占用单独一行，每行的各个字段由制表符或空格分隔。fsck、mount、umount 命令在执行某些操作时将会顺序读取该文件的每一行。</description></item><item><title>FHS(文件系统层次标准)</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Filesystem/FHS%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%B1%82%E6%AC%A1%E6%A0%87%E5%87%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Filesystem/FHS%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%B1%82%E6%AC%A1%E6%A0%87%E5%87%86/</guid><description>概述 参考：
Linux 基金会参考标准,文件系统层次标准 Wiki, FHS Filesystem Hierarchy Standard(文件系统层次标准，简称 FHS) 为文件系统的每个区域指定指导原则，指定所需的最少文件和目录
该标准使：
用于预测已安装文件和目录位置的软件 用户预测已安装文件和目录的位置。 我们这样做：
为文件系统的每个区域指定指导原则， 指定所需的最少文件和目录， 列举原则的例外情况，以及 列举发生历史冲突的具体案例。 FHS 文件用于：
独立软件供应商创建符合 FHS 的应用程序，并与符合 FHS 的发行版合作， 操作系统创建者提供符合 FHS 的系统，以及 用户了解并维护系统的 FHS 合规性。 FHS 文件的范围有限：
本地文件的本地放置是本地问题，因此 FHS 不会试图篡夺系统管理员。 FHS 解决了需要在多方（例如本地站点、发行版、应用程序、文档等）之间协调文件放置的问题。 Unix 目录结构的来历 Unix（包含 Linux）的初学者，常常会很困惑，不明白目录结构的含义何在。 举例来说，根目录下面有一个子目录 /bin，用于存放二进制程序。但是，/usr 子目录下面还有 /usr/bin，以及 /usr/local/bin，也用于存放二进制程序；某些系统甚至还有 /opt/bin。它们有何区别？
长久以来，我也感到很费解，不明白为什么这样设计。像大多数人一样，我只是根据《Unix 文件系统结构标准》（Filesystem Hierarchy Standard），死记硬背不同目录的区别。
昨天，我读到了 Rob Landley 的，这才恍然大悟，原来 Unix 目录结构是历史造成的。
话说 1969 年，Ken Thompson 和 Dennis Ritchie 在小型机 PDP-7 上发明了 Unix。1971 年，他们将主机升级到了 PDP-11。</description></item><item><title>DMA 与 零拷贝</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Filesystem/DMA-%E4%B8%8E-%E9%9B%B6%E6%8B%B7%E8%B4%9D/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Filesystem/DMA-%E4%B8%8E-%E9%9B%B6%E6%8B%B7%E8%B4%9D/</guid><description>概述 参考：
公众号，原来 8 张图，就可以搞懂「零拷贝」了 前言 磁盘可以说是计算机系统最慢的硬件之一，读写速度相差内存 10 倍以上，所以针对优化磁盘的技术非常的多，比如零拷贝、直接 I/O、异步 I/O 等等，这些优化的目的就是为了提高系统的吞吐量，另外操作系统内核中的磁盘高速缓存区，可以有效的减少磁盘的访问次数。
这次，我们就以「文件传输」作为切入点，来分析 I/O 工作方式，以及如何优化传输文件的性能。
正文 为什么要有 DMA 技术? 在没有 DMA 技术前，I/O 的过程是这样的：
CPU 发出对应的指令给磁盘控制器，然后返回； 磁盘控制器收到指令后，于是就开始准备数据，会把数据放入到磁盘控制器的内部缓冲区中，然后产生一个中断； CPU 收到中断信号后，停下手头的工作，接着把磁盘控制器的缓冲区的数据一次一个字节地读进自己的寄存器，然后再把寄存器里的数据写入到内存，而在数据传输的期间 CPU 是无法执行其他任务的。 为了方便你理解，我画了一副图：
可以看到，整个数据的传输过程，都要需要 CPU 亲自参与搬运数据的过程，而且这个过程，CPU 是不能做其他事情的。
简单的搬运几个字符数据那没问题，但是如果我们用千兆网卡或者硬盘传输大量数据的时候，都用 CPU 来搬运的话，肯定忙不过来。
计算机科学家们发现了事情的严重性后，于是就发明了 DMA 技术，也就是 Direct Memory Access(直接内存访问，简称 DMA) 技术。
什么是 DMA 技术？简单理解就是，在进行 I/O 设备和内存的数据传输的时候，数据搬运的工作全部交给 DMA 控制器，而 CPU 不再参与任何与数据搬运相关的事情，这样 CPU 就可以去处理别的事务。
那使用 DMA 控制器进行数据传输的过程究竟是什么样的呢？下面我们来具体看看。
具体过程：
用户进程调用 read 方法，向操作系统发出 I/O 请求，请求读取数据到自己的内存缓冲区中，进程进入阻塞状态； 操作系统收到请求后，进一步将 I/O 请求发送 DMA，然后让 CPU 执行其他任务； DMA 进一步将 I/O 请求发送给磁盘； 磁盘收到 DMA 的 I/O 请求，把数据从磁盘读取到磁盘控制器的缓冲区中，当磁盘控制器的缓冲区被读满后，向 DMA 发起中断信号，告知自己缓冲区已满； DMA 收到磁盘的信号，将磁盘控制器缓冲区中的数据拷贝到内核缓冲区中，此时不占用 CPU，CPU 可以执行其他任务； 当 DMA 读取了足够多的数据，就会发送中断信号给 CPU； CPU 收到 DMA 的信号，知道数据已经准备好，于是将数据从内核拷贝到用户空间，系统调用返回； 可以看到， 整个数据传输的过程，CPU 不再参与数据搬运的工作，而是全程由 DMA 完成，但是 CPU 在这个过程中也是必不可少的，因为传输什么数据，从哪里传输到哪里，都需要 CPU 来告诉 DMA 控制器。</description></item></channel></rss>