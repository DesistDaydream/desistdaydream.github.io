<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦的站点 – Memory</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Memory/</link><description>Recent content in Memory on 断念梦的站点</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Memory/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Memory</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Memory/Memory/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Memory/Memory/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.kernel.org/doc/html/latest/mm/index.html">Linux Kernel 文档，子系统 - 内存管理文档&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.kernel.org/doc/html/latest/admin-guide/mm/">Linux Kernel 文档，管理员指南 - 内存管理&lt;/a>&lt;/li>
&lt;li>《操作系统导论》&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/HJB_ATQFNqG82YBCRr97CA">公众号-小林coding，真棒！ 20 张图揭开内存管理的迷雾，瞬间豁然开朗&lt;/a>
&lt;ul>
&lt;li>该文是对《操作系统导论》一书中内存部分的提炼与总结。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/0g3sS63yM2qbBja-blw5Dw">公众号-码农的荒岛求生，神秘！申请内存时底层发生了什么？&lt;/a>(malloc 简介)&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Linux Memory Management Subsystem(Linux 内存管理子系统)&lt;/strong> 负责管理系统中的内存。这包括 &lt;strong>virtual memory(虚拟内存)&lt;/strong> 和 &lt;strong>demand paging(请求分页)&lt;/strong> 的实现、&lt;a href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Linux%20Kernel/Linux%20Kernel.md">Linux Kernel&lt;/a>内部结构和用户空间程序的内存分配、将文件映射到进程地址空间、etc.&lt;/p>
&lt;p>Linux 内存管理是一个非常复杂系统，有很多可以配置的设置，这些设置可以通过 &lt;a href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Filesystem/%E7%89%B9%E6%AE%8A%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/proc.md">proc&lt;/a> 修改，还可以使用 &lt;a href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux%20%E7%AE%A1%E7%90%86/Linux%20%E5%86%85%E6%A0%B8%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/sysctl.md">sysctl&lt;/a> 程序进行查询和调整，具体参数详见 Kernel 参数中的 &lt;a href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Linux%20Kernel/Kernel%20%E5%8F%82%E6%95%B0/vm(%E5%86%85%E5%AD%98%E7%9B%B8%E5%85%B3%E5%8F%82%E6%95%B0).md">vm(内存相关参数)&lt;/a>。&lt;/p>
&lt;h2 id="基础概念">基础概念&lt;a class="td-heading-self-link" href="#%e5%9f%ba%e7%a1%80%e6%a6%82%e5%bf%b5" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Linux 中的内存管理是一个经过多年发展的复杂系统，包含越来越多的功能来支持从 &lt;em>微控制器(nommu)&lt;/em> 到 &lt;em>超级计算机&lt;/em> 的各种系统，下面是一些常见的内存管理中的概念和术语&lt;/p>
&lt;blockquote>
&lt;p>没有 &lt;strong>Memory management unit(内存管理单元，简称 &lt;a href="https://desistdaydream.github.io/docs/0.%E8%AE%A1%E7%AE%97%E6%9C%BA/Memory/MMU.md">MMU&lt;/a>)&lt;/strong> 的系统的内存管理称为 nommu，它绝对值得一个专门的文档。然而，随着时代的发展，nommu 的系统或设备已经基本不存在了，这里我们假设 MMU 可用并且 CPU 可以将虚拟地址转换为物理地址。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;strong>Virtual Memory(虚拟内存)&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Huge Pages(大页)&lt;/strong> # &lt;a href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Memory/Huge%20Pages.md">Huge Pages&lt;/a> 是一种解决 Page table 过大、TLB 未命中过多、etc. 问题的最简单和基本的方式。&lt;/li>
&lt;li>&lt;strong>Zones(区域)&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Nodes(节点)&lt;/strong> # &lt;a href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Memory/NUMA.md">NUMA&lt;/a> 架构中的一个存储体称为一个 Node。&lt;/li>
&lt;li>&lt;strong>Page cache(页缓存)&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Anonymous Memory(匿名内存)&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Reclaim(回收)&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Compaction(压实)&lt;/strong> # 整理碎片化的内存，将空闲内存整理到一片连续的区域中，让已经使用的内存也处于连续的区域&lt;/li>
&lt;li>&lt;strong>OOM killer(内存不足杀手)&lt;/strong> # 当程序启动申请内存但是不足时，如何停止某些权重低的内存以供新程序运行。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Virtual Memory(虚拟内存)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.kernel.org/doc/html/latest/admin-guide/mm/concepts.html#virtual-memory-primer">https://www.kernel.org/doc/html/latest/admin-guide/mm/concepts.html#virtual-memory-primer&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Zones(区域)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.kernel.org/doc/html/latest/admin-guide/mm/concepts.html#zones">https://www.kernel.org/doc/html/latest/admin-guide/mm/concepts.html#zones&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Page cache(页缓存)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.kernel.org/doc/html/latest/admin-guide/mm/concepts.html#page-cache">https://www.kernel.org/doc/html/latest/admin-guide/mm/concepts.html#page-cache&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Anonymous Memory(匿名内存)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.kernel.org/doc/html/latest/admin-guide/mm/concepts.html#anonymous-memory">https://www.kernel.org/doc/html/latest/admin-guide/mm/concepts.html#anonymous-memory&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Reclaim(回收)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.kernel.org/doc/html/latest/admin-guide/mm/concepts.html#reclaim">https://www.kernel.org/doc/html/latest/admin-guide/mm/concepts.html#reclaim&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Compaction(压实)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.kernel.org/doc/html/latest/admin-guide/mm/concepts.html#compaction">https://www.kernel.org/doc/html/latest/admin-guide/mm/concepts.html#compaction&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>OOM killer&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.kernel.org/doc/html/latest/admin-guide/mm/concepts.html#oom-killer">https://www.kernel.org/doc/html/latest/admin-guide/mm/concepts.html#oom-killer&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="virtual-memory虚拟内存">Virtual Memory(虚拟内存)&lt;a class="td-heading-self-link" href="#virtual-memory%e8%99%9a%e6%8b%9f%e5%86%85%e5%ad%98" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>对任何一台计算机而言，其内存以及其它资源都是有限的。为了让有限的&lt;strong>物理内存&lt;/strong>满足应用程序对内存的大需求量，Linux 采用了称为 &lt;strong>虚拟内存&lt;/strong>的内存管理方式。Linux 将内存划分为容易处理的“内存页”（对于大部分体系结构来说都是 4KiB）。Linux 包括了管理可用内存的方式，以及物理和虚拟映射所使用的硬件机制。&lt;/p>
&lt;p>不过内存管理要管理的可不止 4KiB 缓冲区。Linux 提供了对 4KiB 缓冲区的抽象，例如 slab 分配器。这种内存管理模式使用 4KiB 缓冲区为基数，然后从中分配结构，并跟踪内存页使用情况，比如哪些内存页是满的，哪些页面没有完全使用，哪些页面为空。这样就允许该模式根据系统需要来动态调整内存使用。&lt;/p>
&lt;p>为了支持多个用户使用内存，有时会出现可用内存被消耗光的情况。由于这个原因，页面可以移出内存并放入磁盘中。这个过程称为交换，因为页面会被从内存交换到硬盘上。内存管理的源代码可以在 &lt;a href="https://github.com/torvalds/linux/tree/master/mm">./linux/mm&lt;/a> 中找到。&lt;/p>
&lt;hr>
&lt;p>大学里捣鼓过的单片机是没有操作系统的，所以每次写完代码，都需要借助工具把程序烧录进去，这样程序才能跑起来。&lt;/p>
&lt;p>另外，单片机的 CPU 是直接操作内存的「物理地址」。&lt;/p>
&lt;p>在这种情况下，要想在内存中同时运行两个程序是不可能的。如果第一个程序在 2000 的位置写入一个新的值，将会擦掉第二个程序存放在相同位置上的所有内容，所以同时运行两个程序是根本行不通的，这两个程序会立刻崩溃。&lt;/p>
&lt;p>操作系统是如何解决这个问题呢？&lt;/p>
&lt;p>这里关键的问题是这两个程序都引用了绝对物理地址，而这正是我们最需要避免的。&lt;/p>
&lt;p>我们可以把进程所使用的地址「隔离」开来，即让操作系统为每个进程分配独立的一套「虚拟地址」，人人都有，大家自己玩自己的地址就行，互不干涉。但是有个前提每个进程都不能访问物理地址，至于虚拟地址最终怎么落到物理内存里，对进程来说是透明的，操作系统已经把这些都安排的明明白白了。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/odexpg/1616167919100-24627511-d5f5-4663-9a2c-76b4b3b75664.jpeg" alt="进程的中间层">&lt;/p>
&lt;p>操作系统会提供一种机制，将不同进程的虚拟地址和不同内存的物理地址映射起来。&lt;/p>
&lt;p>如果程序要访问虚拟地址的时候，由操作系统转换成不同的物理地址，这样不同的进程运行的时候，写入的是不同的物理地址，这样就不会冲突了。&lt;/p>
&lt;p>于是，这里就引出了两种地址的概念：&lt;/p>
&lt;ul>
&lt;li>我们程序所使用的内存地址叫做虚拟内存地址（Virtual Memory Address）&lt;/li>
&lt;li>实际存在硬件里面的空间地址叫物理内存地址（Physical Memory Address）。&lt;/li>
&lt;/ul>
&lt;p>操作系统引入了虚拟内存，进程持有的虚拟地址会通过 CPU 芯片中的内存管理单元（MMU）的映射关系，来转换变成物理地址，然后再通过物理地址访问内存，如下图所示：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/odexpg/1616167919111-7b5c26a3-f885-4ae8-bb6b-2bfab9cef4c9.jpeg" alt="">&lt;/p>
&lt;h1 id="address-translation地址转换">Address translation(地址转换)&lt;a class="td-heading-self-link" href="#address-translation%e5%9c%b0%e5%9d%80%e8%bd%ac%e6%8d%a2" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>使用 Virtual Memory 实现了在单一的物理内存上为多个运行的进程（所有进程共享内存）构建一个私有的、可能很大的内存地址空间的抽象。使得程序互相隔离，让程序与程序之间不会互相影响（程序动态增长挤占内存空间&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>、etc.）、提高了运行效率&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>、etc.。&lt;/p>
&lt;p>但是现在有个问题，程序使用的虚拟地址和系统管理的物理地址之间是如何关联起来的？&lt;/p>
&lt;p>主要依赖 &lt;strong>Address translation(地址转换)&lt;/strong> 功能，有时也称为 Hardware-based address translation(基于硬件的地址转换)。地址转换现阶段有两种方式，分别是&lt;strong>内存分段&lt;/strong>和&lt;strong>内存分页&lt;/strong>，分段是比较早提出的。&lt;/p>
&lt;h2 id="memory-segmentation内存分段">Memory Segmentation(内存分段)&lt;a class="td-heading-self-link" href="#memory-segmentation%e5%86%85%e5%ad%98%e5%88%86%e6%ae%b5" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>程序是由若干个逻辑分段组成的，如可由代码分段、数据分段、栈段、堆段组成。不同的段是有不同的属性的，所以就用 Segmentation(分段) 的形式把这些段分离出来。&lt;/p>
&lt;p>分段机制下，虚拟地址和物理地址是如何映射的？&lt;/p>
&lt;p>分段机制下的虚拟地址由两部分组成，段选择因子和段内偏移量。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/odexpg/1616167919128-c7568177-0bee-4534-84c6-694d268dd85d.jpeg" alt="">&lt;/p>
&lt;p>内存分段-寻址的方式&lt;/p>
&lt;ul>
&lt;li>段选择因子就保存在段寄存器里面。段选择因子里面最重要的是段号，用作段表的索引。段表里面保存的是这个段的基地址、段的界限和特权等级等。&lt;/li>
&lt;li>虚拟地址中的段内偏移量应该位于 0 和段界限之间，如果段内偏移量是合法的，就将段基地址加上段内偏移量得到物理内存地址。&lt;/li>
&lt;/ul>
&lt;p>在上面了，知道了虚拟地址是通过段表与物理地址进行映射的，分段机制会把程序的虚拟地址分成 4 个段，每个段在段表中有一个项，在这一项找到段的基地址，再加上偏移量，于是就能找到物理内存中的地址，如下图：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/odexpg/1616167919115-2be6810a-fa1d-41f1-92f8-b6390209f15a.jpeg" alt="内存分段-虚拟地址与物理地址">&lt;/p>
&lt;p>如果要访问段 3 中偏移量 500 的虚拟地址，我们可以计算出物理地址为，段 3 基地址 7000 + 偏移量 500 = 7500。&lt;/p>
&lt;p>分段的办法很好，解决了程序本身不需要关心具体的物理内存地址的问题，但它也有一些不足之处：&lt;/p>
&lt;ul>
&lt;li>第一个就是内存碎片的问题。&lt;/li>
&lt;li>第二个就是内存交换的效率低的问题。&lt;/li>
&lt;/ul>
&lt;p>接下来，说说为什么会有这两个问题。&lt;/p>
&lt;p>我们先来看看，分段为什么会产生内存碎片的问题？&lt;/p>
&lt;p>我们来看看这样一个例子。假设有 1G 的物理内存，用户执行了多个程序，其中：&lt;/p>
&lt;ul>
&lt;li>游戏占用了 512MB 内存&lt;/li>
&lt;li>浏览器占用了 128MB 内存&lt;/li>
&lt;li>音乐占用了 256 MB 内存。&lt;/li>
&lt;/ul>
&lt;p>这个时候，如果我们关闭了浏览器，则空闲内存还有 1024 - 512 - 256 = 256MB。&lt;/p>
&lt;p>如果这个 256MB 不是连续的，被分成了两段 128 MB 内存，这就会导致没有空间再打开一个 200MB 的程序。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/odexpg/1616167919115-056b2c69-14f1-48d7-8162-7915c80cd090.jpeg" alt="内存碎片的问题">&lt;/p>
&lt;p>这里的内存碎片的问题共有两处地方：&lt;/p>
&lt;ul>
&lt;li>外部内存碎片，也就是产生了多个不连续的小物理内存，导致新的程序无法被装载；&lt;/li>
&lt;li>内部内存碎片，程序所有的内存都被装载到了物理内存，但是这个程序有部分的内存可能并不是很常使用，这也会导致内存的浪费；&lt;/li>
&lt;/ul>
&lt;p>针对上面两种内存碎片的问题，解决的方式会有所不同。&lt;/p>
&lt;p>解决外部内存碎片的问题就是内存交换。&lt;/p>
&lt;p>可以把音乐程序占用的那 256MB 内存写到硬盘上，然后再从硬盘上读回来到内存里。不过再读回的时候，我们不能装载回原来的位置，而是紧紧跟着那已经被占用了的 512MB 内存后面。这样就能空缺出连续的 256MB 空间，于是新的 200MB 程序就可以装载进来。&lt;/p>
&lt;p>这个内存交换空间，在 Linux 系统里，也就是我们常看到的 Swap 空间，这块空间是从硬盘划分出来的，用于内存与硬盘的空间交换。&lt;/p>
&lt;p>再来看看，分段为什么会导致内存交换效率低的问题？&lt;/p>
&lt;p>对于多进程的系统来说，用分段的方式，内存碎片是很容易产生的，产生了内存碎片，那不得不重新 Swap 内存区域，这个过程会产生性能瓶颈。&lt;/p>
&lt;p>因为硬盘的访问速度要比内存慢太多了，每一次内存交换，我们都需要把一大段连续的内存数据写到硬盘上。&lt;/p>
&lt;p>所以，如果内存交换的时候，交换的是一个占内存空间很大的程序，这样整个机器都会显得卡顿。&lt;/p>
&lt;p>为了解决内存分段的内存碎片和内存交换效率低的问题，就出现了内存分页。&lt;/p>
&lt;h2 id="memory-paging内存分页">Memory Paging(内存分页)&lt;a class="td-heading-self-link" href="#memory-paging%e5%86%85%e5%ad%98%e5%88%86%e9%a1%b5" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;blockquote>
&lt;p>TODO: 这种做法是不是可以用 数据库 里的设计模式进行类比？&lt;/p>
&lt;p>内存分页也有利于更好的利用内存，运行的进程越多，若是分页不够小（比如一页 1GiB）的话，一个只需要 512 MiB 的程序，居然申请内存是，系统直接提供了 1 GiB，那么剩下的 512 MiB 内存就被完全浪费了&lt;/p>
&lt;/blockquote>
&lt;p>分段的好处就是能产生连续的内存空间，但是会出现内存碎片和内存交换的空间太大的问题。&lt;/p>
&lt;p>要解决这些问题，那么就要想出能少出现一些内存碎片的办法。另外，当需要进行内存交换的时候，让需要交换写入或者从磁盘装载的数据更少一点，这样就可以解决问题了。这个办法，也就是内存分页（Paging）。&lt;/p>
&lt;p>分页是把整个虚拟和物理内存空间切成一段段固定尺寸的大小。这样一个连续并且尺寸固定的内存空间，我们叫页（Page）。在 Linux 下，每一页的大小为 4KB。&lt;/p>
&lt;p>虚拟地址与物理地址之间通过页表来映射，如下图：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/odexpg/1616167919131-ca0a6877-5b8c-49fc-8982-ff9bd4f247a2.jpeg" alt="">&lt;/p>
&lt;p>内存映射&lt;/p>
&lt;p>页表实际上存储在 CPU 的内存管理单元 （MMU） 中，于是 CPU 就可以直接通过 MMU，找出要实际要访问的物理内存地址。&lt;/p>
&lt;p>而当进程访问的虚拟地址在页表中查不到时，系统会产生一个缺页异常，进入系统内核空间分配物理内存、更新进程页表，最后再返回用户空间，恢复进程的运行。&lt;/p>
&lt;p>分页是怎么解决分段的内存碎片、内存交换效率低的问题？&lt;/p>
&lt;p>由于内存空间都是预先划分好的，也就不会像分段会产生间隙非常小的内存，这正是分段会产生内存碎片的原因。而采用了分页，那么释放的内存都是以页为单位释放的，也就不会产生无法给进程使用的小内存。&lt;/p>
&lt;p>如果内存空间不够，操作系统会把其他正在运行的进程中的「最近没被使用」的内存页面给释放掉，也就是暂时写在硬盘上，称为换出（Swap Out）。一旦需要的时候，再加载进来，称为换入（Swap In）。所以，一次性写入磁盘的也只有少数的一个页或者几个页，不会花太多时间，内存交换的效率就相对比较高。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/odexpg/1616167919157-7b5cfce7-6d02-4a53-8193-49982f06399f.jpeg" alt="换入换出">&lt;/p>
&lt;p>更进一步地，分页的方式使得我们在加载程序的时候，不再需要一次性都把程序加载到物理内存中。我们完全可以在进行虚拟内存和物理内存的页之间的映射之后，并不真的把页加载到物理内存里，而是只有在程序运行中，需要用到对应虚拟内存页里面的指令和数据时，再加载到物理内存里面去。&lt;/p>
&lt;p>分页机制下，虚拟地址和物理地址是如何映射的？&lt;/p>
&lt;p>在分页机制下，虚拟地址分为两部分，页号和页内偏移。页号作为页表的索引，页表包含物理页每页所在物理内存的基地址，这个基地址与页内偏移的组合就形成了物理内存地址，见下图。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/odexpg/1616167919140-c0d128d7-0238-450c-981a-8477221071a4.jpeg" alt="内存分页寻址">&lt;/p>
&lt;p>总结一下，对于一个内存地址转换，其实就是这样三个步骤：&lt;/p>
&lt;ul>
&lt;li>把虚拟内存地址，切分成页号和偏移量；&lt;/li>
&lt;li>根据页号，从页表里面，查询对应的物理页号；&lt;/li>
&lt;li>直接拿物理页号，加上前面的偏移量，就得到了物理内存地址。&lt;/li>
&lt;/ul>
&lt;p>下面举个例子，虚拟内存中的页通过页表映射为了物理内存中的页，如下图：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/odexpg/1616167919128-24ebe4f8-b4c8-407b-8dc5-98da804e5e0c.jpeg" alt="虚拟页与物理页的映射">&lt;/p>
&lt;p>这看起来似乎没什么毛病，但是放到实际中操作系统，这种简单的分页是肯定是会有问题的。&lt;/p>
&lt;p>简单的分页有什么缺陷吗？&lt;/p>
&lt;p>有空间上的缺陷。&lt;/p>
&lt;p>因为操作系统是可以同时运行非常多的进程的，那这不就意味着页表会非常的庞大。&lt;/p>
&lt;p>在 32 位的环境下，虚拟地址空间共有 4GB，假设一个页的大小是 4KB（2^12），那么就需要大约 100 万 （2^20） 个页，每个「页表项」需要 4 个字节大小来存储，那么整个 4GB 空间的映射就需要有 4MB 的内存来存储页表。&lt;/p>
&lt;p>这 4MB 大小的页表，看起来也不是很大。但是要知道每个进程都是有自己的虚拟地址空间的，也就说都有自己的页表。&lt;/p>
&lt;p>那么，100 个进程的话，就需要 400MB 的内存来存储页表，这是非常大的内存了，更别说 64 位的环境了。&lt;/p>
&lt;h3 id="tlb">TLB&lt;a class="td-heading-self-link" href="#tlb" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>虚拟地址到物理地址的转换就多了几道转换的工序，这显然就降低了这俩地址转换的速度，也就是带来了时间上的开销。&lt;/p>
&lt;p>程序是有局部性的，即在一段时间内，整个程序的执行仅限于程序中的某一部分。相应地，执行所访问的存储空间也局限于某个内存区域。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/odexpg/1616167919150-0d7ed5fb-19de-4398-84ca-e77a4c67ab46.jpeg" alt="程序的局部性">&lt;/p>
&lt;p>我们就可以利用这一特性，把最常访问的几个页表项存储到访问速度更快的硬件，于是计算机科学家们，就在 CPU 芯片中，加入了一个专门存放程序最常访问的页表项的 Cache，这个 Cache 就是 Translation Lookaside Buffer(转译后备缓冲器，简称 &lt;a href="https://desistdaydream.github.io/docs/0.%E8%AE%A1%E7%AE%97%E6%9C%BA/Memory/TLB.md">TLB&lt;/a>、缓存、快表)等。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/odexpg/1616167919151-684032a9-151a-4c86-be9a-7535abfc6444.jpeg" alt="地址转换">&lt;/p>
&lt;p>在 CPU 芯片里面，封装了内存管理单元（Memory Management Unit）芯片，它用来完成地址转换和 TLB 的访问与交互。&lt;/p>
&lt;p>有了 TLB 后，那么 CPU 在寻址时，会先查 TLB，如果没找到，才会继续查常规的页表。&lt;/p>
&lt;p>TLB 的命中率其实是很高的，因为程序最常访问的页就那么几个。但是当某个程序使用的内存量过大时， TLB 的命中率就会下降，比如数据库程序。&lt;/p>
&lt;h1 id="解决页表过大问题">解决页表过大问题&lt;a class="td-heading-self-link" href="#%e8%a7%a3%e5%86%b3%e9%a1%b5%e8%a1%a8%e8%bf%87%e5%a4%a7%e9%97%ae%e9%a2%98" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="huge-pages">Huge pages&lt;a class="td-heading-self-link" href="#huge-pages" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>提高每个 Page 的容量。这是最简单直接的减小页表并提高 TLB 命中的方式。这些比默认 Page 容量大的 Pages 称为 &lt;a href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Memory/Huge%20Pages.md">Huge Pages&lt;/a>(大页)&lt;/p>
&lt;p>Linux 中可以在改变原始 Page 容量的情况下，让一块内存空间使用另一个 PageSize，这个使用了更大 PageSize 的地方称为 HugePage Memory&lt;/p>
&lt;blockquote>
&lt;p>[!Warning]
这种方法的主要问题在于，大内存页会导致每页内的浪费，这被称为内部碎片（internalfragmentation）问题（因为浪费在分配单元内部）。因此，结果是应用程序会分配页，但只用每页的一小部分，而内存很快就会充满这些过大的页。因此，大多数系统在常见的情况下使用相对较小的页大小：4KB（如 x86）或 8KB（如 SPARCv9）。&lt;/p>
&lt;/blockquote>
&lt;p>问题不会如此简单地解决。&lt;/p>
&lt;h2 id="分段与分页混合内存管理">分段与分页混合内存管理&lt;a class="td-heading-self-link" href="#%e5%88%86%e6%ae%b5%e4%b8%8e%e5%88%86%e9%a1%b5%e6%b7%b7%e5%90%88%e5%86%85%e5%ad%98%e7%ae%a1%e7%90%86" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>内存分段和内存分页并不是对立的，它们是可以组合起来在同一个系统中使用的，那么组合起来后，通常称为段页式内存管理。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/odexpg/1616167919147-0a7f2b14-9364-4a8e-ba60-c48e8cdf65d0.jpeg" alt="段页式地址空间">&lt;/p>
&lt;p>段页式内存管理实现的方式：&lt;/p>
&lt;ul>
&lt;li>先将程序划分为多个有逻辑意义的段，也就是前面提到的分段机制；&lt;/li>
&lt;li>接着再把每个段划分为多个页，也就是对分段划分出来的连续空间，再划分固定大小的页；&lt;/li>
&lt;/ul>
&lt;p>这样，地址结构就由段号、段内页号和页内位移三部分组成。&lt;/p>
&lt;p>用于段页式地址变换的数据结构是每一个程序一张段表，每个段又建立一张页表，段表中的地址是页表的起始地址，而页表中的地址则为某页的物理页号，如图所示：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/odexpg/1616167919172-07b25f4c-02c8-47f2-a784-d89ba249e13e.jpeg" alt="段页式管理中的段表、页表与内存的关系">&lt;/p>
&lt;p>段页式地址变换中要得到物理地址须经过三次内存访问：&lt;/p>
&lt;ul>
&lt;li>第一次访问段表，得到页表起始地址；&lt;/li>
&lt;li>第二次访问页表，得到物理页号；&lt;/li>
&lt;li>第三次将物理页号与页内位移组合，得到物理地址。&lt;/li>
&lt;/ul>
&lt;p>可用软、硬件相结合的方法实现段页式地址变换，这样虽然增加了硬件成本和系统开销，但提高了内存的利用率。&lt;/p>
&lt;h2 id="多级页表">多级页表&lt;a class="td-heading-self-link" href="#%e5%a4%9a%e7%ba%a7%e9%a1%b5%e8%a1%a8" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>要解决上面的问题，就需要采用的是一种叫作多级页表（Multi-Level Page Table）的解决方案。&lt;/p>
&lt;p>在前面我们知道了，对于单页表的实现方式，在 32 位和页大小 4KB 的环境下，一个进程的页表需要装下 100 多万个「页表项」，并且每个页表项是占用 4 字节大小的，于是相当于每个页表需占用 4MB 大小的空间。&lt;/p>
&lt;p>我们把这个 100 多万个「页表项」的单级页表再分页，将页表（一级页表）分为 1024 个页表（二级页表），每个表（二级页表）中包含 1024 个「页表项」，形成二级分页。如下图所示：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/odexpg/1616167919185-cc42b53c-b247-413b-b8ea-9545012c17a3.jpeg" alt="二级分页">&lt;/p>
&lt;p>你可能会问，分了二级表，映射 4GB 地址空间就需要 4KB（一级页表）+ 4MB（二级页表）的内存，这样占用空间不是更大了吗？&lt;/p>
&lt;p>当然如果 4GB 的虚拟地址全部都映射到了物理内上的，二级分页占用空间确实是更大了，但是，我们往往不会为一个进程分配那么多内存。&lt;/p>
&lt;p>其实我们应该换个角度来看问题，还记得计算机组成原理里面无处不在的局部性原理么？&lt;/p>
&lt;p>每个进程都有 4GB 的虚拟地址空间，而显然对于大多数程序来说，其使用到的空间远未达到 4GB，因为会存在部分对应的页表项都是空的，根本没有分配，对于已分配的页表项，如果存在最近一定时间未访问的页表，在物理内存紧张的情况下，操作系统会将页面换出到硬盘，也就是说不会占用物理内存。&lt;/p>
&lt;p>如果使用了二级分页，一级页表就可以覆盖整个 4GB 虚拟地址空间，但如果某个一级页表的页表项没有被用到，也就不需要创建这个页表项对应的二级页表了，即可以在需要时才创建二级页表。做个简单的计算，假设只有 20% 的一级页表项被用到了，那么页表占用的内存空间就只有 4KB（一级页表） + 20% * 4MB（二级页表）= 0.804MB&lt;/p>
&lt;p>，这对比单级页表的 4MB 是不是一个巨大的节约？&lt;/p>
&lt;p>那么为什么不分级的页表就做不到这样节约内存呢？我们从页表的性质来看，保存在内存中的页表承担的职责是将虚拟地址翻译成物理地址。假如虚拟地址在页表中找不到对应的页表项，计算机系统就不能工作了。所以页表一定要覆盖全部虚拟地址空间，不分级的页表就需要有 100 多万个页表项来映射，而二级分页则只需要 1024 个页表项（此时一级页表覆盖到了全部虚拟地址空间，二级页表在需要时创建）。&lt;/p>
&lt;p>我们把二级分页再推广到多级页表，就会发现页表占用的内存空间更少了，这一切都要归功于对局部性原理的充分应用。&lt;/p>
&lt;p>对于 64 位的系统，两级分页肯定不够了，就变成了四级目录，分别是：&lt;/p>
&lt;ul>
&lt;li>全局页目录项 PGD（Page Global Directory）；&lt;/li>
&lt;li>上层页目录项 PUD（Page Upper Directory）；&lt;/li>
&lt;li>中间页目录项 PMD（Page Middle Directory）；&lt;/li>
&lt;li>页表项 PTE（Page Table Entry）；&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/odexpg/1616167919165-47fbe1d8-e5a2-421b-9215-5152f9f6d457.jpeg" alt="四级目录">&lt;/p>
&lt;h1 id="linux-内存管理">Linux 内存管理&lt;a class="td-heading-self-link" href="#linux-%e5%86%85%e5%ad%98%e7%ae%a1%e7%90%86" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>那么，Linux 操作系统采用了哪种方式来管理内存呢？&lt;/p>
&lt;p>在回答这个问题前，我们得先看看 Intel 处理器的发展历史。&lt;/p>
&lt;p>早期 Intel 的处理器从 80286 开始使用的是段式内存管理。但是很快发现，光有段式内存管理而没有页式内存管理是不够的，这会使它的 X86 系列会失去市场的竞争力。因此，在不久以后的 80386 中就实现了对页式内存管理。也就是说，80386 除了完成并完善从 80286 开始的段式内存管理的同时还实现了页式内存管理。&lt;/p>
&lt;p>但是这个 80386 的页式内存管理设计时，没有绕开段式内存管理，而是建立在段式内存管理的基础上，这就意味着，页式内存管理的作用是在由段式内存管理所映射而成的的地址上再加上一层地址映射。&lt;/p>
&lt;p>由于此时段式内存管理映射而成的地址不再是“物理地址”了，Intel 就称之为“线性地址”（也称虚拟地址）。于是，段式内存管理先将逻辑地址映射成线性地址，然后再由页式内存管理将线性地址映射成物理地址。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/odexpg/1616167919178-17fb261b-55fa-44ac-a553-ed8a842e9080.jpeg" alt="Intel X86 逻辑地址解析过程">&lt;/p>
&lt;p>这里说明下逻辑地址和线性地址：&lt;/p>
&lt;ul>
&lt;li>程序所使用的地址，通常是没被段式内存管理映射的地址，称为逻辑地址；&lt;/li>
&lt;li>通过段式内存管理映射的地址，称为线性地址，也叫虚拟地址；&lt;/li>
&lt;/ul>
&lt;p>逻辑地址是「段式内存管理」转换前的地址，线性地址则是「页式内存管理」转换前的地址。&lt;/p>
&lt;p>了解完 Intel 处理器的发展历史后，我们再来说说 Linux 采用了什么方式管理内存？&lt;/p>
&lt;p>Linux 内存主要采用的是页式内存管理，但同时也不可避免地涉及了段机制。&lt;/p>
&lt;p>这主要是上面 Intel 处理器发展历史导致的，因为 Intel X86 CPU 一律对程序中使用的地址先进行段式映射，然后才能进行页式映射。既然 CPU 的硬件结构是这样，Linux 内核也只好服从 Intel 的选择。&lt;/p>
&lt;p>但是事实上，Linux 内核所采取的办法是使段式映射的过程实际上不起什么作用。也就是说，“上有政策，下有对策”，若惹不起就躲着走。&lt;/p>
&lt;p>Linux 系统中的每个段都是从 0 地址开始的整个 4GB 虚拟空间（32 位环境下），也就是所有的段的起始地址都是一样的。这意味着，Linux 系统中的代码，包括操作系统本身的代码和应用程序代码，所面对的地址空间都是线性地址空间（虚拟地址），这种做法相当于屏蔽了处理器中的逻辑地址概念，段只被用于访问控制和内存保护。&lt;/p>
&lt;p>我们再来瞧一瞧，Linux 的虚拟地址空间是如何分布的？&lt;/p>
&lt;p>在 Linux 操作系统中，虚拟地址空间的内部又被分为内核空间和用户空间两部分，不同位数的系统，地址空间的范围也不同。比如最常见的 32 位和 64 位系统，如下所示：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/odexpg/1616167919191-4099f869-9dbe-462c-90f6-ff02cec5a9a6.jpeg" alt="用户空间与内存空间">&lt;/p>
&lt;p>通过这里可以看出：&lt;/p>
&lt;ul>
&lt;li>32 位系统的内核空间占用 1G，位于最高处，剩下的 3G 是用户空间；&lt;/li>
&lt;li>64 位系统的内核空间和用户空间都是 128T，分别占据整个内存空间的最高和最低处，剩下的中间部分是未定义的。&lt;/li>
&lt;/ul>
&lt;p>再来说说，内核空间与用户空间的区别：&lt;/p>
&lt;ul>
&lt;li>进程在用户态时，只能访问用户空间内存；&lt;/li>
&lt;li>只有进入内核态后，才可以访问内核空间的内存；&lt;/li>
&lt;/ul>
&lt;p>虽然每个进程都各自有独立的虚拟内存，但是每个虚拟内存中的内核地址，其实关联的都是相同的物理内存。这样，进程切换到内核态后，就可以很方便地访问内核空间内存。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/odexpg/1616167919223-81c46952-4cf1-4b83-a9a5-2bdd118168b6.jpeg" alt="">&lt;/p>
&lt;p>每个进程的内核空间都是一致的&lt;/p>
&lt;p>接下来，进一步了解虚拟空间的划分情况，用户空间和内核空间划分的方式是不同的，内核空间的分布情况就不多说了。&lt;/p>
&lt;p>我们看看用户空间分布的情况，以 32 位系统为例，我画了一张图来表示它们的关系：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/odexpg/1616167919192-30c3ec2b-724a-4146-9bc4-3c630ea69e13.jpeg" alt="">&lt;/p>
&lt;p>虚拟内存空间划分&lt;/p>
&lt;p>通过这张图你可以看到，用户空间内存，从低到高分别是 7 种不同的内存段：&lt;/p>
&lt;ul>
&lt;li>程序文件段，包括二进制可执行代码；&lt;/li>
&lt;li>已初始化数据段，包括静态常量；&lt;/li>
&lt;li>未初始化数据段，包括未初始化的静态变量；&lt;/li>
&lt;li>堆段，包括动态分配的内存，从低地址开始向上增长；&lt;/li>
&lt;li>文件映射段，包括动态库、共享内存等，从低地址开始向上增长（跟硬件和内核版本有关）&lt;/li>
&lt;li>栈段，包括局部变量和函数调用的上下文等。栈的大小是固定的，一般是 8 MB。当然系统也提供了参数，以便我们自定义大小；&lt;/li>
&lt;/ul>
&lt;p>在这 7 个内存段中，堆和文件映射段的内存是动态分配的。比如说，使用 C 标准库的 malloc() 或者 mmap() ，就可以分别在堆和文件映射段动态分配内存。&lt;/p>
&lt;h1 id="总结">总结&lt;a class="td-heading-self-link" href="#%e6%80%bb%e7%bb%93" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>为了在多进程环境下，使得进程之间的内存地址不受影响，相互隔离，于是操作系统就为每个进程独立分配一套的虚拟地址空间，每个程序只关心自己的虚拟地址就可以，实际上大家的虚拟地址都是一样的，但分布到物理地址内存是不一样的。作为程序，也不用关心物理地址的事情。&lt;/p>
&lt;p>每个进程都有自己的虚拟空间，而物理内存只有一个，所以当启用了大量的进程，物理内存必然会很紧张，于是操作系统会通过内存交换技术，把不常使用的内存暂时存放到硬盘（换出），在需要的时候再装载回物理内存（换入）。&lt;/p>
&lt;p>那既然有了虚拟地址空间，那必然要把虚拟地址「映射」到物理地址，这个事情通常由操作系统来维护。&lt;/p>
&lt;p>那么对于虚拟地址与物理地址的映射关系，可以有分段和分页的方式，同时两者结合都是可以的。&lt;/p>
&lt;p>内存分段是根据程序的逻辑角度，分成了栈段、堆段、数据段、代码段等，这样可以分离出不同属性的段，同时是一块连续的空间。但是每个段的大小都不是统一的，这就会导致内存碎片和内存交换效率低的问题。&lt;/p>
&lt;p>于是，就出现了内存分页，把虚拟空间和物理空间分成大小固定的页，如在 Linux 系统中，每一页的大小为 4KB。由于分了页后，就不会产生细小的内存碎片。同时在内存交换的时候，写入硬盘也就一个页或几个页，这就大大提高了内存交换的效率。&lt;/p>
&lt;p>再来，为了解决简单分页产生的页表过大的问题，就有了多级页表，它解决了空间上的问题，但这就会导致 CPU 在寻址的过程中，需要有很多层表参与，加大了时间上的开销。于是根据程序的局部性原理，在 CPU 芯片中加入了 TLB，负责缓存最近常被访问的页表项，大大提高了地址的转换速度。&lt;/p>
&lt;p>Linux 系统主要采用了分页管理，但是由于 Intel 处理器的发展史，Linux 系统无法避免分段管理。于是 Linux 就把所有段的基地址设为 0，也就意味着所有程序的地址空间都是线性地址空间（虚拟地址），相当于屏蔽了 CPU 逻辑地址的概念，所以段只被用于访问控制和内存保护。&lt;/p>
&lt;p>另外，Linxu 系统中虚拟空间分布可分为用户态和内核态两部分，其中用户态的分布：代码段、全局变量、BSS、函数栈、堆内存、映射区。&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>《操作系统导论》 - 13.3&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>《操作系统导论》 - 13.2&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Docs: Memory 的分配</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Memory/Memory-%E7%9A%84%E5%88%86%E9%85%8D/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Memory/Memory-%E7%9A%84%E5%88%86%E9%85%8D/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/HXRGr90baCvM-NQbPIgn-g">公众号-小林coding，我做了个实验！&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h3 id="linux-进程的内存分布长什么样">Linux 进程的内存分布长什么样？&lt;a class="td-heading-self-link" href="#linux-%e8%bf%9b%e7%a8%8b%e7%9a%84%e5%86%85%e5%ad%98%e5%88%86%e5%b8%83%e9%95%bf%e4%bb%80%e4%b9%88%e6%a0%b7" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>在 Linux 操作系统中，虚拟地址空间的内部又被分为&lt;strong>内核空间和用户空间&lt;/strong>两部分，不同位数的系统，地址空间的范围也不同。比如最常见的 32 位和 64 位系统，如下所示：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qcafxw/1647849537444-83cb3179-0921-484f-942a-7b6d033ae1dc.jpeg" alt="">&lt;/p>
&lt;p>通过这张图你可以看到，用户空间内存从&lt;strong>低到高&lt;/strong>分别是 6 种不同的内存段：&lt;/p>
&lt;p>通过这里可以看出：&lt;/p>
&lt;ul>
&lt;li>32 位系统的内核空间占用 1G，位于最高处，剩下的 3G 是用户空间；&lt;/li>
&lt;li>64 位系统的内核空间和用户空间都是 128T，分别占据整个内存空间的最高和最低处，剩下的中间部分是未定义的。&lt;/li>
&lt;/ul>
&lt;p>再来说说，内核空间与用户空间的区别：&lt;/p>
&lt;ul>
&lt;li>进程在用户态时，只能访问用户空间内存；&lt;/li>
&lt;li>只有进入内核态后，才可以访问内核空间的内存；&lt;/li>
&lt;/ul>
&lt;p>虽然每个进程都各自有独立的虚拟内存，但是&lt;strong>每个虚拟内存中的内核地址，其实关联的都是相同的物理内存&lt;/strong>。这样，进程切换到内核态后，就可以很方便地访问内核空间内存。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qcafxw/1647849537507-75fe030f-a12b-49df-bfce-577a2b2d85d4.jpeg" alt="">&lt;/p>
&lt;p>接下来，进一步了解虚拟空间的划分情况，用户空间和内核空间划分的方式是不同的，内核空间的分布情况就不多说了。&lt;/p>
&lt;p>我们看看用户空间分布的情况，以 32 位系统为例，我画了一张图来表示它们的关系：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qcafxw/1647849537503-d90ad8ad-2ce1-4231-b2b8-f14d7f38112f.png" alt="">&lt;/p>
&lt;ul>
&lt;li>程序文件段，包括二进制可执行代码；&lt;/li>
&lt;li>已初始化数据段，包括静态常量；&lt;/li>
&lt;li>未初始化数据段，包括未初始化的静态变量；&lt;/li>
&lt;li>堆段，包括动态分配的内存，从低地址开始向上增长；&lt;/li>
&lt;li>文件映射段，包括动态库、共享内存等，从低地址开始向上增长（跟硬件和内核版本有关 ）；&lt;/li>
&lt;li>栈段，包括局部变量和函数调用的上下文等。栈的大小是固定的，一般是 &lt;code>8 MB&lt;/code>。当然系统也提供了参数，以便我们自定义大小；&lt;/li>
&lt;/ul>
&lt;p>在这 6 个内存段中，堆和文件映射段的内存是动态分配的。比如说，使用 C 标准库的 &lt;code>malloc()&lt;/code> 或者 &lt;code>mmap()&lt;/code> ，就可以分别在堆和文件映射段动态分配内存。&lt;/p>
&lt;h3 id="malloc-是如何分配内存的">malloc 是如何分配内存的？&lt;a class="td-heading-self-link" href="#malloc-%e6%98%af%e5%a6%82%e4%bd%95%e5%88%86%e9%85%8d%e5%86%85%e5%ad%98%e7%9a%84" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>实际上，malloc() 并不是系统调用，而是 C 库里的函数，用于动态分配内存。&lt;/p>
&lt;p>malloc 申请内存的时候，会有两种方式向操作系统申请堆内存。&lt;/p>
&lt;ul>
&lt;li>方式一：通过 brk() 系统调用从堆分配内存&lt;/li>
&lt;li>方式二：通过 mmap() 系统调用在文件映射区域分配内存；&lt;/li>
&lt;/ul>
&lt;p>方式一实现的方式很简单，就是通过 brk() 函数将「堆顶」指针向高地址移动，获得新的内存空间。如下图：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qcafxw/1647849113737-98d13bdb-f9e9-46a7-85e9-4e6a93a3d879.png" alt="">&lt;/p>
&lt;p>方式二通过 mmap() 系统调用中「私有匿名映射」的方式，在文件映射区分配一块内存，也就是从文件映射区“偷”了一块内存。如下图：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qcafxw/1647849113729-809ce535-f2eb-4103-8095-597a2d986d50.png" alt="">&lt;/p>
&lt;blockquote>
&lt;p>什么场景下 malloc()   会通过 brk() 分配内存？又是什么场景下通过 mmap() 分配内存？&lt;/p>
&lt;/blockquote>
&lt;p>malloc() 源码里默认定义了一个阈值：&lt;/p>
&lt;ul>
&lt;li>如果用户分配的内存小于 128 KB，则通过 brk() 申请内存；&lt;/li>
&lt;li>如果用户分配的内存大于 128 KB，则通过 mmap()   申请内存；&lt;/li>
&lt;/ul>
&lt;h3 id="malloc--分配的是物理内存吗">malloc()   分配的是物理内存吗？&lt;a class="td-heading-self-link" href="#malloc--%e5%88%86%e9%85%8d%e7%9a%84%e6%98%af%e7%89%a9%e7%90%86%e5%86%85%e5%ad%98%e5%90%97" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>不是的，&lt;strong>malloc() 分配的是虚拟内存&lt;/strong>。&lt;/p>
&lt;p>如果分配后的虚拟内存没有被访问的话，是不会将虚拟内存不会映射到物理内存，这样就不会占用物理内存了。&lt;/p>
&lt;p>只有在访问已分配的虚拟地址空间的时候，操作系统通过查找页表，发现虚拟内存对应的页没有在物理内存中，就会触发缺页中断，然后操作系统会建立虚拟内存和物理内存之间的映射关系。&lt;/p>
&lt;h3 id="malloc1--会分配多大的虚拟内存">malloc(1)   会分配多大的虚拟内存？&lt;a class="td-heading-self-link" href="#malloc1--%e4%bc%9a%e5%88%86%e9%85%8d%e5%a4%9a%e5%a4%a7%e7%9a%84%e8%99%9a%e6%8b%9f%e5%86%85%e5%ad%98" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>malloc() 在分配内存的时候，并不是老老实实按用户预期申请的字节数来分配内存空间大小，而是&lt;strong>会预分配更大的空间作为内存池&lt;/strong>。&lt;/p>
&lt;p>具体会预分配多大的空间，跟 malloc 使用的内存管理器有关系，我们就以 malloc 默认的内存管理器（Ptmalloc2）来分析。&lt;/p>
&lt;p>接下里，我们做个实验，用下面这个代码，通过 malloc 申请 1 字节的内存时，看看操作系统实际分配了多大的内存空间。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#include&lt;/span> &lt;span style="color:#8f5902;font-style:italic">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#include&lt;/span> &lt;span style="color:#8f5902;font-style:italic">&amp;lt;malloc.h&amp;gt;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">main&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">printf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;使用cat /proc/%d/maps查看内存分配&lt;/span>&lt;span style="color:#4e9a06">\n&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#000">getpid&lt;/span>&lt;span style="color:#000;font-weight:bold">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">//申请1字节的内存
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">addr&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">malloc&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">printf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;此1字节的内存起始地址：%x&lt;/span>&lt;span style="color:#4e9a06">\n&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">addr&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">printf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;使用cat /proc/%d/maps查看内存分配&lt;/span>&lt;span style="color:#4e9a06">\n&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#000">getpid&lt;/span>&lt;span style="color:#000;font-weight:bold">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">//将程序阻塞，当输入任意字符时才往下执行
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">getchar&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">//释放内存
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">free&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">addr&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">printf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;释放了1字节的内存，但heap堆并不会释放&lt;/span>&lt;span style="color:#4e9a06">\n&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">getchar&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行代码：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qcafxw/1647849113760-5d095529-0f4a-4f12-8acd-61c5cd7603cb.png" alt="">&lt;/p>
&lt;p>我们可以通过 /proc//maps 文件查看进程的内存分布情况。我在 maps 文件通过此 1 字节的内存起始地址过滤出了内存地址的范围。&lt;/p>
&lt;p>&lt;code>[root@xiaolin ~]# cat /proc/3191/maps | grep d730 00d73000-00d94000 rw-p 00000000 00:00 0                                  [heap]&lt;/code>&lt;/p>
&lt;p>这个例子分配的内存小于 128 KB，所以是通过 brk() 系统调用向堆空间申请的内存，因此可以看到最右边有 [heap] 的标识。&lt;/p>
&lt;p>可以看到，堆空间的内存地址范围是 00d73000-00d94000，这个范围大小是 132KB，也就说明了 &lt;strong>malloc(1) 实际上预分配 132K 字节的内存&lt;/strong>。&lt;/p>
&lt;p>可能有的同学注意到了，程序里打印的内存起始地址是 &lt;code>d73010&lt;/code>，而 maps 文件显示堆内存空间的起始地址是 &lt;code>d73000&lt;/code>，为什么会多出来 &lt;code>0x10&lt;/code> （16 字节）呢？这个问题，我们先放着，后面会说。&lt;/p>
&lt;h3 id="free-释放内存会归还给操作系统吗">free 释放内存，会归还给操作系统吗？&lt;a class="td-heading-self-link" href="#free-%e9%87%8a%e6%94%be%e5%86%85%e5%ad%98%e4%bc%9a%e5%bd%92%e8%bf%98%e7%bb%99%e6%93%8d%e4%bd%9c%e7%b3%bb%e7%bb%9f%e5%90%97" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>我们在上面的进程往下执行，看看通过 free() 函数释放内存后，堆内存还在吗？&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qcafxw/1647849113734-9725eecf-f87c-4a53-8e13-440a400091c9.png" alt="">&lt;/p>
&lt;p>从下图可以看到，通过 free 释放内存后，堆内存还是存在的，并没有归还给操作系统。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qcafxw/1647849113802-9898e5ce-9d7b-4b98-aae1-597399246638.png" alt="">&lt;/p>
&lt;p>这是因为与其把这 1 字节释放给操作系统，不如先缓存着放进 malloc 的内存池里，当进程再次申请 1 字节的内存时就可以直接复用，这样速度快了很多。&lt;/p>
&lt;p>当然，当进程退出后，操作系统就会回收进程的所有资源。&lt;/p>
&lt;p>上面说的 free 内存后堆内存还存在，是针对 malloc 通过  brk() 方式申请的内存的情况。&lt;/p>
&lt;p>如果 malloc 通过 mmap 方式申请的内存，free 释放内存后就会归归还给操作系统。&lt;/p>
&lt;p>我们做个实验验证下， 通过 malloc 申请 128 KB 字节的内存，来使得 malloc 通过 mmap 方式来分配内存。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#include&lt;/span> &lt;span style="color:#8f5902;font-style:italic">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#include&lt;/span> &lt;span style="color:#8f5902;font-style:italic">&amp;lt;malloc.h&amp;gt;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">main&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">//申请1字节的内存
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">addr&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">malloc&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">128&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1024&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">printf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;此128KB字节的内存起始地址：%x&lt;/span>&lt;span style="color:#4e9a06">\n&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">addr&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">printf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;使用cat /proc/%d/maps查看内存分配&lt;/span>&lt;span style="color:#4e9a06">\n&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#000">getpid&lt;/span>&lt;span style="color:#000;font-weight:bold">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">//将程序阻塞，当输入任意字符时才往下执行
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">getchar&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">//释放内存
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">free&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">addr&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">printf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;释放了128KB字节的内存，内存也归还给了操作系统&lt;/span>&lt;span style="color:#4e9a06">\n&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">getchar&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行代码：
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qcafxw/1647849114274-0f6c3f2a-07aa-4e7f-97a6-092f7f35025b.png" alt="">
查看进程的内存的分布情况，可以发现最右边没有 [head] 标志，说明是通过 mmap 以匿名映射的方式从文件映射区分配的匿名内存。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qcafxw/1647849114342-227882ac-b9dd-482a-a6f0-4ba35996220b.png" alt="">&lt;/p>
&lt;p>然后我们释放掉这个内存看看：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qcafxw/1647849114378-959f166b-9323-4490-a4f3-39c0c3207f7e.png" alt="">&lt;/p>
&lt;p>再次查看该 128 KB 内存的起始地址，可以发现已经不存在了，说明归还给了操作系统。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qcafxw/1647849114444-e2d4c129-03e2-4fe2-a1a9-37180ca0908e.png" alt="">&lt;/p>
&lt;p>对于 「malloc 申请的内存，free 释放内存会归还给操作系统吗？」这个问题，我们可以做个总结了：&lt;/p>
&lt;ul>
&lt;li>malloc 通过 &lt;strong>brk()&lt;/strong> 方式申请的内存，free 释放内存的时候，&lt;strong>并不会把内存归还给操作系统，而是缓存在 malloc 的内存池中，待下次使用&lt;/strong>；&lt;/li>
&lt;li>malloc 通过 &lt;strong>mmap()&lt;/strong> 方式申请的内存，free 释放内存的时候，&lt;strong>会把内存归还给操作系统，内存得到真正的释放&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;h3 id="为什么不全部使用-mmap-来分配内存">为什么不全部使用 mmap 来分配内存？&lt;a class="td-heading-self-link" href="#%e4%b8%ba%e4%bb%80%e4%b9%88%e4%b8%8d%e5%85%a8%e9%83%a8%e4%bd%bf%e7%94%a8-mmap-%e6%9d%a5%e5%88%86%e9%85%8d%e5%86%85%e5%ad%98" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>因为向操作系统申请内存，是要通过系统调用的，执行系统调用是要进入内核态的，然后在回到用户态，运行态的切换会耗费不少时间。&lt;/p>
&lt;p>所以，申请内存的操作应该避免频繁的系统调用，如果都用 mmap 来分配内存，等于每次都要执行系统调用。&lt;/p>
&lt;p>另外，因为 mmap 分配的内存每次释放的时候，都会归还给操作系统，于是每次  mmap 分配的虚拟地址都是缺页状态的，然后在第一次访问该虚拟地址的时候，就会触发缺页中断。&lt;/p>
&lt;p>也就是说，&lt;strong>频繁通过 mmap 分配的内存话，不仅每次都会发生运行态的切换，还会发生缺页中断（在第一次访问虚拟地址后），这样会导致 CPU 消耗较大&lt;/strong>。&lt;/p>
&lt;p>为了改进这两个问题，malloc 通过 brk() 系统调用在堆空间申请内存的时候，由于堆空间是连续的，所以直接预分配更大的内存来作为内存池，当内存释放的时候，就缓存在内存池中。&lt;/p>
&lt;p>&lt;strong>等下次在申请内存的时候，就直接从内存池取出对应的内存块就行了，而且可能这个内存块的虚拟地址与物理地址的映射关系还存在，这样不仅减少了系统调用的次数，也减少了缺页中断的次数，这将大大降低 CPU 的消耗&lt;/strong>。&lt;/p>
&lt;h3 id="既然-brk-那么牛逼为什么不全部使用-brk-来分配">既然 brk 那么牛逼，为什么不全部使用 brk 来分配？&lt;a class="td-heading-self-link" href="#%e6%97%a2%e7%84%b6-brk-%e9%82%a3%e4%b9%88%e7%89%9b%e9%80%bc%e4%b8%ba%e4%bb%80%e4%b9%88%e4%b8%8d%e5%85%a8%e9%83%a8%e4%bd%bf%e7%94%a8-brk-%e6%9d%a5%e5%88%86%e9%85%8d" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>前面我们提到通过 brk 从堆空间分配的内存，并不会归还给操作系统，那么我们那考虑这样一个场景。&lt;/p>
&lt;p>如果我们连续申请了 10k，20k，30k 这三片内存，如果 10k 和 20k 这两片释放了，变为了空闲内存空间，如果下次申请的内存小于 30k，那么就可以重用这个空闲内存空间。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qcafxw/1647849114533-92d5ebc1-a301-40f1-be2a-bdde99d27696.png" alt="">&lt;/p>
&lt;p>但是如果下次申请的内存大于 30k，没有可用的空闲内存空间，必须向 OS 申请，实际使用内存继续增大。&lt;/p>
&lt;p>因此，随着系统频繁地 malloc 和 free ，尤其对于小块内存，堆内将产生越来越多不可用的碎片，导致“内存泄露”。而这种“泄露”现象使用 valgrind 是无法检测出来的。&lt;/p>
&lt;p>所以，malloc 实现中，充分考虑了 sbrk 和 mmap 行为上的差异及优缺点，默认分配大块内存 (128KB) 才使用 mmap 分配内存空间。&lt;/p>
&lt;h3 id="free-函数只传入一个内存地址为什么能知道要释放多大的内存">free() 函数只传入一个内存地址，为什么能知道要释放多大的内存？&lt;a class="td-heading-self-link" href="#free-%e5%87%bd%e6%95%b0%e5%8f%aa%e4%bc%a0%e5%85%a5%e4%b8%80%e4%b8%aa%e5%86%85%e5%ad%98%e5%9c%b0%e5%9d%80%e4%b8%ba%e4%bb%80%e4%b9%88%e8%83%bd%e7%9f%a5%e9%81%93%e8%a6%81%e9%87%8a%e6%94%be%e5%a4%9a%e5%a4%a7%e7%9a%84%e5%86%85%e5%ad%98" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>还记得，我前面提到， malloc 返回给用户态的内存起始地址比进程的堆空间起始地址多了 16 字节吗？&lt;/p>
&lt;p>这个多出来的 16 字节就是保存了该内存块的描述信息，比如有该内存块的大小。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qcafxw/1647849114916-d9935c19-fc65-4487-805c-eee1912d50a9.png" alt="">&lt;/p>
&lt;p>这样当执行 free() 函数时，free 会对传入进来的内存地址向左偏移 16 字节，然后从这个 16 字节的分析出当前的内存块的大小，自然就知道要释放多大的内存了。&lt;/p></description></item><item><title>Docs: Memory 的缓存</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Memory/Memory-%E7%9A%84%E7%BC%93%E5%AD%98/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Memory/Memory-%E7%9A%84%E7%BC%93%E5%AD%98/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>linux 中每个程序启动之后都会占用内存，一般情况下是不会把内存全部占满。那么空闲的这部分内存用来干什么呢？~&lt;/p>
&lt;p>Linux 会充分利用这些空闲的内存，设计思想是：内存空闲还不如拿来多缓存一些数据，等下次程序再次访问这些数据速度就快了，而如果程序要使用内存而系统中内存又不足时，这时不是使用交换分区，而是快速回收部分 cached，将它们留给用户程序使用。&lt;/p>
&lt;p>比如说：当使用该程序时，就会从硬盘中读取该程序的内容，这一部分读取的内容会加载到内存中(caceh 中)，因为内存比硬盘的读写速度更快，所以当下次再使用该程序需要读取该程序的内容时，直接从内存就能读取了。而 buff 中的数据一般是程序运行中产生的(比如玩游戏的存档)，当程序结束之前，需要把再 buff 中的数据写入到硬盘中以便永久保存(要不再运行这游戏，不就没存档了么~哈哈)。&lt;/p>
&lt;p>内存管理做了很多精心的设计，除了对 dentry 进行缓存（用于 VFS，加速文件路径名到 inode 的转换），还采取了两种主要 Cache 方式：Buffer Cache 和 Page Cache，目的就是为了提升磁盘 IO 的性能。从低速的块设备(e.g.硬盘)上读取数据会暂时保存在内存中，即使数据在当时已经不再需要了，但在应用程序下一次访问该数据时，它可以从内存中直接读取，从而绕开低速的块设备，从而提高系统的整体性能。&lt;/p>
&lt;p>因此，可以看出，buffers/cached 真是百益而无一害，真正的坏处可能让用户产生一种错觉——Linux 耗内存！其实不然，Linux 并没有吃掉你的内存，只要还未使用到交换分区，你的内存所剩无几时，你应该感到庆幸，因为 Linux 缓存了大量的数据，也许某一次应用程序读取数据时，就会用到这些已经缓存了的数据！&lt;/p>
&lt;h2 id="buffer-与-cache">Buffer 与 Cache&lt;a class="td-heading-self-link" href="#buffer-%e4%b8%8e-cache" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>free 命令中看到的 buff 与 cache 是从虚拟文件系统 /proc/meminfo 中获取的数据&lt;/p>
&lt;ul>
&lt;li>buff # 内核缓冲器用到的内存，对应的是 /proc/meminfo 中 Buffers 的值&lt;/li>
&lt;li>Buffers 是对原始磁盘块的临时存储，也就是来&lt;strong>缓存从磁盘块读写的数据&lt;/strong>，通常不会特别大(20MB 左右)。&lt;/li>
&lt;li>这样，内核就可以把分散的写集中起来，统一优化磁盘的写入，比如可以把多次小的写合并成单次大的写，等等。&lt;/li>
&lt;li>cache # 内核 PageCache(页缓存) 和 Slab 用到的内存，对应的是 /proc/meminfo 中的 Cached 与 SReclaimable 之和&lt;/li>
&lt;li>Cached 是从磁盘读写文件时的页缓存，也就是用来&lt;strong>缓存从文件读写的数据&lt;/strong>。&lt;/li>
&lt;li>读取过一个文件后会缓存，下次访问过这些文件数据时，就可以直接从内存中快速获取，而不需要再次访问缓慢的磁盘。&lt;/li>
&lt;li>或者在向文件写入数据时，先将数据写入到内存中，然后系统后台再逐步将数据从内存写入到磁盘中。&lt;/li>
&lt;li>SReclaimable 是 Slab 的一部分。Slab 包括两部分，其中的可回收部分，用 SReclaimable 记录；而不可回收部分，用 SUnreclaim 记录。&lt;/li>
&lt;/ul>
&lt;h3 id="实验示例">实验示例&lt;a class="td-heading-self-link" href="#%e5%ae%9e%e9%aa%8c%e7%a4%ba%e4%be%8b" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>写文件时会用到 Cache 缓存数据，写磁盘时则会用到 Buffer 缓存数据&lt;/p>
&lt;p>读文件时数据会缓存到 Cache 中，而读磁盘时数据会缓存到 Buffer 中。&lt;/p>
&lt;p>&lt;strong>简单来说，Buffer 是对磁盘数据的缓存，而 Cache 是文件数据的缓存，他们既会用在读请求中，也会用在写请求中。&lt;/strong>&lt;/p>
&lt;p>上述结论的实验是通过 dd 命令分别读写磁盘和文件(参考 dd 命令用法)，并使用 vmstat 命令观察缓存变化情况得出的结论。&lt;/p>
&lt;p>&lt;strong>通过缓存提高读取速度的实验示例&lt;/strong>&lt;/p>
&lt;p>创建一个大文件，读取(以便让文件缓存到内存中)该文件查看消耗的时间，再次读取(已经缓存到内存中)该文件查看消耗的时间&lt;/p>
&lt;p>1.首先生成一个 1G 的大文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># dd if=/dev/zero of=bigfile bs=1M count=1000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>1000+0 records in
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>1000+0 records out
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#0000cf;font-weight:bold">1048576000&lt;/span> bytes &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>1.0 GB&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> copied, 0.687036 s, 1.5 GB/s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>2.清空缓存&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># echo 1 &amp;gt; /proc/sys/vm/drop_caches&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># free -h&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> total used free shared buff/cache available
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Mem: 3.7G 326M 3.1G 16M 307M 3.1G
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Swap: 4.0G 8.7M 4.0G
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>3.读入这个文件，测试消耗的时间&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># time cat bigfile &amp;gt; /dev/null&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>real 0m0.614s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>user 0m0.011s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sys 0m0.412s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>bonding&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># free -h&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> total used free shared buff/cache available
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Mem: 3.7G 326M 2.1G 16M 1.3G 3.1G
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Swap: 4.0G 8.7M 4.0G
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>4.再次读入该文件，测试消耗的时间&lt;/p>
&lt;pre tabindex="0">&lt;code>~]# time cat bigfile &amp;gt; /dev/null
real 0m0.217s
user 0m0.011s
sys 0m0.206s
&lt;/code>&lt;/pre>&lt;p>从上面看出，第一次读这个 1G 的文件大约耗时 0.6s，而第二次再次读的时候，只耗时 0.2s，提升了 3 倍。如果是 centos6 的话，会足足提升 60 倍！&lt;/p>
&lt;h2 id="swap">Swap&lt;a class="td-heading-self-link" href="#swap" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>在物理磁盘上划分的一块空间，用于当做内存使用，称为 swap，一般情况用不到。但是当连续内存空间不足的时候，需要使用 Swap 对内存中的数据进行换入和换出，以腾出来一个连续的大空间供新启动的程序使用。&lt;/p>
&lt;p>Swap 分区（也称交换分区）是硬盘上的一个区域，被指定为操作系统可以临时存储数据的地方，这些数据不能再保存在 RAM 中。 基本上，这使您能够增加服务器在工作“内存”中保留的信息量，但有一些注意事项，主要是当 RAM 中没有足够的空间容纳正在使用的应用程序数据时，将使用硬盘驱动器上的交换空间。&lt;/p>
&lt;p>写入磁盘的信息将比保存在 RAM 中的信息慢得多，但是操作系统更愿意将应用程序数据保存在内存中，并使用交换旧数据。 总的来说，当系统的 RAM 耗尽时，将交换空间作为回落空间可能是一个很好的安全网，可防止非 SSD 存储系统出现内存不足的情况。&lt;/p>
&lt;p>调整 swap 的内核参数&lt;/p>
&lt;p>vm.swappiness 这个内核参数可以用来调整系统使用 swap 的时机。默认值为 60，i.e.当内存中空闲空间低于 60%的时候，就会开始使用 swap 空间(也就是说系统使用了 40%的内存之后，就开始使用 swap) ，一般可以将该值设置为 10 来进行优化。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>cat &amp;gt;&amp;gt;/etc/sysctl.conf &lt;span style="color:#4e9a06">&amp;lt;&amp;lt;END
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">vm.swappiness = 10
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">END&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>swappiness 参数配置您的系统将数据从 RAM 交换到交换空间的频率, 值介于 0 和 100 之间，表示百分比。如果 swappiness 值接近 0，内核将不会将数据交换到磁盘，除非绝对必要。要记住一点，与 swap 文件的交互是“昂贵的”，因为与 swap 交互花费的时间比与 RAM 的交互更长，并且会导致性能的显著下降。系统更少依赖 swap 分区通常会使你的系统更快。swappiness 接近 100 的值将尝试将更多的数据放入交换中，以保持更多的 RAM 空间。根据您的应用程序的内存配置文件或您使用的服务器，这可能会在某些情况下更好。&lt;/p>
&lt;h3 id="使用-swap">使用 Swap&lt;a class="td-heading-self-link" href="#%e4%bd%bf%e7%94%a8-swap" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://www.myfreax.com/how-to-add-swap-space-on-ubuntu-22-04/">https://www.myfreax.com/how-to-add-swap-space-on-ubuntu-22-04/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.yangbolin.com/?id=296">https://www.yangbolin.com/?id=296&lt;/a>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">SWAP_FILE&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;/swapfile.img&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dd &lt;span style="color:#204a87;font-weight:bold">if&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>/dev/zero &lt;span style="color:#000">of&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">SWAP_FILE&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span> &lt;span style="color:#000">bs&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1024&lt;/span> &lt;span style="color:#000">count&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2000000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>chmod &lt;span style="color:#0000cf;font-weight:bold">600&lt;/span> &lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">SWAP_FILE&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mkswap -f &lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">SWAP_FILE&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 激活 Swap&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>swapon &lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">SWAP_FILE&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以在 /etc/fstab 文件中添加配置以实现开启自动激活 swap&lt;/p>
&lt;pre tabindex="0">&lt;code>/swapfile.img none swap sw 0 0
&lt;/code>&lt;/pre>&lt;h1 id="缓存的清理">缓存的清理&lt;a class="td-heading-self-link" href="#%e7%bc%93%e5%ad%98%e7%9a%84%e6%b8%85%e7%90%86" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>可以通过写入 /proc/sys/vm/drop_caches 这个内核参数来让内核从内存中清理 cache、dentries 和 inode。&lt;/p>
&lt;p>注意：由于写入该文件是一个非破坏性操作，而且脏对象是不可释放的，所以用户应该首先运行 sync 命令。&lt;/p>
&lt;h2 id="仅清理-pagecache页面缓存">仅清理 PageCache(页面缓存)&lt;a class="td-heading-self-link" href="#%e4%bb%85%e6%b8%85%e7%90%86-pagecache%e9%a1%b5%e9%9d%a2%e7%bc%93%e5%ad%98" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>sync; echo 1 &amp;gt; /proc/sys/vm/drop_caches&lt;/p>
&lt;h2 id="清理-dentries-和-inode">清理 Dentries 和 Inode&lt;a class="td-heading-self-link" href="#%e6%b8%85%e7%90%86-dentries-%e5%92%8c-inode" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>sync; echo 2 &amp;gt; /proc/sys/vm/drop_caches&lt;/p>
&lt;h2 id="清理-pagecachedentries-和-inode">清理 PageCache、Dentries 和 Inode&lt;a class="td-heading-self-link" href="#%e6%b8%85%e7%90%86-pagecachedentries-%e5%92%8c-inode" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>sync; echo 3 &amp;gt; /proc/sys/vm/drop_caches&lt;/p>
&lt;p>注意：释放内存前先使用 sync 命令做同步，以确保文件系统的完整性，将所有未写的系统缓冲区写到磁盘中，包含已修改的 inode、已延迟的块 I/O 和读写映射文件。否则在释放缓存的过程中，可能会丢失未保存的文件。&lt;/p>
&lt;p>如果你必须清除磁盘高速缓存，第一个命令在企业和生产环境中是最安全，&amp;quot;&amp;hellip;echo 1&amp;gt; &amp;hellip;&amp;ldquo;只会清除页面缓存。 在生产环境中不建议使用上面的第三个选项&amp;rdquo;&amp;hellip;echo 3 &amp;gt; &amp;hellip;&amp;quot; ，除非你明确自己在做什么，因为它会清除缓存页，目录项和 inodes。&lt;/p>
&lt;h2 id="swap-清理">swap 清理&lt;a class="td-heading-self-link" href="#swap-%e6%b8%85%e7%90%86" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>swapoff -a &amp;amp;&amp;amp; swapon -a&lt;/p>
&lt;p>注意：这样清理有个前提条件，空闲的内存必须比已经使用的 swap 空间大&lt;/p></description></item><item><title>Docs: Huge Pages</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Memory/Huge-Pages/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Memory/Huge-Pages/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.kernel.org/doc/html/latest/admin-guide/mm/concepts.html#huge-pages">Linux Kernel 文档，管理员指南 - 内存管理 - 概念 - Huge pages&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Huge_pages">Wiki，Huge pages&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Huge Pages(大页)&lt;/strong> 是指每个 Page 的容量都远超默认大小(4 KiB)的 Page。比如 2 MiB、1 GiB、etc. 都是常见的大页内存空间中的每页容量。Huge Pages Memory 则是指每个 Page 的容量都超过 4 KiB 的内存的统称。&lt;/p>
&lt;p>在 x86 架构上，可以使用 第二级 和 第三级 页表中的条目来映射 2MiB 甚至 1GiB 的 Page。&lt;/p>
&lt;p>HugePages 可以减少页表开销、减轻 TLB 压力并提高 TLB 的命中率、减轻内存数据查询压力、避免使用 Swap 降低性能。但是前提是保证使用大页的程序可以完善得利用大页，否则就会造成内存的极大浪费。&lt;/p>
&lt;blockquote>
&lt;p>[!Notes] 为什么已经分页了还要用大页？
如果一个程序（比如数据库），把大量数据加载到内存中，这时候其查询的数据量一定远超 TLB 的容量，这必然会导致 TLB 的未命中急速上升，严重影响性能。还有很多其他的方面就不一一举例了。&lt;/p>
&lt;p>所以大页并不是所有程序都适用的，而是针对特定场景，需要处理大量数据，亲自管理内存的程序，才要配置大页。比如 &lt;a href="https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/DPDK/DPDK.md">DPDK&lt;/a> 处理流量也需要使用大页的内存空间&lt;/p>
&lt;/blockquote>
&lt;p>Linux Kernel 中有两种机制可以实现 物理内存 与 Huge Pages 的映射&lt;/p>
&lt;ul>
&lt;li>&lt;strong>HugeTLB filesystem&lt;/strong> # 大页文件系统，简称 &lt;strong>&lt;a href="#HugeTLB%20FS">Hugetlbfs&lt;/a>&lt;/strong>。在此文件系统中创建的文件，数据驻留在内存中并使用大页进行映射。&lt;/li>
&lt;li>&lt;strong>Transparent HugePages&lt;/strong> # 透明大页，简称 &lt;a href="#THP">&lt;strong>THP&lt;/strong>&lt;/a>。&lt;/li>
&lt;/ul>
&lt;h1 id="hugetlb-fs">HugeTLB FS&lt;a class="td-heading-self-link" href="#hugetlb-fs" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.kernel.org/doc/html/latest/admin-guide/mm/hugetlbpage.html">Linux Kernel 文档，管理员指南 - 内存管理 - HugeTLB Pages&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>HugeTLB Filesystem 是一种特殊的 &lt;a href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Filesystem/Filesystem.md">Filesystem&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># mount -t hugetlbfs&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hugetlbfs on /dev/hugepages &lt;span style="color:#204a87">type&lt;/span> hugetlbfs &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>rw,relatime,pagesize&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>1024M&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># ls /dev/hugepages/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>libvirt rtemap_16388 rtemap_16402 rtemap_17 rtemap_3 rtemap_65544 rtemap_65558 rtemap_73731 rtemap_73745 rtemap_8202
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>......略
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># cat /proc/filesystems | grep huge&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nodev hugetlbfs
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>x86 CPU 通常支持 4K 和 2M（如果架构支持，则为 1G）PageSize，ia64 架构支持多种 PageSize 4K、8K、64K、256K、1M、4M、16M、256M，ppc64 支持 4K 和 16M。 TLB 是虚拟到物理转换的缓存。通常，这是处理器上非常稀缺的资源。操作系统尝试充分利用有限数量的 TLB 资源。现在，随着越来越大的物理内存（几 GB）变得越来越可用，这种优化变得更加重要。&lt;/p>
&lt;h2 id="关联文件与配置">关联文件与配置&lt;a class="td-heading-self-link" href="#%e5%85%b3%e8%81%94%e6%96%87%e4%bb%b6%e4%b8%8e%e9%85%8d%e7%bd%ae" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>/dev/hugepages/&lt;/strong> # HugeTLB 文件系统的默认挂载目录&lt;/p>
&lt;p>有多种方式可以设置 HugePages（TODO: 优先级？）&lt;/p>
&lt;ul>
&lt;li>&lt;strong>内核引导参数&lt;/strong> # 可以在系统引导配置中（e.g. grub2.cfg、etc.）中添加一些参数以设定大页的信息
&lt;ul>
&lt;li>hugepagesz # HugePages 的页容量&lt;/li>
&lt;li>hugepages # HugePages 的页数量&lt;/li>
&lt;li>default_hugepagesz # 默认的 HugePages 容量&lt;/li>
&lt;li>etc.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>/proc/sys/vm/*hugepages*&lt;/strong> # 仅为了向后兼容，保留这些文件。这些 HugePage 的用户空间接口已在 &lt;a href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Filesystem/%E7%89%B9%E6%AE%8A%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/sysfs.md">sysfs&lt;/a> 中的 /sys/kernel/mm/hugepages/ 实现。&lt;/li>
&lt;li>&lt;strong>/sys/kernel/mm/hugepages/&lt;/strong> # 由于要在运行时支持多个，该目录实现了 /proc/sys/vm/ 中大部分关于 HugePage 的用户空间接口
&lt;ul>
&lt;li>&lt;strong>&lt;code>./hugepages-${SIZE}kB/&lt;/code>&lt;/strong> # 详见下文 &lt;a href="#%E9%80%9A%E7%94%A8%E7%9B%AE%E5%BD%95">通用目录&lt;/a> 中的 &lt;code>hugepages-${SIZE}kB&lt;/code> 介绍&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>&lt;code>/sys/devices/system/node/node[0-9]*/hugepages/&lt;/code>&lt;/strong> # 针对 &lt;a href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Memory/NUMA.md">NUMA&lt;/a> 为每个 Node 设置 HugePages
&lt;ul>
&lt;li>&lt;strong>&lt;code>./hugepages-${SIZE}kB/&lt;/code>&lt;/strong> # 详见下文 &lt;a href="#%E9%80%9A%E7%94%A8%E7%9B%AE%E5%BD%95">通用目录&lt;/a> 中的 &lt;code>hugepages-${SIZE}kB&lt;/code> 介绍&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Notes: 关于 NUMA 的 HugePages 的说明&lt;/p>
&lt;ul>
&lt;li>&lt;code>/sys/bus/node/devices/node[0-9]*&lt;/code> 目录将会链接到 &lt;code>/sys/devices/system/node/node[0-9]*&lt;/code> 目录&lt;/li>
&lt;li>sysfs 中根大页控制目录的内容子集将复制到内存位于以下位置的每个 NUMA 节点的每个系统设备下。&lt;/li>
&lt;/ul>
&lt;h3 id="通用目录">通用目录&lt;a class="td-heading-self-link" href="#%e9%80%9a%e7%94%a8%e7%9b%ae%e5%bd%95" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>&lt;strong>./hugepages-${SIZE}kB/&lt;/strong> # 特定于指定 SIZE(HugePage 的 &lt;strong>页容量&lt;/strong>) 的 HugePage 用户空间接口。SIZE 通常默认有两个值: 1048576 和 2048&lt;/p>
&lt;ul>
&lt;li>&lt;strong>nr_hugepages&lt;/strong> # HugePage 的页数量。当任务释放时，“持久”大页将返回到大页池。具有 root 权限的用户可以通过增加或减少 nr_hugepages 的值来动态分配更多或释放一些持久性大页面。&lt;/li>
&lt;/ul>
&lt;h2 id="使用-hugepages">使用 HugePages&lt;a class="td-heading-self-link" href="#%e4%bd%bf%e7%94%a8-hugepages" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://www.kernel.org/doc/html/latest/admin-guide/mm/hugetlbpage.html#using-huge-pages">https://www.kernel.org/doc/html/latest/admin-guide/mm/hugetlbpage.html#using-huge-pages&lt;/a>&lt;/p>
&lt;p>程序想要使用 HugePage 的内存，需要在申请内存的系统调用（e.g. mmap()）时添加大页相关参数（e.g. MAP_HUGETLB、etc.）即可。&lt;/p>
&lt;p>也可以通过标准 SYSV 共享内存系统调用（shmget、shmat）使用 Linux 的 Hugepages。&lt;/p>
&lt;p>如果用户应用程序要使用 mmap 系统调用请求大页，则需要先挂载 Hugetlbfs 类型的文件系统：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>mount -t hugetlbfs &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> -o &lt;span style="color:#000">uid&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&amp;lt;value&amp;gt;,gid&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&amp;lt;value&amp;gt;,mode&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&amp;lt;value&amp;gt;,pagesize&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&amp;lt;value&amp;gt;,size&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&amp;lt;value&amp;gt;,&lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> &lt;span style="color:#000">min_size&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&amp;lt;value&amp;gt;,nr_inodes&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&amp;lt;value&amp;gt; none /mnt/huge
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>此命令在目录 /mnt/huge 上挂载一个 hubetlbfs 类型的文件系统。在 /mnt/huge 上创建的任何文件都使用大页面。&lt;/p>
&lt;h1 id="thp">THP&lt;a class="td-heading-self-link" href="#thp" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.kernel.org/doc/html/latest/admin-guide/mm/transhuge.html">Linux Kernel 文档，管理员指南 - 内存管理 - transhuge&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>Docs: NUMA</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Memory/NUMA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Memory/NUMA/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.kernel.org/doc/html/latest/admin-guide/mm/concepts.html#nodes">Linux Kernel 文档，管理员指南 - 内存管理 - 概念 - Nodes&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.kernel.org/doc/html/latest/mm/numa.html">Linux Kernel 文档，内存管理 - NUMA&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.kernel.org/doc/html/latest/admin-guide/mm/numa_memory_policy.html">Linux Kernel 文档，管理员指南 - 内存管理 - NUMA 内存策略&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Non-uniform_memory_access">Wiki，Non-uniform memory access&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Non-uniform memory access(非均匀内存访问，简称 NUMA)&lt;/strong> 是一种用于多处理结构的计算机的内存设计，其中内存访问时间取决于相对于处理器的内存位置。在 NUMA 下，处理器可以比非本地内存（另一个处理器的本地内存或处理器之间共享的内存）更快地访问自己的本地内存。 NUMA 的优势仅限于特定的工作负载，特别是在数据通常与某些任务或用户密切相关的服务器上。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/os/kernel/memory/numa_1.png" alt="《深入浅出PDPK》-2.9 | 900">&lt;/p>
&lt;p>Linux 将系统的硬件资源按照抽象的 &lt;strong>Nodes(节点)&lt;/strong> 概念进行划分。Linux 将 Nodes 映射到硬件平台的物理 Cells(单元) 上，抽象出某些架构的一些细节。与物理单元一样，软件 Nodes 可能包含 0 个或多个 CPU、内存和/或 IO 总线。而且，与对更远程单元的访问相比，对“较近” Node 上的存储器的存储器访问通常会经历更快的访问时间和更高的有效带宽。&lt;/p></description></item><item><title>Docs: Memroy 的 Over Commit 与 OOM</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Memory/Memroy-%E7%9A%84-Over-Commit-%E4%B8%8E-OOM/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Memory/Memroy-%E7%9A%84-Over-Commit-%E4%B8%8E-OOM/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>over commit memory 机制与 out of memory 机制&lt;/p>
&lt;h2 id="over-commit-memory-机制">over-commit memory 机制&lt;a class="td-heading-self-link" href="#over-commit-memory-%e6%9c%ba%e5%88%b6" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Linux 内核根据应用程序的要求分配内存，通常来说应用程序分配了内存但是并没有实际全部使用，为了提高性能，这部分没用的内存可以留作它用，这部分内存是属于每个进程的，内核直接回收利用的话比较麻烦，所以内核采用一种过度分配内存（over-commit memory）的办法来间接利用这部分 “空闲” 的内存，提高整体内存的使用效率。一般来说这样做没有问题，但当大多数应用程序都消耗完自己的内存的时候麻烦就来了，因为这些应用程序的内存需求加起来超出了物理内存（包括 swap）的容量，内核（OOM killer）必须杀掉一些进程才能腾出空间保障系统正常运行。用银行的例子来讲可能更容易懂一些，部分人取钱的时候银行不怕，银行有足够的存款应付，当全国人民（或者绝大多数）都取钱而且每个人都想把自己钱取完的时候银行的麻烦就来了，银行实际上是没有这么多钱给大家取的。&lt;/p>
&lt;h2 id="out-of-memory-机制oom">out of memory 机制(OOM)&lt;a class="td-heading-self-link" href="#out-of-memory-%e6%9c%ba%e5%88%b6oom" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>某时刻应用程序大量请求内存导致系统内存不足造成的，这通常会触发 Linux 内核里的 Out of Memory (OOM) killer，OOM killer 会杀掉某个进程以腾出内存留给系统用，不致于让系统立刻崩溃&lt;/p>
&lt;p>内核检测到系统内存不足、挑选并杀掉某个进程的过程可以参考内核源代码 linux/mm/oom_kill.c，当系统内存不足的时候，out_of_memory() 被触发，然后调用 select_bad_process() 选择一个 “bad” 进程杀掉，如何判断和选择一个 “bad” 进程呢，总不能随机选吧？挑选的过程由 oom_badness() 决定，挑选的算法和想法都很简单很朴实：最 bad 的那个进程就是那个最占用内存的进程。&lt;/p>
&lt;h2 id="oom-触发后的-message-信息">OOM 触发后的 Message 信息&lt;a class="td-heading-self-link" href="#oom-%e8%a7%a6%e5%8f%91%e5%90%8e%e7%9a%84-message-%e4%bf%a1%e6%81%af" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: dsm_sa_datamgrd invoked oom-killer: &lt;span style="color:#000">gfp_mask&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>0x201da, &lt;span style="color:#000">order&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>0, &lt;span style="color:#000">oom_adj&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>0, &lt;span style="color:#000">oom_score_adj&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: dsm_sa_datamgrd &lt;span style="color:#000">cpuset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>/ &lt;span style="color:#000">mems_allowed&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>0-1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: Pid: 4917, comm: dsm_sa_datamgrd Not tainted 2.6.32-279.19.1.el6.x86_64 &lt;span style="color:#8f5902;font-style:italic">#1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: Call Trace:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&amp;lt;ffffffff810c29e1&amp;gt;&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> ? cpuset_print_task_mems_allowed+0x91/0xb0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&amp;lt;ffffffff81112d40&amp;gt;&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> ? dump_header+0x90/0x1b0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&amp;lt;ffffffff810e064e&amp;gt;&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> ? __delayacct_freepages_end+0x2e/0x30
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&amp;lt;ffffffff8120dfec&amp;gt;&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> ? security_real_capable_noaudit+0x3c/0x70
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&amp;lt;ffffffff811131c2&amp;gt;&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> ? oom_kill_process+0x82/0x2a0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&amp;lt;ffffffff811130be&amp;gt;&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> ? select_bad_process+0x9e/0x120
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&amp;lt;ffffffff81113600&amp;gt;&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> ? out_of_memory+0x220/0x3c0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&amp;lt;ffffffff8112331e&amp;gt;&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> ? __alloc_pages_nodemask+0x89e/0x940
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&amp;lt;ffffffff811574ea&amp;gt;&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> ? alloc_pages_current+0xaa/0x110
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&amp;lt;ffffffff811101c7&amp;gt;&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> ? __page_cache_alloc+0x87/0x90
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&amp;lt;ffffffff81125cfb&amp;gt;&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> ? __do_page_cache_readahead+0xdb/0x210
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&amp;lt;ffffffff81125e51&amp;gt;&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> ? ra_submit+0x21/0x30
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&amp;lt;ffffffff811114f3&amp;gt;&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> ? filemap_fault+0x4c3/0x500
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&amp;lt;ffffffff8113a754&amp;gt;&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> ? __do_fault+0x54/0x510
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&amp;lt;ffffffff8113ad07&amp;gt;&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> ? handle_pte_fault+0xf7/0xb50
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&amp;lt;ffffffff8105a5c3&amp;gt;&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> ? perf_event_task_sched_out+0x33/0x80
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&amp;lt;ffffffff8113b99a&amp;gt;&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> ? handle_mm_fault+0x23a/0x310
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&amp;lt;ffffffff810432d9&amp;gt;&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> ? __do_page_fault+0x139/0x480
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&amp;lt;ffffffff81095bdf&amp;gt;&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> ? hrtimer_try_to_cancel+0x3f/0xd0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&amp;lt;ffffffff81095c92&amp;gt;&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> ? hrtimer_cancel+0x22/0x30
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&amp;lt;ffffffff814eb723&amp;gt;&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> ? do_nanosleep+0x93/0xc0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&amp;lt;ffffffff81095d64&amp;gt;&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> ? hrtimer_nanosleep+0xc4/0x180
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&amp;lt;ffffffff81094af0&amp;gt;&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> ? hrtimer_wakeup+0x0/0x30
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&amp;lt;ffffffff814ef68e&amp;gt;&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> ? do_page_fault+0x3e/0xa0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&amp;lt;ffffffff814eca45&amp;gt;&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> ? page_fault+0x25/0x30
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: Mem-Info:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: Node &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> Normal per-cpu:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: CPU 0: hi: 186, btch: &lt;span style="color:#0000cf;font-weight:bold">31&lt;/span> usd: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: CPU 1: hi: 186, btch: &lt;span style="color:#0000cf;font-weight:bold">31&lt;/span> usd: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: CPU 2: hi: 186, btch: &lt;span style="color:#0000cf;font-weight:bold">31&lt;/span> usd: &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: CPU 3: hi: 186, btch: &lt;span style="color:#0000cf;font-weight:bold">31&lt;/span> usd: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: CPU 4: hi: 186, btch: &lt;span style="color:#0000cf;font-weight:bold">31&lt;/span> usd: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: CPU 5: hi: 186, btch: &lt;span style="color:#0000cf;font-weight:bold">31&lt;/span> usd: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: CPU 6: hi: 186, btch: &lt;span style="color:#0000cf;font-weight:bold">31&lt;/span> usd: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: CPU 7: hi: 186, btch: &lt;span style="color:#0000cf;font-weight:bold">31&lt;/span> usd: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: CPU 8: hi: 186, btch: &lt;span style="color:#0000cf;font-weight:bold">31&lt;/span> usd: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: CPU 9: hi: 186, btch: &lt;span style="color:#0000cf;font-weight:bold">31&lt;/span> usd: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: CPU 10: hi: 186, btch: &lt;span style="color:#0000cf;font-weight:bold">31&lt;/span> usd: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: CPU 11: hi: 186, btch: &lt;span style="color:#0000cf;font-weight:bold">31&lt;/span> usd: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: CPU 12: hi: 186, btch: &lt;span style="color:#0000cf;font-weight:bold">31&lt;/span> usd: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: CPU 13: hi: 186, btch: &lt;span style="color:#0000cf;font-weight:bold">31&lt;/span> usd: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: CPU 14: hi: 186, btch: &lt;span style="color:#0000cf;font-weight:bold">31&lt;/span> usd: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: CPU 15: hi: 186, btch: &lt;span style="color:#0000cf;font-weight:bold">31&lt;/span> usd: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: Node &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> DMA per-cpu:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: CPU 0: hi: 0, btch: &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> usd: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: CPU 1: hi: 0, btch: &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> usd: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: CPU 2: hi: 0, btch: &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> usd: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: CPU 3: hi: 0, btch: &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> usd: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: CPU 4: hi: 0, btch: &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> usd: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: CPU 5: hi: 0, btch: &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> usd: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: CPU 6: hi: 0, btch: &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> usd: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: CPU 7: hi: 0, btch: &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> usd: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: CPU 8: hi: 0, btch: &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> usd: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: CPU 9: hi: 0, btch: &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> usd: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: CPU 10: hi: 0, btch: &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> usd: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: CPU 11: hi: 0, btch: &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> usd: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: CPU 12: hi: 0, btch: &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> usd: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: CPU 13: hi: 0, btch: &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> usd: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: CPU 14: hi: 0, btch: &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> usd: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: CPU 15: hi: 0, btch: &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> usd: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: Node &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> DMA32 per-cpu:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: CPU 0: hi: 186, btch: &lt;span style="color:#0000cf;font-weight:bold">31&lt;/span> usd: &lt;span style="color:#0000cf;font-weight:bold">69&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: CPU 1: hi: 186, btch: &lt;span style="color:#0000cf;font-weight:bold">31&lt;/span> usd: &lt;span style="color:#0000cf;font-weight:bold">31&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: CPU 2: hi: 186, btch: &lt;span style="color:#0000cf;font-weight:bold">31&lt;/span> usd: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: CPU 3: hi: 186, btch: &lt;span style="color:#0000cf;font-weight:bold">31&lt;/span> usd: &lt;span style="color:#0000cf;font-weight:bold">46&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: CPU 4: hi: 186, btch: &lt;span style="color:#0000cf;font-weight:bold">31&lt;/span> usd: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: CPU 5: hi: 186, btch: &lt;span style="color:#0000cf;font-weight:bold">31&lt;/span> usd: &lt;span style="color:#0000cf;font-weight:bold">99&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: CPU 6: hi: 186, btch: &lt;span style="color:#0000cf;font-weight:bold">31&lt;/span> usd: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: CPU 7: hi: 186, btch: &lt;span style="color:#0000cf;font-weight:bold">31&lt;/span> usd: &lt;span style="color:#0000cf;font-weight:bold">55&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: CPU 8: hi: 186, btch: &lt;span style="color:#0000cf;font-weight:bold">31&lt;/span> usd: &lt;span style="color:#0000cf;font-weight:bold">42&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: CPU 9: hi: 186, btch: &lt;span style="color:#0000cf;font-weight:bold">31&lt;/span> usd: &lt;span style="color:#0000cf;font-weight:bold">20&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: CPU 10: hi: 186, btch: &lt;span style="color:#0000cf;font-weight:bold">31&lt;/span> usd: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: CPU 11: hi: 186, btch: &lt;span style="color:#0000cf;font-weight:bold">31&lt;/span> usd: &lt;span style="color:#0000cf;font-weight:bold">30&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: CPU 12: hi: 186, btch: &lt;span style="color:#0000cf;font-weight:bold">31&lt;/span> usd: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: CPU 13: hi: 186, btch: &lt;span style="color:#0000cf;font-weight:bold">31&lt;/span> usd: &lt;span style="color:#0000cf;font-weight:bold">168&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: CPU 14: hi: 186, btch: &lt;span style="color:#0000cf;font-weight:bold">31&lt;/span> usd: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: CPU 15: hi: 186, btch: &lt;span style="color:#0000cf;font-weight:bold">31&lt;/span> usd: &lt;span style="color:#0000cf;font-weight:bold">30&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: Node &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> Normal per-cpu:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: CPU 0: hi: 186, btch: &lt;span style="color:#0000cf;font-weight:bold">31&lt;/span> usd: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: CPU 1: hi: 186, btch: &lt;span style="color:#0000cf;font-weight:bold">31&lt;/span> usd: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: CPU 2: hi: 186, btch: &lt;span style="color:#0000cf;font-weight:bold">31&lt;/span> usd: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: CPU 3: hi: 186, btch: &lt;span style="color:#0000cf;font-weight:bold">31&lt;/span> usd: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: CPU 4: hi: 186, btch: &lt;span style="color:#0000cf;font-weight:bold">31&lt;/span> usd: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: CPU 5: hi: 186, btch: &lt;span style="color:#0000cf;font-weight:bold">31&lt;/span> usd: &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: CPU 6: hi: 186, btch: &lt;span style="color:#0000cf;font-weight:bold">31&lt;/span> usd: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: CPU 7: hi: 186, btch: &lt;span style="color:#0000cf;font-weight:bold">31&lt;/span> usd: &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: CPU 8: hi: 186, btch: &lt;span style="color:#0000cf;font-weight:bold">31&lt;/span> usd: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: CPU 9: hi: 186, btch: &lt;span style="color:#0000cf;font-weight:bold">31&lt;/span> usd: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: CPU 10: hi: 186, btch: &lt;span style="color:#0000cf;font-weight:bold">31&lt;/span> usd: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: CPU 11: hi: 186, btch: &lt;span style="color:#0000cf;font-weight:bold">31&lt;/span> usd: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: CPU 12: hi: 186, btch: &lt;span style="color:#0000cf;font-weight:bold">31&lt;/span> usd: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: CPU 13: hi: 186, btch: &lt;span style="color:#0000cf;font-weight:bold">31&lt;/span> usd: &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: CPU 14: hi: 186, btch: &lt;span style="color:#0000cf;font-weight:bold">31&lt;/span> usd: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: CPU 15: hi: 186, btch: &lt;span style="color:#0000cf;font-weight:bold">31&lt;/span> usd: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: active_anon:3693 inactive_anon:959 isolated_anon:0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: active_file:17 inactive_file:1177 isolated_file:0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: unevictable:0 dirty:6 writeback:0 unstable:0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: free:19262 slab_reclaimable:94836 slab_unreclaimable:3898229
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: mapped:230 shmem:0 pagetables:5388 bounce:0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: Node &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> Normal free:15468kB min:45120kB low:56400kB high:67680kB active_anon:0kB inactive_anon:136kB active_file:12kB inactive_file:516kB unevictable:0kB isolated&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>anon&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>:0kB isolated&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>file&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>:0kB present:8273920kB mlocked:0kB dirty:4kB writeback:0kB mapped:0kB shmem:0kB slab_reclaimable:349292kB slab_unreclaimable:7792080kB kernel_stack:2824kB pagetables:10744kB unstable:0kB bounce:0kB writeback_tmp:0kB pages_scanned:1098 all_unreclaimable? yes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: lowmem_reserve&lt;span style="color:#ce5c00;font-weight:bold">[]&lt;/span>: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: Node &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> DMA free:15740kB min:80kB low:100kB high:120kB active_anon:0kB inactive_anon:0kB active_file:0kB inactive_file:0kB unevictable:0kB isolated&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>anon&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>:0kB isolated&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>file&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>:0kB present:15352kB mlocked:0kB dirty:0kB writeback:0kB mapped:0kB shmem:0kB slab_reclaimable:0kB slab_unreclaimable:0kB kernel_stack:0kB pagetables:0kB unstable:0kB bounce:0kB writeback_tmp:0kB pages_scanned:0 all_unreclaimable? yes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: lowmem_reserve&lt;span style="color:#ce5c00;font-weight:bold">[]&lt;/span>: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3243&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">8041&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">8041&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: Node &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> DMA32 free:36536kB min:18112kB low:22640kB high:27168kB active_anon:14772kB inactive_anon:3644kB active_file:56kB inactive_file:4008kB unevictable:0kB isolated&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>anon&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>:0kB isolated&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>file&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>:0kB present:3321540kB mlocked:0kB dirty:16kB writeback:0kB mapped:916kB shmem:0kB slab_reclaimable:840kB slab_unreclaimable:2982720kB kernel_stack:0kB pagetables:0kB unstable:0kB bounce:0kB writeback_tmp:0kB pages_scanned:27584 all_unreclaimable? yes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: lowmem_reserve&lt;span style="color:#ce5c00;font-weight:bold">[]&lt;/span>: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4797&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4797&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: Node &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> Normal free:9304kB min:26788kB low:33484kB high:40180kB active_anon:0kB inactive_anon:56kB active_file:0kB inactive_file:184kB unevictable:0kB isolated&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>anon&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>:0kB isolated&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>file&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>:0kB present:4912640kB mlocked:0kB dirty:4kB writeback:0kB mapped:4kB shmem:0kB slab_reclaimable:29212kB slab_unreclaimable:4818116kB kernel_stack:824kB pagetables:10808kB unstable:0kB bounce:0kB writeback_tmp:0kB pages_scanned:380 all_unreclaimable? yes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: lowmem_reserve&lt;span style="color:#ce5c00;font-weight:bold">[]&lt;/span>: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: Node &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> Normal: 2528*4kB 407*8kB 4*16kB 0*32kB 0*64kB 0*128kB 0*256kB 0*512kB 0*1024kB 1*2048kB 0*4096kB &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> 15480kB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: Node &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> DMA: 1*4kB 1*8kB 1*16kB 1*32kB 1*64kB 0*128kB 1*256kB 0*512kB 1*1024kB 1*2048kB 3*4096kB &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> 15740kB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: Node &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> DMA32: 1*4kB 537*8kB 320*16kB 307*32kB 135*64kB 45*128kB 0*256kB 0*512kB 0*1024kB 1*2048kB 0*4096kB &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> 35692kB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: Node &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> Normal: 1670*4kB 8*8kB 0*16kB 4*32kB 8*64kB 7*128kB 2*256kB 1*512kB 0*1024kB 0*2048kB 0*4096kB &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> 9304kB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: &lt;span style="color:#0000cf;font-weight:bold">2609&lt;/span> total pagecache pages
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: &lt;span style="color:#0000cf;font-weight:bold">1323&lt;/span> pages in swap cache
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: Swap cache stats: add 1919969, delete 1918646, find 72763/93573
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: Free &lt;span style="color:#000">swap&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> 25878484kB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: Total &lt;span style="color:#000">swap&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> 32767992kB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: &lt;span style="color:#0000cf;font-weight:bold">4194303&lt;/span> pages RAM
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: &lt;span style="color:#0000cf;font-weight:bold">115262&lt;/span> pages reserved
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: &lt;span style="color:#0000cf;font-weight:bold">1110&lt;/span> pages shared
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: &lt;span style="color:#0000cf;font-weight:bold">3295246&lt;/span> pages non-shared
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> pid &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> uid tgid total_vm rss cpu oom_adj oom_score_adj name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 624&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">624&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2763&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> -17 -1000 udevd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 1981&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1981&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">23294&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> -17 -1000 auditd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 1997&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1997&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">82373&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">196&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> rsyslogd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 2027&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2027&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2287&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">94&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> irqbalance
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 2054&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">81&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2054&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">5377&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> dbus-daemon
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 2078&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2078&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1020&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">9&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> acpid
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 2087&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">68&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2087&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">6338&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">7&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> hald
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 2088&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2088&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4527&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> hald-runner
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 2116&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2116&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">5063&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> hald-addon-inpu
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 2131&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">68&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2131&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4452&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> hald-addon-acpi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 2153&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2153&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">16019&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> -17 -1000 sshd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 2169&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2169&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">29303&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">7&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> crond
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 2180&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2180&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">5364&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> atd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 2473&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2473&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">272563&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">264&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> dsm_sa_datamgrd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 2586&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2586&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">122414&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">7&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> dsm_sa_datamgrd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 2601&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2601&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">73220&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">30&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> dsm_sa_eventmgr
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 2660&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2660&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">125789&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">89&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">12&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> dsm_sa_snmpd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 2734&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2734&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">159845&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> dsm_om_shrsvcd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 2767&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2767&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1016&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">8&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> mingetty
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 2769&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2769&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1016&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> mingetty
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 2771&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2771&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1016&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">7&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> mingetty
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 2773&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2773&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1016&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">12&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> mingetty
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 2779&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2779&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1016&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> mingetty
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 5065&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">5065&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1028466&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> console-kit-dae
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>11520&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">11520&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1016&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> mingetty
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>23919&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">38&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">23919&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">6485&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">7&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> ntpd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>14167&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">14167&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">27401&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">34&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">15&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> keepalived
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>14168&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">14168&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">27961&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">88&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">15&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> keepalived
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>14169&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">14169&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">27927&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">31&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">15&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> keepalived
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 2448&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2448&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2762&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> -17 -1000 udevd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 2546&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2546&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2762&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> -17 -1000 udevd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>20557&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">188&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">20557&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2140125&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3183&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> haproxy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>16066&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">16066&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">95625&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">285&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">7&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> snmpd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: Out of memory: Kill process &lt;span style="color:#0000cf;font-weight:bold">20557&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>haproxy&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> score &lt;span style="color:#0000cf;font-weight:bold">133&lt;/span> or sacrifice child
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:22 dr-2 kernel: Killed process 20557, UID 188, &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>haproxy&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> total-vm:8560500kB, anon-rss:12468kB, file-rss:264kB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nov &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> 19:52:40 dr-2 kernel: __ratelimit: &lt;span style="color:#0000cf;font-weight:bold">8552&lt;/span> callbacks suppressed
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="message-信息中的名词解释">message 信息中的名词解释&lt;a class="td-heading-self-link" href="#message-%e4%bf%a1%e6%81%af%e4%b8%ad%e7%9a%84%e5%90%8d%e8%af%8d%e8%a7%a3%e9%87%8a" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>进程所占资源列表相关信息&lt;/p>
&lt;ol>
&lt;li>&lt;strong>pid&lt;/strong> # 进程 ID 号&lt;/li>
&lt;li>&lt;strong>uid&lt;/strong> # 该进程用户的 UserID&lt;/li>
&lt;li>&lt;strong>tgid&lt;/strong> #&lt;/li>
&lt;li>&lt;strong>total_vm&lt;/strong> # 该进程所占用的虚拟内存页,1page=4k 内存，所以实际占用需要用该值乘以 4&lt;/li>
&lt;li>&lt;strong>rss&lt;/strong> # 该进程所占用的实际内存页,1page=4k 内存，所以实际占用需要用该值乘以 4&lt;/li>
&lt;li>&lt;strong>cpu&lt;/strong> #&lt;/li>
&lt;li>&lt;strong>oom_adj&lt;/strong> # oom 计算出的该进程的。详见本文《oom killer 怎么挑选进程》章节&lt;/li>
&lt;li>&lt;strong>oom_score_adj&lt;/strong> # oom 给该进程的分数。详见本文《oom killer 怎么挑选进程》章节&lt;/li>
&lt;li>&lt;strong>name&lt;/strong> # 进程名&lt;/li>
&lt;/ol>
&lt;h1 id="oom-killer">OOM Killer&lt;a class="td-heading-self-link" href="#oom-killer" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>是 Linux 内核设计的一种机制，在内存不足的会后，选择一个占用内存较大的进程并 kill 掉这个进程，以满足内存申请的需求（内存不足的时候该怎么办，其实是个两难的事情，oom killer 算是提供了一种方案吧）&lt;/p>
&lt;p>在什么时候触发？&lt;/p>
&lt;p>前面说了，在内存不足的时候触发，主要牵涉到【linux 的物理内存结构】和【overcommit 机制】&lt;/p>
&lt;p>2.1 内存结构 node、zone、page、order&lt;/p>
&lt;p>对于物理内存内存，linux 会把它分很多区（zone），zone 上还有 node 的概念，zone 下面是很多 page，这些 page 是根据 buddy 分配算法组织的，看下面两张图：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/rwsybc/1616167905260-9c71a405-512b-4594-8868-a3026cd6748b.jpeg" alt="">&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/rwsybc/1616167905277-eaf8430e-3eb8-4499-9639-9bf2b8c4572d.jpeg" alt="">&lt;/p>
&lt;p>上面的概念做下简单的介绍，对后面分析 oom killer 日志很有必要：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Node：每个 CPU 下的本地内存节点就是一个 Node，如果是 UMA 架构下，就只有一个 Node0,在 NUMA 架构下，会有多个 Node&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Zone：每个 Node 会划分很多域 Zone，大概有下面这些：&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ZONE_DMA：定义适合 DMA 的内存域，该区域的长度依赖于处理器类型。比如 ARM 所有地址都可以进行 DMA，所以该值可以很大，或者干脆不定义 DMA 类型的内存域。而在 IA-32 的处理器上，一般定义为 16M。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ZONE_DMA32：只在 64 位系统上有效，为一些 32 位外设 DMA 时分配内存。如果物理内存大于 4G，该值为 4G，否则与实际的物理内存大小相同。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ZONE_NORMAL：定义可直接映射到内核空间的普通内存域。在 64 位系统上，如果物理内存小于 4G，该内存域为空。而在 32 位系统上，该值最大为 896M。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ZONE_HIGHMEM：只在 32 位系统上有效，标记超过 896M 范围的内存。在 64 位系统上，由于地址空间巨大，超过 4G 的内存都分布在 ZONE_NORMA 内存域。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ZONE_MOVABLE：伪内存域，为了实现减小内存碎片的机制。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>分配价值链&lt;/p>
&lt;/li>
&lt;li>
&lt;p>除了只能在某个区域分配的内存（比如 ZONE_DMA），普通的内存分配会有一个“价值”的层次结构，按分配的“廉价度”依次为：ZONE_HIGHMEM &amp;gt; ZONE_NORMAL &amp;gt; ZONE_DMA。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>即内核在进行内存分配时，优先从高端内存进行分配，其次是普通内存，最后才是 DMA 内存&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Page：zone 下面就是真正的内存页了，每个页基础大小是 4K，他们维护在一个叫 free_area 的数组结构中&lt;/p>
&lt;/li>
&lt;li>
&lt;p>order：数组的 index，也叫 order，实际对应的是 page 的大小，比如 order 为 0，那么就是一堆 1 个空闲页（4K）组成的链表，order 为 1，就是一堆 2 个空闲页（8K）组成的链表，order 为 2，就是一堆 4 个空闲页（16K）组成的链表&lt;/p>
&lt;p>2.2 overcommit&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>根据 2.1，已经知道物理内存的大概结构以及分配的规则，不过实际上还有虚拟内存的存在，他的 overcommit 机制和 oom killer 有很大关系：&lt;/p>
&lt;p>在实际申请内存的时候，比如申请 1G，并不会在物理区域中分配 1G 的真实物理内存，而是分配 1G 的虚拟内存，等到需要的时候才去真正申请物理内存，也就是说申请不等于分配&lt;/p>
&lt;p>所以说，可以申请比物理内存实际大的内存，也就是 overcommit，这样会面临一个问题，就是当真的需要这么多内存的时候怎么办—&amp;gt;oom killer!&lt;/p>
&lt;p>vm.overcommit_memory 接受三种值：&lt;/p>
&lt;ul>
&lt;li>0 – Heuristic overcommit handling. 这是缺省值，它允许 overcommit，但过于明目张胆的 overcommit 会被拒绝，比如 malloc 一次性申请的内存大小就超过了系统总内存&lt;/li>
&lt;li>1 – Always overcommit. 允许 overcommit，对内存申请来者不拒。&lt;/li>
&lt;li>2 – Don’t overcommit. 禁止 overcommit。&lt;/li>
&lt;/ul>
&lt;h2 id="oom-killer-怎么挑选进程">oom killer 怎么挑选进程？&lt;a class="td-heading-self-link" href="#oom-killer-%e6%80%8e%e4%b9%88%e6%8c%91%e9%80%89%e8%bf%9b%e7%a8%8b" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>linux 会为每个进程算一个分数，最终他会将分数最高的进程 kill&lt;/p>
&lt;ul>
&lt;li>
&lt;p>/proc/oom_score_adj&lt;/p>
&lt;ul>
&lt;li>在计算最终的 badness score 时，会在计算结果是中加上 oom_score_adj，取值范围为-1000 到 1000&lt;/li>
&lt;li>如果将该值设置为-1000，则进程永远不会被杀死，因为此时 badness score 永远返回 0。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>/proc/oom_adj&lt;/p>
&lt;ul>
&lt;li>取值是-17 到+15，取值越高，越容易被干掉。如果是-17，则表示不能被 kill&lt;/li>
&lt;li>该设置参数的存在是为了和旧版本的内核兼容&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>/proc/oom_score&lt;/p>
&lt;ul>
&lt;li>这个值是系统综合进程的内存消耗量、CPU 时间(utime + stime)、存活时间(uptime - start time)和 oom_adj 计算出的，消耗内存越多分越高，存活时间越长分越低&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>子进程内存：Linux 在计算进程的内存消耗的时候，会将子进程所耗内存的一半同时算到父进程中。这样，那些子进程比较多的进程就要小心了。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>其他参数（不是很关键，不解释了）&lt;/p>
&lt;ul>
&lt;li>/proc/sys/vm/oom_dump_tasks&lt;/li>
&lt;li>/proc/sys/vm/oom_kill_allocating_task&lt;/li>
&lt;li>/proc/sys/vm/panic_on_oom&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>关闭 OOM killer&lt;/p>
&lt;ul>
&lt;li>
&lt;p>sysctl -w vm.overcommit_memory=2&lt;/p>
&lt;/li>
&lt;li>
&lt;p>echo &amp;ldquo;vm.overcommit_memory=2&amp;rdquo; &amp;raquo; /etc/sysctl.conf&lt;/p>
&lt;p>3.1 找出最有可能被杀掉的进程&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>cat &amp;gt; oomscore.sh &lt;span style="color:#4e9a06">&amp;lt;&amp;lt;EOF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">for proc in $(find /proc -maxdepth 1 -regex &amp;#39;/proc/[0-9]+&amp;#39;); do
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> printf &amp;#34;%2d %5d %s\n&amp;#34; \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> &amp;#34;$(cat $proc/oom_score)&amp;#34; \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> &amp;#34;$(basename $proc)&amp;#34; \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> &amp;#34;$(cat $proc/cmdline | tr &amp;#39;\0&amp;#39; &amp;#39; &amp;#39; | head -c 50)&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">done 2&amp;gt;/dev/null | sort -nr | head -n 10
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>chmod +x oomscore.sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>./oomscore.sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#0000cf;font-weight:bold">18&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">981&lt;/span> /usr/sbin/mysqld
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">31359&lt;/span> -bash
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">31056&lt;/span> -bash
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">31358&lt;/span> sshd: root@pts/6
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">31244&lt;/span> sshd: vpsee &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>priv&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">31159&lt;/span> -bash
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">31158&lt;/span> sudo -i
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">31055&lt;/span> sshd: root@pts/3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">30912&lt;/span> sshd: vpsee &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>priv&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">29547&lt;/span> /usr/sbin/sshd -D
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>3.2 避免的 oom killer 的方案&lt;/p>
&lt;ul>
&lt;li>直接修改/proc/PID/oom_adj 文件，将其置位-17&lt;/li>
&lt;li>修改/proc/sys/vm/lowmem_reserve_ratio&lt;/li>
&lt;li>直接关闭 oom-killer&lt;/li>
&lt;/ul>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>node &amp;amp; zone&lt;/li>
&lt;li>理解 LINUX 的 MEMORY OVERCOMMIT&lt;/li>
&lt;li>linux OOM-killer 机制（杀掉进程，释放内存）&lt;/li>
&lt;li>Taming the OOM killer&lt;/li>
&lt;li>linux OOM 机制分析&lt;/li>
&lt;li>理解和配置 Linux 下的 OOM Killer&lt;/li>
&lt;li>ubuntu 解决 cache 逐渐变大导致 oom-killer 将某些进程杀死的情况&lt;/li>
&lt;/ul>
&lt;h1 id="这篇是一例-oom-killer-日志的具体分析有疑问的可以先看上一篇">这篇是一例 oom killer 日志的具体分析,有疑问的可以先看上一篇：&lt;a class="td-heading-self-link" href="#%e8%bf%99%e7%af%87%e6%98%af%e4%b8%80%e4%be%8b-oom-killer-%e6%97%a5%e5%bf%97%e7%9a%84%e5%85%b7%e4%bd%93%e5%88%86%e6%9e%90%e6%9c%89%e7%96%91%e9%97%ae%e7%9a%84%e5%8f%af%e4%bb%a5%e5%85%88%e7%9c%8b%e4%b8%8a%e4%b8%80%e7%af%87" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>下面是一台 8G 内存上的一次 oom killer 的日志，上面跑的是 RocketMQ 3.2.6，java 堆配置：-server -Xms4g -Xmx4g -Xmn2g -XX:PermSize=128m -XX:MaxPermSize=320m&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>Jun &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> 17:19:10 iZ23tpcto8eZ kernel: AliYunDun invoked oom-killer: &lt;span style="color:#000">gfp_mask&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>0x201da, &lt;span style="color:#000">order&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>0, &lt;span style="color:#000">oom_score_adj&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jun &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> 17:19:10 iZ23tpcto8eZ kernel: AliYunDun &lt;span style="color:#000">cpuset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>/ &lt;span style="color:#000">mems_allowed&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jun &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> 17:19:10 iZ23tpcto8eZ kernel: active_anon:1813257 inactive_anon:37301 isolated_anon:0 active_file:84 inactive_file:0 isolated_file:0 unevictable:0 dirty:0 writeback:0 unstable:0 free:23900 slab_reclaimable:34218 slab_unreclaimable:5636 mapped:1252 shmem:100531 pagetables:68092 bounce:0 free_cma:0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jun &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> 17:19:10 iZ23tpcto8eZ kernel: Node &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> DMA free:15900kB min:132kB low:164kB high:196kB active_anon:0kB inactive_anon:0kB active_file:0kB inactive_file:0kB unevictable:0kB isolated&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>anon&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>:0kB isolated&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>file&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>:0kB present:15992kB managed:15908kB mlocked:0kB dirty:0kB writeback:0kB mapped:0kB shmem:0kB slab_reclaimable:0kB slab_unreclaimable:8kB kernel_stack:0kB pagetables:0kB unstable:0kB bounce:0kB free_cma:0kB writeback_tmp:0kB pages_scanned:0 all_unreclaimable? yes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jun &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> 17:19:10 iZ23tpcto8eZ kernel: lowmem_reserve&lt;span style="color:#ce5c00;font-weight:bold">[]&lt;/span>: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2801&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">7792&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">7792&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jun &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> 17:19:10 iZ23tpcto8eZ kernel: Node &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> DMA32 free:43500kB min:24252kB low:30312kB high:36376kB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>active_anon:2643608kB&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>2.5G&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> inactive_anon:61560kB active_file:40kB inactive_file:40kB unevictable:0kB isolated&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>anon&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>:0kB isolated&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>file&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>:0kB present:3129216kB managed:2869240kB mlocked:0kB dirty:0kB writeback:0kB mapped:748kB shmem:160024kB slab_reclaimable:54996kB slab_unreclaimable:6816kB kernel_stack:704kB pagetables:67440kB unstable:0kB bounce:0kB free_cma:0kB writeback_tmp:0kB pages_scanned:275 all_unreclaimable? yes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jun &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> 17:19:10 iZ23tpcto8eZ kernel: lowmem_reserve&lt;span style="color:#ce5c00;font-weight:bold">[]&lt;/span>: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4990&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4990&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jun &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> 17:19:10 iZ23tpcto8eZ kernel: Node &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> Normal free:36200kB min:43192kB low:53988kB high:64788kB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>active_anon:4609420kB&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>4.3G&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> inactive_anon:87644kB active_file:296kB inactive_file:0kB unevictable:0kB isolated&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>anon&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>:0kB isolated&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>file&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>:0kB present:5242880kB managed:5110124kB mlocked:0kB dirty:0kB writeback:0kB mapped:4260kB shmem:242100kB slab_reclaimable:81876kB slab_unreclaimable:15720kB kernel_stack:1808kB pagetables:204928kB unstable:0kB bounce:0kB free_cma:0kB writeback_tmp:0kB pages_scanned:511 all_unreclaimable? yes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jun &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> 17:19:10 iZ23tpcto8eZ kernel: lowmem_reserve&lt;span style="color:#ce5c00;font-weight:bold">[]&lt;/span>: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jun &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> 17:19:10 iZ23tpcto8eZ kernel: Node &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> DMA: 1*4kB &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>U&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> 1*8kB &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>U&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> 1*16kB &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>U&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> 0*32kB 2*64kB &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>U&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> 1*128kB &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>U&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> 1*256kB &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>U&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> 0*512kB 1*1024kB &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>U&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> 1*2048kB &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>R&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> 3*4096kB &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>M&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> 15900kB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jun &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> 17:19:10 iZ23tpcto8eZ kernel: Node &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> DMA32: 1281*4kB &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>UEM&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> 825*8kB &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>UEM&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> 1404*16kB &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>UEM&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> 290*32kB &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>EM&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> 0*64kB 0*128kB 0*256kB 0*512kB 0*1024kB 0*2048kB 0*4096kB &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> 43468kB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jun &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> 17:19:10 iZ23tpcto8eZ kernel: Node &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> Normal: 1441*4kB &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>UEM&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> 3177*8kB &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>UEM&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> 315*16kB &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>UEM&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> 0*32kB 0*64kB 0*128kB 0*256kB 0*512kB 0*1024kB 0*2048kB 0*4096kB &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> 36220kB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jun &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> 17:19:10 iZ23tpcto8eZ kernel: Node &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#000">hugepages_total&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#000">hugepages_free&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#000">hugepages_surp&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#000">hugepages_size&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>2048kB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jun &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> 17:19:10 iZ23tpcto8eZ kernel: &lt;span style="color:#0000cf;font-weight:bold">100592&lt;/span> total pagecache pages
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jun &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> 17:19:10 iZ23tpcto8eZ kernel: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> pages in swap cache
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jun &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> 17:19:10 iZ23tpcto8eZ kernel: Swap cache stats: add 0, delete 0, find 0/0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jun &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> 17:19:10 iZ23tpcto8eZ kernel: Free &lt;span style="color:#000">swap&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> 0kB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jun &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> 17:19:10 iZ23tpcto8eZ kernel: Total &lt;span style="color:#000">swap&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> 0kB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jun &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> 17:19:10 iZ23tpcto8eZ kernel: &lt;span style="color:#0000cf;font-weight:bold">2097151&lt;/span> pages RAM
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jun &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> 17:19:10 iZ23tpcto8eZ kernel: &lt;span style="color:#0000cf;font-weight:bold">94167&lt;/span> pages reserved
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jun &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> 17:19:10 iZ23tpcto8eZ kernel: &lt;span style="color:#0000cf;font-weight:bold">284736&lt;/span> pages shared
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jun &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> 17:19:10 iZ23tpcto8eZ kernel: &lt;span style="color:#0000cf;font-weight:bold">1976069&lt;/span> pages non-shared
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jun &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> 17:19:10 iZ23tpcto8eZ kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> pid &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> uid tgid total_vm rss nr_ptes swapents oom_score_adj name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jun &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> 17:19:10 iZ23tpcto8eZ kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 338&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">338&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10748&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">844&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">25&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> systemd-journal
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jun &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> 17:19:10 iZ23tpcto8eZ kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 351&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">351&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">26113&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">61&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">20&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> lvmetad
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jun &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> 17:19:10 iZ23tpcto8eZ kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 368&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">368&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10509&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">149&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">23&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> -1000 systemd-udevd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jun &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> 17:19:10 iZ23tpcto8eZ kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 521&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">521&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">170342&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">908&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">178&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> rsyslogd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jun &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> 17:19:10 iZ23tpcto8eZ kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 525&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">525&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">8671&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">82&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">21&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> systemd-logind
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jun &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> 17:19:10 iZ23tpcto8eZ kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 526&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">81&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">526&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">7157&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">96&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">19&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> -900 dbus-daemon
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jun &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> 17:19:10 iZ23tpcto8eZ kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 530&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">530&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">31575&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">162&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">17&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> crond
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jun &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> 17:19:10 iZ23tpcto8eZ kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 540&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">28&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">540&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">160978&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">131&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">37&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> nscd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jun &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> 17:19:10 iZ23tpcto8eZ kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 548&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">548&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">27501&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">30&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> agetty
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jun &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> 17:19:10 iZ23tpcto8eZ kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 588&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">588&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1621&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">26&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">9&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> iprinit
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jun &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> 17:19:10 iZ23tpcto8eZ kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 590&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">590&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1621&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">25&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">9&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> iprupdate
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jun &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> 17:19:10 iZ23tpcto8eZ kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 601&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">601&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">9781&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">23&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">8&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> iprdump
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jun &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> 17:19:10 iZ23tpcto8eZ kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 838&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">38&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">838&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">7399&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">169&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">18&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> ntpd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jun &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> 17:19:10 iZ23tpcto8eZ kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 881&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">881&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">386&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">44&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> aliyun-service
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jun &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> 17:19:10 iZ23tpcto8eZ kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 5973&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">5973&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">41595&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">165&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">32&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> gmond
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jun &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> 17:19:10 iZ23tpcto8eZ kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 3829&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3829&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">33413&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">292&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">67&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> sshd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jun &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> 17:19:10 iZ23tpcto8eZ kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 3831&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3831&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">33582&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">476&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">68&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> sshd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jun &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> 17:19:10 iZ23tpcto8eZ kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 3832&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3832&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">29407&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">622&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">16&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> bash
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jun &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> 17:19:10 iZ23tpcto8eZ kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>14638&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">14638&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">20697&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">210&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">42&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> -1000 sshd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jun &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> 17:19:10 iZ23tpcto8eZ kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>11531&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">11531&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">33413&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">293&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">66&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> sshd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jun &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> 17:19:10 iZ23tpcto8eZ kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>11533&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">11533&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">33413&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">292&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">64&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> sshd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jun &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> 17:19:10 iZ23tpcto8eZ kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>11534&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">11534&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">29361&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">584&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">15&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> bash
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jun &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> 17:19:10 iZ23tpcto8eZ kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 3172&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3172&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">6338&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">161&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">17&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> AliYunDunUpdate
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jun &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> 17:19:10 iZ23tpcto8eZ kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 3224&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3224&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">32867&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2270&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">61&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> AliYunDun
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jun &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> 17:19:10 iZ23tpcto8eZ kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 5417&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">5417&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">28279&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">51&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">14&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jun &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> 17:19:10 iZ23tpcto8eZ kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 5421&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">5421&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">28279&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">53&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">13&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jun &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> 17:19:10 iZ23tpcto8eZ kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 5424&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">5424&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">36913689&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1537770&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">66407&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> java
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jun &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> 17:19:10 iZ23tpcto8eZ kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>17132&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">17132&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">21804&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">215&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">44&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> zabbix_agentd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jun &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> 17:19:10 iZ23tpcto8eZ kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>17133&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">17133&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">21804&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">285&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">43&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> zabbix_agentd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jun &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> 17:19:10 iZ23tpcto8eZ kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>17134&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">17134&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">21866&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">290&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">44&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> zabbix_agentd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jun &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> 17:19:10 iZ23tpcto8eZ kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>17135&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">17135&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">21866&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">290&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">44&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> zabbix_agentd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jun &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> 17:19:10 iZ23tpcto8eZ kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>17136&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">17136&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">21841&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">290&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">44&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> zabbix_agentd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jun &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> 17:19:10 iZ23tpcto8eZ kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>17137&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">17137&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">21804&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">245&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">43&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> zabbix_agentd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jun &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> 17:19:10 iZ23tpcto8eZ kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>13669&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">13669&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">28279&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">51&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">14&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jun &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> 17:19:10 iZ23tpcto8eZ kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>13673&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">13673&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">28279&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">50&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">13&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jun &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> 17:19:10 iZ23tpcto8eZ kernel: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>13675&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">13675&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">879675&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">204324&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">494&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> java
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jun &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> 17:19:10 iZ23tpcto8eZ kernel: Out of memory: Kill process &lt;span style="color:#0000cf;font-weight:bold">5424&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>java&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> score &lt;span style="color:#0000cf;font-weight:bold">800&lt;/span> or sacrifice child
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jun &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> 17:19:10 iZ23tpcto8eZ kernel: Killed process &lt;span style="color:#0000cf;font-weight:bold">5424&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>java&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> total-vm:147654756kB, anon-rss:6151080kB, file-rss:0kB
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>各列字段解释：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>min 下的内存是保留给内核使用的；当到达 min，会触发内存的 direct reclaim&lt;/p>
&lt;/li>
&lt;li>
&lt;p>low 水位比 min 高一些，当内存可用量小于 low 的时候，会触发 kswapd 回收内存，当 kswapd 慢慢的将内存 回收到 high 水位，就开始继续睡眠&lt;/p>
&lt;p>1.谁申请内存以及谁被 kill 了？
这两个问题，可以从头部和尾部的日志分析出来：&lt;/p>
&lt;pre>&lt;code>Jun 4 17:19:10 iZ23tpcto8eZ kernel: AliYunDun invoked oom-killer: gfp_mask=0x201da, order=0, oom_score_adj=0
Jun 4 17:19:10 iZ23tpcto8eZ kernel: Killed process 5424 (java) total-vm:147654756kB, anon-rss:6151080kB, file-rss:0kB
&lt;/code>&lt;/pre>
&lt;/li>
&lt;/ul>
&lt;p>AliYunDun 申请内存，kill 掉了 java 进程 5424，他占用的内存是 6151080K(5.8G)&lt;/p>
&lt;p>还有一个小问题可能会有疑问，那就是进程 5424 的 RSS（1537770）明明小于 6151080，实际是因为这里的 RSS 是 4K 位单位的，所以要乘以 4，算出来就对了&lt;/p>
&lt;p>物理内存申请我们在上一篇分析了，会到不同的 Node 不同的 zone，那么这次申请的是哪一部分？这个可以从 gfp_mask=0x201da, order=0 分析出来，gfp_mask(get free page)是申请内存的时候，会传的一个标记位，里面包含三个信息：区域修饰符、行为修饰符、类型修饰符：&lt;/p>
&lt;p>0X201da = 0x20000 | 0x100| 0x80 | 0x40 | 0x10 | 0x08 | 0x02 也就是下面几个值：___GFP_HARDWAL | ___GFP_COLD | ___GFP_FS | ___GFP_IO | ___GFP_MOVABLE| ___GFP_HIGHMEM&lt;/p>
&lt;p>同时设置了___GFP_MOVABLE 和___GFP_HIGHMEM 会扫描 ZONE_MOVABLE，其实也就是会在 ZONE_NORMAL，再贴一次神图
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/rwsybc/1616167905288-838e8528-b134-45bb-bbec-81d175c4c272.jpeg" alt="">&lt;/p>
&lt;p>另外 order 表示了本次申请内存的大小 0，也就是 4KB&lt;/p>
&lt;p>也就是说 AliYunDun 尝试从 ZONE_NORMAL 申请 4KB 的内存，但是失败了，导致了 OOM KILLER&lt;/p>
&lt;p>2.各个 zone 的情况如何？&lt;/p>
&lt;p>接下来，自然就会问，连 4KB 都没有，那到底还有多少？看这部分日志：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>Jun &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> 17:19:10 iZ23tpcto8eZ kernel: Node &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> DMA free:15900kB min:132kB low:164kB high:196kB active_anon:0kB inactive_anon:0kB active_file:0kB inactive_file:0kB unevictable:0kB isolated&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>anon&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>:0kB isolated&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>file&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>:0kB present:15992kB managed:15908kB mlocked:0kB dirty:0kB writeback:0kB mapped:0kB shmem:0kB slab_reclaimable:0kB slab_unreclaimable:8kB kernel_stack:0kB pagetables:0kB unstable:0kB bounce:0kB free_cma:0kB writeback_tmp:0kB pages_scanned:0 all_unreclaimable? yes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jun &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> 17:19:10 iZ23tpcto8eZ kernel: lowmem_reserve&lt;span style="color:#ce5c00;font-weight:bold">[]&lt;/span>: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2801&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">7792&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">7792&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jun &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> 17:19:10 iZ23tpcto8eZ kernel: Node &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> DMA32 free:43500kB min:24252kB low:30312kB high:36376kB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>active_anon:2643608kB&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>2.5G&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> inactive_anon:61560kB active_file:40kB inactive_file:40kB unevictable:0kB isolated&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>anon&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>:0kB isolated&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>file&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>:0kB present:3129216kB managed:2869240kB mlocked:0kB dirty:0kB writeback:0kB mapped:748kB shmem:160024kB slab_reclaimable:54996kB slab_unreclaimable:6816kB kernel_stack:704kB pagetables:67440kB unstable:0kB bounce:0kB free_cma:0kB writeback_tmp:0kB pages_scanned:275 all_unreclaimable? yes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jun &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> 17:19:10 iZ23tpcto8eZ kernel: lowmem_reserve&lt;span style="color:#ce5c00;font-weight:bold">[]&lt;/span>: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4990&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4990&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jun &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> 17:19:10 iZ23tpcto8eZ kernel: Node &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> Normal free:36200kB min:43192kB low:53988kB high:64788kB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>active_anon:4609420kB&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>4.3G&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> inactive_anon:87644kB active_file:296kB inactive_file:0kB unevictable:0kB isolated&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>anon&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>:0kB isolated&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>file&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>:0kB present:5242880kB managed:5110124kB mlocked:0kB dirty:0kB writeback:0kB mapped:4260kB shmem:242100kB slab_reclaimable:81876kB slab_unreclaimable:15720kB kernel_stack:1808kB pagetables:204928kB unstable:0kB bounce:0kB free_cma:0kB writeback_tmp:0kB pages_scanned:511 all_unreclaimable? yes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jun &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> 17:19:10 iZ23tpcto8eZ kernel: lowmem_reserve&lt;span style="color:#ce5c00;font-weight:bold">[]&lt;/span>: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到 Normal 还有 36200KB，DMA32 还有 43500KB，DMA 还有 15900KB，其中 Normal 的 free 确实小于 min，但是 DMA32 和 DMA 的 free 没问题啊？从上篇文章分析来看，分配是有链条的，Normal 不够了，会从 DMA32 以及 DMA 去请求分配，所以为什么分配失败了呢？&lt;/p>
&lt;p>2.1 lowmem_reserve&lt;/p>
&lt;p>虽然说分配内存会按照 Normal、DMA32、DMA 的顺序去分配，但是低端内存相对来说更宝贵些，为了防止低端内存被高端内存用完，linux 设计了保护机制，也就是 lowmen_reserve，从上面的日志看，他们的值是这样的：&lt;/p>
&lt;ul>
&lt;li>DMA（index=0）: lowmem_reserve[]:0 2801 7792 7792&lt;/li>
&lt;li>DMA32（index=1）: lowmem_reserve[]: 0 0 4990 4990&lt;/li>
&lt;li>Normal（index=2）: lowmem_reserve[]: 0 0 0 0&lt;/li>
&lt;/ul>
&lt;p>lowmen_reserve 的值是一个数组，当 Normal(index=2)像 DMA32 申请内存的时候，需要满足条件：DMA32 high+lowmem_reserve[2] &amp;lt; free，才能申请，来算下：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Normal：从自己这里申请，free(36200) &amp;lt; min(43192)，所以申请失败了(watermark[min]以下的内存属于系统的自留内存，用以满足特殊使用，所以不会给用户态的普通申请来用)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Normal 转到 DMA32 申请:&lt;code>high(36376KB) + lowmem_reserve[2](4990)\*4=56336KB &amp;gt; DMA32 Free(43500KB)&lt;/code>,不允许申请&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Normal 转到 DMA 申请:&lt;code>high(196KB) + lowmem_reserve[2](7792)\*4 = 31364KB &amp;gt; DMA Free(15900KB)&lt;/code>,不允许申请,所以&amp;hellip;.最终失败了&lt;/p>
&lt;p>2.2 min_free_kbytes&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>这里属于扩展知识了，和分析 oom 问题不大&lt;/p>
&lt;p>我们知道了每个区都有 min、low、high，那他们是怎么计算出来的，就是根据 min_free_kbytes 计算出来的，他本身在系统初始化的时候计算，最小 128K，最大 64M&lt;/p>
&lt;ul>
&lt;li>watermark[min] = min_free_kbytes 换算为 page 单位即可，假设为 min_free_pages。（因为是每个 zone 各有一套 watermark 参数，实际计算效果是根据各个 zone 大小所占内存总大小的比例，而算出来的 per zone min_free_pages）&lt;/li>
&lt;li>watermark[low] = watermark[min] * 5 / 4&lt;/li>
&lt;li>watermark[high] = watermark[min] * 3 / 2&lt;/li>
&lt;/ul>
&lt;p>min 和 low 的区别：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>min 下的内存是保留给内核使用的；当到达 min，会触发内存的 direct reclaim&lt;/p>
&lt;/li>
&lt;li>
&lt;p>low 水位比 min 高一些，当内存可用量小于 low 的时候，会触发 kswapd 回收内存，当 kswapd 慢慢的将内存 回收到 high 水位，就开始继续睡眠&lt;/p>
&lt;p>3.最后的问题：java 为什么占用了这么多内存？&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>内存不足申请失败的细节都分析清楚了，剩下的问题就是为什么 java 会申请这么多内存(5.8G)，明明-Xmx 配置的是 4G，加上 PermSize，也就最多 4.3G。&lt;/p>
&lt;p>因为这上面跑的是 RocketMQ，他会有文件映射 mmap，所以在仔细分析 oom 日志之前，怀疑是 pagecache 占用，导致 RSS 为 5.8G，这带来了另一个问题，为什么 pagecache 没有回收？分析了日志以后，发现和 pagecache 基本没关系，看这个日志(换行是我后来加上的)：&lt;/p>
&lt;pre>&lt;code>Jun 4 17:19:10 iZ23tpcto8eZ kernel: active_anon:1813257 inactive_anon:37301 isolated_anon:0 active_file:84
inactive_file:0 isolated_file:0
unevictable:0 dirty:0 writeback:0
unstable:0 free:23900
slab_reclaimable:34218
slab_unreclaimable:5636 mapped:1252
shmem:100531 pagetables:68092 bounce:0
free_cma:0
&lt;/code>&lt;/pre>
&lt;p>当时的内存大部分都是活跃的匿名页(active_anon 18132574KB=6.9G)，其他的非活跃匿名页（inactive_anon 145M），活跃文件页（active_file 844=336KB）,非活跃文件页（inactive_file 0），也就是说当时基本没有 pagecache，因为 pagecache 会属于文件页&lt;/p>
&lt;p>并且，这台机器上的 gc log 没配置好，进程重启以后 gc 文件被覆盖了，另外被 oom killer 也没有 java dump，所以…..真的不知道到底为什么 java 占了 5.8G!!! 悬案还是没有解开 T_T&lt;/p>
&lt;p>如果上层申请内存的速度太快，导致空闲内存降至 watermark[min]后，内核就会进行 direct reclaim（直接回收），即直接在应用程序的进程上下文中进行回收，再用回收上来的空闲页满足内存申请，因此实际会阻塞应用程序，带来一定的响应延迟&lt;/p></description></item><item><title>Docs: mmap可以让程序员解锁哪些骚操作？</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Memory/mmap%E5%8F%AF%E4%BB%A5%E8%AE%A9%E7%A8%8B%E5%BA%8F%E5%91%98%E8%A7%A3%E9%94%81%E5%93%AA%E4%BA%9B%E9%AA%9A%E6%93%8D%E4%BD%9C/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Memory/mmap%E5%8F%AF%E4%BB%A5%E8%AE%A9%E7%A8%8B%E5%BA%8F%E5%91%98%E8%A7%A3%E9%94%81%E5%93%AA%E4%BA%9B%E9%AA%9A%E6%93%8D%E4%BD%9C/</guid><description>
&lt;p>&lt;a href="https://mp.weixin.qq.com/s/bKq-b9Ga2IA2nbhi9weZtw">mmap 可以让程序员解锁哪些骚操作？&lt;/a>&lt;/p>
&lt;p>大家好，我是小风哥！&lt;/p>
&lt;p>今天这篇文章带你讲解下稍显神秘的 mmap 到底是怎么一回事。&lt;/p>
&lt;p>&lt;strong>简单的与麻烦的&lt;/strong>&lt;/p>
&lt;p>用代码读写内存对程序员来说是非常方便非常自然的，但用代码读写磁盘对程序员来说就不那么方便不那么自然了。&lt;/p>
&lt;p>回想一下，你在代码中读写内存有多简单：&lt;/p>
&lt;p>定义一个数组：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">100&lt;/span>&lt;span style="color:#000;font-weight:bold">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>看到了吧，这时你就在写内存，甚至你可能在写这段代码时下意识里都没有去想读内存这件事。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/e5d96245-eda2-4a49-ad98-ece9eb4b7498/640" alt="">&lt;/p>
&lt;p>再想想你是怎样读磁盘文件的？&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">char&lt;/span> &lt;span style="color:#000">buf&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1024&lt;/span>&lt;span style="color:#000;font-weight:bold">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">fd&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000">open&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;/filepath/abc.txt&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">read&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fd&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">buf&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1024&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>看到了吧，读写磁盘文件其实是一件很麻烦的事情，你需要 open 一个文件，意思是告诉操作系统 “Hey，操作系统，我要开始读 abc.txt 这个文件了，把这个文件的所有信息准备好，然后给我一个代号”。这个代号就是所谓的文件描述符，拿到文件描述符后你才能继续接下来的读写操作。&lt;/p>
&lt;h5 id="heading">&lt;a class="td-heading-self-link" href="#heading" aria-label="Heading self-link">&lt;/a>&lt;/h5>
&lt;p>&lt;strong>为什么麻烦&lt;/strong>&lt;/p>
&lt;p>现在你应该看到了，操作磁盘文件要比操作内存复杂很多，根本原因就在于寻址方式不同。&lt;/p>
&lt;p>对内存来说我们可以直接按照字节粒度去寻址，但对磁盘上保存的文件来说则不是这样的，磁盘上保存的文件是按照块 (block) 的粒度来寻址的，因此你必须先把磁盘中的文件读取到内存中，然后再按照字节粒度来操作文件内容。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/e5d96245-eda2-4a49-ad98-ece9eb4b7498/640" alt="">&lt;/p>
&lt;p>你可能会想既然直接操作内存很简单，那么&lt;strong>我们有没有办法像读写内存那样去直接读写磁盘文件呢&lt;/strong>？&lt;/p>
&lt;p>答案是肯定的。&lt;/p>
&lt;h5 id="heading-1">&lt;a class="td-heading-self-link" href="#heading-1" aria-label="Heading self-link">&lt;/a>&lt;/h5>
&lt;p>&lt;strong>要开脑洞了&lt;/strong>&lt;/p>
&lt;p>对于像我们这样在用户态编程的程序员来说，内存在我们眼里就是一段连续的空间。啊哈，巧了，&lt;strong>磁盘上保存的文件在程序员眼里也存放在一段连续的空间中&lt;/strong>（有的同学可能会说文件其实是在磁盘上离散存放的，请注意，我们在这里只从文件使用者的角度来讲）。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/e5d96245-eda2-4a49-ad98-ece9eb4b7498/640" alt="">&lt;/p>
&lt;p>那么这两段空间有没有办法关联起来呢？&lt;/p>
&lt;p>答案是肯定的，怎么关联呢？&lt;/p>
&lt;p>答案就是。。。。。。你猜对了吗？答案是通过虚拟内存。&lt;/p>
&lt;p>关于虚拟内存我们已经讲解过很多次了，虚拟内存就是假的&lt;strong>地址空间&lt;/strong>，是进程看到的幻象，其目的是&lt;strong>让每个进程都认为自己独占内存&lt;/strong>，关于虚拟内存完整的详细讲解请参考博主的深入理解操作系统，关注公众号码农的荒岛求生并回复操作系统即可。&lt;/p>
&lt;p>&lt;strong>既然进程看到地址空间是假的那么一切都好办了&lt;/strong>。&lt;/p>
&lt;p>既然是假的，那么就有做手脚的操作空间，怎么做手脚呢？&lt;/p>
&lt;p>从普通程序员眼里看文件不是保存在一段连续的磁盘空间上吗？我们可以直接把这段空间映射到进程的内存中，就像这样：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/e5d96245-eda2-4a49-ad98-ece9eb4b7498/640" alt="">&lt;/p>
&lt;p>假设文件长度是 100 字节，我们把该文件映射到了进程的内存中，地址是从 600 ~ 800，那么当你直接读写 600 ~ 800 这段内存时，实际上就是在直接操作磁盘文件。&lt;/p>
&lt;p>这一切是怎么做到呢？&lt;/p>
&lt;h5 id="heading-2">&lt;a class="td-heading-self-link" href="#heading-2" aria-label="Heading self-link">&lt;/a>&lt;/h5>
&lt;p>&lt;strong>魔术师操作系统&lt;/strong>&lt;/p>
&lt;p>原来这一切背后的功劳是操作系统。&lt;/p>
&lt;p>当我们首次读取 600~800 这段地址空间时，操作系统会检测的这一操作，因为此时这段内存中什么内容都还没有，此时操作系统自己读取磁盘文件填充到这段内存空间中，此后程序就可以像读内存一样直接读取磁盘内容了。&lt;/p>
&lt;p>写操作也很简单，用户程序依然可以直接修改这块内存，此后操作系统会在背后将修改内容写回磁盘。&lt;/p>
&lt;p>现在你应该看到了，其实采用 mmap 这种方法磁盘依然还是按照块的粒度来寻址的，&lt;strong>只不过在操作系统的一番骚操作下对于用户态的程序来说 “看起来” 我们能像读写内存那样直接读写磁盘文件了，从按块粒度寻址到按照字节粒度寻址，这中间的差异就是操作系统来填补的。&lt;/strong>&lt;/p>
&lt;p>我想你现在应该大体明白 mmap 是什么意思了。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/e5d96245-eda2-4a49-ad98-ece9eb4b7498/640" alt="">&lt;/p>
&lt;p>接下来你肯定要问的问题就是，mmap 有什么好处呢？我为什么要使用 mmap？&lt;/p>
&lt;h5 id="heading-3">&lt;a class="td-heading-self-link" href="#heading-3" aria-label="Heading self-link">&lt;/a>&lt;/h5>
&lt;p>&lt;strong>内存 copy 与系统调用&lt;/strong>&lt;/p>
&lt;p>我们常用的标准 IO，也就是 read/write 其底层是涉及到系统调用的，同时当使用 read/write 读写文件内容时，需要将数据从内核态 copy 到用户态，修改完毕后再从用户态 copy 到内核态，显然，这些都是有开销的。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/e5d96245-eda2-4a49-ad98-ece9eb4b7498/640" alt="">&lt;/p>
&lt;p>而 mmap 则无此问题，基于 mmap 读写磁盘文件不会招致系统调用以及额外的内存 copy 开销，但 mmap 也不是完美的，mmap 也有自己的缺点。&lt;/p>
&lt;p>其中一方面在于为了创建并维持地址空间与文件的映射关系，内核中需要有特定的数据结构来实现这一映射，这当然是有性能开销的，除此之外另一点就是缺页问题，page fault。&lt;/p>
&lt;p>注意，缺页中断也是有开销的，而且不同的内核由于内部的实现机制不同，其系统调用、数据 copy 以及缺页处理的开销也不同，因此就性能上来说我们不能肯定的说 mmap 就比标准 IO 好。这要看标准 IO 中的系统调用、内存调用的开销与 mmap 方法中的缺页中断处理的开销哪个更小，开销小的一方将展现出更优异的性能。&lt;/p>
&lt;p>还是那句话，谈到性能，单纯的理论分析就不是那么好用了，你需要基于真实的场景基于特定的操作系统以及硬件去测试才能有结论。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/e5d96245-eda2-4a49-ad98-ece9eb4b7498/640" alt="">&lt;/p>
&lt;h5 id="heading-4">&lt;a class="td-heading-self-link" href="#heading-4" aria-label="Heading self-link">&lt;/a>&lt;/h5>
&lt;p>&lt;strong>大文件处理&lt;/strong>&lt;/p>
&lt;p>到目前为止我想大家对 mmap 最直观的理解就是可以像直接读写内存那样来操作磁盘文件，这是其中一个优点。&lt;/p>
&lt;p>另一个优点在于 mmap 其实是和操作系统中的虚拟内存密切相关的，这就为 mmap 带来了一个很有趣的优势。&lt;/p>
&lt;p>这个优势在于处理大文件场景，这里的大文件指的是文件的大小超过你的物理内存，在这种场景下如果你使用传统的 read/write，那么你必须一块一块的把文件搬到内存，处理完文件的一小部分再处理下一部分。&lt;/p>
&lt;p>这种需要在内存中开辟一块空间——也就是我们常说的 buffer，的方案听上去就麻烦有没有，而且还需要操作系统把数据从内核态 copy 到用户态的 buffer 中。&lt;/p>
&lt;p>但如果用 mmap 情况就不一样了，只要你的进程地址空间足够大，可以直接把这个大文件映射到你的进程地址空间中，即使该文件大小超过物理内存也可以，这就是虚拟内存的巧妙之处了**，当物理内存的空闲空间所剩无几时虚拟内存会把你进程地址空间中不常用的部分扔出去**，这样你就可以继续在有限的物理内存中处理超大文件了，这个过程对程序员是透明的，虚拟内存都给你处理好了。关于虚拟内存的透彻讲解请参考博主的深入理解操作系统，关注公众号码农的荒岛求生并回复操作系统即可。&lt;/p>
&lt;p>注意，mmap 与虚拟内存的结合在处理大文件时可以简化代码设计，但在性能上是否优于传统的 read/write 方法就不一定了，还是那句话关于 mmap 与传统 IO 在涉及到性能时你需要基于真实的应用场景测试。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/e5d96245-eda2-4a49-ad98-ece9eb4b7498/640" alt="">&lt;/p>
&lt;p>使用 mmap 处理大文件要注意一点，如果你的系统是 32 位的话，进程的地址空间就只有 4G，这其中还有一部分预留给操作系统，因此在 32 位系统下可能不足以在你的进程地址空间中找到一块连续的空间来映射该文件，在 64 位系统下则无需担心地址空间不足的问题，这一点要注意。&lt;/p>
&lt;h5 id="heading-5">&lt;a class="td-heading-self-link" href="#heading-5" aria-label="Heading self-link">&lt;/a>&lt;/h5>
&lt;p>&lt;strong>节省内存&lt;/strong>&lt;/p>
&lt;p>这可能是 mmap 最大的优势，以及最好的应用场景了。&lt;/p>
&lt;p>假设有一个文件，很多进程的运行都依赖于此文件，而且还是有一个假设，那就是这些进程是以只读 (read-only) 的方式依赖于此文件。&lt;/p>
&lt;p>你一定在想，这么神奇？很多进程以只读的方式依赖此文件？有这样的文件吗？&lt;/p>
&lt;p>答案是肯定的，这就是动态链接库。&lt;/p>
&lt;p>要想弄清楚动态链接库，我们就不得不从静态库说起。&lt;/p>
&lt;p>假设有三个程序 A、B、C 依赖一个静态库，那么链接器在生成可执行程序 A、B、C 时会把该静态库 copy 到 A、B、C 中，就像这样：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/e5d96245-eda2-4a49-ad98-ece9eb4b7498/640" alt="">&lt;/p>
&lt;p>假设你本身要写的代码只有 2MB 大小，但却依赖了一个 100MB 的静态库，那么最终生成的可执行程序就是 102MB，尽管你本身的代码只有 2MB。&lt;/p>
&lt;p>而且从图中我们可以看出，可执行程序 A、B、C 中都有一部分静态库的副本，这里面的内容是完全一样的，那么很显然，这些可执行程序放在磁盘上会浪费磁盘空间，加载到内存中运行时会浪费内存空间。&lt;/p>
&lt;p>那么该怎么解决这个问题呢？&lt;/p>
&lt;p>很简单，可执行程序 A、B、C 中为什么都要各自保存一份完全一样的数据呢？其实我们只需要在可执行程序 A、B、C 中保存一小点信息，这点信息里记录了依赖了哪个库，那么当可执行程序运行起来后再把相应的库加载到内存中：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/e5d96245-eda2-4a49-ad98-ece9eb4b7498/640" alt="">&lt;/p>
&lt;p>依然假设你本身要写的代码只有 2MB 大小，此时依赖了一个 100MB 的动态链接库，那么最终生成的可执行程序就是 2MB，尽管你依赖了一个 100MB 的库。&lt;/p>
&lt;p>而且从图中可以看出，此时可执行程序 ABC 中已经没有冗余信息了，这不但节省磁盘空间，而且节省内存空间，&lt;strong>让有限的内存可以同时运行更多的进程&lt;/strong>，是不是很酷。&lt;/p>
&lt;p>现在我们已经知道了动态库的妙用，但我们并没有说明动态库是怎么节省内存的，接下来 mmap 就该登场了。&lt;/p>
&lt;p>你不是很多进程都依赖于同一个库嘛，那么我就用 mmap 把该库直接映射到各个进程的地址空间中，&lt;strong>尽管每个进程都认为自己地址空间中加载了该库，但实际上该库在内存中只有一份&lt;/strong>。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/e5d96245-eda2-4a49-ad98-ece9eb4b7498/640" alt="">&lt;/p>
&lt;p>mmap 就这样很神奇和动态链接库联动起来了，关于链接器以及静态库动态库等更加详细的讲解你可以关注公众号码农的荒岛求生并回复链接器即可。&lt;/p>
&lt;h5 id="heading-6">&lt;a class="td-heading-self-link" href="#heading-6" aria-label="Heading self-link">&lt;/a>&lt;/h5>
&lt;p>&lt;strong>想用好 mmap 没那么容易&lt;/strong>&lt;/p>
&lt;p>现在你应该大体了解 mmap，想用好 mmap 你必须对虚拟内存有一个较为透彻的理解，并且能对你的应用场景有一个透彻的理解，在使用 mmap 之前问问自己是不是还有更好的办法，因此，对于新手来说并不推荐使用该机制。&lt;/p>
&lt;h5 id="heading-7">&lt;a class="td-heading-self-link" href="#heading-7" aria-label="Heading self-link">&lt;/a>&lt;/h5>
&lt;p>&lt;strong>总结&lt;/strong>&lt;/p>
&lt;p>mmap 在博主眼里是一种很独特的机制，这种机制最大的诱惑在于可以像读写内存样方便的操作磁盘文件，这简直就像魔法一样，因此在一些场景下可以简化代码设计。&lt;/p>
&lt;p>但谈到 mmap 的与标准 IO(read/write) 的性能情况就比较复杂了，标准 IO 设计到系统调用以及用户态内核态的 copy 问题，而 mmap 则涉及到维持内存与磁盘文件的映射关系以及缺页处理的开销，单纯的从理论分析这二者半斤八两，如果你的应用场景对性能要求较高，那么你需要基于真实场景进行测试。&lt;/p>
&lt;p>我是小风哥，希望这篇文章对大家理解 mmap 有所帮助。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/e5d96245-eda2-4a49-ad98-ece9eb4b7498/0" alt="">&lt;/p>
&lt;p>&lt;strong>码农的荒岛求生&lt;/strong>&lt;/p>
&lt;p>助你逃离固有技术点的禁闭岛，实现技术进阶。&lt;/p>
&lt;p>118 篇原创内容&lt;/p>
&lt;p>公众号&lt;/p>
&lt;p>关注公众号 “&lt;strong>码农的荒岛求生&lt;/strong>” 并回复 “&lt;strong>资料&lt;/strong>” 阅读&lt;strong>全部核心原创&lt;/strong>。&lt;/p>
&lt;p>哦对了，关于编程或者计算机如果你有任何疑惑的问题，欢迎添加我的微信 “coder_saver”告诉我，备注 “读者” 即可，就当为博主提供素材了。&lt;/p>
&lt;p>最后，博主的《&lt;strong>深入理解操作系统&lt;/strong>》现已全部更新完毕啦，点击下图中的二维码即可一键购买全部章节。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/e5d96245-eda2-4a49-ad98-ece9eb4b7498/640" alt="">&lt;/p></description></item><item><title>Docs: 堆区与栈区</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Memory/%E5%A0%86%E5%8C%BA%E4%B8%8E%E6%A0%88%E5%8C%BA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Memory/%E5%A0%86%E5%8C%BA%E4%B8%8E%E6%A0%88%E5%8C%BA/</guid><description>
&lt;h1 id="heap堆-与-stack栈">Heap(堆) 与 Stack(栈)&lt;a class="td-heading-self-link" href="#heap%e5%a0%86-%e4%b8%8e-stack%e6%a0%88" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://stackoverflow.com/questions/79923/what-and-where-are-the-stack-and-heap">StackOverflow&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/wHY118_mq9aiiUcwgYT3dQ">公众号-码农的荒岛求生，程序员应如何理解内存：中篇&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="堆与栈的本质是什么">堆与栈的本质是什么&lt;a class="td-heading-self-link" href="#%e5%a0%86%e4%b8%8e%e6%a0%88%e7%9a%84%e6%9c%ac%e8%b4%a8%e6%98%af%e4%bb%80%e4%b9%88" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>在编程语言中，堆区和栈区本质上都是内存，因此二者在本质上没有任何区别，只不过这两块内存的&lt;strong>使用方式&lt;/strong>是不一样的。&lt;/p>
&lt;p>在数据结构与算法中，我们也有堆和栈的概念，但那里指的不是内存，而是两种数据结构。&lt;/p>
&lt;p>你可能会想，我们为什么要费尽心力的提出堆和栈这两个概念呢？之所以需要区分两种内存用法，根源在于：&lt;strong>内存是有限的&lt;/strong>。&lt;/p>
&lt;p>如果计算机内存是无限的，那么我们根本就不用这么麻烦的给内存划分两个区域，在其中的一个区域中这样使用内存，另一区域那样使用内存，这些都是不需要的。即使在今天 PC 内存普遍都在 8G、16G，这依然是不够的，因此我们需要合理的来安排内存的使用，堆和栈就是为达到这一目的而采用的技术。&lt;/p>
&lt;p>你会发现栈其实是一种非常巧妙的内存使用方法。函数调用完成后，函数运行过程中占用的内存就会被释放掉，这样，只要程序员代码写的合理 (栈帧不至于过大)，那我们程序就可以一直运行下去，而不会出现内存不足的现象。程序员在栈区不需要担心内存分配释放问题，因为这一切都是自动进行的。而如果程序员想自己控制内存，那么可以选择在堆上进行内存分配。因此这里提供了两种选择，一种是 “自动的”，一种是 “手动的”，目的都是在合理使用内存的同时提供给程序员最大的灵活性。&lt;/p>
&lt;p>堆和栈是计算机科学中很优秀的设计思想，这种设计思想充分的体现了计算机如何&lt;strong>合理且灵活&lt;/strong>的使用有限资源。&lt;/p>
&lt;p>堆区和栈区对 C/C++ 程序员来说就是实实在在的内存，而对于 Java、Python 等语言的程序员来说又该如何理解内存呢?&lt;/p>
&lt;h1 id="rust-中的-stack-与-heap">Rust 中的 Stack 与 Heap&lt;a class="td-heading-self-link" href="#rust-%e4%b8%ad%e7%9a%84-stack-%e4%b8%8e-heap" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://doc.rust-lang.org/book/ch04-01-what-is-ownership.html#the-stack-and-the-heap">英文&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kaisery.github.io/trpl-zh-cn/ch04-01-what-is-ownership.html#%E6%A0%88stack%E4%B8%8E%E5%A0%86heap">非官方中文&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>在很多语言中，你并不需要经常考虑到栈与堆。不过在像 Rust 这样的系统编程语言中，值是位于栈上还是堆上在更大程度上影响了语言的行为以及为何必须做出这样的抉择。我们会在本章的稍后部分描述所有权与栈和堆相关的内容，所以这里只是一个用来预热的简要解释。&lt;/p>
&lt;p>栈和堆都是代码在运行时可供使用的内存，但是它们的结构不同。栈以放入值的顺序存储值并以相反顺序取出值。这也被称作 &lt;strong>后进先出&lt;/strong>（&lt;em>last in, first out&lt;/em>）。想象一下一叠盘子：当增加更多盘子时，把它们放在盘子堆的顶部，当需要盘子时，也从顶部拿走。不能从中间也不能从底部增加或拿走盘子！增加数据叫做 &lt;strong>进栈&lt;/strong>（&lt;em>pushing onto the stack&lt;/em>），而移出数据叫做 &lt;strong>出栈&lt;/strong>（&lt;em>popping off the stack&lt;/em>）。&lt;/p>
&lt;p>栈中的所有数据都必须占用已知且固定的大小。在编译时大小未知或大小可能变化的数据，要改为存储在堆上。堆是缺乏组织的：当向堆放入数据时，你要请求一定大小的空间。操作系统在堆的某处找到一块足够大的空位，把它标记为已使用，并返回一个表示该位置地址的 &lt;strong>指针&lt;/strong>（&lt;em>pointer&lt;/em>）。这个过程称作 &lt;strong>在堆上分配内存&lt;/strong>（&lt;em>allocating on the heap&lt;/em>），有时简称为 “分配”（allocating）。将数据推入栈中并不被认为是分配。因为指针的大小是已知并且固定的，你可以将指针存储在栈上，不过当需要实际数据时，必须访问指针。&lt;/p>
&lt;p>想象一下去餐馆就座吃饭。当进入时，你说明有几个人，餐馆员工会找到一个够大的空桌子并领你们过去。如果有人来迟了，他们也可以通过询问来找到你们坐在哪。&lt;/p>
&lt;p>入栈比在堆上分配内存要快，因为（入栈时）操作系统无需为存储新数据去搜索内存空间；其位置总是在栈顶。相比之下，在堆上分配内存则需要更多的工作，这是因为操作系统必须首先找到一块足够存放数据的内存空间，并接着做一些记录为下一次分配做准备。&lt;/p>
&lt;p>访问堆上的数据比访问栈上的数据慢，因为必须通过指针来访问。现代处理器在内存中跳转越少就越快（缓存）。继续类比，假设有一个服务员在餐厅里处理多个桌子的点菜。在一个桌子报完所有菜后再移动到下一个桌子是最有效率的。从桌子 A 听一个菜，接着桌子 B 听一个菜，然后再桌子 A，然后再桌子 B 这样的流程会更加缓慢。出于同样原因，处理器在处理的数据彼此较近的时候（比如在栈上）比较远的时候（比如可能在堆上）能更好的工作。在堆上分配大量的空间也可能消耗时间。&lt;/p>
&lt;p>当你的代码调用一个函数时，传递给函数的值（包括可能指向堆上数据的指针）和函数的局部变量被压入栈中。当函数结束时，这些值被移出栈。&lt;/p>
&lt;p>跟踪哪部分代码正在使用堆上的哪些数据，最大限度的减少堆上的重复数据的数量，以及清理堆上不再使用的数据确保不会耗尽空间，这些问题正是所有权系统要处理的。一旦理解了所有权，你就不需要经常考虑栈和堆了，不过明白了所有权的存在就是为了管理堆数据，能够帮助解释为什么所有权要以这种方式工作。&lt;/p>
&lt;h1 id="知乎文章">知乎文章&lt;a class="td-heading-self-link" href="#%e7%9f%a5%e4%b9%8e%e6%96%87%e7%ab%a0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>原文连接: &lt;a href="https://zhuanlan.zhihu.com/p/58191270">https://zhuanlan.zhihu.com/p/58191270&lt;/a> - 已失效&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/wq21nf/1619016134392-d4c13ea1-0563-445a-a1fa-b8215a1c3839.png" alt="">&lt;/p>
&lt;p>1、栈区（stack）&lt;/p>
&lt;p>由编译器自动分配释放 ，存放函数的参数值，局部变量的值等，&lt;strong>内存的分配是连续的&lt;/strong>，类似于平时我们所说的栈，如果还不清楚，那么就把它想成数组，它的内存分配是连续分配的，即，所分配的内存是在一块连续的内存区域内．当我们声明变量时，那么编译器会自动接着当前栈区的结尾来分配内存．&lt;/p>
&lt;p>2、堆区（heap）&lt;/p>
&lt;p>一般由程序员分配释放， 若程序员不释放，程序结束时可能由操作系统回收．类似于链表，在&lt;strong>内存中的分布不是连续的&lt;/strong>，它们是不同区域的内存块通过指针链接起来的．一旦某一节点从链中断开，我们要人为的把所断开的节点从内存中释放．&lt;/p>
&lt;p>3、全局区（静态区）（static）&lt;/p>
&lt;p>全局变量和静态变量的存储是放在一块的，初始化的全局变量和静态变量在一块区域， 未初始化的全局变量和未初始化的静态变量在相邻的另一块区域。 程序结束后由系统释放&lt;/p>
&lt;p>4、文字常量区&lt;/p>
&lt;p>常量字符串就是放在这里的。 程序结束后由系统释放&lt;/p>
&lt;p>5、程序代码区&lt;/p>
&lt;p>存放函数体的二进制代码。&lt;/p>
&lt;p>二.堆和栈的区别&lt;/p>
&lt;p>1.申请方式不同栈：有系统自动分配。例如：在函数中定义一个局部变量 int a = 0; 系统会在栈上自动开辟相应大小&lt;/p>
&lt;p>注意：系统首先会去查看栈上是否有足够的区域去开辟该空间，如果有就直接开辟，如果没有则栈溢出&lt;/p>
&lt;p>堆：由程序员自己去申请开辟，并且指明大小。(利用 new/malloc)&lt;/p>
&lt;p>2.申请大小的限制&lt;/p>
&lt;p>栈：在 Windows 下,栈是向低地址扩展的数据结构，是一块连续的内存的区域。这句话的意思是栈顶的地址和栈的最大容量是系统预先规定好的，在 WINDOWS 下，栈的大小是 2M（也有的说是 1M，总之是一个编译时就确定的常数），如果申请的空间超过栈的剩余空间时，将提示 overflow。因此，能从栈获得的空间较小。&lt;/p>
&lt;p>堆：堆是向高地址扩展的数据结构，是不连续的内存区域。这是由于系统是用链表来存储的空闲内存地址的，自然是不连续的，而链表的遍历方向是由低地址向高地址。堆的大小受限于计算机系统中有效的虚拟内存。由此可见，堆获得的空间比较灵活，也比较大。&lt;/p>
&lt;p>3.申请效率的比较：&lt;/p>
&lt;p>栈：由系统自动分配，速度较快。但程序员是无法控制的。&lt;/p>
&lt;p>堆：是由 new/malloc 分配的内存，一般速度比较慢，而且容易产生内存碎片,不过用起来最方便.（new/malloc 后一定要显示的调用 free/delete 去释放内存）
另外，在 WINDOWS 下，最好的方式是用 VirtualAlloc 分配内存，他不是在堆，也不是在栈是直接在进程的地址空间中保留一快内存，虽然用起来最不方便。但是速度快，也最灵活。&lt;/p>
&lt;p>4.堆和栈中的存储内容&lt;/p>
&lt;p>栈： 在函数调用时，第一个进栈的是主函数中后的下一条指令（函数调用语句的下一条可执行语句）的地址，然后是函数的各个参数，在大多数的 C 编译器中，参数是由右往左入栈的，然后是函数中的局部变量。注意静态变量是不入栈的。&lt;/p>
&lt;p>当本次函数调用结束后，局部变量先出栈，然后是参数，最后栈顶指针指向最开始存的地址，也就是主函数中的下一条指令，程序由该点继续运行。
堆：一般是在堆的头部用一个字节存放堆的大小。堆中的具体内容有程序员安排。&lt;/p>
&lt;p>5.底层不同&lt;/p>
&lt;p>栈：是连续的空间&lt;/p>
&lt;p>堆：不是连续的空间&lt;/p>
&lt;p>请注意：在栈上所申请的内存空间，当我们出了变量所在的作用域后，系统会自动我们回收这些空间，而在堆上申请的空间，当出了相应的作用域以后，我们需要显式 的调用 delete 来释放所申请的内存空间，如果我们不及时得对这些空间进行释放，那么内存中的内存碎片就越来越多，从而我们的实际内存空间也就会变的越 来越少，即，孤立的内存块越来越多．在这里，我们知道，堆中的内存区域不是连续的，还是将有效的内存区域经过链表指针连接起来的，如果我们申请到了某一块 内存，那么这一块内存区将会从连续的（通过链表连接起来的）内存块上断开，如果我们在使用完后，不及时的对它进行释放，那么它就会孤立的开来，由于没有任 何指针指向它，所以这个区域将成为内存碎片，所以在使用完动态分配的内存（通过 NEW 申请）后，一定要显式的对它进行 DELETE 删除．对于这一点，一定 要切记．．．&lt;/p></description></item><item><title>Docs: 分享Linux内存占用几个案例</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Memory/%E5%88%86%E4%BA%ABLinux%E5%86%85%E5%AD%98%E5%8D%A0%E7%94%A8%E5%87%A0%E4%B8%AA%E6%A1%88%E4%BE%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Memory/%E5%88%86%E4%BA%ABLinux%E5%86%85%E5%AD%98%E5%8D%A0%E7%94%A8%E5%87%A0%E4%B8%AA%E6%A1%88%E4%BE%8B/</guid><description>
&lt;h2 id="案例一">&lt;strong>案例一&lt;/strong>&lt;a class="td-heading-self-link" href="#%e6%a1%88%e4%be%8b%e4%b8%80" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="问题">&lt;strong>问题&lt;/strong>&lt;a class="td-heading-self-link" href="#%e9%97%ae%e9%a2%98" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>最近一台 &lt;code>CentOS&lt;/code> 服务器，发现内存无端&lt;code>损失&lt;/code>了许多，&lt;code>free&lt;/code> 和 &lt;code>ps&lt;/code> 统计的结果&lt;code>相差十几个 G&lt;/code>，非常奇怪，后来 Google 了许久才搞明白。&lt;/p>
&lt;h3 id="分析">&lt;strong>分析&lt;/strong>&lt;a class="td-heading-self-link" href="#%e5%88%86%e6%9e%90" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>1、linux 系统内存消耗主要有三个地方：&lt;/p>
&lt;ul>
&lt;li>进程&lt;/li>
&lt;li>slab&lt;/li>
&lt;li>pagecacge&lt;/li>
&lt;/ul>
&lt;p>用 &lt;code>free&lt;/code> 命令查看到的是系统整体的内容使用情况，而使用 &lt;code>ps&lt;/code> 和 &lt;code>top&lt;/code> 看到的内存使用情况都是以进程维度来看的，因此看不到 &lt;code>slabcache&lt;/code> &lt;code>和 pagecache&lt;/code> 的内存占用信息。&lt;/p>
&lt;p>2、判断应用程序是否有内存泄露问题，只根据进程的内存使用或机器的内存变化来判定都不太准确，如果单凭进程的内存变化可能会疏忽一些小对象的内存泄露问题。&lt;/p>
&lt;p>同时对于机器的内存的使用也要做是否合理的判断。对于不同语言的应用都有相应的神器可以辅助定位内存泄露问题，同时结合 linux 内存的监控工具进行分析， 除了 &lt;code>top&lt;/code>，&lt;code>free&lt;/code>还有 &lt;code>pmap&lt;/code>，&lt;code>/proc/meminfo&lt;/code> 和 &lt;code>/slabinfo&lt;/code>，&lt;code>slaptop&lt;/code>等。&lt;/p>
&lt;p>3、通过这个问题，有一点比较重要的是，在使用监控工具进行监控和分析时，对其值的具体含义还是要了解的很清楚，否则会造成误判，使问题变得更加复杂。&lt;/p>
&lt;p>4、此外 &lt;code>page cache&lt;/code>，&lt;code>dentries&lt;/code>和&lt;code>inodes cache&lt;/code>，系统是会自动回收的。&lt;/p>
&lt;p>可以通过以下几种方式加速其回收，不过实际并不需要这么做。&lt;/p>
&lt;p>手工清除内存 缓存&lt;/p>
&lt;ul>
&lt;li>&lt;code>echo 1 &amp;gt; /proc/sys/vm/drop_caches&lt;/code> 清除 page cache&lt;/li>
&lt;li>&lt;code>echo 2 &amp;gt; /proc/sys/vm/drop_caches&lt;/code> 清除 denries 和 inodes&lt;/li>
&lt;li>&lt;code>echo 3 &amp;gt; /proc/sys/vm/drop_caches&lt;/code> 清除 page cache ，dentries 及 inodes&lt;/li>
&lt;li>调整 &lt;code>vm.vfs_cache_pressure&lt;/code> 值大小，默认是 100。值越大，dentries 和 inodes cache 的回收速度会越快&lt;/li>
&lt;li>调整 &lt;code>vm.min_free_kbytes&lt;/code> 值大小，该值为系统开始内存回收的阀值，越大表示系统会越早开始回收 (一般情况下此值不建议调整)。&lt;/li>
&lt;/ul>
&lt;h3 id="问题描述和初步调查">&lt;strong>问题描述和初步调查&lt;/strong>&lt;a class="td-heading-self-link" href="#%e9%97%ae%e9%a2%98%e6%8f%8f%e8%bf%b0%e5%92%8c%e5%88%9d%e6%ad%a5%e8%b0%83%e6%9f%a5" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>free -g&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/memory/1616587355624-c46f3d6a-fe6b-4afe-9443-96bb1f27f340.png" alt="">&lt;/p>
&lt;p>这台服务器有 &lt;code>16G 内存&lt;/code>，但是结果显示除了 2G 左右的文件 Buffer 缓存外，其余十几 G 都被确确实实的用光了。(free 按 1024 进制计算，总内存可能比实际偏小)&lt;/p>
&lt;p>这里大概介绍下 &lt;code>free&lt;/code> 结果的含义:&lt;/p>
&lt;p>然后 &lt;code>top&lt;/code> 看了下，没有特别吃内存的程序。用 &lt;code>ps&lt;/code> 大概统计下所有程序占用的总内存:&lt;/p>
&lt;pre>&lt;code>$ echo \`ps aux |awk '{mem += $6} END {print mem/1024/1024}'\` GB
0.595089
&lt;/code>&lt;/pre>
&lt;p>结果显示所有进程占用的内存还不到 &lt;code>1G&lt;/code>，实际上，因为&lt;code>free&lt;/code>, &lt;code>ps&lt;/code>的统计方式的差别和 &lt;code>Copy-on-write&lt;/code> 和 &lt;code>Shared libraries&lt;/code>等内存优化机制的存在，这两者的统计结果通常是不一样的。但是一般情况下绝对不会相差十几个 G，肯定是有什么隐藏的问题，Google 了许久后发现，free 没有专门统计另一项缓存: &lt;code>Slab&lt;/code>。&lt;/p>
&lt;h3 id="slab-简介和进一步调查">&lt;strong>Slab 简介和进一步调查&lt;/strong>&lt;a class="td-heading-self-link" href="#slab-%e7%ae%80%e4%bb%8b%e5%92%8c%e8%bf%9b%e4%b8%80%e6%ad%a5%e8%b0%83%e6%9f%a5" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>&lt;code>Slab Allocation&lt;/code> 是 Kernel 2.2 之后引入的一个内存管理机制，专门用于缓存内核的数据对象，可以理解为一个内核专用的对象池，可以提高系统性能并减少内存碎片。(Kernel 2.6.23 之后，SLUB 成为了默认的 allocator)&lt;/p>
&lt;h4 id="查看-slab-缓存">&lt;strong>查看 Slab 缓存&lt;/strong>&lt;a class="td-heading-self-link" href="#%e6%9f%a5%e7%9c%8b-slab-%e7%bc%93%e5%ad%98" aria-label="Heading self-link">&lt;/a>&lt;/h4>
&lt;pre>&lt;code>$ cat /proc/meminfo
# 其中，Slab相关的数据为
Slab: 154212 kB
SReclaimable: 87980 kB
SUnreclaim: 66232 kB
&lt;/code>&lt;/pre>
&lt;p>SReclaimable(Linux 2.6.19+) 都是 clean 的缓存，随时可以释放。回到之前的内存问题，&lt;/p>
&lt;h4 id="查看服务器上-slab-占用的内存">&lt;strong>查看服务器上 Slab 占用的内存：&lt;/strong>&lt;a class="td-heading-self-link" href="#%e6%9f%a5%e7%9c%8b%e6%9c%8d%e5%8a%a1%e5%99%a8%e4%b8%8a-slab-%e5%8d%a0%e7%94%a8%e7%9a%84%e5%86%85%e5%ad%98" aria-label="Heading self-link">&lt;/a>&lt;/h4>
&lt;p>方法 1：&lt;/p>
&lt;pre>&lt;code>$ cat /proc/meminfo|grep Slab
Slab: 12777668 kB
&lt;/code>&lt;/pre>
&lt;p>方法 2：&lt;/p>
&lt;pre>&lt;code>echo \`cat /proc/meminfo|grep Slab|awk '{mem += $2} END {print mem/1024/1024}'\` GB
12G
&lt;/code>&lt;/pre>
&lt;p>&lt;code>12G&lt;/code>的 Slab 缓存，有意思的是 free 把 Slab 缓存统计到了 &lt;code>usedmemory&lt;/code> 中，这就是之前那个问题的症结所在了。另外，还可以查看 &lt;code>/proc/slabinfo&lt;/code> (或使用 &lt;code>slabtop&lt;/code> 命令) 来查看 Slab 缓存的具体使用情况。&lt;/p>
&lt;p>结果发现，&lt;code>ext3_inode_cache&lt;/code> 和 &lt;code>dentry_cache&lt;/code> 占用了绝大部分内存。考虑到这台服务器会频繁地用 &lt;code>rsync&lt;/code> 同步大量的文件，这个结果也并不意外。&lt;/p>
&lt;h3 id="解决问题">&lt;strong>解决问题&lt;/strong>&lt;a class="td-heading-self-link" href="#%e8%a7%a3%e5%86%b3%e9%97%ae%e9%a2%98" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>先说明一下，如果问题仅仅是 Slab 占用了太多的内存 (SReclaimable)，那么通常不需要太操心，因为这根本不是个问题 (如果是 SUnreclaim 太多且不断增长，那么很有可能是内核有 bug)。但是，如果是因为 Slab 占用内存太多而引起了其他的问题，建议继续往下阅读。&lt;/p>
&lt;h4 id="清除-slab-可回收缓存">&lt;strong>清除 Slab 可回收缓存&lt;/strong>&lt;a class="td-heading-self-link" href="#%e6%b8%85%e9%99%a4-slab-%e5%8f%af%e5%9b%9e%e6%94%b6%e7%bc%93%e5%ad%98" aria-label="Heading self-link">&lt;/a>&lt;/h4>
&lt;p>通过 &lt;code>/proc/sys/vm/drop_caches&lt;/code> 这个配置项，可以手动清除指定的可回收缓存 (SReclaimable)&lt;/p>
&lt;p>&lt;code>echo 2 &amp;gt; /proc/sys/vm/drop_caches&lt;/code> 或者 &lt;code>sysctl vm.drop_caches=2&lt;/code>&lt;/p>
&lt;p>上面的命令会主动释放 &lt;code>Slab&lt;/code> 中 &lt;code>clean 的缓存&lt;/code>(包括 inode 和 dentry 的缓存)，然后再 &lt;code>free -g&lt;/code> 一下，空闲的内存陡增了十几个 G&lt;/p>
&lt;p>&lt;code>注意的是&lt;/code>，手动清除缓存可能会在一段时间内降低系统性能。原则上不推荐这么做，因为如果有需要，系统会自动释放出内存供其他程序使用。另外，手动清除 Slab 缓存是一个治标不治本的办法。因为问题不在 Slab，实际操作的时候发现，清除缓存一段时间后，&lt;code>Slab 缓存&lt;/code>很快又会反弹回去。&lt;/p>
&lt;p>如果需要治本，要么搞定问题进程，要么修改系统配置，要么增加物理内存。&lt;/p>
&lt;h3 id="调整系统-vm-配置">&lt;strong>调整系统 vm 配置&lt;/strong>&lt;a class="td-heading-self-link" href="#%e8%b0%83%e6%95%b4%e7%b3%bb%e7%bb%9f-vm-%e9%85%8d%e7%bd%ae" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;code>风险预警&lt;/code>: 调整以下系统配置可能会对系统性能造成负面影响，请仔细测试并谨慎操作。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>/etc/sysctl.conf&lt;/code> 里有以下几个对内存管理影响比较大的内核参数配置：&lt;/p>
&lt;p>&lt;code>vm.vfs_cache_pressure&lt;/code>&lt;/p>
&lt;p>系统在进行内存回收时，会先回收 page cache, inode cache, dentry cache 和 swap cache。vfs_cache_pressure 越大，每次回收时，inode cache 和 dentry cache 所占比例越大。&lt;/p>
&lt;p>&lt;code>vfs_cache_pressure&lt;/code>&lt;/p>
&lt;p>默认是 100，该值越大 inode cache 和 dentry cache 的回收速度会越快，越小则回收越慢，为 0 的时候完全不回收，内存溢出 (OOM!)。&lt;/p>
&lt;p>&lt;code>vm.min_free_kbytes&lt;/code>&lt;/p>
&lt;p>系统的 &amp;ldquo;保留内存&amp;rdquo; 的大小，&amp;ldquo;保留内存&amp;rdquo; 用于低内存状态下的 &amp;ldquo;atomic memory allocation requests&amp;rdquo;(eg. kmalloc + GFP_ATOMIC)，该参数也被用于计算开始内存回收的阀值，默认在开机的时候根据当前的内存计算所得，越大则表示系统会越早开始内存回收。&lt;code>vm.min_free_kbytes 过大可能会导致 OOM&lt;/code>，太小可能会导致系统出现死锁等问题。查看默认设置：&lt;code>cat /proc/sys/vm/min_free_kbytes&lt;/code>&lt;/p>
&lt;p>&lt;code>vm.swappiness&lt;/code>&lt;/p>
&lt;p>该配置用于控制系统将内存 &lt;code>swap out&lt;/code> 到交换空间的积极性，取值范围是[0, 100]。&lt;code>vm.swappiness&lt;/code> 越大，系统的交换积极性越高，默认是 60， 如果为 0 则不会进行交换。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ vim /etc/sysctl.conf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>vm.swappiness &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>查看默认设置：&lt;code>cat /proc/sys/vm/swappiness&lt;/code>&lt;/p>
&lt;p>&lt;code>drop_caches&lt;/code>&lt;/p>
&lt;p>默认值为 0，将此值设置为 1，2 或 3，使内核删除页面缓存和 slab 缓存的各种组合。&lt;/p>
&lt;ul>
&lt;li>1 系统使所有的页面缓冲存储器失效并释放。&lt;/li>
&lt;li>2 系统释放所有未使用的 slab 缓存内存。&lt;/li>
&lt;li>3 系统释放所有的页面缓存和 slab 缓存内存。&lt;/li>
&lt;/ul>
&lt;p>查看默认设置：&lt;code>cat /proc/sys/vm/drop_caches&lt;/code>&lt;/p>
&lt;blockquote>
&lt;p>注：以上参数设置是非破坏性的操作，由于脏数据不能被释放，建议设置以上参数的值之前运行 sync 把内存数据写入硬盘。在生产环境中不建议使用 drop_caches 释放内存。&lt;/p>
&lt;/blockquote>
&lt;h2 id="案例二-物理内存的外碎片回收">&lt;strong>案例二 （物理内存的外碎片回收）&lt;/strong>&lt;a class="td-heading-self-link" href="#%e6%a1%88%e4%be%8b%e4%ba%8c-%e7%89%a9%e7%90%86%e5%86%85%e5%ad%98%e7%9a%84%e5%a4%96%e7%a2%8e%e7%89%87%e5%9b%9e%e6%94%b6" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="问题-1">&lt;strong>问题&lt;/strong>&lt;a class="td-heading-self-link" href="#%e9%97%ae%e9%a2%98-1" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>执行 &lt;code>docker ps&lt;/code> 命令挂住&lt;/p>
&lt;h3 id="问题分析">&lt;strong>问题分析&lt;/strong>&lt;a class="td-heading-self-link" href="#%e9%97%ae%e9%a2%98%e5%88%86%e6%9e%90" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>查找 &lt;code>/var/log/messages&lt;/code>，发现有错误信息：&lt;code>XFS: possible memory allocation deadlock in kmem_alloc (mode:0x250)&lt;/code>&lt;/p>
&lt;p>在 linux 中使用&lt;code>buddy 算法&lt;/code>解决&lt;code>物理内存&lt;/code>的&lt;code>碎片问题&lt;/code>，其把所有空闲的内存，以 2 的幂次方的形式，分成 11 个块链表，分别对应为 1、2、4、8、16、32、64、128、256、512、1024 个页块。&lt;/p>
&lt;p>Linux 支持&lt;code>NUMA 技术&lt;/code>，对于 NUMA 设备，NUMA 系统的结点通常是由一组 CPU 和本地内存组成，每一个节点都有相应的本地内存，因此 buddyinfo 中的 Node0 表示节点 ID；而每一个节点下的内存设备，又可以划分为多个内存区域 (zone)，因此下面的显示中，对于 Node0 的内存，又划分类&lt;code>DMA&lt;/code>、&lt;code>Normal&lt;/code>、&lt;code>HighMem&lt;/code>区域。而后面则是表示空闲的区域。&lt;/p>
&lt;p>此处以 &lt;code>Normal&lt;/code> 区域进行分析，第二列值为 100，表示当前系统中 normal 区域，可用的连续两页的内存大小为 100_2_PAGE_SIZE；第三列值为 52，&lt;/p>
&lt;p>表示当前系统中 normal 区域，可用的连续四页的内存大小为 &lt;code>52*2^2* PAGE_SIZE&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ cat /proc/buddyinfo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Node 0, zone DMA &lt;span style="color:#0000cf;font-weight:bold">23&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">15&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">5&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Node 0, zone Normal &lt;span style="color:#0000cf;font-weight:bold">149&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">100&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">52&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">33&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">23&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">5&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">32&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">8&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">12&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">59&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Node 0, zone HighMem &lt;span style="color:#0000cf;font-weight:bold">11&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">21&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">23&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">49&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">29&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">15&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">8&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">16&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">12&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">142&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到从第 5 列开始，只剩下 &lt;code>44*16*PAGE_SIZE&lt;/code> 的页块，后面剩下的分别是&lt;code>1 * 32 *PAGE_SIZE&lt;/code>, &lt;code>1 * 64 *PAGE_SIZE&lt;/code>, &lt;code>2 *128 * PAGE_SIZE&lt;/code>，剩下 256,512 的页块都没有了因此推测，导致这个问题出现的时候，该机器的内存碎片很多，当某个应用执行时，在 xfs 的申请内存中有这种连续的大块的内存申请的操作的请求。&lt;/p>
&lt;p>比如：&lt;code>6000: map = kmem_alloc(subnex *sizeof(*map), KM_MAYFAIL | KM_NOFS);&lt;/code> 就会导致内存一直分配不到。&lt;/p>
&lt;p>例如：执行 &lt;code>docker ps&lt;/code>，&lt;code>docker exec&lt;/code>这些命令时，会一直阻塞在 &lt;code>kmem_alloc&lt;/code> 的循环中，反复申请内存，由于内存碎片没有被组合，因此就一直申请不到，执行这些命令也会卡住，这也就验证了执行某些命令如&lt;code>ls&lt;/code>、&lt;code>ssh&lt;/code>都不会失败 (因为需要内存的 &lt;code>PAGE&lt;/code> 不是那么大)。&lt;/p>
&lt;h3 id="临时解决方法">&lt;strong>临时解决方法：&lt;/strong>&lt;a class="td-heading-self-link" href="#%e4%b8%b4%e6%97%b6%e8%a7%a3%e5%86%b3%e6%96%b9%e6%b3%95" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>&lt;code>echo 1 &amp;gt; /proc/sys/vm/drop_caches&lt;/code>&lt;/p>
&lt;p>上述命令操作会把碎片化的 &lt;code>PAGE&lt;/code> 重新分配，之后在申请大块的 PAGE 内存就可以申请到，不阻塞了。&lt;/p>
&lt;h3 id="永久解决方法">&lt;strong>永久解决方法：&lt;/strong>&lt;a class="td-heading-self-link" href="#%e6%b0%b8%e4%b9%85%e8%a7%a3%e5%86%b3%e6%96%b9%e6%b3%95" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>优化内核参数：&lt;/p>
&lt;pre>&lt;code>\# 保留1G空闲内存，达到该值，触发内存回收
$ cat \&amp;gt;&amp;gt; /etc/sysctl.conf &amp;lt;&amp;lt;EOF
vm.min\_free\_kbytes \= 1048576
EOF
#立即生效
$ sysctl \-p
&lt;/code>&lt;/pre>
&lt;h3 id="什么是-overcommit-or-oom-问题">&lt;strong>什么是 overcommit or oom 问题&lt;/strong>&lt;a class="td-heading-self-link" href="#%e4%bb%80%e4%b9%88%e6%98%af-overcommit-or-oom-%e9%97%ae%e9%a2%98" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>Linux 对大部分申请内存的请求都回复 &amp;ldquo;yes&amp;rdquo;，以便能跑更多更大的程序，因为申请内存后，并不会马上使用内存，这种技术叫做 &lt;code>Overcommit&lt;/code>。&lt;/p>
&lt;p>当 linux 发现内存不足时，会发生 OOM killer(OOM=out-of-memory)，它会选择杀死一些进程 (用户态进程，不是内核线程)，以便释放内存。&lt;/p>
&lt;p>当 oom-killer 发生时，linux 会选择杀死哪些进程？选择进程的函数是 oom_badness 函数 (在 mm/oom_kill.c 中)，该函数会计算每个进程的点数 (0~1000)，点数越高，这个进程越有可能被杀死。&lt;/p>
&lt;p>每个进程的点数跟 &lt;code>oom_score_adj&lt;/code> 有关，而且 &lt;code>oom_score_adj&lt;/code> 可以被设置 (-1000 最低，1000 最高)。&lt;/p>
&lt;h3 id="内核参数-overcommit_memory-它是内存分配策略">&lt;strong>内核参数 overcommit_memory, 它是内存分配策略&lt;/strong>&lt;a class="td-heading-self-link" href="#%e5%86%85%e6%a0%b8%e5%8f%82%e6%95%b0-overcommit_memory-%e5%ae%83%e6%98%af%e5%86%85%e5%ad%98%e5%88%86%e9%85%8d%e7%ad%96%e7%95%a5" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>&lt;code>可选值&lt;/code>：0、1、2。&lt;/p>
&lt;ul>
&lt;li>&lt;code>0&lt;/code>：表示内核将检查是否有足够的可用内存供应用进程使用；如果有足够的可用内存，内存申请允许；否则，内存申请失败，并把错误返回给应用进程。&lt;/li>
&lt;li>&lt;code>1&lt;/code>：表示内核允许分配所有的物理内存，而不管当前的内存状态如何。&lt;/li>
&lt;li>&lt;code>2&lt;/code>：表示内核允许分配超过所有物理内存和交换空间总和的内存。&lt;/li>
&lt;/ul>
&lt;h2 id="参考链接">&lt;strong>参考链接&lt;/strong>&lt;a class="td-heading-self-link" href="#%e5%8f%82%e8%80%83%e9%93%be%e6%8e%a5" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://www.mawenbao.com/research/linux-ate-my-memory.html">https://www.mawenbao.com/research/linux-ate-my-memory.html&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/performance_tuning_guide/s-memory-tunables">https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/performance_tuning_guide/s-memory-tunables&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://blog.51yip.com/nosql/1776.html">http://blog.51yip.com/nosql/1776.html&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://linuxperf.com/?p=102">http://linuxperf.com/?p=102&lt;/a>&lt;/li>
&lt;li>案例一原文出处：&lt;a href="http://blog.atime.me/research/linux-ate-my-memory.html">http://blog.atime.me/research/linux-ate-my-memory.html&lt;/a>&lt;/li>
&lt;li>案例二原文出处：&lt;a href="https://www.cnblogs.com/beilong/p/8192676.html">https://www.cnblogs.com/beilong/p/8192676.html&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>本文分享自微信公众号 - YP 小站（ypxiaozhan）&lt;/p>
&lt;p>原文出处及转载信息见文内详细说明，如有侵权，请联系 &lt;a href="mailto:yunjia_community@tencent.com">yunjia_community@tencent.com&lt;/a> 删除。&lt;/p>
&lt;p>原始发表时间：2020-09-21&lt;/p>
&lt;p>本文参与&lt;a href="https://cloud.tencent.com/developer/support-plan">腾讯云自媒体分享计划&lt;/a>，欢迎正在阅读的你也加入，一起分享。
&lt;a href="https://cloud.tencent.com/developer/article/1701200">https://cloud.tencent.com/developer/article/1701200&lt;/a>&lt;/p></description></item></channel></rss>