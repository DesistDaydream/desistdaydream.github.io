<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>TC 模块 on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Network/Linux-%E7%BD%91%E7%BB%9C%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/TC-%E6%A8%A1%E5%9D%97/</link><description>Recent content in TC 模块 on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Network/Linux-%E7%BD%91%E7%BB%9C%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/TC-%E6%A8%A1%E5%9D%97/index.xml" rel="self" type="application/rss+xml"/><item><title>TC 模块</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Network/Linux-%E7%BD%91%E7%BB%9C%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/TC-%E6%A8%A1%E5%9D%97/TC-%E6%A8%A1%E5%9D%97/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Network/Linux-%E7%BD%91%E7%BB%9C%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/TC-%E6%A8%A1%E5%9D%97/TC-%E6%A8%A1%E5%9D%97/</guid><description>概述 参考：
原文链接 Linux 的高级路由和流量控制 Open vSwitch 之 QoS 的实现 arthurchiao.art 的文章： [译] 《Linux 高级路由与流量控制手册（2012）》第九章：用 tc qdisc 管理 Linux 网络带宽 [译] 深入理解 tc ebpf 的 direct-action (da) 模式（2020） Linux 中的 TC 模块已经在内核中存在很多年了，但是直到 eBPF 流行起来之前，文档以及使用者都非常之少，并仍处于活跃开发状态中。Kernel 4.1 版本中添加了一些新的 Hook，并支持将 eBPF 程序作为 tc classifier(也称为 filter) 或 tc action 加载到这些 Hook 点。大概六个月后，Kernel 4.4 版本发布时，iproute2 引入了一个 direct-action 模式，但是关于这个模式的文档依然少得可怜。。。。。
Glossary(术语) TC 是一个强大但复杂的框架。 它的几个核心概念：
queueing discipline(排队规则，简称 qdisc) # 根据某种算法完成限速、整形等功能 class # 用户定义的流量类别 classifier(分类器，也称为 filter) # 分类规则 action # 要对包执行什么动作 组合以上概念，下面是对某个网络设备上的流量进行分类和限速时，所需完成的大致步骤：</description></item></channel></rss>