<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>NetworkManager on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Network/Linux-%E7%BD%91%E7%BB%9C%E6%A0%88%E7%AE%A1%E7%90%86/NetworkManager/</link><description>Recent content in NetworkManager on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Network/Linux-%E7%BD%91%E7%BB%9C%E6%A0%88%E7%AE%A1%E7%90%86/NetworkManager/index.xml" rel="self" type="application/rss+xml"/><item><title>NetworkManager</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Network/Linux-%E7%BD%91%E7%BB%9C%E6%A0%88%E7%AE%A1%E7%90%86/NetworkManager/NetworkManager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Network/Linux-%E7%BD%91%E7%BB%9C%E6%A0%88%E7%AE%A1%E7%90%86/NetworkManager/NetworkManager/</guid><description>概述 参考：
GitHub 项目，NetworkManager/NetworkManager GitLab 项目，freedesktop-NetworkManager/NetworkManager Manual(手册),NetworkManager.conf(5) 官网 NetworkManager daemon 是管理网络的守护进程。该守护进程尝试通过管理主网络连接和其他网络接口（如以太网，WiFi 和移动宽带设备），使网络配置和操作尽可能轻松自动。 除非禁用该行为，否则 NetworkManager 将在该设备的连接可用时连接任何网络设备。 有关网络的信息通过 D-Bus 接口导出到任何感兴趣的应用程序，提供丰富的 API，用于检查和控制网络设置和操作。
Connection 参考：
Manual(手册),nm-settings-nmcli(5) Manual(手册),nm-settings-dbus(5) Manual(手册),nm-settings-keyfile(5) Manual(手册),nm-settings-ifcfg-rh(5) NetworkManager 将所有网络配置抽象成 Connection(连接)，这些 Connection 的配置中包含网络配置(比如 IP 地址、网关等)。当 NetworkManager 激活网络设备上的 Connection 时，将为这个网络设备应用配置文件中的内容，并建立活动的网络连接。所以，可以创建多个 Connection 来关联到一个网络设备上；这样，它们就可以灵活地具有用于不同网络需求的各种网络配置。
用白话说就是：Connection 就是“网络配置”，网络设备(device)关联并使用“网络配置”来实现联网。而 NetworkManager 就是管理这些 Connection 的。Connection 可以表示一个概念，也可以表示一个配置文件。
Connection 插件 NetworkManager 通过 Plugins(插件) 的方式来管理 Connection 配置文件。在不同的 Linux 发行版中，所使用的插件各不相同，但是默认情况下，NetworkManager 使始终启用名为 keyfile 的插件，这是一个通用插件，当其他插件无法支持某些类型的 Connection 配置时，keyfile 插件将会自动提供支持。keyfile 插件会将 Connection 文件保存到 /etc/NetworkManager/system-connections/、/usr/lib/NetworkManager/system-connections/、/run/NetworkManager/system-connections/ 这三个目录中。
可以在 /etc/NetworkManager/NetworkManager.conf 文件中配置想要使用的插件，插件用于读写系统范围的连接配置文件。当指定多个插件时，将从所有列出的插件中读取 Connections。写入 Connections 时，会要求插件按照此处列出的顺序保存连接；如果第一个插件无法写出该连接类型（或无法写出任何连接），则尝试下一个插件。如果没有插件可以保存连接，则会向用户返回错误。</description></item><item><title>Connection 配置详解</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Network/Linux-%E7%BD%91%E7%BB%9C%E6%A0%88%E7%AE%A1%E7%90%86/NetworkManager/Connection-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Network/Linux-%E7%BD%91%E7%BB%9C%E6%A0%88%E7%AE%A1%E7%90%86/NetworkManager/Connection-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</guid><description>概述 参考：
Manual(手册),nm-settings-nmcli(5) # 这个 man 手册中，可以看到每个 Setting 中都有哪些 Property 以及这些 Property 的作用。 Manual(手册),nm-settings-dbus(5) # 这里有 Property 的默认值 Manual(手册),nm-settings-keyfile(5) Manual(手册),nm-settings-ifcfg-rh(5) 在 GNOME 开发者中心官网中，也可以查到 Manual Connection 配置文件默认由 keyfile 插件管理，是类似 INI 格式的。同时配置文件还会保存在 D-Bus 中。
在 D-Bus 中，NetworkManager 将 INI 中的 Sections(部分) 称为 Settings(设置)，Setting 多个是 Properties(属性) 的集合。所以，很多文档，都将 Connection 表示为一组特定的、封装好的、独立的 Settings(集合)。Connection 由一个或多个 Settings 组成。
# 我启动了一个 连接 ~]# nmcli con up bridge-slave-bond0 Connection successfully activated (master waiting for slaves) (D-Bus active path: /org/freedesktop/NetworkManager/ActiveConnection/16) # 从 D-Bus 的路径中可以看到这些信息 ~]# busctl get-property org.</description></item><item><title>NetworkManager 配置详解</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Network/Linux-%E7%BD%91%E7%BB%9C%E6%A0%88%E7%AE%A1%E7%90%86/NetworkManager/NetworkManager-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Network/Linux-%E7%BD%91%E7%BB%9C%E6%A0%88%E7%AE%A1%E7%90%86/NetworkManager/NetworkManager-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</guid><description>概述 参考：
Manual(手册),NetworkManager.conf(5) 在 GNOME 开发者中心官网中，也可以查到 Manual https://wiki.gnome.org/Projects/NetworkManager/DNS https://cloud.tencent.com/developer/article/1710514 NetworkManager 的配置文件是 INI 格式的，由 Sections(部分) 和 Key/Value Pairs(键/值对) 组成。
可用的 Sections 有如下几种：
main # keyfile # 用于配置 keyfile 插件。通常只在不使用任何特定 Linux 发行版的插件时才进行配置。 ifupdown # logging # 控制 NetworkManager 的日志记录。此处的任何设置都被 &amp;ndash;log-level 和 &amp;ndash;log-domains 命令行选项覆盖。 connection # device # connectivity # global-dns # global-dns-domain # .config # main 部分 dns=&amp;lt;MODE&amp;gt; # 设置 DNS 处理模式。 可用的模式有如下几种：
default # dnsmasq # systemd-resolved # unbound # none # NetworkManager 程序不会修改 resovl.</description></item><item><title>nmcli connection 子命令</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Network/Linux-%E7%BD%91%E7%BB%9C%E6%A0%88%E7%AE%A1%E7%90%86/NetworkManager/nmcli-connection-%E5%AD%90%E5%91%BD%E4%BB%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Network/Linux-%E7%BD%91%E7%BB%9C%E6%A0%88%E7%AE%A1%E7%90%86/NetworkManager/nmcli-connection-%E5%AD%90%E5%91%BD%E4%BB%A4/</guid><description>概述 参考：
Manual(手册)，nmcli(1) - Connection Management Commands 红帽官方文档，RedHat7 - 网络指南 - 使用 nmcli 创建带有 VLAN 的 bond 并作为 Bridge 的从设备 nmcli connection {show | up | down | modify | add | edit | clone | delete | monitor | reload | load | import | export} [ARGUMENTS&amp;hellip;]
up | down # 启动 | 停止连接 nmcli connection up [[id | uuid | path] &amp;lt;ID&amp;gt;] [ifname &amp;lt;ifname&amp;gt;] [ap &amp;lt;BSSID&amp;gt;] [passwd-file &amp;lt;file with passwords&amp;gt;] # 启动连接</description></item><item><title>nmcli 命令行工具</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Network/Linux-%E7%BD%91%E7%BB%9C%E6%A0%88%E7%AE%A1%E7%90%86/NetworkManager/nmcli-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Network/Linux-%E7%BD%91%E7%BB%9C%E6%A0%88%E7%AE%A1%E7%90%86/NetworkManager/nmcli-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</guid><description>概述 参考：
RedHat7官方文档，网络指南-使用 nmcli 配置 IP 网络 Manual(手册)，nmcli(1) nmcli 用于 NetworkManager 的命令行工具
Syntax(语法) nmcli [OPTIONS] OBJECT { COMMAND | help }
OBJECT 和 COMMAND 可以用全称也可以用简称，最少可以只用一个字母
OPTIONS
-a, &amp;ndash;ask ask for missing parameters -c, &amp;ndash;colors auto|yes|no whether to use colors in output -e, &amp;ndash;escape yes|no escape columns separators in values -f, &amp;ndash;fields &amp;lt;FIELD,&amp;hellip;&amp;gt;|all|common # 指定要输出的字段，FIELD 可以是 任意 setting -g, &amp;ndash;get-values &amp;lt;field,&amp;hellip;&amp;gt;|all|common shortcut for -m tabular -t -f -h, &amp;ndash;help print this help -m, &amp;ndash;mode &amp;lt;tabular|multiline&amp;gt; # 指定输出模式,tabular 输出为表格样式，multiline 是多行样式。 nmcli con show # 默认为表格样式 nmcli con show DEV # 默认为多行样式 -o, &amp;ndash;overview overview mode -p, &amp;ndash;pretty # 美化输出，以连接中的 setting 分段落展示 -s, &amp;ndash;show-secrets allow displaying passwords -t, &amp;ndash;terse # 简洁的输出 -v, &amp;ndash;version show program version -w, &amp;ndash;wait &amp;lt;seconds&amp;gt; set timeout waiting for finishing operations OBJECT</description></item></channel></rss>