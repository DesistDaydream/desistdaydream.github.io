<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kernel 参数 on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Linux-Kernel/Kernel-%E5%8F%82%E6%95%B0/</link><description>Recent content in Kernel 参数 on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Linux-Kernel/Kernel-%E5%8F%82%E6%95%B0/index.xml" rel="self" type="application/rss+xml"/><item><title>Kernel 参数</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Linux-Kernel/Kernel-%E5%8F%82%E6%95%B0/Kernel-%E5%8F%82%E6%95%B0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Linux-Kernel/Kernel-%E5%8F%82%E6%95%B0/Kernel-%E5%8F%82%E6%95%B0/</guid><description>概述 参考：
官方文档，Linux 内核用户和管理员指南-/proc/sys 文档 内核参数是以 key/value 的方式储存在 sysfs 文件系统中。key 就是 . /proc/sys/ 目录下的某个文件，value 就是该文件的内容。
比如 net.ipv4.ip_forward 这个 key，就在 /proc/sys/net/ipv4/ 目录下。以.分隔的就是字符就是目录名，最后一个字段就是某某目录下的文件名。
可以通过修改 /proc/sys/ 目录下的文件中的值来修改内核的参数。每个文件就是内核的一种功能，文件中的内容就是该内核功能的参数。
注意事项：
一般情况下，内核参数的 0 和 1 这两个值表示如下含义： 0 表示 否，即错误、拒绝、关闭等等 1 表示 是，即正确、允许、开启等等 sysctl 工具用来配置与显示在 /proc/sys 目录中的内核参数．如果想使参数长期保存，可以通过编辑 /etc/sysctl.conf 文件来实现。 修改 /proc 下内核参数文件内容，不能使用编辑器来修改内核参数文件，理由是由于内核随时可能更改这些文件中的任意一个，另外，这些内核参数文件都是虚拟文件，实际中不存在，因此不能使用编辑器进行编辑，而是使用 echo 命令，然后从命令行将输出重定向至 /proc 下所选定的文件中。参数修改后立即生效，但是重启系统后，该参数又恢复成默认值。因此，想永久更改内核参数，需要修改 /etc/sysctl.conf 文件。 echo 1 &amp;gt; /proc/sys/net/ipv4/ip_forward sysctl -w net.ipv4.ip_forward=1 永久的方法： echo &amp;quot;net.ipv4.ip_forward=1&amp;quot; &amp;gt;&amp;gt; /etc/sysctl.conf 如果想使参数马上生效，也可以执行如下命令 sysctl -p /proc/sys 目录的组成 /proc/sys/ 目录下的每一个子目录，都表示一种内核参数的分类，大体可以分为如下几类：</description></item><item><title>fs(文件系统相关参数)</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Linux-Kernel/Kernel-%E5%8F%82%E6%95%B0/fs%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3%E5%8F%82%E6%95%B0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Linux-Kernel/Kernel-%E5%8F%82%E6%95%B0/fs%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3%E5%8F%82%E6%95%B0/</guid><description>概述 参考：
Linux Kernel 文档，管理员指南 - /proc/sys 文档 - /proc/sys/fs 文档 file-max 与 file-nr fs.file-max = 52706963 max-file 表示系统级别的能够打开的文件描述符的数量。是对整个系统的限制，并不是针对用户的。
ulimit -n 控制进程级别能够打开的文件句柄的数量。提供对 shell 及其启动的进程的可用文件句柄的控制。这是进程级别的。
当系统尝试分配比 file-max 指定的值更多的文件描述符时，通常我们会看到如下报错：VFS: file-max limit &amp;lt;number&amp;gt; reached
fs.file-nr = INT file-nr 中的三个值分别表示：
已分配的文件描述符 已分配但未使用的文件描述符 最大文件描述符 [desistdaydream@hw-cloud-xngy-jump-server-linux-2 ~]$ cat /proc/sys/fs/file-max 9223372036854775807 [desistdaydream@hw-cloud-xngy-jump-server-linux-2 ~]$ cat /proc/sys/fs/file-nr 2400 0 9223372036854775807 通常情况下 已分配但未使用的文件描述符 的值总是为 0，这并不是错误的，只是意味着 已分配的文件描述符=正在使用的文件描述符
由于某些历史原因，内核虽然可以动态分配文件描述符，但是却无法再次释放它们~~~
其他 fs.may_detach_mounts = 1 未知
fs.nr_open = INT64 单个进程可分配的最大文件描述符数量。默认值：1024 * 1024，即 1048576。</description></item><item><title>vm(内存相关参数)</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Linux-Kernel/Kernel-%E5%8F%82%E6%95%B0/vm%E5%86%85%E5%AD%98%E7%9B%B8%E5%85%B3%E5%8F%82%E6%95%B0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Linux-Kernel/Kernel-%E5%8F%82%E6%95%B0/vm%E5%86%85%E5%AD%98%E7%9B%B8%E5%85%B3%E5%8F%82%E6%95%B0/</guid><description>概述 参考：
Linux Kernel 文档，管理员指南 - /proc/sys 文档 - /proc/sys/vm 文档 /proc/sys/vm/ 目录下的文件可用于调整 Linux Kernel 中有关 Virtual Memory(虚拟内存) 子系统的操作。
vm.drop_caches = NUM 写入该文件可以清理内存中的缓存。详见 Memory 的缓存 章节中“缓存清理”部分
vm.swappiness = 10 这个内核参数可以用来调整系统使用 swap 的时机。默认值：60
设为 60 即表示：当内存中空闲空间低于 60%的时候，就会开始使用 swap 空间(也就是说系统使用了 40%的内存之后，就开始使用 swap)
vm.max_map_count = 262144 一个进程可以拥有的 VMA(虚拟内存区域) 的数量。默认值：65530
常用于运行 Elasticsearch 服务的设备上。
vm.overcommit_memory = 1 配置是否允许[内存 overcommit](Memroy%20 的%20Over%20Commit%20 与%20OOM.md 管理/Memroy 的 Over Commit 与 OOM.md)，有 0、1、2 三种模式。默认值：0
0 # heuristic overcommit(试探式允许 overcommit)。 当应用进程尝试申请内存时，内核会做一个检测。内核将检查是否有足够的可用内存可以分配。如果有足够的可用内存，内存申请允许；否则，内存申请失败。 1 # always overcommit,never check(总是允许 overcommit) 对于内存的申请请求，内核不会做任何检测，并直接分配内存。 2 # never overcommit,always check(永不允许 overcommit) 说是永不允许 overcommit，其实只是通过其他参数来控制 overcommit(过量使用) 的大小。可以分配的总内存将会受到 /proc/meminfo 中的 CommitLimit 这个参数限制。 CommitLimit = (total_RAM - total_huge_TLB) * overcommit_ratio / 100 + total_swap totaol_RAM # 系统内存总量(就是物理内存) total_huge_TLB # 为 huge pages 保留的内存量，一般没有保留，都是 0 overcommit_ratio # /proc/sys/vm/overcommit_ratio 内核参数的值。 total_swap # swap 空间的总量 比如我现在有一个 16G 内存的服务器，swap 空间为 16，overcommit_ratio 参数设为 50，那么 CommitLimit 的计算结果为 24G。 此时，如果 /proc/meminfo 中的 Commited_AS 参数 值为 23G，当一个程序申请超过 1G 内存时，则会失败。 所以从根本上讲，模式 2 下，可以分配的内存总量，受 overcommit_ration 这个内核参数控制。所谓的永远不会 overcommit，则是指 overcommit_ration 参数的值小于 100。 注意：从 Linux 内核 3.</description></item><item><title>应用实例</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Linux-Kernel/Kernel-%E5%8F%82%E6%95%B0/%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Linux-Kernel/Kernel-%E5%8F%82%E6%95%B0/%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/</guid><description>TCP 相关参数: net.core.somaxconn = 65535 net.ipv4.tcp_fin_timeout = 5 net.ipv4.tcp_max_syn_backlog = 65536 net.ipv4.tcp_max_tw_buckets = 5000 net.ipv4.tcp_synack_retries = 2 net.ipv4.tcp_syncookies = 1 net.ipv4.tcp_tw_reuse = 1 TCP keepalive 相关参数 net.ipv4.tcp_keepalive_intvl = 30 net.ipv4.tcp_keepalive_probes = 10 net.ipv4.tcp_keepalive_time = 600 其他 net.bridge.bridge-nf-call-iptables = 1 net.bridge.bridge-nf-call-ip6tables = 1 net.ipv6.conf.all.disable_ipv6 = 1 net.ipv6.conf.lo.disable_ipv6 = 1 net.ipv4.neigh.default.gc_stale_time = 120 net.ipv4.conf.all.rp_filter = 0 内存相关相关 vm.drop_caches = NUM vm.swappiness = 10 vm.max_map_count = 262144 vm.overcommit_memory = 1 vm.overcommit_ration = 50 vm.</description></item></channel></rss>