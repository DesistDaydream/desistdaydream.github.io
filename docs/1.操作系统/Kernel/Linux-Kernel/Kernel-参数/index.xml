<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦的站点 – Kernel 参数</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Linux-Kernel/Kernel-%E5%8F%82%E6%95%B0/</link><description>Recent content in Kernel 参数 on 断念梦的站点</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Linux-Kernel/Kernel-%E5%8F%82%E6%95%B0/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Kernel 参数</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Linux-Kernel/Kernel-%E5%8F%82%E6%95%B0/Kernel-%E5%8F%82%E6%95%B0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Linux-Kernel/Kernel-%E5%8F%82%E6%95%B0/Kernel-%E5%8F%82%E6%95%B0/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.kernel.org/doc/html/latest/admin-guide/sysctl/index.html">官方文档，Linux 内核用户和管理员指南-/proc/sys 文档&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>内核参数是以 key/value 的方式储存在 &lt;a href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Filesystem/%E7%89%B9%E6%AE%8A%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/sysfs.md">sysfs&lt;/a> 文件系统中。key 就是 . &lt;strong>/proc/sys/&lt;/strong> 目录下的某个文件，value 就是该文件的内容。&lt;/p>
&lt;p>比如 net.ipv4.ip_forward 这个 key，就在 &lt;strong>/proc/sys/net/ipv4/&lt;/strong> 目录下。以&lt;code>.&lt;/code>分隔的就是字符就是目录名，最后一个字段就是某某目录下的文件名。&lt;/p>
&lt;p>可以通过修改 &lt;strong>/proc/sys/&lt;/strong> 目录下的文件中的值来修改内核的参数。每个文件就是内核的一种功能，文件中的内容就是该内核功能的参数。&lt;/p>
&lt;p>注意事项：&lt;/p>
&lt;ul>
&lt;li>一般情况下，内核参数的 0 和 1 这两个值表示如下含义：
&lt;ul>
&lt;li>&lt;strong>0&lt;/strong> 表示 &lt;strong>否&lt;/strong>，即错误、拒绝、关闭等等&lt;/li>
&lt;li>&lt;strong>1&lt;/strong> 表示 &lt;strong>是&lt;/strong>，即正确、允许、开启等等&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>sysctl 工具用来配置与显示在 /proc/sys 目录中的内核参数．如果想使参数长期保存，可以通过编辑 /etc/sysctl.conf 文件来实现。&lt;/li>
&lt;li>修改 /proc 下内核参数文件内容，不能使用编辑器来修改内核参数文件，理由是由于内核随时可能更改这些文件中的任意一个，另外，这些内核参数文件都是虚拟文件，实际中不存在，因此不能使用编辑器进行编辑，而是使用 echo 命令，然后从命令行将输出重定向至 /proc 下所选定的文件中。参数修改后立即生效，但是重启系统后，该参数又恢复成默认值。因此，想永久更改内核参数，需要修改 /etc/sysctl.conf 文件。
&lt;ul>
&lt;li>&lt;code>echo 1 &amp;gt; /proc/sys/net/ipv4/ip_forward&lt;/code>&lt;/li>
&lt;li>&lt;code>sysctl -w net.ipv4.ip_forward=1&lt;/code>&lt;/li>
&lt;li>永久的方法：
&lt;ul>
&lt;li>&lt;code>echo &amp;quot;net.ipv4.ip_forward=1&amp;quot; &amp;gt;&amp;gt; /etc/sysctl.conf&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>如果想使参数马上生效，也可以执行如下命令 &lt;code>sysctl -p&lt;/code>&lt;/li>
&lt;/ul>
&lt;h1 id="procsys-目录的组成">/proc/sys 目录的组成&lt;a class="td-heading-self-link" href="#procsys-%e7%9b%ae%e5%bd%95%e7%9a%84%e7%bb%84%e6%88%90" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;strong>/proc/sys/&lt;/strong> 目录下的每一个子目录，都表示一种内核参数的分类，大体可以分为如下几类：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>./abi/&lt;/strong> # execution domains &amp;amp; personalities
&lt;ul>
&lt;li>&lt;a href="https://www.kernel.org/doc/html/latest/admin-guide/sysctl/abi.html">Documentation for /proc/sys/abi/&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>./debug/&lt;/strong> # 空&lt;/li>
&lt;li>&lt;strong>./dev/&lt;/strong> # device specific information (eg dev/cdrom/info)&lt;/li>
&lt;li>&lt;strong>./fs/&lt;/strong> # specific filesystems filehandle, inode, dentry and quota tuning binfmt_misc &amp;lt;Kernel Support for miscellaneous Binary Formats (binfmt_misc)&amp;gt;
&lt;ul>
&lt;li>详见 &lt;a href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Linux%20Kernel/Kernel%20%E5%8F%82%E6%95%B0/fs(%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3%E5%8F%82%E6%95%B0).md">fs(文件系统相关参数)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>./kernel/&lt;/strong> # global kernel info / tuning miscellaneous stuff
&lt;ul>
&lt;li>&lt;a href="https://www.kernel.org/doc/html/latest/admin-guide/sysctl/kernel.html">Documentation for /proc/sys/kernel/&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>./net/&lt;/strong> # 网络相关的内核参数
&lt;ul>
&lt;li>详见 &lt;a href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Linux%20Kernel/Kernel%20%E5%8F%82%E6%95%B0/net(%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E5%8F%82%E6%95%B0)/net(%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E5%8F%82%E6%95%B0).md">net(网络相关参数)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>./proc/&lt;/strong> # 空&lt;/li>
&lt;li>&lt;strong>./sunrpc/&lt;/strong> # SUN Remote Procedure Call (NFS)
&lt;ul>
&lt;li>&lt;a href="https://www.kernel.org/doc/html/latest/admin-guide/sysctl/sunrpc.html">Documentation for /proc/sys/sunrpc/&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>./vm/&lt;/strong> # 内存管理调整缓冲区和高速缓存管理。memory management tuning buffer and cache management
&lt;ul>
&lt;li>详见 &lt;a href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Linux%20Kernel/Kernel%20%E5%8F%82%E6%95%B0/vm(%E5%86%85%E5%AD%98%E7%9B%B8%E5%85%B3%E5%8F%82%E6%95%B0).md">vm(内存相关参数)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>./user/&lt;/strong> # Per user per user namespace limits
&lt;ul>
&lt;li>&lt;a href="https://www.kernel.org/doc/html/latest/admin-guide/sysctl/user.html">Documentation for /proc/sys/user/&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: fs(文件系统相关参数)</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Linux-Kernel/Kernel-%E5%8F%82%E6%95%B0/fs%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3%E5%8F%82%E6%95%B0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Linux-Kernel/Kernel-%E5%8F%82%E6%95%B0/fs%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3%E5%8F%82%E6%95%B0/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.kernel.org/doc/html/latest/admin-guide/sysctl/fs.html">Linux Kernel 文档，管理员指南 - /proc/sys 文档 - /proc/sys/fs 文档&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="file-max-与-file-nr">file-max 与 file-nr&lt;a class="td-heading-self-link" href="#file-max-%e4%b8%8e-file-nr" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="fsfile-max--52706963">fs.file-max = 52706963&lt;a class="td-heading-self-link" href="#fsfile-max--52706963" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>max-file 表示系统级别的能够打开的文件描述符的数量。是对整个系统的限制，并不是针对用户的。&lt;/p>
&lt;blockquote>
&lt;p>ulimit -n 控制进程级别能够打开的文件句柄的数量。提供对 shell 及其启动的进程的可用文件句柄的控制。这是进程级别的。&lt;/p>
&lt;/blockquote>
&lt;p>当系统尝试分配比 file-max 指定的值更多的文件描述符时，通常我们会看到如下报错：&lt;code>VFS: file-max limit &amp;lt;number&amp;gt; reached&lt;/code>&lt;/p>
&lt;h3 id="fsfile-nr--int">fs.file-nr = INT&lt;a class="td-heading-self-link" href="#fsfile-nr--int" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>file-nr 中的三个值分别表示：&lt;/p>
&lt;ul>
&lt;li>已分配的文件描述符&lt;/li>
&lt;li>已分配但未使用的文件描述符&lt;/li>
&lt;li>最大文件描述符&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>desistdaydream@hw-cloud-xngy-jump-server-linux-2 ~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>$ cat /proc/sys/fs/file-max
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#0000cf;font-weight:bold">9223372036854775807&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>desistdaydream@hw-cloud-xngy-jump-server-linux-2 ~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>$ cat /proc/sys/fs/file-nr
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#0000cf;font-weight:bold">2400&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">9223372036854775807&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>通常情况下 已分配但未使用的文件描述符 的值总是为 0，这并不是错误的，只是意味着 &lt;code>已分配的文件描述符=正在使用的文件描述符&lt;/code>&lt;/p>
&lt;p>由于某些历史原因，内核虽然可以动态分配文件描述符，但是却无法再次释放它们~~~&lt;/p>
&lt;h2 id="其他">其他&lt;a class="td-heading-self-link" href="#%e5%85%b6%e4%bb%96" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="fsmay_detach_mounts--1">fs.may_detach_mounts = 1&lt;a class="td-heading-self-link" href="#fsmay_detach_mounts--1" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>未知&lt;/p>
&lt;h3 id="fsnr_open--int64">fs.nr_open = INT64&lt;a class="td-heading-self-link" href="#fsnr_open--int64" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>单个进程可分配的最大文件描述符数量。&lt;code>默认值：1024 * 1024&lt;/code>，即 1048576。&lt;/p></description></item><item><title>Docs: net(网络相关参数)</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Linux-Kernel/Kernel-%E5%8F%82%E6%95%B0/net%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E5%8F%82%E6%95%B0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Linux-Kernel/Kernel-%E5%8F%82%E6%95%B0/net%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E5%8F%82%E6%95%B0/</guid><description/></item><item><title>Docs: vm(内存相关参数)</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Linux-Kernel/Kernel-%E5%8F%82%E6%95%B0/vm%E5%86%85%E5%AD%98%E7%9B%B8%E5%85%B3%E5%8F%82%E6%95%B0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Linux-Kernel/Kernel-%E5%8F%82%E6%95%B0/vm%E5%86%85%E5%AD%98%E7%9B%B8%E5%85%B3%E5%8F%82%E6%95%B0/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.kernel.org/doc/html/latest/admin-guide/sysctl/vm.html">Linux Kernel 文档，管理员指南 - /proc/sys 文档 - /proc/sys/vm 文档&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;code>/proc/sys/vm/&lt;/code> 目录下的文件可用于调整 Linux Kernel 中有关 Virtual Memory(虚拟内存) 子系统的操作。&lt;/p>
&lt;h2 id="vmdrop_caches--num">vm.drop_caches = NUM&lt;a class="td-heading-self-link" href="#vmdrop_caches--num" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>写入该文件可以清理内存中的缓存。详见 &lt;a href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Memory/Memory%20%E7%9A%84%E7%BC%93%E5%AD%98.md#%E7%BC%93%E5%AD%98%E7%9A%84%E6%B8%85%E7%90%86">Memory 的缓存&lt;/a> 章节中“缓存清理”部分&lt;/p>
&lt;h2 id="vmswappiness--10">vm.swappiness = 10&lt;a class="td-heading-self-link" href="#vmswappiness--10" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>这个内核参数可以用来调整系统使用 swap 的时机。&lt;code>默认值：60&lt;/code>&lt;/p>
&lt;p>设为 60 即表示：当内存中空闲空间低于 60%的时候，就会开始使用 swap 空间(也就是说系统使用了 40%的内存之后，就开始使用 swap)&lt;/p>
&lt;h2 id="vmmax_map_count--262144">vm.max_map_count = 262144&lt;a class="td-heading-self-link" href="#vmmax_map_count--262144" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>一个进程可以拥有的 VMA(虚拟内存区域) 的数量。&lt;code>默认值：65530&lt;/code>&lt;/p>
&lt;p>常用于运行 Elasticsearch 服务的设备上。&lt;/p>
&lt;h2 id="vmovercommit_memory--1">vm.overcommit_memory = 1&lt;a class="td-heading-self-link" href="#vmovercommit_memory--1" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>配置是否允许[内存 overcommit](Memroy%20 的%20Over%20Commit%20 与%20OOM.md 管理/Memroy 的 Over Commit 与 OOM.md)，有 0、1、2 三种模式。&lt;code>默认值：0&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>0&lt;/strong> # heuristic overcommit(试探式允许 overcommit)。
&lt;ul>
&lt;li>当应用进程尝试申请内存时，内核会做一个检测。内核将检查是否有足够的&lt;strong>可用内存&lt;/strong>可以分配。如果有足够的可用内存，内存申请允许；否则，内存申请失败。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>1&lt;/strong> # always overcommit,never check(总是允许 overcommit)
&lt;ul>
&lt;li>对于内存的申请请求，内核不会做任何检测，并直接分配内存。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>2&lt;/strong> # never overcommit,always check(永不允许 overcommit)
&lt;ul>
&lt;li>说是永不允许 overcommit，其实只是通过其他参数来控制 overcommit(过量使用) 的大小。可以分配的总内存将会受到 /proc/meminfo 中的 CommitLimit 这个参数限制。&lt;/li>
&lt;li>&lt;code>CommitLimit = (total_RAM - total_huge_TLB) * overcommit_ratio / 100 + total_swap&lt;/code>
&lt;ul>
&lt;li>totaol_RAM # 系统内存总量(就是物理内存)&lt;/li>
&lt;li>total_huge_TLB # 为 huge pages 保留的内存量，一般没有保留，都是 0&lt;/li>
&lt;li>overcommit_ratio # /proc/sys/vm/overcommit_ratio 内核参数的值。&lt;/li>
&lt;li>total_swap # swap 空间的总量&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>比如我现在有一个 16G 内存的服务器，swap 空间为 16，overcommit_ratio 参数设为 50，那么 CommitLimit 的计算结果为 24G。
&lt;ul>
&lt;li>此时，如果 /proc/meminfo 中的 Commited_AS 参数 值为 23G，当一个程序申请超过 1G 内存时，则会失败。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>所以从根本上讲，模式 2 下，可以分配的内存总量，受 overcommit_ration 这个内核参数控制。所谓的永远不会 overcommit，则是指 overcommit_ration 参数的值小于 100。&lt;/li>
&lt;li>注意：从 Linux 内核 3.14 开始，如果 /proc/sys/vm/overcommit_kbytes 参数的值不为 0，则&lt;code>CommitLimit = overcommit_kbytes + total_swap&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>所以所有模式都可能会触发 OOM 机制。只不过模式 0 和 1 在程序申请内存时，行为不同；而模式 2 则受 overcommit_ration 参数的限制。&lt;/p>
&lt;/blockquote>
&lt;h2 id="vmovercommit_ration--50">vm.overcommit_ration = 50&lt;a class="td-heading-self-link" href="#vmovercommit_ration--50" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>内存 overcommit(过量使用) 的百分比。&lt;code>默认值：50&lt;/code>。与 vm.overcommit_memory = 2 配合使用，其他情况该参数无效。&lt;/p>
&lt;p>如果该值小于 100 ，那么系统分配给程序的内存，则永远不会超过真实内存，所以也就不存在 overcommit。如果该值超过 100，那么 CommitLimit 的值则会超过真实内存，这时候就相当于 overcommit 了，并且在内存使用超过真实值时会触发 OOM。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 在没有swap 和 大页预留的情况下&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># vm.overcommit_ration=100 时，CommitLimit 等于 Mem 总量&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># sysctl -w vm.overcommit_ratio=100&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>vm.overcommit_ratio &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">100&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># cat /proc/meminfo | grep Commit&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> free -k
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CommitLimit: &lt;span style="color:#0000cf;font-weight:bold">3868968&lt;/span> kB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Committed_AS: &lt;span style="color:#0000cf;font-weight:bold">806056&lt;/span> kB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> total used free shared buff/cache available
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Mem: &lt;span style="color:#0000cf;font-weight:bold">3868968&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">282904&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3195972&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">8748&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">390092&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3368548&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Swap: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># vm.overcommit_ration=50 时，CommitLimit 等于 Mem 总量的一半&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># sysctl -w vm.overcommit_ratio=100&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>vm.overcommit_ratio &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">50&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># cat /proc/meminfo | grep Commit &amp;amp;&amp;amp; free -k&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CommitLimit: &lt;span style="color:#0000cf;font-weight:bold">1934484&lt;/span> kB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Committed_AS: &lt;span style="color:#0000cf;font-weight:bold">800516&lt;/span> kB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> total used free shared buff/cache available
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Mem: &lt;span style="color:#0000cf;font-weight:bold">3868968&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">282712&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3196160&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">8748&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">390096&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3368740&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Swap: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># vm.overcommit_ration=200 时，CommitLimit 等于 Mem 总量的一倍。此时内存可以 overcommit，有可能会触发 OOM&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># sysctl -w vm.overcommit_ratio=100&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>vm.overcommit_ratio &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">200&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># cat /proc/meminfo | grep Commit &amp;amp;&amp;amp; free -k&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CommitLimit: &lt;span style="color:#0000cf;font-weight:bold">7737936&lt;/span> kB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Committed_AS: &lt;span style="color:#0000cf;font-weight:bold">800516&lt;/span> kB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> total used free shared buff/cache available
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Mem: &lt;span style="color:#0000cf;font-weight:bold">3868968&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">282872&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3196000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">8748&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">390096&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3368580&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Swap: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="vmpanic_on_oom--0">vm.panic_on_oom = 0&lt;a class="td-heading-self-link" href="#vmpanic_on_oom--0" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>触发 oom 之后，内核 panic 机制。&lt;code>默认值：0&lt;/code>。&lt;/p>
&lt;ul>
&lt;li>0 # oom 触发后，内核不会 panic。&lt;/li>
&lt;li>1 # oom 触发后，内核会出现 panic 情况。但是，如果某个进程通过内存/ cpusets 限制使用节点，并且这些节点成为内存耗尽状态，则一个进程可能会被 oom-killer 杀死。在这种情况下不内核不会 panic。因为其他节点的内存可能是空闲的。这意味着系统总体状态可能还不是致命的。&lt;/li>
&lt;li>2 # oom 触发后，内核直接 panic。&lt;/li>
&lt;/ul>
&lt;h2 id="vmoom_kill_allocating_task--0">vm.oom_kill_allocating_task = 0&lt;a class="td-heading-self-link" href="#vmoom_kill_allocating_task--0" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>触发 oom 后，内核 kill 进程的行为。&lt;code>默认值：0&lt;/code>。&lt;/p>
&lt;ul>
&lt;li>0 # 内核将检查每个进程的分数，分数最高的进程将被 kill 掉&lt;/li>
&lt;li>1 # 那么内核将 kill 掉当前申请内存的进程&lt;/li>
&lt;/ul>
&lt;h2 id="vmnr_hugepages">vm.nr_hugepages&lt;a class="td-heading-self-link" href="#vmnr_hugepages" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>大页的数量，&lt;code>默认值: 0&lt;/code>&lt;/p></description></item><item><title>Docs: 应用实例</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Linux-Kernel/Kernel-%E5%8F%82%E6%95%B0/%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Linux-Kernel/Kernel-%E5%8F%82%E6%95%B0/%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/</guid><description>
&lt;h1 id="tcp-相关参数">TCP 相关参数:&lt;a class="td-heading-self-link" href="#tcp-%e7%9b%b8%e5%85%b3%e5%8f%82%e6%95%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;ul>
&lt;li>net.core.somaxconn = 65535&lt;/li>
&lt;li>net.ipv4.tcp_fin_timeout = 5&lt;/li>
&lt;li>net.ipv4.tcp_max_syn_backlog = 65536&lt;/li>
&lt;li>net.ipv4.tcp_max_tw_buckets = 5000&lt;/li>
&lt;li>net.ipv4.tcp_synack_retries = 2&lt;/li>
&lt;li>net.ipv4.tcp_syncookies = 1&lt;/li>
&lt;li>net.ipv4.tcp_tw_reuse = 1&lt;/li>
&lt;/ul>
&lt;h2 id="tcp-keepalive-相关参数">TCP keepalive 相关参数&lt;a class="td-heading-self-link" href="#tcp-keepalive-%e7%9b%b8%e5%85%b3%e5%8f%82%e6%95%b0" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>net.ipv4.tcp_keepalive_intvl = 30&lt;/li>
&lt;li>net.ipv4.tcp_keepalive_probes = 10&lt;/li>
&lt;li>net.ipv4.tcp_keepalive_time = 600&lt;/li>
&lt;/ul>
&lt;h2 id="其他">其他&lt;a class="td-heading-self-link" href="#%e5%85%b6%e4%bb%96" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>net.bridge.bridge-nf-call-iptables = 1&lt;/li>
&lt;li>net.bridge.bridge-nf-call-ip6tables = 1&lt;/li>
&lt;li>net.ipv6.conf.all.disable_ipv6 = 1&lt;/li>
&lt;li>net.ipv6.conf.lo.disable_ipv6 = 1&lt;/li>
&lt;li>net.ipv4.neigh.default.gc_stale_time = 120&lt;/li>
&lt;li>net.ipv4.conf.all.rp_filter = 0&lt;/li>
&lt;/ul>
&lt;h1 id="内存相关相关">内存相关相关&lt;a class="td-heading-self-link" href="#%e5%86%85%e5%ad%98%e7%9b%b8%e5%85%b3%e7%9b%b8%e5%85%b3" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;ul>
&lt;li>vm.drop_caches = NUM&lt;/li>
&lt;li>vm.swappiness = 10&lt;/li>
&lt;li>vm.max_map_count = 262144&lt;/li>
&lt;li>vm.overcommit_memory = 1&lt;/li>
&lt;li>vm.overcommit_ration = 50&lt;/li>
&lt;li>vm.panic_on_oom = 0&lt;/li>
&lt;li>vm.oom_kill_allocating_task = 0&lt;/li>
&lt;/ul>
&lt;h1 id="文件系统相关参数">文件系统相关参数&lt;a class="td-heading-self-link" href="#%e6%96%87%e4%bb%b6%e7%b3%bb%e7%bb%9f%e7%9b%b8%e5%85%b3%e5%8f%82%e6%95%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;ul>
&lt;li>fs.file-max = 52706963&lt;/li>
&lt;li>fs.nr_open = 52706963&lt;/li>
&lt;li>fs.may_detach_mounts = 1&lt;/li>
&lt;/ul></description></item></channel></rss>