<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>BPF on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/BPF/</link><description>Recent content in BPF on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/BPF/index.xml" rel="self" type="application/rss+xml"/><item><title>BPF</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/BPF/BPF/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/BPF/BPF/</guid><description>概述 参考：
Wiki, BPF GitHub 项目,bcc-BPF 特性与 LInux 内核版本对照表 《Linux 内核观测技术 BPF》
Berkeley Packet Filter(伯克利包过滤器，简称 BPF)，是类 Unix 系统上数据链路层的一种原始接口，提供原始链路层封包的收发。在 Kernel 官方文档中，BPF 也称为 Linux Socket Filtering(LInux 套接字过滤，简称 LSF)。BPF 有时也只表示 filtering mechanism(过滤机制)，而不是整个接口。
注意：不管是后面描述的 eBPF 还是 BPF，这个名字或缩写，其本身所表达的含义，其实已经没有太大的意义了，因为这个项目的发展远远超出了它最初的构想。
在 BPF 之前，如果想做数据包过滤，则必须将所有数据包复制到用户空间中，然后在那里过滤它们，这种方式意味着必须将所有数据包复制到用户空间中，复制数据的开销很大。当然可以通过将过滤逻辑转移到内核中解决开销问题，我们来看 BPF 做了什么工作。
实际上，BPF 最早称为 BSD Packet Filter，是很早就有的 Unix 内核特性，最早可追溯到 1992 年发表在 USENIX Conference 上的一篇论文《BSD 数据包过滤：一种新的用户级包捕获架构》，这篇文章作者描述了他们如何在 Unix 内核实现网络数据包过滤，这种技术比当时最先进的数据包过滤技术快了 20 倍。这篇文章描述的 BPF 在数据包过滤上引入了两大革新：
一个新的虚拟机设计，可以有效得工作在基于寄存器结构的 CPU 之上。 应用程序使用缓存只复制与过滤数据包相关的数据，不会复制数据包的宿友信息。这样可以最大程度得减少 BPF 处理的数据。 随后，得益于如此强大的性能优势，所有 Unix 系统都将 BPF 作为网络包过滤的首选技术，抛弃了消耗更多内存和性能更差的原有技术实现。后来由于 BPF 的理念逐渐成为主流，为各大操作系统所接受，这样早期 &amp;ldquo;B&amp;rdquo; 所代表的 BSD 便渐渐淡去，最终演化成了今天我们眼中的 BPF(Berkeley Packet Filter)。</description></item><item><title>eBPF</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/BPF/eBPF/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/BPF/eBPF/</guid><description>概述 参考：
官网 Kernel 官方文档，BPF Kernel 官方文档 Cilium 官方文档，BPF Kernel 官方文档中指向的另一个文档，BPF 官方文档什么是 eBPF 最下面也有链接指向这里 GitHub 项目，torvalds/linux/tools/lib/bpf(libbpf 库) 学习资料 arthurchiao.art 的文章：
[译] 大规模微服务利器：eBPF + Kubernetes（KubeCon, 2020） 公众号，深入浅出 BPF
eBPF 概述：第 1 部分：介绍 eBPF 概述：第 2 部分：机器和字节码 eBPF 概述：第 3 部分：软件开发生态 eBPF 概述：第 4 部分：在嵌入式系统运行 eBPF 概述：第 5 部分：跟踪用户进程 高效入门 eBPF
公众号，阿里云云原生-深入浅出 eBPF | 你要了解的 7 个核心问题
GitHub 项目，DavadDi/bpf_study(DavaDi 的 BPF 学习文章)
https://coolshell.cn/articles/22320.html
eBPF 为什么高效 公众号，云原生实验室，为什么 eBPF 如此受欢迎
eBPF 程序比传统程序“跑得”更快，因为它的代码是直接在内核空间中执行的。
设想这样一个场景，假设一个程序想要统计其从 Linux 系统上发送出去的字节数，需要经过哪些步骤？</description></item></channel></rss>