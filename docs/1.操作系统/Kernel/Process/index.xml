<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Process on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Process/</link><description>Recent content in Process on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Process/index.xml" rel="self" type="application/rss+xml"/><item><title>Process</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Process/Process/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Process/Process/</guid><description>概述 参考：
Wiki, Process_(computing) 原文连接，本文为 IBM RedBook 的 Linux Performanceand Tuning Guidelines 的 1.1 节的翻译 阿里技术，CPU 飙高，系统性能问题如何排查？ 进程管理是操作系统的最重要的功能之一。有效率的进程管理能保证一个程序平稳而高效地运行。它包括进程调度、中断处理、信号、进程优先级、上下文切换、进程状态、进度内存等。
Process(进程) 实际是运行在 CPU 中的一个 Program(程序) 的实体。在 Linux 系统中，能够同时运行多个进程。
Program(程序) 和 Process(进程) 的区别是什么呢?
在很久很久以前，计算机刚出现的时候，是没有操作系统的，那时候一台机器只是运行一个程序，计算后得出数据，后来人们为了同时运行多个程序从而研究出了操作系统，在操作系统之上可以运行多个程序 进程是程序的一个具体实现。类似于按照食谱，真正去做菜的过程。同一个程序可以执行多次，每次都可以在内存中开辟独立的空间来装载，从而产生多个进程。不同的进程还可以拥有各自独立的 IO 接口。 举例说明：
比如:
root 839 1 0 Mar07 ? Ssl 28:50 /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock 这就是一个 Processs(进程)，包括其 ID、启动时间、等等信息的集合体。进程的唯一标识符就是 ID，而启动该进程的程序是 dockerd
至于 /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock 这一串则是启动进程的 Command(命令) 其中命令中的 dockerd 就是启动该进程的 Program(程序)，/usr/bin/ 是程序所在路径，后面的 -H fd:// --containerd=/run/containerd/containerd.sock 是程序的参数。 这一整串字符串所组成的命令，就是启动进程的必备条件，操作系统当收到命令后，会被进程分配 ID，并记录下各种状态信息。 Linux 通过在短的时间间隔内轮流运行这些进程而实现“多任务”。这一短的时间间隔称为“时间片”，让进程轮流运行的方法称为“进程调度” ，完成调度的程序称为调度程序。</description></item><item><title>chroot</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Process/Chroot/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Process/Chroot/</guid><description>概述 参考：
Wiki, chroot Manual(手册)，chroot(2) Change root(改变根，简称 Chroot) 是 Unix-like OS 的一种操作，用于更改对当前正在运行的进程及其子进程展现出来的 / 目录。在这种修改过的环境中运行的程序无法访问指定目录之外的文件。
Chroot 的意思是改变根路径的位置(Linux 系统中以 / 为根目录位置，但是对于执行 Chroot 的用户或者程序来说，是 Chroot 后 PATH 的位置是新的根目录位置)，比如 Telnet，ssh，如果都定义了 Chroot(PATH)规则，那么远程登录的用户将无法访问到该 linux 系统中除了定义的 PATH 外的其余目录
]# pwd /var/lib/docker/overlay2/72a3b770bf98493a90e2e335adbdc9f92eeb18f19044136f74c5c9138cb13304/merged ]# ls bin dev etc home lib LICENSE NOTICE npm_licenses.tar.bz2 proc prometheus root sys tmp usr var ]# ls /root backup downloads go nohup.out p.pcap projects scripts snap tmp ]# chroot . /bin/sh / # pwd / / # ls /root / # 上面例子中，我们通过 chroot 程序进入了以 /var/lib/docker/overlay2/72a3b770bf98493a90e2e335adbdc9f92eeb18f19044136f74c5c9138cb13304/merged/ 目录作为 / 目录的空间中。这就像是将本地文件系统划分了一块空间给 Chroot 后的使用者。</description></item><item><title>D-Bus</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Process/D-Bus/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Process/D-Bus/</guid><description>概述 参考：
D-Bus 是一个 IPC 及 RPC 机制，可以让多个不同的计算机进程在同一台电脑上同时进行通信。</description></item><item><title>Process info</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Process/Process-info/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Process/Process-info/</guid><description>概述 参考：
Linux 中有多种途径可以获取进程信息
/proc/PID/ 目录 etc. /proc/PID/ 参考：
https://github.com/torvalds/linux/blob/v5.19/Documentation/filesystems/proc.rst#11-process-specific-subdirectories [!Tip] 这下面的文件或目录的用途和信息，都有对应的 Manual，Manual 的名字是 proc_pid_XXX 的形式。e.g. stat 文件的 Manual 是 proc_pid_stat(5)
每个进程在 /proc/ 目录下有一个名为自己进程号的目录，该目录记载了该进程相关的 proc 信息。
./cgroup - 进程所属的控制组信息 详见 Cgroup
./cmdline - 该进程的完整命令 除非进程是僵尸和内核态进程。在后一种情况下，这个文件中什么也没有：也就是说，对这个文件的读取将返回 0 个字符。命令行参数在这个文件中以一组字符串的形式出现，用空字节(&amp;rsquo;\0&amp;rsquo;)隔开，在最后一个字符串之后还有一个空字节。 把这个文件看作是进程希望你看到的命令行。 ./exe - 具有该 PID 的实际运行的程序的绝对路径。是一个符号链接 ./fd/ - 其中包含 PID 进程打开的每个文件的一个条目 该条目由其文件描述符命名，并且是指向实际文件的符号链接。 因此，0 是标准输入，1 是标准输出，2 是标准错误，依此类推。详解见：File Descriptor(文件描述符) ./fdinfo/ - 其中包含 PID 进程打开的每个文件的一个条目，该条目由其文件描述符命名 该目录中的文件仅由进程所有者读取。 可以读取每个文件的内容以获得有关相应文件描述符的信息。 内容取决于相应文件描述符所引用的文件类型。详解见：File Descriptor(文件描述符)
./maps - 进程的内存映射信息 ~]# cat /proc/1751/maps 00400000-00401000 r-xp 00000000 fd:01 100897359 /opt/java/jdk1.</description></item><item><title>进程、线程、线程池</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Process/%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E7%BA%BF%E7%A8%8B%E6%B1%A0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Process/%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E7%BA%BF%E7%A8%8B%E6%B1%A0/</guid><description>概述 参考：
公众号-码农的荒岛求生，看完这篇文章还不懂高并发中的线程与线程池你来打我 一切要从 CPU 说起 你可能会有疑问，讲多线程为什么要从 CPU 说起呢？原因很简单，在这里没有那些时髦的概念，你可以更加清晰的看清问题的本质。
CPU 并不知道线程、进程之类的概念。
CPU 只知道两件事:
从内存中取出指令 执行指令，然后回到 1 你看，在这里 CPU 确实是不知道什么进程、线程之类的概念。
接下来的问题就是 CPU 从哪里取出指令呢？答案是来自一个被称为 Program Counter(简称 PC) 的寄存器，也就是我们熟知的程序计数器，在这里大家不要把寄存器想的太神秘，你可以简单的把寄存器理解为内存，只不过存取速度更快而已。
PC 寄存器中存放的是什么呢？这里存放的是指令在内存中的地址，什么指令呢？是 CPU 将要执行的下一条指令。
那么是谁来设置 PC 寄存器中的指令地址呢？
原来 PC 寄存器中的地址默认是自动加 1 的，这当然是有道理的，因为大部分情况下 CPU 都是一条接一条顺序执行，当遇到 if、else 时，这种顺序执行就被打破了，CPU 在执行这类指令时会根据计算结果来动态改变 PC 寄存器中的值，这样 CPU 就可以正确的跳转到需要执行的指令了。
聪明的你一定会问，那么 PC 中的初始值是怎么被设置的呢？
在回答这个问题之前我们需要知道 CPU 执行的指令来自哪里？是来自内存，废话，内存中的指令是从磁盘中保存的可执行程序加载过来的，磁盘中可执行程序是编译器生成的，编译器又是从哪里生成的机器指令呢？答案就是我们定义的函数。
注意是函数，函数被编译后才会形成 CPU 执行的指令，那么很自然的，我们该如何让 CPU 执行一个函数呢？显然我们只需要找到函数被编译后形成的第一条指令就可以了，第一条指令就是函数入口。
现在你应该知道了吧，我们想要 CPU 执行一个函数，那么只需要把该函数对应的第一条机器指令的地址写入 PC 寄存器就可以了，这样我们写的函数就开始被 CPU 执行起来啦。
你可能会有疑问，这和线程有什么关系呢？
从 CPU 到操作系统 上一小节中我们明白了 CPU 的工作原理，我们想让 CPU 执行某个函数，那么只需要把函数对应的第一条机器执行装入 PC 寄存器就可以了，这样即使没有操作系统我们也可以让 CPU 执行程序，虽然可行但这是一个非常繁琐的过程，我们需要：</description></item></channel></rss>