<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦的站点 – Process</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Process/</link><description>Recent content in Process on 断念梦的站点</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Process/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Process</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Process/Process/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Process/Process/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Process_(computing)">Wiki, Process_(computing)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://blog.csdn.net/ljianhui/article/details/46718835">原文连接&lt;/a>，本文为 IBM RedBook 的 &lt;a href="http://users.polytech.unice.fr/~bilavarn/fichier/elec5_linux/linux_perf_and_tuning_IBM.pdf">Linux Performanceand Tuning Guidelines&lt;/a> 的 1.1 节的翻译&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/fzLcAkYwKhj-9hgoVkTzaw">阿里技术，CPU 飙高，系统性能问题如何排查？&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>进程管理是操作系统的最重要的功能之一。有效率的进程管理能保证一个程序平稳而高效地运行。它包括进程调度、中断处理、信号、进程优先级、上下文切换、进程状态、进度内存等。&lt;/p>
&lt;p>&lt;strong>Process(进程)&lt;/strong> 实际是运行在 CPU 中的一个 &lt;strong>&lt;a href="https://desistdaydream.github.io/docs/2.%E7%BC%96%E7%A8%8B/Program.md">Program&lt;/a>(程序) 的实体&lt;/strong>。在 Linux 系统中，能够同时运行多个进程。&lt;/p>
&lt;p>Program(程序) 和 Process(进程) 的区别是什么呢?&lt;/p>
&lt;ul>
&lt;li>在很久很久以前，计算机刚出现的时候，是没有操作系统的，那时候一台机器只是运行一个程序，计算后得出数据，后来人们为了同时运行多个程序从而研究出了操作系统，在操作系统之上可以运行多个程序&lt;/li>
&lt;li>进程是程序的一个具体实现。类似于按照食谱，真正去做菜的过程。同一个程序可以执行多次，每次都可以在内存中开辟独立的空间来装载，从而产生多个进程。不同的进程还可以拥有各自独立的 IO 接口。&lt;/li>
&lt;/ul>
&lt;p>&lt;font color="#ff0000">举例说明&lt;/font>：&lt;/p>
&lt;p>比如:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>root &lt;span style="color:#0000cf;font-weight:bold">839&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> Mar07 ? Ssl 28:50 /usr/bin/dockerd -H fd:// --containerd&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>/run/containerd/containerd.sock
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这就是一个 &lt;strong>Processs(进程)&lt;/strong>，包括其 ID、启动时间、等等信息的集合体。进程的唯一标识符就是 ID，而启动该进程的程序是 dockerd&lt;/p>
&lt;ul>
&lt;li>至于 &lt;code>/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock&lt;/code> 这一串则是启动进程的 &lt;strong>Command(命令)&lt;/strong>&lt;/li>
&lt;li>其中命令中的 dockerd 就是启动该进程的 &lt;strong>Program(程序)&lt;/strong>，&lt;code>/usr/bin/&lt;/code> 是程序所在路径，后面的 &lt;code>-H fd:// --containerd=/run/containerd/containerd.sock&lt;/code> 是程序的参数。&lt;/li>
&lt;li>这一整串字符串所组成的命令，就是启动进程的必备条件，操作系统当收到命令后，会被进程分配 ID，并记录下各种状态信息。&lt;/li>
&lt;/ul>
&lt;p>Linux 通过在短的时间间隔内轮流运行这些进程而实现“多任务”。这一短的时间间隔称为“时间片”，让进程轮流运行的方法称为“进程调度” ，完成调度的程序称为调度程序。&lt;/p>
&lt;p>进程调度控制进程对 CPU 的访问。当需要选择下一个进程运行时，由调度程序选择最值得运行的进程。可运行进程实际上是仅等待 CPU 资源的进程，如果某个进程在等待其它资源，则该进程是不可运行进程。Linux 使用了比较简单的基于优先级的进程调度算法选择新的进程。&lt;/p>
&lt;p>通过多任务机制，每个进程可认为只有自己独占计算机，从而简化程序的编写。每个进程有自己单独的地址空间，并且只能由这一进程访问，这样，操作系统避免了进程之间的互相干扰以及“坏”程序对系统可能造成的危害。 为了完成某特定任务，有时需要综合两个程序的功能，例如一个程序输出文本，而另一个程序对文本进行排序。为此，操作系统还提供进程间的通讯机制来帮助完成这样的任务。Linux 中常见的进程间通讯机制有信号、管道、共享内存、信号量和套接字等。&lt;/p>
&lt;p>内核通过 SCI 提供了一个 API 来创建一个新进程(fork、exec 或 Portable Operating System Interface [POSⅨ] 函数)、停止进程(kill、exit)、并在它们之间进行通信和同步(signal 或者 POSⅨ 机制)。&lt;/p>
&lt;p>计算机实际上可以做的事情实质上非常简单，比如计算两个数的和，再比如在内存中寻找到某个地址等等。这些最基础的计算机动作被称为指令(instruction)。所谓的程序(program)，就是这样一系列指令的所构成的集合。通过程序，我们可以让计算机完成复杂的操作。程序大多数时候被存储为可执行的文件。这样一个可执行文件就像是一个菜谱，计算机可以按照菜谱作出可口的饭菜。&lt;/p>
&lt;p>操作系统的一个重要功能就是为进程提供方便，比如说为进程分配内存空间，管理进程的相关信息等等，就好像是为我们准备好了一个精美的厨房。&lt;/p>
&lt;h2 id="进程的生命周期">进程的生命周期&lt;a class="td-heading-self-link" href="#%e8%bf%9b%e7%a8%8b%e7%9a%84%e7%94%9f%e5%91%bd%e5%91%a8%e6%9c%9f" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>每一个进程都有其生命周期，例如创建、运行、终止和消除。这些阶段会在系统启动和运行中重复无数次。因此，进程的生命周期对于其性能的分析是非常重要的。下图展示了经典的进程生命周期。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/ld23ik/1616167507353-2f676d82-88da-483c-a939-399f284d6425.jpeg" alt="">&lt;/p>
&lt;p>不会关闭的常驻进程可以称为 &lt;strong>Daemon Process(守护进程，简称 Daemon)&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>一般 daemon 的名称都会在进程名后加一个字母 d 作为 daemon 的 process，比如 vsftp 的 daemon 就是 vsftpd。&lt;/p>
&lt;/blockquote>
&lt;p>当一个进程创建一个新的进程，创建进程(父进程)的进程调用 一个 fork() 系统调用。当 fork() 系统调用被调用，它得到该新创建进程（子进程）的进程描述并调用一个新的进程 id。它复制该值到父进程进程描述到子进程中。此时整个的父进程的地址空间是没有被复制的；父子进程共享相同的地址空间。&lt;/p>
&lt;p>exec() 系统调用复制新的程序到子进程的地址空间。因为父子进程共享地址空间，写入一个新的程序的数据会引起一个分页错误。在这种情况下，内存会分配新的物理内存页给子进程。&lt;/p>
&lt;p>这个推迟的操作叫作写时复制。子进程通常运行他们自己的程序而不是与父进程运行相同的程序。这个操作避免了不必要的开销，因为复制整个地址空间是一个非常缓慢和效率低下的操作，它需要使用大量的处理器时间和资源。&lt;/p>
&lt;p>当程序已经执行完成，子进程通过调用 exit()系统调用终止。exit()系统调用释放进程大部分的数据并通过发送一个信号通知其父进程。此时，子进程是一个被叫作僵尸进程的进程（参阅 page 7 的“Zombie processes”）。&lt;/p>
&lt;p>子进程不会被完全移除直到其父进程知道其子进程的调用 wait()系统调用而终止。当父进程被通知子进程终止，它移除子进程的所有数据结构并释放它的进程描述。&lt;/p>
&lt;h2 id="父进程与子进程">父进程与子进程&lt;a class="td-heading-self-link" href="#%e7%88%b6%e8%bf%9b%e7%a8%8b%e4%b8%8e%e5%ad%90%e8%bf%9b%e7%a8%8b" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/ld23ik/1616167507409-d531245f-abbe-4a2a-b575-d2ae72c6949f.jpeg" alt="">&lt;/p>
&lt;ul>
&lt;li>用颜色的线标示的两列，左侧的为进程号(PID)右侧的为父进程号(PPID)&lt;/li>
&lt;li>子进程与父进程的环境变量相同&lt;/li>
&lt;li>老进程成为新进程的父进程(parent process)，而相应的，新进程就是老的进程的子进程(child process)。一个进程除了有一个 PID 之外，还会有一个 PPID(parent PID)来存储的父进程 PID。如果我们循着 PPID 不断向上追溯的话，总会发现其源头是 init 进程。所以说，所有的进程也构成一个以 init 为根的树状结构。&lt;/li>
&lt;li>如上图所示，我们查询当前 shell 下的进程：
&lt;ul>
&lt;li>我们可以看到，第二个进程 ps 是第一个进程 bash 的子进程。&lt;/li>
&lt;li>还可以用 &lt;code>pstree&lt;/code> 命令来显示整个进程树。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>fork() 通常作为一个函数被调用。这个函数会有两次返回，将子进程的 PID 返回给父进程，0 返回给子进程。实际上，子进程总可以查询自己的 PPID 来知道自己的父进程是谁，这样，一对父进程和子进程就可以随时查询对方。&lt;/li>
&lt;li>通常在调用 fork 函数之后，程序会设计一个 if 选择结构。当 PID 等于 0 时，说明该进程为子进程，那么让它执行某些指令,比如说使用 exec 库函数(library function)读取另一个程序文件，并在当前的进程空间执行 (这实际上是我们使用 fork 的一大目的: 为某一程序创建进程)；而当 PID 为一个正整数时，说明为父进程，则执行另外一些指令。由此，就可以在子进程建立之后，让它执行与父进程不同的功能。&lt;/li>
&lt;/ul>
&lt;h3 id="子进程的-termination终结">子进程的 termination(终结)&lt;a class="td-heading-self-link" href="#%e5%ad%90%e8%bf%9b%e7%a8%8b%e7%9a%84-termination%e7%bb%88%e7%bb%93" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>当子进程终结时，它会通知父进程，并清空自己所占据的内存，并在内核里留下自己的退出信息(exit code，如果顺利运行，为 0；如果有错误或异常状况，为&amp;gt;0 的整数)。在这个信息里，会解释该进程为什么退出。父进程在得知子进程终结时，有责任对该子进程使用 wait 系统调用。这个 wait 函数能从内核中取出子进程的退出信息，并清空该信息在内核中所占据的空间。但是，如果父进程早于子进程终结，子进程就会成为一个孤儿(orphand)进程。孤儿进程会被过继给 init 进程，init 进程也就成了该进程的父进程。init 进程负责该子进程终结时调用 wait 函数。&lt;/p>
&lt;p>当然，一个糟糕的程序也完全可能造成子进程的退出信息滞留在内核中的状况（父进程不对子进程调用 wait 函数），这样的情况下，子进程成为僵尸(zombie)进程。当大量僵尸进程积累时，内存空间会被挤占。&lt;/p>
&lt;h2 id="thread线程">Thread(线程)&lt;a class="td-heading-self-link" href="#thread%e7%ba%bf%e7%a8%8b" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>一个线程是一个单独的进程生成的一个执行单元。它与其他的线程并行地运行在同一个进程中。各个线程可以共享进程的资源，例如内存、地址空间、打开的文件等等。它们能访问相同的程序数据集。线程也被叫作轻量级的进程（Light Weight Process，LWP）。因为它们共享资源，所以每个线程不应该在同一时间改变它们共享的资源。互斥的实现、锁、序列化等是用户程序的责任。&lt;/p>
&lt;p>从性能的角度来说，创建线程的开销比创建进程少，因数创建一个线程时不需要复制资源。另一方面，进程和线程拥在调度算法上有相似的特性。&lt;strong>内核以相似的方式处理它们&lt;/strong>。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/ld23ik/1616167507380-b6ae3b1e-b47c-454c-b3c7-9942dde4f480.jpeg" alt="">&lt;/p>
&lt;p>所以，一个进程创建的线程，也是可以运行在多个 CPU 上的。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/ld23ik/1616645843002-c07df4a7-3d7a-4969-8203-4bc20169721a.png" alt="image.png">&lt;/p>
&lt;p>在现在的 Linux 实现中，线程支持 UNIX 的可移植操作系统接口（POSIX）标准库。在 Linux 操作系统中有几种可用的线程实现。以下是广泛使用的线程库：&lt;/p>
&lt;p>Linux Threads 自从 Linux 内核 2.0 起就已经被作为默认的线程实现。Linux Threads 的一些实现并不符合 POSIX 标准。Native POSIX Thread Library（NPTL）正在取代 Linux Threads。Linux Threads 在将来的 Linux 企业发行版中将不被支持。&lt;/p>
&lt;p>Native POSIX Thread Libary（NPTL）&lt;/p>
&lt;p>NPTL 最初是由红帽公司开发的。NPTL 与 POSIX 更加兼容。通过 Linux 内核 2.6 的高级特性，例如，新的 clone()系统调用、信号处理的实现等等，它具有比 LinuxThreads 更高的性能和伸缩性。&lt;/p>
&lt;p>NPTL 与 LinuxThreads 有一些不兼容。一个依赖于 LinuxThreads 的应用可能不能在 NPTL 实现中工作。&lt;/p>
&lt;p>Next Generation POSIX Thread（NGPT）&lt;/p>
&lt;p>NGPT 是一个 IBM 开发的 POSIX 线程库。现在处于维护阶段并且在未来也没有开发计划。&lt;/p>
&lt;p>使用 LD_ASSUME_KERNEL 环境变量，你可以选择在应用中使用哪一个线程库。&lt;/p>
&lt;h2 id="linux-内核代码中的-process">Linux 内核代码中的 Process&lt;a class="td-heading-self-link" href="#linux-%e5%86%85%e6%a0%b8%e4%bb%a3%e7%a0%81%e4%b8%ad%e7%9a%84-process" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>在 Linux 中，&lt;strong>Process(进程) 属于&lt;/strong> &lt;strong>Task(任务)&lt;/strong> 的一种类型，都被 task_struct 结构管理，该结构同时被叫作进程描述。一个进程描述包含一个运行进程所有的必要信息，例如进程标识、进程属性和构建进程的资源。如果你了解该进程构造，你就能理解对于进程的运行和性能来说，什么是重要的。&lt;/p>
&lt;p>v5.14 代码：&lt;a href="https://github.com/torvalds/linux/blob/v5.14/include/linux/sched.h#L661">include/linux/sched.h&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000">task_struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#ifdef CONFIG_THREAD_INFO_IN_TASK
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"> * For reasons of header soup (see current_thread_info()), this
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"> * must be the first element of task_struct.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000">thread_info&lt;/span> &lt;span style="color:#000">thread_info&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000;font-weight:bold">......&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// 进程状态
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">unsigned&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">__state&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// 进程唯一标识符
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">pid_t&lt;/span> &lt;span style="color:#000">pid&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">pid_t&lt;/span> &lt;span style="color:#000">tgid&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// 进程名称，上限 16 字符
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">char&lt;/span> &lt;span style="color:#000">comm&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">TASK_COMM_LEN&lt;/span>&lt;span style="color:#000;font-weight:bold">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// 打开的文件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000">files_struct&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">files&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">......&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>下图展示了进程结构相关的进程信息概述。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/ld23ik/1616167507336-aaeec645-b9df-41c3-99ab-6bf39aed4f42.jpeg" alt="">&lt;/p>
&lt;p>其实从这里能看出来，从某种角度来看，**对于内核来说并没有线程这个概念。Linux 把所有的线程都当做进程来实现，内核也没有特别的调度算法来处理线程。**线程仅仅被视为一个与其他进程共享某些资源的进程，和进程一样，每个线程也都是有自己的 &lt;code>task_struct&lt;/code>，所以在内核中，线程看起来就是一个普通的进程。线程也被称作轻量级进程，一个进程可以有多个线程，线程拥有自己独立的栈，切换也由操作系统调度。在 Linux 上可以通过 &lt;code>pthread_create()&lt;/code> 方法或者 &lt;code>clone()&lt;/code> 系统调用创建；&lt;/p>
&lt;h1 id="进程优先级和-nice-值">进程优先级和 nice 值&lt;a class="td-heading-self-link" href="#%e8%bf%9b%e7%a8%8b%e4%bc%98%e5%85%88%e7%ba%a7%e5%92%8c-nice-%e5%80%bc" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>进程优先级是一个数值，它通过动态的优先级和静态的优先级来决定进程被 CPU 处理的顺序。一个拥有更高进程优先级的进程拥有更大的机率得到处理器的处理。&lt;/p>
&lt;p>内核根据进程的行为和特性使用试探算法，动态地调整调高或调低动态优先级。一个用户进程可以通过使用进程的 nice 值间接改变静态优先级。一个拥有更高静态优先级的进程将会拥有更长的时间片（进程能在处理上运行多长时间）。&lt;/p>
&lt;p>Linux 支持从 19（最低优先级）到-20（最高优先级）的 nice 值。默认值为 0。把程序的 nice 值修改为负数（使进程的优先级更高），需要以 root 身份登陆或使用 su 命令以 root 身份执行。&lt;/p>
&lt;h1 id="上下文切换">上下文切换&lt;a class="td-heading-self-link" href="#%e4%b8%8a%e4%b8%8b%e6%96%87%e5%88%87%e6%8d%a2" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>在进程运行过程中，进程的运行信息被保存于处理器的寄存器和它的缓存中。正在执行的进程加载到寄存器中的数据集被称为上下文。为了切换进程，运行中进程的上下文将会被保存，接下来的运行进程的上下文将被被恢复到寄存器中。进程描述和内核模式堆栈的区域将会用来保存上下文。这个切换被称为上下文切换。过多的上下文切换是不受欢迎的，因为处理器每次都必须清空刷新寄存器和缓存，为新的进程制造空间。它可能会引起性能问题。&lt;/p>
&lt;p>下图说明了上下文切换如何工作。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/ld23ik/1616167507475-6f5a9385-f033-4c00-8344-2953197b973c.jpeg" alt="">&lt;/p>
&lt;h1 id="中断处理">中断处理&lt;a class="td-heading-self-link" href="#%e4%b8%ad%e6%96%ad%e5%a4%84%e7%90%86" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>中断处理是优先级最高的任务之一。中断通常由 I/O 设备产生，例如网络接口卡、键盘、磁盘控制器、串行适配器等等。中断处理器通过一个事件通知内核（例如，键盘输入、以太网帧到达等等）。它让内核中断进程的执行，并尽可能快地执行中断处理，因为一些设备需要快速的响应。它是系统稳定的关键。当一个中断信号到达内核，内核必须切换当前的进程到一个新的中断处理进程。这意味着中断引起了上下文切换，因此大量的中断将会引起性能的下降。&lt;/p>
&lt;p>在 Linux 的实现中，有两种类型的中断。硬中断是由请求响应的设备发出的（磁盘 I/O 中断、网络适配器中断、键盘中断、鼠标中断）。软中断被用于处理可以延迟的任务（TCP/IP 操作，SCSI 协议操作等等）。你可以在 &lt;code>/proc/interrupts&lt;/code> 文件中查看硬中断的相关信息。&lt;/p>
&lt;p>在多处理器的环境中，中断被每一个处理器处理。绑定中断到单个的物理处理中能提高系统的性能。更多的细节，请参阅 4.4.2，“CPU 的中断处理亲和力”。&lt;/p>
&lt;h1 id="进程的状态">进程的状态&lt;a class="td-heading-self-link" href="#%e8%bf%9b%e7%a8%8b%e7%9a%84%e7%8a%b6%e6%80%81" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>每一个进程拥有自己的状态，状态表示了进程当前在发生什么。LINUX 2.6 以后的内核中，在进程的执行期间进程的状态会发生改变，进程一般存在 7 种基础状态：D-不可中断睡眠、R-可执行、S-可中断睡眠、T-暂停态、t-跟踪态、X-死亡态、Z-僵尸态，这几种状态在 ps 命令的 man 手册中有对应解释。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>D&lt;/strong>＃不间断的睡眠（通常是 IO）&lt;/li>
&lt;li>&lt;strong>R&lt;/strong> ＃正在运行或可运行（在运行队列上）&lt;/li>
&lt;li>&lt;strong>S&lt;/strong> ＃可中断的睡眠（等待事件完成）&lt;/li>
&lt;li>&lt;strong>T&lt;/strong> ＃被作业控制信号停止&lt;/li>
&lt;li>&lt;strong>t&lt;/strong>＃在跟踪过程中被调试器停止&lt;/li>
&lt;li>&lt;strong>X&lt;/strong> ＃已死（永远都不会出现）&lt;/li>
&lt;li>&lt;strong>Z&lt;/strong> ＃已终止运行（“僵尸”）的进程，已终止但未由其父进程获得&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/ld23ik/1616167507456-ca89ed8d-d8a1-4cd6-96ab-c78372840f4a.jpeg" alt="">&lt;/p>
&lt;h2 id="d-task_uninterruptible不可中断睡眠态">D (TASK_UNINTERRUPTIBLE)，不可中断睡眠态&lt;a class="td-heading-self-link" href="#d-task_uninterruptible%e4%b8%8d%e5%8f%af%e4%b8%ad%e6%96%ad%e7%9d%a1%e7%9c%a0%e6%80%81" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>顾名思义，位于这种状态的进程处于睡眠中，并且不允许被其他进程或中断(异步信号)打断。因此这种状态的进程，是无法使用 kill -9 杀死的(kill 也是一种信号)，除非重启系统(没错，就是这么头硬)。不过这种状态一般由 I/O 等待(比如磁盘 I/O、网络 I/O、外设 I/O 等)引起，出现时间非常短暂，大多很难被 PS 或者 TOP 命令捕获(除非 I/O HANG 死)。SLEEP 态进程不会占用任何 CPU 资源。&lt;/p>
&lt;h2 id="r-task_running可执行态">R (TASK_RUNNING)，可执行态&lt;a class="td-heading-self-link" href="#r-task_running%e5%8f%af%e6%89%a7%e8%a1%8c%e6%80%81" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>这种状态的进程都位于 CPU 的可执行队列中，正在运行或者正在等待运行，即不是在上班就是在上班的路上。&lt;/p>
&lt;p>在此状态下，表示进程正在 CPU 中运行或在队列中等待运行（运行队列）。&lt;/p>
&lt;h2 id="s-task_interruptible可中断睡眠态">S (TASK_INTERRUPTIBLE)，可中断睡眠态&lt;a class="td-heading-self-link" href="#s-task_interruptible%e5%8f%af%e4%b8%ad%e6%96%ad%e7%9d%a1%e7%9c%a0%e6%80%81" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>不同于 D，这种状态的进程虽然也处于睡眠中，但是是允许被中断的。这种进程一般在等待某事件的发生（比如 socket 连接、信号量等），而被挂起。一旦这些时间完成，进程将被唤醒转为 R 态。如果不在高负载时期，系统中大部分进程都处于 S 态。SLEEP 态进程不会占用任何 CPU 资源。&lt;/p>
&lt;p>在此状态下，进程被暂停并等待一个某些条件状态的到达。如果一个进程处于 TASK_INTERRUPTIBLE 状态并接收到一个停止的信号，进程的状态将会被改变并中断操作。一个典型的 TASK_INTERRUPTIBLE 状态的进程的例子是一个进程等待键盘中断。&lt;/p>
&lt;h2 id="t--t-task_stopped--task_traced暂停-or-跟踪态">T &amp;amp; t (TASK_STOPPED &amp;amp; TASK_TRACED)，暂停 or 跟踪态&lt;a class="td-heading-self-link" href="#t--t-task_stopped--task_traced%e6%9a%82%e5%81%9c-or-%e8%b7%9f%e8%b8%aa%e6%80%81" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>这种两种状态的进程都处于运行停止的状态。不同之处是暂停态一般由于收到 SIGSTOP、SIGTSTP、SIGTTIN、SIGTTOUT 四种信号被停止，而跟踪态是由于进程被另一个进程跟踪引起(比如 gdb 断点）。暂停态进程会释放所有占用资源。&lt;/p>
&lt;p>TASK_STOPPED 在此状态下的进程被某些信号（如 SIGINT，SIGSTOP）暂停。进程正在等待通过一个信号恢复运行，例如 SIGCONT。&lt;/p>
&lt;h2 id="z-exit_zombietask_zombie-僵尸态">Z (EXIT_ZOMBIE/TASK_ZOMBIE), 僵尸态&lt;a class="td-heading-self-link" href="#z-exit_zombietask_zombie-%e5%83%b5%e5%b0%b8%e6%80%81" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>这种状态的进程实际上已经结束了，但是父进程还没有回收它的资源（比如进程的描述符、PID 等）。僵尸态进程会释放除进程入口之外的所有资源。&lt;/p>
&lt;p>当一个进程调用 exit()系统调用退出后，它的父进程应该知道该进程的终止。处于 TASK_ZOMBIE 状态的进程会等待其父进程通知其释放所有的数据结构。&lt;/p>
&lt;p>当一个进程接收到一个信号而终止，它在结束自己之前，通常需要一些时间来结束所有的任务（例如关闭打开的文件）。在这个通常非常短暂的时间内，该进程就是一个僵尸进程。&lt;/p>
&lt;p>进程已经完成所有的关闭任务后，它会向父进程报告其即将终止。有些时候，一个僵尸进程不能把自己终止，这将会引导它的状态显示为 z（zombie）。&lt;/p>
&lt;p>使用 kill 命令来关闭这样的一个进程是不可能的，因为该进程已经被认为已经死掉了。如果你不能清除僵尸进程，你可以结束其父进程，然后僵尸进程也随之消失。但是，如果父进程为 init 进程，你不能结束它。init 进程是一个非常重要的进程，因此可能需要重启系统来清除僵尸进程。&lt;/p>
&lt;h2 id="x-exit_dead-死亡态">X (EXIT_DEAD), 死亡态&lt;a class="td-heading-self-link" href="#x-exit_dead-%e6%ad%bb%e4%ba%a1%e6%80%81" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>进程的真正结束态，这种状态一般在正常系统中捕获不到。&lt;/p>
&lt;h1 id="进程内存段">进程内存段&lt;a class="td-heading-self-link" href="#%e8%bf%9b%e7%a8%8b%e5%86%85%e5%ad%98%e6%ae%b5" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>进程使用其自身的内存区域来执行工作。工作的变化根据情况和进程的使用而决定。进程可以拥有不同的工作量特性和不同的数据大小需求。进程必须处理各种数据大小。为了满足需求，Linux 内核为每个进程使用动态申请内存的机制。进程内存分配的数据结构如图 1-7 所示。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/ld23ik/1616167507458-2bbc9553-910c-4d66-9ad1-8f45893277da.jpeg" alt="">&lt;/p>
&lt;p>图 1-7 进程地址空间&lt;/p>
&lt;p>进程内存区由以下几部分组成：&lt;/p>
&lt;p>Text 段&lt;/p>
&lt;p>该区域用于存储运行代码。&lt;/p>
&lt;p>Data 段&lt;/p>
&lt;p>数据段包括三个区域。&lt;/p>
&lt;p>– Data：该区域存储已被初始化的数据，如静态变量。&lt;/p>
&lt;p>– BSS：该区域存储初始化为 0 的数据。数据被初始化为 0。&lt;/p>
&lt;p>– Heap：该区域用于根据需求使用 malloc()动态申请的内存。堆向高地址方向增长。&lt;/p>
&lt;p>Stack 段&lt;/p>
&lt;p>该区域用于存储局部变量、函数参数和返回函数的地址。栈向低地址方向增长。&lt;/p>
&lt;p>用户进程的地址空间内存分布可以使用 pmap 命令来查看。你可以使用 ps 命令来查看内存段的大小。可以参阅 2.3.10 的“pmap”，“ps 和 pstree”。&lt;/p>
&lt;h1 id="进程的-exit-code退出码">进程的 exit code(退出码)&lt;a class="td-heading-self-link" href="#%e8%bf%9b%e7%a8%8b%e7%9a%84-exit-code%e9%80%80%e5%87%ba%e7%a0%81" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>在 Linux 系统中，程序可以在执行终止后传递值给其父进程，这个值被称为 &lt;strong>exit code(退出码)&lt;/strong> 或 **exit status(退出状态)**或 &lt;strong>reture status(返回码)&lt;/strong>。在 POSIX 系统中，惯例做法是当程序成功执行时 &lt;strong>exit code 为 0&lt;/strong>，当程序执行失败时 &lt;strong>exit code 非 0&lt;/strong>。&lt;/p>
&lt;p>传递状态码为何重要？如果你在命令行脚本上下文中查看状态码，答案显而易见。任何有用的脚本，它将不可避免地要么被其他脚本所使用，要么被 bash 单行脚本包裹所使用。特别是脚本被用来与自动化工具 SaltStack 或者监测工具 Nagios 配合使用。这些工具会执行脚本并检查它的状态，来确定脚本是否执行成功。&lt;/p>
&lt;p>其中最重要的原因是，即使你不定义状态码，它仍然存在于你的脚本中。如果你不定义恰当的退出码，执行失败的脚本可能会返回成功的状态，这样会导致问题，问题大小取决于你的脚本做了什么。&lt;/p>
&lt;p>Linux 提供了一个专门的变量$?来保存上个已执行命令的退出状态码。&lt;/p>
&lt;p>对于需要进行检查的命令，必须在其运行完毕后立刻查看或使用$?变量，它的值会变成由 shell 所执行的最后一条命令的退出状态码。&lt;/p>
&lt;p>一个成功结束的命令的退出状态码是 0，如果一个命令结束时有错误，退出状态码就是一个正数值（1-255）。&lt;/p>
&lt;p>Linux 上执行 exit 可使 shell 以指定的状态值退出。若不设置状态值参数，则 shell 以预设值退出。状态值 0 代表执行成功，其他值代表执行失败。exit 也可用在 script，离开正在执行的 script，回到 shell。&lt;/p>
&lt;p>Linux 错误退出状态码没有什么标准可循，但有一些可用的参考。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/ld23ik/1616167507500-9f1aab01-171b-4ece-a6fa-9f576852a403.webp" alt="">&lt;/p>
&lt;p>关于具体的服务，相应的退出码，由开发者代码决定。&lt;/p>
&lt;p>&lt;strong>Linux 进程退出码&lt;/strong>&lt;/p>
&lt;p>&lt;a href="https://jin-yang.github.io/post/linux-process-exit-code-introduce.html">https://jin-yang.github.io/post/linux-process-exit-code-introduce.html&lt;/a>&lt;/p>
&lt;p>&lt;strong>Linux 退出状态码及 exit 命令&lt;/strong>&lt;/p>
&lt;p>&lt;a href="https://www.cnblogs.com/01-single/p/7206664.html">https://www.cnblogs.com/01-single/p/7206664.html&lt;/a>&lt;/p>
&lt;p>&lt;strong>理解 Exit Code 并学会如何在 Bash 脚本中使用&lt;/strong>&lt;/p>
&lt;p>&lt;a href="http://blog.jayxhj.com/2016/02/understanding-exit-codes-and-how-to-use-them-in-bash-scripts">http://blog.jayxhj.com/2016/02/understanding-exit-codes-and-how-to-use-them-in-bash-scripts&lt;/a>&lt;/p>
&lt;p>&lt;strong>Appendix E. Exit Codes With Special Meanings&lt;/strong>&lt;/p>
&lt;p>&lt;a href="http://www.tldp.org/LDP/abs/html/exitcodes.html">http://www.tldp.org/LDP/abs/html/exitcodes.html&lt;/a>&lt;/p>
&lt;p>&lt;strong>What is the authoritative list of Docker Run exit codes?&lt;/strong>&lt;/p>
&lt;p>&lt;a href="https://stackoverflow.com/questions/31297616/what-is-the-authoritative-list-of-docker-run-exit-codes">https://stackoverflow.com/questions/31297616/what-is-the-authoritative-list-of-docker-run-exit-codes&lt;/a>&lt;/p>
&lt;p>&lt;strong>Identifying Exit Codes and their meanings&lt;/strong>&lt;/p>
&lt;p>&lt;a href="https://support.circleci.com/hc/en-us/articles/360002341673-Identifying-Exit-Codes-and-their-meanings">https://support.circleci.com/hc/en-us/articles/360002341673-Identifying-Exit-Codes-and-their-meanings&lt;/a>&lt;/p>
&lt;p>&lt;strong>OpenShift Exit Status Codes&lt;/strong>&lt;/p>
&lt;p>&lt;a href="https://access.redhat.com/documentation/en-US/OpenShift_Online/2.0/html/Cartridge_Specification_Guide/Exit_Status_Codes.html">https://access.redhat.com/documentation/en-US/OpenShift_Online/2.0/html/Cartridge_Specification_Guide/Exit_Status_Codes.html&lt;/a>&lt;/p></description></item><item><title>Docs: chroot</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Process/Chroot/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Process/Chroot/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Chroot">Wiki, chroot&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://man7.org/linux/man-pages/man2/chroot.2.html">Manual(手册)，chroot(2)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Change root(改变根，简称 Chroot)&lt;/strong> 是 &lt;a href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Operating%20system/Unix-like%20OS/Unix-like%20OS.md">Unix-like OS&lt;/a> 的一种操作，用于更改对当前正在运行的进程及其子进程展现出来的 &lt;code>/&lt;/code> 目录。在这种修改过的环境中运行的程序无法访问指定目录之外的文件。&lt;/p>
&lt;p>Chroot 的意思是改变根路径的位置(Linux 系统中以 &lt;code>/&lt;/code> 为根目录位置，但是对于执行 Chroot 的用户或者程序来说，是 Chroot 后 PATH 的位置是新的根目录位置)，比如 Telnet，ssh，如果都定义了 Chroot(PATH)规则，那么远程登录的用户将无法访问到该 linux 系统中除了定义的 PATH 外的其余目录&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># pwd&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/var/lib/docker/overlay2/72a3b770bf98493a90e2e335adbdc9f92eeb18f19044136f74c5c9138cb13304/merged
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># ls&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>bin dev etc home lib LICENSE NOTICE npm_licenses.tar.bz2 proc prometheus root sys tmp usr var
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># ls /root&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>backup downloads go nohup.out p.pcap projects scripts snap tmp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># chroot . /bin/sh&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/ &lt;span style="color:#8f5902;font-style:italic"># pwd&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/ &lt;span style="color:#8f5902;font-style:italic"># ls /root&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/ &lt;span style="color:#8f5902;font-style:italic">#&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面例子中，我们通过 chroot 程序进入了以 &lt;code>/var/lib/docker/overlay2/72a3b770bf98493a90e2e335adbdc9f92eeb18f19044136f74c5c9138cb13304/merged/&lt;/code> 目录作为 &lt;code>/&lt;/code> 目录的空间中。这就像是将本地文件系统划分了一块空间给 Chroot 后的使用者。&lt;/p>
&lt;p>Chroot 功能主要依赖于 chroot &lt;a href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/System%20Call/System%20Call.md">System Call&lt;/a> 实现&lt;/p>
&lt;h1 id="cli">CLI&lt;a class="td-heading-self-link" href="#cli" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="chroot">chroot&lt;a class="td-heading-self-link" href="#chroot" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="syntax语法">Syntax(语法)&lt;a class="td-heading-self-link" href="#syntax%e8%af%ad%e6%b3%95" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://man7.org/linux/man-pages/man1/chroot.1.html">Manual(手册)，chroot(1)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>chroot [OPTION] NEWROOT [COMMAND [ARG]&amp;hellip;]&lt;/strong>&lt;/p>
&lt;p>COMMAND 是指这次执行命令过程中，将要进入的目标后执行的命令，通常是 &lt;code>$SHELL&lt;/code>，也就是当前环境所使用的 SHELL 的命令。&lt;/p>
&lt;p>&lt;strong>OPTIONS&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&amp;ndash;userspec=USER:GROUP&lt;/strong> # 指定要使用的用户和组的 ID 或 NAME。&lt;/li>
&lt;/ul></description></item><item><title>Docs: D-Bus</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Process/D-Bus/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Process/D-Bus/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>D-Bus&lt;/strong> 是一个 &lt;strong>IPC&lt;/strong> 及 &lt;strong>RPC&lt;/strong> 机制，可以让多个不同的计算机进程在同一台电脑上同时进行通信。&lt;/p></description></item><item><title>Docs: Process info</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Process/Process-info/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Process/Process-info/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Linux 中有多种途径可以获取进程信息&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#/proc/PID/">/proc/PID/&lt;/a> 目录&lt;/li>
&lt;li>etc.&lt;/li>
&lt;/ul>
&lt;h1 id="procpid">/proc/PID/&lt;a class="td-heading-self-link" href="#procpid" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;a href="https://github.com/torvalds/linux/blob/v5.19/Documentation/filesystems/proc.rst#11-process-specific-subdirectories">https://github.com/torvalds/linux/blob/v5.19/Documentation/filesystems/proc.rst#11-process-specific-subdirectories&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>[!Tip]
这下面的文件或目录的用途和信息，都有对应的 Manual，Manual 的名字是 proc_pid_XXX 的形式。e.g. stat 文件的 Manual 是 proc_pid_stat(5)&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>每个进程在 /proc/ 目录下有一个名为自己进程号的目录，该目录记载了该进程相关的 proc 信息。&lt;/strong>&lt;/p>
&lt;h2 id="cgroup---进程所属的控制组信息">./cgroup - 进程所属的控制组信息&lt;a class="td-heading-self-link" href="#cgroup---%e8%bf%9b%e7%a8%8b%e6%89%80%e5%b1%9e%e7%9a%84%e6%8e%a7%e5%88%b6%e7%bb%84%e4%bf%a1%e6%81%af" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>详见 &lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization/2.CGroup/2.CGroup.md">Cgroup&lt;/a>&lt;/p>
&lt;h2 id="cmdline---该进程的完整命令">./cmdline - 该进程的完整命令&lt;a class="td-heading-self-link" href="#cmdline---%e8%af%a5%e8%bf%9b%e7%a8%8b%e7%9a%84%e5%ae%8c%e6%95%b4%e5%91%bd%e4%bb%a4" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>除非进程是僵尸和内核态进程。在后一种情况下，这个文件中什么也没有：也就是说，对这个文件的读取将返回 0 个字符。命令行参数在这个文件中以一组字符串的形式出现，用空字节(&amp;rsquo;\0&amp;rsquo;)隔开，在最后一个字符串之后还有一个空字节。&lt;/li>
&lt;li>把这个文件看作是进程希望你看到的命令行。&lt;/li>
&lt;/ul>
&lt;h2 id="exe---具有该-pid-的实际运行的程序的绝对路径是一个符号链接">./exe - 具有该 PID 的实际运行的程序的绝对路径。是一个符号链接&lt;a class="td-heading-self-link" href="#exe---%e5%85%b7%e6%9c%89%e8%af%a5-pid-%e7%9a%84%e5%ae%9e%e9%99%85%e8%bf%90%e8%a1%8c%e7%9a%84%e7%a8%8b%e5%ba%8f%e7%9a%84%e7%bb%9d%e5%af%b9%e8%b7%af%e5%be%84%e6%98%af%e4%b8%80%e4%b8%aa%e7%ac%a6%e5%8f%b7%e9%93%be%e6%8e%a5" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="fd---其中包含-pid-进程打开的每个文件的一个条目">./fd/ - 其中包含 PID 进程打开的每个文件的一个条目&lt;a class="td-heading-self-link" href="#fd---%e5%85%b6%e4%b8%ad%e5%8c%85%e5%90%ab-pid-%e8%bf%9b%e7%a8%8b%e6%89%93%e5%bc%80%e7%9a%84%e6%af%8f%e4%b8%aa%e6%96%87%e4%bb%b6%e7%9a%84%e4%b8%80%e4%b8%aa%e6%9d%a1%e7%9b%ae" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>该条目由其文件描述符命名，并且是指向实际文件的符号链接。 因此，0 是标准输入，1 是标准输出，2 是标准错误，依此类推。详解见：&lt;a href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Filesystem/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/File%20Descriptor(%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6).md">File Descriptor(文件描述符)&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="fdinfo---其中包含-pid-进程打开的每个文件的一个条目该条目由其文件描述符命名">./fdinfo/ - 其中包含 PID 进程打开的每个文件的一个条目，该条目由其文件描述符命名&lt;a class="td-heading-self-link" href="#fdinfo---%e5%85%b6%e4%b8%ad%e5%8c%85%e5%90%ab-pid-%e8%bf%9b%e7%a8%8b%e6%89%93%e5%bc%80%e7%9a%84%e6%af%8f%e4%b8%aa%e6%96%87%e4%bb%b6%e7%9a%84%e4%b8%80%e4%b8%aa%e6%9d%a1%e7%9b%ae%e8%af%a5%e6%9d%a1%e7%9b%ae%e7%94%b1%e5%85%b6%e6%96%87%e4%bb%b6%e6%8f%8f%e8%bf%b0%e7%ac%a6%e5%91%bd%e5%90%8d" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>该目录中的文件仅由进程所有者读取。 可以读取每个文件的内容以获得有关相应文件描述符的信息。 内容取决于相应文件描述符所引用的文件类型。详解见：&lt;a href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Filesystem/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/File%20Descriptor(%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6).md">File Descriptor(文件描述符)&lt;/a>&lt;/p>
&lt;h2 id="maps---进程的内存映射信息">./maps - 进程的内存映射信息&lt;a class="td-heading-self-link" href="#maps---%e8%bf%9b%e7%a8%8b%e7%9a%84%e5%86%85%e5%ad%98%e6%98%a0%e5%b0%84%e4%bf%a1%e6%81%af" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># cat /proc/1751/maps&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>00400000-00401000 r-xp &lt;span style="color:#0000cf;font-weight:bold">00000000&lt;/span> fd:01 &lt;span style="color:#0000cf;font-weight:bold">100897359&lt;/span> /opt/java/jdk1.8.0_231/bin/java
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>00600000-00601000 r--p &lt;span style="color:#0000cf;font-weight:bold">00000000&lt;/span> fd:01 &lt;span style="color:#0000cf;font-weight:bold">100897359&lt;/span> /opt/java/jdk1.8.0_231/bin/java
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>00601000-00602000 rw-p &lt;span style="color:#0000cf;font-weight:bold">00001000&lt;/span> fd:01 &lt;span style="color:#0000cf;font-weight:bold">100897359&lt;/span> /opt/java/jdk1.8.0_231/bin/java
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>01542000-01563000 rw-p &lt;span style="color:#0000cf;font-weight:bold">00000000&lt;/span> 00:00 &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>heap&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>6c7c00000-6e0100000 rw-p &lt;span style="color:#0000cf;font-weight:bold">00000000&lt;/span> 00:00 &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>6e0100000-76d400000 ---p &lt;span style="color:#0000cf;font-weight:bold">00000000&lt;/span> 00:00 &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>76d400000-797580000 rw-p &lt;span style="color:#0000cf;font-weight:bold">00000000&lt;/span> 00:00 &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>797580000-7c0000000 ---p &lt;span style="color:#0000cf;font-weight:bold">00000000&lt;/span> 00:00 &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>7c0000000-7c18a0000 rw-p &lt;span style="color:#0000cf;font-weight:bold">00000000&lt;/span> 00:00 &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>7c18a0000-800000000 ---p &lt;span style="color:#0000cf;font-weight:bold">00000000&lt;/span> 00:00 &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>address 字段表示进程中内存映射占据的地址空间，格式为十六进制的 BeginAddress-EndAddress。&lt;/li>
&lt;li>perms 字段表示权限，共四个字符，依次为 rwxs 或 rwxp，其中 r 为 read，w 为 write，x 为 execute，s 为- -shared，p 为 private，对应位置没有权限时用一个短横线代替。&lt;/li>
&lt;li>offset 字段表示内存映射地址在文件中的字节偏移量。&lt;/li>
&lt;li>dev 字段表示 device，格式为 major:minor。&lt;/li>
&lt;li>inode 字段表示对应 device 的 inode，0 表示内存映射区域没有关联的 inode，如未初始化的 BSS 数据段就是这种情况。&lt;/li>
&lt;li>pathname 字段用于内存映射的文件，对于 ELF 格式的文件来说，可以通过命令 readelf -l 查看 ELF 程序头部的 Offset 字段，与 maps 文件的 offset 字段作对比。pathname 可能为空，表示匿名映射，这种情况下难以调试进程，如 gdb、strace 等命令。除了正常的文件路径之外，pathname 还可能是下面的值：
&lt;ul>
&lt;li>[stack]     初始进程（主线程）的 stack&lt;/li>
&lt;li>[stack:&amp;lt;tid&amp;gt;]     线程 ID 为 tid 的 stack.  对应于/proc/[pid]/task/[tid]/路径&lt;/li>
&lt;li>[vdso]    Virtual Dynamically linked Shared Object&lt;/li>
&lt;li>[heap]     进程的 heap&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="mountinfo---进程的-mount-namespace-的信息">./mountinfo - 进程的 mount namespace 的信息&lt;a class="td-heading-self-link" href="#mountinfo---%e8%bf%9b%e7%a8%8b%e7%9a%84-mount-namespace-%e7%9a%84%e4%bf%a1%e6%81%af" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>该文件比 /proc/PID/mounts 的信息更全免并修复了一些问题，适用于云原生时代的大量 mount namesapces。&lt;/p>
&lt;p>该文件中每一行都是一条挂载信息，每条挂载信息由如下几个部分组成：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>挂载 ID&lt;/th>
&lt;th>父 ID&lt;/th>
&lt;th>major:minor&lt;/th>
&lt;th>root&lt;/th>
&lt;th>mount point&lt;/th>
&lt;th>mount options&lt;/th>
&lt;th>optional fields&lt;/th>
&lt;th>separator&lt;/th>
&lt;th>filesystem type&lt;/th>
&lt;th>mount source&lt;/th>
&lt;th>super options&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>36&lt;/td>
&lt;td>35&lt;/td>
&lt;td>98:00:00&lt;/td>
&lt;td>/mnt1&lt;/td>
&lt;td>/mnt2&lt;/td>
&lt;td>rw,noatime&lt;/td>
&lt;td>master:1&lt;/td>
&lt;td>-&lt;/td>
&lt;td>ext3&lt;/td>
&lt;td>/dev/root&lt;/td>
&lt;td>rw,errors=continue&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>mount ID # 挂载的唯一 ID&lt;/li>
&lt;li>parent ID # the ID of the parent mount (or of self for the root of this mount namespace&amp;rsquo;s mount tree).
&lt;ul>
&lt;li>If a new mount is stacked on top of a previous existing mount (so that it hides the existing mount) at pathname P, then the parent of the new mount is the previous mount at that location. Thus, when looking at all the mounts stacked at a particular location, the top-most mount is the one that is not the parent of any other mount at the same location. (Note, however, that this top-most mount will be accessible only if the longest path subprefix of P that is a mount point is not itself hidden by a stacked mount.)&lt;/li>
&lt;li>If the parent mount lies outside the process&amp;rsquo;s root directory (see chroot(2)), the ID shown here won&amp;rsquo;t have a corresponding record in mountinfo whose mount ID (field 1) matches this parent mount ID (because mounts that lie outside the process&amp;rsquo;s root directory are not shown in mountinfo). As a special case of this point, the process&amp;rsquo;s root mount masy have a parent mount (for the initramfs filesystem) that lies outside the process&amp;rsquo;s root directory, and an entry for that mount will not appear in mountinfo.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>major:minor # the value of st_dev for files on this filesystem (see &lt;a href="https://man7.org/linux/man-pages/man2/stat.2.html">stat(2)&lt;/a>).&lt;/li>
&lt;li>root # the pathname of the directory in the filesystem which forms the root of this mount.&lt;/li>
&lt;li>mount point # 挂载点 the pathname of the mount point relative to the process&amp;rsquo;s root directory.&lt;/li>
&lt;li>mount options # 挂载选项 per-mount options (see mount(2)).&lt;/li>
&lt;li>optional fields # zero or more fields of the form &amp;ldquo;tag[:value]&amp;rdquo;; see below.&lt;/li>
&lt;li>separator # the end of the optional fields is marked by a single hyphen.&lt;/li>
&lt;li>filesystem type # 挂载的文件系统类型 the filesystem type in the form &amp;ldquo;type[.subtype]&amp;rdquo;.&lt;/li>
&lt;li>mount source # filesystem-specific information or &amp;ldquo;none&amp;rdquo;.&lt;/li>
&lt;li>super options # 超级快选项。per-superblock options (see mount(2)).&lt;/li>
&lt;/ul>
&lt;h2 id="root---每个进程的文件系统的--目录">./root/ - 每个进程的文件系统的 &lt;code>/&lt;/code> 目录&lt;a class="td-heading-self-link" href="#root---%e6%af%8f%e4%b8%aa%e8%bf%9b%e7%a8%8b%e7%9a%84%e6%96%87%e4%bb%b6%e7%b3%bb%e7%bb%9f%e7%9a%84--%e7%9b%ae%e5%bd%95" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>/proc/PID/root/ 目录是一个指向进程根目录的软链接，效果如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># ls -l /proc/1192/root&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lrwxrwxrwx &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> root root &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> Nov &lt;span style="color:#0000cf;font-weight:bold">11&lt;/span> 10:42 root -&amp;gt; /
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>该目录通过 chroot(2) 系统调用设置。&lt;/p>
&lt;p>该目录常被用来查看容器内的文件系统。与容器的 Merged 不同，该目录会包含所有挂载，这些挂载信息，来源于 /proc/PID/mountinfo 文件。&lt;/p>
&lt;h2 id="smaps---每个进程的内存映射的使用信息">./smaps - 每个进程的内存映射的使用信息&lt;a class="td-heading-self-link" href="#smaps---%e6%af%8f%e4%b8%aa%e8%bf%9b%e7%a8%8b%e7%9a%84%e5%86%85%e5%ad%98%e6%98%a0%e5%b0%84%e7%9a%84%e4%bd%bf%e7%94%a8%e4%bf%a1%e6%81%af" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>仅当内核选项 CONFIG_PROC_PAGE_MONITOR 配置了之后，才存在该文件。&lt;code>pmap&lt;/code> 命令会读取该文件，并以人类易读的形式显示信息。&lt;/p>
&lt;p>进程的每一个映射，都有其对应的信息，文件格式如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>00400000-00aa4000 r-xp &lt;span style="color:#0000cf;font-weight:bold">00000000&lt;/span> fc:01 &lt;span style="color:#0000cf;font-weight:bold">1710957&lt;/span> /bin/node_exporter
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Size: &lt;span style="color:#0000cf;font-weight:bold">6800&lt;/span> kB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>KernelPageSize: &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> kB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>MMUPageSize: &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> kB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Rss: &lt;span style="color:#0000cf;font-weight:bold">5852&lt;/span> kB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>......
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>00aa4000-01077000 r--p 006a4000 fc:01 &lt;span style="color:#0000cf;font-weight:bold">1710957&lt;/span> /bin/node_exporter
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Size: &lt;span style="color:#0000cf;font-weight:bold">5964&lt;/span> kB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>KernelPageSize: &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> kB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>MMUPageSize: &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> kB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Rss: &lt;span style="color:#0000cf;font-weight:bold">5508&lt;/span> kB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>......
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>7fe089fd7000-7fe08c708000 rw-p &lt;span style="color:#0000cf;font-weight:bold">00000000&lt;/span> 00:00 &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>......
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>7fe08c708000-7fe09c888000 ---p &lt;span style="color:#0000cf;font-weight:bold">00000000&lt;/span> 00:00 &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>......
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>7fe09c888000-7fe09c889000 rw-p &lt;span style="color:#0000cf;font-weight:bold">00000000&lt;/span> 00:00 &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>......
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>......
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ffffffffff600000-ffffffffff601000 --xp &lt;span style="color:#0000cf;font-weight:bold">00000000&lt;/span> 00:00 &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>vsyscall&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>......
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>该进程的映射信息与 /proc/PID/maps 文件中的内容相同。该文件的每一个映射信息下面的都包含内存使用量&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Size&lt;/strong> # 该映射的内存大小
&lt;ul>
&lt;li>通过 &lt;code>cat smaps| grep ^Size | awk '{print $2}' | awk '{sum += $1};END {print sum}' &amp;amp;&amp;amp; cat status | grep VmSize&lt;/code> 命令，可以看到 smaps 文件中的 Size 与 status 文件中的 VmSize 是相同的&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Rss&lt;/strong> #&lt;/li>
&lt;li>&lt;strong>Pss&lt;/strong> #&lt;/li>
&lt;li>&amp;hellip;&amp;hellip;&lt;/li>
&lt;/ul>
&lt;h2 id="smaps_rollup---汇总-smaps-文件中每个映射的内存信息为一条结果">./smaps_rollup - 汇总 smaps 文件中每个映射的内存信息为一条结果&lt;a class="td-heading-self-link" href="#smaps_rollup---%e6%b1%87%e6%80%bb-smaps-%e6%96%87%e4%bb%b6%e4%b8%ad%e6%af%8f%e4%b8%aa%e6%98%a0%e5%b0%84%e7%9a%84%e5%86%85%e5%ad%98%e4%bf%a1%e6%81%af%e4%b8%ba%e4%b8%80%e6%9d%a1%e7%bb%93%e6%9e%9c" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>smaps_rollup 文件中的内容，是将 smaps 文件中每个映射的内存信息汇总之后的结果&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>root@hw-cloud-xngy-jump-server-linux-2 /proc/1185&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># cat smaps_rollup&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>00400000-7ffc50bfa000 ---p &lt;span style="color:#0000cf;font-weight:bold">00000000&lt;/span> 00:00 &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>rollup&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Rss: &lt;span style="color:#0000cf;font-weight:bold">21952&lt;/span> kB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Pss: &lt;span style="color:#0000cf;font-weight:bold">21948&lt;/span> kB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Pss_Anon: &lt;span style="color:#0000cf;font-weight:bold">10372&lt;/span> kB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Pss_File: &lt;span style="color:#0000cf;font-weight:bold">11576&lt;/span> kB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Pss_Shmem: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> kB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Shared_Clean: &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> kB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Shared_Dirty: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> kB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Private_Clean: &lt;span style="color:#0000cf;font-weight:bold">11576&lt;/span> kB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Private_Dirty: &lt;span style="color:#0000cf;font-weight:bold">10372&lt;/span> kB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Referenced: &lt;span style="color:#0000cf;font-weight:bold">21952&lt;/span> kB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Anonymous: &lt;span style="color:#0000cf;font-weight:bold">10372&lt;/span> kB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LazyFree: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> kB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>AnonHugePages: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> kB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ShmemPmdMapped: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> kB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>FilePmdMapped: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> kB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Shared_Hugetlb: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> kB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Private_Hugetlb: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> kB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Swap: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> kB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>SwapPss: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> kB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Locked: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> kB
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过 awk 计算 Rss 的大小，可以看到 smaps 文件中的聚合值与 smaps_rollup 的值一样&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>root@hw-cloud-xngy-jump-server-linux-2 /proc/1185&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># cat smaps| grep ^Rss | awk &amp;#39;{print $2}&amp;#39; | awk &amp;#39;{sum += $1};END {print sum}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#0000cf;font-weight:bold">21304&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>root@hw-cloud-xngy-jump-server-linux-2 /proc/1185&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># cat smaps_rollup&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>00400000-7ffc50bfa000 ---p &lt;span style="color:#0000cf;font-weight:bold">00000000&lt;/span> 00:00 &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>rollup&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Rss: &lt;span style="color:#0000cf;font-weight:bold">21304&lt;/span> kB
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="statm---进程的内存使用情况信息">./statm - 进程的内存使用情况信息&lt;a class="td-heading-self-link" href="#statm---%e8%bf%9b%e7%a8%8b%e7%9a%84%e5%86%85%e5%ad%98%e4%bd%bf%e7%94%a8%e6%83%85%e5%86%b5%e4%bf%a1%e6%81%af" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>该文件中只有一行，每列信息以空格分割，共 7 列&lt;/p>
&lt;ul>
&lt;li>size # 进程使用的内存。等同于 status 文件中的 VmSize，man 手册里这个描述与实际不符&lt;/li>
&lt;li>resident # 进程的 RSS。等同于 status 文件中的 VmRSS，man 手册里这个描述与实际不符&lt;/li>
&lt;li>shared # 与其他进程共享的内存。等同于 status 文件中的 RssFile + RssShmem，man 手册里这个描述与实际不符&lt;/li>
&lt;/ul>
&lt;p>由于内核内部可伸缩性优化，文件中的一些值并不准确，如果需要准确的值，可以查看 smaps 和 smaps_rollup 文件。&lt;/p>
&lt;h2 id="stat---进程的状态">./stat - 进程的状态&lt;a class="td-heading-self-link" href="#stat---%e8%bf%9b%e7%a8%8b%e7%9a%84%e7%8a%b6%e6%80%81" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://man7.org/linux/man-pages/man5/proc_pid_stat.5.html">https://man7.org/linux/man-pages/man5/proc_pid_stat.5.html&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://stackoverflow.com/questions/39066998/what-are-the-meaning-of-values-at-proc-pid-stat">https://stackoverflow.com/questions/39066998/what-are-the-meaning-of-values-at-proc-pid-stat&lt;/a>&lt;/p>
&lt;ol start="22">
&lt;li>&lt;strong>starttime&lt;/strong> # 系统 boot 成功后，进程的时间。该值以时钟周期表示。&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>starttime 除以 时钟频率（&lt;code>getconf -a | grep CLK_TCK&lt;/code>），加上系统启动时间（&lt;code>cat /proc/stat | grep btime&lt;/code>）。可以计算出进程的启动时间（Unix 时间戳格式）&lt;/p>
&lt;/blockquote>
&lt;ol start="23">
&lt;li>&lt;strong>vsize&lt;/strong> # Virtual memory size in bytes.&lt;/li>
&lt;li>&lt;strong>rss&lt;/strong> # Resident Set Size. 进程在实内存中拥有的页数。 这只是计入文本、数据或堆栈空间的页面。 这不包括尚未按需加载或换出的页面。 该值不准确；请参阅下面的 /proc/PID/statm。&lt;/li>
&lt;/ol>
&lt;p>计算进程启动时间的脚本&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 获取进程的 PID&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">pid&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">$1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 获取进程的 starttime（以时钟周期表示）&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">starttime&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>cat /proc/&lt;span style="color:#000">$pid&lt;/span>/stat &lt;span style="color:#000;font-weight:bold">|&lt;/span> awk &lt;span style="color:#4e9a06">&amp;#39;{print $22}&amp;#39;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 获取系统的时钟频率（CLK_TCK）&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">clk_tck&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>getconf CLK_TCK&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 获取系统的启动时间（btime）&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">btime&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>cat /proc/stat &lt;span style="color:#000;font-weight:bold">|&lt;/span> grep btime &lt;span style="color:#000;font-weight:bold">|&lt;/span> awk &lt;span style="color:#4e9a06">&amp;#39;{print $2}&amp;#39;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 计算进程的启动时间（Unix 时间戳）&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">starttime_seconds&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>&lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000">$starttime&lt;/span>&lt;span style="color:#4e9a06"> / &lt;/span>&lt;span style="color:#000">$clk_tck&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> bc&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">process_start_time&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>&lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000">$btime&lt;/span>&lt;span style="color:#4e9a06"> + &lt;/span>&lt;span style="color:#000">$starttime_seconds&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> bc&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 输出进程的启动时间（Unix 时间戳）&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Process start time (Unix timestamp): &lt;/span>&lt;span style="color:#000">$process_start_time&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 如果需要转换为可读的时间格式，可以使用 date 命令&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Process start time (readable format): &lt;/span>&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>date -d @&lt;span style="color:#000">$process_start_time&lt;/span>&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="status---以人类可读形式呈现的进程状态">./status - 以人类可读形式呈现的进程状态&lt;a class="td-heading-self-link" href="#status---%e4%bb%a5%e4%ba%ba%e7%b1%bb%e5%8f%af%e8%af%bb%e5%bd%a2%e5%bc%8f%e5%91%88%e7%8e%b0%e7%9a%84%e8%bf%9b%e7%a8%8b%e7%8a%b6%e6%80%81" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://man7.org/linux/man-pages/man5/proc_pid_status.5.html">https://man7.org/linux/man-pages/man5/proc_pid_status.5.html&lt;/a>&lt;/p>
&lt;p>包括但不限于 PID、该进程 CPU 与 Memory 的使用情况、等等。在这个文件中，包含了 ./stat 和 ./statm 文件中的许多信息。&lt;/p>
&lt;ul>
&lt;li>Name # 进程名称&lt;/li>
&lt;li>State # 进程状况&lt;/li>
&lt;li>VmSize # 进程申请的总内存。与 statm 文件中第一个字段的值相同&lt;/li>
&lt;li>VmRSS # 也就是进程当前时刻占用的物理内存。与 statm 文件中第二个字段的值相同&lt;/li>
&lt;li>etc.&lt;/li>
&lt;/ul>
&lt;h2 id="tasktid---进程的线程信息目录">./task/TID/ - 进程的线程信息目录&lt;a class="td-heading-self-link" href="#tasktid---%e8%bf%9b%e7%a8%8b%e7%9a%84%e7%ba%bf%e7%a8%8b%e4%bf%a1%e6%81%af%e7%9b%ae%e5%bd%95" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>该目录中是进程的每个线程的信息，目录名称(TID)为线程 ID&lt;/p></description></item><item><title>Docs: 进程、线程、线程池</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Process/%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E7%BA%BF%E7%A8%8B%E6%B1%A0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Process/%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E7%BA%BF%E7%A8%8B%E6%B1%A0/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/qE3zs4JMDj1qHvlb3rydOQ">公众号-码农的荒岛求生，看完这篇文章还不懂高并发中的线程与线程池你来打我&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="一切要从-cpu-说起">一切要从 CPU 说起&lt;a class="td-heading-self-link" href="#%e4%b8%80%e5%88%87%e8%a6%81%e4%bb%8e-cpu-%e8%af%b4%e8%b5%b7" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>你可能会有疑问，讲多线程为什么要从 CPU 说起呢？原因很简单，&lt;strong>在这里没有那些时髦的概念，你可以更加清晰的看清问题的本质&lt;/strong>。&lt;/p>
&lt;p>CPU 并不知道线程、进程之类的概念。&lt;/p>
&lt;p>CPU 只知道两件事:&lt;/p>
&lt;ol>
&lt;li>从内存中取出指令&lt;/li>
&lt;li>执行指令，然后回到 1&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/f780a9b2-0f84-4c95-a1f4-202b80d8bc41/640" alt="">&lt;/p>
&lt;p>你看，在这里 CPU 确实是不知道什么进程、线程之类的概念。&lt;/p>
&lt;p>接下来的问题就是 CPU 从哪里取出指令呢？答案是来自一个被称为 Program Counter(简称 PC) 的寄存器，也就是我们熟知的程序计数器，在这里大家不要把寄存器想的太神秘，你可以简单的把寄存器理解为内存，只不过存取速度更快而已。&lt;/p>
&lt;p>PC 寄存器中存放的是什么呢？这里存放的是指令在内存中的地址，什么指令呢？是 CPU 将要执行的下一条指令。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/f780a9b2-0f84-4c95-a1f4-202b80d8bc41/640" alt="">&lt;/p>
&lt;p>那么是谁来设置 PC 寄存器中的指令地址呢？&lt;/p>
&lt;p>原来 PC 寄存器中的地址默认是自动加 1 的，这当然是有道理的，因为大部分情况下 CPU 都是一条接一条顺序执行，当遇到 if、else 时，这种顺序执行就被打破了，CPU 在执行这类指令时会根据计算结果来动态改变 PC 寄存器中的值，这样 CPU 就可以正确的跳转到需要执行的指令了。&lt;/p>
&lt;p>聪明的你一定会问，那么 PC 中的初始值是怎么被设置的呢？&lt;/p>
&lt;p>在回答这个问题之前我们需要知道 CPU 执行的指令来自哪里？是来自内存，废话，内存中的指令是从磁盘中保存的可执行程序加载过来的，磁盘中可执行程序是编译器生成的，编译器又是从哪里生成的机器指令呢？答案就是&lt;strong>我们定义的函数&lt;/strong>。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/f780a9b2-0f84-4c95-a1f4-202b80d8bc41/640" alt="">&lt;/p>
&lt;p>注意是函数，&lt;strong>函数被编译后才会形成 CPU 执行的指令&lt;/strong>，那么很自然的，我们该如何让 CPU 执行一个函数呢？显然我们只需要找到函数被编译后形成的第一条指令就可以了，第一条指令就是函数入口。&lt;/p>
&lt;p>现在你应该知道了吧，我们想要 CPU 执行一个函数，那么&lt;strong>只需要把该函数对应的第一条机器指令的地址写入 PC 寄存器就可以了&lt;/strong>，这样我们写的函数就开始被 CPU 执行起来啦。&lt;/p>
&lt;p>你可能会有疑问，这和线程有什么关系呢？&lt;/p>
&lt;h1 id="从-cpu-到操作系统">从 CPU 到操作系统&lt;a class="td-heading-self-link" href="#%e4%bb%8e-cpu-%e5%88%b0%e6%93%8d%e4%bd%9c%e7%b3%bb%e7%bb%9f" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>上一小节中我们明白了 CPU 的工作原理，我们想让 CPU 执行某个函数，那么只需要把函数对应的第一条机器执行装入 PC 寄存器就可以了，&lt;strong>这样即使没有操作系统我们也可以让 CPU 执行程序&lt;/strong>，虽然可行但这是一个非常繁琐的过程，我们需要：&lt;/p>
&lt;ul>
&lt;li>在内存中找到一块大小合适的区域装入程序&lt;/li>
&lt;li>找到函数入口，设置好 PC 寄存器让 CPU 开始执行程序&lt;/li>
&lt;/ul>
&lt;p>这两个步骤绝不是那么容易的事情，如果每次在执行程序时程序员自己手动实现上述两个过程会疯掉的，因此聪明的程序员就会想干脆直接写个程序来自动完成上面两个步骤吧。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/f780a9b2-0f84-4c95-a1f4-202b80d8bc41/640" alt="">&lt;/p>
&lt;p>机器指令需要加载到内存中执行，因此需要记录下内存的起始地址和长度；同时要找到函数的入口地址并写到 PC 寄存器中，想一想这是不是需要一个数据结构来记录下这些信息：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#a40000">***&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#000">start_addr&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">len&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#000">start_point&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>   &lt;span style="color:#000;font-weight:bold">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>接下来就是起名字时刻。&lt;/p>
&lt;p>这个数据结构总要有个名字吧，这个结构体用来记录什么信息呢？记录的是程序在被加载到内存中的运行状态，程序从磁盘加载到内存跑起来叫什么好呢？干脆就叫**进程 (Process)**好了，我们的指导原则就是一定要听上去比较神秘，总之大家都不容易弄懂就对了，我将其称为 “&lt;strong>弄不懂原则&lt;/strong>”。&lt;/p>
&lt;p>就这样进程诞生了。&lt;/p>
&lt;p>CPU 执行的第一个函数也起个名字，第一个要被执行的函数听起来比较重要，干脆就叫&lt;strong>main 函数&lt;/strong>吧。&lt;/p>
&lt;p>完成上述两个步骤的程序也要起个名字，根据 “弄不懂原则” 这个 “简单” 的程序就叫&lt;strong>操作系统&lt;/strong>(Operating System) 好啦。&lt;/p>
&lt;p>就这样操作系统诞生了，程序员要想运行程序再也不用自己手动加载一遍了。&lt;/p>
&lt;p>现在进程和操作系统都有了，一切看上去都很完美。&lt;/p>
&lt;h1 id="从单核到多核如何充分利用多核">从单核到多核，如何充分利用多核&lt;a class="td-heading-self-link" href="#%e4%bb%8e%e5%8d%95%e6%a0%b8%e5%88%b0%e5%a4%9a%e6%a0%b8%e5%a6%82%e4%bd%95%e5%85%85%e5%88%86%e5%88%a9%e7%94%a8%e5%a4%9a%e6%a0%b8" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>人类的一大特点就是生命不息折腾不止，从单核折腾到了多核。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/f780a9b2-0f84-4c95-a1f4-202b80d8bc41/640" alt="">&lt;/p>
&lt;p>这时，假设我们想写一个程序并且要分利用多核该怎么办呢？&lt;/p>
&lt;p>有的同学可能会说不是有进程吗，多开几个进程不就可以了？听上去似乎很有道理，但是主要存在这样几个问题：&lt;/p>
&lt;ul>
&lt;li>进程是需要占用内存空间的 (从上一节能看到这一点)，如果多个进程基于同一个可执行程序，那么这些进程其内存区域中的内容几乎完全相同，这显然会造成内存的浪费&lt;/li>
&lt;li>计算机处理的任务可能是比较复杂的，这就涉及到了进程间通信，由于各个进程处于不同的内存地址空间，进程间通信天然需要借助操作系统，这就在增大编程难度的同时也增加了系统开销&lt;/li>
&lt;/ul>
&lt;p>该怎么办呢？&lt;/p>
&lt;h1 id="从进程到线程">从进程到线程&lt;a class="td-heading-self-link" href="#%e4%bb%8e%e8%bf%9b%e7%a8%8b%e5%88%b0%e7%ba%bf%e7%a8%8b" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>让我再来仔细的想一想这个问题，所谓进程无非就是内存中的一段区域，这段区域中保存了&lt;strong>CPU 执行的机器指令以及函数运行时的堆栈信息&lt;/strong>，要想让进程运行，就把 main 函数的第一条机器指令地址写入 PC 寄存器，这样进程就运行起来了。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/f780a9b2-0f84-4c95-a1f4-202b80d8bc41/640" alt="">&lt;/p>
&lt;p>进程的缺点在于只有一个入口函数，也就是 main 函数，因此进程中的机器指令&lt;strong>只能被一个 CPU 执行&lt;/strong>，那么有没有办法让多个 CPU 来执行同一个进程中的机器指令呢？&lt;/p>
&lt;p>聪明的你应该能想到，既然我们可以把 main 函数的第一条指令地址写入 PC 寄存器，那么其它函数和 main 函数又有什么区别呢？&lt;/p>
&lt;p>答案是没什么区别，main 函数的特殊之处无非就在于是 CPU 执行的第一个函数，除此之外再无特别之处，&lt;strong>我们可以把 PC 寄存器指向 main 函数，就可以把 PC 寄存器指向任何一个函数&lt;/strong>。&lt;/p>
&lt;p>&lt;strong>当我们把 PC 寄存器指向非 main 函数时，线程就诞生了&lt;/strong>。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/f780a9b2-0f84-4c95-a1f4-202b80d8bc41/640" alt="">&lt;/p>
&lt;p>至此我们解放了思想，一个进程内可以有多个入口函数，&lt;strong>也就是说属于同一个进程中的机器指令可以被多个 CPU 同时执行&lt;/strong>。&lt;/p>
&lt;p>注意，这是一个和进程不同的概念，创建进程时我们需要在内存中找到一块合适的区域以装入进程，然后把 CPU 的 PC 寄存器指向 main 函数，也就是说进程中只有一个&lt;strong>执行流&lt;/strong>。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/f780a9b2-0f84-4c95-a1f4-202b80d8bc41/640" alt="">&lt;/p>
&lt;p>但是现在不一样了，多个 CPU 可以在同一个屋檐下 (进程占用的内存区域) 同时执行属于该进程的多个入口函数，也就是说现在一个进程内可以有&lt;strong>多个执行流&lt;/strong>了。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/f780a9b2-0f84-4c95-a1f4-202b80d8bc41/640" alt="">&lt;/p>
&lt;p>总是叫执行流好像有点太容易理解了，再次祭出” 弄不懂原则 “，起个不容易懂的名字，就叫线程吧。&lt;/p>
&lt;p>这就是线程的由来。&lt;/p>
&lt;p>操作系统为每个进程维护了一堆信息，用来记录进程所处的内存空间等，这堆信息记为数据集 A。&lt;/p>
&lt;p>同样的，操作系统也需要为线程维护一堆信息，用来记录线程的入口函数或者栈信息等，这堆数据记为数据集 B。&lt;/p>
&lt;p>显然数据集 B 要比数据 A 的量要少，同时不像进程，创建一个线程时无需去内存中找一段内存空间，&lt;strong>因为线程是运行在所处进程的地址空间的&lt;/strong>，这块地址空间在程序启动时已经创建完毕，同时线程是程序在运行期间创建的 (进程启动后)，因此当线程开始运行的时候这块地址空间就已经存在了，线程可以直接使用。这就是为什么各种教材上提的创建线程要比创建进程快的原因 (当然还有其它原因)。&lt;/p>
&lt;p>值得注意的是，有了线程这个概念后，我们只需要进程开启后创建多个线程就可以让所有 CPU 都忙起来，&lt;strong>这就是所谓高性能、高并发的根本所在&lt;/strong>。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/f780a9b2-0f84-4c95-a1f4-202b80d8bc41/640" alt="">&lt;/p>
&lt;p>很简单，只需要创建出数量&lt;strong>合适&lt;/strong>的线程就可以了。&lt;/p>
&lt;p>另外值得注意的一点是，由于各个线程共享进程的内存地址空间，因此线程之间的通信无需借助操作系统，这给程序员带来极大方便的同时也带来了无尽的麻烦，多线程遇到的多数问题都出自于线程间通信简直太方便了以至于非常容易出错。&lt;strong>出错的根源在于 CPU 执行指令时根本没有线程的概念，&lt;strong>多线程编程面临的&lt;/strong>互斥&lt;/strong>与&lt;strong>同步&lt;/strong>问题需要程序员自己解决，关于互斥与同步问题限于篇幅就不详细展开了，大部分的操作系统资料都有详细讲解。&lt;/p>
&lt;p>最后需要提醒的是，虽然前面关于线程讲解使用的图中用了多个 CPU，但不是说一定要有多核才能使用多线程，在单核的情况下一样可以创建出多个线程，&lt;strong>原因在于线程是操作系统层面的实现，和有多少个核心是没有关系的&lt;/strong>，CPU 在执行机器指令时也意识不到执行的机器指令属于哪个线程。即使在只有一个 CPU 的情况下，操作系统也可以通过线程调度让各个线程 “同时” 向前推进，方法就是将 CPU 的时间片在各个线程之间来回分配，这样多个线程看起来就是 “同时” 运行了，但实际上任意时刻还是只有一个线程在运行。&lt;/p>
&lt;h1 id="线程与内存">线程与内存&lt;a class="td-heading-self-link" href="#%e7%ba%bf%e7%a8%8b%e4%b8%8e%e5%86%85%e5%ad%98" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>在前面的讨论中我们知道了线程和 CPU 的关系，也就是把 CPU 的 PC 寄存器指向线程的入口函数，这样线程就可以运行起来了，这就是为什么我们创建线程时必须指定一个入口函数的原因。无论使用任何编程语言，创建一个线程大体相同：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">//&lt;/span> &lt;span style="color:#a40000">设置线程入口函数DoSomething&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">thread&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> CreateThread&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>DoSomething&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">//&lt;/span> &lt;span style="color:#a40000">让线程运行起来&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">thread.Run();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>那么线程和内存又有什么关联呢？&lt;/p>
&lt;p>我们知道函数在被执行的时产生的数据包括&lt;strong>函数参数&lt;/strong>、&lt;strong>局部变量&lt;/strong>、&lt;strong>返回地址&lt;/strong>等信息，这些信息是保存在栈中的，线程这个概念还没有出现时进程中只有一个执行流，因此只有一个栈，这个栈的栈底就是进程的入口函数，也就是 main 函数，假设 main 函数调用了 funA，funcA 又调用了 funcB，如图所示：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/f780a9b2-0f84-4c95-a1f4-202b80d8bc41/640" alt="">&lt;/p>
&lt;p>那么有了线程以后了呢？&lt;/p>
&lt;p>有了线程以后一个进程中就存在多个执行入口，即同时存在多个执行流，那么只有一个执行流的进程需要一个栈来保存运行时信息，那么很显然有多个执行流时就需要有多个栈来保存各个执行流的信息，也就是说&lt;strong>操作系统要为每个线程在进程的地址空间中分配一个栈&lt;/strong>，即每个线程都有独属于自己的栈，能意识到这一点是极其关键的。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/f780a9b2-0f84-4c95-a1f4-202b80d8bc41/640" alt="">&lt;/p>
&lt;p>同时我们也可以看到，创建线程是要消耗进程内存空间的，这一点也值得注意。&lt;/p>
&lt;h1 id="线程的使用">线程的使用&lt;a class="td-heading-self-link" href="#%e7%ba%bf%e7%a8%8b%e7%9a%84%e4%bd%bf%e7%94%a8" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>现在有了线程的概念，那么接下来作为程序员我们该如何使用线程呢？&lt;/p>
&lt;p>从生命周期的角度讲，线程要处理的任务有两类：长任务和短任务。&lt;/p>
&lt;p>&lt;strong>1，长任务，long-lived tasks&lt;/strong>&lt;/p>
&lt;p>顾名思义，就是任务存活的时间很长，比如以我们常用的 word 为例，我们在 word 中编辑的文字需要保存在磁盘上，往磁盘上写数据就是一个任务，那么这时一个比较好的方法就是专门创建一个写磁盘的线程，该写线程的生命周期和 word 进程是一样的，只要打开 word 就要创建出该写线程，当用户关闭 word 时该线程才会被销毁，这就是长任务。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/f780a9b2-0f84-4c95-a1f4-202b80d8bc41/640" alt="">&lt;/p>
&lt;p>这种场景非常适合创建专用的线程来处理某些特定任务，这种情况比较简单。&lt;/p>
&lt;p>有长任务，相应的就有短任务。&lt;/p>
&lt;p>&lt;strong>2，短任务，short-lived tasks&lt;/strong>&lt;/p>
&lt;p>这个概念也很简单，那就是任务的处理时间很短，比如一次网络请求、一次数据库查询等，这种任务可以在短时间内快速处理完成。因此短任务多见于各种 Server，像 web server、database server、file server、mail server 等，这也是互联网行业的同学最常见的场景，这种场景是我们要重点讨论的。&lt;/p>
&lt;p>这种场景有两个特点：一个是&lt;strong>任务处理所需时间短&lt;/strong>；另一个是&lt;strong>任务数量巨大&lt;/strong>。&lt;/p>
&lt;p>如果让你来处理这种类型的任务该怎么办呢？&lt;/p>
&lt;p>你可能会想，这很简单啊，当 server 接收到一个请求后就创建一个线程来处理任务，处理完成后销毁该线程即可，So easy。&lt;/p>
&lt;p>这种方法通常被称为 thread-per-request，也就是说来一个请求就创建一个线程：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/f780a9b2-0f84-4c95-a1f4-202b80d8bc41/640" alt="">&lt;/p>
&lt;p>如果是长任务，那么这种方法可以工作的很好，但是对于大量的短任务这种方法虽然实现简单但是有这样几个缺点：&lt;/p>
&lt;ol>
&lt;li>从前几节我们能看到，线程是操作系统中的概念 (这里不讨论用户态线程实现、协程之类)，因此创建线程天然需要借助操作系统来完成，操作系统创建和销毁线程是需要消耗时间的&lt;/li>
&lt;li>每个线程需要有自己独立的栈，因此当创建大量线程时会消耗过多的内存等系统资源&lt;/li>
&lt;/ol>
&lt;p>这就好比你是一个工厂老板 (想想都很开心有没有)，手里有很多订单，每来一批订单就要招一批工人，生产的产品非常简单，工人们很快就能处理完，处理完这批订单后就把这些千辛万苦招过来的工人辞退掉，当有新的订单时你再千辛万苦的招一遍工人，干活儿 5 分钟招人 10 小时，如果你不是励志要让企业倒闭的话大概是不会这么做到的，因此一个更好的策略就是招一批人后就地养着，有订单时处理订单，没有订单时大家可以闲呆着。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/f780a9b2-0f84-4c95-a1f4-202b80d8bc41/640" alt="">&lt;/p>
&lt;p>这就是线程池的由来。&lt;/p>
&lt;h1 id="从多线程到线程池">从多线程到线程池&lt;a class="td-heading-self-link" href="#%e4%bb%8e%e5%a4%9a%e7%ba%bf%e7%a8%8b%e5%88%b0%e7%ba%bf%e7%a8%8b%e6%b1%a0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>线程池的概念是非常简单的，无非就是创建一批线程，之后就不再释放了，有任务就提交给这些线程处理，因此无需频繁的创建、销毁线程，同时由于线程池中的线程个数通常是固定的，也不会消耗过多的内存，因此这里的思想就是&lt;strong>复用、可控&lt;/strong>。&lt;/p>
&lt;h1 id="线程池是如何工作的">线程池是如何工作的&lt;a class="td-heading-self-link" href="#%e7%ba%bf%e7%a8%8b%e6%b1%a0%e6%98%af%e5%a6%82%e4%bd%95%e5%b7%a5%e4%bd%9c%e7%9a%84" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>可能有的同学会问，该怎么给线程池提交任务呢？这些任务又是怎么给到线程池中线程呢？&lt;/p>
&lt;p>很显然，数据结构中的队列天然适合这种场景，提交任务的就是生产者，消费任务的线程就是消费者，实际上这就是经典的&lt;strong>生产者 - 消费者问题&lt;/strong>。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/f780a9b2-0f84-4c95-a1f4-202b80d8bc41/640" alt="">&lt;/p>
&lt;p>现在你应该知道为什么操作系统课程要讲、面试要问这个问题了吧，因为如果你对生产者 - 消费者问题不理解的话，本质上你是无法正确的写出线程池的。&lt;/p>
&lt;p>限于篇幅在这里博主不打算详细的讲解生产者消费者问题，参考操作系统相关资料就能获取答案。这里博主打算讲一讲一般提交给线程池的任务是什么样子的。&lt;/p>
&lt;p>一般来说提交给线程池的任务包含两部分：1) &lt;strong>需要被处理的数据&lt;/strong>；2) &lt;strong>处理数据的函数&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000">task&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#000">data&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">handler&lt;/span> &lt;span style="color:#000">handle&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>(注意，你也可以把代码中的 struct 理解成 class，也就是对象。)&lt;/p>
&lt;p>线程池中的线程会阻塞在队列上，当生产者向队列中写入数据后，线程池中的某个线程会被唤醒，该线程从队列中取出上述结构体 (或者对象)，以结构体(或者对象) 中的数据为参数并调用处理函数：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">while&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87">true&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000">task&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">GetFromQueue&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">task&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span>&lt;span style="color:#000">handle&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">task&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span>&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>以上就是线程池最&lt;strong>核心&lt;/strong>的部分。&lt;/p>
&lt;p>理解这些你就能明白线程池是如何工作的了。&lt;/p>
&lt;h1 id="线程池中线程的数量">线程池中线程的数量&lt;a class="td-heading-self-link" href="#%e7%ba%bf%e7%a8%8b%e6%b1%a0%e4%b8%ad%e7%ba%bf%e7%a8%8b%e7%9a%84%e6%95%b0%e9%87%8f" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>现在线程池有了，那么线程池中线程的数量该是多少呢？&lt;/p>
&lt;p>在接着往下看前先自己想一想这个问题。&lt;/p>
&lt;p>如果你能看到这里说明还没有睡着。&lt;/p>
&lt;p>要知道线程池的线程过少就不能充分利用 CPU，线程创建的过多反而会造成系统性能下降，内存占用过多，线程切换造成的消耗等等。因此线程的数量既不能太多也不能太少，那到底该是多少呢？&lt;/p>
&lt;p>回答这个问题，你需要知道线程池处理的任务有哪几类，有的同学可能会说你不是说有两类吗？长任务和短任务，这个是从生命周期的角度来看的，那么从处理任务所需要的资源角度看也有两种类型，这就是没事儿找抽型和。。啊不，是 CPU 密集型和 I/O 密集型。&lt;/p>
&lt;p>&lt;strong>1，CPU 密集型&lt;/strong>&lt;/p>
&lt;p>所谓 CPU 密集型就是说处理任务不需要依赖外部 I/O，比如科学计算、矩阵运算等等。在这种情况下只要线程的数量和核数基本相同就可以充分利用 CPU 资源。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/f780a9b2-0f84-4c95-a1f4-202b80d8bc41/640" alt="">&lt;/p>
&lt;p>&lt;strong>2，I/O 密集型&lt;/strong>&lt;/p>
&lt;p>这一类任务可能计算部分所占用时间不多，大部分时间都用在了比如磁盘 I/O、网络 I/O 等。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/f780a9b2-0f84-4c95-a1f4-202b80d8bc41/640" alt="">&lt;/p>
&lt;p>这种情况下就稍微复杂一些了，你需要利用性能测试工具评估出用在 I/O 等待上的时间，这里记为 WT(wait time)，以及 CPU 计算所需要的时间，这里记为 CT(computing time)，那么对于一个 N 核的系统，合适的线程数大概是 N * (1 + WT/CT)，假设 I/O 等待时间和计算时间相同，那么你大概需要 2N 个线程才能充分利用 CPU 资源，注意这只是一个理论值，具体设置多少需要根据真实的业务场景进行测试。&lt;/p>
&lt;p>当然充分利用 CPU 不是唯一需要考虑的点，随着线程数量的增多，内存占用、系统调度、打开的文件数量、打开的 socker 数量以及打开的数据库链接等等是都需要考虑的。&lt;/p>
&lt;p>因此这里没有万能公式，要&lt;strong>具体情况具体分析&lt;/strong>。&lt;/p>
&lt;h1 id="线程池不是万能的">线程池不是万能的&lt;a class="td-heading-self-link" href="#%e7%ba%bf%e7%a8%8b%e6%b1%a0%e4%b8%8d%e6%98%af%e4%b8%87%e8%83%bd%e7%9a%84" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>线程池仅仅是多线程的一种使用形式，因此多线程面临的问题线程池同样不能避免，像死锁问题、race condition 问题等等，关于这一部分同样可以参考操作系统相关资料就能得到答案，所以基础很重要呀老铁们。&lt;/p>
&lt;h1 id="线程池使用的最佳实践">线程池使用的最佳实践&lt;a class="td-heading-self-link" href="#%e7%ba%bf%e7%a8%8b%e6%b1%a0%e4%bd%bf%e7%94%a8%e7%9a%84%e6%9c%80%e4%bd%b3%e5%ae%9e%e8%b7%b5" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>线程池是程序员手中强大的武器，互联网公司的各个 server 上几乎都能见到线程池的身影，使用线程池前你需要考虑：&lt;/p>
&lt;ul>
&lt;li>充分理解你的任务，是长任务还是短任务、是 CPU 密集型还是 I/O 密集型，如果两种都有，那么一种可能更好的办法是把这两类任务放到不同的线程池中，这样也许可以更好的确定线程数量&lt;/li>
&lt;li>如果线程池中的任务有 I/O 操作，那么务必对此任务设置超时，否则处理该任务的线程可能会一直阻塞下去&lt;/li>
&lt;li>线程池中的任务最好不要&lt;strong>同步&lt;/strong>等待其它任务的结果&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>总结&lt;/strong>&lt;/p>
&lt;p>本节我们从 CPU 开始一路来到常用的线程池，从底层到上层、从硬件到软件。注意，这里通篇没有出现任何特定的编程语言，线程不是语言层面的概念 (依然不考虑用户态线程)，但是当你真正理解了线程后，相信你可以在任何一门语言下用好多线程，你需要理解的是道，此后才是术。&lt;/p>
&lt;p>希望这篇文章对大家理解线程以及线程池有所帮助。&lt;/p>
&lt;p>接下的一篇将是与线程池密切配合实现高性能、高并发的又一关键技术：I/O 与 I/O 多路复用，敬请期待。&lt;/p></description></item><item><title>Docs: Inter Process Communication(进程间通信)</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Process/Inter-Process-Communication%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Process/Inter-Process-Communication%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/</guid><description/></item></channel></rss>