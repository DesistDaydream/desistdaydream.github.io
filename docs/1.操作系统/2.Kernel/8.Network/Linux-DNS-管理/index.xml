<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – Linux DNS 管理</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.Kernel/8.Network/Linux-DNS-%E7%AE%A1%E7%90%86/</link><description>Recent content in Linux DNS 管理 on 断念梦</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.Kernel/8.Network/Linux-DNS-%E7%AE%A1%E7%90%86/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Linux DNS 管理</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.Kernel/8.Network/Linux-DNS-%E7%AE%A1%E7%90%86/Linux-DNS-%E7%AE%A1%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.Kernel/8.Network/Linux-DNS-%E7%AE%A1%E7%90%86/Linux-DNS-%E7%AE%A1%E7%90%86/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://man7.org/linux/man-pages/man3/resolver.3.html">Manual(手册)，resolver(3)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://man7.org/linux/man-pages/man5/resolv.conf.5.html">Manual(手册)，resolv.conf(5)&lt;/a>
&lt;ul>
&lt;li>resolver(5) 手册也指向了 resolv.conf(5)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>在 Linux 中，进行域名解析工作的是 Reslover(解析器)。&lt;/p>
&lt;p>&lt;strong>Reslover(解析器)&lt;/strong> 是 &lt;a href="docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/Linux%20libc%20%E5%BA%93.md">Linux libc 库&lt;/a> 中用于提供 DNS 接口的程序集（其实就是对外暴露了 API 的 C 库），当某个进程调用这些程序时将同时读入 Reslover 的配置文件（resolv.conf），这个文件具有可读性并且包含大量可用的解析参数。&lt;/p>
&lt;blockquote>
&lt;p>Note：并不是所有程序都会使用 Linux Reslover。比如想要测试 resolv.conf 文件，不要使用 dig, host, nslook 这类工具，因为他们并没有调用 Resolver 的库(i.e. resolv.conf 文件中的 option 内的设置不会生效)。可以使用 getent 来测试。一般情况下正常的应用程序，都会调用 resolver，并使用 resolv.conf 文件(比如 ping 程序)。&lt;/p>
&lt;/blockquote>
&lt;p>Reslover 库定义了下面这些函数&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;netinet/in.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;arpa/nameser.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;resolv.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> __res_state;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">typedef&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> __res_state &lt;span style="color:#f92672">*&lt;/span>res_state;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">res_ninit&lt;/span>(res_state statep);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">res_nclose&lt;/span>(res_state statep);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">res_nquery&lt;/span>(res_state statep,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>dname, &lt;span style="color:#66d9ef">int&lt;/span> class, &lt;span style="color:#66d9ef">int&lt;/span> type,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> answer[.anslen], &lt;span style="color:#66d9ef">int&lt;/span> anslen);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">res_nsearch&lt;/span>(res_state statep,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>dname, &lt;span style="color:#66d9ef">int&lt;/span> class, &lt;span style="color:#66d9ef">int&lt;/span> type,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> answer[.anslen], &lt;span style="color:#66d9ef">int&lt;/span> anslen);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">res_nquerydomain&lt;/span>(res_state statep,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>name, &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>domain,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> class, &lt;span style="color:#66d9ef">int&lt;/span> type, &lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> answer[.anslen],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> anslen);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">res_nmkquery&lt;/span>(res_state statep,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> op, &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>dname, &lt;span style="color:#66d9ef">int&lt;/span> class,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> type, &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> data[.datalen], &lt;span style="color:#66d9ef">int&lt;/span> datalen,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>newrr,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> buf[.buflen], &lt;span style="color:#66d9ef">int&lt;/span> buflen);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">res_nsend&lt;/span>(res_state statep,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> msg[.msglen], &lt;span style="color:#66d9ef">int&lt;/span> msglen,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> answer[.anslen], &lt;span style="color:#66d9ef">int&lt;/span> anslen);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">dn_comp&lt;/span>(&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>exp_dn, &lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> comp_dn[.length],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> length, &lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">**&lt;/span>dnptrs,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">**&lt;/span>lastdnptr);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">dn_expand&lt;/span>(&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>msg,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>eomorig,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>comp_dn, &lt;span style="color:#66d9ef">char&lt;/span> exp_dn[.length],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> length);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这些函数会暴露成 API 以供调用。比如 Go 编写的程序可以使用纯 Go 自己的解析器，也可以使用 cgo 来调用 glibc 的这个 Linux Resolver。&lt;/p>
&lt;blockquote>
&lt;p>tips: 这些函数名前面带个 n 表示这是新的函数，老的函数没有 n，已经被弃用了。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>res_ninit # 实例化并读取配置
&lt;ul>
&lt;li>每次调用 res_ninit 都需要调用 res_nclose 以释放由 res_ninit 和后续 res_nquery 分配的内存&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>res_nquery # 查询&lt;/li>
&lt;li>res_nsearch # 搜索&lt;/li>
&lt;li>res_nquerydomain # 串联查询&lt;/li>
&lt;/ul>
&lt;h1 id="linux-dns-关联文件与配置">Linux DNS 关联文件与配置&lt;/h1>
&lt;p>&lt;strong>/etc/resolv.conf&lt;/strong> # Reslover 的配置文件&lt;/p>
&lt;p>&lt;strong>/etc/hosts&lt;/strong> # 更改本地主机名和 IP 的对应关系，用于解析指定域名&lt;/p>
&lt;p>例：当 ping TEST-1 时，则 ping 192.168.2.3&lt;/p>
&lt;pre>&lt;code>127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4
::1 localhost localhost.localdomain localhost6 localhost6.localdomain6
192.168.2.3 TEST-1
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>/PATH/TO/nsswitch.conf&lt;/strong> # 名称服务切换配置。GUN C 库(glibc) 和 某些其他应用程序使用该配置文件来确定从哪些地方获取解析信息。比如是否要读取 /etc/hosts 文件&lt;/p>
&lt;ul>
&lt;li>该文件属于 glibc 包中的一部分。但是由于 CentOS 与 Ubuntu 中 glibc 的巨大差异，该文件所在路径也不同：
&lt;ul>
&lt;li>CentOS 在 &lt;strong>/etc/nsswitch.conf&lt;/strong>&lt;/li>
&lt;li>Ubuntu 在 &lt;strong>/usr/share/libc-bin/nsswitch.conf&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: systemd-resolved.service</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.Kernel/8.Network/Linux-DNS-%E7%AE%A1%E7%90%86/systemd-resolved.service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.Kernel/8.Network/Linux-DNS-%E7%AE%A1%E7%90%86/systemd-resolved.service/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://man7.org/linux/man-pages/man8/systemd-resolved.service.8.html">Manual(手册)，systemd-resolved.service(8)&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.jinbuguo.com/systemd/systemd-resolved.service.html">金步国-system 中文手册，systemd-resolved.service&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>systemd-resolved.service 是一个类似于 &lt;a href="https://desistdaydream.github.io/docs/4.%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/DNS/DNSmasq.md">DNSmasq&lt;/a> 的域名解析服务，只不过这个服务只适用于 Linux 中，且被 systemd 所管理。&lt;/p>
&lt;p>systemd-resolved 是一个为本地应用程序提供网络名称解析的系统服务。它实现了一个缓存和验证 DNS/DNSSEC 存根解析器，以及一个 LLMNR 和 MulticastDNS 解析器和响应器。&lt;/p>
&lt;h1 id="关联文件与配置">关联文件与配置&lt;/h1>
&lt;p>&lt;strong>/etc/systemd/resolved.conf&lt;/strong> # 运行时配置文件。&lt;/p>
&lt;p>&lt;strong>/run/systemd/resolve/&lt;/strong> # /etc/resolv.conf 文件将会软链接到此目录下的某个文件。通常默认链接到 stub-resolv.conf 文件。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>./stub-resolv.conf&lt;/strong> # 通常只包含一个本地地址(127.0.0.53)，指向 systemd-resolved.service 提供的 DNS Stub Listener。&lt;/li>
&lt;li>&lt;strong>./resolv.conf&lt;/strong> # 包含了系统实际使用的 DNS 服务器和搜索域的列表。systemd-resolved.service 的 DNS Stub Listener 将会读取该文件中的 DNS Server&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>/usr/lib/systemd/resolv.conf&lt;/strong> # 代替 /etc/resolv.conf 文件&lt;/p>
&lt;h1 id="命令行工具">命令行工具&lt;/h1>
&lt;h2 id="resolvectl">resolvectl&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://man7.org/linux/man-pages/man1/resolvectl.1.html">Manual(手册)，resolvectl(1)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h3 id="syntax语法">Syntax(语法)&lt;/h3>
&lt;p>&lt;strong>resolvectl [OPTIONS] COMMAND [NAME&amp;hellip;]&lt;/strong>&lt;/p>
&lt;p>&lt;strong>COMMAND&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>query HOSTNAME | ADDRESS&lt;/strong> # 解析域名以及 IPv4 和 IPv6 地址。当与 &amp;ndash;type= 或 &amp;ndash;class= （见下文）结合使用时，解析低级 DNS 资源记录。&lt;/li>
&lt;/ul>
&lt;h3 id="example">EXAMPLE&lt;/h3></description></item><item><title>Docs: 配置详解</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.Kernel/8.Network/Linux-DNS-%E7%AE%A1%E7%90%86/%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.Kernel/8.Network/Linux-DNS-%E7%AE%A1%E7%90%86/%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://man7.org/linux/man-pages/man5/resolv.conf.5.html">Manual(手册)，resolv.conf&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://man7.org/linux/man-pages/man5/nsswitch.conf.5.html">Manual(手册)，nsswitch.conf&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/L9TpAFqT-5V7ppEGdT0cnw">公众号，重新夺回 /etc/resolv.conf 的控制权&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="etcresolvconf-详解">/etc/resolv.conf 详解&lt;/h1>
&lt;p>该文件可以手动管理，或者由某个应用程序(e.g.NetworkManager)来管理。如果由应用程序管理，则会在文件开头以 &lt;code>#&lt;/code> 进行备注&lt;/p>
&lt;p>配置文件格式：每行以一个关键字开头，后面接一个或多个由空格隔开的参数。&lt;/p>
&lt;p>下面是一个最简单的配置文件示例&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>nameserver 114.114.114.114
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nameserver 202.96.128.166
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="关键字详解">关键字详解&lt;/h2>
&lt;h3 id="nameserver-ip--指定用来进行域名解析的服务器地址">nameserver IP # 指定用来进行域名解析的服务器地址&lt;/h3>
&lt;p>IP 可以是 ipv4 或者 ipv6 的地址，该关键字最多配置 3 个。当配置大于 1 个的 nameserver 时，则 reslover 按列出的顺序使用。&lt;/p>
&lt;h3 id="search-string--指定域名的搜索列表">search STRING # 指定域名的搜索列表&lt;/h3>
&lt;p>解析域名时，会搜索 search 关键字指定的 STRING ，并将 STRING 附加到要解析的域名后方。效果如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># cat /etc/resolv.conf&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nameserver 114.114.114.114
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># ping www&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ping: www: Name or service not known
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># cat /etc/resolv.conf&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nameserver 114.114.114.114
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>search qq.com
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># ping www&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PING https.qq.com &lt;span style="color:#f92672">(&lt;/span>123.151.137.18&lt;span style="color:#f92672">)&lt;/span> 56&lt;span style="color:#f92672">(&lt;/span>84&lt;span style="color:#f92672">)&lt;/span> bytes of data.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">64&lt;/span> bytes from 123.151.137.18 &lt;span style="color:#f92672">(&lt;/span>123.151.137.18&lt;span style="color:#f92672">)&lt;/span>: icmp_seq&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> ttl&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">55&lt;/span> time&lt;span style="color:#f92672">=&lt;/span>2.17 ms
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note:&lt;/p>
&lt;ul>
&lt;li>如果使用 FQDN (即在域名最后加个 . )，那么解析不会通过 search ，而是直接解析指定的域名&lt;/li>
&lt;li>可以指定多个可供搜索的 STRING，在搜索时，从左至右依次尝试。比如我定义了 search qq.com qq1.com qq2.com 这个搜索域，那么在我 ping www 时，解析过程如下：
&lt;ul>
&lt;li>先解析 &lt;a href="https://www.qq.com">www.qq.com&lt;/a>，如果解析无结果；则解析 &lt;a href="https://www.qq1.com">www.qq1.com&lt;/a>，如果无结果；则解析 &lt;a href="https://www.qq2.com">www.qq2.com&lt;/a>，如果无结果则返回解析失败的信息。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="sortlist-string">sortlist STRING&lt;/h3>
&lt;h3 id="options-string--通过-options-指定的参数来配置-resolver-的运行方式">options STRING # 通过 options 指定的参数来配置 resolver 的运行方式&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>attempts:NUM&lt;/strong> # 当一个 nameserver 上域名查询失败时进行重试的次数，默认是 2 次。当重试次数达到上限则返回错误信息:无法进行域名解析&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>ndots:NUM&lt;/strong> # 指定域名中必须出现的 . 的个数。默认值为 1，上限为 15。&lt;/p>
&lt;ul>
&lt;li>如果 &lt;code>.&lt;/code> 的个数小于 NUM，则会在 search 关键字指定的搜索列表中进行查询；否则直接查询指定域名，当查询无结果时，再去 search 列表查询。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>timeout:NUM&lt;/strong> # 在一个 nameserver 上进行域名查询的超时时间，单位是秒&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Note：如果想要测试 resolv.conf 文件，不要使用 dig, host, nslook 这类工具，因为他们并没有调用 resolver 的库(i.e.resolv.conf 文件中的 option 内的设置不会生效)可以使用 getent 来测试。一般情况下正常的应用程序，都会调用 resolver，并使用 resolv.conf 文件(比如 ping 程序)。&lt;/p>
&lt;p>应用示例&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>search test.example.com example.com
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>options timeout:1 attempts:1 rotate
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nameserver 192.168.0.1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nameserver 192.168.0.2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>假设 192.168.0.1 不返回结果(可能根本就不是台 DNS)，我们假设需要解析 &amp;ldquo;www.devel&amp;rdquo;，而这个仅仅在 &lt;a href="https://www.devel.example.com">www.devel.example.com&lt;/a> 里面有记录，下面是整个执行的步骤:&lt;/p>
&lt;ol>
&lt;li>&amp;ldquo;www.devel&amp;rdquo; on 192.168.0.1, wait until timeout (default 5 secs)&lt;/li>
&lt;li>&amp;ldquo;www.devel&amp;rdquo; on 192.168.0.2, get reply: no such hostname&lt;/li>
&lt;li>&amp;ldquo;www.devel&amp;rdquo; on 192.168.0.1, wait until timeout (default 5 secs)&lt;/li>
&lt;li>&amp;ldquo;www.devel&amp;rdquo; on 192.168.0.2, get reply: no such hostname&lt;/li>
&lt;li>&amp;ldquo;&lt;a href="https://www.devel.test.example.com">www.devel.test.example.com&lt;/a>&amp;rdquo; on 192.168.0.1, wait until timeout (default 5 secs)&lt;/li>
&lt;li>&amp;ldquo;&lt;a href="https://www.devel.test.example.com">www.devel.test.example.com&lt;/a>&amp;rdquo; on 192.168.0.2, reply no such hostname&lt;/li>
&lt;li>&amp;ldquo;&lt;a href="https://www.devel.test.example.com">www.devel.test.example.com&lt;/a>&amp;rdquo; on 192.168.0.1, wait until timeout (default 5 secs)&lt;/li>
&lt;li>&amp;ldquo;&lt;a href="https://www.devel.test.example.com">www.devel.test.example.com&lt;/a>&amp;rdquo; on 192.168.0.2, reply no such hostname&lt;/li>
&lt;li>&amp;ldquo;&lt;a href="https://www.devel.example.com">www.devel.example.com&lt;/a>&amp;rdquo; on 192.168.0.1, wait until timeout (default 5 secs)&lt;/li>
&lt;li>&amp;ldquo;&lt;a href="https://www.devel.example.com">www.devel.example.com&lt;/a>&amp;rdquo; on 192.168.0.2, reply with IP address&lt;/li>
&lt;/ol>
&lt;p>默认情况下是 5s 超时，我做了两个简单的测试，把 resolv.conf 的前三个 nameserver 全部换成不存在的 1.1.1.1, 2.2.2.2, 3.3.3.3，然后可以观察下面 strace 跟踪的结果，对于 ping 以及 getent 来说，已经算是上层的应用结果了。&lt;/p>
&lt;ol>
&lt;li>strace -t getent hosts baidu.com&lt;/li>
&lt;li>strace ping baidu.com&lt;/li>
&lt;/ol>
&lt;p>把 timeout 设置为 1s 的结果可以看下面这个测试结果:&lt;/p>
&lt;p>strace -t ping baidu.com(options timeout:1)&lt;/p>
&lt;h1 id="nsswitchconf-详解">nsswitch.conf 详解&lt;/h1>
&lt;p>该文件是纯 ASCII 文本，列由空格或制表符分隔。第一列指定数据库名称。其余列描述了要查询的源的顺序以及可以由查找结果执行的有限的一组操作。&lt;/p>
&lt;p>注意：如果是某个程序使用 nsswitch.conf 或者系统中没有该文件，则 /etc/hosts 文件也就不会被使用。&lt;/p>
&lt;p>示例配置：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>root&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>lichenhao:&lt;span style="color:#f92672">~/&lt;/span>test_dir&lt;span style="color:#f92672">/&lt;/span>c&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span> cat &lt;span style="color:#f92672">/&lt;/span>etc&lt;span style="color:#f92672">/&lt;/span>nsswitch.conf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># /etc/nsswitch.conf
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Example configuration of GNU Name Service Switch functionality.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># If you have the `glibc-doc-reference&amp;#39; and `info&amp;#39; packages installed, try:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># `info libc &amp;#34;Name Service Switch&amp;#34;&amp;#39; for information about this file.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>passwd: files systemd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>group: files systemd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>shadow: files
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gshadow: files
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hosts: files mdns4_minimal [NOTFOUND&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">return&lt;/span>] dns
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>networks: files
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>protocols: db files
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>services: db files
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ethers: db files
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rpc: db files
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>netgroup: nis
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>以下数据库由 GNU C 库理解:&lt;/p></description></item></channel></rss>