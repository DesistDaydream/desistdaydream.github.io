<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – TC 模块</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.Kernel/8.Network/Linux-%E7%BD%91%E7%BB%9C%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/TC-%E6%A8%A1%E5%9D%97/</link><description>Recent content in TC 模块 on 断念梦</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.Kernel/8.Network/Linux-%E7%BD%91%E7%BB%9C%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/TC-%E6%A8%A1%E5%9D%97/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: TC 模块</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.Kernel/8.Network/Linux-%E7%BD%91%E7%BB%9C%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/TC-%E6%A8%A1%E5%9D%97/TC-%E6%A8%A1%E5%9D%97/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.Kernel/8.Network/Linux-%E7%BD%91%E7%BB%9C%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/TC-%E6%A8%A1%E5%9D%97/TC-%E6%A8%A1%E5%9D%97/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/liucimin/Learning/blob/master/linux%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3/Linux-TC%E6%A1%86%E6%9E%B6%E8%AF%A6%E8%A7%A3.md">原文链接&lt;/a>
&lt;ul>
&lt;li>&lt;a href="http://www.lartc.org/LARTC-zh_CN.GB2312.pdf">Linux 的高级路由和流量控制&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.sdnlab.com/19208.html">Open vSwitch 之 QoS 的实现&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="http://arthurchiao.art/index.html">arthurchiao.art 的文章&lt;/a>：
&lt;ul>
&lt;li>&lt;a href="http://arthurchiao.art/blog/lartc-qdisc-zh/#91-%E9%98%9F%E5%88%97queues%E5%92%8C%E6%8E%92%E9%98%9F%E8%A7%84%E5%88%99queueing-disciplines">[译] 《Linux 高级路由与流量控制手册（2012）》第九章：用 tc qdisc 管理 Linux 网络带宽&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://arthurchiao.art/blog/understanding-tc-da-mode-zh/#5-%E5%AE%8C%E6%95%B4%E7%A4%BA%E4%BE%8Bebpf-%E7%A8%8B%E5%BA%8F--tc-%E5%91%BD%E4%BB%A4">[译] 深入理解 tc ebpf 的 direct-action (da) 模式（2020）&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Linux 中的 TC 模块已经在内核中存在很多年了，但是直到 eBPF 流行起来之前，文档以及使用者都非常之少，并仍处于活跃开发状态中。Kernel 4.1 版本中添加了一些新的 Hook，并支持将 eBPF 程序作为 tc classifier(也称为 filter) 或 tc action 加载到这些 Hook 点。大概六个月后，Kernel 4.4 版本发布时，iproute2 引入了一个 direct-action 模式，但是关于这个模式的&lt;a href="https://qmonnet.github.io/whirl-offload/2016/09/01/dive-into-bpf/#about-tc">文档依然少得可怜&lt;/a>。。。。。&lt;/p>
&lt;h2 id="glossary术语">Glossary(术语)&lt;/h2>
&lt;p>TC 是一个强大但复杂的框架。 它的&lt;strong>几个核心概念&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>queueing discipline(排队规则，简称 qdisc)&lt;/strong> # 根据某种算法完成限速、整形等功能&lt;/li>
&lt;li>&lt;strong>class&lt;/strong> # 用户定义的流量类别&lt;/li>
&lt;li>&lt;strong>classifier(分类器，也称为 filter)&lt;/strong> # 分类规则&lt;/li>
&lt;li>&lt;strong>action&lt;/strong> # 要对包执行什么动作&lt;/li>
&lt;/ul>
&lt;p>组合以上概念，下面是对某个网络设备上的流量进行分类和限速时，所需完成的大致步骤：&lt;/p>
&lt;ol>
&lt;li>为网络设备&lt;strong>创建一个 qdisc&lt;/strong>。
&lt;ul>
&lt;li>qdisc 是一个整流器/整形器（shaper），&lt;strong>可以包含多个 class&lt;/strong>，不同 class 可以应用不同的策略。&lt;/li>
&lt;li>qdisc 需要附着（attach）到某个网络接口（network interface），及流量方向（ingress or egress）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>创建流量类别（class）&lt;/strong>，并 attach 到 qdisc。
&lt;ul>
&lt;li>例如，根据带宽分类，创建高、中、低三个类别。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>创建 filter（classifier）&lt;/strong>，并 attach 到 qdisc。filters 用于&lt;strong>对网络设备上的流量进行分类&lt;/strong>，并&lt;strong>将包分发（dispatch）到前面定义的不同 class&lt;/strong>。filter 会对每个包进行过滤，返回下列值之一：
&lt;ul>
&lt;li>&lt;code>0&lt;/code>：表示 mismatch。如果后面还有其他 filters，则&lt;strong>继续对这个包应用下一个 filter&lt;/strong>。&lt;/li>
&lt;li>&lt;code>-1&lt;/code>：表示这个 filter 上配置的&lt;strong>默认 classid&lt;/strong>。&lt;/li>
&lt;li>其他值：&lt;strong>表示一个 classid&lt;/strong>。系统接下来应该将包送往这个指定的 class。可以看到，通过这种方式可以实现非线性分类（non-linear classification）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>另外，&lt;strong>可以给 filter 添加 action&lt;/strong>。例如，将选中的包丢弃（drop），或者将流量镜像到另一个网络设备等等。&lt;/li>
&lt;li>除此之外，qdisc 和 class 还可以循环嵌套，即： &lt;strong>class 里加入新 qdisc，然后新 qdisc 里又可以继续添加新 class&lt;/strong>， 最终形成的是一个以 root qdisc 为根的树。但对于本文接下来的内容，我们不需要了解这么多。&lt;/li>
&lt;/ol>
&lt;h1 id="tc-原理介绍">TC 原理介绍&lt;/h1>
&lt;p>Linux 中的 QoS 分为 入口(Ingress) 部分和 出口(Egress) 部分，入口部分主要用于进行入口流量限速(policing)，出口部分主要用于队列调度(queuingscheduling)。大多数排队规则(qdisc)都是用于输出方向的，输入方向只有一个排队规则，即 ingressqdisc。ingressqdisc 本身的功能很有限，输入方向只有一个排队规则，即 ingressqdisc（因为没有缓存只能实现流量的 drop）但可用于重定向 incomingpackets。通过 Ingressqdisc 把输入方向的数据包重定向到虚拟设备 ifb，而 ifb 的输出方向可以配置多种 qdisc，就可以达到对输入方向的流量做队列调度的目的。&lt;/p>
&lt;p>说白了，TC 模块就是进入 Netfilter 经典图中 5 个 Hook 之前和之后，添加 ingress 与 egress，这就是 TC 的 Hook，用来处理数据包的流入和流出。&lt;/p>
&lt;p>Ingress 限速只能对整个网卡入流量限速，无队列之分：&lt;/p>
&lt;p>Ingress 流量的限速&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>tc qdisc add dev eth0 ingress
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tc filter add dev eth0 parent ffff: protocol ip prio &lt;span style="color:#ae81ff">10&lt;/span> u32 match ipsrc 0.0.0.0/0 police rate 2048kbps burst 1m drop flowid :1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Egress 限速：&lt;/p>
&lt;p>Linux 操作系统中的流量控制器 TC(Traffic Control) 用于 Linux 内核的流量控制，它利用队列规定建立处理数据包的队列，并定义队列中的数据包被发送的方式，从而实现对流量的控制。TC 模块实现流量控制功能使用的队列规定分为两类，一类是无类队列规定，另一类是分类队列规定。无类队列规定相对简单，而分类队列规定则引出了分类和过滤器等概念，使其流量控制功能增强。&lt;/p>
&lt;p>&lt;strong>无类队列&lt;/strong>规定是对进入网络设备（网卡）的数据流不加区分统一对待的队列规定。使用无类队列规定形成的队列能够接收数据包以及重新编排、延迟或丢弃数据包。这类队列规定形成的队列可以对整个网络设备（网卡）的流量进行整形，但不能细分各种情况。常用的无类队列规定主要有 pfifo_fast（先进先出）、TBF（令牌桶过滤器）、SFQ（随机公平队列）、ID（前向随机丢包）等等。这类队列规定使用的流量整形手段主要是排序、限速和丢包。&lt;/p>
&lt;p>&lt;strong>分类队列&lt;/strong>规定是对进入网络设备的数据包根据不同的需求以分类的方式区分对待的队列规定。数据包进入一个分类的队列后，它就需要被送到某一个类中，也就是说需要对数据包做分类处理。对数据包进行分类的工具是过滤器，过滤器会返回一个决定，队列规定就根据这个决定把数据包送入相应的类进行排队。每个子类都可以再次使用它们的过滤器进行进一步的分类。直到不需要进一步分类时，数据包才进入该类包含的队列排队。除了能够包含其他队列规定之外，绝大多数分类的队列规定还能够对流量进行整形。这对于需要同时进行调度（如使用 SFQ）和流量控制的场合非常有用。&lt;/p>
&lt;p>Linux 流量控制的基本原理如下图所示。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/tc-module/20230119084348.png" alt="">&lt;/p>
&lt;p>接收包从输入接口（Input Interface）进来后，经过流量限制（Ingress Policing）丢弃不符合规定的数据包，由输入多路分配器（Input  De-Multiplexing）进行判断选择。如果接收包的目的地是本主机，那么将该包送给上层处理，否则需要进行转发，将接收包交到转发块（ForwardingBlock）处理。转发块同时也接收本主机上层（TCP、UDP 等）产生的包。转发块通过查看路由表，决定所处理包的下一跳。然后，对包进行排列以便将它们传送到输出接口（Output Interface）。&lt;/p>
&lt;p>&lt;strong>一般我们只能限制网卡发送的数据包，不能限制网卡接收的数据包&lt;/strong>，所以我们可以通过改变发送次序来控制传输速率。Linux 流量控制主要是在&lt;strong>输出接口排列&lt;/strong>时进行处理和实现的。&lt;/p>
&lt;h1 id="tc-规则">TC 规则&lt;/h1>
&lt;h2 id="1流量控制方式">1.流量控制方式&lt;/h2>
&lt;p>流量控制包括一下几种方式：&lt;/p>
&lt;h3 id="shaping限制">SHAPING（限制）&lt;/h3>
&lt;p>当流量被限制时，它的传输速率就被控制在某个值以下。限制值可以大大小于有效带宽，这样可以平滑突发数据流量，使网络更为稳定。SHAPING（限制）只适用于向外的流量。&lt;/p>
&lt;h3 id="scheduling调度">SCHEDULING（调度）&lt;/h3>
&lt;p>通过调度数据包的传输，可以在带宽范围内，按照优先级分配带宽。SCHEDULING（调度）也只适用于向外的流量。&lt;/p>
&lt;h3 id="policing策略">POLICING（策略）&lt;/h3>
&lt;p>SHAPING（限制）用于处理向外的流量，而 POLICING（策略）用于处理接收到的数据。&lt;/p>
&lt;h3 id="dropping丢弃">DROPPING（丢弃）&lt;/h3>
&lt;p>如果流量超过某个设定的带宽，就丢弃数据包，不管是向内还是向外。&lt;/p>
&lt;h2 id="2流量控制处理对象">2.流量控制处理对象&lt;/h2>
&lt;p>流量的处理由三种对象控制，它们是**：qdisc（排队规则）、class（类别）和 filter（过滤器**）。&lt;/p>
&lt;p>qdisc（排队规则）是 queueing discipline 的简写，它是理解流量控制（traffic control）的基础。**无论何时，内核如果需要通过某个网络接口发送数据包，它都需要按照为这个接口配置的 qdisc（排队规则）把数据包加入队列。**然后，内核会尽可能多的从 qdisc 里面取出数据包，把它们交给网络适配器驱动模块。最简单的 qdisc 是 pfifo 他不对进入的数据包做任何的处理，数据包采用先进先出的方式通过队列。不过，它会保存网络接口一时无法处 理的数据包。&lt;/p>
&lt;p>qddis（排队规则）分为 CLASSLESS QDISC 和 CLASSFUL QDISC   类别如下：&lt;/p>
&lt;h3 id="classless-qdisc-无类别-qdisc">CLASSLESS QDISC （无类别 QDISC）&lt;/h3>
&lt;h4 id="1无类别-qdisc-包括">1.无类别 QDISC 包括：&lt;/h4>
&lt;p>**              [ p | b ]fifo**,使用最简单的 qdisc（排队规则），纯粹的先进先出。只有一个参数：limit ，用来设置队列的长度，pfifo 是以数据包的个数为单位；bfifo 是以字节数为单位。&lt;/p>
&lt;hr>
&lt;p>**               pfifo_fast**，在编译内核时，如果打开了高级路由器（Advanced Router）编译选项，pfifo_fast 就是系统的标准 qdisc(排队规则)。它的队列包括三个波段（band）。在每个波段里面，使用先进先出规则。而三个波段（band）的优先级也不相同，band 0 的优先级最高，band 2 的最低。如果 band 0 里面有数据包，系统就不会处理 band 1 里面的数据包，band 1 和 band 2 之间也是一样的。数据包是按照服务类型（Type Of Service，TOS ）被分配到三个波段（band）里面的。&lt;/p>
&lt;p>**               red**，red 是 Random Early Detection（随机早期探测）的简写。如果使用这种 qdsic，当带宽的占用接近与规定的带宽时，系统会随机的丢弃一些数据包。他非常适合高带宽的应用。&lt;/p>
&lt;p>**              sfq**，sfq 是 Stochastic Fairness Queueing 的简写。它会按照会话（session &amp;ndash;对应与每个 TCP 连接或者 UDP 流）为流量进行排序，然后循环发送每个会话的数据包。&lt;/p>
&lt;p>**             tbf**，tbf 是 Token Bucket Filter 的简写，适用于把流速降低到某个值。&lt;/p>
&lt;h4 id="2无类别-qdisc-的配置">2.无类别 qdisc 的配置&lt;/h4>
&lt;p>如果没有可分类 qdisc，不可分类 qdisc 只能附属于设备的根。它们的用法如下:&lt;/p>
&lt;pre>&lt;code>tc qdisc add dev DEV root QDISC QDISC_PARAMETERS
&lt;/code>&lt;/pre>
&lt;p>要删除一个不可分类 qdisc，需要使用如下命令&lt;/p>
&lt;pre>&lt;code>tc qdisc del dev DEV root
&lt;/code>&lt;/pre>
&lt;p>一个网络接口上如果没有设置 qdisc，pfifo_fast 就作为缺省的 qdisc。&lt;/p>
&lt;h3 id="classful-qdisc分类-qdisc">CLASSFUL QDISC(分类 QDISC)&lt;/h3>
&lt;h4 id="可分类-qdisc-包括">可分类 QDISC 包括：&lt;/h4>
&lt;p>**   CBQ**，CBQ 是 Class Based Queueing（基于类别排队）的缩写。它实现了一个丰富的连接共享类别结构，既有限制（shaping）带宽的能力，也具有带宽优先级别管理的能力。带宽限制是通过计算连接的空闲时间完成的。空闲时间的计算标准是数据包离队事件的频率和下层连接（数据链路层）的带宽。&lt;/p>
&lt;p>** HTB**，HTB 是 Hierarchy Token Bucket 的缩写。通过在实践基础上的改进，它实现一个丰富的连接共享类别体系。使用 HTB 可以很容易地保证每个类别的带宽，虽然它也允许特定的类可以突破带宽上限，占用别的类的带宽。HTB 可以通过 TBF（Token Bucket Filter）实现带宽限制，也能够划分类别的优先级。&lt;/p>
&lt;p>&lt;strong>PRIO&lt;/strong>，PRIO qdisc 不能限制带宽，因为属于不同类别的数据包是顺序离队的。使用 PRIO qdisc 可以很容易对流量进行优先级管理，只有属于高优先级类别的数据包全部发送完毕，参会发送属于低优先级类别的数据包。为了方便管理，需要使用 iptables 或者 ipchains 处理数据包的服务类型（Type Of Service，TOS）。&lt;/p>
&lt;p>HTB 型的一些注意：
1. HTB 型 class 具有优先级，prio。可以指定优先级，数字低的优先级高，优先级范围从 0~7，0 最高。
它的效果是：存在空闲带宽时，优先满足高优先级 class 的需求，使得其可以占用全部空闲带宽，上限为 ceil 所指定的值。若此时还有剩余空闲带宽，则优先级稍低的 class 可以借用之。依优先级高低，逐级分配。&lt;/p>
&lt;pre>&lt;code>2. 相同优先级的class分配空闲带宽时，按照自身class所指定的rate（即保证带宽）之间的比例瓜分空闲带宽。
例如：clsss A和B优先级相同，他们的rate比为3：5，则class A占用空闲的3/8，B占5/8。
3. tc filter的prio使用提示，prio表示该filter的测试顺序，小的会优先进行测试，如果匹配到，则不会继续测试。故此filter 的prio跟class的prio并不一样，class的prio表明了此class的优先级：当有空闲带宽时prio 数值低的（优先级高）class会优先占用空闲。
若不同优先级的filter都可以匹配到包，则优先级高的filter起作用。相同优先级的filter（必须为同种类型classifier）严格按照命令的输入顺序进行匹配，先执行的filter起作用。
&lt;/code>&lt;/pre>
&lt;h4 id="操作原理">操作原理&lt;/h4>
&lt;p>**             **类（class）组成一个树，每个类都只有一个父类，而一个类可以有多个子类。某些 qdisc （例如：CBQ 和 HTB）允许在运行时动态添加类，而其它的 qdisc（例如：PRIO）不允许动态建立类。允许动态添加类的 qdisc 可以有零个或者多个子类，由它们为数据包排队。此外，每个类都有一个叶子 qdisc，默认情况下，这个也在 qdisc 有可分类，不过每个子类只能有一个叶子 qdisc。 当一个数据包进入一个分类 qdisc，它会被归入某个子类。我们可以使用一下三种方式为数据包归类，不过不是所有的 qdisc 都能够使用这三种方式。&lt;/p>
&lt;p>如果过滤器附属于一个类，相关的指令就会对它们进行查询。过滤器能够匹配数据包头所有的域，也可以匹配由 ipchains 或者 iptables 做的标记。&lt;/p>
&lt;p>树的每个节点都可以有自己的过滤器，但是高层的过滤器也可以一直接用于其子类。如果数据包没有被成功归类，就会被排到这个类的叶子 qdisc 的队中。相关细节在各个 qdisc 的手册页中。&lt;/p>
&lt;h4 id="命名规则">命名规则&lt;/h4>
&lt;p>所有的 qdisc、类、和过滤器都有 ID。ID 可以手工设置，也可以由内核自动分配。ID 由一个主序列号和一个从序列号组成，两个数字用一个冒号分开。&lt;/p>
&lt;p>qdisc，一个 qdisc 会被分配一个主序列号，叫做句柄（handle），然后把从序列号作为类的命名空间。句柄才有像 1:0 一样的表达方式。习惯上，需要为有子类的 qdisc 显式的分配一个句柄。&lt;/p>
&lt;p>类（Class），在同一个 qdisc 里面的类共享这个 qdisc 的主序列号，但是每个类都有自己的从序列号，叫做类识别符（classid）。类识别符只与父 qdisc 有关，与父类无关。类的命名习惯和 qdisc 相同。&lt;/p>
&lt;p>过滤器（Filter），过滤器的 ID 有三部分，只有在对过滤器进行散列组织才会用到。详情请参考 tc-filtes 手册页。&lt;/p>
&lt;h4 id="单位">单位&lt;/h4>
&lt;p>**            **tc 命令所有的参数都可以使用浮点数，可能会涉及到以下计数单位。&lt;/p>
&lt;h5 id="带宽或者流速单位">带宽或者流速单位：&lt;/h5>
&lt;h5 id="数据的数量单位">数据的数量单位&lt;/h5>
&lt;h5 id="时间的计量单位">时间的计量单位：&lt;/h5>
&lt;h1 id="tc-的安装">TC 的安装&lt;/h1>
&lt;p>TC 是 Linux 自带的模块，一般情况下不需要另行安装，可以用 man tc 查看 tc 相关命令细节，tc 要求内核 2.4.18 以上&lt;/p>
&lt;pre>&lt;code>TC的安装
TC是Linux自带的模块，一般情况下不需要另行安装，可以用 man tc 查看tc 相关命令细节，tc 要求内核 2.4.18 以上
&lt;/code>&lt;/pre>
&lt;h1 id="tc-命令">TC 命令&lt;/h1>
&lt;p>tc 可以使用以下命令对 qdisc、类和过滤器进行操作：&lt;/p>
&lt;p>add， 在一个节点里加入一个 qdisc、类、或者过滤器。添加时，需要传递一个祖先作为参数，传递参数时既可以使用 ID 也跨越式直接传递设备的根。如果要建立一个 qdisc 或者过滤器，可以使用句柄（handle）来命名。如果要建立一个类，可以使用类识别符（classid）来命名。&lt;/p>
&lt;p>remove， 删除由某个句柄（handle）指定的 qdisc，根 qdisc（root）也可以删除。被删除 qdisc 上所有的子类以及附属于各个类的过滤器都会被自动删除。&lt;/p>
&lt;p>change， 以替代的方式修改某些条目。除了句柄（handle）和祖先不能修改以外，change 命令的语法和 add 命令相同。换句话说，change 命令不能指定节点的位置。&lt;/p>
&lt;p>replace， 对一个现有节点进行近于原子操作的删除/添加。如果节点不存在，这个命令就会建立节点。&lt;/p>
&lt;p>link， 只适用于 qdisc，替代一个现有的节点。&lt;/p>
&lt;p>tc 命令的格式：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span> tc qdisc &lt;span style="color:#f92672">[&lt;/span> add | change | replace | link &lt;span style="color:#f92672">]&lt;/span> dev DEV &lt;span style="color:#f92672">[&lt;/span> parent qdisc-id | root &lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">[&lt;/span> handle qdisc-id &lt;span style="color:#f92672">]&lt;/span> qdisc &lt;span style="color:#f92672">[&lt;/span> qdisc specific parameters &lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tc class &lt;span style="color:#f92672">[&lt;/span> add | change | replace &lt;span style="color:#f92672">]&lt;/span> dev DEV parent qdisc-id &lt;span style="color:#f92672">[&lt;/span> classid class-id &lt;span style="color:#f92672">]&lt;/span> qdisc &lt;span style="color:#f92672">[&lt;/span> qdisc specific parameters &lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tc filter &lt;span style="color:#f92672">[&lt;/span> add | change | replace &lt;span style="color:#f92672">]&lt;/span> dev DEV &lt;span style="color:#f92672">[&lt;/span> parent qdisc-id | root &lt;span style="color:#f92672">]&lt;/span> protocol protocol prio priority filtertype &lt;span style="color:#f92672">[&lt;/span> filtertype specific param‐eters &lt;span style="color:#f92672">]&lt;/span> flowid flow-id
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tc &lt;span style="color:#f92672">[&lt;/span> FORMAT &lt;span style="color:#f92672">]&lt;/span> qdisc show &lt;span style="color:#f92672">[&lt;/span> dev DEV &lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tc &lt;span style="color:#f92672">[&lt;/span> FORMAT &lt;span style="color:#f92672">]&lt;/span> class show dev DEV
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tc filter show dev DEV
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">###### FORMAT := { -s[tatistics] | -d[etails] | -r[aw] | -p[retty] | i[ec] }&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="具体操作">具体操作&lt;/h1>
&lt;p>Linux 流量控制主要分为建立队列、建立分类和建立过滤器三个方面。&lt;/p>
&lt;h2 id="基本实现步骤">基本实现步骤&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>针对网络物理设备（如以太网卡 eth0）绑定一个队列 qdisc；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在该队列上建立分类 class；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>为每一分类建立一个基于路由的过滤器 filter；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>最后与过滤器相配合，建立特定的路由表。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="环境模拟实例">环境模拟实例&lt;/h2>
&lt;p>流量控制器上的以太网卡（eth0）的 IP 地址为 192.168.1.66， 在其上建立一个 CBQ 队列。假设包的平均大小为 1000 字节，包间隔发送单元的大小             为 8 字节，可接收冲突的发送最长包的数目为 20 字节。&lt;/p>
&lt;p>加入有三种类型的流量需要控制：&lt;/p>
&lt;p>1）是发往主机 1 的，其 IP 地址为 192.168.1.24。其流量带宽控制在 8Mbit，优先级为 2；&lt;/p>
&lt;p>2）是发往主机 2 的，其 IP 地址为 192.168.1.30。其流量带宽控制在 1Mbit，优先级为 1；&lt;/p>
&lt;p>3）是发往子网 1 的，其子网号为 192.168.1.0。子网掩码为 255.255.255.0。流量带宽控制在 1Mbit，优先级为 6。&lt;/p>
&lt;h2 id="建立队列">建立队列&lt;/h2>
&lt;p>一般情况下，针对一个网卡只需建立一个队列。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">###将一个cbq队列绑定到网络物理设备eth0上，其编号为1:0；网络物理设备eth0的实际带宽为10Mbit，包的平均大小为1000字节；包间隔发送单元的大小为8字节，最小传输包大小为64字节。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tc qdisc add dev eth0 root handle 1: cbq bandwidth 10Mbit avpkt &lt;span style="color:#ae81ff">1000&lt;/span> cell &lt;span style="color:#ae81ff">8&lt;/span> mpu &lt;span style="color:#ae81ff">64&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="建立分类">建立分类&lt;/h2>
&lt;p>一般情况下，针对一个队列需建立一个根分类，然后再在其上建立子分类。对于分类，按其分类的编号顺序起作用，编号小的优先；一但符合某个分类匹配规则，通过该分类发送数据包，则其后的分类不在起作用。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">##创建根分类1:1；分配带宽为10Mbit，优先级别为8.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tc class add dev eth0 parent 1:0 classid 1:1 cbq bandidth 10Mbit rate 10Mbit maxburst &lt;span style="color:#ae81ff">20&lt;/span> allot &lt;span style="color:#ae81ff">1514&lt;/span> prio &lt;span style="color:#ae81ff">8&lt;/span> avpkt &lt;span style="color:#ae81ff">1000&lt;/span> cell &lt;span style="color:#ae81ff">8&lt;/span> weight 1Mbit
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">###该队列的最大可用带宽为10Mbit，实际分配的带宽为10Mbit，可接收冲突的发送最长包数目为20字节；最大传输单元加MAC头的大小为1514字节，优先级别为8，包的平均大小为1000字节，包间隔发送单元的大小为8字节，相当于实际带宽的加权速率为1Mbit。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">## 创建分类1:2，其父类为1:1，分配带宽为 8Mbit， 优先级别为2.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tc class add dev eth0 parent 1:1 cbq bandwidth 10Mbit rate 8Mbit maxburst &lt;span style="color:#ae81ff">20&lt;/span> allot &lt;span style="color:#ae81ff">1514&lt;/span> prio &lt;span style="color:#ae81ff">2&lt;/span> avpkt &lt;span style="color:#ae81ff">1000&lt;/span> cell &lt;span style="color:#ae81ff">8&lt;/span> weight 800Kbit split 1:0 bounded
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">## 该队列的最大可用带宽为10Mbit，实际分配的带宽为8Mbit，可接收冲突的发送最长包数目为20字节；最大传输单元加MAC头的大小为1514字节，优先级别为2，包的平均大小为1000字节，包间隔发送单元的大小为8字节，相当于实际带宽的加权速率为800Kbit，分类的分离点为1:0，且不可借用未使用带宽。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">## 创建分类 1:4，其父分类为1:1，分配带宽为1Mbit，优先级别为6。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tc class add dev eth0 parent 1:1 classid 1:4 cbq bandwidth &lt;span style="color:#ae81ff">10&lt;/span> Mbit rate 1Mbit maxburst &lt;span style="color:#ae81ff">20&lt;/span> allot &lt;span style="color:#ae81ff">1514&lt;/span> prio &lt;span style="color:#ae81ff">6&lt;/span> avpkt &lt;span style="color:#ae81ff">1000&lt;/span> cell &lt;span style="color:#ae81ff">8&lt;/span> weight 100Kbit split 1:0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">## 该队列的最大可用带宽为10Mbit，实际分配的带宽为1Mbit，可接收冲突的发送最长包数目为20字节；最大传输单元加MAC头的大小为1514字节，优先级别为6，包的平均大小为1000字节，包间隔发送单元的大小为8字节，相当于实际带宽的加权速率为100Kbit，分类的分离点为1:0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="创建过滤器">创建过滤器&lt;/h2>
&lt;p>过滤器主要服务于分类。&lt;/p>
&lt;p>一般只需针对根分类提供一个过滤器，然后为每个子分类提供路由映射。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">## 1)应用路由分类器到cbq队列的根，父分类编号为1:0；过滤协议为ip，优先级别为100，过滤器为基于路由表。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tc filter add dev eth0 parent 1:0 protocol ip prio &lt;span style="color:#ae81ff">100&lt;/span> route
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">## 2)建立路由映射分类 1:2 , 1:3 , 1:4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tc filter add dev eth0 parent 1:0 protocol ip prio &lt;span style="color:#ae81ff">100&lt;/span> route to &lt;span style="color:#ae81ff">2&lt;/span> flowid 1:2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tc filter add dev eth0 parent 1:0 protocol ip prio &lt;span style="color:#ae81ff">100&lt;/span> route to &lt;span style="color:#ae81ff">3&lt;/span> flowid 1:3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tc filter add dev eth0 parent 1:0 protocol ip prio &lt;span style="color:#ae81ff">100&lt;/span> route to &lt;span style="color:#ae81ff">4&lt;/span> flowid 1:4
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="建立路由">建立路由&lt;/h2>
&lt;p>该路由是与前面所建立的路由映射一一对应。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 1)发往主机192.168.1.24的数据包通过分类2转发（分类2的速率8Mbit）&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ip route add 192.168.1.24 dev eth0 via 192.168.1.66 realm &lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 2)发往主机192.168.1.30的数据包通过分类3转发（分类3的速率1Mbit）&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ip route add 192.168.1.30 dev eth0 via 192.168.1.66 realm &lt;span style="color:#ae81ff">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 3)发往子网192.168.1.0/24 的数据包通过分类4转发（分类4的速率1Mbit）&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ip route add 192.168.1.0/24 dev eth0 via 192.168.1.66 realm &lt;span style="color:#ae81ff">4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>注：一般对于流泪控制器所直接连接的网段建议使用IP主机地址流量控制限制，不要使用子网流量控制限制。如一定需要对直连子网使用子网流量控制限制，则在建立该子网的路由映射前，需将原先由系统建立的路由删除，才可以完成相应步骤
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="监视">监视&lt;/h2>
&lt;p>主要包括对现有队列、分类、过滤器和路由状况进行监视。&lt;/p>
&lt;p>1）显示队列的状况&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">## 简单显示指定设备（这里为eth0）的队列状况&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tc qdisc ls dev eth0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> qdisc cbq 1: rate 10Mbit &lt;span style="color:#f92672">(&lt;/span>bounded,isolated&lt;span style="color:#f92672">)&lt;/span> prio no-transmit
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">## 详细显示指定设备（这里为eth0）的队列状况&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tc -s qdisc ls dev eth0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> qdisc cbq 1: rate 10Mbit &lt;span style="color:#f92672">(&lt;/span>bounded,isolated&lt;span style="color:#f92672">)&lt;/span> prio no-transmit
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Sent &lt;span style="color:#ae81ff">7646731&lt;/span> bytes &lt;span style="color:#ae81ff">13232&lt;/span> pkts &lt;span style="color:#f92672">(&lt;/span>dropped 0, overlimits 0&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> borrowed &lt;span style="color:#ae81ff">0&lt;/span> overactions &lt;span style="color:#ae81ff">0&lt;/span> avgidle &lt;span style="color:#ae81ff">31&lt;/span> undertime &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">## 这里主要显示了通过该队列发送了13232个数据包，数据流量为7646731个字节，丢弃的包数目为0，超过速率限制的包数目为0。&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>2）显示分类的状况&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">## 简单显示指定设备（这里为eth0）的分类状况&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tc class ls dev eth0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> class cbq 1: root rate 10Mbit &lt;span style="color:#f92672">(&lt;/span>bounded,isolated&lt;span style="color:#f92672">)&lt;/span> prio no-transmit
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> class cbq 1:1 parent 1: rate 10Mbit prio no-transmit
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> class cbq 1:2 parent 1:1 rate 8Mbit prio &lt;span style="color:#f92672">(&lt;/span>bounded&lt;span style="color:#f92672">)&lt;/span> prio &lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> class cbq 1:3 parent 1:1 rate 1Mbit prio &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> class cbq 1:4 parent 1:1 rate 1Mbit prio &lt;span style="color:#ae81ff">6&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">## 详细显示指定设备（这里为eth0）的分类状况&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tc -s class ls dev eth0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> class cbq 1: root rate 10000Kbit &lt;span style="color:#f92672">(&lt;/span>bounded,isolated&lt;span style="color:#f92672">)&lt;/span> prio no-transmit
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Sent &lt;span style="color:#ae81ff">17725304&lt;/span> bytes &lt;span style="color:#ae81ff">32088&lt;/span> pkt &lt;span style="color:#f92672">(&lt;/span>dropped 0, overlimits &lt;span style="color:#ae81ff">0&lt;/span> requeues 0&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> backlog 0b 0p requeues &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> borrowed &lt;span style="color:#ae81ff">0&lt;/span> overactions &lt;span style="color:#ae81ff">0&lt;/span> avgidle &lt;span style="color:#ae81ff">31&lt;/span> undertime &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> class cbq 1:1 parent 1: rate 10000Kbit prio no-transmit
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Sent &lt;span style="color:#ae81ff">16627774&lt;/span> bytes &lt;span style="color:#ae81ff">28884&lt;/span> pkts &lt;span style="color:#f92672">(&lt;/span>dropped 0, overlimits &lt;span style="color:#ae81ff">0&lt;/span> requeues 0&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> backlog 0b 0p requeues &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> borrowed &lt;span style="color:#ae81ff">16163&lt;/span> overactions &lt;span style="color:#ae81ff">0&lt;/span> avgidle &lt;span style="color:#ae81ff">587&lt;/span> undertime &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> class cbq 1:2 parent 1:1 rate 8000Kbit &lt;span style="color:#f92672">(&lt;/span>bounded&lt;span style="color:#f92672">)&lt;/span> prio &lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Sent &lt;span style="color:#ae81ff">628829&lt;/span> bytes &lt;span style="color:#ae81ff">3130&lt;/span> pkts &lt;span style="color:#f92672">(&lt;/span>dropped 0, overlimits &lt;span style="color:#ae81ff">0&lt;/span> requeues 0&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> backlog 0b 0p requeues &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> borrowed &lt;span style="color:#ae81ff">0&lt;/span> overactions &lt;span style="color:#ae81ff">0&lt;/span> avgidle &lt;span style="color:#ae81ff">4137&lt;/span> undertime &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> class cbq 1:3 parent 1:1 rate 1000Kbit prio &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Sent &lt;span style="color:#ae81ff">0&lt;/span> bytes &lt;span style="color:#ae81ff">0&lt;/span> pkts &lt;span style="color:#f92672">(&lt;/span>dropped 0, overlimits &lt;span style="color:#ae81ff">0&lt;/span> requeues 0&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> backlog 0b 0p requeues &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> borrowed &lt;span style="color:#ae81ff">0&lt;/span> overactions &lt;span style="color:#ae81ff">0&lt;/span> avgidle 3.19309e+06 undertime &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> class cbq 1:4 parent 1:1 rate 1000Kbit prio &lt;span style="color:#ae81ff">6&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Sent &lt;span style="color:#ae81ff">552879&lt;/span> bytes &lt;span style="color:#ae81ff">8076&lt;/span> pkts &lt;span style="color:#f92672">(&lt;/span>dropped 0, overlimits &lt;span style="color:#ae81ff">0&lt;/span> requeues 0&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> backlog 0b 0p requeues &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> borrowed &lt;span style="color:#ae81ff">3797&lt;/span> overactions &lt;span style="color:#ae81ff">0&lt;/span> avgidle &lt;span style="color:#ae81ff">159557&lt;/span> undertime &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">##这里主要显示了通过不同分类发送的数据包，数据流量，丢弃的包数目，超过速率限制的包数目等等。其中根分类(class cbq 1:0)的状况与队列的状况类似&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">##例如，分类class cbq 1:4 发送了8076个包，数据流量为 552879 个字节，丢弃的包数目为0，超过速率限制的包数目为0。&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>3）显示过滤器的状况&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span> tc -s filter ls dev eth0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> filter parent 1: protocol ip pref &lt;span style="color:#ae81ff">100&lt;/span> route
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> filter parent 1: protocol ip pref &lt;span style="color:#ae81ff">100&lt;/span> route fh 0xffff0002 flowid 1:2 to &lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> filter parent 1: protocol ip pref &lt;span style="color:#ae81ff">100&lt;/span> route fh 0xffff0003 flowid 1:3 to &lt;span style="color:#ae81ff">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> filter parent 1: protocol ip pref &lt;span style="color:#ae81ff">100&lt;/span> route fh 0xffff0004 flowid 1:4 to &lt;span style="color:#ae81ff">4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">## 这里flowid 1:2 代表分类 class cbq 1:2, to 2 代表通过路由 2 发送&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>4）显示现有路由的状况&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span> ip route
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> default via 192.168.1.1 dev eth0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 192.168.1.0/24 dev eth0 proto kernel scope link src 192.168.1.66
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 192.168.1.24 via 192.168.1.66 dev eth0 realm &lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 192.168.1.30 via 192.168.1.66 dev eth0 realm &lt;span style="color:#ae81ff">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">#如上所示，结尾包含有realm 的显示行是起作用的路由过滤器。&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="维护">维护&lt;/h2>
&lt;p>主要包括对队列、分类、过滤器和路由的增添、修改和删除。&lt;/p>
&lt;p>增添动作一般依照   队列 -&amp;gt; 分类 -&amp;gt; 过滤器 -&amp;gt; 路由   的顺序进行；修改动作则没有什么要求；删除则依照   路由 -&amp;gt; 过滤器 -&amp;gt; 分类 -&amp;gt; 队列   的顺序进行。&lt;/p>
&lt;p>1）队列的维护&lt;/p>
&lt;p>一般对于一台流量控制器来说，出厂时针对每个以太网卡均已配置好一个队列了，通常情况下对队列无需进行增添、修改和删除动作。&lt;/p>
&lt;p>2）分类的维护&lt;/p>
&lt;p>增添，增添动作通过 tc class add 命令实现，如前面所示。&lt;/p>
&lt;p>修改，修改动作通过 tc class change 命令实现，如下所示：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>tc class change dev eth0 parent 1:1 classid 1:2 cbq bandwidth 10Mbit rate 7Mbit maxburst &lt;span style="color:#ae81ff">20&lt;/span> allot &lt;span style="color:#ae81ff">1514&lt;/span> prio &lt;span style="color:#ae81ff">2&lt;/span> avpkt &lt;span style="color:#ae81ff">1000&lt;/span> cell &lt;span style="color:#ae81ff">8&lt;/span> weigth 700Kbit split 1:0 bounded
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>对于 bounded 命令应慎用，一旦添加后就进行修改，只可通过删除后再添加来实现。&lt;/p>
&lt;p>删除，删除动作只在该分类没有工作前才可以进行，一旦通过该分类发送过数据，则无法删除它。因此，需要通过 shell 文件方式来修改，通过重新启动来完成删除动作。&lt;/p>
&lt;p>3）过滤器的维护&lt;/p>
&lt;p>增添，增添动作通过 tc filter add 命令实现，如前面所示。&lt;/p>
&lt;p>修改，修改动作通过 tc filter change 命令实现，如下所示：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>tc filter change dev eth0 parent 1:0 protocol ip prio &lt;span style="color:#ae81ff">100&lt;/span> route to &lt;span style="color:#ae81ff">10&lt;/span> flowid 1:8
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code> 删除，删除动作通过 tc filter del 命令实现，如下所示：
&lt;/code>&lt;/pre>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>tc filter del dev eth0 parent 1:0 protocol ip prio &lt;span style="color:#ae81ff">100&lt;/span> route to &lt;span style="color:#ae81ff">10&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>4)与过滤器————映射路由的维护&lt;/p>
&lt;p>增添，增添动作通过 ip route add 命令实现，如前面所示。&lt;/p>
&lt;p>修改，修改动作通过 ip route change 命令实现，如下所示：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span> ip route change 192.168.1.30 dev eth0 via 192.168.1.66 realm &lt;span style="color:#ae81ff">8&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code> 删除，删除动作通过 ip route del 命令实现，如下所示：
&lt;/code>&lt;/pre>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span> ip route del 192.168.1.30 dev eth0 via 192.168.1.66 realm &lt;span style="color:#ae81ff">8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ip route del 192.168.1.0/24 dev eth0 via 192.168.1.66 realm &lt;span style="color:#ae81ff">4&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>