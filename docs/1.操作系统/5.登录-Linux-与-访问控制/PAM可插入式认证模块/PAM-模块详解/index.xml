<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – PAM 模块详解</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E7%99%BB%E5%BD%95-Linux-%E4%B8%8E-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/PAM%E5%8F%AF%E6%8F%92%E5%85%A5%E5%BC%8F%E8%AE%A4%E8%AF%81%E6%A8%A1%E5%9D%97/PAM-%E6%A8%A1%E5%9D%97%E8%AF%A6%E8%A7%A3/</link><description>Recent content in PAM 模块详解 on 断念梦</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E7%99%BB%E5%BD%95-Linux-%E4%B8%8E-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/PAM%E5%8F%AF%E6%8F%92%E5%85%A5%E5%BC%8F%E8%AE%A4%E8%AF%81%E6%A8%A1%E5%9D%97/PAM-%E6%A8%A1%E5%9D%97%E8%AF%A6%E8%A7%A3/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: PAM 模块详解</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E7%99%BB%E5%BD%95-Linux-%E4%B8%8E-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/PAM%E5%8F%AF%E6%8F%92%E5%85%A5%E5%BC%8F%E8%AE%A4%E8%AF%81%E6%A8%A1%E5%9D%97/PAM-%E6%A8%A1%E5%9D%97%E8%AF%A6%E8%A7%A3/PAM-%E6%A8%A1%E5%9D%97%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E7%99%BB%E5%BD%95-Linux-%E4%B8%8E-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/PAM%E5%8F%AF%E6%8F%92%E5%85%A5%E5%BC%8F%E8%AE%A4%E8%AF%81%E6%A8%A1%E5%9D%97/PAM-%E6%A8%A1%E5%9D%97%E8%AF%A6%E8%A7%A3/PAM-%E6%A8%A1%E5%9D%97%E8%AF%A6%E8%A7%A3/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;/blockquote>
&lt;h1 id="pam-的各模块说明">PAM 的各模块说明&lt;/h1>
&lt;p>全局参数&lt;/p>
&lt;ul>
&lt;li>file=/PATH/TO/FILE # 用于指定统计次数存放的位置，默认保存在/var/log/tallylog 文件中；&lt;/li>
&lt;li>onerr # 当意外发生时，返加 PAM_SUCCESS 或 pam 错误代码，一般该项不进行配置；&lt;/li>
&lt;li>audit # 如果登录的用户不存在，则将访问信息写入系统日志；&lt;/li>
&lt;li>silent # 静默模式，不输出任何日志信息；&lt;/li>
&lt;li>no_log_info # 不打印日志信息通过 syslog&lt;/li>
&lt;li>上面的五项全局参数，一般在使用中都不需要单独配置。&lt;/li>
&lt;/ul>
&lt;h1 id="pam_faillock--在指定的时间间隔内计算身份验证失败">pam_faillock # 在指定的时间间隔内计算身份验证失败&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://man.cx/pam_faillock">Manual(手册),pam_faillock(8)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://man.cx/faillock.conf(5)">Manual(手册),faillock.conf(5)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/dev-sec/ansible-collection-hardening/issues/377">https://github.com/dev-sec/ansible-collection-hardening/issues/377&lt;/a>&lt;/li>
&lt;li>红帽官方文档,安全指南-账户锁
&lt;ul>
&lt;li>&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/security_guide/chap-hardening_your_system_with_tools_and_services#sect-Security_Guide-Workstation_Security-Account_Locking">https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/security_guide/chap-hardening_your_system_with_tools_and_services#sect-Security_Guide-Workstation_Security-Account_Locking&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>提供 auth、account 管理类型的模块&lt;/p>
&lt;p>pam_faillock 模块在指定的时间间隔内维护每个账户在尝试进行身份验证时的失败事件，并且在连续失败时锁定账户。&lt;/p>
&lt;p>pam_faillock 与大部分模块有一点不同，不建议在 PAM 规则中配置参数，而是推荐使用默认的 /etc/security/faillock.conf 配置文件中配置参数&lt;/p>
&lt;h2 id="关联文件">关联文件&lt;/h2>
&lt;p>&lt;strong>/etc/security/faillock.conf&lt;/strong> # 运行时配置文件。除了在 /etc/pam.d/* 文件中配置模块的参数，还可以通过这个文件配置模块的参数。
&lt;strong>/var/run/faillock/*&lt;/strong> # 记录用户身份验证失败的事件。目录中的文件名以用户名命名&lt;/p>
&lt;h2 id="模块参数">模块参数&lt;/h2>
&lt;p>&lt;strong>preauth | authfail | authsucc&lt;/strong> #
&lt;strong>conf=&amp;lt;/PATH/TO/FILE&amp;gt;&lt;/strong> # 指定要使用的配置文件路径。&lt;/p>
&lt;h2 id="应用示例">应用示例&lt;/h2>
&lt;p>登录失败 3 次会锁定用户 60 秒，账户登录失败 3 次 锁定 30 秒&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span> sudo tee /etc/pam.d/password-auth-local &amp;gt; /dev/null &lt;span style="color:#e6db74">&amp;lt;&amp;lt;EOF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">auth required pam_faillock.so preauth audit deny=3 even_deny_root unlock_time=60 root_unlock_time=30
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">auth include password-auth-ac
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">auth [default=die] pam_faillock.so authfail audit deny=3 even_deny_root unlock_time=60 root_unlock_time=30
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">account required pam_faillock.so
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">account include password-auth-ac
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">password include password-auth-ac
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">session include password-auth-ac
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ln -sf /etc/pam.d/password-auth-local /etc/pam.d/password-auth
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意：由于 password-auth-ac 中有 pam_succeed_if.so uid &amp;gt;= 1000 quiet_success 这样一条规则，所以上述配置对 root 账户不起作用。&lt;/p>
&lt;h2 id="命令行工具">命令行工具&lt;/h2>
&lt;h3 id="faillock">faillock&lt;/h3>
&lt;p>&lt;strong>faillock [OPTIONS]&lt;/strong>
管理登录失败锁定记录的工具&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>root@LNDL-PSC-SCORE-PM-OS04-EBRS-HA02 pam.d&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># faillock&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>developer:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>When Type Source Valid
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2021-10-21 21:42:50 RHOST 172.16.10.11 V
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>When Type Source Valid
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2021-10-21 21:42:41 RHOST 172.16.10.11 V
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>OPTIONS&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&amp;ndash;user &amp;lt;USERNAME&amp;gt;&lt;/strong> # 指定要处理的用户名称&lt;/li>
&lt;li>&lt;strong>&amp;ndash;reset&lt;/strong> # 清除失败记录，解除锁定&lt;/li>
&lt;/ul>
&lt;h1 id="pam_nologin">pam_nologin&lt;/h1>
&lt;p>这个模块可以限制一般用户是否能够登入主机之用。当 /etc/nologin 这个文件存在时，则所有一般使用者均无法再登入系统了！若 /etc/nologin 存在，则一般使用者在登入时， 在他们的终端机上会将该文件的内容显示出来！所以，正常的情况下，这个文件应该是不能存在系统中的。 但这个模块对 root 以及已经登入系统中的一般账号并没有影响。&lt;/p>
&lt;h1 id="pam_pwhistory--记住最后的密码">pam_pwhistory # 记住最后的密码&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://man7.org/linux/man-pages/man8/pam_pwhistory.8.html">Manual(手册),pam_pwhistory(8)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>该模块用于记住用户设置过的密码，以防止用户在修改密码时频繁交替得使用相同的密码&lt;/p>
&lt;h2 id="关联文件-1">关联文件&lt;/h2>
&lt;p>&lt;strong>/etc/security/opasswd&lt;/strong> # 用户设置过的历史密码将会以加密方式保存在该文件中。&lt;/p>
&lt;h2 id="模块参数-1">模块参数&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>remember=INT&lt;/strong> # 用户设置过的 remember 个密码将会保存在 /etc/security/opasswd 文件中。&lt;code>默认值：10&lt;/code>。值为 0 时，模块将会保持 opasswd 文件的现有内容不变&lt;/li>
&lt;/ul>
&lt;h1 id="pam_pwquality--密码质量检查">pam_pwquality # 密码质量检查&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/libpwquality/libpwquality/">GitHub 项目，libpwquality/libpwquality&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://man.cx/pam_pwquality">Manual(手册)，pam_pwquality(8)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>pam_pwquality 模块属于 libpwquality 库，最初基于 pam_cracklib 模块，用以执行密码质量检查。仅提供 password 模块类型。&lt;/p>
&lt;blockquote>
&lt;p>注意：在红帽企业 Linux 7 中，pam_pwquality PAM 模块取代 pam_cracklib，该模块在红帽企业 Linux 6 中用作密码质量检查的默认模块。它使用与 pam_cracklib 相同的后端。详见&lt;a href="https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/7/html/security_guide/chap-hardening_your_system_with_tools_and_services">红帽官网&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>该模块的作用是提示用户输入密码，并根据系统字典和一组识别不良选择的规则检查其强度。第一个操作是提示输入一个密码，检查其强度，然后，如果认为强度高，则第二次提示输入密码（以验证第一次输入的密码是否正确）。一切顺利，密码将传递给后续模块以作为新的身份验证令牌安装。&lt;/p>
&lt;p>模块可以提供如下几种类型的检查&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Palindrome(回文)&lt;/strong>#&lt;/li>
&lt;li>&lt;strong>Case Change Only(仅大小写更改)&lt;/strong> # 新密码是否与旧密码相同，只是大小写不同？&lt;/li>
&lt;li>&lt;strong>Similar(相似)&lt;/strong> # 新密码是不是太像旧密码了？这主要由一个参数 difok 控制，它是旧密码和新密码之间足以接受新密码的一系列字符更改（插入、删除或替换）。&lt;/li>
&lt;li>&lt;strong>Rotated(旋转的)&lt;/strong> # Is the new password a rotated version of the old password?新密码是旧密码的轮换版本吗？&lt;/li>
&lt;li>&lt;strong>Same consecutive characters(相同的连续字符)&lt;/strong> # Optional check for same consecutive characters.可选检查相同的连续字符。&lt;/li>
&lt;li>&lt;strong>Too long monotonic character sequence(太长的单调字符序列)&lt;/strong> # 可选检查太长的单调字符序列。&lt;/li>
&lt;li>&lt;strong>Contains user name(包含用户名)&lt;/strong> # 检查密码是否包含某种形式的用户名。&lt;/li>
&lt;li>&lt;strong>Dictionary check(字典检查)&lt;/strong> # 调用 Cracklib 例程来检查密码是否是字典的一部分。&lt;/li>
&lt;/ul>
&lt;p>上述这些检查可以通过使用模块参数或通过修改 &lt;code>/etc/security/pwquality.conf&lt;/code> 配置文件来配置。模块参数 j 覆盖配置文件中的设置。&lt;/p>
&lt;h2 id="关联文件-2">关联文件&lt;/h2>
&lt;p>&lt;strong>/etc/security/pwquality.conf&lt;/strong> # 模块运行时配置文件
&lt;strong>/usr/lib64/security/pam_pwquality.so&lt;/strong> # 模块文件&lt;/p>
&lt;h2 id="模块参数-2">模块参数&lt;/h2>
&lt;p>通用参数&lt;/p>
&lt;ul>
&lt;li>&lt;strong>retry=&amp;lt;N&amp;gt;&lt;/strong> # 重试次数。&lt;code>默认值：1&lt;/code>。允许用户输入密码错误的最大次数、对于输入新密码时的情况，则是允许用户输入不符合要求的新密码的最大次数。&lt;/li>
&lt;/ul>
&lt;p>设置新密码时执行检查的参数，某些参数的值为 -1 时，表示新密码至少需要有 1 位数字、大写字母、特殊字符 等等。值为 0 表示禁用检查。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>minlen=&amp;lt;N&amp;gt;&lt;/strong> # 新密码的最小字符数。&lt;code>默认值：8&lt;/code>&lt;/li>
&lt;li>&lt;strong>dcredit=&amp;lt;N&amp;gt;&lt;/strong> # 新密码中包含的 **digit(数字)**的字符数。&lt;/li>
&lt;li>&lt;strong>ucredit=&amp;lt;N&amp;gt;&lt;/strong> # 新密码中包含的 **uppercase(大写字母)**的字符数。&lt;/li>
&lt;li>&lt;strong>lcredit=&amp;lt;N&amp;gt;&lt;/strong> # 新密码中包含的 &lt;strong>lowercase(小写字母)&lt;/strong> 的字符数。&lt;/li>
&lt;li>&lt;strong>ocredit=&amp;lt;N&amp;gt;&lt;/strong> # 新密码中包含的 &lt;strong>other(其他字符)&lt;/strong> 的字符数。其他字符就是特殊字符&lt;/li>
&lt;li>&lt;strong>minclass=&amp;lt;N&amp;gt;&lt;/strong> # 新密码中包含的字符类型的数量。&lt;code>默认值：0&lt;/code> 共有 4 中字符类型可用：
&lt;ul>
&lt;li>digits(数字)&lt;/li>
&lt;li>uppercase(大写字母)&lt;/li>
&lt;li>lettercase(小写字母)&lt;/li>
&lt;li>other(其他字符)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="应用示例-1">应用示例&lt;/h2>
&lt;p>输入错误最多 3 次，至少 14 个字符，其中 大写字母、小写字母、数字、特殊符号 这四类字符每类至少有一个。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>pam_pwquality.so try_first_pass retry&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span> minlen&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">14&lt;/span> dcredit&lt;span style="color:#f92672">=&lt;/span>-1 ucredit&lt;span style="color:#f92672">=&lt;/span>-1 ocredit&lt;span style="color:#f92672">=&lt;/span>-1 lcredit&lt;span style="color:#f92672">=&lt;/span>-1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="pwqualityconf-文件示例">pwquality.conf 文件示例&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>minlen &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">14&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lcredit &lt;span style="color:#f92672">=&lt;/span> -1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ucredit &lt;span style="color:#f92672">=&lt;/span> -1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dcredit &lt;span style="color:#f92672">=&lt;/span> -1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ocredit &lt;span style="color:#f92672">=&lt;/span> -1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="pam_succeed_if--测试账户特性">pam_succeed_if # 测试账户特性&lt;/h1>
&lt;p>pam_succeed_if 模块旨在根据 &lt;strong>账户的特征&lt;/strong>或 其他&lt;/p>
&lt;p>说白了，从编程角度看，这就是一个典型的 if&amp;hellip;else&amp;hellip; 控制结构，在一组规则栈中，通过使用该模块，对一些条件进行判断。&lt;/p>
&lt;p>比如&lt;/p>
&lt;ul>
&lt;li>&lt;code>pam_succeed_if.so uid &amp;gt;= 1000&lt;/code> 表示调用该模块的程序所使用的账号的 uid 要是大于等于 1000，则模块返回成功&lt;/li>
&lt;li>&lt;code>pam_succeed_if.so service in crond&lt;/code> 表示调用该模块的程序是 crond 的话，则模块返回成功。&lt;/li>
&lt;/ul>
&lt;p>该模块的常见用途就是根据该模块的条件测试结果，决定是否加载其他模块。&lt;/p>
&lt;h2 id="模块参数-3">模块参数&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>quiet_success&lt;/strong> # 若模块返回成功，则不要将验证事件记录到系统日志中。&lt;/li>
&lt;li>&lt;strong>use_uid&lt;/strong> # 使用运行应用程序的 UID 的用户的帐户而不是正在验证的用户来评估条件。&lt;/li>
&lt;li>&lt;strong>Conditions(条件)&lt;/strong> # 条件参数由 3 部分组成：&lt;code>Field Test Value&lt;/code>。
&lt;ul>
&lt;li>可用的 Field 有：user、uid、gid、shell、home、ruser、rhost、tty、service&lt;/li>
&lt;li>可用的 Test 有：&lt;code>&amp;lt;&lt;/code> &lt;code>&amp;lt;=&lt;/code> &lt;code>eq&lt;/code> &lt;code>&amp;gt;=&lt;/code> &lt;code>&amp;gt;&lt;/code> &lt;code>ne&lt;/code> &lt;code>=&lt;/code> &lt;code>!=&lt;/code> &lt;code>=~&lt;/code> &lt;code>!~&lt;/code> &lt;code>in&lt;/code> &lt;code>not in&lt;/code>&lt;/li>
&lt;li>比如：
&lt;ul>
&lt;li>&lt;strong>uid &amp;gt;= 1000&lt;/strong> # 表示运行程序所使用的账号的 uid 要是大于 1000，则模块返回成功&lt;/li>
&lt;li>更多语法说明，详见 Manual。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="应用示例-2">应用示例&lt;/h2>
&lt;p>该模块非常容易造成 PAM 认证时的结果与想要的结果产生偏差，比如在 CentOS7 下，/etc/pam.d/password-auth-ac 的配置如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>auth required pam_env.so
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>auth required pam_faildelay.so delay&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">2000000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>auth sufficient pam_unix.so nullok try_first_pass
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>auth requisite pam_succeed_if.so uid &amp;gt;&lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1000&lt;/span> quiet_success
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>auth required pam_deny.so
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>此时，我们想要使用 pam_faillock 模块配置一下账户认证失败后锁定的功能，如果将配置修改为如下样子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>auth required pam_env.so
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>auth required pam_faillock.so preauth audit deny&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span> even_deny_root unlock_time&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">60&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>auth required pam_faildelay.so delay&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">2000000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>auth sufficient pam_unix.so nullok try_first_pass
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>auth requisite pam_succeed_if.so uid &amp;gt;&lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1000&lt;/span> quiet_success
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>auth &lt;span style="color:#f92672">[&lt;/span>default&lt;span style="color:#f92672">=&lt;/span>die&lt;span style="color:#f92672">]&lt;/span> pam_faillock.so authfail audit deny&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span> even_deny_root unlock_time&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">60&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>auth required pam_deny.so
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>此时，所有 uid 小于 1000 的，包括 root 账户，都是无法享受到第 6 行规则的效果的，因为当执行到第 5 行时，发现此次认证行为的账户是 root(uid=0) 则直接返回失败，不在执行第 6 行的规则了~~&lt;/p>
&lt;h1 id="pam_unix--传统密码认证">pam_unix # 传统密码认证&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://man7.org/linux/man-pages/man8/pam_unix.8.html">Manual(手册),pam_unix(8)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>注意：推荐使用 pam_pwquality 模块与 pam_unix 模块配合使用&lt;/p>
&lt;p>若是不满足密码强度要求，将会出现类似如下的提示：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>root@common-centos-test pam.d&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># passwd developer&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Changing password &lt;span style="color:#66d9ef">for&lt;/span> user developer.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>New password:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>BAD PASSWORD: The password contains less than &lt;span style="color:#ae81ff">1&lt;/span> uppercase letters
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Retype new password:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>BAD PASSWORD: The password fails the dictionary check - it is too simplistic/systematic
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意：root 用户修改任何用户的密码不受此模块限制，只有普通用户修改自己的密码时才有效。&lt;/p>
&lt;h2 id="模块参数-4">模块参数&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>nullok&lt;/strong> # 此模块的默认操作是，如果用户的官方密码为空，则不允许用户访问服务。nullok 参数覆盖此默认值。&lt;/li>
&lt;li>&lt;strong>try_first_pass&lt;/strong> # 这个选项指示本模块首先尝试使用已有的密码，即从第一个向用户提示输入密码的模块那里取得密码，并对该密码进行认证。如果密码认证失败，则再提示用户输入密码。&lt;/li>
&lt;li>&lt;strong>use_authtok&lt;/strong> # “use_authtok”参数确保 pam_unix 模块不会提示输入密码，而是使用 pam_pwquality 提供的密码。&lt;/li>
&lt;li>&lt;strong>密码要求参数&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>minlen=INT&lt;/strong> # 密码长度最少 minlen 位&lt;/li>
&lt;li>&lt;strong>difok=INT&lt;/strong> # 新旧密码最少 difok 个字符不同&lt;/li>
&lt;li>&lt;strong>icredit=-1&lt;/strong> # 最少 1 个数字.&lt;/li>
&lt;li>&lt;strong>lcredit=-1&lt;/strong> # 最少 1 个小写字符&lt;/li>
&lt;li>&lt;strong>ucredit=-1&lt;/strong> # 最少 1 个大写字符&lt;/li>
&lt;li>&lt;strong>ocredit=-1&lt;/strong> # 最少 1 个特殊字符&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="heading">&lt;/h1></description></item><item><title>Docs: pam_limits 模块</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E7%99%BB%E5%BD%95-Linux-%E4%B8%8E-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/PAM%E5%8F%AF%E6%8F%92%E5%85%A5%E5%BC%8F%E8%AE%A4%E8%AF%81%E6%A8%A1%E5%9D%97/PAM-%E6%A8%A1%E5%9D%97%E8%AF%A6%E8%A7%A3/pam_limits-%E6%A8%A1%E5%9D%97/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E7%99%BB%E5%BD%95-Linux-%E4%B8%8E-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/PAM%E5%8F%AF%E6%8F%92%E5%85%A5%E5%BC%8F%E8%AE%A4%E8%AF%81%E6%A8%A1%E5%9D%97/PAM-%E6%A8%A1%E5%9D%97%E8%AF%A6%E8%A7%A3/pam_limits-%E6%A8%A1%E5%9D%97/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://man7.org/linux/man-pages/man8/pam_limits.8.html">Manual(手册)，pam_limits(8)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.man7.org/linux/man-pages/man5/limits.conf.5.html">Manula(手册)，limits.conf(5)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>应用场景：我的 Linux 主机里面同时登入了十个人，这十个人不知怎么搞的， 同时开启了 100 个文件，每个文件的大小约 10M ，请问一下， 我的 Linux 主机的内存要有多大才够？ 10&lt;em>100&lt;/em>10 = 10000M = 10G &amp;hellip; 老天爷，这样，系统不挂点才有鬼哩！为了要预防这个情况 的发生，所以我们是可以『限制用户的某些系统资源』的，包括可以开启的文件数量， 可以使用的 CPU 时间，可以使用的内存总量等等。除了这个模块有这个限制功能外，bash 还自带 ulimit 命令可以实现这个功能。&lt;/p>
&lt;ul>
&lt;li>限制用户会话过程中对各种系统资源的使用情况，默认情况下该模块的配置文件是/etc/security/limits.conf&lt;/li>
&lt;li>该配置文件中的参数，可以通过 &lt;code>ulimit -a&lt;/code> 命令查看&lt;/li>
&lt;/ul>
&lt;h1 id="关联文件与配置">关联文件与配置&lt;/h1>
&lt;p>&lt;strong>/etc/security/&lt;/strong> #&lt;/p>
&lt;ul>
&lt;li>&lt;strong>/etc/security/limits.conf&lt;/strong> # 限制用户会话过程中对各种系统资源的使用情况的配置文件&lt;/li>
&lt;/ul>
&lt;h2 id="配置文件语法">配置文件语法&lt;/h2>
&lt;p>&lt;strong>/etc/security/limit.conf 文件语法格式：&lt;/strong>&lt;/p>
&lt;pre>&lt;code>&amp;lt;domain&amp;gt; &amp;lt;type&amp;gt; &amp;lt;item&amp;gt; &amp;lt;value&amp;gt;
XXX XXXX XXXX XXXX
用户名/组名 限制类型 要限制的项目 具体值
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>&lt;strong>domain&lt;/strong> # 设置需要被限制的用户名或组名，组名前面加@和用户名区别。也可使用通配符 &lt;code>*&lt;/code> 来表示所有用户&lt;/li>
&lt;li>&lt;strong>type&lt;/strong> # 在设定上，通常 soft 会比 hard 小，举例来说，soft 可设定为 80 而 hard 设定为 100，那么你可以使用到 90 (因为没有超过 100)，但介于 80~100 之间时，系统会有警告讯息通知你！
&lt;ul>
&lt;li>hard # 严格的设定，指设定的 value 必定不能超过设定的数值&lt;/li>
&lt;li>soft # 警告的设定，指设定的 value 可以超过设定值，但是若超过则有警告讯息。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>item&lt;/strong> # 指定要限制的项目
&lt;ul>
&lt;li>core # 限制内核文件的大小&lt;/li>
&lt;li>何谓 core 文件,当一个程序崩溃时，在进程当前工作目录的 core 文件中复制了该进程的存储图像。core 文件仅仅是一个内存映象（同时加上调试信息），主要是用来调试的。core 文件是个二进制文件，需要用相应的工具来分析程序崩溃时的内存映像，系统默认 core 文件的大小为 0，所以没有被创建。可以用 ulimit 命令查看和修改 core 文件的大小，例如：ulimit -c 1000 # 指定修改 core 文件的大小，1000 指定了 core 文件大小。也可以对 core 文件的大小不做限制，如： ulimit -c unlimited&lt;/li>
&lt;li>date # 最大数据大小&lt;/li>
&lt;li>fsize # 最大文件大小&lt;/li>
&lt;li>memlock # 最大锁定内存地址空间&lt;/li>
&lt;li>nofile # 打开文件的最大数目，默认为 1024&lt;/li>
&lt;li>对于需要做许多套接字连接并使它们处于打开状态的应用程序而言，最好通过使用 ulimit -n，或者通过设置 nofile 参数，为用户把文件描述符的数量设置得比默认值高一些&lt;/li>
&lt;li>rss # 最大持久设置大小&lt;/li>
&lt;li>stack # 最大栈大小&lt;/li>
&lt;li>cpu # 以分钟为单位的最多 CPU 时间&lt;/li>
&lt;li>nproc # 打开进程的最大数&lt;/li>
&lt;li>as # 地址空间限制&lt;/li>
&lt;li>maxlogins # 此用户允许登录的最大数目&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>value&lt;/strong> # 指定 item 中具体项目的值
&lt;ul>
&lt;li>NUM # 可以是具体的数值&lt;/li>
&lt;li>unlimited # 表示无限制的&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="security-目录下文件的配置示例">security 目录下文件的配置示例&lt;/h2>
&lt;p>/etc/security/limits.conf 配置文件示例&lt;/p>
&lt;p>如图所示，左边的是 limit.conf 的配置，意思是所有用户的可以打开的文件最大数为 1000000，然后通过 bash 内嵌命令 ulimit -a 可以查看到右图的效果&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/xg1n26/1616166776345-13a61424-8c05-47a2-af4a-aac10869dcaa.png" alt="">&lt;/p>
&lt;p>注意：在 CentOS 7 &amp;amp; Ubuntu 系统中，使用 Systemd 替代了之前的 SysV。/etc/security/limits.conf 文件的配置作用域缩小了。/etc/security/limits.conf 的配置，只适用于通过 PAM 认证登录用户的资源限制，它对 systemd 的 service 的资源限制不生效。因此登录用户的限制，通过 /etc/security/limits.conf 与 /etc/security/limits.d 下的文件设置即可。对于 systemd service 的资源设置，则需修改全局配置，全局配置文件放在 /etc/systemd/system.conf 和 /etc/systemd/user.conf。&lt;/p>
&lt;p>DefaultLimitNOFILE=100000 # 对应 max openfile&lt;/p>
&lt;p>DefaultLimitNPROC=65535 # 对应 max processes&lt;/p>
&lt;h1 id="命令行工具">命令行工具&lt;/h1>
&lt;h2 id="ulimit">ulimit&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://man7.org/linux/man-pages/man1/ulimit.1p.html">Manual(手册)，ulimit(1p)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>临时更改或者查看当前登录用户的资源限制情况。&lt;/p>
&lt;p>注意：该命令只可在当前 shell 环境中生效，如果想要让配置永久生效，需要修改/etc/security/limit.conf 文件&lt;/p>
&lt;p>OPTIONS&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-a&lt;/strong> # 显示所有限制 All current limits are reported&lt;/li>
&lt;li>-b # The maximum socket buffer size&lt;/li>
&lt;li>-c # core 文件大小的上限 The maximum size of core files created&lt;/li>
&lt;li>-d # 进程数据段大小的上限 The maximum size of a process&amp;rsquo;s data segment&lt;/li>
&lt;li>-e # The maximum scheduling priority (&amp;ldquo;nice&amp;rdquo;)&lt;/li>
&lt;li>-f # shell 所能创建的文件大小的上限 The maximum size of files written by the shell and its children&lt;/li>
&lt;li>-i # The maximum number of pending signals&lt;/li>
&lt;li>-l # The maximum size that may be locked into memory&lt;/li>
&lt;li>-m # 驻留内存大小的上限 The maximum resident set size (many systems do not honor this limit)&lt;/li>
&lt;li>&lt;strong>-n&lt;/strong> # 打开文件数的上限 The maximum number of open file descriptors (most systems do not allow this value to be set)&lt;/li>
&lt;li>-p # 管道大小 The pipe size in 512-byte blocks (this may not be set)&lt;/li>
&lt;li>-q # The maximum number of bytes in POSIX message queues&lt;/li>
&lt;li>-r # The maximum real-time scheduling priority&lt;/li>
&lt;li>-s # 堆栈大小的上限 The maximum stack size&lt;/li>
&lt;li>-t # 每秒可占用的 CPU 时间上限 The maximum amount of cpu time in seconds&lt;/li>
&lt;li>-u # 进程数的上限 The maximum number of processes available to a single user&lt;/li>
&lt;li>-v # 虚拟内存的上限 The maximum amount of virtual memory available to the shell and, on some systems, to its children&lt;/li>
&lt;li>-x # The maximum number of file locks&lt;/li>
&lt;li>-T # The maximum number of threads&lt;/li>
&lt;/ul>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>ulimit -n 1000 #&lt;/li>
&lt;/ul>
&lt;h1 id="优化实例">优化实例&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>cat &amp;gt;&amp;gt; /etc/security/limits.d/max-openfile.conf &lt;span style="color:#e6db74">&amp;lt;&amp;lt; EOF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">* soft nproc 1000000
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">* hard nproc 1000000
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">* soft nofile 1000000
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">* hard nofile 1000000
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>cat /dev/urandom | head -1 | md5sum | head -c 32 &amp;raquo; /pass # 生成 32 位随机密码&lt;/p></description></item></channel></rss>