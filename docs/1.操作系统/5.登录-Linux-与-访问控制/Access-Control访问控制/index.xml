<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – Access Control(访问控制)</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E7%99%BB%E5%BD%95-Linux-%E4%B8%8E-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/Access-Control%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/</link><description>Recent content in Access Control(访问控制) on 断念梦</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E7%99%BB%E5%BD%95-Linux-%E4%B8%8E-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/Access-Control%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Access Control(访问控制)</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E7%99%BB%E5%BD%95-Linux-%E4%B8%8E-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/Access-Control%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/Access-Control%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E7%99%BB%E5%BD%95-Linux-%E4%B8%8E-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/Access-Control%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/Access-Control%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Discretionary_access_control">Wiki,DAC&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Linux 使用 &lt;strong>Discretionary Access Control(自主访问控制，简称 DAC)&lt;/strong> 概念控制所有文件的基本权限。&lt;/p>
&lt;p>Linux 中每个文件都具有三个拥有者：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>user&lt;/strong> # 文件的属主，拥有文件的&lt;strong>一个 Linux Account(账户)&lt;/strong>&lt;/li>
&lt;li>&lt;strong>group&lt;/strong> # 文件的属组，拥有文件的&lt;strong>一组 Linux Account(账户)&lt;/strong>&lt;/li>
&lt;li>&lt;strong>other&lt;/strong> # 文件的其他，拥有该文件的&lt;strong>其他 Linux Account(账户)&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>上述三个角色，可以被赋予三个基本权限&lt;/p>
&lt;ul>
&lt;li>&lt;strong>read&lt;/strong> # 读，简写为 r&lt;/li>
&lt;li>&lt;strong>write&lt;/strong> # 写，简写为 w&lt;/li>
&lt;li>&lt;strong>execute&lt;/strong> # 执行，简写为 x&lt;/li>
&lt;/ul>
&lt;p>我们使用 &lt;code>ls -l&lt;/code> 命令查看文件，可以从第 1 列看到文件的类型与权限&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># ls -lh&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>total 20K
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lrwxrwxrwx. &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">7&lt;/span> May &lt;span style="color:#ae81ff">24&lt;/span> &lt;span style="color:#ae81ff">2019&lt;/span> bin -&amp;gt; usr/bin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dr-xr-xr-x. &lt;span style="color:#ae81ff">5&lt;/span> root root 4.0K May &lt;span style="color:#ae81ff">24&lt;/span> &lt;span style="color:#ae81ff">2019&lt;/span> boot
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#ae81ff">20&lt;/span> root root 3.1K May &lt;span style="color:#ae81ff">14&lt;/span> 09:38 dev
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x. &lt;span style="color:#ae81ff">82&lt;/span> root root 8.0K Jun &lt;span style="color:#ae81ff">21&lt;/span> 19:42 etc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>......
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>第 1 列共 11 个字符，中间 9 个字符用以表示文件的基本权限，最后一个字符是文件的 ACL 与 SELinux 属性。格式与说明如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>示例&lt;/th>
&lt;th>文件类型&lt;/th>
&lt;th>属主权限&lt;/th>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;th>属组权限&lt;/th>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;th>其他权限&lt;/th>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;th>ACL 与 SELinux&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>读&lt;/td>
&lt;td>写&lt;/td>
&lt;td>执行&lt;/td>
&lt;td>读&lt;/td>
&lt;td>写&lt;/td>
&lt;td>执行&lt;/td>
&lt;td>读&lt;/td>
&lt;td>写&lt;/td>
&lt;td>执行&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>示例 1&lt;/td>
&lt;td>l&lt;/td>
&lt;td>r&lt;/td>
&lt;td>w&lt;/td>
&lt;td>x&lt;/td>
&lt;td>r&lt;/td>
&lt;td>w&lt;/td>
&lt;td>x&lt;/td>
&lt;td>r&lt;/td>
&lt;td>w&lt;/td>
&lt;td>x&lt;/td>
&lt;td>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>示例 2&lt;/td>
&lt;td>d&lt;/td>
&lt;td>r&lt;/td>
&lt;td>-&lt;/td>
&lt;td>x&lt;/td>
&lt;td>r&lt;/td>
&lt;td>-&lt;/td>
&lt;td>x&lt;/td>
&lt;td>r&lt;/td>
&lt;td>-&lt;/td>
&lt;td>x&lt;/td>
&lt;td>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>示例 3&lt;/td>
&lt;td>d&lt;/td>
&lt;td>r&lt;/td>
&lt;td>w&lt;/td>
&lt;td>x&lt;/td>
&lt;td>r&lt;/td>
&lt;td>-&lt;/td>
&lt;td>x&lt;/td>
&lt;td>r&lt;/td>
&lt;td>-&lt;/td>
&lt;td>x&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>中间 9 个字符分为 3 个组，分别对应文件的 3 种拥有者：&lt;/p>
&lt;ul>
&lt;li>第一组为文件的属主权限&lt;/li>
&lt;li>第二组为文件的属组权限&lt;/li>
&lt;li>第三组为文件的其他权限&lt;/li>
&lt;/ul>
&lt;p>每组的 3 个字符都符合如下规则：&lt;/p>
&lt;ul>
&lt;li>第一个字符表示是否有“读取”权限，为 &lt;code>r&lt;/code> 或 &lt;code>-&lt;/code>&lt;/li>
&lt;li>第二个字符表示是否有“写入”权限，为 &lt;code>w&lt;/code> 或 &lt;code>-&lt;/code>&lt;/li>
&lt;li>第三个字符表示是否有“执行”权限，为 &lt;code>x&lt;/code> 或 &lt;code>-&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>若为 &lt;code>-&lt;/code> 符号时，表示没有对应的权限&lt;/p>
&lt;p>简单示例&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-rw&amp;mdash;&amp;mdash;-&lt;/strong> # 表明了文件的拥有者对文件有 读、写 的权限，但是没有运行的权限。也很好理解，因为这是一个普通文件，默认没有可执行的属性。记住：如果有 w 权限（写的权限），那么表明也有删除此文件的权限。&lt;/li>
&lt;li>&lt;strong>&amp;mdash;-r&amp;mdash;&amp;ndash;&lt;/strong> # 表明文件所在的群组内的用户只可以读此文件，但不能写也不能执行。&lt;/li>
&lt;li>&lt;strong>&amp;mdash;&amp;mdash;-r&amp;ndash;&lt;/strong> # 表示其他用户只可以读此文件，但不能写也不能执行。&lt;/li>
&lt;/ul>
&lt;h1 id="权限管理工具">权限管理工具&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://man7.org/linux/man-pages/man1/chmod.1.html">Manual(手册),chmod&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://man7.org/linux/man-pages/man1/chown.1.html">Manual(手册),chown&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Linux 所说的权限，就是用户和组的权限。这是最基本的权限。后面的文章中还会介绍高级权限。&lt;/p>
&lt;h2 id="chmod--修改文件的访问权限命令">chmod # 修改文件的访问权限命令&lt;/h2>
&lt;p>Linux/Unix 的文件权限分为三级 : 文件拥有者、文件所属组、其他。利用 chmod 可以控制文件如何被他人所调用。&lt;/p>
&lt;h3 id="syntax语法">Syntax(语法)&lt;/h3>
&lt;p>&lt;strong>chmod [OPTIONS] MODE[,MODE]&amp;hellip; FILE&amp;hellip;&lt;/strong>
&lt;strong>chmod [OPTIONS] OCTAL-MODE FILE&amp;hellip;&lt;/strong>
&lt;strong>chmod [OPTIONS] &amp;ndash;reference=RFILE FILE&amp;hellip;&lt;/strong>&lt;/p>
&lt;p>MODE 格式如下 : &lt;code>[ugoa][[+-=][rwxX]…][,…]&lt;/code>，其中&lt;/p>
&lt;ul>
&lt;li>&lt;strong>[ugoa]&lt;/strong> # u 表示该档案的拥有者，g 表示与该档案的拥有者属于同一个群体(group)者，o 表示其他以外的人，a 表示这三者皆是。&lt;/li>
&lt;li>&lt;strong>[+-=]&lt;/strong> # &lt;code>+&lt;/code> 表示增加权限、&lt;code>-&lt;/code> 表示取消权限、&lt;code>=&lt;/code> 表示唯一设定权限。&lt;/li>
&lt;li>&lt;strong>[rwxX]&lt;/strong> # 表示可读取，w 表示可写入，x 表示可执行。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>OPTIONS&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>-c, &amp;ndash;changes # like verbose but report only when a change is made&lt;/li>
&lt;li>&lt;strong>-f, &amp;ndash;silent, &amp;ndash;quiet&lt;/strong> # 静默模式&lt;/li>
&lt;li>-&lt;strong>v, &amp;ndash;verbose&lt;/strong> # 诊断模式，显示完整的执行过程&lt;/li>
&lt;li>&amp;ndash;no-preserve-root do not treat &amp;lsquo;/&amp;rsquo; specially (the default)&lt;/li>
&lt;li>&amp;ndash;preserve-root # fail to operate recursively on &amp;lsquo;/&amp;rsquo;&lt;/li>
&lt;li>&amp;ndash;reference=RFILE use RFILE&amp;rsquo;s mode instead of MODE values&lt;/li>
&lt;li>&lt;strong>-R, &amp;ndash;recursive&lt;/strong> # 递归方式设置，即修改指定目录及其所有子目录和其内文件的权限。&lt;/li>
&lt;/ul>
&lt;h3 id="example">EXAMPLE&lt;/h3>
&lt;ul>
&lt;li>修改当前目录及子目录内所有目录类型文件，并将这些目录的权限改为 755
&lt;ul>
&lt;li>&lt;strong>find ./* -type d -exec chmod 755 {} ;&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>修改当前目录及子目录内所有普通类型文件，并将这些文件的权限改为 644
&lt;ul>
&lt;li>&lt;strong>find ./* -type f -exec chmod 644 {} ;&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>文件 file.txt 的所有者增加读和运行的权限。
&lt;ul>
&lt;li>chmod u+rx file.txt&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>文件 file.txt 的群组其他用户增加读的权限。
&lt;ul>
&lt;li>chmod g+r file.txt&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>文件 file.txt 的其他用户移除读的权限。
&lt;ul>
&lt;li>chmod o-r file.txt&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>文件 file.txt 的群组其他用户增加读的权限，其他用户移除读的权限。
&lt;ul>
&lt;li>chmod g+r o-r file.txt&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>文件 file.txt 的群组其他用户和其他用户均移除读的权限。
&lt;ul>
&lt;li>chmod go-r file.txt&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>文件 file.txt 的所有用户增加运行的权限。
&lt;ul>
&lt;li>chmod +x file.txt&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>文件 file.txt 的所有者分配读，写和执行的权限；群组其他用户分配读的权限，不能写或执行；其他用户没有任何权限。
&lt;ul>
&lt;li>chmod u=rwx,g=r,o=- file.txt&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>递归执行赋权，设置 newname 文件夹权限
&lt;ul>
&lt;li>chmod -R 700 /home/newname&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="chown--改变文件的所有者命令">chown # 改变文件的所有者命令&lt;/h2>
&lt;h3 id="syntax语法-1">Syntax(语法)&lt;/h3>
&lt;p>&lt;strong>chown [OPTION] [OWNER][:[GROUP]] FILE&amp;hellip;&lt;/strong>
&lt;strong>chown [OPTION] &amp;ndash;reference=RFILE FILE&amp;hellip;&lt;/strong>&lt;/p>
&lt;p>-c, &amp;ndash;changes like verbose but report only when a change is made&lt;/p>
&lt;p>-f, &amp;ndash;silent, &amp;ndash;quiet suppress most error messages&lt;/p>
&lt;p>-v, &amp;ndash;verbose output a diagnostic for every file processed&lt;/p>
&lt;pre>&lt;code> --dereference affect the referent of each symbolic link (this is
the default), rather than the symbolic link itself
&lt;/code>&lt;/pre>
&lt;p>-h, &amp;ndash;no-dereference affect symbolic links instead of any referenced file&lt;/p>
&lt;pre>&lt;code> (useful only on systems that can change the
ownership of a symlink)
--from=当前所有者:当前所属组
只当每个文件的所有者和组符合选项所指定时才更改所
&lt;/code>&lt;/pre>
&lt;p>有者和组。其中一个可以省略，这时已省略的属性就不&lt;/p>
&lt;p>需要符合原有的属性。&lt;/p>
&lt;pre>&lt;code> --no-preserve-root do not treat '/' specially (the default)
--preserve-root fail to operate recursively on '/'
--reference=RFILE use RFILE's owner and group rather than
specifying OWNER:GROUP values
&lt;/code>&lt;/pre>
&lt;p>-R, &amp;ndash;recursive operate on files and directories recursively&lt;/p>
&lt;p>The following options modify how a hierarchy is traversed when the -R&lt;/p>
&lt;p>option is also specified. If more than one is specified, only the final&lt;/p>
&lt;p>one takes effect.&lt;/p>
&lt;p>-H if a command line argument is a symbolic link&lt;/p>
&lt;pre>&lt;code> to a directory, traverse it
&lt;/code>&lt;/pre>
&lt;p>-L traverse every symbolic link to a directory&lt;/p>
&lt;pre>&lt;code> encountered
&lt;/code>&lt;/pre>
&lt;p>-P do not traverse any symbolic links (default)&lt;/p>
&lt;h3 id="example-1">EXAMPLE&lt;/h3>
&lt;ul>
&lt;li>改变文件的用户（用 ls -l 可以快速查看原用户和组），后接新的所有者的用户名，再接文件名：
&lt;ul>
&lt;li>chown newname file.txt&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>chown 命令也可以改变文件的群组，如下：
&lt;ul>
&lt;li>chown newname:friends file.txt # 将 file.txt 文件的用户改为 newname，所属用户组修改为 friends&lt;/li>
&lt;li>chown root /u # 将 /u 的属主更改为&amp;quot;root&amp;quot;&lt;/li>
&lt;li>chown root:staff /u # 和上面类似，但同时也将其属组更改为&amp;quot;staff&amp;quot;&lt;/li>
&lt;li>chown -hR root /u # 将 /u 及其子目录下所有文件的属主更改为&amp;quot;root&amp;quot;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="chattr-与-lsattr">chattr 与 lsattr&lt;/h2>
&lt;p>chattr 工具可以修改文件属性，添加了 &lt;code>i&lt;/code> 属性的文件将无法被编辑，即使是 root 用户也不行。&lt;/p>
&lt;p>chattr # 改变 Linux 文件系统上的文件属性&lt;/p>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>为 /etc/passwd 文件添加 i 属性
&lt;ul>
&lt;li>chattr +i /etc/passwd&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>为 /etc/passwd 文件去除 i 属性
&lt;ul>
&lt;li>chattr -i /etc/passwd&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>lsattr # 查看 Linux 文件系统上的文件属性&lt;/p></description></item><item><title>Docs: ACL</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E7%99%BB%E5%BD%95-Linux-%E4%B8%8E-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/Access-Control%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/ACL/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E7%99%BB%E5%BD%95-Linux-%E4%B8%8E-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/Access-Control%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/ACL/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/system_administrators_guide/ch-access_control_lists">红帽官方文档,RedHat7-系统管理员指南-第五章.访问控制列表&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Access Control Lists(访问控制列表，简称 ACL)&lt;/strong>。Linux 权限管理是 Linux 很重要的一项内容，重则引起用户信息泄露，轻则导致文件错乱和丢失。企业服务器里有些目录下面的东西暂时保密，不希望别人可以进入目录并查看。有些文件希望别人可以看，但不能删除。有些目录只有 root 等管理员权限的账户才能修改，&lt;/p>
&lt;p>Linux 服务器供多个人登录使用，要是没有权限管理就乱了，大家都一样的权限。有些维护系统的命令比较复杂，经验丰富的管理员运行这些命令没事，普通新用户运行的话，可以会导致 Linux 服务器瘫痪。&lt;/p>
&lt;p>就像咱们日常生活中，全世界人的权限都一样不就乱了吗。&lt;/p>
&lt;p>今天我们来介绍一下 Linux 权限管理的 ACL 权限，它是用户管理结束之后必须要经历的一步。Linux 系统的用户管理包括 Linux 用户和用户组管理之相关配置文件，用户管理的相关配置文件，内容有用户信息文件/etc/passwd，用户密码文件/etc/shadow；用户组信息文件/etc/group，用户组密码文件/etc/gshadow。用户的家目录，以及用户的模板目录； Linux 用户和用户组管理之用户管理命令，管理用户和用户组的命令，包括新建、修改、查看等等以及用的比较多的切换用户命令 su。&lt;/p>
&lt;p>下面我们正式开始介绍：&lt;/p>
&lt;p>1、什么是 ACL 权限？&lt;/p>
&lt;p>比如有如下场景：&lt;/p>
&lt;p>某大牛在 QQ 群内直播讲解 Linux 系统的权限管理，讲解完之后，他在一个公有的 Linux 系统中创建了一个 /project 目录，里面存放的是课后参考资料。那么 /project 目录对于大牛而言是所有者，拥有读写可执行（rwx）权限，对于 QQ 群内的所有用户他们都分配的一个所属组里面，也都拥有读写可执行（rwx）权限，而对于 QQ 群外的其他人，那么我们不给他访问/project 目录的任何权限，那么 /project 目录的所有者和所属组权限都是（rwx），其他人权限无。&lt;/p>
&lt;p>问题来了，这时候直播有旁听的人参与（不属于 QQ 群内），听完之后，我们允许他访问/project 目录查看参考资料，但是不能进行修改，也就是拥有（r-x）的权限，这时候我们该怎么办呢？我们知道一个文件只能有一个所属组，我们将他分配到 QQ 群所在的所属组内，那么他拥有了写的权限，这是不被允许的；如果将这个旁听的人视为目录/project 的其他人，并且将/project 目录的其他人权限改为（r-x），那么不是旁听的人也能访问我们/project 目录了，这显然也是不被允许的。怎么解决呢？&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/wwngi2/1616166788266-55102010-3c01-4999-953f-5264545bba2a.png" alt="">&lt;/p>
&lt;p>我们想想 windows 系统里面给某个文件分配权限的办法：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/wwngi2/1616166788426-4edff74a-9b30-43c9-a8c4-688c5ecadba2.png" alt="">&lt;/p>
&lt;p>如上图，我们想要让某个用户不具备某个权限，直接不给他分配这个目录的相应权限就行了。那么对应到 Linux 系统也是这样，我们给指定的用户指定目录分配指定的权限，也就是 ACL 权限分配。&lt;/p>
&lt;h2 id="查看分区-acl-权限是否开启dump2fs">查看分区 ACL 权限是否开启：dump2fs&lt;/h2>
&lt;p>我们看某个文件（Linux 系统中目录也是文件，一切皆是文件）是否支持 ACL 权限，首先要看文件所在的分区是否支持 ACL 权限。&lt;/p>
&lt;p>①、查看当前系统有哪些分区：df -h&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/wwngi2/1616166788270-02fa6473-8187-498a-910b-641f376cd11c.png" alt="">&lt;/p>
&lt;p>②、查看指定分区详细文件信息：dumpe2fs -h 分区路径&lt;/p>
&lt;p>下面是查看 根分区/ 的详细文件信息&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/wwngi2/1616166788208-6d15dfed-e275-4812-81cf-66f42bc9965b.png" alt="">&lt;/p>
&lt;p>回到顶部&lt;/p>
&lt;h3 id="开启分区-acl-权限">开启分区 ACL 权限&lt;/h3>
&lt;p>临时开启分区 ACL 权限&lt;/p>
&lt;pre>&lt;code>mount -o remount,acl /
&lt;/code>&lt;/pre>
&lt;p>重新挂载根分区，并挂载加入 acl 权限。注意这种命令开启方式，如果系统重启了，那么根分区权限会恢复到初始状态。&lt;/p>
&lt;p>永久开启分区 ACL 权限
修改配置文件 /etc/fstab
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/wwngi2/1616166788212-4ba77fea-8a55-4639-bea6-6c3ef58096f2.png" alt="">
上面是修改根分区拥有 acl 权限&lt;/p>
&lt;pre>&lt;code>UUID=490ed737-f8cf-46a6-ac4b-b7735b79fc63 / ext4 defaults,acl 1 1
&lt;/code>&lt;/pre>
&lt;p>重新挂载文件系统或重启系统，使得修改生效&lt;/p>
&lt;pre>&lt;code>mount -o remount /
&lt;/code>&lt;/pre>
&lt;h1 id="acl-命令行工具">ACL 命令行工具&lt;/h1>
&lt;h2 id="setfacl--设定指定文件的-acl-权限">setfacl # 设定指定文件的 ACL 权限&lt;/h2>
&lt;p>&lt;strong>setfacl [-bkndRLPvh] [{-m|-x} acl_spec] [{-M|-X} acl_file] file &amp;hellip;&lt;/strong>&lt;/p>
&lt;p>OPTIONS&lt;/p>
&lt;ul>
&lt;li>-m # 设定 ACL 权限&lt;/li>
&lt;li>-x # 删除指定的 ACL 权限&lt;/li>
&lt;li>-b # 删除所有的 ACL 权限&lt;/li>
&lt;li>-d # 设定默认 ACL 权限&lt;/li>
&lt;li>-k # 删除默认 ACL 权限&lt;/li>
&lt;li>-R # 递归设定 ACL 权限&lt;/li>
&lt;/ul>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>setfacl -m u:lichenhao:rwx test # 让 lichenhao 这个用户对 test 文件具有 rwx 的权限&lt;/li>
&lt;li>setfacl -m g:lichenhao:rwx test # 让 lichenhao 这个组对 test 文件具有 rwx 的权限&lt;/li>
&lt;li>Note：我们给用户或用户组设定 ACL 权限其实并不是真正我们设定的权限，是与 mask 的权限“相与”之后的权限才是用户的真正权限，一般默认 mask 权限都是 rwx，与我们所设定的权限相与就是我们设定的权限。mask 权限下面我们会详细讲解&lt;/li>
&lt;/ul>
&lt;p>范例：所有者 root 用户在根目录下创建一个文件目录/project，然后创建一个 QQ 群所属组，所属组里面创建两个用户 zhangsan 和 lisi。所有者和所属组权限和其他人权限是 770。&lt;/p>
&lt;p>然后创建一个旁听用户 pt，给他设定/project 目录的 ACL 为 r-x。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/wwngi2/1616166788257-439056df-af1a-41c9-913f-cf18513209ba.png" alt="">&lt;/p>
&lt;p>&lt;a href="https://images2017.cnblogs.com/blog/1120165/201711/1120165-20171109082727169-259824174.png">https://images2017.cnblogs.com/blog/1120165/201711/1120165-20171109082727169-259824174.png&lt;/a>目录 /project 的所有者和所属组其他人权限设定为 770。接下来我们创建旁听用户 pt，并赋予 acl 权限 rx&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/wwngi2/1616166788285-7a684555-e53d-4e5b-96e9-d560c49807f6.png" alt="">&lt;/p>
&lt;p>为了验证 pt 用户对于 /project 目录没有写权限，我们用 su 命令切换到 pt 用户，然后进入 /project 目录，在此目录下创建文件，看是否能成功：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/wwngi2/1616166788260-060edb5b-0ca0-4ee1-a1e7-ba47fccd27a3.png" alt="">&lt;/p>
&lt;p>上面提示权限不够，说明 acl 权限赋予成功，注意如下所示，如果某个目录或文件下有 + 标志，说明其具有 acl 权限。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/wwngi2/1616166788286-6baf14f4-02bd-4091-ab64-13c00e9040d3.png" alt="">&lt;/p>
&lt;h2 id="getfacl--查看-acl-权限">getfacl # 查看 ACL 权限&lt;/h2>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/wwngi2/1616166788267-41d4fa26-0894-482f-8caa-90ad69c61a69.png" alt="">&lt;/p>
&lt;h1 id="最大有效权限-mask">最大有效权限 mask&lt;/h1>
&lt;p>前面第 4 点我们讲过，我们给用户或用户组设定 ACL 权限其实并不是真正我们设定的权限，是与 mask 的权限“相与”之后的权限才是用户的真正权限，一般默认 mask 权限都是 rwx，与我们所设定的权限相与就是我们设定的权限。&lt;/p>
&lt;p>我们通过 getfacl 文件名 也能查看 mask 的权限，那么我们怎么设置呢？&lt;/p>
&lt;p>setfacl -m m:权限 文件名&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/wwngi2/1616166788276-cd39efa5-39ce-488d-96f4-9e9b658ceeb0.png" alt="">&lt;/p>
&lt;h1 id="删除-acl-权限">删除 ACL 权限&lt;/h1>
&lt;p>①、删除指定用户的 ACL 权限&lt;/p>
&lt;pre>&lt;code>setfacl -x u:用户名 文件名
&lt;/code>&lt;/pre>
&lt;p>②、删除指定用户组的 ACL 权限&lt;/p>
&lt;pre>&lt;code>setfacl -x g:组名 文件名
&lt;/code>&lt;/pre>
&lt;p>③、删除文件的所有 ACL 权限&lt;/p>
&lt;pre>&lt;code>setfacl -b 文件名
&lt;/code>&lt;/pre>
&lt;p>8、递归 ACL 权限
通过加上选项 -R 递归设定文件的 ACL 权限，所有的子目录和子文件也会拥有相同的 ACL 权限。&lt;/p>
&lt;pre>&lt;code>setfacl -m u:用户名:权限 -R 文件名
&lt;/code>&lt;/pre>
&lt;p>9、默认 ACL 权限
如果给父目录设定了默认的 ACL 权限，那么父目录中所有新建的子文件会继承父目录的 ACL 权限。&lt;/p>
&lt;pre>&lt;code>setfacl -m d:u:用户名:权限 文件名
&lt;/code>&lt;/pre></description></item><item><title>Docs: Capabilities(能力) 管理</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E7%99%BB%E5%BD%95-Linux-%E4%B8%8E-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/Access-Control%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/Capabilities%E8%83%BD%E5%8A%9B-%E7%AE%A1%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E7%99%BB%E5%BD%95-Linux-%E4%B8%8E-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/Access-Control%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/Capabilities%E8%83%BD%E5%8A%9B-%E7%AE%A1%E7%90%86/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.qikqiak.com/post/capabilities-on-k8s/">阳明博客,在 Kubernets 中配置 Container Capabilities&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="linux-capabilities">Linux Capabilities&lt;/h2>
&lt;p>要了解 &lt;code>Linux Capabilities&lt;/code>，这就得从 Linux 的权限控制发展来说明。在 Linux 2.2 版本之前，当内核对进程进行权限验证的时候，Linux 将进程划分为两类：特权进程（UID=0，也就是超级用户）和非特权进程（UID!=0），特权进程拥有所有的内核权限，而非特权进程则根据进程凭证（effective UID, effective GID，supplementary group 等）进行权限检查。
比如我们以常用的 &lt;code>passwd&lt;/code> 命令为例，修改用户密码需要具有 root 权限，而普通用户是没有这个权限的。但是实际上普通用户又可以修改自己的密码，这是怎么回事呢？在 Linux 的权限控制机制中，有一类比较特殊的权限设置，比如 SUID(Set User ID on execution)，允许用户以可执行文件的 owner 的权限来运行可执行文件。因为程序文件 &lt;code>/bin/passwd&lt;/code> 被设置了 &lt;code>SUID&lt;/code> 标识，所以普通用户在执行 passwd 命令时，进程是以 passwd 的所有者，也就是 root 用户的身份运行，从而就可以修改密码了。
但是使用 &lt;code>SUID&lt;/code> 却带来了新的安全隐患，当我们运行设置了 &lt;code>SUID&lt;/code> 的命令时，通常只是需要很小一部分的特权，但是 &lt;code>SUID&lt;/code> 却给了它 root 具有的全部权限，一旦 被设置了 &lt;code>SUID&lt;/code> 的命令出现漏洞，是不是就很容易被利用了。
为此 Linux 引入了 &lt;code>Capabilities&lt;/code> 机制来对 root 权限进行了更加细粒度的控制，实现按需进行授权，这样就大大减小了系统的安全隐患。&lt;/p>
&lt;h3 id="什么是-capabilities">什么是 Capabilities&lt;/h3>
&lt;p>从内核 2.2 开始，Linux 将传统上与超级用户 root 关联的特权划分为不同的单元，称为 &lt;code>capabilites&lt;/code>。&lt;code>Capabilites&lt;/code> 每个单元都可以独立启用和禁用。这样当系统在作权限检查的时候就变成了：&lt;strong>在执行特权操作时，如果进程的有效身份不是 root，就去检查是否具有该特权操作所对应的 capabilites，并以此决定是否可以进行该特权操作&lt;/strong>。比如如果我们要设置系统时间，就得具有 &lt;code>CAP_SYS_TIME&lt;/code> 这个 capabilites。下面是从 &lt;a href="http://man7.org/linux/man-pages/man7/capabilities.7.html">capabilities man page&lt;/a> 中摘取的 capabilites 列表：
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gx1378/1621522377595-cda9ebb1-7b5a-403e-9777-31d26468fd1c.png" alt="">&lt;/p>
&lt;h3 id="如何使用-capabilities">如何使用 Capabilities&lt;/h3>
&lt;p>我们可以通过 &lt;code>getcap&lt;/code> 和 &lt;code>setcap&lt;/code> 两条命令来分别查看和设置程序文件的 &lt;code>capabilities&lt;/code> 属性。比如当前我们是&lt;code>zuiapp&lt;/code> 这个用户，使用 &lt;code>getcap&lt;/code> 命令查看 &lt;code>ping&lt;/code> 命令目前具有的 &lt;code>capabilities&lt;/code>：&lt;/p>
&lt;pre>&lt;code>$ ll /bin/ping
-rwxr-xr-x. 1 root root 62088 Nov 7 2016 /bin/ping
$ getcap /bin/ping
/bin/ping = cap_net_admin,cap_net_raw+p
&lt;/code>&lt;/pre>
&lt;p>我们可以看到具有 &lt;code>cap_net_admin&lt;/code> 这个属性，所以我们现在可以执行 &lt;code>ping&lt;/code> 命令：&lt;/p>
&lt;pre>&lt;code>$ ping www.qikqiak.com
PING www.qikqiak.com.w.kunlungr.com (115.223.14.186) 56(84) bytes of data.
64 bytes from 115.223.14.186 (115.223.14.186): icmp_seq=1 ttl=54 time=7.87 ms
64 bytes from 115.223.14.186 (115.223.14.186): icmp_seq=2 ttl=54 time=7.85 ms
&lt;/code>&lt;/pre>
&lt;p>但是如果我们把命令的 &lt;code>capabilities&lt;/code> 属性移除掉：&lt;/p>
&lt;pre>&lt;code>$ sudo setcap cap_net_admin,cap_net_raw-p /bin/ping
$ getcap /bin/ping
/bin/ping =
&lt;/code>&lt;/pre>
&lt;p>这个时候我们执行 &lt;code>ping&lt;/code> 命令可以发现已经没有权限了：&lt;/p>
&lt;pre>&lt;code>$ ping www.qikqiak.com
ping: socket: Operation not permitted
&lt;/code>&lt;/pre>
&lt;p>因为 ping 命令在执行时需要访问网络，所需的 &lt;code>capabilities&lt;/code> 为 &lt;code>cap_net_admin&lt;/code> 和 &lt;code>cap_net_raw&lt;/code>，所以我们可以通过 &lt;code>setcap&lt;/code> 命令可来添加它们：&lt;/p>
&lt;pre>&lt;code>$ sudo setcap cap_net_admin,cap_net_raw+p /bin/ping
$ getcap /bin/ping
/bin/ping = cap_net_admin,cap_net_raw+p
$ ping www.qikqiak.com
PING www.qikqiak.com.w.kunlungr.com (115.223.14.188) 56(84) bytes of data.
64 bytes from 115.223.14.188 (115.223.14.188): icmp_seq=1 ttl=54 time=7.39 ms
&lt;/code>&lt;/pre>
&lt;p>命令中的 &lt;code>p&lt;/code> 表示 &lt;code>Permitted&lt;/code> 集合(接下来会介绍)，&lt;code>+&lt;/code> 号表示把指定的&lt;code>capabilities&lt;/code> 添加到这些集合中，&lt;code>-&lt;/code> 号表示从集合中移除。
对于可执行文件的属性中有三个集合来保存三类 &lt;code>capabilities&lt;/code>，它们分别是：&lt;/p>
&lt;ul>
&lt;li>Permitted：在进程执行时，Permitted 集合中的 capabilites 自动被加入到进程的 Permitted 集合中。&lt;/li>
&lt;li>Inheritable：Inheritable 集合中的 capabilites 会与进程的 Inheritable 集合执行与操作，以确定进程在执行 execve 函数后哪些 capabilites 被继承。&lt;/li>
&lt;li>Effective：Effective 只是一个 bit。如果设置为开启，那么在执行 execve 函数后，Permitted 集合中新增的 capabilities 会自动出现在进程的 Effective 集合中。&lt;/li>
&lt;/ul>
&lt;p>对于进程中有五种 &lt;code>capabilities&lt;/code> 集合类型，相比文件的 &lt;code>capabilites&lt;/code>，进程的 &lt;code>capabilities&lt;/code> 多了两个集合，分别是 &lt;code>Bounding&lt;/code> 和 &lt;code>Ambient&lt;/code>。
我们可以通过下面的命名来查看当前进程的 &lt;code>capabilities&lt;/code> 信息：&lt;/p>
&lt;pre>&lt;code>$ cat /proc/7029/status | grep 'Cap' #7029为PID
CapInh: 0000000000000000
CapPrm: 0000000000000000
CapEff: 0000000000000000
CapBnd: 0000001fffffffff
CapAmb: 0000000000000000
&lt;/code>&lt;/pre>
&lt;p>然后我们可以使用 &lt;code>capsh&lt;/code> 命令把它们转义为可读的格式，这样基本可以看出进程具有的 &lt;code>capabilities&lt;/code> 了：&lt;/p>
&lt;pre>&lt;code>$ capsh --decode=0000001fffffffff
0x0000001fffffffff=cap_chown,cap_dac_override,cap_dac_read_search,cap_fowner,cap_fsetid,cap_kill,cap_setgid,cap_setuid,cap_setpcap,cap_linux_immutable,cap_net_bind_service,ca
&lt;/code>&lt;/pre></description></item><item><title>Docs: SUID,SGID,SBIT 特殊权限</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E7%99%BB%E5%BD%95-Linux-%E4%B8%8E-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/Access-Control%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/SUIDSGIDSBIT-%E7%89%B9%E6%AE%8A%E6%9D%83%E9%99%90/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E7%99%BB%E5%BD%95-Linux-%E4%B8%8E-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/Access-Control%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/SUIDSGIDSBIT-%E7%89%B9%E6%AE%8A%E6%9D%83%E9%99%90/</guid><description>
&lt;h1 id="heading">&lt;/h1>
&lt;h1 id="理解-linux-特殊权限-suidsgidsbit">理解 Linux 特殊权限 SUID,SGID,SBIT&lt;/h1>
&lt;p>setuid 和 setgid 分别是 set uid ID upon execution 和 set group ID upon execution 的缩写。我们一般会再次把它们缩写为 suid 和 sgid。它们是控制文件访问的权限标志(flag)，它们分别允许用户以可执行文件的 owner 或 owner group 的权限运行可执行文件。&lt;/p>
&lt;p>说明：本文的演示环境为 Ubuntu 16.04。&lt;/p>
&lt;h2 id="suid">SUID&lt;/h2>
&lt;p>在 Linux 中，所有账号的密码记录在 /etc/shadow 这个文件中，并且只有 root 可以读写入这个文件：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/edkdwi/1616166799191-07205d29-3249-4724-802b-9d1427f5605a.png" alt="">&lt;/p>
&lt;p>如果另一个普通账号 tester 需要修改自己的密码，就要访问 /etc/shadow 这个文件。但是明明只有 root 才能访问 /etc/shadow 这个文件，这究竟是如何做到的呢？事实上，tester 用户是可以修改 /etc/shadow 这个文件内的密码的，就是通过 SUID 的功能。让我们看看 passwd 程序文件的权限信息：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/edkdwi/1616166799212-45da6372-c8d7-4bb6-bae2-4b9c90c4c86e.png" alt="">&lt;/p>
&lt;p>上图红框中的权限信息有些奇怪，owner 的信息为 rws 而不是 rwx。当 s 出现在文件拥有者的 x 权限上时，就被称为 SETUID BITS 或 SETUID ，其特点如下：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>SUID 权限仅对二进制可执行文件有效&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果执行者对于该二进制可执行文件具有 x 的权限，执行者将具有该文件的所有者的权限&lt;/p>
&lt;/li>
&lt;li>
&lt;p>本权限仅在执行该二进制可执行文件的过程中有效&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>下面我们来看 tester 用户是如何利用 SUID 权限完成密码修改的：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>tester 用户对于 /usr/bin/passwd 这个程序具有执行权限，因此可以执行 passwd 程序&lt;/p>
&lt;/li>
&lt;li>
&lt;p>passwd 程序的所有者为 root&lt;/p>
&lt;/li>
&lt;li>
&lt;p>tester 用户执行 passwd 程序的过程中会暂时获得 root 权限&lt;/p>
&lt;/li>
&lt;li>
&lt;p>因此 tester 用户在执行 passwd 程序的过程中可以修改 /etc/shadow 文件&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>但是如果由 tester 用户执行 cat 命令去读取 /etc/shadow 文件确是不行的：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/edkdwi/1616166799191-793208d8-f3ee-4818-9a19-cd083def0bf6.png" alt="">&lt;/p>
&lt;p>原因很清楚，tester 用户没有读 /etc/shadow 文件的权限，同时 cat 程序也没有被设置 SUID。我们可以通过下图来理解这两种情况：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/edkdwi/1616166799223-3f313650-c990-4a0a-bdb9-6dfa9efe538f.png" alt="">&lt;/p>
&lt;p>如果想让任意用户通过 cat 命令读取 /etc/shadow 文件的内容也是非常容易的，给它设置 SUID 权限就可以了：&lt;/p>
&lt;p>$ sudo chmod 4755 /bin/cat&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/edkdwi/1616166799251-47e701ba-439d-4414-862c-ec7e229a8924.png" alt="">&lt;/p>
&lt;p>现在 cat 已经具有了 SUID 权限，试试看，是不是已经可以 cat 到 /etc/shadow 的内容了。因为这样做非常不安全，所以赶快通过下面的命令把 cat 的 SUID 权限移除掉：&lt;/p>
&lt;p>$ sudo chmod 755 /bin/cat&lt;/p>
&lt;h2 id="sgid">SGID&lt;/h2>
&lt;p>当 s 标志出现在用户组的 x 权限时称为 SGID。SGID 的特点与 SUID 相同，我们通过 /usr/bin/mlocate 程序来演示其用法。mlocate 程序通过查询数据库文件 /var/lib/mlocate/mlocate.db 实现快速的文件查找。 mlocate 程序的权限如下图所示：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/edkdwi/1616166799232-7e50eb71-b677-495e-a764-8d8f4646c801.png" alt="">&lt;/p>
&lt;p>很明显，它被设置了 SGID 权限。下面是数据库文件 /var/lib/mlocate/mlocate.db 的权限信息：很明显，它被设置了 SGID 权限。下面是数据库文件 /var/lib/mlocate/mlocate.db 的权限信息：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/edkdwi/1616166799213-a5db060f-ae00-4861-b9dd-bf0f2dceb852.png" alt="">&lt;/p>
&lt;p>普通用户 tester 执行 mlocate 命令时，tester 就会获得用户组 mlocate 的执行权限，又由于用户组 mlocate 对 mlocate.db 具有读权限，所以 tester 就可以读取 mlocate.db 了。程序的执行过程如下图所示：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/edkdwi/1616166799258-9b317569-d4c6-4a5c-af86-9f26d13b631f.png" alt="">&lt;/p>
&lt;p>除二进制程序外，SGID 也可以用在目录上。当一个目录设置了 SGID 权限后，它具有如下功能：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>用户若对此目录具有 r 和 x 权限，该用户能够进入该目录&lt;/p>
&lt;/li>
&lt;li>
&lt;p>用户在此目录下的有效用户组将变成该目录的用户组&lt;/p>
&lt;/li>
&lt;li>
&lt;p>若用户在此目录下拥有 w 权限，则用户所创建的新文件的用户组与该目录的用户组相同&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>下面看个例子，创建 testdir 目录，目录的权限设置如下：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/edkdwi/1616166799241-5c3ef1da-c03c-44a9-9144-c8f85904ff8a.png" alt="">&lt;/p>
&lt;p>此时目录 testdir 的 owner 是 nick，所属的 group 为 tester。&lt;/p>
&lt;p>先创建一个名为 nickfile 的文件：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/edkdwi/1616166799231-455ac1fd-1fab-4787-8c4c-140299001f32.png" alt="">&lt;/p>
&lt;p>这个文件的权限看起来没有什么特别的。然后给 testdir 目录设置 SGID 权限：&lt;/p>
&lt;p>$ sudo chmod 2775 testdir&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/edkdwi/1616166799270-a6affdad-ff72-4f8b-a52b-b5c30c33d7ad.png" alt="">&lt;/p>
&lt;p>然后再创建一个文件 nickfile2：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/edkdwi/1616166799233-66f8ad3f-b6f4-4eb9-ae44-81c0459e6c8c.png" alt="">&lt;/p>
&lt;p>新建的文件所属的组为 tester！&lt;/p>
&lt;p>总结一下，当 SGID 作用于普通文件时，和 SUID 类似，在执行该文件时，用户将获得该文件所属组的权限。当 SGID 作用于目录时，意义就非常重大了。当用户对某一目录有写和执行权限时，该用户就可以在该目录下建立文件，如果该目录用 SGID 修饰，则该用户在这个目录下建立的文件都是属于这个目录所属的组。&lt;/p>
&lt;p>SBIT&lt;/p>
&lt;p>其实 SBIT 与 SUID 和 SGID 的关系并不大。&lt;/p>
&lt;p>SBIT 是 the restricted deletion flag or sticky bit 的简称。&lt;/p>
&lt;p>SBIT 目前只对目录有效，用来阻止非文件的所有者删除文件。比较常见的例子就是 /tmp 目录：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/edkdwi/1616166799256-b2169030-98e0-45b9-8092-f535177bb013.png" alt="">&lt;/p>
&lt;p>权限信息中最后一位 t 表明该目录被设置了 SBIT 权限。SBIT 对目录的作用是：当用户在该目录下创建新文件或目录时，仅有自己和 root 才有权力删除。&lt;/p>
&lt;p>设置 SUID、SGID、SBIT 权限&lt;/p>
&lt;p>以数字的方式设置权限&lt;/p>
&lt;p>SUID、SGID、SBIT 权限对应的数字如下：&lt;/p>
&lt;p>SUID-&amp;gt;4SGID-&amp;gt;2SBIT-&amp;gt;1&lt;/p>
&lt;p>所以如果要为一个文件权限为 &amp;ldquo;-rwxr-xr-x&amp;rdquo; 的文件设置 SUID 权限，需要在原先的 755 前面加上 4，也就是 4755：&lt;/p>
&lt;p>$ chmod 4755 filename&lt;/p>
&lt;p>同样，可以用 2 和 1 来设置 SGID 和 SBIT 权限。设置完成后分别会用 s, s, t 代替文件权限中的 x。&lt;/p>
&lt;p>其实，还可能出现 S 和 T 的情况。S 和 t 是替代 x 这个权限的，但是，如果它本身没有 x 这个权限，添加 SUID、SGID、SBIT 权限后就会显示为大写 S 或大写 T。比如我们为一个权限为 666 的文件添加 SUID、SGID、SBIT 权限：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/edkdwi/1616166799251-393acd61-c504-4ed7-8c1c-c58e7a2171f4.png" alt="">&lt;/p>
&lt;p>执行 chmod 7666 nickfile，因为 666 表示 &amp;ldquo;-rw-rw-rw&amp;rdquo;，均没有 x 权限，所以最后变成了 &amp;ldquo;-rwSrwSrwT&amp;rdquo;。&lt;/p>
&lt;p>通过符号类型改变权限&lt;/p>
&lt;p>除了使用数字来修改权限，还可以使用符号：&lt;/p>
&lt;p>$ chmod u+s testfile # 为 testfile 文件加上 SUID 权限。 $ chmod g+s testdir # 为 testdir 目录加上 SGID 权限。 $ chmod o+t testdir # 为 testdir 目录加上 SBIT 权限。&lt;/p>
&lt;p>总结&lt;/p>
&lt;p>SUID、SGID、SBIT 权限都是为了实现特殊功能而设计的，其目的是弥补 ugo 权限无法实现的一些使用场景。&lt;/p>
&lt;p>阅读原文&lt;/p></description></item></channel></rss>