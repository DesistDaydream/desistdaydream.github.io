<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – 5.登录 Linux 与 访问控制</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E7%99%BB%E5%BD%95-Linux-%E4%B8%8E-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/</link><description>Recent content in 5.登录 Linux 与 访问控制 on 断念梦</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E7%99%BB%E5%BD%95-Linux-%E4%B8%8E-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: 5.登录 Linux 与 访问控制</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E7%99%BB%E5%BD%95-Linux-%E4%B8%8E-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/5.%E7%99%BB%E5%BD%95-Linux-%E4%B8%8E-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E7%99%BB%E5%BD%95-Linux-%E4%B8%8E-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/5.%E7%99%BB%E5%BD%95-Linux-%E4%B8%8E-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;/blockquote>
&lt;p>想要登录 Linux，必须通过 &lt;a href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.Terminal%20%E4%B8%8E%20Shell/4.Terminal%20%E4%B8%8E%20Shell.md">&lt;strong>Terminal(终端)&lt;/strong>&lt;/a>，我们才可以与操作系统进行交互。&lt;/p>
&lt;p>本质上，想要登录 Linux，必然需要调用某些程序(比如 Shell)，以便分配一个终端。通常，我们有多种方式可供选择：&lt;/p>
&lt;ul>
&lt;li>本地命令行登录&lt;/li>
&lt;li>远程命令行登录&lt;/li>
&lt;li>图形界面登录&lt;/li>
&lt;/ul>
&lt;p>Linux 操作系统是一个多用户操作系统，所以除了 &lt;strong>Terminal(终端)&lt;/strong> 以外，还需 &lt;strong>Account(账户)&lt;/strong> 才可以登录上去，Linux 操作系统允许多个用户访问安装在一台机器上的单个系统。每个 &lt;strong>User(用户)&lt;/strong> 都在自己的 &lt;strong>Account(账户)&lt;/strong> 下操作。因此，Account Manager 代表了 Linux 系统管理的核心要素。&lt;/p>
&lt;h1 id="登录-linux">登录 Linux&lt;/h1>
&lt;p>我们可以通过多种方式登录 Linux&lt;/p>
&lt;ul>
&lt;li>本地登录&lt;/li>
&lt;li>远程登录&lt;/li>
&lt;/ul>
&lt;h2 id="通过本地-tty-登陆-linux-系统">通过本地 TTY 登陆 Linux 系统&lt;/h2>
&lt;p>登录 Linux 最基本的方式，就是使用 &lt;code>login&lt;/code> 程序。&lt;/p>
&lt;h3 id="login-程序">login 程序&lt;/h3>
&lt;p>由于历史原因，&lt;code>login&lt;/code> 可能被包含在两个包中：&lt;/p>
&lt;ul>
&lt;li>util-linux&lt;/li>
&lt;li>shadow-utils&lt;/li>
&lt;/ul>
&lt;h4 id="login-的登录行为">login 的登录行为&lt;/h4>
&lt;p>当我们刚刚安装完操作系统，systemd-logind.service 服务会让我们看到这样的画面&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gwpmr6/1634785246289-3a353c73-2899-4b6c-8341-ffc4a02008ef.png" alt="image.png">&lt;/p>
&lt;p>想要在服务器本地登录系统，则需要进行认证，在输入用户名之后，实际上是调用了 &lt;code>login&lt;/code> 这个二进制程序，看到：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gwpmr6/1634785206973-885fa7fb-3dfb-4fb1-80c8-1c56cb903974.png" alt="image.png">&lt;/p>
&lt;p>此时我们通过远程方式(如果可以的话)登录服务器，查看进程，将会看到名为 login 的进程&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>$ pgrep login -alf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">600&lt;/span> /lib/systemd/systemd-logind
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">1476&lt;/span> /bin/login -p --
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>当我们输入完密码，经过 &lt;a href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E7%99%BB%E5%BD%95%20Linux%20%E4%B8%8E%20%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/Access%20Control(%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6)/Access%20Control(%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6).md">Access Control(访问控制)&lt;/a> 相关程序的认证之后，login 工具会为我们分配一个 ttyX 的终端设备，然后我们就可以通过 tty 所关联的 Shell(通常是 bash)，与系统进行交互&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gwpmr6/1634785329507-0cb1fcec-8c6e-4fd0-a99f-005a2b19807e.png" alt="image.png">&lt;/p>
&lt;h4 id="login-关联文件与配置">login 关联文件与配置&lt;/h4>
&lt;p>&lt;strong>/etc/login.defs&lt;/strong> # shadow 与 password 套件的配置文件。
&lt;strong>/etc/pam.d/login&lt;/strong> #&lt;/p>
&lt;h2 id="通过远程的方式来登陆-linux-系统">通过远程的方式来登陆 Linux 系统&lt;/h2>
&lt;h3 id="ssh-程序">ssh 程序&lt;/h3>
&lt;p>详见：&lt;a href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E7%99%BB%E5%BD%95%20Linux%20%E4%B8%8E%20%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/Secure%20Shell(SSH)%20%E5%AE%89%E5%85%A8%E5%A4%96%E5%A3%B3%E5%8D%8F%E8%AE%AE/Secure%20Shell(SSH)%20%E5%AE%89%E5%85%A8%E5%A4%96%E5%A3%B3%E5%8D%8F%E8%AE%AE.md">Secure Shell(SSH) 安全外壳协议&lt;/a>&lt;/p>
&lt;pre>&lt;code>root 981 1 0 Jul08 ? Ss 0:00 /usr/sbin/sshd -D
root 1947 981 0 09:05 ? Ss 0:00 \_ sshd: root@pts/0
root 1949 1947 1 09:05 pts/0 Ss 0:00 \_ -bash
root 1970 1949 0 09:05 pts/0 R+ 0:00 \_ ps -ef f
&lt;/code>&lt;/pre>
&lt;p>OpenSSH 会为用户分配一个 Pseudoterminal(伪终端，即 pts) 以便用户可以与操作系统进行交互。&lt;/p>
&lt;h1 id="登录提示信息">登录提示信息&lt;/h1>
&lt;p>通过 &lt;code>touch ~/.hushlogin&lt;/code> 命令可以为当前用户禁用欢迎信息。&lt;/p>
&lt;h2 id="motd">MOTD&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Motd_(Unix)">Wiki:MOTD&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://man7.org/linux/man-pages/man5/motd.5.html">Manual(手册)，MOTD&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Message of the day(每日消息，简称 MOTD)&lt;/strong> 是一种比向所有用户发送一个邮件更有效的发送共同的信息的方式&lt;/p>
&lt;h4 id="motd-关联文件">MOTD 关联文件&lt;/h4>
&lt;p>&lt;strong>/etc/default/motd-news&lt;/strong> # 动态 MOTD 新闻信息配置，新闻信息主要是互联网相关的
&lt;strong>/etc/update-motd.d/*&lt;/strong> # MOTD 执行脚本保存路径
&lt;strong>~/.hushlogin&lt;/strong> # 该文件存在时，将为当前用户禁用 MOTD 消息
&lt;strong>/etc/pam.d/sshd&lt;/strong> # PAM 模块中可以为 sshd 配置 MOTD。&lt;/p>
&lt;h1 id="访问控制">访问控制&lt;/h1>
&lt;p>Linux 的登录与访问控制是相辅相成的，一个用户想要登录 Linux，通常来说都需要经过访问控制系统对其所使用的账户进行认证，只有认证通过后，才可以正常登录。&lt;/p>
&lt;p>一个正常的 Linux 发行版操作系统，通常都提供了多种方式&lt;/p>
&lt;ul>
&lt;li>密码&lt;/li>
&lt;li>会话&lt;/li>
&lt;li>账户锁定&lt;/li>
&lt;li>等等&amp;hellip;&amp;hellip;&lt;/li>
&lt;/ul>
&lt;h2 id="account-manager账户管理">Account Manager(账户管理)&lt;/h2>
&lt;p>详见 &lt;a href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E7%99%BB%E5%BD%95%20Linux%20%E4%B8%8E%20%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/Account%20Manager(%E8%B4%A6%E6%88%B7%E7%AE%A1%E7%90%86)/Account%20Manager(%E8%B4%A6%E6%88%B7%E7%AE%A1%E7%90%86).md">Account Manager(账户管理)&lt;/a>&lt;/p>
&lt;h1 id="多窗口操作">多窗口操作&lt;/h1>
&lt;p>登录服务器后，我们可以重复登录，以便在多个窗口执行不同的操作以观察服务器状态或排查问题。&lt;/p>
&lt;p>但是当我们在机房通过显示器连接到服务器时，是不像使用 ssh 命令一样方便的，但是依然可以实现多窗口操作。&lt;/p>
&lt;p>使用 &lt;code>Ctrl + Alt + F&amp;lt;X&amp;gt;&lt;/code> 快捷键，即可打开其他窗口，&lt;code>Ctrl + Alt + F2&lt;/code> 切换到第二个窗口，F1 可以切回第一个默认窗口。&lt;/p></description></item><item><title>Docs: Secure Shell(SSH) 安全外壳协议</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E7%99%BB%E5%BD%95-Linux-%E4%B8%8E-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/Secure-ShellSSH-%E5%AE%89%E5%85%A8%E5%A4%96%E5%A3%B3%E5%8D%8F%E8%AE%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E7%99%BB%E5%BD%95-Linux-%E4%B8%8E-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/Secure-ShellSSH-%E5%AE%89%E5%85%A8%E5%A4%96%E5%A3%B3%E5%8D%8F%E8%AE%AE/</guid><description/></item><item><title>Docs: Access Control(访问控制)</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E7%99%BB%E5%BD%95-Linux-%E4%B8%8E-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/Access-Control%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E7%99%BB%E5%BD%95-Linux-%E4%B8%8E-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/Access-Control%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/</guid><description/></item><item><title>Docs: Account Manager(账户管理)</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E7%99%BB%E5%BD%95-Linux-%E4%B8%8E-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/Account-Manager%E8%B4%A6%E6%88%B7%E7%AE%A1%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E7%99%BB%E5%BD%95-Linux-%E4%B8%8E-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/Account-Manager%E8%B4%A6%E6%88%B7%E7%AE%A1%E7%90%86/</guid><description/></item><item><title>Docs: PAM(可插入式认证模块)</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E7%99%BB%E5%BD%95-Linux-%E4%B8%8E-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/PAM%E5%8F%AF%E6%8F%92%E5%85%A5%E5%BC%8F%E8%AE%A4%E8%AF%81%E6%A8%A1%E5%9D%97/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E7%99%BB%E5%BD%95-Linux-%E4%B8%8E-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/PAM%E5%8F%AF%E6%8F%92%E5%85%A5%E5%BC%8F%E8%AE%A4%E8%AF%81%E6%A8%A1%E5%9D%97/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/linux-pam/linux-pam">GitHub 项目，linux-pam&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.linux-pam.org/Linux-PAM-html/">&lt;del>官方文档&lt;/del>&lt;/a>&lt;del>已停止更新不再维护&lt;/del>&lt;/li>
&lt;li>&lt;a href="https://man7.org/linux/man-pages/man8/pam.8.html">Manual(手册),PAM(8)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Pluggable_authentication_module">Wiki,PAM&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Linux_PAM">Wiki,Linux PAM&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.cnblogs.com/kevingrace/p/8671964.html">博客园，Linux 下 PAM 模块学习总结&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.cnblogs.com/yinzhengjie/p/8395279.html">博客园，PAM(Pluggable Authentication Modules)认证机制详情&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.redhat.com/sysadmin/pluggable-authentication-modules-pam">https://www.redhat.com/sysadmin/pluggable-authentication-modules-pam&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.jinbuguo.com/linux/pam.html">金步国，Linux PAM 学习笔记&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Pluggable Authentication Modules(可插入式认证模块，简称 PAM)&lt;/strong> 是由 Sun 提出的一种认证机制。它通过提供一些动态链接库和一套统一的 API，将系统提供的服务和该服务的认证方式分开，使得系统管理员可以灵活地根据需要给不同的服务配置不同的认证方式而无需更改服务程序，同时也便于向系统中添加新的认证手段。&lt;/p>
&lt;p>在过去，我们想要对一个使用者进行 Authentication(认证)，得要要求用户输入账号密码，然后通过自行撰写的程序来判断该账号密码是否正确。也因为如此，我们常常使用不同的机制来判断账号密码，所以搞的一部主机上面拥有多个各别的认证系统，也造成账号密码可能不同步的验证问题！为了解决这个问题因此有了 PAM 的机制！&lt;/p>
&lt;p>以常见的 su 命令来说，它可以实现用户切换，从 root 切换至其他用户不需要密码、从非 root 用户切换至其他用户则需要验证目标用户的密码，一旦认证成功就以目标用户身份启动 shell 以供使用。本质上，su 只做两件事：(1)认证；(2)启动 shell 。按照传统思路，两件事都很容易实现，例如认证逻辑可以用伪代码这样简单的描述：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span> uid &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">)&lt;/span> 认证成功
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>elseif &lt;span style="color:#f92672">(&lt;/span> 输入的密码 &lt;span style="color:#f92672">==&lt;/span> 目标用户的密码 &lt;span style="color:#f92672">)&lt;/span> 认证成功
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">else&lt;/span> 认证失败
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>但是，认证需求不是一成不变的。例如：&lt;/p>
&lt;ul>
&lt;li>(1)为了方便运维团队成员(也就是 wheel 组)，希望 wheel 组中的用户无需输入密码也能直接进行用户切换；&lt;/li>
&lt;li>(2)为了加强安全性，希望额外验证手机短信；&lt;/li>
&lt;li>(3)为了避免频繁输入难记的用户密码，希望可以选用指纹方式进行验证；&lt;/li>
&lt;li>(4)为了方便某个特定的用户测试，希望仅凭手机短信也能完成验证&lt;/li>
&lt;li>&amp;hellip;&amp;hellip;&lt;/li>
&lt;/ul>
&lt;p>这样一来， su 的开发者将会被迫不断更改 su 的源代码，然后再重新调试、编译、分发，非常辛苦。这种情况下，PAM 就可以对 su 开发者说：&amp;ldquo;认证的事交给我，能不能通过认证由我说了算，你只需做好其他事情(启动 shell)即可&amp;rdquo;；同时又对用户(系统管理员)说：&amp;ldquo;只要学会了 PAM 配置语法，就可以利用各种 PAM 模块，编写出千变万化的认证策略。无需打扰 su 开发者，就能立即得到想要的效果&amp;rdquo;。通过把与认证相关的脏活累活都交给 PAM 来干， su 的开发者与用户之间实现了解耦，彼此皆大欢喜。&lt;/p>
&lt;p>推而广之，如果一个应用程序想要使用 PAM 进行认证，只需在源代码中嵌入 PAM 支持即可(也就是引入相应的头文件)。然后开发者无需再为认证部分操心(是否通过认证交给 PAM 决定)，只需专注程序的其他部分即可。也就是说，无需修改应用程序就可以切换、修改、升级应用程序使用的认证机制。当然，如果只有一个不支持 PAM 的二进制文件，那就没有办法改造了。&lt;/p>
&lt;h1 id="linux-pam">Linux-PAM&lt;/h1>
&lt;p>Linux-PAM 就是一种 Linux 平台上的 PAM 实现&lt;/p>
&lt;p>我们可以通过 &lt;code>ldd&lt;/code> 命令查出来进程是否支持 PAM&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># ldd $(which login) | grep pam&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> libpam.so.0 &lt;span style="color:#f92672">=&lt;/span>&amp;gt; /lib/x86_64-linux-gnu/libpam.so.0 &lt;span style="color:#f92672">(&lt;/span>0x00007f53a3720000&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> libpam_misc.so.0 &lt;span style="color:#f92672">=&lt;/span>&amp;gt; /lib/x86_64-linux-gnu/libpam_misc.so.0 &lt;span style="color:#f92672">(&lt;/span>0x00007f53a371b000&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Linux-PAM 可以说是一套 API 与 Library，为应用程序提供完整的 **Autherntication(认证)**机制，只要使用者将认证阶段的需求告知 PAM 后，PAM 就能够回报使用者认证的结果(成功或失败)。由于 PAM 仅是一套认证的机制，又可以提供给其他程序所呼叫引用，因此不论你使用什么程序，都可以使用 PAM 来进行认证，如此一来，就能够让账号密码或者是其他方式的认证具有一致的结果！也让程序设计师方不在着重处理认证的问题。&lt;/p>
&lt;h2 id="linux-pam-管理组认证功能的分组">Linux-PAM 管理组(认证功能的分组)&lt;/h2>
&lt;p>Linux-PAM 将认证功能分为 4 个管理组(也可以称为：管理类型)，注意：相同的 PAM 模块关联到不同的管理类型时，产生的效果是不同的。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Authentication Management(身份认证管理)&lt;/strong> # 认证用户并设置用户凭据。通常，这是通过用户必须满足的一些质询响应请求: 如果你是你声称的那个人，请输入你的密码。
&lt;ul>
&lt;li>对应配置文件中的 &lt;strong>auth&lt;/strong> 关键字&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Account Management(账户管理)&lt;/strong> # 提供账户认证服务类型。比如用户的密码是否已过期;该用户是否允许访问所请求的服务
&lt;ul>
&lt;li>对应配置文件中的 &lt;strong>account&lt;/strong> 关键字&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Password Management(密码管理)&lt;/strong> # 更新身份认证机制。通常，此类服务与 Authentication Management 紧密耦合。一些身份认证机制很适合使用这种功能进行更新。类 Unix 系统基于密码的访问是一个明显的例子
&lt;ul>
&lt;li>对应配置文件中的 &lt;strong>password&lt;/strong> 关键字&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Session Management(会话管理)&lt;/strong> # 会话管理任务涵盖应在提供服务前以及撤回后的服务。这些任务包括维护审计跟踪和用户主目录的安装。会话管理组很重要，因为它提供了用于模块的开放和关闭钩子，以影响用户可用的服务。
&lt;ul>
&lt;li>对应配置文件中的 &lt;strong>session&lt;/strong> 关键字&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>注意：上面说的&amp;quot;凭据&amp;quot;不仅仅指密码，而是泛指一切认证方式，例如：一次性密码、指纹、短信、IP 地址、二维码。除验证凭据之外，还可以进一步执行更多的关联操作，例如：修改账户所属的组、显示特定的提示信息、赋予账户某些权限。&lt;/p>
&lt;p>也可以这么说，PAM 将模块分为 4 大类，每个模块都可以属于一个或多个类型，当指定一个模块的类别的时，当通过 API 调用该模块时，其行为也会变为对应模块类型的行为。&lt;/p>
&lt;p>另外，从某种角度看，这 4 个管理类型，也可以称为 4 个 stack(栈)，每个&lt;strong>栈&lt;/strong>都是由一组规则组成。&lt;strong>规则栈&lt;/strong>的概念在下文有详细描述。&lt;/p>
&lt;p>上述 4 种功能，都可以通过位于 /lib/security/ 或 /lib64/security/ 中的各种 PAM 模块实现，模块名称一般都符合 &lt;code>pam_*.so&lt;/code> 格式&lt;/p>
&lt;h2 id="linux-pam-的运行方式">Linux-PAM 的运行方式&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span> +----------------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | application: X |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> +----------------+ / +----------+ +&lt;span style="color:#f92672">================&lt;/span>+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | authentication-&lt;span style="color:#f92672">[&lt;/span>----&amp;gt;----&lt;span style="color:#f92672">]&lt;/span> Linux- |--&amp;lt;--| PAM config file|
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | + &lt;span style="color:#f92672">[&lt;/span>----&amp;lt;--/--&lt;span style="color:#f92672">]&lt;/span> PAM | |&lt;span style="color:#f92672">================&lt;/span>|
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |&lt;span style="color:#f92672">[&lt;/span>conversation&lt;span style="color:#f92672">()][&lt;/span>--+ &lt;span style="color:#ae81ff">\ &lt;/span> | | | X auth .. a.so |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> +----------------+ | / +-n--n-----+ | X auth .. b.so |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | | | __| | | _____/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | service user | A | | |____,-----&lt;span style="color:#960050;background-color:#1e0010">&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | | | V A
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> +----------------+ +------|-----|---------+ -----+------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> +---u-----u----+ | | |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | auth.... |--&lt;span style="color:#f92672">[&lt;/span> a &lt;span style="color:#f92672">]&lt;/span>--&lt;span style="color:#f92672">[&lt;/span> b &lt;span style="color:#f92672">]&lt;/span>--&lt;span style="color:#f92672">[&lt;/span> c &lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> +--------------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | acct.... |--&lt;span style="color:#f92672">[&lt;/span> b &lt;span style="color:#f92672">]&lt;/span>--&lt;span style="color:#f92672">[&lt;/span> d &lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> +--------------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | password |--&lt;span style="color:#f92672">[&lt;/span> b &lt;span style="color:#f92672">]&lt;/span>--&lt;span style="color:#f92672">[&lt;/span> c &lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> +--------------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | session |--&lt;span style="color:#f92672">[&lt;/span> e &lt;span style="color:#f92672">]&lt;/span>--&lt;span style="color:#f92672">[&lt;/span> c &lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>PAM 大体分为三个部分&lt;/p>
&lt;ul>
&lt;li>应用层 # 包括 ftpd、login、passwd 等应用程序&lt;/li>
&lt;li>接口层 # 连接 应用层 与 身份认证协议层 的接口，包括一些配置文件，通过配置文件可以选择应用程序所采用的认证方案(即所使用的模块及其参数)&lt;/li>
&lt;li>身份认证协议层 # 由各种模块实现的 Unix、Kerberos、S/Key 等身份认证方案&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/ey0dgw/1635432839615-8af1927e-94eb-4119-8444-7dd023925c06.png" alt="image.png">&lt;/p>
&lt;ul>
&lt;li>应用程序的开发者，通过在代码中导入 PAM API 库，从而实现对认证方法的调用；&lt;/li>
&lt;li>PAM 模块的开发者，则利用 PAM SPI(Service Module API) 来编写模块，以便将不同的认证机制加入到系统中；&lt;/li>
&lt;li>PAM 核心库(libpam) 则会读取配置文件，以此为根据，将应用程序和对应的认证方法联系起来&lt;/li>
&lt;/ul>
&lt;p>PAM 通过一个与程序相同文件名的配置文件来进行一连串的认证分析需求(也可以通过程序的配置指定具体的 PAM 配置文件路径)。如上图所示，应用程序 X 调用 Linux-PAM 库，这是一个核心模块，它并不负责认证动作，仅用来暴露 PAM API 以及调用 PAM 模块，真正的认证动作是 PAM 库根据&lt;strong>自定义的 PAM 配置文件&lt;/strong> 逐一调用模块进行认证的。PAM 读取配置文件之后会根据读取到的内容进行相应的认证操作，最后会将认证的结果返回给应用程序。&lt;/p>
&lt;p>这个 PAM 配置文件，分为 4 个部分，分别是 4 个管理类型，这四个部分都有一个或多个规则来执行认证操作，多个规则组合成一个规则栈。就像上图描述的&lt;/p>
&lt;ul>
&lt;li>a、b、c 模块进行 auth 认证&lt;/li>
&lt;li>b、d 模块进行 account 认证&lt;/li>
&lt;li>b、c 模块进行 password 认证&lt;/li>
&lt;li>e、c 模块进行 session 认证&lt;/li>
&lt;/ul>
&lt;p>一个或多个模块对同一类管理类型进行认证操作，并统一处理结果，以一个整体响应给调用 PAM 的应用程序。所以，总结一下，调用 Linux-PAM 时，其实最多只会返回 4 个结果，因为同一个服务的相同管理类型下的规则，是作为一个整体的。&lt;/p>
&lt;p>让我们看看当本地的用户登录到基于文本的控制台时所采取的步骤：&lt;/p>
&lt;ul>
&lt;li>auth 认证 # 登录应用程序提示输入用户名和密码，然后进行 libpam 身份认证调用以询问：“这个用户是他们所说的吗？” 该 pam_unix 模块负责检查本地账户认证。也可能会检查其他模块，最终将结果传递回登录过程。&lt;/li>
&lt;li>account 认证 # 登录过程接下来会询问“此用户是否允许连接？”，然后对 进行帐户调用 libpam。该 pam_unix 模块会检查诸如密码是否已过期之类的内容。其他模块可能会检查主机或基于时间的访问控制列表。总体响应将返回给流程。
&lt;ul>
&lt;li>如果密码已过期，应用程序会做出响应。某些应用程序根本无法登录用户。登录过程会提示用户输入新密码。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>password 认证 # 为了验证密码并将其写入正确的位置，登录过程会对 进行密码调用 libpam。该 pam_unix 模块写入到本地&lt;strong>影子&lt;/strong>文件。也可以调用其他模块来验证密码强度。
&lt;ul>
&lt;li>如果此时登录过程仍在继续，则已准备好创建会话。会话调用 libpam 导致 pam_unix 模块将登录时间戳写入&lt;strong>wtmp&lt;/strong>文件。其他模块启用 X11 身份认证或 SELinux 用户上下文。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>session 认证 # 在注销时，当会话关闭时，可以对 进行另一个会话调用 libpam。这是 pam_unix 模块将注销时间戳写入&lt;strong>wtmp&lt;/strong>文件的时间。&lt;/li>
&lt;/ul>
&lt;h2 id="rules-stack规则栈">Rules stack(规则栈)&lt;/h2>
&lt;p>Linux-PAM 可以通过一组规则栈，对一个程序进行多重验证，假如现在有下面一个服务所使用的 PAM 配置：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>auth requisite pam_authtok_get.so.1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>auth required pam_dhkeys.so.1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>auth required pam_unix_cred.so.1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>auth required pam_unix_auth.so.1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>auth required pam_dial_auth.so.1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这就是一组规则栈，用来执行 auth 认证行为，每条规则的执行结果进行集合处理，按照从上到下的顺序逐一执行，每条规则的返回码都会根据 Control 的配置集成到整体结果中。所以，有可能这一组规则只执行了 1 条就停止了，也有可能所有都执行了。&lt;/p>
&lt;h1 id="linux-pam-关联文件与配置">Linux-PAM 关联文件与配置&lt;/h1>
&lt;p>/etc/pam.conf # PAM 的默认配置文件，当存在 pam.d 文件夹时，自动接管配置，不再读取 pam.conf 下的配置
/etc/pam.d/* # PAM 的配置文件，当存在该目录时，不再读取 pam.conf 文件中的配置。该目录下的文件，通常都是由其他应用程序在安装时自动创建的。&lt;/p>
&lt;ul>
&lt;li>/etc/pam.d/sshd # 使用 ssh 方式登录时候的配置文件&lt;/li>
&lt;li>/etc/pam.d/login # 使用 tty 方式登录时候的配置文件。i.e.通过设备直接登录或者 su 方式切换用户&lt;/li>
&lt;li>/etc/pam.d/remote # 使用 telnet 方式登录时候的配置文件&lt;/li>
&lt;li>/etc/pam.d/kde # 使用&amp;quot;图形界面&amp;quot;方式登录时候的配置文件&lt;/li>
&lt;li>/etc/pam.d/system-auth # 配置凡是调用 system-auth 文件的服务，都会生效&lt;/li>
&lt;li>/etc/pam.d/common-auth # 此文件中的安全策略可以限制用户不能更改为之前使用的历史密码&lt;/li>
&lt;li>&amp;hellip;&amp;hellip; 等等&lt;/li>
&lt;/ul>
&lt;p>/usr/lib64/security/&lt;em># CentOS 发行版的 PAM 模块存放目录
/usr/lib/x86_64-linux-gnu/&lt;/em> # Ubuntu 发行版的 PAM 模块存放目录&lt;/p>
&lt;h1 id="linux-pam-认证机制示例">Linux-PAM 认证机制示例&lt;/h1>
&lt;h2 id="system-auth">system-auth&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># grep -v ^# /etc/pam.d/system-auth&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>auth required pam_env.so
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>auth sufficient pam_unix.so nullok try_first_pass
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>auth requisite pam_succeed_if.so uid &amp;gt;&lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">500&lt;/span> quiet
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>auth required pam_deny.so
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>account required pam_unix.so
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>account sufficient pam_localuser.so
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>account sufficient pam_succeed_if.so uid &amp;lt; &lt;span style="color:#ae81ff">500&lt;/span> quiet
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>account required pam_permit.so
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>password requisite pam_cracklib.so try_first_pass retry&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span> type&lt;span style="color:#f92672">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>password sufficient pam_unix.so sha512 shadow nullok try_first_pass use_authtok
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>password required pam_deny.so
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>session optional pam_keyinit.so revoke
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>session required pam_limits.so
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>session &lt;span style="color:#f92672">[&lt;/span>success&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> default&lt;span style="color:#f92672">=&lt;/span>ignore&lt;span style="color:#f92672">]&lt;/span> pam_succeed_if.so service in crond quiet use_uid
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>session required pam_unix.so
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>第一部分表示，当用户登录的时候，首先会通过 auth 类接口对用户身份进行识别和密码认证。所以在该过程中验证会经过几个带 auth 的配置项。
其中的第一步是通过 pam_env.so 模块来定义用户登录之后的环境变量， pam_env.so 允许设置和更改用户登录时候的环境变量，默认情况下，若没有特别指定配置文件，将依据/etc/security/pam_env.conf 进行用户登录之后环境变量的设置。
然后通过 pam_unix.so 模块来提示用户输入密码，并将用户密码与/etc/shadow 中记录的密码信息进行对比，如果密码比对结果正确则允许用户登录，而且该配置项的使用的是“sufficient”控制位，即表示只要该配置项的验证通过，用户即可完全通过认证而不用再去走下面的认证项。不过在特殊情况下，用户允许使用空密码登录系统，例如当将某个用户在/etc/shadow 中的密码字段删除之后，该用户可以只输入用户名直接登录系统。
下面的配置项中，通过 pam_succeed_if.so 对用户的登录条件做一些限制，表示允许 uid 大于 500 的用户在通过密码验证的情况下登录，在 Linux 系统中，一般系统用户的 uid 都在 500 之内，所以该项即表示允许使用 useradd 命令以及默认选项建立的普通用户直接由本地控制台登录系统。
最后通过 pam_deny.so 模块对所有不满足上述任意条件的登录请求直接拒绝，pam_deny.so 是一个特殊的模块，该模块返回值永远为否，类似于大多数安全机制的配置准则，在所有认证规则走完之后，对不匹配任何规则的请求直接拒绝。&lt;/p>
&lt;p>第二部分的三个配置项主要表示通过 account 账户类接口来识别账户的合法性以及登录权限。
第一行仍然使用 pam_unix.so 模块来声明用户需要通过密码认证。第二行承认了系统中 uid 小于 500 的系统用户的合法性。之后对所有类型的用户登录请求都开放控制台。&lt;/p>
&lt;p>第三部分会通过 password 类接口来确认用户使用的密码或者口令的合法性。第一行配置项表示需要的情况下将调用 pam_cracklib 来验证用户密码复杂度。如果用户输入密码不满足复杂度要求或者密码错，最多将在三次这种错误之后直接返回密码错误的提示，否则期间任何一次正确的密码验证都允许登录。需要指出的是，pam_cracklib.so 是一个常用的控制密码复杂度的 pam 模块，关于其用法举例我们会在之后详细介绍。之后带 pam_unix.so 和 pam_deny.so 的两行配置项的意思与之前类似。都表示需要通过密码认证并对不符合上述任何配置项要求的登录请求直接予以拒绝。不过用户如果执行的操作是单纯的登录，则这部分配置是不起作用的。&lt;/p>
&lt;p>第四部分主要将通过 session 会话类接口为用户初始化会话连接。其中几个比较重要的地方包括，使用 pam_keyinit.so 表示当用户登录的时候为其建立相应的密钥环，并在用户登出的时候予以撤销。不过该行配置的控制位使用的是 optional，表示这并非必要条件。之后通过 pam_limits.so 限制用户登录时的会话连接资源，相关 pam_limit.so 配置文件是/etc/security/limits.conf，默认情况下对每个登录用户都没有限制。关于该模块的配置方法在后面也会详细介绍。&lt;/p></description></item><item><title>Docs: SELinux</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E7%99%BB%E5%BD%95-Linux-%E4%B8%8E-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/SELinux/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E7%99%BB%E5%BD%95-Linux-%E4%B8%8E-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/SELinux/</guid><description/></item><item><title>Docs: su 与 sudo</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E7%99%BB%E5%BD%95-Linux-%E4%B8%8E-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/su-%E4%B8%8E-sudo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E7%99%BB%E5%BD%95-Linux-%E4%B8%8E-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/su-%E4%B8%8E-sudo/</guid><description/></item><item><title>Docs: TCP Wrappers</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E7%99%BB%E5%BD%95-Linux-%E4%B8%8E-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/TCP-Wrappers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E7%99%BB%E5%BD%95-Linux-%E4%B8%8E-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/TCP-Wrappers/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;p>注意：CentOS8 及 RHEL8 不再支持 TCP_Wrappers！！！！使用 firewalld 代替！！&lt;/p>
&lt;p>&lt;strong>Transmission Control ProtocolWrappers(简称 TCP_Wrappers)&lt;/strong> 是一个基于主机的网络访问控制表系统，用于过滤对类 Unix 系统（如 Linux 或 BSD）的网络访问。&lt;/p>
&lt;p>其能将主机或子网 IP 地址、名称及 ident 查询回复作为筛选标记，实现访问控制。&lt;/p>
&lt;h2 id="tcp_wrappers-特点">Tcp_Wrappers 特点&lt;/h2>
&lt;ul>
&lt;li>工作在第四层（传输层）的 TCP 协议&lt;/li>
&lt;li>对有状态连接的特定服务进行安全检测并实现访问控制&lt;/li>
&lt;li>以库文件形式实现&lt;/li>
&lt;li>某进程是否接受 libwrap 的控制取决于发起此进程的程序在编译时是否针对 libwrap 进行编译的&lt;/li>
&lt;/ul>
&lt;h2 id="判断程序是否支持-tcp_wrappers">判断程序是否支持 Tcp_Wrappers&lt;/h2>
&lt;p>程序如果调用了 libwrap.so 库，表示支持。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>ldd 程序路径|grep libwrap.so
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>strings 程序路径|grep libwrap.so
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#ldd /usr/sbin/sshd|grep libwrap.so&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> libwrap.so.0 &lt;span style="color:#f92672">=&lt;/span>&amp;gt; /lib64/libwrap.so.0 &lt;span style="color:#f92672">(&lt;/span>0x00007f9851678000&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#ldd /usr/sbin/vsftpd |grep libwrap.so&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> libwrap.so.0 &lt;span style="color:#f92672">=&lt;/span>&amp;gt; /lib64/libwrap.so.0 &lt;span style="color:#f92672">(&lt;/span>0x00007f802ef50000&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#strings `which sshd`|grep libwrap.so&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>libwrap.so.0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="tcp_wrappers-的执行处理机制了">TCP_Wrappers 的执行处理机制了&lt;/h2>
&lt;p>TCP_Wrappers 只需要通过两个文件来处理，/etc/hosts.allow 和/etc/hosts.deny。匹配流程如下图&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/cmiwuq/1624581688343-e7b5ceb8-1d56-4b6b-9872-f71462556d23.png" alt="image.png">&lt;/p>
&lt;p>Note：所以，如果想要仅允许一个 ip 可以通过，那么需要在 deny 中拒绝所有，否则只在 allow 添加该 ip，那么其他 ip 在 allow 没匹配到后，会去 deny 查找，如果还是无法匹配，则直接就通过了。&lt;/p>
&lt;h1 id="tcp_wrappers-使用">TCP_Wrappers 使用&lt;/h1>
&lt;p>TCP Wrappers 是通过 /etc/hosts.allow 和 /etc/hosts.deny 这两个配置文件来实现一个类似防火墙的机制。&lt;/p>
&lt;h1 id="tcp_wrappers-关联文件">TCP_Wrappers 关联文件&lt;/h1>
&lt;p>帮助参考：man 5 hosts_access，man 5 hosts_options&lt;/p>
&lt;ul>
&lt;li>&lt;strong>/etc/hosts.allow&lt;/strong> # 允许访问规则&lt;/li>
&lt;li>&lt;strong>/etc/hosts.deny&lt;/strong> # 拒绝访问规则&lt;/li>
&lt;/ul>
&lt;p>注意：说明文档中表示此文件也可以实现拒绝的规则，本着见名知义和管理清晰化的指引，这种写法不是讨论的重点。&lt;/p>
&lt;p>&lt;strong>配置文件的写法: Daemon_List : Client_List [:Shell_Command]&lt;/strong>&lt;/p>
&lt;p>&lt;strong>Daemon_List&lt;/strong># 单个应用程序的二进制文件名，而不是服务名，如果有多个，用逗号或空格分隔。如 sshd,vsftpd 或 sshd vsftpd&lt;/p>
&lt;ul>
&lt;li>可以绑定服务地址,如，sshd@192.168.7.202:ALL(比如一台设备有俩网卡俩地址时)&lt;/li>
&lt;li>支持通配符&lt;/li>
&lt;li>内置关键字：
&lt;ul>
&lt;li>ALL 所有进程&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Client_List&lt;/strong> # 客户端列表&lt;/p>
&lt;ul>
&lt;li>基于单个 IP 地址：192.168.10.1&lt;/li>
&lt;li>基于网段 IP 地址：192.168.1. 注意，192.168.1.0 这个写法是错误的。&lt;/li>
&lt;li>基于主机名：www.hunk.tech .hunk.tech 较少用&lt;/li>
&lt;li>基于网络/掩码：192.168.0.0/255.255.255.0&lt;/li>
&lt;li>基于 net/prefixlen: 192.168.1.0/24（仅 CentOS7）&lt;/li>
&lt;li>基于网络组（NIS 域）：@mynetwork&lt;/li>
&lt;li>内置关键字：
&lt;ul>
&lt;li>ALL 所有主机&lt;/li>
&lt;li>LOCAL 名称中不带点的主机&lt;/li>
&lt;li>KNOWN 可以解析的主机名&lt;/li>
&lt;li>UNKNOWN 无法解析的主机名&lt;/li>
&lt;li>PARANOID 正、反向查询不匹配或无法解析&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>支持通配符&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Shell_Command # 执行指令&lt;/strong>
如：sshd:all:spawn echo &amp;ldquo;&lt;code>date +%%F-%%T&lt;/code> from %a pid=%p to %s&amp;rdquo; &amp;raquo; /app/sshd.log&lt;/p>
&lt;ul>
&lt;li>EXCEPT 是排除的意思，一行规则里可以有多个，后面的是对前面的结果集进行排除。
&lt;ul>
&lt;li>vsftpd:172.16. EXCEPT 172.16.100.0/24 EXCEPT 172.16.100.1&lt;/li>
&lt;li>匹配整个 172.16 网段，但是把 172.16.100 的网段排除，在排除 172.16.100 网段中又把 172.16.100.1 的 IP 给排除。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>spawn 启动一个外部程序完成执行的操作，可以支持内置变量。内置变量请 man ,找%的选项
&lt;ul>
&lt;li>&lt;code>%a&lt;/code> (%A) 客户端 IP&lt;/li>
&lt;li>&lt;code>%c&lt;/code> 客户端信息，可以是 IP 或主机名(如果能解析)&lt;/li>
&lt;li>&lt;code>%p&lt;/code> 服务器进程信息 (PID)&lt;/li>
&lt;li>&lt;code>%s&lt;/code> 连接的服务端的信息&lt;/li>
&lt;li>&lt;code>%%&lt;/code> 当规则中包含%时，使用双%转义&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>twist 特殊扩展
&lt;ul>
&lt;li>以指定的命令执行，执行后立即结束该连接。需在 spawn 之后使用。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="应用示例">应用示例&lt;/h1>
&lt;p>对于 sshd 进程，仅允许 10.10.100.250 访问&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># cat /etc/hosts.allow&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sshd:10.10.100.250
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># cat /etc/hosts.deny&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sshd:ALL
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>或者&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># cat /etc/hosts.deny&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sshd:ALL EXCEPT 10.10.100.250
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用的 2 台测试主机网络 IP 配置如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>简称&lt;/th>
&lt;th>主机&lt;/th>
&lt;th>IP 1&lt;/th>
&lt;th>IP 2&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>6A&lt;/td>
&lt;td>6-web-1.hunk.tech&lt;/td>
&lt;td>192.168.7.201&lt;/td>
&lt;td>192.168.5.102&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>7B&lt;/td>
&lt;td>7-web-2.hunk.tech&lt;/td>
&lt;td>192.168.7.202&lt;/td>
&lt;td>192.168.5.103&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>默认 hosts.allow 和 hosts.deny 配置文件为空，表示全部允许。&lt;/p>
&lt;p>拒绝某个 IP 访问：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>7B:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>vim /etc/hosts.deny
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sshd:192.168.7.201
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>6A:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#ssh 192.168.7.202&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ssh_exchange_identification: Connection closed by remote host
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>配置规则保存后，立即生效
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>7B：日志会明确记录
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#tail -n1 /var/log/secure&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Feb &lt;span style="color:#ae81ff">8&lt;/span> 11:18:29 7-web-2 sshd&lt;span style="color:#f92672">[&lt;/span>1811&lt;span style="color:#f92672">]&lt;/span>: refused connect from 192.168.7.201 &lt;span style="color:#f92672">(&lt;/span>192.168.7.201&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>把每个 ssh 登录日志记录到文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#vim /etc/hosts.allow&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sshd:all:spawn echo &lt;span style="color:#e6db74">&amp;#34;`date +%%F-%%T` from %a pid=%p to %s&amp;#34;&lt;/span> &amp;gt;&amp;gt; /app/sshd.log
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#cat /app/sshd.log&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2018-02-08-15:59:53 from 192.168.7.202 pid&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">2565&lt;/span> to sshd@192.168.7.202
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#ps aux |grep 2565&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root &lt;span style="color:#ae81ff">2565&lt;/span> 0.0 2.3 &lt;span style="color:#ae81ff">145696&lt;/span> &lt;span style="color:#ae81ff">5328&lt;/span> ? Ss 15:59 0:00 sshd: root@pts/2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="自动锁定登录失败的-ip">自动锁定登录失败的 IP&lt;/h2>
&lt;p>编写脚本 /root/bin/checkip.sh，每 5 分钟检查一次，如果发现通过 ssh 登录失败次数超过 10 次，自动将此远程 IP 放入 Tcp_Wrapper 的黑名单中予以禁止防问&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#定义 休眠时间&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sleeptime&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">300&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#定义 通过ssh登录失败次数&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>num&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#定义 黑名单文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>file&lt;span style="color:#f92672">=&lt;/span>/etc/hosts.deny
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#无限循环&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">while&lt;/span> true;&lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">#将失败登录的记录逐行读入变量&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lastb | grep ssh|awk -F &lt;span style="color:#e6db74">&amp;#34;[ ]+&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;{print $3}&amp;#39;&lt;/span>|uniq -c | &lt;span style="color:#66d9ef">while&lt;/span> read conn ip;&lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">#判断失败次数&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$conn&lt;span style="color:#e6db74">&amp;#34;&lt;/span> -ge &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$num&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">]&lt;/span>;&lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">#判断记录的IP是否存在&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> egrep -q ^sshd.*$ip $file
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">#如果不存在记录，将追加记录至指定黑名单文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[&lt;/span> $? -ne &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> echo &lt;span style="color:#e6db74">&amp;#34;sshd:&lt;/span>$ip&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &amp;gt;&amp;gt; $file
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">done&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sleep $sleeptime
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用 &lt;code>watch -n1 cat /etc/hosts.deny&lt;/code> 来观察动态文件&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/cmiwuq/1624581861186-486e5699-5dea-4062-83d7-f7bcb0d874e7.gif" alt="">&lt;/p>
&lt;p>总结：TCP_Wrappers&lt;/p>
&lt;p>适用于需求简单的应用场景，并且受到监控软件的是否支持 libwrap.so 库局限。&lt;/p></description></item><item><title>Docs: 登录与登录信息工具</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E7%99%BB%E5%BD%95-Linux-%E4%B8%8E-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/%E7%99%BB%E5%BD%95%E4%B8%8E%E7%99%BB%E5%BD%95%E4%BF%A1%E6%81%AF%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E7%99%BB%E5%BD%95-Linux-%E4%B8%8E-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/%E7%99%BB%E5%BD%95%E4%B8%8E%E7%99%BB%E5%BD%95%E4%BF%A1%E6%81%AF%E5%B7%A5%E5%85%B7/</guid><description/></item></channel></rss>