<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – 4.Terminal 与 Shell</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.Terminal-%E4%B8%8E-Shell/</link><description>Recent content in 4.Terminal 与 Shell on 断念梦</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.Terminal-%E4%B8%8E-Shell/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Shell 编程语言</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.Terminal-%E4%B8%8E-Shell/Shell-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.Terminal-%E4%B8%8E-Shell/Shell-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Shell_script">Wiki，Shell_script&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Shell Programming Language(shell 编程语言)&lt;/strong> 不是编译型的语言，而是一种脚本语言，通常称为 &lt;strong>Shell script&lt;/strong>。&lt;/p>
&lt;p>在类 Unix 系统中，我们最常使用的就是 Bash，通常 Shell 编程语言狭义上直接指的是 Bash 编程语言。&lt;/p>
&lt;p>而在 Microsoft 系统中，早期是一种 &lt;strong>Batch file(批处理)&lt;/strong> 文件，然后发展出 CMD，到近代可以使用 &lt;a href="docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.Terminal%20%E4%B8%8E%20Shell/WindowsShell/PowerShell/PowerShell.md">PowerShell&lt;/a> 脚本语言。&lt;/p>
&lt;h1 id="shell-的基本结构与要素">Shell 的基本结构与要素&lt;/h1>
&lt;p>Shell 语言的运行环境依赖于其所使用的 shell，是 bash、sh 还是 zsh 等等。想要执行 shell 语言，并不需要下载一个编译器，直接在指定的 shell 中执行代码即可。&lt;/p>
&lt;p>脚本式的语言是编写完代码之后，一条一条执行，所以可以把平时在 Linux 上操作的 Bash Shell 想象成一个大型的文本编辑器，每输入一条命令，就相当于一行代码，直接通过这个 Bash 的 shell 就执行了，而把很多命令组合起来，放在一个文件里，直接运行该文件，与在界面输入很多内容，有异曲同工之妙。&lt;/p>
&lt;p>由于 Shell 语言不需要编译器，所以 Shell 代码的第一行，必须指定其内的代码使用什么 Shell 来运行。&lt;/p>
&lt;h2 id="hello-world">Hello World&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/bin/bash # 告诉内该脚本用什么shell运行，必须是脚本第一行
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>printf &lt;span style="color:#e6db74">&amp;#39;Hello World!&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其实如果是在某个系统下运行代码，第一行也是可以省略的，第一行的意思其实就是代表运行后续命令的环境，而第一行其实也是调用系统 /bin/ 目录下的 bash 二进制文件，来执行后续的代码。&lt;/p>
&lt;h2 id="shell-语言中的关键字">Shell 语言中的关键字&lt;/h2>
&lt;p>Shell 语言关键字主要看是哪种 Shell，在 Linux 下通常都是 Bash。&lt;/p>
&lt;h2 id="shell-语言中的标准库">Shell 语言中的标准库&lt;/h2>
&lt;p>Shell 语言中的标准库，就是该 Shell 所在系统下的可用命令+该 Shell 自带的一些命令。所以在 Shell 的 代码中，书写的大部分代码都是一个个的 Linux 命令。而那些非系统自带的命令(或者说工具)，可以理解为 Shell 编程语言的第三方库。&lt;/p></description></item><item><title>Docs: Bash</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.Terminal-%E4%B8%8E-Shell/Bash/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.Terminal-%E4%B8%8E-Shell/Bash/</guid><description/></item><item><title>Docs: 4.Terminal 与 Shell</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.Terminal-%E4%B8%8E-Shell/4.Terminal-%E4%B8%8E-Shell/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.Terminal-%E4%B8%8E-Shell/4.Terminal-%E4%B8%8E-Shell/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Shell_(computing)">Wiki,Shell&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.man7.org/linux/man-pages/man1/bash.1.html">Manual(手册),bash&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://blog.csdn.net/kangkanglou/article/details/82698177">https://blog.csdn.net/kangkanglou/article/details/82698177&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://feihu.me/blog/2014/env-problem-when-ssh-executing-command-on-remote/">http://feihu.me/blog/2014/env-problem-when-ssh-executing-command-on-remote/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.jianshu.com/p/0c7ea235b473">https://www.jianshu.com/p/0c7ea235b473&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/RxpcqBGhUT-5z4N5kRXvBg">公众号，阿里技术-一种命令行解析的新思路&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Shell(也称为壳层)&lt;/strong> 是一种计算机程序，向人类用户或其他程序公开操作系统的服务。通常，操作系统的 Shell 程序会根据计算机的角色和特定操作，分为两类：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&lt;a href="https://en.wikipedia.org/wiki/Command-line_interface">command-line interface&lt;/a>(命令行界面，简称 CLI)&lt;/strong>&lt;/li>
&lt;li>&lt;strong>&lt;a href="https://en.wikipedia.org/wiki/Graphical_user_interface">graphical user interface&lt;/a>(图形用户界面，简称 GUI)&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>Shell 在计算机科学中指“为用户提供用户界面”的软件，通常指的是命令行界面的解析器。一般来说，这个词是指操作系统中提供访问内核所提供之服务的程序。Shell 也用于泛指所有为用户提供操作界面的程序，也就是程序和用户交互的接口。因此与之相对的是 Kernel(内核)，内核不提供和用户的交互功能。&lt;/p>
&lt;p>用白话讲：人类操作计算机的地方就是 Shell ，可以是一个输入命令的地方(CLI)，也可以是一个用户用鼠标点点点的图形界面(GUI)。Shell 也是一类程序的统称，实际上，当输入完用户名和密码登录系统的时候，就是 Linux 系统后台自动启动了一个名叫 Bash 的 Shell 程序，来让用户输入指令对计算机进行操作&lt;/p>
&lt;p>所以，一个 Shell 也会有一个进程号，在该 Shell 执行的程序的父进程号都是该 Shell 的进程号&lt;/p>
&lt;p>如下所示，&lt;a href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E7%99%BB%E5%BD%95%20Linux%20%E4%B8%8E%20%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/5.%E7%99%BB%E5%BD%95%20Linux%20%E4%B8%8E%20%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6.md">登录系统&lt;/a>时，会启动一个进程标识当前登录的用户，并启动一个子进程，该子进程就是 Bash 这个 Shell，并且会为该 Shell 分配一个&lt;a href="#c0DF2">终端&lt;/a>来与用户进行交互(这里的终端名是 tty1)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>root &lt;span style="color:#ae81ff">1067&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 11:20 ? Ss 0:00 login -- root
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root &lt;span style="color:#ae81ff">9622&lt;/span> &lt;span style="color:#ae81ff">1067&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> 13:19 tty1 Ss+ 0:00 &lt;span style="color:#ae81ff">\_&lt;/span> -bash
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>所有命令都是在这个 shell 下运行的，如下所使，在 bash 下执行了一个 cat 命令&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>root &lt;span style="color:#ae81ff">1067&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 11:20 ? Ss 0:00 login -- root
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root &lt;span style="color:#ae81ff">9622&lt;/span> &lt;span style="color:#ae81ff">1067&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 13:19 tty1 Ss 0:00 &lt;span style="color:#ae81ff">\_&lt;/span> -bash
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root &lt;span style="color:#ae81ff">11198&lt;/span> &lt;span style="color:#ae81ff">9622&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 13:22 tty1 S+ 0:00 &lt;span style="color:#ae81ff">\_&lt;/span> cat
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note：&lt;/p>
&lt;ul>
&lt;li>有一点需要明确，系统下的任何程序运行都需要一个用户，哪怕在刚装完系统第一次启动，所有进程也是基于 root 用户来运行的，所以脱离用户讨论 shell 是不对的。&lt;/li>
&lt;li>&lt;strong>由于 Linux 常用的 Shell 为 bash，下面主要描述的都是关于 bash shell 的配置&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h2 id="terminal终端">Terminal(终端)&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Computer_terminal">Wiki,Computer Terminal&lt;/a>&amp;gt;&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Teleprinter">Wiki,TTY&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Tty_(unix)">Wiki,TTY(Unix)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Pseudoterminal">Wiki,Psedoterminal&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Terminal_emulator">Wiki,Terminal emulator&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://askubuntu.com/questions/481906/what-does-tty-stand-for">TTY 代表什么&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://man7.org/linux/man-pages/man7/pty.7.html">Manual(手册),pty(7)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://man7.org/linux/man-pages/man4/pts.4.html">Manual(手册),pts(4)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Computer Terminal(计算机终端)&lt;/strong> 是一种 Electronic(电子) 或 Electromechanical(机电) 硬件设备，可用于将数据输入计算机或计算机系统，以及从计算机或计算机系统中转录数据。&lt;strong>Teletype(电传打字机，简称 TTY)&lt;/strong> 是早期硬件拷贝终端的一个例子，并且比计算机屏幕的使用早了几十年。早期的终端是廉价设备，与用于输入的打孔卡或纸带相比速度非常慢，但随着技术的改进和视频显示器的引用，终端将这些旧的交互形式推向整个行业，分时系统的发展，弥补了低效的用户打字能力，能够支持统一机器上的多个用户，每个用户都在自己的终端上操作。所以，现代我们将 &lt;strong>TTY 表示为终端&lt;/strong>，是那种最基础的终端。&lt;/p>
&lt;p>除了传统的硬件终端以外，我们还可以通过计算机程序模拟出硬件终端，这种功能称为 &lt;strong>Terminal Emulator(终端模拟器)&lt;/strong>，而很多时候也称为 &lt;strong>Psedoterminal/Pseudotty(伪终端，简称 PTY)&lt;/strong>。PTY 是一对提供双向通信通道的虚拟字符设备，通道的一端称为 master(&lt;strong>简称 PTMX&lt;/strong>)，另一端称为 slave(&lt;strong>简称 PTS&lt;/strong>)。Linux 通过 devpts 文件提供了对 PTS 功能的完整支持。&lt;/p>
&lt;p>终端也分为多种类型，有多种程序可以为用户分配一个指定类型的终端&lt;/p>
&lt;ul>
&lt;li>TTY&lt;/li>
&lt;li>Psedoterminal(伪终端)&lt;/li>
&lt;li>CLI&lt;/li>
&lt;li>TUI&lt;/li>
&lt;/ul>
&lt;p>名词有很多，但是至今位置没有一个明确的标准定义，大家都是拿起来就用~&lt;/p>
&lt;h2 id="cli-的-argsflagoptions">CLI 的 Args、Flag、Options&lt;/h2>
&lt;p>关于 CLI 的术语有很多，比如 Argument(参数)、Flag(标志)、Option(选项) 等&lt;/p>
&lt;p>本质上，命令及其参数只是一个字符串而已，字符串的含义是由 Shell 来解释的，对于 Shell 来说，命令和参数、参数和参数之间是由空白符分割的。除此之外，什么父命令、子命令、本地参数、单横线、双横线 还是其他字符开头都没关系，就仅仅是字符串而已，这些字符串由 Shell 传递给将要执行的程序中。&lt;/p>
&lt;ul>
&lt;li>Argument(参数) # 就是对命令后面一串空白符分割的字符串的称呼&lt;/li>
&lt;li>Flag(标志) # 这种类型的参数可以将某个值跟代码中的某个变量关联起来。&lt;/li>
&lt;li>Option(选项) # Flag 赋予了我们通过 CLI 直接给代码中某个变量赋值的能力。那么如果我没有给这个变量赋值呢，程序还能运行下去么？如果不能运行，则这个 Flag 就是必选的，否则就是可选的。那么这些 Flag 或者 Argument 从这种角度将可以称为 Option。也就是可选的 Flag；或者称为可选的 Argument。&lt;/li>
&lt;/ul></description></item><item><title>Docs: Windows Shell</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.Terminal-%E4%B8%8E-Shell/WindowsShell/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.Terminal-%E4%B8%8E-Shell/WindowsShell/</guid><description/></item></channel></rss>