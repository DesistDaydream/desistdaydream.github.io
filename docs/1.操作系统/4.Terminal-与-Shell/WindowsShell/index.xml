<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – Windows Shell</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.Terminal-%E4%B8%8E-Shell/WindowsShell/</link><description>Recent content in Windows Shell on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.Terminal-%E4%B8%8E-Shell/WindowsShell/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: PowerShell</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.Terminal-%E4%B8%8E-Shell/WindowsShell/PowerShell/PowerShell/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.Terminal-%E4%B8%8E-Shell/WindowsShell/PowerShell/PowerShell/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://learn.microsoft.com/en-us/powershell">官方文档，PowerShell&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.core/about/about?view=powershell-7.3">官方文档，PowerShell-关于&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>PowerShell 是一种跨平台的任务自动化解决方案，由命令行 shell、脚本语言和配置管理框架组成。 PowerShell 在 Windows、Linux 和 macOS 上运行。&lt;/p>
&lt;p>PowerShell 的独特之处在于，它接受并返回 .NET 对象，而非纯文本。这个特点让 PowerShell 可以更轻松地在一个管道中串联不通的命令。&lt;/p>
&lt;blockquote>
&lt;p>这里面所说的对象，就是面向对象编程中常说的“对象”，就像 Go 语言中的 Struct 类似的东西，只不过是 .NET 语言中的对象。&lt;/p>
&lt;/blockquote>
&lt;p>这些对象在被接收后，再交给格式化函数处理，以人类可读的方式，输出出来。&lt;/p>
&lt;p>我们可以在 &lt;a href="https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.core/about/about">PowerShell 官方文档的参考-关于&lt;/a>部分找到对 PowerShell 的基本概念的描述。&lt;/p>
&lt;h2 id="powershell-变量">PowerShell 变量&lt;/h2>
&lt;p>详见 &lt;a href="docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.Terminal%20%E4%B8%8E%20Shell/WindowsShell/PowerShell/PowerShell%20%E5%8F%98%E9%87%8F.md">PowerShell 变量&lt;/a> 章节&lt;/p>
&lt;h2 id="powershell-命令">PowerShell 命令&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.core/about/about_command_precedence">about_Command_Precedence&lt;/a> 介绍 PowerShell 如何确定要运行的命令。&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.core/about/about_command_syntax">about_Command_Syntax&lt;/a> 介绍 PowerShell 中使用的语法关系图&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.core/about/about_core_commands">about_Core_Commands&lt;/a> 列出设计用于 PowerShell 提供程序的 cmdlet&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>介绍 PowerShell 如何确定要运行的命令。&lt;/p>
&lt;p>PowerShell 中可以执行的命令分两类&lt;/p>
&lt;ul>
&lt;li>系统上的可执行命令。&lt;/li>
&lt;li>cmdlet&lt;/li>
&lt;/ul>
&lt;p>PowerShell 内置了一组 &lt;strong>cmdlet(全称 command-lets)&lt;/strong>，cmdlet 并不是一个独立的可执行文件，而是一种统称，cmdlet 被收集在 PowerShell 模块中，可以按需加载它们。可以用任何编译的 .NET 语言或 PowerShell 脚本语言来编写 cmdlet。&lt;/p>
&lt;p>cmdlet 中每个命令的名称都是由 &lt;strong>Verb-Noun(动词-名词)&lt;/strong> 组成，比如 Get-Command 命令用于获取在 CLI 中注册的所有 cmdlet。&lt;/p>
&lt;p>我们可以通过如下几个命令来搜索可用的 cmdlet&lt;/p>
&lt;ul>
&lt;li>&lt;code>Get-Verb&lt;/code> # 获取所有可用的动词&lt;/li>
&lt;li>&lt;code>Get-Command&lt;/code> # 此命令会检索计算机上安装的所有命令的列表。&lt;/li>
&lt;li>&lt;code>Get-Member&lt;/code> # 基于其他命令运行，可以获取 cmdlet 返回的对象信息，包括对象中的&lt;strong>属性、方法、等等&lt;/strong>&lt;/li>
&lt;li>&lt;code>Get-Help&lt;/code> # 以命令名称为参数调用此命令，将显示一个帮助页面，其中说明了命令的各个部分。&lt;/li>
&lt;/ul>
&lt;p>从本笔记的 &lt;a href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Y.Windows%20%E7%AE%A1%E7%90%86/Windows%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/_index.md">Windows 管理工具&lt;/a> 目录查找所有可用的命令，以及查看命令的用法&lt;/p>
&lt;p>我们可以通过 &lt;code>$psversiontable&lt;/code> 和 &lt;code>$host&lt;/code> 变量查看 PowerShell 版本信息&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>PS C:\&amp;gt; $psversiontable
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Name Value
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---- -----
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PSVersion &lt;span style="color:#ae81ff">7.3&lt;/span>.2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PSEdition Core
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>GitCommitId &lt;span style="color:#ae81ff">7.3&lt;/span>.2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>OS Microsoft Windows &lt;span style="color:#ae81ff">10.0&lt;/span>.19045
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Platform Win32NT
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PSCompatibleVersions {&lt;span style="color:#ae81ff">1.0&lt;/span>, &lt;span style="color:#ae81ff">2.0&lt;/span>, &lt;span style="color:#ae81ff">3.0&lt;/span>, &lt;span style="color:#ae81ff">4.0&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">…&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PSRemotingProtocolVersion &lt;span style="color:#ae81ff">2.3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>SerializationVersion &lt;span style="color:#ae81ff">1.1&lt;/span>.0.1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>WSManStackVersion &lt;span style="color:#ae81ff">3.0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PS C:\&amp;gt; $host
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Name &lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> ConsoleHost
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Version &lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> &lt;span style="color:#ae81ff">7.3&lt;/span>.2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>InstanceId &lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> 518ca4c4-e959-4d51-b3bb-cdcb3d5a1484
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>UI &lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> System.Management.Automation.Internal.Host.InternalHostUserInterface
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CurrentCulture &lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> zh-CN
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CurrentUICulture &lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> zh-CN
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PrivateData &lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> Microsoft.PowerShell.ConsoleHost+ConsoleColorProxy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>DebuggerEnabled &lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> True
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>IsRunspacePushed &lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> False
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Runspace &lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> System.Management.Automation.Runspaces.LocalRunspace
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="安装与更新">安装与更新&lt;/h1>
&lt;h1 id="使用-powershell">使用 PowerShell&lt;/h1>
&lt;p>&lt;code>powershell&lt;/code> 和 &lt;code>pwsh&lt;/code> 这几个命令一般都是用来打开 PowerShell 的，同时也是执行 PowerShell 脚本的前置命令。就像执行 Bash 脚本前加个 &lt;code>bash&lt;/code> 命令一样&lt;/p>
&lt;h1 id="item">ITEM&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://learn.microsoft.com/en-us/powershell/scripting/lang-spec/chapter-03#33-items">官方文档-PowerShell，脚本-基本概念-Items&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>PowerShell 中会抽象出一个 &lt;strong>Item(项)&lt;/strong> 的概念，Item 可以一个 &lt;strong>Alias(别名)&lt;/strong>、&lt;strong>Variable(变量)&lt;/strong>、&lt;strong>Function(函数)&lt;/strong>、&lt;strong>EnvironmentVariable(环境变量)&lt;/strong>、甚至可以是文件系统中的 &lt;strong>File(文件)&lt;/strong> 或者 &lt;strong>Directory(目录)&lt;/strong>。&lt;/p>
&lt;p>我们常用的 &lt;code>ls&lt;/code> 命令，在 PowerShell 中其实就是调用了 &lt;code>Get-ChildItem&lt;/code> 命令&lt;/p>
&lt;h1 id="porviders提供器-和-drives驱动器">Porviders(提供器) 和 Drives(驱动器)&lt;/h1>
&lt;p>在 PowerShell 中，Providers 和 Drives 是提供对不同数据源（如文件系统、注册表、Certificate 等）的访问的特定接口。Drives 则是实际代表特定数据源的容器，比如本地磁盘驱动器、注册表驱动器等。使用 PowerShell 可以对这些数据源进行管理和操作。&lt;/p></description></item><item><title>Docs: WindowsShell</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.Terminal-%E4%B8%8E-Shell/WindowsShell/WindowsShell/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.Terminal-%E4%B8%8E-Shell/WindowsShell/WindowsShell/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/windows-commands">官方文档-Windowns Server，Windows 命令&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/en-us/windows/win32/shell/shell-entry">官方文档，Windows Shell&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/en-us/powershell/">官方文档，PowerShell&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Windows_shell">Wiki，Windows shell&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Windows 有两个 CLI 的 Shell：Command shell 和 PowerShell。每个 Shell 都是一个软件程序，可在我们与操作系统或应用程序之间提供直接通信，从而自动化 IT 操作的环境。&lt;/p>
&lt;p>Windows 有一个 GUI 的 Shell：Windows Shell，这个名词除了表示所有适用于 Windows 的 Shell 以外，还可以单独代表一个 Windows GUI Shell。&lt;/p>
&lt;h1 id="windows-terminal">Windows Terminal&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://learn.microsoft.com/en-us/windows/terminal/">官方文档-windows，终端&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>Docs: PowerShell</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.Terminal-%E4%B8%8E-Shell/WindowsShell/PowerShell/_index_/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.Terminal-%E4%B8%8E-Shell/WindowsShell/PowerShell/_index_/</guid><description/></item><item><title>Docs: PowerShell 变量</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.Terminal-%E4%B8%8E-Shell/WindowsShell/PowerShell/PowerShell-%E5%8F%98%E9%87%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.Terminal-%E4%B8%8E-Shell/WindowsShell/PowerShell/PowerShell-%E5%8F%98%E9%87%8F/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_variables">官方文档-PowerShell，关于-关于变量&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.core/about/about_variables">官方文档-PowerShell，关于-关于自动变量&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.core/about/about_preference_variables">官方文档-PowerShell，关于-关于首选项变量&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/en-us/powershell/scripting/lang-spec/chapter-03?view=powershell-7.3#312-environment-variables">官方文档-PowerShell，脚本-基本概念-环境变量&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>PowerShell 变量名称不区分大小写，可以包含空格和特殊字符。但是官方推荐尽量避免使用空格和特殊字符，使用起来很麻烦，详见&lt;a href="https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.core/about/about_variables#variable-names-that-include-special-characters">包含特殊字符的变量名称&lt;/a>&lt;/p>
&lt;p>PowerShell 中的&lt;strong>环境变量&lt;/strong>与&lt;strong>普通变量&lt;/strong>在声明方式和引用方式上有&lt;strong>明显不同&lt;/strong>，这与 Linux Shell 的 &lt;a href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.Terminal%20%E4%B8%8E%20Shell/Shell%20%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/%E5%8F%98%E9%87%8F.md">变量&lt;/a> 不太一样。举一个非常简单的例子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>PS C:\Users\DesistDaydream&amp;gt; $test_var=&lt;span style="color:#e6db74">&amp;#34;这是一个普通变量&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PS C:\Users\DesistDaydream&amp;gt; $test_var
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">这是一个普通变量&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PS C:\Users\DesistDaydream&amp;gt; $env:test_var
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PS C:\Users\DesistDaydream&amp;gt; $env:test_env_var=&lt;span style="color:#e6db74">&amp;#34;这是一个环境变量&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PS C:\Users\DesistDaydream&amp;gt; $test_env_var
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PS C:\Users\DesistDaydream&amp;gt; $env:test_env_var
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">这是一个环境变量&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="普通变量">普通变量&lt;/h2>
&lt;p>PowerShell 中有几种不同类型的变量：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>User-created variables(用户创建的变量)&lt;/strong> # 用户创建的变量由用户创建和维护。 默认情况下，仅在 PowerShell 窗口打开时，在 PowerShell 命令行中创建的变量才存在。 关闭 PowerShell 窗口时，将删除变量。 若要保存变量，请将其添加到 PowerShell 配置文件。 还可以在具有全局、脚本或本地范围的脚本中创建变量。&lt;/li>
&lt;li>&lt;strong>Automatic variables(自动变量)&lt;/strong> # 自动变量存储 PowerShell 的状态。 这些变量由 PowerShell 创建，PowerShell 会根据需要更改其值，以保持其准确性。 用户无法更改这些变量的值。 例如，变量 &lt;code>$PSHOME&lt;/code> 存储 PowerShell 安装目录的路径。&lt;/li>
&lt;li>&lt;strong>Preference variables(首选项变量)&lt;/strong> # 首选项变量存储 PowerShell 的用户首选项。 这些变量由 PowerShell 创建，并使用默认值填充。 用户可以更改这些变量的值。 例如，变量 &lt;code>$MaximumHistoryCount&lt;/code> 确定会话历史记录中的最大条目数。&lt;/li>
&lt;/ul>
&lt;h3 id="自动变量">自动变量&lt;/h3>
&lt;p>描述存储 PowerShell 的状态信息的变量。 这些变量由 PowerShell 创建和维护。&lt;/p>
&lt;p>&lt;code>$?&lt;/code> # 最后一个命令的执行状态。如果最后一个命令成功，值为 True，如果失败，值为 False&lt;/p>
&lt;p>&lt;code>$HOME&lt;/code> # 用户家目录的绝对路径。此变量使用 &lt;code>$env:USERPROFILE&lt;/code> 环境变量的值。&lt;/p>
&lt;p>&lt;code>$PSHOME&lt;/code> # PowerShell 安装目录的绝对路径。&lt;/p>
&lt;p>&lt;code>$PWD&lt;/code> # 当前 PowerShell 运行时所在目录位置的绝对路径。每次执行 cd 命令都会更新该变量的值。&lt;/p>
&lt;h3 id="首选项变量">首选项变量&lt;/h3>
&lt;p>自定义 PowerShell 行为的变量。&lt;/p>
&lt;h2 id="环境变量">环境变量&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.core/about/about_environment_variables">官方文档-PowerShell，关于-关于环境变量&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>环境变量存储操作系统和其他应用程序使用的数据。&lt;/p>
&lt;p>在 Windows 中，可以在 3 个作用域中定义环境变量&lt;/p>
&lt;ul>
&lt;li>系统&lt;/li>
&lt;li>用户&lt;/li>
&lt;li>进程&lt;/li>
&lt;/ul>
&lt;p>我们在 PowerShell 声明的环境变量通常都是进程作用范围的，对于系统和用户作用范围，通常就是指永久声明环境变量。&lt;/p>
&lt;p>当我们想要在系统和用户作用域中永久声明环境变量时，可以使用 &lt;code>Machine&lt;/code> 表示系统作用域，使用 &lt;code>User&lt;/code> 表示用户作用域；也可以在 GUI 上找到&lt;code>控制面板-系统-高级系统设置-高级-环境变量&lt;/code> 处修改。&lt;/p>
&lt;p>在 PowerShell 中，我们可以引用 &lt;a href="docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.Terminal%20%E4%B8%8E%20Shell/WindowsShell/WindowsShell%20%E5%8F%98%E9%87%8F.md">WindowsShell 变量&lt;/a> 中的环境变量。&lt;/p>
&lt;h3 id="powershell-使用的其他环境变量">PowerShell 使用的其他环境变量&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>PATH&lt;/strong> # 包含操作系统搜索可执行文件的文件夹位置的列表。&lt;/li>
&lt;li>&lt;strong>PATHEXT&lt;/strong> # 包含 Windows 视为可执行文件的文件扩展名列表。&lt;/li>
&lt;li>&lt;strong>XDG&lt;/strong> # XDG &lt;a href="https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html">基本目录规范定义的 XDG&lt;/a> 环境变量
&lt;ul>
&lt;li>XDG_CONFIG_HOME&lt;/li>
&lt;li>XDG_DATA_HOME&lt;/li>
&lt;li>XDG_CACHE_HOME&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="声明变量">声明变量&lt;/h1>
&lt;ul>
&lt;li>普通变量: &lt;code>$VAR_NAME=VALUE&lt;/code>&lt;/li>
&lt;li>环境变量: &lt;code>$env:VAR_NAME=VALUE&lt;/code>&lt;/li>
&lt;/ul>
&lt;h1 id="引用变量">引用变量&lt;/h1>
&lt;ul>
&lt;li>普通变量: &lt;code>$VAR_NAME&lt;/code>&lt;/li>
&lt;li>环境变量: &lt;code>$env:VAR_NAME&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>想要获取变量，有几下几种方式：&lt;/p>
&lt;ul>
&lt;li>&lt;code>Get-Item Env:*&lt;/code>&lt;/li>
&lt;li>&lt;code>ls env:&lt;/code>&lt;/li>
&lt;li>&lt;code>Get-Variable&lt;/code>&lt;/li>
&lt;/ul>
&lt;h1 id="变量管理工具">变量管理工具&lt;/h1>
&lt;p>在 PowerShell 中，变量也可以称为一个 Item，因此可以由大多数与 Item 相关的 cmdlet 命令控制&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/new-variable?view=powershell-7.3">New-Variable&lt;/a>: Creates a variable&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/set-variable?view=powershell-7.3">Set-Variable&lt;/a>: Creates or changes the characteristics of one or more variables&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/get-variable?view=powershell-7.3">Get-Variable&lt;/a>: Gets information about one or more variables&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/clear-variable?view=powershell-7.3">Clear-Variable&lt;/a>: Deletes the value of one or more variables&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/remove-variable?view=powershell-7.3">Remove-Variable&lt;/a>: Deletes one or more variables&lt;/li>
&lt;/ul>
&lt;h1 id="最佳实践">最佳实践&lt;/h1>
&lt;h2 id="切割-path-变量">切割 PATH 变量&lt;/h2>
&lt;ul>
&lt;li>&lt;code>(type env:path) -split ';'&lt;/code> # 切割字符串，将 ; 替换为换行符。方便查看&lt;/li>
&lt;/ul>
&lt;h2 id="永久设置系统或用户范围的环境变量">永久设置系统或用户范围的环境变量&lt;/h2>
&lt;p>设置和取消系统或用户范围的环境变量：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 设置&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[&lt;span style="color:#66d9ef">Environment&lt;/span>]::SetEnvironmentVariable(&lt;span style="color:#e6db74">&amp;#39;Foo&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;Bar&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;Machine&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 取消&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[&lt;span style="color:#66d9ef">Environment&lt;/span>]::SetEnvironmentVariable(&lt;span style="color:#e6db74">&amp;#39;Foo&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;Machine&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 设置&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[&lt;span style="color:#66d9ef">Environment&lt;/span>]::SetEnvironmentVariable(&lt;span style="color:#e6db74">&amp;#39;Foo&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;Bar&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;User&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 取消&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[&lt;span style="color:#66d9ef">Environment&lt;/span>]::SetEnvironmentVariable(&lt;span style="color:#e6db74">&amp;#39;Foo&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;User&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="设置代理">设置代理&lt;/h2>
&lt;p>PowerShell&lt;/p>
&lt;ul>
&lt;li>&lt;code>$env:HTTPS_PROXY=&amp;quot;http://127.0.0.1:7890&amp;quot;&lt;/code>&lt;/li>
&lt;/ul></description></item><item><title>Docs: WindowsShell 变量</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.Terminal-%E4%B8%8E-Shell/WindowsShell/WindowsShell-%E5%8F%98%E9%87%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.Terminal-%E4%B8%8E-Shell/WindowsShell/WindowsShell-%E5%8F%98%E9%87%8F/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://sysin.org/blog/windows-env/">https://sysin.org/blog/windows-env/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://ss64.com/nt/syntax-variables.html">https://ss64.com/nt/syntax-variables.html&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>赋值方式与引用方式详见各自 Shell 章节&lt;/p>
&lt;ul>
&lt;li>在 CMD 中：&lt;/li>
&lt;/ul>
&lt;p>引用方式：&lt;/p>
&lt;ul>
&lt;li>在 CMD 和资源管理器中：&lt;code>%VAR%&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>TODO: Windows 中的变量好像不区分大小写？&lt;/p>
&lt;h1 id="常用环境变量">常用环境变量&lt;/h1>
&lt;p>&lt;strong>COMPUTERNAME&lt;/strong> # 主机名&lt;/p>
&lt;p>&lt;strong>USERNAME&lt;/strong> # 用户名&lt;/p>
&lt;p>&lt;strong>USERPROFILE&lt;/strong> # 用户家目录。默认值：&lt;code>C:/Users/${USERNAME}/&lt;/code>&lt;/p>
&lt;p>&lt;strong>TMP&lt;/strong> # 临时目录。默认值：&lt;/p>
&lt;ul>
&lt;li>系统级 &lt;code>C:/WINDOWS/TEMP&lt;/code>&lt;/li>
&lt;li>用户级 &lt;code>%USERPROFILE%/AppData/Local/Temp&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>APPDATA&lt;/strong> # 应用程序的数据保存路径。默认值：&lt;code>%USERPROFILE%/AppData/Roaming/&lt;/code>&lt;/p>
&lt;ul>
&lt;li>这个目录下的数据通常可以随着网络连接同步到其他电脑。比如用户的配置、插件等等。当然，很多时候，应用程序也会将这些可以在网络同步的数据保存到 文档、家目录 等等地方中。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>LOCALAPPDATA&lt;/strong> # 应用程序的本地数据保存路径。默认值：&lt;code>%USERPROFILE%/AppData/Local/&lt;/code>&lt;/p>
&lt;p>&lt;strong>ProgramData&lt;/strong> # 指定程序数据文件夹的路径。与 Program Files 文件夹不同，应用程序可以使用此文件夹为标准用户存储数据，因为它不需要提升的权限。&lt;code>默认值：C:/ProgramData&lt;/code>&lt;/p>
&lt;p>&lt;strong>ProgramFiles&lt;/strong> # &lt;code>默认值：C:/Program Files&lt;/code>&lt;/p>
&lt;p>注意：&lt;/p>
&lt;ul>
&lt;li>Windows 中没有指向 “文档”、“视频” 等等目录的变量，可以在 PowerShell 中使用 &lt;code>[environment]::getfolderpath(&amp;quot;mydocuments&amp;quot;)&lt;/code> 获取。
&lt;ul>
&lt;li>参考：https://stackoverflow.com/questions/3492920/is-there-a-system-defined-environment-variable-for-documents-directory&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: WindowsShell 命令</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.Terminal-%E4%B8%8E-Shell/WindowsShell/WindowsShell-%E5%91%BD%E4%BB%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.Terminal-%E4%B8%8E-Shell/WindowsShell/WindowsShell-%E5%91%BD%E4%BB%A4/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/windows-commands">官方文档，Windows Server-命令&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/en-us/powershell/module">官方文档，PowerShell-模块参考&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>所有受支持的 Windows 和 Windows Server 版本都内置了一组 Win32 控制台命令。同时，&lt;a href="docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.Terminal%20%E4%B8%8E%20Shell/WindowsShell/PowerShell/PowerShell.md">PowerShell&lt;/a> 也内置了一组 cmdlet&lt;/p>
&lt;p>这些命令可以用来管理 Windows，很多命令的详解可以参见 &lt;a href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Y.Windows%20%E7%AE%A1%E7%90%86/Windows%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/_index.md">Windows 管理工具&lt;/a> 目录。&lt;/p>
&lt;p>本质上，内置的命令就两类：&lt;/p>
&lt;ul>
&lt;li>Win32 控制台命令。一般在保存 &lt;code>C:/Windows/System32/&lt;/code> 目录中，就像 Unix 的 &lt;code>/usr/bin&lt;/code> 这种目录似的，都是一些可执行文件。&lt;/li>
&lt;li>PowerShell 中的 cmdlet。也就是 PowerShell 的各种模块。这些 cmdlet 虽然不是可见的可执行文件，但是也可以实现类似命令的效果。&lt;/li>
&lt;/ul></description></item></channel></rss>