<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦的站点 – Bash 内置命令</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.Terminal-%E4%B8%8E-Shell/Bash/Bash-%E5%86%85%E7%BD%AE%E5%91%BD%E4%BB%A4/</link><description>Recent content in Bash 内置命令 on 断念梦的站点</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.Terminal-%E4%B8%8E-Shell/Bash/Bash-%E5%86%85%E7%BD%AE%E5%91%BD%E4%BB%A4/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Job control</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.Terminal-%E4%B8%8E-Shell/Bash/Bash-%E5%86%85%E7%BD%AE%E5%91%BD%E4%BB%A4/Job-control/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.Terminal-%E4%B8%8E-Shell/Bash/Bash-%E5%86%85%E7%BD%AE%E5%91%BD%E4%BB%A4/Job-control/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.man7.org/linux/man-pages/man1/bash.1.html#JOB_CONTROL">Manual(手册)，Bash(1)-JOB_CONTROL&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Job control(作业控制) 是指有选择的&lt;strong>停止/挂起&lt;/strong>进程的执行，并在稍后&lt;strong>继续/恢复&lt;/strong>它们的执行能力。我们一般都是在 Shell 中使用此功能的，比如 Bash。&lt;/p>
&lt;p>在前台执行的程序为前台 JOB，前台程序占用一个 shell，执行该程序后，shell 无法再进行别的操作&lt;/p>
&lt;p>在后台执行的程序为后台 JOB，后台程序不占用 shell，可以在该 shell 下继续执行其余任务，不受 ctrl+c 的影响&lt;/p>
&lt;p>常见操作：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>ctrl+z&lt;/strong> # 在正在运行的 porcess 中使用这个组合键，可以让前台进程暂停&lt;/li>
&lt;li>&lt;strong>fg %JobNumber&lt;/strong> # 让后台的进程在前台工作&lt;/li>
&lt;li>&lt;strong>bg %JobNumber&lt;/strong> # 让前台的工作在后台工作&lt;/li>
&lt;li>&lt;strong>nohup COMMAND&lt;/strong> # 让命令触发的进程不随 shell 关闭而停止&lt;/li>
&lt;li>&lt;strong>COMMAND &amp;amp;&lt;/strong> # 让命令触发的进程直接在后台运行&lt;/li>
&lt;/ul>
&lt;h1 id="jobs-命令">jobs 命令&lt;a class="td-heading-self-link" href="#jobs-%e5%91%bd%e4%bb%a4" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="syntax语法">Syntax(语法)&lt;a class="td-heading-self-link" href="#syntax%e8%af%ad%e6%b3%95" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>查看 jobs&lt;/p>
&lt;p>&lt;strong>jobs [OPTIONS]&lt;/strong>&lt;/p>
&lt;p>OPTIONS：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-l&lt;/strong> # 查看 jobs 的详细信息&lt;/li>
&lt;/ul></description></item><item><title>Docs: 变量管理工具</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.Terminal-%E4%B8%8E-Shell/Bash/Bash-%E5%86%85%E7%BD%AE%E5%91%BD%E4%BB%A4/%E5%8F%98%E9%87%8F%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.Terminal-%E4%B8%8E-Shell/Bash/Bash-%E5%86%85%E7%BD%AE%E5%91%BD%E4%BB%A4/%E5%8F%98%E9%87%8F%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</guid><description>
&lt;h1 id="export">export&lt;a class="td-heading-self-link" href="#export" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>设置或显示环境变量(export 的效力仅作用于该次登陆操作)。&lt;/p>
&lt;h2 id="syntax语法">Syntax(语法)&lt;a class="td-heading-self-link" href="#syntax%e8%af%ad%e6%b3%95" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>export [OPTIONS] [VarName[=VALUE] &amp;hellip;]&lt;/strong>&lt;/p>
&lt;p>用户创建的变量仅可用于当前 Shell，子 Shell 默认读取不到父 Shell 定义的变量。为了把变量传递给子 Shell，需要使用 export 命令。这样输出的变量，对于子 Shell 来说就是环境变量。&lt;/p>
&lt;p>&lt;strong>OPTIONS&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-f&lt;/strong> # 代表[NAME]中为函数名称&lt;/li>
&lt;li>&lt;strong>-n&lt;/strong> # 删除指定的变量。变量实际上并未删除，只是不会输出到后续指令的执行环境中&lt;/li>
&lt;li>&lt;strong>-p&lt;/strong> # 列出所有的 shell 赋予程序的环境变量。&lt;/li>
&lt;/ul>
&lt;h2 id="example">EXAMPLE&lt;a class="td-heading-self-link" href="#example" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>export VarName=&amp;ldquo;Value&amp;rdquo;&lt;/p>
&lt;p>export VarName&lt;/p>
&lt;h1 id="declare">declare&lt;a class="td-heading-self-link" href="#declare" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>声明 shell 变量。declare 为 shell 命令，在第一种语法中可用来声明变量并设置变量的属性，在第二种语法中可用来显示 shell 函数。若不加上任何参数，则会显示全部的 shell 变量与函数(与执行 set 指令的效果相同)。&lt;/p>
&lt;h2 id="syntax语法-1">Syntax(语法)&lt;a class="td-heading-self-link" href="#syntax%e8%af%ad%e6%b3%95-1" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>declare [+/-][OPTIONS] VarName&lt;/strong>&lt;/p>
&lt;p>&lt;strong>OPTIONS&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-&lt;/strong> # 给变量添加类型属性&lt;/li>
&lt;li>&lt;strong>+&lt;/strong> # 取消变量的类型属性&lt;/li>
&lt;li>&lt;strong>-a&lt;/strong> # 将变量声明为数组型&lt;/li>
&lt;li>&lt;strong>-i&lt;/strong> # 将变量声明为整型&lt;/li>
&lt;li>&lt;strong>-x&lt;/strong> # 将变量声明为环境变量&lt;/li>
&lt;li>&lt;strong>-r&lt;/strong> # 将变量声明为只读变量&lt;/li>
&lt;li>&lt;strong>-p&lt;/strong> # 查看变量的被声明的类型&lt;/li>
&lt;li>&lt;strong>-f&lt;/strong> #&lt;/li>
&lt;/ul>
&lt;h1 id="unset">unset&lt;a class="td-heading-self-link" href="#unset" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;strong>unset VarName&lt;/strong>&lt;/p>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>unset TestVar # 取消变量名为 TestVar 的值&lt;/li>
&lt;/ul></description></item><item><title>Docs: set 命令</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.Terminal-%E4%B8%8E-Shell/Bash/Bash-%E5%86%85%E7%BD%AE%E5%91%BD%E4%BB%A4/set-%E5%91%BD%E4%BB%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.Terminal-%E4%B8%8E-Shell/Bash/Bash-%E5%86%85%E7%BD%AE%E5%91%BD%E4%BB%A4/set-%E5%91%BD%E4%BB%A4/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.gnu.org/software/bash/manual/html_node/The-Set-Builtin.html">GNU 文档，Bash 参考手册-Shell 内置命令-修改 Shell 行为-Set 内置命令&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://morven.life/posts/how-to-write-robust-shell-script/">https://morven.life/posts/how-to-write-robust-shell-script/&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="前言">前言&lt;a class="td-heading-self-link" href="#%e5%89%8d%e8%a8%80" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Shell 脚本会有各种坑，经常导致 Shell 脚本因为各种原因不能正常执行成功。实际上，编写健壮可靠的 Shell 脚本也是有一定的技巧的。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 在执行Shell脚本的时候，通常都会创建一个新的Shell，比如，当我们执行：&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>bash script.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Bash 会创建一个新的 Shell 来执行 script.sh，同时也默认给定了这个执行环境的各种参数。set 命令可以用来修改 Shell 环境的运行参数，不带任何参数的 set 命令，会显示所有的环境变量和 Shell 函数。我们重点介绍其中最常用的四个。&lt;/p>
&lt;p>set -euxo pipefail&lt;/p>
&lt;h2 id="set--x">set -x&lt;a class="td-heading-self-link" href="#set--x" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>默认情况下，Shell 脚本执行后只显示运行结果，不会展示结果是哪一行代码的输出，如果多个命令连续执行，它们的运行结果就会连续输出，导致很难分清一串结果是什么命令产生的。
set -x 用来在运行结果之前，先输出执行的那一行命令，行首以+表示是命令而非命令输出，同时，每个命令的参数也会展开，我们可以清晰地看到每个命令的运行实参，这对于 Shell 的 debug 来说非常友好。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87">set&lt;/span> -x
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">v&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#000">$v&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;hello&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># output:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># + v=5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># + echo 5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># + echo hello&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># hello&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>实际上，set -x 还有另一种写法 set -o xtrace。&lt;/p>
&lt;h2 id="set--u">set -u&lt;a class="td-heading-self-link" href="#set--u" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Shell 脚本不像其他高级语言，如 Python, Ruby 等，Shell 脚本默认不提供安全机制，举个简单的例子，Ruby 脚本尝试去读取一个没有初始化的变量的内容的时候会报错，而 Shell 脚本默认不会有任何提示，只是简单地忽略。&lt;/p>
&lt;pre>&lt;code>#!/bin/bash
echo $v
echo &amp;quot;hello&amp;quot;
# output:
#
# hello
&lt;/code>&lt;/pre>
&lt;p>可以看到，echo $v 输出了一个空行，Bash完全忽略了不存在的$v 继续执行后面的命令 echo &amp;ldquo;hello&amp;rdquo;。这其实并不是开发者想要的行为，对于不存在的变量，脚本应该报错且停止执行来防止错误的叠加。set -u 就用来改变这种默认忽略未定义变量行为，脚本在头部加上它，遇到不存在的变量就会报错，并停止执行。&lt;/p>
&lt;pre>&lt;code>#!/bin/bash
set -u
echo $a
echo bar
# output:
# ./script.sh: line 4: v: unbound variable
&lt;/code>&lt;/pre>
&lt;p>set -u 另一种写法是 set -o nounset&lt;/p>
&lt;h2 id="set--e">set -e&lt;a class="td-heading-self-link" href="#set--e" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>对于默认的 Shell 脚本运行环境，有运行失败的命令（返回值非 0），Bash 会继续执行后面的命令：&lt;/p>
&lt;pre>&lt;code>#!/bin/bash
unknowncmd
echo &amp;quot;hello&amp;quot;
# output:
# ./script.sh: line 3: unknowncmd: command not found
# hello
&lt;/code>&lt;/pre>
&lt;p>可以看到，Bash 只是显示有错误，接着继续执行 Shell 脚本，这种行为很不利于脚本安全和排错。实际开发中，如果某个命令失败，往往需要脚本停止&lt;/p>
&lt;p>set -e 从根本上解决了这个问题，它使得脚本只要发生错误，就终止执行：&lt;/p>
&lt;pre>&lt;code>#!/bin/bash
set -e
unknowncmd
echo &amp;quot;hello&amp;quot;
# output:
# ./script.sh: line 4: unknowncmd: command not found
&lt;/code>&lt;/pre>
&lt;p>可以看到，第 4 行执行失败以后，脚本就终止执行了。&lt;/p>
&lt;p>set -e 根据命令的返回值来判断命令是否运行失败。但是，某些命令的非零返回值可能不表示失败，或者开发者希望在命令失败的情况下，脚本继续执行下去：&lt;/p>
&lt;pre>&lt;code>#!/bin/bash
set -e
$(ls foobar)
echo &amp;quot;hello&amp;quot;
# output:
# ls: cannot access 'foobar': No such file or directory
&lt;/code>&lt;/pre>
&lt;p>可以看到，打开 set -e 之后，即使 ls 是一个已存在的命令，但因为 ls 命令的运行参数 foobar 实际上并不存在导致命令的返回非 0 值，这有时候并不是我们看到的。&lt;/p>
&lt;p>可以暂时关闭 set -e，该命令执行结束后，再重新打开 set -e：&lt;/p>
&lt;pre>&lt;code>#!/bin/bash
set -e
set +e
$(ls foobar)
set -e
echo &amp;quot;hello&amp;quot;
# output:
# ls: cannot access 'foobar': No such file or directory
# hello
&lt;/code>&lt;/pre>
&lt;p>上面代码中，set +e 表示关闭-e 选项，set -e 表示重新打开-e 选项。&lt;/p>
&lt;p>还有一种方法是使用 command || true，使得该命令即使执行失败，脚本也不会终止执行。&lt;/p>
&lt;p>set -e 还有另一种写法 set -o errexit。&lt;/p>
&lt;h2 id="set--o-pipefail">set -o pipefail&lt;a class="td-heading-self-link" href="#set--o-pipefail" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>set -e 有一个例外情况，就是不适用于管道命令。对于管道命令，Bash 会把最后一个子命令的返回值作为整个命令的返回值。也就是说，只要最后一个子命令不失败，管道命令总是会执行成功，因此它后面命令依然会执行，set -e 就失效了。&lt;/p>
&lt;p>请看下面这个例子。&lt;/p>
&lt;pre>&lt;code>#!/bin/bash
set -e
foo | echo &amp;quot;bar&amp;quot;
echo &amp;quot;hello&amp;quot;
# output:
# ./script.sh: line 4: foo: command not found
# bar
# hello
&lt;/code>&lt;/pre>
&lt;p>可以看到，foo 是一个不存在的命令，但是 foo | echo bar 这个管道命令还是会执行成功，导致后面的 echo hello 会继续执行。&lt;/p>
&lt;p>set -o pipefail 用来解决这种情况，只要一个子命令失败，整个管道命令就失败，脚本就会终止执行：&lt;/p>
&lt;pre>&lt;code>#!/bin/bash
set -e
set -o pipefail
foo | echo &amp;quot;bar&amp;quot;
echo &amp;quot;hello&amp;quot;
# output:
# ./script.sh: line 5: foo: command not found
# bar
&lt;/code>&lt;/pre>
&lt;p>可以看到，echo hello 命令并没有执行。&lt;/p>
&lt;p>合并四个参数&lt;/p>
&lt;p>对于上面提到的四个 set 命令参数，一般都放在一起使用。&lt;/p>
&lt;h1 id="写法一-set--euxo-pipefail-写法二-set--euxset--o-pipefail">写法一 set -euxo pipefail# 写法二 set -euxset -o pipefail&lt;a class="td-heading-self-link" href="#%e5%86%99%e6%b3%95%e4%b8%80-set--euxo-pipefail-%e5%86%99%e6%b3%95%e4%ba%8c-set--euxset--o-pipefail" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>这两种写法任选其一放在所有 Shell 脚本的头部。&lt;/p>
&lt;p>当然，也可以在在执行 Shell 脚本的时候，从 Bash 命令行传入这些参数：&lt;/p>
&lt;p>bash -euxo pipefail script.sh&lt;/p>
&lt;h1 id="shell-脚本防御式编程">Shell 脚本防御式编程&lt;a class="td-heading-self-link" href="#shell-%e8%84%9a%e6%9c%ac%e9%98%b2%e5%be%a1%e5%bc%8f%e7%bc%96%e7%a8%8b" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>编写 Shell 脚本的时候应该考虑不可预期的程序输入，如文件不存在或者目录没有创建成功…其实 Shell 命令有很多选项可以解决这类问题，例如，使用 mkdir 创建目录的时候，如果父目录不存在，mkdir 默认返回错误，但如果加上-p 选项，mkdir 在父目录不存在的情况下先创建父目录；rm 在删除一个不存在的文件会失败，但如果加上-f 选项，即使文件不能存在也能执行成功。&lt;/p>
&lt;p>注意字符串中的空格&lt;/p>
&lt;p>我们必须时刻注意字符串中的空格字符，如文件名中的空格，命令参数中的空格等等，对于这些空格字符安全的最佳时实践是使用&amp;quot;括住相应的字符串：&lt;/p>
&lt;h1 id="will-fail-if-filename-contains-spacesif--filename--foo--will-success-even-if-filename-contains-spacesif--filename--foo-">will fail if $filename contains spacesif [ $filename = &amp;ldquo;foo&amp;rdquo; ];# will success even if $filename contains spacesif [ &amp;ldquo;$filename&amp;rdquo; = &amp;ldquo;foo&amp;rdquo; ];&lt;a class="td-heading-self-link" href="#will-fail-if-filename-contains-spacesif--filename--foo--will-success-even-if-filename-contains-spacesif--filename--foo-" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>Someone will always use spaces in filenames or command line arguments and you should keep this in mind when writing shell scripts. In particular you should use quotes around variables.&lt;/p>
&lt;p>if [ $filename = “foo” ]; will fail if $filename contains a space. This can be fixed by using:&lt;/p>
&lt;p>if [ “$filename” = “foo” ];&lt;/p>
&lt;p>类似的情况是，我们在使用$@或者其他包含由空格分割的多个字符串也要注意使用&amp;quot;括住相应的变量，实际上，使用&amp;quot;括住相应的变量没有任何副作用，只会是我们的 Shell 脚本更加健壮：&lt;/p>
&lt;p>foo() { for i in $@; do printf &amp;ldquo;%s\n&amp;rdquo; &amp;ldquo;$i&amp;rdquo;; done }; foo bar &amp;ldquo;baz quux&amp;quot;barbazquuxfoo() { for i in &amp;ldquo;$@&amp;rdquo;; do printf &amp;ldquo;%s\n&amp;rdquo; &amp;ldquo;$i&amp;rdquo;; done }; foo bar &amp;ldquo;baz quux&amp;quot;barbaz quux&lt;/p>
&lt;h1 id="使用-trap-命令">使用 trap 命令&lt;a class="td-heading-self-link" href="#%e4%bd%bf%e7%94%a8-trap-%e5%91%bd%e4%bb%a4" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>关于 Shell 脚本一个常见的情况是，脚本执行失败导致文件系统处于不一致的状态，比如文件锁、临时文件或者 Shell 脚本的错误只更新了部分文件。为了达到“事务的完整性”我们需要解决这些不一致的问题，要么删除文件锁、临时文件，要么将状态恢复到更新之前的状态。实际上，Shell 脚本确实提供了一种在捕捉到特定的 unix 信号的情况下执行一段命令或者函数的功能：&lt;/p>
&lt;p>trap command signal [signal &amp;hellip;]&lt;/p>
&lt;p>其实 Shell 脚本可以捕捉很多类型的信号（完整信号列表可以使用 kill -l 命令获取），但是我们通常只关心在问题发生之后用来恢复现场的三种信号：INT，TERM 和 EXIT&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Signal&lt;/td>
&lt;td>Description&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>INT&lt;/td>
&lt;td>Interrupt – this signal is sent when someone kills the script by pressing ctrl-c&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>TERM&lt;/td>
&lt;td>Terminate – this signal is sent when someone sends the TERM signal using the kill command&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>EXIT&lt;/td>
&lt;td>Exit – this is a pseudo-signal and is triggered when your script exits, either through reaching the end of the script, an exit command or by a command failing when using set -e&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>一般情况下，我们在操作对应的共享区之前先创建文件锁：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> ! -e &lt;span style="color:#000">$lockfile&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> touch &lt;span style="color:#000">$lockfile&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> critical-section
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rm &lt;span style="color:#000">$lockfile&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;critical-section is already running&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">fi&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>但是当 Shell 脚本操作对应的共享区的时候有人手动 Kill 掉对应的 Shell 脚本进程，这个时候文件锁的存在会导致 Shell 脚本不能再次操作对应的共享区。使用 trap 我们可以捕捉到对应的 Kill 信号并做相应的恢复操作：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> ! -e &lt;span style="color:#000">$lockfile&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">trap&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;rm -f &lt;/span>&lt;span style="color:#000">$lockfile&lt;/span>&lt;span style="color:#4e9a06">; exit&amp;#34;&lt;/span> INT TErm EXIT
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> touch &lt;span style="color:#000">$lockfile&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">$lockfile&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rm &lt;span style="color:#000">$lockfile&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">trap&lt;/span> - INT TErm EXIT
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;critical-section is already running&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">fi&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>有了上面这段 trap 命令，即使当 Shell 脚本操作对应的共享区的时候有人手动 Kill 掉对应的 Shell 脚本进程，文件锁也会被清理干净。需要注意的是，我们在捕捉到 Kill 信号之后删除完文件锁之后直接退出而不是继续执行&lt;/p>
&lt;p>。&lt;/p>
&lt;p>Be Atomic&lt;/p>
&lt;p>很多时候我们需要一次更新一批文件，但是有可能在更新了一半之后 Shell 脚本出错或者有人 kill 掉了 Shell 脚本的进程。你可能会想到，就使用刚才学到的 trap 知识，同时对就文件做备份，一旦捕捉到出错的信号，就恢复备份。这看起来没错，但是很多时候只能解决一部分的问题。例如，我们要把一个网站里面的 URL 从www.example.org全部更新为www.example.com，Shell脚本的主要逻辑类似于这样：&lt;/p>
&lt;p>for file in $(find /var/www -type f -name &amp;ldquo;*.html&amp;rdquo;); do perl -pi -e &amp;rsquo;s/www.example.org/www.example.com/&amp;rsquo; $filedone&lt;/p>
&lt;p>正确的做法是尽量使更新操作原子化，实现操作的“事务一致性”：1. 拷贝旧目录；2. 在拷贝的目录中进行更新操作；3. 替换原目录&lt;/p>
&lt;p>cp -a /var/www /var/www-tmpfor file in $(find /var/www-tmp -type f -name &amp;ldquo;*.html&amp;rdquo;); do perl -pi -e &amp;rsquo;s/www.example.org/www.example.com/&amp;rsquo; $filedonemv /var/www /var/www-oldmv /var/www-tmp /var/www&lt;/p>
&lt;p>在类 Unix 文件系统上进行最后的两次 mv 操作是非常快的（因为只需要替换两个目录的 inode，而不用执行实际的拷贝操作），换句话说，容易出错的地方是批量的更新操作，而我们将更新操作全部在拷贝的目录中执行，这样，更新操作即使出错，也不会影响原目录。这里的技巧是，使用双倍的硬盘空间来进行操作，任何是需要长时间打开文件的操作都是在备份目录中进行。事实上，保持一系列操作的原子性对于某些容易出错的 Shell 脚本来说非常重要，同时操作前备份文件也是一个好的编程习惯。&lt;/p></description></item><item><title>Docs: 管道符等组合命令</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.Terminal-%E4%B8%8E-Shell/Bash/Bash-%E5%86%85%E7%BD%AE%E5%91%BD%E4%BB%A4/%E7%AE%A1%E9%81%93%E7%AC%A6%E7%AD%89%E7%BB%84%E5%90%88%E5%91%BD%E4%BB%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.Terminal-%E4%B8%8E-Shell/Bash/Bash-%E5%86%85%E7%BD%AE%E5%91%BD%E4%BB%A4/%E7%AE%A1%E9%81%93%E7%AC%A6%E7%AD%89%E7%BB%84%E5%90%88%E5%91%BD%E4%BB%A4/</guid><description>
&lt;h1 id="-管道符">| (管道符)&lt;a class="td-heading-self-link" href="#-%e7%ae%a1%e9%81%93%e7%ac%a6" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>把 &lt;code>|&lt;/code> 前面的标准输出内容当作 &lt;code>|&lt;/code> 后面的标准输入内容&lt;/p>
&lt;p>EXAMPLE&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/sl7f9m/1616165959227-38b8c228-113d-4a87-a335-22560fdc396b.jpeg" alt="">&lt;/p>
&lt;ul>
&lt;li>echo “&amp;ndash;help” | cat # 把&amp;ndash;help 当作 cat 的标准输入输出到屏幕上，如图所示，注意与 xargs 应用实例 a 的区别&lt;/li>
&lt;/ul>
&lt;h1 id="exec">exec&lt;a class="td-heading-self-link" href="#exec" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="syntax语法">Syntax(语法)&lt;a class="td-heading-self-link" href="#syntax%e8%af%ad%e6%b3%95" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>exec [-cl] [-a name] [COMMAND [ARGUMENTS&amp;hellip;]]&lt;/strong>&lt;/p>
&lt;p>如果指定了 command，它将替换 shell。 没有创建新进程。 参数成为命令的参数。 如果提供了-l 选项，则 shell 会在传递给 command 的第 0 个参数的开头放置一个破折号。 这是 login(1) 的作用。 -c 选项导致命令在空环境中执行。 如果提供了-a，则 shell 将 name 作为第 0 个参数传递给执行的命令。 如果由于某种原因无法执行命令，则会退出非交互式 shell，除非启用了 shell 选项 execfail，在这种情况下它将返回失败。 如果无法执行文件，则交互式 shell 将返回失败。 如果未指定 command，则任何重定向在当前 shell 中生效，返回状态为 0.如果存在重定向错误，则返回状态为 1&lt;/p>
&lt;p>通过 exec 来执行的命令会顶替掉当前 shell 的进程，但是进程 PID 保持不变&lt;/p>
&lt;h1 id="xargs">xargs&lt;a class="td-heading-self-link" href="#xargs" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>xargs 可以把从 &lt;code>|&lt;/code> 前面获得的输入内容，当成 xargs 后面的命令的选项或者参数来执行&lt;/p>
&lt;h2 id="syntax语法-1">Syntax(语法)&lt;a class="td-heading-self-link" href="#syntax%e8%af%ad%e6%b3%95-1" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>xargs [OPTIONS] COMMAND&lt;/strong> # 不指定 COMMAND 则默认输出到屏幕上&lt;/p>
&lt;p>OPTIONS：&lt;/p>
&lt;ul>
&lt;li>-d 指定获得输入内容的分隔符，默认分隔符为空白或换行&lt;/li>
&lt;li>-n 每次传递 NUM 个字符给|后的内容&lt;/li>
&lt;/ul>
&lt;h2 id="example">EXAMPLE&lt;a class="td-heading-self-link" href="#example" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>echo “&amp;ndash;help” | xargs cat # 把&amp;ndash;help 当作 cat 的选项或者参数，如图所示，注意与管道符的应用实例 a 中的区别&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/sl7f9m/1616165959237-c4a1a831-c6a0-4c52-ba6f-9f071cb59ba3.jpeg" alt="">&lt;/p>
&lt;ul>
&lt;li>ls /var/run/docker/netns | xargs -I {} nsenter &amp;ndash;net=/var/run/docker/netns/{} ip addr # 遍历 netns 目录下的所有文件,通过 xargs 命令把所有文件名传递给后面命令，作为后面命令的参数&lt;/li>
&lt;/ul></description></item></channel></rss>