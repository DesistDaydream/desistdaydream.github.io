<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦的站点 – Terminal 与 Shell</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Terminal-%E4%B8%8E-Shell/</link><description>Recent content in Terminal 与 Shell on 断念梦的站点</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Terminal-%E4%B8%8E-Shell/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Shell 编程语言</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Terminal-%E4%B8%8E-Shell/Shell-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Terminal-%E4%B8%8E-Shell/Shell-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Shell_script">Wiki，Shell_script&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Shell Programming Language(shell 编程语言)&lt;/strong> 不是编译型的语言，而是一种脚本语言，通常称为 &lt;strong>Shell script&lt;/strong>。&lt;/p>
&lt;p>在类 Unix 系统中，我们最常使用的就是 Bash，通常 Shell 编程语言狭义上直接指的是 Bash 编程语言。&lt;/p>
&lt;p>而在 Microsoft 系统中，早期是一种 &lt;strong>Batch file(批处理)&lt;/strong> 文件，然后发展出 CMD，到近代可以使用 &lt;a href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Terminal%20%E4%B8%8E%20Shell/WindowsShell/PowerShell/PowerShell.md">PowerShell&lt;/a> 脚本语言。&lt;/p>
&lt;h1 id="shell-的基本结构与要素">Shell 的基本结构与要素&lt;a class="td-heading-self-link" href="#shell-%e7%9a%84%e5%9f%ba%e6%9c%ac%e7%bb%93%e6%9e%84%e4%b8%8e%e8%a6%81%e7%b4%a0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>Shell 语言的运行环境依赖于其所使用的 shell，是 bash、sh 还是 zsh 等等。想要执行 shell 语言，并不需要下载一个编译器，直接在指定的 shell 中执行代码即可。&lt;/p>
&lt;p>脚本式的语言是编写完代码之后，一条一条执行，所以可以把平时在 Linux 上操作的 Bash Shell 想象成一个大型的文本编辑器，每输入一条命令，就相当于一行代码，直接通过这个 Bash 的 shell 就执行了，而把很多命令组合起来，放在一个文件里，直接运行该文件，与在界面输入很多内容，有异曲同工之妙。&lt;/p>
&lt;p>由于 Shell 语言不需要编译器，所以 Shell 代码的第一行，必须指定其内的代码使用什么 Shell 来运行。&lt;/p>
&lt;h2 id="hello-world">Hello World&lt;a class="td-heading-self-link" href="#hello-world" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#!/bin/bash # 告诉内该脚本用什么shell运行，必须是脚本第一行
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87">printf&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;Hello World!&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其实如果是在某个系统下运行代码，第一行也是可以省略的，第一行的意思其实就是代表运行后续命令的环境，而第一行其实也是调用系统 /bin/ 目录下的 bash 二进制文件，来执行后续的代码。&lt;/p>
&lt;h2 id="shell-语言中的关键字">Shell 语言中的关键字&lt;a class="td-heading-self-link" href="#shell-%e8%af%ad%e8%a8%80%e4%b8%ad%e7%9a%84%e5%85%b3%e9%94%ae%e5%ad%97" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Shell 语言关键字主要看是哪种 Shell，在 Linux 下通常都是 Bash。&lt;/p>
&lt;h2 id="shell-语言中的标准库">Shell 语言中的标准库&lt;a class="td-heading-self-link" href="#shell-%e8%af%ad%e8%a8%80%e4%b8%ad%e7%9a%84%e6%a0%87%e5%87%86%e5%ba%93" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Shell 语言中的标准库，就是该 Shell 所在系统下的可用命令+该 Shell 自带的一些命令。所以在 Shell 的 代码中，书写的大部分代码都是一个个的 Linux 命令。而那些非系统自带的命令(或者说工具)，可以理解为 Shell 编程语言的第三方库。&lt;/p></description></item><item><title>Docs: Terminal 与 Shell</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Terminal-%E4%B8%8E-Shell/Terminal-%E4%B8%8E-Shell/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Terminal-%E4%B8%8E-Shell/Terminal-%E4%B8%8E-Shell/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Shell_(computing)">Wiki，Shell&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.man7.org/linux/man-pages/man1/bash.1.html">Manual(手册)，bash&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://blog.csdn.net/kangkanglou/article/details/82698177">https://blog.csdn.net/kangkanglou/article/details/82698177&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://feihu.me/blog/2014/env-problem-when-ssh-executing-command-on-remote/">http://feihu.me/blog/2014/env-problem-when-ssh-executing-command-on-remote/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.jianshu.com/p/0c7ea235b473">https://www.jianshu.com/p/0c7ea235b473&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/RxpcqBGhUT-5z4N5kRXvBg">公众号，阿里技术-一种命令行解析的新思路&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Shell(也称为壳层)&lt;/strong> 是一种计算机程序，向人类用户或其他程序公开操作系统的服务。通常，操作系统的 Shell 程序会根据计算机的角色和特定操作，分为两类：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&lt;a href="https://en.wikipedia.org/wiki/Command-line_interface">command-line interface&lt;/a>(命令行界面，简称 CLI)&lt;/strong>&lt;/li>
&lt;li>&lt;strong>&lt;a href="https://en.wikipedia.org/wiki/Graphical_user_interface">graphical user interface&lt;/a>(图形用户界面，简称 GUI)&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>Shell 在计算机科学中指“为用户提供用户界面”的软件，通常指的是命令行界面的解析器。一般来说，这个词是指操作系统中提供访问内核所提供之服务的程序。Shell 也用于泛指所有为用户提供操作界面的程序，也就是程序和用户交互的接口。因此与之相对的是 Kernel(内核)，内核不提供和用户的交互功能。&lt;/p>
&lt;p>用白话讲：人类操作计算机的地方就是 Shell ，可以是一个输入命令的地方(CLI)，也可以是一个用户用鼠标点点点的图形界面(GUI)。Shell 也是一类程序的统称，实际上，当输入完用户名和密码登录系统的时候，就是 Linux 系统后台自动启动了一个名叫 Bash 的 Shell 程序，来让用户输入指令对计算机进行操作&lt;/p>
&lt;p>所以，一个 Shell 也会有一个进程号，在该 Shell 执行的程序的父进程号都是该 Shell 的进程号&lt;/p>
&lt;p>如下所示，&lt;a href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%99%BB%E5%BD%95%20Linux%20%E4%B8%8E%20%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/%E7%99%BB%E5%BD%95%20Linux%20%E4%B8%8E%20%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6.md">登录系统&lt;/a>时，会启动一个进程标识当前登录的用户，并启动一个子进程，该子进程就是 Bash 这个 Shell，并且会为该 Shell 分配一个&lt;a href="#Terminal(%E7%BB%88%E7%AB%AF)">终端&lt;/a>来与用户进行交互(这里的终端名是 tty1)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>root &lt;span style="color:#0000cf;font-weight:bold">1067&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 11:20 ? Ss 0:00 login -- root
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root &lt;span style="color:#0000cf;font-weight:bold">9622&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1067&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> 13:19 tty1 Ss+ 0:00 &lt;span style="color:#4e9a06">\_&lt;/span> -bash
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>所有命令都是在这个 shell 下运行的，如下所使，在 bash 下执行了一个 cat 命令&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>root &lt;span style="color:#0000cf;font-weight:bold">1067&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 11:20 ? Ss 0:00 login -- root
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root &lt;span style="color:#0000cf;font-weight:bold">9622&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1067&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 13:19 tty1 Ss 0:00 &lt;span style="color:#4e9a06">\_&lt;/span> -bash
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root &lt;span style="color:#0000cf;font-weight:bold">11198&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">9622&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 13:22 tty1 S+ 0:00 &lt;span style="color:#4e9a06">\_&lt;/span> cat
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note：&lt;/p>
&lt;ul>
&lt;li>有一点需要明确，系统下的任何程序运行都需要一个用户，哪怕在刚装完系统第一次启动，所有进程也是基于 root 用户来运行的，所以脱离用户讨论 shell 是不对的。&lt;/li>
&lt;li>&lt;strong>由于 Linux 常用的 Shell 为 bash，下面主要描述的都是关于 bash shell 的配置&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h1 id="terminal终端">Terminal(终端)&lt;a class="td-heading-self-link" href="#terminal%e7%bb%88%e7%ab%af" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Computer_terminal">Wiki，Computer Terminal&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Teleprinter">Wiki，TTY&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Tty_(unix)">Wiki，TTY(Unix)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Pseudoterminal">Wiki，Psedoterminal&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Terminal_emulator">Wiki，Terminal emulator&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://askubuntu.com/questions/481906/what-does-tty-stand-for">TTY 代表什么&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://man7.org/linux/man-pages/man7/pty.7.html">Manual(手册)，pty(7)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://man7.org/linux/man-pages/man4/pts.4.html">Manual(手册)，pts(4)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Computer Terminal(计算机终端)&lt;/strong> 是一种 Electronic(电子) 或 Electromechanical(机电) 硬件设备，可用于将数据输入计算机或计算机系统，以及从计算机或计算机系统中转录数据。&lt;strong>Teletype(电传打字机，简称 TTY)&lt;/strong> 是早期硬件拷贝终端的一个例子，并且比计算机屏幕的使用早了几十年。早期的终端是廉价设备，与用于输入的打孔卡或纸带相比速度非常慢，但随着技术的改进和视频显示器的引用，终端将这些旧的交互形式推向整个行业，分时系统的发展，弥补了低效的用户打字能力，能够支持统一机器上的多个用户，每个用户都在自己的终端上操作。所以，现代我们将 &lt;strong>TTY 表示为终端&lt;/strong>，是那种最基础的终端。&lt;/p>
&lt;p>除了传统的硬件终端以外，我们还可以通过计算机程序模拟出硬件终端，这种功能称为 &lt;strong>Terminal Emulator(终端模拟器)&lt;/strong>，而很多时候也称为 &lt;strong>Psedoterminal/Pseudotty(伪终端，简称 PTY)&lt;/strong>。PTY 是一对提供双向通信通道的虚拟字符设备，通道的一端称为 master(&lt;strong>简称 PTMX&lt;/strong>)，另一端称为 slave(&lt;strong>简称 PTS&lt;/strong>)。Linux 通过 devpts 文件提供了对 PTS 功能的完整支持。&lt;/p>
&lt;p>终端也分为多种类型，有多种程序可以为用户分配一个指定类型的终端&lt;/p>
&lt;ul>
&lt;li>TTY&lt;/li>
&lt;li>Psedoterminal(伪终端)&lt;/li>
&lt;li>CLI&lt;/li>
&lt;li>TUI&lt;/li>
&lt;/ul>
&lt;p>名词有很多，但是至今位置没有一个明确的标准定义，大家都是拿起来就用~&lt;/p>
&lt;h1 id="ansi-转义码">ANSI 转义码&lt;a class="td-heading-self-link" href="#ansi-%e8%bd%ac%e4%b9%89%e7%a0%81" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/ANSI_escape_code">Wiki，ANSI_escape_code&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://man7.org/linux/man-pages/man4/console_codes.4.html">Manual(手册)，console_codes(4)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.cnblogs.com/xiaoqiangink/p/12718524.html">&amp;lt;计算机知识&amp;gt;：ANSI转义序列以及输出颜色字符详解&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gist.github.com/fnky/458719343aabd01cfb17a3a4f7296797">https://gist.github.com/fnky/458719343aabd01cfb17a3a4f7296797&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://blog.csdn.net/ScilogyHunter/article/details/106874395">https://blog.csdn.net/ScilogyHunter/article/details/106874395&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learnku.com/articles/26231">https://learnku.com/articles/26231&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://blog.51cto.com/u_15069477/3439423">51CTO，使用ANSI改变终端输出样式&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>ANSI escape code(ANSI 转义码)&lt;/strong> 也称为 &lt;strong>ANSI escape sequences(ANSI 转义序列)&lt;/strong>，是一种&lt;a href="https://en.wikipedia.org/wiki/In-band_signaling">带内信令&lt;/a>标准，用于控制终端上的光标位置、颜色、字体样式、等等终端相关功能。可以算是一种特殊的&lt;a href="https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81/%E5%AD%97%E7%AC%A6%E7%9A%84%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81/%E6%8E%A7%E5%88%B6%E5%AD%97%E7%AC%A6.md">控制字符&lt;/a>（也称为控制码）。&lt;/p>
&lt;p>ANSI 序列是在二十世纪七十年代引入的标准，用以取代特定终端供应商的序列，并在二十世纪八十年代早期开始在计算机设备市场上广泛使用。与早期缺少光标移动功能的系统相比，新生的电子公告板系统（BBS）使用 ANSI 序列改进其显示。正是因为这个原因，ANSI 序列变成了所有制造商共同采用的标准。&lt;/p>
&lt;p>转义码由 &lt;strong>Escape(ESC) 符号&lt;/strong>后跟&lt;strong>普通字符&lt;/strong>组成。终端在收到一个 ESC 时，就会把其后面的几个字符当作主机发送的命令来对待，并对该字符序列作出诠释。在识别出有效的转义序列结束后，终端执行主机的控制命令。随后所接收到的字符将仍然会显示在屏幕上（除非它们也是控制字符或者转义字符序列）。&lt;/p>
&lt;p>转义码具有不同的长度，所有序列都以 &lt;a href="https://desistdaydream.github.io/docs/8.%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81/%E5%AD%97%E7%AC%A6%E7%9A%84%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81/ASCII%20%E8%A1%A8.md">ASCII&lt;/a> 的 &lt;strong>ESC 符号&lt;/strong>开头，第二个字节则是 0x40–0x5F（i.e. &lt;code>@A–Z[\]^_&lt;/code>）范围内的字符。&lt;/p>
&lt;ul>
&lt;li>ESC 字符可以通过如下几种方式表示出来
&lt;ul>
&lt;li>使用键盘按键 &lt;code>Ctrl + [&lt;/code>&lt;/li>
&lt;li>十六进制 &lt;code>0x1B&lt;/code>&lt;/li>
&lt;li>十进制 &lt;code>27&lt;/code>&lt;/li>
&lt;li>八进制 &lt;code>\033&lt;/code>&lt;/li>
&lt;li>Unicode &lt;code>\u001b&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>可以参考 Man 手册中，有完整的 ANSI 转义码列表&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/ANSI/202308231738266.png" alt="image.png">&lt;/p>
&lt;h2 id="csi">CSI&lt;a class="td-heading-self-link" href="#csi" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>Control Sequence Introducer(控制序列引入器，简称 CSI)&lt;/strong> 以 &lt;code>ESC[&lt;/code> 开头，大致可分为四类：&lt;/p>
&lt;ul>
&lt;li>光标移动指令&lt;/li>
&lt;li>清屏指令&lt;/li>
&lt;li>字符渲染指令，通常指 &lt;a href="#sgr">SGR&lt;/a>&lt;/li>
&lt;li>终端控制指令&lt;/li>
&lt;/ul>
&lt;p>CSI 序列 由 &lt;code>ESC [&lt;/code> 以及若干个 &lt;code>参数字节&lt;/code> 和 若干个&lt;code>中间字节&lt;/code> 以及 一个 &lt;code>最终字节&lt;/code> 组成.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>组成部分&lt;/th>
&lt;th>字符范围&lt;/th>
&lt;th>ASCII&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>参数字节&lt;/td>
&lt;td>0x30–0x3F&lt;/td>
&lt;td>&lt;code>0–9:;&amp;lt;=&amp;gt;?&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>中间字节&lt;/td>
&lt;td>0x20–0x2F&lt;/td>
&lt;td>&lt;code>空格、!&amp;quot;#$%&amp;amp;'()*+,-./&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>最终字节&lt;/td>
&lt;td>0x40–0x7E&lt;/td>
&lt;td>&lt;code>@A–Z[]^_&lt;/code>a–z{}~`&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>一些 CSI 序列（不完整）&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/ANSI/202308231648309.png" alt="image.png">&lt;/p>
&lt;p>WIi 中代码的表述模糊，这里用一个例子描述一下。CSI 就是 &lt;code>ESC[&lt;/code>，比如 EL 功能，我们如果使用 Go 语言的话，可以这么写：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">fmt&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Printf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34; \033[2J&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中 &lt;code>\033[2J&lt;/code> 就是 &lt;code>CSI n J&lt;/code>。虽然表中有空格，但是实际使用时并不需要添加空格，表中的空格只是让人们看着更舒服。&lt;/p>
&lt;ul>
&lt;li>CSI 就是 &lt;code>ESC[&lt;/code>，i.e. &lt;code>\033[&lt;/code>
&lt;ul>
&lt;li>注意，这里的 ESC 使用 8 进制表示，我们可以可以使用 16 进制表示，比如这样：&lt;code>fmt.Printf(&amp;quot; %c[2J&amp;quot;,0x1B)&lt;/code> 或者 &lt;code>fmt.Printf(&amp;quot; \x1b[2J&amp;quot;)&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>n 就是 2&lt;/li>
&lt;li>J 就是 J&lt;/li>
&lt;/ul>
&lt;p>这个代码可以让终端实现清屏的效果，就像按 Ctrl + L 或者使用 clear 命令。&lt;/p>
&lt;h3 id="sgr">SGR&lt;a class="td-heading-self-link" href="#sgr" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>&lt;strong>Select Graphic Rendition(选择图形呈现，简称 SGR)&lt;/strong> 用于字符渲染指令，格式为 &lt;code>ESC[Nm&lt;/code>，在 CSI 的开头面跟数字，并以 m 结尾。n 的取值范围是 0-107&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/ANSI/202308231700074.png" alt="image.png">&lt;/p>
&lt;p>&lt;strong>背景色：&lt;/strong>&lt;/p>
&lt;p>40:黑 41:深红 42:绿 43:黄色 44:蓝色 45:紫色 46:深绿 47:白色&lt;/p>
&lt;p>&lt;strong>字体颜色：&lt;/strong>&lt;/p>
&lt;p>30:黑 31:红 32:绿 33:黄 34:蓝色 35:紫色 36:深绿 37:白色&lt;/p>
&lt;p>linux 终端下输出带颜色的文字只需在文字前面添加如下格式&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-none" data-lang="none">echo -e &amp;#34;\033[字背景颜色;文字颜色m字符串\033[0m&amp;#34;`
&lt;/code>&lt;/pre>&lt;p>其中 &lt;code>\033&lt;/code> 是ESC的八进制，&lt;code>\033[&lt;/code>即告诉终端后面是设置颜色的参数，显示方式，前景色，背景色均是数字&lt;/p>
&lt;p>例如:&lt;/p>
&lt;p>&lt;code>echo -e &amp;quot;\033[41;36m something here \033[0m&amp;quot;&lt;/code>&lt;/p>
&lt;p>其中 41 代表背景色，36 代表字的颜色&lt;/p>
&lt;p>可以将所有控制参数都用上，也可以只使用前景色或背景色.&lt;/p>
&lt;p>但有一点要注意，如果输出带颜色的字符后并没有恢复终端默认设置，后续的命令输出仍旧会采用之前的颜色，如果是在脚本中设置了颜色而未恢复，则整个脚本的输出都会采用之前的颜色，因此如果不希望影响后面文字的输出，最好是在输出带颜色的文字之后恢复终端默认设置，如下&lt;/p>
&lt;p>如果想设置文字颜色:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">echo&lt;/span> -e &lt;span style="color:#4e9a06">&amp;#34;\033[30m 黑色字 \033[0m&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">echo&lt;/span> -e &lt;span style="color:#4e9a06">&amp;#34;\033[31m 红色字 \033[0m&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">echo&lt;/span> -e &lt;span style="color:#4e9a06">&amp;#34;\033[32m 绿色字 \033[0m&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">echo&lt;/span> -e &lt;span style="color:#4e9a06">&amp;#34;\033[33m 黄色字 \033[0m&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">echo&lt;/span> -e &lt;span style="color:#4e9a06">&amp;#34;\033[34m 蓝色字 \033[0m&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">echo&lt;/span> -e &lt;span style="color:#4e9a06">&amp;#34;\033[35m 紫色字 \033[0m&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">echo&lt;/span> -e &lt;span style="color:#4e9a06">&amp;#34;\033[36m 天蓝字 \033[0m&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">echo&lt;/span> -e &lt;span style="color:#4e9a06">&amp;#34;\033[37m 白色字 \033[0m&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果是简单设置背景颜色:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">echo&lt;/span> -e &lt;span style="color:#4e9a06">&amp;#34;\033[40;37m 黑底白字 \033[0m&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">echo&lt;/span> -e &lt;span style="color:#4e9a06">&amp;#34;\033[41;37m 红底白字 \033[0m&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">echo&lt;/span> -e &lt;span style="color:#4e9a06">&amp;#34;\033[42;37m 绿底白字 \033[0m&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">echo&lt;/span> -e &lt;span style="color:#4e9a06">&amp;#34;\033[43;37m 黄底白字 \033[0m&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">echo&lt;/span> -e &lt;span style="color:#4e9a06">&amp;#34;\033[44;37m 蓝底白字 \033[0m&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">echo&lt;/span> -e &lt;span style="color:#4e9a06">&amp;#34;\033[45;37m 紫底白字 \033[0m&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">echo&lt;/span> -e &lt;span style="color:#4e9a06">&amp;#34;\033[46;37m 天蓝底白字 \033[0m&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">echo&lt;/span> -e &lt;span style="color:#4e9a06">&amp;#34;\033[47;30;1m 白底黑字加粗 \033[0m&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="cli-的-argsflagoptions">CLI 的 Args、Flag、Options&lt;a class="td-heading-self-link" href="#cli-%e7%9a%84-argsflagoptions" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>关于 CLI 的术语有很多，比如 Argument(参数)、Flag(标志)、Option(选项) 等&lt;/p>
&lt;p>本质上，命令及其参数只是一个字符串而已，字符串的含义是由 Shell 来解释的，对于 Shell 来说，命令和参数、参数和参数之间是由空白符分割的。除此之外，什么父命令、子命令、本地参数、单横线、双横线 还是其他字符开头都没关系，就仅仅是字符串而已，这些字符串由 Shell 传递给将要执行的程序中。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Argument(参数)&lt;/strong> # 就是对命令后面一串空白符分割的字符串的称呼&lt;/li>
&lt;li>&lt;strong>Flag(标志)&lt;/strong> # 这种类型的参数可以将某个值跟代码中的某个变量关联起来。&lt;/li>
&lt;li>&lt;strong>Option(选项)&lt;/strong> # Flag 赋予了我们通过 CLI 直接给代码中某个变量赋值的能力。那么如果我没有给这个变量赋值呢，程序还能运行下去么？如果不能运行，则这个 Flag 就是必选的，否则就是可选的。那么这些 Flag 或者 Argument 从这种角度将可以称为 Option。也就是可选的 Flag；或者称为可选的 Argument。&lt;/li>
&lt;/ul></description></item><item><title>Docs: Bash</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Terminal-%E4%B8%8E-Shell/Bash/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Terminal-%E4%B8%8E-Shell/Bash/</guid><description/></item><item><title>Docs: Windows Shell</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Terminal-%E4%B8%8E-Shell/WindowsShell/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Terminal-%E4%B8%8E-Shell/WindowsShell/</guid><description/></item></channel></rss>