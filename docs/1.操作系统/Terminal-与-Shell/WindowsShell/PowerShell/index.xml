<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PowerShell on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Terminal-%E4%B8%8E-Shell/WindowsShell/PowerShell/</link><description>Recent content in PowerShell on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Terminal-%E4%B8%8E-Shell/WindowsShell/PowerShell/index.xml" rel="self" type="application/rss+xml"/><item><title>PowerShell</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Terminal-%E4%B8%8E-Shell/WindowsShell/PowerShell/PowerShell/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Terminal-%E4%B8%8E-Shell/WindowsShell/PowerShell/PowerShell/</guid><description>概述 参考：
官方文档 官方文档，关于 PowerShell 是一种跨平台的任务自动化解决方案，由命令行 shell、脚本语言和配置管理框架组成。 PowerShell 在 Windows、Linux 和 macOS 上运行。
PowerShell 的独特之处在于，它接受并返回 .NET 对象，而非纯文本。这个特点让 PowerShell 可以更轻松地在一个管道中串联不通的命令。
[!Notes] 这里面所说的对象，就是面向对象编程中常说的“对象”，就像 Go 语言中的 Struct 类似的东西，只不过是 .NET 语言中的对象。
这些对象在被接收后，再交给格式化函数处理，以人类可读的方式，输出出来。
我们可以在 PowerShell 官方文档的参考 - 关于 部分找到对 PowerShell 的基本概念的描述。
PowerShell 变量 详见 PowerShell 变量 章节
PowerShell 命令 参考：
官方文档，PowerShell 命令是什么？ about_Command_Precedence 介绍 PowerShell 如何确定要运行的命令。 about_Command_Syntax 介绍 PowerShell 中使用的语法关系图 about_Core_Commands 列出设计用于 PowerShell 提供程序的 cmdlet PowerShell 中可以执行的命令分两类
操作系统中的可执行文件 cmdlet PowerShell 内置了一组 cmdlet(全称 command-lets)，cmdlet 是一种命令的统称，并不是一个独立的可执行文件。cmdlet 被收集在 PowerShell 模块中，可以按需加载它们。可以用任何编译的 .</description></item><item><title>PowerShell 变量</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Terminal-%E4%B8%8E-Shell/WindowsShell/PowerShell/PowerShell-%E5%8F%98%E9%87%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Terminal-%E4%B8%8E-Shell/WindowsShell/PowerShell/PowerShell-%E5%8F%98%E9%87%8F/</guid><description>概述 参考：
官方文档 - PowerShell，关于-关于变量 官方文档 - PowerShell，关于-关于自动变量 官方文档 - PowerShell，关于-关于首选项变量 官方文档 - PowerShell，脚本-基本概念-环境变量 PowerShell 变量名称不区分大小写，可以包含空格和特殊字符。但是官方推荐尽量避免使用空格和特殊字符，使用起来很麻烦，详见包含特殊字符的变量名称
PowerShell 中的环境变量与局部变量在声明方式和引用方式上有明显不同，这与 Bash 变量 不太一样。举一个非常简单的例子：
PS C:\Users\DesistDaydream&amp;gt; $test_var=&amp;#34;这是一个普通变量&amp;#34; PS C:\Users\DesistDaydream&amp;gt; $test_var 这是一个普通变量 PS C:\Users\DesistDaydream&amp;gt; $env:test_var PS C:\Users\DesistDaydream&amp;gt; $env:test_env_var=&amp;#34;这是一个环境变量&amp;#34; PS C:\Users\DesistDaydream&amp;gt; $test_env_var PS C:\Users\DesistDaydream&amp;gt; $env:test_env_var 这是一个环境变量 局部变量 PowerShell 中有几种不同类型的变量：
User-created variables(用户创建的变量) # 用户创建的变量由用户创建和维护。 默认情况下，仅在 PowerShell 窗口打开时，在 PowerShell 命令行中创建的变量才存在。 关闭 PowerShell 窗口时，将删除变量。 若要保存变量，请将其添加到 PowerShell 配置文件。 还可以在具有全局、脚本或本地范围的脚本中创建变量。 Automatic variables(自动变量) # 自动变量存储 PowerShell 的状态。 这些变量由 PowerShell 创建，PowerShell 会根据需要更改其值，以保持其准确性。 用户无法更改这些变量的值。 例如，变量 $PSHOME 存储 PowerShell 安装目录的路径。 Preference variables(首选项变量) # 首选项变量存储 PowerShell 的用户首选项。 这些变量由 PowerShell 创建，并使用默认值填充。 用户可以更改这些变量的值。 例如，变量 $MaximumHistoryCount 确定会话历史记录中的最大条目数。 自动变量 描述存储 PowerShell 的状态信息的变量。 这些变量由 PowerShell 创建和维护。</description></item><item><title>提供程序</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Terminal-%E4%B8%8E-Shell/WindowsShell/PowerShell/%E6%8F%90%E4%BE%9B%E7%A8%8B%E5%BA%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Terminal-%E4%B8%8E-Shell/WindowsShell/PowerShell/%E6%8F%90%E4%BE%9B%E7%A8%8B%E5%BA%8F/</guid><description>概述 参考：
官方文档，关于 - 关于 Providers PowerShell Providers(提供程序) 是 .NET 程序
内置提供程序 PowerShell 包含一组内置提供程序，可提供对不同类型对象的访问。
Alias provider Drive - Alias: Object types - System.Management.Automation.AliasInfo Certificate provider Drive - Cert: Object types - Microsoft.PowerShell.Commands.X509StoreLocation, System.Security.Cryptography.X509Certificates.X509Certificate2 Environment provider Drive - Env: Object types - System.Collections.DictionaryEntry FileSystem provider Drive - C: and other depending on hardware Object types - System.IO.FileInfo, System.IO.DirectoryInfo Function provider Drive - Function: Object types - System.Management.Automation.FunctionInfo Registry provider Drive - HKLM:, HKCU: Object types - Microsoft.</description></item></channel></rss>