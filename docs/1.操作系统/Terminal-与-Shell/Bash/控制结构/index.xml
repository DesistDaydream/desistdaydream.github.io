<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>控制结构 on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Terminal-%E4%B8%8E-Shell/Bash/%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/</link><description>Recent content in 控制结构 on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Terminal-%E4%B8%8E-Shell/Bash/%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/index.xml" rel="self" type="application/rss+xml"/><item><title>控制结构</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Terminal-%E4%B8%8E-Shell/Bash/%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Terminal-%E4%B8%8E-Shell/Bash/%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/</guid><description>概述 每一个程序如何运行，其中的数据是如何进行传递的，是通过控制结构来实现的，程序的控制结构是指以某种顺序执行的一系列动作，用于解决某个问题。无论多么复杂的算法，均可通过顺序、选择、循环 3 中基本机构构造出来。每种结构仅有一个执行开始的入口以及执行结束的出口。由着 3 中基本机构组成的多层嵌套程序称为结构化程序
控制结构中的“条件语句”详见 条件语句与运算
一：顺序结构 按照语句编写的顺序自上到下主句执行就是顺序结构
二：选择结构 if&amp;hellip;;then&amp;hellip;;fi 选择结构 对某语句进行判断，判断完成后执行某动作。i.e.如果条件语句 1 为真,那么执行分支 1 语句,否则执行条件语句 2,如果条件语句 2 为真,那么执行分支 2 语句,否则执行条件语句 3,如果条件语句 3 为真,那么执行分支 3 语句,&amp;hellip;&amp;hellip;&amp;hellip;.(可无限循环),否则执行分支 n 语句
语法结构：
###单分支：如果“条件语句”为真，则执行“分支” if 条件语句;then 分支 fi ###双分支：如果“条件语句”为真，则执行“分支1”，否则执行“分支2” if 条件语句; then 分支1 else 分支2 fi ###多分支：如果“条件语句”为真，则执行“分支1”，否则如果“条件语句2”为真，则执行“分支2”...以此类推 if 条件语句1; then 分支1 elif 条件语句2; then 分支2 elif 条件语句3; then 分支3 ... else 分支n; fi case 判断结构 给定一个变量，当变量的值为某值时，执行某程序
语法结构：
case $参数变量 in &amp;#34;变量值1&amp;#34;） # 变量值用双引号括起来，关键字用小括号括起来 程序段1 # 对应的逻辑 ;; # 每个类别结尾使用两个连续的分号来处理 &amp;#34;变量值2&amp;#34;） 程序段2 ;; &amp;#34;变量值3&amp;#34;） 程序段3 ;; *) # 最后一个位置参数值会用*来代替所有其他值 程序段4 ;; esac 三：循环控制语句 for 循环结构 持续对一个变量赋值之后并执行相关命令，直到变量使用完所有给定的值</description></item><item><title>条件语句与运算</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Terminal-%E4%B8%8E-Shell/Bash/%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5%E4%B8%8E%E8%BF%90%E7%AE%97/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Terminal-%E4%B8%8E-Shell/Bash/%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5%E4%B8%8E%E8%BF%90%E7%AE%97/</guid><description>概述 参考：
Wiki, Operator(运算) https://www.tutorialspoint.com/unix/unix-basic-operators.htm 使用运算符操作一个或多个内容，然后得到另一个内容，这个过程就是运算。要操作的内容可以是一个具体的数值、字符串、变量等。
在编程中使用运算可以得到一个具体的值，或者进行一次判断以得出“真”或者“假”的结果，以这个结果作为执行某些操作的依据。
EXAMPLE：
2+3，进行算数运算，求和。2 和 3 是两个内容，+是运算符，运算后的值为 5。
[ test1 = test2 ]，进行判断运算，判断运算符两边的内容是否一样，并得出“是”或者“否”这两种结论其中一个。test1 与 test2 是两个内容，=是运算符，运算后的结果是假，i.e.test1 不等于 test2。一般情况，当结果为真或者假之后，就可以执行某些操作，详见 3.Shell 控制结构.note
判断命令运行结果：shell 中的 if 语句会运行“条件语句”中给定的命令，如果该命令的退出状态码(详见下文红字)是 0，则“分支”中给定的命令就会被执行。如果该命令的退出状态码非 0，则“分支”中给定的命令不被执行，且会继续执行该脚本中下一个命令。
比如下面这种 if ! COMMAND; then echo &amp;ldquo;command failed&amp;rdquo;; exit 1; fi 使用 test 命令进行判断：“条件语句”中除了运行命令判断退出状态码，还可以通过 test 命令来进行运算判断，然后通过运算结果得出状态码是 0 还是 1 来进行条件判断(e.g.1 是否大于 2，文件是否存在，字符串是否一样等运算)。当运算结果为真时退出码为 0，否则运算结果非假则退出码非 0。运算方式以及命令详见下文的运算
语法结构：test CONDITION EXAMPLE test 1 -gt 2 # 判断 1 是否大于 2，使用 echo $?输出结果为 1，表示判断结果为错误，非 0 在 shell 中，test 命令可以通过 [ 条件 ] 与 [[ 条件 ]] 来进行表示(e.</description></item></channel></rss>