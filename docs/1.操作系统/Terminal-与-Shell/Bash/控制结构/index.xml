<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦的站点 – 控制结构</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Terminal-%E4%B8%8E-Shell/Bash/%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/</link><description>Recent content in 控制结构 on 断念梦的站点</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Terminal-%E4%B8%8E-Shell/Bash/%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: 控制结构</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Terminal-%E4%B8%8E-Shell/Bash/%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Terminal-%E4%B8%8E-Shell/Bash/%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>每一个程序如何运行，其中的数据是如何进行传递的，是通过控制结构来实现的，程序的控制结构是指以某种顺序执行的一系列动作，用于解决某个问题。无论多么复杂的算法，均可通过顺序、选择、循环 3 中基本机构构造出来。每种结构仅有一个执行开始的入口以及执行结束的出口。由着 3 中基本机构组成的多层嵌套程序称为结构化程序&lt;/p>
&lt;p>控制结构中的“条件语句”详见 &lt;a href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Terminal%20%E4%B8%8E%20Shell/Bash/%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5%E4%B8%8E%E8%BF%90%E7%AE%97.md">条件语句与运算&lt;/a>&lt;/p>
&lt;h1 id="一顺序结构">一：顺序结构&lt;a class="td-heading-self-link" href="#%e4%b8%80%e9%a1%ba%e5%ba%8f%e7%bb%93%e6%9e%84" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>按照语句编写的顺序自上到下主句执行就是顺序结构&lt;/p>
&lt;h1 id="二选择结构">二：选择结构&lt;a class="td-heading-self-link" href="#%e4%ba%8c%e9%80%89%e6%8b%a9%e7%bb%93%e6%9e%84" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="ifthenfi-选择结构">if&amp;hellip;;then&amp;hellip;;fi 选择结构&lt;a class="td-heading-self-link" href="#ifthenfi-%e9%80%89%e6%8b%a9%e7%bb%93%e6%9e%84" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>对某语句进行判断，判断完成后执行某动作。i.e.如果条件语句 1 为真,那么执行分支 1 语句,否则执行条件语句 2,如果条件语句 2 为真,那么执行分支 2 语句,否则执行条件语句 3,如果条件语句 3 为真,那么执行分支 3 语句,&amp;hellip;&amp;hellip;&amp;hellip;.(可无限循环),否则执行分支 n 语句&lt;/p>
&lt;p>语法结构：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">###单分支：如果“条件语句”为真，则执行“分支”&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> 条件语句&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 分支
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">###双分支：如果“条件语句”为真，则执行“分支1”，否则执行“分支2”&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> 条件语句&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 分支1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 分支2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">###多分支：如果“条件语句”为真，则执行“分支1”，否则如果“条件语句2”为真，则执行“分支2”...以此类推&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> 条件语句1&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 分支1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">elif&lt;/span> 条件语句2&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 分支2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">elif&lt;/span> 条件语句3&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 分支3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 分支n&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">fi&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="case-判断结构">case 判断结构&lt;a class="td-heading-self-link" href="#case-%e5%88%a4%e6%96%ad%e7%bb%93%e6%9e%84" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>给定一个变量，当变量的值为某值时，执行某程序&lt;/p>
&lt;p>语法结构：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">case&lt;/span> $参数变量 in
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&amp;#34;变量值1&amp;#34;&lt;/span>） &lt;span style="color:#8f5902;font-style:italic"># 变量值用双引号括起来，关键字用小括号括起来&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 程序段1 &lt;span style="color:#8f5902;font-style:italic"># 对应的逻辑&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">;;&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># 每个类别结尾使用两个连续的分号来处理&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&amp;#34;变量值2&amp;#34;&lt;/span>）
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 程序段2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">;;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&amp;#34;变量值3&amp;#34;&lt;/span>）
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 程序段3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">;;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>*&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># 最后一个位置参数值会用*来代替所有其他值&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 程序段4
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">;;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">esac&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="三循环控制语句">三：循环控制语句&lt;a class="td-heading-self-link" href="#%e4%b8%89%e5%be%aa%e7%8e%af%e6%8e%a7%e5%88%b6%e8%af%ad%e5%8f%a5" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="for-循环结构">for 循环结构&lt;a class="td-heading-self-link" href="#for-%e5%be%aa%e7%8e%af%e7%bb%93%e6%9e%84" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>持续对一个变量赋值之后并执行相关命令，直到变量使用完所有给定的值&lt;/p>
&lt;p>语法结构&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> VAR in VALs&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">do&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># do表示循环开始，VALs的内容逐个赋值给VAR变量&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 循环体 &lt;span style="color:#8f5902;font-style:italic"># 语句1，语句2。。。。等等，可以引用VAR变量&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">done&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># done表示循环结束。&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以简写为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> VAR in VALs&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">do&lt;/span> 循环体&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>VALs 是一个列表，默认以空格分割，每个 VAL 赋值给变量 VAR 一次，就执行一次循环体任务，直到列表中的值全部赋值完成，则结束循环。&lt;/p>
&lt;p>VALs 的取值方式：&lt;/p>
&lt;ul>
&lt;li>&lt;code>Val1 Val2.....ValN&lt;/code> # 每个值中间以空格分割&lt;/li>
&lt;li>&lt;code>seq NUM1 NUM2&lt;/code> # 使用 seq 命令打印出从 NUM1 到 NUM2 两个数之间的所有整数作为列表中的值，NUM 可以使用变量。如果运行脚本时候带参数了，则 NUM 变为参数的位置，引用第 NUM1 个位置到第 NUM2 个位置的参数
&lt;ul>
&lt;li>语法格式：&lt;code>seq [options] NUM1 增量 NUM2&lt;/code> # 用法见下面 shift 命令讲解&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>{NUM1..NUM2}&lt;/code> # 从 NUM1 到 NUM2 之间的所有整数作为值，NUM 不可以使用变量&lt;/li>
&lt;li>&lt;code>$* 或 $@&lt;/code> # 通过位置变量来使用 VALs。列表中的内容可以在运行脚本的时候就给定，比如./XXX.sh 5 10 11，其中 5,10,11 就是脚本的参数然后通过位置变量在列表中引用&lt;/li>
&lt;li>&lt;code>/XX/YY/\*&lt;/code> # /XX/YY 目录下的所有文件&lt;/li>
&lt;/ul>
&lt;p>EXAMPLE:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> userName in desistdaydream zhangna&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">do&lt;/span> &lt;span style="color:#8f5902;font-style:italic">#如果需要换行的语句写在一行上，中间需要加;分好&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> useradd -m &lt;span style="color:#000">$userName&lt;/span> &lt;span style="color:#8f5902;font-style:italic">#给变量赋值desistdaydream，然后执行useradd命令，再给变量赋值zhangna，然后执行useradd命令，列表内容全部赋值完成，结束循环。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="while-循环结构">while 循环结构&lt;a class="td-heading-self-link" href="#while-%e5%be%aa%e7%8e%af%e7%bb%93%e6%9e%84" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>条件语句为真(即 0)，则执行循环体，直到条件语句为假(即非 0)，则退出循环(注意:while 的循环体中最好加上一行代码，对条件语句中的变量赋值，以便每次执行循环之后，条件测试中的变量变成一个新值，否则极有可能陷入无限循环)循环体中可以使用 elif 进行多分支管理&lt;/p>
&lt;p>语法结构 1&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">while&lt;/span> 条件语句；do
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 循环体
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>EXAMPLE&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">while&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> &lt;span style="color:#000">$i&lt;/span> -le &lt;span style="color:#0000cf;font-weight:bold">100&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">do&lt;/span> &lt;span style="color:#8f5902;font-style:italic">#判断$i是否小于等于100,如果判断结果$?的值为0那么执行下面两行代码,否则执行done语句退出循环&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">let&lt;/span> &lt;span style="color:#000">sum&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">+=&lt;/span>&lt;span style="color:#000">$i&lt;/span> &lt;span style="color:#8f5902;font-style:italic">#给sum变量赋值,值为$sum+$i&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">let&lt;/span> i++ &lt;span style="color:#8f5902;font-style:italic">#i值+1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">done&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#000">$sum&lt;/span> &lt;span style="color:#8f5902;font-style:italic">#输出1到100的和&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>语法结构 2 # read 通过输入重定向，把 FILE 文件内的的第一行所有的内容赋值给变量 VAR，循环体内的命令一般包含对变量 VAR 的处理；然后循环处理第二行、第三行。。。一直到最后一行。当 read 从文件 FILE 中读到内容时，退出状态为 0，循环继续执行,当 read 从文件中读完最后一行后，下次便没有内容可读了，此时 read 的退出状态为非 0，循环才会退出。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">while&lt;/span> &lt;span style="color:#204a87">read&lt;/span> VAR&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 循环体
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">done&lt;/span> &amp;lt; FILE
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>EXAMPLE # 取出来 passwd 文件中的每一行，cut 出来每一行的第一个字段&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">while&lt;/span> &lt;span style="color:#204a87">read&lt;/span> line&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cut -d: -f1 &lt;span style="color:#000">$line&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">done&lt;/span> &amp;lt; /etc/passwd
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>语法结构 3 # COMMAND 命令的输出作为变量 VAR 的值，通过 read 循环的输入&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>COMMAND &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#204a87;font-weight:bold">while&lt;/span> &lt;span style="color:#204a87">read&lt;/span> VAR&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 循环体
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>EXAMPLE # 取出来 passwd 文件中的每一行，cut 出来每一行的第一个字段&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>cat /etc/passwd &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#204a87;font-weight:bold">while&lt;/span> &lt;span style="color:#204a87">read&lt;/span> line&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cut -d: -f1 &lt;span style="color:#000">$line&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>for 和 while 的区别&lt;/p>
&lt;ul>
&lt;li>for：
&lt;ul>
&lt;li>列表中的数值赋值一次执行一次循环，直到列表全部赋值完毕&lt;/li>
&lt;li>循环体对以空格为分隔符的字符串进行操作&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>while：
&lt;ul>
&lt;li>条件语句判断一次，执行一次循环，直到条件判断为假&lt;/li>
&lt;li>循环体对每一行进行操作&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="select-循环结构">select 循环结构&lt;a class="td-heading-self-link" href="#select-%e5%be%aa%e7%8e%af%e7%bb%93%e6%9e%84" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>select in 循环用来增强交互性，它可以显示出带编号的菜单，用户输入不同的编号就可以选择不同的菜单，并执行不同的功能。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">select&lt;/span> VAR in ValueList&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 循环体
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行到 select 语句后，ValueList(值列表) 中的内容会以菜单的形式显示出来，用户输入菜单编号，就表示选中了某个值，这个值就会赋给变量 VAR，然后再执行循环体中的语句。&lt;/p>
&lt;p>每次循环时 select 都会要求用户输入菜单编号，并使用环境变量 &lt;code>${PS3}&lt;/code> 的值作为提示符，&lt;code>${PS3}&lt;/code> 的默认值为 &lt;code>#?&lt;/code>，修改 PS3 的值就可以修改提示符。&lt;/p>
&lt;p>如果用户输入的菜单编号不在范围之内，或者输入一个空值（什么也不输入，直接回车），那么就会给 VAR 赋一个空值，并且重新显示一遍菜单。&lt;/p>
&lt;p>Note：select 是无限循环（死循环），输入空值，或者输入的值无效，都不会结束循环，只有遇到 break 语句，或者按下 Ctrl+D 组合键才能结束循环&lt;/p>
&lt;p>select in 通常和 case in 一起使用，在用户输入不同的编号时可以做出不同的反应。&lt;/p>
&lt;p>EXAMPLE&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;What is your favourite OS?&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">select&lt;/span> name in &lt;span style="color:#4e9a06">&amp;#34;Linux&amp;#34;&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Windows&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#000">$name&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">done&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;You have selected &lt;/span>&lt;span style="color:#000">$name&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行效果：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># bash select.sh&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>What is your favourite OS?
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>1&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> Linux
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> Windows
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#? 1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Linux
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#? ^d&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>You have selected Linux
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>#? 用来提示用户输入菜单编号；^D 表示按下 Ctrl+D 组合键，它的作用是结束 select in 循环。&lt;/p>
&lt;h2 id="until-循环结构可有可无">until 循环结构(可有可无)&lt;a class="td-heading-self-link" href="#until-%e5%be%aa%e7%8e%af%e7%bb%93%e6%9e%84%e5%8f%af%e6%9c%89%e5%8f%af%e6%97%a0" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>条件测试为假，则执行循环体，与 while 循环相反，其余内容一样&lt;/p>
&lt;h1 id="四其余相关知识点">四、其余相关知识点&lt;a class="td-heading-self-link" href="#%e5%9b%9b%e5%85%b6%e4%bd%99%e7%9b%b8%e5%85%b3%e7%9f%a5%e8%af%86%e7%82%b9" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="shift位置参数轮替在运行脚本的时候输入-n-个参数每使用一次-shift-就舍弃掉一个位置参数参数就是-for-循环中列表的内容">shift：位置参数轮替，在运行脚本的时候输入 N 个参数，每使用一次 shift 就舍弃掉一个位置参数，参数就是 for 循环中列表的内容&lt;a class="td-heading-self-link" href="#shift%e4%bd%8d%e7%bd%ae%e5%8f%82%e6%95%b0%e8%bd%ae%e6%9b%bf%e5%9c%a8%e8%bf%90%e8%a1%8c%e8%84%9a%e6%9c%ac%e7%9a%84%e6%97%b6%e5%80%99%e8%be%93%e5%85%a5-n-%e4%b8%aa%e5%8f%82%e6%95%b0%e6%af%8f%e4%bd%bf%e7%94%a8%e4%b8%80%e6%ac%a1-shift-%e5%b0%b1%e8%88%8d%e5%bc%83%e6%8e%89%e4%b8%80%e4%b8%aa%e4%bd%8d%e7%bd%ae%e5%8f%82%e6%95%b0%e5%8f%82%e6%95%b0%e5%b0%b1%e6%98%af-for-%e5%be%aa%e7%8e%af%e4%b8%ad%e5%88%97%e8%a1%a8%e7%9a%84%e5%86%85%e5%ae%b9" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>./XXX.sh &lt;span style="color:#0000cf;font-weight:bold">5&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">8&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># 实现 5+10+8+4 求和&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#!/bin/bash&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">declare&lt;/span> -i &lt;span style="color:#000">sum&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> i in &lt;span style="color:#4e9a06">`&lt;/span>seq &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#000">$#&lt;/span>&lt;span style="color:#4e9a06">`&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">do&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># 列表中的内容是运行脚本的时候输入的参数的第1个数到第4个数，$#用于显示一共有几个参数&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">sum&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">+=&lt;/span>&lt;span style="color:#000">$1&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># $1引用5 10 8 4 中的第一个参数，计算sum=sum+运行脚本时候输入的第一个参数&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">shift&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># 把第一个位置的参数踢掉，让第二位参数变成第一位&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">done&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># 执行完一次循环之后第一位置参数5被踢掉，10变成第一位参数，以此类推&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#000">$sum&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="exit-命令退出模式直接输入-exit-x表示该脚本直接结束返回执行状态代码-x">exit 命令退出模式：直接输入 exit X（表示该脚本直接结束，返回执行状态代码 X）&lt;a class="td-heading-self-link" href="#exit-%e5%91%bd%e4%bb%a4%e9%80%80%e5%87%ba%e6%a8%a1%e5%bc%8f%e7%9b%b4%e6%8e%a5%e8%be%93%e5%85%a5-exit-x%e8%a1%a8%e7%a4%ba%e8%af%a5%e8%84%9a%e6%9c%ac%e7%9b%b4%e6%8e%a5%e7%bb%93%e6%9d%9f%e8%bf%94%e5%9b%9e%e6%89%a7%e8%a1%8c%e7%8a%b6%e6%80%81%e4%bb%a3%e7%a0%81-x" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="read-命令">read 命令&lt;a class="td-heading-self-link" href="#read-%e5%91%bd%e4%bb%a4" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>该命令可以一次读取多个变量的值，变量和输入的值都需要使用空格隔开。在 read 命令后面，如果没有指定变量名，读取的数据将被自动赋值给特定的变量 REPLY&lt;/p>
&lt;p>&lt;strong>read [选项] VarName1 VarName2&lt;/strong> # 从键盘读取变量的值，通常用在 shell 脚本中与用户进行交互的场合。
OPTIONS&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-t&lt;/strong> # 指定读取值时等待的时间（秒）&lt;/li>
&lt;li>&lt;strong>-p&lt;/strong> # 指定读取值时的提示符&lt;/li>
&lt;/ul>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>&lt;code>read -p &amp;quot;输入一个数:&amp;quot; first last&lt;/code> # 输入完整个命令后，界面显示“输入一个数:”，然后可以自行输入信息，输入的第一个信息赋值给 first 变量，空格后的其余信息赋值给 last 变量，效果如下所示&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># read -p &amp;#34;输入一个数:&amp;#34; first last&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>输入一个数:123 &lt;span style="color:#0000cf;font-weight:bold">321&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># echo $firest $last&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#0000cf;font-weight:bold">321&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: 条件语句与运算</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Terminal-%E4%B8%8E-Shell/Bash/%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5%E4%B8%8E%E8%BF%90%E7%AE%97/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Terminal-%E4%B8%8E-Shell/Bash/%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5%E4%B8%8E%E8%BF%90%E7%AE%97/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Operator_(computer_programming)">Wiki，Operator(运算)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.tutorialspoint.com/unix/unix-basic-operators.htm">https://www.tutorialspoint.com/unix/unix-basic-operators.htm&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>使用运算符操作一个或多个内容，然后得到另一个内容，这个过程就是运算。要操作的内容可以是一个具体的数值、字符串、变量等。&lt;/p>
&lt;p>在编程中使用运算可以得到一个具体的值，或者进行一次判断以得出“真”或者“假”的结果，以这个结果作为执行某些操作的依据。&lt;/p>
&lt;p>EXAMPLE：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>2+3&lt;/code>，进行算数运算，求和。2 和 3 是两个内容，+是运算符，运算后的值为 5。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>[ test1 = test2 ]&lt;/code>，进行判断运算，判断运算符两边的内容是否一样，并得出“是”或者“否”这两种结论其中一个。test1 与 test2 是两个内容，=是运算符，运算后的结果是假，i.e.test1 不等于 test2。一般情况，当结果为真或者假之后，就可以执行某些操作，详见 3.Shell 控制结构.note&lt;/p>
&lt;/li>
&lt;li>
&lt;p>判断命令运行结果：shell 中的 if 语句会运行“条件语句”中给定的命令，如果该命令的退出状态码(详见下文红字)是 0，则“分支”中给定的命令就会被执行。如果该命令的退出状态码非 0，则“分支”中给定的命令不被执行，且会继续执行该脚本中下一个命令。&lt;/p>
&lt;ul>
&lt;li>比如下面这种
&lt;ul>
&lt;li>if ! COMMAND; then echo &amp;ldquo;command failed&amp;rdquo;; exit 1; fi&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>使用 test 命令进行判断：“条件语句”中除了运行命令判断退出状态码，还可以通过 test 命令来进行运算判断，然后通过运算结果得出状态码是 0 还是 1 来进行条件判断(e.g.1 是否大于 2，文件是否存在，字符串是否一样等运算)。当运算结果为真时退出码为 0，否则运算结果非假则退出码非 0。运算方式以及命令详见下文的运算&lt;/p>
&lt;ul>
&lt;li>语法结构：test CONDITION
&lt;ul>
&lt;li>EXAMPLE
&lt;ul>
&lt;li>test 1 -gt 2 # 判断 1 是否大于 2，使用 echo $?输出结果为 1，表示判断结果为错误，非 0&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>在 shell 中，test 命令可以通过 [ 条件 ] 与 [[ 条件 ]] 来进行表示(e.g.[[ 1 -gt 2 ]]) 。这种表示方式与使用 test 命令效果相同&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>其实上述两种，说白了，都是判断命令运行结果，因为&lt;code>[[ ]]&lt;/code>符号也相当于命令，判断括号中的内容执行是否成功。所以，在日常使用中，第一种判断命令运行结果，也经常放在&lt;code>[[ ]]&lt;/code>来执行，比如 &lt;code>if \[\[ $(ls | grep test) ]]; then echo &amp;quot;搜到了&amp;quot;; fi&lt;/code> 这种&lt;/p>
&lt;p>注意：linux 命令执行完成后一共有两个输出内容&lt;/p>
&lt;ul>
&lt;li>命令执行结果：当命令执行完成后直接看到的屏幕输出的内容就是执行结果，&lt;/li>
&lt;li>命令执行状态：命令执行完成后还有有一个执行状态值，表示该命令是否执行成功，以及失败的状态值。该值是隐藏的，命令执行完成后不会显示该值，可以通过 echo $?查看。命令状态值可以通过脚本中命令 exit 来定义，以下是命令状态值的两种分类&lt;/li>
&lt;li>0：数字 0 表示执行状态成功，命令正确，条件判断为真&lt;/li>
&lt;li>非 0：表示命令执行失败，会返回非 0 的值，不同的值表示不同的失败问题，条件判断为假&lt;/li>
&lt;li>条件语句中只有一种判断方法：判断该命令执行的状态返回值，0 为真，非 0 为假，即返回值为 0 时，执行分支 1 语句，返回值为非 0 时执行分支 2 语句&lt;/li>
&lt;/ul>
&lt;p>注意：[[ ]] 中的语句是会真实执行的，并且一个完整的控制结构中，不管判断中的语句是否执行成功，其返回值都是 0，因为这个控制结构代码成功了。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>root@master ~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># if [[ $(mkdir test) ]]; then echo ok;fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ok
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>root@master ~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># if [[ $(mkdir test) ]]; then echo ok;fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mkdir: cannot create directory ‘test’: File exists
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>root@master ~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># echo $?&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="运算">运算&lt;a class="td-heading-self-link" href="#%e8%bf%90%e7%ae%97" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>按照运算所得结果来分类的话，总共分为两大类：&lt;/p>
&lt;ul>
&lt;li>Boolean Operators(逻辑运算) # 之所以被称为逻辑运算符是因为它们的运算结果总是为布尔值 bool，不是 true 就是 false。e.g.1 是否等于 2、语句是否执行成功、是否有返回值、条件一成立且条件二失败结果四 true 还是 false&lt;/li>
&lt;li>Arithmetic Operators(算数运算) # 最后的运算结果必然是数学概念上的整数、小数等。e.g.1+2=3、2*3=6 等&lt;/li>
&lt;li>Relational Operators(关系运算)&lt;/li>
&lt;li>String Operators(字符串运算)&lt;/li>
&lt;li>File Test Operators(文件测试运算)&lt;/li>
&lt;/ul>
&lt;h2 id="算术运算符">算术运算符&lt;a class="td-heading-self-link" href="#%e7%ae%97%e6%9c%af%e8%bf%90%e7%ae%97%e7%ac%a6" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>下表列出了常用的算术运算符，假定变量 a 为 10，变量 b 为 20：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>运算符&lt;/th>
&lt;th>说明&lt;/th>
&lt;th>举例&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>+&lt;/td>
&lt;td>加法&lt;/td>
&lt;td>&lt;code>expr $a + $b&lt;/code> 结果为 30。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-&lt;/td>
&lt;td>减法&lt;/td>
&lt;td>&lt;code>expr $a - $b&lt;/code> 结果为 -10。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>*&lt;/td>
&lt;td>乘法&lt;/td>
&lt;td>&lt;code>expr $a \* $b&lt;/code> 结果为 200。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>/&lt;/td>
&lt;td>除法&lt;/td>
&lt;td>&lt;code>expr $b / $a&lt;/code> 结果为 2。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>%&lt;/td>
&lt;td>取余&lt;/td>
&lt;td>&lt;code>expr $b % $a&lt;/code> 结果为 0。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>=&lt;/td>
&lt;td>赋值&lt;/td>
&lt;td>a=$b 将把变量 b 的值赋给 a。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>==&lt;/td>
&lt;td>相等。用于比较两个数字，相同则返回 true。&lt;/td>
&lt;td>[ $a == $b ] 返回 false。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>!=&lt;/td>
&lt;td>不相等。用于比较两个数字，不相同则返回 true。&lt;/td>
&lt;td>[ $a != $b ] 返回 true。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>注意：条件表达式要放在方括号之间，并且要有空格，例如: [$a==$b] 是错误的，必须写成 [ $a == $b ]。&lt;/p>
&lt;ul>
&lt;li>算数运算
&lt;ul>
&lt;li>if (( 1 + 2 == 3 )); then&amp;hellip;.. # 如果 1+2 等于 3，那么执行后面的语句&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="算数运算的相关命令">算数运算的相关命令&lt;a class="td-heading-self-link" href="#%e7%ae%97%e6%95%b0%e8%bf%90%e7%ae%97%e7%9a%84%e7%9b%b8%e5%85%b3%e5%91%bd%e4%bb%a4" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;h4 id="expr-expression">expr Expression&lt;a class="td-heading-self-link" href="#expr-expression" aria-label="Heading self-link">&lt;/a>&lt;/h4>
&lt;p>Expression(表达式) 为数值 算数运算符 数值&lt;/p>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>expr 3 + 7 # 输出结果为 10&lt;/li>
&lt;/ul>
&lt;p>VarName=$[算术表达式]&lt;/p>
&lt;p>VarName=$((算术表达式))&lt;/p>
&lt;h4 id="let-命令">let 命令&lt;a class="td-heading-self-link" href="#let-%e5%91%bd%e4%bb%a4" aria-label="Heading self-link">&lt;/a>&lt;/h4>
&lt;p>let VarName=算数表达式 &amp;amp;&amp;amp; echo $VarName&lt;/p>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>let sum=3+8; echo $sum # 输出结果为 11&lt;/li>
&lt;/ul>
&lt;h4 id="--与---符号">&lt;code>$[ ]&lt;/code> 与 &lt;code>$(( ))&lt;/code> 符号&lt;a class="td-heading-self-link" href="#--%e4%b8%8e---%e7%ac%a6%e5%8f%b7" aria-label="Heading self-link">&lt;/a>&lt;/h4>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>echo $[1+2] # 输出结果为 3&lt;/li>
&lt;/ul>
&lt;h2 id="布尔运算符">布尔运算符&lt;a class="td-heading-self-link" href="#%e5%b8%83%e5%b0%94%e8%bf%90%e7%ae%97%e7%ac%a6" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>逻辑运算符，有的地方也称为 &lt;strong>Boolean(布尔)&lt;/strong> 运算符，假定变量 a 为 10，变量 b 为 20:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>运算符&lt;/th>
&lt;th>说明&lt;/th>
&lt;th>举例&lt;/th>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&amp;amp;&amp;amp;&lt;/td>
&lt;td>逻辑的 AND&lt;/td>
&lt;td>[[ $a -lt 100 &amp;amp;&amp;amp; $b -gt 100 ]] 返回 false&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-a&lt;/td>
&lt;td>与运算，两个表达式都为 true 才返回 true。&lt;/td>
&lt;td>[ $a -lt 20 -a $b -gt 100 ] 返回 false。&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>或运算，有一个表达式为 true 则返回 true。&lt;/td>
&lt;td>[[ $a -lt 100&lt;/td>
&lt;td>&lt;/td>
&lt;td>$b -gt 100 ]] 返回 true&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-o&lt;/td>
&lt;td>或运算，有一个表达式为 true 则返回 true。&lt;/td>
&lt;td>[ $a -lt 20 -o $b -gt 100 ] 返回 true。&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>!&lt;/td>
&lt;td>非运算，表达式为 true 则返回 false，否则返回 true。&lt;/td>
&lt;td>[ ! false ] 返回 true。&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="syntax语法">Syntax(语法)&lt;a class="td-heading-self-link" href="#syntax%e8%af%ad%e6%b3%95" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>&lt;strong>逻辑运算(布尔运算，只有真，假两种)&lt;/strong> # （即条件语句的是否执行成功，成功为真，不成功为假，非真）&lt;/p>
&lt;ul>
&lt;li>与运算：&lt;code>&amp;amp;&amp;amp;&lt;/code> (或者用-a)(&lt;code>条件一$$条件二=结果&lt;/code>)
&lt;ul>
&lt;li>真&amp;amp;&amp;amp;真=真&lt;/li>
&lt;li>真&amp;amp;&amp;amp;假=假&lt;/li>
&lt;li>假&amp;amp;&amp;amp;假=假
&lt;ul>
&lt;li>条件一为假，结果即为假，条件二就不会执行&lt;/li>
&lt;li>条件一为真，则最终结果无法判断，那么条件二必须执行&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>或运算：&lt;code>||&lt;/code> (或者用-o)(条件一||条件二=结果)
&lt;ul>
&lt;li>真||真=真&lt;/li>
&lt;li>真||假=真&lt;/li>
&lt;li>假||假=假
&lt;ul>
&lt;li>第一个条件为真，结果即为真&lt;/li>
&lt;li>条件一为真，结果即为真，条件二不会执行&lt;/li>
&lt;li>条件一为假，结果无法判断，那么条件二必须执行&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>非运算：&lt;code>!&lt;/code>
&lt;ul>
&lt;li>!真=假&lt;/li>
&lt;li>!假=真&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>EXAMP LE：
&lt;ul>
&lt;li>id $name &amp;amp;&amp;gt; /dev/null &amp;amp;&amp;amp; echo &amp;ldquo;exist&amp;rdquo; || echo &amp;ldquo;not exist&amp;rdquo; # 如果 id $name 结果为真，那么输出 exist 否则输出 not exist，因为与运算优先级更高，先判断 命令执行状态是否为真，如果为真，则必须执行第二条，如果为假，那么第二条不会执行，就直接进行或运算，第一条命令状态为假的话，就必须执行或运算中的第二条命令，即总体的第三条。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="关系运算符">关系运算符&lt;a class="td-heading-self-link" href="#%e5%85%b3%e7%b3%bb%e8%bf%90%e7%ae%97%e7%ac%a6" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>在编程领域中&lt;/p>
&lt;ul>
&lt;li>真 可以用 true 或者 1 来表示&lt;/li>
&lt;li>假 可以用 false 或者 0 来表示&lt;/li>
&lt;/ul>
&lt;p>关系运算符只支持数字，不支持字符串，除非字符串的值是数字。&lt;/p>
&lt;p>下表列出了常用的关系运算符，假定变量 a 为 10，变量 b 为 20：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>运算符&lt;/th>
&lt;th>说明&lt;/th>
&lt;th>举例&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>-eq&lt;/td>
&lt;td>检测两个数是否相等，相等返回 true。&lt;/td>
&lt;td>[ $a -eq $b ] 返回 false。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-ne&lt;/td>
&lt;td>检测两个数是否不相等，不相等返回 true。&lt;/td>
&lt;td>[ $a -ne $b ] 返回 true。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-gt&lt;/td>
&lt;td>检测左边的数是否大于右边的，如果是，则返回 true。&lt;/td>
&lt;td>[ $a -gt $b ] 返回 false。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-lt&lt;/td>
&lt;td>检测左边的数是否小于右边的，如果是，则返回 true。&lt;/td>
&lt;td>[ $a -lt $b ] 返回 true。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-ge&lt;/td>
&lt;td>检测左边的数是否大于等于右边的，如果是，则返回 true。&lt;/td>
&lt;td>[ $a -ge $b ] 返回 false。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-le&lt;/td>
&lt;td>检测左边的数是否小于等于右边的，如果是，则返回 true。&lt;/td>
&lt;td>[ $a -le $b ] 返回 true。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="syntax语法-1">Syntax(语法)&lt;a class="td-heading-self-link" href="#syntax%e8%af%ad%e6%b3%95-1" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>**[ NUM1 比较符 NUM2 ] **# num1 与 num2 为具体数字,注意括号中的空格不要忘了&lt;/p>
&lt;ul>
&lt;li>比较符说明：
&lt;ul>
&lt;li>-gt # 大于&lt;/li>
&lt;li>-lt # 小于&lt;/li>
&lt;li>-ge # 大于等于&lt;/li>
&lt;li>-le # 小于等于&lt;/li>
&lt;li>-ne # 不等于&lt;/li>
&lt;li>-eq # 等于&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>EXAMPLE
&lt;ul>
&lt;li>[ 1 -ge 2 ] # 判断 1 是否大于 2，如果成功$?返回值为0，否则返回值为1，该命令$?的值为 1&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="字符串运算符">字符串运算符&lt;a class="td-heading-self-link" href="#%e5%ad%97%e7%ac%a6%e4%b8%b2%e8%bf%90%e7%ae%97%e7%ac%a6" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>下表列出了常用的字符串运算符，假定变量 a 为 &amp;ldquo;abc&amp;rdquo;，变量 b 为 &amp;ldquo;efg&amp;rdquo;：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>运算符&lt;/th>
&lt;th>说明&lt;/th>
&lt;th>举例&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>=&lt;/td>
&lt;td>检测两个字符串是否相等，相等返回 true。&lt;/td>
&lt;td>[ $a = $b ] 返回 false。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>!=&lt;/td>
&lt;td>检测两个字符串是否相等，不相等返回 true。&lt;/td>
&lt;td>[ $a != $b ] 返回 true。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-z&lt;/td>
&lt;td>检测字符串长度是否为 0，为 0 返回 true。&lt;/td>
&lt;td>[ -z $a ] 返回 false。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-n&lt;/td>
&lt;td>检测字符串长度是否为 0，不为 0 返回 true。&lt;/td>
&lt;td>[ -n &amp;ldquo;$a&amp;rdquo; ] 返回 true。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>STR&lt;/td>
&lt;td>检测字符串 STR 是否为空，不为空返回 true。等效于 -n&lt;/td>
&lt;td>[ $a ] 返回 true。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="syntax语法-2">Syntax(语法)&lt;a class="td-heading-self-link" href="#syntax%e8%af%ad%e6%b3%95-2" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>&lt;strong>[ str1 比较符 str2 ]&lt;/strong> # str1，str2 为具体字符串，注意写括号中的空格&lt;/p>
&lt;ul>
&lt;li>比较符：
&lt;ul>
&lt;li>== 是否等于&lt;/li>
&lt;li>!= 是否不等于&lt;/li>
&lt;li>=~ 判定左侧的字符串能否被右侧的模式所匹配,通常只在[[]]中使用&lt;/li>
&lt;li>&amp;lt; 是否小于&lt;/li>
&lt;li>
&lt;blockquote>
&lt;p>是否大于（注意：大于小于号前需要加,否则脚本当成重定向符号）&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>[ -n str ] 检查 str 的长度是否非 0&lt;/li>
&lt;li>[ -z str ] 检查 str 的长度是否为 0&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>EXAMPLE&lt;/li>
&lt;/ul>
&lt;h2 id="文件测试运算符">文件测试运算符&lt;a class="td-heading-self-link" href="#%e6%96%87%e4%bb%b6%e6%b5%8b%e8%af%95%e8%bf%90%e7%ae%97%e7%ac%a6" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>文件测试运算符用于检测 Unix 文件的各种属性。属性检测描述如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操作符&lt;/th>
&lt;th>说明&lt;/th>
&lt;th>举例&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>-b FILE&lt;/td>
&lt;td>检测文件是否是块设备文件，如果是，则返回 true。&lt;/td>
&lt;td>[ -b $file ] 返回 false。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-c FILE&lt;/td>
&lt;td>检测文件是否是字符设备文件，如果是，则返回 true。&lt;/td>
&lt;td>[ -c $file ] 返回 false。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-d FILE&lt;/td>
&lt;td>检测文件是否是目录，如果是，则返回 true。&lt;/td>
&lt;td>[ -d $file ] 返回 false。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-f FILE&lt;/td>
&lt;td>检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。&lt;/td>
&lt;td>[ -f $file ] 返回 true。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-g FILE&lt;/td>
&lt;td>检测文件是否设置了 SGID 位，如果是，则返回 true。&lt;/td>
&lt;td>[ -g $file ] 返回 false。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-k FILE&lt;/td>
&lt;td>检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。&lt;/td>
&lt;td>[ -k $file ] 返回 false。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-p FILE&lt;/td>
&lt;td>检测文件是否是有名管道，如果是，则返回 true。&lt;/td>
&lt;td>[ -p $file ] 返回 false。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-u FILE&lt;/td>
&lt;td>检测文件是否设置了 SUID 位，如果是，则返回 true。&lt;/td>
&lt;td>[ -u $file ] 返回 false。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-r FILE&lt;/td>
&lt;td>检测文件是否可读，如果是，则返回 true。&lt;/td>
&lt;td>[ -r $file ] 返回 true。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-w FILE&lt;/td>
&lt;td>检测文件是否可写，如果是，则返回 true。&lt;/td>
&lt;td>[ -w $file ] 返回 true。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-x FILE&lt;/td>
&lt;td>检测文件是否可执行，如果是，则返回 true。&lt;/td>
&lt;td>[ -x $file ] 返回 true。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-s FILE&lt;/td>
&lt;td>检测文件是否为空（文件大小是否大于 0），不为空返回 true。&lt;/td>
&lt;td>[ -s $file ] 返回 true。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-e FILE&lt;/td>
&lt;td>检测文件（包括目录）是否存在，如果是，则返回 true。&lt;/td>
&lt;td>[ -e $file ] 返回 true。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>运算符按照操作格式分类：&lt;/p>
&lt;ul>
&lt;li>一元运算符：就是只需要一个操作数，如 a&amp;ndash;、a++、 !a、 ~a 等&lt;/li>
&lt;li>二元运算符：就是需要两个操作数才能完成运算 如典型的 a+b、 a-b、 a*b、 a/b 等&lt;/li>
&lt;li>三元运算符：:?唯一一个三元运算符&lt;/li>
&lt;/ul>
&lt;h3 id="syntax语法-3">Syntax(语法)&lt;a class="td-heading-self-link" href="#syntax%e8%af%ad%e6%b3%95-3" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>**[ FileTestOperator &amp;ldquo;FILENAME&amp;rdquo; ] **# 为了防止文件名 FILENAME 中出现空格等特殊字符，所以用双引号引起来以防出现意外&lt;/p>
&lt;ul>
&lt;li>**FileTestOperator # **所有选项检查前提都是含有隐含意义，就是默认先检查是否存在再检查其余特殊情况
&lt;ul>
&lt;li>-e # 检查文件是否存在&lt;/li>
&lt;li>-d # 检查文件是否存在且为目录&lt;/li>
&lt;li>-f # 检查是否为文件&lt;/li>
&lt;li>-n # 是否为数字&lt;/li>
&lt;li>-r(w)(x) # 检查是否可读(写)(执行)&lt;/li>
&lt;li>-s # 检查是否为空&lt;/li>
&lt;li>-O # 是否属于当前用户&lt;/li>
&lt;li>-G # 是否默认组与当前用户相同&lt;/li>
&lt;li>[ FILE1 -nt FILE ] 检查文件 1 是否新于文件 2&lt;/li>
&lt;li>[ FILE1 -ot FILE2 ] 检查文件 1 是否旧于文件 2&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>EXAMPLE
&lt;ul>
&lt;li>if [ ! -f file.txt ] 如果 file.txt 存在且为文件&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="heading">&lt;a class="td-heading-self-link" href="#heading" aria-label="Heading self-link">&lt;/a>&lt;/h1></description></item></channel></rss>