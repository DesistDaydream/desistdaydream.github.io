<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Bash on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Terminal-%E4%B8%8E-Shell/Bash/</link><description>Recent content in Bash on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Terminal-%E4%B8%8E-Shell/Bash/index.xml" rel="self" type="application/rss+xml"/><item><title>Bash</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Terminal-%E4%B8%8E-Shell/Bash/Bash/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Terminal-%E4%B8%8E-Shell/Bash/Bash/</guid><description>概述 参考：
GNU 官网 Wiki, Bash 网道，Bash 脚本教程 Bourne Again Shell(简称 Bash) 是 Brian Fox 为 GNU 项目编写的 Unix Shell 和编程语言，作为 Bourne shell(简称 sh) 的免费软件替代品，于 1989 年首次发布，已被用作绝大多数 Linux 发行版的默认登录 Shell。Bash 是 Linus Torvalds 在移植 GCC 到 Linux 时最先移植的程序之一。
Bash 是一种 Shell，学习 Bash，其实也算是学习一种脚本式的编程语言，Bash 本身就是一种类似编译器似的存在。
Bash 关联文件与配置 全局配置文件，对所有用户生效的配置 /etc/environment # 系统的环境变量，所有登录方式都会加载的文件。
/etc/profile # 任何用户使用 shell 时都会加载的配置。linux 不推荐直接修改该文件。加载该配置时自动加载 /etc/profile.d/*.sh 的所有文件
/etc/bashrc # 常用于设置登录功能和命令别名。linux 不推荐直接修改该文件。加载该配置时自动加载 /etc/profile.d/*.sh 的所有文件
/etc/profile.d/*.sh # 类似于 include 的效果。通常用来创建自定义配置。
在 /etc/profile 和 /etc/bashrc 中都会有如下代码块</description></item><item><title>数据类型</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Terminal-%E4%B8%8E-Shell/Bash/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Terminal-%E4%B8%8E-Shell/Bash/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid><description>概述 参考：
Numbers(数字型) # 格式化标识符 %d
Integers(整数型) # 简写为 int Floating Point Numbers(浮点数型) complex 复数共两种复数，complex64 和 complex128，分别对应 float32 和 float64 两种浮点数精度。内置的 complex 函数用于构建复数，内建的 real 和 imag 函数分别返回复数的实部和虚部 Strings(字符型) # 格式化标识符 %s
Booleans(布尔型)
注意：很多时候，Booleans 类型的值可以用数字表示
1 表示 true(真) 0 表示 false(假) Associative Arrays(关联数组) # 就是 抽象数据类型 中描述的，很多时候称为 map(映射)、dictionary(字典)、etc.</description></item><item><title>数组</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Terminal-%E4%B8%8E-Shell/Bash/%E6%95%B0%E7%BB%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Terminal-%E4%B8%8E-Shell/Bash/%E6%95%B0%E7%BB%84/</guid><description>概述 参考：
Array(数组) 也是一种变量，数组中可以存放多个值，每个值都称为该数组的元素。Bash Shell 只支持一维数组（不支持多维数组），初始化时不需要定义数组大小（与 PHP 类似）。
与大部分编程语言类似，数组元素的下标由 0 开始。
Shell 数组用 () 小括号来表示，元素用空白符分割
定义数组的方式：ArrayName=(Value1 ... ValueN)
数组的赋值 #!/bin/bash my_array=(A B &amp;#34;C&amp;#34; D) # 我们也可以使用下标来定义数组: array_name[0]=value0 array_name[1]=value1 array_name[2]=value2 数组的引用 通过数组的下标来获取数组的值，数组中的第一位下标是 0，第二位下标是 2&amp;hellip;&amp;hellip;以此类推
引用数组元素值的一般格式是：${array_name[index]} # index 是下标的数字
实例
#!/bin/bash my_array=(A B &amp;#34;C&amp;#34; D) echo &amp;#34;第一个元素为: ${my_array[0]}&amp;#34; echo &amp;#34;第二个元素为: ${my_array[1]}&amp;#34; echo &amp;#34;第三个元素为: ${my_array[2]}&amp;#34; echo &amp;#34;第四个元素为: ${my_array[3]}&amp;#34; 执行脚本，输出结果如下所示： $ chmod +x test.sh $ ./test.sh 第一个元素为: A 第二个元素为: B 第三个元素为: C 第四个元素为: D 引用数组中指定的元素 参考 变量与系统环境配置详解 中变量的高级技巧一节，可以通过 ${ } 来截取数组中的元素</description></item><item><title>特殊符号</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Terminal-%E4%B8%8E-Shell/Bash/%E7%89%B9%E6%AE%8A%E7%AC%A6%E5%8F%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Terminal-%E4%B8%8E-Shell/Bash/%E7%89%B9%E6%AE%8A%E7%AC%A6%E5%8F%B7/</guid><description>概述 参考：
Bash 中特殊符号的说明 这些特殊符号的作用，一般是在对 Linux 和 shell 有一定了解的基础上，才能明白其作用。
' ' 和 &amp;quot; &amp;quot;(单引号 和 双引号) 首先，单引号和双引号，都是为了解决中间有空格的问题。
因为空格在 Shell 中时作为一个很典型的分隔符，比如 string1=this is astring，这样执行就会报错。为了避免这个问题，因此就产生了单引号和双引号。
单引号引用的内容，所见即所得。即将单引号内的内容原样输出，或者描述为单引号里面看到的是什么就会输出什么。单引号是全引用，被单引号括起的内容不管是常量还是变量都不会发生替换。
~]# var=dablelv ~]# echo &amp;#39;$var&amp;#39; $var 双引号引用的内容，所见非所得。如果内容中有命令、变量等，会先把变量、命令解析出结果，然后在输出最终内容。双引号是部分引用，被双引号括起的内容常量还是常量，变量则会发生替换，替换成变量内容。
~]# var=dablelv ~]# echo &amp;#34;$var&amp;#34; dablelv 无引号不使用引号定义字符串时，字符串不能包含空白字符（如 Space 或 Tab），需要该加引号，一般连续的字符串，数字，路径等可以不加引号。如果内容中有命令、变量等，会先把变量、命令解析出结果，然后在输出最终内容。
~]# str3=test String -bash: String: 未找到命令 ~]# echo $str3 ~]# 可见，字符串中包含有空格时不实用引号括起来，将无法正常输出。
$() 和 `` 用于命令替换 在 bash shell 中，$( ) 与`` (反引号) 都是用来做命令替换用(command substitution)的。
例如：version=$(uname -r) 和 version=uname -r 都可以使 version 得到内核的版本号</description></item><item><title>Bash 变量</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Terminal-%E4%B8%8E-Shell/Bash/Bash-%E5%8F%98%E9%87%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Terminal-%E4%B8%8E-Shell/Bash/Bash-%E5%8F%98%E9%87%8F/</guid><description>概述 参考：
Manual(手册)，bash(1) - 形参 - Shell 变量 Bash 可以从逻辑上分为如下几种变量
局部变量 # 不以被子进程继承的变量。通常在脚本或命令中定义，仅在当前shell实例中有效，其他shell启动的程序不能访问局部变量。 环境变量 # 可以被子进程继承的变量。通常继承自操作系统的环境变量。所有的程序，包括 Shell 启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候 Shell 脚本也可以定义环境变量。 局部变量与环境变量的区别主要在于是否可以被子进程继承
~]# TestVar=&amp;#34;This is Normal Var&amp;#34; ~]# export TestEnvVar=&amp;#34;This is Enviroment Var&amp;#34; ~]# bash # 在这里进入了一个新的 Bash 程序，不通过 export 声明的非环境变量 ~]# echo $TestVar ~]# echo $TestEnvVar This is Enviroment Var 这个示例中可以看到，当我们启动一个新 Bash 时，不使用 export 声明的变量，将不会被子 Bash 继承。这就是环境变量与普通变量的基本区别。
局部变量 没什么特殊的说明
环境变量 根据变量的定义位置，环境变量分为多个作用域：
系统范围 用户范围 进程范围 声明变量与取消变量 对于 Shell 编程语言来说，一个变量其实不声明也是可以的，默认任意字符串组合成的变量的值都为空，比如
~]# env | grep randomVar ~]# echo $randomVar ~]# echo $?</description></item><item><title>Bash 操作历史记录</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Terminal-%E4%B8%8E-Shell/Bash/Bash-%E6%93%8D%E4%BD%9C%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Terminal-%E4%B8%8E-Shell/Bash/Bash-%E6%93%8D%E4%BD%9C%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95/</guid><description>history 工具 参考：
Manual(手册),history https://blog.csdn.net/m0_38020436/article/details/78730631 https://blog.csdn.net/sz_bdqn/article/details/46527021 history 工具可以通过如下几个 Bash 的环境变量来配置运行方式
HISTTIMEFORMAT # 历史记录的格式 HISTSIZE # 历史记录可以保留的最大命令数 HISTFILESIZE # 历史记录可以保留的最大行数 HISTCONTROL # 应用示例 export HISTTIMEFORMAT=&amp;quot;%Y-%m-%d:%H-%M-%S:whoami: &amp;quot; 持久化 cat &amp;gt; /etc/profile.d/custom_ops.sh &amp;lt;&amp;lt;END export HISTTIMEFORMAT=&amp;#34;%Y-%m-%d %H:%M:%S `whoami` &amp;#34; END 谁动了我的主机? 之活用 History 命令 参考：
http://lab.xmirror.cn/2017/05/26/sdlwdzj/ Linux 系统下可通过 history 命令查看用户所有的历史操作记录，在安全应急响应中起着非常重要的作用，但在未进行附加配置情况下，history 命令只能查看用户历史操作记录，并不能区分用户以及操作时间，不便于审计分析。
当然，一些不好的操作习惯也可能通过命令历史泄露敏感信息。
下面我们来介绍如何让 history 日志记录更细化，更便于我们审计分析。
1、命令历史记录中加时间 默认情况下如下图所示，没有命令执行时间，不利于审计分析。
通过设置 export HISTTIMEFORMAT=&amp;rsquo;%F %T &amp;lsquo;，让历史记录中带上命令执行时间。
注意”%T”和后面的”’”之间有空格，不然查看历史记录的时候，时间和命令之间没有分割。
要一劳永逸，这个配置可以写在/etc/profile 中，当然如果要对指定用户做配置，这个配置可以写在/home/$USER/.bash_profile 中。
本文将以/etc/profile 为例进行演示。
要使配置立即生效请执行 source /etc/profile，我们再查看 history 记录，可以看到记录中带上了命令执行时间。
如果想要实现更细化的记录，比如登陆过系统的用户、IP 地址、操作命令以及操作时间一一对应，可以通过在/etc/profile 里面加入以下代码实现</description></item><item><title>Bash 快捷键</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Terminal-%E4%B8%8E-Shell/Bash/Bash-%E5%BF%AB%E6%8D%B7%E9%94%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Terminal-%E4%B8%8E-Shell/Bash/Bash-%E5%BF%AB%E6%8D%B7%E9%94%AE/</guid><description>概述 快速编辑命令高效率输入
并非大型软件或者 IDE 才有快捷键,shell 也有,如果能够熟练使用快捷键,做起事情来且不事半功倍。
网上流传的快捷键在 xshell 下可能和菜单的快捷键 alt 啥的冲突
我只说下 xshell 下和用的最多的
光标部分总的来说就是移动,最常用的就四个:
移动到行首和行尾部
ctrl + a 行首
ctrl + e 行末
然后单词移动,xshell 下 alt 不起作用,esc+b/f 可以前后
但是 ctrl+左/右也可以,所以建议单词之间移动使用:
ctrl + ← 光标移动到前一个单词开头
ctrl + → 光标移动到后一个单词结尾
配合下面的 ctrl+w 或者 esc+d 来删除前后单词
删除部分
ctrl + u 删除当前光标左边所有内容
ctrl + k 删除当前光标右边所有内容
ctrl + w 删除当前光标到左边最近的一个空格(通常用来删除一个单词)
esc + d 删除当前光标到右边最近的一个空格(通常用来删除一个单词)
ctrl + y 粘贴上面删除的部分
编辑部分
esc + t 互换相邻的两个单词</description></item><item><title>Bash 命令行参数处理</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Terminal-%E4%B8%8E-Shell/Bash/Bash-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0%E5%A4%84%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Terminal-%E4%B8%8E-Shell/Bash/Bash-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0%E5%A4%84%E7%90%86/</guid><description>概述 参考：
https://www.cnblogs.com/klb561/p/9211222.html https://blog.csdn.net/qq_22203741/article/details/77671379 shell 代码命令行选项与修传入参数处理 在编写 shell 程序时经常需要处理命令行参数，本文描述在 bash 下的命令行处理方式。
选项与参数：
如下命令行：
./test.sh -f config.conf -v &amp;ndash;prefix=/home
-f 为选项，它需要一个参数，即 config.conf -v 也是一个选项，但它不需要参数。 &amp;ndash;prefix 我们称之为一个长选项，即选项本身多于一个字符，它也需要一个参数，用等号连接，当然等号不是必须的，/home 可以直接写在&amp;ndash;prefix 后面，即&amp;ndash;prefix/home,更多的限制后面具体会讲到。 在 bash 中，可以用以下三种方式来处理命令行参数，每种方式都有自己的应用场景。
通过位置变量手工处理参数 # 参考变量与环境变量 文章中的位置变量 getopts # 简单工具 getopt # 复杂工具 依次讨论这三种处理方式。
通过位置变量手工处理参数 在手工处理方式中，首先要知道几个变量，还是以上面的命令行为例：
代码如下:
$0 ： ./test.sh,即命令本身，相当于 c/c++中的 argv[0] $1 ： -f,第一个参数. $2 ： config.conf $3, $4 &amp;hellip; ：类推。 $# 参数的个数，不包括命令本身，上例中 $# 为 4. $@ # 参数本身的列表，也不包括命令本身，如上例为 -f config.conf -v &amp;ndash;prefix=/home $* # 和 $@ 相同，但 &amp;quot;$*&amp;quot; 和 &amp;quot;$@&amp;quot;(加引号)并不同，&amp;quot;$*&amp;quot; 将所有的参数解释成一个字符串，而 &amp;quot;$@&amp;quot; 是一个参数数组。 例子：</description></item><item><title>函数</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Terminal-%E4%B8%8E-Shell/Bash/%E5%87%BD%E6%95%B0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Terminal-%E4%B8%8E-Shell/Bash/%E5%87%BD%E6%95%B0/</guid><description>概述 Function(函数) 就是代码块，函数中表示了一堆代码的集合，当调用函数的时候，则会执行函数中函数体内的命令
语法格式：
function NAME(){ 函数体 } # 或者 NAME() { 函数体 } 调用方式：在 shell 脚本中，函数并不会执行，只有在调用的时候，才会执行函数体中的命令
直接使用函数名即可调用，函数名出现的地方，会被自动替换为函数体中的命令 在调用函数时，传递参数给函数体，在函数名后面以空白分隔指定的参数列表即可。e.g.FunctionName ARG1 ARG2 &amp;hellip;ARGn 每个参数可以在函数体中使用位置参数进行引用，i.e.ARG1 在函数体中就是$1 的值，ARG2 在函数体中就是$2 的值，以此类推 函数的生命周期：被调用时创建，返回时终止
使用 return 命令返回自定义状态结果
0：成功 1-255：失败 函数中的变量：在函数体内定义的变量只对该函数生效，当函数生命周期结束时，变量失效。
注意：在函数体中，可以修改全局变量的值
函数的递归：函数直接或间接调用自身 函数递归的应用实例：
阶乘：N!=N(n-1)(n-2)&amp;hellip;1 #/bin/bash fact() { if [ $1 -eq 0 -o $1 -eq 1 ]; then echo 1 else echo $[$1*$(fact $[$1-1])] fi} fact $1 步骤：比如给 fact 传递参数 5
如果 5 大于 0 或者大于 1，那么使用 5*fact 函数，且再次调用函数时参数为 5-1 再次调用函数的时候，不但有 4，还有函数，i.</description></item><item><title>重定向</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Terminal-%E4%B8%8E-Shell/Bash/%E9%87%8D%E5%AE%9A%E5%90%91/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Terminal-%E4%B8%8E-Shell/Bash/%E9%87%8D%E5%AE%9A%E5%90%91/</guid><description>概述 参考：
Manual(手册)，bash(1) - 重定向 Redirection(重定向) 功能可以在执行命令之前，使用 Bash 的特殊符号来重定向其输入和输出。 重定向还可以用于打开和关闭当前 Shell 执行环境的文件。 重定向操作符可以出现在简单命令的前面，也可以出现在命令的后面。重定向按照它们出现的顺序进行处理。 重定向按照从左到右的顺序显示。
用一个简单的例子来理解一下什么是重定向
~]# ls anaconda-ks.cfg playbook scripts ~]# ls &amp;gt; dirlist ~]# cat dirlist anaconda-ks.cfg dirlist playbook scripts 这个例子就是将 ls 命令的标准输出的内容，重定向到 dirlist 文件中。(默认一个命令执行时，输出内容会打印在屏幕上，但是重定向后，将内容写入文件中)
每个程序在运行后，都会至少打开三个 文件描述符，分别是
0：标准输入 1：标准输出 2：标准错误 文件描述符介绍详见：文件描述符与打开文件之间的关系
所以，shell 可以实现重定向，就是这 3 者其中之一，或者全部三者。
重定向的种类 在下面各种重定向的语法中，n 表示文件描述符
Redirecting Input 重定向输入 输入的重定向将打开名称为 WORD 的文件，以便在文件描述符 n 下打开标准输入，n 默认为 0。
语法：COMMAND [n]&amp;lt; WORD
EXAMPLE
Redirecting Output 重定向输出 输出重定向将打开名称为 WORD 的文件，以便在文件描述符 n 上进行写操作，n 默认为 1。 如果 WORD 文件不存在，则创建该文件； 如果存在，则将其截断为零大小。</description></item></channel></rss>