<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – 类 Unix 操作系统</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/0.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%B1%BB-Unix-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</link><description>Recent content in 类 Unix 操作系统 on 断念梦</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/0.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%B1%BB-Unix-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs:</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/0.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%B1%BB-Unix-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/EulerOS-%E4%B8%8E-OpenEuler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/0.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%B1%BB-Unix-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/EulerOS-%E4%B8%8E-OpenEuler/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://developer.huaweicloud.com/ict/cn/site-euleros/euleros">EulerOS 官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.openeuler.org/zh/">OpenEuler 官网&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>华为真是把造词玩明白了，乱七八糟的，本家私有化的产品就一堆重复早轮子的名字，连开源系统都整俩名字&lt;/p>
&lt;p>EulerOS 与 OpenEuler&lt;/p>
&lt;ul>
&lt;li>EulerOS # 企业&lt;/li>
&lt;li>OpenEuler # 开源&lt;/li>
&lt;/ul></description></item><item><title>Docs: Alpine</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/0.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%B1%BB-Unix-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Alpine/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/0.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%B1%BB-Unix-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Alpine/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.alpinelinux.org/">官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/alpinelinux/docker-alpine">GitHub 项目,docker-alpine&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hub.docker.com/_/alpine">DockerHub&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/Qt8ASPefVG-9bZe6FO_YQw">https://mp.weixin.qq.com/s/Qt8ASPefVG-9bZe6FO_YQw&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="apk--包管理器">APK # 包管理器&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.alpinelinux.org/user-handbook/0.1a/Working/apk.html">官方文档&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Alpine Package Keeper(Alpine 包管理圆，简称 APK)&lt;/strong> 是 Alpine 发行版的包管理工具。&lt;/p>
&lt;h2 id="关联文件">关联文件&lt;/h2>
&lt;p>&lt;strong>/etc/apk/repositories&lt;/strong> # 包仓库的配置文件&lt;/p>
&lt;ul>
&lt;li>阿里仓库
&lt;ul>
&lt;li>sed -i &amp;rsquo;s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g&amp;rsquo; /etc/apk/repositories&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>中科大仓库
&lt;ul>
&lt;li>sed -i &amp;rsquo;s/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g&amp;rsquo; /etc/apk/repositories&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>/var/cache/apk/*&lt;/strong> # APK 程序运行时产生的缓存文件保存路径&lt;/p>
&lt;h2 id="apk-命令行工具">apk 命令行工具&lt;/h2>
&lt;h3 id="syntax语法">Syntax(语法)&lt;/h3>
&lt;p>&lt;strong>apk [Global OPTIONS] COMMAND [COMMAND OPTIONS]&lt;/strong>
Global OPTIONS&lt;/p>
&lt;ul>
&lt;li>&amp;ndash;no-cache # 不在 /var/cache/apk/ 目录下生成缓存，并且也不使用该目录下的缓存。&lt;/li>
&lt;/ul>
&lt;p>COMMAND&lt;/p>
&lt;ul>
&lt;li>安装和移除包命令
&lt;ul>
&lt;li>&lt;strong>add&lt;/strong> # 为正在运行的系统添加新包或升级包&lt;/li>
&lt;li>&lt;strong>del&lt;/strong> # 从正在运行的系统中删除包&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>系统维护命令(管理包的元数据)
&lt;ul>
&lt;li>cache Maintenance operations for locally cached package repository&lt;/li>
&lt;li>&lt;strong>fix&lt;/strong> # 尝试修复或升级已安装的包&lt;/li>
&lt;li>update Update the index of available packages&lt;/li>
&lt;li>upgrade Upgrade the currently installed packages&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>查询包的信息
&lt;ul>
&lt;li>dot Create a graphviz graph description for a given package&lt;/li>
&lt;li>info # Prints information about installed or available packages&lt;/li>
&lt;li>list # List packages by PATTERN and other criteria&lt;/li>
&lt;li>policy Display the repository that updates a given package, plus repositories that also offer the package&lt;/li>
&lt;li>search Search for packages or descriptions with wildcard patterns&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>仓库管理命令(管理包源)
&lt;ul>
&lt;li>&lt;strong>fetch&lt;/strong># 下载包，但是不安装它。&lt;/li>
&lt;li>index create a repository index from a list of packages&lt;/li>
&lt;li>verify Verify a package signature&lt;/li>
&lt;li>stats Display statistics, including number of packages installed and available, number of directories and files, etc.&lt;/li>
&lt;li>manifest Display checksums for files contained in a given package&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>del OPTIONS&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-r, &amp;ndash;rdepends&lt;/strong> # 递归删除所有顶级反向依赖项&lt;/li>
&lt;/ul>
&lt;h1 id="alpine-容器镜像">Alpine 容器镜像&lt;/h1>
&lt;p>alpine 是基于 Alpine Linux 发型版的最小容器映像，具有完整的软件包索引，大小仅为 5 MB！Alpine 采用了 musl libc 和 busybox 以减小系统的体积和运行时的资源消耗。同时，Alpine 具有自己的&lt;strong>包管理器 APK&lt;/strong>。可以在 &lt;a href="https://pkgs.alpinelinux.org/packages">https://pkgs.alpinelinux.org/packages&lt;/a> 查询到所有包的信息，并且可以直接通过 &lt;code>apk&lt;/code> 命令查询和安装各种软件。&lt;/p>
&lt;h2 id="添加时区">添加时区&lt;/h2>
&lt;p>安装 tzdata 包，后，配置 TZ 环境变量或者创建 /etc/localtime 软链接文件即可。示例如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>FROM alpine
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 设置时区为上海&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>RUN sed -i &lt;span style="color:#e6db74">&amp;#39;s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g&amp;#39;&lt;/span> /etc/apk/repositories &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> apk update &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> apk add --no-cache tzdata &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="设置系统语言防止中文乱码">设置系统语言，防止中文乱码&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>FROM alpine:3.11.5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ENV LANG&lt;span style="color:#f92672">=&lt;/span>en_US.UTF-8 &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> LANGUAGE&lt;span style="color:#f92672">=&lt;/span>en_US.UTF-8
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="常见问题">常见问题&lt;/h2>
&lt;h3 id="golang-在-alpine-镜像下-hosts-定义的域名不生效-及解决-x509certificates">golang 在 alpine 镜像下 hosts 定义的域名不生效-及解决 x509certificates&lt;/h3>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/golang/go/issues/22846">Go Issue #22846&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://blog.csdn.net/huangruifeng/article/details/96594065">CSDN&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cloud.tencent.com/developer/article/1756065">腾讯云文章&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>golang 在 alpine 镜像下 hosts 定义的域名不生效&lt;/p>
&lt;p>解决方案&lt;/p>
&lt;pre>&lt;code>echo &amp;quot;hosts: files dns&amp;quot; &amp;gt; /etc/nsswitch.conf
&lt;/code>&lt;/pre>
&lt;blockquote>
&lt;p>参考：&lt;a href="https://github.com/golang/go/issues/22846">https://github.com/golang/go/issues/22846&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>以下为调整后的 Dockerfile&lt;/p>
&lt;pre>&lt;code>FROM alpine
RUN apk update #解决 apk下载失败问题 ERROR: unsatisfiable constraints
RUN apk add --no-cache ca-certificates # 在go程序中无法访问https链接，解决x509certificates
RUN echo &amp;quot;hosts: files dns&amp;quot; &amp;gt; /etc/nsswitch.conf #go程序在alpine下不解析hosts文件
&lt;/code>&lt;/pre></description></item><item><title>Docs: Debian 与 Ubuntu</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/0.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%B1%BB-Unix-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Debian-%E4%B8%8E-Ubuntu/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/0.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%B1%BB-Unix-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Debian-%E4%B8%8E-Ubuntu/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://manpages.debian.org/">Debian 官方 Manual(手册)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>groupadd wheel
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>usermod -G wheel lichenhao
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tee /etc/sudoers.d/lichenhao &amp;gt; /dev/null &lt;span style="color:#e6db74">&amp;lt;&amp;lt;EOF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">%wheel ALL=(ALL) NOPASSWD: ALL
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>~/.bashrc&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$color_prompt&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">=&lt;/span> yes &lt;span style="color:#f92672">]&lt;/span>; &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># PS1=&amp;#39;${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ &amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PS1&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;${debian_chroot:+($debian_chroot)}[\[\e[34;1m\]\u@\[\e[0m\]\[\e[32;1m\]\H\[\e[0m\] \[\e[31;1m\]\w\[\e[0m\]]\\$ &amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># PS1=&amp;#39;${debian_chroot:+($debian_chroot)}\u@\h:\w\$ &amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PS1&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;${debian_chroot:+($debian_chroot)}[\[\e[34;1m\]\u@\[\e[0m\]\[\e[32;1m\]\H\[\e[0m\] \[\e[31;1m\]\w\[\e[0m\]]\\$ &amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fi&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="ubuntu">Ubuntu&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://ubuntu.com/">官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Ubuntu">Wiki，Ubuntu&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Ubuntu 是一个基于 Debian 的 Linux 发行版，主要由 &lt;a href="https://en.wikipedia.org/wiki/Free_and_open-source_software">FOSS&lt;/a> 组成。&lt;/p>
&lt;p>Ubuntu 由英国公司 &lt;a href="https://en.wikipedia.org/wiki/Canonical_(company)">Canonical&lt;/a> 和其他开发者社区共同开发的，采用了一种精英治理模式。Canonical为每个Ubuntu版本提供安全更新和支持，从发布日期开始，直到该版本达到其指定的寿命终点(EOL)日期为止。Canonical 通过销售与 Ubuntu 相关的高级服务以及下载 Ubuntu 软件的人的捐赠来获得收入。&lt;/p>
&lt;h2 id="其他">其他&lt;/h2>
&lt;p>Ubuntu Server 安装完成后，通常需要关闭自动更新，详见 &lt;a href="docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/6.Package%20%E7%AE%A1%E7%90%86/Debian%20%E5%8C%85%E7%AE%A1%E7%90%86.md#%E5%8C%85%E7%9A%84%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0">Debian 包管理&lt;/a>&lt;/p></description></item><item><title>Docs: RedHat 与 CentOS</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/0.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%B1%BB-Unix-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/RedHat-%E4%B8%8E-CentOS/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/0.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%B1%BB-Unix-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/RedHat-%E4%B8%8E-CentOS/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://access.redhat.com/products/red-hat-enterprise-linux/#knowledge">RedHat 官方文档&lt;/a>(在这里点击 Product Documentation)&lt;/li>
&lt;li>&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7">RedHat7 生产环境文档&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8">RedHat8 生产环境文档&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.centos.org/legal/">CentOS 官方，法律&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;a href="https://mp.weixin.qq.com/s/heX7Qtc7Fizx43EgGkIiMQ">CentOS: 永远有多远就离它多远&lt;/a>
&lt;a href="https://mp.weixin.qq.com/s/DUUYW_OBV_wUu1wZaP6gAg">CentOS7 好日子到头了，如何优雅的抛弃 CentOS7？&lt;/a>
&lt;a href="https://mp.weixin.qq.com/s/FMvNx-kzz7DZZqGGpxjbuw">CentOS 8 退役倒计时，开发者们又吵起来了&lt;/a>&lt;/p>
&lt;p>CentOS 居然还用 python2&lt;/p>
&lt;p>装 Python3 很费劲&lt;/p>
&lt;p>装 python-libvirt 很费劲&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/wlni0v/1654840849145-f536a3be-b969-40b8-813d-959985b4f429.jpeg" alt="41212703dee962f84b5c4a49a80707d.jpg">&lt;/p>
&lt;h1 id="安装-centos">安装 CentOS&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rhinstaller/anaconda">GitHub 项目，rhinstaller/anaconda&lt;/a>(RedHat 相关发行版的操作系统安装器)&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>RedHat 系列的 .iso 安装文件中包含了 Anaconda 安装器。&lt;/p>
&lt;h2 id="注意事项">注意事项&lt;/h2>
&lt;p>/bin,/dev,/sbin,/etc,/lib,/root, /mnt, lost+found, /proc 这些目录不能创建单独的分区并挂载，只能创建一个 / 以包含这些目录&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://unix.stackexchange.com/questions/121318/this-mount-point-is-invalid-the-root-directory-must-be-on-file-system">https://unix.stackexchange.com/questions/121318/this-mount-point-is-invalid-the-root-directory-must-be-on-file-system&lt;/a>&lt;/li>
&lt;li>代码：&lt;a href="https://github.com/rhinstaller/anaconda/blob/rhel6-branch/storage/__init__.py#L1084">https://github.com/rhinstaller/anaconda/blob/rhel6-branch/storage/&lt;strong>init&lt;/strong>.py#L1084&lt;/a>&lt;/li>
&lt;li>高于 6 版本的分之代码将这个行为封装了
&lt;ul>
&lt;li>&lt;a href="https://github.com/rhinstaller/anaconda/blob/rhel-9/pyanaconda/modules/storage/checker/utils.py#L31">https://github.com/rhinstaller/anaconda/blob/rhel-9/pyanaconda/modules/storage/checker/utils.py#L31&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="关联文件">关联文件&lt;/h1>
&lt;p>&lt;strong>/etc/sysconfig/&lt;/strong> # Red Hat Linux 发行版的各种系统配置文件&lt;/p>
&lt;h1 id="centos-法律">CentOS 法律&lt;/h1>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/wlni0v/1647171407465-5e7ad5f3-913d-4c93-a893-e3334b09bfbb.png" alt="image.png">&lt;/p>
&lt;h1 id="centos-变为上游项目">Centos 变为上游项目&lt;/h1>
&lt;p>Centos 的创始人新建了一个 &lt;a href="https://github.com/rocky-linux/rocky">&lt;strong>Rocky 项目&lt;/strong>&lt;/a>，旨在作为 RedHat 下游 Linux 发行版&lt;/p>
&lt;p>Frequently Asked Questions&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Q:&lt;/strong> What do you mean, &amp;ldquo;CentOS has shifted direction?&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;p>The CentOS project recently announced a shift in strategy for CentOS. Whereas previously CentOS existed as a &lt;em>downstream&lt;/em> build of its upstream vendor (it receives patches and updates after the upstream vendor does), it will be shifting to an &lt;em>upstream&lt;/em> build (testing patches and updates &lt;em>before&lt;/em> inclusion in the upstream vendor).&lt;/p>
&lt;p>Additionally, support for CentOS Linux 8 has been cut short, from May 31, 2029 to December 31, 2021.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Q:&lt;/strong> So where does Rocky Linux come in?&lt;/p>
&lt;/blockquote>
&lt;p>Rocky Linux aims to function as a downstream build as CentOS had done previously, building releases after they have been added to the upstream vendor, not before.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Q:&lt;/strong> When will it be released?&lt;/p>
&lt;/blockquote>
&lt;p>There is not currently an ETA for release.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Q:&lt;/strong> What is the vision for Rocky Linux?&lt;/p>
&lt;/blockquote>
&lt;p>A &lt;strong>solid&lt;/strong>, &lt;strong>stable&lt;/strong>, and &lt;strong>transparent&lt;/strong> alternative for production environments, developed &lt;em>by&lt;/em> the community &lt;em>for&lt;/em> the community.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Q:&lt;/strong> Who drives Rocky Linux?&lt;/p>
&lt;/blockquote>
&lt;p>We all do, Rocky Linux is a community-driven project and always will be. Rocky Linux will not be sold or driven by corporate interest.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Q:&lt;/strong> How can I get involved?&lt;/p>
&lt;/blockquote>
&lt;p>Please view the contributing section below.&lt;/p>
&lt;h1 id="centos-stream-问题汇总">Centos Stream 问题汇总&lt;/h1>
&lt;p>CentOS Stream 使用了别人已经用了很久的 system-resolved.service 服务，但是从 centos8 升级到 centos stream 后，服务有了，但是却并没有自动启动该服务，也就导致了没有 /run/systemd/resolve/resolv.conf 文件，很多程序在发现 system-resolved.service 后，会去读取这个文件，比如 kubelet 程序。&lt;/p></description></item><item><title>Docs: 类 Unix 操作系统</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/0.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%B1%BB-Unix-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%B1%BB-Unix-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/0.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%B1%BB-Unix-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%B1%BB-Unix-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Unix">Wiki，Unix&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://man7.org/linux/man-pages/man5/os-release.5.html">Manual(手册)，os-release&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://distrowatch.com/">DistroWatch&lt;/a>(类 UNIX 系统的资讯网站)&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Unix 是一系列多任务、多用户计算机操作系统的统称。&lt;/p>
&lt;p>最初打算在&lt;a href="https://en.wikipedia.org/wiki/Bell_System">贝尔系统&lt;/a>内部使用，AT&amp;amp;T 在 1970 年代后期&lt;a href="https://en.wikipedia.org/wiki/License">将&lt;/a>Unix&lt;a href="https://en.wikipedia.org/wiki/License">授权&lt;/a>给外部各方，导致来自&lt;a href="https://en.wikipedia.org/wiki/University_of_California,_Berkeley">加利福尼亚大学伯克利分校&lt;/a>( &lt;a href="https://en.wikipedia.org/wiki/Berkeley_Software_Distribution">BSD&lt;/a> )、&lt;a href="https://en.wikipedia.org/wiki/Microsoft">微软&lt;/a>( &lt;a href="https://en.wikipedia.org/wiki/Xenix">Xenix&lt;/a> )、&lt;a href="https://en.wikipedia.org/wiki/Sun_Microsystems">Sun Microsystems 等&lt;/a>供应商的各种学术和商业 Unix 变体( &lt;a href="https://en.wikipedia.org/wiki/SunOS">SunOS&lt;/a> / &lt;a href="https://en.wikipedia.org/wiki/Solaris_(operating_system)">Solaris&lt;/a> )、&lt;a href="https://en.wikipedia.org/wiki/Hewlett-Packard">HP&lt;/a> / &lt;a href="https://en.wikipedia.org/wiki/Hewlett_Packard_Enterprise">HPE&lt;/a> ( &lt;a href="https://en.wikipedia.org/wiki/HP-UX">HP-UX&lt;/a> ) 和&lt;a href="https://en.wikipedia.org/wiki/IBM">IBM&lt;/a> ( &lt;a href="https://en.wikipedia.org/wiki/AIX">AIX&lt;/a> )。在 1990 年代初期，AT&amp;amp;T 将其在 Unix 中的权利出售给了&lt;a href="https://en.wikipedia.org/wiki/Novell">Novell&lt;/a>，&lt;a href="https://en.wikipedia.org/wiki/Novell">Novell&lt;/a>随后将其 Unix 业务出售给了&lt;a href="https://en.wikipedia.org/wiki/Santa_Cruz_Operation">Santa Cruz Operation&lt;/a> (SCO) 于 1995 年。&lt;a href="https://en.wikipedia.org/wiki/Unix#cite_note-4">[4]&lt;/a> UNIX 商标转让给了&lt;a href="https://en.wikipedia.org/wiki/The_Open_Group">The Open Group&lt;/a>，这是一个成立于 1996 年的行业联盟，允许将该标志用于符合&lt;a href="https://en.wikipedia.org/wiki/Single_UNIX_Specification">单一 UNIX 规范&lt;/a>(SUS) 的认证操作系统。但是，Novell 继续拥有 Unix 版权，&lt;a href="https://en.wikipedia.org/wiki/SCO_Group,_Inc._v._Novell,_Inc.">SCO Group, Inc. 诉 Novell, Inc.&lt;/a>法庭案件 (2010) 证实了这一点。&lt;/p>
&lt;p>Unix 系统的特点是&lt;a href="https://en.wikipedia.org/wiki/Modular_design">模块化设计&lt;/a>，有时被称为“ &lt;a href="https://en.wikipedia.org/wiki/Unix_philosophy">Unix 哲学&lt;/a>”。根据这一理念，操作系统应该提供一组简单的工具，每个工具都执行有限的、定义明确的功能。&lt;a href="https://en.wikipedia.org/wiki/Unix#cite_note-5">[5]&lt;/a>统一的&lt;a href="https://en.wikipedia.org/wiki/Filesystem">文件系统&lt;/a>（&lt;a href="https://en.wikipedia.org/wiki/Unix_filesystem">Unix 文件系统&lt;/a>）和称为“&lt;a href="https://en.wikipedia.org/wiki/Pipeline_(Unix)">管道&lt;/a>”&lt;a href="https://en.wikipedia.org/wiki/Inter-process_communication">的进程间通信&lt;/a>机制作为主要通信手段，&lt;a href="https://en.wikipedia.org/wiki/Unix#cite_note-Ritchie-3">[3]&lt;/a>和&lt;a href="https://en.wikipedia.org/wiki/Shell_(computing)">shell&lt;/a>脚本和命令语言（&lt;a href="https://en.wikipedia.org/wiki/Unix_shell">Unix shell&lt;/a>）用于结合执行复杂工作流程的工具。&lt;/p>
&lt;p>作为第一个&lt;a href="https://en.wikipedia.org/wiki/Software_portability">可移植&lt;/a>操作系统，Unix 与其前辈不同：几乎整个操作系统都是用&lt;a href="https://en.wikipedia.org/wiki/C_(programming_language)">C 编程语言&lt;/a>编写的，这使得 Unix 可以在众多平台上运行。&lt;/p>
&lt;h2 id="类-unix-操作系统">类 Unix 操作系统&lt;/h2>
&lt;p>1983 年，&lt;a href="https://en.wikipedia.org/wiki/Richard_Stallman">Richard Stallman&lt;/a>宣布了&lt;a href="https://en.wikipedia.org/wiki/GNU">GNU&lt;/a>（“GNU&amp;rsquo;s Not Unix”的缩写）项目，这是一项雄心勃勃的努力，旨在创建一个&lt;a href="https://en.wikipedia.org/wiki/Unix-like">类似 Unix&lt;/a>的&lt;a href="https://en.wikipedia.org/wiki/Free_software">自由软件&lt;/a> 系统；“免费”是指每个收到副本的人都可以免费使用、研究、修改和重新分发它。GNU 项目自己的内核开发项目&lt;a href="https://en.wikipedia.org/wiki/GNU_Hurd">GNU Hurd&lt;/a>尚未生产出可运行的内核，但在 1991 年，&lt;a href="https://en.wikipedia.org/wiki/Linus_Torvalds">Linus Torvalds&lt;/a>在&lt;a href="https://en.wikipedia.org/wiki/GNU_General_Public_License">GNU 通用公共许可证&lt;/a>下发布了内核&lt;a href="https://en.wikipedia.org/wiki/Linux_kernel">Linux&lt;/a>作为自由软件。除了在&lt;a href="https://en.wikipedia.org/wiki/GNU">GNU&lt;/a>操作系统中使用之外，许多 GNU 软件包——例如&lt;a href="https://en.wikipedia.org/wiki/GNU_Compiler_Collection">GNU Compiler Collection&lt;/a>（以及其余的&lt;a href="https://en.wikipedia.org/wiki/GNU_toolchain">GNU 工具链&lt;/a>）、&lt;a href="https://en.wikipedia.org/wiki/Glibc">GNU C 库&lt;/a>和&lt;a href="https://en.wikipedia.org/wiki/Coreutils">GNU 核心实用程序&lt;/a> ——也继续在其他自由 Unix 系统中发挥核心作用。&lt;/p>
&lt;p>由 Linux 内核和大量兼容软件组成的&lt;a href="https://en.wikipedia.org/wiki/Linux_distribution">Linux 发行版&lt;/a>在个人用户和企业中都很受欢迎。流行的发行版包括 &lt;a href="https://en.wikipedia.org/wiki/Red_Hat_Enterprise_Linux">Red Hat Enterprise Linux&lt;/a>、&lt;a href="https://en.wikipedia.org/wiki/Fedora_(operating_system)">Fedora&lt;/a>、&lt;a href="https://en.wikipedia.org/wiki/SUSE_Linux">SUSE Linux Enterprise&lt;/a>、&lt;a href="https://en.wikipedia.org/wiki/OpenSUSE">openSUSE&lt;/a>、&lt;a href="https://en.wikipedia.org/wiki/Debian">Debian GNU/Linux&lt;/a>、&lt;a href="https://en.wikipedia.org/wiki/Ubuntu_(operating_system)">Ubuntu&lt;/a>、&lt;a href="https://en.wikipedia.org/wiki/Linux_Mint">Linux Mint&lt;/a>、&lt;a href="https://en.wikipedia.org/wiki/Mandriva_Linux">Mandriva Linux&lt;/a>、&lt;a href="https://en.wikipedia.org/wiki/Slackware_Linux">Slackware Linux&lt;/a>、&lt;a href="https://en.wikipedia.org/wiki/Arch_Linux">Arch Linux&lt;/a>和&lt;a href="https://en.wikipedia.org/wiki/Gentoo_Linux">Gentoo&lt;/a>。&lt;/p>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/BSD">BSD&lt;/a> Unix 的免费衍生产品&lt;a href="https://en.wikipedia.org/wiki/386BSD">386BSD&lt;/a>于 1992 年发布，引发了&lt;a href="https://en.wikipedia.org/wiki/NetBSD">NetBSD&lt;/a>和&lt;a href="https://en.wikipedia.org/wiki/FreeBSD">FreeBSD&lt;/a>项目。1994 年，&lt;a href="https://en.wikipedia.org/wiki/Unix_System_Laboratories">Unix 系统实验室&lt;/a>对加州大学和伯克利软件设计公司（&lt;a href="https://en.wikipedia.org/wiki/USL_v._BSDi">&lt;em>USL 诉 BSDi&lt;/em>&lt;/a>）提起的诉讼达成和解，澄清了伯克利有权免费分发 BSD Unix，如果它愿意的话。从那时起，BSD Unix 已经在几个不同的产品分支中开发，包括&lt;a href="https://en.wikipedia.org/wiki/OpenBSD">OpenBSD&lt;/a>和&lt;a href="https://en.wikipedia.org/wiki/DragonFly_BSD">DragonFly BSD&lt;/a>。&lt;/p>
&lt;p>Linux 和 BSD 越来越多地满足传统上由专有 Unix 操作系统提供服务的市场需求，并扩展到新市场，如消费桌面和移动和嵌入式设备。由于 Unix 模型的模块化设计，共享组件比较常见；因此，大多数或所有 Unix 和类 Unix 系统至少包含一些 BSD 代码，一些系统还在其发行版中包含 GNU 实用程序。&lt;/p>
&lt;p>在 1999 年的一次采访中，Dennis Ritchie 表达了他的观点，即 Linux 和 BSD 操作系统是 Unix 设计基础的延续，是 Unix 的衍生物：&lt;a href="https://en.wikipedia.org/wiki/Unix#cite_note-Interview_1999-27">[27]&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>我认为 Linux 现象非常令人愉快，因为它强烈地依赖于 Unix 提供的基础。Linux 似乎是最健康的直接 Unix 衍生产品之一，尽管也有各种 BSD 系统以及来自工作站和大型机制造商的更多官方产品。&lt;/p>
&lt;/blockquote>
&lt;p>在同一次采访中，他表示他认为 Unix 和 Linux 都是“多年前由 Ken 和我以及许多其他人发起的想法的延续”。&lt;a href="https://en.wikipedia.org/wiki/Unix#cite_note-Interview_1999-27">[27]&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/OpenSolaris">OpenSolaris&lt;/a>是&lt;a href="https://en.wikipedia.org/wiki/Sun_Microsystems">Sun Microsystems&lt;/a>开发的&lt;a href="https://en.wikipedia.org/wiki/Solaris_(operating_system)">Solaris&lt;/a>的&lt;a href="https://en.wikipedia.org/wiki/Free_software">免费软件&lt;/a>对应物，其中包括&lt;a href="https://en.wikipedia.org/wiki/CDDL">CDDL&lt;/a>许可的内核和主要的&lt;a href="https://en.wikipedia.org/wiki/GNU">GNU&lt;/a>用户空间。然而，&lt;a href="https://en.wikipedia.org/wiki/Oracle_Corporation">甲骨文&lt;/a>在收购 Sun 后停止了该项目，这促使一群前 Sun 员工和 OpenSolaris 社区成员将 OpenSolaris 分叉到&lt;a href="https://en.wikipedia.org/wiki/Illumos">illumos&lt;/a>内核中。截至 2014 年，illumos 仍然是唯一活跃的开源 System V 衍生产品。&lt;/p>
&lt;h1 id="关联文件">关联文件&lt;/h1>
&lt;p>&lt;strong>/etc/os-release&lt;/strong> # 操作系统标识。该文件是 /usr/lib/os-release 文件的软链接&lt;/p>
&lt;p>注意：&lt;/p>
&lt;ul>
&lt;li>不同的 Linux 发行版，都会有一些自身特有的配置，比如 /etc/sysconfg 目录，只会在 RedHat 相关发行版(比如.CentOS)中出现，Ubuntu 并没有这个目录。&lt;/li>
&lt;/ul>
&lt;h2 id="os-release-详解">os-release 详解&lt;/h2>
&lt;p>/etc/os-release 是本身是 &lt;a href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/3.Systemd%20%E7%B3%BB%E7%BB%9F%E5%AE%88%E6%8A%A4%E7%A8%8B%E5%BA%8F/3.Systemd%20%E7%B3%BB%E7%BB%9F%E5%AE%88%E6%8A%A4%E7%A8%8B%E5%BA%8F.md">Systemd 系统守护程序&lt;/a> 的一部分，包含了操作系统的识别数据。在&lt;a href="http://0pointer.de/blog/projects/os-release">这篇文章&lt;/a>里，详解描述了为什么需要这个文件。该文件通常是操作系统供应商定义的，不应该手动修改。&lt;/p>
&lt;p>os-release 是一个以换行符分隔的类似环境的 shell 兼容变量赋值列表。示例如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~# cat /etc/os-release
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NAME&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Ubuntu&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>VERSION&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;20.04.2 LTS (Focal Fossa)&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ID&lt;span style="color:#f92672">=&lt;/span>ubuntu
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ID_LIKE&lt;span style="color:#f92672">=&lt;/span>debian
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PRETTY_NAME&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Ubuntu 20.04.2 LTS&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>VERSION_ID&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;20.04&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>HOME_URL&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;https://www.ubuntu.com/&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>SUPPORT_URL&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;https://help.ubuntu.com/&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>BUG_REPORT_URL&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;https://bugs.launchpad.net/ubuntu/&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PRIVACY_POLICY_URL&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;https://www.ubuntu.com/legal/terms-and-policies/privacy-policy&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>VERSION_CODENAME&lt;span style="color:#f92672">=&lt;/span>focal
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>UBUNTU_CODENAME&lt;span style="color:#f92672">=&lt;/span>focal
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个文件可以很方便得让各种 shell 脚本获取到操作系统的信息，只需要脚本中执行 &lt;code>source /etc/os-release&lt;/code> 命令即可。&lt;/p>
&lt;h1 id="ubuntu-与-centos-的异同">Ubuntu 与 CentOS 的异同&lt;/h1>
&lt;h2 id="安装镜像">安装镜像&lt;/h2>
&lt;p>CentOS 的 iso 中包含了所有基础环境所需的软件包，但是 iso 文件过大，7 是 4G 多，8 有 9G 多
Ubuntu 的 iso 中只有一点软件包，虚拟化环境的都没有，但是 iso 文件很小，只有不到 1G&lt;/p>
&lt;h2 id="网络配置">网络配置&lt;/h2>
&lt;p>CentOS 对 NetworkManager 改动较大
Ubuntu 对 NetworkManager 改动几乎没有&lt;/p></description></item><item><title>Docs: 系统启动流程</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/0.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%B1%BB-Unix-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/0.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%B1%BB-Unix-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/hItVJbvxN2DHkb1rwYSltA">公众号，马哥 Linux 运维-Linux 系统开机加电后发生了什么？&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/QDjAIzas5EXQ24-NfTU3TQ">公众号，码农的荒岛求生-操作系统是如何启动起来的？&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>操作系统被称为 The first programme(第一个程序)，原因很简单，只有当操作系统启动起来后才能运行我们编写的程序，那么操作系统是怎样启动起来的呢？&lt;strong>实际上这个过程就像发射火箭一样有趣&lt;/strong>&lt;/p>
&lt;h2 id="操作系统也是普通程序">操作系统也是普通程序&lt;/h2>
&lt;p>首先我们必须意识到这样两点：&lt;/p>
&lt;ul>
&lt;li>CPU 执行的是机器指令，编译器将程序翻译后成了机器指令&lt;/li>
&lt;li>操作系统本身也是一个程序，这个程序被编译后也会生成一大堆机器指令&lt;/li>
&lt;/ul>
&lt;p>现在我们知道了，操作系统本身其实也是一大堆机器指令，既然是机器指令那么它必须得存放在什么地方。&lt;/p>
&lt;p>存放在哪里呢？&lt;/p>
&lt;p>想想我们编写的程序，编译后生成的是可执行文件，也就是说是以“文件”的形式存放的，并且存放在硬盘上，而操作系统也没什么不同，编译后生成的机器指令同样是以文件的形式存放的，存放在哪里呢？可以存放在任何能存储数据的介质，像 CD、磁盘之类都可以。&lt;/p>
&lt;p>我们编写的程序在启动时被加载器——也就是 loader，加载到内存，加载器也是一个程序，这是一个加载其它程序的程序；这么说可能有点拗口，但计算机系统中有大量类似的程序，编译器是一个翻译程序的程序、操作系统是一个运行其它程序的程序、链接器是一个链接程序的程序、解释器是一个执行脚本程序的程序等等。
&lt;strong>鸡生蛋蛋生鸡的问题&lt;/strong>&lt;/p>
&lt;p>回到我们的主题，我们写的代码是 loader 加载到内存后运行的，那么操作系统这个程序是也同样的道理，必须得有个什么东西也要把操作系统加载到内存中运行才可以，这个东西不叫 loader，而是叫 boot loader，其本身也是一个程序，&lt;strong>它的任务就是加载一个更大的程序&lt;/strong>，就像这里的操作系统。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/id9gn1/1648429100745-ceca564f-ccaf-4249-83c4-03637c50eb6f.png" alt="">&lt;/p>
&lt;p>此时这里会出现一个鸡生蛋蛋生鸡的，既然我们的程序是被加载器 loader(操作系统的一部分)加载到内存中，而操作系统又是被 boot loader 这个加载程序加载到内存中的，那么又是什么加载器把 boot loader 这个加载程序加载到内存中呢？而又又是什么加载器把上一句中的什么加载器加载内存中呢？而又又又是什么。。？&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/id9gn1/1648429100748-550bd283-9b49-4e33-9791-a47013d74bca.png" alt="">&lt;/p>
&lt;p>你会发现这个一个没有出口的无穷递归啊有没有，总得有个什么把前一个程序加载到内存，&lt;strong>就好比今天的前一天是昨天、昨天的前一天是前天、前天的前一天是大前天，如果一直这样思考下去那么时间到底在哪里开始的呢&lt;/strong>？时间到底有没有开始(参考时间简史或相对论)？&lt;/p>
&lt;p>时间有没有开始这个问题我不清楚，但操作系统启动的这个问题我知道。&lt;/p>
&lt;p>上述关于加载器以及加载加载器等问题全部指向了内存，让我们好好想一想内存有什么特殊性？&lt;/p>
&lt;h2 id="内存断电后是无法保存数据">内存断电后是无法保存数据&lt;/h2>
&lt;p>程序员都知道内存只有在加电的情况下才可以保存数据(关于内存的实现原理你可以参考这篇《&lt;a href="http://mp.weixin.qq.com/s?__biz=Mzg4OTYzODM4Mw==&amp;amp;mid=2247485736&amp;amp;idx=1&amp;amp;sn=a70558b5200e840ef251e19a2eef099b&amp;amp;chksm=cfe995a8f89e1cbe8fab1240515f35ec90fb520d122ec60761b71a8664ae3af390689be370aa&amp;amp;scene=21#wechat_redirect">你管这破玩意叫 CPU？&lt;/a>》)，那么很显然，&lt;strong>当断电后内存中的内容就丢失了&lt;/strong>，那么又很显然的，当你在按下计算机开关通电时，内存中的内容是未被初始化的，也就是说内存中的内容是无效的，&lt;strong>此时的内存里还是一片荒芜&lt;/strong>，这里没有任何东西可供 CPU 来执行，这就好比大爆炸之前的宇宙。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/id9gn1/1648429100787-22b14442-38f8-43b5-9e92-0cd8bc048d40.png" alt="">
但我们的计算机总是能启动起来，CPU 必须得执行“一段什么程序”把第一个 boot loader 加载到内存中，&lt;strong>由于此时内存中还什么都没有，那么这段程序一定被保存在了其它地方&lt;/strong>。&lt;/p>
&lt;p>保存在了哪里呢？&lt;/p>
&lt;p>没错，这段程序就被保存在了 BIOS 的非易失性存储 ROM 或者 flash 存储中了，这里的代码在即使断电后也会保存下来，加电后 CPU 开始执行这里代码，把 boot loader 加载到内存中，现在你应该明白第一个 boot loader 是怎样被加载到内存的了吧。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/id9gn1/1648429100774-74b706fc-5218-4dda-b30c-eeb9ab95e7a7.png" alt="">
在早期的计算机上甚至专门有一个按钮，让用户自己选择该从哪里，比如打孔纸带、打孔卡片或者硬盘，加载一个更复杂的程序来运行，操作面板上的旋钮可以控制把这些程序加载到内存的什么位置上去：
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/id9gn1/1648429100742-3d35999a-6920-47f7-afd0-07403a3ba21c.jpeg" alt="">&lt;/p>
&lt;h2 id="火箭与操作系统启动">火箭与操作系统启动&lt;/h2>
&lt;p>然而现实情况比较复杂，我们刚才提到的 boot loader 这段小程序功能实在是太弱了，此时其能访问的磁盘地址空间有限，不能把完整的内核全部加载到操作系统中，该怎么办呢？&lt;/p>
&lt;p>既然 boot loader 比较弱那么就换一个比较牛的 loader 程序来，就这样出现了二阶 boot loader，second stage loader：
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/id9gn1/1648429101226-b5e1f5bb-da1d-43a2-932d-10265a2f2bb1.png" alt="">
二阶 boot loader 功能更为丰富，比如对硬件进行检查、给用户提供选项加载哪个操作系统等等，安装多系统的同学应该知道，启动时会给你一个选项到底是启动 windows 还是 linux，这就是二阶 boot loader 的作用。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/id9gn1/1648429101278-dd790173-0a36-429f-9be3-be5699d90f5a.png" alt="">
最终，操作系统被二阶 boot loader 加载到内存中开始运行。&lt;/p>
&lt;p>你会发现这个过程就和发射三级火箭一样，最初一级火箭启动，燃料用尽后二级火箭启动，二级火箭完成使命后三级火箭启动，最终把卫星送到太空，而计算机的启动过程也类似。&lt;/p>
&lt;p>最初是 CPU 运行 BIOS 中的一段代码把一级 boot loader 加载到内存中运行，该程序又会把二级 boot loader 加载到内存运行，而二级 boot loader 又会把操作系统加载到内存中，此后控制权被转移到操作系统，(所谓控制权是指 CPU 跳转到操作系统的代码)，操作系统开始运行，经过一系列的初始化，比如硬件检测、开启必要的后台进程等等，最终图形界面或者命令行界面呈现出来。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/id9gn1/1648429101302-750c6a86-5693-4248-858e-d0e1a3884a8e.png" alt="">
接下来我们把这个过程细化一下。&lt;/p>
&lt;h2 id="更详细的启动过程">更详细的启动过程&lt;/h2>
&lt;p>你在按下电源的瞬间相当于火箭点火，此时一级发动机开始工作。&lt;/p>
&lt;p>加电 CPU 重置后开始在地址 0xffff0 处开始执行指令，这个地址其实是 BIOS ROM 的末尾处，该位置其实是一个跳转指令，跳转到 ROM 的一段启动代码上，该代码会进行必要的自检，Power-on self-test (POST)，展示 BIOS 启动界面等等，最重要的一步是找到启动设备，所谓启动设备就是指从哪里加载操作系统，比如 CD-ROM、或者磁盘、甚至 U 盘等都可以作为启动设备，早些年流行用 U 盘重新安装系统，其实就是告诉 BIOS 的这段代码从 U 盘中加载操作系统。&lt;/p>
&lt;p>通常 BIOS 会把磁盘当做启动设备(大部分情况下)，此时 BIOS 中的这段代码开始将磁盘的第 0 号块加载到内存中，那么这第 0 号块中有什么呢？没错，就是第一阶段 boot loader 程序，这第 0 号块也被称之为 Master Boot Record，MBR，肯定有不少同学听说过。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/id9gn1/1648429101348-dbe515f5-8c00-4f46-91c8-b8944d6a12d9.png" alt="">&lt;/p>
&lt;p>到这里，火箭的一级发动机燃料用尽，二级发动机开始点火，BIOS 中的这段代码把控制权交给加载到内存 boot loader，所谓控制权就是跳转到 boot loader 程序，这样 CPU 终于开始直接与内存交互了，CPU 开始从内存中取出指令然后执行。&lt;/p>
&lt;p>MBR 中除了包含一段可执行代码之外还有一个分区表，partition table，这个表的中的每一个条目本质上在说：“操作系统是否在我这个分区，我这个分区有多大”，CPU 在执行 MBR 中的代码时会去检查操作系统存在哪个分区中，定位后开始从相应分区的起始位置读取磁盘数据到内存中，这时的磁盘数据中保存的就是二阶 boot loader，second-stage boot loader，此时一阶 boot loader 把控制权转交给二阶 boot loader，火箭三级发动机开始工作。&lt;/p>
&lt;p>2_boot loader 的主要工作将操作系统加载到内存中，此后控制权转交给操作系统，火箭的三级发动机完成使命，&lt;strong>到这一时刻，操作系统开始接管计算机&lt;/strong>，操作系统经过一系列自身的初始化后创建出若干必要进程，至此计算机启动完毕，卫星被成功送到了外太空中。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/id9gn1/1648429101351-eb22ccb7-7957-4f8c-b88e-854522e1a60c.png" alt="">&lt;/p>
&lt;p>然而限于篇幅这里依然没有过多涉及细节，操作系统本身的初始化也是一个比较复杂的过程，感兴趣的同学可以去翻阅相关操作系统的资料。&lt;/p>
&lt;h1 id="系统启动流程">系统启动流程&lt;/h1>
&lt;ul>
&lt;li>&lt;strong>Power-on self-test(POST)&lt;/strong> # 加电自检通过 ROM 芯片来检测&lt;/li>
&lt;li>&lt;strong>ROM 芯片&lt;/strong> # CMOS 然后启动 BIOS 程序&lt;/li>
&lt;li>&lt;strong>Basic Input and Output System(BIOS)&lt;/strong> # 基本输出输出系统&lt;/li>
&lt;li>&lt;strong>Boot Sequence&lt;/strong> # 按次序查找各引导设备，第一个有引导程序的设备准备本次启动用到的设备，不管该引导程序是否执行成功，只要有引导程序，就不再找下一个设备了。
&lt;ul>
&lt;li>读取硬盘的第一个扇区，这个扇区被称为 MBR．这个扇区中存储了一个小程序，叫做 boot loader．MBR 很小，只有 446B. 最常见的一种 boot loader 叫 grub.&lt;/li>
&lt;li>MBR，前 446 字节为 bootloader，后面 64 字节为 fat(磁盘分区表)，后面 2 字节为 55AA 标记&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Bootloader&lt;/strong> # 引导加载器，这是一个程序。功能：提供一个菜单，供用户选择要启动的系统或不同的内核版本，把用户选定的内核装载到内存中的特定空间中，解压，展开，并把系统控制权移交给内核
&lt;ul>
&lt;li>boot loader 程序主要做两件事，一个是将内核加载到内存中，另一个是启动一个虚拟文件系统．内核文件是 /boot/vmlinuz*,虚拟文件系统文件是 /boot/initrd*．&lt;/li>
&lt;li>GRUB(GRand Uniform BootLoader)用来找到操作系统所在的磁盘分区，把内核加载至内存中，还能把控制权正常转交给内核的程序
&lt;ul>
&lt;li>GRUB 0.x 版：GRUB Legacy&lt;/li>
&lt;li>GRUB 1.X 版：GRUB2&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Kernel
&lt;ul>
&lt;li>初始化：
&lt;ul>
&lt;li>探测硬件&lt;/li>
&lt;li>装载硬件的驱动程序(有可能会借助于 ramdisk 加载驱动程序)&lt;/li>
&lt;li>挂载根文件系统到 / 目录下&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>运行用户空间的第一个应用程序
&lt;ul>
&lt;li>init(初始化)程序的类型
&lt;ul>
&lt;li>SysV：第一个进程名 init 早期的系统用的这个程序，通过脚本启动程序，一个启动完了才能启动下一个&lt;/li>
&lt;li>配置文件/etc/inittab&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Upstart：第一个进程名 init
&lt;ul>
&lt;li>配置文件/etc/inittab、/etc/init/*.conf&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Systemd：第一个进程名 systemd 所有程序可以并行同时启动
&lt;ul>
&lt;li>配置文件：/lib/systemd/system，/etc/systemd/system&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ramdisk&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>POST &amp;ndash;&amp;gt; BootSequence(BIOS) &amp;ndash;&amp;gt; Bootloader(MBR) &amp;ndash;&amp;gt; kernel(ramdisk) &amp;ndash;&amp;gt; rootfs &amp;ndash;&amp;gt; init(systemd)&lt;/p>
&lt;h2 id="上电引导">上电、引导&lt;/h2>
&lt;p>按下开关键，触发主板引脚，开启电源，为主板通电&lt;/p>
&lt;h2 id="装载内核">装载内核&lt;/h2>
&lt;p>vmlinuz 分析
a. mkdir /tmp/vmlinuz&amp;amp;&amp;amp;cp /boot/vmlinuz-4.4.0-21-generic  /tmp/vmlinuz/
b. cd /tmp/vmlinuz/
c. od -t x1 -A d vmlinuz-4.4.0-21-generic | grep &amp;ldquo;1f 8b 08&amp;rdquo;
本质上，vmlinuz-4.4.0-21-generic  是一个 gzip 压缩文件，但是不能直接用 gzip 指令解压，因为在这个文件的开头嵌入了 gzip 的代码．
所以首先用指令 c 找到真正的压缩文件的头部．这个指令的输出形如:
0018864 ac fe ff ff 1f 8b 08 00 00 00 00 00 02 03 ec fd
然后执行下面的指令，其中的 18868 就是 18864+4，这里 4 是指 1f 8b 08 前面有 4 个字节．
dd if=vmlinuz-4.4.0-21-generic bs=1 skip=18868 | zcat &amp;gt; vmlinuz-gakki
objdump -D vmlinuz-gakki &amp;raquo; result
我们可以看到，最终得到的 result 就是一个汇编文件．而 vmlinuz-gakki 文件本质上是一个可执行程序．可以尝试
执行他，chmod +x vmlinuz-gakki &amp;amp;&amp;amp;./vmlinuz-gakki ．
显示 Segmentation fault&lt;/p>
&lt;p>intrid 分析
首先将/boot/intird.img 文件复制到/tmp 文件夹下
执行 file /tmp/initrd.img-4.4.0-21-generic，得到的结果如下：
/tmp/initrd.img-4.4.0-21-generic: gzip compressed data, last modified: Fri Jun 15 13:57:43 2018, from Unix
可以看到本质上这是一个 gzip 格式的压缩文件
cd /tmp
mv initrd.img-4.4.0-21-generic initrd.img-4.4.0-21-generic.gz
gzip -d initrd.img-4.4.0-21-generic.gz
file initrd.img-4.4.0-21-generic
得到的结果为：
initrd.img-4.4.0-21-generic: ASCII cpio archive (SVR4 with no CRC)
这是一个 cpio 文件
执行 cpio -idmv &amp;lt; initrd.img-4.4.0-21-generic
这样，我们可以看到它最终生成了一个小型的文件系统．&lt;/p>
&lt;h2 id="systemd-运行">Systemd 运行&lt;/h2>
&lt;p>详见 《[Systemd 运行流程](/docs/1.操作系统/3.Systemd%20 系统守护程序/Systemd%20 运行流程.md 系统守护程序/Systemd 运行流程.md)》章节&lt;/p></description></item></channel></rss>