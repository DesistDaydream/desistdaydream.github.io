<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – 3.Systemd 系统守护程序</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/3.Systemd-%E7%B3%BB%E7%BB%9F%E5%AE%88%E6%8A%A4%E7%A8%8B%E5%BA%8F/</link><description>Recent content in 3.Systemd 系统守护程序 on 断念梦</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/3.Systemd-%E7%B3%BB%E7%BB%9F%E5%AE%88%E6%8A%A4%E7%A8%8B%E5%BA%8F/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: 3.Systemd 系统守护程序</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/3.Systemd-%E7%B3%BB%E7%BB%9F%E5%AE%88%E6%8A%A4%E7%A8%8B%E5%BA%8F/3.Systemd-%E7%B3%BB%E7%BB%9F%E5%AE%88%E6%8A%A4%E7%A8%8B%E5%BA%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/3.Systemd-%E7%B3%BB%E7%BB%9F%E5%AE%88%E6%8A%A4%E7%A8%8B%E5%BA%8F/3.Systemd-%E7%B3%BB%E7%BB%9F%E5%AE%88%E6%8A%A4%E7%A8%8B%E5%BA%8F/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/systemd/systemd">GitHub 项目&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.jinbuguo.com/systemd/systemd.index.html">Systemd 中文手册,金步国&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://man.cx/systemd">Manual(手册),systemd&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>System daemon(系统守护进程，简称 systemd)&lt;/strong> 实质上：启动一个服务，就是启动一个程序，可以给该程序添加一些参数，也可以不添加，该程序的可执行文件一般是放在 /usr/lib/systemd/system/ 目录下的&lt;/p>
&lt;p>历史上，Linux 的启动一直采用 init 进程。这种命令 &lt;code>/etc/init.d/apache2 start 或者 service apache2 start&lt;/code>，就是用来启动服务。&lt;/p>
&lt;p>这种方法有两个缺点。&lt;/p>
&lt;ol>
&lt;li>启动时间长。init 进程是串行启动，只有前一个进程启动完，才会启动下一个进程。&lt;/li>
&lt;li>启动脚本复杂。init 进程只是执行启动脚本，不管其他事情。脚本需要自己处理各种情况，这往往使得脚本变得很长。&lt;/li>
&lt;/ol>
&lt;p>Systemd 就是为了解决这些问题而诞生的。它的设计目标是，为系统的启动和管理提供一套完整的解决方案。&lt;/p>
&lt;p>根据 Linux 惯例，字母 d 是 daemon(守护进程) 的缩写。 Systemd 这个名字的含义，就是它要守护整个系统。&lt;/p>
&lt;p>使用了 Systemd，就不需要再用 init 了。Systemd 取代了 initd，成为系统的第一个进程(PID 等于 1)，其他进程都是它的子进程。&lt;/p>
&lt;p>Systemd 的优点是功能强大，使用方便，缺点是体系庞大，非常复杂。事实上，现在还有很多人反对使用 Systemd，理由就是它过于复杂，与操作系统的其他部分强耦合，违反&amp;quot;keep simple, keep stupid&amp;quot;的 Unix 哲学。&lt;/p>
&lt;p>注意：Systemd 启动的程序无法获取 shell 中的变量，需要通过在 Unit 的配置文件中设置环境变量。&lt;/p>
&lt;h2 id="unit单元">Unit(单元)&lt;/h2>
&lt;p>Systemd 将各种操作系统启动和运行的相关对象，抽象多种类型的 &lt;strong>Units(单元)&lt;/strong>，并且提供了 Units 之间的依赖关系。&lt;strong>大多数 Units 是通过 Unit File(单元文件) 创建的&lt;/strong>，没有 Unit File，也就不会存在所谓的 Units。&lt;strong>可以这么说，在特定目录创建了一个符合 Unit File 格式的文件，也就创建了一个 Unit&lt;/strong>。&lt;/p>
&lt;blockquote>
&lt;p>单元：比如以前上学总说：第一单元、第二单元，这种理解&lt;/p>
&lt;/blockquote>
&lt;p>现阶段有如下几种 Units：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Automoount unit&lt;/strong> # 自动挂载点&lt;/li>
&lt;li>&lt;strong>Device unit&lt;/strong> # 硬件设备&lt;/li>
&lt;li>&lt;strong>Mount unit&lt;/strong> # 文件系统挂载点&lt;/li>
&lt;li>&lt;strong>Path unit&lt;/strong> # 文件或路径&lt;/li>
&lt;li>&lt;strong>Scope unit&lt;/strong> # 与 Service unit 类似，但是由 systemd 根据 D-bus 接口接收到的信息自动创建， 可用于管理外部创建的进程。&lt;/li>
&lt;li>&lt;strong>Service unit&lt;/strong> # 用于启动和控制守护进程以及他们所包含的进程&lt;/li>
&lt;li>&lt;strong>Slice unit&lt;/strong> # 用于控制特定 CGroup 内(例如一组 service 与 scope 单元)所有进程的总体资源占用。&lt;/li>
&lt;li>&lt;strong>Socket nuit&lt;/strong> # 进程间通信的 socket&lt;/li>
&lt;li>&lt;strong>Swap unit&lt;/strong> # 关于 swap 文件&lt;/li>
&lt;li>&lt;strong>Target nuit&lt;/strong> # 是一群 Unit 的集合&lt;/li>
&lt;li>&lt;strong>Timer unit&lt;/strong> # 定时器&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>Unit 的名称&lt;/strong>。Unit 的名称由 Unit File 的名称决定。比如一个 crond.service 文件，将会创建出来一个类型为 Service，名为 crond.service 的 Unit。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/glcff3/1616167393721-79076d3b-2c04-48e9-a4a0-8ee4bfb69284.jpeg" alt="">
&lt;strong>Unit 的依赖&lt;/strong>。Systemd 能够处理 Units 之间的依赖关系，通过依赖关系，我们可以确定 Unit 之间启动的先后顺序、以及 Unit 之间是否可以同时运行。
&lt;strong>Unit 的状态&lt;/strong>。 Unit 既可以处于活动(active)状态也可以处于停止(inactive)状态， 当然也可以处于启动中(activating)或停止中(deactivating)的状态。 还有一个特殊的失败(failed)状态， 意思是单元以某种方式失败了 (退出时返回了错误代码、进程崩溃、操作超时、触碰启动频率限制)。 当进入失败(failed)状态时， 导致故障的原因 将被记录到日志中以方便日后排查。 需要注意的是， 不同的单元可能还会有各自不同的&amp;quot;子状态&amp;quot;， 但它们都被映射到上述五种状态之一。通过 &lt;code>systemctl list-units --all&lt;/code> 命令可以查看每个 Unit 的状态。&lt;/p>
&lt;h1 id="systemd-配置">Systemd 配置&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>man 手册：&lt;a href="https://man7.org/linux/man-pages/man5/systemd-system.conf.5.html">https://man7.org/linux/man-pages/man5/systemd-system.conf.5.html&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>/etc/systemd/*&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>**./system.conf **# Systemd 程序运行时配置文件&lt;/li>
&lt;li>**./system.conf.d/*.conf **# Systemd 程序运行时配置文件&lt;/li>
&lt;li>&lt;strong>./user.conf&lt;/strong> # Systemd 以普通用户身份运行时的配置文件&lt;/li>
&lt;li>&lt;strong>./user.conf.d/*.conf&lt;/strong> # Systemd 以普通用户身份运行时的配置文件&lt;/li>
&lt;/ul>
&lt;p>**/run/systemd/* **#&lt;/p>
&lt;ul>
&lt;li>&lt;strong>./system.conf.d/*.conf&lt;/strong> # Systemd 程序运行时配置文件&lt;/li>
&lt;li>&lt;strong>./user.conf.d/*.conf&lt;/strong> # Systemd 以普通用户身份运行时的配置文件&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>/usr/lib/systemd/*&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>./system.conf.d/*.conf&lt;/strong> # Systemd 程序运行时配置文件&lt;/li>
&lt;li>&lt;strong>./user.conf.d/*.conf&lt;/strong> # Systemd 以普通用户身份运行时的配置文件&lt;/li>
&lt;/ul>
&lt;p>/etc、/run、/usr/lib 这三个目录的优先级从左至右由高到低。Systemd 会从最低优先级的目录 /usr/lib/_ 下开始加载配置，注意加载其中的文件，直到最高优先级的目录 /etc/systemd/_ 为止。&lt;/p>
&lt;h2 id="units-配置">Units 配置&lt;/h2>
&lt;p>Units 配置就是指 Unit File。Systemd 会从多个目录中加载 Unit File，以生成 Unit。下面列出的路径，优先级从上往下越来越低。也就是说，高优先级目录中的文件，将会覆盖低优先级目录中的同名文件。不同的 Systemd 运行方式，加载 Unit File 的路径不同。&lt;/p>
&lt;h3 id="使用---system-参数以系统实例运行-systemd">使用 &amp;ndash;system 参数，以系统实例运行 systemd&lt;/h3>
&lt;p>通过 pkg-config systemd &amp;ndash;variable=systemdsystemunitdir** &lt;strong>命令可以查看包管理器安装完程序后，生成 Unit File 的目录
通过 pkg-config systemd &amp;ndash;variable=systemdsystemconfdir&lt;/strong> **命令可以查看优先级最高的存放 Unit File 的目录&lt;/p>
&lt;ul>
&lt;li>&lt;strong>/etc/systemd/system.control&lt;/strong> # 通过 dbus API 创建的永久系统单元&lt;/li>
&lt;li>&lt;strong>/run/systemd/system.control&lt;/strong> # 通过 dbus API 创建的临时系统单元&lt;/li>
&lt;li>&lt;strong>/run/systemd/transient&lt;/strong> # 动态配置的临时单元(系统与全局用户共用)&lt;/li>
&lt;li>&lt;strong>/run/systemd/generator.early&lt;/strong> # 生成的高优先级单元(系统与全局用户共用)(参见 systemd.generator(7) 手册中对 early-dir 的说明)&lt;/li>
&lt;li>&lt;strong>/etc/systemd/system/*&lt;/strong> # 人类根据需求，手动创建的 Unit File 所在路径。且当使用 systemctl enable UNIT 命令的时候，会自动在该目录中创建软连接到 /usr/lib/systemd/system/ 目录中的 Unit File
&lt;ul>
&lt;li>./UnitFileName.d/*.conf # 嵌入式单元文件 存放路径&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>/run/systemd/system/*&lt;/strong> # 程序运行时自动生成的 Unit File 所在路径。
&lt;ul>
&lt;li>./UnitFileName.d/*.conf # 嵌入式单元文件 存放路径&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>/run/systemd/generator&lt;/strong> # 生成的中优先级系统单元(参见 systemd.generator(7) 手册中对 normal-dir 的说明)&lt;/li>
&lt;li>&lt;strong>/usr/local/lib/systemd/system&lt;/strong> # 本地软件包安装的系统单元&lt;/li>
&lt;li>&lt;strong>/usr/lib/systemd/system/*&lt;/strong> # 通过系统的包管理器安装程序时，生成的 Unit File 所在路径。
&lt;ul>
&lt;li>./UnitFileName.d/*.conf # 嵌入式单元文件 存放路径&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>/run/systemd/generator.late&lt;/strong> # 生成的低优先级系统单元(参见 systemd.generator(7) 手册中对 late-dir 的说明)&lt;/li>
&lt;/ul>
&lt;h3 id="使用---user-参数以用户实例运行-systemd">使用 &amp;ndash;user 参数，以用户实例运行 systemd&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>$XDG_CONFIG_HOME/systemd/user.control 或 ~/.config/systemd/user.control&lt;/strong> # 通过 dbus API 创建的永久私有用户单元(仅在未设置 $XDG_CONFIG_HOME 时才使用 ~/.config 来替代)&lt;/li>
&lt;li>$XDG_RUNTIME_DIR/systemd/user.control # 通过 dbus API 创建的临时私有用户单元&lt;/li>
&lt;li>/run/systemd/transient 动态配置的临时单元(系统与全局用户共用)&lt;/li>
&lt;li>/run/systemd/generator.early 生成的高优先级单元(系统与全局用户共用)(参见 systemd.generator(7) 手册中对 early-dir 的说明)&lt;/li>
&lt;li>$XDG_CONFIG_HOME/systemd/user 或 $HOME/.config/systemd/user 用户配置的私有用户单元(仅在未设置 $XDG_CONFIG_HOME 时才使用 ~/.config 来替代)&lt;/li>
&lt;li>/etc/systemd/user 本地配置的全局用户单元&lt;/li>
&lt;li>$XDG_RUNTIME_DIR/systemd/user 运行时配置的私有用户单元(仅当 $XDG_RUNTIME_DIR 已被设置时有效)&lt;/li>
&lt;li>/run/systemd/user 运行时配置的全局用户单元&lt;/li>
&lt;li>$XDG_RUNTIME_DIR/systemd/generator 生成的中优先级私有用户单元(参见 systemd.generator(7) 手册中对 normal-dir 的说明)&lt;/li>
&lt;li>$XDG_DATA_HOME/systemd/user 或 $HOME/.local/share/systemd/user 软件包安装在用户家目录中的私有用户单元(仅在未设置 $XDG_DATA_HOME 时才使用 ~/.local/share 来替代)&lt;/li>
&lt;li>$dir/systemd/user(对应 $XDG_DATA_DIRS 中的每一个目录($dir)) 额外安装的全局用户单元，对应 $XDG_DATA_DIRS(默认值=&amp;quot;/usr/local/share/:/usr/share/&amp;quot;) 中的每一个目录。&lt;/li>
&lt;li>/usr/local/lib/systemd/user 本地软件包安装的全局用户单元&lt;/li>
&lt;li>/usr/lib/systemd/user 发行版软件包安装的全局用户单元&lt;/li>
&lt;li>$XDG_RUNTIME_DIR/systemd/generator.late 生成的低优先级私有用户单元(参见 systemd.generator(7) 手册中对 late-dir 的说明)&lt;/li>
&lt;/ul>
&lt;p>可以使用环境变量来 扩充或更改 systemd 用户实例(&lt;code>--user&lt;/code>)的单元文件加载路径。 环境变量可以通过环境变量生成器(详见 &lt;a href="http://www.jinbuguo.com/systemd/systemd.environment-generator.html#">systemd.environment-generator(7)&lt;/a> 手册)来设置。特别地， &lt;code>$XDG_DATA_HOME&lt;/code> 与 &lt;code>$XDG_DATA_DIRS&lt;/code> 可以方便的通过 &lt;a href="http://www.jinbuguo.com/systemd/systemd-environment-d-generator.html#">systemd-environment-d-generator(8)&lt;/a> 来设置。这样，上表中列出的单元目录正好就是默认值。 要查看实际使用的、基于编译选项与当前环境变量的单元目录列表，可以使用 &lt;code>systemd-analyze --user unit-paths&lt;/code>&lt;/p>
&lt;p>此外，还可以通过 &lt;a href="http://www.jinbuguo.com/systemd/systemctl.html#">systemctl(1)&lt;/a> 的 &lt;strong>link&lt;/strong> 命令 向上述单元目录中添加额外的单元(不在上述常规单元目录中的单元)。&lt;/p></description></item><item><title>Docs: systemctl 命令行工具</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/3.Systemd-%E7%B3%BB%E7%BB%9F%E5%AE%88%E6%8A%A4%E7%A8%8B%E5%BA%8F/systemctl-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/3.Systemd-%E7%B3%BB%E7%BB%9F%E5%AE%88%E6%8A%A4%E7%A8%8B%E5%BA%8F/systemctl-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://man7.org/linux/man-pages/man1/systemctl.1.html">Manual(手册)，systemctl(1)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>systemctl 命令用来对整个“systemd”的系统和服务进行管理&lt;/p>
&lt;h1 id="syntax语法">Syntax(语法)&lt;/h1>
&lt;p>&lt;strong>systemctl [OPTIONS] COMMAND [UNIT&amp;hellip;]&lt;/strong>
UNIT 为 Unit 名称，如果指定了 UNIT 则只对这个 Unit 执行 COMMAND，如果不指定则对全局 Unit 进行操作&lt;/p>
&lt;h2 id="options">OPTIONS&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>-t&lt;/strong> # 对指定类型的 unit 进行操作&lt;/li>
&lt;li>&lt;strong>&amp;ndash;all&lt;/strong> #&lt;/li>
&lt;li>&lt;strong>&amp;ndash;now&lt;/strong> # 该选项可以与 enable、disable、mask 命令一起使用。
&lt;ul>
&lt;li>与 enable 命令一起使用时，将同时启动该 Unit&lt;/li>
&lt;li>与 disable 和 mask 命令一起使用时，将同时停止该 Unit、&lt;/li>
&lt;li>注意：只有当 enable 或 disable 命令成功时，才会执行启动或停止操作。加了该选项就类似于执行了 &lt;code>systemctl enable UNIT &amp;amp;&amp;amp; systemctl start UNIT&lt;/code> 命令&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="command-分类">COMMAND 分类&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="#Unit%20Command">Unit Command&lt;/a> # 对 unit 执行操作的命令&lt;/li>
&lt;li>&lt;a href="#Unit%20File%20Commands">Unit File Commands&lt;/a> # 对 Unit 文件执行操作的命令&lt;/li>
&lt;li>Machine Commands&lt;/li>
&lt;li>Job Commands&lt;/li>
&lt;li>Snapshot Commands&lt;/li>
&lt;li>Environment Commands&lt;/li>
&lt;li>&lt;a href="#Manager%20Lifecycle%20Commands">Manager Lifecycle Commands&lt;/a> # 生命周期管理器的命令&lt;/li>
&lt;li>System Commands&lt;/li>
&lt;/ul>
&lt;p>注意：OBJECT 可以使用 PATTERN(模式)来进行匹配，i.e.使用正则表达式来通过关键字查找 unit 来显示包含这些关键字的 unit 的状态&lt;/p>
&lt;h1 id="unit-command">Unit Command&lt;/h1>
&lt;h2 id="list-units">list-units&lt;/h2>
&lt;p>&lt;strong>默认命令&lt;/strong>，当 COMMAND 为空时，默认执行该命令列出已加载(已启动)的 UNIT&lt;/p>
&lt;h3 id="syntax语法-1">Syntax(语法)&lt;/h3>
&lt;p>&lt;strong>systemctl list-units [PATTERN]&lt;/strong>&lt;/p>
&lt;h3 id="example">EXAMPLE&lt;/h3>
&lt;ul>
&lt;li>systemctl -t service # 查看所有 service unit 的信息，systemctl 命令默认列出所有 unit&lt;/li>
&lt;li>systemctl list-units &amp;ndash;failed # 列出所有失败的 unit&lt;/li>
&lt;/ul>
&lt;p>list-sockets [PATTERN] List loaded sockets ordered by address&lt;/p>
&lt;p>list-timers [PATTERN] List loaded timers ordered by next elapse&lt;/p>
&lt;p>{start | stop | restart} UnitName # 立刻启动或者关闭或者重启某个 Unit&lt;/p>
&lt;h2 id="reload-name">reload NAME&lt;/h2>
&lt;p>不关闭 UNIT 的情况下重新载入配置文件，让配置生效，只重新加载.conf 类的文件&lt;/p>
&lt;p>try-restart NAME&amp;hellip; Restart one or more units if active&lt;/p>
&lt;p>reload-or-restart NAME&amp;hellip; Reload one or more units if possible, otherwise start or restart&lt;/p>
&lt;p>reload-or-try-restart NAME&amp;hellip; Reload one or more units if possible,otherwise restart if active&lt;/p>
&lt;h2 id="isolate-name">isolate NAME&lt;/h2>
&lt;p>启动一个 unit 并关闭其他的。如果指定的 Unit 没写扩展名，则默认 target。&lt;/p>
&lt;p>这个命令的作用类似于老的 init 系统中修改运行级别的效果&lt;/p>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>systemctl isolate multi-user.target # 启动 multi-user.target 这个 unit 并关闭其他(类似于切换成纯文本运行方式)&lt;/li>
&lt;li>systemctl isolate graphical.target # 类似于切换成图形模式&lt;/li>
&lt;/ul>
&lt;p>kill NAME&amp;hellip; Send signal to processes of a unit&lt;/p>
&lt;p>is-active PATTERN&amp;hellip; Check whether units are active&lt;/p>
&lt;p>is-failed PATTERN&amp;hellip; Check whether units are failed&lt;/p>
&lt;h2 id="status-patternpid">status [PATTERN|PID]&lt;/h2>
&lt;p>显示整个系统的 Unit 状态信息包括树状关联信息,如果指定了 &lt;code>[]&lt;/code> 中的内容,则显示指定 Unit 运行时的状态信息&lt;/p>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>systemctl status ssh.service # 查看 ssh.service 这个 unit 的状态
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/iqtd0r/1616167368492-74c581c3-e6a6-48e6-b6db-49e0fd799a63.jpeg" alt="">&lt;/li>
&lt;/ul>
&lt;p>show [PATTERN&amp;hellip;|JOB&amp;hellip;] Show properties of one or more units/jobs or the manager&lt;/p>
&lt;h2 id="cat-pattern">cat PATTERN&lt;/h2>
&lt;p>显示一个或多个 unit 的文件及其内容&lt;/p>
&lt;p>查看 sshd 这个服务的配置文件路径以及配置文件的内容，效果如下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># systemctl cat sshd&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># /lib/systemd/system/ssh.service&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>Unit&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Description&lt;span style="color:#f92672">=&lt;/span>OpenBSD Secure Shell server
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Documentation&lt;span style="color:#f92672">=&lt;/span>man:sshd&lt;span style="color:#f92672">(&lt;/span>8&lt;span style="color:#f92672">)&lt;/span> man:sshd_config&lt;span style="color:#f92672">(&lt;/span>5&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>After&lt;span style="color:#f92672">=&lt;/span>network.target auditd.service
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ConditionPathExists&lt;span style="color:#f92672">=&lt;/span>!/etc/ssh/sshd_not_to_be_run
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>Service&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>EnvironmentFile&lt;span style="color:#f92672">=&lt;/span>-/etc/default/ssh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ExecStartPre&lt;span style="color:#f92672">=&lt;/span>/usr/sbin/sshd -t
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ExecStart&lt;span style="color:#f92672">=&lt;/span>/usr/sbin/sshd -D $SSHD_OPTS
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ExecReload&lt;span style="color:#f92672">=&lt;/span>/usr/sbin/sshd -t
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ExecReload&lt;span style="color:#f92672">=&lt;/span>/bin/kill -HUP $MAINPID
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>KillMode&lt;span style="color:#f92672">=&lt;/span>process
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Restart&lt;span style="color:#f92672">=&lt;/span>on-failure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>RestartPreventExitStatus&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">255&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Type&lt;span style="color:#f92672">=&lt;/span>notify
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>RuntimeDirectory&lt;span style="color:#f92672">=&lt;/span>sshd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>RuntimeDirectoryMode&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0755&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>Install&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>WantedBy&lt;span style="color:#f92672">=&lt;/span>multi-user.target
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Alias&lt;span style="color:#f92672">=&lt;/span>sshd.service
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>set-property NAME ASSIGNMENT&amp;hellip; Sets one or more properties of a unit&lt;/p>
&lt;p>help PATTERN&amp;hellip;|PID&amp;hellip; Show manual for one or more units&lt;/p>
&lt;p>reset-failed [PATTERN&amp;hellip;] Reset failed state for all, one, or more units&lt;/p>
&lt;h2 id="list-dependencies">list-dependencies&lt;/h2>
&lt;p>列出服务的依赖关系，树状显示。默认列出 default.target 的依赖树，即 default.target &lt;strong>被哪些服务依赖&lt;/strong>。&lt;/p>
&lt;h3 id="syntax语法-2">Syntax(语法)&lt;/h3>
&lt;p>&lt;strong>systemctl list-dependencies [OPTIONS] [UnitName]&lt;/strong>&lt;/p>
&lt;p>可以指定 Unit，以列出该 UNIT &lt;strong>被哪些服务依赖&lt;/strong>&lt;/p>
&lt;p>&lt;strong>OPTIONS&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&amp;ndash;reverse&lt;/strong> # 反向追踪，列出该 UNIT &lt;strong>依赖于哪些服务&lt;/strong>。即该 UNIT 可以给谁提供依赖，即被谁需要，即启动哪些 UNIT 需要以这个 UNIT 启动为前提&lt;/li>
&lt;/ul>
&lt;h3 id="example-1">EXAMPLE&lt;/h3>
&lt;p>列出 sshd.service 这个 unit 可以给谁提供依赖&lt;/p>
&lt;ul>
&lt;li>systemctl list-dependencies sshd.service &amp;ndash;reverse&lt;/li>
&lt;/ul>
&lt;h1 id="unit-file-commands">Unit File Commands&lt;/h1>
&lt;h2 id="list-unit-files-pattern">list-unit-files [PATTERN&amp;hellip;]&lt;/h2>
&lt;p>列出所有已经安装的 Unit 的配置文件。（目录为/usr/lib/systemd/system/下的所有文件）&lt;/p>
&lt;h2 id="enabledisable-name">{enable|disable} NAME&lt;/h2>
&lt;p>启用或禁用一个或多个 Unit 文件&lt;/p>
&lt;p>reenable NAME&amp;hellip; Reenable one or more unit files&lt;/p>
&lt;p>preset NAME&amp;hellip; Enable/disable one or more unit files based on preset configuration&lt;/p>
&lt;p>preset-all Enable/disable all unit files based on preset configuration&lt;/p>
&lt;p>is-enabled NAME&amp;hellip; Check whether unit files are enabled&lt;/p>
&lt;p>mask NAME&amp;hellip; Mask one or more units&lt;/p>
&lt;p>unmask NAME&amp;hellip; Unmask one or more units&lt;/p>
&lt;p>link PATH&amp;hellip; Link one or more units files into the search path&lt;/p>
&lt;p>add-wants TARGET NAME&amp;hellip; Add &amp;lsquo;Wants&amp;rsquo; dependency for the target on specified one or more units&lt;/p>
&lt;p>add-requires TARGET NAME&amp;hellip; Add &amp;lsquo;Requires&amp;rsquo; dependency for the target on specified one or more units&lt;/p>
&lt;p>edit NAME&amp;hellip; Edit one or more unit files&lt;/p>
&lt;h2 id="get-default--获取-defaulttarget-的名字">get-default # 获取 default.target 的名字&lt;/h2>
&lt;p>获取引导进入的 default.target。获取的 TargetUnit 名字是(会通过符号链接的方式)default.target 的别名
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/iqtd0r/1616167368520-867ed609-6df3-41f4-8a42-48d7b7497340.jpeg" alt="">&lt;/p>
&lt;h2 id="set-default-name--设置-defaulttarget">set-default NAME # 设置 default.target&lt;/h2>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/iqtd0r/1616167368506-ab34c24b-0f8f-4a0f-8618-8d6ad5a75673.jpeg" alt="">
设置引导进入的 default.target。这个设置(会通过符号链接的方式)会用给定的 TargetUnit 给 default.target 起一个别名。相当于给一个 target 类型的 unit 建立了一个名为 default.target 的软链接&lt;/p>
&lt;ol>
&lt;li>EXAMPLE
&lt;ol>
&lt;li>systemctl set-defult graphical.target # 给 graphical.target 创建一个名为 default.target 的软连接到 /etc/systemd/system/ 目录下&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h1 id="machine-commands">Machine Commands&lt;/h1>
&lt;p>list-machines [PATTERN&amp;hellip;] List local containers and host&lt;/p>
&lt;h1 id="job-commands">Job Commands&lt;/h1>
&lt;p>list-jobs [PATTERN&amp;hellip;] List jobs&lt;/p>
&lt;p>cancel [JOB&amp;hellip;] Cancel all, one, or more jobs&lt;/p>
&lt;h1 id="snapshot-commands">Snapshot Commands&lt;/h1>
&lt;p>snapshot [NAME] Create a snapshot&lt;/p>
&lt;p>delete NAME&amp;hellip; Remove one or more snapshots&lt;/p>
&lt;h1 id="environment-commands">Environment Commands&lt;/h1>
&lt;p>show-environment Dump environment&lt;/p>
&lt;p>set-environment NAME=VALUE&amp;hellip; Set one or more environment variables&lt;/p>
&lt;p>unset-environment NAME&amp;hellip; Unset one or more environment variables&lt;/p>
&lt;p>import-environment [NAME&amp;hellip;] Import all or some environment variables&lt;/p>
&lt;h1 id="manager-lifecycle-commands">Manager Lifecycle Commands&lt;/h1>
&lt;h2 id="daemon-reload">daemon-reload&lt;/h2>
&lt;p>重新加载所有 daemon 的配置文件，包括.service 等文件一起重新加载&lt;/p>
&lt;p>daemon-reexec Reexecute systemd manager&lt;/p>
&lt;h1 id="system-commands">System Commands&lt;/h1>
&lt;p>is-system-running Check whether system is fully running&lt;/p>
&lt;p>default Enter system default mode&lt;/p>
&lt;p>rescue Enter system rescue mode&lt;/p>
&lt;p>emergency Enter system emergency mode&lt;/p>
&lt;p>halt Shut down and halt the system&lt;/p>
&lt;p>poweroff Shut down and power-off the system&lt;/p>
&lt;p>reboot [ARG] Shut down and reboot the system&lt;/p>
&lt;p>kexec Shut down and reboot the system with kexec&lt;/p>
&lt;p>exit Request user instance exit&lt;/p>
&lt;p>switch-root ROOT [INIT] Change to a different root file system&lt;/p>
&lt;p>suspend Suspend the system&lt;/p>
&lt;p>hibernate Hibernate the system&lt;/p>
&lt;p>hybrid-sleep Hibernate and suspend the system&lt;/p></description></item><item><title>Docs: Systemd 运行流程</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/3.Systemd-%E7%B3%BB%E7%BB%9F%E5%AE%88%E6%8A%A4%E7%A8%8B%E5%BA%8F/Systemd-%E8%BF%90%E8%A1%8C%E6%B5%81%E7%A8%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/3.Systemd-%E7%B3%BB%E7%BB%9F%E5%AE%88%E6%8A%A4%E7%A8%8B%E5%BA%8F/Systemd-%E8%BF%90%E8%A1%8C%E6%B5%81%E7%A8%8B/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;/blockquote>
&lt;h1 id="systemd-运行">Systemd 运行&lt;/h1>
&lt;p>这里以 CentOS 7 版本为例&lt;/p>
&lt;h3 id="确认系统运行级别">确认系统运行级别&lt;/h3>
&lt;p>systemd 执行的第一个目标是 /etc/systemd/system/default.target，是一个软链接，该文件决定了老版本称为 “运行级别” 的一种行为&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># ll /etc/systemd/system/default.target&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lrwxrwxrwx. &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">37&lt;/span> Oct &lt;span style="color:#ae81ff">10&lt;/span> &lt;span style="color:#ae81ff">2020&lt;/span> /etc/systemd/system/default.target -&amp;gt; /lib/systemd/system/multi-user.target
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果想要更改系统启动级别，可以使用 systemctl set-defult XXXXX 命令来修改默认启动级别&lt;/p>
&lt;h3 id="启动-multi-usertaget">启动 multi-user.taget&lt;/h3>
&lt;p>multi-user.target 文件内容如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># cat /usr/lib/systemd/system/multi-user.target&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>Unit&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Description&lt;span style="color:#f92672">=&lt;/span>Multi-User System
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Documentation&lt;span style="color:#f92672">=&lt;/span>man:systemd.special&lt;span style="color:#f92672">(&lt;/span>7&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Requires&lt;span style="color:#f92672">=&lt;/span>basic.target
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Conflicts&lt;span style="color:#f92672">=&lt;/span>rescue.service rescue.target
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>After&lt;span style="color:#f92672">=&lt;/span>basic.target rescue.service rescue.target
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>AllowIsolate&lt;span style="color:#f92672">=&lt;/span>yes
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>从 multi-user.target 中获取到下一步需要启动的服务。&lt;/p>
&lt;ul>
&lt;li>根据 Requires 指令，需要先启动 basic.target 关联的服务&lt;/li>
&lt;li>启动 /usr/lib/systemd/system/multi-user.target.wants/ 和 /etc/systemd/system/multi-user.target.wants/ 目录中的服务&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># ls /usr/lib/systemd/system/multi-user.target.wants/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dbus.service getty.target plymouth-quit.service plymouth-quit-wait.service systemd-ask-password-wall.path systemd-logind.service systemd-update-utmp-runlevel.service systemd-user-sessions.service
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># ls /etc/systemd/system/multi-user.target.wants/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>auditd.service chronyd.service crond.service firewalld.service irqbalance.service kdump.service NetworkManager.service remote-fs.target rhel-configure.service rsyslog.service sshd.service sysstat.service tuned.service
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="启动-basictarget">启动 basic.target&lt;/h3>
&lt;p>basic.target 文件内容如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># cat /usr/lib/systemd/system/basic.target&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>Unit&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Description&lt;span style="color:#f92672">=&lt;/span>Basic System
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Documentation&lt;span style="color:#f92672">=&lt;/span>man:systemd.special&lt;span style="color:#f92672">(&lt;/span>7&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Requires&lt;span style="color:#f92672">=&lt;/span>sysinit.target
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>After&lt;span style="color:#f92672">=&lt;/span>sysinit.target
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Wants&lt;span style="color:#f92672">=&lt;/span>sockets.target timers.target paths.target slices.target
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>After&lt;span style="color:#f92672">=&lt;/span>sockets.target paths.target slices.target
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>从 basic.target 中获取下一步需要启动的服务。&lt;/p>
&lt;ul>
&lt;li>根据 Requires 指令，需要先启动 sysinit.target 关联的服务。&lt;/li>
&lt;li>根据 Wants 和 After 指令，启动 sockets.target、timers.target、paths.target、slices.target 下关联的服务&lt;/li>
&lt;li>启动 /etc/systemd/system/basic.target.wants/ 和 /usr/lib/systemd/system/basic.target.wants/ 目录中的服务。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># ls /etc/systemd/system/basic.target.wants/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>microcode.service rhel-dmesg.service
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># ls /usr/lib/systemd/system/basic.target.wants/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>selinux-policy-migrate-local-changes@targeted.service
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="启动-sysinittarget">启动 sysinit.target&lt;/h3>
&lt;p>sysinit.target 文件内容如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># cat /usr/lib/systemd/system/sysinit.target&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>Unit&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Description&lt;span style="color:#f92672">=&lt;/span>System Initialization
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Documentation&lt;span style="color:#f92672">=&lt;/span>man:systemd.special&lt;span style="color:#f92672">(&lt;/span>7&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Conflicts&lt;span style="color:#f92672">=&lt;/span>emergency.service emergency.target
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Wants&lt;span style="color:#f92672">=&lt;/span>local-fs.target swap.target
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>After&lt;span style="color:#f92672">=&lt;/span>local-fs.target swap.target emergency.service emergency.target
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>此时没有 Requires 指令了，也就是从该 Unit 开始，同时启动上述所有已经关联到的服务。sysinit.target 会启动重要的系统服务例如系统挂载，内存交换空间和设备，内核补充选项等等。&lt;/p>
&lt;p>sysinit.target 将会启动如下服务&lt;/p>
&lt;ul>
&lt;li>loacl-fs.target 关联服务&lt;/li>
&lt;li>swap.target 关联服务&lt;/li>
&lt;li>emergency.service 服务 和 emergency.target 关联服务&lt;/li>
&lt;li>/etc/systemd/system/sysinit.target.wants/ 与 /usr/lib/systemd/system/sysinit.target.wants/ 目录中的服务&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># ls /etc/systemd/system/sysinit.target.wants/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lvm2-lvmetad.socket lvm2-lvmpolld.socket lvm2-monitor.service rhel-autorelabel-mark.service rhel-autorelabel.service rhel-domainname.service rhel-import-state.service rhel-loadmodules.service
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># ls /usr/lib/systemd/system/sysinit.target.wants/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cryptsetup.target plymouth-read-write.service sys-kernel-config.mount systemd-firstboot.service systemd-journal-flush.service systemd-sysctl.service systemd-udev-trigger.service
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dev-hugepages.mount plymouth-start.service sys-kernel-debug.mount systemd-hwdb-update.service systemd-machine-id-commit.service systemd-tmpfiles-setup-dev.service systemd-update-done.service
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dev-mqueue.mount proc-sys-fs-binfmt_misc.automount systemd-ask-password-console.path systemd-journal-catalog-update.service systemd-modules-load.service systemd-tmpfiles-setup.service systemd-update-utmp.service
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kmod-static-nodes.service sys-fs-fuse-connections.mount systemd-binfmt.service systemd-journald.service systemd-random-seed.service systemd-udevd.service systemd-vconsole-setup.service
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="启动-local-fstarget-与-swaptarget-关联服务">启动 local-fs.target 与 swap.target 关联服务&lt;/h3>
&lt;p>local-fs.target 文件内容如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># cat /usr/lib/systemd/system/local-fs.target&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>Unit&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Description&lt;span style="color:#f92672">=&lt;/span>Local File Systems
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Documentation&lt;span style="color:#f92672">=&lt;/span>man:systemd.special&lt;span style="color:#f92672">(&lt;/span>7&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>DefaultDependencies&lt;span style="color:#f92672">=&lt;/span>no
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Conflicts&lt;span style="color:#f92672">=&lt;/span>shutdown.target
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>After&lt;span style="color:#f92672">=&lt;/span>local-fs-pre.target
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>OnFailure&lt;span style="color:#f92672">=&lt;/span>emergency.target
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>OnFailureJobMode&lt;span style="color:#f92672">=&lt;/span>replace-irreversibly
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>local-fs.target 不会启动用户相关服务，它只处理底层核心服务，这个 target 会根据 /etc/fstab 来执行相关磁盘挂载操作。它通过如下一个目录决定哪些 Unit 会被启动。&lt;/p>
&lt;ul>
&lt;li>/usr/lib/systemd/system/local-fs.target.wants/&lt;/li>
&lt;/ul>
&lt;p>swap.target 文件内容如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># cat /usr/lib/systemd/system/swap.target&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>Unit&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Description&lt;span style="color:#f92672">=&lt;/span>Swap
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Documentation&lt;span style="color:#f92672">=&lt;/span>man:systemd.special&lt;span style="color:#f92672">(&lt;/span>7&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="总结">总结&lt;/h2>
&lt;p>虽然 systemd 的引用 target 的顺序如上，但是真正的启动顺序为从下到上，所以可以通过设置 default.target 文件来确定开机后默认的登录级别。其中管理单元可以并行启动，从而使效率大大提高。同时 Systemd 是向下兼容 System V 的。&lt;/p>
&lt;p>具体顺序应该如下：&lt;/p>
&lt;ul>
&lt;li>**local-s.target + swap.target **# 这两个 target 主要在挂载本机 /etc/fstab 里面所规范的文件系统与相关的内存交换空间。&lt;/li>
&lt;li>&lt;strong>sysinit.target&lt;/strong> # 这个 target 主要在侦测硬件,载入所需要的核心模块等动作。核心所侦测到的各硬件设备，会被记录在 /proc/ 与 /sys/ 目录中，内核参数的修改详见 sysctl 命令。该 target 包括但不限于以下 Unit，详见/usr/lib/systemd/system/sysinit.target.wants/目录
&lt;ul>
&lt;li>特殊文件系统装置的挂载：包括 dev-hugepages.mount、dev-mqueue.mount 等，主要在挂载跟巨量内存分页使用与消息队列的功能。成功后，会在/dev/目录下简历/dev/hugepages/、/dev/mqueue/等目录&lt;/li>
&lt;li>特殊文件系统的启动：包括磁盘阵列、网络驱动器(iscsi)、LVM 文件系统、文件系统对照服务(multipath)等等&lt;/li>
&lt;li>开机过程的讯息传递与动画执行：使用 plymouthd 服务搭配 plymouth 指令来传递动画与讯息&lt;/li>
&lt;li>日志式登录文件的使用：systemd-journald&lt;/li>
&lt;li>加载额外的内核模块：通过 /etc/modules-load.d/*.conf 文件的设定，让内核额外加载管理员所需要的内核模块&lt;/li>
&lt;li>加载额外的内核参数设定：包括 /etc/sysctl.conf 以及 /etc/sysctl.d/*.conf 内的设定&lt;/li>
&lt;li>启动系统的随机数生成器：随机数生成器可以帮助系统进行一些密码加密演算的功能&lt;/li>
&lt;li>设定终端(console)字形&lt;/li>
&lt;li>启动动态设备管理器：udevd。用来动态对应实际设备存取与设备文件名对应的一个服务&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>basic.target&lt;/strong> # 载入主要的周边硬件驱动程序与防火墙相关任务。该 target 包括但不限于以下 Unit，详见/usr/lib/systemd/system/basic.target.wants/目录
&lt;ul>
&lt;li>加载 alsa 音效驱动程序：这个 alsa 是个音效相关的驱动程序，会系统产生音效&lt;/li>
&lt;li>载入 firewalld 防火墙&lt;/li>
&lt;li>加载 CPU 微指令功能&lt;/li>
&lt;li>启动与设定 SELinux 的安全文本&lt;/li>
&lt;li>将目前的开机过程所产生的开机信息写入到/var/log/dmesg 当中&lt;/li>
&lt;li>由/etc/sysconfig/module/*.module 以及/etc/rcmodules 载入管理员指定的模块&lt;/li>
&lt;li>加载 systemd 支持的 timer 功能&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>multi-user.target&lt;/strong> # 下面的其它一般系统或网络服务的载入。在加载核心驱动硬件后,经过 sysinit.target 的初始化流程让系统可以存取之后,加上 basic.target 让系统成为操作系统的基础, 之后就是服务器要顺利运作时,需要的各种主机服务以及提供服务器功能的网络服务的启动了。这些服务的启动则大多是附挂在 multi-user.target 这个操作环境底下, 可以到 /etc/systemd/system/multi-user.target.wants/ 里头去瞧瞧预设要被启动的服务。针对主机的本地服务与网络服务的各项 Unit 若要 enable 的话，就是将该 Unit 放到这个目录下做个软链接。该 target 包括但不限于以下 Unit，详见 /usr/lib/systemd/system/multi-user.target.wants/ 目录
&lt;ul>
&lt;li>相容 systemV 的 rc-loacl.service，开机自动执行的命令&lt;/li>
&lt;li>提供 tty(终端)界面与登录的服务&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="查看启动顺序的时间">查看启动顺序的时间&lt;/h3>
&lt;ul>
&lt;li>要查看具体的启动顺序可以通过如下命令输入到文件，然后通过浏览器打开查看。
&lt;ul>
&lt;li>systemd-analyze plot &amp;gt; boot.html&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>列出所有正在运行的单元，按从初始化开始到启动所花的时间排序。
&lt;ul>
&lt;li>systemd-analyze blame&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>也就是说，如果想让一个 systemd 的系统正常运行，则通过 default.target 来一步一步决定运行那些 Unit，最后从决定的末尾开始，一步一步启动各个 Unit，如图所示：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/az9p3g/1616634160644-69ffd65b-b9c4-490b-aad8-77e8e218bb02.jpeg" alt="">&lt;/p></description></item><item><title>Docs: Unit File</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/3.Systemd-%E7%B3%BB%E7%BB%9F%E5%AE%88%E6%8A%A4%E7%A8%8B%E5%BA%8F/Unit-File/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/3.Systemd-%E7%B3%BB%E7%BB%9F%E5%AE%88%E6%8A%A4%E7%A8%8B%E5%BA%8F/Unit-File/</guid><description/></item></channel></rss>