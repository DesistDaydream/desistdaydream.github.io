<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Operator 开发 on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E5%BC%80%E5%8F%91/Operator-%E5%BC%80%E5%8F%91/</link><description>Recent content in Operator 开发 on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E5%BC%80%E5%8F%91/Operator-%E5%BC%80%E5%8F%91/index.xml" rel="self" type="application/rss+xml"/><item><title>Kubebuilder</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E5%BC%80%E5%8F%91/Operator-%E5%BC%80%E5%8F%91/Kubebuilder/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E5%BC%80%E5%8F%91/Operator-%E5%BC%80%E5%8F%91/Kubebuilder/</guid><description>概述 参考：
Kubebuilder 代码示例详见 GitHub 上我的 kubernetesAPI 仓库
kubebuilder 命令行工具 用于构建 Kubernetes 扩展和工具的开发工具包。 提供用于创建新项目，API 和控制器的库和工具。 包括用于将工件打包到安装程序容器中的工具。
典型的项目生命周期：
初始化项目：
kubebuilder init &amp;ndash;domain example.com &amp;ndash;license apache2 &amp;ndash;owner &amp;ldquo;The Kubernetes authors&amp;rdquo; 创建一个或多个新资源 API 并将代码添加到其中：
kubebuilder create api &amp;ndash;group &amp;lt;group&amp;gt; &amp;ndash;version &amp;lt;version&amp;gt; &amp;ndash;kind &amp;lt;Kind&amp;gt; Create resource will prompt the user for if it should scaffold the Resource and / or Controller. To only scaffold a Controller for an existing Resource, select &amp;ldquo;n&amp;rdquo; for Resource. To only define the schema for a Resource without writing a Controller, select &amp;ldquo;n&amp;rdquo; for Controller.</description></item><item><title>初识 Operator</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E5%BC%80%E5%8F%91/Operator-%E5%BC%80%E5%8F%91/%E5%88%9D%E8%AF%86-Operator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E5%BC%80%E5%8F%91/Operator-%E5%BC%80%E5%8F%91/%E5%88%9D%E8%AF%86-Operator/</guid><description>Kubebuilder 代码示例详见 GitHub 上我的 kubernetesAPI 仓库
本文我们将首先了解到 Operator 是什么，之后逐步了解到 Operator 的生态建设，Operator 的关键组件及其基本的工作原理。
介绍 基于 Kubernetes 平台，我们可以轻松的搭建一些简单的无状态应用，比如对于一些常见的 web apps 或是移动端后台程序，开发者甚至不用十分了解 Kubernetes 就可以利用 Deployment，Service 这些基本单元模型构建出自己的应用拓扑并暴露相应的服务。由于无状态应用的特性支持其在任意时刻进行部署、迁移、升级等操作，Kubernetes 现有的 ReplicaSets、Deployment、Services 等资源对象已经足够支撑起无状态应用对于自动扩缩容、实例间负载均衡等基本需求。
在管理简单的有状态应用时，我们可以利用社区原生的 StatefulSet 和 PV 模型来构建基础的应用拓扑，帮助实现相应的持久化存储，按顺序部署、顺序扩容、顺序滚动更新等特性。
而随着 Kubernetes 的蓬勃发展，在数据分析，机器学习等领域相继出现了一些场景更为复杂的分布式应用系统，也给社区和相关应用的开发运维人员提出了新的挑战：
不同场景下的分布式系统中通常维护了一套自身的模型定义规范，如何在 Kubernetes 平台中表达或兼容出应用原先的模型定义？
当应用系统发生扩缩容或升级时，如何保证当前已有实例服务的可用性？如何保证它们之间的可连通性？
如何去重新配置或定义复杂的分布式应用？是否需要大量的专业模板定义和复杂的命令操作？是否可以向无状态应用那样用一条 kubectl 命令就完成应用的更新？
如何备份和管理系统状态和应用数据？如何协调系统集群各成员间在不同生命周期的应用状态？
而所有的这些正是 Operator 希望解决的问题，本文我们将首先了解到 Operator 是什么，之后逐步了解到 Operator 的生态建设，Operator 的关键组件及其基本的工作原理，下面让我们来一探究竟吧。
初识 Operator 首先让我们一起来看下什么是 Operator 以及它的诞生和发展历程。
1. 什么是 Operator CoreOS 在 2016 年底提出了 Operator 的概念，当时的一段官方定义如下：
“An Operator represents human operational knowledge in software, to reliably manage an application.</description></item><item><title>深入理解Kubernetes Operator</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E5%BC%80%E5%8F%91/Operator-%E5%BC%80%E5%8F%91/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kubernetes-Operator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E5%BC%80%E5%8F%91/Operator-%E5%BC%80%E5%8F%91/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kubernetes-Operator/</guid><description>James Laverack InfoQ 11 月 18 日
作者 | James Laverack 译者 | 王者本文要点：
Kubernetes API 为所有云资源提供了单个集成点，以此来促进云原生技术的采用。
有一些框架和库可以用来简化 Operator 的编写。支持多种语言，其中 Go 生态系统是最为成熟的。
你可以为非自有的软件创建 Operator。DevOps 团队可能会通过这种方式来管理数据库或其他外部产品。
难点不在于 Operator 本身，而是要学会理解它的行为。
多年来，Operator 一直是 Kubernetes 生态系统的重要组成部分。通过将管理界面移动到 Kubneretes API 中，带来了“单层玻璃”的体验。对于希望简化 kuberentes 原生应用程序的开发人员或者希望降低现有系统复杂性的 DevOps 工程师来说，Operator 可能是一个非常有吸引力的选择。但如何从头开始创建一个 Operator 呢？
深入理解 OperatorOperator 是什么？
如今，Operator 无处不在。数据库、云原生项目、任何需要在 Kubernetes 上部署或维护的复杂项目都用到了 Operator。CoreOS 在 2016 年首次引入了 Operator，将运维关注点转移到软件系统中。Operator 自动执行操作，例如，Operator 可以部署数据库实例、升级数据库版本或执行备份。然后，这些系统可以被测试，响应速度比人类工程师更快。
Operator 还通过使用自定义资源定义对 Kubenretes API 进行了扩展，将工具配置转移到了 API 中。这意味着 Kubenretes 本身就变成了“单层玻璃”。DevOps 工程师可以利用围绕 Kubernetes API 资源而构建的工具生态系统来管理和监控他们部署的应用程序：</description></item></channel></rss>