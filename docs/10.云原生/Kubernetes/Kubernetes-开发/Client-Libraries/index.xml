<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Client Libraries on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E5%BC%80%E5%8F%91/Client-Libraries/</link><description>Recent content in Client Libraries on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E5%BC%80%E5%8F%91/Client-Libraries/index.xml" rel="self" type="application/rss+xml"/><item><title>Client Libraries</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E5%BC%80%E5%8F%91/Client-Libraries/Client-Libraries/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E5%BC%80%E5%8F%91/Client-Libraries/Client-Libraries/</guid><description>概述 参考：
官方文档，参考 - 使用 API - 客户端库 Client Libraries(客户端库) 是各种编程语言的第三方库的统称。这些库可以用来让各种编程语言通过代码的方式访问 Kubernetes API。在使用这些库编写代码时，并不需要自己实现对 Kubernetes API 的调用和 处理 Request/Response，这些处理逻辑都在 Client Libraries 中包括了。客户端库还会处理诸如身份验证之类的行为。
如果代码在 Kubernetes 集群中运行，代码中的 Client Libraires 可以发现并使用 Kubernetes 的 ServiceAccount 进行身份验证。
如果代码在 Kubernetes 集群外运行，代码中的 Client Libraires 能够理解 KubeConfig 格式来读取凭据和 API 服务器地址。
Kubernetes 现阶段官方支持 Go、Python、Java、 dotnet、Javascript 和 Haskell 语言的客户端库。还有一些其他客户端库由对应作者而非 Kubernetes 团队提供并维护。 参考客户端库了解如何使用其他语言 来访问 API 以及如何执行身份认证。
Go Client</description></item><item><title>client-go连接K8s集群进行pod的增删改查</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E5%BC%80%E5%8F%91/Client-Libraries/client-go%E8%BF%9E%E6%8E%A5K8s%E9%9B%86%E7%BE%A4%E8%BF%9B%E8%A1%8Cpod%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E5%BC%80%E5%8F%91/Client-Libraries/client-go%E8%BF%9E%E6%8E%A5K8s%E9%9B%86%E7%BE%A4%E8%BF%9B%E8%A1%8Cpod%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</guid><description>背景 最近在看client-go源码最基础的部分，client-go的四类客户端，RestClient、ClientSet、DynamicClient、DiscoveryClient。其中RestClient是最基础的客户端，它对Http进行了封装，支持JSON和protobuf格式数据。其它三类客户端都是通过在RestClient基础上再次封装而得来。不过我对ClientSet和DynamicClient傻傻分不清，虽然很多资料上说它两最大区别是，ClientSet能够使用预先生成的Api和ApiServer进行通信；而DynamicClient更加强大，不仅仅能够调用预先生成的Api，还能够对一些CRD资源通过结构化嵌套类型跟ApiServer进行通信。意思大致明白前者能够调用Kubernetes本地资源类型，后者还可以调用一些自定资源，那么他们究竟是如何跟ApiServer进行交互、Pod的增删改查呢？本文通过分析ClientSet代码和client-go客户端调用Kubernetes集群的方式来演示下整个交互过程。
准备工作 已经安装Kubernetes集群和配置本地IDE环境
根据kubernetes集群版本选择clone client-go到本地：https://github.com/kubernetes/client-go/tree/release-14.0。 导入到IDE。 运行 examples/create-update-delete-deployment/main.go 正常情况下会提示如下错误： panic: CreateFile C:\Users\shj\.kube\config: The system cannot find the path spe cified. 错误信息提示很清楚，没有找到本地文件夹下的config文件，处理方式也很简单，只需要把你Kubernetes集群中$HOME/.kube/config复制到本地即可；仔细阅读代码可以发现，也可以通过自行配置客户端连接信息（生产环境慎用）。
4、运行 main 函数即可进行 Pod 增删改查操作。
client-go 连接 ApiServer 进行 Pod 的增删改查 获取APIserver连接地址、认证配置等信息 var kubeconfig *string //获取当前用户home文件夹，并获取kubeconfig配置 if home := homedir.HomeDir(); home != &amp;#34;&amp;#34; { kubeconfig = flag.String(&amp;#34;kubeconfig&amp;#34;, filepath.Join(home, &amp;#34;.kube&amp;#34;, &amp;#34;config&amp;#34;), &amp;#34;(optional) absolute path to the kubeconfig file&amp;#34;) } else {//如果没有获取到，则需要自行配置kubeconfig kubeconfig = flag.String(&amp;#34;kubeconfig&amp;#34;, &amp;#34;&amp;#34;, &amp;#34;absolute path to the kubeconfig file&amp;#34;) } //把用户传递的命令行参数，解析为响应变量的值 flag.</description></item><item><title>Go Client</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E5%BC%80%E5%8F%91/Client-Libraries/Go-Client/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E5%BC%80%E5%8F%91/Client-Libraries/Go-Client/</guid><description>概述 参考：
GitHub 项目，kubernetes/client-go Danielhu 博客 公众号-KubeSphere 云原生，Client-go 源码分析之 SharedInformer Go Client 就是 Kubernetes 针对 Go 编程语言 而言的 Client Library。Go Client 项目名称为 client-go，是用来与 Kubernetes 对话的 Go 编程语言 的第三方库。
安装 client-go 版本控制策略：k8s 版本 1.18.8 对应 client-go 版本 0.18.8，其他版本以此类推。
使用前注意事项： 使用 client-go 之前，需要手动获取对应版本的的 client-go 库。
如果使用的 Kubernetes 版本&amp;gt; = v1.17.0，请使用相应的 v0.x.y标签。例如，k8s.io/client-go@v0.17.0对应于 Kubernetes v1.17.0
根据版本控制策略，使用如下命令进行初始化:
# 初始化项目 go mod init github.com/DesistDaydream/kubernetes-development # 为 go.mod 文件添加 require k8s.io/client-go v0.19.2 // indirect 信息 go get k8s.</description></item><item><title>使用 Go 构建 Kubernetes 应用</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E5%BC%80%E5%8F%91/Client-Libraries/%E4%BD%BF%E7%94%A8-Go-%E6%9E%84%E5%BB%BA-Kubernetes-%E5%BA%94%E7%94%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E5%BC%80%E5%8F%91/Client-Libraries/%E4%BD%BF%E7%94%A8-Go-%E6%9E%84%E5%BB%BA-Kubernetes-%E5%BA%94%E7%94%A8/</guid><description>使用 Go 构建 Kubernetes 应用
Kubernetes 项目使用 Go 语言编写，对 Go api 原生支持非常便捷。本篇文章介绍了如何使用 kubernetes client-go 实践一个简单的与 K8s 交互过程。
kubernetes 的 Go Client 项目（client-go） go client 是 k8s client 中最古老的一个，具有很多特性。Client-go 没有使用 Swagger 生成器，它使用的是源于 k8s 项目中的源代码生成工具，这个工具的目的是要生成 k8s 风格的对象和序列化程序。
该项目是一组包的集合，该包能够满足从 REST 风格的原语到复杂 client 的不同的编程需求。
RESTClient 是一个基础包，它使用api-machinery库中的类型作为一组 REST 原语提供对 API 的访问。作为对RESTClient之上的抽象，_clientset_将是你创建 k8s client 工具的起点。它暴露了公开化的 API 资源及其对应的序列化。
注意：在 client-go 中还包含了如 discovery, dynamic, 和 scale 这样的包，虽然本次不介绍这些包，但是了解它们的能力还是很重要的。
一个简单的 k8s client 工具 让我们再次回顾我们将要构建的工具，来说明 go client 的用法。pvcwatch是一个简单的命令行工具，它可以监听集群中声明的 PVC 容量。当总数到达一个阈值的时候，他会采取一个 action（在这个例子中是在屏幕上通知显示）</description></item><item><title>在不生成 crd client 代码的情况下通过 client-go 增删改查 k8s crd 资源</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E5%BC%80%E5%8F%91/Client-Libraries/%E5%9C%A8%E4%B8%8D%E7%94%9F%E6%88%90-crd-client-%E4%BB%A3%E7%A0%81%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E9%80%9A%E8%BF%87-client-go-%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5-k8s-crd-%E8%B5%84%E6%BA%90/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E5%BC%80%E5%8F%91/Client-Libraries/%E5%9C%A8%E4%B8%8D%E7%94%9F%E6%88%90-crd-client-%E4%BB%A3%E7%A0%81%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E9%80%9A%E8%BF%87-client-go-%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5-k8s-crd-%E8%B5%84%E6%BA%90/</guid><description>原文链接：https://mozillazg.com/2020/07/k8s-kubernetes-client-go-list-get-create-update-patch-delete-crd-resource-without-generate-client-code-update-or-create-via-yaml.html 2020-07-19
k8s k8s / kubernetes / crd / client-go
前言¶ 示例 CRD¶ list 资源¶ get 资源¶ create 资源¶ update 资源¶ patch 资源¶ delete 资源¶ 总结¶ 参考资料¶ 前言 一般情况下管理 crd 资源都是通过由 code-generator 生成的 crd client 来操作，但是有时也会有只想简单的操作一下资源不想去导入或生成 crd client 相关代码的需求，这里简单的记录一下在不生成 crd client 代码的情况下通过 client-go 增删改查 k8s crd 资源的方法。
示例 CRD 先来定义一个测试用的 CRD （其实已有的 Pod 之类的也是可以的，没啥特别的不一定要自定义 CRD，这里只是展示这个能力，因为一般如果是内置的资源的话，直接用内置的 client 和内置的资源 struct 就可以了）（这个 crd 来自 官方文档 ）：
apiVersion: apiextensions.k8s.io/v1 kind: CustomResourceDefinition metadata: # name must match the spec fields below, and be in the form: &amp;lt;plural&amp;gt;.</description></item></channel></rss>