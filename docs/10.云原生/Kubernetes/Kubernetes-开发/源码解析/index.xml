<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>源码解析 on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E5%BC%80%E5%8F%91/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</link><description>Recent content in 源码解析 on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E5%BC%80%E5%8F%91/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/index.xml" rel="self" type="application/rss+xml"/><item><title>API 源码</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E5%BC%80%E5%8F%91/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/API-%E6%BA%90%E7%A0%81/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E5%BC%80%E5%8F%91/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/API-%E6%BA%90%E7%A0%81/</guid><description>概述 参考：
公众号-云原生实验室，深入 Kubernetes API 的源码实现 Kubernetes API 代码在 k8s.io/api 仓库中，该仓库的代码来源于 https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/api 这个核心仓库的目录中。
在 k8s.io/api 仓库定义的 kubernetes API 规范中，Pod 作为最基础的资源类型，一个典型的 YAML 形式的序列化 pod 对象如下所示：
apiVersion: v1 kind: Pod metadata: name: webserver labels: app: webserver spec: containers: - name: webserver image: nginx ports: - containerPort: 80 从编程的角度来看，序列化的 pod 对象最终会被发送到 API-Server 并解码为 Pod 类型的 Go 结构体，同时 YAML 中的各个字段会被赋值给该 Go 结构体。那么，Pod 类型在 Go 语言结构体中是怎么定义的呢？
// source code from https://github.com/kubernetes/api/blob/master/core/v1/types.go type Pod struct { // 从TypeMeta字段名可以看出该字段定义Pod类型的元信息，类似于面向对象编程里面 // Class本身的元信息，类似于Pod类型的API分组、API版本等 metav1.</description></item><item><title>Kubeadm 源码</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E5%BC%80%E5%8F%91/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/Kubeadm-%E6%BA%90%E7%A0%81/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E5%BC%80%E5%8F%91/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/Kubeadm-%E6%BA%90%E7%A0%81/</guid><description>概述 参考：
kubeadm 源码在 Kubernetes 中，位置：kubernetes/kubernetes/cmd/kubeadm，本文以 1.19 版本为例
目录结构 $ tree -L 4 -d . ├── app │ ├── apis │ │ ├── kubeadm │ │ │ ├── fuzzer │ │ │ ├── scheme │ │ │ ├── v1beta1 │ │ │ ├── v1beta2 │ │ │ └── validation │ │ └── output │ │ ├── fuzzer │ │ ├── scheme │ │ └── v1alpha1 │ ├── cmd │ │ ├── alpha │ │ ├── options │ │ ├── phases │ │ │ ├── init │ │ │ ├── join │ │ │ ├── reset │ │ │ ├── upgrade │ │ │ │ └── node │ │ │ └── workflow │ │ ├── upgrade │ │ └── util │ ├── componentconfigs │ ├── constants │ ├── discovery │ │ ├── file │ │ ├── https │ │ └── token │ ├── features │ ├── images │ ├── phases │ │ ├── addons │ │ │ ├── dns │ │ │ └── proxy │ │ ├── bootstraptoken │ │ │ ├── clusterinfo │ │ │ └── node │ │ ├── certs │ │ │ └── renewal │ │ ├── controlplane │ │ ├── copycerts │ │ ├── etcd │ │ ├── kubeconfig │ │ ├── kubelet │ │ ├── markcontrolplane │ │ ├── patchnode │ │ ├── selfhosting │ │ ├── upgrade │ │ └── uploadconfig │ ├── preflight │ └── util │ ├── apiclient │ ├── audit │ ├── certs │ ├── config │ │ └── strict │ │ └── testdata │ ├── crypto │ ├── dryrun │ ├── etcd │ ├── image │ ├── initsystem │ ├── kubeconfig │ ├── kustomize │ ├── output │ ├── patches │ ├── pkiutil │ ├── pubkeypin │ ├── runtime │ └── staticpod └── test ├── cmd │ └── testdata │ └── init ├── kubeconfig └── resources kubeadm 是基于 cobra 框架的命令行工具，入口是 cmd/kubeadm/kubeadm.</description></item><item><title>kubectl port-forward 工作原理</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E5%BC%80%E5%8F%91/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/kubectl-port-forward-%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E5%BC%80%E5%8F%91/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/kubectl-port-forward-%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</guid><description>原文链接：公众号-CNCF，源码解析 kubectl port-forward 工作原理
本文的源码基于 Kubernetes v1.24.0，容器运行时使用 Containerd 1.5，从源码来分析 kubectl port-forward 的工作原理。
通过 port-forward 流程的分析，梳理出 kubectl -&amp;gt; api-server -&amp;gt; kubelet -&amp;gt; 容器运行时 的交互，了解 cri 的工作方式。
kubectl 简单创建个 pod：
kubectl run pipy --image flomesh/pipy:latest -n default
在执行 kubectl forward 时添加参数 -v 9 打印日志。
kubectl port-forward pipy 8080 -v 9 ... I0807 21:45:58.457986 14495 round_trippers.go:466] curl -v -XPOST -H &amp;#34;User-Agent: kubectl/v1.24.3 (darwin/arm64) kubernetes/aef86a9&amp;#34; -H &amp;#34;X-Stream-Protocol-Version: portforward.k8s.io&amp;#34; &amp;#39;https://192.168.1.12:6443/api/v1/namespaces/default/pods/pipy/portforward&amp;#39; I0807 21:45:58.484013 14495 round_trippers.go:553] POST https://192.</description></item><item><title>源码解析</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E5%BC%80%E5%8F%91/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E5%BC%80%E5%8F%91/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</guid><description>概述 参考：
GitHub 项目，kubernetes/kubernetes GitHub 项目，kubernetes/design-proposals-archive(K8S 早期设计方案) GitHub 项目，kubernetes/enhancements(K8S 当前设计方案) 田飞雨博客-这位大佬阅读了大部分 k8s 代码，并在博客中写了笔记 kubernetes 源码目录结构 更新日期：2022 年 2 月 23 日 Kubernetes 的源码目录随着更新迭代，也在不断变化中
$ tree -L 1 -p . ├── [-rwxrwxrwx] BUILD.bazel ├── [drwxrwxrwx] CHANGELOG ├── [-rwxrwxrwx] CHANGELOG.md ├── [-rwxrwxrwx] CONTRIBUTING.md ├── [-rwxrwxrwx] LICENSE ├── [drwxrwxrwx] LICENSES ├── [-rwxrwxrwx] Makefile ├── [-rwxrwxrwx] Makefile.generated_files ├── [-rwxrwxrwx] OWNERS ├── [-rwxrwxrwx] OWNERS_ALIASES ├── [-rwxrwxrwx] README.md ├── [-rwxrwxrwx] SECURITY_CONTACTS ├── [-rwxrwxrwx] SUPPORT.md ├── [-rwxrwxrwx] WORKSPACE ├── [drwxrwxrwx] api ├── [drwxrwxrwx] build ├── [drwxrwxrwx] cluster ├── [drwxrwxrwx] cmd ├── [-rwxrwxrwx] code-of-conduct.</description></item></channel></rss>