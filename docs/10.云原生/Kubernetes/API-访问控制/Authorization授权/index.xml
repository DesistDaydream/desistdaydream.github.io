<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Authorization(授权) on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/API-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/Authorization%E6%8E%88%E6%9D%83/</link><description>Recent content in Authorization(授权) on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/API-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/Authorization%E6%8E%88%E6%9D%83/index.xml" rel="self" type="application/rss+xml"/><item><title>Authorization(授权)</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/API-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/Authorization%E6%8E%88%E6%9D%83/Authorization%E6%8E%88%E6%9D%83/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/API-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/Authorization%E6%8E%88%E6%9D%83/Authorization%E6%8E%88%E6%9D%83/</guid><description>概述 参考：
官方文档，参考 - API 访问控制 - 授权 在 Kubernetes 中，在 Authorization(i.e.授予访问权限，简称：授权) 之前必须进行过 Authentication(认证)
授权流程 确定是允许还是拒绝请求 Kubernetes 使用 API 服务器授权 API 请求。它根据所有策略评估所有请求属性来决定允许或拒绝请求。 一个 API 请求的所有部分必须被某些策略允许才能继续。这意味着默认情况下拒绝权限。
（尽管 Kubernetes 使用 API 服务器，但是依赖于特定种类对象的特定字段的访问控制和策略由准入控制器处理。）
配置多个授权模块时，将按顺序检查每个模块。 如果任何授权模块批准或拒绝请求，则立即返回该决定，并且不会与其他授权模块协商。 如果所有模块对请求没有意见，则拒绝该请求。一个拒绝响应返回 HTTP 状态代码 403 。
审查您的请求属性 Kubernetes 仅审查以下 API 请求属性：
user - 身份验证期间提供的 user 字符串。 group - 经过身份验证的用户所属的组名列表。 extra - 由身份验证层提供的任意字符串键到字符串值的映射。 API - 指示请求是否针对 API 资源。 Request path - 各种非资源端点的路径，如 /api 或 /healthz。 API request verb - API 动词 get，list，create，update，patch，watch，proxy，redirect，delete 和 deletecollection 用于资源请求。要确定资源 API 端点的请求动词，请参阅确定请求动词。 HTTP request verb - HTTP 动词 get，post，put 和 delete 用于非资源请求。 Resource - 正在访问的资源的 ID 或名称（仅限资源请求） - 对于使用 get，update，patch 和 delete 动词的资源请求，您必须提供资源名称。 Subresource - 正在访问的子资源（仅限资源请求）。 Namespace - 正在访问的对象的名称空间（仅适用于命名空间资源请求）。 API group - 正在访问的 API 组（仅限资源请求）。空字符串表示核心 API 组。 确定请求动词 要确定资源 API 端点的请求动词，需要检查所使用的 HTTP 动词以及请求是否对单个资源或资源集合起作用：</description></item><item><title>RBAC 授权</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/API-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/Authorization%E6%8E%88%E6%9D%83/RBAC-%E6%8E%88%E6%9D%83/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/API-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/Authorization%E6%8E%88%E6%9D%83/RBAC-%E6%8E%88%E6%9D%83/</guid><description>概述 参考：
官方文档，参考 - API 访问控制 - 使用 RBAC 授权 RBAC 概念 基于 Role(角色) 的访问控制(RBAC) 是一种根据各个用户的角色来控制对 Kubernetes 内资源的访问权限的方法。
在 Kubernetes 的 RBAC 机制中有如下标准化术语：
Role(角色)# 是一组规则的集合，这些规则定义了对 Kubernetes 集群(即 APIserver)的操作权限 权限包括：get、list、watch、create、update、patch、delete Subject(主体)# 即把 Role 的规则作用于 Subject 上。Subject 就是本文开头讲的 Accounts Subject 类型(kind)包括：User、Group、ServiceAccount 其中 User 就是 认证里的 User Account。User 的名字可以是字符串，也可以是邮件风格的名称，或者以字符串形式表达的数字 ID。 Group 的概念是什么还不知道，也没找到参考文档。不过有一个可能应该是这样描述的： Group 与 User 有关系，在创建 User 的证书时，在 subjct 中，O 的值就是表示 Kubernetes RBAC 机制中 Group 的概念。这么看，其实这个 User 与 Group 的概念与 Linux 中用户与组的概念一样。 ServiceAccount 详见 Service Account RoleBinding：定义了 Role 与 Subject 的绑定关系 rules# 规则，i.</description></item><item><title>RBAC 相关 Manifests 详解</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/API-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/Authorization%E6%8E%88%E6%9D%83/RBAC-%E7%9B%B8%E5%85%B3-Manifests-%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/API-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/Authorization%E6%8E%88%E6%9D%83/RBAC-%E7%9B%B8%E5%85%B3-Manifests-%E8%AF%A6%E8%A7%A3/</guid><description>概述 参考：
官方文档，参考 - Kubernetes API - 认证资源 Role apiVersion: rbac.authorization.k8s.io/v1 kind: Role metadata (ObjectMeta) Standard object&amp;rsquo;s metadata. rules([]PolicyRule)Rules holds all the PolicyRules for this Role_PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to._ rules.apiGroups ([]string) APIGroups is the name of the APIGroup that contains the resources. If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.</description></item></channel></rss>