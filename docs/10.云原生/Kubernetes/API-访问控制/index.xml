<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦的站点 – API 访问控制</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/API-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/</link><description>Recent content in API 访问控制 on 断念梦的站点</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/API-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: API 访问控制</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/API-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/API-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/API-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/API-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kubernetes.io/docs/concepts/security/controlling-access/">官方文档, 概念 - 安全 - Kubernetes API 的访问控制&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>认证用于身份验证，授权用于权限检查，准入控制机制用于补充授权机制&lt;/strong>&lt;/p>
&lt;p>客户端与服务端的概念：谁向谁发请求，前者就是客户端，所在在这里，客户端与服务端没有绝对。一个服务既可以是客户端也可以是服务端，kubectl 在控制集群需要给 apiservice 发送 get，creat，delete 等指令的时候，kubectl 就是 apiservice 的客户端；而 apiservice 需要往 etcd 写入数据的时候，apiservice 就是 etcd 的客户端。&lt;/p>
&lt;p>当客户端向服务端发起请求的时候，服务端需要对客户端进行认证以便确认客户端身份是否可以接入；接入后再进行授权检查，检查该身份的请求是否可以在服务端执行。所以后面介绍的 认证 与 授权 是相辅相成，不可分隔，创建完认证之后，需要为这个认证信息进行授权，才是一套完整的鉴权机制&lt;/p>
&lt;blockquote>
&lt;p>比如现在有这么一个场景，张三要去商场买酱油。当张三到达商场后，保安人员首先要对张三进行认证，确认张三这个人可以进入商场；然后张三到达货柜拿走酱油去结账，收银人员进行授权检查，核验张三是否有权力购买酱油。&lt;/p>
&lt;/blockquote>
&lt;p>在 kubernetes 集群中，就是类似张三买酱油的场景。。。各个组件与资源对象之间的互相访问，在大多数时候，都需要进行认证与授权的检查。&lt;/p>
&lt;p>API Server 是集群的入口，不管是对资源对象的增删改查，还是访问集群中的某些对象，不可避免得只能与 API Server 交互，虽然在访问某些管理组件的 https 端口时，也需要进行认证，但是这种访问是属于基本的 https 访问。所以，在与其说是 k8s 的认证与授权，不如说是 kubernetes API 的访问控制。因为不管是从外部(kubeclt 等)、还是内部(controller-manager、某个 pod 访问集群资源)，都逃不开与 kubernetes API，也就是 api-server 这个组件的交互。毕竟 kubernetes API 是集群的唯一入口。。。就算是在集群内部署的 pod，如果想要访问集群内的资源，也逃不开 kubernetes API~~&lt;/p>
&lt;p>当然，使用 curl 命令来访问 controller、scheduler 时、或者 etcd 互相交互，都属于 认证与授权 的概念范畴~只不过这种情况不占大多数，所以就不再单独讨论了。这些认证授权方式与 API 的认证授权类似。&lt;/p>
&lt;h1 id="kubernetes-api-访问控制">Kubernetes API 访问控制&lt;a class="td-heading-self-link" href="#kubernetes-api-%e8%ae%bf%e9%97%ae%e6%8e%a7%e5%88%b6" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>我们可以通过 kubectl、客户端库、发送 REST 请求 这几种方法访问 &lt;a href="https://kubernetes.io/docs/concepts/overview/kubernetes-api/">Kubernetes API&lt;/a>。&lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/API%20%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/Authenticating(%E8%AE%A4%E8%AF%81)/User%20Account(KubeConfig).md">人类用户(User Account(KubeConfig))&lt;/a> 和 &lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/API%20%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/Authenticating(%E8%AE%A4%E8%AF%81)/Service%20Account.md">Kubernetes 的 Service Account&lt;/a> 都可以被授权进行 API 访问。 请求到达 API Server 后会经过几个阶段，具体如下图所示：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/cvkvyz/1616118854890-e2e31942-d6ea-40a7-83d8-816abb4c136a.jpeg" alt="">&lt;/p>
&lt;h2 id="传输层安全">传输层安全&lt;a class="td-heading-self-link" href="#%e4%bc%a0%e8%be%93%e5%b1%82%e5%ae%89%e5%85%a8" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>在典型的 Kubernetes 集群中，API 通过 443 端口提供服务。 API 服务器会提供一份证书。 该证书一般是私有 CA 自签名的，当然，也可以基于公信的 CA 公钥基础设施签名。&lt;/p>
&lt;p>如果集群使用私有证书颁发机构，需要在客户端的  &lt;code>~/.kube/config&lt;/code>  文件中提供该 CA 证书的副本， 以便在客户端使用程序访问 API 时，可以信任该连接并确认该连接没有被拦截。&lt;/p>
&lt;h2 id="认证">认证&lt;a class="td-heading-self-link" href="#%e8%ae%a4%e8%af%81" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>一旦 TLS 连接建立，HTTP 请求就进入到了认证的步骤。即图中的步骤 1 。 集群创建脚本或集群管理员会为 API 服务器配置一个或多个认证模块。 更具体的认证相关的描述详见&lt;a href="https://kubernetes.io/docs/admin/authentication/">这里&lt;/a>。&lt;/p>
&lt;p>认证步骤的输入是整个 HTTP 请求，但这里通常只是检查请求头和 / 或客户端证书。&lt;/p>
&lt;p>认证模块支持客户端证书，密码和 Plain Tokens， Bootstrap Tokens，以及 JWT Tokens（用于服务账户）。&lt;/p>
&lt;p>（管理员）可以同时设置多种认证模块，在设置了多个认证模块的情况下，每个模块会依次尝试认证， 直到其中一个认证成功。&lt;/p>
&lt;p>在 GCE 平台中，客户端证书，密码和 Plain Tokens，Bootstrap Tokens，以及 JWT Tokens 同时被启用。&lt;/p>
&lt;p>如果请求认证失败，则请求被拒绝，返回 401 状态码。 如果认证成功，则被认证为具体的 username，该用户名可供随后的步骤中使用。一些认证模块还提供了用户的组成员关系，另一些则没有。&lt;/p>
&lt;p>尽管 Kubernetes 使用“用户名”来进行访问控制和请求记录，但它实际上并没有 user 对象，也不存储用户名称或其他相关信息。&lt;/p>
&lt;h2 id="授权">授权&lt;a class="td-heading-self-link" href="#%e6%8e%88%e6%9d%83" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>当请求被认证为来自某个特定的用户后，该请求需要被授权。 即图中的步骤 2 。&lt;/p>
&lt;p>请求须包含请求者的用户名，请求动作，以及该动作影响的对象。 如果存在相应策略，声明该用户具有进行相应操作的权限，则该请求会被授权。&lt;/p>
&lt;p>例如，如果 Bob 有如下策略，那么他只能够读取 projectCaribou 命名空间下的 pod 资源：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;apiVersion&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;abac.authorization.kubernetes.io/v1beta1&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;kind&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Policy&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;spec&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;user&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;bob&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;namespace&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;projectCaribou&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;resource&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;pods&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;readonly&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果 Bob 发起以下请求，那么请求能够通过授权，因为 Bob 被允许访问 projectCaribou 命名空间下的对象：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;apiVersion&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;authorization.k8s.io/v1beta1&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;kind&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;SubjectAccessReview&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;spec&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;resourceAttributes&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;namespace&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;projectCaribou&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;verb&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;get&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;group&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;unicorn.example.org&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;resource&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;pods&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果 Bob 对 projectCaribou 命名空间下的对象发起一个写（create 或者 update）请求，那么它的授权会被拒绝。 如果 Bob 请求读取 （get）其他命名空间，例如 projectFish 下的对象，其授权也会被拒绝。&lt;/p>
&lt;p>Kubernetes 的授权要求使用通用的 REST 属性与现有的组织或云服务提供商的访问控制系统进行交互。 采用 REST 格式是必要的，因为除 Kubernetes 外，这些访问控制系统还可能与其他的 API 进行交互。&lt;/p>
&lt;p>Kubernetes 支持多种授权模块，例如 ABAC 模式，RBAC 模式和 Webhook 模式。 管理员创建集群时，会配置 API 服务器应用的授权模块。 如果多种授权模式同时被启用，Kubernetes 将检查所有模块，如果其中一种通过授权，则请求授权通过。 如果所有的模块全部拒绝，则请求被拒绝（HTTP 状态码 403）。&lt;/p>
&lt;p>要了解更多的 Kubernetes 授权相关信息，包括使用授权模块创建策略的具体说明等，可参考&lt;a href="https://kubernetes.io/docs/admin/authorization">授权概述&lt;/a>。&lt;/p>
&lt;h2 id="准入控制">准入控制&lt;a class="td-heading-self-link" href="#%e5%87%86%e5%85%a5%e6%8e%a7%e5%88%b6" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>准入控制模块是能够修改或拒绝请求的软件模块。 作为授权模块的补充，准入控制模块会访问被创建或更新的对象的内容。 它们作用于对象的创建，删除，更新和连接（proxy）阶段，但不包括对象的读取。&lt;/p>
&lt;p>可以同时配置多个准入控制器，它们会按顺序依次被调用。&lt;/p>
&lt;p>即图中的步骤 3 。&lt;/p>
&lt;p>与认证和授权模块不同的是，如果任一个准入控制器拒绝请求，那么整个请求会立即被拒绝。&lt;/p>
&lt;p>除了拒绝请求外，准入控制器还可以为对象设置复杂的默认值。&lt;/p>
&lt;p>可用的准入控制模块描述 &lt;a href="https://kubernetes.io/docs/admin/admission-controllers/">如下&lt;/a>。&lt;/p>
&lt;p>一旦请求通过所有准入控制器，将使用对应 API 对象的验证流程对其进行验证，然后写入对象存储 （如步骤 4）。&lt;/p>
&lt;h1 id="api-的端口和-ip">API 的端口和 IP&lt;a class="td-heading-self-link" href="#api-%e7%9a%84%e7%ab%af%e5%8f%a3%e5%92%8c-ip" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>上述讨论适用于发送请求到 API 服务器的安全端口（典型情况）。
实际上 API 服务器可以通过两个端口提供服务，默认情况下，API 服务器在 2 个端口上提供 HTTP 服务：&lt;/p>
&lt;ul>
&lt;li>Localhost Port:
&lt;ul>
&lt;li>用于测试和启动，以及管理节点的其他组件(scheduler, controller-manager)与 API 的交互&lt;/li>
&lt;li>没有 TLS&lt;/li>
&lt;li>默认值为 8080，可以通过 API Server 的 &lt;code>--insecure-port&lt;/code> 命令行标志来修改。&lt;/li>
&lt;li>默认的 IP 地址为 localhost，可以通过 API Server 的 &lt;code>--insecure-bind-address&lt;/code> 命令行标志来修改。&lt;/li>
&lt;li>请求会 &lt;strong>绕过&lt;/strong> 认证和鉴权模块。&lt;/li>
&lt;li>请求会被准入控制模块处理。&lt;/li>
&lt;li>其访问需要主机访问的权限。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Secure Port:
&lt;ul>
&lt;li>尽可能使用该端口访问&lt;/li>
&lt;li>应用 TLS。 可以通过 API Server 的 &lt;code>--tls-cert-file&lt;/code> 设置证书， &lt;code>--tls-private-key-file&lt;/code> 设置私钥。&lt;/li>
&lt;li>默认值为 6443，可以通过 API Server 的 &lt;code>--secure-port&lt;/code> 命令行标志来修改。&lt;/li>
&lt;li>默认 IP 是首个非本地的网络接口地址，可以通过 API Server 的 &lt;code>--bind-address&lt;/code> 命令行标志来修改。&lt;/li>
&lt;li>请求会经过认证和鉴权模块处理。&lt;/li>
&lt;li>请求会被准入控制模块处理。&lt;/li>
&lt;li>要求认证和授权模块正常运行。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: Authenticating(认证)</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/API-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/Authenticating%E8%AE%A4%E8%AF%81/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/API-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/Authenticating%E8%AE%A4%E8%AF%81/</guid><description/></item><item><title>Docs: Authorization(授权)</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/API-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/Authorization%E6%8E%88%E6%9D%83/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/API-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/Authorization%E6%8E%88%E6%9D%83/</guid><description/></item><item><title>Docs: Admission Controllers 准入控制器</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/API-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/Admission-Controllers-%E5%87%86%E5%85%A5%E6%8E%A7%E5%88%B6%E5%99%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/API-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/Admission-Controllers-%E5%87%86%E5%85%A5%E6%8E%A7%E5%88%B6%E5%99%A8/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/">官方文档，参考-API 访问控制-使用准入控制器&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/">官方文档，参考-API 访问控制-动态准入控制&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/nwKO2dmfvXf6dFw-y-vU7A">理清 Kubernetes 中的准入控制（Admission Controller）&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/GdxSWFEyM1PYP30f3a-FCQ">公众号 - 运维开发故事，开发一个禁止删除 namespace 的控制器&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>准入控制器是&lt;strong>一段代码&lt;/strong>，它会在&lt;strong>请求通过 认证和授权 之后&lt;/strong>、&lt;strong>对象被持久化之前&lt;/strong>，拦截到达 API Server 的请求。&lt;/p>
&lt;p>由于准入控制器是拦截 API Server 中最后的持久化逻辑，所以现阶段 准入控制器在 kube-apiserver 自身中实现，一共由于两大类准入控制器&lt;/p>
&lt;ul>
&lt;li>&lt;strong>静态准入控制器&lt;/strong> # kube-apiserver 默认内置的准入控制器，可以从 &lt;a href="#Yd0ra">准入控制器列表&lt;/a> 查看。
&lt;ul>
&lt;li>比如 istio 为每个 Pod 注入 Sidecar 的功能，就是通过 Mutating 准入控制器实现的。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>动态准入控制器&lt;/strong> # 以 Webhook 的形式运行，请求到达 kube-apiserver 后将会根据 &lt;code>ValidatingWebhookConfiguration&lt;/code> 资源的定义，将请求转发给自己编写的控制器来处理后再返回给 kube-apiserver。
&lt;ul>
&lt;li>比如我们编写了一个程序：如果请求是删除 namespace 资源的话，则进制删除。那么将这个程序部署到 k8s 时，再创建一个 ValidatingWebhookConfiguration 对面，以告诉 API Server 将请求转发给咱编写的程序。此时咱的程序处理请求后，会告诉 API Server 是否可以继续执行这个请求。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>准入控制器通常用以执行 &lt;strong>Validating(验证)&lt;/strong>、&lt;strong>Mutating(变更)&lt;/strong> 操作&lt;/p>
&lt;ul>
&lt;li>验证操作即验证该请求是否可以执行&lt;/li>
&lt;li>变更操作就是类似于 Istion，将创建的 Pod 中加入其他字段或减少某些字段。&lt;/li>
&lt;/ul>
&lt;h2 id="目前版本中默认启用的准入控制器">目前版本中，默认启用的准入控制器&lt;a class="td-heading-self-link" href="#%e7%9b%ae%e5%89%8d%e7%89%88%e6%9c%ac%e4%b8%ad%e9%bb%98%e8%ae%a4%e5%90%af%e7%94%a8%e7%9a%84%e5%87%86%e5%85%a5%e6%8e%a7%e5%88%b6%e5%99%a8" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>CertificateApproval
CertificateSigning
CertificateSubjectRestriction
DefaultIngressClass
DefaultStorageClass
DefaultTolerationSeconds
LimitRanger
MutatingAdmissionWebhook
NamespaceLifecycle
PersistentVolumeClaimResize
PodSecurity
Priority
ResourceQuota
RuntimeClass
ServiceAccount
StorageObjectInUseProtection
TaintNodesByCondition
ValidatingAdmissionWebhook&lt;/p>
&lt;h1 id="准入控制器列表">准入控制器列表&lt;a class="td-heading-self-link" href="#%e5%87%86%e5%85%a5%e6%8e%a7%e5%88%b6%e5%99%a8%e5%88%97%e8%a1%a8" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="mutatingadmissionwebhook">MutatingAdmissionWebhook&lt;a class="td-heading-self-link" href="#mutatingadmissionwebhook" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>当执行变更操作时，通过 Webhook 调用动态准入控制器&lt;/p>
&lt;h2 id="validatingadmissionwebhook">ValidatingAdmissionWebhook&lt;a class="td-heading-self-link" href="#validatingadmissionwebhook" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>当执行验证操作时，通过 Webhook 调用动态准入控制器&lt;/p></description></item><item><title>Docs: Kubernetes 证书管理</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/API-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/Kubernetes-%E8%AF%81%E4%B9%A6%E7%AE%A1%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/API-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/Kubernetes-%E8%AF%81%E4%B9%A6%E7%AE%A1%E7%90%86/</guid><description/></item><item><title>Docs: 最佳实践</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/API-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/API-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</guid><description>
&lt;h1 id="创建一个超级权限">创建一个超级权限&lt;a class="td-heading-self-link" href="#%e5%88%9b%e5%bb%ba%e4%b8%80%e4%b8%aa%e8%b6%85%e7%ba%a7%e6%9d%83%e9%99%90" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;ul>
&lt;li>创建一个 ServiceAccount
&lt;ul>
&lt;li>kubectl create serviceaccount -n user-sa-manage test-admin&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>将该 ServiceAccount 绑定到 cluster-admin 这个 clusterrole，以赋予最高权限
&lt;ul>
&lt;li>kubectl create clusterrolebinding test-admin &amp;ndash;clusterrole=cluster-admin &amp;ndash;serviceaccount=user-sa-manage:test-admin&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>此时，sa 账户就具有超级权限了，可以通过该 sa 的 token 给应用程序使用，以便可以最大化操作集群&lt;/li>
&lt;li>获取 TOKEN
&lt;ul>
&lt;li>kubectl get secrets -n user-sa-manage -o jsonpath=&amp;quot;{.items[?(@.metadata.annotations[&amp;lsquo;kubernetes.io/service-account.name&amp;rsquo;]==&amp;lsquo;test-admin&amp;rsquo;)].data.token}&amp;quot;|base64 -d&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="使用-service-account-的-token-创建非管理员用户">使用 Service Account 的 Token 创建非管理员用户&lt;a class="td-heading-self-link" href="#%e4%bd%bf%e7%94%a8-service-account-%e7%9a%84-token-%e5%88%9b%e5%bb%ba%e9%9d%9e%e7%ae%a1%e7%90%86%e5%91%98%e7%94%a8%e6%88%b7" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>如果想要使用 Token 对集群进行操作，其实，并不一定要创建一个 KubeConfig 文件，在通过 Kubernetes API 获取集群信息时，直接使用 Token 认证的方式即可，比如：&lt;/p>
&lt;ul>
&lt;li>kubernetes-dashboard 的 web 登录可以使用 Token&lt;/li>
&lt;li>通过 REST 访问 API 可以传递 &lt;code>Authorization: Bearer ${TOKEN}&lt;/code> 请求头时使用 Token。&lt;/li>
&lt;/ul>
&lt;h2 id="创建-sa并为-sa-授权">创建 SA，并为 SA 授权&lt;a class="td-heading-self-link" href="#%e5%88%9b%e5%bb%ba-sa%e5%b9%b6%e4%b8%ba-sa-%e6%8e%88%e6%9d%83" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>创建一个名称空间，专门用来存放 SA。然后创建一个名为 lch 的 SA。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl create namespace user-sa-manage
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kubectl create serviceaccount lch -n user-sa-manage
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>为 SA 授予权限&lt;/strong>
在 test 名称空间创建 rolebinding，将 SA 与 cluster-admin 这个 ClusterRole 绑定，让 lch-sa 可以对 test 名称空间下所有组下的所有资源进行任何操作。&lt;/p>
&lt;blockquote>
&lt;p>也可以使用其他 Role 或 ClusterRole，或者自己创建各种角色。&lt;/p>
&lt;/blockquote>
&lt;p>(可选)让 lch 这个 SA 与 view 这个 ClusterRole 绑定，以便可以查看集群内所有资源。如果不添加这个权限，lch 用户执行 kubectl get ns 命令是没有权限的。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl create rolebinding lch-sa-admin -n &lt;span style="color:#204a87">test&lt;/span> --clusterrole&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>cluster-admin --serviceaccount&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>user-sa-manage:lch
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kubectl create clusterrolebinding lch-sa --clusterrole&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>view --serviceaccount&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>user-sa-manage:lch
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>**(可选)**为 SA 绑定超级权限
当绑定了 cluster-admin 这个 clusterrole 之后，上面的那些权限操作也就没用了，lch 将会拥有对集群操作的最高权限&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl create clusterrolebinding lch-sa-admin --clusterrole&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>cluster-admin --serviceaccount&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>user-sa-manage:lch
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="获取-sa-的-token">获取 SA 的 Token&lt;a class="td-heading-self-link" href="#%e8%8e%b7%e5%8f%96-sa-%e7%9a%84-token" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>获取名为 lch 这个 SA 的 Token&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">LCH_SA_TOKEN&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>kubectl get secrets -n user-sa-manage -o &lt;span style="color:#000">jsonpath&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;{.items[?(@.metadata.annotations[&amp;#39;kubernetes\.io/service-account\.name&amp;#39;]==&amp;#39;lch&amp;#39;)].data.token}&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> base64 -d&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="使用-sa-的-token-创建-kubeconfig-文件">使用 SA 的 Token 创建 KubeConfig 文件&lt;a class="td-heading-self-link" href="#%e4%bd%bf%e7%94%a8-sa-%e7%9a%84-token-%e5%88%9b%e5%bb%ba-kubeconfig-%e6%96%87%e4%bb%b6" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="创建一个-kubeconfig-文件并设置集群信息">创建一个 KubeConfig 文件，并设置集群信息&lt;a class="td-heading-self-link" href="#%e5%88%9b%e5%bb%ba%e4%b8%80%e4%b8%aa-kubeconfig-%e6%96%87%e4%bb%b6%e5%b9%b6%e8%ae%be%e7%bd%ae%e9%9b%86%e7%be%a4%e4%bf%a1%e6%81%af" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>**(可选)**使用集群 ca 证书。
&lt;ul>
&lt;li>像 kubernetes-dashboard 这种集群内的应用，可以不设置集群的证书，因为 Pod 的 /run/secrets/kubernetes.io/serivceaccount 目录中默认包含 ca.crt。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl config set-cluster kubernetes &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> --certificate-authority&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>/etc/kubernetes/pki/ca.crt &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> --embed-certs&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87">true&lt;/span> &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> --server&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>https://172.19.42.234:6443 &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> --kubeconfig&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>./lch-sa.conf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>不使用集群 ca 证书
&lt;ul>
&lt;li>在 [CA](/docs/7.信息安全/Cryptography(密码学)/公开密钥加密/证书%20 与%20PKI.md 与 PKI.md) 的描述中，任何人都是可以获取到 CA 的，CA 主要是用来验证的，并不是特别需要隐藏，一定不要让别人使用集群 CA 证书的场景暂时没想到&lt;del>囧。毕竟没有 CA 的私钥，也没法签发新的证书&lt;/del>~&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl config set-cluster kubernetes &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> --insecure-skip-tls-verify&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87">true&lt;/span> &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> --server&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>https://172.19.42.234:6443 &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> --kubeconfig&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>./lch-sa.conf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="建立用户的凭证信息">建立用户的凭证信息&lt;a class="td-heading-self-link" href="#%e5%bb%ba%e7%ab%8b%e7%94%a8%e6%88%b7%e7%9a%84%e5%87%ad%e8%af%81%e4%bf%a1%e6%81%af" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>在该文件中使用 dashboard 的 token 建立用户的凭证信息，并自动建立一个名为 dashboard-admin 的用户&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl config set-credentials lch &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> --token&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">$LCH_SA_TOKEN&lt;/span> &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> --kubeconfig&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>./lch-sa.conf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在该文件中创建 user 与 cluster 的关系的 context&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl config set-context lch@kubernetes &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> --cluster&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>kubernetes &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> --user&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>lch &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> --kubeconfig&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>./lch-sa.conf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>设定当前的 context&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl config use-context lch@kubernetes &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span>--kubeconfig&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>./lch-sa.conf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="总结">总结&lt;a class="td-heading-self-link" href="#%e6%80%bb%e7%bb%93" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>这个操作生成的 KubeConfig 和 其中生成的 Token 可以用来登录 kubernetes-dashboard
注意：Dashboard 在读取 kubeconfig 文件时，只会读取 token 作为认证&lt;/p>
&lt;p>使用 SA 的 TOKEN 创建的不使用 CA 的 KubeConfig 文件也可以用于访问在 Nginx 后 K8S 集群。&lt;/p>
&lt;h1 id="使用-user-account-的证书创建非管理用户">使用 User Account 的证书创建非管理用户&lt;a class="td-heading-self-link" href="#%e4%bd%bf%e7%94%a8-user-account-%e7%9a%84%e8%af%81%e4%b9%a6%e5%88%9b%e5%bb%ba%e9%9d%9e%e7%ae%a1%e7%90%86%e7%94%a8%e6%88%b7" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>Kubernetes 中的系统组件 etcd、kube-controller-manager 等等都是通过证书&lt;/p>
&lt;h2 id="创建-ua-所需证书并为-ua-授权">创建 UA 所需证书，并为 UA 授权&lt;a class="td-heading-self-link" href="#%e5%88%9b%e5%bb%ba-ua-%e6%89%80%e9%9c%80%e8%af%81%e4%b9%a6%e5%b9%b6%e4%b8%ba-ua-%e6%8e%88%e6%9d%83" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;blockquote>
&lt;p>注意：需要在具有集群的 ca 证书的节点上操作&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87">umask&lt;/span> 077&lt;span style="color:#000;font-weight:bold">;&lt;/span>openssl genrsa -out lch.key 2048&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>openssl req -new -key lch.key -out lch.csr -subj &lt;span style="color:#4e9a06">&amp;#34;/CN=lch&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>openssl x509 -req &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> -CA /etc/kubernetes/pki/ca.crt &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> -CAkey /etc/kubernetes/pki/ca.key &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> -CAcreateserial &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> -in lch.csr -out lch.crt -days &lt;span style="color:#0000cf;font-weight:bold">3650&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>为 UA 授予权限&lt;/strong>
创建 Role 以及 Rolebinding ，让 lch 可以对 test 名称空间下所有组下的所有资源进行任何操作。
并且让 lch 这个 UA 与 view 这个 ClusterRole 绑定，以便可以查看集群内所有资源。如果不添加这个权限，lch 用户执行 kubectl get ns 命令是没有权限的。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 可以自己创建 role 并绑定&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kubectl create role lch-ua -n &lt;span style="color:#204a87">test&lt;/span> --verb&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>* --resource&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>*.*
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kubectl create rolebinding lch-ua -n &lt;span style="color:#204a87">test&lt;/span> --role&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>lch-ua --user&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>lch
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 也可以直接为 SA 绑定默认的 clusterrole，使用默认的更方便一些~&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kubectl create clusterrolebinding lch-ua --clusterrole&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>view --user&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>lch
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="使用-ua-证书创建-kubeconfig-文件">使用 UA 证书创建 KubeConfig 文件&lt;a class="td-heading-self-link" href="#%e4%bd%bf%e7%94%a8-ua-%e8%af%81%e4%b9%a6%e5%88%9b%e5%bb%ba-kubeconfig-%e6%96%87%e4%bb%b6" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>创建一个新的 KubeConfig 文件，并设置集群信息&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl config set-cluster kubernetes &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> --certificate-authority&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>/etc/kubernetes/pki/ca.crt &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> --embed-certs&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87">true&lt;/span> &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> --server&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>https://172.19.42.234:6443 &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> --kubeconfig&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>./lch-ua.conf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用 lch 的证书在 KubeConfig 文件创建名为 lch 的用户。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl config set-credentials lch &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> --client-certificate&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>./lch.crt &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> --client-key&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>./lch.key &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> --embed-certs &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> --kubeconfig&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>./lch-ua.conf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>绑定 lch 用户 与 集群&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl config set-context lch@kubernetes &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> --cluster&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>kubernetes &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> --user&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>lch &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> --kubeconfig&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>./lch-ua.conf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>切换该 KubeConfig 文件的当前环境&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl config use-context lch@kubernetes &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> --kubeconfig&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>./lch-ua.conf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="总结-1">总结&lt;a class="td-heading-self-link" href="#%e6%80%bb%e7%bb%93-1" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>然后将当前目录的 lch-config 文件交给该用户，这个用户将只可以在 lch 这个 namespace 下的所有资源进行任何操作&lt;/p>
&lt;h1 id="示例总结">示例总结&lt;a class="td-heading-self-link" href="#%e7%a4%ba%e4%be%8b%e6%80%bb%e7%bb%93" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>从上面的示例可以看出来，名为 lch 的 UA 与 SA，其实可以被统一抽象为一个用户，这个用户的名称就是 lch。只不过，两种用户的认证方式不一样罢了，一个是证书，一个 Token，其实就相当于是把 证书 和 Token 抽象为密码。&lt;/p></description></item></channel></rss>