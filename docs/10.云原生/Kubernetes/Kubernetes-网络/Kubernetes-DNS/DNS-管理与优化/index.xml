<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DNS 管理与优化 on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%BD%91%E7%BB%9C/Kubernetes-DNS/DNS-%E7%AE%A1%E7%90%86%E4%B8%8E%E4%BC%98%E5%8C%96/</link><description>Recent content in DNS 管理与优化 on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%BD%91%E7%BB%9C/Kubernetes-DNS/DNS-%E7%AE%A1%E7%90%86%E4%B8%8E%E4%BC%98%E5%8C%96/index.xml" rel="self" type="application/rss+xml"/><item><title>CoreDNS 应用实例</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%BD%91%E7%BB%9C/Kubernetes-DNS/DNS-%E7%AE%A1%E7%90%86%E4%B8%8E%E4%BC%98%E5%8C%96/CoreDNS-%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%BD%91%E7%BB%9C/Kubernetes-DNS/DNS-%E7%AE%A1%E7%90%86%E4%B8%8E%E4%BC%98%E5%8C%96/CoreDNS-%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/</guid><description>原文链接：https://mp.weixin.qq.com/s/uzGhAHVqjmgH8QA8eIsS4w
自从 Kubernetes1.11 之后，CoreDNS 作为集群内默认的域名解析服务，你是否对它还仅仅还停留在对 Kubernetes 的 Service 解析呢？事实上光 DNS 在 K8S 内就有很多有意思的操作，今天我们不妨来看看 CoreDNS 的各种高阶玩法。
1. 自定义 hosts 解析 默认情况下，Kubernetes 集群内的容器要解析外部域名时，CoreDNS 会将请求转发给/etc/resolv.conf文件里指定的上游 DNS 服务器。这个是由这个配置决定的。
forward . /etc/resolv.conf 有的时候，我们如果需要在集群内全局劫持某个域名时，我们通常可以利用hosts插件来帮忙。hosts插件会每隔 5s 将需解析的信息重新加载到 coredns 当中，当你有任何变化时直接更新它的配置区块即可。常见的 host 有两种方法配置，分别如下：
定义 host .:53 { hosts { 1.1.1.1 test.cloudxiaobai.com 2.2.2.2 test2.cloudxiaobai.com fallthrough } } 加载 hosts 文件 直接从/etc/hosts加载host信息 . { hosts { fallthrough } } #又或者,从当前目录的test.hosts文件中加载host信息 . { hosts test.hosts { fallthrough } } 当被需要解析的域名不在 hosts 当中时，需要用fallthrough继续将请求转发给其它插件继续处理</description></item><item><title>DNS 管理与优化</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%BD%91%E7%BB%9C/Kubernetes-DNS/DNS-%E7%AE%A1%E7%90%86%E4%B8%8E%E4%BC%98%E5%8C%96/DNS-%E7%AE%A1%E7%90%86%E4%B8%8E%E4%BC%98%E5%8C%96/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%BD%91%E7%BB%9C/Kubernetes-DNS/DNS-%E7%AE%A1%E7%90%86%E4%B8%8E%E4%BC%98%E5%8C%96/DNS-%E7%AE%A1%E7%90%86%E4%B8%8E%E4%BC%98%E5%8C%96/</guid><description>优化方法
禁用 ipv6 解析，以提高解析速度
参考文章：https://yuerblog.cc/2019/09/13/k8s-coredns%E7%A6%81%E7%94%A8ipv6%E8%A7%A3%E6%9E%90/
如果 K8S 集群宿主机没有关闭 IPV6 内核模块的话，容器请求 coredns 时的默认行为是同时发起 IPV4 和 IPV6 解析。
由于我们通常只使用 IPV4 地址，所以此时如果我们仅仅在 coredns 中配置 DOMAIN -&amp;gt; IPV4 地址的解析的话，当 coredns 收到 IPV6 解析请求的时候就会因为本地找不到配置而 foward 到 upstream DNS 服务器解析，从而导致容器的 DNS 解析请求变慢。
coredns 提供了一种 plugin 叫做 template，经过配置后可以给所有的 IPV6 请求立即返回一个空结果的应答，避免请求 forward 到上游 DNS。
使用方法
template 插件的官方文档地址：https://github.com/coredns/coredns/tree/master/plugin/template，coredns 默认已携带此插件，大家只需要配置即可。
template ANY AAAA { rcode NXDOMAIN } 该配置添加到 forward 下面即可
AAAA 表示 IPV6 解析请求，rcode 控制应答返回 NXDOMAIN，即表示没有解析结果。
修改每个 pod 中 /etc/resolv.conf 中 ndots 的值</description></item><item><title>k8s DNS 中的 search 和 ndots 起源</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%BD%91%E7%BB%9C/Kubernetes-DNS/DNS-%E7%AE%A1%E7%90%86%E4%B8%8E%E4%BC%98%E5%8C%96/k8s-DNS-%E4%B8%AD%E7%9A%84-search-%E5%92%8C-ndots-%E8%B5%B7%E6%BA%90/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%BD%91%E7%BB%9C/Kubernetes-DNS/DNS-%E7%AE%A1%E7%90%86%E4%B8%8E%E4%BC%98%E5%8C%96/k8s-DNS-%E4%B8%AD%E7%9A%84-search-%E5%92%8C-ndots-%E8%B5%B7%E6%BA%90/</guid><description>多余的 DNS 查询 一些需要解析外部 DNS 域名的应用，当运行在容器中时，如果我们在容器的 network namespace 中对 dns 报文（udp port 53）进行抓包，可能会发现在正确解析之前，还经过了若干次多余的尝试。
下面是我在容器中ping google.com，同时在容器的 network namespace 中抓到的包。
sudo nsenter -t 3885 -n tcpdump -i eth0 udp port 53 tcpdump: verbose output suppressed, use -v or -vv for full protocol decode listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes 10:09:11.917900 IP 10.244.2.202.38697 &amp;gt; 10.96.0.10.domain: 11858+ A? google.com.default.svc.cluster.local. (54) 10:09:11.918847 IP 10.96.0.10.domain &amp;gt; 10.244.2.202.38697: 11858 NXDomain*- 0/1/0 (147) 10:09:11.922468 IP 10.</description></item></channel></rss>