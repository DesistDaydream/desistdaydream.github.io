<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Nginx on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%BD%91%E7%BB%9C/Ingress/Ingress-Controller/Nginx/</link><description>Recent content in Nginx on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%BD%91%E7%BB%9C/Ingress/Ingress-Controller/Nginx/index.xml" rel="self" type="application/rss+xml"/><item><title>ConfigMap 配置详解</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%BD%91%E7%BB%9C/Ingress/Ingress-Controller/Nginx/ConfigMap-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%BD%91%E7%BB%9C/Ingress/Ingress-Controller/Nginx/ConfigMap-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</guid><description>概述 参考：
官方文档，用户指南-ConfigMap GitHub 代码中的可用的配置，及其默认值 可以通过 ConfigMap 资源来控制 Nginx Ingress Controller 的运行时行为。Nginx Ingress Controller 将会读取指定 ConfigMap 对象中的 .data 字段下的内容，并解析其中的内容，转换为传统 Nginx 的配置。
.data 字段下的内容由无数的 Key/Value Pairs(键/值对) 组成。绝大部分 Key 都会对应一个 Nginx 的 Directives(指令)。Key 的 Value 就是指令的参数。假如现在有如下 ConfigMap 配置：
data: map-hash-bucket-size: &amp;#34;128&amp;#34; ssl-protocols: SSLv2 这就会生成如下 Ngxin 的配置
http { ······ map_hash_bucket_size 128; ssl_protocols SSLv2; ······ } 可用的 Key 详解 下面每个 Key 的详解中，若没写对应指令，则表示这个 Key 没有对应的老式 Nginx 指令。
enable-undersores-in-headers(BOOLEAN) # 是否接收 key 中带有下划线的请求头。
默认值：&amp;quot;true&amp;quot; 对应指令：underscores_in_headers log-format-escape-json(BOOL) # 是否为 log_format 指令开启 escape(转义) 参数</description></item><item><title>Annotations 配置详解</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%BD%91%E7%BB%9C/Ingress/Ingress-Controller/Nginx/Annotations-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%BD%91%E7%BB%9C/Ingress/Ingress-Controller/Nginx/Annotations-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</guid><description>概述 参考：
官方文档，用户指南-Annotations 与 ConfigMap 实现配置 Nginx Ingress Controller 运行时行为类似，只不过，Annotations 的方式，是通过设置 Ingress 资源的 .metadata.annotations 字段下的内容实现的。
.metadata.annotations 字段下的内容也是由无数的 Key/Value Pairs(键/值对) 组成。绝大部分 Key 都会对应一个 Nginx 的 Directives(指令)
Nginx controoler 程序默认读取 Ingress 对象中 metadata.annotations 字段下前缀为 nginx.ingress.kubernetes.io 的字段，作为运行程序时的配置信息。
注意：
所有 Key 都是以 nginx.ingress.kubernetes.io 作为前缀，比如配置认证相关，那么 Key 就是 nginx.ingress.kubernetes.io/auth-realm 可以为 nginx-ingress-controller 程序添加 --annotations-prefix 命令行标志以改变前缀 Key 详解 Authentication - 认证相关配置 https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations/#authentication
可以为 Nginx 所代理的后端配置一些简单的认证，比如 用户名/密码
nginx.ingress.kubernetes.io/auth-realm(STRING) #
nginx.ingress.kubernetes.io/auth-secret(STRING) #
nginx.ingress.kubernetes.io/auth-type(STRING) #
Backend Protocol - 后端协议配置 https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations/#backend-protocol
使用后端协议注释可以指示 NGINX 应如何与后端服务通信。</description></item><item><title>Nginx</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%BD%91%E7%BB%9C/Ingress/Ingress-Controller/Nginx/Nginx/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%BD%91%E7%BB%9C/Ingress/Ingress-Controller/Nginx/Nginx/</guid><description>概述 分为两个版本
K8S 社区版 Nginx Ingress Controller # https://github.com/kubernetes/ingress-nginx Nginx 官网版 Nginx Ingress Controller # https://github.com/nginxinc/kubernetes-ingress 部署 版本支持矩阵: https://github.com/kubernetes/ingress-nginx#supported-versions-table
k8s 社区版部署方式 参考：
官方文档，部署-安装指南-裸金属集群(就是通过纯 Manifests 文件部署) 官方文档，部署-安装指南-快速开始(直接就是 Helm 安装) 注意：
从 v1.0.0 版本开始，仅支持 Kubernetes 版本 &amp;gt;= v1.19 ，因为从 v1.0.0 版本开始，删除了对 networking.k8s.io/v1beta 资源的支持。 详见：公众号-CNCF，更新 NGINX-Ingress 以使用稳定的 Ingress API 从 v1.3.0 版本开始，仅支持 Kubernetes 版本 &amp;gt;= v1.20。 详见：公众号-MoeLove，K8S 生态周报| Kubernetes Ingress-NGINX 功能冻结前最后一个版本发布 为了能兼容 Kubernetes 的更高版本，所以我们将 controller 中用于选举的机制修改成了使用 Lease API 的方式，而不再是原先的 configmap 的方式。其实在 Kubernetes Ingress-NGINX v1.</description></item><item><title>命令行标志</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%BD%91%E7%BB%9C/Ingress/Ingress-Controller/Nginx/%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%A0%87%E5%BF%97/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%BD%91%E7%BB%9C/Ingress/Ingress-Controller/Nginx/%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%A0%87%E5%BF%97/</guid><description>概述 参考：
官方文档，用户指南-命令行参数 命令行标志详解 &amp;ndash;annotations-prefix(STRING) # 读取 Ingress 对象的 metadata.annotations 下的字段前缀，只有匹配到前缀的字段才会当做配置处理。默认值: nginx.ingress.kubernetes.io
&amp;ndash;controller-class(STRING) # Ingress Class Controller value this Ingress satisfies.默认值：k8s.io/ingress-nginx
想要控制器使用对应的 Ingress，该标志的值，需要与 ingressClass 资源中 spec.controller 的值相同 通常来说，在部署 Nginx ingress controller 时，都是同时部署一个 ingressClass 资源 &amp;ndash;publish-service(STRING) # 与 controller-class 功能一起来定位控制器应该使用哪个 ingressClass 的 Ingress 资源
&amp;ndash;maxmind-license-key(STRING) # 从 MaxMind 下载 GeoLite2 数据库时所需的 License Key。</description></item><item><title>实现应用灰度发布</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%BD%91%E7%BB%9C/Ingress/Ingress-Controller/Nginx/%E5%AE%9E%E7%8E%B0%E5%BA%94%E7%94%A8%E7%81%B0%E5%BA%A6%E5%8F%91%E5%B8%83/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%BD%91%E7%BB%9C/Ingress/Ingress-Controller/Nginx/%E5%AE%9E%E7%8E%B0%E5%BA%94%E7%94%A8%E7%81%B0%E5%BA%A6%E5%8F%91%E5%B8%83/</guid><description>概述 参考：
原文链接：公众号-运维开发故事，如何通过 ingress-nginx 实现应用灰度发布？ 在日常的工作中，我们会经常对应用进行发版升级，在互联网公司尤为频繁，主要是为了满足快速的业务发展。我们经常用到的发布方式有滚动更新、蓝绿发布、灰度发布。
滚动更新：依次进行新旧替换，直到旧的全部被替换为止。 蓝绿发布：两套独立的系统，对外提供服务的称为绿系统，待上线的服务称为蓝系统，当蓝系统里面的应用测试完成后，用户流量接入蓝系统，蓝系统将称为绿系统，以前的绿系统就可以销毁。 灰度发布：在一套集群中存在稳定和灰度两个版本，灰度版本可以限制只针对部分人员可用，待灰度版本测试完成后，可以将灰度版本升级为稳定版本，旧的稳定版本就可以下线了，我们也称之为金丝雀发布。 这里主要给大家分享如果通过 ingress-nginx controller 实现灰度发布。
本文大纲如下。
如何通过 ingress-nginx 实现灰度发布 ingress-nginx 是 Kubernetes 官方推荐的 ingress controller，它是基于 nginx 实现的，增加了一组用于实现额外功能的 Lua 插件。
为了实现灰度发布，ingress-nginx 通过定义 annotation 来实现不同场景的灰度发布，其支持的规则如下：
nginx.ingress.kubernetes.io/canary-by-header：基于 Request Header 的流量切分，适用于灰度发布以及 A/B 测试。当 Request Header 设置为 always时，请求将会被一直发送到 Canary 版本；当 Request Header 设置为 never时，请求不会被发送到 Canary 入口；对于任何其他 Header 值，将忽略 Header，并通过优先级将请求与其他金丝雀规则进行优先级的比较。 nginx.ingress.kubernetes.io/canary-by-header-value：要匹配的 Request Header 的值，用于通知 Ingress 将请求路由到 Canary Ingress 中指定的服务。当 Request Header 设置为此值时，它将被路由到 Canary 入口。该规则允许用户自定义 Request Header 的值，必须与上一个 annotation (即：canary-by-header）一起使用。 nginx.</description></item><item><title>优化</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%BD%91%E7%BB%9C/Ingress/Ingress-Controller/Nginx/%E4%BC%98%E5%8C%96/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%BD%91%E7%BB%9C/Ingress/Ingress-Controller/Nginx/%E4%BC%98%E5%8C%96/</guid><description>原文链接：https://mp.weixin.qq.com/s/H7nfSEswggu92myHiRqWHg
k8s 的 Nginx Ingress 调优 概述 Nginx Ingress Controller 基于 Nginx 实现了 Kubernetes Ingress API，Nginx 是公认的高性能网关，但如果不对其进行一些参数调优，就不能充分发挥出高性能的优势。Nginx Ingress 工作原理：
内核参数调优 我们先看看通过内核的哪些参数能够提高 Ingress 的性能。保证在高并发环境下，发挥 Ingress 的最大性能。
调大全连接队列的大小 TCP 全连接队列的最大值取决于 somaxconn 和 backlog 之间的最小值，也就是 min(somaxconn, backlog)。在高并发环境下，如果队列过小，可能导致队列溢出，使得连接部分连接无法建立。要调大 Nginx Ingress 的连接队列，只需要调整 somaxconn 内核参数的值即可，但我想跟你分享下这背后的相关原理。Nginx 监听 socket 时没有读取 somaxconn，而是有自己单独的参数配置。在 nginx.conf 中 listen 端口的位置，还有个叫 backlog 参数可以设置，它会决定 nginx listen 的端口的连接队列大小。 server { listen 80 backlog=1024; &amp;hellip;
backlog 是 listen(int sockfd, int backlog) 函数中的 backlog 大小，Nginx 默认值是 511，可以通过修改配置文件设置其长度；还有 Go 程序标准库在 listen 时，默认直接读取 somaxconn 作为队列大小。就是说，即便你的 somaxconn 配的很高，nginx 所监听端口的连接队列最大却也只有 511，高并发场景下可能导致连接队列溢出。所以在这个在 Nginx Ingress 中， Nginx Ingress Controller 会自动读取 somaxconn 的值作为 backlog 参数写到生成的 nginx.</description></item></channel></rss>