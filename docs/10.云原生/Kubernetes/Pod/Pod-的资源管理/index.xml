<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Pod 的资源管理 on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Pod/Pod-%E7%9A%84%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/</link><description>Recent content in Pod 的资源管理 on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Pod/Pod-%E7%9A%84%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/index.xml" rel="self" type="application/rss+xml"/><item><title>Pod 的资源管理</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Pod/Pod-%E7%9A%84%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/Pod-%E7%9A%84%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Pod/Pod-%E7%9A%84%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/Pod-%E7%9A%84%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/</guid><description>概述 参考：
官方文档，概念 - 配置 - Pod 和容器的资源管理 Pod 中 Container 的资源需求与资源限制 可以在 Pod 的 yaml 中定义该 Pod 中各个 Container 对内存与 CPU 的最低需求量和最大使用量
requests：资源需求，最低保障，资源最少需要多少 limits：限制，硬限制，限额，资源最大不能超过多少 当对 Container 进行资源制定后，会出现 QoS(服务质量)的属性，下列 3 个属性从上往下优先级下降；当节点资源不够时，优先级越高，越会保证其正常运行，其余不够提供资源的 Container 则不再运行
Guarateed：有保证的，Pod 中每个 Container 同时设置 CPU 和内存的 requests 和 limits，且 request 和 limits 的值相同 Burstable：超频，Pod 中至少有一个 Container 设置了 CPU 或内存资源的 requests 属性 BestEffort：尽力努力(尽力而为)没有任何一个 Container 设置了 requests 和 limits 属性 关于在 yaml 中如何写资源限制中数值的说明：
kubernetes 中的一个 CPU 是一个逻辑 CPU，1CPU 的核心数=1000millicores 毫核心(也就是说 500m 相当于 0.</description></item><item><title>CPU资源的调度和管理(CFS)</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Pod/Pod-%E7%9A%84%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/CPU%E8%B5%84%E6%BA%90%E7%9A%84%E8%B0%83%E5%BA%A6%E5%92%8C%E7%AE%A1%E7%90%86CFS/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Pod/Pod-%E7%9A%84%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/CPU%E8%B5%84%E6%BA%90%E7%9A%84%E8%B0%83%E5%BA%A6%E5%92%8C%E7%AE%A1%E7%90%86CFS/</guid><description>概述 参考：
CSDN，Kubernetes生产实践系列之三十一：Kubernetes基础技术之CPU资源的调度和管理(CFS) 一、前言 在使用 Kubernetes 的过程中，我们看到过这样一个告警信息：
[K8S]告警主题: CPUThrottlingHigh
告警级别: warning
告警类型: CPUThrottlingHigh
故障实例:
告警详情: 27% throttling of CPU in namespace kube-system for container kube-proxy in pod kube-proxy-9pj9j.
触发时间: 2020-05-08 17:34:17
这个告警信息说明 kube-proxy 容器被 throttling 了，然而查看该容器的资源使用历史信息，发现该容器以及容器所在的节点的 CPU 资源使用率都不高：
告警期间容器所在节点 CPU 使用率
告警期间 kube-proxy 的资源使用率
经过我们的分析，发现该告警实际上是和 Kubernetes 对于 CPU 资源的限制和管控机制有关。Kubernetes 依赖于容器的 runtime 进行 CPU 资源的调度，而容器 runtime 以 Docker 为例，是借助于 cgroup 和 CFS 调度机制进行资源管控。本文基于这个告警案例，首先分析了 CFS 的基本原理，然后对于 Kubernetes 借助 CFS 进行 CPU 资源的调度和管控方法进行了介绍，最后使用一个例子来分析 CFS 的一些调度特性来解释这个告警的 root cause 和解决方案。</description></item></channel></rss>