<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>K3S on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E8%A1%8D%E7%94%9F%E5%93%81/K3S/</link><description>Recent content in K3S on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E8%A1%8D%E7%94%9F%E5%93%81/K3S/index.xml" rel="self" type="application/rss+xml"/><item><title>K3S</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E8%A1%8D%E7%94%9F%E5%93%81/K3S/K3S/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E8%A1%8D%E7%94%9F%E5%93%81/K3S/K3S/</guid><description>概述 参考：
GitHub 项目，k3s-io/k3s 官方文档 中文官方文档 公众号-云原生实验室，K3S 工具进阶完全指南 K3S 是一个轻量的 Kubernetes，具有基本的 kubernetes 功能，将 kubernetes 的主要组件都集成在一个二进制文件中(apiserver、kubelet 等)，这个二进制文件只有不到 100m。内嵌 Containerd，可以通过 Containerd 来启动 coredns 等 kubernetes 的 addone。直接使用 k3s 的二进制文件，即可启动一个 kubernetes 的节点。
Note: K3S 的 kubelet 不支持 systemd 作为 cgroup-driver，原因详见 https://github.com/rancher/k3s/issues/797 ，说是 systemd 的类型无法放进二进制文件里。
k3s 二进制文件包含 kubelet、api-server、kube-controller-manager、kube-scheduler，然后会通过 containerd 拉起 coredns 与 flannel。
K3S 封装的组件 官方文档，安装 - 管理封装的组件
K3S 封装了部分非 K8S 核心组件，比如 coredns、traefik、local-storage、metrics-server、servicelb。这些组件通常都会以 manifests 文件的方式保存在 /var/lib/rancher/k3s/server/manifests/ 目录中，当 K3S 启动时，自动拉起这些组件。
嵌入式 servicelb LoadBalancer controller 没有 manifests 文件，但由于历史原因，它可以像 AddOn 一样被禁用</description></item><item><title>K3S 部署与清理</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E8%A1%8D%E7%94%9F%E5%93%81/K3S/K3S-%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%B8%85%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E8%A1%8D%E7%94%9F%E5%93%81/K3S/K3S-%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%B8%85%E7%90%86/</guid><description>概述 参考：
官方文档，快速开始指南 公众号-CNCF，利用 kube-vip 实现 K3s 高可用部署 curl -sfL https://get.k3s.io | sh - 使用该脚本，可以自动创建用于运行 k3s 二进制文件的 service 文件，并通过 systemd 启动。
注意：
k3s 会自动部署 servicelb 服务，该服务与 kube-proxy 的 ipvs 模式冲突。 快速部署体验 获取安装脚本
curl -LO http://rancher-mirror.cnrancher.com/k3s/k3s-install.sh 第一个 master 执行
K3S_TOKEN=SECRET \ INSTALL_K3S_MIRROR=cn \ INSTALL_K3S_VERSION=&amp;#39;v1.20.4+k3s1&amp;#39; \ INSTALL_K3S_EXEC=&amp;#39;server --cluster-init&amp;#39; \ bash k3s-install.sh 其余 master 执行
K3S_TOKEN=SECRET \ INSTALL_K3S_MIRROR=cn \ INSTALL_K3S_VERSION=&amp;#39;v1.20.4+k3s1&amp;#39; \ INSTALL_K3S_EXEC=&amp;#39;server --server https://172.19.42.207:6443&amp;#39; \ bash k3s-install.sh 其余 node 执行
K3S_TOKEN=SECRET \ INSTALL_K3S_MIRROR=cn \ INSTALL_K3S_VERSION=&amp;#39;v1.</description></item><item><title>K3S 备份与恢复</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E8%A1%8D%E7%94%9F%E5%93%81/K3S/K3S-%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E8%A1%8D%E7%94%9F%E5%93%81/K3S/K3S-%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/</guid><description>概述 参考：
公众号-边缘计算k3s社区，容器化应用的救命稻草：深入探索 K3s 备份和恢复 使用嵌入式 etcd 数据存储进行备份和恢复 创建快照 默认情况下，K3s 会在 00:00 和 12:00 自动创建快照，并保留 5 个快照。当然，你也可以禁用自动快照或者通过 k3s etcd-snapshot save 来手动创建快照。
快照目录默认为 ${data-dir}/server/db/snapshots。data-dir 的默认值为 /var/lib/rancher/k3s，你可以通过设置 --data-dir 标志来更改。
从快照恢复集群 当 K3s 从备份中恢复时，旧的数据目录将被移动到 ${data-dir}/server/db/etcd-old/。然后 K3s 将尝试通过创建一个新的数据目录来恢复快照，最后使用具有一个 etcd 成员的新 K3s 集群启动 etcd。
在此示例中有 3 个 K3s Server 节点，分别是 S1、S2和 S3，快照位于 S1 上:
在 S1 上，使用 --cluster-reset 选项运行 K3s，同时指定 --cluster-reset-restore-path： ls /var/lib/rancher/k3s/server/db/snapshots/ on-demand-ip-172-31-3-36-1688025329 systemctl stop k3s k3s server \ --cluster-reset \ --cluster-reset-restore-path=/var/lib/rancher/k3s/server/db/snapshots/on-demand-ip-172-31-3-36-1688025329 在 S2 和 S3 上，停止 K3s。然后删除数据目录 /var/lib/rancher/k3s/server/db/： systemctl stop k3s rm -rf /var/lib/rancher/k3s/server/db/ 在 S1 上，再次启动 K3s： systemctl start k3s S1 启动成功后，在 S2 和 S3 上，再次启动 K3s 以加入恢复后的集群： systemctl start k3s S2 和 S3 虽然使用空的数据目录来启动 K3s 服务，但启动时会自动到 S1 去同步数据，从而完成 S2 和 S3 的恢复。</description></item><item><title>K3S 管理</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E8%A1%8D%E7%94%9F%E5%93%81/K3S/K3S-%E7%AE%A1%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E8%A1%8D%E7%94%9F%E5%93%81/K3S/K3S-%E7%AE%A1%E7%90%86/</guid><description>概述 参考：
官方文档，高级选项和配置 使用 etcdctl sudo etcdctl \ --cacert=/var/lib/rancher/k3s/server/tls/etcd/server-ca.crt \ --cert=/var/lib/rancher/k3s/server/tls/etcd/client.crt \ --key=/var/lib/rancher/k3s/server/tls/etcd/client.key \ --endpoint=A,B,C \ member list 更换 Master 节点 K3S 可以快速更换所有 Master 节点的系统，只需要剔除一个新增一个，逐一替换即可。就算没有 k3s server --cluster-init 这种命令的节点也是可以的。
其他推荐 关于旧版 iptables 建议关闭 firewalld</description></item><item><title>K3S 配置详解</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E8%A1%8D%E7%94%9F%E5%93%81/K3S/K3S-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E8%A1%8D%E7%94%9F%E5%93%81/K3S/K3S-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</guid><description>概述 参考：
官方文档，安装-配置选项 官方文档，CLI 工具-server 官方文档，CLI 工具-agent k3s 可以通过如下如下几种方式配置运行时行为
命令行标志 环境变量 配置文件 k3s 运行时默认读取 /etc/rancher/k3s/config.yaml 文件中的值。 配置文件与命令行标志之间的对应关系 直接使用 k3s server 命令并配置如下配置文件：
write-kubeconfig-mode: &amp;#34;0644&amp;#34; tls-san: - &amp;#34;foo.local&amp;#34; node-label: - &amp;#34;foo=bar&amp;#34; - &amp;#34;something=amazing&amp;#34; cluster-init: true 等效于：
k3s server \ --write-kubeconfig-mode &amp;#34;0644&amp;#34; \ --tls-san &amp;#34;foo.local&amp;#34; \ --node-label &amp;#34;foo=bar&amp;#34; \ --node-label &amp;#34;something=amazing&amp;#34; \ --cluster-init 其他配置文件说明 一、/etc/rancher/k3s/registries.yaml 文件
k3s 通过 containerd 来控制容器，在 pull 镜像时，会默认指定 docker.io 为 registry 且不可改。
该配置用于将 docker.io 这个域名解析到指定的 私有镜像仓库地址，这样在使用 crictl pull IMAGE 时，会去私有镜像仓库拉取镜像。这其中需要指定登录私有镜像仓库的用户名和密码。</description></item></channel></rss>