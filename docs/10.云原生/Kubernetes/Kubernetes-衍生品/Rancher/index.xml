<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Rancher on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E8%A1%8D%E7%94%9F%E5%93%81/Rancher/</link><description>Recent content in Rancher on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E8%A1%8D%E7%94%9F%E5%93%81/Rancher/index.xml" rel="self" type="application/rss+xml"/><item><title>Rancher</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E8%A1%8D%E7%94%9F%E5%93%81/Rancher/Rancher/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E8%A1%8D%E7%94%9F%E5%93%81/Rancher/Rancher/</guid><description>概述 参考：
官方文档：https://rancher.com/ Rancher 是为使用容器的公司打造的容器管理平台。Rancher 简化了使用 Kubernetes 的流程，开发者可以随处运行 Kubernetes（Run Kubernetes Everywhere），满足 IT 需求规范，赋能 DevOps 团队。
Rancher 在现阶段可以看作是一个解决方案，是一套产品的统称，这套产品包括如下几个：
K3S # 用于运行高可用 Rancher 的底层平台。是一个轻量的 kubernetes，一个 k3s 二进制文件即可包含所有 kubernetes 的主要组件。 Rancher Server # Rancher 管理程序，常部署于 k3s 之上，用来管理其下游 k8s 集群。 RKE # Rancher 创建的 kubernetes 集群。是一个可以通过名为 rke 的二进制文件以及一个 yaml 文件，即可启动 kubernetes 集群的引擎。RKE 与 kubernetes 的关系，类似于 docker 与 containerd 的关系。 Rancher Server 介绍 Rancher Server 由认证代理(Authentication Proxy)、Rancher API Server、集群控制器(Cluster Controller)、数据存储(比如 etcd、mysql 等)和集群代理(Cluster Agent) 组成。除了 Cluster Agent 以外，其他组件都部署在 Rancher Server 中。(这些组件都集中在一起，一般可以通过 docker 直接启动一个 Rancher Server。)</description></item><item><title>Rancher 部署与清理</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E8%A1%8D%E7%94%9F%E5%93%81/Rancher/Rancher-%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%B8%85%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E8%A1%8D%E7%94%9F%E5%93%81/Rancher/Rancher-%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%B8%85%E7%90%86/</guid><description>概述 参考：
常见问题：https://www.bookstack.cn/read/rancher-2.4.4-zh/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98.md 快速部署体验 docker run -d --name=rancher-server --restart=unless-stopped \ -p 60080:80 -p 60443:443 \ -v /opt/rancher:/var/lib/rancher \ --privileged \ rancher/rancher:v2.5.3 如果想让 rancher 可以验证外部 https 的自建 CA 证书，需要在启动前将证书导入 rancher-server 中，效果如下：
参考链接： https://rancher.com/docs/rancher/v2.x/en/installation/resources/chart-options/#additional-trusted-cas
https://rancher.com/docs/rancher/v2.x/en/installation/other-installation-methods/single-node-docker/advanced/#custom-ca-certificate
docker run -d --name=rancher-server --restart=unless-stopped \ -p 60080:80 -p 60443:443 \ -v /opt/rancher:/var/lib/rancher \ -v /host/certs:/container/certs \ -e SSL_CERT_DIR=&amp;#34;/container/certs&amp;#34; \ --privileged \ rancher/rancher:latest 在宿主机的 /host/certs 目录中存放要导入的证书，比如可以把 harbor 的证书与私钥放入该目录中，这样 rancher 就可以添加 https 的 harbor 仓库了
还可以传递 CATTLE_SYSTEM_DEFAULT_REGISTRY 环境变量，让 rancher 内部使用私有镜像地址。比如</description></item><item><title>Rancher 配置</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E8%A1%8D%E7%94%9F%E5%93%81/Rancher/Rancher-%E9%85%8D%E7%BD%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E8%A1%8D%E7%94%9F%E5%93%81/Rancher/Rancher-%E9%85%8D%E7%BD%AE/</guid><description>概述 参考：
Rancher Server URL 的修改
当 Rancher Server URL 变更后(比如从 40443 变到 60443)，则还需要连带修改以下几部分
Rancher Web 页面最上面的标签，进入系统设置，修改server-url。
k8s 集群中，修改 cattle-system 名称空间中，名为cattle-credentials-XXX的 secret 资源中的 .data.url 字段的值，这个值是用 base64 编码的。
echo -n &amp;ldquo;https://X.X.X.X:60443&amp;rdquo; | bas64 ，通过该命令获取编码后的 url，然后填入 .data.url 字段中
k8s 集群中，修改 cattle-cluster-agent-XX 和 cattle-node-agent-XX 这些 pod 的 env 参数，将其中的 CATTLE_SERVER 的值改为想要的 URL。
cattle-node-agent 在 2.5.0 版本之后没有了，就不用改了。
导入集群的 yaml 文件位置
打开 https://RancherIP/v3/cluster/集群ID/clusterregistrationtokens 页面
在 data 字段下，可以看到获取 yaml 文件的 URL，可能会有多组，一般以时间最新的那组为准。</description></item><item><title>RKE</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E8%A1%8D%E7%94%9F%E5%93%81/Rancher/RKE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E8%A1%8D%E7%94%9F%E5%93%81/Rancher/RKE/</guid><description>概述 参考：
官方文档： https://rancher.com/docs/rke/latest/en/ https://rancher2.docs.rancher.cn/docs/rke/_index/ Rancher Kubernetes Engine(RKE)，是经过 CNCF 认证的 Kubernetes 发行版，完全在 Docker 容器内运行。它适用于裸机和虚拟机。RKE 解决了安装复杂性的问题，这是 Kubernetes 社区中的常见问题。借助 RKE，Kubernetes 的安装和操作既简单又自动化，并且完全独立于所运行的操作系统和平台。只要服务器可以运行受支持的 Docker 版本，就可以使用 RKE 部署和运行 Kubernetes。
使用 rke 工具，仅需通过一个 yaml 的配置文件以及 docker 环境，即可启动一个功能完全的 kubernetes 集群。其中所有系统组件(包括 kubelet)都是以容器的方式运行的。通过 Rancher 创建的 kubernetes 集群，就是 RKE 集群。
RKE 集群与原生 K8S 集群的区别 RKE 与 sealos 实现高可用的方式类似。不同点是 RKE 集群的 node 节点是通过 ngxin 来连接 API Server。
RKE 集群部署 参考：RKE 部署与清理
下载 rke 二进制文件。(在 github 上下载 rke 命令行工具) 创建集群配置文件。 RKE 默认使用名为 cluster.</description></item><item><title>问题实例</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E8%A1%8D%E7%94%9F%E5%93%81/Rancher/%E9%97%AE%E9%A2%98%E5%AE%9E%E4%BE%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E8%A1%8D%E7%94%9F%E5%93%81/Rancher/%E9%97%AE%E9%A2%98%E5%AE%9E%E4%BE%8B/</guid><description>待解决问题 RKE 问题
Centos 启动 RKE 集群还存在用户权限问题，无法使用 root 安装。详见：https://rancher2.docs.rancher.cn/docs/rke/os/_index#rhel%E3%80%81oel%E3%80%81centos kube-proxy、kube-scheduler、kube-controller-manager、kube-apiserver、etcd 这些集群组件，无守护，不是通过 kubelet 的静态 pod 拉起。如果容器被停掉，则无法自动恢复。 ube-scheduler、kube-controller-manager 的 https 端口无法使用，证书有问题。 K3S 问题
k3s 中的 kubelet 无法使用 systemd 后端，k3s 官方人员吐槽 k8s 官方使用 systemd 后端。详见：https://github.com/rancher/k3s/issues/797 吐槽详见：https://github.com/rancher/k3s/issues/797#issuecomment-529139150 Rancher 问题
rancher 崩溃或数据丢失，会导致的问题 通过 rancher 创建的集群无法添加节点，无法升级，所有关于 kubeadm 可以使用的东西都无法使用。就算通过 kubelet 手动添加也不行。 rancher 部署在原生 k8s 集群上入侵行太强，会创建几十个 CRD。当删除的时候，还无法正常删除，只能删除其垃圾回收机制中的 finalizers 字段才可以。 rancher 会为集群中每个 namespace 添加注释以及 finalizers，包括 kube-system，issuer 详见 #14715。如果想要自己删除 ns，则会被卡住，因为 ns 在等待 controller.cattle.io/namespace-auth 导入集群清理 rancher 不干净，留下非常非常多的 rolebing、clusterrole、clusterbinding，很多都是操作 ns 所需的。 Agent 无法连接 Rancher server https://rancher2.</description></item></channel></rss>