<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>API Resource 与 Object on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/API-Resource-%E4%B8%8E-Object/</link><description>Recent content in API Resource 与 Object on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/API-Resource-%E4%B8%8E-Object/index.xml" rel="self" type="application/rss+xml"/><item><title>API 与 Resource</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/API-Resource-%E4%B8%8E-Object/API-%E4%B8%8E-Resource/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/API-Resource-%E4%B8%8E-Object/API-%E4%B8%8E-Resource/</guid><description>概述 参考：
官方文档，概念 - 概述 - Kubernetes API 官方文档，参考 - API 概述 Kubernetes API 使我们可以查询和操纵 Kubernetes API 中资源的状态。Kubernetes API 符合 RESTful 规范。
Kubernetes 把自身一切抽象理解为 Resource(资源)，也叫 API Resource(有地方也叫 Group Resource)。对集群的所有操作都是通过对 Kubernetes API 的 HTTP(s) 请求来实现的。可以使用命令 kubectl api-resources 命令查看所有支持的资源。
kubernetes 控制平面的核心是 API Server。API Server 是实现了 Kubernets API 的应用程序，并为 Kubernetes 公开了一个 HTTP(s) 的 API，以供用户、集群中的不同部分和集群外部组件相互通信。
Kubernetes 中各种资源(对象)的数据都通过 API 接口被提交到后端的持久化存储（etcd）中，Kubernetes 集群中的各部件之间通过该 API 接口实现解耦合，同时 Kubernetes 集群中一个重要且便捷的管理工具 kubectl 也是通过访问该 API 接口实现其强大的管理功能的。
Note：kubectl 就是代替用户执行各种 http 请求的工具
在 Kubernetes 系统中，在大多数情况下，API 定义和实现都符合标准的 HTTP REST 格式，比如通过标准的 HTTP 动词（POST、PUT、GET、DELETE）来完成对相关资源对象的查询、创建、修改、删除等操作。但同时，Kubernetes 也为某些非标准的 REST 行为实现了附加的 API 接口，例如 Watch 某个资源的变化、进入容器执行某个操作等。另外，某些 API 接口可能违背严格的 REST 模式，因为接口返回的不是单一的 JSON 对象，而是其他类型的数据，比如 JSON 对象流或非结构化的文本日志数据等。</description></item><item><title>Object</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/API-Resource-%E4%B8%8E-Object/Object/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/API-Resource-%E4%B8%8E-Object/Object/</guid><description>概述 参考：
官方文档，概念 - 使用 Kubernetes 对象 从某些角度看来，Kubernetes 里的一切介 Object(对象)。就像 Linux 里，一切介文件的角度一样。
API Resource(资源) 用于表示 Objectk(对象) 的集合。例如 pod 资源可以用于描述所有 pod 资源类型的对象，比如我创建一个 pod 资源，生成了一个名为 test1 的 pod 类型的对象，如果创建了多个 pod 对象，那么每个对象都是 pod 类型的资源。
Kubernetes Objectk(对象) 是 Kubernetes 系统中，Resource(资源) 的持久化实体。Kubernetes 使用这些实体来表示集群的状态。具体来说，他们可以描述：
哪些容器化应用程序正在运行（以及在哪些节点上） 这些应用可用的资源 有关这些应用程序的行为的策略，例如重新启动策略，升级和容错 Kubernetes 对象是“record of intent(目标性记录)”：即,一旦创建了对象，Kubernetes 系统会确保对象存在。通过创建对象，本质上时告诉 Kubernetes 系统你希望集群的工作负载是什么样的，这就是 kubernetes 集群的 desired state(期望状态)。
要操作 Kubernetes 对象(无论是创建，修改还是删除)，都需要使用 Kubernetes API 。例如，当使用 kubectl 命令管理工具时，CLI 会执行必要的 KubernetesAPI 调用。也可以直接在自己的程序中使用 Client Libraries 来调用 KubernetesAPI。Client Libraries(客户端库)可以理解为编程语言的一个第三方库，通过这个库中的方法，可以直接调用 KubernetesAPI。
用白说描述：每个已经启动的 pod 就是一个 object(对象)，每个已经创建的 namesapce 也是一个 object。而 pod、namespace 本身称为 resource(资源)。所以 object 就叫 kubernetes 系统中持久化的实体。</description></item></channel></rss>