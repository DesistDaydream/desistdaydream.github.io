<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦的站点 – Kubernetes 扩展</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E6%89%A9%E5%B1%95/</link><description>Recent content in Kubernetes 扩展 on 断念梦的站点</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E6%89%A9%E5%B1%95/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Operator 模式</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E6%89%A9%E5%B1%95/Operator-%E6%A8%A1%E5%BC%8F/</link><pubDate>Wed, 13 May 2020 22:41:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E6%89%A9%E5%B1%95/Operator-%E6%A8%A1%E5%BC%8F/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kubernetes.io/docs/concepts/extend-kubernetes/operator/">官方文档，概念 - 扩展 K8S - Operator 模式&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://jimmysong.io/kubernetes-handbook/develop/operator.html">https://jimmysong.io/kubernetes-handbook/develop/operator.html&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Operator&lt;/strong> 是 Kubernetes API 的客户端，充当 Custom Resource 的控制器。作用与 controller-manager 类似。只不过是控制非 k8s 自带资源的控制器&lt;/p>
&lt;p>Operator 是由 CoreOS 开发的，用来扩展 Kubernetes API 的特定的应用程序控制器，它用来创建、配置和管理复杂的有状态应用，如数据库、缓存和监控系统。Operator 基于 Kubernetes 的资源和控制器概念之上构建，但同时又包含了应用程序特定的领域知识。创建 Operator 的关键是 CRD（自定义资源）的设计。&lt;/p>
&lt;h2 id="背景">背景&lt;a class="td-heading-self-link" href="#%e8%83%8c%e6%99%af" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>基于 Kubernetes 平台，我们可以轻松的搭建一些简单的无状态应用，比如对于一些常见的 web apps 或是移动端后台程序，开发者甚至不用十分了解 Kubernetes 就可以利用 Deployment，Service 这些基本单元模型构建出自己的应用拓扑并暴露相应的服务。由于无状态应用的特性支持其在任意时刻进行部署、迁移、升级等操作，Kubernetes 现有的 ReplicaSets、Deployment、Services 等资源对象已经足够支撑起无状态应用对于自动扩缩容、实例间负载均衡等基本需求。&lt;/p>
&lt;p>在管理简单的有状态应用时，我们可以利用社区原生的 StatefulSet 和 PV 模型来构建基础的应用拓扑，帮助实现相应的持久化存储，按顺序部署、顺序扩容、顺序滚动更新等特性。&lt;/p>
&lt;p>而随着 Kubernetes 的蓬勃发展，在数据分析，机器学习等领域相继出现了一些场景更为复杂的分布式应用系统，也给社区和相关应用的开发运维人员提出了新的挑战：&lt;/p>
&lt;ul>
&lt;li>不同场景下的分布式系统中通常维护了一套自身的模型定义规范，如何在 Kubernetes 平台中表达或兼容出应用原先的模型定义？&lt;/li>
&lt;li>当应用系统发生扩缩容或升级时，如何保证当前已有实例服务的可用性？如何保证它们之间的可连通性？&lt;/li>
&lt;li>如何去重新配置或定义复杂的分布式应用？是否需要大量的专业模板定义和复杂的命令操作？是否可以向无状态应用那样用一条 kubectl 命令就完成应用的更新？&lt;/li>
&lt;li>如何备份和管理系统状态和应用数据？如何协调系统集群各成员间在不同生命周期的应用状态？&lt;/li>
&lt;/ul>
&lt;p>而所有的这些正是 Operator 希望解决的问题，本文我们将首先了解到 Operator 是什么，之后逐步了解到 Operator 的生态建设，Operator 的关键组件及其基本的工作原理，下面让我们来一探究竟吧。&lt;/p>
&lt;h3 id="初识-operator">初识 Operator&lt;a class="td-heading-self-link" href="#%e5%88%9d%e8%af%86-operator" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>首先让我们一起来看下什么是 Operator 以及它的诞生和发展历程。&lt;/p>
&lt;h3 id="1-什么是-operator">1. 什么是 Operator&lt;a class="td-heading-self-link" href="#1-%e4%bb%80%e4%b9%88%e6%98%af-operator" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>CoreOS 在 2016 年底提出了 Operator 的概念，当时的一段官方定义如下：&lt;/p>
&lt;p>“An Operator represents human operational knowledge in software, to reliably manage an application.”&lt;/p>
&lt;p>对于普通的应用开发者或是大多数的应用 SRE 人员，在他们的日常开发运维工作中，都需要基于自身的应用背景和领域知识构建出相应的自动化任务满足业务应用的管理、监控、运维等需求。在这个过程中，Kubernetes 自身的基础模型元素已经无法支撑不同业务领域下复杂的自动化场景。&lt;/p>
&lt;p>与此同时，在云原生的大背景下，生态系统是衡量一个平台成功与否的重要标准，而广大的应用开发者作为 Kubernetes 的最直接用户和服务推广者，他们的业务需求更是 Kubernetes 的生命线。于是，谷歌率先提出了 &lt;code>Third Party Resource&lt;/code> 的概念，允许开发者根据业务需求以插件化形式扩展出相应的 K8s API 对象模型，同时提出了自定义 controller 的概念用于编写面向领域知识的业务控制逻辑，基于 Third Party Resource，Kubernetes 社区在 1.7 版本中提出了&lt;code>custom resources and controllers&lt;/code> 的概念，这正是 Operator 的核心概念。&lt;/p>
&lt;p>基于 custom resources 和相应的自定义资源控制器，我们可以自定义扩展 Kubernetes 原生的模型元素，这样的自定义模型可以如同原生模型一样被 Kubernetes API 管理，支持 kubectl 命令行；同时 Operator 开发者可以像使用原生 API 进行应用管理一样，通过声明式的方式定义一组业务应用的期望终态，并且根据业务应用的自身特点进行相应控制器逻辑编写，以此完成对应用运行时刻生命周期的管理并持续维护与期望终态的一致性。这样的设计范式使得应用部署者只需要专注于配置自身应用的期望运行状态，而无需再投入大量的精力在手工部署或是业务在运行时刻的繁琐运维操作中。&lt;/p>
&lt;p>简单来看，&lt;strong>Operator 定义了一组在 Kubernetes 集群中打包和部署复杂业务应用的方法&lt;/strong>，它可以方便地在不同集群中部署并在不同的客户间传播共享；同时 Operator 还提供了一套应用在运行时刻的监控管理方法，&lt;strong>应用领域专家通过将业务关联的运维逻辑编写融入到 operator 自身控制器中&lt;/strong>，而一个运行中的 Operator 就像一个 7*24 不间断工作的优秀运维团队，它可以时刻监控应用自身状态和该应用在 Kubernetes 集群中的关注事件，并在毫秒级别基于期望终态做出对监听事件的处理，比如对应用的自动化容灾响应或是滚动升级等高级运维操作。&lt;/p>
&lt;p>进一步讲，Operator 的设计和实现并不是千篇一律的，开发者可以根据自身业务需求，不断演进应用的自定义模型，同时面向具体的自动化场景在控制器中扩展相应的业务逻辑。很多 Operator 的出现都是起源于一些相对简单的部署和配置需求，并在后续演进中不断完善补充对复杂运维需求的自动化处理。&lt;/p>
&lt;h3 id="2-operator-的发展">2. Operator 的发展&lt;a class="td-heading-self-link" href="#2-operator-%e7%9a%84%e5%8f%91%e5%b1%95" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>时至今日，Kubernetes 已经确立了自己在云原生领域平台层开源软件中的绝对地位，我们可以说 Kubernetes 就是当今容器编排的事实标准；而在 Kubernetes 项目强大的影响力下，越来越多的企业级分布式应用选择拥抱云原生并开始了自己的容器化道路，而 Operator 的出现无疑极大的加速了这些传统的复杂分布式应用的上云过程。无论在生态还是生产领域，Operator 都是容器应用部署上云过程中广受欢迎的实现规范，本小节就让我们来一起回顾下 Operator 的诞生和发展历史。&lt;/p>
&lt;p>2014 到 2015 年，Docker 无疑是容器领域的绝对霸主，容器技术自身敏捷、弹性和可移植性等优势使其迅速成为了当时炙手可热的焦点。在这个过程中，虽然市场上涌现了大量应用镜像和技术分享，我们却很难在企业生产级别的分布式系统中寻找到容器应用的成功案例。容器技术的本质是提供了主机虚拟层之上的隔离，这样的隔离虽然带来了敏捷和弹性的优势，但同时也给容器和外部世界的交互带来了多一层的障碍；尤其是面向复杂分布式系统中，在处理自身以及不同容器间状态的依赖和维护问题上，往往需要大量的额外工作和依赖组件。这也成为了容器技术在云原生应用生产化道路上的一个瓶颈。&lt;/p>
&lt;p>与此同时，谷歌于 2014 年基于其内部的分布式底层框架 Borg 推出了 Kubernetes 并完成了第一次代码提交。&lt;/p>
&lt;p>2015 年，Kubernetes v1.0 版本正式发布，同时云原生计算基金会 Cloud Native Computing Foundation，简称 CNCF）正式成立，基于云原生这个大背景，CNCF 致力于维护和集成优秀开源技术以支撑编排容器化微服务架构应用。&lt;/p>
&lt;p>2016 年是 Kubernetes 进入主干道，开始蓬勃发展的一年。这一年的社区，开发者们从最初的种种疑虑转为对 Kubernetes 的大力追捧，无论从 commit 数量到个人贡献者数量都有了显著增长；同时越来越多的企业选择 Kubernetes 作为生产系统容器集群的编排引擎，而以 Kubernetes 为核心构建企业内部的容器生态已经开始逐渐成为云原生大背景下业界的共识。也正是在这一年，CoreOS 正式推出了 Operator，旨在通过扩展 Kubernetes 原生 API 的方式为 Kubernetes 应用提供创建、配置以及运行时刻生命周期管理能力，与此同时用户可以利用 Operator 方便的对应用模型进行更新、备份、扩缩容及监控等多种复杂运维操作。&lt;/p>
&lt;p>在 Kubernetes 实现容器编排的核心思想中，会使用控制器（Controller）模式对 etcd 里的 API 模型对象变化保持不断的监听（Watch），并在控制器中对指定事件进行响应处理，针对不同的 API 模型可以在对应的控制器中添加相应的业务逻辑，通过这种方式完成应用编排中各阶段的事件处理。而 Operator 正是基于控制器模式，允许应用开发者通过扩展 Kubernetes API 对象的方式，将复杂的分布式应用集群抽象为一个自定义的 API 对象，通过对自定义 API 模型的请求可以实现基本的运维操作，而在 Controller 中开发者可以专注实现应用在运行时刻管理中遇到的相关复杂逻辑。&lt;/p>
&lt;p>在当时，率先提出这种扩展原生 API 对象进行应用集群定义框架的并不是 CoreOS，而是当时还在谷歌的 Kubernetes 创始人 Brendan Burns；正是 Brendan 早在 1.0 版本发布前就意识到了 Kubernetes API 可扩展性对 Kubernetes 生态系统及其平台自身的重要性，并构建了相应的 API 扩展框架，谷歌将其命名为 &lt;code>Third Party Resource&lt;/code>，简称“TPR”。CoreOS 是最早的一批基于 Kubernetes 平台提供企业级容器服务解决方案的厂商之一，他们很敏锐地捕捉到了 TPR 和控制器模式对企业级应用开发者的重要价值；并很快基于 TPR 实现了历史上第一个 Operator：&lt;code>etcd-operator&lt;/code>。它可以让用户通过短短的几条命令就快速的部署一个 etcd 集群，并且基于 kubectl 命令行一个普通的开发者就可以实现 etcd 集群滚动更新、灾备、备份恢复等复杂的运维操作，极大的降低了 etcd 集群的使用门槛，在很短的时间就成为当时 K8s 社区关注的焦点项目。&lt;/p>
&lt;p>与此同时，Operator 以其插件化、自由化的模式特性，迅速吸引了大批的应用开发者，一时间很多市场上主流的分布式应用均出现了对应的 Operator 开源项目；而很多云厂商也迅速跟进，纷纷提出基于 Operator 进行应用上云的解决方案。Operator 在 Kubernetes 应用开发者中的热度大有星火燎原之势。&lt;/p>
&lt;p>虽然 Operator 的出现受到了大量应用开发者的热捧，但是它的发展之路并不是一帆风顺的。对于谷歌团队而言，Controller 和控制器模式一直以来是作为其 API 体系内部实现的核心，从未暴露给终端应用开发者，Kubernetes 社区关注的焦点也更多的是集中在 PaaS 平台层面的核心能力。而 Operator 的出现打破了社区传统意义上的格局，对于谷歌团队而言，Controller 作为 Kubernetes 原生 API 的核心机制，应该交由系统内部的 Controller Manager 组件进行管理，并且遵从统一的设计开发模式，而不是像 Operator 那样交由应用开发者自由地进行 Controller 代码的编写。&lt;/p>
&lt;p>另外 Operator 作为 Kubernetes 生态系统中与终端用户建立连接的桥梁，作为 Kubernetes 项目的设计和捐赠者，谷歌当然也不希望错失其中的主导权。同时 Brendan Burns 突然宣布加盟微软的消息，也进一步加剧了谷歌团队与 Operator 项目之间的矛盾。&lt;/p>
&lt;p>于是，2017 年开始谷歌和 RedHat 开始在社区推广 Aggregated apiserver，应用开发者需要按照标准的社区规范编写一个自定义的 apiserver，同时定义自身应用的 API 模型；通过原生 apiserver 的配置修改，扩展 apiserver 会随着原生组件一同部署，并且限制自定义 API 在系统管理组件下进行统一管理。之后，谷歌和 RedHat 开始在社区大力推广使用聚合层扩展 Kubernetes API，同时建议废弃 TPR 相关功能。&lt;/p>
&lt;p>然而，巨大的压力并没有让 Operator 昙花一现，就此消失。相反，社区大量的 Operator 开发和使用者仍旧拥护着 Operator 清晰自由的设计理念，继续维护演进着自己的应用项目；同时很多云服务提供商也并没有放弃 Operator，Operator 简洁的部署方式和易复制，自由开放的代码实现方式使其维护住了大量忠实粉丝。在用户的选择面前，强如谷歌，红帽这样的巨头也不得不做出退让。最终，TPR 并没有被彻底废弃，而是由 &lt;code>Custom Resource Definition&lt;/code>（简称 CRD）这个如今已经广为人知的资源模型范式代替。&lt;/p>
&lt;p>CoreOS 官方博客也第一时间发出了回应文章指导用户尽快从 TPR 迁移到 CRD：&lt;a href="https://coreos.com/blog/custom-resource-kubernetes-v17">https://coreos.com/blog/custom-resource-kubernetes-v17&lt;/a> 。&lt;/p>
&lt;p>2018 年初，RedHat 完成了对 CoreOS 的收购，并在几个月后发布了 Operator Framework，通过提供 SDK 等管理工具的方式进一步降低了应用开发与 Kubernetes 底层 API 知识体系之间的依赖。至此，Operator 进一步巩固了其在 Kubernetes 应用开发领域的重要地位。&lt;/p>
&lt;h3 id="3-operator-的社区与生态">3. Operator 的社区与生态&lt;a class="td-heading-self-link" href="#3-operator-%e7%9a%84%e7%a4%be%e5%8c%ba%e4%b8%8e%e7%94%9f%e6%80%81" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>Operator 开放式的设计模式使开发者可以根据自身业务自由的定义服务模型和相应的控制逻辑，可以说一经推出就在社区引起了巨大的反响。&lt;/p>
&lt;p>一时间，基于不同种类的业务应用涌现了一大批优秀的开源 Operator 项目，我们可以找到其中很多的典型案例，例如对于运维要求较高的数据库集群，我们可以找到像 etcd、Mysql、PostgreSQL、Redis、Cassandra 等很多主流数据库应用对应的 Operator 项目，这些 Operator 的推出有效的简化了数据库应用在 Kubernetes 集群上的部署和运维工作；在监控方向，CoreOS 开发的 prometheus-operator 早日成为社区里的明星项目，Jaeger、FluentD、Grafana 等主流监控应用也或由官方或由开发者迅速推出相应的 Operator 并持续演进；在安全领域，Aqua、Twistlock、Sisdig 等各大容器安全厂商也不甘落后，通过 Operator 的形式简化了相对门槛较高的容器安全应用配置，另外社区中像 cert-manager、vault-operator 这些热门项目也在很多生产环境上得到了广泛应用。&lt;/p>
&lt;p>可以说 &lt;strong>Operator 在很短的时间就成为了分布式应用在 Kubernetes 集群中部署的事实标准&lt;/strong>，同时 Operator 应用如此广泛的覆盖面也使它超过了分布式应用这个原始的范畴，成为了整个 Kubernetes 云原生应用下一个重要存在。&lt;/p>
&lt;p>随着 Operator 的持续发展，已有的社区共享模式已经渐渐不能满足广大开发者和 K8s 集群管理员的需求，如何快速寻找到业务需要的可用 Operator？如何给生态中大量的 Operator 定义一个统一的质量标准？这些都成为了刚刚完成收购的 RedHat 大佬们眼中亟需解决的问题。&lt;/p>
&lt;p>于是我们看到 RedHat 在年初联合 AWS、谷歌、微软等大厂推出了 OperatorHub.io，希望其作为 Kubernetes 社区的延伸，向广大 operator 用户提供一个集中式的公共仓库，用户可以在仓库网站上轻松的搜索到自己业务应用对应的 Operator 并在向导页的指导下完成实例安装；同时，开发者还可以基于 Operator Framework 开发自己的 Operator 并上传分享至仓库中。&lt;/p>
&lt;p>下图为一个 Operator 项目从开发到开源到被使用的全生命周期流程：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/tncnta/1616116241484-33a365d7-481a-4a10-9bdf-2fd0db8083ca.png" alt="">&lt;/p>
&lt;p>Operator 开源生命周期流程图&lt;/p>
&lt;p>主要流程包括：&lt;/p>
&lt;ul>
&lt;li>开发者首先使用 Operator SDK 创建一个 Operator 项目；&lt;/li>
&lt;li>利用 SDK 我们可以生成 Operator 对应的脚手架代码，然后扩展相应业务模型和 API，最后实现业务逻辑完成一个 Operator 的代码编写；&lt;/li>
&lt;li>参考社区测试指南进行业务逻辑的本地测试以及打包和发布格式的本地校验；&lt;/li>
&lt;li>在完成测试后可以根据规定格式向社区提交 PR，会有专人进行 review；&lt;/li>
&lt;li>待社区审核通过完成 merge 后，终端用户就可以在 &lt;a href="http://OperatorHub.io">OperatorHub.io&lt;/a> 页面上找到业务对应的 Operator；&lt;/li>
&lt;li>用户可以在 &lt;a href="http://OperatorHub.io">OperatorHub.io &lt;/a>上找到业务 Operator 对应的说明文档和安装指南，通过简单的命令行操作即可在目标集群上完成 Operator 实例的安装；&lt;/li>
&lt;li>Operator 实例会根据配置创建所需的业务应用，OLM 和 Operator Metering 等组件可以帮助用户完成业务应用对应的运维和监控采集等管理操作。&lt;/li>
&lt;/ul>
&lt;h3 id="总结">总结&lt;a class="td-heading-self-link" href="#%e6%80%bb%e7%bb%93" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>本文主要介绍了 Operator 的基本概念，让您了解 Operator 的应用场景和发展历程。Operator 已经成为 Kubernetes 生态的一个重要设计模式，Kubernetes 从 PaaS 层面提供整套集群、应用编排的框架，而用户通过 Operator 的方式扩展自己的应用，并实现与 Kubernetes 的融合。文章同时也介绍了使用 Operator 的生命周期流程，您可以结合自己的业务场景实现自己的 Operator 组件。&lt;/p>
&lt;h1 id="operator-工作原理">Operator 工作原理&lt;a class="td-heading-self-link" href="#operator-%e5%b7%a5%e4%bd%9c%e5%8e%9f%e7%90%86" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>Operator 是将运维人员对软件操作的知识给代码化，同时利用 Kubernetes 强大的抽象来管理大规模的软件应用。&lt;/p>
&lt;p>Operator 使用了 Kubernetes 的 扩展 API 机制，如使用 CRD 或 聚合的 API 来创建。Operator 通过这种机制来创建、配置和管理应用程序。&lt;/p>
&lt;p>Operator 设计出来应该可以做到如下两点&lt;/p>
&lt;ol>
&lt;li>直接监控通过 CRD 创建出来的资源的状态&lt;/li>
&lt;li>直接监控通过 聚合 API 所关联 Service 的后端 pod 的状态&lt;/li>
&lt;/ol>
&lt;p>Operator 基于 Kubernetes 的以下两个概念构建：&lt;/p>
&lt;ul>
&lt;li>资源：对象的状态定义&lt;/li>
&lt;li>控制器：观测、分析和行动，以调节资源的分布&lt;/li>
&lt;/ul>
&lt;h2 id="创建-operator">创建 Operator&lt;a class="td-heading-self-link" href="#%e5%88%9b%e5%bb%ba-operator" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Operator 本质上是与应用息息相关的，因为这是特定领域的知识的编码结果，这其中包括了资源配置的控制逻辑。下面是创建 Operator 的基本套路：&lt;/p>
&lt;ol>
&lt;li>在单个 Deployment 中定义 Operator，如：&lt;a href="https://coreos.com/operators/etcd/latest/deployment.yaml">https://coreos.com/operators/etcd/latest/deployment.yaml&lt;/a>&lt;/li>
&lt;li>需要为 Operator 创建一个新的自定义类型 CRD，这样用户就可以使用该对象来创建实例&lt;/li>
&lt;li>Operator 应该利用 Kubernetes 中内建的原语，如 Deployment、Service 这些经过充分测试的对象，这样也便于理解&lt;/li>
&lt;li>Operator 应该向后兼容，始终了解用户在之前版本中创建的资源&lt;/li>
&lt;li>当 Operator 被停止或删除时，Operator 创建的应用实例应该不受影响&lt;/li>
&lt;li>Operator 应该让用户能够根据版本声明来选择所需版本和编排应用程序升级。不升级软件是操作错误和安全问题的常见来源，Operator 可以帮助用户更加自信地解决这一问题。&lt;/li>
&lt;li>Operator 应该进行“Chaos Monkey”测试，以模拟 Pod、配置和网络故障的情况下的行为。&lt;/li>
&lt;/ol>
&lt;h2 id="operator-用途">Operator 用途&lt;a class="td-heading-self-link" href="#operator-%e7%94%a8%e9%80%94" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>使用 Operator 可以自动化的事情包括：&lt;/p>
&lt;ul>
&lt;li>按需部署一个应用程序&lt;/li>
&lt;li>需要备份和恢复应用程序的状态（如数据库）&lt;/li>
&lt;li>处理应用程序代码的升级以及相关更改，例如数据库架构或额外的配置设置&lt;/li>
&lt;li>发布一个服务，要让不支持 Kubernetes API 的应用程序能够发现&lt;/li>
&lt;li>模拟整个或部分集群中的故障以测试其弹性&lt;/li>
&lt;li>在没有内部成员选举程序的情况下为分布式应用程序选择领导者&lt;/li>
&lt;/ul>
&lt;h2 id="一个-operator-用途的详细示例">一个 Operator 用途的详细示例&lt;a class="td-heading-self-link" href="#%e4%b8%80%e4%b8%aa-operator-%e7%94%a8%e9%80%94%e7%9a%84%e8%af%a6%e7%bb%86%e7%a4%ba%e4%be%8b" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>下面是一个使用 Operator 的详细示例。&lt;/p>
&lt;ul>
&lt;li>一个名为 SampleDB 的自定义资源，您可以将其配置到集群中。&lt;/li>
&lt;li>一个包含 Operator 控制器部分的 Deployment，用来确保 Pod 处于运行状态。&lt;/li>
&lt;li>一个 Operator 代码的容器镜像。&lt;/li>
&lt;li>控制器代码，负责查询控制平面以找出已配置的 SampleDB 资源。&lt;/li>
&lt;li>Operator 的核心是告诉 API Server 如何使现实与代码里已配置的资源匹配。
&lt;ul>
&lt;li>如果添加新的 SampleDB，Operator 将设置 PersistentVolumeClaims 以提供持久的数据库存储，设置 StatefulSet 以运行 SampleDB，并设置 Job 来处理初始配置。&lt;/li>
&lt;li>如果删除它，Operator 将建立快照，然后确保删除了 StatefulSet 和卷。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Operator 还管理常规数据库备份。对于每个 SampleDB 资源，Operator 确定何时创建可以连接到数据库并进行备份的 Pod。这些 Pod 将依赖于 ConfigMap 和/或具有数据库连接详细信息和凭据的 Secret。&lt;/li>
&lt;li>由于 Operator 旨在为其管理的资源提供强大的自动化功能，因此会有其他支持代码。对于此示例，代码将检查数据库是否正在运行旧版本，如果是，则创建 Job 对象为您升级数据库。&lt;/li>
&lt;/ul>
&lt;h1 id="编写自己的-operator">编写自己的 Operator&lt;a class="td-heading-self-link" href="#%e7%bc%96%e5%86%99%e8%87%aa%e5%b7%b1%e7%9a%84-operator" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;ul>
&lt;li>在 OperatorHub.io 上找到现成的、适合您的 Operator。我们都知道在 Kubernetes 上安装应用可以使用 Helm 直接安装各种打包成 Chart 形式的 Kubernetes 应用，但随着 Kubernetes Operator 的流行，Kubernetes 社区又推出了 OperatorHub&lt;/li>
&lt;li>awesome-operators 中罗列了目前已知的 Operator。&lt;/li>
&lt;li>借助已有的工具来编写您自己的 Operator，例如：
&lt;ul>
&lt;li>&lt;a href="https://kudo.dev/">KUDO &lt;/a>(Kubernetes 通用声明式 Operator)&lt;/li>
&lt;li>&lt;a href="https://book.kubebuilder.io/">Kubebuilder&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://metacontroller.app/">Metacontroller&lt;/a>，可与 Webhook 结合使用，以实现自己的功能。&lt;/li>
&lt;li>&lt;a href="https://github.com/operator-framework/getting-started">Operator Framework&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://operatorhub.io/">发布&lt;/a>你的 Operator，让别人也可以使用&lt;/li>
&lt;li>阅读 &lt;a href="https://coreos.com/blog/introducing-operators.html">CoreOS 原文&lt;/a>，其介绍了 Operator 介绍&lt;/li>
&lt;li>阅读这篇来自谷歌云的关于构建 Operator 最佳实践的 文章&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://www.zhihu.com/question/290497164">kubebuilder 与 Operator Framework 的对比&lt;/a>&lt;/p></description></item><item><title>Docs: Kubernetes 扩展</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E6%89%A9%E5%B1%95/Kubernetes-%E6%89%A9%E5%B1%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E6%89%A9%E5%B1%95/Kubernetes-%E6%89%A9%E5%B1%95/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kubernetes.io/docs/concepts/extend-kubernetes/extend-cluster/">官方文档，概念 - 扩展 Kubernetes - 扩展集群&lt;/a>&lt;/li>
&lt;li>概念：&lt;/li>
&lt;li>任务：&lt;a href="https://kubernetes.io/docs/tasks/extend-kubernetes/">https://kubernetes.io/docs/tasks/extend-kubernetes/&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>这里引用张磊大佬的一张图来开篇&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/eo9qpz/1619144340194-3bfc699a-f6ca-4732-b4f2-0d49c7512b1a.jpeg" alt="">&lt;/p>
&lt;p>Kubernetes 是高度可配置和可扩展的。因此，极少需要分发或提交补丁代码给 Kubernetes 项目。通过对 Kubernetes 的扩展，可以将中间狭窄的部分扩大。&lt;/p>
&lt;p>本文档介绍自定义 Kubernetes 集群的方式。本文档的目标读者包括希望了解如何使 Kubernetes 集群满足其业务环境需求的 &lt;a href="https://kubernetes.io/zh/docs/reference/glossary/?all=true#term-cluster-operator">集群运维人员&lt;/a>、 Kubernetes 项目的&lt;a href="https://kubernetes.io/zh/docs/reference/glossary/?all=true#term-contributor">贡献者&lt;/a>。 或潜在的&lt;a href="https://kubernetes.io/zh/docs/reference/glossary/?all=true#term-platform-developer">平台开发人员&lt;/a> 也可以从本文找到有用的信息，如对已存在扩展点和模式的介绍，以及它们的权衡和限制。&lt;/p>
&lt;p>自定义方法可以大致分为两类&lt;/p>
&lt;ol>
&lt;li>Configuration (配置) # 配置只涉及更改标志参数、本地配置文件或 API 资源；&lt;/li>
&lt;li>Extension (扩展) # 扩展涉及运行额外的程序或服务。&lt;/li>
&lt;/ol>
&lt;p>扩展的实现依赖于某些特殊配置，这些配置可能在某些 k8s 发行版中并不自带。需要自行修改程序参数来让集群支撑某些扩展方式。&lt;/p>
&lt;h2 id="配置-kubernetes-集群">配置 Kubernetes 集群&lt;a class="td-heading-self-link" href="#%e9%85%8d%e7%bd%ae-kubernetes-%e9%9b%86%e7%be%a4" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>关于 配置文件 和 标志 的说明文档位于在线文档的&amp;quot;参考&amp;quot;部分，按照可执行文件组织：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kubernetes.io/zh/docs/reference/command-line-tools-reference/kubelet/">kubelet&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/zh/docs/reference/command-line-tools-reference/kube-apiserver/">kube-apiserver&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/zh/docs/reference/command-line-tools-reference/kube-controller-manager/">kube-controller-manager&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/zh/docs/reference/command-line-tools-reference/kube-scheduler/">kube-scheduler&lt;/a>.&lt;/li>
&lt;/ul>
&lt;p>在托管的 Kubernetes 服务或受控安装的 Kubernetes 版本中，标志和配置文件可能并不总是可以更改的。而且当它们可以进行更改时，它们通常只能由集群管理员进行更改。此外，标志和配置文件在未来的 Kubernetes 版本中可能会发生变化，并且更改设置后它们可能需要重新启动进程。出于这些原因，只有在没有其他选择的情况下才使用它们。&lt;/p>
&lt;p>内置策略 API ，例如 &lt;a href="https://kubernetes.io/zh/docs/concepts/policy/resource-quotas/">ResourceQuota&lt;/a>、 &lt;a href="https://kubernetes.io/zh/docs/concepts/policy/pod-security-policy/">PodSecurityPolicy&lt;/a>、 &lt;a href="https://kubernetes.io/zh/docs/concepts/services-networking/network-policies/">NetworkPolicy&lt;/a> 和基于角色的权限控制 (&lt;a href="https://kubernetes.io/zh/docs/reference/access-authn-authz/rbac/">RBAC&lt;/a>)， 是内置的 Kubernetes API。API 通常与托管的 Kubernetes 服务和受控的 Kubernetes 安装一起使用。 它们是声明性的，并使用与其他 Kubernetes 资源（如 Pod ）相同的约定，所以新的集群配置可以重复使用， 并以与应用程序相同的方式进行管理。 而且，当它们变稳定后，也遵循和其他 Kubernetes API 一样的 &lt;a href="https://kubernetes.io/docs/reference/using-api/deprecation-policy/">支持政策&lt;/a>。 出于这些原因，在合适的情况下它们优先于 配置文件 和 标志 被使用。&lt;/p>
&lt;h2 id="扩展-kubernetes-集群">扩展 Kubernetes 集群&lt;a class="td-heading-self-link" href="#%e6%89%a9%e5%b1%95-kubernetes-%e9%9b%86%e7%be%a4" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Kubernetes 的设计是通过编写客户端程序来实现自动化的。 任何读和（或）写 Kubernetes API 的程序都可以提供有用的自动化工作。 自动化 程序可以运行在集群之中或之外。按照本文档的指导，你可以编写出高可用的和健壮的自动化程序。 自动化程序通常适用于任何 Kubernetes 集群，包括托管集群和受管理安装的集群。&lt;/p>
&lt;p>控制器（Controller） 模式是编写适合 Kubernetes 的客户端程序的一种特定模式。 控制器通常读取一个对象的 .spec 字段，可能做出一些处理，然后更新对象的 .status 字段。&lt;/p>
&lt;p>一个控制器是 Kubernetes 的一个客户端。 当 Kubernetes 作为客户端调用远程服务时，它被称为 Webhook ， 远程服务称为 Webhook 后端。 和控制器类似，Webhooks 增加了一个失败点。&lt;/p>
&lt;p>在 webhook 模型里，Kubernetes 向远程服务发送一个网络请求。 在 可执行文件插件 模型里，Kubernetes 执行一个可执行文件（程序）。 可执行文件插件被 kubelet（如 &lt;a href="https://github.com/kubernetes/community/blob/master/contributors/devel/flexvolume.md">Flex 卷插件&lt;/a>和 &lt;a href="https://kubernetes.io/zh/docs/concepts/extend-kubernetes/compute-storage-net/network-plugins/">网络插件&lt;/a>和 kubectl 所使用。&lt;/p>
&lt;h1 id="扩展-kubernetes-集群的方式">扩展 Kubernetes 集群的方式：&lt;a class="td-heading-self-link" href="#%e6%89%a9%e5%b1%95-kubernetes-%e9%9b%86%e7%be%a4%e7%9a%84%e6%96%b9%e5%bc%8f" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="kubernetes-api-扩展">Kubernetes API 扩展&lt;a class="td-heading-self-link" href="#kubernetes-api-%e6%89%a9%e5%b1%95" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes%20%E6%89%A9%E5%B1%95/Custom%20Resource%20Definitions(CRD).md">Custom Resource Definitions(自定义资源定义)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes%20%E6%89%A9%E5%B1%95/API%20Aggregation(%E8%81%9A%E5%90%88)%20Layer.md">API Aggregation(聚合) Layer&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes%20%E6%89%A9%E5%B1%95/Operator%20%E6%A8%A1%E5%BC%8F.md">Operator 模式&lt;/a>&lt;/li>
&lt;/ol>
&lt;h2 id="计算存储网络扩展">计算、存储、网络扩展。&lt;a class="td-heading-self-link" href="#%e8%ae%a1%e7%ae%97%e5%ad%98%e5%82%a8%e7%bd%91%e7%bb%9c%e6%89%a9%e5%b1%95" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="service-catalog-服务目录详见service-catalog-服务目录">Service Catalog 服务目录。详见：Service Catalog 服务目录&lt;a class="td-heading-self-link" href="#service-catalog-%e6%9c%8d%e5%8a%a1%e7%9b%ae%e5%bd%95%e8%af%a6%e8%a7%81service-catalog-%e6%9c%8d%e5%8a%a1%e7%9b%ae%e5%bd%95" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h1 id="扩展点">扩展点&lt;a class="td-heading-self-link" href="#%e6%89%a9%e5%b1%95%e7%82%b9" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>扩展点的意思就是在 kubernetes 可以实现扩展的位置。“点” 这个字的意思类似与这种语境(我下面要说的几点注意事项。某件事物的触发点。兴奋点。G 点哈哈囧)&lt;/p>
&lt;p>下图显示了各种扩展点如何与 Kubernetes 控制平面进行交互。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/eo9qpz/1619144357206-5faf80b1-f5f1-4daa-bc39-26ab29976d5e.jpeg" alt="">&lt;/p>
&lt;p>下图显示了 Kubernetes 系统的扩展点。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/eo9qpz/1619144364591-352e19a9-91b8-4a9d-a257-13dc02b6008e.jpeg" alt="">&lt;/p>
&lt;ol>
&lt;li>用户通常使用 kubectl 与 Kubernetes API 进行交互。 &lt;a href="https://kubernetes.io/zh/docs/tasks/extend-kubectl/kubectl-plugins/">kubectl 插件&lt;/a>扩展了 kubectl 可执行文件。 它们只影响个人用户的本地环境，因此不能执行站点范围的策略。&lt;/li>
&lt;li>API 服务器处理所有请求。API 服务器中的几种类型的扩展点允许对请求进行身份认证或根据其内容对其进行阻止、 编辑内容以及处理删除操作。这些内容在 &lt;a href="https://kubernetes.io/zh/docs/concepts/extend-kubernetes/#api-access-extensions">API 访问扩展&lt;/a>小节中描述。&lt;/li>
&lt;li>API 服务器提供各种 资源（Resource） 。 内置的资源种类（Resource Kinds） ，如 pods， 由 Kubernetes 项目定义，不能更改。你还可以添加你自己定义的资源或其他项目已定义的资源， 称为 自定义资源（Custom Resource），如&lt;a href="https://kubernetes.io/zh/docs/concepts/extend-kubernetes/#user-defined-types">自定义资源&lt;/a> 部分所述。自定义资源通常与 API 访问扩展一起使用。&lt;/li>
&lt;li>Kubernetes 调度器决定将 Pod 放置到哪个节点。有几种方法可以扩展调度器。 这些内容在&lt;a href="https://kubernetes.io/zh/docs/concepts/extend-kubernetes/#scheduler-extensions">调度器扩展&lt;/a> 小节中描述。&lt;/li>
&lt;li>Kubernetes 的大部分行为都是由称为控制器（Controllers）的程序实现的，这些程序是 API 服务器的客户端。 控制器通常与自定义资源一起使用。&lt;/li>
&lt;li>kubelet 在主机上运行，并帮助 Pod 看起来就像在集群网络上拥有自己的 IP 的虚拟服务器。 &lt;a href="https://kubernetes.io/zh/docs/concepts/extend-kubernetes/#network-plugins/">网络插件&lt;/a>让你可以实现不同的 pod 网络。&lt;/li>
&lt;li>kubelet 也负责为容器挂载和卸载卷。新的存储类型可以通过 &lt;a href="https://kubernetes.io/docs/concepts/extend-kubernetes/#storage-plugins">存储插件&lt;/a>支持。&lt;/li>
&lt;/ol>
&lt;p>如果你不确定从哪里开始扩展，下面流程图可以提供一些帮助。请注意，某些解决方案可能涉及多种类型的扩展。&lt;/p></description></item><item><title>Docs: API Aggregation(聚合) Layer</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E6%89%A9%E5%B1%95/API-Aggregation%E8%81%9A%E5%90%88-Layer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E6%89%A9%E5%B1%95/API-Aggregation%E8%81%9A%E5%90%88-Layer/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考；&lt;/p>
&lt;ul>
&lt;li>官方文档参考：
&lt;ul>
&lt;li>&lt;a href="https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/apiserver-aggregation/">https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/apiserver-aggregation/&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>api aggregation 称为 api 聚合。用于扩展 kubernetes 的 API 。如下所示。其中 v1beta1.metrics.k8s.io 是通过 prometheus-adapter 添加的新 API&lt;/p>
&lt;pre>&lt;code>[root@master-1 ~]# kubectl get apiservices.apiregistration.k8s.io
NAME SERVICE AVAILABLE AGE
v1. Local True 163d
.........
v1beta1.metrics.k8s.io monitoring/prometheus-adapter True 120m
v1beta1.networking.k8s.io Local True 163d
......
&lt;/code>&lt;/pre>
&lt;p>聚合出来的 API 会关联到一个指定的 service 上，所有对该 API 发起的请求，都会交由该 service 并转发到其后端的 pod 进行处理。&lt;/p>
&lt;p>下面是一个扩展 API 的样例，其中指定了该 API 所关联的 service&lt;/p>
&lt;pre>&lt;code>apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
name: v1beta1.metrics.k8s.io
spec:
group: metrics.k8s.io
groupPriorityMinimum: 100
insecureSkipTLSVerify: true
service:
name: prometheus-adapter
namespace: monitoring
version: v1beta1
versionPriority: 100
&lt;/code>&lt;/pre>
&lt;p>API Aggregation 的核心功能是动态注册、发现汇总、安全代理。&lt;/p>
&lt;h1 id="配置-api-aggregation">配置 API Aggregation&lt;a class="td-heading-self-link" href="#%e9%85%8d%e7%bd%ae-api-aggregation" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>官方文档：&lt;a href="https://kubernetes.io/docs/tasks/extend-kubernetes/configure-aggregation-layer/">https://kubernetes.io/docs/tasks/extend-kubernetes/configure-aggregation-layer/&lt;/a>&lt;/p>
&lt;h1 id="应用实例">应用实例&lt;a class="td-heading-self-link" href="#%e5%ba%94%e7%94%a8%e5%ae%9e%e4%be%8b" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>可以参考 heapster 和 metrics-server 之间的过渡关系：kubectl top 命令解析.note 这里面谈到了 api 聚合 的用例。&lt;/p></description></item><item><title>Docs: API 扩展</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E6%89%A9%E5%B1%95/API-%E6%89%A9%E5%B1%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E6%89%A9%E5%B1%95/API-%E6%89%A9%E5%B1%95/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/">官方文档，概念 - 扩展 Kubernetes - 扩展 Kubernetes API&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Resource(资源) 是 Kubernetes API 中的一个 endpoint(端点)， 其中存储的是某个类别的 API 对象 的一个集合。 例如内置的 pods 资源包含一组 Pod 对象。(这里面“点”的意思是这么一种语境。我说的几点记住了吗？知识点。等等)&lt;/p>
&lt;p>而扩展 Kubernetes API 实际上就是添加 &lt;strong>Custom Resource(自定义的资源)&lt;/strong>。&lt;/p>
&lt;h2 id="custom-resource-自定义资源">Custom Resource 自定义资源&lt;a class="td-heading-self-link" href="#custom-resource-%e8%87%aa%e5%ae%9a%e4%b9%89%e8%b5%84%e6%ba%90" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>什么是自定义资源呢？&lt;/strong>&lt;/p>
&lt;p>如 &lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/API%20Resource%20%E4%B8%8E%20Object/API%20%E4%B8%8E%20Resource.md">API 与 Resource&lt;/a> 中介绍的，Kubernetes 自身的一切都抽象为 Resource(资源)。顾名思义，Custom Resource(自定义资源) 就是非 Kubernetes 核心的资源。如果要类比的话，那么 Custom Resource 与 Kubernetes 的关系，类似于 Linux 中，Module(模块) 与 Kernel(内核) 的关系。其实，再准确的说法应该是下文将要提到的 Operator，Operator 与 Kubernetes 的关系，类似于 Linux 中，Module(模块) 与 Kernel(内核) 的关系。现在很多 Kubernetes 核心功能现在都用自定义资源来实现，这使得 Kubernetes 更加模块化。&lt;/p>
&lt;p>自定义资源可以像普通资源(比如.pod)一样被创建和销毁。一旦某个自定义资源被安装，就可以使用 kubectl 来创建和访问其中的对象，就像为 pods 这种内置资源所做的一样。&lt;/p>
&lt;p>添加 Custom Resource 方式有以下两种&lt;/p>
&lt;ol>
&lt;li>CustomResourceDefinitions(自定义资源)
&lt;ol>
&lt;li>使用 CustomResourceDefinition 对象来创建一个或多个 CRD 资源。&lt;/li>
&lt;li>相对简单，创建 CRD 可以不必编程。详见：Custom Resource Definitions(CRD)&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>API Aggregation(API 聚合)
&lt;ol>
&lt;li>使用 APIService 对象来创建一个或多个 API 聚合 资源。&lt;/li>
&lt;li>需要编程，但支持对 API 行为进行更多的控制，例如数据如何存储以及在不同 API 版本间如何转换等。详见：API Aggregation(聚合) Layer&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>Kubernetes 提供的上述两种选项以满足不同用户的需求，这样就既不会牺牲易用性也不会牺牲灵活性。&lt;/p>
&lt;ul>
&lt;li>聚合 API 指的是一些下位的 API 服务器，运行在主 API 服务器后面；主 API 服务器以代理的方式工作。这种组织形式称作 API 聚合（API Aggregation，AA） 。 对用户而言，看起来仅仅是 Kubernetes API 被扩展了。&lt;/li>
&lt;li>CRD 允许用户创建新的资源类别同时又不必添加新的 API 服务器。 使用 CRD 时，你并不需要理解 API 聚合。&lt;/li>
&lt;/ul>
&lt;p>无论以哪种方式安装自定义资源，新的资源都会被当做自定义资源，以便与内置的 Kubernetes 资源(如 Pods) 和 内置的 API(如 v1.apps) 相区分。&lt;/p>
&lt;h2 id="custom-controller-自定义控制器">Custom Controller 自定义控制器&lt;a class="td-heading-self-link" href="#custom-controller-%e8%87%aa%e5%ae%9a%e4%b9%89%e6%8e%a7%e5%88%b6%e5%99%a8" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>为什么需要 Custom Controller 呢？&lt;/strong>&lt;/p>
&lt;p>需要 Custom Controller 的原因，就要从 Kubernetes 的 声明式 API 的特点说起，基于这种特点，所有资源都基于 Kubernetes 的控制器模型来维护其自身的状态。那么当我们创建一个 Custom Resource 时，谁又来维护它的状态的呢？这就是 Custom Controller 的由来。Custom Resource 不能由集群的 controller-manager 来维护，必须要自定义一个 Controller 才可以。&lt;/p>
&lt;p>就 Custom Resource 本身而言，它只能用来存取结构化的数据。 当你将 Custom Resource 与 Custom Controller 相结合时，就能够提供真正的声明式 API（Declarative API）。&lt;/p>
&lt;p>使用&lt;a href="https://kubernetes.io/zh/docs/concepts/overview/kubernetes-api/">声明式 API&lt;/a>， 你可以声明或者设定你的资源的期望状态，并尝试让 Kubernetes 对象的当前状态 同步到其期望状态。控制器负责将结构化的数据解释为用户所期望状态的记录，并持续地维护该状态。&lt;/p>
&lt;p>Custom Controller 与 Custom Resource 不同，并不能通过原生对象来直接创建。Custom Controller 是一个逻辑上的概念。&lt;/p>
&lt;p>一般通过代码编写一个程序，以 Pod 方式运行在集群中，专门用来监听 Custom Resource 的状态，这种运作模型的程序，就是 Custom Controller。在一个运行中的集群上部署和更新自定义控制器，这类操作与集群的生命周期无关。 自定义控制器可以用于任何类别的资源，不过它们与自定义资源结合起来时最为有效。&lt;/p>
&lt;h2 id="operator-模式">Operator 模式&lt;a class="td-heading-self-link" href="#operator-%e6%a8%a1%e5%bc%8f" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>将 Custom Resource 与 Custom Controller 结合起来使用就是 &lt;a href="https://coreos.com/blog/introducing-operators.html">Operator 模式&lt;/a>。你可以使用 Custom Controller 来将特定于某应用的领域知识组织起来，以编码的形式构造对 Kubernetes API 的扩展。&lt;/p>
&lt;p>详见：Operator 模式介绍&lt;/p>
&lt;p>所以，Operator 也可以称为 Custom Controller。&lt;/p>
&lt;h1 id="应用示例">应用示例&lt;a class="td-heading-self-link" href="#%e5%ba%94%e7%94%a8%e7%a4%ba%e4%be%8b" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>kube-prometheus 项目就是一个典型的 API 扩展，其中包含 prometheus 这个 operater，还有多种 CRD ，还有名为 v1beta1.metrics.k8s.io 的聚合 API。这一整套扩展组合出来一个自动化的 prometheus 产品。prometheus-operator 会管理各种 CRD 创建出来的资源，以及 v1beta1.metrics.k8s.io 这个聚合 API 所关联的 service 的后端 pod 的状态。&lt;/p></description></item><item><title>Docs: Custom Resource Definitions(CRD)</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E6%89%A9%E5%B1%95/Custom-Resource-DefinitionsCRD/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E6%89%A9%E5%B1%95/Custom-Resource-DefinitionsCRD/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/#customresourcedefinitions">官方文档，概念 - 扩展 Kubernetes - 扩展 API - 自定义资源，CRD&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Custom Resource Definitions 自定义资源定义，简称 CRD&lt;/strong>。是一个 Kubernetes 的 API 对象。其前身是 Kubernetes1.6 版本中一个叫做 ThirdPartyResource(第三方资源，简称 TPR) 的内建对象，可以用它来创建自定义资源，但该对象在 kubernetes1.7 中版本已被 CRD（CustomResourceDefinition）取代。&lt;strong>CRD 的目的是让 Kubernetes API 能够认识新对象(就是 yaml 中的 kind)&lt;/strong>。所以通过 CRD 创建的对象可以跟 kubernetes 中内建对象一样使用 kubectl 操作，就像 kubectl 操作 pod 一样，如果我定义了一个名为 lch 的 crd ，那么我可以使用 kubectl get lch 命令来操作 lch 这个资源&lt;/p>
&lt;p>注意：单纯设置了 CRD，并没有什么用，只有跟自定义控制器(controller)结合起来，才能将资源对象中的声明式 API 翻译成用户所期望的状态。自定义控制器可以用来管理任何资源类型，但是一般是跟 CRD 结合使用。自定义控制器称为 &lt;a href="docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes%20%E6%89%A9%E5%B1%95/Operator%20%E6%A8%A1%E5%BC%8F.md">Operator&lt;/a>。&lt;/p>
&lt;p>为什么这么说呢？&lt;/p>
&lt;p>比如，在一个 pod 的 yaml 文件里每一个字段就是对该资源的定义，name 字段定义了该资源名字，image 字段定义了 pod 这个资源的 container 所使用的镜像等等。但是，既然有字段可以定义一个 k8s 资源，那么谁又来决定这个字段就是其所描述的功能呢？~答案当然是 kubernetes 主程序(也就是 kube-controller)。&lt;/p>
&lt;p>所以上文“注意”里描述的也是同样的道理，自己定义了一个资源的的各个字段，那么谁又能实现这个自定义资源各个字段所描述的功能呢(既然叫自定义，那么自定义的东西一般主程序是不认识的)？这就需要自定义控制器了(作为一个翻译器，把自定义的资源翻译成 k8s 主程序可以理解的东西)，所以 CRD 单独使用别没有什么作用，你想啊，咱自己定义了一个资源的一个字段，但是 kubernetes 没法识别这个字段是干什么用的，所以才需要一个第三方的工具，把这个字段的作用翻译给 kubernetes。一般情况下，自定义控制器是开发人员开发的一款程序，可以通过 Deployment 的方式部署在 k8s 集群上。与此同时，自定义控制器只需要持续监听关联的的 CRD ，让其保持声明的状态一致即可。(自定义控制器 与 controlller-manager 监控 deployment、job 等资源的行为是类似的)&lt;/p>
&lt;h1 id="crd-的使用方式">CRD 的使用方式&lt;a class="td-heading-self-link" href="#crd-%e7%9a%84%e4%bd%bf%e7%94%a8%e6%96%b9%e5%bc%8f" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>官方文档：&lt;a href="https://kubernetes.io/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definitions/">https://kubernetes.io/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definitions/&lt;/a>&lt;/p>
&lt;p>Kubernetes 中的 CustomResourceDefinition API 资源允许你定义定制资源。 定义 CRD 对象的操作会使用你所设定的名字和模式定义（Schema）创建一个新的定制资源， Kubernetes API 负责为你的定制资源提供存储和访问服务。 CRD 对象的名称必须是合法的 &lt;a href="https://kubernetes.io/zh/docs/concepts/overview/working-with-objects/names/#dns-subdomain-names">DNS 子域名&lt;/a>。&lt;/p>
&lt;p>CRD 使得你不必编写自己的 API 服务器来处理定制资源，不过其背后实现的通用性也意味着 你所获得的灵活性要比 &lt;a href="https://kubernetes.io/zh/docs/concepts/extend-kubernetes/api-extension/custom-resources/#api-server-aggregation">API 服务器聚合&lt;/a>少很多。&lt;/p>
&lt;p>关于如何注册新的定制资源、使用新资源类别的实例以及如何使用控制器来处理事件， 相关的例子可参见&lt;a href="https://github.com/kubernetes/sample-controller">定制控制器示例&lt;/a>。&lt;/p>
&lt;p>参考下面的 CRD，resourcedefinition.yaml：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">apiVersion&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">apiextensions.k8s.io/v1beta1&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">kind&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">CustomResourceDefinition&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">metadata&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># 名称必须符合下面的格式：&amp;lt;plural&amp;gt;.&amp;lt;group&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">crontabs.stable.example.com&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">spec&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># REST API使用的组名称：/apis/&amp;lt;group&amp;gt;/&amp;lt;version&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">group&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">stable.example.com&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># REST API使用的版本号：/apis/&amp;lt;group&amp;gt;/&amp;lt;version&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">version&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">v1&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># Namespaced或Cluster&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">scope&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Namespaced&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">names&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># URL中使用的复数名称: /apis/&amp;lt;group&amp;gt;/&amp;lt;version&amp;gt;/&amp;lt;plural&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">plural&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">crontabs&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># CLI中使用的单数名称&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">singular&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">crontab&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># CamelCased格式的单数类型。在清单文件中使用&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">kind&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">CronTab&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># CLI中使用的资源简称&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">shortNames&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">ct&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建该 CRD：&lt;/p>
&lt;p>kubectl create -f resourcedefinition.yaml&lt;/p>
&lt;p>访问 RESTful API 端点如 &lt;a href="http://172.20.0.113:8080">http://172.20.0.113:8080&lt;/a> 将看到如下 API 端点已创建：&lt;/p>
&lt;p>/apis/stable.example.com/v1/namespaces/*/crontabs/&amp;hellip;&lt;/p>
&lt;p>&lt;strong>创建自定义对象&lt;/strong>&lt;/p>
&lt;p>如下所示：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">apiVersion&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;stable.example.com/v1&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">kind&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">CronTab&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">metadata&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">my-new-cron-object&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">spec&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">cronSpec&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;* * * * /5&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">image&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">my-awesome-cron-image&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>引用该自定义资源的 API 创建对象。&lt;/p>
&lt;p>&lt;strong>终止器&lt;/strong>&lt;/p>
&lt;p>可以为自定义对象添加一个终止器，如下所示：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">apiVersion&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;stable.example.com/v1&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">kind&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">CronTab&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">metadata&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">finalizers&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">finalizer.stable.example.com&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>删除自定义对象前，异步执行的钩子。对于具有终止器的一个对象，删除请求仅仅是为 metadata.deletionTimestamp 字段设置一个值，而不是删除它，这将触发监控该对象的控制器执行他们所能处理的任意终止器。&lt;/p>
&lt;p>详情参考：&lt;a href="https://kubernetes.io/docs/tasks/access-kubernetes-api/extend-api-custom-resource-definitions/">Extend the Kubernetes API with CustomResourceDefinitions&lt;/a>&lt;/p></description></item><item><title>Docs: Service Catalog 服务目录</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E6%89%A9%E5%B1%95/Service-Catalog-%E6%9C%8D%E5%8A%A1%E7%9B%AE%E5%BD%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E6%89%A9%E5%B1%95/Service-Catalog-%E6%9C%8D%E5%8A%A1%E7%9B%AE%E5%BD%95/</guid><description/></item></channel></rss>