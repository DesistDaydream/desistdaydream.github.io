<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kubernetes 管理案例 on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%AE%A1%E7%90%86/Kubernetes-%E7%AE%A1%E7%90%86%E6%A1%88%E4%BE%8B/</link><description>Recent content in Kubernetes 管理案例 on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%AE%A1%E7%90%86/Kubernetes-%E7%AE%A1%E7%90%86%E6%A1%88%E4%BE%8B/index.xml" rel="self" type="application/rss+xml"/><item><title>Kubernetes 管理案例</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%AE%A1%E7%90%86/Kubernetes-%E7%AE%A1%E7%90%86%E6%A1%88%E4%BE%8B/Kubernetes-%E7%AE%A1%E7%90%86%E6%A1%88%E4%BE%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%AE%A1%E7%90%86/Kubernetes-%E7%AE%A1%E7%90%86%E6%A1%88%E4%BE%8B/Kubernetes-%E7%AE%A1%E7%90%86%E6%A1%88%E4%BE%8B/</guid><description>概述 参考：
资源删除场景 处于 Terminating 状态的对象处理 使用 kubectl edit 命令来编辑该对象的配置，删除其中 finalizers 字段及其附属字段，即可.
也可以使用 patch 命令来删除 finalizers 字段
kubectl patch -n NS Resource ResourceName -p &amp;#39;{&amp;#34;metadata&amp;#34;:{&amp;#34;finalizers&amp;#34;:null}}&amp;#39; -n log 或
kubectl patch -n test configmap mymap \ --type json \ --patch=&amp;#39;[ { &amp;#34;op&amp;#34;: &amp;#34;remove&amp;#34;, &amp;#34;path&amp;#34;: &amp;#34;/metadata/finalizers&amp;#34; } ]&amp;#39; 资源无法删除 首先使用命令找到该 ns 还有哪些对象，最后的 NAMESPACE 改为自己想要查找的 ns 名
export NAMESPACE=&amp;#34;test&amp;#34; kubectl api-resources \ --verbs=list --namespaced -o name | xargs -n 1 \ kubectl get --show-kind --ignore-not-found -n NAMESPACE 找到对象后，删除，如果删不掉，使用处理 Terminationg 状态对象的方法进行处理</description></item><item><title>Etcd 备份与恢复</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%AE%A1%E7%90%86/Kubernetes-%E7%AE%A1%E7%90%86%E6%A1%88%E4%BE%8B/Etcd-%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%AE%A1%E7%90%86/Kubernetes-%E7%AE%A1%E7%90%86%E6%A1%88%E4%BE%8B/Etcd-%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/</guid><description>系统环境：
Etcd 版本：3.4.3 Kubernetes 版本：1.18.8 Kubernetes 安装方式：Kubeadm 备份 Etcd 数据 本人采用的是 Kubeadm 安装的 Kubernetes 集群，采用镜像方式部署的 Etcd，所以操作 Etcd 需要使用 Etcd 镜像提供的 Etcdctl 工具。如果是非镜像方式部署 Etcd，可以直接使用 Etcdctl 命令备份数据。
# 备份现有 Etcd 数据和manifests mkdir -p /root/backup/kubernetes/ cp -r /var/lib/etcd/member /root/backup/kubernetes/member-$(date +%F) cp -r /etc/kubernetes/manifests /root/backup/kubernetes/manifests-$(date +%F) # 通过运行 Etcd 镜像，并且使用镜像内部的 etcdctl 工具连接 etcd 集群，执行数据快照备份： docker run --rm --name etcdctl \ -v /root/backup/kubernetes:/backup \ -v /etc/kubernetes/pki/etcd:/etc/kubernetes/pki/etcd:ro \ --env ETCDCTL_API=3 \ registry.aliyuncs.com/k8sxio/etcd:3.4.13-0 \ /bin/sh -c &amp;#34;etcdctl --endpoints=https://172.</description></item><item><title>更新 APIServer 证书</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%AE%A1%E7%90%86/Kubernetes-%E7%AE%A1%E7%90%86%E6%A1%88%E4%BE%8B/%E6%9B%B4%E6%96%B0-APIServer-%E8%AF%81%E4%B9%A6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%AE%A1%E7%90%86/Kubernetes-%E7%AE%A1%E7%90%86%E6%A1%88%E4%BE%8B/%E6%9B%B4%E6%96%B0-APIServer-%E8%AF%81%E4%B9%A6/</guid><description>概述 参考：
原文链接：https://mp.weixin.qq.com/s/bs0urFxOG71nq9K34H1b6Q 本文我们将了解如何将一个新的 DNS 名称或者 IP 地址添加到 Kubernetes APIServer 使用的 TLS 证书中。在某些情况下默认的证书包含的名称可能不能满足我们的要求，又或者是 APIServer 地址有所变化，都需要重新更新证书。
我们这里的集群是使用 kubeadm 搭建的单 master 集群，使用的也是 kubeadm 在启动集群时创建的默认证书授权 CA，对于其他环境的集群不保证本文也同样适用。
Kubernetes APIServer 使用数字证书来加密 APIServer 的相关流量以及验证到 APIServer 的连接。所以如果我们想使用命令行客户端（比如 kubectl）连接到 APIServer，并且使用的主机名或者 IP 地址不包括在证书的 subject 的备选名称（SAN）列表中的话，访问的时候可能会出错，会提示对指定的 IP 地址或者主机名访问证书无效。要解决这个问题就需要更新证书，使 SAN 列表中包含所有你将用来访问 APIServer 的 IP 地址或者主机名。
步骤 生成 kubeadm 配置文件 因为集群是使用 kubeadm 搭建的，所以我们可以直接使用 kubeadm 来更新 APIServer 的证书，来保证在 SAN 列表中包含额外的名称。
首页我们一个 kubeadm 的配置文件，如果一开始安装集群的时候你就是使用的配置文件，那么我们可以直接更新这个配置文件，但是如果你没有使用配置文件，直接使用的 kubeadm init 来安装的集群，那么我们可以从集群中获取 kubeadm 的配置信息来创建一个配置文件，因为 kubeadm 会将其配置写入到 kube-system 命名空间下面一个名为 kubeadm-config 的 ConfigMap 中。可以直接执行如下所示的命令将该配置导出：</description></item><item><title>将单 master 升级为多 master 集群</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%AE%A1%E7%90%86/Kubernetes-%E7%AE%A1%E7%90%86%E6%A1%88%E4%BE%8B/%E5%B0%86%E5%8D%95-master-%E5%8D%87%E7%BA%A7%E4%B8%BA%E5%A4%9A-master-%E9%9B%86%E7%BE%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%AE%A1%E7%90%86/Kubernetes-%E7%AE%A1%E7%90%86%E6%A1%88%E4%BE%8B/%E5%B0%86%E5%8D%95-master-%E5%8D%87%E7%BA%A7%E4%B8%BA%E5%A4%9A-master-%E9%9B%86%E7%BE%A4/</guid><description>如何将单 master 升级为多 master 集群 前面我们课程中的集群是单 master 的集群，对于生产环境风险太大了，非常有必要做一个高可用的集群(https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/ha-topology/)，这里的高可用主要是针对控制面板来说的，比如 kube-apiserver、etcd、kube-controller-manager、kube-scheduler 这几个组件，其中 kube-controller-manager 于 kube-scheduler 组件是 Kubernetes 集群自己去实现的高可用，当有多个组件存在的时候，会自动选择一个作为 Leader 提供服务，所以不需要我们手动去实现高可用，apiserver 和 etcd 就需要手动去搭建高可用的集群的。
高可用的架构有很多，比如典型的 haproxy + keepalived 架构，或者使用 nginx 来做代理实现。我们这里为了说明如何将单 master 升级为高可用的集群，采用相对更简单的 nginx 模式，当然这种模式也有一些缺点，但是足以说明高可用的实现方式了。架构如下图所示：
从上面架构图上可以看出来，我们需要在所有的节点上安装一个 nginx 来代理 apiserver，这里我们准备 3 个节点作为控制平面节点：ydzs-master、ydzs-master2、ydzs-master3，这里我们默认所有节点都已经正常安装配置好了 Docker：
在开始下面的操作之前，在所有节点 hosts 中配置如下所示的信息：
$ cat /etc/hosts 127.0.0.1 api.k8s.local 10.151.30.70 ydzs-master2 10.151.30.71 ydzs-master3 10.151.30.11 ydzs-master 10.151.30.57 ydzs-node3 10.151.30.59 ydzs-node4 10.151.30.60 ydzs-node5 10.151.30.62 ydzs-node6 10.151.30.22 ydzs-node1 10.151.30.23 ydzs-node2 免责声明：本文操作已验证成功，但并不保证对集群没有任何影响，在操作之前一定做好备份，由此对集群产生的任何影响本人概不负责~
更新证书 由于我们要将集群替换成高可用的集群，那么势必会想到我们会用一个负载均衡器来代理 APIServer，也就是这个负载均衡器访问 APIServer 的时候要能正常访问，所以默认安装的 APIServer 证书就需要更新，因为里面没有包含我们需要的地址，需要保证在 SAN 列表中包含一些额外的名称。</description></item></channel></rss>