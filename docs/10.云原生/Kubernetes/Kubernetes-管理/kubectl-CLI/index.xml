<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>kubectl CLI on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%AE%A1%E7%90%86/kubectl-CLI/</link><description>Recent content in kubectl CLI on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%AE%A1%E7%90%86/kubectl-CLI/index.xml" rel="self" type="application/rss+xml"/><item><title>kubectl CLI</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%AE%A1%E7%90%86/kubectl-CLI/kubectl-CLI/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%AE%A1%E7%90%86/kubectl-CLI/kubectl-CLI/</guid><description>概述 参考：
官方文档，参考 - kubectl 官方文档，任务 - 安装工具 - kubectl 官方推荐常用命令备忘录 kubectl 所用的 kubeconfig 文件，默认在 ~/.kube/confg，该文件用于定位 Kubernetes 集群以及与 API Server 交互时进行认证，如果没有认证文件则 API Server 无法处理 kubectl 发出的任何指令并返回错误信息。
如果该文件不存在或配置不全(比如没有指定 current-context 字段)，kubectl 则会向 localhost:8080 发起请求(该端口是 API Server 默认监听的不安全端口，该端口不需要认证即可对集群执行所有操作)。
由于 API Server 默认不开启不安全端口，所以在没有配置文件时，就会报如下错误：The connection to the server localhost:8080 was refused - did you specify the right host or port?
如果 kubectl 使用的 KubeConfig 文件中，没有集群的 ca 信息，则会报如下错误：Error from server (BadRequest): the server rejected our request for an unknown reason</description></item><item><title>logs</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%AE%A1%E7%90%86/kubectl-CLI/logs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%AE%A1%E7%90%86/kubectl-CLI/logs/</guid><description>概述 参考：
logs 命令可以打印 pod 中的 container 的日志
kubectl logs [-f] [-p] (POD | TYPE/NAME) [-c CONTAINER] [options] 语法结构
kubectl logs &amp;lt;PodName&amp;gt; # 查看指定 pod 的日志 kubectl logs -f &amp;lt;PodName&amp;gt; # 类似 tail -f 的方式查看(tail -f 实时查看日志文件 tail -f 日志文件 log) kubectl logs &amp;lt;PodName&amp;gt; -c &amp;lt;container_name&amp;gt; # 查看指定 pod 中指定容器的日志 OPTIONS
-f # 实时查看日志文件，类似于 tailf -p,&amp;ndash;previous # 输出 pod 中曾经运行过，但目前已终止的容器的日志。(i.e 查看一个 container 重启之前的日志，用于排障) EXAMPLE
kubectl logs &amp;ndash;namespace=kube-system calico-node-krgz6 calico-node # 查看 calico-node-krgz6 这个 pod 的日志</description></item><item><title>set 与 rollout 更新资源命令</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%AE%A1%E7%90%86/kubectl-CLI/set-%E4%B8%8E-rollout-%E6%9B%B4%E6%96%B0%E8%B5%84%E6%BA%90%E5%91%BD%E4%BB%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%AE%A1%E7%90%86/kubectl-CLI/set-%E4%B8%8E-rollout-%E6%9B%B4%E6%96%B0%E8%B5%84%E6%BA%90%E5%91%BD%E4%BB%A4/</guid><description>概述 参考：
set - 在对象上设定特定的特性 kubectl set COMMAND [OPTIONS]
COMMAND
env # Update environment variables on a pod template image # 更新一个 Pod 模板的镜像 resources # Update resource requests/limits on objects with pod templates selector # Set the selector on a resource serviceaccount # Update ServiceAccount of a resource subject # Update User, Group or ServiceAccount in a RoleBinding/ClusterRoleBinding kubectl set image - 更新资源 更新资源的现有容器映像。可能的资源包括(不区分大小写)pod (po), replicationcontroller (rc), deployment (deploy), daemonset (ds), replicaset (rs)</description></item><item><title>对象的创建与修改命令</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%AE%A1%E7%90%86/kubectl-CLI/%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E4%BF%AE%E6%94%B9%E5%91%BD%E4%BB%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%AE%A1%E7%90%86/kubectl-CLI/%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E4%BF%AE%E6%94%B9%E5%91%BD%E4%BB%A4/</guid><description>概述 参考：
kubectl apply - 声明对象 通过文件或 STDIN(标准输入)声明配置到一个资源中，如果该资源不存在，则会根据所声明的内容自动创建。
有时候我们在使用 apply 应用一个对象时，会遇上类似如下的提示：
The CustomResourceDefinition &amp;#34;XXXXX&amp;#34; is invalid: metadata.annotations: Too long: must have at most 262144 bytes 一个 Manifests 文件太大导致无法 apply，才是就需要使用 replace 来修改对象。或者为 apply 子命令添加 --server-side 标志。
Syntax(语法) kubectl apply -f FILENAME [OPTIONS]
OPTIONS
&amp;ndash;record # 在资源注释中记录当前 kubectl 命令。 如果设置为 false，请不要记录该命令。 如果设置为 true，则记录该命令。 如果未设置，则默认仅在已存在的情况下更新现有注释值。 &amp;ndash;server-side # kubectl edit - 修改对象 kubectl edit (RESOURCE/NAME | -f FILENAME) [OPTIONS]
OPTIONS：
&amp;ndash;save-config=false|true # EXAMPLE
kubectl edit -n service kube-system kubernetes-dashboard kubectl replace - 替换。使用文件或标准输入替换一个资源 Syntax(语法) kubectl replace -f FILENAME [options]</description></item><item><title>config 子命令</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%AE%A1%E7%90%86/kubectl-CLI/config-%E5%AD%90%E5%91%BD%E4%BB%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%AE%A1%E7%90%86/kubectl-CLI/config-%E5%AD%90%E5%91%BD%E4%BB%A4/</guid><description>概述 config 子命令用于控制 User Account(KubeConfig) 的 KubeConfig 文件
Syntax(语法) **kubectl config SUBCOMMAND [options]
SUBCOMMAND 包括：
current-context # 显示当前上下文 Displays the current-context delete-cluster # Delete the specified cluster from the kubeconfig delete-context # 从 kubeconfig 文件中删除指定的上下文 get-clusters # 显示在 kubeconfig 中已经定义的 cluster 信息。Display clusters defined in the kubeconfig get-contexts # 显示在 kubeconfig 中的上下文列表。每行的信息表示包括以*表示当前使用的 context，context 名称，cluster 与 authinfo(认证信息即用户名)，名称空间 rename-context# Renames a context from the kubeconfig file. set # 在 KubeConfig 文件中设置一个单独的值。Sets an individual value in a kubeconfig file set-cluster # 在 kubeconfig 中设定集群条目。 set-context# 在 kubeconfig 中设定上下文条目。Sets a context entry in kubeconfig set-credentials # 在 kubeconfig 中设定用户凭证。 unset# 取消在 KubeConfig 文件中设置的一个单独的值。Unsets an individual value in a kubeconfig file use-context# 在 kubeconfig 中设定当前上下文(即使用哪个用户操作客户端)。 view# 显示已经合并的 KubeConfig 文件或一个指定的 KubeConfig 文件。Display merged kubeconfig settings or a specified kubeconfig file。 OPTIONS &amp;ndash;kubeconfig=/PATH/FILE # 指明要操作的 KubeConfig 文件 SubCommand(子命令) set-cluster # 在 kubeconfig 文件中设置一个集群条目。Sets a cluster entry in kubeconfig kubectl config set-cluster NAME [&amp;ndash;server=server] [&amp;ndash;certificate-authority=PATH/TO/CERTIFICATE/AUTHORITY] [&amp;ndash;insecure-skip-tls-verify=true] [OPTIONS] #</description></item><item><title>get 子命令</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%AE%A1%E7%90%86/kubectl-CLI/get-%E5%AD%90%E5%91%BD%E4%BB%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%AE%A1%E7%90%86/kubectl-CLI/get-%E5%AD%90%E5%91%BD%E4%BB%A4/</guid><description>概述 参考：
5 个冷门但非常实用的 Kubectl 使用技巧 展示对象的信息，get 获得的是该对象的个性信息，describe 获得的是该对象的集群信息
Syntax(语法) kubectl get (TYPE[.VERSION][.GROUP] [NAME | -l label] | TYPE[.VERSION][.GROUP]/NAME &amp;hellip;) [FLAGS]
FLAGS Note：在 kubectl 命令中的 全局 flags 中还有很多有用的 flags 可以用于 get 子命令。比如 -v 指定 debug 等级，-n 指定要操作的 namespace，等等
-A, &amp;ndash;all-namespaces # 列出在所有名称空间中的对象。 &amp;ndash;allow-missing-template-keys=true: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. &amp;ndash;field-selector=STRING # 使用字段选择器根据一个或多个资源字段的值筛选 Kubernetes 对象。支持 =, ==, and !</description></item><item><title>kubectl 扩展</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%AE%A1%E7%90%86/kubectl-CLI/kubectl-%E6%89%A9%E5%B1%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%AE%A1%E7%90%86/kubectl-CLI/kubectl-%E6%89%A9%E5%B1%95/</guid><description>概述 参考：
官方文档 kubectl 有一个称为 Plugins(插件) 机制，可以扩展 kubectl 工具的能力。通过插件，就相当于为 kubectl 添加了子命令。
安装 kubectl 插件 插件是一个独立的可执行文件，名称以 kubectl- 开头。 要安装插件，只需将此可执行文件移动到 $PATH 中的任何位置。
Kubernetes SIG 研发了一款名为 Krew 的插件，这是一个可以管理插件的插件，Krew 之于 Kubectl，就好像 yum/apt 之于 CentOS/Ubuntu。可以使用 Krew 来发现和安装开源的 kubectl 插件。
注意： Krew 插件索引 所维护的 kubectl 插件并未经过安全性审查。 你要了解安装和运行第三方插件的安全风险，因为它们本质上时是一些在你的机器上 运行的程序。
Krew 参考：
GitHub 项目 Krew 配置 ~/.krew/ # Krew 配置文件与存储路径。
./bin/ # Krew 安装的插件的软连接 ./index/default/plugins/ # Krew 发现的插件元数据，想要安装插件，就会通过这里面的元数据信息进行。 ./receipts/ # 已安装的插件的元数据。 ./store/ # Krew 存储路径，所有安装的插件的二进制文件都会在该目录下。 常见 kubectl 插件 kubectl 插件管理工具，项目地址：https://github.</description></item></channel></rss>