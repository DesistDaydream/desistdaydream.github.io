<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kubernetes 监控 on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%AE%A1%E7%90%86/Kubernetes-%E7%9B%91%E6%8E%A7/</link><description>Recent content in Kubernetes 监控 on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%AE%A1%E7%90%86/Kubernetes-%E7%9B%91%E6%8E%A7/index.xml" rel="self" type="application/rss+xml"/><item><title>Kubernetes 监控</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%AE%A1%E7%90%86/Kubernetes-%E7%9B%91%E6%8E%A7/Kubernetes-%E7%9B%91%E6%8E%A7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%AE%A1%E7%90%86/Kubernetes-%E7%9B%91%E6%8E%A7/Kubernetes-%E7%9B%91%E6%8E%A7/</guid><description>概述 参考：
官方文档 对于 Kubernetes 集群的监控一般我们需要考虑以下几个方面：
Kubernetes 节点的监控：比如节点的 cpu、load、disk、memory 等指标 集群系统组件的状态：比如 kubelet、kube-scheduler、kube-controller-manager、kubedns/coredns 等组件的详细运行状态 Pod 的监控：比如 Deployment 的状态、资源请求、调度和 API 延迟等数据指标 Kubernetes 中，应用程序监控不依赖于单个监控解决方案，目前主要有以下几种方案：
Resource Metrics Pipeline# 通过 API Server 中的 Metrics API 暴露的一个用于显示集群指标接口，该接口在集群刚部署完成时，并不是默认自带的。需要通过其他方式来启用这个 API 可以通过 Resource Metrics 或 Full Metrics Pipelines 来收集监控指标数据 cAdvisor # cAdvisor 是 Google 开源的容器资源监控和性能分析工具，它是专门为容器而生，本身也支持 Docker 容器，在 Kubernetes 中，我们不需要单独去安装，cAdvisor 作为 kubelet 内置的一部分程序可以直接使用。kubelet 中的子组件 cAdvisor 来收集资源用量信息，并暴露 OpemMetrics 格式的监控指标。 metrics-server # metrics-server 是一个集群范围内的资源数据聚合工具，其前身是 Heapster。以 Pod 的形式运行在集群中，通过查询每个节点的 kubelet 以获取 CPU 和内存使用情况。 项目地址：https://github.com/kubernetes-sigs/metrics-server Heapster # 由于 Heapster 无法通过 Metrics API 的方式提供监控指标，所以被废弃了。1.</description></item><item><title>kube-state-metrics</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%AE%A1%E7%90%86/Kubernetes-%E7%9B%91%E6%8E%A7/kube-state-metrics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%AE%A1%E7%90%86/Kubernetes-%E7%9B%91%E6%8E%A7/kube-state-metrics/</guid><description>概述 参考：
GitHub 项目，kubernetes/kube-stsate-metrics GitHub 文档，可暴露的所有指标列表 http://www.xuyasong.com/?p=1525 已经有了 cadvisor、Metric Server，几乎容器运行的所有指标都能拿到，但是下面这种情况却无能为力：
我调度了多少个 replicas？现在可用的有几个？ 多少个 Pod 是 running/stopped/terminated 状态？ Pod 重启了多少次？ 我有多少 job 在运行中 而这些则是 kube-state-metrics 提供的内容，它基于 client-go 开发，轮询 Kubernetes API，并将 Kubernetes 的结构化信息转换为 Metrics。
kube-state-metrics 提供的指标，按照阶段分为三种类别：
1.实验性质的：k8s api 中 alpha 阶段的或者 spec 的字段。 2.稳定版本的：k8s 中不向后兼容的主要版本的更新 3.被废弃的：已经不在维护的。 指标类别包括：
CertificateSigningRequest Metrics ConfigMap Metrics CronJob Metrics DaemonSet Metrics Deployment Metrics Endpoint Metrics Horizontal Pod Autoscaler Metrics Ingress Metrics Job Metrics Lease Metrics LimitRange Metrics MutatingWebhookConfiguration Metrics Namespace Metrics NetworkPolicy Metrics Node Metrics PersistentVolume Metrics PersistentVolumeClaim Metrics Pod Disruption Budget Metrics Pod Metrics ReplicaSet Metrics ReplicationController Metrics ResourceQuota Metrics Secret Metrics Service Metrics StatefulSet Metrics StorageClass Metrics ValidatingWebhookConfiguration Metrics VerticalPodAutoscaler Metrics VolumeAttachment Metrics 可以通过 prometheus 配置 scrape 的 target 为 kube-state-metrics ，将数据持久保存起来。</description></item><item><title>Kubernetes 系统组件指标</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%AE%A1%E7%90%86/Kubernetes-%E7%9B%91%E6%8E%A7/Kubernetes-%E7%B3%BB%E7%BB%9F%E7%BB%84%E4%BB%B6%E6%8C%87%E6%A0%87/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%AE%A1%E7%90%86/Kubernetes-%E7%9B%91%E6%8E%A7/Kubernetes-%E7%B3%BB%E7%BB%9F%E7%BB%84%E4%BB%B6%E6%8C%87%E6%A0%87/</guid><description>概述 参考：
官方文档 Kubernetes 系统组件以 Prometheus 格式暴露监控所需的指标。这种格式是结构化的纯文本，人类和机器都可以很方便得阅读。
Kubernetes 的下面几个系统组件默认都会在 /metrics 端点暴露指标信息：
kubelet kubelet 除了基本 /metrics 端点还会在 /metrics/cadvisor、/metrics/resource、/metrics/probes 这几个端点暴露指标 kube-apiserver kube-controller-manager kube-scheduler kube-proxy 想要采集这些组件的指标，通常需要 Prometheus 或类似的程序，配置抓取程序，以便定期收集，并将指标存储在时间序列数据库中。
访问 https 前准备，获取认证所需信息 与[访问 API Server 的 HTTPS](API%20Server.md Server.md) 的方式一样
方法一：使用 kubectl 的配置文件中的证书与私钥 想要访问 https 下的内容，首先需要准备证书与私钥或者 ca 与 token 等等。
首先获取 kubeclt 工具配置文件中的证书与私钥 cat /etc/kubernetes/admin.conf | grep client-certificate-data | awk &amp;lsquo;{print $2}&amp;rsquo; | base64 -d &amp;gt; /root/certs/admin.crt cat /etc/kubernetes/admin.conf | grep client-key-data | awk &amp;lsquo;{print $2}&amp;rsquo; | base64 -d &amp;gt; /root/certs/admin.</description></item><item><title>kubectl top 命令解析</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%AE%A1%E7%90%86/Kubernetes-%E7%9B%91%E6%8E%A7/kubectl-top-%E5%91%BD%E4%BB%A4%E8%A7%A3%E6%9E%90/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%AE%A1%E7%90%86/Kubernetes-%E7%9B%91%E6%8E%A7/kubectl-top-%E5%91%BD%E4%BB%A4%E8%A7%A3%E6%9E%90/</guid><description>原文链接：http://www.xuyasong.com/?p=1781
一. 前言 kubectl top 可以很方便地查看 node、pod 的实时资源使用情况：如 CPU、内存。这篇文章会介绍其数据链路和实现原理，同时借 kubectl top 阐述 k8s 中的监控体系，窥一斑而知全豹。最后会解释常见的一些问题：
kubectl top 为什么会报错？
kubectl top node 怎么计算，和节点上直接 top 有什么区别？
kubectl top pod 怎么计算，包含 pause 吗？
kubectl top pod 和 exec 进入 pod 后看到的 top 不一样？
kubectl top pod 和 docker stats 得到的值为什么不同？
以下命令的运行环境为：
k8s 1.8
k8s 1.13
二. 使用
kubectl top 是基础命令，但是需要部署配套的组件才能获取到监控值
1.8 以下：部署 heapter
1.8 以上：部署 metric-server
kubectl top node: 查看 node 的使用情况
kubectl top pod: 查看 pod 的使用情况</description></item><item><title>常用指标</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%AE%A1%E7%90%86/Kubernetes-%E7%9B%91%E6%8E%A7/%E5%B8%B8%E7%94%A8%E6%8C%87%E6%A0%87/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%AE%A1%E7%90%86/Kubernetes-%E7%9B%91%E6%8E%A7/%E5%B8%B8%E7%94%A8%E6%8C%87%E6%A0%87/</guid><description>Prometheus Operator 安装完成后会有很多默认的监控指标，一不注意就大量的报警产生，所以我们非常有必要了解下这些常用的监控指标，有部分指标很有可能对于我们自己的业务可有可无，所以可以适当的进行修改，这里我们就来对常用的几个指标进行简单的说明。
Kubernetes 资源相关 CPUThrottlingHigh sum(increase(container_cpu_cfs_throttled_periods_total{container!=&amp;#34;&amp;#34;, }[5m])) by (container, pod, namespace) / sum(increase(container_cpu_cfs_periods_total{}[5m])) by (container, pod, namespace) &amp;gt; ( 25 / 100 ) sum(increase(container_cpu_cfs_throttled_periods_total{container!=&amp;quot;&amp;quot;, }[5m])) by (container, pod, namespace) / sum(increase(container_cpu_cfs_periods_total{}[5m])) by (container, pod, namespace) &amp;gt; ( 25 / 100 )
关于 CPU 的 limit 合理性指标。查出最近 5 分钟，超过 25%的 CPU 执行周期受到限制的容器。表达式：
相关指标：
container_cpu_cfs_periods_total：容器生命周期中度过的 cpu 周期总数 container_cpu_cfs_throttled_periods_total：容器生命周期中度过的受限的 cpu 周期总数 Note：比如我设置一个 pod 的 cpu limit 为 2，当这个容器的进程申请 3 个 CPU 核心的用量，就会触发这个告警。</description></item></channel></rss>