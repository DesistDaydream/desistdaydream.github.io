<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>kubeadm 命令行工具 on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%AE%A1%E7%90%86/kubeadm-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</link><description>Recent content in kubeadm 命令行工具 on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%AE%A1%E7%90%86/kubeadm-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/index.xml" rel="self" type="application/rss+xml"/><item><title>kubeadm 命令行工具</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%AE%A1%E7%90%86/kubeadm-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/kubeadm-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%AE%A1%E7%90%86/kubeadm-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/kubeadm-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</guid><description>概述 参考：
官方文档，参考 - kubeadm kubeadm 库 v1beta2 版本的 kubeadm 包的配置文件字段详解 Kubeadm 是一个工具，它提供了 kubeadm init 以及 kubeadm join 这两个命令作为快速创建 Kubernetes 集群的最佳实践。
kubeadm 通过执行必要的操作来启动和运行一个最小可用的集群。它被故意设计为只关心启动集群，而不是准备节点环境的工作。同样的，诸如安装各种各样的可有可无的插件，例如 Kubernetes 控制面板、监控解决方案以及特定云提供商的插件，这些都不在它负责的范围。
相反，我们期望由一个基于 kubeadm 从更高层设计的更加合适的工具来做这些事情；并且，理想情况下，使用 kubeadm 作为所有部署的基础将会使得创建一个符合期望的集群变得容易。
kubeadm 中的资源 实际上，kubeadm 继承了 kubernetes 的哲学，一切介资源，只不过由于 kubeadm 并没有控制器逻辑、也并不需要将这些资源实例化为一个个的对象。这些资源主要是为了让 kubeadm 的概念以及使用方式，更贴近 Kubernetes，所以 kubeadm 的资源仅仅作为定义配置所用。在 kubeadm 的 API 代码中，也可以看到这些资源的结构体定义。
kubeadm 的运行时行为通常由下面几个 API 资源来控制：
InitConfiguration(初始化配置) # ClusterConfiguation(集群配置) # KubeletConfiguration(kubelet 程序配置) # KubeProxyConfiguration(kube-proxy 程序配置) # JoinConfiguration(加入集群配置) # 其中 InitConfiguration、ClusterConfiguation、JoinConfiguration 资源属于 kubeadm 在控制集群时所用的配置
而 KubeletConfiguration 与 KubeProxyConfiguration 资源，实际上就是 kubelet 和 kube-proxy 程序的配置文件，kubeadm 可以通过其自身的配置文件，在控制集群时，修改 kubelet 与 kube-proxy 程序的配置文件。</description></item><item><title>kubeadm CLI</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%AE%A1%E7%90%86/kubeadm-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/kubeadm-CLI/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%AE%A1%E7%90%86/kubeadm-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/kubeadm-CLI/</guid><description>概述 参考：
Syntax(语法) kubeadm [command]
Command 包括：
alpha Kubeadm experimental sub-commands completion Output shell completion code for the specified shell (bash or zsh). config Manage configuration for a kubeadm cluster persisted in a ConfigMap in the cluster. help Help about any command init Run this command in order to set up the Kubernetes master. join Run this on any machine you wish to join an existing cluster reset Run this to revert any changes made to this host by &amp;lsquo;kubeadm init&amp;rsquo; or &amp;lsquo;kubeadm join&amp;rsquo;.</description></item><item><title>kubeadm Configuration</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%AE%A1%E7%90%86/kubeadm-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/kubeadm-Configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%AE%A1%E7%90%86/kubeadm-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/kubeadm-Configuration/</guid><description>概述 参考：
官方文档，参考 - 安装工具 - kubeadm - kubeadmin init - 结合配置文件使用 kubeadm init 官方文档，参考 - 配置 APIs-kubeadm 配置(v1beta3) kubeadm 库 v1beta2 版本的 kubeadm 包的配置文件字段详解 由于配置文件还在 beta 阶段，但是官方又推荐使用，所以很是纠结，我也不知道为啥。。。文档只有这种通过代码注释生成的内容~~~
kubeadm 库中的 Type 实际上就是配置文件中可用的字段，其实就是 Go 语言中 struct 与 yaml 的对应，配置文件都是 yaml 格式的，kind 中值，其实就是代码中的一个 struct。
kubeadm init 命令初始化集群时，对集群配置的首选方法是使用 --config=FILE 标志传递 YAML 格式的配置文件。
kubeadm 配置文件中定义的某些配置选项在 kubeamd init 的命令行标志中也有对应标志，但是这些标志仅支持最常见/最简单的用例。
kubeadm 的配置文件可以看成是 kubeadm 几个资源的 Manifests 文件的集合。kubeadm 其中包括多种资源，一个文件中可以使用三个破折号 --- 分隔的多种资源(其实就是 yaml 的语法)。每个资源就是一种配置类型。现阶段支持以下配置类型：
InitConfiguration # 初始化集群配置 ClusterConfiguration # 集群通用配置 KubeletConfiguration # 覆盖 kubelet 运行时配置文件 KubeProxyConfiguration # 覆盖 kube-proxy 运行时配置文件 JoinConfiguration # 加入集群配置 InitConfiguration Manifest 详解 参考：v1beta3 版本</description></item><item><title>kubeadm 实现细节</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%AE%A1%E7%90%86/kubeadm-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/kubeadm-%E5%AE%9E%E7%8E%B0%E7%BB%86%E8%8A%82/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%AE%A1%E7%90%86/kubeadm-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/kubeadm-%E5%AE%9E%E7%8E%B0%E7%BB%86%E8%8A%82/</guid><description>概述 参考：
kubeadm 核心设计原则 参考：
官方文档，参考 - kubeadm - 实现细节 kubeadm init 和 kubeadm join 结合在一起提供了良好的用户体验。kubeadm init 和 kubeadm join 设置的集群应为：
Secure 安全——应采用最新的最佳做法 加强 RBAC 使用节点授权器 在控制平面组件之间使用安全通信 在 API 服务器和 kubelet 之间使用安全通信 锁定 kubelet API 锁定对系统组件（例如 kube-proxy 和 CoreDNS）的 API 的访问 锁定引导令牌可以访问的内容 Easy to use 易于使用——用户只需要运行几个命令即可 kubeadm init export KUBECONFIG=/etc/kubernetes/admin.conf kubectl apply -f &amp;lt;network-of-choice.yaml&amp;gt; kubeadm join &amp;ndash;token : Extendable 可扩展 它应该不偏袒任何特定的网络提供商。配置群集网络超出范围 它应该提供使用配置文件来自定义各种参数的可能性 kubeadm 默认所需使用的值和目录 为了降低复杂性并简化基于 kubeadm 的高级工具的开发，它使用一组有限的常量值来存储众所周知的路径和文件名。
Kubernetes 目录 /etc/kubernetes 在应用程序中是一个常量，因为在大多数情况下，它显然是给定的路径，并且是最直观的位置；其他常量路径和文件名是：</description></item><item><title>编译 kubeadm 修改证书过期时间</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%AE%A1%E7%90%86/kubeadm-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/%E7%BC%96%E8%AF%91-kubeadm-%E4%BF%AE%E6%94%B9%E8%AF%81%E4%B9%A6%E8%BF%87%E6%9C%9F%E6%97%B6%E9%97%B4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%AE%A1%E7%90%86/kubeadm-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/%E7%BC%96%E8%AF%91-kubeadm-%E4%BF%AE%E6%94%B9%E8%AF%81%E4%B9%A6%E8%BF%87%E6%9C%9F%E6%97%B6%E9%97%B4/</guid><description>Makefile 文件位置：https://github.com/kubernetes/kubernetes/blob/master/build/root/Makefile
这里以 kubernetes 1.18.8 为例。
安装golang, 这里使用v1.13.15
根据上步版本下载源码，下列下载方式任选其一
git clone --branch v1.19.2 https://github.com/kubernetes/kubernetes.git wget https://github.com/kubernetes/kubernetes/archive/v1.19.0.tar.gz 修改 ca 证书的有效期
# 将 const duration365d = time.Hour * 24 * 365 改为 const duration365d = time.Hour * 24 * 365 * 10 sed -i &amp;#39;s/\(const duration365d.*365\)/\1* 10/&amp;#39; staging/src/k8s.io/client-go/util/cert/cert.go 修改 ca 生成的其余证书的有效期
cat cmd/kubeadm/app/util/pkiutil/pki_helpers.go # 找到代码NotAfter: time.Now().Add(kubeadmconstants.CertificateValidity).UTC(), # 根据 import 部分找到调用该变量的文件 import ( ...... kubeadmconstants &amp;#34;k8s.io/kubernetes/cmd/kubeadm/app/constants&amp;#34; ...... ) vim cmd/kubeadm/app/constants/constants.go # 将 CertificateValidity = time.</description></item><item><title>最佳实践</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%AE%A1%E7%90%86/kubeadm-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes-%E7%AE%A1%E7%90%86/kubeadm-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</guid><description>bj-net apiVersion: kubeadm.k8s.io/v1beta2 kind: InitConfiguration bootstrapTokens: - groups: - system:bootstrappers:kubeadm:default-node-token ttl: 0s usages: - signing - authentication --- apiVersion: kubeadm.k8s.io/v1beta2 kind: ClusterConfiguration kubernetesVersion: v1.19.2 controlPlaneEndpoint: k8s-api.bj-net.ehualu.local:6443 imageRepository: registry.aliyuncs.com/k8sxio networking: podSubnet: 10.244.0.0/16 serviceSubnet: 10.96.0.0/12 etcd: local: extraArgs: listen-metrics-urls: http://0.0.0.0:2381 apiServer: certSANs: - localhost - 127.0.0.1 - k8s-api.bj-net.ehualu.local - 172.19.42.214 - node-3.bj-net - 172.19.42.223 - node-2.bj-net - 172.19.42.222 - node-1.bj-net - 172.19.42.221 - master-3.bj-net - 172.19.42.213 - master-2.bj-net - 172.19.42.212 - master-1.bj-net - 172.</description></item></channel></rss>