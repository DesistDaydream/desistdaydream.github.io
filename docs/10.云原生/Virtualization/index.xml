<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦的站点 – Virtualization</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Virtualization/</link><description>Recent content in Virtualization on 断念梦的站点</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Virtualization/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Virtualization</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Virtualization/Virtualization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Virtualization/Virtualization/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Virtualization">Wiki, Virtualization&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/virtualization_getting_started_guide/index">RedHat 7 虚拟化入门指南&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_and_managing_virtualization/virtualization-in-rhel-8-an-overview_configuring-and-managing-virtualization#what-is-virtualization-in-rhel-8-virt-overview">Redhat 8 官方对虚拟化的定义&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/virtualization_getting_started_guide/index">RedHat 7 对“虚拟化性能不行”这个误区的辟谣&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://ubuntu.com/server/docs/virtualization-introduction">Ubuntu 官方文档，虚拟化-介绍&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Virtualization(虚拟化)&lt;/strong> 是用于运行软件的广义的计算机术语。通常情况下，&lt;strong>Virtualization(虚拟化)&lt;/strong> 体现在让单个可以运行多个操作系统，这些操作系统同时运行，而又是互相独立的。&lt;/p>
&lt;p>虚拟化是云计算的基础。简单的说，虚拟化使得在一台物理的服务器上可以跑多台虚拟机，虚拟机共享物理机的 CPU、内存、IO 硬件资源，但逻辑上虚拟机之间是相互隔离的。物理机我们一般称为 &lt;strong>Host(宿主机)&lt;/strong>，宿主机上面的虚拟机称为 &lt;strong>Guest(客户机)&lt;/strong>。那么 Host 是如何将自己的硬件资源虚拟化，并提供给 Guest 使用的呢？这个主要是通过一个叫做 Hypervisor 的程序实现的。&lt;/p>
&lt;h2 id="hypervisor">Hypervisor&lt;a class="td-heading-self-link" href="#hypervisor" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>参考：&lt;a href="https://www.redhat.com/zh/topics/virtualization/what-is-a-hypervisor">https://www.redhat.com/zh/topics/virtualization/what-is-a-hypervisor&lt;/a>&lt;/p>
&lt;p>Hypervisor 是用来创建与运行虚拟机的软件、固件或硬件。被 Hypervisor 用来运行一个或多个虚拟机的设备称为 Host Machine(宿主机)，这些虚拟机则称为 Guest Machine(客户机)。&lt;strong>Hypervisor 有时也被称为 Virtual Machine Monitor (虚拟机监视器，简称 VMM)&lt;/strong>&lt;/p>
&lt;h1 id="虚拟化技术的分类">虚拟化技术的分类&lt;a class="td-heading-self-link" href="#%e8%99%9a%e6%8b%9f%e5%8c%96%e6%8a%80%e6%9c%af%e7%9a%84%e5%88%86%e7%b1%bb" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/ihdpea/1616124416735-5e89f29f-21cd-4fed-af5e-194227de3048.png" alt="">&lt;/p>
&lt;p>根据 Hypervisor 的实现方式和所处的位置，虚拟化又分为两种：1 型虚拟化和 2 型虚拟化&lt;/p>
&lt;ol>
&lt;li>半虚拟化（para-virtualization）：TYPE1，也叫裸金属虚拟化比如 Vmware ESXi、Xen 等是一款类似于操作系统的 Hypervisor，直接运行在硬件之上，需要修改 Guest OS 的内核，让 VM 知道自己是虚拟机&lt;/li>
&lt;li>完全虚拟化（full-virtualization）：TYPE2，物理机上首先安装常规的操作系统，比如 Redhat、Ubuntu 和 Windows。Hypervisor 作为 OS 上的一个程序模块运行，并对管理虚拟机进行管理。比如 Vmware Workstation、KVM 等是一款类似于软件的 Hypervisor，运行于操作系统之上，VM 不知道自己是虚拟机
&lt;ol>
&lt;li>BT：软件，二进制翻译。性能很差&lt;/li>
&lt;li>HVM：硬件，硬件辅助的虚拟化。性能很好。现阶段 KVM 主要基于硬件辅助进行虚拟化
&lt;ol>
&lt;li>&lt;strong>硬件辅助全虚拟化主要使用了支持虚拟化功能的 CPU 进行支撑，CPU 可以明确的分辨出来自 GuestOS 的特权指令，并针对 GuestOS 进行特权操作，而不会影响到 HostOS。&lt;/strong>&lt;/li>
&lt;li>从更深入的层次来说，虚拟化 CPU 形成了新的 CPU 执行状态 —— &lt;code>Non-Root Mode&amp;amp; Root Mode&lt;/code>。从上图中可以看见，GuestOS 运行在 Non-Root Mode 的 Ring 0 核心态中，这表明 GuestOS 能够直接执行特却指令而不再需要 &lt;em>特权解除&lt;/em> 和 &lt;em>陷入模拟&lt;/em> 机制。并且在硬件层上面紧接的就是虚拟化层的 VMM，而不需要 HostOS。这是因为在硬件辅助全虚拟化的 VMM 会以一种更具协作性的方式来实现虚拟化 —— &lt;em>将虚拟化模块加载到 HostOS 的内核中&lt;/em>，例如：KVM，KVM 通过在 HostOS 内核中加载 &lt;strong>KVM Kernel Module&lt;/strong> 来将 HostOS 转换成为一个 VMM。所以此时 VMM 可以看作是 HostOS，反之亦然。这种虚拟化方式创建的 GuestOS 知道自己是正在虚拟化模式中运行的 GuestOS，KVM 就是这样的一种虚拟化实现解决方案。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>OS 级别虚拟化：容器级虚拟化，准确来说不能叫虚拟化了，只能叫容器技术无 Hypervisor，将用户空间分隔为多个，彼此互相隔离，每个 VM 中没有独立内核，OpenVZ、LXC(Linux container)、libcontainer 等，比如 Docker，Docker 的基础是 LXC。&lt;/li>
&lt;li>模拟(Emulation)：比如 QEMU，PearPC，Bochs&lt;/li>
&lt;li>库虚拟化：WINE&lt;/li>
&lt;li>应用程序虚拟化：JVM&lt;/li>
&lt;li>理论上 Type1 和 Typ2 之间的区别
&lt;ol>
&lt;li>1 型虚拟化一般对硬件虚拟化功能进行了特别优化，性能上比 2 型要高；&lt;/li>
&lt;li>2 型虚拟化因为基于普通的操作系统，会比较灵活，比如支持虚拟机嵌套。嵌套意味着可以在 KVM 虚拟机中再运行 KVM。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h1 id="虚拟化总结云计算基础实现云功能的灵活调度">虚拟化总结(云计算基础，实现云功能的灵活调度)&lt;a class="td-heading-self-link" href="#%e8%99%9a%e6%8b%9f%e5%8c%96%e6%80%bb%e7%bb%93%e4%ba%91%e8%ae%a1%e7%ae%97%e5%9f%ba%e7%a1%80%e5%ae%9e%e7%8e%b0%e4%ba%91%e5%8a%9f%e8%83%bd%e7%9a%84%e7%81%b5%e6%b4%bb%e8%b0%83%e5%ba%a6" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>所谓的云计算：当一台虚拟机需要跨越多个物理机进行数据交互，比如拿来运行 VM 的物理主机不止一台，在每台物理机上按需启动既定数量的 VM，每个 VM 有多少 CPU 和 MEM，每个 VM 启动在哪个物理机上，启动 VM 需要的存储设备在什么地方，存储设备中的系统是临时安装，还是通过一个已经装好的系统模板直接使用，还有多个 VM 跨物理主机进行网络通信等等一系列工作，可以使用一个虚拟化管理工具(VM Manager)来实现，这个管理器的功能即可称为云计算。在没有这个管理器的时候，人们只能人为手工从把 VM 从一台物理机移动到另一台物理机，非常不灵活。&lt;/p>
&lt;p>计算机五大部件：运算器(cpu)，控制器(cpu)，存储器(memory)，输入与输出设备(磁盘 I/O，网络 I/O)。&lt;/p>
&lt;p>一般情况，VM 的 CPU 与 Memory 无法跨主机使用；但是磁盘 I/O 与网络 I/O 则可以跨主机使用。云计算的灵活性（即 VM 或者单个云计算节点挂了但是不影响数据，可以重新启动在任一一个节点等类似的功能）&lt;/p>
&lt;p>磁盘 I/O 的灵活调度&lt;/p>
&lt;p>所以，在启动一个 VM 的时候，分为这么几个启动步骤，模拟 CPU 和内存，模拟存储，模拟网络。当在多个 node 的虚拟化集群中创建完一个 VM 并想启动的时候，又分为两种情况：&lt;/p>
&lt;ol>
&lt;li>当该 VM 的虚拟存储放在某个节点上的时候，则该 VM 只能启动在该节点上，因为没有存储就没法加载系统镜像，何谈启动呢&lt;/li>
&lt;li>当该 VM 的虚拟存储放在虚拟化集群的后端存储服务器或者共享存储空间的时候，则该 VM 可以根据调度策略在任一节点启动,然后把该 VM 对应的虚拟存储挂载或下载到需要启动的节点上即可（这个所谓的虚拟存储，可以称为模板，每次 VM 启动的时候，都可以通过这个模板直接启动而不用重新安装系统了）&lt;/li>
&lt;/ol>
&lt;p>这种可以灵活调度 VM，而不让 VM 固定启动在一个虚拟机上的机制，这就是云功能的基础，用户不用关心具体运行在哪个节点上，都是由系统自动调度的。&lt;/p>
&lt;p>网络 I/O 的灵活调度&lt;/p>
&lt;p>同样的，在一个 VM 从 node1 移动到 node2 的时候，除了存储需要跟随移动外，还需要网络也跟随移动，移动的前提是所有 node 的网络配置是一样的，不管是隔离模型，还是路由模型，还是 nat 模型，还是桥接模型，都需要给每个 node 进行配置，但是，会有这么几个情况，&lt;/p>
&lt;ol>
&lt;li>一个公司，有 2 个部门，有两台物理 server，node1 最多有 4 个 VM，node2 最多有 4 个 VM，其中一个部门需要 5 台 VM，另一个部门需要 3 台 VM，而两个部门又要完全隔离，这时候可以通过对 vSwitch 进行 vlan 划分来进行隔离，。这时候就一个开源的软件应运而生，就是 Open vSwtich，简称为 OVS。&lt;/li>
&lt;li>普通 VLAN 只有 4096 个，对于公有云来说，该 vlan 数量远远不够，这时候，vxlan 技术应运而生&lt;/li>
&lt;li>每个公司有多个部门,每个部门有的需要连接公网，有的不需要连接公网,如果想隔离开两个公司，仅仅依靠虚拟交换机从二层隔离，无法隔离全面，这时候 vRouter 虚拟路由器技术应运而生，通过路由来隔离，并通过路由来访问，而这台 vRouter 就是由 linux 的 net namespace 功能来创建的&lt;/li>
&lt;/ol>
&lt;p>Openstack 中创建的每个 network 就相当于一个 vSwitch，创建的每个 route 就相当于一个 vRoute 即 net namespace，然后把 network 绑定到 route 上，就相当于把 vSwitch 连接到了 vRoute，所以，在绑定完成之后，会在 route 列表中看到个端口的 IP，这个 IP 就是 vSwitch 子网(在创建 vSwitch 的时候会设置一个可用的网段)中的一个 IP，就相当于交换机连到路由器后，路由器上这个端口的 IP&lt;/p>
&lt;h1 id="实际上一个虚拟机就是宿主机上的一个文件虚拟化程序可以通过这个文件来运行虚拟机">实际上，一个虚拟机就是宿主机上的一个文件，虚拟化程序可以通过这个文件来运行虚拟机&lt;a class="td-heading-self-link" href="#%e5%ae%9e%e9%99%85%e4%b8%8a%e4%b8%80%e4%b8%aa%e8%99%9a%e6%8b%9f%e6%9c%ba%e5%b0%b1%e6%98%af%e5%ae%bf%e4%b8%bb%e6%9c%ba%e4%b8%8a%e7%9a%84%e4%b8%80%e4%b8%aa%e6%96%87%e4%bb%b6%e8%99%9a%e6%8b%9f%e5%8c%96%e7%a8%8b%e5%ba%8f%e5%8f%af%e4%bb%a5%e9%80%9a%e8%bf%87%e8%bf%99%e4%b8%aa%e6%96%87%e4%bb%b6%e6%9d%a5%e8%bf%90%e8%a1%8c%e8%99%9a%e6%8b%9f%e6%9c%ba" aria-label="Heading self-link">&lt;/a>&lt;/h1></description></item><item><title>Docs: Computing Virtualization</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Virtualization/Computing-Virtualization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Virtualization/Computing-Virtualization/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;/blockquote>
&lt;p>CPU 虚拟化(vCPU=virtual CPU # 虚拟 CPU)&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gd8p4x/1616124392775-cccdd43b-0f21-4877-8c78-c4d6c7352728.png" alt="">&lt;/p>
&lt;p>使用如下命令可以查看该 CPU 是否支持虚拟化&lt;/p>
&lt;p>egrep -o &amp;lsquo;(vmx|svm)&amp;rsquo; /proc/cpuinfo&lt;/p>
&lt;p>如果有输出 vmx 或者 svm，就说明当前的 CPU 支持 KVM。CPU 厂商 Intel 和 AMD 都支持虚拟化了，除非是非常老的 CPU。&lt;/p>
&lt;p>在 CUP 虚拟化的图片中，宿主机有两个物理 CPU，上面起了两个虚机 VM1 和 VM2。 VM1 有两个 vCPU，VM2 有 4 个 vCPU。可以看到 VM1 和 VM2 分别有两个和 4 个线程在两个物理 CPU 上调度。&lt;/p>
&lt;p>虚机的 vCPU 总数可以超过物理 CPU 数量，这个叫 CPU overcommit（超配）。 KVM 允许 overcommit，这个特性使得虚机能够充分利用宿主机的 CPU 资源，但前提是在同一时刻，不是所有的虚机都满负荷运行。 当然，如果每个虚机都很忙，反而会影响整体性能，所以在使用 overcommit 的时候，需要对虚机的负载情况有所了解，需要测试。&lt;/p></description></item><item><title>Docs: Memory Virtualization</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Virtualization/Memory-Virtualization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Virtualization/Memory-Virtualization/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Memory_virtualization">Wiki, Memory_virtualization&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>为了在一台机器上运行多个虚拟机，KVM 需要实现 VA（虚拟内存） -&amp;gt; PA（物理内存） -&amp;gt; MA（机器内存）之间的地址转换。虚机 OS 控制虚拟地址到客户内存物理地址的映射 （VA -&amp;gt; PA），但是虚机 OS 不能直接访问实际机器内存，因此 KVM 需要负责映射客户物理内存到实际机器内存 （PA -&amp;gt; MA）。内存也是可以 overcommit 的，即所有虚机的内存之和可以超过宿主机的物理内存。但使用时也需要充分测试，否则性能会受影响。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/tqgo41/1616124379716-c4fa6e3c-3050-4d41-935c-8cd582fe465e.png" alt="">&lt;/p></description></item><item><title>Docs: Network Virtualization</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Virtualization/Network-Virtualization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Virtualization/Network-Virtualization/</guid><description/></item><item><title>Docs: Storage Virtualization</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Virtualization/Storage-Virtualization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Virtualization/Storage-Virtualization/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Storage_virtualization">Wiki, Storage_virtualization&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="存储虚拟化io">存储虚拟化(I/O)&lt;a class="td-heading-self-link" href="#%e5%ad%98%e5%82%a8%e8%99%9a%e6%8b%9f%e5%8c%96io" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h1 id="kvm-模式的存储虚拟化">KVM 模式的存储虚拟化&lt;a class="td-heading-self-link" href="#kvm-%e6%a8%a1%e5%bc%8f%e7%9a%84%e5%ad%98%e5%82%a8%e8%99%9a%e6%8b%9f%e5%8c%96" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="第一种存储虚拟化是通过存储池storage-pool和卷volume来管理的">第一种：存储虚拟化是通过存储池（Storage Pool）和卷（Volume）来管理的&lt;a class="td-heading-self-link" href="#%e7%ac%ac%e4%b8%80%e7%a7%8d%e5%ad%98%e5%82%a8%e8%99%9a%e6%8b%9f%e5%8c%96%e6%98%af%e9%80%9a%e8%bf%87%e5%ad%98%e5%82%a8%e6%b1%a0storage-pool%e5%92%8c%e5%8d%b7volume%e6%9d%a5%e7%ae%a1%e7%90%86%e7%9a%84" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ol>
&lt;li>Storage Pool 是宿主机上可以看到的一片存储空间，可以是多种类型。&lt;/li>
&lt;li>文件目录类型的 Storage Pool 。KVM 将宿主机目录 /var/lib/libvirt/images/ 作为默认的 Storage Pool。&lt;/li>
&lt;li>KVM 将 HOST 目录 /var/lib/libvirt/images/ 作为默认的 Storage Pool&lt;/li>
&lt;li>KVM 所有可以使用的 Storage Pool 都定义在宿主机的 /etc/libvirt/storage 目录下，每个 Pool 一个 xml 文件，默认有一个 default.xml&lt;/li>
&lt;li>LVM 类型的 Storage Pool。宿主机上 VG 中的 LV 也可以作为虚拟磁盘分配给虚拟机使用。不过，LV 由于没有磁盘的 MBR 引导记录，不能作为虚拟机的启动盘，只能作为数据盘使用。&lt;/li>
&lt;li>KVM 还支持 iSCSI，Ceph 等多种类型的 Storage Pool，最常用的就是目录类型，其他类型可以参考文档&lt;a href="http://libvirt.org/storage.html">http://libvirt.org/storage.html&lt;/a>&lt;/li>
&lt;li>Volume 是在 Storage Pool 中划分出的一块空间，宿主机将 Volume 分配给虚拟机，Volume 在虚拟机中看到的就是一块硬盘。Volume 是 Storage Pool 目录下面的文件，一个文件就是一个 Volume(使用文件做 Volume 有很多优点：存储方便、移植性好、可复制)。Volume 分为几种类型，类型如下&lt;/li>
&lt;li>qcow2 # 是推荐使用的格式，QEMU V2 磁盘镜像格式，cow 表示 copy on write，能够节省磁盘空间，支持 AES 加密，支持 zlib 压缩，支持多快照，功能很多。&lt;/li>
&lt;li>raw # 是默认格式，即原始磁盘镜像格式，移植性好，性能好，但大小固定，不能节省磁盘空间。&lt;/li>
&lt;li>vmdk # 是 VMWare 的虚拟磁盘格式，也就是说 VMWare 虚机可以直接在 KVM 上 运行。&lt;/li>
&lt;/ol></description></item><item><title>Docs: I/O Virtualization</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Virtualization/I_O-Virtualization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Virtualization/I_O-Virtualization/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/I/O_virtualization">Wiki, I/O virtualization&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>I/O Virtualization(输入/输出虚拟化)&lt;/strong> 是一种广义的虚拟化概念。&lt;/p>
&lt;p>&lt;a href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/VFIO.md">VFIO&lt;/a> 是 I/O 虚拟化的一种具体实现方式，专注于将设备直通给虚拟机，让虚拟机可以直接控制物理设备，从而获得接近于物理机的性能。&lt;/p></description></item></channel></rss>