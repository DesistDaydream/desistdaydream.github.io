<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – 工作负载资源</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/1.API-Resource-%E4%B8%8E-Object/API-%E5%8F%82%E8%80%83/%E5%B7%A5%E4%BD%9C%E8%B4%9F%E8%BD%BD%E8%B5%84%E6%BA%90/</link><description>Recent content in 工作负载资源 on 断念梦</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/1.API-Resource-%E4%B8%8E-Object/API-%E5%8F%82%E8%80%83/%E5%B7%A5%E4%BD%9C%E8%B4%9F%E8%BD%BD%E8%B5%84%E6%BA%90/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: CronJab Manifests 详解</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/1.API-Resource-%E4%B8%8E-Object/API-%E5%8F%82%E8%80%83/%E5%B7%A5%E4%BD%9C%E8%B4%9F%E8%BD%BD%E8%B5%84%E6%BA%90/CronJab-Manifests-%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/1.API-Resource-%E4%B8%8E-Object/API-%E5%8F%82%E8%80%83/%E5%B7%A5%E4%BD%9C%E8%B4%9F%E8%BD%BD%E8%B5%84%E6%BA%90/CronJab-Manifests-%E8%AF%A6%E8%A7%A3/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/cron-job-v1/">官方文档，参考-KubernetesAPI-工作负载资源-CronJob&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>Docs: Deployment Manifest 详解</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/1.API-Resource-%E4%B8%8E-Object/API-%E5%8F%82%E8%80%83/%E5%B7%A5%E4%BD%9C%E8%B4%9F%E8%BD%BD%E8%B5%84%E6%BA%90/Deployment-Manifest-%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/1.API-Resource-%E4%B8%8E-Object/API-%E5%8F%82%E8%80%83/%E5%B7%A5%E4%BD%9C%E8%B4%9F%E8%BD%BD%E8%B5%84%E6%BA%90/Deployment-Manifest-%E8%AF%A6%E8%A7%A3/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.21/#deployment-v1-apps">API 文档，单页&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/deployment-v1/">官方文档,参考-Kubernetes API-工作负载资源-Deployment&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="manifest-中的顶层字段">Manifest 中的顶层字段&lt;/h1>
&lt;ul>
&lt;li>&lt;strong>apiVersion&lt;/strong>: apps/v1&lt;/li>
&lt;li>&lt;strong>kind&lt;/strong>: Deployment&lt;/li>
&lt;li>&lt;strong>metadata&lt;/strong>(&lt;a href="#metadata">metadata&lt;/a>)&lt;/li>
&lt;li>&lt;strong>spec&lt;/strong>:(&lt;a href="#spec">spec&lt;/a>)&lt;/li>
&lt;li>&lt;strong>status&lt;/strong>(&lt;a href="#status">status&lt;/a>)&lt;/li>
&lt;/ul>
&lt;h1 id="metadata">metadata&lt;/h1>
&lt;p>Deployment 对象的元数据，该字段内容详见通用定义的 [ObjectMeta](/docs/10.云原生/2.3.Kubernetes%20 容器编排系统/1.API、Resource(资源)、Object(对象)/API%20 参考/Common%20Definitions(通用定义)/ObjectMeta.md Definitions(通用定义)/ObjectMeta.md)&lt;/p>
&lt;h1 id="spec">spec&lt;/h1>
&lt;p>spec 用来描述一个 Deployment 应该具有的属性。也就是用来定义 Deployment 的行为规范。一共分为如下几类&lt;/p>
&lt;ul>
&lt;li>描述 Deployment 类型的控制器的行为&lt;/li>
&lt;li>描述 Deployment 控制器所关联的 Pod 的属性。&lt;/li>
&lt;/ul>
&lt;h2 id="控制器行为">控制器行为&lt;/h2>
&lt;p>&lt;strong>minReadySeconds(INT)&lt;/strong> # 新创建的 Pod 在启动后，经过 minReadySeconds 秒后一直没有崩溃，之后，将该 Pod 视为可用。&lt;code>默认值：0&lt;/code>。&lt;/p>
&lt;ul>
&lt;li>默认值 0 表示 Pod 准备就绪后即被视为可用。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>progressDeadlineSeconds(INT)&lt;/strong> # 本 Deployment 对象被视为失败之前的等待时间，单位 秒。&lt;code>默认值：600&lt;/code>&lt;/p>
&lt;p>&lt;strong>replicas(INT)&lt;/strong> # 该控制器运行的 Pod 数量，&lt;code>默认值：1&lt;/code>。&lt;/p>
&lt;p>&lt;strong>revisionHistoryLimit(INT)&lt;/strong># 可以保留的允许回滚的旧 ReplicaSet 对象的数量。&lt;code>默认值：10&lt;/code>。控制器的历史可以通过 &lt;code>kubectl rollout&lt;/code> 命令控制&lt;/p>
&lt;p>&lt;strong>selector([LabelSelector](/docs/10.云原生/2.3.Kubernetes%20 容器编排系统/1.API、Resource(资源)、Object(对象)/API%20 参考/Common%20Definitions(通用定义)/LabelSelector%20 详解.md Definitions(通用定义)/LabelSelector 详解.md)) # 必须的&lt;/strong>。Pod 的标签选择器，根据标签匹配要控制的 Pod。必须与 &lt;code>template.metadata.labels&lt;/code> 的内容匹配。&lt;/p>
&lt;p>&lt;strong>strategy(Ojbect)&lt;/strong> # 定义用一个新的 pod 代替现有 pod 的部署策略(更新 pod 的策略)&lt;/p>
&lt;ul>
&lt;li>&lt;strong>rollingUpdate(Object)&lt;/strong> # 当更新策略为 rollingUpdate 时，需要配置滚动更新的参数
&lt;ul>
&lt;li>&lt;strong>maxSurge(STRING)&lt;/strong># 设定在更新时最大可用的 Pod 数，就是先添加几个新的 Pod 再删除老的&lt;/li>
&lt;li>&lt;strong>maxUnavailable(STRING)&lt;/strong># 设定在更新时最大不可用的 Pod 数&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>type(STRING)Recreate|RollingUpdate&lt;/strong> # 指定更新策略的类型，Recreate(重新创建) 与 RollingUpdate(滚动更新)。&lt;code>默认值：RollingUpdate&lt;/code>
&lt;ul>
&lt;li>Recreate 是删除一个创建一个&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="pod-属性">Pod 属性&lt;/h2>
&lt;p>&lt;strong>template(Ojbect) # 必须的&lt;/strong>。定义 Pod 的模板,使用 Pod 类型的 metadata 和 spec 字段。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>metadata&lt;/strong>(&lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes%20%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/1.API%20Resource%20%E4%B8%8E%20Object/API%20%E5%8F%82%E8%80%83/%E5%B7%A5%E4%BD%9C%E8%B4%9F%E8%BD%BD%E8%B5%84%E6%BA%90/Pod%20Manifest%20%E8%AF%A6%E8%A7%A3.md#metadata">PodMetadata&lt;/a>) # 与 pod 资源定义的内容基本一致&lt;/li>
&lt;li>&lt;strong>spec&lt;/strong>(&lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes%20%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/1.API%20Resource%20%E4%B8%8E%20Object/API%20%E5%8F%82%E8%80%83/%E5%B7%A5%E4%BD%9C%E8%B4%9F%E8%BD%BD%E8%B5%84%E6%BA%90/Pod%20Manifest%20%E8%AF%A6%E8%A7%A3.md#spec">PodSpec&lt;/a>) # 与 pod 资源定义的内容基本一致&lt;/li>
&lt;/ul>
&lt;h1 id="status">status&lt;/h1>
&lt;h1 id="manifests-样例">Manifests 样例&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">apps/v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Deployment&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">myapp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">myapp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">replicas&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">selector&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">matchLabels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">myapp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">template&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">myapp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">myapp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">containers&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">myapp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">lchdzh/network-test&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Pod Manifest 详解</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/1.API-Resource-%E4%B8%8E-Object/API-%E5%8F%82%E8%80%83/%E5%B7%A5%E4%BD%9C%E8%B4%9F%E8%BD%BD%E8%B5%84%E6%BA%90/Pod-Manifest-%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/1.API-Resource-%E4%B8%8E-Object/API-%E5%8F%82%E8%80%83/%E5%B7%A5%E4%BD%9C%E8%B4%9F%E8%BD%BD%E8%B5%84%E6%BA%90/Pod-Manifest-%E8%AF%A6%E8%A7%A3/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.21/#pod-v1-core">API 文档，单页&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/">官方文档，参考-Kubernetes API-工作负载资源-Pod&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Pod 是可以在主机上运行的容器的集合。此资源由客户端创建并调度到主机上。&lt;/p>
&lt;h1 id="manifest-中的顶层字段">Manifest 中的顶层字段&lt;/h1>
&lt;ul>
&lt;li>&lt;strong>apiVersion&lt;/strong>: v1&lt;/li>
&lt;li>&lt;strong>kind&lt;/strong>: Pod&lt;/li>
&lt;li>&lt;strong>metadata&lt;/strong>(&lt;a href="#metadata">metadata&lt;/a>)&lt;/li>
&lt;li>&lt;strong>spec&lt;/strong>(&lt;a href="#spec">spec&lt;/a>)&lt;/li>
&lt;li>&lt;strong>status&lt;/strong>(&lt;a href="#status">status&lt;/a>)&lt;/li>
&lt;/ul>
&lt;h1 id="metadata">metadata&lt;/h1>
&lt;p>&lt;strong>metadata&lt;/strong> 字段用来描述一个 Pod 的元数据信息。该字段内容详见通用定义的 &lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes%20%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/1.API%20Resource%20%E4%B8%8E%20Object/API%20%E5%8F%82%E8%80%83/Common%20Definitions(%E9%80%9A%E7%94%A8%E5%AE%9A%E4%B9%89)/ObjectMeta.md">ObjectMeta&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>annotations&lt;/strong>(STRING) # Pod 注释，不同于 label，仅用于为资源提供元数据&lt;/li>
&lt;li>&lt;strong>labels&lt;/strong>(map[STRING]STRING) # Pod 的标签，通过“键值对”的方式定义，可以添加多个标签
&lt;ul>
&lt;li>KEY: VAL # 比如该键值可以是 run: httpd，标签名是 run，run 的值是 httpd，key 与 val 使用字母，数字，_，-，.这几个字符且以字母或数字开头；val 可以为空。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>name&lt;/strong>(STRING) # Pod 对象名称。必须名称空间唯一。&lt;/li>
&lt;li>&lt;strong>ownerReferences&lt;/strong>([]Object) # 该对象所依赖的对象列表，一般由控制器自动生成。也可以手动指定。&lt;/li>
&lt;/ul>
&lt;h1 id="spec">spec&lt;/h1>
&lt;p>&lt;strong>spec&lt;/strong> 字段用来描述一个 Pod 应该具有的属性。Pod 中的 spec 字段大体分为如下几类&lt;/p>
&lt;ul>
&lt;li>Containers # 用来描述 Pod 中容器的属性&lt;/li>
&lt;li>Volumes # 用来描述 Pod 所用卷，以及容器如何使用这些卷&lt;/li>
&lt;li>Scheduling # Pod 如何被调度到 node&lt;/li>
&lt;li>Lifecycle # Pod 的生命周期&lt;/li>
&lt;li>Hostname and Name resolution # 容器的主机名和域名解析&lt;/li>
&lt;li>Hosts namespaces # Pod 使用主机上名称空间的方法&lt;/li>
&lt;li>Service account # Pod 的服务账户&lt;/li>
&lt;li>Security context # Pod 安全相关&lt;/li>
&lt;/ul>
&lt;h2 id="containers容器-相关字段">Containers(容器) 相关字段&lt;/h2>
&lt;p>&lt;strong>containers&lt;/strong>([]&lt;a href="#containers">containers&lt;/a>) # 属于该 Pod 的 Containers 列表。&lt;a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.19/#container-v1-core">containers&lt;/a> 字段&lt;strong>只会在 Pod 环境&lt;/strong>中创建&lt;/p>
&lt;p>&lt;strong>initContainers&lt;/strong>([]&lt;a href="#containers">containers&lt;/a>) # 属于该 Pod 的初始化容器的列表。该字段中所定义的容器都会比普通 containers 字段定义的容器先启动，并且 initContainer 会按顺序逐一启动，直到它们都启动并且退出之后，普通容器才会启动&lt;/p>
&lt;p>&lt;strong>imagePullSecrets([]Object)&lt;/strong> # 拉取镜像时使用的私有仓库的信息。&lt;/p>
&lt;p>拉取镜像时，如果是私有仓库，则使用该字段指定的 secret 中的信息。实际上就是代替 docker login 命令。 更多信息见官网：&lt;a href="https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod">Specifying imagePullSecrets on a Pod()章节&lt;/a>&lt;/p>
&lt;h2 id="volumes卷-相关字段">Volumes(卷) 相关字段&lt;/h2>
&lt;p>&lt;strong>volumes([]Object)&lt;/strong> # 给 pod 创建一个 Volume&lt;/p>
&lt;ul>
&lt;li>&lt;strong>TYPE:&lt;/strong> # 选择要创建的 volume 的类型，具体支持的类型可以使用 kubectl explain pod.spec.volumes 命令查看
&lt;ul>
&lt;li>&amp;hellip;&amp;hellip; # 定义该类型的 volume 相关参数&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>name(STRING)&lt;/strong> # &lt;strong>必须的&lt;/strong>。自定义该存储卷的名称&lt;/li>
&lt;/ul>
&lt;h2 id="scheduling调度-相关字段">Scheduling(调度) 相关字段&lt;/h2>
&lt;p>&lt;strong>nodeSelector&lt;/strong>(map[string]string) # 指明 Node 标签选择器，该 Pod 会运行在具有相同标签的 Node 上&lt;/p>
&lt;p>&lt;strong>nodeName&lt;/strong>(STRING) # Pod 运行在指定 Node 上&lt;/p>
&lt;p>&lt;strong>affinity&lt;/strong>(OBJECT) # Pod 亲和性调度规则。用法详见&lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes%20%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/5.Scheduling(%E8%B0%83%E5%BA%A6)/%E8%AE%A9%20Pod%20%E8%BF%90%E8%A1%8C%E5%9C%A8%E6%8C%87%E5%AE%9A%20Node%20%E4%B8%8A.md">调度器章节&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>nodeAffinity&lt;/strong>(&lt;a href="#nodeAffinity">nodeAffinity&lt;/a>) # 为 Pod 定义节点亲和性的调度规则&lt;/li>
&lt;li>&lt;strong>podAffinity&lt;/strong>(&lt;a href="#podAffinity">podAffinity&lt;/a>) # 为 Pod 定义 Pod 亲和性的调度规则(e.g.将此 Pod 与其他一些 Pod 共同定位在同一节点、区域等中)。&lt;/li>
&lt;li>&lt;strong>podAntiAffinity&lt;/strong>(&lt;a href="podAntiAffinity">PodAntiAffinity&lt;/a>) # 描述 pod 反亲和性的调度规则(e.g. 避免将此 Pod 放在与其他某些 Pod 相同的节点、区域等中)&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>tolerations([]Object)&lt;/strong> # 定义 Pod 容忍污点的容忍度。用法详见&lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes%20%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/5.Scheduling(%E8%B0%83%E5%BA%A6)/%E8%AE%A9%20Pod%20%E8%BF%90%E8%A1%8C%E5%9C%A8%E6%8C%87%E5%AE%9A%20Node%20%E4%B8%8A.md">调度器章节&lt;/a>&lt;/p>
&lt;h2 id="lifecycle生命周期-相关字段">Lifecycle(生命周期) 相关字段&lt;/h2>
&lt;p>&lt;strong>restartPolicy(STRING)&lt;/strong> # Pod 中容器失败后的重启策略，&lt;code>默认值：Always&lt;/code>&lt;/p>
&lt;ul>
&lt;li>STRING 可用的值有：Always、OnFailure、Never&lt;/li>
&lt;/ul>
&lt;h2 id="hostname-and-name-resolution主机名和域名解析-相关字段">Hostname and Name resolution(主机名和域名解析) 相关字段&lt;/h2>
&lt;p>&lt;strong>dnsConfig(OBJECT)&lt;/strong> #&lt;/p>
&lt;p>&lt;strong>dnsPolicy(STRING)&lt;/strong> # pod 的域名解析策略。&lt;code>默认值：ClusterFirst&lt;/code>&lt;/p>
&lt;ul>
&lt;li>可用值有：
&lt;ul>
&lt;li>ClusterFirstWithHostNet&lt;/li>
&lt;li>ClusterFirst&lt;/li>
&lt;li>None&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="hosts-namespaces容器如何使用宿主机中的名称空间-相关配置">Hosts namespaces(容器如何使用宿主机中的名称空间) 相关配置&lt;/h2>
&lt;p>&lt;strong>hostNetwork(BOOLEAN)&lt;/strong> # 是否让 Pod 中的容器使用主机的网络名称空间。&lt;code>默认值：false&lt;/code>&lt;/p>
&lt;h2 id="service-account服务账户-相关字段">Service account(服务账户) 相关字段&lt;/h2>
&lt;p>&lt;strong>serviceAccountName(STRING)&lt;/strong> # 容器所使用 ServiceAccount。&lt;/p>
&lt;h2 id="security-context容器安全环境-相关字段">Security context(容器安全环境) 相关字段&lt;/h2>
&lt;p>&lt;strong>securityContext&lt;/strong>(Object) 和 &lt;strong>.spec.container.securityContext&lt;/strong>(Object)&lt;/p>
&lt;p>&lt;code>securityContext&lt;/code> 字段用于配置如何安全得运行 Pod，比如以 非特权用户运行容器、SELinux 等等。Pod 安全配置内容，在 &lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes%20%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/3.Pod%20%E9%9B%86%E7%BE%A4%E6%9C%80%E5%B0%8F%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8D%95%E5%85%83/Pod%20%E7%AE%A1%E7%90%86/Security%20Context(%E5%AE%89%E5%85%A8%E7%8E%AF%E5%A2%83).md">Security Context(安全环境) 文章&lt;/a>中有更详细的描述。&lt;/p>
&lt;p>注意：&lt;code>.spec.securityContext&lt;/code> 字段属于 Pod 级别的安全配置，在 &lt;code>.spec.containers&lt;/code> 字段下，还有一个 securityContext 字段，&lt;code>.spec.containers.securityContext&lt;/code> 字段属于 Container 级别的安全配置，该字段的优先级要高于 &lt;code>.spec.securityContext&lt;/code>。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>fsGroup(INTEGER)&lt;/strong># 功能待确认。&lt;/li>
&lt;li>&lt;strong>runAsNonRoot(BOOLEAN)&lt;/strong> # 容器内的进程是否不以 root 身份运行。&lt;code>默认值：false&lt;/code>。
&lt;ul>
&lt;li>若为 true，则必须指定 runAsUser 字段，除非构建镜像时已经指定了进程运行的 UID。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>runAsUser(INTEGER)&lt;/strong> # 指定运行容器内进程的 UID 为 INTEGER&lt;/li>
&lt;/ul>
&lt;h2 id="其他类别的字段">其他类别的字段&lt;/h2>
&lt;h1 id="status">status&lt;/h1>
&lt;p>status 字段表示 Pod 的状态信息。状态可能会落后于系统的实际状态，尤其是当承载 Pod 的节点无法联系控制平面时。&lt;/p>
&lt;p>&lt;strong>phase: STRING&lt;/strong> # phase(阶段) 字段是对 Pod 在其生命周期中所处位置的简单、高级的总结。条件数组、原因和消息字段以及各个容器状态数组包含有关 pod 状态的更多详细信息。有五个可能的相位值：&lt;/p>
&lt;ul>
&lt;li>&lt;code>Pending&lt;/code> # Pod 已被 Kubernetes 系统接受，但尚未创建容器镜像。 这包括 Pod 被调度之前的时间以及通过网络下载镜像所花费的时间。&lt;/li>
&lt;li>&lt;code>Running&lt;/code> # Pod 已经被绑定到某个节点，并且所有的容器都已经创建完毕。至少有一个容器仍在运行，或者正在启动或重新启动过程中。&lt;/li>
&lt;li>&lt;code>Succeeded&lt;/code> # Pod 中的所有容器都已成功终止，不会重新启动。&lt;/li>
&lt;li>&lt;code>Failed&lt;/code> # Pod 中的所有容器都已终止，并且至少有一个容器因故障而终止。 容器要么以非零状态退出，要么被系统终止。&lt;/li>
&lt;li>&lt;code>Unknown&lt;/code> # 由于某种原因无法获取 Pod 的状态，通常是由于与 Pod 的主机通信时出错。&lt;/li>
&lt;li>更多信息： &lt;a href="https://kubernetes.io/zh-cn/docs/concepts/workloads/pods/pod-lifecycle#pod-phase">https://kubernetes.io/zh-cn/docs/concepts/workloads/pods/pod-lifecycle#pod-phase&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="通用字段">通用字段&lt;/h1>
&lt;h2 id="containers">containers&lt;/h2>
&lt;p>&lt;strong>args([]STRING)&lt;/strong> # 定义容器运行的命令和参数。用于替换容器镜像中 CMD 指令。详见&lt;a href="https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/">为容器定义命令和参数章节&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 注意，在使用 args 为容器传递 flags 时，不要使用空格。否则，会自动为 flags 和 参数 加上单引号，导致 flags 失效&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 比如现在有如下 args 配置&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">args&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">deletecr&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - --&lt;span style="color:#ae81ff">ns default&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 当容器运行后，会被转换成 &amp;#34;deletecr &amp;#39;--ns default&amp;#39;&amp;#34;，这时，deletecr 的 flag 变成了 --ns default，而不是 --ns。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 这时，就会报错，并提示如下内容&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">flag provided but not defined&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;--ns default&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 可以看到，在容器中，将 --ns default 这个整体当作了一个 flags。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 所以，如果想要使用 args，可以这样写：&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">args&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">deletecr&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - --&lt;span style="color:#ae81ff">ns=default&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 或者&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">args&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">deletecr&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - --&lt;span style="color:#ae81ff">ns&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">default&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>command([]STRING)&lt;/strong> # 定义容器运行的命令和参数。用于替换容器镜像中的 ENTRYPOINT 指令。详见为&lt;a href="https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/">容器定义命令和参数章节&lt;/a>&lt;/p>
&lt;p>&lt;strong>env([]Object)&lt;/strong> # 要在容器中设置的环境变量列表。详见&lt;a href="https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/">为容器定义命令和参数章节&lt;/a>&lt;/p>
&lt;p>&lt;strong>name(STRING)&lt;/strong># 容器的名称&lt;/p>
&lt;p>&lt;strong>ports([]Object)&lt;/strong># 容器对外暴露的端口，主要作为参考信息，就算不指定，通过 Service 也可以关联到容器中的指定端口，并通过 Service 访问容器内部。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>containerPort(INTEGER)&lt;/strong> # 容器内端口号&lt;/li>
&lt;li>&lt;strong>name(STRING)&lt;/strong> # 端口号的名称，必须在 pod 中唯一。service 可以通过 name 引用端口。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>resources(OJBECT)&lt;/strong># 容器所需的资源。即.所需的 CPU、Memory 等等&lt;/p>
&lt;ul>
&lt;li>&lt;strong>limits(map[STRING]STRING)&lt;/strong> # 容器可以使用的最大资源
&lt;ul>
&lt;li>&lt;strong>cpu(STRING)&lt;/strong> # 定义容器的 CPU 限额&lt;/li>
&lt;li>&lt;strong>memory(STRING)&lt;/strong> # 定义容器的 Memory 限额&lt;/li>
&lt;li>&amp;hellip;&amp;hellip; 其他资源限额&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>requests(map[STRING]STRING)&lt;/strong> # 容器所需的最小资源。如果 Requests 省略，则默认与 limits 下定义的值保持一直。
&lt;ul>
&lt;li>&lt;strong>cpu(STRING)&lt;/strong> # 定义容器的 CPU 需求&lt;/li>
&lt;li>&lt;strong>memory(STRING)&lt;/strong> # 定义容器的 Memory 需求&lt;/li>
&lt;li>&amp;hellip;&amp;hellip; 其他资源需求&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>volumeMounts([]Object)&lt;/strong> # 给 Container 挂载在 Pod 中创建的 Volume。Volume 通过下文的 &lt;a href="#Volumes(%E5%8D%B7)%20%E7%9B%B8%E5%85%B3%E5%AD%97%E6%AE%B5">Volumes 字段&lt;/a>指定&lt;/p>
&lt;ul>
&lt;li>&lt;strong>mountPath(STRING)&lt;/strong> # &lt;strong>必须的&lt;/strong>。把 Volume 挂载到容器中的目录上&lt;/li>
&lt;li>&lt;strong>name(STRING)&lt;/strong> # &lt;strong>必须的&lt;/strong>。要挂载的 Volume 的名称。必须与 &lt;code>spec.volumes.TYPE.volumeName&lt;/code> 字段的值相同，才可以引用到卷。&lt;/li>
&lt;/ul>
&lt;h3 id="image镜像-相关字段">Image(镜像) 相关字段&lt;/h3>
&lt;p>&lt;strong>image(STRING)&lt;/strong> # 容器使用的镜像&lt;/p>
&lt;p>&lt;strong>imagePullPolicy(STRING)&lt;/strong> # 指明镜像拉取策略，公有三种 Always、IfNotPresent、Never。&lt;code>默认值：IfNotPresent&lt;/code>&lt;/p>
&lt;h3 id="lifecycle生命周期-相关字段-1">Lifecycle(生命周期) 相关字段&lt;/h3>
&lt;p>Pod 中容器的生命周期功能详见&lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes%20%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/3.Pod%20%E9%9B%86%E7%BE%A4%E6%9C%80%E5%B0%8F%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8D%95%E5%85%83/Pod%20%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/Pod%20%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%B8%8E%E6%8E%A2%E9%92%88.md">《Pod 的生命周期》&lt;/a>章节&lt;/p>
&lt;p>&lt;strong>livenessProbe&lt;/strong>(&lt;a href="#XXXProbe">XXXProbe&lt;/a>) # 存活性探针，定期检测容器是否存活，容器&lt;strong>正常启动后&lt;/strong>开始检查。若探针失败则容器将会重启&lt;/p>
&lt;ul>
&lt;li>注意：如果 liveness 探测失败，kubelet 会杀死容器，并且容器会受到其重启策略的约束。如果不提供活性探测，则默认状态为成功。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>readinessProbe&lt;/strong>(&lt;a href="#XXXProbe">XXXProbe&lt;/a>) # 就绪状态探针，定期检测容器服务的准备状态，容器&lt;strong>正常启动前&lt;/strong>开始检查。若探针失败则容器不会变为 Running 状态。&lt;/p>
&lt;ul>
&lt;li>注意：如果就绪探测失败，端点控制器会从与 Pod 匹配的所有服务的端点中删除 Pod 的 IP 地址。初始延迟之前的默认就绪状态为失败。如果不提供就绪探测，则默认状态为成功。&lt;/li>
&lt;/ul>
&lt;h3 id="debugging调试-相关字段">Debugging(调试) 相关字段&lt;/h3>
&lt;p>&lt;strong>stdin(BOOLEAN)&lt;/strong> #&lt;/p>
&lt;p>&lt;strong>stdinOnce(BOOLEAN)&lt;/strong> #&lt;/p>
&lt;p>&lt;strong>tty(BOOLEAN)&lt;/strong> #&lt;/p>
&lt;h2 id="nodeaffinity">nodeAffinity&lt;/h2>
&lt;p>&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#NodeAffinity">https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#NodeAffinity&lt;/a>&lt;/p>
&lt;p>&lt;strong>preferredDuringSchedulingIgnoredDuringExecution([]Object)&lt;/strong> # 调度程序将倾向于将 Pod 调度到满足此字段指定的反亲和行要求的节点，但是也可能会选择违反一个或多个该字段指定的调度规则。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>preference(OBJECT) # 必须的&lt;/strong>。
&lt;ul>
&lt;li>&lt;strong>matchExpressions([]OBJECT)&lt;/strong> # 该字段下的内容就是 &lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes%20%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/1.API%20Resource%20%E4%B8%8E%20Object/API%20%E5%8F%82%E8%80%83/Common%20Definitions(%E9%80%9A%E7%94%A8%E5%AE%9A%E4%B9%89)/LabelSelector.md">通用的标签选择器字段&lt;/a>&lt;/li>
&lt;li>&lt;strong>matchFields(OBJECT])&lt;/strong> # 该字段下的内容就是&lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes%20%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/1.API%20Resource%20%E4%B8%8E%20Object/API%20%E5%8F%82%E8%80%83/Common%20Definitions(%E9%80%9A%E7%94%A8%E5%AE%9A%E4%B9%89)/LabelSelector.md">通用的标签选择器字段&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>weight(INTEGER) # 必须的&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>requiredDuringSchedulingIgnoredDuringExecution(Object)&lt;/strong> # 如果在调度时未满足该字段指定的反亲和性要求，则不会将 pod 调度到该节点上。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>nodeSelectorTerms([]OBJECT) # 必须的&lt;/strong>。节点选择器列表。列表中元素之间是“或”的关系
&lt;ul>
&lt;li>&lt;strong>matchExpressions([]OBJECT)&lt;/strong> # 该字段下的内容就是&lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes%20%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/1.API%20Resource%20%E4%B8%8E%20Object/API%20%E5%8F%82%E8%80%83/Common%20Definitions(%E9%80%9A%E7%94%A8%E5%AE%9A%E4%B9%89)/LabelSelector.md">通用的标签选择器字段&lt;/a>&lt;/li>
&lt;li>&lt;strong>matchFields([]OBJECT)&lt;/strong> # 该字段下的内容就是&lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes%20%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/1.API%20Resource%20%E4%B8%8E%20Object/API%20%E5%8F%82%E8%80%83/Common%20Definitions(%E9%80%9A%E7%94%A8%E5%AE%9A%E4%B9%89)/LabelSelector.md">通用的标签选择器字段&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="podaffinity">podAffinity&lt;/h2>
&lt;p>&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#PodAffinity">https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#PodAffinity&lt;/a>&lt;/p>
&lt;h2 id="podantiaffinity">podAntiAffinity&lt;/h2>
&lt;p>&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#PodAntiAffinity">https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#PodAntiAffinity&lt;/a>&lt;/p>
&lt;p>&lt;strong>preferredDuringSchedulingIgnoredDuringExecution&lt;/strong>([]Object) # 调度程序将倾向于将 Pod 调度到满足此字段指定的反亲和行要求的节点，但是也可能会选择违反一个或多个该字段指定的调度规则。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>preference&lt;/strong>(OBJECT) # &lt;strong>必须的&lt;/strong>。
&lt;ul>
&lt;li>&lt;strong>matchExpressions&lt;/strong>([]OBJECT) # 该字段下的内容就是&lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes%20%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/1.API%20Resource%20%E4%B8%8E%20Object/API%20%E5%8F%82%E8%80%83/Common%20Definitions(%E9%80%9A%E7%94%A8%E5%AE%9A%E4%B9%89)/LabelSelector.md">通用的标签选择器字段&lt;/a>&lt;/li>
&lt;li>&lt;strong>matchFields&lt;/strong>([]OBJECT) # 该字段下的内容就是&lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes%20%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/1.API%20Resource%20%E4%B8%8E%20Object/API%20%E5%8F%82%E8%80%83/Common%20Definitions(%E9%80%9A%E7%94%A8%E5%AE%9A%E4%B9%89)/LabelSelector.md">通用的标签选择器字段&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>weight&lt;/strong>(INTEGER) # &lt;strong>必须的&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>requiredDuringSchedulingIgnoredDuringExecution&lt;/strong>([]Object) # 如果在调度时未满足该字段指定的反亲和性要求，则不会将 pod 调度到该节点上。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>labelSelector(OBJECT)&lt;/strong> # 该字段下的内容就是&lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes%20%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/1.API%20Resource%20%E4%B8%8E%20Object/API%20%E5%8F%82%E8%80%83/Common%20Definitions(%E9%80%9A%E7%94%A8%E5%AE%9A%E4%B9%89)/LabelSelector.md">通用的标签选择器字段&lt;/a>&lt;/li>
&lt;li>&lt;strong>namespaceSelector(OBJECT)&lt;/strong> # 该字段下的内容就是&lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes%20%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/1.API%20Resource%20%E4%B8%8E%20Object/API%20%E5%8F%82%E8%80%83/Common%20Definitions(%E9%80%9A%E7%94%A8%E5%AE%9A%E4%B9%89)/LabelSelector.md">通用的标签选择器字段&lt;/a>&lt;/li>
&lt;li>&lt;strong>namespaces([]STING)&lt;/strong> # 名称空间。&lt;code>默认值：该 Pod 所在的名称空间&lt;/code>&lt;/li>
&lt;li>&lt;strong>topologyKey(STRING)&lt;/strong> # &lt;strong>必须的&lt;/strong>。想要匹配的 Node 标签的键&lt;/li>
&lt;/ul>
&lt;h2 id="xxxprobe">XXXProbe&lt;/h2>
&lt;p>XXXProbe 是 Probe(探针) 相关字段，比如 livenessProbe、readinessProbe 等字段的值都可以使用这部分内容。&lt;/p>
&lt;p>&lt;strong>exec(Object)&lt;/strong> # 通过在容器中执行命令作为探针检测方法&lt;/p>
&lt;ul>
&lt;li>&lt;strong>exec.command([]STRING)&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>httpGET(Object)&lt;/strong> # 使用 HTTP 的 GET 的请求作为探针检测方法。&lt;/p>
&lt;p>&lt;strong>tcpSocket(Object)&lt;/strong> # 通过检测 TCP 的端口作为探针检测方法。&lt;/p>
&lt;p>&lt;strong>grpc(Object)&lt;/strong> #&lt;/p>
&lt;h1 id="pod-manifest-样例">Pod Manifest 样例&lt;/h1>
&lt;p>以下是最简单最基本的 Pod 模板，具体 Pod 中可以实现的功能以及这些功能应该使用哪些 yaml 里的字段详见以下几处&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kubernetes.io/docs/tasks/configure-pod-container/">Configure Pods and Containers(配置 Pod 和 Container)&lt;/a>章节下面的所有内容；每种可以在 Pod 中配置的功能，都是一小章节&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/docs/tasks/inject-data-application/">Inject Data Into Applications(将数据注入应用程序)&lt;/a> 章节&lt;/li>
&lt;/ul>
&lt;h2 id="简单示例">简单示例&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Pod&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">myapp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">myapp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">containers&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">myapp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">lchdzh/network-test&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Statefulset Manifest 详解</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/1.API-Resource-%E4%B8%8E-Object/API-%E5%8F%82%E8%80%83/%E5%B7%A5%E4%BD%9C%E8%B4%9F%E8%BD%BD%E8%B5%84%E6%BA%90/Statefulset-Manifest-%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/1.API-Resource-%E4%B8%8E-Object/API-%E5%8F%82%E8%80%83/%E5%B7%A5%E4%BD%9C%E8%B4%9F%E8%BD%BD%E8%B5%84%E6%BA%90/Statefulset-Manifest-%E8%AF%A6%E8%A7%A3/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.21/#statefulset-v1-apps">API 文档单页&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/stateful-set-v1/">官方文档，参考-KubernetesAPI-工作负载资源-StatefulSet&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="manifest-中的顶层字段">Manifest 中的顶层字段&lt;/h1>
&lt;ul>
&lt;li>&lt;strong>apiVersion&lt;/strong>: apps/v1&lt;/li>
&lt;li>&lt;strong>kind&lt;/strong>: StatefulSet&lt;/li>
&lt;li>&lt;strong>metadata&lt;/strong>(&lt;a href="#metadata">metadata&lt;/a>)&lt;/li>
&lt;li>&lt;strong>spec&lt;/strong>(&lt;a href="#spec">spec&lt;/a>) # 指明该 StatefulSet 的规格&lt;/li>
&lt;li>&lt;strong>status&lt;/strong>(&lt;a href="#status">status&lt;/a>)&lt;/li>
&lt;/ul>
&lt;h1 id="metadata">metadata&lt;/h1>
&lt;p>Statefulset 对象的元数据，该字段内容详见通用定义的 [ObjectMeta](/docs/10.云原生/2.3.Kubernetes%20 容器编排系统/1.API、Resource(资源)、Object(对象)/API%20 参考/Common%20Definitions(通用定义).md Definitions(通用定义).md)&lt;/p>
&lt;h1 id="spec">spec&lt;/h1>
&lt;p>spec 用来描述一个 Statefulset 应该具有的属性。也就是用来定义 Statefulset 的行为规范。一共分为如下几类&lt;/p>
&lt;ul>
&lt;li>描述 Statefulset 类型的控制器的行为&lt;/li>
&lt;li>描述 Statefulset 控制器所关联的 Pod 的属性。&lt;/li>
&lt;/ul>
&lt;h2 id="控制器行为">控制器行为&lt;/h2>
&lt;p>&lt;strong>podManagementPolicy(STRING)&lt;/strong> # Pod 管理策略。&lt;code>默认值：OrderedReady&lt;/code>
此配置只影响扩、缩 Pod 的行为，更新 Pod 不受此配置控制。可用的值有以下两个：&lt;/p>
&lt;ul>
&lt;li>OrderedReady # 按照 Pod 的次序依次创建每个 Pod 并等待 Ready 之后才创建后面的 Pod&lt;/li>
&lt;li>Parallel # 并行创建或删除 Pod（不等待前面的 Pod Ready 就开始创建所有的 Pod）&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>replicas(INT)&lt;/strong> # 该控制器运行的 Pod 数量，&lt;code>默认值：1&lt;/code>。
&lt;strong>selector(Object) # 必须的&lt;/strong>。Pod 的选择器，根据标签匹配要控制的 Pod。必须与 &lt;code>template.metadata.labels&lt;/code> 的内容匹配。&lt;/p>
&lt;ul>
&lt;li>该字段内容详见通用定义的[ LabelSelector](/docs/10.云原生/2.3.Kubernetes%20 容器编排系统/1.API、Resource(资源)、Object(对象)/API%20 参考/Common%20Definitions(通用定义)/LabelSelector%20 详解.md Definitions(通用定义)/LabelSelector 详解.md)。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>serviceName(STRING) # 必须的&lt;/strong>。serviceName 是管理此 StatefulSet 的服务的名称。&lt;/p>
&lt;p>该服务必须在 StatefulSet 之前存在，并且负责该集合的网络标识。 Pod 会遵循以下格式获取 DNS 或 hostname：pod-specific-string.serviceName.default.svc.cluster.local，其中&amp;quot;pod-specific-string&amp;quot;由 StatefulSet 控制器管理。&lt;/p>
&lt;p>说白了，就是该字段指定的 service 名称将会自动生成子域名(而只有 headless 类型的 svc 才具有子域名)，假如现在有如下 pod 和 svc&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># kubectl get pod -n cs-monitoring -o wide&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cs-prometheus-0 2/2 Running &lt;span style="color:#ae81ff">0&lt;/span> 4m15s 10.244.4.54 node-2.bj-cs &amp;lt;none&amp;gt; &amp;lt;none&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cs-prometheus-1 2/2 Running &lt;span style="color:#ae81ff">0&lt;/span> 4m15s 10.244.5.55 node-3.bj-cs &amp;lt;none&amp;gt; &amp;lt;none&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># kubectl get svc -n cs-monitoring&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NAME TYPE CLUSTER-IP EXTERNAL-IP PORT&lt;span style="color:#f92672">(&lt;/span>S&lt;span style="color:#f92672">)&lt;/span> AGE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cs-prometheus NodePort 10.98.204.140 &amp;lt;none&amp;gt; 9090:31001/TCP,9091:31002/TCP 5d
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cs-prometheus-headless ClusterIP None &amp;lt;none&amp;gt; 9090/TCP 35s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们可以发现，&lt;code>cs-prometheus-0.cs-prometheus-headless.cs-monitoring.svc&lt;/code> 这个域名将会固定解析 &lt;code>10.244.4.54&lt;/code>。而 &lt;code>cs-prometheus-1.cs-prometheus-headless.cs-monitoring.svc&lt;/code> 这个域名将会固定解析到 &lt;code>10.244.5.55&lt;/code>。而两个 svc 的域名，则是正常的解析结果，headless 是轮询解析到 pod 的 IP，而正常的 svc 直接解析到 10.98.204.140。&lt;/p>
&lt;p>&lt;strong>volumeClaimTemplates([]Object)&lt;/strong> # PVC 模板。用于从指定的 storageclass 中申请 PVC，可直接当做 volume，在 volumeMonut 中使用&lt;/p>
&lt;p>注意：通过 volumeClaimTemplates 定义的 PVC 在 statefulset 删除后不会自动删除，详见：&lt;a href="https://github.com/kubernetes/kubernetes/issues/55045">官方 issue&lt;/a>&lt;/p>
&lt;ul>
&lt;li>metadata:
&lt;ul>
&lt;li>name: STRING # 指定 volumeClaimTemplates 的名称，该名称用于在 volumeMount 时使用&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>spec:
&lt;ul>
&lt;li>accessModes: # 指定该 volume 的访问模式
&lt;ul>
&lt;li>ReadWriteOnce # 样例为读写模式&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>resources: # 指定存储资源的申请量，样例为需求 30G
&lt;ul>
&lt;li>requests:
&lt;ul>
&lt;li>storage: 30Gi&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>storageClassName: STRING # 指定要从哪个 storageclass 中申请资源&lt;/li>
&lt;li>volumeMode: Filesystem # 指定卷模式，样例为 Filesystem&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="pod-属性">Pod 属性&lt;/h2>
&lt;p>&lt;strong>template(Ojbect) # 必须的&lt;/strong>。定义 Pod 的模板,使用 Pod 类型的 metadata 和 spec 字段。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>metadata&lt;/strong>(&lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes%20%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/1.API%20Resource%20%E4%B8%8E%20Object/API%20%E5%8F%82%E8%80%83/%E5%B7%A5%E4%BD%9C%E8%B4%9F%E8%BD%BD%E8%B5%84%E6%BA%90/Pod%20Manifest%20%E8%AF%A6%E8%A7%A3.md#metadata">PodMetadata&lt;/a>) # 与 pod 资源定义的内容基本一致&lt;/li>
&lt;li>&lt;strong>spec&lt;/strong>(&lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes%20%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/1.API%20Resource%20%E4%B8%8E%20Object/API%20%E5%8F%82%E8%80%83/%E5%B7%A5%E4%BD%9C%E8%B4%9F%E8%BD%BD%E8%B5%84%E6%BA%90/Pod%20Manifest%20%E8%AF%A6%E8%A7%A3.md#spec">PodSpec&lt;/a>) # 与 pod 资源定义的内容基本一致&lt;/li>
&lt;/ul></description></item><item><title>Docs: 工作负载资源</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/1.API-Resource-%E4%B8%8E-Object/API-%E5%8F%82%E8%80%83/%E5%B7%A5%E4%BD%9C%E8%B4%9F%E8%BD%BD%E8%B5%84%E6%BA%90/%E5%B7%A5%E4%BD%9C%E8%B4%9F%E8%BD%BD%E8%B5%84%E6%BA%90/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/1.API-Resource-%E4%B8%8E-Object/API-%E5%8F%82%E8%80%83/%E5%B7%A5%E4%BD%9C%E8%B4%9F%E8%BD%BD%E8%B5%84%E6%BA%90/%E5%B7%A5%E4%BD%9C%E8%B4%9F%E8%BD%BD%E8%B5%84%E6%BA%90/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/">官方文档，参考-KubernetesAPI-工作负载资源&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Workloads Resources(工作负载资源)&lt;/p>
&lt;h2 id="podhttpskubernetesiodocsreferencekubernetes-apiworkload-resourcespod-v1">&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/">Pod&lt;/a>&lt;/h2>
&lt;p>Pod 是在服务器上运行的容器的集合&lt;/p>
&lt;h2 id="ephemeralcontainershttpskubernetesiodocsreferencekubernetes-apiworkload-resourcesephemeral-containers-v1">&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/ephemeral-containers-v1/">EphemeralContainers&lt;/a>&lt;/h2>
&lt;p>A list of ephemeral containers used with the Pod ephemeralcontainers subresource.&lt;/p>
&lt;h2 id="podtemplatehttpskubernetesiodocsreferencekubernetes-apiworkload-resourcespod-template-v1">&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-template-v1/">PodTemplate&lt;/a>&lt;/h2>
&lt;p>PodTemplate describes a template for creating copies of a predefined pod.&lt;/p>
&lt;h2 id="replicationcontrollerhttpskubernetesiodocsreferencekubernetes-apiworkload-resourcesreplication-controller-v1">&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/replication-controller-v1/">ReplicationController&lt;/a>&lt;/h2>
&lt;p>ReplicationController represents the configuration of a replication controller.&lt;/p>
&lt;h2 id="replicasethttpskubernetesiodocsreferencekubernetes-apiworkload-resourcesreplica-set-v1">&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/replica-set-v1/">ReplicaSet&lt;/a>&lt;/h2>
&lt;p>ReplicaSet ensures that a specified number of pod replicas are running at any given time.&lt;/p>
&lt;h2 id="deploymenthttpskubernetesiodocsreferencekubernetes-apiworkload-resourcesdeployment-v1">&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/deployment-v1/">Deployment&lt;/a>&lt;/h2>
&lt;p>Deployment enables declarative updates for Pods and ReplicaSets.&lt;/p>
&lt;h2 id="statefulsethttpskubernetesiodocsreferencekubernetes-apiworkload-resourcesstateful-set-v1">&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/stateful-set-v1/">StatefulSet&lt;/a>&lt;/h2>
&lt;p>StatefulSet represents a set of pods with consistent identities.&lt;/p>
&lt;h2 id="controllerrevisionhttpskubernetesiodocsreferencekubernetes-apiworkload-resourcescontroller-revision-v1">&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/controller-revision-v1/">ControllerRevision&lt;/a>&lt;/h2>
&lt;p>ControllerRevision implements an immutable snapshot of state data.&lt;/p>
&lt;h2 id="daemonsethttpskubernetesiodocsreferencekubernetes-apiworkload-resourcesdaemon-set-v1">&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/daemon-set-v1/">DaemonSet&lt;/a>&lt;/h2>
&lt;p>DaemonSet represents the configuration of a daemon set.&lt;/p>
&lt;h2 id="jobhttpskubernetesiodocsreferencekubernetes-apiworkload-resourcesjob-v1">&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/job-v1/">Job&lt;/a>&lt;/h2>
&lt;p>Job represents the configuration of a single job.&lt;/p>
&lt;h2 id="cronjobhttpskubernetesiodocsreferencekubernetes-apiworkload-resourcescron-job-v1">&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/cron-job-v1/">CronJob&lt;/a>&lt;/h2>
&lt;p>CronJob represents the configuration of a single cron job.&lt;/p>
&lt;h2 id="horizontalpodautoscalerhttpskubernetesiodocsreferencekubernetes-apiworkload-resourceshorizontal-pod-autoscaler-v1">&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/horizontal-pod-autoscaler-v1/">HorizontalPodAutoscaler&lt;/a>&lt;/h2>
&lt;p>configuration of a horizontal pod autoscaler.&lt;/p>
&lt;h2 id="horizontalpodautoscaler-v2beta2httpskubernetesiodocsreferencekubernetes-apiworkload-resourceshorizontal-pod-autoscaler-v2beta2">&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/horizontal-pod-autoscaler-v2beta2/">HorizontalPodAutoscaler v2beta2&lt;/a>&lt;/h2>
&lt;p>HorizontalPodAutoscaler is the configuration for a horizontal pod autoscaler, which automatically manages the replica count of any resource implementing the scale subresource based on the metrics specified.&lt;/p>
&lt;h2 id="priorityclasshttpskubernetesiodocsreferencekubernetes-apiworkload-resourcespriority-class-v1">&lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/priority-class-v1/">PriorityClass&lt;/a>&lt;/h2>
&lt;p>PriorityClass defines mapping from a priority class name to the priority integer value.&lt;/p></description></item></channel></rss>