<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦的站点 – 源码解析</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/Kubernetes-%E5%BC%80%E5%8F%91/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</link><description>Recent content in 源码解析 on 断念梦的站点</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/Kubernetes-%E5%BC%80%E5%8F%91/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: API Server 源码</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/Kubernetes-%E5%BC%80%E5%8F%91/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/API-Server-%E6%BA%90%E7%A0%81/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/Kubernetes-%E5%BC%80%E5%8F%91/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/API-Server-%E6%BA%90%E7%A0%81/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/HGJKYSfpIG3YxJTy0qVsIw">公众号,API Server service 的实现&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>Docs: API Server 源码</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/Kubernetes-%E5%BC%80%E5%8F%91/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/API-Server-%E6%BA%90%E7%A0%81/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/Kubernetes-%E5%BC%80%E5%8F%91/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/API-Server-%E6%BA%90%E7%A0%81/</guid><description/></item><item><title>Docs: API 源码</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/Kubernetes-%E5%BC%80%E5%8F%91/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/API-%E6%BA%90%E7%A0%81/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/Kubernetes-%E5%BC%80%E5%8F%91/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/API-%E6%BA%90%E7%A0%81/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/f31GkTs9j8V-OUYFtYzTLg">公众号-云原生实验室，深入 Kubernetes API 的源码实现&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Kubernetes API 代码在 &lt;a href="https://github.com/kubernetes/api">k8s.io/api &lt;/a>仓库中，该仓库的代码来源于 &lt;a href="https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/api">https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/api&lt;/a> 这个核心仓库的目录中。&lt;/p>
&lt;p>在 k8s.io/api 仓库定义的 kubernetes API 规范中，Pod 作为最基础的资源类型，一个典型的 YAML 形式的序列化 pod 对象如下所示：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Pod&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">webserver&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">webserver&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">containers&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">webserver&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">nginx&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">containerPort&lt;/span>: &lt;span style="color:#ae81ff">80&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>从编程的角度来看，序列化的 pod 对象最终会被发送到 API-Server 并解码为 Pod 类型的 Go 结构体，同时 YAML 中的各个字段会被赋值给该 Go 结构体。那么，Pod 类型在 Go 语言结构体中是怎么定义的呢？&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// source code from https://github.com/kubernetes/api/blob/master/core/v1/types.go
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Pod&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 从TypeMeta字段名可以看出该字段定义Pod类型的元信息，类似于面向对象编程里面
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Class本身的元信息，类似于Pod类型的API分组、API版本等
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">metav1&lt;/span>.&lt;span style="color:#a6e22e">TypeMeta&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;,inline&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ObjectMeta字段定义单个Pod对象的元信息。每个kubernetes资源对象都有自己的元信息，
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 例如名字、命名空间、标签、注释等等，kuberentes把这些公共的属性提取出来就是
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// metav1.ObjectMeta，成为了API对象类型的父类
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">metav1&lt;/span>.&lt;span style="color:#a6e22e">ObjectMeta&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;metadata,omitempty&amp;#34; protobuf:&amp;#34;bytes,1,opt,name=metadata&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// PodSpec表示Pod类型的对象定义规范，最为代表性的就是CPU、内存的资源使用。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 这个字段和YAML中spec字段对应
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Spec&lt;/span> &lt;span style="color:#a6e22e">PodSpec&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;spec,omitempty&amp;#34; protobuf:&amp;#34;bytes,2,opt,name=spec&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// PodStatus表示Pod的状态，比如是运行还是挂起、Pod的IP等等。Kubernetes会根据pod在
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 集群中的实际状态来更新PodStatus字段
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Status&lt;/span> &lt;span style="color:#a6e22e">PodStatus&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;status,omitempty&amp;#34; protobuf:&amp;#34;bytes,3,opt,name=status&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>从上面 Pod 定义的结构体可以看出，它继承了 metav1.TypeMeta 和 metav1.ObjectMeta 两个类型，metav1.TypeMeta 对应 YAML 中的 kind 与 apiVersion 段，而 metav1.ObjectMeta 则对应 metadata 字段。这其实也可以从 Go 结构体的字段 json 标签看得出来。除了 metav1.TypeMeta 和 metav1.ObjectMeta 字段，Pod 结构体同时还定义了 Spec 和 Status 两个成员变量。如果去查看 k8s.io/api 仓库中其他 API 资源结构体的定义就会发现 kubernetes 绝大部分 API 资源类型都是这样的结构，这也就是说 kubernetes API 资源类型都继承 metav1.TypeMeta 和 metav1.ObjectMeta，前者用于定义资源类型的属性，后者用于定义资源对象的公共属性；Spec 用于定义 API 资源类型的私有属性，也是不同 API 资源类型之间的区别所在；Status 则是用于描述每个资源对象的状态，这和每个资源类型紧密相关的。
关于 metav1.TypeMeta 和 metav1.ObjectMeta 字段从语义上也很好理解，这两个类型作为所有 kubernetes API 资源对象的基类，每个 API 资源对象需要 metav1.TypeMeta 字段用于描述自己是什么类型，这样才能构造相应类型的对象，所以相同类型的所有资源对象的 metav1.TypeMeta 字段都是相同的，但是 metav1.ObjectMeta 则不同，它是定义资源对象实例的属性，即所有资源对象都应该具备的属性。这部分就是和对象本身相关，和类型无关，所以相同类型的资源对象的 metav1.ObjectMeta 可能是不同的。
在 kubernetes 的 API 资源对象中除了单体对象外，还有对象列表类型，用于描述一组相同类型的对象列表。对象列表的典型应用场景就是列举，对象列表就可以表达一组资源对象。可能有些读者会问为什么不用对象的 slice，例如[]Pod，伴随着笔者对对象列表的解释读者就会理解，此处以 PodList 为例进行分析：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// source code from https://github.com/kubernetes/api/blob/master/core/v1/types.go
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">PodList&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// PodList也需要继承metav1.TypeMeta，毕竟对象列表也好、单体对象也好都需要类型属性。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// PodList比[]Pod类型在yaml或者json表达上多了类型描述，当需要根据YAML构建对象列表的时候，
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 就可以根据类型描述反序列成为PodList。而[]Pod则不可以，必须确保YAML就是[]Pod序列化的
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 结果，否则就会报错。这就无法实现一个通用的对象序列化/反序列化。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">metav1&lt;/span>.&lt;span style="color:#a6e22e">TypeMeta&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;,inline&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 与Pod不同，PodList继承了metav1.ListMeta，metav1.ListMeta是所有资源对象列表类型的父类，
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// ListMeta定义了所有对象列表类型实例的公共属性。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">metav1&lt;/span>.&lt;span style="color:#a6e22e">ListMeta&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;metadata,omitempty&amp;#34; protobuf:&amp;#34;bytes,1,opt,name=metadata&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Items字段则是PodList定义的本质，表示Pod资源对象的列表，所以说PodList就是[]Pod基础上加了一些
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 跟类型和对象列表相关的元信息
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Items&lt;/span> []&lt;span style="color:#a6e22e">Pod&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;items&amp;#34; protobuf:&amp;#34;bytes,2,rep,name=items&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在开始下一节的内容之前，我们先做个小结：&lt;/p>
&lt;ol>
&lt;li>metav1.TypeMeta 和 metav1.ObjectMeta 是所有 API 单体资源对象的父类；&lt;/li>
&lt;li>metav1.TypeMeta 和 metav1.ListMeta 是所有 API 资源对象列表的父类；&lt;/li>
&lt;li>metav1.TypeMeta 是所有 API 资源对象的父类，因为所有的资源对象都要说明表示是什么类型；&lt;/li>
&lt;/ol>
&lt;h2 id="metav1">metav1&lt;a class="td-heading-self-link" href="#metav1" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>这里的 metav1 是包 k8s.io/apimachinery/pkg/apis/meta/v1 的别名，本文其他部分的将用 metav1 指代。&lt;/p>
&lt;h3 id="metav1typemeta">metav1.TypeMeta&lt;a class="td-heading-self-link" href="#metav1typemeta" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>metav1.TypeMeta 用来描述 kubernetes API 资源对象类型的元信息，包括资源类型的名字以及对应 API 的 schema。这里的 schema 指的是资源类型 API 分组以及版本。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// source code from https://github.com/kubernetes/apimachinery/blob/master/pkg/apis/meta/v1/types.go
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// TypeMeta describes an individual object in an API response or request
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// with strings representing the type of the object and its API schema version.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Structures that are versioned or persisted should inline TypeMeta.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">TypeMeta&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Kind is a string value representing the REST resource this object represents.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Servers may infer this from the endpoint the client submits requests to.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Cannot be updated.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Kind&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;kind,omitempty&amp;#34; protobuf:&amp;#34;bytes,1,opt,name=kind&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// APIVersion defines the versioned schema of this representation of an object.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Servers should convert recognized schemas to the latest internal value, and
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// may reject unrecognized values.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">APIVersion&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;apiVersion,omitempty&amp;#34; protobuf:&amp;#34;bytes,2,opt,name=apiVersion&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>细心的同学还会发现 metav1.TypeMeta 实现了 schema.ObjectKind 接口，schema.ObjectKind 接口了所有序列化对象怎么解码与编码资源类型信息的方法，它的完整定义如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// source code from https://github.com/kubernetes/apimachinery/blob/master/pkg/runtime/schema/interfaces.go
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// All objects that are serialized from a Scheme encode their type information. This interface is used
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// by serialization to set type information from the Scheme onto the serialized version of an object.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// For objects that cannot be serialized or have unique requirements, this interface may be a no-op.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">ObjectKind&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// SetGroupVersionKind sets or clears the intended serialized kind of an object. Passing kind nil
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// should clear the current setting.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">SetGroupVersionKind&lt;/span>(&lt;span style="color:#a6e22e">kind&lt;/span> &lt;span style="color:#a6e22e">GroupVersionKind&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// GroupVersionKind returns the stored group, version, and kind of an object, or an empty struct
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// if the object does not expose or provide these fields.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">GroupVersionKind&lt;/span>() &lt;span style="color:#a6e22e">GroupVersionKind&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>从 metav1.TypeMeta 对象的实例（也就是任何 kubernetes API 资源对象）都可以通过 &lt;code>GetObjectKind()&lt;/code> 方法获取到 schema.ObjectKind 类型对象，而 TypeMeta 对象的实例本身也实现了 schema.ObjectKind 接口：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// source code from https://github.com/kubernetes/apimachinery/blob/master/pkg/apis/meta/v1/types.go
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">obj&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">TypeMeta&lt;/span>) &lt;span style="color:#a6e22e">GetObjectKind&lt;/span>() &lt;span style="color:#a6e22e">schema&lt;/span>.&lt;span style="color:#a6e22e">ObjectKind&lt;/span> { &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">obj&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// SetGroupVersionKind satisfies the ObjectKind interface for all objects that embed TypeMeta
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">obj&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">TypeMeta&lt;/span>) &lt;span style="color:#a6e22e">SetGroupVersionKind&lt;/span>(&lt;span style="color:#a6e22e">gvk&lt;/span> &lt;span style="color:#a6e22e">schema&lt;/span>.&lt;span style="color:#a6e22e">GroupVersionKind&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">obj&lt;/span>.&lt;span style="color:#a6e22e">APIVersion&lt;/span>, &lt;span style="color:#a6e22e">obj&lt;/span>.&lt;span style="color:#a6e22e">Kind&lt;/span> = &lt;span style="color:#a6e22e">gvk&lt;/span>.&lt;span style="color:#a6e22e">ToAPIVersionAndKind&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// GroupVersionKind satisfies the ObjectKind interface for all objects that embed TypeMeta
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">obj&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">TypeMeta&lt;/span>) &lt;span style="color:#a6e22e">GroupVersionKind&lt;/span>() &lt;span style="color:#a6e22e">schema&lt;/span>.&lt;span style="color:#a6e22e">GroupVersionKind&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">schema&lt;/span>.&lt;span style="color:#a6e22e">FromAPIVersionAndKind&lt;/span>(&lt;span style="color:#a6e22e">obj&lt;/span>.&lt;span style="color:#a6e22e">APIVersion&lt;/span>, &lt;span style="color:#a6e22e">obj&lt;/span>.&lt;span style="color:#a6e22e">Kind&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="metav1objectmeta">metav1.ObjectMeta&lt;a class="td-heading-self-link" href="#metav1objectmeta" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>metav1.ObjectMeta 则用来定义资源对象实例的属性，即所有资源对象都应该具备的属性。这部分就是和对象本身相关，和类型无关，所以相同类型的资源对象的 metav1.ObjectMeta 可能是不同的。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// source code from https://github.com/kubernetes/apimachinery/blob/master/pkg/apis/meta/v1/types.go
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// ObjectMeta is metadata that all persisted resources must have, which includes all objects
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// users must create.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">ObjectMeta&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Name must be unique within a namespace. Is required when creating resources, although
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// some resources may allow a client to request the generation of an appropriate name
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// automatically. Name is primarily intended for creation idempotence and configuration
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// definition.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Name&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;name,omitempty&amp;#34; protobuf:&amp;#34;bytes,1,opt,name=name&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// GenerateName is an optional prefix, used by the server, to generate a unique
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// name ONLY IF the Name field has not been provided.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Populated by the system. Read-only.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">GenerateName&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;generateName,omitempty&amp;#34; protobuf:&amp;#34;bytes,2,opt,name=generateName&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Namespace defines the space within which each name must be unique. An empty namespace is
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// equivalent to the &amp;#34;default&amp;#34; namespace, but &amp;#34;default&amp;#34; is the canonical representation.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Not all objects are required to be scoped to a namespace - the value of this field for
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// those objects will be empty.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Namespace&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;namespace,omitempty&amp;#34; protobuf:&amp;#34;bytes,3,opt,name=namespace&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// SelfLink is a URL representing this object.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Populated by the system. Read-only.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">SelfLink&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;selfLink,omitempty&amp;#34; protobuf:&amp;#34;bytes,4,opt,name=selfLink&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// UID is the unique in time and space value for this object. It is typically generated by
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// the server on successful creation of a resource and is not allowed to change on PUT
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// operations.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Populated by the system. Read-only.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">UID&lt;/span> &lt;span style="color:#a6e22e">types&lt;/span>.&lt;span style="color:#a6e22e">UID&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;uid,omitempty&amp;#34; protobuf:&amp;#34;bytes,5,opt,name=uid,casttype=k8s.io/kubernetes/pkg/types.UID&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// An opaque value that represents the internal version of this object that can
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// be used by clients to determine when objects have changed. May be used for optimistic
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// concurrency, change detection, and the watch operation on a resource or set of resources.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Clients must treat these values as opaque and passed unmodified back to the server.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// They may only be valid for a particular resource or set of resources.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Populated by the system. Read-only.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">ResourceVersion&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;resourceVersion,omitempty&amp;#34; protobuf:&amp;#34;bytes,6,opt,name=resourceVersion&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// A sequence number representing a specific generation of the desired state.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Populated by the system. Read-only.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Generation&lt;/span> &lt;span style="color:#66d9ef">int64&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;generation,omitempty&amp;#34; protobuf:&amp;#34;varint,7,opt,name=generation&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// CreationTimestamp is a timestamp representing the server time when this object was
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// created. It is not guaranteed to be set in happens-before order across separate operations.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Clients may not set this value. It is represented in RFC3339 form and is in UTC.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Populated by the system. Read-only.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">CreationTimestamp&lt;/span> &lt;span style="color:#a6e22e">Time&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;creationTimestamp,omitempty&amp;#34; protobuf:&amp;#34;bytes,8,opt,name=creationTimestamp&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// field is set by the server when a graceful deletion is requested by the user, and is not
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// directly settable by a client. The resource is expected to be deleted (no longer visible
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// from resource lists, and not reachable by name) after the time in this field, once the
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// finalizers list is empty. As long as the finalizers list contains items, deletion is blocked.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Once the deletionTimestamp is set, this value may not be unset or be set further into the
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// future, although it may be shortened or the resource may be deleted prior to this time.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// by sending a graceful termination signal to the containers in the pod. After that 30 seconds,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// remove the pod from the API. In the presence of network partitions, this object may still
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// exist after this timestamp, until an administrator or automated process can determine the
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// resource is fully terminated.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// If not set, graceful deletion of the object has not been requested.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Populated by the system when a graceful deletion is requested.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Read-only.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">DeletionTimestamp&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Time&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;deletionTimestamp,omitempty&amp;#34; protobuf:&amp;#34;bytes,9,opt,name=deletionTimestamp&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Number of seconds allowed for this object to gracefully terminate before
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// it will be removed from the system. Only set when deletionTimestamp is also set.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// May only be shortened.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Read-only.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">DeletionGracePeriodSeconds&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">int64&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;deletionGracePeriodSeconds,omitempty&amp;#34; protobuf:&amp;#34;varint,10,opt,name=deletionGracePeriodSeconds&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Map of string keys and values that can be used to organize and categorize
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// (scope and select) objects. May match selectors of replication controllers
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// and services.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Labels&lt;/span> &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;labels,omitempty&amp;#34; protobuf:&amp;#34;bytes,11,rep,name=labels&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Annotations is an unstructured key value map stored with a resource that may be
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// set by external tools to store and retrieve arbitrary metadata. They are not
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// queryable and should be preserved when modifying objects.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Annotations&lt;/span> &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;annotations,omitempty&amp;#34; protobuf:&amp;#34;bytes,12,rep,name=annotations&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// List of objects depended by this object. If ALL objects in the list have
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// been deleted, this object will be garbage collected. If this object is managed by a controller,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// then an entry in this list will point to this controller, with the controller field set to true.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">OwnerReferences&lt;/span> []&lt;span style="color:#a6e22e">OwnerReference&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;ownerReferences,omitempty&amp;#34; patchStrategy:&amp;#34;merge&amp;#34; patchMergeKey:&amp;#34;uid&amp;#34; protobuf:&amp;#34;bytes,13,rep,name=ownerReferences&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Must be empty before the object is deleted from the registry. Each entry
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// is an identifier for the responsible component that will remove the entry
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// from the list. If the deletionTimestamp of the object is non-nil, entries
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// in this list can only be removed.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Finalizers may be processed and removed in any order. Order is NOT enforced
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// because it introduces significant risk of stuck finalizers.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// finalizers is a shared field, any actor with permission can reorder it.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// If the finalizer list is processed in order, then this can lead to a situation
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// in which the component responsible for the first finalizer in the list is
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// waiting for a signal (field value, external system, or other) produced by a
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// component responsible for a finalizer later in the list, resulting in a deadlock.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Without enforced ordering finalizers are free to order amongst themselves and
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// are not vulnerable to ordering changes in the list.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Finalizers&lt;/span> []&lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;finalizers,omitempty&amp;#34; patchStrategy:&amp;#34;merge&amp;#34; protobuf:&amp;#34;bytes,14,rep,name=finalizers&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// The name of the cluster which the object belongs to.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// This is used to distinguish resources with same name and namespace in different clusters.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">ClusterName&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;clusterName,omitempty&amp;#34; protobuf:&amp;#34;bytes,15,opt,name=clusterName&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ManagedFields maps workflow-id and version to the set of fields
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// that are managed by that workflow. This is mostly for internal
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// housekeeping, and users typically shouldn&amp;#39;t need to set or
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// understand this field. A workflow can be the user&amp;#39;s name, a
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// controller&amp;#39;s name, or the name of a specific apply path like
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// &amp;#34;ci-cd&amp;#34;. The set of fields is always in the version that the
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// workflow used when modifying the object.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">ManagedFields&lt;/span> []&lt;span style="color:#a6e22e">ManagedFieldsEntry&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;managedFields,omitempty&amp;#34; protobuf:&amp;#34;bytes,17,rep,name=managedFields&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>metav1.ObjectMeta 还实现了 metav1.Object 与 metav1.MetaAccessor 这两个接口，其中 metav1.Object 接口定义了获取单个资源对象各种元信息的 Get 与 Set 方法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// source code from https://github.com/kubernetes/apimachinery/blob/master/pkg/apis/meta/v1/meta.go
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Object lets you work with object metadata from any of the versioned or
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// internal API objects. Attempting to set or retrieve a field on an object that does
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// not support that field (Name, UID, Namespace on lists) will be a no-op and return
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// a default value.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Object&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">GetNamespace&lt;/span>() &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">SetNamespace&lt;/span>(&lt;span style="color:#a6e22e">namespace&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">GetName&lt;/span>() &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">SetName&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">GetGenerateName&lt;/span>() &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">SetGenerateName&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">GetUID&lt;/span>() &lt;span style="color:#a6e22e">types&lt;/span>.&lt;span style="color:#a6e22e">UID&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">SetUID&lt;/span>(&lt;span style="color:#a6e22e">uid&lt;/span> &lt;span style="color:#a6e22e">types&lt;/span>.&lt;span style="color:#a6e22e">UID&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">GetResourceVersion&lt;/span>() &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">SetResourceVersion&lt;/span>(&lt;span style="color:#a6e22e">version&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">GetGeneration&lt;/span>() &lt;span style="color:#66d9ef">int64&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">SetGeneration&lt;/span>(&lt;span style="color:#a6e22e">generation&lt;/span> &lt;span style="color:#66d9ef">int64&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">GetSelfLink&lt;/span>() &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">SetSelfLink&lt;/span>(&lt;span style="color:#a6e22e">selfLink&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">GetCreationTimestamp&lt;/span>() &lt;span style="color:#a6e22e">Time&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">SetCreationTimestamp&lt;/span>(&lt;span style="color:#a6e22e">timestamp&lt;/span> &lt;span style="color:#a6e22e">Time&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">GetDeletionTimestamp&lt;/span>() &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Time&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">SetDeletionTimestamp&lt;/span>(&lt;span style="color:#a6e22e">timestamp&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Time&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">GetDeletionGracePeriodSeconds&lt;/span>() &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">int64&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">SetDeletionGracePeriodSeconds&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">int64&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">GetLabels&lt;/span>() &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">SetLabels&lt;/span>(&lt;span style="color:#a6e22e">labels&lt;/span> &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">string&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">GetAnnotations&lt;/span>() &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">SetAnnotations&lt;/span>(&lt;span style="color:#a6e22e">annotations&lt;/span> &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">string&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">GetFinalizers&lt;/span>() []&lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">SetFinalizers&lt;/span>(&lt;span style="color:#a6e22e">finalizers&lt;/span> []&lt;span style="color:#66d9ef">string&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">GetOwnerReferences&lt;/span>() []&lt;span style="color:#a6e22e">OwnerReference&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">SetOwnerReferences&lt;/span>([]&lt;span style="color:#a6e22e">OwnerReference&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">GetClusterName&lt;/span>() &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">SetClusterName&lt;/span>(&lt;span style="color:#a6e22e">clusterName&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">GetManagedFields&lt;/span>() []&lt;span style="color:#a6e22e">ManagedFieldsEntry&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">SetManagedFields&lt;/span>(&lt;span style="color:#a6e22e">managedFields&lt;/span> []&lt;span style="color:#a6e22e">ManagedFieldsEntry&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>metav1.MetaAccessor 接口则定义了获取资源对象存取器的方法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// source code from https://github.com/kubernetes/apimachinery/blob/master/pkg/apis/meta/v1/meta.go
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">ObjectMetaAccessor&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">GetObjectMeta&lt;/span>() &lt;span style="color:#a6e22e">Object&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>因为 kubernetes 所有单体资源对象都继承了 metav1.ObjectMeta，那么所有的 API 资源对象就都实现了 metav1.Object 和 metav1.MetaAccessor 接口。kubernetes 中有很多地方访问 API 资源对象的元信息并且不区分对象类型，只要是 metav1.Object 接口类型的对象都可以访问。&lt;/p>
&lt;h3 id="metav1listmeta">metav1.ListMeta&lt;a class="td-heading-self-link" href="#metav1listmeta" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>metav1.ListMeta 定义了所有对象列表类型实例的公共属性。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// source code from https://github.com/kubernetes/apimachinery/blob/master/pkg/apis/meta/v1/types.go
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// ListMeta describes metadata that synthetic resources must have, including lists and
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">ListMeta&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// selfLink is a URL representing this object.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Populated by the system.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Read-only.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">SelfLink&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;selfLink,omitempty&amp;#34; protobuf:&amp;#34;bytes,1,opt,name=selfLink&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// String that identifies the server&amp;#39;s internal version of this object that
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// can be used by clients to determine when objects have changed.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Value must be treated as opaque by clients and passed unmodified back to the server.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Populated by the system.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Read-only.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">ResourceVersion&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;resourceVersion,omitempty&amp;#34; protobuf:&amp;#34;bytes,2,opt,name=resourceVersion&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// continue may be set if the user set a limit on the number of items returned, and indicates that
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// the server has more data available. The value is opaque and may be used to issue another request
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// to the endpoint that served this list to retrieve the next set of available objects. Continuing a
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// consistent list may not be possible if the server configuration has changed or more than a few
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// minutes have passed. The resourceVersion field returned when using this continue value will be
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// identical to the value in the first response, unless you have received this token from an error
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// message.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Continue&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;continue,omitempty&amp;#34; protobuf:&amp;#34;bytes,3,opt,name=continue&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// remainingItemCount is the number of subsequent items in the list which are not included in this
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// list response. If the list request contained label or field selectors, then the number of
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// remaining items is unknown and the field will be left unset and omitted during serialization.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// If the list is complete (either because it is not chunking or because this is the last chunk),
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// then there are no more remaining items and this field will be left unset and omitted during
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// serialization.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Servers older than v1.15 do not set this field.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// The intended use of the remainingItemCount is *estimating* the size of a collection. Clients
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// should not rely on the remainingItemCount to be set or to be exact.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">RemainingItemCount&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">int64&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;remainingItemCount,omitempty&amp;#34; protobuf:&amp;#34;bytes,4,opt,name=remainingItemCount&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>类似于与 metav1.ObjectMeta 结构体，metav1.ListMeta 还实现了 metav1.ListInterface 与 metav1.ListMetaAccessor 这两个接口，其中 metav1.ListInterface 接口定义了获取资源对象列表各种元信息的 Get 与 Set 方法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// source code from https://github.com/kubernetes/apimachinery/blob/master/pkg/apis/meta/v1/meta.go
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// ListInterface lets you work with list metadata from any of the versioned or
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// internal API objects. Attempting to set or retrieve a field on an object that does
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// not support that field will be a no-op and return a default value.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">ListInterface&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">GetResourceVersion&lt;/span>() &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">SetResourceVersion&lt;/span>(&lt;span style="color:#a6e22e">version&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">GetSelfLink&lt;/span>() &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">SetSelfLink&lt;/span>(&lt;span style="color:#a6e22e">selfLink&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">GetContinue&lt;/span>() &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">SetContinue&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">GetRemainingItemCount&lt;/span>() &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">int64&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">SetRemainingItemCount&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">int64&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>metav1.ListMetaAccessor 接口则定义了获取资源对象列表存取器的方法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// source code from https://github.com/kubernetes/apimachinery/blob/master/pkg/apis/meta/v1/meta.go
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// ListMetaAccessor retrieves the list interface from an object
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">ListMetaAccessor&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">GetListMeta&lt;/span>() &lt;span style="color:#a6e22e">ListInterface&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="runtimeobject">runtime.Object&lt;a class="td-heading-self-link" href="#runtimeobject" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>前面在介绍 metav1.TypeMeta 与 metav1.ObjectMeta 的时候我们发现 schema.ObjecKind 是所有 API 资源类型的抽象，metav1.Object 是所有 API 单体资源对象属性的抽象，那么同时实现这两个接口的类型对象不就可以访问任何 API 对象的公共属性了吗？是的，对于每一个特定的类型，如 Pod、Deployment 等，它们确实可以获取当前 API 对象的公共属性。有没有一种所有特定类型的统一父类，同时拥有 schema.ObjecKind 和 metav1.Object 两个接口，这样就可以表示任何特定类型的对象。这就是本节要讨论 runtime.Object 接口。
先来看看 runtime.Object 接口定义：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// source code from: https://github.com/kubernetes/apimachinery/blob/master/pkg/runtime/interfaces.go
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Object interface must be supported by all API types registered with Scheme. Since objects in a scheme are
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// expected to be serialized to the wire, the interface an Object must provide to the Scheme allows
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// serializers to set the kind, version, and group the object is represented as. An Object may choose
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// to return a no-op ObjectKindAccessor in cases where it is not expected to be serialized.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Object&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// used to access type metadata(GVK)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">GetObjectKind&lt;/span>() &lt;span style="color:#a6e22e">schema&lt;/span>.&lt;span style="color:#a6e22e">ObjectKind&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// DeepCopyObject needed to implemented by each kubernetes API type definition,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// usually by automatically generated code.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">DeepCopyObject&lt;/span>() &lt;span style="color:#a6e22e">Object&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>为什么 runtime.Object 接口只有这两个方法，不应该有 GetObjectMeta() 方法来获取 metav1.ObjectMeta 对象吗？仔细往下看的话会发现，这里使用了不一样的实现方式：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// source code from: https://github.com/kubernetes/apimachinery/blob/master/pkg/api/meta/meta.go
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Accessor takes an arbitrary object pointer and returns meta.Interface.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// obj must be a pointer to an API type. An error is returned if the minimum
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// required fields are missing. Fields that are not required return the default
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// value and are a no-op if set.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Accessor&lt;/span>(&lt;span style="color:#a6e22e">obj&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span>{}) (&lt;span style="color:#a6e22e">metav1&lt;/span>.&lt;span style="color:#a6e22e">Object&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">switch&lt;/span> &lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">obj&lt;/span>.(&lt;span style="color:#66d9ef">type&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">metav1&lt;/span>.&lt;span style="color:#a6e22e">Object&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">t&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">metav1&lt;/span>.&lt;span style="color:#a6e22e">ObjectMetaAccessor&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">m&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">GetObjectMeta&lt;/span>(); &lt;span style="color:#a6e22e">m&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">m&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">errNotObject&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">default&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">errNotObject&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Accessor 方法可以讲任何的类型 metav1.Object 或者返回错误信息，这样就避免了每个 API 资源类型都需要实现 GetObjectMeta() 方法了。
还有个问题是为什么没有看到 API 资源类型实现 runtime.Object.DeepCopyObject() 方法？那是因为深拷贝方法是具体 API 资源类型需要重载实现的，存在类型依赖，作为 API 资源类型的父类不能统一实现。一般来说，深拷贝方法是由工具自动生成的，定义在 &lt;code>zz_generated.deepcopy.go&lt;/code> 文件中，以 configMap 为例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// source code from https://github.com/kubernetes/api/blob/master/core/v1/zz_generated.deepcopy.go
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">in&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">ConfigMap&lt;/span>) &lt;span style="color:#a6e22e">DeepCopyObject&lt;/span>() &lt;span style="color:#a6e22e">runtime&lt;/span>.&lt;span style="color:#a6e22e">Object&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">in&lt;/span>.&lt;span style="color:#a6e22e">DeepCopy&lt;/span>(); &lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="metav1unstructured">metav1.Unstructured&lt;a class="td-heading-self-link" href="#metav1unstructured" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>metav1.Unstructured 与具体实现 rutime.Object 接口的类型（如 Pod、Deployment、Service 等等）不同，如果说，各个实现 rutime.Object 接口的类型主要用于 &lt;strong>client-go&lt;/strong>[1] 类型化的静态客户端，那么 metav1.Unstructured 则用于动态客户端。
在看 metav1.Unstructured 源码实现之前，我们先了解一下什么是结构化数据与非结构化数据。结构化数据，顾名思义，就是数据中的字段名与字段值都是固定的，例如一个 JSON 格式的字符串表示一个学生的信息：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">101&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Tom&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>定义这个学生的数据格式中的字段名与字段值都是固定的，我们很容易使用 Go 语言写出一个 struct 结构来表示这个学生的信息，各个字段意义明确：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Student&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ID&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Name&lt;/span> &lt;span style="color:#a6e22e">String&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>实际的情况是，一个格式化的字符串里面可能会包含很多编译时未知的信息，这些信息只有在运行时才能获取到。例如，上面的学生的数据中还包括第三个字段，该字段的类型和内容代码编译时未知，到运行时才可以获取具体的值。如何处理这种情况呢？熟悉反射的同学很快就应该想到，Go 语言可以依赖于反射机制在运行时动态获取各个字段，在编译阶段，我们将这些未知的类型统一为 &lt;code>interface{}&lt;/code>。正是基于此，metav1.Unstructured 的数据结构定义很简单：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// soure code from: https://github.com/kubernetes/apimachinery/blob/master/pkg/apis/meta/v1/unstructured/unstructured.go
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Unstructured&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Object is a JSON compatible map with string, float, int, bool, []interface{}, or
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// map[string]interface{} children.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Object&lt;/span> &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">interface&lt;/span>{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>事实上，metav1.Unstructured 是 apimachinery 中 runtime.Unstructured 接口的具体实现，runtime.Unstructured 接口定义了非结构化数据的操作接口方法列表，它提供程序来处理资源的通用属性，例如 metadata.namespace 等。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// soure code from: https://github.com/kubernetes/apimachinery/blob/master/pkg/runtime/interfaces.go
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Unstructured objects store values as map[string]interface{}, with only values that can be serialized
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// to JSON allowed.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Unstructured&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Object&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// NewEmptyInstance returns a new instance of the concrete type containing only kind/apiVersion and no other data.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// This should be called instead of reflect.New() for unstructured types because the go type alone does not preserve kind/apiVersion info.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">NewEmptyInstance&lt;/span>() &lt;span style="color:#a6e22e">Unstructured&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// UnstructuredContent returns a non-nil map with this object&amp;#39;s contents. Values may be
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// []interface{}, map[string]interface{}, or any primitive type. Contents are typically serialized to
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// and from JSON. SetUnstructuredContent should be used to mutate the contents.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">UnstructuredContent&lt;/span>() &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">interface&lt;/span>{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// SetUnstructuredContent updates the object content to match the provided map.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">SetUnstructuredContent&lt;/span>(&lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">interface&lt;/span>{})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// IsList returns true if this type is a list or matches the list convention - has an array called &amp;#34;items&amp;#34;.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">IsList&lt;/span>() &lt;span style="color:#66d9ef">bool&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// EachListItem should pass a single item out of the list as an Object to the provided function. Any
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// error should terminate the iteration. If IsList() returns false, this method should return an error
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// instead of calling the provided function.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">EachListItem&lt;/span>(&lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">Object&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>只有 metav1.Unstructured 的定义并不能发挥什么作用，真正重要的是其实现的方法，借助这些方法可以灵活的处理非结构化数据。metav1.Unstructured 实现了存取类型元信息与对象元信息的方法，除此之外，它也实现了 runtime.Unstructured 接口中的所有方法。
基于这些方法，我们可以构建操作 kubernetes 资源的动态客户端，不需要使用 k8s.io/api 中定义的 Go 类型，使用 metav1.Unstructured 非结构化直接解码是 YAML/JSON 对象表示形式；非结构化数据编码时生成的 JSON/YAML 外也不会添加额外的字段。
以下示例演示了如何将 YAML 清单读为非结构化，非结构化并将其编码回 JSON：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;encoding/json&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;os&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;k8s.io/apimachinery/pkg/apis/meta/v1/unstructured&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;k8s.io/apimachinery/pkg/runtime/serializer/yaml&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">dsManifest&lt;/span> = &lt;span style="color:#e6db74">`
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">apiVersion: apps/v1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">kind: DaemonSet
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">metadata:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> name: example
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> namespace: default
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">spec:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> selector:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> matchLabels:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> name: nginx-ds
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> template:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> metadata:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> labels:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> name: nginx-ds
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> spec:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> containers:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> - name: nginx
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> image: nginx:latest
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">obj&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">unstructured&lt;/span>.&lt;span style="color:#a6e22e">Unstructured&lt;/span>{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// decode YAML into unstructured.Unstructured
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">dec&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">yaml&lt;/span>.&lt;span style="color:#a6e22e">NewDecodingSerializer&lt;/span>(&lt;span style="color:#a6e22e">unstructured&lt;/span>.&lt;span style="color:#a6e22e">UnstructuredJSONScheme&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">gvk&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">dec&lt;/span>.&lt;span style="color:#a6e22e">Decode&lt;/span>([]byte(&lt;span style="color:#a6e22e">dsManifest&lt;/span>), &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">obj&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Get the common metadata, and show GVK
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">obj&lt;/span>.&lt;span style="color:#a6e22e">GetName&lt;/span>(), &lt;span style="color:#a6e22e">gvk&lt;/span>.&lt;span style="color:#a6e22e">String&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// encode back to JSON
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">enc&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">json&lt;/span>.&lt;span style="color:#a6e22e">NewEncoder&lt;/span>(&lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">Stdout&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">enc&lt;/span>.&lt;span style="color:#a6e22e">SetIndent&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">enc&lt;/span>.&lt;span style="color:#a6e22e">Encode&lt;/span>(&lt;span style="color:#a6e22e">obj&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>程序的输出如下：&lt;/p>
&lt;pre>&lt;code>example apps/v1, Kind=DaemonSet
{
&amp;quot;apiVersion&amp;quot;: &amp;quot;apps/v1&amp;quot;,
&amp;quot;kind&amp;quot;: &amp;quot;DaemonSet&amp;quot;,
&amp;quot;metadata&amp;quot;: {
&amp;quot;name&amp;quot;: &amp;quot;example&amp;quot;,
&amp;quot;namespace&amp;quot;: &amp;quot;default&amp;quot;
},
&amp;quot;spec&amp;quot;: {
&amp;quot;selector&amp;quot;: {
&amp;quot;matchLabels&amp;quot;: {
&amp;quot;name&amp;quot;: &amp;quot;nginx-ds&amp;quot;
}
},
&amp;quot;template&amp;quot;: {
&amp;quot;metadata&amp;quot;: {
&amp;quot;labels&amp;quot;: {
&amp;quot;name&amp;quot;: &amp;quot;nginx-ds&amp;quot;
}
},
&amp;quot;spec&amp;quot;: {
&amp;quot;containers&amp;quot;: [
{
&amp;quot;image&amp;quot;: &amp;quot;nginx:latest&amp;quot;,
&amp;quot;name&amp;quot;: &amp;quot;nginx&amp;quot;
}
]
}
}
}
}
&lt;/code>&lt;/pre>
&lt;p>此外，通过 Go 语言的反射机制可以实现 metav1.Unstructured 对象与具体资源对象的相互转换，runtime.unstructuredConverter 接口定义了 metav1.Unstructured 对象与具体资源对象的相互转换方法，并且内置了 runtime.DefaultUnstructuredConverter 实现了 runtime.unstructuredConverter 接口。&lt;/p>
&lt;pre>&lt;code>// source code from: https://github.com/kubernetes/apimachinery/blob/master/pkg/runtime/converter.go
//
// UnstructuredConverter is an interface for converting between interface{}
// and map[string]interface representation.
type UnstructuredConverter interface {
ToUnstructured(obj interface{}) (map[string]interface{}, error)
FromUnstructured(u map[string]interface{}, obj interface{}) error
}
&lt;/code>&lt;/pre>
&lt;h2 id="小结">小结&lt;a class="td-heading-self-link" href="#%e5%b0%8f%e7%bb%93" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>为了便于记忆，现在对前面介绍的各种接口以及实现做一个小结：&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/tbi8lr/1616564773044-5ecb4b10-4253-489f-a556-a867533823f6.webp" alt="">&lt;/p>
&lt;ol>
&lt;li>runtime.Object 接口是所有 API 单体资源对象的根类，各个 API 对象的编码与解码依赖于该接口类型；&lt;/li>
&lt;li>schema.ObjectKind 接口是对 API 资源对象类型的抽象，可以用来获取或者设置 GVK；&lt;/li>
&lt;li>metav1.Object 接口是 API 资源对象属性的抽象，用来存取资源对象的属性；&lt;/li>
&lt;li>metav1.ListInterface 接口是 API 对象列表属性的抽象，用来存取资源对象列表的属性；&lt;/li>
&lt;li>metav1.TypeMeta 结构体实现了 schema.ObjectKind 接口，所有的 API 资源类型继承它；&lt;/li>
&lt;li>metav1.ObjectMeta 结构体实现了 metav1.Object 接口，所有的 API 资源类型继承它；&lt;/li>
&lt;li>metav1.ListMeta 结构体实现了 metav1.ListInterface 接口，所有的 API 资源对象列表类型继承它；&lt;/li>
&lt;li>metav1.Unstructured 结构体实现了 runtime.Unstructured 接口，可以用于构建动态客户端，从 metav1.Unstructured 的实例中可以获取资源类型元信息与资源对象元信息，还可以获取到对象的 map[string]interface{} 的通用内容表示；&lt;/li>
&lt;li>metav1.Unstructured 与实现了 metav1.Object 接口具体 API 类型进行相互转化，转换依赖于 runtime.UnstructuredConverter 的接口方法。&lt;/li>
&lt;/ol>
&lt;h3 id="参考资料">参考资料&lt;a class="td-heading-self-link" href="#%e5%8f%82%e8%80%83%e8%b5%84%e6%96%99" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>[1]
client-go: &lt;a href="https://github.com/kubernetes/client-go">&lt;em>https://github.com/kubernetes/client-go&lt;/em>&lt;/a>&lt;/p></description></item><item><title>Docs: Kubeadm 源码</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/Kubernetes-%E5%BC%80%E5%8F%91/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/Kubeadm-%E6%BA%90%E7%A0%81/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/Kubernetes-%E5%BC%80%E5%8F%91/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/Kubeadm-%E6%BA%90%E7%A0%81/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;/blockquote>
&lt;p>kubeadm 源码在 Kubernetes 中，位置：&lt;a href="https://github.com/kubernetes/kubernetes/tree/master/cmd/kubeadm">kubernetes/kubernetes/cmd/kubeadm&lt;/a>，本文以 1.19 版本为例&lt;/p>
&lt;h2 id="目录结构">目录结构&lt;a class="td-heading-self-link" href="#%e7%9b%ae%e5%bd%95%e7%bb%93%e6%9e%84" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ tree -L &lt;span style="color:#ae81ff">4&lt;/span> -d
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── app
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── apis
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   ├── kubeadm
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   │   ├── fuzzer
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   │   ├── scheme
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   │   ├── v1beta1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   │   ├── v1beta2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   │   └── validation
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   └── output
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   ├── fuzzer
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   ├── scheme
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   └── v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── cmd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   ├── alpha
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   ├── options
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   ├── phases
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   │   ├── init
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   │   ├── join
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   │   ├── reset
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   │   ├── upgrade
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   │   │   └── node
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   │   └── workflow
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   ├── upgrade
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   └── util
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── componentconfigs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── constants
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── discovery
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   ├── file
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   ├── https
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   └── token
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── features
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── images
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── phases
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   ├── addons
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   │   ├── dns
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   │   └── proxy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   ├── bootstraptoken
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   │   ├── clusterinfo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   │   └── node
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   ├── certs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   │   └── renewal
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   ├── controlplane
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   ├── copycerts
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   ├── etcd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   ├── kubeconfig
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   ├── kubelet
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   ├── markcontrolplane
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   ├── patchnode
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   ├── selfhosting
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   ├── upgrade
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   └── uploadconfig
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── preflight
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   └── util
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── apiclient
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── audit
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── certs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── config
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   └── strict
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   └── testdata
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── crypto
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── dryrun
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── etcd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── image
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── initsystem
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── kubeconfig
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── kustomize
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── output
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── patches
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── pkiutil
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── pubkeypin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── runtime
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   └── staticpod
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── test
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├── cmd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │   └── testdata
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │   └── init
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├── kubeconfig
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └── resources
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>kubeadm 是基于 cobra 框架的命令行工具，入口是 &lt;code>cmd/kubeadm/kubeadm.go&lt;/code>，包含了众多子命令，代码全部在 &lt;code>cmd/kubeadm/app&lt;/code> 目录中&lt;/p>
&lt;ul>
&lt;li>apis # kubeadm API 定义&lt;/li>
&lt;li>cmd # 子命令代码入口&lt;/li>
&lt;li>componentconfigs&lt;/li>
&lt;li>constants&lt;/li>
&lt;li>discovery&lt;/li>
&lt;li>features&lt;/li>
&lt;li>images&lt;/li>
&lt;li>phases # kubeadm 每个阶段的具体执行逻辑。&lt;/li>
&lt;li>preflight&lt;/li>
&lt;li>util #&lt;/li>
&lt;/ul>
&lt;h1 id="init">init&lt;a class="td-heading-self-link" href="#init" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>源码：&lt;code>[cmd/kubeadm/app/cmd/init.go](https://github.com/kubernetes/kubernetes/blob/master/cmd/kubeadm/app/cmd/init.go)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">newCmdInit&lt;/span>(&lt;span style="color:#a6e22e">out&lt;/span> &lt;span style="color:#a6e22e">io&lt;/span>.&lt;span style="color:#a6e22e">Writer&lt;/span>, &lt;span style="color:#a6e22e">initOptions&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">initOptions&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">cobra&lt;/span>.&lt;span style="color:#a6e22e">Command&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 通过阶段执行 Kubernetes 集群初始化
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">initRunner&lt;/span>.&lt;span style="color:#a6e22e">AppendPhase&lt;/span>(&lt;span style="color:#a6e22e">phases&lt;/span>.&lt;span style="color:#a6e22e">NewPreflightPhase&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">initRunner&lt;/span>.&lt;span style="color:#a6e22e">AppendPhase&lt;/span>(&lt;span style="color:#a6e22e">phases&lt;/span>.&lt;span style="color:#a6e22e">NewCertsPhase&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">initRunner&lt;/span>.&lt;span style="color:#a6e22e">AppendPhase&lt;/span>(&lt;span style="color:#a6e22e">phases&lt;/span>.&lt;span style="color:#a6e22e">NewKubeConfigPhase&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">initRunner&lt;/span>.&lt;span style="color:#a6e22e">AppendPhase&lt;/span>(&lt;span style="color:#a6e22e">phases&lt;/span>.&lt;span style="color:#a6e22e">NewKubeletStartPhase&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">initRunner&lt;/span>.&lt;span style="color:#a6e22e">AppendPhase&lt;/span>(&lt;span style="color:#a6e22e">phases&lt;/span>.&lt;span style="color:#a6e22e">NewControlPlanePhase&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">initRunner&lt;/span>.&lt;span style="color:#a6e22e">AppendPhase&lt;/span>(&lt;span style="color:#a6e22e">phases&lt;/span>.&lt;span style="color:#a6e22e">NewEtcdPhase&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">initRunner&lt;/span>.&lt;span style="color:#a6e22e">AppendPhase&lt;/span>(&lt;span style="color:#a6e22e">phases&lt;/span>.&lt;span style="color:#a6e22e">NewWaitControlPlanePhase&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">initRunner&lt;/span>.&lt;span style="color:#a6e22e">AppendPhase&lt;/span>(&lt;span style="color:#a6e22e">phases&lt;/span>.&lt;span style="color:#a6e22e">NewUploadConfigPhase&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">initRunner&lt;/span>.&lt;span style="color:#a6e22e">AppendPhase&lt;/span>(&lt;span style="color:#a6e22e">phases&lt;/span>.&lt;span style="color:#a6e22e">NewUploadCertsPhase&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">initRunner&lt;/span>.&lt;span style="color:#a6e22e">AppendPhase&lt;/span>(&lt;span style="color:#a6e22e">phases&lt;/span>.&lt;span style="color:#a6e22e">NewMarkControlPlanePhase&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">initRunner&lt;/span>.&lt;span style="color:#a6e22e">AppendPhase&lt;/span>(&lt;span style="color:#a6e22e">phases&lt;/span>.&lt;span style="color:#a6e22e">NewBootstrapTokenPhase&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">initRunner&lt;/span>.&lt;span style="color:#a6e22e">AppendPhase&lt;/span>(&lt;span style="color:#a6e22e">phases&lt;/span>.&lt;span style="color:#a6e22e">NewKubeletFinalizePhase&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">initRunner&lt;/span>.&lt;span style="color:#a6e22e">AppendPhase&lt;/span>(&lt;span style="color:#a6e22e">phases&lt;/span>.&lt;span style="color:#a6e22e">NewAddonPhase&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="certs-阶段">certs 阶段&lt;a class="td-heading-self-link" href="#certs-%e9%98%b6%e6%ae%b5" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>certs 阶段用来生成集群证书&lt;/p>
&lt;p>certs 阶段入口：
源码：&lt;code>[cmd/kubeadm/app/cmd/phases/init/certs.go](https://github.com/kubernetes/kubernetes/blob/master/cmd/kubeadm/app/cmd/phases/init/certs.go)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">NewCertsPhase&lt;/span>() &lt;span style="color:#a6e22e">workflow&lt;/span>.&lt;span style="color:#a6e22e">Phase&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 执行工作流
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">workflow&lt;/span>.&lt;span style="color:#a6e22e">Phase&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;certs&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Short&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Certificate generation&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 执行创建新证书子阶段
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Phases&lt;/span>: &lt;span style="color:#a6e22e">newCertSubPhases&lt;/span>(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Run&lt;/span>: &lt;span style="color:#a6e22e">runCerts&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Long&lt;/span>: &lt;span style="color:#a6e22e">cmdutil&lt;/span>.&lt;span style="color:#a6e22e">MacroCommandLongDescription&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">newCertSubPhases&lt;/span>() []&lt;span style="color:#a6e22e">workflow&lt;/span>.&lt;span style="color:#a6e22e">Phase&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 从 certsphase.GetDefaultCertList() 中获取需要创建证书的列表
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 并循环这个列表，注意创建 Kubernetes 集群所需证书
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">cert&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">certsphase&lt;/span>.&lt;span style="color:#a6e22e">GetDefaultCertList&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">phase&lt;/span> &lt;span style="color:#a6e22e">workflow&lt;/span>.&lt;span style="color:#a6e22e">Phase&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 若没有 CA 则创建 CA
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">cert&lt;/span>.&lt;span style="color:#a6e22e">CAName&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">phase&lt;/span> = &lt;span style="color:#a6e22e">newCertSubPhase&lt;/span>(&lt;span style="color:#a6e22e">cert&lt;/span>, &lt;span style="color:#a6e22e">runCAPhase&lt;/span>(&lt;span style="color:#a6e22e">cert&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">lastCACert&lt;/span> = &lt;span style="color:#a6e22e">cert&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 使用 CA 创建 Kubernetes 组件所需的所有证书
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">phase&lt;/span> = &lt;span style="color:#a6e22e">newCertSubPhase&lt;/span>(&lt;span style="color:#a6e22e">cert&lt;/span>, &lt;span style="color:#a6e22e">runCertPhase&lt;/span>(&lt;span style="color:#a6e22e">cert&lt;/span>, &lt;span style="color:#a6e22e">lastCACert&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">subPhases&lt;/span> = append(&lt;span style="color:#a6e22e">subPhases&lt;/span>, &lt;span style="color:#a6e22e">phase&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>runCAPhase()&lt;/code> 创建 CA&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">runCAPhase&lt;/span>(&lt;span style="color:#a6e22e">ca&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">certsphase&lt;/span>.&lt;span style="color:#a6e22e">KubeadmCert&lt;/span>) &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#a6e22e">workflow&lt;/span>.&lt;span style="color:#a6e22e">RunData&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#a6e22e">workflow&lt;/span>.&lt;span style="color:#a6e22e">RunData&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// create the new certificate authority (or use existing)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">certsphase&lt;/span>.&lt;span style="color:#a6e22e">CreateCACertAndKeyFiles&lt;/span>(&lt;span style="color:#a6e22e">ca&lt;/span>, &lt;span style="color:#a6e22e">cfg&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>runCertPhase()&lt;/code> 使用 CA 创建 Kubernetes 组件所需的所有证书&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">runCertPhase&lt;/span>(&lt;span style="color:#a6e22e">cert&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">certsphase&lt;/span>.&lt;span style="color:#a6e22e">KubeadmCert&lt;/span>, &lt;span style="color:#a6e22e">caCert&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">certsphase&lt;/span>.&lt;span style="color:#a6e22e">KubeadmCert&lt;/span>) &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#a6e22e">workflow&lt;/span>.&lt;span style="color:#a6e22e">RunData&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#a6e22e">workflow&lt;/span>.&lt;span style="color:#a6e22e">RunData&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 使用 CA 创建 Kubernetes 组件所需的所有证书
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">certsphase&lt;/span>.&lt;span style="color:#a6e22e">CreateCertAndKeyFilesWithCA&lt;/span>(&lt;span style="color:#a6e22e">cert&lt;/span>, &lt;span style="color:#a6e22e">caCert&lt;/span>, &lt;span style="color:#a6e22e">cfg&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="注意">注意&lt;a class="td-heading-self-link" href="#%e6%b3%a8%e6%84%8f" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>在 kubeadm 的源码中，如果直接看 kubeadm 版本信息会发现 ClusterConfiguration 是在 InitConfiguration 中的&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">InitConfiguration&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">metav1&lt;/span>.&lt;span style="color:#a6e22e">TypeMeta&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ClusterConfiguration holds the cluster-wide information, and embeds that struct (which can be (un)marshalled separately as well)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// When InitConfiguration is marshalled to bytes in the external version, this information IS NOT preserved (which can be seen from
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// the `json:&amp;#34;-&amp;#34;` tag in the external variant of these API types.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">ClusterConfiguration&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;-&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">BootstrapTokens&lt;/span> []&lt;span style="color:#a6e22e">BootstrapToken&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">NodeRegistration&lt;/span> &lt;span style="color:#a6e22e">NodeRegistrationOptions&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">LocalAPIEndpoint&lt;/span> &lt;span style="color:#a6e22e">APIEndpoint&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">CertificateKey&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>但是在 v1beta{1,2,3} 版本中，ClusterConfiguration 则不在。所以后续代码分析，可能会发现使用的 kubeadm-config.yaml 文件中，用的是 InitConfiguration。&lt;/p>
&lt;h3 id="待创建证书的列表">待创建证书的列表&lt;a class="td-heading-self-link" href="#%e5%be%85%e5%88%9b%e5%bb%ba%e8%af%81%e4%b9%a6%e7%9a%84%e5%88%97%e8%a1%a8" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>源码：&lt;code>cmd/kubeadm/app/phases/certs/certlist.go&lt;/code>
为入口返回 kubeadm 需要创建的所有证书，该代码中还有所有证书的基本信息(比如 DN)。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">GetDefaultCertList&lt;/span>() &lt;span style="color:#a6e22e">Certificates&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">Certificates&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">KubeadmCertRootCA&lt;/span>(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">KubeadmCertAPIServer&lt;/span>(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">KubeadmCertKubeletClient&lt;/span>(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Front Proxy certs
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">KubeadmCertFrontProxyCA&lt;/span>(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">KubeadmCertFrontProxyClient&lt;/span>(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// etcd certs
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">KubeadmCertEtcdCA&lt;/span>(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">KubeadmCertEtcdServer&lt;/span>(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">KubeadmCertEtcdPeer&lt;/span>(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">KubeadmCertEtcdHealthcheck&lt;/span>(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">KubeadmCertEtcdAPIClient&lt;/span>(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="生成-ca-证书与私钥">生成 CA 证书与私钥&lt;a class="td-heading-self-link" href="#%e7%94%9f%e6%88%90-ca-%e8%af%81%e4%b9%a6%e4%b8%8e%e7%a7%81%e9%92%a5" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>源码：&lt;code>cmd/kubeadm/app/phases/certs/certs.go&lt;/code>
生成 CA 证书和私钥，并写入到默认的 /etc/kubernetes/pki/ 目录中&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">CreateCACertAndKeyFiles&lt;/span>(&lt;span style="color:#a6e22e">certSpec&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">KubeadmCert&lt;/span>, &lt;span style="color:#a6e22e">cfg&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">kubeadmapi&lt;/span>.&lt;span style="color:#a6e22e">InitConfiguration&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 将 kubeadm-config.yaml 文件中 InitConfiguration 的配置传递进去，生成 CA 证书
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">caCert&lt;/span>, &lt;span style="color:#a6e22e">caKey&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">pkiutil&lt;/span>.&lt;span style="color:#a6e22e">NewCertificateAuthority&lt;/span>(&lt;span style="color:#a6e22e">certConfig&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 将证书写入指定目录中
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">writeCertificateAuthorityFilesIfNotExist&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">cfg&lt;/span>.&lt;span style="color:#a6e22e">CertificatesDir&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">certSpec&lt;/span>.&lt;span style="color:#a6e22e">BaseName&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">caCert&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">caKey&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>源码：&lt;code>cmd/kubeadm/app/util/pkiutil/pki_helpers.go&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">NewCertificateAuthority&lt;/span>(&lt;span style="color:#a6e22e">config&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">CertConfig&lt;/span>) (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">x509&lt;/span>.&lt;span style="color:#a6e22e">Certificate&lt;/span>, &lt;span style="color:#a6e22e">crypto&lt;/span>.&lt;span style="color:#a6e22e">Signer&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// NewPrivateKey() 直接使用 rsa.GenerateKey() 生成密钥对
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">key&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">NewPrivateKey&lt;/span>(&lt;span style="color:#a6e22e">config&lt;/span>.&lt;span style="color:#a6e22e">PublicKeyAlgorithm&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// NewSelfSignedCACert 是 client-go 中的函数，根据配置和密钥生成 CA 证书
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">cert&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">certutil&lt;/span>.&lt;span style="color:#a6e22e">NewSelfSignedCACert&lt;/span>(&lt;span style="color:#a6e22e">config&lt;/span>.&lt;span style="color:#a6e22e">Config&lt;/span>, &lt;span style="color:#a6e22e">key&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">cert&lt;/span>, &lt;span style="color:#a6e22e">key&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>看一下 client-go 中的代码，非常简洁明了
源码：&lt;code>kubernetes/client-go/util/cert/cert.go&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">NewSelfSignedCACert&lt;/span>(&lt;span style="color:#a6e22e">cfg&lt;/span> &lt;span style="color:#a6e22e">Config&lt;/span>, &lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#a6e22e">crypto&lt;/span>.&lt;span style="color:#a6e22e">Signer&lt;/span>) (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">x509&lt;/span>.&lt;span style="color:#a6e22e">Certificate&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">now&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Now&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">tmpl&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">x509&lt;/span>.&lt;span style="color:#a6e22e">Certificate&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">SerialNumber&lt;/span>: new(&lt;span style="color:#a6e22e">big&lt;/span>.&lt;span style="color:#a6e22e">Int&lt;/span>).&lt;span style="color:#a6e22e">SetInt64&lt;/span>(&lt;span style="color:#ae81ff">0&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Subject&lt;/span>: &lt;span style="color:#a6e22e">pkix&lt;/span>.&lt;span style="color:#a6e22e">Name&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">CommonName&lt;/span>: &lt;span style="color:#a6e22e">cfg&lt;/span>.&lt;span style="color:#a6e22e">CommonName&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Organization&lt;/span>: &lt;span style="color:#a6e22e">cfg&lt;/span>.&lt;span style="color:#a6e22e">Organization&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">DNSNames&lt;/span>: []&lt;span style="color:#66d9ef">string&lt;/span>{&lt;span style="color:#a6e22e">cfg&lt;/span>.&lt;span style="color:#a6e22e">CommonName&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">NotBefore&lt;/span>: &lt;span style="color:#a6e22e">now&lt;/span>.&lt;span style="color:#a6e22e">UTC&lt;/span>(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">NotAfter&lt;/span>: &lt;span style="color:#a6e22e">now&lt;/span>.&lt;span style="color:#a6e22e">Add&lt;/span>(&lt;span style="color:#a6e22e">duration365d&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>).&lt;span style="color:#a6e22e">UTC&lt;/span>(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">KeyUsage&lt;/span>: &lt;span style="color:#a6e22e">x509&lt;/span>.&lt;span style="color:#a6e22e">KeyUsageKeyEncipherment&lt;/span> | &lt;span style="color:#a6e22e">x509&lt;/span>.&lt;span style="color:#a6e22e">KeyUsageDigitalSignature&lt;/span> | &lt;span style="color:#a6e22e">x509&lt;/span>.&lt;span style="color:#a6e22e">KeyUsageCertSign&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">BasicConstraintsValid&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">IsCA&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">certDERBytes&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">x509&lt;/span>.&lt;span style="color:#a6e22e">CreateCertificate&lt;/span>(&lt;span style="color:#a6e22e">cryptorand&lt;/span>.&lt;span style="color:#a6e22e">Reader&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">tmpl&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">tmpl&lt;/span>, &lt;span style="color:#a6e22e">key&lt;/span>.&lt;span style="color:#a6e22e">Public&lt;/span>(), &lt;span style="color:#a6e22e">key&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">x509&lt;/span>.&lt;span style="color:#a6e22e">ParseCertificate&lt;/span>(&lt;span style="color:#a6e22e">certDERBytes&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>所以，我们在 [编译 kubeadm 修改证书过期时间](/docs/10.云原生/2.3.Kubernetes%20 容器编排系统/Kubernetes%20 管理/kubeadm%20 命令行工具/编译%20kubeadm%20 修改证书过期时间.md 管理/kubeadm 命令行工具/编译 kubeadm 修改证书过期时间.md) 中会修改 client-go 中的源码，也就是常量 &lt;code>duration365d&lt;/code> 的值&lt;/p>
&lt;h3 id="使用-ca-签其他证书">使用 CA 签其他证书&lt;a class="td-heading-self-link" href="#%e4%bd%bf%e7%94%a8-ca-%e7%ad%be%e5%85%b6%e4%bb%96%e8%af%81%e4%b9%a6" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>源码：&lt;code>cmd/kubeadm/app/phases/certs/certs.go&lt;/code>
从磁盘中加载指定的 CA 证书，然后使用该 CA 生成指定的证书&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">CreateCertAndKeyFilesWithCA&lt;/span>(&lt;span style="color:#a6e22e">certSpec&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">KubeadmCert&lt;/span>, &lt;span style="color:#a6e22e">caCertSpec&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">KubeadmCert&lt;/span>, &lt;span style="color:#a6e22e">cfg&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">kubeadmapi&lt;/span>.&lt;span style="color:#a6e22e">InitConfiguration&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 从磁盘中加载 CA 证书
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">caCert&lt;/span>, &lt;span style="color:#a6e22e">caKey&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">LoadCertificateAuthority&lt;/span>(&lt;span style="color:#a6e22e">cfg&lt;/span>.&lt;span style="color:#a6e22e">CertificatesDir&lt;/span>, &lt;span style="color:#a6e22e">caCertSpec&lt;/span>.&lt;span style="color:#a6e22e">BaseName&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 将 kubeadm-config.yaml 文件中 InitConfiguration 的配置传递进去，并使用加载的 CA 证书和密钥创建其他证书
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">certSpec&lt;/span>.&lt;span style="color:#a6e22e">CreateFromCA&lt;/span>(&lt;span style="color:#a6e22e">cfg&lt;/span>, &lt;span style="color:#a6e22e">caCert&lt;/span>, &lt;span style="color:#a6e22e">caKey&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// CreateFromCA makes and writes a certificate using the given CA cert and key.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">k&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">KubeadmCert&lt;/span>) &lt;span style="color:#a6e22e">CreateFromCA&lt;/span>(&lt;span style="color:#a6e22e">ic&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">kubeadmapi&lt;/span>.&lt;span style="color:#a6e22e">InitConfiguration&lt;/span>, &lt;span style="color:#a6e22e">caCert&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">x509&lt;/span>.&lt;span style="color:#a6e22e">Certificate&lt;/span>, &lt;span style="color:#a6e22e">caKey&lt;/span> &lt;span style="color:#a6e22e">crypto&lt;/span>.&lt;span style="color:#a6e22e">Signer&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 加载 kubeadm-config.yaml 配置
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">cfg&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">k&lt;/span>.&lt;span style="color:#a6e22e">GetConfig&lt;/span>(&lt;span style="color:#a6e22e">ic&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 使用 kubeadm-config.yaml 配置 和 CA 证书与密钥 创建证书
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">cert&lt;/span>, &lt;span style="color:#a6e22e">key&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">pkiutil&lt;/span>.&lt;span style="color:#a6e22e">NewCertAndKey&lt;/span>(&lt;span style="color:#a6e22e">caCert&lt;/span>, &lt;span style="color:#a6e22e">caKey&lt;/span>, &lt;span style="color:#a6e22e">cfg&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 将创建的证书写入默认的 /etc/kubernetes/pki/ 目录中
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">writeCertificateFilesIfNotExist&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ic&lt;/span>.&lt;span style="color:#a6e22e">CertificatesDir&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">k&lt;/span>.&lt;span style="color:#a6e22e">BaseName&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">caCert&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">cert&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">key&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">cfg&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: kubectl port-forward 工作原理</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/Kubernetes-%E5%BC%80%E5%8F%91/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/kubectl-port-forward-%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/Kubernetes-%E5%BC%80%E5%8F%91/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/kubectl-port-forward-%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</guid><description>
&lt;p>原文链接：&lt;a href="https://mp.weixin.qq.com/s/cFxs8cseuXfO7llM4KAoVg">公众号-CNCF，源码解析 kubectl port-forward 工作原理&lt;/a>&lt;/p>
&lt;p>本文的源码基于 Kubernetes v1.24.0，容器运行时使用 Containerd 1.5，从源码来分析 kubectl port-forward 的工作原理。&lt;/p>
&lt;p>通过 port-forward 流程的分析，梳理出 kubectl -&amp;gt; api-server -&amp;gt; kubelet -&amp;gt; 容器运行时 的交互，了解 cri 的工作方式。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/kubernetes/source/port-forward.png" alt="kubectl-port-forward">&lt;/p>
&lt;h2 id="kubectl">kubectl&lt;a class="td-heading-self-link" href="#kubectl" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>简单创建个 pod：&lt;/p>
&lt;p>&lt;code>kubectl run pipy --image flomesh/pipy:latest -n default&lt;/code>&lt;/p>
&lt;p>在执行  &lt;code>kubectl forward&lt;/code>  时添加参数  &lt;code>-v 9&lt;/code>  打印日志。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl port-forward pipy &lt;span style="color:#ae81ff">8080&lt;/span> -v &lt;span style="color:#ae81ff">9&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>I0807 21:45:58.457986 &lt;span style="color:#ae81ff">14495&lt;/span> round_trippers.go:466&lt;span style="color:#f92672">]&lt;/span> curl -v -XPOST -H &lt;span style="color:#e6db74">&amp;#34;User-Agent: kubectl/v1.24.3 (darwin/arm64) kubernetes/aef86a9&amp;#34;&lt;/span> -H &lt;span style="color:#e6db74">&amp;#34;X-Stream-Protocol-Version: portforward.k8s.io&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;https://192.168.1.12:6443/api/v1/namespaces/default/pods/pipy/portforward&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>I0807 21:45:58.484013 &lt;span style="color:#ae81ff">14495&lt;/span> round_trippers.go:553&lt;span style="color:#f92672">]&lt;/span> POST https://192.168.1.12:6443/api/v1/namespaces/default/pods/pipy/portforward &lt;span style="color:#ae81ff">101&lt;/span> Switching Protocols in &lt;span style="color:#ae81ff">26&lt;/span> milliseconds
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>I0807 21:45:58.484029 &lt;span style="color:#ae81ff">14495&lt;/span> round_trippers.go:570&lt;span style="color:#f92672">]&lt;/span> HTTP Statistics: DNSLookup &lt;span style="color:#ae81ff">0&lt;/span> ms Dial &lt;span style="color:#ae81ff">0&lt;/span> ms TLSHandshake &lt;span style="color:#ae81ff">0&lt;/span> ms Duration &lt;span style="color:#ae81ff">26&lt;/span> ms
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>I0807 21:45:58.484035 &lt;span style="color:#ae81ff">14495&lt;/span> round_trippers.go:577&lt;span style="color:#f92672">]&lt;/span> Response Headers:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>I0807 21:45:58.484040 &lt;span style="color:#ae81ff">14495&lt;/span> round_trippers.go:580&lt;span style="color:#f92672">]&lt;/span> Upgrade: SPDY/3.1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>I0807 21:45:58.484044 &lt;span style="color:#ae81ff">14495&lt;/span> round_trippers.go:580&lt;span style="color:#f92672">]&lt;/span> X-Stream-Protocol-Version: portforward.k8s.io
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>I0807 21:45:58.484047 &lt;span style="color:#ae81ff">14495&lt;/span> round_trippers.go:580&lt;span style="color:#f92672">]&lt;/span> Date: Sun, &lt;span style="color:#ae81ff">07&lt;/span> Aug &lt;span style="color:#ae81ff">2022&lt;/span> 13:45:58 GMT
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>I0807 21:45:58.484051 &lt;span style="color:#ae81ff">14495&lt;/span> round_trippers.go:580&lt;span style="color:#f92672">]&lt;/span> Connection: Upgrade
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Forwarding from 127.0.0.1:8080 -&amp;gt; &lt;span style="color:#ae81ff">8080&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Forwarding from &lt;span style="color:#f92672">[&lt;/span>::1&lt;span style="color:#f92672">]&lt;/span>:8080 -&amp;gt; &lt;span style="color:#ae81ff">8080&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>从日志可以看到请求的地址为  &lt;code>/api/v1/namespaces/default/pods/pipy/portforward&lt;/code>，其中  &lt;code>portforward&lt;/code>  为 pod 资源的子资源。&lt;/p>
&lt;blockquote>
&lt;p>这里使用的协议是 spdy。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>kubectl&lt;/code>  此时会监听本地端口，同时使用 pod 子资源 portforward 的 url 创建到 api-server 的连接。&lt;/p>
&lt;p>当本地端口有连接接入时，&lt;code>kubectl&lt;/code>  会&lt;strong>不断地在两个连接间拷贝数据&lt;/strong>。&lt;/p>
&lt;h3 id="参考源码">参考源码：&lt;a class="td-heading-self-link" href="#%e5%8f%82%e8%80%83%e6%ba%90%e7%a0%81" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>staging/src/k8s.io/kubectl/pkg/cmd/portforward/portforward.go:389[1]&lt;/li>
&lt;li>staging/src/k8s.io/client-go/tools/portforward/portforward.go:242[2]&lt;/li>
&lt;li>staging/src/k8s.io/client-go/tools/portforward/portforward.go:330[3]&lt;/li>
&lt;/ul>
&lt;h2 id="api-server">api-server&lt;a class="td-heading-self-link" href="#api-server" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>pod 的三个子资源 exec、attach 和 portforward，对这三个资源的操作都会代理有对应 node 的 kubetlet server 进行处理。&lt;/p>
&lt;p>api-server 在接收到访问 pod 子资源 portforward 的请求后，通过 pod 及其所在 node 的信息，获取访问该 node 上 kubelet server 的 url。&lt;/p>
&lt;p>然后将访问 pod 的 portforward 的请求，代理到 kubelet server。&lt;/p>
&lt;h3 id="参考源码-1">参考源码&lt;a class="td-heading-self-link" href="#%e5%8f%82%e8%80%83%e6%ba%90%e7%a0%81-1" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>pkg/registry/core/pod/rest/subresources.go:185[4]&lt;/li>
&lt;/ul>
&lt;h2 id="kubelet">kubelet&lt;a class="td-heading-self-link" href="#kubelet" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>portforward 请求来到了 pod 所在节点的 kubelet server，在 kubelet server 中，有几个用于调试的 endpoint，portforward 便是其中之一：&lt;/p>
&lt;ul>
&lt;li>&lt;code>/run/{podNamespace}/{podID}/{containerName}&lt;/code>&lt;/li>
&lt;li>&lt;code>/exec/{podNamespace}/{podID}/{containerName}&lt;/code>&lt;/li>
&lt;li>&lt;code>/attach/{podNamespace}/{podID}/{containerName}&lt;/code>&lt;/li>
&lt;li>&lt;code>/portforward/{podNamespace}/{podID}&lt;/code>&lt;/li>
&lt;li>&lt;code>/containerLogs/{podNamespace}/{podID}/{containerName}&lt;/code>&lt;/li>
&lt;li>&lt;code>/runningpods/&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>kubelet server 收到请求后，首先会通过  &lt;code>RuntimeServiceClient&lt;/code>  发送 gRCP 请求到容器运行时的接口（&lt;code>/runtime.v1alpha2.RuntimeService/PortForward&lt;/code>）获取容器运行时 streaming server 处理 pordforward 请求的 url。&lt;/p>
&lt;p>拿到 portforward streaming 的 url 之后，kubelet server 将请求代理到该 url。&lt;/p>
&lt;h3 id="参考源码-2">参考源码&lt;a class="td-heading-self-link" href="#%e5%8f%82%e8%80%83%e6%ba%90%e7%a0%81-2" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>pkg/kubelet/server/server.go:463[5]&lt;/li>
&lt;li>pkg/kubelet/server/server.go:873[6]&lt;/li>
&lt;li>pkg/kubelet/cri/streaming/portforward/portforward.go:46[7]&lt;/li>
&lt;li>pkg/kubelet/cri/streaming/server.go:111[8]&lt;/li>
&lt;/ul>
&lt;h2 id="cri">cri&lt;a class="td-heading-self-link" href="#cri" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>这里以 Containerd 为例。&lt;/p>
&lt;p>Containerd 在启动时会启动 runtime service 和 image service。前者是负责容器相关的操作，后者负责镜像相关的操作。&lt;/p>
&lt;p>&lt;strong>kubelet 获取用于端口转发的 streaming url，就是调用了 runtime service 的 gRPC 接口完成的。&lt;/strong>&lt;/p>
&lt;p>除了两个 gRPC service 以外，还加载了一系列插件。这些插件中，其中有一个是 cri service。&lt;/p>
&lt;p>cri service 会启动 streaming server。这个 server 会响应  &lt;code>/exec&lt;/code>、&lt;code>/attach&lt;/code>  和  &lt;code>/portforward&lt;/code>  的 stream 请求。&lt;/p>
&lt;p>portforward 支持两种操作系统 linux 和 windows：&lt;code>sandbox_portforward_linux.go&lt;/code>  和  &lt;code>sandbox_portforward_windows.go&lt;/code>。&lt;/p>
&lt;p>在 linux 上，在 pod 所在的 network namespace 中使用地址  &lt;code>localhost&lt;/code>  创建到目标端口的连接。然后在 streaming server 的连接和该连接之间拷贝数据，完成数据的传递。&lt;/p>
&lt;p>在 windows 上，是通过  &lt;code>wincat.exe&lt;/code>  使用地址  &lt;code>127.0.0.1&lt;/code>  创建到目标端口的连接。&lt;/p>
&lt;h3 id="参考源码-3">参考源码&lt;a class="td-heading-self-link" href="#%e5%8f%82%e8%80%83%e6%ba%90%e7%a0%81-3" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>pkg/cri/streaming/server.go:149[9]&lt;/li>
&lt;li>pkg/cri/server/streaming.go:69[10]&lt;/li>
&lt;li>pkg/cri/server/service.go:138[11]&lt;/li>
&lt;li>pkg/cri/server/sandbox_portforward_linux.go:34[12]&lt;/li>
&lt;/ul>
&lt;h2 id="总结">总结&lt;a class="td-heading-self-link" href="#%e6%80%bb%e7%bb%93" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>结合源码分析对 port-foward 工作原理的梳理，相信对 cri 的工作方式也有了一定的了解。本文是以容器运行时 Containerd 为例，不同的容器运行时虽然实现了 cri，但是实现的细节上也会有所差异。&lt;/p>
&lt;p>比如在 port-forward 的实现上，Kubernetes v1.23.0 版本中的 docker shim（1.24 中被移除）[13]  中，是使用&lt;code>nsenter&lt;/code>  进入 pod 所在的 network namespace 中通过  &lt;code>socat&lt;/code>  完成的端口转发。&lt;/p>
&lt;h3 id="参考资料">参考资料&lt;a class="td-heading-self-link" href="#%e5%8f%82%e8%80%83%e8%b5%84%e6%96%99" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>[1]staging/src/k8s.io/kubectl/pkg/cmd/portforward/portforward.go:389: &lt;a href="https://github.com/kubernetes/kubernetes/tree/release-1.24/staging/src/k8s.io/kubectl/pkg/cmd/portforward/portforward.go#L389">&lt;em>https://github.com/kubernetes/kubernetes/tree/release-1.24/staging/src/k8s.io/kubectl/pkg/cmd/portforward/portforward.go#L389&lt;/em>&lt;/a>
[2]staging/src/k8s.io/client-go/tools/portforward/portforward.go:242: &lt;a href="https://github.com/kubernetes/kubernetes/tree/release-1.24/staging/src/k8s.io/client-go/tools/portforward/portforward.go#L242">&lt;em>https://github.com/kubernetes/kubernetes/tree/release-1.24/staging/src/k8s.io/client-go/tools/portforward/portforward.go#L242&lt;/em>&lt;/a>
[3]staging/src/k8s.io/client-go/tools/portforward/portforward.go:330: &lt;a href="https://github.com/kubernetes/kubernetes/tree/release-1.24/staging/src/k8s.io/client-go/tools/portforward/portforward.go#L330">&lt;em>https://github.com/kubernetes/kubernetes/tree/release-1.24/staging/src/k8s.io/client-go/tools/portforward/portforward.go#L330&lt;/em>&lt;/a>
[4]pkg/registry/core/pod/rest/subresources.go:185: &lt;a href="https://github.com/kubernetes/kubernetes/tree/release-1.24/pkg/registry/core/pod/rest/subresources.go#L185">&lt;em>https://github.com/kubernetes/kubernetes/tree/release-1.24/pkg/registry/core/pod/rest/subresources.go#L185&lt;/em>&lt;/a>
[5]pkg/kubelet/server/server.go:463: &lt;a href="https://github.com/kubernetes/kubernetes/tree/release-1.24/pkg/kubelet/server/server.go#L463">&lt;em>https://github.com/kubernetes/kubernetes/tree/release-1.24/pkg/kubelet/server/server.go#L463&lt;/em>&lt;/a>
[6]pkg/kubelet/server/server.go:873: &lt;a href="https://github.com/kubernetes/kubernetes/tree/release-1.24/pkg/kubelet/server/server.go#L873">&lt;em>https://github.com/kubernetes/kubernetes/tree/release-1.24/pkg/kubelet/server/server.go#L873&lt;/em>&lt;/a>
[7]pkg/kubelet/cri/streaming/portforward/portforward.go:46: &lt;a href="https://github.com/kubernetes/kubernetes/tree/release-1.24/pkg/kubelet/cri/streaming/portforward/portforward.go#L46">&lt;em>https://github.com/kubernetes/kubernetes/tree/release-1.24/pkg/kubelet/cri/streaming/portforward/portforward.go#L46&lt;/em>&lt;/a>
[8]pkg/kubelet/cri/streaming/server.go:111: &lt;a href="https://github.com/kubernetes/kubernetes/tree/release-1.24/pkg/kubelet/cri/streaming/server.go#L111">&lt;em>https://github.com/kubernetes/kubernetes/tree/release-1.24/pkg/kubelet/cri/streaming/server.go#L111&lt;/em>&lt;/a>
[9]pkg/cri/streaming/server.go:149: &lt;a href="https://github.com/containerd/containerd/tree/release/1.5/pkg/cri/streaming/server.go#L149">&lt;em>https://github.com/containerd/containerd/tree/release/1.5/pkg/cri/streaming/server.go#L149&lt;/em>&lt;/a>
[10]pkg/cri/server/streaming.go:69: &lt;a href="https://github.com/containerd/containerd/tree/release/1.5/pkg/cri/server/streaming.go#L69">&lt;em>https://github.com/containerd/containerd/tree/release/1.5/pkg/cri/server/streaming.go#L69&lt;/em>&lt;/a>
[11]pkg/cri/server/service.go:138: &lt;a href="https://github.com/containerd/containerd/tree/release/1.5/pkg/cri/server/service.go#L138">&lt;em>https://github.com/containerd/containerd/tree/release/1.5/pkg/cri/server/service.go#L138&lt;/em>&lt;/a>
[12]pkg/cri/server/sandbox*portforward_linux.go:34: &lt;a href="https://github.com/containerd/containerd/tree/release/1.5/pkg/cri/server/sandbox_portforward_linux.go#L34">_https://github.com/containerd/containerd/tree/release/1.5/pkg/cri/server/sandbox_portforward_linux.go#L34*&lt;/a>
[13]Kubernetes v1.23.0 版本中的 docker shim（1.24 中被移除）: &lt;a href="https://github.com/kubernetes/kubernetes/blob/release-1.23/pkg/kubelet/dockershim/docker_streaming_others.go#L43">&lt;em>https://github.com/kubernetes/kubernetes/blob/release-1.23/pkg/kubelet/dockershim/docker_streaming_others.go#L43&lt;/em>&lt;/a>&lt;/p></description></item><item><title>Docs: Kubelet 源码</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/Kubernetes-%E5%BC%80%E5%8F%91/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/Kubelet-%E6%BA%90%E7%A0%81/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/Kubernetes-%E5%BC%80%E5%8F%91/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/Kubelet-%E6%BA%90%E7%A0%81/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://blog.tianfeiyu.com/source-code-reading-notes/kubernetes/kubelet-modules.html">田飞雨博客，源码阅读笔记-kubernetes-kubelet&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/j8CzMm3JeNnTgkaZxAjIdw">公众号，CNCF-Kubernetes 源码分析之 kubelet(一)&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://mp.weixin.qq.com/mp/appmsgalbum?action=getalbum&amp;amp;__biz=Mzk0NTE4OTU0Ng==&amp;amp;scene=1&amp;amp;album_id=1632443286688677893&amp;amp;count=3#wechat_redirect">https://mp.weixin.qq.com/mp/appmsgalbum?action=getalbum&amp;amp;__biz=Mzk0NTE4OTU0Ng==&amp;amp;scene=1&amp;amp;album_id=1632443286688677893&amp;amp;count=3#wechat_redirect&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://fatsheep9146.github.io/2018/07/08/kubelet%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E8%A7%A3%E6%9E%90/">博客-一直肥羊的思考，kubelet 内部实现解析&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://ljchen.net/2018/10/28/kubelet%E6%BA%90%E7%A0%81%E6%9E%B6%E6%9E%84%E7%AE%80%E4%BB%8B/">博客-ljchen&amp;rsquo;s Notes，Kubelet 源码结构简介&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>更新时间：2022 年 2 月 23 日，Kubernetes 的源码目录随着更新迭代，也在不断变化中&lt;/p>
&lt;h2 id="目录结构">目录结构&lt;a class="td-heading-self-link" href="#%e7%9b%ae%e5%bd%95%e7%bb%93%e6%9e%84" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>kubelet 代码分两部分，在 &lt;code>cmd/kubelet&lt;/code> 和 &lt;code>pkg/kubelet&lt;/code> 中&lt;/p>
&lt;ul>
&lt;li>cmd/kubelet/*&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ tree -L &lt;span style="color:#ae81ff">2&lt;/span> -p cmd/kubelet
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cmd/kubelet
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> BUILD
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> OWNERS
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> app
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> BUILD
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> OWNERS
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> auth.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> init_others.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> init_windows.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> init_windows_test.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> options
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> plugins.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> plugins_providerless.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> plugins_providers.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> server.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> server_bootstrap_test.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> server_linux.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> server_test.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> server_unsupported.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> kubelet.go
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>pkg/kubelet/*&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ tree -L &lt;span style="color:#ae81ff">1&lt;/span> -p pkg/kubelet
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pkg/kubelet
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> BUILD
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> OWNERS
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> active_deadline.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> active_deadline_test.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> apis
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> cadvisor
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> certificate
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> checkpointmanager
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> client
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> cloudresource
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> cm
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> config
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> configmap
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> container
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> cri
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> custommetrics
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> doc.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> dockershim
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> envvars
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> errors.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> events
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> eviction
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> images
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> kubelet.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> kubelet_dockershim.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> kubelet_dockershim_nodocker.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> kubelet_getters.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> kubelet_getters_test.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> kubelet_network.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> kubelet_network_linux.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> kubelet_network_others.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> kubelet_network_test.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> kubelet_node_status.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> kubelet_node_status_others.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> kubelet_node_status_test.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> kubelet_node_status_windows.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> kubelet_pods.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> kubelet_pods_linux_test.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> kubelet_pods_test.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> kubelet_pods_windows_test.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> kubelet_resources.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> kubelet_resources_test.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> kubelet_test.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> kubelet_volumes.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> kubelet_volumes_linux_test.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> kubelet_volumes_test.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> kubeletconfig
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> kuberuntime
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> leaky
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> legacy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> lifecycle
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> logs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> metrics
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> network
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> nodelease
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> nodestatus
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> oom
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> pleg
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> pluginmanager
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> pod
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> pod_container_deletor.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> pod_container_deletor_test.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> pod_workers.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> pod_workers_test.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> preemption
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> prober
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> qos
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> reason_cache.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> reason_cache_test.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> runonce.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> runonce_test.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> runtime.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> runtimeclass
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> secret
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> server
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> stats
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> status
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> sysctl
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> time_cache.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> time_cache_test.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> token
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> types
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> util
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> util.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> volume_host.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> volumemanager
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> winstats
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="架构">架构&lt;a class="td-heading-self-link" href="#%e6%9e%b6%e6%9e%84" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/bdgcor/1645758645509-b55b1ed9-71cd-4478-8a40-241960513d31.png" alt="image.png">&lt;/p>
&lt;h2 id="kubelet-模块化">Kubelet 模块化&lt;a class="td-heading-self-link" href="#kubelet-%e6%a8%a1%e5%9d%97%e5%8c%96" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Kubelet 整体由多个模块组成，这些模块通过多个途径来初始化&lt;/p>
&lt;ul>
&lt;li>&lt;code>pkg/kubelet/kubelet.go&lt;/code>
&lt;ul>
&lt;li>&lt;code>kubelet.initializeModules()&lt;/code> # 初始化不需要容器运行时启动的内部模块。
&lt;ul>
&lt;li>注意：这里的模块不能依赖于未在此处初始化的模块&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>kubelet.initialieRuntimeDependentModules()&lt;/code> # 初始化需要容器运行时的内部模块&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>在 《[Kubelet 启动流程](/docs/10.云原生/2.3.Kubernetes%20 容器编排系统/Kubernetes%20 开发/源码解析/Kubelet%20 源码/Kubelet%20 启动流程.md 源码/Kubelet 启动流程.md)》章节中包含了初始化模块的执行逻辑&lt;/p>
&lt;p>在 Kubelet 代码中，每个模块通常都放在 &lt;code>pkg/kubelet/&lt;/code> 目录下的某个单独的目录中。所有的模块通常都被包含在两个结构体中：&lt;/p>
&lt;ul>
&lt;li>&lt;code>Kubelet{}&lt;/code> # 代表 kubelet 内部跟 Pod 息息相关的模块，比如 podManager（pod 信息存储模块），probeManager（pod 测活模块）等等
&lt;ul>
&lt;li>通常实例化成名为 klet 或 kl 的对象&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>Dependencies{}&lt;/code> # 包含一些 kubelet 依赖的外部功能，比如 cadvisor（监控功能），containerManager（cgroup 管理功能）
&lt;ul>
&lt;li>通常实例化成名为 kubeDeps 的对象&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>这些&lt;strong>模块&lt;/strong>在代码中的表现形式&lt;strong>是结构体&lt;/strong>，使用模块时，会将结构体实例化为“对象”，然后调用对象的方法。只不过为了便于扩展，都将这些&lt;strong>结构体抽象为接口&lt;/strong>，所以 &lt;code>Kubelet{}&lt;/code> 与 &lt;code>Dependencies{}&lt;/code> 两个结构体中，其中很多属性的类型，通常都是接口，而这些模块结构体，都实现了对应的接口。&lt;/p>
&lt;p>这些模块基于&lt;strong>生产者/消费者&lt;/strong>的模型互相配合工作。整个 Kubelet 的工作模式将会围绕着不同的生产者生产出来的不同的有关 Pod 的消息来调用相应的消费者，以便完成不同的任务，比如 创建 Pod、删除 Pod 等等。&lt;/p>
&lt;p>源码：&lt;code>pkg/kubelet/kubelet.go&lt;/code> - &lt;code>kubelet.syncLoopIteration()&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">kl&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Kubelet&lt;/span>) &lt;span style="color:#a6e22e">syncLoopIteration&lt;/span>(&lt;span style="color:#a6e22e">configCh&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#a6e22e">kubetypes&lt;/span>.&lt;span style="color:#a6e22e">PodUpdate&lt;/span>, &lt;span style="color:#a6e22e">handler&lt;/span> &lt;span style="color:#a6e22e">SyncHandler&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">select&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">u&lt;/span>, &lt;span style="color:#a6e22e">open&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">configCh&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">e&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">plegCh&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">syncCh&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">update&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">livenessManager&lt;/span>.&lt;span style="color:#a6e22e">Updates&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">update&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">readinessManager&lt;/span>.&lt;span style="color:#a6e22e">Updates&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">update&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">startupManager&lt;/span>.&lt;span style="color:#a6e22e">Updates&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">housekeepingCh&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>从上面的代码中可以看到，Kubelet 主要包括 5 个生产者：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>configCh&lt;/strong> # 由 kubeDeps 对象中的 &lt;a href="https://github.com/kubernetes/kubernetes/blob/dd5e1a2978fd0b97d9b78e1564398aeea7e7fe92/pkg/kubelet/kubelet.go#L266:34">PodConfig&lt;/a> 子模块提供，该模块将同时 watch 3 个不同来源的 pod 信息的变化（file，http，apiserver），一旦某个来源的 pod 信息发生了更新（创建/更新/删除），这个 channel 中就会出现被更新的 pod 信息和更新的具体操作。&lt;/li>
&lt;li>&lt;strong>health manager&lt;/strong> # 由 3 个检查组成。用以同步失败的 Pod 或其中一个或多个健康检查失败的容器。
&lt;ul>
&lt;li>liveness&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>syncCh&lt;/strong> # 一个周期性的信号源(默认 1 秒)，周期性同步所有需要再次同步的 pod。&lt;/li>
&lt;li>&lt;strong>housekeepingCh&lt;/strong> # 一个周期性信号源(默认 2 秒)，周期性的清理一些无用 pod。&lt;/li>
&lt;li>&lt;strong>plegCh&lt;/strong> # 由 kubelet 对象中的 &lt;a href="https://github.com/kubernetes/kubernetes/blob/dd5e1a2978fd0b97d9b78e1564398aeea7e7fe92/pkg/kubelet/kubelet.go#L1081">pleg&lt;/a> 子模块提供，该模块主要用于周期性地向 container runtime 查询当前所有容器的状态，如果状态发生变化，则这个 channel 产生事件&lt;/li>
&lt;/ul>
&lt;p>上述生产者生产的消息都由 Kubelet{} 结构体实例化的对象统一接收，之后调用其他功能函数完成后续操作。比如 SyncHandler 接口下的所有函数：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">SyncHandler&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">HandlePodAdditions&lt;/span>(&lt;span style="color:#a6e22e">pods&lt;/span> []&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">v1&lt;/span>.&lt;span style="color:#a6e22e">Pod&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">HandlePodUpdates&lt;/span>(&lt;span style="color:#a6e22e">pods&lt;/span> []&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">v1&lt;/span>.&lt;span style="color:#a6e22e">Pod&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">HandlePodRemoves&lt;/span>(&lt;span style="color:#a6e22e">pods&lt;/span> []&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">v1&lt;/span>.&lt;span style="color:#a6e22e">Pod&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">HandlePodReconcile&lt;/span>(&lt;span style="color:#a6e22e">pods&lt;/span> []&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">v1&lt;/span>.&lt;span style="color:#a6e22e">Pod&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">HandlePodSyncs&lt;/span>(&lt;span style="color:#a6e22e">pods&lt;/span> []&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">v1&lt;/span>.&lt;span style="color:#a6e22e">Pod&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">HandlePodCleanups&lt;/span>() &lt;span style="color:#66d9ef">error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>每一个处理函数背后可能都需要 kubelet 对象去调用背后多个内部子模块&lt;/strong>来共同完成，比如 HandlePodAddition 函数，处理 Pod 的创建，其中可能需要&lt;/p>
&lt;ul>
&lt;li>调用 kubelet.podManager 子模块 AddPod 函数，注册该 pod 信息&lt;/li>
&lt;li>调用 kubelet.podWorker 子模块为这个 Pod 创建单独的 worker goroutine 完成具体的操作&lt;/li>
&lt;li>调用 kubelet.containerManager 子模块为这个 Pod 创建相应的 Pod Level Cgroup&lt;/li>
&lt;li>调用 kubelet.volumeManager 子模块为这个 Pod 准备需要被 Mount 到容器中的文件系统&lt;/li>
&lt;li>调用 kubelet.containerRuntime 子模块真正的创建 Pod 的实体&lt;/li>
&lt;li>….&lt;/li>
&lt;/ul>
&lt;p>所以综上，整个 Kubelet 的所有内部子模块就是通过这种生产者消费者模型协调工作，及时将 Pod 以用户期望的状态维护在它所在的机器上。&lt;/p>
&lt;p>上面说到的只是 Kubelet 中和 Pod 管理相关的结构，kubelet 中还包括一些为了 维护物理机稳定性、同步更新物理机配置 等目的，周期性不间断工作的子模块，他们也是 Kubelet 中非常重要的一部分。&lt;/p>
&lt;h3 id="kubelet-模块">Kubelet 模块&lt;a class="td-heading-self-link" href="#kubelet-%e6%a8%a1%e5%9d%97" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/bdgcor/1659000155785-e8a06922-7ff8-4c01-b31a-5701a937e619.png" alt="image.png">
上图展示了 Kubelet 组件中的模块以及模块间的划分。&lt;/p>
&lt;ul>
&lt;li>P&lt;del>LEG(Pod Lifecycle Event Generator） PLEG 是 kubelet 的核心模块,PLEG 会一直调用 container runtime 获取本节点 containers/sandboxes 的信息，并与自身维护的 pods cache 信息进行对比，生成对应的 PodLifecycleEvent，然后输出到 eventChannel 中，通过 eventChannel 发送到 kubelet syncLoop 进行消费，然后由 kubelet syncPod 来触发 pod 同步处理过程，最终达到用户的期望状态。&lt;/del>&lt;/li>
&lt;li>&lt;strong>~~cAdvisor ~~&lt;/strong>&lt;del># (&lt;/del>&lt;a href="https://github.com/google/cadvisor%EF%BC%89%E6%98%AF">&lt;del>https://github.com/google/cadvisor&lt;/del>&lt;/a>&lt;del>)google 开发的容器监控工具，集成在 kubelet 中，起到收集本节点和容器的监控信息，大部分公司对容器的监控数据都是从 cAdvisor 中获取的 ，cAvisor 模块对外提供了 interface 接口，该接口也被 imageManager，OOMWatcher，containerManager 等所使用。&lt;/del>
&lt;ul>
&lt;li>~~代码：&lt;del>&lt;code>~~pkg/kubelet/cadvisor/cadvisor_linux.go~~&lt;/code>&lt;/del>。cadvisor 包中名为 &lt;del>&lt;code>~~{}~~&lt;/code>&lt;/del> 的结构体实现了本包中的 &lt;del>&lt;code>~~{}~~&lt;/code>&lt;/del> 接口~~&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>OOMWatcher&lt;/strong> # 系统 OOM 的监听器，会与 cadvisor 模块之间建立 SystemOOM,通过 Watch 方式从 cadvisor 那里收到的 OOM 信号，并产生相关事件。
&lt;ul>
&lt;li>代码：&lt;code>pkg/kubelet/oom/oom_watcher_linux.go&lt;/code>。oom 包中名为 &lt;code>realWatcher{}&lt;/code> 的结构体实现了本包中的 &lt;code>Watcher{}&lt;/code> 接口&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>~~probeManager probeManager 依赖于 statusManager,livenessManager,containerRefManager，会定时去监控 pod 中容器的健康状况，当前支持两种类型的探针：livenessProbe 和 readinessProbe。 livenessProbe：用于判断容器是否存活，如果探测失败，kubelet 会 kill 掉该容器，并根据容器的重启策略做相应的处理。 readinessProbe：用于判断容器是否启动完成，将探测成功的容器加入到该 pod 所在 service 的 endpoints 中，反之则移除。readinessProbe 和 livenessProbe 有三种实现方式：http、tcp 以及 cmd。~~&lt;/li>
&lt;li>~~statusManager statusManager 负责维护状态信息，并把 pod 状态更新到 apiserver，但是它并不负责监控 pod 状态的变化，而是提供对应的接口供其他组件调用，比如 probeManager。~~&lt;/li>
&lt;li>~~containerRefManager 容器引用的管理，相对简单的 Manager，用来报告容器的创建，失败等事件，通过定义 map 来实现了 containerID 与 v1.ObjectReferece 容器引用的映射。~~&lt;/li>
&lt;li>&lt;strong>EvictionManager&lt;/strong> # 当节点的内存、磁盘或 inode 等资源不足时，达到了配置的 evict 策略， node 会变为 pressure 状态，此时 kubelet 会按照 qosClass 顺序来驱赶 pod，以此来保证节点的稳定性。可以通过配置 kubelet 启动参数 &amp;ndash;eviction-hard= 来决定 evict 的策略值。
&lt;ul>
&lt;li>代码：&lt;code>pkg/kubelet/eviction/eviction_manager.go&lt;/code>。eviction 包中名为 &lt;code>managerImpl{}&lt;/code> 的结构体实现了本包中的 &lt;code>Manager{}&lt;/code> 接口。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>ImageGCManager&lt;/strong> # 负责 node 节点的镜像回收，当本地的存放镜像的本地磁盘空间达到某阈值的时候，会触发镜像的回收，删除掉不被 pod 所使用的镜像，回收镜像的阈值可以通过 kubelet 的启动参数 &amp;ndash;image-gc-high-threshold 和 &amp;ndash;image-gc-low-threshold 来设置。
&lt;ul>
&lt;li>代码：&lt;code>pkg/kubelet/images/image_gc_manager.go&lt;/code>。images 包中名为 &lt;code>realImageGCManager{}&lt;/code> 的结构体实现了本包中的 &lt;code>ImageGCManager{}&lt;/code> 接口&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>~~containerGC containerGC 负责清理 node 节点上已消亡的 container，具体的 GC 操作由 runtime 来实现。~~&lt;/li>
&lt;li>~~imageManager 调用 kubecontainer 提供的 PullImage/GetImageRef/ListImages/RemoveImage/ImageStates 方法来保证 pod 运行所需要的镜像。~~&lt;/li>
&lt;li>~~volumeManager 负责 node 节点上 pod 所使用 volume 的管理，volume 与 pod 的生命周期关联，负责 pod 创建删除过程中 volume 的 mount/umount/attach/detach 流程，kubernetes 采用 volume Plugins 的方式，实现存储卷的挂载等操作，内置几十种存储插件。~~&lt;/li>
&lt;li>&lt;strong>ContainerManager&lt;/strong> # 负责 node 节点上运行的容器的 cgroup 配置信息，kubelet 启动参数如果指定 &amp;ndash;cgroups-per-qos 的时候，kubelet 会启动 goroutine 来周期性的更新 pod 的 cgroup 信息，维护其正确性，该参数默认为 true，实现了 pod 的 Guaranteed/BestEffort/Burstable 三种级别的 Qos。
&lt;ul>
&lt;li>代码：&lt;code>pkg/kubelet/cm/container_manager_linux.go&lt;/code>。cm 包中名为 &lt;code>containerManagerImpl{}&lt;/code> 的结构体实现了本包中的 &lt;code>ContainerManager{}&lt;/code> 接口&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>~~runtimeManager containerRuntime 负责 kubelet 与不同的 runtime 实现进行对接，实现对于底层 container 的操作，初始化之后得到的 runtime 实例将会被之前描述的组件所使用。可以通过 kubelet 的启动参数 &amp;ndash;container-runtime 来定义是使用 docker 还是 rkt，默认是 docker。~~&lt;/li>
&lt;li>~~podManager podManager 提供了接口来存储和访问 pod 的信息，维持 static pod 和 mirror pods 的关系，podManager 会被 statusManager/volumeManager/runtimeManager 所调用，podManager 的接口处理流程里面会调用 secretManager 以及 configMapManager。~~&lt;/li>
&lt;/ul>
&lt;p>在 v1.12 中，Kubelet 有 18 个 manager：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>certificateManager
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cgroupManager
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>containerManager
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cpuManager
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nodeContainerManager
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>configmapManager
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>containerReferenceManager
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>evictionManager
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nvidiaGpuManager
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>imageGCManager
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kuberuntimeManager
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hostportManager
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>podManager
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>proberManager
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>secretManager
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>statusManager
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>volumeManager
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tokenManager
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="结构体">结构体&lt;a class="td-heading-self-link" href="#%e7%bb%93%e6%9e%84%e4%bd%93" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="kubeletserver-结构体">KubeletServer 结构体&lt;a class="td-heading-self-link" href="#kubeletserver-%e7%bb%93%e6%9e%84%e4%bd%93" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;code>KubeletServer&lt;/code> 结构体封装了启动 kubelet 所需的所有参数，这些可以通过 命令行 或 配置文件 设置。在调用各种运行 kubelet 的函数或方法的时候，通常都需要将该结构体作为参数。&lt;/p>
&lt;p>源码：&lt;code>cmd/kubelet/app/options/options.go&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">KubeletServer&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">KubeletFlags&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">kubeletconfig&lt;/span>.&lt;span style="color:#a6e22e">KubeletConfiguration&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="kubelet-结构体">Kubelet 结构体&lt;a class="td-heading-self-link" href="#kubelet-%e7%bb%93%e6%9e%84%e4%bd%93" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;code>Kubelet&lt;/code> 结构体是 kubelet 的主要实现，当 Kubelet 运行后调用的各种方法，都是该结构体的方法。该结构体实现了多个接口：&lt;/p>
&lt;ul>
&lt;li>&lt;code>SyncHandler&lt;/code> 接口&lt;/li>
&lt;li>&lt;code>Bootstrap&lt;/code> 接口&lt;/li>
&lt;li>&amp;hellip;&amp;hellip; 等&lt;/li>
&lt;/ul>
&lt;p>源码：&lt;code>pkg/kubelet/kubelet.go&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Kubelet&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">......&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="kubelet-结构体中的属性">Kubelet 结构体中的属性&lt;a class="td-heading-self-link" href="#kubelet-%e7%bb%93%e6%9e%84%e4%bd%93%e4%b8%ad%e7%9a%84%e5%b1%9e%e6%80%a7" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>kubeletConfiguration kubeletconfiginternal.KubeletConfiguration&lt;/li>
&lt;li>// hostname is the hostname the kubelet detected or was given via flag/config&lt;/li>
&lt;li>hostname string&lt;/li>
&lt;li>// hostnameOverridden indicates the hostname was overridden via flag/config&lt;/li>
&lt;li>hostnameOverridden bool&lt;/li>
&lt;li>nodeName types.NodeName&lt;/li>
&lt;li>runtimeCache kubecontainer.RuntimeCache&lt;/li>
&lt;li>kubeClient clientset.Interface&lt;/li>
&lt;li>heartbeatClient clientset.Interface&lt;/li>
&lt;li>rootDirectory string&lt;/li>
&lt;li>lastObservedNodeAddressesMux sync.RWMutex&lt;/li>
&lt;li>lastObservedNodeAddresses []v1.NodeAddress&lt;/li>
&lt;li>// onRepeatedHeartbeatFailure is called when a heartbeat operation fails more than once. optional.&lt;/li>
&lt;li>onRepeatedHeartbeatFailure func()&lt;/li>
&lt;li>&lt;strong>podWorkers PodWorkers&lt;/strong> # 响应事件处理同步 Pod.&lt;/li>
&lt;li>// resyncInterval is the interval between periodic full reconciliations of&lt;/li>
&lt;li>// pods on this node.&lt;/li>
&lt;li>resyncInterval time.Duration&lt;/li>
&lt;li>// sourcesReady records the sources seen by the kubelet, it is thread-safe.&lt;/li>
&lt;li>sourcesReady config.SourcesReady&lt;/li>
&lt;li>// podManager is a facade that abstracts away the various sources of pods&lt;/li>
&lt;li>// this Kubelet services.&lt;/li>
&lt;li>podManager kubepod.Manager&lt;/li>
&lt;li>&lt;strong>evictionManager eviction.Manager&lt;/strong> # 驱逐管理器。一个模块。用于观察和应对可能影响节点稳定性的情况&lt;/li>
&lt;li>// Optional, defaults to /logs/ from /var/log&lt;/li>
&lt;li>logServer http.Handler&lt;/li>
&lt;li>// Optional, defaults to simple Docker implementation&lt;/li>
&lt;li>runner kubecontainer.CommandRunner&lt;/li>
&lt;li>// cAdvisor used for container information.&lt;/li>
&lt;li>cadvisor cadvisor.Interface&lt;/li>
&lt;li>// Set to true to have the node register itself with the apiserver.&lt;/li>
&lt;li>registerNode bool&lt;/li>
&lt;li>// List of taints to add to a node object when the kubelet registers itself.&lt;/li>
&lt;li>registerWithTaints []v1.Taint&lt;/li>
&lt;li>// Set to true to have the node register itself as schedulable.&lt;/li>
&lt;li>registerSchedulable bool&lt;/li>
&lt;li>// for internal book keeping; access only from within registerWithApiserver&lt;/li>
&lt;li>registrationCompleted bool&lt;/li>
&lt;li>// dnsConfigurer is used for setting up DNS resolver configuration when launching pods.&lt;/li>
&lt;li>dnsConfigurer *dns.Configurer&lt;/li>
&lt;li>// masterServiceNamespace is the namespace that the master service is exposed in.&lt;/li>
&lt;li>masterServiceNamespace string&lt;/li>
&lt;li>// serviceLister knows how to list services&lt;/li>
&lt;li>serviceLister serviceLister&lt;/li>
&lt;li>// serviceHasSynced indicates whether services have been sync&amp;rsquo;d at least once.&lt;/li>
&lt;li>// Check this before trusting a response from the lister.&lt;/li>
&lt;li>serviceHasSynced cache.InformerSynced&lt;/li>
&lt;li>// nodeLister knows how to list nodes&lt;/li>
&lt;li>nodeLister corelisters.NodeLister&lt;/li>
&lt;li>// nodeHasSynced indicates whether nodes have been sync&amp;rsquo;d at least once.&lt;/li>
&lt;li>// Check this before trusting a response from the node lister.&lt;/li>
&lt;li>nodeHasSynced cache.InformerSynced&lt;/li>
&lt;li>// a list of node labels to register&lt;/li>
&lt;li>nodeLabels map[string]string&lt;/li>
&lt;li>// Last timestamp when runtime responded on ping.&lt;/li>
&lt;li>// Mutex is used to protect this value.&lt;/li>
&lt;li>runtimeState *runtimeState&lt;/li>
&lt;li>// Volume plugins.&lt;/li>
&lt;li>volumePluginMgr *volume.VolumePluginMgr&lt;/li>
&lt;li>// Handles container probing.&lt;/li>
&lt;li>probeManager prober.Manager&lt;/li>
&lt;li>// Manages container health check results.&lt;/li>
&lt;li>livenessManager proberesults.Manager&lt;/li>
&lt;li>readinessManager proberesults.Manager&lt;/li>
&lt;li>startupManager proberesults.Manager&lt;/li>
&lt;li>// How long to keep idle streaming command execution/port forwarding&lt;/li>
&lt;li>// connections open before terminating them&lt;/li>
&lt;li>streamingConnectionIdleTimeout time.Duration&lt;/li>
&lt;li>// The EventRecorder to use&lt;/li>
&lt;li>recorder record.EventRecorder&lt;/li>
&lt;li>// Policy for handling garbage collection of dead containers.&lt;/li>
&lt;li>containerGC kubecontainer.GC&lt;/li>
&lt;li>// Manager for image garbage collection.&lt;/li>
&lt;li>imageManager images.ImageGCManager&lt;/li>
&lt;li>// Manager for container logs.&lt;/li>
&lt;li>containerLogManager logs.ContainerLogManager&lt;/li>
&lt;li>// Secret manager.&lt;/li>
&lt;li>secretManager secret.Manager&lt;/li>
&lt;li>// ConfigMap manager.&lt;/li>
&lt;li>configMapManager configmap.Manager&lt;/li>
&lt;li>// Cached MachineInfo returned by cadvisor.&lt;/li>
&lt;li>machineInfoLock sync.RWMutex&lt;/li>
&lt;li>machineInfo *cadvisorapi.MachineInfo&lt;/li>
&lt;li>// Handles certificate rotations.&lt;/li>
&lt;li>serverCertificateManager certificate.Manager&lt;/li>
&lt;li>// Syncs pods statuses with apiserver; also used as a cache of statuses.&lt;/li>
&lt;li>statusManager status.Manager&lt;/li>
&lt;li>// VolumeManager runs a set of asynchronous loops that figure out which&lt;/li>
&lt;li>// volumes need to be attached/mounted/unmounted/detached based on the pods&lt;/li>
&lt;li>// scheduled on this node and makes it so.&lt;/li>
&lt;li>volumeManager volumemanager.VolumeManager&lt;/li>
&lt;li>// Cloud provider interface.&lt;/li>
&lt;li>cloud cloudprovider.Interface&lt;/li>
&lt;li>// Handles requests to cloud provider with timeout&lt;/li>
&lt;li>cloudResourceSyncManager cloudresource.SyncManager&lt;/li>
&lt;li>// Indicates that the node initialization happens in an external cloud controller&lt;/li>
&lt;li>externalCloudProvider bool&lt;/li>
&lt;li>// Reference to this node.&lt;/li>
&lt;li>nodeRef *v1.ObjectReference&lt;/li>
&lt;li>// Container runtime.&lt;/li>
&lt;li>containerRuntime kubecontainer.Runtime&lt;/li>
&lt;li>// Streaming runtime handles container streaming.&lt;/li>
&lt;li>streamingRuntime kubecontainer.StreamingRuntime&lt;/li>
&lt;li>// Container runtime service (needed by container runtime Start()).&lt;/li>
&lt;li>runtimeService internalapi.RuntimeService&lt;/li>
&lt;li>// reasonCache caches the failure reason of the last creation of all containers, which is&lt;/li>
&lt;li>// used for generating ContainerStatus.&lt;/li>
&lt;li>reasonCache *ReasonCache&lt;/li>
&lt;li>// nodeStatusUpdateFrequency specifies how often kubelet computes node status. If node lease&lt;/li>
&lt;li>// feature is not enabled, it is also the frequency that kubelet posts node status to master.&lt;/li>
&lt;li>// In that case, be cautious when changing the constant, it must work with nodeMonitorGracePeriod&lt;/li>
&lt;li>// in nodecontroller. There are several constraints:&lt;/li>
&lt;li>// 1. nodeMonitorGracePeriod must be N times more than nodeStatusUpdateFrequency, where&lt;/li>
&lt;li>// N means number of retries allowed for kubelet to post node status. It is pointless&lt;/li>
&lt;li>// to make nodeMonitorGracePeriod be less than nodeStatusUpdateFrequency, since there&lt;/li>
&lt;li>// will only be fresh values from Kubelet at an interval of nodeStatusUpdateFrequency.&lt;/li>
&lt;li>// The constant must be less than podEvictionTimeout.&lt;/li>
&lt;li>// 2. nodeStatusUpdateFrequency needs to be large enough for kubelet to generate node&lt;/li>
&lt;li>// status. Kubelet may fail to update node status reliably if the value is too small,&lt;/li>
&lt;li>// as it takes time to gather all necessary node information.&lt;/li>
&lt;li>nodeStatusUpdateFrequency time.Duration&lt;/li>
&lt;li>// nodeStatusReportFrequency is the frequency that kubelet posts node&lt;/li>
&lt;li>// status to master. It is only used when node lease feature is enabled.&lt;/li>
&lt;li>nodeStatusReportFrequency time.Duration&lt;/li>
&lt;li>// lastStatusReportTime is the time when node status was last reported.&lt;/li>
&lt;li>lastStatusReportTime time.Time&lt;/li>
&lt;li>// lastContainerStartedTime is the time of the last ContainerStarted event observed per pod&lt;/li>
&lt;li>lastContainerStartedTime *timeCache&lt;/li>
&lt;li>// syncNodeStatusMux is a lock on updating the node status, because this path is not thread-safe.&lt;/li>
&lt;li>// This lock is used by Kubelet.syncNodeStatus function and shouldn&amp;rsquo;t be used anywhere else.&lt;/li>
&lt;li>syncNodeStatusMux sync.Mutex&lt;/li>
&lt;li>// updatePodCIDRMux is a lock on updating pod CIDR, because this path is not thread-safe.&lt;/li>
&lt;li>// This lock is used by Kubelet.syncNodeStatus function and shouldn&amp;rsquo;t be used anywhere else.&lt;/li>
&lt;li>updatePodCIDRMux sync.Mutex&lt;/li>
&lt;li>// updateRuntimeMux is a lock on updating runtime, because this path is not thread-safe.&lt;/li>
&lt;li>// This lock is used by Kubelet.updateRuntimeUp function and shouldn&amp;rsquo;t be used anywhere else.&lt;/li>
&lt;li>updateRuntimeMux sync.Mutex&lt;/li>
&lt;li>// nodeLeaseController claims and renews the node lease for this Kubelet&lt;/li>
&lt;li>nodeLeaseController lease.Controller&lt;/li>
&lt;li>// Generates pod events.&lt;/li>
&lt;li>pleg pleg.PodLifecycleEventGenerator&lt;/li>
&lt;li>// Store kubecontainer.PodStatus for all pods.&lt;/li>
&lt;li>podCache kubecontainer.Cache&lt;/li>
&lt;li>// os is a facade for various syscalls that need to be mocked during testing.&lt;/li>
&lt;li>os kubecontainer.OSInterface&lt;/li>
&lt;li>// Watcher of out of memory events.&lt;/li>
&lt;li>oomWatcher oomwatcher.Watcher&lt;/li>
&lt;li>// Monitor resource usage&lt;/li>
&lt;li>resourceAnalyzer serverstats.ResourceAnalyzer&lt;/li>
&lt;li>// Whether or not we should have the QOS cgroup hierarchy for resource management&lt;/li>
&lt;li>cgroupsPerQOS bool&lt;/li>
&lt;li>// If non-empty, pass this to the container runtime as the root cgroup.&lt;/li>
&lt;li>cgroupRoot string&lt;/li>
&lt;li>// Mounter to use for volumes.&lt;/li>
&lt;li>mounter mount.Interface&lt;/li>
&lt;li>// hostutil to interact with filesystems&lt;/li>
&lt;li>hostutil hostutil.HostUtils&lt;/li>
&lt;li>// subpather to execute subpath actions&lt;/li>
&lt;li>subpather subpath.Interface&lt;/li>
&lt;li>// Manager of non-Runtime containers.&lt;/li>
&lt;li>containerManager cm.ContainerManager&lt;/li>
&lt;li>// Maximum Number of Pods which can be run by this Kubelet&lt;/li>
&lt;li>maxPods int&lt;/li>
&lt;li>// Monitor Kubelet&amp;rsquo;s sync loop&lt;/li>
&lt;li>syncLoopMonitor atomic.Value&lt;/li>
&lt;li>// Container restart Backoff&lt;/li>
&lt;li>backOff *flowcontrol.Backoff&lt;/li>
&lt;li>// Information about the ports which are opened by daemons on Node running this Kubelet server.&lt;/li>
&lt;li>daemonEndpoints *v1.NodeDaemonEndpoints&lt;/li>
&lt;li>// A queue used to trigger pod workers.&lt;/li>
&lt;li>workQueue queue.WorkQueue&lt;/li>
&lt;li>// oneTimeInitializer is used to initialize modules that are dependent on the runtime to be up.&lt;/li>
&lt;li>oneTimeInitializer sync.Once&lt;/li>
&lt;li>// If set, use this IP address or addresses for the node&lt;/li>
&lt;li>nodeIPs []net.IP&lt;/li>
&lt;li>// use this function to validate the kubelet nodeIP&lt;/li>
&lt;li>nodeIPValidator func(net.IP) error&lt;/li>
&lt;li>// If non-nil, this is a unique identifier for the node in an external database, eg. cloudprovider&lt;/li>
&lt;li>providerID string&lt;/li>
&lt;li>// clock is an interface that provides time related functionality in a way that makes it&lt;/li>
&lt;li>// easy to test the code.&lt;/li>
&lt;li>clock clock.WithTicker&lt;/li>
&lt;li>// handlers called during the tryUpdateNodeStatus cycle&lt;/li>
&lt;li>setNodeStatusFuncs []func(*v1.Node) error&lt;/li>
&lt;li>lastNodeUnschedulableLock sync.Mutex&lt;/li>
&lt;li>// maintains Node.Spec.Unschedulable value from previous run of tryUpdateNodeStatus()&lt;/li>
&lt;li>lastNodeUnschedulable bool&lt;/li>
&lt;li>// the list of handlers to call during pod admission.&lt;/li>
&lt;li>admitHandlers lifecycle.PodAdmitHandlers&lt;/li>
&lt;li>// softAdmithandlers are applied to the pod after it is admitted by the Kubelet, but before it is&lt;/li>
&lt;li>// run. A pod rejected by a softAdmitHandler will be left in a Pending state indefinitely. If a&lt;/li>
&lt;li>// rejected pod should not be recreated, or the scheduler is not aware of the rejection rule, the&lt;/li>
&lt;li>// admission rule should be applied by a softAdmitHandler.&lt;/li>
&lt;li>softAdmitHandlers lifecycle.PodAdmitHandlers&lt;/li>
&lt;li>// the list of handlers to call during pod sync loop.&lt;/li>
&lt;li>lifecycle.PodSyncLoopHandlers&lt;/li>
&lt;li>// the list of handlers to call during pod sync.&lt;/li>
&lt;li>lifecycle.PodSyncHandlers&lt;/li>
&lt;li>// the number of allowed pods per core&lt;/li>
&lt;li>podsPerCore int&lt;/li>
&lt;li>// enableControllerAttachDetach indicates the Attach/Detach controller&lt;/li>
&lt;li>// should manage attachment/detachment of volumes scheduled to this node,&lt;/li>
&lt;li>// and disable kubelet from executing any attach/detach operations&lt;/li>
&lt;li>enableControllerAttachDetach bool&lt;/li>
&lt;li>// trigger deleting containers in a pod&lt;/li>
&lt;li>containerDeletor *podContainerDeletor&lt;/li>
&lt;li>// config iptables util rules&lt;/li>
&lt;li>makeIPTablesUtilChains bool&lt;/li>
&lt;li>// The bit of the fwmark space to mark packets for SNAT.&lt;/li>
&lt;li>iptablesMasqueradeBit int&lt;/li>
&lt;li>// The bit of the fwmark space to mark packets for dropping.&lt;/li>
&lt;li>iptablesDropBit int&lt;/li>
&lt;li>// The AppArmor validator for checking whether AppArmor is supported.&lt;/li>
&lt;li>appArmorValidator apparmor.Validator&lt;/li>
&lt;li>// experimentalHostUserNamespaceDefaulting sets userns=true when users request host namespaces (pid, ipc, net),&lt;/li>
&lt;li>// are using non-namespaced capabilities (mknod, sys_time, sys_module), the pod contains a privileged container,&lt;/li>
&lt;li>// or using host path volumes.&lt;/li>
&lt;li>// This should only be enabled when the container runtime is performing user remapping AND if the&lt;/li>
&lt;li>// experimental behavior is desired.&lt;/li>
&lt;li>experimentalHostUserNamespaceDefaulting bool&lt;/li>
&lt;li>// StatsProvider provides the node and the container stats.&lt;/li>
&lt;li>StatsProvider *stats.Provider&lt;/li>
&lt;li>// This flag, if set, instructs the kubelet to keep volumes from terminated pods mounted to the node.&lt;/li>
&lt;li>// This can be useful for debugging volume related issues.&lt;/li>
&lt;li>keepTerminatedPodVolumes bool// DEPRECATED&lt;/li>
&lt;li>// pluginmanager runs a set of asynchronous loops that figure out which&lt;/li>
&lt;li>// plugins need to be registered/unregistered based on this node and makes it so.&lt;/li>
&lt;li>pluginManager pluginmanager.PluginManager&lt;/li>
&lt;li>// This flag sets a maximum number of images to report in the node status.&lt;/li>
&lt;li>nodeStatusMaxImages int32&lt;/li>
&lt;li>// Handles RuntimeClass objects for the Kubelet.&lt;/li>
&lt;li>runtimeClassManager *runtimeclass.Manager&lt;/li>
&lt;li>// Handles node shutdown events for the Node.&lt;/li>
&lt;li>shutdownManager nodeshutdown.Manager&lt;/li>
&lt;/ul>
&lt;h2 id="dependencies-结构体">Dependencies 结构体&lt;a class="td-heading-self-link" href="#dependencies-%e7%bb%93%e6%9e%84%e4%bd%93" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>源码：&lt;code>pkg/kubelet/kubelet.go&lt;/code>&lt;/p>
&lt;h2 id="podworkers-结构体">podWorkers 结构体&lt;a class="td-heading-self-link" href="#podworkers-%e7%bb%93%e6%9e%84%e4%bd%93" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;code>podWorkers struct{}&lt;/code> 实现了如下接口&lt;/p>
&lt;ul>
&lt;li>&lt;code>[PodWorkers interface{}](#Kg8vN)&lt;/code>，该接口被包含在 &lt;code>kubelet struct{}&lt;/code>中&lt;/li>
&lt;/ul>
&lt;p>源码：&lt;code>pkg/kubelet/pod_workers.go&lt;/code>&lt;/p>
&lt;h2 id="kubegenericruntimemanager-结构体">kubeGenericRuntimeManager 结构体&lt;a class="td-heading-self-link" href="#kubegenericruntimemanager-%e7%bb%93%e6%9e%84%e4%bd%93" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>该结构体实现了如下接口&lt;/p>
&lt;ul>
&lt;li>&lt;code>Runtime interface{}&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>源码：&lt;code>pkg/kubelet/kuberuntime/kuberuntime_manager.go&lt;/code>-&lt;code>type kubeGenericRuntimeManager struct{}&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">kubeGenericRuntimeManager&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="结构体属性">结构体属性&lt;a class="td-heading-self-link" href="#%e7%bb%93%e6%9e%84%e4%bd%93%e5%b1%9e%e6%80%a7" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>runtimeName string
recorder record.EventRecorder
osInterface kubecontainer.OSInterface
// machineInfo contains the machine information.
machineInfo &lt;em>cadvisorapi.MachineInfo
// Container GC manager
containerGC&lt;/em>containerGC
// Keyring for pulling images
keyring credentialprovider.DockerKeyring
// Runner of lifecycle events.
runner kubecontainer.HandlerRunner
// RuntimeHelper that wraps kubelet to generate runtime container options.
runtimeHelper kubecontainer.RuntimeHelper
// Health check results.
livenessManager proberesults.Manager
readinessManager proberesults.Manager
startupManager proberesults.Manager
// If true, enforce container cpu limits with CFS quota support
cpuCFSQuota bool
// CPUCFSQuotaPeriod sets the CPU CFS quota period value, cpu.cfs_period_us, defaults to 100ms
cpuCFSQuotaPeriod metav1.Duration
// wrapped image puller.
imagePuller images.ImageManager
&lt;strong>runtimeService internalapi.RuntimeService&lt;/strong> # gRPC 服务客户端，即 CRI，通常由第三方容器工具实现该接口，比如 Containerd
imageService internalapi.ImageManagerService
// The version cache of runtime daemon.
versionCache &lt;em>cache.ObjectCache
// The directory path for seccomp profiles.
seccompProfileRoot string
// Internal lifecycle event handlers for container resource management.
internalLifecycle cm.InternalContainerLifecycle
// Manage container logs.
logManager logs.ContainerLogManager
// Manage RuntimeClass resources.
runtimeClassManager&lt;/em>runtimeclass.Manager
// Cache last per-container error message to reduce log spam
logReduction *logreduction.LogReduction
// PodState provider instance
podStateProvider podStateProvider
// Use RuntimeDefault as the default seccomp profile for all workloads.
seccompDefault bool
// MemorySwapBehavior defines how swap is used
memorySwapBehavior string
//Function to get node allocatable resources
getNodeAllocatable func() v1.ResourceList
// Memory throttling factor for MemoryQoS
memoryThrottlingFactor float64&lt;/p>
&lt;h1 id="接口">接口&lt;a class="td-heading-self-link" href="#%e6%8e%a5%e5%8f%a3" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="bootstrap-接口">Bootstrap 接口&lt;a class="td-heading-self-link" href="#bootstrap-%e6%8e%a5%e5%8f%a3" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Bootstrap 接口中包含了在引导 kubelet 启动并运行时所需要的各种行为，针对初始化协议&lt;/p>
&lt;p>源码：&lt;code>pkg/kubelet/kubelet.go&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Bootstrap&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">GetConfiguration&lt;/span>() &lt;span style="color:#a6e22e">kubeletconfiginternal&lt;/span>.&lt;span style="color:#a6e22e">KubeletConfiguration&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">BirthCry&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">StartGarbageCollection&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ListenAndServe&lt;/span>(&lt;span style="color:#a6e22e">kubeCfg&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">kubeletconfiginternal&lt;/span>.&lt;span style="color:#a6e22e">KubeletConfiguration&lt;/span>, &lt;span style="color:#a6e22e">tlsOptions&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">server&lt;/span>.&lt;span style="color:#a6e22e">TLSOptions&lt;/span>, &lt;span style="color:#a6e22e">auth&lt;/span> &lt;span style="color:#a6e22e">server&lt;/span>.&lt;span style="color:#a6e22e">AuthInterface&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ListenAndServeReadOnly&lt;/span>(&lt;span style="color:#a6e22e">address&lt;/span> &lt;span style="color:#a6e22e">net&lt;/span>.&lt;span style="color:#a6e22e">IP&lt;/span>, &lt;span style="color:#a6e22e">port&lt;/span> &lt;span style="color:#66d9ef">uint&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ListenAndServePodResources&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Run&lt;/span>(&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#a6e22e">kubetypes&lt;/span>.&lt;span style="color:#a6e22e">PodUpdate&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">RunOnce&lt;/span>(&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#a6e22e">kubetypes&lt;/span>.&lt;span style="color:#a6e22e">PodUpdate&lt;/span>) ([]&lt;span style="color:#a6e22e">RunPodResult&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="synchandler-接口">SyncHandler 接口&lt;a class="td-heading-self-link" href="#synchandler-%e6%8e%a5%e5%8f%a3" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>SyncHandler 接口中包含了可以对 Pod 的各种处理，已被 kubelet 结构体实现，用在 syncLoop 中。这个接口中的方法，基本都是在 Bootstrap 接口中的 &lt;code>Run()&lt;/code> 方法中调用的。&lt;/p>
&lt;p>源码：&lt;code>pkg/kubelet/kubelet.go&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">SyncHandler&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">HandlePodAdditions&lt;/span>(&lt;span style="color:#a6e22e">pods&lt;/span> []&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">v1&lt;/span>.&lt;span style="color:#a6e22e">Pod&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">HandlePodUpdates&lt;/span>(&lt;span style="color:#a6e22e">pods&lt;/span> []&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">v1&lt;/span>.&lt;span style="color:#a6e22e">Pod&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">HandlePodRemoves&lt;/span>(&lt;span style="color:#a6e22e">pods&lt;/span> []&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">v1&lt;/span>.&lt;span style="color:#a6e22e">Pod&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">HandlePodReconcile&lt;/span>(&lt;span style="color:#a6e22e">pods&lt;/span> []&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">v1&lt;/span>.&lt;span style="color:#a6e22e">Pod&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">HandlePodSyncs&lt;/span>(&lt;span style="color:#a6e22e">pods&lt;/span> []&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">v1&lt;/span>.&lt;span style="color:#a6e22e">Pod&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">HandlePodCleanups&lt;/span>() &lt;span style="color:#66d9ef">error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="podworkers-接口">PodWorkers 接口&lt;a class="td-heading-self-link" href="#podworkers-%e6%8e%a5%e5%8f%a3" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>详见《[PodWorker 模块](/docs/10.云原生/2.3.Kubernetes%20 容器编排系统/Kubernetes%20 开发/源码解析/Kubelet%20 源码/PodWorker%20 模块.md 源码/PodWorker 模块.md)》，PodWorkders 用于处理 Pod&lt;/p>
&lt;h2 id="runtime-接口">Runtime 接口&lt;a class="td-heading-self-link" href="#runtime-%e6%8e%a5%e5%8f%a3" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;code>Runtime interface{}&lt;/code> 定义了容器 Runtime 应该实现的方法。该接口的实现必须是线程安全的。&lt;/p>
&lt;p>源码：&lt;code>pkg/kubelet/container/runtime.go&lt;/code>-&lt;code>type Runtime interface{}&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Runtime&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="接口内的方法">接口内的方法&lt;a class="td-heading-self-link" href="#%e6%8e%a5%e5%8f%a3%e5%86%85%e7%9a%84%e6%96%b9%e6%b3%95" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>&lt;strong>Type() string&lt;/strong> # 返回容器运行时的类型
&lt;strong>Version() (Version, error)&lt;/strong> # 返回容器运行时的版本信息
// APIVersion returns the cached API version information of the container
// runtime. Implementation is expected to update this cache periodically.
// This may be different from the runtime engine&amp;rsquo;s version.
// TODO(random-liu): We should fold this into Version()
APIVersion() (Version, error)
// Status returns the status of the runtime. An error is returned if the Status
// function itself fails, nil otherwise.
Status() (*RuntimeStatus, error)
// GetPods returns a list of containers grouped by pods. The boolean parameter
// specifies whether the runtime returns all containers including those already
// exited and dead containers (used for garbage collection).
GetPods(all bool) ([]*Pod, error)
// GarbageCollect removes dead containers using the specified container gc policy
// If allSourcesReady is not true, it means that kubelet doesn&amp;rsquo;t have the
// complete list of pods from all available sources (e.g., apiserver, http,
// file). In this case, garbage collector should refrain itself from aggressive
// behavior such as removing all containers of unrecognized pods (yet).
// If evictNonDeletedPods is set to true, containers and sandboxes belonging to pods
// that are terminated, but not deleted will be evicted. Otherwise, only deleted pods
// will be GC&amp;rsquo;d.
// TODO: Revisit this method and make it cleaner.
GarbageCollect(gcPolicy GCPolicy, allSourcesReady bool, evictNonDeletedPods bool) error
// SyncPod syncs the running pod into the desired pod.
SyncPod(pod &lt;em>v1.Pod, podStatus&lt;/em>PodStatus, pullSecrets []v1.Secret, backOff &lt;em>flowcontrol.Backoff) PodSyncResult
// KillPod kills all the containers of a pod. Pod may be nil, running pod must not be.
// TODO(random-liu): Return PodSyncResult in KillPod.
// gracePeriodOverride if specified allows the caller to override the pod default grace period.
// only hard kill paths are allowed to specify a gracePeriodOverride in the kubelet in order to not corrupt user data.
// it is useful when doing SIGKILL for hard eviction scenarios, or max grace period during soft eviction scenarios.
KillPod(pod&lt;/em>v1.Pod, runningPod Pod, gracePeriodOverride *int64) error
// GetPodStatus retrieves the status of the pod, including the
// information of all containers in the pod that are visible in Runtime.
GetPodStatus(uid types.UID, name, namespace string) (*PodStatus, error)
// TODO(vmarmol): Unify pod and containerID args.
// GetContainerLogs returns logs of a specific container. By
// default, it returns a snapshot of the container log. Set &amp;lsquo;follow&amp;rsquo; to true to
// stream the log. Set &amp;lsquo;follow&amp;rsquo; to false and specify the number of lines (e.g.
// &amp;ldquo;100&amp;rdquo; or &amp;ldquo;all&amp;rdquo;) to tail the log.
GetContainerLogs(ctx context.Context, pod &lt;em>v1.Pod, containerID ContainerID, logOptions&lt;/em>v1.PodLogOptions, stdout, stderr io.Writer) (err error)
// DeleteContainer deletes a container. If the container is still running, an error is returned.
DeleteContainer(containerID ContainerID) error
// ImageService provides methods to image-related methods.
ImageService
// UpdatePodCIDR sends a new podCIDR to the runtime.
// This method just proxies a new runtimeConfig with the updated
// CIDR value down to the runtime shim.
UpdatePodCIDR(podCIDR string) error&lt;/p>
&lt;h1 id="cri">CRI&lt;a class="td-heading-self-link" href="#cri" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>在 &lt;a href="https://github.com/kubernetes/cri-api">kubernetes/cri-api&lt;/a> 项目的 &lt;code>pkg/apis/services.go&lt;/code> 中，有一个 &lt;code>RuntimeService interface{}&lt;/code> 就是用来对接 CRI 的，这个接口应该由对应的容器运行时实现，同样，接口中的所有方法都必须是线程安全的。&lt;/p>
&lt;p>我们在 &lt;a href="https://github.com/containerd/containerd">Containerd&lt;/a> 的代码中，这个 &lt;code>integration/remote/remote_runtime.go&lt;/code> -&lt;code>RuntimeService struct{}&lt;/code>就是实现了 CRI 的结构体&lt;/p>
&lt;p>在 Kubelet 的代码中，&lt;code>RuntimeService Interface{}&lt;/code> 被多个地方使用&lt;/p>
&lt;ul>
&lt;li>&lt;code>pkg/kubelet/kubelet.go&lt;/code> - &lt;code>Dependencies.RemoeRuntimeService&lt;/code>&lt;/li>
&lt;li>&lt;code>pkg/kubelet/kuberuntime/kuberuntime_manager.go&lt;/code> - &lt;code>kubeGenericRuntimeManager.runtimeService&lt;/code>&lt;/li>
&lt;li>等等&amp;hellip;&amp;hellip;&lt;/li>
&lt;/ul>
&lt;p>这个结构体中的属性，通常都是由 &lt;code>--container-runtime-endpoint&lt;/code> 标志设置的，并在 PreInitRuntimeService() 函数中将指定的 CRI 赋值给 Dependencies.RemoteRuntimeService，以供后续使用。&lt;/p>
&lt;p>这是 1.19 版本的
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/bdgcor/1645808524921-be2fa89e-e00b-48c1-961a-c434ba2d05c8.png" alt="image.png">
这是 1.24 版本的
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/bdgcor/1645808546385-68536403-49d8-4d7f-b86e-97dd7a6efec3.png" alt="image.png">&lt;/p></description></item><item><title>Docs: Kubelet 源码</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/Kubernetes-%E5%BC%80%E5%8F%91/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/Kubelet-%E6%BA%90%E7%A0%81/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/Kubernetes-%E5%BC%80%E5%8F%91/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/Kubelet-%E6%BA%90%E7%A0%81/</guid><description/></item><item><title>Docs: Leader 选举</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/Kubernetes-%E5%BC%80%E5%8F%91/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/Leader-%E9%80%89%E4%B8%BE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/Kubernetes-%E5%BC%80%E5%8F%91/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/Leader-%E9%80%89%E4%B8%BE/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/EPKShekTZWe04H1X2E21LQ">原文链接&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>领导者选举要解决什么问题呢？首先，一个分布式集群中运行了多个组件，每个组件负责自身重要的功能。其中有一个组件因为某些原因而退出，此时整个集群的运作都受到了影响。&lt;strong>领导者选举就是要保证每个组件的高可用性&lt;/strong>，例如，在 Kubernetes 集群中，允许同时运行多个 kube-scheduler 节点，其中正常工作的只有一个 kube-scheduler 节点（即领导者节点），其他 kube-scheduler 节点为候选（Candidate）节点并处于阻塞状态。在领导者节点因某些原因而退出后，其他候选节点则通过领导者选举机制竞选，有一个候选节点成为领导者节点并接替之前领导者节点的工作。领导者选举机制如下图所示。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/d05e3808-6527-434a-b7bb-bdf3bc826284/640" alt="">&lt;/p>
&lt;h2 id="领导者选举机制">领导者选举机制&lt;a class="td-heading-self-link" href="#%e9%a2%86%e5%af%bc%e8%80%85%e9%80%89%e4%b8%be%e6%9c%ba%e5%88%b6" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>领导者选举机制是&lt;strong>分布式锁&lt;/strong>机制的一种，实现分布式锁有多种方式，例如可通过 ZooKeeper、Redis、Etcd 等存储服务。Kubernetes 系统依赖于 Etcd 做存储服务，系统中其他组件也是通过 Etcd 实现分布式锁的。kube-scheduler 组件在 Etcd 上实现分布式锁的原理如下。&lt;/p>
&lt;ul>
&lt;li>分布式锁依赖于 Etcd 上的一个 key，key 的操作都是**原子操作，**将 key 作为分布式锁，它有两种状态——存在和不存在。&lt;/li>
&lt;li>key（分布式锁）不存在时：多节点中的一个节点成功创建该 key（获得锁）并写入自身节点的信息，获得锁的节点被称为领导者节点。领导者节点会定时更新（续约）该 key 的信息。&lt;/li>
&lt;li>key（分布式锁）存在时：其他节点处于阻塞状态并定时获取锁，这些节点被称为候选节点。候选节点定时获取锁的过程如下：定时获取 key 的数据，验证数据中领导者租约是否到期，如果未到期则不能抢占它，如果已到期则更新 key 并写入自身节点的信息，更新成功则成为领导者节点。&lt;/li>
&lt;/ul>
&lt;h1 id="资源锁">资源锁&lt;a class="td-heading-self-link" href="#%e8%b5%84%e6%ba%90%e9%94%81" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>Kubernetes 支持 3 种资源锁，资源锁的意思是基于 Etcd 集群的 key 在依赖于 Kubernetes 的某种资源下创建的分布式锁。3 种资源锁介绍如下：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>EndpointsResourceLock&lt;/strong>：依赖于 Endpoints 资源，默认资源锁为该类型。&lt;/li>
&lt;li>&lt;strong>ConfigMapsResourceLock&lt;/strong>：依赖于 Configmaps 资源。&lt;/li>
&lt;li>&lt;strong>LeasesResourceLock&lt;/strong>：依赖于 Leases 资源。&lt;/li>
&lt;/ul>
&lt;p>可通过 &lt;code>--leader-elect-resource-lock&lt;/code> 参数指定使用哪种资源锁，如不指定则&lt;code>EndpointsResourceLock&lt;/code> 为默认资源锁。它的 key（分布式锁）存在于 Etcd 集群的 &lt;code>/registry/services/endpoints/kube-system/kube-scheduler&lt;/code> 中。该 key 中存储的是竞选为领导者节点的信息，它通过 &lt;code>LeaderElectionRecord&lt;/code> 结构体进行描述：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span> &lt;span style="color:#a6e22e">源码路径&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">：&lt;/span>&lt;span style="color:#a6e22e">vendor&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">k8s&lt;/span>.&lt;span style="color:#a6e22e">io&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">client&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#66d9ef">go&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">tools&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">leaderelection&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">resourcelock&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#66d9ef">interface&lt;/span>.&lt;span style="color:#66d9ef">go&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">LeaderElectionRecord&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">HolderIdentity&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">LeaseDurationSeconds&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">AcquireTime&lt;/span> &lt;span style="color:#a6e22e">metav1&lt;/span>.&lt;span style="color:#a6e22e">Time&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">RenewTime&lt;/span> &lt;span style="color:#a6e22e">metav1&lt;/span>.&lt;span style="color:#a6e22e">Time&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">LeaderTransitions&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;strong>HolderIdentity&lt;/strong>：领导者身份标识，通常为 Hostname_&amp;lt;hash 值&amp;gt;。&lt;/li>
&lt;li>&lt;strong>LeaseDurationSeconds&lt;/strong>：领导者租约的时长。&lt;/li>
&lt;li>&lt;strong>AcquireTime&lt;/strong>：领导者获得锁的时间。&lt;/li>
&lt;li>&lt;strong>RenewTime&lt;/strong>：领导者续租的时间。&lt;/li>
&lt;li>&lt;strong>LeaderTransitions&lt;/strong>：领导者选举切换的次数。&lt;/li>
&lt;/ul>
&lt;p>每种资源锁实现了对 key（资源锁）的操作方法，它的接口定义如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span> &lt;span style="color:#a6e22e">代码路径&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">：&lt;/span>&lt;span style="color:#a6e22e">vendor&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">k8s&lt;/span>.&lt;span style="color:#a6e22e">io&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">client&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#66d9ef">go&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">tools&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">leaderelection&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">resourcelock&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#66d9ef">interface&lt;/span>.&lt;span style="color:#66d9ef">go&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Interface&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Get&lt;/span>() (&lt;span style="color:#a6e22e">LeaderElectionRecord&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Create&lt;/span>(&lt;span style="color:#a6e22e">ler&lt;/span> &lt;span style="color:#a6e22e">LeaderElectionRecord&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Update&lt;/span>(&lt;span style="color:#a6e22e">ler&lt;/span> &lt;span style="color:#a6e22e">LeaderElectionRecord&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">RecordEvent&lt;/span>(&lt;span style="color:#66d9ef">string&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Identity&lt;/span>() &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Describe&lt;/span>() &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Get 方法用于获取资源锁的所有信息，Create 方法用于创建资源锁，Update 方法用于更新资源锁信息，RecordEvent 方法通过 EventBroadcaster 事件管理器记录事件，Identity 方法用于获取领导者身份标识，Describe 方法用于获取资源锁的信息。&lt;/p>
&lt;h1 id="领导者选举过程">领导者选举过程&lt;a class="td-heading-self-link" href="#%e9%a2%86%e5%af%bc%e8%80%85%e9%80%89%e4%b8%be%e8%bf%87%e7%a8%8b" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>领导者选举过程如下图所示：&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/d05e3808-6527-434a-b7bb-bdf3bc826284/640" alt="">&lt;/p>
&lt;p>领导者选举过程&lt;/p>
&lt;p>&lt;code>le.acquire&lt;/code> 函数尝试从 Etcd 中获取资源锁，领导者节点获取到资源锁后会执行 kube-scheduler 的主要逻辑（即 &lt;code>le.config.Callbacks.OnStartedLeading&lt;/code> 回调函数），并通过 &lt;code>le.renew&lt;/code> 函数定时（默认值为 2 秒）对资源锁续约。候选节点获取不到资源锁，它不会退出并定时（默认值为 2 秒）尝试获取资源锁，直到成功为止。代码示例如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span> &lt;span style="color:#a6e22e">代码路径&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">：&lt;/span>&lt;span style="color:#a6e22e">vendor&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">k8s&lt;/span>.&lt;span style="color:#a6e22e">io&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">client&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#66d9ef">go&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">tools&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">leaderelection&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">leaderelection&lt;/span>.&lt;span style="color:#66d9ef">go&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">le&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">LeaderElector&lt;/span>) &lt;span style="color:#a6e22e">Run&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">runtime&lt;/span>.&lt;span style="color:#a6e22e">HandleCrash&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">le&lt;/span>.&lt;span style="color:#a6e22e">config&lt;/span>.&lt;span style="color:#a6e22e">Callbacks&lt;/span>.&lt;span style="color:#a6e22e">OnStoppedLeading&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">le&lt;/span>.&lt;span style="color:#a6e22e">acquire&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#a6e22e">le&lt;/span>.&lt;span style="color:#a6e22e">config&lt;/span>.&lt;span style="color:#a6e22e">Callbacks&lt;/span>.&lt;span style="color:#a6e22e">OnStartedLeading&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">le&lt;/span>.&lt;span style="color:#a6e22e">renew&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;ol>
&lt;li>资源锁获取过程&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">le&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">LeaderElector&lt;/span>) &lt;span style="color:#a6e22e">acquire&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">wait&lt;/span>.&lt;span style="color:#a6e22e">JitterUntil&lt;/span>(&lt;span style="color:#66d9ef">func&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">succeeded&lt;/span> = &lt;span style="color:#a6e22e">le&lt;/span>.&lt;span style="color:#a6e22e">tryAcquireOrRenew&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">le&lt;/span>.&lt;span style="color:#a6e22e">maybeReportTransition&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">succeeded&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">cancel&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }, &lt;span style="color:#a6e22e">le&lt;/span>.&lt;span style="color:#a6e22e">config&lt;/span>.&lt;span style="color:#a6e22e">RetryPeriod&lt;/span>, &lt;span style="color:#a6e22e">JitterFactor&lt;/span>, &lt;span style="color:#66d9ef">true&lt;/span>, &lt;span style="color:#a6e22e">ctx&lt;/span>.&lt;span style="color:#a6e22e">Done&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">succeeded&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>获取资源锁的过程通过 &lt;code>wait.JitterUntil&lt;/code> 定时器定时执行，它接收一个 func 匿名函数和一个 stopCh Chan，内部会定时调用匿名函数，只有当 stopCh 关闭时，该定时器才会停止并退出。&lt;/p>
&lt;p>执行 &lt;code>le.tryAcquireOrRenew&lt;/code> 函数来获取资源锁。如果其获取资源锁失败，会通过 return 等待下一次定时获取资源锁。如果其获取资源锁成功，则说明当前节点可以成为领导者节点，退出 acquire 函数并返回 true。&lt;code>le.tryAcquireOrRenew&lt;/code> 代码示例如下。&lt;/p>
&lt;p>（1）首先，通过 &lt;code>le.config.Lock.Get&lt;/code> 函数获取资源锁，当资源锁不存在时，当前节点创建该 key（获取锁）并写入自身节点的信息，创建成功则当前节点成为领导者节点并返回 true。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">oldLeaderElectionRecord&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">le&lt;/span>.&lt;span style="color:#a6e22e">config&lt;/span>.&lt;span style="color:#a6e22e">Lock&lt;/span>.&lt;span style="color:#a6e22e">Get&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">IsNotFound&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">le&lt;/span>.&lt;span style="color:#a6e22e">config&lt;/span>.&lt;span style="color:#a6e22e">Lock&lt;/span>.&lt;span style="color:#a6e22e">Create&lt;/span>(&lt;span style="color:#a6e22e">leaderElectionRecord&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">le&lt;/span>.&lt;span style="color:#a6e22e">observedRecord&lt;/span> = &lt;span style="color:#a6e22e">leaderElectionRecord&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">le&lt;/span>.&lt;span style="color:#a6e22e">observedTime&lt;/span> = &lt;span style="color:#a6e22e">le&lt;/span>.&lt;span style="color:#a6e22e">clock&lt;/span>.&lt;span style="color:#a6e22e">Now&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>（2）当资源锁存在时，更新本地缓存的租约信息。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">reflect&lt;/span>.&lt;span style="color:#a6e22e">DeepEqual&lt;/span>(&lt;span style="color:#a6e22e">le&lt;/span>.&lt;span style="color:#a6e22e">observedRecord&lt;/span>, &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">oldLeaderElectionRecord&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">le&lt;/span>.&lt;span style="color:#a6e22e">observedRecord&lt;/span> = &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">oldLeaderElectionRecord&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">le&lt;/span>.&lt;span style="color:#a6e22e">observedTime&lt;/span> = &lt;span style="color:#a6e22e">le&lt;/span>.&lt;span style="color:#a6e22e">clock&lt;/span>.&lt;span style="color:#a6e22e">Now&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>（3）候选节点会验证领导者节点的租约是否到期，如果尚未到期，暂时还不能抢占并返回 false。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> len(&lt;span style="color:#a6e22e">oldLeaderElectionRecord&lt;/span>.&lt;span style="color:#a6e22e">HolderIdentity&lt;/span>) &amp;gt; &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">le&lt;/span>.&lt;span style="color:#a6e22e">observedTime&lt;/span>.&lt;span style="color:#a6e22e">Add&lt;/span>(&lt;span style="color:#a6e22e">le&lt;/span>.&lt;span style="color:#a6e22e">config&lt;/span>.&lt;span style="color:#a6e22e">LeaseDuration&lt;/span>).&lt;span style="color:#a6e22e">After&lt;/span>(&lt;span style="color:#a6e22e">now&lt;/span>.&lt;span style="color:#a6e22e">Time&lt;/span>) &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>!&lt;span style="color:#a6e22e">le&lt;/span>.&lt;span style="color:#a6e22e">IsLeader&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>（4）如果是领导者节点，那么 AcquireTime（资源锁获得时间）和 LeaderTransitions（领导者进行切换的次数）字段保持不变。如果是候选节点，则说明领导者节点的租约到期，给 LeaderTransitions 字段加 1 并抢占资源锁。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">le&lt;/span>.&lt;span style="color:#a6e22e">IsLeader&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">leaderElectionRecord&lt;/span>.&lt;span style="color:#a6e22e">AcquireTime&lt;/span> = &lt;span style="color:#a6e22e">oldLeaderElectionRecord&lt;/span>.&lt;span style="color:#a6e22e">AcquireTime&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">leaderElectionRecord&lt;/span>.&lt;span style="color:#a6e22e">LeaderTransitions&lt;/span> = &lt;span style="color:#a6e22e">oldLeaderElectionRecord&lt;/span>.&lt;span style="color:#a6e22e">LeaderTransitions&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">leaderElectionRecord&lt;/span>.&lt;span style="color:#a6e22e">LeaderTransitions&lt;/span> = &lt;span style="color:#a6e22e">oldLeaderElectionRecord&lt;/span>.&lt;span style="color:#a6e22e">LeaderTransitions&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>（5）通过 &lt;code>le.config.Lock.Update&lt;/code> 函数尝试去更新租约记录，若更新成功，函数返回 true。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">le&lt;/span>.&lt;span style="color:#a6e22e">config&lt;/span>.&lt;span style="color:#a6e22e">Lock&lt;/span>.&lt;span style="color:#a6e22e">Update&lt;/span>(&lt;span style="color:#a6e22e">leaderElectionRecord&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Failed to update lock: %v&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;ol start="2">
&lt;li>领导者节点定时更新租约过程&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>在领导者节点获取资源锁以后，会定时（默认值为 2 秒）循环更新租约信息，以保持长久的领导者身份。若因网络超时而导致租约信息更新失败，则说明被候选节点抢占了领导者身份，当前节点会退出进程。代码示例如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span> &lt;span style="color:#a6e22e">代码路径&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">：&lt;/span>&lt;span style="color:#a6e22e">vendor&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">k8s&lt;/span>.&lt;span style="color:#a6e22e">io&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">client&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#66d9ef">go&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">tools&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">leaderelection&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">leaderelection&lt;/span>.&lt;span style="color:#66d9ef">go&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">le&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">LeaderElector&lt;/span>) &lt;span style="color:#a6e22e">renew&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">wait&lt;/span>.&lt;span style="color:#a6e22e">Until&lt;/span>(&lt;span style="color:#66d9ef">func&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">wait&lt;/span>.&lt;span style="color:#a6e22e">PollImmediateUntil&lt;/span>(&lt;span style="color:#a6e22e">le&lt;/span>.&lt;span style="color:#a6e22e">config&lt;/span>.&lt;span style="color:#a6e22e">RetryPeriod&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>() (&lt;span style="color:#66d9ef">bool&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">done&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make(&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> close(&lt;span style="color:#a6e22e">done&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">done&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#a6e22e">le&lt;/span>.&lt;span style="color:#a6e22e">tryAcquireOrRenew&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }, &lt;span style="color:#a6e22e">timeoutCtx&lt;/span>.&lt;span style="color:#a6e22e">Done&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">V&lt;/span>(&lt;span style="color:#ae81ff">5&lt;/span>).&lt;span style="color:#a6e22e">Infof&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;successfully renewed lease %v&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">desc&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">cancel&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }, &lt;span style="color:#a6e22e">le&lt;/span>.&lt;span style="color:#a6e22e">config&lt;/span>.&lt;span style="color:#a6e22e">RetryPeriod&lt;/span>, &lt;span style="color:#a6e22e">ctx&lt;/span>.&lt;span style="color:#a6e22e">Done&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">le&lt;/span>.&lt;span style="color:#a6e22e">config&lt;/span>.&lt;span style="color:#a6e22e">ReleaseOnCancel&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">le&lt;/span>.&lt;span style="color:#a6e22e">release&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>领导者节点续约的过程通过 &lt;code>wait.PollImmediateUntil&lt;/code> 定时器定时执行，它接收一个 func 匿名函数（条件函数）和一个 stopCh，内部会定时调用条件函数，当条件函数返回 true 或 stopCh 关闭时，该定时器才会停止并退出。&lt;/p>
&lt;p>执行 &lt;code>le.tryAcquireOrRenew&lt;/code> 函数来实现领导者节点的续约，其原理与资源锁获取过程相同。le.tryAcquireOrRenew 函数返回 true 说明续约成功，并进入下一个定时续约；返回 false 则退出并执行 le.release 函数且释放资源锁。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/d05e3808-6527-434a-b7bb-bdf3bc826284/640" alt="">
本文授权转载于：Kubernetes 源码剖析，作者：郑东旭&lt;/p></description></item><item><title>Docs: 源码解析</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/Kubernetes-%E5%BC%80%E5%8F%91/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/Kubernetes-%E5%BC%80%E5%8F%91/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/kubernetes/kubernetes">GitHub 项目，kubernetes/kubernetes&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/kubernetes/design-proposals-archive">GitHub 项目，kubernetes/design-proposals-archive&lt;/a>(K8S 早期设计方案)&lt;/li>
&lt;li>&lt;a href="https://github.com/kubernetes/enhancements/">GitHub 项目，kubernetes/enhancements&lt;/a>(K8S 当前设计方案)&lt;/li>
&lt;li>&lt;a href="https://blog.tianfeiyu.com/source-code-reading-notes/">田飞雨博客&lt;/a>-这位大佬阅读了大部分 k8s 代码，并在博客中写了笔记&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="kubernetes-源码目录结构">kubernetes 源码目录结构&lt;a class="td-heading-self-link" href="#kubernetes-%e6%ba%90%e7%a0%81%e7%9b%ae%e5%bd%95%e7%bb%93%e6%9e%84" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>更新日期：2022 年 2 月 23 日
Kubernetes 的源码目录随着更新迭代，也在不断变化中&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ tree -L &lt;span style="color:#ae81ff">1&lt;/span> -p
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> BUILD.bazel
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> CHANGELOG
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> CHANGELOG.md
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> CONTRIBUTING.md
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> LICENSE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> LICENSES
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> Makefile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> Makefile.generated_files
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> OWNERS
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> OWNERS_ALIASES
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> README.md
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> SECURITY_CONTACTS
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> SUPPORT.md
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> WORKSPACE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> api
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> build
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> cluster
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> cmd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> code-of-conduct.md
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> docs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> go.mod
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> go.sum
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> hack
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> logo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> pkg
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> plugin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> staging
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> test
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> third_party
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> translations
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> vendor
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Kubernetes 组件的代码运行逻辑集中在 cmd、pkg 这几个目录内，cmd 是通常都是程序运行的入口，然后调用 pkg 里的代码&lt;/p>
&lt;h2 id="cmd">cmd&lt;a class="td-heading-self-link" href="#cmd" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ tree -L &lt;span style="color:#ae81ff">1&lt;/span> -p cmd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cmd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> BUILD
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> OWNERS
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> clicheck
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> cloud-controller-manager
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> controller-manager
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> dependencycheck
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> gendocs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> genkubedocs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> genman
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> genswaggertypedocs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> genutils
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> genyaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> importverifier
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> kube-apiserver
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> kube-controller-manager
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> kube-proxy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> kube-scheduler
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> kubeadm
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> kubectl
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> kubelet
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> kubemark
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> linkcheck
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> preferredimports
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> verifydependencies
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="pkg">pkg&lt;a class="td-heading-self-link" href="#pkg" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ tree -L &lt;span style="color:#ae81ff">1&lt;/span> -p pkg
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pkg
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> BUILD
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>-rwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> OWNERS
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> api
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> apis
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> auth
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> capabilities
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> client
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> cloudprovider
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> controller
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> credentialprovider
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> features
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> fieldpath
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> generated
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> kubeapiserver
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> kubectl
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> kubelet
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> kubemark
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> master
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> printers
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> probe
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> proxy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> quota
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> registry
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> routes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> scheduler
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> security
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> securitycontext
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> serviceaccount
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> ssh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> util
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> volume
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> watch
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── &lt;span style="color:#f92672">[&lt;/span>drwxrwxrwx&lt;span style="color:#f92672">]&lt;/span> windows
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="staging分级阶段">staging(分级、阶段)&lt;a class="td-heading-self-link" href="#staging%e5%88%86%e7%ba%a7%e9%98%b6%e6%ae%b5" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/kubernetes/kubernetes/tree/master/staging">GitHub&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h3 id="背景">背景&lt;a class="td-heading-self-link" href="#%e8%83%8c%e6%99%af" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>曾经的 kubernetes 源码都在一个顶级仓库中 ,即 &lt;a href="https://github.com/kubernetes/kubernetes">k8s.io/kubernetes&lt;/a>(也就是 Github 的&amp;lt;https://github.com/kubernetes/kubernetes)。但是随着项目的发展，功能越来越多，代码量也就越来越大，并且** Kubernetes 的各种包和规范被越来越多的项目引用**，为了避免交叉依赖，所以，从 1.4 版本开始，就出现了 staging 目录，并把这些经常被引用的库单独提取出来，放在一个顶层仓库中，而 staging 则是这些顶层仓库的来源，会定期将这里的代码发布到对应的顶层仓库中。
在 1.4 版本时，该目录仅仅包含了一个 client-go 的代码，并且把 client-go 移出 kubernetes 仓库，成立了一个单独的仓库(&lt;a href="https://github.com/kubernetes/client-go">https://github.com/kubernetes/client-go&lt;/a>)，并定期同步代码。随后，就发展成现在这样了~~~~&lt;/p>
&lt;h3 id="详解">详解&lt;a class="td-heading-self-link" href="#%e8%af%a6%e8%a7%a3" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>staging 包含各种 kubernetes 包的代码，并定期将其发布到对应的顶级 k8s.io 库中。&lt;/p>
&lt;p>比如 controller-manager 功能的代码，就会从这里同步到 k8s.io/controller-manager 仓库中、kubelet 功能的代码会从这里同步到 k8s.io/kubelet 仓库中，以此类推，随着时间的发展，该目录下的内容将会越来越多，并且 kubernetes 的代码也将会被拆分成各个顶级仓库。&lt;/p>
&lt;p>所谓 k8s.io/XXXX，其实就是 &lt;a href="https://github.com/kubernetes/XXXX">https://github.com/kubernetes/XXXX&lt;/a>，也就是 github 的 kubernetes 项目下的顶层仓库。&lt;/p>
&lt;p>这些顶级仓库包括(随着时间的发展，还会变化)：&lt;/p>
&lt;ul>
&lt;li>&lt;code>[k8s.io/api](https://github.com/kubernetes/api)&lt;/code>&lt;/li>
&lt;li>&lt;code>[k8s.io/apiextensions-apiserver](https://github.com/kubernetes/apiextensions-apiserver)&lt;/code>&lt;/li>
&lt;li>&lt;code>[k8s.io/apimachinery](https://github.com/kubernetes/apimachinery)&lt;/code>&lt;/li>
&lt;li>&lt;code>[k8s.io/apiserver](https://github.com/kubernetes/apiserver)&lt;/code>&lt;/li>
&lt;li>&lt;code>[k8s.io/cli-runtime](https://github.com/kubernetes/cli-runtime)&lt;/code>&lt;/li>
&lt;li>&lt;code>[k8s.io/client-go](https://github.com/kubernetes/client-go)&lt;/code>&lt;/li>
&lt;li>&lt;code>[k8s.io/cloud-provider](https://github.com/kubernetes/cloud-provider)&lt;/code>&lt;/li>
&lt;li>&lt;code>[k8s.io/cluster-bootstrap](https://github.com/kubernetes/cluster-bootstrap)&lt;/code>&lt;/li>
&lt;li>&lt;code>[k8s.io/code-generator](https://github.com/kubernetes/code-generator)&lt;/code>&lt;/li>
&lt;li>&lt;code>[k8s.io/component-base](https://github.com/kubernetes/component-base)&lt;/code>&lt;/li>
&lt;li>&lt;code>[k8s.io/controller-manager](https://github.com/kubernetes/controller-manager)&lt;/code>&lt;/li>
&lt;li>&lt;code>[k8s.io/cri-api](https://github.com/kubernetes/cri-api)&lt;/code>&lt;/li>
&lt;li>&lt;code>[k8s.io/csi-api](https://github.com/kubernetes/csi-api)&lt;/code>&lt;/li>
&lt;li>&lt;code>[k8s.io/csi-translation-lib](https://github.com/kubernetes/csi-translation-lib)&lt;/code>&lt;/li>
&lt;li>&lt;code>[k8s.io/kube-aggregator](https://github.com/kubernetes/kube-aggregator)&lt;/code>&lt;/li>
&lt;li>&lt;code>[k8s.io/kube-controller-manager](https://github.com/kubernetes/kube-controller-manager)&lt;/code>&lt;/li>
&lt;li>&lt;code>[k8s.io/kube-proxy](https://github.com/kubernetes/kube-proxy)&lt;/code>&lt;/li>
&lt;li>&lt;code>[k8s.io/kube-scheduler](https://github.com/kubernetes/kube-scheduler)&lt;/code>&lt;/li>
&lt;li>&lt;code>[k8s.io/kubectl](https://github.com/kubernetes/kubectl)&lt;/code>&lt;/li>
&lt;li>&lt;code>[k8s.io/kubelet](https://github.com/kubernetes/kubelet)&lt;/code>&lt;/li>
&lt;li>&lt;code>[k8s.io/legacy-cloud-providers](https://github.com/kubernetes/legacy-cloud-providers)&lt;/code>&lt;/li>
&lt;li>&lt;code>[k8s.io/metrics](https://github.com/kubernetes/metrics)&lt;/code>&lt;/li>
&lt;li>&lt;code>[k8s.io/mount-utils](https://github.com/kubernetes/mount-utils)&lt;/code>&lt;/li>
&lt;li>&lt;code>[k8s.io/sample-apiserver](https://github.com/kubernetes/sample-apiserver)&lt;/code>&lt;/li>
&lt;li>&lt;code>[k8s.io/sample-cli-plugin](https://github.com/kubernetes/sample-cli-plugin)&lt;/code>&lt;/li>
&lt;li>&lt;code>[k8s.io/sample-controller](https://github.com/kubernetes/sample-controller)&lt;/code>&lt;/li>
&lt;/ul>
&lt;h1 id="源码解析文章">源码解析文章&lt;a class="td-heading-self-link" href="#%e6%ba%90%e7%a0%81%e8%a7%a3%e6%9e%90%e6%96%87%e7%ab%a0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;a href="https://mp.weixin.qq.com/s/L-CQhYzxqxOoy9xYp6-JMA">公众号-k8s 技术圈，Kubernetes Pod 删除操作源码解析&lt;/a>&lt;/p></description></item></channel></rss>