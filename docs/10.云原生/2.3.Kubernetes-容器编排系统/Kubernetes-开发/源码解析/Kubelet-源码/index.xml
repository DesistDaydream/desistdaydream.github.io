<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – Kubelet 源码</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/Kubernetes-%E5%BC%80%E5%8F%91/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/Kubelet-%E6%BA%90%E7%A0%81/</link><description>Recent content in Kubelet 源码 on 断念梦</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/Kubernetes-%E5%BC%80%E5%8F%91/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/Kubelet-%E6%BA%90%E7%A0%81/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: EvictionManager 模块</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/Kubernetes-%E5%BC%80%E5%8F%91/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/Kubelet-%E6%BA%90%E7%A0%81/EvictionManager-%E6%A8%A1%E5%9D%97/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/Kubernetes-%E5%BC%80%E5%8F%91/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/Kubelet-%E6%BA%90%E7%A0%81/EvictionManager-%E6%A8%A1%E5%9D%97/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/ehECtQiXSHLpCrH5vuBX_w">公众号-云原生实验室，Kubernetes 单机侧的驱逐策略总结&lt;/a>
&lt;ul>
&lt;li>本文转自 Edwardesire 的博客，原文：&lt;a href="https://edwardesire.com/posts/process-eviction-under-k8s/">&lt;strong>https://edwardesire.com/posts/process-eviction-under-k8s/&lt;/strong>&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>进程驱逐：当机器存在资源压力时，可能是由于有恶意程序在消耗系统资源，或者是 overcommit 导致。系统通过控制机器上的进程存活来减少单个程序对系统的整体影响。驱逐阶段最关键的就是选择合适的进程，通过最小代价来保证系统的稳定。在执行层面上可以分为两种驱逐方式：&lt;/p>
&lt;ul>
&lt;li>用户空间驱逐：通过守护进程之类的机制，触发式主动清理进程。&lt;/li>
&lt;li>内核空间驱逐：内核在无法分配内存时，通过 oom_killer 选择进程终止来释放资源。&lt;/li>
&lt;/ul>
&lt;p>本文从 k8s 出发，总结不同层次下的驱逐流程和进程选择策略。&lt;/p>
&lt;h2 id="kubelet-驱逐策略">Kubelet 驱逐策略&lt;/h2>
&lt;p>k8s 除了支持 API 发起的主动驱逐，还支持用户空间的 pod 驱逐（将资源大户的进程终止）。对于不可压缩资源：内存、disk（nodefs）、pid，kubelet 会监控相应的指标来触发 pod 驱逐。K8S 依据 pod 的资源消耗和优先级来驱逐 pod 来回收资源：&lt;/p>
&lt;ul>
&lt;li>如果 pod 资源使用量超过资源请求值，则优先驱逐&lt;/li>
&lt;li>依据 pod priority 驱逐&lt;/li>
&lt;li>pod 真实资源使用量越高则越优先驱逐&lt;/li>
&lt;/ul>
&lt;p>我们可以得出：&lt;/p>
&lt;ul>
&lt;li>当 BestEffort 和 Burstable pod 的资源使用量超过请求值时，会依据 pod  priority 和超过请求多少来判断驱逐顺序。也不会有特例的 pod 能够不被驱逐的风险。当 Guaranteed 和 Busrtable  pod 的使用量低于请求值时，基于 pod priority 确定驱逐顺序。&lt;/li>
&lt;/ul>
&lt;p>这一切的逻辑都在 kubelet 的 eviction manager 实现。&lt;/p>
&lt;h3 id="eviction-manager">Eviction manager&lt;/h3>
&lt;p>Manager 的接口定义包含主流程的启动函数以及提供给 kubelet 上报节点状态的：&lt;/p>
&lt;ul>
&lt;li>Start()：开始驱逐控制循环，获取监控数据，并判断资源是否到阈值，触发 pod 的驱逐，以及当节点出现压力时将本地的节点状态更新。&lt;/li>
&lt;li>IsUnderMemoryPressure()：判断节点是否达到内存限制压力，通过控制循环内更新的节点状态判断。&lt;/li>
&lt;li>IsUnderDiskPressure()：判断节点是否达到磁盘限制压力，通过控制循环内更新的节点状态判断。&lt;/li>
&lt;li>IsUnderPIDPressure()：判断节点是否达到 PID 限制压力，通过控制循环内更新的节点状态判断。&lt;/li>
&lt;/ul>
&lt;p>kubelet 在 tryUpdateNodeStatus 上报节点状态循环中，会调用上述方法判断节点的资源压力情况。&lt;/p>
&lt;p>kubelet 在初始化 evictionManager 之后会调用 evictionManager.Start() 启动驱逐，之后再同步节点状态时调用上述压力判断方法。除了实现 Manager 的接口外，还实现了在 pod 生命周期负责评估允许 pod 执行的 PodAdmitHandler 接口。evictionManager 主要是依据 pod 的性质判断是否能够在已经有资源压力的机器上创建容器。&lt;/p>
&lt;h3 id="驱逐控制循环">驱逐控制循环&lt;/h3>
&lt;h4 id="初始化阶段">初始化阶段&lt;/h4>
&lt;p>kubelet 主程解析配置并初始化 evictionManager，解析单机的资源阈值参数 ParseThresholdConfig()&lt;/p>
&lt;p>kubelet 以 signal 维度设定资源阈值，每个 signal 标识一种资源指标，定义资源的阈值和其他驱逐参数。比如 &lt;code>memory.available&lt;/code> 表示节点可用内存驱逐标识（memory.available = capacity - workingSet）。&lt;/p>
&lt;p>kubelet 通过下列参数确定资源 signal 属性，构建相应资源的阈值。&lt;/p>
&lt;ul>
&lt;li>&lt;code>--eviction-hard mapStringString&lt;/code>：资源驱逐硬下线，默认为：imagefs.available&amp;lt;15%,memory.available&amp;lt;100Mi,nodefs.available&amp;lt;10%&lt;/li>
&lt;li>&lt;code>--eviction-soft mapStringString&lt;/code>：资源驱逐的软下线，当触发时，pod 有优雅退出时间。&lt;/li>
&lt;li>&lt;code>--eviction-soft-grace-period mapStringString&lt;/code>：触发黄线时，pod 驱逐的优雅退出时间。&lt;/li>
&lt;li>&lt;code>--eviction-minimum-reclaim mapStringString&lt;/code>：资源的最小释放量。默认为 0。&lt;/li>
&lt;/ul>
&lt;p>其中，同一个资源的 eviction-soft 和 soft-grace-period 配置必须都存在，&lt;code>grace period must be specified for the soft eviction threshold&lt;/code>。&lt;/p>
&lt;p>通过解析配置项，设置各资源 signal 的阈值之后，kubelet 调用 evictionManager.Start() 驱动 evictionManager 工作。&lt;/p>
&lt;h4 id="evictionmanager-的启动">evictionManager 的启动&lt;/h4>
&lt;p>在启动控制循环之前，evictionManager 会增加对 cgroup 内存子系统监控的预处理。这个预处理通过 &lt;strong>cgroup notifier&lt;/strong> 的机制监听 mem cgroup 的使用情况，并且在控制循环中周期性更新 cgroup notifier 的阈值配置。&lt;/p>
&lt;h5 id="memorythresholdnotifier">MemoryThresholdNotifier&lt;/h5>
&lt;p>evictionManager 分别给 &lt;code>memory.available&lt;/code> 和 &lt;code>allocatableMemory.available&lt;/code> signal 配置 MemoryThresholdNotifier 的，监控的 cgroup 路径不同。&lt;code>allocatableMemory.available&lt;/code> 的 cgroupRoot 根目录，即节点上 pods 的根 cgroup。&lt;code>memory.available&lt;/code> 则监控 &lt;code>/proc/cgroups/memory&lt;/code> 目录。&lt;/p>
&lt;p>MemoryThresholdNotifier 的工作流程是：&lt;/p>
&lt;ul>
&lt;li>初始化 MemoryThresholdNotifier
MemoryThresholdNotifier 需要获取 cgroup 目录的 cgoup 内存子系统路径，并设置 evictionManager.synchronize() 为阈值处理函数 thresholdHandler&lt;/li>
&lt;li>创建 goroutine 来启动 MemoryThresholdNotifier
在 MemoryThresholdNotifier.Start() 循环中：监听事件 channel，并调用驱逐函数（调用 synchronize）&lt;/li>
&lt;li>在 synchronize 阶段调用 UpdateThreshold() 更新 memcg 的阈值，并激活 MemoryThresholdNotifier。
依据当前的采集指标配置，计算 cgroup 内存使用阈值。
如果 MemoryThresholdNotifier 已经存在 notifier 实例，则创建新的 cgroupNotifier 替换。cgroupNotifier 通过 epoll 上述 eventfd 描述符的方式，监听内存超过阈值的事件。&lt;/li>
&lt;/ul>
&lt;p>这里有两个关键点：&lt;/p>
&lt;p>1、在 UpdateThreshold 函数中计算 cgroup 内存使用阈值&lt;/p>
&lt;p>如上述，通过监听 memory.usage_in_bytes 文件，获取内存使用情况（不包含 swap），当内存使用阈值。而内存使用阈值 &lt;strong>memcgThreshold&lt;/strong> 通过监控数据得来：&lt;/p>
&lt;p>&lt;code>// Set threshold on usage to capacity - eviction_hard + inactive_file,  // since we want to be notified when working_set = capacity - eviction_hard  inactiveFile := resource.NewQuantity(int64(*memoryStats.UsageBytes-*memoryStats.WorkingSetBytes), resource.BinarySI)  capacity := resource.NewQuantity(int64(*memoryStats.AvailableBytes+*memoryStats.WorkingSetBytes), resource.BinarySI)  evictionThresholdQuantity := evictionapi.GetThresholdQuantity(m.threshold.Value, capacity)  memcgThreshold := capacity.DeepCopy()  memcgThreshold.Sub(*evictionThresholdQuantity)  memcgThreshold.Add(*inactiveFile)&lt;/code>&lt;/p>
&lt;p>计算内存使用阈值 &lt;strong>memcgThreshold&lt;/strong> 的绝对值通过 capacity - eviction_hard（如果红线不为绝对值，则依据 capacity * 百分比） + inactive_file 计算而来。&lt;/p>
&lt;p>其中&lt;/p>
&lt;ul>
&lt;li>内存容量 capacity = memoryStats.AvailableBytes + memoryStats.WorkingSetBytes，即 内存可用量 + workload 已使用量（两个值都从监控模块得到）&lt;/li>
&lt;li>硬下线 eviction_hard 是参数值&lt;/li>
&lt;li>不活跃的文件内存页 inactive_file = memoryStats.UsageBytes - memoryStats.WorkingSetBytes，即   内存已使用量 - workload 已使用量（包含最近使用的内存、待回收的脏内存和内核占用内存，两个值也从监控模块得到）。&lt;/li>
&lt;/ul>
&lt;p>2、在 UpdateThreshold 函数中创建 cgroupNotifier&lt;/p>
&lt;p>&lt;strong>cgroup notifier&lt;/strong> 的机制是通过 eventfd 监听 cgroup 中内存使用超过阈值的事件。&lt;/p>
&lt;ul>
&lt;li>memory.usage_in_bytes：监听内存使用文件对象。&lt;/li>
&lt;li>cgroup.event_control：阈值监控控制接口，依据 &lt;code>&amp;lt;event_fd&amp;gt; &amp;lt;fd of memory.usage_in_bytes&amp;gt; &amp;lt;threshold&amp;gt;&lt;/code> 的格式配置 event_fd，watchfd 和阈值 threshold。&lt;/li>
&lt;/ul>
&lt;p>&lt;code>/sys/fs/cgroup/memory $ cat memory.usage_in_bytes 92459601920 $ ls -lt cgroup.event_control --w--w--w- 1 root root 0 Nov 24 12:05 cgroup.event_control     # an interface for event_fd()&lt;/code>&lt;/p>
&lt;p>cgroupNotifier 会依据 cgroup 事件向 channel 压入事件，触发事件消费者（evictionManager）处理。这里 channel 不会传递具体的事件内容，只做任务触发功能。&lt;/p>
&lt;p>注册 cgroup 的 threshold，需要有 3 步：&lt;/p>
&lt;ul>
&lt;li>使用 eventfd(2) 创建 eventfd&lt;/li>
&lt;li>创建打开 memory.usage_in_bytes 或者 memory.memsw.usage_in_bytes 文件描述符&lt;/li>
&lt;li>在 cgroup.event_control 写入 &amp;ldquo;&amp;lt;event_fd&amp;gt; &amp;quot; 信息&lt;/li>
&lt;/ul>
&lt;p>在 evictionManager.Start() 的最后启动控制循环 synchronize 周期性检查驱逐的阈值条件是否达到，并进行下一步动作。&lt;/p>
&lt;h4 id="控制循环-synchronize">控制循环 synchronize&lt;/h4>
&lt;p>在 evictionManager 的控制循环中，维持 10s 调用 synchronize 函数来选择 pod 驱逐。驱逐首要判断的就是驱逐的触发条件，通过监控系统资源的方式来判断资源使用情况是否触及阈值。evictionManager 有两种触发方式：&lt;/p>
&lt;p>1、基于 cgroup 触发驱逐（基于事件）：上述已经描述了内存的 CgroupNotifier 机制&lt;/p>
&lt;p>2、依据监控数据触发驱逐（周期性检查）&lt;/p>
&lt;p>2.1 通过 summaryProvider 获取节点和 pods 的资源使用情况&lt;/p>
&lt;p>2.2 在 signalObservations 函数中依据监控数据，获取各资源的使用情况 signalObservations&lt;/p>
&lt;p>单个 signalObservation 记录着资源的总量和可用量：&lt;/p>
&lt;p>&lt;code>// signalObservation is the observed resource usage type signalObservation struct {  // The resource capacity  capacity *resource.Quantity  // The available resource  available *resource.Quantity  // Time at which the observation was taken  time metav1.Time }&lt;/code>&lt;/p>
&lt;p>2.3 在 thresholdsMet 函数中判断是否需要驱逐来释放资源&lt;/p>
&lt;p>当上述观测到的资源可用量低于各 signal 的阈值时，返回需要释放的资源类型。&lt;/p>
&lt;p>无论哪种方式，都会执行 synchronize 后段逻辑来判断是否需要驱逐 pod。&lt;/p>
&lt;p>3、更新节点状态，将资源压力状态更新，并上报到集群 API&lt;/p>
&lt;p>集群内其他组件能够观测到节点状态，从节点外部处理。&lt;/p>
&lt;p>4、如果开启了 featuregate LocalStorageCapacityIsolation 本地存储，会首先尝试清理影响本地磁盘&lt;/p>
&lt;p>这个是依据 featuregate 来控制是否开启，会检查 pod 下列资源使用是否超过 limit 值。&lt;/p>
&lt;ul>
&lt;li>emptyDir 的 sizeLimit&lt;/li>
&lt;li>ephemeralStorage 的 limit&lt;/li>
&lt;li>container 的 ephemeralStorage limit&lt;/li>
&lt;/ul>
&lt;p>这种驱逐是立即的，没有优雅退出时间。当触发到本地磁盘触发条件时，会忽略其他资源的驱逐行为。&lt;/p>
&lt;p>当驱逐流程走到这，会判断是否存在资源紧张的驱逐资源。如果 thresholdsMet 返回的空数组，则表示没有资源触及到驱逐阈值。否则继续执行节点资源的回收。&lt;/p>
&lt;p>5、回收节点级别的资源&lt;/p>
&lt;p>5.1 reclaimNodeLevelResource：回收节点级别资源&lt;/p>
&lt;p>首先尝试回收节点资源：nodefs/imagefs，这部分可以通过删除没使用的容器和镜像，而不侵害执行中的 pod。调用完节点资源回收函数之后，再采集一次指标。如果空闲资源大于阈值，则跳过本次驱逐的后续流程：pod 级别的驱逐。&lt;/p>
&lt;p>5.2 rank 阶段：判断触发驱逐条件的资源优先级&lt;/p>
&lt;p>每次 synchronize 只会选择一个超过阈值的资源进行回收。当多个资源出现触碰到阈值时，资源驱逐优先级如下：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>内存资源的驱逐优先级最高&lt;/p>
&lt;/li>
&lt;li>
&lt;p>没有资源 signal 的优先级最低&lt;/p>
&lt;p>5.3 尝试回收用户 pods 的资源&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>依据上一个步骤获得的资源 signal 来判断节点上活跃 pod 的驱逐优先级，将 pod 依据驱逐优先级排序：&lt;/p>
&lt;p>比如依据内存资源评判 pod 驱逐优先级规则有：&lt;/p>
&lt;ul>
&lt;li>依据 pod 是否超出资源请求值：没有资源使用指标的首先被驱逐。超过请求值的首先被驱逐。&lt;/li>
&lt;li>依据 pod 的 spec.priority：依据 pod 配置的优先级排序，默认为 0。priority 越高的 pod，驱逐序列越靠后。&lt;/li>
&lt;li>依据内存资源消费：依据 pod 消费内存超过请求值的部分排序。超过的资源绝对值越高的 pod 越优先被驱逐。&lt;/li>
&lt;/ul>
&lt;p>kubelet 实现了 multiSorter 的功能：依据上述顺序将活跃的 pod 排序。如果当前规则的结果是等序，才进入下个规则判断 pod 优先级。上述内存资源评判逻辑翻译过来就是，首先找出资源使用量超过请求值的 pod（包含没有指标的 pod），然后依据 pod 的 spec.priority 排序。在同 priority 的 pod 内部再依据超过的资源绝对值越高的 pod 排序。&lt;/p>
&lt;p>除了 rankMemoryPressure 的逻辑，还有 rankPIDPressure，rankDiskPressure 的逻辑。&lt;/p>
&lt;p>5.4 驱逐&lt;/p>
&lt;p>在依据可回收资源的排序后，每次驱逐周期只会执行一次 pod 的删除。如果不是 HardEviction，还会给 MaxPodGracePeriodSeconds 的时间来让 pod 内的容器进程退出。具体的驱逐动作操作在发送事件，删除 pod 并更新 pod 的驱逐状态。&lt;/p>
&lt;h2 id="系统驱逐策略">系统驱逐策略&lt;/h2>
&lt;p>上面描述的是用户态中 kubelet 通过驱逐来限制节点资源、pod 资源。在内核内存管理中，通过 OOM killer 来限制单机层面的内存使用。&lt;/p>
&lt;h3 id="oom-killer">OOM killer&lt;/h3>
&lt;p>OOM killer（Out Of Memory killer）是一种 Linux 内核的一种内存管理机制：在系统可用内存较少的情况下，内核为保证系统还能够继续运行下去，会选择结束进程来释放内存资源。&lt;/p>
&lt;h4 id="运行机制">运行机制&lt;/h4>
&lt;p>running processes require more memory than is physically available.   内核在调用 alloc_pages() 分配内存时，如果所需要的内存超过物理内存时，通过调用 out_of_memory() 函数来选择进程释放资源。OOM killer 会检查所有运行中的进程，选择结束一个活多个进程来释放系统内存。&lt;/p>
&lt;p>out_of_memory() 函数：先做一部分检查，避免通过结束进程的方式来释放内存。如果只能通过结束进程的方式来释放，那么函数会继续选择目标进程来回收。如果这个阶段也无法释放资源，kernel 最终报错异常退出。函数源码地址：&lt;a href="https://elixir.bootlin.com/linux/v5.17.2/source/mm/oom_kill.c#L1052%EF%BC%8C%E6%B5%81%E7%A8%8B%E5%A6%82%E4%B8%8B%EF%BC%9A">https://elixir.bootlin.com/linux/v5.17.2/source/mm/oom_kill.c#L1052，流程如下：&lt;/a>&lt;/p>
&lt;ol>
&lt;li>首先通知 oom_notify_list 链表的订阅者：依据通知链（notification chains）机制，通知注册了 oom_notify_list 的模块释放内存。如果订阅者能够处理 OOM，释放了内存则会退出 OOM killer，不执行后续操作。&lt;/li>
&lt;li>如果当前 task 存在 pending 的 SIGKILL，或者已经退出的时，会释放当前进程的资源。包括和 task 共享同一个内存描述符 mm_struct 的进程、线程也会被杀掉。&lt;/li>
&lt;li>对于 IO-less 的回收，依据 gfp_mask 判断，如果 1) 分配的是非 FS 操作类型的分配，并且 2）不是 cgroup 的内存 OOM -&amp;gt; 直接退出 oom-killer。&lt;/li>
&lt;li>检查内存分配的约束（例如 NUMA），有 CONSTRAINT_NONE, CONSTRAINT_CPUSET，CONSTRAINT_MEMORY_POLICY, CONSTRAINT_MEMCG 类型。&lt;/li>
&lt;li>检查 &lt;code>/proc/sys/vm/panic_on_oom&lt;/code> 的设置，做操作。可能 panic，也可能尝试 oom_killer。如果 panic_on_oom 设置的为 2，则进程直接 panic 强制退出。&lt;/li>
&lt;li>&lt;code>/proc/sys/vm/oom_kill_allocating_task&lt;/code> 为 true 的时候，调用 oom_kill_process 直接 kill 掉当前想要分配内存的进程 (此进程能够被 kill 时)。&lt;/li>
&lt;li>select_bad_process()，选择最合适的进程，调用 oom_kill_process。&lt;/li>
&lt;li>如果没有合适的进程，如果非 sysrq 和 memcg，则 panic 强制退出。&lt;/li>
&lt;/ol>
&lt;p>上述流程中有几个细节：&lt;/p>
&lt;h5 id="gfp_mask-约束">gfp_mask 约束&lt;/h5>
&lt;p>&lt;code>/*   * The OOM killer does not compensate for IO-less reclaim.   * pagefault_out_of_memory lost its gfp context so we have to   * make sure exclude 0 mask - all other users should have at least   * ___GFP_DIRECT_RECLAIM to get here. But mem_cgroup_oom() has to   * invoke the OOM killer even if it is a GFP_NOFS allocation.   */  if (oc-&amp;gt;gfp_mask &amp;amp;&amp;amp; !(oc-&amp;gt;gfp_mask &amp;amp; __GFP_FS) &amp;amp;&amp;amp; !is_memcg_oom(oc))   return true;&lt;/code>&lt;/p>
&lt;p>gfp_mask 是申请内存（get free  page）时传递的标志位。前四位表示内存域修饰符（___GFP_DMA、___GFP_HIGHMEM、___GFP_DMA32、___GFP_MOVABLE），从第 5 位开始为内存分配标志。定义：&lt;a href="https://elixir.bootlin.com/linux/v5.17.2/source/include/linux/gfp.h#L81">&lt;strong>https://elixir.bootlin.com/linux/v5.17.2/source/include/linux/gfp.h#L81&lt;/strong>&lt;/a>。默认为空，从 ZONE_NORMAL 开始扫描，ZONE_NORMAL 是默认的内存申请类型。&lt;/p>
&lt;p>OOM killer 不对非 IO 的回收进行补偿，所以分配的 gfp_mask 是非 FS 操作类型的分配的 OOM 会直接退出。&lt;/p>
&lt;h5 id="oom_constraint-约束">oom_constraint 约束&lt;/h5>
&lt;p>检查内存分配是否有限制，有几种不同的限制策略。仅适用于 NUMA 和 memcg 场景。oom_constraint 可以是：CONSTRAINT_NONE,CONSTRAINT_CPUSET,CONSTRAINT_MEMORY_POLICY,CONSTRAINT_MEMCG 类型。对于 UMA 架构而言，oom_constraint 永远都是 CONSTRAINT_NONE，表示系统并没有约束产生的 OOM。而在 NUMA 的架构下，有可能附加其他的约束导致 OOM 的情况出现。&lt;/p>
&lt;p>然后调用 &lt;code>check_panic_on_oom(oc)&lt;/code> 检查是否配置了 /proc/sys/kernel/panic_on_oom，如果有则直接触发 panic。&lt;/p>
&lt;p>当走到这一步，oom killer 需要选择终止的进程，有两种选择逻辑选择合适的进程通过：&lt;/p>
&lt;ul>
&lt;li>谁触发 OOM 就终止谁：通过 sysctl_oom_kill_allocating_task 控制，是否干掉当前申请内存的进程&lt;/li>
&lt;li>谁最 “坏” 就制止谁：通过打分判断最 “坏” 的进程&lt;/li>
&lt;/ul>
&lt;p>sysctl_oom_kill_allocating_task 来自 &lt;code>/proc/sys/vm/oom_kill_allocating_task&lt;/code>。当参数为 true 的时候，调用 oom_kill_process 直接 kill 掉当前想要分配内存的进程。&lt;/p>
&lt;h5 id="select_bad_process选择最-坏-的进程">select_bad_process：选择最 “坏” 的进程&lt;/h5>
&lt;p>普通场景下通过 oom_evaluate_task 函数，评估进程分数选择需要终止的进程。如果是 memory cgroup 的情况调用 mem_cgroup_scan_tasks 来选择。先看看 oom_evaluate_task 的逻辑&lt;/p>
&lt;ul>
&lt;li>mm-&amp;gt;flags 为 MMF_OOM_SKIP 的进程则跳过，遍历下一个进程评估&lt;/li>
&lt;li>oom_task_origin 分数最高，该标志表示 task 已经被分配大量内存并标记为 oom 的潜在原因，所以优先杀掉。&lt;/li>
&lt;li>其他情况的进程通过 oom_badness 函数计算分数&lt;/li>
&lt;/ul>
&lt;p>最后分数最高的进程被终止的优先级最高。&lt;/p>
&lt;p>oom_badness 函数计算的进程终止优先级&lt;strong>分数&lt;/strong>由两部分组成，由下列两个参数提供。&lt;/p>
&lt;p>参数：&lt;/p>
&lt;ul>
&lt;li>oom_score_adj：OOM kill score adjustment，调整值由用户打分。范围在 OOM_SCORE_ADJ_MIN（-1000） 到  OOM_SCORE_ADJ_MAX（1000）。数值越大，进程被终止的优先级越高。用户可以通过该值来保护某个进程。&lt;/li>
&lt;li>totalpages：当前可分配的内存上限值，提供系统打分的依据。&lt;/li>
&lt;/ul>
&lt;p>计算公式：&lt;/p>
&lt;p>&lt;code>/*   * The baseline for the badness score is the proportion of RAM that each   * task's rss, pagetable and swap space use.   */ points = get_mm_rss(p-&amp;gt;mm) + get_mm_counter(p-&amp;gt;mm, MM_SWAPENTS) +   mm_pgtables_bytes(p-&amp;gt;mm) / PAGE_SIZE; adj *= totalpages / 1000; points += adj;&lt;/code>&lt;/p>
&lt;p>基础分数 process_pages 由 3 部分组成：&lt;/p>
&lt;ul>
&lt;li>get_mm_rss(p-&amp;gt;mm)：rss 部分&lt;/li>
&lt;li>get_mm_counter(p-&amp;gt;mm, MM_SWAPENTS)：swap 占用内存&lt;/li>
&lt;li>mm_pgtables_bytes(p-&amp;gt;mm) / PAGE_SIZE：页表占用内存&lt;/li>
&lt;/ul>
&lt;p>将 3 个部分相加，并结合 oom_score_adj：将归一化后的 adj 和 points 求和，作为当前进程的分数。&lt;/p>
&lt;p>所以进程得分 &lt;code>points=process_pages + oom_score_adj*totalpages/1000&lt;/code>&lt;/p>
&lt;p>之前老的内核版本还会有一些复杂的计算逻辑考虑，比如对于特权进程的处理。如果是 root 权限的进程，有 3% 的内存使用特权。points=process_pages_0.97 + oom_score_adj_totalpages/1000。v4.17 移除，使得计算逻辑更加简洁和可预测。&lt;/p>
&lt;p>&lt;code>/*   * Root processes get 3% bonus, just like the __vm_enough_memory()   * implementation used by LSMs.   */  if (has_capability_noaudit(p, CAP_SYS_ADMIN))   points -= (points * 3) / 100;&lt;/code>&lt;/p>
&lt;p>mem_cgroup_scan_tasks：memory cgroup cgroup 的处理会需要遍历 cgroup 的层次结构，调用 oom_evaluate_task 计算 task 的分数。回收父进程的内存也会回收子进程的内存。&lt;/p>
&lt;h6 id="oom_kill_process">oom_kill_process&lt;/h6>
&lt;p>接下来进入终止进程的逻辑，oom_kill_process 函数在终止进程之前会先检查，task 是否已经退出，占用的内存会被释放，防止重复处理；获取 memory cgroup 消息，判断是否需要删除 cgroup 下所有的 tasks。然后是 dump 信息，将 OOM 的原因打印出来，保留 OOM 的线索。&lt;/p>
&lt;p>之后在 __oom_kill_process 函数内调用 put_task_struct 释放内核栈，释放系统资源。唤醒 oom_reaper 内核线程收割 wake_oom_reaper(victim)。&lt;/p>
&lt;p>oom_reaper 会在有清理任务之前一直保持休眠。wake_oom_reaper 会将任务压入 oom_reaper_list 链表，oom_reaper 通过 oom_reaper_list 链表判断需要调用 oom_reap_task_mm 清理地址空间。清理时会遍历 vma，跳过 VM_LOCKED|VM_HUGETLB|VM_PFNMAP 的 VMA 区域。具体的释放操作通过 unmap_page_range 完成：&lt;/p>
&lt;p>` for (vma = mm-&amp;gt;mmap ; vma; vma = vma-&amp;gt;vm_next) {
  if (!can_madv_lru_vma(vma))
   continue;&lt;/p>
&lt;p>/_
   * Only anonymous pages have a good chance to be dropped
   * without additional steps which we cannot afford as we
   * are OOM already.
   _
   * We do not even care about fs backed pages because all
   * which are reclaimable have already been reclaimed and
   * we do not want to block exit*mmap by keeping mm ref
   * count elevated without a good reason.
   _/
  if (vma_is_anonymous(vma) || !(vma-&amp;gt;vm_flags &amp;amp; VM_SHARED)) {
   struct mmu_notifier_range range;
   struct mmu_gather tlb;&lt;/p>
&lt;p>mmu_notifier_range_init(&amp;amp;range, MMU_NOTIFY_UNMAP, 0,
      vma, mm, vma-&amp;gt;vm_start,
      vma-&amp;gt;vm_end);
   tlb_gather_mmu(&amp;amp;tlb, mm);
   if (mmu_notifier_invalidate_range_start_nonblock(&amp;amp;range)) {
    tlb_finish_mmu(&amp;amp;tlb);
    ret = false;
    continue;
   }
   unmap_page_range(&amp;amp;tlb, vma, range.start, range.end, NULL);
   mmu_notifier_invalidate_range_end(&amp;amp;range);
   tlb_finish_mmu(&amp;amp;tlb);
  }
 }&lt;/p>
&lt;p>`&lt;/p>
&lt;p>&lt;a href="https://elixir.bootlin.com/linux/v5.17.2/source/mm/oom_kill.c#L528">https://elixir.bootlin.com/linux/v5.17.2/source/mm/oom_kill.c#L528&lt;/a>&lt;/p>
&lt;h5 id="控制-oom-killer-的行为">控制 oom killer 的行为&lt;/h5>
&lt;p>上述有提及几个文件参数来控制控制 oom killer 的行为：&lt;/p>
&lt;ol>
&lt;li>/proc/sys/vm/panic_on_oom，当出现 oom 时，该值设定允许或者禁止 kernel panic（默认为 0）&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>0: 发生 oom 时，内核会选择调用 oom-killer 来选择进程删除&lt;/li>
&lt;li>1: 发生 oom 时，内核通常情况会直接 panic，除了特定条件：通过 mempolicy/cpusets 限制使用的进程则会被 oom-killer 删除时，不会 panic&lt;/li>
&lt;li>2: 发生 oom 时，内核无条件直接 panic&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>/proc/sys/vm/oom_kill_allocating_task，可以取值为 0 或者非 0（默认为 0），0 代表发送 oom 时，进行遍历任务链表，选择一个进程去杀死，而非 0 代表，发送 oom 时，直接 kill 掉引起 oom 的进程，并不会去遍历任务链表。&lt;/li>
&lt;li>/proc/sys/vm/oom_dump_tasks：可以取值为 0 或者非 0（默认为 1），表示是否在发送 oom killer 时，打印 task 的相关信息。&lt;/li>
&lt;li>/proc//oom_score_adj：配置进程的评分调整分，通过该在值来保护某个进程不被杀死或者每次都杀某个进程。其取值范围为 - 1000 到 1000 。&lt;/li>
&lt;li>/proc/sys/vm/overcommit_memory：控制内存超售，oom-killer 功能，默认为 0&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>0：&lt;strong>启发式策略&lt;/strong> ，比较严重的 Overcommit 将不能得逞，比如你突然申请了 128TB 的内存。而轻微的 overcommit 将被允许。另外，root 能 Overcommit 的值比普通用户要稍微多。默认&lt;/li>
&lt;li>1：&lt;strong>永远允许 overcommit&lt;/strong> ，这种策略适合那些不能承受内存分配失败的应用，比如某些科学计算应用。&lt;/li>
&lt;li>2：&lt;strong>永远禁止 overcommit&lt;/strong> ，在这个情况下，系统所能分配的内存不会超过 &lt;strong>swap+RAM*系数&lt;/strong> （/proc/sys/vm/overcmmit_ratio，默认 50%，你可以调整），如果这么多资源已经用光，那么后面任何尝试申请内存的行为都会返回错误，这通常意味着此时没法运行任何新程序。&lt;/li>
&lt;/ul>
&lt;p>Memory cgroup 子系统的控制：&lt;/p>
&lt;ol>
&lt;li>memory.use_hierarchy：指定 cgroup 层次结构。（default 为 0）&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>0：父进程不从子进程回收内存&lt;/li>
&lt;li>1：会从超出内存限制（memory limit）的子进程中回收&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>memory.oom_control：oom 控制，（默认为 0：每个 cgroup 内存子系统）&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>0：当进程消费更多的内存时会被 oom_killer 杀掉&lt;/li>
&lt;li>1：关闭 oom_killer，当 task 尝试使用更多的内存时，会卡住直到内存充足。&lt;/li>
&lt;li>读文件时，描述 oom 状态：oom_kill_disable（是否开启）、under_oom（是否处于 oom 状态）&lt;/li>
&lt;/ul>
&lt;h2 id="用户空间的-oom-killer">用户空间的 oom killer&lt;/h2>
&lt;p>最后再简单介绍一个用户空间的 oom killer：&lt;a href="https://github.com/facebookincubator/oomd%E3%80%82oomd">https://github.com/facebookincubator/oomd。oomd&lt;/a> 的目标是在用户空间，解决内存资源使用的问题。&lt;/p>
&lt;h3 id="运行机制-1">运行机制&lt;/h3>
&lt;ul>
&lt;li>使用 PSI、cgroupv2 来监控系统上的内存使用情况，oomd 在内核的 oom_killer 处理之前，先进行内存资源的释放。&lt;/li>
&lt;li>监控系统和 cgroup 的内存压力。&lt;/li>
&lt;/ul>
&lt;p>并且配置上可以做到如此驱逐策略：&lt;/p>
&lt;ul>
&lt;li>当 workload 有内存压力 / 系统有内存压力时，通过内存大小或增长率选择一个 memory hog（资源大户）删除。&lt;/li>
&lt;li>当系统有内存压力时，通过内存大小或增长率选择一个 memory hog 删除。&lt;/li>
&lt;li>当系统有 swap 压力时，选择使用 swap 最多的 cgroup 来删除。&lt;/li>
&lt;/ul>
&lt;p>可以看到，oomd 充当了 kubelet 的功能，是单机上 oom 管理的 agent。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>可以看到用户空间和内核空间的驱逐策略的不同。用户空间通过监控系统资源来触发驱逐流程，内核空间通过分配内存时触发驱逐流程。因为用户空间的驱逐需要在内核驱逐之前来&lt;/p>
&lt;p>除了进程驱逐手段，还有其他手段来做到资源保障和稳定性，比如资源抑制和回收。通过 cgroup v2 的 Memory Qos 的能力&lt;/p>
&lt;ul>
&lt;li>当整机内存出现压力时，保障 container 的内存分配性能，降低其内存分配延迟&lt;/li>
&lt;li>对过度申请内存的 container 进行抑制和快速回收，降低整机内存的使用压力&lt;/li>
&lt;li>对整机保留内存进行保护&lt;/li>
&lt;/ul>
&lt;h4 id="参考">参考&lt;/h4>
&lt;ul>
&lt;li>Memory Resource Controller: &lt;a href="https://www.kernel.org/doc/Documentation/cgroup-v1/memory.txt">&lt;strong>https://www.kernel.org/doc/Documentation/cgroup-v1/memory.txt&lt;/strong>&lt;/a>&lt;/li>
&lt;li>liux 下 oom killer: &lt;a href="https://www.mo4tech.com/oom-killer-mechanism-for-the-linux-kernel.html">&lt;strong>https://www.mo4tech.com/oom-killer-mechanism-for-the-linux-kernel.html&lt;/strong>&lt;/a>&lt;/li>
&lt;li>内存分配掩码（gfp_mask）：&lt;a href="https://blog.csdn.net/farmwang/article/details/66975128">&lt;strong>https://blog.csdn.net/farmwang/article/details/66975128&lt;/strong>&lt;/a>&lt;/li>
&lt;li>oom-killer 日志分析：&lt;a href="https://bhsc881114.github.io/2018/06/24/oom-killer%E7%90%86%E8%A7%A3%E5%92%8C%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90-%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/">&lt;strong>https://bhsc881114.github.io/2018/06/24/oom-killer%E7%90%86%E8%A7%A3%E5%92%8C%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90-%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/&lt;/strong>&lt;/a>&lt;/li>
&lt;li>memory managemnent：&lt;a href="https://learning-kernel.readthedocs.io/en/latest/mem-management.html">&lt;strong>https://learning-kernel.readthedocs.io/en/latest/mem-management.html&lt;/strong>&lt;/a>&lt;/li>
&lt;li>Linux 内存管理 (21)OOM：&lt;a href="https://www.cnblogs.com/arnoldlu/p/8567559.html">&lt;strong>https://www.cnblogs.com/arnoldlu/p/8567559.html&lt;/strong>&lt;/a>&lt;/li>
&lt;li>Liux OOM 的参数：&lt;a href="http://www.wowotech.net/memory_management/oom.html">&lt;strong>http://www.wowotech.net/memory_management/oom.html&lt;/strong>&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/722c5b2e-6e47-406c-b75b-d475e0296a7b/640" alt="">&lt;/p>
&lt;p>&lt;a href="https://mp.weixin.qq.com/s/ehECtQiXSHLpCrH5vuBX_w">https://mp.weixin.qq.com/s/ehECtQiXSHLpCrH5vuBX_w&lt;/a>&lt;/p></description></item><item><title>Docs: Kubelet 启动流程</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/Kubernetes-%E5%BC%80%E5%8F%91/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/Kubelet-%E6%BA%90%E7%A0%81/Kubelet-%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/Kubernetes-%E5%BC%80%E5%8F%91/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/Kubelet-%E6%BA%90%E7%A0%81/Kubelet-%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/frggyc/1645579695318-7cd1eb33-cb95-4223-b6fd-299d52112b20.png" alt="image.png">&lt;/p>
&lt;h1 id="启动">启动&lt;/h1>
&lt;p>首先从 kubelet 的 &lt;code>main()&lt;/code> 函数开始，调用 &lt;code>app.NewKubeletCommand()&lt;/code> 方法以获取配置文件中的参数、校验参数、为参数设置默认值。主要逻辑为：&lt;/p>
&lt;ul>
&lt;li>解析命令行参数；&lt;/li>
&lt;li>为 kubelet 初始化 feature gates 参数；&lt;/li>
&lt;li>加载 kubelet 配置文件；&lt;/li>
&lt;li>校验配置文件中的参数；&lt;/li>
&lt;li>检查 kubelet 是否启用动态配置功能；&lt;/li>
&lt;li>初始化 kubeletDeps，kubeletDeps 包含 kubelet 运行所必须的配置，是为了实现 dependency injection，其目的是为了把 kubelet 依赖的组件对象作为参数传进来，这样可以控制 kubelet 的行为；&lt;/li>
&lt;li>调用 &lt;code>Run()&lt;/code> 函数；&lt;/li>
&lt;/ul>
&lt;h2 id="main--入口">main() # 入口&lt;/h2>
&lt;p>源码：&lt;code>[cmd/kubelet/kubelet.go](https://github.com/kubernetes/kubernetes/blob/master/cmd/kubelet/kubelet.go)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">command&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">app&lt;/span>.&lt;span style="color:#a6e22e">NewKubeletCommand&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// kubelet 使用一个配置文件，并对标志和该配置文件进行自己的特殊解析。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 完成后，它会初始化日志记录。因此，它不像其他更简单的命令那样使用 cli.Run()
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">code&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">run&lt;/span>(&lt;span style="color:#a6e22e">command&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">Exit&lt;/span>(&lt;span style="color:#a6e22e">code&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">run&lt;/span>(&lt;span style="color:#a6e22e">command&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">cobra&lt;/span>.&lt;span style="color:#a6e22e">Command&lt;/span>) &lt;span style="color:#66d9ef">int&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">logs&lt;/span>.&lt;span style="color:#a6e22e">FlushLogs&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">rand&lt;/span>.&lt;span style="color:#a6e22e">Seed&lt;/span>(&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Now&lt;/span>().&lt;span style="color:#a6e22e">UnixNano&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">command&lt;/span>.&lt;span style="color:#a6e22e">SetGlobalNormalizationFunc&lt;/span>(&lt;span style="color:#a6e22e">cliflag&lt;/span>.&lt;span style="color:#a6e22e">WordSepNormalizeFunc&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">command&lt;/span>.&lt;span style="color:#a6e22e">Execute&lt;/span>(); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="newkubeletcommand--cobra-库的基本逻辑">NewKubeletCommand() # Cobra 库的基本逻辑&lt;/h2>
&lt;p>源码：&lt;code>[cmd/kubelet/app/server.go](https://github.com/kubernetes/kubernetes/blob/master/cmd/kubelet/app/server.go)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">NewKubeletCommand&lt;/span>() &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">cobra&lt;/span>.&lt;span style="color:#a6e22e">Command&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">cleanFlagSet&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">pflag&lt;/span>.&lt;span style="color:#a6e22e">NewFlagSet&lt;/span>(&lt;span style="color:#a6e22e">componentKubelet&lt;/span>, &lt;span style="color:#a6e22e">pflag&lt;/span>.&lt;span style="color:#a6e22e">ContinueOnError&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">cleanFlagSet&lt;/span>.&lt;span style="color:#a6e22e">SetNormalizeFunc&lt;/span>(&lt;span style="color:#a6e22e">cliflag&lt;/span>.&lt;span style="color:#a6e22e">WordSepNormalizeFunc&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 1、kubelet 配置分两部分:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// KubeletFlag: 指那些不允许在 kubelet 运行时进行修改的配置集，或者不能在集群中各个 Nodes 之间共享的配置集。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// KubeletConfiguration: 指可以在集群中各个Nodes之间共享的配置集，可以进行动态配置。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">kubeletFlags&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">options&lt;/span>.&lt;span style="color:#a6e22e">NewKubeletFlags&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">kubeletConfig&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">options&lt;/span>.&lt;span style="color:#a6e22e">NewKubeletConfiguration&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">cmd&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">cobra&lt;/span>.&lt;span style="color:#a6e22e">Command&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Use&lt;/span>: &lt;span style="color:#a6e22e">componentKubelet&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">DisableFlagParsing&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">......&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">RunE&lt;/span>: &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">cmd&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">cobra&lt;/span>.&lt;span style="color:#a6e22e">Command&lt;/span>, &lt;span style="color:#a6e22e">args&lt;/span> []&lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 2、解析命令行标志，这里禁用了 cobra 的标志解析
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">cleanFlagSet&lt;/span>.&lt;span style="color:#a6e22e">Parse&lt;/span>(&lt;span style="color:#a6e22e">args&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;failed to parse kubelet flag: %w&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">......&lt;/span> &lt;span style="color:#75715e">// 一系列验证行为
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 3、初始化 feature gates 配置
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">utilfeature&lt;/span>.&lt;span style="color:#a6e22e">DefaultMutableFeatureGate&lt;/span>.&lt;span style="color:#a6e22e">SetFromMap&lt;/span>(&lt;span style="color:#a6e22e">kubeletConfig&lt;/span>.&lt;span style="color:#a6e22e">FeatureGates&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;failed to set feature gates from initial flags-based config: %w&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 验证初始的 kubelet 标志
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">options&lt;/span>.&lt;span style="color:#a6e22e">ValidateKubeletFlags&lt;/span>(&lt;span style="color:#a6e22e">kubeletFlags&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;failed to validate kubelet flags: %w&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">kubeletFlags&lt;/span>.&lt;span style="color:#a6e22e">ContainerRuntime&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;remote&amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#a6e22e">cleanFlagSet&lt;/span>.&lt;span style="color:#a6e22e">Changed&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;pod-infra-container-image&amp;#34;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">Warning&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Warning: For remote container runtime, --pod-infra-container-image is ignored in kubelet, which should be set in that remote runtime instead&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 4、加载 kubelet 配置文件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">configFile&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">kubeletFlags&lt;/span>.&lt;span style="color:#a6e22e">KubeletConfigFile&lt;/span>; len(&lt;span style="color:#a6e22e">configFile&lt;/span>) &amp;gt; &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">kubeletConfig&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">loadConfigFile&lt;/span>(&lt;span style="color:#a6e22e">configFile&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">......&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 5、校验配置文件中的参数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">kubeletconfigvalidation&lt;/span>.&lt;span style="color:#a6e22e">ValidateKubeletConfiguration&lt;/span>(&lt;span style="color:#a6e22e">kubeletConfig&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;failed to validate kubelet configuration, error: %w, path: %s&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>, &lt;span style="color:#a6e22e">kubeletConfig&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 6、检查 kubelet 是否启用动态配置功能
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">utilfeature&lt;/span>.&lt;span style="color:#a6e22e">DefaultFeatureGate&lt;/span>.&lt;span style="color:#a6e22e">Enabled&lt;/span>(&lt;span style="color:#a6e22e">features&lt;/span>.&lt;span style="color:#a6e22e">DynamicKubeletConfig&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;cannot set feature gate %v to %v, feature is locked to %v&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">features&lt;/span>.&lt;span style="color:#a6e22e">DynamicKubeletConfig&lt;/span>, &lt;span style="color:#66d9ef">true&lt;/span>, &lt;span style="color:#66d9ef">false&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 配置和标志解析完成后，开始初始化日志
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">logs&lt;/span>.&lt;span style="color:#a6e22e">InitLogs&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 从 kubeletFlags 和 kubeletConfig 构造一个 kubeletServer
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">kubeletServer&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">options&lt;/span>.&lt;span style="color:#a6e22e">KubeletServer&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">KubeletFlags&lt;/span>: &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">kubeletFlags&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">KubeletConfiguration&lt;/span>: &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">kubeletConfig&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 7、初始化 kubeletDeps
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">kubeletDeps&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">UnsecuredDependencies&lt;/span>(&lt;span style="color:#a6e22e">kubeletServer&lt;/span>, &lt;span style="color:#a6e22e">utilfeature&lt;/span>.&lt;span style="color:#a6e22e">DefaultFeatureGate&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 检查 kubelet 是否以 root 权限启动
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">checkPermissions&lt;/span>(); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 8、调用 Run 方法，即开始运行 kubelet
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">Run&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">kubeletServer&lt;/span>, &lt;span style="color:#a6e22e">kubeletDeps&lt;/span>, &lt;span style="color:#a6e22e">utilfeature&lt;/span>.&lt;span style="color:#a6e22e">DefaultFeatureGate&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">kubeletFlags&lt;/span>.&lt;span style="color:#a6e22e">AddFlags&lt;/span>(&lt;span style="color:#a6e22e">cleanFlagSet&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">options&lt;/span>.&lt;span style="color:#a6e22e">AddKubeletConfigFlags&lt;/span>(&lt;span style="color:#a6e22e">cleanFlagSet&lt;/span>, &lt;span style="color:#a6e22e">kubeletConfig&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">options&lt;/span>.&lt;span style="color:#a6e22e">AddGlobalFlags&lt;/span>(&lt;span style="color:#a6e22e">cleanFlagSet&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">......&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">cmd&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="cri-与-cni-的默认配置">CRI 与 CNI 的默认配置&lt;/h3>
&lt;p>&lt;a href="https://github.com/kubernetes/kubernetes/blob/release-1.22/cmd/kubelet/app/options/container_runtime.go">https://github.com/kubernetes/kubernetes/blob/release-1.22/cmd/kubelet/app/options/container_runtime.go&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>const &lt;span style="color:#f92672">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> // When these values are updated, also update test/utils/image/manifest.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> defaultPodSandboxImageName &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;k8s.gcr.io/pause&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> defaultPodSandboxImageVersion &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;3.5&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>var &lt;span style="color:#f92672">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> defaultPodSandboxImage &lt;span style="color:#f92672">=&lt;/span> defaultPodSandboxImageName +
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;:&amp;#34;&lt;/span> + defaultPodSandboxImageVersion
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>// NewContainerRuntimeOptions will create a new ContainerRuntimeOptions with
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>// default values.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>func NewContainerRuntimeOptions&lt;span style="color:#f92672">()&lt;/span> *config.ContainerRuntimeOptions &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dockerEndpoint :&lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> runtime.GOOS !&lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;windows&amp;#34;&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dockerEndpoint &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;unix:///var/run/docker.sock&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &amp;amp;config.ContainerRuntimeOptions&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ContainerRuntime: kubetypes.DockerContainerRuntime,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DockerEndpoint: dockerEndpoint,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DockershimRootDirectory: &lt;span style="color:#e6db74">&amp;#34;/var/lib/dockershim&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PodSandboxImage: defaultPodSandboxImage,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ImagePullProgressDeadline: metav1.Duration&lt;span style="color:#f92672">{&lt;/span>Duration: &lt;span style="color:#ae81ff">1&lt;/span> * time.Minute&lt;span style="color:#f92672">}&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CNIBinDir: &lt;span style="color:#e6db74">&amp;#34;/opt/cni/bin&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CNIConfDir: &lt;span style="color:#e6db74">&amp;#34;/etc/cni/net.d&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CNICacheDir: &lt;span style="color:#e6db74">&amp;#34;/var/lib/cni/cache&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="run--启动-kubelet">Run() # 启动 kubelet&lt;/h2>
&lt;p>&lt;code>Run()&lt;/code> 函数仅仅调用 &lt;code>run()&lt;/code> 函数以执行启动逻辑。&lt;/p>
&lt;ul>
&lt;li>&lt;code>Run()&lt;/code> 使用给定的依赖(即 *kubelet.Dependencies 参数)运行指定的 KubeletServer。这不应该退出。 kubeDeps 参数可能是 nil - 如果是这样，它是从 KubeletServer 上的设置初始化的。否则，假定调用者已设置 Dependencies 对象，并且不会生成默认对象。&lt;/li>
&lt;/ul>
&lt;p>源码：&lt;code>cmd/kubelet/app/server.go&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Run&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>, &lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">options&lt;/span>.&lt;span style="color:#a6e22e">KubeletServer&lt;/span>, &lt;span style="color:#a6e22e">kubeDeps&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">kubelet&lt;/span>.&lt;span style="color:#a6e22e">Dependencies&lt;/span>, &lt;span style="color:#a6e22e">featureGate&lt;/span> &lt;span style="color:#a6e22e">featuregate&lt;/span>.&lt;span style="color:#a6e22e">FeatureGate&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">initForOS&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">KubeletFlags&lt;/span>.&lt;span style="color:#a6e22e">WindowsService&lt;/span>, &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">KubeletFlags&lt;/span>.&lt;span style="color:#a6e22e">WindowsPriorityClass&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;failed OS init: %w&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">run&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">s&lt;/span>, &lt;span style="color:#a6e22e">kubeDeps&lt;/span>, &lt;span style="color:#a6e22e">featureGate&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;failed to run Kubelet: %w&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="run--运行-kubelet-前配置及检查">run() # 运行 kubelet 前配置及检查&lt;/h2>
&lt;p>&lt;code>run()&lt;/code> 函数中主要是为 kubelet 的启动做一些基本的配置及检查工作，主要逻辑为：&lt;/p>
&lt;ul>
&lt;li>为 kubelet 设置默认的 FeatureGates，kubelet 所有的 FeatureGates 可以通过命令参数查看，k8s 中处于 Alpha 状态的 FeatureGates 在组件启动时默认关闭，处于 Beta 和 GA 状态的默认开启&lt;/li>
&lt;li>校验 kubelet 的参数&lt;/li>
&lt;li>尝试获取 kubelet 的 lock file，需要在 kubelet 启动时指定 &amp;ndash;exit-on-lock-contention 和 &amp;ndash;lock-file，该功能处于 Alpha 版本默认为关闭状态&lt;/li>
&lt;li>将当前的配置文件注册到 http server /configz URL 中&lt;/li>
&lt;li>检查 kubelet 启动模式是否为 standalone 模式，此模式下不会和 apiserver 交互，主要用于 kubelet 的调试&lt;/li>
&lt;li>初始化 kubeDeps，kubeDeps 中包含 kubelet 的一些依赖，主要有 KubeClient、EventClient、HeartbeatClient、Auth、cadvisor、ContainerManager&lt;/li>
&lt;li>为进程设置 oom 分数，默认为 -999，分数范围为 [-1000, 1000]，越小越不容易被 kill 掉&lt;/li>
&lt;li>调用 PreInitRuntimeService() 函数，以初始化运行时&lt;/li>
&lt;li>调用 RunKubelet() 函数，以继续执行运行 kubelet 的后续代码&lt;/li>
&lt;li>检查 kubelet 是否启动了动态配置功能&lt;/li>
&lt;li>启动 Healthz http server&lt;/li>
&lt;li>如果使用 systemd 启动，通知 systemd kubelet 已经启动&lt;/li>
&lt;/ul>
&lt;p>源码：&lt;code>cmd/kubelet/app/server.go&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">run&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>, &lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">options&lt;/span>.&lt;span style="color:#a6e22e">KubeletServer&lt;/span>, &lt;span style="color:#a6e22e">kubeDeps&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">kubelet&lt;/span>.&lt;span style="color:#a6e22e">Dependencies&lt;/span>, &lt;span style="color:#a6e22e">featureGate&lt;/span> &lt;span style="color:#a6e22e">featuregate&lt;/span>.&lt;span style="color:#a6e22e">FeatureGate&lt;/span>) (&lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 1、根据初始 KubeletServer 设置默认的特性
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">utilfeature&lt;/span>.&lt;span style="color:#a6e22e">DefaultMutableFeatureGate&lt;/span>.&lt;span style="color:#a6e22e">SetFromMap&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">KubeletConfiguration&lt;/span>.&lt;span style="color:#a6e22e">FeatureGates&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 2、验证初始的 KubeletServer(我们先设置了特性，因为这个验证依赖于特性)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">options&lt;/span>.&lt;span style="color:#a6e22e">ValidateKubeletServer&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 如果使用 cgroups v1 启用 MemoryQoS，则发出警告
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">utilfeature&lt;/span>.&lt;span style="color:#a6e22e">DefaultFeatureGate&lt;/span>.&lt;span style="color:#a6e22e">Enabled&lt;/span>(&lt;span style="color:#a6e22e">features&lt;/span>.&lt;span style="color:#a6e22e">MemoryQoS&lt;/span>) &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> !&lt;span style="color:#a6e22e">isCgroup2UnifiedMode&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 3、获取 kubelet 的锁文件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">ExitOnLockContention&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">LockFilePath&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 4、将当前的配置文件注册到 /configz 端点上，也就是说，通过 HTTP 访问 kubelet
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">initConfigz&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">KubeletConfiguration&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 5、即将获取 client，判断是否为 standalone 模式
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">standaloneMode&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> len(&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">KubeConfig&lt;/span>) &amp;gt; &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">standaloneMode&lt;/span> = &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 6、初始化 kubeDeps
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">kubeDeps&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">UnsecuredDependencies&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>, &lt;span style="color:#a6e22e">featureGate&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">hostName&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">nodeutil&lt;/span>.&lt;span style="color:#a6e22e">GetHostname&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">HostnameOverride&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">nodeName&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">getNodeName&lt;/span>(&lt;span style="color:#a6e22e">kubeDeps&lt;/span>.&lt;span style="color:#a6e22e">Cloud&lt;/span>, &lt;span style="color:#a6e22e">hostName&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 7、如果是 standalone 模式将所有 client 设置为 nil
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">switch&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">standaloneMode&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">kubeDeps&lt;/span>.&lt;span style="color:#a6e22e">KubeClient&lt;/span> = &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">kubeDeps&lt;/span>.&lt;span style="color:#a6e22e">EventClient&lt;/span> = &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">kubeDeps&lt;/span>.&lt;span style="color:#a6e22e">HeartbeatClient&lt;/span> = &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 8、为 kubeDeps 初始化 KubeClient、EventClient、HeartbeatClient 模块
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">kubeDeps&lt;/span>.&lt;span style="color:#a6e22e">KubeClient&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">kubeDeps&lt;/span>.&lt;span style="color:#a6e22e">EventClient&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">kubeDeps&lt;/span>.&lt;span style="color:#a6e22e">HeartbeatClient&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">clientConfig&lt;/span>, &lt;span style="color:#a6e22e">closeAllConns&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">buildKubeletClientConfig&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">s&lt;/span>, &lt;span style="color:#a6e22e">nodeName&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">kubeDeps&lt;/span>.&lt;span style="color:#a6e22e">KubeClient&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">clientset&lt;/span>.&lt;span style="color:#a6e22e">NewForConfig&lt;/span>(&lt;span style="color:#a6e22e">clientConfig&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">......&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 9、初始化 auth 模块
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">kubeDeps&lt;/span>.&lt;span style="color:#a6e22e">Auth&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">auth&lt;/span>, &lt;span style="color:#a6e22e">runAuthenticatorCAReload&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">BuildAuth&lt;/span>(&lt;span style="color:#a6e22e">nodeName&lt;/span>, &lt;span style="color:#a6e22e">kubeDeps&lt;/span>.&lt;span style="color:#a6e22e">KubeClient&lt;/span>, &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">KubeletConfiguration&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">kubeDeps&lt;/span>.&lt;span style="color:#a6e22e">Auth&lt;/span> = &lt;span style="color:#a6e22e">auth&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">runAuthenticatorCAReload&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>.&lt;span style="color:#a6e22e">Done&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 10、设置 CGroup Root
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">cgroupRoots&lt;/span> []&lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">nodeAllocatableRoot&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">cm&lt;/span>.&lt;span style="color:#a6e22e">NodeAllocatableRoot&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">CgroupRoot&lt;/span>, &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">CgroupsPerQOS&lt;/span>, &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">CgroupDriver&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">cgroupRoots&lt;/span> = append(&lt;span style="color:#a6e22e">cgroupRoots&lt;/span>, &lt;span style="color:#a6e22e">nodeAllocatableRoot&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">kubeletCgroup&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">cm&lt;/span>.&lt;span style="color:#a6e22e">GetKubeletContainer&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">KubeletCgroups&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 11、初始化 CAdvisor
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">kubeDeps&lt;/span>.&lt;span style="color:#a6e22e">CAdvisorInterface&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">imageFsInfoProvider&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">cadvisor&lt;/span>.&lt;span style="color:#a6e22e">NewImageFsInfoProvider&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">RemoteRuntimeEndpoint&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">kubeDeps&lt;/span>.&lt;span style="color:#a6e22e">CAdvisorInterface&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">cadvisor&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>(&lt;span style="color:#a6e22e">imageFsInfoProvider&lt;/span>, &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">RootDirectory&lt;/span>, &lt;span style="color:#a6e22e">cgroupRoots&lt;/span>, &lt;span style="color:#a6e22e">cadvisor&lt;/span>.&lt;span style="color:#a6e22e">UsingLegacyCadvisorStats&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">RemoteRuntimeEndpoint&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Setup event recorder if required.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">makeEventRecorder&lt;/span>(&lt;span style="color:#a6e22e">kubeDeps&lt;/span>, &lt;span style="color:#a6e22e">nodeName&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 12、初始化 ContainerManager(即.容器管理器)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">kubeDeps&lt;/span>.&lt;span style="color:#a6e22e">ContainerManager&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">......&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 14、为 kubelet 进程设置 oom 分数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// TODO(vmarmol): 通过container config执行此操作。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">oomAdjuster&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">kubeDeps&lt;/span>.&lt;span style="color:#a6e22e">OOMAdjuster&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 在 RunKubelet()(即.运行 kubelet) 初始化 runtime 服务
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">kubelet&lt;/span>.&lt;span style="color:#a6e22e">PreInitRuntimeService&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">KubeletConfiguration&lt;/span>, &lt;span style="color:#a6e22e">kubeDeps&lt;/span>, &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">RemoteRuntimeEndpoint&lt;/span>, &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">RemoteImageEndpoint&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 15、设置和运行 kubelet
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">RunKubelet&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>, &lt;span style="color:#a6e22e">kubeDeps&lt;/span>, &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">RunOnce&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 16、启动 Healthz http server
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">HealthzPort&lt;/span> &amp;gt; &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">mux&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">NewServeMux&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">healthz&lt;/span>.&lt;span style="color:#a6e22e">InstallHandler&lt;/span>(&lt;span style="color:#a6e22e">mux&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#a6e22e">wait&lt;/span>.&lt;span style="color:#a6e22e">Until&lt;/span>(&lt;span style="color:#66d9ef">func&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">ListenAndServe&lt;/span>(&lt;span style="color:#a6e22e">net&lt;/span>.&lt;span style="color:#a6e22e">JoinHostPort&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">HealthzBindAddress&lt;/span>, &lt;span style="color:#a6e22e">strconv&lt;/span>.&lt;span style="color:#a6e22e">Itoa&lt;/span>(int(&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">HealthzPort&lt;/span>))), &lt;span style="color:#a6e22e">mux&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }, &lt;span style="color:#ae81ff">5&lt;/span>&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Second&lt;/span>, &lt;span style="color:#a6e22e">wait&lt;/span>.&lt;span style="color:#a6e22e">NeverStop&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">RunOnce&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 17、如果使用了 systemd，则向 systemd 发送启动信号
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#a6e22e">daemon&lt;/span>.&lt;span style="color:#a6e22e">SdNotify&lt;/span>(&lt;span style="color:#66d9ef">false&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;READY=1&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">select&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">done&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">ctx&lt;/span>.&lt;span style="color:#a6e22e">Done&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="preinitruntimeservice--初始化-runtime">PreInitRuntimeService() # 初始化 runtime&lt;/h2>
&lt;p>源码：&lt;code>[pkg/kubelet/kubelet.go](https://github.com/kubernetes/kubernetes/blob/master/pkg/kubelet/kubelet.go)&lt;/code>
PreInitRuntimeService()&lt;/p>
&lt;h2 id="runkubelet--运行-kubelet">RunKubelet() # 运行 kubelet&lt;/h2>
&lt;p>&lt;code>RunKubelet()&lt;/code> 中主要是两个行为&lt;/p>
&lt;ul>
&lt;li>调用 &lt;code>createAndInitKubelet()&lt;/code> 执行 kubelet 组件的初始化&lt;/li>
&lt;li>然后调用 &lt;code>startKubelet()&lt;/code> 启动 kubelet 中的组件。&lt;/li>
&lt;/ul>
&lt;p>源码：&lt;code>cmd/kubelet/app/server.go&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">RunKubelet&lt;/span>(&lt;span style="color:#a6e22e">kubeServer&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">options&lt;/span>.&lt;span style="color:#a6e22e">KubeletServer&lt;/span>, &lt;span style="color:#a6e22e">kubeDeps&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">kubelet&lt;/span>.&lt;span style="color:#a6e22e">Dependencies&lt;/span>, &lt;span style="color:#a6e22e">runOnce&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">hostname&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">nodeutil&lt;/span>.&lt;span style="color:#a6e22e">GetHostname&lt;/span>(&lt;span style="color:#a6e22e">kubeServer&lt;/span>.&lt;span style="color:#a6e22e">HostnameOverride&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Query the cloud provider for our node name, default to hostname if kubeDeps.Cloud == nil
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">nodeName&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">getNodeName&lt;/span>(&lt;span style="color:#a6e22e">kubeDeps&lt;/span>.&lt;span style="color:#a6e22e">Cloud&lt;/span>, &lt;span style="color:#a6e22e">hostname&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">hostnameOverridden&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> len(&lt;span style="color:#a6e22e">kubeServer&lt;/span>.&lt;span style="color:#a6e22e">HostnameOverride&lt;/span>) &amp;gt; &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Setup event recorder if required.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">makeEventRecorder&lt;/span>(&lt;span style="color:#a6e22e">kubeDeps&lt;/span>, &lt;span style="color:#a6e22e">nodeName&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">nodeIPs&lt;/span> []&lt;span style="color:#a6e22e">net&lt;/span>.&lt;span style="color:#a6e22e">IP&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">kubeServer&lt;/span>.&lt;span style="color:#a6e22e">NodeIP&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">ip&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">strings&lt;/span>.&lt;span style="color:#a6e22e">Split&lt;/span>(&lt;span style="color:#a6e22e">kubeServer&lt;/span>.&lt;span style="color:#a6e22e">NodeIP&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;,&amp;#34;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">parsedNodeIP&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">netutils&lt;/span>.&lt;span style="color:#a6e22e">ParseIPSloppy&lt;/span>(&lt;span style="color:#a6e22e">strings&lt;/span>.&lt;span style="color:#a6e22e">TrimSpace&lt;/span>(&lt;span style="color:#a6e22e">ip&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">parsedNodeIP&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">InfoS&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Could not parse --node-ip ignoring&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;IP&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">ip&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">nodeIPs&lt;/span> = append(&lt;span style="color:#a6e22e">nodeIPs&lt;/span>, &lt;span style="color:#a6e22e">parsedNodeIP&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> len(&lt;span style="color:#a6e22e">nodeIPs&lt;/span>) &amp;gt; &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">||&lt;/span> (len(&lt;span style="color:#a6e22e">nodeIPs&lt;/span>) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#a6e22e">netutils&lt;/span>.&lt;span style="color:#a6e22e">IsIPv6&lt;/span>(&lt;span style="color:#a6e22e">nodeIPs&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>]) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">netutils&lt;/span>.&lt;span style="color:#a6e22e">IsIPv6&lt;/span>(&lt;span style="color:#a6e22e">nodeIPs&lt;/span>[&lt;span style="color:#ae81ff">1&lt;/span>])) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;bad --node-ip %q; must contain either a single IP or a dual-stack pair of IPs&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">kubeServer&lt;/span>.&lt;span style="color:#a6e22e">NodeIP&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> len(&lt;span style="color:#a6e22e">nodeIPs&lt;/span>) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#a6e22e">kubeServer&lt;/span>.&lt;span style="color:#a6e22e">CloudProvider&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;dual-stack --node-ip %q not supported when using a cloud provider&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">kubeServer&lt;/span>.&lt;span style="color:#a6e22e">NodeIP&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> len(&lt;span style="color:#a6e22e">nodeIPs&lt;/span>) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> (&lt;span style="color:#a6e22e">nodeIPs&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>].&lt;span style="color:#a6e22e">IsUnspecified&lt;/span>() &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#a6e22e">nodeIPs&lt;/span>[&lt;span style="color:#ae81ff">1&lt;/span>].&lt;span style="color:#a6e22e">IsUnspecified&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;dual-stack --node-ip %q cannot include &amp;#39;0.0.0.0&amp;#39; or &amp;#39;::&amp;#39;&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">kubeServer&lt;/span>.&lt;span style="color:#a6e22e">NodeIP&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 1、默认启动特权模式
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">capabilities&lt;/span>.&lt;span style="color:#a6e22e">Initialize&lt;/span>(&lt;span style="color:#a6e22e">capabilities&lt;/span>.&lt;span style="color:#a6e22e">Capabilities&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">AllowPrivileged&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">credentialprovider&lt;/span>.&lt;span style="color:#a6e22e">SetPreferredDockercfgPath&lt;/span>(&lt;span style="color:#a6e22e">kubeServer&lt;/span>.&lt;span style="color:#a6e22e">RootDirectory&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">V&lt;/span>(&lt;span style="color:#ae81ff">2&lt;/span>).&lt;span style="color:#a6e22e">InfoS&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Using root directory&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;path&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">kubeServer&lt;/span>.&lt;span style="color:#a6e22e">RootDirectory&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">kubeDeps&lt;/span>.&lt;span style="color:#a6e22e">OSInterface&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">kubeDeps&lt;/span>.&lt;span style="color:#a6e22e">OSInterface&lt;/span> = &lt;span style="color:#a6e22e">kubecontainer&lt;/span>.&lt;span style="color:#a6e22e">RealOS&lt;/span>{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">kubeServer&lt;/span>.&lt;span style="color:#a6e22e">KubeletConfiguration&lt;/span>.&lt;span style="color:#a6e22e">SeccompDefault&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> !&lt;span style="color:#a6e22e">utilfeature&lt;/span>.&lt;span style="color:#a6e22e">DefaultFeatureGate&lt;/span>.&lt;span style="color:#a6e22e">Enabled&lt;/span>(&lt;span style="color:#a6e22e">features&lt;/span>.&lt;span style="color:#a6e22e">SeccompDefault&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;the SeccompDefault feature gate must be enabled in order to use the SeccompDefault configuration&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 2、调用 createAndInitKubelet() 函数，以初始化 kubelet
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">k&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">createAndInitKubelet&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">kubeServer&lt;/span>.&lt;span style="color:#a6e22e">KubeletConfiguration&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">kubeDeps&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">kubeServer&lt;/span>.&lt;span style="color:#a6e22e">ContainerRuntimeOptions&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">hostname&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">hostnameOverridden&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">nodeName&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">nodeIPs&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">kubeServer&lt;/span>.&lt;span style="color:#a6e22e">ProviderID&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">kubeServer&lt;/span>.&lt;span style="color:#a6e22e">CloudProvider&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">kubeServer&lt;/span>.&lt;span style="color:#a6e22e">CertDirectory&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">kubeServer&lt;/span>.&lt;span style="color:#a6e22e">RootDirectory&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">kubeServer&lt;/span>.&lt;span style="color:#a6e22e">ImageCredentialProviderConfigFile&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">kubeServer&lt;/span>.&lt;span style="color:#a6e22e">ImageCredentialProviderBinDir&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">kubeServer&lt;/span>.&lt;span style="color:#a6e22e">RegisterNode&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">kubeServer&lt;/span>.&lt;span style="color:#a6e22e">RegisterWithTaints&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">kubeServer&lt;/span>.&lt;span style="color:#a6e22e">AllowedUnsafeSysctls&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">kubeServer&lt;/span>.&lt;span style="color:#a6e22e">ExperimentalMounterPath&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">kubeServer&lt;/span>.&lt;span style="color:#a6e22e">KernelMemcgNotification&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">kubeServer&lt;/span>.&lt;span style="color:#a6e22e">ExperimentalCheckNodeCapabilitiesBeforeMount&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">kubeServer&lt;/span>.&lt;span style="color:#a6e22e">ExperimentalNodeAllocatableIgnoreEvictionThreshold&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">kubeServer&lt;/span>.&lt;span style="color:#a6e22e">MinimumGCAge&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">kubeServer&lt;/span>.&lt;span style="color:#a6e22e">MaxPerPodContainerCount&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">kubeServer&lt;/span>.&lt;span style="color:#a6e22e">MaxContainerCount&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">kubeServer&lt;/span>.&lt;span style="color:#a6e22e">MasterServiceNamespace&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">kubeServer&lt;/span>.&lt;span style="color:#a6e22e">RegisterSchedulable&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">kubeServer&lt;/span>.&lt;span style="color:#a6e22e">KeepTerminatedPodVolumes&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">kubeServer&lt;/span>.&lt;span style="color:#a6e22e">NodeLabels&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">kubeServer&lt;/span>.&lt;span style="color:#a6e22e">NodeStatusMaxImages&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">kubeServer&lt;/span>.&lt;span style="color:#a6e22e">KubeletFlags&lt;/span>.&lt;span style="color:#a6e22e">SeccompDefault&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#a6e22e">kubeServer&lt;/span>.&lt;span style="color:#a6e22e">KubeletConfiguration&lt;/span>.&lt;span style="color:#a6e22e">SeccompDefault&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;failed to create kubelet: %w&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// NewMainKubelet should have set up a pod source config if one didn&amp;#39;t exist
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// when the builder was run. This is just a precaution.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">kubeDeps&lt;/span>.&lt;span style="color:#a6e22e">PodConfig&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;failed to create kubelet, pod source config was nil&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">podCfg&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">kubeDeps&lt;/span>.&lt;span style="color:#a6e22e">PodConfig&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">rlimit&lt;/span>.&lt;span style="color:#a6e22e">SetNumFiles&lt;/span>(uint64(&lt;span style="color:#a6e22e">kubeServer&lt;/span>.&lt;span style="color:#a6e22e">MaxOpenFiles&lt;/span>)); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">ErrorS&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Failed to set rlimit on max file handles&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// process pods and exit.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">runOnce&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">k&lt;/span>.&lt;span style="color:#a6e22e">RunOnce&lt;/span>(&lt;span style="color:#a6e22e">podCfg&lt;/span>.&lt;span style="color:#a6e22e">Updates&lt;/span>()); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;runonce failed: %w&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">InfoS&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Started kubelet as runonce&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 3、调用 startKubelet() 函数继续执行后续 kubelet 启动逻辑
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">startKubelet&lt;/span>(&lt;span style="color:#a6e22e">k&lt;/span>, &lt;span style="color:#a6e22e">podCfg&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">kubeServer&lt;/span>.&lt;span style="color:#a6e22e">KubeletConfiguration&lt;/span>, &lt;span style="color:#a6e22e">kubeDeps&lt;/span>, &lt;span style="color:#a6e22e">kubeServer&lt;/span>.&lt;span style="color:#a6e22e">EnableServer&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">InfoS&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Started kubelet&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="createandinitkubelet--初始化-kubelet">createAndInitKubelet() # 初始化 kubelet&lt;/h2>
&lt;p>&lt;code>createAndInitKubelet()&lt;/code> 中主要调用了 一个函数，两个方法 来完成 kubelet 的初始化：&lt;/p>
&lt;ul>
&lt;li>&lt;code>NewMainKubelet()&lt;/code> # 实例化 kubelet 对象，并对 kubelet 依赖的所有模块进行初始化；&lt;/li>
&lt;li>&lt;code>kubelet.BirthCry()&lt;/code> # 向 apiserver 发送一条 kubelet 启动了的 event；&lt;/li>
&lt;li>&lt;code>kubelet.StartGarbageCollection&lt;/code> # 启动垃圾回收服务，回收 container 和 images；&lt;/li>
&lt;/ul>
&lt;p>代码：&lt;code>cmd/kubelet/app/server.go&lt;/code>&lt;/p>
&lt;h3 id="newmainkubelet--实例化-kubelet">NewMainKubelet() # 实例化 kubelet&lt;/h3>
&lt;p>&lt;code>NewMainKubelet()&lt;/code> 是初始化 kubelet 的一个函数，主要逻辑为：&lt;/p>
&lt;ul>
&lt;li>初始化 PodConfig 即监听 pod 元数据的来源(file，http，apiserver)，将不同 source 的 pod configuration 合并到一个结构中；&lt;/li>
&lt;li>初始化 containerGCPolicy、imageGCPolicy、evictionConfig 配置；&lt;/li>
&lt;li>启动 serviceInformer 和 nodeInformer；&lt;/li>
&lt;li>初始化 containerRefManager、oomWatcher；&lt;/li>
&lt;li>初始化 kubelet 对象；&lt;/li>
&lt;li>初始化 secretManager、configMapManager；&lt;/li>
&lt;li>初始化 livenessManager、podManager、statusManager、resourceAnalyzer；&lt;/li>
&lt;li>调用 kuberuntime.NewKubeGenericRuntimeManager 初始化 containerRuntime；&lt;/li>
&lt;li>初始化 pleg；&lt;/li>
&lt;li>初始化 containerGC、containerDeletor、imageManager、containerLogManager；&lt;/li>
&lt;li>初始化 serverCertificateManager、probeManager、tokenManager、volumePluginMgr、pluginManager、volumeManager；&lt;/li>
&lt;li>初始化 workQueue、podWorkers、evictionManager；&lt;/li>
&lt;li>最后注册相关模块的 handler；&lt;/li>
&lt;/ul>
&lt;p>&lt;code>NewMainKubelet()&lt;/code> 中对 kubelet 依赖的所有模块进行了初始化，每个模块对应的功能在上篇文章“kubelet 架构浅析”有介绍，至于每个模块初始化的流程以及功能会在后面的文章中进行详细分析。&lt;/p>
&lt;p>源码：&lt;code>pkg/kubelet/kubelet.go&lt;/code>&lt;/p>
&lt;h2 id="startkubelet--开始运行-kubelet并监听端口">startKubelet() # 开始运行 kubelet，并监听端口&lt;/h2>
&lt;p>在 &lt;code>startKubelet()&lt;/code> 中通过调用 &lt;code>k.Run()&lt;/code> 来启动 kubelet 中的所有模块以及主流程，然后启动 kubelet 所需要的 http server，在 v1.16 中，kubelet 默认仅启动健康检查端口 10248 和 kubelet server 的端口 10250。&lt;/p>
&lt;p>源码：&lt;code>cmd/kubelet/app/server.go&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">startKubelet&lt;/span>(&lt;span style="color:#a6e22e">k&lt;/span> &lt;span style="color:#a6e22e">kubelet&lt;/span>.&lt;span style="color:#a6e22e">Bootstrap&lt;/span>, &lt;span style="color:#a6e22e">podCfg&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">config&lt;/span>.&lt;span style="color:#a6e22e">PodConfig&lt;/span>, &lt;span style="color:#a6e22e">kubeCfg&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">kubeletconfiginternal&lt;/span>.&lt;span style="color:#a6e22e">KubeletConfiguration&lt;/span>, &lt;span style="color:#a6e22e">kubeDeps&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">kubelet&lt;/span>.&lt;span style="color:#a6e22e">Dependencies&lt;/span>, &lt;span style="color:#a6e22e">enableServer&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// kubelet 真正启动，在这里面会有开始同步循环并监听 Pod 的逻辑调用，即启动 syncLoop
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#a6e22e">k&lt;/span>.&lt;span style="color:#a6e22e">Run&lt;/span>(&lt;span style="color:#a6e22e">podCfg&lt;/span>.&lt;span style="color:#a6e22e">Updates&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 同时启动 kubelet 的 HTTP 服务，并开始监听端口
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">enableServer&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#a6e22e">k&lt;/span>.&lt;span style="color:#a6e22e">ListenAndServe&lt;/span>(&lt;span style="color:#a6e22e">kubeCfg&lt;/span>, &lt;span style="color:#a6e22e">kubeDeps&lt;/span>.&lt;span style="color:#a6e22e">TLSOptions&lt;/span>, &lt;span style="color:#a6e22e">kubeDeps&lt;/span>.&lt;span style="color:#a6e22e">Auth&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">kubeCfg&lt;/span>.&lt;span style="color:#a6e22e">ReadOnlyPort&lt;/span> &amp;gt; &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#a6e22e">k&lt;/span>.&lt;span style="color:#a6e22e">ListenAndServeReadOnly&lt;/span>(&lt;span style="color:#a6e22e">netutils&lt;/span>.&lt;span style="color:#a6e22e">ParseIPSloppy&lt;/span>(&lt;span style="color:#a6e22e">kubeCfg&lt;/span>.&lt;span style="color:#a6e22e">Address&lt;/span>), uint(&lt;span style="color:#a6e22e">kubeCfg&lt;/span>.&lt;span style="color:#a6e22e">ReadOnlyPort&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">utilfeature&lt;/span>.&lt;span style="color:#a6e22e">DefaultFeatureGate&lt;/span>.&lt;span style="color:#a6e22e">Enabled&lt;/span>(&lt;span style="color:#a6e22e">features&lt;/span>.&lt;span style="color:#a6e22e">KubeletPodResources&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#a6e22e">k&lt;/span>.&lt;span style="color:#a6e22e">ListenAndServePodResources&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="运行">运行&lt;/h1>
&lt;h2 id="kubeletrun">kubelet.Run()&lt;/h2>
&lt;p>&lt;code>kubelet.Run()&lt;/code> 方法是&lt;strong>启动 kubelet 的核心方法&lt;/strong>，其中会启动 kubelet 的依赖模块以及主循环逻辑，这是实现了 &lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes%20%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/Kubernetes%20%E5%BC%80%E5%8F%91/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/Kubelet%20%E6%BA%90%E7%A0%81.md#Bootstrap%20%E6%8E%A5%E5%8F%A3">Bootstrap&lt;/a> 接口的 &lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes%20%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/Kubernetes%20%E5%BC%80%E5%8F%91/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/Kubelet%20%E6%BA%90%E7%A0%81.md#Kubelet%20%E7%BB%93%E6%9E%84%E4%BD%93">Kubelet&lt;/a> 结构体的方法。该方法的主要逻辑为：&lt;/p>
&lt;ul>
&lt;li>注册 logServer；&lt;/li>
&lt;li>判断是否需要启动 cloud provider sync manager；&lt;/li>
&lt;li>调用 kl.initializeModules 首先启动不依赖 container runtime 的一些模块；&lt;/li>
&lt;li>启动 volume manager；&lt;/li>
&lt;li>执行 kl.syncNodeStatus 定时同步 Node 状态；&lt;/li>
&lt;li>调用 kl.fastStatusUpdateOnce 更新容器运行时启动时间以及执行首次状态同步；&lt;/li>
&lt;li>判断是否启用 NodeLease 机制；&lt;/li>
&lt;li>执行 kl.updateRuntimeUp 定时更新 Runtime 状态；&lt;/li>
&lt;li>执行 kl.syncNetworkUtil 定时同步 iptables 规则；&lt;/li>
&lt;li>执行 kl.podKiller 定时清理异常 pod，当 pod 没有被 podworker 正确处理的时候，启动一个 goroutine 负责 kill 掉 pod；&lt;/li>
&lt;li>启动 statusManager；&lt;/li>
&lt;li>启动 probeManager；&lt;/li>
&lt;li>启动 runtimeClassManager；&lt;/li>
&lt;li>启动 pleg；&lt;/li>
&lt;li>调用 kl.syncLoop 监听 pod 变化；&lt;/li>
&lt;/ul>
&lt;p>在 &lt;code>kubelet.Run()&lt;/code> 方法中主要调用了两个方法 kl.initializeModules 和 kl.fastStatusUpdateOnce 来完成启动前的一些初始化，在初始化完所有的模块后会启动主循环。&lt;/p>
&lt;p>源码：&lt;code>pkg/kubelet/kubelet.go&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">kl&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Kubelet&lt;/span>) &lt;span style="color:#a6e22e">Run&lt;/span>(&lt;span style="color:#a6e22e">updates&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#a6e22e">kubetypes&lt;/span>.&lt;span style="color:#a6e22e">PodUpdate&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 1、在 HTTP Server 的 /logs/ 端点上注册日志服务
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">logServer&lt;/span> = &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">StripPrefix&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/logs/&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">FileServer&lt;/span>(&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Dir&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/var/log/&amp;#34;&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 2、判断是否需要启动云提供商的同步管理器
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">cloudResourceSyncManager&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">cloudResourceSyncManager&lt;/span>.&lt;span style="color:#a6e22e">Run&lt;/span>(&lt;span style="color:#a6e22e">wait&lt;/span>.&lt;span style="color:#a6e22e">NeverStop&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 3、调用 kubelet.initializeModules 首先启动不依赖容器 runtime 的一些模块
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">initializeModules&lt;/span>(); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">recorder&lt;/span>.&lt;span style="color:#a6e22e">Eventf&lt;/span>(&lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">nodeRef&lt;/span>, &lt;span style="color:#a6e22e">v1&lt;/span>.&lt;span style="color:#a6e22e">EventTypeWarning&lt;/span>, &lt;span style="color:#a6e22e">events&lt;/span>.&lt;span style="color:#a6e22e">KubeletSetupFailed&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>.&lt;span style="color:#a6e22e">Error&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 4、启动 Volume 管理器
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">volumeManager&lt;/span>.&lt;span style="color:#a6e22e">Run&lt;/span>(&lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">sourcesReady&lt;/span>, &lt;span style="color:#a6e22e">wait&lt;/span>.&lt;span style="color:#a6e22e">NeverStop&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">kubeClient&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Introduce some small jittering to ensure that over time the requests won&amp;#39;t start
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// accumulating at approximately the same time from the set of nodes due to priority and
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// fairness effect.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 5、执行 kl.syncNodeStatus 定时同步 Node 状态
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#a6e22e">wait&lt;/span>.&lt;span style="color:#a6e22e">JitterUntil&lt;/span>(&lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">syncNodeStatus&lt;/span>, &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">nodeStatusUpdateFrequency&lt;/span>, &lt;span style="color:#ae81ff">0.04&lt;/span>, &lt;span style="color:#66d9ef">true&lt;/span>, &lt;span style="color:#a6e22e">wait&lt;/span>.&lt;span style="color:#a6e22e">NeverStop&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 6、调用 kl.fastStatusUpdateOnce 更新容器运行时启动时间以及执行首次状态同步
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">fastStatusUpdateOnce&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 7、弃用 NodeLease 机制
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">nodeLeaseController&lt;/span>.&lt;span style="color:#a6e22e">Run&lt;/span>(&lt;span style="color:#a6e22e">wait&lt;/span>.&lt;span style="color:#a6e22e">NeverStop&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 8、执行 kl.updateRuntimeUp 定时更新 Runtime 状态
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#a6e22e">wait&lt;/span>.&lt;span style="color:#a6e22e">Until&lt;/span>(&lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">updateRuntimeUp&lt;/span>, &lt;span style="color:#ae81ff">5&lt;/span>&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Second&lt;/span>, &lt;span style="color:#a6e22e">wait&lt;/span>.&lt;span style="color:#a6e22e">NeverStop&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 9、执行 kl.syncNetworkUtil 定时同步 iptables 规则
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">makeIPTablesUtilChains&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">initNetworkUtil&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Start component sync loops.(启动组件的同步循环)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">statusManager&lt;/span>.&lt;span style="color:#a6e22e">Start&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 启动 runtime 类管理器
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">runtimeClassManager&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">runtimeClassManager&lt;/span>.&lt;span style="color:#a6e22e">Start&lt;/span>(&lt;span style="color:#a6e22e">wait&lt;/span>.&lt;span style="color:#a6e22e">NeverStop&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 启动 Pod 生命周期事件生成器
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">pleg&lt;/span>.&lt;span style="color:#a6e22e">Start&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 13、调用 kubelet.syncLoop 监听 Pod 变化
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">syncLoop&lt;/span>(&lt;span style="color:#a6e22e">updates&lt;/span>, &lt;span style="color:#a6e22e">kl&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="kubeletinitializemodules--启动不依赖容器-runtime-的模块">kubelet.initializeModules() # 启动不依赖容器 Runtime 的模块&lt;/h3>
&lt;p>&lt;code>initializeModules()&lt;/code> 中启动的模块是不依赖于容器 Runtime 的，并且不依赖于尚未初始化的模块，其主要逻辑为：&lt;/p>
&lt;ul>
&lt;li>调用 kl.setupDataDirs 创建 kubelet 所需要的文件目录；&lt;/li>
&lt;li>创建 ContainerLogsDir /var/log/containers；&lt;/li>
&lt;li>启动 imageManager，image gc 的功能已经在 RunKubelet 中启动了，此处主要是监控 image 的变化；&lt;/li>
&lt;li>启动 certificateManager，负责证书更新；&lt;/li>
&lt;li>启动 oomWatcher，监听 oom 并记录事件；&lt;/li>
&lt;li>启动 resourceAnalyzer；&lt;/li>
&lt;/ul>
&lt;h3 id="kubeletfaststatusupdateonce">kubelet.fastStatusUpdateOnce()&lt;/h3>
&lt;p>&lt;code>fastStatusUpdateOnce()&lt;/code> 会不断尝试更新 pod CIDR，一旦更新成功会立即执行 updateRuntimeUp 和 syncNodeStatus 来进行运行时的更新和节点状态更新。此方法只在 kubelet 启动时执行一次，目的是为了通过更新 pod CIDR，减少节点达到 ready 状态的时延，尽可能快的进行 runtime update 和 node status update。&lt;/p>
&lt;h3 id="kubeletupdateruntimeup--启动依赖容器-runtime-的模块">kubelet.updateRuntimeUp() # 启动依赖容器 Runtime 的模块&lt;/h3>
&lt;p>&lt;code>updateRuntimeUp()&lt;/code> 方法在容器运行时首次启动过程中初始化运行时依赖的模块，并在 kubelet 的 runtimeState 中更新容器运行时的启动时间。updateRuntimeUp() 方法主要逻辑：&lt;/p>
&lt;ul>
&lt;li>获取容器运行时状态&lt;/li>
&lt;li>检查 network 以及 runtime 是否处于 ready 状态&lt;/li>
&lt;li>如果 network 以及 runtime 都处于 ready 状态，则调用 &lt;code>kubelet.initializeRuntimeDependentModules()&lt;/code> 初始化依赖容器 Runtime 的模块：
&lt;ul>
&lt;li>包括 cadvisor、containerManager、evictionManager、containerLogManager、pluginManage 等。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="kubeletinitializeruntimedependentmodules--启动依赖容器-runtime-的模块">kubelet.initializeRuntimeDependentModules() # 启动依赖容器 Runtime 的模块&lt;/h3>
&lt;p>该方法的主要逻辑为：&lt;/p>
&lt;ul>
&lt;li>启动 cadvisor；&lt;/li>
&lt;li>获取 CgroupStats；&lt;/li>
&lt;li>启动 containerManager、evictionManager、containerLogManager；&lt;/li>
&lt;li>将 CSI Driver 和 Device Manager 注册到 pluginManager，然后启动 pluginManager；&lt;/li>
&lt;/ul>
&lt;h1 id="kubeletsyncloop--同步循环kubelet-开始运行">kubelet.syncLoop() # 同步循环，Kubelet 开始运行&lt;/h1>
&lt;p>相见[《Kubelet 同步循环》](SyncLoop 模块 # Kubelet 同步循环.md)章节&lt;/p></description></item><item><title>Docs: PodWorker 模块</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/Kubernetes-%E5%BC%80%E5%8F%91/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/Kubelet-%E6%BA%90%E7%A0%81/PodWorker-%E6%A8%A1%E5%9D%97/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/Kubernetes-%E5%BC%80%E5%8F%91/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/Kubelet-%E6%BA%90%E7%A0%81/PodWorker-%E6%A8%A1%E5%9D%97/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;p>PodWorkers 子模块主要的作用就是处理针对每一个的 Pod 的更新事件，比如 Pod 的创建，删除，更新。而 podWorkers 采取的基本思路是：为每一个 Pod 都单独创建一个 goroutine 和更新事件的 channel，goroutine 会阻塞式的等待 channel 中的事件，并且对获取的事件进行处理。而 podWorkers 对象自身则主要负责对更新事件进行下发。&lt;/p>
&lt;h1 id="准备运行-pod">准备运行 Pod&lt;/h1>
&lt;h2 id="podworkersupdatepod--更新事件的-channel">podWorkers.UpdatePod() # 更新事件的 channel&lt;/h2>
&lt;p>updatePod 将配置更改或终止状态传递到 POD。 POD 可以是可变的，终止或终止，并且如果在 APIServer 上删除，则将转换为终止，它被发现具有终端阶段（成功或失败），或者如果它被 kubelet 驱逐。&lt;/p>
&lt;p>为每一个 Pod 都单独创建一个 goroutine 和更新事件的 channel，goroutine 会阻塞式的等待 channel 中的事件，并且对获取的事件进行处理。而 podWorkers 对象自身则主要负责对更新事件进行下发。&lt;/p>
&lt;p>源码：&lt;code>pkg/kubelet/pod_workers.go&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">podWorkers&lt;/span>) &lt;span style="color:#a6e22e">UpdatePod&lt;/span>(&lt;span style="color:#a6e22e">options&lt;/span> &lt;span style="color:#a6e22e">UpdatePodOptions&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 处理当 Pod 是孤儿(无配置)并且我们仅通过仅运行生命周期的终止部分来获得运行时状态
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">pod&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">options&lt;/span>.&lt;span style="color:#a6e22e">Pod&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">isRuntimePod&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">options&lt;/span>.&lt;span style="color:#a6e22e">RunningPod&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">options&lt;/span>.&lt;span style="color:#a6e22e">Pod&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">pod&lt;/span> = &lt;span style="color:#a6e22e">options&lt;/span>.&lt;span style="color:#a6e22e">RunningPod&lt;/span>.&lt;span style="color:#a6e22e">ToAPIPod&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">options&lt;/span>.&lt;span style="color:#a6e22e">UpdateType&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#a6e22e">kubetypes&lt;/span>.&lt;span style="color:#a6e22e">SyncPodKill&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">InfoS&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Pod update is ignored, runtime pods can only be killed&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;pod&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">KObj&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>), &lt;span style="color:#e6db74">&amp;#34;podUID&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">pod&lt;/span>.&lt;span style="color:#a6e22e">UID&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">options&lt;/span>.&lt;span style="color:#a6e22e">Pod&lt;/span> = &lt;span style="color:#a6e22e">pod&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">isRuntimePod&lt;/span> = &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">options&lt;/span>.&lt;span style="color:#a6e22e">RunningPod&lt;/span> = &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">InfoS&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Pod update included RunningPod which is only valid when Pod is not specified&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;pod&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">KObj&lt;/span>(&lt;span style="color:#a6e22e">options&lt;/span>.&lt;span style="color:#a6e22e">Pod&lt;/span>), &lt;span style="color:#e6db74">&amp;#34;podUID&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">options&lt;/span>.&lt;span style="color:#a6e22e">Pod&lt;/span>.&lt;span style="color:#a6e22e">UID&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">uid&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">pod&lt;/span>.&lt;span style="color:#a6e22e">UID&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">podLock&lt;/span>.&lt;span style="color:#a6e22e">Lock&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">podLock&lt;/span>.&lt;span style="color:#a6e22e">Unlock&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// decide what to do with this pod - we are either setting it up, tearing it down, or ignoring it
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">now&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Now&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">status&lt;/span>, &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">podSyncStatuses&lt;/span>[&lt;span style="color:#a6e22e">uid&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">ok&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">V&lt;/span>(&lt;span style="color:#ae81ff">4&lt;/span>).&lt;span style="color:#a6e22e">InfoS&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Pod is being synced for the first time&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;pod&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">KObj&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>), &lt;span style="color:#e6db74">&amp;#34;podUID&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">pod&lt;/span>.&lt;span style="color:#a6e22e">UID&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">status&lt;/span> = &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">podSyncStatus&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">syncedAt&lt;/span>: &lt;span style="color:#a6e22e">now&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fullname&lt;/span>: &lt;span style="color:#a6e22e">kubecontainer&lt;/span>.&lt;span style="color:#a6e22e">GetPodFullName&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// if this pod is being synced for the first time, we need to make sure it is an active pod
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">isRuntimePod&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> (&lt;span style="color:#a6e22e">pod&lt;/span>.&lt;span style="color:#a6e22e">Status&lt;/span>.&lt;span style="color:#a6e22e">Phase&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">v1&lt;/span>.&lt;span style="color:#a6e22e">PodFailed&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#a6e22e">pod&lt;/span>.&lt;span style="color:#a6e22e">Status&lt;/span>.&lt;span style="color:#a6e22e">Phase&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">v1&lt;/span>.&lt;span style="color:#a6e22e">PodSucceeded&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// check to see if the pod is not running and the pod is terminal.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// If this succeeds then record in the podWorker that it is terminated.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">statusCache&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">podCache&lt;/span>.&lt;span style="color:#a6e22e">Get&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>.&lt;span style="color:#a6e22e">UID&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">isPodStatusCacheTerminal&lt;/span>(&lt;span style="color:#a6e22e">statusCache&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">status&lt;/span> = &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">podSyncStatus&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">terminatedAt&lt;/span>: &lt;span style="color:#a6e22e">now&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">terminatingAt&lt;/span>: &lt;span style="color:#a6e22e">now&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">syncedAt&lt;/span>: &lt;span style="color:#a6e22e">now&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">startedTerminating&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">finished&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fullname&lt;/span>: &lt;span style="color:#a6e22e">kubecontainer&lt;/span>.&lt;span style="color:#a6e22e">GetPodFullName&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">podSyncStatuses&lt;/span>[&lt;span style="color:#a6e22e">uid&lt;/span>] = &lt;span style="color:#a6e22e">status&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// if an update is received that implies the pod should be running, but we are already terminating a pod by
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// that UID, assume that two pods with the same UID were created in close temporal proximity (usually static
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// pod but it&amp;#39;s possible for an apiserver to extremely rarely do something similar) - flag the sync status
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// to indicate that after the pod terminates it should be reset to &amp;#34;not running&amp;#34; to allow a subsequent add/update
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// to start the pod worker again
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">status&lt;/span>.&lt;span style="color:#a6e22e">IsTerminationRequested&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">options&lt;/span>.&lt;span style="color:#a6e22e">UpdateType&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">kubetypes&lt;/span>.&lt;span style="color:#a6e22e">SyncPodCreate&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">status&lt;/span>.&lt;span style="color:#a6e22e">restartRequested&lt;/span> = &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">V&lt;/span>(&lt;span style="color:#ae81ff">4&lt;/span>).&lt;span style="color:#a6e22e">InfoS&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Pod is terminating but has been requested to restart with same UID, will be reconciled later&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;pod&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">KObj&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>), &lt;span style="color:#e6db74">&amp;#34;podUID&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">pod&lt;/span>.&lt;span style="color:#a6e22e">UID&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// once a pod is terminated by UID, it cannot reenter the pod worker (until the UID is purged by housekeeping)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">status&lt;/span>.&lt;span style="color:#a6e22e">IsFinished&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">V&lt;/span>(&lt;span style="color:#ae81ff">4&lt;/span>).&lt;span style="color:#a6e22e">InfoS&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Pod is finished processing, no further updates&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;pod&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">KObj&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>), &lt;span style="color:#e6db74">&amp;#34;podUID&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">pod&lt;/span>.&lt;span style="color:#a6e22e">UID&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// check for a transition to terminating
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">becameTerminating&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">status&lt;/span>.&lt;span style="color:#a6e22e">IsTerminationRequested&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">switch&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">isRuntimePod&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">V&lt;/span>(&lt;span style="color:#ae81ff">4&lt;/span>).&lt;span style="color:#a6e22e">InfoS&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Pod is orphaned and must be torn down&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;pod&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">KObj&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>), &lt;span style="color:#e6db74">&amp;#34;podUID&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">pod&lt;/span>.&lt;span style="color:#a6e22e">UID&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">status&lt;/span>.&lt;span style="color:#a6e22e">deleted&lt;/span> = &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">status&lt;/span>.&lt;span style="color:#a6e22e">terminatingAt&lt;/span> = &lt;span style="color:#a6e22e">now&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">becameTerminating&lt;/span> = &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">pod&lt;/span>.&lt;span style="color:#a6e22e">DeletionTimestamp&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">V&lt;/span>(&lt;span style="color:#ae81ff">4&lt;/span>).&lt;span style="color:#a6e22e">InfoS&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Pod is marked for graceful deletion, begin teardown&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;pod&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">KObj&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>), &lt;span style="color:#e6db74">&amp;#34;podUID&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">pod&lt;/span>.&lt;span style="color:#a6e22e">UID&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">status&lt;/span>.&lt;span style="color:#a6e22e">deleted&lt;/span> = &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">status&lt;/span>.&lt;span style="color:#a6e22e">terminatingAt&lt;/span> = &lt;span style="color:#a6e22e">now&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">becameTerminating&lt;/span> = &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">pod&lt;/span>.&lt;span style="color:#a6e22e">Status&lt;/span>.&lt;span style="color:#a6e22e">Phase&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">v1&lt;/span>.&lt;span style="color:#a6e22e">PodFailed&lt;/span>, &lt;span style="color:#a6e22e">pod&lt;/span>.&lt;span style="color:#a6e22e">Status&lt;/span>.&lt;span style="color:#a6e22e">Phase&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">v1&lt;/span>.&lt;span style="color:#a6e22e">PodSucceeded&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">V&lt;/span>(&lt;span style="color:#ae81ff">4&lt;/span>).&lt;span style="color:#a6e22e">InfoS&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Pod is in a terminal phase (success/failed), begin teardown&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;pod&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">KObj&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>), &lt;span style="color:#e6db74">&amp;#34;podUID&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">pod&lt;/span>.&lt;span style="color:#a6e22e">UID&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">status&lt;/span>.&lt;span style="color:#a6e22e">terminatingAt&lt;/span> = &lt;span style="color:#a6e22e">now&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">becameTerminating&lt;/span> = &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">options&lt;/span>.&lt;span style="color:#a6e22e">UpdateType&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">kubetypes&lt;/span>.&lt;span style="color:#a6e22e">SyncPodKill&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">options&lt;/span>.&lt;span style="color:#a6e22e">KillPodOptions&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#a6e22e">options&lt;/span>.&lt;span style="color:#a6e22e">KillPodOptions&lt;/span>.&lt;span style="color:#a6e22e">Evict&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">V&lt;/span>(&lt;span style="color:#ae81ff">4&lt;/span>).&lt;span style="color:#a6e22e">InfoS&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Pod is being evicted by the kubelet, begin teardown&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;pod&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">KObj&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>), &lt;span style="color:#e6db74">&amp;#34;podUID&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">pod&lt;/span>.&lt;span style="color:#a6e22e">UID&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">status&lt;/span>.&lt;span style="color:#a6e22e">evicted&lt;/span> = &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">V&lt;/span>(&lt;span style="color:#ae81ff">4&lt;/span>).&lt;span style="color:#a6e22e">InfoS&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Pod is being removed by the kubelet, begin teardown&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;pod&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">KObj&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>), &lt;span style="color:#e6db74">&amp;#34;podUID&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">pod&lt;/span>.&lt;span style="color:#a6e22e">UID&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">status&lt;/span>.&lt;span style="color:#a6e22e">terminatingAt&lt;/span> = &lt;span style="color:#a6e22e">now&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">becameTerminating&lt;/span> = &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// once a pod is terminating, all updates are kills and the grace period can only decrease
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">workType&lt;/span> &lt;span style="color:#a6e22e">PodWorkType&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">wasGracePeriodShortened&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">switch&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">status&lt;/span>.&lt;span style="color:#a6e22e">IsTerminated&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// A terminated pod may still be waiting for cleanup - if we receive a runtime pod kill request
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// due to housekeeping seeing an older cached version of the runtime pod simply ignore it until
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// after the pod worker completes.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">isRuntimePod&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">V&lt;/span>(&lt;span style="color:#ae81ff">3&lt;/span>).&lt;span style="color:#a6e22e">InfoS&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Pod is waiting for termination, ignoring runtime-only kill until after pod worker is fully terminated&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;pod&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">KObj&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>), &lt;span style="color:#e6db74">&amp;#34;podUID&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">pod&lt;/span>.&lt;span style="color:#a6e22e">UID&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">workType&lt;/span> = &lt;span style="color:#a6e22e">TerminatedPodWork&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">options&lt;/span>.&lt;span style="color:#a6e22e">KillPodOptions&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">ch&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">options&lt;/span>.&lt;span style="color:#a6e22e">KillPodOptions&lt;/span>.&lt;span style="color:#a6e22e">CompletedCh&lt;/span>; &lt;span style="color:#a6e22e">ch&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> close(&lt;span style="color:#a6e22e">ch&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">options&lt;/span>.&lt;span style="color:#a6e22e">KillPodOptions&lt;/span> = &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">status&lt;/span>.&lt;span style="color:#a6e22e">IsTerminationRequested&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">workType&lt;/span> = &lt;span style="color:#a6e22e">TerminatingPodWork&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">options&lt;/span>.&lt;span style="color:#a6e22e">KillPodOptions&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">options&lt;/span>.&lt;span style="color:#a6e22e">KillPodOptions&lt;/span> = &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">KillPodOptions&lt;/span>{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">ch&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">options&lt;/span>.&lt;span style="color:#a6e22e">KillPodOptions&lt;/span>.&lt;span style="color:#a6e22e">CompletedCh&lt;/span>; &lt;span style="color:#a6e22e">ch&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">status&lt;/span>.&lt;span style="color:#a6e22e">notifyPostTerminating&lt;/span> = append(&lt;span style="color:#a6e22e">status&lt;/span>.&lt;span style="color:#a6e22e">notifyPostTerminating&lt;/span>, &lt;span style="color:#a6e22e">ch&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">fn&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">options&lt;/span>.&lt;span style="color:#a6e22e">KillPodOptions&lt;/span>.&lt;span style="color:#a6e22e">PodStatusFunc&lt;/span>; &lt;span style="color:#a6e22e">fn&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">status&lt;/span>.&lt;span style="color:#a6e22e">statusPostTerminating&lt;/span> = append(&lt;span style="color:#a6e22e">status&lt;/span>.&lt;span style="color:#a6e22e">statusPostTerminating&lt;/span>, &lt;span style="color:#a6e22e">fn&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">gracePeriod&lt;/span>, &lt;span style="color:#a6e22e">gracePeriodShortened&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">calculateEffectiveGracePeriod&lt;/span>(&lt;span style="color:#a6e22e">status&lt;/span>, &lt;span style="color:#a6e22e">pod&lt;/span>, &lt;span style="color:#a6e22e">options&lt;/span>.&lt;span style="color:#a6e22e">KillPodOptions&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">wasGracePeriodShortened&lt;/span> = &lt;span style="color:#a6e22e">gracePeriodShortened&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">status&lt;/span>.&lt;span style="color:#a6e22e">gracePeriod&lt;/span> = &lt;span style="color:#a6e22e">gracePeriod&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// always set the grace period for syncTerminatingPod so we don&amp;#39;t have to recalculate,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// will never be zero.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">options&lt;/span>.&lt;span style="color:#a6e22e">KillPodOptions&lt;/span>.&lt;span style="color:#a6e22e">PodTerminationGracePeriodSecondsOverride&lt;/span> = &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">gracePeriod&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">default&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">workType&lt;/span> = &lt;span style="color:#a6e22e">SyncPodWork&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// KillPodOptions is not valid for sync actions outside of the terminating phase
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">options&lt;/span>.&lt;span style="color:#a6e22e">KillPodOptions&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">ch&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">options&lt;/span>.&lt;span style="color:#a6e22e">KillPodOptions&lt;/span>.&lt;span style="color:#a6e22e">CompletedCh&lt;/span>; &lt;span style="color:#a6e22e">ch&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> close(&lt;span style="color:#a6e22e">ch&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">options&lt;/span>.&lt;span style="color:#a6e22e">KillPodOptions&lt;/span> = &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// the desired work we want to be performing
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">work&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">podWork&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">WorkType&lt;/span>: &lt;span style="color:#a6e22e">workType&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Options&lt;/span>: &lt;span style="color:#a6e22e">options&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 如果 pod worker 协程不存在则启动它
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">podUpdates&lt;/span>, &lt;span style="color:#a6e22e">exists&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">podUpdates&lt;/span>[&lt;span style="color:#a6e22e">uid&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">exists&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 创建 channel
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 我们需要在这里有一个缓冲区，因为将更新放入通道的 checkForUpdates() 方法是从使用通道的同一个 goroutine 调用的。但是，可以保证在这种情况下通道是空的，因此大小为 1 的缓冲区就足够了。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">podUpdates&lt;/span> = make(&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#a6e22e">podWork&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">podUpdates&lt;/span>[&lt;span style="color:#a6e22e">uid&lt;/span>] = &lt;span style="color:#a6e22e">podUpdates&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 确保静态 pod 按照 UpdatePod 接收它们的顺序启动
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">kubetypes&lt;/span>.&lt;span style="color:#a6e22e">IsStaticPod&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">waitingToStartStaticPodsByFullname&lt;/span>[&lt;span style="color:#a6e22e">status&lt;/span>.&lt;span style="color:#a6e22e">fullname&lt;/span>] =
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> append(&lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">waitingToStartStaticPodsByFullname&lt;/span>[&lt;span style="color:#a6e22e">status&lt;/span>.&lt;span style="color:#a6e22e">fullname&lt;/span>], &lt;span style="color:#a6e22e">uid&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 允许测试 pod 更新通道中的延迟
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">outCh&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#a6e22e">podWork&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">workerChannelFn&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">outCh&lt;/span> = &lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">workerChannelFn&lt;/span>(&lt;span style="color:#a6e22e">uid&lt;/span>, &lt;span style="color:#a6e22e">podUpdates&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">outCh&lt;/span> = &lt;span style="color:#a6e22e">podUpdates&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 启动 goroutine
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 创建一个新的 Pod Worker 意味着这是一个新的 POD，或者 kubelet 刚刚重新启动。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 在任何一种情况下，Kubelet 都愿意相信第一个 POD Worker 同步的 POD 的状态。请参阅 Syncpod 中的相应评论。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">runtime&lt;/span>.&lt;span style="color:#a6e22e">HandleCrash&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">managePodLoop&lt;/span>(&lt;span style="color:#a6e22e">outCh&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 如果没有运行，则向 pod worker 请求
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">status&lt;/span>.&lt;span style="color:#a6e22e">IsWorking&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">status&lt;/span>.&lt;span style="color:#a6e22e">working&lt;/span> = &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">podUpdates&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#a6e22e">work&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 捕获请求的更新与pod worker观察到更新之间的最大延迟
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">undelivered&lt;/span>, &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">lastUndeliveredWorkUpdate&lt;/span>[&lt;span style="color:#a6e22e">pod&lt;/span>.&lt;span style="color:#a6e22e">UID&lt;/span>]; &lt;span style="color:#a6e22e">ok&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// track the max latency between when a config change is requested and when it is realized
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// NOTE: this undercounts the latency when multiple requests are queued, but captures max latency
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">undelivered&lt;/span>.&lt;span style="color:#a6e22e">Options&lt;/span>.&lt;span style="color:#a6e22e">StartTime&lt;/span>.&lt;span style="color:#a6e22e">IsZero&lt;/span>() &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#a6e22e">undelivered&lt;/span>.&lt;span style="color:#a6e22e">Options&lt;/span>.&lt;span style="color:#a6e22e">StartTime&lt;/span>.&lt;span style="color:#a6e22e">Before&lt;/span>(&lt;span style="color:#a6e22e">work&lt;/span>.&lt;span style="color:#a6e22e">Options&lt;/span>.&lt;span style="color:#a6e22e">StartTime&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">work&lt;/span>.&lt;span style="color:#a6e22e">Options&lt;/span>.&lt;span style="color:#a6e22e">StartTime&lt;/span> = &lt;span style="color:#a6e22e">undelivered&lt;/span>.&lt;span style="color:#a6e22e">Options&lt;/span>.&lt;span style="color:#a6e22e">StartTime&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 始终同步最新数据
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">lastUndeliveredWorkUpdate&lt;/span>[&lt;span style="color:#a6e22e">pod&lt;/span>.&lt;span style="color:#a6e22e">UID&lt;/span>] = &lt;span style="color:#a6e22e">work&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">becameTerminating&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#a6e22e">wasGracePeriodShortened&lt;/span>) &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#a6e22e">status&lt;/span>.&lt;span style="color:#a6e22e">cancelFn&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">V&lt;/span>(&lt;span style="color:#ae81ff">3&lt;/span>).&lt;span style="color:#a6e22e">InfoS&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Cancelling current pod sync&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;pod&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">KObj&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>), &lt;span style="color:#e6db74">&amp;#34;podUID&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">pod&lt;/span>.&lt;span style="color:#a6e22e">UID&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;updateType&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">work&lt;/span>.&lt;span style="color:#a6e22e">WorkType&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">status&lt;/span>.&lt;span style="color:#a6e22e">cancelFn&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="podworkersmanagepodloop--调用-podworkerssyncpodfn-方法同步-pod">podWorkers.managePodLoop() # 调用 podWorkers.syncPodFn() 方法同步 Pod&lt;/h2>
&lt;p>managePodLoop 调用 &lt;code>podWorkers.syncPodFn()&lt;/code> 方法去同步 pod。在完成这次 sync 动作之后，会调用 wrapUp 函数，这个函数将会做几件事情:&lt;/p>
&lt;ul>
&lt;li>将这个 pod 信息插入 kubelet 的 workQueue 队列中，等待下一次周期性的对这个 pod 的状态进行 sync&lt;/li>
&lt;li>将在这次 sync 期间堆积的没有能够来得及处理的最近一次 update 操作加入 goroutine 的事件 channel 中，立即处理。&lt;/li>
&lt;/ul>
&lt;p>源码：&lt;code>pkg/kubelet/pod_workers.go&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">podWorkers&lt;/span>) &lt;span style="color:#a6e22e">managePodLoop&lt;/span>(&lt;span style="color:#a6e22e">podUpdates&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#a6e22e">podWork&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">update&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">podUpdates&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 采取适当的行动（UpdatePod阻止了非法阶段）
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">switch&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">update&lt;/span>.&lt;span style="color:#a6e22e">WorkType&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">TerminatedPodWork&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">update&lt;/span>.&lt;span style="color:#a6e22e">WorkType&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">TerminatingPodWork&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">default&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 这里的 podWorkers.syncPodFn() 实际上是 kubelet.SyncPod() 方法
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">syncPodFn&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">update&lt;/span>.&lt;span style="color:#a6e22e">Options&lt;/span>.&lt;span style="color:#a6e22e">UpdateType&lt;/span>, &lt;span style="color:#a6e22e">pod&lt;/span>, &lt;span style="color:#a6e22e">update&lt;/span>.&lt;span style="color:#a6e22e">Options&lt;/span>.&lt;span style="color:#a6e22e">MirrorPod&lt;/span>, &lt;span style="color:#a6e22e">status&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="引用说明">引用说明&lt;/h3>
&lt;p>这里的 &lt;code>p.syncPodFn()&lt;/code> 引用的是 &lt;code>kubelet.SyncPod()&lt;/code> 方法。来源如下：&lt;/p>
&lt;ul>
&lt;li>源码：&lt;code>pkg/kubelet/kubelet.go&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">NewMainKubelet&lt;/span>(&lt;span style="color:#f92672">......&lt;/span>) (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Kubelet&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">klet&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">Kubelet&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">......&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">klet&lt;/span>.&lt;span style="color:#a6e22e">podWorkers&lt;/span> = &lt;span style="color:#a6e22e">newPodWorkers&lt;/span>(&lt;span style="color:#a6e22e">klet&lt;/span>.&lt;span style="color:#a6e22e">syncPod&lt;/span>,&lt;span style="color:#f92672">......&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>源码：&lt;code>pkg/kubelet/pod_workers.go&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">newPodWorkers&lt;/span>(&lt;span style="color:#a6e22e">syncPodFn&lt;/span> &lt;span style="color:#a6e22e">syncPodFnType&lt;/span>,&lt;span style="color:#f92672">......&lt;/span>) &lt;span style="color:#a6e22e">PodWorkers&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">podWorkers&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">syncPodFn&lt;/span>: &lt;span style="color:#a6e22e">syncPodFn&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">......&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="kubeletsyncpod--完成创建容器前的准备工作">kubelet.syncPod() # 完成创建容器前的准备工作&lt;/h2>
&lt;p>在这个方法中，主要完成以下几件事情：&lt;/p>
&lt;ul>
&lt;li>如果是删除 pod，立即执行并返回&lt;/li>
&lt;li>同步 podStatus 到 kubelet.statusManager&lt;/li>
&lt;li>检查 pod 是否能运行在本节点，主要是权限检查（是否能使用主机网络模式，是否可以以 privileged 权限运行等）。如果没有权限，就删除本地旧的 pod 并返回错误信息&lt;/li>
&lt;li>创建 containerManagar 对象，并且创建 pod level cgroup，更新 Qos level cgroup&lt;/li>
&lt;li>如果是 static Pod，就创建或者更新对应的 mirrorPod&lt;/li>
&lt;li>创建 pod 的数据目录，存放 volume 和 plugin 信息,如果定义了 pv，等待所有的 volume mount 完成（volumeManager 会在后台做这些事情）,如果有 image secrets，去 apiserver 获取对应的 secrets 数据&lt;/li>
&lt;li>然后调用 kubelet.volumeManager 组件，等待它将 pod 所需要的所有外挂的 volume 都准备好。&lt;/li>
&lt;li>调用 Runtime() 接口中的 SyncPod 方法，去实现真正的容器创建逻辑&lt;/li>
&lt;/ul>
&lt;p>这里所有的事情都和具体的容器没有关系，可以看到该方法是创建 pod 实体（即容器）之前需要完成的准备工作。&lt;/p>
&lt;p>源码：&lt;code>pkg/kubelet/kubelet.go&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">kl&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Kubelet&lt;/span>) &lt;span style="color:#a6e22e">syncPod&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>, &lt;span style="color:#a6e22e">updateType&lt;/span> &lt;span style="color:#a6e22e">kubetypes&lt;/span>.&lt;span style="color:#a6e22e">SyncPodType&lt;/span>, &lt;span style="color:#a6e22e">pod&lt;/span>, &lt;span style="color:#a6e22e">mirrorPod&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">v1&lt;/span>.&lt;span style="color:#a6e22e">Pod&lt;/span>, &lt;span style="color:#a6e22e">podStatus&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">kubecontainer&lt;/span>.&lt;span style="color:#a6e22e">PodStatus&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 主要工作流的延迟测量是相对于 kubelet 第一次发现 Pod 的时间
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">firstSeenTime&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Time&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">firstSeenTimeStr&lt;/span>, &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">pod&lt;/span>.&lt;span style="color:#a6e22e">Annotations&lt;/span>[&lt;span style="color:#a6e22e">kubetypes&lt;/span>.&lt;span style="color:#a6e22e">ConfigFirstSeenAnnotationKey&lt;/span>]; &lt;span style="color:#a6e22e">ok&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">firstSeenTime&lt;/span> = &lt;span style="color:#a6e22e">kubetypes&lt;/span>.&lt;span style="color:#a6e22e">ConvertToTimestamp&lt;/span>(&lt;span style="color:#a6e22e">firstSeenTimeStr&lt;/span>).&lt;span style="color:#a6e22e">Get&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 如果创建，记录 Pod Worker 启动延迟
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// TODO: make pod workers record their own latencies
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">updateType&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">kubetypes&lt;/span>.&lt;span style="color:#a6e22e">SyncPodCreate&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">firstSeenTime&lt;/span>.&lt;span style="color:#a6e22e">IsZero&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 这是我们第一次同步 pod。如果设置了 firstSeenTime，则记录自 kubelet 第一次看到 pod 以来的延迟。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">metrics&lt;/span>.&lt;span style="color:#a6e22e">PodWorkerStartDuration&lt;/span>.&lt;span style="color:#a6e22e">Observe&lt;/span>(&lt;span style="color:#a6e22e">metrics&lt;/span>.&lt;span style="color:#a6e22e">SinceInSeconds&lt;/span>(&lt;span style="color:#a6e22e">firstSeenTime&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">V&lt;/span>(&lt;span style="color:#ae81ff">3&lt;/span>).&lt;span style="color:#a6e22e">InfoS&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;First seen time not recorded for pod&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;podUID&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">pod&lt;/span>.&lt;span style="color:#a6e22e">UID&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;pod&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">KObj&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Generate final API pod status with pod and status manager status
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">apiPodStatus&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">generateAPIPodStatus&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>, &lt;span style="color:#a6e22e">podStatus&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// The pod IP may be changed in generateAPIPodStatus if the pod is using host network. (See #24576)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// TODO(random-liu): After writing pod spec into container labels, check whether pod is using host network, and
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// set pod IP to hostIP directly in runtime.GetPodStatus
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">podStatus&lt;/span>.&lt;span style="color:#a6e22e">IPs&lt;/span> = make([]&lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, len(&lt;span style="color:#a6e22e">apiPodStatus&lt;/span>.&lt;span style="color:#a6e22e">PodIPs&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">ipInfo&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">apiPodStatus&lt;/span>.&lt;span style="color:#a6e22e">PodIPs&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">podStatus&lt;/span>.&lt;span style="color:#a6e22e">IPs&lt;/span> = append(&lt;span style="color:#a6e22e">podStatus&lt;/span>.&lt;span style="color:#a6e22e">IPs&lt;/span>, &lt;span style="color:#a6e22e">ipInfo&lt;/span>.&lt;span style="color:#a6e22e">IP&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> len(&lt;span style="color:#a6e22e">podStatus&lt;/span>.&lt;span style="color:#a6e22e">IPs&lt;/span>) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> len(&lt;span style="color:#a6e22e">apiPodStatus&lt;/span>.&lt;span style="color:#a6e22e">PodIP&lt;/span>) &amp;gt; &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">podStatus&lt;/span>.&lt;span style="color:#a6e22e">IPs&lt;/span> = []&lt;span style="color:#66d9ef">string&lt;/span>{&lt;span style="color:#a6e22e">apiPodStatus&lt;/span>.&lt;span style="color:#a6e22e">PodIP&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 检查 Pod 是否可以运行在本节点。如果 Pod 不应该运行，将 Pod 的容器 stop，这与 termination 不同(我们希望 stop Pod，但如果软准入机制允许稍后重启它)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 适当设置状态和阶段
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">runnable&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">canRunPod&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">runnable&lt;/span>.&lt;span style="color:#a6e22e">Admit&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 如果设置了 firstSeenTime，记录自 kubelet 首次看到 Pod 以来 Pod 运行所需的时间。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">existingStatus&lt;/span>, &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">statusManager&lt;/span>.&lt;span style="color:#a6e22e">GetPodStatus&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>.&lt;span style="color:#a6e22e">UID&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#a6e22e">existingStatus&lt;/span>.&lt;span style="color:#a6e22e">Phase&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">v1&lt;/span>.&lt;span style="color:#a6e22e">PodPending&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#a6e22e">apiPodStatus&lt;/span>.&lt;span style="color:#a6e22e">Phase&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">v1&lt;/span>.&lt;span style="color:#a6e22e">PodRunning&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> !&lt;span style="color:#a6e22e">firstSeenTime&lt;/span>.&lt;span style="color:#a6e22e">IsZero&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">metrics&lt;/span>.&lt;span style="color:#a6e22e">PodStartDuration&lt;/span>.&lt;span style="color:#a6e22e">Observe&lt;/span>(&lt;span style="color:#a6e22e">metrics&lt;/span>.&lt;span style="color:#a6e22e">SinceInSeconds&lt;/span>(&lt;span style="color:#a6e22e">firstSeenTime&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 更新 Pod 状态
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">statusManager&lt;/span>.&lt;span style="color:#a6e22e">SetPodStatus&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>, &lt;span style="color:#a6e22e">apiPodStatus&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 必须停止不可运行的 Pod，并向 PodWorker 返回一个错误类型
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">runnable&lt;/span>.&lt;span style="color:#a6e22e">Admit&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 加载网络插件，如果网络插件没有准备好，只有在 Pod 使用宿主机的网络时才启动它
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">runtimeState&lt;/span>.&lt;span style="color:#a6e22e">networkErrors&lt;/span>(); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> !&lt;span style="color:#a6e22e">kubecontainer&lt;/span>.&lt;span style="color:#a6e22e">IsHostNetworkPod&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 确保 kubelet 知道 Pod 使用的 secrets 和 configmaps 资源
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">podWorkers&lt;/span>.&lt;span style="color:#a6e22e">IsPodTerminationRequested&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>.&lt;span style="color:#a6e22e">UID&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 为 Pod 创建 Cgroups，并在启用 cgroups-per-qos 标志的情况下对其应用资源参数。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">pcm&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">containerManager&lt;/span>.&lt;span style="color:#a6e22e">NewPodContainerManager&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 为静态 Pod 创建 Mirror Pod
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">kubetypes&lt;/span>.&lt;span style="color:#a6e22e">IsStaticPod&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 为 Pod 创建数据目录
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">makePodDataDirs&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 挂载 Volume
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Volume 管理器不会为 terminating 状态的 Pod 挂载卷
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// TODO: 一旦添加上下文取消，可以删除此检查
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">podWorkers&lt;/span>.&lt;span style="color:#a6e22e">IsPodTerminationRequested&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>.&lt;span style="color:#a6e22e">UID&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 等待卷 attach/mount
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">volumeManager&lt;/span>.&lt;span style="color:#a6e22e">WaitForAttachAndMount&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 获取 Pod 的 secret 信息
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">pullSecrets&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">getPullSecretsForPod&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 调用 Runtime 接口中的 SyncPod() 方法以开始创建容器
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 这里的 kl.containerRuntime.SyncPod() 实际上是 kubeGenericRuntimeManager.SyncPod() 方法
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">containerRuntime&lt;/span>.&lt;span style="color:#a6e22e">SyncPod&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>, &lt;span style="color:#a6e22e">podStatus&lt;/span>, &lt;span style="color:#a6e22e">pullSecrets&lt;/span>, &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">backOff&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">reasonCache&lt;/span>.&lt;span style="color:#a6e22e">Update&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>.&lt;span style="color:#a6e22e">UID&lt;/span>, &lt;span style="color:#a6e22e">result&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="引用说明-1">引用说明&lt;/h3>
&lt;p>这里的 &lt;code>kl.containerRuntime.SyncPod()&lt;/code> 引用的是 &lt;code>kubeGenericRuntimeManager.SyncPod()&lt;/code> 方法，来源如下：&lt;/p>
&lt;p>源码：&lt;code>pkg/kubelet/kuberuntime&lt;/code>-&lt;code>NewMainKubelet()&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">NewMainKubelet&lt;/span>() (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Kubelet&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">klet&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">Kubelet&lt;/span>{&lt;span style="color:#f92672">......&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">runtime&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">kuberuntime&lt;/span>.&lt;span style="color:#a6e22e">NewKubeGenericRuntimeManager&lt;/span>(&lt;span style="color:#f92672">......&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">klet&lt;/span>.&lt;span style="color:#a6e22e">containerRuntime&lt;/span> = &lt;span style="color:#a6e22e">runtime&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">kl&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Kubelet&lt;/span>) &lt;span style="color:#a6e22e">syncPod&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>, &lt;span style="color:#a6e22e">updateType&lt;/span> &lt;span style="color:#a6e22e">kubetypes&lt;/span>.&lt;span style="color:#a6e22e">SyncPodType&lt;/span>, &lt;span style="color:#a6e22e">pod&lt;/span>, &lt;span style="color:#a6e22e">mirrorPod&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">v1&lt;/span>.&lt;span style="color:#a6e22e">Pod&lt;/span>, &lt;span style="color:#a6e22e">podStatus&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">kubecontainer&lt;/span>.&lt;span style="color:#a6e22e">PodStatus&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">containerRuntime&lt;/span>.&lt;span style="color:#a6e22e">SyncPod&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>, &lt;span style="color:#a6e22e">podStatus&lt;/span>, &lt;span style="color:#a6e22e">pullSecrets&lt;/span>, &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">backOff&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="开始运行-podcri-在这里">开始运行 Pod(CRI 在这里)&lt;/h1>
&lt;p>KubeRuntimeManager(pkg/kubelet/kuberuntime) 子模块的 SyncPod() 方法是真正完成 Pod 内容器实体的创建。&lt;/p>
&lt;p>&lt;code>kubeGenericRuntimeManager.runtimeService&lt;/code> &lt;strong>就是 CRI&lt;/strong>，都是由第三方对接的，具体时间逻辑也在第三方，比如 Containerd，Docker 等。该结构体中的很多方法都调用了 runtimeService 接口中的方法，以控制 Pod 和 容器。&lt;/p>
&lt;h2 id="kubegenericruntimemanagersyncpod--创建容器">kubeGenericRuntimeManager.SyncPod() # 创建容器&lt;/h2>
&lt;p>syncPod 主要执行以下几个操作：&lt;/p>
&lt;ol>
&lt;li>计算 Sandbox 和 Container 是否发生变化&lt;/li>
&lt;li>必要时 kill 调 Pod Sandbox&lt;/li>
&lt;li>kill 调不应该运行的所有容器&lt;/li>
&lt;li>必要时创建 Sandbox 容器&lt;/li>
&lt;li>创建临时容器&lt;/li>
&lt;li>创建初始化容器&lt;/li>
&lt;li>创建业务容器&lt;/li>
&lt;li>在创建容器中调用 &lt;code>kubeGenericRuntimeManager.startContainer()&lt;/code> 启动容器&lt;/li>
&lt;/ol>
&lt;p>initContainers 可以有多个，多个 container 严格按照顺序启动，只有当前一个 container 退出了以后，才开始启动下一个 container。&lt;/p>
&lt;p>源码：&lt;code>pkg/kubelet/kuberuntime/kuberuntime_manager.go&lt;/code>- &lt;code>containerRuntime.SyncPod()&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">m&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">kubeGenericRuntimeManager&lt;/span>) &lt;span style="color:#a6e22e">SyncPod&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">v1&lt;/span>.&lt;span style="color:#a6e22e">Pod&lt;/span>, &lt;span style="color:#a6e22e">podStatus&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">kubecontainer&lt;/span>.&lt;span style="color:#a6e22e">PodStatus&lt;/span>, &lt;span style="color:#a6e22e">pullSecrets&lt;/span> []&lt;span style="color:#a6e22e">v1&lt;/span>.&lt;span style="color:#a6e22e">Secret&lt;/span>, &lt;span style="color:#a6e22e">backOff&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">flowcontrol&lt;/span>.&lt;span style="color:#a6e22e">Backoff&lt;/span>) (&lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#a6e22e">kubecontainer&lt;/span>.&lt;span style="color:#a6e22e">PodSyncResult&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Step 1：计算 sandbox 和 container 是否发生变化
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">podContainerChanges&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">computePodActions&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>, &lt;span style="color:#a6e22e">podStatus&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">V&lt;/span>(&lt;span style="color:#ae81ff">3&lt;/span>).&lt;span style="color:#a6e22e">InfoS&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;computePodActions got for pod&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;podActions&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">podContainerChanges&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;pod&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">KObj&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">podContainerChanges&lt;/span>.&lt;span style="color:#a6e22e">CreateSandbox&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ref&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">ref&lt;/span>.&lt;span style="color:#a6e22e">GetReference&lt;/span>(&lt;span style="color:#a6e22e">legacyscheme&lt;/span>.&lt;span style="color:#a6e22e">Scheme&lt;/span>, &lt;span style="color:#a6e22e">pod&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">ErrorS&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Couldn&amp;#39;t make a ref to pod&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;pod&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">KObj&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">podContainerChanges&lt;/span>.&lt;span style="color:#a6e22e">SandboxID&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">recorder&lt;/span>.&lt;span style="color:#a6e22e">Eventf&lt;/span>(&lt;span style="color:#a6e22e">ref&lt;/span>, &lt;span style="color:#a6e22e">v1&lt;/span>.&lt;span style="color:#a6e22e">EventTypeNormal&lt;/span>, &lt;span style="color:#a6e22e">events&lt;/span>.&lt;span style="color:#a6e22e">SandboxChanged&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Pod sandbox changed, it will be killed and re-created.&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">V&lt;/span>(&lt;span style="color:#ae81ff">4&lt;/span>).&lt;span style="color:#a6e22e">InfoS&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;SyncPod received new pod, will create a sandbox for it&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;pod&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">KObj&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Step 2：kill 掉 sandbox 已经改变的 Pod
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">podContainerChanges&lt;/span>.&lt;span style="color:#a6e22e">KillPod&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">podContainerChanges&lt;/span>.&lt;span style="color:#a6e22e">CreateSandbox&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">V&lt;/span>(&lt;span style="color:#ae81ff">4&lt;/span>).&lt;span style="color:#a6e22e">InfoS&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Stopping PodSandbox for pod, will start new one&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;pod&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">KObj&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">V&lt;/span>(&lt;span style="color:#ae81ff">4&lt;/span>).&lt;span style="color:#a6e22e">InfoS&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Stopping PodSandbox for pod, because all other containers are dead&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;pod&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">KObj&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">killResult&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">killPodWithSyncResult&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>, &lt;span style="color:#a6e22e">kubecontainer&lt;/span>.&lt;span style="color:#a6e22e">ConvertPodStatusToRunningPod&lt;/span>(&lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">runtimeName&lt;/span>, &lt;span style="color:#a6e22e">podStatus&lt;/span>), &lt;span style="color:#66d9ef">nil&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">result&lt;/span>.&lt;span style="color:#a6e22e">AddPodSyncResult&lt;/span>(&lt;span style="color:#a6e22e">killResult&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">killResult&lt;/span>.&lt;span style="color:#a6e22e">Error&lt;/span>() &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">ErrorS&lt;/span>(&lt;span style="color:#a6e22e">killResult&lt;/span>.&lt;span style="color:#a6e22e">Error&lt;/span>(), &lt;span style="color:#e6db74">&amp;#34;killPodWithSyncResult failed&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">podContainerChanges&lt;/span>.&lt;span style="color:#a6e22e">CreateSandbox&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">purgeInitContainers&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>, &lt;span style="color:#a6e22e">podStatus&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Step 3：kill 掉非 running 状态的容器
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">containerID&lt;/span>, &lt;span style="color:#a6e22e">containerInfo&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">podContainerChanges&lt;/span>.&lt;span style="color:#a6e22e">ContainersToKill&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">V&lt;/span>(&lt;span style="color:#ae81ff">3&lt;/span>).&lt;span style="color:#a6e22e">InfoS&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Killing unwanted container for pod&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;containerName&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">containerInfo&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;containerID&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">containerID&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;pod&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">KObj&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">killContainerResult&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">kubecontainer&lt;/span>.&lt;span style="color:#a6e22e">NewSyncResult&lt;/span>(&lt;span style="color:#a6e22e">kubecontainer&lt;/span>.&lt;span style="color:#a6e22e">KillContainer&lt;/span>, &lt;span style="color:#a6e22e">containerInfo&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">result&lt;/span>.&lt;span style="color:#a6e22e">AddSyncResult&lt;/span>(&lt;span style="color:#a6e22e">killContainerResult&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">killContainer&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>, &lt;span style="color:#a6e22e">containerID&lt;/span>, &lt;span style="color:#a6e22e">containerInfo&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span>, &lt;span style="color:#a6e22e">containerInfo&lt;/span>.&lt;span style="color:#a6e22e">message&lt;/span>, &lt;span style="color:#a6e22e">containerInfo&lt;/span>.&lt;span style="color:#a6e22e">reason&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">killContainerResult&lt;/span>.&lt;span style="color:#a6e22e">Fail&lt;/span>(&lt;span style="color:#a6e22e">kubecontainer&lt;/span>.&lt;span style="color:#a6e22e">ErrKillContainer&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>.&lt;span style="color:#a6e22e">Error&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">ErrorS&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;killContainer for pod failed&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;containerName&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">containerInfo&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;containerID&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">containerID&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;pod&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">KObj&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Step 4：如果必要，为 Pod 创建 sandbox
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">podSandboxID&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">podContainerChanges&lt;/span>.&lt;span style="color:#a6e22e">SandboxID&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">podContainerChanges&lt;/span>.&lt;span style="color:#a6e22e">CreateSandbox&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ConvertPodSysctlsVariableToDotsSeparator converts sysctl variable
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// in the Pod.Spec.SecurityContext.Sysctls slice into a dot as a separator.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// runc uses the dot as the separator to verify whether the sysctl variable
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// is correct in a separate namespace, so when using the slash as the sysctl
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// variable separator, runc returns an error: &amp;#34;sysctl is not in a separate kernel namespace&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// and the podSandBox cannot be successfully created. Therefore, before calling runc,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// we need to convert the sysctl variable, the dot is used as a separator to separate the kernel namespace.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// When runc supports slash as sysctl separator, this function can no longer be used.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">sysctl&lt;/span>.&lt;span style="color:#a6e22e">ConvertPodSysctlsVariableToDotsSeparator&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>.&lt;span style="color:#a6e22e">Spec&lt;/span>.&lt;span style="color:#a6e22e">SecurityContext&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">podSandboxID&lt;/span>, &lt;span style="color:#a6e22e">msg&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">createPodSandbox&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>, &lt;span style="color:#a6e22e">podContainerChanges&lt;/span>.&lt;span style="color:#a6e22e">Attempt&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">resp&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">runtimeService&lt;/span>.&lt;span style="color:#a6e22e">PodSandboxStatus&lt;/span>(&lt;span style="color:#a6e22e">podSandboxID&lt;/span>, &lt;span style="color:#66d9ef">false&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 如果 pod 网络是 host 模式，容器也相同；其他情况下，容器会使用 None 网络模式，让 kubelet 的网络插件自己进行网络配置
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">kubecontainer&lt;/span>.&lt;span style="color:#a6e22e">IsHostNetworkPod&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">podIPs&lt;/span> = &lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">determinePodSandboxIPs&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>.&lt;span style="color:#a6e22e">Namespace&lt;/span>, &lt;span style="color:#a6e22e">pod&lt;/span>.&lt;span style="color:#a6e22e">Name&lt;/span>, &lt;span style="color:#a6e22e">resp&lt;/span>.&lt;span style="color:#a6e22e">GetStatus&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">V&lt;/span>(&lt;span style="color:#ae81ff">4&lt;/span>).&lt;span style="color:#a6e22e">InfoS&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Determined the ip for pod after sandbox changed&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;IPs&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">podIPs&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;pod&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">KObj&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 为容器获取 Sandbox 配置(如：元数据、集群DNS 、容器的端口映射 等等)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">configPodSandboxResult&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">kubecontainer&lt;/span>.&lt;span style="color:#a6e22e">NewSyncResult&lt;/span>(&lt;span style="color:#a6e22e">kubecontainer&lt;/span>.&lt;span style="color:#a6e22e">ConfigPodSandbox&lt;/span>, &lt;span style="color:#a6e22e">podSandboxID&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">result&lt;/span>.&lt;span style="color:#a6e22e">AddSyncResult&lt;/span>(&lt;span style="color:#a6e22e">configPodSandboxResult&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">podSandboxConfig&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">generatePodSandboxConfig&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>, &lt;span style="color:#a6e22e">podContainerChanges&lt;/span>.&lt;span style="color:#a6e22e">Attempt&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 用于启动容器的行为，适用于任何类型的容器，容器类型包括：container(容器)、init_container(初始化容器)、ephemeral_container(临时容器)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 上述三种对容器的分类描述，在 日志消息 与 监控指标的标签 中会出现，用来定位容器。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 下面代码中启动容器时，都会调用 start，也就是 `func(typeName, metricLabel string, spec *startSpec) error{}` 函数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 启动容器的核心是 m.startContainer() 方法
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">start&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">typeName&lt;/span>, &lt;span style="color:#a6e22e">metricLabel&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">spec&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">startSpec&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Step 最终：调用 m.startContainer() 启动容器
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 注意（Aramase）Podips填充单堆栈和双堆栈集群。只发送Podips。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">startContainer&lt;/span>(&lt;span style="color:#a6e22e">podSandboxID&lt;/span>, &lt;span style="color:#a6e22e">podSandboxConfig&lt;/span>, &lt;span style="color:#a6e22e">spec&lt;/span>, &lt;span style="color:#a6e22e">pod&lt;/span>, &lt;span style="color:#a6e22e">podStatus&lt;/span>, &lt;span style="color:#a6e22e">pullSecrets&lt;/span>, &lt;span style="color:#a6e22e">podIP&lt;/span>, &lt;span style="color:#a6e22e">podIPs&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Step 5：启动 ephemeral_container(临时容器)，调用上面定义的 start。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">idx&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">podContainerChanges&lt;/span>.&lt;span style="color:#a6e22e">EphemeralContainersToStart&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">start&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;ephemeral container&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">metrics&lt;/span>.&lt;span style="color:#a6e22e">EphemeralContainer&lt;/span>, &lt;span style="color:#a6e22e">ephemeralContainerStartSpec&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">pod&lt;/span>.&lt;span style="color:#a6e22e">Spec&lt;/span>.&lt;span style="color:#a6e22e">EphemeralContainers&lt;/span>[&lt;span style="color:#a6e22e">idx&lt;/span>]))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Step 6: 启动 init_container(初始化容器)，调用上面定义的 start。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">container&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">podContainerChanges&lt;/span>.&lt;span style="color:#a6e22e">NextInitContainerToStart&lt;/span>; &lt;span style="color:#a6e22e">container&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">start&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;init container&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">metrics&lt;/span>.&lt;span style="color:#a6e22e">InitContainer&lt;/span>, &lt;span style="color:#a6e22e">containerStartSpec&lt;/span>(&lt;span style="color:#a6e22e">container&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Step 7：启动 container(容器)。调用上面定义的 start。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">idx&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">podContainerChanges&lt;/span>.&lt;span style="color:#a6e22e">ContainersToStart&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">start&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;container&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">metrics&lt;/span>.&lt;span style="color:#a6e22e">Container&lt;/span>, &lt;span style="color:#a6e22e">containerStartSpec&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">pod&lt;/span>.&lt;span style="color:#a6e22e">Spec&lt;/span>.&lt;span style="color:#a6e22e">Containers&lt;/span>[&lt;span style="color:#a6e22e">idx&lt;/span>]))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="kubegenericruntimemanagerstartcontainer--启动容器">kubeGenericRuntimeManager.startContainer() # 启动容器&lt;/h2>
&lt;p>最终由 &lt;code>kubeGenericRuntimeManager.startContainer()&lt;/code> 完成容器的启动，其主要有以下几个步骤：&lt;/p>
&lt;ul>
&lt;li>拉取镜像&lt;/li>
&lt;li>创建容器&lt;/li>
&lt;li>启动容器&lt;/li>
&lt;li>运行 post start lifecycle hooks&lt;/li>
&lt;/ul>
&lt;p>源码：&lt;code>pkg/kubelet/kuberuntime/kuberuntime_container.go&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">m&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">kubeGenericRuntimeManager&lt;/span>) &lt;span style="color:#a6e22e">startContainer&lt;/span>(&lt;span style="color:#a6e22e">podSandboxID&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">podSandboxConfig&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">runtimeapi&lt;/span>.&lt;span style="color:#a6e22e">PodSandboxConfig&lt;/span>, &lt;span style="color:#a6e22e">spec&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">startSpec&lt;/span>, &lt;span style="color:#a6e22e">pod&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">v1&lt;/span>.&lt;span style="color:#a6e22e">Pod&lt;/span>, &lt;span style="color:#a6e22e">podStatus&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">kubecontainer&lt;/span>.&lt;span style="color:#a6e22e">PodStatus&lt;/span>, &lt;span style="color:#a6e22e">pullSecrets&lt;/span> []&lt;span style="color:#a6e22e">v1&lt;/span>.&lt;span style="color:#a6e22e">Secret&lt;/span>, &lt;span style="color:#a6e22e">podIP&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">podIPs&lt;/span> []&lt;span style="color:#66d9ef">string&lt;/span>) (&lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">container&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">spec&lt;/span>.&lt;span style="color:#a6e22e">container&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Step 1：拉取镜像
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">imageRef&lt;/span>, &lt;span style="color:#a6e22e">msg&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">imagePuller&lt;/span>.&lt;span style="color:#a6e22e">EnsureImageExists&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>, &lt;span style="color:#a6e22e">container&lt;/span>, &lt;span style="color:#a6e22e">pullSecrets&lt;/span>, &lt;span style="color:#a6e22e">podSandboxConfig&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">s&lt;/span>, &lt;span style="color:#a6e22e">_&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">grpcstatus&lt;/span>.&lt;span style="color:#a6e22e">FromError&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">recordContainerEvent&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>, &lt;span style="color:#a6e22e">container&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">v1&lt;/span>.&lt;span style="color:#a6e22e">EventTypeWarning&lt;/span>, &lt;span style="color:#a6e22e">events&lt;/span>.&lt;span style="color:#a6e22e">FailedToCreateContainer&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Error: %v&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">Message&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">msg&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Step 1：创建容器
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 对于一个新的容器，RestartCount 变量的值应该为 0
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">restartCount&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">containerStatus&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">podStatus&lt;/span>.&lt;span style="color:#a6e22e">FindContainerStatusByName&lt;/span>(&lt;span style="color:#a6e22e">container&lt;/span>.&lt;span style="color:#a6e22e">Name&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">target&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">spec&lt;/span>.&lt;span style="color:#a6e22e">getTargetID&lt;/span>(&lt;span style="color:#a6e22e">podStatus&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">generateContainerConfig&lt;/span>(&lt;span style="color:#a6e22e">container&lt;/span>, &lt;span style="color:#a6e22e">pod&lt;/span>, &lt;span style="color:#a6e22e">restartCount&lt;/span>, &lt;span style="color:#a6e22e">podIP&lt;/span>, &lt;span style="color:#a6e22e">imageRef&lt;/span>, &lt;span style="color:#a6e22e">podIPs&lt;/span>, &lt;span style="color:#a6e22e">target&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">internalLifecycle&lt;/span>.&lt;span style="color:#a6e22e">PreCreateContainer&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>, &lt;span style="color:#a6e22e">container&lt;/span>, &lt;span style="color:#a6e22e">containerConfig&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">runtimeService&lt;/span>.&lt;span style="color:#a6e22e">CreateContainer&lt;/span>(&lt;span style="color:#a6e22e">podSandboxID&lt;/span>, &lt;span style="color:#a6e22e">containerConfig&lt;/span>, &lt;span style="color:#a6e22e">podSandboxConfig&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">internalLifecycle&lt;/span>.&lt;span style="color:#a6e22e">PreStartContainer&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>, &lt;span style="color:#a6e22e">container&lt;/span>, &lt;span style="color:#a6e22e">containerID&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 3、启动容器
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">runtimeService&lt;/span>.&lt;span style="color:#a6e22e">StartContainer&lt;/span>(&lt;span style="color:#a6e22e">containerID&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Symlink container logs to the legacy container log location for cluster logging
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// support.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// TODO(random-liu): Remove this after cluster logging supports CRI container log path.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">containerMeta&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">containerConfig&lt;/span>.&lt;span style="color:#a6e22e">GetMetadata&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">sandboxMeta&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">podSandboxConfig&lt;/span>.&lt;span style="color:#a6e22e">GetMetadata&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">legacySymlink&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">legacyLogSymlink&lt;/span>(&lt;span style="color:#a6e22e">containerID&lt;/span>, &lt;span style="color:#a6e22e">containerMeta&lt;/span>.&lt;span style="color:#a6e22e">Name&lt;/span>, &lt;span style="color:#a6e22e">sandboxMeta&lt;/span>.&lt;span style="color:#a6e22e">Name&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">sandboxMeta&lt;/span>.&lt;span style="color:#a6e22e">Namespace&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">containerLog&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">filepath&lt;/span>.&lt;span style="color:#a6e22e">Join&lt;/span>(&lt;span style="color:#a6e22e">podSandboxConfig&lt;/span>.&lt;span style="color:#a6e22e">LogDirectory&lt;/span>, &lt;span style="color:#a6e22e">containerConfig&lt;/span>.&lt;span style="color:#a6e22e">LogPath&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// only create legacy symlink if containerLog path exists (or the error is not IsNotExist).
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Because if containerLog path does not exist, only dangling legacySymlink is created.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// This dangling legacySymlink is later removed by container gc, so it does not make sense
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// to create it in the first place. it happens when journald logging driver is used with docker.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">osInterface&lt;/span>.&lt;span style="color:#a6e22e">Stat&lt;/span>(&lt;span style="color:#a6e22e">containerLog&lt;/span>); !&lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">IsNotExist&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">osInterface&lt;/span>.&lt;span style="color:#a6e22e">Symlink&lt;/span>(&lt;span style="color:#a6e22e">containerLog&lt;/span>, &lt;span style="color:#a6e22e">legacySymlink&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">ErrorS&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Failed to create legacy symbolic link&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;path&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">legacySymlink&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;containerID&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">containerID&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;containerLogPath&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">containerLog&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 4、执行启动后的 Hook，就是一些启动后的检查，如果检查不通过，容器将会处于异常状态，并根据策略决定是否重启
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">container&lt;/span>.&lt;span style="color:#a6e22e">Lifecycle&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#a6e22e">container&lt;/span>.&lt;span style="color:#a6e22e">Lifecycle&lt;/span>.&lt;span style="color:#a6e22e">PostStart&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">kubeContainerID&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">kubecontainer&lt;/span>.&lt;span style="color:#a6e22e">ContainerID&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Type&lt;/span>: &lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">runtimeName&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ID&lt;/span>: &lt;span style="color:#a6e22e">containerID&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// runner.Run 这个方法的主要作用就是在业务容器起来的时候，
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 首先会执行一个 container hook(PostStart 和 PreStop),做一些预处理工作。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 只有 container hook 执行成功才会运行具体的业务服务，否则容器异常。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">msg&lt;/span>, &lt;span style="color:#a6e22e">handlerErr&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">runner&lt;/span>.&lt;span style="color:#a6e22e">Run&lt;/span>(&lt;span style="color:#a6e22e">kubeContainerID&lt;/span>, &lt;span style="color:#a6e22e">pod&lt;/span>, &lt;span style="color:#a6e22e">container&lt;/span>, &lt;span style="color:#a6e22e">container&lt;/span>.&lt;span style="color:#a6e22e">Lifecycle&lt;/span>.&lt;span style="color:#a6e22e">PostStart&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">handlerErr&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">ErrorS&lt;/span>(&lt;span style="color:#a6e22e">handlerErr&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Failed to execute PostStartHook&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;pod&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">KObj&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;podUID&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">pod&lt;/span>.&lt;span style="color:#a6e22e">UID&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;containerName&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">container&lt;/span>.&lt;span style="color:#a6e22e">Name&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;containerID&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">kubeContainerID&lt;/span>.&lt;span style="color:#a6e22e">String&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">recordContainerEvent&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>, &lt;span style="color:#a6e22e">container&lt;/span>, &lt;span style="color:#a6e22e">kubeContainerID&lt;/span>.&lt;span style="color:#a6e22e">ID&lt;/span>, &lt;span style="color:#a6e22e">v1&lt;/span>.&lt;span style="color:#a6e22e">EventTypeWarning&lt;/span>, &lt;span style="color:#a6e22e">events&lt;/span>.&lt;span style="color:#a6e22e">FailedPostStartHook&lt;/span>, &lt;span style="color:#a6e22e">msg&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">killContainer&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>, &lt;span style="color:#a6e22e">kubeContainerID&lt;/span>, &lt;span style="color:#a6e22e">container&lt;/span>.&lt;span style="color:#a6e22e">Name&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;FailedPostStartHook&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">reasonFailedPostStartHook&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">ErrorS&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Failed to kill container&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;pod&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">KObj&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;podUID&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">pod&lt;/span>.&lt;span style="color:#a6e22e">UID&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;containerName&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">container&lt;/span>.&lt;span style="color:#a6e22e">Name&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;containerID&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">kubeContainerID&lt;/span>.&lt;span style="color:#a6e22e">String&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">msg&lt;/span>, &lt;span style="color:#a6e22e">ErrPostStartHook&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: SyncLoop 模块</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/Kubernetes-%E5%BC%80%E5%8F%91/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/Kubelet-%E6%BA%90%E7%A0%81/SyncLoop-%E6%A8%A1%E5%9D%97/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/Kubernetes-%E5%BC%80%E5%8F%91/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/Kubelet-%E6%BA%90%E7%A0%81/SyncLoop-%E6%A8%A1%E5%9D%97/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;/blockquote>
&lt;p>SyncLoop 模块，Kubelet 同步循环&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/paseql/1645680266069-2cc34f9d-ed55-45dd-8df4-ac0ed0c8c388.png" alt="image.png">&lt;/p>
&lt;p>kubelet 的工作核心就是在围绕着不同的生产者生产出来的不同的有关 pod 的消息来调用相应的消费者（不同的子模块）完成不同的行为(创建和删除 pod 等)，即图中的控制循环（SyncLoop），通过不同的事件驱动这个控制循环运行。&lt;/p>
&lt;p>本文仅分析新建 pod 的流程，当一个 pod 完成调度，与一个 node 绑定起来之后，这个 pod 就会触发 kubelet 在循环控制里注册的 handler，上图中的 HandlePods 部分。此时，通过检查 pod 在 kubelet 内存中的状态，kubelet 就能判断出这是一个新调度过来的 pod，从而触发 Handler 里的 ADD 事件对应的逻辑处理。然后 kubelet 会为这个 pod 生成对应的 podStatus，接着检查 pod 所声明的 volume 是不是准备好了，然后调用下层的容器运行时。如果是 update 事件的话，kubelet 就会根据 pod 对象具体的变更情况，调用下层的容器运行时进行容器的重建。&lt;/p>
&lt;h2 id="kubelet-创建-pod-的流程imagepnghttpsnotes-learningoss-cn-beijingaliyuncscompaseql1645680598998-2bf06936-f8ac-48fa-b370-796e5c334545png">kubelet 创建 pod 的流程&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/paseql/1645680598998-2bf06936-f8ac-48fa-b370-796e5c334545.png" alt="image.png">&lt;/h2>
&lt;p>Note：注意 14，,15 步，kubelet 会先将生成配置(volume 挂载、配置主机名等等)，才会去启动 pod，哪怕 pod 启动失败，挂载依然存在。&lt;/p>
&lt;h1 id="同步循环">同步循环&lt;/h1>
&lt;h2 id="kubeletsyncloop--同步循环入口">kubelet.syncLoop() # 同步循环入口&lt;/h2>
&lt;p>syncLoop 中首先定义了一个 syncTicker 和 housekeepingTicker，即使没有需要更新的 pod 配置，kubelet 也会定时去做同步和清理 pod 的工作。然后在 for 循环中一直调用 syncLoopIteration，如果在每次循环过程中出现比较严重的错误，kubelet 会记录到 runtimeState 中，遇到错误就等待 5 秒中继续循环。&lt;/p>
&lt;p>源码：&lt;code>pkg/kubelet/kubelet.go&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">kl&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Kubelet&lt;/span>) &lt;span style="color:#a6e22e">syncLoop&lt;/span>(&lt;span style="color:#a6e22e">updates&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#a6e22e">kubetypes&lt;/span>.&lt;span style="color:#a6e22e">PodUpdate&lt;/span>, &lt;span style="color:#a6e22e">handler&lt;/span> &lt;span style="color:#a6e22e">SyncHandler&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">InfoS&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Starting kubelet main sync loop&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 每秒检测一次是否有需要同步的 pod workers。同步周期默认 10 秒
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">syncTicker&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">NewTicker&lt;/span>(&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Second&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">syncTicker&lt;/span>.&lt;span style="color:#a6e22e">Stop&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 每两秒检测一次是否有需要清理的 pod
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">housekeepingTicker&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">NewTicker&lt;/span>(&lt;span style="color:#a6e22e">housekeepingPeriod&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">housekeepingTicker&lt;/span>.&lt;span style="color:#a6e22e">Stop&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// pod 的生命周期变化
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">plegCh&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">pleg&lt;/span>.&lt;span style="color:#a6e22e">Watch&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">base&lt;/span> = &lt;span style="color:#ae81ff">100&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Millisecond&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">max&lt;/span> = &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Second&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">factor&lt;/span> = &lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">duration&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">base&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Responsible for checking limits in resolv.conf
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// The limits do not have anything to do with individual pods
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Since this is called in syncLoop, we don&amp;#39;t need to call it anywhere else
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">dnsConfigurer&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">dnsConfigurer&lt;/span>.&lt;span style="color:#a6e22e">ResolverConfig&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">dnsConfigurer&lt;/span>.&lt;span style="color:#a6e22e">CheckLimitsForResolvConf&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">runtimeState&lt;/span>.&lt;span style="color:#a6e22e">runtimeErrors&lt;/span>(); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">ErrorS&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Skipping pod synchronization&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// exponential backoff
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Sleep&lt;/span>(&lt;span style="color:#a6e22e">duration&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">duration&lt;/span> = &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Duration&lt;/span>(&lt;span style="color:#a6e22e">math&lt;/span>.&lt;span style="color:#a6e22e">Min&lt;/span>(float64(&lt;span style="color:#a6e22e">max&lt;/span>), &lt;span style="color:#a6e22e">factor&lt;/span>&lt;span style="color:#f92672">*&lt;/span>float64(&lt;span style="color:#a6e22e">duration&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// reset backoff if we have a success
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">duration&lt;/span> = &lt;span style="color:#a6e22e">base&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">syncLoopMonitor&lt;/span>.&lt;span style="color:#a6e22e">Store&lt;/span>(&lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">clock&lt;/span>.&lt;span style="color:#a6e22e">Now&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 第二个参数为 SyncHandler 类型，SyncHandler 是一个 interface，
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 在该文件开头处定义
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">syncLoopIteration&lt;/span>(&lt;span style="color:#a6e22e">updates&lt;/span>, &lt;span style="color:#a6e22e">handler&lt;/span>, &lt;span style="color:#a6e22e">syncTicker&lt;/span>.&lt;span style="color:#a6e22e">C&lt;/span>, &lt;span style="color:#a6e22e">housekeepingTicker&lt;/span>.&lt;span style="color:#a6e22e">C&lt;/span>, &lt;span style="color:#a6e22e">plegCh&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">syncLoopMonitor&lt;/span>.&lt;span style="color:#a6e22e">Store&lt;/span>(&lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">clock&lt;/span>.&lt;span style="color:#a6e22e">Now&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="kubeletsyncloopiteration--监听-pod-变化">kubelet.syncLoopIteration() # 监听 Pod 变化&lt;/h2>
&lt;p>syncLoopIteration 这个方法就会对多个管道进行遍历，发现任何一个管道有消息就交给 handler 去处理。它会从以下管道中获取消息：&lt;/p>
&lt;ul>
&lt;li>configCh：该信息源由 kubeDeps 对象中的 PodConfig 子模块提供，该模块将同时 watch 3 个不同来源的 pod 信息的变化（file，http，apiserver），一旦某个来源的 pod 信息发生了更新（创建/更新/删除），这个 channel 中就会出现被更新的 pod 信息和更新的具体操作。&lt;/li>
&lt;li>syncCh：定时器管道，每隔一秒去同步最新保存的 pod 状态&lt;/li>
&lt;li>houseKeepingCh：housekeeping 事件的管道，做 pod 清理工作&lt;/li>
&lt;li>plegCh：该信息源由 kubelet 对象中的 pleg 子模块提供，该模块主要用于周期性地向 container runtime 查询当前所有容器的状态，如果状态发生变化，则这个 channel 产生事件。&lt;/li>
&lt;li>livenessManager.Updates()：健康检查发现某个 pod 不可用，kubelet 将根据 Pod 的 restartPolicy 自动执行正确的操作&lt;/li>
&lt;/ul>
&lt;p>源码：&lt;code>pkg/kubelet/kubelet.go&lt;/code>-&lt;code>kubelet.syncLoopIteration()&lt;/code>&lt;/p>
&lt;h2 id="pod-处理入口">Pod 处理入口&lt;/h2>
&lt;p>kubelet.syncLoopIteration() 中的 SyncHandler 参数是一个接口，kubelet 结构体已实现该接口。后续 Pod 的增删改查行为，使用的都是通过实现了 SyncHandler 接口的 kubelet 结构体上的方法。&lt;/p>
&lt;p>所以 &lt;code>kubelet.HandlePodXXX()&lt;/code> 就是 &lt;code>SyncHandler.HandlePodXXX()&lt;/code>，在这些处理 Pod 的方法中，都会调用 &lt;code>kubelet.dispatchWork()&lt;/code> 方法，把对 Pod 的操作下发给 podWorkers()。&lt;/p>
&lt;h3 id="kubelethandlepodadditions--处理新增-pod">kubelet.HandlePodAdditions() # 处理新增 Pod&lt;/h3>
&lt;h3 id="kubelethandlepodupdates--处理更新-pod">kubelet.HandlePodUpdates() # 处理更新 Pod&lt;/h3>
&lt;h3 id="kubelethandlepodremoves--处理删除-pod">kubelet.HandlePodRemoves() # 处理删除 Pod&lt;/h3>
&lt;h3 id="kubelethandlepodreconcile--处理调谐-pod">kubelet.HandlePodReconcile() # 处理调谐 Pod&lt;/h3>
&lt;h2 id="kubeletdispatchwork--下发工作">kubelet.dispatchWork() # 下发工作&lt;/h2>
&lt;p>&lt;code>kubelet.dispatchWorker()&lt;/code> 的主要作用是把某个对 Pod 的操作（创建/更新/删除）下发给 PodWorkers 模块。这里面说的对 Pod 的操作，就是上面 SyncHandler 接口下的几个方法。&lt;/p>
&lt;p>源码：&lt;code>pkg/kubelet/kubelet.go&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">kl&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Kubelet&lt;/span>) &lt;span style="color:#a6e22e">dispatchWork&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">v1&lt;/span>.&lt;span style="color:#a6e22e">Pod&lt;/span>, &lt;span style="color:#a6e22e">syncType&lt;/span> &lt;span style="color:#a6e22e">kubetypes&lt;/span>.&lt;span style="color:#a6e22e">SyncPodType&lt;/span>, &lt;span style="color:#a6e22e">mirrorPod&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">v1&lt;/span>.&lt;span style="color:#a6e22e">Pod&lt;/span>, &lt;span style="color:#a6e22e">start&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Time&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 在一个异步工作器中运行同步。所有对 Pod 的操作都转到 PodWorker 模块中
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 由实现了 PodWorkers interface{} 的 podWorkers struct{} 的各种方法进行处理
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">podWorkers&lt;/span>.&lt;span style="color:#a6e22e">UpdatePod&lt;/span>(&lt;span style="color:#a6e22e">UpdatePodOptions&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Pod&lt;/span>: &lt;span style="color:#a6e22e">pod&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">MirrorPod&lt;/span>: &lt;span style="color:#a6e22e">mirrorPod&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">UpdateType&lt;/span>: &lt;span style="color:#a6e22e">syncType&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">StartTime&lt;/span>: &lt;span style="color:#a6e22e">start&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Note the number of containers for new pods.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">syncType&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">kubetypes&lt;/span>.&lt;span style="color:#a6e22e">SyncPodCreate&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">metrics&lt;/span>.&lt;span style="color:#a6e22e">ContainersPerPodCount&lt;/span>.&lt;span style="color:#a6e22e">Observe&lt;/span>(float64(len(&lt;span style="color:#a6e22e">pod&lt;/span>.&lt;span style="color:#a6e22e">Spec&lt;/span>.&lt;span style="color:#a6e22e">Containers&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>