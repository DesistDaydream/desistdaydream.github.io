<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – Client Libraries(客户端库)</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/Kubernetes-%E5%BC%80%E5%8F%91/Client-Libraries%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BA%93/</link><description>Recent content in Client Libraries(客户端库) on 断念梦</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/Kubernetes-%E5%BC%80%E5%8F%91/Client-Libraries%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BA%93/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Client Libraries(客户端库)</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/Kubernetes-%E5%BC%80%E5%8F%91/Client-Libraries%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BA%93/Client-Libraries%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BA%93/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/Kubernetes-%E5%BC%80%E5%8F%91/Client-Libraries%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BA%93/Client-Libraries%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BA%93/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kubernetes.io/docs/reference/using-api/client-libraries/">官方文档&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Client Libraries(客户端库)&lt;/strong> 是各种编程语言的&lt;strong>第三方库的统称&lt;/strong>。这些库可以用来让各种编程语言通过代码的方式访问 Kubernetes API。在使用这些库编写代码时，并不需要自己实现对 Kubernetes API 的调用和 处理 Request/Response，这些处理逻辑都在 Client Libraries 中包括了。客户端库还会处理诸如身份验证之类的行为。&lt;/p>
&lt;p>如果代码在 Kubernetes 集群中运行，代码中的 Client Libraires 可以发现并使用 Kubernetes 的 ServiceAccount 进行身份验证。&lt;/p>
&lt;p>如果代码在 Kubernetes 集群外运行，代码中的 Client Libraires 能够理解 &lt;a href="https://kubernetes.io/zh/docs/tasks/access-application-cluster/configure-access-multiple-clusters/">kubeconfig 文件&lt;/a> 格式来读取凭据和 API 服务器地址。&lt;/p>
&lt;p>Kubernetes 现阶段官方支持 Go、Python、Java、 dotnet、Javascript 和 Haskell 语言的客户端库。还有一些其他客户端库由对应作者而非 Kubernetes 团队提供并维护。 参考客户端库了解如何使用其他语言 来访问 API 以及如何执行身份认证。&lt;/p></description></item><item><title>Docs: client-go连接K8s集群进行pod的增删改查</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/Kubernetes-%E5%BC%80%E5%8F%91/Client-Libraries%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BA%93/client-go%E8%BF%9E%E6%8E%A5K8s%E9%9B%86%E7%BE%A4%E8%BF%9B%E8%A1%8Cpod%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/Kubernetes-%E5%BC%80%E5%8F%91/Client-Libraries%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BA%93/client-go%E8%BF%9E%E6%8E%A5K8s%E9%9B%86%E7%BE%A4%E8%BF%9B%E8%A1%8Cpod%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</guid><description>
&lt;h1 id="背景">背景&lt;/h1>
&lt;p>最近在看&lt;code>client-go&lt;/code>源码最基础的部分，&lt;code>client-go&lt;/code>的四类客户端，&lt;code>RestClient、ClientSet、DynamicClient、DiscoveryClient&lt;/code>。其中&lt;code>RestClient&lt;/code>是最基础的客户端，它对&lt;code>Http&lt;/code>进行了封装，支持&lt;code>JSON&lt;/code>和&lt;code>protobuf&lt;/code>格式数据。其它三类客户端都是通过在&lt;code>RestClient&lt;/code>基础上再次封装而得来。不过我对&lt;code>ClientSet&lt;/code>和&lt;code>DynamicClient&lt;/code>傻傻分不清，虽然很多资料上说它两最大区别是，&lt;code>ClientSet&lt;/code>能够使用预先生成的&lt;code>Api&lt;/code>和&lt;code>ApiServer&lt;/code>进行通信；而&lt;code>DynamicClient&lt;/code>更加强大，不仅仅能够调用预先生成的&lt;code>Api&lt;/code>，还能够对一些&lt;code>CRD&lt;/code>资源通过结构化嵌套类型跟&lt;code>ApiServer&lt;/code>进行通信。意思大致明白前者能够调用&lt;code>Kubernetes&lt;/code>本地资源类型，后者还可以调用一些自定资源，那么他们究竟是如何跟&lt;code>ApiServer&lt;/code>进行交互、&lt;code>Pod&lt;/code>的增删改查呢？本文通过分析&lt;code>ClientSet&lt;/code>代码和&lt;code>client-go&lt;/code>客户端调用&lt;code>Kubernetes&lt;/code>集群的方式来演示下整个交互过程。&lt;/p>
&lt;h1 id="准备工作">准备工作&lt;/h1>
&lt;p>已经安装&lt;code>Kubernetes&lt;/code>集群和配置本地&lt;code>IDE&lt;/code>环境&lt;/p>
&lt;ol>
&lt;li>
&lt;p>根据&lt;code>kubernetes&lt;/code>集群版本选择&lt;code>clone client-go&lt;/code>到本地：&lt;code>https://github.com/kubernetes/client-go/tree/release-14.0&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>导入到&lt;code>IDE&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>运行 &lt;code>examples/create-update-delete-deployment/main.go&lt;/code> 正常情况下会提示如下错误：&lt;/p>
&lt;p>panic: CreateFile C:\Users\shj.kube\config: The system cannot find the path spe
cified.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>错误信息提示很清楚，没有找到本地文件夹下的&lt;code>config&lt;/code>文件，处理方式也很简单，只需要把你&lt;code>Kubernetes&lt;/code>集群中&lt;code>$HOME/.kube/config&lt;/code>复制到本地即可；仔细阅读代码可以发现，也可以通过自行配置客户端连接信息（生产环境慎用）。&lt;/p>
&lt;p>4、运行 main 函数即可进行 Pod 增删改查操作。&lt;/p>
&lt;h1 id="client-go-连接-apiserver-进行-pod-的增删改查">client-go 连接 ApiServer 进行 Pod 的增删改查&lt;/h1>
&lt;ol>
&lt;li>获取&lt;code>APIserver&lt;/code>连接地址、认证配置等信息&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">kubeconfig&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//获取当前用户home文件夹，并获取kubeconfig配置
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">home&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">homedir&lt;/span>.&lt;span style="color:#a6e22e">HomeDir&lt;/span>(); &lt;span style="color:#a6e22e">home&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">kubeconfig&lt;/span> = &lt;span style="color:#a6e22e">flag&lt;/span>.&lt;span style="color:#a6e22e">String&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;kubeconfig&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">filepath&lt;/span>.&lt;span style="color:#a6e22e">Join&lt;/span>(&lt;span style="color:#a6e22e">home&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;.kube&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;config&amp;#34;&lt;/span>), &lt;span style="color:#e6db74">&amp;#34;(optional) absolute path to the kubeconfig file&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {&lt;span style="color:#75715e">//如果没有获取到，则需要自行配置kubeconfig
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">kubeconfig&lt;/span> = &lt;span style="color:#a6e22e">flag&lt;/span>.&lt;span style="color:#a6e22e">String&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;kubeconfig&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;absolute path to the kubeconfig file&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//把用户传递的命令行参数，解析为响应变量的值
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">flag&lt;/span>.&lt;span style="color:#a6e22e">Parse&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//加载kubeconfig中的apiserver地址、证书配置等信息
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">config&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">clientcmd&lt;/span>.&lt;span style="color:#a6e22e">BuildConfigFromFlags&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>, &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">kubeconfig&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/tbu177/311z1fa79ef320e339b2cf84c6924ecaf224" alt="">&lt;/p>
&lt;pre>&lt;code>debug信息
&lt;/code>&lt;/pre>
&lt;p>2、创建&lt;code>Clientset&lt;/code>客户端&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//NewForConfig为给定的配置创建一个新的Clientset（如下图所示包含所有的api-versions，这样做的目的是便于其它
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//资源类型对这个Pod进行管理和控制？）。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">clientset&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">kubernetes&lt;/span>.&lt;span style="color:#a6e22e">NewForConfig&lt;/span>(&lt;span style="color:#a6e22e">config&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/tbu177/311z40ea6463a53d2e1fbffae83e513a8852" alt="">&lt;/p>
&lt;pre>&lt;code>debug信息
&lt;/code>&lt;/pre>
&lt;p>3、创建&lt;code>deployment&lt;/code>客户端&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//这个过程中会把包含RESTClient配置信息、命名空间信息赋值到deploymentsClient中，具体如下图信息。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">deploymentsClient&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">clientset&lt;/span>.&lt;span style="color:#a6e22e">AppsV1&lt;/span>().&lt;span style="color:#a6e22e">Deployments&lt;/span>(&lt;span style="color:#a6e22e">apiv1&lt;/span>.&lt;span style="color:#a6e22e">NamespaceDefault&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//构造deployment
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">deployment&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">appsv1&lt;/span>.&lt;span style="color:#a6e22e">Deployment&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ObjectMeta&lt;/span>: &lt;span style="color:#a6e22e">metav1&lt;/span>.&lt;span style="color:#a6e22e">ObjectMeta&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;demo-deployment&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Spec&lt;/span>: &lt;span style="color:#a6e22e">appsv1&lt;/span>.&lt;span style="color:#a6e22e">DeploymentSpec&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Replicas&lt;/span>: &lt;span style="color:#a6e22e">int32Ptr&lt;/span>(&lt;span style="color:#ae81ff">2&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Selector&lt;/span>: &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">metav1&lt;/span>.&lt;span style="color:#a6e22e">LabelSelector&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">MatchLabels&lt;/span>: &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">string&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;app&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;demo&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Template&lt;/span>: &lt;span style="color:#a6e22e">apiv1&lt;/span>.&lt;span style="color:#a6e22e">PodTemplateSpec&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ObjectMeta&lt;/span>: &lt;span style="color:#a6e22e">metav1&lt;/span>.&lt;span style="color:#a6e22e">ObjectMeta&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Labels&lt;/span>: &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">string&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;app&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;demo&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Spec&lt;/span>: &lt;span style="color:#a6e22e">apiv1&lt;/span>.&lt;span style="color:#a6e22e">PodSpec&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Containers&lt;/span>: []&lt;span style="color:#a6e22e">apiv1&lt;/span>.&lt;span style="color:#a6e22e">Container&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;web&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Image&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;nginx:1.12&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Ports&lt;/span>: []&lt;span style="color:#a6e22e">apiv1&lt;/span>.&lt;span style="color:#a6e22e">ContainerPort&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;http&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Protocol&lt;/span>: &lt;span style="color:#a6e22e">apiv1&lt;/span>.&lt;span style="color:#a6e22e">ProtocolTCP&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ContainerPort&lt;/span>: &lt;span style="color:#ae81ff">80&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/tbu177/311zfe33d3d2814176bc1ef2cc4f72eeb2e7" alt="">&lt;/p>
&lt;p>看到这里之后，&lt;code>ClientSet&lt;/code>之所以只能处理预先声明的原生资源类型，是因为对象都是使用的内置元数据类型，不存在的自然没有办法使用了，这时我们在看下&lt;code>DynamicClient&lt;/code>，部分代码如下所示，它使用&lt;code>unstructured.Unstructured&lt;/code>表示来自 &lt;code>API Server&lt;/code>的所有对象值。&lt;code>Unstructured&lt;/code>类型是一个嵌套的&lt;code>map[string]inferface{}&lt;/code> 值的集合来创建一个内部结构，通过这种方式，可以表示自定义资源&lt;code>CRD&lt;/code>资源对象。具体示例，请参考：&lt;code>examples/dynamic-create-update-delete-deployment/main.go&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">deployment&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">unstructured&lt;/span>.&lt;span style="color:#a6e22e">Unstructured&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Object&lt;/span>: &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">interface&lt;/span>{}{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;apiVersion&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;apps/v1&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;kind&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Deployment&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;metadata&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">interface&lt;/span>{}{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;demo-deployment&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;spec&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">interface&lt;/span>{}{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;replicas&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">2&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;selector&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">interface&lt;/span>{}{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;matchLabels&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">interface&lt;/span>{}{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;app&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;demo&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;template&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">interface&lt;/span>{}{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;metadata&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">interface&lt;/span>{}{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;labels&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">interface&lt;/span>{}{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;app&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;demo&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;spec&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">interface&lt;/span>{}{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;containers&amp;#34;&lt;/span>: []&lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">interface&lt;/span>{}{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;web&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;image&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;nginx:1.12&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ports&amp;#34;&lt;/span>: []&lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">interface&lt;/span>{}{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;http&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;protocol&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;TCP&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;containerPort&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">80&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>4、发送&lt;code>Post&lt;/code>请求&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//发送Post请求到Kubernetes集群
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">result&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">deploymentsClient&lt;/span>.&lt;span style="color:#a6e22e">Create&lt;/span>(&lt;span style="color:#a6e22e">deployment&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行下&lt;code>kubectl get pod&lt;/code>发现 Kubernetes 集群中 Pod 已经创建。5、更新&lt;code>Pod&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//尝试更新资源
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">retryErr&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">retry&lt;/span>.&lt;span style="color:#a6e22e">RetryOnConflict&lt;/span>(&lt;span style="color:#a6e22e">retry&lt;/span>.&lt;span style="color:#a6e22e">DefaultRetry&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>() &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//获取Get（）返回的“result”
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span>, &lt;span style="color:#a6e22e">getErr&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">deploymentsClient&lt;/span>.&lt;span style="color:#a6e22e">Get&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;demo-deployment&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">metav1&lt;/span>.&lt;span style="color:#a6e22e">GetOptions&lt;/span>{})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">getErr&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> panic(&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Failed to get latest version of Deployment: %v&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">getErr&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//replica数量降低到1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span>.&lt;span style="color:#a6e22e">Spec&lt;/span>.&lt;span style="color:#a6e22e">Replicas&lt;/span> = &lt;span style="color:#a6e22e">int32Ptr&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//修改nginx镜像
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span>.&lt;span style="color:#a6e22e">Spec&lt;/span>.&lt;span style="color:#a6e22e">Template&lt;/span>.&lt;span style="color:#a6e22e">Spec&lt;/span>.&lt;span style="color:#a6e22e">Containers&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>].&lt;span style="color:#a6e22e">Image&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;nginx:1.13&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//更新（result）
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">updateErr&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">deploymentsClient&lt;/span>.&lt;span style="color:#a6e22e">Update&lt;/span>(&lt;span style="color:#a6e22e">result&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">updateErr&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/tbu177/311ze17817d585f6936fa2f18f17f2678de6" alt="">&lt;/p>
&lt;pre>&lt;code>更新模板信息
&lt;/code>&lt;/pre>
&lt;p>&lt;code>RetryOnConflict&lt;/code>用于需要考虑更新冲突的情况下对资源进行更新，出现这种场景，大多因为存在其它客户端但或者代码同一时间内操作该资源对象。如果&lt;code>update&lt;/code>函数返回冲突错误，&lt;code>RetryOnConflict&lt;/code>将按指定策略等待一段时间退后，再次尝试更新。&lt;/p>
&lt;p>6、查询操作&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//发送http get请求获取pod列表
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">list&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">deploymentsClient&lt;/span>.&lt;span style="color:#a6e22e">List&lt;/span>(&lt;span style="color:#a6e22e">metav1&lt;/span>.&lt;span style="color:#a6e22e">ListOptions&lt;/span>{})
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其内部查询接口如下图所示：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/tbu177/311zdad11d29dbefd5810a31c0e3a02fa976" alt="">&lt;/p>
&lt;p>其中&lt;code>c.client&lt;/code>读取配置实例化&lt;code>RESTClient&lt;/code>对象和&lt;code>ns&lt;/code>,其中&lt;code>deployments&lt;/code>这个对象是在这行&lt;code>deploymentsClient := clientset.AppsV1().Deployments(apiv1.NamespaceDefault)&lt;/code>进行初始化; &lt;code>Get()&lt;/code>通过&lt;code>Get&lt;/code>请求，同样支持&lt;code>POST PUT DELETE PATCH&lt;/code>;&lt;code>Resource&lt;/code>设置请求的资源名称;&lt;code>VersionedParams&lt;/code> 设置查询选项，例如：&lt;code>TimeoutSeconds&lt;/code>;&lt;code>Do()&lt;/code>执行请求，结果&lt;code>Into&lt;/code>到&lt;code>Result&lt;/code>。&lt;/p>
&lt;p>7、删除操作&lt;/p>
&lt;pre>&lt;code>//指定删除策略
deletePolicy := metav1.DeletePropagationForeground
//针对特定deployment进行删除操作
if err := deploymentsClient.Delete(&amp;quot;demo-deployment&amp;quot;, &amp;amp;metav1.DeleteOptions{
PropagationPolicy: &amp;amp;deletePolicy,
});
&lt;/code>&lt;/pre>
&lt;p>&lt;code>Kubernetes&lt;/code>控制器的删除有 3 种模式：&lt;/p>
&lt;ul>
&lt;li>&lt;code>Foreground&lt;/code>: 删除控制器之前，先删除控制器所管理的资源对象删除。&lt;/li>
&lt;li>&lt;code>Background&lt;/code>：删除控制器后，控制器所管理的资源对象由&lt;code>GC&lt;/code>在后台进行删除。&lt;/li>
&lt;li>&lt;code>Orphan&lt;/code>：只删除控制器，不删除控制器所管理的资源对象(举个例子，比如你删除了&lt;code>deployment&lt;/code>，那么对应的&lt;code>Pod&lt;/code>不会被删除)。&lt;/li>
&lt;/ul>
&lt;p>8、观察&lt;code>Pod&lt;/code>变化&lt;/p>
&lt;pre>&lt;code>[root@k8s-m1 ~]# kubectl get pod --watch
NAME READY STATUS RESTARTS AGE
demo-deployment-5fc8ffdb68-8xdcx 1/1 Running 0 26s
demo-deployment-5fc8ffdb68-w555g 1/1 Running 0 26s
demo-deployment-5fc8ffdb68-w555g 1/1 Terminating 0 42s
demo-deployment-5cb6f65f77-tn5bn 0/1 Pending 0 0s
demo-deployment-5cb6f65f77-tn5bn 0/1 Pending 0 0s
demo-deployment-5cb6f65f77-tn5bn 0/1 ContainerCreating 0 0s
demo-deployment-5fc8ffdb68-w555g 0/1 Terminating 0 43s
demo-deployment-5cb6f65f77-tn5bn 1/1 Running 0 2s
demo-deployment-5fc8ffdb68-8xdcx 1/1 Terminating 0 44s
demo-deployment-5fc8ffdb68-8xdcx 0/1 Terminating 0 45s
demo-deployment-5fc8ffdb68-8xdcx 0/1 Terminating 0 48s
demo-deployment-5fc8ffdb68-8xdcx 0/1 Terminating 0 48s
demo-deployment-5fc8ffdb68-w555g 0/1 Terminating 0 51s
demo-deployment-5fc8ffdb68-w555g 0/1 Terminating 0 51s
demo-deployment-5cb6f65f77-tn5bn 1/1 Terminating 0 52s
demo-deployment-5cb6f65f77-tn5bn 0/1 Terminating 0 53s
demo-deployment-5cb6f65f77-tn5bn 0/1 Terminating 0 56s
demo-deployment-5cb6f65f77-tn5bn 0/1 Terminating 0 56s
&lt;/code>&lt;/pre>
&lt;h1 id="总结">总结&lt;/h1>
&lt;p>本文主要通过在本地运行&lt;code>client-go/ClientSet&lt;/code>客户端对&lt;code>Pod&lt;/code>的增删改查，并解释了代码的执行过程。同时加深了对&lt;code>ClientSet&lt;/code>客户端的理解。&lt;/p></description></item><item><title>Docs: Go Client</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/Kubernetes-%E5%BC%80%E5%8F%91/Client-Libraries%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BA%93/Go-Client/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/Kubernetes-%E5%BC%80%E5%8F%91/Client-Libraries%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BA%93/Go-Client/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/kubernetes/client-go">GitHub 项目，kubernetes/client-go&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.danielhu.cn/tags/client-go/">Danielhu 博客&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/13enj17ifaD-mSrjVzAQKw">公众号-KubeSphere 云原生，Client-go 源码分析之 SharedInformer&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Go Client 就是 Kubernetes 针对 Go 编程语言 而言的 Client Library。Go Client 项目名称为 client-go，是用来与 Kubernetes 对话的 Go 编程语言 的第三方库。&lt;/p>
&lt;h1 id="安装-client-go">安装 client-go&lt;/h1>
&lt;p>版本控制策略：k8s 版本 1.18.8 对应 client-go 版本 0.18.8，其他版本以此类推。&lt;/p>
&lt;p>使用前注意事项：
使用 client-go 之前，需要手动获取对应版本的的 client-go 库。&lt;/p>
&lt;p>如果使用的 Kubernetes 版本&amp;gt; = &lt;code>v1.17.0&lt;/code>，请使用相应的 &lt;code>v0.x.y&lt;/code>标签。例如，&lt;code>k8s.io/client-go@v0.17.0&lt;/code>对应于 Kubernetes &lt;code>v1.17.0&lt;/code>&lt;/p>
&lt;p>根据版本控制策略，使用如下命令进行初始化:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 初始化项目&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>go mod init github.com/DesistDaydream/kubernetes-development
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 为 go.mod 文件添加 require k8s.io/client-go v0.19.2 // indirect 信息&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>go get k8s.io/client-go@v0.19.2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 整理 go.mod 与 go.sum 文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>go mod tidy
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>至此，才可以正常使用，否则会产生很多依赖问题&lt;/p>
&lt;h1 id="hello-world-示例">Hello World 示例&lt;/h1>
&lt;p>参考：&lt;a href="https://www.notion.so/K8S-b33520bf4f2c4005adb66f5ee1785502">阳明大佬&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;context&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;os&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;k8s.io/client-go/kubernetes&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;k8s.io/client-go/rest&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;k8s.io/client-go/tools/clientcmd&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">v1&lt;/span> &lt;span style="color:#e6db74">&amp;#34;k8s.io/apimachinery/pkg/apis/meta/v1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// InOrOut 判断当前环境是在集群内部，还是集群外部
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">InOrOut&lt;/span>() &lt;span style="color:#66d9ef">string&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 如果容器内具有环境变量 KUBERNETES_SERVICE_HOST 且不为空，则当前代码是在容器内运行，否则是在集群外部运行
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">h&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">Getenv&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;KUBERNETES_SERVICE_HOST&amp;#34;&lt;/span>); &lt;span style="color:#a6e22e">h&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;inCluster&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;outCluster&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Deployment 获取指定 namespace 下所有的 deployment 对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">get&lt;/span>(&lt;span style="color:#a6e22e">clientset&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">kubernetes&lt;/span>.&lt;span style="color:#a6e22e">Clientset&lt;/span>, &lt;span style="color:#a6e22e">namespace&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 获取指定 名称空间 下所有的 deployment 对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">deployments&lt;/span>, &lt;span style="color:#a6e22e">_&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">clientset&lt;/span>.&lt;span style="color:#a6e22e">AppsV1&lt;/span>().&lt;span style="color:#a6e22e">Deployments&lt;/span>(&lt;span style="color:#a6e22e">namespace&lt;/span>).&lt;span style="color:#a6e22e">List&lt;/span>(&lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">TODO&lt;/span>(), &lt;span style="color:#a6e22e">v1&lt;/span>.&lt;span style="color:#a6e22e">ListOptions&lt;/span>{})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span>, &lt;span style="color:#a6e22e">deploy&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">deployments&lt;/span>.&lt;span style="color:#a6e22e">Items&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;%d -&amp;gt; %s\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#a6e22e">deploy&lt;/span>.&lt;span style="color:#a6e22e">Name&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">config&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">rest&lt;/span>.&lt;span style="color:#a6e22e">Config&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 根据代码所在环境，决定如何创建一个连接集群所需的配置。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">switch&lt;/span> &lt;span style="color:#a6e22e">InOrOut&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#34;inCluster&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 根据容器内的 /var/run/secrets/kubernetes.io/serviceaccount/ 目录下的 token 与 ca.crt 文件创建一个用于连接集群的配置。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">config&lt;/span>, &lt;span style="color:#a6e22e">_&lt;/span> = &lt;span style="color:#a6e22e">rest&lt;/span>.&lt;span style="color:#a6e22e">InClusterConfig&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#34;outCluster&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 根据指定的 kubeconfig 文件创建一个用于连接集群的配置，/root/.kube/config 为 kubectl 命令所用的 config 文件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">config&lt;/span>, &lt;span style="color:#a6e22e">_&lt;/span> = &lt;span style="color:#a6e22e">clientcmd&lt;/span>.&lt;span style="color:#a6e22e">BuildConfigFromFlags&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;/root/.kube/config&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 注意，clientcmd.BuildConfigFromFlags() 内部实际上也是有调用 rest.InClusterConfig() 的逻辑，只要满足条件即可。条件如下：
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 若第二个参数为空的话，则会直接调用 rest.InClusterConfig()
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 根据 BuildConfigFromFlags 创建的配置，返回一个可以连接集群的指针
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">clientset&lt;/span>, &lt;span style="color:#a6e22e">_&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">kubernetes&lt;/span>.&lt;span style="color:#a6e22e">NewForConfig&lt;/span>(&lt;span style="color:#a6e22e">config&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 获取指定 namespace 下所有的 deployment 对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">get&lt;/span>(&lt;span style="color:#a6e22e">clientset&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;kube-system&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="示例详解">示例详解&lt;/h2>
&lt;p>从上面的示例中可以看到，通过 API 访问 Kubernetes 集群大体分为两类&lt;/p>
&lt;ul>
&lt;li>从集群内部访问&lt;/li>
&lt;li>从集群外部访问&lt;/li>
&lt;/ul>
&lt;p>所谓的从集群内部访问，其实就是代码运行在 pod 中。不过，不管是集群内还是集群外，至少需要一个配置信息来连接集群，而两种访问方式的唯一区别也在于此，不同的访问方式，获取到的配置信息是不同的。&lt;/p>
&lt;ul>
&lt;li>但是，不管如何获得，这个配置信息实际上就是 k8s.io/client-go/rest 包中的 &lt;code>*rest.Config&lt;/code> 结构体。这个结构体中包含了待连接到 Kubernetes 集群的各种信息。&lt;/li>
&lt;li>然后，使用 &lt;code>*rest.Config&lt;/code> 来实例化 &lt;code>*kubernetes.Clientset&lt;/code>，这个 Clientset 就是用来通过 API 来操作 Kubernetes 的客户端集。这个 Clientset 实际上是 Kubernetes API 的集合。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Clientset&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">discovery&lt;/span>.&lt;span style="color:#a6e22e">DiscoveryClient&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">admissionregistrationV1&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">admissionregistrationv1&lt;/span>.&lt;span style="color:#a6e22e">AdmissionregistrationV1Client&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">admissionregistrationV1beta1&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">admissionregistrationv1beta1&lt;/span>.&lt;span style="color:#a6e22e">AdmissionregistrationV1beta1Client&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">appsV1&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">appsv1&lt;/span>.&lt;span style="color:#a6e22e">AppsV1Client&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">appsV1beta1&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">appsv1beta1&lt;/span>.&lt;span style="color:#a6e22e">AppsV1beta1Client&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">appsV1beta2&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">appsv1beta2&lt;/span>.&lt;span style="color:#a6e22e">AppsV1beta2Client&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">authenticationV1&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">authenticationv1&lt;/span>.&lt;span style="color:#a6e22e">AuthenticationV1Client&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">authenticationV1beta1&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">authenticationv1beta1&lt;/span>.&lt;span style="color:#a6e22e">AuthenticationV1beta1Client&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">authorizationV1&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">authorizationv1&lt;/span>.&lt;span style="color:#a6e22e">AuthorizationV1Client&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">authorizationV1beta1&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">authorizationv1beta1&lt;/span>.&lt;span style="color:#a6e22e">AuthorizationV1beta1Client&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">autoscalingV1&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">autoscalingv1&lt;/span>.&lt;span style="color:#a6e22e">AutoscalingV1Client&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">autoscalingV2beta1&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">autoscalingv2beta1&lt;/span>.&lt;span style="color:#a6e22e">AutoscalingV2beta1Client&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">autoscalingV2beta2&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">autoscalingv2beta2&lt;/span>.&lt;span style="color:#a6e22e">AutoscalingV2beta2Client&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">batchV1&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">batchv1&lt;/span>.&lt;span style="color:#a6e22e">BatchV1Client&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">batchV1beta1&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">batchv1beta1&lt;/span>.&lt;span style="color:#a6e22e">BatchV1beta1Client&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">batchV2alpha1&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">batchv2alpha1&lt;/span>.&lt;span style="color:#a6e22e">BatchV2alpha1Client&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">certificatesV1&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">certificatesv1&lt;/span>.&lt;span style="color:#a6e22e">CertificatesV1Client&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">certificatesV1beta1&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">certificatesv1beta1&lt;/span>.&lt;span style="color:#a6e22e">CertificatesV1beta1Client&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">coordinationV1beta1&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">coordinationv1beta1&lt;/span>.&lt;span style="color:#a6e22e">CoordinationV1beta1Client&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">coordinationV1&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">coordinationv1&lt;/span>.&lt;span style="color:#a6e22e">CoordinationV1Client&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">coreV1&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">corev1&lt;/span>.&lt;span style="color:#a6e22e">CoreV1Client&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">discoveryV1alpha1&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">discoveryv1alpha1&lt;/span>.&lt;span style="color:#a6e22e">DiscoveryV1alpha1Client&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">discoveryV1beta1&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">discoveryv1beta1&lt;/span>.&lt;span style="color:#a6e22e">DiscoveryV1beta1Client&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">eventsV1&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">eventsv1&lt;/span>.&lt;span style="color:#a6e22e">EventsV1Client&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">eventsV1beta1&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">eventsv1beta1&lt;/span>.&lt;span style="color:#a6e22e">EventsV1beta1Client&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">extensionsV1beta1&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">extensionsv1beta1&lt;/span>.&lt;span style="color:#a6e22e">ExtensionsV1beta1Client&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">flowcontrolV1alpha1&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">flowcontrolv1alpha1&lt;/span>.&lt;span style="color:#a6e22e">FlowcontrolV1alpha1Client&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">networkingV1&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">networkingv1&lt;/span>.&lt;span style="color:#a6e22e">NetworkingV1Client&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">networkingV1beta1&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">networkingv1beta1&lt;/span>.&lt;span style="color:#a6e22e">NetworkingV1beta1Client&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">nodeV1alpha1&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">nodev1alpha1&lt;/span>.&lt;span style="color:#a6e22e">NodeV1alpha1Client&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">nodeV1beta1&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">nodev1beta1&lt;/span>.&lt;span style="color:#a6e22e">NodeV1beta1Client&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">policyV1beta1&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">policyv1beta1&lt;/span>.&lt;span style="color:#a6e22e">PolicyV1beta1Client&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">rbacV1&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">rbacv1&lt;/span>.&lt;span style="color:#a6e22e">RbacV1Client&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">rbacV1beta1&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">rbacv1beta1&lt;/span>.&lt;span style="color:#a6e22e">RbacV1beta1Client&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">rbacV1alpha1&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">rbacv1alpha1&lt;/span>.&lt;span style="color:#a6e22e">RbacV1alpha1Client&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">schedulingV1alpha1&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">schedulingv1alpha1&lt;/span>.&lt;span style="color:#a6e22e">SchedulingV1alpha1Client&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">schedulingV1beta1&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">schedulingv1beta1&lt;/span>.&lt;span style="color:#a6e22e">SchedulingV1beta1Client&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">schedulingV1&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">schedulingv1&lt;/span>.&lt;span style="color:#a6e22e">SchedulingV1Client&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">settingsV1alpha1&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">settingsv1alpha1&lt;/span>.&lt;span style="color:#a6e22e">SettingsV1alpha1Client&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">storageV1beta1&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">storagev1beta1&lt;/span>.&lt;span style="color:#a6e22e">StorageV1beta1Client&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">storageV1&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">storagev1&lt;/span>.&lt;span style="color:#a6e22e">StorageV1Client&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">storageV1alpha1&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">storagev1alpha1&lt;/span>.&lt;span style="color:#a6e22e">StorageV1alpha1Client&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="在集群内部生成配置信息">在集群内部生成配置信息&lt;/h3>
&lt;p>使用 &lt;code>rest.InClusterConfig()&lt;/code> 方法生成 *rest.Config。使用该方法时，一般通过 /var/run/secrets/kubernetes.io/serviceaccount/ 目录下的 token 与 ca.crt 文件生成认证信息。通过容器内的环境变量生成待连接的 Server 端信息。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">InClusterConfig&lt;/span>() (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Config&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">tokenFile&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;/var/run/secrets/kubernetes.io/serviceaccount/token&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">rootCAFile&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;/var/run/secrets/kubernetes.io/serviceaccount/ca.crt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">host&lt;/span>, &lt;span style="color:#a6e22e">port&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">Getenv&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;KUBERNETES_SERVICE_HOST&amp;#34;&lt;/span>), &lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">Getenv&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;KUBERNETES_SERVICE_PORT&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">token&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">ioutil&lt;/span>.&lt;span style="color:#a6e22e">ReadFile&lt;/span>(&lt;span style="color:#a6e22e">tokenFile&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">tlsClientConfig&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">TLSClientConfig&lt;/span>{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">certutil&lt;/span>.&lt;span style="color:#a6e22e">NewPool&lt;/span>(&lt;span style="color:#a6e22e">rootCAFile&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Expected to load root CA config from %s, but got err: %v&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">rootCAFile&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">tlsClientConfig&lt;/span>.&lt;span style="color:#a6e22e">CAFile&lt;/span> = &lt;span style="color:#a6e22e">rootCAFile&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">Config&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// TODO: switch to using cluster DNS.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Host&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;https://&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">net&lt;/span>.&lt;span style="color:#a6e22e">JoinHostPort&lt;/span>(&lt;span style="color:#a6e22e">host&lt;/span>, &lt;span style="color:#a6e22e">port&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">TLSClientConfig&lt;/span>: &lt;span style="color:#a6e22e">tlsClientConfig&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">BearerToken&lt;/span>: string(&lt;span style="color:#a6e22e">token&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">BearerTokenFile&lt;/span>: &lt;span style="color:#a6e22e">tokenFile&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }, &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="在集群外部生成配置信息">在集群外部生成配置信息&lt;/h3>
&lt;p>使用 &lt;code>clientcmd.BuildConfigFromFlags()&lt;/code> 方法生成 *rest.Config。使用该方法时，直接将 kubectl 的配置文件，当作参数传递进去即可。&lt;/p>
&lt;blockquote>
&lt;p>只不过有一点需要注意，就是当参数都为空时，该方法还是会调用的 &lt;code>rest.InClusterConfig()&lt;/code> 方法。&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">BuildConfigFromFlags&lt;/span>(&lt;span style="color:#a6e22e">masterUrl&lt;/span>, &lt;span style="color:#a6e22e">kubeconfigPath&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">restclient&lt;/span>.&lt;span style="color:#a6e22e">Config&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">kubeconfigPath&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#a6e22e">masterUrl&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">kubeconfig&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">restclient&lt;/span>.&lt;span style="color:#a6e22e">InClusterConfig&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">NewNonInteractiveDeferredLoadingClientConfig&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">ClientConfigLoadingRules&lt;/span>{&lt;span style="color:#a6e22e">ExplicitPath&lt;/span>: &lt;span style="color:#a6e22e">kubeconfigPath&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">ConfigOverrides&lt;/span>{&lt;span style="color:#a6e22e">ClusterInfo&lt;/span>: &lt;span style="color:#a6e22e">clientcmdapi&lt;/span>.&lt;span style="color:#a6e22e">Cluster&lt;/span>{&lt;span style="color:#a6e22e">Server&lt;/span>: &lt;span style="color:#a6e22e">masterUrl&lt;/span>}}).&lt;span style="color:#a6e22e">ClientConfig&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: 示例</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/Kubernetes-%E5%BC%80%E5%8F%91/Client-Libraries%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BA%93/%E7%A4%BA%E4%BE%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/Kubernetes-%E5%BC%80%E5%8F%91/Client-Libraries%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BA%93/%E7%A4%BA%E4%BE%8B/</guid><description/></item><item><title>Docs: 示例</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/Kubernetes-%E5%BC%80%E5%8F%91/Client-Libraries%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BA%93/%E7%A4%BA%E4%BE%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/Kubernetes-%E5%BC%80%E5%8F%91/Client-Libraries%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BA%93/%E7%A4%BA%E4%BE%8B/</guid><description/></item></channel></rss>