<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦的站点 – Persistent Volume(持久卷)</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/9.Kubernetes-%E5%AD%98%E5%82%A8/Persistent-Volume%E6%8C%81%E4%B9%85%E5%8D%B7/</link><description>Recent content in Persistent Volume(持久卷) on 断念梦的站点</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/9.Kubernetes-%E5%AD%98%E5%82%A8/Persistent-Volume%E6%8C%81%E4%B9%85%E5%8D%B7/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Persistent Volume(持久卷)</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/9.Kubernetes-%E5%AD%98%E5%82%A8/Persistent-Volume%E6%8C%81%E4%B9%85%E5%8D%B7/Persistent-Volume%E6%8C%81%E4%B9%85%E5%8D%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/9.Kubernetes-%E5%AD%98%E5%82%A8/Persistent-Volume%E6%8C%81%E4%B9%85%E5%8D%B7/Persistent-Volume%E6%8C%81%E4%B9%85%E5%8D%B7/</guid><description>
&lt;h1 id="persistentvolume持久卷">PersistentVolume(持久卷)&lt;a class="td-heading-self-link" href="#persistentvolume%e6%8c%81%e4%b9%85%e5%8d%b7" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/">https://kubernetes.io/docs/concepts/storage/persistent-volumes/&lt;/a>
kubernetes 的 volume 有一个问题就是不够灵活，且使用 volume 的用户必须要明确知道要使用的 volume 后端是用的什么类型的存储系统(例如 NFS 就需要配置 IP 和 PATH)。这与 kubernetes 的向用户和开发隐藏底层架构的目的有所背离，对存储资源最好的使用方式是能向计算资源一样，用户和开发人员无需了解 pod 资源究竟运行于哪个节点，也无需了解存储系统是什么类型的设备以及位于何处。他们只需要提出容量大小的需求(i.e.PVC)，k8s 管理员可以为其分配所需的空间。这就是 PV 与 PVC 的作用，抽象了底层的存储，使得存储系统的使用和管理两个职能互相解耦。这就好比创建一台虚拟机，并需求 20G 的存储空间，然后虚拟机管理系统就会自动创建出来，而不用去手动指定使用哪个存储空间了。&lt;/p>
&lt;p>&lt;strong>PersistentVolume(持久卷,简称 PV)&lt;/strong> 与 &lt;strong>PersistentVolumeClaims(持久卷申请,简称 PVC)&lt;/strong> 是 kubernetes 中的一个 &lt;strong>Resource(资源)&lt;/strong>，PVC 与 volume 不同，volume 的定义需要写进 Pod 的 manifest 中。而 PVC 对于 volume 来说就是一种 &amp;ldquo;volume 的类型&amp;rdquo;。&lt;/p>
&lt;ol>
&lt;li>PV 就相当于虚拟机中的存储卷，虚拟了宿主机或者远程存储的存储资源。PVC 就相当于虚拟机里的一个物理磁盘。虚拟机里的磁盘其实就是通过存储卷来实现的，这与 PV 与 PVC 的关系基本一致。而下文讲的 StorageClass(存储类) 则相当于虚拟机中的存储池的概念了。&lt;/li>
&lt;li>PV 与 PVC 为用户和管理员提供了一个 API 接口，抽象定义了存储的消费者-生产者模型(即从 k8s 系统来说，管理员使用 PV 生产一个 storage 资源，用户使用 PVC 消费一个 storage 资源)&lt;/li>
&lt;/ol>
&lt;h2 id="pv-与-pvc-的生命周期">PV 与 PVC 的生命周期&lt;a class="td-heading-self-link" href="#pv-%e4%b8%8e-pvc-%e7%9a%84%e7%94%9f%e5%91%bd%e5%91%a8%e6%9c%9f" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>详见：&lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes%20%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/9.Kubernetes%20%E5%AD%98%E5%82%A8/Persistent%20Volume(%E6%8C%81%E4%B9%85%E5%8D%B7)/PV%20%E4%B8%8E%20PVC%20%E7%9A%84%E7%8A%B6%E6%80%81%E5%8F%98%E5%8C%96%E7%A4%BA%E4%BE%8B.md">PV 与 PVC 的状态变化示例&lt;/a>&lt;/p>
&lt;p>PV 是集群中的资源。 PVC 是对这些资源的请求，并且还充当对资源的声明检查。 PV 和 PVC 之间的交互遵循以下生命周期：&lt;/p>
&lt;ol>
&lt;li>Provisioning(供应)&lt;/li>
&lt;li>Binding(绑定)&lt;/li>
&lt;li>Using(使用)&lt;/li>
&lt;li>Storage Object in User(保护使用中存储对象)&lt;/li>
&lt;li>Protection(回收)&lt;/li>
&lt;li>Reserving a PersistentVolume(预留 PV)&lt;/li>
&lt;li>Expanding Persistent Volumes Claims(扩充 PVC 申领)&lt;/li>
&lt;/ol>
&lt;p>PV、PVC 在 Pod 中实现方式简述：&lt;/p>
&lt;p>PV 与 PVC 的工作流程：Container—Volume—PVC—PV—StorageResource&lt;/p>
&lt;ol>
&lt;li>创建 PV 资源类型的对象，每个 PV 包括几个属性：名字、capacity(容量)、reclaim policy(回收策略) 等等&lt;/li>
&lt;li>创建 PVC 资源类型的对象，每个 PVC 中包括几个属性：会话模式、名字、所需求的容量的大小等等&lt;/li>
&lt;li>当 PVC 创建后，会自动选择一个满足 PVC 所需求容量的最小 PV 来与 PVC 进行绑定，此时 PV 的状态变为 bond&lt;/li>
&lt;li>创建 Pod，在 Pod 中定义 Volume 类型为 PVC，并指定 PVC 名字以选择一个 PVC 挂载上来，然后在 container 中指定要挂载的 volume 名以及在 container 中的挂载路径&lt;/li>
&lt;/ol>
&lt;h3 id="provisioning供应">Provisioning(供应)&lt;a class="td-heading-self-link" href="#provisioning%e4%be%9b%e5%ba%94" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>&lt;strong>Provisioning(供应)&lt;/strong> 就是指供应 PV，也就是&lt;strong>创建 PV&lt;/strong> 的意思&lt;/p>
&lt;p>可以通过两种方式创建 PV：&lt;strong>statically(静态地)&lt;/strong> 或 &lt;strong>dynamically(动态地)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Static(静态)&lt;/strong> # 手动编写 PV 的 manifest，并 apply 到集群中。&lt;/li>
&lt;li>&lt;strong>Dynamic(动态)&lt;/strong> # 当管理员创建的所有 Statci PV(静态 PV) 都不匹配用户的 PVC 时，集群将会尝试为 PVC 动态地提供一个卷
&lt;ul>
&lt;li>这种动态供应必须基于 StorageClasses：PVC 必须配置指定的 StorageClass，并且集群必须存在与 PVC 配置的同名的 StorageClass，才能进行动态供应。&lt;/li>
&lt;li>在声明一个 PVC 对象时，如果 manifest 中 storageClassName 字段为空，则该声明会禁用动态供应。除非集群中有一个默认的 StorageClass。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="binding绑定">Binding(绑定)&lt;a class="td-heading-self-link" href="#binding%e7%bb%91%e5%ae%9a" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;h3 id="using使用">Using(使用)&lt;a class="td-heading-self-link" href="#using%e4%bd%bf%e7%94%a8" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;h3 id="storage-object-in-user-protection保护使用中存储对象">Storage Object in User Protection(保护使用中存储对象)&lt;a class="td-heading-self-link" href="#storage-object-in-user-protection%e4%bf%9d%e6%8a%a4%e4%bd%bf%e7%94%a8%e4%b8%ad%e5%ad%98%e5%82%a8%e5%af%b9%e8%b1%a1" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;h3 id="reclaiming回收">Reclaiming(回收)&lt;a class="td-heading-self-link" href="#reclaiming%e5%9b%9e%e6%94%b6" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>当删除 PVC 后，与之关联的 PV 会变为 &lt;strong>Released(已释放)&lt;/strong> 状态。此时，控制器根据一个**Reclaim Policy(回收策略)**来处理已释放的 PV。目前, 回收策略包括三种：&lt;/p>
&lt;ol>
&lt;li>Retained(保留)&lt;/li>
&lt;li>Recycled(回收)&lt;/li>
&lt;li>Deleted(删除)。&lt;/li>
&lt;/ol>
&lt;p>也就是说，PV 可以进行这三种处理方式。&lt;/p>
&lt;h3 id="reserving-a-persistentvolume预留-pv">Reserving a PersistentVolume(预留 PV)&lt;a class="td-heading-self-link" href="#reserving-a-persistentvolume%e9%a2%84%e7%95%99-pv" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;h3 id="expanding-persistent-volumes-claims扩充-pvc-申领">Expanding Persistent Volumes Claims(扩充 PVC 申领)&lt;a class="td-heading-self-link" href="#expanding-persistent-volumes-claims%e6%89%a9%e5%85%85-pvc-%e7%94%b3%e9%a2%86" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;h1 id="动态-pv-交互流程">动态 PV 交互流程&lt;a class="td-heading-self-link" href="#%e5%8a%a8%e6%80%81-pv-%e4%ba%a4%e4%ba%92%e6%b5%81%e7%a8%8b" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/okh44l/1616117503785-5b51e61b-c925-49f1-97e4-d97e9e020268.jpeg" alt="">&lt;/p>
&lt;ol>
&lt;li>用户创建一个包含 PVC 的 Pod&lt;/li>
&lt;li>PV Controller 会观察 ApiServer，如果它发现一个 PVC 已经创建完毕但仍然是未绑定的状态，它就会试图把一个 PV 和 PVC 绑定&lt;/li>
&lt;li>Provision 就是从远端上一个具体的存储介质创建一个 Volume，并且在集群中创建一个 PV 对象，然后将此 PV 和 PVC 进行绑定&lt;/li>
&lt;li>Scheduler 进行多个维度考量完成后,把 Pod 调度到一个合适的 Node&lt;/li>
&lt;li>Kubelet 不断 watch APIServer 是否有 Pod 要调度到当前所在节点&lt;/li>
&lt;li>Pod 调度到某个节点之后，它所定义的 PV 还没有被挂载（Attach），此时 AD Controller 就会调用 VolumePlugin，把远端的 Volume 挂载到目标节点中的设备上（/dev/vdb）；当 Volum Manager 发现一个 Pod 调度到自己的节点上并且 Volume 已经完成了挂载，它就会执行 mount 操作，将本地设备（也就是刚才得到的/dev/vdb）挂载到 Pod 在节点上的一个子目录中&lt;/li>
&lt;li>启动容器,并将已经挂载到本地的 Volume 映射到容器中&lt;/li>
&lt;/ol>
&lt;h1 id="pvpvc-的-manifest-样例">PV、PVC 的 manifest 样例&lt;a class="td-heading-self-link" href="#pvpvc-%e7%9a%84-manifest-%e6%a0%b7%e4%be%8b" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="一个简单的创建-pvpvc然后-pod-使用-pvc-的实例">一个简单的创建 PV、PVC,然后 pod 使用 PVC 的实例&lt;a class="td-heading-self-link" href="#%e4%b8%80%e4%b8%aa%e7%ae%80%e5%8d%95%e7%9a%84%e5%88%9b%e5%bb%ba-pvpvc%e7%84%b6%e5%90%8e-pod-%e4%bd%bf%e7%94%a8-pvc-%e7%9a%84%e5%ae%9e%e4%be%8b" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistent-volumes">https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistent-volumes&lt;/a> 该链接下有 PV 的每个键值对的解释&lt;/p>
&lt;p>&lt;a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims">https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims&lt;/a> 该链接下有 PVC 的每个键值对的机制&lt;/p>
&lt;p>注意：&lt;/p>
&lt;ol>
&lt;li>storageClassName 相当于 PV 的一个标签，当 PVC 申请的时候，只会选择具有相同 storageClassName 的 PV 来绑定，如果集群中存在 StorageClass 资源的话，则会在对应的 StorageClass 中创建该 PV。该参数的值可以为空，如果不指定 StorageClass，则 PVC 也不能指定，才会绑定到该 PV 上。此时 PV 不使用任何 StorageClass。StorageClass 概念详见：Storage Classes 存储类&lt;/li>
&lt;/ol>
&lt;p>该示例先创建 PV，然后创建 PVC，最后让 pod 使用该 PVC，node-1.tj-test 节点上 /opt/myapp 目录会挂载到容器中的 /persistentVolume 目录上&lt;/p>
&lt;pre>&lt;code>apiVersion: v1
kind: PersistentVolume
metadata:
labels:
app: myapp
name: myapp-pv
spec:
accessModes:
- ReadWriteOnce
capacity:
storage: 10Gi
local:
path: /opt/myapp
nodeAffinity:
required:
nodeSelectorTerms:
- matchExpressions:
- key: kubernetes.io/hostname
operator: In
values:
- node-1.tj-test
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
name: myapp-pvc
labels:
app: myapp
spec:
accessModes:
- ReadWriteOnce
resources:
requests:
storage: 10Gi
selector:
matchLabels:
app: myapp
---
apiVersion: apps/v1
kind: Deployment
metadata:
name: myapp
labels:
name: myapp
spec:
replicas: 1
selector:
matchLabels:
name: myapp
template:
metadata:
name: myapp
labels:
name: myapp
spec:
containers:
- name: myapp
image: lchdzh/network-test
volumeMounts:
- mountPath: &amp;quot;/persistentVolume&amp;quot;
name: myapp-pvc
volumes:
- name: myapp-pvc
persistentVolumeClaim:
claimName: test-claim
&lt;/code>&lt;/pre></description></item><item><title>Docs: PV 与 PVC 的状态变化示例</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/9.Kubernetes-%E5%AD%98%E5%82%A8/Persistent-Volume%E6%8C%81%E4%B9%85%E5%8D%B7/PV-%E4%B8%8E-PVC-%E7%9A%84%E7%8A%B6%E6%80%81%E5%8F%98%E5%8C%96%E7%A4%BA%E4%BE%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/9.Kubernetes-%E5%AD%98%E5%82%A8/Persistent-Volume%E6%8C%81%E4%B9%85%E5%8D%B7/PV-%E4%B8%8E-PVC-%E7%9A%84%E7%8A%B6%E6%80%81%E5%8F%98%E5%8C%96%E7%A4%BA%E4%BE%8B/</guid><description>
&lt;p>我们对 PV 和 PVC 的几种状态应该不算陌生，但是在使用过程中可能也会产生一些疑问，比如为什么 PV 变成 Failed 状态了，新创建的 PVC 如何能够绑定之前的 PV，我可以恢复之前的 PV 吗？这里我们就来对 PV 和 PVC 中的几种状态变化再次进行说明。&lt;/p>
&lt;p>在不同的情况下，PV 和 PVC 的状态变化我们用如下所示的表格来进行说明：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/pgwrrw/1616117616149-71a6984a-0f21-4cad-b88b-0c28174b4a8b.jpeg" alt="">&lt;/p>
&lt;h2 id="创建-pv">创建 PV&lt;a class="td-heading-self-link" href="#%e5%88%9b%e5%bb%ba-pv" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>正常情况下 PV 被创建成功后是 Available 状态：&lt;/p>
&lt;pre>&lt;code>apiVersion: v1
kind: PersistentVolume
metadata:
name: nfs-pv
spec:
storageClassName: manual
capacity:
storage: 1Gi
accessModes:
- ReadWriteOnce
persistentVolumeReclaimPolicy: Retain
nfs:
path: /data/k8s # 指定nfs的挂载点
server: 10.151.30.1 # 指定nfs服务地址
&lt;/code>&lt;/pre>
&lt;p>直接创建上面的 PV 对象，就可以看到状态是 Available 状态，表示可以用于 PVC 绑定：&lt;/p>
&lt;pre>&lt;code>$ kubectl get pv nfs-pv
NAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM STORAGECLASS REASON AGE
nfs-pv 1Gi RWO Retain Available manual 7s
&lt;/code>&lt;/pre>
&lt;p>新建 PVC&lt;/p>
&lt;p>刚添加的 PVC 状态是 Pending，如果有合适的 PV，这个 Pending 状态会立刻变为 Bound 状态，同时相应的 PVC 也会变为 Bound，PVC 和 PV 进行了绑定。 我们可以先添加 PVC，后添加 PV，这样就能保证看到 Pending 状态。&lt;/p>
&lt;pre>&lt;code>apiVersion: v1
kind: PersistentVolumeClaim
metadata:
name: nfs-pvc
spec:
storageClassName: manual
accessModes:
- ReadWriteOnce
resources:
requests:
storage: 1Gi
&lt;/code>&lt;/pre>
&lt;p>新建上面的 PVC 资源对象，刚新建完成会是 Pending 状态：&lt;/p>
&lt;pre>&lt;code>$ kubectl get pvc nfs-pvc
NAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGE
nfs-pvc Pending manual 7s
&lt;/code>&lt;/pre>
&lt;p>当 PVC 找到合适的 PV 绑定后，就会立刻变成 Bound 状态，PV 也从 Available 状态变成了 Bound 状态：&lt;/p>
&lt;pre>&lt;code>$ kubectl get pvc nfs-pvc
NAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGE
nfs-pvc Bound nfs-pv 1Gi RWO manual 2m8s
$ kubectl get pv nfs-pv
NAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM STORAGECLASS REASON AGE
nfs-pv 1Gi RWO Retain Bound default/nfs-pvc manual 23s
&lt;/code>&lt;/pre>
&lt;h1 id="删除-pv">删除 PV&lt;a class="td-heading-self-link" href="#%e5%88%a0%e9%99%a4-pv" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>由于现在 PVC 和 PV 已经是处于绑定状态了，那么如果这个时候我们不小心将 PV 进行了删除，会出现怎样的情况呢：&lt;/p>
&lt;pre>&lt;code>$ kubectl delete pv nfs-pv
persistentvolume &amp;quot;nfs-pv&amp;quot; deleted
^C
$ kubectl get pv nfs-pv
NAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM STORAGECLASS REASON AGE
nfs-pv 1Gi RWO Retain Terminating default/nfs-pvc manual 12m
$ kubectl get pvc nfs-pvc
NAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGE
nfs-pvc Bound nfs-pv 1Gi RWO manual 13m
&lt;/code>&lt;/pre>
&lt;p>事实上我们这里删除 PV 被 hang 住了，也就是不能真正的删除 PV，但是这个时候 PV 会变成 Terminating 状态，而对应的 PVC 还是 Bound 状态，也就是说这个时候由于 PV 和 PVC 已经绑定在一起了，就不能先删除 PV，只是现在状态是 Terminating 状态，对于 PVC 还是没有任何影响，那么这个时候我们应该怎么处理呢？&lt;/p>
&lt;p>我们可以通过编辑 PV，删除 PV 中的 finalizers 属性来强制删除 PV：&lt;/p>
&lt;pre>&lt;code>$ kubectl edit pv nfs-pv
# 按照下面所示删除 finalizers 属性中的内容
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/pgwrrw/1616117616169-0dbd4e70-867e-4d9b-b3b6-d3e167e91bd3.jpeg" alt="">&lt;/p>
&lt;p>编辑完成后 PV 就会被真正删除了，而 PVC 也是 Lost 状态了：&lt;/p>
&lt;pre>&lt;code>$ kubectl get pv nfs-pv
Error from server (NotFound): persistentvolumes &amp;quot;nfs-pv&amp;quot; not found
$ kubectl get pvc nfs-pvc
NAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGE
nfs-pvc Lost nfs-pv 0 manual 23m
&lt;/code>&lt;/pre>
&lt;h2 id="重新创建-pv">重新创建 PV&lt;a class="td-heading-self-link" href="#%e9%87%8d%e6%96%b0%e5%88%9b%e5%bb%ba-pv" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>当我们看到 PVC 处于 Lost 状态的时候不用着急，这是由于之前已经绑定的 PV 已经没有了，但是 PVC 里面仍然有 PV 的绑定信息：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/pgwrrw/1616117616288-b11a48ca-e102-4df8-8a21-40e6e7fee3c4.jpeg" alt="">&lt;/p>
&lt;p>所以要解决这个问题也很简单，只需要重新把之前的 PV 创建出来即可：&lt;/p>
&lt;pre>&lt;code># 重新创建 PV
$ kubectl apply -f volume.yaml
persistentvolume/nfs-pv created
&lt;/code>&lt;/pre>
&lt;p>当 PV 创建成功后，PVC 和 PV 状态就都恢复成 Bound 状态了：&lt;/p>
&lt;pre>&lt;code>$ kubectl get pv nfs-pv
NAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM STORAGECLASS REASON AGE
nfs-pv 1Gi RWO Retain Bound default/nfs-pvc manual 93s
# PVC 恢复成了正常的 Bound 状态
$ kubectl get pvc nfs-pvc
NAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGE
nfs-pvc Bound nfs-pv 1Gi RWO manual 27m
&lt;/code>&lt;/pre>
&lt;p>注意：&lt;/p>
&lt;p>如果在重新创建 PV 时，更改了 PV 中的存储信息(比如挂载路径等)，虽然 PVC 与 PV 依然可以重新回复 bond 状态， 但是 pod 依然在使用老 PV 的存储。只有当 pod 删除重建后，才会使用新的存储信息。&lt;/p>
&lt;h1 id="删除-pvc">删除 PVC&lt;a class="td-heading-self-link" href="#%e5%88%a0%e9%99%a4-pvc" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>上面是先删除 PV 的情况，那么如果我们是先删除的 PVC 的话会是什么样的状况呢？&lt;/p>
&lt;pre>&lt;code>$ kubectl delete pvc nfs-pvc
persistentvolumeclaim &amp;quot;nfs-pvc&amp;quot; deleted
$ kubectl get pv nfs-pv
NAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM STORAGECLASS REASON AGE
nfs-pv 1Gi RWO Retain Released default/nfs-pvc manual 3m36s
&lt;/code>&lt;/pre>
&lt;p>我们可以看到 PVC 被删除后，PV 变成了 Released 的状态，但是我们仔细看后面的 CLAIM 属性，其中依然还保留着 PVC 的绑定信息，也可以将 PV 的对象信息通过下面的命令导出：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/pgwrrw/1616117616394-3a5c5f7c-d59c-4863-a816-e69c3a8e0dac.jpeg" alt="">&lt;/p>
&lt;p>这个时候大家可能就会想到现在我的 PVC 被删除了，PV 也变成了 Released 状态，那么我重建之前的 PVC 他们不就可以重新绑定了，事实并不会，PVC 只能和 Available 状态的 PV 进行绑定。&lt;/p>
&lt;p>这个时候我们就需要手工去进行干预了，真实生产环境下管理员会把数据备份或迁移出来，然后修改 PV，删除 claimRef 对 PVC 的引用，这个时候 Kubernetes 的 PV 控制器 watch 到 PV 变化后，就会将 PV 修改为 Available 状态，Available 状态的 PV 当然就可以被其他 PVC 绑定了。&lt;/p>
&lt;p>直接编辑 PV 删除 cliamRef 属性中的内容即可：&lt;/p>
&lt;pre>&lt;code># 删除 cliamRef 中的内容
$ kubectl edit pv nfs-pv
persistentvolume/nfs-pv edited
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/pgwrrw/1616117616197-9ff2f01c-83a8-4ca5-8975-87770aec1861.jpeg" alt="">&lt;/p>
&lt;p>删除完成后，这个时候 PV 就会变成正常的 Available 状态了，重新去重建之前的 PVC 当然就可以正常绑定了：&lt;/p>
&lt;pre>&lt;code>$ kubectl get pv nfs-pv
NAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM STORAGECLASS REASON AGE
nfs-pv 1Gi RWO Retain Available manual 12m
&lt;/code>&lt;/pre>
&lt;p>在较新版本的 Kubernetes 集群中对 PV 的各种功能也做了增强，比如克隆、快照等功能都是非常有用的，我们后续再来对这些新功能进行说明。&lt;/p></description></item></channel></rss>