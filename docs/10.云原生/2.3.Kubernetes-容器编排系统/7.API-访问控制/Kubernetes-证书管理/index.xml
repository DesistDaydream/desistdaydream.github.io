<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – Kubernetes 证书管理</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/7.API-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/Kubernetes-%E8%AF%81%E4%B9%A6%E7%AE%A1%E7%90%86/</link><description>Recent content in Kubernetes 证书管理 on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/7.API-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/Kubernetes-%E8%AF%81%E4%B9%A6%E7%AE%A1%E7%90%86/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Kubernetes 证书管理</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/7.API-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/Kubernetes-%E8%AF%81%E4%B9%A6%E7%AE%A1%E7%90%86/Kubernetes-%E8%AF%81%E4%B9%A6%E7%AE%A1%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/7.API-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/Kubernetes-%E8%AF%81%E4%B9%A6%E7%AE%A1%E7%90%86/Kubernetes-%E8%AF%81%E4%B9%A6%E7%AE%A1%E7%90%86/</guid><description>
&lt;h1 id="pki-证书和要求">PKI 证书和要求&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kubernetes.io/docs/setup/best-practices/certificates/">官方文档,入门-最佳实践-PKI 证书和要求&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Kubernetes 需要 PKI 证书才能进行基于 TLS 的身份验证。如果你是使用 &lt;a href="https://kubernetes.io/zh/docs/reference/setup-tools/kubeadm/">kubeadm&lt;/a> 安装的 Kubernetes， 则会自动生成集群所需的证书。你还可以生成自己的证书。 例如，不将私钥存储在 API 服务器上，可以让私钥更加安全。此页面说明了集群必需的证书。&lt;/p>
&lt;h2 id="集群是如何使用证书的">集群是如何使用证书的&lt;/h2>
&lt;p>Kubernetes 需要 PKI 才能执行以下操作：&lt;/p>
&lt;ul>
&lt;li>Kubelet 的客户端证书，用于 API 服务器身份验证&lt;/li>
&lt;li>API 服务器端点的证书&lt;/li>
&lt;li>集群管理员的客户端证书，用于 API 服务器身份认证&lt;/li>
&lt;li>API 服务器的客户端证书，用于和 Kubelet 的会话&lt;/li>
&lt;li>API 服务器的客户端证书，用于和 etcd 的会话&lt;/li>
&lt;li>控制器管理器的客户端证书/kubeconfig，用于和 API 服务器的会话&lt;/li>
&lt;li>调度器的客户端证书/kubeconfig，用于和 API 服务器的会话&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/zh/docs/tasks/extend-kubernetes/configure-aggregation-layer/">前端代理&lt;/a> 的客户端及服务端证书&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;strong>说明：&lt;/strong> 只有当你运行 kube-proxy 并要支持 &lt;a href="https://kubernetes.io/zh/docs/tasks/extend-kubernetes/setup-extension-api-server/">扩展 API 服务器&lt;/a> 时，才需要 &lt;code>front-proxy&lt;/code> 证书&lt;/p>
&lt;/blockquote>
&lt;p>etcd 还实现了双向 TLS 来对客户端和对其他对等节点进行身份验证。&lt;/p>
&lt;h2 id="证书存放的位置">证书存放的位置&lt;/h2>
&lt;p>如果你是通过 kubeadm 安装的 Kubernetes，所有证书都存放在 &lt;code>/etc/kubernetes/pki&lt;/code> 目录下。本文所有相关的路径都是基于该路径的相对路径。&lt;/p>
&lt;h2 id="手动配置证书">手动配置证书&lt;/h2>
&lt;p>如果你不想通过 kubeadm 生成这些必需的证书，你可以通过下面两种方式之一来手动创建他们。&lt;/p>
&lt;h3 id="单根-ca">单根 CA&lt;/h3>
&lt;p>你可以创建一个单根 CA，由管理员控制器它。该根 CA 可以创建多个中间 CA，并将所有进一步的创建委托给 Kubernetes。
需要这些 CA：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>路径&lt;/th>
&lt;th>默认 CN&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>ca.crt,key&lt;/td>
&lt;td>kubernetes-ca&lt;/td>
&lt;td>Kubernetes 通用 CA&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>etcd/ca.crt,key&lt;/td>
&lt;td>etcd-ca&lt;/td>
&lt;td>与 etcd 相关的所有功能&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>front-proxy-ca.crt,key&lt;/td>
&lt;td>kubernetes-front-proxy-ca&lt;/td>
&lt;td>用于 &lt;a href="https://kubernetes.io/zh/docs/tasks/extend-kubernetes/configure-aggregation-layer/">前端代理&lt;/a>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>上面的 CA 之外，还需要获取用于服务账户管理的密钥对，也就是 &lt;code>sa.key&lt;/code> 和 &lt;code>sa.pub&lt;/code>。&lt;/p>
&lt;h3 id="所有的证书">所有的证书&lt;/h3>
&lt;p>如果你不想将 CA 的私钥拷贝至你的集群中，你也可以自己生成全部的证书。
需要这些证书：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>默认 CN&lt;/th>
&lt;th>父级 CA&lt;/th>
&lt;th>O (位于 Subject 中)&lt;/th>
&lt;th>类型&lt;/th>
&lt;th>主机 (SAN)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>kube-etcd&lt;/td>
&lt;td>etcd-ca&lt;/td>
&lt;td>&lt;/td>
&lt;td>server, client&lt;/td>
&lt;td>&lt;code>localhost&lt;/code>, &lt;code>127.0.0.1&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>kube-etcd-peer&lt;/td>
&lt;td>etcd-ca&lt;/td>
&lt;td>&lt;/td>
&lt;td>server, client&lt;/td>
&lt;td>&lt;code>&amp;lt;hostname&amp;gt;&lt;/code>, &lt;code>&amp;lt;Host_IP&amp;gt;&lt;/code>, &lt;code>localhost&lt;/code>, &lt;code>127.0.0.1&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>kube-etcd-healthcheck-client&lt;/td>
&lt;td>etcd-ca&lt;/td>
&lt;td>&lt;/td>
&lt;td>client&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>kube-apiserver-etcd-client&lt;/td>
&lt;td>etcd-ca&lt;/td>
&lt;td>system:masters&lt;/td>
&lt;td>client&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>kube-apiserver&lt;/td>
&lt;td>kubernetes-ca&lt;/td>
&lt;td>&lt;/td>
&lt;td>server&lt;/td>
&lt;td>&lt;code>&amp;lt;hostname&amp;gt;&lt;/code>, &lt;code>&amp;lt;Host_IP&amp;gt;&lt;/code>, &lt;code>&amp;lt;advertise_IP&amp;gt;&lt;/code>, &lt;code>[1]&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>kube-apiserver-kubelet-client&lt;/td>
&lt;td>kubernetes-ca&lt;/td>
&lt;td>system:masters&lt;/td>
&lt;td>client&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>front-proxy-client&lt;/td>
&lt;td>kubernetes-front-proxy-ca&lt;/td>
&lt;td>&lt;/td>
&lt;td>client&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>[1]: 用来连接到集群的不同 IP 或 DNS 名 （就像 &lt;a href="https://kubernetes.io/zh/docs/reference/setup-tools/kubeadm/">kubeadm&lt;/a> 为负载均衡所使用的固定 IP 或 DNS 名，&lt;code>kubernetes&lt;/code>、&lt;code>kubernetes.default&lt;/code>、&lt;code>kubernetes.default.svc&lt;/code>、 &lt;code>kubernetes.default.svc.cluster&lt;/code>、&lt;code>kubernetes.default.svc.cluster.local&lt;/code>）。
其中，&lt;code>kind&lt;/code> 对应一种或多种类型的 &lt;a href="https://godoc.org/k8s.io/api/certificates/v1beta1#KeyUsage">x509 密钥用途&lt;/a>：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>kind&lt;/th>
&lt;th>密钥用途&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>server&lt;/td>
&lt;td>数字签名、密钥加密、服务端认证&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>client&lt;/td>
&lt;td>数字签名、密钥加密、客户端认证&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;blockquote>
&lt;p>&lt;strong>说明：&lt;/strong>
上面列出的 Hosts/SAN 是推荐的配置方式；如果需要特殊安装，则可以在所有服务器证书上添加其他 SAN。
&lt;strong>说明：&lt;/strong>
对于 kubeadm 用户：&lt;/p>
&lt;ul>
&lt;li>不使用私钥，将证书复制到集群 CA 的方案，在 kubeadm 文档中将这种方案称为外部 CA。&lt;/li>
&lt;li>如果将以上列表与 kubeadm 生成的 PKI 进行比较，你会注意到，如果使用外部 etcd，则不会生成 &lt;code>kube-etcd&lt;/code>、&lt;code>kube-etcd-peer&lt;/code> 和 &lt;code>kube-etcd-healthcheck-client&lt;/code> 证书。&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h3 id="证书路径">证书路径&lt;/h3>
&lt;p>证书应放置在建议的路径中（以便 &lt;a href="https://kubernetes.io/zh/docs/reference/setup-tools/kubeadm/">kubeadm&lt;/a>使用）。无论使用什么位置，都应使用给定的参数指定路径。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>默认 CN&lt;/th>
&lt;th>建议的密钥路径&lt;/th>
&lt;th>建议的证书路径&lt;/th>
&lt;th>命令&lt;/th>
&lt;th>密钥参数&lt;/th>
&lt;th>证书参数&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>etcd-ca&lt;/td>
&lt;td>etcd/ca.key&lt;/td>
&lt;td>etcd/ca.crt&lt;/td>
&lt;td>kube-apiserver&lt;/td>
&lt;td>&lt;/td>
&lt;td>&amp;ndash;etcd-cafile&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>kube-apiserver-etcd-client&lt;/td>
&lt;td>apiserver-etcd-client.key&lt;/td>
&lt;td>apiserver-etcd-client.crt&lt;/td>
&lt;td>kube-apiserver&lt;/td>
&lt;td>&amp;ndash;etcd-keyfile&lt;/td>
&lt;td>&amp;ndash;etcd-certfile&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>kubernetes-ca&lt;/td>
&lt;td>ca.key&lt;/td>
&lt;td>ca.crt&lt;/td>
&lt;td>kube-apiserver&lt;/td>
&lt;td>&lt;/td>
&lt;td>&amp;ndash;client-ca-file&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>kubernetes-ca&lt;/td>
&lt;td>ca.key&lt;/td>
&lt;td>ca.crt&lt;/td>
&lt;td>kube-controller-manager&lt;/td>
&lt;td>&amp;ndash;cluster-signing-key-file&lt;/td>
&lt;td>&amp;ndash;client-ca-file, &amp;ndash;root-ca-file, &amp;ndash;cluster-signing-cert-file&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>kube-apiserver&lt;/td>
&lt;td>apiserver.key&lt;/td>
&lt;td>apiserver.crt&lt;/td>
&lt;td>kube-apiserver&lt;/td>
&lt;td>&amp;ndash;tls-private-key-file&lt;/td>
&lt;td>&amp;ndash;tls-cert-file&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>kube-apiserver-kubelet-client&lt;/td>
&lt;td>apiserver-kubelet-client.key&lt;/td>
&lt;td>apiserver-kubelet-client.crt&lt;/td>
&lt;td>kube-apiserver&lt;/td>
&lt;td>&amp;ndash;kubelet-client-key&lt;/td>
&lt;td>&amp;ndash;kubelet-client-certificate&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>front-proxy-ca&lt;/td>
&lt;td>front-proxy-ca.key&lt;/td>
&lt;td>front-proxy-ca.crt&lt;/td>
&lt;td>kube-apiserver&lt;/td>
&lt;td>&lt;/td>
&lt;td>&amp;ndash;requestheader-client-ca-file&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>front-proxy-ca&lt;/td>
&lt;td>front-proxy-ca.key&lt;/td>
&lt;td>front-proxy-ca.crt&lt;/td>
&lt;td>kube-controller-manager&lt;/td>
&lt;td>&lt;/td>
&lt;td>&amp;ndash;requestheader-client-ca-file&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>front-proxy-client&lt;/td>
&lt;td>front-proxy-client.key&lt;/td>
&lt;td>front-proxy-client.crt&lt;/td>
&lt;td>kube-apiserver&lt;/td>
&lt;td>&amp;ndash;proxy-client-key-file&lt;/td>
&lt;td>&amp;ndash;proxy-client-cert-file&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>etcd-ca&lt;/td>
&lt;td>etcd/ca.key&lt;/td>
&lt;td>etcd/ca.crt&lt;/td>
&lt;td>etcd&lt;/td>
&lt;td>&lt;/td>
&lt;td>&amp;ndash;trusted-ca-file, &amp;ndash;peer-trusted-ca-file&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>kube-etcd&lt;/td>
&lt;td>etcd/server.key&lt;/td>
&lt;td>etcd/server.crt&lt;/td>
&lt;td>etcd&lt;/td>
&lt;td>&amp;ndash;key-file&lt;/td>
&lt;td>&amp;ndash;cert-file&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>kube-etcd-peer&lt;/td>
&lt;td>etcd/peer.key&lt;/td>
&lt;td>etcd/peer.crt&lt;/td>
&lt;td>etcd&lt;/td>
&lt;td>&amp;ndash;peer-key-file&lt;/td>
&lt;td>&amp;ndash;peer-cert-file&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>etcd-ca&lt;/td>
&lt;td>&lt;/td>
&lt;td>etcd/ca.crt&lt;/td>
&lt;td>etcdctl&lt;/td>
&lt;td>&lt;/td>
&lt;td>&amp;ndash;cacert&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>kube-etcd-healthcheck-client&lt;/td>
&lt;td>etcd/healthcheck-client.key&lt;/td>
&lt;td>etcd/healthcheck-client.crt&lt;/td>
&lt;td>etcdctl&lt;/td>
&lt;td>&amp;ndash;key&lt;/td>
&lt;td>&amp;ndash;cert&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>注意事项同样适用于服务帐户密钥对：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>私钥路径&lt;/th>
&lt;th>公钥路径&lt;/th>
&lt;th>命令&lt;/th>
&lt;th>参数&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>sa.key&lt;/td>
&lt;td>&lt;/td>
&lt;td>kube-controller-manager&lt;/td>
&lt;td>&amp;ndash;service-account-private-key-file&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>sa.pub&lt;/td>
&lt;td>kube-apiserver&lt;/td>
&lt;td>&amp;ndash;service-account-key-file&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="为用户帐户配置证书">为用户帐户配置证书&lt;/h2>
&lt;p>你必须手动配置以下管理员帐户和服务帐户：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>文件名&lt;/th>
&lt;th>凭据名称&lt;/th>
&lt;th>默认 CN&lt;/th>
&lt;th>O (位于 Subject 中)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>admin.conf&lt;/td>
&lt;td>default-admin&lt;/td>
&lt;td>kubernetes-admin&lt;/td>
&lt;td>system:masters&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>kubelet.conf&lt;/td>
&lt;td>default-auth&lt;/td>
&lt;td>system:node:&lt;code>&amp;lt;nodeName&amp;gt;&lt;/code> （参阅注释）&lt;/td>
&lt;td>system:nodes&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>controller-manager.conf&lt;/td>
&lt;td>default-controller-manager&lt;/td>
&lt;td>system:kube-controller-manager&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>scheduler.conf&lt;/td>
&lt;td>default-scheduler&lt;/td>
&lt;td>system:kube-scheduler&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;blockquote>
&lt;p>&lt;strong>说明：&lt;/strong> &lt;code>kubelet.conf&lt;/code> 中 &lt;code>&amp;lt;nodeName&amp;gt;&lt;/code> 的值 &lt;strong>必须&lt;/strong> 与 kubelet 向 apiserver 注册时提供的节点名称的值完全匹配。 有关更多详细信息，请阅读&lt;a href="https://kubernetes.io/zh/docs/reference/access-authn-authz/node/">节点授权&lt;/a>。&lt;/p>
&lt;/blockquote>
&lt;ol>
&lt;li>对于每个配置，请都使用给定的 CN 和 O 生成 x509 证书/密钥偶对。&lt;/li>
&lt;li>为每个配置运行下面的 &lt;code>kubectl&lt;/code> 命令：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>KUBECONFIG&lt;span style="color:#f92672">=&lt;/span>&amp;lt;filename&amp;gt; kubectl config set-cluster default-cluster --server&lt;span style="color:#f92672">=&lt;/span>https://&amp;lt;host ip&amp;gt;:6443 --certificate-authority &amp;lt;path-to-kubernetes-ca&amp;gt; --embed-certs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>KUBECONFIG&lt;span style="color:#f92672">=&lt;/span>&amp;lt;filename&amp;gt; kubectl config set-credentials &amp;lt;credential-name&amp;gt; --client-key &amp;lt;path-to-key&amp;gt;.pem --client-certificate &amp;lt;path-to-cert&amp;gt;.pem --embed-certs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>KUBECONFIG&lt;span style="color:#f92672">=&lt;/span>&amp;lt;filename&amp;gt; kubectl config set-context default-system --cluster default-cluster --user &amp;lt;credential-name&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>KUBECONFIG&lt;span style="color:#f92672">=&lt;/span>&amp;lt;filename&amp;gt; kubectl config use-context default-system
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这些文件用途如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>文件名&lt;/th>
&lt;th>命令&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>admin.conf&lt;/td>
&lt;td>kubectl&lt;/td>
&lt;td>配置集群的管理员&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>kubelet.conf&lt;/td>
&lt;td>kubelet&lt;/td>
&lt;td>集群中的每个节点都需要一份&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>controller-manager.conf&lt;/td>
&lt;td>kube-controller-manager&lt;/td>
&lt;td>必需添加到 &lt;code>manifests/kube-controller-manager.yaml&lt;/code> 清单中&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>scheduler.conf&lt;/td>
&lt;td>kube-scheduler&lt;/td>
&lt;td>必需添加到 &lt;code>manifests/kube-scheduler.yaml&lt;/code> 清单中&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="certificate证书--使用证书对集群中的客户端与服务端进行认证">Certificate(证书) # 使用证书对集群中的客户端与服务端进行认证&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>官方文档：&lt;a href="https://kubernetes.io/docs/setup/best-practices/certificates/">https://kubernetes.io/docs/setup/best-practices/certificates/&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>etcd 与 etcd 之间，etcd 与 apiserver，apiserver 与 kubelet、scheduler、controller-manager、kube-proxy 等之间的认证，还有 calico 与 apiserver 等等各种组件与组件之间基本都需要认证，认证可以通过多种方式进行，比如证书、token、key/val 对，账号密码等等等&lt;/p>
&lt;p>Cluster 中各组件互相通信所用到的 Certificate&lt;/p>
&lt;ul>
&lt;li>ETCD 的证书，这是集群中的其中一套证书：api-server 作为客户端与服务端 etcd 通信，etcd 集群之间互相对等通信
&lt;ul>
&lt;li>&lt;strong>ca.crt&lt;/strong>(证书 CN：etcd-ca) # 给 apiserver 发客户端证书，给 etcd 发服务端证书以及对等证书&lt;/li>
&lt;li>&lt;strong>peer.crt&lt;/strong>(证书 CN：HostName) # etcd 集群各节点属于对等节点，使用 peer 类型证书(一般分为 server 证书和 client 证书，但是 etcd 集群之间不存在服务端和客户端的区别)&lt;/li>
&lt;li>&lt;strong>apiserver-etcd-client.crt&lt;/strong>(证书 CN：kube-apiserver-etcd-client) # 与 server.crt 证书对应。apiserver 作为 etcd 的客户端所用的证书&lt;/li>
&lt;li>&lt;strong>server.crt&lt;/strong>(证书 CN：HostName) # 与 apiserver-etcd-client.crt 证书对应。etcd 作为 apiserver 的服务端所用的证书&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>集群组件间的证书：kube-apiserver 作为服务端与 kubectl，controller-manager，scheduler，kubelet，kube-proxy 通信
&lt;ul>
&lt;li>&lt;strong>ca.crt&lt;/strong>(证书 CN：kubernetes) # 给 apiserver 发服务端证书，给其余组件发客户端证书&lt;/li>
&lt;li>&lt;strong>apiserver.crt&lt;/strong>(证书 CN：kube-apiserver)&lt;/li>
&lt;li>&lt;strong>admin.conf&lt;/strong> # 一个在与集群通信时具有最高权限的 user 的认证配置&lt;/li>
&lt;li>&lt;strong>controller-manager.conf&lt;/strong> # KubeConfig 文件，controller-manager 与 apiserver 通信时的认证配置信息&lt;/li>
&lt;li>&lt;strong>scheduler.conf&lt;/strong> # KubeConfig 文件，scheduler 与 apiserver 通信时的认证配置信息&lt;/li>
&lt;li>&lt;strong>kubelet.conf&lt;/strong> # KubeConfig 文件，kubelet 与 apiserver 通信时的认证配置信息
&lt;ul>
&lt;li>kube-apiserver 作为客户端与 kubelet-api 通信，每个节点启动的时候 kubelet-api 的证书会自动从 kubernets 的 ca 证书那里获取自己的 ca 证书&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>apiserver-kubelet-client.crt&lt;/strong>(证书 CN：kube-apiserver-kubelet-client) #&lt;/li>
&lt;li>&lt;strong>kubelet.crt&lt;/strong>(证书 CN：master0@1544020244) #&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>前端代理证书：给用户自定义的 apiserver 使用的证书，kube-aggregator 作为服务端与 extension-apiserver 通信
&lt;ul>
&lt;li>&lt;strong>ca.crt(front-proxy)&lt;/strong> # 给自定义的 apiserver 发证书&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>其他证书
&lt;ul>
&lt;li>&lt;strong>sa.key 与 sa.pub&lt;/strong> # 用于为集群中所有 ServiceAccount 资源签署 jwt token&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: 手动管理 Kubernetes 证书</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/7.API-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/Kubernetes-%E8%AF%81%E4%B9%A6%E7%AE%A1%E7%90%86/%E6%89%8B%E5%8A%A8%E7%AE%A1%E7%90%86-Kubernetes-%E8%AF%81%E4%B9%A6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/7.API-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/Kubernetes-%E8%AF%81%E4%B9%A6%E7%AE%A1%E7%90%86/%E6%89%8B%E5%8A%A8%E7%AE%A1%E7%90%86-Kubernetes-%E8%AF%81%E4%B9%A6/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kubernetes.io/docs/tasks/administer-cluster/certificates/">官方文档,任务-管理集群-证书&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>在使用客户端证书认证的场景下，你可以通过 &lt;code>easyrsa&lt;/code>、&lt;code>openssl&lt;/code> 或 &lt;code>cfssl&lt;/code> 等工具以手工方式生成证书。&lt;/p>
&lt;h3 id="easyrsa">easyrsa&lt;/h3>
&lt;p>&lt;strong>easyrsa&lt;/strong> 支持以手工方式为你的集群生成证书。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>下载、解压、初始化打过补丁的 easyrsa3。&lt;/p>
&lt;p>curl -LO &lt;a href="https://storage.googleapis.com/kubernetes-release/easy-rsa/easy-rsa.tar.gz">https://storage.googleapis.com/kubernetes-release/easy-rsa/easy-rsa.tar.gz&lt;/a>
tar xzf easy-rsa.tar.gz
cd easy-rsa-master/easyrsa3
./easyrsa init-pki&lt;/p>
&lt;/li>
&lt;li>
&lt;p>生成新的证书颁发机构（CA）。参数 &lt;code>--batch&lt;/code> 用于设置自动模式； 参数 &lt;code>--req-cn&lt;/code> 用于设置新的根证书的通用名称（CN）。&lt;/p>
&lt;p>./easyrsa &amp;ndash;batch &amp;ldquo;&amp;ndash;req-cn=${MASTER_IP}@&lt;code>date +%s&lt;/code>&amp;rdquo; build-ca nopass&lt;/p>
&lt;/li>
&lt;li>
&lt;p>生成服务器证书和秘钥。 参数 &lt;code>--subject-alt-name&lt;/code> 设置 API 服务器的 IP 和 DNS 名称。 &lt;code>MASTER_CLUSTER_IP&lt;/code> 用于 API 服务器和控制管理器，通常取 CIDR 的第一个 IP，由 &lt;code>--service-cluster-ip-range&lt;/code> 的参数提供。 参数 &lt;code>--days&lt;/code> 用于设置证书的过期时间。 下面的示例假定你的默认 DNS 域名为 &lt;code>cluster.local&lt;/code>。&lt;/p>
&lt;p>./easyrsa &amp;ndash;subject-alt-name=&amp;ldquo;IP:${MASTER_IP},&amp;rdquo;&lt;br>
&amp;ldquo;IP:${MASTER_CLUSTER_IP},&amp;rdquo;&lt;br>
&amp;ldquo;DNS:kubernetes,&amp;rdquo;&lt;br>
&amp;ldquo;DNS:kubernetes.default,&amp;rdquo;&lt;br>
&amp;ldquo;DNS:kubernetes.default.svc,&amp;rdquo;&lt;br>
&amp;ldquo;DNS:kubernetes.default.svc.cluster,&amp;rdquo;&lt;br>
&amp;ldquo;DNS:kubernetes.default.svc.cluster.local&amp;rdquo; &lt;br>
&amp;ndash;days=10000 &lt;br>
build-server-full server nopass&lt;/p>
&lt;/li>
&lt;li>
&lt;p>拷贝文件 &lt;code>pki/ca.crt&lt;/code>、&lt;code>pki/issued/server.crt&lt;/code> 和 &lt;code>pki/private/server.key&lt;/code> 到你的目录中。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在 API 服务器的启动参数中添加以下参数：&lt;/p>
&lt;p>&amp;ndash;client-ca-file=/yourdirectory/ca.crt
&amp;ndash;tls-cert-file=/yourdirectory/server.crt
&amp;ndash;tls-private-key-file=/yourdirectory/server.key&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="openssl">openssl&lt;/h3>
&lt;p>&lt;strong>openssl&lt;/strong> 支持以手工方式为你的集群生成证书。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>生成一个 2048 位的 ca.key 文件&lt;/p>
&lt;p>openssl genrsa -out ca.key 2048&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在 ca.key 文件的基础上，生成 ca.crt 文件（用参数 -days 设置证书有效期）&lt;/p>
&lt;p>openssl req -x509 -new -nodes -key ca.key -subj &amp;ldquo;/CN=${MASTER_IP}&amp;rdquo; -days 10000 -out ca.crt&lt;/p>
&lt;/li>
&lt;li>
&lt;p>生成一个 2048 位的 server.key 文件：&lt;/p>
&lt;p>openssl genrsa -out server.key 2048&lt;/p>
&lt;/li>
&lt;li>
&lt;p>创建一个用于生成证书签名请求（CSR）的配置文件。 保存文件（例如：&lt;code>csr.conf&lt;/code>）前，记得用真实值替换掉尖括号中的值（例如：&lt;code>&amp;lt;MASTER_IP&amp;gt;&lt;/code>）。 注意：&lt;code>MASTER_CLUSTER_IP&lt;/code> 就像前一小节所述，它的值是 API 服务器的服务集群 IP。 下面的例子假定你的默认 DNS 域名为 &lt;code>cluster.local&lt;/code>。&lt;/p>
&lt;p>[ req ]
default_bits = 2048
prompt = no
default_md = sha256
req_extensions = req_ext
distinguished_name = dn
[ dn ]
C = &lt;!-- raw HTML omitted -->
ST = &lt;!-- raw HTML omitted -->
L = &lt;!-- raw HTML omitted -->
O = &lt;!-- raw HTML omitted -->
OU = &lt;!-- raw HTML omitted -->
CN = &amp;lt;MASTER_IP&amp;gt;
[ req_ext ]
subjectAltName = @alt_names
[ alt_names ]
DNS.1 = kubernetes
DNS.2 = kubernetes.default
DNS.3 = kubernetes.default.svc
DNS.4 = kubernetes.default.svc.cluster
DNS.5 = kubernetes.default.svc.cluster.local
IP.1 = &amp;lt;MASTER_IP&amp;gt;
IP.2 = &amp;lt;MASTER_CLUSTER_IP&amp;gt;
[ v3_ext ]
authorityKeyIdentifier=keyid,issuer:always
basicConstraints=CA:FALSE
keyUsage=keyEncipherment,dataEncipherment
extendedKeyUsage=serverAuth,clientAuth
subjectAltName=@alt_names&lt;/p>
&lt;/li>
&lt;li>
&lt;p>基于上面的配置文件生成证书签名请求：&lt;/p>
&lt;p>openssl req -new -key server.key -out server.csr -config csr.conf&lt;/p>
&lt;/li>
&lt;li>
&lt;p>基于 ca.key、ca.key 和 server.csr 等三个文件生成服务端证书：&lt;/p>
&lt;p>openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key &lt;br>
-CAcreateserial -out server.crt -days 10000 &lt;br>
-extensions v3_ext -extfile csr.conf&lt;/p>
&lt;/li>
&lt;li>
&lt;p>查看证书：&lt;/p>
&lt;p>openssl x509 -noout -text -in ./server.crt&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>最后，为 API 服务器添加相同的启动参数。&lt;/p>
&lt;h3 id="cfssl">cfssl&lt;/h3>
&lt;p>&lt;strong>cfssl&lt;/strong> 是另一个用于生成证书的工具。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>下载、解压并准备如下所示的命令行工具。 注意：你可能需要根据所用的硬件体系架构和 cfssl 版本调整示例命令。&lt;/p>
&lt;p>curl -L &lt;a href="https://github.com/cloudflare/cfssl/releases/download/v1.5.0/cfssl_1.5.0_linux_amd64">https://github.com/cloudflare/cfssl/releases/download/v1.5.0/cfssl_1.5.0_linux_amd64&lt;/a> -o cfssl
chmod +x cfssl
curl -L &lt;a href="https://github.com/cloudflare/cfssl/releases/download/v1.5.0/cfssljson_1.5.0_linux_amd64">https://github.com/cloudflare/cfssl/releases/download/v1.5.0/cfssljson_1.5.0_linux_amd64&lt;/a> -o cfssljson
chmod +x cfssljson
curl -L &lt;a href="https://github.com/cloudflare/cfssl/releases/download/v1.5.0/cfssl-certinfo_1.5.0_linux_amd64">https://github.com/cloudflare/cfssl/releases/download/v1.5.0/cfssl-certinfo_1.5.0_linux_amd64&lt;/a> -o cfssl-certinfo
chmod +x cfssl-certinfo&lt;/p>
&lt;/li>
&lt;li>
&lt;p>创建一个目录，用它保存所生成的构件和初始化 cfssl：&lt;/p>
&lt;p>mkdir cert
cd cert
../cfssl print-defaults config &amp;gt; config.json
../cfssl print-defaults csr &amp;gt; csr.json&lt;/p>
&lt;/li>
&lt;li>
&lt;p>创建一个 JSON 配置文件来生成 CA 文件，例如：&lt;code>ca-config.json&lt;/code>：&lt;/p>
&lt;p>{
&amp;ldquo;signing&amp;rdquo;: {
&amp;ldquo;default&amp;rdquo;: {
&amp;ldquo;expiry&amp;rdquo;: &amp;ldquo;8760h&amp;rdquo;
},
&amp;ldquo;profiles&amp;rdquo;: {
&amp;ldquo;kubernetes&amp;rdquo;: {
&amp;ldquo;usages&amp;rdquo;: [
&amp;ldquo;signing&amp;rdquo;,
&amp;ldquo;key encipherment&amp;rdquo;,
&amp;ldquo;server auth&amp;rdquo;,
&amp;ldquo;client auth&amp;rdquo;
],
&amp;ldquo;expiry&amp;rdquo;: &amp;ldquo;8760h&amp;rdquo;
}
}
}
}&lt;/p>
&lt;/li>
&lt;li>
&lt;p>创建一个 JSON 配置文件，用于 CA 证书签名请求（CSR），例如：&lt;code>ca-csr.json&lt;/code>。 确认用你需要的值替换掉尖括号中的值。&lt;/p>
&lt;p>{
&amp;ldquo;CN&amp;rdquo;: &amp;ldquo;kubernetes&amp;rdquo;,
&amp;ldquo;key&amp;rdquo;: {
&amp;ldquo;algo&amp;rdquo;: &amp;ldquo;rsa&amp;rdquo;,
&amp;ldquo;size&amp;rdquo;: 2048
},
&amp;ldquo;names&amp;rdquo;:[{
&amp;ldquo;C&amp;rdquo;: &amp;ldquo;&lt;!-- raw HTML omitted -->&amp;rdquo;,
&amp;ldquo;ST&amp;rdquo;: &amp;ldquo;&lt;!-- raw HTML omitted -->&amp;rdquo;,
&amp;ldquo;L&amp;rdquo;: &amp;ldquo;&lt;!-- raw HTML omitted -->&amp;rdquo;,
&amp;ldquo;O&amp;rdquo;: &amp;ldquo;&lt;!-- raw HTML omitted -->&amp;rdquo;,
&amp;ldquo;OU&amp;rdquo;: &amp;ldquo;&lt;!-- raw HTML omitted -->&amp;rdquo;
}]
}&lt;/p>
&lt;/li>
&lt;li>
&lt;p>生成 CA 秘钥文件（&lt;code>ca-key.pem&lt;/code>）和证书文件（&lt;code>ca.pem&lt;/code>）：&lt;/p>
&lt;p>../cfssl gencert -initca ca-csr.json | ../cfssljson -bare ca&lt;/p>
&lt;/li>
&lt;li>
&lt;p>创建一个 JSON 配置文件，用来为 API 服务器生成秘钥和证书，例如：&lt;code>server-csr.json&lt;/code>。 确认用你需要的值替换掉尖括号中的值。&lt;code>MASTER_CLUSTER_IP&lt;/code> 是为 API 服务器 指定的服务集群 IP，就像前面小节描述的那样。 以下示例假定你的默认 DSN 域名为&lt;code>cluster.local&lt;/code>。&lt;/p>
&lt;p>{
&amp;ldquo;CN&amp;rdquo;: &amp;ldquo;kubernetes&amp;rdquo;,
&amp;ldquo;hosts&amp;rdquo;: [
&amp;ldquo;127.0.0.1&amp;rdquo;,
&amp;ldquo;&amp;lt;MASTER_IP&amp;gt;&amp;rdquo;,
&amp;ldquo;&amp;lt;MASTER_CLUSTER_IP&amp;gt;&amp;rdquo;,
&amp;ldquo;kubernetes&amp;rdquo;,
&amp;ldquo;kubernetes.default&amp;rdquo;,
&amp;ldquo;kubernetes.default.svc&amp;rdquo;,
&amp;ldquo;kubernetes.default.svc.cluster&amp;rdquo;,
&amp;ldquo;kubernetes.default.svc.cluster.local&amp;rdquo;
],
&amp;ldquo;key&amp;rdquo;: {
&amp;ldquo;algo&amp;rdquo;: &amp;ldquo;rsa&amp;rdquo;,
&amp;ldquo;size&amp;rdquo;: 2048
},
&amp;ldquo;names&amp;rdquo;: [{
&amp;ldquo;C&amp;rdquo;: &amp;ldquo;&lt;!-- raw HTML omitted -->&amp;rdquo;,
&amp;ldquo;ST&amp;rdquo;: &amp;ldquo;&lt;!-- raw HTML omitted -->&amp;rdquo;,
&amp;ldquo;L&amp;rdquo;: &amp;ldquo;&lt;!-- raw HTML omitted -->&amp;rdquo;,
&amp;ldquo;O&amp;rdquo;: &amp;ldquo;&lt;!-- raw HTML omitted -->&amp;rdquo;,
&amp;ldquo;OU&amp;rdquo;: &amp;ldquo;&lt;!-- raw HTML omitted -->&amp;rdquo;
}]
}&lt;/p>
&lt;/li>
&lt;li>
&lt;p>为 API 服务器生成秘钥和证书，默认会分别存储为&lt;code>server-key.pem&lt;/code> 和 &lt;code>server.pem&lt;/code> 两个文件。&lt;/p>
&lt;p>../cfssl gencert -ca=ca.pem -ca-key=ca-key.pem &lt;br>
&amp;ndash;config=ca-config.json -profile=kubernetes &lt;br>
server-csr.json | ../cfssljson -bare server&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="分发自签名的-ca-证书">分发自签名的 CA 证书&lt;/h2>
&lt;p>客户端节点可能不认可自签名 CA 证书的有效性。 对于非生产环境，或者运行在公司防火墙后的环境，你可以分发自签名的 CA 证书到所有客户节点，并刷新本地列表以使证书生效。
在每一个客户节点，执行以下操作：&lt;/p>
&lt;pre>&lt;code>sudo cp ca.crt /usr/local/share/ca-certificates/kubernetes.crt
sudo update-ca-certificates
Updating certificates in /etc/ssl/certs...
1 added, 0 removed; done.
Running hooks in /etc/ca-certificates/update.d....
done.
&lt;/code>&lt;/pre>
&lt;h2 id="证书-api">证书 API&lt;/h2>
&lt;p>你可以通过 &lt;code>certificates.k8s.io&lt;/code> API 提供 x509 证书，用来做身份验证， 如&lt;a href="https://kubernetes.io/zh/docs/tasks/tls/managing-tls-in-a-cluster">本&lt;/a>文档所述。&lt;/p></description></item></channel></rss>