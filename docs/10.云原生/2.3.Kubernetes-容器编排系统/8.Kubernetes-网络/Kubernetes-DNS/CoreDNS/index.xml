<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – CoreDNS</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/8.Kubernetes-%E7%BD%91%E7%BB%9C/Kubernetes-DNS/CoreDNS/</link><description>Recent content in CoreDNS on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/8.Kubernetes-%E7%BD%91%E7%BB%9C/Kubernetes-DNS/CoreDNS/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: CoreDNS Plugins</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/8.Kubernetes-%E7%BD%91%E7%BB%9C/Kubernetes-DNS/CoreDNS/CoreDNS-Plugins/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/8.Kubernetes-%E7%BD%91%E7%BB%9C/Kubernetes-DNS/CoreDNS/CoreDNS-Plugins/</guid><description/></item><item><title>Docs: CoreDNS 配置详解</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/8.Kubernetes-%E7%BD%91%E7%BB%9C/Kubernetes-DNS/CoreDNS/CoreDNS-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/8.Kubernetes-%E7%BD%91%E7%BB%9C/Kubernetes-DNS/CoreDNS/CoreDNS-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://coredns.io/manual/toc/#configuration">官方配置文档&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>CoreDNS 的配置文件为 Corefile。
Corefile 源于 Caddy 框架的的配置文件 Caddyfile。Corefile 将会定义如下 CoreDNS 的行为：&lt;/p>
&lt;ul>
&lt;li>CoreDNS 的运行逻辑很像 Nginx，会抽象出 &lt;code>server&lt;/code> 的概念并运行。可以同时定义多个 Server 以实现不同功能，每个 Server 主要定义下面几种行为：
&lt;ul>
&lt;li>Server 以什么协议监听在哪个端口&lt;/li>
&lt;li>Server 负责哪个 zone 的权威 DNS 解析&lt;/li>
&lt;li>Server 将会加载哪些插件&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>一个典型的最基础的 Corefile 格式如下所示：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>ZONE&lt;span style="color:#f92672">[&lt;/span>:PORT&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[&lt;/span>PLUGIN&lt;span style="color:#f92672">]&lt;/span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;strong>ZONE&lt;/strong># 定义 Server 的 zone。&lt;code>默认值： .&lt;/code>&lt;/li>
&lt;li>&lt;strong>PORT&lt;/strong># 定义 Server 监听的端口。&lt;code>默认值：53&lt;/code>。即 -dns.port 标志的值。&lt;/li>
&lt;li>&lt;strong>PLUGIN&lt;/strong># 定义 Server 要加载的&lt;a href="https://coredns.io/plugins/">插件&lt;/a>。这是可选的，但是如果不加载任何插件，那么 coredns 将为所有查询返回 SERVFAIL 。
&lt;ul>
&lt;li>并且，不同的 Plugins 还可以定义不同的参数以改变其运行行为。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>比如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>. {}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上述配置文件表达的是：server 负责根域 &lt;code>.&lt;/code> 的解析，监听在 53 端口，并且不使用任何插件。&lt;/p>
&lt;h1 id="配置示例">配置示例&lt;/h1>
&lt;h2 id="定义-server">定义 server&lt;/h2>
&lt;p>一个最简单的配置文件可以为：&lt;/p>
&lt;pre>&lt;code>.{}
&lt;/code>&lt;/pre>
&lt;p>即 server 监听 53 端口并不使用插件。
如果此时在定义其他 server，要保证监听端口不冲突；如果是在原来 server 增加 zone，则要保证 zone 之间不冲突，如：&lt;/p>
&lt;pre>&lt;code>. {}
.:54 {}
&lt;/code>&lt;/pre>
&lt;p>另一个 server 运行于 54 端口并负责根域 &lt;code>.&lt;/code> 的解析。&lt;/p>
&lt;p>又如：&lt;/p>
&lt;pre>&lt;code>example.org {
whoami
}
org {
whoami
}
&lt;/code>&lt;/pre>
&lt;p>同一个 server 但是负责不同 zone 的解析，有不同插件链。&lt;/p>
&lt;h3 id="定义-reverse-zone">定义 Reverse Zone&lt;/h3>
&lt;p>跟其他 DNS 服务器类似，Corefile 也可以定义 &lt;code>Reverse Zone&lt;/code>（反向解析 IP 地址对应的域名）：&lt;/p>
&lt;pre>&lt;code>0.0.10.in-addr.arpa {
whoami
}
&lt;/code>&lt;/pre>
&lt;p>或者简化版本：&lt;/p>
&lt;pre>&lt;code>10.0.0.0/24 {
whoami
}
&lt;/code>&lt;/pre>
&lt;p>可以通过 &lt;code>dig&lt;/code> 进行反向查询：&lt;/p>
&lt;pre>&lt;code>$ dig -x 10.0.0.1
&lt;/code>&lt;/pre>
&lt;h3 id="使用不同的通信协议">使用不同的通信协议&lt;/h3>
&lt;p>CoreDNS 除了支持 DNS 协议，也支持 &lt;code>TLS&lt;/code> 和 &lt;code>gRPC&lt;/code>，即 DNS-over-TLS[3] 和 DNS-over-gRPC 模式：&lt;/p>
&lt;pre>&lt;code>tls://example.org:1443 {
#...
}
&lt;/code>&lt;/pre>
&lt;h3 id="添加其他的域名解析">添加其他的域名解析&lt;/h3>
&lt;pre>&lt;code>.:53 {
hosts {
123.138.66.130 xsky.xa.ehualu.it
123.138.66.130 prometheus.xa.ehualu.it
116.182.4.38 xsky.heb.ehualu.it
116.182.4.38 prometheus.heb.ehualu.it
fallthrough
}
}
&lt;/code>&lt;/pre>
&lt;h2 id="forwarding转发">Forwarding(转发)&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://coredns.io/manual/toc/#forwarding">https://coredns.io/manual/toc/#forwarding&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>Docs: 别看 DNS 污染闹得欢，现在我用 CoreDNS 将它拉清单</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/8.Kubernetes-%E7%BD%91%E7%BB%9C/Kubernetes-DNS/CoreDNS/%E5%88%AB%E7%9C%8B-DNS-%E6%B1%A1%E6%9F%93%E9%97%B9%E5%BE%97%E6%AC%A2%E7%8E%B0%E5%9C%A8%E6%88%91%E7%94%A8-CoreDNS-%E5%B0%86%E5%AE%83%E6%8B%89%E6%B8%85%E5%8D%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/8.Kubernetes-%E7%BD%91%E7%BB%9C/Kubernetes-DNS/CoreDNS/%E5%88%AB%E7%9C%8B-DNS-%E6%B1%A1%E6%9F%93%E9%97%B9%E5%BE%97%E6%AC%A2%E7%8E%B0%E5%9C%A8%E6%88%91%E7%94%A8-CoreDNS-%E5%B0%86%E5%AE%83%E6%8B%89%E6%B8%85%E5%8D%95/</guid><description>
&lt;h2 id="配置-coredns">配置 CoreDNS&lt;/h2>
&lt;p>既然 CoreDNS 如此优秀，我用它来抵御伟大的防火长城岂不美哉？研究了一圈，发现技术上还是可行的，唯一的一个缺点是不支持使用代理，不过你可以通过 proxychians-ng[5] 或 proxifier[6] 来强制使用代理。下面开始折腾。&lt;/p>
&lt;p>具体的思路其实非常简单，就是将国内的域名查询请求转发到 114 等国内的公共 DNS 服务器，将国外的域名查询请求转发到 8.8.8.8 等国外的公共 DNS 服务器。然而 CoreDNS 的插件链有点反直觉，同一个插件链上的每一个插件只能出现一次，如果只使用 &lt;code>forward&lt;/code> 插件是满足不了需求的。CoreDNS 原来还有个插件叫 &lt;code>proxy&lt;/code>，功能和 &lt;code>forward&lt;/code> 类似，目测好像同时利用 &lt;code>proxy&lt;/code> 和 &lt;code>forward&lt;/code> 插件就可以实现咱的需求了。但理想与现实的差距总是很大，不知道从什么时候开始，CoreDNS 官方编译的二进制文件已经没有 &lt;code>proxy&lt;/code> 插件了，真是气人。&lt;/p>
&lt;h3 id="dnsredir">dnsredir&lt;/h3>
&lt;p>偶然间发现了一个第三方插件 dnsredir[7]，目测可以解决我的所有问题。该插件综合了 &lt;code>proxy&lt;/code> 和 &lt;code>forward&lt;/code> 插件的所有优点，支持 UDP、TCP、DNS-over-TLS 和 DNS-over-HTTPS，也支持多个后端，还具备健康检查和故障转移的功能，真是太香了！&lt;/p>
&lt;p>它的语法是这样的：&lt;/p>
&lt;pre>&lt;code>dnsredir FROM... {
to TO...
}
&lt;/code>&lt;/pre>
&lt;p>1
2
3
Plain Text&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>FROM...&lt;/code> 是一个文件列表，包含了匹配的域名和解析该域名的服务器，说白了就是 dnsmasq 所使用的格式，直接看例子：&lt;/p>
&lt;p>server=/0-100.com/114.114.114.114
server=/0-100.com/114.114.114.114&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>1
2
Plain Text&lt;/p>
&lt;p>为什么要用这种格式呢？当然是为了方便啦。&lt;/p>
&lt;p>为什么这样会方便呢？当然是为了可以直接用上 FelixOnMars 的大陆区域名列表[8]了。。。FelixOnMars 同时还提供了 &lt;code>Google&lt;/code> 和 &lt;code>Apple&lt;/code> 的域名列表，这在某些地区某些 ISP 可以得到国内镜像的 IP，从而加速访问，想想就刺激。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>当然，除了使用文件列表外，还可以使用 &lt;code>.&lt;/code>，类似于上面所说的根域。&lt;strong>这个插件最大的亮点是可以在插件链中重复使用 dnsredir 插件&lt;/strong>，只要 &lt;code>FROM...&lt;/code> 不重复就行。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>to TO...&lt;/code> 用来将 DNS 解析请求发给上游 DNS 服务器。支持几乎所有 DNS 协议，例如：&lt;/p>
&lt;p>dns://1.1.1.1
8.8.8.8
tcp://9.9.9.9
udp://2606:4700:4700::1111
tls://1.1.1.1@one.one.one.one
tls://8.8.8.8
tls://dns.quad9.net
doh://cloudflare-dns.com/dns-query
json-doh://1.1.1.1/dns-query
json-doh://dns.google/resolve
ietf-doh://dns.quad9.net/dns-query&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>1
2
3
4
5
6
7
8
9
10
11
12
13
Plain Text&lt;/p>
&lt;h3 id="增强版-coredns">增强版 CoreDNS&lt;/h3>
&lt;p>dnsredir 虽香，但大家别忘了，它是第三方插件，官方默认的二进制文件是不包含该插件的。你可以选择自己编译，但如果经常需要升级怎么办？总不能每次都手动编译吧，也太累了。&lt;/p>
&lt;p>好在有位大佬已经通过 &lt;code>CI/CD&lt;/code> 流程将所需的第三方插件都集成编译进去了，并定期更新，简直就是我等的福音。大佬的项目地址为：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/missdeer/coredns_custom_build%5B9%5D">https://github.com/missdeer/coredns_custom_build[9]&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>现在只需要下载对应操作系统的二进制文件，到处拷贝，就可以运行了。&lt;/p>
&lt;p>下面统统以 MacOS 为例作讲解。&lt;code>Openwrt&lt;/code> 的玩法也一样，参考本文的方法论即可，具体本文就不展开了。&lt;/p>
&lt;p>直接下载二进制文件：&lt;/p>
&lt;pre>&lt;code>$ wget 'https://appveyorcidatav2.blob.core.windows.net/missdeer-15199/coredns-custom-build/1-7-1-514/idbodwxwywg1xgdg/distrib/coredns-linux-amd64.zip?sv=2015-12-11&amp;amp;sr=c&amp;amp;sig=BhMWcOVtDuaETyz2DcjpOr9GdvkpNVOqoIa7iWFpFNQ%3D&amp;amp;st=2020-12-23T15%3A26%3A19Z&amp;amp;se=2020-12-23T15%3A32%3A19Z&amp;amp;sp=r'
$ $ tar zxf coredns-linux-amd64.zip
$ mv coredns-linux-amd64/coredns /usr/local/bin/
&lt;/code>&lt;/pre>
&lt;p>1
2
3
Plain Text&lt;/p>
&lt;h3 id="配置">配置&lt;/h3>
&lt;p>要深入了解 CoreDNS，请查看其文档[10]，及 plugins 的介绍[11]。下面是我的配置文件：&lt;/p>
&lt;pre>&lt;code>cat &amp;gt; /usr/local/etc/Corefile &amp;lt;&amp;lt;EOF
# https://coredns.io/plugins/cache/
(global_cache) {
cache {
# [5, 60]
success 65536 3600 300
# [1, 10]
denial 8192 600 60
prefetch 1 60m 10%
}
}
.:7913 {
ads {
default-lists
blacklist https://raw.githubusercontent.com/privacy-protection-tools/anti-AD/master/anti-ad-domains.txt
whitelist https://files.krnl.eu/whitelist.txt
log
auto-update-interval 24h
list-store ads-cache
}
errors
hosts {
fallthrough
}
health
prometheus :9153
import global_cache
template ANY AAAA {
rcode NXDOMAIN
}
dnsredir accelerated-domains.china.conf google.china.conf apple.china.conf mydns.conf {
expire 15s
max_fails 3
health_check 3s
policy round_robin
path_reload 2s
to 114.114.114.114 223.5.5.5 119.29.29.29
}
dnsredir . {
expire 60s
max_fails 5
health_check 5s
policy random
spray
to tls://8.8.8.8@dns.google tls://8.8.4.4@dns.google
to tls://1.1.1.1@1dot1dot1dot1.cloudflare-dns.com tls://1.0.0.1@1dot1dot1dot1.cloudflare-dns.com
# Global TLS server name
# tls_servername cloudflare-dns.com
}
log
loop
reload 6s
}
EOF
&lt;/code>&lt;/pre>
&lt;p>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
Plain Text&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>hosts&lt;/strong> : &lt;code>hosts&lt;/code> 是 CoreDNS 的一个 plugin，这一节的意思是加载 &lt;code>/etc/hosts&lt;/code> 文件里面的解析信息。hosts 在最前面，则如果一个域名在 hosts 文件中存在，则优先使用这个信息返回；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>fallthrough&lt;/strong> : 如果 &lt;code>hosts&lt;/code> 中找不到，则进入下一个 plugin 继续。缺少这一个指令，后面的 plugins 配置就无意义了；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>cache&lt;/strong> : 溯源得到的结果，缓存指定时间。类似 TTL 的概念；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>reload&lt;/strong> : 多久扫描配置文件一次。如有变更，自动加载；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>errors&lt;/strong> : 打印/存储错误日志；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>dnsredir&lt;/strong> : 这是重点插件。第一段 dnsredir 配置使用了 4 个文件列表，均是 FelixOnMars 的大陆区域名列表[12]，这里我还加了一个自定义的文件列表 &lt;code>mydns.conf&lt;/code>。第二段 dnsredir 配置表示默认的解析配置，可以理解为故障转移，如果某个域名没有匹配到任何一个文件列表，就使用第二段 dnsredir 的上游 DNS 服务器进行解析。通过这样的配置方式，就实现了将国内的域名查询请求转发到 114 等国内的公共 DNS 服务器，将国外的域名查询请求转发到 8.8.8.8 等国外的公共 DNS 服务器。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>讲一下我自己的理解：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>配置文件类似于 nginx 配置文件的格式；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>最外面一级的大括号，对应‘服务’的概念。多个服务可以共用一个端口；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>往里面一级的大括号，对应 plugins 的概念，每一个大括号都是一个 plugin。这里可以看出，plugins 是 CoreDNS 的一等公民；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>服务之间顺序有无关联没有感觉，但 plugins 之间是严重顺序相关的。某些 plugin 必须用 &lt;code>fallthrough&lt;/code> 关键字流向下一个 plugin；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>plugin 内部的配置选项是顺序无关的；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>从 plugins[13] 页面的介绍看，CoreDNS 的功能还是很强的，既能轻松从 bind 迁移，还能兼容 old-style dns server 的运维习惯；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>从 CoreDNS 的性能指标看，适合做大型服务。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>注意：该方案的前提是能够强制让 CoreDNS 使用代理，或者更精确一点，让 8.8.8.8 和 8.8.4.4 使用代理。这里的方法比较复杂一点，本文就不介绍了。如果你实在不知道怎么办，可以将 8.8.8.8 这一行删除，直接使用 Cloudflare 提供的 DNS 服务，虽然响应有点慢，但好在可以访问。&lt;/strong>&lt;/p>
&lt;p>如果你无法忍受 Cloudflare 的响应速度，可以考虑使用国内的无污染 DNS：红鱼 DNS[14]。然后直接一劳永逸：&lt;/p>
&lt;pre>&lt;code>cat &amp;gt; /usr/local/etc/Corefile &amp;lt;&amp;lt;EOF
# https://coredns.io/plugins/cache/
(global_cache) {
cache {
# [5, 60]
success 65536 3600 300
# [1, 10]
denial 8192 600 60
prefetch 1 60m 10%
}
}
.:7913 {
ads {
default-lists
blacklist https://raw.githubusercontent.com/privacy-protection-tools/anti-AD/master/anti-ad-domains.txt
whitelist https://files.krnl.eu/whitelist.txt
log
auto-update-interval 24h
list-store ads-cache
}
errors
hosts {
fallthrough
}
health
prometheus :9153
import global_cache
template ANY AAAA {
rcode NXDOMAIN
}
dnsredir accelerated-domains.china.conf google.china.conf apple.china.conf mydns.conf {
expire 15s
max_fails 3
health_check 3s
policy round_robin
path_reload 2s
to 114.114.114.114 223.5.5.5 119.29.29.29
}
dnsredir . {
expire 60s
max_fails 5
health_check 5s
policy random
spray
to doh://13800000000.rubyfish.cn
}
log
loop
reload 6s
}
EOF
&lt;/code>&lt;/pre>
&lt;p>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
Plain Text&lt;/p>
&lt;p>这样 CoreDNS 就不用担心走代理的问题了。&lt;/p>
&lt;h3 id="定时更新国内域名列表">定时更新国内域名列表&lt;/h3>
&lt;p>大陆域名列表每天都会更新，所以还需要写个脚本来更新文件列表。不用检查文件是否存在了，直接简单粗暴无脑更新：&lt;/p>
&lt;pre>&lt;code>$ cat &amp;gt; /usr/local/bin/update_coredns.sh &amp;lt;&amp;lt;EOF
#!/bin/bash
rm accelerated-domains.china.conf
wget https://cdn.jsdelivr.net/gh/felixonmars/dnsmasq-china-list/accelerated-domains.china.conf -O /usr/local/etc/accelerated-domains.china.conf
rm apple.china.conf
wget https://cdn.jsdelivr.net/gh/felixonmars/dnsmasq-china-list/apple.china.conf -O /usr/local/etc/apple.china.conf
rm google.china.conf
wget https://cdn.jsdelivr.net/gh/felixonmars/dnsmasq-china-list/google.china.conf -O /usr/local/etc/google.china.conf
EOF
$ sudo chmod +x /usr/local/bin/update_coredns.sh
&lt;/code>&lt;/pre>
&lt;p>1
2
3
4
5
6
7
8
9
10
11
Plain Text&lt;/p>
&lt;p>先执行一遍该脚本，更新 Corefile 的配置：&lt;/p>
&lt;pre>&lt;code>$ /usr/local/bin/update_coredns.sh
&lt;/code>&lt;/pre>
&lt;p>1
Plain Text&lt;/p>
&lt;p>然后通过 &lt;code>Crontab&lt;/code> 制作定时任务，每隔两天下午两点更新域名列表：&lt;/p>
&lt;pre>&lt;code>$ crontab -l
0 14 */2 * * /usr/local/bin/update_coredns.sh
&lt;/code>&lt;/pre>
&lt;p>1
2
Plain Text&lt;/p>
&lt;h3 id="开机自启">开机自启&lt;/h3>
&lt;p>MacOS 可以使用 launchctl 来管理服务，它可以控制启动计算机时需要开启的服务，也可以设置定时执行特定任务的脚本，就像 Linux crontab 一样, 通过加装 &lt;code>*.plist&lt;/code> 文件执行相应命令。Launchd 脚本存储在以下位置, 默认需要自己创建个人的 &lt;code>LaunchAgents&lt;/code> 目录：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>~/Library/LaunchAgents&lt;/code> : 由用户自己定义的任务项&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>/Library/LaunchAgents&lt;/code> : 由管理员为用户定义的任务项&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>/Library/LaunchDaemons&lt;/code> : 由管理员定义的守护进程任务项&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>/System/Library/LaunchAgents&lt;/code> : 由 MacOS 为用户定义的任务项&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>/System/Library/LaunchDaemons&lt;/code> : 由 MacOS 定义的守护进程任务项&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>我们选择在 &lt;code>/Library/LaunchAgents/&lt;/code> 目录下创建 &lt;code>coredns.plist&lt;/code> 文件，内容如下：&lt;/p>
&lt;pre>&lt;code>&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;!DOCTYPE plist PUBLIC &amp;quot;-//Apple Computer//DTD PLIST 1.0//EN&amp;quot; &amp;quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&amp;quot;&amp;gt;
&amp;lt;plist version=&amp;quot;1.0&amp;quot;&amp;gt;
&amp;lt;dict&amp;gt;
&amp;lt;key&amp;gt;Label&amp;lt;/key&amp;gt;
&amp;lt;string&amp;gt;coredns&amp;lt;/string&amp;gt;
&amp;lt;key&amp;gt;ProgramArguments&amp;lt;/key&amp;gt;
&amp;lt;array&amp;gt;
&amp;lt;string&amp;gt;/usr/local/bin/coredns&amp;lt;/string&amp;gt;
&amp;lt;string&amp;gt;-conf&amp;lt;/string&amp;gt;
&amp;lt;string&amp;gt;/usr/local/etc/Corefile&amp;lt;/string&amp;gt;
&amp;lt;/array&amp;gt;
&amp;lt;key&amp;gt;StandardOutPath&amp;lt;/key&amp;gt;
&amp;lt;string&amp;gt;/var/log/coredns.stdout.log&amp;lt;/string&amp;gt;
&amp;lt;key&amp;gt;StandardErrorPath&amp;lt;/key&amp;gt;
&amp;lt;string&amp;gt;/var/log/coredns.stderr.log&amp;lt;/string&amp;gt;
&amp;lt;key&amp;gt;KeepAlive&amp;lt;/key&amp;gt;
&amp;lt;true/&amp;gt;
&amp;lt;key&amp;gt;RunAtLoad&amp;lt;/key&amp;gt;
&amp;lt;true/&amp;gt;
&amp;lt;/dict&amp;gt;
&amp;lt;/plist&amp;gt;
&lt;/code>&lt;/pre>
&lt;p>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
XML&lt;/p>
&lt;p>设置开机自动启动 coredns：&lt;/p>
&lt;pre>&lt;code>$ sudo launchctl load -w /Library/LaunchAgents/coredns.plist
&lt;/code>&lt;/pre>
&lt;p>1
Plain Text&lt;/p>
&lt;p>查看服务：&lt;/p>
&lt;pre>&lt;code>$ sudo launchctl list|grep coredns
61676 0 coredns
&lt;/code>&lt;/pre>
&lt;p>1
2
Plain Text&lt;/p>
&lt;pre>&lt;code>$ sudo launchctl list coredns
{
&amp;quot;StandardOutPath&amp;quot; = &amp;quot;/var/log/coredns.stdout.log&amp;quot;;
&amp;quot;LimitLoadToSessionType&amp;quot; = &amp;quot;System&amp;quot;;
&amp;quot;StandardErrorPath&amp;quot; = &amp;quot;/var/log/coredns.stderr.log&amp;quot;;
&amp;quot;Label&amp;quot; = &amp;quot;coredns&amp;quot;;
&amp;quot;TimeOut&amp;quot; = 30;
&amp;quot;OnDemand&amp;quot; = false;
&amp;quot;LastExitStatus&amp;quot; = 0;
&amp;quot;PID&amp;quot; = 61676;
&amp;quot;Program&amp;quot; = &amp;quot;/usr/local/bin/coredns&amp;quot;;
&amp;quot;ProgramArguments&amp;quot; = (
&amp;quot;/usr/local/bin/coredns&amp;quot;;
&amp;quot;-conf&amp;quot;;
&amp;quot;/usr/local/etc/Corefile&amp;quot;;
);
};
&lt;/code>&lt;/pre>
&lt;p>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
Plain Text&lt;/p>
&lt;p>查看端口号：&lt;/p>
&lt;pre>&lt;code>$ sudo ps -ef|egrep -v grep|grep coredns
0 81819 1 0 2:54下午 ?? 0:04.70 /usr/local/bin/coredns -conf /usr/local/etc/Corefile
$ sudo lsof -P -p 81819|egrep &amp;quot;TCP|UDP&amp;quot;
coredns 81819 root 5u IPv6 0x1509853aadbdf853 0t0 TCP *:5302 (LISTEN)
coredns 81819 root 6u IPv6 0x1509853acd2f39ab 0t0 UDP *:5302
coredns 81819 root 7u IPv6 0x1509853aadbdc493 0t0 TCP *:53 (LISTEN)
coredns 81819 root 8u IPv6 0x1509853acd2f5a4b 0t0 UDP *:53
coredns 81819 root 9u IPv6 0x1509853ac63bfed3 0t0 TCP *:5301 (LISTEN)
coredns 81819 root 10u IPv6 0x1509853acd2f5d03 0t0 UDP *:5301
&lt;/code>&lt;/pre>
&lt;p>1
2
3
4
5
6
7
8
9
10
11
12
Plain Text&lt;/p>
&lt;p>大功告成，现在你只需要将系统的 DNS IP 设置为 &lt;code>127.0.0.1&lt;/code> 就可以了。&lt;/p>
&lt;h3 id="验证">验证&lt;/h3>
&lt;pre>&lt;code>$ doggo www.youtube.com @udp://127.0.0.1
NAME TYPE CLASS TTL ADDRESS NAMESERVER
www.youtube.com. CNAME IN 293s youtube-ui.l.google.com. 127.0.0.1:53
youtube-ui.l.google.com. A IN 293s 172.217.14.110 127.0.0.1:53
youtube-ui.l.google.com. A IN 293s 172.217.11.174 127.0.0.1:53
youtube-ui.l.google.com. A IN 293s 172.217.5.206 127.0.0.1:53
youtube-ui.l.google.com. A IN 293s 172.217.5.78 127.0.0.1:53
youtube-ui.l.google.com. A IN 293s 172.217.14.78 127.0.0.1:53
youtube-ui.l.google.com. A IN 293s 142.250.72.238 127.0.0.1:53
youtube-ui.l.google.com. A IN 293s 216.58.193.206 127.0.0.1:53
youtube-ui.l.google.com. A IN 293s 142.250.68.110 127.0.0.1:53
youtube-ui.l.google.com. A IN 293s 142.250.68.78 127.0.0.1:53
youtube-ui.l.google.com. A IN 293s 172.217.4.142 127.0.0.1:53
youtube-ui.l.google.com. A IN 293s 142.250.68.14 127.0.0.1:53
&lt;/code>&lt;/pre>
&lt;p>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
Plain Text&lt;/p>
&lt;p>搞定。&lt;/p>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>CoreDNS 使用与架构分析[15]&lt;/p>
&lt;/li>
&lt;li>
&lt;p>CoreDNS 搭建无污染 DNS[16]&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="参考资料">参考资料&lt;/h3>
&lt;p>[1]CoreDNS: &lt;em>&lt;a href="https://github.com/coredns/coredns">https://github.com/coredns/coredns&lt;/a>&lt;/em>&lt;/p>
&lt;p>[2]DSL: &lt;em>&lt;a href="https://www.wikiwand.com/zh/%25E9%25A2%2586%25E5%259F%259F%25E7%2589%25B9%25E5%25AE%259A%25E8%25AF%25AD%25E8%25A8%2580">https://www.wikiwand.com/zh/%E9%A2%86%E5%9F%9F%E7%89%B9%E5%AE%9A%E8%AF%AD%E8%A8%80&lt;/a>&lt;/em>&lt;/p>
&lt;p>[3]DNS-over-TLS: &lt;em>&lt;a href="https://www.wikiwand.com/zh/DNS_over_TLS">https://www.wikiwand.com/zh/DNS_over_TLS&lt;/a>&lt;/em>&lt;/p>
&lt;p>[4]plugin.cfg: &lt;em>&lt;a href="https://github.com/coredns/coredns/blob/master/plugin.cfg">https://github.com/coredns/coredns/blob/master/plugin.cfg&lt;/a>&lt;/em>&lt;/p>
&lt;p>[5]proxychians-ng: &lt;em>&lt;a href="https://github.com/rofl0r/proxychains-ng">https://github.com/rofl0r/proxychains-ng&lt;/a>&lt;/em>&lt;/p>
&lt;p>[6]proxifier: &lt;em>&lt;a href="https://github.com/yangchuansheng/love-gfw#%25E7%2595%25AA%25E5%25A4%2596%25E7%25AF%2587">https://github.com/yangchuansheng/love-gfw#%E7%95%AA%E5%A4%96%E7%AF%87&lt;/a>&lt;/em>&lt;/p>
&lt;p>[7]dnsredir: &lt;em>&lt;a href="https://github.com/leiless/dnsredir">https://github.com/leiless/dnsredir&lt;/a>&lt;/em>&lt;/p>
&lt;p>[8]FelixOnMars 的大陆区域名列表: &lt;em>&lt;a href="https://github.com/felixonmars/dnsmasq-china-list">https://github.com/felixonmars/dnsmasq-china-list&lt;/a>&lt;/em>&lt;/p>
&lt;p>[9]https://github.com/missdeer/coredns_custom_build: &lt;em>&lt;a href="https://github.com/missdeer/coredns_custom_build">https://github.com/missdeer/coredns_custom_build&lt;/a>&lt;/em>&lt;/p>
&lt;p>[10]文档: &lt;em>&lt;a href="https://coredns.io/manual/toc">https://coredns.io/manual/toc&lt;/a>&lt;/em>&lt;/p>
&lt;p>[11]plugins 的介绍: &lt;em>&lt;a href="https://coredns.io/plugins/">https://coredns.io/plugins/&lt;/a>&lt;/em>&lt;/p>
&lt;p>[12]FelixOnMars 的大陆区域名列表: &lt;em>&lt;a href="https://github.com/felixonmars/dnsmasq-china-list">https://github.com/felixonmars/dnsmasq-china-list&lt;/a>&lt;/em>&lt;/p>
&lt;p>[13]plugins: &lt;em>&lt;a href="https://coredns.io/plugins/">https://coredns.io/plugins/&lt;/a>&lt;/em>&lt;/p>
&lt;p>[14]红鱼 DNS: &lt;em>&lt;a href="https://www.rubyfish.cn/dns/solutions/">https://www.rubyfish.cn/dns/solutions/&lt;/a>&lt;/em>&lt;/p>
&lt;p>[15]CoreDNS 使用与架构分析: &lt;em>&lt;a href="https://zhengyinyong.com/coredns-basis.html">https://zhengyinyong.com/coredns-basis.html&lt;/a>&lt;/em>&lt;/p>
&lt;p>[16]CoreDNS 搭建无污染 DNS: &lt;em>&lt;a href="https://blog.minidump.info/2019/07/coredns-no-dns-poisoning/">https://blog.minidump.info/2019/07/coredns-no-dns-poisoning/&lt;/a>&lt;/em>&lt;/p></description></item></channel></rss>