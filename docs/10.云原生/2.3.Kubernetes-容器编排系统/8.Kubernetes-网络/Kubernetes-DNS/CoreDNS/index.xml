<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – CoreDNS</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/8.Kubernetes-%E7%BD%91%E7%BB%9C/Kubernetes-DNS/CoreDNS/</link><description>Recent content in CoreDNS on 断念梦</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/8.Kubernetes-%E7%BD%91%E7%BB%9C/Kubernetes-DNS/CoreDNS/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: CoreDNS Plugins</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/8.Kubernetes-%E7%BD%91%E7%BB%9C/Kubernetes-DNS/CoreDNS/CoreDNS-Plugins/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/8.Kubernetes-%E7%BD%91%E7%BB%9C/Kubernetes-DNS/CoreDNS/CoreDNS-Plugins/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>Docs:</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/8.Kubernetes-%E7%BD%91%E7%BB%9C/Kubernetes-DNS/CoreDNS/%E6%9C%AA%E5%91%BD%E5%90%8D/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/8.Kubernetes-%E7%BD%91%E7%BB%9C/Kubernetes-DNS/CoreDNS/%E6%9C%AA%E5%91%BD%E5%90%8D/</guid><description/></item><item><title>Docs: CoreDNS</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/8.Kubernetes-%E7%BD%91%E7%BB%9C/Kubernetes-DNS/CoreDNS/CoreDNS/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/8.Kubernetes-%E7%BD%91%E7%BB%9C/Kubernetes-DNS/CoreDNS/CoreDNS/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://coredns.io/">官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://coredns.io/manual/toc/">官方手册&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://coredns.io/plugins/">CoreDNS 所有插件详解&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/docs/tasks/administer-cluster/dns-custom-nameservers/">k8s 中的 CoreDNS 的配置示例&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>CoreDNS 是一个用 Go 编写的 DNS 服务器，目标是要称为云原生环境下的 DNS 服务器和服务发现解决方案。&lt;/p>
&lt;p>CoreDNS 与 &lt;a href="https://zh.wikipedia.org/zh-cn/BIND">BIND&lt;/a> 这类 DNS 服务器不同，CoreDNS 非常灵活，几乎所有功能都由插件来实现&lt;/p>
&lt;p>插件可以独立或者一起运行，以便执行一个 **DNS Function(DNS 功能)。**可以说 CoreDNS 是由插件驱动的&lt;/p>
&lt;p>那么什么是“ DNS 功能”？ 出于 CoreDNS 的目标，我们将其定义为实现 CoreDNS Plugin API 的软件。 实现的功能可能会大相径庭。 有些插件本身并不会创建响应，例如指标或缓存，但会添加功能。 然后有一些插件确实会产生响应。 这些也可以做任何事情：有一些与 Kubernetes 通信以提供服务发现的插件，有一些从文件或数据库中读取数据的插件。&lt;/p>
&lt;p>So what’s a “DNS function”? For the purpose of CoreDNS, we define it as a piece of software that implements the CoreDNS Plugin API. The functionality implemented can wildly deviate. There are plugins that don’t themselves create a response, such as &lt;a href="https://coredns.io/plugins/metrics">metrics&lt;/a> or &lt;a href="https://coredns.io/plugins/cache">cache&lt;/a>, but that add functionality. Then there are plugins that &lt;em>do&lt;/em> generate a response. These can also do anything: There are plugins that communicate with &lt;a href="https://coredns.io/plugins/kubernetes">Kubernetes&lt;/a> to provide service discovery, plugins that read data from a &lt;a href="https://coredns.io/plugins/file">file&lt;/a> or a &lt;a href="https://coredns.io/explugins/pdsql">database&lt;/a>.&lt;/p>
&lt;p>用白话说：&lt;/p>
&lt;p>它有以下几个特性：&lt;/p>
&lt;ul>
&lt;li>插件化（Plugins）基于 Caddy 服务器框架，CoreDNS 实现了一个插件链的架构，将大量应用端的逻辑抽象成 plugin 的形式（如 Kubernetes 的 DNS 服务发现，Prometheus 监控等）暴露给使用者。CoreDNS 以预配置的方式将不同的 plugin 串成一条链，按序执行 plugin 的逻辑。从编译层面，用户选择所需的 plugin 编译到最终的可执行文件中，使得运行效率更高。CoreDNS 采用 Go 编写，所以从具体代码层面来看，每个 plugin 其实都是实现了其定义的 interface 的组件而已。第三方只要按照 CoreDNS Plugin API 去编写自定义插件，就可以很方便地集成于 CoreDNS。&lt;/li>
&lt;li>配置简单化引入表达力更强的 DSL[2]，即 &lt;code>Corefile&lt;/code> 形式的配置文件（也是基于 Caddy 框架开发）。&lt;/li>
&lt;li>一体化的解决方案区别于 &lt;code>kube-dns&lt;/code>，CoreDNS 编译出来就是一个单独的二进制可执行文件，内置了 cache，backend storage，health check 等功能，无需第三方组件来辅助实现其他功能，从而使得部署更方便，内存管理更为安全。&lt;/li>
&lt;/ul>
&lt;p>其实从功能角度来看，CoreDNS 更像是一个通用 DNS 方案（类似于 &lt;code>BIND&lt;/code>），然后通过插件模式来极大地扩展自身功能，从而可以适用于不同的场景（比如 Kubernetes）。正如官方博客所说：&lt;/p>
&lt;h2 id="coredns-metrics">CoreDNS Metrics&lt;/h2>
&lt;p>在 K8S 中，CoreDNS 不在宿主机暴露端口，需要通过其 service 来访问&lt;/p>
&lt;p>指标获取路径：CoreDNS_SVC_IP:9153/metrics&lt;/p>
&lt;h1 id="coredns-关联文件与配置">CoreDNS 关联文件与配置&lt;/h1>
&lt;p>&lt;strong>./Corefile&lt;/strong> # CoreDNS 运行所需配置文件，参考：&lt;a href="https://coredns.io/2017/07/23/corefile-explained/">&lt;strong>Corefile 解释&lt;/strong>&lt;/a>。&lt;/p>
&lt;h2 id="kubeadm-安装的-k8s-集群中-coredns-的默认配置文件">kubeadm 安装的 k8s 集群中 coredns 的默认配置文件&lt;/h2>
&lt;p>在 kubeadm 安装的集群中，coredns 的配置保存在 configmap 中，通过 kubectl 命令进行查看&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>[&lt;span style="color:#ae81ff">root@master myapp]# kubectl get configmaps -n kube-system coredns -o yaml&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">ConfigMap&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">data&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">Corefile&lt;/span>: |&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> .:53 {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> errors
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> health
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> ready
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> kubernetes cluster.local in-addr.arpa ip6.arpa {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> pods insecure
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> fallthrough in-addr.arpa ip6.arpa
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> ttl 30
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> prometheus :9153
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> forward . /etc/resolv.conf
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> cache 30
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> loop
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> reload
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> loadbalance
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> }&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="coredns-plugins插件">CoreDNS Plugins(插件)&lt;/h1>
&lt;p>参考：&lt;a href="https://coredns.io/manual/toc/#plugins">官方 Plugins 手册&lt;/a>&lt;/p>
&lt;h2 id="coredns-plugins-的工作模式">CoreDNS Plugins 的工作模式&lt;/h2>
&lt;p>当 CoreDNS 启动后，它将根据配置文件启动不同 server ，每台 server 都拥有自己的插件链。当有 DNS 请求时，它将依次经历如下 3 步逻辑：&lt;/p>
&lt;ul>
&lt;li>如果有当前请求的 server 有多个 zone，将采用贪心原则选择最匹配的 zone；&lt;/li>
&lt;li>一旦找到匹配的 server，按照 &lt;a href="https://github.com/coredns/coredns/blob/master/plugin.cfg">&lt;strong>plugin.cfg&lt;/strong>&lt;/a> 定义的顺序执行插件链上的插件；
&lt;ul>
&lt;li>plugin.cfg 是定义在代码中的，在处理请求时，总是根据 plugin.cfg 中定义的顺序加载插件&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>每个插件将判断当前请求是否应该处理，将有以下几种可能：
&lt;ul>
&lt;li>&lt;strong>请求被当前插件处理&lt;/strong>插件将生成对应的响应并回给客户端，此时请求结束，下一个插件将不会被调用，如 whoami 插件；&lt;/li>
&lt;li>&lt;strong>请求被当前插件以 Fallthrough 形式处理&lt;/strong>如果请求在该插件处理过程中有可能将跳转至下一个插件，该过程称为 fallthrough，并以关键字 &lt;code>fallthrough&lt;/code> 来决定是否允许此项操作，例如 host 插件，当查询域名未位于 /etc/hosts，则调用下一个插件；&lt;/li>
&lt;li>&lt;strong>请求在处理过程被携带 Hint&lt;/strong>请求被插件处理，并在其响应中添加了某些信息（hint）后继续交由下一个插件处理。这些额外的信息将组成对客户端的最终响应，如 &lt;code>metric&lt;/code> 插件；&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="coredns-的常用插件">CoreDNS 的常用插件&lt;/h2>
&lt;p>参考：&lt;a href="https://coredns.io/plugins/">官方 Plugins 列表文档&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://coredns.io/plugins/errors/">errors&lt;/a> # coredns 查询处理过程中遇到的任何错误都将被打印到标准输出。Note：每个配置文件中，仅能使用一次 errors 插件&lt;/li>
&lt;li>&lt;a href="https://coredns.io/plugins/health/">health&lt;/a> # 该插件用来将 CoreDNS 的运行状态暴露在 http://localhost:8080/health。&lt;/li>
&lt;li>&lt;a href="https://coredns.io/plugins/ready/">ready&lt;/a> # 当所有插件都就绪之后，会在 8181 端口上返回 http 的 200 状态码。&lt;/li>
&lt;li>&lt;a href="https://coredns.io/plugins/kubernetes/">kubernetes&lt;/a> # CoreDNS 将基于 Kubernetes 的服务和 Pod 的 IP 答复 DNS 查询。&lt;/li>
&lt;li>&lt;a href="https://coredns.io/plugins/metrics/">prometheus&lt;/a> # 在 9153 端口上以 OpenMetrics 格式暴露 coredns 指标。&lt;/li>
&lt;li>&lt;a href="https://coredns.io/plugins/forward/">forward&lt;/a> # 任何不在 Kubernetes 集群域内的查询都将转发到预定义的解析器（/etc/resolv.conf）。&lt;/li>
&lt;li>&lt;a href="https://coredns.io/plugins/cache/">cache&lt;/a> # 启用前端缓存。&lt;/li>
&lt;li>&lt;a href="https://coredns.io/plugins/loop/">loop&lt;/a> # 检测简单的转发循环，如果发现循环，则中止 CoreDNS 进程。&lt;/li>
&lt;li>&lt;a href="https://coredns.io/plugins/reload">reload&lt;/a> # 允许自动重新加载已更改的 Corefile。 编辑 ConfigMap 配置后，等待两分钟，以使更改生效。&lt;/li>
&lt;li>&lt;a href="https://coredns.io/plugins/loadbalance">loadbalance&lt;/a> # 一个轮询 DNS 负载均衡器，它随机分配 dns 响应中的 A，AAAA 和 MX 记录的顺序。&lt;/li>
&lt;li>等等等&lt;/li>
&lt;/ul>
&lt;h2 id="kubernetes-插件">kubernetes 插件&lt;/h2>
&lt;p>kubernetes [ZONES&amp;hellip;] {    endpoint URL    tls CERT KEY CACERT    kubeconfig KUBECONFIG CONTEXT    namespaces NAMESPACE&amp;hellip;    labels EXPRESSION    pods POD-MODE    endpoint_pod_names    ttl TTL # 设置自定义 TTL。 默认值为 5 秒。 允许的最小 TTL 为 0 秒，最大为 3600 秒。 将 TTL 设置为 0 将防止记录被缓存。    noendpoints    transfer to ADDRESS&amp;hellip;    fallthrough [ZONES&amp;hellip;]    ignore empty_service}&lt;/p>
&lt;p>pods POD-MODE # 提供了 pods insecure 选项，以便与 kube-dn 向后兼容。 您可以使用经过验证的 Pod 选项，只有在相同名称空间中存在具有匹配 IP 的 Pod 时，该选项才返回 A 记录。 如果您不使用广告连播记录，则可以使用“广告连播禁用”选项。&lt;/p>
&lt;h1 id="coredns-的工作模式">CoreDNS 的工作模式&lt;/h1>
&lt;p>如果 Corefile 为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>coredns.io:5300 &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> file db.coredns.io
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>example.io:53 &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> errors
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> file db.example.io
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>example.net:53 &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> file db.example.net
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.:53 &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kubernetes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> proxy . 8.8.8.8
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> health
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> errors
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cache
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>从配置文件来看，我们定义了两个 server（尽管有 4 个区块），分别监听在 &lt;code>5300&lt;/code> 和 &lt;code>53&lt;/code> 端口。其逻辑图可如下所示：
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gggg2s/1622809781189-17c30eb0-ece4-4e93-b40a-34714856af7f.png" alt="">
每个进入到某个 server 的请求将按照 &lt;a href="https://github.com/coredns/coredns/blob/master/plugin.cfg">&lt;strong>plugin.cfg&lt;/strong>&lt;/a> 定义顺序执行其已经加载的插件。&lt;/p>
&lt;p>从上图，我们需要注意以下几点：&lt;/p>
&lt;ul>
&lt;li>尽管在 &lt;code>.:53&lt;/code> 配置了 &lt;code>health&lt;/code> 插件，但是它并为在上面的逻辑图中出现，原因是：该插件并未参与请求相关的逻辑（即并没有在插件链上），只是修改了 server 配置。更一般地，我们可以将插件分为两种：
&lt;ul>
&lt;li>&lt;strong>Normal 插件&lt;/strong>：参与请求相关的逻辑，且插入到插件链中；&lt;/li>
&lt;li>&lt;strong>其他插件&lt;/strong>：不参与请求相关的逻辑，也不出现在插件链中，只是用于修改 server 的配置，如 &lt;code>health&lt;/code>，&lt;code>tls&lt;/code> 等插件；&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: CoreDNS 配置详解</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/8.Kubernetes-%E7%BD%91%E7%BB%9C/Kubernetes-DNS/CoreDNS/CoreDNS-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/8.Kubernetes-%E7%BD%91%E7%BB%9C/Kubernetes-DNS/CoreDNS/CoreDNS-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://coredns.io/manual/toc/#configuration">官方配置文档&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>CoreDNS 的配置文件为 Corefile。&lt;/p>
&lt;p>Corefile 源于 Caddy 框架的的配置文件 Caddyfile。Corefile 将会定义如下 CoreDNS 的行为：&lt;/p>
&lt;ul>
&lt;li>CoreDNS 的运行逻辑很像 Nginx，会抽象出 &lt;code>server&lt;/code> 的概念并运行。可以同时定义多个 Server 以实现不同功能，每个 Server 主要定义下面几种行为：
&lt;ul>
&lt;li>Server 以什么协议监听在哪个端口&lt;/li>
&lt;li>Server 负责哪个 zone 的权威 DNS 解析&lt;/li>
&lt;li>Server 将会加载哪些插件&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>一个典型的最基础的 Corefile 格式如下所示：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>ZONE&lt;span style="color:#f92672">[&lt;/span>:PORT&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[&lt;/span>PLUGIN&lt;span style="color:#f92672">]&lt;/span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;strong>ZONE&lt;/strong># 定义 Server 的 zone。&lt;code>默认值： .&lt;/code>&lt;/li>
&lt;li>&lt;strong>PORT&lt;/strong># 定义 Server 监听的端口。&lt;code>默认值：53&lt;/code>。即 -dns.port 标志的值。&lt;/li>
&lt;li>&lt;strong>PLUGIN&lt;/strong># 定义 Server 要加载的&lt;a href="https://coredns.io/plugins/">插件&lt;/a>。这是可选的，但是如果不加载任何插件，那么 coredns 将为所有查询返回 SERVFAIL 。
&lt;ul>
&lt;li>并且，不同的 Plugins 还可以定义不同的参数以改变其运行行为。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>比如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>. {}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上述配置文件表达的是：server 负责根域 &lt;code>.&lt;/code> 的解析，监听在 53 端口，并且不使用任何插件。&lt;/p>
&lt;h1 id="配置示例">配置示例&lt;/h1>
&lt;h2 id="定义-server">定义 server&lt;/h2>
&lt;p>一个最简单的配置文件可以为：&lt;/p>
&lt;pre tabindex="0">&lt;code>.{}
&lt;/code>&lt;/pre>&lt;p>即 server 监听 53 端口并不使用插件。
如果此时在定义其他 server，要保证监听端口不冲突；如果是在原来 server 增加 zone，则要保证 zone 之间不冲突，如：&lt;/p>
&lt;pre tabindex="0">&lt;code>. {}
.:54 {}
&lt;/code>&lt;/pre>&lt;p>另一个 server 运行于 54 端口并负责根域 &lt;code>.&lt;/code> 的解析。&lt;/p>
&lt;p>又如：&lt;/p>
&lt;pre tabindex="0">&lt;code>example.org {
whoami
}
org {
whoami
}
&lt;/code>&lt;/pre>&lt;p>同一个 server 但是负责不同 zone 的解析，有不同插件链。&lt;/p>
&lt;h3 id="定义-reverse-zone">定义 Reverse Zone&lt;/h3>
&lt;p>跟其他 DNS 服务器类似，Corefile 也可以定义 &lt;code>Reverse Zone&lt;/code>（反向解析 IP 地址对应的域名）：&lt;/p>
&lt;pre tabindex="0">&lt;code>0.0.10.in-addr.arpa {
whoami
}
&lt;/code>&lt;/pre>&lt;p>或者简化版本：&lt;/p>
&lt;pre tabindex="0">&lt;code>10.0.0.0/24 {
whoami
}
&lt;/code>&lt;/pre>&lt;p>可以通过 &lt;code>dig&lt;/code> 进行反向查询：&lt;/p>
&lt;pre tabindex="0">&lt;code>$ dig -x 10.0.0.1
&lt;/code>&lt;/pre>&lt;h3 id="使用不同的通信协议">使用不同的通信协议&lt;/h3>
&lt;p>CoreDNS 除了支持 DNS 协议，也支持 &lt;code>TLS&lt;/code> 和 &lt;code>gRPC&lt;/code>，即 DNS-over-TLS[3] 和 DNS-over-gRPC 模式：&lt;/p>
&lt;pre tabindex="0">&lt;code>tls://example.org:1443 {
#...
}
&lt;/code>&lt;/pre>&lt;h3 id="添加其他的域名解析">添加其他的域名解析&lt;/h3>
&lt;pre tabindex="0">&lt;code>.:53 {
hosts {
123.138.66.130 xsky.xa.ehualu.it
123.138.66.130 prometheus.xa.ehualu.it
116.182.4.38 xsky.heb.ehualu.it
116.182.4.38 prometheus.heb.ehualu.it
fallthrough
}
}
&lt;/code>&lt;/pre>&lt;h2 id="forwarding转发">Forwarding(转发)&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://coredns.io/manual/toc/#forwarding">https://coredns.io/manual/toc/#forwarding&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item></channel></rss>