<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – DNS 管理与优化</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/8.Kubernetes-%E7%BD%91%E7%BB%9C/Kubernetes-DNS/DNS-%E7%AE%A1%E7%90%86%E4%B8%8E%E4%BC%98%E5%8C%96/</link><description>Recent content in DNS 管理与优化 on 断念梦</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/8.Kubernetes-%E7%BD%91%E7%BB%9C/Kubernetes-DNS/DNS-%E7%AE%A1%E7%90%86%E4%B8%8E%E4%BC%98%E5%8C%96/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: CoreDNS 应用实例</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/8.Kubernetes-%E7%BD%91%E7%BB%9C/Kubernetes-DNS/DNS-%E7%AE%A1%E7%90%86%E4%B8%8E%E4%BC%98%E5%8C%96/CoreDNS-%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/8.Kubernetes-%E7%BD%91%E7%BB%9C/Kubernetes-DNS/DNS-%E7%AE%A1%E7%90%86%E4%B8%8E%E4%BC%98%E5%8C%96/CoreDNS-%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/</guid><description>
&lt;p>原文链接：&lt;a href="https://mp.weixin.qq.com/s/uzGhAHVqjmgH8QA8eIsS4w">https://mp.weixin.qq.com/s/uzGhAHVqjmgH8QA8eIsS4w&lt;/a>&lt;/p>
&lt;p>自从 Kubernetes1.11 之后，CoreDNS 作为集群内默认的域名解析服务，你是否对它还仅仅还停留在对 Kubernetes 的 Service 解析呢？事实上光 DNS 在 K8S 内就有很多有意思的操作，今天我们不妨来看看 CoreDNS 的各种高阶玩法。&lt;/p>
&lt;h2 id="1-自定义-hosts-解析">1. 自定义 hosts 解析&lt;/h2>
&lt;p>默认情况下，Kubernetes 集群内的容器要解析外部域名时，CoreDNS 会将请求转发给&lt;code>/etc/resolv.conf&lt;/code>文件里指定的上游 DNS 服务器。这个是由这个配置决定的。&lt;/p>
&lt;pre>&lt;code>forward . /etc/resolv.conf
&lt;/code>&lt;/pre>
&lt;p>有的时候，我们如果需要在&lt;code>集群内全局劫持某个域名时&lt;/code>，我们通常可以利用&lt;code>hosts&lt;/code>插件来帮忙。&lt;strong>hosts&lt;/strong>插件会每隔 5s 将需解析的信息重新加载到 coredns 当中，当你有任何变化时直接更新它的配置区块即可。常见的 host 有两种方法配置，分别如下：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>定义 host&lt;/p>
&lt;p>.:53 {
hosts {
1.1.1.1 test.cloudxiaobai.com
2.2.2.2 test2.cloudxiaobai.com
fallthrough
}
}&lt;/p>
&lt;/li>
&lt;li>
&lt;p>加载 hosts 文件&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="直接从etchosts加载host信息">直接从/etc/hosts加载host信息&lt;/h1>
&lt;pre>&lt;code>. {
hosts {
fallthrough
}
}
#又或者,从当前目录的test.hosts文件中加载host信息
. {
hosts test.hosts {
fallthrough
}
}
&lt;/code>&lt;/pre>
&lt;blockquote>
&lt;p>当被需要解析的域名不在 hosts 当中时，需要用&lt;code>fallthrough&lt;/code>继续将请求转发给其它插件继续处理&lt;/p>
&lt;/blockquote>
&lt;p>&lt;em>扩展&lt;/em>
如果我们只是想在 Workloads 内局部生效部分 host 信息时，那么可以借助于&lt;code>HostAliases向Pod的/etc/hosts文件内添加主机信息。&lt;/code>我们拿 deployment 来举例，&lt;/p>
&lt;pre>&lt;code>apiVersion: extensions/v1beta1
kind: Deployment
spec:
template
spec:
containers:
- image: busybox:latest
name: nginx
hostAliases:
- ip: 1.1.1.1
hostnames:
- test1.cloudxiaobai.com
- ip: 2.2.2.2
hostnames:
- test1.cloudxiaobai.com
...
&lt;/code>&lt;/pre>
&lt;h2 id="2-支持-srv-记录">2. 支持 SRV 记录&lt;/h2>
&lt;p>&lt;strong>SRV 记录&lt;/strong>是域名系统中用于指定服务器提供服务的位置（如主机名和端口）数据。它在 DNS 记录中的是个新鲜面孔，在 RFC2082 中才对 SRV 记录进行了定义，因此有很多&lt;code>老旧服务器并不支持SRV记录&lt;/code>。SRV 在 RFC2082 定义的标准记录格式如下：&lt;/p>
&lt;pre>&lt;code>#英文
_Service._Proto.Name TTL Class SRV Priority Weight Port Target
#中文
_服务._协议.名称. TTL 类别 SRV 优先级 权重 端口 主机.
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>Service ：服务的符号名称&lt;/li>
&lt;li>Proto ：服务的传输协议，通常为 TCP 或 UDP，Proto 不区分大小写&lt;/li>
&lt;li>Name ：此 RR 所指的域名，在这个域名下 SRV RR 是唯一的&lt;/li>
&lt;li>TTL ：标准 DNS 存活时间&lt;/li>
&lt;li>CLASS ：标准 DNS 类别值（此值总为 IN）&lt;/li>
&lt;li>Priority ：目标主机的优先级，值越小越优先，范围 0-65535&lt;/li>
&lt;li>Weight ：相同优先度记录的相对权重，值越大越优先&lt;/li>
&lt;li>Port ：服务所在的 TCP 或 UDP 端口&lt;/li>
&lt;li>Target : 提供服务的规范主机名，以半角句号结尾&lt;/li>
&lt;/ul>
&lt;p>在 Kubernetes 里面，CoreDNS 会为&lt;code>有名称的端口创建SRV记录&lt;/code>，这些端口可以是 svc 或 headless.svc 的一部分。对每个命名端口，SRV 记录了一个类似下列格式的记录：&lt;/p>
&lt;pre>&lt;code>_port-name._port-protocol.my-svc.my-namespace.svc.cluster.local
&lt;/code>&lt;/pre>
&lt;p>在 Golang 中我们用 net.LookupSRV 来发起 SRV 记录查询&lt;/p>
&lt;pre>&lt;code>func (r *Resolver) LookupSRV(ctx context.Context, service, proto, name string) (cname string, addrs []*SRV, err error)
&lt;/code>&lt;/pre>
&lt;p>net 库里对 SRV 结构体里定义了 4 个字段，分别是&lt;code>Target&lt;/code>,&lt;code>Port&lt;/code>，&lt;code>Priority&lt;/code>,&lt;code>Wright&lt;/code>。当我们使用&lt;code>LookupSRV&lt;/code>发起 SRV 查询时，得到的返回的记录会按优先级排序，并在优先级内按权重进行随机分配。如果 service 和 proto 均为空字符串，则 LookupSRV 直接查找 name。&lt;/p>
&lt;h3 id="拿-thanos-的-srv-查询举个例子">拿 thanos 的 SRV 查询举个例子&lt;/h3>
&lt;h4 id="1-第一步-resolvergo-中-srv-查询逻辑">1. 第一步 resolver.go 中 SRV 查询逻辑&lt;/h4>
&lt;p>thanos 中的 resolver.go 里面包含了处理 SRV 查询的逻辑，如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">SRV&lt;/span>, &lt;span style="color:#a6e22e">SRVNoA&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">recs&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">resolver&lt;/span>.&lt;span style="color:#a6e22e">LookupSRV&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">host&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">Wrapf&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;lookup SRV records %q&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">host&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">rec&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">recs&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">resPort&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">port&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">resPort&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//获取SRV返回的端口
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">resPort&lt;/span> = &lt;span style="color:#a6e22e">strconv&lt;/span>.&lt;span style="color:#a6e22e">Itoa&lt;/span>(int(&lt;span style="color:#a6e22e">rec&lt;/span>.&lt;span style="color:#a6e22e">Port&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">qtype&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">SRVNoA&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//如果不需要使用A或者AAAA记录查询时，则组合主机名:端口
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">res&lt;/span> = append(&lt;span style="color:#a6e22e">res&lt;/span>, &lt;span style="color:#a6e22e">appendScheme&lt;/span>(&lt;span style="color:#a6e22e">scheme&lt;/span>, &lt;span style="color:#a6e22e">net&lt;/span>.&lt;span style="color:#a6e22e">JoinHostPort&lt;/span>(&lt;span style="color:#a6e22e">rec&lt;/span>.&lt;span style="color:#a6e22e">Target&lt;/span>, &lt;span style="color:#a6e22e">resPort&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Do A lookup for the domain in SRV answer.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">resIPs&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">resolver&lt;/span>.&lt;span style="color:#a6e22e">LookupIPAddr&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">rec&lt;/span>.&lt;span style="color:#a6e22e">Target&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">Wrapf&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;look IP addresses %q&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">rec&lt;/span>.&lt;span style="color:#a6e22e">Target&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//根据主机名遍历出所有的ip地址，并组合成ip:port的方式
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">resIP&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">resIPs&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">res&lt;/span> = append(&lt;span style="color:#a6e22e">res&lt;/span>, &lt;span style="color:#a6e22e">appendScheme&lt;/span>(&lt;span style="color:#a6e22e">scheme&lt;/span>, &lt;span style="color:#a6e22e">net&lt;/span>.&lt;span style="color:#a6e22e">JoinHostPort&lt;/span>(&lt;span style="color:#a6e22e">resIP&lt;/span>.&lt;span style="color:#a6e22e">String&lt;/span>(), &lt;span style="color:#a6e22e">resPort&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="第二步-创建-kubernetes-service">第二步 创建 Kubernetes Service&lt;/h4>
&lt;p>CoreDNS 中对于有名称的 port，会为其创建一条对应的 SRV 记录。&lt;/p>
&lt;pre>&lt;code>apiVersion: v1
kind: Service
metadata:
labels:
app: thanos-receiver
name: thanos-receiver
namespace: monitor
spec:
ClusterIP: None
ports:
- name: grpc
port: 10901
protocol: TCP
targetPort: 10901
&lt;/code>&lt;/pre>
&lt;p>如上结构的 Service 我们就可以使用如下方式查询域名:&lt;/p>
&lt;pre>&lt;code>_grpc._tcp.thanos-receiver.monitor.svc.cluster.local
&lt;/code>&lt;/pre>
&lt;p>我们用 dig 命令做一次 SRV 记录查询就可以得到响应，可以看到下列的&lt;code>ANSWER SECTION&lt;/code>中得到了 net 库里面定义的 SRV 结构体的数据了，并且 CoreDNS 返回了三条记录：&lt;/p>
&lt;pre>&lt;code># dig srv _grpc._tcp.thanos-receiver.monitor.svc.cluster.local
...
;; ANSWER SECTION:
_grpc._tcp.thanos-receiver.monitor.svc.cluster.local. 6 IN SRV 0 33 10901 10-59-155-238.thanos-receiver.monitor.svc.cluster.local.
_grpc._tcp.thanos-receiver.monitor.svc.cluster.local. 6 IN SRV 0 33 10901 10-59-42-68.thanos-receiver.monitor.svc.cluster.local.
_grpc._tcp.thanos-receiver.monitor.svc.cluster.local. 6 IN SRV 0 33 10901 10-59-48-162.thanos-receiver.monitor.svc.cluster.local.
;; ADDITIONAL SECTION:
10-59-48-162.thanos-receiver.monitor.svc.cluster.local. 6 IN A 10.59.48.162
10-59-42-68.thanos-receiver.monitor.svc.cluster.local. 6 IN A 10.59.42.68
10-59-155-238.thanos-receiver.monitor.svc.cluster.local. 6 IN A 10.59.155.238
...
&lt;/code>&lt;/pre>
&lt;p>可以看到这条 SRV 记录里面，分别返回了三个服务的&lt;code>IP地址&lt;/code>、&lt;code>端口&lt;/code>、以及&lt;code>服务的优先级&lt;/code>和&lt;code>权重&lt;/code>&lt;/p>
&lt;h4 id="第三步-使用-srv-记录做服务发现">第三步 使用 SRV 记录做服务发现&lt;/h4>
&lt;p>对于代码中启用了 SRV 记录的业务，只需要在业务配置里面加上需要访问的 SRV 地址即可，例如 thanos-query 需要调 thanos-receiver 的 grpc 端口做监控数据查询，如果我们集群内有多个 receiver 服务的话，我们就像如下配置，即可做到 DNS 的服务发现：&lt;/p>
&lt;pre>&lt;code>...
spec:
containers:
- args:
- query
# 定义thanos-receiver服务SRV记录
- --store=dnssrv+_grpc._tcp.thanos-receiver.monitor.svc.cluster.local
...
&lt;/code>&lt;/pre>
&lt;p>当服务正常运行后我们就可以查到 receiver 服务以及注册到 query 里面了
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/pfyc62/1622810154712-9867e005-f445-4b25-a00d-4a1f623fb7ee.gif" alt="image.gif">&lt;/p>
&lt;h2 id="3-nodelocal-dnscache">3. NodeLocal DNSCache&lt;/h2>
&lt;p>有很多同学经常会抱怨，在 Kubernetes 中有时候会遇到 DNS 解析间歇性 5s 超时的问题。其实这个问题社区很早意识到 DNS 的经过 Iptables 到 Conntrack 遇到竞争的问题，并给出来利用 Daemonset 在集群的每个 Node 上运行一个精简版的 CoreDNS 并监听一个虚拟 ip 地址来绕过 Conntrack，同时还能充当缓存环境 CoreDNS 压力。此举能大幅降低 DNS 查询 timeout 的频次，提升服务稳定性。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/pfyc62/1622810154942-09a54d12-aba5-46f9-a936-7ac84725e2b2.gif" alt="image.gif">&lt;strong>关于部署&lt;/strong>
&lt;strong>node-local-dns&lt;/strong>通过添加 iptables 规则能够接收节点上所有发往 169.254.20.10 的 dns 查询请求，把针对集群内部域名查询请求路由到 coredns。把集群外部域名请求直接通过 host 网络发往本地&lt;code>/etc/resolv.conf&lt;/code>记录的外部 DNS 服务器中。&lt;/p>
&lt;pre>&lt;code># 下载部署脚本
$ curl https://node-local-dns.oss-cn-hangzhou.aliyuncs.com/install-nodelocaldns.sh
# 部署,确保kubectl能够连接集群
$ bash install-nodelocaldns.sh
&lt;/code>&lt;/pre>
&lt;h3 id="如何使用">如何使用&lt;/h3>
&lt;p>&lt;code>NodeLocal DNSCache的部署并不会直接产生效果&lt;/code>,通常我们有两种方式可以让集群的 pod 使用上本机 DNS 缓存。&lt;/p>
&lt;h4 id="1-定制业务容器-dnsconfig">1. 定制业务容器 dnsConfig&lt;/h4>
&lt;p>Kubernetes 的 workload 中允许我们自定义 dns 相关的配置，其中我们需要注意以下几点：&lt;/p>
&lt;ul>
&lt;li>dnsPolicy: None，不使用 ClusterDNS。&lt;/li>
&lt;li>配置 searches，保证集群内部域名能够被正常解析。&lt;/li>
&lt;li>适当降低 ndots 值，当前 ACK 集群 ndots 值默认为 5,降低 ndots 值有利于加速集群外部域名访问。&lt;/li>
&lt;li>适当调整 options 参数，避免并发请求&lt;code>single-request&lt;/code>和分开 A 和 AAAA 请求采用的源端口&lt;code>single-request-reopen&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>可以参考如下&lt;/p>
&lt;pre>&lt;code>dnsPolicy: None
dnsConfig:
nameservers: [&amp;quot;169.254.20.10&amp;quot;]
searches:
- default.svc.cluster.local
- svc.cluster.local
- cluster.local
options:
- name: ndots
value: &amp;quot;2&amp;quot;
- name: single-request-reopen
value: &amp;quot;&amp;quot;
- name: timeout
value: &amp;quot;1&amp;quot;
&lt;/code>&lt;/pre>
&lt;h4 id="2-修改-kubelet-配置">2. 修改 Kubelet 配置&lt;/h4>
&lt;p>kubelet 启动参数中可以通过参数&lt;code>--cluster-dns&lt;/code>来指定容器的 nameserver，我们只需将它修改成&lt;code>169.254.20.10&lt;/code>重启即可。不过容器要真正将 NodeLocal DNSCache 用起来话，还得将&lt;code>Pod重启&lt;/code>才会生效。&lt;/p>
&lt;h2 id="4-禁用-ipv6-域名解析">4. 禁用 IPv6 域名解析&lt;/h2>
&lt;p>有时候我们 Kubernetes 集群内没有启用 IPv6 的话，可以在 CoreDNS 内禁止 IPv6 的域名解析，这个时候我们可以用 Template 这个插件来解决：&lt;/p>
&lt;pre>&lt;code>.:53 {
template ANY AAAA {
rcode NXDOMAIN
}
...
}
&lt;/code>&lt;/pre>
&lt;blockquote>
&lt;p>这条记录会将所有的 AAAA 查询直接返回&lt;code>NXDOMAIN&lt;/code>,并且不会被转发给其它插件处理&lt;/p>
&lt;/blockquote></description></item><item><title>Docs: k8s DNS 中的 search 和 ndots 起源</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/8.Kubernetes-%E7%BD%91%E7%BB%9C/Kubernetes-DNS/DNS-%E7%AE%A1%E7%90%86%E4%B8%8E%E4%BC%98%E5%8C%96/k8s-DNS-%E4%B8%AD%E7%9A%84-search-%E5%92%8C-ndots-%E8%B5%B7%E6%BA%90/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/8.Kubernetes-%E7%BD%91%E7%BB%9C/Kubernetes-DNS/DNS-%E7%AE%A1%E7%90%86%E4%B8%8E%E4%BC%98%E5%8C%96/k8s-DNS-%E4%B8%AD%E7%9A%84-search-%E5%92%8C-ndots-%E8%B5%B7%E6%BA%90/</guid><description>
&lt;h1 id="多余的-dns-查询">多余的 DNS 查询&lt;/h1>
&lt;p>一些需要解析外部 DNS 域名的应用，当运行在容器中时，如果我们在容器的 network namespace 中对 dns 报文（udp port 53）进行抓包，可能会发现在正确解析之前，还经过了若干次多余的尝试。&lt;/p>
&lt;p>下面是我在容器中&lt;code>ping google.com&lt;/code>，同时在容器的 network namespace 中抓到的包。&lt;/p>
&lt;pre>&lt;code>sudo nsenter -t 3885 -n tcpdump -i eth0 udp port 53
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes
10:09:11.917900 IP 10.244.2.202.38697 &amp;gt; 10.96.0.10.domain: 11858+ A? google.com.default.svc.cluster.local. (54)
10:09:11.918847 IP 10.96.0.10.domain &amp;gt; 10.244.2.202.38697: 11858 NXDomain*- 0/1/0 (147)
10:09:11.922468 IP 10.244.2.202.38697 &amp;gt; 10.96.0.10.domain: 15573+ AAAA? google.com.default.svc.cluster.local. (54)
10:09:11.923001 IP 10.96.0.10.domain &amp;gt; 10.244.2.202.38697: 15573 NXDomain*- 0/1/0 (147)
10:09:11.923248 IP 10.244.2.202.43230 &amp;gt; 10.96.0.10.domain: 62042+ A? google.com.svc.cluster.local. (46)
10:09:11.923828 IP 10.96.0.10.domain &amp;gt; 10.244.2.202.43230: 62042 NXDomain*- 0/1/0 (139)
10:09:11.924005 IP 10.244.2.202.43230 &amp;gt; 10.96.0.10.domain: 54769+ AAAA? google.com.svc.cluster.local. (46)
10:09:11.924494 IP 10.96.0.10.domain &amp;gt; 10.244.2.202.43230: 54769 NXDomain*- 0/1/0 (139)
10:09:11.924704 IP 10.244.2.202.36252 &amp;gt; 10.96.0.10.domain: 20727+ A? google.com.cluster.local. (42)
10:09:11.925154 IP 10.96.0.10.domain &amp;gt; 10.244.2.202.36252: 20727 NXDomain*- 0/1/0 (135)
10:09:11.925316 IP 10.244.2.202.36252 &amp;gt; 10.96.0.10.domain: 13066+ AAAA? google.com.cluster.local. (42)
10:09:11.925758 IP 10.96.0.10.domain &amp;gt; 10.244.2.202.36252: 13066 NXDomain*- 0/1/0 (135)
10:09:11.925929 IP 10.244.2.202.35582 &amp;gt; 10.96.0.10.domain: 38821+ A? google.com.lan. (32)
10:09:11.927244 IP 10.244.2.202.35582 &amp;gt; 10.96.0.10.domain: 4430+ AAAA? google.com.lan. (32)
10:09:11.927416 IP 10.96.0.10.domain &amp;gt; 10.244.2.202.35582: 38821 NXDomain 0/0/0 (32)
10:09:11.928600 IP 10.96.0.10.domain &amp;gt; 10.244.2.202.35582: 4430 NXDomain 0/0/0 (32)
10:09:11.928839 IP 10.244.2.202.45290 &amp;gt; 10.96.0.10.domain: 45577+ A? google.com. (28)
10:09:11.929129 IP 10.244.2.202.45290 &amp;gt; 10.96.0.10.domain: 37586+ AAAA? google.com. (28)
10:09:11.929303 IP 10.96.0.10.domain &amp;gt; 10.244.2.202.45290: 45577 1/0/0 A 172.217.160.78 (54)
10:09:11.929541 IP 10.96.0.10.domain &amp;gt; 10.244.2.202.45290: 37586 1/0/0 AAAA 2404:6800:4008:801::200e (66)
&lt;/code>&lt;/pre>
&lt;p>可以看到，在最后（倒数第 3、4 行）正确解析之前，先是依次查询了下面几个域名，并且均查询了 IPv4 和 IPv6：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>google.com.default.svc.cluster.local.&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>google.com.svc.cluster.local.&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>google.com.cluster.local.&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>google.com.lan.&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>但是这 8 次查询都失败了，因为并不存在这样的域名。&lt;/p>
&lt;h3 id="kubernetes-的容器域名解析">kubernetes 的容器域名解析&lt;/h3>
&lt;p>要想解释上面的现象，需要先从 kubernetes 的容器域名解析开始讲。&lt;/p>
&lt;p>kubernetes 上运行的容器，其域名解析和一般的 Linux 一样，都是根据 &lt;code>/etc/resolv.conf&lt;/code> 文件。如下是容器中该文件的内容。&lt;/p>
&lt;pre>&lt;code>nameserver 10.96.0.10
search default.svc.cluster.local svc.cluster.local cluster.local lan
options ndots:5
&lt;/code>&lt;/pre>
&lt;p>nameserver 即为 kubernetes 集群中，kube-dns 的 svc IP，集群中容器的 nameserver 均设置为 kube-dns。&lt;/p>
&lt;pre>&lt;code>kubectl get svc -n kube-system
NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE
kube-dns ClusterIP 10.96.0.10 &amp;lt;none&amp;gt; 53/UDP,53/TCP,9153/TCP 236d
&lt;/code>&lt;/pre>
&lt;p>在容器中，自动添加了 &lt;code>search&lt;/code> 和 &lt;code>ndots&lt;/code>&lt;/p>
&lt;h3 id="kubernetes-为什么使用搜索域">kubernetes 为什么使用搜索域&lt;/h3>
&lt;p>为什么呢？先来看看代码。&lt;/p>
&lt;pre>&lt;code>var (
// The default dns opt strings.
defaultDNSOptions = []string{&amp;quot;ndots:5&amp;quot;}
)
func (c *Configurer) generateSearchesForDNSClusterFirst(hostSearch []string, pod *v1.Pod) []string {
if c.ClusterDomain == &amp;quot;&amp;quot; {
return hostSearch
}
nsSvcDomain := fmt.Sprintf(&amp;quot;%s.svc.%s&amp;quot;, pod.Namespace, c.ClusterDomain)
svcDomain := fmt.Sprintf(&amp;quot;svc.%s&amp;quot;, c.ClusterDomain)
clusterSearch := []string{nsSvcDomain, svcDomain, c.ClusterDomain}
return omitDuplicates(append(clusterSearch, hostSearch...))
}
func (c *Configurer) GetPodDNS(pod *v1.Pod) (*runtimeapi.DNSConfig, error) {
...
case podDNSCluster:
if len(c.clusterDNS) != 0 {
dnsConfig.Servers = []string{}
for _, ip := range c.clusterDNS {
dnsConfig.Servers = append(dnsConfig.Servers, ip.String())
}
dnsConfig.Searches = c.generateSearchesForDNSClusterFirst(dnsConfig.Searches, pod)
dnsConfig.Options = defaultDNSOptions
break
}
...
if utilfeature.DefaultFeatureGate.Enabled(features.CustomPodDNS) &amp;amp;&amp;amp; pod.Spec.DNSConfig != nil {
dnsConfig = appendDNSConfig(dnsConfig, pod.Spec.DNSConfig)
}
}
&lt;/code>&lt;/pre>
&lt;p>kubernetes 搜索域&lt;/p>
&lt;p>从函数&lt;code>generateSearchesForDNSClusterFirst&lt;/code>中可见，搜索域有三个：nsSvcDomain、svcDomain、clusterDomain。&lt;/p>
&lt;p>kubernetes 之所以要设置搜索域，目的是为了方便用户访问 service。&lt;/p>
&lt;p>例如，default namespace 下的 Pod a，如果访问同 namespace 下的 service b，直接使用 b 就可以访问了，而这个功能，就是通过 nsSvcDomain 搜索域&lt;code>default.svc.cluster.local&lt;/code>完成的。类似的，对于不同 namespace 下的 service，可以用 &lt;code>${service name}.${namespace name}&lt;/code> 来访问，是通过 svcDomain 搜索域完成的。clusterDomain 设计的目的，是为了方便同域中非 kubernetes 上的域名访问，例如设置 kubernetes 的 domain 为&lt;code>ieevee.com&lt;/code>，那么对于&lt;code>s.ieevee.com&lt;/code>域名，直接使用&lt;code>s&lt;/code>来访问就可以了，当然前提是当前 namespace 中没有一个叫做&lt;code>s&lt;/code>的 svc。（是的。搜索域是有优先级的）&lt;/p>
&lt;p>ndots 默认值&lt;/p>
&lt;p>&lt;code>ndots&lt;/code>默认值是写死的，5。&lt;/p>
&lt;p>为什么是 5 呢？&lt;/p>
&lt;p>thockin 在&lt;a href="https://github.com/kubernetes/kubernetes/issues/33554">issue 33554&lt;/a> 中做了解释，概况来说：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>kubernetes 需要支持同 namespace 下 service 快速访问，例如&lt;code>name&lt;/code>，因此 ndots&amp;gt;=1，对应搜索域&lt;code>$namespace.svc.$zone&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>kubernetes 需要支持跨 namespace 下 service 快速访问，例如&lt;code>kubernetes.default&lt;/code>，因此 ndots&amp;gt;=2，对应搜索域&lt;code>svc.$zone&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>kubernetes 需要支持同 namespace、跨 namespace 下，非 service 名称的快速访问，例如&lt;code>name.namespace.svc&lt;/code>，因此 ndots&amp;gt;=3，对应搜索域&lt;code>$zone&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>kubernetes 需要支持 statefulset 中的每个 pod 的访问，例如&lt;code>mysql-0.mysql.default.svc&lt;/code>，因此 ndots&amp;gt;=4&lt;/p>
&lt;/li>
&lt;li>
&lt;p>kubernetes 需要支持 SRV records（&lt;code>_$port._$proto.$service.$namespace.svc.$zone&lt;/code>），因此 ndots&amp;gt;=5&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>不过呢，如果你的使用情况并不像上面这么复杂，这个值可能并不适合你。&lt;/p>
&lt;p>比如说，我们只会用到同 namespace 下(形如 &lt;code>a&lt;/code>)、跨 namespace 下的 service 访问（形如 &lt;code>a.b&lt;/code>），因此，ndots 默认值为 2 更合适，但该值是写死在代码中的，不支持定制化，但可以通过下面的方法修改。&lt;/p>
&lt;p>ndots 修改&lt;/p>
&lt;p>ndots 是可以被修改的，可以通过&lt;code>pod.Spec.DNSConfig&lt;/code>改写。&lt;/p>
&lt;pre>&lt;code>apiVersion: v1
kind: Pod
metadata:
namespace: default
name: dns-example
spec:
containers:
- name: test
image: nginx
dnsConfig:
options:
- name: ndots
value: &amp;quot;2&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>通过上面的修改，我们再来看容器中的 DNS 报文，就只有下面几条了。&lt;/p>
&lt;pre>&lt;code>sudo nsenter -t 3885 -n tcpdump -i eth0 udp port 53
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes
10:30:35.917282 IP 10.244.2.202.39480 &amp;gt; 10.96.0.10.domain: 60870+ A? google.com. (28)
10:30:35.919194 IP 10.244.2.202.39480 &amp;gt; 10.96.0.10.domain: 9908+ AAAA? google.com. (28)
10:30:35.927047 IP 10.96.0.10.domain &amp;gt; 10.244.2.202.39480: 60870 1/0/0 A 216.58.200.238 (54)
10:30:35.929089 IP 10.96.0.10.domain &amp;gt; 10.244.2.202.39480: 9908 1/0/0 AAAA 2404:6800:4008:801::200e (66)
&lt;/code>&lt;/pre>
&lt;p>这对于应用的性能会有一定的提升，具体可以参见 Ref。&lt;/p>
&lt;h3 id="dns-cache">dns cache&lt;/h3>
&lt;p>我们观察一些 python 类型的容器应用，会发现它们会发出非常多的 DNS 请求，几乎每次涉及到域名都需要发出 DNS 请求；但是对于一些 Java 应用，会发现它们发出的 DNS 请求非常规律，一般是每 30 秒一个。&lt;/p>
&lt;p>这是因为，不同语言对于 dns cache 的处理不同了。&lt;/p>
&lt;p>目前来看，只有 Java 做了 dns cache。从 JDK 1.6 开始，Java 默认会对 DNS 做缓存，主要是以下两个配置：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>networkaddress.cache.ttl：域名解析成功后，DNS 缓存时间，默认是 30 秒&lt;/p>
&lt;/li>
&lt;li>
&lt;p>networkaddress.cache.negative.ttl：域名解析失败后，冷却时间，默认是 10 秒&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>其他语言可以支持，但都需要一定 hack。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>go&lt;/p>
&lt;/li>
&lt;li>
&lt;p>python&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="总结">总结&lt;/h3>
&lt;p>本文从一个多余的 DNS 查询现象开始，介绍了 FQDN 和 DNS 的搜索域，回答了 kubernetes 为什么需要搜索域这个问题，并且提出了一个解决多余 DNS 查询的方案，以及介绍了不同语言对于 dns cache 的处理情况。&lt;/p>
&lt;p>Ref：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Kubernetes pods /etc/resolv.conf ndots:5 option and why it may negatively affect your application performances&lt;/p>
&lt;/li>
&lt;li>
&lt;p>About fully qualified domain names (FQDNs)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Kubernetes pods /etc/resolv.conf ndots:5 option and why it may negatively affect your application performances&lt;/p>
&lt;/li>
&lt;/ul></description></item></channel></rss>