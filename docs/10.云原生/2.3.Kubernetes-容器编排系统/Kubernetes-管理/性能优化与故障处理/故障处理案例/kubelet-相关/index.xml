<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦的站点 – kubelet 相关</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/Kubernetes-%E7%AE%A1%E7%90%86/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B8%8E%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86%E6%A1%88%E4%BE%8B/kubelet-%E7%9B%B8%E5%85%B3/</link><description>Recent content in kubelet 相关 on 断念梦的站点</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/Kubernetes-%E7%AE%A1%E7%90%86/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B8%8E%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86%E6%A1%88%E4%BE%8B/kubelet-%E7%9B%B8%E5%85%B3/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Failed to get system container stats、failed to get cgroup stats</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/Kubernetes-%E7%AE%A1%E7%90%86/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B8%8E%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86%E6%A1%88%E4%BE%8B/kubelet-%E7%9B%B8%E5%85%B3/Failed-to-get-system-container-statsfailed-to-get-cgroup-stats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/Kubernetes-%E7%AE%A1%E7%90%86/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B8%8E%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86%E6%A1%88%E4%BE%8B/kubelet-%E7%9B%B8%E5%85%B3/Failed-to-get-system-container-statsfailed-to-get-cgroup-stats/</guid><description>
&lt;blockquote>
&lt;p>Failed to get system container stats for &amp;ldquo;/system.slice/docker.service&amp;rdquo;: failed to get cgroup stats for &amp;ldquo;/system.slice/docker.service&amp;rdquo;: failed to get cgroup stats for &amp;ldquo;/system.slice/docker.service&amp;rdquo;: failed to get container info for &amp;ldquo;/system.slice/docker.service&amp;rdquo;: unknown container &amp;ldquo;/system.slice/docker.service&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;p>参考：&lt;a href="https://stackoverflow.com/questions/46726216/kubelet-fails-to-get-cgroup-stats-for-docker-and-kubelet-services">Stackoverflow&lt;/a>&lt;/p>
&lt;p>这个问题大概就是因为 kubelet 在 docker 之前就启动了。&lt;/p></description></item><item><title>Docs: 容器重启原理-Kubelet hash计算</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/Kubernetes-%E7%AE%A1%E7%90%86/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B8%8E%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86%E6%A1%88%E4%BE%8B/kubelet-%E7%9B%B8%E5%85%B3/%E5%AE%B9%E5%99%A8%E9%87%8D%E5%90%AF%E5%8E%9F%E7%90%86-Kubelet-hash%E8%AE%A1%E7%AE%97/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.3.Kubernetes-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E7%B3%BB%E7%BB%9F/Kubernetes-%E7%AE%A1%E7%90%86/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B8%8E%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86%E6%A1%88%E4%BE%8B/kubelet-%E7%9B%B8%E5%85%B3/%E5%AE%B9%E5%99%A8%E9%87%8D%E5%90%AF%E5%8E%9F%E7%90%86-Kubelet-hash%E8%AE%A1%E7%AE%97/</guid><description>
&lt;p>原文链接：&lt;a href="https://mp.weixin.qq.com/s/8Txf6naaWaetTr2-sGyptg">https://mp.weixin.qq.com/s/8Txf6naaWaetTr2-sGyptg&lt;/a>&lt;/p>
&lt;p>在日常的开发工作中相信使用 Kubernetes 的同学们一定会偶尔收到容器重启的事件告警。由于应用层面的问题导致的容器重启相对容易排查，比如看容器的内存监控我们能确定是不是内存超过配置的 limit; 又或者看是不是应用有 panic 没有 recovery。
一个正常的工作日我们突然连续收到多条容器重启告警，查看报警还是来自不同的应用。按照一般的排查思路先去查看监控，内存没有异常，使用值一直在 limit 之下；然后去看日志也没有找到任何 panic 或者其他错误。仔细一看这几个告警的应用都是来自同一个集群，这个时候猜测大概率和集群有关系，但是这个集群我们还有其他很多应用并没有发生容器重启，所以猜测应该不是集群本身的问题，那是不是和机器有关系呢？然后我把重启过的实例所在的 node ip 都筛选出来发现重启的应用都是集中在某几台机器。在这些节点上我去查看了一下 &lt;code>kubelet&lt;/code>进程，发现 kubelet 在容器告警的时间段都重启了进程。在这种情况下基本就找到了容器重启的直接原因&amp;ndash;&lt;code>kubelet&lt;/code> 重启了。但是我们并没有更新实例，kubelet 重启怎么会把我们的容器重启呢？下面我们就介绍一下根本原因&amp;ndash;&lt;code>kubelet&lt;/code>计算容器的 hash 值。
我们知道在 Kubernetes 中的节点上运行着 &lt;code>kubelet&lt;/code> 进程，这个进程负责当前节点上所有 Pod 的生命周期。在这里我们从源码层面看看 kubelet 怎么实现容器的重启。&lt;/p>
&lt;h3 id="syncpod">SyncPod&lt;a class="td-heading-self-link" href="#syncpod" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>我们首先看 &lt;code>[https://github.com/kubernetes/kubernetes/blob/master/pkg/kubelet/kuberuntime/kuberuntime_manager.go](https://github.com/kubernetes/kubernetes/blob/master/pkg/kubelet/kuberuntime/kuberuntime_manager.go)&lt;/code> 中的 &lt;code>SyncPod&lt;/code> 方法, 这个方法就是保证运行中的 Pod 与我们期望的配置时刻保持一致。通过以下步骤完成&lt;/p>
&lt;ol>
&lt;li>根据从 API Server 获得的 Pod Spec 以及当前 Pod 的 Status 计算所需要执行的 Actions&lt;/li>
&lt;li>在需要情况下 Kill 掉当前 Pod 的 sandbox&lt;/li>
&lt;li>根据需要（如重启）kill 掉 Pod 内的 containers&lt;/li>
&lt;li>根据需要创建 Pod 的 sandbox&lt;/li>
&lt;li>启动下一个 init container&lt;/li>
&lt;li>启动 Pod 内的 containers&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">m&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">kubeGenericRuntimeManager&lt;/span>) &lt;span style="color:#a6e22e">SyncPod&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">v1&lt;/span>.&lt;span style="color:#a6e22e">Pod&lt;/span>, &lt;span style="color:#a6e22e">_&lt;/span> &lt;span style="color:#a6e22e">v1&lt;/span>.&lt;span style="color:#a6e22e">PodStatus&lt;/span>, &lt;span style="color:#a6e22e">podStatus&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">kubecontainer&lt;/span>.&lt;span style="color:#a6e22e">PodStatus&lt;/span>, &lt;span style="color:#a6e22e">pullSecrets&lt;/span> []&lt;span style="color:#a6e22e">v1&lt;/span>.&lt;span style="color:#a6e22e">Secret&lt;/span>, &lt;span style="color:#a6e22e">backOff&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">flowcontrol&lt;/span>.&lt;span style="color:#a6e22e">Backoff&lt;/span>) (&lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#a6e22e">kubecontainer&lt;/span>.&lt;span style="color:#a6e22e">PodSyncResult&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Step 1: Compute sandbox and container changes.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 计算 pod 的
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">podContainerChanges&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">computePodActions&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>, &lt;span style="color:#a6e22e">podStatus&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">glog&lt;/span>.&lt;span style="color:#a6e22e">V&lt;/span>(&lt;span style="color:#ae81ff">3&lt;/span>).&lt;span style="color:#a6e22e">Infof&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;computePodActions got %+v for pod %q&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">podContainerChanges&lt;/span>, &lt;span style="color:#a6e22e">format&lt;/span>.&lt;span style="color:#a6e22e">Pod&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">podContainerChanges&lt;/span>.&lt;span style="color:#a6e22e">CreateSandbox&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ref&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">ref&lt;/span>.&lt;span style="color:#a6e22e">GetReference&lt;/span>(&lt;span style="color:#a6e22e">legacyscheme&lt;/span>.&lt;span style="color:#a6e22e">Scheme&lt;/span>, &lt;span style="color:#a6e22e">pod&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">glog&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Couldn&amp;#39;t make a ref to pod %q: &amp;#39;%v&amp;#39;&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">format&lt;/span>.&lt;span style="color:#a6e22e">Pod&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>), &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">podContainerChanges&lt;/span>.&lt;span style="color:#a6e22e">SandboxID&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">recorder&lt;/span>.&lt;span style="color:#a6e22e">Eventf&lt;/span>(&lt;span style="color:#a6e22e">ref&lt;/span>, &lt;span style="color:#a6e22e">v1&lt;/span>.&lt;span style="color:#a6e22e">EventTypeNormal&lt;/span>, &lt;span style="color:#a6e22e">events&lt;/span>.&lt;span style="color:#a6e22e">SandboxChanged&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Pod sandbox changed, it will be killed and re-created.&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">glog&lt;/span>.&lt;span style="color:#a6e22e">V&lt;/span>(&lt;span style="color:#ae81ff">4&lt;/span>).&lt;span style="color:#a6e22e">Infof&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;SyncPod received new pod %q, will create a sandbox for it&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">format&lt;/span>.&lt;span style="color:#a6e22e">Pod&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Step 2: Kill the pod if the sandbox has changed.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// sandbox 有更新，需要 kill pod
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">podContainerChanges&lt;/span>.&lt;span style="color:#a6e22e">KillPod&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">killResult&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">killPodWithSyncResult&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>, &lt;span style="color:#a6e22e">kubecontainer&lt;/span>.&lt;span style="color:#a6e22e">ConvertPodStatusToRunningPod&lt;/span>(&lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">runtimeName&lt;/span>, &lt;span style="color:#a6e22e">podStatus&lt;/span>), &lt;span style="color:#66d9ef">nil&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">result&lt;/span>.&lt;span style="color:#a6e22e">AddPodSyncResult&lt;/span>(&lt;span style="color:#a6e22e">killResult&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">killResult&lt;/span>.&lt;span style="color:#a6e22e">Error&lt;/span>() &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">glog&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;killPodWithSyncResult failed: %v&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">killResult&lt;/span>.&lt;span style="color:#a6e22e">Error&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">podContainerChanges&lt;/span>.&lt;span style="color:#a6e22e">CreateSandbox&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">purgeInitContainers&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>, &lt;span style="color:#a6e22e">podStatus&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Step 3: kill any running containers in this pod which are not to keep.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// kill 掉 pod 中不需要保留的容器
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">containerID&lt;/span>, &lt;span style="color:#a6e22e">containerInfo&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">podContainerChanges&lt;/span>.&lt;span style="color:#a6e22e">ContainersToKill&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">glog&lt;/span>.&lt;span style="color:#a6e22e">V&lt;/span>(&lt;span style="color:#ae81ff">3&lt;/span>).&lt;span style="color:#a6e22e">Infof&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Killing unwanted container %q(id=%q) for pod %q&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">containerInfo&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span>, &lt;span style="color:#a6e22e">containerID&lt;/span>, &lt;span style="color:#a6e22e">format&lt;/span>.&lt;span style="color:#a6e22e">Pod&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">killContainerResult&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">kubecontainer&lt;/span>.&lt;span style="color:#a6e22e">NewSyncResult&lt;/span>(&lt;span style="color:#a6e22e">kubecontainer&lt;/span>.&lt;span style="color:#a6e22e">KillContainer&lt;/span>, &lt;span style="color:#a6e22e">containerInfo&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">result&lt;/span>.&lt;span style="color:#a6e22e">AddSyncResult&lt;/span>(&lt;span style="color:#a6e22e">killContainerResult&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">killContainer&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>, &lt;span style="color:#a6e22e">containerID&lt;/span>, &lt;span style="color:#a6e22e">containerInfo&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span>, &lt;span style="color:#a6e22e">containerInfo&lt;/span>.&lt;span style="color:#a6e22e">message&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">killContainerResult&lt;/span>.&lt;span style="color:#a6e22e">Fail&lt;/span>(&lt;span style="color:#a6e22e">kubecontainer&lt;/span>.&lt;span style="color:#a6e22e">ErrKillContainer&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>.&lt;span style="color:#a6e22e">Error&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">glog&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;killContainer %q(id=%q) for pod %q failed: %v&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">containerInfo&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span>, &lt;span style="color:#a6e22e">containerID&lt;/span>, &lt;span style="color:#a6e22e">format&lt;/span>.&lt;span style="color:#a6e22e">Pod&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>), &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Step 4: Create a sandbox for the pod if necessary.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 按需创建 sandbox
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">podSandboxID&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">podContainerChanges&lt;/span>.&lt;span style="color:#a6e22e">SandboxID&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">podContainerChanges&lt;/span>.&lt;span style="color:#a6e22e">CreateSandbox&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">msg&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">glog&lt;/span>.&lt;span style="color:#a6e22e">V&lt;/span>(&lt;span style="color:#ae81ff">4&lt;/span>).&lt;span style="color:#a6e22e">Infof&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Creating sandbox for pod %q&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">format&lt;/span>.&lt;span style="color:#a6e22e">Pod&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">createSandboxResult&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">kubecontainer&lt;/span>.&lt;span style="color:#a6e22e">NewSyncResult&lt;/span>(&lt;span style="color:#a6e22e">kubecontainer&lt;/span>.&lt;span style="color:#a6e22e">CreatePodSandbox&lt;/span>, &lt;span style="color:#a6e22e">format&lt;/span>.&lt;span style="color:#a6e22e">Pod&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">result&lt;/span>.&lt;span style="color:#a6e22e">AddSyncResult&lt;/span>(&lt;span style="color:#a6e22e">createSandboxResult&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">podSandboxID&lt;/span>, &lt;span style="color:#a6e22e">msg&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">createPodSandbox&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>, &lt;span style="color:#a6e22e">podContainerChanges&lt;/span>.&lt;span style="color:#a6e22e">Attempt&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Step 5: start the init container.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 启动 init 容器
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">container&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">podContainerChanges&lt;/span>.&lt;span style="color:#a6e22e">NextInitContainerToStart&lt;/span>; &lt;span style="color:#a6e22e">container&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Start the next init container.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">startContainerResult&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">kubecontainer&lt;/span>.&lt;span style="color:#a6e22e">NewSyncResult&lt;/span>(&lt;span style="color:#a6e22e">kubecontainer&lt;/span>.&lt;span style="color:#a6e22e">StartContainer&lt;/span>, &lt;span style="color:#a6e22e">container&lt;/span>.&lt;span style="color:#a6e22e">Name&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">result&lt;/span>.&lt;span style="color:#a6e22e">AddSyncResult&lt;/span>(&lt;span style="color:#a6e22e">startContainerResult&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">msg&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">startContainer&lt;/span>(&lt;span style="color:#a6e22e">podSandboxID&lt;/span>, &lt;span style="color:#a6e22e">podSandboxConfig&lt;/span>, &lt;span style="color:#a6e22e">container&lt;/span>, &lt;span style="color:#a6e22e">pod&lt;/span>, &lt;span style="color:#a6e22e">podStatus&lt;/span>, &lt;span style="color:#a6e22e">pullSecrets&lt;/span>, &lt;span style="color:#a6e22e">podIP&lt;/span>, &lt;span style="color:#a6e22e">kubecontainer&lt;/span>.&lt;span style="color:#a6e22e">ContainerTypeInit&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">startContainerResult&lt;/span>.&lt;span style="color:#a6e22e">Fail&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>, &lt;span style="color:#a6e22e">msg&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">utilruntime&lt;/span>.&lt;span style="color:#a6e22e">HandleError&lt;/span>(&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;init container start failed: %v: %s&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>, &lt;span style="color:#a6e22e">msg&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Successfully started the container; clear the entry in the failure
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">glog&lt;/span>.&lt;span style="color:#a6e22e">V&lt;/span>(&lt;span style="color:#ae81ff">4&lt;/span>).&lt;span style="color:#a6e22e">Infof&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Completed init container %q for pod %q&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">container&lt;/span>.&lt;span style="color:#a6e22e">Name&lt;/span>, &lt;span style="color:#a6e22e">format&lt;/span>.&lt;span style="color:#a6e22e">Pod&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Step 6: start containers in podContainerChanges.ContainersToStart.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 根据 step1 结果启动容器
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">idx&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">podContainerChanges&lt;/span>.&lt;span style="color:#a6e22e">ContainersToStart&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">container&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">pod&lt;/span>.&lt;span style="color:#a6e22e">Spec&lt;/span>.&lt;span style="color:#a6e22e">Containers&lt;/span>[&lt;span style="color:#a6e22e">idx&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">startContainerResult&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">kubecontainer&lt;/span>.&lt;span style="color:#a6e22e">NewSyncResult&lt;/span>(&lt;span style="color:#a6e22e">kubecontainer&lt;/span>.&lt;span style="color:#a6e22e">StartContainer&lt;/span>, &lt;span style="color:#a6e22e">container&lt;/span>.&lt;span style="color:#a6e22e">Name&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">result&lt;/span>.&lt;span style="color:#a6e22e">AddSyncResult&lt;/span>(&lt;span style="color:#a6e22e">startContainerResult&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">glog&lt;/span>.&lt;span style="color:#a6e22e">V&lt;/span>(&lt;span style="color:#ae81ff">4&lt;/span>).&lt;span style="color:#a6e22e">Infof&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Creating container %+v in pod %v&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">container&lt;/span>, &lt;span style="color:#a6e22e">format&lt;/span>.&lt;span style="color:#a6e22e">Pod&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">msg&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">startContainer&lt;/span>(&lt;span style="color:#a6e22e">podSandboxID&lt;/span>, &lt;span style="color:#a6e22e">podSandboxConfig&lt;/span>, &lt;span style="color:#a6e22e">container&lt;/span>, &lt;span style="color:#a6e22e">pod&lt;/span>, &lt;span style="color:#a6e22e">podStatus&lt;/span>, &lt;span style="color:#a6e22e">pullSecrets&lt;/span>, &lt;span style="color:#a6e22e">podIP&lt;/span>, &lt;span style="color:#a6e22e">kubecontainer&lt;/span>.&lt;span style="color:#a6e22e">ContainerTypeRegular&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="computepodactions">computePodActions&lt;a class="td-heading-self-link" href="#computepodactions" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>在上面 &lt;code>SyncPod 方法中我们可以看到 step 1 的 computePodActions 是决定容器是否需要重启的关键调用&lt;/code>，我们看看这个方法具体的逻辑&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// computePodActions checks whether the pod spec has changed and returns the changes if true.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">m&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">kubeGenericRuntimeManager&lt;/span>) &lt;span style="color:#a6e22e">computePodActions&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">v1&lt;/span>.&lt;span style="color:#a6e22e">Pod&lt;/span>, &lt;span style="color:#a6e22e">podStatus&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">kubecontainer&lt;/span>.&lt;span style="color:#a6e22e">PodStatus&lt;/span>) &lt;span style="color:#a6e22e">podActions&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">glog&lt;/span>.&lt;span style="color:#a6e22e">V&lt;/span>(&lt;span style="color:#ae81ff">5&lt;/span>).&lt;span style="color:#a6e22e">Infof&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Syncing Pod %q: %+v&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">format&lt;/span>.&lt;span style="color:#a6e22e">Pod&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>), &lt;span style="color:#a6e22e">pod&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">createPodSandbox&lt;/span>, &lt;span style="color:#a6e22e">attempt&lt;/span>, &lt;span style="color:#a6e22e">sandboxID&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">podSandboxChanged&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>, &lt;span style="color:#a6e22e">podStatus&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">changes&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">podActions&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">KillPod&lt;/span>: &lt;span style="color:#a6e22e">createPodSandbox&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">CreateSandbox&lt;/span>: &lt;span style="color:#a6e22e">createPodSandbox&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">SandboxID&lt;/span>: &lt;span style="color:#a6e22e">sandboxID&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Attempt&lt;/span>: &lt;span style="color:#a6e22e">attempt&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ContainersToStart&lt;/span>: []&lt;span style="color:#66d9ef">int&lt;/span>{},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ContainersToKill&lt;/span>: make(&lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#a6e22e">kubecontainer&lt;/span>.&lt;span style="color:#a6e22e">ContainerID&lt;/span>]&lt;span style="color:#a6e22e">containerToKillInfo&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 这里我们省略其他内容，直接看判断容器是否需要重启的核心逻辑
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Number of running containers to keep.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">keepCount&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// check the status of containers.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">idx&lt;/span>, &lt;span style="color:#a6e22e">container&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">pod&lt;/span>.&lt;span style="color:#a6e22e">Spec&lt;/span>.&lt;span style="color:#a6e22e">Containers&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">containerStatus&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">podStatus&lt;/span>.&lt;span style="color:#a6e22e">FindContainerStatusByName&lt;/span>(&lt;span style="color:#a6e22e">container&lt;/span>.&lt;span style="color:#a6e22e">Name&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Call internal container post-stop lifecycle hook for any non-running container so that any
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// allocated cpus are released immediately. If the container is restarted, cpus will be re-allocated
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// to it.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">containerStatus&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#a6e22e">containerStatus&lt;/span>.&lt;span style="color:#a6e22e">State&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#a6e22e">kubecontainer&lt;/span>.&lt;span style="color:#a6e22e">ContainerStateRunning&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">internalLifecycle&lt;/span>.&lt;span style="color:#a6e22e">PostStopContainer&lt;/span>(&lt;span style="color:#a6e22e">containerStatus&lt;/span>.&lt;span style="color:#a6e22e">ID&lt;/span>.&lt;span style="color:#a6e22e">ID&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">glog&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;internal container post-stop lifecycle hook failed for container %v in pod %v with error %v&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">container&lt;/span>.&lt;span style="color:#a6e22e">Name&lt;/span>, &lt;span style="color:#a6e22e">pod&lt;/span>.&lt;span style="color:#a6e22e">Name&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// If container does not exist, or is not running, check whether we
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// need to restart it.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">containerStatus&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#a6e22e">containerStatus&lt;/span>.&lt;span style="color:#a6e22e">State&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#a6e22e">kubecontainer&lt;/span>.&lt;span style="color:#a6e22e">ContainerStateRunning&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">kubecontainer&lt;/span>.&lt;span style="color:#a6e22e">ShouldContainerBeRestarted&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">container&lt;/span>, &lt;span style="color:#a6e22e">pod&lt;/span>, &lt;span style="color:#a6e22e">podStatus&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">message&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Sprintf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Container %+v is dead, but RestartPolicy says that we should restart it.&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">container&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">glog&lt;/span>.&lt;span style="color:#a6e22e">V&lt;/span>(&lt;span style="color:#ae81ff">3&lt;/span>).&lt;span style="color:#a6e22e">Infof&lt;/span>(&lt;span style="color:#a6e22e">message&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">changes&lt;/span>.&lt;span style="color:#a6e22e">ContainersToStart&lt;/span> = append(&lt;span style="color:#a6e22e">changes&lt;/span>.&lt;span style="color:#a6e22e">ContainersToStart&lt;/span>, &lt;span style="color:#a6e22e">idx&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// The container is running, but kill the container if any of the following condition is met.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">reason&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">restart&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">shouldRestartOnFailure&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 计算容器的期望的 hash 和 当前 hash, 来判断是否需要重启容器
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">expectedHash&lt;/span>, &lt;span style="color:#a6e22e">actualHash&lt;/span>, &lt;span style="color:#a6e22e">changed&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">containerChanged&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">container&lt;/span>, &lt;span style="color:#a6e22e">containerStatus&lt;/span>); &lt;span style="color:#a6e22e">changed&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">reason&lt;/span> = &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Sprintf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Container spec hash changed (%d vs %d).&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">actualHash&lt;/span>, &lt;span style="color:#a6e22e">expectedHash&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Restart regardless of the restart policy because the container
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// spec changed.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">restart&lt;/span> = &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">liveness&lt;/span>, &lt;span style="color:#a6e22e">found&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">livenessManager&lt;/span>.&lt;span style="color:#a6e22e">Get&lt;/span>(&lt;span style="color:#a6e22e">containerStatus&lt;/span>.&lt;span style="color:#a6e22e">ID&lt;/span>); &lt;span style="color:#a6e22e">found&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#a6e22e">liveness&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">proberesults&lt;/span>.&lt;span style="color:#a6e22e">Failure&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// If the container failed the liveness probe, we should kill it.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">reason&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;Container failed liveness probe.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Keep the container.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">keepCount&lt;/span> &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// We need to kill the container, but if we also want to restart the
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// container afterwards, make the intent clear in the message. Also do
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// not kill the entire pod since we expect container to be running eventually.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">message&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">reason&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 可以看到如果需要重启容器，则把容器 id 放到待启动 slice 里准备重启
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">restart&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">message&lt;/span> = &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Sprintf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;%s. Container will be killed and recreated.&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">message&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">changes&lt;/span>.&lt;span style="color:#a6e22e">ContainersToStart&lt;/span> = append(&lt;span style="color:#a6e22e">changes&lt;/span>.&lt;span style="color:#a6e22e">ContainersToStart&lt;/span>, &lt;span style="color:#a6e22e">idx&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 容器信息更新到待 kill 的 map 里
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">changes&lt;/span>.&lt;span style="color:#a6e22e">ContainersToKill&lt;/span>[&lt;span style="color:#a6e22e">containerStatus&lt;/span>.&lt;span style="color:#a6e22e">ID&lt;/span>] = &lt;span style="color:#a6e22e">containerToKillInfo&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#a6e22e">containerStatus&lt;/span>.&lt;span style="color:#a6e22e">Name&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">container&lt;/span>: &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">pod&lt;/span>.&lt;span style="color:#a6e22e">Spec&lt;/span>.&lt;span style="color:#a6e22e">Containers&lt;/span>[&lt;span style="color:#a6e22e">idx&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">message&lt;/span>: &lt;span style="color:#a6e22e">message&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">glog&lt;/span>.&lt;span style="color:#a6e22e">V&lt;/span>(&lt;span style="color:#ae81ff">2&lt;/span>).&lt;span style="color:#a6e22e">Infof&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Container %q (%q) of pod %s: %s&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">container&lt;/span>.&lt;span style="color:#a6e22e">Name&lt;/span>, &lt;span style="color:#a6e22e">containerStatus&lt;/span>.&lt;span style="color:#a6e22e">ID&lt;/span>, &lt;span style="color:#a6e22e">format&lt;/span>.&lt;span style="color:#a6e22e">Pod&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>), &lt;span style="color:#a6e22e">message&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">keepCount&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> len(&lt;span style="color:#a6e22e">changes&lt;/span>.&lt;span style="color:#a6e22e">ContainersToStart&lt;/span>) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">changes&lt;/span>.&lt;span style="color:#a6e22e">KillPod&lt;/span> = &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">changes&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="containerchanged">containerChanged&lt;a class="td-heading-self-link" href="#containerchanged" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>在上个方法里我们看到 &lt;code>containerChanged&lt;/code>的调用决定了容器是否需要重启，接下来我们看看如果计算容器的 hash 值&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">containerChanged&lt;/span>(&lt;span style="color:#a6e22e">container&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">v1&lt;/span>.&lt;span style="color:#a6e22e">Container&lt;/span>, &lt;span style="color:#a6e22e">containerStatus&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">kubecontainer&lt;/span>.&lt;span style="color:#a6e22e">ContainerStatus&lt;/span>) (&lt;span style="color:#66d9ef">uint64&lt;/span>, &lt;span style="color:#66d9ef">uint64&lt;/span>, &lt;span style="color:#66d9ef">bool&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">expectedHash&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">kubecontainer&lt;/span>.&lt;span style="color:#a6e22e">HashContainer&lt;/span>(&lt;span style="color:#a6e22e">container&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">expectedHash&lt;/span>, &lt;span style="color:#a6e22e">containerStatus&lt;/span>.&lt;span style="color:#a6e22e">Hash&lt;/span>, &lt;span style="color:#a6e22e">containerStatus&lt;/span>.&lt;span style="color:#a6e22e">Hash&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#a6e22e">expectedHash&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">在文件&lt;/span>&lt;span style="color:#e6db74">`kubernetes/pkg/kubelet/container/helpers.go`&lt;/span> &lt;span style="color:#a6e22e">中提供了计算&lt;/span> &lt;span style="color:#a6e22e">hash&lt;/span> &lt;span style="color:#a6e22e">的方法&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// HashContainer returns the hash of the container. It is used to compare
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// the running container with its desired spec.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">HashContainer&lt;/span>(&lt;span style="color:#a6e22e">container&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">v1&lt;/span>.&lt;span style="color:#a6e22e">Container&lt;/span>) &lt;span style="color:#66d9ef">uint64&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">hash&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">fnv&lt;/span>.&lt;span style="color:#a6e22e">New32a&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">hashutil&lt;/span>.&lt;span style="color:#a6e22e">DeepHashObject&lt;/span>(&lt;span style="color:#a6e22e">hash&lt;/span>, &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">container&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> uint64(&lt;span style="color:#a6e22e">hash&lt;/span>.&lt;span style="color:#a6e22e">Sum32&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过上述的代码的我们可以清楚的看到只要 &lt;code>v1.Container&lt;/code> 这个 struct 里任何一个字段发生改变都会导致期望的容器 hash 值更新。
下面这种图清晰总结了 &lt;code>Kubelet&lt;/code> 重启容器的过程，详相信对照下图和上面的代码大家应该能很好的了解 Kubernetes 的容器重启过程。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/rplacz/1622426176146-0bb50ab9-4e53-4c2c-9469-fe5e494ee1ce.png" alt="">
原文链接：&lt;strong>&lt;a href="https://lxkaka.wang/kubelet-hash/">https://lxkaka.wang/kubelet-hash/&lt;/a>&lt;/strong>&lt;/p></description></item></channel></rss>