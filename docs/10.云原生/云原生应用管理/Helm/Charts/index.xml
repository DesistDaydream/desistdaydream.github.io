<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – Charts</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86/Helm/Charts/</link><description>Recent content in Charts on 断念梦</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86/Helm/Charts/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Chart Hooks</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86/Helm/Charts/Chart-Hooks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86/Helm/Charts/Chart-Hooks/</guid><description>
&lt;h1 id="chart-hooks-概述">Chart Hooks 概述&lt;/h1>
&lt;p>参考：&lt;a href="https://helm.sh/docs/topics/charts_hooks/">&lt;strong>官方文档&lt;/strong>&lt;/a>&lt;/p>
&lt;p>Helm 提供了一种** Hook(钩子) **机制可以在一个 release 的生命周期内进行干预，比如：&lt;/p>
&lt;ol>
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>安装任何资源之前，提前先安装 ConfigMap 或者 Secret&lt;/p>
&lt;ol start="2">
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>在安装一个新的 Chart 执行，执行一个 Job 以备份数据库，然后在升级后执行第二个 Job 以还原数据。&lt;/p>
&lt;ol start="3">
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>在删除一个 Release 之前，运行一个 Job，以便在删除服务之前优雅得停止服务。&lt;/p>
&lt;ol start="4">
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>等等等&lt;/p>
&lt;p>说白了：就是让我们在操作 Chart 中的资源时，可以运行一个 Job 或某些资源(比如删除 operator 之前，运行一个 job 先删除所有 CRD 资源)。有点类似与就类似 &lt;a href="https://www.teambition.com/project/5f90e312755d8a00446050eb/app/5eba5fba6a92214d420a3219/workspaces/5f90e312c800160016ea22fb/docs/5fae78274cc5830001b9bbd6?scroll-to-block=5fae7842875a1b0329e90945">&lt;strong>crds 目录&lt;/strong>&lt;/a> 的作用一样，但并不完全一样。&lt;/p>
&lt;h2 id="hooks-种类">Hooks 种类&lt;/h2>
&lt;ol>
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>pre-install # 在渲染模板之后、创建资源之前，执行安装&lt;/p>
&lt;ol start="2">
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>post-install # 在 Chart 中所有资源创建之后(并不用等待 running)，执行安装&lt;/p>
&lt;ol start="3">
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>pre-delete # 在从 Kubernetes 删除任何资源之前，执行安装&lt;/p>
&lt;ol start="4">
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>post-delete # 删除所有 releases 资源后，执行安装&lt;/p>
&lt;ol start="5">
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>pre-upgrade # 在渲染模板之后，在任何资源更新之前，执行安装&lt;/p>
&lt;ol start="6">
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>post-upgrade # 在所有资源都升级后，执行安装&lt;/p>
&lt;ol start="7">
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>pre-rollback # Executes on a rollback request after templates are rendered, but before any resources are rolled back&lt;/p>
&lt;ol start="8">
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>post-rollback # Executes on a rollback request after all resources have been modified&lt;/p>
&lt;ol start="9">
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>test Executes when the Helm test subcommand is invoked ( view test docs)&lt;/p>
&lt;h1 id="release-的生命周期">Release 的生命周期&lt;/h1>
&lt;ol>
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>运行 helm install myapp&lt;/p>
&lt;ol start="2">
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>The Helm library install API is called&lt;/p>
&lt;ol start="3">
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>经过一些验证后，开始渲染 myapp 的模板&lt;/p>
&lt;ol start="4">
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>渲染后生成的资源加载到 Kubernetes 中&lt;/p>
&lt;ol start="5">
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>library 将 release 的数据返回给客户端&lt;/p>
&lt;ol start="6">
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>客户端退出&lt;/p>
&lt;p>等待钩子准备好意味着什么？ 这取决于挂钩中声明的资源。 如果资源是 Job 或 Pod 类型，Helm 将等待直到成功运行完成为止。 如果挂钩失败，释放将失败。 这是一项阻止操作，因此 Helm 客户端将在 Job 运行时暂停。&lt;/p>
&lt;h1 id="使用-hooks">使用 Hooks&lt;/h1>
&lt;p>Helm 会读取 manifest 文件中的 &lt;code>.annotations.&amp;quot;helm.sh/hook&amp;quot;&lt;/code>、&lt;code>annotations.&amp;quot;helm.sh/hook-weight&amp;quot;&lt;/code>、&lt;code>annotations.&amp;quot;helm.sh/hook-delete-policy&amp;quot;&lt;/code>这三个字段，来为具有这三个字段的资源执行 Hooks 功能。&lt;/p></description></item><item><title>Docs: Charts</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86/Helm/Charts/Charts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86/Helm/Charts/Charts/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://helm.sh/docs/topics/charts/">官方文档，主题-charts&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Helm 管理的安装包称为 &lt;strong>Charts(图表)&lt;/strong>。就好比 Cento 的安装包是 rpm、Windows 的安装包是 exe、Ubuntu 的安装包是 deb。&lt;/p>
&lt;p>Charts 是描述 Kubernete 资源的一组 manifests 集合，被有规则得放在特定的目录树中。这些 Charts 可以打包成 &lt;strong>archives&lt;/strong>。&lt;/p>
&lt;p>Chart 也有&lt;strong>海图&lt;/strong>的概念，就好像 Helm 代表舵柄一样，当人们手握 Helm 在大海中航行时，可以查看 Charts，来观察地图，以便决定我们如何航行。&lt;/p>
&lt;h1 id="chart-file-structure图表文件结构">Chart File Structure(图表文件结构)&lt;/h1>
&lt;blockquote>
&lt;p>官方文档：&lt;a href="https://helm.sh/docs/topics/charts/">&lt;strong>https://helm.sh/docs/topics/charts/&lt;/strong>&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>一个 Chart 保存在一个目录中，目录名就是 Chart 的名称(没有版本信息)。比如 myapp 这个 chart 就放在 ./mapp/ 这个目录中&lt;/p>
&lt;p>在这个目录中，一般由以下内容组成：&lt;/p>
&lt;blockquote>
&lt;p>带有 OPTIONAL 表示不是必须的，可选的内容就算不存在，该 chart 也可正常使用&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;strong>Chart.yaml&lt;/strong> # 用来做 Chart 的初始化的文件，记录该 Chart 的名称、版本、维护者等元数据信息&lt;/li>
&lt;li>&lt;strong>LICENSE&lt;/strong> # (OPTIONAL)一个 chart 许可证的纯文本文件。&lt;/li>
&lt;li>&lt;strong>README.md&lt;/strong> # (OPTIONAL)一个易于阅读的自述文件。&lt;/li>
&lt;li>&lt;strong>values.yaml&lt;/strong> # 用于给 templates 目录下的各个 manifests 模板设定默认值。values.yaml 文件的说明详见 &lt;a href="https://www.teambition.com/project/5f90e312755d8a00446050eb/app/5eba5fba6a92214d420a3219/workspaces/5f90e312c800160016ea22fb/docs/5f9a633937398300016bed65?scroll-to-block=5f9a6348246f30cbbdf35c5a">&lt;strong>Helm Template 章节&lt;/strong>&lt;/a>&lt;/li>
&lt;li>&lt;strong>values.yaml.json&lt;/strong> # (OPTIONAL)用于在 values.yaml 文件上强加结构的 JSON 模式&lt;/li>
&lt;li>&lt;strong>charts/&lt;/strong> # (OPTIONAL)包含该 Chart 所依赖的其他 Chart (这种被依赖的其他 Chart 称为 &lt;a href="https://thoughts.teambition.com/workspaces/603b04c9f83f2a00428f7321/docs/5fae78274cc5830001b9bbd6?scroll-to-block=6040f2c3a4b1ca00462d7837">&lt;strong>Subcharts 子图表&lt;/strong>&lt;/a>)。&lt;/li>
&lt;li>&lt;strong>crds/&lt;/strong> # (OPTIONAL)CRD 文件。该目录下的资源将会首先创建，其他资源等待 crds 资源 running 后，再创建。&lt;/li>
&lt;li>&lt;strong>templates/&lt;/strong> # 模板目录，与 values.yaml 相结合将生成有效的 kubernetes manifest 文件。
&lt;ul>
&lt;li>该目录下包含支撑 chart 的 manifests 文件，是各种 yaml 文件，只不过这些 yaml 文件是以模板形式存在的。&lt;/li>
&lt;li>&lt;a href="https://www.teambition.com/project/5f90e312755d8a00446050eb/app/5eba5fba6a92214d420a3219/workspaces/5f90e312c800160016ea22fb/docs/5f9a633937398300016bed65">&lt;strong>模板详解见此处&lt;/strong>&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>templates/NOTES.txt&lt;/strong> # (OPTIONAL)生成 release 后给用户的提示信息&lt;/li>
&lt;li>&lt;strong>ci/&lt;/strong> # 存放自定义的 values.yaml。这是非官方推荐的目录，只不过大家都这么用。&lt;/li>
&lt;/ul>
&lt;p>当使用 helm create mychart 命令创建一个本地 chart 目录是，helm 会默认自动生成下列信息：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>root@master helm&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># helm create mychart&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Creating mychart
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>root@master helm&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># tree mychart/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mychart/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── charts
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── Chart.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── templates
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── deployment.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── _helpers.tpl
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── hpa.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── ingress.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── NOTES.txt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── serviceaccount.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── service.yaml.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── tests
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── test-connection.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── values.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="chartyaml-文件">Chart.yaml 文件&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;a href="https://helm.sh/docs/topics/charts/#the-chartyaml-file">&lt;strong>官方文档&lt;/strong>&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#75715e"># (必须的)Chart 的 API 版本，有 v1、v2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#75715e"># (必须的)Chart 的名字&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">version&lt;/span>: &lt;span style="color:#75715e"># (必须的)Chart 的版本号，必须符合 SemVer2 标准。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kubeVersion&lt;/span>: &lt;span style="color:#75715e"># (可选的)Chart 兼容的 Kubernetes 版本号，必须符合 SemVer 标准。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">description&lt;/span>: &lt;span style="color:#75715e"># (可选的)Chart 的简要描述&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">(可选的)The type of the chart&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">keywords&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">(可选的)A list of keywords about this project&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">home&lt;/span>: &lt;span style="color:#ae81ff">(可选的)The URL of this projects home page&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">sources&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">(可选的)A list of URLs to source code for this project&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">dependencies&lt;/span>: &lt;span style="color:#75715e"># (可选的)Chart 所依赖的其他 Charts 列表。也就是 SubCharts&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#75715e"># SubChart 的名字&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">version&lt;/span>: &lt;span style="color:#75715e"># SubChart 的版本号&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">repository&lt;/span>: &lt;span style="color:#75715e"># The repository URL (&amp;#34;https://example.com/charts&amp;#34;) or alias (&amp;#34;@repo-name&amp;#34;)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">condition&lt;/span>: &lt;span style="color:#75715e"># (可选的)根据条件控制这个 Chart 是否与上层 Chart 一起被安装。这个条件可以在 values.yaml 中定义(e.g. subchart1.enabled )&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">tags&lt;/span>: &lt;span style="color:#75715e"># (可选的)该字段可以用来将 SubCharts 分组，以便统一启用或禁用&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">XXXXX&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">enabled&lt;/span>: &lt;span style="color:#75715e"># (可选的)控制这个 Chart 是否与上层 Chart 一起被安装&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">import-values&lt;/span>: &lt;span style="color:#75715e"># (可选的)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">ImportValues holds the mapping of source values to parent key to be imported. Each item can be a string or pair of child/parent sublist items.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">alias&lt;/span>: &lt;span style="color:#ae81ff">(可选的) Alias to be used for the chart. Useful when you have to add the same chart multiple times&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">maintainers&lt;/span>: &lt;span style="color:#75715e"># (可选的)Chart 维护者的信息。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">The maintainers name (required for each maintainer)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">email&lt;/span>: &lt;span style="color:#ae81ff">The maintainers email (optional for each maintainer)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">url&lt;/span>: &lt;span style="color:#ae81ff">A URL for the maintainer (optional for each maintainer)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">icon&lt;/span>: &lt;span style="color:#75715e"># (可选的)Chart 的 Logo，值必须是 URL。需要 helm 自动从 URL 中获取图片&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">appVersion&lt;/span>: &lt;span style="color:#75715e"># (可选的)Chart 中包含的应用程序的版本。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">deprecated&lt;/span>: &lt;span style="color:#75715e"># (可选的)标识该图表是否已弃用。可用的值是 true 和 false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">annotations&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">example&lt;/span>: &lt;span style="color:#ae81ff">(可选的)A list of annotations keyed by name.&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="各种-version-字段">各种 version 字段&lt;/h2>
&lt;h3 id="apiversion">apiVersion&lt;/h3>
&lt;p>这个其实就像 kubernetes 中的 apiVersion 概念，用来定义如何解析 Charts 文件的。不同的版本，Charts 中包含的内容不同，Chart.yaml 文件中的字段也不同。&lt;/p>
&lt;h3 id="version">version&lt;/h3>
&lt;p>这个就是 Chart 本身的版本。只不过这个版本号的格式必须符合 &lt;a href="https://semver.org/">&lt;strong>SemVer2&lt;/strong>&lt;/a>。&lt;/p>
&lt;p>SemVer2 格式大体是这样的：&lt;code>X.Y.Z&lt;/code>&lt;/p>
&lt;h3 id="kubeversion">kubeVersion&lt;/h3>
&lt;p>待整理&lt;/p>
&lt;h3 id="appversion">appVersion&lt;/h3>
&lt;p>用来定义 Chart 中包含的应用程序的版本，如果有多个应用程序，就自己选择用哪个，版本号格式随意。&lt;/p>
&lt;h2 id="dependencies-字段">dependencies 字段&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://helm.sh/zh/docs/topics/charts/#chart-dependency">官方文档，主题-charts-chart 依赖&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Helm 中，Chart 可以依赖其他任意数量的 Chart，这些可以被依赖的 Chart 可以通过 Chart.yaml 文件中的 dependencies 字段来控制。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>name: STRING&lt;/strong> # SubChart 的名字&lt;/li>
&lt;li>&lt;strong>version: STRING&lt;/strong> # SubChart 的版本号&lt;/li>
&lt;li>&lt;strong>repository: STRING&lt;/strong> # The repository URL (&amp;ldquo;&lt;a href="https://example.com/charts%22">https://example.com/charts&amp;quot;&lt;/a>) or alias (&amp;quot;@repo-name&amp;rdquo;)&lt;/li>
&lt;li>&lt;strong>condition: STRING&lt;/strong> # (可选的)根据条件控制这个 Chart 是否与上层 Chart 一起被安装。这个条件可以在 values.yaml 中定义(e.g. subchart1.enabled)
&lt;ul>
&lt;li>该字段非常重要与常见，假如我们定义 condition：&lt;code>condition: abc.enabled&lt;/code>&lt;/li>
&lt;li>然后我们可以在父 Chart 的 values.yaml 中定义字段 &lt;code>abc.enabled&lt;/code>，若 &lt;code>abc.enabled&lt;/code> 为 true 则该 Chart 将会与 父 Chart 一起被安装。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>tags: []STRING&lt;/strong> # (可选的)该字段可以用来将 SubCharts 分组，以便统一启用或禁用&lt;/li>
&lt;li>&lt;strong>enabled: true|false&lt;/strong> # (可选的)控制这个 Chart 是否与上层 Chart 一起被安装&lt;/li>
&lt;li>&lt;strong>import-values: []&lt;/strong> # (可选的)ImportValues holds the mapping of source values to parent key to be imported. Each item can be a string or pair of child/parent sublist items.&lt;/li>
&lt;li>&lt;strong>alias: STRING&lt;/strong> # (可选的)为该 Chart 起一个别名。若一个 Chart 需要被多次依赖时非常有用&lt;/li>
&lt;/ul>
&lt;h3 id="为什么需要-chart-dependencies">为什么需要 Chart Dependencies&lt;/h3>
&lt;blockquote>
&lt;p>首先需要明确一点，官方用 Dependencies 这个词不太准确，用 &lt;strong>SubCharts(子图表)&lt;/strong> 这个词更准确，因为依赖不是绝对的。&lt;/p>
&lt;/blockquote>
&lt;p>比如我想安装三个 Chart，分别为 A、B、C，如果要逐一安装是非常麻烦也不便于管理的，所以，我们需要把这些 Charts 整合起来，而整合的前提是，必须要存在一个 Chart。所以，我们可以这么做&lt;/p>
&lt;ul>
&lt;li>&lt;code>helm create mychart&lt;/code> 首先创建一个 Chart&lt;/li>
&lt;li>&lt;code>cd mychart/charts&lt;/code> 进入刚创建的 Chart 目录，逐一创建其他 Chart。&lt;code>for i in A B C; do helm create subchart${i}; done&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>此时该 Chart 目录结构如下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>root@lichenhao:~/testDir# tree -L &lt;span style="color:#ae81ff">2&lt;/span> mychart/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mychart/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── charts
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── subchartA
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── subchartB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   └── subchartC
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── Chart.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── templates
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── deployment.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── _helpers.tpl
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── hpa.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── ingress.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── NOTES.txt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── serviceaccount.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── service.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   └── tests
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── values.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这些当我安装 mychart 时，subchartA、subchartB、subchartC 这三个 Charts 也就一起被安装了。&lt;/p>
&lt;p>这时，我又有新的需求了，由于某些原因，我不想 subchartC 跟随 mychart 一起安装，而是根据某些规则来启动。所以，这些 Charts 就可以根据 Chart.yaml 文件中的 &lt;code>dependencies.enabled&lt;/code> 或 &lt;code>dependencies.condition&lt;/code> 字段来控制。&lt;/p>
&lt;p>由于这种不是强依赖的关系，所以用 &lt;strong>SubCharts(子图表)&lt;/strong> 这个词描述这个功能更为准确，而 mychart 这种就称为 &lt;strong>ParentChart(父图表)&lt;/strong>。而跟随父图表一起安装的行为称为 &lt;strong>Enabling(启用图表)&lt;/strong>，反之则称为 &lt;strong>Disabling(禁用图表)&lt;/strong>。&lt;/p>
&lt;h3 id="subcharts-的启用时机">SubCharts 的启用时机&lt;/h3>
&lt;p>SubCharts 与 Charts 关于 values.yaml 文件的使用还有一些注意事项，详见 &lt;a href="docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86/Helm/Helm%20Template/Subcharts%20%E4%B8%8E%20Global%20Values.md">Subcharts 与 Global Values&lt;/a>&lt;/p>
&lt;p>Chart.yaml 文件中的 &lt;code>dependencies.condition&lt;/code> 与 &lt;code>dependencies.tags&lt;/code> 字段可以控制子图表安装的时机。&lt;/p>
&lt;ul>
&lt;li>condition # 该字段包含一个或多个 YAML 路径（用逗号分隔）。 如果这个路径在上层 values 中已存在并解析为布尔值，chart 会基于布尔值启用或禁用 chart。 只会使用列表中找到的第一个有效路径，如果路径为未找到则条件无效。&lt;/li>
&lt;li>tags - 该字段是与 chart 关联的 YAML 格式的标签列表。在顶层 value 中，通过指定 tag 和布尔值，可以启用或禁用所有的带 tag 的 chart。&lt;/li>
&lt;/ul>
&lt;p>假如现在有这么一个 Chart.yaml 文件：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">v2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">mychart&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">description&lt;/span>: &lt;span style="color:#ae81ff">A Helm chart for Kubernetes&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">application&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">version&lt;/span>: &lt;span style="color:#ae81ff">0.1.0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">appVersion&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;1.16.0&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">dependencies&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">subchart1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">repository&lt;/span>: &lt;span style="color:#ae81ff">http://localhost:10191&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">version&lt;/span>: &lt;span style="color:#ae81ff">0.1.0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">condition&lt;/span>: &lt;span style="color:#ae81ff">subchart1.enabled, global.subchart1.enabled&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">tags&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">front-end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">subchart1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">subchart2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">repository&lt;/span>: &lt;span style="color:#ae81ff">http://localhost:10191&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">version&lt;/span>: &lt;span style="color:#ae81ff">0.1.0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">condition&lt;/span>: &lt;span style="color:#ae81ff">subchart2.enabled,global.subchart2.enabled&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">tags&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">back-end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">subchart2&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>下面是 values.yaml 文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">subchart1&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">enabled&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">tags&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">front-end&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">back-end&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在上面的例子中，所有带 &lt;code>front-end&lt;/code>tag 的 chart 都会被禁用，但只要上层的 value 中 &lt;code>subchart1.enabled&lt;/code> 路径被设置为 &amp;rsquo;true&amp;rsquo;，该条件会覆盖 &lt;code>front-end&lt;/code>标签且 &lt;code>subchart1&lt;/code> 会被启用。&lt;/p>
&lt;p>一旦 &lt;code>subchart2&lt;/code>使用了&lt;code>back-end&lt;/code>标签并被设置为了 &lt;code>true&lt;/code>，&lt;code>subchart2&lt;/code>就会被启用。 也要注意尽管&lt;code>subchart2&lt;/code> 指定了一个条件字段， 但是上层 value 没有相应的路径和 value，因此这个条件不会生效。&lt;/p>
&lt;h1 id="crds-目录">crds 目录&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>官方文档：&lt;a href="https://helm.sh/docs/topics/charts/#limitations-on-crds">&lt;strong>https://helm.sh/docs/topics/charts/#limitations-on-crds&lt;/strong>&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>crds 目录下的资源将会在其他资源安装之前，进行安装。并且无法在卸载 release 时，卸载 crds 目录下的资源。&lt;/p>
&lt;p>&lt;strong>crds 目录下的文件不能是模板&lt;/strong>，必须是普通的 YAML 文件。&lt;/p>
&lt;p>当 Helm 安装一个新 Chart 时，首先会安装 crds 目录下的资源，直到 API 服务器可以正常提供 crd，然后再启动模板引擎开始渲染模板，并安装 Chart 中的其余资源。&lt;/p>
&lt;p>由于 CRD 资源属于全局的，不受 namespace 限制，所以 Helm 在管理 CRD 时非常谨慎&lt;/p>
&lt;ul>
&lt;li>更新 Chart 时，无论如何都不会更新 crds 目录下的资源。只有当 crds 目录下的资源不存在时， Helm 才会创建它们&lt;/li>
&lt;li>卸载 Chart 时，不会删除 crds 目录下的资源。也就是说，只要第一次安装 Chart 时，创建了 crds 目录下的资源，则后续都不会&lt;/li>
&lt;li>也就是说，crds 目录下的资源永远不会被删除&lt;/li>
&lt;/ul>
&lt;p>删除 CRD 会自动删除集群中所有命名空间中 CRD 的所有内容。Helm 鼓励想要升级或删除 CRD 的维护人员手动操作，并格外注意&lt;/p>
&lt;h1 id="ci-目录">ci 目录&lt;/h1>
&lt;p>这是一个非官方的目录，我们在使用 Charts 时，经常会需要一些自定义的 values.yaml 文件，大家通常都将这些自定义的值文件放在 Charts 根目录下的 ci 目录中。&lt;/p></description></item></channel></rss>