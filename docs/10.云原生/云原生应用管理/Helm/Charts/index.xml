<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Charts on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86/Helm/Charts/</link><description>Recent content in Charts on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86/Helm/Charts/index.xml" rel="self" type="application/rss+xml"/><item><title>Chart Hooks</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86/Helm/Charts/Chart-Hooks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86/Helm/Charts/Chart-Hooks/</guid><description>Chart Hooks 概述 参考：官方文档
Helm 提供了一种** Hook(钩子) **机制可以在一个 release 的生命周期内进行干预，比如：
安装任何资源之前，提前先安装 ConfigMap 或者 Secret
在安装一个新的 Chart 执行，执行一个 Job 以备份数据库，然后在升级后执行第二个 Job 以还原数据。
在删除一个 Release 之前，运行一个 Job，以便在删除服务之前优雅得停止服务。
等等等
说白了：就是让我们在操作 Chart 中的资源时，可以运行一个 Job 或某些资源(比如删除 operator 之前，运行一个 job 先删除所有 CRD 资源)。有点类似与就类似 crds 目录 的作用一样，但并不完全一样。
Hooks 种类 pre-install # 在渲染模板之后、创建资源之前，执行安装
post-install # 在 Chart 中所有资源创建之后(并不用等待 running)，执行安装
pre-delete # 在从 Kubernetes 删除任何资源之前，执行安装
post-delete # 删除所有 releases 资源后，执行安装
pre-upgrade # 在渲染模板之后，在任何资源更新之前，执行安装
post-upgrade # 在所有资源都升级后，执行安装
pre-rollback # Executes on a rollback request after templates are rendered, but before any resources are rolled back</description></item><item><title>Charts</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86/Helm/Charts/Charts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86/Helm/Charts/Charts/</guid><description>概述 参考：
官方文档，主题-charts Helm 管理的安装包称为 Charts(图表)。就好比 Cento 的安装包是 rpm、Windows 的安装包是 exe、Ubuntu 的安装包是 deb。
Charts 是描述 Kubernete 资源的一组 manifests 集合，被有规则得放在特定的目录树中。这些 Charts 可以打包成 archives。
Chart 也有海图的概念，就好像 Helm 代表舵柄一样，当人们手握 Helm 在大海中航行时，可以查看 Charts，来观察地图，以便决定我们如何航行。
Chart File Structure(图表文件结构) 官方文档：https://helm.sh/docs/topics/charts/
一个 Chart 保存在一个目录中，目录名就是 Chart 的名称(没有版本信息)。比如 myapp 这个 chart 就放在 ./mapp/ 这个目录中
在这个目录中，一般由以下内容组成：
带有 OPTIONAL 表示不是必须的，可选的内容就算不存在，该 chart 也可正常使用
Chart.yaml # 用来做 Chart 的初始化的文件，记录该 Chart 的名称、版本、维护者等元数据信息 LICENSE # (OPTIONAL)一个 chart 许可证的纯文本文件。 README.md # (OPTIONAL)一个易于阅读的自述文件。 values.yaml # 用于给 templates 目录下的各个 manifests 模板设定默认值。values.</description></item></channel></rss>