<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – Kubeapps</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86/Kubeapps/</link><description>Recent content in Kubeapps on 断念梦</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86/Kubeapps/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Kubeapps</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86/Kubeapps/Kubeapps/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86/Kubeapps/Kubeapps/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kubeapps.com/">官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/kubeapps/kubeapps">GitHub&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Kubeapps 是一个基于 Web 的 UI，用于在 Kubernetes 集群中部署和管理应用程序。&lt;/p>
&lt;p>Kubeapps 可以实现下述功能：&lt;/p>
&lt;ul>
&lt;li>从 Chart 仓库浏览和部署 Helm&lt;/li>
&lt;li>检查、升级、删除集群中已经安装的基于 Helm 的应用程序。
&lt;ul>
&lt;li>可以看到，Kubeapps 与原生 Helm 结合比较紧密，这一点是 Rancher 做不到的。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>添加自定义和自由 Chart 仓库&lt;/li>
&lt;li>浏览和部署 Kubernetes Operator&lt;/li>
&lt;li>使用 OAuth2/OIDC 提供程序对 Kubeapps 进行安全身份验证&lt;/li>
&lt;li>基于 Kubernetes RBAC 的安全授权&lt;/li>
&lt;/ul>
&lt;h2 id="kubeapps-组件">Kubeapps 组件&lt;/h2>
&lt;p>Kubeapps 抽象了一个 &lt;strong>Asset(资产)&lt;/strong> 的概念，Asset 是多种事物的集合，比如一个 Chart 仓库就属于一个资产。&lt;/p>
&lt;p>一个完整的 Kubeapps 服务，通常包含如下组件：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Apprepository-controller&lt;/strong> # 应用仓库管理&lt;/li>
&lt;li>&lt;strong>Asset-syncer&lt;/strong> # 扫描 Helm 仓库，并在 PostgreSQL 中填充 Chart 元数据的工具，然后 Assetsvc 组件将会提供这些元数据&lt;/li>
&lt;li>&lt;strong>Assetsvc&lt;/strong> # 暴露 API，用于访问 PostgreSQL 中的 Chart 仓库中的 Chart 元数据&lt;/li>
&lt;li>&lt;strong>Dashboard&lt;/strong> # Web UI&lt;/li>
&lt;li>&lt;strong>Kubeops&lt;/strong> # 暴露 API 来访问 Helm API 和 Kubernetes 资源&lt;/li>
&lt;li>&lt;strong>PostgreSQL&lt;/strong> # 存储 Chart 仓库的信息，其他组件都是无状态的&lt;/li>
&lt;/ul>
&lt;h1 id="kubeapps-权限管理">Kubeapps 权限管理&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/kubeapps/kubeapps/blob/master/docs/user/access-control.md">GitHub,docs-user-access-control.md&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Kubeapps 会创建如下几个 ClusterRole 对象，以便进行权限管理：&lt;/p>
&lt;ul>
&lt;li>kubeapps:controller:kubeops-ns-discovery-kubeapps # 查看名称空间&lt;/li>
&lt;li>kubeapps:controller:kubeops-operators-kubeapps # 对 packagemanifests/icon 自定义资源的查看权限&lt;/li>
&lt;li>APP 仓库管理权限
&lt;ul>
&lt;li>kubeapps:kubeapps:apprepositories-read # 查看仓库&lt;/li>
&lt;li>kubeapps:kubeapps:apprepositories-refresh # 更新仓库&lt;/li>
&lt;li>kubeapps:kubeapps:apprepositories-write # 增删改查仓库，即对 apprepositories.kubeapps.com 这个自定义资源的全部权限&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="权限管理示例">权限管理示例&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl create -n kubeapps rolebinding lch-kubeapps-repositories-write &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>--clusterrole&lt;span style="color:#f92672">=&lt;/span>kubeapps:kubeapps:apprepositories-write &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>--serviceaccount user-sa-manage:lch
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 kubeapps 名称空间中创建一个 RoleBinding，将 &lt;code>kubeapps:kubeapps:apprepositories-write&lt;/code> 这个角色与 user-sa-manage 名称空间下的 lch 这个 ServiceAccount 绑定。这样，使用 lch 的 token 登录时，就可以在全局名称空间(kubeapps)中操作镜像仓库了。&lt;/p>
&lt;blockquote>
&lt;p>2.3.2 版本有个小 BUG，从 其他名称空间切换的 kubeapps 名称空间后，会提示没权限，需要刷新一下才行。&lt;/p>
&lt;/blockquote></description></item><item><title>Docs: kubeapps API</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86/Kubeapps/kubeapps-API/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86/Kubeapps/kubeapps-API/</guid><description>
&lt;p>参考：&lt;a href="https://github.com/kubeapps/kubeapps/blob/master/dashboard/public/openapi.yaml">官方 OpenAPI 3.0&lt;/a>&lt;/p>
&lt;p>云原生应用管理
API.json(118.2 KB)
- 0%&lt;/p>
&lt;h2 id="header">Header&lt;/h2>
&lt;p>请求头必须包含的信息：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>key&lt;/td>
&lt;td>value&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Authorization&lt;/td>
&lt;td>Bearer ${TOKEN}&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>${TOKEN} 通过如下命令获取,若已经创建 RBAC，则直接执行最后一条获取 TOKEN 即可。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>kubectl create serviceaccount kubeapps-operator&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>kubectl create clusterrolebinding kubeapps-operator &amp;ndash;clusterrole=cluster-admin &amp;ndash;serviceaccount=default:kubeapps-operator&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>kubectl get secret $(kubectl get serviceaccounts kubeapps-operator -ojsonpath=&amp;rsquo;{.secrets[0].name}&amp;rsquo;) -ojsonpath=&amp;rsquo;{.data.token}&amp;rsquo; | base64 -d &amp;amp;&amp;amp; echo&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="release-相关">Release 相关&lt;/h1>
&lt;p>通过 kubeops 获取 Release 信息。基础 URL：&lt;a href="http://IP:PORT/v1">http://IP:PORT/v1&lt;/a>&lt;/p>
&lt;h3 id="get-clustersclusterreleases-列出所有-releases">GET /clusters/{cluster}/releases 列出所有 Releases&lt;/h3>
&lt;h2 id="限定名称空间的-api">限定名称空间的 API&lt;/h2>
&lt;h3 id="get-clustersclusternamespacesnamespacereleases-列出所有-releases">GET /clusters/{cluster}/namespaces/{namespace}/releases 列出所有 Releases&lt;/h3>
&lt;h3 id="n">n&lt;/h3>
&lt;h3 id="get-clustersclusternamespacesnamespacereleasesreleasename-获取-release-的信息">GET /clusters/{cluster}/namespaces/{namespace}/releases/{releaseName} 获取 Release 的信息&lt;/h3>
&lt;p>包含 chart 的信息&lt;/p>
&lt;h3 id="put-clustersclusternamespacesnamespacereleasesreleasename-更新-release">PUT /clusters/{cluster}/namespaces/{namespace}/releases/{releaseName} 更新 Release&lt;/h3>
&lt;h3 id="delete-clustersclusternamespacesnamespacereleasesreleasename-删除-release">DELETE /clusters/{cluster}/namespaces/{namespace}/releases/{releaseName} 删除 Release&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Query String Parameters:&lt;/p>
&lt;/li>
&lt;li>
&lt;p>purge: true # 如果不填，那么仅仅删除了元数据，只是无法通过 helm ls -A 命令列出，但是该 release 对应的 secret 还存在，只不过&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="repoistory-相关">Repoistory 相关&lt;/h1>
&lt;p>通过 kubeops 获取 Repoistory 信息。基础 URL：&lt;a href="http://IP:PORT/backend/v1">http://IP:PORT/backend/v1&lt;/a>&lt;/p>
&lt;h3 id="post-clustersclustercan-i-不知道干啥用的">POST /clusters/{cluster}/can-i 不知道干啥用的&lt;/h3>
&lt;h3 id="get-clustersclusternamespaces-获取所有名称空间信息">GET /clusters/{cluster}/namespaces 获取所有名称空间信息&lt;/h3>
&lt;h3 id="get-clustersclusterapprepositories-列出所有-repo-的信息">GET /clusters/{cluster}/apprepositories 列出所有 repo 的信息&lt;/h3>
&lt;h2 id="限定名称空间下的-api">限定名称空间下的 API&lt;/h2>
&lt;h3 id="get-clustersclusternamespacesnamespaceapprepositories-列出所有-repo-的信息">GET /clusters/{cluster}/namespaces/{namespace}/apprepositories 列出所有 repo 的信息&lt;/h3>
&lt;h3 id="post-clustersclusternamespacesnamespaceapprepositories-创建-repo">POST /clusters/{cluster}/namespaces/{namespace}/apprepositories 创建 Repo&lt;/h3>
&lt;h3 id="post-clustersclusternamespacesnamespaceapprepositoriesvalidate-验证-repo">POST /clusters/{cluster}/namespaces/{namespace}/apprepositories/validate 验证 Repo&lt;/h3>
&lt;h3 id="put-clustersclusternamespacesnamespaceapprepositoriesname-更新-repo">PUT /clusters/{cluster}/namespaces/{namespace}/apprepositories/{name} 更新 Repo&lt;/h3>
&lt;h3 id="post-clustersclusternamespacesnamespaceapprepositoriesnamerefresh-刷新-repo">POST /clusters/{cluster}/namespaces/{namespace}/apprepositories/{name}/refresh 刷新 repo&lt;/h3>
&lt;h3 id="delete-clustersclusternamespacesnamespaceapprepositoriesname-删除-repo">DELETE /clusters/{cluster}/namespaces/{namespace}/apprepositories/{name} 删除 Repo&lt;/h3>
&lt;h3 id="get-clustersclusternamespacesnamespaceoperatornamelogo-获取-operator-的-logo">GET /clusters/{cluster}/namespaces/{namespace}/operator/{name}/logo 获取 operator 的 logo&lt;/h3>
&lt;h1 id="charts-相关">Charts 相关&lt;/h1>
&lt;p>通过 assetsvc 获取 charts 信息，基础 URL：&lt;a href="http://IP:PORT/v1">http://IP:PORT/v1&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>必须指定 namespace，&lt;/p>
&lt;/blockquote>
&lt;h3 id="get-clustersclusternamespacesnamespacecharts-列出所有-charts">GET /clusters/{cluster}/namespaces/{namespace}/charts&amp;quot; 列出所有 charts&lt;/h3>
&lt;p>Queries(&amp;ldquo;name&amp;rdquo;, &amp;ldquo;{chartName}&amp;rdquo;, &amp;ldquo;version&amp;rdquo;, &amp;ldquo;{version}&amp;rdquo;, &amp;ldquo;appversion&amp;rdquo;, &amp;ldquo;{appversion}&amp;rdquo;).Handler(WithParams(listChartsWithFilters))&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Query String Parameters:&lt;/p>
&lt;/li>
&lt;li>
&lt;p>page=xx&amp;amp;size=yy&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>apiv1.Methods(&amp;ldquo;GET&amp;rdquo;).Path(&amp;quot;/clusters/{cluster}/namespaces/{namespace}/charts/categories&amp;quot;).Handler(WithParams(getChartCategories))&lt;/p>
&lt;h2 id="限定-repo-的-api">限定 Repo 的 API&lt;/h2>
&lt;h3 id="get-clustersclusternamespacesnamespacechartsrepo-列出所有-charts">GET /clusters/{cluster}/namespaces/{namespace}/charts/{repo} 列出所有 charts&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Query String Parameters:&lt;/p>
&lt;/li>
&lt;li>
&lt;p>page=xx&amp;amp;size=yy&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>apiv1.Methods(&amp;ldquo;GET&amp;rdquo;).Path(&amp;quot;/clusters/{cluster}/namespaces/{namespace}/charts/{repo}/categories&amp;quot;).Handler(WithParams(getChartCategories))&lt;/p>
&lt;h3 id="get-clustersclusternamespacesnamespacechartsrepochartname--获取-chart-的信息">GET /clusters/{cluster}/namespaces/{namespace}/charts/{repo}/{chartName} # 获取 Chart 的信息&lt;/h3>
&lt;h3 id="get-clustersclusternamespacesnamespacechartsrepochartnameversions-列出-chart-的所有版本">GET /clusters/{cluster}/namespaces/{namespace}/charts/{repo}/{chartName}/versions 列出 Chart 的所有版本&lt;/h3>
&lt;h3 id="get-clustersclusternamespacesnamespacechartsrepochartnameversionsversion--获取-chart-指定版本的信息">GET /clusters/{cluster}/namespaces/{namespace}/charts/{repo}/{chartName}/versions/{version} # 获取 Chart 指定版本的信息&lt;/h3>
&lt;h3 id="get-clustersclusternamespacesnamespaceassetsrepochartnamelogo-获取-chart-的-log">GET /clusters/{cluster}/namespaces/{namespace}/assets/{repo}/{chartName}/logo 获取 Chart 的 log&lt;/h3>
&lt;h3 id="get-clustersclusternamespacesnamespaceassetsrepochartnameversionsversionreadmemd-获取-chart-指定版本的-readme">GET /clusters/{cluster}/namespaces/{namespace}/assets/{repo}/{chartName}/versions/{version}/README.md 获取 Chart 指定版本的 README&lt;/h3>
&lt;h3 id="get-clustersclusternamespacesnamespaceassetsrepochartnameversionsversionvaluesyaml-获取-chart-指定版本的-valuesyaml-文件">GET /clusters/{cluster}/namespaces/{namespace}/assets/{repo}/{chartName}/versions/{version}/values.yaml 获取 Chart 指定版本的 values.yaml 文件&lt;/h3>
&lt;p>apiv1.Methods(&amp;ldquo;GET&amp;rdquo;).Path(&amp;quot;/clusters/{cluster}/namespaces/{namespace}/assets/{repo}/{chartName}/versions/{version}/values.schema.json&amp;quot;).Handler(WithParams(getChartVersionSchema))&lt;/p></description></item></channel></rss>