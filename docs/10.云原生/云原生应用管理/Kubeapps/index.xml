<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦的站点 – Kubeapps</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86/Kubeapps/</link><description>Recent content in Kubeapps on 断念梦的站点</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86/Kubeapps/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Kubeapps</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86/Kubeapps/Kubeapps/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86/Kubeapps/Kubeapps/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kubeapps.com/">官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/kubeapps/kubeapps">GitHub 项目，kubeapps/kubeapps&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Kubeapps 是一个基于 Web 的 UI，用于在 Kubernetes 集群中部署和管理应用程序。&lt;/p>
&lt;p>Kubeapps 可以实现下述功能：&lt;/p>
&lt;ul>
&lt;li>从 Chart 仓库浏览和部署 Helm&lt;/li>
&lt;li>检查、升级、删除集群中已经安装的基于 Helm 的应用程序。
&lt;ul>
&lt;li>可以看到，Kubeapps 与原生 Helm 结合比较紧密，这一点是 Rancher 做不到的。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>添加自定义和自由 Chart 仓库&lt;/li>
&lt;li>浏览和部署 Kubernetes Operator&lt;/li>
&lt;li>使用 OAuth2/OIDC 提供程序对 Kubeapps 进行安全身份验证&lt;/li>
&lt;li>基于 Kubernetes RBAC 的安全授权&lt;/li>
&lt;/ul>
&lt;h2 id="kubeapps-组件">Kubeapps 组件&lt;a class="td-heading-self-link" href="#kubeapps-%e7%bb%84%e4%bb%b6" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Kubeapps 抽象了一个 &lt;strong>Asset(资产)&lt;/strong> 的概念，Asset 是多种事物的集合，比如一个 Chart 仓库就属于一个资产。&lt;/p>
&lt;p>一个完整的 Kubeapps 服务，通常包含如下组件：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Apprepository-controller&lt;/strong> # 应用仓库管理&lt;/li>
&lt;li>&lt;strong>Asset-syncer&lt;/strong> # 扫描 Helm 仓库，并在 PostgreSQL 中填充 Chart 元数据的工具，然后 Assetsvc 组件将会提供这些元数据&lt;/li>
&lt;li>&lt;strong>Assetsvc&lt;/strong> # 暴露 API，用于访问 PostgreSQL 中的 Chart 仓库中的 Chart 元数据&lt;/li>
&lt;li>&lt;strong>Dashboard&lt;/strong> # Web UI&lt;/li>
&lt;li>&lt;strong>Kubeops&lt;/strong> # 暴露 API 来访问 Helm API 和 Kubernetes 资源&lt;/li>
&lt;li>&lt;strong>PostgreSQL&lt;/strong> # 存储 Chart 仓库的信息，其他组件都是无状态的&lt;/li>
&lt;/ul>
&lt;h1 id="kubeapps-权限管理">Kubeapps 权限管理&lt;a class="td-heading-self-link" href="#kubeapps-%e6%9d%83%e9%99%90%e7%ae%a1%e7%90%86" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/kubeapps/kubeapps/blob/master/docs/user/access-control.md">GitHub,docs-user-access-control.md&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Kubeapps 会创建如下几个 ClusterRole 对象，以便进行权限管理：&lt;/p>
&lt;ul>
&lt;li>kubeapps:controller:kubeops-ns-discovery-kubeapps # 查看名称空间&lt;/li>
&lt;li>kubeapps:controller:kubeops-operators-kubeapps # 对 packagemanifests/icon 自定义资源的查看权限&lt;/li>
&lt;li>APP 仓库管理权限
&lt;ul>
&lt;li>kubeapps:kubeapps:apprepositories-read # 查看仓库&lt;/li>
&lt;li>kubeapps:kubeapps:apprepositories-refresh # 更新仓库&lt;/li>
&lt;li>kubeapps:kubeapps:apprepositories-write # 增删改查仓库，即对 apprepositories.kubeapps.com 这个自定义资源的全部权限&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="权限管理示例">权限管理示例&lt;a class="td-heading-self-link" href="#%e6%9d%83%e9%99%90%e7%ae%a1%e7%90%86%e7%a4%ba%e4%be%8b" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl create -n kubeapps rolebinding lch-kubeapps-repositories-write &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>--clusterrole&lt;span style="color:#f92672">=&lt;/span>kubeapps:kubeapps:apprepositories-write &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>--serviceaccount user-sa-manage:lch
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 kubeapps 名称空间中创建一个 RoleBinding，将 &lt;code>kubeapps:kubeapps:apprepositories-write&lt;/code> 这个角色与 user-sa-manage 名称空间下的 lch 这个 ServiceAccount 绑定。这样，使用 lch 的 token 登录时，就可以在全局名称空间(kubeapps)中操作镜像仓库了。&lt;/p>
&lt;blockquote>
&lt;p>2.3.2 版本有个小 BUG，从 其他名称空间切换的 kubeapps 名称空间后，会提示没权限，需要刷新一下才行。&lt;/p>
&lt;/blockquote>
&lt;h1 id="kubeapps-api">kubeapps API&lt;a class="td-heading-self-link" href="#kubeapps-api" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;p>-&lt;a href="https://github.com/kubeapps/kubeapps/blob/master/dashboard/public/openapi.yaml">官方 OpenAPI 3.0&lt;/a>&lt;/p>
&lt;/blockquote></description></item></channel></rss>