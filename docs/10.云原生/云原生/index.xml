<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>云原生 on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/%E4%BA%91%E5%8E%9F%E7%94%9F/</link><description>Recent content in 云原生 on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/%E4%BA%91%E5%8E%9F%E7%94%9F/index.xml" rel="self" type="application/rss+xml"/><item><title>CNCF</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/%E4%BA%91%E5%8E%9F%E7%94%9F/CNCF/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/%E4%BA%91%E5%8E%9F%E7%94%9F/CNCF/</guid><description>概述 参考:
CNCF 官网 云原生全景图 jimmysong Cloud Native Computing Foundation(云原生计算基金会，简称 CNCF)。成立于 2015 年 7 月 21 日，属于 Linux 基金会旗下的一个非盈利性组织。当年 Google 内部将内部容器编排项目 Borg 开源，为了项目更好的发展，Google 与 Linux 基金会一些创办了 CNCF。同时，Google 把 Borg 用 Go 语言重写，更名为 Kubernetes 并捐赠给 CNCF、
CNCF 项目治理 参考:
官方文档 jimmysong CNCF 根据“鸿沟理论”将其托管的项目分成三个成熟阶段，并设置了项目晋级到更高阶段的标准。
“鸿沟理论”是由 Geoffrey A. Moore 提出的高科技产品的市场营销理论。新技术要想跨越鸿沟，必须能够实现一些跨越式的发展，拥有某一些以前不可能实现的功能，具有某种内在价值并能够赢得非技术人员的青睐。
Graduated(已毕业) Incbating(孵化中) Sandbox(沙盒) CNCF Ambassador(CNCF 大使) 参考：
CNCF 官网 可以通过以下方式成为 CNCF Ambassador：
成为 CNCF 会员或对成为某个 CNCF 的项目的贡献者 以 contributor、blogger、演讲者等身份参与 CNCF 社区项目 在社区中演讲或撰写博客 主持云原生社区 meetup</description></item><item><title>云原生</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/%E4%BA%91%E5%8E%9F%E7%94%9F/%E4%BA%91%E5%8E%9F%E7%94%9F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/%E4%BA%91%E5%8E%9F%E7%94%9F/%E4%BA%91%E5%8E%9F%E7%94%9F/</guid><description>概述 参考：
B 站-马哥，云原生底层逻辑和学习方向 公众号-刘超的通俗云计算，不是技术也能看懂云原生 Cloud Native(云原生)
我们来看看这些大牛们都如何定义云原生的：
2010 年，WSO2 技术总监 PaulFremantle 首次提出 Cloud Native，他一直想用一个词表达一个架构，这种架构能够描述应用程序和中间件能够在云环境中有良好的运行状态。云原生有以下特性 分布式、弹性、多租户，子服务，按需计量和计费，增量部署和测试。2013 年，Netflix 云架构师，Adrian Cockcroft 介绍了 Netflix 在 AWS 上基于 Cloud Native 的成功应用，Netflix 在 AWS 上有上万个实例。 2015 年，来自 Pivotal 的 Matt Stine，他的电子书《迁移到云原生应用架构》，他认为单体架构在向云原生架构的演进过程中，需要流程、文化、技术共同变革，该书把 Cloud Native 描述为一组最佳实践，具体包含如下内容：十二因子，微服务，敏捷基础设施，基于 API 的协作，反脆弱性。 2017 年，Matt Stine 在接受媒体采访时又改了口风，将云原生架构归纳为模块化、可观察、可部署、可测试、可替换、可处理 6 特质；而 Pivotal 最新官网对云原生概括为 4 个要点：DevOps+持续交付+微服务+容器。 2015 年云原生计算基金会（CNCF）成立，最初把云原生定义为包括：容器化封装+自动化管理+面向微服务。 CNCF 于 2018 年通过了对云原生重新定义的提案，V1.0 的定义如下： 云原生技术有利于各组织在公有云、私有云和混合云等新型动态环境中，构建和运行可弹性扩展的应用。云原生的代表技术包括容器、服务网格、微服务、不可变基础设施和声明式 API。 这些技术能够构建容错性好、易于管理和便于观察的松耦合系统。结合可靠的自动化手段，云原生技术使工程师能够轻松地对系统作出频繁和可预测的重大变更。 微服务与无服务 Knative 参考：
GitHub 组织，knative 官网</description></item><item><title>云原生应用的12要素</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/%E4%BA%91%E5%8E%9F%E7%94%9F/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%BA%94%E7%94%A8%E7%9A%8412%E8%A6%81%E7%B4%A0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/%E4%BA%91%E5%8E%9F%E7%94%9F/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%BA%94%E7%94%A8%E7%9A%8412%E8%A6%81%E7%B4%A0/</guid><description>概述 在云的时代，应用会更多的迁移到云端，基于云的架构设计和开发模式需要一套全新的理念去承载，于是云原生思想应运而生，而针对云原生应用开发的最佳实践原则，12-Factor 脱颖而出，同时也带来了新的解读。
12-Factor，是由 Heroku 创始人 AdamWiggins 首次提出并开源，并由众多经验丰富的开发者共同完善，这综合了他们关于 SaaS 应用几乎所有的经验和智慧，是开发此类应用的理想实践标准。
12-Factor 全称叫 TheTwelve-Factor App，它定义了一个优雅的互联网应用在设计过程中，需要遵循的一些基本原则，和 Cloud-Native 有异曲同工之处。
Pivotal 定义了云原生十二要素，后来又补充了三个，从而开始有了标准的样子。 I. 基准代码 一份基准代码（Codebase），多份部署（deploy）
12-Factor 应用(译者注：应该是说一个使用本文概念来设计的应用，下同)通常会使用版本控制系统加以管理，如 Git, Mercurial, Subversion。一份用来跟踪代码所有修订版本的数据库被称作 代码库（code repository, code repo, repo）。
在类似 SVN 这样的集中式版本控制系统中，基准代码 就是指控制系统中的这一份代码库；而在 Git 那样的分布式版本控制系统中，基准代码 则是指最上游的那份代码库。
一份代码库对应多份部署
基准代码和应用之间总是保持一一对应的关系：
l 一旦有多个基准代码，就不能称为一个应用，而是一个分布式系统。分布式系统中的每一个组件都是一个应用，每一个应用可以分别使用 12-Factor 进行开发。
l 多个应用共享一份基准代码是有悖于 12-Factor 原则的。解决方案是将共享的代码拆分为独立的类库，然后使用 依赖管理 策略去加载它们。
尽管每个应用只对应一份基准代码，但可以同时存在多份部署。每份 部署 相当于运行了一个应用的实例。通常会有一个生产环境，一个或多个预发布环境。此外，每个开发人员都会在自己本地环境运行一个应用实例，这些都相当于一份部署。
所有部署的基准代码相同，但每份部署可以使用其不同的版本。比如，开发人员可能有一些提交还没有同步至预发布环境；预发布环境也有一些提交没有同步至生产环境。但它们都共享一份基准代码，我们就认为它们只是相同应用的不同部署而已。
II. 依赖 显式声明依赖关系（ dependency ）
大多数编程语言都会提供一个打包系统，用来为各个类库提供打包服务，就像 Perl 的 CPAN 或是 Ruby 的 Rubygems 。通过打包系统安装的类库可以是系统级的（称之为 “site packages”），或仅供某个应用程序使用，部署在相应的目录中（称之为 “vendoring” 或 “bunding”）。</description></item></channel></rss>