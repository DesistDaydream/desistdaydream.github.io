<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – Libvirt</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/Libvirt/</link><description>Recent content in Libvirt on 断念梦</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/Libvirt/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Libvirt</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/Libvirt/Libvirt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/Libvirt/Libvirt/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/libvirt">GitHub 组织，libvirt&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://libvirt.org/">官网&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Libvirt 是用于管理虚拟化平台的开源的 API，后台程序和管理工具。它可以用于管理 KVM、Xen、VMware ESX，QEMU 和其他虚拟化技术。Libvirt 将虚拟机统一称为 &lt;strong>Domain&lt;/strong>。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/gglb2f/1616123800173-58542239-2205-4586-bcc0-4edde6579a3f.png" alt="">&lt;/p>
&lt;p>Libvirt 提供了管理虚拟机和其它虚拟化功能（如：存储和网络接口等）的便利途径。这些软件包括：一个长期稳定的 C 语言 API、一个守护进程（libvirtd）和一个命令行工具（virsh）。Libvirt 的主要目标是提供一个单一途径以管理不同类型的虚拟化环境(也称为 drivers 或者 hypervisors )，包括：KVM/QEMU，Xen，VMware， VirtualBox hypervisors，LXC，OpenVZ&lt;/p>
&lt;p>Libvirt 包含 3 个东西：libvirtd、API、virsh&lt;/p>
&lt;ul>
&lt;li>libvirtd # 是守护进程，服务程序，接收和处理 API 请求&lt;/li>
&lt;li>API # 库使得其他人可以开发基于 Libvirt 的高级工具，比如 virt-manager、virt-install、virt-viewer 等。&lt;/li>
&lt;li>virsh # 是我们经常要用的命令行工具&lt;/li>
&lt;/ul>
&lt;p>Note：其实 libvirtd 在绝大部分情况下是与 qemu/kvm 相搭配来使用，都是开源的，并且 redhat 官方推荐的也是使用 libvirt 管理 kvm 虚拟机&lt;/p>
&lt;h2 id="libvirt-原理">Libvirt 原理&lt;/h2>
&lt;p>libvirt 支持不同的虚拟化类型，所以需要一种方法来指定所要连接的虚拟化驱动。&lt;/p>
&lt;p>libvirt 使用 URI 来与各种类型的虚拟化程序连接。官方文档：&lt;a href="https://libvirt.org/uri.html">https://libvirt.org/uri.html&lt;/a>&lt;/p>
&lt;p>libvirt 将使用以下逻辑来确定要使用的 URI。&lt;/p>
&lt;ul>
&lt;li>环境变量 LIBVIRT_DEFAULT_URI&lt;/li>
&lt;li>客户端配置文件 uri_default 参数&lt;/li>
&lt;li>依次探查每个虚拟机监控程序，直到找到有效的虚拟机监控程序&lt;/li>
&lt;/ul>
&lt;h1 id="libvirt-关联文件与配置">Libvirt 关联文件与配置&lt;/h1>
&lt;p>&lt;strong>/etc/libvirt/*&lt;/strong> #&lt;/p>
&lt;ul>
&lt;li>&lt;strong>./libvirt.conf&lt;/strong> # 用于配置用于与虚拟化程序连接的 URI 别名，以及默认 URI&lt;/li>
&lt;li>.&lt;strong>/libvirtd.conf&lt;/strong> # libvirtd 守护进程的配置文件&lt;/li>
&lt;li>.&lt;strong>/qemu/&lt;/strong> # xml 格式的配置文件存放路径，配置文件包括该 VM 的元数据(名字，uuid，内存，cpu 等)，设备配置(包括使用的硬盘文件的路径，网络类型等)，配置文件为 xml 格式。创建完一台 VM 后，会在该目录下生成对应 VM 名字的 xml 文件&lt;/li>
&lt;li>&lt;strong>./network/&lt;/strong> #&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>/etc/sysconfig/&lt;/strong> #&lt;/p>
&lt;ul>
&lt;li>&lt;strong>./libvirtd&lt;/strong> #&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>/var/lib/libvirt/&lt;/strong> #&lt;/p>
&lt;ul>
&lt;li>&lt;strong>./images/&lt;/strong> # 所有通过 libvirt 创建的虚拟机所生成的 images 都保存在该目录下&lt;/li>
&lt;li>&lt;strong>./qemu/snapshot/&lt;/strong> # 创建快照 xml 文件都保存在该目录下&lt;/li>
&lt;/ul>
&lt;h1 id="xml-文件">XML 文件&lt;/h1>
&lt;p>Libvirt 管理的虚拟机都可以通过 XML 文件来描述其所应该模拟的硬件设备、状态等等。详见 &lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/Libvirt/XML%20%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/XML%20%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3.md">XML 文件详解&lt;/a>&lt;/p>
&lt;p>我们甚至可以通过直接编写 XML 文件，以便 Libvirt 相关工具直接读取 XML 并启动 VM。&lt;/p>
&lt;h1 id="nvram-文件">nvram 文件&lt;/h1>
&lt;p>TODO: 这是什么文件？？？？&lt;/p></description></item><item><title>Docs: XML 文件详解</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/Libvirt/XML-%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/Libvirt/XML-%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</guid><description/></item><item><title>Docs: 最佳实践</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/Libvirt/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/Libvirt/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;p>这里的最佳实践，主要是使用 Libvirt 工具集对虚拟机的全生命周期进行管理。比如创建、修改、删除虚拟机。&lt;/p>
&lt;p>最常用的工具是 virt-install、virsh 命令&lt;/p>
&lt;h1 id="创建虚拟机">创建虚拟机&lt;/h1>
&lt;p>详见 &lt;a href="docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/Libvirt/%E4%BD%BF%E7%94%A8%20libvirt%20API%20%E7%9A%84%E5%85%B6%E4%BB%96%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/virt-install.md">virt-install&lt;/a> 命令中的应用示例&lt;/p>
&lt;h1 id="为-domain-添加移除磁盘">为 Domain 添加/移除磁盘&lt;/h1>
&lt;p>设定几个变量&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 将要操作的虚拟机&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>export DOMAIN&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;tj-test-common-kvm&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 将要附加的存储设备&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>export SOURCE_DEVICE&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/var/lib/libvirt/images/test-data.qcow2&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>export TARGET_DEVICE&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;vdb&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>先创建一个 qcow2 文件，然后使用这个文件进行测试&lt;/p>
&lt;ul>
&lt;li>&lt;code>qemu-img create -f qcow2 -o size=10G ${SOURCE_DEVICE}&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>为 tj-test-common-kvm 添加一块磁盘，使用 /var/lib/libvirt/images/test-data.qcow2 文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>virsh attach-disk &lt;span style="color:#e6db74">${&lt;/span>DOMAIN&lt;span style="color:#e6db74">}&lt;/span> &lt;span style="color:#e6db74">${&lt;/span>SOURCE_DEVICE&lt;span style="color:#e6db74">}&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>--driver qemu --subdriver qcow2 &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>--target &lt;span style="color:#e6db74">${&lt;/span>TARGET_DEVICE&lt;span style="color:#e6db74">}&lt;/span> --targetbus virtio &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>--cache none &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>--persistent
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>将会生成如下 xml&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;disk&lt;/span> &lt;span style="color:#a6e22e">type=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;file&amp;#39;&lt;/span> &lt;span style="color:#a6e22e">device=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;disk&amp;#39;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;driver&lt;/span> &lt;span style="color:#a6e22e">name=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;qemu&amp;#39;&lt;/span> &lt;span style="color:#a6e22e">type=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;qcow2&amp;#39;&lt;/span> &lt;span style="color:#a6e22e">cache=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;none&amp;#39;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;source&lt;/span> &lt;span style="color:#a6e22e">file=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;/var/lib/libvirt/images/test-data.qcow2&amp;#39;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;target&lt;/span> &lt;span style="color:#a6e22e">dev=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;vdb&amp;#39;&lt;/span> &lt;span style="color:#a6e22e">bus=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;virtio&amp;#39;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;address&lt;/span> &lt;span style="color:#a6e22e">type=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;pci&amp;#39;&lt;/span> &lt;span style="color:#a6e22e">domain=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;0x0000&amp;#39;&lt;/span> &lt;span style="color:#a6e22e">bus=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;0x07&amp;#39;&lt;/span> &lt;span style="color:#a6e22e">slot=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;0x00&amp;#39;&lt;/span> &lt;span style="color:#a6e22e">function=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;0x0&amp;#39;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/disk&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>将 tj-test-common-kvm 虚拟机中的 vdb 设备分离&lt;/p>
&lt;ul>
&lt;li>&lt;code>virsh detach-disk ${DOMAIN} ${TARGET_DEVICE} --persistent&lt;/code>&lt;/li>
&lt;/ul></description></item><item><title>Docs: Libvirt 对接 Hypervisor</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/Libvirt/Libvirt-%E5%AF%B9%E6%8E%A5-Hypervisor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/Libvirt/Libvirt-%E5%AF%B9%E6%8E%A5-Hypervisor/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://libvirt.org/uri.html">官方文档，连接 URI&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Libvirt 支持多不同类型的虚拟化（通常称为 &lt;strong>Drviers(驱动程序)&lt;/strong> 或 &lt;strong>Hypervisors(虚拟机监视器)&lt;/strong>），因此我们需要一种方法来连接到指定的 Hypervisors。另外，我们可能希望引用网络上远程的 Hypervisors。&lt;/p>
&lt;p>为此，&lt;strong>Libvirt 使用的 RFC 2396中 定义的 URI 来实现此功能&lt;/strong>&lt;/p>
&lt;p>注意：由于常用 QEMU-KVM 类型虚拟化，所以后文介绍的都以 KVM 虚拟化为主，Xen 类型会单独注明。&lt;/p>
&lt;h2 id="uri-格式">URI 格式&lt;/h2>
&lt;pre tabindex="0">&lt;code>Hypervisor[+Transport]://[UserName@][HostName][:PORT]/PATH[?Extraparameters]
&lt;/code>&lt;/pre>&lt;p>Hypervisor # 虚拟化类型，可用的值有：&lt;/p>
&lt;ul>
&lt;li>qemu&lt;/li>
&lt;li>xen&lt;/li>
&lt;li>test # 专门测试的，libvirt 自带&lt;/li>
&lt;/ul>
&lt;p>Transport # 连接方式。默认为 unix&lt;/p>
&lt;ul>
&lt;li>unix&lt;/li>
&lt;li>ssh&lt;/li>
&lt;li>tcp&lt;/li>
&lt;li>libssh、libssh2&lt;/li>
&lt;li>auto&lt;/li>
&lt;li>netcat&lt;/li>
&lt;li>native&lt;/li>
&lt;li>ext&lt;/li>
&lt;li>tls&lt;/li>
&lt;/ul>
&lt;h3 id="本地-uri-格式示例">本地 URI 格式示例&lt;/h3>
&lt;pre tabindex="0">&lt;code>qemu:///system # 连接到系统模式守护程序。
qemu:///session # 连接到会话模式守护程序。
&lt;/code>&lt;/pre>&lt;p>（如果这样做libvirtd &lt;del>-&lt;/del>-help，守护程序将打印出以各种不同方式监听的Unix域套接字的路径）。&lt;/p>
&lt;h3 id="远程-uri-格式示例">远程 URI 格式示例&lt;/h3>
&lt;pre tabindex="0">&lt;code># 通过非标准Unix套接字连接到本地qemu实例（在这种情况下，显式提供了Unix套接字的完整路径）。
qemu+unix:///system?socket=/opt/libvirt/run/libvirt/libvirt-sock
# 连接到提供本地主机端口5000上未加密的TCP / IP连接的libvirtd守护程序，并使用具有默认设置的测试驱动程序。
test+tcp://localhost:5000/default
# 使用与libssh2驱动程序的ssh连接连接到远程主机，并使用其他known_hosts文件。
qemu+libssh2://user@host/system?known_hosts=/home/user/.ssh/known_hosts
# 使用与libssh驱动程序的ssh连接连接到远程主机，并使用其他known_hosts文件。
qemu+libssh://user@host/system?known_hosts=/home/user/.ssh/known_hosts
&lt;/code>&lt;/pre>&lt;h3 id="测试-uri-格式示例">测试 URI 格式示例&lt;/h3>
&lt;pre tabindex="0">&lt;code>test:///default connects to a default set of host definitions built into the driver.
test:///path/to/host/definitions connects to a set of host definitions held in the named file.
&lt;/code>&lt;/pre>&lt;h2 id="uri-中额外的参数详解">URI 中额外的参数详解&lt;/h2>
&lt;p>可以将额外的参数作为查询字符串的一部分（后面的部分?）添加到远程URI中。远程URI了解下面显示的其他参数。任何其他内容都未经修改地传递到后端。请注意，参数值必须是 URI转义的。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>名称&lt;/th>
&lt;th>运输工具&lt;/th>
&lt;th>含义&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>name&lt;/td>
&lt;td>任何运输&lt;/td>
&lt;td>传递给远程virConnectOpen函数的名称。该名称通常是通过从远程URI中删除传输，主机名，端口号，用户名和其他参数形成的，但是在某些非常复杂的情况下，最好显式提供名称。&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>例： name=qemu:///system&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>tls_priority&lt;/td>
&lt;td>tls&lt;/td>
&lt;td>无效的GNUTLS优先级字符串&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>例： tls_priority=NORMAL:-VERS-SSL3.0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>mode&lt;/td>
&lt;td>Unix，ssh，libssh，libssh2&lt;/td>
&lt;td>auto&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>自动确定守护程序&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>direct&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>连接到每个驱动程序守护程序&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>legacy&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>连接到libvirtd&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>也可以设置libvirt.conf为remote_mode&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>例： mode=direct&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>command&lt;/td>
&lt;td>ssh，ext&lt;/td>
&lt;td>外部命令。对于外部运输，这是必需的。对于ssh，默认值为ssh。在PATH中搜索命令。&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>例： command=/opt/openssh/bin/ssh&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>socket&lt;/td>
&lt;td>Unix，ssh，libssh2，libssh&lt;/td>
&lt;td>Unix域套接字的路径，它将覆盖已编译的缺省值。对于ssh传输，这将传递到远程netcat命令（请参阅下一个）。&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>例： socket=/opt/libvirt/run/libvirt/libvirt-sock&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>netcat&lt;/td>
&lt;td>ssh，libssh2，libssh&lt;/td>
&lt;td>远程计算机上的netcat命令的名称。默认值为nc。对于ssh传输，libvirt构造一个ssh命令，如下所示：&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>命令 -p 端口 [-l 用户名 ] 主机名 netcat -U 套接字&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>其中port，username，hostname可以指定为远程URI的一部分，而command，netcat 和socket来自额外的参数（或合理的默认值）。&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>例： netcat=/opt/netcat/bin/nc&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>keyfile&lt;/td>
&lt;td>ssh，libssh2，libssh&lt;/td>
&lt;td>用于对远程计算机进行身份验证的私钥文件的名称。如果不使用此选项，则使用默认密钥。&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>例： keyfile=/root/.ssh/example_key&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>no_verify&lt;/td>
&lt;td>ssh，tls&lt;/td>
&lt;td>SSH：如果设置为非零值，则禁用客户端的严格主机密钥检查，使其自动接受新的主机密钥。现有主机密钥仍将被验证。&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>TLS：如果设置为非零值，则将禁用客户端对服务器证书的检查。请注意，要禁用服务器对客户机证书或IP地址的检查，必须 更改libvirtd配置。&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>例： no_verify=1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>no_tty&lt;/td>
&lt;td>ssh&lt;/td>
&lt;td>如果设置为非零值，如果它无法自动登录到远程计算机（例如，使用ssh-agent等），它将阻止ssh询问密码。当您无权访问终端时（例如在使用libvirt的图形程序中），请使用此选项。&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>例： no_tty=1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>pkipath&lt;/td>
&lt;td>tls&lt;/td>
&lt;td>指定客户端的x509证书路径。如果缺少任何CA证书，客户端证书或客户端密钥，则连接将失败并出现致命错误。&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>例： pkipath=/tmp/pki/client&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>known_hosts&lt;/td>
&lt;td>libssh2，libssh&lt;/td>
&lt;td>验证主机密钥所依据的known_hosts文件的路径。尽管LibSSH2不支持所有密钥类型，但LibSSH2和libssh支持OpenSSH风格的known_hosts文件，因此，使用由OpenSSH二进制文件创建的文件可能会导致截断known_hosts文件。因此，对于LibSSH2，建议使用默认的known_hosts文件，该文件位于libvirt的客户端本地配置目录中，例如：〜/ .config / libvirt / known_hosts。注意：使用绝对路径。&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>例： known_hosts=/root/.ssh/known_hosts&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>sshauth&lt;/td>
&lt;td>libssh2，libssh&lt;/td>
&lt;td>用逗号分隔的身份验证方法列表。默认值（是“ agent，privkey，password，keyboard-interactive”。保留方法的顺序。某些方法可能需要其他参数。&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>例： sshauth=privkey,agent&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="连接-hypervisor-方式">连接 Hypervisor 方式&lt;/h1>
&lt;p>官方文档：&lt;a href="https://libvirt.org/drvqemu.html">https://libvirt.org/drvqemu.html&lt;/a>&lt;/p>
&lt;p>要连接 QEMU Hypervisor，则必须运行 libvirtd 守护进程(systemctl start libvirtd)，该守护进程的目的是管理 qemu 实例&lt;/p>
&lt;p>Libvirt 的 KVM/QEMU 驱动程序将会探测 /usr/bin 目录是否存在&lt;code>qemu&lt;/code>, &lt;code>qemu-system-x86_64&lt;/code>, &lt;code>qemu-system-microblaze&lt;/code>, &lt;code>qemu-system-microblazeel&lt;/code>, &lt;code>qemu-system-mips&lt;/code>,&lt;code>qemu-system-mipsel&lt;/code>, &lt;code>qemu-system-sparc&lt;/code>,&lt;code>qemu-system-ppc&lt;/code>。来决定如何连接 QEMU emulator。&lt;/p>
&lt;p>Libvirt 的 KVM/QEMU 驱动程序&lt;del>将会&lt;/del>探测 /usr/bin 目录是否存在&lt;code>qemu-kvm&lt;/code>，以及 /dev/kvm 驱动是否存在。来绝对如何连接 KVM hypervisor。&lt;/p>
&lt;h2 id="以-libvirt-的-配置文件-或-命令行选项-连接-hypervisor">以 libvirt 的 配置文件 或 命令行选项 连接 Hypervisor&lt;/h2>
&lt;p>这里以 virsh 命令行工具作为示例，其他基于 Libvirt API 的第三方工具，都是同样的道理&lt;/p>
&lt;ol>
&lt;li>使用 -c 或者 &amp;ndash;connect 选项。比如：
&lt;ol>
&lt;li>virsh -c test:///default list&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>在客户端配置文件(/etc/libvirt/libvirt.conf)中，设定&lt;code>uri_default&lt;/code>关键字的值&lt;/li>
&lt;/ol>
&lt;h2 id="以代码方式通过-libvirt-api-连接-hypervisor">以代码方式通过 Libvirt API 连接 Hypervisor&lt;/h2>
&lt;p>URI 作为 &lt;code>name&lt;/code> 参数传递给 virConnectOpen 或 virConnectOpenReadOnly 函数。例如：&lt;/p>
&lt;pre tabindex="0">&lt;code>virConnectPtr conn = virConnectOpenReadOnly (&amp;#34;test:///default&amp;#34;);
&lt;/code>&lt;/pre>&lt;p>如果传递给 virConnectOpen* 的 URI 为NULL，则 libvirt 将使用以下逻辑来确定要使用的URI。&lt;/p>
&lt;ol>
&lt;li>&lt;code>LIBVIRT_DEFAULT_URI&lt;/code> 环境变量&lt;/li>
&lt;li>在客户端配置文件(/etc/libvirt/libvirt.conf)中，&lt;code>uri_default&lt;/code>关键字的值&lt;/li>
&lt;li>依次探查每个 hypervisor 程序，直到找到有效的虚拟机监控程序&lt;/li>
&lt;/ol>
&lt;h1 id="应用实例">应用实例&lt;/h1>
&lt;h2 id="通过-libvirt-远程管理虚拟机">通过 libvirt 远程管理虚拟机&lt;/h2>
&lt;p>2台主机：&lt;/p>
&lt;p>node4: 192.168.1.166&lt;/p>
&lt;p>node5: 192.168.1.143&lt;/p>
&lt;p>node4 作为远程libvirt的服务器，上面有已经创建的虚拟机，现在node5上通过以下2种方式管理远程服务器上的虚拟机：&lt;/p>
&lt;ol>
&lt;li>通过qemu+ssh方式&lt;/li>
&lt;li>通过qemu+tcp方式&lt;/li>
&lt;/ol>
&lt;p>node5上安装libvirt及相关工具包，我这里安装了这些，&lt;/p>
&lt;pre tabindex="0">&lt;code>yum groupinstall &amp;#34;Virtualization&amp;#34;
yum install libvirt libvirt-python python-virtinst virt-viewer
&lt;/code>&lt;/pre>&lt;p>通过qemu+ssh连接方式比较简单，只需node5能用ssh远程访问node4即可,&lt;/p>
&lt;p>命令如下：&lt;/p>
&lt;pre tabindex="0">&lt;code>virsh -c qemu+ssh://root@192.168.1.166/system
&lt;/code>&lt;/pre>&lt;p>如果2个节点设置了互信，免密钥登录，可直接执行virsh相关命令，&lt;/p>
&lt;pre tabindex="0">&lt;code>[root@node5 ~]# virsh -c qemu+ssh://root@192.168.1.166/system list
Id 名称 状态
----------------------------------------------------
3 vm01 running
&lt;/code>&lt;/pre>&lt;p>下面介绍通过qemu+tcp方式登录远程节点的virsh：&lt;/p>
&lt;p>node4上&lt;/p>
&lt;p>修改/etc/sysconfig/libvirtd,开启以下2个配置项：&lt;/p>
&lt;pre tabindex="0">&lt;code>[root@node4 ~]# egrep -v &amp;#34;^#|^$&amp;#34; /etc/sysconfig/libvirtd
LIBVIRTD_CONFIG=/etc/libvirt/libvirtd.conf
LIBVIRTD_ARGS=&amp;#34;--listen
&lt;/code>&lt;/pre>&lt;p>修改配置文件，&lt;/p>
&lt;pre tabindex="0">&lt;code>vim /etc/libvirt/libvirtd.conf
listen_tls = 0
listen_tcp = 1
tcp_port =&amp;#34;16509&amp;#34;
listen_addr =&amp;#34;0.0.0.0&amp;#34;
auth_tcp =&amp;#34;none&amp;#34;
&lt;/code>&lt;/pre>&lt;p>重启libvirtd并查看监听的端口，&lt;/p>
&lt;pre tabindex="0">&lt;code># /etc/init.d/libvirtd restart
# netstat -anltp|grep 16509
tcp 0 0 0.0.0.0:16509 0.0.0.0:* LISTEN 28843/libvirtd
&lt;/code>&lt;/pre>&lt;p>node5上远程访问（需要确保可以访问node4的16509 tcp端口）：&lt;/p>
&lt;pre tabindex="0">&lt;code>[root@node5 ~]# virsh -c qemu+tcp://192.168.1.166/system list
Id 名称 状态
----------------------------------------------------
3 vm01 running
&lt;/code>&lt;/pre>&lt;h2 id="配置uri别名">配置URI别名&lt;/h2>
&lt;p>为了简化管理员的工作，可以在libvirt客户端配置文件中设置URI别名。该配置文件/etc/libvirt/libvirt.conf 适用于root用户或 &lt;code>${XDG_CONFIG_HOME}/libvirt/libvirt.conf&lt;/code> 任何非特权用户。在此文件中，以下语法可用于设置别名&lt;/p>
&lt;p>uri_aliases = [ “ hail = qemu + ssh：//root@hail.cloud.example.com/system”， “ sleet = qemu + ssh：//root@sleet.cloud.example.com/system”，]&lt;/p>
&lt;p>URI别名应该是由字符组成的字符串 a-Z, 0-9, _, -。继= 可以是任何libvirt的URI字符串，包括任意URI参数。URI别名将适用于任何打开libvirt连接的应用程序，除非它已将VIR_CONNECT_NO_ALIASES 参数明确传递给virConnectOpenAuth。如果传入的URI包含允许的别名字符集之外的字符，则不会尝试别名查找。&lt;/p></description></item><item><title>Docs: Libvirt 客户端库</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/Libvirt/Libvirt-%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BA%93/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/Libvirt/Libvirt-%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BA%93/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://libvirt.org/bindings.html">官方文档，binding&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Libvirt 直接支持 C 和 C++，并且具有可用于其他语言的绑定：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>C#&lt;/strong>：Arnaud Champion 开发&lt;a href="https://libvirt.org/csharp.html">C# 绑定&lt;/a>。&lt;/li>
&lt;li>&lt;strong>Go&lt;/strong>：Daniel Berrange 开发了&lt;a href="https://pkg.go.dev/libvirt.org/go/libvirt">Go 绑定&lt;/a>。&lt;/li>
&lt;li>&lt;strong>Java&lt;/strong>：Daniel Veillard 开发&lt;a href="https://libvirt.org/java.html">Java 绑定&lt;/a>。&lt;/li>
&lt;li>&lt;strong>OCaml&lt;/strong>：Richard Jones 开发&lt;a href="https://libvirt.org/ocaml/">OCaml 绑定&lt;/a>。&lt;/li>
&lt;li>&lt;strong>Perl&lt;/strong>：Daniel Berrange 开发&lt;a href="https://search.cpan.org/dist/Sys-Virt/">Perl 绑定&lt;/a>。&lt;/li>
&lt;li>&lt;strong>PHP&lt;/strong>：Radek Hladik 于 2010 年开始开发&lt;a href="https://libvirt.org/php">PHP 绑定&lt;/a>。2011 年 2 月，绑定开发已作为 libvirt-php 项目移至 libvirt.org 网站。该项目现在由 Michal Novotny 维护，并且很大程度上基于 Radek 的版本。有关更多信息，包括发布补丁到 libvirt-php 的信息，请参阅&lt;a href="https://libvirt.org/php">PHP 绑定&lt;/a>站点。&lt;/li>
&lt;li>&lt;strong>Python&lt;/strong>：Libvirt 的 python 绑定从 1.2.0 版本开始被拆分为一个单独的 &lt;a href="https://gitlab.com/libvirt/libvirt-python">包&lt;/a>，旧版本直接支持 Python 语言。如果您的 libvirt 是作为软件包安装的，而不是由您从源代码编译的，请确保您安装了适当的软件包。这在 RHEL/Fedora 上 被命名为&lt;strong>libvirt-python ，在 Ubuntu 上被命名为&lt;/strong>&lt;a href="https://packages.ubuntu.com/search?keywords=python-libvirt">python-libvirt&lt;/a> ，并且在其他人上可能有不同的命名。有关使用信息，请参阅&lt;a href="https://libvirt.org/python.html">Python API 绑定&lt;/a> 页面。&lt;/li>
&lt;li>&lt;strong>Ruby&lt;/strong>：Chris Lalancette 开发&lt;a href="https://libvirt.org/ruby/">Ruby 绑定&lt;/a>。&lt;/li>
&lt;/ul>
&lt;p>集成 API 模块：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>D-Bus&lt;/strong>：Pavel Hrdina 开发&lt;a href="https://libvirt.org/dbus.html">D-Bus API&lt;/a>。&lt;/li>
&lt;/ul>
&lt;p>有关在 &lt;strong>Windows 上使用 libvirt 的信息，&lt;/strong> &lt;a href="https://libvirt.org/windows.html">请参阅 Windows 支持页面&lt;/a>。&lt;/p>
&lt;h1 id="go-库">Go 库&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/libvirt/libvirt-go-module">GitHub 项目，libvirt/libvirt-go-module&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="python-库">Python 库&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://libvirt.org/docs/libvirt-appdev-guide-python/en-US/html/index.html">libvirt 官方文档，使用 Python 开发 Libvirt 应用程序指南&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;a href="https://blog.51cto.com/u_10616534/1878609">https://blog.51cto.com/u_10616534/1878609&lt;/a>
&lt;a href="https://cloud.tencent.com/developer/article/1603833">https://cloud.tencent.com/developer/article/1603833&lt;/a>&lt;/p></description></item><item><title>Docs: Libvirt 配置详解</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/Libvirt/Libvirt-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/Libvirt/Libvirt-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;/blockquote>
&lt;p>/etc/libvirt/libvirt.conf&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 设置别名&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>uri_aliases &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">[&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;vs-1=qemu+ssh://10.10.100.201/system&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 可以对 10.10.100.201 使用 virsh 命令&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>virsh -c vs-1 list
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: virsh 命令行工具</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/Libvirt/virsh-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/Libvirt/virsh-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</guid><description/></item><item><title>Docs: 使用 libvirt API 的其他应用程序</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/Libvirt/%E4%BD%BF%E7%94%A8-libvirt-API-%E7%9A%84%E5%85%B6%E4%BB%96%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/Libvirt/%E4%BD%BF%E7%94%A8-libvirt-API-%E7%9A%84%E5%85%B6%E4%BB%96%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/</guid><description/></item><item><title>Docs: 问题实例</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/Libvirt/%E9%97%AE%E9%A2%98%E5%AE%9E%E4%BE%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/Libvirt/%E9%97%AE%E9%A2%98%E5%AE%9E%E4%BE%8B/</guid><description>
&lt;h1 id="dnsmasq-cannot-read-varliblibvirtdnsmasqdefaultconf-permission-denied">dnsmasq: cannot read /var/lib/libvirt/dnsmasq/default.conf: Permission denied&lt;/h1>
&lt;p>参考连接：&lt;a href="https://forum.level1techs.com/t/solved-virtual-network-issue-virsh-net-start-default/136141">https://forum.level1techs.com/t/solved-virtual-network-issue-virsh-net-start-default/136141&lt;/a>&lt;/p>
&lt;p>该问题常出现在移动 /var/lib/libvirt 目录下的内容到新的磁盘上之后出现，是由于 SELinux 的策略导致的&lt;/p>
&lt;p>I solved this so I figured I’d post the fix (to my specific problem) in case anybody else runs into this. This was happening due to an SELinux policy violation. Here is what I did:&lt;/p>
&lt;p>$ sudo setenforce 0 # disable SELinux momentarily$ sudo virsh net-start default # this worked which meant SELinux was involved$ sudo setenforce 1 # renable SELinux$ sudo ausearch -m AVC,USER_AVC,SELINUX_ERR -ts recent # inspect the SELinux alerts if you&amp;rsquo;re interested&lt;/p>
&lt;p>Then I remembered…I’d created a new logical volume for /var/lib/libvirt to host all virtual machine configs and then just copied all of the original directories over - this was my mistake - SELinux somehow knows they are copied files and was denying access. (I really don’t understand SELinux…) To fix, I needed to restore the permissions:&lt;/p>
&lt;pre>&lt;code>$ restorecon -rv /var/lib/libvirt
&lt;/code>&lt;/pre>
&lt;p>Then the network started right up.&lt;/p>
&lt;p>Any suggestions on good resources on learning about SELinux?&lt;/p></description></item></channel></rss>