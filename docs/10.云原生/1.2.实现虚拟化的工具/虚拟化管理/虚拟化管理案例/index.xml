<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – 虚拟化管理案例</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86%E6%A1%88%E4%BE%8B/</link><description>Recent content in 虚拟化管理案例 on 断念梦</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86%E6%A1%88%E4%BE%8B/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: 创建虚拟机及创建后常见操作</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86%E6%A1%88%E4%BE%8B/%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%8F%8A%E5%88%9B%E5%BB%BA%E5%90%8E%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86%E6%A1%88%E4%BE%8B/%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%8F%8A%E5%88%9B%E5%BB%BA%E5%90%8E%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;p>使用 &lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/Libvirt/%E4%BD%BF%E7%94%A8%20libvirt%20API%20%E7%9A%84%E5%85%B6%E4%BB%96%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/virt-install.md">virt-install&lt;/a> 在 CLI 创建 VM 时指定 vnc 并监听在 0.0.0.0 上。使用实例中最简单的命令即可，最简单的命令只需要指定网络、连接显示的方式、系统版本、cpu、内存即可，其他虚拟设备都会又 virt-install 自动添加。并不影响性能和使用等方面。&lt;/p>
&lt;p>使用 VNC 客户端连接 VM 并安装操作系统。&lt;/p>
&lt;p>安装完成后，根据&lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B8%8E%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/%E8%99%9A%E6%8B%9F%E5%8C%96%E8%B0%83%E8%AF%95%E5%92%8C%E4%BC%98%E5%8C%96%E6%8C%87%E5%8D%97.md">虚拟化调试和优化指南&lt;/a>调优，&lt;code>virsh edit XXX&lt;/code> 修改文件&lt;/p>
&lt;p>使用 &lt;code>systemctl enable serial-getty@ttyS0.service --now&lt;/code> 启动 serial-getty 服务，以便通过 &lt;code>virsh console&lt;/code> 命令连接虚拟机&lt;/p>
&lt;p>压缩 qcow2 文件，创建 backing file 的 qcow2 和 xml 文件当做模板以便批量创建虚拟机所用&lt;/p>
&lt;ul>
&lt;li>&lt;code>qemu-img convert -c -O qcow2 test.qcow2 test.qcow2.new&lt;/code>&lt;/li>
&lt;/ul></description></item><item><title>Docs: 扩大 KVM 虚拟机 image 镜像</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86%E6%A1%88%E4%BE%8B/%E6%89%A9%E5%A4%A7-KVM-%E8%99%9A%E6%8B%9F%E6%9C%BA-image-%E9%95%9C%E5%83%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86%E6%A1%88%E4%BE%8B/%E6%89%A9%E5%A4%A7-KVM-%E8%99%9A%E6%8B%9F%E6%9C%BA-image-%E9%95%9C%E5%83%8F/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;p>直接使用 qemu-img resize 的时候一定要先备份镜像。先使用 virsh shutdown VM 关闭镜像再进行如下操作：&lt;/p>
&lt;ul>
&lt;li>给原始系统文件添加磁盘空间
&lt;ul>
&lt;li>qemu-img resize centos7-baseImage-50G.qcow2 +500G&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>进入虚拟机操作新建硬盘分区
&lt;ul>
&lt;li>parted /dev/vda mkpart primary XXX 100%(XX 改为指定的最后一块扇区的容量)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>扩容 LVM，注意/dev/vda4 设备为真实情况的设备名称，注意修改
&lt;ul>
&lt;li>partprobe(可能还需要重启)&lt;/li>
&lt;li>pvcreate /dev/vda4&lt;/li>
&lt;li>vgextend vg0 /dev/vda4&lt;/li>
&lt;li>lvextend -l+100%FREE /dev/mapper/vg0-root
&lt;ul>
&lt;li>这里可以使用 lvextend -l +单元数量 /dev/mapper/vg0-lv101&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>扩展文件系统大小，注意 /dev/mapper/vg0-root 修改为真实情况的分区路径
&lt;ul>
&lt;li>XFS 文件系统
&lt;ul>
&lt;li>xfs_growfs /dev/mapper/vg0-root&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>EXT 文件系统
&lt;ul>
&lt;li>resize2fs /dev/mapper/vg0-root (-f 强制扩展)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: 通过 veth 设备查找对应的虚拟机</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86%E6%A1%88%E4%BE%8B/%E9%80%9A%E8%BF%87-veth-%E8%AE%BE%E5%A4%87%E6%9F%A5%E6%89%BE%E5%AF%B9%E5%BA%94%E7%9A%84%E8%99%9A%E6%8B%9F%E6%9C%BA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86%E6%A1%88%E4%BE%8B/%E9%80%9A%E8%BF%87-veth-%E8%AE%BE%E5%A4%87%E6%9F%A5%E6%89%BE%E5%AF%B9%E5%BA%94%E7%9A%84%E8%99%9A%E6%8B%9F%E6%9C%BA/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;p>通过 xml 文件查看虚拟机的 mac 地址&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># grep &amp;#34;mac addr&amp;#34; lchTest.xml&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;mac address&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;52:54:00:6a:86:89&amp;#39;&lt;/span>/&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>筛选网络设备 mac&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># ip a | grep &amp;#34;86:89&amp;#34; -B 1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>127: vnet1: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu &lt;span style="color:#ae81ff">1500&lt;/span> qdisc pfifo_fast master br1 state UNKNOWN group default qlen &lt;span style="color:#ae81ff">1000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> link/ether fe:54:00:6a:86:89 brd ff:ff:ff:ff:ff:ff
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>由此可见，vnet 设备的 mac 与虚拟机的 mac 在后面几位是永远保持一致的，所以可以通过 vnet 设备的 mac ，从所有虚拟机中的 xml 进行筛选就行可以找到 vnet 设备对应的虚拟机了。&lt;/p>
&lt;h2 id="应用实例">应用实例&lt;/h2>
&lt;p>比如我现在能看到 4 个 vnet 设备。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># ip a&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.....
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>62: vnet3: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu &lt;span style="color:#ae81ff">1500&lt;/span> qdisc pfifo_fast master br1 state UNKNOWN group default qlen &lt;span style="color:#ae81ff">1000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> link/ether fe:54:00:5c:11:85 brd ff:ff:ff:ff:ff:ff
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> inet6 fe80::fc54:ff:fe5c:1185/64 scope link
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> valid_lft forever preferred_lft forever
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>79: vnet0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu &lt;span style="color:#ae81ff">1500&lt;/span> qdisc mq master br1 state UNKNOWN group default qlen &lt;span style="color:#ae81ff">1000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> link/ether fe:54:00:68:20:51 brd ff:ff:ff:ff:ff:ff
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> inet6 fe80::fc54:ff:fe68:2051/64 scope link
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> valid_lft forever preferred_lft forever
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>127: vnet1: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu &lt;span style="color:#ae81ff">1500&lt;/span> qdisc pfifo_fast master br1 state UNKNOWN group default qlen &lt;span style="color:#ae81ff">1000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> link/ether fe:54:00:6a:86:89 brd ff:ff:ff:ff:ff:ff
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> inet6 fe80::fc54:ff:fe6a:8689/64 scope link
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> valid_lft forever preferred_lft forever
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>139: vnet2: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu &lt;span style="color:#ae81ff">1500&lt;/span> qdisc pfifo_fast master br1 state UNKNOWN group default qlen &lt;span style="color:#ae81ff">1000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> link/ether fe:54:00:3a:95:ef brd ff:ff:ff:ff:ff:ff
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> inet6 fe80::fc54:ff:fe3a:95ef/64 scope link
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> valid_lft forever preferred_lft forever
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我想看看 vnet3 是关联到哪个虚拟机上了，就可以进行如下操作：(首先看到 vnet3 的 mac 为 fe:54:00:5c:11:85)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># grep -r &amp;#34;5c:11:85&amp;#34; /etc/libvirt/qemu/*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/etc/libvirt/qemu/cobbler.test.tjiptv.net.xml: &amp;lt;mac address&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;52:54:00:5c:11:85&amp;#39;&lt;/span>/&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这时候可以看到，是 cobbler.test.tjiptv.net.xml 这台虚拟机在使用 vnet3 。&lt;/p></description></item><item><title>Docs: 在线热迁移</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86%E6%A1%88%E4%BE%8B/%E5%9C%A8%E7%BA%BF%E7%83%AD%E8%BF%81%E7%A7%BB/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86%E6%A1%88%E4%BE%8B/%E5%9C%A8%E7%BA%BF%E7%83%AD%E8%BF%81%E7%A7%BB/</guid><description>
&lt;p>原文链接：&lt;a href="https://blog.51cto.com/u_14227204/2514434">https://blog.51cto.com/u_14227204/2514434&lt;/a>&lt;/p>
&lt;h1 id="kvm-虚拟机的迁移方式">KVM 虚拟机的迁移方式&lt;/h1>
&lt;blockquote>
&lt;p>KVM 虚拟机的迁移有两种方法：&lt;/p>
&lt;ul>
&lt;li>静态迁移（冷迁移）：对于冷迁移，就是在虚拟机关闭状态下，将虚拟机的磁盘文件及.xml 配置文件（这两个文件组成了一个虚拟机）复制到要迁移到的目标主机上，然后在目标主机上使用“virsh define *.xml”命令重新定义虚拟机即可。&lt;/li>
&lt;li>动态迁移（热迁移）：对于热迁移，比较常用，通常是这台服务器上正在跑着一些业务，而这些业务又不允许中断，那么就需要使用热迁移了，这篇博文将详细写出热迁移的步骤。&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>1、冷迁移&lt;/strong>&lt;/p>
&lt;p>通常我们存放虚拟机磁盘的目录都是挂在的一个 nfs 文件系统的磁盘，而这个磁盘通常是 LVM 文件系统。所以需要进行冷迁移时，只要在目标主机上挂载这个 nfs 文件系统，就可以看到要迁移的那个虚拟机的磁盘文件，通常以.qcow2 或.raw 结尾的，然后，只需将虚拟机的.xml 配置文件发送到目标服务器上，然后重新定义一下即可通过“virsh list &amp;ndash;all”命令查看到迁移过来的虚拟机。&lt;/p>
&lt;p>&lt;strong>2、热迁移&lt;/strong>&lt;/p>
&lt;p>如果源宿主机和目的宿主机共享存储系统，则只需要通过网络发送客户机的 vCPU 执行状态、内存中的内容、虚机设备的状态到目的主机上。否则，还需要将客户机的磁盘存储发到目的主机上。共享存储系统指的是源和目的虚机的镜像文件目录是在一个共享的存储上的。&lt;/p>
&lt;h2 id="在基于-共享存储系统-时kvm-动态迁移的具体过程为">在基于 共享存储系统 时，KVM 动态迁移的具体过程为&lt;/h2>
&lt;ol>
&lt;li>迁移开始时，客户机依然在宿主机上运行，与此同时，客户机的内存页被传输到目的主机上。&lt;/li>
&lt;li>QEMU/KVM 会监控并记录下迁移过程中所有已被传输的内页的任何修改，并在所有内存页都传输完成后即开始传输在前面过程中内存页的更改内容。&lt;/li>
&lt;li>QEMU/KVM 会估计迁移过程中的传输速度，当剩余的内存数据量能够在一个可以设定的时间周期（默认 30 毫秒）内传输完成时，QEMU/KVM 会关闭源宿主机上的客户机，再将剩余的数据量传输到目的主机上，最后传输过来的内存内容在目的宿主机上恢复客户机的运行状态。&lt;/li>
&lt;li>至此，KVM 的动态迁移操作就完成了。迁移后的客户机尽可能与迁移前一致，除非目的主机上缺少一些配置，比如网桥等。注意，当客户机中内存使用率非常大而且修改频繁时，内存中数据不断被修改的速度大于 KVM 能够传输的内存速度时，动态迁移的过程是完成不了的，这时候只能静态迁移。&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>3、迁移的注意事项&lt;/strong>&lt;/p>
&lt;p>无论是冷迁移还是热迁移，注意事项大都差不多&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>迁移前目标服务器的要求如下：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>最好迁移的服务器 cpu 品牌一样；&lt;/li>
&lt;li>64 位只能在 64 位宿主机间迁移，32 位可以迁移 32 位和 64 位宿主机；&lt;/li>
&lt;li>宿主机中的虚拟机名字不能冲突；&lt;/li>
&lt;li>目的宿主机和源宿主机软件配置尽可能的相同，如 有相同的桥接网卡，资源池等；&lt;/li>
&lt;li>两台迁移的主机 cat /proc/cpuinfo |grep nx 的设置是相同的 NX，全名为“No eXecute”，即“禁止运行”，是应用在 CPU 的一种技术，用作把存储器区域分隔为只供存储处理器指令集，或只供数据使用。任何使用 NX 技术的存储器，代表仅供数据使用，因此处理器的指令集并不能在这些区域存储。这种技术可防止大多数的缓冲溢出，即一些恶意程序，把自身的恶意指令集放在其他程序的数据存储区并运行，从而把整台计算机控制。&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>1、静态迁移&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>拷贝镜像文件和虚拟机配置文件；&lt;/li>
&lt;li>重新定义此虚拟机。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>2、动态迁移&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>创建共享存储；&lt;/li>
&lt;li>两台机器挂载共享存储(手工挂载；使用资源池)；&lt;/li>
&lt;li>启动动态迁移；&lt;/li>
&lt;li>创建迁移后的虚拟机配置文件；&lt;/li>
&lt;li>重新定义虚拟机。&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>冷迁移呢，比较简单，可以理解为就是在一台电脑上将虚拟机的配置文件复制到另一台电脑上&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#将虚拟机磁盘文件和配置文件都复制到一台新设备上&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>root@kvm-test ~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># scp /kvm/disk/test1.raw root@192.168.171.10:/kvm/disk/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>root@kvm-test ~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># scp /etc/libvirt/qemu/test1.xml root@192.168.171.10:/etc/libvirt/qemu/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 在新设备上可以将配置文件中的UUID上删除掉&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#然后直接在新设备上定义配置文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>root@kvm2 ~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># virsh define test1.xml&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#之后就可以启动了&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="kvm-虚拟机热迁移配置实例">kvm 虚拟机热迁移配置实例&lt;/h1>
&lt;p>&lt;strong>环境如下：&lt;/strong>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>hostname&lt;/th>
&lt;th>IP&lt;/th>
&lt;th>service&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>kvm1&lt;/td>
&lt;td>192.168.171.151&lt;/td>
&lt;td>kvm&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>kvm2&lt;/td>
&lt;td>192.168.171.10&lt;/td>
&lt;td>kvm&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>nfs&lt;/td>
&lt;td>192.168.171.152&lt;/td>
&lt;td>nfs&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>如果没有 kvm 环境可参考：&lt;a href="https://blog.51cto.com/14227204/2514055">KVM 虚拟化&lt;/a> 进行搭建&lt;/strong>&lt;/p>
&lt;p>&lt;strong>1、配置 NFS 共享存储&lt;/strong>&lt;/p>
&lt;pre>&lt;code>[root@nfs ~]# yum -y install nfs-utils rpcbind # 安装nfs
[root@nfs ~]# systemctl enable nfs # 设置为开机自启
[root@nfs ~]# systemctl enable rpcbind
[root@nfs ~]# mkdir -p /nfs-share # 创建需要共享的目录
[root@nfs ~]# vim /etc/exports
/nfs-share *(rw,sync,no_root_squash)
#第一列代表共享的目录
#第二列的星号代表允许所有网络访问；
#rw代表读写权限；sync代表同步写入磁盘；
#no_root_squash表示当前客户机以root身份访问时赋予本地root权限
# （默认是root_squash，将作为nfsnobody用户对待），若不加no_root_squash，
#可能会导致被降权，而无法进行读写（wr）
[root@nfs ~]# systemctl restart rpcbind # 重启服务
[root@nfs ~]# systemctl restart nfs # 重启服务
[root@nfs ~]# netstat -anput | grep rpc # 确定已经启动
[root@nfs ~]# showmount -e # 查看本机共享的目录
Export list for nfs:
/nfs-share *
#设置防火墙规则，测试环境也可以直接关闭防火墙
[root@nfs ~]# firewall-cmd --add-service=rpc-bind --permanent
[root@nfs ~]# firewall-cmd --add-service=nfs --permanent
[root@nfs ~]# firewall-cmd --add-service=mountd --permanent
[root@nfs ~]# systemctl restart firewalld #重启防火墙，使配置生效
&lt;/code>&lt;/pre>
&lt;p>我这里的迁移操作依赖于桌面图形化环境，命令热迁移暂时没研究过。&lt;/p>
&lt;p>&lt;strong>2、两台 KVM 服务器配置如下（两台 kvm 主机都需要进行下面的配置）：&lt;/strong>&lt;/p>
&lt;p>安装 rpcbind 软件包，并启动 rpcbind 服务&lt;/p>
&lt;pre>&lt;code>[root@kvm1 ~]# yum -y install nfs-utils rpcbind
[root@kvm1 ~]# systemctl enable rpcbind
[root@kvm1 ~]# systemctl start rpcbind
[root@kvm1 ~]# showmount -e 192.168.171.152 # 查询nfs服务器共享的目录
Export list for 192.168.171.152:
/nfs-share *
[root@kvm1 ~]# mount -t nfs 192.168.171.152:/nfs-share /kvm/disk/ # 挂载
[root@kvm1 ~]# df -hT /kvm/disk/
Filesystem Type Size Used Avail Use% Mounted on
192.168.171.152:/nfs-share nfs4 50G 5.2G 45G 11% /kvm/disk
# 在其中一台服务器上写入一个测试文件，看看在其他服务器上是否可以看到
[root@kvm1 ~]# touch /kvm/disk/test1
[root@kvm2 ~]# ls /kvm/disk/
test1
&lt;/code>&lt;/pre>
&lt;p>至此，就保证了两台 kvm 服务器使用的目录都是同一块磁盘存储的**（注意：两台 kvm 虚拟机的挂载 nfs 文件系统的目录路径必须一致，我这里两台 kvm 虚拟机都是挂载到了/kvm/disk/目录下，否则会在后面的操作中发生错误）。**
&lt;strong>3、在两个 kvm 服务器上分别创建存储卷：&lt;/strong>&lt;/p>
&lt;pre>&lt;code>[root@kvm1 ~]# virt-manager # 打开虚拟机控制台
• 1.
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/fp1mca/1624238952565-a28b53c5-af81-4e37-9ef8-a0d01e082bc5.png" alt="">
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/fp1mca/1624238952540-d601f3a4-c7ed-4503-9c37-216ed692b11e.png" alt="">
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/fp1mca/1624238952686-bc9dff44-9781-4dfb-b3ed-0cb03b98cf3d.png" alt="">
&lt;strong>下面对话框中，目标路径是 KVM 本机的“/kvm/disk”，主机名写的是 nfs 服务器的 IP 地址，源路径是 nfs 服务器共享的目录。&lt;/strong>
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/fp1mca/1624238952579-b02545bb-7ca1-4a83-bc0d-2e8719682990.png" alt="">
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/fp1mca/1624238952500-69ed3cf1-e065-4900-9070-261b6682c441.png" alt="">
&lt;strong>以上操作同样需要在第二台 KVM 上进行操作，最好定义的存储池名字等都一致。以免发生不必要的麻烦。&lt;/strong>
&lt;strong>4、在 kvm1 上新建一个虚拟机以便进行迁移测试&lt;/strong>
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/fp1mca/1624238952581-06ddcd29-6f54-4001-bc0a-ecdea60f7390.png" alt="">
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/fp1mca/1624238952542-bf61d163-7ca7-42ae-b656-45a507136eb9.png" alt="">
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/fp1mca/1624238952537-70d61e92-b555-4432-be56-04ac9b28f151.png" alt="">
自行上传一个 centos 的 iso 系统文件，这里需要指定要安装的 iso 文件：
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/fp1mca/1624238952645-6bd44977-33af-4026-989b-590b2fa9e4ca.png" alt="">
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/fp1mca/1624238952691-f113d00f-87fe-4a66-a150-a0e7fc87663c.png" alt="">
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/fp1mca/1624238952531-833b2bf2-e080-4fa5-b248-42af4b4d59d6.png" alt="">
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/fp1mca/1624238952657-e63a5df2-6108-4e87-999f-bf5aefa536cb.png" alt="">
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/fp1mca/1624238952593-73b584c4-ea3d-4a73-804a-619c735ccf65.png" alt="">
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/fp1mca/1624238952649-315b9c0f-3491-4928-820d-4f7839c8170d.png" alt="">
&lt;strong>下来正常安装即可&lt;/strong>
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/fp1mca/1624238952700-65397ca3-e6fa-4695-a870-df056ca3cbea.png" alt="">
&lt;strong>5、将新建的虚拟机网络配置为 Bridge 模式，可以 ping 通外网&lt;/strong>
以下操作主要是为了模拟虚拟机为公网用户提供服务中进行热迁移。
&lt;strong>1）kvm1 操作如下：&lt;/strong>&lt;/p>
&lt;pre>&lt;code>[root@kvm1 ~]# systemctl stop NetworkManager # 关闭此服务
[root@kvm1 ~]# virsh iface-bridge ens33 br0 # 执行此命令时，若提示以下信息，不用在意，因为其已经存在了
Created bridge br0 with attached device ens33
Bridge interface br0 started
[root@kvm1 ~]# ls /etc/sysconfig/network-scripts/ | grep br0 #确定有此文件
ifcfg-br0
[root@kvm1 ~]# virsh destroy centos7.0
Domain centos7.0 destroyed
[root@kvm1 ~]# virsh edit centos7.0 # 编辑虚拟机的配置文件，定位到interface
&amp;lt;interface type='bridge'&amp;gt; # 定位到interface
&amp;lt;mac address='52:54:00:3c:45:fb'/&amp;gt; # 删除mac
&amp;lt;source bridge='br0'/&amp;gt;
&amp;lt;model type='virtio'/&amp;gt;
[root@kvm1 ~]# virsh start centos7.0 # 启动
• 1.
• 2.
• 3.
• 4.
• 5.
• 6.
• 7.
• 8.
• 9.
• 10.
• 11.
• 12.
• 13.
• 14.
&lt;/code>&lt;/pre>
&lt;p>开启虚拟机后，配置虚拟机的网卡配置文件，默认网卡文件为 ifcfg-eth0：
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/fp1mca/1624238952577-e713622d-8c8f-4ba0-9767-924fcb24c14b.png" alt="">
&lt;strong>重启网络服务，并且确认 IP 地址：&lt;/strong>
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/fp1mca/1624238952764-8f711e4a-ddd1-410f-b0b0-683092de59c4.png" alt="">
现在可以在虚拟机上执行“ping &lt;a href="https://www.baidu.com">www.baidu.com&lt;/a>” 命令，使其持续 ping 公网。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/fp1mca/1624238952688-a18c5eda-8d75-4fa4-9f91-ff525c4ad790.png" alt="">
&lt;strong>2）kvm2 操作如下：&lt;/strong>&lt;/p>
&lt;pre>&lt;code>[root@kvm2 ~]# systemctl stop NetworkManager
[root@kvm2 ~]# virsh iface-bridge ens33 br0
Created bridge br0 with attached device ens33
Bridge interface br0 started
[root@kvm2 ~]# ls /etc/sysconfig/network-scripts/ | grep br0
ifcfg-br0
#由于kvm2没有虚拟机，所以只需将网络更改为桥接模式即可，。
#以上配置是为了防止虚拟机迁移到这台服务器后，无法和公网进行联系。
• 1.
• 2.
• 3.
• 4.
• 5.
• 6.
• 7.
• 8.
• 9.
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>6、开始准备对新建的 centos 7 进行热迁移&lt;/strong>&lt;/p>
&lt;pre>&lt;code>[root@kvm1 ~]# virt-manager
• 1.
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/fp1mca/1624238952674-f4803ce5-7926-4113-acc7-7614a20e4eb7.png" alt="">
&lt;strong>填写如下，填写完成后，单击“连接”：&lt;/strong>
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/fp1mca/1624238952633-3d382723-1a7d-4bde-93a1-3cd906c0f1cc.png" alt="">
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/fp1mca/1624238952662-bf60e403-d4f0-4ff9-9db1-1c6807334fcc.png" alt="">&lt;/p>
&lt;pre>&lt;code>[root@kvm1 ~]# yum -y install openssh-askpass # 安装
• 1.
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/fp1mca/1624238952634-7d1acf5e-e5c3-4705-ab8c-31165b3f9bf0.png" alt="">
根据弹出的对话框提示，输入“yes”：
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/fp1mca/1624238952641-3668dbb4-8147-4d21-9f14-5efff6807d0c.png" alt="">
&lt;strong>输入目标主机的密码&lt;/strong>
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/fp1mca/1624238952724-c525a520-bafb-4a93-ab66-a7dba5e479c3.png" alt="">
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/fp1mca/1624238952749-9aac3015-e7ef-4986-8669-b7a15066d9e0.png" alt="">
&lt;strong>7、开始进行热迁移&lt;/strong>
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/fp1mca/1624238952661-9d040c3a-e6d4-4ee0-b4ae-1ec46ce124f0.png" alt="">
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/fp1mca/1624238952661-20ff5884-b144-4145-95ed-14cd2f4a2981.png" alt="">
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/fp1mca/1624238952715-a51c0483-244a-44d8-8ca2-f2f27f839fb0.png" alt="">
迁移完成：
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/fp1mca/1624238952805-0010becc-83e9-4200-9516-ce51b4c17cc6.png" alt="">
&lt;strong>现在去目标 kvm 服务器上，打开新迁移过去的虚拟机（会发现 ping 命令还在继续，压根就没有中断过）：&lt;/strong>
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/fp1mca/1624238952705-200fb037-f0dd-4c6f-8331-cd87f3f180d2.png" alt="">&lt;/p></description></item><item><title>Docs: 多宿主机集中管理</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86%E6%A1%88%E4%BE%8B/%E5%A4%9A%E5%AE%BF%E4%B8%BB%E6%9C%BA%E9%9B%86%E4%B8%AD%E7%AE%A1%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86%E6%A1%88%E4%BE%8B/%E5%A4%9A%E5%AE%BF%E4%B8%BB%E6%9C%BA%E9%9B%86%E4%B8%AD%E7%AE%A1%E7%90%86/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;p>除了 OpenStack 以外，市面上没有多少可以批量管理 KVM 主机的项目&lt;del>&lt;del>o(╯□╰)o&lt;/del>&lt;/del> 唯一能搜到的只有一个 WebVirtCloud ~~~~&lt;/p>
&lt;p>为什么要用 Python 写前端呢。。。裂开了。。。。o(╯□╰)o&lt;/p>
&lt;h1 id="webvirtcloud">WebVirtCloud&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/retspen/webvirtmgr">GitHub 项目，retspen/webvirtmgr&lt;/a>(已于 2018 年停止更新，被 webvirtcloud 代替)&lt;/li>
&lt;li>&lt;a href="https://github.com/retspen/webvirtcloud">GitHub 项目，retspen/webvirtcloud&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>WebVirtCloud 是一个由 Python 的 Web 框架 Django 编写的前后端一体项目。
WebVirtCloud 有多个组件&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Nginx&lt;/strong> 监听 80 端口，入口，用来响应 &lt;code>/static/&lt;/code> 下的各种静态资源&lt;/li>
&lt;li>&lt;strong>Webvirtcloud&lt;/strong> 监听 8000 端口，处理 &lt;code>IP:PORT/&lt;/code> 路径的访问请求，展示出的进程名为 gunicorn
&lt;ul>
&lt;li>Gunicorn(Green Unicorn) 是一个 UNIX 下符合 &lt;a href="https://en.wikipedia.org/wiki/Web_Server_Gateway_Interface">WSGI&lt;/a> 规范的 HTTP 服务器(说简单点就是一个类似 Nginx 程序)。
&lt;ul>
&lt;li>WSGI 指定了“web 服务器”和“Python web 应用/ web 框架”之间的标准接口，以提高 web 应用在一系列 web 服务器间的移植性。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Novnc&lt;/strong> 监听 6080 端口，处理 &lt;code>IP:PORT/novncd/&lt;/code> 路径的访问请求，展示出的进程名为 novncd&lt;/li>
&lt;/ul>
&lt;p>WebVirtCloud 在容器中通过老式的 runsvdir 运行，runsvdir 会读取 -P 选项指定的目录，可以看到，runsv 程序后的参数，就是 /etc/service/ 目录下的目录名&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>root@e7d4f80811cb:~# ll /etc/service
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lrwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">22&lt;/span> Nov &lt;span style="color:#ae81ff">16&lt;/span> &lt;span style="color:#ae81ff">2017&lt;/span> /etc/service -&amp;gt; runit/runsvdir/default/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root@e7d4f80811cb:~# ll /etc/runit/runsvdir/default/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>total &lt;span style="color:#ae81ff">40&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">4096&lt;/span> Jun &lt;span style="color:#ae81ff">2&lt;/span> 15:16 ./
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">4096&lt;/span> Sep &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#ae81ff">2021&lt;/span> ../
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">4096&lt;/span> Jun &lt;span style="color:#ae81ff">3&lt;/span> 06:29 cron/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">4096&lt;/span> Jun &lt;span style="color:#ae81ff">3&lt;/span> 06:29 nginx/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">4096&lt;/span> Jun &lt;span style="color:#ae81ff">3&lt;/span> 06:29 nginx-log-forwarder/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">4096&lt;/span> Jun &lt;span style="color:#ae81ff">3&lt;/span> 06:29 novnc/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">4096&lt;/span> Jun &lt;span style="color:#ae81ff">3&lt;/span> 06:29 sshd/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">4096&lt;/span> Jun &lt;span style="color:#ae81ff">3&lt;/span> 07:05 webvirtcloud/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root@e7d4f80811cb:~# ps -ef f
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root &lt;span style="color:#ae81ff">1616850&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 14:29 ? Sl 0:00 /usr/local/bin/containerd-shim-runc-v2 -namespace moby -id e7d4f80811cb5aaeec2cbc132a5995dac13ae4c25d21528d421d9d5c1481b36f -address /run/containerd/containerd.sock
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root &lt;span style="color:#ae81ff">1616872&lt;/span> &lt;span style="color:#ae81ff">1616850&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 14:29 ? Ss 0:00 &lt;span style="color:#ae81ff">\_&lt;/span> /usr/bin/python3 -u /sbin/my_init
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root &lt;span style="color:#ae81ff">1616921&lt;/span> &lt;span style="color:#ae81ff">1616872&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 14:29 ? S 0:00 | &lt;span style="color:#ae81ff">\_&lt;/span> /usr/sbin/syslog-ng --pidfile /var/run/syslog-ng.pid -F --no-caps
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root &lt;span style="color:#ae81ff">1616928&lt;/span> &lt;span style="color:#ae81ff">1616872&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 14:29 ? S 0:00 | &lt;span style="color:#ae81ff">\_&lt;/span> /usr/bin/runsvdir -P /etc/service
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root &lt;span style="color:#ae81ff">1616929&lt;/span> &lt;span style="color:#ae81ff">1616928&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 14:29 ? Ss 0:00 | &lt;span style="color:#ae81ff">\_&lt;/span> runsv cron
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root &lt;span style="color:#ae81ff">1616935&lt;/span> &lt;span style="color:#ae81ff">1616929&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 14:29 ? S 0:00 | | &lt;span style="color:#ae81ff">\_&lt;/span> /usr/sbin/cron -f
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root &lt;span style="color:#ae81ff">1616930&lt;/span> &lt;span style="color:#ae81ff">1616928&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 14:29 ? Ss 0:00 | &lt;span style="color:#ae81ff">\_&lt;/span> runsv sshd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root &lt;span style="color:#ae81ff">1616931&lt;/span> &lt;span style="color:#ae81ff">1616928&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 14:29 ? Ss 0:00 | &lt;span style="color:#ae81ff">\_&lt;/span> runsv webvirtcloud
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>www-data &lt;span style="color:#ae81ff">1616938&lt;/span> &lt;span style="color:#ae81ff">1616931&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 14:29 ? S 0:00 | | &lt;span style="color:#ae81ff">\_&lt;/span> /srv/webvirtcloud/venv/bin/python3 /srv/webvirtcloud/venv/bin/gunicorn webvirtcloud.wsgi:application -c /srv/webvirtcloud/gunicorn.conf.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>www-data &lt;span style="color:#ae81ff">1616948&lt;/span> &lt;span style="color:#ae81ff">1616938&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 14:29 ? Sl 0:00 | | &lt;span style="color:#ae81ff">\_&lt;/span> /srv/webvirtcloud/venv/bin/python3 /srv/webvirtcloud/venv/bin/gunicorn webvirtcloud.wsgi:application -c /srv/webvirtcloud/gunicorn.conf.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>www-data &lt;span style="color:#ae81ff">1616949&lt;/span> &lt;span style="color:#ae81ff">1616938&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 14:29 ? Sl 0:00 | | &lt;span style="color:#ae81ff">\_&lt;/span> /srv/webvirtcloud/venv/bin/python3 /srv/webvirtcloud/venv/bin/gunicorn webvirtcloud.wsgi:application -c /srv/webvirtcloud/gunicorn.conf.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>www-data &lt;span style="color:#ae81ff">1616950&lt;/span> &lt;span style="color:#ae81ff">1616938&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 14:29 ? Sl 0:00 | | &lt;span style="color:#ae81ff">\_&lt;/span> /srv/webvirtcloud/venv/bin/python3 /srv/webvirtcloud/venv/bin/gunicorn webvirtcloud.wsgi:application -c /srv/webvirtcloud/gunicorn.conf.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>www-data &lt;span style="color:#ae81ff">1616951&lt;/span> &lt;span style="color:#ae81ff">1616938&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 14:29 ? Sl 0:00 | | &lt;span style="color:#ae81ff">\_&lt;/span> /srv/webvirtcloud/venv/bin/python3 /srv/webvirtcloud/venv/bin/gunicorn webvirtcloud.wsgi:application -c /srv/webvirtcloud/gunicorn.conf.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>www-data &lt;span style="color:#ae81ff">1616953&lt;/span> &lt;span style="color:#ae81ff">1616938&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 14:29 ? Sl 0:00 | | &lt;span style="color:#ae81ff">\_&lt;/span> /srv/webvirtcloud/venv/bin/python3 /srv/webvirtcloud/venv/bin/gunicorn webvirtcloud.wsgi:application -c /srv/webvirtcloud/gunicorn.conf.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root &lt;span style="color:#ae81ff">1616932&lt;/span> &lt;span style="color:#ae81ff">1616928&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 14:29 ? Ss 0:00 | &lt;span style="color:#ae81ff">\_&lt;/span> runsv novnc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>www-data &lt;span style="color:#ae81ff">1616939&lt;/span> &lt;span style="color:#ae81ff">1616932&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 14:29 ? Sl 0:00 | | &lt;span style="color:#ae81ff">\_&lt;/span> /srv/webvirtcloud/venv/bin/python3 /srv/webvirtcloud/console/novncd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root &lt;span style="color:#ae81ff">1616933&lt;/span> &lt;span style="color:#ae81ff">1616928&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 14:29 ? Ss 0:00 | &lt;span style="color:#ae81ff">\_&lt;/span> runsv nginx-log-forwarder
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root &lt;span style="color:#ae81ff">1616940&lt;/span> &lt;span style="color:#ae81ff">1616933&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 14:29 ? S 0:00 | | &lt;span style="color:#ae81ff">\_&lt;/span> tail -F /var/log/nginx/error.log
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root &lt;span style="color:#ae81ff">1616934&lt;/span> &lt;span style="color:#ae81ff">1616928&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 14:29 ? Ss 0:00 | &lt;span style="color:#ae81ff">\_&lt;/span> runsv nginx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root &lt;span style="color:#ae81ff">1616943&lt;/span> &lt;span style="color:#ae81ff">1616934&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 14:29 ? S 0:00 | &lt;span style="color:#ae81ff">\_&lt;/span> nginx: master process /usr/sbin/nginx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>www-data &lt;span style="color:#ae81ff">1616944&lt;/span> &lt;span style="color:#ae81ff">1616943&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 14:29 ? S 0:00 | &lt;span style="color:#ae81ff">\_&lt;/span> nginx: worker process
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>www-data &lt;span style="color:#ae81ff">1616945&lt;/span> &lt;span style="color:#ae81ff">1616943&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 14:29 ? S 0:00 | &lt;span style="color:#ae81ff">\_&lt;/span> nginx: worker process
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="部署">部署&lt;/h2>
&lt;h3 id="构建镜像">构建镜像&lt;/h3>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/retspen/webvirtcloud/wiki/Docker-Installation-&amp;amp;-Update">GitHub 项目 Wiki，Docker Installation &amp;amp; Update&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>安装 git 和 python3&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo apt install git python3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>or
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>yum install git python3
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>克隆项目仓库&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git clone https://github.com/retspen/webvirtcloud.git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>进入项目目录&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>cd webvirtcloud/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>拷贝 setting.py 文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>cp webvirtcloud/settings.py.template webvirtcloud/settings.py
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用 Python 脚本生成随机数&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>export RandomNum&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>python3 conf/runit/secret_generator.py&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>将 ${RandomNum} 的值填到 settings.py 文件中的 SECRET_KEY 变量中&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 生成的随机数有可能带着 $ 等符号，没法用 sed 命令啊~~~怎么搞？~&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>（可选）需要修改一下 db.sqlite3 保存位置，以便可以将数据库挂载到容器外部，默认情况下数据库文件在根目录跟很多文件在一起，并且没法修改数据保存位置。。。。o(╯□╰)o
代码：&lt;code>webvirtcloud/settings.py.template&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>DATABASES &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;default&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ENGINE&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;django.db.backends.sqlite3&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># &amp;#34;NAME&amp;#34;: Path.joinpath(BASE_DIR, &amp;#34;db.sqlite3&amp;#34;),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 改为下面的代码&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;NAME&amp;#34;&lt;/span>: Path&lt;span style="color:#f92672">.&lt;/span>joinpath(BASE_DIR, &lt;span style="color:#e6db74">&amp;#34;data/db.sqlite3&amp;#34;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>注意：构建镜像时，将会初始化数据库，生成所需的各种表&lt;/p>
&lt;/blockquote>
&lt;p>构建容器&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker build -t lchdzh/webvirtcloud:v1.0.0 .
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="运行">运行&lt;/h3>
&lt;p>准备目录&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>mkdir -p /opt/webvirtcloud/&lt;span style="color:#f92672">{&lt;/span>ssh,data&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 将构建时初始化的数据库文件拷贝到本地(若构建镜像时修改了数据库文件位置的话则执行此操作)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker run --rm -d --name webvirtcloud lchdzh/webvirtcloud
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker cp webvirtcloud:/srv/webvirtcloud/data/db.sqlite3 /opt/webvirtcloud/data/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker stop webvirtcloud
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>chown -R www-data:www-data /opt/webvirtcloud/&lt;span style="color:#f92672">{&lt;/span>ssh,data&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>nerdctl run -d --name webvirtcloud &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --network host &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -v /opt/webvirtcloud/data:/srv/webvirtcloud/data &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -v /opt/webvirtcloud/ssh:/var/www/.ssh &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> lchdzh/webvirtcloud
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在容器中生成密钥，禁用 StrictHostKeyChecking&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>cat &amp;gt; ~www-data/.ssh/config &lt;span style="color:#e6db74">&amp;lt;&amp;lt; EOF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">Host *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">StrictHostKeyChecking no
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>chown www-data -R ~www-data/.ssh/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>chown www-data -R /srv/webvirtcloud/data
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>setuser www-data ssh-keygen -t rsa -P &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span> -f /var/www/.ssh/id_rsa
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>setuser www-data ssh-copy-id -i /var/www/.ssh/id_rsa.pub root@192.168.0.10
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: 克隆与批量创建虚拟机</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86%E6%A1%88%E4%BE%8B/%E5%85%8B%E9%9A%86%E4%B8%8E%E6%89%B9%E9%87%8F%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E6%9C%BA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/1.2.%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B7%A5%E5%85%B7/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86%E6%A1%88%E4%BE%8B/%E5%85%8B%E9%9A%86%E4%B8%8E%E6%89%B9%E9%87%8F%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E6%9C%BA/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/virtualization_deployment_and_administration_guide/cloning-a-vm">https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/virtualization_deployment_and_administration_guide/cloning-a-vm&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>注意：CentOS7 想要挂载 Ubuntu 20.04 虚拟机内的文件是不行的，内核不支持，报错如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># guestmount --rw -a /var/lib/libvirt/images/common-ubuntu-test.bj-test.qcow2 -m /dev/ubuntu-vg/lv-0 /mnt/test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>libguestfs: error: mount_options: mount exited with status 32: mount: wrong fs type, bad option, bad superblock on /dev/mapper/ubuntu--vg-lv--0,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> missing codepage or helper program, or other error
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> In some cases useful info is found in syslog - try
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dmesg | tail or so.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>guestmount: ‘/dev/ubuntu-vg/lv-0’ could not be mounted.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>guestmount: Did you mean to mount one of these filesystems?
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>guestmount: /dev/sda1 &lt;span style="color:#f92672">(&lt;/span>unknown&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>guestmount: /dev/sda2 &lt;span style="color:#f92672">(&lt;/span>xfs&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>guestmount: /dev/ubuntu-vg/lv-0 &lt;span style="color:#f92672">(&lt;/span>xfs&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其他依赖挂载的命令都是这种报错，比如 virt-sysprep、virt-edit 等等&lt;/p>
&lt;p>通过 virt-sysprep 传送网络设备的配置文件？&lt;/p>
&lt;h1 id="修改-vm-的-ip">修改 VM 的 IP&lt;/h1></description></item></channel></rss>