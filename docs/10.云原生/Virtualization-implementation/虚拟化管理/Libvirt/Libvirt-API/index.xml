<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦的站点 – 使用 libvirt API 的其他应用程序</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Virtualization-implementation/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/Libvirt/Libvirt-API/</link><description>Recent content in 使用 libvirt API 的其他应用程序 on 断念梦的站点</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Virtualization-implementation/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/Libvirt/Libvirt-API/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Libvirt API</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Virtualization-implementation/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/Libvirt/Libvirt-API/Libvirt-API/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Virtualization-implementation/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/Libvirt/Libvirt-API/Libvirt-API/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://libvirt.org/html/index.html">官网，API 参考&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://libvirt.org/apps.html">官网，使用 libvirt 的应用程序&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>在官方的 API 参考中，包含所有 C 语言表示的 API 信息，这些 API 分为如下几类：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://libvirt.org/html/libvirt-libvirt-common.html">common&lt;/a> # libvirt 和 libvirt-admin 库的常用宏和枚举&lt;/li>
&lt;li>&lt;a href="https://libvirt.org/html/libvirt-libvirt-domain.html">domain&lt;/a> # 用于管理 Domain 的 API&lt;/li>
&lt;li>&lt;a href="https://libvirt.org/html/libvirt-libvirt-domain-checkpoint.html">domain checkpoint&lt;/a> # 用于管理 Domain 检查点的 API&lt;/li>
&lt;li>&lt;a href="https://libvirt.org/html/libvirt-libvirt-domain-snapshot.html">domain snapshot&lt;/a> # 用于管理 Domain 快照的 API&lt;/li>
&lt;li>&lt;a href="https://libvirt.org/html/libvirt-virterror.html">error&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://libvirt.org/html/libvirt-libvirt-event.html">event&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://libvirt.org/html/libvirt-libvirt-host.html">host&lt;/a> # 用于管理主机的 API&lt;/li>
&lt;li>&lt;a href="https://libvirt.org/html/libvirt-libvirt-interface.html">interface&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://libvirt.org/html/libvirt-libvirt-network.html">network&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://libvirt.org/html/libvirt-libvirt-nodedev.html">node device&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://libvirt.org/html/libvirt-libvirt-nwfilter.html">network filter&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://libvirt.org/html/libvirt-libvirt-secret.html">secret&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://libvirt.org/html/libvirt-libvirt-storage.html">storage&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://libvirt.org/html/libvirt-libvirt-stream.html">stream&lt;/a> and &lt;a href="https://libvirt.org/html/libvirt-libvirt-admin.html">admin&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://libvirt.org/html/libvirt-libvirt-qemu.html">QEMU&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://libvirt.org/html/libvirt-libvirt-lxc.html">LXC&lt;/a> libs&lt;/li>
&lt;/ul>
&lt;p>在我们使用非 C 代码，比如 Python、Go 的时候，如果想要找到 API 的说明，可以参考官方的 C 语言的 API 文档，函数名基本差不多，用一个最常见的“列出所有 Domain”举例：&lt;/p>
&lt;ul>
&lt;li>C: &lt;a href="https://libvirt.org/html/libvirt-libvirt-domain.html#virConnectListAllDomains">virConnectListAllDomains&lt;/a>&lt;/li>
&lt;li>Go: &lt;a href="https://pkg.go.dev/libvirt.org/go/libvirt#Connect.ListAllDomains">ListAllDomains&lt;/a>&lt;/li>
&lt;li>Python: listAllDomains
&lt;ul>
&lt;li>Python 好像没有 Go Package 网站那种东西，没法找到在线的 API 文档&lt;/li>
&lt;li>有个类似这样的代码 &lt;code>raise libvirtError(&amp;quot;virConnectListAllDomains() failed&amp;quot;)&lt;/code> 可以知道该方法对应的是哪个 C API 方法。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>总的来说，还是 Go 好用，追踪代码后注释明确，主时钟也包含对应的 C API 的链接&lt;/p>
&lt;h1 id="使用-libvirt-api-的应用程序">使用 Libvirt API 的应用程序&lt;a class="td-heading-self-link" href="#%e4%bd%bf%e7%94%a8-libvirt-api-%e7%9a%84%e5%ba%94%e7%94%a8%e7%a8%8b%e5%ba%8f" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>除了 virsh 以外，还有很多使用 Libvirt API 的应用&lt;/p>
&lt;h2 id="virt-host-validate--虚拟化宿主机环境检验">virt-host-validate # 虚拟化宿主机环境检验&lt;a class="td-heading-self-link" href="#virt-host-validate--%e8%99%9a%e6%8b%9f%e5%8c%96%e5%ae%bf%e4%b8%bb%e6%9c%ba%e7%8e%af%e5%a2%83%e6%a3%80%e9%aa%8c" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="virt-manager--图形化模式的虚拟机管理工具">virt-manager # 图形化模式的虚拟机管理工具&lt;a class="td-heading-self-link" href="#virt-manager--%e5%9b%be%e5%bd%a2%e5%8c%96%e6%a8%a1%e5%bc%8f%e7%9a%84%e8%99%9a%e6%8b%9f%e6%9c%ba%e7%ae%a1%e7%90%86%e5%b7%a5%e5%85%b7" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>virt-manager 是一个图形化的应用程序，通过 libvirt 管理虚拟机。&lt;/p>
&lt;p>virt-manager 提供了多个配套的工具&lt;/p>
&lt;ul>
&lt;li>virt-install # 是一个命令行工具，它提供了一种将操作系统配置到虚拟机中的简单方法。&lt;/li>
&lt;li>virt-viewer # 是一个轻量级的 UI 界面，用于与虚拟客户操作系统的图形显示进行交互。它可以显示 VNC 或 SPICE，并使用 libvirt 查找图形连接详细信息。&lt;/li>
&lt;li>virt-clone # 是一个用于克隆现有非活动客户的命令行工具。它复制磁盘映像，并使用指向复制磁盘的新名称、UUID 和 MAC 地址定义配置。&lt;/li>
&lt;li>virt-xml # 是一个命令行工具，用于使用 virt-install 的命令行选项轻松编辑 libvirt 域 XML。&lt;/li>
&lt;li>virt-bootstrap # 是一个命令行工具，提供了一种简单的方法来为基于 libvirt 的容器设置根文件系统。&lt;/li>
&lt;/ul>
&lt;p>详见 &lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Virtualization%20implementation/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/Libvirt/Libvirt%20API/virt-manager.md">virt-manager&lt;/a> 章节&lt;/p>
&lt;h2 id="libguestfs是一组用于访问和修改虚拟机vm磁盘映像的工具">libguestfs：是一组用于访问和修改虚拟机（VM）磁盘映像的工具&lt;a class="td-heading-self-link" href="#libguestfs%e6%98%af%e4%b8%80%e7%bb%84%e7%94%a8%e4%ba%8e%e8%ae%bf%e9%97%ae%e5%92%8c%e4%bf%ae%e6%94%b9%e8%99%9a%e6%8b%9f%e6%9c%bavm%e7%a3%81%e7%9b%98%e6%98%a0%e5%83%8f%e7%9a%84%e5%b7%a5%e5%85%b7" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;/blockquote>
&lt;p>可以使用它来查看和编辑 guest 虚拟机内的文件，更改 VM 的脚本， 监视磁盘使用/免费统计信息， 创建 guest 虚拟机，P2V， V2V，执行备份，克隆 VM，构建 VM，格式化磁盘，调整磁盘大小等等。&lt;/p>
&lt;p>使用 yum 安装即可直接使用：yum install libguestfs-tools&lt;/p></description></item><item><title>Docs: virt-install</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Virtualization-implementation/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/Libvirt/Libvirt-API/virt-install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Virtualization-implementation/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/Libvirt/Libvirt-API/virt-install/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/virt-manager/virt-manager/blob/main/man/virt-install.rst">GitHub 项目，virt-manager/virt-manager 中的 Manual(手册)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://man.cx/virt-install">Manual(手册)，virt-install(1)&lt;/a>（另一个网站的 Manual）&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>virt-install 是一个命令行工具，用于通过 Libvirt 管理程序管理库创建新的 KVM、Xen 或 Linux 容器。请参阅本文档末尾的&lt;a href="https://github.com/virt-manager/virt-manager/blob/main/man/virt-install.rst#examples">示例部分&lt;/a>以快速入门。&lt;/p>
&lt;p>virt-manager 在图形化界面创建的虚拟机本质上就是调用的 virt-install 命令在系统中执行的。virt-manager 创建的虚拟机生成的 xml 文件可以推导出 virt-install 创建同样虚拟机所需要使用到的参数。&lt;/p>
&lt;p>virt-install 命令中很多参数都可以在 &lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Virtualization%20implementation/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/Libvirt/XML%20%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/XML%20%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3.md">XML 文件&lt;/a>中找到对应的配置。比如 &lt;code>--memory&lt;/code> 的全部可配置参数可以在 &lt;a href="https://libvirt.org/formatdomain.html#memory-allocation">https://libvirt.org/formatdomain.html#memory-allocation&lt;/a> 这里找到。&lt;/p>
&lt;h1 id="syntax语法">Syntax(语法)&lt;a class="td-heading-self-link" href="#syntax%e8%af%ad%e6%b3%95" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;strong>virt-install &amp;ndash;name NAME &amp;ndash;memory MB STORAGE INSTALL [OPTIONS]&lt;/strong>&lt;/p>
&lt;p>许多参数都有子选项，要查看与该参数相关联的子选项的完整列表使用例子中类似的命令，例如：virt-install &amp;ndash;disk=?&lt;/p>
&lt;blockquote>
&lt;p>随着版本的更新，很多选项都会被更好的选项而替代，那些被弃用的选项可能不会在笔记中出现，具体详见官方文档。&lt;/p>
&lt;/blockquote>
&lt;p>有几个参数是在使用 libvirt 工具安装虚拟机时必须指定的：&lt;/p>
&lt;ul>
&lt;li>&amp;ndash;name is required&lt;/li>
&lt;li>&amp;ndash;memory amount in MiB is required&lt;/li>
&lt;li>&amp;ndash;disk storage must be specified (override with &amp;ndash;disk none)&lt;/li>
&lt;li>安装方式
&lt;ul>
&lt;li>&amp;ndash;location URL, &amp;ndash;cdrom CD/ISO, &amp;ndash;pxe, &amp;ndash;import, &amp;ndash;boot hd|cdrom|&amp;hellip;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>注意：
在创建虚拟机时，我们一般都会指定一下虚拟机的系统类型，以便优化 virtio 等性能相关功能。所有 virt-manager 支持的虚拟机列表可以通过 &lt;code>virt-install --osinfo list&lt;/code> 命令列出。&lt;/p>
&lt;/blockquote>
&lt;h2 id="general-options通用选项">GENERAL OPTIONS(通用选项)&lt;a class="td-heading-self-link" href="#general-options%e9%80%9a%e7%94%a8%e9%80%89%e9%a1%b9" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>-n, &amp;ndash;name STRING&lt;/strong> # 指定 VM 名称，必须要全局唯一&lt;/li>
&lt;li>&lt;strong>&amp;ndash;memory&lt;/strong> # 设定 VM 的内存大小，单位为 MiB&lt;/li>
&lt;li>-&lt;strong>-vcpus=VCPU[,maxvcpus=MAX][,sockets=NUM][,cores=NUM][,threads=NUM]&lt;/strong> # 设定 VCPU 的个数，最大数，CPU 插槽数，内核数，线程数&lt;/li>
&lt;li>-&lt;strong>-cpu=CPU&lt;/strong> # 设定 CPU 的型号及特性，如 coreduo 等，可以使用 kvm -cpu ? 来获取支持的 CPU 模式&lt;/li>
&lt;/ul>
&lt;h2 id="installation-options安装选项">INSTALLATION OPTIONS(安装选项)&lt;a class="td-heading-self-link" href="#installation-options%e5%ae%89%e8%a3%85%e9%80%89%e9%a1%b9" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>-c, &amp;ndash;cdrom=STRING&lt;/strong> # 设定从光盘介质安装&lt;/li>
&lt;li>&lt;strong>-l, &amp;ndash;location OPTIONS&lt;/strong> # 指定本地安装介质&lt;/li>
&lt;li>&lt;strong>&amp;ndash;import&lt;/strong> # 使用已经存在的磁盘镜像构建 VM。比如通过一个已经正常运行 VM 的文件&lt;/li>
&lt;/ul>
&lt;h2 id="guest-os-options虚拟机操作系统选项">Guest OS OPTIONS(虚拟机操作系统选项)&lt;a class="td-heading-self-link" href="#guest-os-options%e8%99%9a%e6%8b%9f%e6%9c%ba%e6%93%8d%e4%bd%9c%e7%b3%bb%e7%bb%9f%e9%80%89%e9%a1%b9" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>&amp;ndash;os-variant, &amp;ndash;osinfo OSNAME&lt;/strong> # 指定要虚拟机的操作系统的信息。常用来优化 virtio 等性能相关功能。OSNAME 可用的值可以用过 &lt;code>virt-install --osinfo list&lt;/code> 命令列出。
&lt;ul>
&lt;li>注意，&amp;ndash;osinfo 是新版本的名称&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="storage-options存储选项">STORAGE OPTIONS(存储选项)&lt;a class="td-heading-self-link" href="#storage-options%e5%ad%98%e5%82%a8%e9%80%89%e9%a1%b9" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="--disk">&amp;ndash;disk&lt;a class="td-heading-self-link" href="#--disk" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>-&lt;strong>-disk /Some/Storage/Path[,OPT1=VAL1][,OPT2=VAL2][,&amp;hellip;..]&lt;/strong>&lt;/p>
&lt;p>设置 VM 存储介质，比如最常见的就是 /var/lib/libvirt/images/XXX.qcow2 这种，virt-install 会自动生成目标文件所在路径，并记录成存储池。&lt;/p>
&lt;p>除了 VM 本身 OS 的存储介质，还可以设置诸如 cdrom 之类的存储介质。&lt;/p>
&lt;p>&lt;strong>SUB_OPTIONS：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>device=STRING&lt;/strong> # 指定设备类型，如 cdrom，disk。&lt;code>默认值: disk&lt;/code>&lt;/li>
&lt;li>&lt;strong>bus=STRING&lt;/strong> # 指定磁盘总线类型，如 ide、scsi、usb、virtio、xen&lt;/li>
&lt;li>&lt;strong>size=&lt;/strong> # 指定新磁盘映像的大小，单位为 GB&lt;/li>
&lt;li>&lt;strong>cache=&lt;/strong> # 指定缓存类型，如 none、writethrouth、writeback&lt;/li>
&lt;li>&lt;strong>format=&lt;/strong> # 指定磁盘映像格式，如 qcow2、raw、vmdk 等&lt;/li>
&lt;/ul>
&lt;h2 id="networking-options网络选项">NETWORKING OPTIONS(网络选项)&lt;a class="td-heading-self-link" href="#networking-options%e7%bd%91%e7%bb%9c%e9%80%89%e9%a1%b9" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>设置 VM 要使用的网络以便连接到宿主机上。说白了，就是告诉 qemu-system 要模拟什么样的网卡，以及要连接到宿主机的哪个网络设备上。可以在 &lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Virtualization%20implementation/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/Libvirt/XML%20%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/Domain.md#Network%20interfaces">Domain&lt;/a> 中找到更多关于网络的 XML 配置。&lt;/p>
&lt;p>如果省略 &amp;ndash;network，则将在来 VM 中创建单个NIC(网卡)。如果主机中有一个连接了物理接口的桥接设备，则该设备将用于连接。否则，将使用称为 default 的虚拟网络。可以多次指定此选项以设置多个NIC。&lt;/p>
&lt;h3 id="--network">&amp;ndash;network&lt;a class="td-heading-self-link" href="#--network" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>网络选项分两部分，这是网络类型及其名称，以及为这个类型的网络设置运行时行为&lt;/p>
&lt;p>&lt;strong>-w,&amp;ndash;network TYPE,OPT1=VAL1,OTP2=VAL2,&amp;hellip;&amp;hellip;&lt;/strong>&lt;/p>
&lt;p>&lt;strong>TYPE&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>bridge=BridgeName&lt;/strong> # 指定网络连接类型为 bridge 桥接模式，并选择用哪个桥&lt;/li>
&lt;li>&lt;strong>network=STRING&lt;/strong> # 连接到 &lt;code>virsh net-list&lt;/code> 命令列出的虚拟网络中。选项的值是虚拟网络的名称&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>SUB_OPTIONS：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>model=STRING&lt;/strong> # 指定 GuestOS 中的设备型号，如 e1000、virtio、rt18193 等&lt;/li>
&lt;li>&lt;strong>mac=STRING&lt;/strong> # 指定 mac 地址，&lt;code>默认值：随机&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="graphics-options图形选项">GRAPHICS OPTIONS(图形选项)&lt;a class="td-heading-self-link" href="#graphics-options%e5%9b%be%e5%bd%a2%e9%80%89%e9%a1%b9" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>这个选项并不是为 VM 设置任何与显示有关的虚拟硬件，而是指&lt;strong>我们如何访问 VM 的图形界面&lt;/strong>。可以在&lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Virtualization%20implementation/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/Libvirt/XML%20%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/Domain.md#Graphical%20framebuffers">Domain&lt;/a> 中找到更多关于连接 VM 图形界面的 XML 配置。&lt;/p>
&lt;blockquote>
&lt;p>注意，如果想要使用图形界面安装系统，则必须要配置图形选项，否则无法连接到为 VM 虚拟显卡。&lt;/p>
&lt;/blockquote>
&lt;p>如果未指定图形相关选项，则 virt-install 将会在 &lt;code>${DISPLAY}&lt;/code> 变量被设置时选择合适的图形与 VM 的虚拟显卡对接。否则，默认为 &lt;code>--graphics none&lt;/code>。&lt;/p>
&lt;h3 id="--graphics">&amp;ndash;graphics&lt;a class="td-heading-self-link" href="#--graphics" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>&lt;strong>&amp;ndash;graphics TYPE,OPT1=ARG1,OPT2=ARG2,&amp;hellip;&lt;/strong> #&lt;/p>
&lt;p>&lt;strong>TYPE：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>vnc&lt;/strong> # 在来宾中设置虚拟控制台并将其导出为主机中的 VNC 服务器。除非同时提供端口参数，否则 VNC 服务器将运行在 5900 或以上的第一个空闲端口号上。分配的实际 VNC 显示可以使用 vncdisplay 命令到 virsh 获得（或者可以使用 virt-viewer(1) 来处理这个细节以供使用）。&lt;/li>
&lt;li>&lt;strong>spice&lt;/strong> # 使用 Spice 协议导出来宾的控制台。 Spice 允许高级功能，如音频和 USB 设备流，以及改进的图形性能。&lt;/li>
&lt;li>&lt;strong>none&lt;/strong> # 不会为来宾分配图形控制台。来宾可能需要在来宾的第一个串行端口上配置文本控制台（这可以通过 &amp;ndash;extra-args 选项完成）。命令“virsh console NAME”可用于连接串行设备。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>SUB_OPTIONS：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>listen=STRING&lt;/strong> # 指定 vnc 监听的地址(默认值通常为 127.0.0.1。i.e.仅限本地主机使用)，如果配置 0.0.0.0，则可以被非宿主机的设备通过宿主机的 IP 与 PORT 来进行 vnc 访问&lt;/li>
&lt;li>&lt;strong>port=NUM&lt;/strong> # 指定访问该 VM 的 vnc 所使用的端口&lt;/li>
&lt;/ul>
&lt;h3 id="其他选项">其他选项&lt;a class="td-heading-self-link" href="#%e5%85%b6%e4%bb%96%e9%80%89%e9%a1%b9" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>&lt;strong>&amp;ndash;autoconsole STRING&lt;/strong> # 在使用 virt-install 创建虚拟机时，将要默认启用的交互式控制台。可用的值有 graphical、text、none。&lt;/p>
&lt;ul>
&lt;li>这个选项不是必须的，默认行为是自适应的，取决于 VM 的配置方式。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>&amp;ndash;noautoconsole&lt;/strong> # 与 &lt;code>--autoconsole none&lt;/code> 一样。&lt;/p>
&lt;p>推荐使用 &amp;ndash;noautoconsole，这样执行 virt-install 命令创建虚拟机时不会自动打开 virt-viewer，x11 转发还是比较卡的。推荐使用 VNC 连接端口以访问虚拟机的图像界面。&lt;/p>
&lt;h2 id="virtualization-options虚拟化选项">VIRTUALIZATION OPTIONS(虚拟化选项)&lt;a class="td-heading-self-link" href="#virtualization-options%e8%99%9a%e6%8b%9f%e5%8c%96%e9%80%89%e9%a1%b9" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="device-options设备选项">DEVICE OPTIONS(设备选项)&lt;a class="td-heading-self-link" href="#device-options%e8%ae%be%e5%a4%87%e9%80%89%e9%a1%b9" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>指定文本控制台、声音设备、串行接口、并行接口、显示接口等&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&amp;ndash;serial TYPE,OPT1=VAL1,OPT2=VAL2,&amp;hellip;&lt;/strong> # 指定一个串行设备附加到 VM，TYPE 包括 pty(伪终端)等&lt;/li>
&lt;li>-&lt;strong>-console=&lt;/strong> # 指定启动的控制台&lt;/li>
&lt;/ul>
&lt;h2 id="miscellaneous-options其他选项">MISCELLANEOUS OPTIONS(其他选项)&lt;a class="td-heading-self-link" href="#miscellaneous-options%e5%85%b6%e4%bb%96%e9%80%89%e9%a1%b9" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h1 id="应用示例">应用示例&lt;a class="td-heading-self-link" href="#%e5%ba%94%e7%94%a8%e7%a4%ba%e4%be%8b" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>使用本地文件当做磁盘镜像，VM 名字为 test，1024M 大小的内存，1 个 CPU，指定操作系统版本为 centos7，指定所使用的存储文件为 /var/lib/images/test.qcow2(该文件会自动创建)，指定网络桥接到 br0 上、模式为 virtio，指定图形模式为 vnc、把 vnc 暴露到宿主机上、监听端口为 5910&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>virt-install --import --name test &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>--memory &lt;span style="color:#ae81ff">2048&lt;/span> --vcpus &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>--os-variant centos7.0 &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>--disk /var/lib/libvirt/images/test/test.qcow2,size&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">100&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>--network bridge&lt;span style="color:#f92672">=&lt;/span>br0,model&lt;span style="color:#f92672">=&lt;/span>virtio &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>--graphics vnc,listen&lt;span style="color:#f92672">=&lt;/span>0.0.0.0,port&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">5910&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="使用-cdrom-安装系统">使用 cdrom 安装系统&lt;a class="td-heading-self-link" href="#%e4%bd%bf%e7%94%a8-cdrom-%e5%ae%89%e8%a3%85%e7%b3%bb%e7%bb%9f" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>virt-install --name centos7 &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>--memory &lt;span style="color:#ae81ff">4096&lt;/span> --vcpus &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>--os-variant centos7.0 &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>--disk /var/lib/libvirt/images/test/centos7.qcow2,size&lt;span style="color:#f92672">=&lt;/span>100,bus&lt;span style="color:#f92672">=&lt;/span>virtio &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>--network bridge&lt;span style="color:#f92672">=&lt;/span>br0,model&lt;span style="color:#f92672">=&lt;/span>virtio &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>--graphics vnc,listen&lt;span style="color:#f92672">=&lt;/span>0.0.0.0,port&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">5911&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>--noautoconsole &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>--cdrom /var/lib/libvirt/iso/CentOS-7-x86_64-DVD-2009.iso
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建完成后，可以使用 virt-viewer 访问虚拟机，也可以使用 VNC 连接到 5911 以访问虚拟机，然后开始安装系统。&lt;/p>
&lt;blockquote>
&lt;p>这里使用了 &amp;ndash;noautoconsole，所以不会自动打开 virt-viewer，x11 转发还是比较卡的，推荐使用 VNC 连接端口以访问虚拟机的图像界面
&amp;ndash;os-variant 可用的值可以用过 &lt;code>virt-install --osinfo list&lt;/code> 命令列出&lt;/p>
&lt;/blockquote>
&lt;p>这是最基本的创建方式，virt-install 会自动创建很多默认的虚拟设备以满足所需。我们只需要指定网络、连接显示的方式、系统版本、cpu、内存即可&lt;/p>
&lt;h3 id="其他安装">其他安装&lt;a class="td-heading-self-link" href="#%e5%85%b6%e4%bb%96%e5%ae%89%e8%a3%85" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>爱快，使用通用的 linux&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>virt-install --name ikuaios &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>--memory &lt;span style="color:#ae81ff">2048&lt;/span> --vcpus &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>--os-variant linux2022 &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>--disk /var/lib/libvirt/images/ikuaios.qcow2,size&lt;span style="color:#f92672">=&lt;/span>30,bus&lt;span style="color:#f92672">=&lt;/span>virtio &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>--network bridge&lt;span style="color:#f92672">=&lt;/span>br0,model&lt;span style="color:#f92672">=&lt;/span>virtio &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>--network bridge&lt;span style="color:#f92672">=&lt;/span>br1,model&lt;span style="color:#f92672">=&lt;/span>virtio &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>--graphics vnc,listen&lt;span style="color:#f92672">=&lt;/span>0.0.0.0,port&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">5901&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>--noautoconsole &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>--cdrom /var/lib/libvirt/iso/iKuai8_x64_3.7.6_Build202309081651.iso
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="chatgpt-通过-xml-文件推倒出来的-virt-install-参数">ChatGPT 通过 xml 文件推倒出来的 virt-install 参数&lt;a class="td-heading-self-link" href="#chatgpt-%e9%80%9a%e8%bf%87-xml-%e6%96%87%e4%bb%b6%e6%8e%a8%e5%80%92%e5%87%ba%e6%9d%a5%e7%9a%84-virt-install-%e5%8f%82%e6%95%b0" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">virt-install \&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--&lt;span style="color:#ae81ff">name=centos7-2009 \&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--&lt;span style="color:#ae81ff">memory=67108864 \&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--&lt;span style="color:#ae81ff">vcpus=2 \&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--&lt;span style="color:#ae81ff">cpu host-passthrough \&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--&lt;span style="color:#ae81ff">os-type=linux \&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--&lt;span style="color:#ae81ff">os-variant=centos7 \&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--&lt;span style="color:#ae81ff">boot menu=off \&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--&lt;span style="color:#ae81ff">disk path=/var/lib/libvirt/images/centos7-2009.qcow2,device=disk,bus=virtio \&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--&lt;span style="color:#ae81ff">network bridge=virbr0,model=virtio \&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--&lt;span style="color:#ae81ff">graphics none \&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--&lt;span style="color:#ae81ff">console pty,target_type=serial&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: libguestfs</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Virtualization-implementation/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/Libvirt/Libvirt-API/libguestfs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Virtualization-implementation/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/Libvirt/Libvirt-API/libguestfs/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/libguestfs/libguestfs">GitHub 项目，libguestfs/libguestfs&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://libguestfs.org/">官网&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Libguestfs 是用于访问和修改虚拟机磁盘映像的库和工具。&lt;/p>
&lt;h2 id="常见问题">常见问题&lt;a class="td-heading-self-link" href="#%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://access.redhat.com/solutions/4073061">https://access.redhat.com/solutions/4073061&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://wandering-wolf.tistory.com/entry/Centos-7-KVM-%EC%97%90%EC%84%9C-rhel-8-vm-virt-sysperp-error">https://wandering-wolf.tistory.com/entry/Centos-7-KVM-%EC%97%90%EC%84%9C-rhel-8-vm-virt-sysperp-error&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://dovangiang.wordpress.com/2021/08/06/errorcentos-mount-mount-exited-with-status-32-mount-wrong-fs-type-bad-option-bad-superblock/">https://dovangiang.wordpress.com/2021/08/06/errorcentos-mount-mount-exited-with-status-32-mount-wrong-fs-type-bad-option-bad-superblock/&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>注意：CentOS7 宿主机上想要挂载 Ubuntu 20.04 虚拟机的 xfs 格式的文件系统是不行的，内核版本低不支持，报错如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># guestmount --rw -a /var/lib/libvirt/images/common-ubuntu-test.bj-test.qcow2 -m /dev/ubuntu-vg/lv-0 /mnt/test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>libguestfs: error: mount_options: mount exited with status 32: mount: wrong fs type, bad option, bad superblock on /dev/mapper/ubuntu--vg-lv--0,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> missing codepage or helper program, or other error
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> In some cases useful info is found in syslog - try
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dmesg | tail or so.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>guestmount: ‘/dev/ubuntu-vg/lv-0’ could not be mounted.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>guestmount: Did you mean to mount one of these filesystems?
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>guestmount: /dev/sda1 &lt;span style="color:#f92672">(&lt;/span>unknown&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>guestmount: /dev/sda2 &lt;span style="color:#f92672">(&lt;/span>xfs&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>guestmount: /dev/ubuntu-vg/lv-0 &lt;span style="color:#f92672">(&lt;/span>xfs&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其他依赖挂载的命令都是这种报错，比如 virt-sysprep、virt-edit 等等。&lt;/p>
&lt;p>如果在 CentOS 7 宿主机上挂载 CentOS 7 虚拟机中的磁盘(或者挂载 ext4 的 Ubuntu)，则是可以的：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># guestmount --rw -a /var/lib/libvirt/images/common-centos-test.bj-test.qcow2 -m /dev/vg1/root /mnt/test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># ls /mnt/test/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>bin boot dev etc home lib lib64 media mnt opt proc root run sbin srv sys tmp usr var
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="guestmount">guestmount&lt;a class="td-heading-self-link" href="#guestmount" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://libguestfs.org/guestmount.1.html">官方 Manual(手册)，guestmount&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="guestunmount">guestunmount&lt;a class="td-heading-self-link" href="#guestunmount" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;a href="https://libguestfs.org/guestunmount.1.html">https://libguestfs.org/guestunmount.1.html&lt;/a>&lt;/p>
&lt;h1 id="virt-edit">virt-edit&lt;a class="td-heading-self-link" href="#virt-edit" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://libguestfs.org/virt-edit.1.html">Manual(手册),virt-edit(1)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="virt-sysprep">virt-sysprep&lt;a class="td-heading-self-link" href="#virt-sysprep" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://libguestfs.org/virt-sysprep.1.html">Manual(手册)，virt-sysprep(1)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.cnblogs.com/qiuhom-1874/p/13547752.html">https://www.cnblogs.com/qiuhom-1874/p/13547752.html&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="syntax语法">Syntax(语法)&lt;a class="td-heading-self-link" href="#syntax%e8%af%ad%e6%b3%95" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>virt-sysprep [OPTIONS] -d DomainName&lt;/strong>
&lt;strong>virt-sysprep [OPTIONS] -a DISK.img [-a DISK.img &amp;hellip;]&lt;/strong>&lt;/p>
&lt;p>OPTIONS&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&amp;ndash;copy-in &lt;a href="LocalPath:RemoteDir">LocalPath:RemoteDir&lt;/a>&lt;/strong> # 将本地宿主机上的 LocalPath 文件拷贝到虚拟机的 RemoteDir 目录中。
&lt;ul>
&lt;li>注意：RemoteDir 必须已存在。不能使用通配符&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>将宿主机上的当前目录中的 test.log 文件拷贝到 ubuntu-2004 虚拟机的 /root/ 目录下
&lt;ul>
&lt;li>&lt;code>virt-sysprep --copy-in test.log:/root/ -d ubuntu-2004&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="virt-cat">virt-cat&lt;a class="td-heading-self-link" href="#virt-cat" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>virt-cat -d test /etc/sysconfig/network-scripts/ifcfg-eth0 # 查看名为 test 的 VM 的 ifcfg-eth0 这个文件&lt;/li>
&lt;/ul></description></item><item><title>Docs: Libvirt 客户端库</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Virtualization-implementation/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/Libvirt/Libvirt-API/Libvirt-%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BA%93/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Virtualization-implementation/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/Libvirt/Libvirt-API/Libvirt-%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BA%93/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://libvirt.org/bindings.html">官方文档，binding&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Libvirt 直接支持 C 和 C++，并且具有可用于其他语言的绑定：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>C#&lt;/strong>：Arnaud Champion 开发&lt;a href="https://libvirt.org/csharp.html">C# 绑定&lt;/a>。&lt;/li>
&lt;li>&lt;strong>Go&lt;/strong>：Daniel Berrange 开发了 &lt;a href="https://pkg.go.dev/libvirt.org/go/libvirt">Go 绑定&lt;/a>。&lt;/li>
&lt;li>&lt;strong>Java&lt;/strong>：Daniel Veillard 开发 &lt;a href="https://libvirt.org/java.html">Java 绑定&lt;/a>。&lt;/li>
&lt;li>&lt;strong>OCaml&lt;/strong>：Richard Jones 开发 &lt;a href="https://libvirt.org/ocaml/">OCaml 绑定&lt;/a>。&lt;/li>
&lt;li>&lt;strong>Perl&lt;/strong>：Daniel Berrange 开发 &lt;a href="https://search.cpan.org/dist/Sys-Virt/">Perl 绑定&lt;/a>。&lt;/li>
&lt;li>&lt;strong>PHP&lt;/strong>：Radek Hladik 于 2010 年开始开发 &lt;a href="https://libvirt.org/php">PHP 绑定&lt;/a>。2011 年 2 月，绑定开发已作为 libvirt-php 项目移至 libvirt.org 网站。该项目现在由 Michal Novotny 维护，并且很大程度上基于 Radek 的版本。有关更多信息，包括发布补丁到 libvirt-php 的信息，请参阅&lt;a href="https://libvirt.org/php">PHP 绑定&lt;/a>站点。&lt;/li>
&lt;li>&lt;strong>Python&lt;/strong>：Libvirt 的 python 绑定从 1.2.0 版本开始被拆分为一个单独的 &lt;a href="https://gitlab.com/libvirt/libvirt-python">包&lt;/a>，旧版本直接支持 Python 语言。如果您的 libvirt 是作为软件包安装的，而不是由您从源代码编译的，请确保您安装了适当的软件包。这在 RHEL/Fedora 上被命名为 &lt;strong>libvirt-python&lt;/strong> ，在 Ubuntu 上被命名为 &lt;a href="https://packages.ubuntu.com/search?keywords=python-libvirt">&lt;strong>python-libvirt&lt;/strong>&lt;/a> ，并且在其他人上可能有不同的命名。有关使用信息，请参阅&lt;a href="https://libvirt.org/python.html">Python API 绑定&lt;/a> 页面。&lt;/li>
&lt;li>&lt;strong>Ruby&lt;/strong>：Chris Lalancette 开发&lt;a href="https://libvirt.org/ruby/">Ruby 绑定&lt;/a>。&lt;/li>
&lt;/ul>
&lt;p>集成 API 模块：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>D-Bus&lt;/strong>：Pavel Hrdina 开发&lt;a href="https://libvirt.org/dbus.html">D-Bus API&lt;/a>。&lt;/li>
&lt;/ul>
&lt;p>有关在 &lt;strong>Windows 上使用 libvirt 的信息，&lt;/strong> &lt;a href="https://libvirt.org/windows.html">请参阅 Windows 支持页面&lt;/a>。&lt;/p>
&lt;p>注意：想要使用 Libvirt API，需要安装 libvirt-dev 和 pkg-config&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo apt install libvirt-dev pkg-config
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="go-库">Go 库&lt;a class="td-heading-self-link" href="#go-%e5%ba%93" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/libvirt/libvirt-go-module">GitHub 项目，libvirt/libvirt-go-module&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gitlab.com/libvirt/libvirt-go-module">GitLab 项目，libvirt/libvirt-go-module&lt;/a>&lt;/li>
&lt;li>导入时，也可以使用 &lt;code>import libvirt.org/go/libvrit&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://libvirt.org/go/libvirt.html">官方文档，go-libvirt&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Go 语言的 &lt;code>libvirt.org/go/libvrit&lt;/code> 包可以提供来自 OS 原生的 Libvirt API 的 CGO 绑定。该软件包替换了过时的 libvirt.org/libvirt-go 软件包，以便切换到使用 semver 和 Go 模块。除了更改的导入路径和版本控制方案之外，该 API 与旧包完全兼容。&lt;/p>
&lt;p>一般来说，Go 表示是从本机 API 概念到 Go 的直接 1-1 映射，因此本机 API 文档应该作为大多数行为的参考。&lt;/p>
&lt;p>有关 Go 特定行为的详细信息，请参阅 &lt;a href="https://pkg.go.dev/libvirt.org/go/libvirt">Go Pagkage 中的文档&lt;/a>。&lt;/p>
&lt;h1 id="python-库">Python 库&lt;a class="td-heading-self-link" href="#python-%e5%ba%93" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://libvirt.org/docs/libvirt-appdev-guide-python/en-US/html/index.html">libvirt 官方文档，使用 Python 开发 Libvirt 应用程序指南&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;a href="https://blog.51cto.com/u_10616534/1878609">https://blog.51cto.com/u_10616534/1878609&lt;/a>
&lt;a href="https://cloud.tencent.com/developer/article/1603833">https://cloud.tencent.com/developer/article/1603833&lt;/a>&lt;/p></description></item><item><title>Docs: virt-manager</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Virtualization-implementation/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/Libvirt/Libvirt-API/virt-manager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Virtualization-implementation/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/Libvirt/Libvirt-API/virt-manager/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/virt-manager/virt-manager">GitHub 项目，virt-manager/virt-manager&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://virt-manager.org/">官网&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>virt-manager 是一个图形化的应用程序，通过 libvirt 管理虚拟机。&lt;/p>
&lt;p>virt-manager 提供了多个配套的工具&lt;/p>
&lt;ul>
&lt;li>virt-manager # GUI 模式的 VM 管理程序&lt;/li>
&lt;li>virt-viewer # 是一个轻量级的 UI 界面，用于与虚拟客户操作系统的图形显示进行交互。它可以显示 VNC 或 SPICE，并使用 libvirt 查找图形连接详细信息。&lt;/li>
&lt;li>virt-install # 是一个命令行工具，它提供了一种将操作系统配置到虚拟机中的简单方法。&lt;/li>
&lt;li>virt-clone # 是一个用于克隆现有非活动客户的命令行工具。它复制磁盘映像，并使用指向复制磁盘的新名称、UUID 和 MAC 地址定义配置。&lt;/li>
&lt;li>virt-xml # 是一个命令行工具，用于使用 virt-install 的命令行选项轻松编辑 libvirt 域 XML。&lt;/li>
&lt;li>virt-bootstrap # 是一个命令行工具，提供了一种简单的方法来为基于 libvirt 的容器设置根文件系统。&lt;/li>
&lt;/ul>
&lt;p>virt-clone、virt-xml、virt-install 属于安装虚拟机的工具，通常都在 virtinst 包中。&lt;/p>
&lt;p>virt-manager、virt-viewer 属于图形化管理虚拟机的工具，通常都在 virt-manager 包中。&lt;/p>
&lt;h1 id="virt-manager">virt-manager&lt;a class="td-heading-self-link" href="#virt-manager" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="使用-virt-manager-管理多台虚拟机">使用 virt-manager 管理多台虚拟机&lt;a class="td-heading-self-link" href="#%e4%bd%bf%e7%94%a8-virt-manager-%e7%ae%a1%e7%90%86%e5%a4%9a%e5%8f%b0%e8%99%9a%e6%8b%9f%e6%9c%ba" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>在一台机器上的 virt-manager 可以通过 add connection 管理其它宿主机上的虚拟机，但是前提是建立 ssh 的密钥认证，因为在 virt-manager 在通过 ssh 连接的时候，需要使用窗口模式输入密码，而一般情况下 ssh 是默认不装该组件的。如果不想添加密钥认证，那么安装 &lt;code>ssh-askpass-gnome&lt;/code> 组件即可。&lt;/p>
&lt;p>输入 virt-manager 打开管理界面。选择 File—Add Connecttion.. 勾选 Connect to remote host&lt;/p>
&lt;p>依次填入文本框中内容如下：&lt;/p>
&lt;ul>
&lt;li>Hypervisor: QEMU/KVM&lt;/li>
&lt;li>Method:SSH&lt;/li>
&lt;li>Username:root&lt;/li>
&lt;li>Hostname:192.168.0.123（需要被操作的服务器地址）&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/abyoqm/1616123543706-5c47d241-1780-40d5-b04e-1cfd4b802d6c.png" alt="">
然后点击 connect 连接即可，此时就会出现另一台服务器上的虚拟机供操作。&lt;/p>
&lt;h1 id="virt-viewer">virt-viewer&lt;a class="td-heading-self-link" href="#virt-viewer" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>可以显示虚拟机的图形控制台&lt;/p>
&lt;h1 id="virt-install">virt-install&lt;a class="td-heading-self-link" href="#virt-install" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>可以将 virt-install 理解为 CLI 的 virt-manager，可以放在脚本中创建虚拟机，内容非常多，详见 &lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Virtualization%20implementation/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/Libvirt/Libvirt%20API/virt-install.md">《virt-install》&lt;/a> 章节。&lt;/p>
&lt;h1 id="virt-clone">virt-clone&lt;a class="td-heading-self-link" href="#virt-clone" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://man.cx/virt-clone">Manual(手册),virt-clone(1)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="syntax语法">Syntax(语法)&lt;a class="td-heading-self-link" href="#syntax%e8%af%ad%e6%b3%95" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>virt-clone [OPTION]&amp;hellip;&lt;/strong>&lt;/p></description></item></channel></rss>