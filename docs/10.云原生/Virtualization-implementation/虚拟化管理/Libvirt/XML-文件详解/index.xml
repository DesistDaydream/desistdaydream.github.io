<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>XML 文件详解 on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Virtualization-implementation/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/Libvirt/XML-%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</link><description>Recent content in XML 文件详解 on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Virtualization-implementation/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/Libvirt/XML-%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/index.xml" rel="self" type="application/rss+xml"/><item><title>XML 文件详解</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Virtualization-implementation/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/Libvirt/XML-%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/XML-%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Virtualization-implementation/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/Libvirt/XML-%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/XML-%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</guid><description>概述 参考：
官方文档，XML 格式 Libvirt API 中的对象使用 XML 格式 的文档进行配置，以便在未来的版本中轻松扩展。每个 XML 文档都有一个关联的 Relax-NG 模式，可用于在使用前验证文档。
这里面的 Libvirt API 对象指的就是 Domain(虚拟机)、存储、快照、网络 等等。对于 Libvirt，所有 VM 相关的资源都会抽象为对象，这样也利于代码编写。
Kubernetes 的 API 对象跟这个有点像，只不过 Kubernetes 中，使用 YAML 格式来声明对象，而不是 XML 格式来配置对象。
下面是所有可用的 Libvirt API 对象，每个 Libvirt 对象 都对应一个 根元素。
Domain # 虚拟机相关的 XML 配置，可以直接使用 Domain XML 文件创建、启动、管理虚拟机。 根元素名称: &amp;lt;domain&amp;gt; Network # 虚拟网络相关的 XML 配置。 根元素名称: &amp;lt;network&amp;gt; Network filtering Network ports Storage Storage encryption Capabilities Domain capabilities Storage Pool capabilities Node devices Secrets Snapshots Checkpoints Backup jobs virt-xml-validate virt-xml-validate 工具是一个简单的检验 XML 文档的工具，直接在命令后面加上 XML 文档的 /PATH/FILE 即可对该文件进行检验，确保其在传递给 libvirt 时是正确的。</description></item><item><title>Domain</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Virtualization-implementation/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/Libvirt/XML-%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/Domain/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Virtualization-implementation/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/Libvirt/XML-%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/Domain/</guid><description>概述 参考：
官方文档，Domain XML 格式 Domain 对象对应 &amp;lt;domain&amp;gt; 根元素，该元素中有如下属性：
type # 指定用于运行域的管理程序。允许的值是特定于驱动程序的，但包括“xen”、“kvm”、“hvf”（自 8.1.0 和 QEMU 2.12 起）、“qemu”和“lxc”。 id # 它是正在运行的客户机的唯一整数标识符。非活动机器没有 id 值。 下列元素都属于 &amp;lt;domain&amp;gt; 这个根元素的子元素
TODO: &amp;hellip;&amp;hellip; name uuid metadata memory os devices &amp;hellip;&amp;hellip; 上面这些元素可以控制整个 Domain，通常可以分为几大类，下面的笔记将以这些类别进行记录
通用元数据 系统引导 SMBIOS 系统信息 CPU 分配 &amp;hellip;&amp;hellip;. 等等 设备 系统引导 有很多种方式可以引导 Domain，不过个人使用中最常见的就是使用 BIOS 引导。官方文档中还有 Host 引导、直接内核引导、容器引导。等有需要了再记录。
支持完全虚拟化的虚拟机管理程序可以通过 BIOS 启动。在这种情况下，BIOS 具有引导顺序优先级 (软盘，硬盘，光盘，网络)，以确定在何处获取/查找所需的引导镜像。
os # 配置操作系统相关信息
type # 操作系统的类型。可用的值有 hvm、linux。 属性： arch # CPU 的架构。比如 x86_64 machine # 机器类型 boot # 指定 Domain 下次如何引导启动。 属性： dev # 指定 Domain 下次启动时的引导设备，可指定多次设置多个引导设备。可用的值有: fd、hd、cdrom、network。（fd 指软盘，hd 指硬盘） 配置示例 &amp;lt;os&amp;gt; &amp;lt;type arch=&amp;#39;x86_64&amp;#39; machine=&amp;#39;pc-q35-6.</description></item><item><title>Network</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Virtualization-implementation/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/Libvirt/XML-%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/Network/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Virtualization-implementation/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/Libvirt/XML-%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/Network/</guid><description>概述 参考：
官方文档，Network XML 格式 Network 对象用以控制虚拟网络，对应 &amp;lt;network&amp;gt; 根元素。
使用 virsh net-list 命令列出所有网络，使用 virsh net-edit XXX 即可编辑 network 元素的 XML 内容。
bandwidth &amp;lt;bandwidth&amp;gt;元素允许为特定网络设置服务质量（自0.9.4版起）。只支持为具有 &amp;lt;forward&amp;gt; 模式为route、nat、bridge或没有模式的网络（即“隔离”网络）设置带宽。不支持为forward模式为passthrough、private或hostdev的网络设置带宽。尝试这样做将导致无法定义网络或创建临时网络。
average
peak
burst
最佳实践 限制虚拟机网卡的网速
&amp;lt;interface type=&amp;#39;bridge&amp;#39;&amp;gt; &amp;lt;source bridge=&amp;#39;br0&amp;#39;/&amp;gt; &amp;lt;model type=&amp;#39;virtio&amp;#39;/&amp;gt; &amp;lt;driver name=&amp;#39;vhost&amp;#39; queues=&amp;#39;8&amp;#39;/&amp;gt; &amp;lt;bandwidth&amp;gt; &amp;lt;inbound average=&amp;#39;1000&amp;#39; peak=&amp;#39;5000&amp;#39; burst=&amp;#39;1024&amp;#39;/&amp;gt; &amp;lt;outbound average=&amp;#39;128&amp;#39; peak=&amp;#39;256&amp;#39; burst=&amp;#39;256&amp;#39;/&amp;gt; &amp;lt;/bandwidth&amp;gt; &amp;lt;address type=&amp;#39;pci&amp;#39; domain=&amp;#39;0x0000&amp;#39; bus=&amp;#39;0x01&amp;#39; slot=&amp;#39;0x00&amp;#39; function=&amp;#39;0x0&amp;#39;/&amp;gt; &amp;lt;/interface&amp;gt;</description></item></channel></rss>