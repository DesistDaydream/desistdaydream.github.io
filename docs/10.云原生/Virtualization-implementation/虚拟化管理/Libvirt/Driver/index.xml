<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦的站点 – Driver</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Virtualization-implementation/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/Libvirt/Driver/</link><description>Recent content in Driver on 断念梦的站点</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Virtualization-implementation/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/Libvirt/Driver/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Driver</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Virtualization-implementation/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/Libvirt/Driver/Driver/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Virtualization-implementation/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/Libvirt/Driver/Driver/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://libvirt.org/drivers.html">官方文档，驱动程序&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>市面上有多种虚拟化平台，比如 &lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Virtualization%20implementation/KVM_QEMU/KVM_QEMU.md">KVM/QEMU&lt;/a>、&lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Virtualization%20implementation/Hyper-V/Hyper-V.md">Hyper-V&lt;/a>、等等，Libvirt 想要调用这些虚拟化平台的能力，需要对应平台的 &lt;strong>Driver(驱动程序)&lt;/strong>，这个 Driver 可以对接虚拟化平台的的 &lt;strong>Hypervisor(虚拟机监视器)&lt;/strong> 以控制整个虚拟化环境。这就好比 Windows 系统想要使用显卡的能力，就需要对应的显卡驱动程序一样。&lt;/p>
&lt;p>想要连接到 Driver，我们需要使用 Libvirt API 开发的客户端应用程序（e.g. &lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Virtualization%20implementation/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/Libvirt/virsh%20%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/virsh%20%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7.md">virsh&lt;/a>、&lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Virtualization%20implementation/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/Libvirt/Libvirt%20API/virt-manager.md">virt-manager&lt;/a>、等等）。Drivers 通常作为服务端都暴露了 &lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Virtualization%20implementation/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/Libvirt/Libvirt%20API/Libvirt%20API.md">Libvirt API&lt;/a>，这些客户端通过 &lt;a href="#uri">&lt;strong>URI&lt;/strong>&lt;/a> 找到并连接到 Driver，这就好像 mysql 客户端连接 mysql 也需要 IP 端口、etcdctl 连接 etcd 同理，很多客户端都是同样的逻辑。&lt;/p>
&lt;p>Libvirt 有如下几类 Drivers&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Hypervisor drivers(Hypervisor 驱动)&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Storage drivers(存储驱动)&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Node device driver&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Secret driver&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;del>一般情况应该始终有一个活跃状态的 Hypervisor driver，如果 libvirtd 进程可用的话，通常还会有一个活动状态的网络驱动和存储驱动&lt;/del>&lt;/p>
&lt;blockquote>
&lt;p>除了 Hypervisor 驱动有用以外，其他的几种驱动暂时没找到用途 —— 2023.7.5&lt;/p>
&lt;/blockquote>
&lt;p>使用 Libvirt 时，我们最常见的 virsh 和 libvirtd 就是一个客户端和服务端结构，virsh 是用 LIbvirt API 实现的客户端程序、libvirtd 则是暴露 LIbvirt API 的驱动程序。virsh 使用 URI 连接到 libvirtd 的指定驱动后，可以像 libvirtd 发出命令以管理虚拟化平台。&lt;/p>
&lt;h1 id="uri">URI&lt;a class="td-heading-self-link" href="#uri" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://libvirt.org/uri.html">官方文档，连接 URI&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Libvirt 的客户端程序（e.g. virsh、virt-manager、等等）&lt;strong>通过 &lt;a href="https://datatracker.ietf.org/doc/html/rfc2396">URI&lt;/a> 连接 Driver&lt;/strong>。这就好像 mysql 客户端连接 MySQL 需要一个 URL、redis 客户端连接 Redis 需要、etcdctl 连接 ETCD 也需要、等等。其实就是 &lt;code>virsh -c URI&lt;/code> 这种，类似 &lt;code>mysql -h X.X.X.X&lt;/code>、&lt;code>etcdctl --endpoint X.X.X.X&lt;/code> 之类的。只不过 Libvirt 的应用程序还可以使用 &lt;code>qemu:///system&lt;/code> 这种方式连接本地 Socket，而不止是常见的 TCP/IP。&lt;/p>
&lt;p>驱动程序通常都暴露了 Libvirt API，连接 Driver 的代码逻辑如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>virConnectPtr conn &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">virConnectOpen&lt;/span> (&lt;span style="color:#e6db74">&amp;#34;test:///default&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>实际上，就是将 URI 作为 virConnectOpen() 函数的参数，以生成一个连接到 Driver 的实例。&lt;/p>
&lt;h2 id="uri-语法">URI 语法&lt;a class="td-heading-self-link" href="#uri-%e8%af%ad%e6%b3%95" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>Hypervisor[+Transport]://[UserName@][HostName][:PORT]/PATH[?Extraparameters]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Hypervisor # 虚拟化类型，可用的值有：&lt;/p>
&lt;ul>
&lt;li>qemu&lt;/li>
&lt;li>xen&lt;/li>
&lt;li>test # 专门测试的，libvirt 自带&lt;/li>
&lt;/ul>
&lt;p>Transport # 连接方式。默认为 unix&lt;/p>
&lt;ul>
&lt;li>unix&lt;/li>
&lt;li>ssh&lt;/li>
&lt;li>tcp&lt;/li>
&lt;li>libssh、libssh2&lt;/li>
&lt;li>auto&lt;/li>
&lt;li>netcat&lt;/li>
&lt;li>native&lt;/li>
&lt;li>ext&lt;/li>
&lt;li>tls&lt;/li>
&lt;/ul>
&lt;h2 id="默认-uri">默认 URI&lt;a class="td-heading-self-link" href="#%e9%bb%98%e8%ae%a4-uri" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>如果我们传递给 &lt;code>virConnectOpen&lt;/code> 函数的参数为空，即 URI 为空，那么 Driver 通常使用如下逻辑来确定要使用的 URI&lt;/p>
&lt;ul>
&lt;li>环境变量 LIBVIRT_DEFAULT_URI&lt;/li>
&lt;li>客户端配置文件 uri_default 参数&lt;/li>
&lt;li>依次探查每个虚拟机监控程序，直到找到有效的虚拟机监控程序&lt;/li>
&lt;/ul>
&lt;p>对于 virsh 这个客户端程序来说，可以使用配置文件（/etc/libvirt/libvirt.conf）中的 uri_default 参数、还可以使用 -c 选项覆盖这个配置。&lt;/p>
&lt;h2 id="uri-种类">URI 种类&lt;a class="td-heading-self-link" href="#uri-%e7%a7%8d%e7%b1%bb" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>共分为两种 URI&lt;/p>
&lt;ul>
&lt;li>本地 URI&lt;/li>
&lt;li>远程 URI&lt;/li>
&lt;/ul>
&lt;h3 id="本地-uri">本地 URI&lt;a class="td-heading-self-link" href="#%e6%9c%ac%e5%9c%b0-uri" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>其中本地 URI 语法通常都会省略所有 &lt;code>[]&lt;/code> 部分，这样就会看到 3 个连续的 &lt;code>/&lt;/code> 符号，就像 &lt;code>qemu:///system&lt;/code>，这里的 Transport 就是默认的 unix，这就是本地 URI 了。&lt;/p>
&lt;p>URI 示例&lt;/p>
&lt;p>连接到系统模式守护程序&lt;/p>
&lt;ul>
&lt;li>&lt;code>qemu:///system&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>连接到会话模式守护程序&lt;/p>
&lt;ul>
&lt;li>&lt;code>qemu:///session&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>如果这样做 &lt;code>libvirtd --help&lt;/code>，守护程序将打印出以各种不同方式监听的 Unix 域套接字的路径。&lt;/p>
&lt;p>本地使用测试 URI&lt;/p>
&lt;p>连接到驱动程序内置的一组默认主机定义&lt;/p>
&lt;ul>
&lt;li>&lt;code>test:///default&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>连接到指定文件中保存的一组主机定义&lt;/p>
&lt;ul>
&lt;li>&lt;code>test:///PATH/TO/HOST/DEFINITIONS&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="远程-uri">远程 URI&lt;a class="td-heading-self-link" href="#%e8%bf%9c%e7%a8%8b-uri" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>远程 URI 的语法有一些是不能省略的，其中 Transport、HostName 必须指定&lt;/p>
&lt;pre tabindex="0">&lt;code>Hypervisor+Transport://[UserName@]HostName[:PORT]/PATH[?Extraparameters]
&lt;/code>&lt;/pre>&lt;p>URI 示例&lt;/p>
&lt;p>通过 ssh 以 root 用户身份连接&lt;/p>
&lt;ul>
&lt;li>&lt;code>qemu+ssh://root@172.38.180.96/system&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>通过 tcp 连接。默认连接到 16509 端口，前提参考 &lt;a href="#%E9%80%9A%E8%BF%87%20TCP%20%E8%BF%9E%E6%8E%A5">通过 TCP 连接&lt;/a> 部分的内容为 libvirtd 开启 TCP 监听。&lt;/p>
&lt;p>&lt;code>qemu+tcp://172.38.180.95/system&lt;/code>&lt;/p>
&lt;h2 id="uri-中额外的参数详解">URI 中额外的参数详解&lt;a class="td-heading-self-link" href="#uri-%e4%b8%ad%e9%a2%9d%e5%a4%96%e7%9a%84%e5%8f%82%e6%95%b0%e8%af%a6%e8%a7%a3" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h1 id="hypervisor-驱动程序">Hypervisor 驱动程序&lt;a class="td-heading-self-link" href="#hypervisor-%e9%a9%b1%e5%8a%a8%e7%a8%8b%e5%ba%8f" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>Hypervisor Driver 有几种表现形式&lt;/p>
&lt;ul>
&lt;li>内嵌在 Libvirt API 客户端应用程序中&lt;/li>
&lt;li>内置到 libvirt.so 库&lt;/li>
&lt;li>&lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Virtualization%20implementation/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/Libvirt/Driver/Libvirt%20%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B.md">Libvirt 守护进程&lt;/a>，比如 libvirtd&lt;/li>
&lt;li>等等&lt;/li>
&lt;/ul>
&lt;h2 id="qemukvm-驱动">QEMU/KVM 驱动&lt;a class="td-heading-self-link" href="#qemukvm-%e9%a9%b1%e5%8a%a8" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://libvirt.org/drvqemu.html">官方文档，QEMU/KVM/HVF hypervisor 驱动程序&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Libvirt 的 KVM/QEMU 驱动程序将会探测 &lt;code>/usr/bin/&lt;/code> 目录是否存在 &lt;code>qemu&lt;/code>, &lt;code>qemu-system-x86_64&lt;/code>, &lt;code>qemu-system-microblaze&lt;/code>, &lt;code>qemu-system-microblazeel&lt;/code>, &lt;code>qemu-system-mips&lt;/code>,&lt;code>qemu-system-mipsel&lt;/code>, &lt;code>qemu-system-sparc&lt;/code>,&lt;code>qemu-system-ppc&lt;/code>。来决定如何连接 QEMU emulator。&lt;/p>
&lt;p>Libvirt 的 KVM/QEMU 驱动程序将会探测 &lt;code>/usr/bin&lt;/code> 目录是否存在 &lt;code>qemu-kvm&lt;/code>，以及 /dev/kvm 驱动是否存在。来决定如何连接 KVM hypervisor。&lt;/p>
&lt;p>libvirt QEMU 驱动程序是一个&lt;strong>多实例&lt;/strong>驱动程序，提供单个系统范围的特权驱动程序（“system”实例）和每用户非特权驱动程序（“session”实例）。 URI 驱动程序协议是“qemu”。 libvirt 驱动程序的一些连接 URI 示例如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>qemu:///session &lt;span style="color:#f92672">(&lt;/span>local access to per-user instance&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>qemu+unix:///session &lt;span style="color:#f92672">(&lt;/span>local access to per-user instance&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>qemu:///system &lt;span style="color:#f92672">(&lt;/span>local access to system instance&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>qemu+unix:///system &lt;span style="color:#f92672">(&lt;/span>local access to system instance&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>qemu://example.com/system &lt;span style="color:#f92672">(&lt;/span>remote access, TLS/x509&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>qemu+tcp://example.com/system &lt;span style="color:#f92672">(&lt;/span>remote access, SASl/Kerberos&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>qemu+ssh://root@example.com/system &lt;span style="color:#f92672">(&lt;/span>remote access, SSH tunnelled&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>通常，对于本地连接 QEMU/KVM 驱动来说，默认都是 &lt;code>qemu:///system&lt;/code>，即连接到 system 实例以管理虚拟机。&lt;/p>
&lt;h3 id="嵌入式驱动">嵌入式驱动&lt;a class="td-heading-self-link" href="#%e5%b5%8c%e5%85%a5%e5%bc%8f%e9%a9%b1%e5%8a%a8" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>&lt;a href="https://libvirt.org/drvqemu.html#embedded-driver">https://libvirt.org/drvqemu.html#embedded-driver&lt;/a>&lt;/p>
&lt;p>从 6.1.0 版本开始，可以使用 virsh 的嵌入式驱动。&lt;/p>
&lt;p>用 &lt;code>qemu:///embed?root=/some/dir&lt;/code> 这种 URI 可以使用 virsh 的内置 QEMU/KVM 驱动，并将运行时数据保存到 /some/dir/ 目录中，改目录的结构如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>/some/dir
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> +- log
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | +- qemu
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | +- swtpm
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> +- etc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | +- qemu
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | +- pki
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | +- qemu
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> +- run
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | +- qemu
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | +- swtpm
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> +- cache
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | +- qemu
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> +- lib
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> +- qemu
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> +- swtpm
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="连接驱动的方式示例">连接驱动的方式示例&lt;a class="td-heading-self-link" href="#%e8%bf%9e%e6%8e%a5%e9%a9%b1%e5%8a%a8%e7%9a%84%e6%96%b9%e5%bc%8f%e7%a4%ba%e4%be%8b" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h3 id="使用-virsh-连接-driver">使用 virsh 连接 Driver&lt;a class="td-heading-self-link" href="#%e4%bd%bf%e7%94%a8-virsh-%e8%bf%9e%e6%8e%a5-driver" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>这里以 virsh 命令行工具作为示例，其他基于 Libvirt API 的第三方工具，都是同样的道理。&lt;/p>
&lt;p>virsh 可以使用 -c 或者 &amp;ndash;connect 选项连接到指定的 libvirtd。比如：&lt;code>virsh -c qemu+tcp://172.38.180.96/system&lt;/code>&lt;/p>
&lt;p>我们可以在客户端配置文件(/etc/libvirt/libvirt.conf)中，设定 &lt;code>uri_default&lt;/code> 关键字的值以改变 virsh 默认链接到 libvirtd，通常默认值为：&lt;code>qemu:///system&lt;/code>，即连接本地的 libvirtd 并管理 QEMU 虚拟机。&lt;/p>
&lt;h3 id="以代码方式连接-driver">以代码方式连接 Driver&lt;a class="td-heading-self-link" href="#%e4%bb%a5%e4%bb%a3%e7%a0%81%e6%96%b9%e5%bc%8f%e8%bf%9e%e6%8e%a5-driver" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>Python 客户端库&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>conn &lt;span style="color:#f92672">=&lt;/span> libvirt&lt;span style="color:#f92672">.&lt;/span>open(&lt;span style="color:#e6db74">&amp;#34;qemu+tcp://172.38.180.95/system&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Go 客户端库&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">conn&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">libvirt&lt;/span>.&lt;span style="color:#a6e22e">NewConnect&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;qemu:///system&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Libvirt 守护进程</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Virtualization-implementation/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/Libvirt/Driver/Libvirt-%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Virtualization-implementation/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/Libvirt/Driver/Libvirt-%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://libvirt.org/daemons.html">官方文档，Libvirt 守护进程&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://libvirt.org/manpages/libvirtd.html">官方文档，手册-libvirtd&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>传统上，Libvirt 项目提供了一个名为 &lt;strong>libvirtd&lt;/strong> 的单一守护进程，它暴露了对所有有状态 Driver 的支持，包括主要虚拟机管理程序驱动程序和辅助支持驱动程序。它还支持监听在 TCP/IP 上，以便主机外运行的客户端进行安全远程访问。&lt;/p>
&lt;p>&lt;strong>未来，想要将一个整体的 libvirtd 守护进程替换为一组模块化的守护进程，以 &lt;code>virt${DRIVER}d&lt;/code> 命令，就是每个驱动都有自己独立的守护进程。还有一个 virtproxyd 守护进程可以提供安全的远程访问。&lt;/strong> —— 2023.7.5&lt;/p>
&lt;h1 id="libvirtd">libvirtd&lt;a class="td-heading-self-link" href="#libvirtd" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>libvirtd 程序是 libvirt 虚拟化管理系统的服务器端守护进程组件。包含了部分 Hypervisor 驱动，并暴露了 &lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Virtualization%20implementation/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/Libvirt/Libvirt%20API/Libvirt%20API.md">Libvirt API&lt;/a>。&lt;/p>
&lt;p>该守护进程在主机服务器上运行，并为虚拟来宾执行所需的管理任务。这包括启动、停止和在主机服务器之间迁移来宾、配置和操作网络以及管理供来宾使用的存储等活动。&lt;/p>
&lt;p>libvirt 客户端库和实用程序连接到此守护进程以发出任务并收集有关主机系统和来宾的配置和资源的信息。&lt;/p>
&lt;p>默认情况下，libvirtd 守护进程侦听本地 Unix 域套接字上的请求。使用 -l | &amp;ndash;listen 命令行选项，可以指示 libvirtd 守护进程另外侦听 TCP/IP 套接字。要使用的 TCP/IP 套接字在 libvirtd 配置文件中定义。&lt;/p>
&lt;blockquote>
&lt;p>这里官方说的其实有一些问题，参考 &lt;a href="https://stackoverflow.com/questions/65663825/could-not-add-the-parameter-listen-to-open-tcp-socket">https://stackoverflow.com/questions/65663825/could-not-add-the-parameter-listen-to-open-tcp-socket&lt;/a> ，并且在下面关于启动模式中也有说明。&lt;/p>
&lt;/blockquote>
&lt;p>重新启动 libvirtd 不会影响正在运行的 guest 虚拟机。如果定义了 XML 配置，来宾将继续操作并将被自动接听。任何尚未定义 XML 配置的来宾都将从配置中丢失。&lt;/p>
&lt;p>libvirtd 守护进程能够以两种模式启动&lt;/p>
&lt;ul>
&lt;li>&lt;strong>传统模式&lt;/strong> # 它将自行创建并侦听 UNIX 套接字。
&lt;ul>
&lt;li>如果给出了 &amp;ndash;listen 参数，它还将根据 /etc/libvirt/libvirtd.conf 中的 listen_tcp 和 listen_tls 选项监听 TCP/IP 套接字&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>套接字激活模式&lt;/strong> # 它将依靠 systemd 在 UNIX 和可选的 TCP/IP 套接字上创建和侦听，并将它们作为预打开的文件描述符传递。
&lt;ul>
&lt;li>&lt;!-- raw HTML omitted -->注意&lt;!-- raw HTML omitted -->：在这种模式下，不允许传递 &amp;ndash;listen 参数，并且 /etc/libvirt/libvirtd.conf 中大多数与套接字相关的配置选项将不再起作用。&lt;/li>
&lt;li>如果想要启用 TCP 或 TLS 套接字，可以开启 libvirtd-tcp.socket 或 libvirtd-tls.socket 这两个 Unit。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>在使用 systemd 的主机操作系统上运行时，套接字激活模式通常是默认模式。要恢复到传统模式，必须使用如下命令屏蔽所有套接字单元文件：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ systemctl mask libvirtd.socket libvirtd-ro.socket &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> libvirtd-admin.socket libvirtd-tls.socket libvirtd-tcp.socket
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>最重要的是，请确保 &amp;ndash;timeout 参数不用于守护进程，因为它不会在以后的任何连接中启动。&lt;/p>
&lt;h2 id="远程访问">远程访问&lt;a class="td-heading-self-link" href="#%e8%bf%9c%e7%a8%8b%e8%ae%bf%e9%97%ae" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://libvirt.org/remote.html">https://libvirt.org/remote.html&lt;/a>&lt;/p></description></item></channel></rss>