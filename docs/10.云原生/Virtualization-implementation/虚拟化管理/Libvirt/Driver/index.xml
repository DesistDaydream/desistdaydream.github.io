<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Driver on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Virtualization-implementation/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/Libvirt/Driver/</link><description>Recent content in Driver on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Virtualization-implementation/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/Libvirt/Driver/index.xml" rel="self" type="application/rss+xml"/><item><title>Driver</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Virtualization-implementation/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/Libvirt/Driver/Driver/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Virtualization-implementation/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/Libvirt/Driver/Driver/</guid><description>概述 参考：
官方文档，驱动程序 市面上有多种虚拟化平台，比如 KVM/QEMU、Hyper-V、等等，Libvirt 想要调用这些虚拟化平台的能力，需要对应平台的 Driver(驱动程序)，这个 Driver 可以对接虚拟化平台的的 Hypervisor(虚拟机监视器) 以控制整个虚拟化环境。这就好比 Windows 系统想要使用显卡的能力，就需要对应的显卡驱动程序一样。
想要连接到 Driver，我们需要使用 Libvirt API 开发的客户端应用程序（e.g. virsh、virt-manager、等等）。Drivers 通常作为服务端都暴露了 Libvirt API，这些客户端通过 URI 找到并连接到 Driver，这就好像 mysql 客户端连接 mysql 也需要 IP 端口、etcdctl 连接 etcd 同理，很多客户端都是同样的逻辑。
Libvirt 有如下几类 Drivers
Hypervisor drivers(Hypervisor 驱动) Storage drivers(存储驱动) Node device driver Secret driver 一般情况应该始终有一个活跃状态的 Hypervisor driver，如果 libvirtd 进程可用的话，通常还会有一个活动状态的网络驱动和存储驱动
除了 Hypervisor 驱动有用以外，其他的几种驱动暂时没找到用途 —— 2023.7.5
使用 Libvirt 时，我们最常见的 virsh 和 libvirtd 就是一个客户端和服务端结构，virsh 是用 LIbvirt API 实现的客户端程序、libvirtd 则是暴露 LIbvirt API 的驱动程序。virsh 使用 URI 连接到 libvirtd 的指定驱动后，可以像 libvirtd 发出命令以管理虚拟化平台。</description></item><item><title>Libvirt 守护进程</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Virtualization-implementation/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/Libvirt/Driver/Libvirt-%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Virtualization-implementation/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%AE%A1%E7%90%86/Libvirt/Driver/Libvirt-%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B/</guid><description>概述 参考：
官方文档，Libvirt 守护进程 官方文档，手册-libvirtd 传统上，Libvirt 项目提供了一个名为 libvirtd 的单一守护进程，它暴露了对所有有状态 Driver 的支持，包括主要虚拟机管理程序驱动程序和辅助支持驱动程序。它还支持监听在 TCP/IP 上，以便主机外运行的客户端进行安全远程访问。
未来，想要将一个整体的 libvirtd 守护进程替换为一组模块化的守护进程，以 virt${DRIVER}d 命令，就是每个驱动都有自己独立的守护进程。还有一个 virtproxyd 守护进程可以提供安全的远程访问。 —— 2023.7.5
libvirtd libvirtd 程序是 libvirt 虚拟化管理系统的服务器端守护进程组件。包含了部分 Hypervisor 驱动，并暴露了 Libvirt API
该守护进程在主机服务器上运行，并为虚拟来宾执行所需的管理任务。这包括启动、停止和在主机服务器之间迁移来宾、配置和操作网络以及管理供来宾使用的存储等活动。
libvirt 客户端库和实用程序连接到此守护进程以发出任务并收集有关主机系统和来宾的配置和资源的信息。
默认情况下，libvirtd 守护进程侦听本地 Unix 域套接字上的请求。使用 -l | &amp;ndash;listen 命令行选项，可以指示 libvirtd 守护进程另外侦听 TCP/IP 套接字。要使用的 TCP/IP 套接字在 libvirtd 配置文件中定义。
这里官方说的其实有一些问题，参考 https://stackoverflow.com/questions/65663825/could-not-add-the-parameter-listen-to-open-tcp-socket ，并且在下面关于启动模式中也有说明。
重新启动 libvirtd 不会影响正在运行的 guest 虚拟机。如果定义了 XML 配置，来宾将继续操作并将被自动接听。任何尚未定义 XML 配置的来宾都将从配置中丢失。
libvirtd 守护进程能够以两种模式启动
传统模式 # 它将自行创建并侦听 UNIX 套接字。 如果给出了 &amp;ndash;listen 参数，它还将根据 /etc/libvirt/libvirtd.</description></item></channel></rss>