<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – Jenkins</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/DevOps/Jenkins/</link><description>Recent content in Jenkins on 断念梦</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/DevOps/Jenkins/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Jenkins</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/DevOps/Jenkins/Jenkins/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/DevOps/Jenkins/Jenkins/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>官方文档：&lt;a href="https://jenkins.io/zh/">https://jenkins.io/zh/&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Jenkins 是一款开源 CI&amp;amp;CD 软件，用于自动化各种任务，包括构建、测试和部署软件。Jenkins 支持各种运行方式，可通过系统包、Docker 或者通过一个独立的 Java 程序。&lt;/p>
&lt;p>Jenkins 自己本身并没有什么功能，仅提供一个基本的 web 页面和监听端口(用来接收 webhook 等)，CI/CD 功能的实现依赖于 Jenkins 的各种插件来实现。&lt;/p>
&lt;p>Jenkins 说白了就是一个运行在系统上的程序，通过编写各种 Jenkins Pipelines(流水线)，来在系统中进行代码构建、拷贝文件、执行 shell 命令等等。使用的是系统上环境，比如系统有 go 编译器，那么 Jenkins 就可以执行 go 的相关命令；如果系统上没有安装 docker ，那么 Jenkins 也就没法执行 docker 相关的命令。可以把 Jenkins 当作一个复杂的、可以执行更多功能的 shell 脚本。&lt;/p>
&lt;p>当然，既然系统上无法满足各类要求的话，那么 Pipeline 还可以通过使用容器的方式来运行，以便规避环境影响。&lt;/p>
&lt;h2 id="pipe-line流水线-介绍">Pipe-line(流水线) 介绍&lt;/h2>
&lt;p>官方文档：&lt;a href="https://www.jenkins.io/doc/book/pipeline/">https://www.jenkins.io/doc/book/pipeline/&lt;/a>&lt;/p>
&lt;p>Pipe-line 是 Jenkins 实现 CI/CD 的必备程序。在部署完 Jenkins 之后，一般情况都会首先安装 Pipe-line 插件，而日常使用中，最常用的也是 Pipeline。&lt;/p>
&lt;p>顾名思义，Pipeline 流水线，就好像工厂中的流水线一样，第一步应该做什么，第二步应该做什么&amp;hellip;&amp;hellip;都是有明确规定的，这是一个自动化，明确的任务线。&lt;/p>
&lt;h3 id="jenkinsfile">Jenkinsfile&lt;/h3>
&lt;p>Pipeline 通过一个文本文件(称为 Jenkinsfile)来决定其每一步应该执行什么样的操作(比如第一步下载代码、第二步构建、第三步部署&amp;hellip;等等)。这个 Jenkinsfile 文件可以提交到项目的代码存储库中，这是 Pipeline as code(流水线即代码) 的基础。&lt;/p>
&lt;p>Jenskinsfile 的内容可以直接通过 Jenkins 的 web 页面编写，也可以放在项目的根目录，来让 Jenkins 自动读取该文件。将 Jenkinsfile 提交到代码仓库有以下好处&lt;/p>
&lt;ol>
&lt;li>为所有分支和拉取请求自动创建管道构建过程。&lt;/li>
&lt;li>管道上的代码审查/迭代（以及其余的源代码）。&lt;/li>
&lt;li>管道的审计跟踪。&lt;/li>
&lt;li>管道的单一事实来源 [ 3 ]，可以由项目的多个成员查看和编辑。&lt;/li>
&lt;/ol>
&lt;h2 id="jenkinsfile-基本示例">Jenkinsfile 基本示例&lt;/h2>
&lt;p>Jenkinsfile 有自己的一套语法，一共有两种分类，声明式语法和脚本式语法。一般常用声明式语法。&lt;/p>
&lt;pre>&lt;code>pipeline {
agent any
options {
skipStagesAfterUnstable()
}
stages {
stage('Build') {
steps {
sh 'make'
}
}
stage('Test'){
steps {
sh 'make check'
junit 'reports/**/*.xml'
}
}
stage('Deploy') {
steps {
sh 'make publish'
}
}
}
}
&lt;/code>&lt;/pre>
&lt;ol>
&lt;li>pipeline 是特定于声明式管道的语法，该语法定义了一个“块”，其中包含用于执行整个管道的所有内容和指令&lt;/li>
&lt;li>agent 是声明式管道特定的语法，指示 Jenkins 为整个管道分配执行器（在节点上）和工作空间。可以指定代理为 docker，那么会创建一个容器，并在该容器中执行后续所有步骤。&lt;/li>
&lt;li>stage 是描述 此 Pipeline 阶段的 语法块 。了解更多关于 stage 在在声明管道语法块管道语法页。如所提到的上述，stage 块在脚本管道语法可选的。&lt;/li>
&lt;li>steps 是声明性管道特定的语法，描述了在 this 中要运行的步骤 stage。&lt;/li>
&lt;li>sh 是执行给定 shell 命令的 Pipeline 步骤（由 Pipeline：Nodes and Processes 插件提供）。&lt;/li>
&lt;li>junit 是另一个管道步骤（由 JUnit 插件提供），用于汇总测试报告&lt;/li>
&lt;/ol>
&lt;h2 id="名词介绍">名词介绍&lt;/h2>
&lt;h1 id="jenkins-部署">Jenkins 部署&lt;/h1>
&lt;h2 id="通过-war-文件安装-jenkins">通过 WAR 文件安装 Jenkins&lt;/h2>
&lt;p>通过该链接下载最新的 war 文件&lt;/p>
&lt;p>运行命令 java -jar jenkins.war 即可&lt;/p>
&lt;p>jenkins 启动后，会自动创建 /root/.jenkins/ 目录作为自己的存储数据的路径($JENKINS_HOME)，并将 $JENKINS_HOME 添加到环境变量中。默认监听在 8080 端口，通过浏览器访问即可&lt;/p>
&lt;h2 id="通过-docker-运行-jenkins">通过 docker 运行 jenkins&lt;/h2>
&lt;pre>&lt;code>docker volume create jenkins-data
docker run \
-u root \
-d \
--name jenkins \
-p 8080:8080 \
-p 50000:50000 \
-v jenkins-data:/var/jenkins_home \
-v /var/run/docker.sock:/var/run/docker.sock \
jenkinsci/blueocean
&lt;/code>&lt;/pre>
&lt;p>Note：&lt;/p>
&lt;ol>
&lt;li>Jenkins 运行在 docker 环境中时，是无法获取宿主机的相关信息的，比如宿主机上 $PATH 路径下的命令文件、宿主机的环境变量等等信息，都是无法获取的，在执行 shell 流程时，需要注意该情况。&lt;/li>
&lt;li>-v /var/run/docker.sock:/var/run/docker.sock 参数就是为了解决上述问题所使用的其中一个解决办法，将宿主机 docker 的 socker 挂载进容器中，那么通过容器启动的 Jenkins 在对 docker 操作时，就可以使用宿主机的 docker 命令，获取宿主机 docker 的镜像了。&lt;/li>
&lt;/ol>
&lt;h1 id="jenkins-初始化">Jenkins 初始化&lt;/h1>
&lt;p>Jenkins 启动后，在访问 Jenkins 的时候，会触发初始化配置内容，页面如下：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/cfhrw6/1616077873079-89b54590-c498-4fd0-89a6-c1d10d87373d.jpeg" alt="">&lt;/p>
&lt;p>并在后台日志中输入密码&lt;/p>
&lt;pre>&lt;code> ......*************************************************************Jenkins initial setup is required. An admin user has been created and a password generated.Please use the following password to proceed to installation:3c80b98b9aef457a87c7d202f6bd4dd7# 这个密码也会存在 Jenkins 数据路径的 /secrets/initialAdminPassword 文件中。This may also be found at: /var/jenkins_home/secrets/initialAdminPassword*************************************************************......
&lt;/code>&lt;/pre>
&lt;p>输入密码后，可以选择是根据向导继续初始化，还是点击下图右上角红框中的 X 来跳过向导。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/cfhrw6/1616077873043-73556142-9cba-4495-a70c-bd637acea581.jpeg" alt="">&lt;/p>
&lt;p>Note:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>如果跳过了该向导中创建用户的步骤，则日志中输出的密码可以作为 admin 用户的密码使用。如果创建了用户，则 initialAdminPassword 文件会被自动删除。因为新创建的用户就是具有最高权限的 admin 用户。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果输入密码后没有开始初始化向导页面。有可能是因为 Jenkins 的升级中心网站被墙的原因导致的，可以修改 $JENKINS_HOME/hudson.model.UpdateCenter.xml 文件中的 字段，将 Jenkins 的升级中心网址改为其他即可&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>可用的 URL 有如下这些&lt;/li>
&lt;li>&lt;a href="http://mirror.xmission.com/jenkins/updates/update-center.json">http://mirror.xmission.com/jenkins/updates/update-center.json&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json">https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://updates.jenkins-ci.org/download/plugins/">http://updates.jenkins-ci.org/download/plugins/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/current/update-center.json">https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/current/update-center.json&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://mirror.esuni.jp/jenkins/updates/update-center.json">http://mirror.esuni.jp/jenkins/updates/update-center.json&lt;/a>&lt;/li>
&lt;li>Localization: Chinese (Simplified) # Jenkins 中文插件&lt;/li>
&lt;/ul>
&lt;h1 id="jenkins-配置">Jenkins 配置&lt;/h1>
&lt;p>根据不同的安装情况，Jenkins 的配置文件存储路径都不同，不过 Jenkins 启动后，都会生成一个路径来保存自己的配置信心、插件、数据文件等等内容。可以将该目录称为 Jenkins 的数据目录。后文用 ${JENKINS_HOME} 来表示 Jenkins 的数据存储目录。&lt;/p>
&lt;p>${JENKINS_HOME} # Jenkins 数据存储目录&lt;/p>
&lt;ol>
&lt;li>./jobs/* #&lt;/li>
&lt;li>./workspace/* #&lt;/li>
&lt;/ol></description></item><item><title>Docs: Jenkins 任务示例</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/DevOps/Jenkins/Jenkins-%E4%BB%BB%E5%8A%A1%E7%A4%BA%E4%BE%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/DevOps/Jenkins/Jenkins-%E4%BB%BB%E5%8A%A1%E7%A4%BA%E4%BE%8B/</guid><description>
&lt;h1 id="heading">&lt;/h1>
&lt;p>通过 Jenkins 执行 shell 命令&lt;/p>
&lt;p>通过 Jenkins 流水线功能 构建 go 项目 hello world&lt;/p>
&lt;p>通过 Jenkins 执行 shell 命令&lt;/p>
&lt;p>在 Jenkins 首页点击新建任务，选择构建一个自由风格的软件项目，并输入名称，点击确定&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/zab1lx/1616077848094-96bfa9b9-8514-46db-ac32-6f2155bc57a4.jpeg" alt="">&lt;/p>
&lt;p>选择构建标签，增加执行 shell 步骤，&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/zab1lx/1616077848109-395b9055-45e1-4fe1-81a9-b37dcee6b2b9.jpeg" alt="">&lt;/p>
&lt;p>在命令框中，输入想要执行的 shell 命令(类似于 shell 脚本)，点击保存&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/zab1lx/1616077848105-6278dba5-7768-4937-9112-bc73e552a7ad.jpeg" alt="">&lt;/p>
&lt;p>点击立即构建后，Jenkins 就会根据配置的 shell 命令执行任务。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/zab1lx/1616077848120-db58946b-bd06-4bc8-ad3e-bda7771d493c.jpeg" alt="">&lt;/p>
&lt;p>点击下面红框中内容可以查看该次任务的详细信息，点击控制台输出，可以观察任务执行过程以及结果&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/zab1lx/1616077848107-37f21311-066a-4ec3-a9e8-091186e22181.jpeg" alt="">&lt;/p>
&lt;p>至此，一次简单的 Jenkins 任务就执行完成了。&lt;/p>
&lt;p>Note：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>本示例是使用 docker 运行的 Jenkins。并且本机器为 k8s 集群的 master 节点&lt;/p>
&lt;/li>
&lt;li>
&lt;p>由于 Jenkins 运行在 docker 环境中，是获取不到 docker 外部的 kubectl 命令的&lt;/p>
&lt;/li>
&lt;li>
&lt;p>所以本示例是将 kubectl 命令以及配置文件拷贝到 Jenkins 的容器中，才让该任务成功执行，否则该任务执行失败，并提示无法找到 kubectl 命令。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>通过 Jenkins 流水线功能 构建 go 项目 hello world&lt;/p>
&lt;p>新建一个流水线任务&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/zab1lx/1616077848144-9811b384-6531-4994-87ef-b9e8bc660e90.jpeg" alt="">&lt;/p>
&lt;p>点击流水线标签，在脚本中输入 Groovy 语言来指明流水线(pipeline)的步骤。&lt;/p>
&lt;pre>&lt;code>pipeline {
# 使用 docker 来代理执行本次 pipeline,代理镜像为golang。后续所有阶段的步骤都会在，通过该镜像运行的容器内进行。
agent { docker 'golang' }
# 指明本次 pileline 的各个阶段
stages {
# 第一阶段名为 wget
stage('wget') {
# 该阶段第一步，执行 shell 命令，下载main.go文件
steps {
sh 'wget https://raw.githubusercontent.com/DesistDaydream/jenkins_pipeline/master/main.go -O main.go'
}
}
# 第二阶段名为 run
stage('run') {
# 该阶段第一步，执行 shell 命令运行go程序
steps {
sh 'go run main.go'
}
}
}
}
&lt;/code>&lt;/pre>
&lt;p>点击保存后，开始立即构建，并观察控制台输出内容&lt;/p>
&lt;pre>&lt;code>Console Output
Started by user lichenhao
Running in Durability level: MAX_SURVIVABILITY
[Pipeline] Start of Pipeline
[Pipeline] node
Running on Jenkins in /var/jenkins_home/workspace/go-hello-world
[Pipeline] {
[Pipeline] isUnix
[Pipeline] sh
+ docker inspect -f . golang
.
# 判断本次流水线代理
[Pipeline] withDockerContainer
Jenkins seems to be running inside container 05695fdb9f0d2f41b9ba37335af3083539a4f50b0df119bbd8955b8f5c8a6fd9
# 当使用 docker 作为流水线代理时，会根据指定的镜像(这里指定的是golang)来启动一个容器，后续所有步骤都会在启动的容器中进行。
$ docker run -t -d -u 0:0 -w /var/jenkins_home/workspace/go-hello-world --volumes-from 05695fdb9f0d2f41b9ba37335af3083539a4f50b0df119bbd8955b8f5c8a6fd9 -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** golang cat
$ docker top 9491ee360563c343b9b2fc603b65d1dc0c1cfa06cbc4c1c3530cd9b7922042da -eo pid,comm
# 流水线第一阶段，下载 main.go
[Pipeline] {
[Pipeline] stage
[Pipeline] { (wget)
[Pipeline] sh
+ wget https://raw.githubusercontent.com/DesistDaydream/jenkins_pipeline/master/main.go -O main.go
--2020-07-31 16:10:42-- https://raw.githubusercontent.com/DesistDaydream/jenkins_pipeline/master/main.go
Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 151.101.108.133
Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|151.101.108.133|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 71 [text/plain]
Saving to: 'main.go.1'
0K 100% 1.99M=0s
2020-07-31 16:10:43 (1.99 MB/s) - 'main.go.1' saved [71/71]
[Pipeline] }
# 流水线第二阶段，运行 main.go
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (run)
[Pipeline] sh
+ go run main.go
hi,jenkins
[Pipeline] }
[Pipeline] // stage
[Pipeline] }
# 所有阶段执行完成后，停止并删除流水线代理容器
$ docker stop --time=1 9491ee360563c343b9b2fc603b65d1dc0c1cfa06cbc4c1c3530cd9b7922042da
$ docker rm -f 9491ee360563c343b9b2fc603b65d1dc0c1cfa06cbc4c1c3530cd9b7922042da
[Pipeline] // withDockerContainer
[Pipeline] }
[Pipeline] // node
[Pipeline] End of Pipeline
# 流水线结束，输出流水线工作结果。
Finished: SUCCESS
&lt;/code>&lt;/pre></description></item><item><title>Docs: Jenkins 页面详解</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/DevOps/Jenkins/Jenkins-%E9%A1%B5%E9%9D%A2%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/DevOps/Jenkins/Jenkins-%E9%A1%B5%E9%9D%A2%E8%AF%A6%E8%A7%A3/</guid><description>
&lt;h1 id="heading">&lt;/h1>
&lt;p>流水线任务&lt;/p>
&lt;p>General&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/ab7yqi/1616077861969-3249ea3f-1fe0-4313-aa5f-912913c7e656.jpeg" alt="">&lt;/p>
&lt;p>GitHub 项目 #&lt;/p>
&lt;p>This build requires lockable resources #&lt;/p>
&lt;p>Throttle builds #&lt;/p>
&lt;p>丢弃旧的构建 #&lt;/p>
&lt;p>参数化构建过程 # 指定各种参数以便在脚本或者 pipeline 中使用。&lt;/p>
&lt;ol>
&lt;li>字符参数 # 指定变量，名称为变量名，默认值为变量值。可以直接在脚本中引用。&lt;/li>
&lt;/ol>
&lt;p>关闭构建&lt;/p>
&lt;p>在必要的时候&lt;/p>
&lt;p>构建触发器&lt;/p>
&lt;p>用来指定触发本次任务的方式，比如提交代码时触发，或者定时触发等等。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/ab7yqi/1616077861983-48fd85c4-6f88-4884-b8b9-57888efcd5b3.jpeg" alt="">&lt;/p>
&lt;p>流水线&lt;/p>
&lt;p>用来指定 Jenkinsfile 的内容。&lt;/p>
&lt;p>定义 # 指定 Jenkinsfile 的获取方式。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Pipeline script # 直接在网页编写 Jenkinsfile 内容。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Pipeline script from SCM # 从项目根目录中查找 Jenkinsfile 文件&lt;/p>
&lt;ol>
&lt;li>
&lt;p>SCM # 指定获取 Jenkinsfile 的 SCM 及其 URL、认证、分支。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>脚本路径 # 指定 Jenkinsfile 所在位置的绝对路径&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>自由风格的软件项目&lt;/p>
&lt;p>General&lt;/p>
&lt;p>GitHub 项目 #&lt;/p>
&lt;p>This build requires lockable resources #&lt;/p>
&lt;p>Throttle builds #&lt;/p>
&lt;p>丢弃旧的构建 #&lt;/p>
&lt;p>参数化构建过程 # 指定各种参数以便在脚本或者 pipeline 中使用。&lt;/p>
&lt;ol>
&lt;li>字符参数 # 指定变量，名称为变量名，默认值为变量值。可以直接在脚本中引用。&lt;/li>
&lt;/ol>
&lt;p>关闭构建&lt;/p>
&lt;p>在必要的时候&lt;/p></description></item><item><title>Docs: Jenkins基于k8s的 CICD平台部署</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/DevOps/Jenkins/Jenkins%E5%9F%BA%E4%BA%8Ek8s%E7%9A%84-CICD%E5%B9%B3%E5%8F%B0%E9%83%A8%E7%BD%B2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/DevOps/Jenkins/Jenkins%E5%9F%BA%E4%BA%8Ek8s%E7%9A%84-CICD%E5%B9%B3%E5%8F%B0%E9%83%A8%E7%BD%B2/</guid><description>
&lt;h1 id="heading">&lt;/h1>
&lt;p>jenkins 基于 k8s 的 CICD 平台部署&lt;/p></description></item></channel></rss>