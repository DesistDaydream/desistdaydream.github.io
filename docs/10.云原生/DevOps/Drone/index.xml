<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – Drone</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/DevOps/Drone/</link><description>Recent content in Drone on 断念梦</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/DevOps/Drone/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Drone</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/DevOps/Drone/Drone/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/DevOps/Drone/Drone/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/drone/drone">GitHub 项目，drone/drone&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Drone 是一个比 Jenkins 更简单易用的现代化 CI/CD 平台。使用 Go 语言编写，基于 Docker 构建，使用简单的 yaml 配置文件来定义和执行 Docker 容器中定义的 Pipeline。&lt;/p>
&lt;p>Drone 由两个部分组成：&lt;/p>
&lt;ol>
&lt;li>Server # 用于对接 SCM，负责身份认证，SCM 配置，用户、Secrets 以及 webhook 相关的配置。当 Server 收到 SCM 的 webhook 消息后，会通知 Runner 执行 Pipeline。
&lt;ol>
&lt;li>可以启动多个 Server 来对接不同的 SCM。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Runners # 用于接收任务和运行 Pipeline。如果没有 Runner，那么在触发 Webhook，Drone 在开始 Pipeline 后，会处于 pending 状态并卡住。并且在 Drone Server 的日志中会看到如下报错：
&lt;ol>
&lt;li>&amp;ldquo;error&amp;rdquo;: &amp;ldquo;Cannot transition status via :enqueue from :pending (Reason(s): 状态 cannot transition via &amp;ldquo;enqueue&amp;rdquo;)&amp;rdquo;,&lt;/li>
&lt;li>&amp;ldquo;msg&amp;rdquo;: &amp;ldquo;manager: cannot publish status&amp;rdquo;,&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>Note：&lt;/p>
&lt;ol>
&lt;li>Runner 的类型对应 Pipelines 类型，如果 Runner 类型与 Pipelines 类型不对应，则该 Pipelines 则无法执行，并报错。&lt;/li>
&lt;li>可以安装多个不同类型的 Runner 来处理不同类型的 Pipelines。&lt;/li>
&lt;/ol>
&lt;h1 id="drone-部署">Drone 部署&lt;/h1>
&lt;p>注意：Drone 的 Server 端会对接多种 SCM，不同的 SCM 使用不同的运行参数来运行 Server 程序。&lt;/p>
&lt;p>由于 Server 与 Runner 的部署截图过多(主要是有对接各种 SCM 的参数，SCM 的配置都在 web 页面上完成的)，篇幅太长，所以另开一篇文档单独记录，详见：&lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/DevOps/Drone/Server%20%E4%B8%8E%20Runner%20%E9%83%A8%E7%BD%B2.md">Server 与 Runner 部署&lt;/a>&lt;/p>
&lt;h1 id="drone-关联文件">Drone 关联文件&lt;/h1>
&lt;p>drone.yml # Drone 通过该文件来定义流水线任务(Jenkins 使用的是 Groovy 语言)。参考 Drone 任务示例 文章中的第一个基本演示可以看到如何使用 yaml 来定义一个简单的 pipeline。参考 Drone Pipelines 详解 来学习如何通过一个 yaml 文件来开始一个流水线任务。&lt;/p></description></item><item><title>Docs: Drone Pipelines 详解</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/DevOps/Drone/Drone-Pipelines-%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/DevOps/Drone/Drone-Pipelines-%E8%AF%A6%E8%A7%A3/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>官方文档：&lt;a href="https://docs.drone.io/pipeline/overview/">https://docs.drone.io/pipeline/overview/&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Drone 默认通过 yaml 格式的名为 .drone.yml 的文件来指定 Pipelines 的行为。yaml 语法易于阅读和表达，将 .drone.yml 提交到代码仓库的根目录后，如果代码仓库配置了 webhook 并指定 Drone Server，那么当代码更改并触发 webhook 后，Drone Server 首先就会 clone 该仓库，并根据其中的 .drone.yml 文件中的内容，来执行后续 pipeline 动作。&lt;/p>
&lt;p>Note:Pipelines 从逻辑上看，就是一个或多个 Drone Plugins 的合集，每一个步骤都使用一个插件。具体原因详见下文 Pipeline 插件&lt;/p>
&lt;h2 id="droneyml-文件基本样例">.drone.yml 文件基本样例&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">pipeline&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">docker&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">default&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">steps&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">greeting&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">alpine&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">commands&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">echo hello&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">echo world&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>kind # 指定本次任务的种类，该示例任务为 pipeline 种类。还有 secret 与 signature 种类&lt;/li>
&lt;li>type # 指定 pipeline 的类型，不同的类型调用不同的 Runner 来执行任务。如果不填 type，则默认为 docker 类型。该示例任务为 docker 类型(docker 类型意味着后续的所有步骤都会启动一个容器，然后再容器中执行步骤的内容)。&lt;/li>
&lt;li>name # The name attribute defines a name for your pipeline. You can define one or many pipelines for your project.&lt;/li>
&lt;li>steps # The steps section defines an array of pipeline steps that are executed serially. If any step in the pipeline fails, the pipeline exits immediately.&lt;/li>
&lt;li>name # The name attribute defines the name of the pipeline step.&lt;/li>
&lt;li>image # 指定执行该步骤所使用的插件的镜像。&lt;/li>
&lt;li>commands # 指定执行该步骤的具体内容，commands 表示在容器中执行 shell 命令。如果任何命令的退出码非 0，则 pipeline 将会失败。&lt;/li>
&lt;/ol>
&lt;h3 id="该-pipelines-样例的流程详解">该 Pipelines 样例的流程详解&lt;/h3>
&lt;ol>
&lt;li>通过 drone/git 镜像启动容器，下载代码仓库中的代码&lt;/li>
&lt;li>通过 alpine 镜像启动容器，执行 commands 字段下给定的两条命令。&lt;/li>
&lt;/ol>
&lt;p>Note：&lt;/p>
&lt;ol>
&lt;li>这其中第二步生成的容器，其工作目录中会包含第一步从代码仓库中 clone 下来的所有文件。&lt;/li>
&lt;li>如果在 steps 中有新的文件生成，比如构建代码生成了二进制文件，那么这个新生成的文件连带着 clone 下来的文件，都会带到后面所有步骤启动的容器中。&lt;/li>
&lt;/ol>
&lt;h2 id="pipeline-的类型">Pipeline 的类型&lt;/h2>
&lt;p>Drone 支持不同类型的 pipeline，上面的示例使用的是 docker 类型。每种类型的 pipeline 都对不同的环境行了优化，现阶段 Drone 包括以下几种 pipeline：&lt;/p>
&lt;p>Note:Pipeline 的类型与 Runner 的类型相对应，比如 kubernetes 类型的 Pipeline 就需要一个在 kubernetes 类型的 Runner，否则当 Pipeline 触发时，其他类型的 Runner 无法连接 k8s 集群，也就无法继续处理后续任务。&lt;/p>
&lt;ol>
&lt;li>Docker Pipelines&lt;/li>
&lt;li>Kubernetes Pipelines&lt;/li>
&lt;li>Exec Pipelines&lt;/li>
&lt;li>SSH Pipelines&lt;/li>
&lt;li>Digital Ocean Pipelines&lt;/li>
&lt;li>MacStadium Pipelines&lt;/li>
&lt;li>等等等&lt;/li>
&lt;/ol>
&lt;h2 id="pipeline-插件">Pipeline 插件&lt;/h2>
&lt;p>官方文档：&lt;a href="https://docs.drone.io/plugins/overview/">https://docs.drone.io/plugins/overview/&lt;/a>&lt;/p>
&lt;p>在 Drone Pipeline 中可以通过 Plugins(插件) 扩展功能，以实现更复杂的 CI/CD 需求。&lt;/p>
&lt;p>Plugins 的特点：&lt;/p>
&lt;ol>
&lt;li>所谓的插件其实就是一个一个容器，这个容器就是 Pipeline 中每个 steps 中指定镜像启动的。&lt;/li>
&lt;li>每种类型的 Pipeline 都有自己可用的插件，各类型 Pipeline 下的 Plugins 的使用方法详见该类型的文档。&lt;/li>
&lt;li>插件可以用于执行命令、部署代码、发布版本、发送通知等等等。&lt;/li>
&lt;li>比如上文中 .drone.yml 样例中 steps 下的 alpine ，就可以称之为一个插件。&lt;/li>
&lt;li>由于插件只是一个 Docker 容器，这意味着我可以在任何运行的容器中使用任何变成语言来编写一个具有某些功能的插件。然后将这个容器提交成一个 image，在 Pipeline 中使用。&lt;/li>
&lt;/ol>
&lt;p>比如在 Pipeline 中有这么一个步骤：&lt;/p>
&lt;pre>&lt;code>- name: publish
image: plugins/docker
settings:
username: kevinbacon
password: pa55word
repo: lchdzh/drone-docker-build-test
tags:
- 1.0.0
- 1.0
&lt;/code>&lt;/pre>
&lt;p>这个步骤使用了名为 plugins/docker 的插件，这个插件的作用就是获取其工作目录下的 Dockerfile 文件，并使用该文件构建 docker image，构建完成后，推送到指定的镜像仓库中。&lt;/p>
&lt;p>通过 .drone.yml 文件中的 settings 字段可以对该插件的运行行为进行定义(作为环境变量传递到容器中)。这个例子就是将 username 与 password 作为登陆镜像仓库的用户名和密码；repo 是构建完成后，将要把镜像推送到哪个仓库；tags 是构建完成后镜像的 tag。settings 中会进行如下转换并传递到容器中：&lt;/p>
&lt;pre>&lt;code>PLUGIN_USERNAME=kevinbacon
PLUGIN_PASSWORD=pa55word
PLUGIN_REPO=lchdzh/drone-docker-build-test
PLUGIN_TAGS=1.0.0,1.0
&lt;/code>&lt;/pre>
&lt;h1 id="docker-类型的-pipeline">Docker 类型的 Pipeline&lt;/h1>
&lt;p>官方文档：&lt;a href="https://docs.drone.io/pipeline/docker/overview/">https://docs.drone.io/pipeline/docker/overview/&lt;/a>&lt;/p>
&lt;h1 id="kubernetes-类型的-pipelin">Kubernetes 类型的 Pipelin&lt;/h1>
&lt;p>官方文档：&lt;a href="https://docs.drone.io/pipeline/kubernetes/overview/">https://docs.drone.io/pipeline/kubernetes/overview/&lt;/a>&lt;/p></description></item><item><title>Docs: drone 命令行工具</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/DevOps/Drone/drone-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/DevOps/Drone/drone-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</guid><description/></item><item><title>Docs: Drone 任务示例</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/DevOps/Drone/Drone-%E4%BB%BB%E5%8A%A1%E7%A4%BA%E4%BE%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/DevOps/Drone/Drone-%E4%BB%BB%E5%8A%A1%E7%A4%BA%E4%BE%8B/</guid><description>
&lt;p>说明：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Drone 无法通过手动来触发任务，需要在代码仓库开启 webhook，并配置该 webhook 的地址指向 Drone。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>这样在提交代码时，会自动通过 webhook 通知 Drone，有新的代码更改，可以触发任务。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h1 id="drone-的基本示例演示">Drone 的基本示例演示&lt;/h1>
&lt;p>在 git 仓库中的根目录中，需要创建一个名为 .drone.yml 的文件(该文件也可以使用别的名字，如果要使用别的名字，那么在 Drone 的配置中也要进行相应修改)&lt;/p>
&lt;pre>&lt;code>kind: pipeline
type: docker
name: default
steps:
- name: greeting
image: alpine
commands:
- echo hello
- echo world
&lt;/code>&lt;/pre>
&lt;p>项目的根目录下创建好该文件后，由于有 webhook 的存在，GitLab 会自动通知 Dreon 开始任务，如果没通知，那么可以通过下图的方式来手动触发 Webhook(在一个项目的 webhook 设置，手动测试 push)。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/eluf5n/1616077689964-63e8cca0-f50d-42ec-8b95-4a3c4982ba2c.jpeg" alt="">&lt;/p>
&lt;p>Drone 收到 Webhook 的通知后，开始任务，首先会 clone 该仓库，然后启动 alpine 容器，并在容器中，执行 commands 中执行的命令。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/eluf5n/1616077689966-c28f6642-8925-48c5-98b8-6d06fdf5612a.jpeg" alt="">&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/eluf5n/1616077689966-37666074-eae6-4135-9864-9d0264238779.jpeg" alt="">&lt;/p>
&lt;p>至此，一套最简单的 CI/CD 流程就算完成了&lt;/p>
&lt;h1 id="通过-drone-运行-go-语言的-hello-world">通过 Drone 运行 go 语言的 hello world&lt;/h1>
&lt;p>.drone.yaml 文件内容如下&lt;/p>
&lt;pre>&lt;code>kind: pipeline
name: default
steps:
- name: test
image: golang
commands:
- go test
- go run main.go
&lt;/code>&lt;/pre>
&lt;p>在当前目录写一个名为 main.go 的 go 语言代码并提交，触发 Drone 任务。执行效果如下：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/eluf5n/1616077689965-fbbe7b4f-87e1-406f-afcc-3d2f94018ac8.jpeg" alt="">&lt;/p>
&lt;h1 id="构建代码后构建-docker-镜像并推送到镜像仓库">构建代码后构建 docker 镜像并推送到镜像仓库&lt;/h1>
&lt;pre>&lt;code>kind: pipeline
name: default
steps:
- name: build
image: golang:latest
commands:
- go build -o hello-world
- name: docker
image: plugins/docker
settings:
repo: lchdzh/drone-docker-build-test
use_cache: true
username:
from_secret: docker_username
password:
from_secret: docker_password
tags:
- latest
&lt;/code>&lt;/pre></description></item><item><title>Docs: Server 与 Runner 部署</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/DevOps/Drone/Server-%E4%B8%8E-Runner-%E9%83%A8%E7%BD%B2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/DevOps/Drone/Server-%E4%B8%8E-Runner-%E9%83%A8%E7%BD%B2/</guid><description>
&lt;h1 id="github-server">GitHub Server&lt;/h1>
&lt;p>官方文档：&lt;a href="https://docs.drone.io/server/provider/github/">https://docs.drone.io/server/provider/github/&lt;/a>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>在 GitHub 上创建 OAuth Application，通过此连接创建。也可以点击 头像—Settings—Developer settings—OAuth Apps 来进入创建页面&lt;/p>
&lt;ol>
&lt;li>
&lt;p>在创建页面需要指明该 OAuth Application 的 name、URL、callback URL 这三个信息。下面是三个信息的例子：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Application name：Grone&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Homepage URL：&lt;a href="http://10.10.100.150">http://10.10.100.150&lt;/a> # 这个 URL 指的是将要运行 Drone 的 GitHub Server 端设备 IP。也可以使用域名来表示。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Authorization callback URL：&lt;a href="http://10.10.100.150/login">http://10.10.100.150/login&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>创建完成后，会生成两个信息 Client ID 与 Client Secret。下面是这两个信息的例子&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Client ID：df6dd0a1d49a4a26a151&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Client Secret：26507ea48eab7612f0bd8865f9d6091608baa7f3&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>OAuth Application 的相关信息在安装 Drone 的 GitHub Server 端时会用到&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>创建一个共享密钥，该密钥用来在 Server 与 Runner 两端进行通信时进行验证。使用如下命令即可&lt;/p>
&lt;ol>
&lt;li>
&lt;p>openssl rand -hex 16 #&lt;/p>
&lt;/li>
&lt;li>
&lt;p>生成字符串为：3de4792f96c2aa9e483b36a54b23d70a&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>使用 docker 镜像运行 Drone 的 GitHub Server 端&lt;/p>
&lt;p>docker run &lt;br>
&amp;ndash;volume=/var/lib/drone:/data &lt;br>
&amp;ndash;env=DRONE_GITHUB_CLIENT_ID=df6dd0a1d49a4a26a151 &lt;br>
&amp;ndash;env=DRONE_GITHUB_CLIENT_SECRET=26507ea48eab7612f0bd8865f9d6091608baa7f3 &lt;br>
&amp;ndash;env=DRONE_RPC_SECRET=3de4792f96c2aa9e483b36a54b23d70a &lt;br>
&amp;ndash;env=DRONE_SERVER_HOST=10.10.100.150 &lt;br>
&amp;ndash;env=DRONE_SERVER_PROTO=http &lt;br>
&amp;ndash;publish=80:80 &lt;br>
&amp;ndash;publish=443:443 &lt;br>
&amp;ndash;restart=always &lt;br>
&amp;ndash;detach=true &lt;br>
&amp;ndash;name=drone &lt;br>
drone/drone:1&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Server 端启动后， 通过 10.10.100.150 来访问，会弹出让 GitHub 授权的页面&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qqgger/1616077734543-9c1fcf23-8238-46a8-b2b6-75e5be31e563.jpeg" alt="">&lt;/p>
&lt;ol>
&lt;li>授权完成，即可登录到 Drone Server 端的 web 界面。可以看到，已经同步了我 GitHub 上的所有仓库，我可以使用这些仓库的代码来执行流水线操作。&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qqgger/1616077734552-f99408e2-e44f-439e-bc0a-7286a3c644fd.jpeg" alt="">&lt;/p>
&lt;ol>
&lt;li>
&lt;p>选择一个仓库，进入，点击 Activate Repository ，这样这个仓库就会激活，并在 GitHub 上该仓库的设置中，添加 webhooks 信息，当 GitHub 收到代码提交时，就会自动向 Drone Server 发送信息，执行自动化 pipeline。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>但是！值得注意的是，由于 Drone Server 无法手动触发 pipeline ，所以 Server 会等待 GitHub 上代码变更之后的 WebHook 触发。但是查看下图可以看到，由于 Server 是安装在内网的，Github 服务器是无法访问的，所以就算部署完 Server ，也无法通过 GitHub 代码提交来触发 pipeline。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/qqgger/1616077734546-284ab667-96a1-4dcf-a36d-73f507314160.jpeg" alt="">&lt;/p>
&lt;h1 id="gitlab-server">GitLab Server&lt;/h1>
&lt;p>GitLab Server 的部署方式与 GitHub 基本一致&lt;/p>
&lt;p>官方文档：&lt;a href="https://docs.drone.io/server/provider/gitlab/">https://docs.drone.io/server/provider/gitlab/&lt;/a>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>创建 OAuth Application，通过此连接创建。也可以点击 头像—Settings(设置)—Applications(应用) 来进入创建页面&lt;/p>
&lt;ol>
&lt;li>
&lt;p>在创建页面需要指明 Name(名称) 与 Redirect URL&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Name：Grone&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Redirect URL：&lt;a href="http://10.10.100.150/login">http://10.10.100.150/login&lt;/a> # 这个 URL 指的是将要运行 Drone 的 GitLab Server 端设备 IP。也可以使用域名来表示。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>创建完成后，会生成两个信息 Application ID 与 Secret。下面是这两个信息的例子&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Application ID(应用程序 ID)：cc1443ac09e700fb93676bd22b42e4e79f47db9db7b0c48938e4358fcbb01031&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Secret(密码)：edaebba6a1e0a5ef80b5f89b2bfd3857fe9c088e14299a27cb16147b71098a2b&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>Application 的相关信息在安装 Drone 的 GitLab Server 端时会用到&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>创建一个共享密钥，该密钥用来在 Server 与 Runner 两端进行通信时进行验证。使用如下命令即可&lt;/p>
&lt;ol>
&lt;li>
&lt;p>openssl rand -hex 16 #&lt;/p>
&lt;/li>
&lt;li>
&lt;p>生成字符串为：3de4792f96c2aa9e483b36a54b23d70a&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>使用 docker 镜像运行 Drone 的 GitLab Server 端&lt;/p>
&lt;p>docker run &lt;br>
&amp;ndash;volume=/var/lib/drone:/data &lt;br>
&amp;ndash;env=DRONE_GITLAB_SERVER=http://10.10.100.151/ &lt;br>
&amp;ndash;env=DRONE_GITLAB_CLIENT_ID=cc1443ac09e700fb93676bd22b42e4e79f47db9db7b0c48938e4358fcbb01031 &lt;br>
&amp;ndash;env=DRONE_GITLAB_CLIENT_SECRET=edaebba6a1e0a5ef80b5f89b2bfd3857fe9c088e14299a27cb16147b71098a2b &lt;br>
&amp;ndash;env=DRONE_RPC_SECRET=3de4792f96c2aa9e483b36a54b23d70a &lt;br>
&amp;ndash;env=DRONE_SERVER_HOST=10.10.100.150 &lt;br>
&amp;ndash;env=DRONE_SERVER_PROTO=http &lt;br>
&amp;ndash;publish=80:80 &lt;br>
&amp;ndash;publish=443:443 &lt;br>
&amp;ndash;restart=always &lt;br>
&amp;ndash;detach=true &lt;br>
&amp;ndash;name=drone &lt;br>
drone/drone:1&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Server 端启动后， 通过 10.10.100.150 来访问，会弹出让 GitLab 授权的页面&lt;/p>
&lt;/li>
&lt;li>
&lt;p>授权完成即可开始使用 Drone。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>Note：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>如果 GitLab 在配置 webhook 时报错 url is blocked Requests to the local network are not allowed，那么修改 GitLab 的设置即可解决。修改路径如下：&lt;/p>
&lt;/li>
&lt;li>
&lt;p>登录管理员账号，在 Admin area 中(页面左上角的)，左侧 Settings -&amp;gt; Network -&amp;gt; Outbound requests，勾选 Allow requests to the local network from hooks and services&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h1 id="docker-runner">Docker Runner&lt;/h1>
&lt;p>官方文档：&lt;a href="https://docs.drone.io/runner/docker/overview/">https://docs.drone.io/runner/docker/overview/&lt;/a>&lt;/p>
&lt;p>DRONE_RPC_HOST # 指定 Drone Server 的地址和端口&lt;/p>
&lt;p>DRONE_RPC_SECRET # 指定 Runner 与 Server 交互的认证信息。需要与 Server 端的该参数的值保持一致。&lt;/p>
&lt;pre>&lt;code>docker run -d \
-v /var/run/docker.sock:/var/run/docker.sock \
-e DRONE_RPC_PROTO=http \
-e DRONE_RPC_HOST=10.10.100.150 \
-e DRONE_RPC_SECRET=3de4792f96c2aa9e483b36a54b23d70a \
-e DRONE_RUNNER_CAPACITY=2 \
-e DRONE_RUNNER_NAME=${HOSTNAME} \
-p 3000:3000 \
--restart always \
--name runner \
drone/drone-runner-docker:1
&lt;/code>&lt;/pre>
&lt;h1 id="kuberntes-runner">Kuberntes Runner&lt;/h1>
&lt;p>官方文档：&lt;/p></description></item></channel></rss>