<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦 – 容器运行时管理</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.2.%E5%AE%9E%E7%8E%B0%E5%AE%B9%E5%99%A8%E7%9A%84%E5%B7%A5%E5%85%B7/%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/%E5%AE%B9%E5%99%A8%E8%BF%90%E8%A1%8C%E6%97%B6%E7%AE%A1%E7%90%86/</link><description>Recent content in 容器运行时管理 on 断念梦</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.2.%E5%AE%9E%E7%8E%B0%E5%AE%B9%E5%99%A8%E7%9A%84%E5%B7%A5%E5%85%B7/%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/%E5%AE%B9%E5%99%A8%E8%BF%90%E8%A1%8C%E6%97%B6%E7%AE%A1%E7%90%86/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: 改变运行状态的容器配置</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.2.%E5%AE%9E%E7%8E%B0%E5%AE%B9%E5%99%A8%E7%9A%84%E5%B7%A5%E5%85%B7/%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/%E5%AE%B9%E5%99%A8%E8%BF%90%E8%A1%8C%E6%97%B6%E7%AE%A1%E7%90%86/%E6%94%B9%E5%8F%98%E8%BF%90%E8%A1%8C%E7%8A%B6%E6%80%81%E7%9A%84%E5%AE%B9%E5%99%A8%E9%85%8D%E7%BD%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.2.%E5%AE%9E%E7%8E%B0%E5%AE%B9%E5%99%A8%E7%9A%84%E5%B7%A5%E5%85%B7/%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/%E5%AE%B9%E5%99%A8%E8%BF%90%E8%A1%8C%E6%97%B6%E7%AE%A1%E7%90%86/%E6%94%B9%E5%8F%98%E8%BF%90%E8%A1%8C%E7%8A%B6%E6%80%81%E7%9A%84%E5%AE%B9%E5%99%A8%E9%85%8D%E7%BD%AE/</guid><description>
&lt;h1 id="修改已创建容器的端口映射">修改已创建容器的端口映射&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/SUzGObH1XtIJisZCb8OWqw">公众号-进击云原生，骚操作！居然能修改已运行的 Docker 容器端口映射？&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;blockquote>
&lt;p>其实吧~~~还是直接用 docker-compose 省事。&lt;/p>
&lt;/blockquote>
&lt;p>在 &lt;code>/var/lib/docker/containers/$(docker inspect ${容器名称} --format '{{.Id}}')/hostconfig.json&lt;/code> 文件中找到 &lt;code>&amp;quot;PortBindings&amp;quot;:{}&lt;/code> 字段
比如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;PortBindings&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;8502/tcp&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;HostIp&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;HostPort&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;8502&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;8505/tcp&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;HostIp&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;HostPort&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;8505&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果 &lt;code>config.v2.json&lt;/code> 配置文件或者 &lt;code>config.json&lt;/code> 文件也有关于端口的字段，也需要同步修改。只需要修改 &lt;code>&amp;quot;ExposedPorts&amp;quot;: {}&lt;/code> 相关之处。
比如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Args&amp;#34;&lt;/span>: [],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Config&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;ExposedPorts&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;8502/tcp&amp;#34;&lt;/span>: {},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;8505/tcp&amp;#34;&lt;/span>: {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Entrypoint&amp;#34;&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;/bin/sh&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改完成后启动容器即可
这样就不用删除容器了。&lt;/p></description></item><item><title>Docs: 进入容器文件系统</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.2.%E5%AE%9E%E7%8E%B0%E5%AE%B9%E5%99%A8%E7%9A%84%E5%B7%A5%E5%85%B7/%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/%E5%AE%B9%E5%99%A8%E8%BF%90%E8%A1%8C%E6%97%B6%E7%AE%A1%E7%90%86/%E8%BF%9B%E5%85%A5%E5%AE%B9%E5%99%A8%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.2.%E5%AE%9E%E7%8E%B0%E5%AE%B9%E5%99%A8%E7%9A%84%E5%B7%A5%E5%85%B7/%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/%E5%AE%B9%E5%99%A8%E8%BF%90%E8%A1%8C%E6%97%B6%E7%AE%A1%E7%90%86/%E8%BF%9B%E5%85%A5%E5%AE%B9%E5%99%A8%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/FArHis8RB6OgOUpLSzhPog">公众号-CNCF，容器文件在哪？检查容器文件系统&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>如果你经常使用容器，那么你很有可能希望在某个时刻查看正在运行的容器的文件系统。也许容器无法正常运行，你想读取一些日志，也许你想检查容器内部的一些配置文件… 或者，你可能像我一样，想在该容器中的二进制文件上放置一些 eBPF 探针（稍后将详细介绍）。&lt;/p>
&lt;p>不管原因是什么，在这篇文章中，我们将介绍一些可以用来检查容器中的文件的方法。&lt;/p>
&lt;p>我们将从研究容器文件系统的简单和通常推荐的方法开始，并讨论为什么它们不能总是工作。接下来，我们将对 Linux 内核如何管理容器文件系统有一个基本的了解，我们将利用这一了解以不同但仍然简单的方式检查文件系统。&lt;/p>
&lt;h2 id="方法一exec-到容器中">方法一：Exec 到容器中&lt;/h2>
&lt;p>如果你快速搜索如何检查容器的文件系统，你会发现一个常见的解决方案是使用 Docker 命令：&lt;/p>
&lt;pre>&lt;code>docker exec -it mycontainer /bin/bash
&lt;/code>&lt;/pre>
&lt;p>这是一个很好的开始。如果它能满足你的所有需求，你应该继续使用它。&lt;/p>
&lt;p>然而，这种方法的一个缺点是，它需要在容器中存在一个 shell。如果容器中没有 / bin/bash、/bin/sh 或其他 shell，那么这种方法将不起作用。例如，我们为 Pixie 项目构建的许多容器都是基于无 distroless 的，并且没有包含一个 shell 来保持镜像较小。在这些情况下，这种方法不起作用。&lt;/p>
&lt;p>即使 shell 可用，你也无法访问所有你习惯使用的工具。因此，如果容器中没有安装 grep，那么你也不能访问 grep。这是另一个找更好工作的理由。&lt;/p>
&lt;h2 id="方法二使用-nsenter">方法二：使用 nsenter&lt;/h2>
&lt;p>如果你再深入一点，就会意识到容器进程与 Linux 主机上的其他进程一样，只是在命名空间中运行，以使它们与系统的其他部分隔离。&lt;/p>
&lt;p>所以你可以使用 nsenter 命令来输入目标容器的命名空间，使用类似这样的东西：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Get the host PID of the process in the container&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PID&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>docker container inspect mycontainer | jq &lt;span style="color:#e6db74">&amp;#39;.[0].State.Pid&amp;#39;&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Use nsenter to go into the container’s mount namespace.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo nsenter -m -t $PID /bin/bash
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>它进入目标进程的挂载（-m）命名空间（-t $PID），并运行 / bin/bash。进入挂载命名空间本质上意味着我们获得容器所看到的文件系统视图。&lt;/p>
&lt;p>这种方法似乎比 docker 的 exec 方法更有前途，但也遇到了类似的问题：它要求目标容器中包含 / bin/bash（或其他 shell）。如果我们输入的不是挂载命名空间，我们仍然可以访问主机上的文件，但是因为我们是在执行 / bin/bash（或其他 shell）之前输入挂载命名空间，所以如果挂载命名空间中没有 shell，我们就不走运了。&lt;/p>
&lt;h2 id="方法三使用-docker-复制">方法三：使用 docker 复制&lt;/h2>
&lt;p>解决这个问题的另一种方法是简单地将相关文件复制到主机，然后使用复制的文件。&lt;/p>
&lt;p>要从正在运行的容器中复制选定的文件，可以使用：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker cp mycontainer:/path/to/file file
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>也可以用以下方法来快照整个文件系统：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker export mycontainer -o container_fs.tar
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这些命令使你能够检查文件，当容器可能没有 shell 或你需要的工具时，这些命令比前两种方法有了很大的改进。&lt;/p>
&lt;h2 id="方法四在主机上查找文件系统">方法四：在主机上查找文件系统&lt;/h2>
&lt;p>复制方法解决了我们的许多问题，但是如果你试图监视日志文件呢？或者，如果你试图将 eBPF 探针部署到容器中的文件中，又该怎么办呢？在这些情况下，复制是不起作用的。&lt;/p>
&lt;p>我们希望直接从主机访问容器的文件系统。容器的文件应该在主机的文件系统中，但是在哪里呢？&lt;/p>
&lt;p>注意：&lt;/p>
&lt;ul>
&lt;li>Docker 与 Containerd 的很多挂载都是使用 bind 类型，单独通过 &lt;code>mount&lt;/code> 命令无法列出这些挂载，只能通过 inspect 子命令查看挂载信息，进而通过这些信息找到挂载到容器中的目录。&lt;/li>
&lt;/ul>
&lt;h3 id="docker">Docker&lt;/h3>
&lt;p>Docker 的 inspect 命令给了我们一个线索：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>export CONTAINER_NAME&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;myapp&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker container inspect &lt;span style="color:#e6db74">${&lt;/span>CONTAINER_NAME&lt;span style="color:#e6db74">}&lt;/span> | jq &lt;span style="color:#e6db74">&amp;#39;.[0].GraphDriver&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这给我们：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Data&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;LowerDir&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/var/lib/docker/overlay2/63ec1a08b063c0226141a9071b5df7958880aae6be5dc9870a279a13ff7134ab-init/diff:/var/lib/docker/overlay2/524a0d000817a3c20c5d32b79c6153aea545ced8eed7b78ca25e0d74c97efc0d/diff&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;MergedDir&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/var/lib/docker/overlay2/63ec1a08b063c0226141a9071b5df7958880aae6be5dc9870a279a13ff7134ab/merged&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;UpperDir&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/var/lib/docker/overlay2/63ec1a08b063c0226141a9071b5df7958880aae6be5dc9870a279a13ff7134ab/diff&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;WorkDir&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/var/lib/docker/overlay2/63ec1a08b063c0226141a9071b5df7958880aae6be5dc9870a279a13ff7134ab/work&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;overlay2&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>让我们来分析一下：&lt;/p>
&lt;ul>
&lt;li>LowerDir：包含容器内所有层的文件系统，最后一层除外&lt;/li>
&lt;li>UpperDir：容器最上层的文件系统。这也是反映任何运行时修改的地方。&lt;/li>
&lt;li>MergedDir：文件系统所有层的组合视图。&lt;/li>
&lt;li>WorkDir：用于管理文件系统的内部工作目录。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/5313f688-e9e7-4352-9889-309c574b4a32/640" alt="">
基于 overlayfs 的容器文件系统结构。&lt;/p>
&lt;p>因此，要查看容器中的文件，只需查看 MergedDir 路径。&lt;/p>
&lt;pre>&lt;code>sudo ls /var/lib/docker/overlay2/63ec1a08b063c0226141a9071b5df7958880aae6be5dc9870a279a13ff7134ab/merged
&lt;/code>&lt;/pre>
&lt;p>如果你想了解文件系统工作的更多细节，你可以查看 Martin Heinz 关于 overlay 文件系统的博客文章：&lt;a href="https://martinheinz.dev/blog/44%E3%80%82">https://martinheinz.dev/blog/44。&lt;/a>&lt;/p>
&lt;h3 id="containerd">Containerd&lt;/h3>
&lt;p>&lt;code>nerdctl ps&lt;/code> 找到容器 ID&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>export CONTAINER_NAME&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;myapp&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/run/containerd/io.containerd.runtime.v2.task/default/&lt;span style="color:#66d9ef">$(&lt;/span>nerdctl inspect &lt;span style="color:#e6db74">${&lt;/span>CONTAINER_NAME&lt;span style="color:#e6db74">}&lt;/span> --format &lt;span style="color:#f92672">{{&lt;/span>.Id&lt;span style="color:#f92672">}}&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果是在 k8s 中挂载的，则还需要通过 crictl 或 nerdctl 的 inspect 找到 bind 类型的挂载，以查看外挂到容器中的目录。&lt;/p>
&lt;h2 id="方法五procpidroot">方法五：/proc/PID/root&lt;/h2>
&lt;p>把最好的留到最后，还有一种从主机找到容器文件系统的更简单的方法。使用容器内进程的宿主 PID，你可以简单地运行：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo ls /proc/&amp;lt;PID&amp;gt;/root
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Linux 已经为你提供了进程挂载命名空间的视图。&lt;/p>
&lt;p>此时，你可能会想：为什么我们不采用这种方法，并将其变成一篇只有一行字的博客文章呢？但这都是关于旅程，对吧？&lt;/p>
&lt;h2 id="彩蛋procpidmountinfo">彩蛋：/proc/PID/mountinfo&lt;/h2>
&lt;p>出于好奇，方法四中讨论的关于容器 overlay 文件系统的所有信息也可以直接从 Linux /proc 文件系统中发现。如果你查看 / proc//mountinfo，你会看到如下内容：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">2363&lt;/span> &lt;span style="color:#ae81ff">1470&lt;/span> 0:90 / / rw,relatime master:91 - overlay overlay rw,lowerdir&lt;span style="color:#f92672">=&lt;/span>/var/lib/docker/overlay2/l/YZVAVZS6HYQHLGEPJHZSWTJ4ZU:/var/lib/docker/overlay2/l/ZYW5O24UWWKAUH6UW7K2DGV3PB,upperdir&lt;span style="color:#f92672">=&lt;/span>/var/lib/docker/overlay2/63ec1a08b063c0226141a9071b5df7958880aae6be5dc9870a279a13ff7134ab/diff,workdir&lt;span style="color:#f92672">=&lt;/span>/var/lib/docker/overlay2/63ec1a08b063c0226141a9071b5df7958880aae6be5dc9870a279a13ff7134ab/work
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">2364&lt;/span> &lt;span style="color:#ae81ff">2363&lt;/span> 0:93 / /proc rw,nosuid,nodev,noexec,relatime - proc proc rw
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">2365&lt;/span> &lt;span style="color:#ae81ff">2363&lt;/span> 0:94 / /dev rw,nosuid - tmpfs tmpfs rw,size&lt;span style="color:#f92672">=&lt;/span>65536k,mode&lt;span style="color:#f92672">=&lt;/span>755,inode64
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>…
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在这里，你可以看到容器已经挂载了一个覆盖文件系统作为它的根。它还报告与 docker inspect 报告相同类型的信息，包括容器文件系统的 LowerDir 和 UpperDir。它没有直接显示 MergedDir，但你可以直接使用 UpperDir 并将 diff 改为 merged，这样你就可以看到容器的文件系统了。&lt;/p>
&lt;h2 id="我们在-pixie-怎么用这个">我们在 Pixie 怎么用这个&lt;/h2>
&lt;p>在本博客的开头，我提到了 Pixie 项目需要如何在容器上放置 eBPF 探针。为什么和如何？&lt;/p>
&lt;p>Pixie 内部的 Stirling 模块负责收集可观察数据。由于是 k8s 原生的，所以收集的很多数据都来自于在容器中运行的应用程序。Stirling 还使用 eBPF 探针从它监视的进程中收集数据。例如，Stirling 在 OpenSSL 上部署 eBPF 探针来跟踪加密的消息（如果你想了解更多有关这方面的细节，请参阅 SSL 跟踪博客[1]）。&lt;/p>
&lt;p>由于每个容器都捆绑了自己的 OpenSSL 和其他库，因此 Stirling 部署的任何 eBPF 探针都必须位于容器内的文件上。因此，Stirling 使用本文中讨论的技术在 K8s 容器中找到感兴趣的库，然后从主机将 eBPF 探针部署到这些二进制文件上。&lt;/p>
&lt;p>下图概述了在另一个容器中部署 eBPF 探针的工作方式。
&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/5313f688-e9e7-4352-9889-309c574b4a32/640" alt="">
Stirling 通过挂载主机文件系统在其他容器上部署 eBPF 探针，然后在主机上找到目标容器文件系统。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>下次当你需要检查容器中的文件时，希望你能尝试一下这些技巧。一旦你体验到不再受容器有没有 shell 限制的自由，你可能就再也不会回去了。只需要访问 / proc//root！&lt;/p>
&lt;h3 id="参考资料">参考资料&lt;/h3>
&lt;p>[1]SSL 跟踪博客: &lt;a href="https://blog.px.dev/ebpf-openssl-tracing/">&lt;em>https://blog.px.dev/ebpf-openssl-tracing/&lt;/em>&lt;/a>&lt;/p>
&lt;p>&lt;strong>_*&lt;strong>CNCF*&lt;/strong>****&lt;/strong>（*&lt;strong>****&lt;strong>云原生计算基金会&lt;/strong>*）致力于培育和维护一个厂商中立的开源生态系统，来推广云原生技术。我们通过将最前沿的模式民主化，让这些创新为大众所用。请长按以下二维码进行关注。_&lt;/strong>&lt;/p></description></item><item><title>Docs: 容器运行时管理</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.2.%E5%AE%9E%E7%8E%B0%E5%AE%B9%E5%99%A8%E7%9A%84%E5%B7%A5%E5%85%B7/%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/%E5%AE%B9%E5%99%A8%E8%BF%90%E8%A1%8C%E6%97%B6%E7%AE%A1%E7%90%86/%E5%AE%B9%E5%99%A8%E8%BF%90%E8%A1%8C%E6%97%B6%E7%AE%A1%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/2.2.%E5%AE%9E%E7%8E%B0%E5%AE%B9%E5%99%A8%E7%9A%84%E5%B7%A5%E5%85%B7/%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/%E5%AE%B9%E5%99%A8%E8%BF%90%E8%A1%8C%E6%97%B6%E7%AE%A1%E7%90%86/%E5%AE%B9%E5%99%A8%E8%BF%90%E8%A1%8C%E6%97%B6%E7%AE%A1%E7%90%86/</guid><description>
&lt;h1 id="概述">概述&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;/blockquote>
&lt;p>容器运行时通常都是由实现容器的工具自己管理的，如果要说真正通用的管理，可能只有 runc 了，而 runc 本质就是通过类似 unshare、nsenter 等工具完成容器运行时的功能。&lt;/p>
&lt;h1 id="unshare--创建-namesapce">unshare # 创建 namesapce&lt;/h1>
&lt;h1 id="nsenter--使用其他进程的名称空间运行程序">nsenter # 使用其他进程的名称空间运行程序&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://man7.org/linux/man-pages/man1/nsenter.1.html">Manual(手册),nsenter(1)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>就像这个工具的名字一样，nsenter(namespace enter)。进入一个或多个其他进程的名称空间，然后运行指定的程序。如果没有给出指定的程序(语法中的 PROGRAM)，则运行默认的 &lt;code>${SHELL}&lt;/code>。&lt;/p>
&lt;h2 id="syntax语法">Syntax(语法)&lt;/h2>
&lt;p>&lt;strong>nsenter [OPTIONS] [PROGRAM[ARGUMENTS]]&lt;/strong>&lt;/p>
&lt;p>&lt;strong>OPTIONS:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-a, &amp;ndash;all&lt;/strong> # 进入所有名称空间&lt;/li>
&lt;li>&lt;strong>-t, &amp;ndash;target &lt;!-- raw HTML omitted -->&lt;/strong> # 指定要进入命名空间的目标进程的 PID&lt;/li>
&lt;li>-m, &amp;ndash;mount[=file]：进入 mount 命令空间。如果指定了 file，则进入 file 的命令空间&lt;/li>
&lt;li>-u, &amp;ndash;uts[=file]：进入 uts 命令空间。如果指定了 file，则进入 file 的命令空间&lt;/li>
&lt;li>-i, &amp;ndash;ipc[=file]：进入 ipc 命令空间。如果指定了 file，则进入 file 的命令空间&lt;/li>
&lt;li>-n, &amp;ndash;net[=file]：进入 net 命令空间。如果指定了 file，则进入 file 的命令空间&lt;/li>
&lt;li>-p, &amp;ndash;pid[=file]：进入 pid 命令空间。如果指定了 file，则进入 file 的命令空间&lt;/li>
&lt;li>-U, &amp;ndash;user[=file]：进入 user 命令空间。如果指定了 file，则进入 file 的命令空间&lt;/li>
&lt;li>-G, &amp;ndash;setgid gid：设置运行程序的 gid&lt;/li>
&lt;li>-S, &amp;ndash;setuid uid：设置运行程序的 uid&lt;/li>
&lt;li>-r, &amp;ndash;root[=directory]：设置根目录&lt;/li>
&lt;li>-w, &amp;ndash;wd[=directory]：设置工作目录&lt;/li>
&lt;/ul>
&lt;h2 id="example">EXAMPLE&lt;/h2>
&lt;ul>
&lt;li>从普通用户进入到 root 用户空间
&lt;ul>
&lt;li>&lt;strong>sudo nsenter -t 1 -n&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>获取到容器的 PID
&lt;ul>
&lt;li>&lt;strong>docker inspect &amp;ndash;format &amp;ldquo;{{.State.Pid}}&amp;rdquo; ContainerID&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>进入到 8514 进程的网络名称空间中
&lt;ul>
&lt;li>&lt;strong>nsenter -n -t 8514&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>进入 15928 进程的多个名称空间中
&lt;ul>
&lt;li>&lt;strong>nsenter -p -n -u -i -m -t 15928&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>进入 node-exporter 容器的 mount 名称空间中，并执行 /bin/sh 命令
&lt;ul>
&lt;li>nsenter -m -t $(docker container inspect node-exporter &amp;ndash;format &amp;lsquo;{{.State.Pid}}&amp;rsquo;) /bin/sh&lt;/li>
&lt;li>这条命令可以直接查看容器内的文件系统，效果如下&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># nsenter -m -t $(docker container inspect node-exporter --format &amp;#39;{{.State.Pid}}&amp;#39;) /bin/sh&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># ls&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>bin dev etc home host lib proc root sys tmp usr var
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># which node_exporter&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/bin/node_exporter
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>注意：进入 mount 名称空间时所指定的 /bin/sh 命令必须要在容器内真是有这个程序，才能实现类似于 “进入” 名称空间的效果。否则，若该容器本身不提供任何 shell 程序，则无法实现进入效果。&lt;/li>
&lt;/ul>
&lt;h1 id="lsns--列出名称空间包括-ns-type-nprocs-pid-user-command-字段">lsns # 列出名称空间，包括 NS TYPE NPROCS PID USER COMMAND 字段&lt;/h1>
&lt;h2 id="syntax语法-1">Syntax(语法)&lt;/h2>
&lt;p>&lt;strong>lsns [OPTIONS] [NAMESPACE]&lt;/strong>&lt;/p>
&lt;p>OPTIONS：&lt;/p>
&lt;h2 id="example-1">EXAMPLE&lt;/h2>
&lt;ul>
&lt;li>lsns # 列出所有名称空间信息&lt;/li>
&lt;/ul></description></item></channel></rss>