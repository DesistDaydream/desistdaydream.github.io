<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2.CGroup on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization/2.CGroup/</link><description>Recent content in 2.CGroup on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization/2.CGroup/index.xml" rel="self" type="application/rss+xml"/><item><title>2.CGroup</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization/2.CGroup/2.CGroup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization/2.CGroup/2.CGroup/</guid><description>概述 参考：
Wiki, Cgroups Manual(手册),cgroup(7) Linux Kernel 官方文档,Linux 内核用户和管理员指南-Control Group V1 Linux Kernel 官方文档,Linux 内核用户和管理员指南-Control Group V2 红帽文档： https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/system_design_guide/using-control-groups-through-a-virtual-file-system_setting-limits-for-applications https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/7/html/resource_management_guide/index 思否，Linux Namespace 和 Cgroup https://fuckcloudnative.io/posts/understanding-cgroups-part-1-basics/ Control Groups(控制组，简称 CGroups) 是一个 Linux 内核特性，用于限制、隔离一组进程集合的资源使用，资源包括 CPU、内存、磁盘 IO、网络 等。CGroups 由 Google 的两位工程师开发，自 2008 年 1 月发布的 Linux 2.6.24 版本的内核中提供此能力。到目前为止，CGroups 分 v1 和 v2 两个版本，v1 实现较早，功能比较多，但是由于它里面的功能都是零零散散的实现的，所以规划的不是很好，导致了一些使用和维护上的不便，v2 的出现就是为了解决 v1 中这方面的问题，在最新的 4.5 内核中，cgroup v2 声称已经可以用于生产环境了，但它所支持的功能还很有限，随着 v2 一起引入内核的还有 cgroup namespace。v1 和 v2 可以混合使用，但是这样会更复杂，所以一般没人会这样用。
在 Linux 里，一直以来就有对进程进行分组的概念和需求，比如 session group， progress group 等，后来随着人们对这方面的需求越来越多，比如需要追踪一组进程的内存和 IO 使用情况等，于是出现了 cgroup，用来统一将进程进行分组，并在分组的基础上对进程进行监控和资源控制管理等。</description></item><item><title>CGroup FS</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization/2.CGroup/CGroup-FS/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization/2.CGroup/CGroup-FS/</guid><description>概述 参考：
/sys/fs/cgroup/* CGroupV1 CGroupV1 根目录下的每个目录的名称都是一个子系统的名称，每个子系统都有其自己独立的资源控制配置文件。
~]# ls -l /sys/fs/cgroup/ total 0 dr-xr-xr-x 5 root root 0 Jan 26 21:46 blkio lrwxrwxrwx 1 root root 11 Jan 26 21:46 cpu -&amp;gt; cpu,cpuacct lrwxrwxrwx 1 root root 11 Jan 26 21:46 cpuacct -&amp;gt; cpu,cpuacct dr-xr-xr-x 5 root root 0 Jan 26 21:46 cpu,cpuacct dr-xr-xr-x 3 root root 0 Jan 26 21:46 cpuset dr-xr-xr-x 5 root root 0 Jan 26 21:46 devices dr-xr-xr-x 4 root root 0 Jan 26 21:46 freezer dr-xr-xr-x 3 root root 0 Jan 26 21:46 hugetlb dr-xr-xr-x 5 root root 0 Jan 26 21:46 memory lrwxrwxrwx 1 root root 16 Jan 26 21:46 net_cls -&amp;gt; net_cls,net_prio dr-xr-xr-x 3 root root 0 Jan 26 21:46 net_cls,net_prio lrwxrwxrwx 1 root root 16 Jan 26 21:46 net_prio -&amp;gt; net_cls,net_prio dr-xr-xr-x 3 root root 0 Jan 26 21:46 perf_event dr-xr-xr-x 5 root root 0 Jan 26 21:46 pids dr-xr-xr-x 2 root root 0 Jan 26 21:46 rdma dr-xr-xr-x 5 root root 0 Jan 26 21:46 systemd dr-xr-xr-x 5 root root 0 Jan 26 21:46 unified .</description></item><item><title>Linux Cgroup 系列（二）：玩转 CPU</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization/2.CGroup/Linux-Cgroup-%E7%B3%BB%E5%88%97%E4%BA%8C%E7%8E%A9%E8%BD%AC-CPU/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization/2.CGroup/Linux-Cgroup-%E7%B3%BB%E5%88%97%E4%BA%8C%E7%8E%A9%E8%BD%AC-CPU/</guid><description>上篇文章主要介绍了 cgroup 的一些基本概念，包括其在 CentOS 系统中的默认设置和控制工具，并以 CPU 为例阐述 cgroup 如何对资源进行控制。这篇文章将会通过具体的示例来演示如何通过 cgroup 来限制 CPU 的使用以及不同的 cgroup 设置对性能的影响。
1. 查看当前 cgroup 信息 有两种方法来查看系统的当前 cgroup 信息。第一种方法是通过 systemd-cgls 命令来查看，它会返回系统的整体 cgroup 层级，cgroup 树的最高层由 slice 构成，如下所示：
$ systemd-cgls --no-page ├─1 /usr/lib/systemd/systemd --switched-root --system --deserialize 22 ├─user.slice │ ├─user-1000.slice │ │ └─session-11.scope │ │ ├─9507 sshd: tom [priv] │ │ ├─9509 sshd: tom@pts/3 │ │ └─9510 -bash │ └─user-0.slice │ └─session-1.scope │ ├─ 6239 sshd: root@pts/0 │ ├─ 6241 -zsh │ └─11537 systemd-cgls --no-page └─system.</description></item></channel></rss>