<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦的站点 – 2.CGroup</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization/2.CGroup/</link><description>Recent content in 2.CGroup on 断念梦的站点</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization/2.CGroup/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: 2.CGroup</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization/2.CGroup/2.CGroup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization/2.CGroup/2.CGroup/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Cgroups">Wiki，Cgroups&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://man7.org/linux/man-pages/man7/cgroups.7.html">Manual(手册),cgroup(7)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.kernel.org/doc/html/latest/admin-guide/cgroup-v1/index.html">Linux Kernel 官方文档,Linux 内核用户和管理员指南-Control Group V1&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.kernel.org/doc/html/latest/admin-guide/cgroup-v2.html">Linux Kernel 官方文档,Linux 内核用户和管理员指南-Control Group V2&lt;/a>&lt;/li>
&lt;li>红帽文档：
&lt;ul>
&lt;li>&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/system_design_guide/using-control-groups-through-a-virtual-file-system_setting-limits-for-applications">https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/system_design_guide/using-control-groups-through-a-virtual-file-system_setting-limits-for-applications&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/7/html/resource_management_guide/index">https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/7/html/resource_management_guide/index&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://segmentfault.com/a/1190000009732550">思否，Linux Namespace 和 Cgroup&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://fuckcloudnative.io/posts/understanding-cgroups-part-1-basics/">https://fuckcloudnative.io/posts/understanding-cgroups-part-1-basics/&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Control Groups(控制组，简称 CGroups)&lt;/strong> 是一个 Linux 内核特性，用于限制、隔离一组进程集合的资源使用，资源包括 CPU、内存、磁盘 IO、网络 等。CGroups 由 Google 的两位工程师开发，自 2008 年 1 月发布的 Linux 2.6.24 版本的内核中提供此能力。到目前为止，CGroups 分 v1 和 v2 两个版本，v1 实现较早，功能比较多，但是由于它里面的功能都是零零散散的实现的，所以规划的不是很好，导致了一些使用和维护上的不便，v2 的出现就是为了解决 v1 中这方面的问题，在最新的 4.5 内核中，cgroup v2 声称已经可以用于生产环境了，但它所支持的功能还很有限，随着 v2 一起引入内核的还有 cgroup namespace。v1 和 v2 可以混合使用，但是这样会更复杂，所以一般没人会这样用。&lt;/p>
&lt;p>在 Linux 里，一直以来就有对进程进行分组的概念和需求，比如 session group， progress group 等，后来随着人们对这方面的需求越来越多，比如需要追踪一组进程的内存和 IO 使用情况等，于是出现了 cgroup，用来统一将进程进行分组，并在分组的基础上对进程进行监控和资源控制管理等。&lt;/p>
&lt;p>Cgroup 是 Linux kernel 的一项功能：它是在一个系统中运行的层级制进程组，你可对其进行资源分配（如 CPU 时间、系统内存、网络带宽或者这些资源的组合）。通过使用 cgroup，系统管理员在分配、排序、拒绝、管理和监控系统资源等方面，可以进行精细化控制。硬件资源可以在应用程序和用户间智能分配，从而增加整体效率。&lt;/p>
&lt;p>cgroup 和 namespace 类似，也是将进程进行分组，但它的目的和 namespace 不一样，namespace 是为了隔离进程组之间的资源，而 cgroup 是为了对一组进程进行统一的资源监控和限制。CGroup 还能对进程进行优先级设置、审计、以及将进程挂起和恢复等操作&lt;/p>
&lt;h2 id="术语">术语&lt;a class="td-heading-self-link" href="#%e6%9c%af%e8%af%ad" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>cgroup 在不同的上下文中代表不同的意思，可以指整个 Linux 的 cgroup 技术，也可以指一个具体进程组。&lt;/p>
&lt;p>cgroup 是 Linux 下的一种将进程按组进行管理的机制，在用户层看来，cgroup 技术就是把系统中的所有进程组织成一颗一颗独立的树，每棵树都包含系统的所有进程，树的每个节点是一个进程组，而每颗树又和一个或者多个 subsystem 关联，树的作用是将进程分组，而 subsystem 的作用就是对这些组进行操作。&lt;/p>
&lt;p>cgroup 主要包括下面两部分：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>subsystem(子系统)&lt;/strong> # 一个 subsystem 就是一个内核模块，他被关联到一颗 cgroup 树之后，就会 在树的每个节点（进程组）上做具体的操作。subsystem 经常被称作 resource controller，因为它主要被用来调度或者限制每个进程组的资源，但是这个说法不完全准确，因为有时我们将进程分组只是为了做一些监控，观察一下他们的状态，比如 perf_event subsystem。到目前为止，Linux 支持 12 种 subsystem，比如限制 CPU 的使用时间，限制使用的内存，统计 CPU 的使用情况，冻结和恢复一组进程等，后续会对它们一一进行介绍。&lt;/li>
&lt;li>&lt;strong>hierarchy(层次结构)&lt;/strong> # 一个 hierarchy 可以理解为一棵 cgroup 树，树的每个节点就是一个进程组，每棵树都会与零到多个 subsystem 关联。在一颗树里面，会包含 Linux 系统中的所有进程，但每个进程只能属于一个节点（进程组）。系统中可以有很多颗 cgroup 树，每棵树都和不同的 subsystem 关联，一个进程可以属于多颗树，即一个进程可以属于多个进程组，只是这些进程组和不同的 subsystem 关联。目前 Linux 支持 12 种 subsystem，如果不考虑不与任何 subsystem 关联的情况（systemd 就属于这种情况），Linux 里面最多可以建 12 颗 cgroup 树，每棵树关联一个 subsystem，当然也可以只建一棵树，然后让这棵树关联所有的 subsystem。当一颗 cgroup 树不和任何 subsystem 关联的时候，意味着这棵树只是将进程进行分组，至于要在分组的基础上做些什么，将由应用程序自己决定，systemd 就是一个这样的例子。&lt;/li>
&lt;/ul>
&lt;h2 id="cgroup-子系统类型">CGroup 子系统类型&lt;a class="td-heading-self-link" href="#cgroup-%e5%ad%90%e7%b3%bb%e7%bb%9f%e7%b1%bb%e5%9e%8b" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>可以通过 /proc/cgroups 文件查看当前系统支持哪些 subsystem：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># cat /proc/cgroups&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#subsys_name hierarchy num_cgroups enabled&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cpuset &lt;span style="color:#0000cf;font-weight:bold">6&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">5&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cpu &lt;span style="color:#0000cf;font-weight:bold">8&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">95&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cpuacct &lt;span style="color:#0000cf;font-weight:bold">8&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">95&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>blkio &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">95&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>memory &lt;span style="color:#0000cf;font-weight:bold">12&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">236&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>devices &lt;span style="color:#0000cf;font-weight:bold">11&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">95&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>freezer &lt;span style="color:#0000cf;font-weight:bold">9&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">5&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>net_cls &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">5&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>perf_event &lt;span style="color:#0000cf;font-weight:bold">5&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">5&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>net_prio &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">5&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hugetlb &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">5&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pids &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">103&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rdma &lt;span style="color:#0000cf;font-weight:bold">7&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>整理一下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>subsys_name&lt;/th>
&lt;th>hierarchy&lt;/th>
&lt;th>num_cgroups&lt;/th>
&lt;th>enabled&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>cpuset&lt;/td>
&lt;td>6&lt;/td>
&lt;td>5&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>cpu&lt;/td>
&lt;td>8&lt;/td>
&lt;td>95&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>cpuacct&lt;/td>
&lt;td>8&lt;/td>
&lt;td>95&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>blkio&lt;/td>
&lt;td>4&lt;/td>
&lt;td>95&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>memory&lt;/td>
&lt;td>12&lt;/td>
&lt;td>236&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>devices&lt;/td>
&lt;td>11&lt;/td>
&lt;td>95&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>freezer&lt;/td>
&lt;td>9&lt;/td>
&lt;td>5&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>net_cls&lt;/td>
&lt;td>10&lt;/td>
&lt;td>5&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>perf_event&lt;/td>
&lt;td>5&lt;/td>
&lt;td>5&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>net_prio&lt;/td>
&lt;td>10&lt;/td>
&lt;td>5&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>hugetlb&lt;/td>
&lt;td>2&lt;/td>
&lt;td>5&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>pids&lt;/td>
&lt;td>3&lt;/td>
&lt;td>103&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>rdma&lt;/td>
&lt;td>7&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>从左到右，字段的含义分别是：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>subsys_name&lt;/strong> # subsystem 的名字
&lt;ul>
&lt;li>blkio # 块设备 IO&lt;/li>
&lt;li>cpu # 基于 CFS 对 CPU 时间配额进行限制的子系统，CFS 概念详见：CPU 管理 章节中的 CFS 调度器。该子系统是 cgroup 对进程使用 CPU 资源进行限制的主要手段&lt;/li>
&lt;li>cpuacct # CPU 资源使用报告&lt;/li>
&lt;li>cpuset # 多处理器平台上的 CPU 集合&lt;/li>
&lt;li>devices # 设备访问&lt;/li>
&lt;li>freezer # 挂载器或恢复任务&lt;/li>
&lt;li>hungetlb #&lt;/li>
&lt;li>memory # 内存用量及报告&lt;/li>
&lt;li>net_cls # cgroup 中的任务创建的数据包的类别标识符&lt;/li>
&lt;li>net_prio #&lt;/li>
&lt;li>perf_event # 对 cgroup 中的任务进行统一性能测试&lt;/li>
&lt;li>pids #&lt;/li>
&lt;li>rdma #&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>hierarchy&lt;/strong> # subsystem 所关联到的 cgroup 树的 ID，如果多个 subsystem 关联到同一颗 cgroup 树，那么他们的这个字段将一样，比如这里的 cpu 和 cpuacct 就一样，表示他们绑定到了同一颗树。如果出现下面的情况，这个字段将为 0：
&lt;ul>
&lt;li>当前 subsystem 没有和任何 cgroup 树绑定&lt;/li>
&lt;li>当前 subsystem 已经和 cgroup v2 的树绑定&lt;/li>
&lt;li>当前 subsystem 没有被内核开启&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>num_cgroups&lt;/strong> # subsystem 所关联的 cgroup 树中进程组的个数，也即树上节点的个数&lt;/li>
&lt;li>&lt;strong>enabled&lt;/strong> # 1 表示开启，0 表示没有被开启(可以通过设置内核的启动参数“cgroup_disable”来控制 subsystem 的开启).&lt;/li>
&lt;/ul>
&lt;h1 id="cgroup-关联文件">CGroup 关联文件&lt;a class="td-heading-self-link" href="#cgroup-%e5%85%b3%e8%81%94%e6%96%87%e4%bb%b6" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="sysfscgroup--cgroup-根目录">/sys/fs/cgroup/ # CGroup 根目录&lt;a class="td-heading-self-link" href="#sysfscgroup--cgroup-%e6%a0%b9%e7%9b%ae%e5%bd%95" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>CGroup 的相关操作都是基于内核中的 &lt;strong>CGroup Virtual Filesystem(控制组虚拟文件系统)&lt;/strong>。所以，使用 CGroup 首先需要挂载这个文件系统，通常，现代系统在启动时，都默认会挂载相关的 CGroup 文件系统：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>CGroupV1&lt;/strong> 该目录下的每个目录都是 CGroup 子系统的名称。其中包含该子系统中所关联的进程的资源控制信息。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># mount -t cgroup&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cgroup on /sys/fs/cgroup/systemd &lt;span style="color:#204a87">type&lt;/span> cgroup &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>rw,nosuid,nodev,noexec,relatime,xattr,name&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>systemd&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cgroup on /sys/fs/cgroup/pids &lt;span style="color:#204a87">type&lt;/span> cgroup &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>rw,nosuid,nodev,noexec,relatime,pids&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cgroup on /sys/fs/cgroup/blkio &lt;span style="color:#204a87">type&lt;/span> cgroup &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>rw,nosuid,nodev,noexec,relatime,blkio&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cgroup on /sys/fs/cgroup/cpu,cpuacct &lt;span style="color:#204a87">type&lt;/span> cgroup &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>rw,nosuid,nodev,noexec,relatime,cpu,cpuacct&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cgroup on /sys/fs/cgroup/memory &lt;span style="color:#204a87">type&lt;/span> cgroup &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>rw,nosuid,nodev,noexec,relatime,memory&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...... 略
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>**CGroupV2，**则只会有一个 cgroup2 on /sys/fs/cgroup type cgroup2 (&amp;hellip;&amp;hellip;) 的挂载项&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># mount -t cgroup2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cgroup2 on /sys/fs/cgroup &lt;span style="color:#204a87">type&lt;/span> cgroup2 &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>rw,nosuid,nodev,noexec,relatime&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里面的 &lt;strong>/sys/fs/cgroup/&lt;/strong> 目录，就称为 &lt;strong>CGroup 的根目录。CGroup 文件系统的 V1 与 V2 的根目录下的内容，各不相同，详见 &lt;a href="docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization/2.CGroup/CGroup%20FS.md">CGroup FS&lt;/a> 章节&lt;/strong>&lt;/p>
&lt;h2 id="procpidcgroup--进程号为-pid-的进程所属的-cgroup-信息">/proc/PID/cgroup # 进程号为 PID 的进程所属的 cgroup 信息&lt;a class="td-heading-self-link" href="#procpidcgroup--%e8%bf%9b%e7%a8%8b%e5%8f%b7%e4%b8%ba-pid-%e7%9a%84%e8%bf%9b%e7%a8%8b%e6%89%80%e5%b1%9e%e7%9a%84-cgroup-%e4%bf%a1%e6%81%af" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>在** &lt;strong>/proc/PID/cgroup&lt;/strong> **文件中会指定进程所使用的 CGropu 的相对路径。文件中每行都是进程所属的 CGroup 子系统，每行子系统信息由以 &lt;code>:&lt;/code> 分割的三个字段组成&lt;/p>
&lt;ul>
&lt;li>&lt;strong>hierarchy-ID&lt;/strong> # Hierarchy 唯一标识符。与 /proc/cgroups 文件中的 Hierarchy ID 相同。
&lt;ul>
&lt;li>CGroup v2 版本该字段始终为 0&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>controller-list&lt;/strong> # 绑定到 Hierarchy ID 的控制器列表。也就是 CGroup 的子系统。
&lt;ul>
&lt;li>CGroup v2 版本该字段为空&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>cgroup-path&lt;/strong> # 进程所属 CGroup 子系统的信息的路径。这是一个相对路径。
&lt;ul>
&lt;li>这里面的 &lt;code>/&lt;/code> 就是指 CGroup 的根节点中对应子系统的目录
&lt;ul>
&lt;li>对于 CGroupV1 来说通常是 /sys/fs/cgroup/SUBSYSTEM。所以，一个完整的 cgroup-path 应该是 &lt;code>/sys/fs/cgroup/SUBSYSTEM/system.slice/docker-b8f92f970f0d17377e7ad4c9b75f8316cdb15a6dd7dd81466f415e6fcaed6460.scope/*&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>cgroup 的 v1 和 v2 版本显示的信息不同&lt;/p>
&lt;h3 id="cgroupv1">CGroupV1&lt;a class="td-heading-self-link" href="#cgroupv1" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># cat /proc/1185/cgroup&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>12:memory:/system.slice/docker-b8f92f970f0d17377e7ad4c9b75f8316cdb15a6dd7dd81466f415e6fcaed6460.scope
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>11:devices:/system.slice/docker-b8f92f970f0d17377e7ad4c9b75f8316cdb15a6dd7dd81466f415e6fcaed6460.scope
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>10:net_cls,net_prio:/system.slice/docker-b8f92f970f0d17377e7ad4c9b75f8316cdb15a6dd7dd81466f415e6fcaed6460.scope
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>9:freezer:/system.slice/docker-b8f92f970f0d17377e7ad4c9b75f8316cdb15a6dd7dd81466f415e6fcaed6460.scope
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>8:cpu,cpuacct:/system.slice/docker-b8f92f970f0d17377e7ad4c9b75f8316cdb15a6dd7dd81466f415e6fcaed6460.scope
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>7:rdma:/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>6:cpuset:/system.slice/docker-b8f92f970f0d17377e7ad4c9b75f8316cdb15a6dd7dd81466f415e6fcaed6460.scope
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>5:perf_event:/system.slice/docker-b8f92f970f0d17377e7ad4c9b75f8316cdb15a6dd7dd81466f415e6fcaed6460.scope
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>4:blkio:/system.slice/docker-b8f92f970f0d17377e7ad4c9b75f8316cdb15a6dd7dd81466f415e6fcaed6460.scope
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>3:pids:/system.slice/docker-b8f92f970f0d17377e7ad4c9b75f8316cdb15a6dd7dd81466f415e6fcaed6460.scope
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2:hugetlb:/system.slice/docker-b8f92f970f0d17377e7ad4c9b75f8316cdb15a6dd7dd81466f415e6fcaed6460.scope
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>1:name&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>systemd:/system.slice/docker-b8f92f970f0d17377e7ad4c9b75f8316cdb15a6dd7dd81466f415e6fcaed6460.scope
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0::/system.slice/docker-b8f92f970f0d17377e7ad4c9b75f8316cdb15a6dd7dd81466f415e6fcaed6460.scope
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>比如，1185 进程的 cpu 子系统的 CGroup 信息，就在 &lt;code>/sys/fs/cgroup/cpu/system.slice/docker-b8f92f970f0d17377e7ad4c9b75f8316cdb15a6dd7dd81466f415e6fcaed6460.scope/&lt;/code> 目录中：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># ls /sys/fs/cgroup/cpu/system.slice/docker-b8f92f970f0d17377e7ad4c9b75f8316cdb15a6dd7dd81466f415e6fcaed6460.scope&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cgroup.clone_children cpuacct.usage cpuacct.usage_percpu_sys cpuacct.usage_user cpu.shares cpu.uclamp.min
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cgroup.procs cpuacct.usage_all cpuacct.usage_percpu_user cpu.cfs_period_us cpu.stat notify_on_release
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cpuacct.stat cpuacct.usage_percpu cpuacct.usage_sys cpu.cfs_quota_us cpu.uclamp.max tasks
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="cgropuv2">CGropuV2&lt;a class="td-heading-self-link" href="#cgropuv2" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># cat /proc/1277/cgroup&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0::/system.slice/docker-020cfdfbd4cd43981570f4fa7def9a2b600025b2e60e3150e742a5049562f30f.scope
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>比如，1277 进程的 CGroup 信息，就在 &lt;code>/sys/fs/cgroup/system.slice/docker-020cfdfbd4cd43981570f4fa7def9a2b600025b2e60e3150e742a5049562f30f.scope/&lt;/code> 目录中：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># ls /sys/fs/cgroup/system.slice/docker-020cfdfbd4cd43981570f4fa7def9a2b600025b2e60e3150e742a5049562f30f.scope/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cgroup.controllers cgroup.procs cpu.max cpuset.mems cpu.weight io.weight memory.low memory.stat rdma.max
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cgroup.events cgroup.stat cpu.pressure cpuset.mems.effective cpu.weight.nice memory.current memory.max pids.current
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cgroup.freeze cgroup.subtree_control cpuset.cpus cpu.stat io.max memory.events memory.min pids.events
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cgroup.max.depth cgroup.threads cpuset.cpus.effective cpu.uclamp.max io.pressure memory.events.local memory.oom.group pids.max
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cgroup.max.descendants cgroup.type cpuset.cpus.partition cpu.uclamp.min io.stat memory.high memory.pressure rdma.current
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="其他文件">其他文件&lt;a class="td-heading-self-link" href="#%e5%85%b6%e4%bb%96%e6%96%87%e4%bb%b6" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>/proc/cgroups&lt;/strong> # 当前系统支持的所有 CGroup 子系统&lt;/p>
&lt;h1 id="systemd-的-slice-单元">systemd 的 slice 单元&lt;a class="td-heading-self-link" href="#systemd-%e7%9a%84-slice-%e5%8d%95%e5%85%83" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>在 Systemd 作为 1 号进程的系统中，进程的 CGroup 都可以配置为由 Systemd 管理，其中 Slice 类型的单元就是用来控制 CGroup 的。默认会创建 3 个顶级 Slice&lt;/p>
&lt;ul>
&lt;li>&lt;strong>system.slice&lt;/strong> # 所有 Service Unit 的默认。&lt;/li>
&lt;li>&lt;strong>user.lice&lt;/strong> # 所有用户进程的默认。&lt;/li>
&lt;li>&lt;strong>machine.slice&lt;/strong> # 所有虚拟机和容器的默认。&lt;/li>
&lt;/ul>
&lt;p>&lt;code>systemd-cgls&lt;/code> 命令可以查看 CGroup 的层次结构&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># systemd-cgls&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Control group /:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-.slice
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├─931 bpfilter_umh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├─user.slice
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └─user-1000.slice
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├─user@1000.service …
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ │ └─init.scope
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ │ ├─81271 /lib/systemd/systemd --user
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ │ └─81276 &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>sd-pam&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├─session-431.scope
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ │ ├─81902 sshd: lichenhao &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>priv&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ │ ├─81998 sshd: lichenhao@pts/1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ │ ├─82001 -bash
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ │ ├─82100 su - root
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ │ ├─82101 -bash
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ │ ├─82697 systemd-cgls
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ │ └─82698 pager
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └─session-432.scope
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├─82013 sshd: lichenhao &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>priv&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├─82097 sshd: lichenhao@notty
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └─82098 /usr/lib/openssh/sftp-server
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├─init.scope
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └─1 /sbin/init nospectre_v2 nopti noibrs noibpb
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└─system.slice
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├─irqbalance.service
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ └─524 /usr/sbin/irqbalance --foreground
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├─uniagent.service
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ └─537 /usr/local/uniagent/bin/uniagent
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├─containerd.service …
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ ├─ &lt;span style="color:#0000cf;font-weight:bold">714&lt;/span> /usr/bin/containerd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ ├─ &lt;span style="color:#0000cf;font-weight:bold">1140&lt;/span> /usr/bin/containerd-shim-runc-v2 -namespace moby -id b8f92f970f0d17377e7ad4c9b75f8316cdb15a6dd7dd81466f415e6fcaed6460 -address /run/containerd/containerd.sock
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ ├─31778 /usr/bin/containerd-shim-runc-v2 -namespace moby -id 4c5ec4bc9717bb9fd2a2ea7b507ac3c0e16da95fa87974152f0fe3b3a653cef9 -address /run/containerd/containerd.sock
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>......
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>systemd-cgtop&lt;/code> 命令可以查看 CGroup 的动态信息。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>Control Group Tasks %CPU Memory Input/s Output/s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/ &lt;span style="color:#0000cf;font-weight:bold">221&lt;/span> 1.0 3.1G - -
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>user.slice &lt;span style="color:#0000cf;font-weight:bold">11&lt;/span> 0.7 1.5G - -
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>system.slice &lt;span style="color:#0000cf;font-weight:bold">139&lt;/span> 0.4 1.2G - -
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>system.slice/containerd.service &lt;span style="color:#0000cf;font-weight:bold">46&lt;/span> 0.2 276.0M - -
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>system.slice/cloudResetPwdUpdateAgent.service &lt;span style="color:#0000cf;font-weight:bold">18&lt;/span> 0.2 102.4M - -
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>system.slice/docker-4c5ec4…d2a2ea7b507ac3c0e16da95fa87974152f0fe3b3a653cef9.scope &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 0.1 1.3M - -
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>system.slice/multipathd.service &lt;span style="color:#0000cf;font-weight:bold">7&lt;/span> 0.0 13.8M - -
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>init.scope &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> - 7.6M - -
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>system.slice/ModemManager.service &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> - 6.8M - -
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>system.slice/NetworkManager.service &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> - 13.6M - -
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>system.slice/accounts-daemon.service &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> - 6.5M - -
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="cgroupv2">CGroupV2&lt;a class="td-heading-self-link" href="#cgroupv2" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="检查-cgroup-v2-是否已启用">检查 cgroup v2 是否已启用&lt;a class="td-heading-self-link" href="#%e6%a3%80%e6%9f%a5-cgroup-v2-%e6%98%af%e5%90%a6%e5%b7%b2%e5%90%af%e7%94%a8" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>如果 &lt;code>/sys/fs/cgroup/cgroup.controllers&lt;/code> 存在于您的系统上，则您使用的是 v2，否则您使用的是 v1。
已知以下发行版默认使用 cgroup v2：&lt;/p>
&lt;ul>
&lt;li>Fedora（31 起）&lt;/li>
&lt;li>Arch Linux（自 2021 年 4 月起）&lt;/li>
&lt;li>openSUSE Tumbleweed（自 2021 年起）&lt;/li>
&lt;li>Debian GNU/Linux（从 11 开始）&lt;/li>
&lt;li>Ubuntu（自 21.10 起）&lt;/li>
&lt;/ul>
&lt;h2 id="启用-cgroup-v2">启用 cgroup v2&lt;a class="td-heading-self-link" href="#%e5%90%af%e7%94%a8-cgroup-v2" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>为容器启用 cgroup v2 需要内核 4.15 或更高版本。建议使用内核 5.2 或更高版本。
然而，将 cgroup v2 控制器委派给非 root 用户需要最新版本的 systemd。建议使用 systemd 244 或更高版本。
要使用 cgroup v2 引导主机，请将以下字符串添加到 GRUB_CMDLINE_LINUXin 行/etc/default/grub，然后运行 sudo update-grub.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>systemd.unified_cgroup_hierarchy&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="启用-cpucpuset-和-io-委派">启用 CPU、CPUSET 和 I/O 委派&lt;a class="td-heading-self-link" href="#%e5%90%af%e7%94%a8-cpucpuset-%e5%92%8c-io-%e5%a7%94%e6%b4%be" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>默认情况下，非 root 用户只能获取 memory 控制器和 pids 要委托的控制器。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ cat /sys/fs/cgroup/user.slice/user-&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>id -u&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>.slice/user@&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>id -u&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>.service/cgroup.controllers
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>memory pids
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>要允许委派其他控制器，例如 cpu、cpuset 和 io，请运行以下命令：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ sudo mkdir -p /etc/systemd/system/user@.service.d
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ cat &lt;span style="color:#4e9a06">&amp;lt;&amp;lt;EOF | sudo tee /etc/systemd/system/user@.service.d/delegate.conf
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">[Service]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">Delegate=cpu cpuset io memory pids
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ sudo systemctl daemon-reload
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>建议使用委派 cpuset 以及 cpu. 委派 cpuset 需要 systemd 244 或更高版本。
更改 systemd 配置后，您需要重新登录或重新启动主机。建议重启主机。&lt;/p></description></item><item><title>Docs: CGroup FS</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization/2.CGroup/CGroup-FS/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization/2.CGroup/CGroup-FS/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;/blockquote>
&lt;h1 id="sysfscgroup">/sys/fs/cgroup/*&lt;a class="td-heading-self-link" href="#sysfscgroup" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h3 id="cgroupv1">CGroupV1&lt;a class="td-heading-self-link" href="#cgroupv1" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>CGroupV1 根目录下的每个目录的名称都是一个子系统的名称，每个子系统都有其自己独立的资源控制配置文件。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># ls -l /sys/fs/cgroup/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>total &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dr-xr-xr-x &lt;span style="color:#0000cf;font-weight:bold">5&lt;/span> root root &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> Jan &lt;span style="color:#0000cf;font-weight:bold">26&lt;/span> 21:46 blkio
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lrwxrwxrwx &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> root root &lt;span style="color:#0000cf;font-weight:bold">11&lt;/span> Jan &lt;span style="color:#0000cf;font-weight:bold">26&lt;/span> 21:46 cpu -&amp;gt; cpu,cpuacct
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lrwxrwxrwx &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> root root &lt;span style="color:#0000cf;font-weight:bold">11&lt;/span> Jan &lt;span style="color:#0000cf;font-weight:bold">26&lt;/span> 21:46 cpuacct -&amp;gt; cpu,cpuacct
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dr-xr-xr-x &lt;span style="color:#0000cf;font-weight:bold">5&lt;/span> root root &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> Jan &lt;span style="color:#0000cf;font-weight:bold">26&lt;/span> 21:46 cpu,cpuacct
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dr-xr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> root root &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> Jan &lt;span style="color:#0000cf;font-weight:bold">26&lt;/span> 21:46 cpuset
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dr-xr-xr-x &lt;span style="color:#0000cf;font-weight:bold">5&lt;/span> root root &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> Jan &lt;span style="color:#0000cf;font-weight:bold">26&lt;/span> 21:46 devices
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dr-xr-xr-x &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> root root &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> Jan &lt;span style="color:#0000cf;font-weight:bold">26&lt;/span> 21:46 freezer
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dr-xr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> root root &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> Jan &lt;span style="color:#0000cf;font-weight:bold">26&lt;/span> 21:46 hugetlb
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dr-xr-xr-x &lt;span style="color:#0000cf;font-weight:bold">5&lt;/span> root root &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> Jan &lt;span style="color:#0000cf;font-weight:bold">26&lt;/span> 21:46 memory
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lrwxrwxrwx &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> root root &lt;span style="color:#0000cf;font-weight:bold">16&lt;/span> Jan &lt;span style="color:#0000cf;font-weight:bold">26&lt;/span> 21:46 net_cls -&amp;gt; net_cls,net_prio
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dr-xr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> root root &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> Jan &lt;span style="color:#0000cf;font-weight:bold">26&lt;/span> 21:46 net_cls,net_prio
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lrwxrwxrwx &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> root root &lt;span style="color:#0000cf;font-weight:bold">16&lt;/span> Jan &lt;span style="color:#0000cf;font-weight:bold">26&lt;/span> 21:46 net_prio -&amp;gt; net_cls,net_prio
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dr-xr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> root root &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> Jan &lt;span style="color:#0000cf;font-weight:bold">26&lt;/span> 21:46 perf_event
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dr-xr-xr-x &lt;span style="color:#0000cf;font-weight:bold">5&lt;/span> root root &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> Jan &lt;span style="color:#0000cf;font-weight:bold">26&lt;/span> 21:46 pids
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dr-xr-xr-x &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> root root &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> Jan &lt;span style="color:#0000cf;font-weight:bold">26&lt;/span> 21:46 rdma
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dr-xr-xr-x &lt;span style="color:#0000cf;font-weight:bold">5&lt;/span> root root &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> Jan &lt;span style="color:#0000cf;font-weight:bold">26&lt;/span> 21:46 systemd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dr-xr-xr-x &lt;span style="color:#0000cf;font-weight:bold">5&lt;/span> root root &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> Jan &lt;span style="color:#0000cf;font-weight:bold">26&lt;/span> 21:46 unified
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="cpu--cpu-子系统">./cpu # CPU 子系统&lt;a class="td-heading-self-link" href="#cpu--cpu-%e5%ad%90%e7%b3%bb%e7%bb%9f" aria-label="Heading self-link">&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>./cpu.cfs_quota_us 与 ./cpu.cfs_period_us # 用来限制进程每运行 cfs_period_us 一段时间，只能被分配到的总量为 cfs_quota_us 的 CPU 时间
&lt;ul>
&lt;li>cfs_quota_us 默认值为-1，不做任何限制，如果修改为 20000(20ms)则表示 CPU 只能使用到 20%的&lt;/li>
&lt;li>cfs_period_us 默认值为 100000(100ms)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>./cpu.shares #&lt;/li>
&lt;li>./cpu.stat #
&lt;ul>
&lt;li>nr_periods #&lt;/li>
&lt;li>nr_throttled #&lt;/li>
&lt;li>throttled_time #&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="cgroupv2">CGroupV2&lt;a class="td-heading-self-link" href="#cgroupv2" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># ls -l /sys/fs/cgroup/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>total &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-r--r--r-- &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> root root &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> Feb &lt;span style="color:#0000cf;font-weight:bold">18&lt;/span> 10:52 cgroup.controllers
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-rw-r--r-- &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> root root &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> Feb &lt;span style="color:#0000cf;font-weight:bold">18&lt;/span> 10:54 cgroup.max.depth
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-rw-r--r-- &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> root root &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> Feb &lt;span style="color:#0000cf;font-weight:bold">18&lt;/span> 10:54 cgroup.max.descendants
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-rw-r--r-- &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> root root &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> Feb &lt;span style="color:#0000cf;font-weight:bold">18&lt;/span> 10:52 cgroup.procs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-r--r--r-- &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> root root &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> Feb &lt;span style="color:#0000cf;font-weight:bold">18&lt;/span> 10:54 cgroup.stat
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-rw-r--r-- &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> root root &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> Feb &lt;span style="color:#0000cf;font-weight:bold">18&lt;/span> 10:52 cgroup.subtree_control
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-rw-r--r-- &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> root root &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> Feb &lt;span style="color:#0000cf;font-weight:bold">18&lt;/span> 10:54 cgroup.threads
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-rw-r--r-- &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> root root &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> Feb &lt;span style="color:#0000cf;font-weight:bold">18&lt;/span> 10:54 cpu.pressure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-r--r--r-- &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> root root &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> Feb &lt;span style="color:#0000cf;font-weight:bold">18&lt;/span> 10:52 cpuset.cpus.effective
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-r--r--r-- &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> root root &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> Feb &lt;span style="color:#0000cf;font-weight:bold">18&lt;/span> 10:52 cpuset.mems.effective
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> root root &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> Feb &lt;span style="color:#0000cf;font-weight:bold">18&lt;/span> 10:52 init.scope
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-rw-r--r-- &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> root root &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> Feb &lt;span style="color:#0000cf;font-weight:bold">18&lt;/span> 10:54 io.cost.model
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-rw-r--r-- &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> root root &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> Feb &lt;span style="color:#0000cf;font-weight:bold">18&lt;/span> 10:54 io.cost.qos
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-rw-r--r-- &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> root root &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> Feb &lt;span style="color:#0000cf;font-weight:bold">18&lt;/span> 10:54 io.pressure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-rw-r--r-- &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> root root &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> Feb &lt;span style="color:#0000cf;font-weight:bold">18&lt;/span> 10:54 memory.pressure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">44&lt;/span> root root &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> Feb &lt;span style="color:#0000cf;font-weight:bold">18&lt;/span> 10:53 system.slice
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> root root &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> Feb &lt;span style="color:#0000cf;font-weight:bold">18&lt;/span> 10:53 user.slice
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Linux Cgroup 系列（二）：玩转 CPU</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization/2.CGroup/Linux-Cgroup-%E7%B3%BB%E5%88%97%E4%BA%8C%E7%8E%A9%E8%BD%AC-CPU/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization/2.CGroup/Linux-Cgroup-%E7%B3%BB%E5%88%97%E4%BA%8C%E7%8E%A9%E8%BD%AC-CPU/</guid><description>
&lt;p>上篇文章主要介绍了 cgroup 的一些基本概念，包括其在 &lt;code>CentOS&lt;/code> 系统中的默认设置和控制工具，并以 CPU 为例阐述 cgroup 如何对资源进行控制。这篇文章将会通过具体的示例来演示如何通过 cgroup 来限制 &lt;code>CPU&lt;/code> 的使用以及不同的 cgroup 设置对性能的影响。&lt;/p>
&lt;h2 id="1-查看当前-cgroup-信息">&lt;strong>1. 查看当前 cgroup 信息&lt;/strong>&lt;a class="td-heading-self-link" href="#1-%e6%9f%a5%e7%9c%8b%e5%bd%93%e5%89%8d-cgroup-%e4%bf%a1%e6%81%af" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;hr>
&lt;p>有两种方法来查看系统的当前 cgroup 信息。第一种方法是通过 &lt;code>systemd-cgls&lt;/code> 命令来查看，它会返回系统的整体 cgroup 层级，cgroup 树的最高层由 &lt;code>slice&lt;/code> 构成，如下所示：&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-ba" data-lang="ba">$ systemd-cgls --no-page
├─1 /usr/lib/systemd/systemd --switched-root --system --deserialize 22
├─user.slice
│ ├─user-1000.slice
│ │ └─session-11.scope
│ │ ├─9507 sshd: tom [priv]
│ │ ├─9509 sshd: tom@pts/3
│ │ └─9510 -bash
│ └─user-0.slice
│ └─session-1.scope
│ ├─ 6239 sshd: root@pts/0
│ ├─ 6241 -zsh
│ └─11537 systemd-cgls --no-page
└─system.slice
├─rsyslog.service
│ └─5831 /usr/sbin/rsyslogd -n
├─sshd.service
│ └─5828 /usr/sbin/sshd -D
├─tuned.service
│ └─5827 /usr/bin/python2 -Es /usr/sbin/tuned -l -P
├─crond.service
│ └─5546 /usr/sbin/crond -n
&lt;/code>&lt;/pre>&lt;p>可以看到系统 cgroup 层级的最高层由 &lt;code>user.slice&lt;/code> 和 &lt;code>system.slice&lt;/code> 组成。因为系统中没有运行虚拟机和容器，所以没有 &lt;code>machine.slice&lt;/code>，所以当 CPU 繁忙时，&lt;code>user.slice&lt;/code> 和 &lt;code>system.slice&lt;/code> 会各获得 &lt;code>50%&lt;/code> 的 CPU 使用时间。user.slice 下面有两个子 slice：&lt;code>user-1000.slice&lt;/code> 和 &lt;code>user-0.slice&lt;/code>，每个子 slice 都用 User ID (&lt;code>UID&lt;/code>) 来命名，因此我们很容易识别出哪个 slice 属于哪个用户。例如：从上面的输出信息中可以看出 &lt;code>user-1000.slice&lt;/code> 属于用户 tom，&lt;code>user-0.slice&lt;/code> 属于用户 root。&lt;code>systemd-cgls&lt;/code> 命令提供的只是 cgroup 层级的静态信息快照，要想查看 cgroup 层级的动态信息，可以通过 &lt;code>systemd-cgtop&lt;/code> 命令查看：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ systemd-cgtop
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Path Tasks %CPU Memory Input/s Output/s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/ &lt;span style="color:#0000cf;font-weight:bold">161&lt;/span> 1.2 161.0M - -
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/system.slice - 0.1 - - -
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/system.slice/vmtoolsd.service &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 0.1 - - -
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/system.slice/tuned.service &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 0.0 - - -
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/system.slice/rsyslog.service &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 0.0 - - -
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/system.slice/auditd.service &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> - - - -
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/system.slice/chronyd.service &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> - - - -
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/system.slice/crond.service &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> - - - -
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/system.slice/dbus.service &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> - - - -
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/system.slice/gssproxy.service &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> - - - -
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/system.slice/lvm2-lvmetad.service &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> - - - -
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/system.slice/network.service &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> - - - -
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/system.slice/polkit.service &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> - - - -
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/system.slice/rpcbind.service &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> - - - -
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/system.slice/sshd.service &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> - - - -
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/system.slice/system-getty.slice/getty@tty1.service &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> - - - -
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/system.slice/systemd-journald.service &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> - - - -
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/system.slice/systemd-logind.service &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> - - - -
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/system.slice/systemd-udevd.service &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> - - - -
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/system.slice/vgauthd.service &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> - - - -
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/user.slice &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> - - - -
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/user.slice/user-0.slice/session-1.scope &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> - - - -
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/user.slice/user-1000.slice &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> - - - -
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/user.slice/user-1000.slice/session-11.scope &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> - - - -
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/user.slice/user-1001.slice/session-8.scope &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> - - - -
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>systemd-cgtop 提供的统计数据和控制选项与 &lt;code>top&lt;/code> 命令类似，但该命令只显示那些开启了资源统计功能的 service 和 slice。比如：如果你想开启 &lt;code>sshd.service&lt;/code> 的资源统计功能，可以进行如下操作：&lt;/p>
&lt;pre>&lt;code>$ systemctl set-property sshd.service CPUAccounting=true MemoryAccounting=true
&lt;/code>&lt;/pre>
&lt;p>该命令会在 &lt;code>/etc/systemd/system/sshd.service.d/&lt;/code> 目录下创建相应的配置文件：&lt;/p>
&lt;pre>&lt;code>$ ll /etc/systemd/system/sshd.service.d/
总用量 8
4 -rw-r--r-- 1 root root 28 5月 31 02:24 50-CPUAccounting.conf
4 -rw-r--r-- 1 root root 31 5月 31 02:24 50-MemoryAccounting.conf
$ cat /etc/systemd/system/sshd.service.d/50-CPUAccounting.conf
[Service]
CPUAccounting=yes
$ cat /etc/systemd/system/sshd.service.d/50-MemoryAccounting.conf
[Service]
MemoryAccounting=yes
&lt;/code>&lt;/pre>
&lt;p>配置完成之后，再重启 &lt;code>sshd&lt;/code> 服务：&lt;/p>
&lt;pre>&lt;code>$ systemctl daemon-reload
$ systemctl restart sshd
&lt;/code>&lt;/pre>
&lt;p>这时再重新运行 systemd-cgtop 命令，就能看到 sshd 的资源使用统计了：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/eh4oaq/1616122788822-11ad9f57-7e88-4ee1-af1e-af4f5a8fe0e0.png" alt="">&lt;/p>
&lt;h2 id="2-分配-cpu-相对使用时间">&lt;strong>2. 分配 CPU 相对使用时间&lt;/strong>&lt;a class="td-heading-self-link" href="#2-%e5%88%86%e9%85%8d-cpu-%e7%9b%b8%e5%af%b9%e4%bd%bf%e7%94%a8%e6%97%b6%e9%97%b4" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;hr>
&lt;p>通过上篇文章的学习我们知道了 CPU &lt;code>shares&lt;/code> 可以用来设置 CPU 的相对使用时间，接下来我们就通过实践来验证一下。&lt;/p>
&lt;blockquote>
&lt;p>下面所做的实验都是在单核 CPU 的系统上进行的，多核与单核的情况完全不同，文末会单独讨论。&lt;/p>
&lt;/blockquote>
&lt;p>测试对象是 1 个 service 和两个普通用户，其中用户 &lt;code>tom&lt;/code> 的 UID 是 1000，可以通过以下命令查看：&lt;/p>
&lt;pre>&lt;code>$ cat /etc/passwd|grep tom
tom:x:1000:1000::/home/tom:/bin/bash
&lt;/code>&lt;/pre>
&lt;p>创建一个 &lt;code>foo.service&lt;/code>：&lt;/p>
&lt;pre>&lt;code>$ cat /etc/systemd/system/foo.service
[Unit]
Description=The foo service that does nothing useful
After=remote-fs.target nss-lookup.target
[Service]
ExecStart=/usr/bin/sha1sum /dev/zero
ExecStop=/bin/kill -WINCH ${MAINPID}
[Install]
WantedBy=multi-user.target
&lt;/code>&lt;/pre>
&lt;p>&lt;code>/dev/zero&lt;/code> 在 linux 系统中是一个特殊的设备文件，当你读它的时候，它会提供无限的空字符，因此 foo.service 会不断地消耗 CPU 资源。现在我们将 foo.service 的 CPU shares 改为 &lt;code>2048&lt;/code>：&lt;/p>
&lt;pre>&lt;code>$ mkdir /etc/systemd/system/foo.service.d
$ cat &amp;lt;&amp;lt; EOF &amp;gt; /etc/systemd/system/foo.service.d/50-CPUShares.conf
[Service]
CPUShares=2048
EOF
&lt;/code>&lt;/pre>
&lt;p>由于系统默认的 CPU shares 值为 &lt;code>1024&lt;/code>，所以设置成 2048 后，在 CPU 繁忙的情况下，&lt;code>foo.service&lt;/code> 会尽可能获取 &lt;code>system.slice&lt;/code> 的所有 CPU 使用时间。现在通过 &lt;code>systemctl start foo.service&lt;/code> 启动 foo 服务，并使用 &lt;code>top&lt;/code> 命令查看 CPU 使用情况：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/eh4oaq/1616122789915-32785528-b825-4ff2-85f9-875db0a1eaae.png" alt="">&lt;/p>
&lt;p>目前没有其他进程在消耗 CPU，所以 foo.service 可以使用几乎 100% 的 CPU。&lt;/p>
&lt;p>现在我们让用户 &lt;code>tom&lt;/code> 也参与进来，先将 &lt;code>user-1000.slice&lt;/code> 的 CPU shares 设置为 &lt;code>256&lt;/code>：&lt;/p>
&lt;pre>&lt;code>$ systemctl set-property user-1000.slice CPUShares=256
&lt;/code>&lt;/pre>
&lt;p>使用用户 &lt;code>tom&lt;/code> 登录该系统，然后执行命令 &lt;code>sha1sum /dev/zero&lt;/code>，再次查看 CPU 使用情况：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/eh4oaq/1616122788830-f36c9b9f-747e-49d2-8cb5-42dce4e69e81.png" alt="">&lt;/p>
&lt;p>现在是不是感到有点迷惑了？foo.service 的 CPU shares 是 &lt;code>2048&lt;/code>，而用户 tom 的 CPU shares 只有 &lt;code>256&lt;/code>，难道用户 &lt;code>tom&lt;/code> 不是应该只能使用 10% 的 CPU 吗？回忆一下我在上一节提到的，当 CPU 繁忙时，&lt;code>user.slice&lt;/code> 和 &lt;code>system.slice&lt;/code> 会各获得 &lt;code>50%&lt;/code> 的 CPU 使用时间。而这里恰好就是这种场景，同时 &lt;code>user.slice&lt;/code> 下面只有 sha1sum 进程比较繁忙，所以会获得 50% 的 CPU 使用时间。最后让用户 &lt;code>jack&lt;/code> 也参与进来，他的 CPU shares 是默认值 1024。使用用户 &lt;code>jack&lt;/code> 登录该系统，然后执行命令 &lt;code>sha1sum /dev/zero&lt;/code>，再次查看 CPU 使用情况：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/eh4oaq/1616122788820-4de33b45-2e29-4dab-87cc-b378a4f037bb.png" alt="">&lt;/p>
&lt;p>上面我们已经提到，这种场景下 &lt;code>user.slice&lt;/code> 和 &lt;code>system.slice&lt;/code> 会各获得 &lt;code>50%&lt;/code> 的 CPU 使用时间。用户 tom 的 CPU shares 是 &lt;code>256&lt;/code>，而用户 jack 的 CPU shares 是 &lt;code>1024&lt;/code>，因此用户 jack 获得的 CPU 使用时间是用户 tom 的 &lt;code>4&lt;/code> 倍。&lt;/p>
&lt;h2 id="3-分配-cpu-绝对使用时间">&lt;strong>3. 分配 CPU 绝对使用时间&lt;/strong>&lt;a class="td-heading-self-link" href="#3-%e5%88%86%e9%85%8d-cpu-%e7%bb%9d%e5%af%b9%e4%bd%bf%e7%94%a8%e6%97%b6%e9%97%b4" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;hr>
&lt;p>上篇文章已经提到，如果想严格控制 CPU 资源，设置 CPU 资源的使用上限，即不管 CPU 是否繁忙，对 CPU 资源的使用都不能超过这个上限，可以通过 &lt;code>CPUQuota&lt;/code> 参数来设置。下面我们将用户 tom 的 CPUQuota 设置为 &lt;code>5%&lt;/code>：&lt;/p>
&lt;pre>&lt;code>$ systemctl set-property user-1000.slice CPUQuota=5%
&lt;/code>&lt;/pre>
&lt;p>这时你会看到用户 tom 的 sha1sum 进程只能获得 5% 左右的 CPU 使用时间。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/eh4oaq/1616122788812-e5ef85ea-f7f6-48b0-8c44-87a0a1fc0782.png" alt="">&lt;/p>
&lt;p>如果此时停止 &lt;code>foo.service&lt;/code>，关闭用户 jack 的 sha1sum 进程，你会看到用户 tom 的 sha1sum 进程仍然只能获得 &lt;code>5%&lt;/code>左右的 CPU 使用时间。&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/eh4oaq/1616122788841-c53eb572-e7b8-4ff0-ac62-b9cf69c3d1c9.png" alt="">&lt;/p>
&lt;p>如果某个非核心服务很消耗 CPU 资源，你可以通过这种方法来严格限制它对 CPU 资源的使用，防止对系统中其他重要的服务产生影响。&lt;/p>
&lt;h2 id="4-动态设置-cgroup">&lt;strong>4. 动态设置 cgroup&lt;/strong>&lt;a class="td-heading-self-link" href="#4-%e5%8a%a8%e6%80%81%e8%ae%be%e7%bd%ae-cgroup" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;hr>
&lt;p>cgroup 相关的所有操作都是基于内核中的 cgroup virtual filesystem，使用 cgroup 很简单，挂载这个文件系统就可以了。系统默认情况下都是挂载到 &lt;code>/sys/fs/cgroup&lt;/code> 目录下，当 service 启动时，会将自己的 cgroup 挂载到这个目录下的子目录。以 &lt;code>foo.service&lt;/code> 为例：先进入 &lt;code>system.slice&lt;/code> 的 CPU 子系统：&lt;/p>
&lt;pre>&lt;code>$ cd /sys/fs/cgroup/cpu,cpuacct/system.slice
&lt;/code>&lt;/pre>
&lt;p>查看 foo.service 的 cgroup 目录：&lt;/p>
&lt;pre>&lt;code>$ ls foo.*
zsh: no matches found: foo.*
&lt;/code>&lt;/pre>
&lt;p>因为 foo.service 没有启动，所以没有挂载 cgroup 目录，现在启动 foo.service，再次查看它的 cgroup 目录：&lt;/p>
&lt;pre>&lt;code>$ ls foo.serice
cgroup.clone_children cgroup.procs cpuacct.usage cpu.cfs_period_us cpu.rt_period_us cpu.shares notify_on_release
cgroup.event_control cpuacct.stat cpuacct.usage_percpu cpu.cfs_quota_us cpu.rt_runtime_us cpu.stat tasks
&lt;/code>&lt;/pre>
&lt;p>也可以查看它的 PID 和 CPU shares：&lt;/p>
&lt;pre>&lt;code>$ cat foo.service/tasks
20225
$ cat foo.service/cpu.shares
2048
&lt;/code>&lt;/pre>
&lt;h2 id="5-如果是多核-cpu-呢">&lt;strong>5. 如果是多核 CPU 呢？&lt;/strong>&lt;a class="td-heading-self-link" href="#5-%e5%a6%82%e6%9e%9c%e6%98%af%e5%a4%9a%e6%a0%b8-cpu-%e5%91%a2" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;hr>
&lt;p>上面的所有实验都是在单核 CPU 上进行的，下面我们简单讨论一下多核的场景，以 2 个 CPU 为例。&lt;/p>
&lt;p>首先来说一下 CPU shares，shares 只能针对单核 CPU 进行设置，也就是说，无论你的 shares 值有多大，该 cgroup 最多只能获得 100% 的 CPU 使用时间（即 1 核 CPU）。还是用本文第 2 节的例子，将 foo.service 的 CPU shares 设置为 2048，启动 foo.service，这时你会看到 foo.service 仅仅获得了 100% 的 CPU 使用时间，并没有完全使用两个 CPU 核：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/eh4oaq/1616122788828-fb879234-a995-4b2f-acaa-658edd6a40dd.png" alt="">&lt;/p>
&lt;p>再使用用户 &lt;code>tom&lt;/code> 登录系统，执行命令 &lt;code>sha1sum /dev/zero&lt;/code>，你会发现用户 tom 的 sha1sum 进程和 foo.service 各使用 1 个 CPU 核：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/eh4oaq/1616122788823-67ecc2d3-96dd-42dd-a2ce-316553ecb94f.png" alt="">&lt;/p>
&lt;p>再来说说 CPUQuota，这个上篇文章结尾已经提过了，如要让一个 cgroup 完全使用两个 CPU 核，可以通过 CPUQuota 参数来设置。例如：&lt;/p>
&lt;pre>&lt;code>$ systemctl set-property foo.service CPUQuota=200%
&lt;/code>&lt;/pre>
&lt;p>至于进程最后能不能完全使用两个 CPU 核，就要看它自身的设计支持不支持了。&lt;/p></description></item></channel></rss>