<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docker CLI on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/Docker/Docker-CLI/</link><description>Recent content in Docker CLI on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/Docker/Docker-CLI/index.xml" rel="self" type="application/rss+xml"/><item><title>Docker CLI</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/Docker/Docker-CLI/Docker-CLI/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/Docker/Docker-CLI/Docker-CLI/</guid><description>概述 参考：
官方文档，参考 - CLI 参考 - docker Syntax(语法) docker [OPTIONS] COMMAND [ARG&amp;hellip;]
OPTIONS &amp;ndash;config=~/.docker # Location of client config files # 客户端配置文件的位置 -D, &amp;ndash;debug=false # Enable debug mode # 启用 Debug 调试模式 -H, &amp;ndash;host=[] # Daemon socket(s) to connectto # 守护进程的套接字（Socket）连接 -l, &amp;ndash;log-level=info # Set the logging level # 设置日志级别 &amp;ndash;tls=false # Use TLS; implied by&amp;ndash;tlsverify # &amp;ndash;tlscacert=~/.docker/ca.pem # Trust certs signed only by this CA # 信任证书签名 CA &amp;ndash;tlscert=~/.</description></item><item><title>Docker CLI Plugin</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/Docker/Docker-CLI/Docker-CLI-Plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/Docker/Docker-CLI/Docker-CLI-Plugin/</guid><description>概述 参考：
https://github.com/docker/cli/issues/1534 文档在 issue 里？ 2024-06-26 依然没找到官方文档 关联文件与配置 Unix-like OS : $HOME/.docker/cli-plugins /usr/local/lib/docker/cli-plugins &amp;amp; /usr/local/libexec/docker/cli-plugins /usr/lib/docker/cli-plugins &amp;amp; /usr/libexec/docker/cli-plugins On Windows: %USERPROFILE%\.docker\cli-plugins C:\ProgramData\Docker\cli-plugins</description></item><item><title>image</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/Docker/Docker-CLI/image/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/Docker/Docker-CLI/image/</guid><description>概述 参考：
image 命令用于管理容器镜像。
build - 使用 Dockerfile 构建一个镜像 history - Show the history of an image import - Import the contents from a tarball to create a filesystem image inspect - Display detailed information on one or more images load - Load an image from a tar archive or STDIN ls - 列出所有镜像 prune - 移除未使用的镜像 Syntax(语法) docker image prune [OPTIONS]
OPTIONS
-a, &amp;ndash;all # Remove all unused images, not just dangling ones -f, &amp;ndash;force # Do not prompt for confirmation EXAMPLE docker image prune -a # 清理所有没有使用的镜像</description></item><item><title>network</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/Docker/Docker-CLI/network/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/Docker/Docker-CLI/network/</guid><description>概述 参考：
network 命令用于管理容器的网络
connect - Connect a container to a network create - Create a network docker network create [OPTIONS] NETWORK
EXAMPLE
docker network create -d bridge &amp;ndash;subnet &amp;ldquo;172.26.0.0/16&amp;rdquo; &amp;ndash;gateway &amp;ldquo;172.26.0.1&amp;rdquo; mybr0 # 创建一个桥接的网络，网段是 172.26.0.0/16,网关是 172.26.0.1 disconnect - Disconnect a container from a network inspect - Display detailed information on one or more networks ls - List networks prune - 移除所有未使用的网络 rm - 移除一个或多个网络</description></item><item><title>run</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/Docker/Docker-CLI/run/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/Docker/Docker-CLI/run/</guid><description>概述 参考：
官方文档，参考-命令行参考-docker-Docker run 参考 官方文档，参考-命令行参考-docker-docker run run 命令可以启动容器
Syntax(语法) docker run [OPTIONS] ImageName [COMMAND] [ARG&amp;hellip;]
OPTIONS -d, &amp;ndash;detach # 让容器运行在后台并打印出容器的 ID &amp;ndash;entrypoint(STRING) # 覆盖容器镜像的的默认 ENTRYPOINT。即 Dockerfile 指令 中的 ENTRYPOINT。 -e, &amp;ndash;env(LIST) # 设定容器内的环境变量。LIST 格式为 VAR=VALUE，若要指定多个变量，则使用多次 &amp;ndash;env 选项。 &amp;ndash;env-file list Read in a file of environment variables &amp;ndash;expose(LIST) # 等效于 Dockerfile 中的 EXPOSE 指令，仅暴露容器端口，不在宿主机暴露。 -h, &amp;ndash;hostname(STRING) # 指定容器内的 hostname &amp;ndash;init Run an init inside the container that forwards signals and reaps processes -i, &amp;ndash;interactive # 即使没有 attach 到容器，也保持 STDIN(标准输入)开启。通常与 -t 一起使用 &amp;ndash;name(STRING) # 为容器分配一个名称。默认为随机字符串 &amp;ndash;network(STRING) # 连接一个容器到一个容器网络(default &amp;ldquo;default&amp;rdquo;)，可以是 docker network ls 列出的网络，也可以是其余 container 的网络。STRING 包括下面几种 none # 容器使用自己的网络（类似&amp;ndash;net=bridge），但是不进行配置 bridge # 通过 veth 接口将容器连接到默认的 Docker 桥(默认为 docker0 的网桥).</description></item><item><title>ps、stats 容器状态查看</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/Docker/Docker-CLI/psstats-%E5%AE%B9%E5%99%A8%E7%8A%B6%E6%80%81%E6%9F%A5%E7%9C%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/Docker/Docker-CLI/psstats-%E5%AE%B9%E5%99%A8%E7%8A%B6%E6%80%81%E6%9F%A5%E7%9C%8B/</guid><description>docker ps Syntax(语法) docker ps [OPTIONS]
以列表的形式显示容器，包括以下几个字段 CONTAINER ID(容器 ID 号)、IMAGE(启动该容器所用的 image)、COMMAND(该容器运行的命令)、CREATED(该容器被创建了多久)、STATUS(容器当前状态)、PORTS(容器所用端口)、NAMES(容器名，随机生成)，效果如图所示：
还可以通过 -s 选项，来输出容器占用的磁盘空间大小。
OPTIONS
-a, &amp;ndash;all # 显示所有容器(默认只显示正在 running 状态的) -f, &amp;ndash;filter FILTER # 根据提供的条件过滤输出内容。 可用的过滤条件详见：https://docs.docker.com/engine/reference/commandline/ps/#filtering 比较常见的是根据 volume 进行过滤，可以根据指定的 volume 来过滤，从而发现哪些容器正在使用哪些 volume。 &amp;ndash;format STRING # 使用 Go 模板漂亮得输出容器信息。 可用的 Go 模板占位符详见：https://docs.docker.com/engine/reference/commandline/ps/#formatting 可以使用 table 指令，让输出内容以表格的方式呈现，效果如下(如果没有 table 指令，那么输出内容将会扎堆)。 ~]# docker ps --format &amp;#34;table {{.Names}}\t{{.Size}}&amp;#34; NAMES SIZE pushgateway 46B (virtual 19.4MB) node_exporter 16B (virtual 22.9MB) -n, &amp;ndash;last INT # Show n last created containers (includes all states) (default -1) -l, &amp;ndash;latest # 显示最后创建的容器(所有状态) &amp;ndash;no-trunc # 不要截断输出 i.</description></item></channel></rss>