<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦的站点 – Docker CLI</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/Docker/Docker-CLI/</link><description>Recent content in Docker CLI on 断念梦的站点</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/Docker/Docker-CLI/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Docker CLI</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/Docker/Docker-CLI/Docker-CLI/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/Docker/Docker-CLI/Docker-CLI/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.docker.com/engine/reference/commandline/docker/">官方文档，参考 - CLI 参考 - docker&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="syntax语法">Syntax(语法)&lt;a class="td-heading-self-link" href="#syntax%e8%af%ad%e6%b3%95" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;strong>docker [OPTIONS] COMMAND [ARG&amp;hellip;]&lt;/strong>&lt;/p>
&lt;h2 id="options">OPTIONS&lt;a class="td-heading-self-link" href="#options" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>&amp;ndash;config=~/.docker # Location of client config files # 客户端配置文件的位置&lt;/li>
&lt;li>-D, &amp;ndash;debug=false # Enable debug mode # 启用 Debug 调试模式&lt;/li>
&lt;li>-H, &amp;ndash;host=[] # Daemon socket(s) to connectto # 守护进程的套接字（Socket）连接&lt;/li>
&lt;li>-l, &amp;ndash;log-level=info # Set the logging level # 设置日志级别&lt;/li>
&lt;li>&amp;ndash;tls=false # Use TLS; implied by&amp;ndash;tlsverify #&lt;/li>
&lt;li>&amp;ndash;tlscacert=~/.docker/ca.pem # Trust certs signed only by this CA # 信任证书签名 CA&lt;/li>
&lt;li>&amp;ndash;tlscert=~/.docker/cert.pem # Path to TLS certificate file # TLS 证书文件路径&lt;/li>
&lt;li>&amp;ndash;tlskey=~/.docker/key.pem # Path to TLS key file # TLS 密钥文件路径&lt;/li>
&lt;li>&amp;ndash;tlsverify=false # Use TLS and verify theremote # 使用 TLS 验证远程&lt;/li>
&lt;/ul>
&lt;h1 id="management-commands">Management Commands&lt;a class="td-heading-self-link" href="#management-commands" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>management command 在使用的时候，当后面还需要跟其子命令的时候，是可省的。直接使用子命令就表示对其执行，但是有的管理命令不行，比如 create，对于 container 可省，对于 network 不可省&lt;/p>
&lt;h2 id="container---容器管理">container - 容器管理&lt;a class="td-heading-self-link" href="#container---%e5%ae%b9%e5%99%a8%e7%ae%a1%e7%90%86" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>attach cp diff export kill ls port rename rm start stop unpause wait&lt;/p>
&lt;p>commit create exec inspect logs pause prune restart run stats top update&lt;/p>
&lt;p>对容器的操作说明：docker 的 container 相关操作命令有一些关于如何进入容器操作的命令&lt;/p>
&lt;p>其更本思想为：&lt;/p>
&lt;ul>
&lt;li>连接标准输入，输入到 host 上的内容同样输入到 container 中&lt;/li>
&lt;li>连接标准输出，输出到 container 中的同样输出到 host 上&lt;/li>
&lt;li>可以分配一个终端(shell)给 container，以便操作更便捷&lt;/li>
&lt;/ul>
&lt;p>注意：有的 Container 在启动的时候，会自带命令去执行一些操作，该操作会自动输出一些内容，当连接到该 Container 的标准输入和输出上之后，可能没法对其进行输入操作，因为该 Container 正在其前台运行某程序(就好像平时用 linux 的 tailf 命令似的)(有的程序有输出内容，有的程序没有输出内容)，前台运行程序的时候，是没法输入的。&lt;/p>
&lt;p>&lt;strong>docker container [OPTIONS]&lt;/strong>&lt;/p>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>docker container prune -a # 清理所有已经停止的 container&lt;/li>
&lt;/ul>
&lt;h2 id="image---docker-镜像的管理命令">image - Docker 镜像的管理命令&lt;a class="td-heading-self-link" href="#image---docker-%e9%95%9c%e5%83%8f%e7%9a%84%e7%ae%a1%e7%90%86%e5%91%bd%e4%bb%a4" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>详见 &lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization%20implementation/Docker/Docker%20CLI/image.md">image&lt;/a>&lt;/p>
&lt;h2 id="network---docker-网络的管理命令">network - Docker 网络的管理命令&lt;a class="td-heading-self-link" href="#network---docker-%e7%bd%91%e7%bb%9c%e7%9a%84%e7%ae%a1%e7%90%86%e5%91%bd%e4%bb%a4" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>详见 &lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization%20implementation/Docker/Docker%20CLI/network.md">network&lt;/a>&lt;/p>
&lt;h2 id="plugin-manage-plugins">plugin Manage plugins&lt;a class="td-heading-self-link" href="#plugin-manage-plugins" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="secret-manage-docker-secrets">secret Manage Docker secrets&lt;a class="td-heading-self-link" href="#secret-manage-docker-secrets" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="service-manage-services">service Manage services&lt;a class="td-heading-self-link" href="#service-manage-services" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="stack-manage-docker-stacks">stack Manage Docker stacks&lt;a class="td-heading-self-link" href="#stack-manage-docker-stacks" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="system---docker-系统管理">system - docker 系统管理&lt;a class="td-heading-self-link" href="#system---docker-%e7%b3%bb%e7%bb%9f%e7%ae%a1%e7%90%86" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>docker system COMMAND&lt;/strong>&lt;/p>
&lt;p>COMMAND:&lt;/p>
&lt;ul>
&lt;li>df # 显示 docker 系统的磁盘使用情况，效果如下：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># docker system df&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TYPE TOTAL ACTIVE SIZE RECLAIMABLE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Images &lt;span style="color:#0000cf;font-weight:bold">11&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span> 1.043GB 96.12MB &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>9%&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Containers &lt;span style="color:#0000cf;font-weight:bold">34&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">18&lt;/span> 4.588kB 2.294kB &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>50%&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Local Volumes &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> 152.8MB 0B &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>0%&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Build Cache &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 0B 0B
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>events # Get real time events from the server&lt;/li>
&lt;li>info # 等同于 docker info 命令&lt;/li>
&lt;li>prune # 删除未使用的数据。删除内容如下&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># docker system prune&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>WARNING! This will remove:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - all stopped containers
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - all networks not used by at least one container
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - all dangling images
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - all dangling build cache
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="volume---管理-docker-的卷">volume - 管理 docker 的卷&lt;a class="td-heading-self-link" href="#volume---%e7%ae%a1%e7%90%86-docker-%e7%9a%84%e5%8d%b7" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>详见 《[Docker 存储](/docs/10.云原生/2.2.实现容器的工具/Docker/Docker%20 存储.md 存储.md)》&lt;/p>
&lt;h1 id="commands">COMMANDS&lt;a class="td-heading-self-link" href="#commands" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="attach---当前-shell-下-attach连接到指定运行中的镜像">attach - 当前 shell 下 attach(连接)到指定运行中的镜像&lt;a class="td-heading-self-link" href="#attach---%e5%bd%93%e5%89%8d-shell-%e4%b8%8b-attach%e8%bf%9e%e6%8e%a5%e5%88%b0%e6%8c%87%e5%ae%9a%e8%bf%90%e8%a1%8c%e4%b8%ad%e7%9a%84%e9%95%9c%e5%83%8f" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Attach local standard input, output, and error streams to a running container # 把本地终端上的标准输入、输出和错误数据流连接到一个运行中的容器(即从一个运行中的容器剥离了其终端，再重新连接到其终端)&lt;/p>
&lt;h2 id="build---通过-dockerfile-定制镜像">build - 通过 Dockerfile 定制镜像&lt;a class="td-heading-self-link" href="#build---%e9%80%9a%e8%bf%87-dockerfile-%e5%ae%9a%e5%88%b6%e9%95%9c%e5%83%8f" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>docker build [OPTIONS] PATH # 使用 dockerfile 文件自动创建镜像&lt;/p>
&lt;p>注：PATH 是 build context 创建环境的位置，从创建环境中搜索 Dockerfile 文件来使用。PATH 也可以是一个 URL，通过网上下载镜像。&lt;/p>
&lt;p>OPTIONS：&lt;/p>
&lt;ul>
&lt;li>-t &amp;lt;NAME&amp;gt; # 自己定义一个创建完成后的镜像名 NAME&lt;/li>
&lt;li>-f &amp;lt;NAME&amp;gt; # 指定使用创建环境中哪个 NAME 文件作为 Dockerfile,默认使用文件名为 Dockerfile 的文件&lt;/li>
&lt;li>&amp;ndash;no-cache # 创建镜像时不使用缓存&lt;/li>
&lt;/ul>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>docker build ./ # 从当前目录下查找名为 Dockerfile 的文件进行 Image 的创建&lt;/li>
&lt;li>docker build -t ubuntu-vi -f test /dockerfile/ # 使用 dockerfile 目录，并使用该目录中的 test 文件作为 dockerfile 文件，创建一个名为 ubuntu-vi 的 Image&lt;/li>
&lt;/ul>
&lt;h2 id="commit---从容器的变化中创建一个新的-image提交当前容器为新的镜像">commit - 从容器的变化中创建一个新的 image。提交当前容器为新的镜像&lt;a class="td-heading-self-link" href="#commit---%e4%bb%8e%e5%ae%b9%e5%99%a8%e7%9a%84%e5%8f%98%e5%8c%96%e4%b8%ad%e5%88%9b%e5%bb%ba%e4%b8%80%e4%b8%aa%e6%96%b0%e7%9a%84-image%e6%8f%90%e4%ba%a4%e5%bd%93%e5%89%8d%e5%ae%b9%e5%99%a8%e4%b8%ba%e6%96%b0%e7%9a%84%e9%95%9c%e5%83%8f" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]&lt;/p>
&lt;p>使用 docker commit ContainerName NewName 命令创建新镜像&lt;/p>
&lt;p>(ContainerName 为正在运行的容器名 NewName 为需要创建的镜像名，自己定)&lt;/p>
&lt;p>每一次 commit 就相当于把当前的可写入层变成 image 的一层&lt;/p>
&lt;h2 id="cp---从容器中拷贝指定文件或者目录到宿主机中">cp - 从容器中拷贝指定文件或者目录到宿主机中&lt;a class="td-heading-self-link" href="#cp---%e4%bb%8e%e5%ae%b9%e5%99%a8%e4%b8%ad%e6%8b%b7%e8%b4%9d%e6%8c%87%e5%ae%9a%e6%96%87%e4%bb%b6%e6%88%96%e8%80%85%e7%9b%ae%e5%bd%95%e5%88%b0%e5%ae%bf%e4%b8%bb%e6%9c%ba%e4%b8%ad" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="create---创建一个新的容器同-run-但不启动容器">create - 创建一个新的容器，同 run 但不启动容器&lt;a class="td-heading-self-link" href="#create---%e5%88%9b%e5%bb%ba%e4%b8%80%e4%b8%aa%e6%96%b0%e7%9a%84%e5%ae%b9%e5%99%a8%e5%90%8c-run-%e4%bd%86%e4%b8%8d%e5%90%af%e5%8a%a8%e5%ae%b9%e5%99%a8" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="diff---inspect-changes-on-a-containers-filesystem-查看-docker-容器变化">diff - Inspect changes on a container&amp;rsquo;s filesystem 查看 docker 容器变化&lt;a class="td-heading-self-link" href="#diff---inspect-changes-on-a-containers-filesystem-%e6%9f%a5%e7%9c%8b-docker-%e5%ae%b9%e5%99%a8%e5%8f%98%e5%8c%96" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="events---get-real-time-events-from-the-server-从-docker-服务获取容器实时事件">events - Get real time events from the server 从 docker 服务获取容器实时事件&lt;a class="td-heading-self-link" href="#events---get-real-time-events-from-the-server-%e4%bb%8e-docker-%e6%9c%8d%e5%8a%a1%e8%8e%b7%e5%8f%96%e5%ae%b9%e5%99%a8%e5%ae%9e%e6%97%b6%e4%ba%8b%e4%bb%b6" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="exec---在运行中的容器上执行命令">exec - 在运行中的容器上执行命令&lt;a class="td-heading-self-link" href="#exec---%e5%9c%a8%e8%bf%90%e8%a1%8c%e4%b8%ad%e7%9a%84%e5%ae%b9%e5%99%a8%e4%b8%8a%e6%89%a7%e8%a1%8c%e5%91%bd%e4%bb%a4" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="export---导出容器的文件系统为一个-tar-归档文件对应-import">export - 导出容器的文件系统为一个 tar 归档文件(对应 import)&lt;a class="td-heading-self-link" href="#export---%e5%af%bc%e5%87%ba%e5%ae%b9%e5%99%a8%e7%9a%84%e6%96%87%e4%bb%b6%e7%b3%bb%e7%bb%9f%e4%b8%ba%e4%b8%80%e4%b8%aa-tar-%e5%bd%92%e6%a1%a3%e6%96%87%e4%bb%b6%e5%af%b9%e5%ba%94-import" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="history---展示一个镜像形成历史">history - 展示一个镜像形成历史&lt;a class="td-heading-self-link" href="#history---%e5%b1%95%e7%a4%ba%e4%b8%80%e4%b8%aa%e9%95%9c%e5%83%8f%e5%bd%a2%e6%88%90%e5%8e%86%e5%8f%b2" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>docker history [OPTIONS] IMAGE&lt;/p>
&lt;p>OPTIONS&lt;/p>
&lt;ul>
&lt;li>&amp;ndash;no-trunc # 不要截断输出 i.e.每列显示的内容都是完整内容，不会被截断&lt;/li>
&lt;/ul>
&lt;p>EXAMPLE&lt;/p>
&lt;h2 id="images---列出系统当前镜像">images - 列出系统当前镜像&lt;a class="td-heading-self-link" href="#images---%e5%88%97%e5%87%ba%e7%b3%bb%e7%bb%9f%e5%bd%93%e5%89%8d%e9%95%9c%e5%83%8f" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>OPTIONS&lt;/p>
&lt;ul>
&lt;li>&amp;ndash;all , -a # Show all images (default hides intermediate images)&lt;/li>
&lt;li>&amp;ndash;digests # Show digests&lt;/li>
&lt;li>&amp;ndash;filter , -f # Filter output based on conditions provided&lt;/li>
&lt;li>&amp;ndash;format # Pretty-print images using a Go template
&lt;ul>
&lt;li>可用的 Go 模板占位符详见：https://docs.docker.com/engine/reference/commandline/images/#format-the-output&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&amp;ndash;no-trunc # Don’t truncate output&lt;/li>
&lt;li>&amp;ndash;quiet , -q # Only show numeric IDs&lt;/li>
&lt;/ul>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>docker images # 查看本地 images，效果如图&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/urb4r9/1616121613241-36e0f6eb-bee7-4db6-a9ed-d02ca5cd679d.png" alt="">&lt;/p>
&lt;h2 id="import---import-the-contents-from-a-tarball-to-create-a-filesystem-image-从-tar-包中的内容创建一个新的文件系统映像对应-export">import - Import the contents from a tarball to create a filesystem image 从 tar 包中的内容创建一个新的文件系统映像(对应 export)&lt;a class="td-heading-self-link" href="#import---import-the-contents-from-a-tarball-to-create-a-filesystem-image-%e4%bb%8e-tar-%e5%8c%85%e4%b8%ad%e7%9a%84%e5%86%85%e5%ae%b9%e5%88%9b%e5%bb%ba%e4%b8%80%e4%b8%aa%e6%96%b0%e7%9a%84%e6%96%87%e4%bb%b6%e7%b3%bb%e7%bb%9f%e6%98%a0%e5%83%8f%e5%af%b9%e5%ba%94-export" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="info---与-docker-system-info-命令效果相同">info - 与 docker system info 命令效果相同&lt;a class="td-heading-self-link" href="#info---%e4%b8%8e-docker-system-info-%e5%91%bd%e4%bb%a4%e6%95%88%e6%9e%9c%e7%9b%b8%e5%90%8c" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="inspect---返回有关容器或镜像的底层信息">inspect - 返回有关容器或镜像的底层信息&lt;a class="td-heading-self-link" href="#inspect---%e8%bf%94%e5%9b%9e%e6%9c%89%e5%85%b3%e5%ae%b9%e5%99%a8%e6%88%96%e9%95%9c%e5%83%8f%e7%9a%84%e5%ba%95%e5%b1%82%e4%bf%a1%e6%81%af" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>显示 docker 所能管理的所有 object 的详细信息，object 包括 image，container，network 等等&lt;/p>
&lt;p>&lt;strong>docker [OBJECT] inspect [OPTIONS]&lt;/strong>&lt;/p>
&lt;p>OPTIONS&lt;/p>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>获取 snmp_exporter 容器 merged 目录的绝对路径
&lt;ul>
&lt;li>&lt;strong>docker inspect snmp_exporter | jq .[0].GraphDriver.Data.MergedDir | tr -d &amp;ldquo;&amp;rdquo;&amp;quot;&lt;/strong>&lt;/li>
&lt;li>&lt;strong>docker inspect snmp_exporter &amp;ndash;format=&amp;rsquo;{{.GraphDriver.Data.MergedDir}}&amp;rsquo;&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>获取容器的 PID
&lt;ul>
&lt;li>&lt;code>docker inspect nginx --format='{{.State.Pid}}'&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="kill---kill-一个运行中的容器">kill - kill 一个运行中的容器&lt;a class="td-heading-self-link" href="#kill---kill-%e4%b8%80%e4%b8%aa%e8%bf%90%e8%a1%8c%e4%b8%ad%e7%9a%84%e5%ae%b9%e5%99%a8" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="load---从-tar-包-或标准输入中加载一个镜像对应-save">load - 从 tar 包 或标准输入中加载一个镜像(对应 save)&lt;a class="td-heading-self-link" href="#load---%e4%bb%8e-tar-%e5%8c%85-%e6%88%96%e6%a0%87%e5%87%86%e8%be%93%e5%85%a5%e4%b8%ad%e5%8a%a0%e8%bd%bd%e4%b8%80%e4%b8%aa%e9%95%9c%e5%83%8f%e5%af%b9%e5%ba%94-save" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>docker load [OPTIONS]FILE&lt;/strong>&lt;/p>
&lt;p>OPTIONS&lt;/p>
&lt;ul>
&lt;li>-i # 从 tar 存档文件读取，而不是 STDIN&lt;/li>
&lt;/ul>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>docker load -i kubernetes.tar&lt;/li>
&lt;/ul>
&lt;h2 id="login---注册或者登录到一个-docker-registry">login - 注册或者登录到一个 Docker Registry&lt;a class="td-heading-self-link" href="#login---%e6%b3%a8%e5%86%8c%e6%88%96%e8%80%85%e7%99%bb%e5%bd%95%e5%88%b0%e4%b8%80%e4%b8%aa-docker-registry" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="logout---从当前-docker-registry-登出">logout - 从当前 Docker Registry 登出&lt;a class="td-heading-self-link" href="#logout---%e4%bb%8e%e5%bd%93%e5%89%8d-docker-registry-%e7%99%bb%e5%87%ba" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="logs---获取容器得日志">logs - 获取容器得日志&lt;a class="td-heading-self-link" href="#logs---%e8%8e%b7%e5%8f%96%e5%ae%b9%e5%99%a8%e5%be%97%e6%97%a5%e5%bf%97" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>docker logs [OPTIONS] CONTAINER&lt;/strong>&lt;/p>
&lt;p>OPTIONS&lt;/p>
&lt;ul>
&lt;li>&amp;ndash;details # Show extra details provided to logs&lt;/li>
&lt;li>&lt;strong>-f, &amp;ndash;follow&lt;/strong># 跟踪日志的输出&lt;/li>
&lt;li>&amp;ndash;since string Show logs since timestamp (e.g. 2013-01-02T13:23:37Z) or relative (e.g. 42m for 42 minutes)&lt;/li>
&lt;li>&lt;strong>-n, &amp;ndash;tail STRING&lt;/strong># 从日志末尾开始显示日志的指定行数。&lt;code>默认值：all&lt;/code>&lt;/li>
&lt;li>&lt;strong>-t, &amp;ndash;timestamps&lt;/strong> # 在每行日志行首显示时间戳&lt;/li>
&lt;li>&amp;ndash;until string # Show logs before a timestamp (e.g. 2013-01-02T13:23:37Z) or relative (e.g. 42m for 42 minutes)&lt;/li>
&lt;/ul>
&lt;h2 id="pause---暂停一个-container-中的所有进程">pause - 暂停一个 Container 中的所有进程&lt;a class="td-heading-self-link" href="#pause---%e6%9a%82%e5%81%9c%e4%b8%80%e4%b8%aa-container-%e4%b8%ad%e7%9a%84%e6%89%80%e6%9c%89%e8%bf%9b%e7%a8%8b" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="port---查看映射端口对应的容器内部源端口">port - 查看映射端口对应的容器内部源端口&lt;a class="td-heading-self-link" href="#port---%e6%9f%a5%e7%9c%8b%e6%98%a0%e5%b0%84%e7%ab%af%e5%8f%a3%e5%af%b9%e5%ba%94%e7%9a%84%e5%ae%b9%e5%99%a8%e5%86%85%e9%83%a8%e6%ba%90%e7%ab%af%e5%8f%a3" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>docker port CONTAINER [PRIVATE_PORT[/PROTO]]&lt;/p>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>docker port nginx1 # 查看名为 nginx1 这个 Container 的端口映射情况&lt;/li>
&lt;/ul>
&lt;h2 id="ps---列出容器">ps - 列出容器&lt;a class="td-heading-self-link" href="#ps---%e5%88%97%e5%87%ba%e5%ae%b9%e5%99%a8" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>详见：docker ps 命令，可以查看很多容器信息&lt;/p>
&lt;h2 id="pull---从-registry-拉取指定镜像或者镜像仓库">pull - 从 Registry 拉取指定镜像或者镜像仓库&lt;a class="td-heading-self-link" href="#pull---%e4%bb%8e-registry-%e6%8b%89%e5%8f%96%e6%8c%87%e5%ae%9a%e9%95%9c%e5%83%8f%e6%88%96%e8%80%85%e9%95%9c%e5%83%8f%e4%bb%93%e5%ba%93" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>docker pull [REGISTRY][:Port]/[NAMESPACE/]&amp;lt;NAME&amp;gt;:[TAG]&lt;/strong>&lt;/p>
&lt;p>如果不加 registry，则默认从 hub.docker.com 拉取 image；如果不设置 namespace，则默认从指定的 registry 中的顶层仓库拉取镜像，如果使用了 namespace，则从该用户仓库拉取镜像；如果不指定 TAG，则默认拉取 lastest 版的 image&lt;/p>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>docker pull quay.io/coreos/flannel&lt;/li>
&lt;/ul>
&lt;h2 id="push---推送指定镜像或者库镜像至-docker-源服务器">push - 推送指定镜像或者库镜像至 docker 源服务器&lt;a class="td-heading-self-link" href="#push---%e6%8e%a8%e9%80%81%e6%8c%87%e5%ae%9a%e9%95%9c%e5%83%8f%e6%88%96%e8%80%85%e5%ba%93%e9%95%9c%e5%83%8f%e8%87%b3-docker-%e6%ba%90%e6%9c%8d%e5%8a%a1%e5%99%a8" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="rename---重命名容器">rename - 重命名容器&lt;a class="td-heading-self-link" href="#rename---%e9%87%8d%e5%91%bd%e5%90%8d%e5%ae%b9%e5%99%a8" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="restart---重启运行的容器">restart - 重启运行的容器&lt;a class="td-heading-self-link" href="#restart---%e9%87%8d%e5%90%af%e8%bf%90%e8%a1%8c%e7%9a%84%e5%ae%b9%e5%99%a8" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="rm---移除一个或者多个容器">rm - 移除一个或者多个容器&lt;a class="td-heading-self-link" href="#rm---%e7%a7%bb%e9%99%a4%e4%b8%80%e4%b8%aa%e6%88%96%e8%80%85%e5%a4%9a%e4%b8%aa%e5%ae%b9%e5%99%a8" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>docker rm &lt;code>docker ps -a | grep &amp;quot;Exited&amp;quot; | awk '{print $NF}'&lt;/code> # 移除所以已经停止的容器&lt;/li>
&lt;/ul>
&lt;h2 id="rmi---移除一个或多个镜像">rmi - 移除一个或多个镜像&lt;a class="td-heading-self-link" href="#rmi---%e7%a7%bb%e9%99%a4%e4%b8%80%e4%b8%aa%e6%88%96%e5%a4%9a%e4%b8%aa%e9%95%9c%e5%83%8f" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Notes: 无容器使用该镜像才可以删除，否则需要删除相关容器才可以继续或者-f 强制删除&lt;/p>
&lt;h2 id="run---创建一个新的容器并运行一个命令">run - 创建一个新的容器并运行一个命令&lt;a class="td-heading-self-link" href="#run---%e5%88%9b%e5%bb%ba%e4%b8%80%e4%b8%aa%e6%96%b0%e7%9a%84%e5%ae%b9%e5%99%a8%e5%b9%b6%e8%bf%90%e8%a1%8c%e4%b8%80%e4%b8%aa%e5%91%bd%e4%bb%a4" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>详见：&lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization%20implementation/Docker/Docker%20CLI/run.md">docker run 运行容器&lt;/a>&lt;/p>
&lt;h2 id="save---保存一个或多个镜像为一个-tar-包对应-load">save - 保存一个或多个镜像为一个 tar 包(对应 load)&lt;a class="td-heading-self-link" href="#save---%e4%bf%9d%e5%ad%98%e4%b8%80%e4%b8%aa%e6%88%96%e5%a4%9a%e4%b8%aa%e9%95%9c%e5%83%8f%e4%b8%ba%e4%b8%80%e4%b8%aa-tar-%e5%8c%85%e5%af%b9%e5%ba%94-load" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>docker save [OPTIONS] Image1 Image2 &amp;hellip; ImageN /PATH/FILE&lt;/p>
&lt;p>OPTIONS&lt;/p>
&lt;ul>
&lt;li>-o # save 的时候写入文件，而不是 STDOUT&lt;/li>
&lt;/ul>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>docker save k8s.gcr.io/kube-proxy:v1.12.1 -o kubernetes.tar # 保存 k8s.gcr.io/kube-proxy:v1.12.1 这个 image 到 kubernetes.tar 这个文件中&lt;/li>
&lt;li>docker save -o XXXX.tar $(docker images | awk &amp;lsquo;{print $1,$2}&amp;rsquo; OFS=&amp;quot;:&amp;quot; | awk &amp;lsquo;NR!=1{print}&amp;rsquo;) # 保存全部镜像到 XXX.tar 文件中&lt;/li>
&lt;/ul>
&lt;h2 id="search---在-dockerhub-中搜索镜像">search - 在 dockerhub 中搜索镜像&lt;a class="td-heading-self-link" href="#search---%e5%9c%a8-dockerhub-%e4%b8%ad%e6%90%9c%e7%b4%a2%e9%95%9c%e5%83%8f" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>docker search [OPTIONS] TERM&lt;/p>
&lt;p>EXAMPLE&lt;/p>
&lt;p>&lt;code>docker search centos&lt;/code> # 搜索所有 centos 的 docker 镜像&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/urb4r9/1616121613281-5ce787a3-8986-43c9-926a-680de555c36e.png" alt="">&lt;/p>
&lt;h2 id="start---启动容器">start - 启动容器&lt;a class="td-heading-self-link" href="#start---%e5%90%af%e5%8a%a8%e5%ae%b9%e5%99%a8" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="stats---显示实时的容器资源使用情况统计流">stats - 显示实时的容器资源使用情况统计流&lt;a class="td-heading-self-link" href="#stats---%e6%98%be%e7%a4%ba%e5%ae%9e%e6%97%b6%e7%9a%84%e5%ae%b9%e5%99%a8%e8%b5%84%e6%ba%90%e4%bd%bf%e7%94%a8%e6%83%85%e5%86%b5%e7%bb%9f%e8%ae%a1%e6%b5%81" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>命令用法详见：容器状态查看命令&lt;/p>
&lt;h2 id="stop---停止容器">stop - 停止容器&lt;a class="td-heading-self-link" href="#stop---%e5%81%9c%e6%ad%a2%e5%ae%b9%e5%99%a8" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="tag---在一个-repostiory-中标记一个-image">tag - 在一个 repostiory 中标记一个 image&lt;a class="td-heading-self-link" href="#tag---%e5%9c%a8%e4%b8%80%e4%b8%aa-repostiory-%e4%b8%ad%e6%a0%87%e8%ae%b0%e4%b8%80%e4%b8%aa-image" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]&lt;/strong>&lt;/p>
&lt;h2 id="top---查看容器中运行的进程信息">top - 查看容器中运行的进程信息&lt;a class="td-heading-self-link" href="#top---%e6%9f%a5%e7%9c%8b%e5%ae%b9%e5%99%a8%e4%b8%ad%e8%bf%90%e8%a1%8c%e7%9a%84%e8%bf%9b%e7%a8%8b%e4%bf%a1%e6%81%af" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>EXAMPLE&lt;/p>
&lt;p>&lt;code>docker top prometheus&lt;/code> # 查看 prometheus 这个 container 运行的程序，该信息的格式为 ps 命令所输出的内容&lt;/p>
&lt;h2 id="unpause---取消暂停容器">unpause - 取消暂停容器&lt;a class="td-heading-self-link" href="#unpause---%e5%8f%96%e6%b6%88%e6%9a%82%e5%81%9c%e5%ae%b9%e5%99%a8" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="wait---截取容器停止时的退出状态值">wait - 截取容器停止时的退出状态值&lt;a class="td-heading-self-link" href="#wait---%e6%88%aa%e5%8f%96%e5%ae%b9%e5%99%a8%e5%81%9c%e6%ad%a2%e6%97%b6%e7%9a%84%e9%80%80%e5%87%ba%e7%8a%b6%e6%80%81%e5%80%bc" aria-label="Heading self-link">&lt;/a>&lt;/h2></description></item><item><title>Docs: Docker CLI Plugin</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/Docker/Docker-CLI/Docker-CLI-Plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/Docker/Docker-CLI/Docker-CLI-Plugin/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/docker/cli/issues/1534">https://github.com/docker/cli/issues/1534&lt;/a>
&lt;ul>
&lt;li>文档在 issue 里？ 2024-06-26 依然没找到官方文档&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="关联文件与配置">关联文件与配置&lt;a class="td-heading-self-link" href="#%e5%85%b3%e8%81%94%e6%96%87%e4%bb%b6%e4%b8%8e%e9%85%8d%e7%bd%ae" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;ul>
&lt;li>Unix-like OS :
&lt;ul>
&lt;li>&lt;code>$HOME/.docker/cli-plugins&lt;/code>&lt;/li>
&lt;li>&lt;code>/usr/local/lib/docker/cli-plugins&lt;/code> &amp;amp; &lt;code>/usr/local/libexec/docker/cli-plugins&lt;/code>&lt;/li>
&lt;li>&lt;code>/usr/lib/docker/cli-plugins&lt;/code> &amp;amp; &lt;code>/usr/libexec/docker/cli-plugins&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>On Windows:
&lt;ul>
&lt;li>&lt;code>%USERPROFILE%\.docker\cli-plugins&lt;/code>&lt;/li>
&lt;li>&lt;code>C:\ProgramData\Docker\cli-plugins&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: image</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/Docker/Docker-CLI/image/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/Docker/Docker-CLI/image/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;/blockquote>
&lt;p>image 命令用于管理容器镜像。&lt;/p>
&lt;h1 id="build---使用-dockerfile-构建一个镜像">build - 使用 Dockerfile 构建一个镜像&lt;a class="td-heading-self-link" href="#build---%e4%bd%bf%e7%94%a8-dockerfile-%e6%9e%84%e5%bb%ba%e4%b8%80%e4%b8%aa%e9%95%9c%e5%83%8f" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h1 id="history---show-the-history-of-an-image">history - Show the history of an image&lt;a class="td-heading-self-link" href="#history---show-the-history-of-an-image" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h1 id="import---import-the-contents-from-a-tarball-to-create-a-filesystem-image">import - Import the contents from a tarball to create a filesystem image&lt;a class="td-heading-self-link" href="#import---import-the-contents-from-a-tarball-to-create-a-filesystem-image" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h1 id="inspect---display-detailed-information-on-one-or-more-images">inspect - Display detailed information on one or more images&lt;a class="td-heading-self-link" href="#inspect---display-detailed-information-on-one-or-more-images" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h1 id="load---load-an-image-from-a-tar-archive-or-stdin">load - Load an image from a tar archive or STDIN&lt;a class="td-heading-self-link" href="#load---load-an-image-from-a-tar-archive-or-stdin" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h1 id="ls---列出所有镜像">ls - 列出所有镜像&lt;a class="td-heading-self-link" href="#ls---%e5%88%97%e5%87%ba%e6%89%80%e6%9c%89%e9%95%9c%e5%83%8f" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h1 id="prune---移除未使用的镜像">prune - 移除未使用的镜像&lt;a class="td-heading-self-link" href="#prune---%e7%a7%bb%e9%99%a4%e6%9c%aa%e4%bd%bf%e7%94%a8%e7%9a%84%e9%95%9c%e5%83%8f" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="syntax语法">Syntax(语法)&lt;a class="td-heading-self-link" href="#syntax%e8%af%ad%e6%b3%95" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>docker image prune [OPTIONS]&lt;/strong>&lt;/p>
&lt;p>OPTIONS&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-a, &amp;ndash;all&lt;/strong> # Remove all unused images, not just dangling ones&lt;/li>
&lt;li>&lt;strong>-f, &amp;ndash;force&lt;/strong> # Do not prompt for confirmation&lt;/li>
&lt;/ul>
&lt;h2 id="example">EXAMPLE&lt;a class="td-heading-self-link" href="#example" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>docker image prune -a # 清理所有没有使用的镜像&lt;/p>
&lt;h1 id="pull---pull-an-image-or-a-repository-from-a-registry">pull - Pull an image or a repository from a registry&lt;a class="td-heading-self-link" href="#pull---pull-an-image-or-a-repository-from-a-registry" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h1 id="push---push-an-image-or-a-repository-to-a-registry">push - Push an image or a repository to a registry&lt;a class="td-heading-self-link" href="#push---push-an-image-or-a-repository-to-a-registry" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h1 id="rm---remove-one-or-more-images">rm - Remove one or more images&lt;a class="td-heading-self-link" href="#rm---remove-one-or-more-images" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h1 id="save---save-one-or-more-images-to-a-tar-archive-streamed-to-stdout-by-default">save - Save one or more images to a tar archive (streamed to STDOUT by default)&lt;a class="td-heading-self-link" href="#save---save-one-or-more-images-to-a-tar-archive-streamed-to-stdout-by-default" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h1 id="tag---create-a-tag-target_image-that-refers-to-source_image">tag - Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE&lt;a class="td-heading-self-link" href="#tag---create-a-tag-target_image-that-refers-to-source_image" aria-label="Heading self-link">&lt;/a>&lt;/h1></description></item><item><title>Docs: network</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/Docker/Docker-CLI/network/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/Docker/Docker-CLI/network/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>network 命令用于管理容器的网络&lt;/p>
&lt;h2 id="connect---connect-a-container-to-a-network">connect - Connect a container to a network&lt;a class="td-heading-self-link" href="#connect---connect-a-container-to-a-network" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="create---create-a-network">create - Create a network&lt;a class="td-heading-self-link" href="#create---create-a-network" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>docker network create [OPTIONS] NETWORK&lt;/strong>&lt;/p>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>docker network create -d bridge &amp;ndash;subnet &amp;ldquo;172.26.0.0/16&amp;rdquo; &amp;ndash;gateway &amp;ldquo;172.26.0.1&amp;rdquo; mybr0 # 创建一个桥接的网络，网段是 172.26.0.0/16,网关是 172.26.0.1&lt;/li>
&lt;/ul>
&lt;h2 id="disconnect---disconnect-a-container-from-a-network">disconnect - Disconnect a container from a network&lt;a class="td-heading-self-link" href="#disconnect---disconnect-a-container-from-a-network" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="inspect---display-detailed-information-on-one-or-more-networks">inspect - Display detailed information on one or more networks&lt;a class="td-heading-self-link" href="#inspect---display-detailed-information-on-one-or-more-networks" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="ls---list-networks">ls - List networks&lt;a class="td-heading-self-link" href="#ls---list-networks" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="prune---移除所有未使用的网络">prune - 移除所有未使用的网络&lt;a class="td-heading-self-link" href="#prune---%e7%a7%bb%e9%99%a4%e6%89%80%e6%9c%89%e6%9c%aa%e4%bd%bf%e7%94%a8%e7%9a%84%e7%bd%91%e7%bb%9c" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="rm---移除一个或多个网络">rm - 移除一个或多个网络&lt;a class="td-heading-self-link" href="#rm---%e7%a7%bb%e9%99%a4%e4%b8%80%e4%b8%aa%e6%88%96%e5%a4%9a%e4%b8%aa%e7%bd%91%e7%bb%9c" aria-label="Heading self-link">&lt;/a>&lt;/h2></description></item><item><title>Docs: run</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/Docker/Docker-CLI/run/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/Docker/Docker-CLI/run/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.docker.com/engine/reference/run/">官方文档，参考-命令行参考-docker-Docker run 参考&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.docker.com/engine/reference/commandline/run/">官方文档，参考-命令行参考-docker-docker run&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>run 命令可以启动容器&lt;/p>
&lt;h1 id="syntax语法">Syntax(语法)&lt;a class="td-heading-self-link" href="#syntax%e8%af%ad%e6%b3%95" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;strong>docker run [OPTIONS] ImageName [COMMAND] [ARG&amp;hellip;]&lt;/strong>&lt;/p>
&lt;h2 id="options">OPTIONS&lt;a class="td-heading-self-link" href="#options" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>-d, &amp;ndash;detach&lt;/strong> # 让容器运行在后台并打印出容器的 ID&lt;/li>
&lt;li>&lt;strong>&amp;ndash;entrypoint&lt;/strong>(STRING) # 覆盖容器镜像的的默认 ENTRYPOINT。即 &lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization%20implementation/%E6%9E%84%E5%BB%BA%20OCI%20Image/Dockerfile%20%E6%8C%87%E4%BB%A4.md">Dockerfile 指令&lt;/a> 中的 ENTRYPOINT。&lt;/li>
&lt;li>&lt;strong>-e, &amp;ndash;env&lt;/strong>(LIST) # 设定容器内的环境变量。LIST 格式为 &lt;code>VAR=VALUE&lt;/code>，若要指定多个变量，则使用多次 &amp;ndash;env 选项。&lt;/li>
&lt;li>&amp;ndash;env-file list Read in a file of environment variables&lt;/li>
&lt;li>&lt;strong>&amp;ndash;expose&lt;/strong>(LIST) # 等效于 Dockerfile 中的 EXPOSE 指令，仅暴露容器端口，不在宿主机暴露。&lt;/li>
&lt;li>&lt;strong>-h, &amp;ndash;hostname&lt;/strong>(STRING) # 指定容器内的 hostname&lt;/li>
&lt;li>&amp;ndash;init Run an init inside the container that forwards signals and reaps processes&lt;/li>
&lt;li>&lt;strong>-i, &amp;ndash;interactive&lt;/strong> # 即使没有 attach 到容器，也保持 STDIN(标准输入)开启。通常与 -t 一起使用&lt;/li>
&lt;li>&lt;strong>&amp;ndash;name&lt;/strong>(STRING) # 为容器分配一个名称。默认为随机字符串&lt;/li>
&lt;li>&lt;strong>&amp;ndash;network&lt;/strong>(STRING) # 连接一个容器到一个容器网络(default &amp;ldquo;default&amp;rdquo;)，可以是 docker network ls 列出的网络，也可以是其余 container 的网络。STRING 包括下面几种
&lt;ul>
&lt;li>none # 容器使用自己的网络（类似&amp;ndash;net=bridge），但是不进行配置&lt;/li>
&lt;li>bridge # 通过 veth 接口将容器连接到默认的 Docker 桥(默认为 docker0 的网桥).&lt;/li>
&lt;li>host # 直接使用宿主机的网络而不是独立的 network namespace&lt;/li>
&lt;li>ContainerName # 连接到指定 container 的网络中&lt;/li>
&lt;li>NetworkName # 连接到 docker network ls 所列出的其中一个 docker 网络上&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>-p, &amp;ndash;publish [HostIP:][HostPort:]&amp;lt;ContainerPort&amp;gt;&lt;/strong># 指明 Container 要映射到 Host 上的 IP 和端口。若只指明 HostIP 和 ContainerPort 则中间俩个冒号不可省。若不指定 HostIP，则第一个冒号可不写。要暴露多个端口则多次使用 -p 即可。&lt;/li>
&lt;li>&lt;strong>-P, &amp;ndash;publish-all&lt;/strong> # 将 Image 定义的 EXPOSE 要暴露的端口暴露给 host，随机分配 host 上的端口与之建立映射关系。一般从 10000 端口开始&lt;/li>
&lt;li>&lt;strong>&amp;ndash;read-only&lt;/strong> # 将容器的根文件系统挂载为只读模式&lt;/li>
&lt;li>&lt;strong>&amp;ndash;rm&lt;/strong> # 当容器退出时，删除它。包括创建的 volume 等一并删除&lt;/li>
&lt;li>&lt;strong>-t, &amp;ndash;tty&lt;/strong> # 为此命令分配一个 pseudo-TTY(伪终端)，可以支持终端登录，通常与-i 一起使用。&lt;/li>
&lt;li>&lt;strong>-u, &amp;ndash;user&lt;/strong>(STRING) # 为容器进程指定运行的用户名/UID
&lt;ul>
&lt;li>STRING 格式：&lt;code>&amp;lt;NAME|UID&amp;gt;[:&amp;lt;GROUP|GID&amp;gt;])&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>-v, &amp;ndash;volume [SRC:]DST&lt;/strong> # 为容器创建一个 Volume 并挂载到其中的目录上。若指定的 host 上的路径不存在，则自动创建这个目录；若不指定 SRC 则 docker 会自动创建一个。默认在 /var/lib/docker/volumes/ 目录下创建 volume 所用的目录
&lt;ul>
&lt;li>Note：使用 /HOST/PATH 与 VolumeName 的区别详见：《&lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization%20implementation/Docker/Docker%20Storage.md">Docker Storage&lt;/a>》&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&amp;ndash;volume-driver string Optional volume driver for the container&lt;/li>
&lt;li>&lt;strong>&amp;ndash;volumes-from &amp;lt;ContainerName&amp;gt;&lt;/strong> # 运行的新容器从 ContainerName 这个容器复制存储卷来使用&lt;/li>
&lt;li>&lt;strong>-w, &amp;ndash;workdir &amp;lt;STRING&amp;gt;&lt;/strong> # 指定容器内的工作目录，让指定的目录执行当前命令&lt;/li>
&lt;/ul>
&lt;h3 id="资源配置">资源配置&lt;a class="td-heading-self-link" href="#%e8%b5%84%e6%ba%90%e9%85%8d%e7%bd%ae" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>&amp;ndash;cpu-period int Limit CPU CFS (Completely Fair Scheduler) period&lt;/li>
&lt;li>&amp;ndash;cpu-quota int Limit CPU CFS (Completely Fair Scheduler) quota&lt;/li>
&lt;li>&amp;ndash;cpu-rt-period int Limit CPU real-time period in microseconds&lt;/li>
&lt;li>&amp;ndash;cpu-rt-runtime int Limit CPU real-time runtime in microseconds&lt;/li>
&lt;li>-c, &amp;ndash;cpu-shares int CPU shares (relative weight)&lt;/li>
&lt;li>&lt;strong>&amp;ndash;cpus &amp;lt;INT&amp;gt;&lt;/strong> # 容器可使用的最大 CPU 资源&lt;/li>
&lt;li>&amp;ndash;cpuset-cpus string CPUs in which to allow execution (0-3, 0,1)&lt;/li>
&lt;li>&amp;ndash;cpuset-mems string MEMs in which to allow execution (0-3, 0,1)&lt;/li>
&lt;li>&lt;strong>-m, &amp;ndash;memory &amp;lt;BYTES&amp;gt;&lt;/strong> # 内存限制。容器能使用的最大内存&lt;/li>
&lt;li>&amp;ndash;mem ory-reservation bytes Memory soft limit&lt;/li>
&lt;li>&amp;ndash;memory-swap bytes Swap limit equal to memory plus swap: &amp;lsquo;-1&amp;rsquo; to enable unlimited swap&lt;/li>
&lt;li>&amp;ndash;memory-swappiness int Tune container memory swappiness (0 to 100) (default -1)&lt;/li>
&lt;li>&lt;strong>&amp;ndash;restart &amp;lt;string&amp;gt;&lt;/strong> # 容器的重启策略。&lt;code>默认值：0&lt;/code>&lt;/li>
&lt;li>&lt;strong>&amp;ndash;ulimit &amp;lt;UlimitDesc&amp;gt;&lt;/strong> # 为容器配置 Ulimit。&lt;code>默认值：[]&lt;/code>
&lt;ul>
&lt;li>比如：
&lt;ul>
&lt;li>&amp;ndash;ulimit nofile=1000 # 限制容器最多能打开 1 万 个文件描述符&lt;/li>
&lt;li>&amp;ndash;ulimit nproc=10 # 限制容器最多能打开 10 个进程&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="特权-与-linux-capabilities">特权 与 Linux Capabilities&lt;a class="td-heading-self-link" href="#%e7%89%b9%e6%9d%83-%e4%b8%8e-linux-capabilities" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.docker.com/engine/reference/run/">官方文档，参考-命令行参考 - docker-Docker run 参考 - 特权 与 Linux Capabilities&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>默认情况下，Docker 容器是 “unprivileged”，即无特权的。&lt;/p>
&lt;p>另外，在官方文档中，还可以找到所有可以通过 &amp;ndash;cap-add 和 &amp;ndash;cap-drop 控制的容器内的 &lt;a href="https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%99%BB%E5%BD%95%20Linux%20%E4%B8%8E%20%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/Access%20Control(%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6)/Capabilities(%E8%83%BD%E5%8A%9B)%20%E7%AE%A1%E7%90%86.md">Linux Capabilities(能力)&lt;/a>。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&amp;ndash;cap-add &amp;lt; STRING | ALL&amp;gt;&lt;/strong> # 添加 Linux 能力。可以多次指定该选项，或使用 ALL 添加所有。&lt;/li>
&lt;li>&lt;strong>&amp;ndash;cap-drop &amp;lt; STRING | ALL&amp;gt;&lt;/strong> # 禁用 Linux 能力。可以多次指定该选项，或使用 ALL 禁用所有。&lt;/li>
&lt;li>&lt;strong>&amp;ndash;privileged&lt;/strong> # 特权模式&lt;/li>
&lt;/ul>
&lt;h1 id="最佳实践">最佳实践&lt;a class="td-heading-self-link" href="#%e6%9c%80%e4%bd%b3%e5%ae%9e%e8%b7%b5" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;code>docker run -d -p 80:80 httpd&lt;/code>&lt;/p>
&lt;ul>
&lt;li>其过程可以简单的描述为
&lt;ul>
&lt;li>从 Docker Hub 下载 httpd 镜像。镜像中已经安装好了 Apache HTTP Server。&lt;/li>
&lt;li>以后台启动 httpd 容器，并将容器的 80 端口映射到 host 的 80 端口。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>以后台运行镜像 nginx:latest&lt;/p>
&lt;ul>
&lt;li>docker run -p 80:80 -v /data:/data -d nginx:latest&lt;/li>
&lt;/ul>
&lt;p>在运行 centos 容器的时候，执行 tail 命令。该命令是为了让容器启动后不自动关闭&lt;/p>
&lt;ul>
&lt;li>docker run -d centos tail -f /dev/null&lt;/li>
&lt;/ul></description></item><item><title>Docs: ps、stats 容器状态查看</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/Docker/Docker-CLI/psstats-%E5%AE%B9%E5%99%A8%E7%8A%B6%E6%80%81%E6%9F%A5%E7%9C%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/Docker/Docker-CLI/psstats-%E5%AE%B9%E5%99%A8%E7%8A%B6%E6%80%81%E6%9F%A5%E7%9C%8B/</guid><description>
&lt;h1 id="docker-ps">docker ps&lt;a class="td-heading-self-link" href="#docker-ps" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="syntax语法">Syntax(语法)&lt;a class="td-heading-self-link" href="#syntax%e8%af%ad%e6%b3%95" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>docker ps [OPTIONS]&lt;/strong>&lt;/p>
&lt;p>以列表的形式显示容器，包括以下几个字段 CONTAINER ID(容器 ID 号)、IMAGE(启动该容器所用的 image)、COMMAND(该容器运行的命令)、CREATED(该容器被创建了多久)、STATUS(容器当前状态)、PORTS(容器所用端口)、NAMES(容器名，随机生成)，效果如图所示：&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/tuw6e1/1616121626421-52b41c7f-068e-4c87-9a54-8aab4d638bb0.png" alt="">&lt;/p>
&lt;p>还可以通过 -s 选项，来输出容器占用的磁盘空间大小。&lt;/p>
&lt;p>&lt;strong>OPTIONS&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-a, &amp;ndash;all&lt;/strong> # 显示所有容器(默认只显示正在 running 状态的)&lt;/li>
&lt;li>&lt;strong>-f, &amp;ndash;filter FILTER&lt;/strong> # 根据提供的条件过滤输出内容。
&lt;ul>
&lt;li>可用的过滤条件详见：&lt;a href="https://docs.docker.com/engine/reference/commandline/ps/#filtering">https://docs.docker.com/engine/reference/commandline/ps/#filtering&lt;/a>&lt;/li>
&lt;li>比较常见的是根据 volume 进行过滤，可以根据指定的 volume 来过滤，从而发现哪些容器正在使用哪些 volume。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>&amp;ndash;format STRING&lt;/strong> # 使用 Go 模板漂亮得输出容器信息。
&lt;ul>
&lt;li>可用的 Go 模板占位符详见：&lt;a href="https://docs.docker.com/engine/reference/commandline/ps/#formatting">https://docs.docker.com/engine/reference/commandline/ps/#formatting&lt;/a>&lt;/li>
&lt;li>可以使用 table 指令，让输出内容以表格的方式呈现，效果如下(如果没有 table 指令，那么输出内容将会扎堆)。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># docker ps --format &amp;#34;table {{.Names}}\t{{.Size}}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NAMES SIZE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pushgateway 46B &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>virtual 19.4MB&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>node_exporter 16B &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>virtual 22.9MB&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;strong>-n, &amp;ndash;last INT&lt;/strong> # Show n last created containers (includes all states) (default -1)&lt;/li>
&lt;li>&lt;strong>-l, &amp;ndash;latest&lt;/strong> # 显示最后创建的容器(所有状态)&lt;/li>
&lt;li>&lt;strong>&amp;ndash;no-trunc&lt;/strong> # 不要截断输出 i.e.每列显示的内容都是完整内容，不会被截断&lt;/li>
&lt;li>&lt;strong>-q, &amp;ndash;quiet&lt;/strong> # 仅输出 CONTAINER ID&lt;/li>
&lt;li>&lt;strong>-s, &amp;ndash;sizes&lt;/strong> # 显示容器所用磁盘容量。一个是可写层的数据量，还有一个是只读镜像数据的磁盘空间总量。&lt;/li>
&lt;/ul>
&lt;h2 id="example">EXAMPLE&lt;a class="td-heading-self-link" href="#example" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>显示所有容器的 CONTAINER ID 与 COMMAND 字段，且不截断输出
&lt;ul>
&lt;li>docker ps &amp;ndash;format &amp;ldquo;table {{.ID}}\t{{.Command}}&amp;rdquo; -a &amp;ndash;no-trunc&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>查看容器所占磁盘空间大小，并按照所占空间大小排序
&lt;ul>
&lt;li>docker ps &amp;ndash;format &amp;ldquo;{{.ID}}\t{{.Size}}&amp;rdquo; | sort -k 4 -h&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="过滤器示例">过滤器示例&lt;a class="td-heading-self-link" href="#%e8%bf%87%e6%bb%a4%e5%99%a8%e7%a4%ba%e4%be%8b" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>只显示状态为 restarting 的容器&lt;/p>
&lt;ul>
&lt;li>docker ps -a &amp;ndash;filter status=restarting&lt;/li>
&lt;/ul>
&lt;p>只显示状态为 exited 的容器&lt;/p>
&lt;ul>
&lt;li>docker ps -a &amp;ndash;filter status=exited&lt;/li>
&lt;/ul>
&lt;p>查看那个容器使用了指定的 Volume&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># docker volume ls&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>DRIVER VOLUME NAME
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">local&lt;/span> 87e775bf78c42bc70b63f49f5495081d835d4571a922b2c5400371456fb9fbd1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># docker ps -a -f volume=87e775bf78c42bc70b63f49f5495081d835d4571a922b2c5400371456fb9fbd1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>1b857d27d391 mysql:8 &lt;span style="color:#4e9a06">&amp;#34;docker-entrypoint.s…&amp;#34;&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">7&lt;/span> weeks ago Exited &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>0&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">14&lt;/span> hours ago mysql
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="docker-stats-options-container">docker stats [OPTIONS] [CONTAINER&amp;hellip;.]&lt;a class="td-heading-self-link" href="#docker-stats-options-container" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>显示效果如下，可以显示容器的 CPU、内存的使用率，和磁盘的 IO。并实时刷新。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>CONTAINER ID NAME CPU % MEM USAGE / LIMIT MEM % NET I/O BLOCK I/O PIDS
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>4a12a78282a5 pushgateway 0.00% 8.383MiB / 7.638GiB 0.11% 656B / 0B 0B / 0B &lt;span style="color:#0000cf;font-weight:bold">9&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0a5fde8051fd node_exporter 0.00% 4.312MiB / 7.638GiB 0.06% 0B / 0B
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>docker stats [OPTIONS] [CONTAINER&amp;hellip;]&lt;/strong>
OPTIONS&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-a, &amp;ndash;all&lt;/strong> # Show all containers (default shows just running)&lt;/li>
&lt;li>&lt;strong>&amp;ndash;format string&lt;/strong> # 使用 Go 模板漂亮得输出容器信息。
&lt;ul>
&lt;li>可用的 Go 模板占位符详见：&lt;a href="https://docs.docker.com/engine/reference/commandline/stats/#formatting">https://docs.docker.com/engine/reference/commandline/stats/#formatting&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>&amp;ndash;no-stream&lt;/strong> # 禁用流信息，仅显示第一次请求的结果。i.e.不实时刷新&lt;/li>
&lt;li>&lt;strong>&amp;ndash;no-trunc&lt;/strong> # Do not truncate output&lt;/li>
&lt;/ul>
&lt;p>EXAMPLE&lt;/p>
&lt;ul>
&lt;li>&lt;code>docker stats --format &amp;quot;table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}&amp;quot;&lt;/code> # 使用 go 模板输出指定内容&lt;/li>
&lt;/ul></description></item></channel></rss>