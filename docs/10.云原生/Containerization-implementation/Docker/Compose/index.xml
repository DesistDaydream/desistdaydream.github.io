<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Compose on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/Docker/Compose/</link><description>Recent content in Compose on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/Docker/Compose/index.xml" rel="self" type="application/rss+xml"/><item><title>Compose</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/Docker/Compose/Compose/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/Docker/Compose/Compose/</guid><description>概述 参考：
官方文档 菜鸟教程 Compose 是用于定义和运行多容器 Docker 应用程序的工具。通过 Compose，您可以使用 YML 文件来配置应用程序需要的所有服务。然后，使用一个命令，就可以通过该配置文件创建并启动所有服务。
Compose 使用的三个步骤：
使用 Dockerfile 定义应用程序的环境。 使用 docker-compose.yml 定义构成应用程序的服务，这样它们可以在隔离环境中一起运行。 最后，执行 docker-compose up 命令来启动并运行整个应用程序。 docker-compose.yml 的配置案例如下（配置参数参考下文）：
compose 文件示例 # yaml 配置实例 version: &amp;#39;3&amp;#39; services: web: build: . ports: - &amp;#34;5000:5000&amp;#34; volumes: - .:/code - logvolume01:/var/log links: - redis redis: image: redis volumes: logvolume01: {} Compose 安装 Compose 安装就是 compose CLI
安装 Docker 的 Compose 插件 官方推荐以 Docker CLI Plugin 的方式使用 Compose</description></item><item><title>Compose 文件规范</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/Docker/Compose/Compose-%E6%96%87%E4%BB%B6%E8%A7%84%E8%8C%83/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/Docker/Compose/Compose-%E6%96%87%E4%BB%B6%E8%A7%84%E8%8C%83/</guid><description>概述 参考：
GitHub 项目，compose-spec/compose-spec Compose 规范 Docker 官方文档，参考 - compose 文件 Compose 文件是一个 YAML 格式的配置文件，Compose 将每个容器抽象为一个 service。顶层字段 service 的下级字段，用来定义该容器的名称。
一个 Docker Compose 文件中通常包含如下顶级字段：
version # 必须的。 services(map[STRING]services) networks(networks) volumes(volumes) secrets(secrets) version 指定本 yaml 依从的 compose 哪个版本制定的。
services https://docs.docker.com/compose/compose-file/05-services/
build 指定为构建镜像上下文路径：
例如 webapp 服务，指定为从上下文路径 ./dir/Dockerfile 所构建的镜像：
version: &amp;#34;3&amp;#34; services: webapp: build: ./dir 或者，作为具有在上下文指定的路径的对象，以及可选的 Dockerfile 和 args：
version: &amp;#34;3&amp;#34; services: webapp: build: context: ./dir dockerfile: Dockerfile-alternate args: buildno: 1 labels: - &amp;#34;com.example.description=Accounting webapp&amp;#34; - &amp;#34;com.</description></item><item><title>compose CLI</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/Docker/Compose/compose-CLI/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/Docker/Compose/compose-CLI/</guid><description>概述 参考：
官方文档 通过 run 命令，可以在容器启动失败时，进行调试
docker-compose -f docker-compose-backup.yaml run keepalived bash
这样会启动 keepalived 容器，并分配一个终端。</description></item></channel></rss>