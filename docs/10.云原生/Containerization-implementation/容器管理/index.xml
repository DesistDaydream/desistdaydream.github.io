<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦的站点 – 容器管理</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/</link><description>Recent content in 容器管理 on 断念梦的站点</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: 容器中使用 GPU</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/%E5%AE%B9%E5%99%A8%E4%B8%AD%E4%BD%BF%E7%94%A8-GPU/</link><pubDate>Tue, 05 Jul 2022 08:42:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/%E5%AE%B9%E5%99%A8%E4%B8%AD%E4%BD%BF%E7%94%A8-GPU/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;/blockquote>
&lt;h2 id="nvidia">Nvidia&lt;a class="td-heading-self-link" href="#nvidia" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/install-guide.html">Nvidia 官方文档，容器工具包 - 安装指南&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>安装 &lt;strong>Container Toolkit(容器工具包，简称 ctk)&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>Notes: 若不安装 ctk，启动容器指定 GPU 时将会报错: &lt;code>docker: Error response from daemon: could not select device driver &amp;quot;&amp;quot; with capabilities: [[gpu]]. 3&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;p>Ubuntu&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey &lt;span style="color:#000;font-weight:bold">|&lt;/span> sudo gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> curl -s -L https://nvidia.github.io/libnvidia-container/stable/deb/nvidia-container-toolkit.list &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> sed &lt;span style="color:#4e9a06">&amp;#39;s#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g&amp;#39;&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> sudo tee /etc/apt/sources.list.d/nvidia-container-toolkit.list
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>apt update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apt install -y nvidia-container-toolkit
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="最佳实践">最佳实践&lt;a class="td-heading-self-link" href="#%e6%9c%80%e4%bd%b3%e5%ae%9e%e8%b7%b5" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="docker-1903增加了对--gpus-选项的支持我们在-docker-里面想读取-nvidia-显卡再也不需要额外的安装-nvidia-docker-了下面开始实战">Docker 19.03，增加了对&amp;ndash;gpus 选项的支持，我们在 docker 里面想读取 nvidia 显卡再也不需要额外的安装 nvidia-docker 了，下面开始实战&lt;a class="td-heading-self-link" href="#docker-1903%e5%a2%9e%e5%8a%a0%e4%ba%86%e5%af%b9--gpus-%e9%80%89%e9%a1%b9%e7%9a%84%e6%94%af%e6%8c%81%e6%88%91%e4%bb%ac%e5%9c%a8-docker-%e9%87%8c%e9%9d%a2%e6%83%b3%e8%af%bb%e5%8f%96-nvidia-%e6%98%be%e5%8d%a1%e5%86%8d%e4%b9%9f%e4%b8%8d%e9%9c%80%e8%a6%81%e9%a2%9d%e5%a4%96%e7%9a%84%e5%ae%89%e8%a3%85-nvidia-docker-%e4%ba%86%e4%b8%8b%e9%9d%a2%e5%bc%80%e5%a7%8b%e5%ae%9e%e6%88%98" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ol>
&lt;li>安装 nvidia-container-runtime：&lt;/li>
&lt;/ol>
&lt;p>查看官网（&lt;a href="https://links.jianshu.com/go?to=https%3A%2F%2Fnvidia.github.io%2Fnvidia-container-runtime">https://nvidia.github.io/nvidia-container-runtime&lt;/a>）得知基于 RHEL 的发行版添加源的方式为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># Centos&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">distribution&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>. /etc/os-release&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#000">$ID$VERSION_ID&lt;/span>&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>curl -s -L https://nvidia.github.io/nvidia-container-runtime/&lt;span style="color:#000">$distribution&lt;/span>/nvidia-container-runtime.repo &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> sudo tee /etc/yum.repos.d/nvidia-container-runtime.repo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># Ubuntu&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>curl -s -L https://nvidia.github.io/nvidia-container-runtime/gpgkey &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> sudo apt-key add -
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">distribution&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>. /etc/os-release&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#000">$ID$VERSION_ID&lt;/span>&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>curl -s -L https://nvidia.github.io/nvidia -container-runtime/&lt;span style="color:#000">$distribution&lt;/span>/nvidia-container-runtime.list &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> sudo tee /etc/apt/sources.list.d/nvidia-container-runtime.list
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo apt-get update
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>添加源后直接 yum 安装：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># centos&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>yum install nvidia-container-runtime
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># Ubuntu&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apt-get install nvidia-container-runtime
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>安装 docker-19.03&lt;/li>
&lt;/ol>
&lt;p>在新主机上首次安装 Docker Engine-Community 之前，需要设置 Docker 存储库。之后，您可以从存储库安装和更新 Docker。&lt;/p>
&lt;ul>
&lt;li>2.1 安装所需的软件包。yum-utils 提供了 yum-config-manager 效用，并 device-mapper-persistent-data 和 lvm2 由需要 devicemapper 存储驱动程序。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>yum install -y yum-utils &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> device-mapper-persistent-data &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> lvm2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>2.2 使用以下命令来设置稳定的存储库。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">yum&lt;/span>&lt;span style="color:#000;font-weight:bold">-&lt;/span>&lt;span style="color:#000">config&lt;/span>&lt;span style="color:#000;font-weight:bold">-&lt;/span>&lt;span style="color:#000">manager&lt;/span> \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">--&lt;/span>&lt;span style="color:#204a87;font-weight:bold">add&lt;/span>&lt;span style="color:#000;font-weight:bold">-&lt;/span>&lt;span style="color:#000">repo&lt;/span> \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">https&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#8f5902;font-style:italic">//download.docker.com/linux/centos/docker-ce.repo&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>2.3 开启 Docker 服务&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>systemctl start docker &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> systemctl &lt;span style="color:#204a87">enable&lt;/span> docker
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>2.4 验证 docker 版本是否安装正常&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ docker version
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Client: Docker Engine - Community
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Version: 19.03.3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> API version: 1.40
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Go version: go1.12.10
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Git commit: a872fc2f86
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Built: Tue Oct &lt;span style="color:#0000cf;font-weight:bold">8&lt;/span> 00:58:10 &lt;span style="color:#0000cf;font-weight:bold">2019&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> OS/Arch: linux/amd64
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Experimental: &lt;span style="color:#204a87">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Server: Docker Engine - Community
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Engine:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Version: 19.03.2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> API version: 1.40 &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>minimum version 1.12&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Go version: go1.12.8
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Git commit: 6a30dfc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Built: Thu Aug &lt;span style="color:#0000cf;font-weight:bold">29&lt;/span> 05:27:34 &lt;span style="color:#0000cf;font-weight:bold">2019&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> OS/Arch: linux/amd64
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Experimental: &lt;span style="color:#204a87">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> containerd:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Version: 1.2.10
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> GitCommit: b34a5c8af56e510852c35414db4c1f4fa6172339
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> runc:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Version: 1.0.0-rc8+dev
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> GitCommit: 3e425f80a8c931f88e6d94a8c831b9d5aa481657
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> docker-init:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Version: 0.18.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> GitCommit: fec3683
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>启动容器&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker run -d -it -p 1518:1518 --name&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;centos&amp;#34;&lt;/span> --gpus all nvidia/cuda:9.1-cudnn7-runtime-centos7 /bin/bash
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 启动导出器&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker run -d --name nvidia --restart always --gpus all -p 9400:9400 nvidia/dcgm-exporter:2.0.13-2.1.1-ubuntu18.04
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>进入容器&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker &lt;span style="color:#204a87">exec&lt;/span> -it centos /bin/bash
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>查看显卡&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ nvidia-smi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Mon Oct &lt;span style="color:#0000cf;font-weight:bold">21&lt;/span> 02:15:19 &lt;span style="color:#0000cf;font-weight:bold">2019&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+-----------------------------------------------------------------------------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> NVIDIA-SMI 390.59 Driver Version: 390.59 &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span>-------------------------------+----------------------+----------------------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> GPU Name Persistence-M&lt;span style="color:#000;font-weight:bold">|&lt;/span> Bus-Id Disp.A &lt;span style="color:#000;font-weight:bold">|&lt;/span> Volatile Uncorr. ECC &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> Fan Temp Perf Pwr:Usage/Cap&lt;span style="color:#000;font-weight:bold">|&lt;/span> Memory-Usage &lt;span style="color:#000;font-weight:bold">|&lt;/span> GPU-Util Compute M. &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">===============================&lt;/span>+&lt;span style="color:#ce5c00;font-weight:bold">======================&lt;/span>+&lt;span style="color:#ce5c00;font-weight:bold">======================&lt;/span>&lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> GeForce GTX 108... Off &lt;span style="color:#000;font-weight:bold">|&lt;/span> 00000000:00:08.0 Off &lt;span style="color:#000;font-weight:bold">|&lt;/span> N/A &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> 29% 33C P0 58W / 250W &lt;span style="color:#000;font-weight:bold">|&lt;/span> 0MiB / 11178MiB &lt;span style="color:#000;font-weight:bold">|&lt;/span> 0% Default &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+-------------------------------+----------------------+----------------------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> GeForce GTX 108... Off &lt;span style="color:#000;font-weight:bold">|&lt;/span> 00000000:00:09.0 Off &lt;span style="color:#000;font-weight:bold">|&lt;/span> N/A &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> 29% 28C P5 12W / 250W &lt;span style="color:#000;font-weight:bold">|&lt;/span> 0MiB / 11178MiB &lt;span style="color:#000;font-weight:bold">|&lt;/span> 0% Default &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+-------------------------------+----------------------+----------------------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> GeForce GTX 108... Off &lt;span style="color:#000;font-weight:bold">|&lt;/span> 00000000:00:0A.0 Off &lt;span style="color:#000;font-weight:bold">|&lt;/span> N/A &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> 29% 27C P5 12W / 250W &lt;span style="color:#000;font-weight:bold">|&lt;/span> 0MiB / 11178MiB &lt;span style="color:#000;font-weight:bold">|&lt;/span> 0% Default &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+-------------------------------+----------------------+----------------------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> GeForce GTX 108... Off &lt;span style="color:#000;font-weight:bold">|&lt;/span> 00000000:00:0B.0 Off &lt;span style="color:#000;font-weight:bold">|&lt;/span> N/A &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> 29% 30C P5 12W / 250W &lt;span style="color:#000;font-weight:bold">|&lt;/span> 0MiB / 11178MiB &lt;span style="color:#000;font-weight:bold">|&lt;/span> 0% Default &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+-------------------------------+----------------------+----------------------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> GeForce GTX 108... Off &lt;span style="color:#000;font-weight:bold">|&lt;/span> 00000000:00:0C.0 Off &lt;span style="color:#000;font-weight:bold">|&lt;/span> N/A &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> 29% 31C P0 58W / 250W &lt;span style="color:#000;font-weight:bold">|&lt;/span> 0MiB / 11178MiB &lt;span style="color:#000;font-weight:bold">|&lt;/span> 0% Default &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+-------------------------------+----------------------+----------------------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">5&lt;/span> GeForce GTX 108... Off &lt;span style="color:#000;font-weight:bold">|&lt;/span> 00000000:00:0D.0 Off &lt;span style="color:#000;font-weight:bold">|&lt;/span> N/A &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> 29% 23C P5 12W / 250W &lt;span style="color:#000;font-weight:bold">|&lt;/span> 0MiB / 11178MiB &lt;span style="color:#000;font-weight:bold">|&lt;/span> 0% Default &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+-------------------------------+----------------------+----------------------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">6&lt;/span> GeForce GTX 108... Off &lt;span style="color:#000;font-weight:bold">|&lt;/span> 00000000:00:0E.0 Off &lt;span style="color:#000;font-weight:bold">|&lt;/span> N/A &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> 29% 27C P5 12W / 250W &lt;span style="color:#000;font-weight:bold">|&lt;/span> 0MiB / 11178MiB &lt;span style="color:#000;font-weight:bold">|&lt;/span> 0% Default &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+-------------------------------+----------------------+----------------------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">7&lt;/span> GeForce GTX 108... Off &lt;span style="color:#000;font-weight:bold">|&lt;/span> 00000000:00:0F.0 Off &lt;span style="color:#000;font-weight:bold">|&lt;/span> N/A &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> 29% 27C P5 12W / 250W &lt;span style="color:#000;font-weight:bold">|&lt;/span> 0MiB / 11178MiB &lt;span style="color:#000;font-weight:bold">|&lt;/span> 3% Default &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+-------------------------------+----------------------+----------------------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+-----------------------------------------------------------------------------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> Processes: GPU Memory &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> GPU PID Type Process name Usage &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=============================================================================&lt;/span>&lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> No running processes found &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+-----------------------------------------------------------------------------+
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: 容器非root启动</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/%E5%AE%B9%E5%99%A8%E9%9D%9Eroot%E5%90%AF%E5%8A%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/%E5%AE%B9%E5%99%A8%E9%9D%9Eroot%E5%90%AF%E5%8A%A8/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.docker.com/engine/security/rootless/">官方文档，Rootless 模式&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="容器非-root-启动改造的经验">容器非 root 启动改造的经验&lt;a class="td-heading-self-link" href="#%e5%ae%b9%e5%99%a8%e9%9d%9e-root-%e5%90%af%e5%8a%a8%e6%94%b9%e9%80%a0%e7%9a%84%e7%bb%8f%e9%aa%8c" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://zhangguanzhang.github.io/2023/11/03/non-root-containers/">zhangguanzhang，容器非 root 启动改造的经验&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>最近业务容器的非 root 启动改造实战案例经验，后续有新的也更新进来&lt;/p>
&lt;h2 id="改造">改造&lt;a class="td-heading-self-link" href="#%e6%94%b9%e9%80%a0" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="前提须知">前提须知&lt;a class="td-heading-self-link" href="#%e5%89%8d%e6%8f%90%e9%a1%bb%e7%9f%a5" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>这里列举些基础知识&lt;/p>
&lt;h4 id="使用-root-不安全的举例">使用 root 不安全的举例&lt;a class="td-heading-self-link" href="#%e4%bd%bf%e7%94%a8-root-%e4%b8%8d%e5%ae%89%e5%85%a8%e7%9a%84%e4%b8%be%e4%be%8b" aria-label="Heading self-link">&lt;/a>&lt;/h4>
&lt;p>虽然 linux 有 user namespace 隔离技术，但是 docker 不支持类似 podman 那样的给每个容器设置范围性的 uidmap 映射（当然 k8s 现在也不支持），并且容器默认配置下的权限虽然去掉了一些。但是容器内还是能对挂载进去的进行修改的，比如帖子 &lt;a href="https://www.v2ex.com/t/976554">rm -rf * 前一定一定要看清当前目录&lt;/a> 老哥的操作：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span style="display:flex;">&lt;span>docker run --rm -v /mnt/sda1:/mnt/sda1 -it alpine
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cp /mnt/sda1/somefile.tar.gz .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tar xzvf somefile.tar.gz
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd somefile-v1.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ls
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span># 看了看内容觉得不是自己想要的，回上一级目录准备删掉：
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd ..
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rm -rf *
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>嗯，alpine 默认的 workdir 是 &lt;code>/&lt;/code> ，所以删除 &lt;code>rm -rf /*&lt;/code>。当然还有其他不安全的，所以在业务角度上，我们需要给容器内进程设置在非 root 下最小的运行权限。&lt;/p>
&lt;h4 id="设置-user-还是使用-docker-entrypoint-sh-入口-设置-user-还是使用-docker-entrypointsh-入口">设置-USER-还是使用-docker-entrypoint-sh-入口 &amp;ldquo;设置 USER 还是使用 docker-entrypoint.sh 入口&lt;a class="td-heading-self-link" href="#%e8%ae%be%e7%bd%ae-user-%e8%bf%98%e6%98%af%e4%bd%bf%e7%94%a8-docker-entrypoint-sh-%e5%85%a5%e5%8f%a3-%e8%ae%be%e7%bd%ae-user-%e8%bf%98%e6%98%af%e4%bd%bf%e7%94%a8-docker-entrypointsh-%e5%85%a5%e5%8f%a3" aria-label="Heading self-link">&lt;/a>&lt;/h4>
&lt;p>Dockerfile 里设置 &lt;code>USER&lt;/code> 或者 run 的时候设置 &lt;code>-u user:group&lt;/code> 只能针对于一些简单的进程，例如大部分 exporter 和一些只是用 http API 的进程，这几天我测试后也提交了一些 pr：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/danielqsj/kafka_exporter/pull/410">danielqsj/kafka_exporter&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/ClickHouse/clickhouse_exporter/pull/83">ClickHouse/clickhouse_exporter&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/kubernetes/autoscaler/pull/6242/files">kubernetes addonresizer&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>对于很多挂载目录持久化数据的，例如各种中间件，例如 mysql，redis ，单纯设置 USER 的话，需要在容器启动之前设置目录的权限。other 权限为 7 的话，很不安全，所以只能是 owner、group 权限，但是容器内的用户名和宿主机用户名是不一致的，只能设置 uid、gid。使用这些需要数据持久化的容器，会存在：&lt;/p>
&lt;ul>
&lt;li>直接 -v 挂载或者 docker volume&lt;/li>
&lt;li>k8s 上使用 hostPath&lt;/li>
&lt;li>固定 pv&lt;/li>
&lt;li>sc 下使用 pvc&lt;/li>
&lt;li>别人的 k8s 集群或者实例上去部署&lt;/li>
&lt;/ul>
&lt;p>如果你提前修改目录权限，上面最后俩场景根本无法自动化，而且说不定某天新版本官方镜像里 Dockerfile 里换基础镜像的同时忘记在添加用户时候设置 uid 和 gid ，uid 和 gid 就变了，只能是加启动脚本里处理。&lt;/p>
&lt;p>对此，&lt;a href="https://github.com/docker-library/mysql/blob/master/5.7/docker-entrypoint.sh">mysql docker 镜像的官方启动脚本&lt;/a> 给了很好的参考，Dockerfile 制作镜像就创建了指定 uid、gid 的 mysql 用户，然后启动容器的时候都是 &lt;code>ENTRYPOINT CMD&lt;/code> （k8s 里对应 command、args） 的形式启动：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span style="display:flex;">&lt;span>docker-entrypoint.sh mysqld
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>或者可以通过 cmdline 设置 mysql 启动端口&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span style="display:flex;">&lt;span>docker run xxx mysql:5.7 --port 4306
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>mysql 脚本里包含对于权限以外的信息比较多，不方便举例，这里使用 redis 举例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#!/bin/sh
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">set&lt;/span> -e
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">1&lt;/span>&lt;span style="color:#000;font-weight:bold">#-&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span> !&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000">$1&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">||&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">1&lt;/span>&lt;span style="color:#000;font-weight:bold">%.conf&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span> !&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000">$1&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">set&lt;/span> -- redis-server &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000">$@&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000">$1&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;redis-server&amp;#39;&lt;/span> -a &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>id -u&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;0&amp;#39;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> find . &lt;span style="color:#4e9a06">\!&lt;/span> -user redis -exec chown redis &lt;span style="color:#4e9a06">&amp;#39;{}&amp;#39;&lt;/span> +
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">exec&lt;/span> gosu redis &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000">$0&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000">$@&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">um&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>&lt;span style="color:#204a87">umask&lt;/span>&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000">$um&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;0022&amp;#39;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">umask&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0077&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">exec&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000">$@&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>例如下面执行流程：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ docker run -d -name redis7 -v &lt;span style="color:#000">$PWD&lt;/span>/redis-ctr-data:/data --net host redis:7 --port &lt;span style="color:#0000cf;font-weight:bold">7777&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ docker top redis7
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>UID PID PPID C STIME TTY TIME CMD
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>systemd+ &lt;span style="color:#0000cf;font-weight:bold">1041135&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1041116&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 15:47 ? 00:00:00 redis-server *:7777
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ docker &lt;span style="color:#204a87">exec&lt;/span> redis7 id redis
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">uid&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>999&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>redis&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#000">gid&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>999&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>redis&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#000">groups&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>999&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>redis&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ grep &lt;span style="color:#0000cf;font-weight:bold">999&lt;/span> /etc/passwd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>systemd-coredump:x:999:999:systemd Core Dumper:/:/usr/sbin/nologin
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>docker top 显示的用户，是按照宿主机上 uid 显示的，&lt;a href="https://github.com/tianon/gosu">gosu&lt;/a> 是 golang 实现 &lt;a href="https://github.com/ncopa/su-exec">su-exec&lt;/a>，切换指定用户执行命令，exec 是执行后面的命令，替换当前的 shell 进程，这样在 docker stop 给容器内 pid 为 1 的进程发送信号，业务进程能收到信号进行优雅退出，而没 exec 的话，pid 为 1 的进程是 shell 脚本，它不会转发信号的。&lt;/p>
&lt;p>&lt;code>ENTRYPOINT&lt;/code> 使用脚本当作入口的形式，最后业务切用户执行，即使使用 docker exec 还是使用镜像默认的 USER root，排查问题也方便。 也推荐使用镜像之前，先看官方的启动脚本，例如 mongodb 官方镜像是支持类似 redis 这种非 root 启动的，但是我们 k8s 里是：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - name: {{ NODE_NAME }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> image: xxx/mongo:xxx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> command:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - mongod
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &amp;#34;--port&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样覆盖了 entrypoint，没有使用官方启动脚本执行，就是 root 用户，改为下面的不覆盖就行：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span style="display:flex;">&lt;span>- name: {{ NODE_NAME }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> image: xxx/mongo:xxx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> args: # &amp;lt;--- 这里
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - mongod
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &amp;#34;--port&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>要注意一个点，su-exec 在 alpine 里可以包管理安装，非 alpine 的基础镜像使用 gosu 可以参考 redis 官方镜像，以及 su-exec 不是静态编译的，可能某些系统上有问题，自行测试下看看&lt;/p>
&lt;h3 id="案例实战-案例实战案例实战案例实战">&lt;a href="#%E6%A1%88%E4%BE%8B%E5%AE%9E%E6%88%98" title="案例实战">&lt;/a>案例实战&lt;a href="#%E6%A1%88%E4%BE%8B%E5%AE%9E%E6%88%98">&lt;/a>&lt;a class="td-heading-self-link" href="#%e6%a1%88%e4%be%8b%e5%ae%9e%e6%88%98-%e6%a1%88%e4%be%8b%e5%ae%9e%e6%88%98%e6%a1%88%e4%be%8b%e5%ae%9e%e6%88%98%e6%a1%88%e4%be%8b%e5%ae%9e%e6%88%98" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>这列梳理一些我做的案例。先说一些知识点：&lt;/p>
&lt;ul>
&lt;li>产生 pid 和 sock 文件的，可以放 /tmp 下&lt;/li>
&lt;li>业务进程非 root 对 &lt;code>/dev/stdxxx&lt;/code> 没权限的，可以脚本里 &lt;code>chmod a+w /dev/std*&lt;/code>&lt;/li>
&lt;li>如果自己业务镜像产生的数据会被其他容器挂载操作数据，你的业务进程最好创建用户的时候使用固定同样的 &lt;code>uid:gid&lt;/code> ，例如我们的 mysql-backup 备份 mysql 数据用到的用户 &lt;code>uid:gid&lt;/code> 保持和 mysql 官方镜像一致，这样不需要修改 mysql 数据目录权限和 owner&lt;/li>
&lt;li>不要 &lt;code>chmod -R 777&lt;/code> 目录&lt;/li>
&lt;/ul>
&lt;h4 id="机器码处理-机器码处理机器码处理机器码处理">&lt;a href="#%E6%9C%BA%E5%99%A8%E7%A0%81%E5%A4%84%E7%90%86" title="机器码处理">&lt;/a>机器码处理&lt;a href="#%E6%9C%BA%E5%99%A8%E7%A0%81%E5%A4%84%E7%90%86">&lt;/a>&lt;a class="td-heading-self-link" href="#%e6%9c%ba%e5%99%a8%e7%a0%81%e5%a4%84%e7%90%86-%e6%9c%ba%e5%99%a8%e7%a0%81%e5%a4%84%e7%90%86%e6%9c%ba%e5%99%a8%e7%a0%81%e5%a4%84%e7%90%86%e6%9c%ba%e5%99%a8%e7%a0%81%e5%a4%84%e7%90%86" aria-label="Heading self-link">&lt;/a>&lt;/h4>
&lt;p>获取机器码一般是使用 &lt;code>dmidecode -s system-uuid&lt;/code> ，但是容器内你以 root 执行会报错：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span style="display:flex;">&lt;span>$ docker run --rm -ti debian:11
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ apt update &amp;amp;&amp;amp; apt-get install -y dmidecode
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ dmidecode -s system-uuid
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/dev/mem: No such file or directory
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>所以之前我们都是读取 &lt;code>/sys/devices/virtual/dmi/id/product_uuid&lt;/code>，但是非 root 后无法读取，因为该文件权限为 &lt;code>0400&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span style="display:flex;">&lt;span>$ ls -l /sys/devices/virtual/dmi/id/product_uuid
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-r-------- 1 root root 4096 Nov 3 08:48 /sys/devices/virtual/dmi/id/product_uuid
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>且该文件是&lt;a href="https://github.com/torvalds/linux/blob/master/drivers/firmware/dmi-id.c#L61">内核设置的权限&lt;/a>，无法被更改。&lt;/p>
&lt;p>后面尝试发现一些信息:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span style="display:flex;">&lt;span>$ strace dmidecode -s system-uuid
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>openat(AT_FDCWD, &amp;#34;/sys/firmware/dmi/tables/smbios_entry_point&amp;#34;, O_RDONLY)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>openat(AT_FDCWD, &amp;#34;/sys/firmware/dmi/tables/DMI&amp;#34;, O_RDONLY)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>发现读取了这俩文件，搜索资料发现是 dmi table，例如 root 下可以这样获取机器码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span style="display:flex;">&lt;span>$ dmidecode -t 1 &amp;lt; /sys/firmware/dmi/tables/DMI
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ dmidecode -t 1 -u &amp;lt; /sys/firmware/dmi/tables/DMI
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>该文件内容按照 DMI 规范字节结构解析可以得到不少信息。然后找到了一个 go 库，在 linux 上尝试成功：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-golang" data-lang="golang">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">package&lt;/span> &lt;span style="color:#000">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;log&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;github.com/digitalocean/go-smbios/smbios&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">main&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">rc&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">ep&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">smbios&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Stream&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">log&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Fatalf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;failed to open stream: %v&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">defer&lt;/span> &lt;span style="color:#000">rc&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Close&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">d&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">smbios&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">NewDecoder&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">rc&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">ss&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">d&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Decode&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">log&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Fatalf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;failed to decode structures: %v&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">major&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">minor&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">_&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">ep&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Version&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">_&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">s&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">range&lt;/span> &lt;span style="color:#000">ss&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">s&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Header&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Type&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">d&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">s&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Formatted&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">major&lt;/span> &lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0x02&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">||&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">major&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0x02&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#000">minor&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0x06&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">fmt&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Printf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;UUID: %02X%02X%02X%02X-%02X%02X-%02X%02X-%02X%02X-%02X%02X%02X%02X%02X%02X\n&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">d&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">7&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000">d&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">6&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000">d&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">5&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000">d&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">d&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">9&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000">d&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">8&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000">d&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">11&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000">d&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000">d&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">12&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000">d&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">13&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">d&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">14&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000">d&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">15&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000">d&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">16&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000">d&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">17&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000">d&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">18&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000">d&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">19&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#204a87;font-weight:bold">else&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">fmt&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Printf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;UUID: %02X%02X%02X%02X-%02X%02X-%02X%02X-%02X%02X-%02X%02X%02X%02X%02X%02X\n&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">d&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000">d&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">5&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000">d&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">6&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000">d&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">7&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">d&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">8&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000">d&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">9&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000">d&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000">d&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">11&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000">d&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">12&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000">d&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">13&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">d&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">14&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000">d&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">15&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000">d&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">16&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000">d&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">17&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000">d&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">18&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000">d&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">19&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>机器上测试：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ dmidecode -s system-uuid &lt;span style="color:#000;font-weight:bold">|&lt;/span> tr a-z A-Z
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>66C0F667-71A0-xxxx-xxxx-4AC0A21F5428
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ go build -o /tmp/uuid-go test.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ chmod a+r /sys/firmware/dmi/tables/DMI
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ su - guanzhang
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>guanzhang@guan:~$ /tmp/uuid-go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>UUID: 66C0F667-71A0-xxxx-xxxx-4AC0A21F5428
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后把宿主机的 &lt;code>/sys/firmware/dmi/tables&lt;/code> 挂载到 &lt;code>/rootfs/sys/firmware/dmi/tables&lt;/code> 里，在 gosu 之前 &lt;code>chmod a+r /rootfs/sys/firmware/dmi/tables/DMI&lt;/code>，业务使用上面的库 hack 后，从指定路径的 DMI 信息即可获取到机器码。&lt;/p>
&lt;h4 id="etcd-etcdetcdetcd">&lt;a href="#etcd" title="etcd">&lt;/a>etcd&lt;a href="#etcd">&lt;/a>&lt;a class="td-heading-self-link" href="#etcd-etcdetcdetcd" aria-label="Heading self-link">&lt;/a>&lt;/h4>
&lt;p>没啥说的，加了 gosu 后再加启动脚本：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">set&lt;/span> -e
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">1&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#000">0&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#000">1&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;-&amp;#39;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">set&lt;/span> -- etcd &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000">$@&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000">$1&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;etcd&amp;#39;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">||&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000">$1&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;/usr/local/bin/etcd&amp;#39;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>id -u&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;0&amp;#39;&lt;/span> -a -n &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000">$RUN_USER&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> find /var/lib/etcd &lt;span style="color:#4e9a06">\!&lt;/span> -user &lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">RUN_USER&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span> -exec chown &lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">RUN_USER&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;{}&amp;#39;&lt;/span> +
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">exec&lt;/span> gosu &lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">RUN_USER&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000">$@&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">exec&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000">$@&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>为了不影响其他分支，这里我用了 env 作为开关，&lt;a href="https://github.com/wurstmeister/kafka-docker">wurstmeister/kafka-docker&lt;/a> 也是一样：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">set&lt;/span> -e
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">1&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#000">0&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#000">1&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;-&amp;#39;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">set&lt;/span> -- start-kafka.sh &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000">$@&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000">$1&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;start-kafka.sh&amp;#39;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">||&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000">$1&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;/usr/bin/start-kafka.sh&amp;#39;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>id -u&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;0&amp;#39;&lt;/span> -a -n &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000">$RUN_USER&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> find &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>readlink -f &lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">KAFKA_HOME&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#204a87;font-weight:bold">)&lt;/span> &lt;span style="color:#4e9a06">\!&lt;/span> -user &lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">RUN_USER&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span> -exec chown &lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">RUN_USER&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;{}&amp;#39;&lt;/span> +
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> find /kafka &lt;span style="color:#4e9a06">\!&lt;/span> -user &lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">RUN_USER&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span> -exec chown &lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">RUN_USER&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;{}&amp;#39;&lt;/span> +
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">exec&lt;/span> gosu &lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">RUN_USER&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000">$@&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">exec&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000">$@&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其他的很多都是类似这样，不再举例，自行制作&lt;/p>
&lt;h4 id="coredns-corednscorednscoredns">&lt;a href="#coredns" title="coredns">&lt;/a>coredns&lt;a href="#coredns">&lt;/a>&lt;a class="td-heading-self-link" href="#coredns-corednscorednscoredns" aria-label="Heading self-link">&lt;/a>&lt;/h4>
&lt;p>coredns 1.11.0 才开始非 root 启动，我们业务使用的是 1.10.1 的，不升级避免客户现场出现问题，所以重做镜像最稳妥：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">ARG&lt;/span> &lt;span style="color:#000">DEBIAN_IMAGE&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>debian:stable-slim&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">ARG&lt;/span> &lt;span style="color:#000">BASE&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>gcr.io/distroless/static-debian12:nonroot&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">FROM&lt;/span>&lt;span style="color:#4e9a06"> coredns/coredns:1.10.1 as bin&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">FROM&lt;/span>&lt;span style="color:#4e9a06"> ${DEBIAN_IMAGE} AS build&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">SHELL&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;/bin/sh&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;-ec&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">RUN&lt;/span> &lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">DEBCONF_NONINTERACTIVE_SEEN&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87">true&lt;/span> &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> &lt;span style="color:#000">DEBIAN_FRONTEND&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>noninteractive &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> &lt;span style="color:#000">DEBIAN_PRIORITY&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>critical &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> &lt;span style="color:#000">TERM&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>linux &lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> apt-get -qq update &lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> apt-get -yyqq upgrade &lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> apt-get -yyqq install ca-certificates libcap2-bin&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> apt-get clean&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">COPY&lt;/span> --from&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>bin /coredns /coredns&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">RUN&lt;/span> setcap &lt;span style="color:#000">cap_net_bind_service&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>+ep /coredns&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">FROM&lt;/span>&lt;span style="color:#4e9a06"> ${BASE}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">COPY&lt;/span> --from&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>build /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">COPY&lt;/span> --from&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>build /coredns /coredns&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">USER&lt;/span>&lt;span style="color:#4e9a06"> nonroot:nonroot&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">EXPOSE&lt;/span>&lt;span style="color:#4e9a06"> 53 53/udp&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">ENTRYPOINT&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;/coredns&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>非 root 用户是无法监听 1024 以下端口的，coredns 监听 53 端口是因为使用了 &lt;code>setcap cap_net_bind_service=+ep /coredns&lt;/code>，但是这个属性属于扩展属性，docker 构建多层 COPY 会不支持而丢失，必须使用 buildkit 构建，否则 cap 信息丢失，部署上去无法监听 53 端口：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span style="display:flex;">&lt;span>DOCKER_BUILDKIT=1 docker build --platform=amd64 . -t coredns/coredns:1.10.1 --load
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="consul-consulconsulconsul">&lt;a href="#consul" title="consul">&lt;/a>consul&lt;a href="#consul">&lt;/a>&lt;a class="td-heading-self-link" href="#consul-consulconsulconsul" aria-label="Heading self-link">&lt;/a>&lt;/h4>
&lt;p>consul 镜像也支持，但是 chown 的时候没带 -R 选项。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span style="display:flex;">&lt;span>if [ &amp;#34;$(stat -c %u &amp;#34;$CONSUL_DATA_DIR&amp;#34;)&amp;#34; != &amp;#34;${CONSUL_UID}&amp;#34; ]; then
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> chown ${CONSUL_UID}:${CONSUL_GID} &amp;#34;$CONSUL_DATA_DIR&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fi
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里会存在一个问题，如果之前是覆盖了 entrypoint 使用 root 启动的，再切正确姿势下，因为 data 目录下子目录没被 chown，consul 在 data 下子目录写入 node-id 会报错没权限，所以我是这样 hack 重做镜像的：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">ARG&lt;/span> &lt;span style="color:#000">VER&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>.8.3&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">FROM&lt;/span>&lt;span style="color:#4e9a06"> consul:${VER}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">RUN&lt;/span> sed -ri -e &lt;span style="color:#4e9a06">&amp;#39;s/(chown)(\s+consul:)/\1 -R\2/&amp;#39;&lt;/span> &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> -e &lt;span style="color:#4e9a06">&amp;#39;1s@/usr/bin/dumb-init\s+@@&amp;#39;&lt;/span> &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> /usr/local/bin/docker-entrypoint.sh&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>去掉 &lt;code>dumb-init&lt;/code> 是因为客户要求容器内所有进程都是非 root，不去掉 pid 为 1 的就是 root 用户 dumb-init sh 进程&lt;/p>
&lt;h4 id="docker-sock-文件-dockersock-文件dockersock-文件docker-sock-文件">&lt;a href="#docker-sock-%E6%96%87%E4%BB%B6" title="docker.sock 文件">&lt;/a>docker.sock 文件&lt;a href="#docker-sock-%E6%96%87%E4%BB%B6">&lt;/a>&lt;a class="td-heading-self-link" href="#docker-sock-%e6%96%87%e4%bb%b6-dockersock-%e6%96%87%e4%bb%b6dockersock-%e6%96%87%e4%bb%b6docker-sock-%e6%96%87%e4%bb%b6" aria-label="Heading self-link">&lt;/a>&lt;/h4>
&lt;p>有些进程是需要挂载 &lt;code>/var/run&lt;/code> 为了使用宿主机的 &lt;code>/var/run/docker.sock&lt;/code> 和宿主机 docker 通信的，这里我们使用 cadvisor 举例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">ARG&lt;/span> &lt;span style="color:#000">VER&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>v0.37.5&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">FROM&lt;/span>&lt;span style="color:#4e9a06"> gcr.m.daocloud.io/cadvisor/cadvisor:${VER}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">ARG&lt;/span> &lt;span style="color:#000">GO_SU&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>.17&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">RUN&lt;/span> &lt;span style="color:#204a87">set&lt;/span> -eux&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> sed -i &lt;span style="color:#4e9a06">&amp;#39;s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g&amp;#39;&lt;/span> /etc/apk/repositories&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> apk update&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> apk add --no-cache &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> curl &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> curl -o /usr/local/bin/gosu -sSL https://github.com/tianon/gosu/releases/download/&lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">GO_SU&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>/gosu-amd64&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> chmod a+x /usr/local/bin/gosu&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> gosu --version&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> rm -rf /var/cache/apk/* /tmp/* &lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">COPY&lt;/span> docker-entrypoint.sh /&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">ENTRYPOINT&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;/docker-entrypoint.sh&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">CMD&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;cadvisor&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;-logtostderr&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#!/bin/sh
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87">set&lt;/span> -e
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">1&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#000">0&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#000">1&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;-&amp;#39;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">set&lt;/span> -- cadvisor &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000">$@&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000">$1&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;cadvisor&amp;#39;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">||&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000">$1&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;/usr/bin/cadvisor&amp;#39;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>id -u&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;0&amp;#39;&lt;/span> -a -n &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000">$RUN_USER&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> -S /var/run/docker.sock &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">group_id&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">`&lt;/span>stat -c &lt;span style="color:#4e9a06">&amp;#34;%g&amp;#34;&lt;/span> /var/run/docker.sock&lt;span style="color:#4e9a06">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> ! getent group &lt;span style="color:#000;font-weight:bold">|&lt;/span> cut -d: -f3 &lt;span style="color:#000;font-weight:bold">|&lt;/span> grep -wq &lt;span style="color:#000">$group_id&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> ! addgroup -g &lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">group_id&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span> docker&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">group_failed&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> -z &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000">$group_failed&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">group_name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>stat -c &lt;span style="color:#4e9a06">&amp;#34;%G&amp;#34;&lt;/span> /var/run/docker.sock&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> ! id -nG &lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">RUN_USER&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> grep -w &lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">group_name&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> adduser &lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">RUN_USER&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span> &lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">group_name&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> setfacl -m u:&lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">RUN_USER&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>:rw /var/run/docker.sock
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">exec&lt;/span> gosu &lt;span style="color:#000">$RUN_USER&lt;/span> &lt;span style="color:#000">$@&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">exec&lt;/span> &lt;span style="color:#000">$@&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>cadvisor 挂载了宿主机的 rootfs ，改为纯非 root 不行，但是 cadvisor 镜像内有个 &lt;code>operator&lt;/code> 用户的 gid 是 0，利用启动脚本和 docker 权限来改造成非 root 启动。&lt;/li>
&lt;li>docker.sock 权限是 &lt;code>0660&lt;/code>，利用 shell 把 operator 用户加到 docker 组里即可（必须取 gid）。这里要注意的是，不同版本 alpine 和其他 rootfs 的 adduser/addgroup 参数不一样，自行注意 shell 兼容&lt;/li>
&lt;/ul>
&lt;p>设置 “RUN_USER” 为 &lt;code>operator&lt;/code> ，然后设置宿主机的 docker 的 data-root 下面权限（可以使用 systemd 的&lt;code>ExecStartPost=&lt;/code>）：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span style="display:flex;">&lt;span>/var/lib/docker/image：750 ok
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/var/lib/docker/image/overlay2：750 ok
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/var/lib/docker/image/overlay2/layerdb：750 ok
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>cadvisor 参数为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">...&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">args&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- -&lt;span style="color:#000">docker_only=true&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- -&lt;span style="color:#000">housekeeping_interval=20s&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- -&lt;span style="color:#000">disable_metrics=accelerator,cpu_topology,tcp,udp,percpu,sched,process,hugetlb,referenced_memory,resctrl&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>promtail 官方在 &lt;a href="https://github.com/grafana/loki/issues/1813#issuecomment-694969497">Promtail should run as non-root in docker&lt;/a> 推荐在 k8s 里设置安全上下文，有少部分老哥指定的 gid 为 0 可以运行，但是还是很多人有权限问题，所以应该也要像上面这样，用 gid 为 0 和配合脚本设置权限。&lt;/p>
&lt;h4 id="cron-croncroncron">&lt;a href="#cron" title="cron">&lt;/a>cron&lt;a href="#cron">&lt;/a>&lt;a class="td-heading-self-link" href="#cron-croncroncron" aria-label="Heading self-link">&lt;/a>&lt;/h4>
&lt;p>非 root 无法使用 cron 启动，使用 &lt;a href="https://github.com/webdevops/go-crond">go-crond&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span style="display:flex;">&lt;span>exec gosu user1 go-crond --default-user=user1 --include=/etc/cron.d --allow-unprivileged
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="参考">参考&lt;a class="td-heading-self-link" href="#%e5%8f%82%e8%80%83" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://github.com/kubernetes/enhancements/issues/127">k8s 社区关于支持 user namespace 提议&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.dmtf.org/sites/default/files/standards/documents/DSP0134_3.3.0.pdf">dmi 信息规范&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/mirror/dmidecode/blob/master/dmidecode.c#L448">dmidecode 源码&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Docs: 容器镜像管理</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E7%AE%A1%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E7%AE%A1%E7%90%86/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考:&lt;/p>
&lt;/blockquote>
&lt;h1 id="镜像加速">镜像加速&lt;a class="td-heading-self-link" href="#%e9%95%9c%e5%83%8f%e5%8a%a0%e9%80%9f" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://gist.github.com/y0ngb1n/7e8f16af3242c7815e7ca2f0833d3ea6">https://gist.github.com/y0ngb1n/7e8f16af3242c7815e7ca2f0833d3ea6&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>由于众所周知的原因，国内从 Docker Hub 拉取镜像会遇到困难，此时可以配置镜像加速器。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://dockerproxy.com">https://dockerproxy.com&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docker.m.daocloud.io">https://docker.m.daocloud.io&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://github.com/DaoCloud/public-image-mirror">https://github.com/DaoCloud/public-image-mirror&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>阿里云: https://&amp;lt;你的ID&amp;gt;.mirror.aliyuncs.com
&lt;ul>
&lt;li>&lt;a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>2024-06-06 后不再可用
&lt;ul>
&lt;li>科大镜像: &lt;a href="https://docker.mirrors.ustc.edu.cn/">https://docker.mirrors.ustc.edu.cn/&lt;/a>&lt;/li>
&lt;li>网易: &lt;a href="https://hub-mirror.c.163.com/">https://hub-mirror.c.163.com/&lt;/a>&lt;/li>
&lt;li>七牛云加速器: &lt;a href="https://reg-mirror.qiniu.com">https://reg-mirror.qiniu.com&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>2024 年 6 月 6 日，中国加大封锁力度，所有镜像源先后下架不再提供服务。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://x.com/whyyoutouzhele/status/1798731317322133642">https://x.com/whyyoutouzhele/status/1798731317322133642&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://linux.do/t/topic/106872">https://linux.do/t/topic/106872&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/pXrxedldKOoD97bMDYy3pQ">https://mp.weixin.qq.com/s/pXrxedldKOoD97bMDYy3pQ&lt;/a>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;a href="https://docker.m.daocloud.io">https://docker.m.daocloud.io&lt;/a> 还能用来 pull 到一部分主流镜像&lt;/p>
&lt;/blockquote>
&lt;p>2024 年 9 月 10 日，可以不通过代理直接从 dockerhub pull 到镜像&lt;/p>
&lt;h2 id="可用镜像站点">可用镜像站点&lt;a class="td-heading-self-link" href="#%e5%8f%af%e7%94%a8%e9%95%9c%e5%83%8f%e7%ab%99%e7%82%b9" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;registry-mirrors&amp;#34;&lt;/span>&lt;span style="color:#a40000">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;https://docker.m.daocloud.io&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;https://dockerhub.icu&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;https://docker.1panel.live&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;https://docker.anyhub.us.kg&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;https://dhub.kubesre.xyz&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#a40000">,&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://github.com/kubesre/docker-registry-mirrors">https://github.com/kubesre/docker-registry-mirrors&lt;/a>&lt;/p>
&lt;h1 id="skopeo">Skopeo&lt;a class="td-heading-self-link" href="#skopeo" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/containers/skopeo">GitHub 项目，containers/skopeo&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.modb.pro/db/251368">https://www.modb.pro/db/251368&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://blog.k8s.li/skopeo.html">https://blog.k8s.li/skopeo.html&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Skopeo 是一个命令行客户端应用程序，可以对容器镜像和镜像存储库执行各种操作。&lt;/p>
&lt;h2 id="syntax语法">Syntax(语法)&lt;a class="td-heading-self-link" href="#syntax%e8%af%ad%e6%b3%95" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>skopeo [FLAGS] COMMAND&lt;/strong>&lt;/p>
&lt;h2 id="list-tags---列出指定镜像的所有-tags">list-tags - 列出指定镜像的所有 Tags&lt;a class="td-heading-self-link" href="#list-tags---%e5%88%97%e5%87%ba%e6%8c%87%e5%ae%9a%e9%95%9c%e5%83%8f%e7%9a%84%e6%89%80%e6%9c%89-tags" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="sync---同步一个或多个镜像从一个位置到另一个位置">sync - 同步一个或多个镜像从一个位置到另一个位置&lt;a class="td-heading-self-link" href="#sync---%e5%90%8c%e6%ad%a5%e4%b8%80%e4%b8%aa%e6%88%96%e5%a4%9a%e4%b8%aa%e9%95%9c%e5%83%8f%e4%bb%8e%e4%b8%80%e4%b8%aa%e4%bd%8d%e7%bd%ae%e5%88%b0%e5%8f%a6%e4%b8%80%e4%b8%aa%e4%bd%8d%e7%bd%ae" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>sync 子命令可以将容器镜像从一个地方拷贝到另一个地方。&lt;/p>
&lt;h3 id="syntax语法-1">Syntax(语法)&lt;a class="td-heading-self-link" href="#syntax%e8%af%ad%e6%b3%95-1" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>&lt;strong>skopeo sync [FLAGS] &amp;ndash;src TRANSPORT &amp;ndash;dest TRANSPORT SOURCE DESTINATION&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>TRANSPORT&lt;/strong> # 传输类型，就是指定获取镜像源和镜像目的方式。可用的类型有如下几种：
&lt;ul>
&lt;li>&lt;strong>docker&lt;/strong> # 从镜像的注册中心获取镜像&lt;/li>
&lt;li>&lt;strong>dir&lt;/strong> # 从本地目录获取镜像&lt;/li>
&lt;li>&lt;strong>yaml&lt;/strong> # 从一个 YAML 格式的文件中获取镜像&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>比如 &lt;code>skopeo sync --src docker --dest dir --scoped docker.io/busybox:1 ~/test_dir/&lt;/code> 就是可以将 &lt;code>docker.io/busybox:1&lt;/code> 镜像的所有数据下载到本地的 &lt;code>~/test_dir/&lt;/code> 目录中。&lt;/p>
&lt;h4 id="flags">FLAGS&lt;a class="td-heading-self-link" href="#flags" aria-label="Heading self-link">&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>-d, &amp;ndash;dest &amp;lt;TRANSPORT&amp;gt;&lt;/strong> # 指定 DESTINATION 的传输类型，可用的值有 docker、dir&lt;/li>
&lt;li>&lt;strong>-s, &amp;ndash;src &amp;lt;TRANSPORT&amp;gt;&lt;/strong> # 指定 SOURCE 的传输类型，可用的值有 docker、dir、yaml&lt;/li>
&lt;/ul>
&lt;h2 id="最佳实践">最佳实践&lt;a class="td-heading-self-link" href="#%e6%9c%80%e4%bd%b3%e5%ae%9e%e8%b7%b5" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>skopeo copy docker://debian:stretch oci:debian:stretch&lt;/li>
&lt;/ul>
&lt;h1 id="image-syncer">image-syncer&lt;a class="td-heading-self-link" href="#image-syncer" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/AliyunContainerService/image-syncer">GitHub 项目，AliyunContainerService/image-syncer&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="好用的镜像">好用的镜像&lt;a class="td-heading-self-link" href="#%e5%a5%bd%e7%94%a8%e7%9a%84%e9%95%9c%e5%83%8f" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;a href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes%20%E7%AE%A1%E7%90%86/%E5%A5%BD%E7%94%A8%E7%9A%84%E9%95%9C%E5%83%8F-%E6%9C%89%E7%89%B9%E6%AE%8A%E5%8A%9F%E8%83%BD.md">好用的镜像-有特殊功能&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/nicolaka/netshoot">https://github.com/nicolaka/netshoot&lt;/a> # Docker + Kubernetes 网络故障排除瑞士军容器&lt;/p></description></item><item><title>Docs: 容器运行时管理</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/%E5%AE%B9%E5%99%A8%E8%BF%90%E8%A1%8C%E6%97%B6%E7%AE%A1%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/%E5%AE%B9%E5%99%A8%E8%BF%90%E8%A1%8C%E6%97%B6%E7%AE%A1%E7%90%86/</guid><description/></item><item><title>Docs: 使用 Tini 清理 Docker 容器僵死进程</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/%E4%BD%BF%E7%94%A8-Tini-%E6%B8%85%E7%90%86-Docker-%E5%AE%B9%E5%99%A8%E5%83%B5%E6%AD%BB%E8%BF%9B%E7%A8%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/%E4%BD%BF%E7%94%A8-Tini-%E6%B8%85%E7%90%86-Docker-%E5%AE%B9%E5%99%A8%E5%83%B5%E6%AD%BB%E8%BF%9B%E7%A8%8B/</guid><description>
&lt;p>&lt;a href="https://mp.weixin.qq.com/s/Ktd56YQsU8pP6kUs3_uU4Q">使用 Tini 清理 Docker 容器僵死进程&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>最近在 Tini 的仓库下看到作者对 Tini 优势的精彩回复，搬运过来，粗糙翻译，献给拥有同样疑惑的你。&lt;/p>
&lt;/blockquote>
&lt;h2 id="写在前面">写在前面&lt;a class="td-heading-self-link" href="#%e5%86%99%e5%9c%a8%e5%89%8d%e9%9d%a2" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>我们在查看一些大项目的 Dockerfile 时经常发现，它们的 ENTRYPOINT 中往往都有 tini 的身影：&lt;/p>
&lt;p>Rancher 官方镜像&lt;/p>
&lt;p>Jenkins 官方镜像&lt;/p>
&lt;p>那 Tini 到底是什么？为什么大家都喜欢在镜像中使用它呢？&lt;/p>
&lt;h2 id="开发者的疑问">开发者的疑问&lt;a class="td-heading-self-link" href="#%e5%bc%80%e5%8f%91%e8%80%85%e7%9a%84%e7%96%91%e9%97%ae" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>我注意到 Jenkins 的官方镜像中使用了 Tini，所以我很好奇它是什么。它看起来一定很有用，可能解决了一些我不知道的问题。你能用 “说人话” 的方式简单解释一下 Tini 相对于直接以 CMD 运行 shell 脚本的优势吗？&lt;/p>
&lt;p>我的几个容器的 ENTRYPOINT 都设置了一个 docker-entrypoint.sh 脚本，里面基本上都是以 “exec &amp;ldquo;$@&amp;quot;” 的方式在运行，我应该使用 Tini 来代替吗？&lt;/p>
&lt;h2 id="来自作者的回复">来自作者的回复&lt;a class="td-heading-self-link" href="#%e6%9d%a5%e8%87%aa%e4%bd%9c%e8%80%85%e7%9a%84%e5%9b%9e%e5%a4%8d" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>问得好！但这解释可能有点长，所以请耐心听我说（我知道你要求简短，但我真的做不到，捂脸~）。&lt;/p>
&lt;p>首先，我们先简单聊聊 Jenkins。当您运行 Docker 容器时，Docker 会将它与系统的其他部分隔离开来。这种隔离发生在不同的级别（例如网络、文件系统、进程）。&lt;/p>
&lt;p>但 Tini 并不真正关注网络或文件系统，所以让我们把注意力放在 Tini 的一个重要概念上：进程。&lt;/p>
&lt;p>每个 Docker 容器都是一个 PID 命名空间，这意味着容器中的进程与主机上的其他进程是隔离的。PID 命名空间是一棵树，从 PID 1 开始，通常称为 init。&lt;/p>
&lt;p>注意：当你运行一个 Docker 容器时，镜像的 ENTRYPOINT 就是你的根进程，即 PID 1（如果你没有 ENTRYPOINT，那么 CMD 就会作为根进程，你可能配置了一个 shell 脚本，或其他的可执行程序，容器的根进程具体是什么，完全取决于你的配置）。&lt;/p>
&lt;p>与其他进程不同的是，PID 1 有一个独特的职责，那就是收割 “僵尸进程”。&lt;/p>
&lt;p>那何为 “僵尸进程” 呢？&lt;/p>
&lt;p>“僵尸进程” 是指：&lt;/p>
&lt;ul>
&lt;li>已经退出。&lt;/li>
&lt;li>没有被其父进程 wait（wait 是指 syscall 父进程用于检索其子进程的退出代码）。&lt;/li>
&lt;li>父进程已丢失（也就是说，它们的父进程已经不存在了)，这意味着他们永远不会被其父进程处理。&lt;/li>
&lt;/ul>
&lt;p>当 “僵尸进程” 被创建时（也就是说，一旦它的父进程非正常退出了，它也就跟着无法正常退出了），它会继承成为 PID 1 的子级，最后 PID 1 会负责关闭它。&lt;/p>
&lt;p>换句话说，有人必须在 “不负责任” 的父进程离开后，对这些 “孤儿” 进行清理，这是 PID 1 的作用。&lt;/p>
&lt;p>请注意，创建 “僵尸进程” 通常是不被允许的（也就是说，理想情况下，您应该修复代码，这样就不会创建“僵尸进程”），但是对于像 Jenkins 这种应用来说，它们是不可避免的：因为 Jenkins 通常运行的代码不是由 Jenkins 维护者编写的（也就是您的 Jenkins 构建脚本），所以他们也无法“修复代码”。&lt;/p>
&lt;p>这就是 Jenkins 使用 Tini 的原因：在构建了创建 “僵尸进程” 的脚本后进行清理。&lt;/p>
&lt;hr>
&lt;p>但其实 Bash 实际上也做同样的事情（收割 “僵尸进程”），所以你可能会想：为什么不把 Bash 当作 PID 1 呢？&lt;/p>
&lt;p>第一个问题是，如果您将 Bash 作为 PID 1 运行，那么您发送到 Docker 容器的所有信号（例如，使用 docker stop 或 docker kill）最终都会发送到 Bash，Bash 默认不会将它们转发到任何地方（除非您自己编写代码实现）。换句话说，如果你使用 Bash 来运行 Jenkins，那么当你运行 docker stop 的时候，Jenkins 将永远收不到停止信号！&lt;/p>
&lt;p>而 Tini 通过 “信号转发” 解决了这个问题：如果你向 Tini 发送信号，那么它也会向你的子进程发送同样的信号（在你的例子中是 Jenkins）。&lt;/p>
&lt;p>第二个问题是，一旦您的进程退出，Bash 也会继续退出。如果您不小心，Bash 可能会退出，退出代码为 0，而您的进程实际上崩溃了（但 0 表示 “一切正常”；这将导致 Docker 重启策略不符合您的预期）。因为您真正想要的可能是 Bash 返回与您的进程相同的退出代码。&lt;/p>
&lt;p>请注意，您可以通过在 Bash 中创建信号处理程序来实际执行转发，并返回适当的退出代码来解决这个问题。另一方面，这需要做更多的工作，而添加 Tini 只是文档中的几行。&lt;/p>
&lt;hr>
&lt;p>其实还有另一个解决方案可以将 Jenkins 作为 PID 1 运行，即在 Jenkins 中添加另一个线程来负责收割 “僵尸进程”。&lt;/p>
&lt;p>但这也不理想，原因有二：&lt;/p>
&lt;p>首先，如果将 Jenkins 以 PID 1 的身份运行，那么很难区分继承给 Jenkins 的进程（应该被收割）和 Jenkins 自己产生的进程（不应该被收割，因为还有其他代码已经在等待它们执行）。我相信你可以用代码来解决这个问题，但还是要问一遍：当你可以把 Tini 放进去的时候，为什么还要写呢？&lt;/p>
&lt;p>其次，如果 Jenkins 以 PID 1 运行，那么它可能不会接收到您发送的信号！&lt;/p>
&lt;p>这是 PID 1 进程中的微妙之处。与其他进程不同的是，PID 1 没有默认的信号处理程序，这意味着如果 Jenkins 没有明确地为 SIGTERM 安装信号处理程序，那么该信号在发送时将被丢弃（而默认行为是终止该过程）。&lt;/p>
&lt;p>Tini 确实安装了显式信号处理程序（顺便说一下，是为了转发信号），所以这些信号不再被丢弃。相反，它们被发送到 Jenkins，Jenkins 并不像 PID 1（Tini ）那样运行，因此有默认的信号处理程序（注意：这不是 Jenkins 使用 Tini 的原因，Jenkins 使用它来获取信号，但在 RabbitMQ 的镜像中是这个作用）。&lt;/p>
&lt;hr>
&lt;p>请注意，Tini 中还有一些额外的功能，在 Bash 或 Java 中很难实现（例如，Tini 可以注册为 “子收割者”，因此它实际上不需要作为 PID 1 运行来完成“僵尸进程” 收割工作），但是这些功能对于一些高级应用场景来说非常有用。&lt;/p>
&lt;p>希望以上内容对你有所帮助！&lt;/p>
&lt;p>如果您有兴趣了解更多，以下是一些可供参考的资料：&lt;/p>
&lt;ul>
&lt;li>僵尸进程详解：&lt;a href="https://blog.phusion.nl/2015/01/20/docker-and-the-pid-1-zombie-reaping-problem/">https://blog.phusion.nl/2015/01/20/docker-and-the-pid-1-zombie-reaping-problem/&lt;/a>&lt;/li>
&lt;li>更简洁的解释：&lt;a href="https://github.com/docker-library/official-images#init">https://github.com/docker-library/official-images#init&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>最后，请注意 Tini 还有更多的选择（比如 Phusion 的基础镜像）。&lt;/p>
&lt;p>Tini 的主要特性是：&lt;/p>
&lt;ul>
&lt;li>做 PID 1 需要做的一切，而不做其他任何事情。像读取环境文件、改变用户、过程监控等事情不在 Tini 的范围内（还有其他更好的工具）；&lt;/li>
&lt;li>零配置就能上手（如果运行不正常，Tini &amp;gt;= 0.6 也会警告您）；&lt;/li>
&lt;li>它有丰富的测试。&lt;/li>
&lt;/ul>
&lt;h2 id="原文链接">原文链接&lt;a class="td-heading-self-link" href="#%e5%8e%9f%e6%96%87%e9%93%be%e6%8e%a5" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>&lt;code>What is advantage of Tini?&lt;/code>：&lt;a href="https://github.com/krallin/tini/issues/8#issuecomment-146135930">https://github.com/krallin/tini/issues/8#issuecomment-146135930&lt;/a>&lt;/li>
&lt;li>&lt;code>译文来源&lt;/code>：&lt;a href="https://zhuanlan.zhihu.com/p/59796137">https://zhuanlan.zhihu.com/p/59796137&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="docker-容器中进程管理工具">Docker 容器中进程管理工具&lt;a class="td-heading-self-link" href="#docker-%e5%ae%b9%e5%99%a8%e4%b8%ad%e8%bf%9b%e7%a8%8b%e7%ae%a1%e7%90%86%e5%b7%a5%e5%85%b7" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>为了防止容器中直接使用 ENTRYPOINT 或 CMD 指令启动命令或应用程序产生 PID 为 1 的进程无法处理传递信号给子进程或者无法接管孤儿进程，进而导致产生大量的僵尸进程。对于没有能力处理以上两个进程问题的 PID 进程，建议使用 dumb-int 或 tini 这种第三方工具来充当 1 号进程。&lt;/p>
&lt;p>Linux 系统中，PID 为 1 的进程需要担任两个重要的使命：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>传递信号给子进程&lt;/strong>
如果 pid 为 1 的进程，无法向其子进程传递信号，可能导致容器发送 SIGTERM 信号之后，父进程等待子进程退出。此时，如果父进程不能将信号传递到子进程，则整个容器就将无法正常退出，除非向父进程发送 SIGKILL 信号，使其强行退出，这就会导致一些退出前的操作无法正常执行，例如关闭数据库连接、关闭输入输出流等。&lt;/li>
&lt;li>&lt;strong>接管孤儿进程，防止出现僵尸进程&lt;/strong>
如果一个进程中 A 运行了一个子进程 B，而这个子进程 B 又创建了一个子进程 C，若子进程 B 非正常退出（通过 SIGKILL 信号，并不会传递 SIGKILL 信号给进程 C），那么子进程 C 就会由进程 A 接管，一般情况下，我们在进程 A 中并不会处理对进程 C 的托管操作（进程 A 不会传递 SIGTERM 和 SIGKILL 信号给进程 C），结果就导致了进程 B 结束了，倒是并没有回收其子进程 C，子进程 C 就变成了僵尸进程。&lt;/li>
&lt;/ol>
&lt;p>在 docker 中，&lt;code>docker stop&lt;/code>命令会发送&lt;code>SIGTERM&lt;/code>信号给容器的主进程来处理。如果主进程没有处理这个信号，docker 会在等待一段优雅 grace 的时间后，发送&lt;code>SIGKILL&lt;/code>信号来强制终止&lt;/p>
&lt;p>&lt;img src="https://notes-learning.oss-cn-beijing.aliyuncs.com/635f36ef-00c6-4161-bed8-02cbbf17e561/images" alt="">&lt;/p>
&lt;p>详情参考：&lt;/p>
&lt;p>1、&lt;a href="https://blog.phusion.nl/2015/01/20/docker-and-the-pid-1-zombie-reaping-problem/">https://blog.phusion.nl/2015/01/20/docker-and-the-pid-1-zombie-reaping-problem/&lt;/a>&lt;/p>
&lt;p>2、&lt;a href="https://medium.com/@gchudnov/trapping-signals-in-docker-containers-7a57fdda7d86">https://medium.com/@gchudnov/trapping-signals-in-docker-containers-7a57fdda7d86&lt;/a>&lt;/p>
&lt;p>Github：&lt;a href="https://github.com/Yelp/dumb-init">https://github.com/Yelp/dumb-init&lt;/a>&lt;/p>
&lt;p>dumb-int 是一个用 C 写的轻量级进程管理工具。类似于一个初始化系统，&lt;/p>
&lt;p>它充当 PID 1，并立即以子进程的形式允许您的命令，注意在接收到信号时正确处理和转发它们&lt;/p>
&lt;p>dumb-init 解决上述两个问题：向子进程代理发送信号和接管子进程。&lt;/p>
&lt;p>默认情况下，dumb-init 会向子进程的进程组发送其收到的信号。原因也很简单，前面已经提到过，像 bash 这样的应用，自己接收到信号之后，不会向子进程发送信号。当然，dumb-init 也可以通过设置环境变量&lt;code>DUMB_INIT_SETSID=0&lt;/code>来控制只向它的直接子进程发送信号。&lt;/p>
&lt;p>另外 dumb-init 也会接管失去父进程的进程，确保其能正常退出。&lt;/p>
&lt;h2 id="安装">安装&lt;a class="td-heading-self-link" href="#%e5%ae%89%e8%a3%85" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Alpine 镜像的 APK 可以直接安装
&lt;code>FROM alpine:3.11.5 RUN sed -i &amp;quot;s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g&amp;quot; /etc/apk/repositories \ &amp;amp;&amp;amp; apk add --no-cache dumb-init ENTRYPOINT [&amp;quot;dumb-init&amp;quot;, &amp;quot;--&amp;quot;] CMD [&amp;quot;/usr/local/bin/docker-entrypoint.sh&amp;quot;]&lt;/code>&lt;/li>
&lt;li>二进制安装
&lt;code>RUN version=v1.2.2 &amp;amp;&amp;amp; \ wget -O /usr/local/bin/dumb-init https://github.com/Yelp/dumb-init/releases/download/$version/dumb-init_$version_amd64 &amp;amp;&amp;amp; \ chmod +x /usr/local/bin/dumb-init&lt;/code>&lt;/li>
&lt;li>DEB/RPM 安装
&lt;code>RUN version=v1.2.2 &amp;amp;&amp;amp; \&amp;lt;br /&amp;gt;wget [https://github.com/Yelp/dumb-init/releases/download/](https://github.com/Yelp/dumb-init/releases/download/)&lt;/code>&lt;/li>
&lt;li>pip 安装
&lt;code>pip install dumb-init&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Github：&lt;a href="https://github.com/krallin/tini">https://github.com/krallin/tini&lt;/a>&lt;/p>
&lt;h2 id="安装-1">安装&lt;a class="td-heading-self-link" href="#%e5%ae%89%e8%a3%85-1" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Alpine 镜像的 APK 可以直接安装&lt;/p>
&lt;p>`FROM alpine:3.11.5
RUN sed -i &amp;ldquo;s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g&amp;rdquo; /etc/apk/repositories &amp;lt;br /&amp;gt;&amp;amp;&amp;amp; apk add &amp;ndash;no-cache tini&lt;/p>
&lt;p>ENTRYPOINT [&amp;ldquo;tini&amp;rdquo;, &amp;ldquo;&amp;ndash;&amp;rdquo;]
CMD [&amp;quot;/your/program&amp;rdquo;, &amp;ldquo;-and&amp;rdquo;, &amp;ldquo;-its&amp;rdquo;, &amp;ldquo;arguments&amp;rdquo;]&lt;/p>
&lt;p>`&lt;/p>
&lt;h2 id="1php-fpm-进程的接管">1、php-fpm 进程的接管&lt;a class="td-heading-self-link" href="#1php-fpm-%e8%bf%9b%e7%a8%8b%e7%9a%84%e6%8e%a5%e7%ae%a1" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>针对 php 应用，通常采用&lt;code>nginx+php-fpm&lt;/code>的架构来处理请求。为了保证 php-fpm 进程出现意外故障能够自动恢复，通常使用 supervisor 进程管理工具进行守护。php-fpm 的进程管理类也类似于 nginx，由 master，worker 进程组成。master 进程不处理请求，而是由 worker 进程处理！master 进程只负责管理 worker 进程。&lt;/p>
&lt;p>master 进程负责监听子进程的状态，子进程挂掉之后，会发信号给 master 进程，然后 master 进程重新启一个新的 worker 进程。&lt;/p>
&lt;p>&lt;code>进程号 父进程号 进程 21 10 master 22 21 |----worker1 23 21 |----worker2&lt;/code>&lt;/p>
&lt;p>使用 Supervisor 启动、守护 php-fpm 进程时的进程树&lt;/p>
&lt;p>`进程号 父进程号 进程
10    9       supervisor
21 10 |&amp;mdash;master
22 21 |&amp;mdash;-worker1
23 21 |&amp;mdash;-worker2&lt;/p>
&lt;h1 id="使用-supervisor-启动守护的是-php-fpm-的-master-进程然后-master-进程再根据配置启动对应数量的-worker-进程">使用 supervisor 启动、守护的是 php-fpm 的 master 进程，然后 master 进程再根据配置启动对应数量的 worker 进程。&lt;a class="td-heading-self-link" href="#%e4%bd%bf%e7%94%a8-supervisor-%e5%90%af%e5%8a%a8%e5%ae%88%e6%8a%a4%e7%9a%84%e6%98%af-php-fpm-%e7%9a%84-master-%e8%bf%9b%e7%a8%8b%e7%84%b6%e5%90%8e-master-%e8%bf%9b%e7%a8%8b%e5%86%8d%e6%a0%b9%e6%8d%ae%e9%85%8d%e7%bd%ae%e5%90%af%e5%8a%a8%e5%af%b9%e5%ba%94%e6%95%b0%e9%87%8f%e7%9a%84-worker-%e8%bf%9b%e7%a8%8b" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>`&lt;/p>
&lt;p>当 php-fpm 的 master 进程意外退出后的进程树&lt;/p>
&lt;p>`进程号 父进程号 进程
10    9       supervisor
22 1  worker1
23 1  worker2&lt;/p>
&lt;h1 id="此时-worker-进程成为僵尸进程被-1-号进程接管">此时 worker 进程成为僵尸进程，被 1 号进程接管&lt;a class="td-heading-self-link" href="#%e6%ad%a4%e6%97%b6-worker-%e8%bf%9b%e7%a8%8b%e6%88%90%e4%b8%ba%e5%83%b5%e5%b0%b8%e8%bf%9b%e7%a8%8b%e8%a2%ab-1-%e5%8f%b7%e8%bf%9b%e7%a8%8b%e6%8e%a5%e7%ae%a1" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>`&lt;/p>
&lt;p>此时 supervisor 检测到 php-fpm master 进程不存在就会在重新创建一个新的 php-fpm master 进程。但是会因为原先的 php-fpm worker 没有被杀掉，成为僵尸进程、依旧占用着端口而失败。本以为 php-fpm 会&lt;/p>
&lt;ol>
&lt;li>&lt;a href="https://www.infoq.cn/article/2016/01/dumb-init-Docker">https://www.infoq.cn/article/2016/01/dumb-init-Docker&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://blog.phusion.nl/2015/01/20/docker-and-the-pid-1-zombie-reaping-problem/">https://blog.phusion.nl/2015/01/20/docker-and-the-pid-1-zombie-reaping-problem/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://medium.com/@gchudnov/trapping-signals-in-docker-containers-7a57fdda7d86">https://medium.com/@gchudnov/trapping-signals-in-docker-containers-7a57fdda7d86&lt;/a>&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>原文出处：&lt;a href="https://gitbook.curiouser.top/origin/docker-process-manager.html">https://gitbook.curiouser.top/origin/docker-process-manager.html&lt;/a>&lt;/p>
&lt;/blockquote></description></item><item><title>Docs: 性能优化与故障处理</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B8%8E%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B8%8E%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/</guid><description/></item></channel></rss>