<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>容器管理 on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/</link><description>Recent content in 容器管理 on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/index.xml" rel="self" type="application/rss+xml"/><item><title>观测容器</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/%E8%A7%82%E6%B5%8B%E5%AE%B9%E5%99%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/%E8%A7%82%E6%B5%8B%E5%AE%B9%E5%99%A8/</guid><description>概述 参考：
容器的 Observability 如何实现？
Docker 为什么不内置 cAdvisor？docker stats 命令为什么不设计个接口直接吐出来 OpenMetrics 格式的数据？
cAdvisor 参考：
GitHub 项目，google/cadvisor Prometheus 官方文档，指南 - 使用 cAdvisor 监控 Docker 容器指标 http://www.xuyasong.com/?p=1483 Container Advisor(容器顾问，简称 cAdvisor) 为容器用户提供了对其运行中容器的资源使用情况和性能特征的深入理解。它是一个持续运行的守护进程，负责收集、汇总、处理并导出有关运行容器的信息。具体而言，它会记录每个容器的资源隔离参数、历史资源使用情况、完整历史资源使用直方图以及网络统计信息。这些数据会按容器和整机维度分别导出。
cAdvisor 被集成在 Kubelet 中
暴露的指标 cadvisor_version_info 具有常数“1”值的度量，由内核版本、操作系统版本、docker 版本、cadvisor 版本和 cadvisor 修订版标记。 container_cpu_cfs_periods_total 已用强制周期间隔数。 container_cpu_cfs_throttled_periods_total 节流周期间隔数。 container_cpu_cfs_throttled_seconds_total 容器被限制的总持续时间。 container_cpu_load_average_10s 过去 10 秒内容器 cpu 负载平均值的值。 container_cpu_system_seconds_total 以秒为单位消耗的累积系统 CPU 时间。 container_cpu_usage_seconds_total 以秒为单位消耗的累积 CPU 时间。 container_cpu_user_seconds_total 以秒为单位消耗的累积用户 cpu 时间。 container_file_descriptors 容器的打开文件描述符数。 container_fs_inodes_free 可用索引节点数 container_fs_inodes_total inode 数 container_fs_io_current 当前正在进行的 I/O 数 container_fs_io_time_seconds_total 花费在 I/O 上的累计秒数 container_fs_io_time_weighted_seconds_total 累积加权 I/O 时间（以秒为单位） container_fs_limit_bytes 此文件系统上的容器可以消耗的字节数。 container_fs_read_seconds_total 阅读花费的累计秒数 container_fs_reads_bytes_total 读取的累积字节数 container_fs_reads_merged_total 合并读取的累积计数 container_fs_reads_total 已完成读取的累计计数 container_fs_sector_reads_total 已完成扇区读取的累积计数 container_fs_sector_writes_total 已完成扇区写入的累积计数 container_fs_usage_bytes 此文件系统上的容器消耗的字节数。 container_fs_write_seconds_total 写入花费的累计秒数 container_fs_writes_bytes_total 写入字节的累积计数 container_fs_writes_merged_total 合并写入的累积计数 container_fs_writes_total 已完成写入的累积计数 container_last_seen 上次导出器看到容器的时间 container_memory_cache 页缓存内存的字节数。 container_memory_failcnt 内存使用次数达到限制 container_memory_failures_total 内存分配失败的累积计数。 container_memory_mapped_file 内存映射文件的大小（以字节为单位）。 container_memory_max_usage_bytes 以字节为单位记录的最大内存使用量 container_memory_rss RSS 的大小（以字节为单位）。 container_memory_swap 容器交换使用量（以字节为单位）。 container_memory_usage_bytes 当前内存使用量（以字节为单位），包括所有内存，无论何时访问 container_memory_working_set_bytes 当前工作集（以字节为单位）。 container_network_receive_bytes_total 接收字节的累计计数 container_network_receive_errors_total 接收时遇到的错误累积计数 container_network_receive_packets_dropped_total 接收时丢弃的数据包的累积计数 container_network_receive_packets_total 接收的数据包的累积计数 container_network_transmit_bytes_total 传输的累积字节数 container_network_transmit_errors_total 传输时遇到的错误累积计数 container_network_transmit_packets_dropped_total 传输时丢弃的数据包的累积计数 container_network_transmit_packets_total 传输的数据包的累积计数 container_processes 在容器内运行的进程数。 container_scrape_error 1 如果在获取容器指标时出错，则为 0 否则 container_sockets 容器打开的套接字数。 container_spec_cpu_period 容器的 CPU 周期。 container_spec_cpu_quota 容器的 CPU 配额。 container_spec_cpu_shares 容器的 CPU 份额。 container_spec_memory_limit_bytes 容器的内存限制。 container_spec_memory_reservation_limit_bytes 容器的内存预留限制。 container_spec_memory_swap_limit_bytes 容器的内存交换限制。 container_start_time_seconds 自 Unix 纪元以来容器的启动时间（以秒为单位）。 container_tasks_state 处于给定状态的任务数 container_threads 容器内运行的线程数 container_threads_max 容器内允许的最大线程数，如果值为零则无穷大 container_ulimits_soft 容器根进程的软 ulimit 值。如果 -1 则无限制，优先级和好除外 Grafana 面板 https://grafana.</description></item><item><title>容器非root启动</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/%E5%AE%B9%E5%99%A8%E9%9D%9Eroot%E5%90%AF%E5%8A%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/%E5%AE%B9%E5%99%A8%E9%9D%9Eroot%E5%90%AF%E5%8A%A8/</guid><description>概述 参考：
官方文档，Rootless 模式 容器非 root 启动改造的经验 参考：
zhangguanzhang，容器非 root 启动改造的经验 最近业务容器的非 root 启动改造实战案例经验，后续有新的也更新进来
改造 前提须知 这里列举些基础知识
使用 root 不安全的举例 虽然 linux 有 user namespace 隔离技术，但是 docker 不支持类似 podman 那样的给每个容器设置范围性的 uidmap 映射（当然 k8s 现在也不支持），并且容器默认配置下的权限虽然去掉了一些。但是容器内还是能对挂载进去的进行修改的，比如帖子 rm -rf * 前一定一定要看清当前目录 老哥的操作：
docker run --rm -v /mnt/sda1:/mnt/sda1 -it alpine cp /mnt/sda1/somefile.tar.gz . tar xzvf somefile.tar.gz cd somefile-v1.0 ls # 看了看内容觉得不是自己想要的，回上一级目录准备删掉： cd .. rm -rf * 嗯，alpine 默认的 workdir 是 / ，所以删除 rm -rf /*。当然还有其他不安全的，所以在业务角度上，我们需要给容器内进程设置在非 root 下最小的运行权限。</description></item><item><title>容器中使用 GPU</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/%E5%AE%B9%E5%99%A8%E4%B8%AD%E4%BD%BF%E7%94%A8-GPU/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/%E5%AE%B9%E5%99%A8%E4%B8%AD%E4%BD%BF%E7%94%A8-GPU/</guid><description>概述 参考：
Nvidia 参考：
Nvidia 官方文档，容器工具包 - 安装指南 安装 Container Toolkit(容器工具包，简称 ctk)
Notes: 若不安装 ctk，启动容器指定 GPU 时将会报错: docker: Error response from daemon: could not select device driver &amp;quot;&amp;quot; with capabilities: [[gpu]]. 3
Ubuntu
curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | sudo gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg \ &amp;amp;&amp;amp; curl -s -L https://nvidia.github.io/libnvidia-container/stable/deb/nvidia-container-toolkit.list | \ sed &amp;#39;s#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g&amp;#39; | \ sudo tee /etc/apt/sources.list.d/nvidia-container-toolkit.list apt update apt install -y nvidia-container-toolkit 最佳实践 Docker 19.03，增加了对&amp;ndash;gpus 选项的支持，我们在 docker 里面想读取 nvidia 显卡再也不需要额外的安装 nvidia-docker 了，下面开始实战 安装 nvidia-container-runtime： 查看官网（https://nvidia.</description></item><item><title>容器镜像管理</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E7%AE%A1%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E7%AE%A1%E7%90%86/</guid><description>概述 参考:
镜像加速 参考：
https://gist.github.com/y0ngb1n/7e8f16af3242c7815e7ca2f0833d3ea6 由于众所周知的原因，国内从 Docker Hub 拉取镜像会遇到困难，此时可以配置镜像加速器。
https://dockerproxy.com https://docker.m.daocloud.io https://github.com/DaoCloud/public-image-mirror 阿里云: https://&amp;lt;你的ID&amp;gt;.mirror.aliyuncs.com https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors 2024-06-06 后不再可用 科大镜像: https://docker.mirrors.ustc.edu.cn/ 网易: https://hub-mirror.c.163.com/ 七牛云加速器: https://reg-mirror.qiniu.com 2024 年 6 月 6 日，中国加大封锁力度，所有镜像源先后下架不再提供服务。
https://x.com/whyyoutouzhele/status/1798731317322133642 https://linux.do/t/topic/106872 https://mp.weixin.qq.com/s/pXrxedldKOoD97bMDYy3pQ https://docker.m.daocloud.io 还能用来 pull 到一部分主流镜像
2024 年 9 月 10 日，可以不通过代理直接从 dockerhub pull 到镜像
可用镜像站点 &amp;#34;registry-mirrors&amp;#34;: [ &amp;#34;https://docker.m.daocloud.io&amp;#34;, &amp;#34;https://dockerhub.icu&amp;#34;, &amp;#34;https://docker.1panel.live&amp;#34;, &amp;#34;https://docker.anyhub.us.kg&amp;#34;, &amp;#34;https://dhub.kubesre.xyz&amp;#34; ], https://github.com/kubesre/docker-registry-mirrors
Skopeo 参考：
GitHub 项目，containers/skopeo https://www.modb.pro/db/251368 https://blog.k8s.li/skopeo.html Skopeo 是一个命令行客户端应用程序，可以对容器镜像和镜像存储库执行各种操作。
Syntax(语法) skopeo [FLAGS] COMMAND
list-tags - 列出指定镜像的所有 Tags sync - 同步一个或多个镜像从一个位置到另一个位置 sync 子命令可以将容器镜像从一个地方拷贝到另一个地方。</description></item><item><title>使用 Tini 清理 Docker 容器僵死进程</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/%E4%BD%BF%E7%94%A8-Tini-%E6%B8%85%E7%90%86-Docker-%E5%AE%B9%E5%99%A8%E5%83%B5%E6%AD%BB%E8%BF%9B%E7%A8%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/%E4%BD%BF%E7%94%A8-Tini-%E6%B8%85%E7%90%86-Docker-%E5%AE%B9%E5%99%A8%E5%83%B5%E6%AD%BB%E8%BF%9B%E7%A8%8B/</guid><description>使用 Tini 清理 Docker 容器僵死进程
最近在Tini的仓库下看到作者对Tini优势的精彩回复，搬运过来，粗糙翻译，献给拥有同样疑惑的你。
写在前面 我们在查看一些大项目的Dockerfile时经常发现，它们的ENTRYPOINT中往往都有tini的身影：
Rancher官方镜像
Jenkins官方镜像
那Tini到底是什么？为什么大家都喜欢在镜像中使用它呢？
开发者的疑问 我注意到Jenkins的官方镜像中使用了Tini，所以我很好奇它是什么。它看起来一定很有用，可能解决了一些我不知道的问题。你能用“说人话”的方式简单解释一下Tini相对于直接以CMD运行shell脚本的优势吗？
我的几个容器的ENTRYPOINT都设置了一个 docker-entrypoint.sh 脚本，里面基本上都是以“exec &amp;ldquo;$@&amp;quot;”的方式在运行，我应该使用Tini来代替吗？
来自作者的回复 问得好！但这解释可能有点长，所以请耐心听我说（我知道你要求简短，但我真的做不到，捂脸~）。
首先，我们先简单聊聊Jenkins。当您运行Docker容器时，Docker会将它与系统的其他部分隔离开来。这种隔离发生在不同的级别（例如网络、文件系统、进程）。
但Tini并不真正关注网络或文件系统，所以让我们把注意力放在Tini的一个重要概念上：进程。
每个Docker容器都是一个PID命名空间，这意味着容器中的进程与主机上的其他进程是隔离的。PID命名空间是一棵树，从PID 1开始，通常称为init。
注意：当你运行一个Docker容器时，镜像的ENTRYPOINT就是你的根进程，即PID 1（如果你没有ENTRYPOINT，那么CMD就会作为根进程，你可能配置了一个shell脚本，或其他的可执行程序，容器的根进程具体是什么，完全取决于你的配置）。
与其他进程不同的是，PID 1有一个独特的职责，那就是收割“僵尸进程”。
那何为“僵尸进程”呢？
“僵尸进程”是指：
已经退出。 没有被其父进程wait（wait是指syscall父进程用于检索其子进程的退出代码）。 父进程已丢失（也就是说，它们的父进程已经不存在了)，这意味着他们永远不会被其父进程处理。 当“僵尸进程”被创建时（也就是说，一旦它的父进程非正常退出了，它也就跟着无法正常退出了），它会继承成为PID 1的子级，最后PID 1会负责关闭它。
换句话说，有人必须在“不负责任”的父进程离开后，对这些“孤儿”进行清理，这是PID 1的作用。
请注意，创建“僵尸进程”通常是不被允许的（也就是说，理想情况下，您应该修复代码，这样就不会创建“僵尸进程”），但是对于像Jenkins这种应用来说，它们是不可避免的：因为Jenkins通常运行的代码不是由Jenkins维护者编写的（也就是您的Jenkins构建脚本），所以他们也无法“修复代码”。
这就是Jenkins使用Tini的原因：在构建了创建“僵尸进程”的脚本后进行清理。
但其实Bash实际上也做同样的事情（收割“僵尸进程”），所以你可能会想：为什么不把Bash当作PID 1呢？
第一个问题是，如果您将Bash作为PID 1运行，那么您发送到Docker容器的所有信号（例如，使用docker stop或docker kill）最终都会发送到Bash，Bash默认不会将它们转发到任何地方（除非您自己编写代码实现）。换句话说，如果你使用Bash来运行Jenkins，那么当你运行docker stop的时候，Jenkins将永远收不到停止信号！
而Tini通过“信号转发”解决了这个问题：如果你向Tini发送信号，那么它也会向你的子进程发送同样的信号（在你的例子中是Jenkins）。
第二个问题是，一旦您的进程退出，Bash也会继续退出。如果您不小心，Bash可能会退出，退出代码为0，而您的进程实际上崩溃了（但0表示“一切正常”；这将导致Docker重启策略不符合您的预期）。因为您真正想要的可能是Bash返回与您的进程相同的退出代码。
请注意，您可以通过在Bash中创建信号处理程序来实际执行转发，并返回适当的退出代码来解决这个问题。另一方面，这需要做更多的工作，而添加Tini只是文档中的几行。
其实还有另一个解决方案可以将Jenkins作为PID 1运行，即在Jenkins中添加另一个线程来负责收割“僵尸进程”。
但这也不理想，原因有二：
首先，如果将Jenkins以PID 1的身份运行，那么很难区分继承给Jenkins的进程（应该被收割）和Jenkins自己产生的进程（不应该被收割，因为还有其他代码已经在等待它们执行）。我相信你可以用代码来解决这个问题，但还是要问一遍：当你可以把Tini放进去的时候，为什么还要写呢？
其次，如果Jenkins以PID 1运行，那么它可能不会接收到您发送的信号！
这是PID 1进程中的微妙之处。与其他进程不同的是，PID 1没有默认的信号处理程序，这意味着如果Jenkins没有明确地为SIGTERM安装信号处理程序，那么该信号在发送时将被丢弃（而默认行为是终止该过程）。
Tini确实安装了显式信号处理程序（顺便说一下，是为了转发信号），所以这些信号不再被丢弃。相反，它们被发送到Jenkins，Jenkins并不像PID 1（Tini ）那样运行，因此有默认的信号处理程序（注意：这不是Jenkins使用Tini的原因，Jenkins使用它来获取信号，但在RabbitMQ的镜像中是这个作用）。
请注意，Tini中还有一些额外的功能，在Bash或Java中很难实现（例如，Tini可以注册为“子收割者”，因此它实际上不需要作为PID 1运行来完成“僵尸进程”收割工作），但是这些功能对于一些高级应用场景来说非常有用。
希望以上内容对你有所帮助！
如果您有兴趣了解更多，以下是一些可供参考的资料：
僵尸进程详解：https://blog.phusion.nl/2015/01/20/docker-and-the-pid-1-zombie-reaping-problem/ 更简洁的解释：https://github.com/docker-library/official-images#init 最后，请注意Tini还有更多的选择（比如Phusion的基础镜像）。
Tini的主要特性是：</description></item></channel></rss>