<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Containerd 命令行工具 on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/Containerd/Containerd-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</link><description>Recent content in Containerd 命令行工具 on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/Containerd/Containerd-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/index.xml" rel="self" type="application/rss+xml"/><item><title>ctr</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/Containerd/Containerd-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/ctr/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/Containerd/Containerd-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/ctr/</guid><description>概述 参考：
官方文档 Syntax(语法) ctr [GLOBAL OPTIONS] COMMAND [OPTIONS] [ARGs&amp;hellip;]
GLOBAL OPTIONS:
COMMANDS:
plugins, plugin provides information about containerd plugins version print the client and server versions containers, c, container manage containers content manage content events, event display containerd events images, image, i manage images leases manage leases namespaces, namespace, ns manage namespaces pprof provide golang pprof outputs for containerd run run a container snapshots, snapshot # manage snapshots tasks, t, task # manage tasks install # install a new package oci # OCI tools shim # interact with a shim directly tasks # 任务管理 create 的命令创建了容器后，并没有处于运行状态，只是一个静态的容器。一个 container 对象只是包含了运行一个容器所需的资源及配置的数据结构，这意味着 namespaces、rootfs 和容器的配置都已经初始化成功了，只是用户进程(这里是 nginx)还没有启动。然而一个容器真正的运行起来是由 task 对象实现的，task 代表任务的意思，可以为容器设置网卡，还可以配置工具来对容器进行监控等。</description></item><item><title>nerdctl</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/Containerd/Containerd-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/nerdctl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/Containerd/Containerd-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/nerdctl/</guid><description>概述 参考：
GitHub 项目，containerd/nerdctl 官方文档，命令参考 https://github.com/containerd/nerdctl/blob/main/docs/command-reference.md Network nerdctl 本身没有像 docker 的 /etc/docker/daemon.json 这种配置文件，而是使用 CNI 的包 netutil 来执行网络相关的请求， CNI 默认有一个名为 nerdctl0 的 bridge 网络设备，都是常量：
pkg/netutil/netutil_unix.go
package netutil const ( DefaultNetworkName = &amp;#34;bridge&amp;#34; DefaultID = 0 DefaultCIDR = &amp;#34;10.4.0.0/24&amp;#34; ) // basicPlugins is used by ConfigListTemplate var basicPlugins = []string{&amp;#34;bridge&amp;#34;, &amp;#34;portmap&amp;#34;, &amp;#34;firewall&amp;#34;, &amp;#34;tuning&amp;#34;} 如果想要像 docker 一样配置网络，则需依赖于 CNI 默认的 /etc/cni/net.d/ 目录中创建配置文件，通常 Containerd 自带的 CNI 配置文件可以在其发布的 Release 中带 cni 名称的包中找到。效果如下：
~]# tee /etc/cni/net.d/10-containerd-net.conflist &amp;lt;&amp;lt;-&amp;#34;EOF&amp;#34; { &amp;#34;cniVersion&amp;#34;: &amp;#34;0.</description></item></channel></rss>