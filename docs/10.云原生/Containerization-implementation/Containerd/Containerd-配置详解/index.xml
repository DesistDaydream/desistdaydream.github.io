<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Containerd 配置详解 on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/Containerd/Containerd-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</link><description>Recent content in Containerd 配置详解 on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/Containerd/Containerd-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/index.xml" rel="self" type="application/rss+xml"/><item><title>Containerd 配置详解</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/Containerd/Containerd-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/Containerd-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/Containerd/Containerd-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/Containerd-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</guid><description>概述 参考：
Manual(手册),containerd-config.toml(5) Debian Manual Containerd 使用 TOML 作为配置文件的格式，默认配置文件为 /etc/containerd/config.toml，我们可以通过命令来生成一个包含所有配置字段的默认配置文件
mkdir -p /etc/containerd containerd config default &amp;gt; /etc/containerd/config.toml 配置文件详解 [通用] 配置 version = 2 # root = &amp;lt;STRING&amp;gt; # Containerd 持久化数据路径。默认值：/var/lib/containerd。 state = &amp;lt;STRING&amp;gt; # Containerd 临时数据路径。默认值：/run/containerd。 oom_score = 0 # 设置 Containerd 的 OOM 权重。默认值：0。 Containerd 是容器的守护者，一旦发生内存不足的情况，理想的情况应该是先杀死容器，而不是杀死 Containerd。所以需要调整 Containerd 的 OOM 权重，减少其被 OOM Kill 的几率。最好是将 oom_score 的值调整为比其他守护进程略低的值。这里的 oom_socre 其实对应的是 /proc/&amp;lt;pid&amp;gt;/oom_socre_adj，在早期的 Linux 内核版本里使用 oom_adj 来调整权重, 后来改用 oom_socre_adj 了。该文件描述如下： 在计算最终的 badness score 时，会在计算结果是中加上 oom_score_adj ,这样用户就可以通过该在值来保护某个进程不被杀死或者每次都杀某个进程。其取值范围为 -1000 到 1000。如果将该值设置为 -1000，则进程永远不会被杀死，因为此时 badness score 永远返回 0。建议 Containerd 将该值设置为 -999 到 0 之间。如果作为 Kubernetes 的 Worker 节点，可以考虑设置为 -999。</description></item><item><title>Plugin 配置</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/Containerd/Containerd-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/Plugin-%E9%85%8D%E7%BD%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/Containerd/Containerd-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/Plugin-%E9%85%8D%E7%BD%AE/</guid><description>概述 参考：
GitHub 项目文档，containerd/docs/PLUGINS.md 本篇笔记的记录格式 Containerd 在 TOML 配置文件中，通过 TOML 表的方式来描述一个插件及其具有的功能，效果如下：
[plugins.&amp;quot;PLUGIN&amp;quot;] PLUGIN = TYPE.ID TYPE = io.containerd.NAME.VERSION 所以，一个完整描述插件功能的的 TOML 表应该是这样的：
[plugins.&amp;quot;io.containerd.NAME.VERSION.NAME&amp;quot;.NAME....] 这篇笔记在记录时，则省略前面的通用字符串(plugins.&amp;quot;io.containerd.)，只以最后的关键字来描述，以获得更好的阅读效果。
比如下文中标题一的 [grpc.v1.cri] 下的标题二的 [registry] 下的标题三的 [mirrors]下的 docker.io 镜像仓库的镜像配置，反应到配置文件中，就是这样的：
[plugins] [plugins.&amp;#34;io.containerd.grpc.v1.cri&amp;#34;] [plugins.&amp;#34;io.containerd.grpc.v1.cri&amp;#34;.registry] [plugins.&amp;#34;io.containerd.grpc.v1.cri&amp;#34;.registry.mirrors] [plugins.&amp;#34;io.containerd.grpc.v1.cri&amp;#34;.registry.mirrors.&amp;#34;docker.io&amp;#34;] endpoint = [&amp;#34;https://ac1rmo5p.mirror.aliyuncs.com&amp;#34;] 带 [] 的都是一个一个的表，表只是用来进行分组，表中的每一个 键值对 才是真实的配置。
[gc.v1.scheduler] - 调度器插件 [grpc.v1.cri] - CRI 插件 参考：
GitHub 项目文档，containerd/docs/cri GitHub 项目文档，containerd/docs/cri/config.md-CRI 插件配置指南 注意：
CRI 插件是当 Containerd 作为 CRI 时所使用的配置，所以 ctr、nerdctl 工具在执行某些命令时，有可能不会调用这些配置，就比如其中的 registry 配置，就算配置了，ctr pull 和 nerdctl pull 命令也无法享受到效果。但是使用 crictl 命令是没问题的。 sanbox_image(STRING) # 启动 Pod 时要使用的 Infra 容器。默认值：k8s.</description></item></channel></rss>