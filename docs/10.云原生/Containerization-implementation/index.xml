<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Containerization implementation on 断念梦的站点</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/</link><description>Recent content in Containerization implementation on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/index.xml" rel="self" type="application/rss+xml"/><item><title>Containerization implementation</title><link>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/Containerization-implementation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/10.%E4%BA%91%E5%8E%9F%E7%94%9F/Containerization-implementation/Containerization-implementation/</guid><description>概述 参考：
OCI Runtime 规范的实现 参考：
公众号-k8s 技术圈，Containerd 深度剖析-runtime 篇 当人们想到容器运行时，可能会想到一连串的相关概念；runc、runv、lxc、lmctfy、Docker（containerd）、rkt、cri-o。每一个都是基于不同的场景而实现的，均实现了不同的功能。如 containerd 和 cri-o，实际均可使用 runc 来运行容器，但其实现了如镜像管理、容器 API 等功能，可以将这些看作是比 runc 具备的更高级的功能。
可以发现，容器运行时是相当复杂的。每个运行时都涵盖了从低级到高级的不同部分，如下图所示
根据功能范围划分，将其分为 Low level Container Runtime(低级容器运行时) 和 High level Container Runtime(高级容器运行时)
低级容器运行时 # 只关注容器的本身运行 高级容器运行时 # 支持更多高级功能的运行时，如镜像管理及一些 gRPC/Web APIs，通常被称为 需要注意的是，低级运行时和高级运行时有本质区别，各自解决的问题也不同。
低级运行时 低级运行时的功能有限，通常执行运行容器的低级任务。大多数开发者日常工作中不会使用到。其一般指按照 OCI 规范、能够接收可运行 roofs 文件系统和配置文件并运行隔离进程的实现。这种运行时只负责将进程运行在相对隔离的资源空间里，不提供存储实现和网络实现。但是其他实现可以在系统中预设好相关资源，低级容器运行时可通过 config.json 声明加载对应资源。低级运行时的特点是底层、轻量，限制也很一目了然：
只认识 rootfs 和 config.json，没有其他镜像能力 不提供网络实现 不提供持久实现 无法跨平台等 RunC 参考：
GitHub 项目，opencontainers/runc runc 是一个 CLI 工具，用于根据 OCI 规范生成和运行容器。
youki 参考：
GitHub 项目，containers/youki 使用 Rust 语言写的，类似于 Runc 的容器运行时，</description></item></channel></rss>