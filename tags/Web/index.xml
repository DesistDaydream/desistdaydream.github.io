<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Web on 断念梦的站点</title><link>https://desistdaydream.github.io/tags/Web/</link><description>Recent content in Web on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/tags/Web/index.xml" rel="self" type="application/rss+xml"/><item><title>Nginx</title><link>https://desistdaydream.github.io/docs/Web/Nginx/Nginx/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/Web/Nginx/Nginx/</guid><description>概述 参考：
GitHub 项目，nginx/nginx 原始代码：https://hg.nginx.org/nginx/ org 官方网站 官方网站 官方网站,动态模块列表 Nginx 称为 Engine X，可以做为 Web 服务器、代理服务器、缓存服务器、负载均衡器 等来使用。
传统上基于进程或线程模型架构的 web 服务通过每进程或每线程处理并发连接请求，这势必会在网络和 I/O 操作时产生阻塞，其另一个必然结果则是对内存或 CPU 的利用率低下。生成一个新的进程/线程需要事先备好其运行时环境，这包括为其分配堆内存和栈内存，以及为其创建新的执行上下文等。这些操作都需要占用 CPU，而且过多的进程/线程还会带来线程抖动或频繁的上下文切换，系统性能也会由此进一步下降。
在设计的最初阶段，nginx 的主要着眼点就是其高性能以及对物理计算资源的高密度利用，因此其采用了不同的架构模型。受启发于多种操作系统设计中基于“事件”的高级处理机制，nginx 采用了模块化、事件驱动、异步、单线程及非阻塞的架构，并大量采用了多路复用及事件通知机制。在 nginx 中，连接请求由为数不多的几个仅包含一个线程的进程 worker 以高效的回环(run-loop)机制进行处理，而每个 worker 可以并行处理数千个的并发连接及请求。
Nginx 会按需同时运行多个进程：一个主进程(master)和几个工作进程(worker)，配置了缓存时还会有缓存加载器进程(cache loader)和缓存管理器进程(cache manager)等。所有进程均是仅含有一个线程，并主要通过“共享内存”的机制实现进程间通信。主进程以 root 用户身份运行，而 worker、cache loader 和 cache manager 均应以非特权用户身份运行。
Nginx 特性：
模块化设计，较好的扩展性，所有配置均有指定的模块进行处理。 高可靠 master &amp;ndash;&amp;gt; worker，主控进程不接收和响应用户请求，主控进程负责解析配置文件并生成多个工作进程，工作进程来响应用户请求 主控进程读取并验证配置，创建或绑定套接字，启动及终止和维护 worker 进程的个数，无须重启进程让新配置的配置文件进行加载，以及完成平滑版本升级等等 工作进程，负责缓存加载的(反向代理时候用)，负责响应用户请求，cache manager 缓存管理 低内存消耗，10000 个 keep-alive 模式下的 connection，仅需 2.5MB 内存 支持热部署，不停机而更新配置文件，日志文件滚动，升级程序版本 支持事件驱动、AIO、mmap 基本功能：
静态资源的 web 服务器，能缓存打开的文件描述符 http、SMTP、pop3 协议的反向代理服务器 缓存加速、负载均衡 支持 FastCGI(fpm，LNMP)，uWSGI(Python)等 模块化(非 DSO 机制)、过滤器 zip、SSI 及图像的大小调整 支持 SSL(https) 扩展功能</description></item></channel></rss>