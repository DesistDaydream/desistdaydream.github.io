<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PCI on 断念梦的站点</title><link>https://desistdaydream.github.io/tags/PCI/</link><description>Recent content in PCI on 断念梦的站点</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/tags/PCI/index.xml" rel="self" type="application/rss+xml"/><item><title>Linux 网络设备</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Network/Linux-%E7%BD%91%E7%BB%9C%E6%A0%88%E7%AE%A1%E7%90%86/Linux-%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87/Linux-%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Network/Linux-%E7%BD%91%E7%BB%9C%E6%A0%88%E7%AE%A1%E7%90%86/Linux-%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87/Linux-%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87/</guid><description>概述 参考：
Linux 内核文档，管理员指南 - ABI -sysfs-class-net Manual(手册)，netdevice(7) 脚注在文末
Linux 网络设备归属于 PCI 总线类型。
关联文件 sysfs 中的网络设备信息 每个网络设备，都会在 sysfs 中注册（主要是与 PCI 相关），有一系列文件用来描述或定义这些网络设备。
在 /sys/class/net/${NetDeviceName}/ 目录下可以找到已在内核注册的关于网络设备的信息
Note: ${NetDeviceName} 是指向 /sys/devices/pciXXX/XXX/.../XXX/${NetDeviceName}/ 的 Symbolic link
./type # 网络设备的类型。文件内容是 10 进制数字。从 if_arp.h1 代码中（stackoverflow 也有相关问题）找到数字对应的设备类型表和该设备的定义（e.g. 1 表示 ARPHRD_ETHER），这个 C 的头文件将网络设备分为如下几大块
ARP 协议硬件定义 # ARP 的 RFC 标准中，定义了这些，并且 IANA2 中也维护了这些注册信息。 比如 #define ARPHRD_ETHER 1 这行代码意味着，type 文件的内容为 1 的话，表示该网络设备是 ARPHRD_ETHER（也就是常见的网卡设备） 非 ARP 硬件的虚拟网络设备 # Linux 自身实现的一些虚拟网络设备 TODO: 其他信息待整理 .</description></item><item><title>Driver</title><link>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Hardware/Driver/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Kernel/Hardware/Driver/</guid><description>概述 参考：
Linux 中的 Driver(驱动) 管理。
部分 BUS_TYPE 可以在 /sys/bus/${BUS_TYPE}/drivers/ 可以找到各类型总线下的驱动。e.g. PCI 设备、USB 设备、etc. 。
Tip: 并不是所有的 BUS_TYPE 都有驱动，e.g. /sys/bus/memory/drivers/ 目录是空的
PCI /sys/bus/pci/drivers/${DRIVER}/ 目录是某个具体驱动下关联的设备的 PCI Addr 以及驱动相关操作
./${PCI_ADDR} # 使用了本驱动的设备的 PCI Addr 软链接，指向 /sys/devices/pciXXX/XXX/... 某个目录 ./bind # 向该文件写入 PCI Addr 将会让设备与内核绑定 ./unbind # 向该文件写入 PCI Addr 将会让设备从内核解绑 最佳实践 网卡的绑定与解绑 我这里用网卡演示绑定和解绑的过程
可以通过 lspci 命令查看该设备在内核中可以使用的驱动。
~]# lspci -s 0000:21:00.1 -v 21:00.1 Ethernet controller: Intel Corporation Ethernet Controller X710 for 10GbE SFP+ (rev 02) Subsystem: Intel Corporation Ethernet Converged Network Adapter X710 .</description></item></channel></rss>