<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦的站点 – Network</title><link>https://desistdaydream.github.io/tags/Network/</link><description>Recent content in Network on 断念梦的站点</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Mon, 02 Nov 2020 10:39:00 +0000</lastBuildDate><atom:link href="https://desistdaydream.github.io/tags/Network/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Nginx</title><link>https://desistdaydream.github.io/docs/Web/Nginx/Nginx/</link><pubDate>Mon, 02 Nov 2020 10:39:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/Web/Nginx/Nginx/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/nginx/nginx">GitHub 项目，nginx/nginx&lt;/a>
&lt;ul>
&lt;li>原始代码：&lt;a href="https://hg.nginx.org/nginx/">https://hg.nginx.org/nginx/&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="http://nginx.org/">org 官方网站&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.nginx.com/">官方网站&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.nginx.com/products/nginx/modules/">官方网站,动态模块列表&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Nginx 称为 Engine X，可以做为 &lt;a href="https://desistdaydream.github.io/docs/Web/Web.md">Web&lt;/a> 服务器、代理服务器、缓存服务器、负载均衡器 等来使用。&lt;/p>
&lt;p>传统上基于进程或线程模型架构的 web 服务通过每进程或每线程处理并发连接请求，这势必会在网络和 I/O 操作时产生阻塞，其另一个必然结果则是对内存或 CPU 的利用率低下。生成一个新的进程/线程需要事先备好其运行时环境，这包括为其分配堆内存和栈内存，以及为其创建新的执行上下文等。这些操作都需要占用 CPU，而且过多的进程/线程还会带来线程抖动或频繁的上下文切换，系统性能也会由此进一步下降。&lt;/p>
&lt;p>在设计的最初阶段，nginx 的主要着眼点就是其高性能以及对物理计算资源的高密度利用，因此其采用了不同的架构模型。受启发于多种操作系统设计中基于“事件”的高级处理机制，nginx 采用了模块化、事件驱动、异步、单线程及非阻塞的架构，并大量采用了多路复用及事件通知机制。在 nginx 中，连接请求由为数不多的几个仅包含一个线程的进程 worker 以高效的回环(run-loop)机制进行处理，而每个 worker 可以并行处理数千个的并发连接及请求。&lt;/p>
&lt;p>Nginx 会按需同时运行多个进程：一个主进程(master)和几个工作进程(worker)，配置了缓存时还会有缓存加载器进程(cache loader)和缓存管理器进程(cache manager)等。所有进程均是仅含有一个线程，并主要通过“共享内存”的机制实现进程间通信。主进程以 root 用户身份运行，而 worker、cache loader 和 cache manager 均应以非特权用户身份运行。&lt;/p>
&lt;p>Nginx 特性：&lt;/p>
&lt;ol>
&lt;li>模块化设计，较好的扩展性，所有配置均有指定的模块进行处理。&lt;/li>
&lt;li>高可靠 master &amp;ndash;&amp;gt; worker，主控进程不接收和响应用户请求，主控进程负责解析配置文件并生成多个工作进程，工作进程来响应用户请求
&lt;ol>
&lt;li>主控进程读取并验证配置，创建或绑定套接字，启动及终止和维护 worker 进程的个数，无须重启进程让新配置的配置文件进行加载，以及完成平滑版本升级等等&lt;/li>
&lt;li>工作进程，负责缓存加载的(反向代理时候用)，负责响应用户请求，cache manager 缓存管理&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>低内存消耗，10000 个 keep-alive 模式下的 connection，仅需 2.5MB 内存&lt;/li>
&lt;li>支持热部署，不停机而更新配置文件，日志文件滚动，升级程序版本&lt;/li>
&lt;li>支持事件驱动、AIO、mmap&lt;/li>
&lt;/ol>
&lt;p>基本功能：&lt;/p>
&lt;ul>
&lt;li>静态资源的 web 服务器，能缓存打开的文件描述符&lt;/li>
&lt;li>http、SMTP、pop3 协议的反向代理服务器&lt;/li>
&lt;li>缓存加速、负载均衡&lt;/li>
&lt;li>支持 FastCGI(fpm，LNMP)，uWSGI(Python)等&lt;/li>
&lt;li>模块化(非 DSO 机制)、过滤器 zip、SSI 及图像的大小调整&lt;/li>
&lt;li>支持 SSL(https)&lt;/li>
&lt;/ul>
&lt;p>扩展功能&lt;/p>
&lt;ul>
&lt;li>基于名称和 IP 的虚拟主机&lt;/li>
&lt;li>支持 keepalive&lt;/li>
&lt;li>支持平滑升级&lt;/li>
&lt;li>定制访问日志&lt;/li>
&lt;li>支持 url 重写&lt;/li>
&lt;li>支持路径别名&lt;/li>
&lt;li>支持基于 IP 及用户的访问控制&lt;/li>
&lt;li>支持速率限制，支持并发数限制&lt;/li>
&lt;/ul>
&lt;h2 id="nginx-架构">Nginx 架构&lt;a class="td-heading-self-link" href="#nginx-%e6%9e%b6%e6%9e%84" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>详见 &lt;a href="https://desistdaydream.github.io/docs/Web/Nginx/Nginx%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.md">Nginx 源码解析&lt;/a>&lt;/p>
&lt;h2 id="总结">总结&lt;a class="td-heading-self-link" href="#%e6%80%bb%e7%bb%93" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>看似很复杂，其实总结起来 Nginx 主要就是两个功能，这两个功能也是配置文件中的主要内容，各种指令都离不开这两方面。&lt;/p>
&lt;ol>
&lt;li>定义接收流量的人口(port 或者 域名等)&lt;/li>
&lt;li>定义处理流量的规则(转发或者丢弃等)&lt;/li>
&lt;/ol>
&lt;p>所以，&lt;strong>Nginx 的本质，就是流量处理&lt;/strong>&lt;/p>
&lt;h1 id="nginx-部署">Nginx 部署&lt;a class="td-heading-self-link" href="#nginx-%e9%83%a8%e7%bd%b2" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="docker-运行-nginx">docker 运行 Nginx&lt;a class="td-heading-self-link" href="#docker-%e8%bf%90%e8%a1%8c-nginx" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>(可选)需要在宿主机的 /etc/nginx 下准备 nginx 的配置文件。这些基本配置文件可以先启动一个 nginx 容器，将容器内的配置文件全部拷贝到宿主机上即可。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker run -d --name nginx --network host --restart&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>always &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> -v /etc/nginx:/etc/nginx:ro &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> nginx:stable-alpine
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>也可以使用自己的配置来运行 nginx&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>mkdir -p /opt/nginx/conf/stream.d
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 生成配置文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cat &amp;gt; /opt/nginx/conf/nginx.conf &lt;span style="color:#4e9a06">&amp;lt;&amp;lt;EOF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">user nginx;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">worker_processes auto;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">error_log /var/log/nginx/error.log warn;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">pid /var/run/nginx.pid;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">events {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> worker_connections 1024;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">}
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">stream {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> include /etc/nginx/stream.d/*.conf;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">}
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">http {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">}
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 运行&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker run -d --name nginx --network host --restart&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>always &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> -v /opt/nginx/conf/stream.d:/etc/nginx/stream.d:ro &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> -v /opt/nginx/conf/nginx.conf:/etc/nginx/nginx.conf:ro &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> nginx:stable-alpine
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>挂载一些静态文件到容器中以响应客户端的 web 请求&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">StaticFiles&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;/root/projects/DesistDaydream/javascript-learning/9_browser&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker run -d --name nginx --network host --restart&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>always &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> -v &lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">StaticFiles&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>:/usr/share/nginx/html:ro &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> nginx:stable-alpine
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="nginx-关联文件">Nginx 关联文件&lt;a class="td-heading-self-link" href="#nginx-%e5%85%b3%e8%81%94%e6%96%87%e4%bb%b6" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;strong>/etc/nginx/&lt;/strong> # nginx 运行所需配置所在目录&lt;/p>
&lt;ul>
&lt;li>&lt;strong>./nginx.conf&lt;/strong> # nginx 主程序运行所读取的默认配置文件。&lt;/li>
&lt;/ul>
&lt;p>配置文件官方介绍：&lt;a href="https://docs.nginx.com/nginx/admin-guide/basic-functionality/managing-configuration-files/">https://docs.nginx.com/nginx/admin-guide/basic-functionality/managing-configuration-files/&lt;/a>&lt;/p>
&lt;p>修改完配置后，可以使用 nginx -s reload 命令使之生效&lt;/p>
&lt;p>下面是 nginx 默认的基本配置示例，可以实现一个简单的 web 服务。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">user&lt;/span> &lt;span style="color:#4e9a06">nginx&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># 指定以nginx用户来运行nginx进程
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">worker_processes&lt;/span> &lt;span style="color:#4e9a06">auto&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">error_log&lt;/span> &lt;span style="color:#4e9a06">/var/log/nginx/error.log&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">pid&lt;/span> &lt;span style="color:#4e9a06">/run/nginx.pid&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">include&lt;/span> &lt;span style="color:#000">/usr/share/nginx/modules/*.conf&lt;/span>; &lt;span style="color:#8f5902;font-style:italic">#包含/usr/share/nginx/modules/目录下以.conf为结尾的所有文件，加载其中的配置
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">events&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">worker_connections&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1024&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">http&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">log_format&lt;/span> &lt;span style="color:#4e9a06">main&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;&lt;/span>&lt;span style="color:#000">$remote_addr&lt;/span> &lt;span style="color:#4e9a06">-&lt;/span> &lt;span style="color:#000">$remote_user&lt;/span> &lt;span style="color:#4e9a06">[&lt;/span>&lt;span style="color:#000">$time_local]&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000">$request&amp;#34;&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#39;&lt;/span>&lt;span style="color:#000">$status&lt;/span> &lt;span style="color:#000">$body_bytes_sent&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000">$http_referer&amp;#34;&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#39;&amp;#34;&lt;/span>&lt;span style="color:#000">$http_user_agent&amp;#34;&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000">$http_x_forwarded_for&amp;#34;&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">access_log&lt;/span> &lt;span style="color:#4e9a06">/var/log/nginx/access.log&lt;/span> &lt;span style="color:#4e9a06">main&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">sendfile&lt;/span> &lt;span style="color:#000">on&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">tcp_nopush&lt;/span> &lt;span style="color:#000">on&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">tcp_nodelay&lt;/span> &lt;span style="color:#000">on&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">keepalive_timeout&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">65&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">types_hash_max_size&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2048&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">include&lt;/span> &lt;span style="color:#4e9a06">/etc/nginx/mime.types&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">default_type&lt;/span> &lt;span style="color:#4e9a06">application/octet-stream&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">include&lt;/span> &lt;span style="color:#4e9a06">/etc/nginx/conf.d/*.conf&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">server&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">listen&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">80&lt;/span> &lt;span style="color:#4e9a06">default_server&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">listen&lt;/span> &lt;span style="color:#4e9a06">[::]:80&lt;/span> &lt;span style="color:#4e9a06">default_server&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">server_name&lt;/span> &lt;span style="color:#4e9a06">_&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">root&lt;/span> &lt;span style="color:#4e9a06">/usr/share/nginx/html&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># 指定nginx的工作的/目录。i.e.location中/目录的起始位置
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">include&lt;/span> &lt;span style="color:#4e9a06">/etc/nginx/default.d/*.conf&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">location&lt;/span> &lt;span style="color:#4e9a06">/&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">error_page&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">404&lt;/span> &lt;span style="color:#4e9a06">/404.html&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">location&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">/40x.html&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">error_page&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">500&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">502&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">503&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">504&lt;/span> &lt;span style="color:#4e9a06">/50x.html&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">location&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">/50x.html&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="命令行工具">命令行工具&lt;a class="td-heading-self-link" href="#%e5%91%bd%e4%bb%a4%e8%a1%8c%e5%b7%a5%e5%85%b7" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="应用示例">应用示例&lt;a class="td-heading-self-link" href="#%e5%ba%94%e7%94%a8%e7%a4%ba%e4%be%8b" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>让nginx在前台运行，常用于container中&lt;/p>
&lt;ul>
&lt;li>&lt;code>nginx -g 'daemon off;'&lt;/code>&lt;/li>
&lt;/ul></description></item></channel></rss>