<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>断念梦的站点 – Python</title><link>https://desistdaydream.github.io/tags/Python/</link><description>Recent content in Python on 断念梦的站点</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://desistdaydream.github.io/tags/Python/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: NumPy</title><link>https://desistdaydream.github.io/docs/12.AI/%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97/NumPy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/12.AI/%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97/NumPy/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/numpy/numpy">GitHub 项目，numpy/numpy&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://numpy.org/">官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/NumPy">Wiki, NumPy&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>NumPy&lt;/strong> 是使用 Python 进行科学计算的基础包。&lt;/p>
&lt;h1 id="安装">安装&lt;a class="td-heading-self-link" href="#%e5%ae%89%e8%a3%85" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>pip install numpy
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: PyTorch</title><link>https://desistdaydream.github.io/docs/12.AI/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/PyTorch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://desistdaydream.github.io/docs/12.AI/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/PyTorch/</guid><description>
&lt;h1 id="概述">概述&lt;a class="td-heading-self-link" href="#%e6%a6%82%e8%bf%b0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/pytorch/pytorch">GitHub 项目，pytorch/pytorch&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://pytorch.org/">官网&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>PyTorch 是一个使用 &lt;a href="https://desistdaydream.github.io/docs/12.AI/%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97/Torch.md">Torch&lt;/a> 构建的 Python 包，提供两个高级特性：&lt;/p>
&lt;ul>
&lt;li>带有强大 GPU 加速的张量计算（类似于 NumPy）&lt;/li>
&lt;li>基于计算图的自动微分系统构建的深度神经网络&lt;/li>
&lt;/ul>
&lt;h2 id="安装-pytorch">安装 PyTorch&lt;a class="td-heading-self-link" href="#%e5%ae%89%e8%a3%85-pytorch" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;blockquote>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://pytorch.org/get-started/locally/">官方文档，开始&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>安装 PyTorch 分为使用 GPU 和 CPU 两种，比如：&lt;/p>
&lt;ul>
&lt;li>CPU
&lt;ul>
&lt;li>&lt;code>pip3 install torch torchvision torchaudio&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>GPU
&lt;ul>
&lt;li>&lt;code>pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu121&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>GPU 版的 PyTorch 依赖 CUDA&lt;/p>
&lt;blockquote>
&lt;p>Note: 如果我们想要使用 GPU 但是却安装的 CPU 版的 PyTorch，将会报错：&lt;code>Torch not compiled with CUDA enabled&lt;/code>。说白了就是下载的 PyTorch 不是在 CUDA 环境下编译的，无法处理 CUDA 的请求。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>[!Tip]
若安装速度太慢，可以在 pip install 命令中看到 Downloading 的 URL，手动下载，比如 &lt;code>https://download.pytorch.org/whl/cu121/torch-2.4.1+cu121-cp311-cp311-win_amd64.whl&lt;/code>，然后先执行 &lt;code>pip intall torch-2.4.1+cu121-cp311-cp311-win_amd64.whl&lt;/code> 进行本地安装，再执行上面的命令安装其他包&lt;/p>
&lt;/blockquote>
&lt;p>安装完成后可以通过如下代码在 Python 解释器中验证 CUDA 是否可用，若可用，将输出 True&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">torch&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">torch&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">cuda&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">is_available&lt;/span>&lt;span style="color:#000;font-weight:bold">())&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="学习">学习&lt;a class="td-heading-self-link" href="#%e5%ad%a6%e4%b9%a0" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;a href="https://www.bilibili.com/video/BV1GC4y15736">B 站，10分钟入门神经网络 PyTorch 手写数字识别&lt;/a>&lt;/p>
&lt;h1 id="torchscript">TorchScript&lt;a class="td-heading-self-link" href="#torchscript" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;p>&lt;a href="https://pytorch.org/docs/stable/jit.html">https://pytorch.org/docs/stable/jit.html&lt;/a>&lt;/p>
&lt;p>TorchScript 是一种从 PyTorch 代码创建可序列化和可优化模型的方法。任何 TorchScript 程序都可以从 Python 进程保存并加载到不存在 Python 依赖项的进程中。&lt;/p>
&lt;p>TorchScript 是 PyTorch 模型（nn.Module 的子类）的中间表示形式，可以在 C++ 等高性能环境中运行。&lt;/p>
&lt;p>人话：就是一种读写模型的协议，通常以 .pt、.pth、.torchscript 作为文件后缀&lt;/p></description></item></channel></rss>